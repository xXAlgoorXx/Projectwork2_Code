
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d88c  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  3401dfe0  3401dfe0  0001dfe0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000026bc  3401e000  3401e000  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  340206bc  340206bc  000208d8  2**0
                  CONTENTS
  5 .ARM          00000008  340206bc  340206bc  000206bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  340206c4  340208d8  000208d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  340206c4  340206c4  000206c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  340206c8  340206c8  000206c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000020c  340206cc  340206cc  000206cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000006d8  340208d8  340208d8  000208d8  2**2
                  ALLOC
 11 ._user_heap_stack 00004200  34020fb0  34020fb0  000208d8  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  000208d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00043563  00000000  00000000  00020912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006297  00000000  00000000  00063e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003270  00000000  00000000  0006a110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000275d  00000000  00000000  0006d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00079cd9  00000000  00000000  0006fadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ed64  00000000  00000000  000e97b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    003a2658  00000000  00000000  0012851a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  004cab72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e7a4  00000000  00000000  004cabb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000155  00000000  00000000  004d935c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	340208d8 	.word	0x340208d8
3400076c:	00000000 	.word	0x00000000
34000770:	3401dfc4 	.word	0x3401dfc4

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	340208dc 	.word	0x340208dc
3400078c:	3401dfc4 	.word	0x3401dfc4

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b9b0 	b.w	34000b18 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	4688      	mov	r8, r1
340007d8:	4604      	mov	r4, r0
340007da:	468e      	mov	lr, r1
340007dc:	2b00      	cmp	r3, #0
340007de:	d14a      	bne.n	34000876 <__udivmoddi4+0xa6>
340007e0:	428a      	cmp	r2, r1
340007e2:	4617      	mov	r7, r2
340007e4:	d95f      	bls.n	340008a6 <__udivmoddi4+0xd6>
340007e6:	fab2 f682 	clz	r6, r2
340007ea:	b14e      	cbz	r6, 34000800 <__udivmoddi4+0x30>
340007ec:	f1c6 0320 	rsb	r3, r6, #32
340007f0:	fa01 fe06 	lsl.w	lr, r1, r6
340007f4:	40b7      	lsls	r7, r6
340007f6:	40b4      	lsls	r4, r6
340007f8:	fa20 f303 	lsr.w	r3, r0, r3
340007fc:	ea43 0e0e 	orr.w	lr, r3, lr
34000800:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000804:	fa1f fc87 	uxth.w	ip, r7
34000808:	0c23      	lsrs	r3, r4, #16
3400080a:	fbbe f1f8 	udiv	r1, lr, r8
3400080e:	fb08 ee11 	mls	lr, r8, r1, lr
34000812:	fb01 f20c 	mul.w	r2, r1, ip
34000816:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
3400081a:	429a      	cmp	r2, r3
3400081c:	d907      	bls.n	3400082e <__udivmoddi4+0x5e>
3400081e:	18fb      	adds	r3, r7, r3
34000820:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
34000824:	d202      	bcs.n	3400082c <__udivmoddi4+0x5c>
34000826:	429a      	cmp	r2, r3
34000828:	f200 8154 	bhi.w	34000ad4 <__udivmoddi4+0x304>
3400082c:	4601      	mov	r1, r0
3400082e:	1a9b      	subs	r3, r3, r2
34000830:	b2a2      	uxth	r2, r4
34000832:	fbb3 f0f8 	udiv	r0, r3, r8
34000836:	fb08 3310 	mls	r3, r8, r0, r3
3400083a:	fb00 fc0c 	mul.w	ip, r0, ip
3400083e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34000842:	4594      	cmp	ip, r2
34000844:	d90b      	bls.n	3400085e <__udivmoddi4+0x8e>
34000846:	18ba      	adds	r2, r7, r2
34000848:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
3400084c:	bf2c      	ite	cs
3400084e:	2401      	movcs	r4, #1
34000850:	2400      	movcc	r4, #0
34000852:	4594      	cmp	ip, r2
34000854:	d902      	bls.n	3400085c <__udivmoddi4+0x8c>
34000856:	2c00      	cmp	r4, #0
34000858:	f000 813f 	beq.w	34000ada <__udivmoddi4+0x30a>
3400085c:	4618      	mov	r0, r3
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	eba2 020c 	sub.w	r2, r2, ip
34000866:	2100      	movs	r1, #0
34000868:	b11d      	cbz	r5, 34000872 <__udivmoddi4+0xa2>
3400086a:	40f2      	lsrs	r2, r6
3400086c:	2300      	movs	r3, #0
3400086e:	e9c5 2300 	strd	r2, r3, [r5]
34000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000876:	428b      	cmp	r3, r1
34000878:	d905      	bls.n	34000886 <__udivmoddi4+0xb6>
3400087a:	b10d      	cbz	r5, 34000880 <__udivmoddi4+0xb0>
3400087c:	e9c5 0100 	strd	r0, r1, [r5]
34000880:	2100      	movs	r1, #0
34000882:	4608      	mov	r0, r1
34000884:	e7f5      	b.n	34000872 <__udivmoddi4+0xa2>
34000886:	fab3 f183 	clz	r1, r3
3400088a:	2900      	cmp	r1, #0
3400088c:	d14e      	bne.n	3400092c <__udivmoddi4+0x15c>
3400088e:	4543      	cmp	r3, r8
34000890:	f0c0 8112 	bcc.w	34000ab8 <__udivmoddi4+0x2e8>
34000894:	4282      	cmp	r2, r0
34000896:	f240 810f 	bls.w	34000ab8 <__udivmoddi4+0x2e8>
3400089a:	4608      	mov	r0, r1
3400089c:	2d00      	cmp	r5, #0
3400089e:	d0e8      	beq.n	34000872 <__udivmoddi4+0xa2>
340008a0:	e9c5 4e00 	strd	r4, lr, [r5]
340008a4:	e7e5      	b.n	34000872 <__udivmoddi4+0xa2>
340008a6:	2a00      	cmp	r2, #0
340008a8:	f000 80ac 	beq.w	34000a04 <__udivmoddi4+0x234>
340008ac:	fab2 f682 	clz	r6, r2
340008b0:	2e00      	cmp	r6, #0
340008b2:	f040 80bb 	bne.w	34000a2c <__udivmoddi4+0x25c>
340008b6:	1a8b      	subs	r3, r1, r2
340008b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
340008bc:	b2bc      	uxth	r4, r7
340008be:	2101      	movs	r1, #1
340008c0:	0c02      	lsrs	r2, r0, #16
340008c2:	b280      	uxth	r0, r0
340008c4:	fbb3 fcfe 	udiv	ip, r3, lr
340008c8:	fb0e 331c 	mls	r3, lr, ip, r3
340008cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
340008d0:	fb04 f20c 	mul.w	r2, r4, ip
340008d4:	429a      	cmp	r2, r3
340008d6:	d90e      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d8:	18fb      	adds	r3, r7, r3
340008da:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	429a      	cmp	r2, r3
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80ec 	beq.w	34000acc <__udivmoddi4+0x2fc>
340008f4:	46c4      	mov	ip, r8
340008f6:	1a9b      	subs	r3, r3, r2
340008f8:	fbb3 f8fe 	udiv	r8, r3, lr
340008fc:	fb0e 3318 	mls	r3, lr, r8, r3
34000900:	fb04 f408 	mul.w	r4, r4, r8
34000904:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34000908:	4294      	cmp	r4, r2
3400090a:	d90b      	bls.n	34000924 <__udivmoddi4+0x154>
3400090c:	18ba      	adds	r2, r7, r2
3400090e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
34000912:	bf2c      	ite	cs
34000914:	2001      	movcs	r0, #1
34000916:	2000      	movcc	r0, #0
34000918:	4294      	cmp	r4, r2
3400091a:	d902      	bls.n	34000922 <__udivmoddi4+0x152>
3400091c:	2800      	cmp	r0, #0
3400091e:	f000 80d1 	beq.w	34000ac4 <__udivmoddi4+0x2f4>
34000922:	4698      	mov	r8, r3
34000924:	1b12      	subs	r2, r2, r4
34000926:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa08 f401 	lsl.w	r4, r8, r1
34000936:	fa00 f901 	lsl.w	r9, r0, r1
3400093a:	fa22 f706 	lsr.w	r7, r2, r6
3400093e:	fa28 f806 	lsr.w	r8, r8, r6
34000942:	408a      	lsls	r2, r1
34000944:	431f      	orrs	r7, r3
34000946:	fa20 f306 	lsr.w	r3, r0, r6
3400094a:	0c38      	lsrs	r0, r7, #16
3400094c:	4323      	orrs	r3, r4
3400094e:	fa1f fc87 	uxth.w	ip, r7
34000952:	0c1c      	lsrs	r4, r3, #16
34000954:	fbb8 fef0 	udiv	lr, r8, r0
34000958:	fb00 881e 	mls	r8, r0, lr, r8
3400095c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34000960:	fb0e f80c 	mul.w	r8, lr, ip
34000964:	45a0      	cmp	r8, r4
34000966:	d90e      	bls.n	34000986 <__udivmoddi4+0x1b6>
34000968:	193c      	adds	r4, r7, r4
3400096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
3400096e:	bf2c      	ite	cs
34000970:	f04f 0b01 	movcs.w	fp, #1
34000974:	f04f 0b00 	movcc.w	fp, #0
34000978:	45a0      	cmp	r8, r4
3400097a:	d903      	bls.n	34000984 <__udivmoddi4+0x1b4>
3400097c:	f1bb 0f00 	cmp.w	fp, #0
34000980:	f000 80b8 	beq.w	34000af4 <__udivmoddi4+0x324>
34000984:	46d6      	mov	lr, sl
34000986:	eba4 0408 	sub.w	r4, r4, r8
3400098a:	fa1f f883 	uxth.w	r8, r3
3400098e:	fbb4 f3f0 	udiv	r3, r4, r0
34000992:	fb00 4413 	mls	r4, r0, r3, r4
34000996:	fb03 fc0c 	mul.w	ip, r3, ip
3400099a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3400099e:	45a4      	cmp	ip, r4
340009a0:	d90e      	bls.n	340009c0 <__udivmoddi4+0x1f0>
340009a2:	193c      	adds	r4, r7, r4
340009a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
340009a8:	bf2c      	ite	cs
340009aa:	f04f 0801 	movcs.w	r8, #1
340009ae:	f04f 0800 	movcc.w	r8, #0
340009b2:	45a4      	cmp	ip, r4
340009b4:	d903      	bls.n	340009be <__udivmoddi4+0x1ee>
340009b6:	f1b8 0f00 	cmp.w	r8, #0
340009ba:	f000 809f 	beq.w	34000afc <__udivmoddi4+0x32c>
340009be:	4603      	mov	r3, r0
340009c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
340009c4:	eba4 040c 	sub.w	r4, r4, ip
340009c8:	fba0 ec02 	umull	lr, ip, r0, r2
340009cc:	4564      	cmp	r4, ip
340009ce:	4673      	mov	r3, lr
340009d0:	46e0      	mov	r8, ip
340009d2:	d302      	bcc.n	340009da <__udivmoddi4+0x20a>
340009d4:	d107      	bne.n	340009e6 <__udivmoddi4+0x216>
340009d6:	45f1      	cmp	r9, lr
340009d8:	d205      	bcs.n	340009e6 <__udivmoddi4+0x216>
340009da:	ebbe 0302 	subs.w	r3, lr, r2
340009de:	eb6c 0c07 	sbc.w	ip, ip, r7
340009e2:	3801      	subs	r0, #1
340009e4:	46e0      	mov	r8, ip
340009e6:	b15d      	cbz	r5, 34000a00 <__udivmoddi4+0x230>
340009e8:	ebb9 0203 	subs.w	r2, r9, r3
340009ec:	eb64 0408 	sbc.w	r4, r4, r8
340009f0:	fa04 f606 	lsl.w	r6, r4, r6
340009f4:	fa22 f301 	lsr.w	r3, r2, r1
340009f8:	40cc      	lsrs	r4, r1
340009fa:	431e      	orrs	r6, r3
340009fc:	e9c5 6400 	strd	r6, r4, [r5]
34000a00:	2100      	movs	r1, #0
34000a02:	e736      	b.n	34000872 <__udivmoddi4+0xa2>
34000a04:	fbb1 fcf2 	udiv	ip, r1, r2
34000a08:	0c01      	lsrs	r1, r0, #16
34000a0a:	4614      	mov	r4, r2
34000a0c:	b280      	uxth	r0, r0
34000a0e:	4696      	mov	lr, r2
34000a10:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a14:	2620      	movs	r6, #32
34000a16:	4690      	mov	r8, r2
34000a18:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34000a1c:	4610      	mov	r0, r2
34000a1e:	fbb1 f1f2 	udiv	r1, r1, r2
34000a22:	eba3 0308 	sub.w	r3, r3, r8
34000a26:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34000a2a:	e74b      	b.n	340008c4 <__udivmoddi4+0xf4>
34000a2c:	40b7      	lsls	r7, r6
34000a2e:	f1c6 0320 	rsb	r3, r6, #32
34000a32:	fa01 f206 	lsl.w	r2, r1, r6
34000a36:	fa21 f803 	lsr.w	r8, r1, r3
34000a3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34000a3e:	fa20 f303 	lsr.w	r3, r0, r3
34000a42:	b2bc      	uxth	r4, r7
34000a44:	40b0      	lsls	r0, r6
34000a46:	4313      	orrs	r3, r2
34000a48:	0c02      	lsrs	r2, r0, #16
34000a4a:	0c19      	lsrs	r1, r3, #16
34000a4c:	b280      	uxth	r0, r0
34000a4e:	fbb8 f9fe 	udiv	r9, r8, lr
34000a52:	fb0e 8819 	mls	r8, lr, r9, r8
34000a56:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a5a:	fb09 f804 	mul.w	r8, r9, r4
34000a5e:	4588      	cmp	r8, r1
34000a60:	d951      	bls.n	34000b06 <__udivmoddi4+0x336>
34000a62:	1879      	adds	r1, r7, r1
34000a64:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
34000a68:	bf2c      	ite	cs
34000a6a:	f04f 0a01 	movcs.w	sl, #1
34000a6e:	f04f 0a00 	movcc.w	sl, #0
34000a72:	4588      	cmp	r8, r1
34000a74:	d902      	bls.n	34000a7c <__udivmoddi4+0x2ac>
34000a76:	f1ba 0f00 	cmp.w	sl, #0
34000a7a:	d031      	beq.n	34000ae0 <__udivmoddi4+0x310>
34000a7c:	eba1 0108 	sub.w	r1, r1, r8
34000a80:	fbb1 f9fe 	udiv	r9, r1, lr
34000a84:	fb09 f804 	mul.w	r8, r9, r4
34000a88:	fb0e 1119 	mls	r1, lr, r9, r1
34000a8c:	b29b      	uxth	r3, r3
34000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34000a92:	4543      	cmp	r3, r8
34000a94:	d235      	bcs.n	34000b02 <__udivmoddi4+0x332>
34000a96:	18fb      	adds	r3, r7, r3
34000a98:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
34000a9c:	bf2c      	ite	cs
34000a9e:	f04f 0a01 	movcs.w	sl, #1
34000aa2:	f04f 0a00 	movcc.w	sl, #0
34000aa6:	4543      	cmp	r3, r8
34000aa8:	d2bb      	bcs.n	34000a22 <__udivmoddi4+0x252>
34000aaa:	f1ba 0f00 	cmp.w	sl, #0
34000aae:	d1b8      	bne.n	34000a22 <__udivmoddi4+0x252>
34000ab0:	f1a9 0102 	sub.w	r1, r9, #2
34000ab4:	443b      	add	r3, r7
34000ab6:	e7b4      	b.n	34000a22 <__udivmoddi4+0x252>
34000ab8:	1a84      	subs	r4, r0, r2
34000aba:	eb68 0203 	sbc.w	r2, r8, r3
34000abe:	2001      	movs	r0, #1
34000ac0:	4696      	mov	lr, r2
34000ac2:	e6eb      	b.n	3400089c <__udivmoddi4+0xcc>
34000ac4:	443a      	add	r2, r7
34000ac6:	f1a8 0802 	sub.w	r8, r8, #2
34000aca:	e72b      	b.n	34000924 <__udivmoddi4+0x154>
34000acc:	f1ac 0c02 	sub.w	ip, ip, #2
34000ad0:	443b      	add	r3, r7
34000ad2:	e710      	b.n	340008f6 <__udivmoddi4+0x126>
34000ad4:	3902      	subs	r1, #2
34000ad6:	443b      	add	r3, r7
34000ad8:	e6a9      	b.n	3400082e <__udivmoddi4+0x5e>
34000ada:	443a      	add	r2, r7
34000adc:	3802      	subs	r0, #2
34000ade:	e6be      	b.n	3400085e <__udivmoddi4+0x8e>
34000ae0:	eba7 0808 	sub.w	r8, r7, r8
34000ae4:	f1a9 0c02 	sub.w	ip, r9, #2
34000ae8:	4441      	add	r1, r8
34000aea:	fbb1 f9fe 	udiv	r9, r1, lr
34000aee:	fb09 f804 	mul.w	r8, r9, r4
34000af2:	e7c9      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000af4:	f1ae 0e02 	sub.w	lr, lr, #2
34000af8:	443c      	add	r4, r7
34000afa:	e744      	b.n	34000986 <__udivmoddi4+0x1b6>
34000afc:	3b02      	subs	r3, #2
34000afe:	443c      	add	r4, r7
34000b00:	e75e      	b.n	340009c0 <__udivmoddi4+0x1f0>
34000b02:	4649      	mov	r1, r9
34000b04:	e78d      	b.n	34000a22 <__udivmoddi4+0x252>
34000b06:	eba1 0108 	sub.w	r1, r1, r8
34000b0a:	46cc      	mov	ip, r9
34000b0c:	fbb1 f9fe 	udiv	r9, r1, lr
34000b10:	fb09 f804 	mul.w	r8, r9, r4
34000b14:	e7b8      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000b16:	bf00      	nop

34000b18 <__aeabi_idiv0>:
34000b18:	4770      	bx	lr
34000b1a:	bf00      	nop

34000b1c <update_weights_int8>:
    memcpy(NNweights, new_weights, Num_weights * sizeof(float));
    printf("Cleaning weights at %p, size %d\n\r", NNweights, Num_weights);
    SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(float));
}

void update_weights_int8(int8_t* NNweights, const int8_t *new_weights,size_t Num_weights) {
34000b1c:	b580      	push	{r7, lr}
34000b1e:	b088      	sub	sp, #32
34000b20:	af00      	add	r7, sp, #0
34000b22:	60f8      	str	r0, [r7, #12]
34000b24:	60b9      	str	r1, [r7, #8]
34000b26:	607a      	str	r2, [r7, #4]
    memcpy(NNweights, new_weights, Num_weights * sizeof(int8_t));
34000b28:	687a      	ldr	r2, [r7, #4]
34000b2a:	68b9      	ldr	r1, [r7, #8]
34000b2c:	68f8      	ldr	r0, [r7, #12]
34000b2e:	f01b fe30 	bl	3401c792 <memcpy>
    printf("Cleaning weights at %p, size %d\n\r", NNweights, Num_weights);
34000b32:	687a      	ldr	r2, [r7, #4]
34000b34:	68f9      	ldr	r1, [r7, #12]
34000b36:	4816      	ldr	r0, [pc, #88]	@ (34000b90 <update_weights_int8+0x74>)
34000b38:	f01b fa54 	bl	3401bfe4 <iprintf>
	SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(int8_t));
34000b3c:	687b      	ldr	r3, [r7, #4]
34000b3e:	68fa      	ldr	r2, [r7, #12]
34000b40:	61fa      	str	r2, [r7, #28]
34000b42:	61bb      	str	r3, [r7, #24]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34000b44:	69bb      	ldr	r3, [r7, #24]
34000b46:	2b00      	cmp	r3, #0
34000b48:	dd1d      	ble.n	34000b86 <update_weights_int8+0x6a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000b4a:	69fb      	ldr	r3, [r7, #28]
34000b4c:	f003 021f 	and.w	r2, r3, #31
34000b50:	69bb      	ldr	r3, [r7, #24]
34000b52:	4413      	add	r3, r2
34000b54:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34000b56:	69fb      	ldr	r3, [r7, #28]
34000b58:	613b      	str	r3, [r7, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34000b5a:	f3bf 8f4f 	dsb	sy
}
34000b5e:	bf00      	nop

      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000b60:	4a0c      	ldr	r2, [pc, #48]	@ (34000b94 <update_weights_int8+0x78>)
34000b62:	693b      	ldr	r3, [r7, #16]
34000b64:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000b68:	693b      	ldr	r3, [r7, #16]
34000b6a:	3320      	adds	r3, #32
34000b6c:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
34000b6e:	697b      	ldr	r3, [r7, #20]
34000b70:	3b20      	subs	r3, #32
34000b72:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
34000b74:	697b      	ldr	r3, [r7, #20]
34000b76:	2b00      	cmp	r3, #0
34000b78:	dcf2      	bgt.n	34000b60 <update_weights_int8+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
34000b7a:	f3bf 8f4f 	dsb	sy
}
34000b7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34000b80:	f3bf 8f6f 	isb	sy
}
34000b84:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
34000b86:	bf00      	nop
}
34000b88:	bf00      	nop
34000b8a:	3720      	adds	r7, #32
34000b8c:	46bd      	mov	sp, r7
34000b8e:	bd80      	pop	{r7, pc}
34000b90:	3401e010 	.word	0x3401e010
34000b94:	e000ed00 	.word	0xe000ed00

34000b98 <calcAdresses>:

void calcAdresses(size_t insize, size_t outsize,size_t bytesOfType,volatile Matmul_info* infoStruct){
34000b98:	b480      	push	{r7}
34000b9a:	b087      	sub	sp, #28
34000b9c:	af00      	add	r7, sp, #0
34000b9e:	60f8      	str	r0, [r7, #12]
34000ba0:	60b9      	str	r1, [r7, #8]
34000ba2:	607a      	str	r2, [r7, #4]
34000ba4:	603b      	str	r3, [r7, #0]
	infoStruct->bytes = bytesOfType;
34000ba6:	687a      	ldr	r2, [r7, #4]
34000ba8:	683b      	ldr	r3, [r7, #0]
34000baa:	601a      	str	r2, [r3, #0]
	infoStruct->insize = insize;
34000bac:	68fa      	ldr	r2, [r7, #12]
34000bae:	683b      	ldr	r3, [r7, #0]
34000bb0:	605a      	str	r2, [r3, #4]
	infoStruct->outsize = outsize;
34000bb2:	68ba      	ldr	r2, [r7, #8]
34000bb4:	683b      	ldr	r3, [r7, #0]
34000bb6:	609a      	str	r2, [r3, #8]

	int inBytes = bytesOfType * insize;
34000bb8:	687b      	ldr	r3, [r7, #4]
34000bba:	68fa      	ldr	r2, [r7, #12]
34000bbc:	fb02 f303 	mul.w	r3, r2, r3
34000bc0:	617b      	str	r3, [r7, #20]
	int outBytes = bytesOfType * outsize;
34000bc2:	687b      	ldr	r3, [r7, #4]
34000bc4:	68ba      	ldr	r2, [r7, #8]
34000bc6:	fb02 f303 	mul.w	r3, r2, r3
34000bca:	613b      	str	r3, [r7, #16]

	infoStruct->weight_start = 0;
34000bcc:	683b      	ldr	r3, [r7, #0]
34000bce:	2200      	movs	r2, #0
34000bd0:	60da      	str	r2, [r3, #12]
	infoStruct->weight_end   = infoStruct->weight_start + inBytes * outBytes;
34000bd2:	683b      	ldr	r3, [r7, #0]
34000bd4:	68da      	ldr	r2, [r3, #12]
34000bd6:	697b      	ldr	r3, [r7, #20]
34000bd8:	6939      	ldr	r1, [r7, #16]
34000bda:	fb01 f303 	mul.w	r3, r1, r3
34000bde:	441a      	add	r2, r3
34000be0:	683b      	ldr	r3, [r7, #0]
34000be2:	611a      	str	r2, [r3, #16]
	infoStruct->weight_limit = infoStruct->weight_end + inBytes;
34000be4:	683b      	ldr	r3, [r7, #0]
34000be6:	691a      	ldr	r2, [r3, #16]
34000be8:	697b      	ldr	r3, [r7, #20]
34000bea:	441a      	add	r2, r3
34000bec:	683b      	ldr	r3, [r7, #0]
34000bee:	615a      	str	r2, [r3, #20]

	infoStruct->input_start = infoStruct->weight_limit ;
34000bf0:	683b      	ldr	r3, [r7, #0]
34000bf2:	695a      	ldr	r2, [r3, #20]
34000bf4:	683b      	ldr	r3, [r7, #0]
34000bf6:	619a      	str	r2, [r3, #24]
	infoStruct->input_end   = infoStruct->input_start + inBytes;
34000bf8:	683b      	ldr	r3, [r7, #0]
34000bfa:	699a      	ldr	r2, [r3, #24]
34000bfc:	697b      	ldr	r3, [r7, #20]
34000bfe:	441a      	add	r2, r3
34000c00:	683b      	ldr	r3, [r7, #0]
34000c02:	61da      	str	r2, [r3, #28]
	infoStruct->input_limit = infoStruct->input_end + inBytes;
34000c04:	683b      	ldr	r3, [r7, #0]
34000c06:	69da      	ldr	r2, [r3, #28]
34000c08:	697b      	ldr	r3, [r7, #20]
34000c0a:	441a      	add	r2, r3
34000c0c:	683b      	ldr	r3, [r7, #0]
34000c0e:	621a      	str	r2, [r3, #32]

	infoStruct->output_start = infoStruct->input_limit;
34000c10:	683b      	ldr	r3, [r7, #0]
34000c12:	6a1a      	ldr	r2, [r3, #32]
34000c14:	683b      	ldr	r3, [r7, #0]
34000c16:	625a      	str	r2, [r3, #36]	@ 0x24
	infoStruct->output_end   = infoStruct->output_start + outBytes;
34000c18:	683b      	ldr	r3, [r7, #0]
34000c1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34000c1c:	693b      	ldr	r3, [r7, #16]
34000c1e:	441a      	add	r2, r3
34000c20:	683b      	ldr	r3, [r7, #0]
34000c22:	629a      	str	r2, [r3, #40]	@ 0x28
	infoStruct->output_limit = infoStruct->output_end + outBytes;
34000c24:	683b      	ldr	r3, [r7, #0]
34000c26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34000c28:	693b      	ldr	r3, [r7, #16]
34000c2a:	441a      	add	r2, r3
34000c2c:	683b      	ldr	r3, [r7, #0]
34000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
34000c30:	bf00      	nop
34000c32:	371c      	adds	r7, #28
34000c34:	46bd      	mov	sp, r7
34000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
34000c3a:	4770      	bx	lr

34000c3c <npu_matvec_int8_init>:

int npu_matvec_int8_init(size_t insize,size_t outsize){
34000c3c:	b580      	push	{r7, lr}
34000c3e:	b084      	sub	sp, #16
34000c40:	af00      	add	r7, sp, #0
34000c42:	6078      	str	r0, [r7, #4]
34000c44:	6039      	str	r1, [r7, #0]
	extern volatile Matmul_info matmulInfo_int;
	size_t insizeNPU = 0;
34000c46:	2300      	movs	r3, #0
34000c48:	60fb      	str	r3, [r7, #12]
	size_t outsizeNPU = 0;
34000c4a:	2300      	movs	r3, #0
34000c4c:	60bb      	str	r3, [r7, #8]

	// Calculate valid insize and outsize. At the moment only 8,16,24 are valid
	if((insize > 24) || (outsize > 24)){
34000c4e:	687b      	ldr	r3, [r7, #4]
34000c50:	2b18      	cmp	r3, #24
34000c52:	d802      	bhi.n	34000c5a <npu_matvec_int8_init+0x1e>
34000c54:	683b      	ldr	r3, [r7, #0]
34000c56:	2b18      	cmp	r3, #24
34000c58:	d905      	bls.n	34000c66 <npu_matvec_int8_init+0x2a>
		printf("Insize or Outsize too big. Has to be lower or equal to 24");
34000c5a:	481b      	ldr	r0, [pc, #108]	@ (34000cc8 <npu_matvec_int8_init+0x8c>)
34000c5c:	f01b f9c2 	bl	3401bfe4 <iprintf>
		return -1;
34000c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34000c64:	e02c      	b.n	34000cc0 <npu_matvec_int8_init+0x84>
	}

	if((insize < 1) || (outsize < 1)){
34000c66:	687b      	ldr	r3, [r7, #4]
34000c68:	2b00      	cmp	r3, #0
34000c6a:	d002      	beq.n	34000c72 <npu_matvec_int8_init+0x36>
34000c6c:	683b      	ldr	r3, [r7, #0]
34000c6e:	2b00      	cmp	r3, #0
34000c70:	d105      	bne.n	34000c7e <npu_matvec_int8_init+0x42>
		printf("Insize or Outsize too small. Has to be higher or equal to 1");
34000c72:	4816      	ldr	r0, [pc, #88]	@ (34000ccc <npu_matvec_int8_init+0x90>)
34000c74:	f01b f9b6 	bl	3401bfe4 <iprintf>
		return -1;
34000c78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34000c7c:	e020      	b.n	34000cc0 <npu_matvec_int8_init+0x84>
	}

	// Set insize to a valid size
	if((insize % 8) != 0){
34000c7e:	687b      	ldr	r3, [r7, #4]
34000c80:	f003 0307 	and.w	r3, r3, #7
34000c84:	2b00      	cmp	r3, #0
34000c86:	d005      	beq.n	34000c94 <npu_matvec_int8_init+0x58>
		insizeNPU = ((insize/8) + 1) * 8;
34000c88:	687b      	ldr	r3, [r7, #4]
34000c8a:	08db      	lsrs	r3, r3, #3
34000c8c:	3301      	adds	r3, #1
34000c8e:	00db      	lsls	r3, r3, #3
34000c90:	60fb      	str	r3, [r7, #12]
34000c92:	e001      	b.n	34000c98 <npu_matvec_int8_init+0x5c>
	}

	else{
		insizeNPU = insize;
34000c94:	687b      	ldr	r3, [r7, #4]
34000c96:	60fb      	str	r3, [r7, #12]
	}

	// Set outsize to a valid size
	if((outsize % 8) != 0){
34000c98:	683b      	ldr	r3, [r7, #0]
34000c9a:	f003 0307 	and.w	r3, r3, #7
34000c9e:	2b00      	cmp	r3, #0
34000ca0:	d005      	beq.n	34000cae <npu_matvec_int8_init+0x72>
		outsizeNPU = ((outsize/8) + 1) * 8;
34000ca2:	683b      	ldr	r3, [r7, #0]
34000ca4:	08db      	lsrs	r3, r3, #3
34000ca6:	3301      	adds	r3, #1
34000ca8:	00db      	lsls	r3, r3, #3
34000caa:	60bb      	str	r3, [r7, #8]
34000cac:	e001      	b.n	34000cb2 <npu_matvec_int8_init+0x76>
	}

	else{
		outsizeNPU = outsize;
34000cae:	683b      	ldr	r3, [r7, #0]
34000cb0:	60bb      	str	r3, [r7, #8]
	}

	// Calculate Adresses
	calcAdresses(insizeNPU,outsizeNPU,1,&matmulInfo_int);
34000cb2:	4b07      	ldr	r3, [pc, #28]	@ (34000cd0 <npu_matvec_int8_init+0x94>)
34000cb4:	2201      	movs	r2, #1
34000cb6:	68b9      	ldr	r1, [r7, #8]
34000cb8:	68f8      	ldr	r0, [r7, #12]
34000cba:	f7ff ff6d 	bl	34000b98 <calcAdresses>
	return 0;
34000cbe:	2300      	movs	r3, #0
}
34000cc0:	4618      	mov	r0, r3
34000cc2:	3710      	adds	r7, #16
34000cc4:	46bd      	mov	sp, r7
34000cc6:	bd80      	pop	{r7, pc}
34000cc8:	3401e034 	.word	0x3401e034
34000ccc:	3401e070 	.word	0x3401e070
34000cd0:	340208f4 	.word	0x340208f4

34000cd4 <npu_matvec_int8_run>:

int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000cd4:	b580      	push	{r7, lr}
34000cd6:	b088      	sub	sp, #32
34000cd8:	af00      	add	r7, sp, #0
34000cda:	60f8      	str	r0, [r7, #12]
34000cdc:	60b9      	str	r1, [r7, #8]
34000cde:	607a      	str	r2, [r7, #4]
34000ce0:	603b      	str	r3, [r7, #0]
	//LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(int8);
	extern volatile Matmul_info matmulInfo_int;

	// Prepare input buffer: 0x34200000UL is the base address
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000ce2:	4b27      	ldr	r3, [pc, #156]	@ (34000d80 <npu_matvec_int8_run+0xac>)
34000ce4:	699b      	ldr	r3, [r3, #24]
34000ce6:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
34000cea:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
34000cee:	4618      	mov	r0, r3
34000cf0:	4b23      	ldr	r3, [pc, #140]	@ (34000d80 <npu_matvec_int8_run+0xac>)
34000cf2:	685b      	ldr	r3, [r3, #4]
34000cf4:	461a      	mov	r2, r3
34000cf6:	68f9      	ldr	r1, [r7, #12]
34000cf8:	f01b fd4b 	bl	3401c792 <memcpy>
	SCB_CleanDCache_by_Addr((void*)(0x34200000UL + matmulInfo_int.input_start), insizeVec);
34000cfc:	4b20      	ldr	r3, [pc, #128]	@ (34000d80 <npu_matvec_int8_run+0xac>)
34000cfe:	699b      	ldr	r3, [r3, #24]
34000d00:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
34000d04:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
34000d08:	461a      	mov	r2, r3
34000d0a:	68bb      	ldr	r3, [r7, #8]
34000d0c:	61fa      	str	r2, [r7, #28]
34000d0e:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) {
34000d10:	69bb      	ldr	r3, [r7, #24]
34000d12:	2b00      	cmp	r3, #0
34000d14:	dd1d      	ble.n	34000d52 <npu_matvec_int8_run+0x7e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000d16:	69fb      	ldr	r3, [r7, #28]
34000d18:	f003 021f 	and.w	r2, r3, #31
34000d1c:	69bb      	ldr	r3, [r7, #24]
34000d1e:	4413      	add	r3, r2
34000d20:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34000d22:	69fb      	ldr	r3, [r7, #28]
34000d24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
34000d26:	f3bf 8f4f 	dsb	sy
}
34000d2a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000d2c:	4a15      	ldr	r2, [pc, #84]	@ (34000d84 <npu_matvec_int8_run+0xb0>)
34000d2e:	693b      	ldr	r3, [r7, #16]
34000d30:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000d34:	693b      	ldr	r3, [r7, #16]
34000d36:	3320      	adds	r3, #32
34000d38:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
34000d3a:	697b      	ldr	r3, [r7, #20]
34000d3c:	3b20      	subs	r3, #32
34000d3e:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
34000d40:	697b      	ldr	r3, [r7, #20]
34000d42:	2b00      	cmp	r3, #0
34000d44:	dcf2      	bgt.n	34000d2c <npu_matvec_int8_run+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
34000d46:	f3bf 8f4f 	dsb	sy
}
34000d4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34000d4c:	f3bf 8f6f 	isb	sy
}
34000d50:	bf00      	nop
}
34000d52:	bf00      	nop

	// Prepare Matrix
	update_weights_int8((int8_t*)(0x34200000UL), inMat, insizeVec * outSize);
34000d54:	68bb      	ldr	r3, [r7, #8]
34000d56:	687a      	ldr	r2, [r7, #4]
34000d58:	fb02 f303 	mul.w	r3, r2, r3
34000d5c:	461a      	mov	r2, r3
34000d5e:	6839      	ldr	r1, [r7, #0]
34000d60:	4809      	ldr	r0, [pc, #36]	@ (34000d88 <npu_matvec_int8_run+0xb4>)
34000d62:	f7ff fedb 	bl	34000b1c <update_weights_int8>

	LL_ATON_RT_Main(&NN_Instance_int8);
34000d66:	4809      	ldr	r0, [pc, #36]	@ (34000d8c <npu_matvec_int8_run+0xb8>)
34000d68:	f019 f9fa 	bl	3401a160 <LL_ATON_RT_Main>

	return (int8_t*)(0x34200000UL + matmulInfo_int.output_start);
34000d6c:	4b04      	ldr	r3, [pc, #16]	@ (34000d80 <npu_matvec_int8_run+0xac>)
34000d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34000d70:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
34000d74:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
}
34000d78:	4618      	mov	r0, r3
34000d7a:	3720      	adds	r7, #32
34000d7c:	46bd      	mov	sp, r7
34000d7e:	bd80      	pop	{r7, pc}
34000d80:	340208f4 	.word	0x340208f4
34000d84:	e000ed00 	.word	0xe000ed00
34000d88:	34200000 	.word	0x34200000
34000d8c:	340206cc 	.word	0x340206cc

34000d90 <getIdentityWeights_int8>:
	LL_ATON_RT_Main(&NN_Instance_int8);

	return (float*)(matmulInfo_Float.output_start);
}

int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000d90:	b580      	push	{r7, lr}
34000d92:	b086      	sub	sp, #24
34000d94:	af00      	add	r7, sp, #0
34000d96:	6078      	str	r0, [r7, #4]
34000d98:	6039      	str	r1, [r7, #0]
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000d9a:	687b      	ldr	r3, [r7, #4]
34000d9c:	683a      	ldr	r2, [r7, #0]
34000d9e:	fb02 f303 	mul.w	r3, r2, r3
34000da2:	4618      	mov	r0, r3
34000da4:	f01a fa9a 	bl	3401b2dc <malloc>
34000da8:	4603      	mov	r3, r0
34000daa:	60fb      	str	r3, [r7, #12]
    if (identity == NULL) {
34000dac:	68fb      	ldr	r3, [r7, #12]
34000dae:	2b00      	cmp	r3, #0
34000db0:	d101      	bne.n	34000db6 <getIdentityWeights_int8+0x26>
        return NULL;
34000db2:	2300      	movs	r3, #0
34000db4:	e036      	b.n	34000e24 <getIdentityWeights_int8+0x94>
    }

    // Initialize the entire matrix to 0
    memset(identity, 0, insize * outsize * sizeof(int8_t));
34000db6:	687b      	ldr	r3, [r7, #4]
34000db8:	683a      	ldr	r2, [r7, #0]
34000dba:	fb02 f303 	mul.w	r3, r2, r3
34000dbe:	461a      	mov	r2, r3
34000dc0:	2100      	movs	r1, #0
34000dc2:	68f8      	ldr	r0, [r7, #12]
34000dc4:	f01b fa56 	bl	3401c274 <memset>

    // Set 1 on the diagonal
    for (size_t i = 0; i < insize; i++) {
34000dc8:	2300      	movs	r3, #0
34000dca:	617b      	str	r3, [r7, #20]
34000dcc:	e025      	b.n	34000e1a <getIdentityWeights_int8+0x8a>
        for (size_t j = 0; j < outsize; j++) {
34000dce:	2300      	movs	r3, #0
34000dd0:	613b      	str	r3, [r7, #16]
34000dd2:	e01b      	b.n	34000e0c <getIdentityWeights_int8+0x7c>
            if (i == j) {
34000dd4:	697a      	ldr	r2, [r7, #20]
34000dd6:	693b      	ldr	r3, [r7, #16]
34000dd8:	429a      	cmp	r2, r3
34000dda:	d10a      	bne.n	34000df2 <getIdentityWeights_int8+0x62>
//            	printf("%4d: 1",i * outsize + j);
                identity[i * outsize + j] = 1;  // Set diagonal to 1
34000ddc:	697b      	ldr	r3, [r7, #20]
34000dde:	683a      	ldr	r2, [r7, #0]
34000de0:	fb03 f202 	mul.w	r2, r3, r2
34000de4:	693b      	ldr	r3, [r7, #16]
34000de6:	4413      	add	r3, r2
34000de8:	68fa      	ldr	r2, [r7, #12]
34000dea:	4413      	add	r3, r2
34000dec:	2201      	movs	r2, #1
34000dee:	701a      	strb	r2, [r3, #0]
34000df0:	e009      	b.n	34000e06 <getIdentityWeights_int8+0x76>
            }
            else{
//            	printf("%4d: 0",i * outsize + j);
                identity[i * outsize + j] = 0;  // Set diagonal to 1
34000df2:	697b      	ldr	r3, [r7, #20]
34000df4:	683a      	ldr	r2, [r7, #0]
34000df6:	fb03 f202 	mul.w	r2, r3, r2
34000dfa:	693b      	ldr	r3, [r7, #16]
34000dfc:	4413      	add	r3, r2
34000dfe:	68fa      	ldr	r2, [r7, #12]
34000e00:	4413      	add	r3, r2
34000e02:	2200      	movs	r2, #0
34000e04:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < outsize; j++) {
34000e06:	693b      	ldr	r3, [r7, #16]
34000e08:	3301      	adds	r3, #1
34000e0a:	613b      	str	r3, [r7, #16]
34000e0c:	693a      	ldr	r2, [r7, #16]
34000e0e:	683b      	ldr	r3, [r7, #0]
34000e10:	429a      	cmp	r2, r3
34000e12:	d3df      	bcc.n	34000dd4 <getIdentityWeights_int8+0x44>
    for (size_t i = 0; i < insize; i++) {
34000e14:	697b      	ldr	r3, [r7, #20]
34000e16:	3301      	adds	r3, #1
34000e18:	617b      	str	r3, [r7, #20]
34000e1a:	697a      	ldr	r2, [r7, #20]
34000e1c:	687b      	ldr	r3, [r7, #4]
34000e1e:	429a      	cmp	r2, r3
34000e20:	d3d5      	bcc.n	34000dce <getIdentityWeights_int8+0x3e>
//	    }
//	    printf("\n\r");
//	}
//

    return identity;
34000e22:	68fb      	ldr	r3, [r7, #12]
}
34000e24:	4618      	mov	r0, r3
34000e26:	3718      	adds	r7, #24
34000e28:	46bd      	mov	sp, r7
34000e2a:	bd80      	pop	{r7, pc}

34000e2c <LL_ATON_Cache_MCU_Invalidate_Range>:
 */
#if defined(LL_ATON_RT_RELOC) && defined(BUILD_AI_NETWORK_RELOC)
  void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
34000e2c:	b580      	push	{r7, lr}
34000e2e:	b082      	sub	sp, #8
34000e30:	af00      	add	r7, sp, #0
34000e32:	6078      	str	r0, [r7, #4]
34000e34:	6039      	str	r1, [r7, #0]
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
34000e36:	687a      	ldr	r2, [r7, #4]
34000e38:	683b      	ldr	r3, [r7, #0]
34000e3a:	4413      	add	r3, r2
34000e3c:	4619      	mov	r1, r3
34000e3e:	6878      	ldr	r0, [r7, #4]
34000e40:	f000 ff38 	bl	34001cb4 <mcu_cache_invalidate_range>
    LL_ATON_OSAL_UNLOCK_MCU_CACHE();
  }
34000e44:	bf00      	nop
34000e46:	3708      	adds	r7, #8
34000e48:	46bd      	mov	sp, r7
34000e4a:	bd80      	pop	{r7, pc}

34000e4c <LL_ATON_Set_User_Input_Buffer_int8>:
/* index=3 file postfix=AXISRAM3 name=npuRAM3 offset=0x34200000  absolute_mode size=458752 READ_WRITE THROUGHPUT=HIGH LATENCY=LOW byte width=8 freq ratio=1.25 burst max length=MAXINT burst penalty=0 pipelined=ON cacheable=OFF read_power=18.531 write_power=16.201 use4initializers=NO score=94  */
/* global pool 0 is ? */
/* index=0 file postfix=AXISRAM6 name=npuRAM6 offset=0x34350000  absolute_mode size=458744 READ_WRITE THROUGHPUT=HIGH LATENCY=LOW byte width=8 freq ratio=1.25 burst max length=MAXINT burst penalty=0 pipelined=ON cacheable=OFF read_power=19.006 write_power=15.79 use4initializers=NO score=94  */

LL_ATON_User_IO_Result_t LL_ATON_Set_User_Input_Buffer_int8(uint32_t num, void* buffer, uint32_t size)
{
34000e4c:	b480      	push	{r7}
34000e4e:	b085      	sub	sp, #20
34000e50:	af00      	add	r7, sp, #0
34000e52:	60f8      	str	r0, [r7, #12]
34000e54:	60b9      	str	r1, [r7, #8]
34000e56:	607a      	str	r2, [r7, #4]
  {
    return LL_ATON_User_IO_WRONG_INDEX;
34000e58:	2303      	movs	r3, #3
  }
}
34000e5a:	4618      	mov	r0, r3
34000e5c:	3714      	adds	r7, #20
34000e5e:	46bd      	mov	sp, r7
34000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e64:	4770      	bx	lr

34000e66 <LL_ATON_Get_User_Input_Buffer_int8>:

void *LL_ATON_Get_User_Input_Buffer_int8(uint32_t num)
{
34000e66:	b480      	push	{r7}
34000e68:	b083      	sub	sp, #12
34000e6a:	af00      	add	r7, sp, #0
34000e6c:	6078      	str	r0, [r7, #4]
  {
    return NULL;
34000e6e:	2300      	movs	r3, #0
  }
}
34000e70:	4618      	mov	r0, r3
34000e72:	370c      	adds	r7, #12
34000e74:	46bd      	mov	sp, r7
34000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e7a:	4770      	bx	lr

34000e7c <LL_ATON_Set_User_Output_Buffer_int8>:

LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_int8(uint32_t num, void* buffer, uint32_t size)
{
34000e7c:	b480      	push	{r7}
34000e7e:	b085      	sub	sp, #20
34000e80:	af00      	add	r7, sp, #0
34000e82:	60f8      	str	r0, [r7, #12]
34000e84:	60b9      	str	r1, [r7, #8]
34000e86:	607a      	str	r2, [r7, #4]
  {
    return LL_ATON_User_IO_WRONG_INDEX;
34000e88:	2303      	movs	r3, #3
  }
}
34000e8a:	4618      	mov	r0, r3
34000e8c:	3714      	adds	r7, #20
34000e8e:	46bd      	mov	sp, r7
34000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e94:	4770      	bx	lr

34000e96 <LL_ATON_Get_User_Output_Buffer_int8>:

void *LL_ATON_Get_User_Output_Buffer_int8(uint32_t num)
{
34000e96:	b480      	push	{r7}
34000e98:	b083      	sub	sp, #12
34000e9a:	af00      	add	r7, sp, #0
34000e9c:	6078      	str	r0, [r7, #4]
  {
    return NULL;
34000e9e:	2300      	movs	r3, #0
  }
}
34000ea0:	4618      	mov	r0, r3
34000ea2:	370c      	adds	r7, #12
34000ea4:	46bd      	mov	sp, r7
34000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
34000eaa:	4770      	bx	lr

34000eac <LL_ATON_EC_Network_Init_int8>:

bool LL_ATON_EC_Network_Init_int8(void)
{
34000eac:	b480      	push	{r7}
34000eae:	af00      	add	r7, sp, #0
  return true;
34000eb0:	2301      	movs	r3, #1
}
34000eb2:	4618      	mov	r0, r3
34000eb4:	46bd      	mov	sp, r7
34000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
34000eba:	4770      	bx	lr

34000ebc <LL_ATON_EC_Inference_Init_int8>:

bool LL_ATON_EC_Inference_Init_int8(void)
{
34000ebc:	b480      	push	{r7}
34000ebe:	af00      	add	r7, sp, #0
  return true;
34000ec0:	2301      	movs	r3, #1
}
34000ec2:	4618      	mov	r0, r3
34000ec4:	46bd      	mov	sp, r7
34000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
34000eca:	4770      	bx	lr

34000ecc <LL_ATON_Start_EpochBlock_int8>:
/* scheduling epoch=0    nodes=5   ------------------------------------------------------------------- */

/* scheduling epoch=1    nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_Start_EpochBlock_int8(const void *epoch_block)
{
34000ecc:	b580      	push	{r7, lr}
34000ece:	b0c2      	sub	sp, #264	@ 0x108
34000ed0:	af00      	add	r7, sp, #0
34000ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
34000ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
34000eda:	6018      	str	r0, [r3, #0]

  LL_ATON_LIB_UNUSED(epoch_block);
  extern volatile Matmul_info matmulInfo_int;

  /* CONV_ACC_V2 configuration */
  LL_Convacc_InitTypeDef conv_init = {
34000edc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
34000ee0:	223c      	movs	r2, #60	@ 0x3c
34000ee2:	2100      	movs	r1, #0
34000ee4:	4618      	mov	r0, r3
34000ee6:	f01b f9c5 	bl	3401c274 <memset>
34000eea:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
34000eee:	2201      	movs	r2, #1
34000ef0:	f362 1305 	bfi	r3, r2, #4, #2
34000ef4:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
34000ef8:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
34000efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34000f00:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
34000f04:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
34000f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34000f0c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
34000f10:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
34000f14:	f043 0301 	orr.w	r3, r3, #1
34000f18:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
34000f1c:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
34000f20:	2201      	movs	r2, #1
34000f22:	f362 0383 	bfi	r3, r2, #2, #2
34000f26:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
34000f2a:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
34000f2e:	2201      	movs	r2, #1
34000f30:	f362 1305 	bfi	r3, r2, #4, #2
34000f34:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
34000f38:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
34000f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34000f40:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
34000f44:	2301      	movs	r3, #1
34000f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
34000f4a:	2301      	movs	r3, #1
34000f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
34000f50:	2301      	movs	r3, #1
34000f52:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
34000f56:	2301      	movs	r3, #1
34000f58:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
    .raw_o = 0,
    .fWidth = 1,
    .fHeight = 1,
    .kernelWidth = 1,
    .kernelHeight = 1,
    .nKernels = matmulInfo_int.insize,
34000f5c:	4b5f      	ldr	r3, [pc, #380]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34000f5e:	685b      	ldr	r3, [r3, #4]
  LL_Convacc_InitTypeDef conv_init = {
34000f60:	b2db      	uxtb	r3, r3
34000f62:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
    .batchDepth = matmulInfo_int.outsize,
34000f66:	4b5d      	ldr	r3, [pc, #372]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34000f68:	689b      	ldr	r3, [r3, #8]
  LL_Convacc_InitTypeDef conv_init = {
34000f6a:	b29b      	uxth	r3, r3
34000f6c:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
34000f70:	2301      	movs	r3, #1
34000f72:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
34000f76:	2301      	movs	r3, #1
34000f78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    .left_crop = 0,
    .right_crop = 0,
    .top_crop = 0,
    .bot_crop = 0,
  };
  LL_Convacc_Init(0, &conv_init);
34000f7c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
34000f80:	4619      	mov	r1, r3
34000f82:	2000      	movs	r0, #0
34000f84:	f018 fca2 	bl	340198cc <LL_Convacc_Init>

  /* Input vector (1×16 int8) */
  LL_Streng_TensorInitTypeDef input_tensor = {
34000f88:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
34000f8c:	2240      	movs	r2, #64	@ 0x40
34000f8e:	2100      	movs	r1, #0
34000f90:	4618      	mov	r0, r3
34000f92:	f01b f96f 	bl	3401c274 <memset>
34000f96:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
34000f9a:	f043 0302 	orr.w	r3, r3, #2
34000f9e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
34000fa2:	4b4f      	ldr	r3, [pc, #316]	@ (340010e0 <LL_ATON_Start_EpochBlock_int8+0x214>)
34000fa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    .raw = 1,
    .noblk = 0,
    .align_right = 0,
    .nbits_unsigned = 0,
    .addr_base = { (unsigned char *)(0x34200000UL) },
    .offset_start = matmulInfo_int.input_start,
34000fa8:	4b4c      	ldr	r3, [pc, #304]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34000faa:	699b      	ldr	r3, [r3, #24]
  LL_Streng_TensorInitTypeDef input_tensor = {
34000fac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    .offset_end = matmulInfo_int.input_end,
34000fb0:	4b4a      	ldr	r3, [pc, #296]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34000fb2:	69db      	ldr	r3, [r3, #28]
  LL_Streng_TensorInitTypeDef input_tensor = {
34000fb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    .offset_limit = matmulInfo_int.input_limit,
34000fb8:	4b48      	ldr	r3, [pc, #288]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34000fba:	6a1b      	ldr	r3, [r3, #32]
  LL_Streng_TensorInitTypeDef input_tensor = {
34000fbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
34000fc0:	2310      	movs	r3, #16
34000fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
34000fc6:	2301      	movs	r3, #1
34000fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
34000fcc:	2308      	movs	r3, #8
34000fce:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
34000fd2:	2308      	movs	r3, #8
34000fd4:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
    .frame_loop_cnt = 0,
    .frame_tot_cnt = 1,
    .nbits_in = 8,
    .nbits_out = 8,
  };
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000fd8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
34000fdc:	2201      	movs	r2, #1
34000fde:	4619      	mov	r1, r3
34000fe0:	2001      	movs	r0, #1
34000fe2:	f017 fe05 	bl	34018bf0 <LL_Streng_TensorInit>

  /* Weight matrix (16×16 int8) */
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000fe6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
34000fea:	2240      	movs	r2, #64	@ 0x40
34000fec:	2100      	movs	r1, #0
34000fee:	4618      	mov	r0, r3
34000ff0:	f01b f940 	bl	3401c274 <memset>
34000ff4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
34000ff8:	f043 0302 	orr.w	r3, r3, #2
34000ffc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
34001000:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
34001004:	f043 0308 	orr.w	r3, r3, #8
34001008:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
3400100c:	4b34      	ldr	r3, [pc, #208]	@ (340010e0 <LL_ATON_Start_EpochBlock_int8+0x214>)
3400100e:	653b      	str	r3, [r7, #80]	@ 0x50
    .continuous = 1,
    .noblk = 0,
    .align_right = 0,
    .nbits_unsigned = 0,
    .addr_base = { (unsigned char *)(0x34200000UL) },
    .offset_start = matmulInfo_int.weight_start,
34001010:	4b32      	ldr	r3, [pc, #200]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34001012:	68db      	ldr	r3, [r3, #12]
  LL_Streng_TensorInitTypeDef weight_tensor = {
34001014:	657b      	str	r3, [r7, #84]	@ 0x54
    .offset_end = matmulInfo_int.weight_end,
34001016:	4b31      	ldr	r3, [pc, #196]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34001018:	691b      	ldr	r3, [r3, #16]
  LL_Streng_TensorInitTypeDef weight_tensor = {
3400101a:	65bb      	str	r3, [r7, #88]	@ 0x58
    .offset_limit = matmulInfo_int.weight_limit,
3400101c:	4b2f      	ldr	r3, [pc, #188]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
3400101e:	695b      	ldr	r3, [r3, #20]
  LL_Streng_TensorInitTypeDef weight_tensor = {
34001020:	65fb      	str	r3, [r7, #92]	@ 0x5c
34001022:	2301      	movs	r3, #1
34001024:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
34001028:	2308      	movs	r3, #8
3400102a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
3400102e:	2308      	movs	r3, #8
34001030:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
    .frame_loop_cnt = 0,
    .frame_tot_cnt = 1,
    .nbits_in = 8,
    .nbits_out = 8,
  };
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34001034:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
34001038:	2201      	movs	r2, #1
3400103a:	4619      	mov	r1, r3
3400103c:	2009      	movs	r0, #9
3400103e:	f017 fdd7 	bl	34018bf0 <LL_Streng_TensorInit>

  /* Output vector (16×1 int8) */
  LL_Streng_TensorInitTypeDef output_tensor = {
34001042:	f107 030c 	add.w	r3, r7, #12
34001046:	2240      	movs	r2, #64	@ 0x40
34001048:	2100      	movs	r1, #0
3400104a:	4618      	mov	r0, r3
3400104c:	f01b f912 	bl	3401c274 <memset>
34001050:	7b3b      	ldrb	r3, [r7, #12]
34001052:	f043 0301 	orr.w	r3, r3, #1
34001056:	733b      	strb	r3, [r7, #12]
34001058:	7b3b      	ldrb	r3, [r7, #12]
3400105a:	f043 0302 	orr.w	r3, r3, #2
3400105e:	733b      	strb	r3, [r7, #12]
34001060:	4b1f      	ldr	r3, [pc, #124]	@ (340010e0 <LL_ATON_Start_EpochBlock_int8+0x214>)
34001062:	613b      	str	r3, [r7, #16]
    .raw = 1,
    .noblk = 0,
    .align_right = 0,
    .nbits_unsigned = 0,
    .addr_base = { (unsigned char *)(0x34200000UL) },
    .offset_start = matmulInfo_int.output_start,
34001064:	4b1d      	ldr	r3, [pc, #116]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34001066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  LL_Streng_TensorInitTypeDef output_tensor = {
34001068:	617b      	str	r3, [r7, #20]
    .offset_end = matmulInfo_int.output_end,
3400106a:	4b1c      	ldr	r3, [pc, #112]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
3400106c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_Streng_TensorInitTypeDef output_tensor = {
3400106e:	61bb      	str	r3, [r7, #24]
    .offset_limit = matmulInfo_int.output_limit,
34001070:	4b1a      	ldr	r3, [pc, #104]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34001072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  LL_Streng_TensorInitTypeDef output_tensor = {
34001074:	61fb      	str	r3, [r7, #28]
34001076:	2310      	movs	r3, #16
34001078:	637b      	str	r3, [r7, #52]	@ 0x34
3400107a:	2301      	movs	r3, #1
3400107c:	647b      	str	r3, [r7, #68]	@ 0x44
3400107e:	2308      	movs	r3, #8
34001080:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
34001084:	2308      	movs	r3, #8
34001086:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    .frame_loop_cnt = 0,
    .frame_tot_cnt = 1,
    .nbits_in = 8,
    .nbits_out = 8,
  };
  LL_Streng_TensorInit(3, &output_tensor, 1);
3400108a:	f107 030c 	add.w	r3, r7, #12
3400108e:	2201      	movs	r2, #1
34001090:	4619      	mov	r1, r3
34001092:	2003      	movs	r0, #3
34001094:	f017 fdac 	bl	34018bf0 <LL_Streng_TensorInit>
  printf("Output Start: %d",matmulInfo_int.output_start);
34001098:	4b10      	ldr	r3, [pc, #64]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
3400109a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400109c:	4619      	mov	r1, r3
3400109e:	4811      	ldr	r0, [pc, #68]	@ (340010e4 <LL_ATON_Start_EpochBlock_int8+0x218>)
340010a0:	f01a ffa0 	bl	3401bfe4 <iprintf>
    // CONV output → DMA
    { LL_Switch_Init_Dest() = ATONN_DSTPORT(STRSWITCH, 0, STRENG, 3, 0),
      LL_Switch_Init_Source(0) = ATONN_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0),
      LL_Switch_Init_Context(0) = 1, LL_Switch_Init_Frames(0) = 0 },
  };
  LL_Switch_Init(switch_init, 3);
340010a4:	2103      	movs	r1, #3
340010a6:	4810      	ldr	r0, [pc, #64]	@ (340010e8 <LL_ATON_Start_EpochBlock_int8+0x21c>)
340010a8:	f018 fbba 	bl	34019820 <LL_Switch_Init>

  LL_ATON_Cache_MCU_Invalidate_Range((uintptr_t)(0x34200000UL + matmulInfo_int.input_start), matmulInfo_int.output_end - matmulInfo_int.input_start); /// Very Important!!
340010ac:	4b0b      	ldr	r3, [pc, #44]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
340010ae:	699b      	ldr	r3, [r3, #24]
340010b0:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
340010b4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
340010b8:	4a08      	ldr	r2, [pc, #32]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
340010ba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
340010bc:	4a07      	ldr	r2, [pc, #28]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
340010be:	6992      	ldr	r2, [r2, #24]
340010c0:	1a8a      	subs	r2, r1, r2
340010c2:	4611      	mov	r1, r2
340010c4:	4618      	mov	r0, r3
340010c6:	f7ff feb1 	bl	34000e2c <LL_ATON_Cache_MCU_Invalidate_Range>
    { {STRENG, 3} },
    { {CONVACC, 0} },
    { {STRENG, 1} },
    { {STRENG, 9} },
  };
  LL_ATON_EnableUnits_Init(enable_units, 4);
340010ca:	2104      	movs	r1, #4
340010cc:	4807      	ldr	r0, [pc, #28]	@ (340010ec <LL_ATON_Start_EpochBlock_int8+0x220>)
340010ce:	f017 fb05 	bl	340186dc <LL_ATON_EnableUnits_Init>
}
340010d2:	bf00      	nop
340010d4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
340010d8:	46bd      	mov	sp, r7
340010da:	bd80      	pop	{r7, pc}
340010dc:	340208f4 	.word	0x340208f4
340010e0:	34200000 	.word	0x34200000
340010e4:	3401e0f4 	.word	0x3401e0f4
340010e8:	3401f934 	.word	0x3401f934
340010ec:	3401f964 	.word	0x3401f964

340010f0 <LL_ATON_End_EpochBlock_int8>:

static void LL_ATON_End_EpochBlock_int8(const void *epoch_block)
{
340010f0:	b580      	push	{r7, lr}
340010f2:	b082      	sub	sp, #8
340010f4:	af00      	add	r7, sp, #0
340010f6:	6078      	str	r0, [r7, #4]

    { LL_Switch_Init_Dest() = ATONN_DSTPORT(STRSWITCH, 0, STRENG, 3, 0),
      LL_Switch_Init_Source(0) = ATONN_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0),
      LL_Switch_Init_Context(0) = 1, LL_Switch_Init_Frames(0) = 0 },
  };
  LL_Switch_Deinit(switch_deinit, 3);
340010f8:	2103      	movs	r1, #3
340010fa:	4805      	ldr	r0, [pc, #20]	@ (34001110 <LL_ATON_End_EpochBlock_int8+0x20>)
340010fc:	f018 fbc2 	bl	34019884 <LL_Switch_Deinit>
    { {STRENG, 3} },
    { {CONVACC, 0} },
    { {STRENG, 1} },
    { {STRENG, 9} },
  };
  LL_ATON_DisableUnits_Init(disable_units, 4);
34001100:	2104      	movs	r1, #4
34001102:	4804      	ldr	r0, [pc, #16]	@ (34001114 <LL_ATON_End_EpochBlock_int8+0x24>)
34001104:	f017 fbac 	bl	34018860 <LL_ATON_DisableUnits_Init>
}
34001108:	bf00      	nop
3400110a:	3708      	adds	r7, #8
3400110c:	46bd      	mov	sp, r7
3400110e:	bd80      	pop	{r7, pc}
34001110:	3401f974 	.word	0x3401f974
34001114:	3401f9a4 	.word	0x3401f9a4

34001118 <LL_ATON_EpochBlockItems_int8>:

const EpochBlock_ItemTypeDef *LL_ATON_EpochBlockItems_int8(void) {
34001118:	b480      	push	{r7}
3400111a:	af00      	add	r7, sp, #0
      .flags = EpochBlock_Flags_last_eb,
    },
  };


  return ll_atonn_rt_epoch_block_array;
3400111c:	4b02      	ldr	r3, [pc, #8]	@ (34001128 <LL_ATON_EpochBlockItems_int8+0x10>)
}
3400111e:	4618      	mov	r0, r3
34001120:	46bd      	mov	sp, r7
34001122:	f85d 7b04 	ldr.w	r7, [sp], #4
34001126:	4770      	bx	lr
34001128:	3401f9b4 	.word	0x3401f9b4

3400112c <LL_ATON_Input_Buffers_Info_int8>:

LL_Buffer_InfoTypeDef *LL_ATON_Input_Buffers_Info_int8(void)
{
3400112c:	b580      	push	{r7, lr}
3400112e:	b09c      	sub	sp, #112	@ 0x70
34001130:	af00      	add	r7, sp, #0
  static const float buff_info_Gemm_2_conv_4_zero_off_8_quant_scale[] = { 0.00392139703035355 };
  static const int16_t buff_info_Gemm_2_conv_4_zero_off_8_quant_offset[] = { 0 };
  static const uint32_t buff_info__shape_16_1_1[] = { 1, 1, 1, 16 };
  static const uint32_t buff_info__mem_shape_F_16_1_1[] = { 16, 1, 1 };
#endif // LL_ATON_DBG_BUFFER_INFO_EXCLUDED == 0
  LL_Buffer_InfoTypeDef buff_info[] = {
34001132:	463b      	mov	r3, r7
34001134:	2270      	movs	r2, #112	@ 0x70
34001136:	2100      	movs	r1, #0
34001138:	4618      	mov	r0, r3
3400113a:	f01b f89b 	bl	3401c274 <memset>
3400113e:	4b15      	ldr	r3, [pc, #84]	@ (34001194 <LL_ATON_Input_Buffers_Info_int8+0x68>)
34001140:	603b      	str	r3, [r7, #0]
34001142:	4b15      	ldr	r3, [pc, #84]	@ (34001198 <LL_ATON_Input_Buffers_Info_int8+0x6c>)
34001144:	607b      	str	r3, [r7, #4]
    {
      .name = "Input_0_out_0",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.input_start,
34001146:	4b15      	ldr	r3, [pc, #84]	@ (3400119c <LL_ATON_Input_Buffers_Info_int8+0x70>)
34001148:	699b      	ldr	r3, [r3, #24]
  LL_Buffer_InfoTypeDef buff_info[] = {
3400114a:	60bb      	str	r3, [r7, #8]
      .offset_end = matmulInfo_int.input_end,
3400114c:	4b13      	ldr	r3, [pc, #76]	@ (3400119c <LL_ATON_Input_Buffers_Info_int8+0x70>)
3400114e:	69db      	ldr	r3, [r3, #28]
  LL_Buffer_InfoTypeDef buff_info[] = {
34001150:	60fb      	str	r3, [r7, #12]
      .offset_limit = matmulInfo_int.input_limit,
34001152:	4b12      	ldr	r3, [pc, #72]	@ (3400119c <LL_ATON_Input_Buffers_Info_int8+0x70>)
34001154:	6a1b      	ldr	r3, [r3, #32]
  LL_Buffer_InfoTypeDef buff_info[] = {
34001156:	613b      	str	r3, [r7, #16]
34001158:	2301      	movs	r3, #1
3400115a:	61bb      	str	r3, [r7, #24]
3400115c:	4b10      	ldr	r3, [pc, #64]	@ (340011a0 <LL_ATON_Input_Buffers_Info_int8+0x74>)
3400115e:	61fb      	str	r3, [r7, #28]
34001160:	2302      	movs	r3, #2
34001162:	843b      	strh	r3, [r7, #32]
34001164:	2303      	movs	r3, #3
34001166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
3400116a:	2307      	movs	r3, #7
3400116c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
34001170:	2304      	movs	r3, #4
34001172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
34001176:	2308      	movs	r3, #8
34001178:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
3400117c:	4b09      	ldr	r3, [pc, #36]	@ (340011a4 <LL_ATON_Input_Buffers_Info_int8+0x78>)
3400117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
34001180:	4b09      	ldr	r3, [pc, #36]	@ (340011a8 <LL_ATON_Input_Buffers_Info_int8+0x7c>)
34001182:	633b      	str	r3, [r7, #48]	@ 0x30
34001184:	4b09      	ldr	r3, [pc, #36]	@ (340011ac <LL_ATON_Input_Buffers_Info_int8+0x80>)
34001186:	637b      	str	r3, [r7, #52]	@ 0x34
    {
      .name = NULL,
    }
  };

  return buff_info;
34001188:	2300      	movs	r3, #0
}
3400118a:	4618      	mov	r0, r3
3400118c:	3770      	adds	r7, #112	@ 0x70
3400118e:	46bd      	mov	sp, r7
34001190:	bd80      	pop	{r7, pc}
34001192:	bf00      	nop
34001194:	3401e108 	.word	0x3401e108
34001198:	34200000 	.word	0x34200000
3400119c:	340208f4 	.word	0x340208f4
340011a0:	3401f9dc 	.word	0x3401f9dc
340011a4:	3401f9e4 	.word	0x3401f9e4
340011a8:	3401f9f4 	.word	0x3401f9f4
340011ac:	3401f9f8 	.word	0x3401f9f8

340011b0 <LL_ATON_Output_Buffers_Info_int8>:

LL_Buffer_InfoTypeDef *LL_ATON_Output_Buffers_Info_int8(void)
{
340011b0:	b580      	push	{r7, lr}
340011b2:	b09c      	sub	sp, #112	@ 0x70
340011b4:	af00      	add	r7, sp, #0
	extern volatile Matmul_info matmulInfo_int;
  static const uint32_t buff_info__shape_1_16[] = { 1, 1, 16, 1 };
  static const uint32_t buff_info__mem_shape_U_1_16[] = { 1, 16 };
  static const float buff_info_Quantize_3_out_0_quant_scale[] = { 0.0269236713647842 };
  static const int16_t buff_info_Quantize_3_out_0_quant_offset[] = { -128 };
  LL_Buffer_InfoTypeDef buff_info[] = {
340011b6:	463b      	mov	r3, r7
340011b8:	2270      	movs	r2, #112	@ 0x70
340011ba:	2100      	movs	r1, #0
340011bc:	4618      	mov	r0, r3
340011be:	f01b f859 	bl	3401c274 <memset>
340011c2:	4b16      	ldr	r3, [pc, #88]	@ (3400121c <LL_ATON_Output_Buffers_Info_int8+0x6c>)
340011c4:	603b      	str	r3, [r7, #0]
340011c6:	4b16      	ldr	r3, [pc, #88]	@ (34001220 <LL_ATON_Output_Buffers_Info_int8+0x70>)
340011c8:	607b      	str	r3, [r7, #4]
    {
      .name = "Quantize_3_out_0",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.output_start,
340011ca:	4b16      	ldr	r3, [pc, #88]	@ (34001224 <LL_ATON_Output_Buffers_Info_int8+0x74>)
340011cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  LL_Buffer_InfoTypeDef buff_info[] = {
340011ce:	60bb      	str	r3, [r7, #8]
      .offset_end = matmulInfo_int.output_end,
340011d0:	4b14      	ldr	r3, [pc, #80]	@ (34001224 <LL_ATON_Output_Buffers_Info_int8+0x74>)
340011d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_Buffer_InfoTypeDef buff_info[] = {
340011d4:	60fb      	str	r3, [r7, #12]
      .offset_limit = matmulInfo_int.output_limit,
340011d6:	4b13      	ldr	r3, [pc, #76]	@ (34001224 <LL_ATON_Output_Buffers_Info_int8+0x74>)
340011d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  LL_Buffer_InfoTypeDef buff_info[] = {
340011da:	613b      	str	r3, [r7, #16]
340011dc:	2302      	movs	r3, #2
340011de:	82fb      	strh	r3, [r7, #22]
340011e0:	2301      	movs	r3, #1
340011e2:	61bb      	str	r3, [r7, #24]
340011e4:	4b10      	ldr	r3, [pc, #64]	@ (34001228 <LL_ATON_Output_Buffers_Info_int8+0x78>)
340011e6:	61fb      	str	r3, [r7, #28]
340011e8:	2302      	movs	r3, #2
340011ea:	843b      	strh	r3, [r7, #32]
340011ec:	2303      	movs	r3, #3
340011ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
340011f2:	2307      	movs	r3, #7
340011f4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
340011f8:	2304      	movs	r3, #4
340011fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
340011fe:	2308      	movs	r3, #8
34001200:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
34001204:	4b09      	ldr	r3, [pc, #36]	@ (3400122c <LL_ATON_Output_Buffers_Info_int8+0x7c>)
34001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
34001208:	4b09      	ldr	r3, [pc, #36]	@ (34001230 <LL_ATON_Output_Buffers_Info_int8+0x80>)
3400120a:	633b      	str	r3, [r7, #48]	@ 0x30
3400120c:	4b09      	ldr	r3, [pc, #36]	@ (34001234 <LL_ATON_Output_Buffers_Info_int8+0x84>)
3400120e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
      .name = NULL,
    }
  };

  return buff_info;
34001210:	2300      	movs	r3, #0
}
34001212:	4618      	mov	r0, r3
34001214:	3770      	adds	r7, #112	@ 0x70
34001216:	46bd      	mov	sp, r7
34001218:	bd80      	pop	{r7, pc}
3400121a:	bf00      	nop
3400121c:	3401e118 	.word	0x3401e118
34001220:	34200000 	.word	0x34200000
34001224:	340208f4 	.word	0x340208f4
34001228:	3401f9fc 	.word	0x3401f9fc
3400122c:	3401fa04 	.word	0x3401fa04
34001230:	3401fa14 	.word	0x3401fa14
34001234:	3401fa18 	.word	0x3401fa18

34001238 <LL_ATON_Internal_Buffers_Info_int8>:

LL_Buffer_InfoTypeDef *LL_ATON_Internal_Buffers_Info_int8(void)
{
34001238:	b580      	push	{r7, lr}
3400123a:	b0aa      	sub	sp, #168	@ 0xa8
3400123c:	af00      	add	r7, sp, #0
  static const uint32_t buff_info__mem_shape_F_1_16_1_1[] = { 1, 16, 1, 1 };
  static const float buff_info_Gemm_2_reshape_x_2_quant_scale[] = { 0.00392139703035355 };
  static const int16_t buff_info_Gemm_2_reshape_x_2_quant_offset[] = { -128 };
  static const float buff_info_Gemm_2_conv_4_off_bias_out_13_quant_scale[] = { 0.0269236713647842 };
  static const int16_t buff_info_Gemm_2_conv_4_off_bias_out_13_quant_offset[] = { -128 };
  LL_Buffer_InfoTypeDef buff_info[] = {
3400123e:	463b      	mov	r3, r7
34001240:	22a8      	movs	r2, #168	@ 0xa8
34001242:	2100      	movs	r1, #0
34001244:	4618      	mov	r0, r3
34001246:	f01b f815 	bl	3401c274 <memset>
3400124a:	4b2d      	ldr	r3, [pc, #180]	@ (34001300 <LL_ATON_Internal_Buffers_Info_int8+0xc8>)
3400124c:	603b      	str	r3, [r7, #0]
3400124e:	4b2d      	ldr	r3, [pc, #180]	@ (34001304 <LL_ATON_Internal_Buffers_Info_int8+0xcc>)
34001250:	607b      	str	r3, [r7, #4]
    {
      .name = "Gemm_2_reshape_x_2",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.input_start,
34001252:	4b2d      	ldr	r3, [pc, #180]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
34001254:	699b      	ldr	r3, [r3, #24]
  LL_Buffer_InfoTypeDef buff_info[] = {
34001256:	60bb      	str	r3, [r7, #8]
      .offset_end = matmulInfo_int.input_end,
34001258:	4b2b      	ldr	r3, [pc, #172]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
3400125a:	69db      	ldr	r3, [r3, #28]
  LL_Buffer_InfoTypeDef buff_info[] = {
3400125c:	60fb      	str	r3, [r7, #12]
      .offset_limit = matmulInfo_int.input_limit,
3400125e:	4b2a      	ldr	r3, [pc, #168]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
34001260:	6a1b      	ldr	r3, [r3, #32]
  LL_Buffer_InfoTypeDef buff_info[] = {
34001262:	613b      	str	r3, [r7, #16]
34001264:	2301      	movs	r3, #1
34001266:	82fb      	strh	r3, [r7, #22]
34001268:	2310      	movs	r3, #16
3400126a:	61bb      	str	r3, [r7, #24]
3400126c:	4b27      	ldr	r3, [pc, #156]	@ (3400130c <LL_ATON_Internal_Buffers_Info_int8+0xd4>)
3400126e:	61fb      	str	r3, [r7, #28]
34001270:	2304      	movs	r3, #4
34001272:	843b      	strh	r3, [r7, #32]
34001274:	2301      	movs	r3, #1
34001276:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
3400127a:	2303      	movs	r3, #3
3400127c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
34001280:	2307      	movs	r3, #7
34001282:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
34001286:	2304      	movs	r3, #4
34001288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
3400128c:	2308      	movs	r3, #8
3400128e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
34001292:	4b1f      	ldr	r3, [pc, #124]	@ (34001310 <LL_ATON_Internal_Buffers_Info_int8+0xd8>)
34001294:	62fb      	str	r3, [r7, #44]	@ 0x2c
34001296:	4b1f      	ldr	r3, [pc, #124]	@ (34001314 <LL_ATON_Internal_Buffers_Info_int8+0xdc>)
34001298:	633b      	str	r3, [r7, #48]	@ 0x30
3400129a:	4b1f      	ldr	r3, [pc, #124]	@ (34001318 <LL_ATON_Internal_Buffers_Info_int8+0xe0>)
3400129c:	637b      	str	r3, [r7, #52]	@ 0x34
3400129e:	4b1f      	ldr	r3, [pc, #124]	@ (3400131c <LL_ATON_Internal_Buffers_Info_int8+0xe4>)
340012a0:	63bb      	str	r3, [r7, #56]	@ 0x38
340012a2:	4b18      	ldr	r3, [pc, #96]	@ (34001304 <LL_ATON_Internal_Buffers_Info_int8+0xcc>)
340012a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      .offset = buff_info_Gemm_2_reshape_x_2_quant_offset,
    },
    {
      .name = "Gemm_2_conv_4_off_bias_out_13",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.output_start,
340012a6:	4b18      	ldr	r3, [pc, #96]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
340012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  LL_Buffer_InfoTypeDef buff_info[] = {
340012aa:	643b      	str	r3, [r7, #64]	@ 0x40
      .offset_end = matmulInfo_int.output_end,
340012ac:	4b16      	ldr	r3, [pc, #88]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
340012ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_Buffer_InfoTypeDef buff_info[] = {
340012b0:	647b      	str	r3, [r7, #68]	@ 0x44
      .offset_limit = matmulInfo_int.output_limit,
340012b2:	4b15      	ldr	r3, [pc, #84]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
340012b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  LL_Buffer_InfoTypeDef buff_info[] = {
340012b6:	64bb      	str	r3, [r7, #72]	@ 0x48
340012b8:	2302      	movs	r3, #2
340012ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
340012be:	2310      	movs	r3, #16
340012c0:	653b      	str	r3, [r7, #80]	@ 0x50
340012c2:	4b12      	ldr	r3, [pc, #72]	@ (3400130c <LL_ATON_Internal_Buffers_Info_int8+0xd4>)
340012c4:	657b      	str	r3, [r7, #84]	@ 0x54
340012c6:	2304      	movs	r3, #4
340012c8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
340012cc:	2301      	movs	r3, #1
340012ce:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
340012d2:	2303      	movs	r3, #3
340012d4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
340012d8:	2307      	movs	r3, #7
340012da:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
340012de:	2304      	movs	r3, #4
340012e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
340012e4:	2308      	movs	r3, #8
340012e6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
340012ea:	4b09      	ldr	r3, [pc, #36]	@ (34001310 <LL_ATON_Internal_Buffers_Info_int8+0xd8>)
340012ec:	667b      	str	r3, [r7, #100]	@ 0x64
340012ee:	4b0c      	ldr	r3, [pc, #48]	@ (34001320 <LL_ATON_Internal_Buffers_Info_int8+0xe8>)
340012f0:	66bb      	str	r3, [r7, #104]	@ 0x68
340012f2:	4b0c      	ldr	r3, [pc, #48]	@ (34001324 <LL_ATON_Internal_Buffers_Info_int8+0xec>)
340012f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    {
      .name = NULL,
    }
  };

  return buff_info;
340012f6:	2300      	movs	r3, #0
}
340012f8:	4618      	mov	r0, r3
340012fa:	37a8      	adds	r7, #168	@ 0xa8
340012fc:	46bd      	mov	sp, r7
340012fe:	bd80      	pop	{r7, pc}
34001300:	3401e12c 	.word	0x3401e12c
34001304:	34200000 	.word	0x34200000
34001308:	340208f4 	.word	0x340208f4
3400130c:	3401fa1c 	.word	0x3401fa1c
34001310:	3401fa2c 	.word	0x3401fa2c
34001314:	3401fa3c 	.word	0x3401fa3c
34001318:	3401fa40 	.word	0x3401fa40
3400131c:	3401e140 	.word	0x3401e140
34001320:	3401fa44 	.word	0x3401fa44
34001324:	3401fa48 	.word	0x3401fa48

34001328 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
34001328:	b580      	push	{r7, lr}
3400132a:	b086      	sub	sp, #24
3400132c:	af00      	add	r7, sp, #0
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
3400132e:	4b21      	ldr	r3, [pc, #132]	@ (340013b4 <Fuse_Programming+0x8c>)
34001330:	607b      	str	r3, [r7, #4]

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
34001332:	237c      	movs	r3, #124	@ 0x7c
34001334:	617b      	str	r3, [r7, #20]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34001336:	f107 020c 	add.w	r2, r7, #12
3400133a:	1d3b      	adds	r3, r7, #4
3400133c:	6979      	ldr	r1, [r7, #20]
3400133e:	4618      	mov	r0, r3
34001340:	f002 fd02 	bl	34003d48 <HAL_BSEC_OTP_Read>
34001344:	4603      	mov	r3, r0
34001346:	2b00      	cmp	r3, #0
34001348:	d12e      	bne.n	340013a8 <Fuse_Programming+0x80>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
3400134a:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
3400134e:	613b      	str	r3, [r7, #16]
    if ((data & bit_mask) != bit_mask)
34001350:	68fa      	ldr	r2, [r7, #12]
34001352:	693b      	ldr	r3, [r7, #16]
34001354:	4013      	ands	r3, r2
34001356:	693a      	ldr	r2, [r7, #16]
34001358:	429a      	cmp	r2, r3
3400135a:	d027      	beq.n	340013ac <Fuse_Programming+0x84>
    {
      data |= bit_mask;
3400135c:	68fa      	ldr	r2, [r7, #12]
3400135e:	693b      	ldr	r3, [r7, #16]
34001360:	4313      	orrs	r3, r2
34001362:	60fb      	str	r3, [r7, #12]
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34001364:	68fa      	ldr	r2, [r7, #12]
34001366:	1d38      	adds	r0, r7, #4
34001368:	2300      	movs	r3, #0
3400136a:	6979      	ldr	r1, [r7, #20]
3400136c:	f002 fd24 	bl	34003db8 <HAL_BSEC_OTP_Program>
34001370:	4603      	mov	r3, r0
34001372:	2b00      	cmp	r3, #0
34001374:	d115      	bne.n	340013a2 <Fuse_Programming+0x7a>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34001376:	f107 020c 	add.w	r2, r7, #12
3400137a:	1d3b      	adds	r3, r7, #4
3400137c:	6979      	ldr	r1, [r7, #20]
3400137e:	4618      	mov	r0, r3
34001380:	f002 fce2 	bl	34003d48 <HAL_BSEC_OTP_Read>
34001384:	4603      	mov	r3, r0
34001386:	2b00      	cmp	r3, #0
34001388:	d108      	bne.n	3400139c <Fuse_Programming+0x74>
        {
          if ((data & bit_mask) != bit_mask)
3400138a:	68fa      	ldr	r2, [r7, #12]
3400138c:	693b      	ldr	r3, [r7, #16]
3400138e:	4013      	ands	r3, r2
34001390:	693a      	ldr	r2, [r7, #16]
34001392:	429a      	cmp	r2, r3
34001394:	d00a      	beq.n	340013ac <Fuse_Programming+0x84>
          {
            /* Error : Fuse programming not taken in account */
            ErrorHandler();
34001396:	f000 f80f 	bl	340013b8 <ErrorHandler>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
3400139a:	e007      	b.n	340013ac <Fuse_Programming+0x84>
          ErrorHandler();
3400139c:	f000 f80c 	bl	340013b8 <ErrorHandler>
}
340013a0:	e004      	b.n	340013ac <Fuse_Programming+0x84>
        ErrorHandler();
340013a2:	f000 f809 	bl	340013b8 <ErrorHandler>
}
340013a6:	e001      	b.n	340013ac <Fuse_Programming+0x84>
    ErrorHandler();
340013a8:	f000 f806 	bl	340013b8 <ErrorHandler>
}
340013ac:	bf00      	nop
340013ae:	3718      	adds	r7, #24
340013b0:	46bd      	mov	sp, r7
340013b2:	bd80      	pop	{r7, pc}
340013b4:	56009000 	.word	0x56009000

340013b8 <ErrorHandler>:
/**
  * @brief  Handle error which occurs when calling HAL API
  * @retval None
  */
static void ErrorHandler(void)
{
340013b8:	b480      	push	{r7}
340013ba:	af00      	add	r7, sp, #0
  while(1);
340013bc:	bf00      	nop
340013be:	e7fd      	b.n	340013bc <ErrorHandler+0x4>

340013c0 <LL_MEM_EnableClock>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
340013c0:	b480      	push	{r7}
340013c2:	b085      	sub	sp, #20
340013c4:	af00      	add	r7, sp, #0
340013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
340013c8:	4a07      	ldr	r2, [pc, #28]	@ (340013e8 <LL_MEM_EnableClock+0x28>)
340013ca:	687b      	ldr	r3, [r7, #4]
340013cc:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
340013d0:	4b05      	ldr	r3, [pc, #20]	@ (340013e8 <LL_MEM_EnableClock+0x28>)
340013d2:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
340013d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
340013d8:	68fb      	ldr	r3, [r7, #12]
}
340013da:	bf00      	nop
340013dc:	3714      	adds	r7, #20
340013de:	46bd      	mov	sp, r7
340013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
340013e4:	4770      	bx	lr
340013e6:	bf00      	nop
340013e8:	56028000 	.word	0x56028000

340013ec <LL_MEM_EnableClockLowPower>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
340013ec:	b480      	push	{r7}
340013ee:	b085      	sub	sp, #20
340013f0:	af00      	add	r7, sp, #0
340013f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
340013f4:	4a07      	ldr	r2, [pc, #28]	@ (34001414 <LL_MEM_EnableClockLowPower+0x28>)
340013f6:	687b      	ldr	r3, [r7, #4]
340013f8:	f8c2 3a8c 	str.w	r3, [r2, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
340013fc:	4b05      	ldr	r3, [pc, #20]	@ (34001414 <LL_MEM_EnableClockLowPower+0x28>)
340013fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34001402:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34001404:	68fb      	ldr	r3, [r7, #12]
}
34001406:	bf00      	nop
34001408:	3714      	adds	r7, #20
3400140a:	46bd      	mov	sp, r7
3400140c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001410:	4770      	bx	lr
34001412:	bf00      	nop
34001414:	56028000 	.word	0x56028000

34001418 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_MDF1
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADF1
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
34001418:	b480      	push	{r7}
3400141a:	b085      	sub	sp, #20
3400141c:	af00      	add	r7, sp, #0
3400141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34001420:	4a07      	ldr	r2, [pc, #28]	@ (34001440 <LL_AHB2_GRP1_EnableClock+0x28>)
34001422:	687b      	ldr	r3, [r7, #4]
34001424:	f8c2 3a54 	str.w	r3, [r2, #2644]	@ 0xa54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB2ENR);
34001428:	4b05      	ldr	r3, [pc, #20]	@ (34001440 <LL_AHB2_GRP1_EnableClock+0x28>)
3400142a:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
3400142e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34001430:	68fb      	ldr	r3, [r7, #12]
}
34001432:	bf00      	nop
34001434:	3714      	adds	r7, #20
34001436:	46bd      	mov	sp, r7
34001438:	f85d 7b04 	ldr.w	r7, [sp], #4
3400143c:	4770      	bx	lr
3400143e:	bf00      	nop
34001440:	56028000 	.word	0x56028000

34001444 <LL_AHB3_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
34001444:	b480      	push	{r7}
34001446:	b085      	sub	sp, #20
34001448:	af00      	add	r7, sp, #0
3400144a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB3ENSR, Periphs);
3400144c:	4a07      	ldr	r2, [pc, #28]	@ (3400146c <LL_AHB3_GRP1_EnableClock+0x28>)
3400144e:	687b      	ldr	r3, [r7, #4]
34001450:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB3ENR);
34001454:	4b05      	ldr	r3, [pc, #20]	@ (3400146c <LL_AHB3_GRP1_EnableClock+0x28>)
34001456:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
3400145a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
3400145c:	68fb      	ldr	r3, [r7, #12]
}
3400145e:	bf00      	nop
34001460:	3714      	adds	r7, #20
34001462:	46bd      	mov	sp, r7
34001464:	f85d 7b04 	ldr.w	r7, [sp], #4
34001468:	4770      	bx	lr
3400146a:	bf00      	nop
3400146c:	56028000 	.word	0x56028000

34001470 <LL_AHB3_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_ForceReset(uint32_t Periphs)
{
34001470:	b480      	push	{r7}
34001472:	b083      	sub	sp, #12
34001474:	af00      	add	r7, sp, #0
34001476:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
34001478:	4a04      	ldr	r2, [pc, #16]	@ (3400148c <LL_AHB3_GRP1_ForceReset+0x1c>)
3400147a:	687b      	ldr	r3, [r7, #4]
3400147c:	f8c2 3a18 	str.w	r3, [r2, #2584]	@ 0xa18
}
34001480:	bf00      	nop
34001482:	370c      	adds	r7, #12
34001484:	46bd      	mov	sp, r7
34001486:	f85d 7b04 	ldr.w	r7, [sp], #4
3400148a:	4770      	bx	lr
3400148c:	56028000 	.word	0x56028000

34001490 <LL_AHB3_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_ReleaseReset(uint32_t Periphs)
{
34001490:	b480      	push	{r7}
34001492:	b083      	sub	sp, #12
34001494:	af00      	add	r7, sp, #0
34001496:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
34001498:	4b06      	ldr	r3, [pc, #24]	@ (340014b4 <LL_AHB3_GRP1_ReleaseReset+0x24>)
3400149a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400149e:	461a      	mov	r2, r3
340014a0:	687b      	ldr	r3, [r7, #4]
340014a2:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
}
340014a6:	bf00      	nop
340014a8:	370c      	adds	r7, #12
340014aa:	46bd      	mov	sp, r7
340014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
340014b0:	4770      	bx	lr
340014b2:	bf00      	nop
340014b4:	56028000 	.word	0x56028000

340014b8 <LL_AHB5_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClock(uint32_t Periphs)
{
340014b8:	b480      	push	{r7}
340014ba:	b085      	sub	sp, #20
340014bc:	af00      	add	r7, sp, #0
340014be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340014c0:	4a07      	ldr	r2, [pc, #28]	@ (340014e0 <LL_AHB5_GRP1_EnableClock+0x28>)
340014c2:	687b      	ldr	r3, [r7, #4]
340014c4:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5ENR);
340014c8:	4b05      	ldr	r3, [pc, #20]	@ (340014e0 <LL_AHB5_GRP1_EnableClock+0x28>)
340014ca:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
340014ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
340014d0:	68fb      	ldr	r3, [r7, #12]
}
340014d2:	bf00      	nop
340014d4:	3714      	adds	r7, #20
340014d6:	46bd      	mov	sp, r7
340014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
340014dc:	4770      	bx	lr
340014de:	bf00      	nop
340014e0:	56028000 	.word	0x56028000

340014e4 <LL_AHB5_GRP1_ForceReset>:
  *         @arg @ref LL_AHB5_GRP1_PERIPH_CACHEAXI
  *         @arg @ref LL_AHB5_GRP1_PERIPH_NPU
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_ForceReset(uint32_t Periphs)
{
340014e4:	b480      	push	{r7}
340014e6:	b083      	sub	sp, #12
340014e8:	af00      	add	r7, sp, #0
340014ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
340014ec:	4a04      	ldr	r2, [pc, #16]	@ (34001500 <LL_AHB5_GRP1_ForceReset+0x1c>)
340014ee:	687b      	ldr	r3, [r7, #4]
340014f0:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
340014f4:	bf00      	nop
340014f6:	370c      	adds	r7, #12
340014f8:	46bd      	mov	sp, r7
340014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
340014fe:	4770      	bx	lr
34001500:	56028000 	.word	0x56028000

34001504 <LL_AHB5_GRP1_ReleaseReset>:
  *         @arg @ref LL_AHB5_GRP1_PERIPH_CACHEAXI
  *         @arg @ref LL_AHB5_GRP1_PERIPH_NPU
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_ReleaseReset(uint32_t Periphs)
{
34001504:	b480      	push	{r7}
34001506:	b083      	sub	sp, #12
34001508:	af00      	add	r7, sp, #0
3400150a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400150c:	4b06      	ldr	r3, [pc, #24]	@ (34001528 <LL_AHB5_GRP1_ReleaseReset+0x24>)
3400150e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34001512:	461a      	mov	r2, r3
34001514:	687b      	ldr	r3, [r7, #4]
34001516:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
3400151a:	bf00      	nop
3400151c:	370c      	adds	r7, #12
3400151e:	46bd      	mov	sp, r7
34001520:	f85d 7b04 	ldr.w	r7, [sp], #4
34001524:	4770      	bx	lr
34001526:	bf00      	nop
34001528:	56028000 	.word	0x56028000

3400152c <LL_AHB5_GRP1_EnableClockLowPower>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
3400152c:	b480      	push	{r7}
3400152e:	b085      	sub	sp, #20
34001530:	af00      	add	r7, sp, #0
34001532:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34001534:	4a07      	ldr	r2, [pc, #28]	@ (34001554 <LL_AHB5_GRP1_EnableClockLowPower+0x28>)
34001536:	687b      	ldr	r3, [r7, #4]
34001538:	f8c2 3aa0 	str.w	r3, [r2, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
3400153c:	4b05      	ldr	r3, [pc, #20]	@ (34001554 <LL_AHB5_GRP1_EnableClockLowPower+0x28>)
3400153e:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34001542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34001544:	68fb      	ldr	r3, [r7, #12]
}
34001546:	bf00      	nop
34001548:	3714      	adds	r7, #20
3400154a:	46bd      	mov	sp, r7
3400154c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001550:	4770      	bx	lr
34001552:	bf00      	nop
34001554:	56028000 	.word	0x56028000

34001558 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
34001558:	b480      	push	{r7}
3400155a:	b085      	sub	sp, #20
3400155c:	af00      	add	r7, sp, #0
3400155e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34001560:	4a07      	ldr	r2, [pc, #28]	@ (34001580 <LL_APB2_GRP1_EnableClock+0x28>)
34001562:	687b      	ldr	r3, [r7, #4]
34001564:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34001568:	4b05      	ldr	r3, [pc, #20]	@ (34001580 <LL_APB2_GRP1_EnableClock+0x28>)
3400156a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
3400156e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34001570:	68fb      	ldr	r3, [r7, #12]
}
34001572:	bf00      	nop
34001574:	3714      	adds	r7, #20
34001576:	46bd      	mov	sp, r7
34001578:	f85d 7b04 	ldr.w	r7, [sp], #4
3400157c:	4770      	bx	lr
3400157e:	bf00      	nop
34001580:	56028000 	.word	0x56028000

34001584 <LL_APB5_GRP1_EnableClockLowPower>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
34001584:	b480      	push	{r7}
34001586:	b085      	sub	sp, #20
34001588:	af00      	add	r7, sp, #0
3400158a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
3400158c:	4a07      	ldr	r2, [pc, #28]	@ (340015ac <LL_APB5_GRP1_EnableClockLowPower+0x28>)
3400158e:	687b      	ldr	r3, [r7, #4]
34001590:	f8c2 3abc 	str.w	r3, [r2, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34001594:	4b05      	ldr	r3, [pc, #20]	@ (340015ac <LL_APB5_GRP1_EnableClockLowPower+0x28>)
34001596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
3400159a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
3400159c:	68fb      	ldr	r3, [r7, #12]
}
3400159e:	bf00      	nop
340015a0:	3714      	adds	r7, #20
340015a2:	46bd      	mov	sp, r7
340015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340015a8:	4770      	bx	lr
340015aa:	bf00      	nop
340015ac:	56028000 	.word	0x56028000

340015b0 <LL_RCC_SetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
340015b0:	b480      	push	{r7}
340015b2:	b083      	sub	sp, #12
340015b4:	af00      	add	r7, sp, #0
340015b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
340015b8:	4b06      	ldr	r3, [pc, #24]	@ (340015d4 <LL_RCC_SetCpuClkSource+0x24>)
340015ba:	6a1b      	ldr	r3, [r3, #32]
340015bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
340015c0:	4904      	ldr	r1, [pc, #16]	@ (340015d4 <LL_RCC_SetCpuClkSource+0x24>)
340015c2:	687b      	ldr	r3, [r7, #4]
340015c4:	4313      	orrs	r3, r2
340015c6:	620b      	str	r3, [r1, #32]
}
340015c8:	bf00      	nop
340015ca:	370c      	adds	r7, #12
340015cc:	46bd      	mov	sp, r7
340015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
340015d2:	4770      	bx	lr
340015d4:	56028000 	.word	0x56028000

340015d8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
340015d8:	b480      	push	{r7}
340015da:	b083      	sub	sp, #12
340015dc:	af00      	add	r7, sp, #0
340015de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
340015e0:	4b06      	ldr	r3, [pc, #24]	@ (340015fc <LL_RCC_SetSysClkSource+0x24>)
340015e2:	6a1b      	ldr	r3, [r3, #32]
340015e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
340015e8:	4904      	ldr	r1, [pc, #16]	@ (340015fc <LL_RCC_SetSysClkSource+0x24>)
340015ea:	687b      	ldr	r3, [r7, #4]
340015ec:	4313      	orrs	r3, r2
340015ee:	620b      	str	r3, [r1, #32]
}
340015f0:	bf00      	nop
340015f2:	370c      	adds	r7, #12
340015f4:	46bd      	mov	sp, r7
340015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
340015fa:	4770      	bx	lr
340015fc:	56028000 	.word	0x56028000

34001600 <enableTiming_Cyc>:
int NPU_MatMul_int8(size_t insize,size_t outsize);
int NPU_MatMul_float(size_t insize,size_t outsize);
int ARM_MatMul_int8(size_t insize,size_t outsize);
int ARM_MatMul_float(size_t insize,size_t outsize);

void enableTiming_Cyc(void){
34001600:	b480      	push	{r7}
34001602:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
34001604:	4b08      	ldr	r3, [pc, #32]	@ (34001628 <enableTiming_Cyc+0x28>)
34001606:	68db      	ldr	r3, [r3, #12]
34001608:	4a07      	ldr	r2, [pc, #28]	@ (34001628 <enableTiming_Cyc+0x28>)
3400160a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
3400160e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable cycle counter
34001610:	4b06      	ldr	r3, [pc, #24]	@ (3400162c <enableTiming_Cyc+0x2c>)
34001612:	681b      	ldr	r3, [r3, #0]
34001614:	4a05      	ldr	r2, [pc, #20]	@ (3400162c <enableTiming_Cyc+0x2c>)
34001616:	f043 0301 	orr.w	r3, r3, #1
3400161a:	6013      	str	r3, [r2, #0]
}
3400161c:	bf00      	nop
3400161e:	46bd      	mov	sp, r7
34001620:	f85d 7b04 	ldr.w	r7, [sp], #4
34001624:	4770      	bx	lr
34001626:	bf00      	nop
34001628:	e000edf0 	.word	0xe000edf0
3400162c:	e0001000 	.word	0xe0001000

34001630 <startTiming_Cyc>:

void startTiming_Cyc(void){
34001630:	b480      	push	{r7}
34001632:	af00      	add	r7, sp, #0
	DWT->CYCCNT = 0; // Reset counter
34001634:	4b03      	ldr	r3, [pc, #12]	@ (34001644 <startTiming_Cyc+0x14>)
34001636:	2200      	movs	r2, #0
34001638:	605a      	str	r2, [r3, #4]
}
3400163a:	bf00      	nop
3400163c:	46bd      	mov	sp, r7
3400163e:	f85d 7b04 	ldr.w	r7, [sp], #4
34001642:	4770      	bx	lr
34001644:	e0001000 	.word	0xe0001000

34001648 <getTiming_Cyc>:

uint32_t getTiming_Cyc(){
34001648:	b480      	push	{r7}
3400164a:	b083      	sub	sp, #12
3400164c:	af00      	add	r7, sp, #0
	uint32_t cycles = DWT->CYCCNT;
3400164e:	4b05      	ldr	r3, [pc, #20]	@ (34001664 <getTiming_Cyc+0x1c>)
34001650:	685b      	ldr	r3, [r3, #4]
34001652:	607b      	str	r3, [r7, #4]
	return cycles;
34001654:	687b      	ldr	r3, [r7, #4]
}
34001656:	4618      	mov	r0, r3
34001658:	370c      	adds	r7, #12
3400165a:	46bd      	mov	sp, r7
3400165c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001660:	4770      	bx	lr
34001662:	bf00      	nop
34001664:	e0001000 	.word	0xe0001000

34001668 <main>:

int main(void)
{
34001668:	b580      	push	{r7, lr}
3400166a:	b082      	sub	sp, #8
3400166c:	af00      	add	r7, sp, #0
	// define Sizes here and pass to main functions
	size_t insize = 8;
3400166e:	2308      	movs	r3, #8
34001670:	607b      	str	r3, [r7, #4]
	size_t outsize = 8;
34001672:	2308      	movs	r3, #8
34001674:	603b      	str	r3, [r7, #0]
	Hardware_init();
34001676:	f000 f875 	bl	34001764 <Hardware_init>
	enableTiming_Cyc();
3400167a:	f7ff ffc1 	bl	34001600 <enableTiming_Cyc>
	NPU_MatMul_int8(insize,outsize);
3400167e:	6839      	ldr	r1, [r7, #0]
34001680:	6878      	ldr	r0, [r7, #4]
34001682:	f000 f805 	bl	34001690 <NPU_MatMul_int8>
34001686:	2300      	movs	r3, #0
}
34001688:	4618      	mov	r0, r3
3400168a:	3708      	adds	r7, #8
3400168c:	46bd      	mov	sp, r7
3400168e:	bd80      	pop	{r7, pc}

34001690 <NPU_MatMul_int8>:

int NPU_MatMul_int8(size_t insize,size_t outsize){
34001690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
34001694:	b08a      	sub	sp, #40	@ 0x28
34001696:	af00      	add	r7, sp, #0
34001698:	6078      	str	r0, [r7, #4]
3400169a:	6039      	str	r1, [r7, #0]
	Hardware_init();
3400169c:	f000 f862 	bl	34001764 <Hardware_init>
	printf("=== MatMul int8 Main ===\n\r");
340016a0:	482d      	ldr	r0, [pc, #180]	@ (34001758 <NPU_MatMul_int8+0xc8>)
340016a2:	f01a fc9f 	bl	3401bfe4 <iprintf>

    int8_t inVec[insize];
340016a6:	687b      	ldr	r3, [r7, #4]
340016a8:	461a      	mov	r2, r3
340016aa:	3a01      	subs	r2, #1
340016ac:	61fa      	str	r2, [r7, #28]
340016ae:	2200      	movs	r2, #0
340016b0:	4698      	mov	r8, r3
340016b2:	4691      	mov	r9, r2
340016b4:	2200      	movs	r2, #0
340016b6:	461c      	mov	r4, r3
340016b8:	4615      	mov	r5, r2
340016ba:	3307      	adds	r3, #7
340016bc:	08db      	lsrs	r3, r3, #3
340016be:	00db      	lsls	r3, r3, #3
340016c0:	ebad 0d03 	sub.w	sp, sp, r3
340016c4:	466b      	mov	r3, sp
340016c6:	3300      	adds	r3, #0
340016c8:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < insize; i++) {
340016ca:	2300      	movs	r3, #0
340016cc:	627b      	str	r3, [r7, #36]	@ 0x24
340016ce:	e00e      	b.n	340016ee <NPU_MatMul_int8+0x5e>
    	inVec[i] = (int8_t)((i) % 256);  // Example input: cycles through -128 to 127
340016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340016d2:	425a      	negs	r2, r3
340016d4:	b2db      	uxtb	r3, r3
340016d6:	b2d2      	uxtb	r2, r2
340016d8:	ea53 b342 			@ <UNDEFINED> instruction: 0xea53b342
340016dc:	b259      	sxtb	r1, r3
340016de:	69ba      	ldr	r2, [r7, #24]
340016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340016e2:	4413      	add	r3, r2
340016e4:	460a      	mov	r2, r1
340016e6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < insize; i++) {
340016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340016ea:	3301      	adds	r3, #1
340016ec:	627b      	str	r3, [r7, #36]	@ 0x24
340016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340016f0:	687a      	ldr	r2, [r7, #4]
340016f2:	429a      	cmp	r2, r3
340016f4:	d8ec      	bhi.n	340016d0 <NPU_MatMul_int8+0x40>
    }
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
340016f6:	6839      	ldr	r1, [r7, #0]
340016f8:	6878      	ldr	r0, [r7, #4]
340016fa:	f7ff fb49 	bl	34000d90 <getIdentityWeights_int8>
340016fe:	6178      	str	r0, [r7, #20]
    int8_t* outvector;

	npu_matvec_int8_init(insize,outsize);
34001700:	6839      	ldr	r1, [r7, #0]
34001702:	6878      	ldr	r0, [r7, #4]
34001704:	f7ff fa9a 	bl	34000c3c <npu_matvec_int8_init>
	while(1){
		startTiming_Cyc();
34001708:	f7ff ff92 	bl	34001630 <startTiming_Cyc>
		outvector = npu_matvec_int8_run(inVec,insize,outsize,identityWeights);
3400170c:	697b      	ldr	r3, [r7, #20]
3400170e:	683a      	ldr	r2, [r7, #0]
34001710:	6879      	ldr	r1, [r7, #4]
34001712:	69b8      	ldr	r0, [r7, #24]
34001714:	f7ff fade 	bl	34000cd4 <npu_matvec_int8_run>
34001718:	6138      	str	r0, [r7, #16]
		uint32_t cycles =  getTiming_Cyc();
3400171a:	f7ff ff95 	bl	34001648 <getTiming_Cyc>
3400171e:	60f8      	str	r0, [r7, #12]
		printf("NPU int8 Cycles: %4d\n\r",cycles);
34001720:	68f9      	ldr	r1, [r7, #12]
34001722:	480e      	ldr	r0, [pc, #56]	@ (3400175c <NPU_MatMul_int8+0xcc>)
34001724:	f01a fc5e 	bl	3401bfe4 <iprintf>
		for(size_t i = 0;i < outsize;i++){
34001728:	2300      	movs	r3, #0
3400172a:	623b      	str	r3, [r7, #32]
3400172c:	e00e      	b.n	3400174c <NPU_MatMul_int8+0xbc>
			int8_t output = outvector[i];
3400172e:	693a      	ldr	r2, [r7, #16]
34001730:	6a3b      	ldr	r3, [r7, #32]
34001732:	4413      	add	r3, r2
34001734:	781b      	ldrb	r3, [r3, #0]
34001736:	72fb      	strb	r3, [r7, #11]
			printf("Output %2d: %4d\n\r",i,output);
34001738:	f997 300b 	ldrsb.w	r3, [r7, #11]
3400173c:	461a      	mov	r2, r3
3400173e:	6a39      	ldr	r1, [r7, #32]
34001740:	4807      	ldr	r0, [pc, #28]	@ (34001760 <NPU_MatMul_int8+0xd0>)
34001742:	f01a fc4f 	bl	3401bfe4 <iprintf>
		for(size_t i = 0;i < outsize;i++){
34001746:	6a3b      	ldr	r3, [r7, #32]
34001748:	3301      	adds	r3, #1
3400174a:	623b      	str	r3, [r7, #32]
3400174c:	6a3a      	ldr	r2, [r7, #32]
3400174e:	683b      	ldr	r3, [r7, #0]
34001750:	429a      	cmp	r2, r3
34001752:	d3ec      	bcc.n	3400172e <NPU_MatMul_int8+0x9e>
	while(1){
34001754:	e7d8      	b.n	34001708 <NPU_MatMul_int8+0x78>
34001756:	bf00      	nop
34001758:	3401e160 	.word	0x3401e160
3400175c:	3401e17c 	.word	0x3401e17c
34001760:	3401e194 	.word	0x3401e194

34001764 <Hardware_init>:
	}
}


static void Hardware_init(void)
{
34001764:	b580      	push	{r7, lr}
34001766:	b086      	sub	sp, #24
34001768:	af00      	add	r7, sp, #0
  /* Power on ICACHE */
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
3400176a:	4b31      	ldr	r3, [pc, #196]	@ (34001830 <Hardware_init+0xcc>)
3400176c:	681b      	ldr	r3, [r3, #0]
3400176e:	4a30      	ldr	r2, [pc, #192]	@ (34001830 <Hardware_init+0xcc>)
34001770:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34001774:	6013      	str	r3, [r2, #0]

  /* Set back system and CPU clock source to HSI */
  __HAL_RCC_CPUCLK_CONFIG(RCC_CPUCLKSOURCE_HSI);
34001776:	2000      	movs	r0, #0
34001778:	f7ff ff1a 	bl	340015b0 <LL_RCC_SetCpuClkSource>
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);
3400177c:	2000      	movs	r0, #0
3400177e:	f7ff ff2b 	bl	340015d8 <LL_RCC_SetSysClkSource>
  __HAL_RCC_USART1_CLK_ENABLE();
34001782:	2010      	movs	r0, #16
34001784:	f7ff fee8 	bl	34001558 <LL_APB2_GRP1_EnableClock>

  HAL_Init();
34001788:	f002 fa48 	bl	34003c1c <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
3400178c:	4b29      	ldr	r3, [pc, #164]	@ (34001834 <Hardware_init+0xd0>)
3400178e:	695b      	ldr	r3, [r3, #20]
34001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34001794:	2b00      	cmp	r3, #0
34001796:	d11b      	bne.n	340017d0 <Hardware_init+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
34001798:	f3bf 8f4f 	dsb	sy
}
3400179c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3400179e:	f3bf 8f6f 	isb	sy
}
340017a2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
340017a4:	4b23      	ldr	r3, [pc, #140]	@ (34001834 <Hardware_init+0xd0>)
340017a6:	2200      	movs	r2, #0
340017a8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
340017ac:	f3bf 8f4f 	dsb	sy
}
340017b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
340017b2:	f3bf 8f6f 	isb	sy
}
340017b6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
340017b8:	4b1e      	ldr	r3, [pc, #120]	@ (34001834 <Hardware_init+0xd0>)
340017ba:	695b      	ldr	r3, [r3, #20]
340017bc:	4a1d      	ldr	r2, [pc, #116]	@ (34001834 <Hardware_init+0xd0>)
340017be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
340017c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
340017c4:	f3bf 8f4f 	dsb	sy
}
340017c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
340017ca:	f3bf 8f6f 	isb	sy
}
340017ce:	e000      	b.n	340017d2 <Hardware_init+0x6e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
340017d0:	bf00      	nop
#if defined(USE_DCACHE)
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
  SCB_EnableDCache();
#endif

  SystemClock_Config();
340017d2:	f000 f945 	bl	34001a60 <SystemClock_Config>

  NPURam_enable();
340017d6:	f000 f845 	bl	34001864 <NPURam_enable>
  Fuse_Programming();
340017da:	f7ff fda5 	bl	34001328 <Fuse_Programming>
  NPUCache_config();
340017de:	f000 f8bc 	bl	3400195a <NPUCache_config>

  BSP_XSPI_NOR_Init_t NOR_Init;
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
340017e2:	2301      	movs	r3, #1
340017e4:	753b      	strb	r3, [r7, #20]
  NOR_Init.TransferRate = BSP_XSPI_NOR_DTR_TRANSFER;
340017e6:	2301      	movs	r3, #1
340017e8:	757b      	strb	r3, [r7, #21]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
340017ea:	f107 0314 	add.w	r3, r7, #20
340017ee:	4619      	mov	r1, r3
340017f0:	2000      	movs	r0, #0
340017f2:	f001 f9b7 	bl	34002b64 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
340017f6:	2000      	movs	r0, #0
340017f8:	f001 fa9a 	bl	34002d30 <BSP_XSPI_NOR_EnableMemoryMappedMode>

  Security_Config();
340017fc:	f000 f8b6 	bl	3400196c <Security_Config>
  IAC_Config();
34001800:	f000 f91a 	bl	34001a38 <IAC_Config>
  set_clk_sleep_mode();
34001804:	f000 f876 	bl	340018f4 <set_clk_sleep_mode>

  /*** Now initialize UART ***/
  COM_InitTypeDef com_config = {
34001808:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
3400180c:	607b      	str	r3, [r7, #4]
3400180e:	2300      	movs	r3, #0
34001810:	60bb      	str	r3, [r7, #8]
34001812:	2300      	movs	r3, #0
34001814:	81bb      	strh	r3, [r7, #12]
34001816:	2300      	movs	r3, #0
34001818:	81fb      	strh	r3, [r7, #14]
3400181a:	2300      	movs	r3, #0
3400181c:	823b      	strh	r3, [r7, #16]
    .WordLength = UART_WORDLENGTH_8B,
    .StopBits = UART_STOPBITS_1,
    .Parity = UART_PARITY_NONE,
    .HwFlowCtl = UART_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &com_config);
3400181e:	1d3b      	adds	r3, r7, #4
34001820:	4619      	mov	r1, r3
34001822:	2000      	movs	r0, #0
34001824:	f001 f860 	bl	340028e8 <BSP_COM_Init>
}
34001828:	bf00      	nop
3400182a:	3718      	adds	r7, #24
3400182c:	46bd      	mov	sp, r7
3400182e:	bd80      	pop	{r7, pc}
34001830:	e001e000 	.word	0xe001e000
34001834:	e000ed00 	.word	0xe000ed00

34001838 <_write>:

int _write(int file, char *ptr, int len)
{
34001838:	b580      	push	{r7, lr}
3400183a:	b084      	sub	sp, #16
3400183c:	af00      	add	r7, sp, #0
3400183e:	60f8      	str	r0, [r7, #12]
34001840:	60b9      	str	r1, [r7, #8]
34001842:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
34001844:	687b      	ldr	r3, [r7, #4]
34001846:	b29a      	uxth	r2, r3
34001848:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400184c:	68b9      	ldr	r1, [r7, #8]
3400184e:	4804      	ldr	r0, [pc, #16]	@ (34001860 <_write+0x28>)
34001850:	f014 f97c 	bl	34015b4c <HAL_UART_Transmit>
    return len;
34001854:	687b      	ldr	r3, [r7, #4]
}
34001856:	4618      	mov	r0, r3
34001858:	3710      	adds	r7, #16
3400185a:	46bd      	mov	sp, r7
3400185c:	bd80      	pop	{r7, pc}
3400185e:	bf00      	nop
34001860:	34020930 	.word	0x34020930

34001864 <NPURam_enable>:

static void NPURam_enable(void)
{
34001864:	b580      	push	{r7, lr}
34001866:	b084      	sub	sp, #16
34001868:	af00      	add	r7, sp, #0
  __HAL_RCC_NPU_CLK_ENABLE();
3400186a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3400186e:	f7ff fe23 	bl	340014b8 <LL_AHB5_GRP1_EnableClock>
  __HAL_RCC_NPU_FORCE_RESET();
34001872:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
34001876:	f7ff fe35 	bl	340014e4 <LL_AHB5_GRP1_ForceReset>
  __HAL_RCC_NPU_RELEASE_RESET();
3400187a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3400187e:	f7ff fe41 	bl	34001504 <LL_AHB5_GRP1_ReleaseReset>

  /* Enable NPU RAMs (4x448KB) */
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
34001882:	2001      	movs	r0, #1
34001884:	f7ff fd9c 	bl	340013c0 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
34001888:	2002      	movs	r0, #2
3400188a:	f7ff fd99 	bl	340013c0 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
3400188e:	2004      	movs	r0, #4
34001890:	f7ff fd96 	bl	340013c0 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
34001894:	2008      	movs	r0, #8
34001896:	f7ff fd93 	bl	340013c0 <LL_MEM_EnableClock>
  __HAL_RCC_RAMCFG_CLK_ENABLE();
3400189a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3400189e:	f7ff fdbb 	bl	34001418 <LL_AHB2_GRP1_EnableClock>
  RAMCFG_HandleTypeDef hramcfg = {0};
340018a2:	1d3b      	adds	r3, r7, #4
340018a4:	2200      	movs	r2, #0
340018a6:	601a      	str	r2, [r3, #0]
340018a8:	605a      	str	r2, [r3, #4]
340018aa:	609a      	str	r2, [r3, #8]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
340018ac:	4b0d      	ldr	r3, [pc, #52]	@ (340018e4 <NPURam_enable+0x80>)
340018ae:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340018b0:	1d3b      	adds	r3, r7, #4
340018b2:	4618      	mov	r0, r3
340018b4:	f004 fcb0 	bl	34006218 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
340018b8:	4b0b      	ldr	r3, [pc, #44]	@ (340018e8 <NPURam_enable+0x84>)
340018ba:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340018bc:	1d3b      	adds	r3, r7, #4
340018be:	4618      	mov	r0, r3
340018c0:	f004 fcaa 	bl	34006218 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
340018c4:	4b09      	ldr	r3, [pc, #36]	@ (340018ec <NPURam_enable+0x88>)
340018c6:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340018c8:	1d3b      	adds	r3, r7, #4
340018ca:	4618      	mov	r0, r3
340018cc:	f004 fca4 	bl	34006218 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
340018d0:	4b07      	ldr	r3, [pc, #28]	@ (340018f0 <NPURam_enable+0x8c>)
340018d2:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340018d4:	1d3b      	adds	r3, r7, #4
340018d6:	4618      	mov	r0, r3
340018d8:	f004 fc9e 	bl	34006218 <HAL_RAMCFG_EnableAXISRAM>
}
340018dc:	bf00      	nop
340018de:	3710      	adds	r7, #16
340018e0:	46bd      	mov	sp, r7
340018e2:	bd80      	pop	{r7, pc}
340018e4:	52023100 	.word	0x52023100
340018e8:	52023180 	.word	0x52023180
340018ec:	52023200 	.word	0x52023200
340018f0:	52023280 	.word	0x52023280

340018f4 <set_clk_sleep_mode>:

static void set_clk_sleep_mode(void)
{
340018f4:	b580      	push	{r7, lr}
340018f6:	af00      	add	r7, sp, #0
  /*** Enable sleep mode support during NPU inference *************************/
  /* Configure peripheral clocks to remain active during sleep mode */
  /* Keep all IP's enabled during WFE so they can wake up CPU. Fine tune
   * this if you want to save maximum power
   */
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
340018f8:	2020      	movs	r0, #32
340018fa:	f7ff fe17 	bl	3400152c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
340018fe:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34001902:	f7ff fe13 	bl	3400152c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
34001906:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3400190a:	f7ff fe0f 	bl	3400152c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
3400190e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001912:	f7ff fe0b 	bl	3400152c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
34001916:	2002      	movs	r0, #2
34001918:	f7ff fe08 	bl	3400152c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DCMIPP_CLK_SLEEP_ENABLE();   /* For camera configuration retention */
3400191c:	2004      	movs	r0, #4
3400191e:	f7ff fe31 	bl	34001584 <LL_APB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CSI_CLK_SLEEP_ENABLE();      /* For camera configuration retention */
34001922:	2040      	movs	r0, #64	@ 0x40
34001924:	f7ff fe2e 	bl	34001584 <LL_APB5_GRP1_EnableClockLowPower>

  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34001928:	f44f 7000 	mov.w	r0, #512	@ 0x200
3400192c:	f7ff fd5e 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
34001930:	2080      	movs	r0, #128	@ 0x80
34001932:	f7ff fd5b 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
34001936:	f44f 7080 	mov.w	r0, #256	@ 0x100
3400193a:	f7ff fd57 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
3400193e:	2001      	movs	r0, #1
34001940:	f7ff fd54 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
34001944:	2002      	movs	r0, #2
34001946:	f7ff fd51 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
3400194a:	2004      	movs	r0, #4
3400194c:	f7ff fd4e 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
34001950:	2008      	movs	r0, #8
34001952:	f7ff fd4b 	bl	340013ec <LL_MEM_EnableClockLowPower>
}
34001956:	bf00      	nop
34001958:	bd80      	pop	{r7, pc}

3400195a <NPUCache_config>:

static void NPUCache_config(void)
{
3400195a:	b580      	push	{r7, lr}
3400195c:	af00      	add	r7, sp, #0
  npu_cache_init();
3400195e:	f000 f9eb 	bl	34001d38 <npu_cache_init>
  npu_cache_enable();
34001962:	f000 f9f7 	bl	34001d54 <npu_cache_enable>
}
34001966:	bf00      	nop
34001968:	bd80      	pop	{r7, pc}
	...

3400196c <Security_Config>:

static void Security_Config(void)
{
3400196c:	b580      	push	{r7, lr}
3400196e:	b082      	sub	sp, #8
34001970:	af00      	add	r7, sp, #0
  __HAL_RCC_RIFSC_CLK_ENABLE();
34001972:	f44f 7000 	mov.w	r0, #512	@ 0x200
34001976:	f7ff fd65 	bl	34001444 <LL_AHB3_GRP1_EnableClock>
  RIMC_MasterConfig_t RIMC_master = {0};
3400197a:	463b      	mov	r3, r7
3400197c:	2200      	movs	r2, #0
3400197e:	601a      	str	r2, [r3, #0]
34001980:	605a      	str	r2, [r3, #4]
  RIMC_master.MasterCID = RIF_CID_1;
34001982:	2302      	movs	r3, #2
34001984:	603b      	str	r3, [r7, #0]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34001986:	2303      	movs	r3, #3
34001988:	607b      	str	r3, [r7, #4]
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3400198a:	463b      	mov	r3, r7
3400198c:	4619      	mov	r1, r3
3400198e:	2001      	movs	r0, #1
34001990:	f012 fe46 	bl	34014620 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
34001994:	463b      	mov	r3, r7
34001996:	4619      	mov	r1, r3
34001998:	2008      	movs	r0, #8
3400199a:	f012 fe41 	bl	34014620 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
3400199e:	463b      	mov	r3, r7
340019a0:	4619      	mov	r1, r3
340019a2:	2009      	movs	r0, #9
340019a4:	f012 fe3c 	bl	34014620 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
340019a8:	463b      	mov	r3, r7
340019aa:	4619      	mov	r1, r3
340019ac:	200a      	movs	r0, #10
340019ae:	f012 fe37 	bl	34014620 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
340019b2:	463b      	mov	r3, r7
340019b4:	4619      	mov	r1, r3
340019b6:	200b      	movs	r0, #11
340019b8:	f012 fe32 	bl	34014620 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
340019bc:	463b      	mov	r3, r7
340019be:	4619      	mov	r1, r3
340019c0:	2004      	movs	r0, #4
340019c2:	f012 fe2d 	bl	34014620 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019c6:	2103      	movs	r1, #3
340019c8:	4813      	ldr	r0, [pc, #76]	@ (34001a18 <Security_Config+0xac>)
340019ca:	f012 fed3 	bl	34014774 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019ce:	2103      	movs	r1, #3
340019d0:	4812      	ldr	r0, [pc, #72]	@ (34001a1c <Security_Config+0xb0>)
340019d2:	f012 fecf 	bl	34014774 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019d6:	2103      	movs	r1, #3
340019d8:	4811      	ldr	r0, [pc, #68]	@ (34001a20 <Security_Config+0xb4>)
340019da:	f012 fecb 	bl	34014774 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019de:	2103      	movs	r1, #3
340019e0:	4810      	ldr	r0, [pc, #64]	@ (34001a24 <Security_Config+0xb8>)
340019e2:	f012 fec7 	bl	34014774 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019e6:	2103      	movs	r1, #3
340019e8:	480f      	ldr	r0, [pc, #60]	@ (34001a28 <Security_Config+0xbc>)
340019ea:	f012 fec3 	bl	34014774 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019ee:	2103      	movs	r1, #3
340019f0:	480e      	ldr	r0, [pc, #56]	@ (34001a2c <Security_Config+0xc0>)
340019f2:	f012 febf 	bl	34014774 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019f6:	2103      	movs	r1, #3
340019f8:	480d      	ldr	r0, [pc, #52]	@ (34001a30 <Security_Config+0xc4>)
340019fa:	f012 febb 	bl	34014774 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019fe:	2103      	movs	r1, #3
34001a00:	480c      	ldr	r0, [pc, #48]	@ (34001a34 <Security_Config+0xc8>)
34001a02:	f012 feb7 	bl	34014774 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001a06:	2103      	movs	r1, #3
34001a08:	2004      	movs	r0, #4
34001a0a:	f012 feb3 	bl	34014774 <HAL_RIF_RISC_SetSlaveSecureAttributes>
}
34001a0e:	bf00      	nop
34001a10:	3708      	adds	r7, #8
34001a12:	46bd      	mov	sp, r7
34001a14:	bd80      	pop	{r7, pc}
34001a16:	bf00      	nop
34001a18:	3000000a 	.word	0x3000000a
34001a1c:	30000005 	.word	0x30000005
34001a20:	2000001c 	.word	0x2000001c
34001a24:	2000001d 	.word	0x2000001d
34001a28:	30000006 	.word	0x30000006
34001a2c:	30000007 	.word	0x30000007
34001a30:	30000008 	.word	0x30000008
34001a34:	10000018 	.word	0x10000018

34001a38 <IAC_Config>:

static void IAC_Config(void)
{
34001a38:	b580      	push	{r7, lr}
34001a3a:	af00      	add	r7, sp, #0
/* Configure IAC to trap illegal access events */
  __HAL_RCC_IAC_CLK_ENABLE();
34001a3c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001a40:	f7ff fd00 	bl	34001444 <LL_AHB3_GRP1_EnableClock>
  __HAL_RCC_IAC_FORCE_RESET();
34001a44:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001a48:	f7ff fd12 	bl	34001470 <LL_AHB3_GRP1_ForceReset>
  __HAL_RCC_IAC_RELEASE_RESET();
34001a4c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001a50:	f7ff fd1e 	bl	34001490 <LL_AHB3_GRP1_ReleaseReset>
}
34001a54:	bf00      	nop
34001a56:	bd80      	pop	{r7, pc}

34001a58 <IAC_IRQHandler>:

void IAC_IRQHandler(void)
{
34001a58:	b480      	push	{r7}
34001a5a:	af00      	add	r7, sp, #0
  while (1)
34001a5c:	bf00      	nop
34001a5e:	e7fd      	b.n	34001a5c <IAC_IRQHandler+0x4>

34001a60 <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
34001a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
34001a64:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
34001a68:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34001a6a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
34001a6e:	2240      	movs	r2, #64	@ 0x40
34001a70:	2100      	movs	r1, #0
34001a72:	4618      	mov	r0, r3
34001a74:	f01a fbfe 	bl	3401c274 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34001a78:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34001a7c:	2298      	movs	r2, #152	@ 0x98
34001a7e:	2100      	movs	r1, #0
34001a80:	4618      	mov	r0, r3
34001a82:	f01a fbf7 	bl	3401c274 <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34001a86:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001a8a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001a8e:	4618      	mov	r0, r3
34001a90:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34001a94:	461a      	mov	r2, r3
34001a96:	2100      	movs	r1, #0
34001a98:	f01a fbec 	bl	3401c274 <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
34001a9c:	2001      	movs	r0, #1
34001a9e:	f000 fef7 	bl	34002890 <BSP_SMPS_Init>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34001aa2:	2300      	movs	r3, #0
34001aa4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

  /* PLL1 = 64 x 25 / 2 = 800MHz */
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34001aa8:	2302      	movs	r3, #2
34001aaa:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34001aae:	2300      	movs	r3, #0
34001ab0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
  RCC_OscInitStruct.PLL1.PLLM = 2;
34001ab4:	2302      	movs	r3, #2
34001ab6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
  RCC_OscInitStruct.PLL1.PLLN = 25;
34001aba:	2319      	movs	r3, #25
34001abc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34001ac0:	2300      	movs	r3, #0
34001ac2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34001ac6:	2301      	movs	r3, #1
34001ac8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34001acc:	2301      	movs	r3, #1
34001ace:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
34001ad2:	2302      	movs	r3, #2
34001ad4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
34001ad8:	2300      	movs	r3, #0
34001ada:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
  RCC_OscInitStruct.PLL2.PLLM = 8;
34001ade:	2308      	movs	r3, #8
34001ae0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
34001ae4:	2300      	movs	r3, #0
34001ae6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
  RCC_OscInitStruct.PLL2.PLLN = 125;
34001aea:	237d      	movs	r3, #125	@ 0x7d
34001aec:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
34001af0:	2301      	movs	r3, #1
34001af2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
  RCC_OscInitStruct.PLL2.PLLP2 = 1;
34001af6:	2301      	movs	r3, #1
34001af8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
34001afc:	2302      	movs	r3, #2
34001afe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
34001b02:	2300      	movs	r3, #0
34001b04:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  RCC_OscInitStruct.PLL3.PLLM = 8;
34001b08:	2308      	movs	r3, #8
34001b0a:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  RCC_OscInitStruct.PLL3.PLLN = 225;
34001b0e:	23e1      	movs	r3, #225	@ 0xe1
34001b10:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34001b14:	2300      	movs	r3, #0
34001b16:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
34001b1a:	2301      	movs	r3, #1
34001b1c:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
34001b20:	2302      	movs	r3, #2
34001b22:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
34001b26:	2302      	movs	r3, #2
34001b28:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
34001b2c:	2300      	movs	r3, #0
34001b2e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
  RCC_OscInitStruct.PLL4.PLLM = 8;
34001b32:	2308      	movs	r3, #8
34001b34:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
34001b38:	2300      	movs	r3, #0
34001b3a:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  RCC_OscInitStruct.PLL4.PLLN = 225;
34001b3e:	23e1      	movs	r3, #225	@ 0xe1
34001b40:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
34001b44:	2306      	movs	r3, #6
34001b46:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
34001b4a:	2306      	movs	r3, #6
34001b4c:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34001b50:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34001b54:	4618      	mov	r0, r3
34001b56:	f004 fe37 	bl	340067c8 <HAL_RCC_OscConfig>
34001b5a:	4603      	mov	r3, r0
34001b5c:	2b00      	cmp	r3, #0
34001b5e:	d001      	beq.n	34001b64 <SystemClock_Config+0x104>
  {
    while(1);
34001b60:	bf00      	nop
34001b62:	e7fd      	b.n	34001b60 <SystemClock_Config+0x100>
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK |
34001b64:	237f      	movs	r3, #127	@ 0x7f
34001b66:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34001b6a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34001b6e:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34001b72:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34001b76:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34001b7a:	2300      	movs	r3, #0
34001b7c:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
34001b80:	2301      	movs	r3, #1
34001b82:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34001b86:	2300      	movs	r3, #0
34001b88:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
34001b8c:	2302      	movs	r3, #2
34001b8e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
34001b92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
34001b96:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
34001b9a:	2301      	movs	r3, #1
34001b9c:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
34001ba0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001ba4:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
34001ba8:	2301      	movs	r3, #1
34001baa:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34001bae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34001bb2:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34001bb6:	2300      	movs	r3, #0
34001bb8:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34001bbc:	2300      	movs	r3, #0
34001bbe:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34001bc2:	2300      	movs	r3, #0
34001bc4:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34001bc8:	2300      	movs	r3, #0
34001bca:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34001bce:	f507 730a 	add.w	r3, r7, #552	@ 0x228
34001bd2:	4618      	mov	r0, r3
34001bd4:	f005 fb18 	bl	34007208 <HAL_RCC_ClockConfig>
34001bd8:	4603      	mov	r3, r0
34001bda:	2b00      	cmp	r3, #0
34001bdc:	d001      	beq.n	34001be2 <SystemClock_Config+0x182>
  {
    while(1);
34001bde:	bf00      	nop
34001be0:	e7fd      	b.n	34001bde <SystemClock_Config+0x17e>
  }

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;
34001be2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001be6:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
34001bea:	f04f 0200 	mov.w	r2, #0
34001bee:	f04f 0300 	mov.w	r3, #0
34001bf2:	e9c1 2300 	strd	r2, r3, [r1]

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
34001bf6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001bfa:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
34001c02:	4690      	mov	r8, r2
34001c04:	f443 0980 	orr.w	r9, r3, #4194304	@ 0x400000
34001c08:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001c0c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001c10:	e9c3 8900 	strd	r8, r9, [r3]
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34001c14:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001c18:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001c1c:	4a13      	ldr	r2, [pc, #76]	@ (34001c6c <SystemClock_Config+0x20c>)
34001c1e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34001c22:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001c26:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
34001c2e:	4614      	mov	r4, r2
34001c30:	f443 0500 	orr.w	r5, r3, #8388608	@ 0x800000
34001c34:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001c38:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001c3c:	e9c3 4500 	strd	r4, r5, [r3]
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34001c40:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001c44:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001c48:	4a09      	ldr	r2, [pc, #36]	@ (34001c70 <SystemClock_Config+0x210>)
34001c4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34001c4e:	463b      	mov	r3, r7
34001c50:	4618      	mov	r0, r3
34001c52:	f007 fecf 	bl	340099f4 <HAL_RCCEx_PeriphCLKConfig>
34001c56:	4603      	mov	r3, r0
34001c58:	2b00      	cmp	r3, #0
34001c5a:	d001      	beq.n	34001c60 <SystemClock_Config+0x200>
  {
    while (1);
34001c5c:	bf00      	nop
34001c5e:	e7fd      	b.n	34001c5c <SystemClock_Config+0x1fc>
  }
}
34001c60:	bf00      	nop
34001c62:	f507 771a 	add.w	r7, r7, #616	@ 0x268
34001c66:	46bd      	mov	sp, r7
34001c68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
34001c6c:	03000014 	.word	0x03000014
34001c70:	03000414 	.word	0x03000414

34001c74 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34001c74:	b580      	push	{r7, lr}
34001c76:	b082      	sub	sp, #8
34001c78:	af00      	add	r7, sp, #0
34001c7a:	6078      	str	r0, [r7, #4]
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
34001c7c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001c80:	f7ff fb9e 	bl	340013c0 <LL_MEM_EnableClock>
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
34001c84:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001c88:	f7ff fc16 	bl	340014b8 <LL_AHB5_GRP1_EnableClock>
  __HAL_RCC_CACHEAXI_FORCE_RESET();
34001c8c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001c90:	f7ff fc28 	bl	340014e4 <LL_AHB5_GRP1_ForceReset>
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
34001c94:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001c98:	f7ff fc34 	bl	34001504 <LL_AHB5_GRP1_ReleaseReset>
}
34001c9c:	bf00      	nop
34001c9e:	3708      	adds	r7, #8
34001ca0:	46bd      	mov	sp, r7
34001ca2:	bd80      	pop	{r7, pc}

34001ca4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
34001ca4:	b480      	push	{r7}
34001ca6:	b083      	sub	sp, #12
34001ca8:	af00      	add	r7, sp, #0
34001caa:	6078      	str	r0, [r7, #4]
34001cac:	6039      	str	r1, [r7, #0]
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
34001cae:	be00      	bkpt	0x0000
  while (1)
34001cb0:	bf00      	nop
34001cb2:	e7fd      	b.n	34001cb0 <assert_failed+0xc>

34001cb4 <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
34001cb4:	b480      	push	{r7}
34001cb6:	b087      	sub	sp, #28
34001cb8:	af00      	add	r7, sp, #0
34001cba:	6078      	str	r0, [r7, #4]
34001cbc:	6039      	str	r1, [r7, #0]

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
34001cbe:	4b1d      	ldr	r3, [pc, #116]	@ (34001d34 <mcu_cache_invalidate_range+0x80>)
34001cc0:	695b      	ldr	r3, [r3, #20]
34001cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34001cc6:	2b00      	cmp	r3, #0
34001cc8:	d001      	beq.n	34001cce <mcu_cache_invalidate_range+0x1a>
34001cca:	2301      	movs	r3, #1
34001ccc:	e000      	b.n	34001cd0 <mcu_cache_invalidate_range+0x1c>
#endif // (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)

  return 0;
34001cce:	2300      	movs	r3, #0
  if(mcu_cache_enabled()) {
34001cd0:	2b00      	cmp	r3, #0
34001cd2:	d027      	beq.n	34001d24 <mcu_cache_invalidate_range+0x70>
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
34001cd4:	687b      	ldr	r3, [r7, #4]
34001cd6:	6839      	ldr	r1, [r7, #0]
34001cd8:	687a      	ldr	r2, [r7, #4]
34001cda:	1a8a      	subs	r2, r1, r2
34001cdc:	617b      	str	r3, [r7, #20]
34001cde:	613a      	str	r2, [r7, #16]
    if ( dsize > 0 ) {
34001ce0:	693b      	ldr	r3, [r7, #16]
34001ce2:	2b00      	cmp	r3, #0
34001ce4:	dd1d      	ble.n	34001d22 <mcu_cache_invalidate_range+0x6e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34001ce6:	697b      	ldr	r3, [r7, #20]
34001ce8:	f003 021f 	and.w	r2, r3, #31
34001cec:	693b      	ldr	r3, [r7, #16]
34001cee:	4413      	add	r3, r2
34001cf0:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34001cf2:	697b      	ldr	r3, [r7, #20]
34001cf4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
34001cf6:	f3bf 8f4f 	dsb	sy
}
34001cfa:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34001cfc:	4a0d      	ldr	r2, [pc, #52]	@ (34001d34 <mcu_cache_invalidate_range+0x80>)
34001cfe:	68bb      	ldr	r3, [r7, #8]
34001d00:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
34001d04:	68bb      	ldr	r3, [r7, #8]
34001d06:	3320      	adds	r3, #32
34001d08:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
34001d0a:	68fb      	ldr	r3, [r7, #12]
34001d0c:	3b20      	subs	r3, #32
34001d0e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
34001d10:	68fb      	ldr	r3, [r7, #12]
34001d12:	2b00      	cmp	r3, #0
34001d14:	dcf2      	bgt.n	34001cfc <mcu_cache_invalidate_range+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
34001d16:	f3bf 8f4f 	dsb	sy
}
34001d1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34001d1c:	f3bf 8f6f 	isb	sy
}
34001d20:	bf00      	nop
}
34001d22:	bf00      	nop
  }
  return 0;
34001d24:	2300      	movs	r3, #0
}
34001d26:	4618      	mov	r0, r3
34001d28:	371c      	adds	r7, #28
34001d2a:	46bd      	mov	sp, r7
34001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001d30:	4770      	bx	lr
34001d32:	bf00      	nop
34001d34:	e000ed00 	.word	0xe000ed00

34001d38 <npu_cache_init>:
#include "stm32n6xx_hal_cacheaxi.h"

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
34001d38:	b580      	push	{r7, lr}
34001d3a:	af00      	add	r7, sp, #0
  hcacheaxi_s.Instance = CACHEAXI;
34001d3c:	4b03      	ldr	r3, [pc, #12]	@ (34001d4c <npu_cache_init+0x14>)
34001d3e:	4a04      	ldr	r2, [pc, #16]	@ (34001d50 <npu_cache_init+0x18>)
34001d40:	601a      	str	r2, [r3, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
34001d42:	4802      	ldr	r0, [pc, #8]	@ (34001d4c <npu_cache_init+0x14>)
34001d44:	f002 f952 	bl	34003fec <HAL_CACHEAXI_Init>
}
34001d48:	bf00      	nop
34001d4a:	bd80      	pop	{r7, pc}
34001d4c:	34020924 	.word	0x34020924
34001d50:	580dfc00 	.word	0x580dfc00

34001d54 <npu_cache_enable>:

void npu_cache_enable(void)
{
34001d54:	b580      	push	{r7, lr}
34001d56:	b082      	sub	sp, #8
34001d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
34001d5a:	4806      	ldr	r0, [pc, #24]	@ (34001d74 <npu_cache_enable+0x20>)
34001d5c:	f002 f97c 	bl	34004058 <HAL_CACHEAXI_Enable>
34001d60:	4603      	mov	r3, r0
34001d62:	71fb      	strb	r3, [r7, #7]
  } while (status == HAL_BUSY);
34001d64:	79fb      	ldrb	r3, [r7, #7]
34001d66:	2b02      	cmp	r3, #2
34001d68:	d0f7      	beq.n	34001d5a <npu_cache_enable+0x6>
}
34001d6a:	bf00      	nop
34001d6c:	bf00      	nop
34001d6e:	3708      	adds	r7, #8
34001d70:	46bd      	mov	sp, r7
34001d72:	bd80      	pop	{r7, pc}
34001d74:	34020924 	.word	0x34020924

34001d78 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
34001d78:	b480      	push	{r7}
34001d7a:	af00      	add	r7, sp, #0
}
34001d7c:	bf00      	nop
34001d7e:	46bd      	mov	sp, r7
34001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
34001d84:	4770      	bx	lr

34001d86 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
34001d86:	b480      	push	{r7}
34001d88:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
34001d8a:	bf00      	nop
34001d8c:	e7fd      	b.n	34001d8a <HardFault_Handler+0x4>

34001d8e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
34001d8e:	b480      	push	{r7}
34001d90:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
34001d92:	bf00      	nop
34001d94:	e7fd      	b.n	34001d92 <MemManage_Handler+0x4>

34001d96 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
34001d96:	b480      	push	{r7}
34001d98:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
34001d9a:	bf00      	nop
34001d9c:	e7fd      	b.n	34001d9a <BusFault_Handler+0x4>

34001d9e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
34001d9e:	b480      	push	{r7}
34001da0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
34001da2:	bf00      	nop
34001da4:	e7fd      	b.n	34001da2 <UsageFault_Handler+0x4>

34001da6 <SecureFault_Handler>:
  * @brief  This function handles Secure Fault exception.
  * @param  None
  * @retval None
  */
void SecureFault_Handler(void)
{
34001da6:	b480      	push	{r7}
34001da8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
34001daa:	bf00      	nop
34001dac:	e7fd      	b.n	34001daa <SecureFault_Handler+0x4>

34001dae <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
34001dae:	b480      	push	{r7}
34001db0:	af00      	add	r7, sp, #0
}
34001db2:	bf00      	nop
34001db4:	46bd      	mov	sp, r7
34001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
34001dba:	4770      	bx	lr

34001dbc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
34001dbc:	b480      	push	{r7}
34001dbe:	af00      	add	r7, sp, #0
  while (1)
34001dc0:	bf00      	nop
34001dc2:	e7fd      	b.n	34001dc0 <DebugMon_Handler+0x4>

34001dc4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
34001dc4:	b480      	push	{r7}
34001dc6:	af00      	add	r7, sp, #0
  while (1)
34001dc8:	bf00      	nop
34001dca:	e7fd      	b.n	34001dc8 <PendSV_Handler+0x4>

34001dcc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
34001dcc:	b580      	push	{r7, lr}
34001dce:	af00      	add	r7, sp, #0
  HAL_IncTick();
34001dd0:	f001 ff76 	bl	34003cc0 <HAL_IncTick>
}
34001dd4:	bf00      	nop
34001dd6:	bd80      	pop	{r7, pc}

34001dd8 <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
34001dd8:	b580      	push	{r7, lr}
34001dda:	b082      	sub	sp, #8
34001ddc:	af00      	add	r7, sp, #0
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001dde:	f015 ff15 	bl	34017c0c <CMW_CAMERA_GetDCMIPPHandle>
34001de2:	6078      	str	r0, [r7, #4]
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
34001de4:	6878      	ldr	r0, [r7, #4]
34001de6:	f002 fce5 	bl	340047b4 <HAL_DCMIPP_CSI_IRQHandler>
}
34001dea:	bf00      	nop
34001dec:	3708      	adds	r7, #8
34001dee:	46bd      	mov	sp, r7
34001df0:	bd80      	pop	{r7, pc}

34001df2 <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
34001df2:	b580      	push	{r7, lr}
34001df4:	b082      	sub	sp, #8
34001df6:	af00      	add	r7, sp, #0
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001df8:	f015 ff08 	bl	34017c0c <CMW_CAMERA_GetDCMIPPHandle>
34001dfc:	6078      	str	r0, [r7, #4]
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
34001dfe:	6878      	ldr	r0, [r7, #4]
34001e00:	f002 faf4 	bl	340043ec <HAL_DCMIPP_IRQHandler>
34001e04:	bf00      	nop
34001e06:	3708      	adds	r7, #8
34001e08:	46bd      	mov	sp, r7
34001e0a:	bd80      	pop	{r7, pc}

34001e0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
34001e0c:	b480      	push	{r7}
34001e0e:	af00      	add	r7, sp, #0
  return 1;
34001e10:	2301      	movs	r3, #1
}
34001e12:	4618      	mov	r0, r3
34001e14:	46bd      	mov	sp, r7
34001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
34001e1a:	4770      	bx	lr

34001e1c <_kill>:

int _kill(int pid, int sig)
{
34001e1c:	b580      	push	{r7, lr}
34001e1e:	b082      	sub	sp, #8
34001e20:	af00      	add	r7, sp, #0
34001e22:	6078      	str	r0, [r7, #4]
34001e24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
34001e26:	f01a fc79 	bl	3401c71c <__errno>
34001e2a:	4603      	mov	r3, r0
34001e2c:	2216      	movs	r2, #22
34001e2e:	601a      	str	r2, [r3, #0]
  return -1;
34001e30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
34001e34:	4618      	mov	r0, r3
34001e36:	3708      	adds	r7, #8
34001e38:	46bd      	mov	sp, r7
34001e3a:	bd80      	pop	{r7, pc}

34001e3c <_exit>:

void _exit (int status)
{
34001e3c:	b580      	push	{r7, lr}
34001e3e:	b082      	sub	sp, #8
34001e40:	af00      	add	r7, sp, #0
34001e42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
34001e44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
34001e48:	6878      	ldr	r0, [r7, #4]
34001e4a:	f7ff ffe7 	bl	34001e1c <_kill>
  while (1) {}    /* Make sure we hang here */
34001e4e:	bf00      	nop
34001e50:	e7fd      	b.n	34001e4e <_exit+0x12>

34001e52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
34001e52:	b580      	push	{r7, lr}
34001e54:	b086      	sub	sp, #24
34001e56:	af00      	add	r7, sp, #0
34001e58:	60f8      	str	r0, [r7, #12]
34001e5a:	60b9      	str	r1, [r7, #8]
34001e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001e5e:	2300      	movs	r3, #0
34001e60:	617b      	str	r3, [r7, #20]
34001e62:	e00a      	b.n	34001e7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
34001e64:	f3af 8000 	nop.w
34001e68:	4601      	mov	r1, r0
34001e6a:	68bb      	ldr	r3, [r7, #8]
34001e6c:	1c5a      	adds	r2, r3, #1
34001e6e:	60ba      	str	r2, [r7, #8]
34001e70:	b2ca      	uxtb	r2, r1
34001e72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001e74:	697b      	ldr	r3, [r7, #20]
34001e76:	3301      	adds	r3, #1
34001e78:	617b      	str	r3, [r7, #20]
34001e7a:	697a      	ldr	r2, [r7, #20]
34001e7c:	687b      	ldr	r3, [r7, #4]
34001e7e:	429a      	cmp	r2, r3
34001e80:	dbf0      	blt.n	34001e64 <_read+0x12>
  }

  return len;
34001e82:	687b      	ldr	r3, [r7, #4]
}
34001e84:	4618      	mov	r0, r3
34001e86:	3718      	adds	r7, #24
34001e88:	46bd      	mov	sp, r7
34001e8a:	bd80      	pop	{r7, pc}

34001e8c <_close>:
  }
  return len;
}

int _close(int file)
{
34001e8c:	b480      	push	{r7}
34001e8e:	b083      	sub	sp, #12
34001e90:	af00      	add	r7, sp, #0
34001e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
34001e94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
34001e98:	4618      	mov	r0, r3
34001e9a:	370c      	adds	r7, #12
34001e9c:	46bd      	mov	sp, r7
34001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
34001ea2:	4770      	bx	lr

34001ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
34001ea4:	b480      	push	{r7}
34001ea6:	b083      	sub	sp, #12
34001ea8:	af00      	add	r7, sp, #0
34001eaa:	6078      	str	r0, [r7, #4]
34001eac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
34001eae:	683b      	ldr	r3, [r7, #0]
34001eb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34001eb4:	605a      	str	r2, [r3, #4]
  return 0;
34001eb6:	2300      	movs	r3, #0
}
34001eb8:	4618      	mov	r0, r3
34001eba:	370c      	adds	r7, #12
34001ebc:	46bd      	mov	sp, r7
34001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
34001ec2:	4770      	bx	lr

34001ec4 <_isatty>:

int _isatty(int file)
{
34001ec4:	b480      	push	{r7}
34001ec6:	b083      	sub	sp, #12
34001ec8:	af00      	add	r7, sp, #0
34001eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
34001ecc:	2301      	movs	r3, #1
}
34001ece:	4618      	mov	r0, r3
34001ed0:	370c      	adds	r7, #12
34001ed2:	46bd      	mov	sp, r7
34001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
34001ed8:	4770      	bx	lr

34001eda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
34001eda:	b480      	push	{r7}
34001edc:	b085      	sub	sp, #20
34001ede:	af00      	add	r7, sp, #0
34001ee0:	60f8      	str	r0, [r7, #12]
34001ee2:	60b9      	str	r1, [r7, #8]
34001ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
34001ee6:	2300      	movs	r3, #0
}
34001ee8:	4618      	mov	r0, r3
34001eea:	3714      	adds	r7, #20
34001eec:	46bd      	mov	sp, r7
34001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
34001ef2:	4770      	bx	lr

34001ef4 <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
34001ef4:	b480      	push	{r7}
34001ef6:	b083      	sub	sp, #12
34001ef8:	af00      	add	r7, sp, #0
34001efa:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
34001efc:	687b      	ldr	r3, [r7, #4]
34001efe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34001f02:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
34001f04:	687b      	ldr	r3, [r7, #4]
34001f06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34001f0a:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
34001f0c:	687b      	ldr	r3, [r7, #4]
34001f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34001f12:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
34001f14:	687b      	ldr	r3, [r7, #4]
34001f16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34001f1a:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001f1c:	687b      	ldr	r3, [r7, #4]
34001f1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34001f22:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
34001f24:	687b      	ldr	r3, [r7, #4]
34001f26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34001f2a:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001f2c:	687b      	ldr	r3, [r7, #4]
34001f2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34001f32:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
34001f34:	687b      	ldr	r3, [r7, #4]
34001f36:	f44f 7280 	mov.w	r2, #256	@ 0x100
34001f3a:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
34001f3c:	687b      	ldr	r3, [r7, #4]
34001f3e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34001f42:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
34001f44:	2300      	movs	r3, #0
};
34001f46:	4618      	mov	r0, r3
34001f48:	370c      	adds	r7, #12
34001f4a:	46bd      	mov	sp, r7
34001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001f50:	4770      	bx	lr

34001f52 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
34001f52:	b580      	push	{r7, lr}
34001f54:	b09a      	sub	sp, #104	@ 0x68
34001f56:	af00      	add	r7, sp, #0
34001f58:	6078      	str	r0, [r7, #4]
34001f5a:	460b      	mov	r3, r1
34001f5c:	70fb      	strb	r3, [r7, #3]
34001f5e:	4613      	mov	r3, r2
34001f60:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
34001f62:	f107 031c 	add.w	r3, r7, #28
34001f66:	224c      	movs	r2, #76	@ 0x4c
34001f68:	2100      	movs	r1, #0
34001f6a:	4618      	mov	r0, r3
34001f6c:	f01a f982 	bl	3401c274 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001f70:	f107 0308 	add.w	r3, r7, #8
34001f74:	2200      	movs	r2, #0
34001f76:	601a      	str	r2, [r3, #0]
34001f78:	605a      	str	r2, [r3, #4]
34001f7a:	609a      	str	r2, [r3, #8]
34001f7c:	60da      	str	r2, [r3, #12]
34001f7e:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001f80:	78fb      	ldrb	r3, [r7, #3]
34001f82:	2b00      	cmp	r3, #0
34001f84:	d105      	bne.n	34001f92 <MX25UM51245G_AutoPollingMemReady+0x40>
34001f86:	78bb      	ldrb	r3, [r7, #2]
34001f88:	2b01      	cmp	r3, #1
34001f8a:	d102      	bne.n	34001f92 <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
34001f8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001f90:	e08b      	b.n	340020aa <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001f92:	2300      	movs	r3, #0
34001f94:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001f96:	2300      	movs	r3, #0
34001f98:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001f9a:	78fb      	ldrb	r3, [r7, #3]
34001f9c:	2b00      	cmp	r3, #0
34001f9e:	d101      	bne.n	34001fa4 <MX25UM51245G_AutoPollingMemReady+0x52>
34001fa0:	2301      	movs	r3, #1
34001fa2:	e000      	b.n	34001fa6 <MX25UM51245G_AutoPollingMemReady+0x54>
34001fa4:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001fa8:	78bb      	ldrb	r3, [r7, #2]
34001faa:	2b01      	cmp	r3, #1
34001fac:	d101      	bne.n	34001fb2 <MX25UM51245G_AutoPollingMemReady+0x60>
34001fae:	2308      	movs	r3, #8
34001fb0:	e000      	b.n	34001fb4 <MX25UM51245G_AutoPollingMemReady+0x62>
34001fb2:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001fb6:	78fb      	ldrb	r3, [r7, #3]
34001fb8:	2b00      	cmp	r3, #0
34001fba:	d101      	bne.n	34001fc0 <MX25UM51245G_AutoPollingMemReady+0x6e>
34001fbc:	2300      	movs	r3, #0
34001fbe:	e000      	b.n	34001fc2 <MX25UM51245G_AutoPollingMemReady+0x70>
34001fc0:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34001fc4:	78fb      	ldrb	r3, [r7, #3]
34001fc6:	2b00      	cmp	r3, #0
34001fc8:	d101      	bne.n	34001fce <MX25UM51245G_AutoPollingMemReady+0x7c>
34001fca:	2305      	movs	r3, #5
34001fcc:	e001      	b.n	34001fd2 <MX25UM51245G_AutoPollingMemReady+0x80>
34001fce:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001fd4:	78fb      	ldrb	r3, [r7, #3]
34001fd6:	2b00      	cmp	r3, #0
34001fd8:	d101      	bne.n	34001fde <MX25UM51245G_AutoPollingMemReady+0x8c>
34001fda:	2300      	movs	r3, #0
34001fdc:	e001      	b.n	34001fe2 <MX25UM51245G_AutoPollingMemReady+0x90>
34001fde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001fe4:	78bb      	ldrb	r3, [r7, #2]
34001fe6:	2b01      	cmp	r3, #1
34001fe8:	d102      	bne.n	34001ff0 <MX25UM51245G_AutoPollingMemReady+0x9e>
34001fea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001fee:	e000      	b.n	34001ff2 <MX25UM51245G_AutoPollingMemReady+0xa0>
34001ff0:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001ff4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.Address            = 0U;
34001ffa:	2300      	movs	r3, #0
34001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001ffe:	2300      	movs	r3, #0
34002000:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34002002:	78fb      	ldrb	r3, [r7, #3]
34002004:	2b00      	cmp	r3, #0
34002006:	d102      	bne.n	3400200e <MX25UM51245G_AutoPollingMemReady+0xbc>
34002008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3400200c:	e001      	b.n	34002012 <MX25UM51245G_AutoPollingMemReady+0xc0>
3400200e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34002012:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34002014:	78bb      	ldrb	r3, [r7, #2]
34002016:	2b01      	cmp	r3, #1
34002018:	d102      	bne.n	34002020 <MX25UM51245G_AutoPollingMemReady+0xce>
3400201a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3400201e:	e000      	b.n	34002022 <MX25UM51245G_AutoPollingMemReady+0xd0>
34002020:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34002022:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34002024:	78fb      	ldrb	r3, [r7, #3]
34002026:	2b00      	cmp	r3, #0
34002028:	d006      	beq.n	34002038 <MX25UM51245G_AutoPollingMemReady+0xe6>
3400202a:	78bb      	ldrb	r3, [r7, #2]
3400202c:	2b01      	cmp	r3, #1
3400202e:	d101      	bne.n	34002034 <MX25UM51245G_AutoPollingMemReady+0xe2>
34002030:	2305      	movs	r3, #5
34002032:	e002      	b.n	3400203a <MX25UM51245G_AutoPollingMemReady+0xe8>
34002034:	2304      	movs	r3, #4
34002036:	e000      	b.n	3400203a <MX25UM51245G_AutoPollingMemReady+0xe8>
34002038:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
3400203a:	663b      	str	r3, [r7, #96]	@ 0x60
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400203c:	78bb      	ldrb	r3, [r7, #2]
3400203e:	2b01      	cmp	r3, #1
34002040:	d101      	bne.n	34002046 <MX25UM51245G_AutoPollingMemReady+0xf4>
34002042:	2302      	movs	r3, #2
34002044:	e000      	b.n	34002048 <MX25UM51245G_AutoPollingMemReady+0xf6>
34002046:	2301      	movs	r3, #1
34002048:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400204a:	78bb      	ldrb	r3, [r7, #2]
3400204c:	2b01      	cmp	r3, #1
3400204e:	d102      	bne.n	34002056 <MX25UM51245G_AutoPollingMemReady+0x104>
34002050:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34002054:	e000      	b.n	34002058 <MX25UM51245G_AutoPollingMemReady+0x106>
34002056:	2300      	movs	r3, #0
34002058:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  s_config.MatchValue    = 0U;
3400205a:	2300      	movs	r3, #0
3400205c:	60bb      	str	r3, [r7, #8]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
3400205e:	2301      	movs	r3, #1
34002060:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
34002062:	2300      	movs	r3, #0
34002064:	613b      	str	r3, [r7, #16]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
34002066:	2310      	movs	r3, #16
34002068:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400206a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3400206e:	617b      	str	r3, [r7, #20]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002070:	f107 031c 	add.w	r3, r7, #28
34002074:	f241 3288 	movw	r2, #5000	@ 0x1388
34002078:	4619      	mov	r1, r3
3400207a:	6878      	ldr	r0, [r7, #4]
3400207c:	f014 ff00 	bl	34016e80 <HAL_XSPI_Command>
34002080:	4603      	mov	r3, r0
34002082:	2b00      	cmp	r3, #0
34002084:	d002      	beq.n	3400208c <MX25UM51245G_AutoPollingMemReady+0x13a>
  {
    return MX25UM51245G_ERROR;
34002086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400208a:	e00e      	b.n	340020aa <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400208c:	f107 0308 	add.w	r3, r7, #8
34002090:	f241 3288 	movw	r2, #5000	@ 0x1388
34002094:	4619      	mov	r1, r3
34002096:	6878      	ldr	r0, [r7, #4]
34002098:	f015 fa1a 	bl	340174d0 <HAL_XSPI_AutoPolling>
3400209c:	4603      	mov	r3, r0
3400209e:	2b00      	cmp	r3, #0
340020a0:	d002      	beq.n	340020a8 <MX25UM51245G_AutoPollingMemReady+0x156>
  {
    return MX25UM51245G_ERROR;
340020a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340020a6:	e000      	b.n	340020aa <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  return MX25UM51245G_OK;
340020a8:	2300      	movs	r3, #0
}
340020aa:	4618      	mov	r0, r3
340020ac:	3768      	adds	r7, #104	@ 0x68
340020ae:	46bd      	mov	sp, r7
340020b0:	bd80      	pop	{r7, pc}

340020b2 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
340020b2:	b580      	push	{r7, lr}
340020b4:	b09a      	sub	sp, #104	@ 0x68
340020b6:	af00      	add	r7, sp, #0
340020b8:	6078      	str	r0, [r7, #4]
340020ba:	460b      	mov	r3, r1
340020bc:	70fb      	strb	r3, [r7, #3]
340020be:	4613      	mov	r3, r2
340020c0:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
340020c2:	f107 031c 	add.w	r3, r7, #28
340020c6:	224c      	movs	r2, #76	@ 0x4c
340020c8:	2100      	movs	r1, #0
340020ca:	4618      	mov	r0, r3
340020cc:	f01a f8d2 	bl	3401c274 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
340020d0:	f107 030c 	add.w	r3, r7, #12
340020d4:	2200      	movs	r2, #0
340020d6:	601a      	str	r2, [r3, #0]
340020d8:	605a      	str	r2, [r3, #4]
340020da:	609a      	str	r2, [r3, #8]
340020dc:	60da      	str	r2, [r3, #12]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
340020de:	78fb      	ldrb	r3, [r7, #3]
340020e0:	2b01      	cmp	r3, #1
340020e2:	d105      	bne.n	340020f0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
340020e4:	78bb      	ldrb	r3, [r7, #2]
340020e6:	2b00      	cmp	r3, #0
340020e8:	d102      	bne.n	340020f0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
  {
    return MX25UM51245G_ERROR;
340020ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340020ee:	e086      	b.n	340021fe <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340020f0:	2301      	movs	r3, #1
340020f2:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340020f4:	2300      	movs	r3, #0
340020f6:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340020f8:	78fb      	ldrb	r3, [r7, #3]
340020fa:	2b00      	cmp	r3, #0
340020fc:	d101      	bne.n	34002102 <MX25UM51245G_EnableSTRMemoryMappedMode+0x50>
340020fe:	2301      	movs	r3, #1
34002100:	e000      	b.n	34002104 <MX25UM51245G_EnableSTRMemoryMappedMode+0x52>
34002102:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34002104:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34002106:	2300      	movs	r3, #0
34002108:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400210a:	78fb      	ldrb	r3, [r7, #3]
3400210c:	2b00      	cmp	r3, #0
3400210e:	d101      	bne.n	34002114 <MX25UM51245G_EnableSTRMemoryMappedMode+0x62>
34002110:	2300      	movs	r3, #0
34002112:	e000      	b.n	34002116 <MX25UM51245G_EnableSTRMemoryMappedMode+0x64>
34002114:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
34002118:	78fb      	ldrb	r3, [r7, #3]
3400211a:	2b00      	cmp	r3, #0
3400211c:	d106      	bne.n	3400212c <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
3400211e:	78bb      	ldrb	r3, [r7, #2]
34002120:	2b00      	cmp	r3, #0
34002122:	d101      	bne.n	34002128 <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
34002124:	230b      	movs	r3, #11
34002126:	e003      	b.n	34002130 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7e>
34002128:	230c      	movs	r3, #12
3400212a:	e001      	b.n	34002130 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7e>
3400212c:	f64e 4313 	movw	r3, #60435	@ 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34002130:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34002132:	78fb      	ldrb	r3, [r7, #3]
34002134:	2b00      	cmp	r3, #0
34002136:	d102      	bne.n	3400213e <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
34002138:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400213c:	e001      	b.n	34002142 <MX25UM51245G_EnableSTRMemoryMappedMode+0x90>
3400213e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34002142:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
34002144:	2300      	movs	r3, #0
34002146:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
34002148:	78bb      	ldrb	r3, [r7, #2]
3400214a:	2b00      	cmp	r3, #0
3400214c:	d102      	bne.n	34002154 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
3400214e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34002152:	e001      	b.n	34002158 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa6>
34002154:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
34002158:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3400215a:	2300      	movs	r3, #0
3400215c:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400215e:	78fb      	ldrb	r3, [r7, #3]
34002160:	2b00      	cmp	r3, #0
34002162:	d102      	bne.n	3400216a <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
34002164:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34002168:	e001      	b.n	3400216e <MX25UM51245G_EnableSTRMemoryMappedMode+0xbc>
3400216a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3400216e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
34002170:	2300      	movs	r3, #0
34002172:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
34002174:	78fb      	ldrb	r3, [r7, #3]
34002176:	2b00      	cmp	r3, #0
34002178:	d101      	bne.n	3400217e <MX25UM51245G_EnableSTRMemoryMappedMode+0xcc>
3400217a:	2308      	movs	r3, #8
3400217c:	e000      	b.n	34002180 <MX25UM51245G_EnableSTRMemoryMappedMode+0xce>
3400217e:	2306      	movs	r3, #6
34002180:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34002182:	2300      	movs	r3, #0
34002184:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002186:	f107 031c 	add.w	r3, r7, #28
3400218a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400218e:	4619      	mov	r1, r3
34002190:	6878      	ldr	r0, [r7, #4]
34002192:	f014 fe75 	bl	34016e80 <HAL_XSPI_Command>
34002196:	4603      	mov	r3, r0
34002198:	2b00      	cmp	r3, #0
3400219a:	d002      	beq.n	340021a2 <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
3400219c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340021a0:	e02d      	b.n	340021fe <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
340021a2:	2302      	movs	r3, #2
340021a4:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
340021a6:	78fb      	ldrb	r3, [r7, #3]
340021a8:	2b00      	cmp	r3, #0
340021aa:	d106      	bne.n	340021ba <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
340021ac:	78bb      	ldrb	r3, [r7, #2]
340021ae:	2b00      	cmp	r3, #0
340021b0:	d101      	bne.n	340021b6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
340021b2:	2302      	movs	r3, #2
340021b4:	e003      	b.n	340021be <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
340021b6:	2312      	movs	r3, #18
340021b8:	e001      	b.n	340021be <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
340021ba:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340021be:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DummyCycles        = 0U;
340021c0:	2300      	movs	r3, #0
340021c2:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340021c4:	f107 031c 	add.w	r3, r7, #28
340021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
340021cc:	4619      	mov	r1, r3
340021ce:	6878      	ldr	r0, [r7, #4]
340021d0:	f014 fe56 	bl	34016e80 <HAL_XSPI_Command>
340021d4:	4603      	mov	r3, r0
340021d6:	2b00      	cmp	r3, #0
340021d8:	d002      	beq.n	340021e0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
340021da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340021de:	e00e      	b.n	340021fe <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
340021e0:	2300      	movs	r3, #0
340021e2:	60fb      	str	r3, [r7, #12]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
340021e4:	f107 030c 	add.w	r3, r7, #12
340021e8:	4619      	mov	r1, r3
340021ea:	6878      	ldr	r0, [r7, #4]
340021ec:	f015 fa3a 	bl	34017664 <HAL_XSPI_MemoryMapped>
340021f0:	4603      	mov	r3, r0
340021f2:	2b00      	cmp	r3, #0
340021f4:	d002      	beq.n	340021fc <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
340021f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340021fa:	e000      	b.n	340021fe <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
340021fc:	2300      	movs	r3, #0
}
340021fe:	4618      	mov	r0, r3
34002200:	3768      	adds	r7, #104	@ 0x68
34002202:	46bd      	mov	sp, r7
34002204:	bd80      	pop	{r7, pc}

34002206 <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
34002206:	b580      	push	{r7, lr}
34002208:	b09a      	sub	sp, #104	@ 0x68
3400220a:	af00      	add	r7, sp, #0
3400220c:	6078      	str	r0, [r7, #4]
3400220e:	460b      	mov	r3, r1
34002210:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
34002212:	f107 031c 	add.w	r3, r7, #28
34002216:	224c      	movs	r2, #76	@ 0x4c
34002218:	2100      	movs	r1, #0
3400221a:	4618      	mov	r0, r3
3400221c:	f01a f82a 	bl	3401c274 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34002220:	f107 030c 	add.w	r3, r7, #12
34002224:	2200      	movs	r2, #0
34002226:	601a      	str	r2, [r3, #0]
34002228:	605a      	str	r2, [r3, #4]
3400222a:	609a      	str	r2, [r3, #8]
3400222c:	60da      	str	r2, [r3, #12]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
3400222e:	2301      	movs	r3, #1
34002230:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34002232:	2300      	movs	r3, #0
34002234:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34002236:	2304      	movs	r3, #4
34002238:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3400223a:	2308      	movs	r3, #8
3400223c:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
3400223e:	2310      	movs	r3, #16
34002240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
34002242:	f64e 6311 	movw	r3, #60945	@ 0xee11
34002246:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34002248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400224c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400224e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34002252:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34002254:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34002258:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3400225a:	2300      	movs	r3, #0
3400225c:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
3400225e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34002262:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
34002264:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34002268:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
3400226a:	2306      	movs	r3, #6
3400226c:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
3400226e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34002272:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002274:	f107 031c 	add.w	r3, r7, #28
34002278:	f241 3288 	movw	r2, #5000	@ 0x1388
3400227c:	4619      	mov	r1, r3
3400227e:	6878      	ldr	r0, [r7, #4]
34002280:	f014 fdfe 	bl	34016e80 <HAL_XSPI_Command>
34002284:	4603      	mov	r3, r0
34002286:	2b00      	cmp	r3, #0
34002288:	d002      	beq.n	34002290 <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
3400228a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400228e:	e025      	b.n	340022dc <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
34002290:	2302      	movs	r3, #2
34002292:	61fb      	str	r3, [r7, #28]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34002294:	f241 23ed 	movw	r3, #4845	@ 0x12ed
34002298:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DummyCycles   = 0U;
3400229a:	2300      	movs	r3, #0
3400229c:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
3400229e:	2300      	movs	r3, #0
340022a0:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340022a2:	f107 031c 	add.w	r3, r7, #28
340022a6:	f241 3288 	movw	r2, #5000	@ 0x1388
340022aa:	4619      	mov	r1, r3
340022ac:	6878      	ldr	r0, [r7, #4]
340022ae:	f014 fde7 	bl	34016e80 <HAL_XSPI_Command>
340022b2:	4603      	mov	r3, r0
340022b4:	2b00      	cmp	r3, #0
340022b6:	d002      	beq.n	340022be <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
340022b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340022bc:	e00e      	b.n	340022dc <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
340022be:	2300      	movs	r3, #0
340022c0:	60fb      	str	r3, [r7, #12]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
340022c2:	f107 030c 	add.w	r3, r7, #12
340022c6:	4619      	mov	r1, r3
340022c8:	6878      	ldr	r0, [r7, #4]
340022ca:	f015 f9cb 	bl	34017664 <HAL_XSPI_MemoryMapped>
340022ce:	4603      	mov	r3, r0
340022d0:	2b00      	cmp	r3, #0
340022d2:	d002      	beq.n	340022da <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
340022d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340022d8:	e000      	b.n	340022dc <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
340022da:	2300      	movs	r3, #0
}
340022dc:	4618      	mov	r0, r3
340022de:	3768      	adds	r7, #104	@ 0x68
340022e0:	46bd      	mov	sp, r7
340022e2:	bd80      	pop	{r7, pc}

340022e4 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
340022e4:	b580      	push	{r7, lr}
340022e6:	b09a      	sub	sp, #104	@ 0x68
340022e8:	af00      	add	r7, sp, #0
340022ea:	6078      	str	r0, [r7, #4]
340022ec:	460b      	mov	r3, r1
340022ee:	70fb      	strb	r3, [r7, #3]
340022f0:	4613      	mov	r3, r2
340022f2:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
340022f4:	f107 031c 	add.w	r3, r7, #28
340022f8:	224c      	movs	r2, #76	@ 0x4c
340022fa:	2100      	movs	r1, #0
340022fc:	4618      	mov	r0, r3
340022fe:	f019 ffb9 	bl	3401c274 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34002302:	f107 0308 	add.w	r3, r7, #8
34002306:	2200      	movs	r2, #0
34002308:	601a      	str	r2, [r3, #0]
3400230a:	605a      	str	r2, [r3, #4]
3400230c:	609a      	str	r2, [r3, #8]
3400230e:	60da      	str	r2, [r3, #12]
34002310:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34002312:	78fb      	ldrb	r3, [r7, #3]
34002314:	2b00      	cmp	r3, #0
34002316:	d105      	bne.n	34002324 <MX25UM51245G_WriteEnable+0x40>
34002318:	78bb      	ldrb	r3, [r7, #2]
3400231a:	2b01      	cmp	r3, #1
3400231c:	d102      	bne.n	34002324 <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
3400231e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002322:	e0a9      	b.n	34002478 <MX25UM51245G_WriteEnable+0x194>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34002324:	2300      	movs	r3, #0
34002326:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34002328:	2300      	movs	r3, #0
3400232a:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400232c:	78fb      	ldrb	r3, [r7, #3]
3400232e:	2b00      	cmp	r3, #0
34002330:	d101      	bne.n	34002336 <MX25UM51245G_WriteEnable+0x52>
34002332:	2301      	movs	r3, #1
34002334:	e000      	b.n	34002338 <MX25UM51245G_WriteEnable+0x54>
34002336:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34002338:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400233a:	78bb      	ldrb	r3, [r7, #2]
3400233c:	2b01      	cmp	r3, #1
3400233e:	d101      	bne.n	34002344 <MX25UM51245G_WriteEnable+0x60>
34002340:	2308      	movs	r3, #8
34002342:	e000      	b.n	34002346 <MX25UM51245G_WriteEnable+0x62>
34002344:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34002346:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34002348:	78fb      	ldrb	r3, [r7, #3]
3400234a:	2b00      	cmp	r3, #0
3400234c:	d101      	bne.n	34002352 <MX25UM51245G_WriteEnable+0x6e>
3400234e:	2300      	movs	r3, #0
34002350:	e000      	b.n	34002354 <MX25UM51245G_WriteEnable+0x70>
34002352:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34002354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34002356:	78fb      	ldrb	r3, [r7, #3]
34002358:	2b00      	cmp	r3, #0
3400235a:	d101      	bne.n	34002360 <MX25UM51245G_WriteEnable+0x7c>
3400235c:	2306      	movs	r3, #6
3400235e:	e001      	b.n	34002364 <MX25UM51245G_WriteEnable+0x80>
34002360:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34002364:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
34002366:	2300      	movs	r3, #0
34002368:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3400236a:	2300      	movs	r3, #0
3400236c:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
3400236e:	2300      	movs	r3, #0
34002370:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = 0U;
34002372:	2300      	movs	r3, #0
34002374:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34002376:	2300      	movs	r3, #0
34002378:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400237a:	f107 031c 	add.w	r3, r7, #28
3400237e:	f241 3288 	movw	r2, #5000	@ 0x1388
34002382:	4619      	mov	r1, r3
34002384:	6878      	ldr	r0, [r7, #4]
34002386:	f014 fd7b 	bl	34016e80 <HAL_XSPI_Command>
3400238a:	4603      	mov	r3, r0
3400238c:	2b00      	cmp	r3, #0
3400238e:	d002      	beq.n	34002396 <MX25UM51245G_WriteEnable+0xb2>
  {
    return MX25UM51245G_ERROR;
34002390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002394:	e070      	b.n	34002478 <MX25UM51245G_WriteEnable+0x194>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34002396:	78fb      	ldrb	r3, [r7, #3]
34002398:	2b00      	cmp	r3, #0
3400239a:	d101      	bne.n	340023a0 <MX25UM51245G_WriteEnable+0xbc>
3400239c:	2305      	movs	r3, #5
3400239e:	e001      	b.n	340023a4 <MX25UM51245G_WriteEnable+0xc0>
340023a0:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
340023a4:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
340023a6:	78fb      	ldrb	r3, [r7, #3]
340023a8:	2b00      	cmp	r3, #0
340023aa:	d101      	bne.n	340023b0 <MX25UM51245G_WriteEnable+0xcc>
340023ac:	2300      	movs	r3, #0
340023ae:	e001      	b.n	340023b4 <MX25UM51245G_WriteEnable+0xd0>
340023b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340023b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
340023b6:	78bb      	ldrb	r3, [r7, #2]
340023b8:	2b01      	cmp	r3, #1
340023ba:	d102      	bne.n	340023c2 <MX25UM51245G_WriteEnable+0xde>
340023bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
340023c0:	e000      	b.n	340023c4 <MX25UM51245G_WriteEnable+0xe0>
340023c2:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340023c4:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
340023c6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340023ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.Address        = 0U;
340023cc:	2300      	movs	r3, #0
340023ce:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340023d0:	78fb      	ldrb	r3, [r7, #3]
340023d2:	2b00      	cmp	r3, #0
340023d4:	d102      	bne.n	340023dc <MX25UM51245G_WriteEnable+0xf8>
340023d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
340023da:	e001      	b.n	340023e0 <MX25UM51245G_WriteEnable+0xfc>
340023dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
340023e0:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
340023e2:	78bb      	ldrb	r3, [r7, #2]
340023e4:	2b01      	cmp	r3, #1
340023e6:	d102      	bne.n	340023ee <MX25UM51245G_WriteEnable+0x10a>
340023e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
340023ec:	e000      	b.n	340023f0 <MX25UM51245G_WriteEnable+0x10c>
340023ee:	2300      	movs	r3, #0
340023f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
340023f2:	78fb      	ldrb	r3, [r7, #3]
340023f4:	2b00      	cmp	r3, #0
340023f6:	d006      	beq.n	34002406 <MX25UM51245G_WriteEnable+0x122>
340023f8:	78bb      	ldrb	r3, [r7, #2]
340023fa:	2b01      	cmp	r3, #1
340023fc:	d101      	bne.n	34002402 <MX25UM51245G_WriteEnable+0x11e>
340023fe:	2305      	movs	r3, #5
34002400:	e002      	b.n	34002408 <MX25UM51245G_WriteEnable+0x124>
34002402:	2304      	movs	r3, #4
34002404:	e000      	b.n	34002408 <MX25UM51245G_WriteEnable+0x124>
34002406:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
34002408:	663b      	str	r3, [r7, #96]	@ 0x60
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400240a:	78bb      	ldrb	r3, [r7, #2]
3400240c:	2b01      	cmp	r3, #1
3400240e:	d101      	bne.n	34002414 <MX25UM51245G_WriteEnable+0x130>
34002410:	2302      	movs	r3, #2
34002412:	e000      	b.n	34002416 <MX25UM51245G_WriteEnable+0x132>
34002414:	2301      	movs	r3, #1
34002416:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34002418:	78bb      	ldrb	r3, [r7, #2]
3400241a:	2b01      	cmp	r3, #1
3400241c:	d102      	bne.n	34002424 <MX25UM51245G_WriteEnable+0x140>
3400241e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34002422:	e000      	b.n	34002426 <MX25UM51245G_WriteEnable+0x142>
34002424:	2300      	movs	r3, #0
34002426:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002428:	f107 031c 	add.w	r3, r7, #28
3400242c:	f241 3288 	movw	r2, #5000	@ 0x1388
34002430:	4619      	mov	r1, r3
34002432:	6878      	ldr	r0, [r7, #4]
34002434:	f014 fd24 	bl	34016e80 <HAL_XSPI_Command>
34002438:	4603      	mov	r3, r0
3400243a:	2b00      	cmp	r3, #0
3400243c:	d002      	beq.n	34002444 <MX25UM51245G_WriteEnable+0x160>
  {
    return MX25UM51245G_ERROR;
3400243e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002442:	e019      	b.n	34002478 <MX25UM51245G_WriteEnable+0x194>
  }

  s_config.MatchValue      = 2U;
34002444:	2302      	movs	r3, #2
34002446:	60bb      	str	r3, [r7, #8]
  s_config.MatchMask       = 2U;
34002448:	2302      	movs	r3, #2
3400244a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
3400244c:	2300      	movs	r3, #0
3400244e:	613b      	str	r3, [r7, #16]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
34002450:	2310      	movs	r3, #16
34002452:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34002454:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34002458:	617b      	str	r3, [r7, #20]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400245a:	f107 0308 	add.w	r3, r7, #8
3400245e:	f241 3288 	movw	r2, #5000	@ 0x1388
34002462:	4619      	mov	r1, r3
34002464:	6878      	ldr	r0, [r7, #4]
34002466:	f015 f833 	bl	340174d0 <HAL_XSPI_AutoPolling>
3400246a:	4603      	mov	r3, r0
3400246c:	2b00      	cmp	r3, #0
3400246e:	d002      	beq.n	34002476 <MX25UM51245G_WriteEnable+0x192>
  {
    return MX25UM51245G_ERROR;
34002470:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002474:	e000      	b.n	34002478 <MX25UM51245G_WriteEnable+0x194>
  }

  return MX25UM51245G_OK;
34002476:	2300      	movs	r3, #0
}
34002478:	4618      	mov	r0, r3
3400247a:	3768      	adds	r7, #104	@ 0x68
3400247c:	46bd      	mov	sp, r7
3400247e:	bd80      	pop	{r7, pc}

34002480 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
34002480:	b580      	push	{r7, lr}
34002482:	b098      	sub	sp, #96	@ 0x60
34002484:	af00      	add	r7, sp, #0
34002486:	60f8      	str	r0, [r7, #12]
34002488:	607b      	str	r3, [r7, #4]
3400248a:	460b      	mov	r3, r1
3400248c:	72fb      	strb	r3, [r7, #11]
3400248e:	4613      	mov	r3, r2
34002490:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
34002492:	f107 0314 	add.w	r3, r7, #20
34002496:	224c      	movs	r2, #76	@ 0x4c
34002498:	2100      	movs	r1, #0
3400249a:	4618      	mov	r0, r3
3400249c:	f019 feea 	bl	3401c274 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340024a0:	7afb      	ldrb	r3, [r7, #11]
340024a2:	2b00      	cmp	r3, #0
340024a4:	d105      	bne.n	340024b2 <MX25UM51245G_WriteCfg2Register+0x32>
340024a6:	7abb      	ldrb	r3, [r7, #10]
340024a8:	2b01      	cmp	r3, #1
340024aa:	d102      	bne.n	340024b2 <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
340024ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340024b0:	e075      	b.n	3400259e <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
340024b2:	2300      	movs	r3, #0
340024b4:	617b      	str	r3, [r7, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340024b6:	2300      	movs	r3, #0
340024b8:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340024ba:	7afb      	ldrb	r3, [r7, #11]
340024bc:	2b00      	cmp	r3, #0
340024be:	d101      	bne.n	340024c4 <MX25UM51245G_WriteCfg2Register+0x44>
340024c0:	2301      	movs	r3, #1
340024c2:	e000      	b.n	340024c6 <MX25UM51245G_WriteCfg2Register+0x46>
340024c4:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340024c6:	623b      	str	r3, [r7, #32]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340024c8:	7abb      	ldrb	r3, [r7, #10]
340024ca:	2b01      	cmp	r3, #1
340024cc:	d101      	bne.n	340024d2 <MX25UM51245G_WriteCfg2Register+0x52>
340024ce:	2308      	movs	r3, #8
340024d0:	e000      	b.n	340024d4 <MX25UM51245G_WriteCfg2Register+0x54>
340024d2:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340024d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340024d6:	7afb      	ldrb	r3, [r7, #11]
340024d8:	2b00      	cmp	r3, #0
340024da:	d101      	bne.n	340024e0 <MX25UM51245G_WriteCfg2Register+0x60>
340024dc:	2300      	movs	r3, #0
340024de:	e000      	b.n	340024e2 <MX25UM51245G_WriteCfg2Register+0x62>
340024e0:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340024e2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
340024e4:	7afb      	ldrb	r3, [r7, #11]
340024e6:	2b00      	cmp	r3, #0
340024e8:	d101      	bne.n	340024ee <MX25UM51245G_WriteCfg2Register+0x6e>
340024ea:	2372      	movs	r3, #114	@ 0x72
340024ec:	e001      	b.n	340024f2 <MX25UM51245G_WriteCfg2Register+0x72>
340024ee:	f247 238d 	movw	r3, #29325	@ 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340024f2:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340024f4:	7afb      	ldrb	r3, [r7, #11]
340024f6:	2b00      	cmp	r3, #0
340024f8:	d102      	bne.n	34002500 <MX25UM51245G_WriteCfg2Register+0x80>
340024fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
340024fe:	e001      	b.n	34002504 <MX25UM51245G_WriteCfg2Register+0x84>
34002500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34002504:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34002506:	7abb      	ldrb	r3, [r7, #10]
34002508:	2b01      	cmp	r3, #1
3400250a:	d102      	bne.n	34002512 <MX25UM51245G_WriteCfg2Register+0x92>
3400250c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34002510:	e000      	b.n	34002514 <MX25UM51245G_WriteCfg2Register+0x94>
34002512:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34002514:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34002516:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400251a:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.Address            = WriteAddr;
3400251c:	687b      	ldr	r3, [r7, #4]
3400251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34002520:	2300      	movs	r3, #0
34002522:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34002524:	7afb      	ldrb	r3, [r7, #11]
34002526:	2b00      	cmp	r3, #0
34002528:	d102      	bne.n	34002530 <MX25UM51245G_WriteCfg2Register+0xb0>
3400252a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3400252e:	e001      	b.n	34002534 <MX25UM51245G_WriteCfg2Register+0xb4>
34002530:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34002534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34002536:	7abb      	ldrb	r3, [r7, #10]
34002538:	2b01      	cmp	r3, #1
3400253a:	d102      	bne.n	34002542 <MX25UM51245G_WriteCfg2Register+0xc2>
3400253c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34002540:	e000      	b.n	34002544 <MX25UM51245G_WriteCfg2Register+0xc4>
34002542:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34002544:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = 0U;
34002546:	2300      	movs	r3, #0
34002548:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
3400254a:	7afb      	ldrb	r3, [r7, #11]
3400254c:	2b00      	cmp	r3, #0
3400254e:	d006      	beq.n	3400255e <MX25UM51245G_WriteCfg2Register+0xde>
34002550:	7abb      	ldrb	r3, [r7, #10]
34002552:	2b01      	cmp	r3, #1
34002554:	d101      	bne.n	3400255a <MX25UM51245G_WriteCfg2Register+0xda>
34002556:	2302      	movs	r3, #2
34002558:	e002      	b.n	34002560 <MX25UM51245G_WriteCfg2Register+0xe0>
3400255a:	2301      	movs	r3, #1
3400255c:	e000      	b.n	34002560 <MX25UM51245G_WriteCfg2Register+0xe0>
3400255e:	2301      	movs	r3, #1
34002560:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34002562:	2300      	movs	r3, #0
34002564:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002566:	f107 0314 	add.w	r3, r7, #20
3400256a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400256e:	4619      	mov	r1, r3
34002570:	68f8      	ldr	r0, [r7, #12]
34002572:	f014 fc85 	bl	34016e80 <HAL_XSPI_Command>
34002576:	4603      	mov	r3, r0
34002578:	2b00      	cmp	r3, #0
3400257a:	d002      	beq.n	34002582 <MX25UM51245G_WriteCfg2Register+0x102>
  {
    return MX25UM51245G_ERROR;
3400257c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002580:	e00d      	b.n	3400259e <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002582:	f241 3288 	movw	r2, #5000	@ 0x1388
34002586:	f107 0168 	add.w	r1, r7, #104	@ 0x68
3400258a:	68f8      	ldr	r0, [r7, #12]
3400258c:	f014 fe8a 	bl	340172a4 <HAL_XSPI_Transmit>
34002590:	4603      	mov	r3, r0
34002592:	2b00      	cmp	r3, #0
34002594:	d002      	beq.n	3400259c <MX25UM51245G_WriteCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
34002596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400259a:	e000      	b.n	3400259e <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  return MX25UM51245G_OK;
3400259c:	2300      	movs	r3, #0
}
3400259e:	4618      	mov	r0, r3
340025a0:	3760      	adds	r7, #96	@ 0x60
340025a2:	46bd      	mov	sp, r7
340025a4:	bd80      	pop	{r7, pc}

340025a6 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
340025a6:	b580      	push	{r7, lr}
340025a8:	b098      	sub	sp, #96	@ 0x60
340025aa:	af00      	add	r7, sp, #0
340025ac:	60f8      	str	r0, [r7, #12]
340025ae:	607b      	str	r3, [r7, #4]
340025b0:	460b      	mov	r3, r1
340025b2:	72fb      	strb	r3, [r7, #11]
340025b4:	4613      	mov	r3, r2
340025b6:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
340025b8:	f107 0314 	add.w	r3, r7, #20
340025bc:	224c      	movs	r2, #76	@ 0x4c
340025be:	2100      	movs	r1, #0
340025c0:	4618      	mov	r0, r3
340025c2:	f019 fe57 	bl	3401c274 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340025c6:	7afb      	ldrb	r3, [r7, #11]
340025c8:	2b00      	cmp	r3, #0
340025ca:	d105      	bne.n	340025d8 <MX25UM51245G_ReadCfg2Register+0x32>
340025cc:	7abb      	ldrb	r3, [r7, #10]
340025ce:	2b01      	cmp	r3, #1
340025d0:	d102      	bne.n	340025d8 <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
340025d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340025d6:	e07f      	b.n	340026d8 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
340025d8:	2300      	movs	r3, #0
340025da:	617b      	str	r3, [r7, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340025dc:	2300      	movs	r3, #0
340025de:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340025e0:	7afb      	ldrb	r3, [r7, #11]
340025e2:	2b00      	cmp	r3, #0
340025e4:	d101      	bne.n	340025ea <MX25UM51245G_ReadCfg2Register+0x44>
340025e6:	2301      	movs	r3, #1
340025e8:	e000      	b.n	340025ec <MX25UM51245G_ReadCfg2Register+0x46>
340025ea:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340025ec:	623b      	str	r3, [r7, #32]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340025ee:	7abb      	ldrb	r3, [r7, #10]
340025f0:	2b01      	cmp	r3, #1
340025f2:	d101      	bne.n	340025f8 <MX25UM51245G_ReadCfg2Register+0x52>
340025f4:	2308      	movs	r3, #8
340025f6:	e000      	b.n	340025fa <MX25UM51245G_ReadCfg2Register+0x54>
340025f8:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340025fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340025fc:	7afb      	ldrb	r3, [r7, #11]
340025fe:	2b00      	cmp	r3, #0
34002600:	d101      	bne.n	34002606 <MX25UM51245G_ReadCfg2Register+0x60>
34002602:	2300      	movs	r3, #0
34002604:	e000      	b.n	34002608 <MX25UM51245G_ReadCfg2Register+0x62>
34002606:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34002608:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
3400260a:	7afb      	ldrb	r3, [r7, #11]
3400260c:	2b00      	cmp	r3, #0
3400260e:	d101      	bne.n	34002614 <MX25UM51245G_ReadCfg2Register+0x6e>
34002610:	2371      	movs	r3, #113	@ 0x71
34002612:	e001      	b.n	34002618 <MX25UM51245G_ReadCfg2Register+0x72>
34002614:	f247 138e 	movw	r3, #29070	@ 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34002618:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400261a:	7afb      	ldrb	r3, [r7, #11]
3400261c:	2b00      	cmp	r3, #0
3400261e:	d102      	bne.n	34002626 <MX25UM51245G_ReadCfg2Register+0x80>
34002620:	f44f 7380 	mov.w	r3, #256	@ 0x100
34002624:	e001      	b.n	3400262a <MX25UM51245G_ReadCfg2Register+0x84>
34002626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400262a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400262c:	7abb      	ldrb	r3, [r7, #10]
3400262e:	2b01      	cmp	r3, #1
34002630:	d102      	bne.n	34002638 <MX25UM51245G_ReadCfg2Register+0x92>
34002632:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34002636:	e000      	b.n	3400263a <MX25UM51245G_ReadCfg2Register+0x94>
34002638:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
3400263a:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400263c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34002640:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.Address            = ReadAddr;
34002642:	687b      	ldr	r3, [r7, #4]
34002644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34002646:	2300      	movs	r3, #0
34002648:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400264a:	7afb      	ldrb	r3, [r7, #11]
3400264c:	2b00      	cmp	r3, #0
3400264e:	d102      	bne.n	34002656 <MX25UM51245G_ReadCfg2Register+0xb0>
34002650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34002654:	e001      	b.n	3400265a <MX25UM51245G_ReadCfg2Register+0xb4>
34002656:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3400265a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
3400265c:	7abb      	ldrb	r3, [r7, #10]
3400265e:	2b01      	cmp	r3, #1
34002660:	d102      	bne.n	34002668 <MX25UM51245G_ReadCfg2Register+0xc2>
34002662:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34002666:	e000      	b.n	3400266a <MX25UM51245G_ReadCfg2Register+0xc4>
34002668:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
3400266a:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
3400266c:	7afb      	ldrb	r3, [r7, #11]
3400266e:	2b00      	cmp	r3, #0
34002670:	d006      	beq.n	34002680 <MX25UM51245G_ReadCfg2Register+0xda>
34002672:	7abb      	ldrb	r3, [r7, #10]
34002674:	2b01      	cmp	r3, #1
34002676:	d101      	bne.n	3400267c <MX25UM51245G_ReadCfg2Register+0xd6>
34002678:	2305      	movs	r3, #5
3400267a:	e002      	b.n	34002682 <MX25UM51245G_ReadCfg2Register+0xdc>
3400267c:	2304      	movs	r3, #4
3400267e:	e000      	b.n	34002682 <MX25UM51245G_ReadCfg2Register+0xdc>
34002680:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34002682:	65bb      	str	r3, [r7, #88]	@ 0x58
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34002684:	7abb      	ldrb	r3, [r7, #10]
34002686:	2b01      	cmp	r3, #1
34002688:	d101      	bne.n	3400268e <MX25UM51245G_ReadCfg2Register+0xe8>
3400268a:	2302      	movs	r3, #2
3400268c:	e000      	b.n	34002690 <MX25UM51245G_ReadCfg2Register+0xea>
3400268e:	2301      	movs	r3, #1
34002690:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34002692:	7abb      	ldrb	r3, [r7, #10]
34002694:	2b01      	cmp	r3, #1
34002696:	d102      	bne.n	3400269e <MX25UM51245G_ReadCfg2Register+0xf8>
34002698:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400269c:	e000      	b.n	340026a0 <MX25UM51245G_ReadCfg2Register+0xfa>
3400269e:	2300      	movs	r3, #0
340026a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340026a2:	f107 0314 	add.w	r3, r7, #20
340026a6:	f241 3288 	movw	r2, #5000	@ 0x1388
340026aa:	4619      	mov	r1, r3
340026ac:	68f8      	ldr	r0, [r7, #12]
340026ae:	f014 fbe7 	bl	34016e80 <HAL_XSPI_Command>
340026b2:	4603      	mov	r3, r0
340026b4:	2b00      	cmp	r3, #0
340026b6:	d002      	beq.n	340026be <MX25UM51245G_ReadCfg2Register+0x118>
  {
    return MX25UM51245G_ERROR;
340026b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340026bc:	e00c      	b.n	340026d8 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340026be:	f241 3288 	movw	r2, #5000	@ 0x1388
340026c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
340026c4:	68f8      	ldr	r0, [r7, #12]
340026c6:	f014 fe60 	bl	3401738a <HAL_XSPI_Receive>
340026ca:	4603      	mov	r3, r0
340026cc:	2b00      	cmp	r3, #0
340026ce:	d002      	beq.n	340026d6 <MX25UM51245G_ReadCfg2Register+0x130>
  {
    return MX25UM51245G_ERROR;
340026d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340026d4:	e000      	b.n	340026d8 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  return MX25UM51245G_OK;
340026d6:	2300      	movs	r3, #0
}
340026d8:	4618      	mov	r0, r3
340026da:	3760      	adds	r7, #96	@ 0x60
340026dc:	46bd      	mov	sp, r7
340026de:	bd80      	pop	{r7, pc}

340026e0 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
340026e0:	b580      	push	{r7, lr}
340026e2:	b096      	sub	sp, #88	@ 0x58
340026e4:	af00      	add	r7, sp, #0
340026e6:	6078      	str	r0, [r7, #4]
340026e8:	460b      	mov	r3, r1
340026ea:	70fb      	strb	r3, [r7, #3]
340026ec:	4613      	mov	r3, r2
340026ee:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
340026f0:	f107 030c 	add.w	r3, r7, #12
340026f4:	224c      	movs	r2, #76	@ 0x4c
340026f6:	2100      	movs	r1, #0
340026f8:	4618      	mov	r0, r3
340026fa:	f019 fdbb 	bl	3401c274 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340026fe:	78fb      	ldrb	r3, [r7, #3]
34002700:	2b00      	cmp	r3, #0
34002702:	d105      	bne.n	34002710 <MX25UM51245G_ResetEnable+0x30>
34002704:	78bb      	ldrb	r3, [r7, #2]
34002706:	2b01      	cmp	r3, #1
34002708:	d102      	bne.n	34002710 <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
3400270a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400270e:	e039      	b.n	34002784 <MX25UM51245G_ResetEnable+0xa4>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34002710:	2300      	movs	r3, #0
34002712:	60fb      	str	r3, [r7, #12]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34002714:	2300      	movs	r3, #0
34002716:	613b      	str	r3, [r7, #16]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34002718:	78fb      	ldrb	r3, [r7, #3]
3400271a:	2b00      	cmp	r3, #0
3400271c:	d101      	bne.n	34002722 <MX25UM51245G_ResetEnable+0x42>
3400271e:	2301      	movs	r3, #1
34002720:	e000      	b.n	34002724 <MX25UM51245G_ResetEnable+0x44>
34002722:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34002724:	61bb      	str	r3, [r7, #24]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34002726:	78bb      	ldrb	r3, [r7, #2]
34002728:	2b01      	cmp	r3, #1
3400272a:	d101      	bne.n	34002730 <MX25UM51245G_ResetEnable+0x50>
3400272c:	2308      	movs	r3, #8
3400272e:	e000      	b.n	34002732 <MX25UM51245G_ResetEnable+0x52>
34002730:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34002732:	623b      	str	r3, [r7, #32]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34002734:	78fb      	ldrb	r3, [r7, #3]
34002736:	2b00      	cmp	r3, #0
34002738:	d101      	bne.n	3400273e <MX25UM51245G_ResetEnable+0x5e>
3400273a:	2300      	movs	r3, #0
3400273c:	e000      	b.n	34002740 <MX25UM51245G_ResetEnable+0x60>
3400273e:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34002740:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
34002742:	78fb      	ldrb	r3, [r7, #3]
34002744:	2b00      	cmp	r3, #0
34002746:	d101      	bne.n	3400274c <MX25UM51245G_ResetEnable+0x6c>
34002748:	2366      	movs	r3, #102	@ 0x66
3400274a:	e001      	b.n	34002750 <MX25UM51245G_ResetEnable+0x70>
3400274c:	f246 6399 	movw	r3, #26265	@ 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34002750:	617b      	str	r3, [r7, #20]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
34002752:	2300      	movs	r3, #0
34002754:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34002756:	2300      	movs	r3, #0
34002758:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
3400275a:	2300      	movs	r3, #0
3400275c:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles        = 0U;
3400275e:	2300      	movs	r3, #0
34002760:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34002762:	2300      	movs	r3, #0
34002764:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002766:	f107 030c 	add.w	r3, r7, #12
3400276a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400276e:	4619      	mov	r1, r3
34002770:	6878      	ldr	r0, [r7, #4]
34002772:	f014 fb85 	bl	34016e80 <HAL_XSPI_Command>
34002776:	4603      	mov	r3, r0
34002778:	2b00      	cmp	r3, #0
3400277a:	d002      	beq.n	34002782 <MX25UM51245G_ResetEnable+0xa2>
  {
    return MX25UM51245G_ERROR;
3400277c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002780:	e000      	b.n	34002784 <MX25UM51245G_ResetEnable+0xa4>
  }

  return MX25UM51245G_OK;
34002782:	2300      	movs	r3, #0
}
34002784:	4618      	mov	r0, r3
34002786:	3758      	adds	r7, #88	@ 0x58
34002788:	46bd      	mov	sp, r7
3400278a:	bd80      	pop	{r7, pc}

3400278c <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
3400278c:	b580      	push	{r7, lr}
3400278e:	b096      	sub	sp, #88	@ 0x58
34002790:	af00      	add	r7, sp, #0
34002792:	6078      	str	r0, [r7, #4]
34002794:	460b      	mov	r3, r1
34002796:	70fb      	strb	r3, [r7, #3]
34002798:	4613      	mov	r3, r2
3400279a:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
3400279c:	f107 030c 	add.w	r3, r7, #12
340027a0:	224c      	movs	r2, #76	@ 0x4c
340027a2:	2100      	movs	r1, #0
340027a4:	4618      	mov	r0, r3
340027a6:	f019 fd65 	bl	3401c274 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340027aa:	78fb      	ldrb	r3, [r7, #3]
340027ac:	2b00      	cmp	r3, #0
340027ae:	d105      	bne.n	340027bc <MX25UM51245G_ResetMemory+0x30>
340027b0:	78bb      	ldrb	r3, [r7, #2]
340027b2:	2b01      	cmp	r3, #1
340027b4:	d102      	bne.n	340027bc <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
340027b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340027ba:	e039      	b.n	34002830 <MX25UM51245G_ResetMemory+0xa4>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
340027bc:	2300      	movs	r3, #0
340027be:	60fb      	str	r3, [r7, #12]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340027c0:	2300      	movs	r3, #0
340027c2:	613b      	str	r3, [r7, #16]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340027c4:	78fb      	ldrb	r3, [r7, #3]
340027c6:	2b00      	cmp	r3, #0
340027c8:	d101      	bne.n	340027ce <MX25UM51245G_ResetMemory+0x42>
340027ca:	2301      	movs	r3, #1
340027cc:	e000      	b.n	340027d0 <MX25UM51245G_ResetMemory+0x44>
340027ce:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340027d0:	61bb      	str	r3, [r7, #24]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340027d2:	78bb      	ldrb	r3, [r7, #2]
340027d4:	2b01      	cmp	r3, #1
340027d6:	d101      	bne.n	340027dc <MX25UM51245G_ResetMemory+0x50>
340027d8:	2308      	movs	r3, #8
340027da:	e000      	b.n	340027de <MX25UM51245G_ResetMemory+0x52>
340027dc:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340027de:	623b      	str	r3, [r7, #32]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340027e0:	78fb      	ldrb	r3, [r7, #3]
340027e2:	2b00      	cmp	r3, #0
340027e4:	d101      	bne.n	340027ea <MX25UM51245G_ResetMemory+0x5e>
340027e6:	2300      	movs	r3, #0
340027e8:	e000      	b.n	340027ec <MX25UM51245G_ResetMemory+0x60>
340027ea:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340027ec:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
340027ee:	78fb      	ldrb	r3, [r7, #3]
340027f0:	2b00      	cmp	r3, #0
340027f2:	d101      	bne.n	340027f8 <MX25UM51245G_ResetMemory+0x6c>
340027f4:	2399      	movs	r3, #153	@ 0x99
340027f6:	e001      	b.n	340027fc <MX25UM51245G_ResetMemory+0x70>
340027f8:	f649 1366 	movw	r3, #39270	@ 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340027fc:	617b      	str	r3, [r7, #20]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
340027fe:	2300      	movs	r3, #0
34002800:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34002802:	2300      	movs	r3, #0
34002804:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
34002806:	2300      	movs	r3, #0
34002808:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles        = 0U;
3400280a:	2300      	movs	r3, #0
3400280c:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3400280e:	2300      	movs	r3, #0
34002810:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002812:	f107 030c 	add.w	r3, r7, #12
34002816:	f241 3288 	movw	r2, #5000	@ 0x1388
3400281a:	4619      	mov	r1, r3
3400281c:	6878      	ldr	r0, [r7, #4]
3400281e:	f014 fb2f 	bl	34016e80 <HAL_XSPI_Command>
34002822:	4603      	mov	r3, r0
34002824:	2b00      	cmp	r3, #0
34002826:	d002      	beq.n	3400282e <MX25UM51245G_ResetMemory+0xa2>
  {
    return MX25UM51245G_ERROR;
34002828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400282c:	e000      	b.n	34002830 <MX25UM51245G_ResetMemory+0xa4>
  }

  return MX25UM51245G_OK;
3400282e:	2300      	movs	r3, #0
}
34002830:	4618      	mov	r0, r3
34002832:	3758      	adds	r7, #88	@ 0x58
34002834:	46bd      	mov	sp, r7
34002836:	bd80      	pop	{r7, pc}

34002838 <LL_AHB4_GRP1_EnableClock>:
{
34002838:	b480      	push	{r7}
3400283a:	b085      	sub	sp, #20
3400283c:	af00      	add	r7, sp, #0
3400283e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34002840:	4a07      	ldr	r2, [pc, #28]	@ (34002860 <LL_AHB4_GRP1_EnableClock+0x28>)
34002842:	687b      	ldr	r3, [r7, #4]
34002844:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34002848:	4b05      	ldr	r3, [pc, #20]	@ (34002860 <LL_AHB4_GRP1_EnableClock+0x28>)
3400284a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400284e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002850:	68fb      	ldr	r3, [r7, #12]
}
34002852:	bf00      	nop
34002854:	3714      	adds	r7, #20
34002856:	46bd      	mov	sp, r7
34002858:	f85d 7b04 	ldr.w	r7, [sp], #4
3400285c:	4770      	bx	lr
3400285e:	bf00      	nop
34002860:	56028000 	.word	0x56028000

34002864 <LL_APB2_GRP1_EnableClock>:
{
34002864:	b480      	push	{r7}
34002866:	b085      	sub	sp, #20
34002868:	af00      	add	r7, sp, #0
3400286a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB2ENSR, Periphs);
3400286c:	4a07      	ldr	r2, [pc, #28]	@ (3400288c <LL_APB2_GRP1_EnableClock+0x28>)
3400286e:	687b      	ldr	r3, [r7, #4]
34002870:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
34002874:	4b05      	ldr	r3, [pc, #20]	@ (3400288c <LL_APB2_GRP1_EnableClock+0x28>)
34002876:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
3400287a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
3400287c:	68fb      	ldr	r3, [r7, #12]
}
3400287e:	bf00      	nop
34002880:	3714      	adds	r7, #20
34002882:	46bd      	mov	sp, r7
34002884:	f85d 7b04 	ldr.w	r7, [sp], #4
34002888:	4770      	bx	lr
3400288a:	bf00      	nop
3400288c:	56028000 	.word	0x56028000

34002890 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
34002890:	b580      	push	{r7, lr}
34002892:	b088      	sub	sp, #32
34002894:	af00      	add	r7, sp, #0
34002896:	4603      	mov	r3, r0
34002898:	71fb      	strb	r3, [r7, #7]
  SMPS_GPIO_CLK_ENABLE();
3400289a:	2002      	movs	r0, #2
3400289c:	f7ff ffcc 	bl	34002838 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
340028a0:	f107 030c 	add.w	r3, r7, #12
340028a4:	2200      	movs	r2, #0
340028a6:	601a      	str	r2, [r3, #0]
340028a8:	605a      	str	r2, [r3, #4]
340028aa:	609a      	str	r2, [r3, #8]
340028ac:	60da      	str	r2, [r3, #12]
340028ae:	611a      	str	r2, [r3, #16]
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
340028b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
340028b4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
340028b6:	2301      	movs	r3, #1
340028b8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
340028ba:	2300      	movs	r3, #0
340028bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
340028be:	2303      	movs	r3, #3
340028c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
340028c2:	f107 030c 	add.w	r3, r7, #12
340028c6:	4619      	mov	r1, r3
340028c8:	4806      	ldr	r0, [pc, #24]	@ (340028e4 <BSP_SMPS_Init+0x54>)
340028ca:	f003 f899 	bl	34005a00 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
340028ce:	79fb      	ldrb	r3, [r7, #7]
340028d0:	461a      	mov	r2, r3
340028d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
340028d6:	4803      	ldr	r0, [pc, #12]	@ (340028e4 <BSP_SMPS_Init+0x54>)
340028d8:	f003 fbf2 	bl	340060c0 <HAL_GPIO_WritePin>
}
340028dc:	bf00      	nop
340028de:	3720      	adds	r7, #32
340028e0:	46bd      	mov	sp, r7
340028e2:	bd80      	pop	{r7, pc}
340028e4:	56020400 	.word	0x56020400

340028e8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
340028e8:	b580      	push	{r7, lr}
340028ea:	b084      	sub	sp, #16
340028ec:	af00      	add	r7, sp, #0
340028ee:	4603      	mov	r3, r0
340028f0:	6039      	str	r1, [r7, #0]
340028f2:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
340028f4:	2300      	movs	r3, #0
340028f6:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
340028f8:	683b      	ldr	r3, [r7, #0]
340028fa:	2b00      	cmp	r3, #0
340028fc:	d103      	bne.n	34002906 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
340028fe:	f06f 0301 	mvn.w	r3, #1
34002902:	60fb      	str	r3, [r7, #12]
34002904:	e029      	b.n	3400295a <BSP_COM_Init+0x72>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
34002906:	79fa      	ldrb	r2, [r7, #7]
34002908:	79fb      	ldrb	r3, [r7, #7]
3400290a:	4916      	ldr	r1, [pc, #88]	@ (34002964 <BSP_COM_Init+0x7c>)
3400290c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
34002910:	4915      	ldr	r1, [pc, #84]	@ (34002968 <BSP_COM_Init+0x80>)
34002912:	2094      	movs	r0, #148	@ 0x94
34002914:	fb00 f303 	mul.w	r3, r0, r3
34002918:	440b      	add	r3, r1
3400291a:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
3400291c:	79fb      	ldrb	r3, [r7, #7]
3400291e:	2294      	movs	r2, #148	@ 0x94
34002920:	fb02 f303 	mul.w	r3, r2, r3
34002924:	4a10      	ldr	r2, [pc, #64]	@ (34002968 <BSP_COM_Init+0x80>)
34002926:	4413      	add	r3, r2
34002928:	4618      	mov	r0, r3
3400292a:	f000 f853 	bl	340029d4 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

    if (status == BSP_ERROR_NONE)
3400292e:	68fb      	ldr	r3, [r7, #12]
34002930:	2b00      	cmp	r3, #0
34002932:	d112      	bne.n	3400295a <BSP_COM_Init+0x72>
    {
      if (COM == COM1)
34002934:	79fb      	ldrb	r3, [r7, #7]
34002936:	2b00      	cmp	r3, #0
34002938:	d10f      	bne.n	3400295a <BSP_COM_Init+0x72>
      {
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
3400293a:	79fb      	ldrb	r3, [r7, #7]
3400293c:	2294      	movs	r2, #148	@ 0x94
3400293e:	fb02 f303 	mul.w	r3, r2, r3
34002942:	4a09      	ldr	r2, [pc, #36]	@ (34002968 <BSP_COM_Init+0x80>)
34002944:	4413      	add	r3, r2
34002946:	6839      	ldr	r1, [r7, #0]
34002948:	4618      	mov	r0, r3
3400294a:	f000 f80f 	bl	3400296c <MX_USART1_Init>
3400294e:	4603      	mov	r3, r0
34002950:	2b00      	cmp	r3, #0
34002952:	d002      	beq.n	3400295a <BSP_COM_Init+0x72>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
34002954:	f06f 0303 	mvn.w	r3, #3
34002958:	60fb      	str	r3, [r7, #12]
//        }
      }
    }
  }

  return status;
3400295a:	68fb      	ldr	r3, [r7, #12]
}
3400295c:	4618      	mov	r0, r3
3400295e:	3710      	adds	r7, #16
34002960:	46bd      	mov	sp, r7
34002962:	bd80      	pop	{r7, pc}
34002964:	340206fc 	.word	0x340206fc
34002968:	34020930 	.word	0x34020930

3400296c <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
3400296c:	b580      	push	{r7, lr}
3400296e:	b082      	sub	sp, #8
34002970:	af00      	add	r7, sp, #0
34002972:	6078      	str	r0, [r7, #4]
34002974:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
34002976:	4b16      	ldr	r3, [pc, #88]	@ (340029d0 <MX_USART1_Init+0x64>)
34002978:	681a      	ldr	r2, [r3, #0]
3400297a:	687b      	ldr	r3, [r7, #4]
3400297c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
3400297e:	683b      	ldr	r3, [r7, #0]
34002980:	681a      	ldr	r2, [r3, #0]
34002982:	687b      	ldr	r3, [r7, #4]
34002984:	605a      	str	r2, [r3, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
34002986:	687b      	ldr	r3, [r7, #4]
34002988:	220c      	movs	r2, #12
3400298a:	615a      	str	r2, [r3, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
3400298c:	683b      	ldr	r3, [r7, #0]
3400298e:	895b      	ldrh	r3, [r3, #10]
34002990:	461a      	mov	r2, r3
34002992:	687b      	ldr	r3, [r7, #4]
34002994:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
34002996:	683b      	ldr	r3, [r7, #0]
34002998:	685a      	ldr	r2, [r3, #4]
3400299a:	687b      	ldr	r3, [r7, #4]
3400299c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
3400299e:	683b      	ldr	r3, [r7, #0]
340029a0:	891b      	ldrh	r3, [r3, #8]
340029a2:	461a      	mov	r2, r3
340029a4:	687b      	ldr	r3, [r7, #4]
340029a6:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
340029a8:	683b      	ldr	r3, [r7, #0]
340029aa:	899b      	ldrh	r3, [r3, #12]
340029ac:	461a      	mov	r2, r3
340029ae:	687b      	ldr	r3, [r7, #4]
340029b0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
340029b2:	687b      	ldr	r3, [r7, #4]
340029b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
340029b8:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
340029ba:	687b      	ldr	r3, [r7, #4]
340029bc:	2200      	movs	r2, #0
340029be:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
340029c0:	6878      	ldr	r0, [r7, #4]
340029c2:	f012 ff3d 	bl	34015840 <HAL_UART_Init>
340029c6:	4603      	mov	r3, r0
}
340029c8:	4618      	mov	r0, r3
340029ca:	3708      	adds	r7, #8
340029cc:	46bd      	mov	sp, r7
340029ce:	bd80      	pop	{r7, pc}
340029d0:	340206fc 	.word	0x340206fc

340029d4 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
340029d4:	b580      	push	{r7, lr}
340029d6:	b090      	sub	sp, #64	@ 0x40
340029d8:	af00      	add	r7, sp, #0
340029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT};
340029dc:	f107 0320 	add.w	r3, r7, #32
340029e0:	2200      	movs	r2, #0
340029e2:	601a      	str	r2, [r3, #0]
340029e4:	605a      	str	r2, [r3, #4]
340029e6:	4b34      	ldr	r3, [pc, #208]	@ (34002ab8 <UART_MspInit+0xe4>)
340029e8:	623b      	str	r3, [r7, #32]
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT};
340029ea:	f107 0318 	add.w	r3, r7, #24
340029ee:	2200      	movs	r2, #0
340029f0:	601a      	str	r2, [r3, #0]
340029f2:	605a      	str	r2, [r3, #4]
340029f4:	4b31      	ldr	r3, [pc, #196]	@ (34002abc <UART_MspInit+0xe8>)
340029f6:	61bb      	str	r3, [r7, #24]
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN};
340029f8:	2300      	movs	r3, #0
340029fa:	617b      	str	r3, [r7, #20]
340029fc:	2320      	movs	r3, #32
340029fe:	82bb      	strh	r3, [r7, #20]
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN};
34002a00:	2300      	movs	r3, #0
34002a02:	613b      	str	r3, [r7, #16]
34002a04:	2340      	movs	r3, #64	@ 0x40
34002a06:	823b      	strh	r3, [r7, #16]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
34002a08:	2307      	movs	r3, #7
34002a0a:	81bb      	strh	r3, [r7, #12]
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
34002a0c:	2307      	movs	r3, #7
34002a0e:	813b      	strh	r3, [r7, #8]
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
34002a10:	687b      	ldr	r3, [r7, #4]
34002a12:	681b      	ldr	r3, [r3, #0]
34002a14:	4a2a      	ldr	r2, [pc, #168]	@ (34002ac0 <UART_MspInit+0xec>)
34002a16:	4293      	cmp	r3, r2
34002a18:	d14a      	bne.n	34002ab0 <UART_MspInit+0xdc>
  {
    COM = COM1;
34002a1a:	2300      	movs	r3, #0
34002a1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
34002a20:	2010      	movs	r0, #16
34002a22:	f7ff ff09 	bl	34002838 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
34002a26:	2008      	movs	r0, #8
34002a28:	f7ff ff06 	bl	34002838 <LL_AHB4_GRP1_EnableClock>
    COM1_CLK_ENABLE();
34002a2c:	2010      	movs	r0, #16
34002a2e:	f7ff ff19 	bl	34002864 <LL_APB2_GRP1_EnableClock>
  {
      return;
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
34002a32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a36:	005b      	lsls	r3, r3, #1
34002a38:	3340      	adds	r3, #64	@ 0x40
34002a3a:	443b      	add	r3, r7
34002a3c:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
34002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
34002a42:	2302      	movs	r3, #2
34002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
34002a46:	2302      	movs	r3, #2
34002a48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_Init.Pull      = GPIO_PULLUP;
34002a4a:	2301      	movs	r3, #1
34002a4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_Init.Alternate = COM_TX_AF[COM];
34002a4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a52:	3340      	adds	r3, #64	@ 0x40
34002a54:	443b      	add	r3, r7
34002a56:	f813 3c34 	ldrb.w	r3, [r3, #-52]
34002a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34002a5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a60:	009b      	lsls	r3, r3, #2
34002a62:	3340      	adds	r3, #64	@ 0x40
34002a64:	443b      	add	r3, r7
34002a66:	f853 3c20 	ldr.w	r3, [r3, #-32]
34002a6a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
34002a6e:	4611      	mov	r1, r2
34002a70:	4618      	mov	r0, r3
34002a72:	f002 ffc5 	bl	34005a00 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34002a76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a7a:	005b      	lsls	r3, r3, #1
34002a7c:	3340      	adds	r3, #64	@ 0x40
34002a7e:	443b      	add	r3, r7
34002a80:	f833 3c30 	ldrh.w	r3, [r3, #-48]
34002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = COM_RX_AF[COM];
34002a86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a8a:	3340      	adds	r3, #64	@ 0x40
34002a8c:	443b      	add	r3, r7
34002a8e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
34002a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34002a94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a98:	009b      	lsls	r3, r3, #2
34002a9a:	3340      	adds	r3, #64	@ 0x40
34002a9c:	443b      	add	r3, r7
34002a9e:	f853 3c28 	ldr.w	r3, [r3, #-40]
34002aa2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
34002aa6:	4611      	mov	r1, r2
34002aa8:	4618      	mov	r0, r3
34002aaa:	f002 ffa9 	bl	34005a00 <HAL_GPIO_Init>
34002aae:	e000      	b.n	34002ab2 <UART_MspInit+0xde>
      return;
34002ab0:	bf00      	nop
}
34002ab2:	3740      	adds	r7, #64	@ 0x40
34002ab4:	46bd      	mov	sp, r7
34002ab6:	bd80      	pop	{r7, pc}
34002ab8:	56021000 	.word	0x56021000
34002abc:	56020c00 	.word	0x56020c00
34002ac0:	52001000 	.word	0x52001000

34002ac4 <LL_AHB4_GRP1_EnableClock>:
{
34002ac4:	b480      	push	{r7}
34002ac6:	b085      	sub	sp, #20
34002ac8:	af00      	add	r7, sp, #0
34002aca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34002acc:	4a07      	ldr	r2, [pc, #28]	@ (34002aec <LL_AHB4_GRP1_EnableClock+0x28>)
34002ace:	687b      	ldr	r3, [r7, #4]
34002ad0:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34002ad4:	4b05      	ldr	r3, [pc, #20]	@ (34002aec <LL_AHB4_GRP1_EnableClock+0x28>)
34002ad6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34002ada:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002adc:	68fb      	ldr	r3, [r7, #12]
}
34002ade:	bf00      	nop
34002ae0:	3714      	adds	r7, #20
34002ae2:	46bd      	mov	sp, r7
34002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
34002ae8:	4770      	bx	lr
34002aea:	bf00      	nop
34002aec:	56028000 	.word	0x56028000

34002af0 <LL_AHB5_GRP1_EnableClock>:
{
34002af0:	b480      	push	{r7}
34002af2:	b085      	sub	sp, #20
34002af4:	af00      	add	r7, sp, #0
34002af6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34002af8:	4a07      	ldr	r2, [pc, #28]	@ (34002b18 <LL_AHB5_GRP1_EnableClock+0x28>)
34002afa:	687b      	ldr	r3, [r7, #4]
34002afc:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34002b00:	4b05      	ldr	r3, [pc, #20]	@ (34002b18 <LL_AHB5_GRP1_EnableClock+0x28>)
34002b02:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34002b06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002b08:	68fb      	ldr	r3, [r7, #12]
}
34002b0a:	bf00      	nop
34002b0c:	3714      	adds	r7, #20
34002b0e:	46bd      	mov	sp, r7
34002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b14:	4770      	bx	lr
34002b16:	bf00      	nop
34002b18:	56028000 	.word	0x56028000

34002b1c <LL_AHB5_GRP1_ForceReset>:
{
34002b1c:	b480      	push	{r7}
34002b1e:	b083      	sub	sp, #12
34002b20:	af00      	add	r7, sp, #0
34002b22:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34002b24:	4a04      	ldr	r2, [pc, #16]	@ (34002b38 <LL_AHB5_GRP1_ForceReset+0x1c>)
34002b26:	687b      	ldr	r3, [r7, #4]
34002b28:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
34002b2c:	bf00      	nop
34002b2e:	370c      	adds	r7, #12
34002b30:	46bd      	mov	sp, r7
34002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b36:	4770      	bx	lr
34002b38:	56028000 	.word	0x56028000

34002b3c <LL_AHB5_GRP1_ReleaseReset>:
{
34002b3c:	b480      	push	{r7}
34002b3e:	b083      	sub	sp, #12
34002b40:	af00      	add	r7, sp, #0
34002b42:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34002b44:	4b06      	ldr	r3, [pc, #24]	@ (34002b60 <LL_AHB5_GRP1_ReleaseReset+0x24>)
34002b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34002b4a:	461a      	mov	r2, r3
34002b4c:	687b      	ldr	r3, [r7, #4]
34002b4e:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
34002b52:	bf00      	nop
34002b54:	370c      	adds	r7, #12
34002b56:	46bd      	mov	sp, r7
34002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b5c:	4770      	bx	lr
34002b5e:	bf00      	nop
34002b60:	56028000 	.word	0x56028000

34002b64 <BSP_XSPI_NOR_Init>:
  * @param  Instance   XSPI Instance
  * @param  Init       XSPI Init structure
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_Init(uint32_t Instance, BSP_XSPI_NOR_Init_t *Init)
{
34002b64:	b590      	push	{r4, r7, lr}
34002b66:	b095      	sub	sp, #84	@ 0x54
34002b68:	af00      	add	r7, sp, #0
34002b6a:	6078      	str	r0, [r7, #4]
34002b6c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_XSPI_NOR_Info_t pInfo;
  MX_XSPI_InitTypeDef xspi_init;

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002b6e:	687b      	ldr	r3, [r7, #4]
34002b70:	2b00      	cmp	r3, #0
34002b72:	d003      	beq.n	34002b7c <BSP_XSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002b74:	f06f 0301 	mvn.w	r3, #1
34002b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002b7a:	e080      	b.n	34002c7e <BSP_XSPI_NOR_Init+0x11a>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34002b7c:	4947      	ldr	r1, [pc, #284]	@ (34002c9c <BSP_XSPI_NOR_Init+0x138>)
34002b7e:	687a      	ldr	r2, [r7, #4]
34002b80:	4613      	mov	r3, r2
34002b82:	005b      	lsls	r3, r3, #1
34002b84:	4413      	add	r3, r2
34002b86:	440b      	add	r3, r1
34002b88:	781b      	ldrb	r3, [r3, #0]
34002b8a:	2b00      	cmp	r3, #0
34002b8c:	d175      	bne.n	34002c7a <BSP_XSPI_NOR_Init+0x116>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp XSPI initialization */
      XSPI_NOR_MspInit(&hxspi_nor[Instance]);
34002b8e:	687b      	ldr	r3, [r7, #4]
34002b90:	2264      	movs	r2, #100	@ 0x64
34002b92:	fb02 f303 	mul.w	r3, r2, r3
34002b96:	4a42      	ldr	r2, [pc, #264]	@ (34002ca0 <BSP_XSPI_NOR_Init+0x13c>)
34002b98:	4413      	add	r3, r2
34002b9a:	4618      	mov	r0, r3
34002b9c:	f000 f9b6 	bl	34002f0c <XSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
34002ba0:	f107 031c 	add.w	r3, r7, #28
34002ba4:	4618      	mov	r0, r3
34002ba6:	f7ff f9a5 	bl	34001ef4 <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      xspi_init.ClockPrescaler = 3;
34002baa:	2303      	movs	r3, #3
34002bac:	613b      	str	r3, [r7, #16]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
34002bae:	69fb      	ldr	r3, [r7, #28]
34002bb0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34002bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34002bb4:	fa93 f3a3 	rbit	r3, r3
34002bb8:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
34002bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34002bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
34002bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34002bc0:	2b00      	cmp	r3, #0
34002bc2:	d101      	bne.n	34002bc8 <BSP_XSPI_NOR_Init+0x64>
  {
    return 32U;
34002bc4:	2320      	movs	r3, #32
34002bc6:	e003      	b.n	34002bd0 <BSP_XSPI_NOR_Init+0x6c>
  }
  return __builtin_clz(value);
34002bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34002bca:	fab3 f383 	clz	r3, r3
34002bce:	b2db      	uxtb	r3, r3
34002bd0:	60fb      	str	r3, [r7, #12]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34002bd2:	2300      	movs	r3, #0
34002bd4:	617b      	str	r3, [r7, #20]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34002bd6:	683b      	ldr	r3, [r7, #0]
34002bd8:	785b      	ldrb	r3, [r3, #1]
34002bda:	61bb      	str	r3, [r7, #24]

      /* STM32 XSPI interface initialization */
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34002bdc:	687b      	ldr	r3, [r7, #4]
34002bde:	2264      	movs	r2, #100	@ 0x64
34002be0:	fb02 f303 	mul.w	r3, r2, r3
34002be4:	4a2e      	ldr	r2, [pc, #184]	@ (34002ca0 <BSP_XSPI_NOR_Init+0x13c>)
34002be6:	4413      	add	r3, r2
34002be8:	f107 020c 	add.w	r2, r7, #12
34002bec:	4611      	mov	r1, r2
34002bee:	4618      	mov	r0, r3
34002bf0:	f000 f858 	bl	34002ca4 <MX_XSPI_NOR_Init>
34002bf4:	4603      	mov	r3, r0
34002bf6:	2b00      	cmp	r3, #0
34002bf8:	d003      	beq.n	34002c02 <BSP_XSPI_NOR_Init+0x9e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
34002bfa:	f06f 0303 	mvn.w	r3, #3
34002bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002c00:	e03d      	b.n	34002c7e <BSP_XSPI_NOR_Init+0x11a>
      }
      /* XSPI memory reset */
      else if (XSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
34002c02:	6878      	ldr	r0, [r7, #4]
34002c04:	f000 fa50 	bl	340030a8 <XSPI_NOR_ResetMemory>
34002c08:	4603      	mov	r3, r0
34002c0a:	2b00      	cmp	r3, #0
34002c0c:	d003      	beq.n	34002c16 <BSP_XSPI_NOR_Init+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002c0e:	f06f 0304 	mvn.w	r3, #4
34002c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002c14:	e033      	b.n	34002c7e <BSP_XSPI_NOR_Init+0x11a>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002c16:	687b      	ldr	r3, [r7, #4]
34002c18:	2264      	movs	r2, #100	@ 0x64
34002c1a:	fb02 f303 	mul.w	r3, r2, r3
34002c1e:	4a20      	ldr	r2, [pc, #128]	@ (34002ca0 <BSP_XSPI_NOR_Init+0x13c>)
34002c20:	1898      	adds	r0, r3, r2
34002c22:	491e      	ldr	r1, [pc, #120]	@ (34002c9c <BSP_XSPI_NOR_Init+0x138>)
34002c24:	687a      	ldr	r2, [r7, #4]
34002c26:	4613      	mov	r3, r2
34002c28:	005b      	lsls	r3, r3, #1
34002c2a:	4413      	add	r3, r2
34002c2c:	440b      	add	r3, r1
34002c2e:	3301      	adds	r3, #1
34002c30:	7819      	ldrb	r1, [r3, #0]
34002c32:	4c1a      	ldr	r4, [pc, #104]	@ (34002c9c <BSP_XSPI_NOR_Init+0x138>)
34002c34:	687a      	ldr	r2, [r7, #4]
34002c36:	4613      	mov	r3, r2
34002c38:	005b      	lsls	r3, r3, #1
34002c3a:	4413      	add	r3, r2
34002c3c:	4423      	add	r3, r4
34002c3e:	3302      	adds	r3, #2
34002c40:	781b      	ldrb	r3, [r3, #0]
34002c42:	461a      	mov	r2, r3
34002c44:	f7ff f985 	bl	34001f52 <MX25UM51245G_AutoPollingMemReady>
34002c48:	4603      	mov	r3, r0
34002c4a:	2b00      	cmp	r3, #0
34002c4c:	d003      	beq.n	34002c56 <BSP_XSPI_NOR_Init+0xf2>
                                                Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002c4e:	f06f 0304 	mvn.w	r3, #4
34002c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002c54:	e013      	b.n	34002c7e <BSP_XSPI_NOR_Init+0x11a>
      }
      /* Configure the memory */
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
34002c56:	683b      	ldr	r3, [r7, #0]
34002c58:	7819      	ldrb	r1, [r3, #0]
34002c5a:	683b      	ldr	r3, [r7, #0]
34002c5c:	785b      	ldrb	r3, [r3, #1]
34002c5e:	461a      	mov	r2, r3
34002c60:	6878      	ldr	r0, [r7, #4]
34002c62:	f000 f8c7 	bl	34002df4 <BSP_XSPI_NOR_ConfigFlash>
34002c66:	4603      	mov	r3, r0
34002c68:	2b00      	cmp	r3, #0
34002c6a:	d003      	beq.n	34002c74 <BSP_XSPI_NOR_Init+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002c6c:	f06f 0304 	mvn.w	r3, #4
34002c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002c72:	e004      	b.n	34002c7e <BSP_XSPI_NOR_Init+0x11a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
34002c74:	2300      	movs	r3, #0
34002c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002c78:	e001      	b.n	34002c7e <BSP_XSPI_NOR_Init+0x11a>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
34002c7a:	2300      	movs	r3, #0
34002c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
34002c7e:	687b      	ldr	r3, [r7, #4]
34002c80:	2264      	movs	r2, #100	@ 0x64
34002c82:	fb02 f303 	mul.w	r3, r2, r3
34002c86:	4a06      	ldr	r2, [pc, #24]	@ (34002ca0 <BSP_XSPI_NOR_Init+0x13c>)
34002c88:	4413      	add	r3, r2
34002c8a:	2100      	movs	r1, #0
34002c8c:	4618      	mov	r0, r3
34002c8e:	f014 fd8b 	bl	340177a8 <HAL_XSPI_SetClockPrescaler>
  /* Return BSP status */
  return ret;
34002c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
34002c94:	4618      	mov	r0, r3
34002c96:	3754      	adds	r7, #84	@ 0x54
34002c98:	46bd      	mov	sp, r7
34002c9a:	bd90      	pop	{r4, r7, pc}
34002c9c:	34020abc 	.word	0x34020abc
34002ca0:	34020a58 	.word	0x34020a58

34002ca4 <MX_XSPI_NOR_Init>:
  * @param  hxspi          XSPI handle
  * @param  Init           XSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_XSPI_NOR_Init(XSPI_HandleTypeDef *hxspi, MX_XSPI_InitTypeDef *Init)
{
34002ca4:	b580      	push	{r7, lr}
34002ca6:	b082      	sub	sp, #8
34002ca8:	af00      	add	r7, sp, #0
34002caa:	6078      	str	r0, [r7, #4]
34002cac:	6039      	str	r1, [r7, #0]
  /* XSPI initialization */
  hxspi->Instance = XSPI2;
34002cae:	687b      	ldr	r3, [r7, #4]
34002cb0:	4a1e      	ldr	r2, [pc, #120]	@ (34002d2c <MX_XSPI_NOR_Init+0x88>)
34002cb2:	601a      	str	r2, [r3, #0]

  hxspi->Init.FifoThresholdByte       = 4;
34002cb4:	687b      	ldr	r3, [r7, #4]
34002cb6:	2204      	movs	r2, #4
34002cb8:	605a      	str	r2, [r3, #4]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34002cba:	687b      	ldr	r3, [r7, #4]
34002cbc:	2200      	movs	r2, #0
34002cbe:	609a      	str	r2, [r3, #8]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34002cc0:	683b      	ldr	r3, [r7, #0]
34002cc2:	681a      	ldr	r2, [r3, #0]
34002cc4:	687b      	ldr	r3, [r7, #4]
34002cc6:	611a      	str	r2, [r3, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
34002cc8:	687b      	ldr	r3, [r7, #4]
34002cca:	2202      	movs	r2, #2
34002ccc:	615a      	str	r2, [r3, #20]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
34002cce:	687b      	ldr	r3, [r7, #4]
34002cd0:	2200      	movs	r2, #0
34002cd2:	619a      	str	r2, [r3, #24]
  hxspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
34002cd4:	687b      	ldr	r3, [r7, #4]
34002cd6:	2200      	movs	r2, #0
34002cd8:	61da      	str	r2, [r3, #28]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
34002cda:	687b      	ldr	r3, [r7, #4]
34002cdc:	2200      	movs	r2, #0
34002cde:	621a      	str	r2, [r3, #32]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34002ce0:	683b      	ldr	r3, [r7, #0]
34002ce2:	685a      	ldr	r2, [r3, #4]
34002ce4:	687b      	ldr	r3, [r7, #4]
34002ce6:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34002ce8:	683b      	ldr	r3, [r7, #0]
34002cea:	689a      	ldr	r2, [r3, #8]
34002cec:	687b      	ldr	r3, [r7, #4]
34002cee:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi->Init.ChipSelectBoundary      = 0;
34002cf0:	687b      	ldr	r3, [r7, #4]
34002cf2:	2200      	movs	r2, #0
34002cf4:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined (OCTOSPI_DCR1_DLYBYP)
  hxspi->Init.DelayBlockBypass           = HAL_XSPI_DELAY_BLOCK_BYPASS;
#endif /* OCTOSPI_DCR1_DLYBYP */

  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34002cf6:	683b      	ldr	r3, [r7, #0]
34002cf8:	68db      	ldr	r3, [r3, #12]
34002cfa:	2b01      	cmp	r3, #1
34002cfc:	d108      	bne.n	34002d10 <MX_XSPI_NOR_Init+0x6c>
  {
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34002cfe:	687b      	ldr	r3, [r7, #4]
34002d00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002d04:	60da      	str	r2, [r3, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34002d06:	687b      	ldr	r3, [r7, #4]
34002d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
34002d0e:	e005      	b.n	34002d1c <MX_XSPI_NOR_Init+0x78>
  }
  else
  {
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34002d10:	687b      	ldr	r3, [r7, #4]
34002d12:	2200      	movs	r2, #0
34002d14:	60da      	str	r2, [r3, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34002d16:	687b      	ldr	r3, [r7, #4]
34002d18:	2200      	movs	r2, #0
34002d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_XSPI_Init(hxspi);
34002d1c:	6878      	ldr	r0, [r7, #4]
34002d1e:	f013 fdb7 	bl	34016890 <HAL_XSPI_Init>
34002d22:	4603      	mov	r3, r0
}
34002d24:	4618      	mov	r0, r3
34002d26:	3708      	adds	r7, #8
34002d28:	46bd      	mov	sp, r7
34002d2a:	bd80      	pop	{r7, pc}
34002d2c:	5802a000 	.word	0x5802a000

34002d30 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the XSPI in memory-mapped mode
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
34002d30:	b580      	push	{r7, lr}
34002d32:	b084      	sub	sp, #16
34002d34:	af00      	add	r7, sp, #0
34002d36:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34002d38:	2300      	movs	r3, #0
34002d3a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002d3c:	687b      	ldr	r3, [r7, #4]
34002d3e:	2b00      	cmp	r3, #0
34002d40:	d003      	beq.n	34002d4a <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002d42:	f06f 0301 	mvn.w	r3, #1
34002d46:	60fb      	str	r3, [r7, #12]
34002d48:	e04b      	b.n	34002de2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
  }
  else
  {
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34002d4a:	4928      	ldr	r1, [pc, #160]	@ (34002dec <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002d4c:	687a      	ldr	r2, [r7, #4]
34002d4e:	4613      	mov	r3, r2
34002d50:	005b      	lsls	r3, r3, #1
34002d52:	4413      	add	r3, r2
34002d54:	440b      	add	r3, r1
34002d56:	3302      	adds	r3, #2
34002d58:	781b      	ldrb	r3, [r3, #0]
34002d5a:	2b00      	cmp	r3, #0
34002d5c:	d121      	bne.n	34002da2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x72>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002d5e:	687b      	ldr	r3, [r7, #4]
34002d60:	2264      	movs	r2, #100	@ 0x64
34002d62:	fb02 f303 	mul.w	r3, r2, r3
34002d66:	4a22      	ldr	r2, [pc, #136]	@ (34002df0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xc0>)
34002d68:	1898      	adds	r0, r3, r2
34002d6a:	4920      	ldr	r1, [pc, #128]	@ (34002dec <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002d6c:	687a      	ldr	r2, [r7, #4]
34002d6e:	4613      	mov	r3, r2
34002d70:	005b      	lsls	r3, r3, #1
34002d72:	4413      	add	r3, r2
34002d74:	440b      	add	r3, r1
34002d76:	3301      	adds	r3, #1
34002d78:	781b      	ldrb	r3, [r3, #0]
34002d7a:	2201      	movs	r2, #1
34002d7c:	4619      	mov	r1, r3
34002d7e:	f7ff f998 	bl	340020b2 <MX25UM51245G_EnableSTRMemoryMappedMode>
34002d82:	4603      	mov	r3, r0
34002d84:	2b00      	cmp	r3, #0
34002d86:	d003      	beq.n	34002d90 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x60>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002d88:	f06f 0304 	mvn.w	r3, #4
34002d8c:	60fb      	str	r3, [r7, #12]
34002d8e:	e028      	b.n	34002de2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update XSPI context if all operations are well done */
      {
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34002d90:	4916      	ldr	r1, [pc, #88]	@ (34002dec <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002d92:	687a      	ldr	r2, [r7, #4]
34002d94:	4613      	mov	r3, r2
34002d96:	005b      	lsls	r3, r3, #1
34002d98:	4413      	add	r3, r2
34002d9a:	440b      	add	r3, r1
34002d9c:	2202      	movs	r2, #2
34002d9e:	701a      	strb	r2, [r3, #0]
34002da0:	e01f      	b.n	34002de2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
34002da2:	687b      	ldr	r3, [r7, #4]
34002da4:	2264      	movs	r2, #100	@ 0x64
34002da6:	fb02 f303 	mul.w	r3, r2, r3
34002daa:	4a11      	ldr	r2, [pc, #68]	@ (34002df0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xc0>)
34002dac:	1898      	adds	r0, r3, r2
34002dae:	490f      	ldr	r1, [pc, #60]	@ (34002dec <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002db0:	687a      	ldr	r2, [r7, #4]
34002db2:	4613      	mov	r3, r2
34002db4:	005b      	lsls	r3, r3, #1
34002db6:	4413      	add	r3, r2
34002db8:	440b      	add	r3, r1
34002dba:	3301      	adds	r3, #1
34002dbc:	781b      	ldrb	r3, [r3, #0]
34002dbe:	4619      	mov	r1, r3
34002dc0:	f7ff fa21 	bl	34002206 <MX25UM51245G_EnableDTRMemoryMappedMode>
34002dc4:	4603      	mov	r3, r0
34002dc6:	2b00      	cmp	r3, #0
34002dc8:	d003      	beq.n	34002dd2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xa2>
                                                 Xspi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002dca:	f06f 0304 	mvn.w	r3, #4
34002dce:	60fb      	str	r3, [r7, #12]
34002dd0:	e007      	b.n	34002de2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update XSPI context if all operations are well done */
      {
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34002dd2:	4906      	ldr	r1, [pc, #24]	@ (34002dec <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002dd4:	687a      	ldr	r2, [r7, #4]
34002dd6:	4613      	mov	r3, r2
34002dd8:	005b      	lsls	r3, r3, #1
34002dda:	4413      	add	r3, r2
34002ddc:	440b      	add	r3, r1
34002dde:	2202      	movs	r2, #2
34002de0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
34002de2:	68fb      	ldr	r3, [r7, #12]
}
34002de4:	4618      	mov	r0, r3
34002de6:	3710      	adds	r7, #16
34002de8:	46bd      	mov	sp, r7
34002dea:	bd80      	pop	{r7, pc}
34002dec:	34020abc 	.word	0x34020abc
34002df0:	34020a58 	.word	0x34020a58

34002df4 <BSP_XSPI_NOR_ConfigFlash>:
  * @param  Mode      XSPI mode
  * @param  Rate      XSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_ConfigFlash(uint32_t Instance, BSP_XSPI_NOR_Interface_t Mode, BSP_XSPI_NOR_Transfer_t Rate)
{
34002df4:	b580      	push	{r7, lr}
34002df6:	b084      	sub	sp, #16
34002df8:	af00      	add	r7, sp, #0
34002dfa:	6078      	str	r0, [r7, #4]
34002dfc:	460b      	mov	r3, r1
34002dfe:	70fb      	strb	r3, [r7, #3]
34002e00:	4613      	mov	r3, r2
34002e02:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
34002e04:	2300      	movs	r3, #0
34002e06:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002e08:	687b      	ldr	r3, [r7, #4]
34002e0a:	2b00      	cmp	r3, #0
34002e0c:	d003      	beq.n	34002e16 <BSP_XSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002e0e:	f06f 0301 	mvn.w	r3, #1
34002e12:	60fb      	str	r3, [r7, #12]
34002e14:	e072      	b.n	34002efc <BSP_XSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
34002e16:	493c      	ldr	r1, [pc, #240]	@ (34002f08 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002e18:	687a      	ldr	r2, [r7, #4]
34002e1a:	4613      	mov	r3, r2
34002e1c:	005b      	lsls	r3, r3, #1
34002e1e:	4413      	add	r3, r2
34002e20:	440b      	add	r3, r1
34002e22:	781b      	ldrb	r3, [r3, #0]
34002e24:	2b02      	cmp	r3, #2
34002e26:	d103      	bne.n	34002e30 <BSP_XSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
34002e28:	f06f 0319 	mvn.w	r3, #25
34002e2c:	60fb      	str	r3, [r7, #12]
34002e2e:	e065      	b.n	34002efc <BSP_XSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
34002e30:	4935      	ldr	r1, [pc, #212]	@ (34002f08 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002e32:	687a      	ldr	r2, [r7, #4]
34002e34:	4613      	mov	r3, r2
34002e36:	005b      	lsls	r3, r3, #1
34002e38:	4413      	add	r3, r2
34002e3a:	440b      	add	r3, r1
34002e3c:	3301      	adds	r3, #1
34002e3e:	781b      	ldrb	r3, [r3, #0]
34002e40:	2b01      	cmp	r3, #1
34002e42:	d12b      	bne.n	34002e9c <BSP_XSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_XSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
34002e44:	78fb      	ldrb	r3, [r7, #3]
34002e46:	2b01      	cmp	r3, #1
34002e48:	d10a      	bne.n	34002e60 <BSP_XSPI_NOR_ConfigFlash+0x6c>
34002e4a:	492f      	ldr	r1, [pc, #188]	@ (34002f08 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002e4c:	687a      	ldr	r2, [r7, #4]
34002e4e:	4613      	mov	r3, r2
34002e50:	005b      	lsls	r3, r3, #1
34002e52:	4413      	add	r3, r2
34002e54:	440b      	add	r3, r1
34002e56:	3302      	adds	r3, #2
34002e58:	781b      	ldrb	r3, [r3, #0]
34002e5a:	78ba      	ldrb	r2, [r7, #2]
34002e5c:	429a      	cmp	r2, r3
34002e5e:	d02d      	beq.n	34002ebc <BSP_XSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = XSPI_NOR_ExitOPIMode(Instance);
34002e60:	6878      	ldr	r0, [r7, #4]
34002e62:	f000 fb7d 	bl	34003560 <XSPI_NOR_ExitOPIMode>
34002e66:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
34002e68:	68fb      	ldr	r3, [r7, #12]
34002e6a:	2b00      	cmp	r3, #0
34002e6c:	d126      	bne.n	34002ebc <BSP_XSPI_NOR_ConfigFlash+0xc8>
34002e6e:	78fb      	ldrb	r3, [r7, #3]
34002e70:	2b01      	cmp	r3, #1
34002e72:	d123      	bne.n	34002ebc <BSP_XSPI_NOR_ConfigFlash+0xc8>
            {

              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34002e74:	4924      	ldr	r1, [pc, #144]	@ (34002f08 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002e76:	687a      	ldr	r2, [r7, #4]
34002e78:	4613      	mov	r3, r2
34002e7a:	005b      	lsls	r3, r3, #1
34002e7c:	4413      	add	r3, r2
34002e7e:	440b      	add	r3, r1
34002e80:	3302      	adds	r3, #2
34002e82:	781b      	ldrb	r3, [r3, #0]
34002e84:	2b00      	cmp	r3, #0
34002e86:	d104      	bne.n	34002e92 <BSP_XSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = XSPI_NOR_EnterDOPIMode(Instance);
34002e88:	6878      	ldr	r0, [r7, #4]
34002e8a:	f000 f9ad 	bl	340031e8 <XSPI_NOR_EnterDOPIMode>
34002e8e:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = XSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
34002e90:	e014      	b.n	34002ebc <BSP_XSPI_NOR_ConfigFlash+0xc8>
                ret = XSPI_NOR_EnterSOPIMode(Instance);
34002e92:	6878      	ldr	r0, [r7, #4]
34002e94:	f000 fa98 	bl	340033c8 <XSPI_NOR_EnterSOPIMode>
34002e98:	60f8      	str	r0, [r7, #12]
          break;
34002e9a:	e00f      	b.n	34002ebc <BSP_XSPI_NOR_ConfigFlash+0xc8>

        case BSP_XSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
34002e9c:	78fb      	ldrb	r3, [r7, #3]
34002e9e:	2b01      	cmp	r3, #1
34002ea0:	d10e      	bne.n	34002ec0 <BSP_XSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
34002ea2:	78bb      	ldrb	r3, [r7, #2]
34002ea4:	2b00      	cmp	r3, #0
34002ea6:	d104      	bne.n	34002eb2 <BSP_XSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34002ea8:	6878      	ldr	r0, [r7, #4]
34002eaa:	f000 fa8d 	bl	340033c8 <XSPI_NOR_EnterSOPIMode>
34002eae:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = XSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
34002eb0:	e006      	b.n	34002ec0 <BSP_XSPI_NOR_ConfigFlash+0xcc>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
34002eb2:	6878      	ldr	r0, [r7, #4]
34002eb4:	f000 f998 	bl	340031e8 <XSPI_NOR_EnterDOPIMode>
34002eb8:	60f8      	str	r0, [r7, #12]
          break;
34002eba:	e001      	b.n	34002ec0 <BSP_XSPI_NOR_ConfigFlash+0xcc>
          break;
34002ebc:	bf00      	nop
34002ebe:	e000      	b.n	34002ec2 <BSP_XSPI_NOR_ConfigFlash+0xce>
          break;
34002ec0:	bf00      	nop
      }

      /* Update XSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
34002ec2:	68fb      	ldr	r3, [r7, #12]
34002ec4:	2b00      	cmp	r3, #0
34002ec6:	d119      	bne.n	34002efc <BSP_XSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34002ec8:	490f      	ldr	r1, [pc, #60]	@ (34002f08 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002eca:	687a      	ldr	r2, [r7, #4]
34002ecc:	4613      	mov	r3, r2
34002ece:	005b      	lsls	r3, r3, #1
34002ed0:	4413      	add	r3, r2
34002ed2:	440b      	add	r3, r1
34002ed4:	2201      	movs	r2, #1
34002ed6:	701a      	strb	r2, [r3, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
34002ed8:	490b      	ldr	r1, [pc, #44]	@ (34002f08 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002eda:	687a      	ldr	r2, [r7, #4]
34002edc:	4613      	mov	r3, r2
34002ede:	005b      	lsls	r3, r3, #1
34002ee0:	4413      	add	r3, r2
34002ee2:	440b      	add	r3, r1
34002ee4:	3301      	adds	r3, #1
34002ee6:	78fa      	ldrb	r2, [r7, #3]
34002ee8:	701a      	strb	r2, [r3, #0]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34002eea:	4907      	ldr	r1, [pc, #28]	@ (34002f08 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002eec:	687a      	ldr	r2, [r7, #4]
34002eee:	4613      	mov	r3, r2
34002ef0:	005b      	lsls	r3, r3, #1
34002ef2:	4413      	add	r3, r2
34002ef4:	440b      	add	r3, r1
34002ef6:	3302      	adds	r3, #2
34002ef8:	78ba      	ldrb	r2, [r7, #2]
34002efa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
34002efc:	68fb      	ldr	r3, [r7, #12]
}
34002efe:	4618      	mov	r0, r3
34002f00:	3710      	adds	r7, #16
34002f02:	46bd      	mov	sp, r7
34002f04:	bd80      	pop	{r7, pc}
34002f06:	bf00      	nop
34002f08:	34020abc 	.word	0x34020abc

34002f0c <XSPI_NOR_MspInit>:
  * @brief  Initializes the XSPI MSP.
  * @param  hxspi XSPI handle
  * @retval None
  */
static void XSPI_NOR_MspInit(XSPI_HandleTypeDef *hxspi)
{
34002f0c:	b580      	push	{r7, lr}
34002f0e:	b088      	sub	sp, #32
34002f10:	af00      	add	r7, sp, #0
34002f12:	6078      	str	r0, [r7, #4]

  /* hxspi unused argument(s) compilation warning */
  UNUSED(hxspi);

  /* Enable the XSPI memory interface clock */
  XSPI_CLK_ENABLE();
34002f14:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002f18:	f7ff fdea 	bl	34002af0 <LL_AHB5_GRP1_EnableClock>

  /* XSPI power enable */
  __HAL_RCC_PWR_CLK_ENABLE();
34002f1c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34002f20:	f7ff fdd0 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
34002f24:	f003 f968 	bl	340061f8 <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34002f28:	2101      	movs	r1, #1
34002f2a:	2002      	movs	r0, #2
34002f2c:	f003 f8f4 	bl	34006118 <HAL_PWREx_ConfigVddIORange>

  /* Reset the XSPI memory interface */
  XSPI_FORCE_RESET();
34002f30:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002f34:	f7ff fdf2 	bl	34002b1c <LL_AHB5_GRP1_ForceReset>
  XSPI_RELEASE_RESET();
34002f38:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002f3c:	f7ff fdfe 	bl	34002b3c <LL_AHB5_GRP1_ReleaseReset>

  /* Enable GPIO clocks */
  XSPI_CLK_GPIO_CLK_ENABLE();
34002f40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f44:	f7ff fdbe 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  XSPI_DQS_GPIO_CLK_ENABLE();
34002f48:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f4c:	f7ff fdba 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  XSPI_CS_GPIO_CLK_ENABLE();
34002f50:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f54:	f7ff fdb6 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
34002f58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f5c:	f7ff fdb2 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
34002f60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f64:	f7ff fdae 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
34002f68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f6c:	f7ff fdaa 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
34002f70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f74:	f7ff fda6 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
34002f78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f7c:	f7ff fda2 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
34002f80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f84:	f7ff fd9e 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
34002f88:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f8c:	f7ff fd9a 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34002f90:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f94:	f7ff fd96 	bl	34002ac4 <LL_AHB4_GRP1_EnableClock>

  /* XSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
34002f98:	2302      	movs	r3, #2
34002f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34002f9c:	2302      	movs	r3, #2
34002f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
34002fa0:	2301      	movs	r3, #1
34002fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34002fa4:	2303      	movs	r3, #3
34002fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34002fa8:	2309      	movs	r3, #9
34002faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34002fac:	f107 030c 	add.w	r3, r7, #12
34002fb0:	4619      	mov	r1, r3
34002fb2:	483c      	ldr	r0, [pc, #240]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
34002fb4:	f002 fd24 	bl	34005a00 <HAL_GPIO_Init>

  /* XSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34002fb8:	2340      	movs	r3, #64	@ 0x40
34002fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34002fbc:	2300      	movs	r3, #0
34002fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
34002fc0:	2309      	movs	r3, #9
34002fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34002fc4:	f107 030c 	add.w	r3, r7, #12
34002fc8:	4619      	mov	r1, r3
34002fca:	4836      	ldr	r0, [pc, #216]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
34002fcc:	f002 fd18 	bl	34005a00 <HAL_GPIO_Init>

  /* XSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34002fd0:	2304      	movs	r3, #4
34002fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
34002fd4:	2309      	movs	r3, #9
34002fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34002fd8:	f107 030c 	add.w	r3, r7, #12
34002fdc:	4619      	mov	r1, r3
34002fde:	4831      	ldr	r0, [pc, #196]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
34002fe0:	f002 fd0e 	bl	34005a00 <HAL_GPIO_Init>

  /* XSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34002fe4:	2308      	movs	r3, #8
34002fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
34002fe8:	2309      	movs	r3, #9
34002fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34002fec:	f107 030c 	add.w	r3, r7, #12
34002ff0:	4619      	mov	r1, r3
34002ff2:	482c      	ldr	r0, [pc, #176]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
34002ff4:	f002 fd04 	bl	34005a00 <HAL_GPIO_Init>

  /* XSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34002ff8:	2310      	movs	r3, #16
34002ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
34002ffc:	2309      	movs	r3, #9
34002ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34003000:	f107 030c 	add.w	r3, r7, #12
34003004:	4619      	mov	r1, r3
34003006:	4827      	ldr	r0, [pc, #156]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
34003008:	f002 fcfa 	bl	34005a00 <HAL_GPIO_Init>

  /* XSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
3400300c:	2320      	movs	r3, #32
3400300e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
34003010:	2309      	movs	r3, #9
34003012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34003014:	f107 030c 	add.w	r3, r7, #12
34003018:	4619      	mov	r1, r3
3400301a:	4822      	ldr	r0, [pc, #136]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
3400301c:	f002 fcf0 	bl	34005a00 <HAL_GPIO_Init>

  /* XSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34003020:	f44f 7380 	mov.w	r3, #256	@ 0x100
34003024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
34003026:	2309      	movs	r3, #9
34003028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
3400302a:	f107 030c 	add.w	r3, r7, #12
3400302e:	4619      	mov	r1, r3
34003030:	481c      	ldr	r0, [pc, #112]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
34003032:	f002 fce5 	bl	34005a00 <HAL_GPIO_Init>

  /* XSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34003036:	f44f 7300 	mov.w	r3, #512	@ 0x200
3400303a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
3400303c:	2309      	movs	r3, #9
3400303e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34003040:	f107 030c 	add.w	r3, r7, #12
34003044:	4619      	mov	r1, r3
34003046:	4817      	ldr	r0, [pc, #92]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
34003048:	f002 fcda 	bl	34005a00 <HAL_GPIO_Init>

  /* XSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
3400304c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34003050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
34003052:	2309      	movs	r3, #9
34003054:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34003056:	f107 030c 	add.w	r3, r7, #12
3400305a:	4619      	mov	r1, r3
3400305c:	4811      	ldr	r0, [pc, #68]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
3400305e:	f002 fccf 	bl	34005a00 <HAL_GPIO_Init>

  /* XSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34003062:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34003066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
34003068:	2309      	movs	r3, #9
3400306a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
3400306c:	f107 030c 	add.w	r3, r7, #12
34003070:	4619      	mov	r1, r3
34003072:	480c      	ldr	r0, [pc, #48]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
34003074:	f002 fcc4 	bl	34005a00 <HAL_GPIO_Init>

  /* XSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
34003078:	2301      	movs	r3, #1
3400307a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
3400307c:	2309      	movs	r3, #9
3400307e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34003080:	f107 030c 	add.w	r3, r7, #12
34003084:	4619      	mov	r1, r3
34003086:	4807      	ldr	r0, [pc, #28]	@ (340030a4 <XSPI_NOR_MspInit+0x198>)
34003088:	f002 fcba 	bl	34005a00 <HAL_GPIO_Init>

  /* Configure the NVIC for XSPI */
  /* NVIC configuration for XSPI interrupt */
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
3400308c:	2200      	movs	r2, #0
3400308e:	210f      	movs	r1, #15
34003090:	20aa      	movs	r0, #170	@ 0xaa
34003092:	f001 f92b 	bl	340042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
34003096:	20aa      	movs	r0, #170	@ 0xaa
34003098:	f001 f982 	bl	340043a0 <HAL_NVIC_EnableIRQ>
}
3400309c:	bf00      	nop
3400309e:	3720      	adds	r7, #32
340030a0:	46bd      	mov	sp, r7
340030a2:	bd80      	pop	{r7, pc}
340030a4:	56023400 	.word	0x56023400

340030a8 <XSPI_NOR_ResetMemory>:
  * @brief  This function reset the XSPI memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_ResetMemory(uint32_t Instance)
{
340030a8:	b580      	push	{r7, lr}
340030aa:	b084      	sub	sp, #16
340030ac:	af00      	add	r7, sp, #0
340030ae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
340030b0:	2300      	movs	r3, #0
340030b2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340030b4:	687b      	ldr	r3, [r7, #4]
340030b6:	2b00      	cmp	r3, #0
340030b8:	d003      	beq.n	340030c2 <XSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
340030ba:	f06f 0301 	mvn.w	r3, #1
340030be:	60fb      	str	r3, [r7, #12]
340030c0:	e088      	b.n	340031d4 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340030c2:	687b      	ldr	r3, [r7, #4]
340030c4:	2264      	movs	r2, #100	@ 0x64
340030c6:	fb02 f303 	mul.w	r3, r2, r3
340030ca:	4a45      	ldr	r2, [pc, #276]	@ (340031e0 <XSPI_NOR_ResetMemory+0x138>)
340030cc:	4413      	add	r3, r2
340030ce:	2200      	movs	r2, #0
340030d0:	2100      	movs	r1, #0
340030d2:	4618      	mov	r0, r3
340030d4:	f7ff fb04 	bl	340026e0 <MX25UM51245G_ResetEnable>
340030d8:	4603      	mov	r3, r0
340030da:	2b00      	cmp	r3, #0
340030dc:	d003      	beq.n	340030e6 <XSPI_NOR_ResetMemory+0x3e>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340030de:	f06f 0304 	mvn.w	r3, #4
340030e2:	60fb      	str	r3, [r7, #12]
340030e4:	e076      	b.n	340031d4 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340030e6:	687b      	ldr	r3, [r7, #4]
340030e8:	2264      	movs	r2, #100	@ 0x64
340030ea:	fb02 f303 	mul.w	r3, r2, r3
340030ee:	4a3c      	ldr	r2, [pc, #240]	@ (340031e0 <XSPI_NOR_ResetMemory+0x138>)
340030f0:	4413      	add	r3, r2
340030f2:	2200      	movs	r2, #0
340030f4:	2100      	movs	r1, #0
340030f6:	4618      	mov	r0, r3
340030f8:	f7ff fb48 	bl	3400278c <MX25UM51245G_ResetMemory>
340030fc:	4603      	mov	r3, r0
340030fe:	2b00      	cmp	r3, #0
34003100:	d003      	beq.n	3400310a <XSPI_NOR_ResetMemory+0x62>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003102:	f06f 0304 	mvn.w	r3, #4
34003106:	60fb      	str	r3, [r7, #12]
34003108:	e064      	b.n	340031d4 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400310a:	687b      	ldr	r3, [r7, #4]
3400310c:	2264      	movs	r2, #100	@ 0x64
3400310e:	fb02 f303 	mul.w	r3, r2, r3
34003112:	4a33      	ldr	r2, [pc, #204]	@ (340031e0 <XSPI_NOR_ResetMemory+0x138>)
34003114:	4413      	add	r3, r2
34003116:	2200      	movs	r2, #0
34003118:	2101      	movs	r1, #1
3400311a:	4618      	mov	r0, r3
3400311c:	f7ff fae0 	bl	340026e0 <MX25UM51245G_ResetEnable>
34003120:	4603      	mov	r3, r0
34003122:	2b00      	cmp	r3, #0
34003124:	d003      	beq.n	3400312e <XSPI_NOR_ResetMemory+0x86>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003126:	f06f 0304 	mvn.w	r3, #4
3400312a:	60fb      	str	r3, [r7, #12]
3400312c:	e052      	b.n	340031d4 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400312e:	687b      	ldr	r3, [r7, #4]
34003130:	2264      	movs	r2, #100	@ 0x64
34003132:	fb02 f303 	mul.w	r3, r2, r3
34003136:	4a2a      	ldr	r2, [pc, #168]	@ (340031e0 <XSPI_NOR_ResetMemory+0x138>)
34003138:	4413      	add	r3, r2
3400313a:	2200      	movs	r2, #0
3400313c:	2101      	movs	r1, #1
3400313e:	4618      	mov	r0, r3
34003140:	f7ff fb24 	bl	3400278c <MX25UM51245G_ResetMemory>
34003144:	4603      	mov	r3, r0
34003146:	2b00      	cmp	r3, #0
34003148:	d003      	beq.n	34003152 <XSPI_NOR_ResetMemory+0xaa>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400314a:	f06f 0304 	mvn.w	r3, #4
3400314e:	60fb      	str	r3, [r7, #12]
34003150:	e040      	b.n	340031d4 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34003152:	687b      	ldr	r3, [r7, #4]
34003154:	2264      	movs	r2, #100	@ 0x64
34003156:	fb02 f303 	mul.w	r3, r2, r3
3400315a:	4a21      	ldr	r2, [pc, #132]	@ (340031e0 <XSPI_NOR_ResetMemory+0x138>)
3400315c:	4413      	add	r3, r2
3400315e:	2201      	movs	r2, #1
34003160:	2101      	movs	r1, #1
34003162:	4618      	mov	r0, r3
34003164:	f7ff fabc 	bl	340026e0 <MX25UM51245G_ResetEnable>
34003168:	4603      	mov	r3, r0
3400316a:	2b00      	cmp	r3, #0
3400316c:	d003      	beq.n	34003176 <XSPI_NOR_ResetMemory+0xce>
                                    BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400316e:	f06f 0304 	mvn.w	r3, #4
34003172:	60fb      	str	r3, [r7, #12]
34003174:	e02e      	b.n	340031d4 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34003176:	687b      	ldr	r3, [r7, #4]
34003178:	2264      	movs	r2, #100	@ 0x64
3400317a:	fb02 f303 	mul.w	r3, r2, r3
3400317e:	4a18      	ldr	r2, [pc, #96]	@ (340031e0 <XSPI_NOR_ResetMemory+0x138>)
34003180:	4413      	add	r3, r2
34003182:	2201      	movs	r2, #1
34003184:	2101      	movs	r1, #1
34003186:	4618      	mov	r0, r3
34003188:	f7ff fb00 	bl	3400278c <MX25UM51245G_ResetMemory>
3400318c:	4603      	mov	r3, r0
3400318e:	2b00      	cmp	r3, #0
34003190:	d003      	beq.n	3400319a <XSPI_NOR_ResetMemory+0xf2>
                                    BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003192:	f06f 0304 	mvn.w	r3, #4
34003196:	60fb      	str	r3, [r7, #12]
34003198:	e01c      	b.n	340031d4 <XSPI_NOR_ResetMemory+0x12c>
  }
  else
  {
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
3400319a:	4912      	ldr	r1, [pc, #72]	@ (340031e4 <XSPI_NOR_ResetMemory+0x13c>)
3400319c:	687a      	ldr	r2, [r7, #4]
3400319e:	4613      	mov	r3, r2
340031a0:	005b      	lsls	r3, r3, #1
340031a2:	4413      	add	r3, r2
340031a4:	440b      	add	r3, r1
340031a6:	2201      	movs	r2, #1
340031a8:	701a      	strb	r2, [r3, #0]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
340031aa:	490e      	ldr	r1, [pc, #56]	@ (340031e4 <XSPI_NOR_ResetMemory+0x13c>)
340031ac:	687a      	ldr	r2, [r7, #4]
340031ae:	4613      	mov	r3, r2
340031b0:	005b      	lsls	r3, r3, #1
340031b2:	4413      	add	r3, r2
340031b4:	440b      	add	r3, r1
340031b6:	3301      	adds	r3, #1
340031b8:	2200      	movs	r2, #0
340031ba:	701a      	strb	r2, [r3, #0]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
340031bc:	4909      	ldr	r1, [pc, #36]	@ (340031e4 <XSPI_NOR_ResetMemory+0x13c>)
340031be:	687a      	ldr	r2, [r7, #4]
340031c0:	4613      	mov	r3, r2
340031c2:	005b      	lsls	r3, r3, #1
340031c4:	4413      	add	r3, r2
340031c6:	440b      	add	r3, r1
340031c8:	3302      	adds	r3, #2
340031ca:	2200      	movs	r2, #0
340031cc:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
340031ce:	2064      	movs	r0, #100	@ 0x64
340031d0:	f000 fd96 	bl	34003d00 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
340031d4:	68fb      	ldr	r3, [r7, #12]
}
340031d6:	4618      	mov	r0, r3
340031d8:	3710      	adds	r7, #16
340031da:	46bd      	mov	sp, r7
340031dc:	bd80      	pop	{r7, pc}
340031de:	bf00      	nop
340031e0:	34020a58 	.word	0x34020a58
340031e4:	34020abc 	.word	0x34020abc

340031e8 <XSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
340031e8:	b590      	push	{r4, r7, lr}
340031ea:	b087      	sub	sp, #28
340031ec:	af02      	add	r7, sp, #8
340031ee:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340031f0:	687b      	ldr	r3, [r7, #4]
340031f2:	2b00      	cmp	r3, #0
340031f4:	d003      	beq.n	340031fe <XSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
340031f6:	f06f 0301 	mvn.w	r3, #1
340031fa:	60fb      	str	r3, [r7, #12]
340031fc:	e0db      	b.n	340033b6 <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340031fe:	687b      	ldr	r3, [r7, #4]
34003200:	2264      	movs	r2, #100	@ 0x64
34003202:	fb02 f303 	mul.w	r3, r2, r3
34003206:	4a6e      	ldr	r2, [pc, #440]	@ (340033c0 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003208:	1898      	adds	r0, r3, r2
3400320a:	496e      	ldr	r1, [pc, #440]	@ (340033c4 <XSPI_NOR_EnterDOPIMode+0x1dc>)
3400320c:	687a      	ldr	r2, [r7, #4]
3400320e:	4613      	mov	r3, r2
34003210:	005b      	lsls	r3, r3, #1
34003212:	4413      	add	r3, r2
34003214:	440b      	add	r3, r1
34003216:	3301      	adds	r3, #1
34003218:	7819      	ldrb	r1, [r3, #0]
3400321a:	4c6a      	ldr	r4, [pc, #424]	@ (340033c4 <XSPI_NOR_EnterDOPIMode+0x1dc>)
3400321c:	687a      	ldr	r2, [r7, #4]
3400321e:	4613      	mov	r3, r2
34003220:	005b      	lsls	r3, r3, #1
34003222:	4413      	add	r3, r2
34003224:	4423      	add	r3, r4
34003226:	3302      	adds	r3, #2
34003228:	781b      	ldrb	r3, [r3, #0]
3400322a:	461a      	mov	r2, r3
3400322c:	f7ff f85a 	bl	340022e4 <MX25UM51245G_WriteEnable>
34003230:	4603      	mov	r3, r0
34003232:	2b00      	cmp	r3, #0
34003234:	d003      	beq.n	3400323e <XSPI_NOR_EnterDOPIMode+0x56>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003236:	f06f 0304 	mvn.w	r3, #4
3400323a:	60fb      	str	r3, [r7, #12]
3400323c:	e0bb      	b.n	340033b6 <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400323e:	687b      	ldr	r3, [r7, #4]
34003240:	2264      	movs	r2, #100	@ 0x64
34003242:	fb02 f303 	mul.w	r3, r2, r3
34003246:	4a5e      	ldr	r2, [pc, #376]	@ (340033c0 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003248:	1898      	adds	r0, r3, r2
3400324a:	495e      	ldr	r1, [pc, #376]	@ (340033c4 <XSPI_NOR_EnterDOPIMode+0x1dc>)
3400324c:	687a      	ldr	r2, [r7, #4]
3400324e:	4613      	mov	r3, r2
34003250:	005b      	lsls	r3, r3, #1
34003252:	4413      	add	r3, r2
34003254:	440b      	add	r3, r1
34003256:	3301      	adds	r3, #1
34003258:	7819      	ldrb	r1, [r3, #0]
3400325a:	4c5a      	ldr	r4, [pc, #360]	@ (340033c4 <XSPI_NOR_EnterDOPIMode+0x1dc>)
3400325c:	687a      	ldr	r2, [r7, #4]
3400325e:	4613      	mov	r3, r2
34003260:	005b      	lsls	r3, r3, #1
34003262:	4413      	add	r3, r2
34003264:	4423      	add	r3, r4
34003266:	3302      	adds	r3, #2
34003268:	781a      	ldrb	r2, [r3, #0]
3400326a:	2300      	movs	r3, #0
3400326c:	9300      	str	r3, [sp, #0]
3400326e:	f44f 7340 	mov.w	r3, #768	@ 0x300
34003272:	f7ff f905 	bl	34002480 <MX25UM51245G_WriteCfg2Register>
34003276:	4603      	mov	r3, r0
34003278:	2b00      	cmp	r3, #0
3400327a:	d003      	beq.n	34003284 <XSPI_NOR_EnterDOPIMode+0x9c>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_20_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400327c:	f06f 0304 	mvn.w	r3, #4
34003280:	60fb      	str	r3, [r7, #12]
34003282:	e098      	b.n	340033b6 <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34003284:	687b      	ldr	r3, [r7, #4]
34003286:	2264      	movs	r2, #100	@ 0x64
34003288:	fb02 f303 	mul.w	r3, r2, r3
3400328c:	4a4c      	ldr	r2, [pc, #304]	@ (340033c0 <XSPI_NOR_EnterDOPIMode+0x1d8>)
3400328e:	1898      	adds	r0, r3, r2
34003290:	494c      	ldr	r1, [pc, #304]	@ (340033c4 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34003292:	687a      	ldr	r2, [r7, #4]
34003294:	4613      	mov	r3, r2
34003296:	005b      	lsls	r3, r3, #1
34003298:	4413      	add	r3, r2
3400329a:	440b      	add	r3, r1
3400329c:	3301      	adds	r3, #1
3400329e:	7819      	ldrb	r1, [r3, #0]
340032a0:	4c48      	ldr	r4, [pc, #288]	@ (340033c4 <XSPI_NOR_EnterDOPIMode+0x1dc>)
340032a2:	687a      	ldr	r2, [r7, #4]
340032a4:	4613      	mov	r3, r2
340032a6:	005b      	lsls	r3, r3, #1
340032a8:	4413      	add	r3, r2
340032aa:	4423      	add	r3, r4
340032ac:	3302      	adds	r3, #2
340032ae:	781b      	ldrb	r3, [r3, #0]
340032b0:	461a      	mov	r2, r3
340032b2:	f7ff f817 	bl	340022e4 <MX25UM51245G_WriteEnable>
340032b6:	4603      	mov	r3, r0
340032b8:	2b00      	cmp	r3, #0
340032ba:	d003      	beq.n	340032c4 <XSPI_NOR_EnterDOPIMode+0xdc>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340032bc:	f06f 0304 	mvn.w	r3, #4
340032c0:	60fb      	str	r3, [r7, #12]
340032c2:	e078      	b.n	340033b6 <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340032c4:	687b      	ldr	r3, [r7, #4]
340032c6:	2264      	movs	r2, #100	@ 0x64
340032c8:	fb02 f303 	mul.w	r3, r2, r3
340032cc:	4a3c      	ldr	r2, [pc, #240]	@ (340033c0 <XSPI_NOR_EnterDOPIMode+0x1d8>)
340032ce:	1898      	adds	r0, r3, r2
340032d0:	493c      	ldr	r1, [pc, #240]	@ (340033c4 <XSPI_NOR_EnterDOPIMode+0x1dc>)
340032d2:	687a      	ldr	r2, [r7, #4]
340032d4:	4613      	mov	r3, r2
340032d6:	005b      	lsls	r3, r3, #1
340032d8:	4413      	add	r3, r2
340032da:	440b      	add	r3, r1
340032dc:	3301      	adds	r3, #1
340032de:	7819      	ldrb	r1, [r3, #0]
340032e0:	4c38      	ldr	r4, [pc, #224]	@ (340033c4 <XSPI_NOR_EnterDOPIMode+0x1dc>)
340032e2:	687a      	ldr	r2, [r7, #4]
340032e4:	4613      	mov	r3, r2
340032e6:	005b      	lsls	r3, r3, #1
340032e8:	4413      	add	r3, r2
340032ea:	4423      	add	r3, r4
340032ec:	3302      	adds	r3, #2
340032ee:	781a      	ldrb	r2, [r3, #0]
340032f0:	2302      	movs	r3, #2
340032f2:	9300      	str	r3, [sp, #0]
340032f4:	2300      	movs	r3, #0
340032f6:	f7ff f8c3 	bl	34002480 <MX25UM51245G_WriteCfg2Register>
340032fa:	4603      	mov	r3, r0
340032fc:	2b00      	cmp	r3, #0
340032fe:	d003      	beq.n	34003308 <XSPI_NOR_EnterDOPIMode+0x120>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003300:	f06f 0304 	mvn.w	r3, #4
34003304:	60fb      	str	r3, [r7, #12]
34003306:	e056      	b.n	340033b6 <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34003308:	2028      	movs	r0, #40	@ 0x28
3400330a:	f000 fcf9 	bl	34003d00 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
3400330e:	4a2c      	ldr	r2, [pc, #176]	@ (340033c0 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003310:	687b      	ldr	r3, [r7, #4]
34003312:	2164      	movs	r1, #100	@ 0x64
34003314:	fb01 f303 	mul.w	r3, r1, r3
34003318:	4413      	add	r3, r2
3400331a:	330c      	adds	r3, #12
3400331c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34003320:	601a      	str	r2, [r3, #0]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34003322:	4a27      	ldr	r2, [pc, #156]	@ (340033c0 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003324:	687b      	ldr	r3, [r7, #4]
34003326:	2164      	movs	r1, #100	@ 0x64
34003328:	fb01 f303 	mul.w	r3, r1, r3
3400332c:	4413      	add	r3, r2
3400332e:	332c      	adds	r3, #44	@ 0x2c
34003330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34003334:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34003336:	687b      	ldr	r3, [r7, #4]
34003338:	2264      	movs	r2, #100	@ 0x64
3400333a:	fb02 f303 	mul.w	r3, r2, r3
3400333e:	4a20      	ldr	r2, [pc, #128]	@ (340033c0 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003340:	4413      	add	r3, r2
34003342:	4618      	mov	r0, r3
34003344:	f013 faa4 	bl	34016890 <HAL_XSPI_Init>
34003348:	4603      	mov	r3, r0
3400334a:	2b00      	cmp	r3, #0
3400334c:	d003      	beq.n	34003356 <XSPI_NOR_EnterDOPIMode+0x16e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
3400334e:	f06f 0303 	mvn.w	r3, #3
34003352:	60fb      	str	r3, [r7, #12]
34003354:	e02f      	b.n	340033b6 <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34003356:	687b      	ldr	r3, [r7, #4]
34003358:	2264      	movs	r2, #100	@ 0x64
3400335a:	fb02 f303 	mul.w	r3, r2, r3
3400335e:	4a18      	ldr	r2, [pc, #96]	@ (340033c0 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003360:	4413      	add	r3, r2
34003362:	2201      	movs	r2, #1
34003364:	2101      	movs	r1, #1
34003366:	4618      	mov	r0, r3
34003368:	f7fe fdf3 	bl	34001f52 <MX25UM51245G_AutoPollingMemReady>
3400336c:	4603      	mov	r3, r0
3400336e:	2b00      	cmp	r3, #0
34003370:	d003      	beq.n	3400337a <XSPI_NOR_EnterDOPIMode+0x192>
                                              BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34003372:	f06f 0304 	mvn.w	r3, #4
34003376:	60fb      	str	r3, [r7, #12]
34003378:	e01d      	b.n	340033b6 <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
3400337a:	687b      	ldr	r3, [r7, #4]
3400337c:	2264      	movs	r2, #100	@ 0x64
3400337e:	fb02 f303 	mul.w	r3, r2, r3
34003382:	4a0f      	ldr	r2, [pc, #60]	@ (340033c0 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003384:	1898      	adds	r0, r3, r2
34003386:	f107 0308 	add.w	r3, r7, #8
3400338a:	9300      	str	r3, [sp, #0]
3400338c:	2300      	movs	r3, #0
3400338e:	2201      	movs	r2, #1
34003390:	2101      	movs	r1, #1
34003392:	f7ff f908 	bl	340025a6 <MX25UM51245G_ReadCfg2Register>
34003396:	4603      	mov	r3, r0
34003398:	2b00      	cmp	r3, #0
3400339a:	d003      	beq.n	340033a4 <XSPI_NOR_EnterDOPIMode+0x1bc>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
3400339c:	f06f 0304 	mvn.w	r3, #4
340033a0:	60fb      	str	r3, [r7, #12]
340033a2:	e008      	b.n	340033b6 <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
340033a4:	7a3b      	ldrb	r3, [r7, #8]
340033a6:	2b02      	cmp	r3, #2
340033a8:	d003      	beq.n	340033b2 <XSPI_NOR_EnterDOPIMode+0x1ca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
340033aa:	f06f 0304 	mvn.w	r3, #4
340033ae:	60fb      	str	r3, [r7, #12]
340033b0:	e001      	b.n	340033b6 <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
340033b2:	2300      	movs	r3, #0
340033b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
340033b6:	68fb      	ldr	r3, [r7, #12]
}
340033b8:	4618      	mov	r0, r3
340033ba:	3714      	adds	r7, #20
340033bc:	46bd      	mov	sp, r7
340033be:	bd90      	pop	{r4, r7, pc}
340033c0:	34020a58 	.word	0x34020a58
340033c4:	34020abc 	.word	0x34020abc

340033c8 <XSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
340033c8:	b590      	push	{r4, r7, lr}
340033ca:	b087      	sub	sp, #28
340033cc:	af02      	add	r7, sp, #8
340033ce:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340033d0:	687b      	ldr	r3, [r7, #4]
340033d2:	2b00      	cmp	r3, #0
340033d4:	d003      	beq.n	340033de <XSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
340033d6:	f06f 0301 	mvn.w	r3, #1
340033da:	60fb      	str	r3, [r7, #12]
340033dc:	e0b7      	b.n	3400354e <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340033de:	687b      	ldr	r3, [r7, #4]
340033e0:	2264      	movs	r2, #100	@ 0x64
340033e2:	fb02 f303 	mul.w	r3, r2, r3
340033e6:	4a5c      	ldr	r2, [pc, #368]	@ (34003558 <XSPI_NOR_EnterSOPIMode+0x190>)
340033e8:	1898      	adds	r0, r3, r2
340033ea:	495c      	ldr	r1, [pc, #368]	@ (3400355c <XSPI_NOR_EnterSOPIMode+0x194>)
340033ec:	687a      	ldr	r2, [r7, #4]
340033ee:	4613      	mov	r3, r2
340033f0:	005b      	lsls	r3, r3, #1
340033f2:	4413      	add	r3, r2
340033f4:	440b      	add	r3, r1
340033f6:	3301      	adds	r3, #1
340033f8:	7819      	ldrb	r1, [r3, #0]
340033fa:	4c58      	ldr	r4, [pc, #352]	@ (3400355c <XSPI_NOR_EnterSOPIMode+0x194>)
340033fc:	687a      	ldr	r2, [r7, #4]
340033fe:	4613      	mov	r3, r2
34003400:	005b      	lsls	r3, r3, #1
34003402:	4413      	add	r3, r2
34003404:	4423      	add	r3, r4
34003406:	3302      	adds	r3, #2
34003408:	781b      	ldrb	r3, [r3, #0]
3400340a:	461a      	mov	r2, r3
3400340c:	f7fe ff6a 	bl	340022e4 <MX25UM51245G_WriteEnable>
34003410:	4603      	mov	r3, r0
34003412:	2b00      	cmp	r3, #0
34003414:	d003      	beq.n	3400341e <XSPI_NOR_EnterSOPIMode+0x56>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003416:	f06f 0304 	mvn.w	r3, #4
3400341a:	60fb      	str	r3, [r7, #12]
3400341c:	e097      	b.n	3400354e <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400341e:	687b      	ldr	r3, [r7, #4]
34003420:	2264      	movs	r2, #100	@ 0x64
34003422:	fb02 f303 	mul.w	r3, r2, r3
34003426:	4a4c      	ldr	r2, [pc, #304]	@ (34003558 <XSPI_NOR_EnterSOPIMode+0x190>)
34003428:	1898      	adds	r0, r3, r2
3400342a:	494c      	ldr	r1, [pc, #304]	@ (3400355c <XSPI_NOR_EnterSOPIMode+0x194>)
3400342c:	687a      	ldr	r2, [r7, #4]
3400342e:	4613      	mov	r3, r2
34003430:	005b      	lsls	r3, r3, #1
34003432:	4413      	add	r3, r2
34003434:	440b      	add	r3, r1
34003436:	3301      	adds	r3, #1
34003438:	7819      	ldrb	r1, [r3, #0]
3400343a:	4c48      	ldr	r4, [pc, #288]	@ (3400355c <XSPI_NOR_EnterSOPIMode+0x194>)
3400343c:	687a      	ldr	r2, [r7, #4]
3400343e:	4613      	mov	r3, r2
34003440:	005b      	lsls	r3, r3, #1
34003442:	4413      	add	r3, r2
34003444:	4423      	add	r3, r4
34003446:	3302      	adds	r3, #2
34003448:	781a      	ldrb	r2, [r3, #0]
3400344a:	2300      	movs	r3, #0
3400344c:	9300      	str	r3, [sp, #0]
3400344e:	f44f 7340 	mov.w	r3, #768	@ 0x300
34003452:	f7ff f815 	bl	34002480 <MX25UM51245G_WriteCfg2Register>
34003456:	4603      	mov	r3, r0
34003458:	2b00      	cmp	r3, #0
3400345a:	d003      	beq.n	34003464 <XSPI_NOR_EnterSOPIMode+0x9c>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_20_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400345c:	f06f 0304 	mvn.w	r3, #4
34003460:	60fb      	str	r3, [r7, #12]
34003462:	e074      	b.n	3400354e <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34003464:	687b      	ldr	r3, [r7, #4]
34003466:	2264      	movs	r2, #100	@ 0x64
34003468:	fb02 f303 	mul.w	r3, r2, r3
3400346c:	4a3a      	ldr	r2, [pc, #232]	@ (34003558 <XSPI_NOR_EnterSOPIMode+0x190>)
3400346e:	1898      	adds	r0, r3, r2
34003470:	493a      	ldr	r1, [pc, #232]	@ (3400355c <XSPI_NOR_EnterSOPIMode+0x194>)
34003472:	687a      	ldr	r2, [r7, #4]
34003474:	4613      	mov	r3, r2
34003476:	005b      	lsls	r3, r3, #1
34003478:	4413      	add	r3, r2
3400347a:	440b      	add	r3, r1
3400347c:	3301      	adds	r3, #1
3400347e:	7819      	ldrb	r1, [r3, #0]
34003480:	4c36      	ldr	r4, [pc, #216]	@ (3400355c <XSPI_NOR_EnterSOPIMode+0x194>)
34003482:	687a      	ldr	r2, [r7, #4]
34003484:	4613      	mov	r3, r2
34003486:	005b      	lsls	r3, r3, #1
34003488:	4413      	add	r3, r2
3400348a:	4423      	add	r3, r4
3400348c:	3302      	adds	r3, #2
3400348e:	781b      	ldrb	r3, [r3, #0]
34003490:	461a      	mov	r2, r3
34003492:	f7fe ff27 	bl	340022e4 <MX25UM51245G_WriteEnable>
34003496:	4603      	mov	r3, r0
34003498:	2b00      	cmp	r3, #0
3400349a:	d003      	beq.n	340034a4 <XSPI_NOR_EnterSOPIMode+0xdc>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400349c:	f06f 0304 	mvn.w	r3, #4
340034a0:	60fb      	str	r3, [r7, #12]
340034a2:	e054      	b.n	3400354e <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340034a4:	687b      	ldr	r3, [r7, #4]
340034a6:	2264      	movs	r2, #100	@ 0x64
340034a8:	fb02 f303 	mul.w	r3, r2, r3
340034ac:	4a2a      	ldr	r2, [pc, #168]	@ (34003558 <XSPI_NOR_EnterSOPIMode+0x190>)
340034ae:	1898      	adds	r0, r3, r2
340034b0:	492a      	ldr	r1, [pc, #168]	@ (3400355c <XSPI_NOR_EnterSOPIMode+0x194>)
340034b2:	687a      	ldr	r2, [r7, #4]
340034b4:	4613      	mov	r3, r2
340034b6:	005b      	lsls	r3, r3, #1
340034b8:	4413      	add	r3, r2
340034ba:	440b      	add	r3, r1
340034bc:	3301      	adds	r3, #1
340034be:	7819      	ldrb	r1, [r3, #0]
340034c0:	4c26      	ldr	r4, [pc, #152]	@ (3400355c <XSPI_NOR_EnterSOPIMode+0x194>)
340034c2:	687a      	ldr	r2, [r7, #4]
340034c4:	4613      	mov	r3, r2
340034c6:	005b      	lsls	r3, r3, #1
340034c8:	4413      	add	r3, r2
340034ca:	4423      	add	r3, r4
340034cc:	3302      	adds	r3, #2
340034ce:	781a      	ldrb	r2, [r3, #0]
340034d0:	2301      	movs	r3, #1
340034d2:	9300      	str	r3, [sp, #0]
340034d4:	2300      	movs	r3, #0
340034d6:	f7fe ffd3 	bl	34002480 <MX25UM51245G_WriteCfg2Register>
340034da:	4603      	mov	r3, r0
340034dc:	2b00      	cmp	r3, #0
340034de:	d003      	beq.n	340034e8 <XSPI_NOR_EnterSOPIMode+0x120>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340034e0:	f06f 0304 	mvn.w	r3, #4
340034e4:	60fb      	str	r3, [r7, #12]
340034e6:	e032      	b.n	3400354e <XSPI_NOR_EnterSOPIMode+0x186>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
340034e8:	2028      	movs	r0, #40	@ 0x28
340034ea:	f000 fc09 	bl	34003d00 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
340034ee:	687b      	ldr	r3, [r7, #4]
340034f0:	2264      	movs	r2, #100	@ 0x64
340034f2:	fb02 f303 	mul.w	r3, r2, r3
340034f6:	4a18      	ldr	r2, [pc, #96]	@ (34003558 <XSPI_NOR_EnterSOPIMode+0x190>)
340034f8:	4413      	add	r3, r2
340034fa:	2200      	movs	r2, #0
340034fc:	2101      	movs	r1, #1
340034fe:	4618      	mov	r0, r3
34003500:	f7fe fd27 	bl	34001f52 <MX25UM51245G_AutoPollingMemReady>
34003504:	4603      	mov	r3, r0
34003506:	2b00      	cmp	r3, #0
34003508:	d003      	beq.n	34003512 <XSPI_NOR_EnterSOPIMode+0x14a>
                                         BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
3400350a:	f06f 0304 	mvn.w	r3, #4
3400350e:	60fb      	str	r3, [r7, #12]
34003510:	e01d      	b.n	3400354e <XSPI_NOR_EnterSOPIMode+0x186>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34003512:	687b      	ldr	r3, [r7, #4]
34003514:	2264      	movs	r2, #100	@ 0x64
34003516:	fb02 f303 	mul.w	r3, r2, r3
3400351a:	4a0f      	ldr	r2, [pc, #60]	@ (34003558 <XSPI_NOR_EnterSOPIMode+0x190>)
3400351c:	1898      	adds	r0, r3, r2
3400351e:	f107 0308 	add.w	r3, r7, #8
34003522:	9300      	str	r3, [sp, #0]
34003524:	2300      	movs	r3, #0
34003526:	2200      	movs	r2, #0
34003528:	2101      	movs	r1, #1
3400352a:	f7ff f83c 	bl	340025a6 <MX25UM51245G_ReadCfg2Register>
3400352e:	4603      	mov	r3, r0
34003530:	2b00      	cmp	r3, #0
34003532:	d003      	beq.n	3400353c <XSPI_NOR_EnterSOPIMode+0x174>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34003534:	f06f 0304 	mvn.w	r3, #4
34003538:	60fb      	str	r3, [r7, #12]
3400353a:	e008      	b.n	3400354e <XSPI_NOR_EnterSOPIMode+0x186>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
3400353c:	7a3b      	ldrb	r3, [r7, #8]
3400353e:	2b01      	cmp	r3, #1
34003540:	d003      	beq.n	3400354a <XSPI_NOR_EnterSOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34003542:	f06f 0304 	mvn.w	r3, #4
34003546:	60fb      	str	r3, [r7, #12]
34003548:	e001      	b.n	3400354e <XSPI_NOR_EnterSOPIMode+0x186>
    }
    else
    {
      ret = BSP_ERROR_NONE;
3400354a:	2300      	movs	r3, #0
3400354c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
3400354e:	68fb      	ldr	r3, [r7, #12]
}
34003550:	4618      	mov	r0, r3
34003552:	3714      	adds	r7, #20
34003554:	46bd      	mov	sp, r7
34003556:	bd90      	pop	{r4, r7, pc}
34003558:	34020a58 	.word	0x34020a58
3400355c:	34020abc 	.word	0x34020abc

34003560 <XSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_ExitOPIMode(uint32_t Instance)
{
34003560:	b590      	push	{r4, r7, lr}
34003562:	b087      	sub	sp, #28
34003564:	af02      	add	r7, sp, #8
34003566:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34003568:	2300      	movs	r3, #0
3400356a:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400356c:	687b      	ldr	r3, [r7, #4]
3400356e:	2b00      	cmp	r3, #0
34003570:	d003      	beq.n	3400357a <XSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34003572:	f06f 0301 	mvn.w	r3, #1
34003576:	60fb      	str	r3, [r7, #12]
34003578:	e0a3      	b.n	340036c2 <XSPI_NOR_ExitOPIMode+0x162>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400357a:	687b      	ldr	r3, [r7, #4]
3400357c:	2264      	movs	r2, #100	@ 0x64
3400357e:	fb02 f303 	mul.w	r3, r2, r3
34003582:	4a52      	ldr	r2, [pc, #328]	@ (340036cc <XSPI_NOR_ExitOPIMode+0x16c>)
34003584:	1898      	adds	r0, r3, r2
34003586:	4952      	ldr	r1, [pc, #328]	@ (340036d0 <XSPI_NOR_ExitOPIMode+0x170>)
34003588:	687a      	ldr	r2, [r7, #4]
3400358a:	4613      	mov	r3, r2
3400358c:	005b      	lsls	r3, r3, #1
3400358e:	4413      	add	r3, r2
34003590:	440b      	add	r3, r1
34003592:	3301      	adds	r3, #1
34003594:	7819      	ldrb	r1, [r3, #0]
34003596:	4c4e      	ldr	r4, [pc, #312]	@ (340036d0 <XSPI_NOR_ExitOPIMode+0x170>)
34003598:	687a      	ldr	r2, [r7, #4]
3400359a:	4613      	mov	r3, r2
3400359c:	005b      	lsls	r3, r3, #1
3400359e:	4413      	add	r3, r2
340035a0:	4423      	add	r3, r4
340035a2:	3302      	adds	r3, #2
340035a4:	781b      	ldrb	r3, [r3, #0]
340035a6:	461a      	mov	r2, r3
340035a8:	f7fe fe9c 	bl	340022e4 <MX25UM51245G_WriteEnable>
340035ac:	4603      	mov	r3, r0
340035ae:	2b00      	cmp	r3, #0
340035b0:	d003      	beq.n	340035ba <XSPI_NOR_ExitOPIMode+0x5a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340035b2:	f06f 0304 	mvn.w	r3, #4
340035b6:	60fb      	str	r3, [r7, #12]
340035b8:	e083      	b.n	340036c2 <XSPI_NOR_ExitOPIMode+0x162>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
340035ba:	2300      	movs	r3, #0
340035bc:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
340035be:	2300      	movs	r3, #0
340035c0:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340035c2:	687b      	ldr	r3, [r7, #4]
340035c4:	2264      	movs	r2, #100	@ 0x64
340035c6:	fb02 f303 	mul.w	r3, r2, r3
340035ca:	4a40      	ldr	r2, [pc, #256]	@ (340036cc <XSPI_NOR_ExitOPIMode+0x16c>)
340035cc:	1898      	adds	r0, r3, r2
340035ce:	4940      	ldr	r1, [pc, #256]	@ (340036d0 <XSPI_NOR_ExitOPIMode+0x170>)
340035d0:	687a      	ldr	r2, [r7, #4]
340035d2:	4613      	mov	r3, r2
340035d4:	005b      	lsls	r3, r3, #1
340035d6:	4413      	add	r3, r2
340035d8:	440b      	add	r3, r1
340035da:	3301      	adds	r3, #1
340035dc:	7819      	ldrb	r1, [r3, #0]
340035de:	4c3c      	ldr	r4, [pc, #240]	@ (340036d0 <XSPI_NOR_ExitOPIMode+0x170>)
340035e0:	687a      	ldr	r2, [r7, #4]
340035e2:	4613      	mov	r3, r2
340035e4:	005b      	lsls	r3, r3, #1
340035e6:	4413      	add	r3, r2
340035e8:	4423      	add	r3, r4
340035ea:	3302      	adds	r3, #2
340035ec:	781a      	ldrb	r2, [r3, #0]
340035ee:	7a3b      	ldrb	r3, [r7, #8]
340035f0:	9300      	str	r3, [sp, #0]
340035f2:	2300      	movs	r3, #0
340035f4:	f7fe ff44 	bl	34002480 <MX25UM51245G_WriteCfg2Register>
340035f8:	4603      	mov	r3, r0
340035fa:	2b00      	cmp	r3, #0
340035fc:	d003      	beq.n	34003606 <XSPI_NOR_ExitOPIMode+0xa6>
                                       Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
340035fe:	f06f 0304 	mvn.w	r3, #4
34003602:	60fb      	str	r3, [r7, #12]
34003604:	e05d      	b.n	340036c2 <XSPI_NOR_ExitOPIMode+0x162>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34003606:	2028      	movs	r0, #40	@ 0x28
34003608:	f000 fb7a 	bl	34003d00 <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
3400360c:	4930      	ldr	r1, [pc, #192]	@ (340036d0 <XSPI_NOR_ExitOPIMode+0x170>)
3400360e:	687a      	ldr	r2, [r7, #4]
34003610:	4613      	mov	r3, r2
34003612:	005b      	lsls	r3, r3, #1
34003614:	4413      	add	r3, r2
34003616:	440b      	add	r3, r1
34003618:	3302      	adds	r3, #2
3400361a:	781b      	ldrb	r3, [r3, #0]
3400361c:	2b01      	cmp	r3, #1
3400361e:	d120      	bne.n	34003662 <XSPI_NOR_ExitOPIMode+0x102>
      {
        /* Reconfigure the memory type of the peripheral */
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34003620:	4a2a      	ldr	r2, [pc, #168]	@ (340036cc <XSPI_NOR_ExitOPIMode+0x16c>)
34003622:	687b      	ldr	r3, [r7, #4]
34003624:	2164      	movs	r1, #100	@ 0x64
34003626:	fb01 f303 	mul.w	r3, r1, r3
3400362a:	4413      	add	r3, r2
3400362c:	330c      	adds	r3, #12
3400362e:	2200      	movs	r2, #0
34003630:	601a      	str	r2, [r3, #0]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34003632:	4a26      	ldr	r2, [pc, #152]	@ (340036cc <XSPI_NOR_ExitOPIMode+0x16c>)
34003634:	687b      	ldr	r3, [r7, #4]
34003636:	2164      	movs	r1, #100	@ 0x64
34003638:	fb01 f303 	mul.w	r3, r1, r3
3400363c:	4413      	add	r3, r2
3400363e:	332c      	adds	r3, #44	@ 0x2c
34003640:	2200      	movs	r2, #0
34003642:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34003644:	687b      	ldr	r3, [r7, #4]
34003646:	2264      	movs	r2, #100	@ 0x64
34003648:	fb02 f303 	mul.w	r3, r2, r3
3400364c:	4a1f      	ldr	r2, [pc, #124]	@ (340036cc <XSPI_NOR_ExitOPIMode+0x16c>)
3400364e:	4413      	add	r3, r2
34003650:	4618      	mov	r0, r3
34003652:	f013 f91d 	bl	34016890 <HAL_XSPI_Init>
34003656:	4603      	mov	r3, r0
34003658:	2b00      	cmp	r3, #0
3400365a:	d002      	beq.n	34003662 <XSPI_NOR_ExitOPIMode+0x102>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
3400365c:	f06f 0303 	mvn.w	r3, #3
34003660:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
34003662:	68fb      	ldr	r3, [r7, #12]
34003664:	2b00      	cmp	r3, #0
34003666:	d12c      	bne.n	340036c2 <XSPI_NOR_ExitOPIMode+0x162>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34003668:	687b      	ldr	r3, [r7, #4]
3400366a:	2264      	movs	r2, #100	@ 0x64
3400366c:	fb02 f303 	mul.w	r3, r2, r3
34003670:	4a16      	ldr	r2, [pc, #88]	@ (340036cc <XSPI_NOR_ExitOPIMode+0x16c>)
34003672:	4413      	add	r3, r2
34003674:	2200      	movs	r2, #0
34003676:	2100      	movs	r1, #0
34003678:	4618      	mov	r0, r3
3400367a:	f7fe fc6a 	bl	34001f52 <MX25UM51245G_AutoPollingMemReady>
3400367e:	4603      	mov	r3, r0
34003680:	2b00      	cmp	r3, #0
34003682:	d003      	beq.n	3400368c <XSPI_NOR_ExitOPIMode+0x12c>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
34003684:	f06f 0304 	mvn.w	r3, #4
34003688:	60fb      	str	r3, [r7, #12]
3400368a:	e01a      	b.n	340036c2 <XSPI_NOR_ExitOPIMode+0x162>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
3400368c:	687b      	ldr	r3, [r7, #4]
3400368e:	2264      	movs	r2, #100	@ 0x64
34003690:	fb02 f303 	mul.w	r3, r2, r3
34003694:	4a0d      	ldr	r2, [pc, #52]	@ (340036cc <XSPI_NOR_ExitOPIMode+0x16c>)
34003696:	1898      	adds	r0, r3, r2
34003698:	f107 0308 	add.w	r3, r7, #8
3400369c:	9300      	str	r3, [sp, #0]
3400369e:	2300      	movs	r3, #0
340036a0:	2200      	movs	r2, #0
340036a2:	2100      	movs	r1, #0
340036a4:	f7fe ff7f 	bl	340025a6 <MX25UM51245G_ReadCfg2Register>
340036a8:	4603      	mov	r3, r0
340036aa:	2b00      	cmp	r3, #0
340036ac:	d003      	beq.n	340036b6 <XSPI_NOR_ExitOPIMode+0x156>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
340036ae:	f06f 0304 	mvn.w	r3, #4
340036b2:	60fb      	str	r3, [r7, #12]
340036b4:	e005      	b.n	340036c2 <XSPI_NOR_ExitOPIMode+0x162>
        }
        else if (reg[0] != 0U)
340036b6:	7a3b      	ldrb	r3, [r7, #8]
340036b8:	2b00      	cmp	r3, #0
340036ba:	d002      	beq.n	340036c2 <XSPI_NOR_ExitOPIMode+0x162>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
340036bc:	f06f 0304 	mvn.w	r3, #4
340036c0:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
340036c2:	68fb      	ldr	r3, [r7, #12]
}
340036c4:	4618      	mov	r0, r3
340036c6:	3714      	adds	r7, #20
340036c8:	46bd      	mov	sp, r7
340036ca:	bd90      	pop	{r4, r7, pc}
340036cc:	34020a58 	.word	0x34020a58
340036d0:	34020abc 	.word	0x34020abc

340036d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
340036d4:	b480      	push	{r7}
340036d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
340036d8:	4b6a      	ldr	r3, [pc, #424]	@ (34003884 <SystemInit+0x1b0>)
340036da:	4a6b      	ldr	r2, [pc, #428]	@ (34003888 <SystemInit+0x1b4>)
340036dc:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
340036de:	4b6b      	ldr	r3, [pc, #428]	@ (3400388c <SystemInit+0x1b8>)
340036e0:	2201      	movs	r2, #1
340036e2:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
340036e6:	4b69      	ldr	r3, [pc, #420]	@ (3400388c <SystemInit+0x1b8>)
340036e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340036ec:	461a      	mov	r2, r3
340036ee:	2301      	movs	r3, #1
340036f0:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
340036f4:	4b65      	ldr	r3, [pc, #404]	@ (3400388c <SystemInit+0x1b8>)
340036f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340036fa:	461a      	mov	r2, r3
340036fc:	2301      	movs	r3, #1
340036fe:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
34003702:	4b63      	ldr	r3, [pc, #396]	@ (34003890 <SystemInit+0x1bc>)
34003704:	2200      	movs	r2, #0
34003706:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003708:	4b61      	ldr	r3, [pc, #388]	@ (34003890 <SystemInit+0x1bc>)
3400370a:	2200      	movs	r2, #0
3400370c:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3400370e:	4b60      	ldr	r3, [pc, #384]	@ (34003890 <SystemInit+0x1bc>)
34003710:	2200      	movs	r2, #0
34003712:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
34003714:	4b5e      	ldr	r3, [pc, #376]	@ (34003890 <SystemInit+0x1bc>)
34003716:	2201      	movs	r2, #1
34003718:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3400371a:	4b5d      	ldr	r3, [pc, #372]	@ (34003890 <SystemInit+0x1bc>)
3400371c:	2200      	movs	r2, #0
3400371e:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003720:	4b5b      	ldr	r3, [pc, #364]	@ (34003890 <SystemInit+0x1bc>)
34003722:	2200      	movs	r2, #0
34003724:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
34003726:	4b5a      	ldr	r3, [pc, #360]	@ (34003890 <SystemInit+0x1bc>)
34003728:	2202      	movs	r2, #2
3400372a:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3400372c:	4b58      	ldr	r3, [pc, #352]	@ (34003890 <SystemInit+0x1bc>)
3400372e:	2200      	movs	r2, #0
34003730:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003732:	4b57      	ldr	r3, [pc, #348]	@ (34003890 <SystemInit+0x1bc>)
34003734:	2200      	movs	r2, #0
34003736:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
34003738:	4b55      	ldr	r3, [pc, #340]	@ (34003890 <SystemInit+0x1bc>)
3400373a:	2203      	movs	r2, #3
3400373c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3400373e:	4b54      	ldr	r3, [pc, #336]	@ (34003890 <SystemInit+0x1bc>)
34003740:	2200      	movs	r2, #0
34003742:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003744:	4b52      	ldr	r3, [pc, #328]	@ (34003890 <SystemInit+0x1bc>)
34003746:	2200      	movs	r2, #0
34003748:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
3400374a:	4b51      	ldr	r3, [pc, #324]	@ (34003890 <SystemInit+0x1bc>)
3400374c:	2204      	movs	r2, #4
3400374e:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003750:	4b4f      	ldr	r3, [pc, #316]	@ (34003890 <SystemInit+0x1bc>)
34003752:	2200      	movs	r2, #0
34003754:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003756:	4b4e      	ldr	r3, [pc, #312]	@ (34003890 <SystemInit+0x1bc>)
34003758:	2200      	movs	r2, #0
3400375a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
3400375c:	4b4c      	ldr	r3, [pc, #304]	@ (34003890 <SystemInit+0x1bc>)
3400375e:	2205      	movs	r2, #5
34003760:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003762:	4b4b      	ldr	r3, [pc, #300]	@ (34003890 <SystemInit+0x1bc>)
34003764:	2200      	movs	r2, #0
34003766:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003768:	4b49      	ldr	r3, [pc, #292]	@ (34003890 <SystemInit+0x1bc>)
3400376a:	2200      	movs	r2, #0
3400376c:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
3400376e:	4b48      	ldr	r3, [pc, #288]	@ (34003890 <SystemInit+0x1bc>)
34003770:	2206      	movs	r2, #6
34003772:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003774:	4b46      	ldr	r3, [pc, #280]	@ (34003890 <SystemInit+0x1bc>)
34003776:	2200      	movs	r2, #0
34003778:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3400377a:	4b45      	ldr	r3, [pc, #276]	@ (34003890 <SystemInit+0x1bc>)
3400377c:	2200      	movs	r2, #0
3400377e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
34003780:	4b43      	ldr	r3, [pc, #268]	@ (34003890 <SystemInit+0x1bc>)
34003782:	2207      	movs	r2, #7
34003784:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003786:	4b42      	ldr	r3, [pc, #264]	@ (34003890 <SystemInit+0x1bc>)
34003788:	2200      	movs	r2, #0
3400378a:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3400378c:	4b40      	ldr	r3, [pc, #256]	@ (34003890 <SystemInit+0x1bc>)
3400378e:	2200      	movs	r2, #0
34003790:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34003792:	4b3e      	ldr	r3, [pc, #248]	@ (3400388c <SystemInit+0x1b8>)
34003794:	2201      	movs	r2, #1
34003796:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
3400379a:	4b3c      	ldr	r3, [pc, #240]	@ (3400388c <SystemInit+0x1b8>)
3400379c:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
340037a0:	4b38      	ldr	r3, [pc, #224]	@ (34003884 <SystemInit+0x1b0>)
340037a2:	4a3c      	ldr	r2, [pc, #240]	@ (34003894 <SystemInit+0x1c0>)
340037a4:	689b      	ldr	r3, [r3, #8]
340037a6:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
340037a8:	4b3b      	ldr	r3, [pc, #236]	@ (34003898 <SystemInit+0x1c4>)
340037aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340037ac:	4a3a      	ldr	r2, [pc, #232]	@ (34003898 <SystemInit+0x1c4>)
340037ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
340037b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
340037b4:	4b38      	ldr	r3, [pc, #224]	@ (34003898 <SystemInit+0x1c4>)
340037b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340037b8:	4a37      	ldr	r2, [pc, #220]	@ (34003898 <SystemInit+0x1c4>)
340037ba:	f043 0310 	orr.w	r3, r3, #16
340037be:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
340037c0:	4b35      	ldr	r3, [pc, #212]	@ (34003898 <SystemInit+0x1c4>)
340037c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
340037c4:	4b31      	ldr	r3, [pc, #196]	@ (3400388c <SystemInit+0x1b8>)
340037c6:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
340037ca:	4a30      	ldr	r2, [pc, #192]	@ (3400388c <SystemInit+0x1b8>)
340037cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340037d0:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
340037d4:	4b2d      	ldr	r3, [pc, #180]	@ (3400388c <SystemInit+0x1b8>)
340037d6:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
340037da:	4a2c      	ldr	r2, [pc, #176]	@ (3400388c <SystemInit+0x1b8>)
340037dc:	f043 0310 	orr.w	r3, r3, #16
340037e0:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
340037e4:	4b29      	ldr	r3, [pc, #164]	@ (3400388c <SystemInit+0x1b8>)
340037e6:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
340037ea:	4b28      	ldr	r3, [pc, #160]	@ (3400388c <SystemInit+0x1b8>)
340037ec:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
340037f0:	4a26      	ldr	r2, [pc, #152]	@ (3400388c <SystemInit+0x1b8>)
340037f2:	f023 0310 	bic.w	r3, r3, #16
340037f6:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
340037fa:	4b24      	ldr	r3, [pc, #144]	@ (3400388c <SystemInit+0x1b8>)
340037fc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34003800:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34003804:	4b21      	ldr	r3, [pc, #132]	@ (3400388c <SystemInit+0x1b8>)
34003806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400380a:	461a      	mov	r2, r3
3400380c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34003810:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34003814:	4b1d      	ldr	r3, [pc, #116]	@ (3400388c <SystemInit+0x1b8>)
34003816:	2201      	movs	r2, #1
34003818:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
3400381c:	4b1b      	ldr	r3, [pc, #108]	@ (3400388c <SystemInit+0x1b8>)
3400381e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003822:	461a      	mov	r2, r3
34003824:	2301      	movs	r3, #1
34003826:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
3400382a:	4b18      	ldr	r3, [pc, #96]	@ (3400388c <SystemInit+0x1b8>)
3400382c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003830:	461a      	mov	r2, r3
34003832:	2301      	movs	r3, #1
34003834:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34003838:	4b14      	ldr	r3, [pc, #80]	@ (3400388c <SystemInit+0x1b8>)
3400383a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400383e:	461a      	mov	r2, r3
34003840:	2340      	movs	r3, #64	@ 0x40
34003842:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
34003846:	4b13      	ldr	r3, [pc, #76]	@ (34003894 <SystemInit+0x1c0>)
34003848:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
3400384a:	4b10      	ldr	r3, [pc, #64]	@ (3400388c <SystemInit+0x1b8>)
3400384c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003850:	461a      	mov	r2, r3
34003852:	2301      	movs	r3, #1
34003854:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34003858:	4b0a      	ldr	r3, [pc, #40]	@ (34003884 <SystemInit+0x1b0>)
3400385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400385e:	4a09      	ldr	r2, [pc, #36]	@ (34003884 <SystemInit+0x1b0>)
34003860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34003864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34003868:	4b0c      	ldr	r3, [pc, #48]	@ (3400389c <SystemInit+0x1c8>)
3400386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400386e:	4a0b      	ldr	r2, [pc, #44]	@ (3400389c <SystemInit+0x1c8>)
34003870:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34003874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34003878:	bf00      	nop
3400387a:	46bd      	mov	sp, r7
3400387c:	f85d 7b04 	ldr.w	r7, [sp], #4
34003880:	4770      	bx	lr
34003882:	bf00      	nop
34003884:	e000ed00 	.word	0xe000ed00
34003888:	34000400 	.word	0x34000400
3400388c:	56028000 	.word	0x56028000
34003890:	e000edd0 	.word	0xe000edd0
34003894:	56008000 	.word	0x56008000
34003898:	56024800 	.word	0x56024800
3400389c:	e002ed00 	.word	0xe002ed00

340038a0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
340038a0:	b480      	push	{r7}
340038a2:	b08d      	sub	sp, #52	@ 0x34
340038a4:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
340038a6:	2300      	movs	r3, #0
340038a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
340038aa:	2300      	movs	r3, #0
340038ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
340038ae:	2300      	movs	r3, #0
340038b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
340038b2:	2300      	movs	r3, #0
340038b4:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
340038b6:	2300      	movs	r3, #0
340038b8:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
340038ba:	2300      	movs	r3, #0
340038bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340038be:	4b9b      	ldr	r3, [pc, #620]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
340038c0:	6a1b      	ldr	r3, [r3, #32]
340038c2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
340038c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340038ca:	d029      	beq.n	34003920 <SystemCoreClockUpdate+0x80>
340038cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340038d0:	f200 8180 	bhi.w	34003bd4 <SystemCoreClockUpdate+0x334>
340038d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340038d8:	d01f      	beq.n	3400391a <SystemCoreClockUpdate+0x7a>
340038da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340038de:	f200 8179 	bhi.w	34003bd4 <SystemCoreClockUpdate+0x334>
340038e2:	2b00      	cmp	r3, #0
340038e4:	d003      	beq.n	340038ee <SystemCoreClockUpdate+0x4e>
340038e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340038ea:	d00a      	beq.n	34003902 <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
340038ec:	e172      	b.n	34003bd4 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340038ee:	4b8f      	ldr	r3, [pc, #572]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
340038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340038f2:	09db      	lsrs	r3, r3, #7
340038f4:	f003 0303 	and.w	r3, r3, #3
340038f8:	4a8d      	ldr	r2, [pc, #564]	@ (34003b30 <SystemCoreClockUpdate+0x290>)
340038fa:	fa22 f303 	lsr.w	r3, r2, r3
340038fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34003900:	e169      	b.n	34003bd6 <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34003902:	4b8a      	ldr	r3, [pc, #552]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34003906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400390a:	2b00      	cmp	r3, #0
3400390c:	d102      	bne.n	34003914 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
3400390e:	4b89      	ldr	r3, [pc, #548]	@ (34003b34 <SystemCoreClockUpdate+0x294>)
34003910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34003912:	e160      	b.n	34003bd6 <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
34003914:	4b88      	ldr	r3, [pc, #544]	@ (34003b38 <SystemCoreClockUpdate+0x298>)
34003916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34003918:	e15d      	b.n	34003bd6 <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
3400391a:	4b88      	ldr	r3, [pc, #544]	@ (34003b3c <SystemCoreClockUpdate+0x29c>)
3400391c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3400391e:	e15a      	b.n	34003bd6 <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34003920:	4b82      	ldr	r3, [pc, #520]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003922:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34003926:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3400392a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400392e:	d066      	beq.n	340039fe <SystemCoreClockUpdate+0x15e>
34003930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003934:	f200 8091 	bhi.w	34003a5a <SystemCoreClockUpdate+0x1ba>
34003938:	2b00      	cmp	r3, #0
3400393a:	d003      	beq.n	34003944 <SystemCoreClockUpdate+0xa4>
3400393c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34003940:	d02f      	beq.n	340039a2 <SystemCoreClockUpdate+0x102>
34003942:	e08a      	b.n	34003a5a <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34003944:	4b79      	ldr	r3, [pc, #484]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400394a:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
3400394c:	68fb      	ldr	r3, [r7, #12]
3400394e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34003952:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
34003954:	68fb      	ldr	r3, [r7, #12]
34003956:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400395a:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3400395c:	693b      	ldr	r3, [r7, #16]
3400395e:	2b00      	cmp	r3, #0
34003960:	f040 80a9 	bne.w	34003ab6 <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
34003964:	68fb      	ldr	r3, [r7, #12]
34003966:	0d1b      	lsrs	r3, r3, #20
34003968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3400396c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
3400396e:	68fb      	ldr	r3, [r7, #12]
34003970:	0a1b      	lsrs	r3, r3, #8
34003972:	f3c3 030b 	ubfx	r3, r3, #0, #12
34003976:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34003978:	4b6c      	ldr	r3, [pc, #432]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
3400397a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400397e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34003982:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34003984:	4b69      	ldr	r3, [pc, #420]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400398a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
3400398c:	68fb      	ldr	r3, [r7, #12]
3400398e:	0edb      	lsrs	r3, r3, #27
34003990:	f003 0307 	and.w	r3, r3, #7
34003994:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
34003996:	68fb      	ldr	r3, [r7, #12]
34003998:	0e1b      	lsrs	r3, r3, #24
3400399a:	f003 0307 	and.w	r3, r3, #7
3400399e:	61bb      	str	r3, [r7, #24]
      break;
340039a0:	e089      	b.n	34003ab6 <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
340039a2:	4b62      	ldr	r3, [pc, #392]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
340039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340039a8:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
340039aa:	68fb      	ldr	r3, [r7, #12]
340039ac:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
340039b0:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
340039b2:	68fb      	ldr	r3, [r7, #12]
340039b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340039b8:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
340039ba:	693b      	ldr	r3, [r7, #16]
340039bc:	2b00      	cmp	r3, #0
340039be:	d17c      	bne.n	34003aba <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
340039c0:	68fb      	ldr	r3, [r7, #12]
340039c2:	0d1b      	lsrs	r3, r3, #20
340039c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
340039c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
340039ca:	68fb      	ldr	r3, [r7, #12]
340039cc:	0a1b      	lsrs	r3, r3, #8
340039ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
340039d2:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340039d4:	4b55      	ldr	r3, [pc, #340]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
340039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
340039da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340039de:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
340039e0:	4b52      	ldr	r3, [pc, #328]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
340039e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
340039e6:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
340039e8:	68fb      	ldr	r3, [r7, #12]
340039ea:	0edb      	lsrs	r3, r3, #27
340039ec:	f003 0307 	and.w	r3, r3, #7
340039f0:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
340039f2:	68fb      	ldr	r3, [r7, #12]
340039f4:	0e1b      	lsrs	r3, r3, #24
340039f6:	f003 0307 	and.w	r3, r3, #7
340039fa:	61bb      	str	r3, [r7, #24]
      break;
340039fc:	e05d      	b.n	34003aba <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
340039fe:	4b4b      	ldr	r3, [pc, #300]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003a00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34003a04:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
34003a06:	68fb      	ldr	r3, [r7, #12]
34003a08:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34003a0c:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
34003a0e:	68fb      	ldr	r3, [r7, #12]
34003a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34003a14:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34003a16:	693b      	ldr	r3, [r7, #16]
34003a18:	2b00      	cmp	r3, #0
34003a1a:	d150      	bne.n	34003abe <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
34003a1c:	68fb      	ldr	r3, [r7, #12]
34003a1e:	0d1b      	lsrs	r3, r3, #20
34003a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34003a24:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
34003a26:	68fb      	ldr	r3, [r7, #12]
34003a28:	0a1b      	lsrs	r3, r3, #8
34003a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
34003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34003a30:	4b3e      	ldr	r3, [pc, #248]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34003a36:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34003a3a:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34003a3c:	4b3b      	ldr	r3, [pc, #236]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003a3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34003a42:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34003a44:	68fb      	ldr	r3, [r7, #12]
34003a46:	0edb      	lsrs	r3, r3, #27
34003a48:	f003 0307 	and.w	r3, r3, #7
34003a4c:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
34003a4e:	68fb      	ldr	r3, [r7, #12]
34003a50:	0e1b      	lsrs	r3, r3, #24
34003a52:	f003 0307 	and.w	r3, r3, #7
34003a56:	61bb      	str	r3, [r7, #24]
      break;
34003a58:	e031      	b.n	34003abe <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34003a5a:	4b34      	ldr	r3, [pc, #208]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34003a60:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34003a62:	68fb      	ldr	r3, [r7, #12]
34003a64:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34003a68:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
34003a6a:	68fb      	ldr	r3, [r7, #12]
34003a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34003a70:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34003a72:	693b      	ldr	r3, [r7, #16]
34003a74:	2b00      	cmp	r3, #0
34003a76:	d124      	bne.n	34003ac2 <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34003a78:	68fb      	ldr	r3, [r7, #12]
34003a7a:	0d1b      	lsrs	r3, r3, #20
34003a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34003a82:	68fb      	ldr	r3, [r7, #12]
34003a84:	0a1b      	lsrs	r3, r3, #8
34003a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
34003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34003a8c:	4b27      	ldr	r3, [pc, #156]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34003a92:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34003a96:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34003a98:	4b24      	ldr	r3, [pc, #144]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003a9a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34003a9e:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34003aa0:	68fb      	ldr	r3, [r7, #12]
34003aa2:	0edb      	lsrs	r3, r3, #27
34003aa4:	f003 0307 	and.w	r3, r3, #7
34003aa8:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34003aaa:	68fb      	ldr	r3, [r7, #12]
34003aac:	0e1b      	lsrs	r3, r3, #24
34003aae:	f003 0307 	and.w	r3, r3, #7
34003ab2:	61bb      	str	r3, [r7, #24]
      break;
34003ab4:	e005      	b.n	34003ac2 <SystemCoreClockUpdate+0x222>
      break;
34003ab6:	bf00      	nop
34003ab8:	e004      	b.n	34003ac4 <SystemCoreClockUpdate+0x224>
      break;
34003aba:	bf00      	nop
34003abc:	e002      	b.n	34003ac4 <SystemCoreClockUpdate+0x224>
      break;
34003abe:	bf00      	nop
34003ac0:	e000      	b.n	34003ac4 <SystemCoreClockUpdate+0x224>
      break;
34003ac2:	bf00      	nop
    switch (pllsource)
34003ac4:	697b      	ldr	r3, [r7, #20]
34003ac6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34003aca:	d02c      	beq.n	34003b26 <SystemCoreClockUpdate+0x286>
34003acc:	697b      	ldr	r3, [r7, #20]
34003ace:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34003ad2:	d839      	bhi.n	34003b48 <SystemCoreClockUpdate+0x2a8>
34003ad4:	697b      	ldr	r3, [r7, #20]
34003ad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003ada:	d021      	beq.n	34003b20 <SystemCoreClockUpdate+0x280>
34003adc:	697b      	ldr	r3, [r7, #20]
34003ade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003ae2:	d831      	bhi.n	34003b48 <SystemCoreClockUpdate+0x2a8>
34003ae4:	697b      	ldr	r3, [r7, #20]
34003ae6:	2b00      	cmp	r3, #0
34003ae8:	d004      	beq.n	34003af4 <SystemCoreClockUpdate+0x254>
34003aea:	697b      	ldr	r3, [r7, #20]
34003aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34003af0:	d00a      	beq.n	34003b08 <SystemCoreClockUpdate+0x268>
      break;
34003af2:	e029      	b.n	34003b48 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34003af4:	4b0d      	ldr	r3, [pc, #52]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34003af8:	09db      	lsrs	r3, r3, #7
34003afa:	f003 0303 	and.w	r3, r3, #3
34003afe:	4a0c      	ldr	r2, [pc, #48]	@ (34003b30 <SystemCoreClockUpdate+0x290>)
34003b00:	fa22 f303 	lsr.w	r3, r2, r3
34003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003b06:	e020      	b.n	34003b4a <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34003b08:	4b08      	ldr	r3, [pc, #32]	@ (34003b2c <SystemCoreClockUpdate+0x28c>)
34003b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34003b0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34003b10:	2b00      	cmp	r3, #0
34003b12:	d102      	bne.n	34003b1a <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34003b14:	4b07      	ldr	r3, [pc, #28]	@ (34003b34 <SystemCoreClockUpdate+0x294>)
34003b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003b18:	e017      	b.n	34003b4a <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
34003b1a:	4b07      	ldr	r3, [pc, #28]	@ (34003b38 <SystemCoreClockUpdate+0x298>)
34003b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003b1e:	e014      	b.n	34003b4a <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34003b20:	4b06      	ldr	r3, [pc, #24]	@ (34003b3c <SystemCoreClockUpdate+0x29c>)
34003b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003b24:	e011      	b.n	34003b4a <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34003b26:	4b06      	ldr	r3, [pc, #24]	@ (34003b40 <SystemCoreClockUpdate+0x2a0>)
34003b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003b2a:	e00e      	b.n	34003b4a <SystemCoreClockUpdate+0x2aa>
34003b2c:	56028000 	.word	0x56028000
34003b30:	03d09000 	.word	0x03d09000
34003b34:	003d0900 	.word	0x003d0900
34003b38:	00f42400 	.word	0x00f42400
34003b3c:	02dc6c00 	.word	0x02dc6c00
34003b40:	00bb8000 	.word	0x00bb8000
34003b44:	4b800000 	.word	0x4b800000
      break;
34003b48:	bf00      	nop
    if (pllbypass == 0U)
34003b4a:	693b      	ldr	r3, [r7, #16]
34003b4c:	2b00      	cmp	r3, #0
34003b4e:	d134      	bne.n	34003bba <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34003b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34003b52:	ee07 3a90 	vmov	s15, r3
34003b56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34003b5c:	ee07 3a90 	vmov	s15, r3
34003b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
34003b64:	6a3b      	ldr	r3, [r7, #32]
34003b66:	ee07 3a90 	vmov	s15, r3
34003b6a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34003b6e:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 34003b44 <SystemCoreClockUpdate+0x2a4>
34003b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
34003b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
34003b7a:	ee67 6a27 	vmul.f32	s13, s14, s15
34003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34003b80:	ee07 3a90 	vmov	s15, r3
34003b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34003b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
34003b8c:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34003b90:	69fb      	ldr	r3, [r7, #28]
34003b92:	ee07 3a90 	vmov	s15, r3
34003b96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34003b9a:	69bb      	ldr	r3, [r7, #24]
34003b9c:	ee07 3a90 	vmov	s15, r3
34003ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
34003ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
34003ba8:	edd7 6a02 	vldr	s13, [r7, #8]
34003bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
34003bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34003bb4:	ee17 3a90 	vmov	r3, s15
34003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34003bba:	4b0b      	ldr	r3, [pc, #44]	@ (34003be8 <SystemCoreClockUpdate+0x348>)
34003bbc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34003bc0:	0c1b      	lsrs	r3, r3, #16
34003bc2:	b2db      	uxtb	r3, r3
34003bc4:	3301      	adds	r3, #1
34003bc6:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
34003bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34003bca:	687b      	ldr	r3, [r7, #4]
34003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
34003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34003bd2:	e000      	b.n	34003bd6 <SystemCoreClockUpdate+0x336>
    break;
34003bd4:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34003bd6:	4a05      	ldr	r2, [pc, #20]	@ (34003bec <SystemCoreClockUpdate+0x34c>)
34003bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34003bda:	6013      	str	r3, [r2, #0]
}
34003bdc:	bf00      	nop
34003bde:	3734      	adds	r7, #52	@ 0x34
34003be0:	46bd      	mov	sp, r7
34003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
34003be6:	4770      	bx	lr
34003be8:	56028000 	.word	0x56028000
34003bec:	34020704 	.word	0x34020704

34003bf0 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34003bf0:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34003bf4:	b588      	push	{r3, r7, lr}
34003bf6:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
34003bf8:	f7ff fe52 	bl	340038a0 <SystemCoreClockUpdate>

  return SystemCoreClock;
34003bfc:	4b06      	ldr	r3, [pc, #24]	@ (34003c18 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
34003bfe:	681b      	ldr	r3, [r3, #0]
}
34003c00:	4618      	mov	r0, r3
34003c02:	46bd      	mov	sp, r7
34003c04:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
34003c08:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34003c0c:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34003c10:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34003c14:	4774      	bxns	lr
34003c16:	bf00      	nop
34003c18:	34020704 	.word	0x34020704

34003c1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34003c1c:	b580      	push	{r7, lr}
34003c1e:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34003c20:	2003      	movs	r0, #3
34003c22:	f000 fb43 	bl	340042ac <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
34003c26:	f7ff fe3b 	bl	340038a0 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34003c2a:	200f      	movs	r0, #15
34003c2c:	f000 f812 	bl	34003c54 <HAL_InitTick>
34003c30:	4603      	mov	r3, r0
34003c32:	2b00      	cmp	r3, #0
34003c34:	d001      	beq.n	34003c3a <HAL_Init+0x1e>
  {
    return HAL_ERROR;
34003c36:	2301      	movs	r3, #1
34003c38:	e002      	b.n	34003c40 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
34003c3a:	f000 f803 	bl	34003c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
34003c3e:	2300      	movs	r3, #0
}
34003c40:	4618      	mov	r0, r3
34003c42:	bd80      	pop	{r7, pc}

34003c44 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
34003c44:	b480      	push	{r7}
34003c46:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
34003c48:	bf00      	nop
34003c4a:	46bd      	mov	sp, r7
34003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
34003c50:	4770      	bx	lr
	...

34003c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34003c54:	b580      	push	{r7, lr}
34003c56:	b082      	sub	sp, #8
34003c58:	af00      	add	r7, sp, #0
34003c5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34003c5c:	4b15      	ldr	r3, [pc, #84]	@ (34003cb4 <HAL_InitTick+0x60>)
34003c5e:	781b      	ldrb	r3, [r3, #0]
34003c60:	2b00      	cmp	r3, #0
34003c62:	d101      	bne.n	34003c68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
34003c64:	2301      	movs	r3, #1
34003c66:	e021      	b.n	34003cac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34003c68:	4b13      	ldr	r3, [pc, #76]	@ (34003cb8 <HAL_InitTick+0x64>)
34003c6a:	681a      	ldr	r2, [r3, #0]
34003c6c:	4b11      	ldr	r3, [pc, #68]	@ (34003cb4 <HAL_InitTick+0x60>)
34003c6e:	781b      	ldrb	r3, [r3, #0]
34003c70:	4619      	mov	r1, r3
34003c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34003c76:	fbb3 f3f1 	udiv	r3, r3, r1
34003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
34003c7e:	4618      	mov	r0, r3
34003c80:	f000 fba8 	bl	340043d4 <HAL_SYSTICK_Config>
34003c84:	4603      	mov	r3, r0
34003c86:	2b00      	cmp	r3, #0
34003c88:	d001      	beq.n	34003c8e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
34003c8a:	2301      	movs	r3, #1
34003c8c:	e00e      	b.n	34003cac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
34003c8e:	687b      	ldr	r3, [r7, #4]
34003c90:	2b0f      	cmp	r3, #15
34003c92:	d80a      	bhi.n	34003caa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34003c94:	2200      	movs	r2, #0
34003c96:	6879      	ldr	r1, [r7, #4]
34003c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34003c9c:	f000 fb26 	bl	340042ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
34003ca0:	4a06      	ldr	r2, [pc, #24]	@ (34003cbc <HAL_InitTick+0x68>)
34003ca2:	687b      	ldr	r3, [r7, #4]
34003ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
34003ca6:	2300      	movs	r3, #0
34003ca8:	e000      	b.n	34003cac <HAL_InitTick+0x58>
    return HAL_ERROR;
34003caa:	2301      	movs	r3, #1
}
34003cac:	4618      	mov	r0, r3
34003cae:	3708      	adds	r7, #8
34003cb0:	46bd      	mov	sp, r7
34003cb2:	bd80      	pop	{r7, pc}
34003cb4:	3402070c 	.word	0x3402070c
34003cb8:	34020704 	.word	0x34020704
34003cbc:	34020708 	.word	0x34020708

34003cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
34003cc0:	b480      	push	{r7}
34003cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
34003cc4:	4b06      	ldr	r3, [pc, #24]	@ (34003ce0 <HAL_IncTick+0x20>)
34003cc6:	781b      	ldrb	r3, [r3, #0]
34003cc8:	461a      	mov	r2, r3
34003cca:	4b06      	ldr	r3, [pc, #24]	@ (34003ce4 <HAL_IncTick+0x24>)
34003ccc:	681b      	ldr	r3, [r3, #0]
34003cce:	4413      	add	r3, r2
34003cd0:	4a04      	ldr	r2, [pc, #16]	@ (34003ce4 <HAL_IncTick+0x24>)
34003cd2:	6013      	str	r3, [r2, #0]
}
34003cd4:	bf00      	nop
34003cd6:	46bd      	mov	sp, r7
34003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
34003cdc:	4770      	bx	lr
34003cde:	bf00      	nop
34003ce0:	3402070c 	.word	0x3402070c
34003ce4:	34020ac0 	.word	0x34020ac0

34003ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
34003ce8:	b480      	push	{r7}
34003cea:	af00      	add	r7, sp, #0
  return uwTick;
34003cec:	4b03      	ldr	r3, [pc, #12]	@ (34003cfc <HAL_GetTick+0x14>)
34003cee:	681b      	ldr	r3, [r3, #0]
}
34003cf0:	4618      	mov	r0, r3
34003cf2:	46bd      	mov	sp, r7
34003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
34003cf8:	4770      	bx	lr
34003cfa:	bf00      	nop
34003cfc:	34020ac0 	.word	0x34020ac0

34003d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34003d00:	b580      	push	{r7, lr}
34003d02:	b084      	sub	sp, #16
34003d04:	af00      	add	r7, sp, #0
34003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34003d08:	f7ff ffee 	bl	34003ce8 <HAL_GetTick>
34003d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34003d0e:	687b      	ldr	r3, [r7, #4]
34003d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34003d12:	68fb      	ldr	r3, [r7, #12]
34003d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34003d18:	d005      	beq.n	34003d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34003d1a:	4b0a      	ldr	r3, [pc, #40]	@ (34003d44 <HAL_Delay+0x44>)
34003d1c:	781b      	ldrb	r3, [r3, #0]
34003d1e:	461a      	mov	r2, r3
34003d20:	68fb      	ldr	r3, [r7, #12]
34003d22:	4413      	add	r3, r2
34003d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
34003d26:	bf00      	nop
34003d28:	f7ff ffde 	bl	34003ce8 <HAL_GetTick>
34003d2c:	4602      	mov	r2, r0
34003d2e:	68bb      	ldr	r3, [r7, #8]
34003d30:	1ad3      	subs	r3, r2, r3
34003d32:	68fa      	ldr	r2, [r7, #12]
34003d34:	429a      	cmp	r2, r3
34003d36:	d8f7      	bhi.n	34003d28 <HAL_Delay+0x28>
  {
  }
}
34003d38:	bf00      	nop
34003d3a:	bf00      	nop
34003d3c:	3710      	adds	r7, #16
34003d3e:	46bd      	mov	sp, r7
34003d40:	bd80      	pop	{r7, pc}
34003d42:	bf00      	nop
34003d44:	3402070c 	.word	0x3402070c

34003d48 <HAL_BSEC_OTP_Read>:
  * @param  pFuseData  Returned value of fuse. The returned value is between 0 and 0xFFFFFFFFU
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Read(BSEC_HandleTypeDef * hbsec, uint32_t FuseId, uint32_t *pFuseData)
{
34003d48:	b580      	push	{r7, lr}
34003d4a:	b084      	sub	sp, #16
34003d4c:	af00      	add	r7, sp, #0
34003d4e:	60f8      	str	r0, [r7, #12]
34003d50:	60b9      	str	r1, [r7, #8]
34003d52:	607a      	str	r2, [r7, #4]
  /* Check the handle pointer */
  if (hbsec == NULL)
34003d54:	68fb      	ldr	r3, [r7, #12]
34003d56:	2b00      	cmp	r3, #0
34003d58:	d101      	bne.n	34003d5e <HAL_BSEC_OTP_Read+0x16>
  {
    return HAL_ERROR;
34003d5a:	2301      	movs	r3, #1
34003d5c:	e026      	b.n	34003dac <HAL_BSEC_OTP_Read+0x64>
  }

  /* Check the address of returned value and instance */
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
34003d5e:	687b      	ldr	r3, [r7, #4]
34003d60:	2b00      	cmp	r3, #0
34003d62:	d004      	beq.n	34003d6e <HAL_BSEC_OTP_Read+0x26>
34003d64:	68fb      	ldr	r3, [r7, #12]
34003d66:	681b      	ldr	r3, [r3, #0]
34003d68:	4a12      	ldr	r2, [pc, #72]	@ (34003db4 <HAL_BSEC_OTP_Read+0x6c>)
34003d6a:	4293      	cmp	r3, r2
34003d6c:	d004      	beq.n	34003d78 <HAL_BSEC_OTP_Read+0x30>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003d6e:	68fb      	ldr	r3, [r7, #12]
34003d70:	2201      	movs	r2, #1
34003d72:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003d74:	2301      	movs	r3, #1
34003d76:	e019      	b.n	34003dac <HAL_BSEC_OTP_Read+0x64>
  }

  if (FuseId < BSEC_NB_FUSES)
34003d78:	68bb      	ldr	r3, [r7, #8]
34003d7a:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003d7e:	d211      	bcs.n	34003da4 <HAL_BSEC_OTP_Read+0x5c>
  {
    /* Reload the data :
       - Unshadowed fuse are not automatically reload and data no more available after register read
       - Shadowed fuse contains by default the shadow value in the register */
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
34003d80:	68b9      	ldr	r1, [r7, #8]
34003d82:	68f8      	ldr	r0, [r7, #12]
34003d84:	f000 f8ba 	bl	34003efc <HAL_BSEC_OTP_Reload>
34003d88:	4603      	mov	r3, r0
34003d8a:	2b00      	cmp	r3, #0
34003d8c:	d108      	bne.n	34003da0 <HAL_BSEC_OTP_Read+0x58>
    {
      /* Read data from shadow register */
      *pFuseData = hbsec->Instance->FVRw[FuseId];
34003d8e:	68fb      	ldr	r3, [r7, #12]
34003d90:	681b      	ldr	r3, [r3, #0]
34003d92:	68ba      	ldr	r2, [r7, #8]
34003d94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003d98:	687b      	ldr	r3, [r7, #4]
34003d9a:	601a      	str	r2, [r3, #0]
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
34003d9c:	2300      	movs	r3, #0
34003d9e:	e005      	b.n	34003dac <HAL_BSEC_OTP_Read+0x64>
      return HAL_ERROR;
34003da0:	2301      	movs	r3, #1
34003da2:	e003      	b.n	34003dac <HAL_BSEC_OTP_Read+0x64>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003da4:	68fb      	ldr	r3, [r7, #12]
34003da6:	2201      	movs	r2, #1
34003da8:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003daa:	2301      	movs	r3, #1
}
34003dac:	4618      	mov	r0, r3
34003dae:	3710      	adds	r7, #16
34003db0:	46bd      	mov	sp, r7
34003db2:	bd80      	pop	{r7, pc}
34003db4:	56009000 	.word	0x56009000

34003db8 <HAL_BSEC_OTP_Program>:
  * @param  Lock      Permanent lock value, this parameter is @ref BSEC_Permanent_Lock
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Program(BSEC_HandleTypeDef *hbsec, uint32_t FuseId, uint32_t FuseData, uint32_t Lock)
{
34003db8:	b580      	push	{r7, lr}
34003dba:	b088      	sub	sp, #32
34003dbc:	af00      	add	r7, sp, #0
34003dbe:	60f8      	str	r0, [r7, #12]
34003dc0:	60b9      	str	r1, [r7, #8]
34003dc2:	607a      	str	r2, [r7, #4]
34003dc4:	603b      	str	r3, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t read_data;
  uint32_t tick_start = HAL_GetTick();
34003dc6:	f7ff ff8f 	bl	34003ce8 <HAL_GetTick>
34003dca:	61f8      	str	r0, [r7, #28]

  /* Check the handle pointer */
  if (hbsec == NULL)
34003dcc:	68fb      	ldr	r3, [r7, #12]
34003dce:	2b00      	cmp	r3, #0
34003dd0:	d101      	bne.n	34003dd6 <HAL_BSEC_OTP_Program+0x1e>
  {
    return HAL_ERROR;
34003dd2:	2301      	movs	r3, #1
34003dd4:	e08a      	b.n	34003eec <HAL_BSEC_OTP_Program+0x134>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34003dd6:	68fb      	ldr	r3, [r7, #12]
34003dd8:	681b      	ldr	r3, [r3, #0]
34003dda:	4a46      	ldr	r2, [pc, #280]	@ (34003ef4 <HAL_BSEC_OTP_Program+0x13c>)
34003ddc:	4293      	cmp	r3, r2
34003dde:	d004      	beq.n	34003dea <HAL_BSEC_OTP_Program+0x32>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003de0:	68fb      	ldr	r3, [r7, #12]
34003de2:	2201      	movs	r2, #1
34003de4:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003de6:	2301      	movs	r3, #1
34003de8:	e080      	b.n	34003eec <HAL_BSEC_OTP_Program+0x134>
  }

  /* Check the permanent lock */
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
34003dea:	683b      	ldr	r3, [r7, #0]
34003dec:	2b00      	cmp	r3, #0
34003dee:	d008      	beq.n	34003e02 <HAL_BSEC_OTP_Program+0x4a>
34003df0:	683b      	ldr	r3, [r7, #0]
34003df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34003df6:	d004      	beq.n	34003e02 <HAL_BSEC_OTP_Program+0x4a>
34003df8:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
34003dfc:	483e      	ldr	r0, [pc, #248]	@ (34003ef8 <HAL_BSEC_OTP_Program+0x140>)
34003dfe:	f7fd ff51 	bl	34001ca4 <assert_failed>

  /* Get the correct register value */
  if (FuseId < BSEC_NB_FUSES)
34003e02:	68bb      	ldr	r3, [r7, #8]
34003e04:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003e08:	d26a      	bcs.n	34003ee0 <HAL_BSEC_OTP_Program+0x128>
  {
    status_reg = FuseId / 32U;
34003e0a:	68bb      	ldr	r3, [r7, #8]
34003e0c:	095b      	lsrs	r3, r3, #5
34003e0e:	61bb      	str	r3, [r7, #24]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34003e10:	68bb      	ldr	r3, [r7, #8]
34003e12:	f003 031f 	and.w	r3, r3, #31
34003e16:	2201      	movs	r2, #1
34003e18:	fa02 f303 	lsl.w	r3, r2, r3
34003e1c:	617b      	str	r3, [r7, #20]

    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34003e1e:	68fb      	ldr	r3, [r7, #12]
34003e20:	681b      	ldr	r3, [r3, #0]
34003e22:	69ba      	ldr	r2, [r7, #24]
34003e24:	f502 7200 	add.w	r2, r2, #512	@ 0x200
34003e28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003e2c:	697b      	ldr	r3, [r7, #20]
34003e2e:	4013      	ands	r3, r2
34003e30:	2b00      	cmp	r3, #0
34003e32:	d150      	bne.n	34003ed6 <HAL_BSEC_OTP_Program+0x11e>
    {
      /* Write data in register */
      hbsec->Instance->WDR = FuseData;
34003e34:	68fb      	ldr	r3, [r7, #12]
34003e36:	681b      	ldr	r3, [r3, #0]
34003e38:	687a      	ldr	r2, [r7, #4]
34003e3a:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08

      /* Perform a program of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
34003e3e:	68fb      	ldr	r3, [r7, #12]
34003e40:	681b      	ldr	r3, [r3, #0]
34003e42:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34003e46:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
34003e4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34003e4e:	68b9      	ldr	r1, [r7, #8]
34003e50:	683a      	ldr	r2, [r7, #0]
34003e52:	430a      	orrs	r2, r1
34003e54:	431a      	orrs	r2, r3
34003e56:	68fb      	ldr	r3, [r7, #12]
34003e58:	681b      	ldr	r3, [r3, #0]
34003e5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
34003e5e:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
                                         (FuseId | BSEC_OTPCR_PROG | Lock));

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003e62:	e00c      	b.n	34003e7e <HAL_BSEC_OTP_Program+0xc6>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34003e64:	f7ff ff40 	bl	34003ce8 <HAL_GetTick>
34003e68:	4602      	mov	r2, r0
34003e6a:	69fb      	ldr	r3, [r7, #28]
34003e6c:	1ad3      	subs	r3, r2, r3
34003e6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34003e72:	d904      	bls.n	34003e7e <HAL_BSEC_OTP_Program+0xc6>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34003e74:	68fb      	ldr	r3, [r7, #12]
34003e76:	220a      	movs	r2, #10
34003e78:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34003e7a:	2301      	movs	r3, #1
34003e7c:	e036      	b.n	34003eec <HAL_BSEC_OTP_Program+0x134>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003e7e:	68fb      	ldr	r3, [r7, #12]
34003e80:	681b      	ldr	r3, [r3, #0]
34003e82:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003e86:	f003 0301 	and.w	r3, r3, #1
34003e8a:	2b00      	cmp	r3, #0
34003e8c:	d1ea      	bne.n	34003e64 <HAL_BSEC_OTP_Program+0xac>
        }
      }

      /* Check programming errors */
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
34003e8e:	68fb      	ldr	r3, [r7, #12]
34003e90:	681b      	ldr	r3, [r3, #0]
34003e92:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003e96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34003e9a:	2b00      	cmp	r3, #0
34003e9c:	d005      	beq.n	34003eaa <HAL_BSEC_OTP_Program+0xf2>
      {
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
34003e9e:	68fb      	ldr	r3, [r7, #12]
34003ea0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34003ea4:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
34003ea6:	2301      	movs	r3, #1
34003ea8:	e020      	b.n	34003eec <HAL_BSEC_OTP_Program+0x134>
      }

      /* Read back programmed data */
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
34003eaa:	f107 0310 	add.w	r3, r7, #16
34003eae:	461a      	mov	r2, r3
34003eb0:	68b9      	ldr	r1, [r7, #8]
34003eb2:	68f8      	ldr	r0, [r7, #12]
34003eb4:	f7ff ff48 	bl	34003d48 <HAL_BSEC_OTP_Read>
34003eb8:	4603      	mov	r3, r0
34003eba:	2b00      	cmp	r3, #0
34003ebc:	d109      	bne.n	34003ed2 <HAL_BSEC_OTP_Program+0x11a>
      {
        /* Verify programmed data */
        if (read_data != FuseData)
34003ebe:	693b      	ldr	r3, [r7, #16]
34003ec0:	687a      	ldr	r2, [r7, #4]
34003ec2:	429a      	cmp	r2, r3
34003ec4:	d011      	beq.n	34003eea <HAL_BSEC_OTP_Program+0x132>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
34003ec6:	68fb      	ldr	r3, [r7, #12]
34003ec8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34003ecc:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34003ece:	2301      	movs	r3, #1
34003ed0:	e00c      	b.n	34003eec <HAL_BSEC_OTP_Program+0x134>
        }
      }
      else
      {
        return HAL_ERROR;
34003ed2:	2301      	movs	r3, #1
34003ed4:	e00a      	b.n	34003eec <HAL_BSEC_OTP_Program+0x134>
      }
    }
    else
    {
      /* Fuse is sticky programming locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34003ed6:	68fb      	ldr	r3, [r7, #12]
34003ed8:	2204      	movs	r2, #4
34003eda:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
34003edc:	2301      	movs	r3, #1
34003ede:	e005      	b.n	34003eec <HAL_BSEC_OTP_Program+0x134>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003ee0:	68fb      	ldr	r3, [r7, #12]
34003ee2:	2201      	movs	r2, #1
34003ee4:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003ee6:	2301      	movs	r3, #1
34003ee8:	e000      	b.n	34003eec <HAL_BSEC_OTP_Program+0x134>
  }

  return HAL_OK;
34003eea:	2300      	movs	r3, #0
}
34003eec:	4618      	mov	r0, r3
34003eee:	3720      	adds	r7, #32
34003ef0:	46bd      	mov	sp, r7
34003ef2:	bd80      	pop	{r7, pc}
34003ef4:	56009000 	.word	0x56009000
34003ef8:	3401e3b4 	.word	0x3401e3b4

34003efc <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34003efc:	b580      	push	{r7, lr}
34003efe:	b086      	sub	sp, #24
34003f00:	af00      	add	r7, sp, #0
34003f02:	6078      	str	r0, [r7, #4]
34003f04:	6039      	str	r1, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
34003f06:	f7ff feef 	bl	34003ce8 <HAL_GetTick>
34003f0a:	6178      	str	r0, [r7, #20]

  /* Check the handle pointer */
  if (hbsec == NULL)
34003f0c:	687b      	ldr	r3, [r7, #4]
34003f0e:	2b00      	cmp	r3, #0
34003f10:	d101      	bne.n	34003f16 <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
34003f12:	2301      	movs	r3, #1
34003f14:	e063      	b.n	34003fde <HAL_BSEC_OTP_Reload+0xe2>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34003f16:	687b      	ldr	r3, [r7, #4]
34003f18:	681b      	ldr	r3, [r3, #0]
34003f1a:	4a33      	ldr	r2, [pc, #204]	@ (34003fe8 <HAL_BSEC_OTP_Reload+0xec>)
34003f1c:	4293      	cmp	r3, r2
34003f1e:	d004      	beq.n	34003f2a <HAL_BSEC_OTP_Reload+0x2e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003f20:	687b      	ldr	r3, [r7, #4]
34003f22:	2201      	movs	r2, #1
34003f24:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003f26:	2301      	movs	r3, #1
34003f28:	e059      	b.n	34003fde <HAL_BSEC_OTP_Reload+0xe2>
  }

  if (FuseId < BSEC_NB_FUSES)
34003f2a:	683b      	ldr	r3, [r7, #0]
34003f2c:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003f30:	d24f      	bcs.n	34003fd2 <HAL_BSEC_OTP_Reload+0xd6>
  {
    status_reg = FuseId / 32U;
34003f32:	683b      	ldr	r3, [r7, #0]
34003f34:	095b      	lsrs	r3, r3, #5
34003f36:	613b      	str	r3, [r7, #16]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34003f38:	683b      	ldr	r3, [r7, #0]
34003f3a:	f003 031f 	and.w	r3, r3, #31
34003f3e:	2201      	movs	r2, #1
34003f40:	fa02 f303 	lsl.w	r3, r2, r3
34003f44:	60fb      	str	r3, [r7, #12]

    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34003f46:	687b      	ldr	r3, [r7, #4]
34003f48:	681b      	ldr	r3, [r3, #0]
34003f4a:	693a      	ldr	r2, [r7, #16]
34003f4c:	f502 7208 	add.w	r2, r2, #544	@ 0x220
34003f50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003f54:	68fb      	ldr	r3, [r7, #12]
34003f56:	4013      	ands	r3, r2
34003f58:	2b00      	cmp	r3, #0
34003f5a:	d135      	bne.n	34003fc8 <HAL_BSEC_OTP_Reload+0xcc>
    {
      /* Perform a reload of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
34003f5c:	687b      	ldr	r3, [r7, #4]
34003f5e:	681b      	ldr	r3, [r3, #0]
34003f60:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34003f64:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
34003f68:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34003f6c:	687a      	ldr	r2, [r7, #4]
34003f6e:	6812      	ldr	r2, [r2, #0]
34003f70:	6839      	ldr	r1, [r7, #0]
34003f72:	430b      	orrs	r3, r1
34003f74:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003f78:	e00c      	b.n	34003f94 <HAL_BSEC_OTP_Reload+0x98>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34003f7a:	f7ff feb5 	bl	34003ce8 <HAL_GetTick>
34003f7e:	4602      	mov	r2, r0
34003f80:	697b      	ldr	r3, [r7, #20]
34003f82:	1ad3      	subs	r3, r2, r3
34003f84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34003f88:	d904      	bls.n	34003f94 <HAL_BSEC_OTP_Reload+0x98>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34003f8a:	687b      	ldr	r3, [r7, #4]
34003f8c:	220a      	movs	r2, #10
34003f8e:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34003f90:	2301      	movs	r3, #1
34003f92:	e024      	b.n	34003fde <HAL_BSEC_OTP_Reload+0xe2>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003f94:	687b      	ldr	r3, [r7, #4]
34003f96:	681b      	ldr	r3, [r3, #0]
34003f98:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003f9c:	f003 0301 	and.w	r3, r3, #1
34003fa0:	2b00      	cmp	r3, #0
34003fa2:	d1ea      	bne.n	34003f7a <HAL_BSEC_OTP_Reload+0x7e>
        }
      }

      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
34003fa4:	687b      	ldr	r3, [r7, #4]
34003fa6:	681b      	ldr	r3, [r3, #0]
34003fa8:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003fac:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
34003fb0:	2b00      	cmp	r3, #0
34003fb2:	d013      	beq.n	34003fdc <HAL_BSEC_OTP_Reload+0xe0>
      {
        /* An error occurred during reloading, value can't be relied on */
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
34003fb4:	687b      	ldr	r3, [r7, #4]
34003fb6:	681b      	ldr	r3, [r3, #0]
34003fb8:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003fbc:	f403 028c 	and.w	r2, r3, #4587520	@ 0x460000
34003fc0:	687b      	ldr	r3, [r7, #4]
34003fc2:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
34003fc4:	2301      	movs	r3, #1
34003fc6:	e00a      	b.n	34003fde <HAL_BSEC_OTP_Reload+0xe2>
      }
    }
    else
    {
      /* Shadow register is sticky reload locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34003fc8:	687b      	ldr	r3, [r7, #4]
34003fca:	2204      	movs	r2, #4
34003fcc:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
34003fce:	2301      	movs	r3, #1
34003fd0:	e005      	b.n	34003fde <HAL_BSEC_OTP_Reload+0xe2>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003fd2:	687b      	ldr	r3, [r7, #4]
34003fd4:	2201      	movs	r2, #1
34003fd6:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003fd8:	2301      	movs	r3, #1
34003fda:	e000      	b.n	34003fde <HAL_BSEC_OTP_Reload+0xe2>
  }

  return HAL_OK;
34003fdc:	2300      	movs	r3, #0
}
34003fde:	4618      	mov	r0, r3
34003fe0:	3718      	adds	r7, #24
34003fe2:	46bd      	mov	sp, r7
34003fe4:	bd80      	pop	{r7, pc}
34003fe6:	bf00      	nop
34003fe8:	56009000 	.word	0x56009000

34003fec <HAL_CACHEAXI_Init>:
  * @note   In case HAL_CACHEAXI_Init() returns HAL_BUSY because an invalidation
  *         procedure is ongoing, the application should call again HAL_CACHEAXI_Init()
  *         until it returns HAL_OK to have the CACHEAXI enabled
  */
HAL_StatusTypeDef  HAL_CACHEAXI_Init(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34003fec:	b580      	push	{r7, lr}
34003fee:	b084      	sub	sp, #16
34003ff0:	af00      	add	r7, sp, #0
34003ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the CACHEAXI handle allocation */
  if (hcacheaxi == NULL)
34003ff4:	687b      	ldr	r3, [r7, #4]
34003ff6:	2b00      	cmp	r3, #0
34003ff8:	d101      	bne.n	34003ffe <HAL_CACHEAXI_Init+0x12>
  {
    return HAL_ERROR;
34003ffa:	2301      	movs	r3, #1
34003ffc:	e021      	b.n	34004042 <HAL_CACHEAXI_Init+0x56>
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34003ffe:	687b      	ldr	r3, [r7, #4]
34004000:	681b      	ldr	r3, [r3, #0]
34004002:	4a12      	ldr	r2, [pc, #72]	@ (3400404c <HAL_CACHEAXI_Init+0x60>)
34004004:	4293      	cmp	r3, r2
34004006:	d008      	beq.n	3400401a <HAL_CACHEAXI_Init+0x2e>
34004008:	687b      	ldr	r3, [r7, #4]
3400400a:	681b      	ldr	r3, [r3, #0]
3400400c:	4a10      	ldr	r2, [pc, #64]	@ (34004050 <HAL_CACHEAXI_Init+0x64>)
3400400e:	4293      	cmp	r3, r2
34004010:	d003      	beq.n	3400401a <HAL_CACHEAXI_Init+0x2e>
34004012:	21bc      	movs	r1, #188	@ 0xbc
34004014:	480f      	ldr	r0, [pc, #60]	@ (34004054 <HAL_CACHEAXI_Init+0x68>)
34004016:	f7fd fe45 	bl	34001ca4 <assert_failed>

  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
3400401a:	687b      	ldr	r3, [r7, #4]
3400401c:	791b      	ldrb	r3, [r3, #4]
3400401e:	b2db      	uxtb	r3, r3
34004020:	2b00      	cmp	r3, #0
34004022:	d102      	bne.n	3400402a <HAL_CACHEAXI_Init+0x3e>

    /* Init the low level hardware */
    hcacheaxi->MspInitCallback(hcacheaxi);
#else
    /* Init the low level hardware */
    HAL_CACHEAXI_MspInit(hcacheaxi);
34004024:	6878      	ldr	r0, [r7, #4]
34004026:	f7fd fe25 	bl	34001c74 <HAL_CACHEAXI_MspInit>
#endif /* USE_HAL_CACHEAXI_REGISTER_CALLBACKS */
  }

  /* Init the error code */
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400402a:	687b      	ldr	r3, [r7, #4]
3400402c:	2200      	movs	r2, #0
3400402e:	609a      	str	r2, [r3, #8]

  /* Init the CACHEAXI handle state */
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
34004030:	687b      	ldr	r3, [r7, #4]
34004032:	2201      	movs	r2, #1
34004034:	711a      	strb	r2, [r3, #4]

  /* Enable the selected CACHEAXI peripheral */
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34004036:	6878      	ldr	r0, [r7, #4]
34004038:	f000 f80e 	bl	34004058 <HAL_CACHEAXI_Enable>
3400403c:	4603      	mov	r3, r0
3400403e:	73fb      	strb	r3, [r7, #15]

  return status;
34004040:	7bfb      	ldrb	r3, [r7, #15]
}
34004042:	4618      	mov	r0, r3
34004044:	3710      	adds	r7, #16
34004046:	46bd      	mov	sp, r7
34004048:	bd80      	pop	{r7, pc}
3400404a:	bf00      	nop
3400404c:	580dfc00 	.word	0x580dfc00
34004050:	480dfc00 	.word	0x480dfc00
34004054:	3401e460 	.word	0x3401e460

34004058 <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34004058:	b580      	push	{r7, lr}
3400405a:	b084      	sub	sp, #16
3400405c:	af00      	add	r7, sp, #0
3400405e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34004060:	2300      	movs	r3, #0
34004062:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
34004064:	687b      	ldr	r3, [r7, #4]
34004066:	2b00      	cmp	r3, #0
34004068:	d101      	bne.n	3400406e <HAL_CACHEAXI_Enable+0x16>
  {
    return HAL_ERROR;
3400406a:	2301      	movs	r3, #1
3400406c:	e043      	b.n	340040f6 <HAL_CACHEAXI_Enable+0x9e>
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400406e:	687b      	ldr	r3, [r7, #4]
34004070:	681b      	ldr	r3, [r3, #0]
34004072:	4a23      	ldr	r2, [pc, #140]	@ (34004100 <HAL_CACHEAXI_Enable+0xa8>)
34004074:	4293      	cmp	r3, r2
34004076:	d009      	beq.n	3400408c <HAL_CACHEAXI_Enable+0x34>
34004078:	687b      	ldr	r3, [r7, #4]
3400407a:	681b      	ldr	r3, [r3, #0]
3400407c:	4a21      	ldr	r2, [pc, #132]	@ (34004104 <HAL_CACHEAXI_Enable+0xac>)
3400407e:	4293      	cmp	r3, r2
34004080:	d004      	beq.n	3400408c <HAL_CACHEAXI_Enable+0x34>
34004082:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
34004086:	4820      	ldr	r0, [pc, #128]	@ (34004108 <HAL_CACHEAXI_Enable+0xb0>)
34004088:	f7fd fe0c 	bl	34001ca4 <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
3400408c:	687b      	ldr	r3, [r7, #4]
3400408e:	681b      	ldr	r3, [r3, #0]
34004090:	685b      	ldr	r3, [r3, #4]
34004092:	f003 0301 	and.w	r3, r3, #1
34004096:	2b00      	cmp	r3, #0
34004098:	d01e      	beq.n	340040d8 <HAL_CACHEAXI_Enable+0x80>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
3400409a:	f7ff fe25 	bl	34003ce8 <HAL_GetTick>
3400409e:	60b8      	str	r0, [r7, #8]

    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340040a0:	e013      	b.n	340040ca <HAL_CACHEAXI_Enable+0x72>
    {
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
340040a2:	f7ff fe21 	bl	34003ce8 <HAL_GetTick>
340040a6:	4602      	mov	r2, r0
340040a8:	68bb      	ldr	r3, [r7, #8]
340040aa:	1ad3      	subs	r3, r2, r3
340040ac:	2b01      	cmp	r3, #1
340040ae:	d90c      	bls.n	340040ca <HAL_CACHEAXI_Enable+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
340040b0:	687b      	ldr	r3, [r7, #4]
340040b2:	681b      	ldr	r3, [r3, #0]
340040b4:	685b      	ldr	r3, [r3, #4]
340040b6:	f003 0301 	and.w	r3, r3, #1
340040ba:	2b00      	cmp	r3, #0
340040bc:	d105      	bne.n	340040ca <HAL_CACHEAXI_Enable+0x72>
        {
          /* Update error code */
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
340040be:	687b      	ldr	r3, [r7, #4]
340040c0:	2210      	movs	r2, #16
340040c2:	609a      	str	r2, [r3, #8]
          /* Return error status */
          status =  HAL_ERROR;
340040c4:	2301      	movs	r3, #1
340040c6:	73fb      	strb	r3, [r7, #15]
          break;
340040c8:	e006      	b.n	340040d8 <HAL_CACHEAXI_Enable+0x80>
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340040ca:	687b      	ldr	r3, [r7, #4]
340040cc:	681b      	ldr	r3, [r3, #0]
340040ce:	685b      	ldr	r3, [r3, #4]
340040d0:	f003 0301 	and.w	r3, r3, #1
340040d4:	2b00      	cmp	r3, #0
340040d6:	d1e4      	bne.n	340040a2 <HAL_CACHEAXI_Enable+0x4a>
        }
      }
    }
  }

  if (status == HAL_OK)
340040d8:	7bfb      	ldrb	r3, [r7, #15]
340040da:	2b00      	cmp	r3, #0
340040dc:	d10a      	bne.n	340040f4 <HAL_CACHEAXI_Enable+0x9c>
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340040de:	687b      	ldr	r3, [r7, #4]
340040e0:	2200      	movs	r2, #0
340040e2:	609a      	str	r2, [r3, #8]
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340040e4:	687b      	ldr	r3, [r7, #4]
340040e6:	681b      	ldr	r3, [r3, #0]
340040e8:	681a      	ldr	r2, [r3, #0]
340040ea:	687b      	ldr	r3, [r7, #4]
340040ec:	681b      	ldr	r3, [r3, #0]
340040ee:	f042 0201 	orr.w	r2, r2, #1
340040f2:	601a      	str	r2, [r3, #0]
  }

  return status;
340040f4:	7bfb      	ldrb	r3, [r7, #15]
}
340040f6:	4618      	mov	r0, r3
340040f8:	3710      	adds	r7, #16
340040fa:	46bd      	mov	sp, r7
340040fc:	bd80      	pop	{r7, pc}
340040fe:	bf00      	nop
34004100:	580dfc00 	.word	0x580dfc00
34004104:	480dfc00 	.word	0x480dfc00
34004108:	3401e460 	.word	0x3401e460

3400410c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
3400410c:	b480      	push	{r7}
3400410e:	b085      	sub	sp, #20
34004110:	af00      	add	r7, sp, #0
34004112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
34004114:	687b      	ldr	r3, [r7, #4]
34004116:	f003 0307 	and.w	r3, r3, #7
3400411a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400411c:	4b0c      	ldr	r3, [pc, #48]	@ (34004150 <__NVIC_SetPriorityGrouping+0x44>)
3400411e:	68db      	ldr	r3, [r3, #12]
34004120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34004122:	68ba      	ldr	r2, [r7, #8]
34004124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34004128:	4013      	ands	r3, r2
3400412a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
3400412c:	68fb      	ldr	r3, [r7, #12]
3400412e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34004130:	68bb      	ldr	r3, [r7, #8]
34004132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34004134:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34004138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
3400413c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
3400413e:	4a04      	ldr	r2, [pc, #16]	@ (34004150 <__NVIC_SetPriorityGrouping+0x44>)
34004140:	68bb      	ldr	r3, [r7, #8]
34004142:	60d3      	str	r3, [r2, #12]
}
34004144:	bf00      	nop
34004146:	3714      	adds	r7, #20
34004148:	46bd      	mov	sp, r7
3400414a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400414e:	4770      	bx	lr
34004150:	e000ed00 	.word	0xe000ed00

34004154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
34004154:	b480      	push	{r7}
34004156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34004158:	4b04      	ldr	r3, [pc, #16]	@ (3400416c <__NVIC_GetPriorityGrouping+0x18>)
3400415a:	68db      	ldr	r3, [r3, #12]
3400415c:	0a1b      	lsrs	r3, r3, #8
3400415e:	f003 0307 	and.w	r3, r3, #7
}
34004162:	4618      	mov	r0, r3
34004164:	46bd      	mov	sp, r7
34004166:	f85d 7b04 	ldr.w	r7, [sp], #4
3400416a:	4770      	bx	lr
3400416c:	e000ed00 	.word	0xe000ed00

34004170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
34004170:	b480      	push	{r7}
34004172:	b083      	sub	sp, #12
34004174:	af00      	add	r7, sp, #0
34004176:	4603      	mov	r3, r0
34004178:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
3400417a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3400417e:	2b00      	cmp	r3, #0
34004180:	db0b      	blt.n	3400419a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34004182:	88fb      	ldrh	r3, [r7, #6]
34004184:	f003 021f 	and.w	r2, r3, #31
34004188:	4907      	ldr	r1, [pc, #28]	@ (340041a8 <__NVIC_EnableIRQ+0x38>)
3400418a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3400418e:	095b      	lsrs	r3, r3, #5
34004190:	2001      	movs	r0, #1
34004192:	fa00 f202 	lsl.w	r2, r0, r2
34004196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
3400419a:	bf00      	nop
3400419c:	370c      	adds	r7, #12
3400419e:	46bd      	mov	sp, r7
340041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
340041a4:	4770      	bx	lr
340041a6:	bf00      	nop
340041a8:	e000e100 	.word	0xe000e100

340041ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
340041ac:	b480      	push	{r7}
340041ae:	b083      	sub	sp, #12
340041b0:	af00      	add	r7, sp, #0
340041b2:	4603      	mov	r3, r0
340041b4:	6039      	str	r1, [r7, #0]
340041b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
340041b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340041bc:	2b00      	cmp	r3, #0
340041be:	db0a      	blt.n	340041d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340041c0:	683b      	ldr	r3, [r7, #0]
340041c2:	b2da      	uxtb	r2, r3
340041c4:	490c      	ldr	r1, [pc, #48]	@ (340041f8 <__NVIC_SetPriority+0x4c>)
340041c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340041ca:	0112      	lsls	r2, r2, #4
340041cc:	b2d2      	uxtb	r2, r2
340041ce:	440b      	add	r3, r1
340041d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
340041d4:	e00a      	b.n	340041ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340041d6:	683b      	ldr	r3, [r7, #0]
340041d8:	b2da      	uxtb	r2, r3
340041da:	4908      	ldr	r1, [pc, #32]	@ (340041fc <__NVIC_SetPriority+0x50>)
340041dc:	88fb      	ldrh	r3, [r7, #6]
340041de:	f003 030f 	and.w	r3, r3, #15
340041e2:	3b04      	subs	r3, #4
340041e4:	0112      	lsls	r2, r2, #4
340041e6:	b2d2      	uxtb	r2, r2
340041e8:	440b      	add	r3, r1
340041ea:	761a      	strb	r2, [r3, #24]
}
340041ec:	bf00      	nop
340041ee:	370c      	adds	r7, #12
340041f0:	46bd      	mov	sp, r7
340041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
340041f6:	4770      	bx	lr
340041f8:	e000e100 	.word	0xe000e100
340041fc:	e000ed00 	.word	0xe000ed00

34004200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34004200:	b480      	push	{r7}
34004202:	b089      	sub	sp, #36	@ 0x24
34004204:	af00      	add	r7, sp, #0
34004206:	60f8      	str	r0, [r7, #12]
34004208:	60b9      	str	r1, [r7, #8]
3400420a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
3400420c:	68fb      	ldr	r3, [r7, #12]
3400420e:	f003 0307 	and.w	r3, r3, #7
34004212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34004214:	69fb      	ldr	r3, [r7, #28]
34004216:	f1c3 0307 	rsb	r3, r3, #7
3400421a:	2b04      	cmp	r3, #4
3400421c:	bf28      	it	cs
3400421e:	2304      	movcs	r3, #4
34004220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34004222:	69fb      	ldr	r3, [r7, #28]
34004224:	3304      	adds	r3, #4
34004226:	2b06      	cmp	r3, #6
34004228:	d902      	bls.n	34004230 <NVIC_EncodePriority+0x30>
3400422a:	69fb      	ldr	r3, [r7, #28]
3400422c:	3b03      	subs	r3, #3
3400422e:	e000      	b.n	34004232 <NVIC_EncodePriority+0x32>
34004230:	2300      	movs	r3, #0
34004232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34004234:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34004238:	69bb      	ldr	r3, [r7, #24]
3400423a:	fa02 f303 	lsl.w	r3, r2, r3
3400423e:	43da      	mvns	r2, r3
34004240:	68bb      	ldr	r3, [r7, #8]
34004242:	401a      	ands	r2, r3
34004244:	697b      	ldr	r3, [r7, #20]
34004246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34004248:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
3400424c:	697b      	ldr	r3, [r7, #20]
3400424e:	fa01 f303 	lsl.w	r3, r1, r3
34004252:	43d9      	mvns	r1, r3
34004254:	687b      	ldr	r3, [r7, #4]
34004256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34004258:	4313      	orrs	r3, r2
         );
}
3400425a:	4618      	mov	r0, r3
3400425c:	3724      	adds	r7, #36	@ 0x24
3400425e:	46bd      	mov	sp, r7
34004260:	f85d 7b04 	ldr.w	r7, [sp], #4
34004264:	4770      	bx	lr
	...

34004268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
34004268:	b580      	push	{r7, lr}
3400426a:	b082      	sub	sp, #8
3400426c:	af00      	add	r7, sp, #0
3400426e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34004270:	687b      	ldr	r3, [r7, #4]
34004272:	3b01      	subs	r3, #1
34004274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34004278:	d301      	bcc.n	3400427e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
3400427a:	2301      	movs	r3, #1
3400427c:	e00f      	b.n	3400429e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
3400427e:	4a0a      	ldr	r2, [pc, #40]	@ (340042a8 <SysTick_Config+0x40>)
34004280:	687b      	ldr	r3, [r7, #4]
34004282:	3b01      	subs	r3, #1
34004284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
34004286:	210f      	movs	r1, #15
34004288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400428c:	f7ff ff8e 	bl	340041ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34004290:	4b05      	ldr	r3, [pc, #20]	@ (340042a8 <SysTick_Config+0x40>)
34004292:	2200      	movs	r2, #0
34004294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34004296:	4b04      	ldr	r3, [pc, #16]	@ (340042a8 <SysTick_Config+0x40>)
34004298:	2207      	movs	r2, #7
3400429a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
3400429c:	2300      	movs	r3, #0
}
3400429e:	4618      	mov	r0, r3
340042a0:	3708      	adds	r7, #8
340042a2:	46bd      	mov	sp, r7
340042a4:	bd80      	pop	{r7, pc}
340042a6:	bf00      	nop
340042a8:	e000e010 	.word	0xe000e010

340042ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
340042ac:	b580      	push	{r7, lr}
340042ae:	b082      	sub	sp, #8
340042b0:	af00      	add	r7, sp, #0
340042b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
340042b4:	687b      	ldr	r3, [r7, #4]
340042b6:	2b07      	cmp	r3, #7
340042b8:	d00f      	beq.n	340042da <HAL_NVIC_SetPriorityGrouping+0x2e>
340042ba:	687b      	ldr	r3, [r7, #4]
340042bc:	2b06      	cmp	r3, #6
340042be:	d00c      	beq.n	340042da <HAL_NVIC_SetPriorityGrouping+0x2e>
340042c0:	687b      	ldr	r3, [r7, #4]
340042c2:	2b05      	cmp	r3, #5
340042c4:	d009      	beq.n	340042da <HAL_NVIC_SetPriorityGrouping+0x2e>
340042c6:	687b      	ldr	r3, [r7, #4]
340042c8:	2b04      	cmp	r3, #4
340042ca:	d006      	beq.n	340042da <HAL_NVIC_SetPriorityGrouping+0x2e>
340042cc:	687b      	ldr	r3, [r7, #4]
340042ce:	2b03      	cmp	r3, #3
340042d0:	d003      	beq.n	340042da <HAL_NVIC_SetPriorityGrouping+0x2e>
340042d2:	21e6      	movs	r1, #230	@ 0xe6
340042d4:	4804      	ldr	r0, [pc, #16]	@ (340042e8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
340042d6:	f7fd fce5 	bl	34001ca4 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
340042da:	6878      	ldr	r0, [r7, #4]
340042dc:	f7ff ff16 	bl	3400410c <__NVIC_SetPriorityGrouping>
}
340042e0:	bf00      	nop
340042e2:	3708      	adds	r7, #8
340042e4:	46bd      	mov	sp, r7
340042e6:	bd80      	pop	{r7, pc}
340042e8:	3401e510 	.word	0x3401e510

340042ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
340042ec:	b580      	push	{r7, lr}
340042ee:	b086      	sub	sp, #24
340042f0:	af00      	add	r7, sp, #0
340042f2:	4603      	mov	r3, r0
340042f4:	60b9      	str	r1, [r7, #8]
340042f6:	607a      	str	r2, [r7, #4]
340042f8:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
340042fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
340042fe:	f113 0f0c 	cmn.w	r3, #12
34004302:	db04      	blt.n	3400430e <HAL_NVIC_SetPriority+0x22>
34004304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34004308:	f113 0f04 	cmn.w	r3, #4
3400430c:	d103      	bne.n	34004316 <HAL_NVIC_SetPriority+0x2a>
3400430e:	21ff      	movs	r1, #255	@ 0xff
34004310:	4822      	ldr	r0, [pc, #136]	@ (3400439c <HAL_NVIC_SetPriority+0xb0>)
34004312:	f7fd fcc7 	bl	34001ca4 <assert_failed>

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
34004316:	f7ff ff1d 	bl	34004154 <__NVIC_GetPriorityGrouping>
3400431a:	4603      	mov	r3, r0
3400431c:	f003 0307 	and.w	r3, r3, #7
34004320:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
34004322:	697b      	ldr	r3, [r7, #20]
34004324:	2b02      	cmp	r3, #2
34004326:	d806      	bhi.n	34004336 <HAL_NVIC_SetPriority+0x4a>
34004328:	687b      	ldr	r3, [r7, #4]
3400432a:	2b00      	cmp	r3, #0
3400432c:	bf0c      	ite	eq
3400432e:	2301      	moveq	r3, #1
34004330:	2300      	movne	r3, #0
34004332:	b2db      	uxtb	r3, r3
34004334:	e00a      	b.n	3400434c <HAL_NVIC_SetPriority+0x60>
34004336:	697b      	ldr	r3, [r7, #20]
34004338:	3b03      	subs	r3, #3
3400433a:	2201      	movs	r2, #1
3400433c:	fa02 f303 	lsl.w	r3, r2, r3
34004340:	687a      	ldr	r2, [r7, #4]
34004342:	429a      	cmp	r2, r3
34004344:	bf34      	ite	cc
34004346:	2301      	movcc	r3, #1
34004348:	2300      	movcs	r3, #0
3400434a:	b2db      	uxtb	r3, r3
3400434c:	2b00      	cmp	r3, #0
3400434e:	d104      	bne.n	3400435a <HAL_NVIC_SetPriority+0x6e>
34004350:	f44f 7181 	mov.w	r1, #258	@ 0x102
34004354:	4811      	ldr	r0, [pc, #68]	@ (3400439c <HAL_NVIC_SetPriority+0xb0>)
34004356:	f7fd fca5 	bl	34001ca4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
3400435a:	68bb      	ldr	r3, [r7, #8]
3400435c:	2b0f      	cmp	r3, #15
3400435e:	d808      	bhi.n	34004372 <HAL_NVIC_SetPriority+0x86>
34004360:	697b      	ldr	r3, [r7, #20]
34004362:	f1c3 0307 	rsb	r3, r3, #7
34004366:	2201      	movs	r2, #1
34004368:	fa02 f303 	lsl.w	r3, r2, r3
3400436c:	68ba      	ldr	r2, [r7, #8]
3400436e:	429a      	cmp	r2, r3
34004370:	d304      	bcc.n	3400437c <HAL_NVIC_SetPriority+0x90>
34004372:	f240 1103 	movw	r1, #259	@ 0x103
34004376:	4809      	ldr	r0, [pc, #36]	@ (3400439c <HAL_NVIC_SetPriority+0xb0>)
34004378:	f7fd fc94 	bl	34001ca4 <assert_failed>

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
3400437c:	687a      	ldr	r2, [r7, #4]
3400437e:	68b9      	ldr	r1, [r7, #8]
34004380:	6978      	ldr	r0, [r7, #20]
34004382:	f7ff ff3d 	bl	34004200 <NVIC_EncodePriority>
34004386:	4602      	mov	r2, r0
34004388:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
3400438c:	4611      	mov	r1, r2
3400438e:	4618      	mov	r0, r3
34004390:	f7ff ff0c 	bl	340041ac <__NVIC_SetPriority>
}
34004394:	bf00      	nop
34004396:	3718      	adds	r7, #24
34004398:	46bd      	mov	sp, r7
3400439a:	bd80      	pop	{r7, pc}
3400439c:	3401e510 	.word	0x3401e510

340043a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
340043a0:	b580      	push	{r7, lr}
340043a2:	b082      	sub	sp, #8
340043a4:	af00      	add	r7, sp, #0
340043a6:	4603      	mov	r3, r0
340043a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
340043aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340043ae:	2b00      	cmp	r3, #0
340043b0:	da04      	bge.n	340043bc <HAL_NVIC_EnableIRQ+0x1c>
340043b2:	f240 1115 	movw	r1, #277	@ 0x115
340043b6:	4806      	ldr	r0, [pc, #24]	@ (340043d0 <HAL_NVIC_EnableIRQ+0x30>)
340043b8:	f7fd fc74 	bl	34001ca4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
340043bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340043c0:	4618      	mov	r0, r3
340043c2:	f7ff fed5 	bl	34004170 <__NVIC_EnableIRQ>
}
340043c6:	bf00      	nop
340043c8:	3708      	adds	r7, #8
340043ca:	46bd      	mov	sp, r7
340043cc:	bd80      	pop	{r7, pc}
340043ce:	bf00      	nop
340043d0:	3401e510 	.word	0x3401e510

340043d4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
340043d4:	b580      	push	{r7, lr}
340043d6:	b082      	sub	sp, #8
340043d8:	af00      	add	r7, sp, #0
340043da:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
340043dc:	6878      	ldr	r0, [r7, #4]
340043de:	f7ff ff43 	bl	34004268 <SysTick_Config>
340043e2:	4603      	mov	r3, r0
}
340043e4:	4618      	mov	r0, r3
340043e6:	3708      	adds	r7, #8
340043e8:	46bd      	mov	sp, r7
340043ea:	bd80      	pop	{r7, pc}

340043ec <HAL_DCMIPP_IRQHandler>:
  * @brief  Handles DCMIPP interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
340043ec:	b580      	push	{r7, lr}
340043ee:	b084      	sub	sp, #16
340043f0:	af00      	add	r7, sp, #0
340043f2:	6078      	str	r0, [r7, #4]
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
340043f4:	687b      	ldr	r3, [r7, #4]
340043f6:	681b      	ldr	r3, [r3, #0]
340043f8:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
340043fc:	60fb      	str	r3, [r7, #12]
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
340043fe:	687b      	ldr	r3, [r7, #4]
34004400:	681b      	ldr	r3, [r3, #0]
34004402:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
34004406:	60bb      	str	r3, [r7, #8]

  /* ========================= PIPE0 INTERRUPTS ==================== */
  /* Limit error on the PIPE0 ********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34004408:	68fb      	ldr	r3, [r7, #12]
3400440a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400440e:	2b00      	cmp	r3, #0
34004410:	d01e      	beq.n	34004450 <HAL_DCMIPP_IRQHandler+0x64>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
34004412:	68bb      	ldr	r3, [r7, #8]
34004414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34004418:	2b00      	cmp	r3, #0
3400441a:	d019      	beq.n	34004450 <HAL_DCMIPP_IRQHandler+0x64>
    {
      /* Disable Limit error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
3400441c:	687b      	ldr	r3, [r7, #4]
3400441e:	681b      	ldr	r3, [r3, #0]
34004420:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34004424:	687b      	ldr	r3, [r7, #4]
34004426:	681b      	ldr	r3, [r3, #0]
34004428:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
3400442c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
34004430:	687b      	ldr	r3, [r7, #4]
34004432:	689b      	ldr	r3, [r3, #8]
34004434:	f043 0204 	orr.w	r2, r3, #4
34004438:	687b      	ldr	r3, [r7, #4]
3400443a:	609a      	str	r2, [r3, #8]

      /* Clear the Limit error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
3400443c:	687b      	ldr	r3, [r7, #4]
3400443e:	681b      	ldr	r3, [r3, #0]
34004440:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34004444:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LIMIT Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
34004448:	2100      	movs	r1, #0
3400444a:	6878      	ldr	r0, [r7, #4]
3400444c:	f000 fe67 	bl	3400511e <HAL_DCMIPP_PIPE_LimitEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
34004450:	68fb      	ldr	r3, [r7, #12]
34004452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004456:	2b00      	cmp	r3, #0
34004458:	d00e      	beq.n	34004478 <HAL_DCMIPP_IRQHandler+0x8c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
3400445a:	68bb      	ldr	r3, [r7, #8]
3400445c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004460:	2b00      	cmp	r3, #0
34004462:	d009      	beq.n	34004478 <HAL_DCMIPP_IRQHandler+0x8c>
    {
      /* Clear the VSYNC flag for pipe0 */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34004464:	687b      	ldr	r3, [r7, #4]
34004466:	681b      	ldr	r3, [r3, #0]
34004468:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3400446c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
34004470:	2100      	movs	r1, #0
34004472:	6878      	ldr	r0, [r7, #4]
34004474:	f013 fbea 	bl	34017c4c <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* FRAME interrupt management ****************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
34004478:	68fb      	ldr	r3, [r7, #12]
3400447a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400447e:	2b00      	cmp	r3, #0
34004480:	d023      	beq.n	340044ca <HAL_DCMIPP_IRQHandler+0xde>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
34004482:	68bb      	ldr	r3, [r7, #8]
34004484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004488:	2b00      	cmp	r3, #0
3400448a:	d01e      	beq.n	340044ca <HAL_DCMIPP_IRQHandler+0xde>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400448c:	687b      	ldr	r3, [r7, #4]
3400448e:	681b      	ldr	r3, [r3, #0]
34004490:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004494:	f003 0304 	and.w	r3, r3, #4
34004498:	2b04      	cmp	r3, #4
3400449a:	d10c      	bne.n	340044b6 <HAL_DCMIPP_IRQHandler+0xca>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
3400449c:	687b      	ldr	r3, [r7, #4]
3400449e:	681b      	ldr	r3, [r3, #0]
340044a0:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340044a4:	687b      	ldr	r3, [r7, #4]
340044a6:	681b      	ldr	r3, [r3, #0]
340044a8:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
340044ac:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
340044b0:	687b      	ldr	r3, [r7, #4]
340044b2:	2201      	movs	r2, #1
340044b4:	715a      	strb	r2, [r3, #5]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
340044b6:	687b      	ldr	r3, [r7, #4]
340044b8:	681b      	ldr	r3, [r3, #0]
340044ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
340044be:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
340044c2:	2100      	movs	r1, #0
340044c4:	6878      	ldr	r0, [r7, #4]
340044c6:	f013 fbdb 	bl	34017c80 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* LINE interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
340044ca:	68fb      	ldr	r3, [r7, #12]
340044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340044d0:	2b00      	cmp	r3, #0
340044d2:	d00e      	beq.n	340044f2 <HAL_DCMIPP_IRQHandler+0x106>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
340044d4:	68bb      	ldr	r3, [r7, #8]
340044d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340044da:	2b00      	cmp	r3, #0
340044dc:	d009      	beq.n	340044f2 <HAL_DCMIPP_IRQHandler+0x106>
    {
      /* Clear the LINE flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
340044de:	687b      	ldr	r3, [r7, #4]
340044e0:	681b      	ldr	r3, [r3, #0]
340044e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
340044e6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LINE Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
340044ea:	2100      	movs	r1, #0
340044ec:	6878      	ldr	r0, [r7, #4]
340044ee:	f000 fe0b 	bl	34005108 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error interrupt for Pipe0 ***************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
340044f2:	68fb      	ldr	r3, [r7, #12]
340044f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
340044f8:	2b00      	cmp	r3, #0
340044fa:	d021      	beq.n	34004540 <HAL_DCMIPP_IRQHandler+0x154>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
340044fc:	68bb      	ldr	r3, [r7, #8]
340044fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34004502:	2b00      	cmp	r3, #0
34004504:	d01c      	beq.n	34004540 <HAL_DCMIPP_IRQHandler+0x154>
    {
      /* Disable Overrun Error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34004506:	687b      	ldr	r3, [r7, #4]
34004508:	681b      	ldr	r3, [r3, #0]
3400450a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400450e:	687b      	ldr	r3, [r7, #4]
34004510:	681b      	ldr	r3, [r3, #0]
34004512:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34004516:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
3400451a:	687b      	ldr	r3, [r7, #4]
3400451c:	689b      	ldr	r3, [r3, #8]
3400451e:	f043 0208 	orr.w	r2, r3, #8
34004522:	687b      	ldr	r3, [r7, #4]
34004524:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
34004526:	687b      	ldr	r3, [r7, #4]
34004528:	681b      	ldr	r3, [r3, #0]
3400452a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400452e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP Pipe state */
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34004532:	687b      	ldr	r3, [r7, #4]
34004534:	2204      	movs	r2, #4
34004536:	715a      	strb	r2, [r3, #5]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34004538:	2100      	movs	r1, #0
3400453a:	6878      	ldr	r0, [r7, #4]
3400453c:	f000 fdfa 	bl	34005134 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE1 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34004540:	68fb      	ldr	r3, [r7, #12]
34004542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34004546:	2b00      	cmp	r3, #0
34004548:	d00e      	beq.n	34004568 <HAL_DCMIPP_IRQHandler+0x17c>
  {
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
3400454a:	68bb      	ldr	r3, [r7, #8]
3400454c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34004550:	2b00      	cmp	r3, #0
34004552:	d009      	beq.n	34004568 <HAL_DCMIPP_IRQHandler+0x17c>
    {
      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34004554:	687b      	ldr	r3, [r7, #4]
34004556:	681b      	ldr	r3, [r3, #0]
34004558:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3400455c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34004560:	2101      	movs	r1, #1
34004562:	6878      	ldr	r0, [r7, #4]
34004564:	f000 fdd0 	bl	34005108 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
34004568:	68fb      	ldr	r3, [r7, #12]
3400456a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3400456e:	2b00      	cmp	r3, #0
34004570:	d00e      	beq.n	34004590 <HAL_DCMIPP_IRQHandler+0x1a4>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
34004572:	68bb      	ldr	r3, [r7, #8]
34004574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34004578:	2b00      	cmp	r3, #0
3400457a:	d009      	beq.n	34004590 <HAL_DCMIPP_IRQHandler+0x1a4>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
3400457c:	687b      	ldr	r3, [r7, #4]
3400457e:	681b      	ldr	r3, [r3, #0]
34004580:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34004584:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34004588:	2101      	movs	r1, #1
3400458a:	6878      	ldr	r0, [r7, #4]
3400458c:	f013 fb5e 	bl	34017c4c <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
34004590:	68fb      	ldr	r3, [r7, #12]
34004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34004596:	2b00      	cmp	r3, #0
34004598:	d023      	beq.n	340045e2 <HAL_DCMIPP_IRQHandler+0x1f6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
3400459a:	68bb      	ldr	r3, [r7, #8]
3400459c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
340045a0:	2b00      	cmp	r3, #0
340045a2:	d01e      	beq.n	340045e2 <HAL_DCMIPP_IRQHandler+0x1f6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340045a4:	687b      	ldr	r3, [r7, #4]
340045a6:	681b      	ldr	r3, [r3, #0]
340045a8:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
340045ac:	f003 0304 	and.w	r3, r3, #4
340045b0:	2b04      	cmp	r3, #4
340045b2:	d10c      	bne.n	340045ce <HAL_DCMIPP_IRQHandler+0x1e2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
340045b4:	687b      	ldr	r3, [r7, #4]
340045b6:	681b      	ldr	r3, [r3, #0]
340045b8:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340045bc:	687b      	ldr	r3, [r7, #4]
340045be:	681b      	ldr	r3, [r3, #0]
340045c0:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
340045c4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
340045c8:	687b      	ldr	r3, [r7, #4]
340045ca:	2201      	movs	r2, #1
340045cc:	719a      	strb	r2, [r3, #6]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
340045ce:	687b      	ldr	r3, [r7, #4]
340045d0:	681b      	ldr	r3, [r3, #0]
340045d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
340045d6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
340045da:	2101      	movs	r1, #1
340045dc:	6878      	ldr	r0, [r7, #4]
340045de:	f013 fb4f 	bl	34017c80 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error on the PIPE1 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
340045e2:	68fb      	ldr	r3, [r7, #12]
340045e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
340045e8:	2b00      	cmp	r3, #0
340045ea:	d021      	beq.n	34004630 <HAL_DCMIPP_IRQHandler+0x244>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
340045ec:	68bb      	ldr	r3, [r7, #8]
340045ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
340045f2:	2b00      	cmp	r3, #0
340045f4:	d01c      	beq.n	34004630 <HAL_DCMIPP_IRQHandler+0x244>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340045f6:	687b      	ldr	r3, [r7, #4]
340045f8:	681b      	ldr	r3, [r3, #0]
340045fa:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340045fe:	687b      	ldr	r3, [r7, #4]
34004600:	681b      	ldr	r3, [r3, #0]
34004602:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
34004606:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
3400460a:	687b      	ldr	r3, [r7, #4]
3400460c:	689b      	ldr	r3, [r3, #8]
3400460e:	f043 0210 	orr.w	r2, r3, #16
34004612:	687b      	ldr	r3, [r7, #4]
34004614:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
34004616:	687b      	ldr	r3, [r7, #4]
34004618:	681b      	ldr	r3, [r3, #0]
3400461a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3400461e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34004622:	687b      	ldr	r3, [r7, #4]
34004624:	2204      	movs	r2, #4
34004626:	719a      	strb	r2, [r3, #6]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34004628:	2101      	movs	r1, #1
3400462a:	6878      	ldr	r0, [r7, #4]
3400462c:	f000 fd82 	bl	34005134 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE2 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34004630:	68fb      	ldr	r3, [r7, #12]
34004632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34004636:	2b00      	cmp	r3, #0
34004638:	d00e      	beq.n	34004658 <HAL_DCMIPP_IRQHandler+0x26c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
3400463a:	68bb      	ldr	r3, [r7, #8]
3400463c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34004640:	2b00      	cmp	r3, #0
34004642:	d009      	beq.n	34004658 <HAL_DCMIPP_IRQHandler+0x26c>
    {
      /* Clear the End of Line flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34004644:	687b      	ldr	r3, [r7, #4]
34004646:	681b      	ldr	r3, [r3, #0]
34004648:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400464c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34004650:	2102      	movs	r1, #2
34004652:	6878      	ldr	r0, [r7, #4]
34004654:	f000 fd58 	bl	34005108 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
34004658:	68fb      	ldr	r3, [r7, #12]
3400465a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
3400465e:	2b00      	cmp	r3, #0
34004660:	d00e      	beq.n	34004680 <HAL_DCMIPP_IRQHandler+0x294>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
34004662:	68bb      	ldr	r3, [r7, #8]
34004664:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004668:	2b00      	cmp	r3, #0
3400466a:	d009      	beq.n	34004680 <HAL_DCMIPP_IRQHandler+0x294>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
3400466c:	687b      	ldr	r3, [r7, #4]
3400466e:	681b      	ldr	r3, [r3, #0]
34004670:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34004674:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34004678:	2102      	movs	r1, #2
3400467a:	6878      	ldr	r0, [r7, #4]
3400467c:	f013 fae6 	bl	34017c4c <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
34004680:	68fb      	ldr	r3, [r7, #12]
34004682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34004686:	2b00      	cmp	r3, #0
34004688:	d023      	beq.n	340046d2 <HAL_DCMIPP_IRQHandler+0x2e6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
3400468a:	68bb      	ldr	r3, [r7, #8]
3400468c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34004690:	2b00      	cmp	r3, #0
34004692:	d01e      	beq.n	340046d2 <HAL_DCMIPP_IRQHandler+0x2e6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004694:	687b      	ldr	r3, [r7, #4]
34004696:	681b      	ldr	r3, [r3, #0]
34004698:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
3400469c:	f003 0304 	and.w	r3, r3, #4
340046a0:	2b04      	cmp	r3, #4
340046a2:	d10c      	bne.n	340046be <HAL_DCMIPP_IRQHandler+0x2d2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
340046a4:	687b      	ldr	r3, [r7, #4]
340046a6:	681b      	ldr	r3, [r3, #0]
340046a8:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340046ac:	687b      	ldr	r3, [r7, #4]
340046ae:	681b      	ldr	r3, [r3, #0]
340046b0:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
340046b4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
340046b8:	687b      	ldr	r3, [r7, #4]
340046ba:	2201      	movs	r2, #1
340046bc:	71da      	strb	r2, [r3, #7]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
340046be:	687b      	ldr	r3, [r7, #4]
340046c0:	681b      	ldr	r3, [r3, #0]
340046c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
340046c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
340046ca:	2102      	movs	r1, #2
340046cc:	6878      	ldr	r0, [r7, #4]
340046ce:	f013 fad7 	bl	34017c80 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
  /* Overrun error on the PIPE2 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
340046d2:	68fb      	ldr	r3, [r7, #12]
340046d4:	2b00      	cmp	r3, #0
340046d6:	da1f      	bge.n	34004718 <HAL_DCMIPP_IRQHandler+0x32c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
340046d8:	68bb      	ldr	r3, [r7, #8]
340046da:	2b00      	cmp	r3, #0
340046dc:	da1c      	bge.n	34004718 <HAL_DCMIPP_IRQHandler+0x32c>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
340046de:	687b      	ldr	r3, [r7, #4]
340046e0:	681b      	ldr	r3, [r3, #0]
340046e2:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340046e6:	687b      	ldr	r3, [r7, #4]
340046e8:	681b      	ldr	r3, [r3, #0]
340046ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
340046ee:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
340046f2:	687b      	ldr	r3, [r7, #4]
340046f4:	689b      	ldr	r3, [r3, #8]
340046f6:	f043 0220 	orr.w	r2, r3, #32
340046fa:	687b      	ldr	r3, [r7, #4]
340046fc:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
340046fe:	687b      	ldr	r3, [r7, #4]
34004700:	681b      	ldr	r3, [r3, #0]
34004702:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
34004706:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
3400470a:	687b      	ldr	r3, [r7, #4]
3400470c:	2204      	movs	r2, #4
3400470e:	71da      	strb	r2, [r3, #7]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34004710:	2102      	movs	r1, #2
34004712:	6878      	ldr	r0, [r7, #4]
34004714:	f000 fd0e 	bl	34005134 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization Error Interrupt on the parallel interface  **************/
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
34004718:	68fb      	ldr	r3, [r7, #12]
3400471a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400471e:	2b00      	cmp	r3, #0
34004720:	d01f      	beq.n	34004762 <HAL_DCMIPP_IRQHandler+0x376>
  {
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
34004722:	68bb      	ldr	r3, [r7, #8]
34004724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34004728:	2b00      	cmp	r3, #0
3400472a:	d01a      	beq.n	34004762 <HAL_DCMIPP_IRQHandler+0x376>
    {
      /* Disable Synchronization error interrupt on parallel interface */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
3400472c:	687b      	ldr	r3, [r7, #4]
3400472e:	681b      	ldr	r3, [r3, #0]
34004730:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34004734:	687b      	ldr	r3, [r7, #4]
34004736:	681b      	ldr	r3, [r3, #0]
34004738:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
3400473c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34004740:	687b      	ldr	r3, [r7, #4]
34004742:	689b      	ldr	r3, [r3, #8]
34004744:	f043 0202 	orr.w	r2, r3, #2
34004748:	687b      	ldr	r3, [r7, #4]
3400474a:	609a      	str	r2, [r3, #8]

      /* Clear the synchronization error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
3400474c:	687b      	ldr	r3, [r7, #4]
3400474e:	681b      	ldr	r3, [r3, #0]
34004750:	2240      	movs	r2, #64	@ 0x40
34004752:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004756:	687b      	ldr	r3, [r7, #4]
34004758:	2204      	movs	r2, #4
3400475a:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
3400475c:	6878      	ldr	r0, [r7, #4]
3400475e:	f000 fcf4 	bl	3400514a <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* IPPLUG AXI transfer Error Interrupt     *********************************/
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
34004762:	68fb      	ldr	r3, [r7, #12]
34004764:	f003 0320 	and.w	r3, r3, #32
34004768:	2b00      	cmp	r3, #0
3400476a:	d01f      	beq.n	340047ac <HAL_DCMIPP_IRQHandler+0x3c0>
  {
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
3400476c:	68bb      	ldr	r3, [r7, #8]
3400476e:	f003 0320 	and.w	r3, r3, #32
34004772:	2b00      	cmp	r3, #0
34004774:	d01a      	beq.n	340047ac <HAL_DCMIPP_IRQHandler+0x3c0>
    {
      /* Disable IPPLUG AXI transfer Error Interrupt */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
34004776:	687b      	ldr	r3, [r7, #4]
34004778:	681b      	ldr	r3, [r3, #0]
3400477a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400477e:	687b      	ldr	r3, [r7, #4]
34004780:	681b      	ldr	r3, [r3, #0]
34004782:	f022 0220 	bic.w	r2, r2, #32
34004786:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
3400478a:	687b      	ldr	r3, [r7, #4]
3400478c:	689b      	ldr	r3, [r3, #8]
3400478e:	f043 0201 	orr.w	r2, r3, #1
34004792:	687b      	ldr	r3, [r7, #4]
34004794:	609a      	str	r2, [r3, #8]

      /* Clear the AXI transfer error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
34004796:	687b      	ldr	r3, [r7, #4]
34004798:	681b      	ldr	r3, [r3, #0]
3400479a:	2220      	movs	r2, #32
3400479c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340047a0:	687b      	ldr	r3, [r7, #4]
340047a2:	2204      	movs	r2, #4
340047a4:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340047a6:	6878      	ldr	r0, [r7, #4]
340047a8:	f000 fccf 	bl	3400514a <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
340047ac:	bf00      	nop
340047ae:	3710      	adds	r7, #16
340047b0:	46bd      	mov	sp, r7
340047b2:	bd80      	pop	{r7, pc}

340047b4 <HAL_DCMIPP_CSI_IRQHandler>:
  * @brief  Handles DCMIPP CSI interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_CSI_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
340047b4:	b580      	push	{r7, lr}
340047b6:	b088      	sub	sp, #32
340047b8:	af00      	add	r7, sp, #0
340047ba:	6078      	str	r0, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
340047bc:	4bb1      	ldr	r3, [pc, #708]	@ (34004a84 <HAL_DCMIPP_CSI_IRQHandler+0x2d0>)
340047be:	61fb      	str	r3, [r7, #28]

  /* Read the SR0 register once */
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
340047c0:	69fb      	ldr	r3, [r7, #28]
340047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340047c6:	61bb      	str	r3, [r7, #24]
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
340047c8:	69fb      	ldr	r3, [r7, #28]
340047ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
340047ce:	617b      	str	r3, [r7, #20]

  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
340047d0:	69fb      	ldr	r3, [r7, #28]
340047d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340047d6:	613b      	str	r3, [r7, #16]
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
340047d8:	69fb      	ldr	r3, [r7, #28]
340047da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
340047de:	60fb      	str	r3, [r7, #12]

  /* Clock changer FIFO full event */
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
340047e0:	69bb      	ldr	r3, [r7, #24]
340047e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340047e6:	2b00      	cmp	r3, #0
340047e8:	d014      	beq.n	34004814 <HAL_DCMIPP_CSI_IRQHandler+0x60>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
340047ea:	693b      	ldr	r3, [r7, #16]
340047ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340047f0:	2b00      	cmp	r3, #0
340047f2:	d00f      	beq.n	34004814 <HAL_DCMIPP_CSI_IRQHandler+0x60>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
340047f4:	69fb      	ldr	r3, [r7, #28]
340047f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340047fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
340047fe:	69fb      	ldr	r3, [r7, #28]
34004800:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34004804:	69fb      	ldr	r3, [r7, #28]
34004806:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400480a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ClockChangerFifoFullEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
3400480e:	6878      	ldr	r0, [r7, #4]
34004810:	f000 fcb0 	bl	34005174 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  }

  /*###############################
     Byte/Line Counter Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34004814:	69bb      	ldr	r3, [r7, #24]
34004816:	f003 0308 	and.w	r3, r3, #8
3400481a:	2b00      	cmp	r3, #0
3400481c:	d01c      	beq.n	34004858 <HAL_DCMIPP_CSI_IRQHandler+0xa4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
3400481e:	693b      	ldr	r3, [r7, #16]
34004820:	f003 0308 	and.w	r3, r3, #8
34004824:	2b00      	cmp	r3, #0
34004826:	d017      	beq.n	34004858 <HAL_DCMIPP_CSI_IRQHandler+0xa4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004828:	687b      	ldr	r3, [r7, #4]
3400482a:	681b      	ldr	r3, [r3, #0]
3400482c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004830:	f003 0304 	and.w	r3, r3, #4
34004834:	2b04      	cmp	r3, #4
34004836:	d107      	bne.n	34004848 <HAL_DCMIPP_CSI_IRQHandler+0x94>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
34004838:	69fb      	ldr	r3, [r7, #28]
3400483a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400483e:	f023 0208 	bic.w	r2, r3, #8
34004842:	69fb      	ldr	r3, [r7, #28]
34004844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34004848:	69fb      	ldr	r3, [r7, #28]
3400484a:	2208      	movs	r2, #8
3400484c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34004850:	2103      	movs	r1, #3
34004852:	6878      	ldr	r0, [r7, #4]
34004854:	f000 fcc3 	bl	340051de <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34004858:	69bb      	ldr	r3, [r7, #24]
3400485a:	f003 0304 	and.w	r3, r3, #4
3400485e:	2b00      	cmp	r3, #0
34004860:	d01c      	beq.n	3400489c <HAL_DCMIPP_CSI_IRQHandler+0xe8>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34004862:	693b      	ldr	r3, [r7, #16]
34004864:	f003 0304 	and.w	r3, r3, #4
34004868:	2b00      	cmp	r3, #0
3400486a:	d017      	beq.n	3400489c <HAL_DCMIPP_CSI_IRQHandler+0xe8>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400486c:	687b      	ldr	r3, [r7, #4]
3400486e:	681b      	ldr	r3, [r3, #0]
34004870:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004874:	f003 0304 	and.w	r3, r3, #4
34004878:	2b04      	cmp	r3, #4
3400487a:	d107      	bne.n	3400488c <HAL_DCMIPP_CSI_IRQHandler+0xd8>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
3400487c:	69fb      	ldr	r3, [r7, #28]
3400487e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004882:	f023 0204 	bic.w	r2, r3, #4
34004886:	69fb      	ldr	r3, [r7, #28]
34004888:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
3400488c:	69fb      	ldr	r3, [r7, #28]
3400488e:	2204      	movs	r2, #4
34004890:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34004894:	2102      	movs	r1, #2
34004896:	6878      	ldr	r0, [r7, #4]
34004898:	f000 fca1 	bl	340051de <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
3400489c:	69bb      	ldr	r3, [r7, #24]
3400489e:	f003 0302 	and.w	r3, r3, #2
340048a2:	2b00      	cmp	r3, #0
340048a4:	d01c      	beq.n	340048e0 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
340048a6:	693b      	ldr	r3, [r7, #16]
340048a8:	f003 0302 	and.w	r3, r3, #2
340048ac:	2b00      	cmp	r3, #0
340048ae:	d017      	beq.n	340048e0 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340048b0:	687b      	ldr	r3, [r7, #4]
340048b2:	681b      	ldr	r3, [r3, #0]
340048b4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340048b8:	f003 0304 	and.w	r3, r3, #4
340048bc:	2b04      	cmp	r3, #4
340048be:	d107      	bne.n	340048d0 <HAL_DCMIPP_CSI_IRQHandler+0x11c>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
340048c0:	69fb      	ldr	r3, [r7, #28]
340048c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340048c6:	f023 0202 	bic.w	r2, r3, #2
340048ca:	69fb      	ldr	r3, [r7, #28]
340048cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
340048d0:	69fb      	ldr	r3, [r7, #28]
340048d2:	2202      	movs	r2, #2
340048d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340048d8:	2101      	movs	r1, #1
340048da:	6878      	ldr	r0, [r7, #4]
340048dc:	f000 fc7f 	bl	340051de <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
340048e0:	69bb      	ldr	r3, [r7, #24]
340048e2:	f003 0301 	and.w	r3, r3, #1
340048e6:	2b00      	cmp	r3, #0
340048e8:	d01c      	beq.n	34004924 <HAL_DCMIPP_CSI_IRQHandler+0x170>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
340048ea:	693b      	ldr	r3, [r7, #16]
340048ec:	f003 0301 	and.w	r3, r3, #1
340048f0:	2b00      	cmp	r3, #0
340048f2:	d017      	beq.n	34004924 <HAL_DCMIPP_CSI_IRQHandler+0x170>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340048f4:	687b      	ldr	r3, [r7, #4]
340048f6:	681b      	ldr	r3, [r3, #0]
340048f8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340048fc:	f003 0304 	and.w	r3, r3, #4
34004900:	2b04      	cmp	r3, #4
34004902:	d107      	bne.n	34004914 <HAL_DCMIPP_CSI_IRQHandler+0x160>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34004904:	69fb      	ldr	r3, [r7, #28]
34004906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400490a:	f023 0201 	bic.w	r2, r3, #1
3400490e:	69fb      	ldr	r3, [r7, #28]
34004910:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
34004914:	69fb      	ldr	r3, [r7, #28]
34004916:	2201      	movs	r2, #1
34004918:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
3400491c:	2100      	movs	r1, #0
3400491e:	6878      	ldr	r0, [r7, #4]
34004920:	f000 fc5d 	bl	340051de <HAL_DCMIPP_CSI_LineByteEventCallback>
  }

  /*###############################
            End Of Frame
    ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34004924:	69bb      	ldr	r3, [r7, #24]
34004926:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400492a:	2b00      	cmp	r3, #0
3400492c:	d01d      	beq.n	3400496a <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
3400492e:	693b      	ldr	r3, [r7, #16]
34004930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34004934:	2b00      	cmp	r3, #0
34004936:	d018      	beq.n	3400496a <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004938:	687b      	ldr	r3, [r7, #4]
3400493a:	681b      	ldr	r3, [r3, #0]
3400493c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004940:	f003 0304 	and.w	r3, r3, #4
34004944:	2b04      	cmp	r3, #4
34004946:	d107      	bne.n	34004958 <HAL_DCMIPP_CSI_IRQHandler+0x1a4>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34004948:	69fb      	ldr	r3, [r7, #28]
3400494a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400494e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34004952:	69fb      	ldr	r3, [r7, #28]
34004954:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34004958:	69fb      	ldr	r3, [r7, #28]
3400495a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400495e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34004962:	2103      	movs	r1, #3
34004964:	6878      	ldr	r0, [r7, #4]
34004966:	f000 fc19 	bl	3400519c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
3400496a:	69bb      	ldr	r3, [r7, #24]
3400496c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34004970:	2b00      	cmp	r3, #0
34004972:	d01d      	beq.n	340049b0 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34004974:	693b      	ldr	r3, [r7, #16]
34004976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400497a:	2b00      	cmp	r3, #0
3400497c:	d018      	beq.n	340049b0 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400497e:	687b      	ldr	r3, [r7, #4]
34004980:	681b      	ldr	r3, [r3, #0]
34004982:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004986:	f003 0304 	and.w	r3, r3, #4
3400498a:	2b04      	cmp	r3, #4
3400498c:	d107      	bne.n	3400499e <HAL_DCMIPP_CSI_IRQHandler+0x1ea>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
3400498e:	69fb      	ldr	r3, [r7, #28]
34004990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004994:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34004998:	69fb      	ldr	r3, [r7, #28]
3400499a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
3400499e:	69fb      	ldr	r3, [r7, #28]
340049a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340049a4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
340049a8:	2102      	movs	r1, #2
340049aa:	6878      	ldr	r0, [r7, #4]
340049ac:	f000 fbf6 	bl	3400519c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
340049b0:	69bb      	ldr	r3, [r7, #24]
340049b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340049b6:	2b00      	cmp	r3, #0
340049b8:	d01d      	beq.n	340049f6 <HAL_DCMIPP_CSI_IRQHandler+0x242>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
340049ba:	693b      	ldr	r3, [r7, #16]
340049bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340049c0:	2b00      	cmp	r3, #0
340049c2:	d018      	beq.n	340049f6 <HAL_DCMIPP_CSI_IRQHandler+0x242>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340049c4:	687b      	ldr	r3, [r7, #4]
340049c6:	681b      	ldr	r3, [r3, #0]
340049c8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340049cc:	f003 0304 	and.w	r3, r3, #4
340049d0:	2b04      	cmp	r3, #4
340049d2:	d107      	bne.n	340049e4 <HAL_DCMIPP_CSI_IRQHandler+0x230>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
340049d4:	69fb      	ldr	r3, [r7, #28]
340049d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340049da:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
340049de:	69fb      	ldr	r3, [r7, #28]
340049e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
340049e4:	69fb      	ldr	r3, [r7, #28]
340049e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
340049ea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340049ee:	2101      	movs	r1, #1
340049f0:	6878      	ldr	r0, [r7, #4]
340049f2:	f000 fbd3 	bl	3400519c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
340049f6:	69bb      	ldr	r3, [r7, #24]
340049f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340049fc:	2b00      	cmp	r3, #0
340049fe:	d01d      	beq.n	34004a3c <HAL_DCMIPP_CSI_IRQHandler+0x288>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34004a00:	693b      	ldr	r3, [r7, #16]
34004a02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34004a06:	2b00      	cmp	r3, #0
34004a08:	d018      	beq.n	34004a3c <HAL_DCMIPP_CSI_IRQHandler+0x288>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004a0a:	687b      	ldr	r3, [r7, #4]
34004a0c:	681b      	ldr	r3, [r3, #0]
34004a0e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004a12:	f003 0304 	and.w	r3, r3, #4
34004a16:	2b04      	cmp	r3, #4
34004a18:	d107      	bne.n	34004a2a <HAL_DCMIPP_CSI_IRQHandler+0x276>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
34004a1a:	69fb      	ldr	r3, [r7, #28]
34004a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004a20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
34004a24:	69fb      	ldr	r3, [r7, #28]
34004a26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
34004a2a:	69fb      	ldr	r3, [r7, #28]
34004a2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34004a30:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_CSIREGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34004a34:	2100      	movs	r1, #0
34004a36:	6878      	ldr	r0, [r7, #4]
34004a38:	f000 fbb0 	bl	3400519c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  }

  /*###############################
           Start Of Frame
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34004a3c:	69bb      	ldr	r3, [r7, #24]
34004a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004a42:	2b00      	cmp	r3, #0
34004a44:	d020      	beq.n	34004a88 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34004a46:	693b      	ldr	r3, [r7, #16]
34004a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004a4c:	2b00      	cmp	r3, #0
34004a4e:	d01b      	beq.n	34004a88 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004a50:	687b      	ldr	r3, [r7, #4]
34004a52:	681b      	ldr	r3, [r3, #0]
34004a54:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004a58:	f003 0304 	and.w	r3, r3, #4
34004a5c:	2b04      	cmp	r3, #4
34004a5e:	d107      	bne.n	34004a70 <HAL_DCMIPP_CSI_IRQHandler+0x2bc>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
34004a60:	69fb      	ldr	r3, [r7, #28]
34004a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004a66:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34004a6a:	69fb      	ldr	r3, [r7, #28]
34004a6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34004a70:	69fb      	ldr	r3, [r7, #28]
34004a72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34004a76:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34004a7a:	2103      	movs	r1, #3
34004a7c:	6878      	ldr	r0, [r7, #4]
34004a7e:	f000 fb98 	bl	340051b2 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
34004a82:	e001      	b.n	34004a88 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
34004a84:	58006000 	.word	0x58006000
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34004a88:	69bb      	ldr	r3, [r7, #24]
34004a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004a8e:	2b00      	cmp	r3, #0
34004a90:	d01d      	beq.n	34004ace <HAL_DCMIPP_CSI_IRQHandler+0x31a>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34004a92:	693b      	ldr	r3, [r7, #16]
34004a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004a98:	2b00      	cmp	r3, #0
34004a9a:	d018      	beq.n	34004ace <HAL_DCMIPP_CSI_IRQHandler+0x31a>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004a9c:	687b      	ldr	r3, [r7, #4]
34004a9e:	681b      	ldr	r3, [r3, #0]
34004aa0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004aa4:	f003 0304 	and.w	r3, r3, #4
34004aa8:	2b04      	cmp	r3, #4
34004aaa:	d107      	bne.n	34004abc <HAL_DCMIPP_CSI_IRQHandler+0x308>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34004aac:	69fb      	ldr	r3, [r7, #28]
34004aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004ab2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34004ab6:	69fb      	ldr	r3, [r7, #28]
34004ab8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34004abc:	69fb      	ldr	r3, [r7, #28]
34004abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34004ac2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34004ac6:	2102      	movs	r1, #2
34004ac8:	6878      	ldr	r0, [r7, #4]
34004aca:	f000 fb72 	bl	340051b2 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34004ace:	69bb      	ldr	r3, [r7, #24]
34004ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004ad4:	2b00      	cmp	r3, #0
34004ad6:	d01d      	beq.n	34004b14 <HAL_DCMIPP_CSI_IRQHandler+0x360>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34004ad8:	693b      	ldr	r3, [r7, #16]
34004ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004ade:	2b00      	cmp	r3, #0
34004ae0:	d018      	beq.n	34004b14 <HAL_DCMIPP_CSI_IRQHandler+0x360>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004ae2:	687b      	ldr	r3, [r7, #4]
34004ae4:	681b      	ldr	r3, [r3, #0]
34004ae6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004aea:	f003 0304 	and.w	r3, r3, #4
34004aee:	2b04      	cmp	r3, #4
34004af0:	d107      	bne.n	34004b02 <HAL_DCMIPP_CSI_IRQHandler+0x34e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34004af2:	69fb      	ldr	r3, [r7, #28]
34004af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004af8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34004afc:	69fb      	ldr	r3, [r7, #28]
34004afe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34004b02:	69fb      	ldr	r3, [r7, #28]
34004b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
34004b08:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34004b0c:	2101      	movs	r1, #1
34004b0e:	6878      	ldr	r0, [r7, #4]
34004b10:	f000 fb4f 	bl	340051b2 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34004b14:	69bb      	ldr	r3, [r7, #24]
34004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004b1a:	2b00      	cmp	r3, #0
34004b1c:	d01d      	beq.n	34004b5a <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34004b1e:	693b      	ldr	r3, [r7, #16]
34004b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004b24:	2b00      	cmp	r3, #0
34004b26:	d018      	beq.n	34004b5a <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004b28:	687b      	ldr	r3, [r7, #4]
34004b2a:	681b      	ldr	r3, [r3, #0]
34004b2c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004b30:	f003 0304 	and.w	r3, r3, #4
34004b34:	2b04      	cmp	r3, #4
34004b36:	d107      	bne.n	34004b48 <HAL_DCMIPP_CSI_IRQHandler+0x394>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34004b38:	69fb      	ldr	r3, [r7, #28]
34004b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004b3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34004b42:	69fb      	ldr	r3, [r7, #28]
34004b44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34004b48:	69fb      	ldr	r3, [r7, #28]
34004b4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
34004b4e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34004b52:	2100      	movs	r1, #0
34004b54:	6878      	ldr	r0, [r7, #4]
34004b56:	f000 fb2c 	bl	340051b2 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  }

  /*###############################
           Timer Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
34004b5a:	69bb      	ldr	r3, [r7, #24]
34004b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34004b60:	2b00      	cmp	r3, #0
34004b62:	d01c      	beq.n	34004b9e <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34004b64:	693b      	ldr	r3, [r7, #16]
34004b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34004b6a:	2b00      	cmp	r3, #0
34004b6c:	d017      	beq.n	34004b9e <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004b6e:	687b      	ldr	r3, [r7, #4]
34004b70:	681b      	ldr	r3, [r3, #0]
34004b72:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004b76:	f003 0304 	and.w	r3, r3, #4
34004b7a:	2b04      	cmp	r3, #4
34004b7c:	d107      	bne.n	34004b8e <HAL_DCMIPP_CSI_IRQHandler+0x3da>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34004b7e:	69fb      	ldr	r3, [r7, #28]
34004b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004b84:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
34004b88:	69fb      	ldr	r3, [r7, #28]
34004b8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34004b8e:	69fb      	ldr	r3, [r7, #28]
34004b90:	2280      	movs	r2, #128	@ 0x80
34004b92:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34004b96:	2103      	movs	r1, #3
34004b98:	6878      	ldr	r0, [r7, #4]
34004b9a:	f000 fb15 	bl	340051c8 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
34004b9e:	69bb      	ldr	r3, [r7, #24]
34004ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34004ba4:	2b00      	cmp	r3, #0
34004ba6:	d01c      	beq.n	34004be2 <HAL_DCMIPP_CSI_IRQHandler+0x42e>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34004ba8:	693b      	ldr	r3, [r7, #16]
34004baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34004bae:	2b00      	cmp	r3, #0
34004bb0:	d017      	beq.n	34004be2 <HAL_DCMIPP_CSI_IRQHandler+0x42e>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004bb2:	687b      	ldr	r3, [r7, #4]
34004bb4:	681b      	ldr	r3, [r3, #0]
34004bb6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004bba:	f003 0304 	and.w	r3, r3, #4
34004bbe:	2b04      	cmp	r3, #4
34004bc0:	d107      	bne.n	34004bd2 <HAL_DCMIPP_CSI_IRQHandler+0x41e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34004bc2:	69fb      	ldr	r3, [r7, #28]
34004bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004bc8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
34004bcc:	69fb      	ldr	r3, [r7, #28]
34004bce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34004bd2:	69fb      	ldr	r3, [r7, #28]
34004bd4:	2240      	movs	r2, #64	@ 0x40
34004bd6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34004bda:	2102      	movs	r1, #2
34004bdc:	6878      	ldr	r0, [r7, #4]
34004bde:	f000 faf3 	bl	340051c8 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34004be2:	69bb      	ldr	r3, [r7, #24]
34004be4:	f003 0320 	and.w	r3, r3, #32
34004be8:	2b00      	cmp	r3, #0
34004bea:	d01c      	beq.n	34004c26 <HAL_DCMIPP_CSI_IRQHandler+0x472>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34004bec:	693b      	ldr	r3, [r7, #16]
34004bee:	f003 0320 	and.w	r3, r3, #32
34004bf2:	2b00      	cmp	r3, #0
34004bf4:	d017      	beq.n	34004c26 <HAL_DCMIPP_CSI_IRQHandler+0x472>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004bf6:	687b      	ldr	r3, [r7, #4]
34004bf8:	681b      	ldr	r3, [r3, #0]
34004bfa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004bfe:	f003 0304 	and.w	r3, r3, #4
34004c02:	2b04      	cmp	r3, #4
34004c04:	d107      	bne.n	34004c16 <HAL_DCMIPP_CSI_IRQHandler+0x462>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34004c06:	69fb      	ldr	r3, [r7, #28]
34004c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004c0c:	f023 0220 	bic.w	r2, r3, #32
34004c10:	69fb      	ldr	r3, [r7, #28]
34004c12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34004c16:	69fb      	ldr	r3, [r7, #28]
34004c18:	2220      	movs	r2, #32
34004c1a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34004c1e:	2101      	movs	r1, #1
34004c20:	6878      	ldr	r0, [r7, #4]
34004c22:	f000 fad1 	bl	340051c8 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34004c26:	69bb      	ldr	r3, [r7, #24]
34004c28:	f003 0310 	and.w	r3, r3, #16
34004c2c:	2b00      	cmp	r3, #0
34004c2e:	d01c      	beq.n	34004c6a <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34004c30:	693b      	ldr	r3, [r7, #16]
34004c32:	f003 0310 	and.w	r3, r3, #16
34004c36:	2b00      	cmp	r3, #0
34004c38:	d017      	beq.n	34004c6a <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004c3a:	687b      	ldr	r3, [r7, #4]
34004c3c:	681b      	ldr	r3, [r3, #0]
34004c3e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004c42:	f003 0304 	and.w	r3, r3, #4
34004c46:	2b04      	cmp	r3, #4
34004c48:	d107      	bne.n	34004c5a <HAL_DCMIPP_CSI_IRQHandler+0x4a6>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34004c4a:	69fb      	ldr	r3, [r7, #28]
34004c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004c50:	f023 0210 	bic.w	r2, r3, #16
34004c54:	69fb      	ldr	r3, [r7, #28]
34004c56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34004c5a:	69fb      	ldr	r3, [r7, #28]
34004c5c:	2210      	movs	r2, #16
34004c5e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34004c62:	2100      	movs	r1, #0
34004c64:	6878      	ldr	r0, [r7, #4]
34004c66:	f000 faaf 	bl	340051c8 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization error  */
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34004c6a:	69bb      	ldr	r3, [r7, #24]
34004c6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34004c70:	2b00      	cmp	r3, #0
34004c72:	d01a      	beq.n	34004caa <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34004c74:	693b      	ldr	r3, [r7, #16]
34004c76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34004c7a:	2b00      	cmp	r3, #0
34004c7c:	d015      	beq.n	34004caa <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34004c7e:	69fb      	ldr	r3, [r7, #28]
34004c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004c84:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34004c88:	69fb      	ldr	r3, [r7, #28]
34004c8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34004c8e:	69fb      	ldr	r3, [r7, #28]
34004c90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34004c94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34004c98:	687b      	ldr	r3, [r7, #4]
34004c9a:	689b      	ldr	r3, [r3, #8]
34004c9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
34004ca0:	687b      	ldr	r3, [r7, #4]
34004ca2:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004ca4:	6878      	ldr	r0, [r7, #4]
34004ca6:	f000 fa50 	bl	3400514a <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34004caa:	69bb      	ldr	r3, [r7, #24]
34004cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34004cb0:	2b00      	cmp	r3, #0
34004cb2:	d01a      	beq.n	34004cea <HAL_DCMIPP_CSI_IRQHandler+0x536>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34004cb4:	693b      	ldr	r3, [r7, #16]
34004cb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34004cba:	2b00      	cmp	r3, #0
34004cbc:	d015      	beq.n	34004cea <HAL_DCMIPP_CSI_IRQHandler+0x536>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34004cbe:	69fb      	ldr	r3, [r7, #28]
34004cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004cc4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
34004cc8:	69fb      	ldr	r3, [r7, #28]
34004cca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34004cce:	69fb      	ldr	r3, [r7, #28]
34004cd0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34004cd4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34004cd8:	687b      	ldr	r3, [r7, #4]
34004cda:	689b      	ldr	r3, [r3, #8]
34004cdc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
34004ce0:	687b      	ldr	r3, [r7, #4]
34004ce2:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004ce4:	6878      	ldr	r0, [r7, #4]
34004ce6:	f000 fa30 	bl	3400514a <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34004cea:	69bb      	ldr	r3, [r7, #24]
34004cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34004cf0:	2b00      	cmp	r3, #0
34004cf2:	d01a      	beq.n	34004d2a <HAL_DCMIPP_CSI_IRQHandler+0x576>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34004cf4:	693b      	ldr	r3, [r7, #16]
34004cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34004cfa:	2b00      	cmp	r3, #0
34004cfc:	d015      	beq.n	34004d2a <HAL_DCMIPP_CSI_IRQHandler+0x576>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34004cfe:	69fb      	ldr	r3, [r7, #28]
34004d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004d04:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
34004d08:	69fb      	ldr	r3, [r7, #28]
34004d0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34004d0e:	69fb      	ldr	r3, [r7, #28]
34004d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34004d14:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34004d18:	687b      	ldr	r3, [r7, #4]
34004d1a:	689b      	ldr	r3, [r3, #8]
34004d1c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
34004d20:	687b      	ldr	r3, [r7, #4]
34004d22:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004d24:	6878      	ldr	r0, [r7, #4]
34004d26:	f000 fa10 	bl	3400514a <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34004d2a:	69bb      	ldr	r3, [r7, #24]
34004d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34004d30:	2b00      	cmp	r3, #0
34004d32:	d01a      	beq.n	34004d6a <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34004d34:	693b      	ldr	r3, [r7, #16]
34004d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34004d3a:	2b00      	cmp	r3, #0
34004d3c:	d015      	beq.n	34004d6a <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34004d3e:	69fb      	ldr	r3, [r7, #28]
34004d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004d44:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34004d48:	69fb      	ldr	r3, [r7, #28]
34004d4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34004d4e:	69fb      	ldr	r3, [r7, #28]
34004d50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34004d54:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34004d58:	687b      	ldr	r3, [r7, #4]
34004d5a:	689b      	ldr	r3, [r3, #8]
34004d5c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
34004d60:	687b      	ldr	r3, [r7, #4]
34004d62:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004d64:	6878      	ldr	r0, [r7, #4]
34004d66:	f000 f9f0 	bl	3400514a <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34004d6a:	69bb      	ldr	r3, [r7, #24]
34004d6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004d70:	2b00      	cmp	r3, #0
34004d72:	d01a      	beq.n	34004daa <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34004d74:	693b      	ldr	r3, [r7, #16]
34004d76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004d7a:	2b00      	cmp	r3, #0
34004d7c:	d015      	beq.n	34004daa <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34004d7e:	69fb      	ldr	r3, [r7, #28]
34004d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004d84:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
34004d88:	69fb      	ldr	r3, [r7, #28]
34004d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34004d8e:	69fb      	ldr	r3, [r7, #28]
34004d90:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34004d94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34004d98:	687b      	ldr	r3, [r7, #4]
34004d9a:	689b      	ldr	r3, [r3, #8]
34004d9c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
34004da0:	687b      	ldr	r3, [r7, #4]
34004da2:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004da4:	6878      	ldr	r0, [r7, #4]
34004da6:	f000 f9d0 	bl	3400514a <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34004daa:	69bb      	ldr	r3, [r7, #24]
34004dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34004db0:	2b00      	cmp	r3, #0
34004db2:	d01a      	beq.n	34004dea <HAL_DCMIPP_CSI_IRQHandler+0x636>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34004db4:	693b      	ldr	r3, [r7, #16]
34004db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34004dba:	2b00      	cmp	r3, #0
34004dbc:	d015      	beq.n	34004dea <HAL_DCMIPP_CSI_IRQHandler+0x636>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34004dbe:	69fb      	ldr	r3, [r7, #28]
34004dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004dc4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34004dc8:	69fb      	ldr	r3, [r7, #28]
34004dca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34004dce:	69fb      	ldr	r3, [r7, #28]
34004dd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34004dd4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34004dd8:	687b      	ldr	r3, [r7, #4]
34004dda:	689b      	ldr	r3, [r3, #8]
34004ddc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
34004de0:	687b      	ldr	r3, [r7, #4]
34004de2:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004de4:	6878      	ldr	r0, [r7, #4]
34004de6:	f000 f9b0 	bl	3400514a <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34004dea:	69bb      	ldr	r3, [r7, #24]
34004dec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34004df0:	2b00      	cmp	r3, #0
34004df2:	d01a      	beq.n	34004e2a <HAL_DCMIPP_CSI_IRQHandler+0x676>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34004df4:	693b      	ldr	r3, [r7, #16]
34004df6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34004dfa:	2b00      	cmp	r3, #0
34004dfc:	d015      	beq.n	34004e2a <HAL_DCMIPP_CSI_IRQHandler+0x676>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34004dfe:	69fb      	ldr	r3, [r7, #28]
34004e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004e04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34004e08:	69fb      	ldr	r3, [r7, #28]
34004e0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34004e0e:	69fb      	ldr	r3, [r7, #28]
34004e10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34004e14:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34004e18:	687b      	ldr	r3, [r7, #4]
34004e1a:	689b      	ldr	r3, [r3, #8]
34004e1c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
34004e20:	687b      	ldr	r3, [r7, #4]
34004e22:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004e24:	6878      	ldr	r0, [r7, #4]
34004e26:	f000 f990 	bl	3400514a <HAL_DCMIPP_ErrorCallback>
    }
  }

  /* Lane 0 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34004e2a:	697b      	ldr	r3, [r7, #20]
34004e2c:	f003 0301 	and.w	r3, r3, #1
34004e30:	2b00      	cmp	r3, #0
34004e32:	d01d      	beq.n	34004e70 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34004e34:	68fb      	ldr	r3, [r7, #12]
34004e36:	f003 0301 	and.w	r3, r3, #1
34004e3a:	2b00      	cmp	r3, #0
34004e3c:	d018      	beq.n	34004e70 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34004e3e:	69fb      	ldr	r3, [r7, #28]
34004e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004e44:	f023 0201 	bic.w	r2, r3, #1
34004e48:	69fb      	ldr	r3, [r7, #28]
34004e4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34004e4e:	69fb      	ldr	r3, [r7, #28]
34004e50:	2201      	movs	r2, #1
34004e52:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34004e56:	687b      	ldr	r3, [r7, #4]
34004e58:	689b      	ldr	r3, [r3, #8]
34004e5a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34004e5e:	687b      	ldr	r3, [r7, #4]
34004e60:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004e62:	687b      	ldr	r3, [r7, #4]
34004e64:	2204      	movs	r2, #4
34004e66:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004e68:	2101      	movs	r1, #1
34004e6a:	6878      	ldr	r0, [r7, #4]
34004e6c:	f000 f977 	bl	3400515e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34004e70:	697b      	ldr	r3, [r7, #20]
34004e72:	f003 0302 	and.w	r3, r3, #2
34004e76:	2b00      	cmp	r3, #0
34004e78:	d01d      	beq.n	34004eb6 <HAL_DCMIPP_CSI_IRQHandler+0x702>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34004e7a:	68fb      	ldr	r3, [r7, #12]
34004e7c:	f003 0302 	and.w	r3, r3, #2
34004e80:	2b00      	cmp	r3, #0
34004e82:	d018      	beq.n	34004eb6 <HAL_DCMIPP_CSI_IRQHandler+0x702>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34004e84:	69fb      	ldr	r3, [r7, #28]
34004e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004e8a:	f023 0202 	bic.w	r2, r3, #2
34004e8e:	69fb      	ldr	r3, [r7, #28]
34004e90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34004e94:	69fb      	ldr	r3, [r7, #28]
34004e96:	2202      	movs	r2, #2
34004e98:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34004e9c:	687b      	ldr	r3, [r7, #4]
34004e9e:	689b      	ldr	r3, [r3, #8]
34004ea0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34004ea4:	687b      	ldr	r3, [r7, #4]
34004ea6:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004ea8:	687b      	ldr	r3, [r7, #4]
34004eaa:	2204      	movs	r2, #4
34004eac:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004eae:	2101      	movs	r1, #1
34004eb0:	6878      	ldr	r0, [r7, #4]
34004eb2:	f000 f954 	bl	3400515e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34004eb6:	697b      	ldr	r3, [r7, #20]
34004eb8:	f003 0304 	and.w	r3, r3, #4
34004ebc:	2b00      	cmp	r3, #0
34004ebe:	d01a      	beq.n	34004ef6 <HAL_DCMIPP_CSI_IRQHandler+0x742>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34004ec0:	68fb      	ldr	r3, [r7, #12]
34004ec2:	f003 0304 	and.w	r3, r3, #4
34004ec6:	2b00      	cmp	r3, #0
34004ec8:	d015      	beq.n	34004ef6 <HAL_DCMIPP_CSI_IRQHandler+0x742>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34004eca:	69fb      	ldr	r3, [r7, #28]
34004ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004ed0:	f023 0204 	bic.w	r2, r3, #4
34004ed4:	69fb      	ldr	r3, [r7, #28]
34004ed6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34004eda:	69fb      	ldr	r3, [r7, #28]
34004edc:	2204      	movs	r2, #4
34004ede:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34004ee2:	687b      	ldr	r3, [r7, #4]
34004ee4:	689b      	ldr	r3, [r3, #8]
34004ee6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34004eea:	687b      	ldr	r3, [r7, #4]
34004eec:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004eee:	2101      	movs	r1, #1
34004ef0:	6878      	ldr	r0, [r7, #4]
34004ef2:	f000 f934 	bl	3400515e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34004ef6:	697b      	ldr	r3, [r7, #20]
34004ef8:	f003 0308 	and.w	r3, r3, #8
34004efc:	2b00      	cmp	r3, #0
34004efe:	d01a      	beq.n	34004f36 <HAL_DCMIPP_CSI_IRQHandler+0x782>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34004f00:	68fb      	ldr	r3, [r7, #12]
34004f02:	f003 0308 	and.w	r3, r3, #8
34004f06:	2b00      	cmp	r3, #0
34004f08:	d015      	beq.n	34004f36 <HAL_DCMIPP_CSI_IRQHandler+0x782>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34004f0a:	69fb      	ldr	r3, [r7, #28]
34004f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004f10:	f023 0208 	bic.w	r2, r3, #8
34004f14:	69fb      	ldr	r3, [r7, #28]
34004f16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34004f1a:	69fb      	ldr	r3, [r7, #28]
34004f1c:	2208      	movs	r2, #8
34004f1e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34004f22:	687b      	ldr	r3, [r7, #4]
34004f24:	689b      	ldr	r3, [r3, #8]
34004f26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
34004f2a:	687b      	ldr	r3, [r7, #4]
34004f2c:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004f2e:	2101      	movs	r1, #1
34004f30:	6878      	ldr	r0, [r7, #4]
34004f32:	f000 f914 	bl	3400515e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34004f36:	697b      	ldr	r3, [r7, #20]
34004f38:	f003 0310 	and.w	r3, r3, #16
34004f3c:	2b00      	cmp	r3, #0
34004f3e:	d01a      	beq.n	34004f76 <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34004f40:	68fb      	ldr	r3, [r7, #12]
34004f42:	f003 0310 	and.w	r3, r3, #16
34004f46:	2b00      	cmp	r3, #0
34004f48:	d015      	beq.n	34004f76 <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34004f4a:	69fb      	ldr	r3, [r7, #28]
34004f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004f50:	f023 0210 	bic.w	r2, r3, #16
34004f54:	69fb      	ldr	r3, [r7, #28]
34004f56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
34004f5a:	69fb      	ldr	r3, [r7, #28]
34004f5c:	2210      	movs	r2, #16
34004f5e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34004f62:	687b      	ldr	r3, [r7, #4]
34004f64:	689b      	ldr	r3, [r3, #8]
34004f66:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
34004f6a:	687b      	ldr	r3, [r7, #4]
34004f6c:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004f6e:	2101      	movs	r1, #1
34004f70:	6878      	ldr	r0, [r7, #4]
34004f72:	f000 f8f4 	bl	3400515e <HAL_DCMIPP_CSI_LineErrorCallback>
    }
  }

  /* Lane 1 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
34004f76:	697b      	ldr	r3, [r7, #20]
34004f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004f7c:	2b00      	cmp	r3, #0
34004f7e:	d01e      	beq.n	34004fbe <HAL_DCMIPP_CSI_IRQHandler+0x80a>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34004f80:	68fb      	ldr	r3, [r7, #12]
34004f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004f86:	2b00      	cmp	r3, #0
34004f88:	d019      	beq.n	34004fbe <HAL_DCMIPP_CSI_IRQHandler+0x80a>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34004f8a:	69fb      	ldr	r3, [r7, #28]
34004f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34004f94:	69fb      	ldr	r3, [r7, #28]
34004f96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34004f9a:	69fb      	ldr	r3, [r7, #28]
34004f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
34004fa0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34004fa4:	687b      	ldr	r3, [r7, #4]
34004fa6:	689b      	ldr	r3, [r3, #8]
34004fa8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34004fac:	687b      	ldr	r3, [r7, #4]
34004fae:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004fb0:	687b      	ldr	r3, [r7, #4]
34004fb2:	2204      	movs	r2, #4
34004fb4:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004fb6:	2102      	movs	r1, #2
34004fb8:	6878      	ldr	r0, [r7, #4]
34004fba:	f000 f8d0 	bl	3400515e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34004fbe:	697b      	ldr	r3, [r7, #20]
34004fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004fc4:	2b00      	cmp	r3, #0
34004fc6:	d01e      	beq.n	34005006 <HAL_DCMIPP_CSI_IRQHandler+0x852>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34004fc8:	68fb      	ldr	r3, [r7, #12]
34004fca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004fce:	2b00      	cmp	r3, #0
34004fd0:	d019      	beq.n	34005006 <HAL_DCMIPP_CSI_IRQHandler+0x852>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34004fd2:	69fb      	ldr	r3, [r7, #28]
34004fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004fd8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34004fdc:	69fb      	ldr	r3, [r7, #28]
34004fde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34004fe2:	69fb      	ldr	r3, [r7, #28]
34004fe4:	f44f 7200 	mov.w	r2, #512	@ 0x200
34004fe8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34004fec:	687b      	ldr	r3, [r7, #4]
34004fee:	689b      	ldr	r3, [r3, #8]
34004ff0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34004ff4:	687b      	ldr	r3, [r7, #4]
34004ff6:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004ff8:	687b      	ldr	r3, [r7, #4]
34004ffa:	2204      	movs	r2, #4
34004ffc:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004ffe:	2102      	movs	r1, #2
34005000:	6878      	ldr	r0, [r7, #4]
34005002:	f000 f8ac 	bl	3400515e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34005006:	697b      	ldr	r3, [r7, #20]
34005008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400500c:	2b00      	cmp	r3, #0
3400500e:	d01b      	beq.n	34005048 <HAL_DCMIPP_CSI_IRQHandler+0x894>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34005010:	68fb      	ldr	r3, [r7, #12]
34005012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34005016:	2b00      	cmp	r3, #0
34005018:	d016      	beq.n	34005048 <HAL_DCMIPP_CSI_IRQHandler+0x894>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3400501a:	69fb      	ldr	r3, [r7, #28]
3400501c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34005020:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34005024:	69fb      	ldr	r3, [r7, #28]
34005026:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
3400502a:	69fb      	ldr	r3, [r7, #28]
3400502c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34005030:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34005034:	687b      	ldr	r3, [r7, #4]
34005036:	689b      	ldr	r3, [r3, #8]
34005038:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
3400503c:	687b      	ldr	r3, [r7, #4]
3400503e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34005040:	2102      	movs	r1, #2
34005042:	6878      	ldr	r0, [r7, #4]
34005044:	f000 f88b 	bl	3400515e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34005048:	697b      	ldr	r3, [r7, #20]
3400504a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400504e:	2b00      	cmp	r3, #0
34005050:	d01b      	beq.n	3400508a <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34005052:	68fb      	ldr	r3, [r7, #12]
34005054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34005058:	2b00      	cmp	r3, #0
3400505a:	d016      	beq.n	3400508a <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
3400505c:	69fb      	ldr	r3, [r7, #28]
3400505e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34005062:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34005066:	69fb      	ldr	r3, [r7, #28]
34005068:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
3400506c:	69fb      	ldr	r3, [r7, #28]
3400506e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34005072:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34005076:	687b      	ldr	r3, [r7, #4]
34005078:	689b      	ldr	r3, [r3, #8]
3400507a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
3400507e:	687b      	ldr	r3, [r7, #4]
34005080:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34005082:	2102      	movs	r1, #2
34005084:	6878      	ldr	r0, [r7, #4]
34005086:	f000 f86a 	bl	3400515e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
3400508a:	697b      	ldr	r3, [r7, #20]
3400508c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34005090:	2b00      	cmp	r3, #0
34005092:	d01b      	beq.n	340050cc <HAL_DCMIPP_CSI_IRQHandler+0x918>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34005094:	68fb      	ldr	r3, [r7, #12]
34005096:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400509a:	2b00      	cmp	r3, #0
3400509c:	d016      	beq.n	340050cc <HAL_DCMIPP_CSI_IRQHandler+0x918>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
3400509e:	69fb      	ldr	r3, [r7, #28]
340050a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340050a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
340050a8:	69fb      	ldr	r3, [r7, #28]
340050aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340050ae:	69fb      	ldr	r3, [r7, #28]
340050b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340050b4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340050b8:	687b      	ldr	r3, [r7, #4]
340050ba:	689b      	ldr	r3, [r3, #8]
340050bc:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
340050c0:	687b      	ldr	r3, [r7, #4]
340050c2:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340050c4:	2102      	movs	r1, #2
340050c6:	6878      	ldr	r0, [r7, #4]
340050c8:	f000 f849 	bl	3400515e <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
340050cc:	69bb      	ldr	r3, [r7, #24]
340050ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340050d2:	2b00      	cmp	r3, #0
340050d4:	d014      	beq.n	34005100 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
340050d6:	693b      	ldr	r3, [r7, #16]
340050d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340050dc:	2b00      	cmp	r3, #0
340050de:	d00f      	beq.n	34005100 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340050e0:	69fb      	ldr	r3, [r7, #28]
340050e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340050e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
340050ea:	69fb      	ldr	r3, [r7, #28]
340050ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
340050f0:	69fb      	ldr	r3, [r7, #28]
340050f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340050f6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ShortPacketDetectionEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
340050fa:	6878      	ldr	r0, [r7, #4]
340050fc:	f000 f844 	bl	34005188 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34005100:	bf00      	nop
34005102:	3720      	adds	r7, #32
34005104:	46bd      	mov	sp, r7
34005106:	bd80      	pop	{r7, pc}

34005108 <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34005108:	b480      	push	{r7}
3400510a:	b083      	sub	sp, #12
3400510c:	af00      	add	r7, sp, #0
3400510e:	6078      	str	r0, [r7, #4]
34005110:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LineEventMainPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34005112:	bf00      	nop
34005114:	370c      	adds	r7, #12
34005116:	46bd      	mov	sp, r7
34005118:	f85d 7b04 	ldr.w	r7, [sp], #4
3400511c:	4770      	bx	lr

3400511e <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3400511e:	b480      	push	{r7}
34005120:	b083      	sub	sp, #12
34005122:	af00      	add	r7, sp, #0
34005124:	6078      	str	r0, [r7, #4]
34005126:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LimitEventDumpPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34005128:	bf00      	nop
3400512a:	370c      	adds	r7, #12
3400512c:	46bd      	mov	sp, r7
3400512e:	f85d 7b04 	ldr.w	r7, [sp], #4
34005132:	4770      	bx	lr

34005134 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34005134:	b480      	push	{r7}
34005136:	b083      	sub	sp, #12
34005138:	af00      	add	r7, sp, #0
3400513a:	6078      	str	r0, [r7, #4]
3400513c:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_SyncErrorEventCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
3400513e:	bf00      	nop
34005140:	370c      	adds	r7, #12
34005142:	46bd      	mov	sp, r7
34005144:	f85d 7b04 	ldr.w	r7, [sp], #4
34005148:	4770      	bx	lr

3400514a <HAL_DCMIPP_ErrorCallback>:
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
3400514a:	b480      	push	{r7}
3400514c:	b083      	sub	sp, #12
3400514e:	af00      	add	r7, sp, #0
34005150:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_ErrorCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmipp);
}
34005152:	bf00      	nop
34005154:	370c      	adds	r7, #12
34005156:	46bd      	mov	sp, r7
34005158:	f85d 7b04 	ldr.w	r7, [sp], #4
3400515c:	4770      	bx	lr

3400515e <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
{
3400515e:	b480      	push	{r7}
34005160:	b083      	sub	sp, #12
34005162:	af00      	add	r7, sp, #0
34005164:	6078      	str	r0, [r7, #4]
34005166:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_LineErrorCallback could be implemented in the user file
   */
  UNUSED(DataLane);
  UNUSED(hdcmipp);
}
34005168:	bf00      	nop
3400516a:	370c      	adds	r7, #12
3400516c:	46bd      	mov	sp, r7
3400516e:	f85d 7b04 	ldr.w	r7, [sp], #4
34005172:	4770      	bx	lr

34005174 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34005174:	b480      	push	{r7}
34005176:	b083      	sub	sp, #12
34005178:	af00      	add	r7, sp, #0
3400517a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
3400517c:	bf00      	nop
3400517e:	370c      	adds	r7, #12
34005180:	46bd      	mov	sp, r7
34005182:	f85d 7b04 	ldr.w	r7, [sp], #4
34005186:	4770      	bx	lr

34005188 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34005188:	b480      	push	{r7}
3400518a:	b083      	sub	sp, #12
3400518c:	af00      	add	r7, sp, #0
3400518e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
34005190:	bf00      	nop
34005192:	370c      	adds	r7, #12
34005194:	46bd      	mov	sp, r7
34005196:	f85d 7b04 	ldr.w	r7, [sp], #4
3400519a:	4770      	bx	lr

3400519c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
3400519c:	b480      	push	{r7}
3400519e:	b083      	sub	sp, #12
340051a0:	af00      	add	r7, sp, #0
340051a2:	6078      	str	r0, [r7, #4]
340051a4:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_EndOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
340051a6:	bf00      	nop
340051a8:	370c      	adds	r7, #12
340051aa:	46bd      	mov	sp, r7
340051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
340051b0:	4770      	bx	lr

340051b2 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
340051b2:	b480      	push	{r7}
340051b4:	b083      	sub	sp, #12
340051b6:	af00      	add	r7, sp, #0
340051b8:	6078      	str	r0, [r7, #4]
340051ba:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_StartOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
340051bc:	bf00      	nop
340051be:	370c      	adds	r7, #12
340051c0:	46bd      	mov	sp, r7
340051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340051c6:	4770      	bx	lr

340051c8 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
{
340051c8:	b480      	push	{r7}
340051ca:	b083      	sub	sp, #12
340051cc:	af00      	add	r7, sp, #0
340051ce:	6078      	str	r0, [r7, #4]
340051d0:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_TimerCounterEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(Timer);
}
340051d2:	bf00      	nop
340051d4:	370c      	adds	r7, #12
340051d6:	46bd      	mov	sp, r7
340051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
340051dc:	4770      	bx	lr

340051de <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
{
340051de:	b480      	push	{r7}
340051e0:	b083      	sub	sp, #12
340051e2:	af00      	add	r7, sp, #0
340051e4:	6078      	str	r0, [r7, #4]
340051e6:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
          the HAL_DCMIPP_CSI_LineByteEventCallback could be implemented in the user file
  */
  UNUSED(hdcmipp);
  UNUSED(Counter);
}
340051e8:	bf00      	nop
340051ea:	370c      	adds	r7, #12
340051ec:	46bd      	mov	sp, r7
340051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
340051f2:	4770      	bx	lr

340051f4 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
340051f4:	b580      	push	{r7, lr}
340051f6:	b084      	sub	sp, #16
340051f8:	af00      	add	r7, sp, #0
340051fa:	60f8      	str	r0, [r7, #12]
340051fc:	60b9      	str	r1, [r7, #8]
340051fe:	607a      	str	r2, [r7, #4]
34005200:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34005202:	68fb      	ldr	r3, [r7, #12]
34005204:	2b00      	cmp	r3, #0
34005206:	d101      	bne.n	3400520c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
34005208:	2301      	movs	r3, #1
3400520a:	e05b      	b.n	340052c4 <HAL_DMA_Start_IT+0xd0>
  }

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));
3400520c:	683b      	ldr	r3, [r7, #0]
3400520e:	2b00      	cmp	r3, #0
34005210:	d003      	beq.n	3400521a <HAL_DMA_Start_IT+0x26>
34005212:	683b      	ldr	r3, [r7, #0]
34005214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34005218:	d304      	bcc.n	34005224 <HAL_DMA_Start_IT+0x30>
3400521a:	f240 2143 	movw	r1, #579	@ 0x243
3400521e:	482b      	ldr	r0, [pc, #172]	@ (340052cc <HAL_DMA_Start_IT+0xd8>)
34005220:	f7fc fd40 	bl	34001ca4 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
34005224:	68fb      	ldr	r3, [r7, #12]
34005226:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
3400522a:	2b01      	cmp	r3, #1
3400522c:	d101      	bne.n	34005232 <HAL_DMA_Start_IT+0x3e>
3400522e:	2302      	movs	r3, #2
34005230:	e048      	b.n	340052c4 <HAL_DMA_Start_IT+0xd0>
34005232:	68fb      	ldr	r3, [r7, #12]
34005234:	2201      	movs	r2, #1
34005236:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
3400523a:	68fb      	ldr	r3, [r7, #12]
3400523c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34005240:	b2db      	uxtb	r3, r3
34005242:	2b01      	cmp	r3, #1
34005244:	d136      	bne.n	340052b4 <HAL_DMA_Start_IT+0xc0>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
34005246:	68fb      	ldr	r3, [r7, #12]
34005248:	2202      	movs	r2, #2
3400524a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
3400524e:	68fb      	ldr	r3, [r7, #12]
34005250:	2200      	movs	r2, #0
34005252:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
34005254:	683b      	ldr	r3, [r7, #0]
34005256:	687a      	ldr	r2, [r7, #4]
34005258:	68b9      	ldr	r1, [r7, #8]
3400525a:	68f8      	ldr	r0, [r7, #12]
3400525c:	f000 f9d6 	bl	3400560c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
34005260:	68fb      	ldr	r3, [r7, #12]
34005262:	681b      	ldr	r3, [r3, #0]
34005264:	695a      	ldr	r2, [r3, #20]
34005266:	68fb      	ldr	r3, [r7, #12]
34005268:	681b      	ldr	r3, [r3, #0]
3400526a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
3400526e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
34005270:	68fb      	ldr	r3, [r7, #12]
34005272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005274:	2b00      	cmp	r3, #0
34005276:	d007      	beq.n	34005288 <HAL_DMA_Start_IT+0x94>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
34005278:	68fb      	ldr	r3, [r7, #12]
3400527a:	681b      	ldr	r3, [r3, #0]
3400527c:	695a      	ldr	r2, [r3, #20]
3400527e:	68fb      	ldr	r3, [r7, #12]
34005280:	681b      	ldr	r3, [r3, #0]
34005282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34005286:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
34005288:	68fb      	ldr	r3, [r7, #12]
3400528a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400528c:	2b00      	cmp	r3, #0
3400528e:	d007      	beq.n	340052a0 <HAL_DMA_Start_IT+0xac>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
34005290:	68fb      	ldr	r3, [r7, #12]
34005292:	681b      	ldr	r3, [r3, #0]
34005294:	695a      	ldr	r2, [r3, #20]
34005296:	68fb      	ldr	r3, [r7, #12]
34005298:	681b      	ldr	r3, [r3, #0]
3400529a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
3400529e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
340052a0:	68fb      	ldr	r3, [r7, #12]
340052a2:	681b      	ldr	r3, [r3, #0]
340052a4:	695a      	ldr	r2, [r3, #20]
340052a6:	68fb      	ldr	r3, [r7, #12]
340052a8:	681b      	ldr	r3, [r3, #0]
340052aa:	f042 0201 	orr.w	r2, r2, #1
340052ae:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
340052b0:	2300      	movs	r3, #0
340052b2:	e007      	b.n	340052c4 <HAL_DMA_Start_IT+0xd0>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
340052b4:	68fb      	ldr	r3, [r7, #12]
340052b6:	2240      	movs	r2, #64	@ 0x40
340052b8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
340052ba:	68fb      	ldr	r3, [r7, #12]
340052bc:	2200      	movs	r2, #0
340052be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
340052c2:	2301      	movs	r3, #1
}
340052c4:	4618      	mov	r0, r3
340052c6:	3710      	adds	r7, #16
340052c8:	46bd      	mov	sp, r7
340052ca:	bd80      	pop	{r7, pc}
340052cc:	3401e5bc 	.word	0x3401e5bc

340052d0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
340052d0:	b480      	push	{r7}
340052d2:	b083      	sub	sp, #12
340052d4:	af00      	add	r7, sp, #0
340052d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
340052d8:	687b      	ldr	r3, [r7, #4]
340052da:	2b00      	cmp	r3, #0
340052dc:	d101      	bne.n	340052e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
340052de:	2301      	movs	r3, #1
340052e0:	e019      	b.n	34005316 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
340052e2:	687b      	ldr	r3, [r7, #4]
340052e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
340052e8:	b2db      	uxtb	r3, r3
340052ea:	2b02      	cmp	r3, #2
340052ec:	d004      	beq.n	340052f8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
340052ee:	687b      	ldr	r3, [r7, #4]
340052f0:	2220      	movs	r2, #32
340052f2:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
340052f4:	2301      	movs	r3, #1
340052f6:	e00e      	b.n	34005316 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
340052f8:	687b      	ldr	r3, [r7, #4]
340052fa:	2204      	movs	r2, #4
340052fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
34005300:	687b      	ldr	r3, [r7, #4]
34005302:	681b      	ldr	r3, [r3, #0]
34005304:	695b      	ldr	r3, [r3, #20]
34005306:	687a      	ldr	r2, [r7, #4]
34005308:	6812      	ldr	r2, [r2, #0]
3400530a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
3400530e:	f043 0304 	orr.w	r3, r3, #4
34005312:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
34005314:	2300      	movs	r3, #0
}
34005316:	4618      	mov	r0, r3
34005318:	370c      	adds	r7, #12
3400531a:	46bd      	mov	sp, r7
3400531c:	f85d 7b04 	ldr.w	r7, [sp], #4
34005320:	4770      	bx	lr

34005322 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
34005322:	b580      	push	{r7, lr}
34005324:	b086      	sub	sp, #24
34005326:	af00      	add	r7, sp, #0
34005328:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
3400532a:	687b      	ldr	r3, [r7, #4]
3400532c:	681b      	ldr	r3, [r3, #0]
3400532e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
34005332:	f023 030f 	bic.w	r3, r3, #15
34005336:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
34005338:	687b      	ldr	r3, [r7, #4]
3400533a:	681b      	ldr	r3, [r3, #0]
3400533c:	f3c3 030b 	ubfx	r3, r3, #0, #12
34005340:	3b50      	subs	r3, #80	@ 0x50
34005342:	09db      	lsrs	r3, r3, #7
34005344:	f003 031f 	and.w	r3, r3, #31
34005348:	2201      	movs	r2, #1
3400534a:	fa02 f303 	lsl.w	r3, r2, r3
3400534e:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
34005350:	697b      	ldr	r3, [r7, #20]
34005352:	68db      	ldr	r3, [r3, #12]
34005354:	693a      	ldr	r2, [r7, #16]
34005356:	4013      	ands	r3, r2
34005358:	60fb      	str	r3, [r7, #12]
#if defined (CPU_IN_SECURE_STATE)
  uint32_t global_active_flag_s = IS_DMA_GLOBAL_ACTIVE_FLAG_S(p_dma_instance, global_it_flag);
3400535a:	697b      	ldr	r3, [r7, #20]
3400535c:	691b      	ldr	r3, [r3, #16]
3400535e:	693a      	ldr	r2, [r7, #16]
34005360:	4013      	ands	r3, r2
34005362:	60bb      	str	r3, [r7, #8]
#endif /* CPU_IN_SECURE_STATE */

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (CPU_IN_SECURE_STATE)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
34005364:	68bb      	ldr	r3, [r7, #8]
34005366:	2b00      	cmp	r3, #0
34005368:	d103      	bne.n	34005372 <HAL_DMA_IRQHandler+0x50>
3400536a:	68fb      	ldr	r3, [r7, #12]
3400536c:	2b00      	cmp	r3, #0
3400536e:	f000 813b 	beq.w	340055e8 <HAL_DMA_IRQHandler+0x2c6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
34005372:	687b      	ldr	r3, [r7, #4]
34005374:	681b      	ldr	r3, [r3, #0]
34005376:	691b      	ldr	r3, [r3, #16]
34005378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400537c:	2b00      	cmp	r3, #0
3400537e:	d011      	beq.n	340053a4 <HAL_DMA_IRQHandler+0x82>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
34005380:	687b      	ldr	r3, [r7, #4]
34005382:	681b      	ldr	r3, [r3, #0]
34005384:	695b      	ldr	r3, [r3, #20]
34005386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400538a:	2b00      	cmp	r3, #0
3400538c:	d00a      	beq.n	340053a4 <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
3400538e:	687b      	ldr	r3, [r7, #4]
34005390:	681b      	ldr	r3, [r3, #0]
34005392:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34005396:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
34005398:	687b      	ldr	r3, [r7, #4]
3400539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3400539c:	f043 0201 	orr.w	r2, r3, #1
340053a0:	687b      	ldr	r3, [r7, #4]
340053a2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
340053a4:	687b      	ldr	r3, [r7, #4]
340053a6:	681b      	ldr	r3, [r3, #0]
340053a8:	691b      	ldr	r3, [r3, #16]
340053aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340053ae:	2b00      	cmp	r3, #0
340053b0:	d011      	beq.n	340053d6 <HAL_DMA_IRQHandler+0xb4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
340053b2:	687b      	ldr	r3, [r7, #4]
340053b4:	681b      	ldr	r3, [r3, #0]
340053b6:	695b      	ldr	r3, [r3, #20]
340053b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340053bc:	2b00      	cmp	r3, #0
340053be:	d00a      	beq.n	340053d6 <HAL_DMA_IRQHandler+0xb4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
340053c0:	687b      	ldr	r3, [r7, #4]
340053c2:	681b      	ldr	r3, [r3, #0]
340053c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
340053c8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
340053ca:	687b      	ldr	r3, [r7, #4]
340053cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340053ce:	f043 0202 	orr.w	r2, r3, #2
340053d2:	687b      	ldr	r3, [r7, #4]
340053d4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
340053d6:	687b      	ldr	r3, [r7, #4]
340053d8:	681b      	ldr	r3, [r3, #0]
340053da:	691b      	ldr	r3, [r3, #16]
340053dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340053e0:	2b00      	cmp	r3, #0
340053e2:	d011      	beq.n	34005408 <HAL_DMA_IRQHandler+0xe6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
340053e4:	687b      	ldr	r3, [r7, #4]
340053e6:	681b      	ldr	r3, [r3, #0]
340053e8:	695b      	ldr	r3, [r3, #20]
340053ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340053ee:	2b00      	cmp	r3, #0
340053f0:	d00a      	beq.n	34005408 <HAL_DMA_IRQHandler+0xe6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
340053f2:	687b      	ldr	r3, [r7, #4]
340053f4:	681b      	ldr	r3, [r3, #0]
340053f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340053fa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
340053fc:	687b      	ldr	r3, [r7, #4]
340053fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34005400:	f043 0204 	orr.w	r2, r3, #4
34005404:	687b      	ldr	r3, [r7, #4]
34005406:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
34005408:	687b      	ldr	r3, [r7, #4]
3400540a:	681b      	ldr	r3, [r3, #0]
3400540c:	691b      	ldr	r3, [r3, #16]
3400540e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34005412:	2b00      	cmp	r3, #0
34005414:	d011      	beq.n	3400543a <HAL_DMA_IRQHandler+0x118>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
34005416:	687b      	ldr	r3, [r7, #4]
34005418:	681b      	ldr	r3, [r3, #0]
3400541a:	695b      	ldr	r3, [r3, #20]
3400541c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34005420:	2b00      	cmp	r3, #0
34005422:	d00a      	beq.n	3400543a <HAL_DMA_IRQHandler+0x118>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
34005424:	687b      	ldr	r3, [r7, #4]
34005426:	681b      	ldr	r3, [r3, #0]
34005428:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3400542c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
3400542e:	687b      	ldr	r3, [r7, #4]
34005430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34005432:	f043 0208 	orr.w	r2, r3, #8
34005436:	687b      	ldr	r3, [r7, #4]
34005438:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
3400543a:	687b      	ldr	r3, [r7, #4]
3400543c:	681b      	ldr	r3, [r3, #0]
3400543e:	691b      	ldr	r3, [r3, #16]
34005440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34005444:	2b00      	cmp	r3, #0
34005446:	d013      	beq.n	34005470 <HAL_DMA_IRQHandler+0x14e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
34005448:	687b      	ldr	r3, [r7, #4]
3400544a:	681b      	ldr	r3, [r3, #0]
3400544c:	695b      	ldr	r3, [r3, #20]
3400544e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34005452:	2b00      	cmp	r3, #0
34005454:	d00c      	beq.n	34005470 <HAL_DMA_IRQHandler+0x14e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
34005456:	687b      	ldr	r3, [r7, #4]
34005458:	681b      	ldr	r3, [r3, #0]
3400545a:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400545e:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
34005460:	687b      	ldr	r3, [r7, #4]
34005462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005464:	2b00      	cmp	r3, #0
34005466:	d003      	beq.n	34005470 <HAL_DMA_IRQHandler+0x14e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
34005468:	687b      	ldr	r3, [r7, #4]
3400546a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400546c:	6878      	ldr	r0, [r7, #4]
3400546e:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
34005470:	687b      	ldr	r3, [r7, #4]
34005472:	681b      	ldr	r3, [r3, #0]
34005474:	691b      	ldr	r3, [r3, #16]
34005476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400547a:	2b00      	cmp	r3, #0
3400547c:	d04c      	beq.n	34005518 <HAL_DMA_IRQHandler+0x1f6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
3400547e:	687b      	ldr	r3, [r7, #4]
34005480:	681b      	ldr	r3, [r3, #0]
34005482:	695b      	ldr	r3, [r3, #20]
34005484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34005488:	2b00      	cmp	r3, #0
3400548a:	d045      	beq.n	34005518 <HAL_DMA_IRQHandler+0x1f6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
3400548c:	687b      	ldr	r3, [r7, #4]
3400548e:	681b      	ldr	r3, [r3, #0]
34005490:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34005494:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
34005496:	687b      	ldr	r3, [r7, #4]
34005498:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
3400549c:	b2db      	uxtb	r3, r3
3400549e:	2b04      	cmp	r3, #4
340054a0:	d12e      	bne.n	34005500 <HAL_DMA_IRQHandler+0x1de>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
340054a2:	687b      	ldr	r3, [r7, #4]
340054a4:	681b      	ldr	r3, [r3, #0]
340054a6:	695a      	ldr	r2, [r3, #20]
340054a8:	687b      	ldr	r3, [r7, #4]
340054aa:	681b      	ldr	r3, [r3, #0]
340054ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
340054b0:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
340054b2:	687b      	ldr	r3, [r7, #4]
340054b4:	681b      	ldr	r3, [r3, #0]
340054b6:	695a      	ldr	r2, [r3, #20]
340054b8:	687b      	ldr	r3, [r7, #4]
340054ba:	681b      	ldr	r3, [r3, #0]
340054bc:	f042 0202 	orr.w	r2, r2, #2
340054c0:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
340054c2:	687b      	ldr	r3, [r7, #4]
340054c4:	2201      	movs	r2, #1
340054c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
340054ca:	687b      	ldr	r3, [r7, #4]
340054cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340054ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340054d2:	2b00      	cmp	r3, #0
340054d4:	d007      	beq.n	340054e6 <HAL_DMA_IRQHandler+0x1c4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
340054d6:	687b      	ldr	r3, [r7, #4]
340054d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340054da:	2201      	movs	r2, #1
340054dc:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
340054de:	687b      	ldr	r3, [r7, #4]
340054e0:	681b      	ldr	r3, [r3, #0]
340054e2:	2200      	movs	r2, #0
340054e4:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
340054e6:	687b      	ldr	r3, [r7, #4]
340054e8:	2200      	movs	r2, #0
340054ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
340054ee:	687b      	ldr	r3, [r7, #4]
340054f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
340054f2:	2b00      	cmp	r3, #0
340054f4:	d07a      	beq.n	340055ec <HAL_DMA_IRQHandler+0x2ca>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
340054f6:	687b      	ldr	r3, [r7, #4]
340054f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
340054fa:	6878      	ldr	r0, [r7, #4]
340054fc:	4798      	blx	r3
        }

        return;
340054fe:	e075      	b.n	340055ec <HAL_DMA_IRQHandler+0x2ca>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
34005500:	687b      	ldr	r3, [r7, #4]
34005502:	2205      	movs	r2, #5
34005504:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
34005508:	687b      	ldr	r3, [r7, #4]
3400550a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400550c:	2b00      	cmp	r3, #0
3400550e:	d003      	beq.n	34005518 <HAL_DMA_IRQHandler+0x1f6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
34005510:	687b      	ldr	r3, [r7, #4]
34005512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34005514:	6878      	ldr	r0, [r7, #4]
34005516:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
34005518:	687b      	ldr	r3, [r7, #4]
3400551a:	681b      	ldr	r3, [r3, #0]
3400551c:	691b      	ldr	r3, [r3, #16]
3400551e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34005522:	2b00      	cmp	r3, #0
34005524:	d039      	beq.n	3400559a <HAL_DMA_IRQHandler+0x278>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
34005526:	687b      	ldr	r3, [r7, #4]
34005528:	681b      	ldr	r3, [r3, #0]
3400552a:	695b      	ldr	r3, [r3, #20]
3400552c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34005530:	2b00      	cmp	r3, #0
34005532:	d032      	beq.n	3400559a <HAL_DMA_IRQHandler+0x278>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34005534:	687b      	ldr	r3, [r7, #4]
34005536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34005538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3400553c:	2b00      	cmp	r3, #0
3400553e:	d012      	beq.n	34005566 <HAL_DMA_IRQHandler+0x244>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
34005540:	687b      	ldr	r3, [r7, #4]
34005542:	681b      	ldr	r3, [r3, #0]
34005544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34005546:	2b00      	cmp	r3, #0
34005548:	d116      	bne.n	34005578 <HAL_DMA_IRQHandler+0x256>
        {
          if (hdma->Instance->CBR1 == 0U)
3400554a:	687b      	ldr	r3, [r7, #4]
3400554c:	681b      	ldr	r3, [r3, #0]
3400554e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005550:	2b00      	cmp	r3, #0
34005552:	d111      	bne.n	34005578 <HAL_DMA_IRQHandler+0x256>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
34005554:	687b      	ldr	r3, [r7, #4]
34005556:	2201      	movs	r2, #1
34005558:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
3400555c:	687b      	ldr	r3, [r7, #4]
3400555e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005560:	2201      	movs	r2, #1
34005562:	731a      	strb	r2, [r3, #12]
34005564:	e008      	b.n	34005578 <HAL_DMA_IRQHandler+0x256>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
34005566:	687b      	ldr	r3, [r7, #4]
34005568:	681b      	ldr	r3, [r3, #0]
3400556a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400556c:	2b00      	cmp	r3, #0
3400556e:	d103      	bne.n	34005578 <HAL_DMA_IRQHandler+0x256>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
34005570:	687b      	ldr	r3, [r7, #4]
34005572:	2201      	movs	r2, #1
34005574:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
34005578:	687b      	ldr	r3, [r7, #4]
3400557a:	681b      	ldr	r3, [r3, #0]
3400557c:	f44f 7240 	mov.w	r2, #768	@ 0x300
34005580:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
34005582:	687b      	ldr	r3, [r7, #4]
34005584:	2200      	movs	r2, #0
34005586:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
3400558a:	687b      	ldr	r3, [r7, #4]
3400558c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400558e:	2b00      	cmp	r3, #0
34005590:	d003      	beq.n	3400559a <HAL_DMA_IRQHandler+0x278>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
34005592:	687b      	ldr	r3, [r7, #4]
34005594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34005596:	6878      	ldr	r0, [r7, #4]
34005598:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
3400559a:	687b      	ldr	r3, [r7, #4]
3400559c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3400559e:	2b00      	cmp	r3, #0
340055a0:	d025      	beq.n	340055ee <HAL_DMA_IRQHandler+0x2cc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
340055a2:	687b      	ldr	r3, [r7, #4]
340055a4:	681b      	ldr	r3, [r3, #0]
340055a6:	695a      	ldr	r2, [r3, #20]
340055a8:	687b      	ldr	r3, [r7, #4]
340055aa:	681b      	ldr	r3, [r3, #0]
340055ac:	f042 0202 	orr.w	r2, r2, #2
340055b0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
340055b2:	687b      	ldr	r3, [r7, #4]
340055b4:	2201      	movs	r2, #1
340055b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
340055ba:	687b      	ldr	r3, [r7, #4]
340055bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340055be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340055c2:	2b00      	cmp	r3, #0
340055c4:	d003      	beq.n	340055ce <HAL_DMA_IRQHandler+0x2ac>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
340055c6:	687b      	ldr	r3, [r7, #4]
340055c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340055ca:	2201      	movs	r2, #1
340055cc:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
340055ce:	687b      	ldr	r3, [r7, #4]
340055d0:	2200      	movs	r2, #0
340055d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
340055d6:	687b      	ldr	r3, [r7, #4]
340055d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
340055da:	2b00      	cmp	r3, #0
340055dc:	d007      	beq.n	340055ee <HAL_DMA_IRQHandler+0x2cc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
340055de:	687b      	ldr	r3, [r7, #4]
340055e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
340055e2:	6878      	ldr	r0, [r7, #4]
340055e4:	4798      	blx	r3
340055e6:	e002      	b.n	340055ee <HAL_DMA_IRQHandler+0x2cc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
340055e8:	bf00      	nop
340055ea:	e000      	b.n	340055ee <HAL_DMA_IRQHandler+0x2cc>
        return;
340055ec:	bf00      	nop
    }
  }
}
340055ee:	3718      	adds	r7, #24
340055f0:	46bd      	mov	sp, r7
340055f2:	bd80      	pop	{r7, pc}

340055f4 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
340055f4:	b480      	push	{r7}
340055f6:	b083      	sub	sp, #12
340055f8:	af00      	add	r7, sp, #0
340055fa:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
340055fc:	687b      	ldr	r3, [r7, #4]
340055fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
34005600:	4618      	mov	r0, r3
34005602:	370c      	adds	r7, #12
34005604:	46bd      	mov	sp, r7
34005606:	f85d 7b04 	ldr.w	r7, [sp], #4
3400560a:	4770      	bx	lr

3400560c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
3400560c:	b480      	push	{r7}
3400560e:	b085      	sub	sp, #20
34005610:	af00      	add	r7, sp, #0
34005612:	60f8      	str	r0, [r7, #12]
34005614:	60b9      	str	r1, [r7, #8]
34005616:	607a      	str	r2, [r7, #4]
34005618:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
3400561a:	68fb      	ldr	r3, [r7, #12]
3400561c:	681b      	ldr	r3, [r3, #0]
3400561e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005620:	0c1b      	lsrs	r3, r3, #16
34005622:	041b      	lsls	r3, r3, #16
34005624:	683a      	ldr	r2, [r7, #0]
34005626:	b291      	uxth	r1, r2
34005628:	68fa      	ldr	r2, [r7, #12]
3400562a:	6812      	ldr	r2, [r2, #0]
3400562c:	430b      	orrs	r3, r1
3400562e:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
34005630:	68fb      	ldr	r3, [r7, #12]
34005632:	681b      	ldr	r3, [r3, #0]
34005634:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
34005638:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
3400563a:	68fb      	ldr	r3, [r7, #12]
3400563c:	681b      	ldr	r3, [r3, #0]
3400563e:	68ba      	ldr	r2, [r7, #8]
34005640:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
34005642:	68fb      	ldr	r3, [r7, #12]
34005644:	681b      	ldr	r3, [r3, #0]
34005646:	687a      	ldr	r2, [r7, #4]
34005648:	651a      	str	r2, [r3, #80]	@ 0x50
}
3400564a:	bf00      	nop
3400564c:	3714      	adds	r7, #20
3400564e:	46bd      	mov	sp, r7
34005650:	f85d 7b04 	ldr.w	r7, [sp], #4
34005654:	4770      	bx	lr

34005656 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
34005656:	b580      	push	{r7, lr}
34005658:	b084      	sub	sp, #16
3400565a:	af00      	add	r7, sp, #0
3400565c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
3400565e:	687b      	ldr	r3, [r7, #4]
34005660:	681b      	ldr	r3, [r3, #0]
34005662:	685b      	ldr	r3, [r3, #4]
34005664:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
34005666:	687b      	ldr	r3, [r7, #4]
34005668:	681b      	ldr	r3, [r3, #0]
3400566a:	681b      	ldr	r3, [r3, #0]
3400566c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
3400566e:	68fb      	ldr	r3, [r7, #12]
34005670:	f003 0301 	and.w	r3, r3, #1
34005674:	2b00      	cmp	r3, #0
34005676:	d026      	beq.n	340056c6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
34005678:	68bb      	ldr	r3, [r7, #8]
3400567a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400567e:	2b00      	cmp	r3, #0
34005680:	d021      	beq.n	340056c6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
34005682:	687b      	ldr	r3, [r7, #4]
34005684:	681b      	ldr	r3, [r3, #0]
34005686:	681a      	ldr	r2, [r3, #0]
34005688:	687b      	ldr	r3, [r7, #4]
3400568a:	681b      	ldr	r3, [r3, #0]
3400568c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34005690:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
34005692:	687b      	ldr	r3, [r7, #4]
34005694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005696:	f043 0201 	orr.w	r2, r3, #1
3400569a:	687b      	ldr	r3, [r7, #4]
3400569c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
3400569e:	687b      	ldr	r3, [r7, #4]
340056a0:	681b      	ldr	r3, [r3, #0]
340056a2:	2201      	movs	r2, #1
340056a4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
340056a6:	687b      	ldr	r3, [r7, #4]
340056a8:	2204      	movs	r2, #4
340056aa:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
340056ae:	687b      	ldr	r3, [r7, #4]
340056b0:	2200      	movs	r2, #0
340056b2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
340056b6:	687b      	ldr	r3, [r7, #4]
340056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340056ba:	2b00      	cmp	r3, #0
340056bc:	d003      	beq.n	340056c6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
340056be:	687b      	ldr	r3, [r7, #4]
340056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340056c2:	6878      	ldr	r0, [r7, #4]
340056c4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
340056c6:	68fb      	ldr	r3, [r7, #12]
340056c8:	f003 0320 	and.w	r3, r3, #32
340056cc:	2b00      	cmp	r3, #0
340056ce:	d026      	beq.n	3400571e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
340056d0:	68bb      	ldr	r3, [r7, #8]
340056d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340056d6:	2b00      	cmp	r3, #0
340056d8:	d021      	beq.n	3400571e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
340056da:	687b      	ldr	r3, [r7, #4]
340056dc:	681b      	ldr	r3, [r3, #0]
340056de:	681a      	ldr	r2, [r3, #0]
340056e0:	687b      	ldr	r3, [r7, #4]
340056e2:	681b      	ldr	r3, [r3, #0]
340056e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
340056e8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
340056ea:	687b      	ldr	r3, [r7, #4]
340056ec:	681b      	ldr	r3, [r3, #0]
340056ee:	2220      	movs	r2, #32
340056f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
340056f2:	687b      	ldr	r3, [r7, #4]
340056f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
340056f6:	f043 0202 	orr.w	r2, r3, #2
340056fa:	687b      	ldr	r3, [r7, #4]
340056fc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
340056fe:	687b      	ldr	r3, [r7, #4]
34005700:	2204      	movs	r2, #4
34005702:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34005706:	687b      	ldr	r3, [r7, #4]
34005708:	2200      	movs	r2, #0
3400570a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
3400570e:	687b      	ldr	r3, [r7, #4]
34005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34005712:	2b00      	cmp	r3, #0
34005714:	d003      	beq.n	3400571e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
34005716:	687b      	ldr	r3, [r7, #4]
34005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400571a:	6878      	ldr	r0, [r7, #4]
3400571c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
3400571e:	68fb      	ldr	r3, [r7, #12]
34005720:	f003 0308 	and.w	r3, r3, #8
34005724:	2b00      	cmp	r3, #0
34005726:	d026      	beq.n	34005776 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
34005728:	68bb      	ldr	r3, [r7, #8]
3400572a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400572e:	2b00      	cmp	r3, #0
34005730:	d021      	beq.n	34005776 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
34005732:	687b      	ldr	r3, [r7, #4]
34005734:	681b      	ldr	r3, [r3, #0]
34005736:	681a      	ldr	r2, [r3, #0]
34005738:	687b      	ldr	r3, [r7, #4]
3400573a:	681b      	ldr	r3, [r3, #0]
3400573c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34005740:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
34005742:	687b      	ldr	r3, [r7, #4]
34005744:	681b      	ldr	r3, [r3, #0]
34005746:	2208      	movs	r2, #8
34005748:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
3400574a:	687b      	ldr	r3, [r7, #4]
3400574c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400574e:	f043 0204 	orr.w	r2, r3, #4
34005752:	687b      	ldr	r3, [r7, #4]
34005754:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34005756:	687b      	ldr	r3, [r7, #4]
34005758:	2204      	movs	r2, #4
3400575a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
3400575e:	687b      	ldr	r3, [r7, #4]
34005760:	2200      	movs	r2, #0
34005762:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
34005766:	687b      	ldr	r3, [r7, #4]
34005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400576a:	2b00      	cmp	r3, #0
3400576c:	d003      	beq.n	34005776 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
3400576e:	687b      	ldr	r3, [r7, #4]
34005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34005772:	6878      	ldr	r0, [r7, #4]
34005774:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
34005776:	68fb      	ldr	r3, [r7, #12]
34005778:	f003 0304 	and.w	r3, r3, #4
3400577c:	2b00      	cmp	r3, #0
3400577e:	d013      	beq.n	340057a8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
34005780:	68bb      	ldr	r3, [r7, #8]
34005782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34005786:	2b00      	cmp	r3, #0
34005788:	d00e      	beq.n	340057a8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
3400578a:	687b      	ldr	r3, [r7, #4]
3400578c:	681b      	ldr	r3, [r3, #0]
3400578e:	681a      	ldr	r2, [r3, #0]
34005790:	687b      	ldr	r3, [r7, #4]
34005792:	681b      	ldr	r3, [r3, #0]
34005794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34005798:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
3400579a:	687b      	ldr	r3, [r7, #4]
3400579c:	681b      	ldr	r3, [r3, #0]
3400579e:	2204      	movs	r2, #4
340057a0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
340057a2:	6878      	ldr	r0, [r7, #4]
340057a4:	f000 f853 	bl	3400584e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
340057a8:	68fb      	ldr	r3, [r7, #12]
340057aa:	f003 0302 	and.w	r3, r3, #2
340057ae:	2b00      	cmp	r3, #0
340057b0:	d024      	beq.n	340057fc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
340057b2:	68bb      	ldr	r3, [r7, #8]
340057b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340057b8:	2b00      	cmp	r3, #0
340057ba:	d01f      	beq.n	340057fc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
340057bc:	687b      	ldr	r3, [r7, #4]
340057be:	681b      	ldr	r3, [r3, #0]
340057c0:	681a      	ldr	r2, [r3, #0]
340057c2:	687b      	ldr	r3, [r7, #4]
340057c4:	681b      	ldr	r3, [r3, #0]
340057c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
340057ca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
340057cc:	687b      	ldr	r3, [r7, #4]
340057ce:	681b      	ldr	r3, [r3, #0]
340057d0:	2202      	movs	r2, #2
340057d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
340057d4:	687b      	ldr	r3, [r7, #4]
340057d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
340057d8:	687b      	ldr	r3, [r7, #4]
340057da:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
340057dc:	687b      	ldr	r3, [r7, #4]
340057de:	2201      	movs	r2, #1
340057e0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
340057e4:	687b      	ldr	r3, [r7, #4]
340057e6:	2200      	movs	r2, #0
340057e8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
340057ec:	687b      	ldr	r3, [r7, #4]
340057ee:	6a1b      	ldr	r3, [r3, #32]
340057f0:	2b00      	cmp	r3, #0
340057f2:	d003      	beq.n	340057fc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
340057f4:	687b      	ldr	r3, [r7, #4]
340057f6:	6a1b      	ldr	r3, [r3, #32]
340057f8:	6878      	ldr	r0, [r7, #4]
340057fa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
340057fc:	68fb      	ldr	r3, [r7, #12]
340057fe:	f003 0310 	and.w	r3, r3, #16
34005802:	2b00      	cmp	r3, #0
34005804:	d01f      	beq.n	34005846 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
34005806:	68bb      	ldr	r3, [r7, #8]
34005808:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400580c:	2b00      	cmp	r3, #0
3400580e:	d01a      	beq.n	34005846 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34005810:	687b      	ldr	r3, [r7, #4]
34005812:	681b      	ldr	r3, [r3, #0]
34005814:	681a      	ldr	r2, [r3, #0]
34005816:	687b      	ldr	r3, [r7, #4]
34005818:	681b      	ldr	r3, [r3, #0]
3400581a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
3400581e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
34005820:	687b      	ldr	r3, [r7, #4]
34005822:	681b      	ldr	r3, [r3, #0]
34005824:	2210      	movs	r2, #16
34005826:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34005828:	687b      	ldr	r3, [r7, #4]
3400582a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
3400582c:	687b      	ldr	r3, [r7, #4]
3400582e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
34005830:	687b      	ldr	r3, [r7, #4]
34005832:	2201      	movs	r2, #1
34005834:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34005838:	687b      	ldr	r3, [r7, #4]
3400583a:	2200      	movs	r2, #0
3400583c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34005840:	6878      	ldr	r0, [r7, #4]
34005842:	f000 f80e 	bl	34005862 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
34005846:	bf00      	nop
34005848:	3710      	adds	r7, #16
3400584a:	46bd      	mov	sp, r7
3400584c:	bd80      	pop	{r7, pc}

3400584e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
3400584e:	b480      	push	{r7}
34005850:	b083      	sub	sp, #12
34005852:	af00      	add	r7, sp, #0
34005854:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
34005856:	bf00      	nop
34005858:	370c      	adds	r7, #12
3400585a:	46bd      	mov	sp, r7
3400585c:	f85d 7b04 	ldr.w	r7, [sp], #4
34005860:	4770      	bx	lr

34005862 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
34005862:	b480      	push	{r7}
34005864:	b083      	sub	sp, #12
34005866:	af00      	add	r7, sp, #0
34005868:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
3400586a:	bf00      	nop
3400586c:	370c      	adds	r7, #12
3400586e:	46bd      	mov	sp, r7
34005870:	f85d 7b04 	ldr.w	r7, [sp], #4
34005874:	4770      	bx	lr

34005876 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
34005876:	b580      	push	{r7, lr}
34005878:	b086      	sub	sp, #24
3400587a:	af00      	add	r7, sp, #0
3400587c:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
3400587e:	687b      	ldr	r3, [r7, #4]
34005880:	2b00      	cmp	r3, #0
34005882:	d003      	beq.n	3400588c <HAL_DMAEx_List_Start_IT+0x16>
34005884:	687b      	ldr	r3, [r7, #4]
34005886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005888:	2b00      	cmp	r3, #0
3400588a:	d101      	bne.n	34005890 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
3400588c:	2301      	movs	r3, #1
3400588e:	e082      	b.n	34005996 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
34005890:	687b      	ldr	r3, [r7, #4]
34005892:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34005896:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
34005898:	687b      	ldr	r3, [r7, #4]
3400589a:	681b      	ldr	r3, [r3, #0]
3400589c:	695b      	ldr	r3, [r3, #20]
3400589e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340058a2:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
340058a4:	7dfb      	ldrb	r3, [r7, #23]
340058a6:	2b01      	cmp	r3, #1
340058a8:	d005      	beq.n	340058b6 <HAL_DMAEx_List_Start_IT+0x40>
340058aa:	7dfb      	ldrb	r3, [r7, #23]
340058ac:	2b02      	cmp	r3, #2
340058ae:	d16a      	bne.n	34005986 <HAL_DMAEx_List_Start_IT+0x110>
340058b0:	693b      	ldr	r3, [r7, #16]
340058b2:	2b00      	cmp	r3, #0
340058b4:	d067      	beq.n	34005986 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
340058b6:	687b      	ldr	r3, [r7, #4]
340058b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
340058bc:	b2db      	uxtb	r3, r3
340058be:	2b01      	cmp	r3, #1
340058c0:	d157      	bne.n	34005972 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
340058c2:	687b      	ldr	r3, [r7, #4]
340058c4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
340058c8:	2b01      	cmp	r3, #1
340058ca:	d101      	bne.n	340058d0 <HAL_DMAEx_List_Start_IT+0x5a>
340058cc:	2302      	movs	r3, #2
340058ce:	e062      	b.n	34005996 <HAL_DMAEx_List_Start_IT+0x120>
340058d0:	687b      	ldr	r3, [r7, #4]
340058d2:	2201      	movs	r2, #1
340058d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
340058d8:	687b      	ldr	r3, [r7, #4]
340058da:	2202      	movs	r2, #2
340058dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
340058e0:	687b      	ldr	r3, [r7, #4]
340058e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340058e4:	2202      	movs	r2, #2
340058e6:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
340058e8:	687b      	ldr	r3, [r7, #4]
340058ea:	2200      	movs	r2, #0
340058ec:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
340058ee:	687b      	ldr	r3, [r7, #4]
340058f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340058f2:	2200      	movs	r2, #0
340058f4:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
340058f6:	687b      	ldr	r3, [r7, #4]
340058f8:	681b      	ldr	r3, [r3, #0]
340058fa:	695a      	ldr	r2, [r3, #20]
340058fc:	687b      	ldr	r3, [r7, #4]
340058fe:	681b      	ldr	r3, [r3, #0]
34005900:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
34005904:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
34005906:	687b      	ldr	r3, [r7, #4]
34005908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400590a:	2b00      	cmp	r3, #0
3400590c:	d007      	beq.n	3400591e <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
3400590e:	687b      	ldr	r3, [r7, #4]
34005910:	681b      	ldr	r3, [r3, #0]
34005912:	695a      	ldr	r2, [r3, #20]
34005914:	687b      	ldr	r3, [r7, #4]
34005916:	681b      	ldr	r3, [r3, #0]
34005918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
3400591c:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
3400591e:	687b      	ldr	r3, [r7, #4]
34005920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34005922:	2b00      	cmp	r3, #0
34005924:	d007      	beq.n	34005936 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
34005926:	687b      	ldr	r3, [r7, #4]
34005928:	681b      	ldr	r3, [r3, #0]
3400592a:	695a      	ldr	r2, [r3, #20]
3400592c:	687b      	ldr	r3, [r7, #4]
3400592e:	681b      	ldr	r3, [r3, #0]
34005930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
34005934:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
34005936:	687b      	ldr	r3, [r7, #4]
34005938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400593a:	681b      	ldr	r3, [r3, #0]
3400593c:	f107 010c 	add.w	r1, r7, #12
34005940:	2200      	movs	r2, #0
34005942:	4618      	mov	r0, r3
34005944:	f000 f82c 	bl	340059a0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
34005948:	687b      	ldr	r3, [r7, #4]
3400594a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400594c:	681b      	ldr	r3, [r3, #0]
3400594e:	4619      	mov	r1, r3
34005950:	687b      	ldr	r3, [r7, #4]
34005952:	681a      	ldr	r2, [r3, #0]
34005954:	0c0b      	lsrs	r3, r1, #16
34005956:	041b      	lsls	r3, r3, #16
34005958:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
3400595a:	687b      	ldr	r3, [r7, #4]
3400595c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400595e:	681b      	ldr	r3, [r3, #0]
34005960:	461a      	mov	r2, r3
34005962:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
34005966:	4013      	ands	r3, r2
34005968:	68f9      	ldr	r1, [r7, #12]
3400596a:	687a      	ldr	r2, [r7, #4]
3400596c:	6812      	ldr	r2, [r2, #0]
3400596e:	430b      	orrs	r3, r1
34005970:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
34005972:	687b      	ldr	r3, [r7, #4]
34005974:	681b      	ldr	r3, [r3, #0]
34005976:	695a      	ldr	r2, [r3, #20]
34005978:	687b      	ldr	r3, [r7, #4]
3400597a:	681b      	ldr	r3, [r3, #0]
3400597c:	f042 0201 	orr.w	r2, r2, #1
34005980:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
34005982:	2300      	movs	r3, #0
34005984:	e007      	b.n	34005996 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
34005986:	687b      	ldr	r3, [r7, #4]
34005988:	2240      	movs	r2, #64	@ 0x40
3400598a:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
3400598c:	687b      	ldr	r3, [r7, #4]
3400598e:	2200      	movs	r2, #0
34005990:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
34005994:	2301      	movs	r3, #1
}
34005996:	4618      	mov	r0, r3
34005998:	3718      	adds	r7, #24
3400599a:	46bd      	mov	sp, r7
3400599c:	bd80      	pop	{r7, pc}
	...

340059a0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
340059a0:	b480      	push	{r7}
340059a2:	b085      	sub	sp, #20
340059a4:	af00      	add	r7, sp, #0
340059a6:	60f8      	str	r0, [r7, #12]
340059a8:	60b9      	str	r1, [r7, #8]
340059aa:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
340059ac:	68fb      	ldr	r3, [r7, #12]
340059ae:	6a1b      	ldr	r3, [r3, #32]
340059b0:	f003 0302 	and.w	r3, r3, #2
340059b4:	2b00      	cmp	r3, #0
340059b6:	d00c      	beq.n	340059d2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
340059b8:	68bb      	ldr	r3, [r7, #8]
340059ba:	2b00      	cmp	r3, #0
340059bc:	d002      	beq.n	340059c4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
340059be:	68bb      	ldr	r3, [r7, #8]
340059c0:	4a0d      	ldr	r2, [pc, #52]	@ (340059f8 <DMA_List_GetCLLRNodeInfo+0x58>)
340059c2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
340059c4:	687b      	ldr	r3, [r7, #4]
340059c6:	2b00      	cmp	r3, #0
340059c8:	d00f      	beq.n	340059ea <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
340059ca:	687b      	ldr	r3, [r7, #4]
340059cc:	2207      	movs	r2, #7
340059ce:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
340059d0:	e00b      	b.n	340059ea <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
340059d2:	68bb      	ldr	r3, [r7, #8]
340059d4:	2b00      	cmp	r3, #0
340059d6:	d002      	beq.n	340059de <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
340059d8:	68bb      	ldr	r3, [r7, #8]
340059da:	4a08      	ldr	r2, [pc, #32]	@ (340059fc <DMA_List_GetCLLRNodeInfo+0x5c>)
340059dc:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
340059de:	687b      	ldr	r3, [r7, #4]
340059e0:	2b00      	cmp	r3, #0
340059e2:	d002      	beq.n	340059ea <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
340059e4:	687b      	ldr	r3, [r7, #4]
340059e6:	2205      	movs	r2, #5
340059e8:	601a      	str	r2, [r3, #0]
}
340059ea:	bf00      	nop
340059ec:	3714      	adds	r7, #20
340059ee:	46bd      	mov	sp, r7
340059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
340059f4:	4770      	bx	lr
340059f6:	bf00      	nop
340059f8:	fe010000 	.word	0xfe010000
340059fc:	f8010000 	.word	0xf8010000

34005a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34005a00:	b580      	push	{r7, lr}
34005a02:	b086      	sub	sp, #24
34005a04:	af00      	add	r7, sp, #0
34005a06:	6078      	str	r0, [r7, #4]
34005a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34005a0a:	2300      	movs	r3, #0
34005a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34005a0e:	687b      	ldr	r3, [r7, #4]
34005a10:	4a5b      	ldr	r2, [pc, #364]	@ (34005b80 <HAL_GPIO_Init+0x180>)
34005a12:	4293      	cmp	r3, r2
34005a14:	d05f      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a16:	687b      	ldr	r3, [r7, #4]
34005a18:	4a5a      	ldr	r2, [pc, #360]	@ (34005b84 <HAL_GPIO_Init+0x184>)
34005a1a:	4293      	cmp	r3, r2
34005a1c:	d05b      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a1e:	687b      	ldr	r3, [r7, #4]
34005a20:	4a59      	ldr	r2, [pc, #356]	@ (34005b88 <HAL_GPIO_Init+0x188>)
34005a22:	4293      	cmp	r3, r2
34005a24:	d057      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a26:	687b      	ldr	r3, [r7, #4]
34005a28:	4a58      	ldr	r2, [pc, #352]	@ (34005b8c <HAL_GPIO_Init+0x18c>)
34005a2a:	4293      	cmp	r3, r2
34005a2c:	d053      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a2e:	687b      	ldr	r3, [r7, #4]
34005a30:	4a57      	ldr	r2, [pc, #348]	@ (34005b90 <HAL_GPIO_Init+0x190>)
34005a32:	4293      	cmp	r3, r2
34005a34:	d04f      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a36:	687b      	ldr	r3, [r7, #4]
34005a38:	4a56      	ldr	r2, [pc, #344]	@ (34005b94 <HAL_GPIO_Init+0x194>)
34005a3a:	4293      	cmp	r3, r2
34005a3c:	d04b      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a3e:	687b      	ldr	r3, [r7, #4]
34005a40:	4a55      	ldr	r2, [pc, #340]	@ (34005b98 <HAL_GPIO_Init+0x198>)
34005a42:	4293      	cmp	r3, r2
34005a44:	d047      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a46:	687b      	ldr	r3, [r7, #4]
34005a48:	4a54      	ldr	r2, [pc, #336]	@ (34005b9c <HAL_GPIO_Init+0x19c>)
34005a4a:	4293      	cmp	r3, r2
34005a4c:	d043      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a4e:	687b      	ldr	r3, [r7, #4]
34005a50:	4a53      	ldr	r2, [pc, #332]	@ (34005ba0 <HAL_GPIO_Init+0x1a0>)
34005a52:	4293      	cmp	r3, r2
34005a54:	d03f      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a56:	687b      	ldr	r3, [r7, #4]
34005a58:	4a52      	ldr	r2, [pc, #328]	@ (34005ba4 <HAL_GPIO_Init+0x1a4>)
34005a5a:	4293      	cmp	r3, r2
34005a5c:	d03b      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a5e:	687b      	ldr	r3, [r7, #4]
34005a60:	4a51      	ldr	r2, [pc, #324]	@ (34005ba8 <HAL_GPIO_Init+0x1a8>)
34005a62:	4293      	cmp	r3, r2
34005a64:	d037      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a66:	687b      	ldr	r3, [r7, #4]
34005a68:	4a50      	ldr	r2, [pc, #320]	@ (34005bac <HAL_GPIO_Init+0x1ac>)
34005a6a:	4293      	cmp	r3, r2
34005a6c:	d033      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a6e:	687b      	ldr	r3, [r7, #4]
34005a70:	4a4f      	ldr	r2, [pc, #316]	@ (34005bb0 <HAL_GPIO_Init+0x1b0>)
34005a72:	4293      	cmp	r3, r2
34005a74:	d02f      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a76:	687b      	ldr	r3, [r7, #4]
34005a78:	4a4e      	ldr	r2, [pc, #312]	@ (34005bb4 <HAL_GPIO_Init+0x1b4>)
34005a7a:	4293      	cmp	r3, r2
34005a7c:	d02b      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a7e:	687b      	ldr	r3, [r7, #4]
34005a80:	4a4d      	ldr	r2, [pc, #308]	@ (34005bb8 <HAL_GPIO_Init+0x1b8>)
34005a82:	4293      	cmp	r3, r2
34005a84:	d027      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a86:	687b      	ldr	r3, [r7, #4]
34005a88:	4a4c      	ldr	r2, [pc, #304]	@ (34005bbc <HAL_GPIO_Init+0x1bc>)
34005a8a:	4293      	cmp	r3, r2
34005a8c:	d023      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a8e:	687b      	ldr	r3, [r7, #4]
34005a90:	4a4b      	ldr	r2, [pc, #300]	@ (34005bc0 <HAL_GPIO_Init+0x1c0>)
34005a92:	4293      	cmp	r3, r2
34005a94:	d01f      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a96:	687b      	ldr	r3, [r7, #4]
34005a98:	4a4a      	ldr	r2, [pc, #296]	@ (34005bc4 <HAL_GPIO_Init+0x1c4>)
34005a9a:	4293      	cmp	r3, r2
34005a9c:	d01b      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005a9e:	687b      	ldr	r3, [r7, #4]
34005aa0:	4a49      	ldr	r2, [pc, #292]	@ (34005bc8 <HAL_GPIO_Init+0x1c8>)
34005aa2:	4293      	cmp	r3, r2
34005aa4:	d017      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005aa6:	687b      	ldr	r3, [r7, #4]
34005aa8:	4a48      	ldr	r2, [pc, #288]	@ (34005bcc <HAL_GPIO_Init+0x1cc>)
34005aaa:	4293      	cmp	r3, r2
34005aac:	d013      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005aae:	687b      	ldr	r3, [r7, #4]
34005ab0:	4a47      	ldr	r2, [pc, #284]	@ (34005bd0 <HAL_GPIO_Init+0x1d0>)
34005ab2:	4293      	cmp	r3, r2
34005ab4:	d00f      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005ab6:	687b      	ldr	r3, [r7, #4]
34005ab8:	4a46      	ldr	r2, [pc, #280]	@ (34005bd4 <HAL_GPIO_Init+0x1d4>)
34005aba:	4293      	cmp	r3, r2
34005abc:	d00b      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005abe:	687b      	ldr	r3, [r7, #4]
34005ac0:	4a45      	ldr	r2, [pc, #276]	@ (34005bd8 <HAL_GPIO_Init+0x1d8>)
34005ac2:	4293      	cmp	r3, r2
34005ac4:	d007      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005ac6:	687b      	ldr	r3, [r7, #4]
34005ac8:	4a44      	ldr	r2, [pc, #272]	@ (34005bdc <HAL_GPIO_Init+0x1dc>)
34005aca:	4293      	cmp	r3, r2
34005acc:	d003      	beq.n	34005ad6 <HAL_GPIO_Init+0xd6>
34005ace:	21ad      	movs	r1, #173	@ 0xad
34005ad0:	4843      	ldr	r0, [pc, #268]	@ (34005be0 <HAL_GPIO_Init+0x1e0>)
34005ad2:	f7fc f8e7 	bl	34001ca4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34005ad6:	683b      	ldr	r3, [r7, #0]
34005ad8:	681b      	ldr	r3, [r3, #0]
34005ada:	b29b      	uxth	r3, r3
34005adc:	2b00      	cmp	r3, #0
34005ade:	d004      	beq.n	34005aea <HAL_GPIO_Init+0xea>
34005ae0:	683b      	ldr	r3, [r7, #0]
34005ae2:	681b      	ldr	r3, [r3, #0]
34005ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34005ae8:	d303      	bcc.n	34005af2 <HAL_GPIO_Init+0xf2>
34005aea:	21ae      	movs	r1, #174	@ 0xae
34005aec:	483c      	ldr	r0, [pc, #240]	@ (34005be0 <HAL_GPIO_Init+0x1e0>)
34005aee:	f7fc f8d9 	bl	34001ca4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
34005af2:	683b      	ldr	r3, [r7, #0]
34005af4:	685b      	ldr	r3, [r3, #4]
34005af6:	2b00      	cmp	r3, #0
34005af8:	f000 82bb 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005afc:	683b      	ldr	r3, [r7, #0]
34005afe:	685b      	ldr	r3, [r3, #4]
34005b00:	2b01      	cmp	r3, #1
34005b02:	f000 82b6 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b06:	683b      	ldr	r3, [r7, #0]
34005b08:	685b      	ldr	r3, [r3, #4]
34005b0a:	2b11      	cmp	r3, #17
34005b0c:	f000 82b1 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b10:	683b      	ldr	r3, [r7, #0]
34005b12:	685b      	ldr	r3, [r3, #4]
34005b14:	2b02      	cmp	r3, #2
34005b16:	f000 82ac 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b1a:	683b      	ldr	r3, [r7, #0]
34005b1c:	685b      	ldr	r3, [r3, #4]
34005b1e:	2b12      	cmp	r3, #18
34005b20:	f000 82a7 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b24:	683b      	ldr	r3, [r7, #0]
34005b26:	685b      	ldr	r3, [r3, #4]
34005b28:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34005b2c:	f000 82a1 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b30:	683b      	ldr	r3, [r7, #0]
34005b32:	685b      	ldr	r3, [r3, #4]
34005b34:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
34005b38:	f000 829b 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b3c:	683b      	ldr	r3, [r7, #0]
34005b3e:	685b      	ldr	r3, [r3, #4]
34005b40:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
34005b44:	f000 8295 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b48:	683b      	ldr	r3, [r7, #0]
34005b4a:	685b      	ldr	r3, [r3, #4]
34005b4c:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
34005b50:	f000 828f 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b54:	683b      	ldr	r3, [r7, #0]
34005b56:	685b      	ldr	r3, [r3, #4]
34005b58:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
34005b5c:	f000 8289 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b60:	683b      	ldr	r3, [r7, #0]
34005b62:	685b      	ldr	r3, [r3, #4]
34005b64:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
34005b68:	f000 8283 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b6c:	683b      	ldr	r3, [r7, #0]
34005b6e:	685b      	ldr	r3, [r3, #4]
34005b70:	2b03      	cmp	r3, #3
34005b72:	f000 827e 	beq.w	34006072 <HAL_GPIO_Init+0x672>
34005b76:	21af      	movs	r1, #175	@ 0xaf
34005b78:	4819      	ldr	r0, [pc, #100]	@ (34005be0 <HAL_GPIO_Init+0x1e0>)
34005b7a:	f7fc f893 	bl	34001ca4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34005b7e:	e278      	b.n	34006072 <HAL_GPIO_Init+0x672>
34005b80:	56020000 	.word	0x56020000
34005b84:	46020000 	.word	0x46020000
34005b88:	56020400 	.word	0x56020400
34005b8c:	46020400 	.word	0x46020400
34005b90:	56020800 	.word	0x56020800
34005b94:	46020800 	.word	0x46020800
34005b98:	56020c00 	.word	0x56020c00
34005b9c:	46020c00 	.word	0x46020c00
34005ba0:	56021000 	.word	0x56021000
34005ba4:	46021000 	.word	0x46021000
34005ba8:	56021400 	.word	0x56021400
34005bac:	46021400 	.word	0x46021400
34005bb0:	56021800 	.word	0x56021800
34005bb4:	46021800 	.word	0x46021800
34005bb8:	56021c00 	.word	0x56021c00
34005bbc:	46021c00 	.word	0x46021c00
34005bc0:	56023400 	.word	0x56023400
34005bc4:	46023400 	.word	0x46023400
34005bc8:	56023800 	.word	0x56023800
34005bcc:	46023800 	.word	0x46023800
34005bd0:	56023c00 	.word	0x56023c00
34005bd4:	46023c00 	.word	0x46023c00
34005bd8:	56024000 	.word	0x56024000
34005bdc:	46024000 	.word	0x46024000
34005be0:	3401e664 	.word	0x3401e664
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34005be4:	683b      	ldr	r3, [r7, #0]
34005be6:	681a      	ldr	r2, [r3, #0]
34005be8:	2101      	movs	r1, #1
34005bea:	697b      	ldr	r3, [r7, #20]
34005bec:	fa01 f303 	lsl.w	r3, r1, r3
34005bf0:	4013      	ands	r3, r2
34005bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34005bf4:	68fb      	ldr	r3, [r7, #12]
34005bf6:	2b00      	cmp	r3, #0
34005bf8:	f000 8238 	beq.w	3400606c <HAL_GPIO_Init+0x66c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34005bfc:	683b      	ldr	r3, [r7, #0]
34005bfe:	685b      	ldr	r3, [r3, #4]
34005c00:	f003 0303 	and.w	r3, r3, #3
34005c04:	2b01      	cmp	r3, #1
34005c06:	d005      	beq.n	34005c14 <HAL_GPIO_Init+0x214>
34005c08:	683b      	ldr	r3, [r7, #0]
34005c0a:	685b      	ldr	r3, [r3, #4]
34005c0c:	f003 0303 	and.w	r3, r3, #3
34005c10:	2b02      	cmp	r3, #2
34005c12:	d144      	bne.n	34005c9e <HAL_GPIO_Init+0x29e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34005c14:	683b      	ldr	r3, [r7, #0]
34005c16:	68db      	ldr	r3, [r3, #12]
34005c18:	2b00      	cmp	r3, #0
34005c1a:	d00f      	beq.n	34005c3c <HAL_GPIO_Init+0x23c>
34005c1c:	683b      	ldr	r3, [r7, #0]
34005c1e:	68db      	ldr	r3, [r3, #12]
34005c20:	2b01      	cmp	r3, #1
34005c22:	d00b      	beq.n	34005c3c <HAL_GPIO_Init+0x23c>
34005c24:	683b      	ldr	r3, [r7, #0]
34005c26:	68db      	ldr	r3, [r3, #12]
34005c28:	2b02      	cmp	r3, #2
34005c2a:	d007      	beq.n	34005c3c <HAL_GPIO_Init+0x23c>
34005c2c:	683b      	ldr	r3, [r7, #0]
34005c2e:	68db      	ldr	r3, [r3, #12]
34005c30:	2b03      	cmp	r3, #3
34005c32:	d003      	beq.n	34005c3c <HAL_GPIO_Init+0x23c>
34005c34:	21be      	movs	r1, #190	@ 0xbe
34005c36:	4896      	ldr	r0, [pc, #600]	@ (34005e90 <HAL_GPIO_Init+0x490>)
34005c38:	f7fc f834 	bl	34001ca4 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34005c3c:	687b      	ldr	r3, [r7, #4]
34005c3e:	689b      	ldr	r3, [r3, #8]
34005c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34005c42:	697b      	ldr	r3, [r7, #20]
34005c44:	005b      	lsls	r3, r3, #1
34005c46:	2203      	movs	r2, #3
34005c48:	fa02 f303 	lsl.w	r3, r2, r3
34005c4c:	43db      	mvns	r3, r3
34005c4e:	693a      	ldr	r2, [r7, #16]
34005c50:	4013      	ands	r3, r2
34005c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34005c54:	683b      	ldr	r3, [r7, #0]
34005c56:	68da      	ldr	r2, [r3, #12]
34005c58:	697b      	ldr	r3, [r7, #20]
34005c5a:	005b      	lsls	r3, r3, #1
34005c5c:	fa02 f303 	lsl.w	r3, r2, r3
34005c60:	693a      	ldr	r2, [r7, #16]
34005c62:	4313      	orrs	r3, r2
34005c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
34005c66:	687b      	ldr	r3, [r7, #4]
34005c68:	693a      	ldr	r2, [r7, #16]
34005c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34005c6c:	687b      	ldr	r3, [r7, #4]
34005c6e:	685b      	ldr	r3, [r3, #4]
34005c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34005c72:	2201      	movs	r2, #1
34005c74:	697b      	ldr	r3, [r7, #20]
34005c76:	fa02 f303 	lsl.w	r3, r2, r3
34005c7a:	43db      	mvns	r3, r3
34005c7c:	693a      	ldr	r2, [r7, #16]
34005c7e:	4013      	ands	r3, r2
34005c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34005c82:	683b      	ldr	r3, [r7, #0]
34005c84:	685b      	ldr	r3, [r3, #4]
34005c86:	091b      	lsrs	r3, r3, #4
34005c88:	f003 0201 	and.w	r2, r3, #1
34005c8c:	697b      	ldr	r3, [r7, #20]
34005c8e:	fa02 f303 	lsl.w	r3, r2, r3
34005c92:	693a      	ldr	r2, [r7, #16]
34005c94:	4313      	orrs	r3, r2
34005c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34005c98:	687b      	ldr	r3, [r7, #4]
34005c9a:	693a      	ldr	r2, [r7, #16]
34005c9c:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34005c9e:	683b      	ldr	r3, [r7, #0]
34005ca0:	685b      	ldr	r3, [r3, #4]
34005ca2:	f003 0303 	and.w	r3, r3, #3
34005ca6:	2b03      	cmp	r3, #3
34005ca8:	d109      	bne.n	34005cbe <HAL_GPIO_Init+0x2be>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34005caa:	683b      	ldr	r3, [r7, #0]
34005cac:	685b      	ldr	r3, [r3, #4]
34005cae:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34005cb2:	2b03      	cmp	r3, #3
34005cb4:	d12b      	bne.n	34005d0e <HAL_GPIO_Init+0x30e>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34005cb6:	683b      	ldr	r3, [r7, #0]
34005cb8:	689b      	ldr	r3, [r3, #8]
34005cba:	2b01      	cmp	r3, #1
34005cbc:	d027      	beq.n	34005d0e <HAL_GPIO_Init+0x30e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34005cbe:	683b      	ldr	r3, [r7, #0]
34005cc0:	689b      	ldr	r3, [r3, #8]
34005cc2:	2b00      	cmp	r3, #0
34005cc4:	d00b      	beq.n	34005cde <HAL_GPIO_Init+0x2de>
34005cc6:	683b      	ldr	r3, [r7, #0]
34005cc8:	689b      	ldr	r3, [r3, #8]
34005cca:	2b01      	cmp	r3, #1
34005ccc:	d007      	beq.n	34005cde <HAL_GPIO_Init+0x2de>
34005cce:	683b      	ldr	r3, [r7, #0]
34005cd0:	689b      	ldr	r3, [r3, #8]
34005cd2:	2b02      	cmp	r3, #2
34005cd4:	d003      	beq.n	34005cde <HAL_GPIO_Init+0x2de>
34005cd6:	21d1      	movs	r1, #209	@ 0xd1
34005cd8:	486d      	ldr	r0, [pc, #436]	@ (34005e90 <HAL_GPIO_Init+0x490>)
34005cda:	f7fb ffe3 	bl	34001ca4 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
34005cde:	687b      	ldr	r3, [r7, #4]
34005ce0:	68db      	ldr	r3, [r3, #12]
34005ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34005ce4:	697b      	ldr	r3, [r7, #20]
34005ce6:	005b      	lsls	r3, r3, #1
34005ce8:	2203      	movs	r2, #3
34005cea:	fa02 f303 	lsl.w	r3, r2, r3
34005cee:	43db      	mvns	r3, r3
34005cf0:	693a      	ldr	r2, [r7, #16]
34005cf2:	4013      	ands	r3, r2
34005cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34005cf6:	683b      	ldr	r3, [r7, #0]
34005cf8:	689a      	ldr	r2, [r3, #8]
34005cfa:	697b      	ldr	r3, [r7, #20]
34005cfc:	005b      	lsls	r3, r3, #1
34005cfe:	fa02 f303 	lsl.w	r3, r2, r3
34005d02:	693a      	ldr	r2, [r7, #16]
34005d04:	4313      	orrs	r3, r2
34005d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
34005d08:	687b      	ldr	r3, [r7, #4]
34005d0a:	693a      	ldr	r2, [r7, #16]
34005d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34005d0e:	683b      	ldr	r3, [r7, #0]
34005d10:	685b      	ldr	r3, [r3, #4]
34005d12:	f003 0303 	and.w	r3, r3, #3
34005d16:	2b02      	cmp	r3, #2
34005d18:	f040 8090 	bne.w	34005e3c <HAL_GPIO_Init+0x43c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34005d1c:	687b      	ldr	r3, [r7, #4]
34005d1e:	4a5d      	ldr	r2, [pc, #372]	@ (34005e94 <HAL_GPIO_Init+0x494>)
34005d20:	4293      	cmp	r3, r2
34005d22:	d05f      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d24:	687b      	ldr	r3, [r7, #4]
34005d26:	4a5c      	ldr	r2, [pc, #368]	@ (34005e98 <HAL_GPIO_Init+0x498>)
34005d28:	4293      	cmp	r3, r2
34005d2a:	d05b      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d2c:	687b      	ldr	r3, [r7, #4]
34005d2e:	4a5b      	ldr	r2, [pc, #364]	@ (34005e9c <HAL_GPIO_Init+0x49c>)
34005d30:	4293      	cmp	r3, r2
34005d32:	d057      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d34:	687b      	ldr	r3, [r7, #4]
34005d36:	4a5a      	ldr	r2, [pc, #360]	@ (34005ea0 <HAL_GPIO_Init+0x4a0>)
34005d38:	4293      	cmp	r3, r2
34005d3a:	d053      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d3c:	687b      	ldr	r3, [r7, #4]
34005d3e:	4a59      	ldr	r2, [pc, #356]	@ (34005ea4 <HAL_GPIO_Init+0x4a4>)
34005d40:	4293      	cmp	r3, r2
34005d42:	d04f      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d44:	687b      	ldr	r3, [r7, #4]
34005d46:	4a58      	ldr	r2, [pc, #352]	@ (34005ea8 <HAL_GPIO_Init+0x4a8>)
34005d48:	4293      	cmp	r3, r2
34005d4a:	d04b      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d4c:	687b      	ldr	r3, [r7, #4]
34005d4e:	4a57      	ldr	r2, [pc, #348]	@ (34005eac <HAL_GPIO_Init+0x4ac>)
34005d50:	4293      	cmp	r3, r2
34005d52:	d047      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d54:	687b      	ldr	r3, [r7, #4]
34005d56:	4a56      	ldr	r2, [pc, #344]	@ (34005eb0 <HAL_GPIO_Init+0x4b0>)
34005d58:	4293      	cmp	r3, r2
34005d5a:	d043      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d5c:	687b      	ldr	r3, [r7, #4]
34005d5e:	4a55      	ldr	r2, [pc, #340]	@ (34005eb4 <HAL_GPIO_Init+0x4b4>)
34005d60:	4293      	cmp	r3, r2
34005d62:	d03f      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d64:	687b      	ldr	r3, [r7, #4]
34005d66:	4a54      	ldr	r2, [pc, #336]	@ (34005eb8 <HAL_GPIO_Init+0x4b8>)
34005d68:	4293      	cmp	r3, r2
34005d6a:	d03b      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d6c:	687b      	ldr	r3, [r7, #4]
34005d6e:	4a53      	ldr	r2, [pc, #332]	@ (34005ebc <HAL_GPIO_Init+0x4bc>)
34005d70:	4293      	cmp	r3, r2
34005d72:	d037      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d74:	687b      	ldr	r3, [r7, #4]
34005d76:	4a52      	ldr	r2, [pc, #328]	@ (34005ec0 <HAL_GPIO_Init+0x4c0>)
34005d78:	4293      	cmp	r3, r2
34005d7a:	d033      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d7c:	687b      	ldr	r3, [r7, #4]
34005d7e:	4a51      	ldr	r2, [pc, #324]	@ (34005ec4 <HAL_GPIO_Init+0x4c4>)
34005d80:	4293      	cmp	r3, r2
34005d82:	d02f      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d84:	687b      	ldr	r3, [r7, #4]
34005d86:	4a50      	ldr	r2, [pc, #320]	@ (34005ec8 <HAL_GPIO_Init+0x4c8>)
34005d88:	4293      	cmp	r3, r2
34005d8a:	d02b      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d8c:	687b      	ldr	r3, [r7, #4]
34005d8e:	4a4f      	ldr	r2, [pc, #316]	@ (34005ecc <HAL_GPIO_Init+0x4cc>)
34005d90:	4293      	cmp	r3, r2
34005d92:	d027      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d94:	687b      	ldr	r3, [r7, #4]
34005d96:	4a4e      	ldr	r2, [pc, #312]	@ (34005ed0 <HAL_GPIO_Init+0x4d0>)
34005d98:	4293      	cmp	r3, r2
34005d9a:	d023      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005d9c:	687b      	ldr	r3, [r7, #4]
34005d9e:	4a4d      	ldr	r2, [pc, #308]	@ (34005ed4 <HAL_GPIO_Init+0x4d4>)
34005da0:	4293      	cmp	r3, r2
34005da2:	d01f      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005da4:	687b      	ldr	r3, [r7, #4]
34005da6:	4a4c      	ldr	r2, [pc, #304]	@ (34005ed8 <HAL_GPIO_Init+0x4d8>)
34005da8:	4293      	cmp	r3, r2
34005daa:	d01b      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005dac:	687b      	ldr	r3, [r7, #4]
34005dae:	4a4b      	ldr	r2, [pc, #300]	@ (34005edc <HAL_GPIO_Init+0x4dc>)
34005db0:	4293      	cmp	r3, r2
34005db2:	d017      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005db4:	687b      	ldr	r3, [r7, #4]
34005db6:	4a4a      	ldr	r2, [pc, #296]	@ (34005ee0 <HAL_GPIO_Init+0x4e0>)
34005db8:	4293      	cmp	r3, r2
34005dba:	d013      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005dbc:	687b      	ldr	r3, [r7, #4]
34005dbe:	4a49      	ldr	r2, [pc, #292]	@ (34005ee4 <HAL_GPIO_Init+0x4e4>)
34005dc0:	4293      	cmp	r3, r2
34005dc2:	d00f      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005dc4:	687b      	ldr	r3, [r7, #4]
34005dc6:	4a48      	ldr	r2, [pc, #288]	@ (34005ee8 <HAL_GPIO_Init+0x4e8>)
34005dc8:	4293      	cmp	r3, r2
34005dca:	d00b      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005dcc:	687b      	ldr	r3, [r7, #4]
34005dce:	4a47      	ldr	r2, [pc, #284]	@ (34005eec <HAL_GPIO_Init+0x4ec>)
34005dd0:	4293      	cmp	r3, r2
34005dd2:	d007      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005dd4:	687b      	ldr	r3, [r7, #4]
34005dd6:	4a46      	ldr	r2, [pc, #280]	@ (34005ef0 <HAL_GPIO_Init+0x4f0>)
34005dd8:	4293      	cmp	r3, r2
34005dda:	d003      	beq.n	34005de4 <HAL_GPIO_Init+0x3e4>
34005ddc:	21de      	movs	r1, #222	@ 0xde
34005dde:	482c      	ldr	r0, [pc, #176]	@ (34005e90 <HAL_GPIO_Init+0x490>)
34005de0:	f7fb ff60 	bl	34001ca4 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34005de4:	683b      	ldr	r3, [r7, #0]
34005de6:	691b      	ldr	r3, [r3, #16]
34005de8:	2b0f      	cmp	r3, #15
34005dea:	d903      	bls.n	34005df4 <HAL_GPIO_Init+0x3f4>
34005dec:	21df      	movs	r1, #223	@ 0xdf
34005dee:	4828      	ldr	r0, [pc, #160]	@ (34005e90 <HAL_GPIO_Init+0x490>)
34005df0:	f7fb ff58 	bl	34001ca4 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34005df4:	697b      	ldr	r3, [r7, #20]
34005df6:	08da      	lsrs	r2, r3, #3
34005df8:	687b      	ldr	r3, [r7, #4]
34005dfa:	3208      	adds	r2, #8
34005dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34005e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34005e02:	697b      	ldr	r3, [r7, #20]
34005e04:	f003 0307 	and.w	r3, r3, #7
34005e08:	009b      	lsls	r3, r3, #2
34005e0a:	220f      	movs	r2, #15
34005e0c:	fa02 f303 	lsl.w	r3, r2, r3
34005e10:	43db      	mvns	r3, r3
34005e12:	693a      	ldr	r2, [r7, #16]
34005e14:	4013      	ands	r3, r2
34005e16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34005e18:	683b      	ldr	r3, [r7, #0]
34005e1a:	691a      	ldr	r2, [r3, #16]
34005e1c:	697b      	ldr	r3, [r7, #20]
34005e1e:	f003 0307 	and.w	r3, r3, #7
34005e22:	009b      	lsls	r3, r3, #2
34005e24:	fa02 f303 	lsl.w	r3, r2, r3
34005e28:	693a      	ldr	r2, [r7, #16]
34005e2a:	4313      	orrs	r3, r2
34005e2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34005e2e:	697b      	ldr	r3, [r7, #20]
34005e30:	08da      	lsrs	r2, r3, #3
34005e32:	687b      	ldr	r3, [r7, #4]
34005e34:	3208      	adds	r2, #8
34005e36:	6939      	ldr	r1, [r7, #16]
34005e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34005e3c:	687b      	ldr	r3, [r7, #4]
34005e3e:	681b      	ldr	r3, [r3, #0]
34005e40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34005e42:	697b      	ldr	r3, [r7, #20]
34005e44:	005b      	lsls	r3, r3, #1
34005e46:	2203      	movs	r2, #3
34005e48:	fa02 f303 	lsl.w	r3, r2, r3
34005e4c:	43db      	mvns	r3, r3
34005e4e:	693a      	ldr	r2, [r7, #16]
34005e50:	4013      	ands	r3, r2
34005e52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34005e54:	683b      	ldr	r3, [r7, #0]
34005e56:	685b      	ldr	r3, [r3, #4]
34005e58:	f003 0203 	and.w	r2, r3, #3
34005e5c:	697b      	ldr	r3, [r7, #20]
34005e5e:	005b      	lsls	r3, r3, #1
34005e60:	fa02 f303 	lsl.w	r3, r2, r3
34005e64:	693a      	ldr	r2, [r7, #16]
34005e66:	4313      	orrs	r3, r2
34005e68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34005e6a:	687b      	ldr	r3, [r7, #4]
34005e6c:	693a      	ldr	r2, [r7, #16]
34005e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34005e70:	683b      	ldr	r3, [r7, #0]
34005e72:	685b      	ldr	r3, [r3, #4]
34005e74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34005e78:	2b00      	cmp	r3, #0
34005e7a:	f000 80f7 	beq.w	3400606c <HAL_GPIO_Init+0x66c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34005e7e:	4a1d      	ldr	r2, [pc, #116]	@ (34005ef4 <HAL_GPIO_Init+0x4f4>)
34005e80:	697b      	ldr	r3, [r7, #20]
34005e82:	089b      	lsrs	r3, r3, #2
34005e84:	3318      	adds	r3, #24
34005e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34005e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34005e8c:	697b      	ldr	r3, [r7, #20]
34005e8e:	e033      	b.n	34005ef8 <HAL_GPIO_Init+0x4f8>
34005e90:	3401e664 	.word	0x3401e664
34005e94:	56020000 	.word	0x56020000
34005e98:	46020000 	.word	0x46020000
34005e9c:	56020400 	.word	0x56020400
34005ea0:	46020400 	.word	0x46020400
34005ea4:	56020800 	.word	0x56020800
34005ea8:	46020800 	.word	0x46020800
34005eac:	56020c00 	.word	0x56020c00
34005eb0:	46020c00 	.word	0x46020c00
34005eb4:	56021000 	.word	0x56021000
34005eb8:	46021000 	.word	0x46021000
34005ebc:	56021400 	.word	0x56021400
34005ec0:	46021400 	.word	0x46021400
34005ec4:	56021800 	.word	0x56021800
34005ec8:	46021800 	.word	0x46021800
34005ecc:	56021c00 	.word	0x56021c00
34005ed0:	46021c00 	.word	0x46021c00
34005ed4:	56023400 	.word	0x56023400
34005ed8:	46023400 	.word	0x46023400
34005edc:	56023800 	.word	0x56023800
34005ee0:	46023800 	.word	0x46023800
34005ee4:	56023c00 	.word	0x56023c00
34005ee8:	46023c00 	.word	0x46023c00
34005eec:	56024000 	.word	0x56024000
34005ef0:	46024000 	.word	0x46024000
34005ef4:	56025000 	.word	0x56025000
34005ef8:	f003 0303 	and.w	r3, r3, #3
34005efc:	00db      	lsls	r3, r3, #3
34005efe:	220f      	movs	r2, #15
34005f00:	fa02 f303 	lsl.w	r3, r2, r3
34005f04:	43db      	mvns	r3, r3
34005f06:	693a      	ldr	r2, [r7, #16]
34005f08:	4013      	ands	r3, r2
34005f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34005f0c:	687b      	ldr	r3, [r7, #4]
34005f0e:	4a5f      	ldr	r2, [pc, #380]	@ (3400608c <HAL_GPIO_Init+0x68c>)
34005f10:	4293      	cmp	r3, r2
34005f12:	d043      	beq.n	34005f9c <HAL_GPIO_Init+0x59c>
34005f14:	687b      	ldr	r3, [r7, #4]
34005f16:	4a5e      	ldr	r2, [pc, #376]	@ (34006090 <HAL_GPIO_Init+0x690>)
34005f18:	4293      	cmp	r3, r2
34005f1a:	d03d      	beq.n	34005f98 <HAL_GPIO_Init+0x598>
34005f1c:	687b      	ldr	r3, [r7, #4]
34005f1e:	4a5d      	ldr	r2, [pc, #372]	@ (34006094 <HAL_GPIO_Init+0x694>)
34005f20:	4293      	cmp	r3, r2
34005f22:	d037      	beq.n	34005f94 <HAL_GPIO_Init+0x594>
34005f24:	687b      	ldr	r3, [r7, #4]
34005f26:	4a5c      	ldr	r2, [pc, #368]	@ (34006098 <HAL_GPIO_Init+0x698>)
34005f28:	4293      	cmp	r3, r2
34005f2a:	d031      	beq.n	34005f90 <HAL_GPIO_Init+0x590>
34005f2c:	687b      	ldr	r3, [r7, #4]
34005f2e:	4a5b      	ldr	r2, [pc, #364]	@ (3400609c <HAL_GPIO_Init+0x69c>)
34005f30:	4293      	cmp	r3, r2
34005f32:	d02b      	beq.n	34005f8c <HAL_GPIO_Init+0x58c>
34005f34:	687b      	ldr	r3, [r7, #4]
34005f36:	4a5a      	ldr	r2, [pc, #360]	@ (340060a0 <HAL_GPIO_Init+0x6a0>)
34005f38:	4293      	cmp	r3, r2
34005f3a:	d025      	beq.n	34005f88 <HAL_GPIO_Init+0x588>
34005f3c:	687b      	ldr	r3, [r7, #4]
34005f3e:	4a59      	ldr	r2, [pc, #356]	@ (340060a4 <HAL_GPIO_Init+0x6a4>)
34005f40:	4293      	cmp	r3, r2
34005f42:	d01f      	beq.n	34005f84 <HAL_GPIO_Init+0x584>
34005f44:	687b      	ldr	r3, [r7, #4]
34005f46:	4a58      	ldr	r2, [pc, #352]	@ (340060a8 <HAL_GPIO_Init+0x6a8>)
34005f48:	4293      	cmp	r3, r2
34005f4a:	d019      	beq.n	34005f80 <HAL_GPIO_Init+0x580>
34005f4c:	687b      	ldr	r3, [r7, #4]
34005f4e:	4a57      	ldr	r2, [pc, #348]	@ (340060ac <HAL_GPIO_Init+0x6ac>)
34005f50:	4293      	cmp	r3, r2
34005f52:	d013      	beq.n	34005f7c <HAL_GPIO_Init+0x57c>
34005f54:	687b      	ldr	r3, [r7, #4]
34005f56:	4a56      	ldr	r2, [pc, #344]	@ (340060b0 <HAL_GPIO_Init+0x6b0>)
34005f58:	4293      	cmp	r3, r2
34005f5a:	d00d      	beq.n	34005f78 <HAL_GPIO_Init+0x578>
34005f5c:	687b      	ldr	r3, [r7, #4]
34005f5e:	4a55      	ldr	r2, [pc, #340]	@ (340060b4 <HAL_GPIO_Init+0x6b4>)
34005f60:	4293      	cmp	r3, r2
34005f62:	d007      	beq.n	34005f74 <HAL_GPIO_Init+0x574>
34005f64:	687b      	ldr	r3, [r7, #4]
34005f66:	4a54      	ldr	r2, [pc, #336]	@ (340060b8 <HAL_GPIO_Init+0x6b8>)
34005f68:	4293      	cmp	r3, r2
34005f6a:	d101      	bne.n	34005f70 <HAL_GPIO_Init+0x570>
34005f6c:	230b      	movs	r3, #11
34005f6e:	e016      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f70:	2310      	movs	r3, #16
34005f72:	e014      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f74:	230a      	movs	r3, #10
34005f76:	e012      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f78:	2309      	movs	r3, #9
34005f7a:	e010      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f7c:	2308      	movs	r3, #8
34005f7e:	e00e      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f80:	2307      	movs	r3, #7
34005f82:	e00c      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f84:	2306      	movs	r3, #6
34005f86:	e00a      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f88:	2305      	movs	r3, #5
34005f8a:	e008      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f8c:	2304      	movs	r3, #4
34005f8e:	e006      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f90:	2303      	movs	r3, #3
34005f92:	e004      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f94:	2302      	movs	r3, #2
34005f96:	e002      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f98:	2301      	movs	r3, #1
34005f9a:	e000      	b.n	34005f9e <HAL_GPIO_Init+0x59e>
34005f9c:	2300      	movs	r3, #0
34005f9e:	697a      	ldr	r2, [r7, #20]
34005fa0:	f002 0203 	and.w	r2, r2, #3
34005fa4:	00d2      	lsls	r2, r2, #3
34005fa6:	4093      	lsls	r3, r2
34005fa8:	693a      	ldr	r2, [r7, #16]
34005faa:	4313      	orrs	r3, r2
34005fac:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34005fae:	4943      	ldr	r1, [pc, #268]	@ (340060bc <HAL_GPIO_Init+0x6bc>)
34005fb0:	697b      	ldr	r3, [r7, #20]
34005fb2:	089b      	lsrs	r3, r3, #2
34005fb4:	3318      	adds	r3, #24
34005fb6:	693a      	ldr	r2, [r7, #16]
34005fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34005fbc:	4b3f      	ldr	r3, [pc, #252]	@ (340060bc <HAL_GPIO_Init+0x6bc>)
34005fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34005fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34005fc4:	68fb      	ldr	r3, [r7, #12]
34005fc6:	43db      	mvns	r3, r3
34005fc8:	693a      	ldr	r2, [r7, #16]
34005fca:	4013      	ands	r3, r2
34005fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34005fce:	683b      	ldr	r3, [r7, #0]
34005fd0:	685b      	ldr	r3, [r3, #4]
34005fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34005fd6:	2b00      	cmp	r3, #0
34005fd8:	d003      	beq.n	34005fe2 <HAL_GPIO_Init+0x5e2>
        {
          temp |= iocurrent;
34005fda:	693a      	ldr	r2, [r7, #16]
34005fdc:	68fb      	ldr	r3, [r7, #12]
34005fde:	4313      	orrs	r3, r2
34005fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34005fe2:	4a36      	ldr	r2, [pc, #216]	@ (340060bc <HAL_GPIO_Init+0x6bc>)
34005fe4:	693b      	ldr	r3, [r7, #16]
34005fe6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34005fea:	4b34      	ldr	r3, [pc, #208]	@ (340060bc <HAL_GPIO_Init+0x6bc>)
34005fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34005ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34005ff2:	68fb      	ldr	r3, [r7, #12]
34005ff4:	43db      	mvns	r3, r3
34005ff6:	693a      	ldr	r2, [r7, #16]
34005ff8:	4013      	ands	r3, r2
34005ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34005ffc:	683b      	ldr	r3, [r7, #0]
34005ffe:	685b      	ldr	r3, [r3, #4]
34006000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34006004:	2b00      	cmp	r3, #0
34006006:	d003      	beq.n	34006010 <HAL_GPIO_Init+0x610>
        {
          temp |= iocurrent;
34006008:	693a      	ldr	r2, [r7, #16]
3400600a:	68fb      	ldr	r3, [r7, #12]
3400600c:	4313      	orrs	r3, r2
3400600e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34006010:	4a2a      	ldr	r2, [pc, #168]	@ (340060bc <HAL_GPIO_Init+0x6bc>)
34006012:	693b      	ldr	r3, [r7, #16]
34006014:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34006018:	4b28      	ldr	r3, [pc, #160]	@ (340060bc <HAL_GPIO_Init+0x6bc>)
3400601a:	681b      	ldr	r3, [r3, #0]
3400601c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
3400601e:	68fb      	ldr	r3, [r7, #12]
34006020:	43db      	mvns	r3, r3
34006022:	693a      	ldr	r2, [r7, #16]
34006024:	4013      	ands	r3, r2
34006026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34006028:	683b      	ldr	r3, [r7, #0]
3400602a:	685b      	ldr	r3, [r3, #4]
3400602c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34006030:	2b00      	cmp	r3, #0
34006032:	d003      	beq.n	3400603c <HAL_GPIO_Init+0x63c>
        {
          temp |= iocurrent;
34006034:	693a      	ldr	r2, [r7, #16]
34006036:	68fb      	ldr	r3, [r7, #12]
34006038:	4313      	orrs	r3, r2
3400603a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
3400603c:	4a1f      	ldr	r2, [pc, #124]	@ (340060bc <HAL_GPIO_Init+0x6bc>)
3400603e:	693b      	ldr	r3, [r7, #16]
34006040:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34006042:	4b1e      	ldr	r3, [pc, #120]	@ (340060bc <HAL_GPIO_Init+0x6bc>)
34006044:	685b      	ldr	r3, [r3, #4]
34006046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34006048:	68fb      	ldr	r3, [r7, #12]
3400604a:	43db      	mvns	r3, r3
3400604c:	693a      	ldr	r2, [r7, #16]
3400604e:	4013      	ands	r3, r2
34006050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34006052:	683b      	ldr	r3, [r7, #0]
34006054:	685b      	ldr	r3, [r3, #4]
34006056:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3400605a:	2b00      	cmp	r3, #0
3400605c:	d003      	beq.n	34006066 <HAL_GPIO_Init+0x666>
        {
          temp |= iocurrent;
3400605e:	693a      	ldr	r2, [r7, #16]
34006060:	68fb      	ldr	r3, [r7, #12]
34006062:	4313      	orrs	r3, r2
34006064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
34006066:	4a15      	ldr	r2, [pc, #84]	@ (340060bc <HAL_GPIO_Init+0x6bc>)
34006068:	693b      	ldr	r3, [r7, #16]
3400606a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
3400606c:	697b      	ldr	r3, [r7, #20]
3400606e:	3301      	adds	r3, #1
34006070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34006072:	683b      	ldr	r3, [r7, #0]
34006074:	681a      	ldr	r2, [r3, #0]
34006076:	697b      	ldr	r3, [r7, #20]
34006078:	fa22 f303 	lsr.w	r3, r2, r3
3400607c:	2b00      	cmp	r3, #0
3400607e:	f47f adb1 	bne.w	34005be4 <HAL_GPIO_Init+0x1e4>
  }
}
34006082:	bf00      	nop
34006084:	bf00      	nop
34006086:	3718      	adds	r7, #24
34006088:	46bd      	mov	sp, r7
3400608a:	bd80      	pop	{r7, pc}
3400608c:	56020000 	.word	0x56020000
34006090:	56020400 	.word	0x56020400
34006094:	56020800 	.word	0x56020800
34006098:	56020c00 	.word	0x56020c00
3400609c:	56021000 	.word	0x56021000
340060a0:	56021400 	.word	0x56021400
340060a4:	56021800 	.word	0x56021800
340060a8:	56021c00 	.word	0x56021c00
340060ac:	56023400 	.word	0x56023400
340060b0:	56023800 	.word	0x56023800
340060b4:	56023c00 	.word	0x56023c00
340060b8:	56024000 	.word	0x56024000
340060bc:	56025000 	.word	0x56025000

340060c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
340060c0:	b580      	push	{r7, lr}
340060c2:	b082      	sub	sp, #8
340060c4:	af00      	add	r7, sp, #0
340060c6:	6078      	str	r0, [r7, #4]
340060c8:	460b      	mov	r3, r1
340060ca:	807b      	strh	r3, [r7, #2]
340060cc:	4613      	mov	r3, r2
340060ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
340060d0:	887b      	ldrh	r3, [r7, #2]
340060d2:	2b00      	cmp	r3, #0
340060d4:	d104      	bne.n	340060e0 <HAL_GPIO_WritePin+0x20>
340060d6:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
340060da:	480e      	ldr	r0, [pc, #56]	@ (34006114 <HAL_GPIO_WritePin+0x54>)
340060dc:	f7fb fde2 	bl	34001ca4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
340060e0:	787b      	ldrb	r3, [r7, #1]
340060e2:	2b00      	cmp	r3, #0
340060e4:	d007      	beq.n	340060f6 <HAL_GPIO_WritePin+0x36>
340060e6:	787b      	ldrb	r3, [r7, #1]
340060e8:	2b01      	cmp	r3, #1
340060ea:	d004      	beq.n	340060f6 <HAL_GPIO_WritePin+0x36>
340060ec:	f240 11a1 	movw	r1, #417	@ 0x1a1
340060f0:	4808      	ldr	r0, [pc, #32]	@ (34006114 <HAL_GPIO_WritePin+0x54>)
340060f2:	f7fb fdd7 	bl	34001ca4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
340060f6:	787b      	ldrb	r3, [r7, #1]
340060f8:	2b00      	cmp	r3, #0
340060fa:	d003      	beq.n	34006104 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
340060fc:	887a      	ldrh	r2, [r7, #2]
340060fe:	687b      	ldr	r3, [r7, #4]
34006100:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34006102:	e002      	b.n	3400610a <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34006104:	887a      	ldrh	r2, [r7, #2]
34006106:	687b      	ldr	r3, [r7, #4]
34006108:	629a      	str	r2, [r3, #40]	@ 0x28
}
3400610a:	bf00      	nop
3400610c:	3708      	adds	r7, #8
3400610e:	46bd      	mov	sp, r7
34006110:	bd80      	pop	{r7, pc}
34006112:	bf00      	nop
34006114:	3401e664 	.word	0x3401e664

34006118 <HAL_PWREx_ConfigVddIORange>:
  * @note   Setting this configuration while VDDIOx is in 3v3 range
  *         damages the device.
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
34006118:	b580      	push	{r7, lr}
3400611a:	b082      	sub	sp, #8
3400611c:	af00      	add	r7, sp, #0
3400611e:	6078      	str	r0, [r7, #4]
34006120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34006122:	687b      	ldr	r3, [r7, #4]
34006124:	2b00      	cmp	r3, #0
34006126:	d010      	beq.n	3400614a <HAL_PWREx_ConfigVddIORange+0x32>
34006128:	687b      	ldr	r3, [r7, #4]
3400612a:	2b01      	cmp	r3, #1
3400612c:	d00d      	beq.n	3400614a <HAL_PWREx_ConfigVddIORange+0x32>
3400612e:	687b      	ldr	r3, [r7, #4]
34006130:	2b02      	cmp	r3, #2
34006132:	d00a      	beq.n	3400614a <HAL_PWREx_ConfigVddIORange+0x32>
34006134:	687b      	ldr	r3, [r7, #4]
34006136:	2b03      	cmp	r3, #3
34006138:	d007      	beq.n	3400614a <HAL_PWREx_ConfigVddIORange+0x32>
3400613a:	687b      	ldr	r3, [r7, #4]
3400613c:	2b04      	cmp	r3, #4
3400613e:	d004      	beq.n	3400614a <HAL_PWREx_ConfigVddIORange+0x32>
34006140:	f240 316a 	movw	r1, #874	@ 0x36a
34006144:	482a      	ldr	r0, [pc, #168]	@ (340061f0 <HAL_PWREx_ConfigVddIORange+0xd8>)
34006146:	f7fb fdad 	bl	34001ca4 <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
3400614a:	683b      	ldr	r3, [r7, #0]
3400614c:	2b00      	cmp	r3, #0
3400614e:	d007      	beq.n	34006160 <HAL_PWREx_ConfigVddIORange+0x48>
34006150:	683b      	ldr	r3, [r7, #0]
34006152:	2b01      	cmp	r3, #1
34006154:	d004      	beq.n	34006160 <HAL_PWREx_ConfigVddIORange+0x48>
34006156:	f240 316b 	movw	r1, #875	@ 0x36b
3400615a:	4825      	ldr	r0, [pc, #148]	@ (340061f0 <HAL_PWREx_ConfigVddIORange+0xd8>)
3400615c:	f7fb fda2 	bl	34001ca4 <assert_failed>

  switch (VddIOPort)
34006160:	687b      	ldr	r3, [r7, #4]
34006162:	2b04      	cmp	r3, #4
34006164:	d83e      	bhi.n	340061e4 <HAL_PWREx_ConfigVddIORange+0xcc>
34006166:	a201      	add	r2, pc, #4	@ (adr r2, 3400616c <HAL_PWREx_ConfigVddIORange+0x54>)
34006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3400616c:	34006181 	.word	0x34006181
34006170:	34006195 	.word	0x34006195
34006174:	340061a9 	.word	0x340061a9
34006178:	340061bd 	.word	0x340061bd
3400617c:	340061d1 	.word	0x340061d1
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34006180:	4b1c      	ldr	r3, [pc, #112]	@ (340061f4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34006182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34006184:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34006188:	683b      	ldr	r3, [r7, #0]
3400618a:	061b      	lsls	r3, r3, #24
3400618c:	4919      	ldr	r1, [pc, #100]	@ (340061f4 <HAL_PWREx_ConfigVddIORange+0xdc>)
3400618e:	4313      	orrs	r3, r2
34006190:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
34006192:	e028      	b.n	340061e6 <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34006194:	4b17      	ldr	r3, [pc, #92]	@ (340061f4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34006196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34006198:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
3400619c:	683b      	ldr	r3, [r7, #0]
3400619e:	065b      	lsls	r3, r3, #25
340061a0:	4914      	ldr	r1, [pc, #80]	@ (340061f4 <HAL_PWREx_ConfigVddIORange+0xdc>)
340061a2:	4313      	orrs	r3, r2
340061a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
340061a6:	e01e      	b.n	340061e6 <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
340061a8:	4b12      	ldr	r3, [pc, #72]	@ (340061f4 <HAL_PWREx_ConfigVddIORange+0xdc>)
340061aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340061ac:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
340061b0:	683b      	ldr	r3, [r7, #0]
340061b2:	069b      	lsls	r3, r3, #26
340061b4:	490f      	ldr	r1, [pc, #60]	@ (340061f4 <HAL_PWREx_ConfigVddIORange+0xdc>)
340061b6:	4313      	orrs	r3, r2
340061b8:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
340061ba:	e014      	b.n	340061e6 <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO4:
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
340061bc:	4b0d      	ldr	r3, [pc, #52]	@ (340061f4 <HAL_PWREx_ConfigVddIORange+0xdc>)
340061be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340061c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340061c4:	683b      	ldr	r3, [r7, #0]
340061c6:	061b      	lsls	r3, r3, #24
340061c8:	490a      	ldr	r1, [pc, #40]	@ (340061f4 <HAL_PWREx_ConfigVddIORange+0xdc>)
340061ca:	4313      	orrs	r3, r2
340061cc:	634b      	str	r3, [r1, #52]	@ 0x34
      break;
340061ce:	e00a      	b.n	340061e6 <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO5:
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
340061d0:	4b08      	ldr	r3, [pc, #32]	@ (340061f4 <HAL_PWREx_ConfigVddIORange+0xdc>)
340061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340061d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340061d8:	683b      	ldr	r3, [r7, #0]
340061da:	061b      	lsls	r3, r3, #24
340061dc:	4905      	ldr	r1, [pc, #20]	@ (340061f4 <HAL_PWREx_ConfigVddIORange+0xdc>)
340061de:	4313      	orrs	r3, r2
340061e0:	638b      	str	r3, [r1, #56]	@ 0x38
      break;
340061e2:	e000      	b.n	340061e6 <HAL_PWREx_ConfigVddIORange+0xce>

    default:
      break;
340061e4:	bf00      	nop
  }
}
340061e6:	bf00      	nop
340061e8:	3708      	adds	r7, #8
340061ea:	46bd      	mov	sp, r7
340061ec:	bd80      	pop	{r7, pc}
340061ee:	bf00      	nop
340061f0:	3401e710 	.word	0x3401e710
340061f4:	56024800 	.word	0x56024800

340061f8 <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
340061f8:	b480      	push	{r7}
340061fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
340061fc:	4b05      	ldr	r3, [pc, #20]	@ (34006214 <HAL_PWREx_EnableVddIO3+0x1c>)
340061fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34006200:	4a04      	ldr	r2, [pc, #16]	@ (34006214 <HAL_PWREx_EnableVddIO3+0x1c>)
34006202:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34006206:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34006208:	bf00      	nop
3400620a:	46bd      	mov	sp, r7
3400620c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006210:	4770      	bx	lr
34006212:	bf00      	nop
34006214:	56024800 	.word	0x56024800

34006218 <HAL_RAMCFG_EnableAXISRAM>:
  *                   contains the configuration information for the
  *                   specified RAMCFG instance.
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
34006218:	b580      	push	{r7, lr}
3400621a:	b082      	sub	sp, #8
3400621c:	af00      	add	r7, sp, #0
3400621e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34006220:	687b      	ldr	r3, [r7, #4]
34006222:	681b      	ldr	r3, [r3, #0]
34006224:	4a20      	ldr	r2, [pc, #128]	@ (340062a8 <HAL_RAMCFG_EnableAXISRAM+0x90>)
34006226:	4293      	cmp	r3, r2
34006228:	d031      	beq.n	3400628e <HAL_RAMCFG_EnableAXISRAM+0x76>
3400622a:	687b      	ldr	r3, [r7, #4]
3400622c:	681b      	ldr	r3, [r3, #0]
3400622e:	4a1f      	ldr	r2, [pc, #124]	@ (340062ac <HAL_RAMCFG_EnableAXISRAM+0x94>)
34006230:	4293      	cmp	r3, r2
34006232:	d02c      	beq.n	3400628e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006234:	687b      	ldr	r3, [r7, #4]
34006236:	681b      	ldr	r3, [r3, #0]
34006238:	4a1d      	ldr	r2, [pc, #116]	@ (340062b0 <HAL_RAMCFG_EnableAXISRAM+0x98>)
3400623a:	4293      	cmp	r3, r2
3400623c:	d027      	beq.n	3400628e <HAL_RAMCFG_EnableAXISRAM+0x76>
3400623e:	687b      	ldr	r3, [r7, #4]
34006240:	681b      	ldr	r3, [r3, #0]
34006242:	4a1c      	ldr	r2, [pc, #112]	@ (340062b4 <HAL_RAMCFG_EnableAXISRAM+0x9c>)
34006244:	4293      	cmp	r3, r2
34006246:	d022      	beq.n	3400628e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006248:	687b      	ldr	r3, [r7, #4]
3400624a:	681b      	ldr	r3, [r3, #0]
3400624c:	4a1a      	ldr	r2, [pc, #104]	@ (340062b8 <HAL_RAMCFG_EnableAXISRAM+0xa0>)
3400624e:	4293      	cmp	r3, r2
34006250:	d01d      	beq.n	3400628e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006252:	687b      	ldr	r3, [r7, #4]
34006254:	681b      	ldr	r3, [r3, #0]
34006256:	4a19      	ldr	r2, [pc, #100]	@ (340062bc <HAL_RAMCFG_EnableAXISRAM+0xa4>)
34006258:	4293      	cmp	r3, r2
3400625a:	d018      	beq.n	3400628e <HAL_RAMCFG_EnableAXISRAM+0x76>
3400625c:	687b      	ldr	r3, [r7, #4]
3400625e:	681b      	ldr	r3, [r3, #0]
34006260:	4a17      	ldr	r2, [pc, #92]	@ (340062c0 <HAL_RAMCFG_EnableAXISRAM+0xa8>)
34006262:	4293      	cmp	r3, r2
34006264:	d013      	beq.n	3400628e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006266:	687b      	ldr	r3, [r7, #4]
34006268:	681b      	ldr	r3, [r3, #0]
3400626a:	4a16      	ldr	r2, [pc, #88]	@ (340062c4 <HAL_RAMCFG_EnableAXISRAM+0xac>)
3400626c:	4293      	cmp	r3, r2
3400626e:	d00e      	beq.n	3400628e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006270:	687b      	ldr	r3, [r7, #4]
34006272:	681b      	ldr	r3, [r3, #0]
34006274:	4a14      	ldr	r2, [pc, #80]	@ (340062c8 <HAL_RAMCFG_EnableAXISRAM+0xb0>)
34006276:	4293      	cmp	r3, r2
34006278:	d009      	beq.n	3400628e <HAL_RAMCFG_EnableAXISRAM+0x76>
3400627a:	687b      	ldr	r3, [r7, #4]
3400627c:	681b      	ldr	r3, [r3, #0]
3400627e:	4a13      	ldr	r2, [pc, #76]	@ (340062cc <HAL_RAMCFG_EnableAXISRAM+0xb4>)
34006280:	4293      	cmp	r3, r2
34006282:	d004      	beq.n	3400628e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006284:	f240 4107 	movw	r1, #1031	@ 0x407
34006288:	4811      	ldr	r0, [pc, #68]	@ (340062d0 <HAL_RAMCFG_EnableAXISRAM+0xb8>)
3400628a:	f7fb fd0b 	bl	34001ca4 <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
3400628e:	687b      	ldr	r3, [r7, #4]
34006290:	681b      	ldr	r3, [r3, #0]
34006292:	681a      	ldr	r2, [r3, #0]
34006294:	687b      	ldr	r3, [r7, #4]
34006296:	681b      	ldr	r3, [r3, #0]
34006298:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
3400629c:	601a      	str	r2, [r3, #0]
}
3400629e:	bf00      	nop
340062a0:	3708      	adds	r7, #8
340062a2:	46bd      	mov	sp, r7
340062a4:	bd80      	pop	{r7, pc}
340062a6:	bf00      	nop
340062a8:	52023080 	.word	0x52023080
340062ac:	42023080 	.word	0x42023080
340062b0:	52023100 	.word	0x52023100
340062b4:	42023100 	.word	0x42023100
340062b8:	52023180 	.word	0x52023180
340062bc:	42023180 	.word	0x42023180
340062c0:	52023200 	.word	0x52023200
340062c4:	42023200 	.word	0x42023200
340062c8:	52023280 	.word	0x52023280
340062cc:	42023280 	.word	0x42023280
340062d0:	3401e7bc 	.word	0x3401e7bc

340062d4 <LL_RCC_HSE_IsReady>:
{
340062d4:	b480      	push	{r7}
340062d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340062d8:	4b06      	ldr	r3, [pc, #24]	@ (340062f4 <LL_RCC_HSE_IsReady+0x20>)
340062da:	685b      	ldr	r3, [r3, #4]
340062dc:	f003 0310 	and.w	r3, r3, #16
340062e0:	2b00      	cmp	r3, #0
340062e2:	d001      	beq.n	340062e8 <LL_RCC_HSE_IsReady+0x14>
340062e4:	2301      	movs	r3, #1
340062e6:	e000      	b.n	340062ea <LL_RCC_HSE_IsReady+0x16>
340062e8:	2300      	movs	r3, #0
}
340062ea:	4618      	mov	r0, r3
340062ec:	46bd      	mov	sp, r7
340062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
340062f2:	4770      	bx	lr
340062f4:	56028000 	.word	0x56028000

340062f8 <LL_RCC_HSI_Enable>:
{
340062f8:	b480      	push	{r7}
340062fa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
340062fc:	4b04      	ldr	r3, [pc, #16]	@ (34006310 <LL_RCC_HSI_Enable+0x18>)
340062fe:	2208      	movs	r2, #8
34006300:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34006304:	bf00      	nop
34006306:	46bd      	mov	sp, r7
34006308:	f85d 7b04 	ldr.w	r7, [sp], #4
3400630c:	4770      	bx	lr
3400630e:	bf00      	nop
34006310:	56028000 	.word	0x56028000

34006314 <LL_RCC_HSI_Disable>:
{
34006314:	b480      	push	{r7}
34006316:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34006318:	4b05      	ldr	r3, [pc, #20]	@ (34006330 <LL_RCC_HSI_Disable+0x1c>)
3400631a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400631e:	461a      	mov	r2, r3
34006320:	2308      	movs	r3, #8
34006322:	6013      	str	r3, [r2, #0]
}
34006324:	bf00      	nop
34006326:	46bd      	mov	sp, r7
34006328:	f85d 7b04 	ldr.w	r7, [sp], #4
3400632c:	4770      	bx	lr
3400632e:	bf00      	nop
34006330:	56028000 	.word	0x56028000

34006334 <LL_RCC_HSI_IsReady>:
{
34006334:	b480      	push	{r7}
34006336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34006338:	4b06      	ldr	r3, [pc, #24]	@ (34006354 <LL_RCC_HSI_IsReady+0x20>)
3400633a:	685b      	ldr	r3, [r3, #4]
3400633c:	f003 0308 	and.w	r3, r3, #8
34006340:	2b00      	cmp	r3, #0
34006342:	d001      	beq.n	34006348 <LL_RCC_HSI_IsReady+0x14>
34006344:	2301      	movs	r3, #1
34006346:	e000      	b.n	3400634a <LL_RCC_HSI_IsReady+0x16>
34006348:	2300      	movs	r3, #0
}
3400634a:	4618      	mov	r0, r3
3400634c:	46bd      	mov	sp, r7
3400634e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006352:	4770      	bx	lr
34006354:	56028000 	.word	0x56028000

34006358 <LL_RCC_HSI_SetDivider>:
{
34006358:	b480      	push	{r7}
3400635a:	b083      	sub	sp, #12
3400635c:	af00      	add	r7, sp, #0
3400635e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34006360:	4b06      	ldr	r3, [pc, #24]	@ (3400637c <LL_RCC_HSI_SetDivider+0x24>)
34006362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34006364:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34006368:	4904      	ldr	r1, [pc, #16]	@ (3400637c <LL_RCC_HSI_SetDivider+0x24>)
3400636a:	687b      	ldr	r3, [r7, #4]
3400636c:	4313      	orrs	r3, r2
3400636e:	648b      	str	r3, [r1, #72]	@ 0x48
}
34006370:	bf00      	nop
34006372:	370c      	adds	r7, #12
34006374:	46bd      	mov	sp, r7
34006376:	f85d 7b04 	ldr.w	r7, [sp], #4
3400637a:	4770      	bx	lr
3400637c:	56028000 	.word	0x56028000

34006380 <LL_RCC_HSI_GetDivider>:
{
34006380:	b480      	push	{r7}
34006382:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34006384:	4b04      	ldr	r3, [pc, #16]	@ (34006398 <LL_RCC_HSI_GetDivider+0x18>)
34006386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34006388:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
3400638c:	4618      	mov	r0, r3
3400638e:	46bd      	mov	sp, r7
34006390:	f85d 7b04 	ldr.w	r7, [sp], #4
34006394:	4770      	bx	lr
34006396:	bf00      	nop
34006398:	56028000 	.word	0x56028000

3400639c <LL_RCC_HSI_SetCalibTrimming>:
{
3400639c:	b480      	push	{r7}
3400639e:	b083      	sub	sp, #12
340063a0:	af00      	add	r7, sp, #0
340063a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
340063a4:	4b07      	ldr	r3, [pc, #28]	@ (340063c4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
340063a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340063a8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
340063ac:	687b      	ldr	r3, [r7, #4]
340063ae:	041b      	lsls	r3, r3, #16
340063b0:	4904      	ldr	r1, [pc, #16]	@ (340063c4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
340063b2:	4313      	orrs	r3, r2
340063b4:	648b      	str	r3, [r1, #72]	@ 0x48
}
340063b6:	bf00      	nop
340063b8:	370c      	adds	r7, #12
340063ba:	46bd      	mov	sp, r7
340063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
340063c0:	4770      	bx	lr
340063c2:	bf00      	nop
340063c4:	56028000 	.word	0x56028000

340063c8 <LL_RCC_MSI_Enable>:
{
340063c8:	b480      	push	{r7}
340063ca:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
340063cc:	4b04      	ldr	r3, [pc, #16]	@ (340063e0 <LL_RCC_MSI_Enable+0x18>)
340063ce:	2204      	movs	r2, #4
340063d0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
340063d4:	bf00      	nop
340063d6:	46bd      	mov	sp, r7
340063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
340063dc:	4770      	bx	lr
340063de:	bf00      	nop
340063e0:	56028000 	.word	0x56028000

340063e4 <LL_RCC_MSI_Disable>:
{
340063e4:	b480      	push	{r7}
340063e6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
340063e8:	4b05      	ldr	r3, [pc, #20]	@ (34006400 <LL_RCC_MSI_Disable+0x1c>)
340063ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340063ee:	461a      	mov	r2, r3
340063f0:	2304      	movs	r3, #4
340063f2:	6013      	str	r3, [r2, #0]
}
340063f4:	bf00      	nop
340063f6:	46bd      	mov	sp, r7
340063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
340063fc:	4770      	bx	lr
340063fe:	bf00      	nop
34006400:	56028000 	.word	0x56028000

34006404 <LL_RCC_MSI_IsReady>:
{
34006404:	b480      	push	{r7}
34006406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34006408:	4b06      	ldr	r3, [pc, #24]	@ (34006424 <LL_RCC_MSI_IsReady+0x20>)
3400640a:	685b      	ldr	r3, [r3, #4]
3400640c:	f003 0304 	and.w	r3, r3, #4
34006410:	2b00      	cmp	r3, #0
34006412:	d001      	beq.n	34006418 <LL_RCC_MSI_IsReady+0x14>
34006414:	2301      	movs	r3, #1
34006416:	e000      	b.n	3400641a <LL_RCC_MSI_IsReady+0x16>
34006418:	2300      	movs	r3, #0
}
3400641a:	4618      	mov	r0, r3
3400641c:	46bd      	mov	sp, r7
3400641e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006422:	4770      	bx	lr
34006424:	56028000 	.word	0x56028000

34006428 <LL_RCC_MSI_SetFrequency>:
{
34006428:	b480      	push	{r7}
3400642a:	b083      	sub	sp, #12
3400642c:	af00      	add	r7, sp, #0
3400642e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34006430:	4b06      	ldr	r3, [pc, #24]	@ (3400644c <LL_RCC_MSI_SetFrequency+0x24>)
34006432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006434:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34006438:	4904      	ldr	r1, [pc, #16]	@ (3400644c <LL_RCC_MSI_SetFrequency+0x24>)
3400643a:	687b      	ldr	r3, [r7, #4]
3400643c:	4313      	orrs	r3, r2
3400643e:	644b      	str	r3, [r1, #68]	@ 0x44
}
34006440:	bf00      	nop
34006442:	370c      	adds	r7, #12
34006444:	46bd      	mov	sp, r7
34006446:	f85d 7b04 	ldr.w	r7, [sp], #4
3400644a:	4770      	bx	lr
3400644c:	56028000 	.word	0x56028000

34006450 <LL_RCC_MSI_GetFrequency>:
{
34006450:	b480      	push	{r7}
34006452:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34006454:	4b04      	ldr	r3, [pc, #16]	@ (34006468 <LL_RCC_MSI_GetFrequency+0x18>)
34006456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
3400645c:	4618      	mov	r0, r3
3400645e:	46bd      	mov	sp, r7
34006460:	f85d 7b04 	ldr.w	r7, [sp], #4
34006464:	4770      	bx	lr
34006466:	bf00      	nop
34006468:	56028000 	.word	0x56028000

3400646c <LL_RCC_MSI_SetCalibTrimming>:
{
3400646c:	b480      	push	{r7}
3400646e:	b083      	sub	sp, #12
34006470:	af00      	add	r7, sp, #0
34006472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34006474:	4b07      	ldr	r3, [pc, #28]	@ (34006494 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34006476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006478:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
3400647c:	687b      	ldr	r3, [r7, #4]
3400647e:	041b      	lsls	r3, r3, #16
34006480:	4904      	ldr	r1, [pc, #16]	@ (34006494 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34006482:	4313      	orrs	r3, r2
34006484:	644b      	str	r3, [r1, #68]	@ 0x44
}
34006486:	bf00      	nop
34006488:	370c      	adds	r7, #12
3400648a:	46bd      	mov	sp, r7
3400648c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006490:	4770      	bx	lr
34006492:	bf00      	nop
34006494:	56028000 	.word	0x56028000

34006498 <LL_RCC_LSE_IsReady>:
{
34006498:	b480      	push	{r7}
3400649a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3400649c:	4b06      	ldr	r3, [pc, #24]	@ (340064b8 <LL_RCC_LSE_IsReady+0x20>)
3400649e:	685b      	ldr	r3, [r3, #4]
340064a0:	f003 0302 	and.w	r3, r3, #2
340064a4:	2b00      	cmp	r3, #0
340064a6:	d001      	beq.n	340064ac <LL_RCC_LSE_IsReady+0x14>
340064a8:	2301      	movs	r3, #1
340064aa:	e000      	b.n	340064ae <LL_RCC_LSE_IsReady+0x16>
340064ac:	2300      	movs	r3, #0
}
340064ae:	4618      	mov	r0, r3
340064b0:	46bd      	mov	sp, r7
340064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
340064b6:	4770      	bx	lr
340064b8:	56028000 	.word	0x56028000

340064bc <LL_RCC_LSI_Enable>:
{
340064bc:	b480      	push	{r7}
340064be:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
340064c0:	4b04      	ldr	r3, [pc, #16]	@ (340064d4 <LL_RCC_LSI_Enable+0x18>)
340064c2:	2201      	movs	r2, #1
340064c4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
340064c8:	bf00      	nop
340064ca:	46bd      	mov	sp, r7
340064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
340064d0:	4770      	bx	lr
340064d2:	bf00      	nop
340064d4:	56028000 	.word	0x56028000

340064d8 <LL_RCC_LSI_Disable>:
{
340064d8:	b480      	push	{r7}
340064da:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340064dc:	4b05      	ldr	r3, [pc, #20]	@ (340064f4 <LL_RCC_LSI_Disable+0x1c>)
340064de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340064e2:	461a      	mov	r2, r3
340064e4:	2301      	movs	r3, #1
340064e6:	6013      	str	r3, [r2, #0]
}
340064e8:	bf00      	nop
340064ea:	46bd      	mov	sp, r7
340064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
340064f0:	4770      	bx	lr
340064f2:	bf00      	nop
340064f4:	56028000 	.word	0x56028000

340064f8 <LL_RCC_LSI_IsReady>:
{
340064f8:	b480      	push	{r7}
340064fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340064fc:	4b04      	ldr	r3, [pc, #16]	@ (34006510 <LL_RCC_LSI_IsReady+0x18>)
340064fe:	685b      	ldr	r3, [r3, #4]
34006500:	f003 0301 	and.w	r3, r3, #1
}
34006504:	4618      	mov	r0, r3
34006506:	46bd      	mov	sp, r7
34006508:	f85d 7b04 	ldr.w	r7, [sp], #4
3400650c:	4770      	bx	lr
3400650e:	bf00      	nop
34006510:	56028000 	.word	0x56028000

34006514 <LL_RCC_GetCpuClkSource>:
{
34006514:	b480      	push	{r7}
34006516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34006518:	4b04      	ldr	r3, [pc, #16]	@ (3400652c <LL_RCC_GetCpuClkSource+0x18>)
3400651a:	6a1b      	ldr	r3, [r3, #32]
3400651c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34006520:	4618      	mov	r0, r3
34006522:	46bd      	mov	sp, r7
34006524:	f85d 7b04 	ldr.w	r7, [sp], #4
34006528:	4770      	bx	lr
3400652a:	bf00      	nop
3400652c:	56028000 	.word	0x56028000

34006530 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34006530:	b480      	push	{r7}
34006532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34006534:	4b04      	ldr	r3, [pc, #16]	@ (34006548 <LL_RCC_GetSysClkSource+0x18>)
34006536:	6a1b      	ldr	r3, [r3, #32]
34006538:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400653c:	4618      	mov	r0, r3
3400653e:	46bd      	mov	sp, r7
34006540:	f85d 7b04 	ldr.w	r7, [sp], #4
34006544:	4770      	bx	lr
34006546:	bf00      	nop
34006548:	56028000 	.word	0x56028000

3400654c <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
3400654c:	b480      	push	{r7}
3400654e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34006550:	4b04      	ldr	r3, [pc, #16]	@ (34006564 <LL_RCC_PLL1_GetSource+0x18>)
34006552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006556:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400655a:	4618      	mov	r0, r3
3400655c:	46bd      	mov	sp, r7
3400655e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006562:	4770      	bx	lr
34006564:	56028000 	.word	0x56028000

34006568 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
34006568:	b480      	push	{r7}
3400656a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3400656c:	4b07      	ldr	r3, [pc, #28]	@ (3400658c <LL_RCC_PLL1_IsReady+0x24>)
3400656e:	685b      	ldr	r3, [r3, #4]
34006570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006578:	d101      	bne.n	3400657e <LL_RCC_PLL1_IsReady+0x16>
3400657a:	2301      	movs	r3, #1
3400657c:	e000      	b.n	34006580 <LL_RCC_PLL1_IsReady+0x18>
3400657e:	2300      	movs	r3, #0
}
34006580:	4618      	mov	r0, r3
34006582:	46bd      	mov	sp, r7
34006584:	f85d 7b04 	ldr.w	r7, [sp], #4
34006588:	4770      	bx	lr
3400658a:	bf00      	nop
3400658c:	56028000 	.word	0x56028000

34006590 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
34006590:	b480      	push	{r7}
34006592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34006594:	4b07      	ldr	r3, [pc, #28]	@ (340065b4 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34006596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400659a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400659e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340065a2:	d101      	bne.n	340065a8 <LL_RCC_PLL1_IsEnabledBypass+0x18>
340065a4:	2301      	movs	r3, #1
340065a6:	e000      	b.n	340065aa <LL_RCC_PLL1_IsEnabledBypass+0x1a>
340065a8:	2300      	movs	r3, #0
}
340065aa:	4618      	mov	r0, r3
340065ac:	46bd      	mov	sp, r7
340065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
340065b2:	4770      	bx	lr
340065b4:	56028000 	.word	0x56028000

340065b8 <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
340065b8:	b480      	push	{r7}
340065ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340065bc:	4b04      	ldr	r3, [pc, #16]	@ (340065d0 <LL_RCC_PLL2_GetSource+0x18>)
340065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340065c2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
340065c6:	4618      	mov	r0, r3
340065c8:	46bd      	mov	sp, r7
340065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
340065ce:	4770      	bx	lr
340065d0:	56028000 	.word	0x56028000

340065d4 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
340065d4:	b480      	push	{r7}
340065d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340065d8:	4b07      	ldr	r3, [pc, #28]	@ (340065f8 <LL_RCC_PLL2_IsReady+0x24>)
340065da:	685b      	ldr	r3, [r3, #4]
340065dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340065e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340065e4:	d101      	bne.n	340065ea <LL_RCC_PLL2_IsReady+0x16>
340065e6:	2301      	movs	r3, #1
340065e8:	e000      	b.n	340065ec <LL_RCC_PLL2_IsReady+0x18>
340065ea:	2300      	movs	r3, #0
}
340065ec:	4618      	mov	r0, r3
340065ee:	46bd      	mov	sp, r7
340065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
340065f4:	4770      	bx	lr
340065f6:	bf00      	nop
340065f8:	56028000 	.word	0x56028000

340065fc <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
340065fc:	b480      	push	{r7}
340065fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34006600:	4b07      	ldr	r3, [pc, #28]	@ (34006620 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34006602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34006606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400660a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400660e:	d101      	bne.n	34006614 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34006610:	2301      	movs	r3, #1
34006612:	e000      	b.n	34006616 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34006614:	2300      	movs	r3, #0
}
34006616:	4618      	mov	r0, r3
34006618:	46bd      	mov	sp, r7
3400661a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400661e:	4770      	bx	lr
34006620:	56028000 	.word	0x56028000

34006624 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
34006624:	b480      	push	{r7}
34006626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34006628:	4b04      	ldr	r3, [pc, #16]	@ (3400663c <LL_RCC_PLL3_GetSource+0x18>)
3400662a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400662e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34006632:	4618      	mov	r0, r3
34006634:	46bd      	mov	sp, r7
34006636:	f85d 7b04 	ldr.w	r7, [sp], #4
3400663a:	4770      	bx	lr
3400663c:	56028000 	.word	0x56028000

34006640 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34006640:	b480      	push	{r7}
34006642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34006644:	4b07      	ldr	r3, [pc, #28]	@ (34006664 <LL_RCC_PLL3_IsReady+0x24>)
34006646:	685b      	ldr	r3, [r3, #4]
34006648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400664c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34006650:	d101      	bne.n	34006656 <LL_RCC_PLL3_IsReady+0x16>
34006652:	2301      	movs	r3, #1
34006654:	e000      	b.n	34006658 <LL_RCC_PLL3_IsReady+0x18>
34006656:	2300      	movs	r3, #0
}
34006658:	4618      	mov	r0, r3
3400665a:	46bd      	mov	sp, r7
3400665c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006660:	4770      	bx	lr
34006662:	bf00      	nop
34006664:	56028000 	.word	0x56028000

34006668 <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
34006668:	b480      	push	{r7}
3400666a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400666c:	4b07      	ldr	r3, [pc, #28]	@ (3400668c <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3400666e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34006672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34006676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400667a:	d101      	bne.n	34006680 <LL_RCC_PLL3_IsEnabledBypass+0x18>
3400667c:	2301      	movs	r3, #1
3400667e:	e000      	b.n	34006682 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34006680:	2300      	movs	r3, #0
}
34006682:	4618      	mov	r0, r3
34006684:	46bd      	mov	sp, r7
34006686:	f85d 7b04 	ldr.w	r7, [sp], #4
3400668a:	4770      	bx	lr
3400668c:	56028000 	.word	0x56028000

34006690 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
34006690:	b480      	push	{r7}
34006692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34006694:	4b04      	ldr	r3, [pc, #16]	@ (340066a8 <LL_RCC_PLL4_GetSource+0x18>)
34006696:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400669a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400669e:	4618      	mov	r0, r3
340066a0:	46bd      	mov	sp, r7
340066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340066a6:	4770      	bx	lr
340066a8:	56028000 	.word	0x56028000

340066ac <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
340066ac:	b480      	push	{r7}
340066ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340066b0:	4b07      	ldr	r3, [pc, #28]	@ (340066d0 <LL_RCC_PLL4_IsReady+0x24>)
340066b2:	685b      	ldr	r3, [r3, #4]
340066b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340066b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340066bc:	d101      	bne.n	340066c2 <LL_RCC_PLL4_IsReady+0x16>
340066be:	2301      	movs	r3, #1
340066c0:	e000      	b.n	340066c4 <LL_RCC_PLL4_IsReady+0x18>
340066c2:	2300      	movs	r3, #0
}
340066c4:	4618      	mov	r0, r3
340066c6:	46bd      	mov	sp, r7
340066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
340066cc:	4770      	bx	lr
340066ce:	bf00      	nop
340066d0:	56028000 	.word	0x56028000

340066d4 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
340066d4:	b480      	push	{r7}
340066d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340066d8:	4b07      	ldr	r3, [pc, #28]	@ (340066f8 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
340066da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340066de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340066e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340066e6:	d101      	bne.n	340066ec <LL_RCC_PLL4_IsEnabledBypass+0x18>
340066e8:	2301      	movs	r3, #1
340066ea:	e000      	b.n	340066ee <LL_RCC_PLL4_IsEnabledBypass+0x1a>
340066ec:	2300      	movs	r3, #0
}
340066ee:	4618      	mov	r0, r3
340066f0:	46bd      	mov	sp, r7
340066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
340066f6:	4770      	bx	lr
340066f8:	56028000 	.word	0x56028000

340066fc <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
340066fc:	b480      	push	{r7}
340066fe:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34006700:	4b04      	ldr	r3, [pc, #16]	@ (34006714 <LL_RCC_IC1_Enable+0x18>)
34006702:	2201      	movs	r2, #1
34006704:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34006708:	bf00      	nop
3400670a:	46bd      	mov	sp, r7
3400670c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006710:	4770      	bx	lr
34006712:	bf00      	nop
34006714:	56028000 	.word	0x56028000

34006718 <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
34006718:	b480      	push	{r7}
3400671a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400671c:	4b04      	ldr	r3, [pc, #16]	@ (34006730 <LL_RCC_IC1_GetSource+0x18>)
3400671e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34006722:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34006726:	4618      	mov	r0, r3
34006728:	46bd      	mov	sp, r7
3400672a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400672e:	4770      	bx	lr
34006730:	56028000 	.word	0x56028000

34006734 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
34006734:	b480      	push	{r7}
34006736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34006738:	4b05      	ldr	r3, [pc, #20]	@ (34006750 <LL_RCC_IC1_GetDivider+0x1c>)
3400673a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400673e:	0c1b      	lsrs	r3, r3, #16
34006740:	b2db      	uxtb	r3, r3
34006742:	3301      	adds	r3, #1
}
34006744:	4618      	mov	r0, r3
34006746:	46bd      	mov	sp, r7
34006748:	f85d 7b04 	ldr.w	r7, [sp], #4
3400674c:	4770      	bx	lr
3400674e:	bf00      	nop
34006750:	56028000 	.word	0x56028000

34006754 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
34006754:	b480      	push	{r7}
34006756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34006758:	4b04      	ldr	r3, [pc, #16]	@ (3400676c <LL_RCC_IC2_GetSource+0x18>)
3400675a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400675e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34006762:	4618      	mov	r0, r3
34006764:	46bd      	mov	sp, r7
34006766:	f85d 7b04 	ldr.w	r7, [sp], #4
3400676a:	4770      	bx	lr
3400676c:	56028000 	.word	0x56028000

34006770 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34006770:	b480      	push	{r7}
34006772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34006774:	4b05      	ldr	r3, [pc, #20]	@ (3400678c <LL_RCC_IC2_GetDivider+0x1c>)
34006776:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400677a:	0c1b      	lsrs	r3, r3, #16
3400677c:	b2db      	uxtb	r3, r3
3400677e:	3301      	adds	r3, #1
}
34006780:	4618      	mov	r0, r3
34006782:	46bd      	mov	sp, r7
34006784:	f85d 7b04 	ldr.w	r7, [sp], #4
34006788:	4770      	bx	lr
3400678a:	bf00      	nop
3400678c:	56028000 	.word	0x56028000

34006790 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34006790:	b480      	push	{r7}
34006792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34006794:	4b04      	ldr	r3, [pc, #16]	@ (340067a8 <LL_RCC_IC6_GetSource+0x18>)
34006796:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400679a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400679e:	4618      	mov	r0, r3
340067a0:	46bd      	mov	sp, r7
340067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340067a6:	4770      	bx	lr
340067a8:	56028000 	.word	0x56028000

340067ac <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
340067ac:	b480      	push	{r7}
340067ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340067b0:	4b04      	ldr	r3, [pc, #16]	@ (340067c4 <LL_RCC_IC11_GetSource+0x18>)
340067b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340067b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340067ba:	4618      	mov	r0, r3
340067bc:	46bd      	mov	sp, r7
340067be:	f85d 7b04 	ldr.w	r7, [sp], #4
340067c2:	4770      	bx	lr
340067c4:	56028000 	.word	0x56028000

340067c8 <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
340067c8:	b580      	push	{r7, lr}
340067ca:	b0a2      	sub	sp, #136	@ 0x88
340067cc:	af00      	add	r7, sp, #0
340067ce:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
340067d0:	687b      	ldr	r3, [r7, #4]
340067d2:	2b00      	cmp	r3, #0
340067d4:	d102      	bne.n	340067dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
340067d6:	2301      	movs	r3, #1
340067d8:	f000 bd10 	b.w	340071fc <HAL_RCC_OscConfig+0xa34>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
340067dc:	687b      	ldr	r3, [r7, #4]
340067de:	681b      	ldr	r3, [r3, #0]
340067e0:	2b00      	cmp	r3, #0
340067e2:	d022      	beq.n	3400682a <HAL_RCC_OscConfig+0x62>
340067e4:	687b      	ldr	r3, [r7, #4]
340067e6:	681b      	ldr	r3, [r3, #0]
340067e8:	f003 0301 	and.w	r3, r3, #1
340067ec:	2b00      	cmp	r3, #0
340067ee:	d11c      	bne.n	3400682a <HAL_RCC_OscConfig+0x62>
340067f0:	687b      	ldr	r3, [r7, #4]
340067f2:	681b      	ldr	r3, [r3, #0]
340067f4:	f003 0302 	and.w	r3, r3, #2
340067f8:	2b00      	cmp	r3, #0
340067fa:	d116      	bne.n	3400682a <HAL_RCC_OscConfig+0x62>
340067fc:	687b      	ldr	r3, [r7, #4]
340067fe:	681b      	ldr	r3, [r3, #0]
34006800:	f003 0310 	and.w	r3, r3, #16
34006804:	2b00      	cmp	r3, #0
34006806:	d110      	bne.n	3400682a <HAL_RCC_OscConfig+0x62>
34006808:	687b      	ldr	r3, [r7, #4]
3400680a:	681b      	ldr	r3, [r3, #0]
3400680c:	f003 0308 	and.w	r3, r3, #8
34006810:	2b00      	cmp	r3, #0
34006812:	d10a      	bne.n	3400682a <HAL_RCC_OscConfig+0x62>
34006814:	687b      	ldr	r3, [r7, #4]
34006816:	681b      	ldr	r3, [r3, #0]
34006818:	f003 0304 	and.w	r3, r3, #4
3400681c:	2b00      	cmp	r3, #0
3400681e:	d104      	bne.n	3400682a <HAL_RCC_OscConfig+0x62>
34006820:	f44f 71b9 	mov.w	r1, #370	@ 0x172
34006824:	4892      	ldr	r0, [pc, #584]	@ (34006a70 <HAL_RCC_OscConfig+0x2a8>)
34006826:	f7fb fa3d 	bl	34001ca4 <assert_failed>

  cpuclksrc = LL_RCC_GetCpuClkSource();
3400682a:	f7ff fe73 	bl	34006514 <LL_RCC_GetCpuClkSource>
3400682e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
34006832:	f7ff fe7d 	bl	34006530 <LL_RCC_GetSysClkSource>
34006836:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
3400683a:	f7ff fe87 	bl	3400654c <LL_RCC_PLL1_GetSource>
3400683e:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
34006840:	f7ff feba 	bl	340065b8 <LL_RCC_PLL2_GetSource>
34006844:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
34006846:	f7ff feed 	bl	34006624 <LL_RCC_PLL3_GetSource>
3400684a:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
3400684c:	f7ff ff20 	bl	34006690 <LL_RCC_PLL4_GetSource>
34006850:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
34006852:	4b88      	ldr	r3, [pc, #544]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
34006854:	685b      	ldr	r3, [r3, #4]
34006856:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34006858:	687b      	ldr	r3, [r7, #4]
3400685a:	681b      	ldr	r3, [r3, #0]
3400685c:	f003 0301 	and.w	r3, r3, #1
34006860:	2b00      	cmp	r3, #0
34006862:	f000 80c3 	beq.w	340069ec <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
34006866:	687b      	ldr	r3, [r7, #4]
34006868:	685b      	ldr	r3, [r3, #4]
3400686a:	2b00      	cmp	r3, #0
3400686c:	d013      	beq.n	34006896 <HAL_RCC_OscConfig+0xce>
3400686e:	687b      	ldr	r3, [r7, #4]
34006870:	685b      	ldr	r3, [r3, #4]
34006872:	2b10      	cmp	r3, #16
34006874:	d00f      	beq.n	34006896 <HAL_RCC_OscConfig+0xce>
34006876:	687b      	ldr	r3, [r7, #4]
34006878:	685b      	ldr	r3, [r3, #4]
3400687a:	f248 0210 	movw	r2, #32784	@ 0x8010
3400687e:	4293      	cmp	r3, r2
34006880:	d009      	beq.n	34006896 <HAL_RCC_OscConfig+0xce>
34006882:	687b      	ldr	r3, [r7, #4]
34006884:	685b      	ldr	r3, [r3, #4]
34006886:	4a7c      	ldr	r2, [pc, #496]	@ (34006a78 <HAL_RCC_OscConfig+0x2b0>)
34006888:	4293      	cmp	r3, r2
3400688a:	d004      	beq.n	34006896 <HAL_RCC_OscConfig+0xce>
3400688c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
34006890:	4877      	ldr	r0, [pc, #476]	@ (34006a70 <HAL_RCC_OscConfig+0x2a8>)
34006892:	f7fb fa07 	bl	34001ca4 <assert_failed>

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34006896:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3400689a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400689e:	d028      	beq.n	340068f2 <HAL_RCC_OscConfig+0x12a>
340068a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
340068a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340068a8:	d023      	beq.n	340068f2 <HAL_RCC_OscConfig+0x12a>
340068aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
340068ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340068b0:	d104      	bne.n	340068bc <HAL_RCC_OscConfig+0xf4>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340068b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340068b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340068b8:	2b00      	cmp	r3, #0
340068ba:	d11a      	bne.n	340068f2 <HAL_RCC_OscConfig+0x12a>
340068bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
340068be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340068c2:	d104      	bne.n	340068ce <HAL_RCC_OscConfig+0x106>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340068c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340068c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340068ca:	2b00      	cmp	r3, #0
340068cc:	d111      	bne.n	340068f2 <HAL_RCC_OscConfig+0x12a>
340068ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
340068d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340068d4:	d104      	bne.n	340068e0 <HAL_RCC_OscConfig+0x118>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340068d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340068d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340068dc:	2b00      	cmp	r3, #0
340068de:	d108      	bne.n	340068f2 <HAL_RCC_OscConfig+0x12a>
340068e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
340068e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340068e6:	d10b      	bne.n	34006900 <HAL_RCC_OscConfig+0x138>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340068e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340068ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340068ee:	2b00      	cmp	r3, #0
340068f0:	d006      	beq.n	34006900 <HAL_RCC_OscConfig+0x138>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
340068f2:	687b      	ldr	r3, [r7, #4]
340068f4:	685b      	ldr	r3, [r3, #4]
340068f6:	2b00      	cmp	r3, #0
340068f8:	d178      	bne.n	340069ec <HAL_RCC_OscConfig+0x224>
      {
        return HAL_ERROR;
340068fa:	2301      	movs	r3, #1
340068fc:	f000 bc7e 	b.w	340071fc <HAL_RCC_OscConfig+0xa34>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34006900:	687b      	ldr	r3, [r7, #4]
34006902:	685b      	ldr	r3, [r3, #4]
34006904:	2b10      	cmp	r3, #16
34006906:	d104      	bne.n	34006912 <HAL_RCC_OscConfig+0x14a>
34006908:	4b5a      	ldr	r3, [pc, #360]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
3400690a:	2210      	movs	r2, #16
3400690c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006910:	e043      	b.n	3400699a <HAL_RCC_OscConfig+0x1d2>
34006912:	687b      	ldr	r3, [r7, #4]
34006914:	685b      	ldr	r3, [r3, #4]
34006916:	2b00      	cmp	r3, #0
34006918:	d10c      	bne.n	34006934 <HAL_RCC_OscConfig+0x16c>
3400691a:	4b56      	ldr	r3, [pc, #344]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
3400691c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006920:	461a      	mov	r2, r3
34006922:	2310      	movs	r3, #16
34006924:	6013      	str	r3, [r2, #0]
34006926:	4b53      	ldr	r3, [pc, #332]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
34006928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400692a:	4a52      	ldr	r2, [pc, #328]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
3400692c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34006930:	6553      	str	r3, [r2, #84]	@ 0x54
34006932:	e032      	b.n	3400699a <HAL_RCC_OscConfig+0x1d2>
34006934:	687b      	ldr	r3, [r7, #4]
34006936:	685b      	ldr	r3, [r3, #4]
34006938:	f248 0210 	movw	r2, #32784	@ 0x8010
3400693c:	4293      	cmp	r3, r2
3400693e:	d110      	bne.n	34006962 <HAL_RCC_OscConfig+0x19a>
34006940:	4b4c      	ldr	r3, [pc, #304]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
34006942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006944:	4a4b      	ldr	r2, [pc, #300]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
34006946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400694a:	6553      	str	r3, [r2, #84]	@ 0x54
3400694c:	4b49      	ldr	r3, [pc, #292]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
3400694e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006950:	4a48      	ldr	r2, [pc, #288]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
34006952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006956:	6553      	str	r3, [r2, #84]	@ 0x54
34006958:	4b46      	ldr	r3, [pc, #280]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
3400695a:	2210      	movs	r2, #16
3400695c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006960:	e01b      	b.n	3400699a <HAL_RCC_OscConfig+0x1d2>
34006962:	687b      	ldr	r3, [r7, #4]
34006964:	685b      	ldr	r3, [r3, #4]
34006966:	4a44      	ldr	r2, [pc, #272]	@ (34006a78 <HAL_RCC_OscConfig+0x2b0>)
34006968:	4293      	cmp	r3, r2
3400696a:	d10a      	bne.n	34006982 <HAL_RCC_OscConfig+0x1ba>
3400696c:	4b41      	ldr	r3, [pc, #260]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
3400696e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006970:	4a40      	ldr	r2, [pc, #256]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
34006972:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
34006976:	6553      	str	r3, [r2, #84]	@ 0x54
34006978:	4b3e      	ldr	r3, [pc, #248]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
3400697a:	2210      	movs	r2, #16
3400697c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006980:	e00b      	b.n	3400699a <HAL_RCC_OscConfig+0x1d2>
34006982:	4b3c      	ldr	r3, [pc, #240]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
34006984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006988:	461a      	mov	r2, r3
3400698a:	2310      	movs	r3, #16
3400698c:	6013      	str	r3, [r2, #0]
3400698e:	4b39      	ldr	r3, [pc, #228]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
34006990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006992:	4a38      	ldr	r2, [pc, #224]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
34006994:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34006998:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3400699a:	f7fd f9a5 	bl	34003ce8 <HAL_GetTick>
3400699e:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
340069a0:	687b      	ldr	r3, [r7, #4]
340069a2:	685b      	ldr	r3, [r3, #4]
340069a4:	2b00      	cmp	r3, #0
340069a6:	d01b      	beq.n	340069e0 <HAL_RCC_OscConfig+0x218>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
340069a8:	e009      	b.n	340069be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340069aa:	f7fd f99d 	bl	34003ce8 <HAL_GetTick>
340069ae:	4602      	mov	r2, r0
340069b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
340069b2:	1ad3      	subs	r3, r2, r3
340069b4:	2b64      	cmp	r3, #100	@ 0x64
340069b6:	d902      	bls.n	340069be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
340069b8:	2303      	movs	r3, #3
340069ba:	f000 bc1f 	b.w	340071fc <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
340069be:	4b2d      	ldr	r3, [pc, #180]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
340069c0:	685b      	ldr	r3, [r3, #4]
340069c2:	f003 0310 	and.w	r3, r3, #16
340069c6:	2b00      	cmp	r3, #0
340069c8:	d0ef      	beq.n	340069aa <HAL_RCC_OscConfig+0x1e2>
340069ca:	e00f      	b.n	340069ec <HAL_RCC_OscConfig+0x224>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340069cc:	f7fd f98c 	bl	34003ce8 <HAL_GetTick>
340069d0:	4602      	mov	r2, r0
340069d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
340069d4:	1ad3      	subs	r3, r2, r3
340069d6:	2b64      	cmp	r3, #100	@ 0x64
340069d8:	d902      	bls.n	340069e0 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
340069da:	2303      	movs	r3, #3
340069dc:	f000 bc0e 	b.w	340071fc <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
340069e0:	4b24      	ldr	r3, [pc, #144]	@ (34006a74 <HAL_RCC_OscConfig+0x2ac>)
340069e2:	685b      	ldr	r3, [r3, #4]
340069e4:	f003 0310 	and.w	r3, r3, #16
340069e8:	2b00      	cmp	r3, #0
340069ea:	d1ef      	bne.n	340069cc <HAL_RCC_OscConfig+0x204>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
340069ec:	687b      	ldr	r3, [r7, #4]
340069ee:	681b      	ldr	r3, [r3, #0]
340069f0:	f003 0302 	and.w	r3, r3, #2
340069f4:	2b00      	cmp	r3, #0
340069f6:	f000 80c3 	beq.w	34006b80 <HAL_RCC_OscConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
340069fa:	687b      	ldr	r3, [r7, #4]
340069fc:	68db      	ldr	r3, [r3, #12]
340069fe:	2b00      	cmp	r3, #0
34006a00:	d008      	beq.n	34006a14 <HAL_RCC_OscConfig+0x24c>
34006a02:	687b      	ldr	r3, [r7, #4]
34006a04:	68db      	ldr	r3, [r3, #12]
34006a06:	2b08      	cmp	r3, #8
34006a08:	d004      	beq.n	34006a14 <HAL_RCC_OscConfig+0x24c>
34006a0a:	f240 11b5 	movw	r1, #437	@ 0x1b5
34006a0e:	4818      	ldr	r0, [pc, #96]	@ (34006a70 <HAL_RCC_OscConfig+0x2a8>)
34006a10:	f7fb f948 	bl	34001ca4 <assert_failed>

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34006a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006a18:	2b00      	cmp	r3, #0
34006a1a:	d023      	beq.n	34006a64 <HAL_RCC_OscConfig+0x29c>
34006a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006a20:	2b00      	cmp	r3, #0
34006a22:	d01f      	beq.n	34006a64 <HAL_RCC_OscConfig+0x29c>
34006a24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34006a26:	2b00      	cmp	r3, #0
34006a28:	d104      	bne.n	34006a34 <HAL_RCC_OscConfig+0x26c>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34006a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006a30:	2b00      	cmp	r3, #0
34006a32:	d117      	bne.n	34006a64 <HAL_RCC_OscConfig+0x29c>
34006a34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34006a36:	2b00      	cmp	r3, #0
34006a38:	d104      	bne.n	34006a44 <HAL_RCC_OscConfig+0x27c>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34006a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34006a40:	2b00      	cmp	r3, #0
34006a42:	d10f      	bne.n	34006a64 <HAL_RCC_OscConfig+0x29c>
34006a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34006a46:	2b00      	cmp	r3, #0
34006a48:	d104      	bne.n	34006a54 <HAL_RCC_OscConfig+0x28c>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34006a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34006a50:	2b00      	cmp	r3, #0
34006a52:	d107      	bne.n	34006a64 <HAL_RCC_OscConfig+0x29c>
34006a54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34006a56:	2b00      	cmp	r3, #0
34006a58:	d13b      	bne.n	34006ad2 <HAL_RCC_OscConfig+0x30a>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34006a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34006a60:	2b00      	cmp	r3, #0
34006a62:	d036      	beq.n	34006ad2 <HAL_RCC_OscConfig+0x30a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34006a64:	687b      	ldr	r3, [r7, #4]
34006a66:	68db      	ldr	r3, [r3, #12]
34006a68:	2b00      	cmp	r3, #0
34006a6a:	d107      	bne.n	34006a7c <HAL_RCC_OscConfig+0x2b4>
      {
        return HAL_ERROR;
34006a6c:	2301      	movs	r3, #1
34006a6e:	e3c5      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
34006a70:	3401e868 	.word	0x3401e868
34006a74:	56028000 	.word	0x56028000
34006a78:	00018010 	.word	0x00018010
      }
      /* Otherwise, just the divider and calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34006a7c:	687b      	ldr	r3, [r7, #4]
34006a7e:	691b      	ldr	r3, [r3, #16]
34006a80:	2b00      	cmp	r3, #0
34006a82:	d012      	beq.n	34006aaa <HAL_RCC_OscConfig+0x2e2>
34006a84:	687b      	ldr	r3, [r7, #4]
34006a86:	691b      	ldr	r3, [r3, #16]
34006a88:	2b80      	cmp	r3, #128	@ 0x80
34006a8a:	d00e      	beq.n	34006aaa <HAL_RCC_OscConfig+0x2e2>
34006a8c:	687b      	ldr	r3, [r7, #4]
34006a8e:	691b      	ldr	r3, [r3, #16]
34006a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006a94:	d009      	beq.n	34006aaa <HAL_RCC_OscConfig+0x2e2>
34006a96:	687b      	ldr	r3, [r7, #4]
34006a98:	691b      	ldr	r3, [r3, #16]
34006a9a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
34006a9e:	d004      	beq.n	34006aaa <HAL_RCC_OscConfig+0x2e2>
34006aa0:	f240 11c7 	movw	r1, #455	@ 0x1c7
34006aa4:	48a2      	ldr	r0, [pc, #648]	@ (34006d30 <HAL_RCC_OscConfig+0x568>)
34006aa6:	f7fb f8fd 	bl	34001ca4 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34006aaa:	687b      	ldr	r3, [r7, #4]
34006aac:	695b      	ldr	r3, [r3, #20]
34006aae:	2b7f      	cmp	r3, #127	@ 0x7f
34006ab0:	d904      	bls.n	34006abc <HAL_RCC_OscConfig+0x2f4>
34006ab2:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
34006ab6:	489e      	ldr	r0, [pc, #632]	@ (34006d30 <HAL_RCC_OscConfig+0x568>)
34006ab8:	f7fb f8f4 	bl	34001ca4 <assert_failed>

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34006abc:	687b      	ldr	r3, [r7, #4]
34006abe:	691b      	ldr	r3, [r3, #16]
34006ac0:	4618      	mov	r0, r3
34006ac2:	f7ff fc49 	bl	34006358 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34006ac6:	687b      	ldr	r3, [r7, #4]
34006ac8:	695b      	ldr	r3, [r3, #20]
34006aca:	4618      	mov	r0, r3
34006acc:	f7ff fc66 	bl	3400639c <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34006ad0:	e056      	b.n	34006b80 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34006ad2:	687b      	ldr	r3, [r7, #4]
34006ad4:	68db      	ldr	r3, [r3, #12]
34006ad6:	2b00      	cmp	r3, #0
34006ad8:	d03e      	beq.n	34006b58 <HAL_RCC_OscConfig+0x390>
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34006ada:	687b      	ldr	r3, [r7, #4]
34006adc:	691b      	ldr	r3, [r3, #16]
34006ade:	2b00      	cmp	r3, #0
34006ae0:	d012      	beq.n	34006b08 <HAL_RCC_OscConfig+0x340>
34006ae2:	687b      	ldr	r3, [r7, #4]
34006ae4:	691b      	ldr	r3, [r3, #16]
34006ae6:	2b80      	cmp	r3, #128	@ 0x80
34006ae8:	d00e      	beq.n	34006b08 <HAL_RCC_OscConfig+0x340>
34006aea:	687b      	ldr	r3, [r7, #4]
34006aec:	691b      	ldr	r3, [r3, #16]
34006aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006af2:	d009      	beq.n	34006b08 <HAL_RCC_OscConfig+0x340>
34006af4:	687b      	ldr	r3, [r7, #4]
34006af6:	691b      	ldr	r3, [r3, #16]
34006af8:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
34006afc:	d004      	beq.n	34006b08 <HAL_RCC_OscConfig+0x340>
34006afe:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
34006b02:	488b      	ldr	r0, [pc, #556]	@ (34006d30 <HAL_RCC_OscConfig+0x568>)
34006b04:	f7fb f8ce 	bl	34001ca4 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34006b08:	687b      	ldr	r3, [r7, #4]
34006b0a:	695b      	ldr	r3, [r3, #20]
34006b0c:	2b7f      	cmp	r3, #127	@ 0x7f
34006b0e:	d904      	bls.n	34006b1a <HAL_RCC_OscConfig+0x352>
34006b10:	f240 11d7 	movw	r1, #471	@ 0x1d7
34006b14:	4886      	ldr	r0, [pc, #536]	@ (34006d30 <HAL_RCC_OscConfig+0x568>)
34006b16:	f7fb f8c5 	bl	34001ca4 <assert_failed>

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
34006b1a:	f7ff fbed 	bl	340062f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006b1e:	f7fd f8e3 	bl	34003ce8 <HAL_GetTick>
34006b22:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
34006b24:	e008      	b.n	34006b38 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34006b26:	f7fd f8df 	bl	34003ce8 <HAL_GetTick>
34006b2a:	4602      	mov	r2, r0
34006b2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006b2e:	1ad3      	subs	r3, r2, r3
34006b30:	2b01      	cmp	r3, #1
34006b32:	d901      	bls.n	34006b38 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
34006b34:	2303      	movs	r3, #3
34006b36:	e361      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() == 0U)
34006b38:	f7ff fbfc 	bl	34006334 <LL_RCC_HSI_IsReady>
34006b3c:	4603      	mov	r3, r0
34006b3e:	2b00      	cmp	r3, #0
34006b40:	d0f1      	beq.n	34006b26 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34006b42:	687b      	ldr	r3, [r7, #4]
34006b44:	691b      	ldr	r3, [r3, #16]
34006b46:	4618      	mov	r0, r3
34006b48:	f7ff fc06 	bl	34006358 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34006b4c:	687b      	ldr	r3, [r7, #4]
34006b4e:	695b      	ldr	r3, [r3, #20]
34006b50:	4618      	mov	r0, r3
34006b52:	f7ff fc23 	bl	3400639c <LL_RCC_HSI_SetCalibTrimming>
34006b56:	e013      	b.n	34006b80 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
34006b58:	f7ff fbdc 	bl	34006314 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006b5c:	f7fd f8c4 	bl	34003ce8 <HAL_GetTick>
34006b60:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
34006b62:	e008      	b.n	34006b76 <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34006b64:	f7fd f8c0 	bl	34003ce8 <HAL_GetTick>
34006b68:	4602      	mov	r2, r0
34006b6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006b6c:	1ad3      	subs	r3, r2, r3
34006b6e:	2b01      	cmp	r3, #1
34006b70:	d901      	bls.n	34006b76 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
34006b72:	2303      	movs	r3, #3
34006b74:	e342      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() != 0U)
34006b76:	f7ff fbdd 	bl	34006334 <LL_RCC_HSI_IsReady>
34006b7a:	4603      	mov	r3, r0
34006b7c:	2b00      	cmp	r3, #0
34006b7e:	d1f1      	bne.n	34006b64 <HAL_RCC_OscConfig+0x39c>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34006b80:	687b      	ldr	r3, [r7, #4]
34006b82:	681b      	ldr	r3, [r3, #0]
34006b84:	f003 0310 	and.w	r3, r3, #16
34006b88:	2b00      	cmp	r3, #0
34006b8a:	f000 809e 	beq.w	34006cca <HAL_RCC_OscConfig+0x502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
34006b8e:	687b      	ldr	r3, [r7, #4]
34006b90:	69db      	ldr	r3, [r3, #28]
34006b92:	2b00      	cmp	r3, #0
34006b94:	d008      	beq.n	34006ba8 <HAL_RCC_OscConfig+0x3e0>
34006b96:	687b      	ldr	r3, [r7, #4]
34006b98:	69db      	ldr	r3, [r3, #28]
34006b9a:	2b04      	cmp	r3, #4
34006b9c:	d004      	beq.n	34006ba8 <HAL_RCC_OscConfig+0x3e0>
34006b9e:	f240 2105 	movw	r1, #517	@ 0x205
34006ba2:	4863      	ldr	r0, [pc, #396]	@ (34006d30 <HAL_RCC_OscConfig+0x568>)
34006ba4:	f7fb f87e 	bl	34001ca4 <assert_failed>

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34006ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006bac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34006bb0:	d028      	beq.n	34006c04 <HAL_RCC_OscConfig+0x43c>
34006bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006bba:	d023      	beq.n	34006c04 <HAL_RCC_OscConfig+0x43c>
34006bbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34006bbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006bc2:	d104      	bne.n	34006bce <HAL_RCC_OscConfig+0x406>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34006bc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006bca:	2b00      	cmp	r3, #0
34006bcc:	d11a      	bne.n	34006c04 <HAL_RCC_OscConfig+0x43c>
34006bce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34006bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006bd4:	d104      	bne.n	34006be0 <HAL_RCC_OscConfig+0x418>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34006bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34006bdc:	2b00      	cmp	r3, #0
34006bde:	d111      	bne.n	34006c04 <HAL_RCC_OscConfig+0x43c>
34006be0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34006be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006be6:	d104      	bne.n	34006bf2 <HAL_RCC_OscConfig+0x42a>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34006be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34006bee:	2b00      	cmp	r3, #0
34006bf0:	d108      	bne.n	34006c04 <HAL_RCC_OscConfig+0x43c>
34006bf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34006bf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006bf8:	d119      	bne.n	34006c2e <HAL_RCC_OscConfig+0x466>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34006bfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34006c00:	2b00      	cmp	r3, #0
34006c02:	d014      	beq.n	34006c2e <HAL_RCC_OscConfig+0x466>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34006c04:	687b      	ldr	r3, [r7, #4]
34006c06:	69db      	ldr	r3, [r3, #28]
34006c08:	2b00      	cmp	r3, #0
34006c0a:	d101      	bne.n	34006c10 <HAL_RCC_OscConfig+0x448>
      {
        return HAL_ERROR;
34006c0c:	2301      	movs	r3, #1
34006c0e:	e2f5      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34006c10:	687b      	ldr	r3, [r7, #4]
34006c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c14:	2b1f      	cmp	r3, #31
34006c16:	d904      	bls.n	34006c22 <HAL_RCC_OscConfig+0x45a>
34006c18:	f44f 7106 	mov.w	r1, #536	@ 0x218
34006c1c:	4844      	ldr	r0, [pc, #272]	@ (34006d30 <HAL_RCC_OscConfig+0x568>)
34006c1e:	f7fb f841 	bl	34001ca4 <assert_failed>

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34006c22:	687b      	ldr	r3, [r7, #4]
34006c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c26:	4618      	mov	r0, r3
34006c28:	f7ff fc20 	bl	3400646c <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34006c2c:	e04d      	b.n	34006cca <HAL_RCC_OscConfig+0x502>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34006c2e:	687b      	ldr	r3, [r7, #4]
34006c30:	69db      	ldr	r3, [r3, #28]
34006c32:	2b00      	cmp	r3, #0
34006c34:	d035      	beq.n	34006ca2 <HAL_RCC_OscConfig+0x4da>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
34006c36:	687b      	ldr	r3, [r7, #4]
34006c38:	6a1b      	ldr	r3, [r3, #32]
34006c3a:	2b00      	cmp	r3, #0
34006c3c:	d009      	beq.n	34006c52 <HAL_RCC_OscConfig+0x48a>
34006c3e:	687b      	ldr	r3, [r7, #4]
34006c40:	6a1b      	ldr	r3, [r3, #32]
34006c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34006c46:	d004      	beq.n	34006c52 <HAL_RCC_OscConfig+0x48a>
34006c48:	f44f 7109 	mov.w	r1, #548	@ 0x224
34006c4c:	4838      	ldr	r0, [pc, #224]	@ (34006d30 <HAL_RCC_OscConfig+0x568>)
34006c4e:	f7fb f829 	bl	34001ca4 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34006c52:	687b      	ldr	r3, [r7, #4]
34006c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c56:	2b1f      	cmp	r3, #31
34006c58:	d904      	bls.n	34006c64 <HAL_RCC_OscConfig+0x49c>
34006c5a:	f240 2125 	movw	r1, #549	@ 0x225
34006c5e:	4834      	ldr	r0, [pc, #208]	@ (34006d30 <HAL_RCC_OscConfig+0x568>)
34006c60:	f7fb f820 	bl	34001ca4 <assert_failed>

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
34006c64:	687b      	ldr	r3, [r7, #4]
34006c66:	6a1b      	ldr	r3, [r3, #32]
34006c68:	4618      	mov	r0, r3
34006c6a:	f7ff fbdd 	bl	34006428 <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
34006c6e:	f7ff fbab 	bl	340063c8 <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006c72:	f7fd f839 	bl	34003ce8 <HAL_GetTick>
34006c76:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
34006c78:	e008      	b.n	34006c8c <HAL_RCC_OscConfig+0x4c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34006c7a:	f7fd f835 	bl	34003ce8 <HAL_GetTick>
34006c7e:	4602      	mov	r2, r0
34006c80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006c82:	1ad3      	subs	r3, r2, r3
34006c84:	2b01      	cmp	r3, #1
34006c86:	d901      	bls.n	34006c8c <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
34006c88:	2303      	movs	r3, #3
34006c8a:	e2b7      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() == 0U)
34006c8c:	f7ff fbba 	bl	34006404 <LL_RCC_MSI_IsReady>
34006c90:	4603      	mov	r3, r0
34006c92:	2b00      	cmp	r3, #0
34006c94:	d0f1      	beq.n	34006c7a <HAL_RCC_OscConfig+0x4b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34006c96:	687b      	ldr	r3, [r7, #4]
34006c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c9a:	4618      	mov	r0, r3
34006c9c:	f7ff fbe6 	bl	3400646c <LL_RCC_MSI_SetCalibTrimming>
34006ca0:	e013      	b.n	34006cca <HAL_RCC_OscConfig+0x502>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
34006ca2:	f7ff fb9f 	bl	340063e4 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006ca6:	f7fd f81f 	bl	34003ce8 <HAL_GetTick>
34006caa:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
34006cac:	e008      	b.n	34006cc0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34006cae:	f7fd f81b 	bl	34003ce8 <HAL_GetTick>
34006cb2:	4602      	mov	r2, r0
34006cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006cb6:	1ad3      	subs	r3, r2, r3
34006cb8:	2b01      	cmp	r3, #1
34006cba:	d901      	bls.n	34006cc0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
34006cbc:	2303      	movs	r3, #3
34006cbe:	e29d      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() != 0U)
34006cc0:	f7ff fba0 	bl	34006404 <LL_RCC_MSI_IsReady>
34006cc4:	4603      	mov	r3, r0
34006cc6:	2b00      	cmp	r3, #0
34006cc8:	d1f1      	bne.n	34006cae <HAL_RCC_OscConfig+0x4e6>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34006cca:	687b      	ldr	r3, [r7, #4]
34006ccc:	681b      	ldr	r3, [r3, #0]
34006cce:	f003 0308 	and.w	r3, r3, #8
34006cd2:	2b00      	cmp	r3, #0
34006cd4:	d03c      	beq.n	34006d50 <HAL_RCC_OscConfig+0x588>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
34006cd6:	687b      	ldr	r3, [r7, #4]
34006cd8:	699b      	ldr	r3, [r3, #24]
34006cda:	2b00      	cmp	r3, #0
34006cdc:	d008      	beq.n	34006cf0 <HAL_RCC_OscConfig+0x528>
34006cde:	687b      	ldr	r3, [r7, #4]
34006ce0:	699b      	ldr	r3, [r3, #24]
34006ce2:	2b01      	cmp	r3, #1
34006ce4:	d004      	beq.n	34006cf0 <HAL_RCC_OscConfig+0x528>
34006ce6:	f240 2155 	movw	r1, #597	@ 0x255
34006cea:	4811      	ldr	r0, [pc, #68]	@ (34006d30 <HAL_RCC_OscConfig+0x568>)
34006cec:	f7fa ffda 	bl	34001ca4 <assert_failed>

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34006cf0:	687b      	ldr	r3, [r7, #4]
34006cf2:	699b      	ldr	r3, [r3, #24]
34006cf4:	2b00      	cmp	r3, #0
34006cf6:	d014      	beq.n	34006d22 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
34006cf8:	f7ff fbe0 	bl	340064bc <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006cfc:	f7fc fff4 	bl	34003ce8 <HAL_GetTick>
34006d00:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
34006d02:	e008      	b.n	34006d16 <HAL_RCC_OscConfig+0x54e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34006d04:	f7fc fff0 	bl	34003ce8 <HAL_GetTick>
34006d08:	4602      	mov	r2, r0
34006d0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006d0c:	1ad3      	subs	r3, r2, r3
34006d0e:	2b01      	cmp	r3, #1
34006d10:	d901      	bls.n	34006d16 <HAL_RCC_OscConfig+0x54e>
        {
          return HAL_TIMEOUT;
34006d12:	2303      	movs	r3, #3
34006d14:	e272      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() == 0U)
34006d16:	f7ff fbef 	bl	340064f8 <LL_RCC_LSI_IsReady>
34006d1a:	4603      	mov	r3, r0
34006d1c:	2b00      	cmp	r3, #0
34006d1e:	d0f1      	beq.n	34006d04 <HAL_RCC_OscConfig+0x53c>
34006d20:	e016      	b.n	34006d50 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
34006d22:	f7ff fbd9 	bl	340064d8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006d26:	f7fc ffdf 	bl	34003ce8 <HAL_GetTick>
34006d2a:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
34006d2c:	e00b      	b.n	34006d46 <HAL_RCC_OscConfig+0x57e>
34006d2e:	bf00      	nop
34006d30:	3401e868 	.word	0x3401e868
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34006d34:	f7fc ffd8 	bl	34003ce8 <HAL_GetTick>
34006d38:	4602      	mov	r2, r0
34006d3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006d3c:	1ad3      	subs	r3, r2, r3
34006d3e:	2b01      	cmp	r3, #1
34006d40:	d901      	bls.n	34006d46 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
34006d42:	2303      	movs	r3, #3
34006d44:	e25a      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() != 0U)
34006d46:	f7ff fbd7 	bl	340064f8 <LL_RCC_LSI_IsReady>
34006d4a:	4603      	mov	r3, r0
34006d4c:	2b00      	cmp	r3, #0
34006d4e:	d1f1      	bne.n	34006d34 <HAL_RCC_OscConfig+0x56c>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34006d50:	687b      	ldr	r3, [r7, #4]
34006d52:	681b      	ldr	r3, [r3, #0]
34006d54:	f003 0304 	and.w	r3, r3, #4
34006d58:	2b00      	cmp	r3, #0
34006d5a:	f000 80a4 	beq.w	34006ea6 <HAL_RCC_OscConfig+0x6de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
34006d5e:	687b      	ldr	r3, [r7, #4]
34006d60:	689b      	ldr	r3, [r3, #8]
34006d62:	2b00      	cmp	r3, #0
34006d64:	d013      	beq.n	34006d8e <HAL_RCC_OscConfig+0x5c6>
34006d66:	687b      	ldr	r3, [r7, #4]
34006d68:	689b      	ldr	r3, [r3, #8]
34006d6a:	2b02      	cmp	r3, #2
34006d6c:	d00f      	beq.n	34006d8e <HAL_RCC_OscConfig+0x5c6>
34006d6e:	687b      	ldr	r3, [r7, #4]
34006d70:	689b      	ldr	r3, [r3, #8]
34006d72:	f248 0202 	movw	r2, #32770	@ 0x8002
34006d76:	4293      	cmp	r3, r2
34006d78:	d009      	beq.n	34006d8e <HAL_RCC_OscConfig+0x5c6>
34006d7a:	687b      	ldr	r3, [r7, #4]
34006d7c:	689b      	ldr	r3, [r3, #8]
34006d7e:	4a9b      	ldr	r2, [pc, #620]	@ (34006fec <HAL_RCC_OscConfig+0x824>)
34006d80:	4293      	cmp	r3, r2
34006d82:	d004      	beq.n	34006d8e <HAL_RCC_OscConfig+0x5c6>
34006d84:	f44f 7120 	mov.w	r1, #640	@ 0x280
34006d88:	4899      	ldr	r0, [pc, #612]	@ (34006ff0 <HAL_RCC_OscConfig+0x828>)
34006d8a:	f7fa ff8b 	bl	34001ca4 <assert_failed>

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34006d8e:	687b      	ldr	r3, [r7, #4]
34006d90:	689b      	ldr	r3, [r3, #8]
34006d92:	2b02      	cmp	r3, #2
34006d94:	d104      	bne.n	34006da0 <HAL_RCC_OscConfig+0x5d8>
34006d96:	4b97      	ldr	r3, [pc, #604]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006d98:	2202      	movs	r2, #2
34006d9a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006d9e:	e055      	b.n	34006e4c <HAL_RCC_OscConfig+0x684>
34006da0:	687b      	ldr	r3, [r7, #4]
34006da2:	689b      	ldr	r3, [r3, #8]
34006da4:	2b00      	cmp	r3, #0
34006da6:	d112      	bne.n	34006dce <HAL_RCC_OscConfig+0x606>
34006da8:	4b92      	ldr	r3, [pc, #584]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006dae:	461a      	mov	r2, r3
34006db0:	2302      	movs	r3, #2
34006db2:	6013      	str	r3, [r2, #0]
34006db4:	4b8f      	ldr	r3, [pc, #572]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006db8:	4a8e      	ldr	r2, [pc, #568]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006dbe:	6413      	str	r3, [r2, #64]	@ 0x40
34006dc0:	4b8c      	ldr	r3, [pc, #560]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006dc4:	4a8b      	ldr	r2, [pc, #556]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006dc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34006dca:	6413      	str	r3, [r2, #64]	@ 0x40
34006dcc:	e03e      	b.n	34006e4c <HAL_RCC_OscConfig+0x684>
34006dce:	687b      	ldr	r3, [r7, #4]
34006dd0:	689b      	ldr	r3, [r3, #8]
34006dd2:	f248 0202 	movw	r2, #32770	@ 0x8002
34006dd6:	4293      	cmp	r3, r2
34006dd8:	d110      	bne.n	34006dfc <HAL_RCC_OscConfig+0x634>
34006dda:	4b86      	ldr	r3, [pc, #536]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006dde:	4a85      	ldr	r2, [pc, #532]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34006de4:	6413      	str	r3, [r2, #64]	@ 0x40
34006de6:	4b83      	ldr	r3, [pc, #524]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006dea:	4a82      	ldr	r2, [pc, #520]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006df0:	6413      	str	r3, [r2, #64]	@ 0x40
34006df2:	4b80      	ldr	r3, [pc, #512]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006df4:	2202      	movs	r2, #2
34006df6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006dfa:	e027      	b.n	34006e4c <HAL_RCC_OscConfig+0x684>
34006dfc:	687b      	ldr	r3, [r7, #4]
34006dfe:	689b      	ldr	r3, [r3, #8]
34006e00:	4a7a      	ldr	r2, [pc, #488]	@ (34006fec <HAL_RCC_OscConfig+0x824>)
34006e02:	4293      	cmp	r3, r2
34006e04:	d110      	bne.n	34006e28 <HAL_RCC_OscConfig+0x660>
34006e06:	4b7b      	ldr	r3, [pc, #492]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006e0a:	4a7a      	ldr	r2, [pc, #488]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34006e10:	6413      	str	r3, [r2, #64]	@ 0x40
34006e12:	4b78      	ldr	r3, [pc, #480]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006e16:	4a77      	ldr	r2, [pc, #476]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34006e1c:	6413      	str	r3, [r2, #64]	@ 0x40
34006e1e:	4b75      	ldr	r3, [pc, #468]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006e20:	2202      	movs	r2, #2
34006e22:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006e26:	e011      	b.n	34006e4c <HAL_RCC_OscConfig+0x684>
34006e28:	4b72      	ldr	r3, [pc, #456]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006e2e:	461a      	mov	r2, r3
34006e30:	2302      	movs	r3, #2
34006e32:	6013      	str	r3, [r2, #0]
34006e34:	4b6f      	ldr	r3, [pc, #444]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006e38:	4a6e      	ldr	r2, [pc, #440]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006e3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34006e3e:	6413      	str	r3, [r2, #64]	@ 0x40
34006e40:	4b6c      	ldr	r3, [pc, #432]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006e44:	4a6b      	ldr	r2, [pc, #428]	@ (34006ff4 <HAL_RCC_OscConfig+0x82c>)
34006e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006e4a:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34006e4c:	687b      	ldr	r3, [r7, #4]
34006e4e:	689b      	ldr	r3, [r3, #8]
34006e50:	2b00      	cmp	r3, #0
34006e52:	d014      	beq.n	34006e7e <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006e54:	f7fc ff48 	bl	34003ce8 <HAL_GetTick>
34006e58:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
34006e5a:	e00a      	b.n	34006e72 <HAL_RCC_OscConfig+0x6aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34006e5c:	f7fc ff44 	bl	34003ce8 <HAL_GetTick>
34006e60:	4602      	mov	r2, r0
34006e62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006e64:	1ad3      	subs	r3, r2, r3
34006e66:	f241 3288 	movw	r2, #5000	@ 0x1388
34006e6a:	4293      	cmp	r3, r2
34006e6c:	d901      	bls.n	34006e72 <HAL_RCC_OscConfig+0x6aa>
        {
          return HAL_TIMEOUT;
34006e6e:	2303      	movs	r3, #3
34006e70:	e1c4      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() == 0U)
34006e72:	f7ff fb11 	bl	34006498 <LL_RCC_LSE_IsReady>
34006e76:	4603      	mov	r3, r0
34006e78:	2b00      	cmp	r3, #0
34006e7a:	d0ef      	beq.n	34006e5c <HAL_RCC_OscConfig+0x694>
34006e7c:	e013      	b.n	34006ea6 <HAL_RCC_OscConfig+0x6de>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006e7e:	f7fc ff33 	bl	34003ce8 <HAL_GetTick>
34006e82:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
34006e84:	e00a      	b.n	34006e9c <HAL_RCC_OscConfig+0x6d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34006e86:	f7fc ff2f 	bl	34003ce8 <HAL_GetTick>
34006e8a:	4602      	mov	r2, r0
34006e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006e8e:	1ad3      	subs	r3, r2, r3
34006e90:	f241 3288 	movw	r2, #5000	@ 0x1388
34006e94:	4293      	cmp	r3, r2
34006e96:	d901      	bls.n	34006e9c <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
34006e98:	2303      	movs	r3, #3
34006e9a:	e1af      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() != 0U)
34006e9c:	f7ff fafc 	bl	34006498 <LL_RCC_LSE_IsReady>
34006ea0:	4603      	mov	r3, r0
34006ea2:	2b00      	cmp	r3, #0
34006ea4:	d1ef      	bne.n	34006e86 <HAL_RCC_OscConfig+0x6be>
    }
  }

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
34006ea6:	687b      	ldr	r3, [r7, #4]
34006ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006eaa:	2b00      	cmp	r3, #0
34006eac:	d010      	beq.n	34006ed0 <HAL_RCC_OscConfig+0x708>
34006eae:	687b      	ldr	r3, [r7, #4]
34006eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006eb2:	2b01      	cmp	r3, #1
34006eb4:	d00c      	beq.n	34006ed0 <HAL_RCC_OscConfig+0x708>
34006eb6:	687b      	ldr	r3, [r7, #4]
34006eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006eba:	2b02      	cmp	r3, #2
34006ebc:	d008      	beq.n	34006ed0 <HAL_RCC_OscConfig+0x708>
34006ebe:	687b      	ldr	r3, [r7, #4]
34006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006ec2:	2b03      	cmp	r3, #3
34006ec4:	d004      	beq.n	34006ed0 <HAL_RCC_OscConfig+0x708>
34006ec6:	f240 21a5 	movw	r1, #677	@ 0x2a5
34006eca:	4849      	ldr	r0, [pc, #292]	@ (34006ff0 <HAL_RCC_OscConfig+0x828>)
34006ecc:	f7fa feea 	bl	34001ca4 <assert_failed>

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34006ed0:	687b      	ldr	r3, [r7, #4]
34006ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006ed4:	2b00      	cmp	r3, #0
34006ed6:	d04c      	beq.n	34006f72 <HAL_RCC_OscConfig+0x7aa>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34006ed8:	687b      	ldr	r3, [r7, #4]
34006eda:	3328      	adds	r3, #40	@ 0x28
34006edc:	4619      	mov	r1, r3
34006ede:	2000      	movs	r0, #0
34006ee0:	f001 f8e0 	bl	340080a4 <RCC_PLL_IsNewConfig>
34006ee4:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34006ee6:	f7ff fb3f 	bl	34006568 <LL_RCC_PLL1_IsReady>
34006eea:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
34006eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
34006eee:	2b01      	cmp	r3, #1
34006ef0:	d130      	bne.n	34006f54 <HAL_RCC_OscConfig+0x78c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34006ef2:	f7ff fc11 	bl	34006718 <LL_RCC_IC1_GetSource>
34006ef6:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34006ef8:	f7ff fc2c 	bl	34006754 <LL_RCC_IC2_GetSource>
34006efc:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34006efe:	f7ff fc47 	bl	34006790 <LL_RCC_IC6_GetSource>
34006f02:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34006f04:	f7ff fc52 	bl	340067ac <LL_RCC_IC11_GetSource>
34006f08:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34006f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006f0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006f12:	d104      	bne.n	34006f1e <HAL_RCC_OscConfig+0x756>
34006f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
34006f16:	2b00      	cmp	r3, #0
34006f18:	d101      	bne.n	34006f1e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
34006f1a:	2301      	movs	r3, #1
34006f1c:	e16e      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34006f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006f22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006f26:	d10a      	bne.n	34006f3e <HAL_RCC_OscConfig+0x776>
34006f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
34006f2a:	2b00      	cmp	r3, #0
34006f2c:	d005      	beq.n	34006f3a <HAL_RCC_OscConfig+0x772>
34006f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34006f30:	2b00      	cmp	r3, #0
34006f32:	d002      	beq.n	34006f3a <HAL_RCC_OscConfig+0x772>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34006f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34006f36:	2b00      	cmp	r3, #0
34006f38:	d101      	bne.n	34006f3e <HAL_RCC_OscConfig+0x776>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
34006f3a:	2301      	movs	r3, #1
34006f3c:	e15e      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34006f3e:	687b      	ldr	r3, [r7, #4]
34006f40:	3328      	adds	r3, #40	@ 0x28
34006f42:	4619      	mov	r1, r3
34006f44:	2000      	movs	r0, #0
34006f46:	f000 fedd 	bl	34007d04 <RCC_PLL_Config>
34006f4a:	4603      	mov	r3, r0
34006f4c:	2b00      	cmp	r3, #0
34006f4e:	d010      	beq.n	34006f72 <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
34006f50:	2301      	movs	r3, #1
34006f52:	e153      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34006f54:	687b      	ldr	r3, [r7, #4]
34006f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006f58:	2b02      	cmp	r3, #2
34006f5a:	d10a      	bne.n	34006f72 <HAL_RCC_OscConfig+0x7aa>
34006f5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
34006f5e:	2b00      	cmp	r3, #0
34006f60:	d107      	bne.n	34006f72 <HAL_RCC_OscConfig+0x7aa>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34006f62:	2000      	movs	r0, #0
34006f64:	f001 f872 	bl	3400804c <RCC_PLL_Enable>
34006f68:	4603      	mov	r3, r0
34006f6a:	2b00      	cmp	r3, #0
34006f6c:	d001      	beq.n	34006f72 <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
34006f6e:	2301      	movs	r3, #1
34006f70:	e144      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
34006f72:	687b      	ldr	r3, [r7, #4]
34006f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006f76:	2b00      	cmp	r3, #0
34006f78:	d010      	beq.n	34006f9c <HAL_RCC_OscConfig+0x7d4>
34006f7a:	687b      	ldr	r3, [r7, #4]
34006f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006f7e:	2b01      	cmp	r3, #1
34006f80:	d00c      	beq.n	34006f9c <HAL_RCC_OscConfig+0x7d4>
34006f82:	687b      	ldr	r3, [r7, #4]
34006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006f86:	2b02      	cmp	r3, #2
34006f88:	d008      	beq.n	34006f9c <HAL_RCC_OscConfig+0x7d4>
34006f8a:	687b      	ldr	r3, [r7, #4]
34006f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006f8e:	2b03      	cmp	r3, #3
34006f90:	d004      	beq.n	34006f9c <HAL_RCC_OscConfig+0x7d4>
34006f92:	f240 21d3 	movw	r1, #723	@ 0x2d3
34006f96:	4816      	ldr	r0, [pc, #88]	@ (34006ff0 <HAL_RCC_OscConfig+0x828>)
34006f98:	f7fa fe84 	bl	34001ca4 <assert_failed>

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34006f9c:	687b      	ldr	r3, [r7, #4]
34006f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006fa0:	2b00      	cmp	r3, #0
34006fa2:	d056      	beq.n	34007052 <HAL_RCC_OscConfig+0x88a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34006fa4:	687b      	ldr	r3, [r7, #4]
34006fa6:	3344      	adds	r3, #68	@ 0x44
34006fa8:	4619      	mov	r1, r3
34006faa:	2001      	movs	r0, #1
34006fac:	f001 f87a 	bl	340080a4 <RCC_PLL_IsNewConfig>
34006fb0:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
34006fb2:	f7ff fb0f 	bl	340065d4 <LL_RCC_PLL2_IsReady>
34006fb6:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
34006fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34006fba:	2b01      	cmp	r3, #1
34006fbc:	d13a      	bne.n	34007034 <HAL_RCC_OscConfig+0x86c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34006fbe:	f7ff fbab 	bl	34006718 <LL_RCC_IC1_GetSource>
34006fc2:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34006fc4:	f7ff fbc6 	bl	34006754 <LL_RCC_IC2_GetSource>
34006fc8:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34006fca:	f7ff fbe1 	bl	34006790 <LL_RCC_IC6_GetSource>
34006fce:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34006fd0:	f7ff fbec 	bl	340067ac <LL_RCC_IC11_GetSource>
34006fd4:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34006fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006fda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006fde:	d10b      	bne.n	34006ff8 <HAL_RCC_OscConfig+0x830>
34006fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34006fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006fe6:	d107      	bne.n	34006ff8 <HAL_RCC_OscConfig+0x830>
      {
        return HAL_ERROR;
34006fe8:	2301      	movs	r3, #1
34006fea:	e107      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
34006fec:	00018002 	.word	0x00018002
34006ff0:	3401e868 	.word	0x3401e868
34006ff4:	56028000 	.word	0x56028000
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34006ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006ffc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007000:	d10d      	bne.n	3400701e <HAL_RCC_OscConfig+0x856>
34007002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34007004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007008:	d007      	beq.n	3400701a <HAL_RCC_OscConfig+0x852>
3400700a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3400700c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007010:	d003      	beq.n	3400701a <HAL_RCC_OscConfig+0x852>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34007012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34007014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007018:	d101      	bne.n	3400701e <HAL_RCC_OscConfig+0x856>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
3400701a:	2301      	movs	r3, #1
3400701c:	e0ee      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
3400701e:	687b      	ldr	r3, [r7, #4]
34007020:	3344      	adds	r3, #68	@ 0x44
34007022:	4619      	mov	r1, r3
34007024:	2001      	movs	r0, #1
34007026:	f000 fe6d 	bl	34007d04 <RCC_PLL_Config>
3400702a:	4603      	mov	r3, r0
3400702c:	2b00      	cmp	r3, #0
3400702e:	d010      	beq.n	34007052 <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
34007030:	2301      	movs	r3, #1
34007032:	e0e3      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34007034:	687b      	ldr	r3, [r7, #4]
34007036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34007038:	2b02      	cmp	r3, #2
3400703a:	d10a      	bne.n	34007052 <HAL_RCC_OscConfig+0x88a>
3400703c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3400703e:	2b00      	cmp	r3, #0
34007040:	d107      	bne.n	34007052 <HAL_RCC_OscConfig+0x88a>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34007042:	2001      	movs	r0, #1
34007044:	f001 f802 	bl	3400804c <RCC_PLL_Enable>
34007048:	4603      	mov	r3, r0
3400704a:	2b00      	cmp	r3, #0
3400704c:	d001      	beq.n	34007052 <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
3400704e:	2301      	movs	r3, #1
34007050:	e0d4      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
34007052:	687b      	ldr	r3, [r7, #4]
34007054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34007056:	2b00      	cmp	r3, #0
34007058:	d010      	beq.n	3400707c <HAL_RCC_OscConfig+0x8b4>
3400705a:	687b      	ldr	r3, [r7, #4]
3400705c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400705e:	2b01      	cmp	r3, #1
34007060:	d00c      	beq.n	3400707c <HAL_RCC_OscConfig+0x8b4>
34007062:	687b      	ldr	r3, [r7, #4]
34007064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34007066:	2b02      	cmp	r3, #2
34007068:	d008      	beq.n	3400707c <HAL_RCC_OscConfig+0x8b4>
3400706a:	687b      	ldr	r3, [r7, #4]
3400706c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400706e:	2b03      	cmp	r3, #3
34007070:	d004      	beq.n	3400707c <HAL_RCC_OscConfig+0x8b4>
34007072:	f240 3101 	movw	r1, #769	@ 0x301
34007076:	4863      	ldr	r0, [pc, #396]	@ (34007204 <HAL_RCC_OscConfig+0xa3c>)
34007078:	f7fa fe14 	bl	34001ca4 <assert_failed>

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
3400707c:	687b      	ldr	r3, [r7, #4]
3400707e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34007080:	2b00      	cmp	r3, #0
34007082:	d050      	beq.n	34007126 <HAL_RCC_OscConfig+0x95e>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34007084:	687b      	ldr	r3, [r7, #4]
34007086:	3360      	adds	r3, #96	@ 0x60
34007088:	4619      	mov	r1, r3
3400708a:	2002      	movs	r0, #2
3400708c:	f001 f80a 	bl	340080a4 <RCC_PLL_IsNewConfig>
34007090:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34007092:	f7ff fa69 	bl	34006568 <LL_RCC_PLL1_IsReady>
34007096:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
34007098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3400709a:	2b01      	cmp	r3, #1
3400709c:	d134      	bne.n	34007108 <HAL_RCC_OscConfig+0x940>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3400709e:	f7ff fb3b 	bl	34006718 <LL_RCC_IC1_GetSource>
340070a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
340070a4:	f7ff fb56 	bl	34006754 <LL_RCC_IC2_GetSource>
340070a8:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
340070aa:	f7ff fb71 	bl	34006790 <LL_RCC_IC6_GetSource>
340070ae:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
340070b0:	f7ff fb7c 	bl	340067ac <LL_RCC_IC11_GetSource>
340070b4:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
340070b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
340070ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340070be:	d105      	bne.n	340070cc <HAL_RCC_OscConfig+0x904>
340070c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340070c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340070c6:	d101      	bne.n	340070cc <HAL_RCC_OscConfig+0x904>
      {
        return HAL_ERROR;
340070c8:	2301      	movs	r3, #1
340070ca:	e097      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
340070cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
340070d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340070d4:	d10d      	bne.n	340070f2 <HAL_RCC_OscConfig+0x92a>
340070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
340070d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340070dc:	d007      	beq.n	340070ee <HAL_RCC_OscConfig+0x926>
340070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340070e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340070e4:	d003      	beq.n	340070ee <HAL_RCC_OscConfig+0x926>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
340070e6:	6a3b      	ldr	r3, [r7, #32]
340070e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340070ec:	d101      	bne.n	340070f2 <HAL_RCC_OscConfig+0x92a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
340070ee:	2301      	movs	r3, #1
340070f0:	e084      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
340070f2:	687b      	ldr	r3, [r7, #4]
340070f4:	3360      	adds	r3, #96	@ 0x60
340070f6:	4619      	mov	r1, r3
340070f8:	2002      	movs	r0, #2
340070fa:	f000 fe03 	bl	34007d04 <RCC_PLL_Config>
340070fe:	4603      	mov	r3, r0
34007100:	2b00      	cmp	r3, #0
34007102:	d010      	beq.n	34007126 <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
34007104:	2301      	movs	r3, #1
34007106:	e079      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34007108:	687b      	ldr	r3, [r7, #4]
3400710a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400710c:	2b02      	cmp	r3, #2
3400710e:	d10a      	bne.n	34007126 <HAL_RCC_OscConfig+0x95e>
34007110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34007112:	2b00      	cmp	r3, #0
34007114:	d107      	bne.n	34007126 <HAL_RCC_OscConfig+0x95e>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34007116:	2002      	movs	r0, #2
34007118:	f000 ff98 	bl	3400804c <RCC_PLL_Enable>
3400711c:	4603      	mov	r3, r0
3400711e:	2b00      	cmp	r3, #0
34007120:	d001      	beq.n	34007126 <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
34007122:	2301      	movs	r3, #1
34007124:	e06a      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
34007126:	687b      	ldr	r3, [r7, #4]
34007128:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400712a:	2b00      	cmp	r3, #0
3400712c:	d010      	beq.n	34007150 <HAL_RCC_OscConfig+0x988>
3400712e:	687b      	ldr	r3, [r7, #4]
34007130:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34007132:	2b01      	cmp	r3, #1
34007134:	d00c      	beq.n	34007150 <HAL_RCC_OscConfig+0x988>
34007136:	687b      	ldr	r3, [r7, #4]
34007138:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400713a:	2b02      	cmp	r3, #2
3400713c:	d008      	beq.n	34007150 <HAL_RCC_OscConfig+0x988>
3400713e:	687b      	ldr	r3, [r7, #4]
34007140:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34007142:	2b03      	cmp	r3, #3
34007144:	d004      	beq.n	34007150 <HAL_RCC_OscConfig+0x988>
34007146:	f240 312e 	movw	r1, #814	@ 0x32e
3400714a:	482e      	ldr	r0, [pc, #184]	@ (34007204 <HAL_RCC_OscConfig+0xa3c>)
3400714c:	f7fa fdaa 	bl	34001ca4 <assert_failed>

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34007150:	687b      	ldr	r3, [r7, #4]
34007152:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34007154:	2b00      	cmp	r3, #0
34007156:	d050      	beq.n	340071fa <HAL_RCC_OscConfig+0xa32>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34007158:	687b      	ldr	r3, [r7, #4]
3400715a:	337c      	adds	r3, #124	@ 0x7c
3400715c:	4619      	mov	r1, r3
3400715e:	2003      	movs	r0, #3
34007160:	f000 ffa0 	bl	340080a4 <RCC_PLL_IsNewConfig>
34007164:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34007166:	f7ff faa1 	bl	340066ac <LL_RCC_PLL4_IsReady>
3400716a:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
3400716c:	69fb      	ldr	r3, [r7, #28]
3400716e:	2b01      	cmp	r3, #1
34007170:	d134      	bne.n	340071dc <HAL_RCC_OscConfig+0xa14>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34007172:	f7ff fad1 	bl	34006718 <LL_RCC_IC1_GetSource>
34007176:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34007178:	f7ff faec 	bl	34006754 <LL_RCC_IC2_GetSource>
3400717c:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3400717e:	f7ff fb07 	bl	34006790 <LL_RCC_IC6_GetSource>
34007182:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34007184:	f7ff fb12 	bl	340067ac <LL_RCC_IC11_GetSource>
34007188:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
3400718a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3400718e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007192:	d105      	bne.n	340071a0 <HAL_RCC_OscConfig+0x9d8>
34007194:	697b      	ldr	r3, [r7, #20]
34007196:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400719a:	d101      	bne.n	340071a0 <HAL_RCC_OscConfig+0x9d8>
      {
        return HAL_ERROR;
3400719c:	2301      	movs	r3, #1
3400719e:	e02d      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
340071a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
340071a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340071a8:	d10d      	bne.n	340071c6 <HAL_RCC_OscConfig+0x9fe>
340071aa:	693b      	ldr	r3, [r7, #16]
340071ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340071b0:	d007      	beq.n	340071c2 <HAL_RCC_OscConfig+0x9fa>
340071b2:	68fb      	ldr	r3, [r7, #12]
340071b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340071b8:	d003      	beq.n	340071c2 <HAL_RCC_OscConfig+0x9fa>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
340071ba:	68bb      	ldr	r3, [r7, #8]
340071bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340071c0:	d101      	bne.n	340071c6 <HAL_RCC_OscConfig+0x9fe>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
340071c2:	2301      	movs	r3, #1
340071c4:	e01a      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
340071c6:	687b      	ldr	r3, [r7, #4]
340071c8:	337c      	adds	r3, #124	@ 0x7c
340071ca:	4619      	mov	r1, r3
340071cc:	2003      	movs	r0, #3
340071ce:	f000 fd99 	bl	34007d04 <RCC_PLL_Config>
340071d2:	4603      	mov	r3, r0
340071d4:	2b00      	cmp	r3, #0
340071d6:	d010      	beq.n	340071fa <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
340071d8:	2301      	movs	r3, #1
340071da:	e00f      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
340071dc:	687b      	ldr	r3, [r7, #4]
340071de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340071e0:	2b02      	cmp	r3, #2
340071e2:	d10a      	bne.n	340071fa <HAL_RCC_OscConfig+0xa32>
340071e4:	69bb      	ldr	r3, [r7, #24]
340071e6:	2b00      	cmp	r3, #0
340071e8:	d107      	bne.n	340071fa <HAL_RCC_OscConfig+0xa32>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
340071ea:	2003      	movs	r0, #3
340071ec:	f000 ff2e 	bl	3400804c <RCC_PLL_Enable>
340071f0:	4603      	mov	r3, r0
340071f2:	2b00      	cmp	r3, #0
340071f4:	d001      	beq.n	340071fa <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
340071f6:	2301      	movs	r3, #1
340071f8:	e000      	b.n	340071fc <HAL_RCC_OscConfig+0xa34>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
340071fa:	2300      	movs	r3, #0
}
340071fc:	4618      	mov	r0, r3
340071fe:	3788      	adds	r7, #136	@ 0x88
34007200:	46bd      	mov	sp, r7
34007202:	bd80      	pop	{r7, pc}
34007204:	3401e868 	.word	0x3401e868

34007208 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34007208:	b580      	push	{r7, lr}
3400720a:	b084      	sub	sp, #16
3400720c:	af00      	add	r7, sp, #0
3400720e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34007210:	687b      	ldr	r3, [r7, #4]
34007212:	2b00      	cmp	r3, #0
34007214:	d102      	bne.n	3400721c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
34007216:	2301      	movs	r3, #1
34007218:	f000 bc6d 	b.w	34007af6 <HAL_RCC_ClockConfig+0x8ee>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
3400721c:	687b      	ldr	r3, [r7, #4]
3400721e:	681b      	ldr	r3, [r3, #0]
34007220:	2b7f      	cmp	r3, #127	@ 0x7f
34007222:	d904      	bls.n	3400722e <HAL_RCC_ClockConfig+0x26>
34007224:	f240 317e 	movw	r1, #894	@ 0x37e
34007228:	4880      	ldr	r0, [pc, #512]	@ (3400742c <HAL_RCC_ClockConfig+0x224>)
3400722a:	f7fa fd3b 	bl	34001ca4 <assert_failed>

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
3400722e:	687b      	ldr	r3, [r7, #4]
34007230:	681b      	ldr	r3, [r3, #0]
34007232:	f003 0308 	and.w	r3, r3, #8
34007236:	2b00      	cmp	r3, #0
34007238:	d035      	beq.n	340072a6 <HAL_RCC_ClockConfig+0x9e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
3400723a:	687b      	ldr	r3, [r7, #4]
3400723c:	691b      	ldr	r3, [r3, #16]
3400723e:	2b00      	cmp	r3, #0
34007240:	d020      	beq.n	34007284 <HAL_RCC_ClockConfig+0x7c>
34007242:	687b      	ldr	r3, [r7, #4]
34007244:	691b      	ldr	r3, [r3, #16]
34007246:	2b01      	cmp	r3, #1
34007248:	d01c      	beq.n	34007284 <HAL_RCC_ClockConfig+0x7c>
3400724a:	687b      	ldr	r3, [r7, #4]
3400724c:	691b      	ldr	r3, [r3, #16]
3400724e:	2b02      	cmp	r3, #2
34007250:	d018      	beq.n	34007284 <HAL_RCC_ClockConfig+0x7c>
34007252:	687b      	ldr	r3, [r7, #4]
34007254:	691b      	ldr	r3, [r3, #16]
34007256:	2b03      	cmp	r3, #3
34007258:	d014      	beq.n	34007284 <HAL_RCC_ClockConfig+0x7c>
3400725a:	687b      	ldr	r3, [r7, #4]
3400725c:	691b      	ldr	r3, [r3, #16]
3400725e:	2b04      	cmp	r3, #4
34007260:	d010      	beq.n	34007284 <HAL_RCC_ClockConfig+0x7c>
34007262:	687b      	ldr	r3, [r7, #4]
34007264:	691b      	ldr	r3, [r3, #16]
34007266:	2b05      	cmp	r3, #5
34007268:	d00c      	beq.n	34007284 <HAL_RCC_ClockConfig+0x7c>
3400726a:	687b      	ldr	r3, [r7, #4]
3400726c:	691b      	ldr	r3, [r3, #16]
3400726e:	2b06      	cmp	r3, #6
34007270:	d008      	beq.n	34007284 <HAL_RCC_ClockConfig+0x7c>
34007272:	687b      	ldr	r3, [r7, #4]
34007274:	691b      	ldr	r3, [r3, #16]
34007276:	2b07      	cmp	r3, #7
34007278:	d004      	beq.n	34007284 <HAL_RCC_ClockConfig+0x7c>
3400727a:	f240 3185 	movw	r1, #901	@ 0x385
3400727e:	486b      	ldr	r0, [pc, #428]	@ (3400742c <HAL_RCC_ClockConfig+0x224>)
34007280:	f7fa fd10 	bl	34001ca4 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34007284:	687b      	ldr	r3, [r7, #4]
34007286:	691a      	ldr	r2, [r3, #16]
34007288:	4b69      	ldr	r3, [pc, #420]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
3400728a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400728c:	f003 0307 	and.w	r3, r3, #7
34007290:	429a      	cmp	r2, r3
34007292:	d908      	bls.n	340072a6 <HAL_RCC_ClockConfig+0x9e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34007294:	4b66      	ldr	r3, [pc, #408]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
34007296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007298:	f023 0207 	bic.w	r2, r3, #7
3400729c:	687b      	ldr	r3, [r7, #4]
3400729e:	691b      	ldr	r3, [r3, #16]
340072a0:	4963      	ldr	r1, [pc, #396]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
340072a2:	4313      	orrs	r3, r2
340072a4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
340072a6:	687b      	ldr	r3, [r7, #4]
340072a8:	681b      	ldr	r3, [r3, #0]
340072aa:	f003 0310 	and.w	r3, r3, #16
340072ae:	2b00      	cmp	r3, #0
340072b0:	d035      	beq.n	3400731e <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
340072b2:	687b      	ldr	r3, [r7, #4]
340072b4:	695b      	ldr	r3, [r3, #20]
340072b6:	2b00      	cmp	r3, #0
340072b8:	d020      	beq.n	340072fc <HAL_RCC_ClockConfig+0xf4>
340072ba:	687b      	ldr	r3, [r7, #4]
340072bc:	695b      	ldr	r3, [r3, #20]
340072be:	2b10      	cmp	r3, #16
340072c0:	d01c      	beq.n	340072fc <HAL_RCC_ClockConfig+0xf4>
340072c2:	687b      	ldr	r3, [r7, #4]
340072c4:	695b      	ldr	r3, [r3, #20]
340072c6:	2b20      	cmp	r3, #32
340072c8:	d018      	beq.n	340072fc <HAL_RCC_ClockConfig+0xf4>
340072ca:	687b      	ldr	r3, [r7, #4]
340072cc:	695b      	ldr	r3, [r3, #20]
340072ce:	2b30      	cmp	r3, #48	@ 0x30
340072d0:	d014      	beq.n	340072fc <HAL_RCC_ClockConfig+0xf4>
340072d2:	687b      	ldr	r3, [r7, #4]
340072d4:	695b      	ldr	r3, [r3, #20]
340072d6:	2b40      	cmp	r3, #64	@ 0x40
340072d8:	d010      	beq.n	340072fc <HAL_RCC_ClockConfig+0xf4>
340072da:	687b      	ldr	r3, [r7, #4]
340072dc:	695b      	ldr	r3, [r3, #20]
340072de:	2b50      	cmp	r3, #80	@ 0x50
340072e0:	d00c      	beq.n	340072fc <HAL_RCC_ClockConfig+0xf4>
340072e2:	687b      	ldr	r3, [r7, #4]
340072e4:	695b      	ldr	r3, [r3, #20]
340072e6:	2b60      	cmp	r3, #96	@ 0x60
340072e8:	d008      	beq.n	340072fc <HAL_RCC_ClockConfig+0xf4>
340072ea:	687b      	ldr	r3, [r7, #4]
340072ec:	695b      	ldr	r3, [r3, #20]
340072ee:	2b70      	cmp	r3, #112	@ 0x70
340072f0:	d004      	beq.n	340072fc <HAL_RCC_ClockConfig+0xf4>
340072f2:	f240 318f 	movw	r1, #911	@ 0x38f
340072f6:	484d      	ldr	r0, [pc, #308]	@ (3400742c <HAL_RCC_ClockConfig+0x224>)
340072f8:	f7fa fcd4 	bl	34001ca4 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
340072fc:	687b      	ldr	r3, [r7, #4]
340072fe:	695a      	ldr	r2, [r3, #20]
34007300:	4b4b      	ldr	r3, [pc, #300]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
34007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007304:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34007308:	429a      	cmp	r2, r3
3400730a:	d908      	bls.n	3400731e <HAL_RCC_ClockConfig+0x116>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
3400730c:	4b48      	ldr	r3, [pc, #288]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
3400730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007310:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34007314:	687b      	ldr	r3, [r7, #4]
34007316:	695b      	ldr	r3, [r3, #20]
34007318:	4945      	ldr	r1, [pc, #276]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
3400731a:	4313      	orrs	r3, r2
3400731c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
3400731e:	687b      	ldr	r3, [r7, #4]
34007320:	681b      	ldr	r3, [r3, #0]
34007322:	f003 0320 	and.w	r3, r3, #32
34007326:	2b00      	cmp	r3, #0
34007328:	d03c      	beq.n	340073a4 <HAL_RCC_ClockConfig+0x19c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
3400732a:	687b      	ldr	r3, [r7, #4]
3400732c:	699b      	ldr	r3, [r3, #24]
3400732e:	2b00      	cmp	r3, #0
34007330:	d027      	beq.n	34007382 <HAL_RCC_ClockConfig+0x17a>
34007332:	687b      	ldr	r3, [r7, #4]
34007334:	699b      	ldr	r3, [r3, #24]
34007336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400733a:	d022      	beq.n	34007382 <HAL_RCC_ClockConfig+0x17a>
3400733c:	687b      	ldr	r3, [r7, #4]
3400733e:	699b      	ldr	r3, [r3, #24]
34007340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34007344:	d01d      	beq.n	34007382 <HAL_RCC_ClockConfig+0x17a>
34007346:	687b      	ldr	r3, [r7, #4]
34007348:	699b      	ldr	r3, [r3, #24]
3400734a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3400734e:	d018      	beq.n	34007382 <HAL_RCC_ClockConfig+0x17a>
34007350:	687b      	ldr	r3, [r7, #4]
34007352:	699b      	ldr	r3, [r3, #24]
34007354:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34007358:	d013      	beq.n	34007382 <HAL_RCC_ClockConfig+0x17a>
3400735a:	687b      	ldr	r3, [r7, #4]
3400735c:	699b      	ldr	r3, [r3, #24]
3400735e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34007362:	d00e      	beq.n	34007382 <HAL_RCC_ClockConfig+0x17a>
34007364:	687b      	ldr	r3, [r7, #4]
34007366:	699b      	ldr	r3, [r3, #24]
34007368:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
3400736c:	d009      	beq.n	34007382 <HAL_RCC_ClockConfig+0x17a>
3400736e:	687b      	ldr	r3, [r7, #4]
34007370:	699b      	ldr	r3, [r3, #24]
34007372:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
34007376:	d004      	beq.n	34007382 <HAL_RCC_ClockConfig+0x17a>
34007378:	f240 3199 	movw	r1, #921	@ 0x399
3400737c:	482b      	ldr	r0, [pc, #172]	@ (3400742c <HAL_RCC_ClockConfig+0x224>)
3400737e:	f7fa fc91 	bl	34001ca4 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34007382:	687b      	ldr	r3, [r7, #4]
34007384:	699a      	ldr	r2, [r3, #24]
34007386:	4b2a      	ldr	r3, [pc, #168]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
34007388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400738a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
3400738e:	429a      	cmp	r2, r3
34007390:	d908      	bls.n	340073a4 <HAL_RCC_ClockConfig+0x19c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34007392:	4b27      	ldr	r3, [pc, #156]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
34007394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007396:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
3400739a:	687b      	ldr	r3, [r7, #4]
3400739c:	699b      	ldr	r3, [r3, #24]
3400739e:	4924      	ldr	r1, [pc, #144]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
340073a0:	4313      	orrs	r3, r2
340073a2:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
340073a4:	687b      	ldr	r3, [r7, #4]
340073a6:	681b      	ldr	r3, [r3, #0]
340073a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340073ac:	2b00      	cmp	r3, #0
340073ae:	d041      	beq.n	34007434 <HAL_RCC_ClockConfig+0x22c>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
340073b0:	687b      	ldr	r3, [r7, #4]
340073b2:	69db      	ldr	r3, [r3, #28]
340073b4:	2b00      	cmp	r3, #0
340073b6:	d027      	beq.n	34007408 <HAL_RCC_ClockConfig+0x200>
340073b8:	687b      	ldr	r3, [r7, #4]
340073ba:	69db      	ldr	r3, [r3, #28]
340073bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340073c0:	d022      	beq.n	34007408 <HAL_RCC_ClockConfig+0x200>
340073c2:	687b      	ldr	r3, [r7, #4]
340073c4:	69db      	ldr	r3, [r3, #28]
340073c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340073ca:	d01d      	beq.n	34007408 <HAL_RCC_ClockConfig+0x200>
340073cc:	687b      	ldr	r3, [r7, #4]
340073ce:	69db      	ldr	r3, [r3, #28]
340073d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340073d4:	d018      	beq.n	34007408 <HAL_RCC_ClockConfig+0x200>
340073d6:	687b      	ldr	r3, [r7, #4]
340073d8:	69db      	ldr	r3, [r3, #28]
340073da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340073de:	d013      	beq.n	34007408 <HAL_RCC_ClockConfig+0x200>
340073e0:	687b      	ldr	r3, [r7, #4]
340073e2:	69db      	ldr	r3, [r3, #28]
340073e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340073e8:	d00e      	beq.n	34007408 <HAL_RCC_ClockConfig+0x200>
340073ea:	687b      	ldr	r3, [r7, #4]
340073ec:	69db      	ldr	r3, [r3, #28]
340073ee:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340073f2:	d009      	beq.n	34007408 <HAL_RCC_ClockConfig+0x200>
340073f4:	687b      	ldr	r3, [r7, #4]
340073f6:	69db      	ldr	r3, [r3, #28]
340073f8:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
340073fc:	d004      	beq.n	34007408 <HAL_RCC_ClockConfig+0x200>
340073fe:	f240 31a3 	movw	r1, #931	@ 0x3a3
34007402:	480a      	ldr	r0, [pc, #40]	@ (3400742c <HAL_RCC_ClockConfig+0x224>)
34007404:	f7fa fc4e 	bl	34001ca4 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34007408:	687b      	ldr	r3, [r7, #4]
3400740a:	69da      	ldr	r2, [r3, #28]
3400740c:	4b08      	ldr	r3, [pc, #32]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
3400740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007410:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34007414:	429a      	cmp	r2, r3
34007416:	d90d      	bls.n	34007434 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34007418:	4b05      	ldr	r3, [pc, #20]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
3400741a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400741c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34007420:	687b      	ldr	r3, [r7, #4]
34007422:	69db      	ldr	r3, [r3, #28]
34007424:	4902      	ldr	r1, [pc, #8]	@ (34007430 <HAL_RCC_ClockConfig+0x228>)
34007426:	4313      	orrs	r3, r2
34007428:	624b      	str	r3, [r1, #36]	@ 0x24
3400742a:	e003      	b.n	34007434 <HAL_RCC_ClockConfig+0x22c>
3400742c:	3401e868 	.word	0x3401e868
34007430:	56028000 	.word	0x56028000
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34007434:	687b      	ldr	r3, [r7, #4]
34007436:	681b      	ldr	r3, [r3, #0]
34007438:	f003 0304 	and.w	r3, r3, #4
3400743c:	2b00      	cmp	r3, #0
3400743e:	d03c      	beq.n	340074ba <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34007440:	687b      	ldr	r3, [r7, #4]
34007442:	68db      	ldr	r3, [r3, #12]
34007444:	2b00      	cmp	r3, #0
34007446:	d027      	beq.n	34007498 <HAL_RCC_ClockConfig+0x290>
34007448:	687b      	ldr	r3, [r7, #4]
3400744a:	68db      	ldr	r3, [r3, #12]
3400744c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34007450:	d022      	beq.n	34007498 <HAL_RCC_ClockConfig+0x290>
34007452:	687b      	ldr	r3, [r7, #4]
34007454:	68db      	ldr	r3, [r3, #12]
34007456:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400745a:	d01d      	beq.n	34007498 <HAL_RCC_ClockConfig+0x290>
3400745c:	687b      	ldr	r3, [r7, #4]
3400745e:	68db      	ldr	r3, [r3, #12]
34007460:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007464:	d018      	beq.n	34007498 <HAL_RCC_ClockConfig+0x290>
34007466:	687b      	ldr	r3, [r7, #4]
34007468:	68db      	ldr	r3, [r3, #12]
3400746a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3400746e:	d013      	beq.n	34007498 <HAL_RCC_ClockConfig+0x290>
34007470:	687b      	ldr	r3, [r7, #4]
34007472:	68db      	ldr	r3, [r3, #12]
34007474:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
34007478:	d00e      	beq.n	34007498 <HAL_RCC_ClockConfig+0x290>
3400747a:	687b      	ldr	r3, [r7, #4]
3400747c:	68db      	ldr	r3, [r3, #12]
3400747e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
34007482:	d009      	beq.n	34007498 <HAL_RCC_ClockConfig+0x290>
34007484:	687b      	ldr	r3, [r7, #4]
34007486:	68db      	ldr	r3, [r3, #12]
34007488:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
3400748c:	d004      	beq.n	34007498 <HAL_RCC_ClockConfig+0x290>
3400748e:	f240 31ad 	movw	r1, #941	@ 0x3ad
34007492:	4874      	ldr	r0, [pc, #464]	@ (34007664 <HAL_RCC_ClockConfig+0x45c>)
34007494:	f7fa fc06 	bl	34001ca4 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34007498:	687b      	ldr	r3, [r7, #4]
3400749a:	68da      	ldr	r2, [r3, #12]
3400749c:	4b72      	ldr	r3, [pc, #456]	@ (34007668 <HAL_RCC_ClockConfig+0x460>)
3400749e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340074a0:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
340074a4:	429a      	cmp	r2, r3
340074a6:	d908      	bls.n	340074ba <HAL_RCC_ClockConfig+0x2b2>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
340074a8:	4b6f      	ldr	r3, [pc, #444]	@ (34007668 <HAL_RCC_ClockConfig+0x460>)
340074aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340074ac:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
340074b0:	687b      	ldr	r3, [r7, #4]
340074b2:	68db      	ldr	r3, [r3, #12]
340074b4:	496c      	ldr	r1, [pc, #432]	@ (34007668 <HAL_RCC_ClockConfig+0x460>)
340074b6:	4313      	orrs	r3, r2
340074b8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
340074ba:	687b      	ldr	r3, [r7, #4]
340074bc:	681b      	ldr	r3, [r3, #0]
340074be:	f003 0301 	and.w	r3, r3, #1
340074c2:	2b00      	cmp	r3, #0
340074c4:	f000 80a2 	beq.w	3400760c <HAL_RCC_ClockConfig+0x404>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
340074c8:	687b      	ldr	r3, [r7, #4]
340074ca:	685b      	ldr	r3, [r3, #4]
340074cc:	2b00      	cmp	r3, #0
340074ce:	d013      	beq.n	340074f8 <HAL_RCC_ClockConfig+0x2f0>
340074d0:	687b      	ldr	r3, [r7, #4]
340074d2:	685b      	ldr	r3, [r3, #4]
340074d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340074d8:	d00e      	beq.n	340074f8 <HAL_RCC_ClockConfig+0x2f0>
340074da:	687b      	ldr	r3, [r7, #4]
340074dc:	685b      	ldr	r3, [r3, #4]
340074de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340074e2:	d009      	beq.n	340074f8 <HAL_RCC_ClockConfig+0x2f0>
340074e4:	687b      	ldr	r3, [r7, #4]
340074e6:	685b      	ldr	r3, [r3, #4]
340074e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340074ec:	d004      	beq.n	340074f8 <HAL_RCC_ClockConfig+0x2f0>
340074ee:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
340074f2:	485c      	ldr	r0, [pc, #368]	@ (34007664 <HAL_RCC_ClockConfig+0x45c>)
340074f4:	f7fa fbd6 	bl	34001ca4 <assert_failed>

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
340074f8:	687b      	ldr	r3, [r7, #4]
340074fa:	685b      	ldr	r3, [r3, #4]
340074fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34007500:	d106      	bne.n	34007510 <HAL_RCC_ClockConfig+0x308>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34007502:	f7fe fee7 	bl	340062d4 <LL_RCC_HSE_IsReady>
34007506:	4603      	mov	r3, r0
34007508:	2b00      	cmp	r3, #0
3400750a:	d15a      	bne.n	340075c2 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
3400750c:	2301      	movs	r3, #1
3400750e:	e2f2      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34007510:	687b      	ldr	r3, [r7, #4]
34007512:	685b      	ldr	r3, [r3, #4]
34007514:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34007518:	d140      	bne.n	3400759c <HAL_RCC_ClockConfig+0x394>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
3400751a:	687b      	ldr	r3, [r7, #4]
3400751c:	6a1b      	ldr	r3, [r3, #32]
3400751e:	2b00      	cmp	r3, #0
34007520:	d013      	beq.n	3400754a <HAL_RCC_ClockConfig+0x342>
34007522:	687b      	ldr	r3, [r7, #4]
34007524:	6a1b      	ldr	r3, [r3, #32]
34007526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400752a:	d00e      	beq.n	3400754a <HAL_RCC_ClockConfig+0x342>
3400752c:	687b      	ldr	r3, [r7, #4]
3400752e:	6a1b      	ldr	r3, [r3, #32]
34007530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007534:	d009      	beq.n	3400754a <HAL_RCC_ClockConfig+0x342>
34007536:	687b      	ldr	r3, [r7, #4]
34007538:	6a1b      	ldr	r3, [r3, #32]
3400753a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400753e:	d004      	beq.n	3400754a <HAL_RCC_ClockConfig+0x342>
34007540:	f240 31c7 	movw	r1, #967	@ 0x3c7
34007544:	4847      	ldr	r0, [pc, #284]	@ (34007664 <HAL_RCC_ClockConfig+0x45c>)
34007546:	f7fa fbad 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
3400754a:	687b      	ldr	r3, [r7, #4]
3400754c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400754e:	2b00      	cmp	r3, #0
34007550:	d004      	beq.n	3400755c <HAL_RCC_ClockConfig+0x354>
34007552:	687b      	ldr	r3, [r7, #4]
34007554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400755a:	d904      	bls.n	34007566 <HAL_RCC_ClockConfig+0x35e>
3400755c:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34007560:	4840      	ldr	r0, [pc, #256]	@ (34007664 <HAL_RCC_ClockConfig+0x45c>)
34007562:	f7fa fb9f 	bl	34001ca4 <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34007566:	f7ff f8d7 	bl	34006718 <LL_RCC_IC1_GetSource>
3400756a:	4602      	mov	r2, r0
3400756c:	687b      	ldr	r3, [r7, #4]
3400756e:	6a1b      	ldr	r3, [r3, #32]
34007570:	4619      	mov	r1, r3
34007572:	4610      	mov	r0, r2
34007574:	f000 fe4a 	bl	3400820c <RCC_IC_CheckPLLSources>
34007578:	4603      	mov	r3, r0
3400757a:	2b01      	cmp	r3, #1
3400757c:	d001      	beq.n	34007582 <HAL_RCC_ClockConfig+0x37a>
      {
        return HAL_ERROR;
3400757e:	2301      	movs	r3, #1
34007580:	e2b9      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34007582:	687b      	ldr	r3, [r7, #4]
34007584:	6a1a      	ldr	r2, [r3, #32]
34007586:	687b      	ldr	r3, [r7, #4]
34007588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400758a:	3b01      	subs	r3, #1
3400758c:	041b      	lsls	r3, r3, #16
3400758e:	4936      	ldr	r1, [pc, #216]	@ (34007668 <HAL_RCC_ClockConfig+0x460>)
34007590:	4313      	orrs	r3, r2
34007592:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
34007596:	f7ff f8b1 	bl	340066fc <LL_RCC_IC1_Enable>
3400759a:	e012      	b.n	340075c2 <HAL_RCC_ClockConfig+0x3ba>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
3400759c:	687b      	ldr	r3, [r7, #4]
3400759e:	685b      	ldr	r3, [r3, #4]
340075a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340075a4:	d106      	bne.n	340075b4 <HAL_RCC_ClockConfig+0x3ac>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
340075a6:	f7fe ff2d 	bl	34006404 <LL_RCC_MSI_IsReady>
340075aa:	4603      	mov	r3, r0
340075ac:	2b00      	cmp	r3, #0
340075ae:	d108      	bne.n	340075c2 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
340075b0:	2301      	movs	r3, #1
340075b2:	e2a0      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
340075b4:	f7fe febe 	bl	34006334 <LL_RCC_HSI_IsReady>
340075b8:	4603      	mov	r3, r0
340075ba:	2b00      	cmp	r3, #0
340075bc:	d101      	bne.n	340075c2 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
340075be:	2301      	movs	r3, #1
340075c0:	e299      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
340075c2:	4b29      	ldr	r3, [pc, #164]	@ (34007668 <HAL_RCC_ClockConfig+0x460>)
340075c4:	6a1b      	ldr	r3, [r3, #32]
340075c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
340075ca:	687b      	ldr	r3, [r7, #4]
340075cc:	685b      	ldr	r3, [r3, #4]
340075ce:	4926      	ldr	r1, [pc, #152]	@ (34007668 <HAL_RCC_ClockConfig+0x460>)
340075d0:	4313      	orrs	r3, r2
340075d2:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
340075d4:	f7fc fb88 	bl	34003ce8 <HAL_GetTick>
340075d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
340075da:	e00a      	b.n	340075f2 <HAL_RCC_ClockConfig+0x3ea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
340075dc:	f7fc fb84 	bl	34003ce8 <HAL_GetTick>
340075e0:	4602      	mov	r2, r0
340075e2:	68fb      	ldr	r3, [r7, #12]
340075e4:	1ad3      	subs	r3, r2, r3
340075e6:	f241 3288 	movw	r2, #5000	@ 0x1388
340075ea:	4293      	cmp	r3, r2
340075ec:	d901      	bls.n	340075f2 <HAL_RCC_ClockConfig+0x3ea>
      {
        return HAL_TIMEOUT;
340075ee:	2303      	movs	r3, #3
340075f0:	e281      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
340075f2:	f7fe ff8f 	bl	34006514 <LL_RCC_GetCpuClkSource>
340075f6:	4602      	mov	r2, r0
340075f8:	687b      	ldr	r3, [r7, #4]
340075fa:	685b      	ldr	r3, [r3, #4]
340075fc:	011b      	lsls	r3, r3, #4
340075fe:	429a      	cmp	r2, r3
34007600:	d1ec      	bne.n	340075dc <HAL_RCC_ClockConfig+0x3d4>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34007602:	f000 fa83 	bl	34007b0c <HAL_RCC_GetCpuClockFreq>
34007606:	4603      	mov	r3, r0
34007608:	4a18      	ldr	r2, [pc, #96]	@ (3400766c <HAL_RCC_ClockConfig+0x464>)
3400760a:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
3400760c:	687b      	ldr	r3, [r7, #4]
3400760e:	681b      	ldr	r3, [r3, #0]
34007610:	f003 0302 	and.w	r3, r3, #2
34007614:	2b00      	cmp	r3, #0
34007616:	f000 8127 	beq.w	34007868 <HAL_RCC_ClockConfig+0x660>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
3400761a:	687b      	ldr	r3, [r7, #4]
3400761c:	689b      	ldr	r3, [r3, #8]
3400761e:	2b00      	cmp	r3, #0
34007620:	d013      	beq.n	3400764a <HAL_RCC_ClockConfig+0x442>
34007622:	687b      	ldr	r3, [r7, #4]
34007624:	689b      	ldr	r3, [r3, #8]
34007626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400762a:	d00e      	beq.n	3400764a <HAL_RCC_ClockConfig+0x442>
3400762c:	687b      	ldr	r3, [r7, #4]
3400762e:	689b      	ldr	r3, [r3, #8]
34007630:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34007634:	d009      	beq.n	3400764a <HAL_RCC_ClockConfig+0x442>
34007636:	687b      	ldr	r3, [r7, #4]
34007638:	689b      	ldr	r3, [r3, #8]
3400763a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3400763e:	d004      	beq.n	3400764a <HAL_RCC_ClockConfig+0x442>
34007640:	f240 4101 	movw	r1, #1025	@ 0x401
34007644:	4807      	ldr	r0, [pc, #28]	@ (34007664 <HAL_RCC_ClockConfig+0x45c>)
34007646:	f7fa fb2d 	bl	34001ca4 <assert_failed>

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
3400764a:	687b      	ldr	r3, [r7, #4]
3400764c:	689b      	ldr	r3, [r3, #8]
3400764e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34007652:	d10d      	bne.n	34007670 <HAL_RCC_ClockConfig+0x468>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34007654:	f7fe fe3e 	bl	340062d4 <LL_RCC_HSE_IsReady>
34007658:	4603      	mov	r3, r0
3400765a:	2b00      	cmp	r3, #0
3400765c:	f040 80e0 	bne.w	34007820 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
34007660:	2301      	movs	r3, #1
34007662:	e248      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
34007664:	3401e868 	.word	0x3401e868
34007668:	56028000 	.word	0x56028000
3400766c:	34020704 	.word	0x34020704
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34007670:	687b      	ldr	r3, [r7, #4]
34007672:	689b      	ldr	r3, [r3, #8]
34007674:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34007678:	f040 80c0 	bne.w	340077fc <HAL_RCC_ClockConfig+0x5f4>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
3400767c:	687b      	ldr	r3, [r7, #4]
3400767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34007680:	2b00      	cmp	r3, #0
34007682:	d013      	beq.n	340076ac <HAL_RCC_ClockConfig+0x4a4>
34007684:	687b      	ldr	r3, [r7, #4]
34007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34007688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400768c:	d00e      	beq.n	340076ac <HAL_RCC_ClockConfig+0x4a4>
3400768e:	687b      	ldr	r3, [r7, #4]
34007690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34007692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007696:	d009      	beq.n	340076ac <HAL_RCC_ClockConfig+0x4a4>
34007698:	687b      	ldr	r3, [r7, #4]
3400769a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400769c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340076a0:	d004      	beq.n	340076ac <HAL_RCC_ClockConfig+0x4a4>
340076a2:	f44f 6182 	mov.w	r1, #1040	@ 0x410
340076a6:	486a      	ldr	r0, [pc, #424]	@ (34007850 <HAL_RCC_ClockConfig+0x648>)
340076a8:	f7fa fafc 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
340076ac:	687b      	ldr	r3, [r7, #4]
340076ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340076b0:	2b00      	cmp	r3, #0
340076b2:	d004      	beq.n	340076be <HAL_RCC_ClockConfig+0x4b6>
340076b4:	687b      	ldr	r3, [r7, #4]
340076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340076b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340076bc:	d904      	bls.n	340076c8 <HAL_RCC_ClockConfig+0x4c0>
340076be:	f240 4111 	movw	r1, #1041	@ 0x411
340076c2:	4863      	ldr	r0, [pc, #396]	@ (34007850 <HAL_RCC_ClockConfig+0x648>)
340076c4:	f7fa faee 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
340076c8:	687b      	ldr	r3, [r7, #4]
340076ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340076cc:	2b00      	cmp	r3, #0
340076ce:	d013      	beq.n	340076f8 <HAL_RCC_ClockConfig+0x4f0>
340076d0:	687b      	ldr	r3, [r7, #4]
340076d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340076d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340076d8:	d00e      	beq.n	340076f8 <HAL_RCC_ClockConfig+0x4f0>
340076da:	687b      	ldr	r3, [r7, #4]
340076dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340076de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340076e2:	d009      	beq.n	340076f8 <HAL_RCC_ClockConfig+0x4f0>
340076e4:	687b      	ldr	r3, [r7, #4]
340076e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340076e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340076ec:	d004      	beq.n	340076f8 <HAL_RCC_ClockConfig+0x4f0>
340076ee:	f240 4112 	movw	r1, #1042	@ 0x412
340076f2:	4857      	ldr	r0, [pc, #348]	@ (34007850 <HAL_RCC_ClockConfig+0x648>)
340076f4:	f7fa fad6 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
340076f8:	687b      	ldr	r3, [r7, #4]
340076fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340076fc:	2b00      	cmp	r3, #0
340076fe:	d004      	beq.n	3400770a <HAL_RCC_ClockConfig+0x502>
34007700:	687b      	ldr	r3, [r7, #4]
34007702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34007704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34007708:	d904      	bls.n	34007714 <HAL_RCC_ClockConfig+0x50c>
3400770a:	f240 4113 	movw	r1, #1043	@ 0x413
3400770e:	4850      	ldr	r0, [pc, #320]	@ (34007850 <HAL_RCC_ClockConfig+0x648>)
34007710:	f7fa fac8 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
34007714:	687b      	ldr	r3, [r7, #4]
34007716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007718:	2b00      	cmp	r3, #0
3400771a:	d013      	beq.n	34007744 <HAL_RCC_ClockConfig+0x53c>
3400771c:	687b      	ldr	r3, [r7, #4]
3400771e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007724:	d00e      	beq.n	34007744 <HAL_RCC_ClockConfig+0x53c>
34007726:	687b      	ldr	r3, [r7, #4]
34007728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400772a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400772e:	d009      	beq.n	34007744 <HAL_RCC_ClockConfig+0x53c>
34007730:	687b      	ldr	r3, [r7, #4]
34007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007734:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007738:	d004      	beq.n	34007744 <HAL_RCC_ClockConfig+0x53c>
3400773a:	f240 4114 	movw	r1, #1044	@ 0x414
3400773e:	4844      	ldr	r0, [pc, #272]	@ (34007850 <HAL_RCC_ClockConfig+0x648>)
34007740:	f7fa fab0 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
34007744:	687b      	ldr	r3, [r7, #4]
34007746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34007748:	2b00      	cmp	r3, #0
3400774a:	d004      	beq.n	34007756 <HAL_RCC_ClockConfig+0x54e>
3400774c:	687b      	ldr	r3, [r7, #4]
3400774e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34007750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34007754:	d904      	bls.n	34007760 <HAL_RCC_ClockConfig+0x558>
34007756:	f240 4115 	movw	r1, #1045	@ 0x415
3400775a:	483d      	ldr	r0, [pc, #244]	@ (34007850 <HAL_RCC_ClockConfig+0x648>)
3400775c:	f7fa faa2 	bl	34001ca4 <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34007760:	f7fe fff8 	bl	34006754 <LL_RCC_IC2_GetSource>
34007764:	4602      	mov	r2, r0
34007766:	687b      	ldr	r3, [r7, #4]
34007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400776a:	4619      	mov	r1, r3
3400776c:	4610      	mov	r0, r2
3400776e:	f000 fd4d 	bl	3400820c <RCC_IC_CheckPLLSources>
34007772:	4603      	mov	r3, r0
34007774:	2b01      	cmp	r3, #1
34007776:	d001      	beq.n	3400777c <HAL_RCC_ClockConfig+0x574>
      {
        return HAL_ERROR;
34007778:	2301      	movs	r3, #1
3400777a:	e1bc      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
3400777c:	f7ff f808 	bl	34006790 <LL_RCC_IC6_GetSource>
34007780:	4602      	mov	r2, r0
34007782:	687b      	ldr	r3, [r7, #4]
34007784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34007786:	4619      	mov	r1, r3
34007788:	4610      	mov	r0, r2
3400778a:	f000 fd3f 	bl	3400820c <RCC_IC_CheckPLLSources>
3400778e:	4603      	mov	r3, r0
34007790:	2b01      	cmp	r3, #1
34007792:	d001      	beq.n	34007798 <HAL_RCC_ClockConfig+0x590>
      {
        return HAL_ERROR;
34007794:	2301      	movs	r3, #1
34007796:	e1ae      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34007798:	f7ff f808 	bl	340067ac <LL_RCC_IC11_GetSource>
3400779c:	4602      	mov	r2, r0
3400779e:	687b      	ldr	r3, [r7, #4]
340077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340077a2:	4619      	mov	r1, r3
340077a4:	4610      	mov	r0, r2
340077a6:	f000 fd31 	bl	3400820c <RCC_IC_CheckPLLSources>
340077aa:	4603      	mov	r3, r0
340077ac:	2b01      	cmp	r3, #1
340077ae:	d001      	beq.n	340077b4 <HAL_RCC_ClockConfig+0x5ac>
      {
        return HAL_ERROR;
340077b0:	2301      	movs	r3, #1
340077b2:	e1a0      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
340077b4:	687b      	ldr	r3, [r7, #4]
340077b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
340077b8:	687b      	ldr	r3, [r7, #4]
340077ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340077bc:	3b01      	subs	r3, #1
340077be:	041b      	lsls	r3, r3, #16
340077c0:	4924      	ldr	r1, [pc, #144]	@ (34007854 <HAL_RCC_ClockConfig+0x64c>)
340077c2:	4313      	orrs	r3, r2
340077c4:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
340077c8:	687b      	ldr	r3, [r7, #4]
340077ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
340077cc:	687b      	ldr	r3, [r7, #4]
340077ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340077d0:	3b01      	subs	r3, #1
340077d2:	041b      	lsls	r3, r3, #16
340077d4:	491f      	ldr	r1, [pc, #124]	@ (34007854 <HAL_RCC_ClockConfig+0x64c>)
340077d6:	4313      	orrs	r3, r2
340077d8:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
340077dc:	687b      	ldr	r3, [r7, #4]
340077de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
340077e0:	687b      	ldr	r3, [r7, #4]
340077e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340077e4:	3b01      	subs	r3, #1
340077e6:	041b      	lsls	r3, r3, #16
340077e8:	491a      	ldr	r1, [pc, #104]	@ (34007854 <HAL_RCC_ClockConfig+0x64c>)
340077ea:	4313      	orrs	r3, r2
340077ec:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
340077f0:	4b18      	ldr	r3, [pc, #96]	@ (34007854 <HAL_RCC_ClockConfig+0x64c>)
340077f2:	f240 4222 	movw	r2, #1058	@ 0x422
340077f6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
340077fa:	e011      	b.n	34007820 <HAL_RCC_ClockConfig+0x618>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
340077fc:	687b      	ldr	r3, [r7, #4]
340077fe:	689b      	ldr	r3, [r3, #8]
34007800:	2b00      	cmp	r3, #0
34007802:	d106      	bne.n	34007812 <HAL_RCC_ClockConfig+0x60a>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34007804:	f7fe fd96 	bl	34006334 <LL_RCC_HSI_IsReady>
34007808:	4603      	mov	r3, r0
3400780a:	2b00      	cmp	r3, #0
3400780c:	d108      	bne.n	34007820 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
3400780e:	2301      	movs	r3, #1
34007810:	e171      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34007812:	f7fe fdf7 	bl	34006404 <LL_RCC_MSI_IsReady>
34007816:	4603      	mov	r3, r0
34007818:	2b00      	cmp	r3, #0
3400781a:	d101      	bne.n	34007820 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
3400781c:	2301      	movs	r3, #1
3400781e:	e16a      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34007820:	4b0c      	ldr	r3, [pc, #48]	@ (34007854 <HAL_RCC_ClockConfig+0x64c>)
34007822:	6a1b      	ldr	r3, [r3, #32]
34007824:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34007828:	687b      	ldr	r3, [r7, #4]
3400782a:	689b      	ldr	r3, [r3, #8]
3400782c:	4909      	ldr	r1, [pc, #36]	@ (34007854 <HAL_RCC_ClockConfig+0x64c>)
3400782e:	4313      	orrs	r3, r2
34007830:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007832:	f7fc fa59 	bl	34003ce8 <HAL_GetTick>
34007836:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34007838:	e00e      	b.n	34007858 <HAL_RCC_ClockConfig+0x650>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3400783a:	f7fc fa55 	bl	34003ce8 <HAL_GetTick>
3400783e:	4602      	mov	r2, r0
34007840:	68fb      	ldr	r3, [r7, #12]
34007842:	1ad3      	subs	r3, r2, r3
34007844:	f241 3288 	movw	r2, #5000	@ 0x1388
34007848:	4293      	cmp	r3, r2
3400784a:	d905      	bls.n	34007858 <HAL_RCC_ClockConfig+0x650>
      {
        return HAL_TIMEOUT;
3400784c:	2303      	movs	r3, #3
3400784e:	e152      	b.n	34007af6 <HAL_RCC_ClockConfig+0x8ee>
34007850:	3401e868 	.word	0x3401e868
34007854:	56028000 	.word	0x56028000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34007858:	f7fe fe6a 	bl	34006530 <LL_RCC_GetSysClkSource>
3400785c:	4602      	mov	r2, r0
3400785e:	687b      	ldr	r3, [r7, #4]
34007860:	689b      	ldr	r3, [r3, #8]
34007862:	011b      	lsls	r3, r3, #4
34007864:	429a      	cmp	r2, r3
34007866:	d1e8      	bne.n	3400783a <HAL_RCC_ClockConfig+0x632>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34007868:	687b      	ldr	r3, [r7, #4]
3400786a:	681b      	ldr	r3, [r3, #0]
3400786c:	f003 0304 	and.w	r3, r3, #4
34007870:	2b00      	cmp	r3, #0
34007872:	d03c      	beq.n	340078ee <HAL_RCC_ClockConfig+0x6e6>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34007874:	687b      	ldr	r3, [r7, #4]
34007876:	68db      	ldr	r3, [r3, #12]
34007878:	2b00      	cmp	r3, #0
3400787a:	d027      	beq.n	340078cc <HAL_RCC_ClockConfig+0x6c4>
3400787c:	687b      	ldr	r3, [r7, #4]
3400787e:	68db      	ldr	r3, [r3, #12]
34007880:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34007884:	d022      	beq.n	340078cc <HAL_RCC_ClockConfig+0x6c4>
34007886:	687b      	ldr	r3, [r7, #4]
34007888:	68db      	ldr	r3, [r3, #12]
3400788a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400788e:	d01d      	beq.n	340078cc <HAL_RCC_ClockConfig+0x6c4>
34007890:	687b      	ldr	r3, [r7, #4]
34007892:	68db      	ldr	r3, [r3, #12]
34007894:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007898:	d018      	beq.n	340078cc <HAL_RCC_ClockConfig+0x6c4>
3400789a:	687b      	ldr	r3, [r7, #4]
3400789c:	68db      	ldr	r3, [r3, #12]
3400789e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
340078a2:	d013      	beq.n	340078cc <HAL_RCC_ClockConfig+0x6c4>
340078a4:	687b      	ldr	r3, [r7, #4]
340078a6:	68db      	ldr	r3, [r3, #12]
340078a8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
340078ac:	d00e      	beq.n	340078cc <HAL_RCC_ClockConfig+0x6c4>
340078ae:	687b      	ldr	r3, [r7, #4]
340078b0:	68db      	ldr	r3, [r3, #12]
340078b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
340078b6:	d009      	beq.n	340078cc <HAL_RCC_ClockConfig+0x6c4>
340078b8:	687b      	ldr	r3, [r7, #4]
340078ba:	68db      	ldr	r3, [r3, #12]
340078bc:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
340078c0:	d004      	beq.n	340078cc <HAL_RCC_ClockConfig+0x6c4>
340078c2:	f44f 618b 	mov.w	r1, #1112	@ 0x458
340078c6:	488e      	ldr	r0, [pc, #568]	@ (34007b00 <HAL_RCC_ClockConfig+0x8f8>)
340078c8:	f7fa f9ec 	bl	34001ca4 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
340078cc:	687b      	ldr	r3, [r7, #4]
340078ce:	68da      	ldr	r2, [r3, #12]
340078d0:	4b8c      	ldr	r3, [pc, #560]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
340078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340078d4:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
340078d8:	429a      	cmp	r2, r3
340078da:	d208      	bcs.n	340078ee <HAL_RCC_ClockConfig+0x6e6>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
340078dc:	4b89      	ldr	r3, [pc, #548]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
340078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340078e0:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
340078e4:	687b      	ldr	r3, [r7, #4]
340078e6:	68db      	ldr	r3, [r3, #12]
340078e8:	4986      	ldr	r1, [pc, #536]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
340078ea:	4313      	orrs	r3, r2
340078ec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
340078ee:	687b      	ldr	r3, [r7, #4]
340078f0:	681b      	ldr	r3, [r3, #0]
340078f2:	f003 0308 	and.w	r3, r3, #8
340078f6:	2b00      	cmp	r3, #0
340078f8:	d035      	beq.n	34007966 <HAL_RCC_ClockConfig+0x75e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
340078fa:	687b      	ldr	r3, [r7, #4]
340078fc:	691b      	ldr	r3, [r3, #16]
340078fe:	2b00      	cmp	r3, #0
34007900:	d020      	beq.n	34007944 <HAL_RCC_ClockConfig+0x73c>
34007902:	687b      	ldr	r3, [r7, #4]
34007904:	691b      	ldr	r3, [r3, #16]
34007906:	2b01      	cmp	r3, #1
34007908:	d01c      	beq.n	34007944 <HAL_RCC_ClockConfig+0x73c>
3400790a:	687b      	ldr	r3, [r7, #4]
3400790c:	691b      	ldr	r3, [r3, #16]
3400790e:	2b02      	cmp	r3, #2
34007910:	d018      	beq.n	34007944 <HAL_RCC_ClockConfig+0x73c>
34007912:	687b      	ldr	r3, [r7, #4]
34007914:	691b      	ldr	r3, [r3, #16]
34007916:	2b03      	cmp	r3, #3
34007918:	d014      	beq.n	34007944 <HAL_RCC_ClockConfig+0x73c>
3400791a:	687b      	ldr	r3, [r7, #4]
3400791c:	691b      	ldr	r3, [r3, #16]
3400791e:	2b04      	cmp	r3, #4
34007920:	d010      	beq.n	34007944 <HAL_RCC_ClockConfig+0x73c>
34007922:	687b      	ldr	r3, [r7, #4]
34007924:	691b      	ldr	r3, [r3, #16]
34007926:	2b05      	cmp	r3, #5
34007928:	d00c      	beq.n	34007944 <HAL_RCC_ClockConfig+0x73c>
3400792a:	687b      	ldr	r3, [r7, #4]
3400792c:	691b      	ldr	r3, [r3, #16]
3400792e:	2b06      	cmp	r3, #6
34007930:	d008      	beq.n	34007944 <HAL_RCC_ClockConfig+0x73c>
34007932:	687b      	ldr	r3, [r7, #4]
34007934:	691b      	ldr	r3, [r3, #16]
34007936:	2b07      	cmp	r3, #7
34007938:	d004      	beq.n	34007944 <HAL_RCC_ClockConfig+0x73c>
3400793a:	f240 4163 	movw	r1, #1123	@ 0x463
3400793e:	4870      	ldr	r0, [pc, #448]	@ (34007b00 <HAL_RCC_ClockConfig+0x8f8>)
34007940:	f7fa f9b0 	bl	34001ca4 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34007944:	687b      	ldr	r3, [r7, #4]
34007946:	691a      	ldr	r2, [r3, #16]
34007948:	4b6e      	ldr	r3, [pc, #440]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
3400794a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400794c:	f003 0307 	and.w	r3, r3, #7
34007950:	429a      	cmp	r2, r3
34007952:	d208      	bcs.n	34007966 <HAL_RCC_ClockConfig+0x75e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34007954:	4b6b      	ldr	r3, [pc, #428]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
34007956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007958:	f023 0207 	bic.w	r2, r3, #7
3400795c:	687b      	ldr	r3, [r7, #4]
3400795e:	691b      	ldr	r3, [r3, #16]
34007960:	4968      	ldr	r1, [pc, #416]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
34007962:	4313      	orrs	r3, r2
34007964:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34007966:	687b      	ldr	r3, [r7, #4]
34007968:	681b      	ldr	r3, [r3, #0]
3400796a:	f003 0310 	and.w	r3, r3, #16
3400796e:	2b00      	cmp	r3, #0
34007970:	d035      	beq.n	340079de <HAL_RCC_ClockConfig+0x7d6>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34007972:	687b      	ldr	r3, [r7, #4]
34007974:	695b      	ldr	r3, [r3, #20]
34007976:	2b00      	cmp	r3, #0
34007978:	d020      	beq.n	340079bc <HAL_RCC_ClockConfig+0x7b4>
3400797a:	687b      	ldr	r3, [r7, #4]
3400797c:	695b      	ldr	r3, [r3, #20]
3400797e:	2b10      	cmp	r3, #16
34007980:	d01c      	beq.n	340079bc <HAL_RCC_ClockConfig+0x7b4>
34007982:	687b      	ldr	r3, [r7, #4]
34007984:	695b      	ldr	r3, [r3, #20]
34007986:	2b20      	cmp	r3, #32
34007988:	d018      	beq.n	340079bc <HAL_RCC_ClockConfig+0x7b4>
3400798a:	687b      	ldr	r3, [r7, #4]
3400798c:	695b      	ldr	r3, [r3, #20]
3400798e:	2b30      	cmp	r3, #48	@ 0x30
34007990:	d014      	beq.n	340079bc <HAL_RCC_ClockConfig+0x7b4>
34007992:	687b      	ldr	r3, [r7, #4]
34007994:	695b      	ldr	r3, [r3, #20]
34007996:	2b40      	cmp	r3, #64	@ 0x40
34007998:	d010      	beq.n	340079bc <HAL_RCC_ClockConfig+0x7b4>
3400799a:	687b      	ldr	r3, [r7, #4]
3400799c:	695b      	ldr	r3, [r3, #20]
3400799e:	2b50      	cmp	r3, #80	@ 0x50
340079a0:	d00c      	beq.n	340079bc <HAL_RCC_ClockConfig+0x7b4>
340079a2:	687b      	ldr	r3, [r7, #4]
340079a4:	695b      	ldr	r3, [r3, #20]
340079a6:	2b60      	cmp	r3, #96	@ 0x60
340079a8:	d008      	beq.n	340079bc <HAL_RCC_ClockConfig+0x7b4>
340079aa:	687b      	ldr	r3, [r7, #4]
340079ac:	695b      	ldr	r3, [r3, #20]
340079ae:	2b70      	cmp	r3, #112	@ 0x70
340079b0:	d004      	beq.n	340079bc <HAL_RCC_ClockConfig+0x7b4>
340079b2:	f240 416d 	movw	r1, #1133	@ 0x46d
340079b6:	4852      	ldr	r0, [pc, #328]	@ (34007b00 <HAL_RCC_ClockConfig+0x8f8>)
340079b8:	f7fa f974 	bl	34001ca4 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
340079bc:	687b      	ldr	r3, [r7, #4]
340079be:	695a      	ldr	r2, [r3, #20]
340079c0:	4b50      	ldr	r3, [pc, #320]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
340079c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340079c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
340079c8:	429a      	cmp	r2, r3
340079ca:	d208      	bcs.n	340079de <HAL_RCC_ClockConfig+0x7d6>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
340079cc:	4b4d      	ldr	r3, [pc, #308]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
340079ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340079d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
340079d4:	687b      	ldr	r3, [r7, #4]
340079d6:	695b      	ldr	r3, [r3, #20]
340079d8:	494a      	ldr	r1, [pc, #296]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
340079da:	4313      	orrs	r3, r2
340079dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
340079de:	687b      	ldr	r3, [r7, #4]
340079e0:	681b      	ldr	r3, [r3, #0]
340079e2:	f003 0320 	and.w	r3, r3, #32
340079e6:	2b00      	cmp	r3, #0
340079e8:	d03c      	beq.n	34007a64 <HAL_RCC_ClockConfig+0x85c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
340079ea:	687b      	ldr	r3, [r7, #4]
340079ec:	699b      	ldr	r3, [r3, #24]
340079ee:	2b00      	cmp	r3, #0
340079f0:	d027      	beq.n	34007a42 <HAL_RCC_ClockConfig+0x83a>
340079f2:	687b      	ldr	r3, [r7, #4]
340079f4:	699b      	ldr	r3, [r3, #24]
340079f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340079fa:	d022      	beq.n	34007a42 <HAL_RCC_ClockConfig+0x83a>
340079fc:	687b      	ldr	r3, [r7, #4]
340079fe:	699b      	ldr	r3, [r3, #24]
34007a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34007a04:	d01d      	beq.n	34007a42 <HAL_RCC_ClockConfig+0x83a>
34007a06:	687b      	ldr	r3, [r7, #4]
34007a08:	699b      	ldr	r3, [r3, #24]
34007a0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34007a0e:	d018      	beq.n	34007a42 <HAL_RCC_ClockConfig+0x83a>
34007a10:	687b      	ldr	r3, [r7, #4]
34007a12:	699b      	ldr	r3, [r3, #24]
34007a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34007a18:	d013      	beq.n	34007a42 <HAL_RCC_ClockConfig+0x83a>
34007a1a:	687b      	ldr	r3, [r7, #4]
34007a1c:	699b      	ldr	r3, [r3, #24]
34007a1e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34007a22:	d00e      	beq.n	34007a42 <HAL_RCC_ClockConfig+0x83a>
34007a24:	687b      	ldr	r3, [r7, #4]
34007a26:	699b      	ldr	r3, [r3, #24]
34007a28:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
34007a2c:	d009      	beq.n	34007a42 <HAL_RCC_ClockConfig+0x83a>
34007a2e:	687b      	ldr	r3, [r7, #4]
34007a30:	699b      	ldr	r3, [r3, #24]
34007a32:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
34007a36:	d004      	beq.n	34007a42 <HAL_RCC_ClockConfig+0x83a>
34007a38:	f240 4177 	movw	r1, #1143	@ 0x477
34007a3c:	4830      	ldr	r0, [pc, #192]	@ (34007b00 <HAL_RCC_ClockConfig+0x8f8>)
34007a3e:	f7fa f931 	bl	34001ca4 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34007a42:	687b      	ldr	r3, [r7, #4]
34007a44:	699a      	ldr	r2, [r3, #24]
34007a46:	4b2f      	ldr	r3, [pc, #188]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
34007a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007a4a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34007a4e:	429a      	cmp	r2, r3
34007a50:	d208      	bcs.n	34007a64 <HAL_RCC_ClockConfig+0x85c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34007a52:	4b2c      	ldr	r3, [pc, #176]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
34007a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007a56:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34007a5a:	687b      	ldr	r3, [r7, #4]
34007a5c:	699b      	ldr	r3, [r3, #24]
34007a5e:	4929      	ldr	r1, [pc, #164]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
34007a60:	4313      	orrs	r3, r2
34007a62:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34007a64:	687b      	ldr	r3, [r7, #4]
34007a66:	681b      	ldr	r3, [r3, #0]
34007a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34007a6c:	2b00      	cmp	r3, #0
34007a6e:	d03c      	beq.n	34007aea <HAL_RCC_ClockConfig+0x8e2>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34007a70:	687b      	ldr	r3, [r7, #4]
34007a72:	69db      	ldr	r3, [r3, #28]
34007a74:	2b00      	cmp	r3, #0
34007a76:	d027      	beq.n	34007ac8 <HAL_RCC_ClockConfig+0x8c0>
34007a78:	687b      	ldr	r3, [r7, #4]
34007a7a:	69db      	ldr	r3, [r3, #28]
34007a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34007a80:	d022      	beq.n	34007ac8 <HAL_RCC_ClockConfig+0x8c0>
34007a82:	687b      	ldr	r3, [r7, #4]
34007a84:	69db      	ldr	r3, [r3, #28]
34007a86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34007a8a:	d01d      	beq.n	34007ac8 <HAL_RCC_ClockConfig+0x8c0>
34007a8c:	687b      	ldr	r3, [r7, #4]
34007a8e:	69db      	ldr	r3, [r3, #28]
34007a90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34007a94:	d018      	beq.n	34007ac8 <HAL_RCC_ClockConfig+0x8c0>
34007a96:	687b      	ldr	r3, [r7, #4]
34007a98:	69db      	ldr	r3, [r3, #28]
34007a9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34007a9e:	d013      	beq.n	34007ac8 <HAL_RCC_ClockConfig+0x8c0>
34007aa0:	687b      	ldr	r3, [r7, #4]
34007aa2:	69db      	ldr	r3, [r3, #28]
34007aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34007aa8:	d00e      	beq.n	34007ac8 <HAL_RCC_ClockConfig+0x8c0>
34007aaa:	687b      	ldr	r3, [r7, #4]
34007aac:	69db      	ldr	r3, [r3, #28]
34007aae:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34007ab2:	d009      	beq.n	34007ac8 <HAL_RCC_ClockConfig+0x8c0>
34007ab4:	687b      	ldr	r3, [r7, #4]
34007ab6:	69db      	ldr	r3, [r3, #28]
34007ab8:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34007abc:	d004      	beq.n	34007ac8 <HAL_RCC_ClockConfig+0x8c0>
34007abe:	f240 4181 	movw	r1, #1153	@ 0x481
34007ac2:	480f      	ldr	r0, [pc, #60]	@ (34007b00 <HAL_RCC_ClockConfig+0x8f8>)
34007ac4:	f7fa f8ee 	bl	34001ca4 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34007ac8:	687b      	ldr	r3, [r7, #4]
34007aca:	69da      	ldr	r2, [r3, #28]
34007acc:	4b0d      	ldr	r3, [pc, #52]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
34007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007ad0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34007ad4:	429a      	cmp	r2, r3
34007ad6:	d208      	bcs.n	34007aea <HAL_RCC_ClockConfig+0x8e2>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34007ad8:	4b0a      	ldr	r3, [pc, #40]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
34007ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007adc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34007ae0:	687b      	ldr	r3, [r7, #4]
34007ae2:	69db      	ldr	r3, [r3, #28]
34007ae4:	4907      	ldr	r1, [pc, #28]	@ (34007b04 <HAL_RCC_ClockConfig+0x8fc>)
34007ae6:	4313      	orrs	r3, r2
34007ae8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
34007aea:	4b07      	ldr	r3, [pc, #28]	@ (34007b08 <HAL_RCC_ClockConfig+0x900>)
34007aec:	681b      	ldr	r3, [r3, #0]
34007aee:	4618      	mov	r0, r3
34007af0:	f7fc f8b0 	bl	34003c54 <HAL_InitTick>
34007af4:	4603      	mov	r3, r0
}
34007af6:	4618      	mov	r0, r3
34007af8:	3710      	adds	r7, #16
34007afa:	46bd      	mov	sp, r7
34007afc:	bd80      	pop	{r7, pc}
34007afe:	bf00      	nop
34007b00:	3401e868 	.word	0x3401e868
34007b04:	56028000 	.word	0x56028000
34007b08:	34020708 	.word	0x34020708

34007b0c <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34007b0c:	b580      	push	{r7, lr}
34007b0e:	b082      	sub	sp, #8
34007b10:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34007b12:	2300      	movs	r3, #0
34007b14:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
34007b16:	f7fe fcfd 	bl	34006514 <LL_RCC_GetCpuClkSource>
34007b1a:	4603      	mov	r3, r0
34007b1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007b20:	d025      	beq.n	34007b6e <HAL_RCC_GetCpuClockFreq+0x62>
34007b22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007b26:	d860      	bhi.n	34007bea <HAL_RCC_GetCpuClockFreq+0xde>
34007b28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34007b2c:	d01c      	beq.n	34007b68 <HAL_RCC_GetCpuClockFreq+0x5c>
34007b2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34007b32:	d85a      	bhi.n	34007bea <HAL_RCC_GetCpuClockFreq+0xde>
34007b34:	2b00      	cmp	r3, #0
34007b36:	d003      	beq.n	34007b40 <HAL_RCC_GetCpuClockFreq+0x34>
34007b38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34007b3c:	d009      	beq.n	34007b52 <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34007b3e:	e054      	b.n	34007bea <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007b40:	f7fe fc1e 	bl	34006380 <LL_RCC_HSI_GetDivider>
34007b44:	4603      	mov	r3, r0
34007b46:	09db      	lsrs	r3, r3, #7
34007b48:	4a2b      	ldr	r2, [pc, #172]	@ (34007bf8 <HAL_RCC_GetCpuClockFreq+0xec>)
34007b4a:	fa22 f303 	lsr.w	r3, r2, r3
34007b4e:	607b      	str	r3, [r7, #4]
      break;
34007b50:	e04c      	b.n	34007bec <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34007b52:	f7fe fc7d 	bl	34006450 <LL_RCC_MSI_GetFrequency>
34007b56:	4603      	mov	r3, r0
34007b58:	2b00      	cmp	r3, #0
34007b5a:	d102      	bne.n	34007b62 <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
34007b5c:	4b27      	ldr	r3, [pc, #156]	@ (34007bfc <HAL_RCC_GetCpuClockFreq+0xf0>)
34007b5e:	607b      	str	r3, [r7, #4]
      break;
34007b60:	e044      	b.n	34007bec <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
34007b62:	4b27      	ldr	r3, [pc, #156]	@ (34007c00 <HAL_RCC_GetCpuClockFreq+0xf4>)
34007b64:	607b      	str	r3, [r7, #4]
      break;
34007b66:	e041      	b.n	34007bec <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
34007b68:	4b26      	ldr	r3, [pc, #152]	@ (34007c04 <HAL_RCC_GetCpuClockFreq+0xf8>)
34007b6a:	607b      	str	r3, [r7, #4]
      break;
34007b6c:	e03e      	b.n	34007bec <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
34007b6e:	f7fe fde1 	bl	34006734 <LL_RCC_IC1_GetDivider>
34007b72:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
34007b74:	f7fe fdd0 	bl	34006718 <LL_RCC_IC1_GetSource>
34007b78:	4603      	mov	r3, r0
34007b7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007b7e:	d029      	beq.n	34007bd4 <HAL_RCC_GetCpuClockFreq+0xc8>
34007b80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007b84:	d82f      	bhi.n	34007be6 <HAL_RCC_GetCpuClockFreq+0xda>
34007b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007b8a:	d01a      	beq.n	34007bc2 <HAL_RCC_GetCpuClockFreq+0xb6>
34007b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007b90:	d829      	bhi.n	34007be6 <HAL_RCC_GetCpuClockFreq+0xda>
34007b92:	2b00      	cmp	r3, #0
34007b94:	d003      	beq.n	34007b9e <HAL_RCC_GetCpuClockFreq+0x92>
34007b96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007b9a:	d009      	beq.n	34007bb0 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
34007b9c:	e023      	b.n	34007be6 <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007b9e:	f009 f813 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34007ba2:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007ba4:	687a      	ldr	r2, [r7, #4]
34007ba6:	683b      	ldr	r3, [r7, #0]
34007ba8:	fbb2 f3f3 	udiv	r3, r2, r3
34007bac:	607b      	str	r3, [r7, #4]
          break;
34007bae:	e01b      	b.n	34007be8 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007bb0:	f009 f850 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34007bb4:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007bb6:	687a      	ldr	r2, [r7, #4]
34007bb8:	683b      	ldr	r3, [r7, #0]
34007bba:	fbb2 f3f3 	udiv	r3, r2, r3
34007bbe:	607b      	str	r3, [r7, #4]
          break;
34007bc0:	e012      	b.n	34007be8 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007bc2:	f009 f88d 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34007bc6:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007bc8:	687a      	ldr	r2, [r7, #4]
34007bca:	683b      	ldr	r3, [r7, #0]
34007bcc:	fbb2 f3f3 	udiv	r3, r2, r3
34007bd0:	607b      	str	r3, [r7, #4]
          break;
34007bd2:	e009      	b.n	34007be8 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007bd4:	f009 f8ca 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34007bd8:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007bda:	687a      	ldr	r2, [r7, #4]
34007bdc:	683b      	ldr	r3, [r7, #0]
34007bde:	fbb2 f3f3 	udiv	r3, r2, r3
34007be2:	607b      	str	r3, [r7, #4]
          break;
34007be4:	e000      	b.n	34007be8 <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
34007be6:	bf00      	nop
      break;
34007be8:	e000      	b.n	34007bec <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
34007bea:	bf00      	nop
  }

  return frequency;
34007bec:	687b      	ldr	r3, [r7, #4]
}
34007bee:	4618      	mov	r0, r3
34007bf0:	3708      	adds	r7, #8
34007bf2:	46bd      	mov	sp, r7
34007bf4:	bd80      	pop	{r7, pc}
34007bf6:	bf00      	nop
34007bf8:	03d09000 	.word	0x03d09000
34007bfc:	003d0900 	.word	0x003d0900
34007c00:	00f42400 	.word	0x00f42400
34007c04:	02dc6c00 	.word	0x02dc6c00

34007c08 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34007c08:	b580      	push	{r7, lr}
34007c0a:	b082      	sub	sp, #8
34007c0c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34007c0e:	2300      	movs	r3, #0
34007c10:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
34007c12:	f7fe fc8d 	bl	34006530 <LL_RCC_GetSysClkSource>
34007c16:	4603      	mov	r3, r0
34007c18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007c1c:	d025      	beq.n	34007c6a <HAL_RCC_GetSysClockFreq+0x62>
34007c1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007c22:	d860      	bhi.n	34007ce6 <HAL_RCC_GetSysClockFreq+0xde>
34007c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007c28:	d01c      	beq.n	34007c64 <HAL_RCC_GetSysClockFreq+0x5c>
34007c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007c2e:	d85a      	bhi.n	34007ce6 <HAL_RCC_GetSysClockFreq+0xde>
34007c30:	2b00      	cmp	r3, #0
34007c32:	d003      	beq.n	34007c3c <HAL_RCC_GetSysClockFreq+0x34>
34007c34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007c38:	d009      	beq.n	34007c4e <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34007c3a:	e054      	b.n	34007ce6 <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007c3c:	f7fe fba0 	bl	34006380 <LL_RCC_HSI_GetDivider>
34007c40:	4603      	mov	r3, r0
34007c42:	09db      	lsrs	r3, r3, #7
34007c44:	4a2b      	ldr	r2, [pc, #172]	@ (34007cf4 <HAL_RCC_GetSysClockFreq+0xec>)
34007c46:	fa22 f303 	lsr.w	r3, r2, r3
34007c4a:	607b      	str	r3, [r7, #4]
      break;
34007c4c:	e04c      	b.n	34007ce8 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34007c4e:	f7fe fbff 	bl	34006450 <LL_RCC_MSI_GetFrequency>
34007c52:	4603      	mov	r3, r0
34007c54:	2b00      	cmp	r3, #0
34007c56:	d102      	bne.n	34007c5e <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
34007c58:	4b27      	ldr	r3, [pc, #156]	@ (34007cf8 <HAL_RCC_GetSysClockFreq+0xf0>)
34007c5a:	607b      	str	r3, [r7, #4]
      break;
34007c5c:	e044      	b.n	34007ce8 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
34007c5e:	4b27      	ldr	r3, [pc, #156]	@ (34007cfc <HAL_RCC_GetSysClockFreq+0xf4>)
34007c60:	607b      	str	r3, [r7, #4]
      break;
34007c62:	e041      	b.n	34007ce8 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
34007c64:	4b26      	ldr	r3, [pc, #152]	@ (34007d00 <HAL_RCC_GetSysClockFreq+0xf8>)
34007c66:	607b      	str	r3, [r7, #4]
      break;
34007c68:	e03e      	b.n	34007ce8 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
34007c6a:	f7fe fd81 	bl	34006770 <LL_RCC_IC2_GetDivider>
34007c6e:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34007c70:	f7fe fd70 	bl	34006754 <LL_RCC_IC2_GetSource>
34007c74:	4603      	mov	r3, r0
34007c76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007c7a:	d029      	beq.n	34007cd0 <HAL_RCC_GetSysClockFreq+0xc8>
34007c7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007c80:	d82f      	bhi.n	34007ce2 <HAL_RCC_GetSysClockFreq+0xda>
34007c82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007c86:	d01a      	beq.n	34007cbe <HAL_RCC_GetSysClockFreq+0xb6>
34007c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007c8c:	d829      	bhi.n	34007ce2 <HAL_RCC_GetSysClockFreq+0xda>
34007c8e:	2b00      	cmp	r3, #0
34007c90:	d003      	beq.n	34007c9a <HAL_RCC_GetSysClockFreq+0x92>
34007c92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007c96:	d009      	beq.n	34007cac <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34007c98:	e023      	b.n	34007ce2 <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007c9a:	f008 ff95 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34007c9e:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007ca0:	687a      	ldr	r2, [r7, #4]
34007ca2:	683b      	ldr	r3, [r7, #0]
34007ca4:	fbb2 f3f3 	udiv	r3, r2, r3
34007ca8:	607b      	str	r3, [r7, #4]
          break;
34007caa:	e01b      	b.n	34007ce4 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007cac:	f008 ffd2 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34007cb0:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007cb2:	687a      	ldr	r2, [r7, #4]
34007cb4:	683b      	ldr	r3, [r7, #0]
34007cb6:	fbb2 f3f3 	udiv	r3, r2, r3
34007cba:	607b      	str	r3, [r7, #4]
          break;
34007cbc:	e012      	b.n	34007ce4 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007cbe:	f009 f80f 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34007cc2:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007cc4:	687a      	ldr	r2, [r7, #4]
34007cc6:	683b      	ldr	r3, [r7, #0]
34007cc8:	fbb2 f3f3 	udiv	r3, r2, r3
34007ccc:	607b      	str	r3, [r7, #4]
          break;
34007cce:	e009      	b.n	34007ce4 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007cd0:	f009 f84c 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34007cd4:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007cd6:	687a      	ldr	r2, [r7, #4]
34007cd8:	683b      	ldr	r3, [r7, #0]
34007cda:	fbb2 f3f3 	udiv	r3, r2, r3
34007cde:	607b      	str	r3, [r7, #4]
          break;
34007ce0:	e000      	b.n	34007ce4 <HAL_RCC_GetSysClockFreq+0xdc>
          break;
34007ce2:	bf00      	nop
      break;
34007ce4:	e000      	b.n	34007ce8 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
34007ce6:	bf00      	nop
  }

  return frequency;
34007ce8:	687b      	ldr	r3, [r7, #4]
}
34007cea:	4618      	mov	r0, r3
34007cec:	3708      	adds	r7, #8
34007cee:	46bd      	mov	sp, r7
34007cf0:	bd80      	pop	{r7, pc}
34007cf2:	bf00      	nop
34007cf4:	03d09000 	.word	0x03d09000
34007cf8:	003d0900 	.word	0x003d0900
34007cfc:	00f42400 	.word	0x00f42400
34007d00:	02dc6c00 	.word	0x02dc6c00

34007d04 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34007d04:	b580      	push	{r7, lr}
34007d06:	b088      	sub	sp, #32
34007d08:	af00      	add	r7, sp, #0
34007d0a:	6078      	str	r0, [r7, #4]
34007d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
34007d0e:	2300      	movs	r3, #0
34007d10:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34007d12:	687b      	ldr	r3, [r7, #4]
34007d14:	011a      	lsls	r2, r3, #4
34007d16:	4b9a      	ldr	r3, [pc, #616]	@ (34007f80 <RCC_PLL_Config+0x27c>)
34007d18:	4413      	add	r3, r2
34007d1a:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34007d1c:	687b      	ldr	r3, [r7, #4]
34007d1e:	011a      	lsls	r2, r3, #4
34007d20:	4b98      	ldr	r3, [pc, #608]	@ (34007f84 <RCC_PLL_Config+0x280>)
34007d22:	4413      	add	r3, r2
34007d24:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34007d26:	687b      	ldr	r3, [r7, #4]
34007d28:	011a      	lsls	r2, r3, #4
34007d2a:	4b97      	ldr	r3, [pc, #604]	@ (34007f88 <RCC_PLL_Config+0x284>)
34007d2c:	4413      	add	r3, r2
34007d2e:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
34007d30:	683b      	ldr	r3, [r7, #0]
34007d32:	681b      	ldr	r3, [r3, #0]
34007d34:	2b02      	cmp	r3, #2
34007d36:	f040 80e9 	bne.w	34007f0c <RCC_PLL_Config+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34007d3a:	683b      	ldr	r3, [r7, #0]
34007d3c:	685b      	ldr	r3, [r3, #4]
34007d3e:	2b00      	cmp	r3, #0
34007d40:	d013      	beq.n	34007d6a <RCC_PLL_Config+0x66>
34007d42:	683b      	ldr	r3, [r7, #0]
34007d44:	685b      	ldr	r3, [r3, #4]
34007d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007d4a:	d00e      	beq.n	34007d6a <RCC_PLL_Config+0x66>
34007d4c:	683b      	ldr	r3, [r7, #0]
34007d4e:	685b      	ldr	r3, [r3, #4]
34007d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007d54:	d009      	beq.n	34007d6a <RCC_PLL_Config+0x66>
34007d56:	683b      	ldr	r3, [r7, #0]
34007d58:	685b      	ldr	r3, [r3, #4]
34007d5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007d5e:	d004      	beq.n	34007d6a <RCC_PLL_Config+0x66>
34007d60:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34007d64:	4889      	ldr	r0, [pc, #548]	@ (34007f8c <RCC_PLL_Config+0x288>)
34007d66:	f7f9 ff9d 	bl	34001ca4 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
34007d6a:	683b      	ldr	r3, [r7, #0]
34007d6c:	68db      	ldr	r3, [r3, #12]
34007d6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34007d72:	d304      	bcc.n	34007d7e <RCC_PLL_Config+0x7a>
34007d74:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34007d78:	4884      	ldr	r0, [pc, #528]	@ (34007f8c <RCC_PLL_Config+0x288>)
34007d7a:	f7f9 ff93 	bl	34001ca4 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
34007d7e:	683b      	ldr	r3, [r7, #0]
34007d80:	689b      	ldr	r3, [r3, #8]
34007d82:	2b00      	cmp	r3, #0
34007d84:	d003      	beq.n	34007d8e <RCC_PLL_Config+0x8a>
34007d86:	683b      	ldr	r3, [r7, #0]
34007d88:	689b      	ldr	r3, [r3, #8]
34007d8a:	2b3f      	cmp	r3, #63	@ 0x3f
34007d8c:	d904      	bls.n	34007d98 <RCC_PLL_Config+0x94>
34007d8e:	f240 71fc 	movw	r1, #2044	@ 0x7fc
34007d92:	487e      	ldr	r0, [pc, #504]	@ (34007f8c <RCC_PLL_Config+0x288>)
34007d94:	f7f9 ff86 	bl	34001ca4 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
34007d98:	683b      	ldr	r3, [r7, #0]
34007d9a:	691b      	ldr	r3, [r3, #16]
34007d9c:	2b09      	cmp	r3, #9
34007d9e:	d905      	bls.n	34007dac <RCC_PLL_Config+0xa8>
34007da0:	683b      	ldr	r3, [r7, #0]
34007da2:	691b      	ldr	r3, [r3, #16]
34007da4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
34007da8:	4293      	cmp	r3, r2
34007daa:	d904      	bls.n	34007db6 <RCC_PLL_Config+0xb2>
34007dac:	f240 71fd 	movw	r1, #2045	@ 0x7fd
34007db0:	4876      	ldr	r0, [pc, #472]	@ (34007f8c <RCC_PLL_Config+0x288>)
34007db2:	f7f9 ff77 	bl	34001ca4 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34007db6:	683b      	ldr	r3, [r7, #0]
34007db8:	695b      	ldr	r3, [r3, #20]
34007dba:	2b00      	cmp	r3, #0
34007dbc:	d003      	beq.n	34007dc6 <RCC_PLL_Config+0xc2>
34007dbe:	683b      	ldr	r3, [r7, #0]
34007dc0:	695b      	ldr	r3, [r3, #20]
34007dc2:	2b07      	cmp	r3, #7
34007dc4:	d904      	bls.n	34007dd0 <RCC_PLL_Config+0xcc>
34007dc6:	f240 71fe 	movw	r1, #2046	@ 0x7fe
34007dca:	4870      	ldr	r0, [pc, #448]	@ (34007f8c <RCC_PLL_Config+0x288>)
34007dcc:	f7f9 ff6a 	bl	34001ca4 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34007dd0:	683b      	ldr	r3, [r7, #0]
34007dd2:	699b      	ldr	r3, [r3, #24]
34007dd4:	2b00      	cmp	r3, #0
34007dd6:	d003      	beq.n	34007de0 <RCC_PLL_Config+0xdc>
34007dd8:	683b      	ldr	r3, [r7, #0]
34007dda:	699b      	ldr	r3, [r3, #24]
34007ddc:	2b07      	cmp	r3, #7
34007dde:	d904      	bls.n	34007dea <RCC_PLL_Config+0xe6>
34007de0:	f240 71ff 	movw	r1, #2047	@ 0x7ff
34007de4:	4869      	ldr	r0, [pc, #420]	@ (34007f8c <RCC_PLL_Config+0x288>)
34007de6:	f7f9 ff5d 	bl	34001ca4 <assert_failed>

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34007dea:	4a69      	ldr	r2, [pc, #420]	@ (34007f90 <RCC_PLL_Config+0x28c>)
34007dec:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007df0:	687b      	ldr	r3, [r7, #4]
34007df2:	fa01 f303 	lsl.w	r3, r1, r3
34007df6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34007dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007dfc:	f7fb ff74 	bl	34003ce8 <HAL_GetTick>
34007e00:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007e02:	e008      	b.n	34007e16 <RCC_PLL_Config+0x112>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007e04:	f7fb ff70 	bl	34003ce8 <HAL_GetTick>
34007e08:	4602      	mov	r2, r0
34007e0a:	68fb      	ldr	r3, [r7, #12]
34007e0c:	1ad3      	subs	r3, r2, r3
34007e0e:	2b01      	cmp	r3, #1
34007e10:	d901      	bls.n	34007e16 <RCC_PLL_Config+0x112>
      {
        return HAL_TIMEOUT;
34007e12:	2303      	movs	r3, #3
34007e14:	e114      	b.n	34008040 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007e16:	4b5e      	ldr	r3, [pc, #376]	@ (34007f90 <RCC_PLL_Config+0x28c>)
34007e18:	685a      	ldr	r2, [r3, #4]
34007e1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007e1e:	687b      	ldr	r3, [r7, #4]
34007e20:	fa01 f303 	lsl.w	r3, r1, r3
34007e24:	401a      	ands	r2, r3
34007e26:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007e2a:	687b      	ldr	r3, [r7, #4]
34007e2c:	fa01 f303 	lsl.w	r3, r1, r3
34007e30:	429a      	cmp	r2, r3
34007e32:	d0e7      	beq.n	34007e04 <RCC_PLL_Config+0x100>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34007e34:	693b      	ldr	r3, [r7, #16]
34007e36:	681b      	ldr	r3, [r3, #0]
34007e38:	f043 0204 	orr.w	r2, r3, #4
34007e3c:	693b      	ldr	r3, [r7, #16]
34007e3e:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34007e40:	69bb      	ldr	r3, [r7, #24]
34007e42:	681b      	ldr	r3, [r3, #0]
34007e44:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34007e48:	69bb      	ldr	r3, [r7, #24]
34007e4a:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34007e4c:	69bb      	ldr	r3, [r7, #24]
34007e4e:	681a      	ldr	r2, [r3, #0]
34007e50:	4b50      	ldr	r3, [pc, #320]	@ (34007f94 <RCC_PLL_Config+0x290>)
34007e52:	4013      	ands	r3, r2
34007e54:	683a      	ldr	r2, [r7, #0]
34007e56:	6851      	ldr	r1, [r2, #4]
34007e58:	683a      	ldr	r2, [r7, #0]
34007e5a:	6892      	ldr	r2, [r2, #8]
34007e5c:	0512      	lsls	r2, r2, #20
34007e5e:	4311      	orrs	r1, r2
34007e60:	683a      	ldr	r2, [r7, #0]
34007e62:	6912      	ldr	r2, [r2, #16]
34007e64:	0212      	lsls	r2, r2, #8
34007e66:	430a      	orrs	r2, r1
34007e68:	431a      	orrs	r2, r3
34007e6a:	69bb      	ldr	r3, [r7, #24]
34007e6c:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34007e6e:	693b      	ldr	r3, [r7, #16]
34007e70:	681b      	ldr	r3, [r3, #0]
34007e72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34007e76:	683b      	ldr	r3, [r7, #0]
34007e78:	695b      	ldr	r3, [r3, #20]
34007e7a:	06d9      	lsls	r1, r3, #27
34007e7c:	683b      	ldr	r3, [r7, #0]
34007e7e:	699b      	ldr	r3, [r3, #24]
34007e80:	061b      	lsls	r3, r3, #24
34007e82:	430b      	orrs	r3, r1
34007e84:	431a      	orrs	r2, r3
34007e86:	693b      	ldr	r3, [r7, #16]
34007e88:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34007e8a:	697b      	ldr	r3, [r7, #20]
34007e8c:	681b      	ldr	r3, [r3, #0]
34007e8e:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34007e92:	683b      	ldr	r3, [r7, #0]
34007e94:	68db      	ldr	r3, [r3, #12]
34007e96:	431a      	orrs	r2, r3
34007e98:	697b      	ldr	r3, [r7, #20]
34007e9a:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34007e9c:	693b      	ldr	r3, [r7, #16]
34007e9e:	681b      	ldr	r3, [r3, #0]
34007ea0:	f023 0208 	bic.w	r2, r3, #8
34007ea4:	693b      	ldr	r3, [r7, #16]
34007ea6:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
34007ea8:	683b      	ldr	r3, [r7, #0]
34007eaa:	68db      	ldr	r3, [r3, #12]
34007eac:	2b00      	cmp	r3, #0
34007eae:	d005      	beq.n	34007ebc <RCC_PLL_Config+0x1b8>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34007eb0:	693b      	ldr	r3, [r7, #16]
34007eb2:	681b      	ldr	r3, [r3, #0]
34007eb4:	f043 020a 	orr.w	r2, r3, #10
34007eb8:	693b      	ldr	r3, [r7, #16]
34007eba:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34007ebc:	693b      	ldr	r3, [r7, #16]
34007ebe:	681b      	ldr	r3, [r3, #0]
34007ec0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34007ec4:	f043 0301 	orr.w	r3, r3, #1
34007ec8:	693a      	ldr	r2, [r7, #16]
34007eca:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34007ecc:	4a30      	ldr	r2, [pc, #192]	@ (34007f90 <RCC_PLL_Config+0x28c>)
34007ece:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007ed2:	687b      	ldr	r3, [r7, #4]
34007ed4:	fa01 f303 	lsl.w	r3, r1, r3
34007ed8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007edc:	f7fb ff04 	bl	34003ce8 <HAL_GetTick>
34007ee0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34007ee2:	e008      	b.n	34007ef6 <RCC_PLL_Config+0x1f2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007ee4:	f7fb ff00 	bl	34003ce8 <HAL_GetTick>
34007ee8:	4602      	mov	r2, r0
34007eea:	68fb      	ldr	r3, [r7, #12]
34007eec:	1ad3      	subs	r3, r2, r3
34007eee:	2b01      	cmp	r3, #1
34007ef0:	d901      	bls.n	34007ef6 <RCC_PLL_Config+0x1f2>
      {
        return HAL_TIMEOUT;
34007ef2:	2303      	movs	r3, #3
34007ef4:	e0a4      	b.n	34008040 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34007ef6:	4b26      	ldr	r3, [pc, #152]	@ (34007f90 <RCC_PLL_Config+0x28c>)
34007ef8:	685a      	ldr	r2, [r3, #4]
34007efa:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007efe:	687b      	ldr	r3, [r7, #4]
34007f00:	fa01 f303 	lsl.w	r3, r1, r3
34007f04:	4013      	ands	r3, r2
34007f06:	2b00      	cmp	r3, #0
34007f08:	d0ec      	beq.n	34007ee4 <RCC_PLL_Config+0x1e0>
34007f0a:	e098      	b.n	3400803e <RCC_PLL_Config+0x33a>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34007f0c:	683b      	ldr	r3, [r7, #0]
34007f0e:	681b      	ldr	r3, [r3, #0]
34007f10:	2b03      	cmp	r3, #3
34007f12:	d15f      	bne.n	34007fd4 <RCC_PLL_Config+0x2d0>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34007f14:	683b      	ldr	r3, [r7, #0]
34007f16:	685b      	ldr	r3, [r3, #4]
34007f18:	2b00      	cmp	r3, #0
34007f1a:	d013      	beq.n	34007f44 <RCC_PLL_Config+0x240>
34007f1c:	683b      	ldr	r3, [r7, #0]
34007f1e:	685b      	ldr	r3, [r3, #4]
34007f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007f24:	d00e      	beq.n	34007f44 <RCC_PLL_Config+0x240>
34007f26:	683b      	ldr	r3, [r7, #0]
34007f28:	685b      	ldr	r3, [r3, #4]
34007f2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007f2e:	d009      	beq.n	34007f44 <RCC_PLL_Config+0x240>
34007f30:	683b      	ldr	r3, [r7, #0]
34007f32:	685b      	ldr	r3, [r3, #4]
34007f34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007f38:	d004      	beq.n	34007f44 <RCC_PLL_Config+0x240>
34007f3a:	f640 013f 	movw	r1, #2111	@ 0x83f
34007f3e:	4813      	ldr	r0, [pc, #76]	@ (34007f8c <RCC_PLL_Config+0x288>)
34007f40:	f7f9 feb0 	bl	34001ca4 <assert_failed>

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34007f44:	683b      	ldr	r3, [r7, #0]
34007f46:	685b      	ldr	r3, [r3, #4]
34007f48:	4618      	mov	r0, r3
34007f4a:	f000 f925 	bl	34008198 <RCC_PLL_Source_IsReady>
34007f4e:	4603      	mov	r3, r0
34007f50:	2b01      	cmp	r3, #1
34007f52:	d13c      	bne.n	34007fce <RCC_PLL_Config+0x2ca>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34007f54:	4a0e      	ldr	r2, [pc, #56]	@ (34007f90 <RCC_PLL_Config+0x28c>)
34007f56:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007f5a:	687b      	ldr	r3, [r7, #4]
34007f5c:	fa01 f303 	lsl.w	r3, r1, r3
34007f60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34007f64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34007f66:	f7fb febf 	bl	34003ce8 <HAL_GetTick>
34007f6a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007f6c:	e014      	b.n	34007f98 <RCC_PLL_Config+0x294>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007f6e:	f7fb febb 	bl	34003ce8 <HAL_GetTick>
34007f72:	4602      	mov	r2, r0
34007f74:	68fb      	ldr	r3, [r7, #12]
34007f76:	1ad3      	subs	r3, r2, r3
34007f78:	2b01      	cmp	r3, #1
34007f7a:	d90d      	bls.n	34007f98 <RCC_PLL_Config+0x294>
        {
          return HAL_TIMEOUT;
34007f7c:	2303      	movs	r3, #3
34007f7e:	e05f      	b.n	34008040 <RCC_PLL_Config+0x33c>
34007f80:	56028080 	.word	0x56028080
34007f84:	56028084 	.word	0x56028084
34007f88:	56028088 	.word	0x56028088
34007f8c:	3401e868 	.word	0x3401e868
34007f90:	56028000 	.word	0x56028000
34007f94:	8c0000ff 	.word	0x8c0000ff
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007f98:	4b2b      	ldr	r3, [pc, #172]	@ (34008048 <RCC_PLL_Config+0x344>)
34007f9a:	685a      	ldr	r2, [r3, #4]
34007f9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007fa0:	687b      	ldr	r3, [r7, #4]
34007fa2:	fa01 f303 	lsl.w	r3, r1, r3
34007fa6:	401a      	ands	r2, r3
34007fa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007fac:	687b      	ldr	r3, [r7, #4]
34007fae:	fa01 f303 	lsl.w	r3, r1, r3
34007fb2:	429a      	cmp	r2, r3
34007fb4:	d0db      	beq.n	34007f6e <RCC_PLL_Config+0x26a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34007fb6:	69bb      	ldr	r3, [r7, #24]
34007fb8:	681b      	ldr	r3, [r3, #0]
34007fba:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
34007fbe:	683b      	ldr	r3, [r7, #0]
34007fc0:	685b      	ldr	r3, [r3, #4]
34007fc2:	4313      	orrs	r3, r2
34007fc4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34007fc8:	69bb      	ldr	r3, [r7, #24]
34007fca:	601a      	str	r2, [r3, #0]
34007fcc:	e037      	b.n	3400803e <RCC_PLL_Config+0x33a>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
34007fce:	2301      	movs	r3, #1
34007fd0:	77fb      	strb	r3, [r7, #31]
34007fd2:	e034      	b.n	3400803e <RCC_PLL_Config+0x33a>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34007fd4:	683b      	ldr	r3, [r7, #0]
34007fd6:	681b      	ldr	r3, [r3, #0]
34007fd8:	2b01      	cmp	r3, #1
34007fda:	d130      	bne.n	3400803e <RCC_PLL_Config+0x33a>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34007fdc:	693b      	ldr	r3, [r7, #16]
34007fde:	681b      	ldr	r3, [r3, #0]
34007fe0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34007fe4:	693b      	ldr	r3, [r7, #16]
34007fe6:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34007fe8:	4a17      	ldr	r2, [pc, #92]	@ (34008048 <RCC_PLL_Config+0x344>)
34007fea:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007fee:	687b      	ldr	r3, [r7, #4]
34007ff0:	fa01 f303 	lsl.w	r3, r1, r3
34007ff4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34007ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007ffa:	f7fb fe75 	bl	34003ce8 <HAL_GetTick>
34007ffe:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34008000:	e008      	b.n	34008014 <RCC_PLL_Config+0x310>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34008002:	f7fb fe71 	bl	34003ce8 <HAL_GetTick>
34008006:	4602      	mov	r2, r0
34008008:	68fb      	ldr	r3, [r7, #12]
3400800a:	1ad3      	subs	r3, r2, r3
3400800c:	2b01      	cmp	r3, #1
3400800e:	d901      	bls.n	34008014 <RCC_PLL_Config+0x310>
      {
        return HAL_TIMEOUT;
34008010:	2303      	movs	r3, #3
34008012:	e015      	b.n	34008040 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34008014:	4b0c      	ldr	r3, [pc, #48]	@ (34008048 <RCC_PLL_Config+0x344>)
34008016:	685a      	ldr	r2, [r3, #4]
34008018:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400801c:	687b      	ldr	r3, [r7, #4]
3400801e:	fa01 f303 	lsl.w	r3, r1, r3
34008022:	401a      	ands	r2, r3
34008024:	f44f 7180 	mov.w	r1, #256	@ 0x100
34008028:	687b      	ldr	r3, [r7, #4]
3400802a:	fa01 f303 	lsl.w	r3, r1, r3
3400802e:	429a      	cmp	r2, r3
34008030:	d0e7      	beq.n	34008002 <RCC_PLL_Config+0x2fe>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34008032:	69bb      	ldr	r3, [r7, #24]
34008034:	681b      	ldr	r3, [r3, #0]
34008036:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3400803a:	69bb      	ldr	r3, [r7, #24]
3400803c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
3400803e:	7ffb      	ldrb	r3, [r7, #31]
}
34008040:	4618      	mov	r0, r3
34008042:	3720      	adds	r7, #32
34008044:	46bd      	mov	sp, r7
34008046:	bd80      	pop	{r7, pc}
34008048:	56028000 	.word	0x56028000

3400804c <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
3400804c:	b580      	push	{r7, lr}
3400804e:	b084      	sub	sp, #16
34008050:	af00      	add	r7, sp, #0
34008052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
34008054:	2300      	movs	r3, #0
34008056:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34008058:	4a11      	ldr	r2, [pc, #68]	@ (340080a0 <RCC_PLL_Enable+0x54>)
3400805a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400805e:	687b      	ldr	r3, [r7, #4]
34008060:	fa01 f303 	lsl.w	r3, r1, r3
34008064:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
34008068:	f7fb fe3e 	bl	34003ce8 <HAL_GetTick>
3400806c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3400806e:	e008      	b.n	34008082 <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34008070:	f7fb fe3a 	bl	34003ce8 <HAL_GetTick>
34008074:	4602      	mov	r2, r0
34008076:	68bb      	ldr	r3, [r7, #8]
34008078:	1ad3      	subs	r3, r2, r3
3400807a:	2b01      	cmp	r3, #1
3400807c:	d901      	bls.n	34008082 <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
3400807e:	2303      	movs	r3, #3
34008080:	e00a      	b.n	34008098 <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34008082:	4b07      	ldr	r3, [pc, #28]	@ (340080a0 <RCC_PLL_Enable+0x54>)
34008084:	685a      	ldr	r2, [r3, #4]
34008086:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400808a:	687b      	ldr	r3, [r7, #4]
3400808c:	fa01 f303 	lsl.w	r3, r1, r3
34008090:	4013      	ands	r3, r2
34008092:	2b00      	cmp	r3, #0
34008094:	d0ec      	beq.n	34008070 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
34008096:	7bfb      	ldrb	r3, [r7, #15]
}
34008098:	4618      	mov	r0, r3
3400809a:	3710      	adds	r7, #16
3400809c:	46bd      	mov	sp, r7
3400809e:	bd80      	pop	{r7, pc}
340080a0:	56028000 	.word	0x56028000

340080a4 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
340080a4:	b480      	push	{r7}
340080a6:	b089      	sub	sp, #36	@ 0x24
340080a8:	af00      	add	r7, sp, #0
340080aa:	6078      	str	r0, [r7, #4]
340080ac:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
340080ae:	2300      	movs	r3, #0
340080b0:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340080b2:	687b      	ldr	r3, [r7, #4]
340080b4:	011a      	lsls	r2, r3, #4
340080b6:	4b34      	ldr	r3, [pc, #208]	@ (34008188 <RCC_PLL_IsNewConfig+0xe4>)
340080b8:	4413      	add	r3, r2
340080ba:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
340080bc:	687b      	ldr	r3, [r7, #4]
340080be:	011a      	lsls	r2, r3, #4
340080c0:	4b32      	ldr	r3, [pc, #200]	@ (3400818c <RCC_PLL_IsNewConfig+0xe8>)
340080c2:	4413      	add	r3, r2
340080c4:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
340080c6:	687b      	ldr	r3, [r7, #4]
340080c8:	011a      	lsls	r2, r3, #4
340080ca:	4b31      	ldr	r3, [pc, #196]	@ (34008190 <RCC_PLL_IsNewConfig+0xec>)
340080cc:	4413      	add	r3, r2
340080ce:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
340080d0:	697b      	ldr	r3, [r7, #20]
340080d2:	681b      	ldr	r3, [r3, #0]
340080d4:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
340080d8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
340080dc:	683a      	ldr	r2, [r7, #0]
340080de:	6851      	ldr	r1, [r2, #4]
340080e0:	683a      	ldr	r2, [r7, #0]
340080e2:	6892      	ldr	r2, [r2, #8]
340080e4:	0512      	lsls	r2, r2, #20
340080e6:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
340080e8:	683a      	ldr	r2, [r7, #0]
340080ea:	6912      	ldr	r2, [r2, #16]
340080ec:	0212      	lsls	r2, r2, #8
340080ee:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
340080f0:	4293      	cmp	r3, r2
340080f2:	d002      	beq.n	340080fa <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
340080f4:	2301      	movs	r3, #1
340080f6:	61fb      	str	r3, [r7, #28]
340080f8:	e03e      	b.n	34008178 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
340080fa:	693b      	ldr	r3, [r7, #16]
340080fc:	681b      	ldr	r3, [r3, #0]
340080fe:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
34008102:	683b      	ldr	r3, [r7, #0]
34008104:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34008106:	429a      	cmp	r2, r3
34008108:	d002      	beq.n	34008110 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
3400810a:	2301      	movs	r3, #1
3400810c:	61fb      	str	r3, [r7, #28]
3400810e:	e033      	b.n	34008178 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34008110:	68fb      	ldr	r3, [r7, #12]
34008112:	681b      	ldr	r3, [r3, #0]
34008114:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34008118:	683b      	ldr	r3, [r7, #0]
3400811a:	695b      	ldr	r3, [r3, #20]
3400811c:	06d9      	lsls	r1, r3, #27
3400811e:	683b      	ldr	r3, [r7, #0]
34008120:	699b      	ldr	r3, [r3, #24]
34008122:	061b      	lsls	r3, r3, #24
34008124:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34008126:	429a      	cmp	r2, r3
34008128:	d002      	beq.n	34008130 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
3400812a:	2301      	movs	r3, #1
3400812c:	61fb      	str	r3, [r7, #28]
3400812e:	e023      	b.n	34008178 <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34008130:	4b18      	ldr	r3, [pc, #96]	@ (34008194 <RCC_PLL_IsNewConfig+0xf0>)
34008132:	685a      	ldr	r2, [r3, #4]
34008134:	f44f 7180 	mov.w	r1, #256	@ 0x100
34008138:	687b      	ldr	r3, [r7, #4]
3400813a:	fa01 f303 	lsl.w	r3, r1, r3
3400813e:	401a      	ands	r2, r3
34008140:	f44f 7180 	mov.w	r1, #256	@ 0x100
34008144:	687b      	ldr	r3, [r7, #4]
34008146:	fa01 f303 	lsl.w	r3, r1, r3
3400814a:	429a      	cmp	r2, r3
3400814c:	d102      	bne.n	34008154 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
3400814e:	2302      	movs	r3, #2
34008150:	61bb      	str	r3, [r7, #24]
34008152:	e00a      	b.n	3400816a <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34008154:	697b      	ldr	r3, [r7, #20]
34008156:	681b      	ldr	r3, [r3, #0]
34008158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400815c:	2b00      	cmp	r3, #0
3400815e:	d002      	beq.n	34008166 <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
34008160:	2303      	movs	r3, #3
34008162:	61bb      	str	r3, [r7, #24]
34008164:	e001      	b.n	3400816a <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
34008166:	2301      	movs	r3, #1
34008168:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3400816a:	683b      	ldr	r3, [r7, #0]
3400816c:	681b      	ldr	r3, [r3, #0]
3400816e:	69ba      	ldr	r2, [r7, #24]
34008170:	429a      	cmp	r2, r3
34008172:	d001      	beq.n	34008178 <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
34008174:	2301      	movs	r3, #1
34008176:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
34008178:	69fb      	ldr	r3, [r7, #28]
}
3400817a:	4618      	mov	r0, r3
3400817c:	3724      	adds	r7, #36	@ 0x24
3400817e:	46bd      	mov	sp, r7
34008180:	f85d 7b04 	ldr.w	r7, [sp], #4
34008184:	4770      	bx	lr
34008186:	bf00      	nop
34008188:	56028080 	.word	0x56028080
3400818c:	56028084 	.word	0x56028084
34008190:	56028088 	.word	0x56028088
34008194:	56028000 	.word	0x56028000

34008198 <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
34008198:	b580      	push	{r7, lr}
3400819a:	b084      	sub	sp, #16
3400819c:	af00      	add	r7, sp, #0
3400819e:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
340081a0:	2301      	movs	r3, #1
340081a2:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
340081a4:	687b      	ldr	r3, [r7, #4]
340081a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340081aa:	d01b      	beq.n	340081e4 <RCC_PLL_Source_IsReady+0x4c>
340081ac:	687b      	ldr	r3, [r7, #4]
340081ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340081b2:	d81f      	bhi.n	340081f4 <RCC_PLL_Source_IsReady+0x5c>
340081b4:	687b      	ldr	r3, [r7, #4]
340081b6:	2b00      	cmp	r3, #0
340081b8:	d004      	beq.n	340081c4 <RCC_PLL_Source_IsReady+0x2c>
340081ba:	687b      	ldr	r3, [r7, #4]
340081bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340081c0:	d008      	beq.n	340081d4 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
340081c2:	e017      	b.n	340081f4 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
340081c4:	f7fe f8b6 	bl	34006334 <LL_RCC_HSI_IsReady>
340081c8:	4603      	mov	r3, r0
340081ca:	2b00      	cmp	r3, #0
340081cc:	d114      	bne.n	340081f8 <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
340081ce:	2300      	movs	r3, #0
340081d0:	60fb      	str	r3, [r7, #12]
      break;
340081d2:	e011      	b.n	340081f8 <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
340081d4:	f7fe f916 	bl	34006404 <LL_RCC_MSI_IsReady>
340081d8:	4603      	mov	r3, r0
340081da:	2b00      	cmp	r3, #0
340081dc:	d10e      	bne.n	340081fc <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
340081de:	2300      	movs	r3, #0
340081e0:	60fb      	str	r3, [r7, #12]
      break;
340081e2:	e00b      	b.n	340081fc <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
340081e4:	f7fe f876 	bl	340062d4 <LL_RCC_HSE_IsReady>
340081e8:	4603      	mov	r3, r0
340081ea:	2b00      	cmp	r3, #0
340081ec:	d108      	bne.n	34008200 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
340081ee:	2300      	movs	r3, #0
340081f0:	60fb      	str	r3, [r7, #12]
      break;
340081f2:	e005      	b.n	34008200 <RCC_PLL_Source_IsReady+0x68>
      break;
340081f4:	bf00      	nop
340081f6:	e004      	b.n	34008202 <RCC_PLL_Source_IsReady+0x6a>
      break;
340081f8:	bf00      	nop
340081fa:	e002      	b.n	34008202 <RCC_PLL_Source_IsReady+0x6a>
      break;
340081fc:	bf00      	nop
340081fe:	e000      	b.n	34008202 <RCC_PLL_Source_IsReady+0x6a>
      break;
34008200:	bf00      	nop
  }

  return ret;
34008202:	68fb      	ldr	r3, [r7, #12]
}
34008204:	4618      	mov	r0, r3
34008206:	3710      	adds	r7, #16
34008208:	46bd      	mov	sp, r7
3400820a:	bd80      	pop	{r7, pc}

3400820c <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
3400820c:	b580      	push	{r7, lr}
3400820e:	b084      	sub	sp, #16
34008210:	af00      	add	r7, sp, #0
34008212:	6078      	str	r0, [r7, #4]
34008214:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
34008216:	2301      	movs	r3, #1
34008218:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
3400821a:	687b      	ldr	r3, [r7, #4]
3400821c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008220:	d03a      	beq.n	34008298 <RCC_IC_CheckPLLSources+0x8c>
34008222:	687b      	ldr	r3, [r7, #4]
34008224:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008228:	d843      	bhi.n	340082b2 <RCC_IC_CheckPLLSources+0xa6>
3400822a:	687b      	ldr	r3, [r7, #4]
3400822c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008230:	d025      	beq.n	3400827e <RCC_IC_CheckPLLSources+0x72>
34008232:	687b      	ldr	r3, [r7, #4]
34008234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008238:	d83b      	bhi.n	340082b2 <RCC_IC_CheckPLLSources+0xa6>
3400823a:	687b      	ldr	r3, [r7, #4]
3400823c:	2b00      	cmp	r3, #0
3400823e:	d004      	beq.n	3400824a <RCC_IC_CheckPLLSources+0x3e>
34008240:	687b      	ldr	r3, [r7, #4]
34008242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008246:	d00d      	beq.n	34008264 <RCC_IC_CheckPLLSources+0x58>
34008248:	e033      	b.n	340082b2 <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3400824a:	f7fe f98d 	bl	34006568 <LL_RCC_PLL1_IsReady>
3400824e:	4603      	mov	r3, r0
34008250:	2b00      	cmp	r3, #0
34008252:	d131      	bne.n	340082b8 <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34008254:	f7fe f99c 	bl	34006590 <LL_RCC_PLL1_IsEnabledBypass>
34008258:	4603      	mov	r3, r0
3400825a:	2b00      	cmp	r3, #0
3400825c:	d12c      	bne.n	340082b8 <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
3400825e:	2300      	movs	r3, #0
34008260:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008262:	e029      	b.n	340082b8 <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34008264:	f7fe f9b6 	bl	340065d4 <LL_RCC_PLL2_IsReady>
34008268:	4603      	mov	r3, r0
3400826a:	2b00      	cmp	r3, #0
3400826c:	d126      	bne.n	340082bc <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3400826e:	f7fe f9c5 	bl	340065fc <LL_RCC_PLL2_IsEnabledBypass>
34008272:	4603      	mov	r3, r0
34008274:	2b00      	cmp	r3, #0
34008276:	d121      	bne.n	340082bc <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
34008278:	2300      	movs	r3, #0
3400827a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400827c:	e01e      	b.n	340082bc <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3400827e:	f7fe f9df 	bl	34006640 <LL_RCC_PLL3_IsReady>
34008282:	4603      	mov	r3, r0
34008284:	2b00      	cmp	r3, #0
34008286:	d11b      	bne.n	340082c0 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34008288:	f7fe f9ee 	bl	34006668 <LL_RCC_PLL3_IsEnabledBypass>
3400828c:	4603      	mov	r3, r0
3400828e:	2b00      	cmp	r3, #0
34008290:	d116      	bne.n	340082c0 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
34008292:	2300      	movs	r3, #0
34008294:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008296:	e013      	b.n	340082c0 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34008298:	f7fe fa08 	bl	340066ac <LL_RCC_PLL4_IsReady>
3400829c:	4603      	mov	r3, r0
3400829e:	2b00      	cmp	r3, #0
340082a0:	d110      	bne.n	340082c4 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
340082a2:	f7fe fa17 	bl	340066d4 <LL_RCC_PLL4_IsEnabledBypass>
340082a6:	4603      	mov	r3, r0
340082a8:	2b00      	cmp	r3, #0
340082aa:	d10b      	bne.n	340082c4 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
340082ac:	2300      	movs	r3, #0
340082ae:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
340082b0:	e008      	b.n	340082c4 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
340082b2:	2300      	movs	r3, #0
340082b4:	60fb      	str	r3, [r7, #12]
      break;
340082b6:	e006      	b.n	340082c6 <RCC_IC_CheckPLLSources+0xba>
      break;
340082b8:	bf00      	nop
340082ba:	e004      	b.n	340082c6 <RCC_IC_CheckPLLSources+0xba>
      break;
340082bc:	bf00      	nop
340082be:	e002      	b.n	340082c6 <RCC_IC_CheckPLLSources+0xba>
      break;
340082c0:	bf00      	nop
340082c2:	e000      	b.n	340082c6 <RCC_IC_CheckPLLSources+0xba>
      break;
340082c4:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
340082c6:	683b      	ldr	r3, [r7, #0]
340082c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340082cc:	d03a      	beq.n	34008344 <RCC_IC_CheckPLLSources+0x138>
340082ce:	683b      	ldr	r3, [r7, #0]
340082d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340082d4:	d843      	bhi.n	3400835e <RCC_IC_CheckPLLSources+0x152>
340082d6:	683b      	ldr	r3, [r7, #0]
340082d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340082dc:	d025      	beq.n	3400832a <RCC_IC_CheckPLLSources+0x11e>
340082de:	683b      	ldr	r3, [r7, #0]
340082e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340082e4:	d83b      	bhi.n	3400835e <RCC_IC_CheckPLLSources+0x152>
340082e6:	683b      	ldr	r3, [r7, #0]
340082e8:	2b00      	cmp	r3, #0
340082ea:	d004      	beq.n	340082f6 <RCC_IC_CheckPLLSources+0xea>
340082ec:	683b      	ldr	r3, [r7, #0]
340082ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340082f2:	d00d      	beq.n	34008310 <RCC_IC_CheckPLLSources+0x104>
340082f4:	e033      	b.n	3400835e <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
340082f6:	f7fe f937 	bl	34006568 <LL_RCC_PLL1_IsReady>
340082fa:	4603      	mov	r3, r0
340082fc:	2b00      	cmp	r3, #0
340082fe:	d131      	bne.n	34008364 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34008300:	f7fe f946 	bl	34006590 <LL_RCC_PLL1_IsEnabledBypass>
34008304:	4603      	mov	r3, r0
34008306:	2b00      	cmp	r3, #0
34008308:	d12c      	bne.n	34008364 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
3400830a:	2300      	movs	r3, #0
3400830c:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400830e:	e029      	b.n	34008364 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34008310:	f7fe f960 	bl	340065d4 <LL_RCC_PLL2_IsReady>
34008314:	4603      	mov	r3, r0
34008316:	2b00      	cmp	r3, #0
34008318:	d126      	bne.n	34008368 <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3400831a:	f7fe f96f 	bl	340065fc <LL_RCC_PLL2_IsEnabledBypass>
3400831e:	4603      	mov	r3, r0
34008320:	2b00      	cmp	r3, #0
34008322:	d121      	bne.n	34008368 <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
34008324:	2300      	movs	r3, #0
34008326:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008328:	e01e      	b.n	34008368 <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3400832a:	f7fe f989 	bl	34006640 <LL_RCC_PLL3_IsReady>
3400832e:	4603      	mov	r3, r0
34008330:	2b00      	cmp	r3, #0
34008332:	d11b      	bne.n	3400836c <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34008334:	f7fe f998 	bl	34006668 <LL_RCC_PLL3_IsEnabledBypass>
34008338:	4603      	mov	r3, r0
3400833a:	2b00      	cmp	r3, #0
3400833c:	d116      	bne.n	3400836c <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
3400833e:	2300      	movs	r3, #0
34008340:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008342:	e013      	b.n	3400836c <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34008344:	f7fe f9b2 	bl	340066ac <LL_RCC_PLL4_IsReady>
34008348:	4603      	mov	r3, r0
3400834a:	2b00      	cmp	r3, #0
3400834c:	d110      	bne.n	34008370 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3400834e:	f7fe f9c1 	bl	340066d4 <LL_RCC_PLL4_IsEnabledBypass>
34008352:	4603      	mov	r3, r0
34008354:	2b00      	cmp	r3, #0
34008356:	d10b      	bne.n	34008370 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
34008358:	2300      	movs	r3, #0
3400835a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400835c:	e008      	b.n	34008370 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
3400835e:	2300      	movs	r3, #0
34008360:	60fb      	str	r3, [r7, #12]
      break;
34008362:	e006      	b.n	34008372 <RCC_IC_CheckPLLSources+0x166>
      break;
34008364:	bf00      	nop
34008366:	e004      	b.n	34008372 <RCC_IC_CheckPLLSources+0x166>
      break;
34008368:	bf00      	nop
3400836a:	e002      	b.n	34008372 <RCC_IC_CheckPLLSources+0x166>
      break;
3400836c:	bf00      	nop
3400836e:	e000      	b.n	34008372 <RCC_IC_CheckPLLSources+0x166>
      break;
34008370:	bf00      	nop
  }

  return ret;
34008372:	68fb      	ldr	r3, [r7, #12]
}
34008374:	4618      	mov	r0, r3
34008376:	3710      	adds	r7, #16
34008378:	46bd      	mov	sp, r7
3400837a:	bd80      	pop	{r7, pc}

3400837c <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
3400837c:	b480      	push	{r7}
3400837e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34008380:	4b05      	ldr	r3, [pc, #20]	@ (34008398 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34008382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34008384:	4a04      	ldr	r2, [pc, #16]	@ (34008398 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34008386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3400838a:	6553      	str	r3, [r2, #84]	@ 0x54
}
3400838c:	bf00      	nop
3400838e:	46bd      	mov	sp, r7
34008390:	f85d 7b04 	ldr.w	r7, [sp], #4
34008394:	4770      	bx	lr
34008396:	bf00      	nop
34008398:	56028000 	.word	0x56028000

3400839c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
3400839c:	b480      	push	{r7}
3400839e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
340083a0:	4b05      	ldr	r3, [pc, #20]	@ (340083b8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
340083a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
340083a4:	4a04      	ldr	r2, [pc, #16]	@ (340083b8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
340083a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
340083aa:	6553      	str	r3, [r2, #84]	@ 0x54
}
340083ac:	bf00      	nop
340083ae:	46bd      	mov	sp, r7
340083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
340083b4:	4770      	bx	lr
340083b6:	bf00      	nop
340083b8:	56028000 	.word	0x56028000

340083bc <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
340083bc:	b480      	push	{r7}
340083be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
340083c0:	4b06      	ldr	r3, [pc, #24]	@ (340083dc <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
340083c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
340083c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340083c8:	2b40      	cmp	r3, #64	@ 0x40
340083ca:	d101      	bne.n	340083d0 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
340083cc:	2301      	movs	r3, #1
340083ce:	e000      	b.n	340083d2 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
340083d0:	2300      	movs	r3, #0
}
340083d2:	4618      	mov	r0, r3
340083d4:	46bd      	mov	sp, r7
340083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
340083da:	4770      	bx	lr
340083dc:	56028000 	.word	0x56028000

340083e0 <LL_RCC_HSE_IsReady>:
{
340083e0:	b480      	push	{r7}
340083e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340083e4:	4b06      	ldr	r3, [pc, #24]	@ (34008400 <LL_RCC_HSE_IsReady+0x20>)
340083e6:	685b      	ldr	r3, [r3, #4]
340083e8:	f003 0310 	and.w	r3, r3, #16
340083ec:	2b00      	cmp	r3, #0
340083ee:	d001      	beq.n	340083f4 <LL_RCC_HSE_IsReady+0x14>
340083f0:	2301      	movs	r3, #1
340083f2:	e000      	b.n	340083f6 <LL_RCC_HSE_IsReady+0x16>
340083f4:	2300      	movs	r3, #0
}
340083f6:	4618      	mov	r0, r3
340083f8:	46bd      	mov	sp, r7
340083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
340083fe:	4770      	bx	lr
34008400:	56028000 	.word	0x56028000

34008404 <LL_RCC_HSI_IsReady>:
{
34008404:	b480      	push	{r7}
34008406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34008408:	4b06      	ldr	r3, [pc, #24]	@ (34008424 <LL_RCC_HSI_IsReady+0x20>)
3400840a:	685b      	ldr	r3, [r3, #4]
3400840c:	f003 0308 	and.w	r3, r3, #8
34008410:	2b00      	cmp	r3, #0
34008412:	d001      	beq.n	34008418 <LL_RCC_HSI_IsReady+0x14>
34008414:	2301      	movs	r3, #1
34008416:	e000      	b.n	3400841a <LL_RCC_HSI_IsReady+0x16>
34008418:	2300      	movs	r3, #0
}
3400841a:	4618      	mov	r0, r3
3400841c:	46bd      	mov	sp, r7
3400841e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008422:	4770      	bx	lr
34008424:	56028000 	.word	0x56028000

34008428 <LL_RCC_HSI_GetDivider>:
{
34008428:	b480      	push	{r7}
3400842a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400842c:	4b04      	ldr	r3, [pc, #16]	@ (34008440 <LL_RCC_HSI_GetDivider+0x18>)
3400842e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008430:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34008434:	4618      	mov	r0, r3
34008436:	46bd      	mov	sp, r7
34008438:	f85d 7b04 	ldr.w	r7, [sp], #4
3400843c:	4770      	bx	lr
3400843e:	bf00      	nop
34008440:	56028000 	.word	0x56028000

34008444 <LL_RCC_MSI_IsReady>:
{
34008444:	b480      	push	{r7}
34008446:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34008448:	4b06      	ldr	r3, [pc, #24]	@ (34008464 <LL_RCC_MSI_IsReady+0x20>)
3400844a:	685b      	ldr	r3, [r3, #4]
3400844c:	f003 0304 	and.w	r3, r3, #4
34008450:	2b00      	cmp	r3, #0
34008452:	d001      	beq.n	34008458 <LL_RCC_MSI_IsReady+0x14>
34008454:	2301      	movs	r3, #1
34008456:	e000      	b.n	3400845a <LL_RCC_MSI_IsReady+0x16>
34008458:	2300      	movs	r3, #0
}
3400845a:	4618      	mov	r0, r3
3400845c:	46bd      	mov	sp, r7
3400845e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008462:	4770      	bx	lr
34008464:	56028000 	.word	0x56028000

34008468 <LL_RCC_MSI_GetFrequency>:
{
34008468:	b480      	push	{r7}
3400846a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3400846c:	4b04      	ldr	r3, [pc, #16]	@ (34008480 <LL_RCC_MSI_GetFrequency+0x18>)
3400846e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34008470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34008474:	4618      	mov	r0, r3
34008476:	46bd      	mov	sp, r7
34008478:	f85d 7b04 	ldr.w	r7, [sp], #4
3400847c:	4770      	bx	lr
3400847e:	bf00      	nop
34008480:	56028000 	.word	0x56028000

34008484 <LL_RCC_LSE_IsReady>:
{
34008484:	b480      	push	{r7}
34008486:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34008488:	4b06      	ldr	r3, [pc, #24]	@ (340084a4 <LL_RCC_LSE_IsReady+0x20>)
3400848a:	685b      	ldr	r3, [r3, #4]
3400848c:	f003 0302 	and.w	r3, r3, #2
34008490:	2b00      	cmp	r3, #0
34008492:	d001      	beq.n	34008498 <LL_RCC_LSE_IsReady+0x14>
34008494:	2301      	movs	r3, #1
34008496:	e000      	b.n	3400849a <LL_RCC_LSE_IsReady+0x16>
34008498:	2300      	movs	r3, #0
}
3400849a:	4618      	mov	r0, r3
3400849c:	46bd      	mov	sp, r7
3400849e:	f85d 7b04 	ldr.w	r7, [sp], #4
340084a2:	4770      	bx	lr
340084a4:	56028000 	.word	0x56028000

340084a8 <LL_RCC_LSI_IsReady>:
{
340084a8:	b480      	push	{r7}
340084aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340084ac:	4b04      	ldr	r3, [pc, #16]	@ (340084c0 <LL_RCC_LSI_IsReady+0x18>)
340084ae:	685b      	ldr	r3, [r3, #4]
340084b0:	f003 0301 	and.w	r3, r3, #1
}
340084b4:	4618      	mov	r0, r3
340084b6:	46bd      	mov	sp, r7
340084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
340084bc:	4770      	bx	lr
340084be:	bf00      	nop
340084c0:	56028000 	.word	0x56028000

340084c4 <LL_RCC_GetAHBPrescaler>:
{
340084c4:	b480      	push	{r7}
340084c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
340084c8:	4b04      	ldr	r3, [pc, #16]	@ (340084dc <LL_RCC_GetAHBPrescaler+0x18>)
340084ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340084cc:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
340084d0:	4618      	mov	r0, r3
340084d2:	46bd      	mov	sp, r7
340084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
340084d8:	4770      	bx	lr
340084da:	bf00      	nop
340084dc:	56028000 	.word	0x56028000

340084e0 <LL_RCC_GetAPB1Prescaler>:
{
340084e0:	b480      	push	{r7}
340084e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340084e4:	4b04      	ldr	r3, [pc, #16]	@ (340084f8 <LL_RCC_GetAPB1Prescaler+0x18>)
340084e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340084e8:	f003 0307 	and.w	r3, r3, #7
}
340084ec:	4618      	mov	r0, r3
340084ee:	46bd      	mov	sp, r7
340084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
340084f4:	4770      	bx	lr
340084f6:	bf00      	nop
340084f8:	56028000 	.word	0x56028000

340084fc <LL_RCC_GetAPB2Prescaler>:
{
340084fc:	b480      	push	{r7}
340084fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008500:	4b04      	ldr	r3, [pc, #16]	@ (34008514 <LL_RCC_GetAPB2Prescaler+0x18>)
34008502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008504:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34008508:	4618      	mov	r0, r3
3400850a:	46bd      	mov	sp, r7
3400850c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008510:	4770      	bx	lr
34008512:	bf00      	nop
34008514:	56028000 	.word	0x56028000

34008518 <LL_RCC_GetAPB4Prescaler>:
{
34008518:	b480      	push	{r7}
3400851a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3400851c:	4b04      	ldr	r3, [pc, #16]	@ (34008530 <LL_RCC_GetAPB4Prescaler+0x18>)
3400851e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008520:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
34008524:	4618      	mov	r0, r3
34008526:	46bd      	mov	sp, r7
34008528:	f85d 7b04 	ldr.w	r7, [sp], #4
3400852c:	4770      	bx	lr
3400852e:	bf00      	nop
34008530:	56028000 	.word	0x56028000

34008534 <LL_RCC_GetAPB5Prescaler>:
{
34008534:	b480      	push	{r7}
34008536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34008538:	4b04      	ldr	r3, [pc, #16]	@ (3400854c <LL_RCC_GetAPB5Prescaler+0x18>)
3400853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400853c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34008540:	4618      	mov	r0, r3
34008542:	46bd      	mov	sp, r7
34008544:	f85d 7b04 	ldr.w	r7, [sp], #4
34008548:	4770      	bx	lr
3400854a:	bf00      	nop
3400854c:	56028000 	.word	0x56028000

34008550 <LL_RCC_SetClockSource>:
{
34008550:	b480      	push	{r7}
34008552:	b085      	sub	sp, #20
34008554:	af00      	add	r7, sp, #0
34008556:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34008558:	687b      	ldr	r3, [r7, #4]
3400855a:	b2da      	uxtb	r2, r3
3400855c:	4b10      	ldr	r3, [pc, #64]	@ (340085a0 <LL_RCC_SetClockSource+0x50>)
3400855e:	4413      	add	r3, r2
34008560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34008562:	68fb      	ldr	r3, [r7, #12]
34008564:	681a      	ldr	r2, [r3, #0]
34008566:	687b      	ldr	r3, [r7, #4]
34008568:	0e19      	lsrs	r1, r3, #24
3400856a:	687b      	ldr	r3, [r7, #4]
3400856c:	0a1b      	lsrs	r3, r3, #8
3400856e:	f003 031f 	and.w	r3, r3, #31
34008572:	fa01 f303 	lsl.w	r3, r1, r3
34008576:	43db      	mvns	r3, r3
34008578:	401a      	ands	r2, r3
3400857a:	687b      	ldr	r3, [r7, #4]
3400857c:	0c1b      	lsrs	r3, r3, #16
3400857e:	b2d9      	uxtb	r1, r3
34008580:	687b      	ldr	r3, [r7, #4]
34008582:	0a1b      	lsrs	r3, r3, #8
34008584:	f003 031f 	and.w	r3, r3, #31
34008588:	fa01 f303 	lsl.w	r3, r1, r3
3400858c:	431a      	orrs	r2, r3
3400858e:	68fb      	ldr	r3, [r7, #12]
34008590:	601a      	str	r2, [r3, #0]
}
34008592:	bf00      	nop
34008594:	3714      	adds	r7, #20
34008596:	46bd      	mov	sp, r7
34008598:	f85d 7b04 	ldr.w	r7, [sp], #4
3400859c:	4770      	bx	lr
3400859e:	bf00      	nop
340085a0:	56028144 	.word	0x56028144

340085a4 <LL_RCC_GetADCPrescaler>:
{
340085a4:	b480      	push	{r7}
340085a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
340085a8:	4b04      	ldr	r3, [pc, #16]	@ (340085bc <LL_RCC_GetADCPrescaler+0x18>)
340085aa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340085ae:	0a1b      	lsrs	r3, r3, #8
340085b0:	b2db      	uxtb	r3, r3
}
340085b2:	4618      	mov	r0, r3
340085b4:	46bd      	mov	sp, r7
340085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
340085ba:	4770      	bx	lr
340085bc:	56028000 	.word	0x56028000

340085c0 <LL_RCC_SetADFClockSource>:
{
340085c0:	b480      	push	{r7}
340085c2:	b083      	sub	sp, #12
340085c4:	af00      	add	r7, sp, #0
340085c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
340085c8:	4b07      	ldr	r3, [pc, #28]	@ (340085e8 <LL_RCC_SetADFClockSource+0x28>)
340085ca:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340085ce:	f023 0207 	bic.w	r2, r3, #7
340085d2:	4905      	ldr	r1, [pc, #20]	@ (340085e8 <LL_RCC_SetADFClockSource+0x28>)
340085d4:	687b      	ldr	r3, [r7, #4]
340085d6:	4313      	orrs	r3, r2
340085d8:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
340085dc:	bf00      	nop
340085de:	370c      	adds	r7, #12
340085e0:	46bd      	mov	sp, r7
340085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
340085e6:	4770      	bx	lr
340085e8:	56028000 	.word	0x56028000

340085ec <LL_RCC_SetCLKPClockSource>:
{
340085ec:	b480      	push	{r7}
340085ee:	b083      	sub	sp, #12
340085f0:	af00      	add	r7, sp, #0
340085f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
340085f4:	4b07      	ldr	r3, [pc, #28]	@ (34008614 <LL_RCC_SetCLKPClockSource+0x28>)
340085f6:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340085fa:	f023 0207 	bic.w	r2, r3, #7
340085fe:	4905      	ldr	r1, [pc, #20]	@ (34008614 <LL_RCC_SetCLKPClockSource+0x28>)
34008600:	687b      	ldr	r3, [r7, #4]
34008602:	4313      	orrs	r3, r2
34008604:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008608:	bf00      	nop
3400860a:	370c      	adds	r7, #12
3400860c:	46bd      	mov	sp, r7
3400860e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008612:	4770      	bx	lr
34008614:	56028000 	.word	0x56028000

34008618 <LL_RCC_SetDCMIPPClockSource>:
{
34008618:	b480      	push	{r7}
3400861a:	b083      	sub	sp, #12
3400861c:	af00      	add	r7, sp, #0
3400861e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34008620:	4b07      	ldr	r3, [pc, #28]	@ (34008640 <LL_RCC_SetDCMIPPClockSource+0x28>)
34008622:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34008626:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
3400862a:	4905      	ldr	r1, [pc, #20]	@ (34008640 <LL_RCC_SetDCMIPPClockSource+0x28>)
3400862c:	687b      	ldr	r3, [r7, #4]
3400862e:	4313      	orrs	r3, r2
34008630:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34008634:	bf00      	nop
34008636:	370c      	adds	r7, #12
34008638:	46bd      	mov	sp, r7
3400863a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400863e:	4770      	bx	lr
34008640:	56028000 	.word	0x56028000

34008644 <LL_RCC_SetETHClockSource>:
{
34008644:	b480      	push	{r7}
34008646:	b083      	sub	sp, #12
34008648:	af00      	add	r7, sp, #0
3400864a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
3400864c:	4b07      	ldr	r3, [pc, #28]	@ (3400866c <LL_RCC_SetETHClockSource+0x28>)
3400864e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008652:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34008656:	4905      	ldr	r1, [pc, #20]	@ (3400866c <LL_RCC_SetETHClockSource+0x28>)
34008658:	687b      	ldr	r3, [r7, #4]
3400865a:	4313      	orrs	r3, r2
3400865c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34008660:	bf00      	nop
34008662:	370c      	adds	r7, #12
34008664:	46bd      	mov	sp, r7
34008666:	f85d 7b04 	ldr.w	r7, [sp], #4
3400866a:	4770      	bx	lr
3400866c:	56028000 	.word	0x56028000

34008670 <LL_RCC_SetETHPHYInterface>:
{
34008670:	b480      	push	{r7}
34008672:	b083      	sub	sp, #12
34008674:	af00      	add	r7, sp, #0
34008676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34008678:	4b07      	ldr	r3, [pc, #28]	@ (34008698 <LL_RCC_SetETHPHYInterface+0x28>)
3400867a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400867e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34008682:	4905      	ldr	r1, [pc, #20]	@ (34008698 <LL_RCC_SetETHPHYInterface+0x28>)
34008684:	687b      	ldr	r3, [r7, #4]
34008686:	4313      	orrs	r3, r2
34008688:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3400868c:	bf00      	nop
3400868e:	370c      	adds	r7, #12
34008690:	46bd      	mov	sp, r7
34008692:	f85d 7b04 	ldr.w	r7, [sp], #4
34008696:	4770      	bx	lr
34008698:	56028000 	.word	0x56028000

3400869c <LL_RCC_GetETH1PTPDivider>:
{
3400869c:	b480      	push	{r7}
3400869e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
340086a0:	4b04      	ldr	r3, [pc, #16]	@ (340086b4 <LL_RCC_GetETH1PTPDivider+0x18>)
340086a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340086a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
340086aa:	4618      	mov	r0, r3
340086ac:	46bd      	mov	sp, r7
340086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
340086b2:	4770      	bx	lr
340086b4:	56028000 	.word	0x56028000

340086b8 <LL_RCC_SetETHREFRXClockSource>:
{
340086b8:	b480      	push	{r7}
340086ba:	b083      	sub	sp, #12
340086bc:	af00      	add	r7, sp, #0
340086be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
340086c0:	4b07      	ldr	r3, [pc, #28]	@ (340086e0 <LL_RCC_SetETHREFRXClockSource+0x28>)
340086c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340086c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
340086ca:	4905      	ldr	r1, [pc, #20]	@ (340086e0 <LL_RCC_SetETHREFRXClockSource+0x28>)
340086cc:	687b      	ldr	r3, [r7, #4]
340086ce:	4313      	orrs	r3, r2
340086d0:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
340086d4:	bf00      	nop
340086d6:	370c      	adds	r7, #12
340086d8:	46bd      	mov	sp, r7
340086da:	f85d 7b04 	ldr.w	r7, [sp], #4
340086de:	4770      	bx	lr
340086e0:	56028000 	.word	0x56028000

340086e4 <LL_RCC_SetETHREFTXClockSource>:
{
340086e4:	b480      	push	{r7}
340086e6:	b083      	sub	sp, #12
340086e8:	af00      	add	r7, sp, #0
340086ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
340086ec:	4b07      	ldr	r3, [pc, #28]	@ (3400870c <LL_RCC_SetETHREFTXClockSource+0x28>)
340086ee:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340086f2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340086f6:	4905      	ldr	r1, [pc, #20]	@ (3400870c <LL_RCC_SetETHREFTXClockSource+0x28>)
340086f8:	687b      	ldr	r3, [r7, #4]
340086fa:	4313      	orrs	r3, r2
340086fc:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34008700:	bf00      	nop
34008702:	370c      	adds	r7, #12
34008704:	46bd      	mov	sp, r7
34008706:	f85d 7b04 	ldr.w	r7, [sp], #4
3400870a:	4770      	bx	lr
3400870c:	56028000 	.word	0x56028000

34008710 <LL_RCC_SetFDCANClockSource>:
{
34008710:	b480      	push	{r7}
34008712:	b083      	sub	sp, #12
34008714:	af00      	add	r7, sp, #0
34008716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34008718:	4b07      	ldr	r3, [pc, #28]	@ (34008738 <LL_RCC_SetFDCANClockSource+0x28>)
3400871a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400871e:	f023 0203 	bic.w	r2, r3, #3
34008722:	4905      	ldr	r1, [pc, #20]	@ (34008738 <LL_RCC_SetFDCANClockSource+0x28>)
34008724:	687b      	ldr	r3, [r7, #4]
34008726:	4313      	orrs	r3, r2
34008728:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3400872c:	bf00      	nop
3400872e:	370c      	adds	r7, #12
34008730:	46bd      	mov	sp, r7
34008732:	f85d 7b04 	ldr.w	r7, [sp], #4
34008736:	4770      	bx	lr
34008738:	56028000 	.word	0x56028000

3400873c <LL_RCC_SetFMCClockSource>:
{
3400873c:	b480      	push	{r7}
3400873e:	b083      	sub	sp, #12
34008740:	af00      	add	r7, sp, #0
34008742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34008744:	4b07      	ldr	r3, [pc, #28]	@ (34008764 <LL_RCC_SetFMCClockSource+0x28>)
34008746:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400874a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3400874e:	4905      	ldr	r1, [pc, #20]	@ (34008764 <LL_RCC_SetFMCClockSource+0x28>)
34008750:	687b      	ldr	r3, [r7, #4]
34008752:	4313      	orrs	r3, r2
34008754:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34008758:	bf00      	nop
3400875a:	370c      	adds	r7, #12
3400875c:	46bd      	mov	sp, r7
3400875e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008762:	4770      	bx	lr
34008764:	56028000 	.word	0x56028000

34008768 <LL_RCC_SetI2CClockSource>:
{
34008768:	b580      	push	{r7, lr}
3400876a:	b082      	sub	sp, #8
3400876c:	af00      	add	r7, sp, #0
3400876e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008770:	6878      	ldr	r0, [r7, #4]
34008772:	f7ff feed 	bl	34008550 <LL_RCC_SetClockSource>
}
34008776:	bf00      	nop
34008778:	3708      	adds	r7, #8
3400877a:	46bd      	mov	sp, r7
3400877c:	bd80      	pop	{r7, pc}

3400877e <LL_RCC_SetI3CClockSource>:
{
3400877e:	b580      	push	{r7, lr}
34008780:	b082      	sub	sp, #8
34008782:	af00      	add	r7, sp, #0
34008784:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008786:	6878      	ldr	r0, [r7, #4]
34008788:	f7ff fee2 	bl	34008550 <LL_RCC_SetClockSource>
}
3400878c:	bf00      	nop
3400878e:	3708      	adds	r7, #8
34008790:	46bd      	mov	sp, r7
34008792:	bd80      	pop	{r7, pc}

34008794 <LL_RCC_SetLPTIMClockSource>:
{
34008794:	b580      	push	{r7, lr}
34008796:	b082      	sub	sp, #8
34008798:	af00      	add	r7, sp, #0
3400879a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400879c:	6878      	ldr	r0, [r7, #4]
3400879e:	f7ff fed7 	bl	34008550 <LL_RCC_SetClockSource>
}
340087a2:	bf00      	nop
340087a4:	3708      	adds	r7, #8
340087a6:	46bd      	mov	sp, r7
340087a8:	bd80      	pop	{r7, pc}
	...

340087ac <LL_RCC_SetLPUARTClockSource>:
{
340087ac:	b480      	push	{r7}
340087ae:	b083      	sub	sp, #12
340087b0:	af00      	add	r7, sp, #0
340087b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
340087b4:	4b07      	ldr	r3, [pc, #28]	@ (340087d4 <LL_RCC_SetLPUARTClockSource+0x28>)
340087b6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
340087ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
340087be:	4905      	ldr	r1, [pc, #20]	@ (340087d4 <LL_RCC_SetLPUARTClockSource+0x28>)
340087c0:	687b      	ldr	r3, [r7, #4]
340087c2:	4313      	orrs	r3, r2
340087c4:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
340087c8:	bf00      	nop
340087ca:	370c      	adds	r7, #12
340087cc:	46bd      	mov	sp, r7
340087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
340087d2:	4770      	bx	lr
340087d4:	56028000 	.word	0x56028000

340087d8 <LL_RCC_SetLTDCClockSource>:
{
340087d8:	b480      	push	{r7}
340087da:	b083      	sub	sp, #12
340087dc:	af00      	add	r7, sp, #0
340087de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
340087e0:	4b07      	ldr	r3, [pc, #28]	@ (34008800 <LL_RCC_SetLTDCClockSource+0x28>)
340087e2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
340087e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
340087ea:	4905      	ldr	r1, [pc, #20]	@ (34008800 <LL_RCC_SetLTDCClockSource+0x28>)
340087ec:	687b      	ldr	r3, [r7, #4]
340087ee:	4313      	orrs	r3, r2
340087f0:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
340087f4:	bf00      	nop
340087f6:	370c      	adds	r7, #12
340087f8:	46bd      	mov	sp, r7
340087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
340087fe:	4770      	bx	lr
34008800:	56028000 	.word	0x56028000

34008804 <LL_RCC_SetMDFClockSource>:
{
34008804:	b480      	push	{r7}
34008806:	b083      	sub	sp, #12
34008808:	af00      	add	r7, sp, #0
3400880a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
3400880c:	4b07      	ldr	r3, [pc, #28]	@ (3400882c <LL_RCC_SetMDFClockSource+0x28>)
3400880e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34008812:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34008816:	4905      	ldr	r1, [pc, #20]	@ (3400882c <LL_RCC_SetMDFClockSource+0x28>)
34008818:	687b      	ldr	r3, [r7, #4]
3400881a:	4313      	orrs	r3, r2
3400881c:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34008820:	bf00      	nop
34008822:	370c      	adds	r7, #12
34008824:	46bd      	mov	sp, r7
34008826:	f85d 7b04 	ldr.w	r7, [sp], #4
3400882a:	4770      	bx	lr
3400882c:	56028000 	.word	0x56028000

34008830 <LL_RCC_SetOTGPHYClockSource>:
{
34008830:	b580      	push	{r7, lr}
34008832:	b082      	sub	sp, #8
34008834:	af00      	add	r7, sp, #0
34008836:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008838:	6878      	ldr	r0, [r7, #4]
3400883a:	f7ff fe89 	bl	34008550 <LL_RCC_SetClockSource>
}
3400883e:	bf00      	nop
34008840:	3708      	adds	r7, #8
34008842:	46bd      	mov	sp, r7
34008844:	bd80      	pop	{r7, pc}

34008846 <LL_RCC_SetOTGPHYCKREFClockSource>:
{
34008846:	b580      	push	{r7, lr}
34008848:	b082      	sub	sp, #8
3400884a:	af00      	add	r7, sp, #0
3400884c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400884e:	6878      	ldr	r0, [r7, #4]
34008850:	f7ff fe7e 	bl	34008550 <LL_RCC_SetClockSource>
}
34008854:	bf00      	nop
34008856:	3708      	adds	r7, #8
34008858:	46bd      	mov	sp, r7
3400885a:	bd80      	pop	{r7, pc}

3400885c <LL_RCC_SetPSSIClockSource>:
{
3400885c:	b480      	push	{r7}
3400885e:	b083      	sub	sp, #12
34008860:	af00      	add	r7, sp, #0
34008862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34008864:	4b07      	ldr	r3, [pc, #28]	@ (34008884 <LL_RCC_SetPSSIClockSource+0x28>)
34008866:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400886a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3400886e:	4905      	ldr	r1, [pc, #20]	@ (34008884 <LL_RCC_SetPSSIClockSource+0x28>)
34008870:	687b      	ldr	r3, [r7, #4]
34008872:	4313      	orrs	r3, r2
34008874:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008878:	bf00      	nop
3400887a:	370c      	adds	r7, #12
3400887c:	46bd      	mov	sp, r7
3400887e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008882:	4770      	bx	lr
34008884:	56028000 	.word	0x56028000

34008888 <LL_RCC_SetSAIClockSource>:
{
34008888:	b580      	push	{r7, lr}
3400888a:	b082      	sub	sp, #8
3400888c:	af00      	add	r7, sp, #0
3400888e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008890:	6878      	ldr	r0, [r7, #4]
34008892:	f7ff fe5d 	bl	34008550 <LL_RCC_SetClockSource>
}
34008896:	bf00      	nop
34008898:	3708      	adds	r7, #8
3400889a:	46bd      	mov	sp, r7
3400889c:	bd80      	pop	{r7, pc}

3400889e <LL_RCC_SetSDMMCClockSource>:
{
3400889e:	b580      	push	{r7, lr}
340088a0:	b082      	sub	sp, #8
340088a2:	af00      	add	r7, sp, #0
340088a4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340088a6:	6878      	ldr	r0, [r7, #4]
340088a8:	f7ff fe52 	bl	34008550 <LL_RCC_SetClockSource>
}
340088ac:	bf00      	nop
340088ae:	3708      	adds	r7, #8
340088b0:	46bd      	mov	sp, r7
340088b2:	bd80      	pop	{r7, pc}

340088b4 <LL_RCC_SetSPDIFRXClockSource>:
{
340088b4:	b480      	push	{r7}
340088b6:	b083      	sub	sp, #12
340088b8:	af00      	add	r7, sp, #0
340088ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
340088bc:	4b07      	ldr	r3, [pc, #28]	@ (340088dc <LL_RCC_SetSPDIFRXClockSource+0x28>)
340088be:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
340088c2:	f023 0207 	bic.w	r2, r3, #7
340088c6:	4905      	ldr	r1, [pc, #20]	@ (340088dc <LL_RCC_SetSPDIFRXClockSource+0x28>)
340088c8:	687b      	ldr	r3, [r7, #4]
340088ca:	4313      	orrs	r3, r2
340088cc:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
340088d0:	bf00      	nop
340088d2:	370c      	adds	r7, #12
340088d4:	46bd      	mov	sp, r7
340088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
340088da:	4770      	bx	lr
340088dc:	56028000 	.word	0x56028000

340088e0 <LL_RCC_SetSPIClockSource>:
{
340088e0:	b580      	push	{r7, lr}
340088e2:	b082      	sub	sp, #8
340088e4:	af00      	add	r7, sp, #0
340088e6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340088e8:	6878      	ldr	r0, [r7, #4]
340088ea:	f7ff fe31 	bl	34008550 <LL_RCC_SetClockSource>
}
340088ee:	bf00      	nop
340088f0:	3708      	adds	r7, #8
340088f2:	46bd      	mov	sp, r7
340088f4:	bd80      	pop	{r7, pc}

340088f6 <LL_RCC_SetUSARTClockSource>:
{
340088f6:	b580      	push	{r7, lr}
340088f8:	b082      	sub	sp, #8
340088fa:	af00      	add	r7, sp, #0
340088fc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340088fe:	6878      	ldr	r0, [r7, #4]
34008900:	f7ff fe26 	bl	34008550 <LL_RCC_SetClockSource>
}
34008904:	bf00      	nop
34008906:	3708      	adds	r7, #8
34008908:	46bd      	mov	sp, r7
3400890a:	bd80      	pop	{r7, pc}

3400890c <LL_RCC_SetXSPIClockSource>:
{
3400890c:	b580      	push	{r7, lr}
3400890e:	b082      	sub	sp, #8
34008910:	af00      	add	r7, sp, #0
34008912:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008914:	6878      	ldr	r0, [r7, #4]
34008916:	f7ff fe1b 	bl	34008550 <LL_RCC_SetClockSource>
}
3400891a:	bf00      	nop
3400891c:	3708      	adds	r7, #8
3400891e:	46bd      	mov	sp, r7
34008920:	bd80      	pop	{r7, pc}
	...

34008924 <LL_RCC_GetClockSource>:
{
34008924:	b480      	push	{r7}
34008926:	b085      	sub	sp, #20
34008928:	af00      	add	r7, sp, #0
3400892a:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
3400892c:	687b      	ldr	r3, [r7, #4]
3400892e:	b2da      	uxtb	r2, r3
34008930:	4b0e      	ldr	r3, [pc, #56]	@ (3400896c <LL_RCC_GetClockSource+0x48>)
34008932:	4413      	add	r3, r2
34008934:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34008936:	68fb      	ldr	r3, [r7, #12]
34008938:	681a      	ldr	r2, [r3, #0]
3400893a:	687b      	ldr	r3, [r7, #4]
3400893c:	0e19      	lsrs	r1, r3, #24
3400893e:	687b      	ldr	r3, [r7, #4]
34008940:	0a1b      	lsrs	r3, r3, #8
34008942:	f003 031f 	and.w	r3, r3, #31
34008946:	fa01 f303 	lsl.w	r3, r1, r3
3400894a:	401a      	ands	r2, r3
3400894c:	687b      	ldr	r3, [r7, #4]
3400894e:	0a1b      	lsrs	r3, r3, #8
34008950:	f003 031f 	and.w	r3, r3, #31
34008954:	fa22 f303 	lsr.w	r3, r2, r3
34008958:	041a      	lsls	r2, r3, #16
3400895a:	687b      	ldr	r3, [r7, #4]
3400895c:	4313      	orrs	r3, r2
}
3400895e:	4618      	mov	r0, r3
34008960:	3714      	adds	r7, #20
34008962:	46bd      	mov	sp, r7
34008964:	f85d 7b04 	ldr.w	r7, [sp], #4
34008968:	4770      	bx	lr
3400896a:	bf00      	nop
3400896c:	56028144 	.word	0x56028144

34008970 <LL_RCC_GetADCClockSource>:
{
34008970:	b480      	push	{r7}
34008972:	b083      	sub	sp, #12
34008974:	af00      	add	r7, sp, #0
34008976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34008978:	4b05      	ldr	r3, [pc, #20]	@ (34008990 <LL_RCC_GetADCClockSource+0x20>)
3400897a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400897e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34008982:	4618      	mov	r0, r3
34008984:	370c      	adds	r7, #12
34008986:	46bd      	mov	sp, r7
34008988:	f85d 7b04 	ldr.w	r7, [sp], #4
3400898c:	4770      	bx	lr
3400898e:	bf00      	nop
34008990:	56028000 	.word	0x56028000

34008994 <LL_RCC_GetADFClockSource>:
{
34008994:	b480      	push	{r7}
34008996:	b083      	sub	sp, #12
34008998:	af00      	add	r7, sp, #0
3400899a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
3400899c:	4b05      	ldr	r3, [pc, #20]	@ (340089b4 <LL_RCC_GetADFClockSource+0x20>)
3400899e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340089a2:	f003 0307 	and.w	r3, r3, #7
}
340089a6:	4618      	mov	r0, r3
340089a8:	370c      	adds	r7, #12
340089aa:	46bd      	mov	sp, r7
340089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
340089b0:	4770      	bx	lr
340089b2:	bf00      	nop
340089b4:	56028000 	.word	0x56028000

340089b8 <LL_RCC_GetCLKPClockSource>:
{
340089b8:	b480      	push	{r7}
340089ba:	b083      	sub	sp, #12
340089bc:	af00      	add	r7, sp, #0
340089be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
340089c0:	4b05      	ldr	r3, [pc, #20]	@ (340089d8 <LL_RCC_GetCLKPClockSource+0x20>)
340089c2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340089c6:	f003 0307 	and.w	r3, r3, #7
}
340089ca:	4618      	mov	r0, r3
340089cc:	370c      	adds	r7, #12
340089ce:	46bd      	mov	sp, r7
340089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
340089d4:	4770      	bx	lr
340089d6:	bf00      	nop
340089d8:	56028000 	.word	0x56028000

340089dc <LL_RCC_GetDCMIPPClockSource>:
{
340089dc:	b480      	push	{r7}
340089de:	b083      	sub	sp, #12
340089e0:	af00      	add	r7, sp, #0
340089e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
340089e4:	4b05      	ldr	r3, [pc, #20]	@ (340089fc <LL_RCC_GetDCMIPPClockSource+0x20>)
340089e6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340089ea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
340089ee:	4618      	mov	r0, r3
340089f0:	370c      	adds	r7, #12
340089f2:	46bd      	mov	sp, r7
340089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
340089f8:	4770      	bx	lr
340089fa:	bf00      	nop
340089fc:	56028000 	.word	0x56028000

34008a00 <LL_RCC_GetETHClockSource>:
{
34008a00:	b480      	push	{r7}
34008a02:	b083      	sub	sp, #12
34008a04:	af00      	add	r7, sp, #0
34008a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34008a08:	4b05      	ldr	r3, [pc, #20]	@ (34008a20 <LL_RCC_GetETHClockSource+0x20>)
34008a0a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008a0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
34008a12:	4618      	mov	r0, r3
34008a14:	370c      	adds	r7, #12
34008a16:	46bd      	mov	sp, r7
34008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a1c:	4770      	bx	lr
34008a1e:	bf00      	nop
34008a20:	56028000 	.word	0x56028000

34008a24 <LL_RCC_GetETHPTPClockSource>:
{
34008a24:	b480      	push	{r7}
34008a26:	b083      	sub	sp, #12
34008a28:	af00      	add	r7, sp, #0
34008a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34008a2c:	4b05      	ldr	r3, [pc, #20]	@ (34008a44 <LL_RCC_GetETHPTPClockSource+0x20>)
34008a2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008a32:	f003 0303 	and.w	r3, r3, #3
}
34008a36:	4618      	mov	r0, r3
34008a38:	370c      	adds	r7, #12
34008a3a:	46bd      	mov	sp, r7
34008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a40:	4770      	bx	lr
34008a42:	bf00      	nop
34008a44:	56028000 	.word	0x56028000

34008a48 <LL_RCC_GetFDCANClockSource>:
{
34008a48:	b480      	push	{r7}
34008a4a:	b083      	sub	sp, #12
34008a4c:	af00      	add	r7, sp, #0
34008a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34008a50:	4b05      	ldr	r3, [pc, #20]	@ (34008a68 <LL_RCC_GetFDCANClockSource+0x20>)
34008a52:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34008a56:	f003 0303 	and.w	r3, r3, #3
}
34008a5a:	4618      	mov	r0, r3
34008a5c:	370c      	adds	r7, #12
34008a5e:	46bd      	mov	sp, r7
34008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a64:	4770      	bx	lr
34008a66:	bf00      	nop
34008a68:	56028000 	.word	0x56028000

34008a6c <LL_RCC_GetFMCClockSource>:
{
34008a6c:	b480      	push	{r7}
34008a6e:	b083      	sub	sp, #12
34008a70:	af00      	add	r7, sp, #0
34008a72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34008a74:	4b05      	ldr	r3, [pc, #20]	@ (34008a8c <LL_RCC_GetFMCClockSource+0x20>)
34008a76:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34008a7a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34008a7e:	4618      	mov	r0, r3
34008a80:	370c      	adds	r7, #12
34008a82:	46bd      	mov	sp, r7
34008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a88:	4770      	bx	lr
34008a8a:	bf00      	nop
34008a8c:	56028000 	.word	0x56028000

34008a90 <LL_RCC_GetI2CClockSource>:
{
34008a90:	b580      	push	{r7, lr}
34008a92:	b082      	sub	sp, #8
34008a94:	af00      	add	r7, sp, #0
34008a96:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008a98:	6878      	ldr	r0, [r7, #4]
34008a9a:	f7ff ff43 	bl	34008924 <LL_RCC_GetClockSource>
34008a9e:	4603      	mov	r3, r0
}
34008aa0:	4618      	mov	r0, r3
34008aa2:	3708      	adds	r7, #8
34008aa4:	46bd      	mov	sp, r7
34008aa6:	bd80      	pop	{r7, pc}

34008aa8 <LL_RCC_GetI3CClockSource>:
{
34008aa8:	b580      	push	{r7, lr}
34008aaa:	b082      	sub	sp, #8
34008aac:	af00      	add	r7, sp, #0
34008aae:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008ab0:	6878      	ldr	r0, [r7, #4]
34008ab2:	f7ff ff37 	bl	34008924 <LL_RCC_GetClockSource>
34008ab6:	4603      	mov	r3, r0
}
34008ab8:	4618      	mov	r0, r3
34008aba:	3708      	adds	r7, #8
34008abc:	46bd      	mov	sp, r7
34008abe:	bd80      	pop	{r7, pc}

34008ac0 <LL_RCC_GetLPTIMClockSource>:
{
34008ac0:	b580      	push	{r7, lr}
34008ac2:	b082      	sub	sp, #8
34008ac4:	af00      	add	r7, sp, #0
34008ac6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008ac8:	6878      	ldr	r0, [r7, #4]
34008aca:	f7ff ff2b 	bl	34008924 <LL_RCC_GetClockSource>
34008ace:	4603      	mov	r3, r0
}
34008ad0:	4618      	mov	r0, r3
34008ad2:	3708      	adds	r7, #8
34008ad4:	46bd      	mov	sp, r7
34008ad6:	bd80      	pop	{r7, pc}

34008ad8 <LL_RCC_GetLPUARTClockSource>:
{
34008ad8:	b480      	push	{r7}
34008ada:	b083      	sub	sp, #12
34008adc:	af00      	add	r7, sp, #0
34008ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34008ae0:	4b05      	ldr	r3, [pc, #20]	@ (34008af8 <LL_RCC_GetLPUARTClockSource+0x20>)
34008ae2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34008ae6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
34008aea:	4618      	mov	r0, r3
34008aec:	370c      	adds	r7, #12
34008aee:	46bd      	mov	sp, r7
34008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008af4:	4770      	bx	lr
34008af6:	bf00      	nop
34008af8:	56028000 	.word	0x56028000

34008afc <LL_RCC_GetLTDCClockSource>:
{
34008afc:	b480      	push	{r7}
34008afe:	b083      	sub	sp, #12
34008b00:	af00      	add	r7, sp, #0
34008b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34008b04:	4b05      	ldr	r3, [pc, #20]	@ (34008b1c <LL_RCC_GetLTDCClockSource+0x20>)
34008b06:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34008b0a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
34008b0e:	4618      	mov	r0, r3
34008b10:	370c      	adds	r7, #12
34008b12:	46bd      	mov	sp, r7
34008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b18:	4770      	bx	lr
34008b1a:	bf00      	nop
34008b1c:	56028000 	.word	0x56028000

34008b20 <LL_RCC_GetMDFClockSource>:
{
34008b20:	b480      	push	{r7}
34008b22:	b083      	sub	sp, #12
34008b24:	af00      	add	r7, sp, #0
34008b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34008b28:	4b05      	ldr	r3, [pc, #20]	@ (34008b40 <LL_RCC_GetMDFClockSource+0x20>)
34008b2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34008b2e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34008b32:	4618      	mov	r0, r3
34008b34:	370c      	adds	r7, #12
34008b36:	46bd      	mov	sp, r7
34008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b3c:	4770      	bx	lr
34008b3e:	bf00      	nop
34008b40:	56028000 	.word	0x56028000

34008b44 <LL_RCC_GetPSSIClockSource>:
{
34008b44:	b480      	push	{r7}
34008b46:	b083      	sub	sp, #12
34008b48:	af00      	add	r7, sp, #0
34008b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34008b4c:	4b05      	ldr	r3, [pc, #20]	@ (34008b64 <LL_RCC_GetPSSIClockSource+0x20>)
34008b4e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008b52:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34008b56:	4618      	mov	r0, r3
34008b58:	370c      	adds	r7, #12
34008b5a:	46bd      	mov	sp, r7
34008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b60:	4770      	bx	lr
34008b62:	bf00      	nop
34008b64:	56028000 	.word	0x56028000

34008b68 <LL_RCC_GetSAIClockSource>:
{
34008b68:	b580      	push	{r7, lr}
34008b6a:	b082      	sub	sp, #8
34008b6c:	af00      	add	r7, sp, #0
34008b6e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008b70:	6878      	ldr	r0, [r7, #4]
34008b72:	f7ff fed7 	bl	34008924 <LL_RCC_GetClockSource>
34008b76:	4603      	mov	r3, r0
}
34008b78:	4618      	mov	r0, r3
34008b7a:	3708      	adds	r7, #8
34008b7c:	46bd      	mov	sp, r7
34008b7e:	bd80      	pop	{r7, pc}

34008b80 <LL_RCC_GetSDMMCClockSource>:
{
34008b80:	b580      	push	{r7, lr}
34008b82:	b082      	sub	sp, #8
34008b84:	af00      	add	r7, sp, #0
34008b86:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008b88:	6878      	ldr	r0, [r7, #4]
34008b8a:	f7ff fecb 	bl	34008924 <LL_RCC_GetClockSource>
34008b8e:	4603      	mov	r3, r0
}
34008b90:	4618      	mov	r0, r3
34008b92:	3708      	adds	r7, #8
34008b94:	46bd      	mov	sp, r7
34008b96:	bd80      	pop	{r7, pc}

34008b98 <LL_RCC_GetSPDIFRXClockSource>:
{
34008b98:	b480      	push	{r7}
34008b9a:	b083      	sub	sp, #12
34008b9c:	af00      	add	r7, sp, #0
34008b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34008ba0:	4b05      	ldr	r3, [pc, #20]	@ (34008bb8 <LL_RCC_GetSPDIFRXClockSource+0x20>)
34008ba2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34008ba6:	f003 0307 	and.w	r3, r3, #7
}
34008baa:	4618      	mov	r0, r3
34008bac:	370c      	adds	r7, #12
34008bae:	46bd      	mov	sp, r7
34008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008bb4:	4770      	bx	lr
34008bb6:	bf00      	nop
34008bb8:	56028000 	.word	0x56028000

34008bbc <LL_RCC_GetSPIClockSource>:
{
34008bbc:	b580      	push	{r7, lr}
34008bbe:	b082      	sub	sp, #8
34008bc0:	af00      	add	r7, sp, #0
34008bc2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008bc4:	6878      	ldr	r0, [r7, #4]
34008bc6:	f7ff fead 	bl	34008924 <LL_RCC_GetClockSource>
34008bca:	4603      	mov	r3, r0
}
34008bcc:	4618      	mov	r0, r3
34008bce:	3708      	adds	r7, #8
34008bd0:	46bd      	mov	sp, r7
34008bd2:	bd80      	pop	{r7, pc}

34008bd4 <LL_RCC_GetUSARTClockSource>:
{
34008bd4:	b580      	push	{r7, lr}
34008bd6:	b082      	sub	sp, #8
34008bd8:	af00      	add	r7, sp, #0
34008bda:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008bdc:	6878      	ldr	r0, [r7, #4]
34008bde:	f7ff fea1 	bl	34008924 <LL_RCC_GetClockSource>
34008be2:	4603      	mov	r3, r0
}
34008be4:	4618      	mov	r0, r3
34008be6:	3708      	adds	r7, #8
34008be8:	46bd      	mov	sp, r7
34008bea:	bd80      	pop	{r7, pc}

34008bec <LL_RCC_GetUARTClockSource>:
{
34008bec:	b580      	push	{r7, lr}
34008bee:	b082      	sub	sp, #8
34008bf0:	af00      	add	r7, sp, #0
34008bf2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008bf4:	6878      	ldr	r0, [r7, #4]
34008bf6:	f7ff fe95 	bl	34008924 <LL_RCC_GetClockSource>
34008bfa:	4603      	mov	r3, r0
}
34008bfc:	4618      	mov	r0, r3
34008bfe:	3708      	adds	r7, #8
34008c00:	46bd      	mov	sp, r7
34008c02:	bd80      	pop	{r7, pc}

34008c04 <LL_RCC_GetUSBClockSource>:
{
34008c04:	b580      	push	{r7, lr}
34008c06:	b082      	sub	sp, #8
34008c08:	af00      	add	r7, sp, #0
34008c0a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008c0c:	6878      	ldr	r0, [r7, #4]
34008c0e:	f7ff fe89 	bl	34008924 <LL_RCC_GetClockSource>
34008c12:	4603      	mov	r3, r0
}
34008c14:	4618      	mov	r0, r3
34008c16:	3708      	adds	r7, #8
34008c18:	46bd      	mov	sp, r7
34008c1a:	bd80      	pop	{r7, pc}

34008c1c <LL_RCC_GetXSPIClockSource>:
{
34008c1c:	b580      	push	{r7, lr}
34008c1e:	b082      	sub	sp, #8
34008c20:	af00      	add	r7, sp, #0
34008c22:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008c24:	6878      	ldr	r0, [r7, #4]
34008c26:	f7ff fe7d 	bl	34008924 <LL_RCC_GetClockSource>
34008c2a:	4603      	mov	r3, r0
}
34008c2c:	4618      	mov	r0, r3
34008c2e:	3708      	adds	r7, #8
34008c30:	46bd      	mov	sp, r7
34008c32:	bd80      	pop	{r7, pc}

34008c34 <LL_RCC_SetRTCClockSource>:
{
34008c34:	b480      	push	{r7}
34008c36:	b083      	sub	sp, #12
34008c38:	af00      	add	r7, sp, #0
34008c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34008c3c:	4b07      	ldr	r3, [pc, #28]	@ (34008c5c <LL_RCC_SetRTCClockSource+0x28>)
34008c3e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008c42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
34008c46:	4905      	ldr	r1, [pc, #20]	@ (34008c5c <LL_RCC_SetRTCClockSource+0x28>)
34008c48:	687b      	ldr	r3, [r7, #4]
34008c4a:	4313      	orrs	r3, r2
34008c4c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008c50:	bf00      	nop
34008c52:	370c      	adds	r7, #12
34008c54:	46bd      	mov	sp, r7
34008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c5a:	4770      	bx	lr
34008c5c:	56028000 	.word	0x56028000

34008c60 <LL_RCC_GetRTCClockSource>:
{
34008c60:	b480      	push	{r7}
34008c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34008c64:	4b04      	ldr	r3, [pc, #16]	@ (34008c78 <LL_RCC_GetRTCClockSource+0x18>)
34008c66:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
34008c6e:	4618      	mov	r0, r3
34008c70:	46bd      	mov	sp, r7
34008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c76:	4770      	bx	lr
34008c78:	56028000 	.word	0x56028000

34008c7c <LL_RCC_SetRTC_HSEPrescaler>:
{
34008c7c:	b480      	push	{r7}
34008c7e:	b083      	sub	sp, #12
34008c80:	af00      	add	r7, sp, #0
34008c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34008c84:	4b07      	ldr	r3, [pc, #28]	@ (34008ca4 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34008c86:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008c8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
34008c8e:	4905      	ldr	r1, [pc, #20]	@ (34008ca4 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34008c90:	687b      	ldr	r3, [r7, #4]
34008c92:	4313      	orrs	r3, r2
34008c94:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008c98:	bf00      	nop
34008c9a:	370c      	adds	r7, #12
34008c9c:	46bd      	mov	sp, r7
34008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ca2:	4770      	bx	lr
34008ca4:	56028000 	.word	0x56028000

34008ca8 <LL_RCC_SetTIMPrescaler>:
{
34008ca8:	b480      	push	{r7}
34008caa:	b083      	sub	sp, #12
34008cac:	af00      	add	r7, sp, #0
34008cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34008cb0:	4b07      	ldr	r3, [pc, #28]	@ (34008cd0 <LL_RCC_SetTIMPrescaler+0x28>)
34008cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008cb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34008cb8:	687b      	ldr	r3, [r7, #4]
34008cba:	061b      	lsls	r3, r3, #24
34008cbc:	4904      	ldr	r1, [pc, #16]	@ (34008cd0 <LL_RCC_SetTIMPrescaler+0x28>)
34008cbe:	4313      	orrs	r3, r2
34008cc0:	624b      	str	r3, [r1, #36]	@ 0x24
}
34008cc2:	bf00      	nop
34008cc4:	370c      	adds	r7, #12
34008cc6:	46bd      	mov	sp, r7
34008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ccc:	4770      	bx	lr
34008cce:	bf00      	nop
34008cd0:	56028000 	.word	0x56028000

34008cd4 <LL_RCC_GetTIMPrescaler>:
{
34008cd4:	b480      	push	{r7}
34008cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34008cd8:	4b04      	ldr	r3, [pc, #16]	@ (34008cec <LL_RCC_GetTIMPrescaler+0x18>)
34008cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008cdc:	0e1b      	lsrs	r3, r3, #24
34008cde:	f003 0303 	and.w	r3, r3, #3
}
34008ce2:	4618      	mov	r0, r3
34008ce4:	46bd      	mov	sp, r7
34008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
34008cea:	4770      	bx	lr
34008cec:	56028000 	.word	0x56028000

34008cf0 <LL_RCC_PLL1_GetSource>:
{
34008cf0:	b480      	push	{r7}
34008cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34008cf4:	4b04      	ldr	r3, [pc, #16]	@ (34008d08 <LL_RCC_PLL1_GetSource+0x18>)
34008cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008cfa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008cfe:	4618      	mov	r0, r3
34008d00:	46bd      	mov	sp, r7
34008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d06:	4770      	bx	lr
34008d08:	56028000 	.word	0x56028000

34008d0c <LL_RCC_PLL1_IsReady>:
{
34008d0c:	b480      	push	{r7}
34008d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34008d10:	4b07      	ldr	r3, [pc, #28]	@ (34008d30 <LL_RCC_PLL1_IsReady+0x24>)
34008d12:	685b      	ldr	r3, [r3, #4]
34008d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34008d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34008d1c:	d101      	bne.n	34008d22 <LL_RCC_PLL1_IsReady+0x16>
34008d1e:	2301      	movs	r3, #1
34008d20:	e000      	b.n	34008d24 <LL_RCC_PLL1_IsReady+0x18>
34008d22:	2300      	movs	r3, #0
}
34008d24:	4618      	mov	r0, r3
34008d26:	46bd      	mov	sp, r7
34008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d2c:	4770      	bx	lr
34008d2e:	bf00      	nop
34008d30:	56028000 	.word	0x56028000

34008d34 <LL_RCC_PLL1_IsEnabledBypass>:
{
34008d34:	b480      	push	{r7}
34008d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34008d38:	4b07      	ldr	r3, [pc, #28]	@ (34008d58 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34008d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008d46:	d101      	bne.n	34008d4c <LL_RCC_PLL1_IsEnabledBypass+0x18>
34008d48:	2301      	movs	r3, #1
34008d4a:	e000      	b.n	34008d4e <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34008d4c:	2300      	movs	r3, #0
}
34008d4e:	4618      	mov	r0, r3
34008d50:	46bd      	mov	sp, r7
34008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d56:	4770      	bx	lr
34008d58:	56028000 	.word	0x56028000

34008d5c <LL_RCC_PLL1_GetN>:
{
34008d5c:	b480      	push	{r7}
34008d5e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34008d60:	4b05      	ldr	r3, [pc, #20]	@ (34008d78 <LL_RCC_PLL1_GetN+0x1c>)
34008d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008d66:	0a1b      	lsrs	r3, r3, #8
34008d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008d6c:	4618      	mov	r0, r3
34008d6e:	46bd      	mov	sp, r7
34008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d74:	4770      	bx	lr
34008d76:	bf00      	nop
34008d78:	56028000 	.word	0x56028000

34008d7c <LL_RCC_PLL1_GetM>:
{
34008d7c:	b480      	push	{r7}
34008d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34008d80:	4b05      	ldr	r3, [pc, #20]	@ (34008d98 <LL_RCC_PLL1_GetM+0x1c>)
34008d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008d86:	0d1b      	lsrs	r3, r3, #20
34008d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008d8c:	4618      	mov	r0, r3
34008d8e:	46bd      	mov	sp, r7
34008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d94:	4770      	bx	lr
34008d96:	bf00      	nop
34008d98:	56028000 	.word	0x56028000

34008d9c <LL_RCC_PLL1_GetP1>:
{
34008d9c:	b480      	push	{r7}
34008d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008da0:	4b05      	ldr	r3, [pc, #20]	@ (34008db8 <LL_RCC_PLL1_GetP1+0x1c>)
34008da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34008da6:	0edb      	lsrs	r3, r3, #27
34008da8:	f003 0307 	and.w	r3, r3, #7
}
34008dac:	4618      	mov	r0, r3
34008dae:	46bd      	mov	sp, r7
34008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008db4:	4770      	bx	lr
34008db6:	bf00      	nop
34008db8:	56028000 	.word	0x56028000

34008dbc <LL_RCC_PLL1_GetP2>:
{
34008dbc:	b480      	push	{r7}
34008dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34008dc0:	4b05      	ldr	r3, [pc, #20]	@ (34008dd8 <LL_RCC_PLL1_GetP2+0x1c>)
34008dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34008dc6:	0e1b      	lsrs	r3, r3, #24
34008dc8:	f003 0307 	and.w	r3, r3, #7
}
34008dcc:	4618      	mov	r0, r3
34008dce:	46bd      	mov	sp, r7
34008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008dd4:	4770      	bx	lr
34008dd6:	bf00      	nop
34008dd8:	56028000 	.word	0x56028000

34008ddc <LL_RCC_PLL1P_IsEnabled>:
{
34008ddc:	b480      	push	{r7}
34008dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34008de0:	4b07      	ldr	r3, [pc, #28]	@ (34008e00 <LL_RCC_PLL1P_IsEnabled+0x24>)
34008de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34008de6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008dee:	d101      	bne.n	34008df4 <LL_RCC_PLL1P_IsEnabled+0x18>
34008df0:	2301      	movs	r3, #1
34008df2:	e000      	b.n	34008df6 <LL_RCC_PLL1P_IsEnabled+0x1a>
34008df4:	2300      	movs	r3, #0
}
34008df6:	4618      	mov	r0, r3
34008df8:	46bd      	mov	sp, r7
34008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
34008dfe:	4770      	bx	lr
34008e00:	56028000 	.word	0x56028000

34008e04 <LL_RCC_PLL1_GetFRACN>:
{
34008e04:	b480      	push	{r7}
34008e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34008e08:	4b04      	ldr	r3, [pc, #16]	@ (34008e1c <LL_RCC_PLL1_GetFRACN+0x18>)
34008e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34008e0e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008e12:	4618      	mov	r0, r3
34008e14:	46bd      	mov	sp, r7
34008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e1a:	4770      	bx	lr
34008e1c:	56028000 	.word	0x56028000

34008e20 <LL_RCC_PLL2_GetSource>:
{
34008e20:	b480      	push	{r7}
34008e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34008e24:	4b04      	ldr	r3, [pc, #16]	@ (34008e38 <LL_RCC_PLL2_GetSource+0x18>)
34008e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008e2a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008e2e:	4618      	mov	r0, r3
34008e30:	46bd      	mov	sp, r7
34008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e36:	4770      	bx	lr
34008e38:	56028000 	.word	0x56028000

34008e3c <LL_RCC_PLL2_IsReady>:
{
34008e3c:	b480      	push	{r7}
34008e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34008e40:	4b07      	ldr	r3, [pc, #28]	@ (34008e60 <LL_RCC_PLL2_IsReady+0x24>)
34008e42:	685b      	ldr	r3, [r3, #4]
34008e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34008e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34008e4c:	d101      	bne.n	34008e52 <LL_RCC_PLL2_IsReady+0x16>
34008e4e:	2301      	movs	r3, #1
34008e50:	e000      	b.n	34008e54 <LL_RCC_PLL2_IsReady+0x18>
34008e52:	2300      	movs	r3, #0
}
34008e54:	4618      	mov	r0, r3
34008e56:	46bd      	mov	sp, r7
34008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e5c:	4770      	bx	lr
34008e5e:	bf00      	nop
34008e60:	56028000 	.word	0x56028000

34008e64 <LL_RCC_PLL2_IsEnabledBypass>:
{
34008e64:	b480      	push	{r7}
34008e66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34008e68:	4b07      	ldr	r3, [pc, #28]	@ (34008e88 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34008e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008e76:	d101      	bne.n	34008e7c <LL_RCC_PLL2_IsEnabledBypass+0x18>
34008e78:	2301      	movs	r3, #1
34008e7a:	e000      	b.n	34008e7e <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34008e7c:	2300      	movs	r3, #0
}
34008e7e:	4618      	mov	r0, r3
34008e80:	46bd      	mov	sp, r7
34008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e86:	4770      	bx	lr
34008e88:	56028000 	.word	0x56028000

34008e8c <LL_RCC_PLL2_GetN>:
{
34008e8c:	b480      	push	{r7}
34008e8e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34008e90:	4b05      	ldr	r3, [pc, #20]	@ (34008ea8 <LL_RCC_PLL2_GetN+0x1c>)
34008e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008e96:	0a1b      	lsrs	r3, r3, #8
34008e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008e9c:	4618      	mov	r0, r3
34008e9e:	46bd      	mov	sp, r7
34008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ea4:	4770      	bx	lr
34008ea6:	bf00      	nop
34008ea8:	56028000 	.word	0x56028000

34008eac <LL_RCC_PLL2_GetM>:
{
34008eac:	b480      	push	{r7}
34008eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34008eb0:	4b05      	ldr	r3, [pc, #20]	@ (34008ec8 <LL_RCC_PLL2_GetM+0x1c>)
34008eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008eb6:	0d1b      	lsrs	r3, r3, #20
34008eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008ebc:	4618      	mov	r0, r3
34008ebe:	46bd      	mov	sp, r7
34008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ec4:	4770      	bx	lr
34008ec6:	bf00      	nop
34008ec8:	56028000 	.word	0x56028000

34008ecc <LL_RCC_PLL2_GetP1>:
{
34008ecc:	b480      	push	{r7}
34008ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34008ed0:	4b05      	ldr	r3, [pc, #20]	@ (34008ee8 <LL_RCC_PLL2_GetP1+0x1c>)
34008ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34008ed6:	0edb      	lsrs	r3, r3, #27
34008ed8:	f003 0307 	and.w	r3, r3, #7
}
34008edc:	4618      	mov	r0, r3
34008ede:	46bd      	mov	sp, r7
34008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ee4:	4770      	bx	lr
34008ee6:	bf00      	nop
34008ee8:	56028000 	.word	0x56028000

34008eec <LL_RCC_PLL2_GetP2>:
{
34008eec:	b480      	push	{r7}
34008eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34008ef0:	4b05      	ldr	r3, [pc, #20]	@ (34008f08 <LL_RCC_PLL2_GetP2+0x1c>)
34008ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34008ef6:	0e1b      	lsrs	r3, r3, #24
34008ef8:	f003 0307 	and.w	r3, r3, #7
}
34008efc:	4618      	mov	r0, r3
34008efe:	46bd      	mov	sp, r7
34008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f04:	4770      	bx	lr
34008f06:	bf00      	nop
34008f08:	56028000 	.word	0x56028000

34008f0c <LL_RCC_PLL2P_IsEnabled>:
{
34008f0c:	b480      	push	{r7}
34008f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
34008f10:	4b07      	ldr	r3, [pc, #28]	@ (34008f30 <LL_RCC_PLL2P_IsEnabled+0x24>)
34008f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34008f16:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34008f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008f1e:	d101      	bne.n	34008f24 <LL_RCC_PLL2P_IsEnabled+0x18>
34008f20:	2301      	movs	r3, #1
34008f22:	e000      	b.n	34008f26 <LL_RCC_PLL2P_IsEnabled+0x1a>
34008f24:	2300      	movs	r3, #0
}
34008f26:	4618      	mov	r0, r3
34008f28:	46bd      	mov	sp, r7
34008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f2e:	4770      	bx	lr
34008f30:	56028000 	.word	0x56028000

34008f34 <LL_RCC_PLL2_GetFRACN>:
{
34008f34:	b480      	push	{r7}
34008f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
34008f38:	4b04      	ldr	r3, [pc, #16]	@ (34008f4c <LL_RCC_PLL2_GetFRACN+0x18>)
34008f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34008f3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008f42:	4618      	mov	r0, r3
34008f44:	46bd      	mov	sp, r7
34008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f4a:	4770      	bx	lr
34008f4c:	56028000 	.word	0x56028000

34008f50 <LL_RCC_PLL3_GetSource>:
{
34008f50:	b480      	push	{r7}
34008f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34008f54:	4b04      	ldr	r3, [pc, #16]	@ (34008f68 <LL_RCC_PLL3_GetSource+0x18>)
34008f56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008f5a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008f5e:	4618      	mov	r0, r3
34008f60:	46bd      	mov	sp, r7
34008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f66:	4770      	bx	lr
34008f68:	56028000 	.word	0x56028000

34008f6c <LL_RCC_PLL3_IsReady>:
{
34008f6c:	b480      	push	{r7}
34008f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34008f70:	4b07      	ldr	r3, [pc, #28]	@ (34008f90 <LL_RCC_PLL3_IsReady+0x24>)
34008f72:	685b      	ldr	r3, [r3, #4]
34008f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34008f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34008f7c:	d101      	bne.n	34008f82 <LL_RCC_PLL3_IsReady+0x16>
34008f7e:	2301      	movs	r3, #1
34008f80:	e000      	b.n	34008f84 <LL_RCC_PLL3_IsReady+0x18>
34008f82:	2300      	movs	r3, #0
}
34008f84:	4618      	mov	r0, r3
34008f86:	46bd      	mov	sp, r7
34008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f8c:	4770      	bx	lr
34008f8e:	bf00      	nop
34008f90:	56028000 	.word	0x56028000

34008f94 <LL_RCC_PLL3_IsEnabledBypass>:
{
34008f94:	b480      	push	{r7}
34008f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34008f98:	4b07      	ldr	r3, [pc, #28]	@ (34008fb8 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34008f9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008f9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008fa6:	d101      	bne.n	34008fac <LL_RCC_PLL3_IsEnabledBypass+0x18>
34008fa8:	2301      	movs	r3, #1
34008faa:	e000      	b.n	34008fae <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34008fac:	2300      	movs	r3, #0
}
34008fae:	4618      	mov	r0, r3
34008fb0:	46bd      	mov	sp, r7
34008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34008fb6:	4770      	bx	lr
34008fb8:	56028000 	.word	0x56028000

34008fbc <LL_RCC_PLL3_GetN>:
{
34008fbc:	b480      	push	{r7}
34008fbe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34008fc0:	4b05      	ldr	r3, [pc, #20]	@ (34008fd8 <LL_RCC_PLL3_GetN+0x1c>)
34008fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008fc6:	0a1b      	lsrs	r3, r3, #8
34008fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008fcc:	4618      	mov	r0, r3
34008fce:	46bd      	mov	sp, r7
34008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008fd4:	4770      	bx	lr
34008fd6:	bf00      	nop
34008fd8:	56028000 	.word	0x56028000

34008fdc <LL_RCC_PLL3_GetM>:
{
34008fdc:	b480      	push	{r7}
34008fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34008fe0:	4b05      	ldr	r3, [pc, #20]	@ (34008ff8 <LL_RCC_PLL3_GetM+0x1c>)
34008fe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008fe6:	0d1b      	lsrs	r3, r3, #20
34008fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008fec:	4618      	mov	r0, r3
34008fee:	46bd      	mov	sp, r7
34008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ff4:	4770      	bx	lr
34008ff6:	bf00      	nop
34008ff8:	56028000 	.word	0x56028000

34008ffc <LL_RCC_PLL3_GetP1>:
{
34008ffc:	b480      	push	{r7}
34008ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34009000:	4b05      	ldr	r3, [pc, #20]	@ (34009018 <LL_RCC_PLL3_GetP1+0x1c>)
34009002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34009006:	0edb      	lsrs	r3, r3, #27
34009008:	f003 0307 	and.w	r3, r3, #7
}
3400900c:	4618      	mov	r0, r3
3400900e:	46bd      	mov	sp, r7
34009010:	f85d 7b04 	ldr.w	r7, [sp], #4
34009014:	4770      	bx	lr
34009016:	bf00      	nop
34009018:	56028000 	.word	0x56028000

3400901c <LL_RCC_PLL3_GetP2>:
{
3400901c:	b480      	push	{r7}
3400901e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34009020:	4b05      	ldr	r3, [pc, #20]	@ (34009038 <LL_RCC_PLL3_GetP2+0x1c>)
34009022:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34009026:	0e1b      	lsrs	r3, r3, #24
34009028:	f003 0307 	and.w	r3, r3, #7
}
3400902c:	4618      	mov	r0, r3
3400902e:	46bd      	mov	sp, r7
34009030:	f85d 7b04 	ldr.w	r7, [sp], #4
34009034:	4770      	bx	lr
34009036:	bf00      	nop
34009038:	56028000 	.word	0x56028000

3400903c <LL_RCC_PLL3P_IsEnabled>:
{
3400903c:	b480      	push	{r7}
3400903e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34009040:	4b07      	ldr	r3, [pc, #28]	@ (34009060 <LL_RCC_PLL3P_IsEnabled+0x24>)
34009042:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34009046:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400904a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400904e:	d101      	bne.n	34009054 <LL_RCC_PLL3P_IsEnabled+0x18>
34009050:	2301      	movs	r3, #1
34009052:	e000      	b.n	34009056 <LL_RCC_PLL3P_IsEnabled+0x1a>
34009054:	2300      	movs	r3, #0
}
34009056:	4618      	mov	r0, r3
34009058:	46bd      	mov	sp, r7
3400905a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400905e:	4770      	bx	lr
34009060:	56028000 	.word	0x56028000

34009064 <LL_RCC_PLL3_GetFRACN>:
{
34009064:	b480      	push	{r7}
34009066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34009068:	4b04      	ldr	r3, [pc, #16]	@ (3400907c <LL_RCC_PLL3_GetFRACN+0x18>)
3400906a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400906e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34009072:	4618      	mov	r0, r3
34009074:	46bd      	mov	sp, r7
34009076:	f85d 7b04 	ldr.w	r7, [sp], #4
3400907a:	4770      	bx	lr
3400907c:	56028000 	.word	0x56028000

34009080 <LL_RCC_PLL4_GetSource>:
{
34009080:	b480      	push	{r7}
34009082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34009084:	4b04      	ldr	r3, [pc, #16]	@ (34009098 <LL_RCC_PLL4_GetSource+0x18>)
34009086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400908a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400908e:	4618      	mov	r0, r3
34009090:	46bd      	mov	sp, r7
34009092:	f85d 7b04 	ldr.w	r7, [sp], #4
34009096:	4770      	bx	lr
34009098:	56028000 	.word	0x56028000

3400909c <LL_RCC_PLL4_IsReady>:
{
3400909c:	b480      	push	{r7}
3400909e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340090a0:	4b07      	ldr	r3, [pc, #28]	@ (340090c0 <LL_RCC_PLL4_IsReady+0x24>)
340090a2:	685b      	ldr	r3, [r3, #4]
340090a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340090a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340090ac:	d101      	bne.n	340090b2 <LL_RCC_PLL4_IsReady+0x16>
340090ae:	2301      	movs	r3, #1
340090b0:	e000      	b.n	340090b4 <LL_RCC_PLL4_IsReady+0x18>
340090b2:	2300      	movs	r3, #0
}
340090b4:	4618      	mov	r0, r3
340090b6:	46bd      	mov	sp, r7
340090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
340090bc:	4770      	bx	lr
340090be:	bf00      	nop
340090c0:	56028000 	.word	0x56028000

340090c4 <LL_RCC_PLL4_IsEnabledBypass>:
{
340090c4:	b480      	push	{r7}
340090c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340090c8:	4b07      	ldr	r3, [pc, #28]	@ (340090e8 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
340090ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340090ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340090d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340090d6:	d101      	bne.n	340090dc <LL_RCC_PLL4_IsEnabledBypass+0x18>
340090d8:	2301      	movs	r3, #1
340090da:	e000      	b.n	340090de <LL_RCC_PLL4_IsEnabledBypass+0x1a>
340090dc:	2300      	movs	r3, #0
}
340090de:	4618      	mov	r0, r3
340090e0:	46bd      	mov	sp, r7
340090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
340090e6:	4770      	bx	lr
340090e8:	56028000 	.word	0x56028000

340090ec <LL_RCC_PLL4_GetN>:
{
340090ec:	b480      	push	{r7}
340090ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
340090f0:	4b05      	ldr	r3, [pc, #20]	@ (34009108 <LL_RCC_PLL4_GetN+0x1c>)
340090f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340090f6:	0a1b      	lsrs	r3, r3, #8
340090f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
340090fc:	4618      	mov	r0, r3
340090fe:	46bd      	mov	sp, r7
34009100:	f85d 7b04 	ldr.w	r7, [sp], #4
34009104:	4770      	bx	lr
34009106:	bf00      	nop
34009108:	56028000 	.word	0x56028000

3400910c <LL_RCC_PLL4_GetM>:
{
3400910c:	b480      	push	{r7}
3400910e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34009110:	4b05      	ldr	r3, [pc, #20]	@ (34009128 <LL_RCC_PLL4_GetM+0x1c>)
34009112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34009116:	0d1b      	lsrs	r3, r3, #20
34009118:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3400911c:	4618      	mov	r0, r3
3400911e:	46bd      	mov	sp, r7
34009120:	f85d 7b04 	ldr.w	r7, [sp], #4
34009124:	4770      	bx	lr
34009126:	bf00      	nop
34009128:	56028000 	.word	0x56028000

3400912c <LL_RCC_PLL4_GetP1>:
{
3400912c:	b480      	push	{r7}
3400912e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34009130:	4b05      	ldr	r3, [pc, #20]	@ (34009148 <LL_RCC_PLL4_GetP1+0x1c>)
34009132:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34009136:	0edb      	lsrs	r3, r3, #27
34009138:	f003 0307 	and.w	r3, r3, #7
}
3400913c:	4618      	mov	r0, r3
3400913e:	46bd      	mov	sp, r7
34009140:	f85d 7b04 	ldr.w	r7, [sp], #4
34009144:	4770      	bx	lr
34009146:	bf00      	nop
34009148:	56028000 	.word	0x56028000

3400914c <LL_RCC_PLL4_GetP2>:
{
3400914c:	b480      	push	{r7}
3400914e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34009150:	4b05      	ldr	r3, [pc, #20]	@ (34009168 <LL_RCC_PLL4_GetP2+0x1c>)
34009152:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34009156:	0e1b      	lsrs	r3, r3, #24
34009158:	f003 0307 	and.w	r3, r3, #7
}
3400915c:	4618      	mov	r0, r3
3400915e:	46bd      	mov	sp, r7
34009160:	f85d 7b04 	ldr.w	r7, [sp], #4
34009164:	4770      	bx	lr
34009166:	bf00      	nop
34009168:	56028000 	.word	0x56028000

3400916c <LL_RCC_PLL4P_IsEnabled>:
{
3400916c:	b480      	push	{r7}
3400916e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
34009170:	4b07      	ldr	r3, [pc, #28]	@ (34009190 <LL_RCC_PLL4P_IsEnabled+0x24>)
34009172:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34009176:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400917a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400917e:	d101      	bne.n	34009184 <LL_RCC_PLL4P_IsEnabled+0x18>
34009180:	2301      	movs	r3, #1
34009182:	e000      	b.n	34009186 <LL_RCC_PLL4P_IsEnabled+0x1a>
34009184:	2300      	movs	r3, #0
}
34009186:	4618      	mov	r0, r3
34009188:	46bd      	mov	sp, r7
3400918a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400918e:	4770      	bx	lr
34009190:	56028000 	.word	0x56028000

34009194 <LL_RCC_PLL4_GetFRACN>:
{
34009194:	b480      	push	{r7}
34009196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34009198:	4b04      	ldr	r3, [pc, #16]	@ (340091ac <LL_RCC_PLL4_GetFRACN+0x18>)
3400919a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3400919e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
340091a2:	4618      	mov	r0, r3
340091a4:	46bd      	mov	sp, r7
340091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
340091aa:	4770      	bx	lr
340091ac:	56028000 	.word	0x56028000

340091b0 <LL_RCC_IC3_Enable>:
{
340091b0:	b480      	push	{r7}
340091b2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340091b4:	4b04      	ldr	r3, [pc, #16]	@ (340091c8 <LL_RCC_IC3_Enable+0x18>)
340091b6:	2204      	movs	r2, #4
340091b8:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340091bc:	bf00      	nop
340091be:	46bd      	mov	sp, r7
340091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
340091c4:	4770      	bx	lr
340091c6:	bf00      	nop
340091c8:	56028000 	.word	0x56028000

340091cc <LL_RCC_IC3_IsEnabled>:
{
340091cc:	b480      	push	{r7}
340091ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
340091d0:	4b07      	ldr	r3, [pc, #28]	@ (340091f0 <LL_RCC_IC3_IsEnabled+0x24>)
340091d2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340091d6:	f003 0304 	and.w	r3, r3, #4
340091da:	2b04      	cmp	r3, #4
340091dc:	d101      	bne.n	340091e2 <LL_RCC_IC3_IsEnabled+0x16>
340091de:	2301      	movs	r3, #1
340091e0:	e000      	b.n	340091e4 <LL_RCC_IC3_IsEnabled+0x18>
340091e2:	2300      	movs	r3, #0
}
340091e4:	4618      	mov	r0, r3
340091e6:	46bd      	mov	sp, r7
340091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340091ec:	4770      	bx	lr
340091ee:	bf00      	nop
340091f0:	56028000 	.word	0x56028000

340091f4 <LL_RCC_IC3_GetSource>:
{
340091f4:	b480      	push	{r7}
340091f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
340091f8:	4b04      	ldr	r3, [pc, #16]	@ (3400920c <LL_RCC_IC3_GetSource+0x18>)
340091fa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
340091fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009202:	4618      	mov	r0, r3
34009204:	46bd      	mov	sp, r7
34009206:	f85d 7b04 	ldr.w	r7, [sp], #4
3400920a:	4770      	bx	lr
3400920c:	56028000 	.word	0x56028000

34009210 <LL_RCC_IC3_GetDivider>:
{
34009210:	b480      	push	{r7}
34009212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009214:	4b05      	ldr	r3, [pc, #20]	@ (3400922c <LL_RCC_IC3_GetDivider+0x1c>)
34009216:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400921a:	0c1b      	lsrs	r3, r3, #16
3400921c:	b2db      	uxtb	r3, r3
3400921e:	3301      	adds	r3, #1
}
34009220:	4618      	mov	r0, r3
34009222:	46bd      	mov	sp, r7
34009224:	f85d 7b04 	ldr.w	r7, [sp], #4
34009228:	4770      	bx	lr
3400922a:	bf00      	nop
3400922c:	56028000 	.word	0x56028000

34009230 <LL_RCC_IC4_Enable>:
{
34009230:	b480      	push	{r7}
34009232:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34009234:	4b04      	ldr	r3, [pc, #16]	@ (34009248 <LL_RCC_IC4_Enable+0x18>)
34009236:	2208      	movs	r2, #8
34009238:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400923c:	bf00      	nop
3400923e:	46bd      	mov	sp, r7
34009240:	f85d 7b04 	ldr.w	r7, [sp], #4
34009244:	4770      	bx	lr
34009246:	bf00      	nop
34009248:	56028000 	.word	0x56028000

3400924c <LL_RCC_IC4_IsEnabled>:
{
3400924c:	b480      	push	{r7}
3400924e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34009250:	4b07      	ldr	r3, [pc, #28]	@ (34009270 <LL_RCC_IC4_IsEnabled+0x24>)
34009252:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009256:	f003 0308 	and.w	r3, r3, #8
3400925a:	2b08      	cmp	r3, #8
3400925c:	d101      	bne.n	34009262 <LL_RCC_IC4_IsEnabled+0x16>
3400925e:	2301      	movs	r3, #1
34009260:	e000      	b.n	34009264 <LL_RCC_IC4_IsEnabled+0x18>
34009262:	2300      	movs	r3, #0
}
34009264:	4618      	mov	r0, r3
34009266:	46bd      	mov	sp, r7
34009268:	f85d 7b04 	ldr.w	r7, [sp], #4
3400926c:	4770      	bx	lr
3400926e:	bf00      	nop
34009270:	56028000 	.word	0x56028000

34009274 <LL_RCC_IC4_GetSource>:
{
34009274:	b480      	push	{r7}
34009276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009278:	4b04      	ldr	r3, [pc, #16]	@ (3400928c <LL_RCC_IC4_GetSource+0x18>)
3400927a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400927e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009282:	4618      	mov	r0, r3
34009284:	46bd      	mov	sp, r7
34009286:	f85d 7b04 	ldr.w	r7, [sp], #4
3400928a:	4770      	bx	lr
3400928c:	56028000 	.word	0x56028000

34009290 <LL_RCC_IC4_GetDivider>:
{
34009290:	b480      	push	{r7}
34009292:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009294:	4b05      	ldr	r3, [pc, #20]	@ (340092ac <LL_RCC_IC4_GetDivider+0x1c>)
34009296:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400929a:	0c1b      	lsrs	r3, r3, #16
3400929c:	b2db      	uxtb	r3, r3
3400929e:	3301      	adds	r3, #1
}
340092a0:	4618      	mov	r0, r3
340092a2:	46bd      	mov	sp, r7
340092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340092a8:	4770      	bx	lr
340092aa:	bf00      	nop
340092ac:	56028000 	.word	0x56028000

340092b0 <LL_RCC_IC5_Enable>:
{
340092b0:	b480      	push	{r7}
340092b2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340092b4:	4b04      	ldr	r3, [pc, #16]	@ (340092c8 <LL_RCC_IC5_Enable+0x18>)
340092b6:	2210      	movs	r2, #16
340092b8:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340092bc:	bf00      	nop
340092be:	46bd      	mov	sp, r7
340092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
340092c4:	4770      	bx	lr
340092c6:	bf00      	nop
340092c8:	56028000 	.word	0x56028000

340092cc <LL_RCC_IC5_IsEnabled>:
{
340092cc:	b480      	push	{r7}
340092ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
340092d0:	4b07      	ldr	r3, [pc, #28]	@ (340092f0 <LL_RCC_IC5_IsEnabled+0x24>)
340092d2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340092d6:	f003 0310 	and.w	r3, r3, #16
340092da:	2b10      	cmp	r3, #16
340092dc:	d101      	bne.n	340092e2 <LL_RCC_IC5_IsEnabled+0x16>
340092de:	2301      	movs	r3, #1
340092e0:	e000      	b.n	340092e4 <LL_RCC_IC5_IsEnabled+0x18>
340092e2:	2300      	movs	r3, #0
}
340092e4:	4618      	mov	r0, r3
340092e6:	46bd      	mov	sp, r7
340092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340092ec:	4770      	bx	lr
340092ee:	bf00      	nop
340092f0:	56028000 	.word	0x56028000

340092f4 <LL_RCC_IC5_GetSource>:
{
340092f4:	b480      	push	{r7}
340092f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340092f8:	4b04      	ldr	r3, [pc, #16]	@ (3400930c <LL_RCC_IC5_GetSource+0x18>)
340092fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
340092fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009302:	4618      	mov	r0, r3
34009304:	46bd      	mov	sp, r7
34009306:	f85d 7b04 	ldr.w	r7, [sp], #4
3400930a:	4770      	bx	lr
3400930c:	56028000 	.word	0x56028000

34009310 <LL_RCC_IC5_GetDivider>:
{
34009310:	b480      	push	{r7}
34009312:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34009314:	4b05      	ldr	r3, [pc, #20]	@ (3400932c <LL_RCC_IC5_GetDivider+0x1c>)
34009316:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400931a:	0c1b      	lsrs	r3, r3, #16
3400931c:	b2db      	uxtb	r3, r3
3400931e:	3301      	adds	r3, #1
}
34009320:	4618      	mov	r0, r3
34009322:	46bd      	mov	sp, r7
34009324:	f85d 7b04 	ldr.w	r7, [sp], #4
34009328:	4770      	bx	lr
3400932a:	bf00      	nop
3400932c:	56028000 	.word	0x56028000

34009330 <LL_RCC_IC7_Enable>:
{
34009330:	b480      	push	{r7}
34009332:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34009334:	4b04      	ldr	r3, [pc, #16]	@ (34009348 <LL_RCC_IC7_Enable+0x18>)
34009336:	2240      	movs	r2, #64	@ 0x40
34009338:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400933c:	bf00      	nop
3400933e:	46bd      	mov	sp, r7
34009340:	f85d 7b04 	ldr.w	r7, [sp], #4
34009344:	4770      	bx	lr
34009346:	bf00      	nop
34009348:	56028000 	.word	0x56028000

3400934c <LL_RCC_IC7_IsEnabled>:
{
3400934c:	b480      	push	{r7}
3400934e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34009350:	4b07      	ldr	r3, [pc, #28]	@ (34009370 <LL_RCC_IC7_IsEnabled+0x24>)
34009352:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400935a:	2b40      	cmp	r3, #64	@ 0x40
3400935c:	d101      	bne.n	34009362 <LL_RCC_IC7_IsEnabled+0x16>
3400935e:	2301      	movs	r3, #1
34009360:	e000      	b.n	34009364 <LL_RCC_IC7_IsEnabled+0x18>
34009362:	2300      	movs	r3, #0
}
34009364:	4618      	mov	r0, r3
34009366:	46bd      	mov	sp, r7
34009368:	f85d 7b04 	ldr.w	r7, [sp], #4
3400936c:	4770      	bx	lr
3400936e:	bf00      	nop
34009370:	56028000 	.word	0x56028000

34009374 <LL_RCC_IC7_GetSource>:
{
34009374:	b480      	push	{r7}
34009376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009378:	4b04      	ldr	r3, [pc, #16]	@ (3400938c <LL_RCC_IC7_GetSource+0x18>)
3400937a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400937e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009382:	4618      	mov	r0, r3
34009384:	46bd      	mov	sp, r7
34009386:	f85d 7b04 	ldr.w	r7, [sp], #4
3400938a:	4770      	bx	lr
3400938c:	56028000 	.word	0x56028000

34009390 <LL_RCC_IC7_GetDivider>:
{
34009390:	b480      	push	{r7}
34009392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34009394:	4b05      	ldr	r3, [pc, #20]	@ (340093ac <LL_RCC_IC7_GetDivider+0x1c>)
34009396:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400939a:	0c1b      	lsrs	r3, r3, #16
3400939c:	b2db      	uxtb	r3, r3
3400939e:	3301      	adds	r3, #1
}
340093a0:	4618      	mov	r0, r3
340093a2:	46bd      	mov	sp, r7
340093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340093a8:	4770      	bx	lr
340093aa:	bf00      	nop
340093ac:	56028000 	.word	0x56028000

340093b0 <LL_RCC_IC8_Enable>:
{
340093b0:	b480      	push	{r7}
340093b2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340093b4:	4b04      	ldr	r3, [pc, #16]	@ (340093c8 <LL_RCC_IC8_Enable+0x18>)
340093b6:	2280      	movs	r2, #128	@ 0x80
340093b8:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340093bc:	bf00      	nop
340093be:	46bd      	mov	sp, r7
340093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
340093c4:	4770      	bx	lr
340093c6:	bf00      	nop
340093c8:	56028000 	.word	0x56028000

340093cc <LL_RCC_IC8_IsEnabled>:
{
340093cc:	b480      	push	{r7}
340093ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
340093d0:	4b07      	ldr	r3, [pc, #28]	@ (340093f0 <LL_RCC_IC8_IsEnabled+0x24>)
340093d2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340093d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340093da:	2b80      	cmp	r3, #128	@ 0x80
340093dc:	d101      	bne.n	340093e2 <LL_RCC_IC8_IsEnabled+0x16>
340093de:	2301      	movs	r3, #1
340093e0:	e000      	b.n	340093e4 <LL_RCC_IC8_IsEnabled+0x18>
340093e2:	2300      	movs	r3, #0
}
340093e4:	4618      	mov	r0, r3
340093e6:	46bd      	mov	sp, r7
340093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340093ec:	4770      	bx	lr
340093ee:	bf00      	nop
340093f0:	56028000 	.word	0x56028000

340093f4 <LL_RCC_IC8_GetSource>:
{
340093f4:	b480      	push	{r7}
340093f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340093f8:	4b04      	ldr	r3, [pc, #16]	@ (3400940c <LL_RCC_IC8_GetSource+0x18>)
340093fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
340093fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009402:	4618      	mov	r0, r3
34009404:	46bd      	mov	sp, r7
34009406:	f85d 7b04 	ldr.w	r7, [sp], #4
3400940a:	4770      	bx	lr
3400940c:	56028000 	.word	0x56028000

34009410 <LL_RCC_IC8_GetDivider>:
{
34009410:	b480      	push	{r7}
34009412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34009414:	4b05      	ldr	r3, [pc, #20]	@ (3400942c <LL_RCC_IC8_GetDivider+0x1c>)
34009416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400941a:	0c1b      	lsrs	r3, r3, #16
3400941c:	b2db      	uxtb	r3, r3
3400941e:	3301      	adds	r3, #1
}
34009420:	4618      	mov	r0, r3
34009422:	46bd      	mov	sp, r7
34009424:	f85d 7b04 	ldr.w	r7, [sp], #4
34009428:	4770      	bx	lr
3400942a:	bf00      	nop
3400942c:	56028000 	.word	0x56028000

34009430 <LL_RCC_IC9_Enable>:
{
34009430:	b480      	push	{r7}
34009432:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34009434:	4b04      	ldr	r3, [pc, #16]	@ (34009448 <LL_RCC_IC9_Enable+0x18>)
34009436:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400943a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400943e:	bf00      	nop
34009440:	46bd      	mov	sp, r7
34009442:	f85d 7b04 	ldr.w	r7, [sp], #4
34009446:	4770      	bx	lr
34009448:	56028000 	.word	0x56028000

3400944c <LL_RCC_IC9_IsEnabled>:
{
3400944c:	b480      	push	{r7}
3400944e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34009450:	4b07      	ldr	r3, [pc, #28]	@ (34009470 <LL_RCC_IC9_IsEnabled+0x24>)
34009452:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400945a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400945e:	d101      	bne.n	34009464 <LL_RCC_IC9_IsEnabled+0x18>
34009460:	2301      	movs	r3, #1
34009462:	e000      	b.n	34009466 <LL_RCC_IC9_IsEnabled+0x1a>
34009464:	2300      	movs	r3, #0
}
34009466:	4618      	mov	r0, r3
34009468:	46bd      	mov	sp, r7
3400946a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400946e:	4770      	bx	lr
34009470:	56028000 	.word	0x56028000

34009474 <LL_RCC_IC9_GetSource>:
{
34009474:	b480      	push	{r7}
34009476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34009478:	4b04      	ldr	r3, [pc, #16]	@ (3400948c <LL_RCC_IC9_GetSource+0x18>)
3400947a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400947e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009482:	4618      	mov	r0, r3
34009484:	46bd      	mov	sp, r7
34009486:	f85d 7b04 	ldr.w	r7, [sp], #4
3400948a:	4770      	bx	lr
3400948c:	56028000 	.word	0x56028000

34009490 <LL_RCC_IC9_GetDivider>:
{
34009490:	b480      	push	{r7}
34009492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34009494:	4b05      	ldr	r3, [pc, #20]	@ (340094ac <LL_RCC_IC9_GetDivider+0x1c>)
34009496:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400949a:	0c1b      	lsrs	r3, r3, #16
3400949c:	b2db      	uxtb	r3, r3
3400949e:	3301      	adds	r3, #1
}
340094a0:	4618      	mov	r0, r3
340094a2:	46bd      	mov	sp, r7
340094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340094a8:	4770      	bx	lr
340094aa:	bf00      	nop
340094ac:	56028000 	.word	0x56028000

340094b0 <LL_RCC_IC10_Enable>:
{
340094b0:	b480      	push	{r7}
340094b2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340094b4:	4b04      	ldr	r3, [pc, #16]	@ (340094c8 <LL_RCC_IC10_Enable+0x18>)
340094b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
340094ba:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340094be:	bf00      	nop
340094c0:	46bd      	mov	sp, r7
340094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340094c6:	4770      	bx	lr
340094c8:	56028000 	.word	0x56028000

340094cc <LL_RCC_IC10_IsEnabled>:
{
340094cc:	b480      	push	{r7}
340094ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340094d0:	4b07      	ldr	r3, [pc, #28]	@ (340094f0 <LL_RCC_IC10_IsEnabled+0x24>)
340094d2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340094d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340094da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340094de:	d101      	bne.n	340094e4 <LL_RCC_IC10_IsEnabled+0x18>
340094e0:	2301      	movs	r3, #1
340094e2:	e000      	b.n	340094e6 <LL_RCC_IC10_IsEnabled+0x1a>
340094e4:	2300      	movs	r3, #0
}
340094e6:	4618      	mov	r0, r3
340094e8:	46bd      	mov	sp, r7
340094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340094ee:	4770      	bx	lr
340094f0:	56028000 	.word	0x56028000

340094f4 <LL_RCC_IC10_GetSource>:
{
340094f4:	b480      	push	{r7}
340094f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340094f8:	4b04      	ldr	r3, [pc, #16]	@ (3400950c <LL_RCC_IC10_GetSource+0x18>)
340094fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
340094fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009502:	4618      	mov	r0, r3
34009504:	46bd      	mov	sp, r7
34009506:	f85d 7b04 	ldr.w	r7, [sp], #4
3400950a:	4770      	bx	lr
3400950c:	56028000 	.word	0x56028000

34009510 <LL_RCC_IC10_GetDivider>:
{
34009510:	b480      	push	{r7}
34009512:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009514:	4b05      	ldr	r3, [pc, #20]	@ (3400952c <LL_RCC_IC10_GetDivider+0x1c>)
34009516:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400951a:	0c1b      	lsrs	r3, r3, #16
3400951c:	b2db      	uxtb	r3, r3
3400951e:	3301      	adds	r3, #1
}
34009520:	4618      	mov	r0, r3
34009522:	46bd      	mov	sp, r7
34009524:	f85d 7b04 	ldr.w	r7, [sp], #4
34009528:	4770      	bx	lr
3400952a:	bf00      	nop
3400952c:	56028000 	.word	0x56028000

34009530 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
34009530:	b480      	push	{r7}
34009532:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34009534:	4b04      	ldr	r3, [pc, #16]	@ (34009548 <LL_RCC_IC12_Enable+0x18>)
34009536:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3400953a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400953e:	bf00      	nop
34009540:	46bd      	mov	sp, r7
34009542:	f85d 7b04 	ldr.w	r7, [sp], #4
34009546:	4770      	bx	lr
34009548:	56028000 	.word	0x56028000

3400954c <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
3400954c:	b480      	push	{r7}
3400954e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34009550:	4b07      	ldr	r3, [pc, #28]	@ (34009570 <LL_RCC_IC12_IsEnabled+0x24>)
34009552:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400955a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3400955e:	d101      	bne.n	34009564 <LL_RCC_IC12_IsEnabled+0x18>
34009560:	2301      	movs	r3, #1
34009562:	e000      	b.n	34009566 <LL_RCC_IC12_IsEnabled+0x1a>
34009564:	2300      	movs	r3, #0
}
34009566:	4618      	mov	r0, r3
34009568:	46bd      	mov	sp, r7
3400956a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400956e:	4770      	bx	lr
34009570:	56028000 	.word	0x56028000

34009574 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
34009574:	b480      	push	{r7}
34009576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009578:	4b04      	ldr	r3, [pc, #16]	@ (3400958c <LL_RCC_IC12_GetSource+0x18>)
3400957a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400957e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009582:	4618      	mov	r0, r3
34009584:	46bd      	mov	sp, r7
34009586:	f85d 7b04 	ldr.w	r7, [sp], #4
3400958a:	4770      	bx	lr
3400958c:	56028000 	.word	0x56028000

34009590 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
34009590:	b480      	push	{r7}
34009592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009594:	4b05      	ldr	r3, [pc, #20]	@ (340095ac <LL_RCC_IC12_GetDivider+0x1c>)
34009596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400959a:	0c1b      	lsrs	r3, r3, #16
3400959c:	b2db      	uxtb	r3, r3
3400959e:	3301      	adds	r3, #1
}
340095a0:	4618      	mov	r0, r3
340095a2:	46bd      	mov	sp, r7
340095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340095a8:	4770      	bx	lr
340095aa:	bf00      	nop
340095ac:	56028000 	.word	0x56028000

340095b0 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
340095b0:	b480      	push	{r7}
340095b2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
340095b4:	4b04      	ldr	r3, [pc, #16]	@ (340095c8 <LL_RCC_IC13_Enable+0x18>)
340095b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340095ba:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340095be:	bf00      	nop
340095c0:	46bd      	mov	sp, r7
340095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340095c6:	4770      	bx	lr
340095c8:	56028000 	.word	0x56028000

340095cc <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
340095cc:	b480      	push	{r7}
340095ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
340095d0:	4b07      	ldr	r3, [pc, #28]	@ (340095f0 <LL_RCC_IC13_IsEnabled+0x24>)
340095d2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340095d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340095da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340095de:	d101      	bne.n	340095e4 <LL_RCC_IC13_IsEnabled+0x18>
340095e0:	2301      	movs	r3, #1
340095e2:	e000      	b.n	340095e6 <LL_RCC_IC13_IsEnabled+0x1a>
340095e4:	2300      	movs	r3, #0
}
340095e6:	4618      	mov	r0, r3
340095e8:	46bd      	mov	sp, r7
340095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340095ee:	4770      	bx	lr
340095f0:	56028000 	.word	0x56028000

340095f4 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
340095f4:	b480      	push	{r7}
340095f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
340095f8:	4b04      	ldr	r3, [pc, #16]	@ (3400960c <LL_RCC_IC13_GetSource+0x18>)
340095fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
340095fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009602:	4618      	mov	r0, r3
34009604:	46bd      	mov	sp, r7
34009606:	f85d 7b04 	ldr.w	r7, [sp], #4
3400960a:	4770      	bx	lr
3400960c:	56028000 	.word	0x56028000

34009610 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
34009610:	b480      	push	{r7}
34009612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009614:	4b05      	ldr	r3, [pc, #20]	@ (3400962c <LL_RCC_IC13_GetDivider+0x1c>)
34009616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400961a:	0c1b      	lsrs	r3, r3, #16
3400961c:	b2db      	uxtb	r3, r3
3400961e:	3301      	adds	r3, #1
}
34009620:	4618      	mov	r0, r3
34009622:	46bd      	mov	sp, r7
34009624:	f85d 7b04 	ldr.w	r7, [sp], #4
34009628:	4770      	bx	lr
3400962a:	bf00      	nop
3400962c:	56028000 	.word	0x56028000

34009630 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
34009630:	b480      	push	{r7}
34009632:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34009634:	4b04      	ldr	r3, [pc, #16]	@ (34009648 <LL_RCC_IC14_Enable+0x18>)
34009636:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3400963a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400963e:	bf00      	nop
34009640:	46bd      	mov	sp, r7
34009642:	f85d 7b04 	ldr.w	r7, [sp], #4
34009646:	4770      	bx	lr
34009648:	56028000 	.word	0x56028000

3400964c <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
3400964c:	b480      	push	{r7}
3400964e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34009650:	4b07      	ldr	r3, [pc, #28]	@ (34009670 <LL_RCC_IC14_IsEnabled+0x24>)
34009652:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400965a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400965e:	d101      	bne.n	34009664 <LL_RCC_IC14_IsEnabled+0x18>
34009660:	2301      	movs	r3, #1
34009662:	e000      	b.n	34009666 <LL_RCC_IC14_IsEnabled+0x1a>
34009664:	2300      	movs	r3, #0
}
34009666:	4618      	mov	r0, r3
34009668:	46bd      	mov	sp, r7
3400966a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400966e:	4770      	bx	lr
34009670:	56028000 	.word	0x56028000

34009674 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
34009674:	b480      	push	{r7}
34009676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34009678:	4b04      	ldr	r3, [pc, #16]	@ (3400968c <LL_RCC_IC14_GetSource+0x18>)
3400967a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400967e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009682:	4618      	mov	r0, r3
34009684:	46bd      	mov	sp, r7
34009686:	f85d 7b04 	ldr.w	r7, [sp], #4
3400968a:	4770      	bx	lr
3400968c:	56028000 	.word	0x56028000

34009690 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
34009690:	b480      	push	{r7}
34009692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34009694:	4b05      	ldr	r3, [pc, #20]	@ (340096ac <LL_RCC_IC14_GetDivider+0x1c>)
34009696:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400969a:	0c1b      	lsrs	r3, r3, #16
3400969c:	b2db      	uxtb	r3, r3
3400969e:	3301      	adds	r3, #1
}
340096a0:	4618      	mov	r0, r3
340096a2:	46bd      	mov	sp, r7
340096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340096a8:	4770      	bx	lr
340096aa:	bf00      	nop
340096ac:	56028000 	.word	0x56028000

340096b0 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
340096b0:	b480      	push	{r7}
340096b2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340096b4:	4b04      	ldr	r3, [pc, #16]	@ (340096c8 <LL_RCC_IC15_Enable+0x18>)
340096b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340096ba:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340096be:	bf00      	nop
340096c0:	46bd      	mov	sp, r7
340096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340096c6:	4770      	bx	lr
340096c8:	56028000 	.word	0x56028000

340096cc <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
340096cc:	b480      	push	{r7}
340096ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
340096d0:	4b07      	ldr	r3, [pc, #28]	@ (340096f0 <LL_RCC_IC15_IsEnabled+0x24>)
340096d2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340096d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
340096da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
340096de:	d101      	bne.n	340096e4 <LL_RCC_IC15_IsEnabled+0x18>
340096e0:	2301      	movs	r3, #1
340096e2:	e000      	b.n	340096e6 <LL_RCC_IC15_IsEnabled+0x1a>
340096e4:	2300      	movs	r3, #0
}
340096e6:	4618      	mov	r0, r3
340096e8:	46bd      	mov	sp, r7
340096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340096ee:	4770      	bx	lr
340096f0:	56028000 	.word	0x56028000

340096f4 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
340096f4:	b480      	push	{r7}
340096f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340096f8:	4b04      	ldr	r3, [pc, #16]	@ (3400970c <LL_RCC_IC15_GetSource+0x18>)
340096fa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340096fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009702:	4618      	mov	r0, r3
34009704:	46bd      	mov	sp, r7
34009706:	f85d 7b04 	ldr.w	r7, [sp], #4
3400970a:	4770      	bx	lr
3400970c:	56028000 	.word	0x56028000

34009710 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
34009710:	b480      	push	{r7}
34009712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34009714:	4b05      	ldr	r3, [pc, #20]	@ (3400972c <LL_RCC_IC15_GetDivider+0x1c>)
34009716:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400971a:	0c1b      	lsrs	r3, r3, #16
3400971c:	b2db      	uxtb	r3, r3
3400971e:	3301      	adds	r3, #1
}
34009720:	4618      	mov	r0, r3
34009722:	46bd      	mov	sp, r7
34009724:	f85d 7b04 	ldr.w	r7, [sp], #4
34009728:	4770      	bx	lr
3400972a:	bf00      	nop
3400972c:	56028000 	.word	0x56028000

34009730 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34009730:	b480      	push	{r7}
34009732:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34009734:	4b04      	ldr	r3, [pc, #16]	@ (34009748 <LL_RCC_IC16_Enable+0x18>)
34009736:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400973a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400973e:	bf00      	nop
34009740:	46bd      	mov	sp, r7
34009742:	f85d 7b04 	ldr.w	r7, [sp], #4
34009746:	4770      	bx	lr
34009748:	56028000 	.word	0x56028000

3400974c <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
3400974c:	b480      	push	{r7}
3400974e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34009750:	4b07      	ldr	r3, [pc, #28]	@ (34009770 <LL_RCC_IC16_IsEnabled+0x24>)
34009752:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400975a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3400975e:	d101      	bne.n	34009764 <LL_RCC_IC16_IsEnabled+0x18>
34009760:	2301      	movs	r3, #1
34009762:	e000      	b.n	34009766 <LL_RCC_IC16_IsEnabled+0x1a>
34009764:	2300      	movs	r3, #0
}
34009766:	4618      	mov	r0, r3
34009768:	46bd      	mov	sp, r7
3400976a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400976e:	4770      	bx	lr
34009770:	56028000 	.word	0x56028000

34009774 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
34009774:	b480      	push	{r7}
34009776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009778:	4b04      	ldr	r3, [pc, #16]	@ (3400978c <LL_RCC_IC16_GetSource+0x18>)
3400977a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400977e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009782:	4618      	mov	r0, r3
34009784:	46bd      	mov	sp, r7
34009786:	f85d 7b04 	ldr.w	r7, [sp], #4
3400978a:	4770      	bx	lr
3400978c:	56028000 	.word	0x56028000

34009790 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
34009790:	b480      	push	{r7}
34009792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009794:	4b05      	ldr	r3, [pc, #20]	@ (340097ac <LL_RCC_IC16_GetDivider+0x1c>)
34009796:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400979a:	0c1b      	lsrs	r3, r3, #16
3400979c:	b2db      	uxtb	r3, r3
3400979e:	3301      	adds	r3, #1
}
340097a0:	4618      	mov	r0, r3
340097a2:	46bd      	mov	sp, r7
340097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340097a8:	4770      	bx	lr
340097aa:	bf00      	nop
340097ac:	56028000 	.word	0x56028000

340097b0 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
340097b0:	b480      	push	{r7}
340097b2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
340097b4:	4b04      	ldr	r3, [pc, #16]	@ (340097c8 <LL_RCC_IC17_Enable+0x18>)
340097b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340097ba:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340097be:	bf00      	nop
340097c0:	46bd      	mov	sp, r7
340097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340097c6:	4770      	bx	lr
340097c8:	56028000 	.word	0x56028000

340097cc <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
340097cc:	b480      	push	{r7}
340097ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
340097d0:	4b07      	ldr	r3, [pc, #28]	@ (340097f0 <LL_RCC_IC17_IsEnabled+0x24>)
340097d2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340097d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340097da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340097de:	d101      	bne.n	340097e4 <LL_RCC_IC17_IsEnabled+0x18>
340097e0:	2301      	movs	r3, #1
340097e2:	e000      	b.n	340097e6 <LL_RCC_IC17_IsEnabled+0x1a>
340097e4:	2300      	movs	r3, #0
}
340097e6:	4618      	mov	r0, r3
340097e8:	46bd      	mov	sp, r7
340097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340097ee:	4770      	bx	lr
340097f0:	56028000 	.word	0x56028000

340097f4 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
340097f4:	b480      	push	{r7}
340097f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
340097f8:	4b04      	ldr	r3, [pc, #16]	@ (3400980c <LL_RCC_IC17_GetSource+0x18>)
340097fa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
340097fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009802:	4618      	mov	r0, r3
34009804:	46bd      	mov	sp, r7
34009806:	f85d 7b04 	ldr.w	r7, [sp], #4
3400980a:	4770      	bx	lr
3400980c:	56028000 	.word	0x56028000

34009810 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
34009810:	b480      	push	{r7}
34009812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009814:	4b05      	ldr	r3, [pc, #20]	@ (3400982c <LL_RCC_IC17_GetDivider+0x1c>)
34009816:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400981a:	0c1b      	lsrs	r3, r3, #16
3400981c:	b2db      	uxtb	r3, r3
3400981e:	3301      	adds	r3, #1
}
34009820:	4618      	mov	r0, r3
34009822:	46bd      	mov	sp, r7
34009824:	f85d 7b04 	ldr.w	r7, [sp], #4
34009828:	4770      	bx	lr
3400982a:	bf00      	nop
3400982c:	56028000 	.word	0x56028000

34009830 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34009830:	b480      	push	{r7}
34009832:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34009834:	4b04      	ldr	r3, [pc, #16]	@ (34009848 <LL_RCC_IC18_Enable+0x18>)
34009836:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3400983a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400983e:	bf00      	nop
34009840:	46bd      	mov	sp, r7
34009842:	f85d 7b04 	ldr.w	r7, [sp], #4
34009846:	4770      	bx	lr
34009848:	56028000 	.word	0x56028000

3400984c <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
3400984c:	b480      	push	{r7}
3400984e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34009850:	4b07      	ldr	r3, [pc, #28]	@ (34009870 <LL_RCC_IC18_IsEnabled+0x24>)
34009852:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400985a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400985e:	d101      	bne.n	34009864 <LL_RCC_IC18_IsEnabled+0x18>
34009860:	2301      	movs	r3, #1
34009862:	e000      	b.n	34009866 <LL_RCC_IC18_IsEnabled+0x1a>
34009864:	2300      	movs	r3, #0
}
34009866:	4618      	mov	r0, r3
34009868:	46bd      	mov	sp, r7
3400986a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400986e:	4770      	bx	lr
34009870:	56028000 	.word	0x56028000

34009874 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
34009874:	b480      	push	{r7}
34009876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34009878:	4b04      	ldr	r3, [pc, #16]	@ (3400988c <LL_RCC_IC18_GetSource+0x18>)
3400987a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400987e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009882:	4618      	mov	r0, r3
34009884:	46bd      	mov	sp, r7
34009886:	f85d 7b04 	ldr.w	r7, [sp], #4
3400988a:	4770      	bx	lr
3400988c:	56028000 	.word	0x56028000

34009890 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
34009890:	b480      	push	{r7}
34009892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009894:	4b05      	ldr	r3, [pc, #20]	@ (340098ac <LL_RCC_IC18_GetDivider+0x1c>)
34009896:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400989a:	0c1b      	lsrs	r3, r3, #16
3400989c:	b2db      	uxtb	r3, r3
3400989e:	3301      	adds	r3, #1
}
340098a0:	4618      	mov	r0, r3
340098a2:	46bd      	mov	sp, r7
340098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340098a8:	4770      	bx	lr
340098aa:	bf00      	nop
340098ac:	56028000 	.word	0x56028000

340098b0 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
340098b0:	b480      	push	{r7}
340098b2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
340098b4:	4b04      	ldr	r3, [pc, #16]	@ (340098c8 <LL_RCC_IC19_Enable+0x18>)
340098b6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
340098ba:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340098be:	bf00      	nop
340098c0:	46bd      	mov	sp, r7
340098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340098c6:	4770      	bx	lr
340098c8:	56028000 	.word	0x56028000

340098cc <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
340098cc:	b480      	push	{r7}
340098ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
340098d0:	4b07      	ldr	r3, [pc, #28]	@ (340098f0 <LL_RCC_IC19_IsEnabled+0x24>)
340098d2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340098d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
340098da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340098de:	d101      	bne.n	340098e4 <LL_RCC_IC19_IsEnabled+0x18>
340098e0:	2301      	movs	r3, #1
340098e2:	e000      	b.n	340098e6 <LL_RCC_IC19_IsEnabled+0x1a>
340098e4:	2300      	movs	r3, #0
}
340098e6:	4618      	mov	r0, r3
340098e8:	46bd      	mov	sp, r7
340098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340098ee:	4770      	bx	lr
340098f0:	56028000 	.word	0x56028000

340098f4 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
340098f4:	b480      	push	{r7}
340098f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340098f8:	4b04      	ldr	r3, [pc, #16]	@ (3400990c <LL_RCC_IC19_GetSource+0x18>)
340098fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
340098fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009902:	4618      	mov	r0, r3
34009904:	46bd      	mov	sp, r7
34009906:	f85d 7b04 	ldr.w	r7, [sp], #4
3400990a:	4770      	bx	lr
3400990c:	56028000 	.word	0x56028000

34009910 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
34009910:	b480      	push	{r7}
34009912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009914:	4b05      	ldr	r3, [pc, #20]	@ (3400992c <LL_RCC_IC19_GetDivider+0x1c>)
34009916:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400991a:	0c1b      	lsrs	r3, r3, #16
3400991c:	b2db      	uxtb	r3, r3
3400991e:	3301      	adds	r3, #1
}
34009920:	4618      	mov	r0, r3
34009922:	46bd      	mov	sp, r7
34009924:	f85d 7b04 	ldr.w	r7, [sp], #4
34009928:	4770      	bx	lr
3400992a:	bf00      	nop
3400992c:	56028000 	.word	0x56028000

34009930 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34009930:	b480      	push	{r7}
34009932:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34009934:	4b04      	ldr	r3, [pc, #16]	@ (34009948 <LL_RCC_IC20_Enable+0x18>)
34009936:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3400993a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400993e:	bf00      	nop
34009940:	46bd      	mov	sp, r7
34009942:	f85d 7b04 	ldr.w	r7, [sp], #4
34009946:	4770      	bx	lr
34009948:	56028000 	.word	0x56028000

3400994c <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
3400994c:	b480      	push	{r7}
3400994e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34009950:	4b07      	ldr	r3, [pc, #28]	@ (34009970 <LL_RCC_IC20_IsEnabled+0x24>)
34009952:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009956:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400995a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3400995e:	d101      	bne.n	34009964 <LL_RCC_IC20_IsEnabled+0x18>
34009960:	2301      	movs	r3, #1
34009962:	e000      	b.n	34009966 <LL_RCC_IC20_IsEnabled+0x1a>
34009964:	2300      	movs	r3, #0
}
34009966:	4618      	mov	r0, r3
34009968:	46bd      	mov	sp, r7
3400996a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400996e:	4770      	bx	lr
34009970:	56028000 	.word	0x56028000

34009974 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
34009974:	b480      	push	{r7}
34009976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009978:	4b04      	ldr	r3, [pc, #16]	@ (3400998c <LL_RCC_IC20_GetSource+0x18>)
3400997a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400997e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009982:	4618      	mov	r0, r3
34009984:	46bd      	mov	sp, r7
34009986:	f85d 7b04 	ldr.w	r7, [sp], #4
3400998a:	4770      	bx	lr
3400998c:	56028000 	.word	0x56028000

34009990 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
34009990:	b480      	push	{r7}
34009992:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009994:	4b05      	ldr	r3, [pc, #20]	@ (340099ac <LL_RCC_IC20_GetDivider+0x1c>)
34009996:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400999a:	0c1b      	lsrs	r3, r3, #16
3400999c:	b2db      	uxtb	r3, r3
3400999e:	3301      	adds	r3, #1
}
340099a0:	4618      	mov	r0, r3
340099a2:	46bd      	mov	sp, r7
340099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340099a8:	4770      	bx	lr
340099aa:	bf00      	nop
340099ac:	56028000 	.word	0x56028000

340099b0 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
340099b0:	b480      	push	{r7}
340099b2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340099b4:	4b04      	ldr	r3, [pc, #16]	@ (340099c8 <LL_RCC_CLKP_Enable+0x18>)
340099b6:	2240      	movs	r2, #64	@ 0x40
340099b8:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
340099bc:	bf00      	nop
340099be:	46bd      	mov	sp, r7
340099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
340099c4:	4770      	bx	lr
340099c6:	bf00      	nop
340099c8:	56028000 	.word	0x56028000

340099cc <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
340099cc:	b480      	push	{r7}
340099ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
340099d0:	4b07      	ldr	r3, [pc, #28]	@ (340099f0 <LL_RCC_CLKP_IsEnabled+0x24>)
340099d2:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
340099d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340099da:	2b40      	cmp	r3, #64	@ 0x40
340099dc:	d101      	bne.n	340099e2 <LL_RCC_CLKP_IsEnabled+0x16>
340099de:	2301      	movs	r3, #1
340099e0:	e000      	b.n	340099e4 <LL_RCC_CLKP_IsEnabled+0x18>
340099e2:	2300      	movs	r3, #0
}
340099e4:	4618      	mov	r0, r3
340099e6:	46bd      	mov	sp, r7
340099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340099ec:	4770      	bx	lr
340099ee:	bf00      	nop
340099f0:	56028000 	.word	0x56028000

340099f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
340099f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
340099f8:	f5ad 7d64 	sub.w	sp, sp, #912	@ 0x390
340099fc:	af00      	add	r7, sp, #0
340099fe:	f8c7 037c 	str.w	r0, [r7, #892]	@ 0x37c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
34009a02:	2300      	movs	r3, #0
34009a04:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34009a08:	2300      	movs	r3, #0
34009a0a:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34009a0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a16:	f402 6400 	and.w	r4, r2, #2048	@ 0x800
34009a1a:	2500      	movs	r5, #0
34009a1c:	ea54 0305 	orrs.w	r3, r4, r5
34009a20:	f040 83e0 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a2c:	f04f 0800 	mov.w	r8, #0
34009a30:	f403 0980 	and.w	r9, r3, #4194304	@ 0x400000
34009a34:	ea58 0309 	orrs.w	r3, r8, r9
34009a38:	f040 83d4 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a44:	f04f 0a00 	mov.w	sl, #0
34009a48:	f403 0b00 	and.w	fp, r3, #8388608	@ 0x800000
34009a4c:	ea5a 030b 	orrs.w	r3, sl, fp
34009a50:	f040 83c8 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a5c:	2100      	movs	r1, #0
34009a5e:	f8c7 1370 	str.w	r1, [r7, #880]	@ 0x370
34009a62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34009a66:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
34009a6a:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	@ 0x370
34009a6e:	4603      	mov	r3, r0
34009a70:	460a      	mov	r2, r1
34009a72:	4313      	orrs	r3, r2
34009a74:	f040 83b6 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a80:	f002 0304 	and.w	r3, r2, #4
34009a84:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
34009a88:	2300      	movs	r3, #0
34009a8a:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
34009a8e:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	@ 0x368
34009a92:	4603      	mov	r3, r0
34009a94:	460a      	mov	r2, r1
34009a96:	4313      	orrs	r3, r2
34009a98:	f040 83a4 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009aa4:	f002 0301 	and.w	r3, r2, #1
34009aa8:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
34009aac:	2300      	movs	r3, #0
34009aae:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
34009ab2:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	@ 0x360
34009ab6:	4603      	mov	r3, r0
34009ab8:	460a      	mov	r2, r1
34009aba:	4313      	orrs	r3, r2
34009abc:	f040 8392 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ac0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ac8:	f002 0302 	and.w	r3, r2, #2
34009acc:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
34009ad0:	2300      	movs	r3, #0
34009ad2:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
34009ad6:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
34009ada:	4603      	mov	r3, r0
34009adc:	460a      	mov	r2, r1
34009ade:	4313      	orrs	r3, r2
34009ae0:	f040 8380 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009aec:	f002 0308 	and.w	r3, r2, #8
34009af0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
34009af4:	2300      	movs	r3, #0
34009af6:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
34009afa:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
34009afe:	4603      	mov	r3, r0
34009b00:	460a      	mov	r2, r1
34009b02:	4313      	orrs	r3, r2
34009b04:	f040 836e 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b10:	f002 0310 	and.w	r3, r2, #16
34009b14:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
34009b18:	2300      	movs	r3, #0
34009b1a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
34009b1e:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
34009b22:	4603      	mov	r3, r0
34009b24:	460a      	mov	r2, r1
34009b26:	4313      	orrs	r3, r2
34009b28:	f040 835c 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b34:	f002 0320 	and.w	r3, r2, #32
34009b38:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
34009b3c:	2300      	movs	r3, #0
34009b3e:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
34009b42:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
34009b46:	4603      	mov	r3, r0
34009b48:	460a      	mov	r2, r1
34009b4a:	4313      	orrs	r3, r2
34009b4c:	f040 834a 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b58:	f002 0340 	and.w	r3, r2, #64	@ 0x40
34009b5c:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
34009b60:	2300      	movs	r3, #0
34009b62:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
34009b66:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
34009b6a:	4603      	mov	r3, r0
34009b6c:	460a      	mov	r2, r1
34009b6e:	4313      	orrs	r3, r2
34009b70:	f040 8338 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
34009b80:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
34009b84:	2300      	movs	r3, #0
34009b86:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
34009b8a:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
34009b8e:	4603      	mov	r3, r0
34009b90:	460a      	mov	r2, r1
34009b92:	4313      	orrs	r3, r2
34009b94:	f040 8326 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ba0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
34009ba4:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
34009ba8:	2300      	movs	r3, #0
34009baa:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
34009bae:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
34009bb2:	4603      	mov	r3, r0
34009bb4:	460a      	mov	r2, r1
34009bb6:	4313      	orrs	r3, r2
34009bb8:	f040 8314 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009bbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009bc4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
34009bc8:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
34009bcc:	2300      	movs	r3, #0
34009bce:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
34009bd2:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
34009bd6:	4603      	mov	r3, r0
34009bd8:	460a      	mov	r2, r1
34009bda:	4313      	orrs	r3, r2
34009bdc:	f040 8302 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009be0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
34009be8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
34009bec:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
34009bf0:	2300      	movs	r3, #0
34009bf2:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
34009bf6:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
34009bfa:	4603      	mov	r3, r0
34009bfc:	460a      	mov	r2, r1
34009bfe:	4313      	orrs	r3, r2
34009c00:	f040 82f0 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c0c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
34009c10:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
34009c14:	2300      	movs	r3, #0
34009c16:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
34009c1a:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
34009c1e:	4603      	mov	r3, r0
34009c20:	460a      	mov	r2, r1
34009c22:	4313      	orrs	r3, r2
34009c24:	f040 82de 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c30:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
34009c34:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
34009c38:	2300      	movs	r3, #0
34009c3a:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
34009c3e:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	@ 0x308
34009c42:	4603      	mov	r3, r0
34009c44:	460a      	mov	r2, r1
34009c46:	4313      	orrs	r3, r2
34009c48:	f040 82cc 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c54:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
34009c58:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
34009c5c:	2300      	movs	r3, #0
34009c5e:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
34009c62:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
34009c66:	4603      	mov	r3, r0
34009c68:	460a      	mov	r2, r1
34009c6a:	4313      	orrs	r3, r2
34009c6c:	f040 82ba 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
34009c7c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
34009c80:	2300      	movs	r3, #0
34009c82:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
34009c86:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
34009c8a:	4603      	mov	r3, r0
34009c8c:	460a      	mov	r2, r1
34009c8e:	4313      	orrs	r3, r2
34009c90:	f040 82a8 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c9c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
34009ca0:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
34009ca4:	2300      	movs	r3, #0
34009ca6:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
34009caa:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
34009cae:	4603      	mov	r3, r0
34009cb0:	460a      	mov	r2, r1
34009cb2:	4313      	orrs	r3, r2
34009cb4:	f040 8296 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009cb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009cc0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
34009cc4:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
34009cc8:	2300      	movs	r3, #0
34009cca:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
34009cce:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
34009cd2:	4603      	mov	r3, r0
34009cd4:	460a      	mov	r2, r1
34009cd6:	4313      	orrs	r3, r2
34009cd8:	f040 8284 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009cdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ce4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
34009ce8:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
34009cec:	2300      	movs	r3, #0
34009cee:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
34009cf2:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
34009cf6:	4603      	mov	r3, r0
34009cf8:	460a      	mov	r2, r1
34009cfa:	4313      	orrs	r3, r2
34009cfc:	f040 8272 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d08:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34009d0c:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
34009d10:	2300      	movs	r3, #0
34009d12:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
34009d16:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
34009d1a:	4603      	mov	r3, r0
34009d1c:	460a      	mov	r2, r1
34009d1e:	4313      	orrs	r3, r2
34009d20:	f040 8260 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34009d30:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
34009d34:	2300      	movs	r3, #0
34009d36:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
34009d3a:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
34009d3e:	4603      	mov	r3, r0
34009d40:	460a      	mov	r2, r1
34009d42:	4313      	orrs	r3, r2
34009d44:	f040 824e 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d50:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34009d54:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
34009d58:	2300      	movs	r3, #0
34009d5a:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
34009d5e:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
34009d62:	4603      	mov	r3, r0
34009d64:	460a      	mov	r2, r1
34009d66:	4313      	orrs	r3, r2
34009d68:	f040 823c 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d74:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
34009d78:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
34009d7c:	2300      	movs	r3, #0
34009d7e:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
34009d82:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
34009d86:	4603      	mov	r3, r0
34009d88:	460a      	mov	r2, r1
34009d8a:	4313      	orrs	r3, r2
34009d8c:	f040 822a 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d98:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
34009d9c:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
34009da0:	2300      	movs	r3, #0
34009da2:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
34009da6:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
34009daa:	4603      	mov	r3, r0
34009dac:	460a      	mov	r2, r1
34009dae:	4313      	orrs	r3, r2
34009db0:	f040 8218 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009db4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009dbc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
34009dc0:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
34009dc4:	2300      	movs	r3, #0
34009dc6:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
34009dca:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
34009dce:	4603      	mov	r3, r0
34009dd0:	460a      	mov	r2, r1
34009dd2:	4313      	orrs	r3, r2
34009dd4:	f040 8206 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009dd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009de0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
34009de4:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
34009de8:	2300      	movs	r3, #0
34009dea:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
34009dee:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
34009df2:	4603      	mov	r3, r0
34009df4:	460a      	mov	r2, r1
34009df6:	4313      	orrs	r3, r2
34009df8:	f040 81f4 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009dfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e04:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34009e08:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
34009e0c:	2300      	movs	r3, #0
34009e0e:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
34009e12:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
34009e16:	4603      	mov	r3, r0
34009e18:	460a      	mov	r2, r1
34009e1a:	4313      	orrs	r3, r2
34009e1c:	f040 81e2 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e28:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
34009e2c:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
34009e30:	2300      	movs	r3, #0
34009e32:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
34009e36:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
34009e3a:	4603      	mov	r3, r0
34009e3c:	460a      	mov	r2, r1
34009e3e:	4313      	orrs	r3, r2
34009e40:	f040 81d0 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
34009e50:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
34009e54:	2300      	movs	r3, #0
34009e56:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
34009e5a:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
34009e5e:	4603      	mov	r3, r0
34009e60:	460a      	mov	r2, r1
34009e62:	4313      	orrs	r3, r2
34009e64:	f040 81be 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
34009e74:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
34009e78:	2300      	movs	r3, #0
34009e7a:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
34009e7e:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
34009e82:	4603      	mov	r3, r0
34009e84:	460a      	mov	r2, r1
34009e86:	4313      	orrs	r3, r2
34009e88:	f040 81ac 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
34009e98:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
34009e9c:	2300      	movs	r3, #0
34009e9e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
34009ea2:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
34009ea6:	4603      	mov	r3, r0
34009ea8:	460a      	mov	r2, r1
34009eaa:	4313      	orrs	r3, r2
34009eac:	f040 819a 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009eb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
34009eb8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
34009ebc:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
34009ec0:	2300      	movs	r3, #0
34009ec2:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
34009ec6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
34009eca:	4603      	mov	r3, r0
34009ecc:	460a      	mov	r2, r1
34009ece:	4313      	orrs	r3, r2
34009ed0:	f040 8188 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ed4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009edc:	2100      	movs	r1, #0
34009ede:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
34009ee2:	f003 0301 	and.w	r3, r3, #1
34009ee6:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
34009eea:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
34009eee:	4603      	mov	r3, r0
34009ef0:	460a      	mov	r2, r1
34009ef2:	4313      	orrs	r3, r2
34009ef4:	f040 8176 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ef8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f00:	2100      	movs	r1, #0
34009f02:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
34009f06:	f003 0302 	and.w	r3, r3, #2
34009f0a:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
34009f0e:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
34009f12:	4603      	mov	r3, r0
34009f14:	460a      	mov	r2, r1
34009f16:	4313      	orrs	r3, r2
34009f18:	f040 8164 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f24:	2100      	movs	r1, #0
34009f26:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
34009f2a:	f003 0304 	and.w	r3, r3, #4
34009f2e:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
34009f32:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
34009f36:	4603      	mov	r3, r0
34009f38:	460a      	mov	r2, r1
34009f3a:	4313      	orrs	r3, r2
34009f3c:	f040 8152 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f48:	2100      	movs	r1, #0
34009f4a:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
34009f4e:	f003 0308 	and.w	r3, r3, #8
34009f52:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
34009f56:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
34009f5a:	4603      	mov	r3, r0
34009f5c:	460a      	mov	r2, r1
34009f5e:	4313      	orrs	r3, r2
34009f60:	f040 8140 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f6c:	2100      	movs	r1, #0
34009f6e:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
34009f72:	f003 0310 	and.w	r3, r3, #16
34009f76:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
34009f7a:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
34009f7e:	4603      	mov	r3, r0
34009f80:	460a      	mov	r2, r1
34009f82:	4313      	orrs	r3, r2
34009f84:	f040 812e 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f90:	2100      	movs	r1, #0
34009f92:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
34009f96:	f003 0320 	and.w	r3, r3, #32
34009f9a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
34009f9e:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
34009fa2:	4603      	mov	r3, r0
34009fa4:	460a      	mov	r2, r1
34009fa6:	4313      	orrs	r3, r2
34009fa8:	f040 811c 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009fac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009fb4:	2100      	movs	r1, #0
34009fb6:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
34009fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34009fbe:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
34009fc2:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
34009fc6:	4603      	mov	r3, r0
34009fc8:	460a      	mov	r2, r1
34009fca:	4313      	orrs	r3, r2
34009fcc:	f040 810a 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009fd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
34009fd8:	2100      	movs	r1, #0
34009fda:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
34009fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34009fe2:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
34009fe6:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
34009fea:	4603      	mov	r3, r0
34009fec:	460a      	mov	r2, r1
34009fee:	4313      	orrs	r3, r2
34009ff0:	f040 80f8 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ff4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ffc:	2100      	movs	r1, #0
34009ffe:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
3400a002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400a006:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
3400a00a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
3400a00e:	4603      	mov	r3, r0
3400a010:	460a      	mov	r2, r1
3400a012:	4313      	orrs	r3, r2
3400a014:	f040 80e6 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a018:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a020:	2100      	movs	r1, #0
3400a022:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
3400a026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400a02a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
3400a02e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
3400a032:	4603      	mov	r3, r0
3400a034:	460a      	mov	r2, r1
3400a036:	4313      	orrs	r3, r2
3400a038:	f040 80d4 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a03c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a040:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a044:	2100      	movs	r1, #0
3400a046:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
3400a04a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400a04e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
3400a052:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
3400a056:	4603      	mov	r3, r0
3400a058:	460a      	mov	r2, r1
3400a05a:	4313      	orrs	r3, r2
3400a05c:	f040 80c2 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a060:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a064:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a068:	2100      	movs	r1, #0
3400a06a:	f8c7 1218 	str.w	r1, [r7, #536]	@ 0x218
3400a06e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400a072:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
3400a076:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
3400a07a:	4603      	mov	r3, r0
3400a07c:	460a      	mov	r2, r1
3400a07e:	4313      	orrs	r3, r2
3400a080:	f040 80b0 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a084:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a088:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a08c:	2100      	movs	r1, #0
3400a08e:	f8c7 1210 	str.w	r1, [r7, #528]	@ 0x210
3400a092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400a096:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
3400a09a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
3400a09e:	4603      	mov	r3, r0
3400a0a0:	460a      	mov	r2, r1
3400a0a2:	4313      	orrs	r3, r2
3400a0a4:	f040 809e 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a0a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a0b0:	2100      	movs	r1, #0
3400a0b2:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
3400a0b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400a0ba:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
3400a0be:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
3400a0c2:	4603      	mov	r3, r0
3400a0c4:	460a      	mov	r2, r1
3400a0c6:	4313      	orrs	r3, r2
3400a0c8:	f040 808c 	bne.w	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a0cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a0d4:	2100      	movs	r1, #0
3400a0d6:	f8c7 1200 	str.w	r1, [r7, #512]	@ 0x200
3400a0da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400a0de:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
3400a0e2:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
3400a0e6:	4603      	mov	r3, r0
3400a0e8:	460a      	mov	r2, r1
3400a0ea:	4313      	orrs	r3, r2
3400a0ec:	d17a      	bne.n	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a0ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a0f6:	2100      	movs	r1, #0
3400a0f8:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
3400a0fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400a100:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
3400a104:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
3400a108:	4603      	mov	r3, r0
3400a10a:	460a      	mov	r2, r1
3400a10c:	4313      	orrs	r3, r2
3400a10e:	d169      	bne.n	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a110:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a114:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a118:	2100      	movs	r1, #0
3400a11a:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
3400a11e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400a122:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
3400a126:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
3400a12a:	4603      	mov	r3, r0
3400a12c:	460a      	mov	r2, r1
3400a12e:	4313      	orrs	r3, r2
3400a130:	d158      	bne.n	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a132:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a136:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a13a:	2100      	movs	r1, #0
3400a13c:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
3400a140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400a144:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
3400a148:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
3400a14c:	4603      	mov	r3, r0
3400a14e:	460a      	mov	r2, r1
3400a150:	4313      	orrs	r3, r2
3400a152:	d147      	bne.n	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a154:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a158:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a15c:	2100      	movs	r1, #0
3400a15e:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
3400a162:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3400a166:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
3400a16a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
3400a16e:	4603      	mov	r3, r0
3400a170:	460a      	mov	r2, r1
3400a172:	4313      	orrs	r3, r2
3400a174:	d136      	bne.n	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a176:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a17e:	2100      	movs	r1, #0
3400a180:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
3400a184:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3400a188:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
3400a18c:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
3400a190:	4603      	mov	r3, r0
3400a192:	460a      	mov	r2, r1
3400a194:	4313      	orrs	r3, r2
3400a196:	d125      	bne.n	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a198:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a1a0:	2100      	movs	r1, #0
3400a1a2:	f8c7 11d0 	str.w	r1, [r7, #464]	@ 0x1d0
3400a1a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400a1aa:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
3400a1ae:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
3400a1b2:	4603      	mov	r3, r0
3400a1b4:	460a      	mov	r2, r1
3400a1b6:	4313      	orrs	r3, r2
3400a1b8:	d114      	bne.n	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a1ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a1c2:	2100      	movs	r1, #0
3400a1c4:	f8c7 11c8 	str.w	r1, [r7, #456]	@ 0x1c8
3400a1c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3400a1cc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
3400a1d0:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
3400a1d4:	4603      	mov	r3, r0
3400a1d6:	460a      	mov	r2, r1
3400a1d8:	4313      	orrs	r3, r2
3400a1da:	d103      	bne.n	3400a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a1dc:	2188      	movs	r1, #136	@ 0x88
3400a1de:	48d3      	ldr	r0, [pc, #844]	@ (3400a52c <HAL_RCCEx_PeriphCLKConfig+0xb38>)
3400a1e0:	f7f7 fd60 	bl	34001ca4 <assert_failed>

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
3400a1e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a1ec:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
3400a1f0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
3400a1f4:	2300      	movs	r3, #0
3400a1f6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
3400a1fa:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
3400a1fe:	4603      	mov	r3, r0
3400a200:	460a      	mov	r2, r1
3400a202:	4313      	orrs	r3, r2
3400a204:	f000 82b5 	beq.w	3400a772 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
3400a208:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a20c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a214:	f000 8240 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a218:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a21c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400a224:	f000 8238 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a228:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a22c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a230:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400a234:	f000 8230 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a238:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a23c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a240:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
3400a244:	f000 8228 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a248:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a24c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a250:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
3400a254:	f000 8220 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a258:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a25c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a260:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
3400a264:	f000 8218 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a268:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a26c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a270:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
3400a274:	f000 8210 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a278:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a27c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a280:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
3400a284:	f000 8208 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a288:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a28c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a290:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
3400a294:	f000 8200 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a298:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a29c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2a0:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
3400a2a4:	f000 81f8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2ac:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2b0:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
3400a2b4:	f000 81f0 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2bc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2c0:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
3400a2c4:	f000 81e8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2cc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2d0:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
3400a2d4:	f000 81e0 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2dc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2e0:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
3400a2e4:	f000 81d8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2ec:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2f0:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
3400a2f4:	f000 81d0 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2fc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a300:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
3400a304:	f000 81c8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a308:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a30c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a310:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
3400a314:	f000 81c0 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a318:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a31c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a320:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
3400a324:	f000 81b8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a328:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a32c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a330:	4b7f      	ldr	r3, [pc, #508]	@ (3400a530 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
3400a332:	429a      	cmp	r2, r3
3400a334:	f000 81b0 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a338:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a33c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a340:	4b7c      	ldr	r3, [pc, #496]	@ (3400a534 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
3400a342:	429a      	cmp	r2, r3
3400a344:	f000 81a8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a348:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a34c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a350:	4b79      	ldr	r3, [pc, #484]	@ (3400a538 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
3400a352:	429a      	cmp	r2, r3
3400a354:	f000 81a0 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a358:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a35c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a360:	4b76      	ldr	r3, [pc, #472]	@ (3400a53c <HAL_RCCEx_PeriphCLKConfig+0xb48>)
3400a362:	429a      	cmp	r2, r3
3400a364:	f000 8198 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a368:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a36c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a370:	4b73      	ldr	r3, [pc, #460]	@ (3400a540 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
3400a372:	429a      	cmp	r2, r3
3400a374:	f000 8190 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a378:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a37c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a380:	4b70      	ldr	r3, [pc, #448]	@ (3400a544 <HAL_RCCEx_PeriphCLKConfig+0xb50>)
3400a382:	429a      	cmp	r2, r3
3400a384:	f000 8188 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a388:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a38c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a390:	4b6d      	ldr	r3, [pc, #436]	@ (3400a548 <HAL_RCCEx_PeriphCLKConfig+0xb54>)
3400a392:	429a      	cmp	r2, r3
3400a394:	f000 8180 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a398:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a39c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3a0:	4b6a      	ldr	r3, [pc, #424]	@ (3400a54c <HAL_RCCEx_PeriphCLKConfig+0xb58>)
3400a3a2:	429a      	cmp	r2, r3
3400a3a4:	f000 8178 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3ac:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3b0:	4b67      	ldr	r3, [pc, #412]	@ (3400a550 <HAL_RCCEx_PeriphCLKConfig+0xb5c>)
3400a3b2:	429a      	cmp	r2, r3
3400a3b4:	f000 8170 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3bc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3c0:	4b64      	ldr	r3, [pc, #400]	@ (3400a554 <HAL_RCCEx_PeriphCLKConfig+0xb60>)
3400a3c2:	429a      	cmp	r2, r3
3400a3c4:	f000 8168 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3cc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3d0:	4b61      	ldr	r3, [pc, #388]	@ (3400a558 <HAL_RCCEx_PeriphCLKConfig+0xb64>)
3400a3d2:	429a      	cmp	r2, r3
3400a3d4:	f000 8160 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3dc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3e0:	4b5e      	ldr	r3, [pc, #376]	@ (3400a55c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
3400a3e2:	429a      	cmp	r2, r3
3400a3e4:	f000 8158 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3ec:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3f0:	4b5b      	ldr	r3, [pc, #364]	@ (3400a560 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
3400a3f2:	429a      	cmp	r2, r3
3400a3f4:	f000 8150 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3fc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a400:	4b58      	ldr	r3, [pc, #352]	@ (3400a564 <HAL_RCCEx_PeriphCLKConfig+0xb70>)
3400a402:	429a      	cmp	r2, r3
3400a404:	f000 8148 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a408:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a40c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a410:	4b55      	ldr	r3, [pc, #340]	@ (3400a568 <HAL_RCCEx_PeriphCLKConfig+0xb74>)
3400a412:	429a      	cmp	r2, r3
3400a414:	f000 8140 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a418:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a41c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a420:	4b52      	ldr	r3, [pc, #328]	@ (3400a56c <HAL_RCCEx_PeriphCLKConfig+0xb78>)
3400a422:	429a      	cmp	r2, r3
3400a424:	f000 8138 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a428:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a42c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a430:	4b4f      	ldr	r3, [pc, #316]	@ (3400a570 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
3400a432:	429a      	cmp	r2, r3
3400a434:	f000 8130 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a438:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a43c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a440:	4b4c      	ldr	r3, [pc, #304]	@ (3400a574 <HAL_RCCEx_PeriphCLKConfig+0xb80>)
3400a442:	429a      	cmp	r2, r3
3400a444:	f000 8128 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a448:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a44c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a450:	4b49      	ldr	r3, [pc, #292]	@ (3400a578 <HAL_RCCEx_PeriphCLKConfig+0xb84>)
3400a452:	429a      	cmp	r2, r3
3400a454:	f000 8120 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a458:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a45c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a460:	4b46      	ldr	r3, [pc, #280]	@ (3400a57c <HAL_RCCEx_PeriphCLKConfig+0xb88>)
3400a462:	429a      	cmp	r2, r3
3400a464:	f000 8118 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a468:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a46c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a470:	4b43      	ldr	r3, [pc, #268]	@ (3400a580 <HAL_RCCEx_PeriphCLKConfig+0xb8c>)
3400a472:	429a      	cmp	r2, r3
3400a474:	f000 8110 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a478:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a47c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a480:	4b40      	ldr	r3, [pc, #256]	@ (3400a584 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
3400a482:	429a      	cmp	r2, r3
3400a484:	f000 8108 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a488:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a48c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a490:	4b3d      	ldr	r3, [pc, #244]	@ (3400a588 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
3400a492:	429a      	cmp	r2, r3
3400a494:	f000 8100 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a498:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a49c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4a0:	4b3a      	ldr	r3, [pc, #232]	@ (3400a58c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
3400a4a2:	429a      	cmp	r2, r3
3400a4a4:	f000 80f8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4ac:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4b0:	4b37      	ldr	r3, [pc, #220]	@ (3400a590 <HAL_RCCEx_PeriphCLKConfig+0xb9c>)
3400a4b2:	429a      	cmp	r2, r3
3400a4b4:	f000 80f0 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4bc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4c0:	4b34      	ldr	r3, [pc, #208]	@ (3400a594 <HAL_RCCEx_PeriphCLKConfig+0xba0>)
3400a4c2:	429a      	cmp	r2, r3
3400a4c4:	f000 80e8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4cc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4d0:	4b31      	ldr	r3, [pc, #196]	@ (3400a598 <HAL_RCCEx_PeriphCLKConfig+0xba4>)
3400a4d2:	429a      	cmp	r2, r3
3400a4d4:	f000 80e0 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4dc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4e0:	4b2e      	ldr	r3, [pc, #184]	@ (3400a59c <HAL_RCCEx_PeriphCLKConfig+0xba8>)
3400a4e2:	429a      	cmp	r2, r3
3400a4e4:	f000 80d8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4ec:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4f0:	4b2b      	ldr	r3, [pc, #172]	@ (3400a5a0 <HAL_RCCEx_PeriphCLKConfig+0xbac>)
3400a4f2:	429a      	cmp	r2, r3
3400a4f4:	f000 80d0 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4fc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a500:	4b28      	ldr	r3, [pc, #160]	@ (3400a5a4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
3400a502:	429a      	cmp	r2, r3
3400a504:	f000 80c8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a508:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a50c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a510:	4b25      	ldr	r3, [pc, #148]	@ (3400a5a8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
3400a512:	429a      	cmp	r2, r3
3400a514:	f000 80c0 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a518:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a51c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a520:	4b22      	ldr	r3, [pc, #136]	@ (3400a5ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>)
3400a522:	429a      	cmp	r2, r3
3400a524:	f000 80b8 	beq.w	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a528:	e042      	b.n	3400a5b0 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
3400a52a:	bf00      	nop
3400a52c:	3401e910 	.word	0x3401e910
3400a530:	00010300 	.word	0x00010300
3400a534:	00011300 	.word	0x00011300
3400a538:	00012300 	.word	0x00012300
3400a53c:	00013300 	.word	0x00013300
3400a540:	00014300 	.word	0x00014300
3400a544:	00015300 	.word	0x00015300
3400a548:	00016300 	.word	0x00016300
3400a54c:	00017300 	.word	0x00017300
3400a550:	00018300 	.word	0x00018300
3400a554:	00019300 	.word	0x00019300
3400a558:	0001a300 	.word	0x0001a300
3400a55c:	0001b300 	.word	0x0001b300
3400a560:	0001c300 	.word	0x0001c300
3400a564:	0001d300 	.word	0x0001d300
3400a568:	0001e300 	.word	0x0001e300
3400a56c:	0001f300 	.word	0x0001f300
3400a570:	00020300 	.word	0x00020300
3400a574:	00021300 	.word	0x00021300
3400a578:	00022300 	.word	0x00022300
3400a57c:	00023300 	.word	0x00023300
3400a580:	00024300 	.word	0x00024300
3400a584:	00025300 	.word	0x00025300
3400a588:	00026300 	.word	0x00026300
3400a58c:	00027300 	.word	0x00027300
3400a590:	00028300 	.word	0x00028300
3400a594:	00029300 	.word	0x00029300
3400a598:	0002a300 	.word	0x0002a300
3400a59c:	0002b300 	.word	0x0002b300
3400a5a0:	0002c300 	.word	0x0002c300
3400a5a4:	0002d300 	.word	0x0002d300
3400a5a8:	0002e300 	.word	0x0002e300
3400a5ac:	0002f300 	.word	0x0002f300
3400a5b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5b4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5b8:	4bb4      	ldr	r3, [pc, #720]	@ (3400a88c <HAL_RCCEx_PeriphCLKConfig+0xe98>)
3400a5ba:	429a      	cmp	r2, r3
3400a5bc:	d06c      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5c2:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5c6:	4bb2      	ldr	r3, [pc, #712]	@ (3400a890 <HAL_RCCEx_PeriphCLKConfig+0xe9c>)
3400a5c8:	429a      	cmp	r2, r3
3400a5ca:	d065      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5d0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5d4:	4baf      	ldr	r3, [pc, #700]	@ (3400a894 <HAL_RCCEx_PeriphCLKConfig+0xea0>)
3400a5d6:	429a      	cmp	r2, r3
3400a5d8:	d05e      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5de:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5e2:	4bad      	ldr	r3, [pc, #692]	@ (3400a898 <HAL_RCCEx_PeriphCLKConfig+0xea4>)
3400a5e4:	429a      	cmp	r2, r3
3400a5e6:	d057      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5ec:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5f0:	4baa      	ldr	r3, [pc, #680]	@ (3400a89c <HAL_RCCEx_PeriphCLKConfig+0xea8>)
3400a5f2:	429a      	cmp	r2, r3
3400a5f4:	d050      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5fa:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5fe:	4ba8      	ldr	r3, [pc, #672]	@ (3400a8a0 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
3400a600:	429a      	cmp	r2, r3
3400a602:	d049      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a604:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a608:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a60c:	4ba5      	ldr	r3, [pc, #660]	@ (3400a8a4 <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
3400a60e:	429a      	cmp	r2, r3
3400a610:	d042      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a612:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a616:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a61a:	4ba3      	ldr	r3, [pc, #652]	@ (3400a8a8 <HAL_RCCEx_PeriphCLKConfig+0xeb4>)
3400a61c:	429a      	cmp	r2, r3
3400a61e:	d03b      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a620:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a624:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a628:	4ba0      	ldr	r3, [pc, #640]	@ (3400a8ac <HAL_RCCEx_PeriphCLKConfig+0xeb8>)
3400a62a:	429a      	cmp	r2, r3
3400a62c:	d034      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a62e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a632:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a636:	4b9e      	ldr	r3, [pc, #632]	@ (3400a8b0 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
3400a638:	429a      	cmp	r2, r3
3400a63a:	d02d      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a63c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a640:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a644:	4b9b      	ldr	r3, [pc, #620]	@ (3400a8b4 <HAL_RCCEx_PeriphCLKConfig+0xec0>)
3400a646:	429a      	cmp	r2, r3
3400a648:	d026      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a64a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a64e:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a652:	4b99      	ldr	r3, [pc, #612]	@ (3400a8b8 <HAL_RCCEx_PeriphCLKConfig+0xec4>)
3400a654:	429a      	cmp	r2, r3
3400a656:	d01f      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a658:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a65c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a660:	4b96      	ldr	r3, [pc, #600]	@ (3400a8bc <HAL_RCCEx_PeriphCLKConfig+0xec8>)
3400a662:	429a      	cmp	r2, r3
3400a664:	d018      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a666:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a66a:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a66e:	4b94      	ldr	r3, [pc, #592]	@ (3400a8c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
3400a670:	429a      	cmp	r2, r3
3400a672:	d011      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a674:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a678:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a67c:	4b91      	ldr	r3, [pc, #580]	@ (3400a8c4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
3400a67e:	429a      	cmp	r2, r3
3400a680:	d00a      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a682:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a686:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a68a:	4b8f      	ldr	r3, [pc, #572]	@ (3400a8c8 <HAL_RCCEx_PeriphCLKConfig+0xed4>)
3400a68c:	429a      	cmp	r2, r3
3400a68e:	d003      	beq.n	3400a698 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a690:	218e      	movs	r1, #142	@ 0x8e
3400a692:	488e      	ldr	r0, [pc, #568]	@ (3400a8cc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a694:	f7f7 fb06 	bl	34001ca4 <assert_failed>

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
3400a698:	f7fe fae2 	bl	34008c60 <LL_RCC_GetRTCClockSource>
3400a69c:	f8c7 0388 	str.w	r0, [r7, #904]	@ 0x388

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3400a6a0:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
3400a6a4:	2b00      	cmp	r3, #0
3400a6a6:	d018      	beq.n	3400a6da <HAL_RCCEx_PeriphCLKConfig+0xce6>
3400a6a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6ac:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a6b0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
3400a6b4:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
3400a6b8:	4293      	cmp	r3, r2
3400a6ba:	d00e      	beq.n	3400a6da <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
3400a6bc:	4b84      	ldr	r3, [pc, #528]	@ (3400a8d0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400a6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a6c0:	4a83      	ldr	r2, [pc, #524]	@ (3400a8d0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400a6c2:	f043 0301 	orr.w	r3, r3, #1
3400a6c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3400a6c8:	4b81      	ldr	r3, [pc, #516]	@ (3400a8d0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400a6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a6cc:	f003 0301 	and.w	r3, r3, #1
3400a6d0:	2b00      	cmp	r3, #0
3400a6d2:	d102      	bne.n	3400a6da <HAL_RCCEx_PeriphCLKConfig+0xce6>
      {
        ret = HAL_ERROR;
3400a6d4:	2301      	movs	r3, #1
3400a6d6:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
3400a6da:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a6de:	2b00      	cmp	r3, #0
3400a6e0:	d143      	bne.n	3400a76a <HAL_RCCEx_PeriphCLKConfig+0xd76>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3400a6e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6e6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a6ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a6ee:	d117      	bne.n	3400a720 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3400a6f0:	f7f9 fafa 	bl	34003ce8 <HAL_GetTick>
3400a6f4:	f8c7 0384 	str.w	r0, [r7, #900]	@ 0x384

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
3400a6f8:	e00d      	b.n	3400a716 <HAL_RCCEx_PeriphCLKConfig+0xd22>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400a6fa:	f7f9 faf5 	bl	34003ce8 <HAL_GetTick>
3400a6fe:	4602      	mov	r2, r0
3400a700:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
3400a704:	1ad2      	subs	r2, r2, r3
3400a706:	f241 3388 	movw	r3, #5000	@ 0x1388
3400a70a:	429a      	cmp	r2, r3
3400a70c:	d903      	bls.n	3400a716 <HAL_RCCEx_PeriphCLKConfig+0xd22>
          {
            ret = HAL_TIMEOUT;
3400a70e:	2303      	movs	r3, #3
3400a710:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
            break;
3400a714:	e004      	b.n	3400a720 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
        while (LL_RCC_LSE_IsReady() == 0U)
3400a716:	f7fd feb5 	bl	34008484 <LL_RCC_LSE_IsReady>
3400a71a:	4603      	mov	r3, r0
3400a71c:	2b00      	cmp	r3, #0
3400a71e:	d0ec      	beq.n	3400a6fa <HAL_RCCEx_PeriphCLKConfig+0xd06>
          }
        }
      }

      if (ret == HAL_OK)
3400a720:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a724:	2b00      	cmp	r3, #0
3400a726:	d11b      	bne.n	3400a760 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
3400a728:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a72c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a730:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3400a734:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400a738:	d108      	bne.n	3400a74c <HAL_RCCEx_PeriphCLKConfig+0xd58>
3400a73a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a73e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3400a746:	4618      	mov	r0, r3
3400a748:	f7fe fa98 	bl	34008c7c <LL_RCC_SetRTC_HSEPrescaler>
3400a74c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a750:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3400a758:	4618      	mov	r0, r3
3400a75a:	f7fe fa6b 	bl	34008c34 <LL_RCC_SetRTCClockSource>
3400a75e:	e008      	b.n	3400a772 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
      else
      {
        /* set overall return value */
        status = ret;
3400a760:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a764:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
3400a768:	e003      	b.n	3400a772 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
3400a76a:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a76e:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3400a772:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a776:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a77a:	f002 0304 	and.w	r3, r2, #4
3400a77e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
3400a782:	2300      	movs	r3, #0
3400a784:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
3400a788:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
3400a78c:	4603      	mov	r3, r0
3400a78e:	460a      	mov	r2, r1
3400a790:	4313      	orrs	r3, r2
3400a792:	f000 81dc 	beq.w	3400ab4e <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
3400a796:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a79a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a79e:	2b00      	cmp	r3, #0
3400a7a0:	d02d      	beq.n	3400a7fe <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7aa:	2b01      	cmp	r3, #1
3400a7ac:	d027      	beq.n	3400a7fe <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7b6:	2b02      	cmp	r3, #2
3400a7b8:	d021      	beq.n	3400a7fe <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7c2:	2b03      	cmp	r3, #3
3400a7c4:	d01b      	beq.n	3400a7fe <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7ce:	2b04      	cmp	r3, #4
3400a7d0:	d015      	beq.n	3400a7fe <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7da:	2b05      	cmp	r3, #5
3400a7dc:	d00f      	beq.n	3400a7fe <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7e6:	2b06      	cmp	r3, #6
3400a7e8:	d009      	beq.n	3400a7fe <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7f2:	2b07      	cmp	r3, #7
3400a7f4:	d003      	beq.n	3400a7fe <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7f6:	21d4      	movs	r1, #212	@ 0xd4
3400a7f8:	4834      	ldr	r0, [pc, #208]	@ (3400a8cc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a7fa:	f7f7 fa53 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
3400a7fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a802:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a806:	2b04      	cmp	r3, #4
3400a808:	d166      	bne.n	3400a8d8 <HAL_RCCEx_PeriphCLKConfig+0xee4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400a80a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a810:	2b00      	cmp	r3, #0
3400a812:	d015      	beq.n	3400a840 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a814:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a81a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a81e:	d00f      	beq.n	3400a840 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a820:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a82a:	d009      	beq.n	3400a840 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a82c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a832:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a836:	d003      	beq.n	3400a840 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a838:	21d9      	movs	r1, #217	@ 0xd9
3400a83a:	4824      	ldr	r0, [pc, #144]	@ (3400a8cc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a83c:	f7f7 fa32 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400a840:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a846:	2b00      	cmp	r3, #0
3400a848:	d005      	beq.n	3400a856 <HAL_RCCEx_PeriphCLKConfig+0xe62>
3400a84a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a854:	d903      	bls.n	3400a85e <HAL_RCCEx_PeriphCLKConfig+0xe6a>
3400a856:	21da      	movs	r1, #218	@ 0xda
3400a858:	481c      	ldr	r0, [pc, #112]	@ (3400a8cc <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a85a:	f7f7 fa23 	bl	34001ca4 <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400a85e:	4b1d      	ldr	r3, [pc, #116]	@ (3400a8d4 <HAL_RCCEx_PeriphCLKConfig+0xee0>)
3400a860:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400a864:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a868:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a86c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a870:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400a872:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a878:	3b01      	subs	r3, #1
3400a87a:	041b      	lsls	r3, r3, #16
3400a87c:	4313      	orrs	r3, r2
3400a87e:	4a15      	ldr	r2, [pc, #84]	@ (3400a8d4 <HAL_RCCEx_PeriphCLKConfig+0xee0>)
3400a880:	430b      	orrs	r3, r1
3400a882:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400a886:	f7fe fd13 	bl	340092b0 <LL_RCC_IC5_Enable>
3400a88a:	e159      	b.n	3400ab40 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3400a88c:	00030300 	.word	0x00030300
3400a890:	00031300 	.word	0x00031300
3400a894:	00032300 	.word	0x00032300
3400a898:	00033300 	.word	0x00033300
3400a89c:	00034300 	.word	0x00034300
3400a8a0:	00035300 	.word	0x00035300
3400a8a4:	00036300 	.word	0x00036300
3400a8a8:	00037300 	.word	0x00037300
3400a8ac:	00038300 	.word	0x00038300
3400a8b0:	00039300 	.word	0x00039300
3400a8b4:	0003a300 	.word	0x0003a300
3400a8b8:	0003b300 	.word	0x0003b300
3400a8bc:	0003c300 	.word	0x0003c300
3400a8c0:	0003d300 	.word	0x0003d300
3400a8c4:	0003e300 	.word	0x0003e300
3400a8c8:	0003f300 	.word	0x0003f300
3400a8cc:	3401e910 	.word	0x3401e910
3400a8d0:	56024800 	.word	0x56024800
3400a8d4:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
3400a8d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a8e0:	2b05      	cmp	r3, #5
3400a8e2:	d140      	bne.n	3400a966 <HAL_RCCEx_PeriphCLKConfig+0xf72>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400a8e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a8ea:	2b00      	cmp	r3, #0
3400a8ec:	d015      	beq.n	3400a91a <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a8ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a8f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a8f8:	d00f      	beq.n	3400a91a <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a8fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a904:	d009      	beq.n	3400a91a <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a906:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a90a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a90c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a910:	d003      	beq.n	3400a91a <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a912:	21e6      	movs	r1, #230	@ 0xe6
3400a914:	4860      	ldr	r0, [pc, #384]	@ (3400aa98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a916:	f7f7 f9c5 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400a91a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a91e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a920:	2b00      	cmp	r3, #0
3400a922:	d005      	beq.n	3400a930 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
3400a924:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a92a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a92e:	d903      	bls.n	3400a938 <HAL_RCCEx_PeriphCLKConfig+0xf44>
3400a930:	21e7      	movs	r1, #231	@ 0xe7
3400a932:	4859      	ldr	r0, [pc, #356]	@ (3400aa98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a934:	f7f7 f9b6 	bl	34001ca4 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400a938:	4b58      	ldr	r3, [pc, #352]	@ (3400aa9c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a93a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400a93e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a942:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a946:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a94a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400a94c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a952:	3b01      	subs	r3, #1
3400a954:	041b      	lsls	r3, r3, #16
3400a956:	4313      	orrs	r3, r2
3400a958:	4a50      	ldr	r2, [pc, #320]	@ (3400aa9c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a95a:	430b      	orrs	r3, r1
3400a95c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400a960:	f7fe fda6 	bl	340094b0 <LL_RCC_IC10_Enable>
3400a964:	e0ec      	b.n	3400ab40 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
3400a966:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a96a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a96e:	2b06      	cmp	r3, #6
3400a970:	d140      	bne.n	3400a9f4 <HAL_RCCEx_PeriphCLKConfig+0x1000>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400a972:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a976:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a978:	2b00      	cmp	r3, #0
3400a97a:	d015      	beq.n	3400a9a8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a97c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a986:	d00f      	beq.n	3400a9a8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a988:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a98c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a98e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a992:	d009      	beq.n	3400a9a8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a994:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a99a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a99e:	d003      	beq.n	3400a9a8 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a9a0:	21f3      	movs	r1, #243	@ 0xf3
3400a9a2:	483d      	ldr	r0, [pc, #244]	@ (3400aa98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a9a4:	f7f7 f97e 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400a9a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a9ae:	2b00      	cmp	r3, #0
3400a9b0:	d005      	beq.n	3400a9be <HAL_RCCEx_PeriphCLKConfig+0xfca>
3400a9b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a9b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a9bc:	d903      	bls.n	3400a9c6 <HAL_RCCEx_PeriphCLKConfig+0xfd2>
3400a9be:	21f4      	movs	r1, #244	@ 0xf4
3400a9c0:	4835      	ldr	r0, [pc, #212]	@ (3400aa98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a9c2:	f7f7 f96f 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400a9c6:	4b35      	ldr	r3, [pc, #212]	@ (3400aa9c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a9c8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400a9cc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a9d0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a9d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9d8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400a9da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a9e0:	3b01      	subs	r3, #1
3400a9e2:	041b      	lsls	r3, r3, #16
3400a9e4:	4313      	orrs	r3, r2
3400a9e6:	4a2d      	ldr	r2, [pc, #180]	@ (3400aa9c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a9e8:	430b      	orrs	r3, r1
3400a9ea:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400a9ee:	f7fe fe5f 	bl	340096b0 <LL_RCC_IC15_Enable>
3400a9f2:	e0a5      	b.n	3400ab40 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
3400a9f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a9fc:	2b03      	cmp	r3, #3
3400a9fe:	d14f      	bne.n	3400aaa0 <HAL_RCCEx_PeriphCLKConfig+0x10ac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
3400aa00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400aa08:	2b00      	cmp	r3, #0
3400aa0a:	d019      	beq.n	3400aa40 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400aa0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400aa14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400aa18:	d012      	beq.n	3400aa40 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400aa1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400aa22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400aa26:	d00b      	beq.n	3400aa40 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400aa28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400aa30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400aa34:	d004      	beq.n	3400aa40 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400aa36:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400aa3a:	4817      	ldr	r0, [pc, #92]	@ (3400aa98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400aa3c:	f7f7 f932 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400aa40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400aa48:	2b00      	cmp	r3, #0
3400aa4a:	d006      	beq.n	3400aa5a <HAL_RCCEx_PeriphCLKConfig+0x1066>
3400aa4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400aa54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400aa58:	d904      	bls.n	3400aa64 <HAL_RCCEx_PeriphCLKConfig+0x1070>
3400aa5a:	f240 1101 	movw	r1, #257	@ 0x101
3400aa5e:	480e      	ldr	r0, [pc, #56]	@ (3400aa98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400aa60:	f7f7 f920 	bl	34001ca4 <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400aa64:	4b0d      	ldr	r3, [pc, #52]	@ (3400aa9c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400aa66:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400aa6a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400aa6e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400aa72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa76:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400aa7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400aa82:	3b01      	subs	r3, #1
3400aa84:	041b      	lsls	r3, r3, #16
3400aa86:	4313      	orrs	r3, r2
3400aa88:	4a04      	ldr	r2, [pc, #16]	@ (3400aa9c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400aa8a:	430b      	orrs	r3, r1
3400aa8c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3400aa90:	f7fe ff0e 	bl	340098b0 <LL_RCC_IC19_Enable>
3400aa94:	e054      	b.n	3400ab40 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3400aa96:	bf00      	nop
3400aa98:	3401e910 	.word	0x3401e910
3400aa9c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
3400aaa0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaa4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400aaa8:	2b07      	cmp	r3, #7
3400aaaa:	d149      	bne.n	3400ab40 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400aaac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aab0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400aab4:	2b00      	cmp	r3, #0
3400aab6:	d019      	beq.n	3400aaec <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400aab8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aabc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400aac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400aac4:	d012      	beq.n	3400aaec <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400aac6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400aace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400aad2:	d00b      	beq.n	3400aaec <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400aad4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400aadc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400aae0:	d004      	beq.n	3400aaec <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400aae2:	f240 110d 	movw	r1, #269	@ 0x10d
3400aae6:	487d      	ldr	r0, [pc, #500]	@ (3400acdc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400aae8:	f7f7 f8dc 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400aaec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400aaf4:	2b00      	cmp	r3, #0
3400aaf6:	d006      	beq.n	3400ab06 <HAL_RCCEx_PeriphCLKConfig+0x1112>
3400aaf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aafc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400ab00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ab04:	d904      	bls.n	3400ab10 <HAL_RCCEx_PeriphCLKConfig+0x111c>
3400ab06:	f44f 7187 	mov.w	r1, #270	@ 0x10e
3400ab0a:	4874      	ldr	r0, [pc, #464]	@ (3400acdc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400ab0c:	f7f7 f8ca 	bl	34001ca4 <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400ab10:	4b73      	ldr	r3, [pc, #460]	@ (3400ace0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400ab12:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400ab16:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ab1a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ab1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab22:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400ab26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400ab2e:	3b01      	subs	r3, #1
3400ab30:	041b      	lsls	r3, r3, #16
3400ab32:	4313      	orrs	r3, r2
3400ab34:	4a6a      	ldr	r2, [pc, #424]	@ (3400ace0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400ab36:	430b      	orrs	r3, r1
3400ab38:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3400ab3c:	f7fe fef8 	bl	34009930 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
3400ab40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400ab48:	4618      	mov	r0, r3
3400ab4a:	f7fd fd4f 	bl	340085ec <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
3400ab4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ab56:	2100      	movs	r1, #0
3400ab58:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
3400ab5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3400ab60:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
3400ab64:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
3400ab68:	4603      	mov	r3, r0
3400ab6a:	460a      	mov	r2, r1
3400ab6c:	4313      	orrs	r3, r2
3400ab6e:	f000 80d1 	beq.w	3400ad14 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
3400ab72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab76:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400ab7a:	4b5a      	ldr	r3, [pc, #360]	@ (3400ace4 <HAL_RCCEx_PeriphCLKConfig+0x12f0>)
3400ab7c:	429a      	cmp	r2, r3
3400ab7e:	d019      	beq.n	3400abb4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400ab80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab84:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400ab88:	4b57      	ldr	r3, [pc, #348]	@ (3400ace8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
3400ab8a:	429a      	cmp	r2, r3
3400ab8c:	d012      	beq.n	3400abb4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400ab8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab92:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400ab96:	4b55      	ldr	r3, [pc, #340]	@ (3400acec <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
3400ab98:	429a      	cmp	r2, r3
3400ab9a:	d00b      	beq.n	3400abb4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400ab9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aba0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400aba4:	4b52      	ldr	r3, [pc, #328]	@ (3400acf0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400aba6:	429a      	cmp	r2, r3
3400aba8:	d004      	beq.n	3400abb4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400abaa:	f44f 7192 	mov.w	r1, #292	@ 0x124
3400abae:	484b      	ldr	r0, [pc, #300]	@ (3400acdc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400abb0:	f7f7 f878 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3400abb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abb8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400abbc:	4b4b      	ldr	r3, [pc, #300]	@ (3400acec <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
3400abbe:	429a      	cmp	r2, r3
3400abc0:	d142      	bne.n	3400ac48 <HAL_RCCEx_PeriphCLKConfig+0x1254>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400abc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abc6:	699b      	ldr	r3, [r3, #24]
3400abc8:	2b00      	cmp	r3, #0
3400abca:	d016      	beq.n	3400abfa <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400abcc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abd0:	699b      	ldr	r3, [r3, #24]
3400abd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400abd6:	d010      	beq.n	3400abfa <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400abd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abdc:	699b      	ldr	r3, [r3, #24]
3400abde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400abe2:	d00a      	beq.n	3400abfa <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400abe4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abe8:	699b      	ldr	r3, [r3, #24]
3400abea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400abee:	d004      	beq.n	3400abfa <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400abf0:	f240 1129 	movw	r1, #297	@ 0x129
3400abf4:	4839      	ldr	r0, [pc, #228]	@ (3400acdc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400abf6:	f7f7 f855 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400abfa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abfe:	69db      	ldr	r3, [r3, #28]
3400ac00:	2b00      	cmp	r3, #0
3400ac02:	d005      	beq.n	3400ac10 <HAL_RCCEx_PeriphCLKConfig+0x121c>
3400ac04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac08:	69db      	ldr	r3, [r3, #28]
3400ac0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ac0e:	d904      	bls.n	3400ac1a <HAL_RCCEx_PeriphCLKConfig+0x1226>
3400ac10:	f44f 7195 	mov.w	r1, #298	@ 0x12a
3400ac14:	4831      	ldr	r0, [pc, #196]	@ (3400acdc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400ac16:	f7f7 f845 	bl	34001ca4 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400ac1a:	4b31      	ldr	r3, [pc, #196]	@ (3400ace0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400ac1c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400ac20:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ac24:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ac28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac2c:	699a      	ldr	r2, [r3, #24]
3400ac2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac32:	69db      	ldr	r3, [r3, #28]
3400ac34:	3b01      	subs	r3, #1
3400ac36:	041b      	lsls	r3, r3, #16
3400ac38:	4313      	orrs	r3, r2
3400ac3a:	4a29      	ldr	r2, [pc, #164]	@ (3400ace0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400ac3c:	430b      	orrs	r3, r1
3400ac3e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400ac42:	f7fe fab5 	bl	340091b0 <LL_RCC_IC3_Enable>
3400ac46:	e05e      	b.n	3400ad06 <HAL_RCCEx_PeriphCLKConfig+0x1312>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
3400ac48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac4c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400ac50:	4b27      	ldr	r3, [pc, #156]	@ (3400acf0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400ac52:	429a      	cmp	r2, r3
3400ac54:	d14e      	bne.n	3400acf4 <HAL_RCCEx_PeriphCLKConfig+0x1300>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400ac56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac5a:	6a1b      	ldr	r3, [r3, #32]
3400ac5c:	2b00      	cmp	r3, #0
3400ac5e:	d016      	beq.n	3400ac8e <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400ac60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac64:	6a1b      	ldr	r3, [r3, #32]
3400ac66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ac6a:	d010      	beq.n	3400ac8e <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400ac6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac70:	6a1b      	ldr	r3, [r3, #32]
3400ac72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ac76:	d00a      	beq.n	3400ac8e <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400ac78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac7c:	6a1b      	ldr	r3, [r3, #32]
3400ac7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ac82:	d004      	beq.n	3400ac8e <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400ac84:	f44f 719b 	mov.w	r1, #310	@ 0x136
3400ac88:	4814      	ldr	r0, [pc, #80]	@ (3400acdc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400ac8a:	f7f7 f80b 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400ac8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ac94:	2b00      	cmp	r3, #0
3400ac96:	d005      	beq.n	3400aca4 <HAL_RCCEx_PeriphCLKConfig+0x12b0>
3400ac98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ac9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400aca2:	d904      	bls.n	3400acae <HAL_RCCEx_PeriphCLKConfig+0x12ba>
3400aca4:	f240 1137 	movw	r1, #311	@ 0x137
3400aca8:	480c      	ldr	r0, [pc, #48]	@ (3400acdc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400acaa:	f7f6 fffb 	bl	34001ca4 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400acae:	4b0c      	ldr	r3, [pc, #48]	@ (3400ace0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400acb0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400acb4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400acb8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400acbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acc0:	6a1a      	ldr	r2, [r3, #32]
3400acc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400acc8:	3b01      	subs	r3, #1
3400acca:	041b      	lsls	r3, r3, #16
3400accc:	4313      	orrs	r3, r2
3400acce:	4a04      	ldr	r2, [pc, #16]	@ (3400ace0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400acd0:	430b      	orrs	r3, r1
3400acd2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400acd6:	f7fe faab 	bl	34009230 <LL_RCC_IC4_Enable>
3400acda:	e014      	b.n	3400ad06 <HAL_RCCEx_PeriphCLKConfig+0x1312>
3400acdc:	3401e910 	.word	0x3401e910
3400ace0:	56028000 	.word	0x56028000
3400ace4:	03000014 	.word	0x03000014
3400ace8:	03010014 	.word	0x03010014
3400acec:	03020014 	.word	0x03020014
3400acf0:	03030014 	.word	0x03030014
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3400acf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acf8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400acfc:	4baf      	ldr	r3, [pc, #700]	@ (3400afbc <HAL_RCCEx_PeriphCLKConfig+0x15c8>)
3400acfe:	429a      	cmp	r2, r3
3400ad00:	d101      	bne.n	3400ad06 <HAL_RCCEx_PeriphCLKConfig+0x1312>
    {
      LL_RCC_CLKP_Enable();
3400ad02:	f7fe fe55 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
3400ad06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
3400ad0e:	4618      	mov	r0, r3
3400ad10:	f7fd fdfc 	bl	3400890c <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3400ad14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad18:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ad1c:	2100      	movs	r1, #0
3400ad1e:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
3400ad22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3400ad26:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
3400ad2a:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
3400ad2e:	4603      	mov	r3, r0
3400ad30:	460a      	mov	r2, r1
3400ad32:	4313      	orrs	r3, r2
3400ad34:	f000 80c5 	beq.w	3400aec2 <HAL_RCCEx_PeriphCLKConfig+0x14ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
3400ad38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ad40:	4b9f      	ldr	r3, [pc, #636]	@ (3400afc0 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
3400ad42:	429a      	cmp	r2, r3
3400ad44:	d019      	beq.n	3400ad7a <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ad46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ad4e:	4b9d      	ldr	r3, [pc, #628]	@ (3400afc4 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
3400ad50:	429a      	cmp	r2, r3
3400ad52:	d012      	beq.n	3400ad7a <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ad54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ad5c:	4b9a      	ldr	r3, [pc, #616]	@ (3400afc8 <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3400ad5e:	429a      	cmp	r2, r3
3400ad60:	d00b      	beq.n	3400ad7a <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ad62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ad6a:	4b98      	ldr	r3, [pc, #608]	@ (3400afcc <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
3400ad6c:	429a      	cmp	r2, r3
3400ad6e:	d004      	beq.n	3400ad7a <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ad70:	f240 1151 	movw	r1, #337	@ 0x151
3400ad74:	4896      	ldr	r0, [pc, #600]	@ (3400afd0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ad76:	f7f6 ff95 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
3400ad7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ad82:	4b91      	ldr	r3, [pc, #580]	@ (3400afc8 <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3400ad84:	429a      	cmp	r2, r3
3400ad86:	d142      	bne.n	3400ae0e <HAL_RCCEx_PeriphCLKConfig+0x141a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400ad88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad8c:	699b      	ldr	r3, [r3, #24]
3400ad8e:	2b00      	cmp	r3, #0
3400ad90:	d016      	beq.n	3400adc0 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400ad92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad96:	699b      	ldr	r3, [r3, #24]
3400ad98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ad9c:	d010      	beq.n	3400adc0 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400ad9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ada2:	699b      	ldr	r3, [r3, #24]
3400ada4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ada8:	d00a      	beq.n	3400adc0 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400adaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adae:	699b      	ldr	r3, [r3, #24]
3400adb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400adb4:	d004      	beq.n	3400adc0 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400adb6:	f44f 71ab 	mov.w	r1, #342	@ 0x156
3400adba:	4885      	ldr	r0, [pc, #532]	@ (3400afd0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400adbc:	f7f6 ff72 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400adc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adc4:	69db      	ldr	r3, [r3, #28]
3400adc6:	2b00      	cmp	r3, #0
3400adc8:	d005      	beq.n	3400add6 <HAL_RCCEx_PeriphCLKConfig+0x13e2>
3400adca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adce:	69db      	ldr	r3, [r3, #28]
3400add0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400add4:	d904      	bls.n	3400ade0 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
3400add6:	f240 1157 	movw	r1, #343	@ 0x157
3400adda:	487d      	ldr	r0, [pc, #500]	@ (3400afd0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400addc:	f7f6 ff62 	bl	34001ca4 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400ade0:	4b7c      	ldr	r3, [pc, #496]	@ (3400afd4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400ade2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400ade6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400adea:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400adee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adf2:	699a      	ldr	r2, [r3, #24]
3400adf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adf8:	69db      	ldr	r3, [r3, #28]
3400adfa:	3b01      	subs	r3, #1
3400adfc:	041b      	lsls	r3, r3, #16
3400adfe:	4313      	orrs	r3, r2
3400ae00:	4a74      	ldr	r2, [pc, #464]	@ (3400afd4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400ae02:	430b      	orrs	r3, r1
3400ae04:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400ae08:	f7fe f9d2 	bl	340091b0 <LL_RCC_IC3_Enable>
3400ae0c:	e052      	b.n	3400aeb4 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
3400ae0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ae16:	4b6d      	ldr	r3, [pc, #436]	@ (3400afcc <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
3400ae18:	429a      	cmp	r2, r3
3400ae1a:	d142      	bne.n	3400aea2 <HAL_RCCEx_PeriphCLKConfig+0x14ae>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400ae1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae20:	6a1b      	ldr	r3, [r3, #32]
3400ae22:	2b00      	cmp	r3, #0
3400ae24:	d016      	beq.n	3400ae54 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ae26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae2a:	6a1b      	ldr	r3, [r3, #32]
3400ae2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ae30:	d010      	beq.n	3400ae54 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ae32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae36:	6a1b      	ldr	r3, [r3, #32]
3400ae38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ae3c:	d00a      	beq.n	3400ae54 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ae3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae42:	6a1b      	ldr	r3, [r3, #32]
3400ae44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ae48:	d004      	beq.n	3400ae54 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ae4a:	f240 1163 	movw	r1, #355	@ 0x163
3400ae4e:	4860      	ldr	r0, [pc, #384]	@ (3400afd0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ae50:	f7f6 ff28 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400ae54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ae5a:	2b00      	cmp	r3, #0
3400ae5c:	d005      	beq.n	3400ae6a <HAL_RCCEx_PeriphCLKConfig+0x1476>
3400ae5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ae64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ae68:	d904      	bls.n	3400ae74 <HAL_RCCEx_PeriphCLKConfig+0x1480>
3400ae6a:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400ae6e:	4858      	ldr	r0, [pc, #352]	@ (3400afd0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ae70:	f7f6 ff18 	bl	34001ca4 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400ae74:	4b57      	ldr	r3, [pc, #348]	@ (3400afd4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400ae76:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400ae7a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ae7e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ae82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae86:	6a1a      	ldr	r2, [r3, #32]
3400ae88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ae8e:	3b01      	subs	r3, #1
3400ae90:	041b      	lsls	r3, r3, #16
3400ae92:	4313      	orrs	r3, r2
3400ae94:	4a4f      	ldr	r2, [pc, #316]	@ (3400afd4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400ae96:	430b      	orrs	r3, r1
3400ae98:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400ae9c:	f7fe f9c8 	bl	34009230 <LL_RCC_IC4_Enable>
3400aea0:	e008      	b.n	3400aeb4 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3400aea2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aea6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400aeaa:	4b46      	ldr	r3, [pc, #280]	@ (3400afc4 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
3400aeac:	429a      	cmp	r2, r3
3400aeae:	d101      	bne.n	3400aeb4 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    {
      LL_RCC_CLKP_Enable();
3400aeb0:	f7fe fd7e 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
3400aeb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aeb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400aebc:	4618      	mov	r0, r3
3400aebe:	f7fd fd25 	bl	3400890c <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
3400aec2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
3400aeca:	2100      	movs	r1, #0
3400aecc:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
3400aed0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3400aed4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
3400aed8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
3400aedc:	4603      	mov	r3, r0
3400aede:	460a      	mov	r2, r1
3400aee0:	4313      	orrs	r3, r2
3400aee2:	f000 80db 	beq.w	3400b09c <HAL_RCCEx_PeriphCLKConfig+0x16a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
3400aee6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aeea:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400aeee:	4b3a      	ldr	r3, [pc, #232]	@ (3400afd8 <HAL_RCCEx_PeriphCLKConfig+0x15e4>)
3400aef0:	429a      	cmp	r2, r3
3400aef2:	d019      	beq.n	3400af28 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400aef4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aef8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400aefc:	4b37      	ldr	r3, [pc, #220]	@ (3400afdc <HAL_RCCEx_PeriphCLKConfig+0x15e8>)
3400aefe:	429a      	cmp	r2, r3
3400af00:	d012      	beq.n	3400af28 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400af02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af06:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400af0a:	4b35      	ldr	r3, [pc, #212]	@ (3400afe0 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3400af0c:	429a      	cmp	r2, r3
3400af0e:	d00b      	beq.n	3400af28 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400af10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af14:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400af18:	4b32      	ldr	r3, [pc, #200]	@ (3400afe4 <HAL_RCCEx_PeriphCLKConfig+0x15f0>)
3400af1a:	429a      	cmp	r2, r3
3400af1c:	d004      	beq.n	3400af28 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400af1e:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
3400af22:	482b      	ldr	r0, [pc, #172]	@ (3400afd0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400af24:	f7f6 febe 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3400af28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af2c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400af30:	4b2b      	ldr	r3, [pc, #172]	@ (3400afe0 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3400af32:	429a      	cmp	r2, r3
3400af34:	d158      	bne.n	3400afe8 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400af36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af3a:	699b      	ldr	r3, [r3, #24]
3400af3c:	2b00      	cmp	r3, #0
3400af3e:	d016      	beq.n	3400af6e <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400af40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af44:	699b      	ldr	r3, [r3, #24]
3400af46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400af4a:	d010      	beq.n	3400af6e <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400af4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af50:	699b      	ldr	r3, [r3, #24]
3400af52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400af56:	d00a      	beq.n	3400af6e <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400af58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af5c:	699b      	ldr	r3, [r3, #24]
3400af5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400af62:	d004      	beq.n	3400af6e <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400af64:	f240 1183 	movw	r1, #387	@ 0x183
3400af68:	4819      	ldr	r0, [pc, #100]	@ (3400afd0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400af6a:	f7f6 fe9b 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400af6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af72:	69db      	ldr	r3, [r3, #28]
3400af74:	2b00      	cmp	r3, #0
3400af76:	d005      	beq.n	3400af84 <HAL_RCCEx_PeriphCLKConfig+0x1590>
3400af78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af7c:	69db      	ldr	r3, [r3, #28]
3400af7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400af82:	d904      	bls.n	3400af8e <HAL_RCCEx_PeriphCLKConfig+0x159a>
3400af84:	f44f 71c2 	mov.w	r1, #388	@ 0x184
3400af88:	4811      	ldr	r0, [pc, #68]	@ (3400afd0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400af8a:	f7f6 fe8b 	bl	34001ca4 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400af8e:	4b11      	ldr	r3, [pc, #68]	@ (3400afd4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400af90:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400af94:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400af98:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400af9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afa0:	699a      	ldr	r2, [r3, #24]
3400afa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afa6:	69db      	ldr	r3, [r3, #28]
3400afa8:	3b01      	subs	r3, #1
3400afaa:	041b      	lsls	r3, r3, #16
3400afac:	4313      	orrs	r3, r2
3400afae:	4a09      	ldr	r2, [pc, #36]	@ (3400afd4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400afb0:	430b      	orrs	r3, r1
3400afb2:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400afb6:	f7fe f8fb 	bl	340091b0 <LL_RCC_IC3_Enable>
3400afba:	e068      	b.n	3400b08e <HAL_RCCEx_PeriphCLKConfig+0x169a>
3400afbc:	03010014 	.word	0x03010014
3400afc0:	03000414 	.word	0x03000414
3400afc4:	03010414 	.word	0x03010414
3400afc8:	03020414 	.word	0x03020414
3400afcc:	03030414 	.word	0x03030414
3400afd0:	3401e910 	.word	0x3401e910
3400afd4:	56028000 	.word	0x56028000
3400afd8:	03000814 	.word	0x03000814
3400afdc:	03010814 	.word	0x03010814
3400afe0:	03020814 	.word	0x03020814
3400afe4:	03030814 	.word	0x03030814
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
3400afe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afec:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400aff0:	4b8b      	ldr	r3, [pc, #556]	@ (3400b220 <HAL_RCCEx_PeriphCLKConfig+0x182c>)
3400aff2:	429a      	cmp	r2, r3
3400aff4:	d142      	bne.n	3400b07c <HAL_RCCEx_PeriphCLKConfig+0x1688>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400aff6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400affa:	6a1b      	ldr	r3, [r3, #32]
3400affc:	2b00      	cmp	r3, #0
3400affe:	d016      	beq.n	3400b02e <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400b000:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b004:	6a1b      	ldr	r3, [r3, #32]
3400b006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b00a:	d010      	beq.n	3400b02e <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400b00c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b010:	6a1b      	ldr	r3, [r3, #32]
3400b012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b016:	d00a      	beq.n	3400b02e <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400b018:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b01c:	6a1b      	ldr	r3, [r3, #32]
3400b01e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b022:	d004      	beq.n	3400b02e <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400b024:	f44f 71c8 	mov.w	r1, #400	@ 0x190
3400b028:	487e      	ldr	r0, [pc, #504]	@ (3400b224 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b02a:	f7f6 fe3b 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400b02e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b034:	2b00      	cmp	r3, #0
3400b036:	d005      	beq.n	3400b044 <HAL_RCCEx_PeriphCLKConfig+0x1650>
3400b038:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b03c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b03e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b042:	d904      	bls.n	3400b04e <HAL_RCCEx_PeriphCLKConfig+0x165a>
3400b044:	f240 1191 	movw	r1, #401	@ 0x191
3400b048:	4876      	ldr	r0, [pc, #472]	@ (3400b224 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b04a:	f7f6 fe2b 	bl	34001ca4 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400b04e:	4b76      	ldr	r3, [pc, #472]	@ (3400b228 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b050:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b054:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b058:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b05c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b060:	6a1a      	ldr	r2, [r3, #32]
3400b062:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b068:	3b01      	subs	r3, #1
3400b06a:	041b      	lsls	r3, r3, #16
3400b06c:	4313      	orrs	r3, r2
3400b06e:	4a6e      	ldr	r2, [pc, #440]	@ (3400b228 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b070:	430b      	orrs	r3, r1
3400b072:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400b076:	f7fe f8db 	bl	34009230 <LL_RCC_IC4_Enable>
3400b07a:	e008      	b.n	3400b08e <HAL_RCCEx_PeriphCLKConfig+0x169a>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3400b07c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b080:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400b084:	4b69      	ldr	r3, [pc, #420]	@ (3400b22c <HAL_RCCEx_PeriphCLKConfig+0x1838>)
3400b086:	429a      	cmp	r2, r3
3400b088:	d101      	bne.n	3400b08e <HAL_RCCEx_PeriphCLKConfig+0x169a>
    {
      LL_RCC_CLKP_Enable();
3400b08a:	f7fe fc91 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
3400b08e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b092:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3400b096:	4618      	mov	r0, r3
3400b098:	f7fd fc38 	bl	3400890c <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3400b09c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b0a4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
3400b0a8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
3400b0ac:	2300      	movs	r3, #0
3400b0ae:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
3400b0b2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
3400b0b6:	4603      	mov	r3, r0
3400b0b8:	460a      	mov	r2, r1
3400b0ba:	4313      	orrs	r3, r2
3400b0bc:	f000 80c7 	beq.w	3400b24e <HAL_RCCEx_PeriphCLKConfig+0x185a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
3400b0c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b0c8:	2b00      	cmp	r3, #0
3400b0ca:	d016      	beq.n	3400b0fa <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400b0cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b0d4:	2b10      	cmp	r3, #16
3400b0d6:	d010      	beq.n	3400b0fa <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400b0d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b0e0:	2b20      	cmp	r3, #32
3400b0e2:	d00a      	beq.n	3400b0fa <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400b0e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b0ec:	2b30      	cmp	r3, #48	@ 0x30
3400b0ee:	d004      	beq.n	3400b0fa <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400b0f0:	f240 11ab 	movw	r1, #427	@ 0x1ab
3400b0f4:	484b      	ldr	r0, [pc, #300]	@ (3400b224 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b0f6:	f7f6 fdd5 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
3400b0fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b102:	2b20      	cmp	r3, #32
3400b104:	d142      	bne.n	3400b18c <HAL_RCCEx_PeriphCLKConfig+0x1798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400b106:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b10a:	699b      	ldr	r3, [r3, #24]
3400b10c:	2b00      	cmp	r3, #0
3400b10e:	d016      	beq.n	3400b13e <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400b110:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b114:	699b      	ldr	r3, [r3, #24]
3400b116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b11a:	d010      	beq.n	3400b13e <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400b11c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b120:	699b      	ldr	r3, [r3, #24]
3400b122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b126:	d00a      	beq.n	3400b13e <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400b128:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b12c:	699b      	ldr	r3, [r3, #24]
3400b12e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b132:	d004      	beq.n	3400b13e <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400b134:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
3400b138:	483a      	ldr	r0, [pc, #232]	@ (3400b224 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b13a:	f7f6 fdb3 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400b13e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b142:	69db      	ldr	r3, [r3, #28]
3400b144:	2b00      	cmp	r3, #0
3400b146:	d005      	beq.n	3400b154 <HAL_RCCEx_PeriphCLKConfig+0x1760>
3400b148:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b14c:	69db      	ldr	r3, [r3, #28]
3400b14e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b152:	d904      	bls.n	3400b15e <HAL_RCCEx_PeriphCLKConfig+0x176a>
3400b154:	f240 11b1 	movw	r1, #433	@ 0x1b1
3400b158:	4832      	ldr	r0, [pc, #200]	@ (3400b224 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b15a:	f7f6 fda3 	bl	34001ca4 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400b15e:	4b32      	ldr	r3, [pc, #200]	@ (3400b228 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b160:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b164:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b168:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b16c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b170:	699a      	ldr	r2, [r3, #24]
3400b172:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b176:	69db      	ldr	r3, [r3, #28]
3400b178:	3b01      	subs	r3, #1
3400b17a:	041b      	lsls	r3, r3, #16
3400b17c:	4313      	orrs	r3, r2
3400b17e:	4a2a      	ldr	r2, [pc, #168]	@ (3400b228 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b180:	430b      	orrs	r3, r1
3400b182:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400b186:	f7fe f813 	bl	340091b0 <LL_RCC_IC3_Enable>
3400b18a:	e059      	b.n	3400b240 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
3400b18c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b190:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b194:	2b30      	cmp	r3, #48	@ 0x30
3400b196:	d14b      	bne.n	3400b230 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400b198:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b19c:	6a1b      	ldr	r3, [r3, #32]
3400b19e:	2b00      	cmp	r3, #0
3400b1a0:	d016      	beq.n	3400b1d0 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400b1a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1a6:	6a1b      	ldr	r3, [r3, #32]
3400b1a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b1ac:	d010      	beq.n	3400b1d0 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400b1ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1b2:	6a1b      	ldr	r3, [r3, #32]
3400b1b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b1b8:	d00a      	beq.n	3400b1d0 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400b1ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1be:	6a1b      	ldr	r3, [r3, #32]
3400b1c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b1c4:	d004      	beq.n	3400b1d0 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400b1c6:	f240 11bd 	movw	r1, #445	@ 0x1bd
3400b1ca:	4816      	ldr	r0, [pc, #88]	@ (3400b224 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b1cc:	f7f6 fd6a 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400b1d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b1d6:	2b00      	cmp	r3, #0
3400b1d8:	d005      	beq.n	3400b1e6 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
3400b1da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b1e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b1e4:	d904      	bls.n	3400b1f0 <HAL_RCCEx_PeriphCLKConfig+0x17fc>
3400b1e6:	f44f 71df 	mov.w	r1, #446	@ 0x1be
3400b1ea:	480e      	ldr	r0, [pc, #56]	@ (3400b224 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b1ec:	f7f6 fd5a 	bl	34001ca4 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400b1f0:	4b0d      	ldr	r3, [pc, #52]	@ (3400b228 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b1f2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b1f6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b1fa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b1fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b202:	6a1a      	ldr	r2, [r3, #32]
3400b204:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b20a:	3b01      	subs	r3, #1
3400b20c:	041b      	lsls	r3, r3, #16
3400b20e:	4313      	orrs	r3, r2
3400b210:	4a05      	ldr	r2, [pc, #20]	@ (3400b228 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b212:	430b      	orrs	r3, r1
3400b214:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400b218:	f7fe f80a 	bl	34009230 <LL_RCC_IC4_Enable>
3400b21c:	e010      	b.n	3400b240 <HAL_RCCEx_PeriphCLKConfig+0x184c>
3400b21e:	bf00      	nop
3400b220:	03030814 	.word	0x03030814
3400b224:	3401e910 	.word	0x3401e910
3400b228:	56028000 	.word	0x56028000
3400b22c:	03010814 	.word	0x03010814
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
3400b230:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b234:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b238:	2b10      	cmp	r3, #16
3400b23a:	d101      	bne.n	3400b240 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    {
      LL_RCC_CLKP_Enable();
3400b23c:	f7fe fbb8 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
3400b240:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b244:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b248:	4618      	mov	r0, r3
3400b24a:	f7fd fa77 	bl	3400873c <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
3400b24e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b252:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b256:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3400b25a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
3400b25e:	2300      	movs	r3, #0
3400b260:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
3400b264:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
3400b268:	4603      	mov	r3, r0
3400b26a:	460a      	mov	r2, r1
3400b26c:	4313      	orrs	r3, r2
3400b26e:	f000 80c5 	beq.w	3400b3fc <HAL_RCCEx_PeriphCLKConfig+0x1a08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
3400b272:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b276:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b27a:	4b9f      	ldr	r3, [pc, #636]	@ (3400b4f8 <HAL_RCCEx_PeriphCLKConfig+0x1b04>)
3400b27c:	429a      	cmp	r2, r3
3400b27e:	d019      	beq.n	3400b2b4 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b280:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b284:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b288:	4b9c      	ldr	r3, [pc, #624]	@ (3400b4fc <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
3400b28a:	429a      	cmp	r2, r3
3400b28c:	d012      	beq.n	3400b2b4 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b28e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b292:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b296:	4b9a      	ldr	r3, [pc, #616]	@ (3400b500 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
3400b298:	429a      	cmp	r2, r3
3400b29a:	d00b      	beq.n	3400b2b4 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b29c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2a0:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b2a4:	4b97      	ldr	r3, [pc, #604]	@ (3400b504 <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
3400b2a6:	429a      	cmp	r2, r3
3400b2a8:	d004      	beq.n	3400b2b4 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b2aa:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
3400b2ae:	4896      	ldr	r0, [pc, #600]	@ (3400b508 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b2b0:	f7f6 fcf8 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
3400b2b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2b8:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b2bc:	4b90      	ldr	r3, [pc, #576]	@ (3400b500 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
3400b2be:	429a      	cmp	r2, r3
3400b2c0:	d142      	bne.n	3400b348 <HAL_RCCEx_PeriphCLKConfig+0x1954>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400b2c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2c6:	6a1b      	ldr	r3, [r3, #32]
3400b2c8:	2b00      	cmp	r3, #0
3400b2ca:	d016      	beq.n	3400b2fa <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b2cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2d0:	6a1b      	ldr	r3, [r3, #32]
3400b2d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b2d6:	d010      	beq.n	3400b2fa <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b2d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2dc:	6a1b      	ldr	r3, [r3, #32]
3400b2de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b2e2:	d00a      	beq.n	3400b2fa <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b2e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2e8:	6a1b      	ldr	r3, [r3, #32]
3400b2ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b2ee:	d004      	beq.n	3400b2fa <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b2f0:	f240 11dd 	movw	r1, #477	@ 0x1dd
3400b2f4:	4884      	ldr	r0, [pc, #528]	@ (3400b508 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b2f6:	f7f6 fcd5 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400b2fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b300:	2b00      	cmp	r3, #0
3400b302:	d005      	beq.n	3400b310 <HAL_RCCEx_PeriphCLKConfig+0x191c>
3400b304:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b30a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b30e:	d904      	bls.n	3400b31a <HAL_RCCEx_PeriphCLKConfig+0x1926>
3400b310:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400b314:	487c      	ldr	r0, [pc, #496]	@ (3400b508 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b316:	f7f6 fcc5 	bl	34001ca4 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400b31a:	4b7c      	ldr	r3, [pc, #496]	@ (3400b50c <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b31c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b320:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b324:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b328:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b32c:	6a1a      	ldr	r2, [r3, #32]
3400b32e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b334:	3b01      	subs	r3, #1
3400b336:	041b      	lsls	r3, r3, #16
3400b338:	4313      	orrs	r3, r2
3400b33a:	4a74      	ldr	r2, [pc, #464]	@ (3400b50c <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b33c:	430b      	orrs	r3, r1
3400b33e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400b342:	f7fd ff75 	bl	34009230 <LL_RCC_IC4_Enable>
3400b346:	e052      	b.n	3400b3ee <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
3400b348:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b34c:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b350:	4b6c      	ldr	r3, [pc, #432]	@ (3400b504 <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
3400b352:	429a      	cmp	r2, r3
3400b354:	d142      	bne.n	3400b3dc <HAL_RCCEx_PeriphCLKConfig+0x19e8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400b356:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b35c:	2b00      	cmp	r3, #0
3400b35e:	d016      	beq.n	3400b38e <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b360:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b366:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b36a:	d010      	beq.n	3400b38e <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b36c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b376:	d00a      	beq.n	3400b38e <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b378:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b37e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b382:	d004      	beq.n	3400b38e <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b384:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
3400b388:	485f      	ldr	r0, [pc, #380]	@ (3400b508 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b38a:	f7f6 fc8b 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400b38e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b394:	2b00      	cmp	r3, #0
3400b396:	d005      	beq.n	3400b3a4 <HAL_RCCEx_PeriphCLKConfig+0x19b0>
3400b398:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b39e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b3a2:	d904      	bls.n	3400b3ae <HAL_RCCEx_PeriphCLKConfig+0x19ba>
3400b3a4:	f240 11eb 	movw	r1, #491	@ 0x1eb
3400b3a8:	4857      	ldr	r0, [pc, #348]	@ (3400b508 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b3aa:	f7f6 fc7b 	bl	34001ca4 <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400b3ae:	4b57      	ldr	r3, [pc, #348]	@ (3400b50c <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b3b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b3b4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b3b8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b3bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400b3c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b3c8:	3b01      	subs	r3, #1
3400b3ca:	041b      	lsls	r3, r3, #16
3400b3cc:	4313      	orrs	r3, r2
3400b3ce:	4a4f      	ldr	r2, [pc, #316]	@ (3400b50c <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b3d0:	430b      	orrs	r3, r1
3400b3d2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400b3d6:	f7fd ff6b 	bl	340092b0 <LL_RCC_IC5_Enable>
3400b3da:	e008      	b.n	3400b3ee <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3400b3dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3e0:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b3e4:	4b45      	ldr	r3, [pc, #276]	@ (3400b4fc <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
3400b3e6:	429a      	cmp	r2, r3
3400b3e8:	d101      	bne.n	3400b3ee <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    {
      LL_RCC_CLKP_Enable();
3400b3ea:	f7fe fae1 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
3400b3ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3f2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
3400b3f6:	4618      	mov	r0, r3
3400b3f8:	f7fd fa51 	bl	3400889e <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
3400b3fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b400:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b404:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
3400b408:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
3400b40c:	2300      	movs	r3, #0
3400b40e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
3400b412:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
3400b416:	4603      	mov	r3, r0
3400b418:	460a      	mov	r2, r1
3400b41a:	4313      	orrs	r3, r2
3400b41c:	f000 80da 	beq.w	3400b5d4 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
3400b420:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b424:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b428:	4b39      	ldr	r3, [pc, #228]	@ (3400b510 <HAL_RCCEx_PeriphCLKConfig+0x1b1c>)
3400b42a:	429a      	cmp	r2, r3
3400b42c:	d019      	beq.n	3400b462 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b42e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b432:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b436:	4b37      	ldr	r3, [pc, #220]	@ (3400b514 <HAL_RCCEx_PeriphCLKConfig+0x1b20>)
3400b438:	429a      	cmp	r2, r3
3400b43a:	d012      	beq.n	3400b462 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b43c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b440:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b444:	4b34      	ldr	r3, [pc, #208]	@ (3400b518 <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
3400b446:	429a      	cmp	r2, r3
3400b448:	d00b      	beq.n	3400b462 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b44a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b44e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b452:	4b32      	ldr	r3, [pc, #200]	@ (3400b51c <HAL_RCCEx_PeriphCLKConfig+0x1b28>)
3400b454:	429a      	cmp	r2, r3
3400b456:	d004      	beq.n	3400b462 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b458:	f240 2105 	movw	r1, #517	@ 0x205
3400b45c:	482a      	ldr	r0, [pc, #168]	@ (3400b508 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b45e:	f7f6 fc21 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3400b462:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b466:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b46a:	4b2b      	ldr	r3, [pc, #172]	@ (3400b518 <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
3400b46c:	429a      	cmp	r2, r3
3400b46e:	d157      	bne.n	3400b520 <HAL_RCCEx_PeriphCLKConfig+0x1b2c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400b470:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b474:	6a1b      	ldr	r3, [r3, #32]
3400b476:	2b00      	cmp	r3, #0
3400b478:	d016      	beq.n	3400b4a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b47a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b47e:	6a1b      	ldr	r3, [r3, #32]
3400b480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b484:	d010      	beq.n	3400b4a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b486:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b48a:	6a1b      	ldr	r3, [r3, #32]
3400b48c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b490:	d00a      	beq.n	3400b4a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b492:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b496:	6a1b      	ldr	r3, [r3, #32]
3400b498:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b49c:	d004      	beq.n	3400b4a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b49e:	f240 210a 	movw	r1, #522	@ 0x20a
3400b4a2:	4819      	ldr	r0, [pc, #100]	@ (3400b508 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b4a4:	f7f6 fbfe 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400b4a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b4ae:	2b00      	cmp	r3, #0
3400b4b0:	d005      	beq.n	3400b4be <HAL_RCCEx_PeriphCLKConfig+0x1aca>
3400b4b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b4b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b4bc:	d904      	bls.n	3400b4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ad4>
3400b4be:	f240 210b 	movw	r1, #523	@ 0x20b
3400b4c2:	4811      	ldr	r0, [pc, #68]	@ (3400b508 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b4c4:	f7f6 fbee 	bl	34001ca4 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400b4c8:	4b10      	ldr	r3, [pc, #64]	@ (3400b50c <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b4ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b4ce:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b4d2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b4d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4da:	6a1a      	ldr	r2, [r3, #32]
3400b4dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b4e2:	3b01      	subs	r3, #1
3400b4e4:	041b      	lsls	r3, r3, #16
3400b4e6:	4313      	orrs	r3, r2
3400b4e8:	4a08      	ldr	r2, [pc, #32]	@ (3400b50c <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b4ea:	430b      	orrs	r3, r1
3400b4ec:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400b4f0:	f7fd fe9e 	bl	34009230 <LL_RCC_IC4_Enable>
3400b4f4:	e067      	b.n	3400b5c6 <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
3400b4f6:	bf00      	nop
3400b4f8:	0300001c 	.word	0x0300001c
3400b4fc:	0301001c 	.word	0x0301001c
3400b500:	0302001c 	.word	0x0302001c
3400b504:	0303001c 	.word	0x0303001c
3400b508:	3401e910 	.word	0x3401e910
3400b50c:	56028000 	.word	0x56028000
3400b510:	0300041c 	.word	0x0300041c
3400b514:	0301041c 	.word	0x0301041c
3400b518:	0302041c 	.word	0x0302041c
3400b51c:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3400b520:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b524:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b528:	4ba0      	ldr	r3, [pc, #640]	@ (3400b7ac <HAL_RCCEx_PeriphCLKConfig+0x1db8>)
3400b52a:	429a      	cmp	r2, r3
3400b52c:	d142      	bne.n	3400b5b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400b52e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b534:	2b00      	cmp	r3, #0
3400b536:	d016      	beq.n	3400b566 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b538:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b53e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b542:	d010      	beq.n	3400b566 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b544:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b54a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b54e:	d00a      	beq.n	3400b566 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b550:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b556:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b55a:	d004      	beq.n	3400b566 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b55c:	f240 2117 	movw	r1, #535	@ 0x217
3400b560:	4893      	ldr	r0, [pc, #588]	@ (3400b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b562:	f7f6 fb9f 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400b566:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b56c:	2b00      	cmp	r3, #0
3400b56e:	d005      	beq.n	3400b57c <HAL_RCCEx_PeriphCLKConfig+0x1b88>
3400b570:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b57a:	d904      	bls.n	3400b586 <HAL_RCCEx_PeriphCLKConfig+0x1b92>
3400b57c:	f44f 7106 	mov.w	r1, #536	@ 0x218
3400b580:	488b      	ldr	r0, [pc, #556]	@ (3400b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b582:	f7f6 fb8f 	bl	34001ca4 <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400b586:	4b8b      	ldr	r3, [pc, #556]	@ (3400b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b588:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b58c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b590:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b594:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b598:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400b59a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b5a0:	3b01      	subs	r3, #1
3400b5a2:	041b      	lsls	r3, r3, #16
3400b5a4:	4313      	orrs	r3, r2
3400b5a6:	4a83      	ldr	r2, [pc, #524]	@ (3400b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b5a8:	430b      	orrs	r3, r1
3400b5aa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400b5ae:	f7fd fe7f 	bl	340092b0 <LL_RCC_IC5_Enable>
3400b5b2:	e008      	b.n	3400b5c6 <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3400b5b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b5bc:	4b7e      	ldr	r3, [pc, #504]	@ (3400b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc4>)
3400b5be:	429a      	cmp	r2, r3
3400b5c0:	d101      	bne.n	3400b5c6 <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    {
      LL_RCC_CLKP_Enable();
3400b5c2:	f7fe f9f5 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
3400b5c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5ca:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
3400b5ce:	4618      	mov	r0, r3
3400b5d0:	f7fd f965 	bl	3400889e <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3400b5d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b5dc:	f002 0301 	and.w	r3, r2, #1
3400b5e0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
3400b5e4:	2300      	movs	r3, #0
3400b5e6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
3400b5ea:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
3400b5ee:	4603      	mov	r3, r0
3400b5f0:	460a      	mov	r2, r1
3400b5f2:	4313      	orrs	r3, r2
3400b5f4:	f000 8100 	beq.w	3400b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
3400b5f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b600:	2b00      	cmp	r3, #0
3400b602:	d02e      	beq.n	3400b662 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b604:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b608:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b60c:	2b10      	cmp	r3, #16
3400b60e:	d028      	beq.n	3400b662 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b610:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b614:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b618:	2b20      	cmp	r3, #32
3400b61a:	d022      	beq.n	3400b662 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b61c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b620:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b624:	2b30      	cmp	r3, #48	@ 0x30
3400b626:	d01c      	beq.n	3400b662 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b628:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b62c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b630:	2b40      	cmp	r3, #64	@ 0x40
3400b632:	d016      	beq.n	3400b662 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b634:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b638:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b63c:	2b50      	cmp	r3, #80	@ 0x50
3400b63e:	d010      	beq.n	3400b662 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b640:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b644:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b648:	2b60      	cmp	r3, #96	@ 0x60
3400b64a:	d00a      	beq.n	3400b662 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b64c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b650:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b654:	2b70      	cmp	r3, #112	@ 0x70
3400b656:	d004      	beq.n	3400b662 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b658:	f240 2132 	movw	r1, #562	@ 0x232
3400b65c:	4854      	ldr	r0, [pc, #336]	@ (3400b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b65e:	f7f6 fb21 	bl	34001ca4 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
3400b662:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b666:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400b66a:	2b00      	cmp	r3, #0
3400b66c:	d006      	beq.n	3400b67c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
3400b66e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b672:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400b676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b67a:	d904      	bls.n	3400b686 <HAL_RCCEx_PeriphCLKConfig+0x1c92>
3400b67c:	f240 2133 	movw	r1, #563	@ 0x233
3400b680:	484b      	ldr	r0, [pc, #300]	@ (3400b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b682:	f7f6 fb0f 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3400b686:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b68a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b68e:	2b20      	cmp	r3, #32
3400b690:	d142      	bne.n	3400b718 <HAL_RCCEx_PeriphCLKConfig+0x1d24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400b692:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b698:	2b00      	cmp	r3, #0
3400b69a:	d016      	beq.n	3400b6ca <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b69c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b6a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b6a6:	d010      	beq.n	3400b6ca <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b6a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b6ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b6b2:	d00a      	beq.n	3400b6ca <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b6b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b6ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b6be:	d004      	beq.n	3400b6ca <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b6c0:	f44f 710e 	mov.w	r1, #568	@ 0x238
3400b6c4:	483a      	ldr	r0, [pc, #232]	@ (3400b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b6c6:	f7f6 faed 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400b6ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b6d0:	2b00      	cmp	r3, #0
3400b6d2:	d005      	beq.n	3400b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1cec>
3400b6d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b6da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b6de:	d904      	bls.n	3400b6ea <HAL_RCCEx_PeriphCLKConfig+0x1cf6>
3400b6e0:	f240 2139 	movw	r1, #569	@ 0x239
3400b6e4:	4832      	ldr	r0, [pc, #200]	@ (3400b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b6e6:	f7f6 fadd 	bl	34001ca4 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400b6ea:	4b32      	ldr	r3, [pc, #200]	@ (3400b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b6ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b6f0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b6f4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b6f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400b6fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b704:	3b01      	subs	r3, #1
3400b706:	041b      	lsls	r3, r3, #16
3400b708:	4313      	orrs	r3, r2
3400b70a:	4a2a      	ldr	r2, [pc, #168]	@ (3400b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b70c:	430b      	orrs	r3, r1
3400b70e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400b712:	f7fd fe0d 	bl	34009330 <LL_RCC_IC7_Enable>
3400b716:	e059      	b.n	3400b7cc <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
3400b718:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b71c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b720:	2b30      	cmp	r3, #48	@ 0x30
3400b722:	d14b      	bne.n	3400b7bc <HAL_RCCEx_PeriphCLKConfig+0x1dc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400b724:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b72a:	2b00      	cmp	r3, #0
3400b72c:	d016      	beq.n	3400b75c <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b72e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b738:	d010      	beq.n	3400b75c <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b73a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b73e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b744:	d00a      	beq.n	3400b75c <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b746:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b74a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b74c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b750:	d004      	beq.n	3400b75c <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b752:	f240 2145 	movw	r1, #581	@ 0x245
3400b756:	4816      	ldr	r0, [pc, #88]	@ (3400b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b758:	f7f6 faa4 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400b75c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b762:	2b00      	cmp	r3, #0
3400b764:	d005      	beq.n	3400b772 <HAL_RCCEx_PeriphCLKConfig+0x1d7e>
3400b766:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b76c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b770:	d904      	bls.n	3400b77c <HAL_RCCEx_PeriphCLKConfig+0x1d88>
3400b772:	f240 2146 	movw	r1, #582	@ 0x246
3400b776:	480e      	ldr	r0, [pc, #56]	@ (3400b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b778:	f7f6 fa94 	bl	34001ca4 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400b77c:	4b0d      	ldr	r3, [pc, #52]	@ (3400b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b77e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b782:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b786:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b78a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b78e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400b790:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b796:	3b01      	subs	r3, #1
3400b798:	041b      	lsls	r3, r3, #16
3400b79a:	4313      	orrs	r3, r2
3400b79c:	4a05      	ldr	r2, [pc, #20]	@ (3400b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b79e:	430b      	orrs	r3, r1
3400b7a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400b7a4:	f7fd fe04 	bl	340093b0 <LL_RCC_IC8_Enable>
3400b7a8:	e010      	b.n	3400b7cc <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
3400b7aa:	bf00      	nop
3400b7ac:	0303041c 	.word	0x0303041c
3400b7b0:	3401e910 	.word	0x3401e910
3400b7b4:	56028000 	.word	0x56028000
3400b7b8:	0301041c 	.word	0x0301041c
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3400b7bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b7c4:	2b10      	cmp	r3, #16
3400b7c6:	d101      	bne.n	3400b7cc <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    {
      LL_RCC_CLKP_Enable();
3400b7c8:	f7fe f8f2 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3400b7cc:	4b77      	ldr	r3, [pc, #476]	@ (3400b9ac <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b7ce:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400b7d2:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
3400b7d6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
3400b7da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400b7e2:	3b01      	subs	r3, #1
3400b7e4:	021a      	lsls	r2, r3, #8
3400b7e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b7ee:	4313      	orrs	r3, r2
3400b7f0:	4a6e      	ldr	r2, [pc, #440]	@ (3400b9ac <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b7f2:	430b      	orrs	r3, r1
3400b7f4:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
3400b7f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b800:	f002 0302 	and.w	r3, r2, #2
3400b804:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
3400b808:	2300      	movs	r3, #0
3400b80a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
3400b80e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
3400b812:	4603      	mov	r3, r0
3400b814:	460a      	mov	r2, r1
3400b816:	4313      	orrs	r3, r2
3400b818:	f000 80db 	beq.w	3400b9d2 <HAL_RCCEx_PeriphCLKConfig+0x1fde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
3400b81c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b820:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b824:	2b00      	cmp	r3, #0
3400b826:	d02e      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b828:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b82c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b830:	2b01      	cmp	r3, #1
3400b832:	d028      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b834:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b838:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b83c:	2b02      	cmp	r3, #2
3400b83e:	d022      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b840:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b844:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b848:	2b03      	cmp	r3, #3
3400b84a:	d01c      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b84c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b850:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b854:	2b04      	cmp	r3, #4
3400b856:	d016      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b858:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b85c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b860:	2b05      	cmp	r3, #5
3400b862:	d010      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b864:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b868:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b86c:	2b06      	cmp	r3, #6
3400b86e:	d00a      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b870:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b874:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b878:	2b07      	cmp	r3, #7
3400b87a:	d004      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b87c:	f240 2161 	movw	r1, #609	@ 0x261
3400b880:	484b      	ldr	r0, [pc, #300]	@ (3400b9b0 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b882:	f7f6 fa0f 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
3400b886:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b88a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b88e:	2b02      	cmp	r3, #2
3400b890:	d142      	bne.n	3400b918 <HAL_RCCEx_PeriphCLKConfig+0x1f24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400b892:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b898:	2b00      	cmp	r3, #0
3400b89a:	d016      	beq.n	3400b8ca <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b89c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b8a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b8a6:	d010      	beq.n	3400b8ca <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b8a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b8ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b8b2:	d00a      	beq.n	3400b8ca <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b8b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b8ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b8be:	d004      	beq.n	3400b8ca <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b8c0:	f240 2166 	movw	r1, #614	@ 0x266
3400b8c4:	483a      	ldr	r0, [pc, #232]	@ (3400b9b0 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b8c6:	f7f6 f9ed 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400b8ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b8d0:	2b00      	cmp	r3, #0
3400b8d2:	d005      	beq.n	3400b8e0 <HAL_RCCEx_PeriphCLKConfig+0x1eec>
3400b8d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b8da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b8de:	d904      	bls.n	3400b8ea <HAL_RCCEx_PeriphCLKConfig+0x1ef6>
3400b8e0:	f240 2167 	movw	r1, #615	@ 0x267
3400b8e4:	4832      	ldr	r0, [pc, #200]	@ (3400b9b0 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b8e6:	f7f6 f9dd 	bl	34001ca4 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400b8ea:	4b30      	ldr	r3, [pc, #192]	@ (3400b9ac <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b8ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b8f0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b8f4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b8f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400b8fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b904:	3b01      	subs	r3, #1
3400b906:	041b      	lsls	r3, r3, #16
3400b908:	4313      	orrs	r3, r2
3400b90a:	4a28      	ldr	r2, [pc, #160]	@ (3400b9ac <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b90c:	430b      	orrs	r3, r1
3400b90e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400b912:	f7fd fd0d 	bl	34009330 <LL_RCC_IC7_Enable>
3400b916:	e055      	b.n	3400b9c4 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
3400b918:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b91c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b920:	2b03      	cmp	r3, #3
3400b922:	d147      	bne.n	3400b9b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400b924:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b92a:	2b00      	cmp	r3, #0
3400b92c:	d016      	beq.n	3400b95c <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b92e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b938:	d010      	beq.n	3400b95c <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b93a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b93e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b944:	d00a      	beq.n	3400b95c <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b946:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b94a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b94c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b950:	d004      	beq.n	3400b95c <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b952:	f240 2173 	movw	r1, #627	@ 0x273
3400b956:	4816      	ldr	r0, [pc, #88]	@ (3400b9b0 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b958:	f7f6 f9a4 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400b95c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b962:	2b00      	cmp	r3, #0
3400b964:	d005      	beq.n	3400b972 <HAL_RCCEx_PeriphCLKConfig+0x1f7e>
3400b966:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b96a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b96c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b970:	d904      	bls.n	3400b97c <HAL_RCCEx_PeriphCLKConfig+0x1f88>
3400b972:	f44f 711d 	mov.w	r1, #628	@ 0x274
3400b976:	480e      	ldr	r0, [pc, #56]	@ (3400b9b0 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b978:	f7f6 f994 	bl	34001ca4 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400b97c:	4b0b      	ldr	r3, [pc, #44]	@ (3400b9ac <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b97e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b982:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b986:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b98a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b98e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400b990:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b996:	3b01      	subs	r3, #1
3400b998:	041b      	lsls	r3, r3, #16
3400b99a:	4313      	orrs	r3, r2
3400b99c:	4a03      	ldr	r2, [pc, #12]	@ (3400b9ac <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b99e:	430b      	orrs	r3, r1
3400b9a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400b9a4:	f7fd fd04 	bl	340093b0 <LL_RCC_IC8_Enable>
3400b9a8:	e00c      	b.n	3400b9c4 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
3400b9aa:	bf00      	nop
3400b9ac:	56028000 	.word	0x56028000
3400b9b0:	3401e910 	.word	0x3401e910
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
3400b9b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b9bc:	2b01      	cmp	r3, #1
3400b9be:	d101      	bne.n	3400b9c4 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    {
      LL_RCC_CLKP_Enable();
3400b9c0:	f7fd fff6 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
3400b9c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b9cc:	4618      	mov	r0, r3
3400b9ce:	f7fc fdf7 	bl	340085c0 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3400b9d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b9da:	f002 0308 	and.w	r3, r2, #8
3400b9de:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3400b9e2:	2300      	movs	r3, #0
3400b9e4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
3400b9e8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
3400b9ec:	4603      	mov	r3, r0
3400b9ee:	460a      	mov	r2, r1
3400b9f0:	4313      	orrs	r3, r2
3400b9f2:	d049      	beq.n	3400ba88 <HAL_RCCEx_PeriphCLKConfig+0x2094>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
3400b9f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b9fc:	2b00      	cmp	r3, #0
3400b9fe:	d019      	beq.n	3400ba34 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400ba00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400ba08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ba0c:	d012      	beq.n	3400ba34 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400ba0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400ba16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ba1a:	d00b      	beq.n	3400ba34 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400ba1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400ba24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ba28:	d004      	beq.n	3400ba34 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400ba2a:	f240 218e 	movw	r1, #654	@ 0x28e
3400ba2e:	489e      	ldr	r0, [pc, #632]	@ (3400bca8 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400ba30:	f7f6 f938 	bl	34001ca4 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
3400ba34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400ba3c:	2b00      	cmp	r3, #0
3400ba3e:	d006      	beq.n	3400ba4e <HAL_RCCEx_PeriphCLKConfig+0x205a>
3400ba40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400ba48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ba4c:	d904      	bls.n	3400ba58 <HAL_RCCEx_PeriphCLKConfig+0x2064>
3400ba4e:	f240 218f 	movw	r1, #655	@ 0x28f
3400ba52:	4895      	ldr	r0, [pc, #596]	@ (3400bca8 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400ba54:	f7f6 f926 	bl	34001ca4 <assert_failed>

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3400ba58:	4b94      	ldr	r3, [pc, #592]	@ (3400bcac <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400ba5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400ba5e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ba62:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ba66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3400ba6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400ba76:	3b01      	subs	r3, #1
3400ba78:	041b      	lsls	r3, r3, #16
3400ba7a:	4313      	orrs	r3, r2
3400ba7c:	4a8b      	ldr	r2, [pc, #556]	@ (3400bcac <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400ba7e:	430b      	orrs	r3, r1
3400ba80:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
3400ba84:	f7fd fed4 	bl	34009830 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3400ba88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ba90:	f002 0310 	and.w	r3, r2, #16
3400ba94:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
3400ba98:	2300      	movs	r3, #0
3400ba9a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
3400ba9e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
3400baa2:	4603      	mov	r3, r0
3400baa4:	460a      	mov	r2, r1
3400baa6:	4313      	orrs	r3, r2
3400baa8:	f000 8082 	beq.w	3400bbb0 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
3400baac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bab0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400bab4:	2b00      	cmp	r3, #0
3400bab6:	d019      	beq.n	3400baec <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400bab8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400babc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400bac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400bac4:	d012      	beq.n	3400baec <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400bac6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400baca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400bace:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400bad2:	d00b      	beq.n	3400baec <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400bad4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bad8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400badc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400bae0:	d004      	beq.n	3400baec <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400bae2:	f240 219d 	movw	r1, #669	@ 0x29d
3400bae6:	4870      	ldr	r0, [pc, #448]	@ (3400bca8 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bae8:	f7f6 f8dc 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
3400baec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400baf0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400baf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400baf8:	d14a      	bne.n	3400bb90 <HAL_RCCEx_PeriphCLKConfig+0x219c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
3400bafa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400bb02:	2b00      	cmp	r3, #0
3400bb04:	d019      	beq.n	3400bb3a <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400bb06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400bb0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bb12:	d012      	beq.n	3400bb3a <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400bb14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400bb1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bb20:	d00b      	beq.n	3400bb3a <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400bb22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400bb2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bb2e:	d004      	beq.n	3400bb3a <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400bb30:	f240 21a2 	movw	r1, #674	@ 0x2a2
3400bb34:	485c      	ldr	r0, [pc, #368]	@ (3400bca8 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bb36:	f7f6 f8b5 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
3400bb3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400bb42:	2b00      	cmp	r3, #0
3400bb44:	d006      	beq.n	3400bb54 <HAL_RCCEx_PeriphCLKConfig+0x2160>
3400bb46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400bb4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bb52:	d904      	bls.n	3400bb5e <HAL_RCCEx_PeriphCLKConfig+0x216a>
3400bb54:	f240 21a3 	movw	r1, #675	@ 0x2a3
3400bb58:	4853      	ldr	r0, [pc, #332]	@ (3400bca8 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bb5a:	f7f6 f8a3 	bl	34001ca4 <assert_failed>

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
3400bb5e:	4b53      	ldr	r3, [pc, #332]	@ (3400bcac <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400bb60:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400bb64:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bb68:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bb6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3400bb74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400bb7c:	3b01      	subs	r3, #1
3400bb7e:	041b      	lsls	r3, r3, #16
3400bb80:	4313      	orrs	r3, r2
3400bb82:	4a4a      	ldr	r2, [pc, #296]	@ (3400bcac <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400bb84:	430b      	orrs	r3, r1
3400bb86:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
3400bb8a:	f7fd fe11 	bl	340097b0 <LL_RCC_IC17_Enable>
3400bb8e:	e008      	b.n	3400bba2 <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
3400bb90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb94:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400bb98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400bb9c:	d101      	bne.n	3400bba2 <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    {
      LL_RCC_CLKP_Enable();
3400bb9e:	f7fd ff07 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
3400bba2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bba6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400bbaa:	4618      	mov	r0, r3
3400bbac:	f7fc fd34 	bl	34008618 <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
3400bbb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bbb8:	f002 0320 	and.w	r3, r2, #32
3400bbbc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
3400bbc0:	2300      	movs	r3, #0
3400bbc2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
3400bbc6:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
3400bbca:	4603      	mov	r3, r0
3400bbcc:	460a      	mov	r2, r1
3400bbce:	4313      	orrs	r3, r2
3400bbd0:	d07e      	beq.n	3400bcd0 <HAL_RCCEx_PeriphCLKConfig+0x22dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
3400bbd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbd6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bbda:	2b00      	cmp	r3, #0
3400bbdc:	d019      	beq.n	3400bc12 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400bbde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbe2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bbe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400bbea:	d012      	beq.n	3400bc12 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400bbec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbf0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bbf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400bbf8:	d00b      	beq.n	3400bc12 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400bbfa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbfe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bc02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3400bc06:	d004      	beq.n	3400bc12 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400bc08:	f240 21bd 	movw	r1, #701	@ 0x2bd
3400bc0c:	4826      	ldr	r0, [pc, #152]	@ (3400bca8 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bc0e:	f7f6 f849 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
3400bc12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc16:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bc1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400bc1e:	d147      	bne.n	3400bcb0 <HAL_RCCEx_PeriphCLKConfig+0x22bc>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
3400bc20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400bc26:	2b00      	cmp	r3, #0
3400bc28:	d016      	beq.n	3400bc58 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400bc2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400bc30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bc34:	d010      	beq.n	3400bc58 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400bc36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400bc3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bc40:	d00a      	beq.n	3400bc58 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400bc42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400bc48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bc4c:	d004      	beq.n	3400bc58 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400bc4e:	f240 21c2 	movw	r1, #706	@ 0x2c2
3400bc52:	4815      	ldr	r0, [pc, #84]	@ (3400bca8 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bc54:	f7f6 f826 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
3400bc58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400bc5e:	2b00      	cmp	r3, #0
3400bc60:	d005      	beq.n	3400bc6e <HAL_RCCEx_PeriphCLKConfig+0x227a>
3400bc62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400bc68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bc6c:	d904      	bls.n	3400bc78 <HAL_RCCEx_PeriphCLKConfig+0x2284>
3400bc6e:	f240 21c3 	movw	r1, #707	@ 0x2c3
3400bc72:	480d      	ldr	r0, [pc, #52]	@ (3400bca8 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bc74:	f7f6 f816 	bl	34001ca4 <assert_failed>

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
3400bc78:	4b0c      	ldr	r3, [pc, #48]	@ (3400bcac <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400bc7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400bc7e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bc82:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bc86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
3400bc8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400bc92:	3b01      	subs	r3, #1
3400bc94:	041b      	lsls	r3, r3, #16
3400bc96:	4313      	orrs	r3, r2
3400bc98:	4a04      	ldr	r2, [pc, #16]	@ (3400bcac <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400bc9a:	430b      	orrs	r3, r1
3400bc9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
3400bca0:	f7fd fc46 	bl	34009530 <LL_RCC_IC12_Enable>
3400bca4:	e00d      	b.n	3400bcc2 <HAL_RCCEx_PeriphCLKConfig+0x22ce>
3400bca6:	bf00      	nop
3400bca8:	3401e910 	.word	0x3401e910
3400bcac:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3400bcb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcb4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bcb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400bcbc:	d101      	bne.n	3400bcc2 <HAL_RCCEx_PeriphCLKConfig+0x22ce>
    {
      LL_RCC_CLKP_Enable();
3400bcbe:	f7fd fe77 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
3400bcc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcc6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bcca:	4618      	mov	r0, r3
3400bccc:	f7fc fcba 	bl	34008644 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3400bcd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bcd8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
3400bcdc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
3400bce0:	2300      	movs	r3, #0
3400bce2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
3400bce6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
3400bcea:	4603      	mov	r3, r0
3400bcec:	460a      	mov	r2, r1
3400bcee:	4313      	orrs	r3, r2
3400bcf0:	d01f      	beq.n	3400bd32 <HAL_RCCEx_PeriphCLKConfig+0x233e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
3400bcf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcf6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bcfa:	2b00      	cmp	r3, #0
3400bcfc:	d012      	beq.n	3400bd24 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400bcfe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd02:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bd06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400bd0a:	d00b      	beq.n	3400bd24 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400bd0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd10:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bd14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400bd18:	d004      	beq.n	3400bd24 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400bd1a:	f240 21dd 	movw	r1, #733	@ 0x2dd
3400bd1e:	48c1      	ldr	r0, [pc, #772]	@ (3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bd20:	f7f5 ffc0 	bl	34001ca4 <assert_failed>

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3400bd24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd28:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bd2c:	4618      	mov	r0, r3
3400bd2e:	f7fc fc9f 	bl	34008670 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
3400bd32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bd3a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
3400bd3e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
3400bd42:	2300      	movs	r3, #0
3400bd44:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
3400bd48:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
3400bd4c:	4603      	mov	r3, r0
3400bd4e:	460a      	mov	r2, r1
3400bd50:	4313      	orrs	r3, r2
3400bd52:	d018      	beq.n	3400bd86 <HAL_RCCEx_PeriphCLKConfig+0x2392>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
3400bd54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd58:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400bd5c:	2b00      	cmp	r3, #0
3400bd5e:	d00b      	beq.n	3400bd78 <HAL_RCCEx_PeriphCLKConfig+0x2384>
3400bd60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400bd68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400bd6c:	d004      	beq.n	3400bd78 <HAL_RCCEx_PeriphCLKConfig+0x2384>
3400bd6e:	f240 21e7 	movw	r1, #743	@ 0x2e7
3400bd72:	48ac      	ldr	r0, [pc, #688]	@ (3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bd74:	f7f5 ff96 	bl	34001ca4 <assert_failed>

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
3400bd78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400bd80:	4618      	mov	r0, r3
3400bd82:	f7fc fc99 	bl	340086b8 <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3400bd86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bd8e:	f402 7380 	and.w	r3, r2, #256	@ 0x100
3400bd92:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
3400bd96:	2300      	movs	r3, #0
3400bd98:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
3400bd9c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
3400bda0:	4603      	mov	r3, r0
3400bda2:	460a      	mov	r2, r1
3400bda4:	4313      	orrs	r3, r2
3400bda6:	d018      	beq.n	3400bdda <HAL_RCCEx_PeriphCLKConfig+0x23e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
3400bda8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400bdb0:	2b00      	cmp	r3, #0
3400bdb2:	d00b      	beq.n	3400bdcc <HAL_RCCEx_PeriphCLKConfig+0x23d8>
3400bdb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400bdbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400bdc0:	d004      	beq.n	3400bdcc <HAL_RCCEx_PeriphCLKConfig+0x23d8>
3400bdc2:	f240 21f1 	movw	r1, #753	@ 0x2f1
3400bdc6:	4897      	ldr	r0, [pc, #604]	@ (3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bdc8:	f7f5 ff6c 	bl	34001ca4 <assert_failed>

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
3400bdcc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400bdd4:	4618      	mov	r0, r3
3400bdd6:	f7fc fc85 	bl	340086e4 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3400bdda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bde2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
3400bde6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
3400bdea:	2300      	movs	r3, #0
3400bdec:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
3400bdf0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
3400bdf4:	4603      	mov	r3, r0
3400bdf6:	460a      	mov	r2, r1
3400bdf8:	4313      	orrs	r3, r2
3400bdfa:	f000 8093 	beq.w	3400bf24 <HAL_RCCEx_PeriphCLKConfig+0x2530>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
3400bdfe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400be06:	2b00      	cmp	r3, #0
3400be08:	d016      	beq.n	3400be38 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400be0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400be12:	2b01      	cmp	r3, #1
3400be14:	d010      	beq.n	3400be38 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400be16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400be1e:	2b02      	cmp	r3, #2
3400be20:	d00a      	beq.n	3400be38 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400be22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400be2a:	2b03      	cmp	r3, #3
3400be2c:	d004      	beq.n	3400be38 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400be2e:	f240 21fb 	movw	r1, #763	@ 0x2fb
3400be32:	487c      	ldr	r0, [pc, #496]	@ (3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400be34:	f7f5 ff36 	bl	34001ca4 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
3400be38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400be40:	2b00      	cmp	r3, #0
3400be42:	d005      	beq.n	3400be50 <HAL_RCCEx_PeriphCLKConfig+0x245c>
3400be44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400be4c:	2b10      	cmp	r3, #16
3400be4e:	d904      	bls.n	3400be5a <HAL_RCCEx_PeriphCLKConfig+0x2466>
3400be50:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
3400be54:	4873      	ldr	r0, [pc, #460]	@ (3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400be56:	f7f5 ff25 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3400be5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400be62:	2b02      	cmp	r3, #2
3400be64:	d142      	bne.n	3400beec <HAL_RCCEx_PeriphCLKConfig+0x24f8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
3400be66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400be6c:	2b00      	cmp	r3, #0
3400be6e:	d016      	beq.n	3400be9e <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400be70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400be76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400be7a:	d010      	beq.n	3400be9e <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400be7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400be82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400be86:	d00a      	beq.n	3400be9e <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400be88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400be8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400be92:	d004      	beq.n	3400be9e <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400be94:	f240 3101 	movw	r1, #769	@ 0x301
3400be98:	4862      	ldr	r0, [pc, #392]	@ (3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400be9a:	f7f5 ff03 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
3400be9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400bea4:	2b00      	cmp	r3, #0
3400bea6:	d005      	beq.n	3400beb4 <HAL_RCCEx_PeriphCLKConfig+0x24c0>
3400bea8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400beac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400beae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400beb2:	d904      	bls.n	3400bebe <HAL_RCCEx_PeriphCLKConfig+0x24ca>
3400beb4:	f240 3102 	movw	r1, #770	@ 0x302
3400beb8:	485a      	ldr	r0, [pc, #360]	@ (3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400beba:	f7f5 fef3 	bl	34001ca4 <assert_failed>

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3400bebe:	4b5a      	ldr	r3, [pc, #360]	@ (3400c028 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400bec4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bec8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400becc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bed0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3400bed2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400bed8:	3b01      	subs	r3, #1
3400beda:	041b      	lsls	r3, r3, #16
3400bedc:	4313      	orrs	r3, r2
3400bede:	4a52      	ldr	r2, [pc, #328]	@ (3400c028 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bee0:	430b      	orrs	r3, r1
3400bee2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
3400bee6:	f7fd fb63 	bl	340095b0 <LL_RCC_IC13_Enable>
3400beea:	e007      	b.n	3400befc <HAL_RCCEx_PeriphCLKConfig+0x2508>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
3400beec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bef0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bef4:	2b01      	cmp	r3, #1
3400bef6:	d101      	bne.n	3400befc <HAL_RCCEx_PeriphCLKConfig+0x2508>
    {
      LL_RCC_CLKP_Enable();
3400bef8:	f7fd fd5a 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
3400befc:	4b4a      	ldr	r3, [pc, #296]	@ (3400c028 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400befe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400bf02:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
3400bf06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400bf0e:	3b01      	subs	r3, #1
3400bf10:	011a      	lsls	r2, r3, #4
3400bf12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bf1a:	4313      	orrs	r3, r2
3400bf1c:	4a42      	ldr	r2, [pc, #264]	@ (3400c028 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bf1e:	430b      	orrs	r3, r1
3400bf20:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
3400bf24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bf2c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3400bf30:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
3400bf34:	2300      	movs	r3, #0
3400bf36:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
3400bf3a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3400bf3e:	4603      	mov	r3, r0
3400bf40:	460a      	mov	r2, r1
3400bf42:	4313      	orrs	r3, r2
3400bf44:	f000 8081 	beq.w	3400c04a <HAL_RCCEx_PeriphCLKConfig+0x2656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
3400bf48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bf50:	2b00      	cmp	r3, #0
3400bf52:	d016      	beq.n	3400bf82 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bf54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bf5c:	2b01      	cmp	r3, #1
3400bf5e:	d010      	beq.n	3400bf82 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bf60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bf68:	2b02      	cmp	r3, #2
3400bf6a:	d00a      	beq.n	3400bf82 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bf6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bf74:	2b03      	cmp	r3, #3
3400bf76:	d004      	beq.n	3400bf82 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bf78:	f240 311d 	movw	r1, #797	@ 0x31d
3400bf7c:	4829      	ldr	r0, [pc, #164]	@ (3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bf7e:	f7f5 fe91 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3400bf82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bf8a:	2b02      	cmp	r3, #2
3400bf8c:	d14e      	bne.n	3400c02c <HAL_RCCEx_PeriphCLKConfig+0x2638>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
3400bf8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bf96:	2b00      	cmp	r3, #0
3400bf98:	d019      	beq.n	3400bfce <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bf9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bfa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bfa6:	d012      	beq.n	3400bfce <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bfa8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bfb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bfb4:	d00b      	beq.n	3400bfce <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bfb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bfbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bfc2:	d004      	beq.n	3400bfce <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bfc4:	f240 3122 	movw	r1, #802	@ 0x322
3400bfc8:	4816      	ldr	r0, [pc, #88]	@ (3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bfca:	f7f5 fe6b 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400bfce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400bfd6:	2b00      	cmp	r3, #0
3400bfd8:	d006      	beq.n	3400bfe8 <HAL_RCCEx_PeriphCLKConfig+0x25f4>
3400bfda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400bfe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bfe6:	d904      	bls.n	3400bff2 <HAL_RCCEx_PeriphCLKConfig+0x25fe>
3400bfe8:	f240 3123 	movw	r1, #803	@ 0x323
3400bfec:	480d      	ldr	r0, [pc, #52]	@ (3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bfee:	f7f5 fe59 	bl	34001ca4 <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400bff2:	4b0d      	ldr	r3, [pc, #52]	@ (3400c028 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bff4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400bff8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bffc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c000:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c004:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400c008:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c00c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400c010:	3b01      	subs	r3, #1
3400c012:	041b      	lsls	r3, r3, #16
3400c014:	4313      	orrs	r3, r2
3400c016:	4a04      	ldr	r2, [pc, #16]	@ (3400c028 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400c018:	430b      	orrs	r3, r1
3400c01a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3400c01e:	f7fd fc47 	bl	340098b0 <LL_RCC_IC19_Enable>
3400c022:	e00b      	b.n	3400c03c <HAL_RCCEx_PeriphCLKConfig+0x2648>
3400c024:	3401e910 	.word	0x3401e910
3400c028:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
3400c02c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400c034:	2b01      	cmp	r3, #1
3400c036:	d101      	bne.n	3400c03c <HAL_RCCEx_PeriphCLKConfig+0x2648>
    {
      LL_RCC_CLKP_Enable();
3400c038:	f7fd fcba 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
3400c03c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c040:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400c044:	4618      	mov	r0, r3
3400c046:	f7fc fb63 	bl	34008710 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3400c04a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c04e:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c052:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3400c056:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
3400c05a:	2300      	movs	r3, #0
3400c05c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
3400c060:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3400c064:	4603      	mov	r3, r0
3400c066:	460a      	mov	r2, r1
3400c068:	4313      	orrs	r3, r2
3400c06a:	f000 80d3 	beq.w	3400c214 <HAL_RCCEx_PeriphCLKConfig+0x2820>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
3400c06e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c072:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c076:	4bad      	ldr	r3, [pc, #692]	@ (3400c32c <HAL_RCCEx_PeriphCLKConfig+0x2938>)
3400c078:	429a      	cmp	r2, r3
3400c07a:	d027      	beq.n	3400c0cc <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c07c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c080:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c084:	4baa      	ldr	r3, [pc, #680]	@ (3400c330 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3400c086:	429a      	cmp	r2, r3
3400c088:	d020      	beq.n	3400c0cc <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c08a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c08e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c092:	4ba8      	ldr	r3, [pc, #672]	@ (3400c334 <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3400c094:	429a      	cmp	r2, r3
3400c096:	d019      	beq.n	3400c0cc <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c098:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c09c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c0a0:	4ba5      	ldr	r3, [pc, #660]	@ (3400c338 <HAL_RCCEx_PeriphCLKConfig+0x2944>)
3400c0a2:	429a      	cmp	r2, r3
3400c0a4:	d012      	beq.n	3400c0cc <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c0a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0aa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c0ae:	4ba3      	ldr	r3, [pc, #652]	@ (3400c33c <HAL_RCCEx_PeriphCLKConfig+0x2948>)
3400c0b0:	429a      	cmp	r2, r3
3400c0b2:	d00b      	beq.n	3400c0cc <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c0b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0b8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c0bc:	4ba0      	ldr	r3, [pc, #640]	@ (3400c340 <HAL_RCCEx_PeriphCLKConfig+0x294c>)
3400c0be:	429a      	cmp	r2, r3
3400c0c0:	d004      	beq.n	3400c0cc <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c0c2:	f240 313d 	movw	r1, #829	@ 0x33d
3400c0c6:	489f      	ldr	r0, [pc, #636]	@ (3400c344 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c0c8:	f7f5 fdec 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
3400c0cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c0d4:	4b97      	ldr	r3, [pc, #604]	@ (3400c334 <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3400c0d6:	429a      	cmp	r2, r3
3400c0d8:	d142      	bne.n	3400c160 <HAL_RCCEx_PeriphCLKConfig+0x276c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c0da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c0e0:	2b00      	cmp	r3, #0
3400c0e2:	d016      	beq.n	3400c112 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400c0e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c0ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c0ee:	d010      	beq.n	3400c112 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400c0f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c0f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c0fa:	d00a      	beq.n	3400c112 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400c0fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c102:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c106:	d004      	beq.n	3400c112 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400c108:	f240 3142 	movw	r1, #834	@ 0x342
3400c10c:	488d      	ldr	r0, [pc, #564]	@ (3400c344 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c10e:	f7f5 fdc9 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c112:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c118:	2b00      	cmp	r3, #0
3400c11a:	d005      	beq.n	3400c128 <HAL_RCCEx_PeriphCLKConfig+0x2734>
3400c11c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c126:	d904      	bls.n	3400c132 <HAL_RCCEx_PeriphCLKConfig+0x273e>
3400c128:	f240 3143 	movw	r1, #835	@ 0x343
3400c12c:	4885      	ldr	r0, [pc, #532]	@ (3400c344 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c12e:	f7f5 fdb9 	bl	34001ca4 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c132:	4b85      	ldr	r3, [pc, #532]	@ (3400c348 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c138:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c13c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c140:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c144:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c146:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c14a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c14c:	3b01      	subs	r3, #1
3400c14e:	041b      	lsls	r3, r3, #16
3400c150:	4313      	orrs	r3, r2
3400c152:	4a7d      	ldr	r2, [pc, #500]	@ (3400c348 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c154:	430b      	orrs	r3, r1
3400c156:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c15a:	f7fd f9a9 	bl	340094b0 <LL_RCC_IC10_Enable>
3400c15e:	e052      	b.n	3400c206 <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
3400c160:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c164:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c168:	4b73      	ldr	r3, [pc, #460]	@ (3400c338 <HAL_RCCEx_PeriphCLKConfig+0x2944>)
3400c16a:	429a      	cmp	r2, r3
3400c16c:	d142      	bne.n	3400c1f4 <HAL_RCCEx_PeriphCLKConfig+0x2800>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c16e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c172:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c174:	2b00      	cmp	r3, #0
3400c176:	d016      	beq.n	3400c1a6 <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400c178:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c17c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c17e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c182:	d010      	beq.n	3400c1a6 <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400c184:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c18a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c18e:	d00a      	beq.n	3400c1a6 <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400c190:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c196:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c19a:	d004      	beq.n	3400c1a6 <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400c19c:	f240 314f 	movw	r1, #847	@ 0x34f
3400c1a0:	4868      	ldr	r0, [pc, #416]	@ (3400c344 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c1a2:	f7f5 fd7f 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c1a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c1ac:	2b00      	cmp	r3, #0
3400c1ae:	d005      	beq.n	3400c1bc <HAL_RCCEx_PeriphCLKConfig+0x27c8>
3400c1b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c1b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c1ba:	d904      	bls.n	3400c1c6 <HAL_RCCEx_PeriphCLKConfig+0x27d2>
3400c1bc:	f44f 7154 	mov.w	r1, #848	@ 0x350
3400c1c0:	4860      	ldr	r0, [pc, #384]	@ (3400c344 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c1c2:	f7f5 fd6f 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c1c6:	4b60      	ldr	r3, [pc, #384]	@ (3400c348 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c1c8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c1cc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c1d0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c1d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1d8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c1da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c1e0:	3b01      	subs	r3, #1
3400c1e2:	041b      	lsls	r3, r3, #16
3400c1e4:	4313      	orrs	r3, r2
3400c1e6:	4a58      	ldr	r2, [pc, #352]	@ (3400c348 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c1e8:	430b      	orrs	r3, r1
3400c1ea:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c1ee:	f7fd fa5f 	bl	340096b0 <LL_RCC_IC15_Enable>
3400c1f2:	e008      	b.n	3400c206 <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
3400c1f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1f8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c1fc:	4b4c      	ldr	r3, [pc, #304]	@ (3400c330 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3400c1fe:	429a      	cmp	r2, r3
3400c200:	d101      	bne.n	3400c206 <HAL_RCCEx_PeriphCLKConfig+0x2812>
    {
      LL_RCC_CLKP_Enable();
3400c202:	f7fd fbd5 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
3400c206:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c20a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c20e:	4618      	mov	r0, r3
3400c210:	f7fc faaa 	bl	34008768 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
3400c214:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c218:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c21c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
3400c220:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
3400c224:	2300      	movs	r3, #0
3400c226:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
3400c22a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3400c22e:	4603      	mov	r3, r0
3400c230:	460a      	mov	r2, r1
3400c232:	4313      	orrs	r3, r2
3400c234:	f000 80f0 	beq.w	3400c418 <HAL_RCCEx_PeriphCLKConfig+0x2a24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
3400c238:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c23c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c240:	4b42      	ldr	r3, [pc, #264]	@ (3400c34c <HAL_RCCEx_PeriphCLKConfig+0x2958>)
3400c242:	429a      	cmp	r2, r3
3400c244:	d027      	beq.n	3400c296 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c246:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c24a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c24e:	4b40      	ldr	r3, [pc, #256]	@ (3400c350 <HAL_RCCEx_PeriphCLKConfig+0x295c>)
3400c250:	429a      	cmp	r2, r3
3400c252:	d020      	beq.n	3400c296 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c254:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c258:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c25c:	4b3d      	ldr	r3, [pc, #244]	@ (3400c354 <HAL_RCCEx_PeriphCLKConfig+0x2960>)
3400c25e:	429a      	cmp	r2, r3
3400c260:	d019      	beq.n	3400c296 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c262:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c266:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c26a:	4b3b      	ldr	r3, [pc, #236]	@ (3400c358 <HAL_RCCEx_PeriphCLKConfig+0x2964>)
3400c26c:	429a      	cmp	r2, r3
3400c26e:	d012      	beq.n	3400c296 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c270:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c274:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c278:	4b38      	ldr	r3, [pc, #224]	@ (3400c35c <HAL_RCCEx_PeriphCLKConfig+0x2968>)
3400c27a:	429a      	cmp	r2, r3
3400c27c:	d00b      	beq.n	3400c296 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c27e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c282:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c286:	4b36      	ldr	r3, [pc, #216]	@ (3400c360 <HAL_RCCEx_PeriphCLKConfig+0x296c>)
3400c288:	429a      	cmp	r2, r3
3400c28a:	d004      	beq.n	3400c296 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c28c:	f240 316a 	movw	r1, #874	@ 0x36a
3400c290:	482c      	ldr	r0, [pc, #176]	@ (3400c344 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c292:	f7f5 fd07 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
3400c296:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c29a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c29e:	4b2d      	ldr	r3, [pc, #180]	@ (3400c354 <HAL_RCCEx_PeriphCLKConfig+0x2960>)
3400c2a0:	429a      	cmp	r2, r3
3400c2a2:	d15f      	bne.n	3400c364 <HAL_RCCEx_PeriphCLKConfig+0x2970>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c2a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c2aa:	2b00      	cmp	r3, #0
3400c2ac:	d016      	beq.n	3400c2dc <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c2ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c2b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c2b8:	d010      	beq.n	3400c2dc <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c2ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c2c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c2c4:	d00a      	beq.n	3400c2dc <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c2c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c2cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c2d0:	d004      	beq.n	3400c2dc <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c2d2:	f240 316f 	movw	r1, #879	@ 0x36f
3400c2d6:	481b      	ldr	r0, [pc, #108]	@ (3400c344 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c2d8:	f7f5 fce4 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c2dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c2e2:	2b00      	cmp	r3, #0
3400c2e4:	d005      	beq.n	3400c2f2 <HAL_RCCEx_PeriphCLKConfig+0x28fe>
3400c2e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c2ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c2f0:	d904      	bls.n	3400c2fc <HAL_RCCEx_PeriphCLKConfig+0x2908>
3400c2f2:	f44f 715c 	mov.w	r1, #880	@ 0x370
3400c2f6:	4813      	ldr	r0, [pc, #76]	@ (3400c344 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c2f8:	f7f5 fcd4 	bl	34001ca4 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c2fc:	4b12      	ldr	r3, [pc, #72]	@ (3400c348 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c2fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c302:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c306:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c30a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c30e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c310:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c316:	3b01      	subs	r3, #1
3400c318:	041b      	lsls	r3, r3, #16
3400c31a:	4313      	orrs	r3, r2
3400c31c:	4a0a      	ldr	r2, [pc, #40]	@ (3400c348 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c31e:	430b      	orrs	r3, r1
3400c320:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c324:	f7fd f8c4 	bl	340094b0 <LL_RCC_IC10_Enable>
3400c328:	e06f      	b.n	3400c40a <HAL_RCCEx_PeriphCLKConfig+0x2a16>
3400c32a:	bf00      	nop
3400c32c:	0700000c 	.word	0x0700000c
3400c330:	0701000c 	.word	0x0701000c
3400c334:	0702000c 	.word	0x0702000c
3400c338:	0703000c 	.word	0x0703000c
3400c33c:	0704000c 	.word	0x0704000c
3400c340:	0705000c 	.word	0x0705000c
3400c344:	3401e910 	.word	0x3401e910
3400c348:	56028000 	.word	0x56028000
3400c34c:	0700040c 	.word	0x0700040c
3400c350:	0701040c 	.word	0x0701040c
3400c354:	0702040c 	.word	0x0702040c
3400c358:	0703040c 	.word	0x0703040c
3400c35c:	0704040c 	.word	0x0704040c
3400c360:	0705040c 	.word	0x0705040c
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3400c364:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c368:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c36c:	4b95      	ldr	r3, [pc, #596]	@ (3400c5c4 <HAL_RCCEx_PeriphCLKConfig+0x2bd0>)
3400c36e:	429a      	cmp	r2, r3
3400c370:	d142      	bne.n	3400c3f8 <HAL_RCCEx_PeriphCLKConfig+0x2a04>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c372:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c378:	2b00      	cmp	r3, #0
3400c37a:	d016      	beq.n	3400c3aa <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c37c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c386:	d010      	beq.n	3400c3aa <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c388:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c38c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c38e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c392:	d00a      	beq.n	3400c3aa <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c394:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c398:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c39a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c39e:	d004      	beq.n	3400c3aa <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c3a0:	f44f 715f 	mov.w	r1, #892	@ 0x37c
3400c3a4:	4888      	ldr	r0, [pc, #544]	@ (3400c5c8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c3a6:	f7f5 fc7d 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c3aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c3b0:	2b00      	cmp	r3, #0
3400c3b2:	d005      	beq.n	3400c3c0 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
3400c3b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c3ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c3be:	d904      	bls.n	3400c3ca <HAL_RCCEx_PeriphCLKConfig+0x29d6>
3400c3c0:	f240 317d 	movw	r1, #893	@ 0x37d
3400c3c4:	4880      	ldr	r0, [pc, #512]	@ (3400c5c8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c3c6:	f7f5 fc6d 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c3ca:	4b80      	ldr	r3, [pc, #512]	@ (3400c5cc <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c3cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c3d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c3d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c3d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3dc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c3de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c3e4:	3b01      	subs	r3, #1
3400c3e6:	041b      	lsls	r3, r3, #16
3400c3e8:	4313      	orrs	r3, r2
3400c3ea:	4a78      	ldr	r2, [pc, #480]	@ (3400c5cc <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c3ec:	430b      	orrs	r3, r1
3400c3ee:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c3f2:	f7fd f95d 	bl	340096b0 <LL_RCC_IC15_Enable>
3400c3f6:	e008      	b.n	3400c40a <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
3400c3f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3fc:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c400:	4b73      	ldr	r3, [pc, #460]	@ (3400c5d0 <HAL_RCCEx_PeriphCLKConfig+0x2bdc>)
3400c402:	429a      	cmp	r2, r3
3400c404:	d101      	bne.n	3400c40a <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    {
      LL_RCC_CLKP_Enable();
3400c406:	f7fd fad3 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
3400c40a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c40e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400c412:	4618      	mov	r0, r3
3400c414:	f7fc f9a8 	bl	34008768 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
3400c418:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c420:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3400c424:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
3400c428:	2300      	movs	r3, #0
3400c42a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
3400c42e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
3400c432:	4603      	mov	r3, r0
3400c434:	460a      	mov	r2, r1
3400c436:	4313      	orrs	r3, r2
3400c438:	f000 80e8 	beq.w	3400c60c <HAL_RCCEx_PeriphCLKConfig+0x2c18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
3400c43c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c440:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c444:	4b63      	ldr	r3, [pc, #396]	@ (3400c5d4 <HAL_RCCEx_PeriphCLKConfig+0x2be0>)
3400c446:	429a      	cmp	r2, r3
3400c448:	d027      	beq.n	3400c49a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c44a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c44e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c452:	4b61      	ldr	r3, [pc, #388]	@ (3400c5d8 <HAL_RCCEx_PeriphCLKConfig+0x2be4>)
3400c454:	429a      	cmp	r2, r3
3400c456:	d020      	beq.n	3400c49a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c458:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c45c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c460:	4b5e      	ldr	r3, [pc, #376]	@ (3400c5dc <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
3400c462:	429a      	cmp	r2, r3
3400c464:	d019      	beq.n	3400c49a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c466:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c46a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c46e:	4b5c      	ldr	r3, [pc, #368]	@ (3400c5e0 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
3400c470:	429a      	cmp	r2, r3
3400c472:	d012      	beq.n	3400c49a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c474:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c478:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c47c:	4b59      	ldr	r3, [pc, #356]	@ (3400c5e4 <HAL_RCCEx_PeriphCLKConfig+0x2bf0>)
3400c47e:	429a      	cmp	r2, r3
3400c480:	d00b      	beq.n	3400c49a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c482:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c486:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c48a:	4b57      	ldr	r3, [pc, #348]	@ (3400c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2bf4>)
3400c48c:	429a      	cmp	r2, r3
3400c48e:	d004      	beq.n	3400c49a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c490:	f240 3197 	movw	r1, #919	@ 0x397
3400c494:	484c      	ldr	r0, [pc, #304]	@ (3400c5c8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c496:	f7f5 fc05 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
3400c49a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c49e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c4a2:	4b4e      	ldr	r3, [pc, #312]	@ (3400c5dc <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
3400c4a4:	429a      	cmp	r2, r3
3400c4a6:	d142      	bne.n	3400c52e <HAL_RCCEx_PeriphCLKConfig+0x2b3a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c4a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c4ae:	2b00      	cmp	r3, #0
3400c4b0:	d016      	beq.n	3400c4e0 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c4b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c4b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c4bc:	d010      	beq.n	3400c4e0 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c4be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c4c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c4c8:	d00a      	beq.n	3400c4e0 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c4ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c4d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c4d4:	d004      	beq.n	3400c4e0 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c4d6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
3400c4da:	483b      	ldr	r0, [pc, #236]	@ (3400c5c8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c4dc:	f7f5 fbe2 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c4e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c4e6:	2b00      	cmp	r3, #0
3400c4e8:	d005      	beq.n	3400c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2b02>
3400c4ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c4f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c4f4:	d904      	bls.n	3400c500 <HAL_RCCEx_PeriphCLKConfig+0x2b0c>
3400c4f6:	f240 319d 	movw	r1, #925	@ 0x39d
3400c4fa:	4833      	ldr	r0, [pc, #204]	@ (3400c5c8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c4fc:	f7f5 fbd2 	bl	34001ca4 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c500:	4b32      	ldr	r3, [pc, #200]	@ (3400c5cc <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c506:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c50a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c50e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c512:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c514:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c51a:	3b01      	subs	r3, #1
3400c51c:	041b      	lsls	r3, r3, #16
3400c51e:	4313      	orrs	r3, r2
3400c520:	4a2a      	ldr	r2, [pc, #168]	@ (3400c5cc <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c522:	430b      	orrs	r3, r1
3400c524:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c528:	f7fc ffc2 	bl	340094b0 <LL_RCC_IC10_Enable>
3400c52c:	e067      	b.n	3400c5fe <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
3400c52e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c532:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c536:	4b2a      	ldr	r3, [pc, #168]	@ (3400c5e0 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
3400c538:	429a      	cmp	r2, r3
3400c53a:	d157      	bne.n	3400c5ec <HAL_RCCEx_PeriphCLKConfig+0x2bf8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c53c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c542:	2b00      	cmp	r3, #0
3400c544:	d016      	beq.n	3400c574 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c546:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c54a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c54c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c550:	d010      	beq.n	3400c574 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c552:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c556:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c55c:	d00a      	beq.n	3400c574 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c55e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c564:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c568:	d004      	beq.n	3400c574 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c56a:	f240 31a9 	movw	r1, #937	@ 0x3a9
3400c56e:	4816      	ldr	r0, [pc, #88]	@ (3400c5c8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c570:	f7f5 fb98 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c574:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c578:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c57a:	2b00      	cmp	r3, #0
3400c57c:	d005      	beq.n	3400c58a <HAL_RCCEx_PeriphCLKConfig+0x2b96>
3400c57e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c582:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c588:	d904      	bls.n	3400c594 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>
3400c58a:	f240 31aa 	movw	r1, #938	@ 0x3aa
3400c58e:	480e      	ldr	r0, [pc, #56]	@ (3400c5c8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c590:	f7f5 fb88 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c594:	4b0d      	ldr	r3, [pc, #52]	@ (3400c5cc <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c596:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c59a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c59e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c5a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5a6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c5a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c5ae:	3b01      	subs	r3, #1
3400c5b0:	041b      	lsls	r3, r3, #16
3400c5b2:	4313      	orrs	r3, r2
3400c5b4:	4a05      	ldr	r2, [pc, #20]	@ (3400c5cc <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c5b6:	430b      	orrs	r3, r1
3400c5b8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c5bc:	f7fd f878 	bl	340096b0 <LL_RCC_IC15_Enable>
3400c5c0:	e01d      	b.n	3400c5fe <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
3400c5c2:	bf00      	nop
3400c5c4:	0703040c 	.word	0x0703040c
3400c5c8:	3401e910 	.word	0x3401e910
3400c5cc:	56028000 	.word	0x56028000
3400c5d0:	0701040c 	.word	0x0701040c
3400c5d4:	0700080c 	.word	0x0700080c
3400c5d8:	0701080c 	.word	0x0701080c
3400c5dc:	0702080c 	.word	0x0702080c
3400c5e0:	0703080c 	.word	0x0703080c
3400c5e4:	0704080c 	.word	0x0704080c
3400c5e8:	0705080c 	.word	0x0705080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
3400c5ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5f0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c5f4:	4b70      	ldr	r3, [pc, #448]	@ (3400c7b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc4>)
3400c5f6:	429a      	cmp	r2, r3
3400c5f8:	d101      	bne.n	3400c5fe <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    {
      LL_RCC_CLKP_Enable();
3400c5fa:	f7fd f9d9 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
3400c5fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400c606:	4618      	mov	r0, r3
3400c608:	f7fc f8ae 	bl	34008768 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
3400c60c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c610:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c614:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
3400c618:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
3400c61c:	2300      	movs	r3, #0
3400c61e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
3400c622:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
3400c626:	4603      	mov	r3, r0
3400c628:	460a      	mov	r2, r1
3400c62a:	4313      	orrs	r3, r2
3400c62c:	f000 80e6 	beq.w	3400c7fc <HAL_RCCEx_PeriphCLKConfig+0x2e08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
3400c630:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c634:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c638:	4b60      	ldr	r3, [pc, #384]	@ (3400c7bc <HAL_RCCEx_PeriphCLKConfig+0x2dc8>)
3400c63a:	429a      	cmp	r2, r3
3400c63c:	d027      	beq.n	3400c68e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c63e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c642:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c646:	4b5e      	ldr	r3, [pc, #376]	@ (3400c7c0 <HAL_RCCEx_PeriphCLKConfig+0x2dcc>)
3400c648:	429a      	cmp	r2, r3
3400c64a:	d020      	beq.n	3400c68e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c64c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c650:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c654:	4b5b      	ldr	r3, [pc, #364]	@ (3400c7c4 <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
3400c656:	429a      	cmp	r2, r3
3400c658:	d019      	beq.n	3400c68e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c65a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c65e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c662:	4b59      	ldr	r3, [pc, #356]	@ (3400c7c8 <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
3400c664:	429a      	cmp	r2, r3
3400c666:	d012      	beq.n	3400c68e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c668:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c66c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c670:	4b56      	ldr	r3, [pc, #344]	@ (3400c7cc <HAL_RCCEx_PeriphCLKConfig+0x2dd8>)
3400c672:	429a      	cmp	r2, r3
3400c674:	d00b      	beq.n	3400c68e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c676:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c67a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c67e:	4b54      	ldr	r3, [pc, #336]	@ (3400c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2ddc>)
3400c680:	429a      	cmp	r2, r3
3400c682:	d004      	beq.n	3400c68e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c684:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
3400c688:	4852      	ldr	r0, [pc, #328]	@ (3400c7d4 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c68a:	f7f5 fb0b 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
3400c68e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c692:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c696:	4b4b      	ldr	r3, [pc, #300]	@ (3400c7c4 <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
3400c698:	429a      	cmp	r2, r3
3400c69a:	d142      	bne.n	3400c722 <HAL_RCCEx_PeriphCLKConfig+0x2d2e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c69c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c6a2:	2b00      	cmp	r3, #0
3400c6a4:	d016      	beq.n	3400c6d4 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c6a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c6ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c6b0:	d010      	beq.n	3400c6d4 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c6b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c6b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c6bc:	d00a      	beq.n	3400c6d4 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c6be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c6c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c6c8:	d004      	beq.n	3400c6d4 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c6ca:	f240 31c9 	movw	r1, #969	@ 0x3c9
3400c6ce:	4841      	ldr	r0, [pc, #260]	@ (3400c7d4 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c6d0:	f7f5 fae8 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c6d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c6da:	2b00      	cmp	r3, #0
3400c6dc:	d005      	beq.n	3400c6ea <HAL_RCCEx_PeriphCLKConfig+0x2cf6>
3400c6de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c6e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c6e8:	d904      	bls.n	3400c6f4 <HAL_RCCEx_PeriphCLKConfig+0x2d00>
3400c6ea:	f240 31ca 	movw	r1, #970	@ 0x3ca
3400c6ee:	4839      	ldr	r0, [pc, #228]	@ (3400c7d4 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c6f0:	f7f5 fad8 	bl	34001ca4 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c6f4:	4b38      	ldr	r3, [pc, #224]	@ (3400c7d8 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c6f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c6fa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c6fe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c702:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c706:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c708:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c70c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c70e:	3b01      	subs	r3, #1
3400c710:	041b      	lsls	r3, r3, #16
3400c712:	4313      	orrs	r3, r2
3400c714:	4a30      	ldr	r2, [pc, #192]	@ (3400c7d8 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c716:	430b      	orrs	r3, r1
3400c718:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c71c:	f7fc fec8 	bl	340094b0 <LL_RCC_IC10_Enable>
3400c720:	e065      	b.n	3400c7ee <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3400c722:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c726:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c72a:	4b27      	ldr	r3, [pc, #156]	@ (3400c7c8 <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
3400c72c:	429a      	cmp	r2, r3
3400c72e:	d155      	bne.n	3400c7dc <HAL_RCCEx_PeriphCLKConfig+0x2de8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c730:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c736:	2b00      	cmp	r3, #0
3400c738:	d016      	beq.n	3400c768 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c73a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c73e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c744:	d010      	beq.n	3400c768 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c746:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c74a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c74c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c750:	d00a      	beq.n	3400c768 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c752:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c758:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c75c:	d004      	beq.n	3400c768 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c75e:	f240 31d6 	movw	r1, #982	@ 0x3d6
3400c762:	481c      	ldr	r0, [pc, #112]	@ (3400c7d4 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c764:	f7f5 fa9e 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c768:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c76c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c76e:	2b00      	cmp	r3, #0
3400c770:	d005      	beq.n	3400c77e <HAL_RCCEx_PeriphCLKConfig+0x2d8a>
3400c772:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c77c:	d904      	bls.n	3400c788 <HAL_RCCEx_PeriphCLKConfig+0x2d94>
3400c77e:	f240 31d7 	movw	r1, #983	@ 0x3d7
3400c782:	4814      	ldr	r0, [pc, #80]	@ (3400c7d4 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c784:	f7f5 fa8e 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c788:	4b13      	ldr	r3, [pc, #76]	@ (3400c7d8 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c78a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c78e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c792:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c796:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c79a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c79c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c7a2:	3b01      	subs	r3, #1
3400c7a4:	041b      	lsls	r3, r3, #16
3400c7a6:	4313      	orrs	r3, r2
3400c7a8:	4a0b      	ldr	r2, [pc, #44]	@ (3400c7d8 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c7aa:	430b      	orrs	r3, r1
3400c7ac:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c7b0:	f7fc ff7e 	bl	340096b0 <LL_RCC_IC15_Enable>
3400c7b4:	e01b      	b.n	3400c7ee <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
3400c7b6:	bf00      	nop
3400c7b8:	0701080c 	.word	0x0701080c
3400c7bc:	07000c0c 	.word	0x07000c0c
3400c7c0:	07010c0c 	.word	0x07010c0c
3400c7c4:	07020c0c 	.word	0x07020c0c
3400c7c8:	07030c0c 	.word	0x07030c0c
3400c7cc:	07040c0c 	.word	0x07040c0c
3400c7d0:	07050c0c 	.word	0x07050c0c
3400c7d4:	3401e910 	.word	0x3401e910
3400c7d8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3400c7dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7e0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c7e4:	4b70      	ldr	r3, [pc, #448]	@ (3400c9a8 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
3400c7e6:	429a      	cmp	r2, r3
3400c7e8:	d101      	bne.n	3400c7ee <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    {
      LL_RCC_CLKP_Enable();
3400c7ea:	f7fd f8e1 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
3400c7ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400c7f6:	4618      	mov	r0, r3
3400c7f8:	f7fb ffb6 	bl	34008768 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
3400c7fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c800:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c804:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
3400c808:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
3400c80c:	2300      	movs	r3, #0
3400c80e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
3400c812:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
3400c816:	4603      	mov	r3, r0
3400c818:	460a      	mov	r2, r1
3400c81a:	4313      	orrs	r3, r2
3400c81c:	f000 80e6 	beq.w	3400c9ec <HAL_RCCEx_PeriphCLKConfig+0x2ff8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
3400c820:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c824:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c828:	4b60      	ldr	r3, [pc, #384]	@ (3400c9ac <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
3400c82a:	429a      	cmp	r2, r3
3400c82c:	d027      	beq.n	3400c87e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c82e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c832:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c836:	4b5e      	ldr	r3, [pc, #376]	@ (3400c9b0 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
3400c838:	429a      	cmp	r2, r3
3400c83a:	d020      	beq.n	3400c87e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c83c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c840:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c844:	4b5b      	ldr	r3, [pc, #364]	@ (3400c9b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400c846:	429a      	cmp	r2, r3
3400c848:	d019      	beq.n	3400c87e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c84a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c84e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c852:	4b59      	ldr	r3, [pc, #356]	@ (3400c9b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400c854:	429a      	cmp	r2, r3
3400c856:	d012      	beq.n	3400c87e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c858:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c85c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c860:	4b56      	ldr	r3, [pc, #344]	@ (3400c9bc <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
3400c862:	429a      	cmp	r2, r3
3400c864:	d00b      	beq.n	3400c87e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c866:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c86a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c86e:	4b54      	ldr	r3, [pc, #336]	@ (3400c9c0 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
3400c870:	429a      	cmp	r2, r3
3400c872:	d004      	beq.n	3400c87e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c874:	f240 31f1 	movw	r1, #1009	@ 0x3f1
3400c878:	4852      	ldr	r0, [pc, #328]	@ (3400c9c4 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c87a:	f7f5 fa13 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
3400c87e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c882:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c886:	4b4b      	ldr	r3, [pc, #300]	@ (3400c9b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400c888:	429a      	cmp	r2, r3
3400c88a:	d142      	bne.n	3400c912 <HAL_RCCEx_PeriphCLKConfig+0x2f1e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c88c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c892:	2b00      	cmp	r3, #0
3400c894:	d016      	beq.n	3400c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c896:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c89a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c89c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c8a0:	d010      	beq.n	3400c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c8a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c8a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c8ac:	d00a      	beq.n	3400c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c8ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c8b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c8b8:	d004      	beq.n	3400c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c8ba:	f240 31f6 	movw	r1, #1014	@ 0x3f6
3400c8be:	4841      	ldr	r0, [pc, #260]	@ (3400c9c4 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c8c0:	f7f5 f9f0 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c8c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c8ca:	2b00      	cmp	r3, #0
3400c8cc:	d005      	beq.n	3400c8da <HAL_RCCEx_PeriphCLKConfig+0x2ee6>
3400c8ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c8d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c8d8:	d904      	bls.n	3400c8e4 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
3400c8da:	f240 31f7 	movw	r1, #1015	@ 0x3f7
3400c8de:	4839      	ldr	r0, [pc, #228]	@ (3400c9c4 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c8e0:	f7f5 f9e0 	bl	34001ca4 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c8e4:	4b38      	ldr	r3, [pc, #224]	@ (3400c9c8 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c8e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c8ea:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c8ee:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c8f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c8f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c8fe:	3b01      	subs	r3, #1
3400c900:	041b      	lsls	r3, r3, #16
3400c902:	4313      	orrs	r3, r2
3400c904:	4a30      	ldr	r2, [pc, #192]	@ (3400c9c8 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c906:	430b      	orrs	r3, r1
3400c908:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c90c:	f7fc fdd0 	bl	340094b0 <LL_RCC_IC10_Enable>
3400c910:	e065      	b.n	3400c9de <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3400c912:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c916:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c91a:	4b27      	ldr	r3, [pc, #156]	@ (3400c9b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400c91c:	429a      	cmp	r2, r3
3400c91e:	d155      	bne.n	3400c9cc <HAL_RCCEx_PeriphCLKConfig+0x2fd8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c920:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c926:	2b00      	cmp	r3, #0
3400c928:	d016      	beq.n	3400c958 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c92a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c92e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c934:	d010      	beq.n	3400c958 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c936:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c93a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c93c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c940:	d00a      	beq.n	3400c958 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c942:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c946:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c948:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c94c:	d004      	beq.n	3400c958 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c94e:	f240 4103 	movw	r1, #1027	@ 0x403
3400c952:	481c      	ldr	r0, [pc, #112]	@ (3400c9c4 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c954:	f7f5 f9a6 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c958:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c95c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c95e:	2b00      	cmp	r3, #0
3400c960:	d005      	beq.n	3400c96e <HAL_RCCEx_PeriphCLKConfig+0x2f7a>
3400c962:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c96c:	d904      	bls.n	3400c978 <HAL_RCCEx_PeriphCLKConfig+0x2f84>
3400c96e:	f240 4104 	movw	r1, #1028	@ 0x404
3400c972:	4814      	ldr	r0, [pc, #80]	@ (3400c9c4 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c974:	f7f5 f996 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c978:	4b13      	ldr	r3, [pc, #76]	@ (3400c9c8 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c97a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c97e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c982:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c986:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c98a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c98c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c992:	3b01      	subs	r3, #1
3400c994:	041b      	lsls	r3, r3, #16
3400c996:	4313      	orrs	r3, r2
3400c998:	4a0b      	ldr	r2, [pc, #44]	@ (3400c9c8 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c99a:	430b      	orrs	r3, r1
3400c99c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c9a0:	f7fc fe86 	bl	340096b0 <LL_RCC_IC15_Enable>
3400c9a4:	e01b      	b.n	3400c9de <HAL_RCCEx_PeriphCLKConfig+0x2fea>
3400c9a6:	bf00      	nop
3400c9a8:	07010c0c 	.word	0x07010c0c
3400c9ac:	0700100c 	.word	0x0700100c
3400c9b0:	0701100c 	.word	0x0701100c
3400c9b4:	0702100c 	.word	0x0702100c
3400c9b8:	0703100c 	.word	0x0703100c
3400c9bc:	0704100c 	.word	0x0704100c
3400c9c0:	0705100c 	.word	0x0705100c
3400c9c4:	3401e910 	.word	0x3401e910
3400c9c8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
3400c9cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9d0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c9d4:	4b70      	ldr	r3, [pc, #448]	@ (3400cb98 <HAL_RCCEx_PeriphCLKConfig+0x31a4>)
3400c9d6:	429a      	cmp	r2, r3
3400c9d8:	d101      	bne.n	3400c9de <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    {
      LL_RCC_CLKP_Enable();
3400c9da:	f7fc ffe9 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
3400c9de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9e2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400c9e6:	4618      	mov	r0, r3
3400c9e8:	f7fb fec9 	bl	3400877e <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
3400c9ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c9f4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
3400c9f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
3400c9fc:	2300      	movs	r3, #0
3400c9fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
3400ca02:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
3400ca06:	4603      	mov	r3, r0
3400ca08:	460a      	mov	r2, r1
3400ca0a:	4313      	orrs	r3, r2
3400ca0c:	f000 80e6 	beq.w	3400cbdc <HAL_RCCEx_PeriphCLKConfig+0x31e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
3400ca10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca14:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca18:	4b60      	ldr	r3, [pc, #384]	@ (3400cb9c <HAL_RCCEx_PeriphCLKConfig+0x31a8>)
3400ca1a:	429a      	cmp	r2, r3
3400ca1c:	d027      	beq.n	3400ca6e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca22:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca26:	4b5e      	ldr	r3, [pc, #376]	@ (3400cba0 <HAL_RCCEx_PeriphCLKConfig+0x31ac>)
3400ca28:	429a      	cmp	r2, r3
3400ca2a:	d020      	beq.n	3400ca6e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca30:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca34:	4b5b      	ldr	r3, [pc, #364]	@ (3400cba4 <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3400ca36:	429a      	cmp	r2, r3
3400ca38:	d019      	beq.n	3400ca6e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca3e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca42:	4b59      	ldr	r3, [pc, #356]	@ (3400cba8 <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3400ca44:	429a      	cmp	r2, r3
3400ca46:	d012      	beq.n	3400ca6e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca4c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca50:	4b56      	ldr	r3, [pc, #344]	@ (3400cbac <HAL_RCCEx_PeriphCLKConfig+0x31b8>)
3400ca52:	429a      	cmp	r2, r3
3400ca54:	d00b      	beq.n	3400ca6e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca5a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca5e:	4b54      	ldr	r3, [pc, #336]	@ (3400cbb0 <HAL_RCCEx_PeriphCLKConfig+0x31bc>)
3400ca60:	429a      	cmp	r2, r3
3400ca62:	d004      	beq.n	3400ca6e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca64:	f240 411e 	movw	r1, #1054	@ 0x41e
3400ca68:	4852      	ldr	r0, [pc, #328]	@ (3400cbb4 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400ca6a:	f7f5 f91b 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
3400ca6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca72:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca76:	4b4b      	ldr	r3, [pc, #300]	@ (3400cba4 <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3400ca78:	429a      	cmp	r2, r3
3400ca7a:	d142      	bne.n	3400cb02 <HAL_RCCEx_PeriphCLKConfig+0x310e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400ca7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ca82:	2b00      	cmp	r3, #0
3400ca84:	d016      	beq.n	3400cab4 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400ca86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ca8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ca90:	d010      	beq.n	3400cab4 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400ca92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ca98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ca9c:	d00a      	beq.n	3400cab4 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400ca9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400caa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400caa4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400caa8:	d004      	beq.n	3400cab4 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400caaa:	f240 4123 	movw	r1, #1059	@ 0x423
3400caae:	4841      	ldr	r0, [pc, #260]	@ (3400cbb4 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400cab0:	f7f5 f8f8 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400cab4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400caba:	2b00      	cmp	r3, #0
3400cabc:	d005      	beq.n	3400caca <HAL_RCCEx_PeriphCLKConfig+0x30d6>
3400cabe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400cac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cac8:	d904      	bls.n	3400cad4 <HAL_RCCEx_PeriphCLKConfig+0x30e0>
3400caca:	f240 4124 	movw	r1, #1060	@ 0x424
3400cace:	4839      	ldr	r0, [pc, #228]	@ (3400cbb4 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400cad0:	f7f5 f8e8 	bl	34001ca4 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400cad4:	4b38      	ldr	r3, [pc, #224]	@ (3400cbb8 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400cad6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400cada:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cade:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cae2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400cae8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400caec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400caee:	3b01      	subs	r3, #1
3400caf0:	041b      	lsls	r3, r3, #16
3400caf2:	4313      	orrs	r3, r2
3400caf4:	4a30      	ldr	r2, [pc, #192]	@ (3400cbb8 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400caf6:	430b      	orrs	r3, r1
3400caf8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400cafc:	f7fc fcd8 	bl	340094b0 <LL_RCC_IC10_Enable>
3400cb00:	e065      	b.n	3400cbce <HAL_RCCEx_PeriphCLKConfig+0x31da>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
3400cb02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb06:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400cb0a:	4b27      	ldr	r3, [pc, #156]	@ (3400cba8 <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3400cb0c:	429a      	cmp	r2, r3
3400cb0e:	d155      	bne.n	3400cbbc <HAL_RCCEx_PeriphCLKConfig+0x31c8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cb10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb16:	2b00      	cmp	r3, #0
3400cb18:	d016      	beq.n	3400cb48 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400cb1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cb24:	d010      	beq.n	3400cb48 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400cb26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cb30:	d00a      	beq.n	3400cb48 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400cb32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cb3c:	d004      	beq.n	3400cb48 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400cb3e:	f44f 6186 	mov.w	r1, #1072	@ 0x430
3400cb42:	481c      	ldr	r0, [pc, #112]	@ (3400cbb4 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400cb44:	f7f5 f8ae 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cb48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cb4e:	2b00      	cmp	r3, #0
3400cb50:	d005      	beq.n	3400cb5e <HAL_RCCEx_PeriphCLKConfig+0x316a>
3400cb52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cb58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cb5c:	d904      	bls.n	3400cb68 <HAL_RCCEx_PeriphCLKConfig+0x3174>
3400cb5e:	f240 4131 	movw	r1, #1073	@ 0x431
3400cb62:	4814      	ldr	r0, [pc, #80]	@ (3400cbb4 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400cb64:	f7f5 f89e 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cb68:	4b13      	ldr	r3, [pc, #76]	@ (3400cbb8 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400cb6a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cb6e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cb72:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cb76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb7a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400cb7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cb82:	3b01      	subs	r3, #1
3400cb84:	041b      	lsls	r3, r3, #16
3400cb86:	4313      	orrs	r3, r2
3400cb88:	4a0b      	ldr	r2, [pc, #44]	@ (3400cbb8 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400cb8a:	430b      	orrs	r3, r1
3400cb8c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400cb90:	f7fc fd8e 	bl	340096b0 <LL_RCC_IC15_Enable>
3400cb94:	e01b      	b.n	3400cbce <HAL_RCCEx_PeriphCLKConfig+0x31da>
3400cb96:	bf00      	nop
3400cb98:	0701100c 	.word	0x0701100c
3400cb9c:	0700140c 	.word	0x0700140c
3400cba0:	0701140c 	.word	0x0701140c
3400cba4:	0702140c 	.word	0x0702140c
3400cba8:	0703140c 	.word	0x0703140c
3400cbac:	0704140c 	.word	0x0704140c
3400cbb0:	0705140c 	.word	0x0705140c
3400cbb4:	3401e910 	.word	0x3401e910
3400cbb8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
3400cbbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbc0:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400cbc4:	4b98      	ldr	r3, [pc, #608]	@ (3400ce28 <HAL_RCCEx_PeriphCLKConfig+0x3434>)
3400cbc6:	429a      	cmp	r2, r3
3400cbc8:	d101      	bne.n	3400cbce <HAL_RCCEx_PeriphCLKConfig+0x31da>
    {
      LL_RCC_CLKP_Enable();
3400cbca:	f7fc fef1 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
3400cbce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbd2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cbd6:	4618      	mov	r0, r3
3400cbd8:	f7fb fdd1 	bl	3400877e <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
3400cbdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cbe4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3400cbe8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
3400cbec:	2300      	movs	r3, #0
3400cbee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
3400cbf2:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
3400cbf6:	4603      	mov	r3, r0
3400cbf8:	460a      	mov	r2, r1
3400cbfa:	4313      	orrs	r3, r2
3400cbfc:	f000 8089 	beq.w	3400cd12 <HAL_RCCEx_PeriphCLKConfig+0x331e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
3400cc00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc04:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc08:	4b88      	ldr	r3, [pc, #544]	@ (3400ce2c <HAL_RCCEx_PeriphCLKConfig+0x3438>)
3400cc0a:	429a      	cmp	r2, r3
3400cc0c:	d027      	beq.n	3400cc5e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc12:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc16:	4b86      	ldr	r3, [pc, #536]	@ (3400ce30 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
3400cc18:	429a      	cmp	r2, r3
3400cc1a:	d020      	beq.n	3400cc5e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc20:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc24:	4b83      	ldr	r3, [pc, #524]	@ (3400ce34 <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3400cc26:	429a      	cmp	r2, r3
3400cc28:	d019      	beq.n	3400cc5e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc2e:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc32:	4b81      	ldr	r3, [pc, #516]	@ (3400ce38 <HAL_RCCEx_PeriphCLKConfig+0x3444>)
3400cc34:	429a      	cmp	r2, r3
3400cc36:	d012      	beq.n	3400cc5e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc3c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc40:	4b7e      	ldr	r3, [pc, #504]	@ (3400ce3c <HAL_RCCEx_PeriphCLKConfig+0x3448>)
3400cc42:	429a      	cmp	r2, r3
3400cc44:	d00b      	beq.n	3400cc5e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc4a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc4e:	4b7c      	ldr	r3, [pc, #496]	@ (3400ce40 <HAL_RCCEx_PeriphCLKConfig+0x344c>)
3400cc50:	429a      	cmp	r2, r3
3400cc52:	d004      	beq.n	3400cc5e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc54:	f240 414b 	movw	r1, #1099	@ 0x44b
3400cc58:	487a      	ldr	r0, [pc, #488]	@ (3400ce44 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cc5a:	f7f5 f823 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
3400cc5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc62:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc66:	4b73      	ldr	r3, [pc, #460]	@ (3400ce34 <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3400cc68:	429a      	cmp	r2, r3
3400cc6a:	d142      	bne.n	3400ccf2 <HAL_RCCEx_PeriphCLKConfig+0x32fe>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cc6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cc72:	2b00      	cmp	r3, #0
3400cc74:	d016      	beq.n	3400cca4 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400cc76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cc7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cc80:	d010      	beq.n	3400cca4 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400cc82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cc88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cc8c:	d00a      	beq.n	3400cca4 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400cc8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cc94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cc98:	d004      	beq.n	3400cca4 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400cc9a:	f44f 618a 	mov.w	r1, #1104	@ 0x450
3400cc9e:	4869      	ldr	r0, [pc, #420]	@ (3400ce44 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cca0:	f7f5 f800 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cca4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ccaa:	2b00      	cmp	r3, #0
3400ccac:	d005      	beq.n	3400ccba <HAL_RCCEx_PeriphCLKConfig+0x32c6>
3400ccae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ccb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ccb8:	d904      	bls.n	3400ccc4 <HAL_RCCEx_PeriphCLKConfig+0x32d0>
3400ccba:	f240 4151 	movw	r1, #1105	@ 0x451
3400ccbe:	4861      	ldr	r0, [pc, #388]	@ (3400ce44 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400ccc0:	f7f4 fff0 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400ccc4:	4b60      	ldr	r3, [pc, #384]	@ (3400ce48 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400ccc6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400ccca:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ccce:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ccd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccd6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400ccd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ccde:	3b01      	subs	r3, #1
3400cce0:	041b      	lsls	r3, r3, #16
3400cce2:	4313      	orrs	r3, r2
3400cce4:	4a58      	ldr	r2, [pc, #352]	@ (3400ce48 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400cce6:	430b      	orrs	r3, r1
3400cce8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400ccec:	f7fc fce0 	bl	340096b0 <LL_RCC_IC15_Enable>
3400ccf0:	e008      	b.n	3400cd04 <HAL_RCCEx_PeriphCLKConfig+0x3310>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
3400ccf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccf6:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ccfa:	4b4d      	ldr	r3, [pc, #308]	@ (3400ce30 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
3400ccfc:	429a      	cmp	r2, r3
3400ccfe:	d101      	bne.n	3400cd04 <HAL_RCCEx_PeriphCLKConfig+0x3310>
    {
      LL_RCC_CLKP_Enable();
3400cd00:	f7fc fe56 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
3400cd04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd08:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400cd0c:	4618      	mov	r0, r3
3400cd0e:	f7fb fd41 	bl	34008794 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3400cd12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cd1a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
3400cd1e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
3400cd22:	2300      	movs	r3, #0
3400cd24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
3400cd28:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
3400cd2c:	4603      	mov	r3, r0
3400cd2e:	460a      	mov	r2, r1
3400cd30:	4313      	orrs	r3, r2
3400cd32:	f000 80a7 	beq.w	3400ce84 <HAL_RCCEx_PeriphCLKConfig+0x3490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
3400cd36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd3a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd3e:	4b43      	ldr	r3, [pc, #268]	@ (3400ce4c <HAL_RCCEx_PeriphCLKConfig+0x3458>)
3400cd40:	429a      	cmp	r2, r3
3400cd42:	d027      	beq.n	3400cd94 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd48:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd4c:	4b40      	ldr	r3, [pc, #256]	@ (3400ce50 <HAL_RCCEx_PeriphCLKConfig+0x345c>)
3400cd4e:	429a      	cmp	r2, r3
3400cd50:	d020      	beq.n	3400cd94 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd56:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd5a:	4b3e      	ldr	r3, [pc, #248]	@ (3400ce54 <HAL_RCCEx_PeriphCLKConfig+0x3460>)
3400cd5c:	429a      	cmp	r2, r3
3400cd5e:	d019      	beq.n	3400cd94 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd64:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd68:	4b3b      	ldr	r3, [pc, #236]	@ (3400ce58 <HAL_RCCEx_PeriphCLKConfig+0x3464>)
3400cd6a:	429a      	cmp	r2, r3
3400cd6c:	d012      	beq.n	3400cd94 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd72:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd76:	4b39      	ldr	r3, [pc, #228]	@ (3400ce5c <HAL_RCCEx_PeriphCLKConfig+0x3468>)
3400cd78:	429a      	cmp	r2, r3
3400cd7a:	d00b      	beq.n	3400cd94 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd80:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd84:	4b36      	ldr	r3, [pc, #216]	@ (3400ce60 <HAL_RCCEx_PeriphCLKConfig+0x346c>)
3400cd86:	429a      	cmp	r2, r3
3400cd88:	d004      	beq.n	3400cd94 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd8a:	f240 416b 	movw	r1, #1131	@ 0x46b
3400cd8e:	482d      	ldr	r0, [pc, #180]	@ (3400ce44 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cd90:	f7f4 ff88 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
3400cd94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd98:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd9c:	4b2d      	ldr	r3, [pc, #180]	@ (3400ce54 <HAL_RCCEx_PeriphCLKConfig+0x3460>)
3400cd9e:	429a      	cmp	r2, r3
3400cda0:	d160      	bne.n	3400ce64 <HAL_RCCEx_PeriphCLKConfig+0x3470>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cda2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cda6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cda8:	2b00      	cmp	r3, #0
3400cdaa:	d016      	beq.n	3400cdda <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cdac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cdb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cdb6:	d010      	beq.n	3400cdda <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cdb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cdbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cdc2:	d00a      	beq.n	3400cdda <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cdc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cdca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cdce:	d004      	beq.n	3400cdda <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cdd0:	f44f 618e 	mov.w	r1, #1136	@ 0x470
3400cdd4:	481b      	ldr	r0, [pc, #108]	@ (3400ce44 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cdd6:	f7f4 ff65 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cdda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cde0:	2b00      	cmp	r3, #0
3400cde2:	d005      	beq.n	3400cdf0 <HAL_RCCEx_PeriphCLKConfig+0x33fc>
3400cde4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cde8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cdea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cdee:	d904      	bls.n	3400cdfa <HAL_RCCEx_PeriphCLKConfig+0x3406>
3400cdf0:	f240 4171 	movw	r1, #1137	@ 0x471
3400cdf4:	4813      	ldr	r0, [pc, #76]	@ (3400ce44 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cdf6:	f7f4 ff55 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cdfa:	4b13      	ldr	r3, [pc, #76]	@ (3400ce48 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400cdfc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400ce00:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ce04:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ce08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce0c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400ce0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ce14:	3b01      	subs	r3, #1
3400ce16:	041b      	lsls	r3, r3, #16
3400ce18:	4313      	orrs	r3, r2
3400ce1a:	4a0b      	ldr	r2, [pc, #44]	@ (3400ce48 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400ce1c:	430b      	orrs	r3, r1
3400ce1e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400ce22:	f7fc fc45 	bl	340096b0 <LL_RCC_IC15_Enable>
3400ce26:	e026      	b.n	3400ce76 <HAL_RCCEx_PeriphCLKConfig+0x3482>
3400ce28:	0701140c 	.word	0x0701140c
3400ce2c:	0700082c 	.word	0x0700082c
3400ce30:	0701082c 	.word	0x0701082c
3400ce34:	0702082c 	.word	0x0702082c
3400ce38:	0703082c 	.word	0x0703082c
3400ce3c:	0704082c 	.word	0x0704082c
3400ce40:	0705082c 	.word	0x0705082c
3400ce44:	3401e910 	.word	0x3401e910
3400ce48:	56028000 	.word	0x56028000
3400ce4c:	07000c2c 	.word	0x07000c2c
3400ce50:	07010c2c 	.word	0x07010c2c
3400ce54:	07020c2c 	.word	0x07020c2c
3400ce58:	07030c2c 	.word	0x07030c2c
3400ce5c:	07040c2c 	.word	0x07040c2c
3400ce60:	07050c2c 	.word	0x07050c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3400ce64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce68:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400ce6c:	4b98      	ldr	r3, [pc, #608]	@ (3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x36dc>)
3400ce6e:	429a      	cmp	r2, r3
3400ce70:	d101      	bne.n	3400ce76 <HAL_RCCEx_PeriphCLKConfig+0x3482>
    {
      LL_RCC_CLKP_Enable();
3400ce72:	f7fc fd9d 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
3400ce76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce7a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400ce7e:	4618      	mov	r0, r3
3400ce80:	f7fb fc88 	bl	34008794 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
3400ce84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ce8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
3400ce90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
3400ce94:	2300      	movs	r3, #0
3400ce96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
3400ce9a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
3400ce9e:	4603      	mov	r3, r0
3400cea0:	460a      	mov	r2, r1
3400cea2:	4313      	orrs	r3, r2
3400cea4:	f000 8089 	beq.w	3400cfba <HAL_RCCEx_PeriphCLKConfig+0x35c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
3400cea8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ceac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400ceb0:	4b88      	ldr	r3, [pc, #544]	@ (3400d0d4 <HAL_RCCEx_PeriphCLKConfig+0x36e0>)
3400ceb2:	429a      	cmp	r2, r3
3400ceb4:	d027      	beq.n	3400cf06 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400ceb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ceba:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cebe:	4b86      	ldr	r3, [pc, #536]	@ (3400d0d8 <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
3400cec0:	429a      	cmp	r2, r3
3400cec2:	d020      	beq.n	3400cf06 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400cec4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cec8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cecc:	4b83      	ldr	r3, [pc, #524]	@ (3400d0dc <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
3400cece:	429a      	cmp	r2, r3
3400ced0:	d019      	beq.n	3400cf06 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400ced2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ced6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400ceda:	4b81      	ldr	r3, [pc, #516]	@ (3400d0e0 <HAL_RCCEx_PeriphCLKConfig+0x36ec>)
3400cedc:	429a      	cmp	r2, r3
3400cede:	d012      	beq.n	3400cf06 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400cee0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cee4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cee8:	4b7e      	ldr	r3, [pc, #504]	@ (3400d0e4 <HAL_RCCEx_PeriphCLKConfig+0x36f0>)
3400ceea:	429a      	cmp	r2, r3
3400ceec:	d00b      	beq.n	3400cf06 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400ceee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cef2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cef6:	4b7c      	ldr	r3, [pc, #496]	@ (3400d0e8 <HAL_RCCEx_PeriphCLKConfig+0x36f4>)
3400cef8:	429a      	cmp	r2, r3
3400cefa:	d004      	beq.n	3400cf06 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400cefc:	f240 418b 	movw	r1, #1163	@ 0x48b
3400cf00:	487a      	ldr	r0, [pc, #488]	@ (3400d0ec <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400cf02:	f7f4 fecf 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3400cf06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cf0e:	4b73      	ldr	r3, [pc, #460]	@ (3400d0dc <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
3400cf10:	429a      	cmp	r2, r3
3400cf12:	d142      	bne.n	3400cf9a <HAL_RCCEx_PeriphCLKConfig+0x35a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cf14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cf1a:	2b00      	cmp	r3, #0
3400cf1c:	d016      	beq.n	3400cf4c <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cf1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cf24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cf28:	d010      	beq.n	3400cf4c <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cf2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cf30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cf34:	d00a      	beq.n	3400cf4c <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cf36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cf3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cf40:	d004      	beq.n	3400cf4c <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cf42:	f44f 6192 	mov.w	r1, #1168	@ 0x490
3400cf46:	4869      	ldr	r0, [pc, #420]	@ (3400d0ec <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400cf48:	f7f4 feac 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cf4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cf52:	2b00      	cmp	r3, #0
3400cf54:	d005      	beq.n	3400cf62 <HAL_RCCEx_PeriphCLKConfig+0x356e>
3400cf56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cf5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cf60:	d904      	bls.n	3400cf6c <HAL_RCCEx_PeriphCLKConfig+0x3578>
3400cf62:	f240 4191 	movw	r1, #1169	@ 0x491
3400cf66:	4861      	ldr	r0, [pc, #388]	@ (3400d0ec <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400cf68:	f7f4 fe9c 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cf6c:	4b60      	ldr	r3, [pc, #384]	@ (3400d0f0 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400cf6e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cf72:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cf76:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cf7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf7e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400cf80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cf86:	3b01      	subs	r3, #1
3400cf88:	041b      	lsls	r3, r3, #16
3400cf8a:	4313      	orrs	r3, r2
3400cf8c:	4a58      	ldr	r2, [pc, #352]	@ (3400d0f0 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400cf8e:	430b      	orrs	r3, r1
3400cf90:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400cf94:	f7fc fb8c 	bl	340096b0 <LL_RCC_IC15_Enable>
3400cf98:	e008      	b.n	3400cfac <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
3400cf9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf9e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cfa2:	4b4d      	ldr	r3, [pc, #308]	@ (3400d0d8 <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
3400cfa4:	429a      	cmp	r2, r3
3400cfa6:	d101      	bne.n	3400cfac <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    {
      LL_RCC_CLKP_Enable();
3400cfa8:	f7fc fd02 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
3400cfac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400cfb4:	4618      	mov	r0, r3
3400cfb6:	f7fb fbed 	bl	34008794 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3400cfba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cfc2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
3400cfc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3400cfca:	2300      	movs	r3, #0
3400cfcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
3400cfd0:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
3400cfd4:	4603      	mov	r3, r0
3400cfd6:	460a      	mov	r2, r1
3400cfd8:	4313      	orrs	r3, r2
3400cfda:	f000 80a7 	beq.w	3400d12c <HAL_RCCEx_PeriphCLKConfig+0x3738>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
3400cfde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfe2:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cfe6:	4b43      	ldr	r3, [pc, #268]	@ (3400d0f4 <HAL_RCCEx_PeriphCLKConfig+0x3700>)
3400cfe8:	429a      	cmp	r2, r3
3400cfea:	d027      	beq.n	3400d03c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400cfec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cff0:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cff4:	4b40      	ldr	r3, [pc, #256]	@ (3400d0f8 <HAL_RCCEx_PeriphCLKConfig+0x3704>)
3400cff6:	429a      	cmp	r2, r3
3400cff8:	d020      	beq.n	3400d03c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400cffa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cffe:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d002:	4b3e      	ldr	r3, [pc, #248]	@ (3400d0fc <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3400d004:	429a      	cmp	r2, r3
3400d006:	d019      	beq.n	3400d03c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400d008:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d00c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d010:	4b3b      	ldr	r3, [pc, #236]	@ (3400d100 <HAL_RCCEx_PeriphCLKConfig+0x370c>)
3400d012:	429a      	cmp	r2, r3
3400d014:	d012      	beq.n	3400d03c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400d016:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d01a:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d01e:	4b39      	ldr	r3, [pc, #228]	@ (3400d104 <HAL_RCCEx_PeriphCLKConfig+0x3710>)
3400d020:	429a      	cmp	r2, r3
3400d022:	d00b      	beq.n	3400d03c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400d024:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d028:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d02c:	4b36      	ldr	r3, [pc, #216]	@ (3400d108 <HAL_RCCEx_PeriphCLKConfig+0x3714>)
3400d02e:	429a      	cmp	r2, r3
3400d030:	d004      	beq.n	3400d03c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400d032:	f240 41ab 	movw	r1, #1195	@ 0x4ab
3400d036:	482d      	ldr	r0, [pc, #180]	@ (3400d0ec <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400d038:	f7f4 fe34 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3400d03c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d040:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d044:	4b2d      	ldr	r3, [pc, #180]	@ (3400d0fc <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3400d046:	429a      	cmp	r2, r3
3400d048:	d160      	bne.n	3400d10c <HAL_RCCEx_PeriphCLKConfig+0x3718>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400d04a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d04e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d050:	2b00      	cmp	r3, #0
3400d052:	d016      	beq.n	3400d082 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400d054:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d058:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d05a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d05e:	d010      	beq.n	3400d082 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400d060:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d064:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d06a:	d00a      	beq.n	3400d082 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400d06c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d072:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d076:	d004      	beq.n	3400d082 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400d078:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
3400d07c:	481b      	ldr	r0, [pc, #108]	@ (3400d0ec <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400d07e:	f7f4 fe11 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400d082:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d088:	2b00      	cmp	r3, #0
3400d08a:	d005      	beq.n	3400d098 <HAL_RCCEx_PeriphCLKConfig+0x36a4>
3400d08c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d096:	d904      	bls.n	3400d0a2 <HAL_RCCEx_PeriphCLKConfig+0x36ae>
3400d098:	f240 41b1 	movw	r1, #1201	@ 0x4b1
3400d09c:	4813      	ldr	r0, [pc, #76]	@ (3400d0ec <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400d09e:	f7f4 fe01 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400d0a2:	4b13      	ldr	r3, [pc, #76]	@ (3400d0f0 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400d0a4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400d0a8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d0ac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d0b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0b4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400d0b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d0bc:	3b01      	subs	r3, #1
3400d0be:	041b      	lsls	r3, r3, #16
3400d0c0:	4313      	orrs	r3, r2
3400d0c2:	4a0b      	ldr	r2, [pc, #44]	@ (3400d0f0 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400d0c4:	430b      	orrs	r3, r1
3400d0c6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400d0ca:	f7fc faf1 	bl	340096b0 <LL_RCC_IC15_Enable>
3400d0ce:	e026      	b.n	3400d11e <HAL_RCCEx_PeriphCLKConfig+0x372a>
3400d0d0:	07010c2c 	.word	0x07010c2c
3400d0d4:	0700102c 	.word	0x0700102c
3400d0d8:	0701102c 	.word	0x0701102c
3400d0dc:	0702102c 	.word	0x0702102c
3400d0e0:	0703102c 	.word	0x0703102c
3400d0e4:	0704102c 	.word	0x0704102c
3400d0e8:	0705102c 	.word	0x0705102c
3400d0ec:	3401e910 	.word	0x3401e910
3400d0f0:	56028000 	.word	0x56028000
3400d0f4:	0700142c 	.word	0x0700142c
3400d0f8:	0701142c 	.word	0x0701142c
3400d0fc:	0702142c 	.word	0x0702142c
3400d100:	0703142c 	.word	0x0703142c
3400d104:	0704142c 	.word	0x0704142c
3400d108:	0705142c 	.word	0x0705142c
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
3400d10c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d110:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d114:	4b9b      	ldr	r3, [pc, #620]	@ (3400d384 <HAL_RCCEx_PeriphCLKConfig+0x3990>)
3400d116:	429a      	cmp	r2, r3
3400d118:	d101      	bne.n	3400d11e <HAL_RCCEx_PeriphCLKConfig+0x372a>
    {
      LL_RCC_CLKP_Enable();
3400d11a:	f7fc fc49 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
3400d11e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d122:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400d126:	4618      	mov	r0, r3
3400d128:	f7fb fb34 	bl	34008794 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
3400d12c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d130:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d134:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
3400d138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
3400d13c:	2300      	movs	r3, #0
3400d13e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3400d142:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
3400d146:	4603      	mov	r3, r0
3400d148:	460a      	mov	r2, r1
3400d14a:	4313      	orrs	r3, r2
3400d14c:	f000 8089 	beq.w	3400d262 <HAL_RCCEx_PeriphCLKConfig+0x386e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
3400d150:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d154:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d158:	4b8b      	ldr	r3, [pc, #556]	@ (3400d388 <HAL_RCCEx_PeriphCLKConfig+0x3994>)
3400d15a:	429a      	cmp	r2, r3
3400d15c:	d027      	beq.n	3400d1ae <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d15e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d162:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d166:	4b89      	ldr	r3, [pc, #548]	@ (3400d38c <HAL_RCCEx_PeriphCLKConfig+0x3998>)
3400d168:	429a      	cmp	r2, r3
3400d16a:	d020      	beq.n	3400d1ae <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d16c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d170:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d174:	4b86      	ldr	r3, [pc, #536]	@ (3400d390 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
3400d176:	429a      	cmp	r2, r3
3400d178:	d019      	beq.n	3400d1ae <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d17a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d17e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d182:	4b84      	ldr	r3, [pc, #528]	@ (3400d394 <HAL_RCCEx_PeriphCLKConfig+0x39a0>)
3400d184:	429a      	cmp	r2, r3
3400d186:	d012      	beq.n	3400d1ae <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d188:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d18c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d190:	4b81      	ldr	r3, [pc, #516]	@ (3400d398 <HAL_RCCEx_PeriphCLKConfig+0x39a4>)
3400d192:	429a      	cmp	r2, r3
3400d194:	d00b      	beq.n	3400d1ae <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d196:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d19a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d19e:	4b7f      	ldr	r3, [pc, #508]	@ (3400d39c <HAL_RCCEx_PeriphCLKConfig+0x39a8>)
3400d1a0:	429a      	cmp	r2, r3
3400d1a2:	d004      	beq.n	3400d1ae <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d1a4:	f240 41cb 	movw	r1, #1227	@ 0x4cb
3400d1a8:	487d      	ldr	r0, [pc, #500]	@ (3400d3a0 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d1aa:	f7f4 fd7b 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3400d1ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1b2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d1b6:	4b76      	ldr	r3, [pc, #472]	@ (3400d390 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
3400d1b8:	429a      	cmp	r2, r3
3400d1ba:	d142      	bne.n	3400d242 <HAL_RCCEx_PeriphCLKConfig+0x384e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400d1bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d1c2:	2b00      	cmp	r3, #0
3400d1c4:	d016      	beq.n	3400d1f4 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400d1c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d1cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d1d0:	d010      	beq.n	3400d1f4 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400d1d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d1d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d1dc:	d00a      	beq.n	3400d1f4 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400d1de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d1e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d1e8:	d004      	beq.n	3400d1f4 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400d1ea:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
3400d1ee:	486c      	ldr	r0, [pc, #432]	@ (3400d3a0 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d1f0:	f7f4 fd58 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400d1f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d1fa:	2b00      	cmp	r3, #0
3400d1fc:	d005      	beq.n	3400d20a <HAL_RCCEx_PeriphCLKConfig+0x3816>
3400d1fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d202:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d208:	d904      	bls.n	3400d214 <HAL_RCCEx_PeriphCLKConfig+0x3820>
3400d20a:	f240 41d1 	movw	r1, #1233	@ 0x4d1
3400d20e:	4864      	ldr	r0, [pc, #400]	@ (3400d3a0 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d210:	f7f4 fd48 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400d214:	4b63      	ldr	r3, [pc, #396]	@ (3400d3a4 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d216:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400d21a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d21e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d222:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d226:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400d228:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d22c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d22e:	3b01      	subs	r3, #1
3400d230:	041b      	lsls	r3, r3, #16
3400d232:	4313      	orrs	r3, r2
3400d234:	4a5b      	ldr	r2, [pc, #364]	@ (3400d3a4 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d236:	430b      	orrs	r3, r1
3400d238:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400d23c:	f7fc fa38 	bl	340096b0 <LL_RCC_IC15_Enable>
3400d240:	e008      	b.n	3400d254 <HAL_RCCEx_PeriphCLKConfig+0x3860>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
3400d242:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d246:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d24a:	4b50      	ldr	r3, [pc, #320]	@ (3400d38c <HAL_RCCEx_PeriphCLKConfig+0x3998>)
3400d24c:	429a      	cmp	r2, r3
3400d24e:	d101      	bne.n	3400d254 <HAL_RCCEx_PeriphCLKConfig+0x3860>
    {
      LL_RCC_CLKP_Enable();
3400d250:	f7fc fbae 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
3400d254:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d258:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400d25c:	4618      	mov	r0, r3
3400d25e:	f7fb fa99 	bl	34008794 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3400d262:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d266:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d26a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3400d26e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
3400d272:	2300      	movs	r3, #0
3400d274:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3400d278:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
3400d27c:	4603      	mov	r3, r0
3400d27e:	460a      	mov	r2, r1
3400d280:	4313      	orrs	r3, r2
3400d282:	f000 80eb 	beq.w	3400d45c <HAL_RCCEx_PeriphCLKConfig+0x3a68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
3400d286:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d28a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d28e:	2b00      	cmp	r3, #0
3400d290:	d02e      	beq.n	3400d2f0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d292:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d296:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d29a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d29e:	d027      	beq.n	3400d2f0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400d2ac:	d020      	beq.n	3400d2f0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400d2ba:	d019      	beq.n	3400d2f0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400d2c8:	d012      	beq.n	3400d2f0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2d2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3400d2d6:	d00b      	beq.n	3400d2f0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400d2e4:	d004      	beq.n	3400d2f0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2e6:	f240 41eb 	movw	r1, #1259	@ 0x4eb
3400d2ea:	482d      	ldr	r0, [pc, #180]	@ (3400d3a0 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d2ec:	f7f4 fcda 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3400d2f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400d2fc:	d154      	bne.n	3400d3a8 <HAL_RCCEx_PeriphCLKConfig+0x39b4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400d2fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d304:	2b00      	cmp	r3, #0
3400d306:	d016      	beq.n	3400d336 <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d308:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d30c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d30e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d312:	d010      	beq.n	3400d336 <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d314:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d31a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d31e:	d00a      	beq.n	3400d336 <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d320:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d32a:	d004      	beq.n	3400d336 <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d32c:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
3400d330:	481b      	ldr	r0, [pc, #108]	@ (3400d3a0 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d332:	f7f4 fcb7 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400d336:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d33a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d33c:	2b00      	cmp	r3, #0
3400d33e:	d005      	beq.n	3400d34c <HAL_RCCEx_PeriphCLKConfig+0x3958>
3400d340:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d34a:	d904      	bls.n	3400d356 <HAL_RCCEx_PeriphCLKConfig+0x3962>
3400d34c:	f240 41f1 	movw	r1, #1265	@ 0x4f1
3400d350:	4813      	ldr	r0, [pc, #76]	@ (3400d3a0 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d352:	f7f4 fca7 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400d356:	4b13      	ldr	r3, [pc, #76]	@ (3400d3a4 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d358:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400d35c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d360:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d364:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d368:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400d36a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d36e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d370:	3b01      	subs	r3, #1
3400d372:	041b      	lsls	r3, r3, #16
3400d374:	4313      	orrs	r3, r2
3400d376:	4a0b      	ldr	r2, [pc, #44]	@ (3400d3a4 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d378:	430b      	orrs	r3, r1
3400d37a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400d37e:	f7fc f857 	bl	34009430 <LL_RCC_IC9_Enable>
3400d382:	e064      	b.n	3400d44e <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
3400d384:	0701142c 	.word	0x0701142c
3400d388:	0700182c 	.word	0x0700182c
3400d38c:	0701182c 	.word	0x0701182c
3400d390:	0702182c 	.word	0x0702182c
3400d394:	0703182c 	.word	0x0703182c
3400d398:	0704182c 	.word	0x0704182c
3400d39c:	0705182c 	.word	0x0705182c
3400d3a0:	3401e910 	.word	0x3401e910
3400d3a4:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
3400d3a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3ac:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d3b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400d3b4:	d142      	bne.n	3400d43c <HAL_RCCEx_PeriphCLKConfig+0x3a48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400d3b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d3bc:	2b00      	cmp	r3, #0
3400d3be:	d016      	beq.n	3400d3ee <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d3c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d3c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d3ca:	d010      	beq.n	3400d3ee <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d3cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d3d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d3d6:	d00a      	beq.n	3400d3ee <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d3d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d3de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d3e2:	d004      	beq.n	3400d3ee <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d3e4:	f240 41fd 	movw	r1, #1277	@ 0x4fd
3400d3e8:	48b2      	ldr	r0, [pc, #712]	@ (3400d6b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d3ea:	f7f4 fc5b 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400d3ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400d3f4:	2b00      	cmp	r3, #0
3400d3f6:	d005      	beq.n	3400d404 <HAL_RCCEx_PeriphCLKConfig+0x3a10>
3400d3f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400d3fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d402:	d904      	bls.n	3400d40e <HAL_RCCEx_PeriphCLKConfig+0x3a1a>
3400d404:	f240 41fe 	movw	r1, #1278	@ 0x4fe
3400d408:	48aa      	ldr	r0, [pc, #680]	@ (3400d6b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d40a:	f7f4 fc4b 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400d40e:	4baa      	ldr	r3, [pc, #680]	@ (3400d6b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d410:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400d414:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d418:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d41c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d420:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400d422:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400d428:	3b01      	subs	r3, #1
3400d42a:	041b      	lsls	r3, r3, #16
3400d42c:	4313      	orrs	r3, r2
3400d42e:	4aa2      	ldr	r2, [pc, #648]	@ (3400d6b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d430:	430b      	orrs	r3, r1
3400d432:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400d436:	f7fc f8fb 	bl	34009630 <LL_RCC_IC14_Enable>
3400d43a:	e008      	b.n	3400d44e <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
3400d43c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d440:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d448:	d101      	bne.n	3400d44e <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    {
      LL_RCC_CLKP_Enable();
3400d44a:	f7fc fab1 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
3400d44e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d452:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d456:	4618      	mov	r0, r3
3400d458:	f7fb f9a8 	bl	340087ac <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
3400d45c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d460:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d464:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3400d468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
3400d46c:	2300      	movs	r3, #0
3400d46e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
3400d472:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3400d476:	4603      	mov	r3, r0
3400d478:	460a      	mov	r2, r1
3400d47a:	4313      	orrs	r3, r2
3400d47c:	f000 8082 	beq.w	3400d584 <HAL_RCCEx_PeriphCLKConfig+0x3b90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
3400d480:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d484:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d488:	2b00      	cmp	r3, #0
3400d48a:	d019      	beq.n	3400d4c0 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d48c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d490:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400d498:	d012      	beq.n	3400d4c0 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d49a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d49e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d4a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400d4a6:	d00b      	beq.n	3400d4c0 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d4a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4ac:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d4b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3400d4b4:	d004      	beq.n	3400d4c0 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d4b6:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
3400d4ba:	487e      	ldr	r0, [pc, #504]	@ (3400d6b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d4bc:	f7f4 fbf2 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3400d4c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4c4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d4c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400d4cc:	d14a      	bne.n	3400d564 <HAL_RCCEx_PeriphCLKConfig+0x3b70>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
3400d4ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d4d6:	2b00      	cmp	r3, #0
3400d4d8:	d019      	beq.n	3400d50e <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d4da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d4e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d4e6:	d012      	beq.n	3400d50e <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d4e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d4f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d4f4:	d00b      	beq.n	3400d50e <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d4f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d4fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d502:	d004      	beq.n	3400d50e <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d504:	f240 511d 	movw	r1, #1309	@ 0x51d
3400d508:	486a      	ldr	r0, [pc, #424]	@ (3400d6b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d50a:	f7f4 fbcb 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
3400d50e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400d516:	2b00      	cmp	r3, #0
3400d518:	d006      	beq.n	3400d528 <HAL_RCCEx_PeriphCLKConfig+0x3b34>
3400d51a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d51e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400d522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d526:	d904      	bls.n	3400d532 <HAL_RCCEx_PeriphCLKConfig+0x3b3e>
3400d528:	f240 511e 	movw	r1, #1310	@ 0x51e
3400d52c:	4861      	ldr	r0, [pc, #388]	@ (3400d6b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d52e:	f7f4 fbb9 	bl	34001ca4 <assert_failed>

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3400d532:	4b61      	ldr	r3, [pc, #388]	@ (3400d6b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d534:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400d538:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d53c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d540:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d544:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400d548:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400d550:	3b01      	subs	r3, #1
3400d552:	041b      	lsls	r3, r3, #16
3400d554:	4313      	orrs	r3, r2
3400d556:	4a58      	ldr	r2, [pc, #352]	@ (3400d6b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d558:	430b      	orrs	r3, r1
3400d55a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
3400d55e:	f7fc f8e7 	bl	34009730 <LL_RCC_IC16_Enable>
3400d562:	e008      	b.n	3400d576 <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
3400d564:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d568:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d56c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400d570:	d101      	bne.n	3400d576 <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    {
      LL_RCC_CLKP_Enable();
3400d572:	f7fc fa1d 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
3400d576:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d57a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d57e:	4618      	mov	r0, r3
3400d580:	f7fb f92a 	bl	340087d8 <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
3400d584:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d588:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d58c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3400d590:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
3400d594:	2300      	movs	r3, #0
3400d596:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
3400d59a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3400d59e:	4603      	mov	r3, r0
3400d5a0:	460a      	mov	r2, r1
3400d5a2:	4313      	orrs	r3, r2
3400d5a4:	f000 80e4 	beq.w	3400d770 <HAL_RCCEx_PeriphCLKConfig+0x3d7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
3400d5a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5ac:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5b0:	2b00      	cmp	r3, #0
3400d5b2:	d035      	beq.n	3400d620 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5b8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400d5c0:	d02e      	beq.n	3400d620 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5c6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400d5ce:	d027      	beq.n	3400d620 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5d4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400d5dc:	d020      	beq.n	3400d620 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400d5ea:	d019      	beq.n	3400d620 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5f0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3400d5f8:	d012      	beq.n	3400d620 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5fe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d602:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3400d606:	d00b      	beq.n	3400d620 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d608:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d60c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d610:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3400d614:	d004      	beq.n	3400d620 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d616:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
3400d61a:	4826      	ldr	r0, [pc, #152]	@ (3400d6b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d61c:	f7f4 fb42 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
3400d620:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d624:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400d62c:	d146      	bne.n	3400d6bc <HAL_RCCEx_PeriphCLKConfig+0x3cc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d62e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d634:	2b00      	cmp	r3, #0
3400d636:	d016      	beq.n	3400d666 <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d638:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d63e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d642:	d010      	beq.n	3400d666 <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d644:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d64a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d64e:	d00a      	beq.n	3400d666 <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d650:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d656:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d65a:	d004      	beq.n	3400d666 <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d65c:	f240 513d 	movw	r1, #1341	@ 0x53d
3400d660:	4814      	ldr	r0, [pc, #80]	@ (3400d6b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d662:	f7f4 fb1f 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400d666:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d66a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d66c:	2b00      	cmp	r3, #0
3400d66e:	d005      	beq.n	3400d67c <HAL_RCCEx_PeriphCLKConfig+0x3c88>
3400d670:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d67a:	d904      	bls.n	3400d686 <HAL_RCCEx_PeriphCLKConfig+0x3c92>
3400d67c:	f240 513e 	movw	r1, #1342	@ 0x53e
3400d680:	480c      	ldr	r0, [pc, #48]	@ (3400d6b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d682:	f7f4 fb0f 	bl	34001ca4 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400d686:	4b0c      	ldr	r3, [pc, #48]	@ (3400d6b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d688:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400d68c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d690:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d694:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400d69a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d69e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d6a0:	3b01      	subs	r3, #1
3400d6a2:	041b      	lsls	r3, r3, #16
3400d6a4:	4313      	orrs	r3, r2
3400d6a6:	4a04      	ldr	r2, [pc, #16]	@ (3400d6b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d6a8:	430b      	orrs	r3, r1
3400d6aa:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400d6ae:	f7fb fe3f 	bl	34009330 <LL_RCC_IC7_Enable>
3400d6b2:	e056      	b.n	3400d762 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
3400d6b4:	3401e910 	.word	0x3401e910
3400d6b8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
3400d6bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6c0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d6c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400d6c8:	d142      	bne.n	3400d750 <HAL_RCCEx_PeriphCLKConfig+0x3d5c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d6ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6d0:	2b00      	cmp	r3, #0
3400d6d2:	d016      	beq.n	3400d702 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d6d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d6de:	d010      	beq.n	3400d702 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d6e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d6ea:	d00a      	beq.n	3400d702 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d6ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d6f6:	d004      	beq.n	3400d702 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d6f8:	f240 514a 	movw	r1, #1354	@ 0x54a
3400d6fc:	48b0      	ldr	r0, [pc, #704]	@ (3400d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d6fe:	f7f4 fad1 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400d702:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d708:	2b00      	cmp	r3, #0
3400d70a:	d005      	beq.n	3400d718 <HAL_RCCEx_PeriphCLKConfig+0x3d24>
3400d70c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d716:	d904      	bls.n	3400d722 <HAL_RCCEx_PeriphCLKConfig+0x3d2e>
3400d718:	f240 514b 	movw	r1, #1355	@ 0x54b
3400d71c:	48a8      	ldr	r0, [pc, #672]	@ (3400d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d71e:	f7f4 fac1 	bl	34001ca4 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400d722:	4ba8      	ldr	r3, [pc, #672]	@ (3400d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400d728:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d72c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d730:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400d736:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d73a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d73c:	3b01      	subs	r3, #1
3400d73e:	041b      	lsls	r3, r3, #16
3400d740:	4313      	orrs	r3, r2
3400d742:	4aa0      	ldr	r2, [pc, #640]	@ (3400d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d744:	430b      	orrs	r3, r1
3400d746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400d74a:	f7fb fe31 	bl	340093b0 <LL_RCC_IC8_Enable>
3400d74e:	e008      	b.n	3400d762 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3400d750:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d754:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400d75c:	d101      	bne.n	3400d762 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    {
      LL_RCC_CLKP_Enable();
3400d75e:	f7fc f927 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3400d762:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d766:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d76a:	4618      	mov	r0, r3
3400d76c:	f7fb f84a 	bl	34008804 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3400d770:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d774:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d778:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
3400d77c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3400d780:	2300      	movs	r3, #0
3400d782:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3400d786:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
3400d78a:	4603      	mov	r3, r0
3400d78c:	460a      	mov	r2, r1
3400d78e:	4313      	orrs	r3, r2
3400d790:	d07c      	beq.n	3400d88c <HAL_RCCEx_PeriphCLKConfig+0x3e98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
3400d792:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d796:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d79a:	2b00      	cmp	r3, #0
3400d79c:	d016      	beq.n	3400d7cc <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d79e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7a2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d7a6:	2b10      	cmp	r3, #16
3400d7a8:	d010      	beq.n	3400d7cc <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d7aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7ae:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d7b2:	2b20      	cmp	r3, #32
3400d7b4:	d00a      	beq.n	3400d7cc <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d7b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7ba:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d7be:	2b30      	cmp	r3, #48	@ 0x30
3400d7c0:	d004      	beq.n	3400d7cc <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d7c2:	f240 5165 	movw	r1, #1381	@ 0x565
3400d7c6:	487e      	ldr	r0, [pc, #504]	@ (3400d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d7c8:	f7f4 fa6c 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3400d7cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d7d4:	2b20      	cmp	r3, #32
3400d7d6:	d14a      	bne.n	3400d86e <HAL_RCCEx_PeriphCLKConfig+0x3e7a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400d7d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d7e0:	2b00      	cmp	r3, #0
3400d7e2:	d019      	beq.n	3400d818 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d7e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d7ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d7f0:	d012      	beq.n	3400d818 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d7f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d7fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d7fe:	d00b      	beq.n	3400d818 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d800:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d804:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d808:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d80c:	d004      	beq.n	3400d818 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d80e:	f240 516a 	movw	r1, #1386	@ 0x56a
3400d812:	486b      	ldr	r0, [pc, #428]	@ (3400d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d814:	f7f4 fa46 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400d818:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d81c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d820:	2b00      	cmp	r3, #0
3400d822:	d006      	beq.n	3400d832 <HAL_RCCEx_PeriphCLKConfig+0x3e3e>
3400d824:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d828:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d82c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d830:	d904      	bls.n	3400d83c <HAL_RCCEx_PeriphCLKConfig+0x3e48>
3400d832:	f240 516b 	movw	r1, #1387	@ 0x56b
3400d836:	4862      	ldr	r0, [pc, #392]	@ (3400d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d838:	f7f4 fa34 	bl	34001ca4 <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400d83c:	4b61      	ldr	r3, [pc, #388]	@ (3400d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d83e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400d842:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d846:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d84a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d84e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400d852:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d856:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d85a:	3b01      	subs	r3, #1
3400d85c:	041b      	lsls	r3, r3, #16
3400d85e:	4313      	orrs	r3, r2
3400d860:	4a58      	ldr	r2, [pc, #352]	@ (3400d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d862:	430b      	orrs	r3, r1
3400d864:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3400d868:	f7fc f862 	bl	34009930 <LL_RCC_IC20_Enable>
3400d86c:	e007      	b.n	3400d87e <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
3400d86e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d872:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d876:	2b10      	cmp	r3, #16
3400d878:	d101      	bne.n	3400d87e <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    {
      LL_RCC_CLKP_Enable();
3400d87a:	f7fc f899 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
3400d87e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d882:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d886:	4618      	mov	r0, r3
3400d888:	f7fa ffe8 	bl	3400885c <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3400d88c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d890:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d894:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
3400d898:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3400d89c:	2300      	movs	r3, #0
3400d89e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3400d8a2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3400d8a6:	4603      	mov	r3, r0
3400d8a8:	460a      	mov	r2, r1
3400d8aa:	4313      	orrs	r3, r2
3400d8ac:	f000 80f6 	beq.w	3400da9c <HAL_RCCEx_PeriphCLKConfig+0x40a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
3400d8b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8b4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8b8:	4b43      	ldr	r3, [pc, #268]	@ (3400d9c8 <HAL_RCCEx_PeriphCLKConfig+0x3fd4>)
3400d8ba:	429a      	cmp	r2, r3
3400d8bc:	d035      	beq.n	3400d92a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8c2:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8c6:	4b41      	ldr	r3, [pc, #260]	@ (3400d9cc <HAL_RCCEx_PeriphCLKConfig+0x3fd8>)
3400d8c8:	429a      	cmp	r2, r3
3400d8ca:	d02e      	beq.n	3400d92a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8d0:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8d4:	4b3e      	ldr	r3, [pc, #248]	@ (3400d9d0 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3400d8d6:	429a      	cmp	r2, r3
3400d8d8:	d027      	beq.n	3400d92a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8de:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8e2:	4b3c      	ldr	r3, [pc, #240]	@ (3400d9d4 <HAL_RCCEx_PeriphCLKConfig+0x3fe0>)
3400d8e4:	429a      	cmp	r2, r3
3400d8e6:	d020      	beq.n	3400d92a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8ec:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8f0:	4b39      	ldr	r3, [pc, #228]	@ (3400d9d8 <HAL_RCCEx_PeriphCLKConfig+0x3fe4>)
3400d8f2:	429a      	cmp	r2, r3
3400d8f4:	d019      	beq.n	3400d92a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8fa:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8fe:	4b37      	ldr	r3, [pc, #220]	@ (3400d9dc <HAL_RCCEx_PeriphCLKConfig+0x3fe8>)
3400d900:	429a      	cmp	r2, r3
3400d902:	d012      	beq.n	3400d92a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d904:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d908:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d90c:	4b34      	ldr	r3, [pc, #208]	@ (3400d9e0 <HAL_RCCEx_PeriphCLKConfig+0x3fec>)
3400d90e:	429a      	cmp	r2, r3
3400d910:	d00b      	beq.n	3400d92a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d912:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d916:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d91a:	4b32      	ldr	r3, [pc, #200]	@ (3400d9e4 <HAL_RCCEx_PeriphCLKConfig+0x3ff0>)
3400d91c:	429a      	cmp	r2, r3
3400d91e:	d004      	beq.n	3400d92a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d920:	f240 5185 	movw	r1, #1413	@ 0x585
3400d924:	4826      	ldr	r0, [pc, #152]	@ (3400d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d926:	f7f4 f9bd 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
3400d92a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d92e:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d932:	4b27      	ldr	r3, [pc, #156]	@ (3400d9d0 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3400d934:	429a      	cmp	r2, r3
3400d936:	d157      	bne.n	3400d9e8 <HAL_RCCEx_PeriphCLKConfig+0x3ff4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d938:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d93e:	2b00      	cmp	r3, #0
3400d940:	d016      	beq.n	3400d970 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d942:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d948:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d94c:	d010      	beq.n	3400d970 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d94e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d958:	d00a      	beq.n	3400d970 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d95a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d95e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d960:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d964:	d004      	beq.n	3400d970 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d966:	f240 518a 	movw	r1, #1418	@ 0x58a
3400d96a:	4815      	ldr	r0, [pc, #84]	@ (3400d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d96c:	f7f4 f99a 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400d970:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d976:	2b00      	cmp	r3, #0
3400d978:	d005      	beq.n	3400d986 <HAL_RCCEx_PeriphCLKConfig+0x3f92>
3400d97a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d97e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d984:	d904      	bls.n	3400d990 <HAL_RCCEx_PeriphCLKConfig+0x3f9c>
3400d986:	f240 518b 	movw	r1, #1419	@ 0x58b
3400d98a:	480d      	ldr	r0, [pc, #52]	@ (3400d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d98c:	f7f4 f98a 	bl	34001ca4 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400d990:	4b0c      	ldr	r3, [pc, #48]	@ (3400d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d992:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400d996:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d99a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d99e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400d9a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d9aa:	3b01      	subs	r3, #1
3400d9ac:	041b      	lsls	r3, r3, #16
3400d9ae:	4313      	orrs	r3, r2
3400d9b0:	4a04      	ldr	r2, [pc, #16]	@ (3400d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d9b2:	430b      	orrs	r3, r1
3400d9b4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400d9b8:	f7fb fcba 	bl	34009330 <LL_RCC_IC7_Enable>
3400d9bc:	e067      	b.n	3400da8e <HAL_RCCEx_PeriphCLKConfig+0x409a>
3400d9be:	bf00      	nop
3400d9c0:	3401e910 	.word	0x3401e910
3400d9c4:	56028000 	.word	0x56028000
3400d9c8:	07001418 	.word	0x07001418
3400d9cc:	07011418 	.word	0x07011418
3400d9d0:	07021418 	.word	0x07021418
3400d9d4:	07031418 	.word	0x07031418
3400d9d8:	07041418 	.word	0x07041418
3400d9dc:	07051418 	.word	0x07051418
3400d9e0:	07061418 	.word	0x07061418
3400d9e4:	07071418 	.word	0x07071418
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
3400d9e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9ec:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d9f0:	4b9c      	ldr	r3, [pc, #624]	@ (3400dc64 <HAL_RCCEx_PeriphCLKConfig+0x4270>)
3400d9f2:	429a      	cmp	r2, r3
3400d9f4:	d142      	bne.n	3400da7c <HAL_RCCEx_PeriphCLKConfig+0x4088>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d9f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d9fc:	2b00      	cmp	r3, #0
3400d9fe:	d016      	beq.n	3400da2e <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400da00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400da0a:	d010      	beq.n	3400da2e <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400da0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400da16:	d00a      	beq.n	3400da2e <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400da18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400da22:	d004      	beq.n	3400da2e <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400da24:	f240 5197 	movw	r1, #1431	@ 0x597
3400da28:	488f      	ldr	r0, [pc, #572]	@ (3400dc68 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400da2a:	f7f4 f93b 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400da2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da34:	2b00      	cmp	r3, #0
3400da36:	d005      	beq.n	3400da44 <HAL_RCCEx_PeriphCLKConfig+0x4050>
3400da38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400da42:	d904      	bls.n	3400da4e <HAL_RCCEx_PeriphCLKConfig+0x405a>
3400da44:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
3400da48:	4887      	ldr	r0, [pc, #540]	@ (3400dc68 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400da4a:	f7f4 f92b 	bl	34001ca4 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400da4e:	4b87      	ldr	r3, [pc, #540]	@ (3400dc6c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400da50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400da54:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400da58:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400da5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400da62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da68:	3b01      	subs	r3, #1
3400da6a:	041b      	lsls	r3, r3, #16
3400da6c:	4313      	orrs	r3, r2
3400da6e:	4a7f      	ldr	r2, [pc, #508]	@ (3400dc6c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400da70:	430b      	orrs	r3, r1
3400da72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400da76:	f7fb fc9b 	bl	340093b0 <LL_RCC_IC8_Enable>
3400da7a:	e008      	b.n	3400da8e <HAL_RCCEx_PeriphCLKConfig+0x409a>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
3400da7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da80:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400da84:	4b7a      	ldr	r3, [pc, #488]	@ (3400dc70 <HAL_RCCEx_PeriphCLKConfig+0x427c>)
3400da86:	429a      	cmp	r2, r3
3400da88:	d101      	bne.n	3400da8e <HAL_RCCEx_PeriphCLKConfig+0x409a>
    {
      LL_RCC_CLKP_Enable();
3400da8a:	f7fb ff91 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
3400da8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da92:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
3400da96:	4618      	mov	r0, r3
3400da98:	f7fa fef6 	bl	34008888 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
3400da9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400daa0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400daa4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
3400daa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
3400daac:	2300      	movs	r3, #0
3400daae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3400dab2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3400dab6:	4603      	mov	r3, r0
3400dab8:	460a      	mov	r2, r1
3400daba:	4313      	orrs	r3, r2
3400dabc:	f000 80fa 	beq.w	3400dcb4 <HAL_RCCEx_PeriphCLKConfig+0x42c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
3400dac0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dac4:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400dac8:	4b6a      	ldr	r3, [pc, #424]	@ (3400dc74 <HAL_RCCEx_PeriphCLKConfig+0x4280>)
3400daca:	429a      	cmp	r2, r3
3400dacc:	d035      	beq.n	3400db3a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400dace:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dad2:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400dad6:	4b68      	ldr	r3, [pc, #416]	@ (3400dc78 <HAL_RCCEx_PeriphCLKConfig+0x4284>)
3400dad8:	429a      	cmp	r2, r3
3400dada:	d02e      	beq.n	3400db3a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400dadc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dae0:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400dae4:	4b65      	ldr	r3, [pc, #404]	@ (3400dc7c <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3400dae6:	429a      	cmp	r2, r3
3400dae8:	d027      	beq.n	3400db3a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400daea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400daee:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400daf2:	4b63      	ldr	r3, [pc, #396]	@ (3400dc80 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
3400daf4:	429a      	cmp	r2, r3
3400daf6:	d020      	beq.n	3400db3a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400daf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dafc:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400db00:	4b60      	ldr	r3, [pc, #384]	@ (3400dc84 <HAL_RCCEx_PeriphCLKConfig+0x4290>)
3400db02:	429a      	cmp	r2, r3
3400db04:	d019      	beq.n	3400db3a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400db06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db0a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400db0e:	4b5e      	ldr	r3, [pc, #376]	@ (3400dc88 <HAL_RCCEx_PeriphCLKConfig+0x4294>)
3400db10:	429a      	cmp	r2, r3
3400db12:	d012      	beq.n	3400db3a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400db14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db18:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400db1c:	4b5b      	ldr	r3, [pc, #364]	@ (3400dc8c <HAL_RCCEx_PeriphCLKConfig+0x4298>)
3400db1e:	429a      	cmp	r2, r3
3400db20:	d00b      	beq.n	3400db3a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400db22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db26:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400db2a:	4b59      	ldr	r3, [pc, #356]	@ (3400dc90 <HAL_RCCEx_PeriphCLKConfig+0x429c>)
3400db2c:	429a      	cmp	r2, r3
3400db2e:	d004      	beq.n	3400db3a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400db30:	f240 51b2 	movw	r1, #1458	@ 0x5b2
3400db34:	484c      	ldr	r0, [pc, #304]	@ (3400dc68 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400db36:	f7f4 f8b5 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
3400db3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db3e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400db42:	4b4e      	ldr	r3, [pc, #312]	@ (3400dc7c <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3400db44:	429a      	cmp	r2, r3
3400db46:	d142      	bne.n	3400dbce <HAL_RCCEx_PeriphCLKConfig+0x41da>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400db48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db4e:	2b00      	cmp	r3, #0
3400db50:	d016      	beq.n	3400db80 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400db52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400db5c:	d010      	beq.n	3400db80 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400db5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400db68:	d00a      	beq.n	3400db80 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400db6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400db74:	d004      	beq.n	3400db80 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400db76:	f240 51b7 	movw	r1, #1463	@ 0x5b7
3400db7a:	483b      	ldr	r0, [pc, #236]	@ (3400dc68 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400db7c:	f7f4 f892 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400db80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400db86:	2b00      	cmp	r3, #0
3400db88:	d005      	beq.n	3400db96 <HAL_RCCEx_PeriphCLKConfig+0x41a2>
3400db8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400db90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400db94:	d904      	bls.n	3400dba0 <HAL_RCCEx_PeriphCLKConfig+0x41ac>
3400db96:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
3400db9a:	4833      	ldr	r0, [pc, #204]	@ (3400dc68 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400db9c:	f7f4 f882 	bl	34001ca4 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400dba0:	4b32      	ldr	r3, [pc, #200]	@ (3400dc6c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400dba2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400dba6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dbaa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dbae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400dbb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400dbba:	3b01      	subs	r3, #1
3400dbbc:	041b      	lsls	r3, r3, #16
3400dbbe:	4313      	orrs	r3, r2
3400dbc0:	4a2a      	ldr	r2, [pc, #168]	@ (3400dc6c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400dbc2:	430b      	orrs	r3, r1
3400dbc4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400dbc8:	f7fb fbb2 	bl	34009330 <LL_RCC_IC7_Enable>
3400dbcc:	e06b      	b.n	3400dca6 <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
3400dbce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbd2:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400dbd6:	4b2a      	ldr	r3, [pc, #168]	@ (3400dc80 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
3400dbd8:	429a      	cmp	r2, r3
3400dbda:	d15b      	bne.n	3400dc94 <HAL_RCCEx_PeriphCLKConfig+0x42a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400dbdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbe2:	2b00      	cmp	r3, #0
3400dbe4:	d016      	beq.n	3400dc14 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400dbe6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dbf0:	d010      	beq.n	3400dc14 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400dbf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dbfc:	d00a      	beq.n	3400dc14 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400dbfe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dc04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dc08:	d004      	beq.n	3400dc14 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400dc0a:	f240 51c4 	movw	r1, #1476	@ 0x5c4
3400dc0e:	4816      	ldr	r0, [pc, #88]	@ (3400dc68 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400dc10:	f7f4 f848 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400dc14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dc1a:	2b00      	cmp	r3, #0
3400dc1c:	d005      	beq.n	3400dc2a <HAL_RCCEx_PeriphCLKConfig+0x4236>
3400dc1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dc24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dc28:	d904      	bls.n	3400dc34 <HAL_RCCEx_PeriphCLKConfig+0x4240>
3400dc2a:	f240 51c5 	movw	r1, #1477	@ 0x5c5
3400dc2e:	480e      	ldr	r0, [pc, #56]	@ (3400dc68 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400dc30:	f7f4 f838 	bl	34001ca4 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400dc34:	4b0d      	ldr	r3, [pc, #52]	@ (3400dc6c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400dc36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400dc3a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dc3e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dc42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400dc48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dc4e:	3b01      	subs	r3, #1
3400dc50:	041b      	lsls	r3, r3, #16
3400dc52:	4313      	orrs	r3, r2
3400dc54:	4a05      	ldr	r2, [pc, #20]	@ (3400dc6c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400dc56:	430b      	orrs	r3, r1
3400dc58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400dc5c:	f7fb fba8 	bl	340093b0 <LL_RCC_IC8_Enable>
3400dc60:	e021      	b.n	3400dca6 <HAL_RCCEx_PeriphCLKConfig+0x42b2>
3400dc62:	bf00      	nop
3400dc64:	07031418 	.word	0x07031418
3400dc68:	3401e910 	.word	0x3401e910
3400dc6c:	56028000 	.word	0x56028000
3400dc70:	07011418 	.word	0x07011418
3400dc74:	07001818 	.word	0x07001818
3400dc78:	07011818 	.word	0x07011818
3400dc7c:	07021818 	.word	0x07021818
3400dc80:	07031818 	.word	0x07031818
3400dc84:	07041818 	.word	0x07041818
3400dc88:	07051818 	.word	0x07051818
3400dc8c:	07061818 	.word	0x07061818
3400dc90:	07071818 	.word	0x07071818
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3400dc94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc98:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400dc9c:	4b6f      	ldr	r3, [pc, #444]	@ (3400de5c <HAL_RCCEx_PeriphCLKConfig+0x4468>)
3400dc9e:	429a      	cmp	r2, r3
3400dca0:	d101      	bne.n	3400dca6 <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    {
      LL_RCC_CLKP_Enable();
3400dca2:	f7fb fe85 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
3400dca6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcaa:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
3400dcae:	4618      	mov	r0, r3
3400dcb0:	f7fa fdea 	bl	34008888 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
3400dcb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400dcbc:	2100      	movs	r1, #0
3400dcbe:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
3400dcc2:	f003 0301 	and.w	r3, r3, #1
3400dcc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
3400dcca:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
3400dcce:	4603      	mov	r3, r0
3400dcd0:	460a      	mov	r2, r1
3400dcd2:	4313      	orrs	r3, r2
3400dcd4:	f000 80d7 	beq.w	3400de86 <HAL_RCCEx_PeriphCLKConfig+0x4492>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
3400dcd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcdc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dce0:	2b00      	cmp	r3, #0
3400dce2:	d028      	beq.n	3400dd36 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dce4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dce8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dcec:	2b01      	cmp	r3, #1
3400dcee:	d022      	beq.n	3400dd36 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dcf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcf4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dcf8:	2b02      	cmp	r3, #2
3400dcfa:	d01c      	beq.n	3400dd36 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dcfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd00:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dd04:	2b03      	cmp	r3, #3
3400dd06:	d016      	beq.n	3400dd36 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dd08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd0c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dd10:	2b04      	cmp	r3, #4
3400dd12:	d010      	beq.n	3400dd36 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dd14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd18:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dd1c:	2b05      	cmp	r3, #5
3400dd1e:	d00a      	beq.n	3400dd36 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dd20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd24:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dd28:	2b06      	cmp	r3, #6
3400dd2a:	d004      	beq.n	3400dd36 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dd2c:	f240 51df 	movw	r1, #1503	@ 0x5df
3400dd30:	484b      	ldr	r0, [pc, #300]	@ (3400de60 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400dd32:	f7f3 ffb7 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
3400dd36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd3a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dd3e:	2b02      	cmp	r3, #2
3400dd40:	d142      	bne.n	3400ddc8 <HAL_RCCEx_PeriphCLKConfig+0x43d4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400dd42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dd48:	2b00      	cmp	r3, #0
3400dd4a:	d016      	beq.n	3400dd7a <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400dd4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dd52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dd56:	d010      	beq.n	3400dd7a <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400dd58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dd5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dd62:	d00a      	beq.n	3400dd7a <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400dd64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dd6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dd6e:	d004      	beq.n	3400dd7a <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400dd70:	f240 51e4 	movw	r1, #1508	@ 0x5e4
3400dd74:	483a      	ldr	r0, [pc, #232]	@ (3400de60 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400dd76:	f7f3 ff95 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400dd7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400dd80:	2b00      	cmp	r3, #0
3400dd82:	d005      	beq.n	3400dd90 <HAL_RCCEx_PeriphCLKConfig+0x439c>
3400dd84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400dd8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dd8e:	d904      	bls.n	3400dd9a <HAL_RCCEx_PeriphCLKConfig+0x43a6>
3400dd90:	f240 51e5 	movw	r1, #1509	@ 0x5e5
3400dd94:	4832      	ldr	r0, [pc, #200]	@ (3400de60 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400dd96:	f7f3 ff85 	bl	34001ca4 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400dd9a:	4b32      	ldr	r3, [pc, #200]	@ (3400de64 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400dd9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400dda0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dda4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dda8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400ddae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400ddb4:	3b01      	subs	r3, #1
3400ddb6:	041b      	lsls	r3, r3, #16
3400ddb8:	4313      	orrs	r3, r2
3400ddba:	4a2a      	ldr	r2, [pc, #168]	@ (3400de64 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400ddbc:	430b      	orrs	r3, r1
3400ddbe:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400ddc2:	f7fb fab5 	bl	34009330 <LL_RCC_IC7_Enable>
3400ddc6:	e057      	b.n	3400de78 <HAL_RCCEx_PeriphCLKConfig+0x4484>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
3400ddc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddcc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400ddd0:	2b03      	cmp	r3, #3
3400ddd2:	d149      	bne.n	3400de68 <HAL_RCCEx_PeriphCLKConfig+0x4474>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400ddd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400ddda:	2b00      	cmp	r3, #0
3400dddc:	d016      	beq.n	3400de0c <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400ddde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dde2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dde4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dde8:	d010      	beq.n	3400de0c <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400ddea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400ddf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ddf4:	d00a      	beq.n	3400de0c <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400ddf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400ddfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400de00:	d004      	beq.n	3400de0c <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400de02:	f240 51f1 	movw	r1, #1521	@ 0x5f1
3400de06:	4816      	ldr	r0, [pc, #88]	@ (3400de60 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400de08:	f7f3 ff4c 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400de0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400de12:	2b00      	cmp	r3, #0
3400de14:	d005      	beq.n	3400de22 <HAL_RCCEx_PeriphCLKConfig+0x442e>
3400de16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400de1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400de20:	d904      	bls.n	3400de2c <HAL_RCCEx_PeriphCLKConfig+0x4438>
3400de22:	f240 51f2 	movw	r1, #1522	@ 0x5f2
3400de26:	480e      	ldr	r0, [pc, #56]	@ (3400de60 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400de28:	f7f3 ff3c 	bl	34001ca4 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400de2c:	4b0d      	ldr	r3, [pc, #52]	@ (3400de64 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400de2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400de32:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400de36:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400de3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400de40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400de46:	3b01      	subs	r3, #1
3400de48:	041b      	lsls	r3, r3, #16
3400de4a:	4313      	orrs	r3, r2
3400de4c:	4a05      	ldr	r2, [pc, #20]	@ (3400de64 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400de4e:	430b      	orrs	r3, r1
3400de50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400de54:	f7fb faac 	bl	340093b0 <LL_RCC_IC8_Enable>
3400de58:	e00e      	b.n	3400de78 <HAL_RCCEx_PeriphCLKConfig+0x4484>
3400de5a:	bf00      	nop
3400de5c:	07011818 	.word	0x07011818
3400de60:	3401e910 	.word	0x3401e910
3400de64:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
3400de68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de6c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400de70:	2b01      	cmp	r3, #1
3400de72:	d101      	bne.n	3400de78 <HAL_RCCEx_PeriphCLKConfig+0x4484>
    {
      LL_RCC_CLKP_Enable();
3400de74:	f7fb fd9c 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
3400de78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de7c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400de80:	4618      	mov	r0, r3
3400de82:	f7fa fd17 	bl	340088b4 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3400de86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400de8e:	2100      	movs	r1, #0
3400de90:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
3400de94:	f003 0302 	and.w	r3, r3, #2
3400de98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
3400de9c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
3400dea0:	4603      	mov	r3, r0
3400dea2:	460a      	mov	r2, r1
3400dea4:	4313      	orrs	r3, r2
3400dea6:	f000 80da 	beq.w	3400e05e <HAL_RCCEx_PeriphCLKConfig+0x466a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
3400deaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deae:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400deb2:	4bb4      	ldr	r3, [pc, #720]	@ (3400e184 <HAL_RCCEx_PeriphCLKConfig+0x4790>)
3400deb4:	429a      	cmp	r2, r3
3400deb6:	d02e      	beq.n	3400df16 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400deb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400debc:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dec0:	4bb1      	ldr	r3, [pc, #708]	@ (3400e188 <HAL_RCCEx_PeriphCLKConfig+0x4794>)
3400dec2:	429a      	cmp	r2, r3
3400dec4:	d027      	beq.n	3400df16 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400dec6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deca:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dece:	4baf      	ldr	r3, [pc, #700]	@ (3400e18c <HAL_RCCEx_PeriphCLKConfig+0x4798>)
3400ded0:	429a      	cmp	r2, r3
3400ded2:	d020      	beq.n	3400df16 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400ded4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ded8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dedc:	4bac      	ldr	r3, [pc, #688]	@ (3400e190 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
3400dede:	429a      	cmp	r2, r3
3400dee0:	d019      	beq.n	3400df16 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400dee2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dee6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400deea:	4baa      	ldr	r3, [pc, #680]	@ (3400e194 <HAL_RCCEx_PeriphCLKConfig+0x47a0>)
3400deec:	429a      	cmp	r2, r3
3400deee:	d012      	beq.n	3400df16 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400def0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400def4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400def8:	4ba7      	ldr	r3, [pc, #668]	@ (3400e198 <HAL_RCCEx_PeriphCLKConfig+0x47a4>)
3400defa:	429a      	cmp	r2, r3
3400defc:	d00b      	beq.n	3400df16 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400defe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df02:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400df06:	4ba5      	ldr	r3, [pc, #660]	@ (3400e19c <HAL_RCCEx_PeriphCLKConfig+0x47a8>)
3400df08:	429a      	cmp	r2, r3
3400df0a:	d004      	beq.n	3400df16 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400df0c:	f240 610c 	movw	r1, #1548	@ 0x60c
3400df10:	48a3      	ldr	r0, [pc, #652]	@ (3400e1a0 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400df12:	f7f3 fec7 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
3400df16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df1a:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400df1e:	4b9b      	ldr	r3, [pc, #620]	@ (3400e18c <HAL_RCCEx_PeriphCLKConfig+0x4798>)
3400df20:	429a      	cmp	r2, r3
3400df22:	d142      	bne.n	3400dfaa <HAL_RCCEx_PeriphCLKConfig+0x45b6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400df24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400df2a:	2b00      	cmp	r3, #0
3400df2c:	d016      	beq.n	3400df5c <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400df2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400df34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400df38:	d010      	beq.n	3400df5c <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400df3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400df40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400df44:	d00a      	beq.n	3400df5c <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400df46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400df4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400df50:	d004      	beq.n	3400df5c <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400df52:	f240 6111 	movw	r1, #1553	@ 0x611
3400df56:	4892      	ldr	r0, [pc, #584]	@ (3400e1a0 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400df58:	f7f3 fea4 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400df5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400df62:	2b00      	cmp	r3, #0
3400df64:	d005      	beq.n	3400df72 <HAL_RCCEx_PeriphCLKConfig+0x457e>
3400df66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400df6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400df70:	d904      	bls.n	3400df7c <HAL_RCCEx_PeriphCLKConfig+0x4588>
3400df72:	f240 6112 	movw	r1, #1554	@ 0x612
3400df76:	488a      	ldr	r0, [pc, #552]	@ (3400e1a0 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400df78:	f7f3 fe94 	bl	34001ca4 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400df7c:	4b89      	ldr	r3, [pc, #548]	@ (3400e1a4 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400df7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400df82:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400df86:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400df8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400df90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400df96:	3b01      	subs	r3, #1
3400df98:	041b      	lsls	r3, r3, #16
3400df9a:	4313      	orrs	r3, r2
3400df9c:	4a81      	ldr	r2, [pc, #516]	@ (3400e1a4 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400df9e:	430b      	orrs	r3, r1
3400dfa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400dfa4:	f7fb fa04 	bl	340093b0 <LL_RCC_IC8_Enable>
3400dfa8:	e052      	b.n	3400e050 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
3400dfaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfae:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dfb2:	4b77      	ldr	r3, [pc, #476]	@ (3400e190 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
3400dfb4:	429a      	cmp	r2, r3
3400dfb6:	d142      	bne.n	3400e03e <HAL_RCCEx_PeriphCLKConfig+0x464a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400dfb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfbe:	2b00      	cmp	r3, #0
3400dfc0:	d016      	beq.n	3400dff0 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400dfc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dfcc:	d010      	beq.n	3400dff0 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400dfce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dfd8:	d00a      	beq.n	3400dff0 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400dfda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfe0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dfe4:	d004      	beq.n	3400dff0 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400dfe6:	f240 611e 	movw	r1, #1566	@ 0x61e
3400dfea:	486d      	ldr	r0, [pc, #436]	@ (3400e1a0 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400dfec:	f7f3 fe5a 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400dff0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400dff6:	2b00      	cmp	r3, #0
3400dff8:	d005      	beq.n	3400e006 <HAL_RCCEx_PeriphCLKConfig+0x4612>
3400dffa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e004:	d904      	bls.n	3400e010 <HAL_RCCEx_PeriphCLKConfig+0x461c>
3400e006:	f240 611f 	movw	r1, #1567	@ 0x61f
3400e00a:	4865      	ldr	r0, [pc, #404]	@ (3400e1a0 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400e00c:	f7f3 fe4a 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e010:	4b64      	ldr	r3, [pc, #400]	@ (3400e1a4 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400e012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e016:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e01a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e01e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e022:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e024:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e02a:	3b01      	subs	r3, #1
3400e02c:	041b      	lsls	r3, r3, #16
3400e02e:	4313      	orrs	r3, r2
3400e030:	4a5c      	ldr	r2, [pc, #368]	@ (3400e1a4 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400e032:	430b      	orrs	r3, r1
3400e034:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e038:	f7fb f9fa 	bl	34009430 <LL_RCC_IC9_Enable>
3400e03c:	e008      	b.n	3400e050 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
3400e03e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e042:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400e046:	4b50      	ldr	r3, [pc, #320]	@ (3400e188 <HAL_RCCEx_PeriphCLKConfig+0x4794>)
3400e048:	429a      	cmp	r2, r3
3400e04a:	d101      	bne.n	3400e050 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    {
      LL_RCC_CLKP_Enable();
3400e04c:	f7fb fcb0 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
3400e050:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e054:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
3400e058:	4618      	mov	r0, r3
3400e05a:	f7fa fc41 	bl	340088e0 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
3400e05e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e062:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e066:	2100      	movs	r1, #0
3400e068:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
3400e06c:	f003 0304 	and.w	r3, r3, #4
3400e070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3400e074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
3400e078:	4603      	mov	r3, r0
3400e07a:	460a      	mov	r2, r1
3400e07c:	4313      	orrs	r3, r2
3400e07e:	f000 80fb 	beq.w	3400e278 <HAL_RCCEx_PeriphCLKConfig+0x4884>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
3400e082:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e086:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e08a:	4b47      	ldr	r3, [pc, #284]	@ (3400e1a8 <HAL_RCCEx_PeriphCLKConfig+0x47b4>)
3400e08c:	429a      	cmp	r2, r3
3400e08e:	d02e      	beq.n	3400e0ee <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e090:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e094:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e098:	4b44      	ldr	r3, [pc, #272]	@ (3400e1ac <HAL_RCCEx_PeriphCLKConfig+0x47b8>)
3400e09a:	429a      	cmp	r2, r3
3400e09c:	d027      	beq.n	3400e0ee <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e09e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0a2:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0a6:	4b42      	ldr	r3, [pc, #264]	@ (3400e1b0 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
3400e0a8:	429a      	cmp	r2, r3
3400e0aa:	d020      	beq.n	3400e0ee <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e0ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0b0:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0b4:	4b3f      	ldr	r3, [pc, #252]	@ (3400e1b4 <HAL_RCCEx_PeriphCLKConfig+0x47c0>)
3400e0b6:	429a      	cmp	r2, r3
3400e0b8:	d019      	beq.n	3400e0ee <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e0ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0be:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0c2:	4b3d      	ldr	r3, [pc, #244]	@ (3400e1b8 <HAL_RCCEx_PeriphCLKConfig+0x47c4>)
3400e0c4:	429a      	cmp	r2, r3
3400e0c6:	d012      	beq.n	3400e0ee <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e0c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0cc:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0d0:	4b3a      	ldr	r3, [pc, #232]	@ (3400e1bc <HAL_RCCEx_PeriphCLKConfig+0x47c8>)
3400e0d2:	429a      	cmp	r2, r3
3400e0d4:	d00b      	beq.n	3400e0ee <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e0d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0da:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0de:	4b38      	ldr	r3, [pc, #224]	@ (3400e1c0 <HAL_RCCEx_PeriphCLKConfig+0x47cc>)
3400e0e0:	429a      	cmp	r2, r3
3400e0e2:	d004      	beq.n	3400e0ee <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e0e4:	f240 6139 	movw	r1, #1593	@ 0x639
3400e0e8:	482d      	ldr	r0, [pc, #180]	@ (3400e1a0 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400e0ea:	f7f3 fddb 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3400e0ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0f2:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0f6:	4b2e      	ldr	r3, [pc, #184]	@ (3400e1b0 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
3400e0f8:	429a      	cmp	r2, r3
3400e0fa:	d163      	bne.n	3400e1c4 <HAL_RCCEx_PeriphCLKConfig+0x47d0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400e0fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e102:	2b00      	cmp	r3, #0
3400e104:	d016      	beq.n	3400e134 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400e106:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e10a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e10c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e110:	d010      	beq.n	3400e134 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400e112:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e11c:	d00a      	beq.n	3400e134 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400e11e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e124:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e128:	d004      	beq.n	3400e134 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400e12a:	f240 613e 	movw	r1, #1598	@ 0x63e
3400e12e:	481c      	ldr	r0, [pc, #112]	@ (3400e1a0 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400e130:	f7f3 fdb8 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400e134:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e13a:	2b00      	cmp	r3, #0
3400e13c:	d005      	beq.n	3400e14a <HAL_RCCEx_PeriphCLKConfig+0x4756>
3400e13e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e148:	d904      	bls.n	3400e154 <HAL_RCCEx_PeriphCLKConfig+0x4760>
3400e14a:	f240 613f 	movw	r1, #1599	@ 0x63f
3400e14e:	4814      	ldr	r0, [pc, #80]	@ (3400e1a0 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400e150:	f7f3 fda8 	bl	34001ca4 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400e154:	4b13      	ldr	r3, [pc, #76]	@ (3400e1a4 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400e156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e15a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e15e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e162:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400e168:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e16e:	3b01      	subs	r3, #1
3400e170:	041b      	lsls	r3, r3, #16
3400e172:	4313      	orrs	r3, r2
3400e174:	4a0b      	ldr	r2, [pc, #44]	@ (3400e1a4 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400e176:	430b      	orrs	r3, r1
3400e178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400e17c:	f7fb f918 	bl	340093b0 <LL_RCC_IC8_Enable>
3400e180:	e073      	b.n	3400e26a <HAL_RCCEx_PeriphCLKConfig+0x4876>
3400e182:	bf00      	nop
3400e184:	07000420 	.word	0x07000420
3400e188:	07010420 	.word	0x07010420
3400e18c:	07020420 	.word	0x07020420
3400e190:	07030420 	.word	0x07030420
3400e194:	07040420 	.word	0x07040420
3400e198:	07050420 	.word	0x07050420
3400e19c:	07060420 	.word	0x07060420
3400e1a0:	3401e910 	.word	0x3401e910
3400e1a4:	56028000 	.word	0x56028000
3400e1a8:	07000820 	.word	0x07000820
3400e1ac:	07010820 	.word	0x07010820
3400e1b0:	07020820 	.word	0x07020820
3400e1b4:	07030820 	.word	0x07030820
3400e1b8:	07040820 	.word	0x07040820
3400e1bc:	07050820 	.word	0x07050820
3400e1c0:	07060820 	.word	0x07060820
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
3400e1c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1c8:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e1cc:	4b98      	ldr	r3, [pc, #608]	@ (3400e430 <HAL_RCCEx_PeriphCLKConfig+0x4a3c>)
3400e1ce:	429a      	cmp	r2, r3
3400e1d0:	d142      	bne.n	3400e258 <HAL_RCCEx_PeriphCLKConfig+0x4864>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e1d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e1d8:	2b00      	cmp	r3, #0
3400e1da:	d016      	beq.n	3400e20a <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400e1dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e1e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e1e6:	d010      	beq.n	3400e20a <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400e1e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e1ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e1f2:	d00a      	beq.n	3400e20a <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400e1f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e1fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e1fe:	d004      	beq.n	3400e20a <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400e200:	f240 614b 	movw	r1, #1611	@ 0x64b
3400e204:	488b      	ldr	r0, [pc, #556]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e206:	f7f3 fd4d 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e20a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e20e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e210:	2b00      	cmp	r3, #0
3400e212:	d005      	beq.n	3400e220 <HAL_RCCEx_PeriphCLKConfig+0x482c>
3400e214:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e21a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e21e:	d904      	bls.n	3400e22a <HAL_RCCEx_PeriphCLKConfig+0x4836>
3400e220:	f240 614c 	movw	r1, #1612	@ 0x64c
3400e224:	4883      	ldr	r0, [pc, #524]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e226:	f7f3 fd3d 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e22a:	4b83      	ldr	r3, [pc, #524]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e22c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e230:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e234:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e238:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e23c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e23e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e244:	3b01      	subs	r3, #1
3400e246:	041b      	lsls	r3, r3, #16
3400e248:	4313      	orrs	r3, r2
3400e24a:	4a7b      	ldr	r2, [pc, #492]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e24c:	430b      	orrs	r3, r1
3400e24e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e252:	f7fb f8ed 	bl	34009430 <LL_RCC_IC9_Enable>
3400e256:	e008      	b.n	3400e26a <HAL_RCCEx_PeriphCLKConfig+0x4876>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3400e258:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e25c:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e260:	4b76      	ldr	r3, [pc, #472]	@ (3400e43c <HAL_RCCEx_PeriphCLKConfig+0x4a48>)
3400e262:	429a      	cmp	r2, r3
3400e264:	d101      	bne.n	3400e26a <HAL_RCCEx_PeriphCLKConfig+0x4876>
    {
      LL_RCC_CLKP_Enable();
3400e266:	f7fb fba3 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
3400e26a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e26e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
3400e272:	4618      	mov	r0, r3
3400e274:	f7fa fb34 	bl	340088e0 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
3400e278:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e27c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e280:	2100      	movs	r1, #0
3400e282:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
3400e286:	f003 0308 	and.w	r3, r3, #8
3400e28a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
3400e28e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
3400e292:	4603      	mov	r3, r0
3400e294:	460a      	mov	r2, r1
3400e296:	4313      	orrs	r3, r2
3400e298:	f000 80f0 	beq.w	3400e47c <HAL_RCCEx_PeriphCLKConfig+0x4a88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
3400e29c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2a0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2a4:	4b66      	ldr	r3, [pc, #408]	@ (3400e440 <HAL_RCCEx_PeriphCLKConfig+0x4a4c>)
3400e2a6:	429a      	cmp	r2, r3
3400e2a8:	d02e      	beq.n	3400e308 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2ae:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2b2:	4b64      	ldr	r3, [pc, #400]	@ (3400e444 <HAL_RCCEx_PeriphCLKConfig+0x4a50>)
3400e2b4:	429a      	cmp	r2, r3
3400e2b6:	d027      	beq.n	3400e308 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2bc:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2c0:	4b61      	ldr	r3, [pc, #388]	@ (3400e448 <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
3400e2c2:	429a      	cmp	r2, r3
3400e2c4:	d020      	beq.n	3400e308 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2ca:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2ce:	4b5f      	ldr	r3, [pc, #380]	@ (3400e44c <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
3400e2d0:	429a      	cmp	r2, r3
3400e2d2:	d019      	beq.n	3400e308 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2d8:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2dc:	4b5c      	ldr	r3, [pc, #368]	@ (3400e450 <HAL_RCCEx_PeriphCLKConfig+0x4a5c>)
3400e2de:	429a      	cmp	r2, r3
3400e2e0:	d012      	beq.n	3400e308 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2e6:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2ea:	4b5a      	ldr	r3, [pc, #360]	@ (3400e454 <HAL_RCCEx_PeriphCLKConfig+0x4a60>)
3400e2ec:	429a      	cmp	r2, r3
3400e2ee:	d00b      	beq.n	3400e308 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2f4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2f8:	4b57      	ldr	r3, [pc, #348]	@ (3400e458 <HAL_RCCEx_PeriphCLKConfig+0x4a64>)
3400e2fa:	429a      	cmp	r2, r3
3400e2fc:	d004      	beq.n	3400e308 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2fe:	f240 6166 	movw	r1, #1638	@ 0x666
3400e302:	484c      	ldr	r0, [pc, #304]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e304:	f7f3 fcce 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3400e308:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e30c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e310:	4b4d      	ldr	r3, [pc, #308]	@ (3400e448 <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
3400e312:	429a      	cmp	r2, r3
3400e314:	d142      	bne.n	3400e39c <HAL_RCCEx_PeriphCLKConfig+0x49a8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400e316:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e31a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e31c:	2b00      	cmp	r3, #0
3400e31e:	d016      	beq.n	3400e34e <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e320:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e32a:	d010      	beq.n	3400e34e <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e32c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e336:	d00a      	beq.n	3400e34e <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e338:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e33c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e33e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e342:	d004      	beq.n	3400e34e <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e344:	f240 616b 	movw	r1, #1643	@ 0x66b
3400e348:	483a      	ldr	r0, [pc, #232]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e34a:	f7f3 fcab 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400e34e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e354:	2b00      	cmp	r3, #0
3400e356:	d005      	beq.n	3400e364 <HAL_RCCEx_PeriphCLKConfig+0x4970>
3400e358:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e35c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e35e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e362:	d904      	bls.n	3400e36e <HAL_RCCEx_PeriphCLKConfig+0x497a>
3400e364:	f240 616c 	movw	r1, #1644	@ 0x66c
3400e368:	4832      	ldr	r0, [pc, #200]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e36a:	f7f3 fc9b 	bl	34001ca4 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400e36e:	4b32      	ldr	r3, [pc, #200]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e374:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e378:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e37c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e380:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400e382:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e388:	3b01      	subs	r3, #1
3400e38a:	041b      	lsls	r3, r3, #16
3400e38c:	4313      	orrs	r3, r2
3400e38e:	4a2a      	ldr	r2, [pc, #168]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e390:	430b      	orrs	r3, r1
3400e392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400e396:	f7fb f80b 	bl	340093b0 <LL_RCC_IC8_Enable>
3400e39a:	e068      	b.n	3400e46e <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
3400e39c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3a0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e3a4:	4b29      	ldr	r3, [pc, #164]	@ (3400e44c <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
3400e3a6:	429a      	cmp	r2, r3
3400e3a8:	d158      	bne.n	3400e45c <HAL_RCCEx_PeriphCLKConfig+0x4a68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e3aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e3b0:	2b00      	cmp	r3, #0
3400e3b2:	d016      	beq.n	3400e3e2 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e3b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e3ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e3be:	d010      	beq.n	3400e3e2 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e3c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e3c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e3ca:	d00a      	beq.n	3400e3e2 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e3cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e3d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e3d6:	d004      	beq.n	3400e3e2 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e3d8:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
3400e3dc:	4815      	ldr	r0, [pc, #84]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e3de:	f7f3 fc61 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e3e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e3e8:	2b00      	cmp	r3, #0
3400e3ea:	d005      	beq.n	3400e3f8 <HAL_RCCEx_PeriphCLKConfig+0x4a04>
3400e3ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e3f6:	d904      	bls.n	3400e402 <HAL_RCCEx_PeriphCLKConfig+0x4a0e>
3400e3f8:	f240 6179 	movw	r1, #1657	@ 0x679
3400e3fc:	480d      	ldr	r0, [pc, #52]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e3fe:	f7f3 fc51 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e402:	4b0d      	ldr	r3, [pc, #52]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e404:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e408:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e40c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e410:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e414:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e416:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e41a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e41c:	3b01      	subs	r3, #1
3400e41e:	041b      	lsls	r3, r3, #16
3400e420:	4313      	orrs	r3, r2
3400e422:	4a05      	ldr	r2, [pc, #20]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e424:	430b      	orrs	r3, r1
3400e426:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e42a:	f7fb f801 	bl	34009430 <LL_RCC_IC9_Enable>
3400e42e:	e01e      	b.n	3400e46e <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
3400e430:	07030820 	.word	0x07030820
3400e434:	3401e910 	.word	0x3401e910
3400e438:	56028000 	.word	0x56028000
3400e43c:	07010820 	.word	0x07010820
3400e440:	07000c20 	.word	0x07000c20
3400e444:	07010c20 	.word	0x07010c20
3400e448:	07020c20 	.word	0x07020c20
3400e44c:	07030c20 	.word	0x07030c20
3400e450:	07040c20 	.word	0x07040c20
3400e454:	07050c20 	.word	0x07050c20
3400e458:	07060c20 	.word	0x07060c20
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
3400e45c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e460:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e464:	4b73      	ldr	r3, [pc, #460]	@ (3400e634 <HAL_RCCEx_PeriphCLKConfig+0x4c40>)
3400e466:	429a      	cmp	r2, r3
3400e468:	d101      	bne.n	3400e46e <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    {
      LL_RCC_CLKP_Enable();
3400e46a:	f7fb faa1 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
3400e46e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e472:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
3400e476:	4618      	mov	r0, r3
3400e478:	f7fa fa32 	bl	340088e0 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
3400e47c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e480:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e484:	2100      	movs	r1, #0
3400e486:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
3400e48a:	f003 0310 	and.w	r3, r3, #16
3400e48e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
3400e492:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
3400e496:	4603      	mov	r3, r0
3400e498:	460a      	mov	r2, r1
3400e49a:	4313      	orrs	r3, r2
3400e49c:	f000 80ee 	beq.w	3400e67c <HAL_RCCEx_PeriphCLKConfig+0x4c88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
3400e4a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4a4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4a8:	4b63      	ldr	r3, [pc, #396]	@ (3400e638 <HAL_RCCEx_PeriphCLKConfig+0x4c44>)
3400e4aa:	429a      	cmp	r2, r3
3400e4ac:	d02e      	beq.n	3400e50c <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4b2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4b6:	4b61      	ldr	r3, [pc, #388]	@ (3400e63c <HAL_RCCEx_PeriphCLKConfig+0x4c48>)
3400e4b8:	429a      	cmp	r2, r3
3400e4ba:	d027      	beq.n	3400e50c <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4c0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4c4:	4b5e      	ldr	r3, [pc, #376]	@ (3400e640 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
3400e4c6:	429a      	cmp	r2, r3
3400e4c8:	d020      	beq.n	3400e50c <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4ce:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4d2:	4b5c      	ldr	r3, [pc, #368]	@ (3400e644 <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
3400e4d4:	429a      	cmp	r2, r3
3400e4d6:	d019      	beq.n	3400e50c <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4dc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4e0:	4b59      	ldr	r3, [pc, #356]	@ (3400e648 <HAL_RCCEx_PeriphCLKConfig+0x4c54>)
3400e4e2:	429a      	cmp	r2, r3
3400e4e4:	d012      	beq.n	3400e50c <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4ea:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4ee:	4b57      	ldr	r3, [pc, #348]	@ (3400e64c <HAL_RCCEx_PeriphCLKConfig+0x4c58>)
3400e4f0:	429a      	cmp	r2, r3
3400e4f2:	d00b      	beq.n	3400e50c <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4fc:	4b54      	ldr	r3, [pc, #336]	@ (3400e650 <HAL_RCCEx_PeriphCLKConfig+0x4c5c>)
3400e4fe:	429a      	cmp	r2, r3
3400e500:	d004      	beq.n	3400e50c <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e502:	f240 6193 	movw	r1, #1683	@ 0x693
3400e506:	4853      	ldr	r0, [pc, #332]	@ (3400e654 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e508:	f7f3 fbcc 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
3400e50c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e510:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e514:	4b4a      	ldr	r3, [pc, #296]	@ (3400e640 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
3400e516:	429a      	cmp	r2, r3
3400e518:	d142      	bne.n	3400e5a0 <HAL_RCCEx_PeriphCLKConfig+0x4bac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e51a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e51e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e520:	2b00      	cmp	r3, #0
3400e522:	d016      	beq.n	3400e552 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e524:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e52a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e52e:	d010      	beq.n	3400e552 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e530:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e53a:	d00a      	beq.n	3400e552 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e53c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e542:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e546:	d004      	beq.n	3400e552 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e548:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
3400e54c:	4841      	ldr	r0, [pc, #260]	@ (3400e654 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e54e:	f7f3 fba9 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e552:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e558:	2b00      	cmp	r3, #0
3400e55a:	d005      	beq.n	3400e568 <HAL_RCCEx_PeriphCLKConfig+0x4b74>
3400e55c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e566:	d904      	bls.n	3400e572 <HAL_RCCEx_PeriphCLKConfig+0x4b7e>
3400e568:	f240 6199 	movw	r1, #1689	@ 0x699
3400e56c:	4839      	ldr	r0, [pc, #228]	@ (3400e654 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e56e:	f7f3 fb99 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e572:	4b39      	ldr	r3, [pc, #228]	@ (3400e658 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e574:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e578:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e57c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e580:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e586:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e58a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e58c:	3b01      	subs	r3, #1
3400e58e:	041b      	lsls	r3, r3, #16
3400e590:	4313      	orrs	r3, r2
3400e592:	4a31      	ldr	r2, [pc, #196]	@ (3400e658 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e594:	430b      	orrs	r3, r1
3400e596:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e59a:	f7fa ff49 	bl	34009430 <LL_RCC_IC9_Enable>
3400e59e:	e066      	b.n	3400e66e <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
3400e5a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5a4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e5a8:	4b26      	ldr	r3, [pc, #152]	@ (3400e644 <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
3400e5aa:	429a      	cmp	r2, r3
3400e5ac:	d156      	bne.n	3400e65c <HAL_RCCEx_PeriphCLKConfig+0x4c68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e5ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e5b4:	2b00      	cmp	r3, #0
3400e5b6:	d016      	beq.n	3400e5e6 <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e5b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e5be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e5c2:	d010      	beq.n	3400e5e6 <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e5c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e5ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e5ce:	d00a      	beq.n	3400e5e6 <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e5d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e5d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e5da:	d004      	beq.n	3400e5e6 <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e5dc:	f240 61a5 	movw	r1, #1701	@ 0x6a5
3400e5e0:	481c      	ldr	r0, [pc, #112]	@ (3400e654 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e5e2:	f7f3 fb5f 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e5e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e5ec:	2b00      	cmp	r3, #0
3400e5ee:	d005      	beq.n	3400e5fc <HAL_RCCEx_PeriphCLKConfig+0x4c08>
3400e5f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e5f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e5fa:	d904      	bls.n	3400e606 <HAL_RCCEx_PeriphCLKConfig+0x4c12>
3400e5fc:	f240 61a6 	movw	r1, #1702	@ 0x6a6
3400e600:	4814      	ldr	r0, [pc, #80]	@ (3400e654 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e602:	f7f3 fb4f 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e606:	4b14      	ldr	r3, [pc, #80]	@ (3400e658 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e608:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e60c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e610:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e614:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e618:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e61a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e61e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e620:	3b01      	subs	r3, #1
3400e622:	041b      	lsls	r3, r3, #16
3400e624:	4313      	orrs	r3, r2
3400e626:	4a0c      	ldr	r2, [pc, #48]	@ (3400e658 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e628:	430b      	orrs	r3, r1
3400e62a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400e62e:	f7fa ffff 	bl	34009630 <LL_RCC_IC14_Enable>
3400e632:	e01c      	b.n	3400e66e <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
3400e634:	07010c20 	.word	0x07010c20
3400e638:	07001020 	.word	0x07001020
3400e63c:	07011020 	.word	0x07011020
3400e640:	07021020 	.word	0x07021020
3400e644:	07031020 	.word	0x07031020
3400e648:	07041020 	.word	0x07041020
3400e64c:	07051020 	.word	0x07051020
3400e650:	07061020 	.word	0x07061020
3400e654:	3401e910 	.word	0x3401e910
3400e658:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
3400e65c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e660:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e664:	4b73      	ldr	r3, [pc, #460]	@ (3400e834 <HAL_RCCEx_PeriphCLKConfig+0x4e40>)
3400e666:	429a      	cmp	r2, r3
3400e668:	d101      	bne.n	3400e66e <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    {
      LL_RCC_CLKP_Enable();
3400e66a:	f7fb f9a1 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
3400e66e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e672:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
3400e676:	4618      	mov	r0, r3
3400e678:	f7fa f932 	bl	340088e0 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3400e67c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e680:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e684:	2100      	movs	r1, #0
3400e686:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
3400e68a:	f003 0320 	and.w	r3, r3, #32
3400e68e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
3400e692:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
3400e696:	4603      	mov	r3, r0
3400e698:	460a      	mov	r2, r1
3400e69a:	4313      	orrs	r3, r2
3400e69c:	f000 80ee 	beq.w	3400e87c <HAL_RCCEx_PeriphCLKConfig+0x4e88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
3400e6a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6a4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6a8:	4b63      	ldr	r3, [pc, #396]	@ (3400e838 <HAL_RCCEx_PeriphCLKConfig+0x4e44>)
3400e6aa:	429a      	cmp	r2, r3
3400e6ac:	d02e      	beq.n	3400e70c <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6b2:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6b6:	4b61      	ldr	r3, [pc, #388]	@ (3400e83c <HAL_RCCEx_PeriphCLKConfig+0x4e48>)
3400e6b8:	429a      	cmp	r2, r3
3400e6ba:	d027      	beq.n	3400e70c <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6c0:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6c4:	4b5e      	ldr	r3, [pc, #376]	@ (3400e840 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
3400e6c6:	429a      	cmp	r2, r3
3400e6c8:	d020      	beq.n	3400e70c <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6ce:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6d2:	4b5c      	ldr	r3, [pc, #368]	@ (3400e844 <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
3400e6d4:	429a      	cmp	r2, r3
3400e6d6:	d019      	beq.n	3400e70c <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6dc:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6e0:	4b59      	ldr	r3, [pc, #356]	@ (3400e848 <HAL_RCCEx_PeriphCLKConfig+0x4e54>)
3400e6e2:	429a      	cmp	r2, r3
3400e6e4:	d012      	beq.n	3400e70c <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6ea:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6ee:	4b57      	ldr	r3, [pc, #348]	@ (3400e84c <HAL_RCCEx_PeriphCLKConfig+0x4e58>)
3400e6f0:	429a      	cmp	r2, r3
3400e6f2:	d00b      	beq.n	3400e70c <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6f8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6fc:	4b54      	ldr	r3, [pc, #336]	@ (3400e850 <HAL_RCCEx_PeriphCLKConfig+0x4e5c>)
3400e6fe:	429a      	cmp	r2, r3
3400e700:	d004      	beq.n	3400e70c <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e702:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
3400e706:	4853      	ldr	r0, [pc, #332]	@ (3400e854 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e708:	f7f3 facc 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
3400e70c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e710:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e714:	4b4a      	ldr	r3, [pc, #296]	@ (3400e840 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
3400e716:	429a      	cmp	r2, r3
3400e718:	d142      	bne.n	3400e7a0 <HAL_RCCEx_PeriphCLKConfig+0x4dac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e71a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e71e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e720:	2b00      	cmp	r3, #0
3400e722:	d016      	beq.n	3400e752 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e724:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e72a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e72e:	d010      	beq.n	3400e752 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e730:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e73a:	d00a      	beq.n	3400e752 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e73c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e742:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e746:	d004      	beq.n	3400e752 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e748:	f240 61c5 	movw	r1, #1733	@ 0x6c5
3400e74c:	4841      	ldr	r0, [pc, #260]	@ (3400e854 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e74e:	f7f3 faa9 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e752:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e758:	2b00      	cmp	r3, #0
3400e75a:	d005      	beq.n	3400e768 <HAL_RCCEx_PeriphCLKConfig+0x4d74>
3400e75c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e766:	d904      	bls.n	3400e772 <HAL_RCCEx_PeriphCLKConfig+0x4d7e>
3400e768:	f240 61c6 	movw	r1, #1734	@ 0x6c6
3400e76c:	4839      	ldr	r0, [pc, #228]	@ (3400e854 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e76e:	f7f3 fa99 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e772:	4b39      	ldr	r3, [pc, #228]	@ (3400e858 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e778:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e77c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e780:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e784:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e786:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e78a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e78c:	3b01      	subs	r3, #1
3400e78e:	041b      	lsls	r3, r3, #16
3400e790:	4313      	orrs	r3, r2
3400e792:	4a31      	ldr	r2, [pc, #196]	@ (3400e858 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e794:	430b      	orrs	r3, r1
3400e796:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e79a:	f7fa fe49 	bl	34009430 <LL_RCC_IC9_Enable>
3400e79e:	e066      	b.n	3400e86e <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
3400e7a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7a4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e7a8:	4b26      	ldr	r3, [pc, #152]	@ (3400e844 <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
3400e7aa:	429a      	cmp	r2, r3
3400e7ac:	d156      	bne.n	3400e85c <HAL_RCCEx_PeriphCLKConfig+0x4e68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e7ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e7b4:	2b00      	cmp	r3, #0
3400e7b6:	d016      	beq.n	3400e7e6 <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e7b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e7be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e7c2:	d010      	beq.n	3400e7e6 <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e7c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e7ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e7ce:	d00a      	beq.n	3400e7e6 <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e7d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e7d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e7da:	d004      	beq.n	3400e7e6 <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e7dc:	f240 61d2 	movw	r1, #1746	@ 0x6d2
3400e7e0:	481c      	ldr	r0, [pc, #112]	@ (3400e854 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e7e2:	f7f3 fa5f 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e7e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e7ec:	2b00      	cmp	r3, #0
3400e7ee:	d005      	beq.n	3400e7fc <HAL_RCCEx_PeriphCLKConfig+0x4e08>
3400e7f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e7f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e7fa:	d904      	bls.n	3400e806 <HAL_RCCEx_PeriphCLKConfig+0x4e12>
3400e7fc:	f240 61d3 	movw	r1, #1747	@ 0x6d3
3400e800:	4814      	ldr	r0, [pc, #80]	@ (3400e854 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e802:	f7f3 fa4f 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e806:	4b14      	ldr	r3, [pc, #80]	@ (3400e858 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e808:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e80c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e810:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e814:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e818:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e81a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e81e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e820:	3b01      	subs	r3, #1
3400e822:	041b      	lsls	r3, r3, #16
3400e824:	4313      	orrs	r3, r2
3400e826:	4a0c      	ldr	r2, [pc, #48]	@ (3400e858 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e828:	430b      	orrs	r3, r1
3400e82a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400e82e:	f7fa feff 	bl	34009630 <LL_RCC_IC14_Enable>
3400e832:	e01c      	b.n	3400e86e <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
3400e834:	07011020 	.word	0x07011020
3400e838:	07001420 	.word	0x07001420
3400e83c:	07011420 	.word	0x07011420
3400e840:	07021420 	.word	0x07021420
3400e844:	07031420 	.word	0x07031420
3400e848:	07041420 	.word	0x07041420
3400e84c:	07051420 	.word	0x07051420
3400e850:	07061420 	.word	0x07061420
3400e854:	3401e910 	.word	0x3401e910
3400e858:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
3400e85c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e860:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e864:	4b72      	ldr	r3, [pc, #456]	@ (3400ea30 <HAL_RCCEx_PeriphCLKConfig+0x503c>)
3400e866:	429a      	cmp	r2, r3
3400e868:	d101      	bne.n	3400e86e <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    {
      LL_RCC_CLKP_Enable();
3400e86a:	f7fb f8a1 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
3400e86e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e872:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400e876:	4618      	mov	r0, r3
3400e878:	f7fa f832 	bl	340088e0 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
3400e87c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e880:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e884:	2100      	movs	r1, #0
3400e886:	67b9      	str	r1, [r7, #120]	@ 0x78
3400e888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400e88c:	67fb      	str	r3, [r7, #124]	@ 0x7c
3400e88e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
3400e892:	4603      	mov	r3, r0
3400e894:	460a      	mov	r2, r1
3400e896:	4313      	orrs	r3, r2
3400e898:	f000 80ee 	beq.w	3400ea78 <HAL_RCCEx_PeriphCLKConfig+0x5084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
3400e89c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8a0:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8a4:	4b63      	ldr	r3, [pc, #396]	@ (3400ea34 <HAL_RCCEx_PeriphCLKConfig+0x5040>)
3400e8a6:	429a      	cmp	r2, r3
3400e8a8:	d02e      	beq.n	3400e908 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8ae:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8b2:	4b61      	ldr	r3, [pc, #388]	@ (3400ea38 <HAL_RCCEx_PeriphCLKConfig+0x5044>)
3400e8b4:	429a      	cmp	r2, r3
3400e8b6:	d027      	beq.n	3400e908 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8bc:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8c0:	4b5e      	ldr	r3, [pc, #376]	@ (3400ea3c <HAL_RCCEx_PeriphCLKConfig+0x5048>)
3400e8c2:	429a      	cmp	r2, r3
3400e8c4:	d020      	beq.n	3400e908 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8ca:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8ce:	4b5c      	ldr	r3, [pc, #368]	@ (3400ea40 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
3400e8d0:	429a      	cmp	r2, r3
3400e8d2:	d019      	beq.n	3400e908 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8d8:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8dc:	4b59      	ldr	r3, [pc, #356]	@ (3400ea44 <HAL_RCCEx_PeriphCLKConfig+0x5050>)
3400e8de:	429a      	cmp	r2, r3
3400e8e0:	d012      	beq.n	3400e908 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8e6:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8ea:	4b57      	ldr	r3, [pc, #348]	@ (3400ea48 <HAL_RCCEx_PeriphCLKConfig+0x5054>)
3400e8ec:	429a      	cmp	r2, r3
3400e8ee:	d00b      	beq.n	3400e908 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8f4:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8f8:	4b54      	ldr	r3, [pc, #336]	@ (3400ea4c <HAL_RCCEx_PeriphCLKConfig+0x5058>)
3400e8fa:	429a      	cmp	r2, r3
3400e8fc:	d004      	beq.n	3400e908 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8fe:	f240 61ed 	movw	r1, #1773	@ 0x6ed
3400e902:	4853      	ldr	r0, [pc, #332]	@ (3400ea50 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e904:	f7f3 f9ce 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3400e908:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e90c:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e910:	4b4a      	ldr	r3, [pc, #296]	@ (3400ea3c <HAL_RCCEx_PeriphCLKConfig+0x5048>)
3400e912:	429a      	cmp	r2, r3
3400e914:	d142      	bne.n	3400e99c <HAL_RCCEx_PeriphCLKConfig+0x4fa8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400e916:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e91a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e91c:	2b00      	cmp	r3, #0
3400e91e:	d016      	beq.n	3400e94e <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e920:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e92a:	d010      	beq.n	3400e94e <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e92c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e936:	d00a      	beq.n	3400e94e <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e938:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e93e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e942:	d004      	beq.n	3400e94e <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e944:	f240 61f2 	movw	r1, #1778	@ 0x6f2
3400e948:	4841      	ldr	r0, [pc, #260]	@ (3400ea50 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e94a:	f7f3 f9ab 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400e94e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e954:	2b00      	cmp	r3, #0
3400e956:	d005      	beq.n	3400e964 <HAL_RCCEx_PeriphCLKConfig+0x4f70>
3400e958:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e95e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e962:	d904      	bls.n	3400e96e <HAL_RCCEx_PeriphCLKConfig+0x4f7a>
3400e964:	f240 61f3 	movw	r1, #1779	@ 0x6f3
3400e968:	4839      	ldr	r0, [pc, #228]	@ (3400ea50 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e96a:	f7f3 f99b 	bl	34001ca4 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400e96e:	4b39      	ldr	r3, [pc, #228]	@ (3400ea54 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e974:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e978:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e97c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e980:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400e982:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e988:	3b01      	subs	r3, #1
3400e98a:	041b      	lsls	r3, r3, #16
3400e98c:	4313      	orrs	r3, r2
3400e98e:	4a31      	ldr	r2, [pc, #196]	@ (3400ea54 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e990:	430b      	orrs	r3, r1
3400e992:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400e996:	f7fa fd0b 	bl	340093b0 <LL_RCC_IC8_Enable>
3400e99a:	e066      	b.n	3400ea6a <HAL_RCCEx_PeriphCLKConfig+0x5076>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
3400e99c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9a0:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e9a4:	4b26      	ldr	r3, [pc, #152]	@ (3400ea40 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
3400e9a6:	429a      	cmp	r2, r3
3400e9a8:	d156      	bne.n	3400ea58 <HAL_RCCEx_PeriphCLKConfig+0x5064>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e9aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e9b0:	2b00      	cmp	r3, #0
3400e9b2:	d016      	beq.n	3400e9e2 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e9b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e9ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e9be:	d010      	beq.n	3400e9e2 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e9c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e9c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e9ca:	d00a      	beq.n	3400e9e2 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e9cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e9d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e9d6:	d004      	beq.n	3400e9e2 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e9d8:	f240 61ff 	movw	r1, #1791	@ 0x6ff
3400e9dc:	481c      	ldr	r0, [pc, #112]	@ (3400ea50 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e9de:	f7f3 f961 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e9e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e9e8:	2b00      	cmp	r3, #0
3400e9ea:	d005      	beq.n	3400e9f8 <HAL_RCCEx_PeriphCLKConfig+0x5004>
3400e9ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e9f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e9f6:	d904      	bls.n	3400ea02 <HAL_RCCEx_PeriphCLKConfig+0x500e>
3400e9f8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
3400e9fc:	4814      	ldr	r0, [pc, #80]	@ (3400ea50 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e9fe:	f7f3 f951 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ea02:	4b14      	ldr	r3, [pc, #80]	@ (3400ea54 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400ea04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ea08:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ea0c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ea10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ea16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ea1c:	3b01      	subs	r3, #1
3400ea1e:	041b      	lsls	r3, r3, #16
3400ea20:	4313      	orrs	r3, r2
3400ea22:	4a0c      	ldr	r2, [pc, #48]	@ (3400ea54 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400ea24:	430b      	orrs	r3, r1
3400ea26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ea2a:	f7fa fd01 	bl	34009430 <LL_RCC_IC9_Enable>
3400ea2e:	e01c      	b.n	3400ea6a <HAL_RCCEx_PeriphCLKConfig+0x5076>
3400ea30:	07011420 	.word	0x07011420
3400ea34:	07001820 	.word	0x07001820
3400ea38:	07011820 	.word	0x07011820
3400ea3c:	07021820 	.word	0x07021820
3400ea40:	07031820 	.word	0x07031820
3400ea44:	07041820 	.word	0x07041820
3400ea48:	07051820 	.word	0x07051820
3400ea4c:	07061820 	.word	0x07061820
3400ea50:	3401e910 	.word	0x3401e910
3400ea54:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
3400ea58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea5c:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400ea60:	4b72      	ldr	r3, [pc, #456]	@ (3400ec2c <HAL_RCCEx_PeriphCLKConfig+0x5238>)
3400ea62:	429a      	cmp	r2, r3
3400ea64:	d101      	bne.n	3400ea6a <HAL_RCCEx_PeriphCLKConfig+0x5076>
    {
      LL_RCC_CLKP_Enable();
3400ea66:	f7fa ffa3 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
3400ea6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea6e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400ea72:	4618      	mov	r0, r3
3400ea74:	f7f9 ff34 	bl	340088e0 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
3400ea78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea7c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ea80:	2100      	movs	r1, #0
3400ea82:	6739      	str	r1, [r7, #112]	@ 0x70
3400ea84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400ea88:	677b      	str	r3, [r7, #116]	@ 0x74
3400ea8a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
3400ea8e:	4603      	mov	r3, r0
3400ea90:	460a      	mov	r2, r1
3400ea92:	4313      	orrs	r3, r2
3400ea94:	f000 80ee 	beq.w	3400ec74 <HAL_RCCEx_PeriphCLKConfig+0x5280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
3400ea98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea9c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eaa0:	4b63      	ldr	r3, [pc, #396]	@ (3400ec30 <HAL_RCCEx_PeriphCLKConfig+0x523c>)
3400eaa2:	429a      	cmp	r2, r3
3400eaa4:	d02e      	beq.n	3400eb04 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eaa6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eaaa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eaae:	4b61      	ldr	r3, [pc, #388]	@ (3400ec34 <HAL_RCCEx_PeriphCLKConfig+0x5240>)
3400eab0:	429a      	cmp	r2, r3
3400eab2:	d027      	beq.n	3400eb04 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eab4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eab8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eabc:	4b5e      	ldr	r3, [pc, #376]	@ (3400ec38 <HAL_RCCEx_PeriphCLKConfig+0x5244>)
3400eabe:	429a      	cmp	r2, r3
3400eac0:	d020      	beq.n	3400eb04 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eac2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eac6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eaca:	4b5c      	ldr	r3, [pc, #368]	@ (3400ec3c <HAL_RCCEx_PeriphCLKConfig+0x5248>)
3400eacc:	429a      	cmp	r2, r3
3400eace:	d019      	beq.n	3400eb04 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400ead0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ead4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400ead8:	4b59      	ldr	r3, [pc, #356]	@ (3400ec40 <HAL_RCCEx_PeriphCLKConfig+0x524c>)
3400eada:	429a      	cmp	r2, r3
3400eadc:	d012      	beq.n	3400eb04 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eade:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eae2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eae6:	4b57      	ldr	r3, [pc, #348]	@ (3400ec44 <HAL_RCCEx_PeriphCLKConfig+0x5250>)
3400eae8:	429a      	cmp	r2, r3
3400eaea:	d00b      	beq.n	3400eb04 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eaec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eaf0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eaf4:	4b54      	ldr	r3, [pc, #336]	@ (3400ec48 <HAL_RCCEx_PeriphCLKConfig+0x5254>)
3400eaf6:	429a      	cmp	r2, r3
3400eaf8:	d004      	beq.n	3400eb04 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eafa:	f240 711a 	movw	r1, #1818	@ 0x71a
3400eafe:	4853      	ldr	r0, [pc, #332]	@ (3400ec4c <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400eb00:	f7f3 f8d0 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
3400eb04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb08:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eb0c:	4b4a      	ldr	r3, [pc, #296]	@ (3400ec38 <HAL_RCCEx_PeriphCLKConfig+0x5244>)
3400eb0e:	429a      	cmp	r2, r3
3400eb10:	d142      	bne.n	3400eb98 <HAL_RCCEx_PeriphCLKConfig+0x51a4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400eb12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eb18:	2b00      	cmp	r3, #0
3400eb1a:	d016      	beq.n	3400eb4a <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400eb1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eb22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400eb26:	d010      	beq.n	3400eb4a <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400eb28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eb2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400eb32:	d00a      	beq.n	3400eb4a <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400eb34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eb3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400eb3e:	d004      	beq.n	3400eb4a <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400eb40:	f240 711f 	movw	r1, #1823	@ 0x71f
3400eb44:	4841      	ldr	r0, [pc, #260]	@ (3400ec4c <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400eb46:	f7f3 f8ad 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400eb4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400eb50:	2b00      	cmp	r3, #0
3400eb52:	d005      	beq.n	3400eb60 <HAL_RCCEx_PeriphCLKConfig+0x516c>
3400eb54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400eb5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400eb5e:	d904      	bls.n	3400eb6a <HAL_RCCEx_PeriphCLKConfig+0x5176>
3400eb60:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
3400eb64:	4839      	ldr	r0, [pc, #228]	@ (3400ec4c <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400eb66:	f7f3 f89d 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400eb6a:	4b39      	ldr	r3, [pc, #228]	@ (3400ec50 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400eb6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400eb70:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400eb74:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400eb78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400eb7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400eb84:	3b01      	subs	r3, #1
3400eb86:	041b      	lsls	r3, r3, #16
3400eb88:	4313      	orrs	r3, r2
3400eb8a:	4a31      	ldr	r2, [pc, #196]	@ (3400ec50 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400eb8c:	430b      	orrs	r3, r1
3400eb8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400eb92:	f7fa fc4d 	bl	34009430 <LL_RCC_IC9_Enable>
3400eb96:	e066      	b.n	3400ec66 <HAL_RCCEx_PeriphCLKConfig+0x5272>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
3400eb98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb9c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eba0:	4b26      	ldr	r3, [pc, #152]	@ (3400ec3c <HAL_RCCEx_PeriphCLKConfig+0x5248>)
3400eba2:	429a      	cmp	r2, r3
3400eba4:	d156      	bne.n	3400ec54 <HAL_RCCEx_PeriphCLKConfig+0x5260>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400eba6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ebac:	2b00      	cmp	r3, #0
3400ebae:	d016      	beq.n	3400ebde <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400ebb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ebb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ebba:	d010      	beq.n	3400ebde <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400ebbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ebc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ebc6:	d00a      	beq.n	3400ebde <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400ebc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ebce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ebd2:	d004      	beq.n	3400ebde <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400ebd4:	f240 712c 	movw	r1, #1836	@ 0x72c
3400ebd8:	481c      	ldr	r0, [pc, #112]	@ (3400ec4c <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400ebda:	f7f3 f863 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400ebde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ebe4:	2b00      	cmp	r3, #0
3400ebe6:	d005      	beq.n	3400ebf4 <HAL_RCCEx_PeriphCLKConfig+0x5200>
3400ebe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ebee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ebf2:	d904      	bls.n	3400ebfe <HAL_RCCEx_PeriphCLKConfig+0x520a>
3400ebf4:	f240 712d 	movw	r1, #1837	@ 0x72d
3400ebf8:	4814      	ldr	r0, [pc, #80]	@ (3400ec4c <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400ebfa:	f7f3 f853 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400ebfe:	4b14      	ldr	r3, [pc, #80]	@ (3400ec50 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400ec00:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400ec04:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ec08:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ec0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400ec12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ec18:	3b01      	subs	r3, #1
3400ec1a:	041b      	lsls	r3, r3, #16
3400ec1c:	4313      	orrs	r3, r2
3400ec1e:	4a0c      	ldr	r2, [pc, #48]	@ (3400ec50 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400ec20:	430b      	orrs	r3, r1
3400ec22:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400ec26:	f7fa fd03 	bl	34009630 <LL_RCC_IC14_Enable>
3400ec2a:	e01c      	b.n	3400ec66 <HAL_RCCEx_PeriphCLKConfig+0x5272>
3400ec2c:	07011820 	.word	0x07011820
3400ec30:	07000030 	.word	0x07000030
3400ec34:	07010030 	.word	0x07010030
3400ec38:	07020030 	.word	0x07020030
3400ec3c:	07030030 	.word	0x07030030
3400ec40:	07040030 	.word	0x07040030
3400ec44:	07050030 	.word	0x07050030
3400ec48:	07060030 	.word	0x07060030
3400ec4c:	3401e910 	.word	0x3401e910
3400ec50:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
3400ec54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec58:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400ec5c:	4b72      	ldr	r3, [pc, #456]	@ (3400ee28 <HAL_RCCEx_PeriphCLKConfig+0x5434>)
3400ec5e:	429a      	cmp	r2, r3
3400ec60:	d101      	bne.n	3400ec66 <HAL_RCCEx_PeriphCLKConfig+0x5272>
    {
      LL_RCC_CLKP_Enable();
3400ec62:	f7fa fea5 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
3400ec66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec6a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3400ec6e:	4618      	mov	r0, r3
3400ec70:	f7f9 fe41 	bl	340088f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
3400ec74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec78:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ec7c:	2100      	movs	r1, #0
3400ec7e:	66b9      	str	r1, [r7, #104]	@ 0x68
3400ec80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400ec84:	66fb      	str	r3, [r7, #108]	@ 0x6c
3400ec86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
3400ec8a:	4603      	mov	r3, r0
3400ec8c:	460a      	mov	r2, r1
3400ec8e:	4313      	orrs	r3, r2
3400ec90:	f000 80ee 	beq.w	3400ee70 <HAL_RCCEx_PeriphCLKConfig+0x547c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
3400ec94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec98:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ec9c:	4b63      	ldr	r3, [pc, #396]	@ (3400ee2c <HAL_RCCEx_PeriphCLKConfig+0x5438>)
3400ec9e:	429a      	cmp	r2, r3
3400eca0:	d02e      	beq.n	3400ed00 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400eca2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eca6:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ecaa:	4b61      	ldr	r3, [pc, #388]	@ (3400ee30 <HAL_RCCEx_PeriphCLKConfig+0x543c>)
3400ecac:	429a      	cmp	r2, r3
3400ecae:	d027      	beq.n	3400ed00 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ecb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecb4:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ecb8:	4b5e      	ldr	r3, [pc, #376]	@ (3400ee34 <HAL_RCCEx_PeriphCLKConfig+0x5440>)
3400ecba:	429a      	cmp	r2, r3
3400ecbc:	d020      	beq.n	3400ed00 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ecbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecc2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ecc6:	4b5c      	ldr	r3, [pc, #368]	@ (3400ee38 <HAL_RCCEx_PeriphCLKConfig+0x5444>)
3400ecc8:	429a      	cmp	r2, r3
3400ecca:	d019      	beq.n	3400ed00 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400eccc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecd0:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ecd4:	4b59      	ldr	r3, [pc, #356]	@ (3400ee3c <HAL_RCCEx_PeriphCLKConfig+0x5448>)
3400ecd6:	429a      	cmp	r2, r3
3400ecd8:	d012      	beq.n	3400ed00 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ecda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecde:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ece2:	4b57      	ldr	r3, [pc, #348]	@ (3400ee40 <HAL_RCCEx_PeriphCLKConfig+0x544c>)
3400ece4:	429a      	cmp	r2, r3
3400ece6:	d00b      	beq.n	3400ed00 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ece8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecec:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ecf0:	4b54      	ldr	r3, [pc, #336]	@ (3400ee44 <HAL_RCCEx_PeriphCLKConfig+0x5450>)
3400ecf2:	429a      	cmp	r2, r3
3400ecf4:	d004      	beq.n	3400ed00 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ecf6:	f240 7147 	movw	r1, #1863	@ 0x747
3400ecfa:	4853      	ldr	r0, [pc, #332]	@ (3400ee48 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400ecfc:	f7f2 ffd2 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
3400ed00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed04:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ed08:	4b4a      	ldr	r3, [pc, #296]	@ (3400ee34 <HAL_RCCEx_PeriphCLKConfig+0x5440>)
3400ed0a:	429a      	cmp	r2, r3
3400ed0c:	d142      	bne.n	3400ed94 <HAL_RCCEx_PeriphCLKConfig+0x53a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400ed0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ed14:	2b00      	cmp	r3, #0
3400ed16:	d016      	beq.n	3400ed46 <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400ed18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ed1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ed22:	d010      	beq.n	3400ed46 <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400ed24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ed2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ed2e:	d00a      	beq.n	3400ed46 <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400ed30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ed36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ed3a:	d004      	beq.n	3400ed46 <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400ed3c:	f240 714c 	movw	r1, #1868	@ 0x74c
3400ed40:	4841      	ldr	r0, [pc, #260]	@ (3400ee48 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400ed42:	f7f2 ffaf 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400ed46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ed4c:	2b00      	cmp	r3, #0
3400ed4e:	d005      	beq.n	3400ed5c <HAL_RCCEx_PeriphCLKConfig+0x5368>
3400ed50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ed56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ed5a:	d904      	bls.n	3400ed66 <HAL_RCCEx_PeriphCLKConfig+0x5372>
3400ed5c:	f240 714d 	movw	r1, #1869	@ 0x74d
3400ed60:	4839      	ldr	r0, [pc, #228]	@ (3400ee48 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400ed62:	f7f2 ff9f 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ed66:	4b39      	ldr	r3, [pc, #228]	@ (3400ee4c <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400ed68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ed6c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ed70:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ed74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ed7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ed80:	3b01      	subs	r3, #1
3400ed82:	041b      	lsls	r3, r3, #16
3400ed84:	4313      	orrs	r3, r2
3400ed86:	4a31      	ldr	r2, [pc, #196]	@ (3400ee4c <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400ed88:	430b      	orrs	r3, r1
3400ed8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ed8e:	f7fa fb4f 	bl	34009430 <LL_RCC_IC9_Enable>
3400ed92:	e066      	b.n	3400ee62 <HAL_RCCEx_PeriphCLKConfig+0x546e>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
3400ed94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed98:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ed9c:	4b26      	ldr	r3, [pc, #152]	@ (3400ee38 <HAL_RCCEx_PeriphCLKConfig+0x5444>)
3400ed9e:	429a      	cmp	r2, r3
3400eda0:	d156      	bne.n	3400ee50 <HAL_RCCEx_PeriphCLKConfig+0x545c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400eda2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eda6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eda8:	2b00      	cmp	r3, #0
3400edaa:	d016      	beq.n	3400edda <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400edac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400edb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400edb6:	d010      	beq.n	3400edda <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400edb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400edbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400edc2:	d00a      	beq.n	3400edda <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400edc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400edca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400edce:	d004      	beq.n	3400edda <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400edd0:	f240 7159 	movw	r1, #1881	@ 0x759
3400edd4:	481c      	ldr	r0, [pc, #112]	@ (3400ee48 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400edd6:	f7f2 ff65 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400edda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ede0:	2b00      	cmp	r3, #0
3400ede2:	d005      	beq.n	3400edf0 <HAL_RCCEx_PeriphCLKConfig+0x53fc>
3400ede4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ede8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400edea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400edee:	d904      	bls.n	3400edfa <HAL_RCCEx_PeriphCLKConfig+0x5406>
3400edf0:	f240 715a 	movw	r1, #1882	@ 0x75a
3400edf4:	4814      	ldr	r0, [pc, #80]	@ (3400ee48 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400edf6:	f7f2 ff55 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400edfa:	4b14      	ldr	r3, [pc, #80]	@ (3400ee4c <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400edfc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400ee00:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ee04:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ee08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400ee0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ee14:	3b01      	subs	r3, #1
3400ee16:	041b      	lsls	r3, r3, #16
3400ee18:	4313      	orrs	r3, r2
3400ee1a:	4a0c      	ldr	r2, [pc, #48]	@ (3400ee4c <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400ee1c:	430b      	orrs	r3, r1
3400ee1e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400ee22:	f7fa fc05 	bl	34009630 <LL_RCC_IC14_Enable>
3400ee26:	e01c      	b.n	3400ee62 <HAL_RCCEx_PeriphCLKConfig+0x546e>
3400ee28:	07010030 	.word	0x07010030
3400ee2c:	07000430 	.word	0x07000430
3400ee30:	07010430 	.word	0x07010430
3400ee34:	07020430 	.word	0x07020430
3400ee38:	07030430 	.word	0x07030430
3400ee3c:	07040430 	.word	0x07040430
3400ee40:	07050430 	.word	0x07050430
3400ee44:	07060430 	.word	0x07060430
3400ee48:	3401e910 	.word	0x3401e910
3400ee4c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
3400ee50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee54:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ee58:	4b72      	ldr	r3, [pc, #456]	@ (3400f024 <HAL_RCCEx_PeriphCLKConfig+0x5630>)
3400ee5a:	429a      	cmp	r2, r3
3400ee5c:	d101      	bne.n	3400ee62 <HAL_RCCEx_PeriphCLKConfig+0x546e>
    {
      LL_RCC_CLKP_Enable();
3400ee5e:	f7fa fda7 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
3400ee62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee66:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3400ee6a:	4618      	mov	r0, r3
3400ee6c:	f7f9 fd43 	bl	340088f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
3400ee70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee74:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ee78:	2100      	movs	r1, #0
3400ee7a:	6639      	str	r1, [r7, #96]	@ 0x60
3400ee7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400ee80:	667b      	str	r3, [r7, #100]	@ 0x64
3400ee82:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
3400ee86:	4603      	mov	r3, r0
3400ee88:	460a      	mov	r2, r1
3400ee8a:	4313      	orrs	r3, r2
3400ee8c:	f000 80ee 	beq.w	3400f06c <HAL_RCCEx_PeriphCLKConfig+0x5678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
3400ee90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee94:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ee98:	4b63      	ldr	r3, [pc, #396]	@ (3400f028 <HAL_RCCEx_PeriphCLKConfig+0x5634>)
3400ee9a:	429a      	cmp	r2, r3
3400ee9c:	d02e      	beq.n	3400eefc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400ee9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eea2:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eea6:	4b61      	ldr	r3, [pc, #388]	@ (3400f02c <HAL_RCCEx_PeriphCLKConfig+0x5638>)
3400eea8:	429a      	cmp	r2, r3
3400eeaa:	d027      	beq.n	3400eefc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eeac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eeb0:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eeb4:	4b5e      	ldr	r3, [pc, #376]	@ (3400f030 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
3400eeb6:	429a      	cmp	r2, r3
3400eeb8:	d020      	beq.n	3400eefc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eeba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eebe:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eec2:	4b5c      	ldr	r3, [pc, #368]	@ (3400f034 <HAL_RCCEx_PeriphCLKConfig+0x5640>)
3400eec4:	429a      	cmp	r2, r3
3400eec6:	d019      	beq.n	3400eefc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eec8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eecc:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eed0:	4b59      	ldr	r3, [pc, #356]	@ (3400f038 <HAL_RCCEx_PeriphCLKConfig+0x5644>)
3400eed2:	429a      	cmp	r2, r3
3400eed4:	d012      	beq.n	3400eefc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eed6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eeda:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eede:	4b57      	ldr	r3, [pc, #348]	@ (3400f03c <HAL_RCCEx_PeriphCLKConfig+0x5648>)
3400eee0:	429a      	cmp	r2, r3
3400eee2:	d00b      	beq.n	3400eefc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eee4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eee8:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eeec:	4b54      	ldr	r3, [pc, #336]	@ (3400f040 <HAL_RCCEx_PeriphCLKConfig+0x564c>)
3400eeee:	429a      	cmp	r2, r3
3400eef0:	d004      	beq.n	3400eefc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eef2:	f240 7174 	movw	r1, #1908	@ 0x774
3400eef6:	4853      	ldr	r0, [pc, #332]	@ (3400f044 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400eef8:	f7f2 fed4 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
3400eefc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef00:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ef04:	4b4a      	ldr	r3, [pc, #296]	@ (3400f030 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
3400ef06:	429a      	cmp	r2, r3
3400ef08:	d142      	bne.n	3400ef90 <HAL_RCCEx_PeriphCLKConfig+0x559c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400ef0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ef10:	2b00      	cmp	r3, #0
3400ef12:	d016      	beq.n	3400ef42 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ef14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ef1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ef1e:	d010      	beq.n	3400ef42 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ef20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ef26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ef2a:	d00a      	beq.n	3400ef42 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ef2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ef32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ef36:	d004      	beq.n	3400ef42 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ef38:	f240 7179 	movw	r1, #1913	@ 0x779
3400ef3c:	4841      	ldr	r0, [pc, #260]	@ (3400f044 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400ef3e:	f7f2 feb1 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400ef42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ef48:	2b00      	cmp	r3, #0
3400ef4a:	d005      	beq.n	3400ef58 <HAL_RCCEx_PeriphCLKConfig+0x5564>
3400ef4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ef52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ef56:	d904      	bls.n	3400ef62 <HAL_RCCEx_PeriphCLKConfig+0x556e>
3400ef58:	f240 717a 	movw	r1, #1914	@ 0x77a
3400ef5c:	4839      	ldr	r0, [pc, #228]	@ (3400f044 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400ef5e:	f7f2 fea1 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ef62:	4b39      	ldr	r3, [pc, #228]	@ (3400f048 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400ef64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ef68:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ef6c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ef70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ef76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ef7c:	3b01      	subs	r3, #1
3400ef7e:	041b      	lsls	r3, r3, #16
3400ef80:	4313      	orrs	r3, r2
3400ef82:	4a31      	ldr	r2, [pc, #196]	@ (3400f048 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400ef84:	430b      	orrs	r3, r1
3400ef86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ef8a:	f7fa fa51 	bl	34009430 <LL_RCC_IC9_Enable>
3400ef8e:	e066      	b.n	3400f05e <HAL_RCCEx_PeriphCLKConfig+0x566a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
3400ef90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef94:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ef98:	4b26      	ldr	r3, [pc, #152]	@ (3400f034 <HAL_RCCEx_PeriphCLKConfig+0x5640>)
3400ef9a:	429a      	cmp	r2, r3
3400ef9c:	d156      	bne.n	3400f04c <HAL_RCCEx_PeriphCLKConfig+0x5658>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400ef9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400efa4:	2b00      	cmp	r3, #0
3400efa6:	d016      	beq.n	3400efd6 <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400efa8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400efae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400efb2:	d010      	beq.n	3400efd6 <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400efb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400efba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400efbe:	d00a      	beq.n	3400efd6 <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400efc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400efc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400efca:	d004      	beq.n	3400efd6 <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400efcc:	f240 7186 	movw	r1, #1926	@ 0x786
3400efd0:	481c      	ldr	r0, [pc, #112]	@ (3400f044 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400efd2:	f7f2 fe67 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400efd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400efdc:	2b00      	cmp	r3, #0
3400efde:	d005      	beq.n	3400efec <HAL_RCCEx_PeriphCLKConfig+0x55f8>
3400efe0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400efe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400efea:	d904      	bls.n	3400eff6 <HAL_RCCEx_PeriphCLKConfig+0x5602>
3400efec:	f240 7187 	movw	r1, #1927	@ 0x787
3400eff0:	4814      	ldr	r0, [pc, #80]	@ (3400f044 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400eff2:	f7f2 fe57 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400eff6:	4b14      	ldr	r3, [pc, #80]	@ (3400f048 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400eff8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400effc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f000:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f004:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f008:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f00a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f00e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f010:	3b01      	subs	r3, #1
3400f012:	041b      	lsls	r3, r3, #16
3400f014:	4313      	orrs	r3, r2
3400f016:	4a0c      	ldr	r2, [pc, #48]	@ (3400f048 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400f018:	430b      	orrs	r3, r1
3400f01a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f01e:	f7fa fb07 	bl	34009630 <LL_RCC_IC14_Enable>
3400f022:	e01c      	b.n	3400f05e <HAL_RCCEx_PeriphCLKConfig+0x566a>
3400f024:	07010430 	.word	0x07010430
3400f028:	07000830 	.word	0x07000830
3400f02c:	07010830 	.word	0x07010830
3400f030:	07020830 	.word	0x07020830
3400f034:	07030830 	.word	0x07030830
3400f038:	07040830 	.word	0x07040830
3400f03c:	07050830 	.word	0x07050830
3400f040:	07060830 	.word	0x07060830
3400f044:	3401e910 	.word	0x3401e910
3400f048:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
3400f04c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f050:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400f054:	4b72      	ldr	r3, [pc, #456]	@ (3400f220 <HAL_RCCEx_PeriphCLKConfig+0x582c>)
3400f056:	429a      	cmp	r2, r3
3400f058:	d101      	bne.n	3400f05e <HAL_RCCEx_PeriphCLKConfig+0x566a>
    {
      LL_RCC_CLKP_Enable();
3400f05a:	f7fa fca9 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
3400f05e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f062:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
3400f066:	4618      	mov	r0, r3
3400f068:	f7f9 fc45 	bl	340088f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
3400f06c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f070:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f074:	2100      	movs	r1, #0
3400f076:	65b9      	str	r1, [r7, #88]	@ 0x58
3400f078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400f07c:	65fb      	str	r3, [r7, #92]	@ 0x5c
3400f07e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
3400f082:	4603      	mov	r3, r0
3400f084:	460a      	mov	r2, r1
3400f086:	4313      	orrs	r3, r2
3400f088:	f000 80ee 	beq.w	3400f268 <HAL_RCCEx_PeriphCLKConfig+0x5874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
3400f08c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f090:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f094:	4b63      	ldr	r3, [pc, #396]	@ (3400f224 <HAL_RCCEx_PeriphCLKConfig+0x5830>)
3400f096:	429a      	cmp	r2, r3
3400f098:	d02e      	beq.n	3400f0f8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f09a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f09e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0a2:	4b61      	ldr	r3, [pc, #388]	@ (3400f228 <HAL_RCCEx_PeriphCLKConfig+0x5834>)
3400f0a4:	429a      	cmp	r2, r3
3400f0a6:	d027      	beq.n	3400f0f8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0ac:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0b0:	4b5e      	ldr	r3, [pc, #376]	@ (3400f22c <HAL_RCCEx_PeriphCLKConfig+0x5838>)
3400f0b2:	429a      	cmp	r2, r3
3400f0b4:	d020      	beq.n	3400f0f8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0ba:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0be:	4b5c      	ldr	r3, [pc, #368]	@ (3400f230 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
3400f0c0:	429a      	cmp	r2, r3
3400f0c2:	d019      	beq.n	3400f0f8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0c8:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0cc:	4b59      	ldr	r3, [pc, #356]	@ (3400f234 <HAL_RCCEx_PeriphCLKConfig+0x5840>)
3400f0ce:	429a      	cmp	r2, r3
3400f0d0:	d012      	beq.n	3400f0f8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0d6:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0da:	4b57      	ldr	r3, [pc, #348]	@ (3400f238 <HAL_RCCEx_PeriphCLKConfig+0x5844>)
3400f0dc:	429a      	cmp	r2, r3
3400f0de:	d00b      	beq.n	3400f0f8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0e4:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0e8:	4b54      	ldr	r3, [pc, #336]	@ (3400f23c <HAL_RCCEx_PeriphCLKConfig+0x5848>)
3400f0ea:	429a      	cmp	r2, r3
3400f0ec:	d004      	beq.n	3400f0f8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0ee:	f240 71a1 	movw	r1, #1953	@ 0x7a1
3400f0f2:	4853      	ldr	r0, [pc, #332]	@ (3400f240 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400f0f4:	f7f2 fdd6 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
3400f0f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0fc:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f100:	4b4a      	ldr	r3, [pc, #296]	@ (3400f22c <HAL_RCCEx_PeriphCLKConfig+0x5838>)
3400f102:	429a      	cmp	r2, r3
3400f104:	d142      	bne.n	3400f18c <HAL_RCCEx_PeriphCLKConfig+0x5798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f106:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f10a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f10c:	2b00      	cmp	r3, #0
3400f10e:	d016      	beq.n	3400f13e <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400f110:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f11a:	d010      	beq.n	3400f13e <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400f11c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f126:	d00a      	beq.n	3400f13e <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400f128:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f12c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f12e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f132:	d004      	beq.n	3400f13e <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400f134:	f240 71a6 	movw	r1, #1958	@ 0x7a6
3400f138:	4841      	ldr	r0, [pc, #260]	@ (3400f240 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400f13a:	f7f2 fdb3 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f13e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f144:	2b00      	cmp	r3, #0
3400f146:	d005      	beq.n	3400f154 <HAL_RCCEx_PeriphCLKConfig+0x5760>
3400f148:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f14c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f14e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f152:	d904      	bls.n	3400f15e <HAL_RCCEx_PeriphCLKConfig+0x576a>
3400f154:	f240 71a7 	movw	r1, #1959	@ 0x7a7
3400f158:	4839      	ldr	r0, [pc, #228]	@ (3400f240 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400f15a:	f7f2 fda3 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f15e:	4b39      	ldr	r3, [pc, #228]	@ (3400f244 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400f160:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f164:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f168:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f16c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f170:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f172:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f178:	3b01      	subs	r3, #1
3400f17a:	041b      	lsls	r3, r3, #16
3400f17c:	4313      	orrs	r3, r2
3400f17e:	4a31      	ldr	r2, [pc, #196]	@ (3400f244 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400f180:	430b      	orrs	r3, r1
3400f182:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f186:	f7fa f953 	bl	34009430 <LL_RCC_IC9_Enable>
3400f18a:	e066      	b.n	3400f25a <HAL_RCCEx_PeriphCLKConfig+0x5866>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
3400f18c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f190:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f194:	4b26      	ldr	r3, [pc, #152]	@ (3400f230 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
3400f196:	429a      	cmp	r2, r3
3400f198:	d156      	bne.n	3400f248 <HAL_RCCEx_PeriphCLKConfig+0x5854>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f19a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f19e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f1a0:	2b00      	cmp	r3, #0
3400f1a2:	d016      	beq.n	3400f1d2 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400f1a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f1aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f1ae:	d010      	beq.n	3400f1d2 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400f1b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f1b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f1ba:	d00a      	beq.n	3400f1d2 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400f1bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f1c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f1c6:	d004      	beq.n	3400f1d2 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400f1c8:	f240 71b3 	movw	r1, #1971	@ 0x7b3
3400f1cc:	481c      	ldr	r0, [pc, #112]	@ (3400f240 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400f1ce:	f7f2 fd69 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f1d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f1d8:	2b00      	cmp	r3, #0
3400f1da:	d005      	beq.n	3400f1e8 <HAL_RCCEx_PeriphCLKConfig+0x57f4>
3400f1dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f1e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f1e6:	d904      	bls.n	3400f1f2 <HAL_RCCEx_PeriphCLKConfig+0x57fe>
3400f1e8:	f240 71b4 	movw	r1, #1972	@ 0x7b4
3400f1ec:	4814      	ldr	r0, [pc, #80]	@ (3400f240 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400f1ee:	f7f2 fd59 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f1f2:	4b14      	ldr	r3, [pc, #80]	@ (3400f244 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400f1f4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f1f8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f1fc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f200:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f204:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f206:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f20a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f20c:	3b01      	subs	r3, #1
3400f20e:	041b      	lsls	r3, r3, #16
3400f210:	4313      	orrs	r3, r2
3400f212:	4a0c      	ldr	r2, [pc, #48]	@ (3400f244 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400f214:	430b      	orrs	r3, r1
3400f216:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f21a:	f7fa fa09 	bl	34009630 <LL_RCC_IC14_Enable>
3400f21e:	e01c      	b.n	3400f25a <HAL_RCCEx_PeriphCLKConfig+0x5866>
3400f220:	07010830 	.word	0x07010830
3400f224:	07000c30 	.word	0x07000c30
3400f228:	07010c30 	.word	0x07010c30
3400f22c:	07020c30 	.word	0x07020c30
3400f230:	07030c30 	.word	0x07030c30
3400f234:	07040c30 	.word	0x07040c30
3400f238:	07050c30 	.word	0x07050c30
3400f23c:	07060c30 	.word	0x07060c30
3400f240:	3401e910 	.word	0x3401e910
3400f244:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
3400f248:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f24c:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f250:	4b72      	ldr	r3, [pc, #456]	@ (3400f41c <HAL_RCCEx_PeriphCLKConfig+0x5a28>)
3400f252:	429a      	cmp	r2, r3
3400f254:	d101      	bne.n	3400f25a <HAL_RCCEx_PeriphCLKConfig+0x5866>
    {
      LL_RCC_CLKP_Enable();
3400f256:	f7fa fbab 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
3400f25a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f25e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400f262:	4618      	mov	r0, r3
3400f264:	f7f9 fb47 	bl	340088f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
3400f268:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f270:	2100      	movs	r1, #0
3400f272:	6539      	str	r1, [r7, #80]	@ 0x50
3400f274:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400f278:	657b      	str	r3, [r7, #84]	@ 0x54
3400f27a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
3400f27e:	4603      	mov	r3, r0
3400f280:	460a      	mov	r2, r1
3400f282:	4313      	orrs	r3, r2
3400f284:	f000 80ee 	beq.w	3400f464 <HAL_RCCEx_PeriphCLKConfig+0x5a70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
3400f288:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f28c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f290:	4b63      	ldr	r3, [pc, #396]	@ (3400f420 <HAL_RCCEx_PeriphCLKConfig+0x5a2c>)
3400f292:	429a      	cmp	r2, r3
3400f294:	d02e      	beq.n	3400f2f4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f296:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f29a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f29e:	4b61      	ldr	r3, [pc, #388]	@ (3400f424 <HAL_RCCEx_PeriphCLKConfig+0x5a30>)
3400f2a0:	429a      	cmp	r2, r3
3400f2a2:	d027      	beq.n	3400f2f4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2a8:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2ac:	4b5e      	ldr	r3, [pc, #376]	@ (3400f428 <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
3400f2ae:	429a      	cmp	r2, r3
3400f2b0:	d020      	beq.n	3400f2f4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2b6:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2ba:	4b5c      	ldr	r3, [pc, #368]	@ (3400f42c <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
3400f2bc:	429a      	cmp	r2, r3
3400f2be:	d019      	beq.n	3400f2f4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2c4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2c8:	4b59      	ldr	r3, [pc, #356]	@ (3400f430 <HAL_RCCEx_PeriphCLKConfig+0x5a3c>)
3400f2ca:	429a      	cmp	r2, r3
3400f2cc:	d012      	beq.n	3400f2f4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2d2:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2d6:	4b57      	ldr	r3, [pc, #348]	@ (3400f434 <HAL_RCCEx_PeriphCLKConfig+0x5a40>)
3400f2d8:	429a      	cmp	r2, r3
3400f2da:	d00b      	beq.n	3400f2f4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2e0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2e4:	4b54      	ldr	r3, [pc, #336]	@ (3400f438 <HAL_RCCEx_PeriphCLKConfig+0x5a44>)
3400f2e6:	429a      	cmp	r2, r3
3400f2e8:	d004      	beq.n	3400f2f4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2ea:	f240 71ce 	movw	r1, #1998	@ 0x7ce
3400f2ee:	4853      	ldr	r0, [pc, #332]	@ (3400f43c <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f2f0:	f7f2 fcd8 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
3400f2f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2f8:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2fc:	4b4a      	ldr	r3, [pc, #296]	@ (3400f428 <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
3400f2fe:	429a      	cmp	r2, r3
3400f300:	d142      	bne.n	3400f388 <HAL_RCCEx_PeriphCLKConfig+0x5994>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f302:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f308:	2b00      	cmp	r3, #0
3400f30a:	d016      	beq.n	3400f33a <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f30c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f316:	d010      	beq.n	3400f33a <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f318:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f31c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f31e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f322:	d00a      	beq.n	3400f33a <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f324:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f32a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f32e:	d004      	beq.n	3400f33a <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f330:	f240 71d3 	movw	r1, #2003	@ 0x7d3
3400f334:	4841      	ldr	r0, [pc, #260]	@ (3400f43c <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f336:	f7f2 fcb5 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f33a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f33e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f340:	2b00      	cmp	r3, #0
3400f342:	d005      	beq.n	3400f350 <HAL_RCCEx_PeriphCLKConfig+0x595c>
3400f344:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f34a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f34e:	d904      	bls.n	3400f35a <HAL_RCCEx_PeriphCLKConfig+0x5966>
3400f350:	f240 71d4 	movw	r1, #2004	@ 0x7d4
3400f354:	4839      	ldr	r0, [pc, #228]	@ (3400f43c <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f356:	f7f2 fca5 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f35a:	4b39      	ldr	r3, [pc, #228]	@ (3400f440 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f35c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f360:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f364:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f368:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f36c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f36e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f374:	3b01      	subs	r3, #1
3400f376:	041b      	lsls	r3, r3, #16
3400f378:	4313      	orrs	r3, r2
3400f37a:	4a31      	ldr	r2, [pc, #196]	@ (3400f440 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f37c:	430b      	orrs	r3, r1
3400f37e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f382:	f7fa f855 	bl	34009430 <LL_RCC_IC9_Enable>
3400f386:	e066      	b.n	3400f456 <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
3400f388:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f38c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f390:	4b26      	ldr	r3, [pc, #152]	@ (3400f42c <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
3400f392:	429a      	cmp	r2, r3
3400f394:	d156      	bne.n	3400f444 <HAL_RCCEx_PeriphCLKConfig+0x5a50>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f396:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f39a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f39c:	2b00      	cmp	r3, #0
3400f39e:	d016      	beq.n	3400f3ce <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f3a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f3a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f3aa:	d010      	beq.n	3400f3ce <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f3ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f3b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f3b6:	d00a      	beq.n	3400f3ce <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f3b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f3be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f3c2:	d004      	beq.n	3400f3ce <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f3c4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
3400f3c8:	481c      	ldr	r0, [pc, #112]	@ (3400f43c <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f3ca:	f7f2 fc6b 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f3ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f3d4:	2b00      	cmp	r3, #0
3400f3d6:	d005      	beq.n	3400f3e4 <HAL_RCCEx_PeriphCLKConfig+0x59f0>
3400f3d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f3de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f3e2:	d904      	bls.n	3400f3ee <HAL_RCCEx_PeriphCLKConfig+0x59fa>
3400f3e4:	f240 71e1 	movw	r1, #2017	@ 0x7e1
3400f3e8:	4814      	ldr	r0, [pc, #80]	@ (3400f43c <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f3ea:	f7f2 fc5b 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f3ee:	4b14      	ldr	r3, [pc, #80]	@ (3400f440 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f3f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f3f4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f3f8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f3fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f400:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f402:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f408:	3b01      	subs	r3, #1
3400f40a:	041b      	lsls	r3, r3, #16
3400f40c:	4313      	orrs	r3, r2
3400f40e:	4a0c      	ldr	r2, [pc, #48]	@ (3400f440 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f410:	430b      	orrs	r3, r1
3400f412:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f416:	f7fa f90b 	bl	34009630 <LL_RCC_IC14_Enable>
3400f41a:	e01c      	b.n	3400f456 <HAL_RCCEx_PeriphCLKConfig+0x5a62>
3400f41c:	07010c30 	.word	0x07010c30
3400f420:	07001030 	.word	0x07001030
3400f424:	07011030 	.word	0x07011030
3400f428:	07021030 	.word	0x07021030
3400f42c:	07031030 	.word	0x07031030
3400f430:	07041030 	.word	0x07041030
3400f434:	07051030 	.word	0x07051030
3400f438:	07061030 	.word	0x07061030
3400f43c:	3401e910 	.word	0x3401e910
3400f440:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
3400f444:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f448:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f44c:	4b72      	ldr	r3, [pc, #456]	@ (3400f618 <HAL_RCCEx_PeriphCLKConfig+0x5c24>)
3400f44e:	429a      	cmp	r2, r3
3400f450:	d101      	bne.n	3400f456 <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    {
      LL_RCC_CLKP_Enable();
3400f452:	f7fa faad 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
3400f456:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f45a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
3400f45e:	4618      	mov	r0, r3
3400f460:	f7f9 fa49 	bl	340088f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
3400f464:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f468:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f46c:	2100      	movs	r1, #0
3400f46e:	64b9      	str	r1, [r7, #72]	@ 0x48
3400f470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400f474:	64fb      	str	r3, [r7, #76]	@ 0x4c
3400f476:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
3400f47a:	4603      	mov	r3, r0
3400f47c:	460a      	mov	r2, r1
3400f47e:	4313      	orrs	r3, r2
3400f480:	f000 80ee 	beq.w	3400f660 <HAL_RCCEx_PeriphCLKConfig+0x5c6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
3400f484:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f488:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f48c:	4b63      	ldr	r3, [pc, #396]	@ (3400f61c <HAL_RCCEx_PeriphCLKConfig+0x5c28>)
3400f48e:	429a      	cmp	r2, r3
3400f490:	d02e      	beq.n	3400f4f0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f492:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f496:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f49a:	4b61      	ldr	r3, [pc, #388]	@ (3400f620 <HAL_RCCEx_PeriphCLKConfig+0x5c2c>)
3400f49c:	429a      	cmp	r2, r3
3400f49e:	d027      	beq.n	3400f4f0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4a4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4a8:	4b5e      	ldr	r3, [pc, #376]	@ (3400f624 <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
3400f4aa:	429a      	cmp	r2, r3
3400f4ac:	d020      	beq.n	3400f4f0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4b2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4b6:	4b5c      	ldr	r3, [pc, #368]	@ (3400f628 <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
3400f4b8:	429a      	cmp	r2, r3
3400f4ba:	d019      	beq.n	3400f4f0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4c0:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4c4:	4b59      	ldr	r3, [pc, #356]	@ (3400f62c <HAL_RCCEx_PeriphCLKConfig+0x5c38>)
3400f4c6:	429a      	cmp	r2, r3
3400f4c8:	d012      	beq.n	3400f4f0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4ce:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4d2:	4b57      	ldr	r3, [pc, #348]	@ (3400f630 <HAL_RCCEx_PeriphCLKConfig+0x5c3c>)
3400f4d4:	429a      	cmp	r2, r3
3400f4d6:	d00b      	beq.n	3400f4f0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4dc:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4e0:	4b54      	ldr	r3, [pc, #336]	@ (3400f634 <HAL_RCCEx_PeriphCLKConfig+0x5c40>)
3400f4e2:	429a      	cmp	r2, r3
3400f4e4:	d004      	beq.n	3400f4f0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4e6:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3400f4ea:	4853      	ldr	r0, [pc, #332]	@ (3400f638 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f4ec:	f7f2 fbda 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
3400f4f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4f4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4f8:	4b4a      	ldr	r3, [pc, #296]	@ (3400f624 <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
3400f4fa:	429a      	cmp	r2, r3
3400f4fc:	d142      	bne.n	3400f584 <HAL_RCCEx_PeriphCLKConfig+0x5b90>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f4fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f504:	2b00      	cmp	r3, #0
3400f506:	d016      	beq.n	3400f536 <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f508:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f50c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f50e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f512:	d010      	beq.n	3400f536 <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f514:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f51a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f51e:	d00a      	beq.n	3400f536 <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f520:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f526:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f52a:	d004      	beq.n	3400f536 <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f52c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400f530:	4841      	ldr	r0, [pc, #260]	@ (3400f638 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f532:	f7f2 fbb7 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f536:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f53a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f53c:	2b00      	cmp	r3, #0
3400f53e:	d005      	beq.n	3400f54c <HAL_RCCEx_PeriphCLKConfig+0x5b58>
3400f540:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f54a:	d904      	bls.n	3400f556 <HAL_RCCEx_PeriphCLKConfig+0x5b62>
3400f54c:	f640 0101 	movw	r1, #2049	@ 0x801
3400f550:	4839      	ldr	r0, [pc, #228]	@ (3400f638 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f552:	f7f2 fba7 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f556:	4b39      	ldr	r3, [pc, #228]	@ (3400f63c <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f558:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f55c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f560:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f564:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f56a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f56e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f570:	3b01      	subs	r3, #1
3400f572:	041b      	lsls	r3, r3, #16
3400f574:	4313      	orrs	r3, r2
3400f576:	4a31      	ldr	r2, [pc, #196]	@ (3400f63c <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f578:	430b      	orrs	r3, r1
3400f57a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f57e:	f7f9 ff57 	bl	34009430 <LL_RCC_IC9_Enable>
3400f582:	e066      	b.n	3400f652 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
3400f584:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f588:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f58c:	4b26      	ldr	r3, [pc, #152]	@ (3400f628 <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
3400f58e:	429a      	cmp	r2, r3
3400f590:	d156      	bne.n	3400f640 <HAL_RCCEx_PeriphCLKConfig+0x5c4c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f592:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f598:	2b00      	cmp	r3, #0
3400f59a:	d016      	beq.n	3400f5ca <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f59c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f5a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f5a6:	d010      	beq.n	3400f5ca <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f5a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f5ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f5b2:	d00a      	beq.n	3400f5ca <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f5b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f5ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f5be:	d004      	beq.n	3400f5ca <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f5c0:	f640 010d 	movw	r1, #2061	@ 0x80d
3400f5c4:	481c      	ldr	r0, [pc, #112]	@ (3400f638 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f5c6:	f7f2 fb6d 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f5ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f5d0:	2b00      	cmp	r3, #0
3400f5d2:	d005      	beq.n	3400f5e0 <HAL_RCCEx_PeriphCLKConfig+0x5bec>
3400f5d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f5da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f5de:	d904      	bls.n	3400f5ea <HAL_RCCEx_PeriphCLKConfig+0x5bf6>
3400f5e0:	f640 010e 	movw	r1, #2062	@ 0x80e
3400f5e4:	4814      	ldr	r0, [pc, #80]	@ (3400f638 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f5e6:	f7f2 fb5d 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f5ea:	4b14      	ldr	r3, [pc, #80]	@ (3400f63c <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f5ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f5f0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f5f4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f5f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f5fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f604:	3b01      	subs	r3, #1
3400f606:	041b      	lsls	r3, r3, #16
3400f608:	4313      	orrs	r3, r2
3400f60a:	4a0c      	ldr	r2, [pc, #48]	@ (3400f63c <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f60c:	430b      	orrs	r3, r1
3400f60e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f612:	f7fa f80d 	bl	34009630 <LL_RCC_IC14_Enable>
3400f616:	e01c      	b.n	3400f652 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
3400f618:	07011030 	.word	0x07011030
3400f61c:	07001430 	.word	0x07001430
3400f620:	07011430 	.word	0x07011430
3400f624:	07021430 	.word	0x07021430
3400f628:	07031430 	.word	0x07031430
3400f62c:	07041430 	.word	0x07041430
3400f630:	07051430 	.word	0x07051430
3400f634:	07061430 	.word	0x07061430
3400f638:	3401e910 	.word	0x3401e910
3400f63c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
3400f640:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f644:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f648:	4b72      	ldr	r3, [pc, #456]	@ (3400f814 <HAL_RCCEx_PeriphCLKConfig+0x5e20>)
3400f64a:	429a      	cmp	r2, r3
3400f64c:	d101      	bne.n	3400f652 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    {
      LL_RCC_CLKP_Enable();
3400f64e:	f7fa f9af 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
3400f652:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f656:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400f65a:	4618      	mov	r0, r3
3400f65c:	f7f9 f94b 	bl	340088f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
3400f660:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f664:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f668:	2100      	movs	r1, #0
3400f66a:	6439      	str	r1, [r7, #64]	@ 0x40
3400f66c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400f670:	647b      	str	r3, [r7, #68]	@ 0x44
3400f672:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
3400f676:	4603      	mov	r3, r0
3400f678:	460a      	mov	r2, r1
3400f67a:	4313      	orrs	r3, r2
3400f67c:	f000 80ee 	beq.w	3400f85c <HAL_RCCEx_PeriphCLKConfig+0x5e68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
3400f680:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f684:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f688:	4b63      	ldr	r3, [pc, #396]	@ (3400f818 <HAL_RCCEx_PeriphCLKConfig+0x5e24>)
3400f68a:	429a      	cmp	r2, r3
3400f68c:	d02e      	beq.n	3400f6ec <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f68e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f692:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f696:	4b61      	ldr	r3, [pc, #388]	@ (3400f81c <HAL_RCCEx_PeriphCLKConfig+0x5e28>)
3400f698:	429a      	cmp	r2, r3
3400f69a:	d027      	beq.n	3400f6ec <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f69c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6a0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6a4:	4b5e      	ldr	r3, [pc, #376]	@ (3400f820 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
3400f6a6:	429a      	cmp	r2, r3
3400f6a8:	d020      	beq.n	3400f6ec <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f6aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6ae:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6b2:	4b5c      	ldr	r3, [pc, #368]	@ (3400f824 <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
3400f6b4:	429a      	cmp	r2, r3
3400f6b6:	d019      	beq.n	3400f6ec <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f6b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6bc:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6c0:	4b59      	ldr	r3, [pc, #356]	@ (3400f828 <HAL_RCCEx_PeriphCLKConfig+0x5e34>)
3400f6c2:	429a      	cmp	r2, r3
3400f6c4:	d012      	beq.n	3400f6ec <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f6c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6ca:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6ce:	4b57      	ldr	r3, [pc, #348]	@ (3400f82c <HAL_RCCEx_PeriphCLKConfig+0x5e38>)
3400f6d0:	429a      	cmp	r2, r3
3400f6d2:	d00b      	beq.n	3400f6ec <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f6d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6d8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6dc:	4b54      	ldr	r3, [pc, #336]	@ (3400f830 <HAL_RCCEx_PeriphCLKConfig+0x5e3c>)
3400f6de:	429a      	cmp	r2, r3
3400f6e0:	d004      	beq.n	3400f6ec <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f6e2:	f640 0128 	movw	r1, #2088	@ 0x828
3400f6e6:	4853      	ldr	r0, [pc, #332]	@ (3400f834 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f6e8:	f7f2 fadc 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
3400f6ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6f0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6f4:	4b4a      	ldr	r3, [pc, #296]	@ (3400f820 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
3400f6f6:	429a      	cmp	r2, r3
3400f6f8:	d142      	bne.n	3400f780 <HAL_RCCEx_PeriphCLKConfig+0x5d8c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f6fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f700:	2b00      	cmp	r3, #0
3400f702:	d016      	beq.n	3400f732 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f704:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f70a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f70e:	d010      	beq.n	3400f732 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f710:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f71a:	d00a      	beq.n	3400f732 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f71c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f722:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f726:	d004      	beq.n	3400f732 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f728:	f640 012d 	movw	r1, #2093	@ 0x82d
3400f72c:	4841      	ldr	r0, [pc, #260]	@ (3400f834 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f72e:	f7f2 fab9 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f732:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f738:	2b00      	cmp	r3, #0
3400f73a:	d005      	beq.n	3400f748 <HAL_RCCEx_PeriphCLKConfig+0x5d54>
3400f73c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f746:	d904      	bls.n	3400f752 <HAL_RCCEx_PeriphCLKConfig+0x5d5e>
3400f748:	f640 012e 	movw	r1, #2094	@ 0x82e
3400f74c:	4839      	ldr	r0, [pc, #228]	@ (3400f834 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f74e:	f7f2 faa9 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f752:	4b39      	ldr	r3, [pc, #228]	@ (3400f838 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f754:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f758:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f75c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f760:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f764:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f766:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f76a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f76c:	3b01      	subs	r3, #1
3400f76e:	041b      	lsls	r3, r3, #16
3400f770:	4313      	orrs	r3, r2
3400f772:	4a31      	ldr	r2, [pc, #196]	@ (3400f838 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f774:	430b      	orrs	r3, r1
3400f776:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f77a:	f7f9 fe59 	bl	34009430 <LL_RCC_IC9_Enable>
3400f77e:	e066      	b.n	3400f84e <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
3400f780:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f784:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f788:	4b26      	ldr	r3, [pc, #152]	@ (3400f824 <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
3400f78a:	429a      	cmp	r2, r3
3400f78c:	d156      	bne.n	3400f83c <HAL_RCCEx_PeriphCLKConfig+0x5e48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f78e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f794:	2b00      	cmp	r3, #0
3400f796:	d016      	beq.n	3400f7c6 <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f798:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f79c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f79e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f7a2:	d010      	beq.n	3400f7c6 <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f7a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f7aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f7ae:	d00a      	beq.n	3400f7c6 <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f7b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f7b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f7ba:	d004      	beq.n	3400f7c6 <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f7bc:	f640 013a 	movw	r1, #2106	@ 0x83a
3400f7c0:	481c      	ldr	r0, [pc, #112]	@ (3400f834 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f7c2:	f7f2 fa6f 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f7c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f7cc:	2b00      	cmp	r3, #0
3400f7ce:	d005      	beq.n	3400f7dc <HAL_RCCEx_PeriphCLKConfig+0x5de8>
3400f7d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f7d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f7da:	d904      	bls.n	3400f7e6 <HAL_RCCEx_PeriphCLKConfig+0x5df2>
3400f7dc:	f640 013b 	movw	r1, #2107	@ 0x83b
3400f7e0:	4814      	ldr	r0, [pc, #80]	@ (3400f834 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f7e2:	f7f2 fa5f 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f7e6:	4b14      	ldr	r3, [pc, #80]	@ (3400f838 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f7e8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f7ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f7f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f7f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f7fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f800:	3b01      	subs	r3, #1
3400f802:	041b      	lsls	r3, r3, #16
3400f804:	4313      	orrs	r3, r2
3400f806:	4a0c      	ldr	r2, [pc, #48]	@ (3400f838 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f808:	430b      	orrs	r3, r1
3400f80a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f80e:	f7f9 ff0f 	bl	34009630 <LL_RCC_IC14_Enable>
3400f812:	e01c      	b.n	3400f84e <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
3400f814:	07011430 	.word	0x07011430
3400f818:	07001830 	.word	0x07001830
3400f81c:	07011830 	.word	0x07011830
3400f820:	07021830 	.word	0x07021830
3400f824:	07031830 	.word	0x07031830
3400f828:	07041830 	.word	0x07041830
3400f82c:	07051830 	.word	0x07051830
3400f830:	07061830 	.word	0x07061830
3400f834:	3401e910 	.word	0x3401e910
3400f838:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
3400f83c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f840:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f844:	4b72      	ldr	r3, [pc, #456]	@ (3400fa10 <HAL_RCCEx_PeriphCLKConfig+0x601c>)
3400f846:	429a      	cmp	r2, r3
3400f848:	d101      	bne.n	3400f84e <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    {
      LL_RCC_CLKP_Enable();
3400f84a:	f7fa f8b1 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
3400f84e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f852:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
3400f856:	4618      	mov	r0, r3
3400f858:	f7f9 f84d 	bl	340088f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
3400f85c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f860:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f864:	2100      	movs	r1, #0
3400f866:	63b9      	str	r1, [r7, #56]	@ 0x38
3400f868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400f86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
3400f86e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
3400f872:	4603      	mov	r3, r0
3400f874:	460a      	mov	r2, r1
3400f876:	4313      	orrs	r3, r2
3400f878:	f000 80ee 	beq.w	3400fa58 <HAL_RCCEx_PeriphCLKConfig+0x6064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
3400f87c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f880:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f884:	4b63      	ldr	r3, [pc, #396]	@ (3400fa14 <HAL_RCCEx_PeriphCLKConfig+0x6020>)
3400f886:	429a      	cmp	r2, r3
3400f888:	d02e      	beq.n	3400f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f88a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f88e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f892:	4b61      	ldr	r3, [pc, #388]	@ (3400fa18 <HAL_RCCEx_PeriphCLKConfig+0x6024>)
3400f894:	429a      	cmp	r2, r3
3400f896:	d027      	beq.n	3400f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f898:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f89c:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8a0:	4b5e      	ldr	r3, [pc, #376]	@ (3400fa1c <HAL_RCCEx_PeriphCLKConfig+0x6028>)
3400f8a2:	429a      	cmp	r2, r3
3400f8a4:	d020      	beq.n	3400f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f8a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8aa:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8ae:	4b5c      	ldr	r3, [pc, #368]	@ (3400fa20 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
3400f8b0:	429a      	cmp	r2, r3
3400f8b2:	d019      	beq.n	3400f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f8b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8b8:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8bc:	4b59      	ldr	r3, [pc, #356]	@ (3400fa24 <HAL_RCCEx_PeriphCLKConfig+0x6030>)
3400f8be:	429a      	cmp	r2, r3
3400f8c0:	d012      	beq.n	3400f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f8c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8c6:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8ca:	4b57      	ldr	r3, [pc, #348]	@ (3400fa28 <HAL_RCCEx_PeriphCLKConfig+0x6034>)
3400f8cc:	429a      	cmp	r2, r3
3400f8ce:	d00b      	beq.n	3400f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f8d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8d4:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8d8:	4b54      	ldr	r3, [pc, #336]	@ (3400fa2c <HAL_RCCEx_PeriphCLKConfig+0x6038>)
3400f8da:	429a      	cmp	r2, r3
3400f8dc:	d004      	beq.n	3400f8e8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f8de:	f640 0155 	movw	r1, #2133	@ 0x855
3400f8e2:	4853      	ldr	r0, [pc, #332]	@ (3400fa30 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f8e4:	f7f2 f9de 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
3400f8e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8ec:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8f0:	4b4a      	ldr	r3, [pc, #296]	@ (3400fa1c <HAL_RCCEx_PeriphCLKConfig+0x6028>)
3400f8f2:	429a      	cmp	r2, r3
3400f8f4:	d142      	bne.n	3400f97c <HAL_RCCEx_PeriphCLKConfig+0x5f88>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f8f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f8fc:	2b00      	cmp	r3, #0
3400f8fe:	d016      	beq.n	3400f92e <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f900:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f90a:	d010      	beq.n	3400f92e <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f90c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f916:	d00a      	beq.n	3400f92e <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f918:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f91c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f91e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f922:	d004      	beq.n	3400f92e <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f924:	f640 015a 	movw	r1, #2138	@ 0x85a
3400f928:	4841      	ldr	r0, [pc, #260]	@ (3400fa30 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f92a:	f7f2 f9bb 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f92e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f934:	2b00      	cmp	r3, #0
3400f936:	d005      	beq.n	3400f944 <HAL_RCCEx_PeriphCLKConfig+0x5f50>
3400f938:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f93c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f93e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f942:	d904      	bls.n	3400f94e <HAL_RCCEx_PeriphCLKConfig+0x5f5a>
3400f944:	f640 015b 	movw	r1, #2139	@ 0x85b
3400f948:	4839      	ldr	r0, [pc, #228]	@ (3400fa30 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f94a:	f7f2 f9ab 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f94e:	4b39      	ldr	r3, [pc, #228]	@ (3400fa34 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f950:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f954:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f958:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f95c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f960:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f962:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f968:	3b01      	subs	r3, #1
3400f96a:	041b      	lsls	r3, r3, #16
3400f96c:	4313      	orrs	r3, r2
3400f96e:	4a31      	ldr	r2, [pc, #196]	@ (3400fa34 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f970:	430b      	orrs	r3, r1
3400f972:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f976:	f7f9 fd5b 	bl	34009430 <LL_RCC_IC9_Enable>
3400f97a:	e066      	b.n	3400fa4a <HAL_RCCEx_PeriphCLKConfig+0x6056>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3400f97c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f980:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f984:	4b26      	ldr	r3, [pc, #152]	@ (3400fa20 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
3400f986:	429a      	cmp	r2, r3
3400f988:	d156      	bne.n	3400fa38 <HAL_RCCEx_PeriphCLKConfig+0x6044>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f98a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f98e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f990:	2b00      	cmp	r3, #0
3400f992:	d016      	beq.n	3400f9c2 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f994:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f99a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f99e:	d010      	beq.n	3400f9c2 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f9a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f9a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f9aa:	d00a      	beq.n	3400f9c2 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f9ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f9b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f9b6:	d004      	beq.n	3400f9c2 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f9b8:	f640 0167 	movw	r1, #2151	@ 0x867
3400f9bc:	481c      	ldr	r0, [pc, #112]	@ (3400fa30 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f9be:	f7f2 f971 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f9c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f9c8:	2b00      	cmp	r3, #0
3400f9ca:	d005      	beq.n	3400f9d8 <HAL_RCCEx_PeriphCLKConfig+0x5fe4>
3400f9cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f9d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f9d6:	d904      	bls.n	3400f9e2 <HAL_RCCEx_PeriphCLKConfig+0x5fee>
3400f9d8:	f640 0168 	movw	r1, #2152	@ 0x868
3400f9dc:	4814      	ldr	r0, [pc, #80]	@ (3400fa30 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f9de:	f7f2 f961 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f9e2:	4b14      	ldr	r3, [pc, #80]	@ (3400fa34 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f9e4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f9e8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f9ec:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f9f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f9f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f9fc:	3b01      	subs	r3, #1
3400f9fe:	041b      	lsls	r3, r3, #16
3400fa00:	4313      	orrs	r3, r2
3400fa02:	4a0c      	ldr	r2, [pc, #48]	@ (3400fa34 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400fa04:	430b      	orrs	r3, r1
3400fa06:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400fa0a:	f7f9 fe11 	bl	34009630 <LL_RCC_IC14_Enable>
3400fa0e:	e01c      	b.n	3400fa4a <HAL_RCCEx_PeriphCLKConfig+0x6056>
3400fa10:	07011830 	.word	0x07011830
3400fa14:	07001c30 	.word	0x07001c30
3400fa18:	07011c30 	.word	0x07011c30
3400fa1c:	07021c30 	.word	0x07021c30
3400fa20:	07031c30 	.word	0x07031c30
3400fa24:	07041c30 	.word	0x07041c30
3400fa28:	07051c30 	.word	0x07051c30
3400fa2c:	07061c30 	.word	0x07061c30
3400fa30:	3401e910 	.word	0x3401e910
3400fa34:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
3400fa38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa3c:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400fa40:	4b72      	ldr	r3, [pc, #456]	@ (3400fc0c <HAL_RCCEx_PeriphCLKConfig+0x6218>)
3400fa42:	429a      	cmp	r2, r3
3400fa44:	d101      	bne.n	3400fa4a <HAL_RCCEx_PeriphCLKConfig+0x6056>
    {
      LL_RCC_CLKP_Enable();
3400fa46:	f7f9 ffb3 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
3400fa4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa4e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
3400fa52:	4618      	mov	r0, r3
3400fa54:	f7f8 ff4f 	bl	340088f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
3400fa58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fa60:	2100      	movs	r1, #0
3400fa62:	6339      	str	r1, [r7, #48]	@ 0x30
3400fa64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400fa68:	637b      	str	r3, [r7, #52]	@ 0x34
3400fa6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3400fa6e:	4603      	mov	r3, r0
3400fa70:	460a      	mov	r2, r1
3400fa72:	4313      	orrs	r3, r2
3400fa74:	f000 80ee 	beq.w	3400fc54 <HAL_RCCEx_PeriphCLKConfig+0x6260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
3400fa78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa7c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fa80:	4a63      	ldr	r2, [pc, #396]	@ (3400fc10 <HAL_RCCEx_PeriphCLKConfig+0x621c>)
3400fa82:	4293      	cmp	r3, r2
3400fa84:	d02e      	beq.n	3400fae4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fa86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa8a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fa8e:	4a61      	ldr	r2, [pc, #388]	@ (3400fc14 <HAL_RCCEx_PeriphCLKConfig+0x6220>)
3400fa90:	4293      	cmp	r3, r2
3400fa92:	d027      	beq.n	3400fae4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fa94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa98:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fa9c:	4a5e      	ldr	r2, [pc, #376]	@ (3400fc18 <HAL_RCCEx_PeriphCLKConfig+0x6224>)
3400fa9e:	4293      	cmp	r3, r2
3400faa0:	d020      	beq.n	3400fae4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400faa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faa6:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400faaa:	4a5c      	ldr	r2, [pc, #368]	@ (3400fc1c <HAL_RCCEx_PeriphCLKConfig+0x6228>)
3400faac:	4293      	cmp	r3, r2
3400faae:	d019      	beq.n	3400fae4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fab0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fab4:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fab8:	4a59      	ldr	r2, [pc, #356]	@ (3400fc20 <HAL_RCCEx_PeriphCLKConfig+0x622c>)
3400faba:	4293      	cmp	r3, r2
3400fabc:	d012      	beq.n	3400fae4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fabe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fac2:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fac6:	4a57      	ldr	r2, [pc, #348]	@ (3400fc24 <HAL_RCCEx_PeriphCLKConfig+0x6230>)
3400fac8:	4293      	cmp	r3, r2
3400faca:	d00b      	beq.n	3400fae4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400facc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fad0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fad4:	4a54      	ldr	r2, [pc, #336]	@ (3400fc28 <HAL_RCCEx_PeriphCLKConfig+0x6234>)
3400fad6:	4293      	cmp	r3, r2
3400fad8:	d004      	beq.n	3400fae4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fada:	f640 0182 	movw	r1, #2178	@ 0x882
3400fade:	4853      	ldr	r0, [pc, #332]	@ (3400fc2c <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400fae0:	f7f2 f8e0 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
3400fae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fae8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400faec:	4a4a      	ldr	r2, [pc, #296]	@ (3400fc18 <HAL_RCCEx_PeriphCLKConfig+0x6224>)
3400faee:	4293      	cmp	r3, r2
3400faf0:	d142      	bne.n	3400fb78 <HAL_RCCEx_PeriphCLKConfig+0x6184>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400faf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400faf8:	2b00      	cmp	r3, #0
3400fafa:	d016      	beq.n	3400fb2a <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400fafc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fb02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fb06:	d010      	beq.n	3400fb2a <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400fb08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fb0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fb12:	d00a      	beq.n	3400fb2a <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400fb14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fb1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fb1e:	d004      	beq.n	3400fb2a <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400fb20:	f640 0187 	movw	r1, #2183	@ 0x887
3400fb24:	4841      	ldr	r0, [pc, #260]	@ (3400fc2c <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400fb26:	f7f2 f8bd 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400fb2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fb30:	2b00      	cmp	r3, #0
3400fb32:	d005      	beq.n	3400fb40 <HAL_RCCEx_PeriphCLKConfig+0x614c>
3400fb34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fb3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fb3e:	d904      	bls.n	3400fb4a <HAL_RCCEx_PeriphCLKConfig+0x6156>
3400fb40:	f640 0188 	movw	r1, #2184	@ 0x888
3400fb44:	4839      	ldr	r0, [pc, #228]	@ (3400fc2c <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400fb46:	f7f2 f8ad 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400fb4a:	4b39      	ldr	r3, [pc, #228]	@ (3400fc30 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400fb4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400fb50:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400fb54:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400fb58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400fb5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fb64:	3b01      	subs	r3, #1
3400fb66:	041b      	lsls	r3, r3, #16
3400fb68:	4313      	orrs	r3, r2
3400fb6a:	4a31      	ldr	r2, [pc, #196]	@ (3400fc30 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400fb6c:	430b      	orrs	r3, r1
3400fb6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400fb72:	f7f9 fc5d 	bl	34009430 <LL_RCC_IC9_Enable>
3400fb76:	e066      	b.n	3400fc46 <HAL_RCCEx_PeriphCLKConfig+0x6252>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
3400fb78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb7c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fb80:	4a26      	ldr	r2, [pc, #152]	@ (3400fc1c <HAL_RCCEx_PeriphCLKConfig+0x6228>)
3400fb82:	4293      	cmp	r3, r2
3400fb84:	d156      	bne.n	3400fc34 <HAL_RCCEx_PeriphCLKConfig+0x6240>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400fb86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fb8c:	2b00      	cmp	r3, #0
3400fb8e:	d016      	beq.n	3400fbbe <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400fb90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fb96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fb9a:	d010      	beq.n	3400fbbe <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400fb9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fba6:	d00a      	beq.n	3400fbbe <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400fba8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fbae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fbb2:	d004      	beq.n	3400fbbe <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400fbb4:	f640 0194 	movw	r1, #2196	@ 0x894
3400fbb8:	481c      	ldr	r0, [pc, #112]	@ (3400fc2c <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400fbba:	f7f2 f873 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400fbbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fbc4:	2b00      	cmp	r3, #0
3400fbc6:	d005      	beq.n	3400fbd4 <HAL_RCCEx_PeriphCLKConfig+0x61e0>
3400fbc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fbce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fbd2:	d904      	bls.n	3400fbde <HAL_RCCEx_PeriphCLKConfig+0x61ea>
3400fbd4:	f640 0195 	movw	r1, #2197	@ 0x895
3400fbd8:	4814      	ldr	r0, [pc, #80]	@ (3400fc2c <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400fbda:	f7f2 f863 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400fbde:	4b14      	ldr	r3, [pc, #80]	@ (3400fc30 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400fbe0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400fbe4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400fbe8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400fbec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbf0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400fbf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fbf8:	3b01      	subs	r3, #1
3400fbfa:	041b      	lsls	r3, r3, #16
3400fbfc:	4313      	orrs	r3, r2
3400fbfe:	4a0c      	ldr	r2, [pc, #48]	@ (3400fc30 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400fc00:	430b      	orrs	r3, r1
3400fc02:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400fc06:	f7f9 fd13 	bl	34009630 <LL_RCC_IC14_Enable>
3400fc0a:	e01c      	b.n	3400fc46 <HAL_RCCEx_PeriphCLKConfig+0x6252>
3400fc0c:	07011c30 	.word	0x07011c30
3400fc10:	07000034 	.word	0x07000034
3400fc14:	07010034 	.word	0x07010034
3400fc18:	07020034 	.word	0x07020034
3400fc1c:	07030034 	.word	0x07030034
3400fc20:	07040034 	.word	0x07040034
3400fc24:	07050034 	.word	0x07050034
3400fc28:	07060034 	.word	0x07060034
3400fc2c:	3401e910 	.word	0x3401e910
3400fc30:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
3400fc34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc38:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fc3c:	4ab7      	ldr	r2, [pc, #732]	@ (3400ff1c <HAL_RCCEx_PeriphCLKConfig+0x6528>)
3400fc3e:	4293      	cmp	r3, r2
3400fc40:	d101      	bne.n	3400fc46 <HAL_RCCEx_PeriphCLKConfig+0x6252>
    {
      LL_RCC_CLKP_Enable();
3400fc42:	f7f9 feb5 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
3400fc46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc4a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fc4e:	4618      	mov	r0, r3
3400fc50:	f7f8 fe51 	bl	340088f6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
3400fc54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc58:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fc5c:	2100      	movs	r1, #0
3400fc5e:	62b9      	str	r1, [r7, #40]	@ 0x28
3400fc60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400fc64:	62fb      	str	r3, [r7, #44]	@ 0x2c
3400fc66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3400fc6a:	4603      	mov	r3, r0
3400fc6c:	460a      	mov	r2, r1
3400fc6e:	4313      	orrs	r3, r2
3400fc70:	f000 80da 	beq.w	3400fe28 <HAL_RCCEx_PeriphCLKConfig+0x6434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
3400fc74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc78:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fc7c:	4aa8      	ldr	r2, [pc, #672]	@ (3400ff20 <HAL_RCCEx_PeriphCLKConfig+0x652c>)
3400fc7e:	4293      	cmp	r3, r2
3400fc80:	d02e      	beq.n	3400fce0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fc82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc86:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fc8a:	4aa6      	ldr	r2, [pc, #664]	@ (3400ff24 <HAL_RCCEx_PeriphCLKConfig+0x6530>)
3400fc8c:	4293      	cmp	r3, r2
3400fc8e:	d027      	beq.n	3400fce0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fc90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc94:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fc98:	4aa3      	ldr	r2, [pc, #652]	@ (3400ff28 <HAL_RCCEx_PeriphCLKConfig+0x6534>)
3400fc9a:	4293      	cmp	r3, r2
3400fc9c:	d020      	beq.n	3400fce0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fc9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fca2:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fca6:	4aa1      	ldr	r2, [pc, #644]	@ (3400ff2c <HAL_RCCEx_PeriphCLKConfig+0x6538>)
3400fca8:	4293      	cmp	r3, r2
3400fcaa:	d019      	beq.n	3400fce0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fcac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcb0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fcb4:	4a9e      	ldr	r2, [pc, #632]	@ (3400ff30 <HAL_RCCEx_PeriphCLKConfig+0x653c>)
3400fcb6:	4293      	cmp	r3, r2
3400fcb8:	d012      	beq.n	3400fce0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fcba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcbe:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fcc2:	4a9c      	ldr	r2, [pc, #624]	@ (3400ff34 <HAL_RCCEx_PeriphCLKConfig+0x6540>)
3400fcc4:	4293      	cmp	r3, r2
3400fcc6:	d00b      	beq.n	3400fce0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fcc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fccc:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fcd0:	4a99      	ldr	r2, [pc, #612]	@ (3400ff38 <HAL_RCCEx_PeriphCLKConfig+0x6544>)
3400fcd2:	4293      	cmp	r3, r2
3400fcd4:	d004      	beq.n	3400fce0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fcd6:	f640 01af 	movw	r1, #2223	@ 0x8af
3400fcda:	4898      	ldr	r0, [pc, #608]	@ (3400ff3c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fcdc:	f7f1 ffe2 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
3400fce0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fce4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fce8:	4a8f      	ldr	r2, [pc, #572]	@ (3400ff28 <HAL_RCCEx_PeriphCLKConfig+0x6534>)
3400fcea:	4293      	cmp	r3, r2
3400fcec:	d142      	bne.n	3400fd74 <HAL_RCCEx_PeriphCLKConfig+0x6380>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400fcee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fcf4:	2b00      	cmp	r3, #0
3400fcf6:	d016      	beq.n	3400fd26 <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fcf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fcfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fd02:	d010      	beq.n	3400fd26 <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fd04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fd0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fd0e:	d00a      	beq.n	3400fd26 <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fd10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fd16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fd1a:	d004      	beq.n	3400fd26 <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fd1c:	f640 01b4 	movw	r1, #2228	@ 0x8b4
3400fd20:	4886      	ldr	r0, [pc, #536]	@ (3400ff3c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fd22:	f7f1 ffbf 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400fd26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fd2c:	2b00      	cmp	r3, #0
3400fd2e:	d005      	beq.n	3400fd3c <HAL_RCCEx_PeriphCLKConfig+0x6348>
3400fd30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fd36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fd3a:	d904      	bls.n	3400fd46 <HAL_RCCEx_PeriphCLKConfig+0x6352>
3400fd3c:	f640 01b5 	movw	r1, #2229	@ 0x8b5
3400fd40:	487e      	ldr	r0, [pc, #504]	@ (3400ff3c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fd42:	f7f1 ffaf 	bl	34001ca4 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400fd46:	4b7e      	ldr	r3, [pc, #504]	@ (3400ff40 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fd48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400fd4c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400fd50:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400fd54:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fd58:	6c91      	ldr	r1, [r2, #72]	@ 0x48
3400fd5a:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fd5e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
3400fd60:	3a01      	subs	r2, #1
3400fd62:	0412      	lsls	r2, r2, #16
3400fd64:	430a      	orrs	r2, r1
3400fd66:	4976      	ldr	r1, [pc, #472]	@ (3400ff40 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fd68:	4313      	orrs	r3, r2
3400fd6a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400fd6e:	f7f9 fb5f 	bl	34009430 <LL_RCC_IC9_Enable>
3400fd72:	e052      	b.n	3400fe1a <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
3400fd74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd78:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fd7c:	4a6b      	ldr	r2, [pc, #428]	@ (3400ff2c <HAL_RCCEx_PeriphCLKConfig+0x6538>)
3400fd7e:	4293      	cmp	r3, r2
3400fd80:	d142      	bne.n	3400fe08 <HAL_RCCEx_PeriphCLKConfig+0x6414>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400fd82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fd88:	2b00      	cmp	r3, #0
3400fd8a:	d016      	beq.n	3400fdba <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fd8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fd92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fd96:	d010      	beq.n	3400fdba <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fd98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fd9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fda2:	d00a      	beq.n	3400fdba <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fda4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fda8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fdaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fdae:	d004      	beq.n	3400fdba <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fdb0:	f640 01c1 	movw	r1, #2241	@ 0x8c1
3400fdb4:	4861      	ldr	r0, [pc, #388]	@ (3400ff3c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fdb6:	f7f1 ff75 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400fdba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fdc0:	2b00      	cmp	r3, #0
3400fdc2:	d005      	beq.n	3400fdd0 <HAL_RCCEx_PeriphCLKConfig+0x63dc>
3400fdc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fdca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fdce:	d904      	bls.n	3400fdda <HAL_RCCEx_PeriphCLKConfig+0x63e6>
3400fdd0:	f640 01c2 	movw	r1, #2242	@ 0x8c2
3400fdd4:	4859      	ldr	r0, [pc, #356]	@ (3400ff3c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fdd6:	f7f1 ff65 	bl	34001ca4 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400fdda:	4b59      	ldr	r3, [pc, #356]	@ (3400ff40 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fddc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400fde0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400fde4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400fde8:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fdec:	6f11      	ldr	r1, [r2, #112]	@ 0x70
3400fdee:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fdf2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
3400fdf4:	3a01      	subs	r2, #1
3400fdf6:	0412      	lsls	r2, r2, #16
3400fdf8:	430a      	orrs	r2, r1
3400fdfa:	4951      	ldr	r1, [pc, #324]	@ (3400ff40 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fdfc:	4313      	orrs	r3, r2
3400fdfe:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400fe02:	f7f9 fc15 	bl	34009630 <LL_RCC_IC14_Enable>
3400fe06:	e008      	b.n	3400fe1a <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
3400fe08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe0c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fe10:	4a44      	ldr	r2, [pc, #272]	@ (3400ff24 <HAL_RCCEx_PeriphCLKConfig+0x6530>)
3400fe12:	4293      	cmp	r3, r2
3400fe14:	d101      	bne.n	3400fe1a <HAL_RCCEx_PeriphCLKConfig+0x6426>
    {
      LL_RCC_CLKP_Enable();
3400fe16:	f7f9 fdcb 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
3400fe1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe1e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fe22:	4618      	mov	r0, r3
3400fe24:	f7f8 fd67 	bl	340088f6 <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
3400fe28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe2c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fe30:	2100      	movs	r1, #0
3400fe32:	6239      	str	r1, [r7, #32]
3400fe34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3400fe38:	627b      	str	r3, [r7, #36]	@ 0x24
3400fe3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
3400fe3e:	4603      	mov	r3, r0
3400fe40:	460a      	mov	r2, r1
3400fe42:	4313      	orrs	r3, r2
3400fe44:	d02e      	beq.n	3400fea4 <HAL_RCCEx_PeriphCLKConfig+0x64b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
3400fe46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe4a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fe4e:	4a3d      	ldr	r2, [pc, #244]	@ (3400ff44 <HAL_RCCEx_PeriphCLKConfig+0x6550>)
3400fe50:	4293      	cmp	r3, r2
3400fe52:	d012      	beq.n	3400fe7a <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400fe54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe58:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fe5c:	4a3a      	ldr	r2, [pc, #232]	@ (3400ff48 <HAL_RCCEx_PeriphCLKConfig+0x6554>)
3400fe5e:	4293      	cmp	r3, r2
3400fe60:	d00b      	beq.n	3400fe7a <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400fe62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe66:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fe6a:	4a38      	ldr	r2, [pc, #224]	@ (3400ff4c <HAL_RCCEx_PeriphCLKConfig+0x6558>)
3400fe6c:	4293      	cmp	r3, r2
3400fe6e:	d004      	beq.n	3400fe7a <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400fe70:	f640 01dc 	movw	r1, #2268	@ 0x8dc
3400fe74:	4831      	ldr	r0, [pc, #196]	@ (3400ff3c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fe76:	f7f1 ff15 	bl	34001ca4 <assert_failed>

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3400fe7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe7e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fe82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400fe86:	4618      	mov	r0, r3
3400fe88:	f7f8 fcdd 	bl	34008846 <LL_RCC_SetOTGPHYCKREFClockSource>
3400fe8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe90:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fe94:	0fdb      	lsrs	r3, r3, #31
3400fe96:	2b01      	cmp	r3, #1
3400fe98:	d102      	bne.n	3400fea0 <HAL_RCCEx_PeriphCLKConfig+0x64ac>
3400fe9a:	f7f8 fa7f 	bl	3400839c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400fe9e:	e001      	b.n	3400fea4 <HAL_RCCEx_PeriphCLKConfig+0x64b0>
3400fea0:	f7f8 fa6c 	bl	3400837c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
3400fea4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fea8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400feac:	2100      	movs	r1, #0
3400feae:	61b9      	str	r1, [r7, #24]
3400feb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3400feb4:	61fb      	str	r3, [r7, #28]
3400feb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
3400feba:	4603      	mov	r3, r0
3400febc:	460a      	mov	r2, r1
3400febe:	4313      	orrs	r3, r2
3400fec0:	d04e      	beq.n	3400ff60 <HAL_RCCEx_PeriphCLKConfig+0x656c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
3400fec2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fec6:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400feca:	4a21      	ldr	r2, [pc, #132]	@ (3400ff50 <HAL_RCCEx_PeriphCLKConfig+0x655c>)
3400fecc:	4293      	cmp	r3, r2
3400fece:	d012      	beq.n	3400fef6 <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400fed0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fed4:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fed8:	4a1e      	ldr	r2, [pc, #120]	@ (3400ff54 <HAL_RCCEx_PeriphCLKConfig+0x6560>)
3400feda:	4293      	cmp	r3, r2
3400fedc:	d00b      	beq.n	3400fef6 <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400fede:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fee2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fee6:	4a1c      	ldr	r2, [pc, #112]	@ (3400ff58 <HAL_RCCEx_PeriphCLKConfig+0x6564>)
3400fee8:	4293      	cmp	r3, r2
3400feea:	d004      	beq.n	3400fef6 <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400feec:	f640 01e6 	movw	r1, #2278	@ 0x8e6
3400fef0:	4812      	ldr	r0, [pc, #72]	@ (3400ff3c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fef2:	f7f1 fed7 	bl	34001ca4 <assert_failed>

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3400fef6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fefa:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fefe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400ff02:	4618      	mov	r0, r3
3400ff04:	f7f8 fc9f 	bl	34008846 <LL_RCC_SetOTGPHYCKREFClockSource>
3400ff08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff0c:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400ff10:	0fdb      	lsrs	r3, r3, #31
3400ff12:	2b01      	cmp	r3, #1
3400ff14:	d122      	bne.n	3400ff5c <HAL_RCCEx_PeriphCLKConfig+0x6568>
3400ff16:	f7f8 fa41 	bl	3400839c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400ff1a:	e021      	b.n	3400ff60 <HAL_RCCEx_PeriphCLKConfig+0x656c>
3400ff1c:	07010034 	.word	0x07010034
3400ff20:	07000434 	.word	0x07000434
3400ff24:	07010434 	.word	0x07010434
3400ff28:	07020434 	.word	0x07020434
3400ff2c:	07030434 	.word	0x07030434
3400ff30:	07040434 	.word	0x07040434
3400ff34:	07050434 	.word	0x07050434
3400ff38:	07060434 	.word	0x07060434
3400ff3c:	3401e910 	.word	0x3401e910
3400ff40:	56028000 	.word	0x56028000
3400ff44:	01001014 	.word	0x01001014
3400ff48:	01011014 	.word	0x01011014
3400ff4c:	81011014 	.word	0x81011014
3400ff50:	01001814 	.word	0x01001814
3400ff54:	01011814 	.word	0x01011814
3400ff58:	81011814 	.word	0x81011814
3400ff5c:	f7f8 fa0e 	bl	3400837c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
3400ff60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff64:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ff68:	2100      	movs	r1, #0
3400ff6a:	6139      	str	r1, [r7, #16]
3400ff6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400ff70:	617b      	str	r3, [r7, #20]
3400ff72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
3400ff76:	4603      	mov	r3, r0
3400ff78:	460a      	mov	r2, r1
3400ff7a:	4313      	orrs	r3, r2
3400ff7c:	f000 8090 	beq.w	340100a0 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
3400ff80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff84:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ff88:	4ab5      	ldr	r2, [pc, #724]	@ (34010260 <HAL_RCCEx_PeriphCLKConfig+0x686c>)
3400ff8a:	4293      	cmp	r3, r2
3400ff8c:	d020      	beq.n	3400ffd0 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400ff8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff92:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ff96:	4ab3      	ldr	r2, [pc, #716]	@ (34010264 <HAL_RCCEx_PeriphCLKConfig+0x6870>)
3400ff98:	4293      	cmp	r3, r2
3400ff9a:	d019      	beq.n	3400ffd0 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400ff9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffa0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ffa4:	4ab0      	ldr	r2, [pc, #704]	@ (34010268 <HAL_RCCEx_PeriphCLKConfig+0x6874>)
3400ffa6:	4293      	cmp	r3, r2
3400ffa8:	d012      	beq.n	3400ffd0 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400ffaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffae:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ffb2:	4aae      	ldr	r2, [pc, #696]	@ (3401026c <HAL_RCCEx_PeriphCLKConfig+0x6878>)
3400ffb4:	4293      	cmp	r3, r2
3400ffb6:	d00b      	beq.n	3400ffd0 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400ffb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffbc:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ffc0:	4aab      	ldr	r2, [pc, #684]	@ (34010270 <HAL_RCCEx_PeriphCLKConfig+0x687c>)
3400ffc2:	4293      	cmp	r3, r2
3400ffc4:	d004      	beq.n	3400ffd0 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400ffc6:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
3400ffca:	48aa      	ldr	r0, [pc, #680]	@ (34010274 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400ffcc:	f7f1 fe6a 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
3400ffd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffd4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ffd8:	4aa3      	ldr	r2, [pc, #652]	@ (34010268 <HAL_RCCEx_PeriphCLKConfig+0x6874>)
3400ffda:	4293      	cmp	r3, r2
3400ffdc:	d142      	bne.n	34010064 <HAL_RCCEx_PeriphCLKConfig+0x6670>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400ffde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffe2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ffe4:	2b00      	cmp	r3, #0
3400ffe6:	d016      	beq.n	34010016 <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400ffe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ffee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fff2:	d010      	beq.n	34010016 <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400fff4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fffe:	d00a      	beq.n	34010016 <HAL_RCCEx_PeriphCLKConfig+0x6622>
34010000:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34010006:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401000a:	d004      	beq.n	34010016 <HAL_RCCEx_PeriphCLKConfig+0x6622>
3401000c:	f640 01f5 	movw	r1, #2293	@ 0x8f5
34010010:	4898      	ldr	r0, [pc, #608]	@ (34010274 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34010012:	f7f1 fe47 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34010016:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401001a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3401001c:	2b00      	cmp	r3, #0
3401001e:	d005      	beq.n	3401002c <HAL_RCCEx_PeriphCLKConfig+0x6638>
34010020:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010024:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34010026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401002a:	d904      	bls.n	34010036 <HAL_RCCEx_PeriphCLKConfig+0x6642>
3401002c:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34010030:	4890      	ldr	r0, [pc, #576]	@ (34010274 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34010032:	f7f1 fe37 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34010036:	4b90      	ldr	r3, [pc, #576]	@ (34010278 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34010038:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3401003c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34010040:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34010044:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34010048:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3401004a:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3401004e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34010050:	3a01      	subs	r2, #1
34010052:	0412      	lsls	r2, r2, #16
34010054:	430a      	orrs	r2, r1
34010056:	4988      	ldr	r1, [pc, #544]	@ (34010278 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34010058:	4313      	orrs	r3, r2
3401005a:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3401005e:	f7f9 fb27 	bl	340096b0 <LL_RCC_IC15_Enable>
34010062:	e008      	b.n	34010076 <HAL_RCCEx_PeriphCLKConfig+0x6682>
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34010064:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010068:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3401006c:	4a7d      	ldr	r2, [pc, #500]	@ (34010264 <HAL_RCCEx_PeriphCLKConfig+0x6870>)
3401006e:	4293      	cmp	r3, r2
34010070:	d101      	bne.n	34010076 <HAL_RCCEx_PeriphCLKConfig+0x6682>
    {
      LL_RCC_CLKP_Enable();
34010072:	f7f9 fc9d 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34010076:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401007a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3401007e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34010082:	4618      	mov	r0, r3
34010084:	f7f8 fbd4 	bl	34008830 <LL_RCC_SetOTGPHYClockSource>
34010088:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401008c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34010090:	0fdb      	lsrs	r3, r3, #31
34010092:	2b01      	cmp	r3, #1
34010094:	d102      	bne.n	3401009c <HAL_RCCEx_PeriphCLKConfig+0x66a8>
34010096:	f7f8 f981 	bl	3400839c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3401009a:	e001      	b.n	340100a0 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
3401009c:	f7f8 f96e 	bl	3400837c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
340100a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100a4:	e9d3 2300 	ldrd	r2, r3, [r3]
340100a8:	2100      	movs	r1, #0
340100aa:	60b9      	str	r1, [r7, #8]
340100ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340100b0:	60fb      	str	r3, [r7, #12]
340100b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
340100b6:	4603      	mov	r3, r0
340100b8:	460a      	mov	r2, r1
340100ba:	4313      	orrs	r3, r2
340100bc:	f000 8090 	beq.w	340101e0 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
340100c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100c4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340100c8:	4a6c      	ldr	r2, [pc, #432]	@ (3401027c <HAL_RCCEx_PeriphCLKConfig+0x6888>)
340100ca:	4293      	cmp	r3, r2
340100cc:	d020      	beq.n	34010110 <HAL_RCCEx_PeriphCLKConfig+0x671c>
340100ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100d2:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340100d6:	4a6a      	ldr	r2, [pc, #424]	@ (34010280 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
340100d8:	4293      	cmp	r3, r2
340100da:	d019      	beq.n	34010110 <HAL_RCCEx_PeriphCLKConfig+0x671c>
340100dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100e0:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340100e4:	4a67      	ldr	r2, [pc, #412]	@ (34010284 <HAL_RCCEx_PeriphCLKConfig+0x6890>)
340100e6:	4293      	cmp	r3, r2
340100e8:	d012      	beq.n	34010110 <HAL_RCCEx_PeriphCLKConfig+0x671c>
340100ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100ee:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340100f2:	4a65      	ldr	r2, [pc, #404]	@ (34010288 <HAL_RCCEx_PeriphCLKConfig+0x6894>)
340100f4:	4293      	cmp	r3, r2
340100f6:	d00b      	beq.n	34010110 <HAL_RCCEx_PeriphCLKConfig+0x671c>
340100f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100fc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34010100:	4a62      	ldr	r2, [pc, #392]	@ (3401028c <HAL_RCCEx_PeriphCLKConfig+0x6898>)
34010102:	4293      	cmp	r3, r2
34010104:	d004      	beq.n	34010110 <HAL_RCCEx_PeriphCLKConfig+0x671c>
34010106:	f44f 6111 	mov.w	r1, #2320	@ 0x910
3401010a:	485a      	ldr	r0, [pc, #360]	@ (34010274 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3401010c:	f7f1 fdca 	bl	34001ca4 <assert_failed>

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34010110:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010114:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34010118:	4a5a      	ldr	r2, [pc, #360]	@ (34010284 <HAL_RCCEx_PeriphCLKConfig+0x6890>)
3401011a:	4293      	cmp	r3, r2
3401011c:	d142      	bne.n	340101a4 <HAL_RCCEx_PeriphCLKConfig+0x67b0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3401011e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34010124:	2b00      	cmp	r3, #0
34010126:	d016      	beq.n	34010156 <HAL_RCCEx_PeriphCLKConfig+0x6762>
34010128:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401012c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3401012e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010132:	d010      	beq.n	34010156 <HAL_RCCEx_PeriphCLKConfig+0x6762>
34010134:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3401013a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401013e:	d00a      	beq.n	34010156 <HAL_RCCEx_PeriphCLKConfig+0x6762>
34010140:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34010146:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401014a:	d004      	beq.n	34010156 <HAL_RCCEx_PeriphCLKConfig+0x6762>
3401014c:	f640 1115 	movw	r1, #2325	@ 0x915
34010150:	4848      	ldr	r0, [pc, #288]	@ (34010274 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34010152:	f7f1 fda7 	bl	34001ca4 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34010156:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401015a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3401015c:	2b00      	cmp	r3, #0
3401015e:	d005      	beq.n	3401016c <HAL_RCCEx_PeriphCLKConfig+0x6778>
34010160:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34010166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401016a:	d904      	bls.n	34010176 <HAL_RCCEx_PeriphCLKConfig+0x6782>
3401016c:	f640 1116 	movw	r1, #2326	@ 0x916
34010170:	4840      	ldr	r0, [pc, #256]	@ (34010274 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34010172:	f7f1 fd97 	bl	34001ca4 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34010176:	4b40      	ldr	r3, [pc, #256]	@ (34010278 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34010178:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3401017c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34010180:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34010184:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34010188:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3401018a:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3401018e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34010190:	3a01      	subs	r2, #1
34010192:	0412      	lsls	r2, r2, #16
34010194:	430a      	orrs	r2, r1
34010196:	4938      	ldr	r1, [pc, #224]	@ (34010278 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34010198:	4313      	orrs	r3, r2
3401019a:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3401019e:	f7f9 fa87 	bl	340096b0 <LL_RCC_IC15_Enable>
340101a2:	e008      	b.n	340101b6 <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
340101a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101a8:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340101ac:	4a34      	ldr	r2, [pc, #208]	@ (34010280 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
340101ae:	4293      	cmp	r3, r2
340101b0:	d101      	bne.n	340101b6 <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    {
      LL_RCC_CLKP_Enable();
340101b2:	f7f9 fbfd 	bl	340099b0 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340101b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101ba:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340101be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
340101c2:	4618      	mov	r0, r3
340101c4:	f7f8 fb34 	bl	34008830 <LL_RCC_SetOTGPHYClockSource>
340101c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101cc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340101d0:	0fdb      	lsrs	r3, r3, #31
340101d2:	2b01      	cmp	r3, #1
340101d4:	d102      	bne.n	340101dc <HAL_RCCEx_PeriphCLKConfig+0x67e8>
340101d6:	f7f8 f8e1 	bl	3400839c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
340101da:	e001      	b.n	340101e0 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
340101dc:	f7f8 f8ce 	bl	3400837c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
340101e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101e4:	e9d3 2300 	ldrd	r2, r3, [r3]
340101e8:	2100      	movs	r1, #0
340101ea:	6039      	str	r1, [r7, #0]
340101ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340101f0:	607b      	str	r3, [r7, #4]
340101f2:	e9d7 0100 	ldrd	r0, r1, [r7]
340101f6:	4603      	mov	r3, r0
340101f8:	460a      	mov	r2, r1
340101fa:	4313      	orrs	r3, r2
340101fc:	d023      	beq.n	34010246 <HAL_RCCEx_PeriphCLKConfig+0x6852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
340101fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010202:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34010206:	2b00      	cmp	r3, #0
34010208:	d016      	beq.n	34010238 <HAL_RCCEx_PeriphCLKConfig+0x6844>
3401020a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401020e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34010212:	2b01      	cmp	r3, #1
34010214:	d010      	beq.n	34010238 <HAL_RCCEx_PeriphCLKConfig+0x6844>
34010216:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401021a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3401021e:	2b02      	cmp	r3, #2
34010220:	d00a      	beq.n	34010238 <HAL_RCCEx_PeriphCLKConfig+0x6844>
34010222:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010226:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3401022a:	2b03      	cmp	r3, #3
3401022c:	d004      	beq.n	34010238 <HAL_RCCEx_PeriphCLKConfig+0x6844>
3401022e:	f44f 6113 	mov.w	r1, #2352	@ 0x930
34010232:	4810      	ldr	r0, [pc, #64]	@ (34010274 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34010234:	f7f1 fd36 	bl	34001ca4 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
34010238:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401023c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34010240:	4618      	mov	r0, r3
34010242:	f7f8 fd31 	bl	34008ca8 <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
34010246:	f897 338e 	ldrb.w	r3, [r7, #910]	@ 0x38e
3401024a:	2b00      	cmp	r3, #0
3401024c:	d101      	bne.n	34010252 <HAL_RCCEx_PeriphCLKConfig+0x685e>
  {
    return HAL_OK;
3401024e:	2300      	movs	r3, #0
34010250:	e000      	b.n	34010254 <HAL_RCCEx_PeriphCLKConfig+0x6860>
  }
  return HAL_ERROR;
34010252:	2301      	movs	r3, #1
}
34010254:	4618      	mov	r0, r3
34010256:	f507 7764 	add.w	r7, r7, #912	@ 0x390
3401025a:	46bd      	mov	sp, r7
3401025c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34010260:	03000c14 	.word	0x03000c14
34010264:	03010c14 	.word	0x03010c14
34010268:	03020c14 	.word	0x03020c14
3401026c:	03030c14 	.word	0x03030c14
34010270:	83030c14 	.word	0x83030c14
34010274:	3401e910 	.word	0x3401e910
34010278:	56028000 	.word	0x56028000
3401027c:	03001414 	.word	0x03001414
34010280:	03011414 	.word	0x03011414
34010284:	03021414 	.word	0x03021414
34010288:	03031414 	.word	0x03031414
3401028c:	83031414 	.word	0x83031414

34010290 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
34010290:	b590      	push	{r4, r7, lr}
34010292:	b085      	sub	sp, #20
34010294:	af00      	add	r7, sp, #0
34010296:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
3401029a:	2100      	movs	r1, #0
3401029c:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
3401029e:	e9d7 0100 	ldrd	r0, r1, [r7]
340102a2:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
340102a6:	ea50 0104 	orrs.w	r1, r0, r4
340102aa:	f000 8436 	beq.w	34010b1a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
340102ae:	e9d7 0100 	ldrd	r0, r1, [r7]
340102b2:	2801      	cmp	r0, #1
340102b4:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
340102b8:	f080 8434 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340102bc:	e9d7 0100 	ldrd	r0, r1, [r7]
340102c0:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
340102c4:	ea50 0104 	orrs.w	r1, r0, r4
340102c8:	f000 8422 	beq.w	34010b10 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
340102cc:	e9d7 0100 	ldrd	r0, r1, [r7]
340102d0:	2801      	cmp	r0, #1
340102d2:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
340102d6:	f080 8425 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340102da:	e9d7 0100 	ldrd	r0, r1, [r7]
340102de:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
340102e2:	ea50 0104 	orrs.w	r1, r0, r4
340102e6:	f000 840e 	beq.w	34010b06 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
340102ea:	e9d7 0100 	ldrd	r0, r1, [r7]
340102ee:	2801      	cmp	r0, #1
340102f0:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
340102f4:	f080 8416 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340102f8:	e9d7 0100 	ldrd	r0, r1, [r7]
340102fc:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
34010300:	ea50 0104 	orrs.w	r1, r0, r4
34010304:	f000 83fa 	beq.w	34010afc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
34010308:	e9d7 0100 	ldrd	r0, r1, [r7]
3401030c:	2801      	cmp	r0, #1
3401030e:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
34010312:	f080 8407 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010316:	e9d7 0100 	ldrd	r0, r1, [r7]
3401031a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
3401031e:	ea50 0104 	orrs.w	r1, r0, r4
34010322:	f000 83e6 	beq.w	34010af2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
34010326:	e9d7 0100 	ldrd	r0, r1, [r7]
3401032a:	2801      	cmp	r0, #1
3401032c:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34010330:	f080 83f8 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010334:	e9d7 0100 	ldrd	r0, r1, [r7]
34010338:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
3401033c:	ea50 0104 	orrs.w	r1, r0, r4
34010340:	f000 83d2 	beq.w	34010ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34010344:	e9d7 0100 	ldrd	r0, r1, [r7]
34010348:	2801      	cmp	r0, #1
3401034a:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
3401034e:	f080 83e9 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010352:	e9d7 0100 	ldrd	r0, r1, [r7]
34010356:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
3401035a:	ea50 0104 	orrs.w	r1, r0, r4
3401035e:	f000 83be 	beq.w	34010ade <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
34010362:	e9d7 0100 	ldrd	r0, r1, [r7]
34010366:	2801      	cmp	r0, #1
34010368:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
3401036c:	f080 83da 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010370:	e9d7 0100 	ldrd	r0, r1, [r7]
34010374:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
34010378:	ea50 0104 	orrs.w	r1, r0, r4
3401037c:	f000 83aa 	beq.w	34010ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34010380:	e9d7 0100 	ldrd	r0, r1, [r7]
34010384:	2801      	cmp	r0, #1
34010386:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
3401038a:	f080 83cb 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401038e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010392:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
34010396:	ea50 0104 	orrs.w	r1, r0, r4
3401039a:	f000 8396 	beq.w	34010aca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
3401039e:	e9d7 0100 	ldrd	r0, r1, [r7]
340103a2:	2801      	cmp	r0, #1
340103a4:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
340103a8:	f080 83bc 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103ac:	e9d7 0100 	ldrd	r0, r1, [r7]
340103b0:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
340103b4:	ea50 0104 	orrs.w	r1, r0, r4
340103b8:	f000 8382 	beq.w	34010ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
340103bc:	e9d7 0100 	ldrd	r0, r1, [r7]
340103c0:	2801      	cmp	r0, #1
340103c2:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
340103c6:	f080 83ad 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103ca:	e9d7 0100 	ldrd	r0, r1, [r7]
340103ce:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
340103d2:	ea50 0104 	orrs.w	r1, r0, r4
340103d6:	f000 836e 	beq.w	34010ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
340103da:	e9d7 0100 	ldrd	r0, r1, [r7]
340103de:	2801      	cmp	r0, #1
340103e0:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
340103e4:	f080 839e 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103e8:	e9d7 0100 	ldrd	r0, r1, [r7]
340103ec:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
340103f0:	ea50 0104 	orrs.w	r1, r0, r4
340103f4:	f000 835a 	beq.w	34010aac <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
340103f8:	e9d7 0100 	ldrd	r0, r1, [r7]
340103fc:	2801      	cmp	r0, #1
340103fe:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
34010402:	f080 838f 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010406:	e9d7 0100 	ldrd	r0, r1, [r7]
3401040a:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
3401040e:	ea50 0104 	orrs.w	r1, r0, r4
34010412:	f000 8346 	beq.w	34010aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
34010416:	e9d7 0100 	ldrd	r0, r1, [r7]
3401041a:	2801      	cmp	r0, #1
3401041c:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
34010420:	f080 8380 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010424:	e9d7 0100 	ldrd	r0, r1, [r7]
34010428:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
3401042c:	ea50 0104 	orrs.w	r1, r0, r4
34010430:	f000 8332 	beq.w	34010a98 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
34010434:	e9d7 0100 	ldrd	r0, r1, [r7]
34010438:	2801      	cmp	r0, #1
3401043a:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
3401043e:	f080 8371 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010442:	e9d7 0100 	ldrd	r0, r1, [r7]
34010446:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
3401044a:	ea50 0104 	orrs.w	r1, r0, r4
3401044e:	f000 831e 	beq.w	34010a8e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
34010452:	e9d7 0100 	ldrd	r0, r1, [r7]
34010456:	2801      	cmp	r0, #1
34010458:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
3401045c:	f080 8362 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010460:	e9d7 0100 	ldrd	r0, r1, [r7]
34010464:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
34010468:	ea50 0104 	orrs.w	r1, r0, r4
3401046c:	f000 830a 	beq.w	34010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
34010470:	e9d7 0100 	ldrd	r0, r1, [r7]
34010474:	2801      	cmp	r0, #1
34010476:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
3401047a:	f080 8353 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401047e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010482:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
34010486:	ea50 0104 	orrs.w	r1, r0, r4
3401048a:	f000 82f6 	beq.w	34010a7a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
3401048e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010492:	2801      	cmp	r0, #1
34010494:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
34010498:	f080 8344 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401049c:	e9d7 0100 	ldrd	r0, r1, [r7]
340104a0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
340104a4:	ea50 0104 	orrs.w	r1, r0, r4
340104a8:	f000 82e2 	beq.w	34010a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
340104ac:	e9d7 0100 	ldrd	r0, r1, [r7]
340104b0:	2801      	cmp	r0, #1
340104b2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
340104b6:	f080 8335 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340104ba:	e9d7 0100 	ldrd	r0, r1, [r7]
340104be:	f1a1 0420 	sub.w	r4, r1, #32
340104c2:	ea50 0104 	orrs.w	r1, r0, r4
340104c6:	f000 82ce 	beq.w	34010a66 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
340104ca:	e9d7 0100 	ldrd	r0, r1, [r7]
340104ce:	2801      	cmp	r0, #1
340104d0:	f171 0120 	sbcs.w	r1, r1, #32
340104d4:	f080 8326 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340104d8:	e9d7 0100 	ldrd	r0, r1, [r7]
340104dc:	f1a1 0410 	sub.w	r4, r1, #16
340104e0:	ea50 0104 	orrs.w	r1, r0, r4
340104e4:	f000 82ba 	beq.w	34010a5c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
340104e8:	e9d7 0100 	ldrd	r0, r1, [r7]
340104ec:	2801      	cmp	r0, #1
340104ee:	f171 0110 	sbcs.w	r1, r1, #16
340104f2:	f080 8317 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340104f6:	e9d7 0100 	ldrd	r0, r1, [r7]
340104fa:	f1a1 0408 	sub.w	r4, r1, #8
340104fe:	ea50 0104 	orrs.w	r1, r0, r4
34010502:	f000 82a6 	beq.w	34010a52 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
34010506:	e9d7 0100 	ldrd	r0, r1, [r7]
3401050a:	2801      	cmp	r0, #1
3401050c:	f171 0108 	sbcs.w	r1, r1, #8
34010510:	f080 8308 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010514:	e9d7 0100 	ldrd	r0, r1, [r7]
34010518:	1f0c      	subs	r4, r1, #4
3401051a:	ea50 0104 	orrs.w	r1, r0, r4
3401051e:	f000 8293 	beq.w	34010a48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
34010522:	e9d7 0100 	ldrd	r0, r1, [r7]
34010526:	2801      	cmp	r0, #1
34010528:	f171 0104 	sbcs.w	r1, r1, #4
3401052c:	f080 82fa 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010530:	e9d7 0100 	ldrd	r0, r1, [r7]
34010534:	1e8c      	subs	r4, r1, #2
34010536:	ea50 0104 	orrs.w	r1, r0, r4
3401053a:	f000 8280 	beq.w	34010a3e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
3401053e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010542:	2801      	cmp	r0, #1
34010544:	f171 0102 	sbcs.w	r1, r1, #2
34010548:	f080 82ec 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401054c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010550:	1e4c      	subs	r4, r1, #1
34010552:	ea50 0104 	orrs.w	r1, r0, r4
34010556:	f000 826d 	beq.w	34010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
3401055a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401055e:	2801      	cmp	r0, #1
34010560:	f171 0101 	sbcs.w	r1, r1, #1
34010564:	f080 82de 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010568:	e9d7 0100 	ldrd	r0, r1, [r7]
3401056c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
34010570:	4321      	orrs	r1, r4
34010572:	f000 825a 	beq.w	34010a2a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
34010576:	e9d7 0100 	ldrd	r0, r1, [r7]
3401057a:	4cda      	ldr	r4, [pc, #872]	@ (340108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
3401057c:	42a0      	cmp	r0, r4
3401057e:	f171 0100 	sbcs.w	r1, r1, #0
34010582:	f080 82cf 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010586:	e9d7 0100 	ldrd	r0, r1, [r7]
3401058a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
3401058e:	4321      	orrs	r1, r4
34010590:	f000 8246 	beq.w	34010a20 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
34010594:	e9d7 0100 	ldrd	r0, r1, [r7]
34010598:	4cd3      	ldr	r4, [pc, #844]	@ (340108e8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
3401059a:	42a0      	cmp	r0, r4
3401059c:	f171 0100 	sbcs.w	r1, r1, #0
340105a0:	f080 82c0 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105a4:	e9d7 0100 	ldrd	r0, r1, [r7]
340105a8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
340105ac:	4321      	orrs	r1, r4
340105ae:	f000 8232 	beq.w	34010a16 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
340105b2:	e9d7 0100 	ldrd	r0, r1, [r7]
340105b6:	4ccd      	ldr	r4, [pc, #820]	@ (340108ec <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
340105b8:	42a0      	cmp	r0, r4
340105ba:	f171 0100 	sbcs.w	r1, r1, #0
340105be:	f080 82b1 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105c2:	e9d7 0100 	ldrd	r0, r1, [r7]
340105c6:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
340105ca:	4321      	orrs	r1, r4
340105cc:	f000 821e 	beq.w	34010a0c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
340105d0:	e9d7 0100 	ldrd	r0, r1, [r7]
340105d4:	4cc6      	ldr	r4, [pc, #792]	@ (340108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
340105d6:	42a0      	cmp	r0, r4
340105d8:	f171 0100 	sbcs.w	r1, r1, #0
340105dc:	f080 82a2 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105e0:	e9d7 0100 	ldrd	r0, r1, [r7]
340105e4:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
340105e8:	4321      	orrs	r1, r4
340105ea:	f000 820b 	beq.w	34010a04 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
340105ee:	e9d7 0100 	ldrd	r0, r1, [r7]
340105f2:	4cc0      	ldr	r4, [pc, #768]	@ (340108f4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
340105f4:	42a0      	cmp	r0, r4
340105f6:	f171 0100 	sbcs.w	r1, r1, #0
340105fa:	f080 8293 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105fe:	e9d7 0100 	ldrd	r0, r1, [r7]
34010602:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
34010606:	4321      	orrs	r1, r4
34010608:	f000 81f7 	beq.w	340109fa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
3401060c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010610:	4cb9      	ldr	r4, [pc, #740]	@ (340108f8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
34010612:	42a0      	cmp	r0, r4
34010614:	f171 0100 	sbcs.w	r1, r1, #0
34010618:	f080 8284 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401061c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010620:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
34010624:	4321      	orrs	r1, r4
34010626:	f000 81e2 	beq.w	340109ee <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
3401062a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401062e:	4cb3      	ldr	r4, [pc, #716]	@ (340108fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
34010630:	42a0      	cmp	r0, r4
34010632:	f171 0100 	sbcs.w	r1, r1, #0
34010636:	f080 8275 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401063a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401063e:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
34010642:	4321      	orrs	r1, r4
34010644:	f000 81cd 	beq.w	340109e2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
34010648:	e9d7 0100 	ldrd	r0, r1, [r7]
3401064c:	4cac      	ldr	r4, [pc, #688]	@ (34010900 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
3401064e:	42a0      	cmp	r0, r4
34010650:	f171 0100 	sbcs.w	r1, r1, #0
34010654:	f080 8266 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010658:	e9d7 0100 	ldrd	r0, r1, [r7]
3401065c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
34010660:	4321      	orrs	r1, r4
34010662:	f000 81b8 	beq.w	340109d6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
34010666:	e9d7 0100 	ldrd	r0, r1, [r7]
3401066a:	4ca6      	ldr	r4, [pc, #664]	@ (34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
3401066c:	42a0      	cmp	r0, r4
3401066e:	f171 0100 	sbcs.w	r1, r1, #0
34010672:	f080 8257 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010676:	e9d7 0100 	ldrd	r0, r1, [r7]
3401067a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
3401067e:	4321      	orrs	r1, r4
34010680:	f000 81a4 	beq.w	340109cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
34010684:	e9d7 0100 	ldrd	r0, r1, [r7]
34010688:	4c9f      	ldr	r4, [pc, #636]	@ (34010908 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
3401068a:	42a0      	cmp	r0, r4
3401068c:	f171 0100 	sbcs.w	r1, r1, #0
34010690:	f080 8248 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010694:	e9d7 0100 	ldrd	r0, r1, [r7]
34010698:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
3401069c:	4321      	orrs	r1, r4
3401069e:	f000 8190 	beq.w	340109c2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
340106a2:	e9d7 0100 	ldrd	r0, r1, [r7]
340106a6:	4c99      	ldr	r4, [pc, #612]	@ (3401090c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
340106a8:	42a0      	cmp	r0, r4
340106aa:	f171 0100 	sbcs.w	r1, r1, #0
340106ae:	f080 8239 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340106b2:	e9d7 0100 	ldrd	r0, r1, [r7]
340106b6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
340106ba:	4321      	orrs	r1, r4
340106bc:	f000 817c 	beq.w	340109b8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
340106c0:	e9d7 0100 	ldrd	r0, r1, [r7]
340106c4:	4c92      	ldr	r4, [pc, #584]	@ (34010910 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
340106c6:	42a0      	cmp	r0, r4
340106c8:	f171 0100 	sbcs.w	r1, r1, #0
340106cc:	f080 822a 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340106d0:	e9d7 0100 	ldrd	r0, r1, [r7]
340106d4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
340106d8:	4321      	orrs	r1, r4
340106da:	f000 8168 	beq.w	340109ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
340106de:	e9d7 0100 	ldrd	r0, r1, [r7]
340106e2:	4c8c      	ldr	r4, [pc, #560]	@ (34010914 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
340106e4:	42a0      	cmp	r0, r4
340106e6:	f171 0100 	sbcs.w	r1, r1, #0
340106ea:	f080 821b 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340106ee:	e9d7 0100 	ldrd	r0, r1, [r7]
340106f2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
340106f6:	4321      	orrs	r1, r4
340106f8:	f000 8154 	beq.w	340109a4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
340106fc:	e9d7 0100 	ldrd	r0, r1, [r7]
34010700:	4c85      	ldr	r4, [pc, #532]	@ (34010918 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
34010702:	42a0      	cmp	r0, r4
34010704:	f171 0100 	sbcs.w	r1, r1, #0
34010708:	f080 820c 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401070c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010710:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
34010714:	4321      	orrs	r1, r4
34010716:	f000 8140 	beq.w	3401099a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
3401071a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401071e:	4c7f      	ldr	r4, [pc, #508]	@ (3401091c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
34010720:	42a0      	cmp	r0, r4
34010722:	f171 0100 	sbcs.w	r1, r1, #0
34010726:	f080 81fd 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401072a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401072e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
34010732:	4321      	orrs	r1, r4
34010734:	f000 812c 	beq.w	34010990 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
34010738:	e9d7 0100 	ldrd	r0, r1, [r7]
3401073c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34010740:	f171 0100 	sbcs.w	r1, r1, #0
34010744:	f080 81ee 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010748:	e9d7 0100 	ldrd	r0, r1, [r7]
3401074c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
34010750:	4321      	orrs	r1, r4
34010752:	f000 8118 	beq.w	34010986 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
34010756:	e9d7 0100 	ldrd	r0, r1, [r7]
3401075a:	f248 0401 	movw	r4, #32769	@ 0x8001
3401075e:	42a0      	cmp	r0, r4
34010760:	f171 0100 	sbcs.w	r1, r1, #0
34010764:	f080 81de 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010768:	e9d7 0100 	ldrd	r0, r1, [r7]
3401076c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
34010770:	4321      	orrs	r1, r4
34010772:	f000 8103 	beq.w	3401097c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34010776:	e9d7 0100 	ldrd	r0, r1, [r7]
3401077a:	f244 0401 	movw	r4, #16385	@ 0x4001
3401077e:	42a0      	cmp	r0, r4
34010780:	f171 0100 	sbcs.w	r1, r1, #0
34010784:	f080 81ce 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010788:	e9d7 0100 	ldrd	r0, r1, [r7]
3401078c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
34010790:	4321      	orrs	r1, r4
34010792:	f000 80ee 	beq.w	34010972 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34010796:	e9d7 0100 	ldrd	r0, r1, [r7]
3401079a:	f242 0401 	movw	r4, #8193	@ 0x2001
3401079e:	42a0      	cmp	r0, r4
340107a0:	f171 0100 	sbcs.w	r1, r1, #0
340107a4:	f080 81be 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340107a8:	e9d7 0100 	ldrd	r0, r1, [r7]
340107ac:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
340107b0:	4321      	orrs	r1, r4
340107b2:	f000 80d9 	beq.w	34010968 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
340107b6:	e9d7 0100 	ldrd	r0, r1, [r7]
340107ba:	f241 0401 	movw	r4, #4097	@ 0x1001
340107be:	42a0      	cmp	r0, r4
340107c0:	f171 0100 	sbcs.w	r1, r1, #0
340107c4:	f080 81ae 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340107c8:	e9d7 0100 	ldrd	r0, r1, [r7]
340107cc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
340107d0:	4321      	orrs	r1, r4
340107d2:	f000 80c4 	beq.w	3401095e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
340107d6:	e9d7 0100 	ldrd	r0, r1, [r7]
340107da:	f640 0401 	movw	r4, #2049	@ 0x801
340107de:	42a0      	cmp	r0, r4
340107e0:	f171 0100 	sbcs.w	r1, r1, #0
340107e4:	f080 819e 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340107e8:	e9d7 0100 	ldrd	r0, r1, [r7]
340107ec:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
340107f0:	4321      	orrs	r1, r4
340107f2:	f000 80af 	beq.w	34010954 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
340107f6:	e9d7 0100 	ldrd	r0, r1, [r7]
340107fa:	f240 4401 	movw	r4, #1025	@ 0x401
340107fe:	42a0      	cmp	r0, r4
34010800:	f171 0100 	sbcs.w	r1, r1, #0
34010804:	f080 818e 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010808:	e9d7 0100 	ldrd	r0, r1, [r7]
3401080c:	2821      	cmp	r0, #33	@ 0x21
3401080e:	f171 0100 	sbcs.w	r1, r1, #0
34010812:	d255      	bcs.n	340108c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
34010814:	e9d7 0100 	ldrd	r0, r1, [r7]
34010818:	4301      	orrs	r1, r0
3401081a:	f000 8183 	beq.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401081e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010822:	1e42      	subs	r2, r0, #1
34010824:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
34010828:	2a20      	cmp	r2, #32
3401082a:	f173 0100 	sbcs.w	r1, r3, #0
3401082e:	f080 8179 	bcs.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010832:	2a1f      	cmp	r2, #31
34010834:	f200 8176 	bhi.w	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010838:	a101      	add	r1, pc, #4	@ (adr r1, 34010840 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
3401083a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
3401083e:	bf00      	nop
34010840:	340108cf 	.word	0x340108cf
34010844:	340108d9 	.word	0x340108d9
34010848:	34010b25 	.word	0x34010b25
3401084c:	34010929 	.word	0x34010929
34010850:	34010b25 	.word	0x34010b25
34010854:	34010b25 	.word	0x34010b25
34010858:	34010b25 	.word	0x34010b25
3401085c:	34010921 	.word	0x34010921
34010860:	34010b25 	.word	0x34010b25
34010864:	34010b25 	.word	0x34010b25
34010868:	34010b25 	.word	0x34010b25
3401086c:	34010b25 	.word	0x34010b25
34010870:	34010b25 	.word	0x34010b25
34010874:	34010b25 	.word	0x34010b25
34010878:	34010b25 	.word	0x34010b25
3401087c:	34010933 	.word	0x34010933
34010880:	34010b25 	.word	0x34010b25
34010884:	34010b25 	.word	0x34010b25
34010888:	34010b25 	.word	0x34010b25
3401088c:	34010b25 	.word	0x34010b25
34010890:	34010b25 	.word	0x34010b25
34010894:	34010b25 	.word	0x34010b25
34010898:	34010b25 	.word	0x34010b25
3401089c:	34010b25 	.word	0x34010b25
340108a0:	34010b25 	.word	0x34010b25
340108a4:	34010b25 	.word	0x34010b25
340108a8:	34010b25 	.word	0x34010b25
340108ac:	34010b25 	.word	0x34010b25
340108b0:	34010b25 	.word	0x34010b25
340108b4:	34010b25 	.word	0x34010b25
340108b8:	34010b25 	.word	0x34010b25
340108bc:	3401093f 	.word	0x3401093f
340108c0:	e9d7 2300 	ldrd	r2, r3, [r7]
340108c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
340108c8:	430b      	orrs	r3, r1
340108ca:	d03e      	beq.n	3401094a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
340108cc:	e12a      	b.n	34010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
340108ce:	2070      	movs	r0, #112	@ 0x70
340108d0:	f000 fb90 	bl	34010ff4 <RCCEx_GetADCCLKFreq>
340108d4:	60f8      	str	r0, [r7, #12]
      break;
340108d6:	e126      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
340108d8:	2007      	movs	r0, #7
340108da:	f000 fc8d 	bl	340111f8 <RCCEx_GetADFCLKFreq>
340108de:	60f8      	str	r0, [r7, #12]
      break;
340108e0:	e121      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
340108e2:	bf00      	nop
340108e4:	80000001 	.word	0x80000001
340108e8:	40000001 	.word	0x40000001
340108ec:	20000001 	.word	0x20000001
340108f0:	10000001 	.word	0x10000001
340108f4:	08000001 	.word	0x08000001
340108f8:	04000001 	.word	0x04000001
340108fc:	02000001 	.word	0x02000001
34010900:	01000001 	.word	0x01000001
34010904:	00800001 	.word	0x00800001
34010908:	00400001 	.word	0x00400001
3401090c:	00200001 	.word	0x00200001
34010910:	00100001 	.word	0x00100001
34010914:	00080001 	.word	0x00080001
34010918:	00040001 	.word	0x00040001
3401091c:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34010920:	f000 ff0c 	bl	3401173c <RCCEx_GetCSICLKFreq>
34010924:	60f8      	str	r0, [r7, #12]
      break;
34010926:	e0fe      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34010928:	2007      	movs	r0, #7
3401092a:	f000 fd51 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
3401092e:	60f8      	str	r0, [r7, #12]
      break;
34010930:	e0f9      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
34010932:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
34010936:	f000 ff4d 	bl	340117d4 <RCCEx_GetDCMIPPCLKFreq>
3401093a:	60f8      	str	r0, [r7, #12]
      break;
3401093c:	e0f3      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
3401093e:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
34010942:	f000 ffd1 	bl	340118e8 <RCCEx_GetETH1CLKFreq>
34010946:	60f8      	str	r0, [r7, #12]
      break;
34010948:	e0ed      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
3401094a:	2003      	movs	r0, #3
3401094c:	f001 f84c 	bl	340119e8 <RCCEx_GetETH1PTPCLKFreq>
34010950:	60f8      	str	r0, [r7, #12]
      break;
34010952:	e0e8      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
34010954:	2003      	movs	r0, #3
34010956:	f001 f8cb 	bl	34011af0 <RCCEx_GetFDCANCLKFreq>
3401095a:	60f8      	str	r0, [r7, #12]
      break;
3401095c:	e0e3      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
3401095e:	2030      	movs	r0, #48	@ 0x30
34010960:	f001 f946 	bl	34011bf0 <RCCEx_GetFMCCLKFreq>
34010964:	60f8      	str	r0, [r7, #12]
      break;
34010966:	e0de      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34010968:	4871      	ldr	r0, [pc, #452]	@ (34010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
3401096a:	f001 f9f9 	bl	34011d60 <RCCEx_GetI2CCLKFreq>
3401096e:	60f8      	str	r0, [r7, #12]
      break;
34010970:	e0d9      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34010972:	4870      	ldr	r0, [pc, #448]	@ (34010b34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
34010974:	f001 f9f4 	bl	34011d60 <RCCEx_GetI2CCLKFreq>
34010978:	60f8      	str	r0, [r7, #12]
      break;
3401097a:	e0d4      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
3401097c:	486e      	ldr	r0, [pc, #440]	@ (34010b38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
3401097e:	f001 f9ef 	bl	34011d60 <RCCEx_GetI2CCLKFreq>
34010982:	60f8      	str	r0, [r7, #12]
      break;
34010984:	e0cf      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
34010986:	486d      	ldr	r0, [pc, #436]	@ (34010b3c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
34010988:	f001 f9ea 	bl	34011d60 <RCCEx_GetI2CCLKFreq>
3401098c:	60f8      	str	r0, [r7, #12]
      break;
3401098e:	e0ca      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34010990:	486b      	ldr	r0, [pc, #428]	@ (34010b40 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
34010992:	f001 fb8d 	bl	340120b0 <RCCEx_GetI3CCLKFreq>
34010996:	60f8      	str	r0, [r7, #12]
      break;
34010998:	e0c5      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3401099a:	486a      	ldr	r0, [pc, #424]	@ (34010b44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
3401099c:	f001 fb88 	bl	340120b0 <RCCEx_GetI3CCLKFreq>
340109a0:	60f8      	str	r0, [r7, #12]
      break;
340109a2:	e0c0      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
340109a4:	4868      	ldr	r0, [pc, #416]	@ (34010b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
340109a6:	f001 fcb7 	bl	34012318 <RCCEx_GetLPTIMCLKFreq>
340109aa:	60f8      	str	r0, [r7, #12]
      break;
340109ac:	e0bb      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
340109ae:	4867      	ldr	r0, [pc, #412]	@ (34010b4c <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
340109b0:	f001 fcb2 	bl	34012318 <RCCEx_GetLPTIMCLKFreq>
340109b4:	60f8      	str	r0, [r7, #12]
      break;
340109b6:	e0b6      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
340109b8:	4865      	ldr	r0, [pc, #404]	@ (34010b50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
340109ba:	f001 fcad 	bl	34012318 <RCCEx_GetLPTIMCLKFreq>
340109be:	60f8      	str	r0, [r7, #12]
      break;
340109c0:	e0b1      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
340109c2:	4864      	ldr	r0, [pc, #400]	@ (34010b54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
340109c4:	f001 fca8 	bl	34012318 <RCCEx_GetLPTIMCLKFreq>
340109c8:	60f8      	str	r0, [r7, #12]
      break;
340109ca:	e0ac      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
340109cc:	4862      	ldr	r0, [pc, #392]	@ (34010b58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
340109ce:	f001 fca3 	bl	34012318 <RCCEx_GetLPTIMCLKFreq>
340109d2:	60f8      	str	r0, [r7, #12]
      break;
340109d4:	e0a7      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
340109d6:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
340109da:	f001 fe47 	bl	3401266c <RCCEx_GetLPUARTCLKFreq>
340109de:	60f8      	str	r0, [r7, #12]
      break;
340109e0:	e0a1      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
340109e2:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
340109e6:	f001 ff43 	bl	34012870 <RCCEx_GetLTDCCLKFreq>
340109ea:	60f8      	str	r0, [r7, #12]
      break;
340109ec:	e09b      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
340109ee:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
340109f2:	f001 ffc7 	bl	34012984 <RCCEx_GetMDFCLKFreq>
340109f6:	60f8      	str	r0, [r7, #12]
      break;
340109f8:	e095      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
340109fa:	2030      	movs	r0, #48	@ 0x30
340109fc:	f002 f8cc 	bl	34012b98 <RCCEx_GetPSSICLKFreq>
34010a00:	60f8      	str	r0, [r7, #12]
      break;
34010a02:	e090      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
34010a04:	f002 f94a 	bl	34012c9c <RCCEx_GetRTCCLKFreq>
34010a08:	60f8      	str	r0, [r7, #12]
      break;
34010a0a:	e08c      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34010a0c:	4853      	ldr	r0, [pc, #332]	@ (34010b5c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
34010a0e:	f002 f997 	bl	34012d40 <RCCEx_GetSAICLKFreq>
34010a12:	60f8      	str	r0, [r7, #12]
      break;
34010a14:	e087      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34010a16:	4852      	ldr	r0, [pc, #328]	@ (34010b60 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
34010a18:	f002 f992 	bl	34012d40 <RCCEx_GetSAICLKFreq>
34010a1c:	60f8      	str	r0, [r7, #12]
      break;
34010a1e:	e082      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34010a20:	4850      	ldr	r0, [pc, #320]	@ (34010b64 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
34010a22:	f002 faf3 	bl	3401300c <RCCEx_GetSDMMCCLKFreq>
34010a26:	60f8      	str	r0, [r7, #12]
      break;
34010a28:	e07d      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34010a2a:	484f      	ldr	r0, [pc, #316]	@ (34010b68 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
34010a2c:	f002 faee 	bl	3401300c <RCCEx_GetSDMMCCLKFreq>
34010a30:	60f8      	str	r0, [r7, #12]
      break;
34010a32:	e078      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34010a34:	2007      	movs	r0, #7
34010a36:	f002 fbd3 	bl	340131e0 <RCCEx_GetSPDIFRXCLKFreq>
34010a3a:	60f8      	str	r0, [r7, #12]
      break;
34010a3c:	e073      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34010a3e:	484b      	ldr	r0, [pc, #300]	@ (34010b6c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
34010a40:	f002 fcb2 	bl	340133a8 <RCCEx_GetSPICLKFreq>
34010a44:	60f8      	str	r0, [r7, #12]
      break;
34010a46:	e06e      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34010a48:	4849      	ldr	r0, [pc, #292]	@ (34010b70 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
34010a4a:	f002 fcad 	bl	340133a8 <RCCEx_GetSPICLKFreq>
34010a4e:	60f8      	str	r0, [r7, #12]
      break;
34010a50:	e069      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34010a52:	4848      	ldr	r0, [pc, #288]	@ (34010b74 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
34010a54:	f002 fca8 	bl	340133a8 <RCCEx_GetSPICLKFreq>
34010a58:	60f8      	str	r0, [r7, #12]
      break;
34010a5a:	e064      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34010a5c:	4846      	ldr	r0, [pc, #280]	@ (34010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
34010a5e:	f002 fca3 	bl	340133a8 <RCCEx_GetSPICLKFreq>
34010a62:	60f8      	str	r0, [r7, #12]
      break;
34010a64:	e05f      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34010a66:	4845      	ldr	r0, [pc, #276]	@ (34010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
34010a68:	f002 fc9e 	bl	340133a8 <RCCEx_GetSPICLKFreq>
34010a6c:	60f8      	str	r0, [r7, #12]
      break;
34010a6e:	e05a      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34010a70:	4843      	ldr	r0, [pc, #268]	@ (34010b80 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
34010a72:	f002 fc99 	bl	340133a8 <RCCEx_GetSPICLKFreq>
34010a76:	60f8      	str	r0, [r7, #12]
      break;
34010a78:	e055      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34010a7a:	4842      	ldr	r0, [pc, #264]	@ (34010b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
34010a7c:	f003 f990 	bl	34013da0 <RCCEx_GetUSARTCLKFreq>
34010a80:	60f8      	str	r0, [r7, #12]
      break;
34010a82:	e050      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34010a84:	4840      	ldr	r0, [pc, #256]	@ (34010b88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
34010a86:	f003 f98b 	bl	34013da0 <RCCEx_GetUSARTCLKFreq>
34010a8a:	60f8      	str	r0, [r7, #12]
      break;
34010a8c:	e04b      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34010a8e:	483f      	ldr	r0, [pc, #252]	@ (34010b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34010a90:	f003 f986 	bl	34013da0 <RCCEx_GetUSARTCLKFreq>
34010a94:	60f8      	str	r0, [r7, #12]
      break;
34010a96:	e046      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34010a98:	483d      	ldr	r0, [pc, #244]	@ (34010b90 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
34010a9a:	f002 ff57 	bl	3401394c <RCCEx_GetUARTCLKFreq>
34010a9e:	60f8      	str	r0, [r7, #12]
      break;
34010aa0:	e041      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34010aa2:	483c      	ldr	r0, [pc, #240]	@ (34010b94 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
34010aa4:	f002 ff52 	bl	3401394c <RCCEx_GetUARTCLKFreq>
34010aa8:	60f8      	str	r0, [r7, #12]
      break;
34010aaa:	e03c      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34010aac:	483a      	ldr	r0, [pc, #232]	@ (34010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34010aae:	f003 f977 	bl	34013da0 <RCCEx_GetUSARTCLKFreq>
34010ab2:	60f8      	str	r0, [r7, #12]
      break;
34010ab4:	e037      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34010ab6:	4839      	ldr	r0, [pc, #228]	@ (34010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
34010ab8:	f002 ff48 	bl	3401394c <RCCEx_GetUARTCLKFreq>
34010abc:	60f8      	str	r0, [r7, #12]
      break;
34010abe:	e032      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34010ac0:	4837      	ldr	r0, [pc, #220]	@ (34010ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34010ac2:	f002 ff43 	bl	3401394c <RCCEx_GetUARTCLKFreq>
34010ac6:	60f8      	str	r0, [r7, #12]
      break;
34010ac8:	e02d      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34010aca:	4836      	ldr	r0, [pc, #216]	@ (34010ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34010acc:	f002 ff3e 	bl	3401394c <RCCEx_GetUARTCLKFreq>
34010ad0:	60f8      	str	r0, [r7, #12]
      break;
34010ad2:	e028      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34010ad4:	4834      	ldr	r0, [pc, #208]	@ (34010ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
34010ad6:	f003 f963 	bl	34013da0 <RCCEx_GetUSARTCLKFreq>
34010ada:	60f8      	str	r0, [r7, #12]
      break;
34010adc:	e023      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34010ade:	4833      	ldr	r0, [pc, #204]	@ (34010bac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
34010ae0:	f003 fc3e 	bl	34014360 <RCCEx_GetOTGPHYCKREFCLKFreq>
34010ae4:	60f8      	str	r0, [r7, #12]
      break;
34010ae6:	e01e      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34010ae8:	4831      	ldr	r0, [pc, #196]	@ (34010bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34010aea:	f003 fb83 	bl	340141f4 <RCCEx_GetOTGPHYCLKFreq>
34010aee:	60f8      	str	r0, [r7, #12]
      break;
34010af0:	e019      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34010af2:	4830      	ldr	r0, [pc, #192]	@ (34010bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34010af4:	f003 fc34 	bl	34014360 <RCCEx_GetOTGPHYCKREFCLKFreq>
34010af8:	60f8      	str	r0, [r7, #12]
      break;
34010afa:	e014      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34010afc:	482e      	ldr	r0, [pc, #184]	@ (34010bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34010afe:	f003 fb79 	bl	340141f4 <RCCEx_GetOTGPHYCLKFreq>
34010b02:	60f8      	str	r0, [r7, #12]
      break;
34010b04:	e00f      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34010b06:	482d      	ldr	r0, [pc, #180]	@ (34010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34010b08:	f003 fc7a 	bl	34014400 <RCCEx_GetXSPICLKFreq>
34010b0c:	60f8      	str	r0, [r7, #12]
      break;
34010b0e:	e00a      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34010b10:	482b      	ldr	r0, [pc, #172]	@ (34010bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
34010b12:	f003 fc75 	bl	34014400 <RCCEx_GetXSPICLKFreq>
34010b16:	60f8      	str	r0, [r7, #12]
      break;
34010b18:	e005      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34010b1a:	482a      	ldr	r0, [pc, #168]	@ (34010bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34010b1c:	f003 fc70 	bl	34014400 <RCCEx_GetXSPICLKFreq>
34010b20:	60f8      	str	r0, [r7, #12]
      break;
34010b22:	e000      	b.n	34010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34010b24:	bf00      	nop
  }

  return frequency;
34010b26:	68fb      	ldr	r3, [r7, #12]
}
34010b28:	4618      	mov	r0, r3
34010b2a:	3714      	adds	r7, #20
34010b2c:	46bd      	mov	sp, r7
34010b2e:	bd90      	pop	{r4, r7, pc}
34010b30:	0700000c 	.word	0x0700000c
34010b34:	0700040c 	.word	0x0700040c
34010b38:	0700080c 	.word	0x0700080c
34010b3c:	07000c0c 	.word	0x07000c0c
34010b40:	0700100c 	.word	0x0700100c
34010b44:	0700140c 	.word	0x0700140c
34010b48:	0700082c 	.word	0x0700082c
34010b4c:	07000c2c 	.word	0x07000c2c
34010b50:	0700102c 	.word	0x0700102c
34010b54:	0700142c 	.word	0x0700142c
34010b58:	0700182c 	.word	0x0700182c
34010b5c:	07001418 	.word	0x07001418
34010b60:	07001818 	.word	0x07001818
34010b64:	0300001c 	.word	0x0300001c
34010b68:	0300041c 	.word	0x0300041c
34010b6c:	07000420 	.word	0x07000420
34010b70:	07000820 	.word	0x07000820
34010b74:	07000c20 	.word	0x07000c20
34010b78:	07001020 	.word	0x07001020
34010b7c:	07001420 	.word	0x07001420
34010b80:	07001820 	.word	0x07001820
34010b84:	07000030 	.word	0x07000030
34010b88:	07000430 	.word	0x07000430
34010b8c:	07000830 	.word	0x07000830
34010b90:	07000c30 	.word	0x07000c30
34010b94:	07001030 	.word	0x07001030
34010b98:	07001430 	.word	0x07001430
34010b9c:	07001830 	.word	0x07001830
34010ba0:	07001c30 	.word	0x07001c30
34010ba4:	07000034 	.word	0x07000034
34010ba8:	07000434 	.word	0x07000434
34010bac:	01001014 	.word	0x01001014
34010bb0:	03000c14 	.word	0x03000c14
34010bb4:	01001814 	.word	0x01001814
34010bb8:	03001414 	.word	0x03001414
34010bbc:	03000014 	.word	0x03000014
34010bc0:	03000414 	.word	0x03000414
34010bc4:	03000814 	.word	0x03000814

34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
34010bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
34010bca:	b087      	sub	sp, #28
34010bcc:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010bce:	2300      	movs	r3, #0
34010bd0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
34010bd2:	f7f8 f89b 	bl	34008d0c <LL_RCC_PLL1_IsReady>
34010bd6:	4603      	mov	r3, r0
34010bd8:	2b00      	cmp	r3, #0
34010bda:	d02a      	beq.n	34010c32 <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
34010bdc:	f7f8 f8fe 	bl	34008ddc <LL_RCC_PLL1P_IsEnabled>
34010be0:	4603      	mov	r3, r0
34010be2:	2b00      	cmp	r3, #0
34010be4:	d031      	beq.n	34010c4a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34010be6:	f7f8 f883 	bl	34008cf0 <LL_RCC_PLL1_GetSource>
34010bea:	4603      	mov	r3, r0
34010bec:	4618      	mov	r0, r3
34010bee:	f000 f957 	bl	34010ea0 <RCCEx_GetPLLSourceFreq>
34010bf2:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010bf4:	68bb      	ldr	r3, [r7, #8]
34010bf6:	2b00      	cmp	r3, #0
34010bf8:	d027      	beq.n	34010c4a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
34010bfa:	f7f8 f8bf 	bl	34008d7c <LL_RCC_PLL1_GetM>
34010bfe:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010c00:	687b      	ldr	r3, [r7, #4]
34010c02:	2b00      	cmp	r3, #0
34010c04:	d021      	beq.n	34010c4a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34010c06:	f7f8 f8a9 	bl	34008d5c <LL_RCC_PLL1_GetN>
34010c0a:	4605      	mov	r5, r0
34010c0c:	f7f8 f8fa 	bl	34008e04 <LL_RCC_PLL1_GetFRACN>
34010c10:	4606      	mov	r6, r0
34010c12:	f7f8 f8c3 	bl	34008d9c <LL_RCC_PLL1_GetP1>
34010c16:	4604      	mov	r4, r0
34010c18:	f7f8 f8d0 	bl	34008dbc <LL_RCC_PLL1_GetP2>
34010c1c:	4603      	mov	r3, r0
34010c1e:	9301      	str	r3, [sp, #4]
34010c20:	9400      	str	r4, [sp, #0]
34010c22:	4633      	mov	r3, r6
34010c24:	462a      	mov	r2, r5
34010c26:	6879      	ldr	r1, [r7, #4]
34010c28:	68b8      	ldr	r0, [r7, #8]
34010c2a:	f000 f997 	bl	34010f5c <RCCEx_CalcPLLFreq>
34010c2e:	60f8      	str	r0, [r7, #12]
34010c30:	e00b      	b.n	34010c4a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
34010c32:	f7f8 f87f 	bl	34008d34 <LL_RCC_PLL1_IsEnabledBypass>
34010c36:	4603      	mov	r3, r0
34010c38:	2b00      	cmp	r3, #0
34010c3a:	d006      	beq.n	34010c4a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34010c3c:	f7f8 f858 	bl	34008cf0 <LL_RCC_PLL1_GetSource>
34010c40:	4603      	mov	r3, r0
34010c42:	4618      	mov	r0, r3
34010c44:	f000 f92c 	bl	34010ea0 <RCCEx_GetPLLSourceFreq>
34010c48:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010c4a:	68fb      	ldr	r3, [r7, #12]
}
34010c4c:	4618      	mov	r0, r3
34010c4e:	3714      	adds	r7, #20
34010c50:	46bd      	mov	sp, r7
34010c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010c54 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
34010c54:	b5f0      	push	{r4, r5, r6, r7, lr}
34010c56:	b087      	sub	sp, #28
34010c58:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010c5a:	2300      	movs	r3, #0
34010c5c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
34010c5e:	f7f8 f8ed 	bl	34008e3c <LL_RCC_PLL2_IsReady>
34010c62:	4603      	mov	r3, r0
34010c64:	2b00      	cmp	r3, #0
34010c66:	d02a      	beq.n	34010cbe <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
34010c68:	f7f8 f950 	bl	34008f0c <LL_RCC_PLL2P_IsEnabled>
34010c6c:	4603      	mov	r3, r0
34010c6e:	2b00      	cmp	r3, #0
34010c70:	d031      	beq.n	34010cd6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34010c72:	f7f8 f8d5 	bl	34008e20 <LL_RCC_PLL2_GetSource>
34010c76:	4603      	mov	r3, r0
34010c78:	4618      	mov	r0, r3
34010c7a:	f000 f911 	bl	34010ea0 <RCCEx_GetPLLSourceFreq>
34010c7e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010c80:	68bb      	ldr	r3, [r7, #8]
34010c82:	2b00      	cmp	r3, #0
34010c84:	d027      	beq.n	34010cd6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
34010c86:	f7f8 f911 	bl	34008eac <LL_RCC_PLL2_GetM>
34010c8a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010c8c:	687b      	ldr	r3, [r7, #4]
34010c8e:	2b00      	cmp	r3, #0
34010c90:	d021      	beq.n	34010cd6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34010c92:	f7f8 f8fb 	bl	34008e8c <LL_RCC_PLL2_GetN>
34010c96:	4605      	mov	r5, r0
34010c98:	f7f8 f94c 	bl	34008f34 <LL_RCC_PLL2_GetFRACN>
34010c9c:	4606      	mov	r6, r0
34010c9e:	f7f8 f915 	bl	34008ecc <LL_RCC_PLL2_GetP1>
34010ca2:	4604      	mov	r4, r0
34010ca4:	f7f8 f922 	bl	34008eec <LL_RCC_PLL2_GetP2>
34010ca8:	4603      	mov	r3, r0
34010caa:	9301      	str	r3, [sp, #4]
34010cac:	9400      	str	r4, [sp, #0]
34010cae:	4633      	mov	r3, r6
34010cb0:	462a      	mov	r2, r5
34010cb2:	6879      	ldr	r1, [r7, #4]
34010cb4:	68b8      	ldr	r0, [r7, #8]
34010cb6:	f000 f951 	bl	34010f5c <RCCEx_CalcPLLFreq>
34010cba:	60f8      	str	r0, [r7, #12]
34010cbc:	e00b      	b.n	34010cd6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
34010cbe:	f7f8 f8d1 	bl	34008e64 <LL_RCC_PLL2_IsEnabledBypass>
34010cc2:	4603      	mov	r3, r0
34010cc4:	2b00      	cmp	r3, #0
34010cc6:	d006      	beq.n	34010cd6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34010cc8:	f7f8 f8aa 	bl	34008e20 <LL_RCC_PLL2_GetSource>
34010ccc:	4603      	mov	r3, r0
34010cce:	4618      	mov	r0, r3
34010cd0:	f000 f8e6 	bl	34010ea0 <RCCEx_GetPLLSourceFreq>
34010cd4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010cd6:	68fb      	ldr	r3, [r7, #12]
}
34010cd8:	4618      	mov	r0, r3
34010cda:	3714      	adds	r7, #20
34010cdc:	46bd      	mov	sp, r7
34010cde:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
34010ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
34010ce2:	b087      	sub	sp, #28
34010ce4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010ce6:	2300      	movs	r3, #0
34010ce8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
34010cea:	f7f8 f93f 	bl	34008f6c <LL_RCC_PLL3_IsReady>
34010cee:	4603      	mov	r3, r0
34010cf0:	2b00      	cmp	r3, #0
34010cf2:	d02a      	beq.n	34010d4a <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
34010cf4:	f7f8 f9a2 	bl	3400903c <LL_RCC_PLL3P_IsEnabled>
34010cf8:	4603      	mov	r3, r0
34010cfa:	2b00      	cmp	r3, #0
34010cfc:	d031      	beq.n	34010d62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34010cfe:	f7f8 f927 	bl	34008f50 <LL_RCC_PLL3_GetSource>
34010d02:	4603      	mov	r3, r0
34010d04:	4618      	mov	r0, r3
34010d06:	f000 f8cb 	bl	34010ea0 <RCCEx_GetPLLSourceFreq>
34010d0a:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010d0c:	68bb      	ldr	r3, [r7, #8]
34010d0e:	2b00      	cmp	r3, #0
34010d10:	d027      	beq.n	34010d62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
34010d12:	f7f8 f963 	bl	34008fdc <LL_RCC_PLL3_GetM>
34010d16:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010d18:	687b      	ldr	r3, [r7, #4]
34010d1a:	2b00      	cmp	r3, #0
34010d1c:	d021      	beq.n	34010d62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34010d1e:	f7f8 f94d 	bl	34008fbc <LL_RCC_PLL3_GetN>
34010d22:	4605      	mov	r5, r0
34010d24:	f7f8 f99e 	bl	34009064 <LL_RCC_PLL3_GetFRACN>
34010d28:	4606      	mov	r6, r0
34010d2a:	f7f8 f967 	bl	34008ffc <LL_RCC_PLL3_GetP1>
34010d2e:	4604      	mov	r4, r0
34010d30:	f7f8 f974 	bl	3400901c <LL_RCC_PLL3_GetP2>
34010d34:	4603      	mov	r3, r0
34010d36:	9301      	str	r3, [sp, #4]
34010d38:	9400      	str	r4, [sp, #0]
34010d3a:	4633      	mov	r3, r6
34010d3c:	462a      	mov	r2, r5
34010d3e:	6879      	ldr	r1, [r7, #4]
34010d40:	68b8      	ldr	r0, [r7, #8]
34010d42:	f000 f90b 	bl	34010f5c <RCCEx_CalcPLLFreq>
34010d46:	60f8      	str	r0, [r7, #12]
34010d48:	e00b      	b.n	34010d62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
34010d4a:	f7f8 f923 	bl	34008f94 <LL_RCC_PLL3_IsEnabledBypass>
34010d4e:	4603      	mov	r3, r0
34010d50:	2b00      	cmp	r3, #0
34010d52:	d006      	beq.n	34010d62 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34010d54:	f7f8 f8fc 	bl	34008f50 <LL_RCC_PLL3_GetSource>
34010d58:	4603      	mov	r3, r0
34010d5a:	4618      	mov	r0, r3
34010d5c:	f000 f8a0 	bl	34010ea0 <RCCEx_GetPLLSourceFreq>
34010d60:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010d62:	68fb      	ldr	r3, [r7, #12]
}
34010d64:	4618      	mov	r0, r3
34010d66:	3714      	adds	r7, #20
34010d68:	46bd      	mov	sp, r7
34010d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010d6c <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
34010d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
34010d6e:	b087      	sub	sp, #28
34010d70:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010d72:	2300      	movs	r3, #0
34010d74:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
34010d76:	f7f8 f991 	bl	3400909c <LL_RCC_PLL4_IsReady>
34010d7a:	4603      	mov	r3, r0
34010d7c:	2b00      	cmp	r3, #0
34010d7e:	d02a      	beq.n	34010dd6 <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
34010d80:	f7f8 f9f4 	bl	3400916c <LL_RCC_PLL4P_IsEnabled>
34010d84:	4603      	mov	r3, r0
34010d86:	2b00      	cmp	r3, #0
34010d88:	d031      	beq.n	34010dee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34010d8a:	f7f8 f979 	bl	34009080 <LL_RCC_PLL4_GetSource>
34010d8e:	4603      	mov	r3, r0
34010d90:	4618      	mov	r0, r3
34010d92:	f000 f885 	bl	34010ea0 <RCCEx_GetPLLSourceFreq>
34010d96:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010d98:	68bb      	ldr	r3, [r7, #8]
34010d9a:	2b00      	cmp	r3, #0
34010d9c:	d027      	beq.n	34010dee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
34010d9e:	f7f8 f9b5 	bl	3400910c <LL_RCC_PLL4_GetM>
34010da2:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010da4:	687b      	ldr	r3, [r7, #4]
34010da6:	2b00      	cmp	r3, #0
34010da8:	d021      	beq.n	34010dee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34010daa:	f7f8 f99f 	bl	340090ec <LL_RCC_PLL4_GetN>
34010dae:	4605      	mov	r5, r0
34010db0:	f7f8 f9f0 	bl	34009194 <LL_RCC_PLL4_GetFRACN>
34010db4:	4606      	mov	r6, r0
34010db6:	f7f8 f9b9 	bl	3400912c <LL_RCC_PLL4_GetP1>
34010dba:	4604      	mov	r4, r0
34010dbc:	f7f8 f9c6 	bl	3400914c <LL_RCC_PLL4_GetP2>
34010dc0:	4603      	mov	r3, r0
34010dc2:	9301      	str	r3, [sp, #4]
34010dc4:	9400      	str	r4, [sp, #0]
34010dc6:	4633      	mov	r3, r6
34010dc8:	462a      	mov	r2, r5
34010dca:	6879      	ldr	r1, [r7, #4]
34010dcc:	68b8      	ldr	r0, [r7, #8]
34010dce:	f000 f8c5 	bl	34010f5c <RCCEx_CalcPLLFreq>
34010dd2:	60f8      	str	r0, [r7, #12]
34010dd4:	e00b      	b.n	34010dee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
34010dd6:	f7f8 f975 	bl	340090c4 <LL_RCC_PLL4_IsEnabledBypass>
34010dda:	4603      	mov	r3, r0
34010ddc:	2b00      	cmp	r3, #0
34010dde:	d006      	beq.n	34010dee <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34010de0:	f7f8 f94e 	bl	34009080 <LL_RCC_PLL4_GetSource>
34010de4:	4603      	mov	r3, r0
34010de6:	4618      	mov	r0, r3
34010de8:	f000 f85a 	bl	34010ea0 <RCCEx_GetPLLSourceFreq>
34010dec:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010dee:	68fb      	ldr	r3, [r7, #12]
}
34010df0:	4618      	mov	r0, r3
34010df2:	3714      	adds	r7, #20
34010df4:	46bd      	mov	sp, r7
34010df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010df8 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
34010df8:	b580      	push	{r7, lr}
34010dfa:	b082      	sub	sp, #8
34010dfc:	af00      	add	r7, sp, #0
34010dfe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34010e00:	f7f7 fb60 	bl	340084c4 <LL_RCC_GetAHBPrescaler>
34010e04:	4603      	mov	r3, r0
34010e06:	0d1b      	lsrs	r3, r3, #20
34010e08:	f003 0307 	and.w	r3, r3, #7
34010e0c:	687a      	ldr	r2, [r7, #4]
34010e0e:	fa22 f303 	lsr.w	r3, r2, r3
}
34010e12:	4618      	mov	r0, r3
34010e14:	3708      	adds	r7, #8
34010e16:	46bd      	mov	sp, r7
34010e18:	bd80      	pop	{r7, pc}

34010e1a <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
34010e1a:	b580      	push	{r7, lr}
34010e1c:	b082      	sub	sp, #8
34010e1e:	af00      	add	r7, sp, #0
34010e20:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
34010e22:	f7f7 fb5d 	bl	340084e0 <LL_RCC_GetAPB1Prescaler>
34010e26:	4603      	mov	r3, r0
34010e28:	f003 0307 	and.w	r3, r3, #7
34010e2c:	687a      	ldr	r2, [r7, #4]
34010e2e:	fa22 f303 	lsr.w	r3, r2, r3
}
34010e32:	4618      	mov	r0, r3
34010e34:	3708      	adds	r7, #8
34010e36:	46bd      	mov	sp, r7
34010e38:	bd80      	pop	{r7, pc}

34010e3a <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
34010e3a:	b580      	push	{r7, lr}
34010e3c:	b082      	sub	sp, #8
34010e3e:	af00      	add	r7, sp, #0
34010e40:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34010e42:	f7f7 fb5b 	bl	340084fc <LL_RCC_GetAPB2Prescaler>
34010e46:	4603      	mov	r3, r0
34010e48:	091b      	lsrs	r3, r3, #4
34010e4a:	f003 0307 	and.w	r3, r3, #7
34010e4e:	687a      	ldr	r2, [r7, #4]
34010e50:	fa22 f303 	lsr.w	r3, r2, r3
}
34010e54:	4618      	mov	r0, r3
34010e56:	3708      	adds	r7, #8
34010e58:	46bd      	mov	sp, r7
34010e5a:	bd80      	pop	{r7, pc}

34010e5c <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
34010e5c:	b580      	push	{r7, lr}
34010e5e:	b082      	sub	sp, #8
34010e60:	af00      	add	r7, sp, #0
34010e62:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34010e64:	f7f7 fb58 	bl	34008518 <LL_RCC_GetAPB4Prescaler>
34010e68:	4603      	mov	r3, r0
34010e6a:	0b1b      	lsrs	r3, r3, #12
34010e6c:	f003 0307 	and.w	r3, r3, #7
34010e70:	687a      	ldr	r2, [r7, #4]
34010e72:	fa22 f303 	lsr.w	r3, r2, r3
}
34010e76:	4618      	mov	r0, r3
34010e78:	3708      	adds	r7, #8
34010e7a:	46bd      	mov	sp, r7
34010e7c:	bd80      	pop	{r7, pc}

34010e7e <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
34010e7e:	b580      	push	{r7, lr}
34010e80:	b082      	sub	sp, #8
34010e82:	af00      	add	r7, sp, #0
34010e84:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34010e86:	f7f7 fb55 	bl	34008534 <LL_RCC_GetAPB5Prescaler>
34010e8a:	4603      	mov	r3, r0
34010e8c:	0c1b      	lsrs	r3, r3, #16
34010e8e:	f003 0307 	and.w	r3, r3, #7
34010e92:	687a      	ldr	r2, [r7, #4]
34010e94:	fa22 f303 	lsr.w	r3, r2, r3
}
34010e98:	4618      	mov	r0, r3
34010e9a:	3708      	adds	r7, #8
34010e9c:	46bd      	mov	sp, r7
34010e9e:	bd80      	pop	{r7, pc}

34010ea0 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
34010ea0:	b580      	push	{r7, lr}
34010ea2:	b084      	sub	sp, #16
34010ea4:	af00      	add	r7, sp, #0
34010ea6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34010ea8:	2300      	movs	r3, #0
34010eaa:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
34010eac:	687b      	ldr	r3, [r7, #4]
34010eae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010eb2:	d039      	beq.n	34010f28 <RCCEx_GetPLLSourceFreq+0x88>
34010eb4:	687b      	ldr	r3, [r7, #4]
34010eb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010eba:	d838      	bhi.n	34010f2e <RCCEx_GetPLLSourceFreq+0x8e>
34010ebc:	687b      	ldr	r3, [r7, #4]
34010ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010ec2:	d029      	beq.n	34010f18 <RCCEx_GetPLLSourceFreq+0x78>
34010ec4:	687b      	ldr	r3, [r7, #4]
34010ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010eca:	d830      	bhi.n	34010f2e <RCCEx_GetPLLSourceFreq+0x8e>
34010ecc:	687b      	ldr	r3, [r7, #4]
34010ece:	2b00      	cmp	r3, #0
34010ed0:	d004      	beq.n	34010edc <RCCEx_GetPLLSourceFreq+0x3c>
34010ed2:	687b      	ldr	r3, [r7, #4]
34010ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010ed8:	d00e      	beq.n	34010ef8 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
34010eda:	e028      	b.n	34010f2e <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
34010edc:	f7f7 fa92 	bl	34008404 <LL_RCC_HSI_IsReady>
34010ee0:	4603      	mov	r3, r0
34010ee2:	2b00      	cmp	r3, #0
34010ee4:	d025      	beq.n	34010f32 <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34010ee6:	f7f7 fa9f 	bl	34008428 <LL_RCC_HSI_GetDivider>
34010eea:	4603      	mov	r3, r0
34010eec:	09db      	lsrs	r3, r3, #7
34010eee:	4a16      	ldr	r2, [pc, #88]	@ (34010f48 <RCCEx_GetPLLSourceFreq+0xa8>)
34010ef0:	fa22 f303 	lsr.w	r3, r2, r3
34010ef4:	60fb      	str	r3, [r7, #12]
      break;
34010ef6:	e01c      	b.n	34010f32 <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
34010ef8:	f7f7 faa4 	bl	34008444 <LL_RCC_MSI_IsReady>
34010efc:	4603      	mov	r3, r0
34010efe:	2b00      	cmp	r3, #0
34010f00:	d019      	beq.n	34010f36 <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34010f02:	f7f7 fab1 	bl	34008468 <LL_RCC_MSI_GetFrequency>
34010f06:	4603      	mov	r3, r0
34010f08:	2b00      	cmp	r3, #0
34010f0a:	d102      	bne.n	34010f12 <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
34010f0c:	4b0f      	ldr	r3, [pc, #60]	@ (34010f4c <RCCEx_GetPLLSourceFreq+0xac>)
34010f0e:	60fb      	str	r3, [r7, #12]
      break;
34010f10:	e011      	b.n	34010f36 <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
34010f12:	4b0f      	ldr	r3, [pc, #60]	@ (34010f50 <RCCEx_GetPLLSourceFreq+0xb0>)
34010f14:	60fb      	str	r3, [r7, #12]
      break;
34010f16:	e00e      	b.n	34010f36 <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
34010f18:	f7f7 fa62 	bl	340083e0 <LL_RCC_HSE_IsReady>
34010f1c:	4603      	mov	r3, r0
34010f1e:	2b00      	cmp	r3, #0
34010f20:	d00b      	beq.n	34010f3a <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
34010f22:	4b0c      	ldr	r3, [pc, #48]	@ (34010f54 <RCCEx_GetPLLSourceFreq+0xb4>)
34010f24:	60fb      	str	r3, [r7, #12]
      break;
34010f26:	e008      	b.n	34010f3a <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34010f28:	4b0b      	ldr	r3, [pc, #44]	@ (34010f58 <RCCEx_GetPLLSourceFreq+0xb8>)
34010f2a:	60fb      	str	r3, [r7, #12]
      break;
34010f2c:	e006      	b.n	34010f3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010f2e:	bf00      	nop
34010f30:	e004      	b.n	34010f3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010f32:	bf00      	nop
34010f34:	e002      	b.n	34010f3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010f36:	bf00      	nop
34010f38:	e000      	b.n	34010f3c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010f3a:	bf00      	nop
  }

  return pllinputfreq;
34010f3c:	68fb      	ldr	r3, [r7, #12]
}
34010f3e:	4618      	mov	r0, r3
34010f40:	3710      	adds	r7, #16
34010f42:	46bd      	mov	sp, r7
34010f44:	bd80      	pop	{r7, pc}
34010f46:	bf00      	nop
34010f48:	03d09000 	.word	0x03d09000
34010f4c:	003d0900 	.word	0x003d0900
34010f50:	00f42400 	.word	0x00f42400
34010f54:	02dc6c00 	.word	0x02dc6c00
34010f58:	00bb8000 	.word	0x00bb8000

34010f5c <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34010f5c:	b480      	push	{r7}
34010f5e:	b087      	sub	sp, #28
34010f60:	af00      	add	r7, sp, #0
34010f62:	60f8      	str	r0, [r7, #12]
34010f64:	60b9      	str	r1, [r7, #8]
34010f66:	607a      	str	r2, [r7, #4]
34010f68:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34010f6a:	68fb      	ldr	r3, [r7, #12]
34010f6c:	ee07 3a90 	vmov	s15, r3
34010f70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010f74:	687b      	ldr	r3, [r7, #4]
34010f76:	ee07 3a90 	vmov	s15, r3
34010f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
34010f7e:	683b      	ldr	r3, [r7, #0]
34010f80:	ee07 3a90 	vmov	s15, r3
34010f84:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34010f88:	eddf 5a19 	vldr	s11, [pc, #100]	@ 34010ff0 <RCCEx_CalcPLLFreq+0x94>
34010f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
34010f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
34010f94:	ee67 6a27 	vmul.f32	s13, s14, s15
34010f98:	68bb      	ldr	r3, [r7, #8]
34010f9a:	ee07 3a90 	vmov	s15, r3
34010f9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
34010fa6:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
34010faa:	6a3b      	ldr	r3, [r7, #32]
34010fac:	ee07 3a90 	vmov	s15, r3
34010fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010fb4:	edd7 6a05 	vldr	s13, [r7, #20]
34010fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
34010fbc:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
34010fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34010fc2:	ee07 3a90 	vmov	s15, r3
34010fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010fca:	edd7 6a05 	vldr	s13, [r7, #20]
34010fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
34010fd2:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
34010fd6:	edd7 7a05 	vldr	s15, [r7, #20]
34010fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34010fde:	ee17 3a90 	vmov	r3, s15
}
34010fe2:	4618      	mov	r0, r3
34010fe4:	371c      	adds	r7, #28
34010fe6:	46bd      	mov	sp, r7
34010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
34010fec:	4770      	bx	lr
34010fee:	bf00      	nop
34010ff0:	4b800000 	.word	0x4b800000

34010ff4 <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
34010ff4:	b590      	push	{r4, r7, lr}
34010ff6:	b085      	sub	sp, #20
34010ff8:	af00      	add	r7, sp, #0
34010ffa:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34010ffc:	2300      	movs	r3, #0
34010ffe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
34011000:	6878      	ldr	r0, [r7, #4]
34011002:	f7f7 fcb5 	bl	34008970 <LL_RCC_GetADCClockSource>
34011006:	4603      	mov	r3, r0
34011008:	2b70      	cmp	r3, #112	@ 0x70
3401100a:	f000 80d1 	beq.w	340111b0 <RCCEx_GetADCCLKFreq+0x1bc>
3401100e:	2b70      	cmp	r3, #112	@ 0x70
34011010:	f200 80d8 	bhi.w	340111c4 <RCCEx_GetADCCLKFreq+0x1d0>
34011014:	2b60      	cmp	r3, #96	@ 0x60
34011016:	f000 80c8 	beq.w	340111aa <RCCEx_GetADCCLKFreq+0x1b6>
3401101a:	2b60      	cmp	r3, #96	@ 0x60
3401101c:	f200 80d2 	bhi.w	340111c4 <RCCEx_GetADCCLKFreq+0x1d0>
34011020:	2b50      	cmp	r3, #80	@ 0x50
34011022:	f000 80ac 	beq.w	3401117e <RCCEx_GetADCCLKFreq+0x18a>
34011026:	2b50      	cmp	r3, #80	@ 0x50
34011028:	f200 80cc 	bhi.w	340111c4 <RCCEx_GetADCCLKFreq+0x1d0>
3401102c:	2b40      	cmp	r3, #64	@ 0x40
3401102e:	f000 80b4 	beq.w	3401119a <RCCEx_GetADCCLKFreq+0x1a6>
34011032:	2b40      	cmp	r3, #64	@ 0x40
34011034:	f200 80c6 	bhi.w	340111c4 <RCCEx_GetADCCLKFreq+0x1d0>
34011038:	2b30      	cmp	r3, #48	@ 0x30
3401103a:	d05d      	beq.n	340110f8 <RCCEx_GetADCCLKFreq+0x104>
3401103c:	2b30      	cmp	r3, #48	@ 0x30
3401103e:	f200 80c1 	bhi.w	340111c4 <RCCEx_GetADCCLKFreq+0x1d0>
34011042:	2b20      	cmp	r3, #32
34011044:	d014      	beq.n	34011070 <RCCEx_GetADCCLKFreq+0x7c>
34011046:	2b20      	cmp	r3, #32
34011048:	f200 80bc 	bhi.w	340111c4 <RCCEx_GetADCCLKFreq+0x1d0>
3401104c:	2b00      	cmp	r3, #0
3401104e:	d002      	beq.n	34011056 <RCCEx_GetADCCLKFreq+0x62>
34011050:	2b10      	cmp	r3, #16
34011052:	d008      	beq.n	34011066 <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34011054:	e0b6      	b.n	340111c4 <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011056:	f7f6 fdd7 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
3401105a:	4603      	mov	r3, r0
3401105c:	4618      	mov	r0, r3
3401105e:	f7ff fecb 	bl	34010df8 <RCCEx_GetHCLKFreq>
34011062:	60f8      	str	r0, [r7, #12]
      break;
34011064:	e0b7      	b.n	340111d6 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011066:	2007      	movs	r0, #7
34011068:	f000 f9b2 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
3401106c:	60f8      	str	r0, [r7, #12]
      break;
3401106e:	e0b2      	b.n	340111d6 <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34011070:	f7f8 f96c 	bl	3400934c <LL_RCC_IC7_IsEnabled>
34011074:	4603      	mov	r3, r0
34011076:	2b00      	cmp	r3, #0
34011078:	f000 80a6 	beq.w	340111c8 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
3401107c:	f7f8 f988 	bl	34009390 <LL_RCC_IC7_GetDivider>
34011080:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34011082:	f7f8 f977 	bl	34009374 <LL_RCC_IC7_GetSource>
34011086:	4603      	mov	r3, r0
34011088:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401108c:	d029      	beq.n	340110e2 <RCCEx_GetADCCLKFreq+0xee>
3401108e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011092:	d82f      	bhi.n	340110f4 <RCCEx_GetADCCLKFreq+0x100>
34011094:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011098:	d01a      	beq.n	340110d0 <RCCEx_GetADCCLKFreq+0xdc>
3401109a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401109e:	d829      	bhi.n	340110f4 <RCCEx_GetADCCLKFreq+0x100>
340110a0:	2b00      	cmp	r3, #0
340110a2:	d003      	beq.n	340110ac <RCCEx_GetADCCLKFreq+0xb8>
340110a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340110a8:	d009      	beq.n	340110be <RCCEx_GetADCCLKFreq+0xca>
            break;
340110aa:	e023      	b.n	340110f4 <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340110ac:	f7ff fd8c 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
340110b0:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340110b2:	68fa      	ldr	r2, [r7, #12]
340110b4:	68bb      	ldr	r3, [r7, #8]
340110b6:	fbb2 f3f3 	udiv	r3, r2, r3
340110ba:	60fb      	str	r3, [r7, #12]
            break;
340110bc:	e01b      	b.n	340110f6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340110be:	f7ff fdc9 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340110c2:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340110c4:	68fa      	ldr	r2, [r7, #12]
340110c6:	68bb      	ldr	r3, [r7, #8]
340110c8:	fbb2 f3f3 	udiv	r3, r2, r3
340110cc:	60fb      	str	r3, [r7, #12]
            break;
340110ce:	e012      	b.n	340110f6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340110d0:	f7ff fe06 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340110d4:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340110d6:	68fa      	ldr	r2, [r7, #12]
340110d8:	68bb      	ldr	r3, [r7, #8]
340110da:	fbb2 f3f3 	udiv	r3, r2, r3
340110de:	60fb      	str	r3, [r7, #12]
            break;
340110e0:	e009      	b.n	340110f6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340110e2:	f7ff fe43 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340110e6:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340110e8:	68fa      	ldr	r2, [r7, #12]
340110ea:	68bb      	ldr	r3, [r7, #8]
340110ec:	fbb2 f3f3 	udiv	r3, r2, r3
340110f0:	60fb      	str	r3, [r7, #12]
            break;
340110f2:	e000      	b.n	340110f6 <RCCEx_GetADCCLKFreq+0x102>
            break;
340110f4:	bf00      	nop
      break;
340110f6:	e067      	b.n	340111c8 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340110f8:	f7f8 f968 	bl	340093cc <LL_RCC_IC8_IsEnabled>
340110fc:	4603      	mov	r3, r0
340110fe:	2b00      	cmp	r3, #0
34011100:	d064      	beq.n	340111cc <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34011102:	f7f8 f985 	bl	34009410 <LL_RCC_IC8_GetDivider>
34011106:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34011108:	f7f8 f974 	bl	340093f4 <LL_RCC_IC8_GetSource>
3401110c:	4603      	mov	r3, r0
3401110e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011112:	d029      	beq.n	34011168 <RCCEx_GetADCCLKFreq+0x174>
34011114:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011118:	d82f      	bhi.n	3401117a <RCCEx_GetADCCLKFreq+0x186>
3401111a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401111e:	d01a      	beq.n	34011156 <RCCEx_GetADCCLKFreq+0x162>
34011120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011124:	d829      	bhi.n	3401117a <RCCEx_GetADCCLKFreq+0x186>
34011126:	2b00      	cmp	r3, #0
34011128:	d003      	beq.n	34011132 <RCCEx_GetADCCLKFreq+0x13e>
3401112a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401112e:	d009      	beq.n	34011144 <RCCEx_GetADCCLKFreq+0x150>
            break;
34011130:	e023      	b.n	3401117a <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011132:	f7ff fd49 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011136:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34011138:	68fa      	ldr	r2, [r7, #12]
3401113a:	68bb      	ldr	r3, [r7, #8]
3401113c:	fbb2 f3f3 	udiv	r3, r2, r3
34011140:	60fb      	str	r3, [r7, #12]
            break;
34011142:	e01b      	b.n	3401117c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011144:	f7ff fd86 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34011148:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3401114a:	68fa      	ldr	r2, [r7, #12]
3401114c:	68bb      	ldr	r3, [r7, #8]
3401114e:	fbb2 f3f3 	udiv	r3, r2, r3
34011152:	60fb      	str	r3, [r7, #12]
            break;
34011154:	e012      	b.n	3401117c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011156:	f7ff fdc3 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
3401115a:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3401115c:	68fa      	ldr	r2, [r7, #12]
3401115e:	68bb      	ldr	r3, [r7, #8]
34011160:	fbb2 f3f3 	udiv	r3, r2, r3
34011164:	60fb      	str	r3, [r7, #12]
            break;
34011166:	e009      	b.n	3401117c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011168:	f7ff fe00 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
3401116c:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3401116e:	68fa      	ldr	r2, [r7, #12]
34011170:	68bb      	ldr	r3, [r7, #8]
34011172:	fbb2 f3f3 	udiv	r3, r2, r3
34011176:	60fb      	str	r3, [r7, #12]
            break;
34011178:	e000      	b.n	3401117c <RCCEx_GetADCCLKFreq+0x188>
            break;
3401117a:	bf00      	nop
      break;
3401117c:	e026      	b.n	340111cc <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
3401117e:	f7f7 f941 	bl	34008404 <LL_RCC_HSI_IsReady>
34011182:	4603      	mov	r3, r0
34011184:	2b00      	cmp	r3, #0
34011186:	d023      	beq.n	340111d0 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34011188:	f7f7 f94e 	bl	34008428 <LL_RCC_HSI_GetDivider>
3401118c:	4603      	mov	r3, r0
3401118e:	09db      	lsrs	r3, r3, #7
34011190:	4a16      	ldr	r2, [pc, #88]	@ (340111ec <RCCEx_GetADCCLKFreq+0x1f8>)
34011192:	fa22 f303 	lsr.w	r3, r2, r3
34011196:	60fb      	str	r3, [r7, #12]
      break;
34011198:	e01a      	b.n	340111d0 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
3401119a:	f7f7 f953 	bl	34008444 <LL_RCC_MSI_IsReady>
3401119e:	4603      	mov	r3, r0
340111a0:	2b00      	cmp	r3, #0
340111a2:	d017      	beq.n	340111d4 <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
340111a4:	4b12      	ldr	r3, [pc, #72]	@ (340111f0 <RCCEx_GetADCCLKFreq+0x1fc>)
340111a6:	60fb      	str	r3, [r7, #12]
      break;
340111a8:	e014      	b.n	340111d4 <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
340111aa:	4b12      	ldr	r3, [pc, #72]	@ (340111f4 <RCCEx_GetADCCLKFreq+0x200>)
340111ac:	60fb      	str	r3, [r7, #12]
      break;
340111ae:	e012      	b.n	340111d6 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340111b0:	f7f6 fd2a 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
340111b4:	4604      	mov	r4, r0
340111b6:	f7f7 fd8d 	bl	34008cd4 <LL_RCC_GetTIMPrescaler>
340111ba:	4603      	mov	r3, r0
340111bc:	fa24 f303 	lsr.w	r3, r4, r3
340111c0:	60fb      	str	r3, [r7, #12]
      break;
340111c2:	e008      	b.n	340111d6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
340111c4:	bf00      	nop
340111c6:	e006      	b.n	340111d6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
340111c8:	bf00      	nop
340111ca:	e004      	b.n	340111d6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
340111cc:	bf00      	nop
340111ce:	e002      	b.n	340111d6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
340111d0:	bf00      	nop
340111d2:	e000      	b.n	340111d6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
340111d4:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
340111d6:	f7f7 f9e5 	bl	340085a4 <LL_RCC_GetADCPrescaler>
340111da:	4603      	mov	r3, r0
340111dc:	3301      	adds	r3, #1
340111de:	68fa      	ldr	r2, [r7, #12]
340111e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
340111e4:	4618      	mov	r0, r3
340111e6:	3714      	adds	r7, #20
340111e8:	46bd      	mov	sp, r7
340111ea:	bd90      	pop	{r4, r7, pc}
340111ec:	03d09000 	.word	0x03d09000
340111f0:	003d0900 	.word	0x003d0900
340111f4:	00bb8000 	.word	0x00bb8000

340111f8 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
340111f8:	b590      	push	{r4, r7, lr}
340111fa:	b085      	sub	sp, #20
340111fc:	af00      	add	r7, sp, #0
340111fe:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34011200:	2300      	movs	r3, #0
34011202:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
34011204:	6878      	ldr	r0, [r7, #4]
34011206:	f7f7 fbc5 	bl	34008994 <LL_RCC_GetADFClockSource>
3401120a:	4603      	mov	r3, r0
3401120c:	2b07      	cmp	r3, #7
3401120e:	f200 80ca 	bhi.w	340113a6 <RCCEx_GetADFCLKFreq+0x1ae>
34011212:	a201      	add	r2, pc, #4	@ (adr r2, 34011218 <RCCEx_GetADFCLKFreq+0x20>)
34011214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34011218:	34011239 	.word	0x34011239
3401121c:	34011249 	.word	0x34011249
34011220:	34011253 	.word	0x34011253
34011224:	340112db 	.word	0x340112db
34011228:	3401137d 	.word	0x3401137d
3401122c:	34011361 	.word	0x34011361
34011230:	3401138d 	.word	0x3401138d
34011234:	34011393 	.word	0x34011393
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011238:	f7f6 fce6 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
3401123c:	4603      	mov	r3, r0
3401123e:	4618      	mov	r0, r3
34011240:	f7ff fdda 	bl	34010df8 <RCCEx_GetHCLKFreq>
34011244:	60f8      	str	r0, [r7, #12]
      break;
34011246:	e0b7      	b.n	340113b8 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011248:	2007      	movs	r0, #7
3401124a:	f000 f8c1 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
3401124e:	60f8      	str	r0, [r7, #12]
      break;
34011250:	e0b2      	b.n	340113b8 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34011252:	f7f8 f87b 	bl	3400934c <LL_RCC_IC7_IsEnabled>
34011256:	4603      	mov	r3, r0
34011258:	2b00      	cmp	r3, #0
3401125a:	f000 80a6 	beq.w	340113aa <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3401125e:	f7f8 f897 	bl	34009390 <LL_RCC_IC7_GetDivider>
34011262:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34011264:	f7f8 f886 	bl	34009374 <LL_RCC_IC7_GetSource>
34011268:	4603      	mov	r3, r0
3401126a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401126e:	d029      	beq.n	340112c4 <RCCEx_GetADFCLKFreq+0xcc>
34011270:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011274:	d82f      	bhi.n	340112d6 <RCCEx_GetADFCLKFreq+0xde>
34011276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401127a:	d01a      	beq.n	340112b2 <RCCEx_GetADFCLKFreq+0xba>
3401127c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011280:	d829      	bhi.n	340112d6 <RCCEx_GetADFCLKFreq+0xde>
34011282:	2b00      	cmp	r3, #0
34011284:	d003      	beq.n	3401128e <RCCEx_GetADFCLKFreq+0x96>
34011286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401128a:	d009      	beq.n	340112a0 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401128c:	e023      	b.n	340112d6 <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401128e:	f7ff fc9b 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011292:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34011294:	68fa      	ldr	r2, [r7, #12]
34011296:	68bb      	ldr	r3, [r7, #8]
34011298:	fbb2 f3f3 	udiv	r3, r2, r3
3401129c:	60fb      	str	r3, [r7, #12]
            break;
3401129e:	e01b      	b.n	340112d8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340112a0:	f7ff fcd8 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340112a4:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340112a6:	68fa      	ldr	r2, [r7, #12]
340112a8:	68bb      	ldr	r3, [r7, #8]
340112aa:	fbb2 f3f3 	udiv	r3, r2, r3
340112ae:	60fb      	str	r3, [r7, #12]
            break;
340112b0:	e012      	b.n	340112d8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340112b2:	f7ff fd15 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340112b6:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340112b8:	68fa      	ldr	r2, [r7, #12]
340112ba:	68bb      	ldr	r3, [r7, #8]
340112bc:	fbb2 f3f3 	udiv	r3, r2, r3
340112c0:	60fb      	str	r3, [r7, #12]
            break;
340112c2:	e009      	b.n	340112d8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340112c4:	f7ff fd52 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340112c8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340112ca:	68fa      	ldr	r2, [r7, #12]
340112cc:	68bb      	ldr	r3, [r7, #8]
340112ce:	fbb2 f3f3 	udiv	r3, r2, r3
340112d2:	60fb      	str	r3, [r7, #12]
            break;
340112d4:	e000      	b.n	340112d8 <RCCEx_GetADFCLKFreq+0xe0>
            break;
340112d6:	bf00      	nop
        }
      }
      break;
340112d8:	e067      	b.n	340113aa <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
340112da:	f7f8 f877 	bl	340093cc <LL_RCC_IC8_IsEnabled>
340112de:	4603      	mov	r3, r0
340112e0:	2b00      	cmp	r3, #0
340112e2:	d064      	beq.n	340113ae <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
340112e4:	f7f8 f894 	bl	34009410 <LL_RCC_IC8_GetDivider>
340112e8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
340112ea:	f7f8 f883 	bl	340093f4 <LL_RCC_IC8_GetSource>
340112ee:	4603      	mov	r3, r0
340112f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340112f4:	d029      	beq.n	3401134a <RCCEx_GetADFCLKFreq+0x152>
340112f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340112fa:	d82f      	bhi.n	3401135c <RCCEx_GetADFCLKFreq+0x164>
340112fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011300:	d01a      	beq.n	34011338 <RCCEx_GetADFCLKFreq+0x140>
34011302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011306:	d829      	bhi.n	3401135c <RCCEx_GetADFCLKFreq+0x164>
34011308:	2b00      	cmp	r3, #0
3401130a:	d003      	beq.n	34011314 <RCCEx_GetADFCLKFreq+0x11c>
3401130c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011310:	d009      	beq.n	34011326 <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011312:	e023      	b.n	3401135c <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011314:	f7ff fc58 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011318:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401131a:	68fa      	ldr	r2, [r7, #12]
3401131c:	68bb      	ldr	r3, [r7, #8]
3401131e:	fbb2 f3f3 	udiv	r3, r2, r3
34011322:	60fb      	str	r3, [r7, #12]
            break;
34011324:	e01b      	b.n	3401135e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011326:	f7ff fc95 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
3401132a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401132c:	68fa      	ldr	r2, [r7, #12]
3401132e:	68bb      	ldr	r3, [r7, #8]
34011330:	fbb2 f3f3 	udiv	r3, r2, r3
34011334:	60fb      	str	r3, [r7, #12]
            break;
34011336:	e012      	b.n	3401135e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011338:	f7ff fcd2 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
3401133c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401133e:	68fa      	ldr	r2, [r7, #12]
34011340:	68bb      	ldr	r3, [r7, #8]
34011342:	fbb2 f3f3 	udiv	r3, r2, r3
34011346:	60fb      	str	r3, [r7, #12]
            break;
34011348:	e009      	b.n	3401135e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401134a:	f7ff fd0f 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
3401134e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34011350:	68fa      	ldr	r2, [r7, #12]
34011352:	68bb      	ldr	r3, [r7, #8]
34011354:	fbb2 f3f3 	udiv	r3, r2, r3
34011358:	60fb      	str	r3, [r7, #12]
            break;
3401135a:	e000      	b.n	3401135e <RCCEx_GetADFCLKFreq+0x166>
            break;
3401135c:	bf00      	nop
        }
      }
      break;
3401135e:	e026      	b.n	340113ae <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34011360:	f7f7 f850 	bl	34008404 <LL_RCC_HSI_IsReady>
34011364:	4603      	mov	r3, r0
34011366:	2b00      	cmp	r3, #0
34011368:	d023      	beq.n	340113b2 <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401136a:	f7f7 f85d 	bl	34008428 <LL_RCC_HSI_GetDivider>
3401136e:	4603      	mov	r3, r0
34011370:	09db      	lsrs	r3, r3, #7
34011372:	4a14      	ldr	r2, [pc, #80]	@ (340113c4 <RCCEx_GetADFCLKFreq+0x1cc>)
34011374:	fa22 f303 	lsr.w	r3, r2, r3
34011378:	60fb      	str	r3, [r7, #12]
      }
      break;
3401137a:	e01a      	b.n	340113b2 <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3401137c:	f7f7 f862 	bl	34008444 <LL_RCC_MSI_IsReady>
34011380:	4603      	mov	r3, r0
34011382:	2b00      	cmp	r3, #0
34011384:	d017      	beq.n	340113b6 <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
34011386:	4b10      	ldr	r3, [pc, #64]	@ (340113c8 <RCCEx_GetADFCLKFreq+0x1d0>)
34011388:	60fb      	str	r3, [r7, #12]
      }
      break;
3401138a:	e014      	b.n	340113b6 <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
3401138c:	4b0f      	ldr	r3, [pc, #60]	@ (340113cc <RCCEx_GetADFCLKFreq+0x1d4>)
3401138e:	60fb      	str	r3, [r7, #12]
      break;
34011390:	e012      	b.n	340113b8 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34011392:	f7f6 fc39 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34011396:	4604      	mov	r4, r0
34011398:	f7f7 fc9c 	bl	34008cd4 <LL_RCC_GetTIMPrescaler>
3401139c:	4603      	mov	r3, r0
3401139e:	fa24 f303 	lsr.w	r3, r4, r3
340113a2:	60fb      	str	r3, [r7, #12]
      break;
340113a4:	e008      	b.n	340113b8 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
340113a6:	bf00      	nop
340113a8:	e006      	b.n	340113b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340113aa:	bf00      	nop
340113ac:	e004      	b.n	340113b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340113ae:	bf00      	nop
340113b0:	e002      	b.n	340113b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340113b2:	bf00      	nop
340113b4:	e000      	b.n	340113b8 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340113b6:	bf00      	nop
  }

  return adf_frequency;
340113b8:	68fb      	ldr	r3, [r7, #12]
}
340113ba:	4618      	mov	r0, r3
340113bc:	3714      	adds	r7, #20
340113be:	46bd      	mov	sp, r7
340113c0:	bd90      	pop	{r4, r7, pc}
340113c2:	bf00      	nop
340113c4:	03d09000 	.word	0x03d09000
340113c8:	003d0900 	.word	0x003d0900
340113cc:	00bb8000 	.word	0x00bb8000

340113d0 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
340113d0:	b580      	push	{r7, lr}
340113d2:	b084      	sub	sp, #16
340113d4:	af00      	add	r7, sp, #0
340113d6:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
340113d8:	2300      	movs	r3, #0
340113da:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
340113dc:	f7f8 faf6 	bl	340099cc <LL_RCC_CLKP_IsEnabled>
340113e0:	4603      	mov	r3, r0
340113e2:	2b01      	cmp	r3, #1
340113e4:	f040 81a5 	bne.w	34011732 <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
340113e8:	6878      	ldr	r0, [r7, #4]
340113ea:	f7f7 fae5 	bl	340089b8 <LL_RCC_GetCLKPClockSource>
340113ee:	4603      	mov	r3, r0
340113f0:	2b07      	cmp	r3, #7
340113f2:	f200 818d 	bhi.w	34011710 <RCCEx_GetCLKPCLKFreq+0x340>
340113f6:	a201      	add	r2, pc, #4	@ (adr r2, 340113fc <RCCEx_GetCLKPCLKFreq+0x2c>)
340113f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340113fc:	3401141d 	.word	0x3401141d
34011400:	3401143b 	.word	0x3401143b
34011404:	3401144d 	.word	0x3401144d
34011408:	340115f7 	.word	0x340115f7
3401140c:	3401145f 	.word	0x3401145f
34011410:	340114e7 	.word	0x340114e7
34011414:	3401156f 	.word	0x3401156f
34011418:	3401167f 	.word	0x3401167f
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
3401141c:	f7f6 fff2 	bl	34008404 <LL_RCC_HSI_IsReady>
34011420:	4603      	mov	r3, r0
34011422:	2b00      	cmp	r3, #0
34011424:	f000 8176 	beq.w	34011714 <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34011428:	f7f6 fffe 	bl	34008428 <LL_RCC_HSI_GetDivider>
3401142c:	4603      	mov	r3, r0
3401142e:	09db      	lsrs	r3, r3, #7
34011430:	4aa1      	ldr	r2, [pc, #644]	@ (340116b8 <RCCEx_GetCLKPCLKFreq+0x2e8>)
34011432:	fa22 f303 	lsr.w	r3, r2, r3
34011436:	60fb      	str	r3, [r7, #12]
        }
        break;
34011438:	e16c      	b.n	34011714 <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
3401143a:	f7f7 f803 	bl	34008444 <LL_RCC_MSI_IsReady>
3401143e:	4603      	mov	r3, r0
34011440:	2b00      	cmp	r3, #0
34011442:	f000 8169 	beq.w	34011718 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
34011446:	4b9d      	ldr	r3, [pc, #628]	@ (340116bc <RCCEx_GetCLKPCLKFreq+0x2ec>)
34011448:	60fb      	str	r3, [r7, #12]
        }
        break;
3401144a:	e165      	b.n	34011718 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
3401144c:	f7f6 ffc8 	bl	340083e0 <LL_RCC_HSE_IsReady>
34011450:	4603      	mov	r3, r0
34011452:	2b00      	cmp	r3, #0
34011454:	f000 8162 	beq.w	3401171c <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
34011458:	4b99      	ldr	r3, [pc, #612]	@ (340116c0 <RCCEx_GetCLKPCLKFreq+0x2f0>)
3401145a:	60fb      	str	r3, [r7, #12]
        }
        break;
3401145c:	e15e      	b.n	3401171c <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
3401145e:	f7f7 ff35 	bl	340092cc <LL_RCC_IC5_IsEnabled>
34011462:	4603      	mov	r3, r0
34011464:	2b00      	cmp	r3, #0
34011466:	f000 815b 	beq.w	34011720 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
3401146a:	f7f7 ff51 	bl	34009310 <LL_RCC_IC5_GetDivider>
3401146e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
34011470:	f7f7 ff40 	bl	340092f4 <LL_RCC_IC5_GetSource>
34011474:	4603      	mov	r3, r0
34011476:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401147a:	d029      	beq.n	340114d0 <RCCEx_GetCLKPCLKFreq+0x100>
3401147c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011480:	d82f      	bhi.n	340114e2 <RCCEx_GetCLKPCLKFreq+0x112>
34011482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011486:	d01a      	beq.n	340114be <RCCEx_GetCLKPCLKFreq+0xee>
34011488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401148c:	d829      	bhi.n	340114e2 <RCCEx_GetCLKPCLKFreq+0x112>
3401148e:	2b00      	cmp	r3, #0
34011490:	d003      	beq.n	3401149a <RCCEx_GetCLKPCLKFreq+0xca>
34011492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011496:	d009      	beq.n	340114ac <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011498:	e023      	b.n	340114e2 <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401149a:	f7ff fb95 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
3401149e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114a0:	68fa      	ldr	r2, [r7, #12]
340114a2:	68bb      	ldr	r3, [r7, #8]
340114a4:	fbb2 f3f3 	udiv	r3, r2, r3
340114a8:	60fb      	str	r3, [r7, #12]
              break;
340114aa:	e01b      	b.n	340114e4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340114ac:	f7ff fbd2 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340114b0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114b2:	68fa      	ldr	r2, [r7, #12]
340114b4:	68bb      	ldr	r3, [r7, #8]
340114b6:	fbb2 f3f3 	udiv	r3, r2, r3
340114ba:	60fb      	str	r3, [r7, #12]
              break;
340114bc:	e012      	b.n	340114e4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340114be:	f7ff fc0f 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340114c2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114c4:	68fa      	ldr	r2, [r7, #12]
340114c6:	68bb      	ldr	r3, [r7, #8]
340114c8:	fbb2 f3f3 	udiv	r3, r2, r3
340114cc:	60fb      	str	r3, [r7, #12]
              break;
340114ce:	e009      	b.n	340114e4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340114d0:	f7ff fc4c 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340114d4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114d6:	68fa      	ldr	r2, [r7, #12]
340114d8:	68bb      	ldr	r3, [r7, #8]
340114da:	fbb2 f3f3 	udiv	r3, r2, r3
340114de:	60fb      	str	r3, [r7, #12]
              break;
340114e0:	e000      	b.n	340114e4 <RCCEx_GetCLKPCLKFreq+0x114>
              break;
340114e2:	bf00      	nop
          }
        }
        break;
340114e4:	e11c      	b.n	34011720 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
340114e6:	f7f7 fff1 	bl	340094cc <LL_RCC_IC10_IsEnabled>
340114ea:	4603      	mov	r3, r0
340114ec:	2b00      	cmp	r3, #0
340114ee:	f000 8119 	beq.w	34011724 <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
340114f2:	f7f8 f80d 	bl	34009510 <LL_RCC_IC10_GetDivider>
340114f6:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
340114f8:	f7f7 fffc 	bl	340094f4 <LL_RCC_IC10_GetSource>
340114fc:	4603      	mov	r3, r0
340114fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011502:	d029      	beq.n	34011558 <RCCEx_GetCLKPCLKFreq+0x188>
34011504:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011508:	d82f      	bhi.n	3401156a <RCCEx_GetCLKPCLKFreq+0x19a>
3401150a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401150e:	d01a      	beq.n	34011546 <RCCEx_GetCLKPCLKFreq+0x176>
34011510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011514:	d829      	bhi.n	3401156a <RCCEx_GetCLKPCLKFreq+0x19a>
34011516:	2b00      	cmp	r3, #0
34011518:	d003      	beq.n	34011522 <RCCEx_GetCLKPCLKFreq+0x152>
3401151a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401151e:	d009      	beq.n	34011534 <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011520:	e023      	b.n	3401156a <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011522:	f7ff fb51 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011526:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011528:	68fa      	ldr	r2, [r7, #12]
3401152a:	68bb      	ldr	r3, [r7, #8]
3401152c:	fbb2 f3f3 	udiv	r3, r2, r3
34011530:	60fb      	str	r3, [r7, #12]
              break;
34011532:	e01b      	b.n	3401156c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011534:	f7ff fb8e 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34011538:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401153a:	68fa      	ldr	r2, [r7, #12]
3401153c:	68bb      	ldr	r3, [r7, #8]
3401153e:	fbb2 f3f3 	udiv	r3, r2, r3
34011542:	60fb      	str	r3, [r7, #12]
              break;
34011544:	e012      	b.n	3401156c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011546:	f7ff fbcb 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
3401154a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401154c:	68fa      	ldr	r2, [r7, #12]
3401154e:	68bb      	ldr	r3, [r7, #8]
34011550:	fbb2 f3f3 	udiv	r3, r2, r3
34011554:	60fb      	str	r3, [r7, #12]
              break;
34011556:	e009      	b.n	3401156c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011558:	f7ff fc08 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
3401155c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401155e:	68fa      	ldr	r2, [r7, #12]
34011560:	68bb      	ldr	r3, [r7, #8]
34011562:	fbb2 f3f3 	udiv	r3, r2, r3
34011566:	60fb      	str	r3, [r7, #12]
              break;
34011568:	e000      	b.n	3401156c <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
3401156a:	bf00      	nop
          }
        }
        break;
3401156c:	e0da      	b.n	34011724 <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
3401156e:	f7f8 f8ad 	bl	340096cc <LL_RCC_IC15_IsEnabled>
34011572:	4603      	mov	r3, r0
34011574:	2b00      	cmp	r3, #0
34011576:	f000 80d7 	beq.w	34011728 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
3401157a:	f7f8 f8c9 	bl	34009710 <LL_RCC_IC15_GetDivider>
3401157e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
34011580:	f7f8 f8b8 	bl	340096f4 <LL_RCC_IC15_GetSource>
34011584:	4603      	mov	r3, r0
34011586:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401158a:	d029      	beq.n	340115e0 <RCCEx_GetCLKPCLKFreq+0x210>
3401158c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011590:	d82f      	bhi.n	340115f2 <RCCEx_GetCLKPCLKFreq+0x222>
34011592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011596:	d01a      	beq.n	340115ce <RCCEx_GetCLKPCLKFreq+0x1fe>
34011598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401159c:	d829      	bhi.n	340115f2 <RCCEx_GetCLKPCLKFreq+0x222>
3401159e:	2b00      	cmp	r3, #0
340115a0:	d003      	beq.n	340115aa <RCCEx_GetCLKPCLKFreq+0x1da>
340115a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340115a6:	d009      	beq.n	340115bc <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
340115a8:	e023      	b.n	340115f2 <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340115aa:	f7ff fb0d 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
340115ae:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340115b0:	68fa      	ldr	r2, [r7, #12]
340115b2:	68bb      	ldr	r3, [r7, #8]
340115b4:	fbb2 f3f3 	udiv	r3, r2, r3
340115b8:	60fb      	str	r3, [r7, #12]
              break;
340115ba:	e01b      	b.n	340115f4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340115bc:	f7ff fb4a 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340115c0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340115c2:	68fa      	ldr	r2, [r7, #12]
340115c4:	68bb      	ldr	r3, [r7, #8]
340115c6:	fbb2 f3f3 	udiv	r3, r2, r3
340115ca:	60fb      	str	r3, [r7, #12]
              break;
340115cc:	e012      	b.n	340115f4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340115ce:	f7ff fb87 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340115d2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340115d4:	68fa      	ldr	r2, [r7, #12]
340115d6:	68bb      	ldr	r3, [r7, #8]
340115d8:	fbb2 f3f3 	udiv	r3, r2, r3
340115dc:	60fb      	str	r3, [r7, #12]
              break;
340115de:	e009      	b.n	340115f4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340115e0:	f7ff fbc4 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340115e4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340115e6:	68fa      	ldr	r2, [r7, #12]
340115e8:	68bb      	ldr	r3, [r7, #8]
340115ea:	fbb2 f3f3 	udiv	r3, r2, r3
340115ee:	60fb      	str	r3, [r7, #12]
              break;
340115f0:	e000      	b.n	340115f4 <RCCEx_GetCLKPCLKFreq+0x224>
              break;
340115f2:	bf00      	nop
          }
        }
        break;
340115f4:	e098      	b.n	34011728 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
340115f6:	f7f8 f969 	bl	340098cc <LL_RCC_IC19_IsEnabled>
340115fa:	4603      	mov	r3, r0
340115fc:	2b00      	cmp	r3, #0
340115fe:	f000 8095 	beq.w	3401172c <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
34011602:	f7f8 f985 	bl	34009910 <LL_RCC_IC19_GetDivider>
34011606:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
34011608:	f7f8 f974 	bl	340098f4 <LL_RCC_IC19_GetSource>
3401160c:	4603      	mov	r3, r0
3401160e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011612:	d029      	beq.n	34011668 <RCCEx_GetCLKPCLKFreq+0x298>
34011614:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011618:	d82f      	bhi.n	3401167a <RCCEx_GetCLKPCLKFreq+0x2aa>
3401161a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401161e:	d01a      	beq.n	34011656 <RCCEx_GetCLKPCLKFreq+0x286>
34011620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011624:	d829      	bhi.n	3401167a <RCCEx_GetCLKPCLKFreq+0x2aa>
34011626:	2b00      	cmp	r3, #0
34011628:	d003      	beq.n	34011632 <RCCEx_GetCLKPCLKFreq+0x262>
3401162a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401162e:	d009      	beq.n	34011644 <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011630:	e023      	b.n	3401167a <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011632:	f7ff fac9 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011636:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011638:	68fa      	ldr	r2, [r7, #12]
3401163a:	68bb      	ldr	r3, [r7, #8]
3401163c:	fbb2 f3f3 	udiv	r3, r2, r3
34011640:	60fb      	str	r3, [r7, #12]
              break;
34011642:	e01b      	b.n	3401167c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011644:	f7ff fb06 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34011648:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401164a:	68fa      	ldr	r2, [r7, #12]
3401164c:	68bb      	ldr	r3, [r7, #8]
3401164e:	fbb2 f3f3 	udiv	r3, r2, r3
34011652:	60fb      	str	r3, [r7, #12]
              break;
34011654:	e012      	b.n	3401167c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011656:	f7ff fb43 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
3401165a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401165c:	68fa      	ldr	r2, [r7, #12]
3401165e:	68bb      	ldr	r3, [r7, #8]
34011660:	fbb2 f3f3 	udiv	r3, r2, r3
34011664:	60fb      	str	r3, [r7, #12]
              break;
34011666:	e009      	b.n	3401167c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011668:	f7ff fb80 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
3401166c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401166e:	68fa      	ldr	r2, [r7, #12]
34011670:	68bb      	ldr	r3, [r7, #8]
34011672:	fbb2 f3f3 	udiv	r3, r2, r3
34011676:	60fb      	str	r3, [r7, #12]
              break;
34011678:	e000      	b.n	3401167c <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
3401167a:	bf00      	nop
          }
        }
        break;
3401167c:	e056      	b.n	3401172c <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
3401167e:	f7f8 f965 	bl	3400994c <LL_RCC_IC20_IsEnabled>
34011682:	4603      	mov	r3, r0
34011684:	2b00      	cmp	r3, #0
34011686:	d053      	beq.n	34011730 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
34011688:	f7f8 f982 	bl	34009990 <LL_RCC_IC20_GetDivider>
3401168c:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
3401168e:	f7f8 f971 	bl	34009974 <LL_RCC_IC20_GetSource>
34011692:	4603      	mov	r3, r0
34011694:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011698:	d02f      	beq.n	340116fa <RCCEx_GetCLKPCLKFreq+0x32a>
3401169a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401169e:	d835      	bhi.n	3401170c <RCCEx_GetCLKPCLKFreq+0x33c>
340116a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340116a4:	d020      	beq.n	340116e8 <RCCEx_GetCLKPCLKFreq+0x318>
340116a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340116aa:	d82f      	bhi.n	3401170c <RCCEx_GetCLKPCLKFreq+0x33c>
340116ac:	2b00      	cmp	r3, #0
340116ae:	d009      	beq.n	340116c4 <RCCEx_GetCLKPCLKFreq+0x2f4>
340116b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340116b4:	d00f      	beq.n	340116d6 <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
340116b6:	e029      	b.n	3401170c <RCCEx_GetCLKPCLKFreq+0x33c>
340116b8:	03d09000 	.word	0x03d09000
340116bc:	003d0900 	.word	0x003d0900
340116c0:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340116c4:	f7ff fa80 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
340116c8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340116ca:	68fa      	ldr	r2, [r7, #12]
340116cc:	68bb      	ldr	r3, [r7, #8]
340116ce:	fbb2 f3f3 	udiv	r3, r2, r3
340116d2:	60fb      	str	r3, [r7, #12]
              break;
340116d4:	e01b      	b.n	3401170e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340116d6:	f7ff fabd 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340116da:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340116dc:	68fa      	ldr	r2, [r7, #12]
340116de:	68bb      	ldr	r3, [r7, #8]
340116e0:	fbb2 f3f3 	udiv	r3, r2, r3
340116e4:	60fb      	str	r3, [r7, #12]
              break;
340116e6:	e012      	b.n	3401170e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340116e8:	f7ff fafa 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340116ec:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340116ee:	68fa      	ldr	r2, [r7, #12]
340116f0:	68bb      	ldr	r3, [r7, #8]
340116f2:	fbb2 f3f3 	udiv	r3, r2, r3
340116f6:	60fb      	str	r3, [r7, #12]
              break;
340116f8:	e009      	b.n	3401170e <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340116fa:	f7ff fb37 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340116fe:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011700:	68fa      	ldr	r2, [r7, #12]
34011702:	68bb      	ldr	r3, [r7, #8]
34011704:	fbb2 f3f3 	udiv	r3, r2, r3
34011708:	60fb      	str	r3, [r7, #12]
              break;
3401170a:	e000      	b.n	3401170e <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
3401170c:	bf00      	nop
          }
        }
        break;
3401170e:	e00f      	b.n	34011730 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
34011710:	bf00      	nop
34011712:	e00e      	b.n	34011732 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011714:	bf00      	nop
34011716:	e00c      	b.n	34011732 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011718:	bf00      	nop
3401171a:	e00a      	b.n	34011732 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3401171c:	bf00      	nop
3401171e:	e008      	b.n	34011732 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011720:	bf00      	nop
34011722:	e006      	b.n	34011732 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011724:	bf00      	nop
34011726:	e004      	b.n	34011732 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011728:	bf00      	nop
3401172a:	e002      	b.n	34011732 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3401172c:	bf00      	nop
3401172e:	e000      	b.n	34011732 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011730:	bf00      	nop
    }
  }

  return clkp_frequency;
34011732:	68fb      	ldr	r3, [r7, #12]
}
34011734:	4618      	mov	r0, r3
34011736:	3710      	adds	r7, #16
34011738:	46bd      	mov	sp, r7
3401173a:	bd80      	pop	{r7, pc}

3401173c <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
3401173c:	b580      	push	{r7, lr}
3401173e:	b082      	sub	sp, #8
34011740:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34011742:	2300      	movs	r3, #0
34011744:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
34011746:	f7f8 f881 	bl	3400984c <LL_RCC_IC18_IsEnabled>
3401174a:	4603      	mov	r3, r0
3401174c:	2b00      	cmp	r3, #0
3401174e:	d03c      	beq.n	340117ca <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
34011750:	f7f8 f89e 	bl	34009890 <LL_RCC_IC18_GetDivider>
34011754:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
34011756:	f7f8 f88d 	bl	34009874 <LL_RCC_IC18_GetSource>
3401175a:	4603      	mov	r3, r0
3401175c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011760:	d029      	beq.n	340117b6 <RCCEx_GetCSICLKFreq+0x7a>
34011762:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011766:	d82f      	bhi.n	340117c8 <RCCEx_GetCSICLKFreq+0x8c>
34011768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401176c:	d01a      	beq.n	340117a4 <RCCEx_GetCSICLKFreq+0x68>
3401176e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011772:	d829      	bhi.n	340117c8 <RCCEx_GetCSICLKFreq+0x8c>
34011774:	2b00      	cmp	r3, #0
34011776:	d003      	beq.n	34011780 <RCCEx_GetCSICLKFreq+0x44>
34011778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401177c:	d009      	beq.n	34011792 <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
3401177e:	e023      	b.n	340117c8 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011780:	f7ff fa22 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011784:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34011786:	687a      	ldr	r2, [r7, #4]
34011788:	683b      	ldr	r3, [r7, #0]
3401178a:	fbb2 f3f3 	udiv	r3, r2, r3
3401178e:	607b      	str	r3, [r7, #4]
        break;
34011790:	e01b      	b.n	340117ca <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011792:	f7ff fa5f 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34011796:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34011798:	687a      	ldr	r2, [r7, #4]
3401179a:	683b      	ldr	r3, [r7, #0]
3401179c:	fbb2 f3f3 	udiv	r3, r2, r3
340117a0:	607b      	str	r3, [r7, #4]
        break;
340117a2:	e012      	b.n	340117ca <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340117a4:	f7ff fa9c 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340117a8:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
340117aa:	687a      	ldr	r2, [r7, #4]
340117ac:	683b      	ldr	r3, [r7, #0]
340117ae:	fbb2 f3f3 	udiv	r3, r2, r3
340117b2:	607b      	str	r3, [r7, #4]
        break;
340117b4:	e009      	b.n	340117ca <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340117b6:	f7ff fad9 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340117ba:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
340117bc:	687a      	ldr	r2, [r7, #4]
340117be:	683b      	ldr	r3, [r7, #0]
340117c0:	fbb2 f3f3 	udiv	r3, r2, r3
340117c4:	607b      	str	r3, [r7, #4]
        break;
340117c6:	e000      	b.n	340117ca <RCCEx_GetCSICLKFreq+0x8e>
        break;
340117c8:	bf00      	nop
    }
  }

  return clkp_frequency;
340117ca:	687b      	ldr	r3, [r7, #4]
}
340117cc:	4618      	mov	r0, r3
340117ce:	3708      	adds	r7, #8
340117d0:	46bd      	mov	sp, r7
340117d2:	bd80      	pop	{r7, pc}

340117d4 <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
340117d4:	b580      	push	{r7, lr}
340117d6:	b084      	sub	sp, #16
340117d8:	af00      	add	r7, sp, #0
340117da:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
340117dc:	2300      	movs	r3, #0
340117de:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
340117e0:	6878      	ldr	r0, [r7, #4]
340117e2:	f7f7 f8fb 	bl	340089dc <LL_RCC_GetDCMIPPClockSource>
340117e6:	4603      	mov	r3, r0
340117e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340117ec:	d062      	beq.n	340118b4 <RCCEx_GetDCMIPPCLKFreq+0xe0>
340117ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340117f2:	d86d      	bhi.n	340118d0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
340117f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340117f8:	d019      	beq.n	3401182e <RCCEx_GetDCMIPPCLKFreq+0x5a>
340117fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340117fe:	d867      	bhi.n	340118d0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34011800:	2b00      	cmp	r3, #0
34011802:	d003      	beq.n	3401180c <RCCEx_GetDCMIPPCLKFreq+0x38>
34011804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34011808:	d00c      	beq.n	34011824 <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3401180a:	e061      	b.n	340118d0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401180c:	f7f6 f9fc 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34011810:	4603      	mov	r3, r0
34011812:	4618      	mov	r0, r3
34011814:	f7ff faf0 	bl	34010df8 <RCCEx_GetHCLKFreq>
34011818:	4603      	mov	r3, r0
3401181a:	4618      	mov	r0, r3
3401181c:	f7ff fb2f 	bl	34010e7e <RCCEx_GetPCLK5Freq>
34011820:	60f8      	str	r0, [r7, #12]
      break;
34011822:	e05a      	b.n	340118da <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011824:	2007      	movs	r0, #7
34011826:	f7ff fdd3 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
3401182a:	60f8      	str	r0, [r7, #12]
      break;
3401182c:	e055      	b.n	340118da <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
3401182e:	f7f7 ffcd 	bl	340097cc <LL_RCC_IC17_IsEnabled>
34011832:	4603      	mov	r3, r0
34011834:	2b00      	cmp	r3, #0
34011836:	d04d      	beq.n	340118d4 <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
34011838:	f7f7 ffea 	bl	34009810 <LL_RCC_IC17_GetDivider>
3401183c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
3401183e:	f7f7 ffd9 	bl	340097f4 <LL_RCC_IC17_GetSource>
34011842:	4603      	mov	r3, r0
34011844:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011848:	d029      	beq.n	3401189e <RCCEx_GetDCMIPPCLKFreq+0xca>
3401184a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401184e:	d82f      	bhi.n	340118b0 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34011850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011854:	d01a      	beq.n	3401188c <RCCEx_GetDCMIPPCLKFreq+0xb8>
34011856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401185a:	d829      	bhi.n	340118b0 <RCCEx_GetDCMIPPCLKFreq+0xdc>
3401185c:	2b00      	cmp	r3, #0
3401185e:	d003      	beq.n	34011868 <RCCEx_GetDCMIPPCLKFreq+0x94>
34011860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011864:	d009      	beq.n	3401187a <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
34011866:	e023      	b.n	340118b0 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011868:	f7ff f9ae 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
3401186c:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3401186e:	68fa      	ldr	r2, [r7, #12]
34011870:	68bb      	ldr	r3, [r7, #8]
34011872:	fbb2 f3f3 	udiv	r3, r2, r3
34011876:	60fb      	str	r3, [r7, #12]
            break;
34011878:	e01b      	b.n	340118b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401187a:	f7ff f9eb 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
3401187e:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34011880:	68fa      	ldr	r2, [r7, #12]
34011882:	68bb      	ldr	r3, [r7, #8]
34011884:	fbb2 f3f3 	udiv	r3, r2, r3
34011888:	60fb      	str	r3, [r7, #12]
            break;
3401188a:	e012      	b.n	340118b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401188c:	f7ff fa28 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34011890:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34011892:	68fa      	ldr	r2, [r7, #12]
34011894:	68bb      	ldr	r3, [r7, #8]
34011896:	fbb2 f3f3 	udiv	r3, r2, r3
3401189a:	60fb      	str	r3, [r7, #12]
            break;
3401189c:	e009      	b.n	340118b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401189e:	f7ff fa65 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340118a2:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
340118a4:	68fa      	ldr	r2, [r7, #12]
340118a6:	68bb      	ldr	r3, [r7, #8]
340118a8:	fbb2 f3f3 	udiv	r3, r2, r3
340118ac:	60fb      	str	r3, [r7, #12]
            break;
340118ae:	e000      	b.n	340118b2 <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
340118b0:	bf00      	nop
      break;
340118b2:	e00f      	b.n	340118d4 <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
340118b4:	f7f6 fda6 	bl	34008404 <LL_RCC_HSI_IsReady>
340118b8:	4603      	mov	r3, r0
340118ba:	2b00      	cmp	r3, #0
340118bc:	d00c      	beq.n	340118d8 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340118be:	f7f6 fdb3 	bl	34008428 <LL_RCC_HSI_GetDivider>
340118c2:	4603      	mov	r3, r0
340118c4:	09db      	lsrs	r3, r3, #7
340118c6:	4a07      	ldr	r2, [pc, #28]	@ (340118e4 <RCCEx_GetDCMIPPCLKFreq+0x110>)
340118c8:	fa22 f303 	lsr.w	r3, r2, r3
340118cc:	60fb      	str	r3, [r7, #12]
      break;
340118ce:	e003      	b.n	340118d8 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
340118d0:	bf00      	nop
340118d2:	e002      	b.n	340118da <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
340118d4:	bf00      	nop
340118d6:	e000      	b.n	340118da <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
340118d8:	bf00      	nop
  }

  return dcmipp_frequency;
340118da:	68fb      	ldr	r3, [r7, #12]
}
340118dc:	4618      	mov	r0, r3
340118de:	3710      	adds	r7, #16
340118e0:	46bd      	mov	sp, r7
340118e2:	bd80      	pop	{r7, pc}
340118e4:	03d09000 	.word	0x03d09000

340118e8 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
340118e8:	b580      	push	{r7, lr}
340118ea:	b084      	sub	sp, #16
340118ec:	af00      	add	r7, sp, #0
340118ee:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
340118f0:	2300      	movs	r3, #0
340118f2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
340118f4:	6878      	ldr	r0, [r7, #4]
340118f6:	f7f7 f883 	bl	34008a00 <LL_RCC_GetETHClockSource>
340118fa:	4603      	mov	r3, r0
340118fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34011900:	d05e      	beq.n	340119c0 <RCCEx_GetETH1CLKFreq+0xd8>
34011902:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34011906:	d863      	bhi.n	340119d0 <RCCEx_GetETH1CLKFreq+0xe8>
34011908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3401190c:	d015      	beq.n	3401193a <RCCEx_GetETH1CLKFreq+0x52>
3401190e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34011912:	d85d      	bhi.n	340119d0 <RCCEx_GetETH1CLKFreq+0xe8>
34011914:	2b00      	cmp	r3, #0
34011916:	d003      	beq.n	34011920 <RCCEx_GetETH1CLKFreq+0x38>
34011918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401191c:	d008      	beq.n	34011930 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
3401191e:	e057      	b.n	340119d0 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011920:	f7f6 f972 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34011924:	4603      	mov	r3, r0
34011926:	4618      	mov	r0, r3
34011928:	f7ff fa66 	bl	34010df8 <RCCEx_GetHCLKFreq>
3401192c:	60f8      	str	r0, [r7, #12]
      break;
3401192e:	e054      	b.n	340119da <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011930:	2007      	movs	r0, #7
34011932:	f7ff fd4d 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34011936:	60f8      	str	r0, [r7, #12]
      break;
34011938:	e04f      	b.n	340119da <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
3401193a:	f7f7 fe07 	bl	3400954c <LL_RCC_IC12_IsEnabled>
3401193e:	4603      	mov	r3, r0
34011940:	2b00      	cmp	r3, #0
34011942:	d047      	beq.n	340119d4 <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
34011944:	f7f7 fe24 	bl	34009590 <LL_RCC_IC12_GetDivider>
34011948:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
3401194a:	f7f7 fe13 	bl	34009574 <LL_RCC_IC12_GetSource>
3401194e:	4603      	mov	r3, r0
34011950:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011954:	d029      	beq.n	340119aa <RCCEx_GetETH1CLKFreq+0xc2>
34011956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401195a:	d82f      	bhi.n	340119bc <RCCEx_GetETH1CLKFreq+0xd4>
3401195c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011960:	d01a      	beq.n	34011998 <RCCEx_GetETH1CLKFreq+0xb0>
34011962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011966:	d829      	bhi.n	340119bc <RCCEx_GetETH1CLKFreq+0xd4>
34011968:	2b00      	cmp	r3, #0
3401196a:	d003      	beq.n	34011974 <RCCEx_GetETH1CLKFreq+0x8c>
3401196c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011970:	d009      	beq.n	34011986 <RCCEx_GetETH1CLKFreq+0x9e>
            break;
34011972:	e023      	b.n	340119bc <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011974:	f7ff f928 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011978:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3401197a:	68fa      	ldr	r2, [r7, #12]
3401197c:	68bb      	ldr	r3, [r7, #8]
3401197e:	fbb2 f3f3 	udiv	r3, r2, r3
34011982:	60fb      	str	r3, [r7, #12]
            break;
34011984:	e01b      	b.n	340119be <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011986:	f7ff f965 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
3401198a:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3401198c:	68fa      	ldr	r2, [r7, #12]
3401198e:	68bb      	ldr	r3, [r7, #8]
34011990:	fbb2 f3f3 	udiv	r3, r2, r3
34011994:	60fb      	str	r3, [r7, #12]
            break;
34011996:	e012      	b.n	340119be <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011998:	f7ff f9a2 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
3401199c:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3401199e:	68fa      	ldr	r2, [r7, #12]
340119a0:	68bb      	ldr	r3, [r7, #8]
340119a2:	fbb2 f3f3 	udiv	r3, r2, r3
340119a6:	60fb      	str	r3, [r7, #12]
            break;
340119a8:	e009      	b.n	340119be <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340119aa:	f7ff f9df 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340119ae:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
340119b0:	68fa      	ldr	r2, [r7, #12]
340119b2:	68bb      	ldr	r3, [r7, #8]
340119b4:	fbb2 f3f3 	udiv	r3, r2, r3
340119b8:	60fb      	str	r3, [r7, #12]
            break;
340119ba:	e000      	b.n	340119be <RCCEx_GetETH1CLKFreq+0xd6>
            break;
340119bc:	bf00      	nop
      break;
340119be:	e009      	b.n	340119d4 <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
340119c0:	f7f6 fd0e 	bl	340083e0 <LL_RCC_HSE_IsReady>
340119c4:	4603      	mov	r3, r0
340119c6:	2b00      	cmp	r3, #0
340119c8:	d006      	beq.n	340119d8 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
340119ca:	4b06      	ldr	r3, [pc, #24]	@ (340119e4 <RCCEx_GetETH1CLKFreq+0xfc>)
340119cc:	60fb      	str	r3, [r7, #12]
      break;
340119ce:	e003      	b.n	340119d8 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
340119d0:	bf00      	nop
340119d2:	e002      	b.n	340119da <RCCEx_GetETH1CLKFreq+0xf2>
      break;
340119d4:	bf00      	nop
340119d6:	e000      	b.n	340119da <RCCEx_GetETH1CLKFreq+0xf2>
      break;
340119d8:	bf00      	nop
  }

  return eth1_frequency;
340119da:	68fb      	ldr	r3, [r7, #12]
}
340119dc:	4618      	mov	r0, r3
340119de:	3710      	adds	r7, #16
340119e0:	46bd      	mov	sp, r7
340119e2:	bd80      	pop	{r7, pc}
340119e4:	02dc6c00 	.word	0x02dc6c00

340119e8 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
340119e8:	b580      	push	{r7, lr}
340119ea:	b084      	sub	sp, #16
340119ec:	af00      	add	r7, sp, #0
340119ee:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
340119f0:	2300      	movs	r3, #0
340119f2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
340119f4:	6878      	ldr	r0, [r7, #4]
340119f6:	f7f7 f815 	bl	34008a24 <LL_RCC_GetETHPTPClockSource>
340119fa:	4603      	mov	r3, r0
340119fc:	2b03      	cmp	r3, #3
340119fe:	d863      	bhi.n	34011ac8 <RCCEx_GetETH1PTPCLKFreq+0xe0>
34011a00:	a201      	add	r2, pc, #4	@ (adr r2, 34011a08 <RCCEx_GetETH1PTPCLKFreq+0x20>)
34011a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34011a06:	bf00      	nop
34011a08:	34011a19 	.word	0x34011a19
34011a0c:	34011a29 	.word	0x34011a29
34011a10:	34011a33 	.word	0x34011a33
34011a14:	34011ab9 	.word	0x34011ab9
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011a18:	f7f6 f8f6 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34011a1c:	4603      	mov	r3, r0
34011a1e:	4618      	mov	r0, r3
34011a20:	f7ff f9ea 	bl	34010df8 <RCCEx_GetHCLKFreq>
34011a24:	60f8      	str	r0, [r7, #12]
      break;
34011a26:	e054      	b.n	34011ad2 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011a28:	2007      	movs	r0, #7
34011a2a:	f7ff fcd1 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34011a2e:	60f8      	str	r0, [r7, #12]
      break;
34011a30:	e04f      	b.n	34011ad2 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
34011a32:	f7f7 fdcb 	bl	340095cc <LL_RCC_IC13_IsEnabled>
34011a36:	4603      	mov	r3, r0
34011a38:	2b00      	cmp	r3, #0
34011a3a:	d047      	beq.n	34011acc <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
34011a3c:	f7f7 fde8 	bl	34009610 <LL_RCC_IC13_GetDivider>
34011a40:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
34011a42:	f7f7 fdd7 	bl	340095f4 <LL_RCC_IC13_GetSource>
34011a46:	4603      	mov	r3, r0
34011a48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011a4c:	d029      	beq.n	34011aa2 <RCCEx_GetETH1PTPCLKFreq+0xba>
34011a4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011a52:	d82f      	bhi.n	34011ab4 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34011a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011a58:	d01a      	beq.n	34011a90 <RCCEx_GetETH1PTPCLKFreq+0xa8>
34011a5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011a5e:	d829      	bhi.n	34011ab4 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34011a60:	2b00      	cmp	r3, #0
34011a62:	d003      	beq.n	34011a6c <RCCEx_GetETH1PTPCLKFreq+0x84>
34011a64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011a68:	d009      	beq.n	34011a7e <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011a6a:	e023      	b.n	34011ab4 <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011a6c:	f7ff f8ac 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011a70:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011a72:	68fa      	ldr	r2, [r7, #12]
34011a74:	68bb      	ldr	r3, [r7, #8]
34011a76:	fbb2 f3f3 	udiv	r3, r2, r3
34011a7a:	60fb      	str	r3, [r7, #12]
            break;
34011a7c:	e01b      	b.n	34011ab6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011a7e:	f7ff f8e9 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34011a82:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011a84:	68fa      	ldr	r2, [r7, #12]
34011a86:	68bb      	ldr	r3, [r7, #8]
34011a88:	fbb2 f3f3 	udiv	r3, r2, r3
34011a8c:	60fb      	str	r3, [r7, #12]
            break;
34011a8e:	e012      	b.n	34011ab6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011a90:	f7ff f926 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34011a94:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011a96:	68fa      	ldr	r2, [r7, #12]
34011a98:	68bb      	ldr	r3, [r7, #8]
34011a9a:	fbb2 f3f3 	udiv	r3, r2, r3
34011a9e:	60fb      	str	r3, [r7, #12]
            break;
34011aa0:	e009      	b.n	34011ab6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011aa2:	f7ff f963 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34011aa6:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011aa8:	68fa      	ldr	r2, [r7, #12]
34011aaa:	68bb      	ldr	r3, [r7, #8]
34011aac:	fbb2 f3f3 	udiv	r3, r2, r3
34011ab0:	60fb      	str	r3, [r7, #12]
            break;
34011ab2:	e000      	b.n	34011ab6 <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
34011ab4:	bf00      	nop
        }
      }
      break;
34011ab6:	e009      	b.n	34011acc <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34011ab8:	f7f6 fc92 	bl	340083e0 <LL_RCC_HSE_IsReady>
34011abc:	4603      	mov	r3, r0
34011abe:	2b00      	cmp	r3, #0
34011ac0:	d006      	beq.n	34011ad0 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
34011ac2:	4b0a      	ldr	r3, [pc, #40]	@ (34011aec <RCCEx_GetETH1PTPCLKFreq+0x104>)
34011ac4:	60fb      	str	r3, [r7, #12]
      }
      break;
34011ac6:	e003      	b.n	34011ad0 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
34011ac8:	bf00      	nop
34011aca:	e002      	b.n	34011ad2 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34011acc:	bf00      	nop
34011ace:	e000      	b.n	34011ad2 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34011ad0:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34011ad2:	f7f6 fde3 	bl	3400869c <LL_RCC_GetETH1PTPDivider>
34011ad6:	4603      	mov	r3, r0
34011ad8:	091b      	lsrs	r3, r3, #4
34011ada:	3301      	adds	r3, #1
34011adc:	68fa      	ldr	r2, [r7, #12]
34011ade:	fbb2 f3f3 	udiv	r3, r2, r3
}
34011ae2:	4618      	mov	r0, r3
34011ae4:	3710      	adds	r7, #16
34011ae6:	46bd      	mov	sp, r7
34011ae8:	bd80      	pop	{r7, pc}
34011aea:	bf00      	nop
34011aec:	02dc6c00 	.word	0x02dc6c00

34011af0 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
34011af0:	b580      	push	{r7, lr}
34011af2:	b084      	sub	sp, #16
34011af4:	af00      	add	r7, sp, #0
34011af6:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
34011af8:	2300      	movs	r3, #0
34011afa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34011afc:	6878      	ldr	r0, [r7, #4]
34011afe:	f7f6 ffa3 	bl	34008a48 <LL_RCC_GetFDCANClockSource>
34011b02:	4603      	mov	r3, r0
34011b04:	2b03      	cmp	r3, #3
34011b06:	d867      	bhi.n	34011bd8 <RCCEx_GetFDCANCLKFreq+0xe8>
34011b08:	a201      	add	r2, pc, #4	@ (adr r2, 34011b10 <RCCEx_GetFDCANCLKFreq+0x20>)
34011b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34011b0e:	bf00      	nop
34011b10:	34011b21 	.word	0x34011b21
34011b14:	34011b39 	.word	0x34011b39
34011b18:	34011b43 	.word	0x34011b43
34011b1c:	34011bc9 	.word	0x34011bc9
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011b20:	f7f6 f872 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34011b24:	4603      	mov	r3, r0
34011b26:	4618      	mov	r0, r3
34011b28:	f7ff f966 	bl	34010df8 <RCCEx_GetHCLKFreq>
34011b2c:	4603      	mov	r3, r0
34011b2e:	4618      	mov	r0, r3
34011b30:	f7ff f973 	bl	34010e1a <RCCEx_GetPCLK1Freq>
34011b34:	60f8      	str	r0, [r7, #12]
      break;
34011b36:	e054      	b.n	34011be2 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011b38:	2007      	movs	r0, #7
34011b3a:	f7ff fc49 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34011b3e:	60f8      	str	r0, [r7, #12]
      break;
34011b40:	e04f      	b.n	34011be2 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
34011b42:	f7f7 fec3 	bl	340098cc <LL_RCC_IC19_IsEnabled>
34011b46:	4603      	mov	r3, r0
34011b48:	2b00      	cmp	r3, #0
34011b4a:	d047      	beq.n	34011bdc <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
34011b4c:	f7f7 fee0 	bl	34009910 <LL_RCC_IC19_GetDivider>
34011b50:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
34011b52:	f7f7 fecf 	bl	340098f4 <LL_RCC_IC19_GetSource>
34011b56:	4603      	mov	r3, r0
34011b58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011b5c:	d029      	beq.n	34011bb2 <RCCEx_GetFDCANCLKFreq+0xc2>
34011b5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011b62:	d82f      	bhi.n	34011bc4 <RCCEx_GetFDCANCLKFreq+0xd4>
34011b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011b68:	d01a      	beq.n	34011ba0 <RCCEx_GetFDCANCLKFreq+0xb0>
34011b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011b6e:	d829      	bhi.n	34011bc4 <RCCEx_GetFDCANCLKFreq+0xd4>
34011b70:	2b00      	cmp	r3, #0
34011b72:	d003      	beq.n	34011b7c <RCCEx_GetFDCANCLKFreq+0x8c>
34011b74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011b78:	d009      	beq.n	34011b8e <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011b7a:	e023      	b.n	34011bc4 <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011b7c:	f7ff f824 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011b80:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011b82:	68fa      	ldr	r2, [r7, #12]
34011b84:	68bb      	ldr	r3, [r7, #8]
34011b86:	fbb2 f3f3 	udiv	r3, r2, r3
34011b8a:	60fb      	str	r3, [r7, #12]
            break;
34011b8c:	e01b      	b.n	34011bc6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011b8e:	f7ff f861 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34011b92:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011b94:	68fa      	ldr	r2, [r7, #12]
34011b96:	68bb      	ldr	r3, [r7, #8]
34011b98:	fbb2 f3f3 	udiv	r3, r2, r3
34011b9c:	60fb      	str	r3, [r7, #12]
            break;
34011b9e:	e012      	b.n	34011bc6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011ba0:	f7ff f89e 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34011ba4:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011ba6:	68fa      	ldr	r2, [r7, #12]
34011ba8:	68bb      	ldr	r3, [r7, #8]
34011baa:	fbb2 f3f3 	udiv	r3, r2, r3
34011bae:	60fb      	str	r3, [r7, #12]
            break;
34011bb0:	e009      	b.n	34011bc6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011bb2:	f7ff f8db 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34011bb6:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011bb8:	68fa      	ldr	r2, [r7, #12]
34011bba:	68bb      	ldr	r3, [r7, #8]
34011bbc:	fbb2 f3f3 	udiv	r3, r2, r3
34011bc0:	60fb      	str	r3, [r7, #12]
            break;
34011bc2:	e000      	b.n	34011bc6 <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
34011bc4:	bf00      	nop
        }
      }
      break;
34011bc6:	e009      	b.n	34011bdc <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34011bc8:	f7f6 fc0a 	bl	340083e0 <LL_RCC_HSE_IsReady>
34011bcc:	4603      	mov	r3, r0
34011bce:	2b00      	cmp	r3, #0
34011bd0:	d006      	beq.n	34011be0 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
34011bd2:	4b06      	ldr	r3, [pc, #24]	@ (34011bec <RCCEx_GetFDCANCLKFreq+0xfc>)
34011bd4:	60fb      	str	r3, [r7, #12]
      }
      break;
34011bd6:	e003      	b.n	34011be0 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
34011bd8:	bf00      	nop
34011bda:	e002      	b.n	34011be2 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34011bdc:	bf00      	nop
34011bde:	e000      	b.n	34011be2 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34011be0:	bf00      	nop
  }

  return fdcan_frequency;
34011be2:	68fb      	ldr	r3, [r7, #12]
}
34011be4:	4618      	mov	r0, r3
34011be6:	3710      	adds	r7, #16
34011be8:	46bd      	mov	sp, r7
34011bea:	bd80      	pop	{r7, pc}
34011bec:	02dc6c00 	.word	0x02dc6c00

34011bf0 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
34011bf0:	b580      	push	{r7, lr}
34011bf2:	b084      	sub	sp, #16
34011bf4:	af00      	add	r7, sp, #0
34011bf6:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34011bf8:	2300      	movs	r3, #0
34011bfa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34011bfc:	6878      	ldr	r0, [r7, #4]
34011bfe:	f7f6 ff35 	bl	34008a6c <LL_RCC_GetFMCClockSource>
34011c02:	4603      	mov	r3, r0
34011c04:	2b30      	cmp	r3, #48	@ 0x30
34011c06:	d05d      	beq.n	34011cc4 <RCCEx_GetFMCCLKFreq+0xd4>
34011c08:	2b30      	cmp	r3, #48	@ 0x30
34011c0a:	f200 809e 	bhi.w	34011d4a <RCCEx_GetFMCCLKFreq+0x15a>
34011c0e:	2b20      	cmp	r3, #32
34011c10:	d014      	beq.n	34011c3c <RCCEx_GetFMCCLKFreq+0x4c>
34011c12:	2b20      	cmp	r3, #32
34011c14:	f200 8099 	bhi.w	34011d4a <RCCEx_GetFMCCLKFreq+0x15a>
34011c18:	2b00      	cmp	r3, #0
34011c1a:	d002      	beq.n	34011c22 <RCCEx_GetFMCCLKFreq+0x32>
34011c1c:	2b10      	cmp	r3, #16
34011c1e:	d008      	beq.n	34011c32 <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34011c20:	e093      	b.n	34011d4a <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011c22:	f7f5 fff1 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34011c26:	4603      	mov	r3, r0
34011c28:	4618      	mov	r0, r3
34011c2a:	f7ff f8e5 	bl	34010df8 <RCCEx_GetHCLKFreq>
34011c2e:	60f8      	str	r0, [r7, #12]
      break;
34011c30:	e090      	b.n	34011d54 <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011c32:	2007      	movs	r0, #7
34011c34:	f7ff fbcc 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34011c38:	60f8      	str	r0, [r7, #12]
      break;
34011c3a:	e08b      	b.n	34011d54 <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
34011c3c:	f7f7 fac6 	bl	340091cc <LL_RCC_IC3_IsEnabled>
34011c40:	4603      	mov	r3, r0
34011c42:	2b00      	cmp	r3, #0
34011c44:	f000 8083 	beq.w	34011d4e <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
34011c48:	f7f7 fae2 	bl	34009210 <LL_RCC_IC3_GetDivider>
34011c4c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34011c4e:	f7f7 fad1 	bl	340091f4 <LL_RCC_IC3_GetSource>
34011c52:	4603      	mov	r3, r0
34011c54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011c58:	d029      	beq.n	34011cae <RCCEx_GetFMCCLKFreq+0xbe>
34011c5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011c5e:	d82f      	bhi.n	34011cc0 <RCCEx_GetFMCCLKFreq+0xd0>
34011c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011c64:	d01a      	beq.n	34011c9c <RCCEx_GetFMCCLKFreq+0xac>
34011c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011c6a:	d829      	bhi.n	34011cc0 <RCCEx_GetFMCCLKFreq+0xd0>
34011c6c:	2b00      	cmp	r3, #0
34011c6e:	d003      	beq.n	34011c78 <RCCEx_GetFMCCLKFreq+0x88>
34011c70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011c74:	d009      	beq.n	34011c8a <RCCEx_GetFMCCLKFreq+0x9a>
            break;
34011c76:	e023      	b.n	34011cc0 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011c78:	f7fe ffa6 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011c7c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011c7e:	68fa      	ldr	r2, [r7, #12]
34011c80:	68bb      	ldr	r3, [r7, #8]
34011c82:	fbb2 f3f3 	udiv	r3, r2, r3
34011c86:	60fb      	str	r3, [r7, #12]
            break;
34011c88:	e01b      	b.n	34011cc2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011c8a:	f7fe ffe3 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34011c8e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011c90:	68fa      	ldr	r2, [r7, #12]
34011c92:	68bb      	ldr	r3, [r7, #8]
34011c94:	fbb2 f3f3 	udiv	r3, r2, r3
34011c98:	60fb      	str	r3, [r7, #12]
            break;
34011c9a:	e012      	b.n	34011cc2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011c9c:	f7ff f820 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34011ca0:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011ca2:	68fa      	ldr	r2, [r7, #12]
34011ca4:	68bb      	ldr	r3, [r7, #8]
34011ca6:	fbb2 f3f3 	udiv	r3, r2, r3
34011caa:	60fb      	str	r3, [r7, #12]
            break;
34011cac:	e009      	b.n	34011cc2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011cae:	f7ff f85d 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34011cb2:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011cb4:	68fa      	ldr	r2, [r7, #12]
34011cb6:	68bb      	ldr	r3, [r7, #8]
34011cb8:	fbb2 f3f3 	udiv	r3, r2, r3
34011cbc:	60fb      	str	r3, [r7, #12]
            break;
34011cbe:	e000      	b.n	34011cc2 <RCCEx_GetFMCCLKFreq+0xd2>
            break;
34011cc0:	bf00      	nop
      break;
34011cc2:	e044      	b.n	34011d4e <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
34011cc4:	f7f7 fac2 	bl	3400924c <LL_RCC_IC4_IsEnabled>
34011cc8:	4603      	mov	r3, r0
34011cca:	2b00      	cmp	r3, #0
34011ccc:	d041      	beq.n	34011d52 <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
34011cce:	f7f7 fadf 	bl	34009290 <LL_RCC_IC4_GetDivider>
34011cd2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34011cd4:	f7f7 face 	bl	34009274 <LL_RCC_IC4_GetSource>
34011cd8:	4603      	mov	r3, r0
34011cda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011cde:	d029      	beq.n	34011d34 <RCCEx_GetFMCCLKFreq+0x144>
34011ce0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011ce4:	d82f      	bhi.n	34011d46 <RCCEx_GetFMCCLKFreq+0x156>
34011ce6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011cea:	d01a      	beq.n	34011d22 <RCCEx_GetFMCCLKFreq+0x132>
34011cec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011cf0:	d829      	bhi.n	34011d46 <RCCEx_GetFMCCLKFreq+0x156>
34011cf2:	2b00      	cmp	r3, #0
34011cf4:	d003      	beq.n	34011cfe <RCCEx_GetFMCCLKFreq+0x10e>
34011cf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011cfa:	d009      	beq.n	34011d10 <RCCEx_GetFMCCLKFreq+0x120>
            break;
34011cfc:	e023      	b.n	34011d46 <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011cfe:	f7fe ff63 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011d02:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011d04:	68fa      	ldr	r2, [r7, #12]
34011d06:	68bb      	ldr	r3, [r7, #8]
34011d08:	fbb2 f3f3 	udiv	r3, r2, r3
34011d0c:	60fb      	str	r3, [r7, #12]
            break;
34011d0e:	e01b      	b.n	34011d48 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011d10:	f7fe ffa0 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34011d14:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011d16:	68fa      	ldr	r2, [r7, #12]
34011d18:	68bb      	ldr	r3, [r7, #8]
34011d1a:	fbb2 f3f3 	udiv	r3, r2, r3
34011d1e:	60fb      	str	r3, [r7, #12]
            break;
34011d20:	e012      	b.n	34011d48 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011d22:	f7fe ffdd 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34011d26:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011d28:	68fa      	ldr	r2, [r7, #12]
34011d2a:	68bb      	ldr	r3, [r7, #8]
34011d2c:	fbb2 f3f3 	udiv	r3, r2, r3
34011d30:	60fb      	str	r3, [r7, #12]
            break;
34011d32:	e009      	b.n	34011d48 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011d34:	f7ff f81a 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34011d38:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011d3a:	68fa      	ldr	r2, [r7, #12]
34011d3c:	68bb      	ldr	r3, [r7, #8]
34011d3e:	fbb2 f3f3 	udiv	r3, r2, r3
34011d42:	60fb      	str	r3, [r7, #12]
            break;
34011d44:	e000      	b.n	34011d48 <RCCEx_GetFMCCLKFreq+0x158>
            break;
34011d46:	bf00      	nop
      break;
34011d48:	e003      	b.n	34011d52 <RCCEx_GetFMCCLKFreq+0x162>
      break;
34011d4a:	bf00      	nop
34011d4c:	e002      	b.n	34011d54 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34011d4e:	bf00      	nop
34011d50:	e000      	b.n	34011d54 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34011d52:	bf00      	nop
  }

  return fmc_frequency;
34011d54:	68fb      	ldr	r3, [r7, #12]
}
34011d56:	4618      	mov	r0, r3
34011d58:	3710      	adds	r7, #16
34011d5a:	46bd      	mov	sp, r7
34011d5c:	bd80      	pop	{r7, pc}
	...

34011d60 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
34011d60:	b580      	push	{r7, lr}
34011d62:	b084      	sub	sp, #16
34011d64:	af00      	add	r7, sp, #0
34011d66:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
34011d68:	2300      	movs	r3, #0
34011d6a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34011d6c:	6878      	ldr	r0, [r7, #4]
34011d6e:	f7f6 fe8f 	bl	34008a90 <LL_RCC_GetI2CClockSource>
34011d72:	4603      	mov	r3, r0
34011d74:	4aa2      	ldr	r2, [pc, #648]	@ (34012000 <RCCEx_GetI2CCLKFreq+0x2a0>)
34011d76:	4293      	cmp	r3, r2
34011d78:	f000 8172 	beq.w	34012060 <RCCEx_GetI2CCLKFreq+0x300>
34011d7c:	4aa0      	ldr	r2, [pc, #640]	@ (34012000 <RCCEx_GetI2CCLKFreq+0x2a0>)
34011d7e:	4293      	cmp	r3, r2
34011d80:	f200 8184 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011d84:	4a9f      	ldr	r2, [pc, #636]	@ (34012004 <RCCEx_GetI2CCLKFreq+0x2a4>)
34011d86:	4293      	cmp	r3, r2
34011d88:	f000 816a 	beq.w	34012060 <RCCEx_GetI2CCLKFreq+0x300>
34011d8c:	4a9d      	ldr	r2, [pc, #628]	@ (34012004 <RCCEx_GetI2CCLKFreq+0x2a4>)
34011d8e:	4293      	cmp	r3, r2
34011d90:	f200 817c 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011d94:	4a9c      	ldr	r2, [pc, #624]	@ (34012008 <RCCEx_GetI2CCLKFreq+0x2a8>)
34011d96:	4293      	cmp	r3, r2
34011d98:	f000 8162 	beq.w	34012060 <RCCEx_GetI2CCLKFreq+0x300>
34011d9c:	4a9a      	ldr	r2, [pc, #616]	@ (34012008 <RCCEx_GetI2CCLKFreq+0x2a8>)
34011d9e:	4293      	cmp	r3, r2
34011da0:	f200 8174 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011da4:	4a99      	ldr	r2, [pc, #612]	@ (3401200c <RCCEx_GetI2CCLKFreq+0x2ac>)
34011da6:	4293      	cmp	r3, r2
34011da8:	f000 815a 	beq.w	34012060 <RCCEx_GetI2CCLKFreq+0x300>
34011dac:	4a97      	ldr	r2, [pc, #604]	@ (3401200c <RCCEx_GetI2CCLKFreq+0x2ac>)
34011dae:	4293      	cmp	r3, r2
34011db0:	f200 816c 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011db4:	4a96      	ldr	r2, [pc, #600]	@ (34012010 <RCCEx_GetI2CCLKFreq+0x2b0>)
34011db6:	4293      	cmp	r3, r2
34011db8:	f000 8160 	beq.w	3401207c <RCCEx_GetI2CCLKFreq+0x31c>
34011dbc:	4a94      	ldr	r2, [pc, #592]	@ (34012010 <RCCEx_GetI2CCLKFreq+0x2b0>)
34011dbe:	4293      	cmp	r3, r2
34011dc0:	f200 8164 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011dc4:	4a93      	ldr	r2, [pc, #588]	@ (34012014 <RCCEx_GetI2CCLKFreq+0x2b4>)
34011dc6:	4293      	cmp	r3, r2
34011dc8:	f000 8158 	beq.w	3401207c <RCCEx_GetI2CCLKFreq+0x31c>
34011dcc:	4a91      	ldr	r2, [pc, #580]	@ (34012014 <RCCEx_GetI2CCLKFreq+0x2b4>)
34011dce:	4293      	cmp	r3, r2
34011dd0:	f200 815c 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011dd4:	4a90      	ldr	r2, [pc, #576]	@ (34012018 <RCCEx_GetI2CCLKFreq+0x2b8>)
34011dd6:	4293      	cmp	r3, r2
34011dd8:	f000 8150 	beq.w	3401207c <RCCEx_GetI2CCLKFreq+0x31c>
34011ddc:	4a8e      	ldr	r2, [pc, #568]	@ (34012018 <RCCEx_GetI2CCLKFreq+0x2b8>)
34011dde:	4293      	cmp	r3, r2
34011de0:	f200 8154 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011de4:	4a8d      	ldr	r2, [pc, #564]	@ (3401201c <RCCEx_GetI2CCLKFreq+0x2bc>)
34011de6:	4293      	cmp	r3, r2
34011de8:	f000 8148 	beq.w	3401207c <RCCEx_GetI2CCLKFreq+0x31c>
34011dec:	4a8b      	ldr	r2, [pc, #556]	@ (3401201c <RCCEx_GetI2CCLKFreq+0x2bc>)
34011dee:	4293      	cmp	r3, r2
34011df0:	f200 814c 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011df4:	4a8a      	ldr	r2, [pc, #552]	@ (34012020 <RCCEx_GetI2CCLKFreq+0x2c0>)
34011df6:	4293      	cmp	r3, r2
34011df8:	f000 80be 	beq.w	34011f78 <RCCEx_GetI2CCLKFreq+0x218>
34011dfc:	4a88      	ldr	r2, [pc, #544]	@ (34012020 <RCCEx_GetI2CCLKFreq+0x2c0>)
34011dfe:	4293      	cmp	r3, r2
34011e00:	f200 8144 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e04:	4a87      	ldr	r2, [pc, #540]	@ (34012024 <RCCEx_GetI2CCLKFreq+0x2c4>)
34011e06:	4293      	cmp	r3, r2
34011e08:	f000 80b6 	beq.w	34011f78 <RCCEx_GetI2CCLKFreq+0x218>
34011e0c:	4a85      	ldr	r2, [pc, #532]	@ (34012024 <RCCEx_GetI2CCLKFreq+0x2c4>)
34011e0e:	4293      	cmp	r3, r2
34011e10:	f200 813c 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e14:	4a84      	ldr	r2, [pc, #528]	@ (34012028 <RCCEx_GetI2CCLKFreq+0x2c8>)
34011e16:	4293      	cmp	r3, r2
34011e18:	f000 80ae 	beq.w	34011f78 <RCCEx_GetI2CCLKFreq+0x218>
34011e1c:	4a82      	ldr	r2, [pc, #520]	@ (34012028 <RCCEx_GetI2CCLKFreq+0x2c8>)
34011e1e:	4293      	cmp	r3, r2
34011e20:	f200 8134 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e24:	4a81      	ldr	r2, [pc, #516]	@ (3401202c <RCCEx_GetI2CCLKFreq+0x2cc>)
34011e26:	4293      	cmp	r3, r2
34011e28:	f000 80a6 	beq.w	34011f78 <RCCEx_GetI2CCLKFreq+0x218>
34011e2c:	4a7f      	ldr	r2, [pc, #508]	@ (3401202c <RCCEx_GetI2CCLKFreq+0x2cc>)
34011e2e:	4293      	cmp	r3, r2
34011e30:	f200 812c 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e34:	4a7e      	ldr	r2, [pc, #504]	@ (34012030 <RCCEx_GetI2CCLKFreq+0x2d0>)
34011e36:	4293      	cmp	r3, r2
34011e38:	d05a      	beq.n	34011ef0 <RCCEx_GetI2CCLKFreq+0x190>
34011e3a:	4a7d      	ldr	r2, [pc, #500]	@ (34012030 <RCCEx_GetI2CCLKFreq+0x2d0>)
34011e3c:	4293      	cmp	r3, r2
34011e3e:	f200 8125 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e42:	4a7c      	ldr	r2, [pc, #496]	@ (34012034 <RCCEx_GetI2CCLKFreq+0x2d4>)
34011e44:	4293      	cmp	r3, r2
34011e46:	d053      	beq.n	34011ef0 <RCCEx_GetI2CCLKFreq+0x190>
34011e48:	4a7a      	ldr	r2, [pc, #488]	@ (34012034 <RCCEx_GetI2CCLKFreq+0x2d4>)
34011e4a:	4293      	cmp	r3, r2
34011e4c:	f200 811e 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e50:	4a79      	ldr	r2, [pc, #484]	@ (34012038 <RCCEx_GetI2CCLKFreq+0x2d8>)
34011e52:	4293      	cmp	r3, r2
34011e54:	d04c      	beq.n	34011ef0 <RCCEx_GetI2CCLKFreq+0x190>
34011e56:	4a78      	ldr	r2, [pc, #480]	@ (34012038 <RCCEx_GetI2CCLKFreq+0x2d8>)
34011e58:	4293      	cmp	r3, r2
34011e5a:	f200 8117 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e5e:	4a77      	ldr	r2, [pc, #476]	@ (3401203c <RCCEx_GetI2CCLKFreq+0x2dc>)
34011e60:	4293      	cmp	r3, r2
34011e62:	d045      	beq.n	34011ef0 <RCCEx_GetI2CCLKFreq+0x190>
34011e64:	4a75      	ldr	r2, [pc, #468]	@ (3401203c <RCCEx_GetI2CCLKFreq+0x2dc>)
34011e66:	4293      	cmp	r3, r2
34011e68:	f200 8110 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e6c:	4a74      	ldr	r2, [pc, #464]	@ (34012040 <RCCEx_GetI2CCLKFreq+0x2e0>)
34011e6e:	4293      	cmp	r3, r2
34011e70:	d039      	beq.n	34011ee6 <RCCEx_GetI2CCLKFreq+0x186>
34011e72:	4a73      	ldr	r2, [pc, #460]	@ (34012040 <RCCEx_GetI2CCLKFreq+0x2e0>)
34011e74:	4293      	cmp	r3, r2
34011e76:	f200 8109 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e7a:	4a72      	ldr	r2, [pc, #456]	@ (34012044 <RCCEx_GetI2CCLKFreq+0x2e4>)
34011e7c:	4293      	cmp	r3, r2
34011e7e:	d032      	beq.n	34011ee6 <RCCEx_GetI2CCLKFreq+0x186>
34011e80:	4a70      	ldr	r2, [pc, #448]	@ (34012044 <RCCEx_GetI2CCLKFreq+0x2e4>)
34011e82:	4293      	cmp	r3, r2
34011e84:	f200 8102 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e88:	4a6f      	ldr	r2, [pc, #444]	@ (34012048 <RCCEx_GetI2CCLKFreq+0x2e8>)
34011e8a:	4293      	cmp	r3, r2
34011e8c:	d02b      	beq.n	34011ee6 <RCCEx_GetI2CCLKFreq+0x186>
34011e8e:	4a6e      	ldr	r2, [pc, #440]	@ (34012048 <RCCEx_GetI2CCLKFreq+0x2e8>)
34011e90:	4293      	cmp	r3, r2
34011e92:	f200 80fb 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011e96:	4a6d      	ldr	r2, [pc, #436]	@ (3401204c <RCCEx_GetI2CCLKFreq+0x2ec>)
34011e98:	4293      	cmp	r3, r2
34011e9a:	d024      	beq.n	34011ee6 <RCCEx_GetI2CCLKFreq+0x186>
34011e9c:	4a6b      	ldr	r2, [pc, #428]	@ (3401204c <RCCEx_GetI2CCLKFreq+0x2ec>)
34011e9e:	4293      	cmp	r3, r2
34011ea0:	f200 80f4 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011ea4:	4a6a      	ldr	r2, [pc, #424]	@ (34012050 <RCCEx_GetI2CCLKFreq+0x2f0>)
34011ea6:	4293      	cmp	r3, r2
34011ea8:	d011      	beq.n	34011ece <RCCEx_GetI2CCLKFreq+0x16e>
34011eaa:	4a69      	ldr	r2, [pc, #420]	@ (34012050 <RCCEx_GetI2CCLKFreq+0x2f0>)
34011eac:	4293      	cmp	r3, r2
34011eae:	f200 80ed 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011eb2:	4a68      	ldr	r2, [pc, #416]	@ (34012054 <RCCEx_GetI2CCLKFreq+0x2f4>)
34011eb4:	4293      	cmp	r3, r2
34011eb6:	d00a      	beq.n	34011ece <RCCEx_GetI2CCLKFreq+0x16e>
34011eb8:	4a66      	ldr	r2, [pc, #408]	@ (34012054 <RCCEx_GetI2CCLKFreq+0x2f4>)
34011eba:	4293      	cmp	r3, r2
34011ebc:	f200 80e6 	bhi.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
34011ec0:	4a65      	ldr	r2, [pc, #404]	@ (34012058 <RCCEx_GetI2CCLKFreq+0x2f8>)
34011ec2:	4293      	cmp	r3, r2
34011ec4:	d003      	beq.n	34011ece <RCCEx_GetI2CCLKFreq+0x16e>
34011ec6:	4a65      	ldr	r2, [pc, #404]	@ (3401205c <RCCEx_GetI2CCLKFreq+0x2fc>)
34011ec8:	4293      	cmp	r3, r2
34011eca:	f040 80df 	bne.w	3401208c <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011ece:	f7f5 fe9b 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34011ed2:	4603      	mov	r3, r0
34011ed4:	4618      	mov	r0, r3
34011ed6:	f7fe ff8f 	bl	34010df8 <RCCEx_GetHCLKFreq>
34011eda:	4603      	mov	r3, r0
34011edc:	4618      	mov	r0, r3
34011ede:	f7fe ff9c 	bl	34010e1a <RCCEx_GetPCLK1Freq>
34011ee2:	60f8      	str	r0, [r7, #12]
      break;
34011ee4:	e0db      	b.n	3401209e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011ee6:	2007      	movs	r0, #7
34011ee8:	f7ff fa72 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34011eec:	60f8      	str	r0, [r7, #12]
      break;
34011eee:	e0d6      	b.n	3401209e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34011ef0:	f7f7 faec 	bl	340094cc <LL_RCC_IC10_IsEnabled>
34011ef4:	4603      	mov	r3, r0
34011ef6:	2b00      	cmp	r3, #0
34011ef8:	f000 80ca 	beq.w	34012090 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34011efc:	f7f7 fb08 	bl	34009510 <LL_RCC_IC10_GetDivider>
34011f00:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34011f02:	f7f7 faf7 	bl	340094f4 <LL_RCC_IC10_GetSource>
34011f06:	4603      	mov	r3, r0
34011f08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011f0c:	d029      	beq.n	34011f62 <RCCEx_GetI2CCLKFreq+0x202>
34011f0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011f12:	d82f      	bhi.n	34011f74 <RCCEx_GetI2CCLKFreq+0x214>
34011f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011f18:	d01a      	beq.n	34011f50 <RCCEx_GetI2CCLKFreq+0x1f0>
34011f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011f1e:	d829      	bhi.n	34011f74 <RCCEx_GetI2CCLKFreq+0x214>
34011f20:	2b00      	cmp	r3, #0
34011f22:	d003      	beq.n	34011f2c <RCCEx_GetI2CCLKFreq+0x1cc>
34011f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011f28:	d009      	beq.n	34011f3e <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011f2a:	e023      	b.n	34011f74 <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011f2c:	f7fe fe4c 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011f30:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011f32:	68fa      	ldr	r2, [r7, #12]
34011f34:	68bb      	ldr	r3, [r7, #8]
34011f36:	fbb2 f3f3 	udiv	r3, r2, r3
34011f3a:	60fb      	str	r3, [r7, #12]
            break;
34011f3c:	e01b      	b.n	34011f76 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011f3e:	f7fe fe89 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34011f42:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011f44:	68fa      	ldr	r2, [r7, #12]
34011f46:	68bb      	ldr	r3, [r7, #8]
34011f48:	fbb2 f3f3 	udiv	r3, r2, r3
34011f4c:	60fb      	str	r3, [r7, #12]
            break;
34011f4e:	e012      	b.n	34011f76 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011f50:	f7fe fec6 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34011f54:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011f56:	68fa      	ldr	r2, [r7, #12]
34011f58:	68bb      	ldr	r3, [r7, #8]
34011f5a:	fbb2 f3f3 	udiv	r3, r2, r3
34011f5e:	60fb      	str	r3, [r7, #12]
            break;
34011f60:	e009      	b.n	34011f76 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011f62:	f7fe ff03 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34011f66:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011f68:	68fa      	ldr	r2, [r7, #12]
34011f6a:	68bb      	ldr	r3, [r7, #8]
34011f6c:	fbb2 f3f3 	udiv	r3, r2, r3
34011f70:	60fb      	str	r3, [r7, #12]
            break;
34011f72:	e000      	b.n	34011f76 <RCCEx_GetI2CCLKFreq+0x216>
            break;
34011f74:	bf00      	nop
        }
      }
      break;
34011f76:	e08b      	b.n	34012090 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34011f78:	f7f7 fba8 	bl	340096cc <LL_RCC_IC15_IsEnabled>
34011f7c:	4603      	mov	r3, r0
34011f7e:	2b00      	cmp	r3, #0
34011f80:	f000 8088 	beq.w	34012094 <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34011f84:	f7f7 fbc4 	bl	34009710 <LL_RCC_IC15_GetDivider>
34011f88:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34011f8a:	f7f7 fbb3 	bl	340096f4 <LL_RCC_IC15_GetSource>
34011f8e:	4603      	mov	r3, r0
34011f90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011f94:	d029      	beq.n	34011fea <RCCEx_GetI2CCLKFreq+0x28a>
34011f96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011f9a:	d82f      	bhi.n	34011ffc <RCCEx_GetI2CCLKFreq+0x29c>
34011f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011fa0:	d01a      	beq.n	34011fd8 <RCCEx_GetI2CCLKFreq+0x278>
34011fa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011fa6:	d829      	bhi.n	34011ffc <RCCEx_GetI2CCLKFreq+0x29c>
34011fa8:	2b00      	cmp	r3, #0
34011faa:	d003      	beq.n	34011fb4 <RCCEx_GetI2CCLKFreq+0x254>
34011fac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011fb0:	d009      	beq.n	34011fc6 <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011fb2:	e023      	b.n	34011ffc <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011fb4:	f7fe fe08 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34011fb8:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011fba:	68fa      	ldr	r2, [r7, #12]
34011fbc:	68bb      	ldr	r3, [r7, #8]
34011fbe:	fbb2 f3f3 	udiv	r3, r2, r3
34011fc2:	60fb      	str	r3, [r7, #12]
            break;
34011fc4:	e01b      	b.n	34011ffe <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011fc6:	f7fe fe45 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34011fca:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011fcc:	68fa      	ldr	r2, [r7, #12]
34011fce:	68bb      	ldr	r3, [r7, #8]
34011fd0:	fbb2 f3f3 	udiv	r3, r2, r3
34011fd4:	60fb      	str	r3, [r7, #12]
            break;
34011fd6:	e012      	b.n	34011ffe <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011fd8:	f7fe fe82 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34011fdc:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011fde:	68fa      	ldr	r2, [r7, #12]
34011fe0:	68bb      	ldr	r3, [r7, #8]
34011fe2:	fbb2 f3f3 	udiv	r3, r2, r3
34011fe6:	60fb      	str	r3, [r7, #12]
            break;
34011fe8:	e009      	b.n	34011ffe <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011fea:	f7fe febf 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34011fee:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011ff0:	68fa      	ldr	r2, [r7, #12]
34011ff2:	68bb      	ldr	r3, [r7, #8]
34011ff4:	fbb2 f3f3 	udiv	r3, r2, r3
34011ff8:	60fb      	str	r3, [r7, #12]
            break;
34011ffa:	e000      	b.n	34011ffe <RCCEx_GetI2CCLKFreq+0x29e>
            break;
34011ffc:	bf00      	nop
        }
      }
      break;
34011ffe:	e049      	b.n	34012094 <RCCEx_GetI2CCLKFreq+0x334>
34012000:	07050c0c 	.word	0x07050c0c
34012004:	0705080c 	.word	0x0705080c
34012008:	0705040c 	.word	0x0705040c
3401200c:	0705000c 	.word	0x0705000c
34012010:	07040c0c 	.word	0x07040c0c
34012014:	0704080c 	.word	0x0704080c
34012018:	0704040c 	.word	0x0704040c
3401201c:	0704000c 	.word	0x0704000c
34012020:	07030c0c 	.word	0x07030c0c
34012024:	0703080c 	.word	0x0703080c
34012028:	0703040c 	.word	0x0703040c
3401202c:	0703000c 	.word	0x0703000c
34012030:	07020c0c 	.word	0x07020c0c
34012034:	0702080c 	.word	0x0702080c
34012038:	0702040c 	.word	0x0702040c
3401203c:	0702000c 	.word	0x0702000c
34012040:	07010c0c 	.word	0x07010c0c
34012044:	0701080c 	.word	0x0701080c
34012048:	0701040c 	.word	0x0701040c
3401204c:	0701000c 	.word	0x0701000c
34012050:	07000c0c 	.word	0x07000c0c
34012054:	0700080c 	.word	0x0700080c
34012058:	0700000c 	.word	0x0700000c
3401205c:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34012060:	f7f6 f9d0 	bl	34008404 <LL_RCC_HSI_IsReady>
34012064:	4603      	mov	r3, r0
34012066:	2b00      	cmp	r3, #0
34012068:	d016      	beq.n	34012098 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401206a:	f7f6 f9dd 	bl	34008428 <LL_RCC_HSI_GetDivider>
3401206e:	4603      	mov	r3, r0
34012070:	09db      	lsrs	r3, r3, #7
34012072:	4a0d      	ldr	r2, [pc, #52]	@ (340120a8 <RCCEx_GetI2CCLKFreq+0x348>)
34012074:	fa22 f303 	lsr.w	r3, r2, r3
34012078:	60fb      	str	r3, [r7, #12]
      }
      break;
3401207a:	e00d      	b.n	34012098 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3401207c:	f7f6 f9e2 	bl	34008444 <LL_RCC_MSI_IsReady>
34012080:	4603      	mov	r3, r0
34012082:	2b00      	cmp	r3, #0
34012084:	d00a      	beq.n	3401209c <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
34012086:	4b09      	ldr	r3, [pc, #36]	@ (340120ac <RCCEx_GetI2CCLKFreq+0x34c>)
34012088:	60fb      	str	r3, [r7, #12]
      }
      break;
3401208a:	e007      	b.n	3401209c <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
3401208c:	bf00      	nop
3401208e:	e006      	b.n	3401209e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34012090:	bf00      	nop
34012092:	e004      	b.n	3401209e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34012094:	bf00      	nop
34012096:	e002      	b.n	3401209e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34012098:	bf00      	nop
3401209a:	e000      	b.n	3401209e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3401209c:	bf00      	nop
  }

  return i2c_frequency;
3401209e:	68fb      	ldr	r3, [r7, #12]
}
340120a0:	4618      	mov	r0, r3
340120a2:	3710      	adds	r7, #16
340120a4:	46bd      	mov	sp, r7
340120a6:	bd80      	pop	{r7, pc}
340120a8:	03d09000 	.word	0x03d09000
340120ac:	003d0900 	.word	0x003d0900

340120b0 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
340120b0:	b580      	push	{r7, lr}
340120b2:	b084      	sub	sp, #16
340120b4:	af00      	add	r7, sp, #0
340120b6:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
340120b8:	2300      	movs	r3, #0
340120ba:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340120bc:	6878      	ldr	r0, [r7, #4]
340120be:	f7f6 fcf3 	bl	34008aa8 <LL_RCC_GetI3CClockSource>
340120c2:	4603      	mov	r3, r0
340120c4:	4a86      	ldr	r2, [pc, #536]	@ (340122e0 <RCCEx_GetI3CCLKFreq+0x230>)
340120c6:	4293      	cmp	r3, r2
340120c8:	f000 80e6 	beq.w	34012298 <RCCEx_GetI3CCLKFreq+0x1e8>
340120cc:	4a84      	ldr	r2, [pc, #528]	@ (340122e0 <RCCEx_GetI3CCLKFreq+0x230>)
340120ce:	4293      	cmp	r3, r2
340120d0:	f200 80f8 	bhi.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
340120d4:	4a83      	ldr	r2, [pc, #524]	@ (340122e4 <RCCEx_GetI3CCLKFreq+0x234>)
340120d6:	4293      	cmp	r3, r2
340120d8:	f000 80de 	beq.w	34012298 <RCCEx_GetI3CCLKFreq+0x1e8>
340120dc:	4a81      	ldr	r2, [pc, #516]	@ (340122e4 <RCCEx_GetI3CCLKFreq+0x234>)
340120de:	4293      	cmp	r3, r2
340120e0:	f200 80f0 	bhi.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
340120e4:	4a80      	ldr	r2, [pc, #512]	@ (340122e8 <RCCEx_GetI3CCLKFreq+0x238>)
340120e6:	4293      	cmp	r3, r2
340120e8:	f000 80e4 	beq.w	340122b4 <RCCEx_GetI3CCLKFreq+0x204>
340120ec:	4a7e      	ldr	r2, [pc, #504]	@ (340122e8 <RCCEx_GetI3CCLKFreq+0x238>)
340120ee:	4293      	cmp	r3, r2
340120f0:	f200 80e8 	bhi.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
340120f4:	4a7d      	ldr	r2, [pc, #500]	@ (340122ec <RCCEx_GetI3CCLKFreq+0x23c>)
340120f6:	4293      	cmp	r3, r2
340120f8:	f000 80dc 	beq.w	340122b4 <RCCEx_GetI3CCLKFreq+0x204>
340120fc:	4a7b      	ldr	r2, [pc, #492]	@ (340122ec <RCCEx_GetI3CCLKFreq+0x23c>)
340120fe:	4293      	cmp	r3, r2
34012100:	f200 80e0 	bhi.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
34012104:	4a7a      	ldr	r2, [pc, #488]	@ (340122f0 <RCCEx_GetI3CCLKFreq+0x240>)
34012106:	4293      	cmp	r3, r2
34012108:	f000 8083 	beq.w	34012212 <RCCEx_GetI3CCLKFreq+0x162>
3401210c:	4a78      	ldr	r2, [pc, #480]	@ (340122f0 <RCCEx_GetI3CCLKFreq+0x240>)
3401210e:	4293      	cmp	r3, r2
34012110:	f200 80d8 	bhi.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
34012114:	4a77      	ldr	r2, [pc, #476]	@ (340122f4 <RCCEx_GetI3CCLKFreq+0x244>)
34012116:	4293      	cmp	r3, r2
34012118:	d07b      	beq.n	34012212 <RCCEx_GetI3CCLKFreq+0x162>
3401211a:	4a76      	ldr	r2, [pc, #472]	@ (340122f4 <RCCEx_GetI3CCLKFreq+0x244>)
3401211c:	4293      	cmp	r3, r2
3401211e:	f200 80d1 	bhi.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
34012122:	4a75      	ldr	r2, [pc, #468]	@ (340122f8 <RCCEx_GetI3CCLKFreq+0x248>)
34012124:	4293      	cmp	r3, r2
34012126:	d030      	beq.n	3401218a <RCCEx_GetI3CCLKFreq+0xda>
34012128:	4a73      	ldr	r2, [pc, #460]	@ (340122f8 <RCCEx_GetI3CCLKFreq+0x248>)
3401212a:	4293      	cmp	r3, r2
3401212c:	f200 80ca 	bhi.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
34012130:	4a72      	ldr	r2, [pc, #456]	@ (340122fc <RCCEx_GetI3CCLKFreq+0x24c>)
34012132:	4293      	cmp	r3, r2
34012134:	d029      	beq.n	3401218a <RCCEx_GetI3CCLKFreq+0xda>
34012136:	4a71      	ldr	r2, [pc, #452]	@ (340122fc <RCCEx_GetI3CCLKFreq+0x24c>)
34012138:	4293      	cmp	r3, r2
3401213a:	f200 80c3 	bhi.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
3401213e:	4a70      	ldr	r2, [pc, #448]	@ (34012300 <RCCEx_GetI3CCLKFreq+0x250>)
34012140:	4293      	cmp	r3, r2
34012142:	d01d      	beq.n	34012180 <RCCEx_GetI3CCLKFreq+0xd0>
34012144:	4a6e      	ldr	r2, [pc, #440]	@ (34012300 <RCCEx_GetI3CCLKFreq+0x250>)
34012146:	4293      	cmp	r3, r2
34012148:	f200 80bc 	bhi.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
3401214c:	4a6d      	ldr	r2, [pc, #436]	@ (34012304 <RCCEx_GetI3CCLKFreq+0x254>)
3401214e:	4293      	cmp	r3, r2
34012150:	d016      	beq.n	34012180 <RCCEx_GetI3CCLKFreq+0xd0>
34012152:	4a6c      	ldr	r2, [pc, #432]	@ (34012304 <RCCEx_GetI3CCLKFreq+0x254>)
34012154:	4293      	cmp	r3, r2
34012156:	f200 80b5 	bhi.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
3401215a:	4a6b      	ldr	r2, [pc, #428]	@ (34012308 <RCCEx_GetI3CCLKFreq+0x258>)
3401215c:	4293      	cmp	r3, r2
3401215e:	d003      	beq.n	34012168 <RCCEx_GetI3CCLKFreq+0xb8>
34012160:	4a6a      	ldr	r2, [pc, #424]	@ (3401230c <RCCEx_GetI3CCLKFreq+0x25c>)
34012162:	4293      	cmp	r3, r2
34012164:	f040 80ae 	bne.w	340122c4 <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34012168:	f7f5 fd4e 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
3401216c:	4603      	mov	r3, r0
3401216e:	4618      	mov	r0, r3
34012170:	f7fe fe42 	bl	34010df8 <RCCEx_GetHCLKFreq>
34012174:	4603      	mov	r3, r0
34012176:	4618      	mov	r0, r3
34012178:	f7fe fe4f 	bl	34010e1a <RCCEx_GetPCLK1Freq>
3401217c:	60f8      	str	r0, [r7, #12]
      break;
3401217e:	e0aa      	b.n	340122d6 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012180:	2007      	movs	r0, #7
34012182:	f7ff f925 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34012186:	60f8      	str	r0, [r7, #12]
      break;
34012188:	e0a5      	b.n	340122d6 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
3401218a:	f7f7 f99f 	bl	340094cc <LL_RCC_IC10_IsEnabled>
3401218e:	4603      	mov	r3, r0
34012190:	2b00      	cmp	r3, #0
34012192:	f000 8099 	beq.w	340122c8 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34012196:	f7f7 f9bb 	bl	34009510 <LL_RCC_IC10_GetDivider>
3401219a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
3401219c:	f7f7 f9aa 	bl	340094f4 <LL_RCC_IC10_GetSource>
340121a0:	4603      	mov	r3, r0
340121a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340121a6:	d029      	beq.n	340121fc <RCCEx_GetI3CCLKFreq+0x14c>
340121a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340121ac:	d82f      	bhi.n	3401220e <RCCEx_GetI3CCLKFreq+0x15e>
340121ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340121b2:	d01a      	beq.n	340121ea <RCCEx_GetI3CCLKFreq+0x13a>
340121b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340121b8:	d829      	bhi.n	3401220e <RCCEx_GetI3CCLKFreq+0x15e>
340121ba:	2b00      	cmp	r3, #0
340121bc:	d003      	beq.n	340121c6 <RCCEx_GetI3CCLKFreq+0x116>
340121be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340121c2:	d009      	beq.n	340121d8 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340121c4:	e023      	b.n	3401220e <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340121c6:	f7fe fcff 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
340121ca:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
340121cc:	68fa      	ldr	r2, [r7, #12]
340121ce:	68bb      	ldr	r3, [r7, #8]
340121d0:	fbb2 f3f3 	udiv	r3, r2, r3
340121d4:	60fb      	str	r3, [r7, #12]
            break;
340121d6:	e01b      	b.n	34012210 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340121d8:	f7fe fd3c 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340121dc:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
340121de:	68fa      	ldr	r2, [r7, #12]
340121e0:	68bb      	ldr	r3, [r7, #8]
340121e2:	fbb2 f3f3 	udiv	r3, r2, r3
340121e6:	60fb      	str	r3, [r7, #12]
            break;
340121e8:	e012      	b.n	34012210 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340121ea:	f7fe fd79 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340121ee:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
340121f0:	68fa      	ldr	r2, [r7, #12]
340121f2:	68bb      	ldr	r3, [r7, #8]
340121f4:	fbb2 f3f3 	udiv	r3, r2, r3
340121f8:	60fb      	str	r3, [r7, #12]
            break;
340121fa:	e009      	b.n	34012210 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340121fc:	f7fe fdb6 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34012200:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34012202:	68fa      	ldr	r2, [r7, #12]
34012204:	68bb      	ldr	r3, [r7, #8]
34012206:	fbb2 f3f3 	udiv	r3, r2, r3
3401220a:	60fb      	str	r3, [r7, #12]
            break;
3401220c:	e000      	b.n	34012210 <RCCEx_GetI3CCLKFreq+0x160>
            break;
3401220e:	bf00      	nop
        }
      }
      break;
34012210:	e05a      	b.n	340122c8 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34012212:	f7f7 fa5b 	bl	340096cc <LL_RCC_IC15_IsEnabled>
34012216:	4603      	mov	r3, r0
34012218:	2b00      	cmp	r3, #0
3401221a:	d057      	beq.n	340122cc <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
3401221c:	f7f7 fa78 	bl	34009710 <LL_RCC_IC15_GetDivider>
34012220:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34012222:	f7f7 fa67 	bl	340096f4 <LL_RCC_IC15_GetSource>
34012226:	4603      	mov	r3, r0
34012228:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401222c:	d029      	beq.n	34012282 <RCCEx_GetI3CCLKFreq+0x1d2>
3401222e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012232:	d82f      	bhi.n	34012294 <RCCEx_GetI3CCLKFreq+0x1e4>
34012234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012238:	d01a      	beq.n	34012270 <RCCEx_GetI3CCLKFreq+0x1c0>
3401223a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401223e:	d829      	bhi.n	34012294 <RCCEx_GetI3CCLKFreq+0x1e4>
34012240:	2b00      	cmp	r3, #0
34012242:	d003      	beq.n	3401224c <RCCEx_GetI3CCLKFreq+0x19c>
34012244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012248:	d009      	beq.n	3401225e <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401224a:	e023      	b.n	34012294 <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401224c:	f7fe fcbc 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34012250:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34012252:	68fa      	ldr	r2, [r7, #12]
34012254:	68bb      	ldr	r3, [r7, #8]
34012256:	fbb2 f3f3 	udiv	r3, r2, r3
3401225a:	60fb      	str	r3, [r7, #12]
            break;
3401225c:	e01b      	b.n	34012296 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401225e:	f7fe fcf9 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34012262:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34012264:	68fa      	ldr	r2, [r7, #12]
34012266:	68bb      	ldr	r3, [r7, #8]
34012268:	fbb2 f3f3 	udiv	r3, r2, r3
3401226c:	60fb      	str	r3, [r7, #12]
            break;
3401226e:	e012      	b.n	34012296 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012270:	f7fe fd36 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34012274:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34012276:	68fa      	ldr	r2, [r7, #12]
34012278:	68bb      	ldr	r3, [r7, #8]
3401227a:	fbb2 f3f3 	udiv	r3, r2, r3
3401227e:	60fb      	str	r3, [r7, #12]
            break;
34012280:	e009      	b.n	34012296 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012282:	f7fe fd73 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34012286:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34012288:	68fa      	ldr	r2, [r7, #12]
3401228a:	68bb      	ldr	r3, [r7, #8]
3401228c:	fbb2 f3f3 	udiv	r3, r2, r3
34012290:	60fb      	str	r3, [r7, #12]
            break;
34012292:	e000      	b.n	34012296 <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
34012294:	bf00      	nop
        }
      }
      break;
34012296:	e019      	b.n	340122cc <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34012298:	f7f6 f8b4 	bl	34008404 <LL_RCC_HSI_IsReady>
3401229c:	4603      	mov	r3, r0
3401229e:	2b00      	cmp	r3, #0
340122a0:	d016      	beq.n	340122d0 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340122a2:	f7f6 f8c1 	bl	34008428 <LL_RCC_HSI_GetDivider>
340122a6:	4603      	mov	r3, r0
340122a8:	09db      	lsrs	r3, r3, #7
340122aa:	4a19      	ldr	r2, [pc, #100]	@ (34012310 <RCCEx_GetI3CCLKFreq+0x260>)
340122ac:	fa22 f303 	lsr.w	r3, r2, r3
340122b0:	60fb      	str	r3, [r7, #12]
      }
      break;
340122b2:	e00d      	b.n	340122d0 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340122b4:	f7f6 f8c6 	bl	34008444 <LL_RCC_MSI_IsReady>
340122b8:	4603      	mov	r3, r0
340122ba:	2b00      	cmp	r3, #0
340122bc:	d00a      	beq.n	340122d4 <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
340122be:	4b15      	ldr	r3, [pc, #84]	@ (34012314 <RCCEx_GetI3CCLKFreq+0x264>)
340122c0:	60fb      	str	r3, [r7, #12]
      }
      break;
340122c2:	e007      	b.n	340122d4 <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
340122c4:	bf00      	nop
340122c6:	e006      	b.n	340122d6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
340122c8:	bf00      	nop
340122ca:	e004      	b.n	340122d6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
340122cc:	bf00      	nop
340122ce:	e002      	b.n	340122d6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
340122d0:	bf00      	nop
340122d2:	e000      	b.n	340122d6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
340122d4:	bf00      	nop
  }

  return i3c_frequency;
340122d6:	68fb      	ldr	r3, [r7, #12]
}
340122d8:	4618      	mov	r0, r3
340122da:	3710      	adds	r7, #16
340122dc:	46bd      	mov	sp, r7
340122de:	bd80      	pop	{r7, pc}
340122e0:	0705140c 	.word	0x0705140c
340122e4:	0705100c 	.word	0x0705100c
340122e8:	0704140c 	.word	0x0704140c
340122ec:	0704100c 	.word	0x0704100c
340122f0:	0703140c 	.word	0x0703140c
340122f4:	0703100c 	.word	0x0703100c
340122f8:	0702140c 	.word	0x0702140c
340122fc:	0702100c 	.word	0x0702100c
34012300:	0701140c 	.word	0x0701140c
34012304:	0701100c 	.word	0x0701100c
34012308:	0700100c 	.word	0x0700100c
3401230c:	0700140c 	.word	0x0700140c
34012310:	03d09000 	.word	0x03d09000
34012314:	003d0900 	.word	0x003d0900

34012318 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
34012318:	b590      	push	{r4, r7, lr}
3401231a:	b085      	sub	sp, #20
3401231c:	af00      	add	r7, sp, #0
3401231e:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34012320:	2300      	movs	r3, #0
34012322:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34012324:	6878      	ldr	r0, [r7, #4]
34012326:	f7f6 fbcb 	bl	34008ac0 <LL_RCC_GetLPTIMClockSource>
3401232a:	4603      	mov	r3, r0
3401232c:	4aa1      	ldr	r2, [pc, #644]	@ (340125b4 <RCCEx_GetLPTIMCLKFreq+0x29c>)
3401232e:	4293      	cmp	r3, r2
34012330:	f000 8185 	beq.w	3401263e <RCCEx_GetLPTIMCLKFreq+0x326>
34012334:	4a9f      	ldr	r2, [pc, #636]	@ (340125b4 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34012336:	4293      	cmp	r3, r2
34012338:	f200 818b 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401233c:	4a9e      	ldr	r2, [pc, #632]	@ (340125b8 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3401233e:	4293      	cmp	r3, r2
34012340:	f000 817d 	beq.w	3401263e <RCCEx_GetLPTIMCLKFreq+0x326>
34012344:	4a9c      	ldr	r2, [pc, #624]	@ (340125b8 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34012346:	4293      	cmp	r3, r2
34012348:	f200 8183 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401234c:	4a9b      	ldr	r2, [pc, #620]	@ (340125bc <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3401234e:	4293      	cmp	r3, r2
34012350:	f000 8175 	beq.w	3401263e <RCCEx_GetLPTIMCLKFreq+0x326>
34012354:	4a99      	ldr	r2, [pc, #612]	@ (340125bc <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34012356:	4293      	cmp	r3, r2
34012358:	f200 817b 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401235c:	4a98      	ldr	r2, [pc, #608]	@ (340125c0 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3401235e:	4293      	cmp	r3, r2
34012360:	f000 816d 	beq.w	3401263e <RCCEx_GetLPTIMCLKFreq+0x326>
34012364:	4a96      	ldr	r2, [pc, #600]	@ (340125c0 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34012366:	4293      	cmp	r3, r2
34012368:	f200 8173 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401236c:	4a95      	ldr	r2, [pc, #596]	@ (340125c4 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3401236e:	4293      	cmp	r3, r2
34012370:	f000 8165 	beq.w	3401263e <RCCEx_GetLPTIMCLKFreq+0x326>
34012374:	4a93      	ldr	r2, [pc, #588]	@ (340125c4 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34012376:	4293      	cmp	r3, r2
34012378:	f200 816b 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401237c:	4a92      	ldr	r2, [pc, #584]	@ (340125c8 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
3401237e:	4293      	cmp	r3, r2
34012380:	f000 8154 	beq.w	3401262c <RCCEx_GetLPTIMCLKFreq+0x314>
34012384:	4a90      	ldr	r2, [pc, #576]	@ (340125c8 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34012386:	4293      	cmp	r3, r2
34012388:	f200 8163 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401238c:	4a8f      	ldr	r2, [pc, #572]	@ (340125cc <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3401238e:	4293      	cmp	r3, r2
34012390:	f000 814c 	beq.w	3401262c <RCCEx_GetLPTIMCLKFreq+0x314>
34012394:	4a8d      	ldr	r2, [pc, #564]	@ (340125cc <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34012396:	4293      	cmp	r3, r2
34012398:	f200 815b 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401239c:	4a8c      	ldr	r2, [pc, #560]	@ (340125d0 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3401239e:	4293      	cmp	r3, r2
340123a0:	f000 8144 	beq.w	3401262c <RCCEx_GetLPTIMCLKFreq+0x314>
340123a4:	4a8a      	ldr	r2, [pc, #552]	@ (340125d0 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
340123a6:	4293      	cmp	r3, r2
340123a8:	f200 8153 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
340123ac:	4a89      	ldr	r2, [pc, #548]	@ (340125d4 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
340123ae:	4293      	cmp	r3, r2
340123b0:	f000 813c 	beq.w	3401262c <RCCEx_GetLPTIMCLKFreq+0x314>
340123b4:	4a87      	ldr	r2, [pc, #540]	@ (340125d4 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
340123b6:	4293      	cmp	r3, r2
340123b8:	f200 814b 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
340123bc:	4a86      	ldr	r2, [pc, #536]	@ (340125d8 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
340123be:	4293      	cmp	r3, r2
340123c0:	f000 8134 	beq.w	3401262c <RCCEx_GetLPTIMCLKFreq+0x314>
340123c4:	4a84      	ldr	r2, [pc, #528]	@ (340125d8 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
340123c6:	4293      	cmp	r3, r2
340123c8:	f200 8143 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
340123cc:	4a83      	ldr	r2, [pc, #524]	@ (340125dc <RCCEx_GetLPTIMCLKFreq+0x2c4>)
340123ce:	4293      	cmp	r3, r2
340123d0:	f000 80e7 	beq.w	340125a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
340123d4:	4a81      	ldr	r2, [pc, #516]	@ (340125dc <RCCEx_GetLPTIMCLKFreq+0x2c4>)
340123d6:	4293      	cmp	r3, r2
340123d8:	f200 813b 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
340123dc:	4a80      	ldr	r2, [pc, #512]	@ (340125e0 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
340123de:	4293      	cmp	r3, r2
340123e0:	f000 80df 	beq.w	340125a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
340123e4:	4a7e      	ldr	r2, [pc, #504]	@ (340125e0 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
340123e6:	4293      	cmp	r3, r2
340123e8:	f200 8133 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
340123ec:	4a7d      	ldr	r2, [pc, #500]	@ (340125e4 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
340123ee:	4293      	cmp	r3, r2
340123f0:	f000 80d7 	beq.w	340125a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
340123f4:	4a7b      	ldr	r2, [pc, #492]	@ (340125e4 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
340123f6:	4293      	cmp	r3, r2
340123f8:	f200 812b 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
340123fc:	4a7a      	ldr	r2, [pc, #488]	@ (340125e8 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
340123fe:	4293      	cmp	r3, r2
34012400:	f000 80cf 	beq.w	340125a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
34012404:	4a78      	ldr	r2, [pc, #480]	@ (340125e8 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
34012406:	4293      	cmp	r3, r2
34012408:	f200 8123 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401240c:	4a77      	ldr	r2, [pc, #476]	@ (340125ec <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3401240e:	4293      	cmp	r3, r2
34012410:	f000 80c7 	beq.w	340125a2 <RCCEx_GetLPTIMCLKFreq+0x28a>
34012414:	4a75      	ldr	r2, [pc, #468]	@ (340125ec <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34012416:	4293      	cmp	r3, r2
34012418:	f200 811b 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401241c:	4a74      	ldr	r2, [pc, #464]	@ (340125f0 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3401241e:	4293      	cmp	r3, r2
34012420:	d07b      	beq.n	3401251a <RCCEx_GetLPTIMCLKFreq+0x202>
34012422:	4a73      	ldr	r2, [pc, #460]	@ (340125f0 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34012424:	4293      	cmp	r3, r2
34012426:	f200 8114 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401242a:	4a72      	ldr	r2, [pc, #456]	@ (340125f4 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3401242c:	4293      	cmp	r3, r2
3401242e:	d074      	beq.n	3401251a <RCCEx_GetLPTIMCLKFreq+0x202>
34012430:	4a70      	ldr	r2, [pc, #448]	@ (340125f4 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34012432:	4293      	cmp	r3, r2
34012434:	f200 810d 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012438:	4a6f      	ldr	r2, [pc, #444]	@ (340125f8 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3401243a:	4293      	cmp	r3, r2
3401243c:	d06d      	beq.n	3401251a <RCCEx_GetLPTIMCLKFreq+0x202>
3401243e:	4a6e      	ldr	r2, [pc, #440]	@ (340125f8 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34012440:	4293      	cmp	r3, r2
34012442:	f200 8106 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012446:	4a6d      	ldr	r2, [pc, #436]	@ (340125fc <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34012448:	4293      	cmp	r3, r2
3401244a:	d066      	beq.n	3401251a <RCCEx_GetLPTIMCLKFreq+0x202>
3401244c:	4a6b      	ldr	r2, [pc, #428]	@ (340125fc <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3401244e:	4293      	cmp	r3, r2
34012450:	f200 80ff 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012454:	4a6a      	ldr	r2, [pc, #424]	@ (34012600 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34012456:	4293      	cmp	r3, r2
34012458:	d05f      	beq.n	3401251a <RCCEx_GetLPTIMCLKFreq+0x202>
3401245a:	4a69      	ldr	r2, [pc, #420]	@ (34012600 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3401245c:	4293      	cmp	r3, r2
3401245e:	f200 80f8 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012462:	4a68      	ldr	r2, [pc, #416]	@ (34012604 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34012464:	4293      	cmp	r3, r2
34012466:	d053      	beq.n	34012510 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012468:	4a66      	ldr	r2, [pc, #408]	@ (34012604 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3401246a:	4293      	cmp	r3, r2
3401246c:	f200 80f1 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012470:	4a65      	ldr	r2, [pc, #404]	@ (34012608 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34012472:	4293      	cmp	r3, r2
34012474:	d04c      	beq.n	34012510 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012476:	4a64      	ldr	r2, [pc, #400]	@ (34012608 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34012478:	4293      	cmp	r3, r2
3401247a:	f200 80ea 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401247e:	4a63      	ldr	r2, [pc, #396]	@ (3401260c <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34012480:	4293      	cmp	r3, r2
34012482:	d045      	beq.n	34012510 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012484:	4a61      	ldr	r2, [pc, #388]	@ (3401260c <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34012486:	4293      	cmp	r3, r2
34012488:	f200 80e3 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401248c:	4a60      	ldr	r2, [pc, #384]	@ (34012610 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3401248e:	4293      	cmp	r3, r2
34012490:	d03e      	beq.n	34012510 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012492:	4a5f      	ldr	r2, [pc, #380]	@ (34012610 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
34012494:	4293      	cmp	r3, r2
34012496:	f200 80dc 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401249a:	4a5e      	ldr	r2, [pc, #376]	@ (34012614 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3401249c:	4293      	cmp	r3, r2
3401249e:	d037      	beq.n	34012510 <RCCEx_GetLPTIMCLKFreq+0x1f8>
340124a0:	4a5c      	ldr	r2, [pc, #368]	@ (34012614 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
340124a2:	4293      	cmp	r3, r2
340124a4:	f200 80d5 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
340124a8:	4a5b      	ldr	r2, [pc, #364]	@ (34012618 <RCCEx_GetLPTIMCLKFreq+0x300>)
340124aa:	4293      	cmp	r3, r2
340124ac:	d024      	beq.n	340124f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
340124ae:	4a5a      	ldr	r2, [pc, #360]	@ (34012618 <RCCEx_GetLPTIMCLKFreq+0x300>)
340124b0:	4293      	cmp	r3, r2
340124b2:	f200 80ce 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
340124b6:	4a59      	ldr	r2, [pc, #356]	@ (3401261c <RCCEx_GetLPTIMCLKFreq+0x304>)
340124b8:	4293      	cmp	r3, r2
340124ba:	d01d      	beq.n	340124f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
340124bc:	4a57      	ldr	r2, [pc, #348]	@ (3401261c <RCCEx_GetLPTIMCLKFreq+0x304>)
340124be:	4293      	cmp	r3, r2
340124c0:	f200 80c7 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
340124c4:	4a56      	ldr	r2, [pc, #344]	@ (34012620 <RCCEx_GetLPTIMCLKFreq+0x308>)
340124c6:	4293      	cmp	r3, r2
340124c8:	d016      	beq.n	340124f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
340124ca:	4a55      	ldr	r2, [pc, #340]	@ (34012620 <RCCEx_GetLPTIMCLKFreq+0x308>)
340124cc:	4293      	cmp	r3, r2
340124ce:	f200 80c0 	bhi.w	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
340124d2:	4a54      	ldr	r2, [pc, #336]	@ (34012624 <RCCEx_GetLPTIMCLKFreq+0x30c>)
340124d4:	4293      	cmp	r3, r2
340124d6:	d003      	beq.n	340124e0 <RCCEx_GetLPTIMCLKFreq+0x1c8>
340124d8:	4a53      	ldr	r2, [pc, #332]	@ (34012628 <RCCEx_GetLPTIMCLKFreq+0x310>)
340124da:	4293      	cmp	r3, r2
340124dc:	d00c      	beq.n	340124f8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
340124de:	e0b8      	b.n	34012652 <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340124e0:	f7f5 fb92 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
340124e4:	4603      	mov	r3, r0
340124e6:	4618      	mov	r0, r3
340124e8:	f7fe fc86 	bl	34010df8 <RCCEx_GetHCLKFreq>
340124ec:	4603      	mov	r3, r0
340124ee:	4618      	mov	r0, r3
340124f0:	f7fe fc93 	bl	34010e1a <RCCEx_GetPCLK1Freq>
340124f4:	60f8      	str	r0, [r7, #12]
      break;
340124f6:	e0b3      	b.n	34012660 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340124f8:	f7f5 fb86 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
340124fc:	4603      	mov	r3, r0
340124fe:	4618      	mov	r0, r3
34012500:	f7fe fc7a 	bl	34010df8 <RCCEx_GetHCLKFreq>
34012504:	4603      	mov	r3, r0
34012506:	4618      	mov	r0, r3
34012508:	f7fe fca8 	bl	34010e5c <RCCEx_GetPCLK4Freq>
3401250c:	60f8      	str	r0, [r7, #12]
      break;
3401250e:	e0a7      	b.n	34012660 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012510:	2007      	movs	r0, #7
34012512:	f7fe ff5d 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34012516:	60f8      	str	r0, [r7, #12]
      break;
34012518:	e0a2      	b.n	34012660 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401251a:	f7f7 f8d7 	bl	340096cc <LL_RCC_IC15_IsEnabled>
3401251e:	4603      	mov	r3, r0
34012520:	2b00      	cmp	r3, #0
34012522:	f000 8098 	beq.w	34012656 <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
34012526:	f7f7 f8f3 	bl	34009710 <LL_RCC_IC15_GetDivider>
3401252a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3401252c:	f7f7 f8e2 	bl	340096f4 <LL_RCC_IC15_GetSource>
34012530:	4603      	mov	r3, r0
34012532:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012536:	d029      	beq.n	3401258c <RCCEx_GetLPTIMCLKFreq+0x274>
34012538:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401253c:	d82f      	bhi.n	3401259e <RCCEx_GetLPTIMCLKFreq+0x286>
3401253e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012542:	d01a      	beq.n	3401257a <RCCEx_GetLPTIMCLKFreq+0x262>
34012544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012548:	d829      	bhi.n	3401259e <RCCEx_GetLPTIMCLKFreq+0x286>
3401254a:	2b00      	cmp	r3, #0
3401254c:	d003      	beq.n	34012556 <RCCEx_GetLPTIMCLKFreq+0x23e>
3401254e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012552:	d009      	beq.n	34012568 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
34012554:	e023      	b.n	3401259e <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012556:	f7fe fb37 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
3401255a:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3401255c:	68fa      	ldr	r2, [r7, #12]
3401255e:	68bb      	ldr	r3, [r7, #8]
34012560:	fbb2 f3f3 	udiv	r3, r2, r3
34012564:	60fb      	str	r3, [r7, #12]
            break;
34012566:	e01b      	b.n	340125a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012568:	f7fe fb74 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
3401256c:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3401256e:	68fa      	ldr	r2, [r7, #12]
34012570:	68bb      	ldr	r3, [r7, #8]
34012572:	fbb2 f3f3 	udiv	r3, r2, r3
34012576:	60fb      	str	r3, [r7, #12]
            break;
34012578:	e012      	b.n	340125a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401257a:	f7fe fbb1 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
3401257e:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34012580:	68fa      	ldr	r2, [r7, #12]
34012582:	68bb      	ldr	r3, [r7, #8]
34012584:	fbb2 f3f3 	udiv	r3, r2, r3
34012588:	60fb      	str	r3, [r7, #12]
            break;
3401258a:	e009      	b.n	340125a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401258c:	f7fe fbee 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34012590:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34012592:	68fa      	ldr	r2, [r7, #12]
34012594:	68bb      	ldr	r3, [r7, #8]
34012596:	fbb2 f3f3 	udiv	r3, r2, r3
3401259a:	60fb      	str	r3, [r7, #12]
            break;
3401259c:	e000      	b.n	340125a0 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
3401259e:	bf00      	nop
      break;
340125a0:	e059      	b.n	34012656 <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
340125a2:	f7f5 ff6f 	bl	34008484 <LL_RCC_LSE_IsReady>
340125a6:	4603      	mov	r3, r0
340125a8:	2b00      	cmp	r3, #0
340125aa:	d056      	beq.n	3401265a <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
340125ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340125b0:	60fb      	str	r3, [r7, #12]
      break;
340125b2:	e052      	b.n	3401265a <RCCEx_GetLPTIMCLKFreq+0x342>
340125b4:	0705182c 	.word	0x0705182c
340125b8:	0705142c 	.word	0x0705142c
340125bc:	0705102c 	.word	0x0705102c
340125c0:	07050c2c 	.word	0x07050c2c
340125c4:	0705082c 	.word	0x0705082c
340125c8:	0704182c 	.word	0x0704182c
340125cc:	0704142c 	.word	0x0704142c
340125d0:	0704102c 	.word	0x0704102c
340125d4:	07040c2c 	.word	0x07040c2c
340125d8:	0704082c 	.word	0x0704082c
340125dc:	0703182c 	.word	0x0703182c
340125e0:	0703142c 	.word	0x0703142c
340125e4:	0703102c 	.word	0x0703102c
340125e8:	07030c2c 	.word	0x07030c2c
340125ec:	0703082c 	.word	0x0703082c
340125f0:	0702182c 	.word	0x0702182c
340125f4:	0702142c 	.word	0x0702142c
340125f8:	0702102c 	.word	0x0702102c
340125fc:	07020c2c 	.word	0x07020c2c
34012600:	0702082c 	.word	0x0702082c
34012604:	0701182c 	.word	0x0701182c
34012608:	0701142c 	.word	0x0701142c
3401260c:	0701102c 	.word	0x0701102c
34012610:	07010c2c 	.word	0x07010c2c
34012614:	0701082c 	.word	0x0701082c
34012618:	0700182c 	.word	0x0700182c
3401261c:	0700142c 	.word	0x0700142c
34012620:	0700102c 	.word	0x0700102c
34012624:	0700082c 	.word	0x0700082c
34012628:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
3401262c:	f7f5 ff3c 	bl	340084a8 <LL_RCC_LSI_IsReady>
34012630:	4603      	mov	r3, r0
34012632:	2b00      	cmp	r3, #0
34012634:	d013      	beq.n	3401265e <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
34012636:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3401263a:	60fb      	str	r3, [r7, #12]
      break;
3401263c:	e00f      	b.n	3401265e <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3401263e:	f7f5 fae3 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34012642:	4604      	mov	r4, r0
34012644:	f7f6 fb46 	bl	34008cd4 <LL_RCC_GetTIMPrescaler>
34012648:	4603      	mov	r3, r0
3401264a:	fa24 f303 	lsr.w	r3, r4, r3
3401264e:	60fb      	str	r3, [r7, #12]
      break;
34012650:	e006      	b.n	34012660 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34012652:	bf00      	nop
34012654:	e004      	b.n	34012660 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34012656:	bf00      	nop
34012658:	e002      	b.n	34012660 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3401265a:	bf00      	nop
3401265c:	e000      	b.n	34012660 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3401265e:	bf00      	nop
  }

  return lptim_frequency;
34012660:	68fb      	ldr	r3, [r7, #12]
}
34012662:	4618      	mov	r0, r3
34012664:	3714      	adds	r7, #20
34012666:	46bd      	mov	sp, r7
34012668:	bd90      	pop	{r4, r7, pc}
3401266a:	bf00      	nop

3401266c <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
3401266c:	b580      	push	{r7, lr}
3401266e:	b084      	sub	sp, #16
34012670:	af00      	add	r7, sp, #0
34012672:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
34012674:	2300      	movs	r3, #0
34012676:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34012678:	6878      	ldr	r0, [r7, #4]
3401267a:	f7f6 fa2d 	bl	34008ad8 <LL_RCC_GetLPUARTClockSource>
3401267e:	4603      	mov	r3, r0
34012680:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34012684:	f000 80c0 	beq.w	34012808 <RCCEx_GetLPUARTCLKFreq+0x19c>
34012688:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401268c:	f200 80db 	bhi.w	34012846 <RCCEx_GetLPUARTCLKFreq+0x1da>
34012690:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34012694:	f000 80c6 	beq.w	34012824 <RCCEx_GetLPUARTCLKFreq+0x1b8>
34012698:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3401269c:	f200 80d3 	bhi.w	34012846 <RCCEx_GetLPUARTCLKFreq+0x1da>
340126a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
340126a4:	f000 80c6 	beq.w	34012834 <RCCEx_GetLPUARTCLKFreq+0x1c8>
340126a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
340126ac:	f200 80cb 	bhi.w	34012846 <RCCEx_GetLPUARTCLKFreq+0x1da>
340126b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340126b4:	d065      	beq.n	34012782 <RCCEx_GetLPUARTCLKFreq+0x116>
340126b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340126ba:	f200 80c4 	bhi.w	34012846 <RCCEx_GetLPUARTCLKFreq+0x1da>
340126be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340126c2:	d01a      	beq.n	340126fa <RCCEx_GetLPUARTCLKFreq+0x8e>
340126c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340126c8:	f200 80bd 	bhi.w	34012846 <RCCEx_GetLPUARTCLKFreq+0x1da>
340126cc:	2b00      	cmp	r3, #0
340126ce:	d003      	beq.n	340126d8 <RCCEx_GetLPUARTCLKFreq+0x6c>
340126d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340126d4:	d00c      	beq.n	340126f0 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
340126d6:	e0b6      	b.n	34012846 <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340126d8:	f7f5 fa96 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
340126dc:	4603      	mov	r3, r0
340126de:	4618      	mov	r0, r3
340126e0:	f7fe fb8a 	bl	34010df8 <RCCEx_GetHCLKFreq>
340126e4:	4603      	mov	r3, r0
340126e6:	4618      	mov	r0, r3
340126e8:	f7fe fbb8 	bl	34010e5c <RCCEx_GetPCLK4Freq>
340126ec:	60f8      	str	r0, [r7, #12]
      break;
340126ee:	e0b5      	b.n	3401285c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340126f0:	2007      	movs	r0, #7
340126f2:	f7fe fe6d 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
340126f6:	60f8      	str	r0, [r7, #12]
      break;
340126f8:	e0b0      	b.n	3401285c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
340126fa:	f7f6 fea7 	bl	3400944c <LL_RCC_IC9_IsEnabled>
340126fe:	4603      	mov	r3, r0
34012700:	2b00      	cmp	r3, #0
34012702:	f000 80a2 	beq.w	3401284a <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
34012706:	f7f6 fec3 	bl	34009490 <LL_RCC_IC9_GetDivider>
3401270a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3401270c:	f7f6 feb2 	bl	34009474 <LL_RCC_IC9_GetSource>
34012710:	4603      	mov	r3, r0
34012712:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012716:	d029      	beq.n	3401276c <RCCEx_GetLPUARTCLKFreq+0x100>
34012718:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401271c:	d82f      	bhi.n	3401277e <RCCEx_GetLPUARTCLKFreq+0x112>
3401271e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012722:	d01a      	beq.n	3401275a <RCCEx_GetLPUARTCLKFreq+0xee>
34012724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012728:	d829      	bhi.n	3401277e <RCCEx_GetLPUARTCLKFreq+0x112>
3401272a:	2b00      	cmp	r3, #0
3401272c:	d003      	beq.n	34012736 <RCCEx_GetLPUARTCLKFreq+0xca>
3401272e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012732:	d009      	beq.n	34012748 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
34012734:	e023      	b.n	3401277e <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012736:	f7fe fa47 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
3401273a:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3401273c:	68fa      	ldr	r2, [r7, #12]
3401273e:	68bb      	ldr	r3, [r7, #8]
34012740:	fbb2 f3f3 	udiv	r3, r2, r3
34012744:	60fb      	str	r3, [r7, #12]
            break;
34012746:	e01b      	b.n	34012780 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012748:	f7fe fa84 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
3401274c:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3401274e:	68fa      	ldr	r2, [r7, #12]
34012750:	68bb      	ldr	r3, [r7, #8]
34012752:	fbb2 f3f3 	udiv	r3, r2, r3
34012756:	60fb      	str	r3, [r7, #12]
            break;
34012758:	e012      	b.n	34012780 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401275a:	f7fe fac1 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
3401275e:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012760:	68fa      	ldr	r2, [r7, #12]
34012762:	68bb      	ldr	r3, [r7, #8]
34012764:	fbb2 f3f3 	udiv	r3, r2, r3
34012768:	60fb      	str	r3, [r7, #12]
            break;
3401276a:	e009      	b.n	34012780 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401276c:	f7fe fafe 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34012770:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012772:	68fa      	ldr	r2, [r7, #12]
34012774:	68bb      	ldr	r3, [r7, #8]
34012776:	fbb2 f3f3 	udiv	r3, r2, r3
3401277a:	60fb      	str	r3, [r7, #12]
            break;
3401277c:	e000      	b.n	34012780 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
3401277e:	bf00      	nop
      break;
34012780:	e063      	b.n	3401284a <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34012782:	f7f6 ff63 	bl	3400964c <LL_RCC_IC14_IsEnabled>
34012786:	4603      	mov	r3, r0
34012788:	2b00      	cmp	r3, #0
3401278a:	d060      	beq.n	3401284e <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
3401278c:	f7f6 ff80 	bl	34009690 <LL_RCC_IC14_GetDivider>
34012790:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34012792:	f7f6 ff6f 	bl	34009674 <LL_RCC_IC14_GetSource>
34012796:	4603      	mov	r3, r0
34012798:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401279c:	d029      	beq.n	340127f2 <RCCEx_GetLPUARTCLKFreq+0x186>
3401279e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340127a2:	d82f      	bhi.n	34012804 <RCCEx_GetLPUARTCLKFreq+0x198>
340127a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340127a8:	d01a      	beq.n	340127e0 <RCCEx_GetLPUARTCLKFreq+0x174>
340127aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340127ae:	d829      	bhi.n	34012804 <RCCEx_GetLPUARTCLKFreq+0x198>
340127b0:	2b00      	cmp	r3, #0
340127b2:	d003      	beq.n	340127bc <RCCEx_GetLPUARTCLKFreq+0x150>
340127b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340127b8:	d009      	beq.n	340127ce <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
340127ba:	e023      	b.n	34012804 <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340127bc:	f7fe fa04 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
340127c0:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340127c2:	68fa      	ldr	r2, [r7, #12]
340127c4:	68bb      	ldr	r3, [r7, #8]
340127c6:	fbb2 f3f3 	udiv	r3, r2, r3
340127ca:	60fb      	str	r3, [r7, #12]
            break;
340127cc:	e01b      	b.n	34012806 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340127ce:	f7fe fa41 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340127d2:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340127d4:	68fa      	ldr	r2, [r7, #12]
340127d6:	68bb      	ldr	r3, [r7, #8]
340127d8:	fbb2 f3f3 	udiv	r3, r2, r3
340127dc:	60fb      	str	r3, [r7, #12]
            break;
340127de:	e012      	b.n	34012806 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340127e0:	f7fe fa7e 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340127e4:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340127e6:	68fa      	ldr	r2, [r7, #12]
340127e8:	68bb      	ldr	r3, [r7, #8]
340127ea:	fbb2 f3f3 	udiv	r3, r2, r3
340127ee:	60fb      	str	r3, [r7, #12]
            break;
340127f0:	e009      	b.n	34012806 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340127f2:	f7fe fabb 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340127f6:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340127f8:	68fa      	ldr	r2, [r7, #12]
340127fa:	68bb      	ldr	r3, [r7, #8]
340127fc:	fbb2 f3f3 	udiv	r3, r2, r3
34012800:	60fb      	str	r3, [r7, #12]
            break;
34012802:	e000      	b.n	34012806 <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
34012804:	bf00      	nop
      break;
34012806:	e022      	b.n	3401284e <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
34012808:	f7f5 fdfc 	bl	34008404 <LL_RCC_HSI_IsReady>
3401280c:	4603      	mov	r3, r0
3401280e:	2b00      	cmp	r3, #0
34012810:	d01f      	beq.n	34012852 <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012812:	f7f5 fe09 	bl	34008428 <LL_RCC_HSI_GetDivider>
34012816:	4603      	mov	r3, r0
34012818:	09db      	lsrs	r3, r3, #7
3401281a:	4a13      	ldr	r2, [pc, #76]	@ (34012868 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
3401281c:	fa22 f303 	lsr.w	r3, r2, r3
34012820:	60fb      	str	r3, [r7, #12]
      break;
34012822:	e016      	b.n	34012852 <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
34012824:	f7f5 fe0e 	bl	34008444 <LL_RCC_MSI_IsReady>
34012828:	4603      	mov	r3, r0
3401282a:	2b00      	cmp	r3, #0
3401282c:	d013      	beq.n	34012856 <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
3401282e:	4b0f      	ldr	r3, [pc, #60]	@ (3401286c <RCCEx_GetLPUARTCLKFreq+0x200>)
34012830:	60fb      	str	r3, [r7, #12]
      break;
34012832:	e010      	b.n	34012856 <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
34012834:	f7f5 fe26 	bl	34008484 <LL_RCC_LSE_IsReady>
34012838:	4603      	mov	r3, r0
3401283a:	2b00      	cmp	r3, #0
3401283c:	d00d      	beq.n	3401285a <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
3401283e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34012842:	60fb      	str	r3, [r7, #12]
      break;
34012844:	e009      	b.n	3401285a <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
34012846:	bf00      	nop
34012848:	e008      	b.n	3401285c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401284a:	bf00      	nop
3401284c:	e006      	b.n	3401285c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401284e:	bf00      	nop
34012850:	e004      	b.n	3401285c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34012852:	bf00      	nop
34012854:	e002      	b.n	3401285c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34012856:	bf00      	nop
34012858:	e000      	b.n	3401285c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401285a:	bf00      	nop
  }

  return lpuart_frequency;
3401285c:	68fb      	ldr	r3, [r7, #12]
}
3401285e:	4618      	mov	r0, r3
34012860:	3710      	adds	r7, #16
34012862:	46bd      	mov	sp, r7
34012864:	bd80      	pop	{r7, pc}
34012866:	bf00      	nop
34012868:	03d09000 	.word	0x03d09000
3401286c:	003d0900 	.word	0x003d0900

34012870 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
34012870:	b580      	push	{r7, lr}
34012872:	b084      	sub	sp, #16
34012874:	af00      	add	r7, sp, #0
34012876:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
34012878:	2300      	movs	r3, #0
3401287a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3401287c:	6878      	ldr	r0, [r7, #4]
3401287e:	f7f6 f93d 	bl	34008afc <LL_RCC_GetLTDCClockSource>
34012882:	4603      	mov	r3, r0
34012884:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34012888:	d062      	beq.n	34012950 <RCCEx_GetLTDCCLKFreq+0xe0>
3401288a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3401288e:	d86d      	bhi.n	3401296c <RCCEx_GetLTDCCLKFreq+0xfc>
34012890:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34012894:	d019      	beq.n	340128ca <RCCEx_GetLTDCCLKFreq+0x5a>
34012896:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401289a:	d867      	bhi.n	3401296c <RCCEx_GetLTDCCLKFreq+0xfc>
3401289c:	2b00      	cmp	r3, #0
3401289e:	d003      	beq.n	340128a8 <RCCEx_GetLTDCCLKFreq+0x38>
340128a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340128a4:	d00c      	beq.n	340128c0 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
340128a6:	e061      	b.n	3401296c <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340128a8:	f7f5 f9ae 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
340128ac:	4603      	mov	r3, r0
340128ae:	4618      	mov	r0, r3
340128b0:	f7fe faa2 	bl	34010df8 <RCCEx_GetHCLKFreq>
340128b4:	4603      	mov	r3, r0
340128b6:	4618      	mov	r0, r3
340128b8:	f7fe fae1 	bl	34010e7e <RCCEx_GetPCLK5Freq>
340128bc:	60f8      	str	r0, [r7, #12]
      break;
340128be:	e05a      	b.n	34012976 <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340128c0:	2007      	movs	r0, #7
340128c2:	f7fe fd85 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
340128c6:	60f8      	str	r0, [r7, #12]
      break;
340128c8:	e055      	b.n	34012976 <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
340128ca:	f7f6 ff3f 	bl	3400974c <LL_RCC_IC16_IsEnabled>
340128ce:	4603      	mov	r3, r0
340128d0:	2b00      	cmp	r3, #0
340128d2:	d04d      	beq.n	34012970 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
340128d4:	f7f6 ff5c 	bl	34009790 <LL_RCC_IC16_GetDivider>
340128d8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
340128da:	f7f6 ff4b 	bl	34009774 <LL_RCC_IC16_GetSource>
340128de:	4603      	mov	r3, r0
340128e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340128e4:	d029      	beq.n	3401293a <RCCEx_GetLTDCCLKFreq+0xca>
340128e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340128ea:	d82f      	bhi.n	3401294c <RCCEx_GetLTDCCLKFreq+0xdc>
340128ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340128f0:	d01a      	beq.n	34012928 <RCCEx_GetLTDCCLKFreq+0xb8>
340128f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340128f6:	d829      	bhi.n	3401294c <RCCEx_GetLTDCCLKFreq+0xdc>
340128f8:	2b00      	cmp	r3, #0
340128fa:	d003      	beq.n	34012904 <RCCEx_GetLTDCCLKFreq+0x94>
340128fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012900:	d009      	beq.n	34012916 <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
34012902:	e023      	b.n	3401294c <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012904:	f7fe f960 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34012908:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3401290a:	68fa      	ldr	r2, [r7, #12]
3401290c:	68bb      	ldr	r3, [r7, #8]
3401290e:	fbb2 f3f3 	udiv	r3, r2, r3
34012912:	60fb      	str	r3, [r7, #12]
            break;
34012914:	e01b      	b.n	3401294e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012916:	f7fe f99d 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
3401291a:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3401291c:	68fa      	ldr	r2, [r7, #12]
3401291e:	68bb      	ldr	r3, [r7, #8]
34012920:	fbb2 f3f3 	udiv	r3, r2, r3
34012924:	60fb      	str	r3, [r7, #12]
            break;
34012926:	e012      	b.n	3401294e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012928:	f7fe f9da 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
3401292c:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3401292e:	68fa      	ldr	r2, [r7, #12]
34012930:	68bb      	ldr	r3, [r7, #8]
34012932:	fbb2 f3f3 	udiv	r3, r2, r3
34012936:	60fb      	str	r3, [r7, #12]
            break;
34012938:	e009      	b.n	3401294e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401293a:	f7fe fa17 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
3401293e:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34012940:	68fa      	ldr	r2, [r7, #12]
34012942:	68bb      	ldr	r3, [r7, #8]
34012944:	fbb2 f3f3 	udiv	r3, r2, r3
34012948:	60fb      	str	r3, [r7, #12]
            break;
3401294a:	e000      	b.n	3401294e <RCCEx_GetLTDCCLKFreq+0xde>
            break;
3401294c:	bf00      	nop
      break;
3401294e:	e00f      	b.n	34012970 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34012950:	f7f5 fd58 	bl	34008404 <LL_RCC_HSI_IsReady>
34012954:	4603      	mov	r3, r0
34012956:	2b00      	cmp	r3, #0
34012958:	d00c      	beq.n	34012974 <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401295a:	f7f5 fd65 	bl	34008428 <LL_RCC_HSI_GetDivider>
3401295e:	4603      	mov	r3, r0
34012960:	09db      	lsrs	r3, r3, #7
34012962:	4a07      	ldr	r2, [pc, #28]	@ (34012980 <RCCEx_GetLTDCCLKFreq+0x110>)
34012964:	fa22 f303 	lsr.w	r3, r2, r3
34012968:	60fb      	str	r3, [r7, #12]
      break;
3401296a:	e003      	b.n	34012974 <RCCEx_GetLTDCCLKFreq+0x104>
      break;
3401296c:	bf00      	nop
3401296e:	e002      	b.n	34012976 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34012970:	bf00      	nop
34012972:	e000      	b.n	34012976 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34012974:	bf00      	nop
  }

  return ltdc_frequency;
34012976:	68fb      	ldr	r3, [r7, #12]
}
34012978:	4618      	mov	r0, r3
3401297a:	3710      	adds	r7, #16
3401297c:	46bd      	mov	sp, r7
3401297e:	bd80      	pop	{r7, pc}
34012980:	03d09000 	.word	0x03d09000

34012984 <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
34012984:	b590      	push	{r4, r7, lr}
34012986:	b085      	sub	sp, #20
34012988:	af00      	add	r7, sp, #0
3401298a:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
3401298c:	2300      	movs	r3, #0
3401298e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34012990:	6878      	ldr	r0, [r7, #4]
34012992:	f7f6 f8c5 	bl	34008b20 <LL_RCC_GetMDFClockSource>
34012996:	4603      	mov	r3, r0
34012998:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3401299c:	f000 80dd 	beq.w	34012b5a <RCCEx_GetMDFCLKFreq+0x1d6>
340129a0:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
340129a4:	f200 80e3 	bhi.w	34012b6e <RCCEx_GetMDFCLKFreq+0x1ea>
340129a8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340129ac:	f000 80d2 	beq.w	34012b54 <RCCEx_GetMDFCLKFreq+0x1d0>
340129b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340129b4:	f200 80db 	bhi.w	34012b6e <RCCEx_GetMDFCLKFreq+0x1ea>
340129b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340129bc:	f000 80b4 	beq.w	34012b28 <RCCEx_GetMDFCLKFreq+0x1a4>
340129c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340129c4:	f200 80d3 	bhi.w	34012b6e <RCCEx_GetMDFCLKFreq+0x1ea>
340129c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340129cc:	f000 80ba 	beq.w	34012b44 <RCCEx_GetMDFCLKFreq+0x1c0>
340129d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340129d4:	f200 80cb 	bhi.w	34012b6e <RCCEx_GetMDFCLKFreq+0x1ea>
340129d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340129dc:	d061      	beq.n	34012aa2 <RCCEx_GetMDFCLKFreq+0x11e>
340129de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340129e2:	f200 80c4 	bhi.w	34012b6e <RCCEx_GetMDFCLKFreq+0x1ea>
340129e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340129ea:	d016      	beq.n	34012a1a <RCCEx_GetMDFCLKFreq+0x96>
340129ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340129f0:	f200 80bd 	bhi.w	34012b6e <RCCEx_GetMDFCLKFreq+0x1ea>
340129f4:	2b00      	cmp	r3, #0
340129f6:	d003      	beq.n	34012a00 <RCCEx_GetMDFCLKFreq+0x7c>
340129f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340129fc:	d008      	beq.n	34012a10 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
340129fe:	e0b6      	b.n	34012b6e <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34012a00:	f7f5 f902 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34012a04:	4603      	mov	r3, r0
34012a06:	4618      	mov	r0, r3
34012a08:	f7fe f9f6 	bl	34010df8 <RCCEx_GetHCLKFreq>
34012a0c:	60f8      	str	r0, [r7, #12]
      break;
34012a0e:	e0b7      	b.n	34012b80 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012a10:	2007      	movs	r0, #7
34012a12:	f7fe fcdd 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34012a16:	60f8      	str	r0, [r7, #12]
      break;
34012a18:	e0b2      	b.n	34012b80 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34012a1a:	f7f6 fc97 	bl	3400934c <LL_RCC_IC7_IsEnabled>
34012a1e:	4603      	mov	r3, r0
34012a20:	2b00      	cmp	r3, #0
34012a22:	f000 80a6 	beq.w	34012b72 <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
34012a26:	f7f6 fcb3 	bl	34009390 <LL_RCC_IC7_GetDivider>
34012a2a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34012a2c:	f7f6 fca2 	bl	34009374 <LL_RCC_IC7_GetSource>
34012a30:	4603      	mov	r3, r0
34012a32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012a36:	d029      	beq.n	34012a8c <RCCEx_GetMDFCLKFreq+0x108>
34012a38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012a3c:	d82f      	bhi.n	34012a9e <RCCEx_GetMDFCLKFreq+0x11a>
34012a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012a42:	d01a      	beq.n	34012a7a <RCCEx_GetMDFCLKFreq+0xf6>
34012a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012a48:	d829      	bhi.n	34012a9e <RCCEx_GetMDFCLKFreq+0x11a>
34012a4a:	2b00      	cmp	r3, #0
34012a4c:	d003      	beq.n	34012a56 <RCCEx_GetMDFCLKFreq+0xd2>
34012a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012a52:	d009      	beq.n	34012a68 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
34012a54:	e023      	b.n	34012a9e <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012a56:	f7fe f8b7 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34012a5a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012a5c:	68fa      	ldr	r2, [r7, #12]
34012a5e:	68bb      	ldr	r3, [r7, #8]
34012a60:	fbb2 f3f3 	udiv	r3, r2, r3
34012a64:	60fb      	str	r3, [r7, #12]
            break;
34012a66:	e01b      	b.n	34012aa0 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012a68:	f7fe f8f4 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34012a6c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012a6e:	68fa      	ldr	r2, [r7, #12]
34012a70:	68bb      	ldr	r3, [r7, #8]
34012a72:	fbb2 f3f3 	udiv	r3, r2, r3
34012a76:	60fb      	str	r3, [r7, #12]
            break;
34012a78:	e012      	b.n	34012aa0 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012a7a:	f7fe f931 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34012a7e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012a80:	68fa      	ldr	r2, [r7, #12]
34012a82:	68bb      	ldr	r3, [r7, #8]
34012a84:	fbb2 f3f3 	udiv	r3, r2, r3
34012a88:	60fb      	str	r3, [r7, #12]
            break;
34012a8a:	e009      	b.n	34012aa0 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012a8c:	f7fe f96e 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34012a90:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012a92:	68fa      	ldr	r2, [r7, #12]
34012a94:	68bb      	ldr	r3, [r7, #8]
34012a96:	fbb2 f3f3 	udiv	r3, r2, r3
34012a9a:	60fb      	str	r3, [r7, #12]
            break;
34012a9c:	e000      	b.n	34012aa0 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
34012a9e:	bf00      	nop
      break;
34012aa0:	e067      	b.n	34012b72 <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34012aa2:	f7f6 fc93 	bl	340093cc <LL_RCC_IC8_IsEnabled>
34012aa6:	4603      	mov	r3, r0
34012aa8:	2b00      	cmp	r3, #0
34012aaa:	d064      	beq.n	34012b76 <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
34012aac:	f7f6 fcb0 	bl	34009410 <LL_RCC_IC8_GetDivider>
34012ab0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34012ab2:	f7f6 fc9f 	bl	340093f4 <LL_RCC_IC8_GetSource>
34012ab6:	4603      	mov	r3, r0
34012ab8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012abc:	d029      	beq.n	34012b12 <RCCEx_GetMDFCLKFreq+0x18e>
34012abe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012ac2:	d82f      	bhi.n	34012b24 <RCCEx_GetMDFCLKFreq+0x1a0>
34012ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012ac8:	d01a      	beq.n	34012b00 <RCCEx_GetMDFCLKFreq+0x17c>
34012aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012ace:	d829      	bhi.n	34012b24 <RCCEx_GetMDFCLKFreq+0x1a0>
34012ad0:	2b00      	cmp	r3, #0
34012ad2:	d003      	beq.n	34012adc <RCCEx_GetMDFCLKFreq+0x158>
34012ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012ad8:	d009      	beq.n	34012aee <RCCEx_GetMDFCLKFreq+0x16a>
            break;
34012ada:	e023      	b.n	34012b24 <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012adc:	f7fe f874 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34012ae0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012ae2:	68fa      	ldr	r2, [r7, #12]
34012ae4:	68bb      	ldr	r3, [r7, #8]
34012ae6:	fbb2 f3f3 	udiv	r3, r2, r3
34012aea:	60fb      	str	r3, [r7, #12]
            break;
34012aec:	e01b      	b.n	34012b26 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012aee:	f7fe f8b1 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34012af2:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012af4:	68fa      	ldr	r2, [r7, #12]
34012af6:	68bb      	ldr	r3, [r7, #8]
34012af8:	fbb2 f3f3 	udiv	r3, r2, r3
34012afc:	60fb      	str	r3, [r7, #12]
            break;
34012afe:	e012      	b.n	34012b26 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012b00:	f7fe f8ee 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34012b04:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012b06:	68fa      	ldr	r2, [r7, #12]
34012b08:	68bb      	ldr	r3, [r7, #8]
34012b0a:	fbb2 f3f3 	udiv	r3, r2, r3
34012b0e:	60fb      	str	r3, [r7, #12]
            break;
34012b10:	e009      	b.n	34012b26 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012b12:	f7fe f92b 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34012b16:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012b18:	68fa      	ldr	r2, [r7, #12]
34012b1a:	68bb      	ldr	r3, [r7, #8]
34012b1c:	fbb2 f3f3 	udiv	r3, r2, r3
34012b20:	60fb      	str	r3, [r7, #12]
            break;
34012b22:	e000      	b.n	34012b26 <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
34012b24:	bf00      	nop
      break;
34012b26:	e026      	b.n	34012b76 <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
34012b28:	f7f5 fc6c 	bl	34008404 <LL_RCC_HSI_IsReady>
34012b2c:	4603      	mov	r3, r0
34012b2e:	2b00      	cmp	r3, #0
34012b30:	d023      	beq.n	34012b7a <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012b32:	f7f5 fc79 	bl	34008428 <LL_RCC_HSI_GetDivider>
34012b36:	4603      	mov	r3, r0
34012b38:	09db      	lsrs	r3, r3, #7
34012b3a:	4a14      	ldr	r2, [pc, #80]	@ (34012b8c <RCCEx_GetMDFCLKFreq+0x208>)
34012b3c:	fa22 f303 	lsr.w	r3, r2, r3
34012b40:	60fb      	str	r3, [r7, #12]
      break;
34012b42:	e01a      	b.n	34012b7a <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
34012b44:	f7f5 fc7e 	bl	34008444 <LL_RCC_MSI_IsReady>
34012b48:	4603      	mov	r3, r0
34012b4a:	2b00      	cmp	r3, #0
34012b4c:	d017      	beq.n	34012b7e <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
34012b4e:	4b10      	ldr	r3, [pc, #64]	@ (34012b90 <RCCEx_GetMDFCLKFreq+0x20c>)
34012b50:	60fb      	str	r3, [r7, #12]
      break;
34012b52:	e014      	b.n	34012b7e <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34012b54:	4b0f      	ldr	r3, [pc, #60]	@ (34012b94 <RCCEx_GetMDFCLKFreq+0x210>)
34012b56:	60fb      	str	r3, [r7, #12]
      break;
34012b58:	e012      	b.n	34012b80 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34012b5a:	f7f5 f855 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34012b5e:	4604      	mov	r4, r0
34012b60:	f7f6 f8b8 	bl	34008cd4 <LL_RCC_GetTIMPrescaler>
34012b64:	4603      	mov	r3, r0
34012b66:	fa24 f303 	lsr.w	r3, r4, r3
34012b6a:	60fb      	str	r3, [r7, #12]
      break;
34012b6c:	e008      	b.n	34012b80 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012b6e:	bf00      	nop
34012b70:	e006      	b.n	34012b80 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012b72:	bf00      	nop
34012b74:	e004      	b.n	34012b80 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012b76:	bf00      	nop
34012b78:	e002      	b.n	34012b80 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012b7a:	bf00      	nop
34012b7c:	e000      	b.n	34012b80 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012b7e:	bf00      	nop
  }

  return adf_frequency;
34012b80:	68fb      	ldr	r3, [r7, #12]
}
34012b82:	4618      	mov	r0, r3
34012b84:	3714      	adds	r7, #20
34012b86:	46bd      	mov	sp, r7
34012b88:	bd90      	pop	{r4, r7, pc}
34012b8a:	bf00      	nop
34012b8c:	03d09000 	.word	0x03d09000
34012b90:	003d0900 	.word	0x003d0900
34012b94:	00bb8000 	.word	0x00bb8000

34012b98 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
34012b98:	b580      	push	{r7, lr}
34012b9a:	b084      	sub	sp, #16
34012b9c:	af00      	add	r7, sp, #0
34012b9e:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
34012ba0:	2300      	movs	r3, #0
34012ba2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34012ba4:	6878      	ldr	r0, [r7, #4]
34012ba6:	f7f5 ffcd 	bl	34008b44 <LL_RCC_GetPSSIClockSource>
34012baa:	4603      	mov	r3, r0
34012bac:	2b30      	cmp	r3, #48	@ 0x30
34012bae:	d05a      	beq.n	34012c66 <RCCEx_GetPSSICLKFreq+0xce>
34012bb0:	2b30      	cmp	r3, #48	@ 0x30
34012bb2:	d866      	bhi.n	34012c82 <RCCEx_GetPSSICLKFreq+0xea>
34012bb4:	2b20      	cmp	r3, #32
34012bb6:	d013      	beq.n	34012be0 <RCCEx_GetPSSICLKFreq+0x48>
34012bb8:	2b20      	cmp	r3, #32
34012bba:	d862      	bhi.n	34012c82 <RCCEx_GetPSSICLKFreq+0xea>
34012bbc:	2b00      	cmp	r3, #0
34012bbe:	d002      	beq.n	34012bc6 <RCCEx_GetPSSICLKFreq+0x2e>
34012bc0:	2b10      	cmp	r3, #16
34012bc2:	d008      	beq.n	34012bd6 <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
34012bc4:	e05d      	b.n	34012c82 <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34012bc6:	f7f5 f81f 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34012bca:	4603      	mov	r3, r0
34012bcc:	4618      	mov	r0, r3
34012bce:	f7fe f913 	bl	34010df8 <RCCEx_GetHCLKFreq>
34012bd2:	60f8      	str	r0, [r7, #12]
      break;
34012bd4:	e05a      	b.n	34012c8c <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012bd6:	2007      	movs	r0, #7
34012bd8:	f7fe fbfa 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34012bdc:	60f8      	str	r0, [r7, #12]
      break;
34012bde:	e055      	b.n	34012c8c <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
34012be0:	f7f6 feb4 	bl	3400994c <LL_RCC_IC20_IsEnabled>
34012be4:	4603      	mov	r3, r0
34012be6:	2b00      	cmp	r3, #0
34012be8:	d04d      	beq.n	34012c86 <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
34012bea:	f7f6 fed1 	bl	34009990 <LL_RCC_IC20_GetDivider>
34012bee:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
34012bf0:	f7f6 fec0 	bl	34009974 <LL_RCC_IC20_GetSource>
34012bf4:	4603      	mov	r3, r0
34012bf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012bfa:	d029      	beq.n	34012c50 <RCCEx_GetPSSICLKFreq+0xb8>
34012bfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012c00:	d82f      	bhi.n	34012c62 <RCCEx_GetPSSICLKFreq+0xca>
34012c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012c06:	d01a      	beq.n	34012c3e <RCCEx_GetPSSICLKFreq+0xa6>
34012c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012c0c:	d829      	bhi.n	34012c62 <RCCEx_GetPSSICLKFreq+0xca>
34012c0e:	2b00      	cmp	r3, #0
34012c10:	d003      	beq.n	34012c1a <RCCEx_GetPSSICLKFreq+0x82>
34012c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012c16:	d009      	beq.n	34012c2c <RCCEx_GetPSSICLKFreq+0x94>
            break;
34012c18:	e023      	b.n	34012c62 <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012c1a:	f7fd ffd5 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34012c1e:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012c20:	68fa      	ldr	r2, [r7, #12]
34012c22:	68bb      	ldr	r3, [r7, #8]
34012c24:	fbb2 f3f3 	udiv	r3, r2, r3
34012c28:	60fb      	str	r3, [r7, #12]
            break;
34012c2a:	e01b      	b.n	34012c64 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012c2c:	f7fe f812 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34012c30:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012c32:	68fa      	ldr	r2, [r7, #12]
34012c34:	68bb      	ldr	r3, [r7, #8]
34012c36:	fbb2 f3f3 	udiv	r3, r2, r3
34012c3a:	60fb      	str	r3, [r7, #12]
            break;
34012c3c:	e012      	b.n	34012c64 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012c3e:	f7fe f84f 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34012c42:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012c44:	68fa      	ldr	r2, [r7, #12]
34012c46:	68bb      	ldr	r3, [r7, #8]
34012c48:	fbb2 f3f3 	udiv	r3, r2, r3
34012c4c:	60fb      	str	r3, [r7, #12]
            break;
34012c4e:	e009      	b.n	34012c64 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012c50:	f7fe f88c 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34012c54:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012c56:	68fa      	ldr	r2, [r7, #12]
34012c58:	68bb      	ldr	r3, [r7, #8]
34012c5a:	fbb2 f3f3 	udiv	r3, r2, r3
34012c5e:	60fb      	str	r3, [r7, #12]
            break;
34012c60:	e000      	b.n	34012c64 <RCCEx_GetPSSICLKFreq+0xcc>
            break;
34012c62:	bf00      	nop
      break;
34012c64:	e00f      	b.n	34012c86 <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
34012c66:	f7f5 fbcd 	bl	34008404 <LL_RCC_HSI_IsReady>
34012c6a:	4603      	mov	r3, r0
34012c6c:	2b00      	cmp	r3, #0
34012c6e:	d00c      	beq.n	34012c8a <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012c70:	f7f5 fbda 	bl	34008428 <LL_RCC_HSI_GetDivider>
34012c74:	4603      	mov	r3, r0
34012c76:	09db      	lsrs	r3, r3, #7
34012c78:	4a07      	ldr	r2, [pc, #28]	@ (34012c98 <RCCEx_GetPSSICLKFreq+0x100>)
34012c7a:	fa22 f303 	lsr.w	r3, r2, r3
34012c7e:	60fb      	str	r3, [r7, #12]
      break;
34012c80:	e003      	b.n	34012c8a <RCCEx_GetPSSICLKFreq+0xf2>
      break;
34012c82:	bf00      	nop
34012c84:	e002      	b.n	34012c8c <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34012c86:	bf00      	nop
34012c88:	e000      	b.n	34012c8c <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34012c8a:	bf00      	nop
  }

  return pssi_frequency;
34012c8c:	68fb      	ldr	r3, [r7, #12]
}
34012c8e:	4618      	mov	r0, r3
34012c90:	3710      	adds	r7, #16
34012c92:	46bd      	mov	sp, r7
34012c94:	bd80      	pop	{r7, pc}
34012c96:	bf00      	nop
34012c98:	03d09000 	.word	0x03d09000

34012c9c <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
34012c9c:	b580      	push	{r7, lr}
34012c9e:	b082      	sub	sp, #8
34012ca0:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
34012ca2:	2300      	movs	r3, #0
34012ca4:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
34012ca6:	f7f5 ffdb 	bl	34008c60 <LL_RCC_GetRTCClockSource>
34012caa:	4603      	mov	r3, r0
34012cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34012cb0:	d020      	beq.n	34012cf4 <RCCEx_GetRTCCLKFreq+0x58>
34012cb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34012cb6:	d830      	bhi.n	34012d1a <RCCEx_GetRTCCLKFreq+0x7e>
34012cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34012cbc:	d011      	beq.n	34012ce2 <RCCEx_GetRTCCLKFreq+0x46>
34012cbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34012cc2:	d82a      	bhi.n	34012d1a <RCCEx_GetRTCCLKFreq+0x7e>
34012cc4:	2b00      	cmp	r3, #0
34012cc6:	d02a      	beq.n	34012d1e <RCCEx_GetRTCCLKFreq+0x82>
34012cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34012ccc:	d000      	beq.n	34012cd0 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
34012cce:	e024      	b.n	34012d1a <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
34012cd0:	f7f5 fbd8 	bl	34008484 <LL_RCC_LSE_IsReady>
34012cd4:	4603      	mov	r3, r0
34012cd6:	2b00      	cmp	r3, #0
34012cd8:	d023      	beq.n	34012d22 <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
34012cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34012cde:	607b      	str	r3, [r7, #4]
      break;
34012ce0:	e01f      	b.n	34012d22 <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
34012ce2:	f7f5 fbe1 	bl	340084a8 <LL_RCC_LSI_IsReady>
34012ce6:	4603      	mov	r3, r0
34012ce8:	2b00      	cmp	r3, #0
34012cea:	d01c      	beq.n	34012d26 <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
34012cec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34012cf0:	607b      	str	r3, [r7, #4]
      break;
34012cf2:	e018      	b.n	34012d26 <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
34012cf4:	f7f5 fb74 	bl	340083e0 <LL_RCC_HSE_IsReady>
34012cf8:	4603      	mov	r3, r0
34012cfa:	2b00      	cmp	r3, #0
34012cfc:	d015      	beq.n	34012d2a <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34012cfe:	4b0e      	ldr	r3, [pc, #56]	@ (34012d38 <RCCEx_GetRTCCLKFreq+0x9c>)
34012d00:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34012d04:	0b1b      	lsrs	r3, r3, #12
34012d06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34012d0a:	3301      	adds	r3, #1
34012d0c:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
34012d0e:	4a0b      	ldr	r2, [pc, #44]	@ (34012d3c <RCCEx_GetRTCCLKFreq+0xa0>)
34012d10:	683b      	ldr	r3, [r7, #0]
34012d12:	fbb2 f3f3 	udiv	r3, r2, r3
34012d16:	607b      	str	r3, [r7, #4]
      break;
34012d18:	e007      	b.n	34012d2a <RCCEx_GetRTCCLKFreq+0x8e>
      break;
34012d1a:	bf00      	nop
34012d1c:	e006      	b.n	34012d2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012d1e:	bf00      	nop
34012d20:	e004      	b.n	34012d2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012d22:	bf00      	nop
34012d24:	e002      	b.n	34012d2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012d26:	bf00      	nop
34012d28:	e000      	b.n	34012d2c <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012d2a:	bf00      	nop
  }

  return rtc_frequency;
34012d2c:	687b      	ldr	r3, [r7, #4]
}
34012d2e:	4618      	mov	r0, r3
34012d30:	3708      	adds	r7, #8
34012d32:	46bd      	mov	sp, r7
34012d34:	bd80      	pop	{r7, pc}
34012d36:	bf00      	nop
34012d38:	56028000 	.word	0x56028000
34012d3c:	02dc6c00 	.word	0x02dc6c00

34012d40 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
34012d40:	b580      	push	{r7, lr}
34012d42:	b084      	sub	sp, #16
34012d44:	af00      	add	r7, sp, #0
34012d46:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34012d48:	2300      	movs	r3, #0
34012d4a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34012d4c:	6878      	ldr	r0, [r7, #4]
34012d4e:	f7f5 ff0b 	bl	34008b68 <LL_RCC_GetSAIClockSource>
34012d52:	4603      	mov	r3, r0
34012d54:	4a9a      	ldr	r2, [pc, #616]	@ (34012fc0 <RCCEx_GetSAICLKFreq+0x280>)
34012d56:	4293      	cmp	r3, r2
34012d58:	f000 811f 	beq.w	34012f9a <RCCEx_GetSAICLKFreq+0x25a>
34012d5c:	4a98      	ldr	r2, [pc, #608]	@ (34012fc0 <RCCEx_GetSAICLKFreq+0x280>)
34012d5e:	4293      	cmp	r3, r2
34012d60:	f200 8120 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012d64:	4a97      	ldr	r2, [pc, #604]	@ (34012fc4 <RCCEx_GetSAICLKFreq+0x284>)
34012d66:	4293      	cmp	r3, r2
34012d68:	f000 8117 	beq.w	34012f9a <RCCEx_GetSAICLKFreq+0x25a>
34012d6c:	4a95      	ldr	r2, [pc, #596]	@ (34012fc4 <RCCEx_GetSAICLKFreq+0x284>)
34012d6e:	4293      	cmp	r3, r2
34012d70:	f200 8118 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012d74:	4a94      	ldr	r2, [pc, #592]	@ (34012fc8 <RCCEx_GetSAICLKFreq+0x288>)
34012d76:	4293      	cmp	r3, r2
34012d78:	f000 810c 	beq.w	34012f94 <RCCEx_GetSAICLKFreq+0x254>
34012d7c:	4a92      	ldr	r2, [pc, #584]	@ (34012fc8 <RCCEx_GetSAICLKFreq+0x288>)
34012d7e:	4293      	cmp	r3, r2
34012d80:	f200 8110 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012d84:	4a91      	ldr	r2, [pc, #580]	@ (34012fcc <RCCEx_GetSAICLKFreq+0x28c>)
34012d86:	4293      	cmp	r3, r2
34012d88:	f000 8104 	beq.w	34012f94 <RCCEx_GetSAICLKFreq+0x254>
34012d8c:	4a8f      	ldr	r2, [pc, #572]	@ (34012fcc <RCCEx_GetSAICLKFreq+0x28c>)
34012d8e:	4293      	cmp	r3, r2
34012d90:	f200 8108 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012d94:	4a8e      	ldr	r2, [pc, #568]	@ (34012fd0 <RCCEx_GetSAICLKFreq+0x290>)
34012d96:	4293      	cmp	r3, r2
34012d98:	f000 80e6 	beq.w	34012f68 <RCCEx_GetSAICLKFreq+0x228>
34012d9c:	4a8c      	ldr	r2, [pc, #560]	@ (34012fd0 <RCCEx_GetSAICLKFreq+0x290>)
34012d9e:	4293      	cmp	r3, r2
34012da0:	f200 8100 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012da4:	4a8b      	ldr	r2, [pc, #556]	@ (34012fd4 <RCCEx_GetSAICLKFreq+0x294>)
34012da6:	4293      	cmp	r3, r2
34012da8:	f000 80de 	beq.w	34012f68 <RCCEx_GetSAICLKFreq+0x228>
34012dac:	4a89      	ldr	r2, [pc, #548]	@ (34012fd4 <RCCEx_GetSAICLKFreq+0x294>)
34012dae:	4293      	cmp	r3, r2
34012db0:	f200 80f8 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012db4:	4a88      	ldr	r2, [pc, #544]	@ (34012fd8 <RCCEx_GetSAICLKFreq+0x298>)
34012db6:	4293      	cmp	r3, r2
34012db8:	f000 80e4 	beq.w	34012f84 <RCCEx_GetSAICLKFreq+0x244>
34012dbc:	4a86      	ldr	r2, [pc, #536]	@ (34012fd8 <RCCEx_GetSAICLKFreq+0x298>)
34012dbe:	4293      	cmp	r3, r2
34012dc0:	f200 80f0 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012dc4:	4a85      	ldr	r2, [pc, #532]	@ (34012fdc <RCCEx_GetSAICLKFreq+0x29c>)
34012dc6:	4293      	cmp	r3, r2
34012dc8:	f000 80dc 	beq.w	34012f84 <RCCEx_GetSAICLKFreq+0x244>
34012dcc:	4a83      	ldr	r2, [pc, #524]	@ (34012fdc <RCCEx_GetSAICLKFreq+0x29c>)
34012dce:	4293      	cmp	r3, r2
34012dd0:	f200 80e8 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012dd4:	4a82      	ldr	r2, [pc, #520]	@ (34012fe0 <RCCEx_GetSAICLKFreq+0x2a0>)
34012dd6:	4293      	cmp	r3, r2
34012dd8:	f000 8083 	beq.w	34012ee2 <RCCEx_GetSAICLKFreq+0x1a2>
34012ddc:	4a80      	ldr	r2, [pc, #512]	@ (34012fe0 <RCCEx_GetSAICLKFreq+0x2a0>)
34012dde:	4293      	cmp	r3, r2
34012de0:	f200 80e0 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012de4:	4a7f      	ldr	r2, [pc, #508]	@ (34012fe4 <RCCEx_GetSAICLKFreq+0x2a4>)
34012de6:	4293      	cmp	r3, r2
34012de8:	d07b      	beq.n	34012ee2 <RCCEx_GetSAICLKFreq+0x1a2>
34012dea:	4a7e      	ldr	r2, [pc, #504]	@ (34012fe4 <RCCEx_GetSAICLKFreq+0x2a4>)
34012dec:	4293      	cmp	r3, r2
34012dee:	f200 80d9 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012df2:	4a7d      	ldr	r2, [pc, #500]	@ (34012fe8 <RCCEx_GetSAICLKFreq+0x2a8>)
34012df4:	4293      	cmp	r3, r2
34012df6:	d030      	beq.n	34012e5a <RCCEx_GetSAICLKFreq+0x11a>
34012df8:	4a7b      	ldr	r2, [pc, #492]	@ (34012fe8 <RCCEx_GetSAICLKFreq+0x2a8>)
34012dfa:	4293      	cmp	r3, r2
34012dfc:	f200 80d2 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012e00:	4a7a      	ldr	r2, [pc, #488]	@ (34012fec <RCCEx_GetSAICLKFreq+0x2ac>)
34012e02:	4293      	cmp	r3, r2
34012e04:	d029      	beq.n	34012e5a <RCCEx_GetSAICLKFreq+0x11a>
34012e06:	4a79      	ldr	r2, [pc, #484]	@ (34012fec <RCCEx_GetSAICLKFreq+0x2ac>)
34012e08:	4293      	cmp	r3, r2
34012e0a:	f200 80cb 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012e0e:	4a78      	ldr	r2, [pc, #480]	@ (34012ff0 <RCCEx_GetSAICLKFreq+0x2b0>)
34012e10:	4293      	cmp	r3, r2
34012e12:	d01d      	beq.n	34012e50 <RCCEx_GetSAICLKFreq+0x110>
34012e14:	4a76      	ldr	r2, [pc, #472]	@ (34012ff0 <RCCEx_GetSAICLKFreq+0x2b0>)
34012e16:	4293      	cmp	r3, r2
34012e18:	f200 80c4 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012e1c:	4a75      	ldr	r2, [pc, #468]	@ (34012ff4 <RCCEx_GetSAICLKFreq+0x2b4>)
34012e1e:	4293      	cmp	r3, r2
34012e20:	d016      	beq.n	34012e50 <RCCEx_GetSAICLKFreq+0x110>
34012e22:	4a74      	ldr	r2, [pc, #464]	@ (34012ff4 <RCCEx_GetSAICLKFreq+0x2b4>)
34012e24:	4293      	cmp	r3, r2
34012e26:	f200 80bd 	bhi.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
34012e2a:	4a73      	ldr	r2, [pc, #460]	@ (34012ff8 <RCCEx_GetSAICLKFreq+0x2b8>)
34012e2c:	4293      	cmp	r3, r2
34012e2e:	d003      	beq.n	34012e38 <RCCEx_GetSAICLKFreq+0xf8>
34012e30:	4a72      	ldr	r2, [pc, #456]	@ (34012ffc <RCCEx_GetSAICLKFreq+0x2bc>)
34012e32:	4293      	cmp	r3, r2
34012e34:	f040 80b6 	bne.w	34012fa4 <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34012e38:	f7f4 fee6 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34012e3c:	4603      	mov	r3, r0
34012e3e:	4618      	mov	r0, r3
34012e40:	f7fd ffda 	bl	34010df8 <RCCEx_GetHCLKFreq>
34012e44:	4603      	mov	r3, r0
34012e46:	4618      	mov	r0, r3
34012e48:	f7fd fff7 	bl	34010e3a <RCCEx_GetPCLK2Freq>
34012e4c:	60f8      	str	r0, [r7, #12]
      break;
34012e4e:	e0b2      	b.n	34012fb6 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012e50:	2007      	movs	r0, #7
34012e52:	f7fe fabd 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34012e56:	60f8      	str	r0, [r7, #12]
      break;
34012e58:	e0ad      	b.n	34012fb6 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34012e5a:	f7f6 fa77 	bl	3400934c <LL_RCC_IC7_IsEnabled>
34012e5e:	4603      	mov	r3, r0
34012e60:	2b00      	cmp	r3, #0
34012e62:	f000 80a1 	beq.w	34012fa8 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34012e66:	f7f6 fa93 	bl	34009390 <LL_RCC_IC7_GetDivider>
34012e6a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34012e6c:	f7f6 fa82 	bl	34009374 <LL_RCC_IC7_GetSource>
34012e70:	4603      	mov	r3, r0
34012e72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012e76:	d029      	beq.n	34012ecc <RCCEx_GetSAICLKFreq+0x18c>
34012e78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012e7c:	d82f      	bhi.n	34012ede <RCCEx_GetSAICLKFreq+0x19e>
34012e7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012e82:	d01a      	beq.n	34012eba <RCCEx_GetSAICLKFreq+0x17a>
34012e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012e88:	d829      	bhi.n	34012ede <RCCEx_GetSAICLKFreq+0x19e>
34012e8a:	2b00      	cmp	r3, #0
34012e8c:	d003      	beq.n	34012e96 <RCCEx_GetSAICLKFreq+0x156>
34012e8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012e92:	d009      	beq.n	34012ea8 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012e94:	e023      	b.n	34012ede <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012e96:	f7fd fe97 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34012e9a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012e9c:	68fa      	ldr	r2, [r7, #12]
34012e9e:	68bb      	ldr	r3, [r7, #8]
34012ea0:	fbb2 f3f3 	udiv	r3, r2, r3
34012ea4:	60fb      	str	r3, [r7, #12]
            break;
34012ea6:	e01b      	b.n	34012ee0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012ea8:	f7fd fed4 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34012eac:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012eae:	68fa      	ldr	r2, [r7, #12]
34012eb0:	68bb      	ldr	r3, [r7, #8]
34012eb2:	fbb2 f3f3 	udiv	r3, r2, r3
34012eb6:	60fb      	str	r3, [r7, #12]
            break;
34012eb8:	e012      	b.n	34012ee0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012eba:	f7fd ff11 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34012ebe:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012ec0:	68fa      	ldr	r2, [r7, #12]
34012ec2:	68bb      	ldr	r3, [r7, #8]
34012ec4:	fbb2 f3f3 	udiv	r3, r2, r3
34012ec8:	60fb      	str	r3, [r7, #12]
            break;
34012eca:	e009      	b.n	34012ee0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012ecc:	f7fd ff4e 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34012ed0:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012ed2:	68fa      	ldr	r2, [r7, #12]
34012ed4:	68bb      	ldr	r3, [r7, #8]
34012ed6:	fbb2 f3f3 	udiv	r3, r2, r3
34012eda:	60fb      	str	r3, [r7, #12]
            break;
34012edc:	e000      	b.n	34012ee0 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
34012ede:	bf00      	nop
        }
      }
      break;
34012ee0:	e062      	b.n	34012fa8 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34012ee2:	f7f6 fa73 	bl	340093cc <LL_RCC_IC8_IsEnabled>
34012ee6:	4603      	mov	r3, r0
34012ee8:	2b00      	cmp	r3, #0
34012eea:	d05f      	beq.n	34012fac <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34012eec:	f7f6 fa90 	bl	34009410 <LL_RCC_IC8_GetDivider>
34012ef0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34012ef2:	f7f6 fa7f 	bl	340093f4 <LL_RCC_IC8_GetSource>
34012ef6:	4603      	mov	r3, r0
34012ef8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012efc:	d029      	beq.n	34012f52 <RCCEx_GetSAICLKFreq+0x212>
34012efe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012f02:	d82f      	bhi.n	34012f64 <RCCEx_GetSAICLKFreq+0x224>
34012f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012f08:	d01a      	beq.n	34012f40 <RCCEx_GetSAICLKFreq+0x200>
34012f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012f0e:	d829      	bhi.n	34012f64 <RCCEx_GetSAICLKFreq+0x224>
34012f10:	2b00      	cmp	r3, #0
34012f12:	d003      	beq.n	34012f1c <RCCEx_GetSAICLKFreq+0x1dc>
34012f14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012f18:	d009      	beq.n	34012f2e <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012f1a:	e023      	b.n	34012f64 <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012f1c:	f7fd fe54 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34012f20:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012f22:	68fa      	ldr	r2, [r7, #12]
34012f24:	68bb      	ldr	r3, [r7, #8]
34012f26:	fbb2 f3f3 	udiv	r3, r2, r3
34012f2a:	60fb      	str	r3, [r7, #12]
            break;
34012f2c:	e01b      	b.n	34012f66 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012f2e:	f7fd fe91 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34012f32:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012f34:	68fa      	ldr	r2, [r7, #12]
34012f36:	68bb      	ldr	r3, [r7, #8]
34012f38:	fbb2 f3f3 	udiv	r3, r2, r3
34012f3c:	60fb      	str	r3, [r7, #12]
            break;
34012f3e:	e012      	b.n	34012f66 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012f40:	f7fd fece 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34012f44:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012f46:	68fa      	ldr	r2, [r7, #12]
34012f48:	68bb      	ldr	r3, [r7, #8]
34012f4a:	fbb2 f3f3 	udiv	r3, r2, r3
34012f4e:	60fb      	str	r3, [r7, #12]
            break;
34012f50:	e009      	b.n	34012f66 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012f52:	f7fd ff0b 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34012f56:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012f58:	68fa      	ldr	r2, [r7, #12]
34012f5a:	68bb      	ldr	r3, [r7, #8]
34012f5c:	fbb2 f3f3 	udiv	r3, r2, r3
34012f60:	60fb      	str	r3, [r7, #12]
            break;
34012f62:	e000      	b.n	34012f66 <RCCEx_GetSAICLKFreq+0x226>
            break;
34012f64:	bf00      	nop
        }
      }
      break;
34012f66:	e021      	b.n	34012fac <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34012f68:	f7f5 fa4c 	bl	34008404 <LL_RCC_HSI_IsReady>
34012f6c:	4603      	mov	r3, r0
34012f6e:	2b00      	cmp	r3, #0
34012f70:	d01e      	beq.n	34012fb0 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012f72:	f7f5 fa59 	bl	34008428 <LL_RCC_HSI_GetDivider>
34012f76:	4603      	mov	r3, r0
34012f78:	09db      	lsrs	r3, r3, #7
34012f7a:	4a21      	ldr	r2, [pc, #132]	@ (34013000 <RCCEx_GetSAICLKFreq+0x2c0>)
34012f7c:	fa22 f303 	lsr.w	r3, r2, r3
34012f80:	60fb      	str	r3, [r7, #12]
      }
      break;
34012f82:	e015      	b.n	34012fb0 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34012f84:	f7f5 fa5e 	bl	34008444 <LL_RCC_MSI_IsReady>
34012f88:	4603      	mov	r3, r0
34012f8a:	2b00      	cmp	r3, #0
34012f8c:	d012      	beq.n	34012fb4 <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
34012f8e:	4b1d      	ldr	r3, [pc, #116]	@ (34013004 <RCCEx_GetSAICLKFreq+0x2c4>)
34012f90:	60fb      	str	r3, [r7, #12]
      }
      break;
34012f92:	e00f      	b.n	34012fb4 <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
34012f94:	4b1c      	ldr	r3, [pc, #112]	@ (34013008 <RCCEx_GetSAICLKFreq+0x2c8>)
34012f96:	60fb      	str	r3, [r7, #12]
      break;
34012f98:	e00d      	b.n	34012fb6 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34012f9a:	2007      	movs	r0, #7
34012f9c:	f000 f920 	bl	340131e0 <RCCEx_GetSPDIFRXCLKFreq>
34012fa0:	60f8      	str	r0, [r7, #12]
      break;
34012fa2:	e008      	b.n	34012fb6 <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
34012fa4:	bf00      	nop
34012fa6:	e006      	b.n	34012fb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
34012fa8:	bf00      	nop
34012faa:	e004      	b.n	34012fb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
34012fac:	bf00      	nop
34012fae:	e002      	b.n	34012fb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
34012fb0:	bf00      	nop
34012fb2:	e000      	b.n	34012fb6 <RCCEx_GetSAICLKFreq+0x276>
      break;
34012fb4:	bf00      	nop
  }

  return sai_frequency;
34012fb6:	68fb      	ldr	r3, [r7, #12]
}
34012fb8:	4618      	mov	r0, r3
34012fba:	3710      	adds	r7, #16
34012fbc:	46bd      	mov	sp, r7
34012fbe:	bd80      	pop	{r7, pc}
34012fc0:	07071818 	.word	0x07071818
34012fc4:	07071418 	.word	0x07071418
34012fc8:	07061818 	.word	0x07061818
34012fcc:	07061418 	.word	0x07061418
34012fd0:	07051818 	.word	0x07051818
34012fd4:	07051418 	.word	0x07051418
34012fd8:	07041818 	.word	0x07041818
34012fdc:	07041418 	.word	0x07041418
34012fe0:	07031818 	.word	0x07031818
34012fe4:	07031418 	.word	0x07031418
34012fe8:	07021818 	.word	0x07021818
34012fec:	07021418 	.word	0x07021418
34012ff0:	07011818 	.word	0x07011818
34012ff4:	07011418 	.word	0x07011418
34012ff8:	07001418 	.word	0x07001418
34012ffc:	07001818 	.word	0x07001818
34013000:	03d09000 	.word	0x03d09000
34013004:	003d0900 	.word	0x003d0900
34013008:	00bb8000 	.word	0x00bb8000

3401300c <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
3401300c:	b580      	push	{r7, lr}
3401300e:	b084      	sub	sp, #16
34013010:	af00      	add	r7, sp, #0
34013012:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34013014:	2300      	movs	r3, #0
34013016:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34013018:	6878      	ldr	r0, [r7, #4]
3401301a:	f7f5 fdb1 	bl	34008b80 <LL_RCC_GetSDMMCClockSource>
3401301e:	4603      	mov	r3, r0
34013020:	4a67      	ldr	r2, [pc, #412]	@ (340131c0 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34013022:	4293      	cmp	r3, r2
34013024:	d07e      	beq.n	34013124 <RCCEx_GetSDMMCCLKFreq+0x118>
34013026:	4a66      	ldr	r2, [pc, #408]	@ (340131c0 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34013028:	4293      	cmp	r3, r2
3401302a:	f200 80be 	bhi.w	340131aa <RCCEx_GetSDMMCCLKFreq+0x19e>
3401302e:	4a65      	ldr	r2, [pc, #404]	@ (340131c4 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34013030:	4293      	cmp	r3, r2
34013032:	d077      	beq.n	34013124 <RCCEx_GetSDMMCCLKFreq+0x118>
34013034:	4a63      	ldr	r2, [pc, #396]	@ (340131c4 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34013036:	4293      	cmp	r3, r2
34013038:	f200 80b7 	bhi.w	340131aa <RCCEx_GetSDMMCCLKFreq+0x19e>
3401303c:	4a62      	ldr	r2, [pc, #392]	@ (340131c8 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3401303e:	4293      	cmp	r3, r2
34013040:	d02c      	beq.n	3401309c <RCCEx_GetSDMMCCLKFreq+0x90>
34013042:	4a61      	ldr	r2, [pc, #388]	@ (340131c8 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34013044:	4293      	cmp	r3, r2
34013046:	f200 80b0 	bhi.w	340131aa <RCCEx_GetSDMMCCLKFreq+0x19e>
3401304a:	4a60      	ldr	r2, [pc, #384]	@ (340131cc <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3401304c:	4293      	cmp	r3, r2
3401304e:	d025      	beq.n	3401309c <RCCEx_GetSDMMCCLKFreq+0x90>
34013050:	4a5e      	ldr	r2, [pc, #376]	@ (340131cc <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34013052:	4293      	cmp	r3, r2
34013054:	f200 80a9 	bhi.w	340131aa <RCCEx_GetSDMMCCLKFreq+0x19e>
34013058:	4a5d      	ldr	r2, [pc, #372]	@ (340131d0 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3401305a:	4293      	cmp	r3, r2
3401305c:	d019      	beq.n	34013092 <RCCEx_GetSDMMCCLKFreq+0x86>
3401305e:	4a5c      	ldr	r2, [pc, #368]	@ (340131d0 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34013060:	4293      	cmp	r3, r2
34013062:	f200 80a2 	bhi.w	340131aa <RCCEx_GetSDMMCCLKFreq+0x19e>
34013066:	4a5b      	ldr	r2, [pc, #364]	@ (340131d4 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34013068:	4293      	cmp	r3, r2
3401306a:	d012      	beq.n	34013092 <RCCEx_GetSDMMCCLKFreq+0x86>
3401306c:	4a59      	ldr	r2, [pc, #356]	@ (340131d4 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3401306e:	4293      	cmp	r3, r2
34013070:	f200 809b 	bhi.w	340131aa <RCCEx_GetSDMMCCLKFreq+0x19e>
34013074:	4a58      	ldr	r2, [pc, #352]	@ (340131d8 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
34013076:	4293      	cmp	r3, r2
34013078:	d003      	beq.n	34013082 <RCCEx_GetSDMMCCLKFreq+0x76>
3401307a:	4a58      	ldr	r2, [pc, #352]	@ (340131dc <RCCEx_GetSDMMCCLKFreq+0x1d0>)
3401307c:	4293      	cmp	r3, r2
3401307e:	f040 8094 	bne.w	340131aa <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34013082:	f7f4 fdc1 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34013086:	4603      	mov	r3, r0
34013088:	4618      	mov	r0, r3
3401308a:	f7fd feb5 	bl	34010df8 <RCCEx_GetHCLKFreq>
3401308e:	60f8      	str	r0, [r7, #12]
      break;
34013090:	e090      	b.n	340131b4 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013092:	2007      	movs	r0, #7
34013094:	f7fe f99c 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34013098:	60f8      	str	r0, [r7, #12]
      break;
3401309a:	e08b      	b.n	340131b4 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3401309c:	f7f6 f8d6 	bl	3400924c <LL_RCC_IC4_IsEnabled>
340130a0:	4603      	mov	r3, r0
340130a2:	2b00      	cmp	r3, #0
340130a4:	f000 8083 	beq.w	340131ae <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
340130a8:	f7f6 f8f2 	bl	34009290 <LL_RCC_IC4_GetDivider>
340130ac:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
340130ae:	f7f6 f8e1 	bl	34009274 <LL_RCC_IC4_GetSource>
340130b2:	4603      	mov	r3, r0
340130b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340130b8:	d029      	beq.n	3401310e <RCCEx_GetSDMMCCLKFreq+0x102>
340130ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340130be:	d82f      	bhi.n	34013120 <RCCEx_GetSDMMCCLKFreq+0x114>
340130c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340130c4:	d01a      	beq.n	340130fc <RCCEx_GetSDMMCCLKFreq+0xf0>
340130c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340130ca:	d829      	bhi.n	34013120 <RCCEx_GetSDMMCCLKFreq+0x114>
340130cc:	2b00      	cmp	r3, #0
340130ce:	d003      	beq.n	340130d8 <RCCEx_GetSDMMCCLKFreq+0xcc>
340130d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340130d4:	d009      	beq.n	340130ea <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340130d6:	e023      	b.n	34013120 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340130d8:	f7fd fd76 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
340130dc:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340130de:	68fa      	ldr	r2, [r7, #12]
340130e0:	68bb      	ldr	r3, [r7, #8]
340130e2:	fbb2 f3f3 	udiv	r3, r2, r3
340130e6:	60fb      	str	r3, [r7, #12]
            break;
340130e8:	e01b      	b.n	34013122 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340130ea:	f7fd fdb3 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340130ee:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340130f0:	68fa      	ldr	r2, [r7, #12]
340130f2:	68bb      	ldr	r3, [r7, #8]
340130f4:	fbb2 f3f3 	udiv	r3, r2, r3
340130f8:	60fb      	str	r3, [r7, #12]
            break;
340130fa:	e012      	b.n	34013122 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340130fc:	f7fd fdf0 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34013100:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34013102:	68fa      	ldr	r2, [r7, #12]
34013104:	68bb      	ldr	r3, [r7, #8]
34013106:	fbb2 f3f3 	udiv	r3, r2, r3
3401310a:	60fb      	str	r3, [r7, #12]
            break;
3401310c:	e009      	b.n	34013122 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401310e:	f7fd fe2d 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34013112:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34013114:	68fa      	ldr	r2, [r7, #12]
34013116:	68bb      	ldr	r3, [r7, #8]
34013118:	fbb2 f3f3 	udiv	r3, r2, r3
3401311c:	60fb      	str	r3, [r7, #12]
            break;
3401311e:	e000      	b.n	34013122 <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
34013120:	bf00      	nop
        }
      }
      break;
34013122:	e044      	b.n	340131ae <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
34013124:	f7f6 f8d2 	bl	340092cc <LL_RCC_IC5_IsEnabled>
34013128:	4603      	mov	r3, r0
3401312a:	2b00      	cmp	r3, #0
3401312c:	d041      	beq.n	340131b2 <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
3401312e:	f7f6 f8ef 	bl	34009310 <LL_RCC_IC5_GetDivider>
34013132:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
34013134:	f7f6 f8de 	bl	340092f4 <LL_RCC_IC5_GetSource>
34013138:	4603      	mov	r3, r0
3401313a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401313e:	d029      	beq.n	34013194 <RCCEx_GetSDMMCCLKFreq+0x188>
34013140:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013144:	d82f      	bhi.n	340131a6 <RCCEx_GetSDMMCCLKFreq+0x19a>
34013146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401314a:	d01a      	beq.n	34013182 <RCCEx_GetSDMMCCLKFreq+0x176>
3401314c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013150:	d829      	bhi.n	340131a6 <RCCEx_GetSDMMCCLKFreq+0x19a>
34013152:	2b00      	cmp	r3, #0
34013154:	d003      	beq.n	3401315e <RCCEx_GetSDMMCCLKFreq+0x152>
34013156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401315a:	d009      	beq.n	34013170 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401315c:	e023      	b.n	340131a6 <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401315e:	f7fd fd33 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34013162:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34013164:	68fa      	ldr	r2, [r7, #12]
34013166:	68bb      	ldr	r3, [r7, #8]
34013168:	fbb2 f3f3 	udiv	r3, r2, r3
3401316c:	60fb      	str	r3, [r7, #12]
            break;
3401316e:	e01b      	b.n	340131a8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013170:	f7fd fd70 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34013174:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34013176:	68fa      	ldr	r2, [r7, #12]
34013178:	68bb      	ldr	r3, [r7, #8]
3401317a:	fbb2 f3f3 	udiv	r3, r2, r3
3401317e:	60fb      	str	r3, [r7, #12]
            break;
34013180:	e012      	b.n	340131a8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013182:	f7fd fdad 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34013186:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34013188:	68fa      	ldr	r2, [r7, #12]
3401318a:	68bb      	ldr	r3, [r7, #8]
3401318c:	fbb2 f3f3 	udiv	r3, r2, r3
34013190:	60fb      	str	r3, [r7, #12]
            break;
34013192:	e009      	b.n	340131a8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013194:	f7fd fdea 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34013198:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3401319a:	68fa      	ldr	r2, [r7, #12]
3401319c:	68bb      	ldr	r3, [r7, #8]
3401319e:	fbb2 f3f3 	udiv	r3, r2, r3
340131a2:	60fb      	str	r3, [r7, #12]
            break;
340131a4:	e000      	b.n	340131a8 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
340131a6:	bf00      	nop
        }
      }
      break;
340131a8:	e003      	b.n	340131b2 <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
340131aa:	bf00      	nop
340131ac:	e002      	b.n	340131b4 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
340131ae:	bf00      	nop
340131b0:	e000      	b.n	340131b4 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
340131b2:	bf00      	nop
  }

  return sdmmc_frequency;
340131b4:	68fb      	ldr	r3, [r7, #12]
}
340131b6:	4618      	mov	r0, r3
340131b8:	3710      	adds	r7, #16
340131ba:	46bd      	mov	sp, r7
340131bc:	bd80      	pop	{r7, pc}
340131be:	bf00      	nop
340131c0:	0303041c 	.word	0x0303041c
340131c4:	0303001c 	.word	0x0303001c
340131c8:	0302041c 	.word	0x0302041c
340131cc:	0302001c 	.word	0x0302001c
340131d0:	0301041c 	.word	0x0301041c
340131d4:	0301001c 	.word	0x0301001c
340131d8:	0300001c 	.word	0x0300001c
340131dc:	0300041c 	.word	0x0300041c

340131e0 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
340131e0:	b580      	push	{r7, lr}
340131e2:	b084      	sub	sp, #16
340131e4:	af00      	add	r7, sp, #0
340131e6:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
340131e8:	2300      	movs	r3, #0
340131ea:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
340131ec:	6878      	ldr	r0, [r7, #4]
340131ee:	f7f5 fcd3 	bl	34008b98 <LL_RCC_GetSPDIFRXClockSource>
340131f2:	4603      	mov	r3, r0
340131f4:	2b06      	cmp	r3, #6
340131f6:	f200 80c2 	bhi.w	3401337e <RCCEx_GetSPDIFRXCLKFreq+0x19e>
340131fa:	a201      	add	r2, pc, #4	@ (adr r2, 34013200 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
340131fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34013200:	3401321d 	.word	0x3401321d
34013204:	34013235 	.word	0x34013235
34013208:	3401323f 	.word	0x3401323f
3401320c:	340132c7 	.word	0x340132c7
34013210:	34013369 	.word	0x34013369
34013214:	3401334d 	.word	0x3401334d
34013218:	34013379 	.word	0x34013379
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401321c:	f7f4 fcf4 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34013220:	4603      	mov	r3, r0
34013222:	4618      	mov	r0, r3
34013224:	f7fd fde8 	bl	34010df8 <RCCEx_GetHCLKFreq>
34013228:	4603      	mov	r3, r0
3401322a:	4618      	mov	r0, r3
3401322c:	f7fd fdf5 	bl	34010e1a <RCCEx_GetPCLK1Freq>
34013230:	60f8      	str	r0, [r7, #12]
      break;
34013232:	e0ad      	b.n	34013390 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013234:	2007      	movs	r0, #7
34013236:	f7fe f8cb 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
3401323a:	60f8      	str	r0, [r7, #12]
      break;
3401323c:	e0a8      	b.n	34013390 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401323e:	f7f6 f885 	bl	3400934c <LL_RCC_IC7_IsEnabled>
34013242:	4603      	mov	r3, r0
34013244:	2b00      	cmp	r3, #0
34013246:	f000 809c 	beq.w	34013382 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3401324a:	f7f6 f8a1 	bl	34009390 <LL_RCC_IC7_GetDivider>
3401324e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34013250:	f7f6 f890 	bl	34009374 <LL_RCC_IC7_GetSource>
34013254:	4603      	mov	r3, r0
34013256:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401325a:	d029      	beq.n	340132b0 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
3401325c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013260:	d82f      	bhi.n	340132c2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34013262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013266:	d01a      	beq.n	3401329e <RCCEx_GetSPDIFRXCLKFreq+0xbe>
34013268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401326c:	d829      	bhi.n	340132c2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3401326e:	2b00      	cmp	r3, #0
34013270:	d003      	beq.n	3401327a <RCCEx_GetSPDIFRXCLKFreq+0x9a>
34013272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013276:	d009      	beq.n	3401328c <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013278:	e023      	b.n	340132c2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401327a:	f7fd fca5 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
3401327e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013280:	68fa      	ldr	r2, [r7, #12]
34013282:	68bb      	ldr	r3, [r7, #8]
34013284:	fbb2 f3f3 	udiv	r3, r2, r3
34013288:	60fb      	str	r3, [r7, #12]
            break;
3401328a:	e01b      	b.n	340132c4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401328c:	f7fd fce2 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34013290:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013292:	68fa      	ldr	r2, [r7, #12]
34013294:	68bb      	ldr	r3, [r7, #8]
34013296:	fbb2 f3f3 	udiv	r3, r2, r3
3401329a:	60fb      	str	r3, [r7, #12]
            break;
3401329c:	e012      	b.n	340132c4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401329e:	f7fd fd1f 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340132a2:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340132a4:	68fa      	ldr	r2, [r7, #12]
340132a6:	68bb      	ldr	r3, [r7, #8]
340132a8:	fbb2 f3f3 	udiv	r3, r2, r3
340132ac:	60fb      	str	r3, [r7, #12]
            break;
340132ae:	e009      	b.n	340132c4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340132b0:	f7fd fd5c 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340132b4:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340132b6:	68fa      	ldr	r2, [r7, #12]
340132b8:	68bb      	ldr	r3, [r7, #8]
340132ba:	fbb2 f3f3 	udiv	r3, r2, r3
340132be:	60fb      	str	r3, [r7, #12]
            break;
340132c0:	e000      	b.n	340132c4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
340132c2:	bf00      	nop
        }
      }
      break;
340132c4:	e05d      	b.n	34013382 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
340132c6:	f7f6 f881 	bl	340093cc <LL_RCC_IC8_IsEnabled>
340132ca:	4603      	mov	r3, r0
340132cc:	2b00      	cmp	r3, #0
340132ce:	d05a      	beq.n	34013386 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
340132d0:	f7f6 f89e 	bl	34009410 <LL_RCC_IC8_GetDivider>
340132d4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
340132d6:	f7f6 f88d 	bl	340093f4 <LL_RCC_IC8_GetSource>
340132da:	4603      	mov	r3, r0
340132dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340132e0:	d029      	beq.n	34013336 <RCCEx_GetSPDIFRXCLKFreq+0x156>
340132e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340132e6:	d82f      	bhi.n	34013348 <RCCEx_GetSPDIFRXCLKFreq+0x168>
340132e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340132ec:	d01a      	beq.n	34013324 <RCCEx_GetSPDIFRXCLKFreq+0x144>
340132ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340132f2:	d829      	bhi.n	34013348 <RCCEx_GetSPDIFRXCLKFreq+0x168>
340132f4:	2b00      	cmp	r3, #0
340132f6:	d003      	beq.n	34013300 <RCCEx_GetSPDIFRXCLKFreq+0x120>
340132f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340132fc:	d009      	beq.n	34013312 <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340132fe:	e023      	b.n	34013348 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013300:	f7fd fc62 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34013304:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013306:	68fa      	ldr	r2, [r7, #12]
34013308:	68bb      	ldr	r3, [r7, #8]
3401330a:	fbb2 f3f3 	udiv	r3, r2, r3
3401330e:	60fb      	str	r3, [r7, #12]
            break;
34013310:	e01b      	b.n	3401334a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013312:	f7fd fc9f 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34013316:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013318:	68fa      	ldr	r2, [r7, #12]
3401331a:	68bb      	ldr	r3, [r7, #8]
3401331c:	fbb2 f3f3 	udiv	r3, r2, r3
34013320:	60fb      	str	r3, [r7, #12]
            break;
34013322:	e012      	b.n	3401334a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013324:	f7fd fcdc 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34013328:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3401332a:	68fa      	ldr	r2, [r7, #12]
3401332c:	68bb      	ldr	r3, [r7, #8]
3401332e:	fbb2 f3f3 	udiv	r3, r2, r3
34013332:	60fb      	str	r3, [r7, #12]
            break;
34013334:	e009      	b.n	3401334a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013336:	f7fd fd19 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
3401333a:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3401333c:	68fa      	ldr	r2, [r7, #12]
3401333e:	68bb      	ldr	r3, [r7, #8]
34013340:	fbb2 f3f3 	udiv	r3, r2, r3
34013344:	60fb      	str	r3, [r7, #12]
            break;
34013346:	e000      	b.n	3401334a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
34013348:	bf00      	nop
        }
      }
      break;
3401334a:	e01c      	b.n	34013386 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3401334c:	f7f5 f85a 	bl	34008404 <LL_RCC_HSI_IsReady>
34013350:	4603      	mov	r3, r0
34013352:	2b00      	cmp	r3, #0
34013354:	d019      	beq.n	3401338a <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34013356:	f7f5 f867 	bl	34008428 <LL_RCC_HSI_GetDivider>
3401335a:	4603      	mov	r3, r0
3401335c:	09db      	lsrs	r3, r3, #7
3401335e:	4a0f      	ldr	r2, [pc, #60]	@ (3401339c <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
34013360:	fa22 f303 	lsr.w	r3, r2, r3
34013364:	60fb      	str	r3, [r7, #12]
      }
      break;
34013366:	e010      	b.n	3401338a <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34013368:	f7f5 f86c 	bl	34008444 <LL_RCC_MSI_IsReady>
3401336c:	4603      	mov	r3, r0
3401336e:	2b00      	cmp	r3, #0
34013370:	d00d      	beq.n	3401338e <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
34013372:	4b0b      	ldr	r3, [pc, #44]	@ (340133a0 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
34013374:	60fb      	str	r3, [r7, #12]
      }
      break;
34013376:	e00a      	b.n	3401338e <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
34013378:	4b0a      	ldr	r3, [pc, #40]	@ (340133a4 <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
3401337a:	60fb      	str	r3, [r7, #12]
      break;
3401337c:	e008      	b.n	34013390 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
3401337e:	bf00      	nop
34013380:	e006      	b.n	34013390 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34013382:	bf00      	nop
34013384:	e004      	b.n	34013390 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34013386:	bf00      	nop
34013388:	e002      	b.n	34013390 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3401338a:	bf00      	nop
3401338c:	e000      	b.n	34013390 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3401338e:	bf00      	nop
  }

  return spdifrx_frequency;
34013390:	68fb      	ldr	r3, [r7, #12]
}
34013392:	4618      	mov	r0, r3
34013394:	3710      	adds	r7, #16
34013396:	46bd      	mov	sp, r7
34013398:	bd80      	pop	{r7, pc}
3401339a:	bf00      	nop
3401339c:	03d09000 	.word	0x03d09000
340133a0:	003d0900 	.word	0x003d0900
340133a4:	00bb8000 	.word	0x00bb8000

340133a8 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
340133a8:	b580      	push	{r7, lr}
340133aa:	b084      	sub	sp, #16
340133ac:	af00      	add	r7, sp, #0
340133ae:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
340133b0:	2300      	movs	r3, #0
340133b2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
340133b4:	6878      	ldr	r0, [r7, #4]
340133b6:	f7f5 fc01 	bl	34008bbc <LL_RCC_GetSPIClockSource>
340133ba:	4603      	mov	r3, r0
340133bc:	4aa7      	ldr	r2, [pc, #668]	@ (3401365c <RCCEx_GetSPICLKFreq+0x2b4>)
340133be:	4293      	cmp	r3, r2
340133c0:	f000 829e 	beq.w	34013900 <RCCEx_GetSPICLKFreq+0x558>
340133c4:	4aa5      	ldr	r2, [pc, #660]	@ (3401365c <RCCEx_GetSPICLKFreq+0x2b4>)
340133c6:	4293      	cmp	r3, r2
340133c8:	f200 82a5 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340133cc:	4aa4      	ldr	r2, [pc, #656]	@ (34013660 <RCCEx_GetSPICLKFreq+0x2b8>)
340133ce:	4293      	cmp	r3, r2
340133d0:	f000 8299 	beq.w	34013906 <RCCEx_GetSPICLKFreq+0x55e>
340133d4:	4aa2      	ldr	r2, [pc, #648]	@ (34013660 <RCCEx_GetSPICLKFreq+0x2b8>)
340133d6:	4293      	cmp	r3, r2
340133d8:	f200 829d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340133dc:	4aa1      	ldr	r2, [pc, #644]	@ (34013664 <RCCEx_GetSPICLKFreq+0x2bc>)
340133de:	4293      	cmp	r3, r2
340133e0:	f000 8291 	beq.w	34013906 <RCCEx_GetSPICLKFreq+0x55e>
340133e4:	4a9f      	ldr	r2, [pc, #636]	@ (34013664 <RCCEx_GetSPICLKFreq+0x2bc>)
340133e6:	4293      	cmp	r3, r2
340133e8:	f200 8295 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340133ec:	4a9e      	ldr	r2, [pc, #632]	@ (34013668 <RCCEx_GetSPICLKFreq+0x2c0>)
340133ee:	4293      	cmp	r3, r2
340133f0:	f000 8286 	beq.w	34013900 <RCCEx_GetSPICLKFreq+0x558>
340133f4:	4a9c      	ldr	r2, [pc, #624]	@ (34013668 <RCCEx_GetSPICLKFreq+0x2c0>)
340133f6:	4293      	cmp	r3, r2
340133f8:	f200 828d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340133fc:	4a9b      	ldr	r2, [pc, #620]	@ (3401366c <RCCEx_GetSPICLKFreq+0x2c4>)
340133fe:	4293      	cmp	r3, r2
34013400:	f000 827e 	beq.w	34013900 <RCCEx_GetSPICLKFreq+0x558>
34013404:	4a99      	ldr	r2, [pc, #612]	@ (3401366c <RCCEx_GetSPICLKFreq+0x2c4>)
34013406:	4293      	cmp	r3, r2
34013408:	f200 8285 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401340c:	4a98      	ldr	r2, [pc, #608]	@ (34013670 <RCCEx_GetSPICLKFreq+0x2c8>)
3401340e:	4293      	cmp	r3, r2
34013410:	f000 8276 	beq.w	34013900 <RCCEx_GetSPICLKFreq+0x558>
34013414:	4a96      	ldr	r2, [pc, #600]	@ (34013670 <RCCEx_GetSPICLKFreq+0x2c8>)
34013416:	4293      	cmp	r3, r2
34013418:	f200 827d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401341c:	4a95      	ldr	r2, [pc, #596]	@ (34013674 <RCCEx_GetSPICLKFreq+0x2cc>)
3401341e:	4293      	cmp	r3, r2
34013420:	f000 8258 	beq.w	340138d4 <RCCEx_GetSPICLKFreq+0x52c>
34013424:	4a93      	ldr	r2, [pc, #588]	@ (34013674 <RCCEx_GetSPICLKFreq+0x2cc>)
34013426:	4293      	cmp	r3, r2
34013428:	f200 8275 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401342c:	4a92      	ldr	r2, [pc, #584]	@ (34013678 <RCCEx_GetSPICLKFreq+0x2d0>)
3401342e:	4293      	cmp	r3, r2
34013430:	f000 8250 	beq.w	340138d4 <RCCEx_GetSPICLKFreq+0x52c>
34013434:	4a90      	ldr	r2, [pc, #576]	@ (34013678 <RCCEx_GetSPICLKFreq+0x2d0>)
34013436:	4293      	cmp	r3, r2
34013438:	f200 826d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401343c:	4a8f      	ldr	r2, [pc, #572]	@ (3401367c <RCCEx_GetSPICLKFreq+0x2d4>)
3401343e:	4293      	cmp	r3, r2
34013440:	f000 8248 	beq.w	340138d4 <RCCEx_GetSPICLKFreq+0x52c>
34013444:	4a8d      	ldr	r2, [pc, #564]	@ (3401367c <RCCEx_GetSPICLKFreq+0x2d4>)
34013446:	4293      	cmp	r3, r2
34013448:	f200 8265 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401344c:	4a8c      	ldr	r2, [pc, #560]	@ (34013680 <RCCEx_GetSPICLKFreq+0x2d8>)
3401344e:	4293      	cmp	r3, r2
34013450:	f000 8240 	beq.w	340138d4 <RCCEx_GetSPICLKFreq+0x52c>
34013454:	4a8a      	ldr	r2, [pc, #552]	@ (34013680 <RCCEx_GetSPICLKFreq+0x2d8>)
34013456:	4293      	cmp	r3, r2
34013458:	f200 825d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401345c:	4a89      	ldr	r2, [pc, #548]	@ (34013684 <RCCEx_GetSPICLKFreq+0x2dc>)
3401345e:	4293      	cmp	r3, r2
34013460:	f000 8238 	beq.w	340138d4 <RCCEx_GetSPICLKFreq+0x52c>
34013464:	4a87      	ldr	r2, [pc, #540]	@ (34013684 <RCCEx_GetSPICLKFreq+0x2dc>)
34013466:	4293      	cmp	r3, r2
34013468:	f200 8255 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401346c:	4a86      	ldr	r2, [pc, #536]	@ (34013688 <RCCEx_GetSPICLKFreq+0x2e0>)
3401346e:	4293      	cmp	r3, r2
34013470:	f000 8230 	beq.w	340138d4 <RCCEx_GetSPICLKFreq+0x52c>
34013474:	4a84      	ldr	r2, [pc, #528]	@ (34013688 <RCCEx_GetSPICLKFreq+0x2e0>)
34013476:	4293      	cmp	r3, r2
34013478:	f200 824d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401347c:	4a83      	ldr	r2, [pc, #524]	@ (3401368c <RCCEx_GetSPICLKFreq+0x2e4>)
3401347e:	4293      	cmp	r3, r2
34013480:	f000 8236 	beq.w	340138f0 <RCCEx_GetSPICLKFreq+0x548>
34013484:	4a81      	ldr	r2, [pc, #516]	@ (3401368c <RCCEx_GetSPICLKFreq+0x2e4>)
34013486:	4293      	cmp	r3, r2
34013488:	f200 8245 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401348c:	4a80      	ldr	r2, [pc, #512]	@ (34013690 <RCCEx_GetSPICLKFreq+0x2e8>)
3401348e:	4293      	cmp	r3, r2
34013490:	f000 822e 	beq.w	340138f0 <RCCEx_GetSPICLKFreq+0x548>
34013494:	4a7e      	ldr	r2, [pc, #504]	@ (34013690 <RCCEx_GetSPICLKFreq+0x2e8>)
34013496:	4293      	cmp	r3, r2
34013498:	f200 823d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401349c:	4a7d      	ldr	r2, [pc, #500]	@ (34013694 <RCCEx_GetSPICLKFreq+0x2ec>)
3401349e:	4293      	cmp	r3, r2
340134a0:	f000 8226 	beq.w	340138f0 <RCCEx_GetSPICLKFreq+0x548>
340134a4:	4a7b      	ldr	r2, [pc, #492]	@ (34013694 <RCCEx_GetSPICLKFreq+0x2ec>)
340134a6:	4293      	cmp	r3, r2
340134a8:	f200 8235 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340134ac:	4a7a      	ldr	r2, [pc, #488]	@ (34013698 <RCCEx_GetSPICLKFreq+0x2f0>)
340134ae:	4293      	cmp	r3, r2
340134b0:	f000 821e 	beq.w	340138f0 <RCCEx_GetSPICLKFreq+0x548>
340134b4:	4a78      	ldr	r2, [pc, #480]	@ (34013698 <RCCEx_GetSPICLKFreq+0x2f0>)
340134b6:	4293      	cmp	r3, r2
340134b8:	f200 822d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340134bc:	4a77      	ldr	r2, [pc, #476]	@ (3401369c <RCCEx_GetSPICLKFreq+0x2f4>)
340134be:	4293      	cmp	r3, r2
340134c0:	f000 8216 	beq.w	340138f0 <RCCEx_GetSPICLKFreq+0x548>
340134c4:	4a75      	ldr	r2, [pc, #468]	@ (3401369c <RCCEx_GetSPICLKFreq+0x2f4>)
340134c6:	4293      	cmp	r3, r2
340134c8:	f200 8225 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340134cc:	4a74      	ldr	r2, [pc, #464]	@ (340136a0 <RCCEx_GetSPICLKFreq+0x2f8>)
340134ce:	4293      	cmp	r3, r2
340134d0:	f000 820e 	beq.w	340138f0 <RCCEx_GetSPICLKFreq+0x548>
340134d4:	4a72      	ldr	r2, [pc, #456]	@ (340136a0 <RCCEx_GetSPICLKFreq+0x2f8>)
340134d6:	4293      	cmp	r3, r2
340134d8:	f200 821d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340134dc:	4a71      	ldr	r2, [pc, #452]	@ (340136a4 <RCCEx_GetSPICLKFreq+0x2fc>)
340134de:	4293      	cmp	r3, r2
340134e0:	f000 8171 	beq.w	340137c6 <RCCEx_GetSPICLKFreq+0x41e>
340134e4:	4a6f      	ldr	r2, [pc, #444]	@ (340136a4 <RCCEx_GetSPICLKFreq+0x2fc>)
340134e6:	4293      	cmp	r3, r2
340134e8:	f200 8215 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340134ec:	4a6e      	ldr	r2, [pc, #440]	@ (340136a8 <RCCEx_GetSPICLKFreq+0x300>)
340134ee:	4293      	cmp	r3, r2
340134f0:	f000 81ad 	beq.w	3401384e <RCCEx_GetSPICLKFreq+0x4a6>
340134f4:	4a6c      	ldr	r2, [pc, #432]	@ (340136a8 <RCCEx_GetSPICLKFreq+0x300>)
340134f6:	4293      	cmp	r3, r2
340134f8:	f200 820d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340134fc:	4a6b      	ldr	r2, [pc, #428]	@ (340136ac <RCCEx_GetSPICLKFreq+0x304>)
340134fe:	4293      	cmp	r3, r2
34013500:	f000 81a5 	beq.w	3401384e <RCCEx_GetSPICLKFreq+0x4a6>
34013504:	4a69      	ldr	r2, [pc, #420]	@ (340136ac <RCCEx_GetSPICLKFreq+0x304>)
34013506:	4293      	cmp	r3, r2
34013508:	f200 8205 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401350c:	4a68      	ldr	r2, [pc, #416]	@ (340136b0 <RCCEx_GetSPICLKFreq+0x308>)
3401350e:	4293      	cmp	r3, r2
34013510:	f000 8159 	beq.w	340137c6 <RCCEx_GetSPICLKFreq+0x41e>
34013514:	4a66      	ldr	r2, [pc, #408]	@ (340136b0 <RCCEx_GetSPICLKFreq+0x308>)
34013516:	4293      	cmp	r3, r2
34013518:	f200 81fd 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401351c:	4a65      	ldr	r2, [pc, #404]	@ (340136b4 <RCCEx_GetSPICLKFreq+0x30c>)
3401351e:	4293      	cmp	r3, r2
34013520:	f000 8151 	beq.w	340137c6 <RCCEx_GetSPICLKFreq+0x41e>
34013524:	4a63      	ldr	r2, [pc, #396]	@ (340136b4 <RCCEx_GetSPICLKFreq+0x30c>)
34013526:	4293      	cmp	r3, r2
34013528:	f200 81f5 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401352c:	4a62      	ldr	r2, [pc, #392]	@ (340136b8 <RCCEx_GetSPICLKFreq+0x310>)
3401352e:	4293      	cmp	r3, r2
34013530:	f000 8149 	beq.w	340137c6 <RCCEx_GetSPICLKFreq+0x41e>
34013534:	4a60      	ldr	r2, [pc, #384]	@ (340136b8 <RCCEx_GetSPICLKFreq+0x310>)
34013536:	4293      	cmp	r3, r2
34013538:	f200 81ed 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401353c:	4a5f      	ldr	r2, [pc, #380]	@ (340136bc <RCCEx_GetSPICLKFreq+0x314>)
3401353e:	4293      	cmp	r3, r2
34013540:	f000 80fd 	beq.w	3401373e <RCCEx_GetSPICLKFreq+0x396>
34013544:	4a5d      	ldr	r2, [pc, #372]	@ (340136bc <RCCEx_GetSPICLKFreq+0x314>)
34013546:	4293      	cmp	r3, r2
34013548:	f200 81e5 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401354c:	4a5c      	ldr	r2, [pc, #368]	@ (340136c0 <RCCEx_GetSPICLKFreq+0x318>)
3401354e:	4293      	cmp	r3, r2
34013550:	f000 8139 	beq.w	340137c6 <RCCEx_GetSPICLKFreq+0x41e>
34013554:	4a5a      	ldr	r2, [pc, #360]	@ (340136c0 <RCCEx_GetSPICLKFreq+0x318>)
34013556:	4293      	cmp	r3, r2
34013558:	f200 81dd 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401355c:	4a59      	ldr	r2, [pc, #356]	@ (340136c4 <RCCEx_GetSPICLKFreq+0x31c>)
3401355e:	4293      	cmp	r3, r2
34013560:	f000 8131 	beq.w	340137c6 <RCCEx_GetSPICLKFreq+0x41e>
34013564:	4a57      	ldr	r2, [pc, #348]	@ (340136c4 <RCCEx_GetSPICLKFreq+0x31c>)
34013566:	4293      	cmp	r3, r2
34013568:	f200 81d5 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401356c:	4a56      	ldr	r2, [pc, #344]	@ (340136c8 <RCCEx_GetSPICLKFreq+0x320>)
3401356e:	4293      	cmp	r3, r2
34013570:	f000 80e5 	beq.w	3401373e <RCCEx_GetSPICLKFreq+0x396>
34013574:	4a54      	ldr	r2, [pc, #336]	@ (340136c8 <RCCEx_GetSPICLKFreq+0x320>)
34013576:	4293      	cmp	r3, r2
34013578:	f200 81cd 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401357c:	4a53      	ldr	r2, [pc, #332]	@ (340136cc <RCCEx_GetSPICLKFreq+0x324>)
3401357e:	4293      	cmp	r3, r2
34013580:	f000 80dd 	beq.w	3401373e <RCCEx_GetSPICLKFreq+0x396>
34013584:	4a51      	ldr	r2, [pc, #324]	@ (340136cc <RCCEx_GetSPICLKFreq+0x324>)
34013586:	4293      	cmp	r3, r2
34013588:	f200 81c5 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401358c:	4a50      	ldr	r2, [pc, #320]	@ (340136d0 <RCCEx_GetSPICLKFreq+0x328>)
3401358e:	4293      	cmp	r3, r2
34013590:	f000 80d5 	beq.w	3401373e <RCCEx_GetSPICLKFreq+0x396>
34013594:	4a4e      	ldr	r2, [pc, #312]	@ (340136d0 <RCCEx_GetSPICLKFreq+0x328>)
34013596:	4293      	cmp	r3, r2
34013598:	f200 81bd 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401359c:	4a4d      	ldr	r2, [pc, #308]	@ (340136d4 <RCCEx_GetSPICLKFreq+0x32c>)
3401359e:	4293      	cmp	r3, r2
340135a0:	f000 80c8 	beq.w	34013734 <RCCEx_GetSPICLKFreq+0x38c>
340135a4:	4a4b      	ldr	r2, [pc, #300]	@ (340136d4 <RCCEx_GetSPICLKFreq+0x32c>)
340135a6:	4293      	cmp	r3, r2
340135a8:	f200 81b5 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340135ac:	4a4a      	ldr	r2, [pc, #296]	@ (340136d8 <RCCEx_GetSPICLKFreq+0x330>)
340135ae:	4293      	cmp	r3, r2
340135b0:	f000 80c0 	beq.w	34013734 <RCCEx_GetSPICLKFreq+0x38c>
340135b4:	4a48      	ldr	r2, [pc, #288]	@ (340136d8 <RCCEx_GetSPICLKFreq+0x330>)
340135b6:	4293      	cmp	r3, r2
340135b8:	f200 81ad 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340135bc:	4a47      	ldr	r2, [pc, #284]	@ (340136dc <RCCEx_GetSPICLKFreq+0x334>)
340135be:	4293      	cmp	r3, r2
340135c0:	f000 80b8 	beq.w	34013734 <RCCEx_GetSPICLKFreq+0x38c>
340135c4:	4a45      	ldr	r2, [pc, #276]	@ (340136dc <RCCEx_GetSPICLKFreq+0x334>)
340135c6:	4293      	cmp	r3, r2
340135c8:	f200 81a5 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340135cc:	4a44      	ldr	r2, [pc, #272]	@ (340136e0 <RCCEx_GetSPICLKFreq+0x338>)
340135ce:	4293      	cmp	r3, r2
340135d0:	f000 80b0 	beq.w	34013734 <RCCEx_GetSPICLKFreq+0x38c>
340135d4:	4a42      	ldr	r2, [pc, #264]	@ (340136e0 <RCCEx_GetSPICLKFreq+0x338>)
340135d6:	4293      	cmp	r3, r2
340135d8:	f200 819d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340135dc:	4a41      	ldr	r2, [pc, #260]	@ (340136e4 <RCCEx_GetSPICLKFreq+0x33c>)
340135de:	4293      	cmp	r3, r2
340135e0:	f000 80a8 	beq.w	34013734 <RCCEx_GetSPICLKFreq+0x38c>
340135e4:	4a3f      	ldr	r2, [pc, #252]	@ (340136e4 <RCCEx_GetSPICLKFreq+0x33c>)
340135e6:	4293      	cmp	r3, r2
340135e8:	f200 8195 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340135ec:	4a3e      	ldr	r2, [pc, #248]	@ (340136e8 <RCCEx_GetSPICLKFreq+0x340>)
340135ee:	4293      	cmp	r3, r2
340135f0:	f000 80a0 	beq.w	34013734 <RCCEx_GetSPICLKFreq+0x38c>
340135f4:	4a3c      	ldr	r2, [pc, #240]	@ (340136e8 <RCCEx_GetSPICLKFreq+0x340>)
340135f6:	4293      	cmp	r3, r2
340135f8:	f200 818d 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
340135fc:	4a3b      	ldr	r2, [pc, #236]	@ (340136ec <RCCEx_GetSPICLKFreq+0x344>)
340135fe:	4293      	cmp	r3, r2
34013600:	f000 808c 	beq.w	3401371c <RCCEx_GetSPICLKFreq+0x374>
34013604:	4a39      	ldr	r2, [pc, #228]	@ (340136ec <RCCEx_GetSPICLKFreq+0x344>)
34013606:	4293      	cmp	r3, r2
34013608:	f200 8185 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401360c:	4a38      	ldr	r2, [pc, #224]	@ (340136f0 <RCCEx_GetSPICLKFreq+0x348>)
3401360e:	4293      	cmp	r3, r2
34013610:	d078      	beq.n	34013704 <RCCEx_GetSPICLKFreq+0x35c>
34013612:	4a37      	ldr	r2, [pc, #220]	@ (340136f0 <RCCEx_GetSPICLKFreq+0x348>)
34013614:	4293      	cmp	r3, r2
34013616:	f200 817e 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
3401361a:	4a36      	ldr	r2, [pc, #216]	@ (340136f4 <RCCEx_GetSPICLKFreq+0x34c>)
3401361c:	4293      	cmp	r3, r2
3401361e:	d071      	beq.n	34013704 <RCCEx_GetSPICLKFreq+0x35c>
34013620:	4a34      	ldr	r2, [pc, #208]	@ (340136f4 <RCCEx_GetSPICLKFreq+0x34c>)
34013622:	4293      	cmp	r3, r2
34013624:	f200 8177 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
34013628:	4a33      	ldr	r2, [pc, #204]	@ (340136f8 <RCCEx_GetSPICLKFreq+0x350>)
3401362a:	4293      	cmp	r3, r2
3401362c:	d00a      	beq.n	34013644 <RCCEx_GetSPICLKFreq+0x29c>
3401362e:	4a32      	ldr	r2, [pc, #200]	@ (340136f8 <RCCEx_GetSPICLKFreq+0x350>)
34013630:	4293      	cmp	r3, r2
34013632:	f200 8170 	bhi.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
34013636:	4a31      	ldr	r2, [pc, #196]	@ (340136fc <RCCEx_GetSPICLKFreq+0x354>)
34013638:	4293      	cmp	r3, r2
3401363a:	d063      	beq.n	34013704 <RCCEx_GetSPICLKFreq+0x35c>
3401363c:	4a30      	ldr	r2, [pc, #192]	@ (34013700 <RCCEx_GetSPICLKFreq+0x358>)
3401363e:	4293      	cmp	r3, r2
34013640:	f040 8169 	bne.w	34013916 <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013644:	f7f4 fae0 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34013648:	4603      	mov	r3, r0
3401364a:	4618      	mov	r0, r3
3401364c:	f7fd fbd4 	bl	34010df8 <RCCEx_GetHCLKFreq>
34013650:	4603      	mov	r3, r0
34013652:	4618      	mov	r0, r3
34013654:	f7fd fbe1 	bl	34010e1a <RCCEx_GetPCLK1Freq>
34013658:	60f8      	str	r0, [r7, #12]
      break;
3401365a:	e169      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>
3401365c:	07061820 	.word	0x07061820
34013660:	07061420 	.word	0x07061420
34013664:	07061020 	.word	0x07061020
34013668:	07060c20 	.word	0x07060c20
3401366c:	07060820 	.word	0x07060820
34013670:	07060420 	.word	0x07060420
34013674:	07051820 	.word	0x07051820
34013678:	07051420 	.word	0x07051420
3401367c:	07051020 	.word	0x07051020
34013680:	07050c20 	.word	0x07050c20
34013684:	07050820 	.word	0x07050820
34013688:	07050420 	.word	0x07050420
3401368c:	07041820 	.word	0x07041820
34013690:	07041420 	.word	0x07041420
34013694:	07041020 	.word	0x07041020
34013698:	07040c20 	.word	0x07040c20
3401369c:	07040820 	.word	0x07040820
340136a0:	07040420 	.word	0x07040420
340136a4:	07031820 	.word	0x07031820
340136a8:	07031420 	.word	0x07031420
340136ac:	07031020 	.word	0x07031020
340136b0:	07030c20 	.word	0x07030c20
340136b4:	07030820 	.word	0x07030820
340136b8:	07030420 	.word	0x07030420
340136bc:	07021820 	.word	0x07021820
340136c0:	07021420 	.word	0x07021420
340136c4:	07021020 	.word	0x07021020
340136c8:	07020c20 	.word	0x07020c20
340136cc:	07020820 	.word	0x07020820
340136d0:	07020420 	.word	0x07020420
340136d4:	07011820 	.word	0x07011820
340136d8:	07011420 	.word	0x07011420
340136dc:	07011020 	.word	0x07011020
340136e0:	07010c20 	.word	0x07010c20
340136e4:	07010820 	.word	0x07010820
340136e8:	07010420 	.word	0x07010420
340136ec:	07001820 	.word	0x07001820
340136f0:	07001420 	.word	0x07001420
340136f4:	07001020 	.word	0x07001020
340136f8:	07000c20 	.word	0x07000c20
340136fc:	07000420 	.word	0x07000420
34013700:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013704:	f7f4 fa80 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34013708:	4603      	mov	r3, r0
3401370a:	4618      	mov	r0, r3
3401370c:	f7fd fb74 	bl	34010df8 <RCCEx_GetHCLKFreq>
34013710:	4603      	mov	r3, r0
34013712:	4618      	mov	r0, r3
34013714:	f7fd fb91 	bl	34010e3a <RCCEx_GetPCLK2Freq>
34013718:	60f8      	str	r0, [r7, #12]
      break;
3401371a:	e109      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401371c:	f7f4 fa74 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34013720:	4603      	mov	r3, r0
34013722:	4618      	mov	r0, r3
34013724:	f7fd fb68 	bl	34010df8 <RCCEx_GetHCLKFreq>
34013728:	4603      	mov	r3, r0
3401372a:	4618      	mov	r0, r3
3401372c:	f7fd fb96 	bl	34010e5c <RCCEx_GetPCLK4Freq>
34013730:	60f8      	str	r0, [r7, #12]
      break;
34013732:	e0fd      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013734:	2007      	movs	r0, #7
34013736:	f7fd fe4b 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
3401373a:	60f8      	str	r0, [r7, #12]
      break;
3401373c:	e0f8      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401373e:	f7f5 fe45 	bl	340093cc <LL_RCC_IC8_IsEnabled>
34013742:	4603      	mov	r3, r0
34013744:	2b00      	cmp	r3, #0
34013746:	f000 80e8 	beq.w	3401391a <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3401374a:	f7f5 fe61 	bl	34009410 <LL_RCC_IC8_GetDivider>
3401374e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34013750:	f7f5 fe50 	bl	340093f4 <LL_RCC_IC8_GetSource>
34013754:	4603      	mov	r3, r0
34013756:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401375a:	d029      	beq.n	340137b0 <RCCEx_GetSPICLKFreq+0x408>
3401375c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013760:	d82f      	bhi.n	340137c2 <RCCEx_GetSPICLKFreq+0x41a>
34013762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013766:	d01a      	beq.n	3401379e <RCCEx_GetSPICLKFreq+0x3f6>
34013768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401376c:	d829      	bhi.n	340137c2 <RCCEx_GetSPICLKFreq+0x41a>
3401376e:	2b00      	cmp	r3, #0
34013770:	d003      	beq.n	3401377a <RCCEx_GetSPICLKFreq+0x3d2>
34013772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013776:	d009      	beq.n	3401378c <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013778:	e023      	b.n	340137c2 <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401377a:	f7fd fa25 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
3401377e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013780:	68fa      	ldr	r2, [r7, #12]
34013782:	68bb      	ldr	r3, [r7, #8]
34013784:	fbb2 f3f3 	udiv	r3, r2, r3
34013788:	60fb      	str	r3, [r7, #12]
            break;
3401378a:	e01b      	b.n	340137c4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401378c:	f7fd fa62 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34013790:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013792:	68fa      	ldr	r2, [r7, #12]
34013794:	68bb      	ldr	r3, [r7, #8]
34013796:	fbb2 f3f3 	udiv	r3, r2, r3
3401379a:	60fb      	str	r3, [r7, #12]
            break;
3401379c:	e012      	b.n	340137c4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401379e:	f7fd fa9f 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340137a2:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340137a4:	68fa      	ldr	r2, [r7, #12]
340137a6:	68bb      	ldr	r3, [r7, #8]
340137a8:	fbb2 f3f3 	udiv	r3, r2, r3
340137ac:	60fb      	str	r3, [r7, #12]
            break;
340137ae:	e009      	b.n	340137c4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340137b0:	f7fd fadc 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340137b4:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340137b6:	68fa      	ldr	r2, [r7, #12]
340137b8:	68bb      	ldr	r3, [r7, #8]
340137ba:	fbb2 f3f3 	udiv	r3, r2, r3
340137be:	60fb      	str	r3, [r7, #12]
            break;
340137c0:	e000      	b.n	340137c4 <RCCEx_GetSPICLKFreq+0x41c>
            break;
340137c2:	bf00      	nop
        }
      }
      break;
340137c4:	e0a9      	b.n	3401391a <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
340137c6:	f7f5 fe41 	bl	3400944c <LL_RCC_IC9_IsEnabled>
340137ca:	4603      	mov	r3, r0
340137cc:	2b00      	cmp	r3, #0
340137ce:	f000 80a6 	beq.w	3401391e <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
340137d2:	f7f5 fe5d 	bl	34009490 <LL_RCC_IC9_GetDivider>
340137d6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
340137d8:	f7f5 fe4c 	bl	34009474 <LL_RCC_IC9_GetSource>
340137dc:	4603      	mov	r3, r0
340137de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340137e2:	d029      	beq.n	34013838 <RCCEx_GetSPICLKFreq+0x490>
340137e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340137e8:	d82f      	bhi.n	3401384a <RCCEx_GetSPICLKFreq+0x4a2>
340137ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340137ee:	d01a      	beq.n	34013826 <RCCEx_GetSPICLKFreq+0x47e>
340137f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340137f4:	d829      	bhi.n	3401384a <RCCEx_GetSPICLKFreq+0x4a2>
340137f6:	2b00      	cmp	r3, #0
340137f8:	d003      	beq.n	34013802 <RCCEx_GetSPICLKFreq+0x45a>
340137fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340137fe:	d009      	beq.n	34013814 <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013800:	e023      	b.n	3401384a <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013802:	f7fd f9e1 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34013806:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013808:	68fa      	ldr	r2, [r7, #12]
3401380a:	68bb      	ldr	r3, [r7, #8]
3401380c:	fbb2 f3f3 	udiv	r3, r2, r3
34013810:	60fb      	str	r3, [r7, #12]
            break;
34013812:	e01b      	b.n	3401384c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013814:	f7fd fa1e 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34013818:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401381a:	68fa      	ldr	r2, [r7, #12]
3401381c:	68bb      	ldr	r3, [r7, #8]
3401381e:	fbb2 f3f3 	udiv	r3, r2, r3
34013822:	60fb      	str	r3, [r7, #12]
            break;
34013824:	e012      	b.n	3401384c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013826:	f7fd fa5b 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
3401382a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401382c:	68fa      	ldr	r2, [r7, #12]
3401382e:	68bb      	ldr	r3, [r7, #8]
34013830:	fbb2 f3f3 	udiv	r3, r2, r3
34013834:	60fb      	str	r3, [r7, #12]
            break;
34013836:	e009      	b.n	3401384c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013838:	f7fd fa98 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
3401383c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401383e:	68fa      	ldr	r2, [r7, #12]
34013840:	68bb      	ldr	r3, [r7, #8]
34013842:	fbb2 f3f3 	udiv	r3, r2, r3
34013846:	60fb      	str	r3, [r7, #12]
            break;
34013848:	e000      	b.n	3401384c <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3401384a:	bf00      	nop
        }
      }
      break;
3401384c:	e067      	b.n	3401391e <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3401384e:	f7f5 fefd 	bl	3400964c <LL_RCC_IC14_IsEnabled>
34013852:	4603      	mov	r3, r0
34013854:	2b00      	cmp	r3, #0
34013856:	d064      	beq.n	34013922 <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
34013858:	f7f5 ff1a 	bl	34009690 <LL_RCC_IC14_GetDivider>
3401385c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3401385e:	f7f5 ff09 	bl	34009674 <LL_RCC_IC14_GetSource>
34013862:	4603      	mov	r3, r0
34013864:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013868:	d029      	beq.n	340138be <RCCEx_GetSPICLKFreq+0x516>
3401386a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401386e:	d82f      	bhi.n	340138d0 <RCCEx_GetSPICLKFreq+0x528>
34013870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013874:	d01a      	beq.n	340138ac <RCCEx_GetSPICLKFreq+0x504>
34013876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401387a:	d829      	bhi.n	340138d0 <RCCEx_GetSPICLKFreq+0x528>
3401387c:	2b00      	cmp	r3, #0
3401387e:	d003      	beq.n	34013888 <RCCEx_GetSPICLKFreq+0x4e0>
34013880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013884:	d009      	beq.n	3401389a <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013886:	e023      	b.n	340138d0 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013888:	f7fd f99e 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
3401388c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401388e:	68fa      	ldr	r2, [r7, #12]
34013890:	68bb      	ldr	r3, [r7, #8]
34013892:	fbb2 f3f3 	udiv	r3, r2, r3
34013896:	60fb      	str	r3, [r7, #12]
            break;
34013898:	e01b      	b.n	340138d2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401389a:	f7fd f9db 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
3401389e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340138a0:	68fa      	ldr	r2, [r7, #12]
340138a2:	68bb      	ldr	r3, [r7, #8]
340138a4:	fbb2 f3f3 	udiv	r3, r2, r3
340138a8:	60fb      	str	r3, [r7, #12]
            break;
340138aa:	e012      	b.n	340138d2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340138ac:	f7fd fa18 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340138b0:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340138b2:	68fa      	ldr	r2, [r7, #12]
340138b4:	68bb      	ldr	r3, [r7, #8]
340138b6:	fbb2 f3f3 	udiv	r3, r2, r3
340138ba:	60fb      	str	r3, [r7, #12]
            break;
340138bc:	e009      	b.n	340138d2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340138be:	f7fd fa55 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340138c2:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340138c4:	68fa      	ldr	r2, [r7, #12]
340138c6:	68bb      	ldr	r3, [r7, #8]
340138c8:	fbb2 f3f3 	udiv	r3, r2, r3
340138cc:	60fb      	str	r3, [r7, #12]
            break;
340138ce:	e000      	b.n	340138d2 <RCCEx_GetSPICLKFreq+0x52a>
            break;
340138d0:	bf00      	nop
        }
      }
      break;
340138d2:	e026      	b.n	34013922 <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340138d4:	f7f4 fd96 	bl	34008404 <LL_RCC_HSI_IsReady>
340138d8:	4603      	mov	r3, r0
340138da:	2b00      	cmp	r3, #0
340138dc:	d023      	beq.n	34013926 <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340138de:	f7f4 fda3 	bl	34008428 <LL_RCC_HSI_GetDivider>
340138e2:	4603      	mov	r3, r0
340138e4:	09db      	lsrs	r3, r3, #7
340138e6:	4a15      	ldr	r2, [pc, #84]	@ (3401393c <RCCEx_GetSPICLKFreq+0x594>)
340138e8:	fa22 f303 	lsr.w	r3, r2, r3
340138ec:	60fb      	str	r3, [r7, #12]
      }
      break;
340138ee:	e01a      	b.n	34013926 <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340138f0:	f7f4 fda8 	bl	34008444 <LL_RCC_MSI_IsReady>
340138f4:	4603      	mov	r3, r0
340138f6:	2b00      	cmp	r3, #0
340138f8:	d017      	beq.n	3401392a <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
340138fa:	4b11      	ldr	r3, [pc, #68]	@ (34013940 <RCCEx_GetSPICLKFreq+0x598>)
340138fc:	60fb      	str	r3, [r7, #12]
      }
      break;
340138fe:	e014      	b.n	3401392a <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
34013900:	4b10      	ldr	r3, [pc, #64]	@ (34013944 <RCCEx_GetSPICLKFreq+0x59c>)
34013902:	60fb      	str	r3, [r7, #12]
      break;
34013904:	e014      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34013906:	f7f4 fd6b 	bl	340083e0 <LL_RCC_HSE_IsReady>
3401390a:	4603      	mov	r3, r0
3401390c:	2b00      	cmp	r3, #0
3401390e:	d00e      	beq.n	3401392e <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
34013910:	4b0d      	ldr	r3, [pc, #52]	@ (34013948 <RCCEx_GetSPICLKFreq+0x5a0>)
34013912:	60fb      	str	r3, [r7, #12]
      }
      break;
34013914:	e00b      	b.n	3401392e <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
34013916:	bf00      	nop
34013918:	e00a      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401391a:	bf00      	nop
3401391c:	e008      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401391e:	bf00      	nop
34013920:	e006      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013922:	bf00      	nop
34013924:	e004      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013926:	bf00      	nop
34013928:	e002      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401392a:	bf00      	nop
3401392c:	e000      	b.n	34013930 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401392e:	bf00      	nop
  }

  return spi_frequency;
34013930:	68fb      	ldr	r3, [r7, #12]
}
34013932:	4618      	mov	r0, r3
34013934:	3710      	adds	r7, #16
34013936:	46bd      	mov	sp, r7
34013938:	bd80      	pop	{r7, pc}
3401393a:	bf00      	nop
3401393c:	03d09000 	.word	0x03d09000
34013940:	003d0900 	.word	0x003d0900
34013944:	00bb8000 	.word	0x00bb8000
34013948:	02dc6c00 	.word	0x02dc6c00

3401394c <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
3401394c:	b580      	push	{r7, lr}
3401394e:	b084      	sub	sp, #16
34013950:	af00      	add	r7, sp, #0
34013952:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34013954:	2300      	movs	r3, #0
34013956:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34013958:	6878      	ldr	r0, [r7, #4]
3401395a:	f7f5 f947 	bl	34008bec <LL_RCC_GetUARTClockSource>
3401395e:	4603      	mov	r3, r0
34013960:	4aa2      	ldr	r2, [pc, #648]	@ (34013bec <RCCEx_GetUARTCLKFreq+0x2a0>)
34013962:	4293      	cmp	r3, r2
34013964:	f000 81e8 	beq.w	34013d38 <RCCEx_GetUARTCLKFreq+0x3ec>
34013968:	4aa0      	ldr	r2, [pc, #640]	@ (34013bec <RCCEx_GetUARTCLKFreq+0x2a0>)
3401396a:	4293      	cmp	r3, r2
3401396c:	f200 8203 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013970:	4a9f      	ldr	r2, [pc, #636]	@ (34013bf0 <RCCEx_GetUARTCLKFreq+0x2a4>)
34013972:	4293      	cmp	r3, r2
34013974:	f000 81e0 	beq.w	34013d38 <RCCEx_GetUARTCLKFreq+0x3ec>
34013978:	4a9d      	ldr	r2, [pc, #628]	@ (34013bf0 <RCCEx_GetUARTCLKFreq+0x2a4>)
3401397a:	4293      	cmp	r3, r2
3401397c:	f200 81fb 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013980:	4a9c      	ldr	r2, [pc, #624]	@ (34013bf4 <RCCEx_GetUARTCLKFreq+0x2a8>)
34013982:	4293      	cmp	r3, r2
34013984:	f000 81d8 	beq.w	34013d38 <RCCEx_GetUARTCLKFreq+0x3ec>
34013988:	4a9a      	ldr	r2, [pc, #616]	@ (34013bf4 <RCCEx_GetUARTCLKFreq+0x2a8>)
3401398a:	4293      	cmp	r3, r2
3401398c:	f200 81f3 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013990:	4a99      	ldr	r2, [pc, #612]	@ (34013bf8 <RCCEx_GetUARTCLKFreq+0x2ac>)
34013992:	4293      	cmp	r3, r2
34013994:	f000 81d0 	beq.w	34013d38 <RCCEx_GetUARTCLKFreq+0x3ec>
34013998:	4a97      	ldr	r2, [pc, #604]	@ (34013bf8 <RCCEx_GetUARTCLKFreq+0x2ac>)
3401399a:	4293      	cmp	r3, r2
3401399c:	f200 81eb 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
340139a0:	4a96      	ldr	r2, [pc, #600]	@ (34013bfc <RCCEx_GetUARTCLKFreq+0x2b0>)
340139a2:	4293      	cmp	r3, r2
340139a4:	f000 81c8 	beq.w	34013d38 <RCCEx_GetUARTCLKFreq+0x3ec>
340139a8:	4a94      	ldr	r2, [pc, #592]	@ (34013bfc <RCCEx_GetUARTCLKFreq+0x2b0>)
340139aa:	4293      	cmp	r3, r2
340139ac:	f200 81e3 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
340139b0:	4a93      	ldr	r2, [pc, #588]	@ (34013c00 <RCCEx_GetUARTCLKFreq+0x2b4>)
340139b2:	4293      	cmp	r3, r2
340139b4:	f000 81ce 	beq.w	34013d54 <RCCEx_GetUARTCLKFreq+0x408>
340139b8:	4a91      	ldr	r2, [pc, #580]	@ (34013c00 <RCCEx_GetUARTCLKFreq+0x2b4>)
340139ba:	4293      	cmp	r3, r2
340139bc:	f200 81db 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
340139c0:	4a90      	ldr	r2, [pc, #576]	@ (34013c04 <RCCEx_GetUARTCLKFreq+0x2b8>)
340139c2:	4293      	cmp	r3, r2
340139c4:	f000 81c6 	beq.w	34013d54 <RCCEx_GetUARTCLKFreq+0x408>
340139c8:	4a8e      	ldr	r2, [pc, #568]	@ (34013c04 <RCCEx_GetUARTCLKFreq+0x2b8>)
340139ca:	4293      	cmp	r3, r2
340139cc:	f200 81d3 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
340139d0:	4a8d      	ldr	r2, [pc, #564]	@ (34013c08 <RCCEx_GetUARTCLKFreq+0x2bc>)
340139d2:	4293      	cmp	r3, r2
340139d4:	f000 81be 	beq.w	34013d54 <RCCEx_GetUARTCLKFreq+0x408>
340139d8:	4a8b      	ldr	r2, [pc, #556]	@ (34013c08 <RCCEx_GetUARTCLKFreq+0x2bc>)
340139da:	4293      	cmp	r3, r2
340139dc:	f200 81cb 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
340139e0:	4a8a      	ldr	r2, [pc, #552]	@ (34013c0c <RCCEx_GetUARTCLKFreq+0x2c0>)
340139e2:	4293      	cmp	r3, r2
340139e4:	f000 81b6 	beq.w	34013d54 <RCCEx_GetUARTCLKFreq+0x408>
340139e8:	4a88      	ldr	r2, [pc, #544]	@ (34013c0c <RCCEx_GetUARTCLKFreq+0x2c0>)
340139ea:	4293      	cmp	r3, r2
340139ec:	f200 81c3 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
340139f0:	4a87      	ldr	r2, [pc, #540]	@ (34013c10 <RCCEx_GetUARTCLKFreq+0x2c4>)
340139f2:	4293      	cmp	r3, r2
340139f4:	f000 81ae 	beq.w	34013d54 <RCCEx_GetUARTCLKFreq+0x408>
340139f8:	4a85      	ldr	r2, [pc, #532]	@ (34013c10 <RCCEx_GetUARTCLKFreq+0x2c4>)
340139fa:	4293      	cmp	r3, r2
340139fc:	f200 81bb 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013a00:	4a84      	ldr	r2, [pc, #528]	@ (34013c14 <RCCEx_GetUARTCLKFreq+0x2c8>)
34013a02:	4293      	cmp	r3, r2
34013a04:	f000 81ae 	beq.w	34013d64 <RCCEx_GetUARTCLKFreq+0x418>
34013a08:	4a82      	ldr	r2, [pc, #520]	@ (34013c14 <RCCEx_GetUARTCLKFreq+0x2c8>)
34013a0a:	4293      	cmp	r3, r2
34013a0c:	f200 81b3 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013a10:	4a81      	ldr	r2, [pc, #516]	@ (34013c18 <RCCEx_GetUARTCLKFreq+0x2cc>)
34013a12:	4293      	cmp	r3, r2
34013a14:	f000 81a6 	beq.w	34013d64 <RCCEx_GetUARTCLKFreq+0x418>
34013a18:	4a7f      	ldr	r2, [pc, #508]	@ (34013c18 <RCCEx_GetUARTCLKFreq+0x2cc>)
34013a1a:	4293      	cmp	r3, r2
34013a1c:	f200 81ab 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013a20:	4a7e      	ldr	r2, [pc, #504]	@ (34013c1c <RCCEx_GetUARTCLKFreq+0x2d0>)
34013a22:	4293      	cmp	r3, r2
34013a24:	f000 819e 	beq.w	34013d64 <RCCEx_GetUARTCLKFreq+0x418>
34013a28:	4a7c      	ldr	r2, [pc, #496]	@ (34013c1c <RCCEx_GetUARTCLKFreq+0x2d0>)
34013a2a:	4293      	cmp	r3, r2
34013a2c:	f200 81a3 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013a30:	4a7b      	ldr	r2, [pc, #492]	@ (34013c20 <RCCEx_GetUARTCLKFreq+0x2d4>)
34013a32:	4293      	cmp	r3, r2
34013a34:	f000 8196 	beq.w	34013d64 <RCCEx_GetUARTCLKFreq+0x418>
34013a38:	4a79      	ldr	r2, [pc, #484]	@ (34013c20 <RCCEx_GetUARTCLKFreq+0x2d4>)
34013a3a:	4293      	cmp	r3, r2
34013a3c:	f200 819b 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013a40:	4a78      	ldr	r2, [pc, #480]	@ (34013c24 <RCCEx_GetUARTCLKFreq+0x2d8>)
34013a42:	4293      	cmp	r3, r2
34013a44:	f000 818e 	beq.w	34013d64 <RCCEx_GetUARTCLKFreq+0x418>
34013a48:	4a76      	ldr	r2, [pc, #472]	@ (34013c24 <RCCEx_GetUARTCLKFreq+0x2d8>)
34013a4a:	4293      	cmp	r3, r2
34013a4c:	f200 8193 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013a50:	4a75      	ldr	r2, [pc, #468]	@ (34013c28 <RCCEx_GetUARTCLKFreq+0x2dc>)
34013a52:	4293      	cmp	r3, r2
34013a54:	f000 812d 	beq.w	34013cb2 <RCCEx_GetUARTCLKFreq+0x366>
34013a58:	4a73      	ldr	r2, [pc, #460]	@ (34013c28 <RCCEx_GetUARTCLKFreq+0x2dc>)
34013a5a:	4293      	cmp	r3, r2
34013a5c:	f200 818b 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013a60:	4a72      	ldr	r2, [pc, #456]	@ (34013c2c <RCCEx_GetUARTCLKFreq+0x2e0>)
34013a62:	4293      	cmp	r3, r2
34013a64:	f000 8125 	beq.w	34013cb2 <RCCEx_GetUARTCLKFreq+0x366>
34013a68:	4a70      	ldr	r2, [pc, #448]	@ (34013c2c <RCCEx_GetUARTCLKFreq+0x2e0>)
34013a6a:	4293      	cmp	r3, r2
34013a6c:	f200 8183 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013a70:	4a6f      	ldr	r2, [pc, #444]	@ (34013c30 <RCCEx_GetUARTCLKFreq+0x2e4>)
34013a72:	4293      	cmp	r3, r2
34013a74:	f000 811d 	beq.w	34013cb2 <RCCEx_GetUARTCLKFreq+0x366>
34013a78:	4a6d      	ldr	r2, [pc, #436]	@ (34013c30 <RCCEx_GetUARTCLKFreq+0x2e4>)
34013a7a:	4293      	cmp	r3, r2
34013a7c:	f200 817b 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013a80:	4a6c      	ldr	r2, [pc, #432]	@ (34013c34 <RCCEx_GetUARTCLKFreq+0x2e8>)
34013a82:	4293      	cmp	r3, r2
34013a84:	f000 8115 	beq.w	34013cb2 <RCCEx_GetUARTCLKFreq+0x366>
34013a88:	4a6a      	ldr	r2, [pc, #424]	@ (34013c34 <RCCEx_GetUARTCLKFreq+0x2e8>)
34013a8a:	4293      	cmp	r3, r2
34013a8c:	f200 8173 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013a90:	4a69      	ldr	r2, [pc, #420]	@ (34013c38 <RCCEx_GetUARTCLKFreq+0x2ec>)
34013a92:	4293      	cmp	r3, r2
34013a94:	f000 810d 	beq.w	34013cb2 <RCCEx_GetUARTCLKFreq+0x366>
34013a98:	4a67      	ldr	r2, [pc, #412]	@ (34013c38 <RCCEx_GetUARTCLKFreq+0x2ec>)
34013a9a:	4293      	cmp	r3, r2
34013a9c:	f200 816b 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013aa0:	4a66      	ldr	r2, [pc, #408]	@ (34013c3c <RCCEx_GetUARTCLKFreq+0x2f0>)
34013aa2:	4293      	cmp	r3, r2
34013aa4:	d07b      	beq.n	34013b9e <RCCEx_GetUARTCLKFreq+0x252>
34013aa6:	4a65      	ldr	r2, [pc, #404]	@ (34013c3c <RCCEx_GetUARTCLKFreq+0x2f0>)
34013aa8:	4293      	cmp	r3, r2
34013aaa:	f200 8164 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013aae:	4a64      	ldr	r2, [pc, #400]	@ (34013c40 <RCCEx_GetUARTCLKFreq+0x2f4>)
34013ab0:	4293      	cmp	r3, r2
34013ab2:	d074      	beq.n	34013b9e <RCCEx_GetUARTCLKFreq+0x252>
34013ab4:	4a62      	ldr	r2, [pc, #392]	@ (34013c40 <RCCEx_GetUARTCLKFreq+0x2f4>)
34013ab6:	4293      	cmp	r3, r2
34013ab8:	f200 815d 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013abc:	4a61      	ldr	r2, [pc, #388]	@ (34013c44 <RCCEx_GetUARTCLKFreq+0x2f8>)
34013abe:	4293      	cmp	r3, r2
34013ac0:	d06d      	beq.n	34013b9e <RCCEx_GetUARTCLKFreq+0x252>
34013ac2:	4a60      	ldr	r2, [pc, #384]	@ (34013c44 <RCCEx_GetUARTCLKFreq+0x2f8>)
34013ac4:	4293      	cmp	r3, r2
34013ac6:	f200 8156 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013aca:	4a5f      	ldr	r2, [pc, #380]	@ (34013c48 <RCCEx_GetUARTCLKFreq+0x2fc>)
34013acc:	4293      	cmp	r3, r2
34013ace:	d066      	beq.n	34013b9e <RCCEx_GetUARTCLKFreq+0x252>
34013ad0:	4a5d      	ldr	r2, [pc, #372]	@ (34013c48 <RCCEx_GetUARTCLKFreq+0x2fc>)
34013ad2:	4293      	cmp	r3, r2
34013ad4:	f200 814f 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013ad8:	4a5c      	ldr	r2, [pc, #368]	@ (34013c4c <RCCEx_GetUARTCLKFreq+0x300>)
34013ada:	4293      	cmp	r3, r2
34013adc:	d05f      	beq.n	34013b9e <RCCEx_GetUARTCLKFreq+0x252>
34013ade:	4a5b      	ldr	r2, [pc, #364]	@ (34013c4c <RCCEx_GetUARTCLKFreq+0x300>)
34013ae0:	4293      	cmp	r3, r2
34013ae2:	f200 8148 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013ae6:	4a5a      	ldr	r2, [pc, #360]	@ (34013c50 <RCCEx_GetUARTCLKFreq+0x304>)
34013ae8:	4293      	cmp	r3, r2
34013aea:	d053      	beq.n	34013b94 <RCCEx_GetUARTCLKFreq+0x248>
34013aec:	4a58      	ldr	r2, [pc, #352]	@ (34013c50 <RCCEx_GetUARTCLKFreq+0x304>)
34013aee:	4293      	cmp	r3, r2
34013af0:	f200 8141 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013af4:	4a57      	ldr	r2, [pc, #348]	@ (34013c54 <RCCEx_GetUARTCLKFreq+0x308>)
34013af6:	4293      	cmp	r3, r2
34013af8:	d04c      	beq.n	34013b94 <RCCEx_GetUARTCLKFreq+0x248>
34013afa:	4a56      	ldr	r2, [pc, #344]	@ (34013c54 <RCCEx_GetUARTCLKFreq+0x308>)
34013afc:	4293      	cmp	r3, r2
34013afe:	f200 813a 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013b02:	4a55      	ldr	r2, [pc, #340]	@ (34013c58 <RCCEx_GetUARTCLKFreq+0x30c>)
34013b04:	4293      	cmp	r3, r2
34013b06:	d045      	beq.n	34013b94 <RCCEx_GetUARTCLKFreq+0x248>
34013b08:	4a53      	ldr	r2, [pc, #332]	@ (34013c58 <RCCEx_GetUARTCLKFreq+0x30c>)
34013b0a:	4293      	cmp	r3, r2
34013b0c:	f200 8133 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013b10:	4a52      	ldr	r2, [pc, #328]	@ (34013c5c <RCCEx_GetUARTCLKFreq+0x310>)
34013b12:	4293      	cmp	r3, r2
34013b14:	d03e      	beq.n	34013b94 <RCCEx_GetUARTCLKFreq+0x248>
34013b16:	4a51      	ldr	r2, [pc, #324]	@ (34013c5c <RCCEx_GetUARTCLKFreq+0x310>)
34013b18:	4293      	cmp	r3, r2
34013b1a:	f200 812c 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013b1e:	4a50      	ldr	r2, [pc, #320]	@ (34013c60 <RCCEx_GetUARTCLKFreq+0x314>)
34013b20:	4293      	cmp	r3, r2
34013b22:	d037      	beq.n	34013b94 <RCCEx_GetUARTCLKFreq+0x248>
34013b24:	4a4e      	ldr	r2, [pc, #312]	@ (34013c60 <RCCEx_GetUARTCLKFreq+0x314>)
34013b26:	4293      	cmp	r3, r2
34013b28:	f200 8125 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013b2c:	4a4d      	ldr	r2, [pc, #308]	@ (34013c64 <RCCEx_GetUARTCLKFreq+0x318>)
34013b2e:	4293      	cmp	r3, r2
34013b30:	d018      	beq.n	34013b64 <RCCEx_GetUARTCLKFreq+0x218>
34013b32:	4a4c      	ldr	r2, [pc, #304]	@ (34013c64 <RCCEx_GetUARTCLKFreq+0x318>)
34013b34:	4293      	cmp	r3, r2
34013b36:	f200 811e 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013b3a:	4a4b      	ldr	r2, [pc, #300]	@ (34013c68 <RCCEx_GetUARTCLKFreq+0x31c>)
34013b3c:	4293      	cmp	r3, r2
34013b3e:	d011      	beq.n	34013b64 <RCCEx_GetUARTCLKFreq+0x218>
34013b40:	4a49      	ldr	r2, [pc, #292]	@ (34013c68 <RCCEx_GetUARTCLKFreq+0x31c>)
34013b42:	4293      	cmp	r3, r2
34013b44:	f200 8117 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013b48:	4a48      	ldr	r2, [pc, #288]	@ (34013c6c <RCCEx_GetUARTCLKFreq+0x320>)
34013b4a:	4293      	cmp	r3, r2
34013b4c:	d00a      	beq.n	34013b64 <RCCEx_GetUARTCLKFreq+0x218>
34013b4e:	4a47      	ldr	r2, [pc, #284]	@ (34013c6c <RCCEx_GetUARTCLKFreq+0x320>)
34013b50:	4293      	cmp	r3, r2
34013b52:	f200 8110 	bhi.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
34013b56:	4a46      	ldr	r2, [pc, #280]	@ (34013c70 <RCCEx_GetUARTCLKFreq+0x324>)
34013b58:	4293      	cmp	r3, r2
34013b5a:	d00f      	beq.n	34013b7c <RCCEx_GetUARTCLKFreq+0x230>
34013b5c:	4a45      	ldr	r2, [pc, #276]	@ (34013c74 <RCCEx_GetUARTCLKFreq+0x328>)
34013b5e:	4293      	cmp	r3, r2
34013b60:	f040 8109 	bne.w	34013d76 <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013b64:	f7f4 f850 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34013b68:	4603      	mov	r3, r0
34013b6a:	4618      	mov	r0, r3
34013b6c:	f7fd f944 	bl	34010df8 <RCCEx_GetHCLKFreq>
34013b70:	4603      	mov	r3, r0
34013b72:	4618      	mov	r0, r3
34013b74:	f7fd f951 	bl	34010e1a <RCCEx_GetPCLK1Freq>
34013b78:	60f8      	str	r0, [r7, #12]
      break;
34013b7a:	e107      	b.n	34013d8c <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013b7c:	f7f4 f844 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34013b80:	4603      	mov	r3, r0
34013b82:	4618      	mov	r0, r3
34013b84:	f7fd f938 	bl	34010df8 <RCCEx_GetHCLKFreq>
34013b88:	4603      	mov	r3, r0
34013b8a:	4618      	mov	r0, r3
34013b8c:	f7fd f955 	bl	34010e3a <RCCEx_GetPCLK2Freq>
34013b90:	60f8      	str	r0, [r7, #12]
      break;
34013b92:	e0fb      	b.n	34013d8c <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013b94:	2007      	movs	r0, #7
34013b96:	f7fd fc1b 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34013b9a:	60f8      	str	r0, [r7, #12]
      break;
34013b9c:	e0f6      	b.n	34013d8c <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
34013b9e:	f7f5 fc55 	bl	3400944c <LL_RCC_IC9_IsEnabled>
34013ba2:	4603      	mov	r3, r0
34013ba4:	2b00      	cmp	r3, #0
34013ba6:	f000 80e8 	beq.w	34013d7a <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
34013baa:	f7f5 fc71 	bl	34009490 <LL_RCC_IC9_GetDivider>
34013bae:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34013bb0:	f7f5 fc60 	bl	34009474 <LL_RCC_IC9_GetSource>
34013bb4:	4603      	mov	r3, r0
34013bb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013bba:	d06f      	beq.n	34013c9c <RCCEx_GetUARTCLKFreq+0x350>
34013bbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013bc0:	d875      	bhi.n	34013cae <RCCEx_GetUARTCLKFreq+0x362>
34013bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013bc6:	d060      	beq.n	34013c8a <RCCEx_GetUARTCLKFreq+0x33e>
34013bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013bcc:	d86f      	bhi.n	34013cae <RCCEx_GetUARTCLKFreq+0x362>
34013bce:	2b00      	cmp	r3, #0
34013bd0:	d003      	beq.n	34013bda <RCCEx_GetUARTCLKFreq+0x28e>
34013bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013bd6:	d04f      	beq.n	34013c78 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013bd8:	e069      	b.n	34013cae <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013bda:	f7fc fff5 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34013bde:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013be0:	68fa      	ldr	r2, [r7, #12]
34013be2:	68bb      	ldr	r3, [r7, #8]
34013be4:	fbb2 f3f3 	udiv	r3, r2, r3
34013be8:	60fb      	str	r3, [r7, #12]
            break;
34013bea:	e061      	b.n	34013cb0 <RCCEx_GetUARTCLKFreq+0x364>
34013bec:	07061c30 	.word	0x07061c30
34013bf0:	07061830 	.word	0x07061830
34013bf4:	07061030 	.word	0x07061030
34013bf8:	07060c30 	.word	0x07060c30
34013bfc:	07060034 	.word	0x07060034
34013c00:	07051c30 	.word	0x07051c30
34013c04:	07051830 	.word	0x07051830
34013c08:	07051030 	.word	0x07051030
34013c0c:	07050c30 	.word	0x07050c30
34013c10:	07050034 	.word	0x07050034
34013c14:	07041c30 	.word	0x07041c30
34013c18:	07041830 	.word	0x07041830
34013c1c:	07041030 	.word	0x07041030
34013c20:	07040c30 	.word	0x07040c30
34013c24:	07040034 	.word	0x07040034
34013c28:	07031c30 	.word	0x07031c30
34013c2c:	07031830 	.word	0x07031830
34013c30:	07031030 	.word	0x07031030
34013c34:	07030c30 	.word	0x07030c30
34013c38:	07030034 	.word	0x07030034
34013c3c:	07021c30 	.word	0x07021c30
34013c40:	07021830 	.word	0x07021830
34013c44:	07021030 	.word	0x07021030
34013c48:	07020c30 	.word	0x07020c30
34013c4c:	07020034 	.word	0x07020034
34013c50:	07011c30 	.word	0x07011c30
34013c54:	07011830 	.word	0x07011830
34013c58:	07011030 	.word	0x07011030
34013c5c:	07010c30 	.word	0x07010c30
34013c60:	07010034 	.word	0x07010034
34013c64:	07001c30 	.word	0x07001c30
34013c68:	07001830 	.word	0x07001830
34013c6c:	07001030 	.word	0x07001030
34013c70:	07000034 	.word	0x07000034
34013c74:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013c78:	f7fc ffec 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34013c7c:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013c7e:	68fa      	ldr	r2, [r7, #12]
34013c80:	68bb      	ldr	r3, [r7, #8]
34013c82:	fbb2 f3f3 	udiv	r3, r2, r3
34013c86:	60fb      	str	r3, [r7, #12]
            break;
34013c88:	e012      	b.n	34013cb0 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013c8a:	f7fd f829 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34013c8e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013c90:	68fa      	ldr	r2, [r7, #12]
34013c92:	68bb      	ldr	r3, [r7, #8]
34013c94:	fbb2 f3f3 	udiv	r3, r2, r3
34013c98:	60fb      	str	r3, [r7, #12]
            break;
34013c9a:	e009      	b.n	34013cb0 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013c9c:	f7fd f866 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34013ca0:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013ca2:	68fa      	ldr	r2, [r7, #12]
34013ca4:	68bb      	ldr	r3, [r7, #8]
34013ca6:	fbb2 f3f3 	udiv	r3, r2, r3
34013caa:	60fb      	str	r3, [r7, #12]
            break;
34013cac:	e000      	b.n	34013cb0 <RCCEx_GetUARTCLKFreq+0x364>
            break;
34013cae:	bf00      	nop
        }
      }
      break;
34013cb0:	e063      	b.n	34013d7a <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
34013cb2:	f7f5 fccb 	bl	3400964c <LL_RCC_IC14_IsEnabled>
34013cb6:	4603      	mov	r3, r0
34013cb8:	2b00      	cmp	r3, #0
34013cba:	d060      	beq.n	34013d7e <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
34013cbc:	f7f5 fce8 	bl	34009690 <LL_RCC_IC14_GetDivider>
34013cc0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34013cc2:	f7f5 fcd7 	bl	34009674 <LL_RCC_IC14_GetSource>
34013cc6:	4603      	mov	r3, r0
34013cc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013ccc:	d029      	beq.n	34013d22 <RCCEx_GetUARTCLKFreq+0x3d6>
34013cce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013cd2:	d82f      	bhi.n	34013d34 <RCCEx_GetUARTCLKFreq+0x3e8>
34013cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013cd8:	d01a      	beq.n	34013d10 <RCCEx_GetUARTCLKFreq+0x3c4>
34013cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013cde:	d829      	bhi.n	34013d34 <RCCEx_GetUARTCLKFreq+0x3e8>
34013ce0:	2b00      	cmp	r3, #0
34013ce2:	d003      	beq.n	34013cec <RCCEx_GetUARTCLKFreq+0x3a0>
34013ce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013ce8:	d009      	beq.n	34013cfe <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013cea:	e023      	b.n	34013d34 <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013cec:	f7fc ff6c 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34013cf0:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013cf2:	68fa      	ldr	r2, [r7, #12]
34013cf4:	68bb      	ldr	r3, [r7, #8]
34013cf6:	fbb2 f3f3 	udiv	r3, r2, r3
34013cfa:	60fb      	str	r3, [r7, #12]
            break;
34013cfc:	e01b      	b.n	34013d36 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013cfe:	f7fc ffa9 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34013d02:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013d04:	68fa      	ldr	r2, [r7, #12]
34013d06:	68bb      	ldr	r3, [r7, #8]
34013d08:	fbb2 f3f3 	udiv	r3, r2, r3
34013d0c:	60fb      	str	r3, [r7, #12]
            break;
34013d0e:	e012      	b.n	34013d36 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013d10:	f7fc ffe6 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34013d14:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013d16:	68fa      	ldr	r2, [r7, #12]
34013d18:	68bb      	ldr	r3, [r7, #8]
34013d1a:	fbb2 f3f3 	udiv	r3, r2, r3
34013d1e:	60fb      	str	r3, [r7, #12]
            break;
34013d20:	e009      	b.n	34013d36 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013d22:	f7fd f823 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34013d26:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013d28:	68fa      	ldr	r2, [r7, #12]
34013d2a:	68bb      	ldr	r3, [r7, #8]
34013d2c:	fbb2 f3f3 	udiv	r3, r2, r3
34013d30:	60fb      	str	r3, [r7, #12]
            break;
34013d32:	e000      	b.n	34013d36 <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
34013d34:	bf00      	nop
        }
      }
      break;
34013d36:	e022      	b.n	34013d7e <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34013d38:	f7f4 fb64 	bl	34008404 <LL_RCC_HSI_IsReady>
34013d3c:	4603      	mov	r3, r0
34013d3e:	2b00      	cmp	r3, #0
34013d40:	d01f      	beq.n	34013d82 <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34013d42:	f7f4 fb71 	bl	34008428 <LL_RCC_HSI_GetDivider>
34013d46:	4603      	mov	r3, r0
34013d48:	09db      	lsrs	r3, r3, #7
34013d4a:	4a13      	ldr	r2, [pc, #76]	@ (34013d98 <RCCEx_GetUARTCLKFreq+0x44c>)
34013d4c:	fa22 f303 	lsr.w	r3, r2, r3
34013d50:	60fb      	str	r3, [r7, #12]
      }
      break;
34013d52:	e016      	b.n	34013d82 <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34013d54:	f7f4 fb76 	bl	34008444 <LL_RCC_MSI_IsReady>
34013d58:	4603      	mov	r3, r0
34013d5a:	2b00      	cmp	r3, #0
34013d5c:	d013      	beq.n	34013d86 <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
34013d5e:	4b0f      	ldr	r3, [pc, #60]	@ (34013d9c <RCCEx_GetUARTCLKFreq+0x450>)
34013d60:	60fb      	str	r3, [r7, #12]
      }
      break;
34013d62:	e010      	b.n	34013d86 <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
34013d64:	f7f4 fb8e 	bl	34008484 <LL_RCC_LSE_IsReady>
34013d68:	4603      	mov	r3, r0
34013d6a:	2b00      	cmp	r3, #0
34013d6c:	d00d      	beq.n	34013d8a <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
34013d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34013d72:	60fb      	str	r3, [r7, #12]
      }
      break;
34013d74:	e009      	b.n	34013d8a <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
34013d76:	bf00      	nop
34013d78:	e008      	b.n	34013d8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013d7a:	bf00      	nop
34013d7c:	e006      	b.n	34013d8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013d7e:	bf00      	nop
34013d80:	e004      	b.n	34013d8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013d82:	bf00      	nop
34013d84:	e002      	b.n	34013d8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013d86:	bf00      	nop
34013d88:	e000      	b.n	34013d8c <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013d8a:	bf00      	nop
  }

  return uart_frequency;
34013d8c:	68fb      	ldr	r3, [r7, #12]
}
34013d8e:	4618      	mov	r0, r3
34013d90:	3710      	adds	r7, #16
34013d92:	46bd      	mov	sp, r7
34013d94:	bd80      	pop	{r7, pc}
34013d96:	bf00      	nop
34013d98:	03d09000 	.word	0x03d09000
34013d9c:	003d0900 	.word	0x003d0900

34013da0 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
34013da0:	b580      	push	{r7, lr}
34013da2:	b084      	sub	sp, #16
34013da4:	af00      	add	r7, sp, #0
34013da6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
34013da8:	2300      	movs	r3, #0
34013daa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34013dac:	6878      	ldr	r0, [r7, #4]
34013dae:	f7f4 ff11 	bl	34008bd4 <LL_RCC_GetUSARTClockSource>
34013db2:	4603      	mov	r3, r0
34013db4:	4aa2      	ldr	r2, [pc, #648]	@ (34014040 <RCCEx_GetUSARTCLKFreq+0x2a0>)
34013db6:	4293      	cmp	r3, r2
34013db8:	f000 81e8 	beq.w	3401418c <RCCEx_GetUSARTCLKFreq+0x3ec>
34013dbc:	4aa0      	ldr	r2, [pc, #640]	@ (34014040 <RCCEx_GetUSARTCLKFreq+0x2a0>)
34013dbe:	4293      	cmp	r3, r2
34013dc0:	f200 8203 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013dc4:	4a9f      	ldr	r2, [pc, #636]	@ (34014044 <RCCEx_GetUSARTCLKFreq+0x2a4>)
34013dc6:	4293      	cmp	r3, r2
34013dc8:	f000 81e0 	beq.w	3401418c <RCCEx_GetUSARTCLKFreq+0x3ec>
34013dcc:	4a9d      	ldr	r2, [pc, #628]	@ (34014044 <RCCEx_GetUSARTCLKFreq+0x2a4>)
34013dce:	4293      	cmp	r3, r2
34013dd0:	f200 81fb 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013dd4:	4a9c      	ldr	r2, [pc, #624]	@ (34014048 <RCCEx_GetUSARTCLKFreq+0x2a8>)
34013dd6:	4293      	cmp	r3, r2
34013dd8:	f000 81d8 	beq.w	3401418c <RCCEx_GetUSARTCLKFreq+0x3ec>
34013ddc:	4a9a      	ldr	r2, [pc, #616]	@ (34014048 <RCCEx_GetUSARTCLKFreq+0x2a8>)
34013dde:	4293      	cmp	r3, r2
34013de0:	f200 81f3 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013de4:	4a99      	ldr	r2, [pc, #612]	@ (3401404c <RCCEx_GetUSARTCLKFreq+0x2ac>)
34013de6:	4293      	cmp	r3, r2
34013de8:	f000 81d0 	beq.w	3401418c <RCCEx_GetUSARTCLKFreq+0x3ec>
34013dec:	4a97      	ldr	r2, [pc, #604]	@ (3401404c <RCCEx_GetUSARTCLKFreq+0x2ac>)
34013dee:	4293      	cmp	r3, r2
34013df0:	f200 81eb 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013df4:	4a96      	ldr	r2, [pc, #600]	@ (34014050 <RCCEx_GetUSARTCLKFreq+0x2b0>)
34013df6:	4293      	cmp	r3, r2
34013df8:	f000 81c8 	beq.w	3401418c <RCCEx_GetUSARTCLKFreq+0x3ec>
34013dfc:	4a94      	ldr	r2, [pc, #592]	@ (34014050 <RCCEx_GetUSARTCLKFreq+0x2b0>)
34013dfe:	4293      	cmp	r3, r2
34013e00:	f200 81e3 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013e04:	4a93      	ldr	r2, [pc, #588]	@ (34014054 <RCCEx_GetUSARTCLKFreq+0x2b4>)
34013e06:	4293      	cmp	r3, r2
34013e08:	f000 81ce 	beq.w	340141a8 <RCCEx_GetUSARTCLKFreq+0x408>
34013e0c:	4a91      	ldr	r2, [pc, #580]	@ (34014054 <RCCEx_GetUSARTCLKFreq+0x2b4>)
34013e0e:	4293      	cmp	r3, r2
34013e10:	f200 81db 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013e14:	4a90      	ldr	r2, [pc, #576]	@ (34014058 <RCCEx_GetUSARTCLKFreq+0x2b8>)
34013e16:	4293      	cmp	r3, r2
34013e18:	f000 81c6 	beq.w	340141a8 <RCCEx_GetUSARTCLKFreq+0x408>
34013e1c:	4a8e      	ldr	r2, [pc, #568]	@ (34014058 <RCCEx_GetUSARTCLKFreq+0x2b8>)
34013e1e:	4293      	cmp	r3, r2
34013e20:	f200 81d3 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013e24:	4a8d      	ldr	r2, [pc, #564]	@ (3401405c <RCCEx_GetUSARTCLKFreq+0x2bc>)
34013e26:	4293      	cmp	r3, r2
34013e28:	f000 81be 	beq.w	340141a8 <RCCEx_GetUSARTCLKFreq+0x408>
34013e2c:	4a8b      	ldr	r2, [pc, #556]	@ (3401405c <RCCEx_GetUSARTCLKFreq+0x2bc>)
34013e2e:	4293      	cmp	r3, r2
34013e30:	f200 81cb 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013e34:	4a8a      	ldr	r2, [pc, #552]	@ (34014060 <RCCEx_GetUSARTCLKFreq+0x2c0>)
34013e36:	4293      	cmp	r3, r2
34013e38:	f000 81b6 	beq.w	340141a8 <RCCEx_GetUSARTCLKFreq+0x408>
34013e3c:	4a88      	ldr	r2, [pc, #544]	@ (34014060 <RCCEx_GetUSARTCLKFreq+0x2c0>)
34013e3e:	4293      	cmp	r3, r2
34013e40:	f200 81c3 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013e44:	4a87      	ldr	r2, [pc, #540]	@ (34014064 <RCCEx_GetUSARTCLKFreq+0x2c4>)
34013e46:	4293      	cmp	r3, r2
34013e48:	f000 81ae 	beq.w	340141a8 <RCCEx_GetUSARTCLKFreq+0x408>
34013e4c:	4a85      	ldr	r2, [pc, #532]	@ (34014064 <RCCEx_GetUSARTCLKFreq+0x2c4>)
34013e4e:	4293      	cmp	r3, r2
34013e50:	f200 81bb 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013e54:	4a84      	ldr	r2, [pc, #528]	@ (34014068 <RCCEx_GetUSARTCLKFreq+0x2c8>)
34013e56:	4293      	cmp	r3, r2
34013e58:	f000 81ae 	beq.w	340141b8 <RCCEx_GetUSARTCLKFreq+0x418>
34013e5c:	4a82      	ldr	r2, [pc, #520]	@ (34014068 <RCCEx_GetUSARTCLKFreq+0x2c8>)
34013e5e:	4293      	cmp	r3, r2
34013e60:	f200 81b3 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013e64:	4a81      	ldr	r2, [pc, #516]	@ (3401406c <RCCEx_GetUSARTCLKFreq+0x2cc>)
34013e66:	4293      	cmp	r3, r2
34013e68:	f000 81a6 	beq.w	340141b8 <RCCEx_GetUSARTCLKFreq+0x418>
34013e6c:	4a7f      	ldr	r2, [pc, #508]	@ (3401406c <RCCEx_GetUSARTCLKFreq+0x2cc>)
34013e6e:	4293      	cmp	r3, r2
34013e70:	f200 81ab 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013e74:	4a7e      	ldr	r2, [pc, #504]	@ (34014070 <RCCEx_GetUSARTCLKFreq+0x2d0>)
34013e76:	4293      	cmp	r3, r2
34013e78:	f000 819e 	beq.w	340141b8 <RCCEx_GetUSARTCLKFreq+0x418>
34013e7c:	4a7c      	ldr	r2, [pc, #496]	@ (34014070 <RCCEx_GetUSARTCLKFreq+0x2d0>)
34013e7e:	4293      	cmp	r3, r2
34013e80:	f200 81a3 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013e84:	4a7b      	ldr	r2, [pc, #492]	@ (34014074 <RCCEx_GetUSARTCLKFreq+0x2d4>)
34013e86:	4293      	cmp	r3, r2
34013e88:	f000 8196 	beq.w	340141b8 <RCCEx_GetUSARTCLKFreq+0x418>
34013e8c:	4a79      	ldr	r2, [pc, #484]	@ (34014074 <RCCEx_GetUSARTCLKFreq+0x2d4>)
34013e8e:	4293      	cmp	r3, r2
34013e90:	f200 819b 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013e94:	4a78      	ldr	r2, [pc, #480]	@ (34014078 <RCCEx_GetUSARTCLKFreq+0x2d8>)
34013e96:	4293      	cmp	r3, r2
34013e98:	f000 818e 	beq.w	340141b8 <RCCEx_GetUSARTCLKFreq+0x418>
34013e9c:	4a76      	ldr	r2, [pc, #472]	@ (34014078 <RCCEx_GetUSARTCLKFreq+0x2d8>)
34013e9e:	4293      	cmp	r3, r2
34013ea0:	f200 8193 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013ea4:	4a75      	ldr	r2, [pc, #468]	@ (3401407c <RCCEx_GetUSARTCLKFreq+0x2dc>)
34013ea6:	4293      	cmp	r3, r2
34013ea8:	f000 812d 	beq.w	34014106 <RCCEx_GetUSARTCLKFreq+0x366>
34013eac:	4a73      	ldr	r2, [pc, #460]	@ (3401407c <RCCEx_GetUSARTCLKFreq+0x2dc>)
34013eae:	4293      	cmp	r3, r2
34013eb0:	f200 818b 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013eb4:	4a72      	ldr	r2, [pc, #456]	@ (34014080 <RCCEx_GetUSARTCLKFreq+0x2e0>)
34013eb6:	4293      	cmp	r3, r2
34013eb8:	f000 8125 	beq.w	34014106 <RCCEx_GetUSARTCLKFreq+0x366>
34013ebc:	4a70      	ldr	r2, [pc, #448]	@ (34014080 <RCCEx_GetUSARTCLKFreq+0x2e0>)
34013ebe:	4293      	cmp	r3, r2
34013ec0:	f200 8183 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013ec4:	4a6f      	ldr	r2, [pc, #444]	@ (34014084 <RCCEx_GetUSARTCLKFreq+0x2e4>)
34013ec6:	4293      	cmp	r3, r2
34013ec8:	f000 811d 	beq.w	34014106 <RCCEx_GetUSARTCLKFreq+0x366>
34013ecc:	4a6d      	ldr	r2, [pc, #436]	@ (34014084 <RCCEx_GetUSARTCLKFreq+0x2e4>)
34013ece:	4293      	cmp	r3, r2
34013ed0:	f200 817b 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013ed4:	4a6c      	ldr	r2, [pc, #432]	@ (34014088 <RCCEx_GetUSARTCLKFreq+0x2e8>)
34013ed6:	4293      	cmp	r3, r2
34013ed8:	f000 8115 	beq.w	34014106 <RCCEx_GetUSARTCLKFreq+0x366>
34013edc:	4a6a      	ldr	r2, [pc, #424]	@ (34014088 <RCCEx_GetUSARTCLKFreq+0x2e8>)
34013ede:	4293      	cmp	r3, r2
34013ee0:	f200 8173 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013ee4:	4a69      	ldr	r2, [pc, #420]	@ (3401408c <RCCEx_GetUSARTCLKFreq+0x2ec>)
34013ee6:	4293      	cmp	r3, r2
34013ee8:	f000 810d 	beq.w	34014106 <RCCEx_GetUSARTCLKFreq+0x366>
34013eec:	4a67      	ldr	r2, [pc, #412]	@ (3401408c <RCCEx_GetUSARTCLKFreq+0x2ec>)
34013eee:	4293      	cmp	r3, r2
34013ef0:	f200 816b 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013ef4:	4a66      	ldr	r2, [pc, #408]	@ (34014090 <RCCEx_GetUSARTCLKFreq+0x2f0>)
34013ef6:	4293      	cmp	r3, r2
34013ef8:	d07b      	beq.n	34013ff2 <RCCEx_GetUSARTCLKFreq+0x252>
34013efa:	4a65      	ldr	r2, [pc, #404]	@ (34014090 <RCCEx_GetUSARTCLKFreq+0x2f0>)
34013efc:	4293      	cmp	r3, r2
34013efe:	f200 8164 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f02:	4a64      	ldr	r2, [pc, #400]	@ (34014094 <RCCEx_GetUSARTCLKFreq+0x2f4>)
34013f04:	4293      	cmp	r3, r2
34013f06:	d074      	beq.n	34013ff2 <RCCEx_GetUSARTCLKFreq+0x252>
34013f08:	4a62      	ldr	r2, [pc, #392]	@ (34014094 <RCCEx_GetUSARTCLKFreq+0x2f4>)
34013f0a:	4293      	cmp	r3, r2
34013f0c:	f200 815d 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f10:	4a61      	ldr	r2, [pc, #388]	@ (34014098 <RCCEx_GetUSARTCLKFreq+0x2f8>)
34013f12:	4293      	cmp	r3, r2
34013f14:	d06d      	beq.n	34013ff2 <RCCEx_GetUSARTCLKFreq+0x252>
34013f16:	4a60      	ldr	r2, [pc, #384]	@ (34014098 <RCCEx_GetUSARTCLKFreq+0x2f8>)
34013f18:	4293      	cmp	r3, r2
34013f1a:	f200 8156 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f1e:	4a5f      	ldr	r2, [pc, #380]	@ (3401409c <RCCEx_GetUSARTCLKFreq+0x2fc>)
34013f20:	4293      	cmp	r3, r2
34013f22:	d066      	beq.n	34013ff2 <RCCEx_GetUSARTCLKFreq+0x252>
34013f24:	4a5d      	ldr	r2, [pc, #372]	@ (3401409c <RCCEx_GetUSARTCLKFreq+0x2fc>)
34013f26:	4293      	cmp	r3, r2
34013f28:	f200 814f 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f2c:	4a5c      	ldr	r2, [pc, #368]	@ (340140a0 <RCCEx_GetUSARTCLKFreq+0x300>)
34013f2e:	4293      	cmp	r3, r2
34013f30:	d05f      	beq.n	34013ff2 <RCCEx_GetUSARTCLKFreq+0x252>
34013f32:	4a5b      	ldr	r2, [pc, #364]	@ (340140a0 <RCCEx_GetUSARTCLKFreq+0x300>)
34013f34:	4293      	cmp	r3, r2
34013f36:	f200 8148 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f3a:	4a5a      	ldr	r2, [pc, #360]	@ (340140a4 <RCCEx_GetUSARTCLKFreq+0x304>)
34013f3c:	4293      	cmp	r3, r2
34013f3e:	d053      	beq.n	34013fe8 <RCCEx_GetUSARTCLKFreq+0x248>
34013f40:	4a58      	ldr	r2, [pc, #352]	@ (340140a4 <RCCEx_GetUSARTCLKFreq+0x304>)
34013f42:	4293      	cmp	r3, r2
34013f44:	f200 8141 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f48:	4a57      	ldr	r2, [pc, #348]	@ (340140a8 <RCCEx_GetUSARTCLKFreq+0x308>)
34013f4a:	4293      	cmp	r3, r2
34013f4c:	d04c      	beq.n	34013fe8 <RCCEx_GetUSARTCLKFreq+0x248>
34013f4e:	4a56      	ldr	r2, [pc, #344]	@ (340140a8 <RCCEx_GetUSARTCLKFreq+0x308>)
34013f50:	4293      	cmp	r3, r2
34013f52:	f200 813a 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f56:	4a55      	ldr	r2, [pc, #340]	@ (340140ac <RCCEx_GetUSARTCLKFreq+0x30c>)
34013f58:	4293      	cmp	r3, r2
34013f5a:	d045      	beq.n	34013fe8 <RCCEx_GetUSARTCLKFreq+0x248>
34013f5c:	4a53      	ldr	r2, [pc, #332]	@ (340140ac <RCCEx_GetUSARTCLKFreq+0x30c>)
34013f5e:	4293      	cmp	r3, r2
34013f60:	f200 8133 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f64:	4a52      	ldr	r2, [pc, #328]	@ (340140b0 <RCCEx_GetUSARTCLKFreq+0x310>)
34013f66:	4293      	cmp	r3, r2
34013f68:	d03e      	beq.n	34013fe8 <RCCEx_GetUSARTCLKFreq+0x248>
34013f6a:	4a51      	ldr	r2, [pc, #324]	@ (340140b0 <RCCEx_GetUSARTCLKFreq+0x310>)
34013f6c:	4293      	cmp	r3, r2
34013f6e:	f200 812c 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f72:	4a50      	ldr	r2, [pc, #320]	@ (340140b4 <RCCEx_GetUSARTCLKFreq+0x314>)
34013f74:	4293      	cmp	r3, r2
34013f76:	d037      	beq.n	34013fe8 <RCCEx_GetUSARTCLKFreq+0x248>
34013f78:	4a4e      	ldr	r2, [pc, #312]	@ (340140b4 <RCCEx_GetUSARTCLKFreq+0x314>)
34013f7a:	4293      	cmp	r3, r2
34013f7c:	f200 8125 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f80:	4a4d      	ldr	r2, [pc, #308]	@ (340140b8 <RCCEx_GetUSARTCLKFreq+0x318>)
34013f82:	4293      	cmp	r3, r2
34013f84:	d018      	beq.n	34013fb8 <RCCEx_GetUSARTCLKFreq+0x218>
34013f86:	4a4c      	ldr	r2, [pc, #304]	@ (340140b8 <RCCEx_GetUSARTCLKFreq+0x318>)
34013f88:	4293      	cmp	r3, r2
34013f8a:	f200 811e 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f8e:	4a4b      	ldr	r2, [pc, #300]	@ (340140bc <RCCEx_GetUSARTCLKFreq+0x31c>)
34013f90:	4293      	cmp	r3, r2
34013f92:	d01d      	beq.n	34013fd0 <RCCEx_GetUSARTCLKFreq+0x230>
34013f94:	4a49      	ldr	r2, [pc, #292]	@ (340140bc <RCCEx_GetUSARTCLKFreq+0x31c>)
34013f96:	4293      	cmp	r3, r2
34013f98:	f200 8117 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013f9c:	4a48      	ldr	r2, [pc, #288]	@ (340140c0 <RCCEx_GetUSARTCLKFreq+0x320>)
34013f9e:	4293      	cmp	r3, r2
34013fa0:	d00a      	beq.n	34013fb8 <RCCEx_GetUSARTCLKFreq+0x218>
34013fa2:	4a47      	ldr	r2, [pc, #284]	@ (340140c0 <RCCEx_GetUSARTCLKFreq+0x320>)
34013fa4:	4293      	cmp	r3, r2
34013fa6:	f200 8110 	bhi.w	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
34013faa:	4a46      	ldr	r2, [pc, #280]	@ (340140c4 <RCCEx_GetUSARTCLKFreq+0x324>)
34013fac:	4293      	cmp	r3, r2
34013fae:	d003      	beq.n	34013fb8 <RCCEx_GetUSARTCLKFreq+0x218>
34013fb0:	4a45      	ldr	r2, [pc, #276]	@ (340140c8 <RCCEx_GetUSARTCLKFreq+0x328>)
34013fb2:	4293      	cmp	r3, r2
34013fb4:	d00c      	beq.n	34013fd0 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
34013fb6:	e108      	b.n	340141ca <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013fb8:	f7f3 fe26 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34013fbc:	4603      	mov	r3, r0
34013fbe:	4618      	mov	r0, r3
34013fc0:	f7fc ff1a 	bl	34010df8 <RCCEx_GetHCLKFreq>
34013fc4:	4603      	mov	r3, r0
34013fc6:	4618      	mov	r0, r3
34013fc8:	f7fc ff37 	bl	34010e3a <RCCEx_GetPCLK2Freq>
34013fcc:	60f8      	str	r0, [r7, #12]
      break;
34013fce:	e107      	b.n	340141e0 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013fd0:	f7f3 fe1a 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
34013fd4:	4603      	mov	r3, r0
34013fd6:	4618      	mov	r0, r3
34013fd8:	f7fc ff0e 	bl	34010df8 <RCCEx_GetHCLKFreq>
34013fdc:	4603      	mov	r3, r0
34013fde:	4618      	mov	r0, r3
34013fe0:	f7fc ff1b 	bl	34010e1a <RCCEx_GetPCLK1Freq>
34013fe4:	60f8      	str	r0, [r7, #12]
      break;
34013fe6:	e0fb      	b.n	340141e0 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013fe8:	2007      	movs	r0, #7
34013fea:	f7fd f9f1 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34013fee:	60f8      	str	r0, [r7, #12]
      break;
34013ff0:	e0f6      	b.n	340141e0 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34013ff2:	f7f5 fa2b 	bl	3400944c <LL_RCC_IC9_IsEnabled>
34013ff6:	4603      	mov	r3, r0
34013ff8:	2b00      	cmp	r3, #0
34013ffa:	f000 80e8 	beq.w	340141ce <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
34013ffe:	f7f5 fa47 	bl	34009490 <LL_RCC_IC9_GetDivider>
34014002:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34014004:	f7f5 fa36 	bl	34009474 <LL_RCC_IC9_GetSource>
34014008:	4603      	mov	r3, r0
3401400a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401400e:	d06f      	beq.n	340140f0 <RCCEx_GetUSARTCLKFreq+0x350>
34014010:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014014:	d875      	bhi.n	34014102 <RCCEx_GetUSARTCLKFreq+0x362>
34014016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401401a:	d060      	beq.n	340140de <RCCEx_GetUSARTCLKFreq+0x33e>
3401401c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014020:	d86f      	bhi.n	34014102 <RCCEx_GetUSARTCLKFreq+0x362>
34014022:	2b00      	cmp	r3, #0
34014024:	d003      	beq.n	3401402e <RCCEx_GetUSARTCLKFreq+0x28e>
34014026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401402a:	d04f      	beq.n	340140cc <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
3401402c:	e069      	b.n	34014102 <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401402e:	f7fc fdcb 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34014032:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34014034:	68fa      	ldr	r2, [r7, #12]
34014036:	68bb      	ldr	r3, [r7, #8]
34014038:	fbb2 f3f3 	udiv	r3, r2, r3
3401403c:	60fb      	str	r3, [r7, #12]
            break;
3401403e:	e061      	b.n	34014104 <RCCEx_GetUSARTCLKFreq+0x364>
34014040:	07061430 	.word	0x07061430
34014044:	07060830 	.word	0x07060830
34014048:	07060434 	.word	0x07060434
3401404c:	07060430 	.word	0x07060430
34014050:	07060030 	.word	0x07060030
34014054:	07051430 	.word	0x07051430
34014058:	07050830 	.word	0x07050830
3401405c:	07050434 	.word	0x07050434
34014060:	07050430 	.word	0x07050430
34014064:	07050030 	.word	0x07050030
34014068:	07041430 	.word	0x07041430
3401406c:	07040830 	.word	0x07040830
34014070:	07040434 	.word	0x07040434
34014074:	07040430 	.word	0x07040430
34014078:	07040030 	.word	0x07040030
3401407c:	07031430 	.word	0x07031430
34014080:	07030830 	.word	0x07030830
34014084:	07030434 	.word	0x07030434
34014088:	07030430 	.word	0x07030430
3401408c:	07030030 	.word	0x07030030
34014090:	07021430 	.word	0x07021430
34014094:	07020830 	.word	0x07020830
34014098:	07020434 	.word	0x07020434
3401409c:	07020430 	.word	0x07020430
340140a0:	07020030 	.word	0x07020030
340140a4:	07011430 	.word	0x07011430
340140a8:	07010830 	.word	0x07010830
340140ac:	07010434 	.word	0x07010434
340140b0:	07010430 	.word	0x07010430
340140b4:	07010030 	.word	0x07010030
340140b8:	07001430 	.word	0x07001430
340140bc:	07000830 	.word	0x07000830
340140c0:	07000434 	.word	0x07000434
340140c4:	07000030 	.word	0x07000030
340140c8:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340140cc:	f7fc fdc2 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340140d0:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340140d2:	68fa      	ldr	r2, [r7, #12]
340140d4:	68bb      	ldr	r3, [r7, #8]
340140d6:	fbb2 f3f3 	udiv	r3, r2, r3
340140da:	60fb      	str	r3, [r7, #12]
            break;
340140dc:	e012      	b.n	34014104 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340140de:	f7fc fdff 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340140e2:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340140e4:	68fa      	ldr	r2, [r7, #12]
340140e6:	68bb      	ldr	r3, [r7, #8]
340140e8:	fbb2 f3f3 	udiv	r3, r2, r3
340140ec:	60fb      	str	r3, [r7, #12]
            break;
340140ee:	e009      	b.n	34014104 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340140f0:	f7fc fe3c 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340140f4:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340140f6:	68fa      	ldr	r2, [r7, #12]
340140f8:	68bb      	ldr	r3, [r7, #8]
340140fa:	fbb2 f3f3 	udiv	r3, r2, r3
340140fe:	60fb      	str	r3, [r7, #12]
            break;
34014100:	e000      	b.n	34014104 <RCCEx_GetUSARTCLKFreq+0x364>
            break;
34014102:	bf00      	nop
      break;
34014104:	e063      	b.n	340141ce <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34014106:	f7f5 faa1 	bl	3400964c <LL_RCC_IC14_IsEnabled>
3401410a:	4603      	mov	r3, r0
3401410c:	2b00      	cmp	r3, #0
3401410e:	d060      	beq.n	340141d2 <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
34014110:	f7f5 fabe 	bl	34009690 <LL_RCC_IC14_GetDivider>
34014114:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34014116:	f7f5 faad 	bl	34009674 <LL_RCC_IC14_GetSource>
3401411a:	4603      	mov	r3, r0
3401411c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014120:	d029      	beq.n	34014176 <RCCEx_GetUSARTCLKFreq+0x3d6>
34014122:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014126:	d82f      	bhi.n	34014188 <RCCEx_GetUSARTCLKFreq+0x3e8>
34014128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401412c:	d01a      	beq.n	34014164 <RCCEx_GetUSARTCLKFreq+0x3c4>
3401412e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014132:	d829      	bhi.n	34014188 <RCCEx_GetUSARTCLKFreq+0x3e8>
34014134:	2b00      	cmp	r3, #0
34014136:	d003      	beq.n	34014140 <RCCEx_GetUSARTCLKFreq+0x3a0>
34014138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401413c:	d009      	beq.n	34014152 <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
3401413e:	e023      	b.n	34014188 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014140:	f7fc fd42 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34014144:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34014146:	68fa      	ldr	r2, [r7, #12]
34014148:	68bb      	ldr	r3, [r7, #8]
3401414a:	fbb2 f3f3 	udiv	r3, r2, r3
3401414e:	60fb      	str	r3, [r7, #12]
            break;
34014150:	e01b      	b.n	3401418a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014152:	f7fc fd7f 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34014156:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34014158:	68fa      	ldr	r2, [r7, #12]
3401415a:	68bb      	ldr	r3, [r7, #8]
3401415c:	fbb2 f3f3 	udiv	r3, r2, r3
34014160:	60fb      	str	r3, [r7, #12]
            break;
34014162:	e012      	b.n	3401418a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014164:	f7fc fdbc 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34014168:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3401416a:	68fa      	ldr	r2, [r7, #12]
3401416c:	68bb      	ldr	r3, [r7, #8]
3401416e:	fbb2 f3f3 	udiv	r3, r2, r3
34014172:	60fb      	str	r3, [r7, #12]
            break;
34014174:	e009      	b.n	3401418a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014176:	f7fc fdf9 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
3401417a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3401417c:	68fa      	ldr	r2, [r7, #12]
3401417e:	68bb      	ldr	r3, [r7, #8]
34014180:	fbb2 f3f3 	udiv	r3, r2, r3
34014184:	60fb      	str	r3, [r7, #12]
            break;
34014186:	e000      	b.n	3401418a <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
34014188:	bf00      	nop
      break;
3401418a:	e022      	b.n	340141d2 <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
3401418c:	f7f4 f93a 	bl	34008404 <LL_RCC_HSI_IsReady>
34014190:	4603      	mov	r3, r0
34014192:	2b00      	cmp	r3, #0
34014194:	d01f      	beq.n	340141d6 <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34014196:	f7f4 f947 	bl	34008428 <LL_RCC_HSI_GetDivider>
3401419a:	4603      	mov	r3, r0
3401419c:	09db      	lsrs	r3, r3, #7
3401419e:	4a13      	ldr	r2, [pc, #76]	@ (340141ec <RCCEx_GetUSARTCLKFreq+0x44c>)
340141a0:	fa22 f303 	lsr.w	r3, r2, r3
340141a4:	60fb      	str	r3, [r7, #12]
      break;
340141a6:	e016      	b.n	340141d6 <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
340141a8:	f7f4 f94c 	bl	34008444 <LL_RCC_MSI_IsReady>
340141ac:	4603      	mov	r3, r0
340141ae:	2b00      	cmp	r3, #0
340141b0:	d013      	beq.n	340141da <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
340141b2:	4b0f      	ldr	r3, [pc, #60]	@ (340141f0 <RCCEx_GetUSARTCLKFreq+0x450>)
340141b4:	60fb      	str	r3, [r7, #12]
      break;
340141b6:	e010      	b.n	340141da <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
340141b8:	f7f4 f964 	bl	34008484 <LL_RCC_LSE_IsReady>
340141bc:	4603      	mov	r3, r0
340141be:	2b00      	cmp	r3, #0
340141c0:	d00d      	beq.n	340141de <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
340141c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340141c6:	60fb      	str	r3, [r7, #12]
      break;
340141c8:	e009      	b.n	340141de <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
340141ca:	bf00      	nop
340141cc:	e008      	b.n	340141e0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
340141ce:	bf00      	nop
340141d0:	e006      	b.n	340141e0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
340141d2:	bf00      	nop
340141d4:	e004      	b.n	340141e0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
340141d6:	bf00      	nop
340141d8:	e002      	b.n	340141e0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
340141da:	bf00      	nop
340141dc:	e000      	b.n	340141e0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
340141de:	bf00      	nop
  }

  return usart_frequency;
340141e0:	68fb      	ldr	r3, [r7, #12]
}
340141e2:	4618      	mov	r0, r3
340141e4:	3710      	adds	r7, #16
340141e6:	46bd      	mov	sp, r7
340141e8:	bd80      	pop	{r7, pc}
340141ea:	bf00      	nop
340141ec:	03d09000 	.word	0x03d09000
340141f0:	003d0900 	.word	0x003d0900

340141f4 <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
340141f4:	b580      	push	{r7, lr}
340141f6:	b084      	sub	sp, #16
340141f8:	af00      	add	r7, sp, #0
340141fa:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
340141fc:	2300      	movs	r3, #0
340141fe:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34014200:	6878      	ldr	r0, [r7, #4]
34014202:	f7f4 fcff 	bl	34008c04 <LL_RCC_GetUSBClockSource>
34014206:	4603      	mov	r3, r0
34014208:	4a4b      	ldr	r2, [pc, #300]	@ (34014338 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3401420a:	4293      	cmp	r3, r2
3401420c:	d035      	beq.n	3401427a <RCCEx_GetOTGPHYCLKFreq+0x86>
3401420e:	4a4a      	ldr	r2, [pc, #296]	@ (34014338 <RCCEx_GetOTGPHYCLKFreq+0x144>)
34014210:	4293      	cmp	r3, r2
34014212:	f200 8085 	bhi.w	34014320 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34014216:	4a49      	ldr	r2, [pc, #292]	@ (3401433c <RCCEx_GetOTGPHYCLKFreq+0x148>)
34014218:	4293      	cmp	r3, r2
3401421a:	d02e      	beq.n	3401427a <RCCEx_GetOTGPHYCLKFreq+0x86>
3401421c:	4a47      	ldr	r2, [pc, #284]	@ (3401433c <RCCEx_GetOTGPHYCLKFreq+0x148>)
3401421e:	4293      	cmp	r3, r2
34014220:	d87e      	bhi.n	34014320 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34014222:	4a47      	ldr	r2, [pc, #284]	@ (34014340 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
34014224:	4293      	cmp	r3, r2
34014226:	d038      	beq.n	3401429a <RCCEx_GetOTGPHYCLKFreq+0xa6>
34014228:	4a45      	ldr	r2, [pc, #276]	@ (34014340 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3401422a:	4293      	cmp	r3, r2
3401422c:	d878      	bhi.n	34014320 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401422e:	4a45      	ldr	r2, [pc, #276]	@ (34014344 <RCCEx_GetOTGPHYCLKFreq+0x150>)
34014230:	4293      	cmp	r3, r2
34014232:	d032      	beq.n	3401429a <RCCEx_GetOTGPHYCLKFreq+0xa6>
34014234:	4a43      	ldr	r2, [pc, #268]	@ (34014344 <RCCEx_GetOTGPHYCLKFreq+0x150>)
34014236:	4293      	cmp	r3, r2
34014238:	d872      	bhi.n	34014320 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401423a:	4a43      	ldr	r2, [pc, #268]	@ (34014348 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3401423c:	4293      	cmp	r3, r2
3401423e:	d00f      	beq.n	34014260 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34014240:	4a41      	ldr	r2, [pc, #260]	@ (34014348 <RCCEx_GetOTGPHYCLKFreq+0x154>)
34014242:	4293      	cmp	r3, r2
34014244:	d86c      	bhi.n	34014320 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34014246:	4a41      	ldr	r2, [pc, #260]	@ (3401434c <RCCEx_GetOTGPHYCLKFreq+0x158>)
34014248:	4293      	cmp	r3, r2
3401424a:	d009      	beq.n	34014260 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3401424c:	4a3f      	ldr	r2, [pc, #252]	@ (3401434c <RCCEx_GetOTGPHYCLKFreq+0x158>)
3401424e:	4293      	cmp	r3, r2
34014250:	d866      	bhi.n	34014320 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34014252:	4a3f      	ldr	r2, [pc, #252]	@ (34014350 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
34014254:	4293      	cmp	r3, r2
34014256:	d008      	beq.n	3401426a <RCCEx_GetOTGPHYCLKFreq+0x76>
34014258:	4a3e      	ldr	r2, [pc, #248]	@ (34014354 <RCCEx_GetOTGPHYCLKFreq+0x160>)
3401425a:	4293      	cmp	r3, r2
3401425c:	d005      	beq.n	3401426a <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
3401425e:	e05f      	b.n	34014320 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34014260:	2007      	movs	r0, #7
34014262:	f7fd f8b5 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
34014266:	60f8      	str	r0, [r7, #12]
      break;
34014268:	e061      	b.n	3401432e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
3401426a:	f7f4 f8b9 	bl	340083e0 <LL_RCC_HSE_IsReady>
3401426e:	4603      	mov	r3, r0
34014270:	2b00      	cmp	r3, #0
34014272:	d057      	beq.n	34014324 <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
34014274:	4b38      	ldr	r3, [pc, #224]	@ (34014358 <RCCEx_GetOTGPHYCLKFreq+0x164>)
34014276:	60fb      	str	r3, [r7, #12]
      break;
34014278:	e054      	b.n	34014324 <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
3401427a:	f7f4 f8b1 	bl	340083e0 <LL_RCC_HSE_IsReady>
3401427e:	4603      	mov	r3, r0
34014280:	2b00      	cmp	r3, #0
34014282:	d051      	beq.n	34014328 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34014284:	f7f4 f89a 	bl	340083bc <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34014288:	4603      	mov	r3, r0
3401428a:	2b00      	cmp	r3, #0
3401428c:	d102      	bne.n	34014294 <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
3401428e:	4b33      	ldr	r3, [pc, #204]	@ (3401435c <RCCEx_GetOTGPHYCLKFreq+0x168>)
34014290:	60fb      	str	r3, [r7, #12]
      break;
34014292:	e049      	b.n	34014328 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
34014294:	4b30      	ldr	r3, [pc, #192]	@ (34014358 <RCCEx_GetOTGPHYCLKFreq+0x164>)
34014296:	60fb      	str	r3, [r7, #12]
      break;
34014298:	e046      	b.n	34014328 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401429a:	f7f5 fa17 	bl	340096cc <LL_RCC_IC15_IsEnabled>
3401429e:	4603      	mov	r3, r0
340142a0:	2b00      	cmp	r3, #0
340142a2:	d043      	beq.n	3401432c <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
340142a4:	f7f5 fa34 	bl	34009710 <LL_RCC_IC15_GetDivider>
340142a8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
340142aa:	f7f5 fa23 	bl	340096f4 <LL_RCC_IC15_GetSource>
340142ae:	4603      	mov	r3, r0
340142b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340142b4:	d029      	beq.n	3401430a <RCCEx_GetOTGPHYCLKFreq+0x116>
340142b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340142ba:	d82f      	bhi.n	3401431c <RCCEx_GetOTGPHYCLKFreq+0x128>
340142bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340142c0:	d01a      	beq.n	340142f8 <RCCEx_GetOTGPHYCLKFreq+0x104>
340142c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340142c6:	d829      	bhi.n	3401431c <RCCEx_GetOTGPHYCLKFreq+0x128>
340142c8:	2b00      	cmp	r3, #0
340142ca:	d003      	beq.n	340142d4 <RCCEx_GetOTGPHYCLKFreq+0xe0>
340142cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340142d0:	d009      	beq.n	340142e6 <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
340142d2:	e023      	b.n	3401431c <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340142d4:	f7fc fc78 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
340142d8:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
340142da:	68fa      	ldr	r2, [r7, #12]
340142dc:	68bb      	ldr	r3, [r7, #8]
340142de:	fbb2 f3f3 	udiv	r3, r2, r3
340142e2:	60fb      	str	r3, [r7, #12]
            break;
340142e4:	e01b      	b.n	3401431e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340142e6:	f7fc fcb5 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340142ea:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
340142ec:	68fa      	ldr	r2, [r7, #12]
340142ee:	68bb      	ldr	r3, [r7, #8]
340142f0:	fbb2 f3f3 	udiv	r3, r2, r3
340142f4:	60fb      	str	r3, [r7, #12]
            break;
340142f6:	e012      	b.n	3401431e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340142f8:	f7fc fcf2 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340142fc:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
340142fe:	68fa      	ldr	r2, [r7, #12]
34014300:	68bb      	ldr	r3, [r7, #8]
34014302:	fbb2 f3f3 	udiv	r3, r2, r3
34014306:	60fb      	str	r3, [r7, #12]
            break;
34014308:	e009      	b.n	3401431e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401430a:	f7fc fd2f 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
3401430e:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34014310:	68fa      	ldr	r2, [r7, #12]
34014312:	68bb      	ldr	r3, [r7, #8]
34014314:	fbb2 f3f3 	udiv	r3, r2, r3
34014318:	60fb      	str	r3, [r7, #12]
            break;
3401431a:	e000      	b.n	3401431e <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
3401431c:	bf00      	nop
      break;
3401431e:	e005      	b.n	3401432c <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
34014320:	bf00      	nop
34014322:	e004      	b.n	3401432e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34014324:	bf00      	nop
34014326:	e002      	b.n	3401432e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34014328:	bf00      	nop
3401432a:	e000      	b.n	3401432e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3401432c:	bf00      	nop
  }

  return usb_frequency;
3401432e:	68fb      	ldr	r3, [r7, #12]
}
34014330:	4618      	mov	r0, r3
34014332:	3710      	adds	r7, #16
34014334:	46bd      	mov	sp, r7
34014336:	bd80      	pop	{r7, pc}
34014338:	03031414 	.word	0x03031414
3401433c:	03030c14 	.word	0x03030c14
34014340:	03021414 	.word	0x03021414
34014344:	03020c14 	.word	0x03020c14
34014348:	03011414 	.word	0x03011414
3401434c:	03010c14 	.word	0x03010c14
34014350:	03000c14 	.word	0x03000c14
34014354:	03001414 	.word	0x03001414
34014358:	016e3600 	.word	0x016e3600
3401435c:	02dc6c00 	.word	0x02dc6c00

34014360 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
34014360:	b580      	push	{r7, lr}
34014362:	b084      	sub	sp, #16
34014364:	af00      	add	r7, sp, #0
34014366:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34014368:	2300      	movs	r3, #0
3401436a:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3401436c:	6878      	ldr	r0, [r7, #4]
3401436e:	f7f4 fc49 	bl	34008c04 <LL_RCC_GetUSBClockSource>
34014372:	4603      	mov	r3, r0
34014374:	4a1a      	ldr	r2, [pc, #104]	@ (340143e0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
34014376:	4293      	cmp	r3, r2
34014378:	d00f      	beq.n	3401439a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3401437a:	4a19      	ldr	r2, [pc, #100]	@ (340143e0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3401437c:	4293      	cmp	r3, r2
3401437e:	d826      	bhi.n	340143ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
34014380:	4a18      	ldr	r2, [pc, #96]	@ (340143e4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34014382:	4293      	cmp	r3, r2
34014384:	d009      	beq.n	3401439a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
34014386:	4a17      	ldr	r2, [pc, #92]	@ (340143e4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34014388:	4293      	cmp	r3, r2
3401438a:	d820      	bhi.n	340143ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3401438c:	4a16      	ldr	r2, [pc, #88]	@ (340143e8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
3401438e:	4293      	cmp	r3, r2
34014390:	d013      	beq.n	340143ba <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
34014392:	4a16      	ldr	r2, [pc, #88]	@ (340143ec <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
34014394:	4293      	cmp	r3, r2
34014396:	d015      	beq.n	340143c4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
34014398:	e019      	b.n	340143ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
3401439a:	f7f4 f821 	bl	340083e0 <LL_RCC_HSE_IsReady>
3401439e:	4603      	mov	r3, r0
340143a0:	2b00      	cmp	r3, #0
340143a2:	d016      	beq.n	340143d2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
340143a4:	f7f4 f80a 	bl	340083bc <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
340143a8:	4603      	mov	r3, r0
340143aa:	2b00      	cmp	r3, #0
340143ac:	d102      	bne.n	340143b4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
340143ae:	4b10      	ldr	r3, [pc, #64]	@ (340143f0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
340143b0:	60fb      	str	r3, [r7, #12]
      break;
340143b2:	e00e      	b.n	340143d2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
340143b4:	4b0f      	ldr	r3, [pc, #60]	@ (340143f4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
340143b6:	60fb      	str	r3, [r7, #12]
      break;
340143b8:	e00b      	b.n	340143d2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
340143ba:	480f      	ldr	r0, [pc, #60]	@ (340143f8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
340143bc:	f7ff ff1a 	bl	340141f4 <RCCEx_GetOTGPHYCLKFreq>
340143c0:	60f8      	str	r0, [r7, #12]
      break;
340143c2:	e007      	b.n	340143d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340143c4:	480d      	ldr	r0, [pc, #52]	@ (340143fc <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
340143c6:	f7ff ff15 	bl	340141f4 <RCCEx_GetOTGPHYCLKFreq>
340143ca:	60f8      	str	r0, [r7, #12]
      break;
340143cc:	e002      	b.n	340143d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
340143ce:	bf00      	nop
340143d0:	e000      	b.n	340143d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
340143d2:	bf00      	nop
  }

  return usb_frequency;
340143d4:	68fb      	ldr	r3, [r7, #12]
}
340143d6:	4618      	mov	r0, r3
340143d8:	3710      	adds	r7, #16
340143da:	46bd      	mov	sp, r7
340143dc:	bd80      	pop	{r7, pc}
340143de:	bf00      	nop
340143e0:	01011814 	.word	0x01011814
340143e4:	01011014 	.word	0x01011014
340143e8:	01001014 	.word	0x01001014
340143ec:	01001814 	.word	0x01001814
340143f0:	02dc6c00 	.word	0x02dc6c00
340143f4:	016e3600 	.word	0x016e3600
340143f8:	03000c14 	.word	0x03000c14
340143fc:	03001414 	.word	0x03001414

34014400 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
34014400:	b580      	push	{r7, lr}
34014402:	b084      	sub	sp, #16
34014404:	af00      	add	r7, sp, #0
34014406:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34014408:	2300      	movs	r3, #0
3401440a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3401440c:	6878      	ldr	r0, [r7, #4]
3401440e:	f7f4 fc05 	bl	34008c1c <LL_RCC_GetXSPIClockSource>
34014412:	4603      	mov	r3, r0
34014414:	4a76      	ldr	r2, [pc, #472]	@ (340145f0 <RCCEx_GetXSPICLKFreq+0x1f0>)
34014416:	4293      	cmp	r3, r2
34014418:	f000 809d 	beq.w	34014556 <RCCEx_GetXSPICLKFreq+0x156>
3401441c:	4a74      	ldr	r2, [pc, #464]	@ (340145f0 <RCCEx_GetXSPICLKFreq+0x1f0>)
3401441e:	4293      	cmp	r3, r2
34014420:	f200 80dc 	bhi.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
34014424:	4a73      	ldr	r2, [pc, #460]	@ (340145f4 <RCCEx_GetXSPICLKFreq+0x1f4>)
34014426:	4293      	cmp	r3, r2
34014428:	f000 8095 	beq.w	34014556 <RCCEx_GetXSPICLKFreq+0x156>
3401442c:	4a71      	ldr	r2, [pc, #452]	@ (340145f4 <RCCEx_GetXSPICLKFreq+0x1f4>)
3401442e:	4293      	cmp	r3, r2
34014430:	f200 80d4 	bhi.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
34014434:	4a70      	ldr	r2, [pc, #448]	@ (340145f8 <RCCEx_GetXSPICLKFreq+0x1f8>)
34014436:	4293      	cmp	r3, r2
34014438:	f000 808d 	beq.w	34014556 <RCCEx_GetXSPICLKFreq+0x156>
3401443c:	4a6e      	ldr	r2, [pc, #440]	@ (340145f8 <RCCEx_GetXSPICLKFreq+0x1f8>)
3401443e:	4293      	cmp	r3, r2
34014440:	f200 80cc 	bhi.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
34014444:	4a6d      	ldr	r2, [pc, #436]	@ (340145fc <RCCEx_GetXSPICLKFreq+0x1fc>)
34014446:	4293      	cmp	r3, r2
34014448:	d041      	beq.n	340144ce <RCCEx_GetXSPICLKFreq+0xce>
3401444a:	4a6c      	ldr	r2, [pc, #432]	@ (340145fc <RCCEx_GetXSPICLKFreq+0x1fc>)
3401444c:	4293      	cmp	r3, r2
3401444e:	f200 80c5 	bhi.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
34014452:	4a6b      	ldr	r2, [pc, #428]	@ (34014600 <RCCEx_GetXSPICLKFreq+0x200>)
34014454:	4293      	cmp	r3, r2
34014456:	d03a      	beq.n	340144ce <RCCEx_GetXSPICLKFreq+0xce>
34014458:	4a69      	ldr	r2, [pc, #420]	@ (34014600 <RCCEx_GetXSPICLKFreq+0x200>)
3401445a:	4293      	cmp	r3, r2
3401445c:	f200 80be 	bhi.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
34014460:	4a68      	ldr	r2, [pc, #416]	@ (34014604 <RCCEx_GetXSPICLKFreq+0x204>)
34014462:	4293      	cmp	r3, r2
34014464:	d033      	beq.n	340144ce <RCCEx_GetXSPICLKFreq+0xce>
34014466:	4a67      	ldr	r2, [pc, #412]	@ (34014604 <RCCEx_GetXSPICLKFreq+0x204>)
34014468:	4293      	cmp	r3, r2
3401446a:	f200 80b7 	bhi.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
3401446e:	4a66      	ldr	r2, [pc, #408]	@ (34014608 <RCCEx_GetXSPICLKFreq+0x208>)
34014470:	4293      	cmp	r3, r2
34014472:	d027      	beq.n	340144c4 <RCCEx_GetXSPICLKFreq+0xc4>
34014474:	4a64      	ldr	r2, [pc, #400]	@ (34014608 <RCCEx_GetXSPICLKFreq+0x208>)
34014476:	4293      	cmp	r3, r2
34014478:	f200 80b0 	bhi.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
3401447c:	4a63      	ldr	r2, [pc, #396]	@ (3401460c <RCCEx_GetXSPICLKFreq+0x20c>)
3401447e:	4293      	cmp	r3, r2
34014480:	d020      	beq.n	340144c4 <RCCEx_GetXSPICLKFreq+0xc4>
34014482:	4a62      	ldr	r2, [pc, #392]	@ (3401460c <RCCEx_GetXSPICLKFreq+0x20c>)
34014484:	4293      	cmp	r3, r2
34014486:	f200 80a9 	bhi.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
3401448a:	4a61      	ldr	r2, [pc, #388]	@ (34014610 <RCCEx_GetXSPICLKFreq+0x210>)
3401448c:	4293      	cmp	r3, r2
3401448e:	d019      	beq.n	340144c4 <RCCEx_GetXSPICLKFreq+0xc4>
34014490:	4a5f      	ldr	r2, [pc, #380]	@ (34014610 <RCCEx_GetXSPICLKFreq+0x210>)
34014492:	4293      	cmp	r3, r2
34014494:	f200 80a2 	bhi.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
34014498:	4a5e      	ldr	r2, [pc, #376]	@ (34014614 <RCCEx_GetXSPICLKFreq+0x214>)
3401449a:	4293      	cmp	r3, r2
3401449c:	d00a      	beq.n	340144b4 <RCCEx_GetXSPICLKFreq+0xb4>
3401449e:	4a5d      	ldr	r2, [pc, #372]	@ (34014614 <RCCEx_GetXSPICLKFreq+0x214>)
340144a0:	4293      	cmp	r3, r2
340144a2:	f200 809b 	bhi.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
340144a6:	4a5c      	ldr	r2, [pc, #368]	@ (34014618 <RCCEx_GetXSPICLKFreq+0x218>)
340144a8:	4293      	cmp	r3, r2
340144aa:	d003      	beq.n	340144b4 <RCCEx_GetXSPICLKFreq+0xb4>
340144ac:	4a5b      	ldr	r2, [pc, #364]	@ (3401461c <RCCEx_GetXSPICLKFreq+0x21c>)
340144ae:	4293      	cmp	r3, r2
340144b0:	f040 8094 	bne.w	340145dc <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340144b4:	f7f3 fba8 	bl	34007c08 <HAL_RCC_GetSysClockFreq>
340144b8:	4603      	mov	r3, r0
340144ba:	4618      	mov	r0, r3
340144bc:	f7fc fc9c 	bl	34010df8 <RCCEx_GetHCLKFreq>
340144c0:	60f8      	str	r0, [r7, #12]
      break;
340144c2:	e090      	b.n	340145e6 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340144c4:	2007      	movs	r0, #7
340144c6:	f7fc ff83 	bl	340113d0 <RCCEx_GetCLKPCLKFreq>
340144ca:	60f8      	str	r0, [r7, #12]
      break;
340144cc:	e08b      	b.n	340145e6 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
340144ce:	f7f4 fe7d 	bl	340091cc <LL_RCC_IC3_IsEnabled>
340144d2:	4603      	mov	r3, r0
340144d4:	2b00      	cmp	r3, #0
340144d6:	f000 8083 	beq.w	340145e0 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
340144da:	f7f4 fe99 	bl	34009210 <LL_RCC_IC3_GetDivider>
340144de:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
340144e0:	f7f4 fe88 	bl	340091f4 <LL_RCC_IC3_GetSource>
340144e4:	4603      	mov	r3, r0
340144e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340144ea:	d029      	beq.n	34014540 <RCCEx_GetXSPICLKFreq+0x140>
340144ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340144f0:	d82f      	bhi.n	34014552 <RCCEx_GetXSPICLKFreq+0x152>
340144f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340144f6:	d01a      	beq.n	3401452e <RCCEx_GetXSPICLKFreq+0x12e>
340144f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340144fc:	d829      	bhi.n	34014552 <RCCEx_GetXSPICLKFreq+0x152>
340144fe:	2b00      	cmp	r3, #0
34014500:	d003      	beq.n	3401450a <RCCEx_GetXSPICLKFreq+0x10a>
34014502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014506:	d009      	beq.n	3401451c <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34014508:	e023      	b.n	34014552 <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401450a:	f7fc fb5d 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
3401450e:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014510:	68fa      	ldr	r2, [r7, #12]
34014512:	68bb      	ldr	r3, [r7, #8]
34014514:	fbb2 f3f3 	udiv	r3, r2, r3
34014518:	60fb      	str	r3, [r7, #12]
            break;
3401451a:	e01b      	b.n	34014554 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401451c:	f7fc fb9a 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
34014520:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014522:	68fa      	ldr	r2, [r7, #12]
34014524:	68bb      	ldr	r3, [r7, #8]
34014526:	fbb2 f3f3 	udiv	r3, r2, r3
3401452a:	60fb      	str	r3, [r7, #12]
            break;
3401452c:	e012      	b.n	34014554 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401452e:	f7fc fbd7 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
34014532:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014534:	68fa      	ldr	r2, [r7, #12]
34014536:	68bb      	ldr	r3, [r7, #8]
34014538:	fbb2 f3f3 	udiv	r3, r2, r3
3401453c:	60fb      	str	r3, [r7, #12]
            break;
3401453e:	e009      	b.n	34014554 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014540:	f7fc fc14 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
34014544:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014546:	68fa      	ldr	r2, [r7, #12]
34014548:	68bb      	ldr	r3, [r7, #8]
3401454a:	fbb2 f3f3 	udiv	r3, r2, r3
3401454e:	60fb      	str	r3, [r7, #12]
            break;
34014550:	e000      	b.n	34014554 <RCCEx_GetXSPICLKFreq+0x154>
            break;
34014552:	bf00      	nop
        }
      }
      break;
34014554:	e044      	b.n	340145e0 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
34014556:	f7f4 fe79 	bl	3400924c <LL_RCC_IC4_IsEnabled>
3401455a:	4603      	mov	r3, r0
3401455c:	2b00      	cmp	r3, #0
3401455e:	d041      	beq.n	340145e4 <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
34014560:	f7f4 fe96 	bl	34009290 <LL_RCC_IC4_GetDivider>
34014564:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34014566:	f7f4 fe85 	bl	34009274 <LL_RCC_IC4_GetSource>
3401456a:	4603      	mov	r3, r0
3401456c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014570:	d029      	beq.n	340145c6 <RCCEx_GetXSPICLKFreq+0x1c6>
34014572:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014576:	d82f      	bhi.n	340145d8 <RCCEx_GetXSPICLKFreq+0x1d8>
34014578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401457c:	d01a      	beq.n	340145b4 <RCCEx_GetXSPICLKFreq+0x1b4>
3401457e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014582:	d829      	bhi.n	340145d8 <RCCEx_GetXSPICLKFreq+0x1d8>
34014584:	2b00      	cmp	r3, #0
34014586:	d003      	beq.n	34014590 <RCCEx_GetXSPICLKFreq+0x190>
34014588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401458c:	d009      	beq.n	340145a2 <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401458e:	e023      	b.n	340145d8 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014590:	f7fc fb1a 	bl	34010bc8 <HAL_RCCEx_GetPLL1CLKFreq>
34014594:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014596:	68fa      	ldr	r2, [r7, #12]
34014598:	68bb      	ldr	r3, [r7, #8]
3401459a:	fbb2 f3f3 	udiv	r3, r2, r3
3401459e:	60fb      	str	r3, [r7, #12]
            break;
340145a0:	e01b      	b.n	340145da <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340145a2:	f7fc fb57 	bl	34010c54 <HAL_RCCEx_GetPLL2CLKFreq>
340145a6:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340145a8:	68fa      	ldr	r2, [r7, #12]
340145aa:	68bb      	ldr	r3, [r7, #8]
340145ac:	fbb2 f3f3 	udiv	r3, r2, r3
340145b0:	60fb      	str	r3, [r7, #12]
            break;
340145b2:	e012      	b.n	340145da <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340145b4:	f7fc fb94 	bl	34010ce0 <HAL_RCCEx_GetPLL3CLKFreq>
340145b8:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340145ba:	68fa      	ldr	r2, [r7, #12]
340145bc:	68bb      	ldr	r3, [r7, #8]
340145be:	fbb2 f3f3 	udiv	r3, r2, r3
340145c2:	60fb      	str	r3, [r7, #12]
            break;
340145c4:	e009      	b.n	340145da <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340145c6:	f7fc fbd1 	bl	34010d6c <HAL_RCCEx_GetPLL4CLKFreq>
340145ca:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340145cc:	68fa      	ldr	r2, [r7, #12]
340145ce:	68bb      	ldr	r3, [r7, #8]
340145d0:	fbb2 f3f3 	udiv	r3, r2, r3
340145d4:	60fb      	str	r3, [r7, #12]
            break;
340145d6:	e000      	b.n	340145da <RCCEx_GetXSPICLKFreq+0x1da>
            break;
340145d8:	bf00      	nop
        }
      }
      break;
340145da:	e003      	b.n	340145e4 <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
340145dc:	bf00      	nop
340145de:	e002      	b.n	340145e6 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
340145e0:	bf00      	nop
340145e2:	e000      	b.n	340145e6 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
340145e4:	bf00      	nop
  }

  return xspi_frequency;
340145e6:	68fb      	ldr	r3, [r7, #12]
}
340145e8:	4618      	mov	r0, r3
340145ea:	3710      	adds	r7, #16
340145ec:	46bd      	mov	sp, r7
340145ee:	bd80      	pop	{r7, pc}
340145f0:	03030814 	.word	0x03030814
340145f4:	03030414 	.word	0x03030414
340145f8:	03030014 	.word	0x03030014
340145fc:	03020814 	.word	0x03020814
34014600:	03020414 	.word	0x03020414
34014604:	03020014 	.word	0x03020014
34014608:	03010814 	.word	0x03010814
3401460c:	03010414 	.word	0x03010414
34014610:	03010014 	.word	0x03010014
34014614:	03000814 	.word	0x03000814
34014618:	03000014 	.word	0x03000014
3401461c:	03000414 	.word	0x03000414

34014620 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34014620:	b580      	push	{r7, lr}
34014622:	b088      	sub	sp, #32
34014624:	af00      	add	r7, sp, #0
34014626:	6078      	str	r0, [r7, #4]
34014628:	6039      	str	r1, [r7, #0]
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
3401462a:	683b      	ldr	r3, [r7, #0]
3401462c:	2b00      	cmp	r3, #0
3401462e:	d104      	bne.n	3401463a <HAL_RIF_RIMC_ConfigMasterAttributes+0x1a>
34014630:	f240 1111 	movw	r1, #273	@ 0x111
34014634:	484d      	ldr	r0, [pc, #308]	@ (3401476c <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34014636:	f7ed fb35 	bl	34001ca4 <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
3401463a:	687b      	ldr	r3, [r7, #4]
3401463c:	2b00      	cmp	r3, #0
3401463e:	d028      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014640:	687b      	ldr	r3, [r7, #4]
34014642:	2b01      	cmp	r3, #1
34014644:	d025      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014646:	687b      	ldr	r3, [r7, #4]
34014648:	2b02      	cmp	r3, #2
3401464a:	d022      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401464c:	687b      	ldr	r3, [r7, #4]
3401464e:	2b03      	cmp	r3, #3
34014650:	d01f      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014652:	687b      	ldr	r3, [r7, #4]
34014654:	2b04      	cmp	r3, #4
34014656:	d01c      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014658:	687b      	ldr	r3, [r7, #4]
3401465a:	2b05      	cmp	r3, #5
3401465c:	d019      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401465e:	687b      	ldr	r3, [r7, #4]
34014660:	2b06      	cmp	r3, #6
34014662:	d016      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014664:	687b      	ldr	r3, [r7, #4]
34014666:	2b07      	cmp	r3, #7
34014668:	d013      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401466a:	687b      	ldr	r3, [r7, #4]
3401466c:	2b08      	cmp	r3, #8
3401466e:	d010      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014670:	687b      	ldr	r3, [r7, #4]
34014672:	2b09      	cmp	r3, #9
34014674:	d00d      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014676:	687b      	ldr	r3, [r7, #4]
34014678:	2b0a      	cmp	r3, #10
3401467a:	d00a      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401467c:	687b      	ldr	r3, [r7, #4]
3401467e:	2b0b      	cmp	r3, #11
34014680:	d007      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014682:	687b      	ldr	r3, [r7, #4]
34014684:	2b0c      	cmp	r3, #12
34014686:	d004      	beq.n	34014692 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014688:	f44f 7189 	mov.w	r1, #274	@ 0x112
3401468c:	4837      	ldr	r0, [pc, #220]	@ (3401476c <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
3401468e:	f7ed fb09 	bl	34001ca4 <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34014692:	683b      	ldr	r3, [r7, #0]
34014694:	681b      	ldr	r3, [r3, #0]
34014696:	2b01      	cmp	r3, #1
34014698:	d020      	beq.n	340146dc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
3401469a:	683b      	ldr	r3, [r7, #0]
3401469c:	681b      	ldr	r3, [r3, #0]
3401469e:	2b02      	cmp	r3, #2
340146a0:	d01c      	beq.n	340146dc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146a2:	683b      	ldr	r3, [r7, #0]
340146a4:	681b      	ldr	r3, [r3, #0]
340146a6:	2b04      	cmp	r3, #4
340146a8:	d018      	beq.n	340146dc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146aa:	683b      	ldr	r3, [r7, #0]
340146ac:	681b      	ldr	r3, [r3, #0]
340146ae:	2b08      	cmp	r3, #8
340146b0:	d014      	beq.n	340146dc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146b2:	683b      	ldr	r3, [r7, #0]
340146b4:	681b      	ldr	r3, [r3, #0]
340146b6:	2b10      	cmp	r3, #16
340146b8:	d010      	beq.n	340146dc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146ba:	683b      	ldr	r3, [r7, #0]
340146bc:	681b      	ldr	r3, [r3, #0]
340146be:	2b20      	cmp	r3, #32
340146c0:	d00c      	beq.n	340146dc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146c2:	683b      	ldr	r3, [r7, #0]
340146c4:	681b      	ldr	r3, [r3, #0]
340146c6:	2b40      	cmp	r3, #64	@ 0x40
340146c8:	d008      	beq.n	340146dc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146ca:	683b      	ldr	r3, [r7, #0]
340146cc:	681b      	ldr	r3, [r3, #0]
340146ce:	2b80      	cmp	r3, #128	@ 0x80
340146d0:	d004      	beq.n	340146dc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146d2:	f240 1113 	movw	r1, #275	@ 0x113
340146d6:	4825      	ldr	r0, [pc, #148]	@ (3401476c <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
340146d8:	f7ed fae4 	bl	34001ca4 <assert_failed>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
340146dc:	683b      	ldr	r3, [r7, #0]
340146de:	681b      	ldr	r3, [r3, #0]
340146e0:	2b80      	cmp	r3, #128	@ 0x80
340146e2:	d003      	beq.n	340146ec <HAL_RIF_RIMC_ConfigMasterAttributes+0xcc>
340146e4:	683b      	ldr	r3, [r7, #0]
340146e6:	681b      	ldr	r3, [r3, #0]
340146e8:	2bff      	cmp	r3, #255	@ 0xff
340146ea:	d904      	bls.n	340146f6 <HAL_RIF_RIMC_ConfigMasterAttributes+0xd6>
340146ec:	f44f 718a 	mov.w	r1, #276	@ 0x114
340146f0:	481e      	ldr	r0, [pc, #120]	@ (3401476c <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
340146f2:	f7ed fad7 	bl	34001ca4 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
340146f6:	683b      	ldr	r3, [r7, #0]
340146f8:	685b      	ldr	r3, [r3, #4]
340146fa:	2b03      	cmp	r3, #3
340146fc:	d904      	bls.n	34014708 <HAL_RIF_RIMC_ConfigMasterAttributes+0xe8>
340146fe:	f240 1115 	movw	r1, #277	@ 0x115
34014702:	481a      	ldr	r0, [pc, #104]	@ (3401476c <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34014704:	f7ed face 	bl	34001ca4 <assert_failed>

  master_cid = POSITION_VAL(pConfig->MasterCID);
34014708:	683b      	ldr	r3, [r7, #0]
3401470a:	681b      	ldr	r3, [r3, #0]
3401470c:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3401470e:	693b      	ldr	r3, [r7, #16]
34014710:	fa93 f3a3 	rbit	r3, r3
34014714:	60fb      	str	r3, [r7, #12]
  return result;
34014716:	68fb      	ldr	r3, [r7, #12]
34014718:	617b      	str	r3, [r7, #20]
  if (value == 0U)
3401471a:	697b      	ldr	r3, [r7, #20]
3401471c:	2b00      	cmp	r3, #0
3401471e:	d101      	bne.n	34014724 <HAL_RIF_RIMC_ConfigMasterAttributes+0x104>
    return 32U;
34014720:	2320      	movs	r3, #32
34014722:	e003      	b.n	3401472c <HAL_RIF_RIMC_ConfigMasterAttributes+0x10c>
  return __builtin_clz(value);
34014724:	697b      	ldr	r3, [r7, #20]
34014726:	fab3 f383 	clz	r3, r3
3401472a:	b2db      	uxtb	r3, r3
3401472c:	61fb      	str	r3, [r7, #28]
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3401472e:	4a10      	ldr	r2, [pc, #64]	@ (34014770 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
34014730:	687b      	ldr	r3, [r7, #4]
34014732:	f503 7341 	add.w	r3, r3, #772	@ 0x304
34014736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3401473a:	61bb      	str	r3, [r7, #24]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3401473c:	69bb      	ldr	r3, [r7, #24]
3401473e:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
34014742:	61bb      	str	r3, [r7, #24]
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34014744:	69fb      	ldr	r3, [r7, #28]
34014746:	011a      	lsls	r2, r3, #4
34014748:	683b      	ldr	r3, [r7, #0]
3401474a:	685b      	ldr	r3, [r3, #4]
3401474c:	021b      	lsls	r3, r3, #8
3401474e:	4313      	orrs	r3, r2
34014750:	69ba      	ldr	r2, [r7, #24]
34014752:	4313      	orrs	r3, r2
34014754:	61bb      	str	r3, [r7, #24]
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
34014756:	4906      	ldr	r1, [pc, #24]	@ (34014770 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
34014758:	687b      	ldr	r3, [r7, #4]
3401475a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3401475e:	69ba      	ldr	r2, [r7, #24]
34014760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
34014764:	bf00      	nop
34014766:	3720      	adds	r7, #32
34014768:	46bd      	mov	sp, r7
3401476a:	bd80      	pop	{r7, pc}
3401476c:	3401e9bc 	.word	0x3401e9bc
34014770:	54024000 	.word	0x54024000

34014774 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  * @param  SecPriv specifies the security and privilege attributes of the peripheral.
  *         This parameter can be one or a combination of @ref RIF_SEC_PRIV
  * @retval None
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
34014774:	b580      	push	{r7, lr}
34014776:	b084      	sub	sp, #16
34014778:	af00      	add	r7, sp, #0
3401477a:	6078      	str	r0, [r7, #4]
3401477c:	6039      	str	r1, [r7, #0]
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3401477e:	687b      	ldr	r3, [r7, #4]
34014780:	2b00      	cmp	r3, #0
34014782:	f000 82c6 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014786:	687b      	ldr	r3, [r7, #4]
34014788:	2b01      	cmp	r3, #1
3401478a:	f000 82c2 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401478e:	687b      	ldr	r3, [r7, #4]
34014790:	2b02      	cmp	r3, #2
34014792:	f000 82be 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014796:	687b      	ldr	r3, [r7, #4]
34014798:	2b03      	cmp	r3, #3
3401479a:	f000 82ba 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401479e:	687b      	ldr	r3, [r7, #4]
340147a0:	2b04      	cmp	r3, #4
340147a2:	f000 82b6 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147a6:	687b      	ldr	r3, [r7, #4]
340147a8:	2b05      	cmp	r3, #5
340147aa:	f000 82b2 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147ae:	687b      	ldr	r3, [r7, #4]
340147b0:	2b06      	cmp	r3, #6
340147b2:	f000 82ae 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147b6:	687b      	ldr	r3, [r7, #4]
340147b8:	2b08      	cmp	r3, #8
340147ba:	f000 82aa 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147be:	687b      	ldr	r3, [r7, #4]
340147c0:	2b09      	cmp	r3, #9
340147c2:	f000 82a6 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147c6:	687b      	ldr	r3, [r7, #4]
340147c8:	2b0a      	cmp	r3, #10
340147ca:	f000 82a2 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147ce:	687b      	ldr	r3, [r7, #4]
340147d0:	2b0b      	cmp	r3, #11
340147d2:	f000 829e 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147d6:	687b      	ldr	r3, [r7, #4]
340147d8:	2b0c      	cmp	r3, #12
340147da:	f000 829a 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147de:	687b      	ldr	r3, [r7, #4]
340147e0:	2b0d      	cmp	r3, #13
340147e2:	f000 8296 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147e6:	687b      	ldr	r3, [r7, #4]
340147e8:	2b0e      	cmp	r3, #14
340147ea:	f000 8292 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147ee:	687b      	ldr	r3, [r7, #4]
340147f0:	2b0f      	cmp	r3, #15
340147f2:	f000 828e 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147f6:	687b      	ldr	r3, [r7, #4]
340147f8:	2b10      	cmp	r3, #16
340147fa:	f000 828a 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147fe:	687b      	ldr	r3, [r7, #4]
34014800:	2b11      	cmp	r3, #17
34014802:	f000 8286 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014806:	687b      	ldr	r3, [r7, #4]
34014808:	2b12      	cmp	r3, #18
3401480a:	f000 8282 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401480e:	687b      	ldr	r3, [r7, #4]
34014810:	2b13      	cmp	r3, #19
34014812:	f000 827e 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014816:	687b      	ldr	r3, [r7, #4]
34014818:	2b14      	cmp	r3, #20
3401481a:	f000 827a 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401481e:	687b      	ldr	r3, [r7, #4]
34014820:	2b15      	cmp	r3, #21
34014822:	f000 8276 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014826:	687b      	ldr	r3, [r7, #4]
34014828:	2b16      	cmp	r3, #22
3401482a:	f000 8272 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401482e:	687b      	ldr	r3, [r7, #4]
34014830:	2b17      	cmp	r3, #23
34014832:	f000 826e 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014836:	687b      	ldr	r3, [r7, #4]
34014838:	2b18      	cmp	r3, #24
3401483a:	f000 826a 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401483e:	687b      	ldr	r3, [r7, #4]
34014840:	2b19      	cmp	r3, #25
34014842:	f000 8266 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014846:	687b      	ldr	r3, [r7, #4]
34014848:	2b1a      	cmp	r3, #26
3401484a:	f000 8262 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401484e:	687b      	ldr	r3, [r7, #4]
34014850:	2b1b      	cmp	r3, #27
34014852:	f000 825e 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014856:	687b      	ldr	r3, [r7, #4]
34014858:	2b1c      	cmp	r3, #28
3401485a:	f000 825a 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401485e:	687b      	ldr	r3, [r7, #4]
34014860:	2b1d      	cmp	r3, #29
34014862:	f000 8256 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014866:	687b      	ldr	r3, [r7, #4]
34014868:	2b1e      	cmp	r3, #30
3401486a:	f000 8252 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401486e:	687b      	ldr	r3, [r7, #4]
34014870:	2b1f      	cmp	r3, #31
34014872:	f000 824e 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014876:	687b      	ldr	r3, [r7, #4]
34014878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401487c:	f000 8249 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014880:	687b      	ldr	r3, [r7, #4]
34014882:	4aa0      	ldr	r2, [pc, #640]	@ (34014b04 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x390>)
34014884:	4293      	cmp	r3, r2
34014886:	f000 8244 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401488a:	687b      	ldr	r3, [r7, #4]
3401488c:	4a9e      	ldr	r2, [pc, #632]	@ (34014b08 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x394>)
3401488e:	4293      	cmp	r3, r2
34014890:	f000 823f 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014894:	687b      	ldr	r3, [r7, #4]
34014896:	4a9d      	ldr	r2, [pc, #628]	@ (34014b0c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x398>)
34014898:	4293      	cmp	r3, r2
3401489a:	f000 823a 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401489e:	687b      	ldr	r3, [r7, #4]
340148a0:	4a9b      	ldr	r2, [pc, #620]	@ (34014b10 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x39c>)
340148a2:	4293      	cmp	r3, r2
340148a4:	f000 8235 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148a8:	687b      	ldr	r3, [r7, #4]
340148aa:	4a9a      	ldr	r2, [pc, #616]	@ (34014b14 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a0>)
340148ac:	4293      	cmp	r3, r2
340148ae:	f000 8230 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148b2:	687b      	ldr	r3, [r7, #4]
340148b4:	4a98      	ldr	r2, [pc, #608]	@ (34014b18 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a4>)
340148b6:	4293      	cmp	r3, r2
340148b8:	f000 822b 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148bc:	687b      	ldr	r3, [r7, #4]
340148be:	4a97      	ldr	r2, [pc, #604]	@ (34014b1c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a8>)
340148c0:	4293      	cmp	r3, r2
340148c2:	f000 8226 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148c6:	687b      	ldr	r3, [r7, #4]
340148c8:	4a95      	ldr	r2, [pc, #596]	@ (34014b20 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ac>)
340148ca:	4293      	cmp	r3, r2
340148cc:	f000 8221 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148d0:	687b      	ldr	r3, [r7, #4]
340148d2:	4a94      	ldr	r2, [pc, #592]	@ (34014b24 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b0>)
340148d4:	4293      	cmp	r3, r2
340148d6:	f000 821c 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148da:	687b      	ldr	r3, [r7, #4]
340148dc:	4a92      	ldr	r2, [pc, #584]	@ (34014b28 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b4>)
340148de:	4293      	cmp	r3, r2
340148e0:	f000 8217 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148e4:	687b      	ldr	r3, [r7, #4]
340148e6:	4a91      	ldr	r2, [pc, #580]	@ (34014b2c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b8>)
340148e8:	4293      	cmp	r3, r2
340148ea:	f000 8212 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148ee:	687b      	ldr	r3, [r7, #4]
340148f0:	4a8f      	ldr	r2, [pc, #572]	@ (34014b30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3bc>)
340148f2:	4293      	cmp	r3, r2
340148f4:	f000 820d 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148f8:	687b      	ldr	r3, [r7, #4]
340148fa:	4a8e      	ldr	r2, [pc, #568]	@ (34014b34 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c0>)
340148fc:	4293      	cmp	r3, r2
340148fe:	f000 8208 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014902:	687b      	ldr	r3, [r7, #4]
34014904:	4a8c      	ldr	r2, [pc, #560]	@ (34014b38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c4>)
34014906:	4293      	cmp	r3, r2
34014908:	f000 8203 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401490c:	687b      	ldr	r3, [r7, #4]
3401490e:	4a8b      	ldr	r2, [pc, #556]	@ (34014b3c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c8>)
34014910:	4293      	cmp	r3, r2
34014912:	f000 81fe 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014916:	687b      	ldr	r3, [r7, #4]
34014918:	4a89      	ldr	r2, [pc, #548]	@ (34014b40 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3cc>)
3401491a:	4293      	cmp	r3, r2
3401491c:	f000 81f9 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014920:	687b      	ldr	r3, [r7, #4]
34014922:	4a88      	ldr	r2, [pc, #544]	@ (34014b44 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d0>)
34014924:	4293      	cmp	r3, r2
34014926:	f000 81f4 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401492a:	687b      	ldr	r3, [r7, #4]
3401492c:	4a86      	ldr	r2, [pc, #536]	@ (34014b48 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d4>)
3401492e:	4293      	cmp	r3, r2
34014930:	f000 81ef 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014934:	687b      	ldr	r3, [r7, #4]
34014936:	4a85      	ldr	r2, [pc, #532]	@ (34014b4c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d8>)
34014938:	4293      	cmp	r3, r2
3401493a:	f000 81ea 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401493e:	687b      	ldr	r3, [r7, #4]
34014940:	4a83      	ldr	r2, [pc, #524]	@ (34014b50 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3dc>)
34014942:	4293      	cmp	r3, r2
34014944:	f000 81e5 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014948:	687b      	ldr	r3, [r7, #4]
3401494a:	4a82      	ldr	r2, [pc, #520]	@ (34014b54 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e0>)
3401494c:	4293      	cmp	r3, r2
3401494e:	f000 81e0 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014952:	687b      	ldr	r3, [r7, #4]
34014954:	4a80      	ldr	r2, [pc, #512]	@ (34014b58 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e4>)
34014956:	4293      	cmp	r3, r2
34014958:	f000 81db 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401495c:	687b      	ldr	r3, [r7, #4]
3401495e:	4a7f      	ldr	r2, [pc, #508]	@ (34014b5c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e8>)
34014960:	4293      	cmp	r3, r2
34014962:	f000 81d6 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014966:	687b      	ldr	r3, [r7, #4]
34014968:	4a7d      	ldr	r2, [pc, #500]	@ (34014b60 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ec>)
3401496a:	4293      	cmp	r3, r2
3401496c:	f000 81d1 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014970:	687b      	ldr	r3, [r7, #4]
34014972:	4a7c      	ldr	r2, [pc, #496]	@ (34014b64 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f0>)
34014974:	4293      	cmp	r3, r2
34014976:	f000 81cc 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401497a:	687b      	ldr	r3, [r7, #4]
3401497c:	4a7a      	ldr	r2, [pc, #488]	@ (34014b68 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f4>)
3401497e:	4293      	cmp	r3, r2
34014980:	f000 81c7 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014984:	687b      	ldr	r3, [r7, #4]
34014986:	4a79      	ldr	r2, [pc, #484]	@ (34014b6c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f8>)
34014988:	4293      	cmp	r3, r2
3401498a:	f000 81c2 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401498e:	687b      	ldr	r3, [r7, #4]
34014990:	4a77      	ldr	r2, [pc, #476]	@ (34014b70 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3fc>)
34014992:	4293      	cmp	r3, r2
34014994:	f000 81bd 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014998:	687b      	ldr	r3, [r7, #4]
3401499a:	4a76      	ldr	r2, [pc, #472]	@ (34014b74 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x400>)
3401499c:	4293      	cmp	r3, r2
3401499e:	f000 81b8 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149a2:	687b      	ldr	r3, [r7, #4]
340149a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340149a8:	f000 81b3 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149ac:	687b      	ldr	r3, [r7, #4]
340149ae:	4a72      	ldr	r2, [pc, #456]	@ (34014b78 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x404>)
340149b0:	4293      	cmp	r3, r2
340149b2:	f000 81ae 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149b6:	687b      	ldr	r3, [r7, #4]
340149b8:	4a70      	ldr	r2, [pc, #448]	@ (34014b7c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x408>)
340149ba:	4293      	cmp	r3, r2
340149bc:	f000 81a9 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149c0:	687b      	ldr	r3, [r7, #4]
340149c2:	4a6f      	ldr	r2, [pc, #444]	@ (34014b80 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x40c>)
340149c4:	4293      	cmp	r3, r2
340149c6:	f000 81a4 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149ca:	687b      	ldr	r3, [r7, #4]
340149cc:	4a6d      	ldr	r2, [pc, #436]	@ (34014b84 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x410>)
340149ce:	4293      	cmp	r3, r2
340149d0:	f000 819f 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149d4:	687b      	ldr	r3, [r7, #4]
340149d6:	4a6c      	ldr	r2, [pc, #432]	@ (34014b88 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x414>)
340149d8:	4293      	cmp	r3, r2
340149da:	f000 819a 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149de:	687b      	ldr	r3, [r7, #4]
340149e0:	4a6a      	ldr	r2, [pc, #424]	@ (34014b8c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x418>)
340149e2:	4293      	cmp	r3, r2
340149e4:	f000 8195 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149e8:	687b      	ldr	r3, [r7, #4]
340149ea:	4a69      	ldr	r2, [pc, #420]	@ (34014b90 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x41c>)
340149ec:	4293      	cmp	r3, r2
340149ee:	f000 8190 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149f2:	687b      	ldr	r3, [r7, #4]
340149f4:	4a67      	ldr	r2, [pc, #412]	@ (34014b94 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x420>)
340149f6:	4293      	cmp	r3, r2
340149f8:	f000 818b 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149fc:	687b      	ldr	r3, [r7, #4]
340149fe:	4a66      	ldr	r2, [pc, #408]	@ (34014b98 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x424>)
34014a00:	4293      	cmp	r3, r2
34014a02:	f000 8186 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a06:	687b      	ldr	r3, [r7, #4]
34014a08:	4a64      	ldr	r2, [pc, #400]	@ (34014b9c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x428>)
34014a0a:	4293      	cmp	r3, r2
34014a0c:	f000 8181 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a10:	687b      	ldr	r3, [r7, #4]
34014a12:	4a63      	ldr	r2, [pc, #396]	@ (34014ba0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x42c>)
34014a14:	4293      	cmp	r3, r2
34014a16:	f000 817c 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a1a:	687b      	ldr	r3, [r7, #4]
34014a1c:	4a61      	ldr	r2, [pc, #388]	@ (34014ba4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x430>)
34014a1e:	4293      	cmp	r3, r2
34014a20:	f000 8177 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a24:	687b      	ldr	r3, [r7, #4]
34014a26:	4a60      	ldr	r2, [pc, #384]	@ (34014ba8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x434>)
34014a28:	4293      	cmp	r3, r2
34014a2a:	f000 8172 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a2e:	687b      	ldr	r3, [r7, #4]
34014a30:	4a5e      	ldr	r2, [pc, #376]	@ (34014bac <HAL_RIF_RISC_SetSlaveSecureAttributes+0x438>)
34014a32:	4293      	cmp	r3, r2
34014a34:	f000 816d 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a38:	687b      	ldr	r3, [r7, #4]
34014a3a:	4a5d      	ldr	r2, [pc, #372]	@ (34014bb0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x43c>)
34014a3c:	4293      	cmp	r3, r2
34014a3e:	f000 8168 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a42:	687b      	ldr	r3, [r7, #4]
34014a44:	4a5b      	ldr	r2, [pc, #364]	@ (34014bb4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x440>)
34014a46:	4293      	cmp	r3, r2
34014a48:	f000 8163 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a4c:	687b      	ldr	r3, [r7, #4]
34014a4e:	4a5a      	ldr	r2, [pc, #360]	@ (34014bb8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x444>)
34014a50:	4293      	cmp	r3, r2
34014a52:	f000 815e 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a56:	687b      	ldr	r3, [r7, #4]
34014a58:	4a58      	ldr	r2, [pc, #352]	@ (34014bbc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x448>)
34014a5a:	4293      	cmp	r3, r2
34014a5c:	f000 8159 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a60:	687b      	ldr	r3, [r7, #4]
34014a62:	4a57      	ldr	r2, [pc, #348]	@ (34014bc0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x44c>)
34014a64:	4293      	cmp	r3, r2
34014a66:	f000 8154 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a6a:	687b      	ldr	r3, [r7, #4]
34014a6c:	4a55      	ldr	r2, [pc, #340]	@ (34014bc4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x450>)
34014a6e:	4293      	cmp	r3, r2
34014a70:	f000 814f 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a74:	687b      	ldr	r3, [r7, #4]
34014a76:	4a54      	ldr	r2, [pc, #336]	@ (34014bc8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x454>)
34014a78:	4293      	cmp	r3, r2
34014a7a:	f000 814a 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a7e:	687b      	ldr	r3, [r7, #4]
34014a80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014a84:	f000 8145 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a88:	687b      	ldr	r3, [r7, #4]
34014a8a:	4a50      	ldr	r2, [pc, #320]	@ (34014bcc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x458>)
34014a8c:	4293      	cmp	r3, r2
34014a8e:	f000 8140 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a92:	687b      	ldr	r3, [r7, #4]
34014a94:	4a4e      	ldr	r2, [pc, #312]	@ (34014bd0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x45c>)
34014a96:	4293      	cmp	r3, r2
34014a98:	f000 813b 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a9c:	687b      	ldr	r3, [r7, #4]
34014a9e:	4a4d      	ldr	r2, [pc, #308]	@ (34014bd4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x460>)
34014aa0:	4293      	cmp	r3, r2
34014aa2:	f000 8136 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014aa6:	687b      	ldr	r3, [r7, #4]
34014aa8:	4a4b      	ldr	r2, [pc, #300]	@ (34014bd8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x464>)
34014aaa:	4293      	cmp	r3, r2
34014aac:	f000 8131 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ab0:	687b      	ldr	r3, [r7, #4]
34014ab2:	4a4a      	ldr	r2, [pc, #296]	@ (34014bdc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x468>)
34014ab4:	4293      	cmp	r3, r2
34014ab6:	f000 812c 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014aba:	687b      	ldr	r3, [r7, #4]
34014abc:	4a48      	ldr	r2, [pc, #288]	@ (34014be0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x46c>)
34014abe:	4293      	cmp	r3, r2
34014ac0:	f000 8127 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ac4:	687b      	ldr	r3, [r7, #4]
34014ac6:	4a47      	ldr	r2, [pc, #284]	@ (34014be4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x470>)
34014ac8:	4293      	cmp	r3, r2
34014aca:	f000 8122 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ace:	687b      	ldr	r3, [r7, #4]
34014ad0:	4a45      	ldr	r2, [pc, #276]	@ (34014be8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x474>)
34014ad2:	4293      	cmp	r3, r2
34014ad4:	f000 811d 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ad8:	687b      	ldr	r3, [r7, #4]
34014ada:	4a44      	ldr	r2, [pc, #272]	@ (34014bec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x478>)
34014adc:	4293      	cmp	r3, r2
34014ade:	f000 8118 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ae2:	687b      	ldr	r3, [r7, #4]
34014ae4:	4a42      	ldr	r2, [pc, #264]	@ (34014bf0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x47c>)
34014ae6:	4293      	cmp	r3, r2
34014ae8:	f000 8113 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014aec:	687b      	ldr	r3, [r7, #4]
34014aee:	4a41      	ldr	r2, [pc, #260]	@ (34014bf4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x480>)
34014af0:	4293      	cmp	r3, r2
34014af2:	f000 810e 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014af6:	687b      	ldr	r3, [r7, #4]
34014af8:	4a3f      	ldr	r2, [pc, #252]	@ (34014bf8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x484>)
34014afa:	4293      	cmp	r3, r2
34014afc:	f000 8109 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014b00:	e07c      	b.n	34014bfc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x488>
34014b02:	bf00      	nop
34014b04:	10000001 	.word	0x10000001
34014b08:	10000002 	.word	0x10000002
34014b0c:	10000003 	.word	0x10000003
34014b10:	10000004 	.word	0x10000004
34014b14:	10000005 	.word	0x10000005
34014b18:	10000006 	.word	0x10000006
34014b1c:	10000007 	.word	0x10000007
34014b20:	10000008 	.word	0x10000008
34014b24:	10000009 	.word	0x10000009
34014b28:	1000000a 	.word	0x1000000a
34014b2c:	1000000b 	.word	0x1000000b
34014b30:	1000000c 	.word	0x1000000c
34014b34:	1000000d 	.word	0x1000000d
34014b38:	1000000e 	.word	0x1000000e
34014b3c:	1000000f 	.word	0x1000000f
34014b40:	10000010 	.word	0x10000010
34014b44:	10000011 	.word	0x10000011
34014b48:	10000012 	.word	0x10000012
34014b4c:	10000013 	.word	0x10000013
34014b50:	10000014 	.word	0x10000014
34014b54:	10000015 	.word	0x10000015
34014b58:	10000016 	.word	0x10000016
34014b5c:	10000017 	.word	0x10000017
34014b60:	10000018 	.word	0x10000018
34014b64:	10000019 	.word	0x10000019
34014b68:	1000001a 	.word	0x1000001a
34014b6c:	1000001c 	.word	0x1000001c
34014b70:	1000001d 	.word	0x1000001d
34014b74:	1000001e 	.word	0x1000001e
34014b78:	20000001 	.word	0x20000001
34014b7c:	20000003 	.word	0x20000003
34014b80:	20000004 	.word	0x20000004
34014b84:	20000005 	.word	0x20000005
34014b88:	2000000c 	.word	0x2000000c
34014b8c:	2000000d 	.word	0x2000000d
34014b90:	2000000e 	.word	0x2000000e
34014b94:	2000000f 	.word	0x2000000f
34014b98:	20000010 	.word	0x20000010
34014b9c:	20000011 	.word	0x20000011
34014ba0:	20000012 	.word	0x20000012
34014ba4:	20000013 	.word	0x20000013
34014ba8:	20000014 	.word	0x20000014
34014bac:	20000016 	.word	0x20000016
34014bb0:	20000017 	.word	0x20000017
34014bb4:	20000018 	.word	0x20000018
34014bb8:	20000019 	.word	0x20000019
34014bbc:	2000001a 	.word	0x2000001a
34014bc0:	2000001c 	.word	0x2000001c
34014bc4:	2000001d 	.word	0x2000001d
34014bc8:	2000001e 	.word	0x2000001e
34014bcc:	30000001 	.word	0x30000001
34014bd0:	30000002 	.word	0x30000002
34014bd4:	30000003 	.word	0x30000003
34014bd8:	30000004 	.word	0x30000004
34014bdc:	30000005 	.word	0x30000005
34014be0:	30000006 	.word	0x30000006
34014be4:	30000007 	.word	0x30000007
34014be8:	30000008 	.word	0x30000008
34014bec:	3000000a 	.word	0x3000000a
34014bf0:	40000002 	.word	0x40000002
34014bf4:	40000003 	.word	0x40000003
34014bf8:	40000005 	.word	0x40000005
34014bfc:	687b      	ldr	r3, [r7, #4]
34014bfe:	4a6d      	ldr	r2, [pc, #436]	@ (34014db4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x640>)
34014c00:	4293      	cmp	r3, r2
34014c02:	f000 8086 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c06:	687b      	ldr	r3, [r7, #4]
34014c08:	4a6b      	ldr	r2, [pc, #428]	@ (34014db8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x644>)
34014c0a:	4293      	cmp	r3, r2
34014c0c:	f000 8081 	beq.w	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c10:	687b      	ldr	r3, [r7, #4]
34014c12:	4a6a      	ldr	r2, [pc, #424]	@ (34014dbc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x648>)
34014c14:	4293      	cmp	r3, r2
34014c16:	d07c      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c18:	687b      	ldr	r3, [r7, #4]
34014c1a:	4a69      	ldr	r2, [pc, #420]	@ (34014dc0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x64c>)
34014c1c:	4293      	cmp	r3, r2
34014c1e:	d078      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c20:	687b      	ldr	r3, [r7, #4]
34014c22:	4a68      	ldr	r2, [pc, #416]	@ (34014dc4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x650>)
34014c24:	4293      	cmp	r3, r2
34014c26:	d074      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c28:	687b      	ldr	r3, [r7, #4]
34014c2a:	4a67      	ldr	r2, [pc, #412]	@ (34014dc8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x654>)
34014c2c:	4293      	cmp	r3, r2
34014c2e:	d070      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c30:	687b      	ldr	r3, [r7, #4]
34014c32:	4a66      	ldr	r2, [pc, #408]	@ (34014dcc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x658>)
34014c34:	4293      	cmp	r3, r2
34014c36:	d06c      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c38:	687b      	ldr	r3, [r7, #4]
34014c3a:	4a65      	ldr	r2, [pc, #404]	@ (34014dd0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x65c>)
34014c3c:	4293      	cmp	r3, r2
34014c3e:	d068      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c40:	687b      	ldr	r3, [r7, #4]
34014c42:	4a64      	ldr	r2, [pc, #400]	@ (34014dd4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x660>)
34014c44:	4293      	cmp	r3, r2
34014c46:	d064      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c48:	687b      	ldr	r3, [r7, #4]
34014c4a:	4a63      	ldr	r2, [pc, #396]	@ (34014dd8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x664>)
34014c4c:	4293      	cmp	r3, r2
34014c4e:	d060      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c50:	687b      	ldr	r3, [r7, #4]
34014c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
34014c56:	d05c      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c58:	687b      	ldr	r3, [r7, #4]
34014c5a:	4a60      	ldr	r2, [pc, #384]	@ (34014ddc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x668>)
34014c5c:	4293      	cmp	r3, r2
34014c5e:	d058      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c60:	687b      	ldr	r3, [r7, #4]
34014c62:	4a5f      	ldr	r2, [pc, #380]	@ (34014de0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x66c>)
34014c64:	4293      	cmp	r3, r2
34014c66:	d054      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c68:	687b      	ldr	r3, [r7, #4]
34014c6a:	4a5e      	ldr	r2, [pc, #376]	@ (34014de4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x670>)
34014c6c:	4293      	cmp	r3, r2
34014c6e:	d050      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c70:	687b      	ldr	r3, [r7, #4]
34014c72:	4a5d      	ldr	r2, [pc, #372]	@ (34014de8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x674>)
34014c74:	4293      	cmp	r3, r2
34014c76:	d04c      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c78:	687b      	ldr	r3, [r7, #4]
34014c7a:	4a5c      	ldr	r2, [pc, #368]	@ (34014dec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x678>)
34014c7c:	4293      	cmp	r3, r2
34014c7e:	d048      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c80:	687b      	ldr	r3, [r7, #4]
34014c82:	4a5b      	ldr	r2, [pc, #364]	@ (34014df0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x67c>)
34014c84:	4293      	cmp	r3, r2
34014c86:	d044      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c88:	687b      	ldr	r3, [r7, #4]
34014c8a:	4a5a      	ldr	r2, [pc, #360]	@ (34014df4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x680>)
34014c8c:	4293      	cmp	r3, r2
34014c8e:	d040      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c90:	687b      	ldr	r3, [r7, #4]
34014c92:	4a59      	ldr	r2, [pc, #356]	@ (34014df8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x684>)
34014c94:	4293      	cmp	r3, r2
34014c96:	d03c      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c98:	687b      	ldr	r3, [r7, #4]
34014c9a:	4a58      	ldr	r2, [pc, #352]	@ (34014dfc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x688>)
34014c9c:	4293      	cmp	r3, r2
34014c9e:	d038      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ca0:	687b      	ldr	r3, [r7, #4]
34014ca2:	4a57      	ldr	r2, [pc, #348]	@ (34014e00 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x68c>)
34014ca4:	4293      	cmp	r3, r2
34014ca6:	d034      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ca8:	687b      	ldr	r3, [r7, #4]
34014caa:	4a56      	ldr	r2, [pc, #344]	@ (34014e04 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x690>)
34014cac:	4293      	cmp	r3, r2
34014cae:	d030      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cb0:	687b      	ldr	r3, [r7, #4]
34014cb2:	4a55      	ldr	r2, [pc, #340]	@ (34014e08 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x694>)
34014cb4:	4293      	cmp	r3, r2
34014cb6:	d02c      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cb8:	687b      	ldr	r3, [r7, #4]
34014cba:	4a54      	ldr	r2, [pc, #336]	@ (34014e0c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x698>)
34014cbc:	4293      	cmp	r3, r2
34014cbe:	d028      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cc0:	687b      	ldr	r3, [r7, #4]
34014cc2:	4a53      	ldr	r2, [pc, #332]	@ (34014e10 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x69c>)
34014cc4:	4293      	cmp	r3, r2
34014cc6:	d024      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cc8:	687b      	ldr	r3, [r7, #4]
34014cca:	4a52      	ldr	r2, [pc, #328]	@ (34014e14 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a0>)
34014ccc:	4293      	cmp	r3, r2
34014cce:	d020      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cd0:	687b      	ldr	r3, [r7, #4]
34014cd2:	4a51      	ldr	r2, [pc, #324]	@ (34014e18 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a4>)
34014cd4:	4293      	cmp	r3, r2
34014cd6:	d01c      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cd8:	687b      	ldr	r3, [r7, #4]
34014cda:	4a50      	ldr	r2, [pc, #320]	@ (34014e1c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a8>)
34014cdc:	4293      	cmp	r3, r2
34014cde:	d018      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ce0:	687b      	ldr	r3, [r7, #4]
34014ce2:	4a4f      	ldr	r2, [pc, #316]	@ (34014e20 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6ac>)
34014ce4:	4293      	cmp	r3, r2
34014ce6:	d014      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ce8:	687b      	ldr	r3, [r7, #4]
34014cea:	4a4e      	ldr	r2, [pc, #312]	@ (34014e24 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b0>)
34014cec:	4293      	cmp	r3, r2
34014cee:	d010      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cf0:	687b      	ldr	r3, [r7, #4]
34014cf2:	4a4d      	ldr	r2, [pc, #308]	@ (34014e28 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b4>)
34014cf4:	4293      	cmp	r3, r2
34014cf6:	d00c      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cf8:	687b      	ldr	r3, [r7, #4]
34014cfa:	4a4c      	ldr	r2, [pc, #304]	@ (34014e2c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b8>)
34014cfc:	4293      	cmp	r3, r2
34014cfe:	d008      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014d00:	687b      	ldr	r3, [r7, #4]
34014d02:	4a4b      	ldr	r2, [pc, #300]	@ (34014e30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6bc>)
34014d04:	4293      	cmp	r3, r2
34014d06:	d004      	beq.n	34014d12 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014d08:	f240 1173 	movw	r1, #371	@ 0x173
34014d0c:	4849      	ldr	r0, [pc, #292]	@ (34014e34 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
34014d0e:	f7ec ffc9 	bl	34001ca4 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
34014d12:	683b      	ldr	r3, [r7, #0]
34014d14:	2b03      	cmp	r3, #3
34014d16:	d904      	bls.n	34014d22 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x5ae>
34014d18:	f44f 71ba 	mov.w	r1, #372	@ 0x174
34014d1c:	4845      	ldr	r0, [pc, #276]	@ (34014e34 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
34014d1e:	f7ec ffc1 	bl	34001ca4 <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34014d22:	4a45      	ldr	r2, [pc, #276]	@ (34014e38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014d24:	687b      	ldr	r3, [r7, #4]
34014d26:	0f1b      	lsrs	r3, r3, #28
34014d28:	3304      	adds	r3, #4
34014d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34014d2e:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34014d30:	687b      	ldr	r3, [r7, #4]
34014d32:	f003 031f 	and.w	r3, r3, #31
34014d36:	2201      	movs	r2, #1
34014d38:	fa02 f303 	lsl.w	r3, r2, r3
34014d3c:	43da      	mvns	r2, r3
34014d3e:	68fb      	ldr	r3, [r7, #12]
34014d40:	4013      	ands	r3, r2
34014d42:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34014d44:	683b      	ldr	r3, [r7, #0]
34014d46:	f003 0201 	and.w	r2, r3, #1
34014d4a:	687b      	ldr	r3, [r7, #4]
34014d4c:	f003 031f 	and.w	r3, r3, #31
34014d50:	409a      	lsls	r2, r3
34014d52:	68fb      	ldr	r3, [r7, #12]
34014d54:	4313      	orrs	r3, r2
34014d56:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34014d58:	4937      	ldr	r1, [pc, #220]	@ (34014e38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014d5a:	687b      	ldr	r3, [r7, #4]
34014d5c:	0f1b      	lsrs	r3, r3, #28
34014d5e:	68fa      	ldr	r2, [r7, #12]
34014d60:	3304      	adds	r3, #4
34014d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34014d66:	4a34      	ldr	r2, [pc, #208]	@ (34014e38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014d68:	687b      	ldr	r3, [r7, #4]
34014d6a:	0f1b      	lsrs	r3, r3, #28
34014d6c:	330c      	adds	r3, #12
34014d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34014d72:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34014d74:	687b      	ldr	r3, [r7, #4]
34014d76:	f003 031f 	and.w	r3, r3, #31
34014d7a:	2201      	movs	r2, #1
34014d7c:	fa02 f303 	lsl.w	r3, r2, r3
34014d80:	43da      	mvns	r2, r3
34014d82:	68fb      	ldr	r3, [r7, #12]
34014d84:	4013      	ands	r3, r2
34014d86:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34014d88:	683b      	ldr	r3, [r7, #0]
34014d8a:	085b      	lsrs	r3, r3, #1
34014d8c:	f003 0201 	and.w	r2, r3, #1
34014d90:	687b      	ldr	r3, [r7, #4]
34014d92:	f003 031f 	and.w	r3, r3, #31
34014d96:	409a      	lsls	r2, r3
34014d98:	68fb      	ldr	r3, [r7, #12]
34014d9a:	4313      	orrs	r3, r2
34014d9c:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34014d9e:	4926      	ldr	r1, [pc, #152]	@ (34014e38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014da0:	687b      	ldr	r3, [r7, #4]
34014da2:	0f1b      	lsrs	r3, r3, #28
34014da4:	68fa      	ldr	r2, [r7, #12]
34014da6:	330c      	adds	r3, #12
34014da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
34014dac:	bf00      	nop
34014dae:	3710      	adds	r7, #16
34014db0:	46bd      	mov	sp, r7
34014db2:	bd80      	pop	{r7, pc}
34014db4:	4000000c 	.word	0x4000000c
34014db8:	4000000d 	.word	0x4000000d
34014dbc:	40000011 	.word	0x40000011
34014dc0:	40000012 	.word	0x40000012
34014dc4:	40000013 	.word	0x40000013
34014dc8:	40000019 	.word	0x40000019
34014dcc:	4000001b 	.word	0x4000001b
34014dd0:	4000001c 	.word	0x4000001c
34014dd4:	4000001d 	.word	0x4000001d
34014dd8:	4000001f 	.word	0x4000001f
34014ddc:	50000001 	.word	0x50000001
34014de0:	50000002 	.word	0x50000002
34014de4:	50000003 	.word	0x50000003
34014de8:	50000004 	.word	0x50000004
34014dec:	50000005 	.word	0x50000005
34014df0:	50000006 	.word	0x50000006
34014df4:	50000008 	.word	0x50000008
34014df8:	50000009 	.word	0x50000009
34014dfc:	5000000a 	.word	0x5000000a
34014e00:	5000000b 	.word	0x5000000b
34014e04:	5000000d 	.word	0x5000000d
34014e08:	5000000e 	.word	0x5000000e
34014e0c:	5000000f 	.word	0x5000000f
34014e10:	50000011 	.word	0x50000011
34014e14:	50000012 	.word	0x50000012
34014e18:	50000013 	.word	0x50000013
34014e1c:	50000014 	.word	0x50000014
34014e20:	50000016 	.word	0x50000016
34014e24:	50000017 	.word	0x50000017
34014e28:	50000018 	.word	0x50000018
34014e2c:	5000001b 	.word	0x5000001b
34014e30:	5000001e 	.word	0x5000001e
34014e34:	3401e9bc 	.word	0x3401e9bc
34014e38:	54024000 	.word	0x54024000

34014e3c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
34014e3c:	b580      	push	{r7, lr}
34014e3e:	b086      	sub	sp, #24
34014e40:	af00      	add	r7, sp, #0
34014e42:	60f8      	str	r0, [r7, #12]
34014e44:	60b9      	str	r1, [r7, #8]
34014e46:	4613      	mov	r3, r2
34014e48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
34014e4a:	68fb      	ldr	r3, [r7, #12]
34014e4c:	689b      	ldr	r3, [r3, #8]
34014e4e:	2b00      	cmp	r3, #0
34014e50:	d00e      	beq.n	34014e70 <HAL_SPI_Transmit_DMA+0x34>
34014e52:	68fb      	ldr	r3, [r7, #12]
34014e54:	689b      	ldr	r3, [r3, #8]
34014e56:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34014e5a:	d009      	beq.n	34014e70 <HAL_SPI_Transmit_DMA+0x34>
34014e5c:	68fb      	ldr	r3, [r7, #12]
34014e5e:	689b      	ldr	r3, [r3, #8]
34014e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34014e64:	d004      	beq.n	34014e70 <HAL_SPI_Transmit_DMA+0x34>
34014e66:	f240 71a5 	movw	r1, #1957	@ 0x7a5
34014e6a:	4882      	ldr	r0, [pc, #520]	@ (34015074 <HAL_SPI_Transmit_DMA+0x238>)
34014e6c:	f7ec ff1a 	bl	34001ca4 <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
34014e70:	68fb      	ldr	r3, [r7, #12]
34014e72:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34014e76:	b2db      	uxtb	r3, r3
34014e78:	2b01      	cmp	r3, #1
34014e7a:	d001      	beq.n	34014e80 <HAL_SPI_Transmit_DMA+0x44>
  {
    return HAL_BUSY;
34014e7c:	2302      	movs	r3, #2
34014e7e:	e1b7      	b.n	340151f0 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  if ((pData == NULL) || (Size == 0UL))
34014e80:	68bb      	ldr	r3, [r7, #8]
34014e82:	2b00      	cmp	r3, #0
34014e84:	d002      	beq.n	34014e8c <HAL_SPI_Transmit_DMA+0x50>
34014e86:	88fb      	ldrh	r3, [r7, #6]
34014e88:	2b00      	cmp	r3, #0
34014e8a:	d101      	bne.n	34014e90 <HAL_SPI_Transmit_DMA+0x54>
  {
    return HAL_ERROR;
34014e8c:	2301      	movs	r3, #1
34014e8e:	e1af      	b.n	340151f0 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
34014e90:	68fb      	ldr	r3, [r7, #12]
34014e92:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
34014e96:	2b01      	cmp	r3, #1
34014e98:	d101      	bne.n	34014e9e <HAL_SPI_Transmit_DMA+0x62>
34014e9a:	2302      	movs	r3, #2
34014e9c:	e1a8      	b.n	340151f0 <HAL_SPI_Transmit_DMA+0x3b4>
34014e9e:	68fb      	ldr	r3, [r7, #12]
34014ea0:	2201      	movs	r2, #1
34014ea2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
34014ea6:	68fb      	ldr	r3, [r7, #12]
34014ea8:	2203      	movs	r2, #3
34014eaa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
34014eae:	68fb      	ldr	r3, [r7, #12]
34014eb0:	2200      	movs	r2, #0
34014eb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
34014eb6:	68fb      	ldr	r3, [r7, #12]
34014eb8:	68ba      	ldr	r2, [r7, #8]
34014eba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
34014ebc:	68fb      	ldr	r3, [r7, #12]
34014ebe:	88fa      	ldrh	r2, [r7, #6]
34014ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
34014ec4:	68fb      	ldr	r3, [r7, #12]
34014ec6:	88fa      	ldrh	r2, [r7, #6]
34014ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
34014ecc:	68fb      	ldr	r3, [r7, #12]
34014ece:	2200      	movs	r2, #0
34014ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
34014ed2:	68fb      	ldr	r3, [r7, #12]
34014ed4:	2200      	movs	r2, #0
34014ed6:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
34014ed8:	68fb      	ldr	r3, [r7, #12]
34014eda:	2200      	movs	r2, #0
34014edc:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
34014ede:	68fb      	ldr	r3, [r7, #12]
34014ee0:	2200      	movs	r2, #0
34014ee2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
34014ee6:	68fb      	ldr	r3, [r7, #12]
34014ee8:	2200      	movs	r2, #0
34014eea:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
34014eee:	68fb      	ldr	r3, [r7, #12]
34014ef0:	689b      	ldr	r3, [r3, #8]
34014ef2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34014ef6:	d108      	bne.n	34014f0a <HAL_SPI_Transmit_DMA+0xce>
  {
    SPI_1LINE_TX(hspi);
34014ef8:	68fb      	ldr	r3, [r7, #12]
34014efa:	681b      	ldr	r3, [r3, #0]
34014efc:	681a      	ldr	r2, [r3, #0]
34014efe:	68fb      	ldr	r3, [r7, #12]
34014f00:	681b      	ldr	r3, [r3, #0]
34014f02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34014f06:	601a      	str	r2, [r3, #0]
34014f08:	e009      	b.n	34014f1e <HAL_SPI_Transmit_DMA+0xe2>
  }
  else
  {
    SPI_2LINES_TX(hspi);
34014f0a:	68fb      	ldr	r3, [r7, #12]
34014f0c:	681b      	ldr	r3, [r3, #0]
34014f0e:	68db      	ldr	r3, [r3, #12]
34014f10:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
34014f14:	68fb      	ldr	r3, [r7, #12]
34014f16:	681b      	ldr	r3, [r3, #0]
34014f18:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
34014f1c:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
34014f1e:	68fb      	ldr	r3, [r7, #12]
34014f20:	68db      	ldr	r3, [r3, #12]
34014f22:	2b0f      	cmp	r3, #15
34014f24:	d92d      	bls.n	34014f82 <HAL_SPI_Transmit_DMA+0x146>
34014f26:	68fb      	ldr	r3, [r7, #12]
34014f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014f2c:	699b      	ldr	r3, [r3, #24]
34014f2e:	2b02      	cmp	r3, #2
34014f30:	d027      	beq.n	34014f82 <HAL_SPI_Transmit_DMA+0x146>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014f32:	68fb      	ldr	r3, [r7, #12]
34014f34:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
34014f36:	4a50      	ldr	r2, [pc, #320]	@ (34015078 <HAL_SPI_Transmit_DMA+0x23c>)
34014f38:	4293      	cmp	r3, r2
34014f3a:	d02c      	beq.n	34014f96 <HAL_SPI_Transmit_DMA+0x15a>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014f3c:	68fb      	ldr	r3, [r7, #12]
34014f3e:	681b      	ldr	r3, [r3, #0]
34014f40:	4a4e      	ldr	r2, [pc, #312]	@ (3401507c <HAL_SPI_Transmit_DMA+0x240>)
34014f42:	4293      	cmp	r3, r2
34014f44:	d027      	beq.n	34014f96 <HAL_SPI_Transmit_DMA+0x15a>
34014f46:	68fb      	ldr	r3, [r7, #12]
34014f48:	681b      	ldr	r3, [r3, #0]
34014f4a:	4a4d      	ldr	r2, [pc, #308]	@ (34015080 <HAL_SPI_Transmit_DMA+0x244>)
34014f4c:	4293      	cmp	r3, r2
34014f4e:	d022      	beq.n	34014f96 <HAL_SPI_Transmit_DMA+0x15a>
34014f50:	68fb      	ldr	r3, [r7, #12]
34014f52:	681b      	ldr	r3, [r3, #0]
34014f54:	4a4b      	ldr	r2, [pc, #300]	@ (34015084 <HAL_SPI_Transmit_DMA+0x248>)
34014f56:	4293      	cmp	r3, r2
34014f58:	d01d      	beq.n	34014f96 <HAL_SPI_Transmit_DMA+0x15a>
34014f5a:	68fb      	ldr	r3, [r7, #12]
34014f5c:	681b      	ldr	r3, [r3, #0]
34014f5e:	4a4a      	ldr	r2, [pc, #296]	@ (34015088 <HAL_SPI_Transmit_DMA+0x24c>)
34014f60:	4293      	cmp	r3, r2
34014f62:	d018      	beq.n	34014f96 <HAL_SPI_Transmit_DMA+0x15a>
34014f64:	68fb      	ldr	r3, [r7, #12]
34014f66:	681b      	ldr	r3, [r3, #0]
34014f68:	4a48      	ldr	r2, [pc, #288]	@ (3401508c <HAL_SPI_Transmit_DMA+0x250>)
34014f6a:	4293      	cmp	r3, r2
34014f6c:	d013      	beq.n	34014f96 <HAL_SPI_Transmit_DMA+0x15a>
34014f6e:	68fb      	ldr	r3, [r7, #12]
34014f70:	681b      	ldr	r3, [r3, #0]
34014f72:	4a47      	ldr	r2, [pc, #284]	@ (34015090 <HAL_SPI_Transmit_DMA+0x254>)
34014f74:	4293      	cmp	r3, r2
34014f76:	d00e      	beq.n	34014f96 <HAL_SPI_Transmit_DMA+0x15a>
34014f78:	68fb      	ldr	r3, [r7, #12]
34014f7a:	681b      	ldr	r3, [r3, #0]
34014f7c:	4a45      	ldr	r2, [pc, #276]	@ (34015094 <HAL_SPI_Transmit_DMA+0x258>)
34014f7e:	4293      	cmp	r3, r2
34014f80:	d009      	beq.n	34014f96 <HAL_SPI_Transmit_DMA+0x15a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
34014f82:	68fb      	ldr	r3, [r7, #12]
34014f84:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014f86:	2b07      	cmp	r3, #7
34014f88:	d90b      	bls.n	34014fa2 <HAL_SPI_Transmit_DMA+0x166>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
34014f8a:	68fb      	ldr	r3, [r7, #12]
34014f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014f90:	699b      	ldr	r3, [r3, #24]
34014f92:	2b00      	cmp	r3, #0
34014f94:	d105      	bne.n	34014fa2 <HAL_SPI_Transmit_DMA+0x166>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
34014f96:	68fb      	ldr	r3, [r7, #12]
34014f98:	2200      	movs	r2, #0
34014f9a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
34014f9e:	2301      	movs	r3, #1
34014fa0:	e126      	b.n	340151f0 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
34014fa2:	68fb      	ldr	r3, [r7, #12]
34014fa4:	68db      	ldr	r3, [r3, #12]
34014fa6:	2b07      	cmp	r3, #7
34014fa8:	d820      	bhi.n	34014fec <HAL_SPI_Transmit_DMA+0x1b0>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
34014faa:	68fb      	ldr	r3, [r7, #12]
34014fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014fb0:	699b      	ldr	r3, [r3, #24]
34014fb2:	2b01      	cmp	r3, #1
34014fb4:	d109      	bne.n	34014fca <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
34014fb6:	68fb      	ldr	r3, [r7, #12]
34014fb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014fbc:	b29b      	uxth	r3, r3
34014fbe:	3301      	adds	r3, #1
34014fc0:	105b      	asrs	r3, r3, #1
34014fc2:	b29a      	uxth	r2, r3
34014fc4:	68fb      	ldr	r3, [r7, #12]
34014fc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
34014fca:	68fb      	ldr	r3, [r7, #12]
34014fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014fd0:	699b      	ldr	r3, [r3, #24]
34014fd2:	2b02      	cmp	r3, #2
34014fd4:	d11e      	bne.n	34015014 <HAL_SPI_Transmit_DMA+0x1d8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
34014fd6:	68fb      	ldr	r3, [r7, #12]
34014fd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014fdc:	b29b      	uxth	r3, r3
34014fde:	3303      	adds	r3, #3
34014fe0:	109b      	asrs	r3, r3, #2
34014fe2:	b29a      	uxth	r2, r3
34014fe4:	68fb      	ldr	r3, [r7, #12]
34014fe6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
34014fea:	e013      	b.n	34015014 <HAL_SPI_Transmit_DMA+0x1d8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
34014fec:	68fb      	ldr	r3, [r7, #12]
34014fee:	68db      	ldr	r3, [r3, #12]
34014ff0:	2b0f      	cmp	r3, #15
34014ff2:	d80f      	bhi.n	34015014 <HAL_SPI_Transmit_DMA+0x1d8>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
34014ff4:	68fb      	ldr	r3, [r7, #12]
34014ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014ffa:	699b      	ldr	r3, [r3, #24]
34014ffc:	2b02      	cmp	r3, #2
34014ffe:	d109      	bne.n	34015014 <HAL_SPI_Transmit_DMA+0x1d8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
34015000:	68fb      	ldr	r3, [r7, #12]
34015002:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34015006:	b29b      	uxth	r3, r3
34015008:	3301      	adds	r3, #1
3401500a:	105b      	asrs	r3, r3, #1
3401500c:	b29a      	uxth	r2, r3
3401500e:	68fb      	ldr	r3, [r7, #12]
34015010:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
34015014:	68fb      	ldr	r3, [r7, #12]
34015016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401501a:	4a1f      	ldr	r2, [pc, #124]	@ (34015098 <HAL_SPI_Transmit_DMA+0x25c>)
3401501c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
3401501e:	68fb      	ldr	r3, [r7, #12]
34015020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015024:	4a1d      	ldr	r2, [pc, #116]	@ (3401509c <HAL_SPI_Transmit_DMA+0x260>)
34015026:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
34015028:	68fb      	ldr	r3, [r7, #12]
3401502a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401502e:	4a1c      	ldr	r2, [pc, #112]	@ (340150a0 <HAL_SPI_Transmit_DMA+0x264>)
34015030:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
34015032:	68fb      	ldr	r3, [r7, #12]
34015034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015038:	2200      	movs	r2, #0
3401503a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
3401503c:	68fb      	ldr	r3, [r7, #12]
3401503e:	681b      	ldr	r3, [r3, #0]
34015040:	689a      	ldr	r2, [r3, #8]
34015042:	68fb      	ldr	r3, [r7, #12]
34015044:	681b      	ldr	r3, [r3, #0]
34015046:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3401504a:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
3401504c:	68fb      	ldr	r3, [r7, #12]
3401504e:	68db      	ldr	r3, [r3, #12]
34015050:	2b07      	cmp	r3, #7
34015052:	d804      	bhi.n	3401505e <HAL_SPI_Transmit_DMA+0x222>
  {
    hspi->TxXferCount = Size;
34015054:	68fb      	ldr	r3, [r7, #12]
34015056:	88fa      	ldrh	r2, [r7, #6]
34015058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
3401505c:	e028      	b.n	340150b0 <HAL_SPI_Transmit_DMA+0x274>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
3401505e:	68fb      	ldr	r3, [r7, #12]
34015060:	68db      	ldr	r3, [r3, #12]
34015062:	2b0f      	cmp	r3, #15
34015064:	d81e      	bhi.n	340150a4 <HAL_SPI_Transmit_DMA+0x268>
  {
    hspi->TxXferCount = Size * 2U;
34015066:	88fb      	ldrh	r3, [r7, #6]
34015068:	005b      	lsls	r3, r3, #1
3401506a:	b29a      	uxth	r2, r3
3401506c:	68fb      	ldr	r3, [r7, #12]
3401506e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
34015072:	e01d      	b.n	340150b0 <HAL_SPI_Transmit_DMA+0x274>
34015074:	3401ea64 	.word	0x3401ea64
34015078:	52003000 	.word	0x52003000
3401507c:	42003000 	.word	0x42003000
34015080:	50003800 	.word	0x50003800
34015084:	40003800 	.word	0x40003800
34015088:	50003c00 	.word	0x50003c00
3401508c:	40003c00 	.word	0x40003c00
34015090:	56001400 	.word	0x56001400
34015094:	46001400 	.word	0x46001400
34015098:	34015637 	.word	0x34015637
3401509c:	340155f1 	.word	0x340155f1
340150a0:	34015653 	.word	0x34015653
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
340150a4:	88fb      	ldrh	r3, [r7, #6]
340150a6:	009b      	lsls	r3, r3, #2
340150a8:	b29a      	uxth	r2, r3
340150aa:	68fb      	ldr	r3, [r7, #12]
340150ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
340150b0:	68fb      	ldr	r3, [r7, #12]
340150b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340150b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340150b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340150bc:	2b00      	cmp	r3, #0
340150be:	d02d      	beq.n	3401511c <HAL_SPI_Transmit_DMA+0x2e0>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
340150c0:	68fb      	ldr	r3, [r7, #12]
340150c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340150c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340150c8:	2b00      	cmp	r3, #0
340150ca:	d024      	beq.n	34015116 <HAL_SPI_Transmit_DMA+0x2da>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
340150cc:	68fb      	ldr	r3, [r7, #12]
340150ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
340150d2:	b29a      	uxth	r2, r3
340150d4:	68fb      	ldr	r3, [r7, #12]
340150d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340150da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340150dc:	681b      	ldr	r3, [r3, #0]
340150de:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
340150e0:	68fb      	ldr	r3, [r7, #12]
340150e2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
340150e4:	68fb      	ldr	r3, [r7, #12]
340150e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340150ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340150ec:	681b      	ldr	r3, [r3, #0]
340150ee:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
340150f0:	68fb      	ldr	r3, [r7, #12]
340150f2:	681b      	ldr	r3, [r3, #0]
340150f4:	f103 0220 	add.w	r2, r3, #32
340150f8:	68fb      	ldr	r3, [r7, #12]
340150fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340150fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34015100:	681b      	ldr	r3, [r3, #0]
34015102:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
34015104:	68fb      	ldr	r3, [r7, #12]
34015106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401510a:	4618      	mov	r0, r3
3401510c:	f7f0 fbb3 	bl	34005876 <HAL_DMAEx_List_Start_IT>
34015110:	4603      	mov	r3, r0
34015112:	75fb      	strb	r3, [r7, #23]
34015114:	e014      	b.n	34015140 <HAL_SPI_Transmit_DMA+0x304>
    }
    else
    {
      status = HAL_ERROR;
34015116:	2301      	movs	r3, #1
34015118:	75fb      	strb	r3, [r7, #23]
3401511a:	e011      	b.n	34015140 <HAL_SPI_Transmit_DMA+0x304>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
3401511c:	68fb      	ldr	r3, [r7, #12]
3401511e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
34015122:	68fb      	ldr	r3, [r7, #12]
34015124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34015126:	4619      	mov	r1, r3
34015128:	68fb      	ldr	r3, [r7, #12]
3401512a:	681b      	ldr	r3, [r3, #0]
3401512c:	3320      	adds	r3, #32
3401512e:	461a      	mov	r2, r3
                              hspi->TxXferCount);
34015130:	68fb      	ldr	r3, [r7, #12]
34015132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34015136:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
34015138:	f7f0 f85c 	bl	340051f4 <HAL_DMA_Start_IT>
3401513c:	4603      	mov	r3, r0
3401513e:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
34015140:	7dfb      	ldrb	r3, [r7, #23]
34015142:	2b00      	cmp	r3, #0
34015144:	d011      	beq.n	3401516a <HAL_SPI_Transmit_DMA+0x32e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
34015146:	68fb      	ldr	r3, [r7, #12]
34015148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401514c:	f043 0210 	orr.w	r2, r3, #16
34015150:	68fb      	ldr	r3, [r7, #12]
34015152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
34015156:	68fb      	ldr	r3, [r7, #12]
34015158:	2201      	movs	r2, #1
3401515a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
3401515e:	68fb      	ldr	r3, [r7, #12]
34015160:	2200      	movs	r2, #0
34015162:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
34015166:	2301      	movs	r3, #1
34015168:	e042      	b.n	340151f0 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
3401516a:	68fb      	ldr	r3, [r7, #12]
3401516c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34015172:	2b81      	cmp	r3, #129	@ 0x81
34015174:	d108      	bne.n	34015188 <HAL_SPI_Transmit_DMA+0x34c>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
34015176:	68fb      	ldr	r3, [r7, #12]
34015178:	681b      	ldr	r3, [r3, #0]
3401517a:	685b      	ldr	r3, [r3, #4]
3401517c:	68fa      	ldr	r2, [r7, #12]
3401517e:	6812      	ldr	r2, [r2, #0]
34015180:	0c1b      	lsrs	r3, r3, #16
34015182:	041b      	lsls	r3, r3, #16
34015184:	6053      	str	r3, [r2, #4]
34015186:	e009      	b.n	3401519c <HAL_SPI_Transmit_DMA+0x360>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
34015188:	68fb      	ldr	r3, [r7, #12]
3401518a:	681b      	ldr	r3, [r3, #0]
3401518c:	685b      	ldr	r3, [r3, #4]
3401518e:	0c1b      	lsrs	r3, r3, #16
34015190:	041b      	lsls	r3, r3, #16
34015192:	88f9      	ldrh	r1, [r7, #6]
34015194:	68fa      	ldr	r2, [r7, #12]
34015196:	6812      	ldr	r2, [r2, #0]
34015198:	430b      	orrs	r3, r1
3401519a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
3401519c:	68fb      	ldr	r3, [r7, #12]
3401519e:	681b      	ldr	r3, [r3, #0]
340151a0:	689a      	ldr	r2, [r3, #8]
340151a2:	68fb      	ldr	r3, [r7, #12]
340151a4:	681b      	ldr	r3, [r3, #0]
340151a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
340151aa:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
340151ac:	68fb      	ldr	r3, [r7, #12]
340151ae:	681b      	ldr	r3, [r3, #0]
340151b0:	691a      	ldr	r2, [r3, #16]
340151b2:	68fb      	ldr	r3, [r7, #12]
340151b4:	681b      	ldr	r3, [r3, #0]
340151b6:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
340151ba:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
340151bc:	68fb      	ldr	r3, [r7, #12]
340151be:	681b      	ldr	r3, [r3, #0]
340151c0:	681a      	ldr	r2, [r3, #0]
340151c2:	68fb      	ldr	r3, [r7, #12]
340151c4:	681b      	ldr	r3, [r3, #0]
340151c6:	f042 0201 	orr.w	r2, r2, #1
340151ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
340151cc:	68fb      	ldr	r3, [r7, #12]
340151ce:	685b      	ldr	r3, [r3, #4]
340151d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
340151d4:	d107      	bne.n	340151e6 <HAL_SPI_Transmit_DMA+0x3aa>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
340151d6:	68fb      	ldr	r3, [r7, #12]
340151d8:	681b      	ldr	r3, [r3, #0]
340151da:	681a      	ldr	r2, [r3, #0]
340151dc:	68fb      	ldr	r3, [r7, #12]
340151de:	681b      	ldr	r3, [r3, #0]
340151e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
340151e4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
340151e6:	68fb      	ldr	r3, [r7, #12]
340151e8:	2200      	movs	r2, #0
340151ea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
340151ee:	2300      	movs	r3, #0
}
340151f0:	4618      	mov	r0, r3
340151f2:	3718      	adds	r7, #24
340151f4:	46bd      	mov	sp, r7
340151f6:	bd80      	pop	{r7, pc}

340151f8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
340151f8:	b580      	push	{r7, lr}
340151fa:	b08a      	sub	sp, #40	@ 0x28
340151fc:	af00      	add	r7, sp, #0
340151fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
34015200:	687b      	ldr	r3, [r7, #4]
34015202:	681b      	ldr	r3, [r3, #0]
34015204:	691b      	ldr	r3, [r3, #16]
34015206:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
34015208:	687b      	ldr	r3, [r7, #4]
3401520a:	681b      	ldr	r3, [r3, #0]
3401520c:	695b      	ldr	r3, [r3, #20]
3401520e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
34015210:	6a3a      	ldr	r2, [r7, #32]
34015212:	69fb      	ldr	r3, [r7, #28]
34015214:	4013      	ands	r3, r2
34015216:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
34015218:	687b      	ldr	r3, [r7, #4]
3401521a:	681b      	ldr	r3, [r3, #0]
3401521c:	689b      	ldr	r3, [r3, #8]
3401521e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
34015220:	2300      	movs	r3, #0
34015222:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
34015224:	687b      	ldr	r3, [r7, #4]
34015226:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
3401522a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
3401522c:	687b      	ldr	r3, [r7, #4]
3401522e:	681b      	ldr	r3, [r3, #0]
34015230:	3330      	adds	r3, #48	@ 0x30
34015232:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
34015234:	69fb      	ldr	r3, [r7, #28]
34015236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3401523a:	2b00      	cmp	r3, #0
3401523c:	d010      	beq.n	34015260 <HAL_SPI_IRQHandler+0x68>
3401523e:	6a3b      	ldr	r3, [r7, #32]
34015240:	f003 0308 	and.w	r3, r3, #8
34015244:	2b00      	cmp	r3, #0
34015246:	d00b      	beq.n	34015260 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
34015248:	687b      	ldr	r3, [r7, #4]
3401524a:	681b      	ldr	r3, [r3, #0]
3401524c:	699a      	ldr	r2, [r3, #24]
3401524e:	687b      	ldr	r3, [r7, #4]
34015250:	681b      	ldr	r3, [r3, #0]
34015252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34015256:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
34015258:	6878      	ldr	r0, [r7, #4]
3401525a:	f000 f9bf 	bl	340155dc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
3401525e:	e19a      	b.n	34015596 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
34015260:	69bb      	ldr	r3, [r7, #24]
34015262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015266:	2b00      	cmp	r3, #0
34015268:	d113      	bne.n	34015292 <HAL_SPI_IRQHandler+0x9a>
3401526a:	69bb      	ldr	r3, [r7, #24]
3401526c:	f003 0320 	and.w	r3, r3, #32
34015270:	2b00      	cmp	r3, #0
34015272:	d10e      	bne.n	34015292 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
34015274:	69bb      	ldr	r3, [r7, #24]
34015276:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
3401527a:	2b00      	cmp	r3, #0
3401527c:	d009      	beq.n	34015292 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
3401527e:	687b      	ldr	r3, [r7, #4]
34015280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34015282:	6878      	ldr	r0, [r7, #4]
34015284:	4798      	blx	r3
    hspi->RxISR(hspi);
34015286:	687b      	ldr	r3, [r7, #4]
34015288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3401528a:	6878      	ldr	r0, [r7, #4]
3401528c:	4798      	blx	r3
    handled = 1UL;
3401528e:	2301      	movs	r3, #1
34015290:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
34015292:	69bb      	ldr	r3, [r7, #24]
34015294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015298:	2b00      	cmp	r3, #0
3401529a:	d10f      	bne.n	340152bc <HAL_SPI_IRQHandler+0xc4>
3401529c:	69bb      	ldr	r3, [r7, #24]
3401529e:	f003 0301 	and.w	r3, r3, #1
340152a2:	2b00      	cmp	r3, #0
340152a4:	d00a      	beq.n	340152bc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
340152a6:	69bb      	ldr	r3, [r7, #24]
340152a8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
340152ac:	2b00      	cmp	r3, #0
340152ae:	d105      	bne.n	340152bc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
340152b0:	687b      	ldr	r3, [r7, #4]
340152b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
340152b4:	6878      	ldr	r0, [r7, #4]
340152b6:	4798      	blx	r3
    handled = 1UL;
340152b8:	2301      	movs	r3, #1
340152ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
340152bc:	69bb      	ldr	r3, [r7, #24]
340152be:	f003 0320 	and.w	r3, r3, #32
340152c2:	2b00      	cmp	r3, #0
340152c4:	d10f      	bne.n	340152e6 <HAL_SPI_IRQHandler+0xee>
340152c6:	69bb      	ldr	r3, [r7, #24]
340152c8:	f003 0302 	and.w	r3, r3, #2
340152cc:	2b00      	cmp	r3, #0
340152ce:	d00a      	beq.n	340152e6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
340152d0:	69bb      	ldr	r3, [r7, #24]
340152d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
340152d6:	2b00      	cmp	r3, #0
340152d8:	d105      	bne.n	340152e6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
340152da:	687b      	ldr	r3, [r7, #4]
340152dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340152de:	6878      	ldr	r0, [r7, #4]
340152e0:	4798      	blx	r3
    handled = 1UL;
340152e2:	2301      	movs	r3, #1
340152e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
340152e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340152e8:	2b00      	cmp	r3, #0
340152ea:	f040 814f 	bne.w	3401558c <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
340152ee:	69bb      	ldr	r3, [r7, #24]
340152f0:	f003 0308 	and.w	r3, r3, #8
340152f4:	2b00      	cmp	r3, #0
340152f6:	f000 808b 	beq.w	34015410 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
340152fa:	687b      	ldr	r3, [r7, #4]
340152fc:	681b      	ldr	r3, [r3, #0]
340152fe:	699a      	ldr	r2, [r3, #24]
34015300:	687b      	ldr	r3, [r7, #4]
34015302:	681b      	ldr	r3, [r3, #0]
34015304:	f042 0208 	orr.w	r2, r2, #8
34015308:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
3401530a:	687b      	ldr	r3, [r7, #4]
3401530c:	681b      	ldr	r3, [r3, #0]
3401530e:	699a      	ldr	r2, [r3, #24]
34015310:	687b      	ldr	r3, [r7, #4]
34015312:	681b      	ldr	r3, [r3, #0]
34015314:	f042 0210 	orr.w	r2, r2, #16
34015318:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
3401531a:	687b      	ldr	r3, [r7, #4]
3401531c:	681b      	ldr	r3, [r3, #0]
3401531e:	699a      	ldr	r2, [r3, #24]
34015320:	687b      	ldr	r3, [r7, #4]
34015322:	681b      	ldr	r3, [r3, #0]
34015324:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34015328:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
3401532a:	687b      	ldr	r3, [r7, #4]
3401532c:	681b      	ldr	r3, [r3, #0]
3401532e:	691a      	ldr	r2, [r3, #16]
34015330:	687b      	ldr	r3, [r7, #4]
34015332:	681b      	ldr	r3, [r3, #0]
34015334:	f022 0208 	bic.w	r2, r2, #8
34015338:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
3401533a:	687b      	ldr	r3, [r7, #4]
3401533c:	681b      	ldr	r3, [r3, #0]
3401533e:	689b      	ldr	r3, [r3, #8]
34015340:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
34015344:	2b00      	cmp	r3, #0
34015346:	d13d      	bne.n	340153c4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
34015348:	e036      	b.n	340153b8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
3401534a:	687b      	ldr	r3, [r7, #4]
3401534c:	68db      	ldr	r3, [r3, #12]
3401534e:	2b0f      	cmp	r3, #15
34015350:	d90b      	bls.n	3401536a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
34015352:	687b      	ldr	r3, [r7, #4]
34015354:	681a      	ldr	r2, [r3, #0]
34015356:	687b      	ldr	r3, [r7, #4]
34015358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3401535a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
3401535c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
3401535e:	687b      	ldr	r3, [r7, #4]
34015360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015362:	1d1a      	adds	r2, r3, #4
34015364:	687b      	ldr	r3, [r7, #4]
34015366:	66da      	str	r2, [r3, #108]	@ 0x6c
34015368:	e01d      	b.n	340153a6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
3401536a:	687b      	ldr	r3, [r7, #4]
3401536c:	68db      	ldr	r3, [r3, #12]
3401536e:	2b07      	cmp	r3, #7
34015370:	d90b      	bls.n	3401538a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
34015372:	687b      	ldr	r3, [r7, #4]
34015374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015376:	68fa      	ldr	r2, [r7, #12]
34015378:	8812      	ldrh	r2, [r2, #0]
3401537a:	b292      	uxth	r2, r2
3401537c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
3401537e:	687b      	ldr	r3, [r7, #4]
34015380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015382:	1c9a      	adds	r2, r3, #2
34015384:	687b      	ldr	r3, [r7, #4]
34015386:	66da      	str	r2, [r3, #108]	@ 0x6c
34015388:	e00d      	b.n	340153a6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
3401538a:	687b      	ldr	r3, [r7, #4]
3401538c:	681b      	ldr	r3, [r3, #0]
3401538e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
34015392:	687b      	ldr	r3, [r7, #4]
34015394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015396:	7812      	ldrb	r2, [r2, #0]
34015398:	b2d2      	uxtb	r2, r2
3401539a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
3401539c:	687b      	ldr	r3, [r7, #4]
3401539e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
340153a0:	1c5a      	adds	r2, r3, #1
340153a2:	687b      	ldr	r3, [r7, #4]
340153a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
340153a6:	687b      	ldr	r3, [r7, #4]
340153a8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
340153ac:	b29b      	uxth	r3, r3
340153ae:	3b01      	subs	r3, #1
340153b0:	b29a      	uxth	r2, r3
340153b2:	687b      	ldr	r3, [r7, #4]
340153b4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
340153b8:	687b      	ldr	r3, [r7, #4]
340153ba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
340153be:	b29b      	uxth	r3, r3
340153c0:	2b00      	cmp	r3, #0
340153c2:	d1c2      	bne.n	3401534a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
340153c4:	6878      	ldr	r0, [r7, #4]
340153c6:	f000 f981 	bl	340156cc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
340153ca:	687b      	ldr	r3, [r7, #4]
340153cc:	2201      	movs	r2, #1
340153ce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
340153d2:	687b      	ldr	r3, [r7, #4]
340153d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340153d8:	2b00      	cmp	r3, #0
340153da:	d003      	beq.n	340153e4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
340153dc:	6878      	ldr	r0, [r7, #4]
340153de:	f002 fcdd 	bl	34017d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
340153e2:	e0d8      	b.n	34015596 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
340153e4:	7cfb      	ldrb	r3, [r7, #19]
340153e6:	2b05      	cmp	r3, #5
340153e8:	d103      	bne.n	340153f2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
340153ea:	6878      	ldr	r0, [r7, #4]
340153ec:	f000 f8e2 	bl	340155b4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
340153f0:	e0ce      	b.n	34015590 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
340153f2:	7cfb      	ldrb	r3, [r7, #19]
340153f4:	2b04      	cmp	r3, #4
340153f6:	d103      	bne.n	34015400 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
340153f8:	6878      	ldr	r0, [r7, #4]
340153fa:	f000 f8d1 	bl	340155a0 <HAL_SPI_RxCpltCallback>
    return;
340153fe:	e0c7      	b.n	34015590 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
34015400:	7cfb      	ldrb	r3, [r7, #19]
34015402:	2b03      	cmp	r3, #3
34015404:	f040 80c4 	bne.w	34015590 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
34015408:	6878      	ldr	r0, [r7, #4]
3401540a:	f002 fcab 	bl	34017d64 <HAL_SPI_TxCpltCallback>
    return;
3401540e:	e0bf      	b.n	34015590 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
34015410:	69bb      	ldr	r3, [r7, #24]
34015412:	f403 7358 	and.w	r3, r3, #864	@ 0x360
34015416:	2b00      	cmp	r3, #0
34015418:	f000 80bd 	beq.w	34015596 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
3401541c:	69bb      	ldr	r3, [r7, #24]
3401541e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015422:	2b00      	cmp	r3, #0
34015424:	d00f      	beq.n	34015446 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
34015426:	687b      	ldr	r3, [r7, #4]
34015428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401542c:	f043 0204 	orr.w	r2, r3, #4
34015430:	687b      	ldr	r3, [r7, #4]
34015432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
34015436:	687b      	ldr	r3, [r7, #4]
34015438:	681b      	ldr	r3, [r3, #0]
3401543a:	699a      	ldr	r2, [r3, #24]
3401543c:	687b      	ldr	r3, [r7, #4]
3401543e:	681b      	ldr	r3, [r3, #0]
34015440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
34015444:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
34015446:	69bb      	ldr	r3, [r7, #24]
34015448:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3401544c:	2b00      	cmp	r3, #0
3401544e:	d00f      	beq.n	34015470 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
34015450:	687b      	ldr	r3, [r7, #4]
34015452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015456:	f043 0201 	orr.w	r2, r3, #1
3401545a:	687b      	ldr	r3, [r7, #4]
3401545c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
34015460:	687b      	ldr	r3, [r7, #4]
34015462:	681b      	ldr	r3, [r3, #0]
34015464:	699a      	ldr	r2, [r3, #24]
34015466:	687b      	ldr	r3, [r7, #4]
34015468:	681b      	ldr	r3, [r3, #0]
3401546a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
3401546e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
34015470:	69bb      	ldr	r3, [r7, #24]
34015472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34015476:	2b00      	cmp	r3, #0
34015478:	d00f      	beq.n	3401549a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
3401547a:	687b      	ldr	r3, [r7, #4]
3401547c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015480:	f043 0208 	orr.w	r2, r3, #8
34015484:	687b      	ldr	r3, [r7, #4]
34015486:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
3401548a:	687b      	ldr	r3, [r7, #4]
3401548c:	681b      	ldr	r3, [r3, #0]
3401548e:	699a      	ldr	r2, [r3, #24]
34015490:	687b      	ldr	r3, [r7, #4]
34015492:	681b      	ldr	r3, [r3, #0]
34015494:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34015498:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
3401549a:	69bb      	ldr	r3, [r7, #24]
3401549c:	f003 0320 	and.w	r3, r3, #32
340154a0:	2b00      	cmp	r3, #0
340154a2:	d00f      	beq.n	340154c4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
340154a4:	687b      	ldr	r3, [r7, #4]
340154a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340154aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
340154ae:	687b      	ldr	r3, [r7, #4]
340154b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
340154b4:	687b      	ldr	r3, [r7, #4]
340154b6:	681b      	ldr	r3, [r3, #0]
340154b8:	699a      	ldr	r2, [r3, #24]
340154ba:	687b      	ldr	r3, [r7, #4]
340154bc:	681b      	ldr	r3, [r3, #0]
340154be:	f042 0220 	orr.w	r2, r2, #32
340154c2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
340154c4:	687b      	ldr	r3, [r7, #4]
340154c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340154ca:	2b00      	cmp	r3, #0
340154cc:	d062      	beq.n	34015594 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
340154ce:	687b      	ldr	r3, [r7, #4]
340154d0:	681b      	ldr	r3, [r3, #0]
340154d2:	681a      	ldr	r2, [r3, #0]
340154d4:	687b      	ldr	r3, [r7, #4]
340154d6:	681b      	ldr	r3, [r3, #0]
340154d8:	f022 0201 	bic.w	r2, r2, #1
340154dc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
340154de:	687b      	ldr	r3, [r7, #4]
340154e0:	681b      	ldr	r3, [r3, #0]
340154e2:	691b      	ldr	r3, [r3, #16]
340154e4:	687a      	ldr	r2, [r7, #4]
340154e6:	6812      	ldr	r2, [r2, #0]
340154e8:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
340154ec:	f023 0303 	bic.w	r3, r3, #3
340154f0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
340154f2:	697b      	ldr	r3, [r7, #20]
340154f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
340154f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
340154fc:	d13e      	bne.n	3401557c <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
340154fe:	687b      	ldr	r3, [r7, #4]
34015500:	681b      	ldr	r3, [r3, #0]
34015502:	689a      	ldr	r2, [r3, #8]
34015504:	687b      	ldr	r3, [r7, #4]
34015506:	681b      	ldr	r3, [r3, #0]
34015508:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
3401550c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
3401550e:	687b      	ldr	r3, [r7, #4]
34015510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34015514:	2b00      	cmp	r3, #0
34015516:	d015      	beq.n	34015544 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
34015518:	687b      	ldr	r3, [r7, #4]
3401551a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3401551e:	4a1f      	ldr	r2, [pc, #124]	@ (3401559c <HAL_SPI_IRQHandler+0x3a4>)
34015520:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
34015522:	687b      	ldr	r3, [r7, #4]
34015524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34015528:	4618      	mov	r0, r3
3401552a:	f7ef fed1 	bl	340052d0 <HAL_DMA_Abort_IT>
3401552e:	4603      	mov	r3, r0
34015530:	2b00      	cmp	r3, #0
34015532:	d007      	beq.n	34015544 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
34015534:	687b      	ldr	r3, [r7, #4]
34015536:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401553a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
3401553e:	687b      	ldr	r3, [r7, #4]
34015540:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
34015544:	687b      	ldr	r3, [r7, #4]
34015546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401554a:	2b00      	cmp	r3, #0
3401554c:	d022      	beq.n	34015594 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
3401554e:	687b      	ldr	r3, [r7, #4]
34015550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015554:	4a11      	ldr	r2, [pc, #68]	@ (3401559c <HAL_SPI_IRQHandler+0x3a4>)
34015556:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
34015558:	687b      	ldr	r3, [r7, #4]
3401555a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401555e:	4618      	mov	r0, r3
34015560:	f7ef feb6 	bl	340052d0 <HAL_DMA_Abort_IT>
34015564:	4603      	mov	r3, r0
34015566:	2b00      	cmp	r3, #0
34015568:	d014      	beq.n	34015594 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
3401556a:	687b      	ldr	r3, [r7, #4]
3401556c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015570:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
34015574:	687b      	ldr	r3, [r7, #4]
34015576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
3401557a:	e00b      	b.n	34015594 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
3401557c:	687b      	ldr	r3, [r7, #4]
3401557e:	2201      	movs	r2, #1
34015580:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
34015584:	6878      	ldr	r0, [r7, #4]
34015586:	f002 fc09 	bl	34017d9c <HAL_SPI_ErrorCallback>
    return;
3401558a:	e003      	b.n	34015594 <HAL_SPI_IRQHandler+0x39c>
    return;
3401558c:	bf00      	nop
3401558e:	e002      	b.n	34015596 <HAL_SPI_IRQHandler+0x39e>
    return;
34015590:	bf00      	nop
34015592:	e000      	b.n	34015596 <HAL_SPI_IRQHandler+0x39e>
    return;
34015594:	bf00      	nop
  }
}
34015596:	3728      	adds	r7, #40	@ 0x28
34015598:	46bd      	mov	sp, r7
3401559a:	bd80      	pop	{r7, pc}
3401559c:	34015699 	.word	0x34015699

340155a0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340155a0:	b480      	push	{r7}
340155a2:	b083      	sub	sp, #12
340155a4:	af00      	add	r7, sp, #0
340155a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
340155a8:	bf00      	nop
340155aa:	370c      	adds	r7, #12
340155ac:	46bd      	mov	sp, r7
340155ae:	f85d 7b04 	ldr.w	r7, [sp], #4
340155b2:	4770      	bx	lr

340155b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340155b4:	b480      	push	{r7}
340155b6:	b083      	sub	sp, #12
340155b8:	af00      	add	r7, sp, #0
340155ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
340155bc:	bf00      	nop
340155be:	370c      	adds	r7, #12
340155c0:	46bd      	mov	sp, r7
340155c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340155c6:	4770      	bx	lr

340155c8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340155c8:	b480      	push	{r7}
340155ca:	b083      	sub	sp, #12
340155cc:	af00      	add	r7, sp, #0
340155ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
340155d0:	bf00      	nop
340155d2:	370c      	adds	r7, #12
340155d4:	46bd      	mov	sp, r7
340155d6:	f85d 7b04 	ldr.w	r7, [sp], #4
340155da:	4770      	bx	lr

340155dc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340155dc:	b480      	push	{r7}
340155de:	b083      	sub	sp, #12
340155e0:	af00      	add	r7, sp, #0
340155e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
340155e4:	bf00      	nop
340155e6:	370c      	adds	r7, #12
340155e8:	46bd      	mov	sp, r7
340155ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340155ee:	4770      	bx	lr

340155f0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
340155f0:	b580      	push	{r7, lr}
340155f2:	b084      	sub	sp, #16
340155f4:	af00      	add	r7, sp, #0
340155f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
340155f8:	687b      	ldr	r3, [r7, #4]
340155fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
340155fc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
340155fe:	68fb      	ldr	r3, [r7, #12]
34015600:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34015604:	b2db      	uxtb	r3, r3
34015606:	2b07      	cmp	r3, #7
34015608:	d011      	beq.n	3401562e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
3401560a:	68fb      	ldr	r3, [r7, #12]
3401560c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34015612:	2b81      	cmp	r3, #129	@ 0x81
34015614:	d103      	bne.n	3401561e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
34015616:	68f8      	ldr	r0, [r7, #12]
34015618:	f002 fba4 	bl	34017d64 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
3401561c:	e007      	b.n	3401562e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
3401561e:	68fb      	ldr	r3, [r7, #12]
34015620:	681b      	ldr	r3, [r3, #0]
34015622:	691a      	ldr	r2, [r3, #16]
34015624:	68fb      	ldr	r3, [r7, #12]
34015626:	681b      	ldr	r3, [r3, #0]
34015628:	f042 0208 	orr.w	r2, r2, #8
3401562c:	611a      	str	r2, [r3, #16]
}
3401562e:	bf00      	nop
34015630:	3710      	adds	r7, #16
34015632:	46bd      	mov	sp, r7
34015634:	bd80      	pop	{r7, pc}

34015636 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
34015636:	b580      	push	{r7, lr}
34015638:	b084      	sub	sp, #16
3401563a:	af00      	add	r7, sp, #0
3401563c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
3401563e:	687b      	ldr	r3, [r7, #4]
34015640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34015642:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
34015644:	68f8      	ldr	r0, [r7, #12]
34015646:	f7ff ffbf 	bl	340155c8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
3401564a:	bf00      	nop
3401564c:	3710      	adds	r7, #16
3401564e:	46bd      	mov	sp, r7
34015650:	bd80      	pop	{r7, pc}

34015652 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
34015652:	b580      	push	{r7, lr}
34015654:	b084      	sub	sp, #16
34015656:	af00      	add	r7, sp, #0
34015658:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3401565a:	687b      	ldr	r3, [r7, #4]
3401565c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3401565e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
34015660:	6878      	ldr	r0, [r7, #4]
34015662:	f7ef ffc7 	bl	340055f4 <HAL_DMA_GetError>
34015666:	4603      	mov	r3, r0
34015668:	2b00      	cmp	r3, #0
3401566a:	d011      	beq.n	34015690 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
3401566c:	68f8      	ldr	r0, [r7, #12]
3401566e:	f000 f82d 	bl	340156cc <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
34015672:	68fb      	ldr	r3, [r7, #12]
34015674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015678:	f043 0210 	orr.w	r2, r3, #16
3401567c:	68fb      	ldr	r3, [r7, #12]
3401567e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
34015682:	68fb      	ldr	r3, [r7, #12]
34015684:	2201      	movs	r2, #1
34015686:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
3401568a:	68f8      	ldr	r0, [r7, #12]
3401568c:	f002 fb86 	bl	34017d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
34015690:	bf00      	nop
34015692:	3710      	adds	r7, #16
34015694:	46bd      	mov	sp, r7
34015696:	bd80      	pop	{r7, pc}

34015698 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
34015698:	b580      	push	{r7, lr}
3401569a:	b084      	sub	sp, #16
3401569c:	af00      	add	r7, sp, #0
3401569e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
340156a0:	687b      	ldr	r3, [r7, #4]
340156a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
340156a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
340156a6:	68fb      	ldr	r3, [r7, #12]
340156a8:	2200      	movs	r2, #0
340156aa:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
340156ae:	68fb      	ldr	r3, [r7, #12]
340156b0:	2200      	movs	r2, #0
340156b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
340156b6:	68fb      	ldr	r3, [r7, #12]
340156b8:	2201      	movs	r2, #1
340156ba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
340156be:	68f8      	ldr	r0, [r7, #12]
340156c0:	f002 fb6c 	bl	34017d9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
340156c4:	bf00      	nop
340156c6:	3710      	adds	r7, #16
340156c8:	46bd      	mov	sp, r7
340156ca:	bd80      	pop	{r7, pc}

340156cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
340156cc:	b480      	push	{r7}
340156ce:	b085      	sub	sp, #20
340156d0:	af00      	add	r7, sp, #0
340156d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
340156d4:	687b      	ldr	r3, [r7, #4]
340156d6:	681b      	ldr	r3, [r3, #0]
340156d8:	695b      	ldr	r3, [r3, #20]
340156da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
340156dc:	687b      	ldr	r3, [r7, #4]
340156de:	681b      	ldr	r3, [r3, #0]
340156e0:	699a      	ldr	r2, [r3, #24]
340156e2:	687b      	ldr	r3, [r7, #4]
340156e4:	681b      	ldr	r3, [r3, #0]
340156e6:	f042 0208 	orr.w	r2, r2, #8
340156ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
340156ec:	687b      	ldr	r3, [r7, #4]
340156ee:	681b      	ldr	r3, [r3, #0]
340156f0:	699a      	ldr	r2, [r3, #24]
340156f2:	687b      	ldr	r3, [r7, #4]
340156f4:	681b      	ldr	r3, [r3, #0]
340156f6:	f042 0210 	orr.w	r2, r2, #16
340156fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
340156fc:	687b      	ldr	r3, [r7, #4]
340156fe:	681b      	ldr	r3, [r3, #0]
34015700:	681a      	ldr	r2, [r3, #0]
34015702:	687b      	ldr	r3, [r7, #4]
34015704:	681b      	ldr	r3, [r3, #0]
34015706:	f022 0201 	bic.w	r2, r2, #1
3401570a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
3401570c:	687b      	ldr	r3, [r7, #4]
3401570e:	681b      	ldr	r3, [r3, #0]
34015710:	691b      	ldr	r3, [r3, #16]
34015712:	687a      	ldr	r2, [r7, #4]
34015714:	6812      	ldr	r2, [r2, #0]
34015716:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
3401571a:	f023 0303 	bic.w	r3, r3, #3
3401571e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
34015720:	687b      	ldr	r3, [r7, #4]
34015722:	681b      	ldr	r3, [r3, #0]
34015724:	689a      	ldr	r2, [r3, #8]
34015726:	687b      	ldr	r3, [r7, #4]
34015728:	681b      	ldr	r3, [r3, #0]
3401572a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
3401572e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
34015730:	687b      	ldr	r3, [r7, #4]
34015732:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34015736:	b2db      	uxtb	r3, r3
34015738:	2b04      	cmp	r3, #4
3401573a:	d014      	beq.n	34015766 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
3401573c:	68fb      	ldr	r3, [r7, #12]
3401573e:	f003 0320 	and.w	r3, r3, #32
34015742:	2b00      	cmp	r3, #0
34015744:	d00f      	beq.n	34015766 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
34015746:	687b      	ldr	r3, [r7, #4]
34015748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401574c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
34015750:	687b      	ldr	r3, [r7, #4]
34015752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
34015756:	687b      	ldr	r3, [r7, #4]
34015758:	681b      	ldr	r3, [r3, #0]
3401575a:	699a      	ldr	r2, [r3, #24]
3401575c:	687b      	ldr	r3, [r7, #4]
3401575e:	681b      	ldr	r3, [r3, #0]
34015760:	f042 0220 	orr.w	r2, r2, #32
34015764:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
34015766:	687b      	ldr	r3, [r7, #4]
34015768:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
3401576c:	b2db      	uxtb	r3, r3
3401576e:	2b03      	cmp	r3, #3
34015770:	d02e      	beq.n	340157d0 <SPI_CloseTransfer+0x104>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
34015772:	68fb      	ldr	r3, [r7, #12]
34015774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015778:	2b00      	cmp	r3, #0
3401577a:	d00f      	beq.n	3401579c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
3401577c:	687b      	ldr	r3, [r7, #4]
3401577e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015782:	f043 0204 	orr.w	r2, r3, #4
34015786:	687b      	ldr	r3, [r7, #4]
34015788:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
3401578c:	687b      	ldr	r3, [r7, #4]
3401578e:	681b      	ldr	r3, [r3, #0]
34015790:	699a      	ldr	r2, [r3, #24]
34015792:	687b      	ldr	r3, [r7, #4]
34015794:	681b      	ldr	r3, [r3, #0]
34015796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
3401579a:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3401579c:	687b      	ldr	r3, [r7, #4]
3401579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340157a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
340157a4:	d114      	bne.n	340157d0 <SPI_CloseTransfer+0x104>
    {
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
340157a6:	68fb      	ldr	r3, [r7, #12]
340157a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340157ac:	2b00      	cmp	r3, #0
340157ae:	d00f      	beq.n	340157d0 <SPI_CloseTransfer+0x104>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
340157b0:	687b      	ldr	r3, [r7, #4]
340157b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340157b6:	f043 0202 	orr.w	r2, r3, #2
340157ba:	687b      	ldr	r3, [r7, #4]
340157bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
340157c0:	687b      	ldr	r3, [r7, #4]
340157c2:	681b      	ldr	r3, [r3, #0]
340157c4:	699a      	ldr	r2, [r3, #24]
340157c6:	687b      	ldr	r3, [r7, #4]
340157c8:	681b      	ldr	r3, [r3, #0]
340157ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
340157ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
340157d0:	68fb      	ldr	r3, [r7, #12]
340157d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340157d6:	2b00      	cmp	r3, #0
340157d8:	d00f      	beq.n	340157fa <SPI_CloseTransfer+0x12e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
340157da:	687b      	ldr	r3, [r7, #4]
340157dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340157e0:	f043 0201 	orr.w	r2, r3, #1
340157e4:	687b      	ldr	r3, [r7, #4]
340157e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
340157ea:	687b      	ldr	r3, [r7, #4]
340157ec:	681b      	ldr	r3, [r3, #0]
340157ee:	699a      	ldr	r2, [r3, #24]
340157f0:	687b      	ldr	r3, [r7, #4]
340157f2:	681b      	ldr	r3, [r3, #0]
340157f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
340157f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
340157fa:	68fb      	ldr	r3, [r7, #12]
340157fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34015800:	2b00      	cmp	r3, #0
34015802:	d00f      	beq.n	34015824 <SPI_CloseTransfer+0x158>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
34015804:	687b      	ldr	r3, [r7, #4]
34015806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401580a:	f043 0208 	orr.w	r2, r3, #8
3401580e:	687b      	ldr	r3, [r7, #4]
34015810:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
34015814:	687b      	ldr	r3, [r7, #4]
34015816:	681b      	ldr	r3, [r3, #0]
34015818:	699a      	ldr	r2, [r3, #24]
3401581a:	687b      	ldr	r3, [r7, #4]
3401581c:	681b      	ldr	r3, [r3, #0]
3401581e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34015822:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
34015824:	687b      	ldr	r3, [r7, #4]
34015826:	2200      	movs	r2, #0
34015828:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
3401582c:	687b      	ldr	r3, [r7, #4]
3401582e:	2200      	movs	r2, #0
34015830:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
34015834:	bf00      	nop
34015836:	3714      	adds	r7, #20
34015838:	46bd      	mov	sp, r7
3401583a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401583e:	4770      	bx	lr

34015840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
34015840:	b580      	push	{r7, lr}
34015842:	b082      	sub	sp, #8
34015844:	af00      	add	r7, sp, #0
34015846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
34015848:	687b      	ldr	r3, [r7, #4]
3401584a:	2b00      	cmp	r3, #0
3401584c:	d101      	bne.n	34015852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
3401584e:	2301      	movs	r3, #1
34015850:	e16e      	b.n	34015b30 <HAL_UART_Init+0x2f0>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
34015852:	687b      	ldr	r3, [r7, #4]
34015854:	699b      	ldr	r3, [r3, #24]
34015856:	2b00      	cmp	r3, #0
34015858:	f000 8088 	beq.w	3401596c <HAL_UART_Init+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3401585c:	687b      	ldr	r3, [r7, #4]
3401585e:	681b      	ldr	r3, [r3, #0]
34015860:	4a8f      	ldr	r2, [pc, #572]	@ (34015aa0 <HAL_UART_Init+0x260>)
34015862:	4293      	cmp	r3, r2
34015864:	f000 80f5 	beq.w	34015a52 <HAL_UART_Init+0x212>
34015868:	687b      	ldr	r3, [r7, #4]
3401586a:	681b      	ldr	r3, [r3, #0]
3401586c:	4a8d      	ldr	r2, [pc, #564]	@ (34015aa4 <HAL_UART_Init+0x264>)
3401586e:	4293      	cmp	r3, r2
34015870:	f000 80ef 	beq.w	34015a52 <HAL_UART_Init+0x212>
34015874:	687b      	ldr	r3, [r7, #4]
34015876:	681b      	ldr	r3, [r3, #0]
34015878:	4a8b      	ldr	r2, [pc, #556]	@ (34015aa8 <HAL_UART_Init+0x268>)
3401587a:	4293      	cmp	r3, r2
3401587c:	f000 80e9 	beq.w	34015a52 <HAL_UART_Init+0x212>
34015880:	687b      	ldr	r3, [r7, #4]
34015882:	681b      	ldr	r3, [r3, #0]
34015884:	4a89      	ldr	r2, [pc, #548]	@ (34015aac <HAL_UART_Init+0x26c>)
34015886:	4293      	cmp	r3, r2
34015888:	f000 80e3 	beq.w	34015a52 <HAL_UART_Init+0x212>
3401588c:	687b      	ldr	r3, [r7, #4]
3401588e:	681b      	ldr	r3, [r3, #0]
34015890:	4a87      	ldr	r2, [pc, #540]	@ (34015ab0 <HAL_UART_Init+0x270>)
34015892:	4293      	cmp	r3, r2
34015894:	f000 80dd 	beq.w	34015a52 <HAL_UART_Init+0x212>
34015898:	687b      	ldr	r3, [r7, #4]
3401589a:	681b      	ldr	r3, [r3, #0]
3401589c:	4a85      	ldr	r2, [pc, #532]	@ (34015ab4 <HAL_UART_Init+0x274>)
3401589e:	4293      	cmp	r3, r2
340158a0:	f000 80d7 	beq.w	34015a52 <HAL_UART_Init+0x212>
340158a4:	687b      	ldr	r3, [r7, #4]
340158a6:	681b      	ldr	r3, [r3, #0]
340158a8:	4a83      	ldr	r2, [pc, #524]	@ (34015ab8 <HAL_UART_Init+0x278>)
340158aa:	4293      	cmp	r3, r2
340158ac:	f000 80d1 	beq.w	34015a52 <HAL_UART_Init+0x212>
340158b0:	687b      	ldr	r3, [r7, #4]
340158b2:	681b      	ldr	r3, [r3, #0]
340158b4:	4a81      	ldr	r2, [pc, #516]	@ (34015abc <HAL_UART_Init+0x27c>)
340158b6:	4293      	cmp	r3, r2
340158b8:	f000 80cb 	beq.w	34015a52 <HAL_UART_Init+0x212>
340158bc:	687b      	ldr	r3, [r7, #4]
340158be:	681b      	ldr	r3, [r3, #0]
340158c0:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340158c4:	f000 80c5 	beq.w	34015a52 <HAL_UART_Init+0x212>
340158c8:	687b      	ldr	r3, [r7, #4]
340158ca:	681b      	ldr	r3, [r3, #0]
340158cc:	4a7c      	ldr	r2, [pc, #496]	@ (34015ac0 <HAL_UART_Init+0x280>)
340158ce:	4293      	cmp	r3, r2
340158d0:	f000 80bf 	beq.w	34015a52 <HAL_UART_Init+0x212>
340158d4:	687b      	ldr	r3, [r7, #4]
340158d6:	681b      	ldr	r3, [r3, #0]
340158d8:	4a7a      	ldr	r2, [pc, #488]	@ (34015ac4 <HAL_UART_Init+0x284>)
340158da:	4293      	cmp	r3, r2
340158dc:	f000 80b9 	beq.w	34015a52 <HAL_UART_Init+0x212>
340158e0:	687b      	ldr	r3, [r7, #4]
340158e2:	681b      	ldr	r3, [r3, #0]
340158e4:	4a78      	ldr	r2, [pc, #480]	@ (34015ac8 <HAL_UART_Init+0x288>)
340158e6:	4293      	cmp	r3, r2
340158e8:	f000 80b3 	beq.w	34015a52 <HAL_UART_Init+0x212>
340158ec:	687b      	ldr	r3, [r7, #4]
340158ee:	681b      	ldr	r3, [r3, #0]
340158f0:	4a76      	ldr	r2, [pc, #472]	@ (34015acc <HAL_UART_Init+0x28c>)
340158f2:	4293      	cmp	r3, r2
340158f4:	f000 80ad 	beq.w	34015a52 <HAL_UART_Init+0x212>
340158f8:	687b      	ldr	r3, [r7, #4]
340158fa:	681b      	ldr	r3, [r3, #0]
340158fc:	4a74      	ldr	r2, [pc, #464]	@ (34015ad0 <HAL_UART_Init+0x290>)
340158fe:	4293      	cmp	r3, r2
34015900:	f000 80a7 	beq.w	34015a52 <HAL_UART_Init+0x212>
34015904:	687b      	ldr	r3, [r7, #4]
34015906:	681b      	ldr	r3, [r3, #0]
34015908:	4a72      	ldr	r2, [pc, #456]	@ (34015ad4 <HAL_UART_Init+0x294>)
3401590a:	4293      	cmp	r3, r2
3401590c:	f000 80a1 	beq.w	34015a52 <HAL_UART_Init+0x212>
34015910:	687b      	ldr	r3, [r7, #4]
34015912:	681b      	ldr	r3, [r3, #0]
34015914:	4a70      	ldr	r2, [pc, #448]	@ (34015ad8 <HAL_UART_Init+0x298>)
34015916:	4293      	cmp	r3, r2
34015918:	f000 809b 	beq.w	34015a52 <HAL_UART_Init+0x212>
3401591c:	687b      	ldr	r3, [r7, #4]
3401591e:	681b      	ldr	r3, [r3, #0]
34015920:	4a6e      	ldr	r2, [pc, #440]	@ (34015adc <HAL_UART_Init+0x29c>)
34015922:	4293      	cmp	r3, r2
34015924:	f000 8095 	beq.w	34015a52 <HAL_UART_Init+0x212>
34015928:	687b      	ldr	r3, [r7, #4]
3401592a:	681b      	ldr	r3, [r3, #0]
3401592c:	4a6c      	ldr	r2, [pc, #432]	@ (34015ae0 <HAL_UART_Init+0x2a0>)
3401592e:	4293      	cmp	r3, r2
34015930:	f000 808f 	beq.w	34015a52 <HAL_UART_Init+0x212>
34015934:	687b      	ldr	r3, [r7, #4]
34015936:	681b      	ldr	r3, [r3, #0]
34015938:	4a6a      	ldr	r2, [pc, #424]	@ (34015ae4 <HAL_UART_Init+0x2a4>)
3401593a:	4293      	cmp	r3, r2
3401593c:	f000 8089 	beq.w	34015a52 <HAL_UART_Init+0x212>
34015940:	687b      	ldr	r3, [r7, #4]
34015942:	681b      	ldr	r3, [r3, #0]
34015944:	4a68      	ldr	r2, [pc, #416]	@ (34015ae8 <HAL_UART_Init+0x2a8>)
34015946:	4293      	cmp	r3, r2
34015948:	f000 8083 	beq.w	34015a52 <HAL_UART_Init+0x212>
3401594c:	687b      	ldr	r3, [r7, #4]
3401594e:	681b      	ldr	r3, [r3, #0]
34015950:	4a66      	ldr	r2, [pc, #408]	@ (34015aec <HAL_UART_Init+0x2ac>)
34015952:	4293      	cmp	r3, r2
34015954:	d07d      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015956:	687b      	ldr	r3, [r7, #4]
34015958:	681b      	ldr	r3, [r3, #0]
3401595a:	4a65      	ldr	r2, [pc, #404]	@ (34015af0 <HAL_UART_Init+0x2b0>)
3401595c:	4293      	cmp	r3, r2
3401595e:	d078      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015960:	f240 113f 	movw	r1, #319	@ 0x13f
34015964:	4863      	ldr	r0, [pc, #396]	@ (34015af4 <HAL_UART_Init+0x2b4>)
34015966:	f7ec f99d 	bl	34001ca4 <assert_failed>
3401596a:	e072      	b.n	34015a52 <HAL_UART_Init+0x212>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3401596c:	687b      	ldr	r3, [r7, #4]
3401596e:	681b      	ldr	r3, [r3, #0]
34015970:	4a4b      	ldr	r2, [pc, #300]	@ (34015aa0 <HAL_UART_Init+0x260>)
34015972:	4293      	cmp	r3, r2
34015974:	d06d      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015976:	687b      	ldr	r3, [r7, #4]
34015978:	681b      	ldr	r3, [r3, #0]
3401597a:	4a4a      	ldr	r2, [pc, #296]	@ (34015aa4 <HAL_UART_Init+0x264>)
3401597c:	4293      	cmp	r3, r2
3401597e:	d068      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015980:	687b      	ldr	r3, [r7, #4]
34015982:	681b      	ldr	r3, [r3, #0]
34015984:	4a48      	ldr	r2, [pc, #288]	@ (34015aa8 <HAL_UART_Init+0x268>)
34015986:	4293      	cmp	r3, r2
34015988:	d063      	beq.n	34015a52 <HAL_UART_Init+0x212>
3401598a:	687b      	ldr	r3, [r7, #4]
3401598c:	681b      	ldr	r3, [r3, #0]
3401598e:	4a47      	ldr	r2, [pc, #284]	@ (34015aac <HAL_UART_Init+0x26c>)
34015990:	4293      	cmp	r3, r2
34015992:	d05e      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015994:	687b      	ldr	r3, [r7, #4]
34015996:	681b      	ldr	r3, [r3, #0]
34015998:	4a45      	ldr	r2, [pc, #276]	@ (34015ab0 <HAL_UART_Init+0x270>)
3401599a:	4293      	cmp	r3, r2
3401599c:	d059      	beq.n	34015a52 <HAL_UART_Init+0x212>
3401599e:	687b      	ldr	r3, [r7, #4]
340159a0:	681b      	ldr	r3, [r3, #0]
340159a2:	4a44      	ldr	r2, [pc, #272]	@ (34015ab4 <HAL_UART_Init+0x274>)
340159a4:	4293      	cmp	r3, r2
340159a6:	d054      	beq.n	34015a52 <HAL_UART_Init+0x212>
340159a8:	687b      	ldr	r3, [r7, #4]
340159aa:	681b      	ldr	r3, [r3, #0]
340159ac:	4a42      	ldr	r2, [pc, #264]	@ (34015ab8 <HAL_UART_Init+0x278>)
340159ae:	4293      	cmp	r3, r2
340159b0:	d04f      	beq.n	34015a52 <HAL_UART_Init+0x212>
340159b2:	687b      	ldr	r3, [r7, #4]
340159b4:	681b      	ldr	r3, [r3, #0]
340159b6:	4a41      	ldr	r2, [pc, #260]	@ (34015abc <HAL_UART_Init+0x27c>)
340159b8:	4293      	cmp	r3, r2
340159ba:	d04a      	beq.n	34015a52 <HAL_UART_Init+0x212>
340159bc:	687b      	ldr	r3, [r7, #4]
340159be:	681b      	ldr	r3, [r3, #0]
340159c0:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340159c4:	d045      	beq.n	34015a52 <HAL_UART_Init+0x212>
340159c6:	687b      	ldr	r3, [r7, #4]
340159c8:	681b      	ldr	r3, [r3, #0]
340159ca:	4a3d      	ldr	r2, [pc, #244]	@ (34015ac0 <HAL_UART_Init+0x280>)
340159cc:	4293      	cmp	r3, r2
340159ce:	d040      	beq.n	34015a52 <HAL_UART_Init+0x212>
340159d0:	687b      	ldr	r3, [r7, #4]
340159d2:	681b      	ldr	r3, [r3, #0]
340159d4:	4a3b      	ldr	r2, [pc, #236]	@ (34015ac4 <HAL_UART_Init+0x284>)
340159d6:	4293      	cmp	r3, r2
340159d8:	d03b      	beq.n	34015a52 <HAL_UART_Init+0x212>
340159da:	687b      	ldr	r3, [r7, #4]
340159dc:	681b      	ldr	r3, [r3, #0]
340159de:	4a3a      	ldr	r2, [pc, #232]	@ (34015ac8 <HAL_UART_Init+0x288>)
340159e0:	4293      	cmp	r3, r2
340159e2:	d036      	beq.n	34015a52 <HAL_UART_Init+0x212>
340159e4:	687b      	ldr	r3, [r7, #4]
340159e6:	681b      	ldr	r3, [r3, #0]
340159e8:	4a38      	ldr	r2, [pc, #224]	@ (34015acc <HAL_UART_Init+0x28c>)
340159ea:	4293      	cmp	r3, r2
340159ec:	d031      	beq.n	34015a52 <HAL_UART_Init+0x212>
340159ee:	687b      	ldr	r3, [r7, #4]
340159f0:	681b      	ldr	r3, [r3, #0]
340159f2:	4a37      	ldr	r2, [pc, #220]	@ (34015ad0 <HAL_UART_Init+0x290>)
340159f4:	4293      	cmp	r3, r2
340159f6:	d02c      	beq.n	34015a52 <HAL_UART_Init+0x212>
340159f8:	687b      	ldr	r3, [r7, #4]
340159fa:	681b      	ldr	r3, [r3, #0]
340159fc:	4a35      	ldr	r2, [pc, #212]	@ (34015ad4 <HAL_UART_Init+0x294>)
340159fe:	4293      	cmp	r3, r2
34015a00:	d027      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015a02:	687b      	ldr	r3, [r7, #4]
34015a04:	681b      	ldr	r3, [r3, #0]
34015a06:	4a34      	ldr	r2, [pc, #208]	@ (34015ad8 <HAL_UART_Init+0x298>)
34015a08:	4293      	cmp	r3, r2
34015a0a:	d022      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015a0c:	687b      	ldr	r3, [r7, #4]
34015a0e:	681b      	ldr	r3, [r3, #0]
34015a10:	4a32      	ldr	r2, [pc, #200]	@ (34015adc <HAL_UART_Init+0x29c>)
34015a12:	4293      	cmp	r3, r2
34015a14:	d01d      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015a16:	687b      	ldr	r3, [r7, #4]
34015a18:	681b      	ldr	r3, [r3, #0]
34015a1a:	4a31      	ldr	r2, [pc, #196]	@ (34015ae0 <HAL_UART_Init+0x2a0>)
34015a1c:	4293      	cmp	r3, r2
34015a1e:	d018      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015a20:	687b      	ldr	r3, [r7, #4]
34015a22:	681b      	ldr	r3, [r3, #0]
34015a24:	4a2f      	ldr	r2, [pc, #188]	@ (34015ae4 <HAL_UART_Init+0x2a4>)
34015a26:	4293      	cmp	r3, r2
34015a28:	d013      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015a2a:	687b      	ldr	r3, [r7, #4]
34015a2c:	681b      	ldr	r3, [r3, #0]
34015a2e:	4a2e      	ldr	r2, [pc, #184]	@ (34015ae8 <HAL_UART_Init+0x2a8>)
34015a30:	4293      	cmp	r3, r2
34015a32:	d00e      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015a34:	687b      	ldr	r3, [r7, #4]
34015a36:	681b      	ldr	r3, [r3, #0]
34015a38:	4a2c      	ldr	r2, [pc, #176]	@ (34015aec <HAL_UART_Init+0x2ac>)
34015a3a:	4293      	cmp	r3, r2
34015a3c:	d009      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015a3e:	687b      	ldr	r3, [r7, #4]
34015a40:	681b      	ldr	r3, [r3, #0]
34015a42:	4a2b      	ldr	r2, [pc, #172]	@ (34015af0 <HAL_UART_Init+0x2b0>)
34015a44:	4293      	cmp	r3, r2
34015a46:	d004      	beq.n	34015a52 <HAL_UART_Init+0x212>
34015a48:	f44f 71a2 	mov.w	r1, #324	@ 0x144
34015a4c:	4829      	ldr	r0, [pc, #164]	@ (34015af4 <HAL_UART_Init+0x2b4>)
34015a4e:	f7ec f929 	bl	34001ca4 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
34015a52:	687b      	ldr	r3, [r7, #4]
34015a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34015a58:	2b00      	cmp	r3, #0
34015a5a:	d106      	bne.n	34015a6a <HAL_UART_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
34015a5c:	687b      	ldr	r3, [r7, #4]
34015a5e:	2200      	movs	r2, #0
34015a60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
34015a64:	6878      	ldr	r0, [r7, #4]
34015a66:	f000 f867 	bl	34015b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
34015a6a:	687b      	ldr	r3, [r7, #4]
34015a6c:	2224      	movs	r2, #36	@ 0x24
34015a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
34015a72:	687b      	ldr	r3, [r7, #4]
34015a74:	681b      	ldr	r3, [r3, #0]
34015a76:	681a      	ldr	r2, [r3, #0]
34015a78:	687b      	ldr	r3, [r7, #4]
34015a7a:	681b      	ldr	r3, [r3, #0]
34015a7c:	f022 0201 	bic.w	r2, r2, #1
34015a80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
34015a82:	687b      	ldr	r3, [r7, #4]
34015a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015a86:	2b00      	cmp	r3, #0
34015a88:	d002      	beq.n	34015a90 <HAL_UART_Init+0x250>
  {
    UART_AdvFeatureConfig(huart);
34015a8a:	6878      	ldr	r0, [r7, #4]
34015a8c:	f000 fbb8 	bl	34016200 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
34015a90:	6878      	ldr	r0, [r7, #4]
34015a92:	f000 f8e9 	bl	34015c68 <UART_SetConfig>
34015a96:	4603      	mov	r3, r0
34015a98:	2b01      	cmp	r3, #1
34015a9a:	d12d      	bne.n	34015af8 <HAL_UART_Init+0x2b8>
  {
    return HAL_ERROR;
34015a9c:	2301      	movs	r3, #1
34015a9e:	e047      	b.n	34015b30 <HAL_UART_Init+0x2f0>
34015aa0:	52001000 	.word	0x52001000
34015aa4:	42001000 	.word	0x42001000
34015aa8:	50004400 	.word	0x50004400
34015aac:	40004400 	.word	0x40004400
34015ab0:	50004800 	.word	0x50004800
34015ab4:	40004800 	.word	0x40004800
34015ab8:	50004c00 	.word	0x50004c00
34015abc:	40004c00 	.word	0x40004c00
34015ac0:	40005000 	.word	0x40005000
34015ac4:	52001400 	.word	0x52001400
34015ac8:	42001400 	.word	0x42001400
34015acc:	50007800 	.word	0x50007800
34015ad0:	40007800 	.word	0x40007800
34015ad4:	50007c00 	.word	0x50007c00
34015ad8:	40007c00 	.word	0x40007c00
34015adc:	52001800 	.word	0x52001800
34015ae0:	42001800 	.word	0x42001800
34015ae4:	52001c00 	.word	0x52001c00
34015ae8:	42001c00 	.word	0x42001c00
34015aec:	56000c00 	.word	0x56000c00
34015af0:	46000c00 	.word	0x46000c00
34015af4:	3401eb0c 	.word	0x3401eb0c
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
34015af8:	687b      	ldr	r3, [r7, #4]
34015afa:	681b      	ldr	r3, [r3, #0]
34015afc:	685a      	ldr	r2, [r3, #4]
34015afe:	687b      	ldr	r3, [r7, #4]
34015b00:	681b      	ldr	r3, [r3, #0]
34015b02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
34015b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
34015b08:	687b      	ldr	r3, [r7, #4]
34015b0a:	681b      	ldr	r3, [r3, #0]
34015b0c:	689a      	ldr	r2, [r3, #8]
34015b0e:	687b      	ldr	r3, [r7, #4]
34015b10:	681b      	ldr	r3, [r3, #0]
34015b12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
34015b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
34015b18:	687b      	ldr	r3, [r7, #4]
34015b1a:	681b      	ldr	r3, [r3, #0]
34015b1c:	681a      	ldr	r2, [r3, #0]
34015b1e:	687b      	ldr	r3, [r7, #4]
34015b20:	681b      	ldr	r3, [r3, #0]
34015b22:	f042 0201 	orr.w	r2, r2, #1
34015b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
34015b28:	6878      	ldr	r0, [r7, #4]
34015b2a:	f000 fd33 	bl	34016594 <UART_CheckIdleState>
34015b2e:	4603      	mov	r3, r0
}
34015b30:	4618      	mov	r0, r3
34015b32:	3708      	adds	r7, #8
34015b34:	46bd      	mov	sp, r7
34015b36:	bd80      	pop	{r7, pc}

34015b38 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
34015b38:	b480      	push	{r7}
34015b3a:	b083      	sub	sp, #12
34015b3c:	af00      	add	r7, sp, #0
34015b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
34015b40:	bf00      	nop
34015b42:	370c      	adds	r7, #12
34015b44:	46bd      	mov	sp, r7
34015b46:	f85d 7b04 	ldr.w	r7, [sp], #4
34015b4a:	4770      	bx	lr

34015b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
34015b4c:	b580      	push	{r7, lr}
34015b4e:	b08a      	sub	sp, #40	@ 0x28
34015b50:	af02      	add	r7, sp, #8
34015b52:	60f8      	str	r0, [r7, #12]
34015b54:	60b9      	str	r1, [r7, #8]
34015b56:	603b      	str	r3, [r7, #0]
34015b58:	4613      	mov	r3, r2
34015b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
34015b5c:	68fb      	ldr	r3, [r7, #12]
34015b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34015b62:	2b20      	cmp	r3, #32
34015b64:	d17b      	bne.n	34015c5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
34015b66:	68bb      	ldr	r3, [r7, #8]
34015b68:	2b00      	cmp	r3, #0
34015b6a:	d002      	beq.n	34015b72 <HAL_UART_Transmit+0x26>
34015b6c:	88fb      	ldrh	r3, [r7, #6]
34015b6e:	2b00      	cmp	r3, #0
34015b70:	d101      	bne.n	34015b76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
34015b72:	2301      	movs	r3, #1
34015b74:	e074      	b.n	34015c60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
34015b76:	68fb      	ldr	r3, [r7, #12]
34015b78:	2200      	movs	r2, #0
34015b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
34015b7e:	68fb      	ldr	r3, [r7, #12]
34015b80:	2221      	movs	r2, #33	@ 0x21
34015b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
34015b86:	f7ee f8af 	bl	34003ce8 <HAL_GetTick>
34015b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
34015b8c:	68fb      	ldr	r3, [r7, #12]
34015b8e:	88fa      	ldrh	r2, [r7, #6]
34015b90:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
34015b94:	68fb      	ldr	r3, [r7, #12]
34015b96:	88fa      	ldrh	r2, [r7, #6]
34015b98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
34015b9c:	68fb      	ldr	r3, [r7, #12]
34015b9e:	689b      	ldr	r3, [r3, #8]
34015ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015ba4:	d108      	bne.n	34015bb8 <HAL_UART_Transmit+0x6c>
34015ba6:	68fb      	ldr	r3, [r7, #12]
34015ba8:	691b      	ldr	r3, [r3, #16]
34015baa:	2b00      	cmp	r3, #0
34015bac:	d104      	bne.n	34015bb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
34015bae:	2300      	movs	r3, #0
34015bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
34015bb2:	68bb      	ldr	r3, [r7, #8]
34015bb4:	61bb      	str	r3, [r7, #24]
34015bb6:	e003      	b.n	34015bc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
34015bb8:	68bb      	ldr	r3, [r7, #8]
34015bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
34015bbc:	2300      	movs	r3, #0
34015bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
34015bc0:	e030      	b.n	34015c24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
34015bc2:	683b      	ldr	r3, [r7, #0]
34015bc4:	9300      	str	r3, [sp, #0]
34015bc6:	697b      	ldr	r3, [r7, #20]
34015bc8:	2200      	movs	r2, #0
34015bca:	2180      	movs	r1, #128	@ 0x80
34015bcc:	68f8      	ldr	r0, [r7, #12]
34015bce:	f000 fd8b 	bl	340166e8 <UART_WaitOnFlagUntilTimeout>
34015bd2:	4603      	mov	r3, r0
34015bd4:	2b00      	cmp	r3, #0
34015bd6:	d005      	beq.n	34015be4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
34015bd8:	68fb      	ldr	r3, [r7, #12]
34015bda:	2220      	movs	r2, #32
34015bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
34015be0:	2303      	movs	r3, #3
34015be2:	e03d      	b.n	34015c60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
34015be4:	69fb      	ldr	r3, [r7, #28]
34015be6:	2b00      	cmp	r3, #0
34015be8:	d10b      	bne.n	34015c02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
34015bea:	69bb      	ldr	r3, [r7, #24]
34015bec:	881b      	ldrh	r3, [r3, #0]
34015bee:	461a      	mov	r2, r3
34015bf0:	68fb      	ldr	r3, [r7, #12]
34015bf2:	681b      	ldr	r3, [r3, #0]
34015bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
34015bf8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
34015bfa:	69bb      	ldr	r3, [r7, #24]
34015bfc:	3302      	adds	r3, #2
34015bfe:	61bb      	str	r3, [r7, #24]
34015c00:	e007      	b.n	34015c12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
34015c02:	69fb      	ldr	r3, [r7, #28]
34015c04:	781a      	ldrb	r2, [r3, #0]
34015c06:	68fb      	ldr	r3, [r7, #12]
34015c08:	681b      	ldr	r3, [r3, #0]
34015c0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
34015c0c:	69fb      	ldr	r3, [r7, #28]
34015c0e:	3301      	adds	r3, #1
34015c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
34015c12:	68fb      	ldr	r3, [r7, #12]
34015c14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
34015c18:	b29b      	uxth	r3, r3
34015c1a:	3b01      	subs	r3, #1
34015c1c:	b29a      	uxth	r2, r3
34015c1e:	68fb      	ldr	r3, [r7, #12]
34015c20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
34015c24:	68fb      	ldr	r3, [r7, #12]
34015c26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
34015c2a:	b29b      	uxth	r3, r3
34015c2c:	2b00      	cmp	r3, #0
34015c2e:	d1c8      	bne.n	34015bc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
34015c30:	683b      	ldr	r3, [r7, #0]
34015c32:	9300      	str	r3, [sp, #0]
34015c34:	697b      	ldr	r3, [r7, #20]
34015c36:	2200      	movs	r2, #0
34015c38:	2140      	movs	r1, #64	@ 0x40
34015c3a:	68f8      	ldr	r0, [r7, #12]
34015c3c:	f000 fd54 	bl	340166e8 <UART_WaitOnFlagUntilTimeout>
34015c40:	4603      	mov	r3, r0
34015c42:	2b00      	cmp	r3, #0
34015c44:	d005      	beq.n	34015c52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
34015c46:	68fb      	ldr	r3, [r7, #12]
34015c48:	2220      	movs	r2, #32
34015c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
34015c4e:	2303      	movs	r3, #3
34015c50:	e006      	b.n	34015c60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
34015c52:	68fb      	ldr	r3, [r7, #12]
34015c54:	2220      	movs	r2, #32
34015c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
34015c5a:	2300      	movs	r3, #0
34015c5c:	e000      	b.n	34015c60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
34015c5e:	2302      	movs	r3, #2
  }
}
34015c60:	4618      	mov	r0, r3
34015c62:	3720      	adds	r7, #32
34015c64:	46bd      	mov	sp, r7
34015c66:	bd80      	pop	{r7, pc}

34015c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
34015c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34015c6c:	b090      	sub	sp, #64	@ 0x40
34015c6e:	af00      	add	r7, sp, #0
34015c70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
34015c72:	2300      	movs	r3, #0
34015c74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
34015c78:	697b      	ldr	r3, [r7, #20]
34015c7a:	685b      	ldr	r3, [r3, #4]
34015c7c:	4a19      	ldr	r2, [pc, #100]	@ (34015ce4 <UART_SetConfig+0x7c>)
34015c7e:	4293      	cmp	r3, r2
34015c80:	d904      	bls.n	34015c8c <UART_SetConfig+0x24>
34015c82:	f640 414f 	movw	r1, #3151	@ 0xc4f
34015c86:	4818      	ldr	r0, [pc, #96]	@ (34015ce8 <UART_SetConfig+0x80>)
34015c88:	f7ec f80c 	bl	34001ca4 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
34015c8c:	697b      	ldr	r3, [r7, #20]
34015c8e:	689b      	ldr	r3, [r3, #8]
34015c90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015c94:	d00d      	beq.n	34015cb2 <UART_SetConfig+0x4a>
34015c96:	697b      	ldr	r3, [r7, #20]
34015c98:	689b      	ldr	r3, [r3, #8]
34015c9a:	2b00      	cmp	r3, #0
34015c9c:	d009      	beq.n	34015cb2 <UART_SetConfig+0x4a>
34015c9e:	697b      	ldr	r3, [r7, #20]
34015ca0:	689b      	ldr	r3, [r3, #8]
34015ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015ca6:	d004      	beq.n	34015cb2 <UART_SetConfig+0x4a>
34015ca8:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
34015cac:	480e      	ldr	r0, [pc, #56]	@ (34015ce8 <UART_SetConfig+0x80>)
34015cae:	f7eb fff9 	bl	34001ca4 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
34015cb2:	697b      	ldr	r3, [r7, #20]
34015cb4:	681b      	ldr	r3, [r3, #0]
34015cb6:	4a0d      	ldr	r2, [pc, #52]	@ (34015cec <UART_SetConfig+0x84>)
34015cb8:	4293      	cmp	r3, r2
34015cba:	d004      	beq.n	34015cc6 <UART_SetConfig+0x5e>
34015cbc:	697b      	ldr	r3, [r7, #20]
34015cbe:	681b      	ldr	r3, [r3, #0]
34015cc0:	4a0b      	ldr	r2, [pc, #44]	@ (34015cf0 <UART_SetConfig+0x88>)
34015cc2:	4293      	cmp	r3, r2
34015cc4:	d116      	bne.n	34015cf4 <UART_SetConfig+0x8c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
34015cc6:	697b      	ldr	r3, [r7, #20]
34015cc8:	68db      	ldr	r3, [r3, #12]
34015cca:	2b00      	cmp	r3, #0
34015ccc:	d038      	beq.n	34015d40 <UART_SetConfig+0xd8>
34015cce:	697b      	ldr	r3, [r7, #20]
34015cd0:	68db      	ldr	r3, [r3, #12]
34015cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34015cd6:	d033      	beq.n	34015d40 <UART_SetConfig+0xd8>
34015cd8:	f640 4153 	movw	r1, #3155	@ 0xc53
34015cdc:	4802      	ldr	r0, [pc, #8]	@ (34015ce8 <UART_SetConfig+0x80>)
34015cde:	f7eb ffe1 	bl	34001ca4 <assert_failed>
34015ce2:	e02d      	b.n	34015d40 <UART_SetConfig+0xd8>
34015ce4:	00bebc1f 	.word	0x00bebc1f
34015ce8:	3401eb0c 	.word	0x3401eb0c
34015cec:	56000c00 	.word	0x56000c00
34015cf0:	46000c00 	.word	0x46000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
34015cf4:	697b      	ldr	r3, [r7, #20]
34015cf6:	68db      	ldr	r3, [r3, #12]
34015cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015cfc:	d012      	beq.n	34015d24 <UART_SetConfig+0xbc>
34015cfe:	697b      	ldr	r3, [r7, #20]
34015d00:	68db      	ldr	r3, [r3, #12]
34015d02:	2b00      	cmp	r3, #0
34015d04:	d00e      	beq.n	34015d24 <UART_SetConfig+0xbc>
34015d06:	697b      	ldr	r3, [r7, #20]
34015d08:	68db      	ldr	r3, [r3, #12]
34015d0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34015d0e:	d009      	beq.n	34015d24 <UART_SetConfig+0xbc>
34015d10:	697b      	ldr	r3, [r7, #20]
34015d12:	68db      	ldr	r3, [r3, #12]
34015d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34015d18:	d004      	beq.n	34015d24 <UART_SetConfig+0xbc>
34015d1a:	f640 4157 	movw	r1, #3159	@ 0xc57
34015d1e:	4896      	ldr	r0, [pc, #600]	@ (34015f78 <UART_SetConfig+0x310>)
34015d20:	f7eb ffc0 	bl	34001ca4 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
34015d24:	697b      	ldr	r3, [r7, #20]
34015d26:	6a1b      	ldr	r3, [r3, #32]
34015d28:	2b00      	cmp	r3, #0
34015d2a:	d009      	beq.n	34015d40 <UART_SetConfig+0xd8>
34015d2c:	697b      	ldr	r3, [r7, #20]
34015d2e:	6a1b      	ldr	r3, [r3, #32]
34015d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34015d34:	d004      	beq.n	34015d40 <UART_SetConfig+0xd8>
34015d36:	f640 4158 	movw	r1, #3160	@ 0xc58
34015d3a:	488f      	ldr	r0, [pc, #572]	@ (34015f78 <UART_SetConfig+0x310>)
34015d3c:	f7eb ffb2 	bl	34001ca4 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
34015d40:	697b      	ldr	r3, [r7, #20]
34015d42:	691b      	ldr	r3, [r3, #16]
34015d44:	2b00      	cmp	r3, #0
34015d46:	d00e      	beq.n	34015d66 <UART_SetConfig+0xfe>
34015d48:	697b      	ldr	r3, [r7, #20]
34015d4a:	691b      	ldr	r3, [r3, #16]
34015d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34015d50:	d009      	beq.n	34015d66 <UART_SetConfig+0xfe>
34015d52:	697b      	ldr	r3, [r7, #20]
34015d54:	691b      	ldr	r3, [r3, #16]
34015d56:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34015d5a:	d004      	beq.n	34015d66 <UART_SetConfig+0xfe>
34015d5c:	f640 415b 	movw	r1, #3163	@ 0xc5b
34015d60:	4885      	ldr	r0, [pc, #532]	@ (34015f78 <UART_SetConfig+0x310>)
34015d62:	f7eb ff9f 	bl	34001ca4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
34015d66:	697b      	ldr	r3, [r7, #20]
34015d68:	695b      	ldr	r3, [r3, #20]
34015d6a:	f023 030c 	bic.w	r3, r3, #12
34015d6e:	2b00      	cmp	r3, #0
34015d70:	d103      	bne.n	34015d7a <UART_SetConfig+0x112>
34015d72:	697b      	ldr	r3, [r7, #20]
34015d74:	695b      	ldr	r3, [r3, #20]
34015d76:	2b00      	cmp	r3, #0
34015d78:	d104      	bne.n	34015d84 <UART_SetConfig+0x11c>
34015d7a:	f640 415c 	movw	r1, #3164	@ 0xc5c
34015d7e:	487e      	ldr	r0, [pc, #504]	@ (34015f78 <UART_SetConfig+0x310>)
34015d80:	f7eb ff90 	bl	34001ca4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
34015d84:	697b      	ldr	r3, [r7, #20]
34015d86:	699b      	ldr	r3, [r3, #24]
34015d88:	2b00      	cmp	r3, #0
34015d8a:	d013      	beq.n	34015db4 <UART_SetConfig+0x14c>
34015d8c:	697b      	ldr	r3, [r7, #20]
34015d8e:	699b      	ldr	r3, [r3, #24]
34015d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34015d94:	d00e      	beq.n	34015db4 <UART_SetConfig+0x14c>
34015d96:	697b      	ldr	r3, [r7, #20]
34015d98:	699b      	ldr	r3, [r3, #24]
34015d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34015d9e:	d009      	beq.n	34015db4 <UART_SetConfig+0x14c>
34015da0:	697b      	ldr	r3, [r7, #20]
34015da2:	699b      	ldr	r3, [r3, #24]
34015da4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34015da8:	d004      	beq.n	34015db4 <UART_SetConfig+0x14c>
34015daa:	f640 415d 	movw	r1, #3165	@ 0xc5d
34015dae:	4872      	ldr	r0, [pc, #456]	@ (34015f78 <UART_SetConfig+0x310>)
34015db0:	f7eb ff78 	bl	34001ca4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
34015db4:	697b      	ldr	r3, [r7, #20]
34015db6:	69db      	ldr	r3, [r3, #28]
34015db8:	2b00      	cmp	r3, #0
34015dba:	d009      	beq.n	34015dd0 <UART_SetConfig+0x168>
34015dbc:	697b      	ldr	r3, [r7, #20]
34015dbe:	69db      	ldr	r3, [r3, #28]
34015dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34015dc4:	d004      	beq.n	34015dd0 <UART_SetConfig+0x168>
34015dc6:	f640 415e 	movw	r1, #3166	@ 0xc5e
34015dca:	486b      	ldr	r0, [pc, #428]	@ (34015f78 <UART_SetConfig+0x310>)
34015dcc:	f7eb ff6a 	bl	34001ca4 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
34015dd0:	697b      	ldr	r3, [r7, #20]
34015dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015dd4:	2b00      	cmp	r3, #0
34015dd6:	d030      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015dd8:	697b      	ldr	r3, [r7, #20]
34015dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015ddc:	2b01      	cmp	r3, #1
34015dde:	d02c      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015de0:	697b      	ldr	r3, [r7, #20]
34015de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015de4:	2b02      	cmp	r3, #2
34015de6:	d028      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015de8:	697b      	ldr	r3, [r7, #20]
34015dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015dec:	2b03      	cmp	r3, #3
34015dee:	d024      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015df0:	697b      	ldr	r3, [r7, #20]
34015df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015df4:	2b04      	cmp	r3, #4
34015df6:	d020      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015df8:	697b      	ldr	r3, [r7, #20]
34015dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015dfc:	2b05      	cmp	r3, #5
34015dfe:	d01c      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015e00:	697b      	ldr	r3, [r7, #20]
34015e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e04:	2b06      	cmp	r3, #6
34015e06:	d018      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015e08:	697b      	ldr	r3, [r7, #20]
34015e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e0c:	2b07      	cmp	r3, #7
34015e0e:	d014      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015e10:	697b      	ldr	r3, [r7, #20]
34015e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e14:	2b08      	cmp	r3, #8
34015e16:	d010      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015e18:	697b      	ldr	r3, [r7, #20]
34015e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e1c:	2b09      	cmp	r3, #9
34015e1e:	d00c      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015e20:	697b      	ldr	r3, [r7, #20]
34015e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e24:	2b0a      	cmp	r3, #10
34015e26:	d008      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015e28:	697b      	ldr	r3, [r7, #20]
34015e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e2c:	2b0b      	cmp	r3, #11
34015e2e:	d004      	beq.n	34015e3a <UART_SetConfig+0x1d2>
34015e30:	f640 415f 	movw	r1, #3167	@ 0xc5f
34015e34:	4850      	ldr	r0, [pc, #320]	@ (34015f78 <UART_SetConfig+0x310>)
34015e36:	f7eb ff35 	bl	34001ca4 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34015e3a:	697b      	ldr	r3, [r7, #20]
34015e3c:	689a      	ldr	r2, [r3, #8]
34015e3e:	697b      	ldr	r3, [r7, #20]
34015e40:	691b      	ldr	r3, [r3, #16]
34015e42:	431a      	orrs	r2, r3
34015e44:	697b      	ldr	r3, [r7, #20]
34015e46:	695b      	ldr	r3, [r3, #20]
34015e48:	431a      	orrs	r2, r3
34015e4a:	697b      	ldr	r3, [r7, #20]
34015e4c:	69db      	ldr	r3, [r3, #28]
34015e4e:	4313      	orrs	r3, r2
34015e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34015e52:	697b      	ldr	r3, [r7, #20]
34015e54:	681b      	ldr	r3, [r3, #0]
34015e56:	681a      	ldr	r2, [r3, #0]
34015e58:	4b48      	ldr	r3, [pc, #288]	@ (34015f7c <UART_SetConfig+0x314>)
34015e5a:	4013      	ands	r3, r2
34015e5c:	697a      	ldr	r2, [r7, #20]
34015e5e:	6812      	ldr	r2, [r2, #0]
34015e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
34015e62:	430b      	orrs	r3, r1
34015e64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
34015e66:	697b      	ldr	r3, [r7, #20]
34015e68:	681b      	ldr	r3, [r3, #0]
34015e6a:	685b      	ldr	r3, [r3, #4]
34015e6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
34015e70:	697b      	ldr	r3, [r7, #20]
34015e72:	68da      	ldr	r2, [r3, #12]
34015e74:	697b      	ldr	r3, [r7, #20]
34015e76:	681b      	ldr	r3, [r3, #0]
34015e78:	430a      	orrs	r2, r1
34015e7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
34015e7c:	697b      	ldr	r3, [r7, #20]
34015e7e:	699b      	ldr	r3, [r3, #24]
34015e80:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
34015e82:	697b      	ldr	r3, [r7, #20]
34015e84:	681b      	ldr	r3, [r3, #0]
34015e86:	4a3e      	ldr	r2, [pc, #248]	@ (34015f80 <UART_SetConfig+0x318>)
34015e88:	4293      	cmp	r3, r2
34015e8a:	d009      	beq.n	34015ea0 <UART_SetConfig+0x238>
34015e8c:	697b      	ldr	r3, [r7, #20]
34015e8e:	681b      	ldr	r3, [r3, #0]
34015e90:	4a3c      	ldr	r2, [pc, #240]	@ (34015f84 <UART_SetConfig+0x31c>)
34015e92:	4293      	cmp	r3, r2
34015e94:	d004      	beq.n	34015ea0 <UART_SetConfig+0x238>
  {
    tmpreg |= huart->Init.OneBitSampling;
34015e96:	697b      	ldr	r3, [r7, #20]
34015e98:	6a1b      	ldr	r3, [r3, #32]
34015e9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
34015e9c:	4313      	orrs	r3, r2
34015e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
34015ea0:	697b      	ldr	r3, [r7, #20]
34015ea2:	681b      	ldr	r3, [r3, #0]
34015ea4:	689b      	ldr	r3, [r3, #8]
34015ea6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
34015eaa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
34015eae:	697a      	ldr	r2, [r7, #20]
34015eb0:	6812      	ldr	r2, [r2, #0]
34015eb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
34015eb4:	430b      	orrs	r3, r1
34015eb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
34015eb8:	697b      	ldr	r3, [r7, #20]
34015eba:	681b      	ldr	r3, [r3, #0]
34015ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34015ebe:	f023 010f 	bic.w	r1, r3, #15
34015ec2:	697b      	ldr	r3, [r7, #20]
34015ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34015ec6:	697b      	ldr	r3, [r7, #20]
34015ec8:	681b      	ldr	r3, [r3, #0]
34015eca:	430a      	orrs	r2, r1
34015ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
34015ece:	697b      	ldr	r3, [r7, #20]
34015ed0:	681b      	ldr	r3, [r3, #0]
34015ed2:	4a2d      	ldr	r2, [pc, #180]	@ (34015f88 <UART_SetConfig+0x320>)
34015ed4:	4293      	cmp	r3, r2
34015ed6:	d106      	bne.n	34015ee6 <UART_SetConfig+0x27e>
34015ed8:	f04f 0200 	mov.w	r2, #0
34015edc:	f44f 7380 	mov.w	r3, #256	@ 0x100
34015ee0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015ee4:	e092      	b.n	3401600c <UART_SetConfig+0x3a4>
34015ee6:	697b      	ldr	r3, [r7, #20]
34015ee8:	681b      	ldr	r3, [r3, #0]
34015eea:	4a28      	ldr	r2, [pc, #160]	@ (34015f8c <UART_SetConfig+0x324>)
34015eec:	4293      	cmp	r3, r2
34015eee:	d106      	bne.n	34015efe <UART_SetConfig+0x296>
34015ef0:	f04f 0200 	mov.w	r2, #0
34015ef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
34015ef8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015efc:	e086      	b.n	3401600c <UART_SetConfig+0x3a4>
34015efe:	697b      	ldr	r3, [r7, #20]
34015f00:	681b      	ldr	r3, [r3, #0]
34015f02:	4a23      	ldr	r2, [pc, #140]	@ (34015f90 <UART_SetConfig+0x328>)
34015f04:	4293      	cmp	r3, r2
34015f06:	d106      	bne.n	34015f16 <UART_SetConfig+0x2ae>
34015f08:	f04f 0200 	mov.w	r2, #0
34015f0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34015f10:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015f14:	e07a      	b.n	3401600c <UART_SetConfig+0x3a4>
34015f16:	697b      	ldr	r3, [r7, #20]
34015f18:	681b      	ldr	r3, [r3, #0]
34015f1a:	4a1e      	ldr	r2, [pc, #120]	@ (34015f94 <UART_SetConfig+0x32c>)
34015f1c:	4293      	cmp	r3, r2
34015f1e:	d106      	bne.n	34015f2e <UART_SetConfig+0x2c6>
34015f20:	f04f 0200 	mov.w	r2, #0
34015f24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34015f28:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015f2c:	e06e      	b.n	3401600c <UART_SetConfig+0x3a4>
34015f2e:	697b      	ldr	r3, [r7, #20]
34015f30:	681b      	ldr	r3, [r3, #0]
34015f32:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
34015f36:	d106      	bne.n	34015f46 <UART_SetConfig+0x2de>
34015f38:	f04f 0200 	mov.w	r2, #0
34015f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34015f40:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015f44:	e062      	b.n	3401600c <UART_SetConfig+0x3a4>
34015f46:	697b      	ldr	r3, [r7, #20]
34015f48:	681b      	ldr	r3, [r3, #0]
34015f4a:	4a13      	ldr	r2, [pc, #76]	@ (34015f98 <UART_SetConfig+0x330>)
34015f4c:	4293      	cmp	r3, r2
34015f4e:	d106      	bne.n	34015f5e <UART_SetConfig+0x2f6>
34015f50:	f04f 0200 	mov.w	r2, #0
34015f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34015f58:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015f5c:	e056      	b.n	3401600c <UART_SetConfig+0x3a4>
34015f5e:	697b      	ldr	r3, [r7, #20]
34015f60:	681b      	ldr	r3, [r3, #0]
34015f62:	4a0e      	ldr	r2, [pc, #56]	@ (34015f9c <UART_SetConfig+0x334>)
34015f64:	4293      	cmp	r3, r2
34015f66:	d11b      	bne.n	34015fa0 <UART_SetConfig+0x338>
34015f68:	f04f 0200 	mov.w	r2, #0
34015f6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34015f70:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015f74:	e04a      	b.n	3401600c <UART_SetConfig+0x3a4>
34015f76:	bf00      	nop
34015f78:	3401eb0c 	.word	0x3401eb0c
34015f7c:	cfff69f3 	.word	0xcfff69f3
34015f80:	56000c00 	.word	0x56000c00
34015f84:	46000c00 	.word	0x46000c00
34015f88:	52001000 	.word	0x52001000
34015f8c:	50004400 	.word	0x50004400
34015f90:	50004800 	.word	0x50004800
34015f94:	50004c00 	.word	0x50004c00
34015f98:	52001400 	.word	0x52001400
34015f9c:	50007800 	.word	0x50007800
34015fa0:	697b      	ldr	r3, [r7, #20]
34015fa2:	681b      	ldr	r3, [r3, #0]
34015fa4:	4a90      	ldr	r2, [pc, #576]	@ (340161e8 <UART_SetConfig+0x580>)
34015fa6:	4293      	cmp	r3, r2
34015fa8:	d106      	bne.n	34015fb8 <UART_SetConfig+0x350>
34015faa:	f04f 0200 	mov.w	r2, #0
34015fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34015fb2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015fb6:	e029      	b.n	3401600c <UART_SetConfig+0x3a4>
34015fb8:	697b      	ldr	r3, [r7, #20]
34015fba:	681b      	ldr	r3, [r3, #0]
34015fbc:	4a8b      	ldr	r2, [pc, #556]	@ (340161ec <UART_SetConfig+0x584>)
34015fbe:	4293      	cmp	r3, r2
34015fc0:	d106      	bne.n	34015fd0 <UART_SetConfig+0x368>
34015fc2:	f04f 0200 	mov.w	r2, #0
34015fc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34015fca:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015fce:	e01d      	b.n	3401600c <UART_SetConfig+0x3a4>
34015fd0:	697b      	ldr	r3, [r7, #20]
34015fd2:	681b      	ldr	r3, [r3, #0]
34015fd4:	4a86      	ldr	r2, [pc, #536]	@ (340161f0 <UART_SetConfig+0x588>)
34015fd6:	4293      	cmp	r3, r2
34015fd8:	d106      	bne.n	34015fe8 <UART_SetConfig+0x380>
34015fda:	f04f 0200 	mov.w	r2, #0
34015fde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34015fe2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015fe6:	e011      	b.n	3401600c <UART_SetConfig+0x3a4>
34015fe8:	697b      	ldr	r3, [r7, #20]
34015fea:	681b      	ldr	r3, [r3, #0]
34015fec:	4a81      	ldr	r2, [pc, #516]	@ (340161f4 <UART_SetConfig+0x58c>)
34015fee:	4293      	cmp	r3, r2
34015ff0:	d106      	bne.n	34016000 <UART_SetConfig+0x398>
34015ff2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34015ff6:	f04f 0300 	mov.w	r3, #0
34015ffa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015ffe:	e005      	b.n	3401600c <UART_SetConfig+0x3a4>
34016000:	f04f 0200 	mov.w	r2, #0
34016004:	f04f 0300 	mov.w	r3, #0
34016008:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
3401600c:	697b      	ldr	r3, [r7, #20]
3401600e:	681b      	ldr	r3, [r3, #0]
34016010:	4a78      	ldr	r2, [pc, #480]	@ (340161f4 <UART_SetConfig+0x58c>)
34016012:	4293      	cmp	r3, r2
34016014:	d004      	beq.n	34016020 <UART_SetConfig+0x3b8>
34016016:	697b      	ldr	r3, [r7, #20]
34016018:	681b      	ldr	r3, [r3, #0]
3401601a:	4a77      	ldr	r2, [pc, #476]	@ (340161f8 <UART_SetConfig+0x590>)
3401601c:	4293      	cmp	r3, r2
3401601e:	d166      	bne.n	340160ee <UART_SetConfig+0x486>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34016020:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34016024:	f7fa f934 	bl	34010290 <HAL_RCCEx_GetPeriphCLKFreq>
34016028:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
3401602a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3401602c:	2b00      	cmp	r3, #0
3401602e:	f000 80c6 	beq.w	340161be <UART_SetConfig+0x556>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34016032:	697b      	ldr	r3, [r7, #20]
34016034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016036:	4a71      	ldr	r2, [pc, #452]	@ (340161fc <UART_SetConfig+0x594>)
34016038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3401603c:	461a      	mov	r2, r3
3401603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34016040:	fbb3 f3f2 	udiv	r3, r3, r2
34016044:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34016046:	697b      	ldr	r3, [r7, #20]
34016048:	685a      	ldr	r2, [r3, #4]
3401604a:	4613      	mov	r3, r2
3401604c:	005b      	lsls	r3, r3, #1
3401604e:	4413      	add	r3, r2
34016050:	69fa      	ldr	r2, [r7, #28]
34016052:	429a      	cmp	r2, r3
34016054:	d305      	bcc.n	34016062 <UART_SetConfig+0x3fa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
34016056:	697b      	ldr	r3, [r7, #20]
34016058:	685b      	ldr	r3, [r3, #4]
3401605a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401605c:	69fa      	ldr	r2, [r7, #28]
3401605e:	429a      	cmp	r2, r3
34016060:	d903      	bls.n	3401606a <UART_SetConfig+0x402>
      {
        ret = HAL_ERROR;
34016062:	2301      	movs	r3, #1
34016064:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
34016068:	e040      	b.n	340160ec <UART_SetConfig+0x484>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401606a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3401606c:	2200      	movs	r2, #0
3401606e:	60bb      	str	r3, [r7, #8]
34016070:	60fa      	str	r2, [r7, #12]
34016072:	697b      	ldr	r3, [r7, #20]
34016074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016076:	4a61      	ldr	r2, [pc, #388]	@ (340161fc <UART_SetConfig+0x594>)
34016078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3401607c:	b29b      	uxth	r3, r3
3401607e:	2200      	movs	r2, #0
34016080:	603b      	str	r3, [r7, #0]
34016082:	607a      	str	r2, [r7, #4]
34016084:	e9d7 2300 	ldrd	r2, r3, [r7]
34016088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3401608c:	f7ea fb88 	bl	340007a0 <__aeabi_uldivmod>
34016090:	4602      	mov	r2, r0
34016092:	460b      	mov	r3, r1
34016094:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
34016098:	6979      	ldr	r1, [r7, #20]
3401609a:	6849      	ldr	r1, [r1, #4]
3401609c:	0849      	lsrs	r1, r1, #1
3401609e:	2000      	movs	r0, #0
340160a0:	460c      	mov	r4, r1
340160a2:	4605      	mov	r5, r0
340160a4:	eb12 0804 	adds.w	r8, r2, r4
340160a8:	eb43 0905 	adc.w	r9, r3, r5
340160ac:	697b      	ldr	r3, [r7, #20]
340160ae:	685b      	ldr	r3, [r3, #4]
340160b0:	2200      	movs	r2, #0
340160b2:	469a      	mov	sl, r3
340160b4:	4693      	mov	fp, r2
340160b6:	4652      	mov	r2, sl
340160b8:	465b      	mov	r3, fp
340160ba:	4640      	mov	r0, r8
340160bc:	4649      	mov	r1, r9
340160be:	f7ea fb6f 	bl	340007a0 <__aeabi_uldivmod>
340160c2:	4602      	mov	r2, r0
340160c4:	460b      	mov	r3, r1
340160c6:	4613      	mov	r3, r2
340160c8:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
340160ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340160cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340160d0:	d308      	bcc.n	340160e4 <UART_SetConfig+0x47c>
340160d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340160d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340160d8:	d204      	bcs.n	340160e4 <UART_SetConfig+0x47c>
        {
          huart->Instance->BRR = usartdiv;
340160da:	697b      	ldr	r3, [r7, #20]
340160dc:	681b      	ldr	r3, [r3, #0]
340160de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
340160e0:	60da      	str	r2, [r3, #12]
340160e2:	e003      	b.n	340160ec <UART_SetConfig+0x484>
        }
        else
        {
          ret = HAL_ERROR;
340160e4:	2301      	movs	r3, #1
340160e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
340160ea:	e068      	b.n	340161be <UART_SetConfig+0x556>
340160ec:	e067      	b.n	340161be <UART_SetConfig+0x556>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
340160ee:	697b      	ldr	r3, [r7, #20]
340160f0:	69db      	ldr	r3, [r3, #28]
340160f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
340160f6:	d138      	bne.n	3401616a <UART_SetConfig+0x502>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
340160f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
340160fc:	f7fa f8c8 	bl	34010290 <HAL_RCCEx_GetPeriphCLKFreq>
34016100:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
34016102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34016104:	2b00      	cmp	r3, #0
34016106:	d05a      	beq.n	340161be <UART_SetConfig+0x556>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34016108:	697b      	ldr	r3, [r7, #20]
3401610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401610c:	4a3b      	ldr	r2, [pc, #236]	@ (340161fc <UART_SetConfig+0x594>)
3401610e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34016112:	461a      	mov	r2, r3
34016114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34016116:	fbb3 f3f2 	udiv	r3, r3, r2
3401611a:	005a      	lsls	r2, r3, #1
3401611c:	697b      	ldr	r3, [r7, #20]
3401611e:	685b      	ldr	r3, [r3, #4]
34016120:	085b      	lsrs	r3, r3, #1
34016122:	441a      	add	r2, r3
34016124:	697b      	ldr	r3, [r7, #20]
34016126:	685b      	ldr	r3, [r3, #4]
34016128:	fbb2 f3f3 	udiv	r3, r2, r3
3401612c:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3401612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016130:	2b0f      	cmp	r3, #15
34016132:	d916      	bls.n	34016162 <UART_SetConfig+0x4fa>
34016134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401613a:	d212      	bcs.n	34016162 <UART_SetConfig+0x4fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3401613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401613e:	b29b      	uxth	r3, r3
34016140:	f023 030f 	bic.w	r3, r3, #15
34016144:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
34016146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016148:	085b      	lsrs	r3, r3, #1
3401614a:	b29b      	uxth	r3, r3
3401614c:	f003 0307 	and.w	r3, r3, #7
34016150:	b29a      	uxth	r2, r3
34016152:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
34016154:	4313      	orrs	r3, r2
34016156:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
34016158:	697b      	ldr	r3, [r7, #20]
3401615a:	681b      	ldr	r3, [r3, #0]
3401615c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
3401615e:	60da      	str	r2, [r3, #12]
34016160:	e02d      	b.n	340161be <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
34016162:	2301      	movs	r3, #1
34016164:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
34016168:	e029      	b.n	340161be <UART_SetConfig+0x556>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401616a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3401616e:	f7fa f88f 	bl	34010290 <HAL_RCCEx_GetPeriphCLKFreq>
34016172:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
34016174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34016176:	2b00      	cmp	r3, #0
34016178:	d021      	beq.n	340161be <UART_SetConfig+0x556>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401617a:	697b      	ldr	r3, [r7, #20]
3401617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401617e:	4a1f      	ldr	r2, [pc, #124]	@ (340161fc <UART_SetConfig+0x594>)
34016180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34016184:	461a      	mov	r2, r3
34016186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34016188:	fbb3 f2f2 	udiv	r2, r3, r2
3401618c:	697b      	ldr	r3, [r7, #20]
3401618e:	685b      	ldr	r3, [r3, #4]
34016190:	085b      	lsrs	r3, r3, #1
34016192:	441a      	add	r2, r3
34016194:	697b      	ldr	r3, [r7, #20]
34016196:	685b      	ldr	r3, [r3, #4]
34016198:	fbb2 f3f3 	udiv	r3, r2, r3
3401619c:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3401619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340161a0:	2b0f      	cmp	r3, #15
340161a2:	d909      	bls.n	340161b8 <UART_SetConfig+0x550>
340161a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340161a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340161aa:	d205      	bcs.n	340161b8 <UART_SetConfig+0x550>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
340161ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340161ae:	b29a      	uxth	r2, r3
340161b0:	697b      	ldr	r3, [r7, #20]
340161b2:	681b      	ldr	r3, [r3, #0]
340161b4:	60da      	str	r2, [r3, #12]
340161b6:	e002      	b.n	340161be <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
340161b8:	2301      	movs	r3, #1
340161ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
340161be:	697b      	ldr	r3, [r7, #20]
340161c0:	2201      	movs	r2, #1
340161c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
340161c6:	697b      	ldr	r3, [r7, #20]
340161c8:	2201      	movs	r2, #1
340161ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
340161ce:	697b      	ldr	r3, [r7, #20]
340161d0:	2200      	movs	r2, #0
340161d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
340161d4:	697b      	ldr	r3, [r7, #20]
340161d6:	2200      	movs	r2, #0
340161d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
340161da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
340161de:	4618      	mov	r0, r3
340161e0:	3740      	adds	r7, #64	@ 0x40
340161e2:	46bd      	mov	sp, r7
340161e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
340161e8:	50007c00 	.word	0x50007c00
340161ec:	52001800 	.word	0x52001800
340161f0:	52001c00 	.word	0x52001c00
340161f4:	56000c00 	.word	0x56000c00
340161f8:	46000c00 	.word	0x46000c00
340161fc:	3401fa4c 	.word	0x3401fa4c

34016200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
34016200:	b580      	push	{r7, lr}
34016202:	b082      	sub	sp, #8
34016204:	af00      	add	r7, sp, #0
34016206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
34016208:	687b      	ldr	r3, [r7, #4]
3401620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401620c:	2bff      	cmp	r3, #255	@ 0xff
3401620e:	d904      	bls.n	3401621a <UART_AdvFeatureConfig+0x1a>
34016210:	f640 41e4 	movw	r1, #3300	@ 0xce4
34016214:	4890      	ldr	r0, [pc, #576]	@ (34016458 <UART_AdvFeatureConfig+0x258>)
34016216:	f7eb fd45 	bl	34001ca4 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3401621a:	687b      	ldr	r3, [r7, #4]
3401621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401621e:	f003 0308 	and.w	r3, r3, #8
34016222:	2b00      	cmp	r3, #0
34016224:	d018      	beq.n	34016258 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
34016226:	687b      	ldr	r3, [r7, #4]
34016228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401622a:	2b00      	cmp	r3, #0
3401622c:	d009      	beq.n	34016242 <UART_AdvFeatureConfig+0x42>
3401622e:	687b      	ldr	r3, [r7, #4]
34016230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34016236:	d004      	beq.n	34016242 <UART_AdvFeatureConfig+0x42>
34016238:	f640 41e9 	movw	r1, #3305	@ 0xce9
3401623c:	4886      	ldr	r0, [pc, #536]	@ (34016458 <UART_AdvFeatureConfig+0x258>)
3401623e:	f7eb fd31 	bl	34001ca4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
34016242:	687b      	ldr	r3, [r7, #4]
34016244:	681b      	ldr	r3, [r3, #0]
34016246:	685b      	ldr	r3, [r3, #4]
34016248:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
3401624c:	687b      	ldr	r3, [r7, #4]
3401624e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34016250:	687b      	ldr	r3, [r7, #4]
34016252:	681b      	ldr	r3, [r3, #0]
34016254:	430a      	orrs	r2, r1
34016256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
34016258:	687b      	ldr	r3, [r7, #4]
3401625a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401625c:	f003 0301 	and.w	r3, r3, #1
34016260:	2b00      	cmp	r3, #0
34016262:	d018      	beq.n	34016296 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
34016264:	687b      	ldr	r3, [r7, #4]
34016266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016268:	2b00      	cmp	r3, #0
3401626a:	d009      	beq.n	34016280 <UART_AdvFeatureConfig+0x80>
3401626c:	687b      	ldr	r3, [r7, #4]
3401626e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34016274:	d004      	beq.n	34016280 <UART_AdvFeatureConfig+0x80>
34016276:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
3401627a:	4877      	ldr	r0, [pc, #476]	@ (34016458 <UART_AdvFeatureConfig+0x258>)
3401627c:	f7eb fd12 	bl	34001ca4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
34016280:	687b      	ldr	r3, [r7, #4]
34016282:	681b      	ldr	r3, [r3, #0]
34016284:	685b      	ldr	r3, [r3, #4]
34016286:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
3401628a:	687b      	ldr	r3, [r7, #4]
3401628c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3401628e:	687b      	ldr	r3, [r7, #4]
34016290:	681b      	ldr	r3, [r3, #0]
34016292:	430a      	orrs	r2, r1
34016294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
34016296:	687b      	ldr	r3, [r7, #4]
34016298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401629a:	f003 0302 	and.w	r3, r3, #2
3401629e:	2b00      	cmp	r3, #0
340162a0:	d018      	beq.n	340162d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
340162a2:	687b      	ldr	r3, [r7, #4]
340162a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340162a6:	2b00      	cmp	r3, #0
340162a8:	d009      	beq.n	340162be <UART_AdvFeatureConfig+0xbe>
340162aa:	687b      	ldr	r3, [r7, #4]
340162ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340162ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340162b2:	d004      	beq.n	340162be <UART_AdvFeatureConfig+0xbe>
340162b4:	f640 41f7 	movw	r1, #3319	@ 0xcf7
340162b8:	4867      	ldr	r0, [pc, #412]	@ (34016458 <UART_AdvFeatureConfig+0x258>)
340162ba:	f7eb fcf3 	bl	34001ca4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
340162be:	687b      	ldr	r3, [r7, #4]
340162c0:	681b      	ldr	r3, [r3, #0]
340162c2:	685b      	ldr	r3, [r3, #4]
340162c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340162c8:	687b      	ldr	r3, [r7, #4]
340162ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
340162cc:	687b      	ldr	r3, [r7, #4]
340162ce:	681b      	ldr	r3, [r3, #0]
340162d0:	430a      	orrs	r2, r1
340162d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
340162d4:	687b      	ldr	r3, [r7, #4]
340162d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340162d8:	f003 0304 	and.w	r3, r3, #4
340162dc:	2b00      	cmp	r3, #0
340162de:	d018      	beq.n	34016312 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
340162e0:	687b      	ldr	r3, [r7, #4]
340162e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340162e4:	2b00      	cmp	r3, #0
340162e6:	d009      	beq.n	340162fc <UART_AdvFeatureConfig+0xfc>
340162e8:	687b      	ldr	r3, [r7, #4]
340162ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340162ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340162f0:	d004      	beq.n	340162fc <UART_AdvFeatureConfig+0xfc>
340162f2:	f640 41fe 	movw	r1, #3326	@ 0xcfe
340162f6:	4858      	ldr	r0, [pc, #352]	@ (34016458 <UART_AdvFeatureConfig+0x258>)
340162f8:	f7eb fcd4 	bl	34001ca4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
340162fc:	687b      	ldr	r3, [r7, #4]
340162fe:	681b      	ldr	r3, [r3, #0]
34016300:	685b      	ldr	r3, [r3, #4]
34016302:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
34016306:	687b      	ldr	r3, [r7, #4]
34016308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3401630a:	687b      	ldr	r3, [r7, #4]
3401630c:	681b      	ldr	r3, [r3, #0]
3401630e:	430a      	orrs	r2, r1
34016310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
34016312:	687b      	ldr	r3, [r7, #4]
34016314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016316:	f003 0310 	and.w	r3, r3, #16
3401631a:	2b00      	cmp	r3, #0
3401631c:	d018      	beq.n	34016350 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3401631e:	687b      	ldr	r3, [r7, #4]
34016320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016322:	2b00      	cmp	r3, #0
34016324:	d009      	beq.n	3401633a <UART_AdvFeatureConfig+0x13a>
34016326:	687b      	ldr	r3, [r7, #4]
34016328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3401632a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401632e:	d004      	beq.n	3401633a <UART_AdvFeatureConfig+0x13a>
34016330:	f640 5105 	movw	r1, #3333	@ 0xd05
34016334:	4848      	ldr	r0, [pc, #288]	@ (34016458 <UART_AdvFeatureConfig+0x258>)
34016336:	f7eb fcb5 	bl	34001ca4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3401633a:	687b      	ldr	r3, [r7, #4]
3401633c:	681b      	ldr	r3, [r3, #0]
3401633e:	689b      	ldr	r3, [r3, #8]
34016340:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
34016344:	687b      	ldr	r3, [r7, #4]
34016346:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
34016348:	687b      	ldr	r3, [r7, #4]
3401634a:	681b      	ldr	r3, [r3, #0]
3401634c:	430a      	orrs	r2, r1
3401634e:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
34016350:	687b      	ldr	r3, [r7, #4]
34016352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016354:	f003 0320 	and.w	r3, r3, #32
34016358:	2b00      	cmp	r3, #0
3401635a:	d018      	beq.n	3401638e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3401635c:	687b      	ldr	r3, [r7, #4]
3401635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016360:	2b00      	cmp	r3, #0
34016362:	d009      	beq.n	34016378 <UART_AdvFeatureConfig+0x178>
34016364:	687b      	ldr	r3, [r7, #4]
34016366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3401636c:	d004      	beq.n	34016378 <UART_AdvFeatureConfig+0x178>
3401636e:	f640 510d 	movw	r1, #3341	@ 0xd0d
34016372:	4839      	ldr	r0, [pc, #228]	@ (34016458 <UART_AdvFeatureConfig+0x258>)
34016374:	f7eb fc96 	bl	34001ca4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
34016378:	687b      	ldr	r3, [r7, #4]
3401637a:	681b      	ldr	r3, [r3, #0]
3401637c:	689b      	ldr	r3, [r3, #8]
3401637e:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
34016382:	687b      	ldr	r3, [r7, #4]
34016384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34016386:	687b      	ldr	r3, [r7, #4]
34016388:	681b      	ldr	r3, [r3, #0]
3401638a:	430a      	orrs	r2, r1
3401638c:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3401638e:	687b      	ldr	r3, [r7, #4]
34016390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34016396:	2b00      	cmp	r3, #0
34016398:	f000 80d2 	beq.w	34016540 <UART_AdvFeatureConfig+0x340>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3401639c:	687b      	ldr	r3, [r7, #4]
3401639e:	681b      	ldr	r3, [r3, #0]
340163a0:	4a2e      	ldr	r2, [pc, #184]	@ (3401645c <UART_AdvFeatureConfig+0x25c>)
340163a2:	4293      	cmp	r3, r2
340163a4:	f000 808b 	beq.w	340164be <UART_AdvFeatureConfig+0x2be>
340163a8:	687b      	ldr	r3, [r7, #4]
340163aa:	681b      	ldr	r3, [r3, #0]
340163ac:	4a2c      	ldr	r2, [pc, #176]	@ (34016460 <UART_AdvFeatureConfig+0x260>)
340163ae:	4293      	cmp	r3, r2
340163b0:	f000 8085 	beq.w	340164be <UART_AdvFeatureConfig+0x2be>
340163b4:	687b      	ldr	r3, [r7, #4]
340163b6:	681b      	ldr	r3, [r3, #0]
340163b8:	4a2a      	ldr	r2, [pc, #168]	@ (34016464 <UART_AdvFeatureConfig+0x264>)
340163ba:	4293      	cmp	r3, r2
340163bc:	d07f      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
340163be:	687b      	ldr	r3, [r7, #4]
340163c0:	681b      	ldr	r3, [r3, #0]
340163c2:	4a29      	ldr	r2, [pc, #164]	@ (34016468 <UART_AdvFeatureConfig+0x268>)
340163c4:	4293      	cmp	r3, r2
340163c6:	d07a      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
340163c8:	687b      	ldr	r3, [r7, #4]
340163ca:	681b      	ldr	r3, [r3, #0]
340163cc:	4a27      	ldr	r2, [pc, #156]	@ (3401646c <UART_AdvFeatureConfig+0x26c>)
340163ce:	4293      	cmp	r3, r2
340163d0:	d075      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
340163d2:	687b      	ldr	r3, [r7, #4]
340163d4:	681b      	ldr	r3, [r3, #0]
340163d6:	4a26      	ldr	r2, [pc, #152]	@ (34016470 <UART_AdvFeatureConfig+0x270>)
340163d8:	4293      	cmp	r3, r2
340163da:	d070      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
340163dc:	687b      	ldr	r3, [r7, #4]
340163de:	681b      	ldr	r3, [r3, #0]
340163e0:	4a24      	ldr	r2, [pc, #144]	@ (34016474 <UART_AdvFeatureConfig+0x274>)
340163e2:	4293      	cmp	r3, r2
340163e4:	d06b      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
340163e6:	687b      	ldr	r3, [r7, #4]
340163e8:	681b      	ldr	r3, [r3, #0]
340163ea:	4a23      	ldr	r2, [pc, #140]	@ (34016478 <UART_AdvFeatureConfig+0x278>)
340163ec:	4293      	cmp	r3, r2
340163ee:	d066      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
340163f0:	687b      	ldr	r3, [r7, #4]
340163f2:	681b      	ldr	r3, [r3, #0]
340163f4:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340163f8:	d061      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
340163fa:	687b      	ldr	r3, [r7, #4]
340163fc:	681b      	ldr	r3, [r3, #0]
340163fe:	4a1f      	ldr	r2, [pc, #124]	@ (3401647c <UART_AdvFeatureConfig+0x27c>)
34016400:	4293      	cmp	r3, r2
34016402:	d05c      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
34016404:	687b      	ldr	r3, [r7, #4]
34016406:	681b      	ldr	r3, [r3, #0]
34016408:	4a1d      	ldr	r2, [pc, #116]	@ (34016480 <UART_AdvFeatureConfig+0x280>)
3401640a:	4293      	cmp	r3, r2
3401640c:	d057      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
3401640e:	687b      	ldr	r3, [r7, #4]
34016410:	681b      	ldr	r3, [r3, #0]
34016412:	4a1c      	ldr	r2, [pc, #112]	@ (34016484 <UART_AdvFeatureConfig+0x284>)
34016414:	4293      	cmp	r3, r2
34016416:	d052      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
34016418:	687b      	ldr	r3, [r7, #4]
3401641a:	681b      	ldr	r3, [r3, #0]
3401641c:	4a1a      	ldr	r2, [pc, #104]	@ (34016488 <UART_AdvFeatureConfig+0x288>)
3401641e:	4293      	cmp	r3, r2
34016420:	d04d      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
34016422:	687b      	ldr	r3, [r7, #4]
34016424:	681b      	ldr	r3, [r3, #0]
34016426:	4a19      	ldr	r2, [pc, #100]	@ (3401648c <UART_AdvFeatureConfig+0x28c>)
34016428:	4293      	cmp	r3, r2
3401642a:	d048      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
3401642c:	687b      	ldr	r3, [r7, #4]
3401642e:	681b      	ldr	r3, [r3, #0]
34016430:	4a17      	ldr	r2, [pc, #92]	@ (34016490 <UART_AdvFeatureConfig+0x290>)
34016432:	4293      	cmp	r3, r2
34016434:	d043      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
34016436:	687b      	ldr	r3, [r7, #4]
34016438:	681b      	ldr	r3, [r3, #0]
3401643a:	4a16      	ldr	r2, [pc, #88]	@ (34016494 <UART_AdvFeatureConfig+0x294>)
3401643c:	4293      	cmp	r3, r2
3401643e:	d03e      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
34016440:	687b      	ldr	r3, [r7, #4]
34016442:	681b      	ldr	r3, [r3, #0]
34016444:	4a14      	ldr	r2, [pc, #80]	@ (34016498 <UART_AdvFeatureConfig+0x298>)
34016446:	4293      	cmp	r3, r2
34016448:	d039      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
3401644a:	687b      	ldr	r3, [r7, #4]
3401644c:	681b      	ldr	r3, [r3, #0]
3401644e:	4a13      	ldr	r2, [pc, #76]	@ (3401649c <UART_AdvFeatureConfig+0x29c>)
34016450:	4293      	cmp	r3, r2
34016452:	d034      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
34016454:	e024      	b.n	340164a0 <UART_AdvFeatureConfig+0x2a0>
34016456:	bf00      	nop
34016458:	3401eb0c 	.word	0x3401eb0c
3401645c:	52001000 	.word	0x52001000
34016460:	42001000 	.word	0x42001000
34016464:	50004400 	.word	0x50004400
34016468:	40004400 	.word	0x40004400
3401646c:	50004800 	.word	0x50004800
34016470:	40004800 	.word	0x40004800
34016474:	50004c00 	.word	0x50004c00
34016478:	40004c00 	.word	0x40004c00
3401647c:	40005000 	.word	0x40005000
34016480:	52001400 	.word	0x52001400
34016484:	42001400 	.word	0x42001400
34016488:	50007800 	.word	0x50007800
3401648c:	40007800 	.word	0x40007800
34016490:	50007c00 	.word	0x50007c00
34016494:	40007c00 	.word	0x40007c00
34016498:	52001800 	.word	0x52001800
3401649c:	42001800 	.word	0x42001800
340164a0:	687b      	ldr	r3, [r7, #4]
340164a2:	681b      	ldr	r3, [r3, #0]
340164a4:	4a38      	ldr	r2, [pc, #224]	@ (34016588 <UART_AdvFeatureConfig+0x388>)
340164a6:	4293      	cmp	r3, r2
340164a8:	d009      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
340164aa:	687b      	ldr	r3, [r7, #4]
340164ac:	681b      	ldr	r3, [r3, #0]
340164ae:	4a37      	ldr	r2, [pc, #220]	@ (3401658c <UART_AdvFeatureConfig+0x38c>)
340164b0:	4293      	cmp	r3, r2
340164b2:	d004      	beq.n	340164be <UART_AdvFeatureConfig+0x2be>
340164b4:	f640 5115 	movw	r1, #3349	@ 0xd15
340164b8:	4835      	ldr	r0, [pc, #212]	@ (34016590 <UART_AdvFeatureConfig+0x390>)
340164ba:	f7eb fbf3 	bl	34001ca4 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
340164be:	687b      	ldr	r3, [r7, #4]
340164c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340164c2:	2b00      	cmp	r3, #0
340164c4:	d009      	beq.n	340164da <UART_AdvFeatureConfig+0x2da>
340164c6:	687b      	ldr	r3, [r7, #4]
340164c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340164ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340164ce:	d004      	beq.n	340164da <UART_AdvFeatureConfig+0x2da>
340164d0:	f640 5116 	movw	r1, #3350	@ 0xd16
340164d4:	482e      	ldr	r0, [pc, #184]	@ (34016590 <UART_AdvFeatureConfig+0x390>)
340164d6:	f7eb fbe5 	bl	34001ca4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
340164da:	687b      	ldr	r3, [r7, #4]
340164dc:	681b      	ldr	r3, [r3, #0]
340164de:	685b      	ldr	r3, [r3, #4]
340164e0:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
340164e4:	687b      	ldr	r3, [r7, #4]
340164e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
340164e8:	687b      	ldr	r3, [r7, #4]
340164ea:	681b      	ldr	r3, [r3, #0]
340164ec:	430a      	orrs	r2, r1
340164ee:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
340164f0:	687b      	ldr	r3, [r7, #4]
340164f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340164f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340164f8:	d122      	bne.n	34016540 <UART_AdvFeatureConfig+0x340>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
340164fa:	687b      	ldr	r3, [r7, #4]
340164fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340164fe:	2b00      	cmp	r3, #0
34016500:	d013      	beq.n	3401652a <UART_AdvFeatureConfig+0x32a>
34016502:	687b      	ldr	r3, [r7, #4]
34016504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34016506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3401650a:	d00e      	beq.n	3401652a <UART_AdvFeatureConfig+0x32a>
3401650c:	687b      	ldr	r3, [r7, #4]
3401650e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34016510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34016514:	d009      	beq.n	3401652a <UART_AdvFeatureConfig+0x32a>
34016516:	687b      	ldr	r3, [r7, #4]
34016518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401651a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
3401651e:	d004      	beq.n	3401652a <UART_AdvFeatureConfig+0x32a>
34016520:	f640 511b 	movw	r1, #3355	@ 0xd1b
34016524:	481a      	ldr	r0, [pc, #104]	@ (34016590 <UART_AdvFeatureConfig+0x390>)
34016526:	f7eb fbbd 	bl	34001ca4 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3401652a:	687b      	ldr	r3, [r7, #4]
3401652c:	681b      	ldr	r3, [r3, #0]
3401652e:	685b      	ldr	r3, [r3, #4]
34016530:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
34016534:	687b      	ldr	r3, [r7, #4]
34016536:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34016538:	687b      	ldr	r3, [r7, #4]
3401653a:	681b      	ldr	r3, [r3, #0]
3401653c:	430a      	orrs	r2, r1
3401653e:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
34016540:	687b      	ldr	r3, [r7, #4]
34016542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34016548:	2b00      	cmp	r3, #0
3401654a:	d018      	beq.n	3401657e <UART_AdvFeatureConfig+0x37e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3401654c:	687b      	ldr	r3, [r7, #4]
3401654e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34016550:	2b00      	cmp	r3, #0
34016552:	d009      	beq.n	34016568 <UART_AdvFeatureConfig+0x368>
34016554:	687b      	ldr	r3, [r7, #4]
34016556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34016558:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3401655c:	d004      	beq.n	34016568 <UART_AdvFeatureConfig+0x368>
3401655e:	f640 5123 	movw	r1, #3363	@ 0xd23
34016562:	480b      	ldr	r0, [pc, #44]	@ (34016590 <UART_AdvFeatureConfig+0x390>)
34016564:	f7eb fb9e 	bl	34001ca4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
34016568:	687b      	ldr	r3, [r7, #4]
3401656a:	681b      	ldr	r3, [r3, #0]
3401656c:	685b      	ldr	r3, [r3, #4]
3401656e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
34016572:	687b      	ldr	r3, [r7, #4]
34016574:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
34016576:	687b      	ldr	r3, [r7, #4]
34016578:	681b      	ldr	r3, [r3, #0]
3401657a:	430a      	orrs	r2, r1
3401657c:	605a      	str	r2, [r3, #4]
  }
}
3401657e:	bf00      	nop
34016580:	3708      	adds	r7, #8
34016582:	46bd      	mov	sp, r7
34016584:	bd80      	pop	{r7, pc}
34016586:	bf00      	nop
34016588:	52001c00 	.word	0x52001c00
3401658c:	42001c00 	.word	0x42001c00
34016590:	3401eb0c 	.word	0x3401eb0c

34016594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
34016594:	b580      	push	{r7, lr}
34016596:	b098      	sub	sp, #96	@ 0x60
34016598:	af02      	add	r7, sp, #8
3401659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3401659c:	687b      	ldr	r3, [r7, #4]
3401659e:	2200      	movs	r2, #0
340165a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
340165a4:	f7ed fba0 	bl	34003ce8 <HAL_GetTick>
340165a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
340165aa:	687b      	ldr	r3, [r7, #4]
340165ac:	681b      	ldr	r3, [r3, #0]
340165ae:	681b      	ldr	r3, [r3, #0]
340165b0:	f003 0308 	and.w	r3, r3, #8
340165b4:	2b08      	cmp	r3, #8
340165b6:	d12f      	bne.n	34016618 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
340165b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
340165bc:	9300      	str	r3, [sp, #0]
340165be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340165c0:	2200      	movs	r2, #0
340165c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
340165c6:	6878      	ldr	r0, [r7, #4]
340165c8:	f000 f88e 	bl	340166e8 <UART_WaitOnFlagUntilTimeout>
340165cc:	4603      	mov	r3, r0
340165ce:	2b00      	cmp	r3, #0
340165d0:	d022      	beq.n	34016618 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
340165d2:	687b      	ldr	r3, [r7, #4]
340165d4:	681b      	ldr	r3, [r3, #0]
340165d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
340165d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
340165da:	e853 3f00 	ldrex	r3, [r3]
340165de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
340165e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340165e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
340165e6:	653b      	str	r3, [r7, #80]	@ 0x50
340165e8:	687b      	ldr	r3, [r7, #4]
340165ea:	681b      	ldr	r3, [r3, #0]
340165ec:	461a      	mov	r2, r3
340165ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
340165f0:	647b      	str	r3, [r7, #68]	@ 0x44
340165f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
340165f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
340165f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
340165f8:	e841 2300 	strex	r3, r2, [r1]
340165fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
340165fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34016600:	2b00      	cmp	r3, #0
34016602:	d1e6      	bne.n	340165d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
34016604:	687b      	ldr	r3, [r7, #4]
34016606:	2220      	movs	r2, #32
34016608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
3401660c:	687b      	ldr	r3, [r7, #4]
3401660e:	2200      	movs	r2, #0
34016610:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
34016614:	2303      	movs	r3, #3
34016616:	e063      	b.n	340166e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
34016618:	687b      	ldr	r3, [r7, #4]
3401661a:	681b      	ldr	r3, [r3, #0]
3401661c:	681b      	ldr	r3, [r3, #0]
3401661e:	f003 0304 	and.w	r3, r3, #4
34016622:	2b04      	cmp	r3, #4
34016624:	d149      	bne.n	340166ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
34016626:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3401662a:	9300      	str	r3, [sp, #0]
3401662c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401662e:	2200      	movs	r2, #0
34016630:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
34016634:	6878      	ldr	r0, [r7, #4]
34016636:	f000 f857 	bl	340166e8 <UART_WaitOnFlagUntilTimeout>
3401663a:	4603      	mov	r3, r0
3401663c:	2b00      	cmp	r3, #0
3401663e:	d03c      	beq.n	340166ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
34016640:	687b      	ldr	r3, [r7, #4]
34016642:	681b      	ldr	r3, [r3, #0]
34016644:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34016646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016648:	e853 3f00 	ldrex	r3, [r3]
3401664c:	623b      	str	r3, [r7, #32]
   return(result);
3401664e:	6a3b      	ldr	r3, [r7, #32]
34016650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
34016654:	64fb      	str	r3, [r7, #76]	@ 0x4c
34016656:	687b      	ldr	r3, [r7, #4]
34016658:	681b      	ldr	r3, [r3, #0]
3401665a:	461a      	mov	r2, r3
3401665c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3401665e:	633b      	str	r3, [r7, #48]	@ 0x30
34016660:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34016662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
34016664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
34016666:	e841 2300 	strex	r3, r2, [r1]
3401666a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
3401666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3401666e:	2b00      	cmp	r3, #0
34016670:	d1e6      	bne.n	34016640 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
34016672:	687b      	ldr	r3, [r7, #4]
34016674:	681b      	ldr	r3, [r3, #0]
34016676:	3308      	adds	r3, #8
34016678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401667a:	693b      	ldr	r3, [r7, #16]
3401667c:	e853 3f00 	ldrex	r3, [r3]
34016680:	60fb      	str	r3, [r7, #12]
   return(result);
34016682:	68fb      	ldr	r3, [r7, #12]
34016684:	f023 0301 	bic.w	r3, r3, #1
34016688:	64bb      	str	r3, [r7, #72]	@ 0x48
3401668a:	687b      	ldr	r3, [r7, #4]
3401668c:	681b      	ldr	r3, [r3, #0]
3401668e:	3308      	adds	r3, #8
34016690:	6cba      	ldr	r2, [r7, #72]	@ 0x48
34016692:	61fa      	str	r2, [r7, #28]
34016694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34016696:	69b9      	ldr	r1, [r7, #24]
34016698:	69fa      	ldr	r2, [r7, #28]
3401669a:	e841 2300 	strex	r3, r2, [r1]
3401669e:	617b      	str	r3, [r7, #20]
   return(result);
340166a0:	697b      	ldr	r3, [r7, #20]
340166a2:	2b00      	cmp	r3, #0
340166a4:	d1e5      	bne.n	34016672 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
340166a6:	687b      	ldr	r3, [r7, #4]
340166a8:	2220      	movs	r2, #32
340166aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
340166ae:	687b      	ldr	r3, [r7, #4]
340166b0:	2200      	movs	r2, #0
340166b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
340166b6:	2303      	movs	r3, #3
340166b8:	e012      	b.n	340166e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
340166ba:	687b      	ldr	r3, [r7, #4]
340166bc:	2220      	movs	r2, #32
340166be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
340166c2:	687b      	ldr	r3, [r7, #4]
340166c4:	2220      	movs	r2, #32
340166c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
340166ca:	687b      	ldr	r3, [r7, #4]
340166cc:	2200      	movs	r2, #0
340166ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
340166d0:	687b      	ldr	r3, [r7, #4]
340166d2:	2200      	movs	r2, #0
340166d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
340166d6:	687b      	ldr	r3, [r7, #4]
340166d8:	2200      	movs	r2, #0
340166da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
340166de:	2300      	movs	r3, #0
}
340166e0:	4618      	mov	r0, r3
340166e2:	3758      	adds	r7, #88	@ 0x58
340166e4:	46bd      	mov	sp, r7
340166e6:	bd80      	pop	{r7, pc}

340166e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
340166e8:	b580      	push	{r7, lr}
340166ea:	b084      	sub	sp, #16
340166ec:	af00      	add	r7, sp, #0
340166ee:	60f8      	str	r0, [r7, #12]
340166f0:	60b9      	str	r1, [r7, #8]
340166f2:	603b      	str	r3, [r7, #0]
340166f4:	4613      	mov	r3, r2
340166f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
340166f8:	e04f      	b.n	3401679a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
340166fa:	69bb      	ldr	r3, [r7, #24]
340166fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34016700:	d04b      	beq.n	3401679a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34016702:	f7ed faf1 	bl	34003ce8 <HAL_GetTick>
34016706:	4602      	mov	r2, r0
34016708:	683b      	ldr	r3, [r7, #0]
3401670a:	1ad3      	subs	r3, r2, r3
3401670c:	69ba      	ldr	r2, [r7, #24]
3401670e:	429a      	cmp	r2, r3
34016710:	d302      	bcc.n	34016718 <UART_WaitOnFlagUntilTimeout+0x30>
34016712:	69bb      	ldr	r3, [r7, #24]
34016714:	2b00      	cmp	r3, #0
34016716:	d101      	bne.n	3401671c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
34016718:	2303      	movs	r3, #3
3401671a:	e04e      	b.n	340167ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3401671c:	68fb      	ldr	r3, [r7, #12]
3401671e:	681b      	ldr	r3, [r3, #0]
34016720:	681b      	ldr	r3, [r3, #0]
34016722:	f003 0304 	and.w	r3, r3, #4
34016726:	2b00      	cmp	r3, #0
34016728:	d037      	beq.n	3401679a <UART_WaitOnFlagUntilTimeout+0xb2>
3401672a:	68bb      	ldr	r3, [r7, #8]
3401672c:	2b80      	cmp	r3, #128	@ 0x80
3401672e:	d034      	beq.n	3401679a <UART_WaitOnFlagUntilTimeout+0xb2>
34016730:	68bb      	ldr	r3, [r7, #8]
34016732:	2b40      	cmp	r3, #64	@ 0x40
34016734:	d031      	beq.n	3401679a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
34016736:	68fb      	ldr	r3, [r7, #12]
34016738:	681b      	ldr	r3, [r3, #0]
3401673a:	69db      	ldr	r3, [r3, #28]
3401673c:	f003 0308 	and.w	r3, r3, #8
34016740:	2b08      	cmp	r3, #8
34016742:	d110      	bne.n	34016766 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
34016744:	68fb      	ldr	r3, [r7, #12]
34016746:	681b      	ldr	r3, [r3, #0]
34016748:	2208      	movs	r2, #8
3401674a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3401674c:	68f8      	ldr	r0, [r7, #12]
3401674e:	f000 f838 	bl	340167c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
34016752:	68fb      	ldr	r3, [r7, #12]
34016754:	2208      	movs	r2, #8
34016756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3401675a:	68fb      	ldr	r3, [r7, #12]
3401675c:	2200      	movs	r2, #0
3401675e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
34016762:	2301      	movs	r3, #1
34016764:	e029      	b.n	340167ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
34016766:	68fb      	ldr	r3, [r7, #12]
34016768:	681b      	ldr	r3, [r3, #0]
3401676a:	69db      	ldr	r3, [r3, #28]
3401676c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34016770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34016774:	d111      	bne.n	3401679a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
34016776:	68fb      	ldr	r3, [r7, #12]
34016778:	681b      	ldr	r3, [r3, #0]
3401677a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401677e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
34016780:	68f8      	ldr	r0, [r7, #12]
34016782:	f000 f81e 	bl	340167c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
34016786:	68fb      	ldr	r3, [r7, #12]
34016788:	2220      	movs	r2, #32
3401678a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3401678e:	68fb      	ldr	r3, [r7, #12]
34016790:	2200      	movs	r2, #0
34016792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
34016796:	2303      	movs	r3, #3
34016798:	e00f      	b.n	340167ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3401679a:	68fb      	ldr	r3, [r7, #12]
3401679c:	681b      	ldr	r3, [r3, #0]
3401679e:	69da      	ldr	r2, [r3, #28]
340167a0:	68bb      	ldr	r3, [r7, #8]
340167a2:	4013      	ands	r3, r2
340167a4:	68ba      	ldr	r2, [r7, #8]
340167a6:	429a      	cmp	r2, r3
340167a8:	bf0c      	ite	eq
340167aa:	2301      	moveq	r3, #1
340167ac:	2300      	movne	r3, #0
340167ae:	b2db      	uxtb	r3, r3
340167b0:	461a      	mov	r2, r3
340167b2:	79fb      	ldrb	r3, [r7, #7]
340167b4:	429a      	cmp	r2, r3
340167b6:	d0a0      	beq.n	340166fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
340167b8:	2300      	movs	r3, #0
}
340167ba:	4618      	mov	r0, r3
340167bc:	3710      	adds	r7, #16
340167be:	46bd      	mov	sp, r7
340167c0:	bd80      	pop	{r7, pc}

340167c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
340167c2:	b480      	push	{r7}
340167c4:	b095      	sub	sp, #84	@ 0x54
340167c6:	af00      	add	r7, sp, #0
340167c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
340167ca:	687b      	ldr	r3, [r7, #4]
340167cc:	681b      	ldr	r3, [r3, #0]
340167ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
340167d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340167d2:	e853 3f00 	ldrex	r3, [r3]
340167d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
340167d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
340167da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
340167de:	64fb      	str	r3, [r7, #76]	@ 0x4c
340167e0:	687b      	ldr	r3, [r7, #4]
340167e2:	681b      	ldr	r3, [r3, #0]
340167e4:	461a      	mov	r2, r3
340167e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
340167e8:	643b      	str	r3, [r7, #64]	@ 0x40
340167ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
340167ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
340167ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
340167f0:	e841 2300 	strex	r3, r2, [r1]
340167f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
340167f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
340167f8:	2b00      	cmp	r3, #0
340167fa:	d1e6      	bne.n	340167ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
340167fc:	687b      	ldr	r3, [r7, #4]
340167fe:	681b      	ldr	r3, [r3, #0]
34016800:	3308      	adds	r3, #8
34016802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34016804:	6a3b      	ldr	r3, [r7, #32]
34016806:	e853 3f00 	ldrex	r3, [r3]
3401680a:	61fb      	str	r3, [r7, #28]
   return(result);
3401680c:	69fb      	ldr	r3, [r7, #28]
3401680e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
34016812:	f023 0301 	bic.w	r3, r3, #1
34016816:	64bb      	str	r3, [r7, #72]	@ 0x48
34016818:	687b      	ldr	r3, [r7, #4]
3401681a:	681b      	ldr	r3, [r3, #0]
3401681c:	3308      	adds	r3, #8
3401681e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
34016820:	62fa      	str	r2, [r7, #44]	@ 0x2c
34016822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34016824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34016826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34016828:	e841 2300 	strex	r3, r2, [r1]
3401682c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
3401682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016830:	2b00      	cmp	r3, #0
34016832:	d1e3      	bne.n	340167fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
34016834:	687b      	ldr	r3, [r7, #4]
34016836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34016838:	2b01      	cmp	r3, #1
3401683a:	d118      	bne.n	3401686e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3401683c:	687b      	ldr	r3, [r7, #4]
3401683e:	681b      	ldr	r3, [r3, #0]
34016840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34016842:	68fb      	ldr	r3, [r7, #12]
34016844:	e853 3f00 	ldrex	r3, [r3]
34016848:	60bb      	str	r3, [r7, #8]
   return(result);
3401684a:	68bb      	ldr	r3, [r7, #8]
3401684c:	f023 0310 	bic.w	r3, r3, #16
34016850:	647b      	str	r3, [r7, #68]	@ 0x44
34016852:	687b      	ldr	r3, [r7, #4]
34016854:	681b      	ldr	r3, [r3, #0]
34016856:	461a      	mov	r2, r3
34016858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3401685a:	61bb      	str	r3, [r7, #24]
3401685c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401685e:	6979      	ldr	r1, [r7, #20]
34016860:	69ba      	ldr	r2, [r7, #24]
34016862:	e841 2300 	strex	r3, r2, [r1]
34016866:	613b      	str	r3, [r7, #16]
   return(result);
34016868:	693b      	ldr	r3, [r7, #16]
3401686a:	2b00      	cmp	r3, #0
3401686c:	d1e6      	bne.n	3401683c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3401686e:	687b      	ldr	r3, [r7, #4]
34016870:	2220      	movs	r2, #32
34016872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
34016876:	687b      	ldr	r3, [r7, #4]
34016878:	2200      	movs	r2, #0
3401687a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3401687c:	687b      	ldr	r3, [r7, #4]
3401687e:	2200      	movs	r2, #0
34016880:	675a      	str	r2, [r3, #116]	@ 0x74
}
34016882:	bf00      	nop
34016884:	3754      	adds	r7, #84	@ 0x54
34016886:	46bd      	mov	sp, r7
34016888:	f85d 7b04 	ldr.w	r7, [sp], #4
3401688c:	4770      	bx	lr
	...

34016890 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
34016890:	b580      	push	{r7, lr}
34016892:	b086      	sub	sp, #24
34016894:	af02      	add	r7, sp, #8
34016896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34016898:	2300      	movs	r3, #0
3401689a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3401689c:	f7ed fa24 	bl	34003ce8 <HAL_GetTick>
340168a0:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
340168a2:	687b      	ldr	r3, [r7, #4]
340168a4:	2b00      	cmp	r3, #0
340168a6:	d102      	bne.n	340168ae <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
340168a8:	2301      	movs	r3, #1
340168aa:	73fb      	strb	r3, [r7, #15]
340168ac:	e2c8      	b.n	34016e40 <HAL_XSPI_Init+0x5b0>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Check the parameters of the initialization structure */
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
340168ae:	687b      	ldr	r3, [r7, #4]
340168b0:	689b      	ldr	r3, [r3, #8]
340168b2:	2b00      	cmp	r3, #0
340168b4:	d008      	beq.n	340168c8 <HAL_XSPI_Init+0x38>
340168b6:	687b      	ldr	r3, [r7, #4]
340168b8:	689b      	ldr	r3, [r3, #8]
340168ba:	2b40      	cmp	r3, #64	@ 0x40
340168bc:	d004      	beq.n	340168c8 <HAL_XSPI_Init+0x38>
340168be:	f240 1161 	movw	r1, #353	@ 0x161
340168c2:	488a      	ldr	r0, [pc, #552]	@ (34016aec <HAL_XSPI_Init+0x25c>)
340168c4:	f7eb f9ee 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
340168c8:	687b      	ldr	r3, [r7, #4]
340168ca:	68db      	ldr	r3, [r3, #12]
340168cc:	2b00      	cmp	r3, #0
340168ce:	d01d      	beq.n	3401690c <HAL_XSPI_Init+0x7c>
340168d0:	687b      	ldr	r3, [r7, #4]
340168d2:	68db      	ldr	r3, [r3, #12]
340168d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340168d8:	d018      	beq.n	3401690c <HAL_XSPI_Init+0x7c>
340168da:	687b      	ldr	r3, [r7, #4]
340168dc:	68db      	ldr	r3, [r3, #12]
340168de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340168e2:	d013      	beq.n	3401690c <HAL_XSPI_Init+0x7c>
340168e4:	687b      	ldr	r3, [r7, #4]
340168e6:	68db      	ldr	r3, [r3, #12]
340168e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
340168ec:	d00e      	beq.n	3401690c <HAL_XSPI_Init+0x7c>
340168ee:	687b      	ldr	r3, [r7, #4]
340168f0:	68db      	ldr	r3, [r3, #12]
340168f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340168f6:	d009      	beq.n	3401690c <HAL_XSPI_Init+0x7c>
340168f8:	687b      	ldr	r3, [r7, #4]
340168fa:	68db      	ldr	r3, [r3, #12]
340168fc:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
34016900:	d004      	beq.n	3401690c <HAL_XSPI_Init+0x7c>
34016902:	f44f 71b1 	mov.w	r1, #354	@ 0x162
34016906:	4879      	ldr	r0, [pc, #484]	@ (34016aec <HAL_XSPI_Init+0x25c>)
34016908:	f7eb f9cc 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
3401690c:	687b      	ldr	r3, [r7, #4]
3401690e:	691b      	ldr	r3, [r3, #16]
34016910:	2b00      	cmp	r3, #0
34016912:	f000 8081 	beq.w	34016a18 <HAL_XSPI_Init+0x188>
34016916:	687b      	ldr	r3, [r7, #4]
34016918:	691b      	ldr	r3, [r3, #16]
3401691a:	2b01      	cmp	r3, #1
3401691c:	d07c      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
3401691e:	687b      	ldr	r3, [r7, #4]
34016920:	691b      	ldr	r3, [r3, #16]
34016922:	2b02      	cmp	r3, #2
34016924:	d078      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
34016926:	687b      	ldr	r3, [r7, #4]
34016928:	691b      	ldr	r3, [r3, #16]
3401692a:	2b03      	cmp	r3, #3
3401692c:	d074      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
3401692e:	687b      	ldr	r3, [r7, #4]
34016930:	691b      	ldr	r3, [r3, #16]
34016932:	2b04      	cmp	r3, #4
34016934:	d070      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
34016936:	687b      	ldr	r3, [r7, #4]
34016938:	691b      	ldr	r3, [r3, #16]
3401693a:	2b05      	cmp	r3, #5
3401693c:	d06c      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
3401693e:	687b      	ldr	r3, [r7, #4]
34016940:	691b      	ldr	r3, [r3, #16]
34016942:	2b06      	cmp	r3, #6
34016944:	d068      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
34016946:	687b      	ldr	r3, [r7, #4]
34016948:	691b      	ldr	r3, [r3, #16]
3401694a:	2b07      	cmp	r3, #7
3401694c:	d064      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
3401694e:	687b      	ldr	r3, [r7, #4]
34016950:	691b      	ldr	r3, [r3, #16]
34016952:	2b08      	cmp	r3, #8
34016954:	d060      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
34016956:	687b      	ldr	r3, [r7, #4]
34016958:	691b      	ldr	r3, [r3, #16]
3401695a:	2b09      	cmp	r3, #9
3401695c:	d05c      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
3401695e:	687b      	ldr	r3, [r7, #4]
34016960:	691b      	ldr	r3, [r3, #16]
34016962:	2b0a      	cmp	r3, #10
34016964:	d058      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
34016966:	687b      	ldr	r3, [r7, #4]
34016968:	691b      	ldr	r3, [r3, #16]
3401696a:	2b0b      	cmp	r3, #11
3401696c:	d054      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
3401696e:	687b      	ldr	r3, [r7, #4]
34016970:	691b      	ldr	r3, [r3, #16]
34016972:	2b0c      	cmp	r3, #12
34016974:	d050      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
34016976:	687b      	ldr	r3, [r7, #4]
34016978:	691b      	ldr	r3, [r3, #16]
3401697a:	2b0d      	cmp	r3, #13
3401697c:	d04c      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
3401697e:	687b      	ldr	r3, [r7, #4]
34016980:	691b      	ldr	r3, [r3, #16]
34016982:	2b0e      	cmp	r3, #14
34016984:	d048      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
34016986:	687b      	ldr	r3, [r7, #4]
34016988:	691b      	ldr	r3, [r3, #16]
3401698a:	2b0f      	cmp	r3, #15
3401698c:	d044      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
3401698e:	687b      	ldr	r3, [r7, #4]
34016990:	691b      	ldr	r3, [r3, #16]
34016992:	2b10      	cmp	r3, #16
34016994:	d040      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
34016996:	687b      	ldr	r3, [r7, #4]
34016998:	691b      	ldr	r3, [r3, #16]
3401699a:	2b11      	cmp	r3, #17
3401699c:	d03c      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
3401699e:	687b      	ldr	r3, [r7, #4]
340169a0:	691b      	ldr	r3, [r3, #16]
340169a2:	2b12      	cmp	r3, #18
340169a4:	d038      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169a6:	687b      	ldr	r3, [r7, #4]
340169a8:	691b      	ldr	r3, [r3, #16]
340169aa:	2b13      	cmp	r3, #19
340169ac:	d034      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169ae:	687b      	ldr	r3, [r7, #4]
340169b0:	691b      	ldr	r3, [r3, #16]
340169b2:	2b14      	cmp	r3, #20
340169b4:	d030      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169b6:	687b      	ldr	r3, [r7, #4]
340169b8:	691b      	ldr	r3, [r3, #16]
340169ba:	2b15      	cmp	r3, #21
340169bc:	d02c      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169be:	687b      	ldr	r3, [r7, #4]
340169c0:	691b      	ldr	r3, [r3, #16]
340169c2:	2b16      	cmp	r3, #22
340169c4:	d028      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169c6:	687b      	ldr	r3, [r7, #4]
340169c8:	691b      	ldr	r3, [r3, #16]
340169ca:	2b17      	cmp	r3, #23
340169cc:	d024      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169ce:	687b      	ldr	r3, [r7, #4]
340169d0:	691b      	ldr	r3, [r3, #16]
340169d2:	2b18      	cmp	r3, #24
340169d4:	d020      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169d6:	687b      	ldr	r3, [r7, #4]
340169d8:	691b      	ldr	r3, [r3, #16]
340169da:	2b19      	cmp	r3, #25
340169dc:	d01c      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169de:	687b      	ldr	r3, [r7, #4]
340169e0:	691b      	ldr	r3, [r3, #16]
340169e2:	2b1a      	cmp	r3, #26
340169e4:	d018      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169e6:	687b      	ldr	r3, [r7, #4]
340169e8:	691b      	ldr	r3, [r3, #16]
340169ea:	2b1b      	cmp	r3, #27
340169ec:	d014      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169ee:	687b      	ldr	r3, [r7, #4]
340169f0:	691b      	ldr	r3, [r3, #16]
340169f2:	2b1c      	cmp	r3, #28
340169f4:	d010      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169f6:	687b      	ldr	r3, [r7, #4]
340169f8:	691b      	ldr	r3, [r3, #16]
340169fa:	2b1d      	cmp	r3, #29
340169fc:	d00c      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
340169fe:	687b      	ldr	r3, [r7, #4]
34016a00:	691b      	ldr	r3, [r3, #16]
34016a02:	2b1e      	cmp	r3, #30
34016a04:	d008      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
34016a06:	687b      	ldr	r3, [r7, #4]
34016a08:	691b      	ldr	r3, [r3, #16]
34016a0a:	2b1f      	cmp	r3, #31
34016a0c:	d004      	beq.n	34016a18 <HAL_XSPI_Init+0x188>
34016a0e:	f240 1163 	movw	r1, #355	@ 0x163
34016a12:	4836      	ldr	r0, [pc, #216]	@ (34016aec <HAL_XSPI_Init+0x25c>)
34016a14:	f7eb f946 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
34016a18:	687b      	ldr	r3, [r7, #4]
34016a1a:	695b      	ldr	r3, [r3, #20]
34016a1c:	2b00      	cmp	r3, #0
34016a1e:	d003      	beq.n	34016a28 <HAL_XSPI_Init+0x198>
34016a20:	687b      	ldr	r3, [r7, #4]
34016a22:	695b      	ldr	r3, [r3, #20]
34016a24:	2b40      	cmp	r3, #64	@ 0x40
34016a26:	d904      	bls.n	34016a32 <HAL_XSPI_Init+0x1a2>
34016a28:	f44f 71b2 	mov.w	r1, #356	@ 0x164
34016a2c:	482f      	ldr	r0, [pc, #188]	@ (34016aec <HAL_XSPI_Init+0x25c>)
34016a2e:	f7eb f939 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
34016a32:	687b      	ldr	r3, [r7, #4]
34016a34:	699b      	ldr	r3, [r3, #24]
34016a36:	2b00      	cmp	r3, #0
34016a38:	d008      	beq.n	34016a4c <HAL_XSPI_Init+0x1bc>
34016a3a:	687b      	ldr	r3, [r7, #4]
34016a3c:	699b      	ldr	r3, [r3, #24]
34016a3e:	2b02      	cmp	r3, #2
34016a40:	d004      	beq.n	34016a4c <HAL_XSPI_Init+0x1bc>
34016a42:	f240 1165 	movw	r1, #357	@ 0x165
34016a46:	4829      	ldr	r0, [pc, #164]	@ (34016aec <HAL_XSPI_Init+0x25c>)
34016a48:	f7eb f92c 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
34016a4c:	687b      	ldr	r3, [r7, #4]
34016a4e:	69db      	ldr	r3, [r3, #28]
34016a50:	2b00      	cmp	r3, #0
34016a52:	d008      	beq.n	34016a66 <HAL_XSPI_Init+0x1d6>
34016a54:	687b      	ldr	r3, [r7, #4]
34016a56:	69db      	ldr	r3, [r3, #28]
34016a58:	2b01      	cmp	r3, #1
34016a5a:	d004      	beq.n	34016a66 <HAL_XSPI_Init+0x1d6>
34016a5c:	f44f 71b3 	mov.w	r1, #358	@ 0x166
34016a60:	4822      	ldr	r0, [pc, #136]	@ (34016aec <HAL_XSPI_Init+0x25c>)
34016a62:	f7eb f91f 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
34016a66:	687b      	ldr	r3, [r7, #4]
34016a68:	6a1b      	ldr	r3, [r3, #32]
34016a6a:	2b00      	cmp	r3, #0
34016a6c:	d018      	beq.n	34016aa0 <HAL_XSPI_Init+0x210>
34016a6e:	687b      	ldr	r3, [r7, #4]
34016a70:	6a1b      	ldr	r3, [r3, #32]
34016a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34016a76:	d013      	beq.n	34016aa0 <HAL_XSPI_Init+0x210>
34016a78:	687b      	ldr	r3, [r7, #4]
34016a7a:	6a1b      	ldr	r3, [r3, #32]
34016a7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34016a80:	d00e      	beq.n	34016aa0 <HAL_XSPI_Init+0x210>
34016a82:	687b      	ldr	r3, [r7, #4]
34016a84:	6a1b      	ldr	r3, [r3, #32]
34016a86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34016a8a:	d009      	beq.n	34016aa0 <HAL_XSPI_Init+0x210>
34016a8c:	687b      	ldr	r3, [r7, #4]
34016a8e:	6a1b      	ldr	r3, [r3, #32]
34016a90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34016a94:	d004      	beq.n	34016aa0 <HAL_XSPI_Init+0x210>
34016a96:	f240 1167 	movw	r1, #359	@ 0x167
34016a9a:	4814      	ldr	r0, [pc, #80]	@ (34016aec <HAL_XSPI_Init+0x25c>)
34016a9c:	f7eb f902 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
34016aa0:	687b      	ldr	r3, [r7, #4]
34016aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016aa4:	2bff      	cmp	r3, #255	@ 0xff
34016aa6:	d904      	bls.n	34016ab2 <HAL_XSPI_Init+0x222>
34016aa8:	f44f 71b4 	mov.w	r1, #360	@ 0x168
34016aac:	480f      	ldr	r0, [pc, #60]	@ (34016aec <HAL_XSPI_Init+0x25c>)
34016aae:	f7eb f8f9 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
34016ab2:	687b      	ldr	r3, [r7, #4]
34016ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016ab6:	2b00      	cmp	r3, #0
34016ab8:	d009      	beq.n	34016ace <HAL_XSPI_Init+0x23e>
34016aba:	687b      	ldr	r3, [r7, #4]
34016abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34016ac2:	d004      	beq.n	34016ace <HAL_XSPI_Init+0x23e>
34016ac4:	f240 1169 	movw	r1, #361	@ 0x169
34016ac8:	4808      	ldr	r0, [pc, #32]	@ (34016aec <HAL_XSPI_Init+0x25c>)
34016aca:	f7eb f8eb 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
34016ace:	687b      	ldr	r3, [r7, #4]
34016ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016ad2:	2b00      	cmp	r3, #0
34016ad4:	d00c      	beq.n	34016af0 <HAL_XSPI_Init+0x260>
34016ad6:	687b      	ldr	r3, [r7, #4]
34016ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016ada:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34016ade:	d007      	beq.n	34016af0 <HAL_XSPI_Init+0x260>
34016ae0:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
34016ae4:	4801      	ldr	r0, [pc, #4]	@ (34016aec <HAL_XSPI_Init+0x25c>)
34016ae6:	f7eb f8dd 	bl	34001ca4 <assert_failed>
34016aea:	e001      	b.n	34016af0 <HAL_XSPI_Init+0x260>
34016aec:	3401eb44 	.word	0x3401eb44
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
34016af0:	687b      	ldr	r3, [r7, #4]
34016af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016af4:	2b00      	cmp	r3, #0
34016af6:	f000 8081 	beq.w	34016bfc <HAL_XSPI_Init+0x36c>
34016afa:	687b      	ldr	r3, [r7, #4]
34016afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016afe:	2b01      	cmp	r3, #1
34016b00:	d07c      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b02:	687b      	ldr	r3, [r7, #4]
34016b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b06:	2b02      	cmp	r3, #2
34016b08:	d078      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b0a:	687b      	ldr	r3, [r7, #4]
34016b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b0e:	2b03      	cmp	r3, #3
34016b10:	d074      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b12:	687b      	ldr	r3, [r7, #4]
34016b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b16:	2b04      	cmp	r3, #4
34016b18:	d070      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b1a:	687b      	ldr	r3, [r7, #4]
34016b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b1e:	2b05      	cmp	r3, #5
34016b20:	d06c      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b22:	687b      	ldr	r3, [r7, #4]
34016b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b26:	2b06      	cmp	r3, #6
34016b28:	d068      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b2a:	687b      	ldr	r3, [r7, #4]
34016b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b2e:	2b07      	cmp	r3, #7
34016b30:	d064      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b32:	687b      	ldr	r3, [r7, #4]
34016b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b36:	2b08      	cmp	r3, #8
34016b38:	d060      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b3a:	687b      	ldr	r3, [r7, #4]
34016b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b3e:	2b09      	cmp	r3, #9
34016b40:	d05c      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b42:	687b      	ldr	r3, [r7, #4]
34016b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b46:	2b0a      	cmp	r3, #10
34016b48:	d058      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b4a:	687b      	ldr	r3, [r7, #4]
34016b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b4e:	2b0b      	cmp	r3, #11
34016b50:	d054      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b52:	687b      	ldr	r3, [r7, #4]
34016b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b56:	2b0c      	cmp	r3, #12
34016b58:	d050      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b5a:	687b      	ldr	r3, [r7, #4]
34016b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b5e:	2b0d      	cmp	r3, #13
34016b60:	d04c      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b62:	687b      	ldr	r3, [r7, #4]
34016b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b66:	2b0e      	cmp	r3, #14
34016b68:	d048      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b6a:	687b      	ldr	r3, [r7, #4]
34016b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b6e:	2b0f      	cmp	r3, #15
34016b70:	d044      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b72:	687b      	ldr	r3, [r7, #4]
34016b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b76:	2b10      	cmp	r3, #16
34016b78:	d040      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b7a:	687b      	ldr	r3, [r7, #4]
34016b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b7e:	2b11      	cmp	r3, #17
34016b80:	d03c      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b82:	687b      	ldr	r3, [r7, #4]
34016b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b86:	2b12      	cmp	r3, #18
34016b88:	d038      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b8a:	687b      	ldr	r3, [r7, #4]
34016b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b8e:	2b13      	cmp	r3, #19
34016b90:	d034      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b92:	687b      	ldr	r3, [r7, #4]
34016b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b96:	2b14      	cmp	r3, #20
34016b98:	d030      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016b9a:	687b      	ldr	r3, [r7, #4]
34016b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b9e:	2b15      	cmp	r3, #21
34016ba0:	d02c      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016ba2:	687b      	ldr	r3, [r7, #4]
34016ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016ba6:	2b16      	cmp	r3, #22
34016ba8:	d028      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016baa:	687b      	ldr	r3, [r7, #4]
34016bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bae:	2b17      	cmp	r3, #23
34016bb0:	d024      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016bb2:	687b      	ldr	r3, [r7, #4]
34016bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bb6:	2b18      	cmp	r3, #24
34016bb8:	d020      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016bba:	687b      	ldr	r3, [r7, #4]
34016bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bbe:	2b19      	cmp	r3, #25
34016bc0:	d01c      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016bc2:	687b      	ldr	r3, [r7, #4]
34016bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bc6:	2b1a      	cmp	r3, #26
34016bc8:	d018      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016bca:	687b      	ldr	r3, [r7, #4]
34016bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bce:	2b1b      	cmp	r3, #27
34016bd0:	d014      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016bd2:	687b      	ldr	r3, [r7, #4]
34016bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bd6:	2b1c      	cmp	r3, #28
34016bd8:	d010      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016bda:	687b      	ldr	r3, [r7, #4]
34016bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bde:	2b1d      	cmp	r3, #29
34016be0:	d00c      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016be2:	687b      	ldr	r3, [r7, #4]
34016be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016be6:	2b1e      	cmp	r3, #30
34016be8:	d008      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016bea:	687b      	ldr	r3, [r7, #4]
34016bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bee:	2b1f      	cmp	r3, #31
34016bf0:	d004      	beq.n	34016bfc <HAL_XSPI_Init+0x36c>
34016bf2:	f240 116b 	movw	r1, #363	@ 0x16b
34016bf6:	4895      	ldr	r0, [pc, #596]	@ (34016e4c <HAL_XSPI_Init+0x5bc>)
34016bf8:	f7eb f854 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
34016bfc:	687b      	ldr	r3, [r7, #4]
34016bfe:	685b      	ldr	r3, [r3, #4]
34016c00:	2b00      	cmp	r3, #0
34016c02:	d003      	beq.n	34016c0c <HAL_XSPI_Init+0x37c>
34016c04:	687b      	ldr	r3, [r7, #4]
34016c06:	685b      	ldr	r3, [r3, #4]
34016c08:	2b40      	cmp	r3, #64	@ 0x40
34016c0a:	d904      	bls.n	34016c16 <HAL_XSPI_Init+0x386>
34016c0c:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
34016c10:	488e      	ldr	r0, [pc, #568]	@ (34016e4c <HAL_XSPI_Init+0x5bc>)
34016c12:	f7eb f847 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
34016c16:	687b      	ldr	r3, [r7, #4]
34016c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34016c1a:	2bff      	cmp	r3, #255	@ 0xff
34016c1c:	d904      	bls.n	34016c28 <HAL_XSPI_Init+0x398>
34016c1e:	f240 116d 	movw	r1, #365	@ 0x16d
34016c22:	488a      	ldr	r0, [pc, #552]	@ (34016e4c <HAL_XSPI_Init+0x5bc>)
34016c24:	f7eb f83e 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
34016c28:	687b      	ldr	r3, [r7, #4]
34016c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016c2c:	2b00      	cmp	r3, #0
34016c2e:	d009      	beq.n	34016c44 <HAL_XSPI_Init+0x3b4>
34016c30:	687b      	ldr	r3, [r7, #4]
34016c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34016c38:	d004      	beq.n	34016c44 <HAL_XSPI_Init+0x3b4>
34016c3a:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
34016c3e:	4883      	ldr	r0, [pc, #524]	@ (34016e4c <HAL_XSPI_Init+0x5bc>)
34016c40:	f7eb f830 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
34016c44:	687b      	ldr	r3, [r7, #4]
34016c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016c48:	2b00      	cmp	r3, #0
34016c4a:	d009      	beq.n	34016c60 <HAL_XSPI_Init+0x3d0>
34016c4c:	687b      	ldr	r3, [r7, #4]
34016c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016c50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016c54:	d004      	beq.n	34016c60 <HAL_XSPI_Init+0x3d0>
34016c56:	f240 116f 	movw	r1, #367	@ 0x16f
34016c5a:	487c      	ldr	r0, [pc, #496]	@ (34016e4c <HAL_XSPI_Init+0x5bc>)
34016c5c:	f7eb f822 	bl	34001ca4 <assert_failed>
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
34016c60:	687b      	ldr	r3, [r7, #4]
34016c62:	2200      	movs	r2, #0
34016c64:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
34016c66:	687b      	ldr	r3, [r7, #4]
34016c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016c6a:	2b00      	cmp	r3, #0
34016c6c:	f040 80e8 	bne.w	34016e40 <HAL_XSPI_Init+0x5b0>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
34016c70:	6878      	ldr	r0, [r7, #4]
34016c72:	f000 f8fb 	bl	34016e6c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34016c76:	f241 3188 	movw	r1, #5000	@ 0x1388
34016c7a:	6878      	ldr	r0, [r7, #4]
34016c7c:	f000 fdc4 	bl	34017808 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
34016c80:	687b      	ldr	r3, [r7, #4]
34016c82:	681b      	ldr	r3, [r3, #0]
34016c84:	689a      	ldr	r2, [r3, #8]
34016c86:	4b72      	ldr	r3, [pc, #456]	@ (34016e50 <HAL_XSPI_Init+0x5c0>)
34016c88:	4013      	ands	r3, r2
34016c8a:	687a      	ldr	r2, [r7, #4]
34016c8c:	68d1      	ldr	r1, [r2, #12]
34016c8e:	687a      	ldr	r2, [r7, #4]
34016c90:	6912      	ldr	r2, [r2, #16]
34016c92:	0412      	lsls	r2, r2, #16
34016c94:	4311      	orrs	r1, r2
34016c96:	687a      	ldr	r2, [r7, #4]
34016c98:	6952      	ldr	r2, [r2, #20]
34016c9a:	3a01      	subs	r2, #1
34016c9c:	0212      	lsls	r2, r2, #8
34016c9e:	4311      	orrs	r1, r2
34016ca0:	687a      	ldr	r2, [r7, #4]
34016ca2:	69d2      	ldr	r2, [r2, #28]
34016ca4:	4311      	orrs	r1, r2
34016ca6:	687a      	ldr	r2, [r7, #4]
34016ca8:	6812      	ldr	r2, [r2, #0]
34016caa:	430b      	orrs	r3, r1
34016cac:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
34016cae:	687b      	ldr	r3, [r7, #4]
34016cb0:	681b      	ldr	r3, [r3, #0]
34016cb2:	68db      	ldr	r3, [r3, #12]
34016cb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
34016cb8:	687b      	ldr	r3, [r7, #4]
34016cba:	6a1a      	ldr	r2, [r3, #32]
34016cbc:	687b      	ldr	r3, [r7, #4]
34016cbe:	681b      	ldr	r3, [r3, #0]
34016cc0:	430a      	orrs	r2, r1
34016cc2:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
34016cc4:	687b      	ldr	r3, [r7, #4]
34016cc6:	681b      	ldr	r3, [r3, #0]
34016cc8:	691b      	ldr	r3, [r3, #16]
34016cca:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
34016cce:	687b      	ldr	r3, [r7, #4]
34016cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016cd2:	041a      	lsls	r2, r3, #16
34016cd4:	687b      	ldr	r3, [r7, #4]
34016cd6:	681b      	ldr	r3, [r3, #0]
34016cd8:	430a      	orrs	r2, r1
34016cda:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
34016cdc:	687b      	ldr	r3, [r7, #4]
34016cde:	681b      	ldr	r3, [r3, #0]
34016ce0:	691b      	ldr	r3, [r3, #16]
34016ce2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34016ce6:	687b      	ldr	r3, [r7, #4]
34016ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
34016cea:	687b      	ldr	r3, [r7, #4]
34016cec:	681b      	ldr	r3, [r3, #0]
34016cee:	430a      	orrs	r2, r1
34016cf0:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
34016cf2:	687b      	ldr	r3, [r7, #4]
34016cf4:	681b      	ldr	r3, [r3, #0]
34016cf6:	687a      	ldr	r2, [r7, #4]
34016cf8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34016cfa:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
34016cfc:	687b      	ldr	r3, [r7, #4]
34016cfe:	681b      	ldr	r3, [r3, #0]
34016d00:	681b      	ldr	r3, [r3, #0]
34016d02:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
34016d06:	687b      	ldr	r3, [r7, #4]
34016d08:	685b      	ldr	r3, [r3, #4]
34016d0a:	3b01      	subs	r3, #1
34016d0c:	021a      	lsls	r2, r3, #8
34016d0e:	687b      	ldr	r3, [r7, #4]
34016d10:	681b      	ldr	r3, [r3, #0]
34016d12:	430a      	orrs	r2, r1
34016d14:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34016d16:	687b      	ldr	r3, [r7, #4]
34016d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34016d1a:	9300      	str	r3, [sp, #0]
34016d1c:	68bb      	ldr	r3, [r7, #8]
34016d1e:	2200      	movs	r2, #0
34016d20:	2120      	movs	r1, #32
34016d22:	6878      	ldr	r0, [r7, #4]
34016d24:	f000 fd7f 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
34016d28:	4603      	mov	r3, r0
34016d2a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
34016d2c:	7bfb      	ldrb	r3, [r7, #15]
34016d2e:	2b00      	cmp	r3, #0
34016d30:	f040 8086 	bne.w	34016e40 <HAL_XSPI_Init+0x5b0>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
34016d34:	687b      	ldr	r3, [r7, #4]
34016d36:	681b      	ldr	r3, [r3, #0]
34016d38:	68db      	ldr	r3, [r3, #12]
34016d3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34016d3e:	687b      	ldr	r3, [r7, #4]
34016d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34016d42:	687b      	ldr	r3, [r7, #4]
34016d44:	681b      	ldr	r3, [r3, #0]
34016d46:	430a      	orrs	r2, r1
34016d48:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
34016d4a:	687b      	ldr	r3, [r7, #4]
34016d4c:	681b      	ldr	r3, [r3, #0]
34016d4e:	4a41      	ldr	r2, [pc, #260]	@ (34016e54 <HAL_XSPI_Init+0x5c4>)
34016d50:	4293      	cmp	r3, r2
34016d52:	d018      	beq.n	34016d86 <HAL_XSPI_Init+0x4f6>
34016d54:	687b      	ldr	r3, [r7, #4]
34016d56:	681b      	ldr	r3, [r3, #0]
34016d58:	4a3f      	ldr	r2, [pc, #252]	@ (34016e58 <HAL_XSPI_Init+0x5c8>)
34016d5a:	4293      	cmp	r3, r2
34016d5c:	d013      	beq.n	34016d86 <HAL_XSPI_Init+0x4f6>
34016d5e:	687b      	ldr	r3, [r7, #4]
34016d60:	681b      	ldr	r3, [r3, #0]
34016d62:	4a3e      	ldr	r2, [pc, #248]	@ (34016e5c <HAL_XSPI_Init+0x5cc>)
34016d64:	4293      	cmp	r3, r2
34016d66:	d00e      	beq.n	34016d86 <HAL_XSPI_Init+0x4f6>
34016d68:	687b      	ldr	r3, [r7, #4]
34016d6a:	681b      	ldr	r3, [r3, #0]
34016d6c:	4a3c      	ldr	r2, [pc, #240]	@ (34016e60 <HAL_XSPI_Init+0x5d0>)
34016d6e:	4293      	cmp	r3, r2
34016d70:	d009      	beq.n	34016d86 <HAL_XSPI_Init+0x4f6>
34016d72:	687b      	ldr	r3, [r7, #4]
34016d74:	681b      	ldr	r3, [r3, #0]
34016d76:	4a3b      	ldr	r2, [pc, #236]	@ (34016e64 <HAL_XSPI_Init+0x5d4>)
34016d78:	4293      	cmp	r3, r2
34016d7a:	d004      	beq.n	34016d86 <HAL_XSPI_Init+0x4f6>
34016d7c:	687b      	ldr	r3, [r7, #4]
34016d7e:	681b      	ldr	r3, [r3, #0]
34016d80:	4a39      	ldr	r2, [pc, #228]	@ (34016e68 <HAL_XSPI_Init+0x5d8>)
34016d82:	4293      	cmp	r3, r2
34016d84:	d10f      	bne.n	34016da6 <HAL_XSPI_Init+0x516>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34016d86:	687b      	ldr	r3, [r7, #4]
34016d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34016d8a:	9300      	str	r3, [sp, #0]
34016d8c:	68bb      	ldr	r3, [r7, #8]
34016d8e:	2200      	movs	r2, #0
34016d90:	2120      	movs	r1, #32
34016d92:	6878      	ldr	r0, [r7, #4]
34016d94:	f000 fd47 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
34016d98:	4603      	mov	r3, r0
34016d9a:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
34016d9c:	7bfb      	ldrb	r3, [r7, #15]
34016d9e:	2b00      	cmp	r3, #0
34016da0:	d001      	beq.n	34016da6 <HAL_XSPI_Init+0x516>
          {
            return status;
34016da2:	7bfb      	ldrb	r3, [r7, #15]
34016da4:	e04d      	b.n	34016e42 <HAL_XSPI_Init+0x5b2>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
34016da6:	687b      	ldr	r3, [r7, #4]
34016da8:	681b      	ldr	r3, [r3, #0]
34016daa:	681b      	ldr	r3, [r3, #0]
34016dac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34016db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34016db4:	687a      	ldr	r2, [r7, #4]
34016db6:	6891      	ldr	r1, [r2, #8]
34016db8:	687a      	ldr	r2, [r7, #4]
34016dba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
34016dbc:	4311      	orrs	r1, r2
34016dbe:	687a      	ldr	r2, [r7, #4]
34016dc0:	6812      	ldr	r2, [r2, #0]
34016dc2:	430b      	orrs	r3, r1
34016dc4:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
34016dc6:	687b      	ldr	r3, [r7, #4]
34016dc8:	681b      	ldr	r3, [r3, #0]
34016dca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34016dce:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
34016dd2:	687b      	ldr	r3, [r7, #4]
34016dd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34016dd6:	687b      	ldr	r3, [r7, #4]
34016dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016dda:	431a      	orrs	r2, r3
34016ddc:	687b      	ldr	r3, [r7, #4]
34016dde:	681b      	ldr	r3, [r3, #0]
34016de0:	430a      	orrs	r2, r1
34016de2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
34016de6:	687b      	ldr	r3, [r7, #4]
34016de8:	681b      	ldr	r3, [r3, #0]
34016dea:	681a      	ldr	r2, [r3, #0]
34016dec:	687b      	ldr	r3, [r7, #4]
34016dee:	681b      	ldr	r3, [r3, #0]
34016df0:	f042 0201 	orr.w	r2, r2, #1
34016df4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
34016df6:	687b      	ldr	r3, [r7, #4]
34016df8:	699b      	ldr	r3, [r3, #24]
34016dfa:	2b02      	cmp	r3, #2
34016dfc:	d107      	bne.n	34016e0e <HAL_XSPI_Init+0x57e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
34016dfe:	687b      	ldr	r3, [r7, #4]
34016e00:	681b      	ldr	r3, [r3, #0]
34016e02:	689a      	ldr	r2, [r3, #8]
34016e04:	687b      	ldr	r3, [r7, #4]
34016e06:	681b      	ldr	r3, [r3, #0]
34016e08:	f042 0202 	orr.w	r2, r2, #2
34016e0c:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
34016e0e:	687b      	ldr	r3, [r7, #4]
34016e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016e12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016e16:	d107      	bne.n	34016e28 <HAL_XSPI_Init+0x598>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
34016e18:	687b      	ldr	r3, [r7, #4]
34016e1a:	681b      	ldr	r3, [r3, #0]
34016e1c:	689a      	ldr	r2, [r3, #8]
34016e1e:	687b      	ldr	r3, [r7, #4]
34016e20:	681b      	ldr	r3, [r3, #0]
34016e22:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
34016e26:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34016e28:	687b      	ldr	r3, [r7, #4]
34016e2a:	68db      	ldr	r3, [r3, #12]
34016e2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016e30:	d103      	bne.n	34016e3a <HAL_XSPI_Init+0x5aa>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
34016e32:	687b      	ldr	r3, [r7, #4]
34016e34:	2201      	movs	r2, #1
34016e36:	659a      	str	r2, [r3, #88]	@ 0x58
34016e38:	e002      	b.n	34016e40 <HAL_XSPI_Init+0x5b0>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
34016e3a:	687b      	ldr	r3, [r7, #4]
34016e3c:	2202      	movs	r2, #2
34016e3e:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
34016e40:	7bfb      	ldrb	r3, [r7, #15]
}
34016e42:	4618      	mov	r0, r3
34016e44:	3710      	adds	r7, #16
34016e46:	46bd      	mov	sp, r7
34016e48:	bd80      	pop	{r7, pc}
34016e4a:	bf00      	nop
34016e4c:	3401eb44 	.word	0x3401eb44
34016e50:	f8e0c0fc 	.word	0xf8e0c0fc
34016e54:	58025000 	.word	0x58025000
34016e58:	48025000 	.word	0x48025000
34016e5c:	5802a000 	.word	0x5802a000
34016e60:	4802a000 	.word	0x4802a000
34016e64:	5802d000 	.word	0x5802d000
34016e68:	4802d000 	.word	0x4802d000

34016e6c <HAL_XSPI_MspInit>:
  * @brief  Initialize the XSPI MSP.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_MspInit(XSPI_HandleTypeDef *hxspi)
{
34016e6c:	b480      	push	{r7}
34016e6e:	b083      	sub	sp, #12
34016e70:	af00      	add	r7, sp, #0
34016e72:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_MspInit can be implemented in the user file
   */
}
34016e74:	bf00      	nop
34016e76:	370c      	adds	r7, #12
34016e78:	46bd      	mov	sp, r7
34016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
34016e7e:	4770      	bx	lr

34016e80 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd, uint32_t Timeout)
{
34016e80:	b580      	push	{r7, lr}
34016e82:	b08a      	sub	sp, #40	@ 0x28
34016e84:	af02      	add	r7, sp, #8
34016e86:	60f8      	str	r0, [r7, #12]
34016e88:	60b9      	str	r1, [r7, #8]
34016e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
34016e8c:	f7ec ff2c 	bl	34003ce8 <HAL_GetTick>
34016e90:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
34016e92:	68bb      	ldr	r3, [r7, #8]
34016e94:	681b      	ldr	r3, [r3, #0]
34016e96:	2b00      	cmp	r3, #0
34016e98:	d010      	beq.n	34016ebc <HAL_XSPI_Command+0x3c>
34016e9a:	68bb      	ldr	r3, [r7, #8]
34016e9c:	681b      	ldr	r3, [r3, #0]
34016e9e:	2b01      	cmp	r3, #1
34016ea0:	d00c      	beq.n	34016ebc <HAL_XSPI_Command+0x3c>
34016ea2:	68bb      	ldr	r3, [r7, #8]
34016ea4:	681b      	ldr	r3, [r3, #0]
34016ea6:	2b02      	cmp	r3, #2
34016ea8:	d008      	beq.n	34016ebc <HAL_XSPI_Command+0x3c>
34016eaa:	68bb      	ldr	r3, [r7, #8]
34016eac:	681b      	ldr	r3, [r3, #0]
34016eae:	2b03      	cmp	r3, #3
34016eb0:	d004      	beq.n	34016ebc <HAL_XSPI_Command+0x3c>
34016eb2:	f240 313e 	movw	r1, #830	@ 0x33e
34016eb6:	4887      	ldr	r0, [pc, #540]	@ (340170d4 <HAL_XSPI_Command+0x254>)
34016eb8:	f7ea fef4 	bl	34001ca4 <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
34016ebc:	68fb      	ldr	r3, [r7, #12]
34016ebe:	689b      	ldr	r3, [r3, #8]
34016ec0:	2b00      	cmp	r3, #0
34016ec2:	d120      	bne.n	34016f06 <HAL_XSPI_Command+0x86>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
34016ec4:	68bb      	ldr	r3, [r7, #8]
34016ec6:	685b      	ldr	r3, [r3, #4]
34016ec8:	2b00      	cmp	r3, #0
34016eca:	d01c      	beq.n	34016f06 <HAL_XSPI_Command+0x86>
34016ecc:	68bb      	ldr	r3, [r7, #8]
34016ece:	685b      	ldr	r3, [r3, #4]
34016ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34016ed4:	d017      	beq.n	34016f06 <HAL_XSPI_Command+0x86>
34016ed6:	68bb      	ldr	r3, [r7, #8]
34016ed8:	685b      	ldr	r3, [r3, #4]
34016eda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
34016ede:	d012      	beq.n	34016f06 <HAL_XSPI_Command+0x86>
34016ee0:	68bb      	ldr	r3, [r7, #8]
34016ee2:	685b      	ldr	r3, [r3, #4]
34016ee4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
34016ee8:	d00d      	beq.n	34016f06 <HAL_XSPI_Command+0x86>
34016eea:	68bb      	ldr	r3, [r7, #8]
34016eec:	685b      	ldr	r3, [r3, #4]
34016eee:	2b00      	cmp	r3, #0
34016ef0:	d009      	beq.n	34016f06 <HAL_XSPI_Command+0x86>
34016ef2:	68bb      	ldr	r3, [r7, #8]
34016ef4:	685b      	ldr	r3, [r3, #4]
34016ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
34016efa:	d004      	beq.n	34016f06 <HAL_XSPI_Command+0x86>
34016efc:	f240 3141 	movw	r1, #833	@ 0x341
34016f00:	4874      	ldr	r0, [pc, #464]	@ (340170d4 <HAL_XSPI_Command+0x254>)
34016f02:	f7ea fecf 	bl	34001ca4 <assert_failed>
  }

  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
34016f06:	68bb      	ldr	r3, [r7, #8]
34016f08:	68db      	ldr	r3, [r3, #12]
34016f0a:	2b00      	cmp	r3, #0
34016f0c:	d014      	beq.n	34016f38 <HAL_XSPI_Command+0xb8>
34016f0e:	68bb      	ldr	r3, [r7, #8]
34016f10:	68db      	ldr	r3, [r3, #12]
34016f12:	2b01      	cmp	r3, #1
34016f14:	d010      	beq.n	34016f38 <HAL_XSPI_Command+0xb8>
34016f16:	68bb      	ldr	r3, [r7, #8]
34016f18:	68db      	ldr	r3, [r3, #12]
34016f1a:	2b02      	cmp	r3, #2
34016f1c:	d00c      	beq.n	34016f38 <HAL_XSPI_Command+0xb8>
34016f1e:	68bb      	ldr	r3, [r7, #8]
34016f20:	68db      	ldr	r3, [r3, #12]
34016f22:	2b03      	cmp	r3, #3
34016f24:	d008      	beq.n	34016f38 <HAL_XSPI_Command+0xb8>
34016f26:	68bb      	ldr	r3, [r7, #8]
34016f28:	68db      	ldr	r3, [r3, #12]
34016f2a:	2b04      	cmp	r3, #4
34016f2c:	d004      	beq.n	34016f38 <HAL_XSPI_Command+0xb8>
34016f2e:	f44f 7151 	mov.w	r1, #836	@ 0x344
34016f32:	4868      	ldr	r0, [pc, #416]	@ (340170d4 <HAL_XSPI_Command+0x254>)
34016f34:	f7ea feb6 	bl	34001ca4 <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
34016f38:	68bb      	ldr	r3, [r7, #8]
34016f3a:	68db      	ldr	r3, [r3, #12]
34016f3c:	2b00      	cmp	r3, #0
34016f3e:	d021      	beq.n	34016f84 <HAL_XSPI_Command+0x104>
  {
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
34016f40:	68bb      	ldr	r3, [r7, #8]
34016f42:	691b      	ldr	r3, [r3, #16]
34016f44:	2b00      	cmp	r3, #0
34016f46:	d010      	beq.n	34016f6a <HAL_XSPI_Command+0xea>
34016f48:	68bb      	ldr	r3, [r7, #8]
34016f4a:	691b      	ldr	r3, [r3, #16]
34016f4c:	2b10      	cmp	r3, #16
34016f4e:	d00c      	beq.n	34016f6a <HAL_XSPI_Command+0xea>
34016f50:	68bb      	ldr	r3, [r7, #8]
34016f52:	691b      	ldr	r3, [r3, #16]
34016f54:	2b20      	cmp	r3, #32
34016f56:	d008      	beq.n	34016f6a <HAL_XSPI_Command+0xea>
34016f58:	68bb      	ldr	r3, [r7, #8]
34016f5a:	691b      	ldr	r3, [r3, #16]
34016f5c:	2b30      	cmp	r3, #48	@ 0x30
34016f5e:	d004      	beq.n	34016f6a <HAL_XSPI_Command+0xea>
34016f60:	f240 3147 	movw	r1, #839	@ 0x347
34016f64:	485b      	ldr	r0, [pc, #364]	@ (340170d4 <HAL_XSPI_Command+0x254>)
34016f66:	f7ea fe9d 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
34016f6a:	68bb      	ldr	r3, [r7, #8]
34016f6c:	695b      	ldr	r3, [r3, #20]
34016f6e:	2b00      	cmp	r3, #0
34016f70:	d008      	beq.n	34016f84 <HAL_XSPI_Command+0x104>
34016f72:	68bb      	ldr	r3, [r7, #8]
34016f74:	695b      	ldr	r3, [r3, #20]
34016f76:	2b08      	cmp	r3, #8
34016f78:	d004      	beq.n	34016f84 <HAL_XSPI_Command+0x104>
34016f7a:	f44f 7152 	mov.w	r1, #840	@ 0x348
34016f7e:	4855      	ldr	r0, [pc, #340]	@ (340170d4 <HAL_XSPI_Command+0x254>)
34016f80:	f7ea fe90 	bl	34001ca4 <assert_failed>
  }

  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
34016f84:	68bb      	ldr	r3, [r7, #8]
34016f86:	69db      	ldr	r3, [r3, #28]
34016f88:	2b00      	cmp	r3, #0
34016f8a:	d018      	beq.n	34016fbe <HAL_XSPI_Command+0x13e>
34016f8c:	68bb      	ldr	r3, [r7, #8]
34016f8e:	69db      	ldr	r3, [r3, #28]
34016f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34016f94:	d013      	beq.n	34016fbe <HAL_XSPI_Command+0x13e>
34016f96:	68bb      	ldr	r3, [r7, #8]
34016f98:	69db      	ldr	r3, [r3, #28]
34016f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34016f9e:	d00e      	beq.n	34016fbe <HAL_XSPI_Command+0x13e>
34016fa0:	68bb      	ldr	r3, [r7, #8]
34016fa2:	69db      	ldr	r3, [r3, #28]
34016fa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34016fa8:	d009      	beq.n	34016fbe <HAL_XSPI_Command+0x13e>
34016faa:	68bb      	ldr	r3, [r7, #8]
34016fac:	69db      	ldr	r3, [r3, #28]
34016fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34016fb2:	d004      	beq.n	34016fbe <HAL_XSPI_Command+0x13e>
34016fb4:	f240 314b 	movw	r1, #843	@ 0x34b
34016fb8:	4846      	ldr	r0, [pc, #280]	@ (340170d4 <HAL_XSPI_Command+0x254>)
34016fba:	f7ea fe73 	bl	34001ca4 <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34016fbe:	68bb      	ldr	r3, [r7, #8]
34016fc0:	69db      	ldr	r3, [r3, #28]
34016fc2:	2b00      	cmp	r3, #0
34016fc4:	d025      	beq.n	34017012 <HAL_XSPI_Command+0x192>
  {
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
34016fc6:	68bb      	ldr	r3, [r7, #8]
34016fc8:	6a1b      	ldr	r3, [r3, #32]
34016fca:	2b00      	cmp	r3, #0
34016fcc:	d013      	beq.n	34016ff6 <HAL_XSPI_Command+0x176>
34016fce:	68bb      	ldr	r3, [r7, #8]
34016fd0:	6a1b      	ldr	r3, [r3, #32]
34016fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34016fd6:	d00e      	beq.n	34016ff6 <HAL_XSPI_Command+0x176>
34016fd8:	68bb      	ldr	r3, [r7, #8]
34016fda:	6a1b      	ldr	r3, [r3, #32]
34016fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34016fe0:	d009      	beq.n	34016ff6 <HAL_XSPI_Command+0x176>
34016fe2:	68bb      	ldr	r3, [r7, #8]
34016fe4:	6a1b      	ldr	r3, [r3, #32]
34016fe6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34016fea:	d004      	beq.n	34016ff6 <HAL_XSPI_Command+0x176>
34016fec:	f240 314e 	movw	r1, #846	@ 0x34e
34016ff0:	4838      	ldr	r0, [pc, #224]	@ (340170d4 <HAL_XSPI_Command+0x254>)
34016ff2:	f7ea fe57 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
34016ff6:	68bb      	ldr	r3, [r7, #8]
34016ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016ffa:	2b00      	cmp	r3, #0
34016ffc:	d009      	beq.n	34017012 <HAL_XSPI_Command+0x192>
34016ffe:	68bb      	ldr	r3, [r7, #8]
34017000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34017002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34017006:	d004      	beq.n	34017012 <HAL_XSPI_Command+0x192>
34017008:	f240 314f 	movw	r1, #847	@ 0x34f
3401700c:	4831      	ldr	r0, [pc, #196]	@ (340170d4 <HAL_XSPI_Command+0x254>)
3401700e:	f7ea fe49 	bl	34001ca4 <assert_failed>
  }

  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
34017012:	68bb      	ldr	r3, [r7, #8]
34017014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017016:	2b00      	cmp	r3, #0
34017018:	d018      	beq.n	3401704c <HAL_XSPI_Command+0x1cc>
3401701a:	68bb      	ldr	r3, [r7, #8]
3401701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401701e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34017022:	d013      	beq.n	3401704c <HAL_XSPI_Command+0x1cc>
34017024:	68bb      	ldr	r3, [r7, #8]
34017026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3401702c:	d00e      	beq.n	3401704c <HAL_XSPI_Command+0x1cc>
3401702e:	68bb      	ldr	r3, [r7, #8]
34017030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017032:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34017036:	d009      	beq.n	3401704c <HAL_XSPI_Command+0x1cc>
34017038:	68bb      	ldr	r3, [r7, #8]
3401703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401703c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34017040:	d004      	beq.n	3401704c <HAL_XSPI_Command+0x1cc>
34017042:	f240 3152 	movw	r1, #850	@ 0x352
34017046:	4823      	ldr	r0, [pc, #140]	@ (340170d4 <HAL_XSPI_Command+0x254>)
34017048:	f7ea fe2c 	bl	34001ca4 <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3401704c:	68bb      	ldr	r3, [r7, #8]
3401704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017050:	2b00      	cmp	r3, #0
34017052:	d025      	beq.n	340170a0 <HAL_XSPI_Command+0x220>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
34017054:	68bb      	ldr	r3, [r7, #8]
34017056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34017058:	2b00      	cmp	r3, #0
3401705a:	d013      	beq.n	34017084 <HAL_XSPI_Command+0x204>
3401705c:	68bb      	ldr	r3, [r7, #8]
3401705e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34017060:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34017064:	d00e      	beq.n	34017084 <HAL_XSPI_Command+0x204>
34017066:	68bb      	ldr	r3, [r7, #8]
34017068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401706a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3401706e:	d009      	beq.n	34017084 <HAL_XSPI_Command+0x204>
34017070:	68bb      	ldr	r3, [r7, #8]
34017072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34017074:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34017078:	d004      	beq.n	34017084 <HAL_XSPI_Command+0x204>
3401707a:	f240 3155 	movw	r1, #853	@ 0x355
3401707e:	4815      	ldr	r0, [pc, #84]	@ (340170d4 <HAL_XSPI_Command+0x254>)
34017080:	f7ea fe10 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
34017084:	68bb      	ldr	r3, [r7, #8]
34017086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34017088:	2b00      	cmp	r3, #0
3401708a:	d009      	beq.n	340170a0 <HAL_XSPI_Command+0x220>
3401708c:	68bb      	ldr	r3, [r7, #8]
3401708e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34017090:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34017094:	d004      	beq.n	340170a0 <HAL_XSPI_Command+0x220>
34017096:	f240 3156 	movw	r1, #854	@ 0x356
3401709a:	480e      	ldr	r0, [pc, #56]	@ (340170d4 <HAL_XSPI_Command+0x254>)
3401709c:	f7ea fe02 	bl	34001ca4 <assert_failed>
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
340170a0:	68fb      	ldr	r3, [r7, #12]
340170a2:	68db      	ldr	r3, [r3, #12]
340170a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340170a8:	d116      	bne.n	340170d8 <HAL_XSPI_Command+0x258>
340170aa:	68bb      	ldr	r3, [r7, #8]
340170ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170ae:	2b00      	cmp	r3, #0
340170b0:	d009      	beq.n	340170c6 <HAL_XSPI_Command+0x246>
340170b2:	68bb      	ldr	r3, [r7, #8]
340170b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340170ba:	d004      	beq.n	340170c6 <HAL_XSPI_Command+0x246>
340170bc:	68bb      	ldr	r3, [r7, #8]
340170be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170c0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
340170c4:	d101      	bne.n	340170ca <HAL_XSPI_Command+0x24a>
340170c6:	2301      	movs	r3, #1
340170c8:	e000      	b.n	340170cc <HAL_XSPI_Command+0x24c>
340170ca:	2300      	movs	r3, #0
340170cc:	f003 0301 	and.w	r3, r3, #1
340170d0:	b2db      	uxtb	r3, r3
340170d2:	e024      	b.n	3401711e <HAL_XSPI_Command+0x29e>
340170d4:	3401eb44 	.word	0x3401eb44
340170d8:	68bb      	ldr	r3, [r7, #8]
340170da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170dc:	2b00      	cmp	r3, #0
340170de:	d018      	beq.n	34017112 <HAL_XSPI_Command+0x292>
340170e0:	68bb      	ldr	r3, [r7, #8]
340170e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340170e8:	d013      	beq.n	34017112 <HAL_XSPI_Command+0x292>
340170ea:	68bb      	ldr	r3, [r7, #8]
340170ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340170f2:	d00e      	beq.n	34017112 <HAL_XSPI_Command+0x292>
340170f4:	68bb      	ldr	r3, [r7, #8]
340170f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
340170fc:	d009      	beq.n	34017112 <HAL_XSPI_Command+0x292>
340170fe:	68bb      	ldr	r3, [r7, #8]
34017100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017102:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34017106:	d004      	beq.n	34017112 <HAL_XSPI_Command+0x292>
34017108:	68bb      	ldr	r3, [r7, #8]
3401710a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401710c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
34017110:	d101      	bne.n	34017116 <HAL_XSPI_Command+0x296>
34017112:	2301      	movs	r3, #1
34017114:	e000      	b.n	34017118 <HAL_XSPI_Command+0x298>
34017116:	2300      	movs	r3, #0
34017118:	f003 0301 	and.w	r3, r3, #1
3401711c:	b2db      	uxtb	r3, r3
3401711e:	2b00      	cmp	r3, #0
34017120:	d104      	bne.n	3401712c <HAL_XSPI_Command+0x2ac>
34017122:	f240 3159 	movw	r1, #857	@ 0x359
34017126:	485e      	ldr	r0, [pc, #376]	@ (340172a0 <HAL_XSPI_Command+0x420>)
34017128:	f7ea fdbc 	bl	34001ca4 <assert_failed>

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401712c:	68bb      	ldr	r3, [r7, #8]
3401712e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017130:	2b00      	cmp	r3, #0
34017132:	d023      	beq.n	3401717c <HAL_XSPI_Command+0x2fc>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34017134:	68bb      	ldr	r3, [r7, #8]
34017136:	681b      	ldr	r3, [r3, #0]
34017138:	2b00      	cmp	r3, #0
3401713a:	d108      	bne.n	3401714e <HAL_XSPI_Command+0x2ce>
    {
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
3401713c:	68bb      	ldr	r3, [r7, #8]
3401713e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34017140:	2b00      	cmp	r3, #0
34017142:	d104      	bne.n	3401714e <HAL_XSPI_Command+0x2ce>
34017144:	f240 315f 	movw	r1, #863	@ 0x35f
34017148:	4855      	ldr	r0, [pc, #340]	@ (340172a0 <HAL_XSPI_Command+0x420>)
3401714a:	f7ea fdab 	bl	34001ca4 <assert_failed>
    }
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
3401714e:	68bb      	ldr	r3, [r7, #8]
34017150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34017152:	2b00      	cmp	r3, #0
34017154:	d009      	beq.n	3401716a <HAL_XSPI_Command+0x2ea>
34017156:	68bb      	ldr	r3, [r7, #8]
34017158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3401715a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3401715e:	d004      	beq.n	3401716a <HAL_XSPI_Command+0x2ea>
34017160:	f240 3161 	movw	r1, #865	@ 0x361
34017164:	484e      	ldr	r0, [pc, #312]	@ (340172a0 <HAL_XSPI_Command+0x420>)
34017166:	f7ea fd9d 	bl	34001ca4 <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
3401716a:	68bb      	ldr	r3, [r7, #8]
3401716c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401716e:	2b1f      	cmp	r3, #31
34017170:	d904      	bls.n	3401717c <HAL_XSPI_Command+0x2fc>
34017172:	f240 3162 	movw	r1, #866	@ 0x362
34017176:	484a      	ldr	r0, [pc, #296]	@ (340172a0 <HAL_XSPI_Command+0x420>)
34017178:	f7ea fd94 	bl	34001ca4 <assert_failed>
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
3401717c:	68bb      	ldr	r3, [r7, #8]
3401717e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34017180:	2b00      	cmp	r3, #0
34017182:	d009      	beq.n	34017198 <HAL_XSPI_Command+0x318>
34017184:	68bb      	ldr	r3, [r7, #8]
34017186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34017188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401718c:	d004      	beq.n	34017198 <HAL_XSPI_Command+0x318>
3401718e:	f240 3165 	movw	r1, #869	@ 0x365
34017192:	4843      	ldr	r0, [pc, #268]	@ (340172a0 <HAL_XSPI_Command+0x420>)
34017194:	f7ea fd86 	bl	34001ca4 <assert_failed>

  /* Check the state of the driver */
  state = hxspi->State;
34017198:	68fb      	ldr	r3, [r7, #12]
3401719a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3401719c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3401719e:	697b      	ldr	r3, [r7, #20]
340171a0:	2b02      	cmp	r3, #2
340171a2:	d104      	bne.n	340171ae <HAL_XSPI_Command+0x32e>
340171a4:	68fb      	ldr	r3, [r7, #12]
340171a6:	68db      	ldr	r3, [r3, #12]
340171a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340171ac:	d115      	bne.n	340171da <HAL_XSPI_Command+0x35a>
340171ae:	697b      	ldr	r3, [r7, #20]
340171b0:	2b14      	cmp	r3, #20
340171b2:	d107      	bne.n	340171c4 <HAL_XSPI_Command+0x344>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
340171b4:	68bb      	ldr	r3, [r7, #8]
340171b6:	681b      	ldr	r3, [r3, #0]
340171b8:	2b02      	cmp	r3, #2
340171ba:	d00e      	beq.n	340171da <HAL_XSPI_Command+0x35a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
340171bc:	68bb      	ldr	r3, [r7, #8]
340171be:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
340171c0:	2b03      	cmp	r3, #3
340171c2:	d00a      	beq.n	340171da <HAL_XSPI_Command+0x35a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
340171c4:	697b      	ldr	r3, [r7, #20]
340171c6:	2b24      	cmp	r3, #36	@ 0x24
340171c8:	d15e      	bne.n	34017288 <HAL_XSPI_Command+0x408>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
340171ca:	68bb      	ldr	r3, [r7, #8]
340171cc:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
340171ce:	2b01      	cmp	r3, #1
340171d0:	d003      	beq.n	340171da <HAL_XSPI_Command+0x35a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
340171d2:	68bb      	ldr	r3, [r7, #8]
340171d4:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
340171d6:	2b03      	cmp	r3, #3
340171d8:	d156      	bne.n	34017288 <HAL_XSPI_Command+0x408>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
340171da:	687b      	ldr	r3, [r7, #4]
340171dc:	9300      	str	r3, [sp, #0]
340171de:	69bb      	ldr	r3, [r7, #24]
340171e0:	2200      	movs	r2, #0
340171e2:	2120      	movs	r1, #32
340171e4:	68f8      	ldr	r0, [r7, #12]
340171e6:	f000 fb1e 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
340171ea:	4603      	mov	r3, r0
340171ec:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
340171ee:	7ffb      	ldrb	r3, [r7, #31]
340171f0:	2b00      	cmp	r3, #0
340171f2:	d146      	bne.n	34017282 <HAL_XSPI_Command+0x402>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
340171f4:	68fb      	ldr	r3, [r7, #12]
340171f6:	2200      	movs	r2, #0
340171f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
340171fa:	68b9      	ldr	r1, [r7, #8]
340171fc:	68f8      	ldr	r0, [r7, #12]
340171fe:	f000 fb49 	bl	34017894 <XSPI_ConfigCmd>
34017202:	4603      	mov	r3, r0
34017204:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
34017206:	7ffb      	ldrb	r3, [r7, #31]
34017208:	2b00      	cmp	r3, #0
3401720a:	d143      	bne.n	34017294 <HAL_XSPI_Command+0x414>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3401720c:	68bb      	ldr	r3, [r7, #8]
3401720e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017210:	2b00      	cmp	r3, #0
34017212:	d10e      	bne.n	34017232 <HAL_XSPI_Command+0x3b2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
34017214:	687b      	ldr	r3, [r7, #4]
34017216:	9300      	str	r3, [sp, #0]
34017218:	69bb      	ldr	r3, [r7, #24]
3401721a:	2200      	movs	r2, #0
3401721c:	2120      	movs	r1, #32
3401721e:	68f8      	ldr	r0, [r7, #12]
34017220:	f000 fb01 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
34017224:	4603      	mov	r3, r0
34017226:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
34017228:	68fb      	ldr	r3, [r7, #12]
3401722a:	681b      	ldr	r3, [r3, #0]
3401722c:	2202      	movs	r2, #2
3401722e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
34017230:	e030      	b.n	34017294 <HAL_XSPI_Command+0x414>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34017232:	68bb      	ldr	r3, [r7, #8]
34017234:	681b      	ldr	r3, [r3, #0]
34017236:	2b00      	cmp	r3, #0
34017238:	d103      	bne.n	34017242 <HAL_XSPI_Command+0x3c2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3401723a:	68fb      	ldr	r3, [r7, #12]
3401723c:	2204      	movs	r2, #4
3401723e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017240:	e028      	b.n	34017294 <HAL_XSPI_Command+0x414>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
34017242:	68bb      	ldr	r3, [r7, #8]
34017244:	681b      	ldr	r3, [r3, #0]
34017246:	2b01      	cmp	r3, #1
34017248:	d10b      	bne.n	34017262 <HAL_XSPI_Command+0x3e2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3401724a:	68fb      	ldr	r3, [r7, #12]
3401724c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3401724e:	2b24      	cmp	r3, #36	@ 0x24
34017250:	d103      	bne.n	3401725a <HAL_XSPI_Command+0x3da>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
34017252:	68fb      	ldr	r3, [r7, #12]
34017254:	2204      	movs	r2, #4
34017256:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017258:	e01c      	b.n	34017294 <HAL_XSPI_Command+0x414>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3401725a:	68fb      	ldr	r3, [r7, #12]
3401725c:	2214      	movs	r2, #20
3401725e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017260:	e018      	b.n	34017294 <HAL_XSPI_Command+0x414>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
34017262:	68bb      	ldr	r3, [r7, #8]
34017264:	681b      	ldr	r3, [r3, #0]
34017266:	2b02      	cmp	r3, #2
34017268:	d114      	bne.n	34017294 <HAL_XSPI_Command+0x414>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3401726a:	68fb      	ldr	r3, [r7, #12]
3401726c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3401726e:	2b14      	cmp	r3, #20
34017270:	d103      	bne.n	3401727a <HAL_XSPI_Command+0x3fa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
34017272:	68fb      	ldr	r3, [r7, #12]
34017274:	2204      	movs	r2, #4
34017276:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017278:	e00c      	b.n	34017294 <HAL_XSPI_Command+0x414>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3401727a:	68fb      	ldr	r3, [r7, #12]
3401727c:	2224      	movs	r2, #36	@ 0x24
3401727e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017280:	e008      	b.n	34017294 <HAL_XSPI_Command+0x414>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
34017282:	2302      	movs	r3, #2
34017284:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
34017286:	e005      	b.n	34017294 <HAL_XSPI_Command+0x414>
    }
  }
  else
  {
    status = HAL_ERROR;
34017288:	2301      	movs	r3, #1
3401728a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401728c:	68fb      	ldr	r3, [r7, #12]
3401728e:	2210      	movs	r2, #16
34017290:	65da      	str	r2, [r3, #92]	@ 0x5c
34017292:	e000      	b.n	34017296 <HAL_XSPI_Command+0x416>
    if (status == HAL_OK)
34017294:	bf00      	nop
  }

  return status;
34017296:	7ffb      	ldrb	r3, [r7, #31]
}
34017298:	4618      	mov	r0, r3
3401729a:	3720      	adds	r7, #32
3401729c:	46bd      	mov	sp, r7
3401729e:	bd80      	pop	{r7, pc}
340172a0:	3401eb44 	.word	0x3401eb44

340172a4 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
340172a4:	b580      	push	{r7, lr}
340172a6:	b08a      	sub	sp, #40	@ 0x28
340172a8:	af02      	add	r7, sp, #8
340172aa:	60f8      	str	r0, [r7, #12]
340172ac:	60b9      	str	r1, [r7, #8]
340172ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
340172b0:	f7ec fd1a 	bl	34003ce8 <HAL_GetTick>
340172b4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
340172b6:	68fb      	ldr	r3, [r7, #12]
340172b8:	681b      	ldr	r3, [r3, #0]
340172ba:	3350      	adds	r3, #80	@ 0x50
340172bc:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
340172be:	68bb      	ldr	r3, [r7, #8]
340172c0:	2b00      	cmp	r3, #0
340172c2:	d105      	bne.n	340172d0 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
340172c4:	2301      	movs	r3, #1
340172c6:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
340172c8:	68fb      	ldr	r3, [r7, #12]
340172ca:	2208      	movs	r2, #8
340172cc:	65da      	str	r2, [r3, #92]	@ 0x5c
340172ce:	e057      	b.n	34017380 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
340172d0:	68fb      	ldr	r3, [r7, #12]
340172d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340172d4:	2b04      	cmp	r3, #4
340172d6:	d14e      	bne.n	34017376 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
340172d8:	68fb      	ldr	r3, [r7, #12]
340172da:	681b      	ldr	r3, [r3, #0]
340172dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340172de:	1c5a      	adds	r2, r3, #1
340172e0:	68fb      	ldr	r3, [r7, #12]
340172e2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
340172e4:	68fb      	ldr	r3, [r7, #12]
340172e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
340172e8:	68fb      	ldr	r3, [r7, #12]
340172ea:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
340172ec:	68fb      	ldr	r3, [r7, #12]
340172ee:	68ba      	ldr	r2, [r7, #8]
340172f0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
340172f2:	68fb      	ldr	r3, [r7, #12]
340172f4:	681b      	ldr	r3, [r3, #0]
340172f6:	681a      	ldr	r2, [r3, #0]
340172f8:	68fb      	ldr	r3, [r7, #12]
340172fa:	681b      	ldr	r3, [r3, #0]
340172fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
34017300:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
34017302:	687b      	ldr	r3, [r7, #4]
34017304:	9300      	str	r3, [sp, #0]
34017306:	69bb      	ldr	r3, [r7, #24]
34017308:	2201      	movs	r2, #1
3401730a:	2104      	movs	r1, #4
3401730c:	68f8      	ldr	r0, [r7, #12]
3401730e:	f000 fa8a 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
34017312:	4603      	mov	r3, r0
34017314:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
34017316:	7ffb      	ldrb	r3, [r7, #31]
34017318:	2b00      	cmp	r3, #0
3401731a:	d113      	bne.n	34017344 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3401731c:	68fb      	ldr	r3, [r7, #12]
3401731e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34017320:	781a      	ldrb	r2, [r3, #0]
34017322:	697b      	ldr	r3, [r7, #20]
34017324:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
34017326:	68fb      	ldr	r3, [r7, #12]
34017328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401732a:	1c5a      	adds	r2, r3, #1
3401732c:	68fb      	ldr	r3, [r7, #12]
3401732e:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
34017330:	68fb      	ldr	r3, [r7, #12]
34017332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34017334:	1e5a      	subs	r2, r3, #1
34017336:	68fb      	ldr	r3, [r7, #12]
34017338:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3401733a:	68fb      	ldr	r3, [r7, #12]
3401733c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401733e:	2b00      	cmp	r3, #0
34017340:	d1df      	bne.n	34017302 <HAL_XSPI_Transmit+0x5e>
34017342:	e000      	b.n	34017346 <HAL_XSPI_Transmit+0xa2>
          break;
34017344:	bf00      	nop

      if (status == HAL_OK)
34017346:	7ffb      	ldrb	r3, [r7, #31]
34017348:	2b00      	cmp	r3, #0
3401734a:	d119      	bne.n	34017380 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3401734c:	687b      	ldr	r3, [r7, #4]
3401734e:	9300      	str	r3, [sp, #0]
34017350:	69bb      	ldr	r3, [r7, #24]
34017352:	2201      	movs	r2, #1
34017354:	2102      	movs	r1, #2
34017356:	68f8      	ldr	r0, [r7, #12]
34017358:	f000 fa65 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
3401735c:	4603      	mov	r3, r0
3401735e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
34017360:	7ffb      	ldrb	r3, [r7, #31]
34017362:	2b00      	cmp	r3, #0
34017364:	d10c      	bne.n	34017380 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
34017366:	68fb      	ldr	r3, [r7, #12]
34017368:	681b      	ldr	r3, [r3, #0]
3401736a:	2202      	movs	r2, #2
3401736c:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3401736e:	68fb      	ldr	r3, [r7, #12]
34017370:	2202      	movs	r2, #2
34017372:	659a      	str	r2, [r3, #88]	@ 0x58
34017374:	e004      	b.n	34017380 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
34017376:	2301      	movs	r3, #1
34017378:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401737a:	68fb      	ldr	r3, [r7, #12]
3401737c:	2210      	movs	r2, #16
3401737e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
34017380:	7ffb      	ldrb	r3, [r7, #31]
}
34017382:	4618      	mov	r0, r3
34017384:	3720      	adds	r7, #32
34017386:	46bd      	mov	sp, r7
34017388:	bd80      	pop	{r7, pc}

3401738a <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *pData, uint32_t Timeout)
{
3401738a:	b580      	push	{r7, lr}
3401738c:	b08c      	sub	sp, #48	@ 0x30
3401738e:	af02      	add	r7, sp, #8
34017390:	60f8      	str	r0, [r7, #12]
34017392:	60b9      	str	r1, [r7, #8]
34017394:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
34017396:	f7ec fca7 	bl	34003ce8 <HAL_GetTick>
3401739a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3401739c:	68fb      	ldr	r3, [r7, #12]
3401739e:	681b      	ldr	r3, [r3, #0]
340173a0:	3350      	adds	r3, #80	@ 0x50
340173a2:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
340173a4:	68fb      	ldr	r3, [r7, #12]
340173a6:	681b      	ldr	r3, [r3, #0]
340173a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340173aa:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
340173ac:	68fb      	ldr	r3, [r7, #12]
340173ae:	681b      	ldr	r3, [r3, #0]
340173b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
340173b4:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
340173b6:	68bb      	ldr	r3, [r7, #8]
340173b8:	2b00      	cmp	r3, #0
340173ba:	d106      	bne.n	340173ca <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
340173bc:	2301      	movs	r3, #1
340173be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
340173c2:	68fb      	ldr	r3, [r7, #12]
340173c4:	2208      	movs	r2, #8
340173c6:	65da      	str	r2, [r3, #92]	@ 0x5c
340173c8:	e07c      	b.n	340174c4 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
340173ca:	68fb      	ldr	r3, [r7, #12]
340173cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340173ce:	2b04      	cmp	r3, #4
340173d0:	d172      	bne.n	340174b8 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
340173d2:	68fb      	ldr	r3, [r7, #12]
340173d4:	681b      	ldr	r3, [r3, #0]
340173d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340173d8:	1c5a      	adds	r2, r3, #1
340173da:	68fb      	ldr	r3, [r7, #12]
340173dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
340173de:	68fb      	ldr	r3, [r7, #12]
340173e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
340173e2:	68fb      	ldr	r3, [r7, #12]
340173e4:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
340173e6:	68fb      	ldr	r3, [r7, #12]
340173e8:	68ba      	ldr	r2, [r7, #8]
340173ea:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
340173ec:	68fb      	ldr	r3, [r7, #12]
340173ee:	681b      	ldr	r3, [r3, #0]
340173f0:	681b      	ldr	r3, [r3, #0]
340173f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
340173f6:	68fb      	ldr	r3, [r7, #12]
340173f8:	681b      	ldr	r3, [r3, #0]
340173fa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
340173fe:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34017400:	68fb      	ldr	r3, [r7, #12]
34017402:	68db      	ldr	r3, [r3, #12]
34017404:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34017408:	d104      	bne.n	34017414 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3401740a:	68fb      	ldr	r3, [r7, #12]
3401740c:	681b      	ldr	r3, [r3, #0]
3401740e:	69ba      	ldr	r2, [r7, #24]
34017410:	649a      	str	r2, [r3, #72]	@ 0x48
34017412:	e011      	b.n	34017438 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
34017414:	68fb      	ldr	r3, [r7, #12]
34017416:	681b      	ldr	r3, [r3, #0]
34017418:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3401741c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
34017420:	2b00      	cmp	r3, #0
34017422:	d004      	beq.n	3401742e <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
34017424:	68fb      	ldr	r3, [r7, #12]
34017426:	681b      	ldr	r3, [r3, #0]
34017428:	69ba      	ldr	r2, [r7, #24]
3401742a:	649a      	str	r2, [r3, #72]	@ 0x48
3401742c:	e004      	b.n	34017438 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3401742e:	68fb      	ldr	r3, [r7, #12]
34017430:	681b      	ldr	r3, [r3, #0]
34017432:	697a      	ldr	r2, [r7, #20]
34017434:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
34017438:	687b      	ldr	r3, [r7, #4]
3401743a:	9300      	str	r3, [sp, #0]
3401743c:	6a3b      	ldr	r3, [r7, #32]
3401743e:	2201      	movs	r2, #1
34017440:	2106      	movs	r1, #6
34017442:	68f8      	ldr	r0, [r7, #12]
34017444:	f000 f9ef 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
34017448:	4603      	mov	r3, r0
3401744a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
3401744e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34017452:	2b00      	cmp	r3, #0
34017454:	d114      	bne.n	34017480 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
34017456:	68fb      	ldr	r3, [r7, #12]
34017458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401745a:	69fa      	ldr	r2, [r7, #28]
3401745c:	7812      	ldrb	r2, [r2, #0]
3401745e:	b2d2      	uxtb	r2, r2
34017460:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
34017462:	68fb      	ldr	r3, [r7, #12]
34017464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34017466:	1c5a      	adds	r2, r3, #1
34017468:	68fb      	ldr	r3, [r7, #12]
3401746a:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3401746c:	68fb      	ldr	r3, [r7, #12]
3401746e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34017470:	1e5a      	subs	r2, r3, #1
34017472:	68fb      	ldr	r3, [r7, #12]
34017474:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
34017476:	68fb      	ldr	r3, [r7, #12]
34017478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401747a:	2b00      	cmp	r3, #0
3401747c:	d1dc      	bne.n	34017438 <HAL_XSPI_Receive+0xae>
3401747e:	e000      	b.n	34017482 <HAL_XSPI_Receive+0xf8>
          break;
34017480:	bf00      	nop

      if (status == HAL_OK)
34017482:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34017486:	2b00      	cmp	r3, #0
34017488:	d11c      	bne.n	340174c4 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3401748a:	687b      	ldr	r3, [r7, #4]
3401748c:	9300      	str	r3, [sp, #0]
3401748e:	6a3b      	ldr	r3, [r7, #32]
34017490:	2201      	movs	r2, #1
34017492:	2102      	movs	r1, #2
34017494:	68f8      	ldr	r0, [r7, #12]
34017496:	f000 f9c6 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
3401749a:	4603      	mov	r3, r0
3401749c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
340174a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
340174a4:	2b00      	cmp	r3, #0
340174a6:	d10d      	bne.n	340174c4 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
340174a8:	68fb      	ldr	r3, [r7, #12]
340174aa:	681b      	ldr	r3, [r3, #0]
340174ac:	2202      	movs	r2, #2
340174ae:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
340174b0:	68fb      	ldr	r3, [r7, #12]
340174b2:	2202      	movs	r2, #2
340174b4:	659a      	str	r2, [r3, #88]	@ 0x58
340174b6:	e005      	b.n	340174c4 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
340174b8:	2301      	movs	r3, #1
340174ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340174be:	68fb      	ldr	r3, [r7, #12]
340174c0:	2210      	movs	r2, #16
340174c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
340174c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
340174c8:	4618      	mov	r0, r3
340174ca:	3728      	adds	r7, #40	@ 0x28
340174cc:	46bd      	mov	sp, r7
340174ce:	bd80      	pop	{r7, pc}

340174d0 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, const XSPI_AutoPollingTypeDef *pCfg,
                                       uint32_t Timeout)
{
340174d0:	b580      	push	{r7, lr}
340174d2:	b08c      	sub	sp, #48	@ 0x30
340174d4:	af02      	add	r7, sp, #8
340174d6:	60f8      	str	r0, [r7, #12]
340174d8:	60b9      	str	r1, [r7, #8]
340174da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
340174dc:	f7ec fc04 	bl	34003ce8 <HAL_GetTick>
340174e0:	6238      	str	r0, [r7, #32]
  uint32_t addr_reg = hxspi->Instance->AR;
340174e2:	68fb      	ldr	r3, [r7, #12]
340174e4:	681b      	ldr	r3, [r3, #0]
340174e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340174e8:	61fb      	str	r3, [r7, #28]
  uint32_t ir_reg = hxspi->Instance->IR;
340174ea:	68fb      	ldr	r3, [r7, #12]
340174ec:	681b      	ldr	r3, [r3, #0]
340174ee:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
340174f2:	61bb      	str	r3, [r7, #24]
#ifdef USE_FULL_ASSERT
  uint32_t dlr_reg = hxspi->Instance->DLR;
340174f4:	68fb      	ldr	r3, [r7, #12]
340174f6:	681b      	ldr	r3, [r3, #0]
340174f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340174fa:	617b      	str	r3, [r7, #20]
#endif /* USE_FULL_ASSERT */

  /* Check the parameters of the autopolling configuration structure */
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
340174fc:	68bb      	ldr	r3, [r7, #8]
340174fe:	689b      	ldr	r3, [r3, #8]
34017500:	2b00      	cmp	r3, #0
34017502:	d009      	beq.n	34017518 <HAL_XSPI_AutoPolling+0x48>
34017504:	68bb      	ldr	r3, [r7, #8]
34017506:	689b      	ldr	r3, [r3, #8]
34017508:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
3401750c:	d004      	beq.n	34017518 <HAL_XSPI_AutoPolling+0x48>
3401750e:	f240 7134 	movw	r1, #1844	@ 0x734
34017512:	4853      	ldr	r0, [pc, #332]	@ (34017660 <HAL_XSPI_AutoPolling+0x190>)
34017514:	f7ea fbc6 	bl	34001ca4 <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
34017518:	68bb      	ldr	r3, [r7, #8]
3401751a:	68db      	ldr	r3, [r3, #12]
3401751c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34017520:	d008      	beq.n	34017534 <HAL_XSPI_AutoPolling+0x64>
34017522:	68bb      	ldr	r3, [r7, #8]
34017524:	68db      	ldr	r3, [r3, #12]
34017526:	2b00      	cmp	r3, #0
34017528:	d004      	beq.n	34017534 <HAL_XSPI_AutoPolling+0x64>
3401752a:	f240 7135 	movw	r1, #1845	@ 0x735
3401752e:	484c      	ldr	r0, [pc, #304]	@ (34017660 <HAL_XSPI_AutoPolling+0x190>)
34017530:	f7ea fbb8 	bl	34001ca4 <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
34017534:	68bb      	ldr	r3, [r7, #8]
34017536:	691b      	ldr	r3, [r3, #16]
34017538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401753c:	d304      	bcc.n	34017548 <HAL_XSPI_AutoPolling+0x78>
3401753e:	f240 7136 	movw	r1, #1846	@ 0x736
34017542:	4847      	ldr	r0, [pc, #284]	@ (34017660 <HAL_XSPI_AutoPolling+0x190>)
34017544:	f7ea fbae 	bl	34001ca4 <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
34017548:	697b      	ldr	r3, [r7, #20]
3401754a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3401754e:	d003      	beq.n	34017558 <HAL_XSPI_AutoPolling+0x88>
34017550:	697b      	ldr	r3, [r7, #20]
34017552:	3301      	adds	r3, #1
34017554:	2b04      	cmp	r3, #4
34017556:	d904      	bls.n	34017562 <HAL_XSPI_AutoPolling+0x92>
34017558:	f240 7137 	movw	r1, #1847	@ 0x737
3401755c:	4840      	ldr	r0, [pc, #256]	@ (34017660 <HAL_XSPI_AutoPolling+0x190>)
3401755e:	f7ea fba1 	bl	34001ca4 <assert_failed>

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
34017562:	68fb      	ldr	r3, [r7, #12]
34017564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34017566:	2b04      	cmp	r3, #4
34017568:	d16c      	bne.n	34017644 <HAL_XSPI_AutoPolling+0x174>
3401756a:	68bb      	ldr	r3, [r7, #8]
3401756c:	68db      	ldr	r3, [r3, #12]
3401756e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34017572:	d167      	bne.n	34017644 <HAL_XSPI_AutoPolling+0x174>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
34017574:	687b      	ldr	r3, [r7, #4]
34017576:	9300      	str	r3, [sp, #0]
34017578:	6a3b      	ldr	r3, [r7, #32]
3401757a:	2200      	movs	r2, #0
3401757c:	2120      	movs	r1, #32
3401757e:	68f8      	ldr	r0, [r7, #12]
34017580:	f000 f951 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
34017584:	4603      	mov	r3, r0
34017586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (status == HAL_OK)
3401758a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3401758e:	2b00      	cmp	r3, #0
34017590:	d154      	bne.n	3401763c <HAL_XSPI_AutoPolling+0x16c>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
34017592:	68fb      	ldr	r3, [r7, #12]
34017594:	681b      	ldr	r3, [r3, #0]
34017596:	68ba      	ldr	r2, [r7, #8]
34017598:	6812      	ldr	r2, [r2, #0]
3401759a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3401759e:	68fb      	ldr	r3, [r7, #12]
340175a0:	681b      	ldr	r3, [r3, #0]
340175a2:	68ba      	ldr	r2, [r7, #8]
340175a4:	6852      	ldr	r2, [r2, #4]
340175a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
340175aa:	68fb      	ldr	r3, [r7, #12]
340175ac:	681b      	ldr	r3, [r3, #0]
340175ae:	68ba      	ldr	r2, [r7, #8]
340175b0:	6912      	ldr	r2, [r2, #16]
340175b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
340175b6:	68fb      	ldr	r3, [r7, #12]
340175b8:	681b      	ldr	r3, [r3, #0]
340175ba:	681b      	ldr	r3, [r3, #0]
340175bc:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
340175c0:	68bb      	ldr	r3, [r7, #8]
340175c2:	6899      	ldr	r1, [r3, #8]
340175c4:	68bb      	ldr	r3, [r7, #8]
340175c6:	68db      	ldr	r3, [r3, #12]
340175c8:	430b      	orrs	r3, r1
340175ca:	431a      	orrs	r2, r3
340175cc:	68fb      	ldr	r3, [r7, #12]
340175ce:	681b      	ldr	r3, [r3, #0]
340175d0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
340175d4:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
340175d6:	68fb      	ldr	r3, [r7, #12]
340175d8:	68db      	ldr	r3, [r3, #12]
340175da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340175de:	d104      	bne.n	340175ea <HAL_XSPI_AutoPolling+0x11a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
340175e0:	68fb      	ldr	r3, [r7, #12]
340175e2:	681b      	ldr	r3, [r3, #0]
340175e4:	69fa      	ldr	r2, [r7, #28]
340175e6:	649a      	str	r2, [r3, #72]	@ 0x48
340175e8:	e011      	b.n	3401760e <HAL_XSPI_AutoPolling+0x13e>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
340175ea:	68fb      	ldr	r3, [r7, #12]
340175ec:	681b      	ldr	r3, [r3, #0]
340175ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
340175f2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
340175f6:	2b00      	cmp	r3, #0
340175f8:	d004      	beq.n	34017604 <HAL_XSPI_AutoPolling+0x134>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
340175fa:	68fb      	ldr	r3, [r7, #12]
340175fc:	681b      	ldr	r3, [r3, #0]
340175fe:	69fa      	ldr	r2, [r7, #28]
34017600:	649a      	str	r2, [r3, #72]	@ 0x48
34017602:	e004      	b.n	3401760e <HAL_XSPI_AutoPolling+0x13e>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
34017604:	68fb      	ldr	r3, [r7, #12]
34017606:	681b      	ldr	r3, [r3, #0]
34017608:	69ba      	ldr	r2, [r7, #24]
3401760a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3401760e:	687b      	ldr	r3, [r7, #4]
34017610:	9300      	str	r3, [sp, #0]
34017612:	6a3b      	ldr	r3, [r7, #32]
34017614:	2201      	movs	r2, #1
34017616:	2108      	movs	r1, #8
34017618:	68f8      	ldr	r0, [r7, #12]
3401761a:	f000 f904 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
3401761e:	4603      	mov	r3, r0
34017620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      if (status == HAL_OK)
34017624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34017628:	2b00      	cmp	r3, #0
3401762a:	d112      	bne.n	34017652 <HAL_XSPI_AutoPolling+0x182>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3401762c:	68fb      	ldr	r3, [r7, #12]
3401762e:	681b      	ldr	r3, [r3, #0]
34017630:	2208      	movs	r2, #8
34017632:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
34017634:	68fb      	ldr	r3, [r7, #12]
34017636:	2202      	movs	r2, #2
34017638:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3401763a:	e00a      	b.n	34017652 <HAL_XSPI_AutoPolling+0x182>
      }
    }
    else
    {
      status = HAL_BUSY;
3401763c:	2302      	movs	r3, #2
3401763e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status == HAL_OK)
34017642:	e006      	b.n	34017652 <HAL_XSPI_AutoPolling+0x182>
    }
  }
  else
  {
    status = HAL_ERROR;
34017644:	2301      	movs	r3, #1
34017646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401764a:	68fb      	ldr	r3, [r7, #12]
3401764c:	2210      	movs	r2, #16
3401764e:	65da      	str	r2, [r3, #92]	@ 0x5c
34017650:	e000      	b.n	34017654 <HAL_XSPI_AutoPolling+0x184>
    if (status == HAL_OK)
34017652:	bf00      	nop
  }

  return status;
34017654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
34017658:	4618      	mov	r0, r3
3401765a:	3728      	adds	r7, #40	@ 0x28
3401765c:	46bd      	mov	sp, r7
3401765e:	bd80      	pop	{r7, pc}
34017660:	3401eb44 	.word	0x3401eb44

34017664 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, const XSPI_MemoryMappedTypeDef *pCfg)
{
34017664:	b580      	push	{r7, lr}
34017666:	b086      	sub	sp, #24
34017668:	af02      	add	r7, sp, #8
3401766a:	6078      	str	r0, [r7, #4]
3401766c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3401766e:	f7ec fb3b 	bl	34003ce8 <HAL_GetTick>
34017672:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
34017674:	683b      	ldr	r3, [r7, #0]
34017676:	681b      	ldr	r3, [r3, #0]
34017678:	2b00      	cmp	r3, #0
3401767a:	d008      	beq.n	3401768e <HAL_XSPI_MemoryMapped+0x2a>
3401767c:	683b      	ldr	r3, [r7, #0]
3401767e:	681b      	ldr	r3, [r3, #0]
34017680:	2b08      	cmp	r3, #8
34017682:	d004      	beq.n	3401768e <HAL_XSPI_MemoryMapped+0x2a>
34017684:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
34017688:	4846      	ldr	r0, [pc, #280]	@ (340177a4 <HAL_XSPI_MemoryMapped+0x140>)
3401768a:	f7ea fb0b 	bl	34001ca4 <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3401768e:	683b      	ldr	r3, [r7, #0]
34017690:	689b      	ldr	r3, [r3, #8]
34017692:	2b00      	cmp	r3, #0
34017694:	d009      	beq.n	340176aa <HAL_XSPI_MemoryMapped+0x46>
34017696:	683b      	ldr	r3, [r7, #0]
34017698:	689b      	ldr	r3, [r3, #8]
3401769a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401769e:	d004      	beq.n	340176aa <HAL_XSPI_MemoryMapped+0x46>
340176a0:	f240 71c9 	movw	r1, #1993	@ 0x7c9
340176a4:	483f      	ldr	r0, [pc, #252]	@ (340177a4 <HAL_XSPI_MemoryMapped+0x140>)
340176a6:	f7ea fafd 	bl	34001ca4 <assert_failed>

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
340176aa:	687b      	ldr	r3, [r7, #4]
340176ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340176ae:	2b04      	cmp	r3, #4
340176b0:	d16d      	bne.n	3401778e <HAL_XSPI_MemoryMapped+0x12a>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
340176b2:	687b      	ldr	r3, [r7, #4]
340176b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340176b6:	9300      	str	r3, [sp, #0]
340176b8:	68bb      	ldr	r3, [r7, #8]
340176ba:	2200      	movs	r2, #0
340176bc:	2120      	movs	r1, #32
340176be:	6878      	ldr	r0, [r7, #4]
340176c0:	f000 f8b1 	bl	34017826 <XSPI_WaitFlagStateUntilTimeout>
340176c4:	4603      	mov	r3, r0
340176c6:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
340176c8:	7bfb      	ldrb	r3, [r7, #15]
340176ca:	2b00      	cmp	r3, #0
340176cc:	d164      	bne.n	34017798 <HAL_XSPI_MemoryMapped+0x134>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
340176ce:	687b      	ldr	r3, [r7, #4]
340176d0:	2288      	movs	r2, #136	@ 0x88
340176d2:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
340176d4:	683b      	ldr	r3, [r7, #0]
340176d6:	689b      	ldr	r3, [r3, #8]
340176d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340176dc:	d10b      	bne.n	340176f6 <HAL_XSPI_MemoryMapped+0x92>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
340176de:	687b      	ldr	r3, [r7, #4]
340176e0:	681b      	ldr	r3, [r3, #0]
340176e2:	681b      	ldr	r3, [r3, #0]
340176e4:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
340176e8:	683b      	ldr	r3, [r7, #0]
340176ea:	689a      	ldr	r2, [r3, #8]
340176ec:	687b      	ldr	r3, [r7, #4]
340176ee:	681b      	ldr	r3, [r3, #0]
340176f0:	430a      	orrs	r2, r1
340176f2:	601a      	str	r2, [r3, #0]
340176f4:	e01b      	b.n	3401772e <HAL_XSPI_MemoryMapped+0xca>
      }

      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
340176f6:	683b      	ldr	r3, [r7, #0]
340176f8:	68db      	ldr	r3, [r3, #12]
340176fa:	2b00      	cmp	r3, #0
340176fc:	d009      	beq.n	34017712 <HAL_XSPI_MemoryMapped+0xae>
340176fe:	683b      	ldr	r3, [r7, #0]
34017700:	68db      	ldr	r3, [r3, #12]
34017702:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34017706:	d004      	beq.n	34017712 <HAL_XSPI_MemoryMapped+0xae>
34017708:	f240 71dd 	movw	r1, #2013	@ 0x7dd
3401770c:	4825      	ldr	r0, [pc, #148]	@ (340177a4 <HAL_XSPI_MemoryMapped+0x140>)
3401770e:	f7ea fac9 	bl	34001ca4 <assert_failed>

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
34017712:	687b      	ldr	r3, [r7, #4]
34017714:	681b      	ldr	r3, [r3, #0]
34017716:	681b      	ldr	r3, [r3, #0]
34017718:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
3401771c:	683b      	ldr	r3, [r7, #0]
3401771e:	689a      	ldr	r2, [r3, #8]
34017720:	683b      	ldr	r3, [r7, #0]
34017722:	68db      	ldr	r3, [r3, #12]
34017724:	431a      	orrs	r2, r3
34017726:	687b      	ldr	r3, [r7, #4]
34017728:	681b      	ldr	r3, [r3, #0]
3401772a:	430a      	orrs	r2, r1
3401772c:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3401772e:	683b      	ldr	r3, [r7, #0]
34017730:	681b      	ldr	r3, [r3, #0]
34017732:	2b08      	cmp	r3, #8
34017734:	d11b      	bne.n	3401776e <HAL_XSPI_MemoryMapped+0x10a>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
34017736:	683b      	ldr	r3, [r7, #0]
34017738:	685b      	ldr	r3, [r3, #4]
3401773a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401773e:	d304      	bcc.n	3401774a <HAL_XSPI_MemoryMapped+0xe6>
34017740:	f240 71e5 	movw	r1, #2021	@ 0x7e5
34017744:	4817      	ldr	r0, [pc, #92]	@ (340177a4 <HAL_XSPI_MemoryMapped+0x140>)
34017746:	f7ea faad 	bl	34001ca4 <assert_failed>

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3401774a:	687b      	ldr	r3, [r7, #4]
3401774c:	681b      	ldr	r3, [r3, #0]
3401774e:	683a      	ldr	r2, [r7, #0]
34017750:	6852      	ldr	r2, [r2, #4]
34017752:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
34017756:	687b      	ldr	r3, [r7, #4]
34017758:	681b      	ldr	r3, [r3, #0]
3401775a:	2210      	movs	r2, #16
3401775c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3401775e:	687b      	ldr	r3, [r7, #4]
34017760:	681b      	ldr	r3, [r3, #0]
34017762:	681a      	ldr	r2, [r3, #0]
34017764:	687b      	ldr	r3, [r7, #4]
34017766:	681b      	ldr	r3, [r3, #0]
34017768:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3401776c:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3401776e:	687b      	ldr	r3, [r7, #4]
34017770:	681b      	ldr	r3, [r3, #0]
34017772:	681b      	ldr	r3, [r3, #0]
34017774:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
34017778:	f023 0308 	bic.w	r3, r3, #8
3401777c:	683a      	ldr	r2, [r7, #0]
3401777e:	6812      	ldr	r2, [r2, #0]
34017780:	431a      	orrs	r2, r3
34017782:	687b      	ldr	r3, [r7, #4]
34017784:	681b      	ldr	r3, [r3, #0]
34017786:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
3401778a:	601a      	str	r2, [r3, #0]
3401778c:	e004      	b.n	34017798 <HAL_XSPI_MemoryMapped+0x134>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
3401778e:	2301      	movs	r3, #1
34017790:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34017792:	687b      	ldr	r3, [r7, #4]
34017794:	2210      	movs	r2, #16
34017796:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
34017798:	7bfb      	ldrb	r3, [r7, #15]
}
3401779a:	4618      	mov	r0, r3
3401779c:	3710      	adds	r7, #16
3401779e:	46bd      	mov	sp, r7
340177a0:	bd80      	pop	{r7, pc}
340177a2:	bf00      	nop
340177a4:	3401eb44 	.word	0x3401eb44

340177a8 <HAL_XSPI_SetClockPrescaler>:
  * @param  hxspi     : XSPI handle.
  * @param  Prescaler : Clock prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetClockPrescaler(XSPI_HandleTypeDef *hxspi, uint32_t Prescaler)
{
340177a8:	b580      	push	{r7, lr}
340177aa:	b084      	sub	sp, #16
340177ac:	af00      	add	r7, sp, #0
340177ae:	6078      	str	r0, [r7, #4]
340177b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
340177b2:	2300      	movs	r3, #0
340177b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
340177b6:	683b      	ldr	r3, [r7, #0]
340177b8:	2bff      	cmp	r3, #255	@ 0xff
340177ba:	d904      	bls.n	340177c6 <HAL_XSPI_SetClockPrescaler+0x1e>
340177bc:	f640 2193 	movw	r1, #2707	@ 0xa93
340177c0:	4810      	ldr	r0, [pc, #64]	@ (34017804 <HAL_XSPI_SetClockPrescaler+0x5c>)
340177c2:	f7ea fa6f 	bl	34001ca4 <assert_failed>

  /* Check the state */
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
340177c6:	687b      	ldr	r3, [r7, #4]
340177c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340177ca:	f003 0308 	and.w	r3, r3, #8
340177ce:	2b00      	cmp	r3, #0
340177d0:	d10e      	bne.n	340177f0 <HAL_XSPI_SetClockPrescaler+0x48>
  {
    /* Synchronize initialization structure with the new clock prescaler value */
    hxspi->Init.ClockPrescaler = Prescaler;
340177d2:	687b      	ldr	r3, [r7, #4]
340177d4:	683a      	ldr	r2, [r7, #0]
340177d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure clock prescaler */
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
340177d8:	687b      	ldr	r3, [r7, #4]
340177da:	681b      	ldr	r3, [r3, #0]
340177dc:	68db      	ldr	r3, [r3, #12]
340177de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
340177e2:	687b      	ldr	r3, [r7, #4]
340177e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
340177e6:	687b      	ldr	r3, [r7, #4]
340177e8:	681b      	ldr	r3, [r3, #0]
340177ea:	430a      	orrs	r2, r1
340177ec:	60da      	str	r2, [r3, #12]
340177ee:	e004      	b.n	340177fa <HAL_XSPI_SetClockPrescaler+0x52>
               ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));
  }
  else
  {
    status = HAL_ERROR;
340177f0:	2301      	movs	r3, #1
340177f2:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340177f4:	687b      	ldr	r3, [r7, #4]
340177f6:	2210      	movs	r2, #16
340177f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
340177fa:	7bfb      	ldrb	r3, [r7, #15]
}
340177fc:	4618      	mov	r0, r3
340177fe:	3710      	adds	r7, #16
34017800:	46bd      	mov	sp, r7
34017802:	bd80      	pop	{r7, pc}
34017804:	3401eb44 	.word	0x3401eb44

34017808 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
34017808:	b480      	push	{r7}
3401780a:	b083      	sub	sp, #12
3401780c:	af00      	add	r7, sp, #0
3401780e:	6078      	str	r0, [r7, #4]
34017810:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
34017812:	687b      	ldr	r3, [r7, #4]
34017814:	683a      	ldr	r2, [r7, #0]
34017816:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
34017818:	2300      	movs	r3, #0
}
3401781a:	4618      	mov	r0, r3
3401781c:	370c      	adds	r7, #12
3401781e:	46bd      	mov	sp, r7
34017820:	f85d 7b04 	ldr.w	r7, [sp], #4
34017824:	4770      	bx	lr

34017826 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
34017826:	b580      	push	{r7, lr}
34017828:	b084      	sub	sp, #16
3401782a:	af00      	add	r7, sp, #0
3401782c:	60f8      	str	r0, [r7, #12]
3401782e:	60b9      	str	r1, [r7, #8]
34017830:	603b      	str	r3, [r7, #0]
34017832:	4613      	mov	r3, r2
34017834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
34017836:	e019      	b.n	3401786c <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
34017838:	69bb      	ldr	r3, [r7, #24]
3401783a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3401783e:	d015      	beq.n	3401786c <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34017840:	f7ec fa52 	bl	34003ce8 <HAL_GetTick>
34017844:	4602      	mov	r2, r0
34017846:	683b      	ldr	r3, [r7, #0]
34017848:	1ad3      	subs	r3, r2, r3
3401784a:	69ba      	ldr	r2, [r7, #24]
3401784c:	429a      	cmp	r2, r3
3401784e:	d302      	bcc.n	34017856 <XSPI_WaitFlagStateUntilTimeout+0x30>
34017850:	69bb      	ldr	r3, [r7, #24]
34017852:	2b00      	cmp	r3, #0
34017854:	d10a      	bne.n	3401786c <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
34017856:	68fb      	ldr	r3, [r7, #12]
34017858:	2202      	movs	r2, #2
3401785a:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3401785c:	68fb      	ldr	r3, [r7, #12]
3401785e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34017860:	f043 0201 	orr.w	r2, r3, #1
34017864:	68fb      	ldr	r3, [r7, #12]
34017866:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
34017868:	2303      	movs	r3, #3
3401786a:	e00e      	b.n	3401788a <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3401786c:	68fb      	ldr	r3, [r7, #12]
3401786e:	681b      	ldr	r3, [r3, #0]
34017870:	6a1a      	ldr	r2, [r3, #32]
34017872:	68bb      	ldr	r3, [r7, #8]
34017874:	4013      	ands	r3, r2
34017876:	2b00      	cmp	r3, #0
34017878:	bf14      	ite	ne
3401787a:	2301      	movne	r3, #1
3401787c:	2300      	moveq	r3, #0
3401787e:	b2db      	uxtb	r3, r3
34017880:	461a      	mov	r2, r3
34017882:	79fb      	ldrb	r3, [r7, #7]
34017884:	429a      	cmp	r2, r3
34017886:	d1d7      	bne.n	34017838 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
34017888:	2300      	movs	r3, #0
}
3401788a:	4618      	mov	r0, r3
3401788c:	3710      	adds	r7, #16
3401788e:	46bd      	mov	sp, r7
34017890:	bd80      	pop	{r7, pc}
	...

34017894 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd)
{
34017894:	b580      	push	{r7, lr}
34017896:	b088      	sub	sp, #32
34017898:	af00      	add	r7, sp, #0
3401789a:	6078      	str	r0, [r7, #4]
3401789c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
3401789e:	2300      	movs	r3, #0
340178a0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
340178a2:	687b      	ldr	r3, [r7, #4]
340178a4:	681b      	ldr	r3, [r3, #0]
340178a6:	681a      	ldr	r2, [r3, #0]
340178a8:	687b      	ldr	r3, [r7, #4]
340178aa:	681b      	ldr	r3, [r3, #0]
340178ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
340178b0:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
340178b2:	687b      	ldr	r3, [r7, #4]
340178b4:	689b      	ldr	r3, [r3, #8]
340178b6:	2b00      	cmp	r3, #0
340178b8:	d12b      	bne.n	34017912 <XSPI_ConfigCmd+0x7e>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
340178ba:	683b      	ldr	r3, [r7, #0]
340178bc:	685b      	ldr	r3, [r3, #4]
340178be:	2b00      	cmp	r3, #0
340178c0:	d01c      	beq.n	340178fc <XSPI_ConfigCmd+0x68>
340178c2:	683b      	ldr	r3, [r7, #0]
340178c4:	685b      	ldr	r3, [r3, #4]
340178c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
340178ca:	d017      	beq.n	340178fc <XSPI_ConfigCmd+0x68>
340178cc:	683b      	ldr	r3, [r7, #0]
340178ce:	685b      	ldr	r3, [r3, #4]
340178d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
340178d4:	d012      	beq.n	340178fc <XSPI_ConfigCmd+0x68>
340178d6:	683b      	ldr	r3, [r7, #0]
340178d8:	685b      	ldr	r3, [r3, #4]
340178da:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
340178de:	d00d      	beq.n	340178fc <XSPI_ConfigCmd+0x68>
340178e0:	683b      	ldr	r3, [r7, #0]
340178e2:	685b      	ldr	r3, [r3, #4]
340178e4:	2b00      	cmp	r3, #0
340178e6:	d009      	beq.n	340178fc <XSPI_ConfigCmd+0x68>
340178e8:	683b      	ldr	r3, [r7, #0]
340178ea:	685b      	ldr	r3, [r3, #4]
340178ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
340178f0:	d004      	beq.n	340178fc <XSPI_ConfigCmd+0x68>
340178f2:	f640 41a4 	movw	r1, #3236	@ 0xca4
340178f6:	4892      	ldr	r0, [pc, #584]	@ (34017b40 <XSPI_ConfigCmd+0x2ac>)
340178f8:	f7ea f9d4 	bl	34001ca4 <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
340178fc:	687b      	ldr	r3, [r7, #4]
340178fe:	681b      	ldr	r3, [r3, #0]
34017900:	681b      	ldr	r3, [r3, #0]
34017902:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
34017906:	683b      	ldr	r3, [r7, #0]
34017908:	685a      	ldr	r2, [r3, #4]
3401790a:	687b      	ldr	r3, [r7, #4]
3401790c:	681b      	ldr	r3, [r3, #0]
3401790e:	430a      	orrs	r2, r1
34017910:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
34017912:	683b      	ldr	r3, [r7, #0]
34017914:	681b      	ldr	r3, [r3, #0]
34017916:	2b02      	cmp	r3, #2
34017918:	d114      	bne.n	34017944 <XSPI_ConfigCmd+0xb0>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3401791a:	687b      	ldr	r3, [r7, #4]
3401791c:	681b      	ldr	r3, [r3, #0]
3401791e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
34017922:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
34017924:	687b      	ldr	r3, [r7, #4]
34017926:	681b      	ldr	r3, [r3, #0]
34017928:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
3401792c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
3401792e:	687b      	ldr	r3, [r7, #4]
34017930:	681b      	ldr	r3, [r3, #0]
34017932:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
34017936:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
34017938:	687b      	ldr	r3, [r7, #4]
3401793a:	681b      	ldr	r3, [r3, #0]
3401793c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
34017940:	60fb      	str	r3, [r7, #12]
34017942:	e02c      	b.n	3401799e <XSPI_ConfigCmd+0x10a>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
34017944:	683b      	ldr	r3, [r7, #0]
34017946:	681b      	ldr	r3, [r3, #0]
34017948:	2b03      	cmp	r3, #3
3401794a:	d114      	bne.n	34017976 <XSPI_ConfigCmd+0xe2>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
3401794c:	687b      	ldr	r3, [r7, #4]
3401794e:	681b      	ldr	r3, [r3, #0]
34017950:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
34017954:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
34017956:	687b      	ldr	r3, [r7, #4]
34017958:	681b      	ldr	r3, [r3, #0]
3401795a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
3401795e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
34017960:	687b      	ldr	r3, [r7, #4]
34017962:	681b      	ldr	r3, [r3, #0]
34017964:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
34017968:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
3401796a:	687b      	ldr	r3, [r7, #4]
3401796c:	681b      	ldr	r3, [r3, #0]
3401796e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
34017972:	60fb      	str	r3, [r7, #12]
34017974:	e013      	b.n	3401799e <XSPI_ConfigCmd+0x10a>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
34017976:	687b      	ldr	r3, [r7, #4]
34017978:	681b      	ldr	r3, [r3, #0]
3401797a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3401797e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
34017980:	687b      	ldr	r3, [r7, #4]
34017982:	681b      	ldr	r3, [r3, #0]
34017984:	f503 7384 	add.w	r3, r3, #264	@ 0x108
34017988:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
3401798a:	687b      	ldr	r3, [r7, #4]
3401798c:	681b      	ldr	r3, [r3, #0]
3401798e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
34017992:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
34017994:	687b      	ldr	r3, [r7, #4]
34017996:	681b      	ldr	r3, [r3, #0]
34017998:	f503 7390 	add.w	r3, r3, #288	@ 0x120
3401799c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3401799e:	683b      	ldr	r3, [r7, #0]
340179a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340179a2:	69bb      	ldr	r3, [r7, #24]
340179a4:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
340179a6:	683b      	ldr	r3, [r7, #0]
340179a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340179aa:	2b00      	cmp	r3, #0
340179ac:	d012      	beq.n	340179d4 <XSPI_ConfigCmd+0x140>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
340179ae:	683b      	ldr	r3, [r7, #0]
340179b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
340179b2:	68fb      	ldr	r3, [r7, #12]
340179b4:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
340179b6:	69bb      	ldr	r3, [r7, #24]
340179b8:	681b      	ldr	r3, [r3, #0]
340179ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
340179be:	683b      	ldr	r3, [r7, #0]
340179c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
340179c2:	683b      	ldr	r3, [r7, #0]
340179c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340179c6:	4319      	orrs	r1, r3
340179c8:	683b      	ldr	r3, [r7, #0]
340179ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340179cc:	430b      	orrs	r3, r1
340179ce:	431a      	orrs	r2, r3
340179d0:	69bb      	ldr	r3, [r7, #24]
340179d2:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
340179d4:	697b      	ldr	r3, [r7, #20]
340179d6:	681b      	ldr	r3, [r3, #0]
340179d8:	f023 021f 	bic.w	r2, r3, #31
340179dc:	683b      	ldr	r3, [r7, #0]
340179de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340179e0:	431a      	orrs	r2, r3
340179e2:	697b      	ldr	r3, [r7, #20]
340179e4:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
340179e6:	683b      	ldr	r3, [r7, #0]
340179e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340179ea:	2b00      	cmp	r3, #0
340179ec:	d009      	beq.n	34017a02 <XSPI_ConfigCmd+0x16e>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
340179ee:	683b      	ldr	r3, [r7, #0]
340179f0:	681b      	ldr	r3, [r3, #0]
340179f2:	2b00      	cmp	r3, #0
340179f4:	d105      	bne.n	34017a02 <XSPI_ConfigCmd+0x16e>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
340179f6:	683b      	ldr	r3, [r7, #0]
340179f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
340179fa:	687b      	ldr	r3, [r7, #4]
340179fc:	681b      	ldr	r3, [r3, #0]
340179fe:	3a01      	subs	r2, #1
34017a00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34017a02:	683b      	ldr	r3, [r7, #0]
34017a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017a06:	2b00      	cmp	r3, #0
34017a08:	d01e      	beq.n	34017a48 <XSPI_ConfigCmd+0x1b4>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
34017a0a:	683b      	ldr	r3, [r7, #0]
34017a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34017a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34017a12:	d10a      	bne.n	34017a2a <XSPI_ConfigCmd+0x196>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34017a14:	687b      	ldr	r3, [r7, #4]
34017a16:	681b      	ldr	r3, [r3, #0]
34017a18:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34017a1c:	687b      	ldr	r3, [r7, #4]
34017a1e:	681b      	ldr	r3, [r3, #0]
34017a20:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34017a24:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
34017a28:	e00e      	b.n	34017a48 <XSPI_ConfigCmd+0x1b4>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
34017a2a:	687b      	ldr	r3, [r7, #4]
34017a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34017a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34017a32:	d109      	bne.n	34017a48 <XSPI_ConfigCmd+0x1b4>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34017a34:	687b      	ldr	r3, [r7, #4]
34017a36:	681b      	ldr	r3, [r3, #0]
34017a38:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34017a3c:	687b      	ldr	r3, [r7, #4]
34017a3e:	681b      	ldr	r3, [r3, #0]
34017a40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
34017a44:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
34017a48:	683b      	ldr	r3, [r7, #0]
34017a4a:	68db      	ldr	r3, [r3, #12]
34017a4c:	2b00      	cmp	r3, #0
34017a4e:	f000 809e 	beq.w	34017b8e <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34017a52:	683b      	ldr	r3, [r7, #0]
34017a54:	69db      	ldr	r3, [r3, #28]
34017a56:	2b00      	cmp	r3, #0
34017a58:	d055      	beq.n	34017b06 <XSPI_ConfigCmd+0x272>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34017a5a:	683b      	ldr	r3, [r7, #0]
34017a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017a5e:	2b00      	cmp	r3, #0
34017a60:	d01e      	beq.n	34017aa0 <XSPI_ConfigCmd+0x20c>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34017a62:	69bb      	ldr	r3, [r7, #24]
34017a64:	681a      	ldr	r2, [r3, #0]
34017a66:	4b37      	ldr	r3, [pc, #220]	@ (34017b44 <XSPI_ConfigCmd+0x2b0>)
34017a68:	4013      	ands	r3, r2
34017a6a:	683a      	ldr	r2, [r7, #0]
34017a6c:	68d1      	ldr	r1, [r2, #12]
34017a6e:	683a      	ldr	r2, [r7, #0]
34017a70:	6952      	ldr	r2, [r2, #20]
34017a72:	4311      	orrs	r1, r2
34017a74:	683a      	ldr	r2, [r7, #0]
34017a76:	6912      	ldr	r2, [r2, #16]
34017a78:	4311      	orrs	r1, r2
34017a7a:	683a      	ldr	r2, [r7, #0]
34017a7c:	69d2      	ldr	r2, [r2, #28]
34017a7e:	4311      	orrs	r1, r2
34017a80:	683a      	ldr	r2, [r7, #0]
34017a82:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34017a84:	4311      	orrs	r1, r2
34017a86:	683a      	ldr	r2, [r7, #0]
34017a88:	6a12      	ldr	r2, [r2, #32]
34017a8a:	4311      	orrs	r1, r2
34017a8c:	683a      	ldr	r2, [r7, #0]
34017a8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34017a90:	4311      	orrs	r1, r2
34017a92:	683a      	ldr	r2, [r7, #0]
34017a94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34017a96:	430a      	orrs	r2, r1
34017a98:	431a      	orrs	r2, r3
34017a9a:	69bb      	ldr	r3, [r7, #24]
34017a9c:	601a      	str	r2, [r3, #0]
34017a9e:	e028      	b.n	34017af2 <XSPI_ConfigCmd+0x25e>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34017aa0:	69bb      	ldr	r3, [r7, #24]
34017aa2:	681b      	ldr	r3, [r3, #0]
34017aa4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
34017aa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
34017aac:	683a      	ldr	r2, [r7, #0]
34017aae:	68d1      	ldr	r1, [r2, #12]
34017ab0:	683a      	ldr	r2, [r7, #0]
34017ab2:	6952      	ldr	r2, [r2, #20]
34017ab4:	4311      	orrs	r1, r2
34017ab6:	683a      	ldr	r2, [r7, #0]
34017ab8:	6912      	ldr	r2, [r2, #16]
34017aba:	4311      	orrs	r1, r2
34017abc:	683a      	ldr	r2, [r7, #0]
34017abe:	69d2      	ldr	r2, [r2, #28]
34017ac0:	4311      	orrs	r1, r2
34017ac2:	683a      	ldr	r2, [r7, #0]
34017ac4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34017ac6:	4311      	orrs	r1, r2
34017ac8:	683a      	ldr	r2, [r7, #0]
34017aca:	6a12      	ldr	r2, [r2, #32]
34017acc:	430a      	orrs	r2, r1
34017ace:	431a      	orrs	r2, r3
34017ad0:	69bb      	ldr	r3, [r7, #24]
34017ad2:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017ad4:	687b      	ldr	r3, [r7, #4]
34017ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017ad8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34017adc:	d109      	bne.n	34017af2 <XSPI_ConfigCmd+0x25e>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
34017ade:	683b      	ldr	r3, [r7, #0]
34017ae0:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017ae2:	2b08      	cmp	r3, #8
34017ae4:	d105      	bne.n	34017af2 <XSPI_ConfigCmd+0x25e>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34017ae6:	69bb      	ldr	r3, [r7, #24]
34017ae8:	681b      	ldr	r3, [r3, #0]
34017aea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34017aee:	69bb      	ldr	r3, [r7, #24]
34017af0:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
34017af2:	683b      	ldr	r3, [r7, #0]
34017af4:	689a      	ldr	r2, [r3, #8]
34017af6:	693b      	ldr	r3, [r7, #16]
34017af8:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
34017afa:	687b      	ldr	r3, [r7, #4]
34017afc:	681b      	ldr	r3, [r3, #0]
34017afe:	683a      	ldr	r2, [r7, #0]
34017b00:	6992      	ldr	r2, [r2, #24]
34017b02:	649a      	str	r2, [r3, #72]	@ 0x48
34017b04:	e07d      	b.n	34017c02 <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34017b06:	683b      	ldr	r3, [r7, #0]
34017b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017b0a:	2b00      	cmp	r3, #0
34017b0c:	d01c      	beq.n	34017b48 <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
34017b0e:	69bb      	ldr	r3, [r7, #24]
34017b10:	681b      	ldr	r3, [r3, #0]
34017b12:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
34017b16:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
34017b1a:	683a      	ldr	r2, [r7, #0]
34017b1c:	68d1      	ldr	r1, [r2, #12]
34017b1e:	683a      	ldr	r2, [r7, #0]
34017b20:	6952      	ldr	r2, [r2, #20]
34017b22:	4311      	orrs	r1, r2
34017b24:	683a      	ldr	r2, [r7, #0]
34017b26:	6912      	ldr	r2, [r2, #16]
34017b28:	4311      	orrs	r1, r2
34017b2a:	683a      	ldr	r2, [r7, #0]
34017b2c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34017b2e:	4311      	orrs	r1, r2
34017b30:	683a      	ldr	r2, [r7, #0]
34017b32:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34017b34:	430a      	orrs	r2, r1
34017b36:	431a      	orrs	r2, r3
34017b38:	69bb      	ldr	r3, [r7, #24]
34017b3a:	601a      	str	r2, [r3, #0]
34017b3c:	e022      	b.n	34017b84 <XSPI_ConfigCmd+0x2f0>
34017b3e:	bf00      	nop
34017b40:	3401eb44 	.word	0x3401eb44
34017b44:	f0ffc0c0 	.word	0xf0ffc0c0
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
34017b48:	69bb      	ldr	r3, [r7, #24]
34017b4a:	681b      	ldr	r3, [r3, #0]
34017b4c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
34017b50:	683b      	ldr	r3, [r7, #0]
34017b52:	68d9      	ldr	r1, [r3, #12]
34017b54:	683b      	ldr	r3, [r7, #0]
34017b56:	695b      	ldr	r3, [r3, #20]
34017b58:	4319      	orrs	r1, r3
34017b5a:	683b      	ldr	r3, [r7, #0]
34017b5c:	691b      	ldr	r3, [r3, #16]
34017b5e:	430b      	orrs	r3, r1
34017b60:	431a      	orrs	r2, r3
34017b62:	69bb      	ldr	r3, [r7, #24]
34017b64:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017b66:	687b      	ldr	r3, [r7, #4]
34017b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34017b6e:	d109      	bne.n	34017b84 <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
34017b70:	683b      	ldr	r3, [r7, #0]
34017b72:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017b74:	2b08      	cmp	r3, #8
34017b76:	d105      	bne.n	34017b84 <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34017b78:	69bb      	ldr	r3, [r7, #24]
34017b7a:	681b      	ldr	r3, [r3, #0]
34017b7c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34017b80:	69bb      	ldr	r3, [r7, #24]
34017b82:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
34017b84:	683b      	ldr	r3, [r7, #0]
34017b86:	689a      	ldr	r2, [r3, #8]
34017b88:	693b      	ldr	r3, [r7, #16]
34017b8a:	601a      	str	r2, [r3, #0]
34017b8c:	e039      	b.n	34017c02 <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34017b8e:	683b      	ldr	r3, [r7, #0]
34017b90:	69db      	ldr	r3, [r3, #28]
34017b92:	2b00      	cmp	r3, #0
34017b94:	d030      	beq.n	34017bf8 <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34017b96:	683b      	ldr	r3, [r7, #0]
34017b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017b9a:	2b00      	cmp	r3, #0
34017b9c:	d017      	beq.n	34017bce <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
34017b9e:	69bb      	ldr	r3, [r7, #24]
34017ba0:	681b      	ldr	r3, [r3, #0]
34017ba2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
34017ba6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
34017baa:	683a      	ldr	r2, [r7, #0]
34017bac:	69d1      	ldr	r1, [r2, #28]
34017bae:	683a      	ldr	r2, [r7, #0]
34017bb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34017bb2:	4311      	orrs	r1, r2
34017bb4:	683a      	ldr	r2, [r7, #0]
34017bb6:	6a12      	ldr	r2, [r2, #32]
34017bb8:	4311      	orrs	r1, r2
34017bba:	683a      	ldr	r2, [r7, #0]
34017bbc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34017bbe:	4311      	orrs	r1, r2
34017bc0:	683a      	ldr	r2, [r7, #0]
34017bc2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34017bc4:	430a      	orrs	r2, r1
34017bc6:	431a      	orrs	r2, r3
34017bc8:	69bb      	ldr	r3, [r7, #24]
34017bca:	601a      	str	r2, [r3, #0]
34017bcc:	e00e      	b.n	34017bec <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
34017bce:	69bb      	ldr	r3, [r7, #24]
34017bd0:	681b      	ldr	r3, [r3, #0]
34017bd2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
34017bd6:	683b      	ldr	r3, [r7, #0]
34017bd8:	69d9      	ldr	r1, [r3, #28]
34017bda:	683b      	ldr	r3, [r7, #0]
34017bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34017bde:	4319      	orrs	r1, r3
34017be0:	683b      	ldr	r3, [r7, #0]
34017be2:	6a1b      	ldr	r3, [r3, #32]
34017be4:	430b      	orrs	r3, r1
34017be6:	431a      	orrs	r2, r3
34017be8:	69bb      	ldr	r3, [r7, #24]
34017bea:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
34017bec:	687b      	ldr	r3, [r7, #4]
34017bee:	681b      	ldr	r3, [r3, #0]
34017bf0:	683a      	ldr	r2, [r7, #0]
34017bf2:	6992      	ldr	r2, [r2, #24]
34017bf4:	649a      	str	r2, [r3, #72]	@ 0x48
34017bf6:	e004      	b.n	34017c02 <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
34017bf8:	2301      	movs	r3, #1
34017bfa:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
34017bfc:	687b      	ldr	r3, [r7, #4]
34017bfe:	2208      	movs	r2, #8
34017c00:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
34017c02:	7ffb      	ldrb	r3, [r7, #31]
}
34017c04:	4618      	mov	r0, r3
34017c06:	3720      	adds	r7, #32
34017c08:	46bd      	mov	sp, r7
34017c0a:	bd80      	pop	{r7, pc}

34017c0c <CMW_CAMERA_GetDCMIPPHandle>:
static void CMW_CAMERA_PwrDown(void);
static int32_t CMW_CAMERA_SetPipe(DCMIPP_HandleTypeDef *hdcmipp, uint32_t pipe, CMW_DCMIPP_Conf_t *p_conf, uint32_t *pitch);
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
34017c0c:	b480      	push	{r7}
34017c0e:	af00      	add	r7, sp, #0
    return &hcamera_dcmipp;
34017c10:	4b02      	ldr	r3, [pc, #8]	@ (34017c1c <CMW_CAMERA_GetDCMIPPHandle+0x10>)
}
34017c12:	4618      	mov	r0, r3
34017c14:	46bd      	mov	sp, r7
34017c16:	f85d 7b04 	ldr.w	r7, [sp], #4
34017c1a:	4770      	bx	lr
34017c1c:	34020ac4 	.word	0x34020ac4

34017c20 <CMW_CAMERA_PIPE_VsyncEventCallback>:
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
{
34017c20:	b480      	push	{r7}
34017c22:	b083      	sub	sp, #12
34017c24:	af00      	add	r7, sp, #0
34017c26:	6078      	str	r0, [r7, #4]
  UNUSED(pipe);

  return HAL_OK;
34017c28:	2300      	movs	r3, #0
}
34017c2a:	4618      	mov	r0, r3
34017c2c:	370c      	adds	r7, #12
34017c2e:	46bd      	mov	sp, r7
34017c30:	f85d 7b04 	ldr.w	r7, [sp], #4
34017c34:	4770      	bx	lr

34017c36 <CMW_CAMERA_PIPE_FrameEventCallback>:
 * @brief  Frame Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
34017c36:	b480      	push	{r7}
34017c38:	b083      	sub	sp, #12
34017c3a:	af00      	add	r7, sp, #0
34017c3c:	6078      	str	r0, [r7, #4]
  UNUSED(pipe);

  return HAL_OK;
34017c3e:	2300      	movs	r3, #0
}
34017c40:	4618      	mov	r0, r3
34017c42:	370c      	adds	r7, #12
34017c44:	46bd      	mov	sp, r7
34017c46:	f85d 7b04 	ldr.w	r7, [sp], #4
34017c4a:	4770      	bx	lr

34017c4c <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34017c4c:	b580      	push	{r7, lr}
34017c4e:	b082      	sub	sp, #8
34017c50:	af00      	add	r7, sp, #0
34017c52:	6078      	str	r0, [r7, #4]
34017c54:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
34017c56:	4b08      	ldr	r3, [pc, #32]	@ (34017c78 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>)
34017c58:	691b      	ldr	r3, [r3, #16]
34017c5a:	2b00      	cmp	r3, #0
34017c5c:	d004      	beq.n	34017c68 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
34017c5e:	4b06      	ldr	r3, [pc, #24]	@ (34017c78 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>)
34017c60:	691b      	ldr	r3, [r3, #16]
34017c62:	6839      	ldr	r1, [r7, #0]
34017c64:	4805      	ldr	r0, [pc, #20]	@ (34017c7c <HAL_DCMIPP_PIPE_VsyncEventCallback+0x30>)
34017c66:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
34017c68:	6838      	ldr	r0, [r7, #0]
34017c6a:	f7ff ffd9 	bl	34017c20 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
34017c6e:	bf00      	nop
34017c70:	3708      	adds	r7, #8
34017c72:	46bd      	mov	sp, r7
34017c74:	bd80      	pop	{r7, pc}
34017c76:	bf00      	nop
34017c78:	34020ad0 	.word	0x34020ad0
34017c7c:	34020b38 	.word	0x34020b38

34017c80 <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34017c80:	b580      	push	{r7, lr}
34017c82:	b082      	sub	sp, #8
34017c84:	af00      	add	r7, sp, #0
34017c86:	6078      	str	r0, [r7, #4]
34017c88:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
34017c8a:	4b08      	ldr	r3, [pc, #32]	@ (34017cac <HAL_DCMIPP_PIPE_FrameEventCallback+0x2c>)
34017c8c:	695b      	ldr	r3, [r3, #20]
34017c8e:	2b00      	cmp	r3, #0
34017c90:	d004      	beq.n	34017c9c <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
34017c92:	4b06      	ldr	r3, [pc, #24]	@ (34017cac <HAL_DCMIPP_PIPE_FrameEventCallback+0x2c>)
34017c94:	695b      	ldr	r3, [r3, #20]
34017c96:	6839      	ldr	r1, [r7, #0]
34017c98:	4805      	ldr	r0, [pc, #20]	@ (34017cb0 <HAL_DCMIPP_PIPE_FrameEventCallback+0x30>)
34017c9a:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
34017c9c:	6838      	ldr	r0, [r7, #0]
34017c9e:	f7ff ffca 	bl	34017c36 <CMW_CAMERA_PIPE_FrameEventCallback>
}
34017ca2:	bf00      	nop
34017ca4:	3708      	adds	r7, #8
34017ca6:	46bd      	mov	sp, r7
34017ca8:	bd80      	pop	{r7, pc}
34017caa:	bf00      	nop
34017cac:	34020ad0 	.word	0x34020ad0
34017cb0:	34020b38 	.word	0x34020b38

34017cb4 <DMA2D_IRQHandler>:
                                   ctx->layers[0].size.height);
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
34017cb4:	b580      	push	{r7, lr}
34017cb6:	af00      	add	r7, sp, #0
  HAL_DMA2D_IRQHandler(dma2d_current);
34017cb8:	4b03      	ldr	r3, [pc, #12]	@ (34017cc8 <DMA2D_IRQHandler+0x14>)
34017cba:	681b      	ldr	r3, [r3, #0]
34017cbc:	4618      	mov	r0, r3
34017cbe:	f7ed fcca 	bl	34005656 <HAL_DMA2D_IRQHandler>
}
34017cc2:	bf00      	nop
34017cc4:	bd80      	pop	{r7, pc}
34017cc6:	bf00      	nop
34017cc8:	34020c7c 	.word	0x34020c7c

34017ccc <spi_transfert_data_deinit>:
  ctx->len = w * h * 2;
  LCD_CS_LOW();
}

static void spi_transfert_data_deinit(struct scrl_spi_ctx *ctx)
{
34017ccc:	b480      	push	{r7}
34017cce:	b083      	sub	sp, #12
34017cd0:	af00      	add	r7, sp, #0
34017cd2:	6078      	str	r0, [r7, #4]
  LCD_CS_HIGH();
34017cd4:	4b04      	ldr	r3, [pc, #16]	@ (34017ce8 <spi_transfert_data_deinit+0x1c>)
34017cd6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34017cda:	619a      	str	r2, [r3, #24]
}
34017cdc:	bf00      	nop
34017cde:	370c      	adds	r7, #12
34017ce0:	46bd      	mov	sp, r7
34017ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
34017ce6:	4770      	bx	lr
34017ce8:	56020c00 	.word	0x56020c00

34017cec <spi_transfert_data_chunck_start>:

static void spi_transfert_data_chunck_start(struct scrl_spi_ctx *ctx)
{
34017cec:	b580      	push	{r7, lr}
34017cee:	b084      	sub	sp, #16
34017cf0:	af00      	add	r7, sp, #0
34017cf2:	6078      	str	r0, [r7, #4]
  uint16_t size = MIN(ctx->len, 63 * 1024);
34017cf4:	687b      	ldr	r3, [r7, #4]
34017cf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34017cfa:	f5b3 4f7c 	cmp.w	r3, #64512	@ 0xfc00
34017cfe:	bfa8      	it	ge
34017d00:	f44f 437c 	movge.w	r3, #64512	@ 0xfc00
34017d04:	81fb      	strh	r3, [r7, #14]
  int ret;

  ret = HAL_SPI_Transmit_DMA(&hspi, ctx->data, size);
34017d06:	687b      	ldr	r3, [r7, #4]
34017d08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34017d0c:	89fa      	ldrh	r2, [r7, #14]
34017d0e:	4619      	mov	r1, r3
34017d10:	4810      	ldr	r0, [pc, #64]	@ (34017d54 <spi_transfert_data_chunck_start+0x68>)
34017d12:	f7fd f893 	bl	34014e3c <HAL_SPI_Transmit_DMA>
34017d16:	4603      	mov	r3, r0
34017d18:	60bb      	str	r3, [r7, #8]
  assert(ret == HAL_OK);
34017d1a:	68bb      	ldr	r3, [r7, #8]
34017d1c:	2b00      	cmp	r3, #0
34017d1e:	d005      	beq.n	34017d2c <spi_transfert_data_chunck_start+0x40>
34017d20:	4b0d      	ldr	r3, [pc, #52]	@ (34017d58 <spi_transfert_data_chunck_start+0x6c>)
34017d22:	4a0e      	ldr	r2, [pc, #56]	@ (34017d5c <spi_transfert_data_chunck_start+0x70>)
34017d24:	219e      	movs	r1, #158	@ 0x9e
34017d26:	480e      	ldr	r0, [pc, #56]	@ (34017d60 <spi_transfert_data_chunck_start+0x74>)
34017d28:	f003 faba 	bl	3401b2a0 <__assert_func>

  ctx->len -= size;
34017d2c:	687b      	ldr	r3, [r7, #4]
34017d2e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34017d32:	89fb      	ldrh	r3, [r7, #14]
34017d34:	1ad2      	subs	r2, r2, r3
34017d36:	687b      	ldr	r3, [r7, #4]
34017d38:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ctx->data += size;
34017d3c:	687b      	ldr	r3, [r7, #4]
34017d3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34017d42:	89fb      	ldrh	r3, [r7, #14]
34017d44:	441a      	add	r2, r3
34017d46:	687b      	ldr	r3, [r7, #4]
34017d48:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
34017d4c:	bf00      	nop
34017d4e:	3710      	adds	r7, #16
34017d50:	46bd      	mov	sp, r7
34017d52:	bd80      	pop	{r7, pc}
34017d54:	34020d38 	.word	0x34020d38
34017d58:	3401ebf0 	.word	0x3401ebf0
34017d5c:	3401fa64 	.word	0x3401fa64
34017d60:	3401ec00 	.word	0x3401ec00

34017d64 <HAL_SPI_TxCpltCallback>:
  ret = xSemaphoreGive(ctx->dma_sem);
  assert(ret == pdTRUE);
}
#else
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
34017d64:	b580      	push	{r7, lr}
34017d66:	b084      	sub	sp, #16
34017d68:	af00      	add	r7, sp, #0
34017d6a:	6078      	str	r0, [r7, #4]
  struct scrl_spi_ctx *ctx = &scrl_ctx;
34017d6c:	4b0a      	ldr	r3, [pc, #40]	@ (34017d98 <HAL_SPI_TxCpltCallback+0x34>)
34017d6e:	60fb      	str	r3, [r7, #12]

  if (ctx->len) {
34017d70:	68fb      	ldr	r3, [r7, #12]
34017d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34017d76:	2b00      	cmp	r3, #0
34017d78:	d003      	beq.n	34017d82 <HAL_SPI_TxCpltCallback+0x1e>
    spi_transfert_data_chunck_start(ctx);
34017d7a:	68f8      	ldr	r0, [r7, #12]
34017d7c:	f7ff ffb6 	bl	34017cec <spi_transfert_data_chunck_start>
  } else {
    spi_transfert_data_deinit(ctx);
    ctx->is_screen_ready_to_update = 1;
  }
}
34017d80:	e006      	b.n	34017d90 <HAL_SPI_TxCpltCallback+0x2c>
    spi_transfert_data_deinit(ctx);
34017d82:	68f8      	ldr	r0, [r7, #12]
34017d84:	f7ff ffa2 	bl	34017ccc <spi_transfert_data_deinit>
    ctx->is_screen_ready_to_update = 1;
34017d88:	68fb      	ldr	r3, [r7, #12]
34017d8a:	2201      	movs	r2, #1
34017d8c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
34017d90:	bf00      	nop
34017d92:	3710      	adds	r7, #16
34017d94:	46bd      	mov	sp, r7
34017d96:	bd80      	pop	{r7, pc}
34017d98:	34020c80 	.word	0x34020c80

34017d9c <HAL_SPI_ErrorCallback>:
#endif

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
34017d9c:	b580      	push	{r7, lr}
34017d9e:	b082      	sub	sp, #8
34017da0:	af00      	add	r7, sp, #0
34017da2:	6078      	str	r0, [r7, #4]
  assert(0);
34017da4:	4b03      	ldr	r3, [pc, #12]	@ (34017db4 <HAL_SPI_ErrorCallback+0x18>)
34017da6:	4a04      	ldr	r2, [pc, #16]	@ (34017db8 <HAL_SPI_ErrorCallback+0x1c>)
34017da8:	f44f 7123 	mov.w	r1, #652	@ 0x28c
34017dac:	4803      	ldr	r0, [pc, #12]	@ (34017dbc <HAL_SPI_ErrorCallback+0x20>)
34017dae:	f003 fa77 	bl	3401b2a0 <__assert_func>
34017db2:	bf00      	nop
34017db4:	3401ec88 	.word	0x3401ec88
34017db8:	3401fa84 	.word	0x3401fa84
34017dbc:	3401ec00 	.word	0x3401ec00

34017dc0 <SPI5_IRQHandler>:
}

void SPI5_IRQHandler(void)
{
34017dc0:	b580      	push	{r7, lr}
34017dc2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
34017dc4:	4802      	ldr	r0, [pc, #8]	@ (34017dd0 <SPI5_IRQHandler+0x10>)
34017dc6:	f7fd fa17 	bl	340151f8 <HAL_SPI_IRQHandler>
}
34017dca:	bf00      	nop
34017dcc:	bd80      	pop	{r7, pc}
34017dce:	bf00      	nop
34017dd0:	34020d38 	.word	0x34020d38

34017dd4 <HPDMA1_Channel12_IRQHandler>:

void HPDMA1_Channel12_IRQHandler(void)
{
34017dd4:	b580      	push	{r7, lr}
34017dd6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma);
34017dd8:	4802      	ldr	r0, [pc, #8]	@ (34017de4 <HPDMA1_Channel12_IRQHandler+0x10>)
34017dda:	f7ed faa2 	bl	34005322 <HAL_DMA_IRQHandler>
}
34017dde:	bf00      	nop
34017de0:	bd80      	pop	{r7, pc}
34017de2:	bf00      	nop
34017de4:	34020dc8 	.word	0x34020dc8

34017de8 <LL_Streng_len>:
  {
    return conf->addr_base.p + conf->offset_limit;
  }

  static inline uint32_t LL_Streng_len(const LL_Streng_TensorInitTypeDef *conf)
  {
34017de8:	b480      	push	{r7}
34017dea:	b083      	sub	sp, #12
34017dec:	af00      	add	r7, sp, #0
34017dee:	6078      	str	r0, [r7, #4]
    return conf->offset_end - conf->offset_start;
34017df0:	687b      	ldr	r3, [r7, #4]
34017df2:	68da      	ldr	r2, [r3, #12]
34017df4:	687b      	ldr	r3, [r7, #4]
34017df6:	689b      	ldr	r3, [r3, #8]
34017df8:	1ad3      	subs	r3, r2, r3
  }
34017dfa:	4618      	mov	r0, r3
34017dfc:	370c      	adds	r7, #12
34017dfe:	46bd      	mov	sp, r7
34017e00:	f85d 7b04 	ldr.w	r7, [sp], #4
34017e04:	4770      	bx	lr
	...

34017e08 <ll_aton_static_checks>:
 *  Used to exit from LL_Streng_Wait() in case epoch locks
 * @{
 */

static inline void ll_aton_static_checks(void)
{
34017e08:	b580      	push	{r7, lr}
34017e0a:	b082      	sub	sp, #8
34017e0c:	af02      	add	r7, sp, #8
  static char done = 0;

  if (done != 0)
34017e0e:	4b27      	ldr	r3, [pc, #156]	@ (34017eac <ll_aton_static_checks+0xa4>)
34017e10:	781b      	ldrb	r3, [r3, #0]
34017e12:	2b00      	cmp	r3, #0
34017e14:	d146      	bne.n	34017ea4 <ll_aton_static_checks+0x9c>
    return;
  done = 1;
34017e16:	4b25      	ldr	r3, [pc, #148]	@ (34017eac <ll_aton_static_checks+0xa4>)
34017e18:	2201      	movs	r2, #1
34017e1a:	701a      	strb	r2, [r3, #0]
  LL_ATON_ASSERT(ATONN_CONST_SRCPORT(S, J, U, I, P) == __atonn_getSrcPortID(S, J, U, I, P))
#define ASSERT_ATONN_DSTPORT(S, J, U, I, P)                                                                            \
  LL_ATON_ASSERT(ATONN_CONST_DSTPORT(S, J, U, I, P) == __atonn_getDstPortID(S, J, U, I, P))

#if ATON_STRENG_NUM > 1
  ASSERT_ATONN_SRCPORT(STRSWITCH, 0, STRENG, 1, 0);
34017e1c:	2300      	movs	r3, #0
34017e1e:	9300      	str	r3, [sp, #0]
34017e20:	2301      	movs	r3, #1
34017e22:	2200      	movs	r2, #0
34017e24:	2100      	movs	r1, #0
34017e26:	2000      	movs	r0, #0
34017e28:	f001 fa56 	bl	340192d8 <__atonn_getSrcPortID>
34017e2c:	4603      	mov	r3, r0
34017e2e:	2b01      	cmp	r3, #1
34017e30:	d005      	beq.n	34017e3e <ll_aton_static_checks+0x36>
34017e32:	4b1f      	ldr	r3, [pc, #124]	@ (34017eb0 <ll_aton_static_checks+0xa8>)
34017e34:	4a1f      	ldr	r2, [pc, #124]	@ (34017eb4 <ll_aton_static_checks+0xac>)
34017e36:	214c      	movs	r1, #76	@ 0x4c
34017e38:	481f      	ldr	r0, [pc, #124]	@ (34017eb8 <ll_aton_static_checks+0xb0>)
34017e3a:	f003 fa31 	bl	3401b2a0 <__assert_func>
  ASSERT_ATONN_DSTPORT(STRSWITCH, 0, STRENG, 1, 0);
34017e3e:	2300      	movs	r3, #0
34017e40:	9300      	str	r3, [sp, #0]
34017e42:	2301      	movs	r3, #1
34017e44:	2200      	movs	r2, #0
34017e46:	2100      	movs	r1, #0
34017e48:	2000      	movs	r0, #0
34017e4a:	f001 fb35 	bl	340194b8 <__atonn_getDstPortID>
34017e4e:	4603      	mov	r3, r0
34017e50:	2b0c      	cmp	r3, #12
34017e52:	d005      	beq.n	34017e60 <ll_aton_static_checks+0x58>
34017e54:	4b19      	ldr	r3, [pc, #100]	@ (34017ebc <ll_aton_static_checks+0xb4>)
34017e56:	4a17      	ldr	r2, [pc, #92]	@ (34017eb4 <ll_aton_static_checks+0xac>)
34017e58:	214d      	movs	r1, #77	@ 0x4d
34017e5a:	4817      	ldr	r0, [pc, #92]	@ (34017eb8 <ll_aton_static_checks+0xb0>)
34017e5c:	f003 fa20 	bl	3401b2a0 <__assert_func>
#endif
#if ATON_STRENG_NUM > 2
  ASSERT_ATONN_SRCPORT(STRSWITCH, 0, STRENG, 2, 0);
34017e60:	2300      	movs	r3, #0
34017e62:	9300      	str	r3, [sp, #0]
34017e64:	2302      	movs	r3, #2
34017e66:	2200      	movs	r2, #0
34017e68:	2100      	movs	r1, #0
34017e6a:	2000      	movs	r0, #0
34017e6c:	f001 fa34 	bl	340192d8 <__atonn_getSrcPortID>
34017e70:	4603      	mov	r3, r0
34017e72:	2b02      	cmp	r3, #2
34017e74:	d005      	beq.n	34017e82 <ll_aton_static_checks+0x7a>
34017e76:	4b12      	ldr	r3, [pc, #72]	@ (34017ec0 <ll_aton_static_checks+0xb8>)
34017e78:	4a0e      	ldr	r2, [pc, #56]	@ (34017eb4 <ll_aton_static_checks+0xac>)
34017e7a:	2150      	movs	r1, #80	@ 0x50
34017e7c:	480e      	ldr	r0, [pc, #56]	@ (34017eb8 <ll_aton_static_checks+0xb0>)
34017e7e:	f003 fa0f 	bl	3401b2a0 <__assert_func>
  ASSERT_ATONN_DSTPORT(STRSWITCH, 0, STRENG, 2, 0);
34017e82:	2300      	movs	r3, #0
34017e84:	9300      	str	r3, [sp, #0]
34017e86:	2302      	movs	r3, #2
34017e88:	2200      	movs	r2, #0
34017e8a:	2100      	movs	r1, #0
34017e8c:	2000      	movs	r0, #0
34017e8e:	f001 fb13 	bl	340194b8 <__atonn_getDstPortID>
34017e92:	4603      	mov	r3, r0
34017e94:	2b10      	cmp	r3, #16
34017e96:	d006      	beq.n	34017ea6 <ll_aton_static_checks+0x9e>
34017e98:	4b0a      	ldr	r3, [pc, #40]	@ (34017ec4 <ll_aton_static_checks+0xbc>)
34017e9a:	4a06      	ldr	r2, [pc, #24]	@ (34017eb4 <ll_aton_static_checks+0xac>)
34017e9c:	2151      	movs	r1, #81	@ 0x51
34017e9e:	4806      	ldr	r0, [pc, #24]	@ (34017eb8 <ll_aton_static_checks+0xb0>)
34017ea0:	f003 f9fe 	bl	3401b2a0 <__assert_func>
    return;
34017ea4:	bf00      	nop

#endif // (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)

#undef ASSERT_ATONN_SRCPORT
#undef ASSERT_ATONN_DSTPORT
}
34017ea6:	46bd      	mov	sp, r7
34017ea8:	bd80      	pop	{r7, pc}
34017eaa:	bf00      	nop
34017eac:	34020e50 	.word	0x34020e50
34017eb0:	3401ec98 	.word	0x3401ec98
34017eb4:	3401faac 	.word	0x3401faac
34017eb8:	3401ecd4 	.word	0x3401ecd4
34017ebc:	3401ed64 	.word	0x3401ed64
34017ec0:	3401edb0 	.word	0x3401edb0
34017ec4:	3401edec 	.word	0x3401edec

34017ec8 <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
34017ec8:	b590      	push	{r4, r7, lr}
34017eca:	b08b      	sub	sp, #44	@ 0x2c
34017ecc:	af08      	add	r7, sp, #32
  uint32_t t;
  int i;

  ll_aton_static_checks();
34017ece:	f7ff ff9b 	bl	34017e08 <ll_aton_static_checks>

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
34017ed2:	4b97      	ldr	r3, [pc, #604]	@ (34018130 <LL_ATON_Init+0x268>)
34017ed4:	681b      	ldr	r3, [r3, #0]
34017ed6:	607b      	str	r3, [r7, #4]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
34017ed8:	687b      	ldr	r3, [r7, #4]
34017eda:	f043 0302 	orr.w	r3, r3, #2
34017ede:	607b      	str	r3, [r7, #4]
  ATON_CLKCTRL_CTRL_SET(0, t);
34017ee0:	4a93      	ldr	r2, [pc, #588]	@ (34018130 <LL_ATON_Init+0x268>)
34017ee2:	687b      	ldr	r3, [r7, #4]
34017ee4:	6013      	str	r3, [r2, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
34017ee6:	4b92      	ldr	r3, [pc, #584]	@ (34018130 <LL_ATON_Init+0x268>)
34017ee8:	2201      	movs	r2, #1
34017eea:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
34017eec:	4b91      	ldr	r3, [pc, #580]	@ (34018134 <LL_ATON_Init+0x26c>)
34017eee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34017ef2:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
34017ef4:	4b90      	ldr	r3, [pc, #576]	@ (34018138 <LL_ATON_Init+0x270>)
34017ef6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34017efa:	601a      	str	r2, [r3, #0]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
34017efc:	4b8f      	ldr	r3, [pc, #572]	@ (3401813c <LL_ATON_Init+0x274>)
34017efe:	2200      	movs	r2, #0
34017f00:	601a      	str	r2, [r3, #0]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
34017f02:	4b8f      	ldr	r3, [pc, #572]	@ (34018140 <LL_ATON_Init+0x278>)
34017f04:	681b      	ldr	r3, [r3, #0]
34017f06:	607b      	str	r3, [r7, #4]
34017f08:	687b      	ldr	r3, [r7, #4]
34017f0a:	2b00      	cmp	r3, #0
34017f0c:	d0f9      	beq.n	34017f02 <LL_ATON_Init+0x3a>
34017f0e:	687b      	ldr	r3, [r7, #4]
34017f10:	b2db      	uxtb	r3, r3
34017f12:	2b01      	cmp	r3, #1
34017f14:	d10a      	bne.n	34017f2c <LL_ATON_Init+0x64>
34017f16:	687b      	ldr	r3, [r7, #4]
34017f18:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34017f1c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34017f20:	d104      	bne.n	34017f2c <LL_ATON_Init+0x64>
34017f22:	687b      	ldr	r3, [r7, #4]
34017f24:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34017f28:	2b00      	cmp	r3, #0
34017f2a:	d02f      	beq.n	34017f8c <LL_ATON_Init+0xc4>
34017f2c:	f004 fbf6 	bl	3401c71c <__errno>
34017f30:	4603      	mov	r3, r0
34017f32:	681b      	ldr	r3, [r3, #0]
34017f34:	2b00      	cmp	r3, #0
34017f36:	d008      	beq.n	34017f4a <LL_ATON_Init+0x82>
34017f38:	f004 fbf0 	bl	3401c71c <__errno>
34017f3c:	4603      	mov	r3, r0
34017f3e:	681b      	ldr	r3, [r3, #0]
34017f40:	4618      	mov	r0, r3
34017f42:	f004 fb85 	bl	3401c650 <strerror>
34017f46:	4603      	mov	r3, r0
34017f48:	e000      	b.n	34017f4c <LL_ATON_Init+0x84>
34017f4a:	4b7e      	ldr	r3, [pc, #504]	@ (34018144 <LL_ATON_Init+0x27c>)
34017f4c:	687a      	ldr	r2, [r7, #4]
34017f4e:	b2d2      	uxtb	r2, r2
34017f50:	6879      	ldr	r1, [r7, #4]
34017f52:	0b09      	lsrs	r1, r1, #12
34017f54:	f001 010f 	and.w	r1, r1, #15
34017f58:	6878      	ldr	r0, [r7, #4]
34017f5a:	0a00      	lsrs	r0, r0, #8
34017f5c:	f000 000f 	and.w	r0, r0, #15
34017f60:	2400      	movs	r4, #0
34017f62:	9406      	str	r4, [sp, #24]
34017f64:	2405      	movs	r4, #5
34017f66:	9405      	str	r4, [sp, #20]
34017f68:	2401      	movs	r4, #1
34017f6a:	9404      	str	r4, [sp, #16]
34017f6c:	9003      	str	r0, [sp, #12]
34017f6e:	9102      	str	r1, [sp, #8]
34017f70:	9201      	str	r2, [sp, #4]
34017f72:	4a75      	ldr	r2, [pc, #468]	@ (34018148 <LL_ATON_Init+0x280>)
34017f74:	9200      	str	r2, [sp, #0]
34017f76:	22c7      	movs	r2, #199	@ 0xc7
34017f78:	4974      	ldr	r1, [pc, #464]	@ (3401814c <LL_ATON_Init+0x284>)
34017f7a:	4875      	ldr	r0, [pc, #468]	@ (34018150 <LL_ATON_Init+0x288>)
34017f7c:	f004 f832 	bl	3401bfe4 <iprintf>
34017f80:	4b74      	ldr	r3, [pc, #464]	@ (34018154 <LL_ATON_Init+0x28c>)
34017f82:	4a75      	ldr	r2, [pc, #468]	@ (34018158 <LL_ATON_Init+0x290>)
34017f84:	21c7      	movs	r1, #199	@ 0xc7
34017f86:	4871      	ldr	r0, [pc, #452]	@ (3401814c <LL_ATON_Init+0x284>)
34017f88:	f003 f98a 	bl	3401b2a0 <__assert_func>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
34017f8c:	4b73      	ldr	r3, [pc, #460]	@ (3401815c <LL_ATON_Init+0x294>)
34017f8e:	681b      	ldr	r3, [r3, #0]
34017f90:	607b      	str	r3, [r7, #4]
34017f92:	687b      	ldr	r3, [r7, #4]
34017f94:	2b00      	cmp	r3, #0
34017f96:	d0f9      	beq.n	34017f8c <LL_ATON_Init+0xc4>
34017f98:	687b      	ldr	r3, [r7, #4]
34017f9a:	b2db      	uxtb	r3, r3
34017f9c:	2b17      	cmp	r3, #23
34017f9e:	d10b      	bne.n	34017fb8 <LL_ATON_Init+0xf0>
34017fa0:	687b      	ldr	r3, [r7, #4]
34017fa2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34017fa6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34017faa:	d105      	bne.n	34017fb8 <LL_ATON_Init+0xf0>
34017fac:	687b      	ldr	r3, [r7, #4]
34017fae:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34017fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34017fb6:	d02f      	beq.n	34018018 <LL_ATON_Init+0x150>
34017fb8:	f004 fbb0 	bl	3401c71c <__errno>
34017fbc:	4603      	mov	r3, r0
34017fbe:	681b      	ldr	r3, [r3, #0]
34017fc0:	2b00      	cmp	r3, #0
34017fc2:	d008      	beq.n	34017fd6 <LL_ATON_Init+0x10e>
34017fc4:	f004 fbaa 	bl	3401c71c <__errno>
34017fc8:	4603      	mov	r3, r0
34017fca:	681b      	ldr	r3, [r3, #0]
34017fcc:	4618      	mov	r0, r3
34017fce:	f004 fb3f 	bl	3401c650 <strerror>
34017fd2:	4603      	mov	r3, r0
34017fd4:	e000      	b.n	34017fd8 <LL_ATON_Init+0x110>
34017fd6:	4b5b      	ldr	r3, [pc, #364]	@ (34018144 <LL_ATON_Init+0x27c>)
34017fd8:	687a      	ldr	r2, [r7, #4]
34017fda:	b2d2      	uxtb	r2, r2
34017fdc:	6879      	ldr	r1, [r7, #4]
34017fde:	0b09      	lsrs	r1, r1, #12
34017fe0:	f001 010f 	and.w	r1, r1, #15
34017fe4:	6878      	ldr	r0, [r7, #4]
34017fe6:	0a00      	lsrs	r0, r0, #8
34017fe8:	f000 000f 	and.w	r0, r0, #15
34017fec:	2401      	movs	r4, #1
34017fee:	9406      	str	r4, [sp, #24]
34017ff0:	2405      	movs	r4, #5
34017ff2:	9405      	str	r4, [sp, #20]
34017ff4:	2417      	movs	r4, #23
34017ff6:	9404      	str	r4, [sp, #16]
34017ff8:	9003      	str	r0, [sp, #12]
34017ffa:	9102      	str	r1, [sp, #8]
34017ffc:	9201      	str	r2, [sp, #4]
34017ffe:	4a58      	ldr	r2, [pc, #352]	@ (34018160 <LL_ATON_Init+0x298>)
34018000:	9200      	str	r2, [sp, #0]
34018002:	22ca      	movs	r2, #202	@ 0xca
34018004:	4951      	ldr	r1, [pc, #324]	@ (3401814c <LL_ATON_Init+0x284>)
34018006:	4852      	ldr	r0, [pc, #328]	@ (34018150 <LL_ATON_Init+0x288>)
34018008:	f003 ffec 	bl	3401bfe4 <iprintf>
3401800c:	4b51      	ldr	r3, [pc, #324]	@ (34018154 <LL_ATON_Init+0x28c>)
3401800e:	4a52      	ldr	r2, [pc, #328]	@ (34018158 <LL_ATON_Init+0x290>)
34018010:	21ca      	movs	r1, #202	@ 0xca
34018012:	484e      	ldr	r0, [pc, #312]	@ (3401814c <LL_ATON_Init+0x284>)
34018014:	f003 f944 	bl	3401b2a0 <__assert_func>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
34018018:	4b52      	ldr	r3, [pc, #328]	@ (34018164 <LL_ATON_Init+0x29c>)
3401801a:	681b      	ldr	r3, [r3, #0]
3401801c:	607b      	str	r3, [r7, #4]
3401801e:	687b      	ldr	r3, [r7, #4]
34018020:	2b00      	cmp	r3, #0
34018022:	d0f9      	beq.n	34018018 <LL_ATON_Init+0x150>
34018024:	687b      	ldr	r3, [r7, #4]
34018026:	b2db      	uxtb	r3, r3
34018028:	2b1c      	cmp	r3, #28
3401802a:	d10b      	bne.n	34018044 <LL_ATON_Init+0x17c>
3401802c:	687b      	ldr	r3, [r7, #4]
3401802e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34018032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34018036:	d105      	bne.n	34018044 <LL_ATON_Init+0x17c>
34018038:	687b      	ldr	r3, [r7, #4]
3401803a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401803e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34018042:	d02f      	beq.n	340180a4 <LL_ATON_Init+0x1dc>
34018044:	f004 fb6a 	bl	3401c71c <__errno>
34018048:	4603      	mov	r3, r0
3401804a:	681b      	ldr	r3, [r3, #0]
3401804c:	2b00      	cmp	r3, #0
3401804e:	d008      	beq.n	34018062 <LL_ATON_Init+0x19a>
34018050:	f004 fb64 	bl	3401c71c <__errno>
34018054:	4603      	mov	r3, r0
34018056:	681b      	ldr	r3, [r3, #0]
34018058:	4618      	mov	r0, r3
3401805a:	f004 faf9 	bl	3401c650 <strerror>
3401805e:	4603      	mov	r3, r0
34018060:	e000      	b.n	34018064 <LL_ATON_Init+0x19c>
34018062:	4b38      	ldr	r3, [pc, #224]	@ (34018144 <LL_ATON_Init+0x27c>)
34018064:	687a      	ldr	r2, [r7, #4]
34018066:	b2d2      	uxtb	r2, r2
34018068:	6879      	ldr	r1, [r7, #4]
3401806a:	0b09      	lsrs	r1, r1, #12
3401806c:	f001 010f 	and.w	r1, r1, #15
34018070:	6878      	ldr	r0, [r7, #4]
34018072:	0a00      	lsrs	r0, r0, #8
34018074:	f000 000f 	and.w	r0, r0, #15
34018078:	2401      	movs	r4, #1
3401807a:	9406      	str	r4, [sp, #24]
3401807c:	2401      	movs	r4, #1
3401807e:	9405      	str	r4, [sp, #20]
34018080:	241c      	movs	r4, #28
34018082:	9404      	str	r4, [sp, #16]
34018084:	9003      	str	r0, [sp, #12]
34018086:	9102      	str	r1, [sp, #8]
34018088:	9201      	str	r2, [sp, #4]
3401808a:	4a37      	ldr	r2, [pc, #220]	@ (34018168 <LL_ATON_Init+0x2a0>)
3401808c:	9200      	str	r2, [sp, #0]
3401808e:	22ce      	movs	r2, #206	@ 0xce
34018090:	492e      	ldr	r1, [pc, #184]	@ (3401814c <LL_ATON_Init+0x284>)
34018092:	482f      	ldr	r0, [pc, #188]	@ (34018150 <LL_ATON_Init+0x288>)
34018094:	f003 ffa6 	bl	3401bfe4 <iprintf>
34018098:	4b2e      	ldr	r3, [pc, #184]	@ (34018154 <LL_ATON_Init+0x28c>)
3401809a:	4a2f      	ldr	r2, [pc, #188]	@ (34018158 <LL_ATON_Init+0x290>)
3401809c:	21ce      	movs	r1, #206	@ 0xce
3401809e:	482b      	ldr	r0, [pc, #172]	@ (3401814c <LL_ATON_Init+0x284>)
340180a0:	f003 f8fe 	bl	3401b2a0 <__assert_func>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
340180a4:	4b31      	ldr	r3, [pc, #196]	@ (3401816c <LL_ATON_Init+0x2a4>)
340180a6:	681b      	ldr	r3, [r3, #0]
340180a8:	607b      	str	r3, [r7, #4]
340180aa:	687b      	ldr	r3, [r7, #4]
340180ac:	2b00      	cmp	r3, #0
340180ae:	d0f9      	beq.n	340180a4 <LL_ATON_Init+0x1dc>
340180b0:	687b      	ldr	r3, [r7, #4]
340180b2:	b2db      	uxtb	r3, r3
340180b4:	2b1a      	cmp	r3, #26
340180b6:	d10a      	bne.n	340180ce <LL_ATON_Init+0x206>
340180b8:	687b      	ldr	r3, [r7, #4]
340180ba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
340180be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340180c2:	d104      	bne.n	340180ce <LL_ATON_Init+0x206>
340180c4:	687b      	ldr	r3, [r7, #4]
340180c6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
340180ca:	2b00      	cmp	r3, #0
340180cc:	d052      	beq.n	34018174 <LL_ATON_Init+0x2ac>
340180ce:	f004 fb25 	bl	3401c71c <__errno>
340180d2:	4603      	mov	r3, r0
340180d4:	681b      	ldr	r3, [r3, #0]
340180d6:	2b00      	cmp	r3, #0
340180d8:	d008      	beq.n	340180ec <LL_ATON_Init+0x224>
340180da:	f004 fb1f 	bl	3401c71c <__errno>
340180de:	4603      	mov	r3, r0
340180e0:	681b      	ldr	r3, [r3, #0]
340180e2:	4618      	mov	r0, r3
340180e4:	f004 fab4 	bl	3401c650 <strerror>
340180e8:	4603      	mov	r3, r0
340180ea:	e000      	b.n	340180ee <LL_ATON_Init+0x226>
340180ec:	4b15      	ldr	r3, [pc, #84]	@ (34018144 <LL_ATON_Init+0x27c>)
340180ee:	687a      	ldr	r2, [r7, #4]
340180f0:	b2d2      	uxtb	r2, r2
340180f2:	6879      	ldr	r1, [r7, #4]
340180f4:	0b09      	lsrs	r1, r1, #12
340180f6:	f001 010f 	and.w	r1, r1, #15
340180fa:	6878      	ldr	r0, [r7, #4]
340180fc:	0a00      	lsrs	r0, r0, #8
340180fe:	f000 000f 	and.w	r0, r0, #15
34018102:	2400      	movs	r4, #0
34018104:	9406      	str	r4, [sp, #24]
34018106:	2401      	movs	r4, #1
34018108:	9405      	str	r4, [sp, #20]
3401810a:	241a      	movs	r4, #26
3401810c:	9404      	str	r4, [sp, #16]
3401810e:	9003      	str	r0, [sp, #12]
34018110:	9102      	str	r1, [sp, #8]
34018112:	9201      	str	r2, [sp, #4]
34018114:	4a16      	ldr	r2, [pc, #88]	@ (34018170 <LL_ATON_Init+0x2a8>)
34018116:	9200      	str	r2, [sp, #0]
34018118:	22d2      	movs	r2, #210	@ 0xd2
3401811a:	490c      	ldr	r1, [pc, #48]	@ (3401814c <LL_ATON_Init+0x284>)
3401811c:	480c      	ldr	r0, [pc, #48]	@ (34018150 <LL_ATON_Init+0x288>)
3401811e:	f003 ff61 	bl	3401bfe4 <iprintf>
34018122:	4b0c      	ldr	r3, [pc, #48]	@ (34018154 <LL_ATON_Init+0x28c>)
34018124:	4a0c      	ldr	r2, [pc, #48]	@ (34018158 <LL_ATON_Init+0x290>)
34018126:	21d2      	movs	r1, #210	@ 0xd2
34018128:	4808      	ldr	r0, [pc, #32]	@ (3401814c <LL_ATON_Init+0x284>)
3401812a:	f003 f8b9 	bl	3401b2a0 <__assert_func>
3401812e:	bf00      	nop
34018130:	580e0000 	.word	0x580e0000
34018134:	580e0008 	.word	0x580e0008
34018138:	580e000c 	.word	0x580e000c
3401813c:	580e0010 	.word	0x580e0010
34018140:	580e5004 	.word	0x580e5004
34018144:	3401ee38 	.word	0x3401ee38
34018148:	3401eea4 	.word	0x3401eea4
3401814c:	3401ecd4 	.word	0x3401ecd4
34018150:	3401ee40 	.word	0x3401ee40
34018154:	3401eeac 	.word	0x3401eeac
34018158:	3401fa9c 	.word	0x3401fa9c
3401815c:	580ef004 	.word	0x580ef004
34018160:	3401eeb0 	.word	0x3401eeb0
34018164:	580fb004 	.word	0x580fb004
34018168:	3401eeb8 	.word	0x3401eeb8
3401816c:	580f7004 	.word	0x580f7004
34018170:	3401eec0 	.word	0x3401eec0
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
34018174:	4b9e      	ldr	r3, [pc, #632]	@ (340183f0 <LL_ATON_Init+0x528>)
34018176:	681b      	ldr	r3, [r3, #0]
34018178:	607b      	str	r3, [r7, #4]
3401817a:	687b      	ldr	r3, [r7, #4]
3401817c:	2b00      	cmp	r3, #0
3401817e:	d0f9      	beq.n	34018174 <LL_ATON_Init+0x2ac>
34018180:	687b      	ldr	r3, [r7, #4]
34018182:	b2db      	uxtb	r3, r3
34018184:	2b1b      	cmp	r3, #27
34018186:	d10b      	bne.n	340181a0 <LL_ATON_Init+0x2d8>
34018188:	687b      	ldr	r3, [r7, #4]
3401818a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
3401818e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34018192:	d105      	bne.n	340181a0 <LL_ATON_Init+0x2d8>
34018194:	687b      	ldr	r3, [r7, #4]
34018196:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401819a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401819e:	d02f      	beq.n	34018200 <LL_ATON_Init+0x338>
340181a0:	f004 fabc 	bl	3401c71c <__errno>
340181a4:	4603      	mov	r3, r0
340181a6:	681b      	ldr	r3, [r3, #0]
340181a8:	2b00      	cmp	r3, #0
340181aa:	d008      	beq.n	340181be <LL_ATON_Init+0x2f6>
340181ac:	f004 fab6 	bl	3401c71c <__errno>
340181b0:	4603      	mov	r3, r0
340181b2:	681b      	ldr	r3, [r3, #0]
340181b4:	4618      	mov	r0, r3
340181b6:	f004 fa4b 	bl	3401c650 <strerror>
340181ba:	4603      	mov	r3, r0
340181bc:	e000      	b.n	340181c0 <LL_ATON_Init+0x2f8>
340181be:	4b8d      	ldr	r3, [pc, #564]	@ (340183f4 <LL_ATON_Init+0x52c>)
340181c0:	687a      	ldr	r2, [r7, #4]
340181c2:	b2d2      	uxtb	r2, r2
340181c4:	6879      	ldr	r1, [r7, #4]
340181c6:	0b09      	lsrs	r1, r1, #12
340181c8:	f001 010f 	and.w	r1, r1, #15
340181cc:	6878      	ldr	r0, [r7, #4]
340181ce:	0a00      	lsrs	r0, r0, #8
340181d0:	f000 000f 	and.w	r0, r0, #15
340181d4:	2401      	movs	r4, #1
340181d6:	9406      	str	r4, [sp, #24]
340181d8:	2401      	movs	r4, #1
340181da:	9405      	str	r4, [sp, #20]
340181dc:	241b      	movs	r4, #27
340181de:	9404      	str	r4, [sp, #16]
340181e0:	9003      	str	r0, [sp, #12]
340181e2:	9102      	str	r1, [sp, #8]
340181e4:	9201      	str	r2, [sp, #4]
340181e6:	4a84      	ldr	r2, [pc, #528]	@ (340183f8 <LL_ATON_Init+0x530>)
340181e8:	9200      	str	r2, [sp, #0]
340181ea:	22d6      	movs	r2, #214	@ 0xd6
340181ec:	4983      	ldr	r1, [pc, #524]	@ (340183fc <LL_ATON_Init+0x534>)
340181ee:	4884      	ldr	r0, [pc, #528]	@ (34018400 <LL_ATON_Init+0x538>)
340181f0:	f003 fef8 	bl	3401bfe4 <iprintf>
340181f4:	4b83      	ldr	r3, [pc, #524]	@ (34018404 <LL_ATON_Init+0x53c>)
340181f6:	4a84      	ldr	r2, [pc, #528]	@ (34018408 <LL_ATON_Init+0x540>)
340181f8:	21d6      	movs	r1, #214	@ 0xd6
340181fa:	4880      	ldr	r0, [pc, #512]	@ (340183fc <LL_ATON_Init+0x534>)
340181fc:	f003 f850 	bl	3401b2a0 <__assert_func>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
34018200:	4b82      	ldr	r3, [pc, #520]	@ (3401840c <LL_ATON_Init+0x544>)
34018202:	681b      	ldr	r3, [r3, #0]
34018204:	607b      	str	r3, [r7, #4]
34018206:	687b      	ldr	r3, [r7, #4]
34018208:	2b00      	cmp	r3, #0
3401820a:	d0f9      	beq.n	34018200 <LL_ATON_Init+0x338>
3401820c:	687b      	ldr	r3, [r7, #4]
3401820e:	b2db      	uxtb	r3, r3
34018210:	2b19      	cmp	r3, #25
34018212:	d10b      	bne.n	3401822c <LL_ATON_Init+0x364>
34018214:	687b      	ldr	r3, [r7, #4]
34018216:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
3401821a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401821e:	d105      	bne.n	3401822c <LL_ATON_Init+0x364>
34018220:	687b      	ldr	r3, [r7, #4]
34018222:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34018226:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
3401822a:	d02f      	beq.n	3401828c <LL_ATON_Init+0x3c4>
3401822c:	f004 fa76 	bl	3401c71c <__errno>
34018230:	4603      	mov	r3, r0
34018232:	681b      	ldr	r3, [r3, #0]
34018234:	2b00      	cmp	r3, #0
34018236:	d008      	beq.n	3401824a <LL_ATON_Init+0x382>
34018238:	f004 fa70 	bl	3401c71c <__errno>
3401823c:	4603      	mov	r3, r0
3401823e:	681b      	ldr	r3, [r3, #0]
34018240:	4618      	mov	r0, r3
34018242:	f004 fa05 	bl	3401c650 <strerror>
34018246:	4603      	mov	r3, r0
34018248:	e000      	b.n	3401824c <LL_ATON_Init+0x384>
3401824a:	4b6a      	ldr	r3, [pc, #424]	@ (340183f4 <LL_ATON_Init+0x52c>)
3401824c:	687a      	ldr	r2, [r7, #4]
3401824e:	b2d2      	uxtb	r2, r2
34018250:	6879      	ldr	r1, [r7, #4]
34018252:	0b09      	lsrs	r1, r1, #12
34018254:	f001 010f 	and.w	r1, r1, #15
34018258:	6878      	ldr	r0, [r7, #4]
3401825a:	0a00      	lsrs	r0, r0, #8
3401825c:	f000 000f 	and.w	r0, r0, #15
34018260:	240a      	movs	r4, #10
34018262:	9406      	str	r4, [sp, #24]
34018264:	2401      	movs	r4, #1
34018266:	9405      	str	r4, [sp, #20]
34018268:	2419      	movs	r4, #25
3401826a:	9404      	str	r4, [sp, #16]
3401826c:	9003      	str	r0, [sp, #12]
3401826e:	9102      	str	r1, [sp, #8]
34018270:	9201      	str	r2, [sp, #4]
34018272:	4a67      	ldr	r2, [pc, #412]	@ (34018410 <LL_ATON_Init+0x548>)
34018274:	9200      	str	r2, [sp, #0]
34018276:	22da      	movs	r2, #218	@ 0xda
34018278:	4960      	ldr	r1, [pc, #384]	@ (340183fc <LL_ATON_Init+0x534>)
3401827a:	4861      	ldr	r0, [pc, #388]	@ (34018400 <LL_ATON_Init+0x538>)
3401827c:	f003 feb2 	bl	3401bfe4 <iprintf>
34018280:	4b60      	ldr	r3, [pc, #384]	@ (34018404 <LL_ATON_Init+0x53c>)
34018282:	4a61      	ldr	r2, [pc, #388]	@ (34018408 <LL_ATON_Init+0x540>)
34018284:	21da      	movs	r1, #218	@ 0xda
34018286:	485d      	ldr	r0, [pc, #372]	@ (340183fc <LL_ATON_Init+0x534>)
34018288:	f003 f80a 	bl	3401b2a0 <__assert_func>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3401828c:	4b61      	ldr	r3, [pc, #388]	@ (34018414 <LL_ATON_Init+0x54c>)
3401828e:	681b      	ldr	r3, [r3, #0]
34018290:	607b      	str	r3, [r7, #4]
34018292:	687b      	ldr	r3, [r7, #4]
34018294:	2b00      	cmp	r3, #0
34018296:	d0f9      	beq.n	3401828c <LL_ATON_Init+0x3c4>
34018298:	687b      	ldr	r3, [r7, #4]
3401829a:	b2db      	uxtb	r3, r3
3401829c:	2b21      	cmp	r3, #33	@ 0x21
3401829e:	d10b      	bne.n	340182b8 <LL_ATON_Init+0x3f0>
340182a0:	687b      	ldr	r3, [r7, #4]
340182a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
340182a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340182aa:	d105      	bne.n	340182b8 <LL_ATON_Init+0x3f0>
340182ac:	687b      	ldr	r3, [r7, #4]
340182ae:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
340182b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340182b6:	d02f      	beq.n	34018318 <LL_ATON_Init+0x450>
340182b8:	f004 fa30 	bl	3401c71c <__errno>
340182bc:	4603      	mov	r3, r0
340182be:	681b      	ldr	r3, [r3, #0]
340182c0:	2b00      	cmp	r3, #0
340182c2:	d008      	beq.n	340182d6 <LL_ATON_Init+0x40e>
340182c4:	f004 fa2a 	bl	3401c71c <__errno>
340182c8:	4603      	mov	r3, r0
340182ca:	681b      	ldr	r3, [r3, #0]
340182cc:	4618      	mov	r0, r3
340182ce:	f004 f9bf 	bl	3401c650 <strerror>
340182d2:	4603      	mov	r3, r0
340182d4:	e000      	b.n	340182d8 <LL_ATON_Init+0x410>
340182d6:	4b47      	ldr	r3, [pc, #284]	@ (340183f4 <LL_ATON_Init+0x52c>)
340182d8:	687a      	ldr	r2, [r7, #4]
340182da:	b2d2      	uxtb	r2, r2
340182dc:	6879      	ldr	r1, [r7, #4]
340182de:	0b09      	lsrs	r1, r1, #12
340182e0:	f001 010f 	and.w	r1, r1, #15
340182e4:	6878      	ldr	r0, [r7, #4]
340182e6:	0a00      	lsrs	r0, r0, #8
340182e8:	f000 000f 	and.w	r0, r0, #15
340182ec:	2401      	movs	r4, #1
340182ee:	9406      	str	r4, [sp, #24]
340182f0:	2401      	movs	r4, #1
340182f2:	9405      	str	r4, [sp, #20]
340182f4:	2421      	movs	r4, #33	@ 0x21
340182f6:	9404      	str	r4, [sp, #16]
340182f8:	9003      	str	r0, [sp, #12]
340182fa:	9102      	str	r1, [sp, #8]
340182fc:	9201      	str	r2, [sp, #4]
340182fe:	4a46      	ldr	r2, [pc, #280]	@ (34018418 <LL_ATON_Init+0x550>)
34018300:	9200      	str	r2, [sp, #0]
34018302:	22de      	movs	r2, #222	@ 0xde
34018304:	493d      	ldr	r1, [pc, #244]	@ (340183fc <LL_ATON_Init+0x534>)
34018306:	483e      	ldr	r0, [pc, #248]	@ (34018400 <LL_ATON_Init+0x538>)
34018308:	f003 fe6c 	bl	3401bfe4 <iprintf>
3401830c:	4b3d      	ldr	r3, [pc, #244]	@ (34018404 <LL_ATON_Init+0x53c>)
3401830e:	4a3e      	ldr	r2, [pc, #248]	@ (34018408 <LL_ATON_Init+0x540>)
34018310:	21de      	movs	r1, #222	@ 0xde
34018312:	483a      	ldr	r0, [pc, #232]	@ (340183fc <LL_ATON_Init+0x534>)
34018314:	f002 ffc4 	bl	3401b2a0 <__assert_func>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
34018318:	4b40      	ldr	r3, [pc, #256]	@ (3401841c <LL_ATON_Init+0x554>)
3401831a:	681b      	ldr	r3, [r3, #0]
3401831c:	607b      	str	r3, [r7, #4]
3401831e:	687b      	ldr	r3, [r7, #4]
34018320:	2b00      	cmp	r3, #0
34018322:	d0f9      	beq.n	34018318 <LL_ATON_Init+0x450>
34018324:	687b      	ldr	r3, [r7, #4]
34018326:	b2db      	uxtb	r3, r3
34018328:	2b20      	cmp	r3, #32
3401832a:	d10b      	bne.n	34018344 <LL_ATON_Init+0x47c>
3401832c:	687b      	ldr	r3, [r7, #4]
3401832e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34018332:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34018336:	d105      	bne.n	34018344 <LL_ATON_Init+0x47c>
34018338:	687b      	ldr	r3, [r7, #4]
3401833a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401833e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34018342:	d02f      	beq.n	340183a4 <LL_ATON_Init+0x4dc>
34018344:	f004 f9ea 	bl	3401c71c <__errno>
34018348:	4603      	mov	r3, r0
3401834a:	681b      	ldr	r3, [r3, #0]
3401834c:	2b00      	cmp	r3, #0
3401834e:	d008      	beq.n	34018362 <LL_ATON_Init+0x49a>
34018350:	f004 f9e4 	bl	3401c71c <__errno>
34018354:	4603      	mov	r3, r0
34018356:	681b      	ldr	r3, [r3, #0]
34018358:	4618      	mov	r0, r3
3401835a:	f004 f979 	bl	3401c650 <strerror>
3401835e:	4603      	mov	r3, r0
34018360:	e000      	b.n	34018364 <LL_ATON_Init+0x49c>
34018362:	4b24      	ldr	r3, [pc, #144]	@ (340183f4 <LL_ATON_Init+0x52c>)
34018364:	687a      	ldr	r2, [r7, #4]
34018366:	b2d2      	uxtb	r2, r2
34018368:	6879      	ldr	r1, [r7, #4]
3401836a:	0b09      	lsrs	r1, r1, #12
3401836c:	f001 010f 	and.w	r1, r1, #15
34018370:	6878      	ldr	r0, [r7, #4]
34018372:	0a00      	lsrs	r0, r0, #8
34018374:	f000 000f 	and.w	r0, r0, #15
34018378:	2402      	movs	r4, #2
3401837a:	9406      	str	r4, [sp, #24]
3401837c:	2403      	movs	r4, #3
3401837e:	9405      	str	r4, [sp, #20]
34018380:	2420      	movs	r4, #32
34018382:	9404      	str	r4, [sp, #16]
34018384:	9003      	str	r0, [sp, #12]
34018386:	9102      	str	r1, [sp, #8]
34018388:	9201      	str	r2, [sp, #4]
3401838a:	4a25      	ldr	r2, [pc, #148]	@ (34018420 <LL_ATON_Init+0x558>)
3401838c:	9200      	str	r2, [sp, #0]
3401838e:	22e2      	movs	r2, #226	@ 0xe2
34018390:	491a      	ldr	r1, [pc, #104]	@ (340183fc <LL_ATON_Init+0x534>)
34018392:	481b      	ldr	r0, [pc, #108]	@ (34018400 <LL_ATON_Init+0x538>)
34018394:	f003 fe26 	bl	3401bfe4 <iprintf>
34018398:	4b1a      	ldr	r3, [pc, #104]	@ (34018404 <LL_ATON_Init+0x53c>)
3401839a:	4a1b      	ldr	r2, [pc, #108]	@ (34018408 <LL_ATON_Init+0x540>)
3401839c:	21e2      	movs	r1, #226	@ 0xe2
3401839e:	4817      	ldr	r0, [pc, #92]	@ (340183fc <LL_ATON_Init+0x534>)
340183a0:	f002 ff7e 	bl	3401b2a0 <__assert_func>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
340183a4:	4b1f      	ldr	r3, [pc, #124]	@ (34018424 <LL_ATON_Init+0x55c>)
340183a6:	681b      	ldr	r3, [r3, #0]
340183a8:	607b      	str	r3, [r7, #4]
340183aa:	687b      	ldr	r3, [r7, #4]
340183ac:	2b00      	cmp	r3, #0
340183ae:	d0f9      	beq.n	340183a4 <LL_ATON_Init+0x4dc>
340183b0:	687b      	ldr	r3, [r7, #4]
340183b2:	b2db      	uxtb	r3, r3
340183b4:	2b1f      	cmp	r3, #31
340183b6:	d10b      	bne.n	340183d0 <LL_ATON_Init+0x508>
340183b8:	687b      	ldr	r3, [r7, #4]
340183ba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
340183be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340183c2:	d105      	bne.n	340183d0 <LL_ATON_Init+0x508>
340183c4:	687b      	ldr	r3, [r7, #4]
340183c6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
340183ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340183ce:	d04c      	beq.n	3401846a <LL_ATON_Init+0x5a2>
340183d0:	f004 f9a4 	bl	3401c71c <__errno>
340183d4:	4603      	mov	r3, r0
340183d6:	681b      	ldr	r3, [r3, #0]
340183d8:	2b00      	cmp	r3, #0
340183da:	d025      	beq.n	34018428 <LL_ATON_Init+0x560>
340183dc:	f004 f99e 	bl	3401c71c <__errno>
340183e0:	4603      	mov	r3, r0
340183e2:	681b      	ldr	r3, [r3, #0]
340183e4:	4618      	mov	r0, r3
340183e6:	f004 f933 	bl	3401c650 <strerror>
340183ea:	4603      	mov	r3, r0
340183ec:	e01d      	b.n	3401842a <LL_ATON_Init+0x562>
340183ee:	bf00      	nop
340183f0:	580f5004 	.word	0x580f5004
340183f4:	3401ee38 	.word	0x3401ee38
340183f8:	3401eec8 	.word	0x3401eec8
340183fc:	3401ecd4 	.word	0x3401ecd4
34018400:	3401ee40 	.word	0x3401ee40
34018404:	3401eeac 	.word	0x3401eeac
34018408:	3401fa9c 	.word	0x3401fa9c
3401840c:	580f3004 	.word	0x580f3004
34018410:	3401eed0 	.word	0x3401eed0
34018414:	580fe004 	.word	0x580fe004
34018418:	3401eed8 	.word	0x3401eed8
3401841c:	580fd004 	.word	0x580fd004
34018420:	3401eee4 	.word	0x3401eee4
34018424:	580e0004 	.word	0x580e0004
34018428:	4b85      	ldr	r3, [pc, #532]	@ (34018640 <LL_ATON_Init+0x778>)
3401842a:	687a      	ldr	r2, [r7, #4]
3401842c:	b2d2      	uxtb	r2, r2
3401842e:	6879      	ldr	r1, [r7, #4]
34018430:	0b09      	lsrs	r1, r1, #12
34018432:	f001 010f 	and.w	r1, r1, #15
34018436:	6878      	ldr	r0, [r7, #4]
34018438:	0a00      	lsrs	r0, r0, #8
3401843a:	f000 000f 	and.w	r0, r0, #15
3401843e:	2402      	movs	r4, #2
34018440:	9406      	str	r4, [sp, #24]
34018442:	2401      	movs	r4, #1
34018444:	9405      	str	r4, [sp, #20]
34018446:	241f      	movs	r4, #31
34018448:	9404      	str	r4, [sp, #16]
3401844a:	9003      	str	r0, [sp, #12]
3401844c:	9102      	str	r1, [sp, #8]
3401844e:	9201      	str	r2, [sp, #4]
34018450:	4a7c      	ldr	r2, [pc, #496]	@ (34018644 <LL_ATON_Init+0x77c>)
34018452:	9200      	str	r2, [sp, #0]
34018454:	22f5      	movs	r2, #245	@ 0xf5
34018456:	497c      	ldr	r1, [pc, #496]	@ (34018648 <LL_ATON_Init+0x780>)
34018458:	487c      	ldr	r0, [pc, #496]	@ (3401864c <LL_ATON_Init+0x784>)
3401845a:	f003 fdc3 	bl	3401bfe4 <iprintf>
3401845e:	4b7c      	ldr	r3, [pc, #496]	@ (34018650 <LL_ATON_Init+0x788>)
34018460:	4a7c      	ldr	r2, [pc, #496]	@ (34018654 <LL_ATON_Init+0x78c>)
34018462:	21f5      	movs	r1, #245	@ 0xf5
34018464:	4878      	ldr	r0, [pc, #480]	@ (34018648 <LL_ATON_Init+0x780>)
34018466:	f002 ff1b 	bl	3401b2a0 <__assert_func>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3401846a:	4b7b      	ldr	r3, [pc, #492]	@ (34018658 <LL_ATON_Init+0x790>)
3401846c:	681b      	ldr	r3, [r3, #0]
3401846e:	607b      	str	r3, [r7, #4]
34018470:	687b      	ldr	r3, [r7, #4]
34018472:	2b00      	cmp	r3, #0
34018474:	d0f9      	beq.n	3401846a <LL_ATON_Init+0x5a2>
34018476:	687b      	ldr	r3, [r7, #4]
34018478:	b2db      	uxtb	r3, r3
3401847a:	2b1e      	cmp	r3, #30
3401847c:	d10b      	bne.n	34018496 <LL_ATON_Init+0x5ce>
3401847e:	687b      	ldr	r3, [r7, #4]
34018480:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34018484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34018488:	d105      	bne.n	34018496 <LL_ATON_Init+0x5ce>
3401848a:	687b      	ldr	r3, [r7, #4]
3401848c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34018490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34018494:	d02f      	beq.n	340184f6 <LL_ATON_Init+0x62e>
34018496:	f004 f941 	bl	3401c71c <__errno>
3401849a:	4603      	mov	r3, r0
3401849c:	681b      	ldr	r3, [r3, #0]
3401849e:	2b00      	cmp	r3, #0
340184a0:	d008      	beq.n	340184b4 <LL_ATON_Init+0x5ec>
340184a2:	f004 f93b 	bl	3401c71c <__errno>
340184a6:	4603      	mov	r3, r0
340184a8:	681b      	ldr	r3, [r3, #0]
340184aa:	4618      	mov	r0, r3
340184ac:	f004 f8d0 	bl	3401c650 <strerror>
340184b0:	4603      	mov	r3, r0
340184b2:	e000      	b.n	340184b6 <LL_ATON_Init+0x5ee>
340184b4:	4b62      	ldr	r3, [pc, #392]	@ (34018640 <LL_ATON_Init+0x778>)
340184b6:	687a      	ldr	r2, [r7, #4]
340184b8:	b2d2      	uxtb	r2, r2
340184ba:	6879      	ldr	r1, [r7, #4]
340184bc:	0b09      	lsrs	r1, r1, #12
340184be:	f001 010f 	and.w	r1, r1, #15
340184c2:	6878      	ldr	r0, [r7, #4]
340184c4:	0a00      	lsrs	r0, r0, #8
340184c6:	f000 000f 	and.w	r0, r0, #15
340184ca:	2401      	movs	r4, #1
340184cc:	9406      	str	r4, [sp, #24]
340184ce:	2401      	movs	r4, #1
340184d0:	9405      	str	r4, [sp, #20]
340184d2:	241e      	movs	r4, #30
340184d4:	9404      	str	r4, [sp, #16]
340184d6:	9003      	str	r0, [sp, #12]
340184d8:	9102      	str	r1, [sp, #8]
340184da:	9201      	str	r2, [sp, #4]
340184dc:	4a5f      	ldr	r2, [pc, #380]	@ (3401865c <LL_ATON_Init+0x794>)
340184de:	9200      	str	r2, [sp, #0]
340184e0:	22f7      	movs	r2, #247	@ 0xf7
340184e2:	4959      	ldr	r1, [pc, #356]	@ (34018648 <LL_ATON_Init+0x780>)
340184e4:	4859      	ldr	r0, [pc, #356]	@ (3401864c <LL_ATON_Init+0x784>)
340184e6:	f003 fd7d 	bl	3401bfe4 <iprintf>
340184ea:	4b59      	ldr	r3, [pc, #356]	@ (34018650 <LL_ATON_Init+0x788>)
340184ec:	4a59      	ldr	r2, [pc, #356]	@ (34018654 <LL_ATON_Init+0x78c>)
340184ee:	21f7      	movs	r1, #247	@ 0xf7
340184f0:	4855      	ldr	r0, [pc, #340]	@ (34018648 <LL_ATON_Init+0x780>)
340184f2:	f002 fed5 	bl	3401b2a0 <__assert_func>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
340184f6:	4b5a      	ldr	r3, [pc, #360]	@ (34018660 <LL_ATON_Init+0x798>)
340184f8:	681b      	ldr	r3, [r3, #0]
340184fa:	607b      	str	r3, [r7, #4]
340184fc:	687b      	ldr	r3, [r7, #4]
340184fe:	2b00      	cmp	r3, #0
34018500:	d0f9      	beq.n	340184f6 <LL_ATON_Init+0x62e>
34018502:	687b      	ldr	r3, [r7, #4]
34018504:	b2db      	uxtb	r3, r3
34018506:	2b00      	cmp	r3, #0
34018508:	d10b      	bne.n	34018522 <LL_ATON_Init+0x65a>
3401850a:	687b      	ldr	r3, [r7, #4]
3401850c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34018510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34018514:	d105      	bne.n	34018522 <LL_ATON_Init+0x65a>
34018516:	687b      	ldr	r3, [r7, #4]
34018518:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401851c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34018520:	d02f      	beq.n	34018582 <LL_ATON_Init+0x6ba>
34018522:	f004 f8fb 	bl	3401c71c <__errno>
34018526:	4603      	mov	r3, r0
34018528:	681b      	ldr	r3, [r3, #0]
3401852a:	2b00      	cmp	r3, #0
3401852c:	d008      	beq.n	34018540 <LL_ATON_Init+0x678>
3401852e:	f004 f8f5 	bl	3401c71c <__errno>
34018532:	4603      	mov	r3, r0
34018534:	681b      	ldr	r3, [r3, #0]
34018536:	4618      	mov	r0, r3
34018538:	f004 f88a 	bl	3401c650 <strerror>
3401853c:	4603      	mov	r3, r0
3401853e:	e000      	b.n	34018542 <LL_ATON_Init+0x67a>
34018540:	4b3f      	ldr	r3, [pc, #252]	@ (34018640 <LL_ATON_Init+0x778>)
34018542:	687a      	ldr	r2, [r7, #4]
34018544:	b2d2      	uxtb	r2, r2
34018546:	6879      	ldr	r1, [r7, #4]
34018548:	0b09      	lsrs	r1, r1, #12
3401854a:	f001 010f 	and.w	r1, r1, #15
3401854e:	6878      	ldr	r0, [r7, #4]
34018550:	0a00      	lsrs	r0, r0, #8
34018552:	f000 000f 	and.w	r0, r0, #15
34018556:	2406      	movs	r4, #6
34018558:	9406      	str	r4, [sp, #24]
3401855a:	2401      	movs	r4, #1
3401855c:	9405      	str	r4, [sp, #20]
3401855e:	2400      	movs	r4, #0
34018560:	9404      	str	r4, [sp, #16]
34018562:	9003      	str	r0, [sp, #12]
34018564:	9102      	str	r1, [sp, #8]
34018566:	9201      	str	r2, [sp, #4]
34018568:	4a3e      	ldr	r2, [pc, #248]	@ (34018664 <LL_ATON_Init+0x79c>)
3401856a:	9200      	str	r2, [sp, #0]
3401856c:	22f9      	movs	r2, #249	@ 0xf9
3401856e:	4936      	ldr	r1, [pc, #216]	@ (34018648 <LL_ATON_Init+0x780>)
34018570:	4836      	ldr	r0, [pc, #216]	@ (3401864c <LL_ATON_Init+0x784>)
34018572:	f003 fd37 	bl	3401bfe4 <iprintf>
34018576:	4b36      	ldr	r3, [pc, #216]	@ (34018650 <LL_ATON_Init+0x788>)
34018578:	4a36      	ldr	r2, [pc, #216]	@ (34018654 <LL_ATON_Init+0x78c>)
3401857a:	21f9      	movs	r1, #249	@ 0xf9
3401857c:	4832      	ldr	r0, [pc, #200]	@ (34018648 <LL_ATON_Init+0x780>)
3401857e:	f002 fe8f 	bl	3401b2a0 <__assert_func>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
34018582:	4b39      	ldr	r3, [pc, #228]	@ (34018668 <LL_ATON_Init+0x7a0>)
34018584:	681b      	ldr	r3, [r3, #0]
34018586:	607b      	str	r3, [r7, #4]
34018588:	687b      	ldr	r3, [r7, #4]
3401858a:	2b00      	cmp	r3, #0
3401858c:	d0f9      	beq.n	34018582 <LL_ATON_Init+0x6ba>
3401858e:	687b      	ldr	r3, [r7, #4]
34018590:	b2db      	uxtb	r3, r3
34018592:	2b1d      	cmp	r3, #29
34018594:	d10a      	bne.n	340185ac <LL_ATON_Init+0x6e4>
34018596:	687b      	ldr	r3, [r7, #4]
34018598:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
3401859c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
340185a0:	d104      	bne.n	340185ac <LL_ATON_Init+0x6e4>
340185a2:	687b      	ldr	r3, [r7, #4]
340185a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
340185a8:	2b00      	cmp	r3, #0
340185aa:	d02f      	beq.n	3401860c <LL_ATON_Init+0x744>
340185ac:	f004 f8b6 	bl	3401c71c <__errno>
340185b0:	4603      	mov	r3, r0
340185b2:	681b      	ldr	r3, [r3, #0]
340185b4:	2b00      	cmp	r3, #0
340185b6:	d008      	beq.n	340185ca <LL_ATON_Init+0x702>
340185b8:	f004 f8b0 	bl	3401c71c <__errno>
340185bc:	4603      	mov	r3, r0
340185be:	681b      	ldr	r3, [r3, #0]
340185c0:	4618      	mov	r0, r3
340185c2:	f004 f845 	bl	3401c650 <strerror>
340185c6:	4603      	mov	r3, r0
340185c8:	e000      	b.n	340185cc <LL_ATON_Init+0x704>
340185ca:	4b1d      	ldr	r3, [pc, #116]	@ (34018640 <LL_ATON_Init+0x778>)
340185cc:	687a      	ldr	r2, [r7, #4]
340185ce:	b2d2      	uxtb	r2, r2
340185d0:	6879      	ldr	r1, [r7, #4]
340185d2:	0b09      	lsrs	r1, r1, #12
340185d4:	f001 010f 	and.w	r1, r1, #15
340185d8:	6878      	ldr	r0, [r7, #4]
340185da:	0a00      	lsrs	r0, r0, #8
340185dc:	f000 000f 	and.w	r0, r0, #15
340185e0:	2400      	movs	r4, #0
340185e2:	9406      	str	r4, [sp, #24]
340185e4:	2405      	movs	r4, #5
340185e6:	9405      	str	r4, [sp, #20]
340185e8:	241d      	movs	r4, #29
340185ea:	9404      	str	r4, [sp, #16]
340185ec:	9003      	str	r0, [sp, #12]
340185ee:	9102      	str	r1, [sp, #8]
340185f0:	9201      	str	r2, [sp, #4]
340185f2:	4a1e      	ldr	r2, [pc, #120]	@ (3401866c <LL_ATON_Init+0x7a4>)
340185f4:	9200      	str	r2, [sp, #0]
340185f6:	22fb      	movs	r2, #251	@ 0xfb
340185f8:	4913      	ldr	r1, [pc, #76]	@ (34018648 <LL_ATON_Init+0x780>)
340185fa:	4814      	ldr	r0, [pc, #80]	@ (3401864c <LL_ATON_Init+0x784>)
340185fc:	f003 fcf2 	bl	3401bfe4 <iprintf>
34018600:	4b13      	ldr	r3, [pc, #76]	@ (34018650 <LL_ATON_Init+0x788>)
34018602:	4a14      	ldr	r2, [pc, #80]	@ (34018654 <LL_ATON_Init+0x78c>)
34018604:	21fb      	movs	r1, #251	@ 0xfb
34018606:	4810      	ldr	r0, [pc, #64]	@ (34018648 <LL_ATON_Init+0x780>)
34018608:	f002 fe4a 	bl	3401b2a0 <__assert_func>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
3401860c:	2300      	movs	r3, #0
3401860e:	603b      	str	r3, [r7, #0]
34018610:	e00a      	b.n	34018628 <LL_ATON_Init+0x760>
  {
    ATON_BUSIF_CTRL_SET(i, 1);
34018612:	683b      	ldr	r3, [r7, #0]
34018614:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018618:	33e2      	adds	r3, #226	@ 0xe2
3401861a:	031b      	lsls	r3, r3, #12
3401861c:	461a      	mov	r2, r3
3401861e:	2301      	movs	r3, #1
34018620:	6013      	str	r3, [r2, #0]
  for (i = 0; i < ATON_BUSIF_NUM; i++)
34018622:	683b      	ldr	r3, [r7, #0]
34018624:	3301      	adds	r3, #1
34018626:	603b      	str	r3, [r7, #0]
34018628:	683b      	ldr	r3, [r7, #0]
3401862a:	2b01      	cmp	r3, #1
3401862c:	ddf1      	ble.n	34018612 <LL_ATON_Init+0x74a>
  }

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);
3401862e:	4b10      	ldr	r3, [pc, #64]	@ (34018670 <LL_ATON_Init+0x7a8>)
34018630:	2201      	movs	r2, #1
34018632:	601a      	str	r2, [r3, #0]

  return 0;
34018634:	2300      	movs	r3, #0
}
34018636:	4618      	mov	r0, r3
34018638:	370c      	adds	r7, #12
3401863a:	46bd      	mov	sp, r7
3401863c:	bd90      	pop	{r4, r7, pc}
3401863e:	bf00      	nop
34018640:	3401ee38 	.word	0x3401ee38
34018644:	3401eeec 	.word	0x3401eeec
34018648:	3401ecd4 	.word	0x3401ecd4
3401864c:	3401ee40 	.word	0x3401ee40
34018650:	3401eeac 	.word	0x3401eeac
34018654:	3401fa9c 	.word	0x3401fa9c
34018658:	580e1004 	.word	0x580e1004
3401865c:	3401eef4 	.word	0x3401eef4
34018660:	580e4004 	.word	0x580e4004
34018664:	3401eefc 	.word	0x3401eefc
34018668:	580e2004 	.word	0x580e2004
3401866c:	3401ef08 	.word	0x3401ef08
34018670:	580e1000 	.word	0x580e1000

34018674 <LL_ATON_DeInit>:
/**
 * @brief  ATON global de-initialization. Must be called at the very end
 * @retval Always zero
 */
int LL_ATON_DeInit(void)
{
34018674:	b480      	push	{r7}
34018676:	b083      	sub	sp, #12
34018678:	af00      	add	r7, sp, #0
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
3401867a:	4b13      	ldr	r3, [pc, #76]	@ (340186c8 <LL_ATON_DeInit+0x54>)
3401867c:	2200      	movs	r2, #0
3401867e:	601a      	str	r2, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
34018680:	2300      	movs	r3, #0
34018682:	607b      	str	r3, [r7, #4]
34018684:	e00a      	b.n	3401869c <LL_ATON_DeInit+0x28>
  {
    ATON_BUSIF_CTRL_SET(i, 0);
34018686:	687b      	ldr	r3, [r7, #4]
34018688:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401868c:	33e2      	adds	r3, #226	@ 0xe2
3401868e:	031b      	lsls	r3, r3, #12
34018690:	461a      	mov	r2, r3
34018692:	2300      	movs	r3, #0
34018694:	6013      	str	r3, [r2, #0]
  for (i = 0; i < ATON_BUSIF_NUM; i++)
34018696:	687b      	ldr	r3, [r7, #4]
34018698:	3301      	adds	r3, #1
3401869a:	607b      	str	r3, [r7, #4]
3401869c:	687b      	ldr	r3, [r7, #4]
3401869e:	2b01      	cmp	r3, #1
340186a0:	ddf1      	ble.n	34018686 <LL_ATON_DeInit+0x12>
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
340186a2:	4b0a      	ldr	r3, [pc, #40]	@ (340186cc <LL_ATON_DeInit+0x58>)
340186a4:	2200      	movs	r2, #0
340186a6:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
340186a8:	4b09      	ldr	r3, [pc, #36]	@ (340186d0 <LL_ATON_DeInit+0x5c>)
340186aa:	2200      	movs	r2, #0
340186ac:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_BGATES_SET(0, 0);
340186ae:	4b09      	ldr	r3, [pc, #36]	@ (340186d4 <LL_ATON_DeInit+0x60>)
340186b0:	2200      	movs	r2, #0
340186b2:	601a      	str	r2, [r3, #0]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
340186b4:	4b08      	ldr	r3, [pc, #32]	@ (340186d8 <LL_ATON_DeInit+0x64>)
340186b6:	2200      	movs	r2, #0
340186b8:	601a      	str	r2, [r3, #0]

  return 0;
340186ba:	2300      	movs	r3, #0
}
340186bc:	4618      	mov	r0, r3
340186be:	370c      	adds	r7, #12
340186c0:	46bd      	mov	sp, r7
340186c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340186c6:	4770      	bx	lr
340186c8:	580e1000 	.word	0x580e1000
340186cc:	580e0008 	.word	0x580e0008
340186d0:	580e000c 	.word	0x580e000c
340186d4:	580e0010 	.word	0x580e0010
340186d8:	580e0000 	.word	0x580e0000

340186dc <LL_ATON_EnableUnits_Init>:
 * @param  n Lenght of the initialization array
 * @retval Error code
 * @todo   Add boundary checks
 */
int LL_ATON_EnableUnits_Init(const LL_ATON_EnableUnits_InitTypeDef *LL_ATON_EnableUnits_InitStruct, int n)
{
340186dc:	b480      	push	{r7}
340186de:	b08d      	sub	sp, #52	@ 0x34
340186e0:	af00      	add	r7, sp, #0
340186e2:	6078      	str	r0, [r7, #4]
340186e4:	6039      	str	r1, [r7, #0]
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;

  for (i = 0; i < n; i++)
340186e6:	2300      	movs	r3, #0
340186e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
340186ea:	e0a8      	b.n	3401883e <LL_ATON_EnableUnits_Init+0x162>
  {
    unitType = LL_ATON_EnableUnits_InitStruct[i].unit.unit_type;
340186ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340186ee:	009b      	lsls	r3, r3, #2
340186f0:	687a      	ldr	r2, [r7, #4]
340186f2:	4413      	add	r3, r2
340186f4:	781b      	ldrb	r3, [r3, #0]
340186f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
340186fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340186fc:	009b      	lsls	r3, r3, #2
340186fe:	687a      	ldr	r2, [r7, #4]
34018700:	4413      	add	r3, r2
34018702:	885b      	ldrh	r3, [r3, #2]
34018704:	627b      	str	r3, [r7, #36]	@ 0x24

    switch (unitType)
34018706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
3401870a:	2b08      	cmp	r3, #8
3401870c:	f200 8093 	bhi.w	34018836 <LL_ATON_EnableUnits_Init+0x15a>
34018710:	a201      	add	r2, pc, #4	@ (adr r2, 34018718 <LL_ATON_EnableUnits_Init+0x3c>)
34018712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34018716:	bf00      	nop
34018718:	3401873d 	.word	0x3401873d
3401871c:	34018837 	.word	0x34018837
34018720:	34018765 	.word	0x34018765
34018724:	34018781 	.word	0x34018781
34018728:	340187a9 	.word	0x340187a9
3401872c:	340187d1 	.word	0x340187d1
34018730:	340187f9 	.word	0x340187f9
34018734:	34018837 	.word	0x34018837
34018738:	34018821 	.word	0x34018821
    {
    case STRENG:
      ATON_ENABLE(STRENG, unitId);
3401873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401873e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018742:	33e5      	adds	r3, #229	@ 0xe5
34018744:	031b      	lsls	r3, r3, #12
34018746:	681b      	ldr	r3, [r3, #0]
34018748:	60fb      	str	r3, [r7, #12]
3401874a:	68fb      	ldr	r3, [r7, #12]
3401874c:	f043 0301 	orr.w	r3, r3, #1
34018750:	60fb      	str	r3, [r7, #12]
34018752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018754:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018758:	33e5      	adds	r3, #229	@ 0xe5
3401875a:	031b      	lsls	r3, r3, #12
3401875c:	461a      	mov	r2, r3
3401875e:	68fb      	ldr	r3, [r7, #12]
34018760:	6013      	str	r3, [r2, #0]
      break;
34018762:	e069      	b.n	34018838 <LL_ATON_EnableUnits_Init+0x15c>
#ifdef ATON_CONVACC_NUM
    case CONVACC:
#if 0
      ATON_ENABLE(CONVACC, unitId);
#else
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
34018764:	4a3c      	ldr	r2, [pc, #240]	@ (34018858 <LL_ATON_EnableUnits_Init+0x17c>)
34018766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018768:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
3401876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401876e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018772:	33ef      	adds	r3, #239	@ 0xef
34018774:	031b      	lsls	r3, r3, #12
34018776:	4619      	mov	r1, r3
34018778:	f042 0301 	orr.w	r3, r2, #1
3401877c:	600b      	str	r3, [r1, #0]
#endif
      break;
3401877e:	e05b      	b.n	34018838 <LL_ATON_EnableUnits_Init+0x15c>
#endif

#ifdef ATON_DECUN_NUM
    case DECUN:
      ATON_ENABLE(DECUN, unitId);
34018780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018782:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018786:	33f3      	adds	r3, #243	@ 0xf3
34018788:	031b      	lsls	r3, r3, #12
3401878a:	681b      	ldr	r3, [r3, #0]
3401878c:	613b      	str	r3, [r7, #16]
3401878e:	693b      	ldr	r3, [r7, #16]
34018790:	f043 0301 	orr.w	r3, r3, #1
34018794:	613b      	str	r3, [r7, #16]
34018796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018798:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401879c:	33f3      	adds	r3, #243	@ 0xf3
3401879e:	031b      	lsls	r3, r3, #12
340187a0:	461a      	mov	r2, r3
340187a2:	693b      	ldr	r3, [r7, #16]
340187a4:	6013      	str	r3, [r2, #0]
      break;
340187a6:	e047      	b.n	34018838 <LL_ATON_EnableUnits_Init+0x15c>
#endif

#ifdef ATON_ACTIV_NUM
    case ACTIV:
      ATON_ENABLE(ACTIV, unitId);
340187a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340187aa:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340187ae:	33f5      	adds	r3, #245	@ 0xf5
340187b0:	031b      	lsls	r3, r3, #12
340187b2:	681b      	ldr	r3, [r3, #0]
340187b4:	617b      	str	r3, [r7, #20]
340187b6:	697b      	ldr	r3, [r7, #20]
340187b8:	f043 0301 	orr.w	r3, r3, #1
340187bc:	617b      	str	r3, [r7, #20]
340187be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340187c0:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340187c4:	33f5      	adds	r3, #245	@ 0xf5
340187c6:	031b      	lsls	r3, r3, #12
340187c8:	461a      	mov	r2, r3
340187ca:	697b      	ldr	r3, [r7, #20]
340187cc:	6013      	str	r3, [r2, #0]
      break;
340187ce:	e033      	b.n	34018838 <LL_ATON_EnableUnits_Init+0x15c>
#endif

#ifdef ATON_ARITH_NUM
    case ARITH:
      ATON_ENABLE(ARITH, unitId);
340187d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340187d2:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340187d6:	33f7      	adds	r3, #247	@ 0xf7
340187d8:	031b      	lsls	r3, r3, #12
340187da:	681b      	ldr	r3, [r3, #0]
340187dc:	61bb      	str	r3, [r7, #24]
340187de:	69bb      	ldr	r3, [r7, #24]
340187e0:	f043 0301 	orr.w	r3, r3, #1
340187e4:	61bb      	str	r3, [r7, #24]
340187e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340187e8:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340187ec:	33f7      	adds	r3, #247	@ 0xf7
340187ee:	031b      	lsls	r3, r3, #12
340187f0:	461a      	mov	r2, r3
340187f2:	69bb      	ldr	r3, [r7, #24]
340187f4:	6013      	str	r3, [r2, #0]
      break;
340187f6:	e01f      	b.n	34018838 <LL_ATON_EnableUnits_Init+0x15c>
#ifdef ATON_POOL_NUM
    case POOL:
#ifdef POOL_RC14
      ATON_POOL_CTRL_SET(unitId, ATON_POOL_CTRL_SET_EN(ATON_POOL_CTRL_GET(unitId), 1));
#else  // !POOL_RC14
      ATON_ENABLE(POOL, unitId);
340187f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340187fa:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340187fe:	33fb      	adds	r3, #251	@ 0xfb
34018800:	031b      	lsls	r3, r3, #12
34018802:	681b      	ldr	r3, [r3, #0]
34018804:	61fb      	str	r3, [r7, #28]
34018806:	69fb      	ldr	r3, [r7, #28]
34018808:	f043 0301 	orr.w	r3, r3, #1
3401880c:	61fb      	str	r3, [r7, #28]
3401880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018810:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018814:	33fb      	adds	r3, #251	@ 0xfb
34018816:	031b      	lsls	r3, r3, #12
34018818:	461a      	mov	r2, r3
3401881a:	69fb      	ldr	r3, [r7, #28]
3401881c:	6013      	str	r3, [r2, #0]
#endif // !POOL_RC14
      break;
3401881e:	e00b      	b.n	34018838 <LL_ATON_EnableUnits_Init+0x15c>
#endif
#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_ENABLE(RECBUF, unitId);
34018820:	4b0e      	ldr	r3, [pc, #56]	@ (3401885c <LL_ATON_EnableUnits_Init+0x180>)
34018822:	681b      	ldr	r3, [r3, #0]
34018824:	623b      	str	r3, [r7, #32]
34018826:	6a3b      	ldr	r3, [r7, #32]
34018828:	f043 0301 	orr.w	r3, r3, #1
3401882c:	623b      	str	r3, [r7, #32]
3401882e:	4a0b      	ldr	r2, [pc, #44]	@ (3401885c <LL_ATON_EnableUnits_Init+0x180>)
34018830:	6a3b      	ldr	r3, [r7, #32]
34018832:	6013      	str	r3, [r2, #0]
      break;
34018834:	e000      	b.n	34018838 <LL_ATON_EnableUnits_Init+0x15c>
#endif

    default:
      break;
34018836:	bf00      	nop
  for (i = 0; i < n; i++)
34018838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401883a:	3301      	adds	r3, #1
3401883c:	62fb      	str	r3, [r7, #44]	@ 0x2c
3401883e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34018840:	683b      	ldr	r3, [r7, #0]
34018842:	429a      	cmp	r2, r3
34018844:	f6ff af52 	blt.w	340186ec <LL_ATON_EnableUnits_Init+0x10>
    }
  }

  return 0;
34018848:	2300      	movs	r3, #0
}
3401884a:	4618      	mov	r0, r3
3401884c:	3734      	adds	r7, #52	@ 0x34
3401884e:	46bd      	mov	sp, r7
34018850:	f85d 7b04 	ldr.w	r7, [sp], #4
34018854:	4770      	bx	lr
34018856:	bf00      	nop
34018858:	34020e40 	.word	0x34020e40
3401885c:	580fd000 	.word	0x580fd000

34018860 <LL_ATON_DisableUnits_Init>:
 * @param  LL_ATON_DisableUnits_InitTypeDef Array of units to disable
 * @param  n Length of the initialization array
 * @retval Error code
 */
int LL_ATON_DisableUnits_Init(const LL_ATON_DisableUnits_InitTypeDef *LL_ATON_DisableUnits_InitStruct, int n)
{
34018860:	b580      	push	{r7, lr}
34018862:	b086      	sub	sp, #24
34018864:	af00      	add	r7, sp, #0
34018866:	6078      	str	r0, [r7, #4]
34018868:	6039      	str	r1, [r7, #0]
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;
  uint32_t t;

  for (i = 0; i < n; i++)
3401886a:	2300      	movs	r3, #0
3401886c:	617b      	str	r3, [r7, #20]
3401886e:	e1b1      	b.n	34018bd4 <LL_ATON_DisableUnits_Init+0x374>
  {
    unitType = LL_ATON_DisableUnits_InitStruct[i].unit.unit_type;
34018870:	697b      	ldr	r3, [r7, #20]
34018872:	009b      	lsls	r3, r3, #2
34018874:	687a      	ldr	r2, [r7, #4]
34018876:	4413      	add	r3, r2
34018878:	781b      	ldrb	r3, [r3, #0]
3401887a:	74fb      	strb	r3, [r7, #19]
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
3401887c:	697b      	ldr	r3, [r7, #20]
3401887e:	009b      	lsls	r3, r3, #2
34018880:	687a      	ldr	r2, [r7, #4]
34018882:	4413      	add	r3, r2
34018884:	885b      	ldrh	r3, [r3, #2]
34018886:	60fb      	str	r3, [r7, #12]

    switch (unitType)
34018888:	7cfb      	ldrb	r3, [r7, #19]
3401888a:	2b08      	cmp	r3, #8
3401888c:	f200 819c 	bhi.w	34018bc8 <LL_ATON_DisableUnits_Init+0x368>
34018890:	a201      	add	r2, pc, #4	@ (adr r2, 34018898 <LL_ATON_DisableUnits_Init+0x38>)
34018892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34018896:	bf00      	nop
34018898:	340188bd 	.word	0x340188bd
3401889c:	34018bc9 	.word	0x34018bc9
340188a0:	3401892d 	.word	0x3401892d
340188a4:	340189a1 	.word	0x340189a1
340188a8:	34018a15 	.word	0x34018a15
340188ac:	34018a89 	.word	0x34018a89
340188b0:	34018b01 	.word	0x34018b01
340188b4:	34018bc9 	.word	0x34018bc9
340188b8:	34018b79 	.word	0x34018b79
    {
#ifdef ATON_STRENG_NUM
    case STRENG:
      ATON_DISABLE_CLR_CONFCLR(STRENG, unitId);
340188bc:	2300      	movs	r3, #0
340188be:	60bb      	str	r3, [r7, #8]
340188c0:	68bb      	ldr	r3, [r7, #8]
340188c2:	f023 0301 	bic.w	r3, r3, #1
340188c6:	60bb      	str	r3, [r7, #8]
340188c8:	68bb      	ldr	r3, [r7, #8]
340188ca:	f043 0302 	orr.w	r3, r3, #2
340188ce:	60bb      	str	r3, [r7, #8]
340188d0:	68fb      	ldr	r3, [r7, #12]
340188d2:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340188d6:	33e5      	adds	r3, #229	@ 0xe5
340188d8:	031b      	lsls	r3, r3, #12
340188da:	461a      	mov	r2, r3
340188dc:	68bb      	ldr	r3, [r7, #8]
340188de:	6013      	str	r3, [r2, #0]
340188e0:	68fb      	ldr	r3, [r7, #12]
340188e2:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340188e6:	33e5      	adds	r3, #229	@ 0xe5
340188e8:	031b      	lsls	r3, r3, #12
340188ea:	681b      	ldr	r3, [r3, #0]
340188ec:	f003 0302 	and.w	r3, r3, #2
340188f0:	2b00      	cmp	r3, #0
340188f2:	d1f5      	bne.n	340188e0 <LL_ATON_DisableUnits_Init+0x80>
340188f4:	2300      	movs	r3, #0
340188f6:	60bb      	str	r3, [r7, #8]
340188f8:	68bb      	ldr	r3, [r7, #8]
340188fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
340188fe:	60bb      	str	r3, [r7, #8]
34018900:	68fb      	ldr	r3, [r7, #12]
34018902:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018906:	33e5      	adds	r3, #229	@ 0xe5
34018908:	031b      	lsls	r3, r3, #12
3401890a:	461a      	mov	r2, r3
3401890c:	68bb      	ldr	r3, [r7, #8]
3401890e:	6013      	str	r3, [r2, #0]
34018910:	68fb      	ldr	r3, [r7, #12]
34018912:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018916:	33e5      	adds	r3, #229	@ 0xe5
34018918:	031b      	lsls	r3, r3, #12
3401891a:	681b      	ldr	r3, [r3, #0]
3401891c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018920:	2b00      	cmp	r3, #0
34018922:	d1f5      	bne.n	34018910 <LL_ATON_DisableUnits_Init+0xb0>
      LL_ATON_DisableClock(ATON_STRENG_CLKB_CLK(unitId));
34018924:	68f8      	ldr	r0, [r7, #12]
34018926:	f001 fbfd 	bl	3401a124 <LL_ATON_DisableClock>
      break;
3401892a:	e150      	b.n	34018bce <LL_ATON_DisableUnits_Init+0x36e>
#endif

#ifdef ATON_CONVACC_NUM
    case CONVACC:
      ATON_DISABLE_CLR_CONFCLR(CONVACC, unitId);
3401892c:	2300      	movs	r3, #0
3401892e:	60bb      	str	r3, [r7, #8]
34018930:	68bb      	ldr	r3, [r7, #8]
34018932:	f023 0301 	bic.w	r3, r3, #1
34018936:	60bb      	str	r3, [r7, #8]
34018938:	68bb      	ldr	r3, [r7, #8]
3401893a:	f043 0302 	orr.w	r3, r3, #2
3401893e:	60bb      	str	r3, [r7, #8]
34018940:	68fb      	ldr	r3, [r7, #12]
34018942:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018946:	33ef      	adds	r3, #239	@ 0xef
34018948:	031b      	lsls	r3, r3, #12
3401894a:	461a      	mov	r2, r3
3401894c:	68bb      	ldr	r3, [r7, #8]
3401894e:	6013      	str	r3, [r2, #0]
34018950:	68fb      	ldr	r3, [r7, #12]
34018952:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018956:	33ef      	adds	r3, #239	@ 0xef
34018958:	031b      	lsls	r3, r3, #12
3401895a:	681b      	ldr	r3, [r3, #0]
3401895c:	f003 0302 	and.w	r3, r3, #2
34018960:	2b00      	cmp	r3, #0
34018962:	d1f5      	bne.n	34018950 <LL_ATON_DisableUnits_Init+0xf0>
34018964:	2300      	movs	r3, #0
34018966:	60bb      	str	r3, [r7, #8]
34018968:	68bb      	ldr	r3, [r7, #8]
3401896a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3401896e:	60bb      	str	r3, [r7, #8]
34018970:	68fb      	ldr	r3, [r7, #12]
34018972:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018976:	33ef      	adds	r3, #239	@ 0xef
34018978:	031b      	lsls	r3, r3, #12
3401897a:	461a      	mov	r2, r3
3401897c:	68bb      	ldr	r3, [r7, #8]
3401897e:	6013      	str	r3, [r2, #0]
34018980:	68fb      	ldr	r3, [r7, #12]
34018982:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018986:	33ef      	adds	r3, #239	@ 0xef
34018988:	031b      	lsls	r3, r3, #12
3401898a:	681b      	ldr	r3, [r3, #0]
3401898c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018990:	2b00      	cmp	r3, #0
34018992:	d1f5      	bne.n	34018980 <LL_ATON_DisableUnits_Init+0x120>
      LL_ATON_DisableClock(ATON_CONVACC_CLKB_CLK(unitId));
34018994:	68fb      	ldr	r3, [r7, #12]
34018996:	330a      	adds	r3, #10
34018998:	4618      	mov	r0, r3
3401899a:	f001 fbc3 	bl	3401a124 <LL_ATON_DisableClock>
      break;
3401899e:	e116      	b.n	34018bce <LL_ATON_DisableUnits_Init+0x36e>
#endif

#ifdef ATON_DECUN_NUM
    case DECUN:
      ATON_DISABLE_CLR_CONFCLR(DECUN, unitId);
340189a0:	2300      	movs	r3, #0
340189a2:	60bb      	str	r3, [r7, #8]
340189a4:	68bb      	ldr	r3, [r7, #8]
340189a6:	f023 0301 	bic.w	r3, r3, #1
340189aa:	60bb      	str	r3, [r7, #8]
340189ac:	68bb      	ldr	r3, [r7, #8]
340189ae:	f043 0302 	orr.w	r3, r3, #2
340189b2:	60bb      	str	r3, [r7, #8]
340189b4:	68fb      	ldr	r3, [r7, #12]
340189b6:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340189ba:	33f3      	adds	r3, #243	@ 0xf3
340189bc:	031b      	lsls	r3, r3, #12
340189be:	461a      	mov	r2, r3
340189c0:	68bb      	ldr	r3, [r7, #8]
340189c2:	6013      	str	r3, [r2, #0]
340189c4:	68fb      	ldr	r3, [r7, #12]
340189c6:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340189ca:	33f3      	adds	r3, #243	@ 0xf3
340189cc:	031b      	lsls	r3, r3, #12
340189ce:	681b      	ldr	r3, [r3, #0]
340189d0:	f003 0302 	and.w	r3, r3, #2
340189d4:	2b00      	cmp	r3, #0
340189d6:	d1f5      	bne.n	340189c4 <LL_ATON_DisableUnits_Init+0x164>
340189d8:	2300      	movs	r3, #0
340189da:	60bb      	str	r3, [r7, #8]
340189dc:	68bb      	ldr	r3, [r7, #8]
340189de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
340189e2:	60bb      	str	r3, [r7, #8]
340189e4:	68fb      	ldr	r3, [r7, #12]
340189e6:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340189ea:	33f3      	adds	r3, #243	@ 0xf3
340189ec:	031b      	lsls	r3, r3, #12
340189ee:	461a      	mov	r2, r3
340189f0:	68bb      	ldr	r3, [r7, #8]
340189f2:	6013      	str	r3, [r2, #0]
340189f4:	68fb      	ldr	r3, [r7, #12]
340189f6:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340189fa:	33f3      	adds	r3, #243	@ 0xf3
340189fc:	031b      	lsls	r3, r3, #12
340189fe:	681b      	ldr	r3, [r3, #0]
34018a00:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018a04:	2b00      	cmp	r3, #0
34018a06:	d1f5      	bne.n	340189f4 <LL_ATON_DisableUnits_Init+0x194>
      LL_ATON_DisableClock(ATON_DECUN_CLKB_CLK(unitId));
34018a08:	68fb      	ldr	r3, [r7, #12]
34018a0a:	330e      	adds	r3, #14
34018a0c:	4618      	mov	r0, r3
34018a0e:	f001 fb89 	bl	3401a124 <LL_ATON_DisableClock>
      break;
34018a12:	e0dc      	b.n	34018bce <LL_ATON_DisableUnits_Init+0x36e>
#endif

#ifdef ATON_ACTIV_NUM
    case ACTIV:
      ATON_DISABLE_CLR_CONFCLR(ACTIV, unitId);
34018a14:	4b74      	ldr	r3, [pc, #464]	@ (34018be8 <LL_ATON_DisableUnits_Init+0x388>)
34018a16:	60bb      	str	r3, [r7, #8]
34018a18:	68bb      	ldr	r3, [r7, #8]
34018a1a:	f023 0301 	bic.w	r3, r3, #1
34018a1e:	60bb      	str	r3, [r7, #8]
34018a20:	68bb      	ldr	r3, [r7, #8]
34018a22:	f043 0302 	orr.w	r3, r3, #2
34018a26:	60bb      	str	r3, [r7, #8]
34018a28:	68fb      	ldr	r3, [r7, #12]
34018a2a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018a2e:	33f5      	adds	r3, #245	@ 0xf5
34018a30:	031b      	lsls	r3, r3, #12
34018a32:	461a      	mov	r2, r3
34018a34:	68bb      	ldr	r3, [r7, #8]
34018a36:	6013      	str	r3, [r2, #0]
34018a38:	68fb      	ldr	r3, [r7, #12]
34018a3a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018a3e:	33f5      	adds	r3, #245	@ 0xf5
34018a40:	031b      	lsls	r3, r3, #12
34018a42:	681b      	ldr	r3, [r3, #0]
34018a44:	f003 0302 	and.w	r3, r3, #2
34018a48:	2b00      	cmp	r3, #0
34018a4a:	d1f5      	bne.n	34018a38 <LL_ATON_DisableUnits_Init+0x1d8>
34018a4c:	4b66      	ldr	r3, [pc, #408]	@ (34018be8 <LL_ATON_DisableUnits_Init+0x388>)
34018a4e:	60bb      	str	r3, [r7, #8]
34018a50:	68bb      	ldr	r3, [r7, #8]
34018a52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34018a56:	60bb      	str	r3, [r7, #8]
34018a58:	68fb      	ldr	r3, [r7, #12]
34018a5a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018a5e:	33f5      	adds	r3, #245	@ 0xf5
34018a60:	031b      	lsls	r3, r3, #12
34018a62:	461a      	mov	r2, r3
34018a64:	68bb      	ldr	r3, [r7, #8]
34018a66:	6013      	str	r3, [r2, #0]
34018a68:	68fb      	ldr	r3, [r7, #12]
34018a6a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018a6e:	33f5      	adds	r3, #245	@ 0xf5
34018a70:	031b      	lsls	r3, r3, #12
34018a72:	681b      	ldr	r3, [r3, #0]
34018a74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018a78:	2b00      	cmp	r3, #0
34018a7a:	d1f5      	bne.n	34018a68 <LL_ATON_DisableUnits_Init+0x208>
      LL_ATON_DisableClock(ATON_ACTIV_CLKB_CLK(unitId));
34018a7c:	68fb      	ldr	r3, [r7, #12]
34018a7e:	3310      	adds	r3, #16
34018a80:	4618      	mov	r0, r3
34018a82:	f001 fb4f 	bl	3401a124 <LL_ATON_DisableClock>
      break;
34018a86:	e0a2      	b.n	34018bce <LL_ATON_DisableUnits_Init+0x36e>
#endif

#ifdef ATON_ARITH_NUM
    case ARITH:
      ATON_DISABLE_CLR_CONFCLR(ARITH, unitId);
34018a88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34018a8c:	60bb      	str	r3, [r7, #8]
34018a8e:	68bb      	ldr	r3, [r7, #8]
34018a90:	f023 0301 	bic.w	r3, r3, #1
34018a94:	60bb      	str	r3, [r7, #8]
34018a96:	68bb      	ldr	r3, [r7, #8]
34018a98:	f043 0302 	orr.w	r3, r3, #2
34018a9c:	60bb      	str	r3, [r7, #8]
34018a9e:	68fb      	ldr	r3, [r7, #12]
34018aa0:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018aa4:	33f7      	adds	r3, #247	@ 0xf7
34018aa6:	031b      	lsls	r3, r3, #12
34018aa8:	461a      	mov	r2, r3
34018aaa:	68bb      	ldr	r3, [r7, #8]
34018aac:	6013      	str	r3, [r2, #0]
34018aae:	68fb      	ldr	r3, [r7, #12]
34018ab0:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018ab4:	33f7      	adds	r3, #247	@ 0xf7
34018ab6:	031b      	lsls	r3, r3, #12
34018ab8:	681b      	ldr	r3, [r3, #0]
34018aba:	f003 0302 	and.w	r3, r3, #2
34018abe:	2b00      	cmp	r3, #0
34018ac0:	d1f5      	bne.n	34018aae <LL_ATON_DisableUnits_Init+0x24e>
34018ac2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34018ac6:	60bb      	str	r3, [r7, #8]
34018ac8:	68bb      	ldr	r3, [r7, #8]
34018aca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34018ace:	60bb      	str	r3, [r7, #8]
34018ad0:	68fb      	ldr	r3, [r7, #12]
34018ad2:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018ad6:	33f7      	adds	r3, #247	@ 0xf7
34018ad8:	031b      	lsls	r3, r3, #12
34018ada:	461a      	mov	r2, r3
34018adc:	68bb      	ldr	r3, [r7, #8]
34018ade:	6013      	str	r3, [r2, #0]
34018ae0:	68fb      	ldr	r3, [r7, #12]
34018ae2:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018ae6:	33f7      	adds	r3, #247	@ 0xf7
34018ae8:	031b      	lsls	r3, r3, #12
34018aea:	681b      	ldr	r3, [r3, #0]
34018aec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018af0:	2b00      	cmp	r3, #0
34018af2:	d1f5      	bne.n	34018ae0 <LL_ATON_DisableUnits_Init+0x280>
      LL_ATON_DisableClock(ATON_ARITH_CLKB_CLK(unitId));
34018af4:	68fb      	ldr	r3, [r7, #12]
34018af6:	3312      	adds	r3, #18
34018af8:	4618      	mov	r0, r3
34018afa:	f001 fb13 	bl	3401a124 <LL_ATON_DisableClock>
      break;
34018afe:	e066      	b.n	34018bce <LL_ATON_DisableUnits_Init+0x36e>
#ifdef ATON_POOL_NUM
    case POOL:
#ifdef POOL_RC14
      ATON_POOL_CTRL_SET(unitId, ATON_POOL_CTRL_SET_EN(ATON_POOL_CTRL_GET(unitId), 0));
#else  // !POOL_RC14
      ATON_DISABLE_CLR_CONFCLR(POOL, unitId);
34018b00:	f44f 0384 	mov.w	r3, #4325376	@ 0x420000
34018b04:	60bb      	str	r3, [r7, #8]
34018b06:	68bb      	ldr	r3, [r7, #8]
34018b08:	f023 0301 	bic.w	r3, r3, #1
34018b0c:	60bb      	str	r3, [r7, #8]
34018b0e:	68bb      	ldr	r3, [r7, #8]
34018b10:	f043 0302 	orr.w	r3, r3, #2
34018b14:	60bb      	str	r3, [r7, #8]
34018b16:	68fb      	ldr	r3, [r7, #12]
34018b18:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018b1c:	33fb      	adds	r3, #251	@ 0xfb
34018b1e:	031b      	lsls	r3, r3, #12
34018b20:	461a      	mov	r2, r3
34018b22:	68bb      	ldr	r3, [r7, #8]
34018b24:	6013      	str	r3, [r2, #0]
34018b26:	68fb      	ldr	r3, [r7, #12]
34018b28:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018b2c:	33fb      	adds	r3, #251	@ 0xfb
34018b2e:	031b      	lsls	r3, r3, #12
34018b30:	681b      	ldr	r3, [r3, #0]
34018b32:	f003 0302 	and.w	r3, r3, #2
34018b36:	2b00      	cmp	r3, #0
34018b38:	d1f5      	bne.n	34018b26 <LL_ATON_DisableUnits_Init+0x2c6>
34018b3a:	f44f 0384 	mov.w	r3, #4325376	@ 0x420000
34018b3e:	60bb      	str	r3, [r7, #8]
34018b40:	68bb      	ldr	r3, [r7, #8]
34018b42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34018b46:	60bb      	str	r3, [r7, #8]
34018b48:	68fb      	ldr	r3, [r7, #12]
34018b4a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018b4e:	33fb      	adds	r3, #251	@ 0xfb
34018b50:	031b      	lsls	r3, r3, #12
34018b52:	461a      	mov	r2, r3
34018b54:	68bb      	ldr	r3, [r7, #8]
34018b56:	6013      	str	r3, [r2, #0]
34018b58:	68fb      	ldr	r3, [r7, #12]
34018b5a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018b5e:	33fb      	adds	r3, #251	@ 0xfb
34018b60:	031b      	lsls	r3, r3, #12
34018b62:	681b      	ldr	r3, [r3, #0]
34018b64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018b68:	2b00      	cmp	r3, #0
34018b6a:	d1f5      	bne.n	34018b58 <LL_ATON_DisableUnits_Init+0x2f8>
#endif // !POOL_RC14

      LL_ATON_DisableClock(ATON_POOL_CLKB_CLK(unitId));
34018b6c:	68fb      	ldr	r3, [r7, #12]
34018b6e:	3316      	adds	r3, #22
34018b70:	4618      	mov	r0, r3
34018b72:	f001 fad7 	bl	3401a124 <LL_ATON_DisableClock>
      break;
34018b76:	e02a      	b.n	34018bce <LL_ATON_DisableUnits_Init+0x36e>
#endif

#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_DISABLE_CLR_CONFCLR(RECBUF, unitId);
34018b78:	2300      	movs	r3, #0
34018b7a:	60bb      	str	r3, [r7, #8]
34018b7c:	68bb      	ldr	r3, [r7, #8]
34018b7e:	f023 0301 	bic.w	r3, r3, #1
34018b82:	60bb      	str	r3, [r7, #8]
34018b84:	68bb      	ldr	r3, [r7, #8]
34018b86:	f043 0302 	orr.w	r3, r3, #2
34018b8a:	60bb      	str	r3, [r7, #8]
34018b8c:	4a17      	ldr	r2, [pc, #92]	@ (34018bec <LL_ATON_DisableUnits_Init+0x38c>)
34018b8e:	68bb      	ldr	r3, [r7, #8]
34018b90:	6013      	str	r3, [r2, #0]
34018b92:	4b16      	ldr	r3, [pc, #88]	@ (34018bec <LL_ATON_DisableUnits_Init+0x38c>)
34018b94:	681b      	ldr	r3, [r3, #0]
34018b96:	f003 0302 	and.w	r3, r3, #2
34018b9a:	2b00      	cmp	r3, #0
34018b9c:	d1f9      	bne.n	34018b92 <LL_ATON_DisableUnits_Init+0x332>
34018b9e:	2300      	movs	r3, #0
34018ba0:	60bb      	str	r3, [r7, #8]
34018ba2:	68bb      	ldr	r3, [r7, #8]
34018ba4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34018ba8:	60bb      	str	r3, [r7, #8]
34018baa:	4a10      	ldr	r2, [pc, #64]	@ (34018bec <LL_ATON_DisableUnits_Init+0x38c>)
34018bac:	68bb      	ldr	r3, [r7, #8]
34018bae:	6013      	str	r3, [r2, #0]
34018bb0:	4b0e      	ldr	r3, [pc, #56]	@ (34018bec <LL_ATON_DisableUnits_Init+0x38c>)
34018bb2:	681b      	ldr	r3, [r3, #0]
34018bb4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018bb8:	2b00      	cmp	r3, #0
34018bba:	d1f9      	bne.n	34018bb0 <LL_ATON_DisableUnits_Init+0x350>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
34018bbc:	68fb      	ldr	r3, [r7, #12]
34018bbe:	3318      	adds	r3, #24
34018bc0:	4618      	mov	r0, r3
34018bc2:	f001 faaf 	bl	3401a124 <LL_ATON_DisableClock>
      break;
34018bc6:	e002      	b.n	34018bce <LL_ATON_DisableUnits_Init+0x36e>
#endif

    default:
      return LL_ATON_INVALID_PARAM;
34018bc8:	f06f 0301 	mvn.w	r3, #1
34018bcc:	e008      	b.n	34018be0 <LL_ATON_DisableUnits_Init+0x380>
  for (i = 0; i < n; i++)
34018bce:	697b      	ldr	r3, [r7, #20]
34018bd0:	3301      	adds	r3, #1
34018bd2:	617b      	str	r3, [r7, #20]
34018bd4:	697a      	ldr	r2, [r7, #20]
34018bd6:	683b      	ldr	r3, [r7, #0]
34018bd8:	429a      	cmp	r2, r3
34018bda:	f6ff ae49 	blt.w	34018870 <LL_ATON_DisableUnits_Init+0x10>
    }
  }

  return LL_ATON_OK;
34018bde:	2300      	movs	r3, #0
}
34018be0:	4618      	mov	r0, r3
34018be2:	3718      	adds	r7, #24
34018be4:	46bd      	mov	sp, r7
34018be6:	bd80      	pop	{r7, pc}
34018be8:	00881080 	.word	0x00881080
34018bec:	580fd000 	.word	0x580fd000

34018bf0 <LL_Streng_TensorInit>:
 * @param  conf Pointer to structure(s) describing initialization parameters
 * @param  n Number of elements in initialization structure array
 * @retval error code. E.g.: Invalid ID, invalid parameters, not idle,..
 */
int LL_Streng_TensorInit(int id, const LL_Streng_TensorInitTypeDef *conf, int n)
{
34018bf0:	b580      	push	{r7, lr}
34018bf2:	b096      	sub	sp, #88	@ 0x58
34018bf4:	af00      	add	r7, sp, #0
34018bf6:	60f8      	str	r0, [r7, #12]
34018bf8:	60b9      	str	r1, [r7, #8]
34018bfa:	607a      	str	r2, [r7, #4]
  uint32_t t;

  /* deferred register values */
  uint32_t t_streng_strd = ATON_STRENG_STRD_DT;
34018bfc:	2300      	movs	r3, #0
34018bfe:	653b      	str	r3, [r7, #80]	@ 0x50
  uint32_t t_streng_cid_cache = ATON_STRENG_CID_CACHE_DT;
34018c00:	2300      	movs	r3, #0
34018c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t t_streng_event = ATON_STRENG_EVENT_DT;
34018c04:	2300      	movs	r3, #0
34018c06:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (id >= ATON_STRENG_NUM)
34018c08:	68fb      	ldr	r3, [r7, #12]
34018c0a:	2b09      	cmp	r3, #9
34018c0c:	dd02      	ble.n	34018c14 <LL_Streng_TensorInit+0x24>
    return LL_ATON_INVALID_ID;
34018c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34018c12:	e342      	b.n	3401929a <LL_Streng_TensorInit+0x6aa>

  LL_ATON_EnableClock(ATON_STRENG_CLKB_CLK(id));
34018c14:	68fb      	ldr	r3, [r7, #12]
34018c16:	4618      	mov	r0, r3
34018c18:	f001 fa56 	bl	3401a0c8 <LL_ATON_EnableClock>

#define _LL_min(x, y) ((x) > (y) ? (y) : (x))

  if (n != 1)
34018c1c:	687b      	ldr	r3, [r7, #4]
34018c1e:	2b01      	cmp	r3, #1
34018c20:	d002      	beq.n	34018c28 <LL_Streng_TensorInit+0x38>
    return -1;
34018c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34018c26:	e338      	b.n	3401929a <LL_Streng_TensorInit+0x6aa>
    // if (conf->dir == 0 && (conf->nbits_in > conf->nbits_out)) return -1;
#ifndef ATON_IMC_NUM
  if (conf->nbits_in > 24 || conf->nbits_out > 24)
34018c28:	68bb      	ldr	r3, [r7, #8]
34018c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
34018c2e:	2b18      	cmp	r3, #24
34018c30:	d804      	bhi.n	34018c3c <LL_Streng_TensorInit+0x4c>
34018c32:	68bb      	ldr	r3, [r7, #8]
34018c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
34018c38:	2b18      	cmp	r3, #24
34018c3a:	d902      	bls.n	34018c42 <LL_Streng_TensorInit+0x52>
    return -1;
34018c3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34018c40:	e32b      	b.n	3401929a <LL_Streng_TensorInit+0x6aa>
#endif

  t = ATON_STRENG_CTRL_DT;
34018c42:	2300      	movs	r3, #0
34018c44:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34018c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018c48:	f023 0208 	bic.w	r2, r3, #8
34018c4c:	68bb      	ldr	r3, [r7, #8]
34018c4e:	781b      	ldrb	r3, [r3, #0]
34018c50:	00db      	lsls	r3, r3, #3
34018c52:	f003 0308 	and.w	r3, r3, #8
34018c56:	4313      	orrs	r3, r2
34018c58:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34018c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018c5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34018c60:	68bb      	ldr	r3, [r7, #8]
34018c62:	781b      	ldrb	r3, [r3, #0]
34018c64:	01db      	lsls	r3, r3, #7
34018c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34018c6a:	4313      	orrs	r3, r2
34018c6c:	657b      	str	r3, [r7, #84]	@ 0x54
#ifdef ATON_STRENG_CTRL_SET_RAW_OUT
  t = ATON_STRENG_CTRL_SET_RAW_OUT(t, conf->raw_out);
34018c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018c70:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34018c74:	68bb      	ldr	r3, [r7, #8]
34018c76:	781b      	ldrb	r3, [r3, #0]
34018c78:	f3c3 0380 	ubfx	r3, r3, #2, #1
34018c7c:	b2db      	uxtb	r3, r3
34018c7e:	025b      	lsls	r3, r3, #9
34018c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34018c84:	4313      	orrs	r3, r2
34018c86:	657b      	str	r3, [r7, #84]	@ 0x54
#else
  /* Hardware feature not supported */
  LL_ATON_ASSERT(conf->raw_out == 0);
#endif
  t = ATON_STRENG_CTRL_SET_NOBLK(t, (conf->noblk != 0));
34018c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018c8a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34018c8e:	68bb      	ldr	r3, [r7, #8]
34018c90:	781b      	ldrb	r3, [r3, #0]
34018c92:	01db      	lsls	r3, r3, #7
34018c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34018c98:	4313      	orrs	r3, r2
34018c9a:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
34018c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018c9e:	f023 0210 	bic.w	r2, r3, #16
34018ca2:	68bb      	ldr	r3, [r7, #8]
34018ca4:	781b      	ldrb	r3, [r3, #0]
34018ca6:	085b      	lsrs	r3, r3, #1
34018ca8:	b2db      	uxtb	r3, r3
34018caa:	f003 0310 	and.w	r3, r3, #16
34018cae:	4313      	orrs	r3, r2
34018cb0:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34018cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018cb4:	f023 0304 	bic.w	r3, r3, #4
34018cb8:	68ba      	ldr	r2, [r7, #8]
34018cba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34018cbc:	2a01      	cmp	r2, #1
34018cbe:	d101      	bne.n	34018cc4 <LL_Streng_TensorInit+0xd4>
34018cc0:	2204      	movs	r2, #4
34018cc2:	e000      	b.n	34018cc6 <LL_Streng_TensorInit+0xd6>
34018cc4:	2200      	movs	r2, #0
34018cc6:	4313      	orrs	r3, r2
34018cc8:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
34018cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018ccc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
34018cd0:	68bb      	ldr	r3, [r7, #8]
34018cd2:	781b      	ldrb	r3, [r3, #0]
34018cd4:	011b      	lsls	r3, r3, #4
34018cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34018cda:	4313      	orrs	r3, r2
34018cdc:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
34018cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018ce0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34018ce4:	68bb      	ldr	r3, [r7, #8]
34018ce6:	781b      	ldrb	r3, [r3, #0]
34018ce8:	021b      	lsls	r3, r3, #8
34018cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34018cee:	4313      	orrs	r3, r2
34018cf0:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34018cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018cf4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34018cf8:	68bb      	ldr	r3, [r7, #8]
34018cfa:	781b      	ldrb	r3, [r3, #0]
34018cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34018d00:	b2db      	uxtb	r3, r3
34018d02:	2b00      	cmp	r3, #0
34018d04:	d008      	beq.n	34018d18 <LL_Streng_TensorInit+0x128>
34018d06:	68bb      	ldr	r3, [r7, #8]
34018d08:	785b      	ldrb	r3, [r3, #1]
34018d0a:	f003 0302 	and.w	r3, r3, #2
34018d0e:	b2db      	uxtb	r3, r3
34018d10:	2b00      	cmp	r3, #0
34018d12:	d101      	bne.n	34018d18 <LL_Streng_TensorInit+0x128>
34018d14:	2301      	movs	r3, #1
34018d16:	e000      	b.n	34018d1a <LL_Streng_TensorInit+0x12a>
34018d18:	2300      	movs	r3, #0
34018d1a:	03db      	lsls	r3, r3, #15
34018d1c:	b29b      	uxth	r3, r3
34018d1e:	4313      	orrs	r3, r2
34018d20:	657b      	str	r3, [r7, #84]	@ 0x54

  int ch_bits[3] = {0, 0, 0};
34018d22:	2300      	movs	r3, #0
34018d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
34018d26:	2300      	movs	r3, #0
34018d28:	633b      	str	r3, [r7, #48]	@ 0x30
34018d2a:	2300      	movs	r3, #0
34018d2c:	637b      	str	r3, [r7, #52]	@ 0x34
  int in_bits[3];
  int out_bits[3];
  int nbits_out = conf->nbits_out;
34018d2e:	68bb      	ldr	r3, [r7, #8]
34018d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
34018d34:	647b      	str	r3, [r7, #68]	@ 0x44
  int nbits_in = conf->nbits_in;
34018d36:	68bb      	ldr	r3, [r7, #8]
34018d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
34018d3c:	643b      	str	r3, [r7, #64]	@ 0x40
  // case 2: stream->bus  --> in_bits >= out_bits -> use lanes but valid for in_bits=8,16,24 for other bit length out is
  // right shifted by (8,16,24) - out_bits
  //                      |
  // case 3:              --> in_bits < out_bits -> use FRONT_GAP

  int io_case = ((conf->dir != 0) << 1);
34018d3e:	68bb      	ldr	r3, [r7, #8]
34018d40:	781b      	ldrb	r3, [r3, #0]
34018d42:	005b      	lsls	r3, r3, #1
34018d44:	f003 0302 	and.w	r3, r3, #2
34018d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34018d4a:	68bb      	ldr	r3, [r7, #8]
34018d4c:	781b      	ldrb	r3, [r3, #0]
34018d4e:	f003 0301 	and.w	r3, r3, #1
34018d52:	b2db      	uxtb	r3, r3
34018d54:	2b00      	cmp	r3, #0
34018d56:	d10c      	bne.n	34018d72 <LL_Streng_TensorInit+0x182>
34018d58:	68bb      	ldr	r3, [r7, #8]
34018d5a:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
34018d5e:	68bb      	ldr	r3, [r7, #8]
34018d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
34018d64:	429a      	cmp	r2, r3
34018d66:	bf94      	ite	ls
34018d68:	2301      	movls	r3, #1
34018d6a:	2300      	movhi	r3, #0
34018d6c:	b2db      	uxtb	r3, r3
34018d6e:	461a      	mov	r2, r3
34018d70:	e00b      	b.n	34018d8a <LL_Streng_TensorInit+0x19a>
34018d72:	68bb      	ldr	r3, [r7, #8]
34018d74:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
34018d78:	68bb      	ldr	r3, [r7, #8]
34018d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
34018d7e:	429a      	cmp	r2, r3
34018d80:	bf34      	ite	cc
34018d82:	2301      	movcc	r3, #1
34018d84:	2300      	movcs	r3, #0
34018d86:	b2db      	uxtb	r3, r3
34018d88:	461a      	mov	r2, r3
34018d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34018d8c:	4413      	add	r3, r2
34018d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  switch (io_case)
34018d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34018d92:	2b03      	cmp	r3, #3
34018d94:	f200 80c8 	bhi.w	34018f28 <LL_Streng_TensorInit+0x338>
34018d98:	a201      	add	r2, pc, #4	@ (adr r2, 34018da0 <LL_Streng_TensorInit+0x1b0>)
34018d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34018d9e:	bf00      	nop
34018da0:	34018db1 	.word	0x34018db1
34018da4:	34018df1 	.word	0x34018df1
34018da8:	34018ead 	.word	0x34018ead
34018dac:	34018e6d 	.word	0x34018e6d
  {
  case 0: // in_bits > out_bits && bus->stream
          // must use FRONT_GAP
  {
    if (conf->mem_lsb)
34018db0:	68bb      	ldr	r3, [r7, #8]
34018db2:	781b      	ldrb	r3, [r3, #0]
34018db4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34018db8:	b2db      	uxtb	r3, r3
34018dba:	2b00      	cmp	r3, #0
34018dbc:	d00b      	beq.n	34018dd6 <LL_Streng_TensorInit+0x1e6>
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34018dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34018dc0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
34018dc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
34018dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018dc8:	1acb      	subs	r3, r1, r3
34018dca:	041b      	lsls	r3, r3, #16
34018dcc:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
34018dd0:	4313      	orrs	r3, r2
34018dd2:	653b      	str	r3, [r7, #80]	@ 0x50
34018dd4:	e00a      	b.n	34018dec <LL_Streng_TensorInit+0x1fc>
    else
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
34018dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34018dd8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34018ddc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
34018dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018de0:	1acb      	subs	r3, r1, r3
34018de2:	061b      	lsls	r3, r3, #24
34018de4:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
34018de8:	4313      	orrs	r3, r2
34018dea:	653b      	str	r3, [r7, #80]	@ 0x50
    nbits_in = nbits_out;
34018dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018dee:	643b      	str	r3, [r7, #64]	@ 0x40
  }
  // intentional fall through
  case 1: // in_bits <= out_bits && bus->stream
    in_bits[0] = _LL_min(8, nbits_in);
34018df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018df2:	2b08      	cmp	r3, #8
34018df4:	bfa8      	it	ge
34018df6:	2308      	movge	r3, #8
34018df8:	623b      	str	r3, [r7, #32]
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34018dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018dfc:	2b08      	cmp	r3, #8
34018dfe:	dd05      	ble.n	34018e0c <LL_Streng_TensorInit+0x21c>
34018e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018e02:	2b10      	cmp	r3, #16
34018e04:	bfa8      	it	ge
34018e06:	2310      	movge	r3, #16
34018e08:	3b08      	subs	r3, #8
34018e0a:	e000      	b.n	34018e0e <LL_Streng_TensorInit+0x21e>
34018e0c:	2300      	movs	r3, #0
34018e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
34018e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018e12:	2b10      	cmp	r3, #16
34018e14:	dd05      	ble.n	34018e22 <LL_Streng_TensorInit+0x232>
34018e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018e18:	2b18      	cmp	r3, #24
34018e1a:	bfa8      	it	ge
34018e1c:	2318      	movge	r3, #24
34018e1e:	3b10      	subs	r3, #16
34018e20:	e000      	b.n	34018e24 <LL_Streng_TensorInit+0x234>
34018e22:	2300      	movs	r3, #0
34018e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (conf->align_right)
34018e26:	68bb      	ldr	r3, [r7, #8]
34018e28:	781b      	ldrb	r3, [r3, #0]
34018e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34018e2e:	b2db      	uxtb	r3, r3
34018e30:	2b00      	cmp	r3, #0
34018e32:	d006      	beq.n	34018e42 <LL_Streng_TensorInit+0x252>
    {
      ch_bits[0] = in_bits[0];
34018e34:	6a3b      	ldr	r3, [r7, #32]
34018e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ch_bits[1] = in_bits[1];
34018e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018e3a:	633b      	str	r3, [r7, #48]	@ 0x30
      ch_bits[2] = in_bits[2];
34018e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34018e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        ch_bits[0] = in_bits[1];
      } // N.B. the DMA stuffs the bits to the left of the channel
      else
        ch_bits[0] = in_bits[0];
    }
    break;
34018e40:	e072      	b.n	34018f28 <LL_Streng_TensorInit+0x338>
      if (nbits_out > 16)
34018e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018e44:	2b10      	cmp	r3, #16
34018e46:	dd06      	ble.n	34018e56 <LL_Streng_TensorInit+0x266>
        ch_bits[2] = in_bits[0];
34018e48:	6a3b      	ldr	r3, [r7, #32]
34018e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        ch_bits[1] = in_bits[1];
34018e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018e4e:	633b      	str	r3, [r7, #48]	@ 0x30
        ch_bits[0] = in_bits[2];
34018e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34018e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018e54:	e068      	b.n	34018f28 <LL_Streng_TensorInit+0x338>
      else if (nbits_out > 8)
34018e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018e58:	2b08      	cmp	r3, #8
34018e5a:	dd04      	ble.n	34018e66 <LL_Streng_TensorInit+0x276>
        ch_bits[1] = in_bits[0];
34018e5c:	6a3b      	ldr	r3, [r7, #32]
34018e5e:	633b      	str	r3, [r7, #48]	@ 0x30
        ch_bits[0] = in_bits[1];
34018e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018e64:	e060      	b.n	34018f28 <LL_Streng_TensorInit+0x338>
        ch_bits[0] = in_bits[0];
34018e66:	6a3b      	ldr	r3, [r7, #32]
34018e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018e6a:	e05d      	b.n	34018f28 <LL_Streng_TensorInit+0x338>
  case 3: // in_bits < out_bits && stream->bus
  {
    if (conf->mem_lsb)
34018e6c:	68bb      	ldr	r3, [r7, #8]
34018e6e:	781b      	ldrb	r3, [r3, #0]
34018e70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34018e74:	b2db      	uxtb	r3, r3
34018e76:	2b00      	cmp	r3, #0
34018e78:	d00b      	beq.n	34018e92 <LL_Streng_TensorInit+0x2a2>
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34018e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34018e7c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
34018e80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
34018e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018e84:	1acb      	subs	r3, r1, r3
34018e86:	041b      	lsls	r3, r3, #16
34018e88:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
34018e8c:	4313      	orrs	r3, r2
34018e8e:	653b      	str	r3, [r7, #80]	@ 0x50
34018e90:	e00a      	b.n	34018ea8 <LL_Streng_TensorInit+0x2b8>
    else
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
34018e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34018e94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34018e98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
34018e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018e9c:	1acb      	subs	r3, r1, r3
34018e9e:	061b      	lsls	r3, r3, #24
34018ea0:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
34018ea4:	4313      	orrs	r3, r2
34018ea6:	653b      	str	r3, [r7, #80]	@ 0x50
    nbits_out = nbits_in;
34018ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  // intentional fall through
  case 2: // in_bits >= out_bits && stream->bus
    out_bits[0] = _LL_min(8, nbits_out);
34018eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018eae:	2b08      	cmp	r3, #8
34018eb0:	bfa8      	it	ge
34018eb2:	2308      	movge	r3, #8
34018eb4:	617b      	str	r3, [r7, #20]
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34018eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018eb8:	2b08      	cmp	r3, #8
34018eba:	dd05      	ble.n	34018ec8 <LL_Streng_TensorInit+0x2d8>
34018ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018ebe:	2b10      	cmp	r3, #16
34018ec0:	bfa8      	it	ge
34018ec2:	2310      	movge	r3, #16
34018ec4:	3b08      	subs	r3, #8
34018ec6:	e000      	b.n	34018eca <LL_Streng_TensorInit+0x2da>
34018ec8:	2300      	movs	r3, #0
34018eca:	61bb      	str	r3, [r7, #24]
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34018ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018ece:	2b10      	cmp	r3, #16
34018ed0:	dd05      	ble.n	34018ede <LL_Streng_TensorInit+0x2ee>
34018ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018ed4:	2b18      	cmp	r3, #24
34018ed6:	bfa8      	it	ge
34018ed8:	2318      	movge	r3, #24
34018eda:	3b10      	subs	r3, #16
34018edc:	e000      	b.n	34018ee0 <LL_Streng_TensorInit+0x2f0>
34018ede:	2300      	movs	r3, #0
34018ee0:	61fb      	str	r3, [r7, #28]
    if (conf->align_right)
34018ee2:	68bb      	ldr	r3, [r7, #8]
34018ee4:	781b      	ldrb	r3, [r3, #0]
34018ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34018eea:	b2db      	uxtb	r3, r3
34018eec:	2b00      	cmp	r3, #0
34018eee:	d006      	beq.n	34018efe <LL_Streng_TensorInit+0x30e>
    {
      ch_bits[0] = out_bits[0];
34018ef0:	697b      	ldr	r3, [r7, #20]
34018ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ch_bits[1] = out_bits[1];
34018ef4:	69bb      	ldr	r3, [r7, #24]
34018ef6:	633b      	str	r3, [r7, #48]	@ 0x30
      ch_bits[2] = out_bits[2];
34018ef8:	69fb      	ldr	r3, [r7, #28]
34018efa:	637b      	str	r3, [r7, #52]	@ 0x34
        ch_bits[0] = out_bits[1];
      } // N.B. the DMA stuffs the bits to the left of the channel
      else
        ch_bits[0] = out_bits[0];
    }
    break;
34018efc:	e013      	b.n	34018f26 <LL_Streng_TensorInit+0x336>
      if (nbits_in > 16)
34018efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018f00:	2b10      	cmp	r3, #16
34018f02:	dd06      	ble.n	34018f12 <LL_Streng_TensorInit+0x322>
        ch_bits[2] = out_bits[0];
34018f04:	697b      	ldr	r3, [r7, #20]
34018f06:	637b      	str	r3, [r7, #52]	@ 0x34
        ch_bits[1] = out_bits[1];
34018f08:	69bb      	ldr	r3, [r7, #24]
34018f0a:	633b      	str	r3, [r7, #48]	@ 0x30
        ch_bits[0] = out_bits[2];
34018f0c:	69fb      	ldr	r3, [r7, #28]
34018f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018f10:	e009      	b.n	34018f26 <LL_Streng_TensorInit+0x336>
      else if (nbits_in > 8)
34018f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018f14:	2b08      	cmp	r3, #8
34018f16:	dd04      	ble.n	34018f22 <LL_Streng_TensorInit+0x332>
        ch_bits[1] = out_bits[0];
34018f18:	697b      	ldr	r3, [r7, #20]
34018f1a:	633b      	str	r3, [r7, #48]	@ 0x30
        ch_bits[0] = out_bits[1];
34018f1c:	69bb      	ldr	r3, [r7, #24]
34018f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018f20:	e001      	b.n	34018f26 <LL_Streng_TensorInit+0x336>
        ch_bits[0] = out_bits[0];
34018f22:	697b      	ldr	r3, [r7, #20]
34018f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018f26:	bf00      	nop
  }

/* Take care of N64 single size register. TODO: double check this  */
#ifdef ATON_STRENG_CTRL_SET_SIZE1
  t = ATON_STRENG_CTRL_SET_SIZE0(t, ch_bits[0]);
34018f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018f2a:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
34018f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34018f30:	041b      	lsls	r3, r3, #16
34018f32:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
34018f36:	4313      	orrs	r3, r2
34018f38:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_SIZE1(t, ch_bits[1]);
34018f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018f3c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
34018f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34018f42:	051b      	lsls	r3, r3, #20
34018f44:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
34018f48:	4313      	orrs	r3, r2
34018f4a:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_SIZE2(t, ch_bits[2]);
34018f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018f4e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
34018f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34018f54:	061b      	lsls	r3, r3, #24
34018f56:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
34018f5a:	4313      	orrs	r3, r2
34018f5c:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_CTRL_SET_SIZE0(t, conf->nbits_out);
  else
    t = ATON_STRENG_CTRL_SET_SIZE0(t, conf->nbits_in);
#endif

  ATON_STRENG_CTRL_SET(id, t);
34018f5e:	68fb      	ldr	r3, [r7, #12]
34018f60:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018f64:	33e5      	adds	r3, #229	@ 0xe5
34018f66:	031b      	lsls	r3, r3, #12
34018f68:	461a      	mov	r2, r3
34018f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018f6c:	6013      	str	r3, [r2, #0]

  // ATON_STRENG_ADDR_SET(id, conf->addr_start.i);
  ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_ADDR_ADDR(id)), conf->addr_base.i,
34018f6e:	68bb      	ldr	r3, [r7, #8]
34018f70:	6859      	ldr	r1, [r3, #4]
34018f72:	68bb      	ldr	r3, [r7, #8]
34018f74:	689a      	ldr	r2, [r3, #8]
34018f76:	68fb      	ldr	r3, [r7, #12]
34018f78:	0318      	lsls	r0, r3, #12
34018f7a:	4b2a      	ldr	r3, [pc, #168]	@ (34019024 <LL_Streng_TensorInit+0x434>)
34018f7c:	4403      	add	r3, r0
34018f7e:	4618      	mov	r0, r3
34018f80:	188b      	adds	r3, r1, r2
34018f82:	6003      	str	r3, [r0, #0]
                       conf->offset_start);

  if (conf->raw)
34018f84:	68bb      	ldr	r3, [r7, #8]
34018f86:	781b      	ldrb	r3, [r3, #0]
34018f88:	f003 0302 	and.w	r3, r3, #2
34018f8c:	b2db      	uxtb	r3, r3
34018f8e:	2b00      	cmp	r3, #0
34018f90:	d025      	beq.n	34018fde <LL_Streng_TensorInit+0x3ee>
  {
    if (conf->frame_count)
34018f92:	68bb      	ldr	r3, [r7, #8]
34018f94:	695b      	ldr	r3, [r3, #20]
34018f96:	2b00      	cmp	r3, #0
34018f98:	d003      	beq.n	34018fa2 <LL_Streng_TensorInit+0x3b2>
      t = conf->frame_count;
34018f9a:	68bb      	ldr	r3, [r7, #8]
34018f9c:	695b      	ldr	r3, [r3, #20]
34018f9e:	657b      	str	r3, [r7, #84]	@ 0x54
34018fa0:	e015      	b.n	34018fce <LL_Streng_TensorInit+0x3de>
    else
    {
      // N.B. end - start must contain padding if nbits_in is not power of two
      t = (LL_Streng_len(conf) * 8) / (conf->dir == 0 ? conf->nbits_in : conf->nbits_out);
34018fa2:	68b8      	ldr	r0, [r7, #8]
34018fa4:	f7fe ff20 	bl	34017de8 <LL_Streng_len>
34018fa8:	4603      	mov	r3, r0
34018faa:	00db      	lsls	r3, r3, #3
34018fac:	68ba      	ldr	r2, [r7, #8]
34018fae:	7812      	ldrb	r2, [r2, #0]
34018fb0:	f3c2 0200 	ubfx	r2, r2, #0, #1
34018fb4:	b2d2      	uxtb	r2, r2
34018fb6:	2a00      	cmp	r2, #0
34018fb8:	d003      	beq.n	34018fc2 <LL_Streng_TensorInit+0x3d2>
34018fba:	68ba      	ldr	r2, [r7, #8]
34018fbc:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
34018fc0:	e002      	b.n	34018fc8 <LL_Streng_TensorInit+0x3d8>
34018fc2:	68ba      	ldr	r2, [r7, #8]
34018fc4:	f892 203c 	ldrb.w	r2, [r2, #60]	@ 0x3c
34018fc8:	fbb3 f3f2 	udiv	r3, r3, r2
34018fcc:	657b      	str	r3, [r7, #84]	@ 0x54
    }
    ATON_STRENG_FSIZE_SET(id, t);
34018fce:	68fb      	ldr	r3, [r7, #12]
34018fd0:	031a      	lsls	r2, r3, #12
34018fd2:	4b15      	ldr	r3, [pc, #84]	@ (34019028 <LL_Streng_TensorInit+0x438>)
34018fd4:	4413      	add	r3, r2
34018fd6:	461a      	mov	r2, r3
34018fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018fda:	6013      	str	r3, [r2, #0]
34018fdc:	e053      	b.n	34019086 <LL_Streng_TensorInit+0x496>
  }
  else
  {
    t = ATON_STRENG_FSIZE_DT;
34018fde:	2300      	movs	r3, #0
34018fe0:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_FSIZE_SET_WIDTH(t, conf->fwidth);
34018fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018fe4:	0c1b      	lsrs	r3, r3, #16
34018fe6:	041b      	lsls	r3, r3, #16
34018fe8:	68ba      	ldr	r2, [r7, #8]
34018fea:	6992      	ldr	r2, [r2, #24]
34018fec:	b292      	uxth	r2, r2
34018fee:	4313      	orrs	r3, r2
34018ff0:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
34018ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018ff4:	b29a      	uxth	r2, r3
34018ff6:	68bb      	ldr	r3, [r7, #8]
34018ff8:	69db      	ldr	r3, [r3, #28]
34018ffa:	041b      	lsls	r3, r3, #16
34018ffc:	4313      	orrs	r3, r2
34018ffe:	657b      	str	r3, [r7, #84]	@ 0x54
    ATON_STRENG_FSIZE_SET(id, t);
34019000:	68fb      	ldr	r3, [r7, #12]
34019002:	031a      	lsls	r2, r3, #12
34019004:	4b08      	ldr	r3, [pc, #32]	@ (34019028 <LL_Streng_TensorInit+0x438>)
34019006:	4413      	add	r3, r2
34019008:	461a      	mov	r2, r3
3401900a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401900c:	6013      	str	r3, [r2, #0]

    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
3401900e:	68bb      	ldr	r3, [r7, #8]
34019010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019012:	2b00      	cmp	r3, #0
34019014:	d10a      	bne.n	3401902c <LL_Streng_TensorInit+0x43c>
34019016:	68bb      	ldr	r3, [r7, #8]
34019018:	699b      	ldr	r3, [r3, #24]
3401901a:	68ba      	ldr	r2, [r7, #8]
3401901c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3401901e:	fb02 f303 	mul.w	r3, r2, r3
34019022:	e005      	b.n	34019030 <LL_Streng_TensorInit+0x440>
34019024:	580e5008 	.word	0x580e5008
34019028:	580e500c 	.word	0x580e500c
3401902c:	68bb      	ldr	r3, [r7, #8]
3401902e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019030:	63bb      	str	r3, [r7, #56]	@ 0x38
    // if line_offset is left=0 then it's computed from the standard geometry of lines and batch
    t_streng_strd = ATON_STRENG_STRD_SET_LOFF(t_streng_strd, line_offset);
34019032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34019034:	0c1b      	lsrs	r3, r3, #16
34019036:	041b      	lsls	r3, r3, #16
34019038:	6bba      	ldr	r2, [r7, #56]	@ 0x38
3401903a:	b292      	uxth	r2, r2
3401903c:	4313      	orrs	r3, r2
3401903e:	653b      	str	r3, [r7, #80]	@ 0x50

#if defined(ATON_STRENG_CID_CACHE_SET_LOFF_MSB)
    t = t_streng_cid_cache;
34019040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34019042:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_CID_CACHE_SET_LOFF_MSB(t, (line_offset >> ATON_STRENG_STRD_LOFF_W));
34019044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019046:	b29a      	uxth	r2, r3
34019048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3401904a:	0c1b      	lsrs	r3, r3, #16
3401904c:	041b      	lsls	r3, r3, #16
3401904e:	4313      	orrs	r3, r2
34019050:	657b      	str	r3, [r7, #84]	@ 0x54
    t_streng_cid_cache = t;
34019052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019054:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif

    t = ATON_STRENG_DEPTH_DT;
34019056:	2300      	movs	r3, #0
34019058:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_DEPTH_SET_SIZE(t, conf->batch_depth);
3401905a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401905c:	0c1b      	lsrs	r3, r3, #16
3401905e:	041b      	lsls	r3, r3, #16
34019060:	68ba      	ldr	r2, [r7, #8]
34019062:	6a12      	ldr	r2, [r2, #32]
34019064:	b292      	uxth	r2, r2
34019066:	4313      	orrs	r3, r2
34019068:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_DEPTH_SET_OFFSET(t, conf->batch_offset);
3401906a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401906c:	b29a      	uxth	r2, r3
3401906e:	68bb      	ldr	r3, [r7, #8]
34019070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019072:	041b      	lsls	r3, r3, #16
34019074:	4313      	orrs	r3, r2
34019076:	657b      	str	r3, [r7, #84]	@ 0x54
    ATON_STRENG_DEPTH_SET(id, t);
34019078:	68fb      	ldr	r3, [r7, #12]
3401907a:	031a      	lsls	r2, r3, #12
3401907c:	4b89      	ldr	r3, [pc, #548]	@ (340192a4 <LL_Streng_TensorInit+0x6b4>)
3401907e:	4413      	add	r3, r2
34019080:	461a      	mov	r2, r3
34019082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019084:	6013      	str	r3, [r2, #0]
  }

  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
34019086:	68fb      	ldr	r3, [r7, #12]
34019088:	031a      	lsls	r2, r3, #12
3401908a:	4b87      	ldr	r3, [pc, #540]	@ (340192a8 <LL_Streng_TensorInit+0x6b8>)
3401908c:	4413      	add	r3, r2
3401908e:	461a      	mov	r2, r3
34019090:	68bb      	ldr	r3, [r7, #8]
34019092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34019094:	6013      	str	r3, [r2, #0]
  ATON_STRENG_FRAME_RPT_SET(id, conf->frame_loop_cnt);
34019096:	68fb      	ldr	r3, [r7, #12]
34019098:	031a      	lsls	r2, r3, #12
3401909a:	4b84      	ldr	r3, [pc, #528]	@ (340192ac <LL_Streng_TensorInit+0x6bc>)
3401909c:	4413      	add	r3, r2
3401909e:	461a      	mov	r2, r3
340190a0:	68bb      	ldr	r3, [r7, #8]
340190a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340190a4:	6013      	str	r3, [r2, #0]
  ATON_STRENG_FOFFSET_SET(id, conf->frame_offset);
340190a6:	68fb      	ldr	r3, [r7, #12]
340190a8:	031a      	lsls	r2, r3, #12
340190aa:	4b81      	ldr	r3, [pc, #516]	@ (340192b0 <LL_Streng_TensorInit+0x6c0>)
340190ac:	4413      	add	r3, r2
340190ae:	461a      	mov	r2, r3
340190b0:	68bb      	ldr	r3, [r7, #8]
340190b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340190b4:	6013      	str	r3, [r2, #0]

  t = ATON_STRENG_LIMITEN_DT; // all other fields set to zero
340190b6:	2302      	movs	r3, #2
340190b8:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_LIMITEN_SET_FRAMELIMIT(t, 1);
340190ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190bc:	f043 0304 	orr.w	r3, r3, #4
340190c0:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined(ATON_STRENG_LIMITEN_SET_DOFF_MSB)
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
340190c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190c4:	b29a      	uxth	r2, r3
340190c6:	68bb      	ldr	r3, [r7, #8]
340190c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340190ca:	0c1b      	lsrs	r3, r3, #16
340190cc:	041b      	lsls	r3, r3, #16
340190ce:	4313      	orrs	r3, r2
340190d0:	657b      	str	r3, [r7, #84]	@ 0x54
#endif
  ATON_STRENG_LIMITEN_SET(id, t);
340190d2:	68fb      	ldr	r3, [r7, #12]
340190d4:	031a      	lsls	r2, r3, #12
340190d6:	4b77      	ldr	r3, [pc, #476]	@ (340192b4 <LL_Streng_TensorInit+0x6c4>)
340190d8:	4413      	add	r3, r2
340190da:	461a      	mov	r2, r3
340190dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190de:	6013      	str	r3, [r2, #0]

  if (/*(conf->dir == 0) && */ (conf->offset_limit != 0x0))
340190e0:	68bb      	ldr	r3, [r7, #8]
340190e2:	691b      	ldr	r3, [r3, #16]
340190e4:	2b00      	cmp	r3, #0
340190e6:	d01a      	beq.n	3401911e <LL_Streng_TensorInit+0x52e>
  {
    t = ATON_STRENG_LIMITEN_SET_ADDRLIMIT(t, 1);
340190e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190ea:	f043 0301 	orr.w	r3, r3, #1
340190ee:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_LIMITEN_SET_STOPPREFTC(t, 1);
340190f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190f2:	f043 0302 	orr.w	r3, r3, #2
340190f6:	657b      	str	r3, [r7, #84]	@ 0x54
    ATON_STRENG_LIMITEN_SET(id, t);
340190f8:	68fb      	ldr	r3, [r7, #12]
340190fa:	031a      	lsls	r2, r3, #12
340190fc:	4b6d      	ldr	r3, [pc, #436]	@ (340192b4 <LL_Streng_TensorInit+0x6c4>)
340190fe:	4413      	add	r3, r2
34019100:	461a      	mov	r2, r3
34019102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019104:	6013      	str	r3, [r2, #0]
    // NOTE: limiter is to be set to last accessible byte address
    // ATON_STRENG_LIMITADDR_SET(id, (conf->addr_limit.i - 1));
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
34019106:	68bb      	ldr	r3, [r7, #8]
34019108:	685a      	ldr	r2, [r3, #4]
3401910a:	68bb      	ldr	r3, [r7, #8]
3401910c:	691b      	ldr	r3, [r3, #16]
3401910e:	441a      	add	r2, r3
34019110:	68fb      	ldr	r3, [r7, #12]
34019112:	0319      	lsls	r1, r3, #12
34019114:	4b68      	ldr	r3, [pc, #416]	@ (340192b8 <LL_Streng_TensorInit+0x6c8>)
34019116:	440b      	add	r3, r1
34019118:	4619      	mov	r1, r3
3401911a:	1e53      	subs	r3, r2, #1
3401911c:	600b      	str	r3, [r1, #0]
                         conf->offset_limit - 1);
  }

  ATON_STRENG_LIMIT_SET(id, conf->frame_tot_cnt);
3401911e:	68fb      	ldr	r3, [r7, #12]
34019120:	031a      	lsls	r2, r3, #12
34019122:	4b66      	ldr	r3, [pc, #408]	@ (340192bc <LL_Streng_TensorInit+0x6cc>)
34019124:	4413      	add	r3, r2
34019126:	461a      	mov	r2, r3
34019128:	68bb      	ldr	r3, [r7, #8]
3401912a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401912c:	6013      	str	r3, [r2, #0]
  // LL_ATON_PRINTF("frame_tot_cnt=%d\n", conf->frame_tot_cnt);

#if defined(ATON_STRENG_CID_CACHE_SET_CID)
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CID(t_streng_cid_cache, conf->bus_cid);
3401912e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34019130:	f023 0307 	bic.w	r3, r3, #7
34019134:	68ba      	ldr	r2, [r7, #8]
34019136:	7852      	ldrb	r2, [r2, #1]
34019138:	f3c2 0282 	ubfx	r2, r2, #2, #3
3401913c:	b2d2      	uxtb	r2, r2
3401913e:	4313      	orrs	r3, r2
34019140:	64fb      	str	r3, [r7, #76]	@ 0x4c
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
34019142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34019144:	f023 0208 	bic.w	r2, r3, #8
34019148:	68bb      	ldr	r3, [r7, #8]
3401914a:	785b      	ldrb	r3, [r3, #1]
3401914c:	f3c3 1340 	ubfx	r3, r3, #5, #1
34019150:	b2db      	uxtb	r3, r3
34019152:	00db      	lsls	r3, r3, #3
34019154:	f003 0308 	and.w	r3, r3, #8
34019158:	4313      	orrs	r3, r2
3401915a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
3401915c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3401915e:	f023 0210 	bic.w	r2, r3, #16
34019162:	68bb      	ldr	r3, [r7, #8]
34019164:	785b      	ldrb	r3, [r3, #1]
34019166:	f3c3 1380 	ubfx	r3, r3, #6, #1
3401916a:	b2db      	uxtb	r3, r3
3401916c:	011b      	lsls	r3, r3, #4
3401916e:	f003 0310 	and.w	r3, r3, #16
34019172:	4313      	orrs	r3, r2
34019174:	64fb      	str	r3, [r7, #76]	@ 0x4c
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_PFETCH(t_streng_cid_cache, conf->bus_pfetch);
34019176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34019178:	f023 0220 	bic.w	r2, r3, #32
3401917c:	68bb      	ldr	r3, [r7, #8]
3401917e:	785b      	ldrb	r3, [r3, #1]
34019180:	f3c3 13c0 	ubfx	r3, r3, #7, #1
34019184:	b2db      	uxtb	r3, r3
34019186:	015b      	lsls	r3, r3, #5
34019188:	f003 0320 	and.w	r3, r3, #32
3401918c:	4313      	orrs	r3, r2
3401918e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34019190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34019192:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
34019196:	68bb      	ldr	r3, [r7, #8]
34019198:	789b      	ldrb	r3, [r3, #2]
3401919a:	f3c3 0301 	ubfx	r3, r3, #0, #2
3401919e:	b2db      	uxtb	r3, r3
340191a0:	019b      	lsls	r3, r3, #6
340191a2:	b2db      	uxtb	r3, r3
340191a4:	4313      	orrs	r3, r2
340191a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif

  /* Enable event interrupts */
  if (conf->dir == 1)
340191a8:	68bb      	ldr	r3, [r7, #8]
340191aa:	781b      	ldrb	r3, [r3, #0]
340191ac:	f003 0301 	and.w	r3, r3, #1
340191b0:	b2db      	uxtb	r3, r3
340191b2:	2b00      	cmp	r3, #0
340191b4:	d005      	beq.n	340191c2 <LL_Streng_TensorInit+0x5d2>
  {
#if LL_ATON_EN_EVENT_IRQ
    t_streng_event = 0;
340191b6:	2300      	movs	r3, #0
340191b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    t_streng_event = ATON_STRENG_EVENT_SET_EN_OFLOW_FRM(t_streng_event, 1); // enable frame overflow interrupt
340191ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
340191bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
340191c0:	64bb      	str	r3, [r7, #72]	@ 0x48
#endif // LL_ATON_EN_EVENT_IRQ
  }

  /* Enable illegal configuration interrupts */
#if LL_ATON_EN_ERROR_IRQ
  t = t_streng_event;
340191c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
340191c4:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_EVENT_SET_EN_ILLCFG(t, 1); // Enable Illegal Configuration interrupt
340191c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340191c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
340191cc:	657b      	str	r3, [r7, #84]	@ 0x54
  // t = ATON_STRENG_EVENT_SET_EN_FMTMM(t, 1); // Enable Format Mismatch interrupt (intentionally not enabled)
  t_streng_event = t;
340191ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340191d0:	64bb      	str	r3, [r7, #72]	@ 0x48
#endif // LL_ATON_EN_ERROR_IRQ

  if ((conf->dir == 0) && conf->sync_with_other)
340191d2:	68bb      	ldr	r3, [r7, #8]
340191d4:	781b      	ldrb	r3, [r3, #0]
340191d6:	f003 0301 	and.w	r3, r3, #1
340191da:	b2db      	uxtb	r3, r3
340191dc:	2b00      	cmp	r3, #0
340191de:	d118      	bne.n	34019212 <LL_Streng_TensorInit+0x622>
340191e0:	68bb      	ldr	r3, [r7, #8]
340191e2:	785b      	ldrb	r3, [r3, #1]
340191e4:	f003 0301 	and.w	r3, r3, #1
340191e8:	b2db      	uxtb	r3, r3
340191ea:	2b00      	cmp	r3, #0
340191ec:	d011      	beq.n	34019212 <LL_Streng_TensorInit+0x622>
  {
    t = t_streng_event;
340191ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
340191f0:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_EVENT_SET_FRMTRG_EN(t, 1);               // Enable synchronizations of frames with other dma
340191f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340191f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
340191f8:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
340191fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340191fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
34019200:	68bb      	ldr	r3, [r7, #8]
34019202:	78db      	ldrb	r3, [r3, #3]
34019204:	061b      	lsls	r3, r3, #24
34019206:	f003 53f8 	and.w	r3, r3, #520093696	@ 0x1f000000
3401920a:	4313      	orrs	r3, r2
3401920c:	657b      	str	r3, [r7, #84]	@ 0x54
    t_streng_event = t;
3401920e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019210:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

#if 1
  t = ATON_STRENG_POS_DT;
34019212:	4b2b      	ldr	r3, [pc, #172]	@ (340192c0 <LL_Streng_TensorInit+0x6d0>)
34019214:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_POS_SET_GAPCYCLES(t, 0); // set interline gap cycle to 0, as it should be safe to do so
34019216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019218:	b29b      	uxth	r3, r3
3401921a:	657b      	str	r3, [r7, #84]	@ 0x54
  ATON_STRENG_POS_SET(id, t);
3401921c:	68fb      	ldr	r3, [r7, #12]
3401921e:	031a      	lsls	r2, r3, #12
34019220:	4b28      	ldr	r3, [pc, #160]	@ (340192c4 <LL_Streng_TensorInit+0x6d4>)
34019222:	4413      	add	r3, r2
34019224:	461a      	mov	r2, r3
34019226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019228:	6013      	str	r3, [r2, #0]
#endif

  /* deferred register setting */
  ATON_STRENG_STRD_SET(id, t_streng_strd);
3401922a:	68fb      	ldr	r3, [r7, #12]
3401922c:	031a      	lsls	r2, r3, #12
3401922e:	4b26      	ldr	r3, [pc, #152]	@ (340192c8 <LL_Streng_TensorInit+0x6d8>)
34019230:	4413      	add	r3, r2
34019232:	461a      	mov	r2, r3
34019234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34019236:	6013      	str	r3, [r2, #0]
  ATON_STRENG_CID_CACHE_SET(id, t_streng_cid_cache);
34019238:	68fb      	ldr	r3, [r7, #12]
3401923a:	031a      	lsls	r2, r3, #12
3401923c:	4b23      	ldr	r3, [pc, #140]	@ (340192cc <LL_Streng_TensorInit+0x6dc>)
3401923e:	4413      	add	r3, r2
34019240:	461a      	mov	r2, r3
34019242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34019244:	6013      	str	r3, [r2, #0]
  ATON_STRENG_EVENT_SET(id, t_streng_event);
34019246:	68fb      	ldr	r3, [r7, #12]
34019248:	031a      	lsls	r2, r3, #12
3401924a:	4b21      	ldr	r3, [pc, #132]	@ (340192d0 <LL_Streng_TensorInit+0x6e0>)
3401924c:	4413      	add	r3, r2
3401924e:	461a      	mov	r2, r3
34019250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34019252:	6013      	str	r3, [r2, #0]

  /* Ciphering settings */
#if (ATON_STRENG_VERSION_ENCR_DT == 1)
  t = ATON_STRENG_ENCR_MSB_DT;
34019254:	2300      	movs	r3, #0
34019256:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_ENCR_MSB_SET_EN(t, conf->cipher_en);
34019258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401925a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
3401925e:	68bb      	ldr	r3, [r7, #8]
34019260:	789b      	ldrb	r3, [r3, #2]
34019262:	f3c3 0380 	ubfx	r3, r3, #2, #1
34019266:	b2db      	uxtb	r3, r3
34019268:	031b      	lsls	r3, r3, #12
3401926a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3401926e:	4313      	orrs	r3, r2
34019270:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
34019272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019274:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
34019278:	68bb      	ldr	r3, [r7, #8]
3401927a:	789b      	ldrb	r3, [r3, #2]
3401927c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
34019280:	b2db      	uxtb	r3, r3
34019282:	039b      	lsls	r3, r3, #14
34019284:	b29b      	uxth	r3, r3
34019286:	4313      	orrs	r3, r2
34019288:	657b      	str	r3, [r7, #84]	@ 0x54
  ATON_STRENG_ENCR_MSB_SET(id, t);
3401928a:	68fb      	ldr	r3, [r7, #12]
3401928c:	031a      	lsls	r2, r3, #12
3401928e:	4b11      	ldr	r3, [pc, #68]	@ (340192d4 <LL_Streng_TensorInit+0x6e4>)
34019290:	4413      	add	r3, r2
34019292:	461a      	mov	r2, r3
34019294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019296:	6013      	str	r3, [r2, #0]
#endif

  return 0;
34019298:	2300      	movs	r3, #0
}
3401929a:	4618      	mov	r0, r3
3401929c:	3758      	adds	r7, #88	@ 0x58
3401929e:	46bd      	mov	sp, r7
340192a0:	bd80      	pop	{r7, pc}
340192a2:	bf00      	nop
340192a4:	580e5010 	.word	0x580e5010
340192a8:	580e5020 	.word	0x580e5020
340192ac:	580e501c 	.word	0x580e501c
340192b0:	580e5018 	.word	0x580e5018
340192b4:	580e5030 	.word	0x580e5030
340192b8:	580e5038 	.word	0x580e5038
340192bc:	580e5034 	.word	0x580e5034
340192c0:	00080024 	.word	0x00080024
340192c4:	580e5024 	.word	0x580e5024
340192c8:	580e5014 	.word	0x580e5014
340192cc:	580e5048 	.word	0x580e5048
340192d0:	580e5028 	.word	0x580e5028
340192d4:	580e5044 	.word	0x580e5044

340192d8 <__atonn_getSrcPortID>:
}
#endif

unsigned __atonn_getSrcPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
340192d8:	b590      	push	{r4, r7, lr}
340192da:	b083      	sub	sp, #12
340192dc:	af00      	add	r7, sp, #0
340192de:	4604      	mov	r4, r0
340192e0:	4608      	mov	r0, r1
340192e2:	4611      	mov	r1, r2
340192e4:	461a      	mov	r2, r3
340192e6:	4623      	mov	r3, r4
340192e8:	71fb      	strb	r3, [r7, #7]
340192ea:	4603      	mov	r3, r0
340192ec:	71bb      	strb	r3, [r7, #6]
340192ee:	460b      	mov	r3, r1
340192f0:	717b      	strb	r3, [r7, #5]
340192f2:	4613      	mov	r3, r2
340192f4:	713b      	strb	r3, [r7, #4]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
340192f6:	79bb      	ldrb	r3, [r7, #6]
340192f8:	2b00      	cmp	r3, #0
340192fa:	d006      	beq.n	3401930a <__atonn_getSrcPortID+0x32>
340192fc:	4b66      	ldr	r3, [pc, #408]	@ (34019498 <__atonn_getSrcPortID+0x1c0>)
340192fe:	4a67      	ldr	r2, [pc, #412]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
34019300:	f240 313e 	movw	r1, #830	@ 0x33e
34019304:	4866      	ldr	r0, [pc, #408]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
34019306:	f001 ffcb 	bl	3401b2a0 <__assert_func>
  switch (sut)
3401930a:	79fb      	ldrb	r3, [r7, #7]
3401930c:	2b02      	cmp	r3, #2
3401930e:	f000 80b6 	beq.w	3401947e <__atonn_getSrcPortID+0x1a6>
34019312:	2b02      	cmp	r3, #2
34019314:	f300 80ba 	bgt.w	3401948c <__atonn_getSrcPortID+0x1b4>
34019318:	2b00      	cmp	r3, #0
3401931a:	d003      	beq.n	34019324 <__atonn_getSrcPortID+0x4c>
3401931c:	2b01      	cmp	r3, #1
3401931e:	f000 80a7 	beq.w	34019470 <__atonn_getSrcPortID+0x198>
34019322:	e0b3      	b.n	3401948c <__atonn_getSrcPortID+0x1b4>
  {
  case STRSWITCH:
    switch (aut)
34019324:	797b      	ldrb	r3, [r7, #5]
34019326:	2b06      	cmp	r3, #6
34019328:	f200 809b 	bhi.w	34019462 <__atonn_getSrcPortID+0x18a>
3401932c:	a201      	add	r2, pc, #4	@ (adr r2, 34019334 <__atonn_getSrcPortID+0x5c>)
3401932e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34019332:	bf00      	nop
34019334:	34019351 	.word	0x34019351
34019338:	34019463 	.word	0x34019463
3401933c:	3401937d 	.word	0x3401937d
34019340:	340193ab 	.word	0x340193ab
34019344:	340193d9 	.word	0x340193d9
34019348:	34019407 	.word	0x34019407
3401934c:	34019435 	.word	0x34019435
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
34019350:	7e3b      	ldrb	r3, [r7, #24]
34019352:	2b00      	cmp	r3, #0
34019354:	d006      	beq.n	34019364 <__atonn_getSrcPortID+0x8c>
34019356:	4b53      	ldr	r3, [pc, #332]	@ (340194a4 <__atonn_getSrcPortID+0x1cc>)
34019358:	4a50      	ldr	r2, [pc, #320]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
3401935a:	f240 3146 	movw	r1, #838	@ 0x346
3401935e:	4850      	ldr	r0, [pc, #320]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
34019360:	f001 ff9e 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
34019364:	793b      	ldrb	r3, [r7, #4]
34019366:	2b09      	cmp	r3, #9
34019368:	d906      	bls.n	34019378 <__atonn_getSrcPortID+0xa0>
3401936a:	4b4f      	ldr	r3, [pc, #316]	@ (340194a8 <__atonn_getSrcPortID+0x1d0>)
3401936c:	4a4b      	ldr	r2, [pc, #300]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
3401936e:	f240 3147 	movw	r1, #839	@ 0x347
34019372:	484b      	ldr	r0, [pc, #300]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
34019374:	f001 ff94 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, STRENG, 0, 0) + au_num;
34019378:	793b      	ldrb	r3, [r7, #4]
3401937a:	e088      	b.n	3401948e <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_CONVACC_NUM)
    case CONVACC:
      LL_ATON_ASSERT(port == 0);
3401937c:	7e3b      	ldrb	r3, [r7, #24]
3401937e:	2b00      	cmp	r3, #0
34019380:	d006      	beq.n	34019390 <__atonn_getSrcPortID+0xb8>
34019382:	4b48      	ldr	r3, [pc, #288]	@ (340194a4 <__atonn_getSrcPortID+0x1cc>)
34019384:	4a45      	ldr	r2, [pc, #276]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
34019386:	f240 314d 	movw	r1, #845	@ 0x34d
3401938a:	4845      	ldr	r0, [pc, #276]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
3401938c:	f001 ff88 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
34019390:	793b      	ldrb	r3, [r7, #4]
34019392:	2b03      	cmp	r3, #3
34019394:	d906      	bls.n	340193a4 <__atonn_getSrcPortID+0xcc>
34019396:	4b45      	ldr	r3, [pc, #276]	@ (340194ac <__atonn_getSrcPortID+0x1d4>)
34019398:	4a40      	ldr	r2, [pc, #256]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
3401939a:	f240 314e 	movw	r1, #846	@ 0x34e
3401939e:	4840      	ldr	r0, [pc, #256]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
340193a0:	f001 ff7e 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0) + au_num;
340193a4:	793b      	ldrb	r3, [r7, #4]
340193a6:	330a      	adds	r3, #10
340193a8:	e071      	b.n	3401948e <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_DECUN_NUM)
    case DECUN:
      LL_ATON_ASSERT(port == 0);
340193aa:	7e3b      	ldrb	r3, [r7, #24]
340193ac:	2b00      	cmp	r3, #0
340193ae:	d006      	beq.n	340193be <__atonn_getSrcPortID+0xe6>
340193b0:	4b3c      	ldr	r3, [pc, #240]	@ (340194a4 <__atonn_getSrcPortID+0x1cc>)
340193b2:	4a3a      	ldr	r2, [pc, #232]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
340193b4:	f44f 7155 	mov.w	r1, #852	@ 0x354
340193b8:	4839      	ldr	r0, [pc, #228]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
340193ba:	f001 ff71 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
340193be:	793b      	ldrb	r3, [r7, #4]
340193c0:	2b01      	cmp	r3, #1
340193c2:	d906      	bls.n	340193d2 <__atonn_getSrcPortID+0xfa>
340193c4:	4b3a      	ldr	r3, [pc, #232]	@ (340194b0 <__atonn_getSrcPortID+0x1d8>)
340193c6:	4a35      	ldr	r2, [pc, #212]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
340193c8:	f240 3155 	movw	r1, #853	@ 0x355
340193cc:	4834      	ldr	r0, [pc, #208]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
340193ce:	f001 ff67 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, DECUN, 0, 0) + au_num;
340193d2:	793b      	ldrb	r3, [r7, #4]
340193d4:	330e      	adds	r3, #14
340193d6:	e05a      	b.n	3401948e <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_ACTIV_NUM)
    case ACTIV:
      LL_ATON_ASSERT(port == 0);
340193d8:	7e3b      	ldrb	r3, [r7, #24]
340193da:	2b00      	cmp	r3, #0
340193dc:	d006      	beq.n	340193ec <__atonn_getSrcPortID+0x114>
340193de:	4b31      	ldr	r3, [pc, #196]	@ (340194a4 <__atonn_getSrcPortID+0x1cc>)
340193e0:	4a2e      	ldr	r2, [pc, #184]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
340193e2:	f240 315b 	movw	r1, #859	@ 0x35b
340193e6:	482e      	ldr	r0, [pc, #184]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
340193e8:	f001 ff5a 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
340193ec:	793b      	ldrb	r3, [r7, #4]
340193ee:	2b01      	cmp	r3, #1
340193f0:	d906      	bls.n	34019400 <__atonn_getSrcPortID+0x128>
340193f2:	4b2f      	ldr	r3, [pc, #188]	@ (340194b0 <__atonn_getSrcPortID+0x1d8>)
340193f4:	4a29      	ldr	r2, [pc, #164]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
340193f6:	f44f 7157 	mov.w	r1, #860	@ 0x35c
340193fa:	4829      	ldr	r0, [pc, #164]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
340193fc:	f001 ff50 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ACTIV, 0, 0) + au_num;
34019400:	793b      	ldrb	r3, [r7, #4]
34019402:	3310      	adds	r3, #16
34019404:	e043      	b.n	3401948e <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_ARITH_NUM)
    case ARITH:
      LL_ATON_ASSERT(port == 0);
34019406:	7e3b      	ldrb	r3, [r7, #24]
34019408:	2b00      	cmp	r3, #0
3401940a:	d006      	beq.n	3401941a <__atonn_getSrcPortID+0x142>
3401940c:	4b25      	ldr	r3, [pc, #148]	@ (340194a4 <__atonn_getSrcPortID+0x1cc>)
3401940e:	4a23      	ldr	r2, [pc, #140]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
34019410:	f240 3162 	movw	r1, #866	@ 0x362
34019414:	4822      	ldr	r0, [pc, #136]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
34019416:	f001 ff43 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
3401941a:	793b      	ldrb	r3, [r7, #4]
3401941c:	2b03      	cmp	r3, #3
3401941e:	d906      	bls.n	3401942e <__atonn_getSrcPortID+0x156>
34019420:	4b22      	ldr	r3, [pc, #136]	@ (340194ac <__atonn_getSrcPortID+0x1d4>)
34019422:	4a1e      	ldr	r2, [pc, #120]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
34019424:	f240 3163 	movw	r1, #867	@ 0x363
34019428:	481d      	ldr	r0, [pc, #116]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
3401942a:	f001 ff39 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ARITH, 0, 0) + au_num;
3401942e:	793b      	ldrb	r3, [r7, #4]
34019430:	3312      	adds	r3, #18
34019432:	e02c      	b.n	3401948e <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_POOL_NUM)
    case POOL:
      LL_ATON_ASSERT(port == 0);
34019434:	7e3b      	ldrb	r3, [r7, #24]
34019436:	2b00      	cmp	r3, #0
34019438:	d006      	beq.n	34019448 <__atonn_getSrcPortID+0x170>
3401943a:	4b1a      	ldr	r3, [pc, #104]	@ (340194a4 <__atonn_getSrcPortID+0x1cc>)
3401943c:	4a17      	ldr	r2, [pc, #92]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
3401943e:	f240 3169 	movw	r1, #873	@ 0x369
34019442:	4817      	ldr	r0, [pc, #92]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
34019444:	f001 ff2c 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
34019448:	793b      	ldrb	r3, [r7, #4]
3401944a:	2b01      	cmp	r3, #1
3401944c:	d906      	bls.n	3401945c <__atonn_getSrcPortID+0x184>
3401944e:	4b18      	ldr	r3, [pc, #96]	@ (340194b0 <__atonn_getSrcPortID+0x1d8>)
34019450:	4a12      	ldr	r2, [pc, #72]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
34019452:	f240 316a 	movw	r1, #874	@ 0x36a
34019456:	4812      	ldr	r0, [pc, #72]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
34019458:	f001 ff22 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, POOL, 0, 0) + au_num;
3401945c:	793b      	ldrb	r3, [r7, #4]
3401945e:	3316      	adds	r3, #22
34019460:	e015      	b.n	3401948e <__atonn_getSrcPortID+0x1b6>
      break;
#endif
    default:
      LL_ATON_ASSERT(0);
34019462:	4b14      	ldr	r3, [pc, #80]	@ (340194b4 <__atonn_getSrcPortID+0x1dc>)
34019464:	4a0d      	ldr	r2, [pc, #52]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
34019466:	f240 316f 	movw	r1, #879	@ 0x36f
3401946a:	480d      	ldr	r0, [pc, #52]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
3401946c:	f001 ff18 	bl	3401b2a0 <__assert_func>
      break;
    }
    break;
  case STRSWITCH64:
    // TODO
    LL_ATON_ASSERT(0);
34019470:	4b10      	ldr	r3, [pc, #64]	@ (340194b4 <__atonn_getSrcPortID+0x1dc>)
34019472:	4a0a      	ldr	r2, [pc, #40]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
34019474:	f240 3175 	movw	r1, #885	@ 0x375
34019478:	4809      	ldr	r0, [pc, #36]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
3401947a:	f001 ff11 	bl	3401b2a0 <__assert_func>
    break;
  case STRSWITCH_VC:
    // TODO
    LL_ATON_ASSERT(0);
3401947e:	4b0d      	ldr	r3, [pc, #52]	@ (340194b4 <__atonn_getSrcPortID+0x1dc>)
34019480:	4a06      	ldr	r2, [pc, #24]	@ (3401949c <__atonn_getSrcPortID+0x1c4>)
34019482:	f240 3179 	movw	r1, #889	@ 0x379
34019486:	4806      	ldr	r0, [pc, #24]	@ (340194a0 <__atonn_getSrcPortID+0x1c8>)
34019488:	f001 ff0a 	bl	3401b2a0 <__assert_func>
    break;
  }
  return 0;
3401948c:	2300      	movs	r3, #0
}
3401948e:	4618      	mov	r0, r3
34019490:	370c      	adds	r7, #12
34019492:	46bd      	mov	sp, r7
34019494:	bd90      	pop	{r4, r7, pc}
34019496:	bf00      	nop
34019498:	3401ef28 	.word	0x3401ef28
3401949c:	3401fac4 	.word	0x3401fac4
340194a0:	3401ecd4 	.word	0x3401ecd4
340194a4:	3401ef34 	.word	0x3401ef34
340194a8:	3401ef40 	.word	0x3401ef40
340194ac:	3401ef4c 	.word	0x3401ef4c
340194b0:	3401ef58 	.word	0x3401ef58
340194b4:	3401eeac 	.word	0x3401eeac

340194b8 <__atonn_getDstPortID>:

unsigned __atonn_getDstPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
340194b8:	b590      	push	{r4, r7, lr}
340194ba:	b083      	sub	sp, #12
340194bc:	af00      	add	r7, sp, #0
340194be:	4604      	mov	r4, r0
340194c0:	4608      	mov	r0, r1
340194c2:	4611      	mov	r1, r2
340194c4:	461a      	mov	r2, r3
340194c6:	4623      	mov	r3, r4
340194c8:	71fb      	strb	r3, [r7, #7]
340194ca:	4603      	mov	r3, r0
340194cc:	71bb      	strb	r3, [r7, #6]
340194ce:	460b      	mov	r3, r1
340194d0:	717b      	strb	r3, [r7, #5]
340194d2:	4613      	mov	r3, r2
340194d4:	713b      	strb	r3, [r7, #4]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
340194d6:	79bb      	ldrb	r3, [r7, #6]
340194d8:	2b00      	cmp	r3, #0
340194da:	d006      	beq.n	340194ea <__atonn_getDstPortID+0x32>
340194dc:	4b6f      	ldr	r3, [pc, #444]	@ (3401969c <__atonn_getDstPortID+0x1e4>)
340194de:	4a70      	ldr	r2, [pc, #448]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
340194e0:	f240 3183 	movw	r1, #899	@ 0x383
340194e4:	486f      	ldr	r0, [pc, #444]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
340194e6:	f001 fedb 	bl	3401b2a0 <__assert_func>
  switch (sut)
340194ea:	79fb      	ldrb	r3, [r7, #7]
340194ec:	2b02      	cmp	r3, #2
340194ee:	f000 80c8 	beq.w	34019682 <__atonn_getDstPortID+0x1ca>
340194f2:	2b02      	cmp	r3, #2
340194f4:	f300 80cc 	bgt.w	34019690 <__atonn_getDstPortID+0x1d8>
340194f8:	2b00      	cmp	r3, #0
340194fa:	d003      	beq.n	34019504 <__atonn_getDstPortID+0x4c>
340194fc:	2b01      	cmp	r3, #1
340194fe:	f000 80b9 	beq.w	34019674 <__atonn_getDstPortID+0x1bc>
34019502:	e0c5      	b.n	34019690 <__atonn_getDstPortID+0x1d8>
  {
  case STRSWITCH:
    switch (aut)
34019504:	797b      	ldrb	r3, [r7, #5]
34019506:	2b06      	cmp	r3, #6
34019508:	f200 80ad 	bhi.w	34019666 <__atonn_getDstPortID+0x1ae>
3401950c:	a201      	add	r2, pc, #4	@ (adr r2, 34019514 <__atonn_getDstPortID+0x5c>)
3401950e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34019512:	bf00      	nop
34019514:	34019531 	.word	0x34019531
34019518:	34019667 	.word	0x34019667
3401951c:	34019561 	.word	0x34019561
34019520:	3401959b 	.word	0x3401959b
34019524:	340195d1 	.word	0x340195d1
34019528:	34019601 	.word	0x34019601
3401952c:	34019637 	.word	0x34019637
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
34019530:	7e3b      	ldrb	r3, [r7, #24]
34019532:	2b00      	cmp	r3, #0
34019534:	d006      	beq.n	34019544 <__atonn_getDstPortID+0x8c>
34019536:	4b5c      	ldr	r3, [pc, #368]	@ (340196a8 <__atonn_getDstPortID+0x1f0>)
34019538:	4a59      	ldr	r2, [pc, #356]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
3401953a:	f240 318b 	movw	r1, #907	@ 0x38b
3401953e:	4859      	ldr	r0, [pc, #356]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
34019540:	f001 feae 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
34019544:	793b      	ldrb	r3, [r7, #4]
34019546:	2b09      	cmp	r3, #9
34019548:	d906      	bls.n	34019558 <__atonn_getDstPortID+0xa0>
3401954a:	4b58      	ldr	r3, [pc, #352]	@ (340196ac <__atonn_getDstPortID+0x1f4>)
3401954c:	4a54      	ldr	r2, [pc, #336]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
3401954e:	f44f 7163 	mov.w	r1, #908	@ 0x38c
34019552:	4854      	ldr	r0, [pc, #336]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
34019554:	f001 fea4 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, STRENG, 0, 0) + (0x4 * au_num);
34019558:	793b      	ldrb	r3, [r7, #4]
3401955a:	009b      	lsls	r3, r3, #2
3401955c:	3308      	adds	r3, #8
3401955e:	e098      	b.n	34019692 <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_CONVACC_NUM)
    case CONVACC:
      LL_ATON_ASSERT(port < 3);
34019560:	7e3b      	ldrb	r3, [r7, #24]
34019562:	2b02      	cmp	r3, #2
34019564:	d906      	bls.n	34019574 <__atonn_getDstPortID+0xbc>
34019566:	4b52      	ldr	r3, [pc, #328]	@ (340196b0 <__atonn_getDstPortID+0x1f8>)
34019568:	4a4d      	ldr	r2, [pc, #308]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
3401956a:	f240 3192 	movw	r1, #914	@ 0x392
3401956e:	484d      	ldr	r0, [pc, #308]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
34019570:	f001 fe96 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
34019574:	793b      	ldrb	r3, [r7, #4]
34019576:	2b03      	cmp	r3, #3
34019578:	d906      	bls.n	34019588 <__atonn_getDstPortID+0xd0>
3401957a:	4b4e      	ldr	r3, [pc, #312]	@ (340196b4 <__atonn_getDstPortID+0x1fc>)
3401957c:	4a48      	ldr	r2, [pc, #288]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
3401957e:	f240 3193 	movw	r1, #915	@ 0x393
34019582:	4848      	ldr	r0, [pc, #288]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
34019584:	f001 fe8c 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, CONVACC, 0, 0) + (0x4 * (3 * au_num + port));
34019588:	793a      	ldrb	r2, [r7, #4]
3401958a:	4613      	mov	r3, r2
3401958c:	005b      	lsls	r3, r3, #1
3401958e:	441a      	add	r2, r3
34019590:	7e3b      	ldrb	r3, [r7, #24]
34019592:	4413      	add	r3, r2
34019594:	009b      	lsls	r3, r3, #2
34019596:	3330      	adds	r3, #48	@ 0x30
34019598:	e07b      	b.n	34019692 <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_DECUN_NUM)
    case DECUN:
      LL_ATON_ASSERT(port < 2);
3401959a:	7e3b      	ldrb	r3, [r7, #24]
3401959c:	2b01      	cmp	r3, #1
3401959e:	d906      	bls.n	340195ae <__atonn_getDstPortID+0xf6>
340195a0:	4b45      	ldr	r3, [pc, #276]	@ (340196b8 <__atonn_getDstPortID+0x200>)
340195a2:	4a3f      	ldr	r2, [pc, #252]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
340195a4:	f240 3199 	movw	r1, #921	@ 0x399
340195a8:	483e      	ldr	r0, [pc, #248]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
340195aa:	f001 fe79 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
340195ae:	793b      	ldrb	r3, [r7, #4]
340195b0:	2b01      	cmp	r3, #1
340195b2:	d906      	bls.n	340195c2 <__atonn_getDstPortID+0x10a>
340195b4:	4b41      	ldr	r3, [pc, #260]	@ (340196bc <__atonn_getDstPortID+0x204>)
340195b6:	4a3a      	ldr	r2, [pc, #232]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
340195b8:	f240 319a 	movw	r1, #922	@ 0x39a
340195bc:	4839      	ldr	r0, [pc, #228]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
340195be:	f001 fe6f 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, DECUN, 0, 0) + (0x4 * (2 * au_num + port));
340195c2:	793b      	ldrb	r3, [r7, #4]
340195c4:	005a      	lsls	r2, r3, #1
340195c6:	7e3b      	ldrb	r3, [r7, #24]
340195c8:	4413      	add	r3, r2
340195ca:	009b      	lsls	r3, r3, #2
340195cc:	3360      	adds	r3, #96	@ 0x60
340195ce:	e060      	b.n	34019692 <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_ACTIV_NUM)
    case ACTIV:
      LL_ATON_ASSERT(port == 0);
340195d0:	7e3b      	ldrb	r3, [r7, #24]
340195d2:	2b00      	cmp	r3, #0
340195d4:	d006      	beq.n	340195e4 <__atonn_getDstPortID+0x12c>
340195d6:	4b34      	ldr	r3, [pc, #208]	@ (340196a8 <__atonn_getDstPortID+0x1f0>)
340195d8:	4a31      	ldr	r2, [pc, #196]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
340195da:	f44f 7168 	mov.w	r1, #928	@ 0x3a0
340195de:	4831      	ldr	r0, [pc, #196]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
340195e0:	f001 fe5e 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
340195e4:	793b      	ldrb	r3, [r7, #4]
340195e6:	2b01      	cmp	r3, #1
340195e8:	d906      	bls.n	340195f8 <__atonn_getDstPortID+0x140>
340195ea:	4b34      	ldr	r3, [pc, #208]	@ (340196bc <__atonn_getDstPortID+0x204>)
340195ec:	4a2c      	ldr	r2, [pc, #176]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
340195ee:	f240 31a1 	movw	r1, #929	@ 0x3a1
340195f2:	482c      	ldr	r0, [pc, #176]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
340195f4:	f001 fe54 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ACTIV, 0, 0) + (0x4 * au_num);
340195f8:	793b      	ldrb	r3, [r7, #4]
340195fa:	009b      	lsls	r3, r3, #2
340195fc:	3370      	adds	r3, #112	@ 0x70
340195fe:	e048      	b.n	34019692 <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_ARITH_NUM)
    case ARITH:
      LL_ATON_ASSERT(port < 2);
34019600:	7e3b      	ldrb	r3, [r7, #24]
34019602:	2b01      	cmp	r3, #1
34019604:	d906      	bls.n	34019614 <__atonn_getDstPortID+0x15c>
34019606:	4b2c      	ldr	r3, [pc, #176]	@ (340196b8 <__atonn_getDstPortID+0x200>)
34019608:	4a25      	ldr	r2, [pc, #148]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
3401960a:	f240 31a7 	movw	r1, #935	@ 0x3a7
3401960e:	4825      	ldr	r0, [pc, #148]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
34019610:	f001 fe46 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34019614:	793b      	ldrb	r3, [r7, #4]
34019616:	2b03      	cmp	r3, #3
34019618:	d906      	bls.n	34019628 <__atonn_getDstPortID+0x170>
3401961a:	4b26      	ldr	r3, [pc, #152]	@ (340196b4 <__atonn_getDstPortID+0x1fc>)
3401961c:	4a20      	ldr	r2, [pc, #128]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
3401961e:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
34019622:	4820      	ldr	r0, [pc, #128]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
34019624:	f001 fe3c 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ARITH, 0, 0) + (0x4 * (2 * au_num + port));
34019628:	793b      	ldrb	r3, [r7, #4]
3401962a:	005a      	lsls	r2, r3, #1
3401962c:	7e3b      	ldrb	r3, [r7, #24]
3401962e:	4413      	add	r3, r2
34019630:	009b      	lsls	r3, r3, #2
34019632:	3378      	adds	r3, #120	@ 0x78
34019634:	e02d      	b.n	34019692 <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_POOL_NUM)
    case POOL:
      LL_ATON_ASSERT(port == 0);
34019636:	7e3b      	ldrb	r3, [r7, #24]
34019638:	2b00      	cmp	r3, #0
3401963a:	d006      	beq.n	3401964a <__atonn_getDstPortID+0x192>
3401963c:	4b1a      	ldr	r3, [pc, #104]	@ (340196a8 <__atonn_getDstPortID+0x1f0>)
3401963e:	4a18      	ldr	r2, [pc, #96]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
34019640:	f240 31ae 	movw	r1, #942	@ 0x3ae
34019644:	4817      	ldr	r0, [pc, #92]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
34019646:	f001 fe2b 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
3401964a:	793b      	ldrb	r3, [r7, #4]
3401964c:	2b01      	cmp	r3, #1
3401964e:	d906      	bls.n	3401965e <__atonn_getDstPortID+0x1a6>
34019650:	4b1a      	ldr	r3, [pc, #104]	@ (340196bc <__atonn_getDstPortID+0x204>)
34019652:	4a13      	ldr	r2, [pc, #76]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
34019654:	f240 31af 	movw	r1, #943	@ 0x3af
34019658:	4812      	ldr	r0, [pc, #72]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
3401965a:	f001 fe21 	bl	3401b2a0 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, POOL, 0, 0) + (0x4 * au_num);
3401965e:	793b      	ldrb	r3, [r7, #4]
34019660:	009b      	lsls	r3, r3, #2
34019662:	3398      	adds	r3, #152	@ 0x98
34019664:	e015      	b.n	34019692 <__atonn_getDstPortID+0x1da>
      break;
#endif
    default:
      LL_ATON_ASSERT(0);
34019666:	4b16      	ldr	r3, [pc, #88]	@ (340196c0 <__atonn_getDstPortID+0x208>)
34019668:	4a0d      	ldr	r2, [pc, #52]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
3401966a:	f44f 716d 	mov.w	r1, #948	@ 0x3b4
3401966e:	480d      	ldr	r0, [pc, #52]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
34019670:	f001 fe16 	bl	3401b2a0 <__assert_func>
      break;
    }
    break;
  case STRSWITCH64:
    // TODO
    LL_ATON_ASSERT(0);
34019674:	4b12      	ldr	r3, [pc, #72]	@ (340196c0 <__atonn_getDstPortID+0x208>)
34019676:	4a0a      	ldr	r2, [pc, #40]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
34019678:	f240 31ba 	movw	r1, #954	@ 0x3ba
3401967c:	4809      	ldr	r0, [pc, #36]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
3401967e:	f001 fe0f 	bl	3401b2a0 <__assert_func>
    break;
  case STRSWITCH_VC:
    // TODO
    LL_ATON_ASSERT(0);
34019682:	4b0f      	ldr	r3, [pc, #60]	@ (340196c0 <__atonn_getDstPortID+0x208>)
34019684:	4a06      	ldr	r2, [pc, #24]	@ (340196a0 <__atonn_getDstPortID+0x1e8>)
34019686:	f240 31be 	movw	r1, #958	@ 0x3be
3401968a:	4806      	ldr	r0, [pc, #24]	@ (340196a4 <__atonn_getDstPortID+0x1ec>)
3401968c:	f001 fe08 	bl	3401b2a0 <__assert_func>
    break;
  }
  return 0;
34019690:	2300      	movs	r3, #0
}
34019692:	4618      	mov	r0, r3
34019694:	370c      	adds	r7, #12
34019696:	46bd      	mov	sp, r7
34019698:	bd90      	pop	{r4, r7, pc}
3401969a:	bf00      	nop
3401969c:	3401ef28 	.word	0x3401ef28
340196a0:	3401fadc 	.word	0x3401fadc
340196a4:	3401ecd4 	.word	0x3401ecd4
340196a8:	3401ef34 	.word	0x3401ef34
340196ac:	3401ef40 	.word	0x3401ef40
340196b0:	3401ef64 	.word	0x3401ef64
340196b4:	3401ef4c 	.word	0x3401ef4c
340196b8:	3401ef70 	.word	0x3401ef70
340196bc:	3401ef58 	.word	0x3401ef58
340196c0:	3401eeac 	.word	0x3401eeac

340196c4 <LL_Switch_Init_NoReset>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be connected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Init_NoReset(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
340196c4:	b480      	push	{r7}
340196c6:	b08f      	sub	sp, #60	@ 0x3c
340196c8:	af00      	add	r7, sp, #0
340196ca:	6078      	str	r0, [r7, #4]
340196cc:	6039      	str	r1, [r7, #0]
  int i;
  volatile uint32_t *reg;
  uint32_t t;
  unsigned int en_shift[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_EN0_LSB, ATON_STRSWITCH_DST_EN1_LSB};
340196ce:	2300      	movs	r3, #0
340196d0:	627b      	str	r3, [r7, #36]	@ 0x24
340196d2:	2310      	movs	r3, #16
340196d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int link_shift[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_LINK0_LSB, ATON_STRSWITCH_DST_LINK1_LSB};
340196d6:	4a4e      	ldr	r2, [pc, #312]	@ (34019810 <LL_Switch_Init_NoReset+0x14c>)
340196d8:	f107 031c 	add.w	r3, r7, #28
340196dc:	e892 0003 	ldmia.w	r2, {r0, r1}
340196e0:	e883 0003 	stmia.w	r3, {r0, r1}
  unsigned int fnr_shift[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_LSB, ATON_STRSWITCH_DST_FNR1_LSB};
340196e4:	4a4b      	ldr	r2, [pc, #300]	@ (34019814 <LL_Switch_Init_NoReset+0x150>)
340196e6:	f107 0314 	add.w	r3, r7, #20
340196ea:	e892 0003 	ldmia.w	r2, {r0, r1}
340196ee:	e883 0003 	stmia.w	r3, {r0, r1}
  unsigned int fnr_mask[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_MASK, ATON_STRSWITCH_DST_FNR1_MASK};
340196f2:	4a49      	ldr	r2, [pc, #292]	@ (34019818 <LL_Switch_Init_NoReset+0x154>)
340196f4:	f107 030c 	add.w	r3, r7, #12
340196f8:	e892 0003 	ldmia.w	r2, {r0, r1}
340196fc:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Enable Switch */
  t = ATON_STRSWITCH_CTRL_DT;
34019700:	2300      	movs	r3, #0
34019702:	633b      	str	r3, [r7, #48]	@ 0x30
  t = ATON_STRSWITCH_CTRL_SET_EN(t, 1);
34019704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34019706:	f043 0301 	orr.w	r3, r3, #1
3401970a:	633b      	str	r3, [r7, #48]	@ 0x30
  ATON_STRSWITCH_CTRL_SET(0, t);
3401970c:	4a43      	ldr	r2, [pc, #268]	@ (3401981c <LL_Switch_Init_NoReset+0x158>)
3401970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34019710:	6013      	str	r3, [r2, #0]

  for (i = 0; i < n; i++)
34019712:	2300      	movs	r3, #0
34019714:	637b      	str	r3, [r7, #52]	@ 0x34
34019716:	e06f      	b.n	340197f8 <LL_Switch_Init_NoReset+0x134>
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34019718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3401971a:	011b      	lsls	r3, r3, #4
3401971c:	687a      	ldr	r2, [r7, #4]
3401971e:	4413      	add	r3, r2
34019720:	689b      	ldr	r3, [r3, #8]
34019722:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
34019726:	f503 2364 	add.w	r3, r3, #933888	@ 0xe4000
3401972a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = 0;
3401972c:	2300      	movs	r3, #0
3401972e:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Enable Context and create link */
#if ATON_SWITCH_CONTEXT_NUM == 2
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
34019730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34019732:	011b      	lsls	r3, r3, #4
34019734:	687a      	ldr	r2, [r7, #4]
34019736:	4413      	add	r3, r2
34019738:	7b9b      	ldrb	r3, [r3, #14]
3401973a:	f003 0301 	and.w	r3, r3, #1
3401973e:	b2db      	uxtb	r3, r3
34019740:	2b00      	cmp	r3, #0
34019742:	bf14      	ite	ne
34019744:	2301      	movne	r3, #1
34019746:	2300      	moveq	r3, #0
34019748:	b2db      	uxtb	r3, r3
3401974a:	461a      	mov	r2, r3
3401974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401974e:	fa02 f303 	lsl.w	r3, r2, r3
34019752:	461a      	mov	r2, r3
34019754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34019756:	4313      	orrs	r3, r2
34019758:	633b      	str	r3, [r7, #48]	@ 0x30
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source0) << link_shift[0]);
3401975a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3401975c:	011b      	lsls	r3, r3, #4
3401975e:	687a      	ldr	r2, [r7, #4]
34019760:	4413      	add	r3, r2
34019762:	681a      	ldr	r2, [r3, #0]
34019764:	69fb      	ldr	r3, [r7, #28]
34019766:	fa02 f303 	lsl.w	r3, r2, r3
3401976a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
3401976c:	4313      	orrs	r3, r2
3401976e:	633b      	str	r3, [r7, #48]	@ 0x30
    t |= ((LL_Switch_InitStruct[i].frames0 << fnr_shift[0]) & fnr_mask[0]);
34019770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34019772:	011b      	lsls	r3, r3, #4
34019774:	687a      	ldr	r2, [r7, #4]
34019776:	4413      	add	r3, r2
34019778:	7b1b      	ldrb	r3, [r3, #12]
3401977a:	461a      	mov	r2, r3
3401977c:	697b      	ldr	r3, [r7, #20]
3401977e:	fa02 f303 	lsl.w	r3, r2, r3
34019782:	461a      	mov	r2, r3
34019784:	68fb      	ldr	r3, [r7, #12]
34019786:	4013      	ands	r3, r2
34019788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
3401978a:	4313      	orrs	r3, r2
3401978c:	633b      	str	r3, [r7, #48]	@ 0x30
    t |= ((LL_Switch_InitStruct[i].context1 != 0) << en_shift[1]);
3401978e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34019790:	011b      	lsls	r3, r3, #4
34019792:	687a      	ldr	r2, [r7, #4]
34019794:	4413      	add	r3, r2
34019796:	7b9b      	ldrb	r3, [r3, #14]
34019798:	f003 0302 	and.w	r3, r3, #2
3401979c:	b2db      	uxtb	r3, r3
3401979e:	2b00      	cmp	r3, #0
340197a0:	bf14      	ite	ne
340197a2:	2301      	movne	r3, #1
340197a4:	2300      	moveq	r3, #0
340197a6:	b2db      	uxtb	r3, r3
340197a8:	461a      	mov	r2, r3
340197aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
340197ac:	fa02 f303 	lsl.w	r3, r2, r3
340197b0:	461a      	mov	r2, r3
340197b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
340197b4:	4313      	orrs	r3, r2
340197b6:	633b      	str	r3, [r7, #48]	@ 0x30
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source1) << link_shift[1]);
340197b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340197ba:	011b      	lsls	r3, r3, #4
340197bc:	687a      	ldr	r2, [r7, #4]
340197be:	4413      	add	r3, r2
340197c0:	685a      	ldr	r2, [r3, #4]
340197c2:	6a3b      	ldr	r3, [r7, #32]
340197c4:	fa02 f303 	lsl.w	r3, r2, r3
340197c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
340197ca:	4313      	orrs	r3, r2
340197cc:	633b      	str	r3, [r7, #48]	@ 0x30
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
340197ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340197d0:	011b      	lsls	r3, r3, #4
340197d2:	687a      	ldr	r2, [r7, #4]
340197d4:	4413      	add	r3, r2
340197d6:	7b5b      	ldrb	r3, [r3, #13]
340197d8:	461a      	mov	r2, r3
340197da:	69bb      	ldr	r3, [r7, #24]
340197dc:	fa02 f303 	lsl.w	r3, r2, r3
340197e0:	461a      	mov	r2, r3
340197e2:	693b      	ldr	r3, [r7, #16]
340197e4:	4013      	ands	r3, r2
340197e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
340197e8:	4313      	orrs	r3, r2
340197ea:	633b      	str	r3, [r7, #48]	@ 0x30
      t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source[c]) << link_shift[c]);
      t |= ((LL_Switch_InitStruct[i].frames[c] << fnr_shift[c]) & fnr_mask[c]);
    }
#endif

    ATON_REG_WRITE(reg, t);
340197ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340197ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
340197f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < n; i++)
340197f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340197f4:	3301      	adds	r3, #1
340197f6:	637b      	str	r3, [r7, #52]	@ 0x34
340197f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
340197fa:	683b      	ldr	r3, [r7, #0]
340197fc:	429a      	cmp	r2, r3
340197fe:	db8b      	blt.n	34019718 <LL_Switch_Init_NoReset+0x54>
  }

  return 0;
34019800:	2300      	movs	r3, #0
}
34019802:	4618      	mov	r0, r3
34019804:	373c      	adds	r7, #60	@ 0x3c
34019806:	46bd      	mov	sp, r7
34019808:	f85d 7b04 	ldr.w	r7, [sp], #4
3401980c:	4770      	bx	lr
3401980e:	bf00      	nop
34019810:	3401ef7c 	.word	0x3401ef7c
34019814:	3401ef84 	.word	0x3401ef84
34019818:	3401ef8c 	.word	0x3401ef8c
3401981c:	580e4000 	.word	0x580e4000

34019820 <LL_Switch_Init>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be connected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Init(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
34019820:	b580      	push	{r7, lr}
34019822:	b084      	sub	sp, #16
34019824:	af00      	add	r7, sp, #0
34019826:	6078      	str	r0, [r7, #4]
34019828:	6039      	str	r1, [r7, #0]
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ll_aton_static_checks();
#endif

  /* Clear Configuration */
  ATON_DISABLE_CLR_CONFCLR(STRSWITCH, 0);
3401982a:	2300      	movs	r3, #0
3401982c:	60fb      	str	r3, [r7, #12]
3401982e:	68fb      	ldr	r3, [r7, #12]
34019830:	f023 0301 	bic.w	r3, r3, #1
34019834:	60fb      	str	r3, [r7, #12]
34019836:	68fb      	ldr	r3, [r7, #12]
34019838:	f043 0302 	orr.w	r3, r3, #2
3401983c:	60fb      	str	r3, [r7, #12]
3401983e:	4a10      	ldr	r2, [pc, #64]	@ (34019880 <LL_Switch_Init+0x60>)
34019840:	68fb      	ldr	r3, [r7, #12]
34019842:	6013      	str	r3, [r2, #0]
34019844:	4b0e      	ldr	r3, [pc, #56]	@ (34019880 <LL_Switch_Init+0x60>)
34019846:	681b      	ldr	r3, [r3, #0]
34019848:	f003 0302 	and.w	r3, r3, #2
3401984c:	2b00      	cmp	r3, #0
3401984e:	d1f9      	bne.n	34019844 <LL_Switch_Init+0x24>
34019850:	2300      	movs	r3, #0
34019852:	60fb      	str	r3, [r7, #12]
34019854:	68fb      	ldr	r3, [r7, #12]
34019856:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3401985a:	60fb      	str	r3, [r7, #12]
3401985c:	4a08      	ldr	r2, [pc, #32]	@ (34019880 <LL_Switch_Init+0x60>)
3401985e:	68fb      	ldr	r3, [r7, #12]
34019860:	6013      	str	r3, [r2, #0]
34019862:	4b07      	ldr	r3, [pc, #28]	@ (34019880 <LL_Switch_Init+0x60>)
34019864:	681b      	ldr	r3, [r3, #0]
34019866:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3401986a:	2b00      	cmp	r3, #0
3401986c:	d1f9      	bne.n	34019862 <LL_Switch_Init+0x42>

  return LL_Switch_Init_NoReset(LL_Switch_InitStruct, n);
3401986e:	6839      	ldr	r1, [r7, #0]
34019870:	6878      	ldr	r0, [r7, #4]
34019872:	f7ff ff27 	bl	340196c4 <LL_Switch_Init_NoReset>
34019876:	4603      	mov	r3, r0
}
34019878:	4618      	mov	r0, r3
3401987a:	3710      	adds	r7, #16
3401987c:	46bd      	mov	sp, r7
3401987e:	bd80      	pop	{r7, pc}
34019880:	580e4000 	.word	0x580e4000

34019884 <LL_Switch_Deinit>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be disconnected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Deinit(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
34019884:	b480      	push	{r7}
34019886:	b085      	sub	sp, #20
34019888:	af00      	add	r7, sp, #0
3401988a:	6078      	str	r0, [r7, #4]
3401988c:	6039      	str	r1, [r7, #0]
  int i;
  volatile uint32_t *reg;

  for (i = 0; i < n; i++)
3401988e:	2300      	movs	r3, #0
34019890:	60fb      	str	r3, [r7, #12]
34019892:	e00f      	b.n	340198b4 <LL_Switch_Deinit+0x30>
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34019894:	68fb      	ldr	r3, [r7, #12]
34019896:	011b      	lsls	r3, r3, #4
34019898:	687a      	ldr	r2, [r7, #4]
3401989a:	4413      	add	r3, r2
3401989c:	689b      	ldr	r3, [r3, #8]
3401989e:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
340198a2:	f503 2364 	add.w	r3, r3, #933888	@ 0xe4000
340198a6:	60bb      	str	r3, [r7, #8]

    /* Disable contexts */
    ATON_REG_WRITE(reg, 0);
340198a8:	68bb      	ldr	r3, [r7, #8]
340198aa:	2200      	movs	r2, #0
340198ac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < n; i++)
340198ae:	68fb      	ldr	r3, [r7, #12]
340198b0:	3301      	adds	r3, #1
340198b2:	60fb      	str	r3, [r7, #12]
340198b4:	68fa      	ldr	r2, [r7, #12]
340198b6:	683b      	ldr	r3, [r7, #0]
340198b8:	429a      	cmp	r2, r3
340198ba:	dbeb      	blt.n	34019894 <LL_Switch_Deinit+0x10>
  }

  return 0;
340198bc:	2300      	movs	r3, #0
}
340198be:	4618      	mov	r0, r3
340198c0:	3714      	adds	r7, #20
340198c2:	46bd      	mov	sp, r7
340198c4:	f85d 7b04 	ldr.w	r7, [sp], #4
340198c8:	4770      	bx	lr
	...

340198cc <LL_Convacc_Init>:
 * @param  id Convolutional Accelerator identifier [0, ATON_CONVACC_NUM-1]
 * @param  Convacc_InitStruct Structure describing initialization parameters
 * @retval Error code E.g.: Invalid ID, invalid parameters, not idle,..
 */
int LL_Convacc_Init(int id, const LL_Convacc_InitTypeDef *conf)
{
340198cc:	b580      	push	{r7, lr}
340198ce:	b08c      	sub	sp, #48	@ 0x30
340198d0:	af00      	add	r7, sp, #0
340198d2:	6078      	str	r0, [r7, #4]
340198d4:	6039      	str	r1, [r7, #0]
  uint32_t t;

  if (id >= ATON_CONVACC_NUM)
340198d6:	687b      	ldr	r3, [r7, #4]
340198d8:	2b03      	cmp	r3, #3
340198da:	dd02      	ble.n	340198e2 <LL_Convacc_Init+0x16>
    return LL_ATON_INVALID_ID;
340198dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340198e0:	e3a8      	b.n	3401a034 <LL_Convacc_Init+0x768>

  LL_ATON_EnableClock(ATON_CONVACC_CLKB_CLK(id));
340198e2:	687b      	ldr	r3, [r7, #4]
340198e4:	330a      	adds	r3, #10
340198e6:	4618      	mov	r0, r3
340198e8:	f000 fbee 	bl	3401a0c8 <LL_ATON_EnableClock>

  t = ATON_CONVACC_CTRL_DT;
340198ec:	2300      	movs	r3, #0
340198ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_NOSUM(t, (conf->accumulate == 0));
340198f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340198f2:	f023 0304 	bic.w	r3, r3, #4
340198f6:	683a      	ldr	r2, [r7, #0]
340198f8:	7852      	ldrb	r2, [r2, #1]
340198fa:	f3c2 1280 	ubfx	r2, r2, #6, #1
340198fe:	b2d2      	uxtb	r2, r2
34019900:	2a00      	cmp	r2, #0
34019902:	d001      	beq.n	34019908 <LL_Convacc_Init+0x3c>
34019904:	2200      	movs	r2, #0
34019906:	e000      	b.n	3401990a <LL_Convacc_Init+0x3e>
34019908:	2204      	movs	r2, #4
3401990a:	4313      	orrs	r3, r2
3401990c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_NO1SUM(t, (conf->accumulate_first == 0));
3401990e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019910:	f023 0310 	bic.w	r3, r3, #16
34019914:	683a      	ldr	r2, [r7, #0]
34019916:	7852      	ldrb	r2, [r2, #1]
34019918:	f3c2 12c0 	ubfx	r2, r2, #7, #1
3401991c:	b2d2      	uxtb	r2, r2
3401991e:	2a00      	cmp	r2, #0
34019920:	d001      	beq.n	34019926 <LL_Convacc_Init+0x5a>
34019922:	2200      	movs	r2, #0
34019924:	e000      	b.n	34019928 <LL_Convacc_Init+0x5c>
34019926:	2210      	movs	r2, #16
34019928:	4313      	orrs	r3, r2
3401992a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_GEN1SUM(t, (conf->accumulate_gen_first != 0));
3401992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401992e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34019932:	683b      	ldr	r3, [r7, #0]
34019934:	789b      	ldrb	r3, [r3, #2]
34019936:	029b      	lsls	r3, r3, #10
34019938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3401993c:	4313      	orrs	r3, r2
3401993e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_AFILTMODE(t, conf->afilt_mode);
34019940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019942:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
34019946:	683b      	ldr	r3, [r7, #0]
34019948:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
3401994c:	021b      	lsls	r3, r3, #8
3401994e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34019952:	4313      	orrs	r3, r2
34019954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_SIMD(t, (conf->simd));
34019956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019958:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
3401995c:	683b      	ldr	r3, [r7, #0]
3401995e:	785b      	ldrb	r3, [r3, #1]
34019960:	f3c3 1301 	ubfx	r3, r3, #4, #2
34019964:	b2db      	uxtb	r3, r3
34019966:	015b      	lsls	r3, r3, #5
34019968:	f003 0360 	and.w	r3, r3, #96	@ 0x60
3401996c:	4313      	orrs	r3, r2
3401996e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_KT1(t, (conf->kt1_mode != 0));
34019970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019972:	f023 0208 	bic.w	r2, r3, #8
34019976:	683b      	ldr	r3, [r7, #0]
34019978:	789b      	ldrb	r3, [r3, #2]
3401997a:	f003 0308 	and.w	r3, r3, #8
3401997e:	4313      	orrs	r3, r2
34019980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_KSETEN(t, conf->kseten);
34019982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019984:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
34019988:	683b      	ldr	r3, [r7, #0]
3401998a:	78db      	ldrb	r3, [r3, #3]
3401998c:	f3c3 0301 	ubfx	r3, r3, #0, #2
34019990:	b2db      	uxtb	r3, r3
34019992:	059b      	lsls	r3, r3, #22
34019994:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
34019998:	4313      	orrs	r3, r2
3401999a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_FUNSIGNED(t, conf->f_unsigned);
3401999c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401999e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
340199a2:	683b      	ldr	r3, [r7, #0]
340199a4:	789b      	ldrb	r3, [r3, #2]
340199a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
340199aa:	b2db      	uxtb	r3, r3
340199ac:	051b      	lsls	r3, r3, #20
340199ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
340199b2:	4313      	orrs	r3, r2
340199b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
340199b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340199b8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
340199bc:	683b      	ldr	r3, [r7, #0]
340199be:	789b      	ldrb	r3, [r3, #2]
340199c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
340199c4:	b2db      	uxtb	r3, r3
340199c6:	055b      	lsls	r3, r3, #21
340199c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340199cc:	4313      	orrs	r3, r2
340199ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if defined(ATON_CONVACC_CTRL_SET_FSTAT)
  t = ATON_CONVACC_CTRL_SET_FSTAT(t, (conf->fstat != 0));
340199d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340199d2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340199d6:	683b      	ldr	r3, [r7, #0]
340199d8:	789b      	ldrb	r3, [r3, #2]
340199da:	05db      	lsls	r3, r3, #23
340199dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
340199e0:	4313      	orrs	r3, r2
340199e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

#if defined(ATON_CONVACC_CTRL_GET_DEEPMODE)
  t = ATON_CONVACC_CTRL_SET_DEEPMODE(t, (conf->deepmode != 0));
340199e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340199e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
340199ea:	683b      	ldr	r3, [r7, #0]
340199ec:	789b      	ldrb	r3, [r3, #2]
340199ee:	061b      	lsls	r3, r3, #24
340199f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
340199f4:	4313      	orrs	r3, r2
340199f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if defined(ATON_CONVACC_CTRL_SET_FSTAT)
  // deepmode and feature stats are incompatible
  if ((conf->fstat != 0) && (conf->deepmode != 0))
340199f8:	683b      	ldr	r3, [r7, #0]
340199fa:	789b      	ldrb	r3, [r3, #2]
340199fc:	f003 0302 	and.w	r3, r3, #2
34019a00:	b2db      	uxtb	r3, r3
34019a02:	2b00      	cmp	r3, #0
34019a04:	d009      	beq.n	34019a1a <LL_Convacc_Init+0x14e>
34019a06:	683b      	ldr	r3, [r7, #0]
34019a08:	789b      	ldrb	r3, [r3, #2]
34019a0a:	f003 0310 	and.w	r3, r3, #16
34019a0e:	b2db      	uxtb	r3, r3
34019a10:	2b00      	cmp	r3, #0
34019a12:	d002      	beq.n	34019a1a <LL_Convacc_Init+0x14e>
  {
    return LL_ATON_INVALID_PARAM;
34019a14:	f06f 0301 	mvn.w	r3, #1
34019a18:	e30c      	b.n	3401a034 <LL_Convacc_Init+0x768>
  }
#endif
#endif

#if defined(ATON_CONVACC_CTRL_GET_DSS2MODE)
  t = ATON_CONVACC_CTRL_SET_DSS2MODE(t, (conf->dss2mode != 0));
34019a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019a1c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
34019a20:	683b      	ldr	r3, [r7, #0]
34019a22:	789b      	ldrb	r3, [r3, #2]
34019a24:	061b      	lsls	r3, r3, #24
34019a26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34019a2a:	4313      	orrs	r3, r2
34019a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if defined(ATON_CONVACC_CTRL_SET_FSTAT)
  // deepmode and feature stats are incompatible
  if ((conf->fstat != 0) && (conf->dss2mode != 0))
34019a2e:	683b      	ldr	r3, [r7, #0]
34019a30:	789b      	ldrb	r3, [r3, #2]
34019a32:	f003 0302 	and.w	r3, r3, #2
34019a36:	b2db      	uxtb	r3, r3
34019a38:	2b00      	cmp	r3, #0
34019a3a:	d009      	beq.n	34019a50 <LL_Convacc_Init+0x184>
34019a3c:	683b      	ldr	r3, [r7, #0]
34019a3e:	789b      	ldrb	r3, [r3, #2]
34019a40:	f003 0320 	and.w	r3, r3, #32
34019a44:	b2db      	uxtb	r3, r3
34019a46:	2b00      	cmp	r3, #0
34019a48:	d002      	beq.n	34019a50 <LL_Convacc_Init+0x184>
  {
    return LL_ATON_INVALID_PARAM;
34019a4a:	f06f 0301 	mvn.w	r3, #1
34019a4e:	e2f1      	b.n	3401a034 <LL_Convacc_Init+0x768>
#endif
#endif

#if defined(ATON_CONVACC_CTRL_SET_DSS2MODE) && defined(ATON_CONVACC_CTRL_SET_DEEPMODE)
  // deepmode and dss2mode stats are incompatible
  if ((conf->dss2mode != 0) && (conf->deepmode != 0))
34019a50:	683b      	ldr	r3, [r7, #0]
34019a52:	789b      	ldrb	r3, [r3, #2]
34019a54:	f003 0320 	and.w	r3, r3, #32
34019a58:	b2db      	uxtb	r3, r3
34019a5a:	2b00      	cmp	r3, #0
34019a5c:	d009      	beq.n	34019a72 <LL_Convacc_Init+0x1a6>
34019a5e:	683b      	ldr	r3, [r7, #0]
34019a60:	789b      	ldrb	r3, [r3, #2]
34019a62:	f003 0310 	and.w	r3, r3, #16
34019a66:	b2db      	uxtb	r3, r3
34019a68:	2b00      	cmp	r3, #0
34019a6a:	d002      	beq.n	34019a72 <LL_Convacc_Init+0x1a6>
  {
    return LL_ATON_INVALID_PARAM;
34019a6c:	f06f 0301 	mvn.w	r3, #1
34019a70:	e2e0      	b.n	3401a034 <LL_Convacc_Init+0x768>
  }
#endif

  ATON_CONVACC_CTRL_SET(id, t);
34019a72:	687b      	ldr	r3, [r7, #4]
34019a74:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34019a78:	33ef      	adds	r3, #239	@ 0xef
34019a7a:	031b      	lsls	r3, r3, #12
34019a7c:	461a      	mov	r2, r3
34019a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019a80:	6013      	str	r3, [r2, #0]
  Conv_ctrl_bits[id] = t;
34019a82:	49ac      	ldr	r1, [pc, #688]	@ (34019d34 <LL_Convacc_Init+0x468>)
34019a84:	687b      	ldr	r3, [r7, #4]
34019a86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34019a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  if (conf->afilt_mode != AFILT_MODE_NONE)
34019a8c:	683b      	ldr	r3, [r7, #0]
34019a8e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
34019a92:	2b00      	cmp	r3, #0
34019a94:	d025      	beq.n	34019ae2 <LL_Convacc_Init+0x216>
  {
    t = ATON_CONVACC_AFILT_DT;
34019a96:	2301      	movs	r3, #1
34019a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_AFILT_SET_TOT(t, conf->afilt_tot);
34019a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019a9c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34019aa0:	683a      	ldr	r2, [r7, #0]
34019aa2:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
34019aa6:	4313      	orrs	r3, r2
34019aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_AFILT_SET_FIRST(t, conf->afilt_first);
34019aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019aac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
34019ab0:	683b      	ldr	r3, [r7, #0]
34019ab2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
34019ab6:	021b      	lsls	r3, r3, #8
34019ab8:	b29b      	uxth	r3, r3
34019aba:	4313      	orrs	r3, r2
34019abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
34019abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ac0:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
34019ac4:	683b      	ldr	r3, [r7, #0]
34019ac6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
34019aca:	041b      	lsls	r3, r3, #16
34019acc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
34019ad0:	4313      	orrs	r3, r2
34019ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ATON_CONVACC_AFILT_SET(id, t);
34019ad4:	687b      	ldr	r3, [r7, #4]
34019ad6:	031a      	lsls	r2, r3, #12
34019ad8:	4b97      	ldr	r3, [pc, #604]	@ (34019d38 <LL_Convacc_Init+0x46c>)
34019ada:	4413      	add	r3, r2
34019adc:	461a      	mov	r2, r3
34019ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ae0:	6013      	str	r3, [r2, #0]
  }

  if (conf->kfilt_tot > 0)
34019ae2:	683b      	ldr	r3, [r7, #0]
34019ae4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
34019ae8:	2b00      	cmp	r3, #0
34019aea:	d025      	beq.n	34019b38 <LL_Convacc_Init+0x26c>
  {
    t = ATON_CONVACC_KFILT_DT;
34019aec:	2301      	movs	r3, #1
34019aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_KFILT_SET_TOT(t, conf->kfilt_tot);
34019af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019af2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34019af6:	683a      	ldr	r2, [r7, #0]
34019af8:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
34019afc:	4313      	orrs	r3, r2
34019afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_KFILT_SET_FIRST(t, conf->kfilt_first);
34019b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
34019b06:	683b      	ldr	r3, [r7, #0]
34019b08:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
34019b0c:	021b      	lsls	r3, r3, #8
34019b0e:	b29b      	uxth	r3, r3
34019b10:	4313      	orrs	r3, r2
34019b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_KFILT_SET_LAST(t, conf->kfilt_last);
34019b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b16:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
34019b1a:	683b      	ldr	r3, [r7, #0]
34019b1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
34019b20:	041b      	lsls	r3, r3, #16
34019b22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
34019b26:	4313      	orrs	r3, r2
34019b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ATON_CONVACC_KFILT_SET(id, t);
34019b2a:	687b      	ldr	r3, [r7, #4]
34019b2c:	031a      	lsls	r2, r3, #12
34019b2e:	4b83      	ldr	r3, [pc, #524]	@ (34019d3c <LL_Convacc_Init+0x470>)
34019b30:	4413      	add	r3, r2
34019b32:	461a      	mov	r2, r3
34019b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b36:	6013      	str	r3, [r2, #0]
  }

  t = ATON_CONVACC_DFORMAT_DT;
34019b38:	4b81      	ldr	r3, [pc, #516]	@ (34019d40 <LL_Convacc_Init+0x474>)
34019b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_FROUND(t, conf->rounding_f);
34019b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b3e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34019b42:	683b      	ldr	r3, [r7, #0]
34019b44:	781b      	ldrb	r3, [r3, #0]
34019b46:	f3c3 0300 	ubfx	r3, r3, #0, #1
34019b4a:	b2db      	uxtb	r3, r3
34019b4c:	079b      	lsls	r3, r3, #30
34019b4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34019b52:	4313      	orrs	r3, r2
34019b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_FSAT(t, conf->saturation_f);
34019b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
34019b5c:	683b      	ldr	r3, [r7, #0]
34019b5e:	781b      	ldrb	r3, [r3, #0]
34019b60:	f3c3 0340 	ubfx	r3, r3, #1, #1
34019b64:	b2db      	uxtb	r3, r3
34019b66:	07db      	lsls	r3, r3, #31
34019b68:	4313      	orrs	r3, r2
34019b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_FRNDMODE(t, conf->round_mode_f);
34019b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
34019b72:	683b      	ldr	r3, [r7, #0]
34019b74:	781b      	ldrb	r3, [r3, #0]
34019b76:	f3c3 0381 	ubfx	r3, r3, #2, #2
34019b7a:	b2db      	uxtb	r3, r3
34019b7c:	019b      	lsls	r3, r3, #6
34019b7e:	b2db      	uxtb	r3, r3
34019b80:	4313      	orrs	r3, r2
34019b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_FBYTES(t, conf->inbytes_f);
34019b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
34019b8a:	683b      	ldr	r3, [r7, #0]
34019b8c:	781b      	ldrb	r3, [r3, #0]
34019b8e:	f3c3 1301 	ubfx	r3, r3, #4, #2
34019b92:	b2db      	uxtb	r3, r3
34019b94:	059b      	lsls	r3, r3, #22
34019b96:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
34019b9a:	4313      	orrs	r3, r2
34019b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
34019b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ba0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34019ba4:	683b      	ldr	r3, [r7, #0]
34019ba6:	791b      	ldrb	r3, [r3, #4]
34019ba8:	3310      	adds	r3, #16
34019baa:	061b      	lsls	r3, r3, #24
34019bac:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
34019bb0:	4313      	orrs	r3, r2
34019bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  t = ATON_CONVACC_DFORMAT_SET_ROUND(t, conf->rounding_o);
34019bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019bb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
34019bba:	683b      	ldr	r3, [r7, #0]
34019bbc:	781b      	ldrb	r3, [r3, #0]
34019bbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
34019bc2:	b2db      	uxtb	r3, r3
34019bc4:	041b      	lsls	r3, r3, #16
34019bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34019bca:	4313      	orrs	r3, r2
34019bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_SAT(t, conf->saturation_o);
34019bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019bd0:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
34019bd4:	683b      	ldr	r3, [r7, #0]
34019bd6:	781b      	ldrb	r3, [r3, #0]
34019bd8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
34019bdc:	b2db      	uxtb	r3, r3
34019bde:	045b      	lsls	r3, r3, #17
34019be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34019be4:	4313      	orrs	r3, r2
34019be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_ORNDMODE(t, (conf->relu_mode_o << 1) | conf->round_mode_o);
34019be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019bea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
34019bee:	683b      	ldr	r3, [r7, #0]
34019bf0:	785b      	ldrb	r3, [r3, #1]
34019bf2:	f3c3 0340 	ubfx	r3, r3, #1, #1
34019bf6:	b2db      	uxtb	r3, r3
34019bf8:	005b      	lsls	r3, r3, #1
34019bfa:	6839      	ldr	r1, [r7, #0]
34019bfc:	7849      	ldrb	r1, [r1, #1]
34019bfe:	f3c1 0100 	ubfx	r1, r1, #0, #1
34019c02:	b2c9      	uxtb	r1, r1
34019c04:	430b      	orrs	r3, r1
34019c06:	039b      	lsls	r3, r3, #14
34019c08:	b29b      	uxth	r3, r3
34019c0a:	4313      	orrs	r3, r2
34019c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_OBYTES(t, conf->outbytes_o);
34019c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
34019c14:	683b      	ldr	r3, [r7, #0]
34019c16:	785b      	ldrb	r3, [r3, #1]
34019c18:	f3c3 0381 	ubfx	r3, r3, #2, #2
34019c1c:	b2db      	uxtb	r3, r3
34019c1e:	051b      	lsls	r3, r3, #20
34019c20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34019c24:	4313      	orrs	r3, r2
34019c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_OUTSHIFT(t, conf->shift_o); // shift right only
34019c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c2a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
34019c2e:	683b      	ldr	r3, [r7, #0]
34019c30:	799b      	ldrb	r3, [r3, #6]
34019c32:	021b      	lsls	r3, r3, #8
34019c34:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
34019c38:	4313      	orrs	r3, r2
34019c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_RAW(t, conf->raw_o);
34019c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c3e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
34019c42:	683b      	ldr	r3, [r7, #0]
34019c44:	789b      	ldrb	r3, [r3, #2]
34019c46:	f3c3 0380 	ubfx	r3, r3, #2, #1
34019c4a:	b2db      	uxtb	r3, r3
34019c4c:	049b      	lsls	r3, r3, #18
34019c4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34019c52:	4313      	orrs	r3, r2
34019c54:	62fb      	str	r3, [r7, #44]	@ 0x2c

  t = ATON_CONVACC_DFORMAT_SET_INSHIFT(t, conf->shift_a); // accumulator shift left really (macro name is misleading)
34019c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c58:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
34019c5c:	683b      	ldr	r3, [r7, #0]
34019c5e:	795b      	ldrb	r3, [r3, #5]
34019c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34019c64:	4313      	orrs	r3, r2
34019c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_DFORMAT_SET(id, t);
34019c68:	687b      	ldr	r3, [r7, #4]
34019c6a:	031a      	lsls	r2, r3, #12
34019c6c:	4b35      	ldr	r3, [pc, #212]	@ (34019d44 <LL_Convacc_Init+0x478>)
34019c6e:	4413      	add	r3, r2
34019c70:	461a      	mov	r2, r3
34019c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c74:	6013      	str	r3, [r2, #0]

  t = ATON_CONVACC_FFORMAT_DT;
34019c76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34019c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
34019c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c7e:	0c1b      	lsrs	r3, r3, #16
34019c80:	041b      	lsls	r3, r3, #16
34019c82:	683a      	ldr	r2, [r7, #0]
34019c84:	6892      	ldr	r2, [r2, #8]
34019c86:	6839      	ldr	r1, [r7, #0]
34019c88:	8a89      	ldrh	r1, [r1, #20]
34019c8a:	fb01 f202 	mul.w	r2, r1, r2
34019c8e:	b292      	uxth	r2, r2
34019c90:	4313      	orrs	r3, r2
34019c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_FFORMAT_SET_HEIGHT(t, conf->fHeight);
34019c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c96:	b29a      	uxth	r2, r3
34019c98:	683b      	ldr	r3, [r7, #0]
34019c9a:	68db      	ldr	r3, [r3, #12]
34019c9c:	041b      	lsls	r3, r3, #16
34019c9e:	4313      	orrs	r3, r2
34019ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_FFORMAT_SET(id, t);
34019ca2:	687b      	ldr	r3, [r7, #4]
34019ca4:	031a      	lsls	r2, r3, #12
34019ca6:	4b28      	ldr	r3, [pc, #160]	@ (34019d48 <LL_Convacc_Init+0x47c>)
34019ca8:	4413      	add	r3, r2
34019caa:	461a      	mov	r2, r3
34019cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019cae:	6013      	str	r3, [r2, #0]

  t = ATON_CONVACC_KFORMAT_DT;
34019cb0:	4b26      	ldr	r3, [pc, #152]	@ (34019d4c <LL_Convacc_Init+0x480>)
34019cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_KFORMAT_SET_WIDTH(t, conf->kernelWidth);
34019cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019cb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34019cba:	683a      	ldr	r2, [r7, #0]
34019cbc:	7c12      	ldrb	r2, [r2, #16]
34019cbe:	4313      	orrs	r3, r2
34019cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_KFORMAT_SET_HEIGHT(t, conf->kernelHeight);
34019cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019cc4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
34019cc8:	683b      	ldr	r3, [r7, #0]
34019cca:	7c5b      	ldrb	r3, [r3, #17]
34019ccc:	021b      	lsls	r3, r3, #8
34019cce:	b29b      	uxth	r3, r3
34019cd0:	4313      	orrs	r3, r2
34019cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_KFORMAT_SET_BTCDEPTH(t, conf->batchDepth);
34019cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019cd6:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
34019cda:	683b      	ldr	r3, [r7, #0]
34019cdc:	8a9b      	ldrh	r3, [r3, #20]
34019cde:	041b      	lsls	r3, r3, #16
34019ce0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
34019ce4:	4313      	orrs	r3, r2
34019ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
34019ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019cea:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34019cee:	683b      	ldr	r3, [r7, #0]
34019cf0:	7c9b      	ldrb	r3, [r3, #18]
34019cf2:	061b      	lsls	r3, r3, #24
34019cf4:	4313      	orrs	r3, r2
34019cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_KFORMAT_SET(id, t);
34019cf8:	687b      	ldr	r3, [r7, #4]
34019cfa:	031a      	lsls	r2, r3, #12
34019cfc:	4b14      	ldr	r3, [pc, #80]	@ (34019d50 <LL_Convacc_Init+0x484>)
34019cfe:	4413      	add	r3, r2
34019d00:	461a      	mov	r2, r3
34019d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019d04:	6013      	str	r3, [r2, #0]

//   LL_ATON_PRINTF("depth=%d k_w=%d k_h=%d\n",conf->batchDepth,conf->kernelWidth,conf->kernelHeight);
//   LL_ATON_PRINTF("pad_t=%d pad_b=%d pad_l=%d pad_r=%d\n",conf->top_padding,conf->bot_padding,conf->left_padding,conf->right_padding);

  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
34019d06:	683b      	ldr	r3, [r7, #0]
34019d08:	8b9b      	ldrh	r3, [r3, #28]
34019d0a:	683a      	ldr	r2, [r7, #0]
34019d0c:	7c52      	ldrb	r2, [r2, #17]
34019d0e:	4293      	cmp	r3, r2
34019d10:	d202      	bcs.n	34019d18 <LL_Convacc_Init+0x44c>
34019d12:	683b      	ldr	r3, [r7, #0]
34019d14:	8b9b      	ldrh	r3, [r3, #28]
34019d16:	e002      	b.n	34019d1e <LL_Convacc_Init+0x452>
34019d18:	683b      	ldr	r3, [r7, #0]
34019d1a:	7c5b      	ldrb	r3, [r3, #17]
34019d1c:	3b01      	subs	r3, #1
34019d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
34019d20:	683b      	ldr	r3, [r7, #0]
34019d22:	8bdb      	ldrh	r3, [r3, #30]
34019d24:	683a      	ldr	r2, [r7, #0]
34019d26:	7c52      	ldrb	r2, [r2, #17]
34019d28:	4293      	cmp	r3, r2
34019d2a:	d213      	bcs.n	34019d54 <LL_Convacc_Init+0x488>
34019d2c:	683b      	ldr	r3, [r7, #0]
34019d2e:	8bdb      	ldrh	r3, [r3, #30]
34019d30:	e013      	b.n	34019d5a <LL_Convacc_Init+0x48e>
34019d32:	bf00      	nop
34019d34:	34020e40 	.word	0x34020e40
34019d38:	580ef024 	.word	0x580ef024
34019d3c:	580ef020 	.word	0x580ef020
34019d40:	10b00808 	.word	0x10b00808
34019d44:	580ef010 	.word	0x580ef010
34019d48:	580ef014 	.word	0x580ef014
34019d4c:	01010303 	.word	0x01010303
34019d50:	580ef008 	.word	0x580ef008
34019d54:	683b      	ldr	r3, [r7, #0]
34019d56:	7c5b      	ldrb	r3, [r3, #17]
34019d58:	3b01      	subs	r3, #1
34019d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  int p_left = (conf->left_padding < conf->kernelWidth ? conf->left_padding : conf->kernelWidth - 1);
34019d5c:	683b      	ldr	r3, [r7, #0]
34019d5e:	8b1b      	ldrh	r3, [r3, #24]
34019d60:	683a      	ldr	r2, [r7, #0]
34019d62:	7c12      	ldrb	r2, [r2, #16]
34019d64:	4293      	cmp	r3, r2
34019d66:	d202      	bcs.n	34019d6e <LL_Convacc_Init+0x4a2>
34019d68:	683b      	ldr	r3, [r7, #0]
34019d6a:	8b1b      	ldrh	r3, [r3, #24]
34019d6c:	e002      	b.n	34019d74 <LL_Convacc_Init+0x4a8>
34019d6e:	683b      	ldr	r3, [r7, #0]
34019d70:	7c1b      	ldrb	r3, [r3, #16]
34019d72:	3b01      	subs	r3, #1
34019d74:	623b      	str	r3, [r7, #32]
  int p_right = (conf->right_padding < conf->kernelWidth ? conf->right_padding : conf->kernelWidth - 1);
34019d76:	683b      	ldr	r3, [r7, #0]
34019d78:	8b5b      	ldrh	r3, [r3, #26]
34019d7a:	683a      	ldr	r2, [r7, #0]
34019d7c:	7c12      	ldrb	r2, [r2, #16]
34019d7e:	4293      	cmp	r3, r2
34019d80:	d202      	bcs.n	34019d88 <LL_Convacc_Init+0x4bc>
34019d82:	683b      	ldr	r3, [r7, #0]
34019d84:	8b5b      	ldrh	r3, [r3, #26]
34019d86:	e002      	b.n	34019d8e <LL_Convacc_Init+0x4c2>
34019d88:	683b      	ldr	r3, [r7, #0]
34019d8a:	7c1b      	ldrb	r3, [r3, #16]
34019d8c:	3b01      	subs	r3, #1
34019d8e:	61fb      	str	r3, [r7, #28]

  p_top = (p_top <= 2 ? p_top : 2);
34019d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34019d92:	2b02      	cmp	r3, #2
34019d94:	bfa8      	it	ge
34019d96:	2302      	movge	r3, #2
34019d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  p_bot = (p_bot <= 2 ? p_bot : 2);
34019d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019d9c:	2b02      	cmp	r3, #2
34019d9e:	bfa8      	it	ge
34019da0:	2302      	movge	r3, #2
34019da2:	627b      	str	r3, [r7, #36]	@ 0x24
  p_left = (p_left <= 2 ? p_left : 2);
34019da4:	6a3b      	ldr	r3, [r7, #32]
34019da6:	2b02      	cmp	r3, #2
34019da8:	bfa8      	it	ge
34019daa:	2302      	movge	r3, #2
34019dac:	623b      	str	r3, [r7, #32]
  p_right = (p_right <= 2 ? p_right : 2);
34019dae:	69fb      	ldr	r3, [r7, #28]
34019db0:	2b02      	cmp	r3, #2
34019db2:	bfa8      	it	ge
34019db4:	2302      	movge	r3, #2
34019db6:	61fb      	str	r3, [r7, #28]
  // LL_ATON_PRINTF("p_t=%d p_b=%d p_l=%d p_r=%d\n",p_top,p_bot,p_left,p_right);

#if defined(ATON_CONVACC_CTRL_GET_DEEPMODE)
  // no pad mode available in 1x1 deepmode
  // will accomodate padding only with zframe below
  if (conf->deepmode != 0)
34019db8:	683b      	ldr	r3, [r7, #0]
34019dba:	789b      	ldrb	r3, [r3, #2]
34019dbc:	f003 0310 	and.w	r3, r3, #16
34019dc0:	b2db      	uxtb	r3, r3
34019dc2:	2b00      	cmp	r3, #0
34019dc4:	d007      	beq.n	34019dd6 <LL_Convacc_Init+0x50a>
    p_top = p_bot = p_left = p_right = 0;
34019dc6:	2300      	movs	r3, #0
34019dc8:	61fb      	str	r3, [r7, #28]
34019dca:	69fb      	ldr	r3, [r7, #28]
34019dcc:	623b      	str	r3, [r7, #32]
34019dce:	6a3b      	ldr	r3, [r7, #32]
34019dd0:	627b      	str	r3, [r7, #36]	@ 0x24
34019dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
#if defined(ATON_CONVACC_CTRL_GET_DSS2MODE)
  // no pad mode available in dss2mode
  // will accomodate padding only with zframe below
  if (conf->dss2mode != 0)
34019dd6:	683b      	ldr	r3, [r7, #0]
34019dd8:	789b      	ldrb	r3, [r3, #2]
34019dda:	f003 0320 	and.w	r3, r3, #32
34019dde:	b2db      	uxtb	r3, r3
34019de0:	2b00      	cmp	r3, #0
34019de2:	d007      	beq.n	34019df4 <LL_Convacc_Init+0x528>
    p_top = p_bot = p_left = p_right = 0;
34019de4:	2300      	movs	r3, #0
34019de6:	61fb      	str	r3, [r7, #28]
34019de8:	69fb      	ldr	r3, [r7, #28]
34019dea:	623b      	str	r3, [r7, #32]
34019dec:	6a3b      	ldr	r3, [r7, #32]
34019dee:	627b      	str	r3, [r7, #36]	@ 0x24
34019df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019df2:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
#if defined(ATON_CONVACC_ZFBIAS_SET)
  // no pad mode available if zfbias is set
  // will accomodate padding only with zframe below
  if (conf->zfbias != 0)
34019df4:	683b      	ldr	r3, [r7, #0]
34019df6:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
34019dfa:	2b00      	cmp	r3, #0
34019dfc:	d007      	beq.n	34019e0e <LL_Convacc_Init+0x542>
    p_top = p_bot = p_left = p_right = 0;
34019dfe:	2300      	movs	r3, #0
34019e00:	61fb      	str	r3, [r7, #28]
34019e02:	69fb      	ldr	r3, [r7, #28]
34019e04:	623b      	str	r3, [r7, #32]
34019e06:	6a3b      	ldr	r3, [r7, #32]
34019e08:	627b      	str	r3, [r7, #36]	@ 0x24
34019e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  int z_top = (conf->top_padding - p_top);
34019e0e:	683b      	ldr	r3, [r7, #0]
34019e10:	8b9b      	ldrh	r3, [r3, #28]
34019e12:	461a      	mov	r2, r3
34019e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34019e16:	1ad3      	subs	r3, r2, r3
34019e18:	61bb      	str	r3, [r7, #24]
  int z_bot = (conf->bot_padding - p_bot);
34019e1a:	683b      	ldr	r3, [r7, #0]
34019e1c:	8bdb      	ldrh	r3, [r3, #30]
34019e1e:	461a      	mov	r2, r3
34019e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019e22:	1ad3      	subs	r3, r2, r3
34019e24:	617b      	str	r3, [r7, #20]
  int z_left = (conf->left_padding - p_left);
34019e26:	683b      	ldr	r3, [r7, #0]
34019e28:	8b1b      	ldrh	r3, [r3, #24]
34019e2a:	461a      	mov	r2, r3
34019e2c:	6a3b      	ldr	r3, [r7, #32]
34019e2e:	1ad3      	subs	r3, r2, r3
34019e30:	613b      	str	r3, [r7, #16]
  int z_right = (conf->right_padding - p_right);
34019e32:	683b      	ldr	r3, [r7, #0]
34019e34:	8b5b      	ldrh	r3, [r3, #26]
34019e36:	461a      	mov	r2, r3
34019e38:	69fb      	ldr	r3, [r7, #28]
34019e3a:	1ad3      	subs	r3, r2, r3
34019e3c:	60fb      	str	r3, [r7, #12]
  // LL_ATON_PRINTF("z_t=%d z_b=%d z_l=%d z_r=%d\n",z_top,z_bot,z_left*conf->batchDepth,z_right*conf->batchDepth);

  t = ATON_CONVACC_ZFRAME_DT;
34019e3e:	2300      	movs	r3, #0
34019e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_ZFRAME_SET_TOP(t, z_top);
34019e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019e44:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
34019e48:	69bb      	ldr	r3, [r7, #24]
34019e4a:	041b      	lsls	r3, r3, #16
34019e4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
34019e50:	4313      	orrs	r3, r2
34019e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_ZFRAME_SET_BOTTOM(t, z_bot);
34019e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019e56:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34019e5a:	697b      	ldr	r3, [r7, #20]
34019e5c:	061b      	lsls	r3, r3, #24
34019e5e:	4313      	orrs	r3, r2
34019e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
34019e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019e64:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
34019e68:	683b      	ldr	r3, [r7, #0]
34019e6a:	8a9b      	ldrh	r3, [r3, #20]
34019e6c:	4619      	mov	r1, r3
34019e6e:	693b      	ldr	r3, [r7, #16]
34019e70:	fb01 f303 	mul.w	r3, r1, r3
34019e74:	b2db      	uxtb	r3, r3
34019e76:	4313      	orrs	r3, r2
34019e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
34019e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019e7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
34019e80:	683b      	ldr	r3, [r7, #0]
34019e82:	8a9b      	ldrh	r3, [r3, #20]
34019e84:	4619      	mov	r1, r3
34019e86:	68fb      	ldr	r3, [r7, #12]
34019e88:	fb01 f303 	mul.w	r3, r1, r3
34019e8c:	021b      	lsls	r3, r3, #8
34019e8e:	b29b      	uxth	r3, r3
34019e90:	4313      	orrs	r3, r2
34019e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_ZFRAME_SET(id, t);
34019e94:	687b      	ldr	r3, [r7, #4]
34019e96:	031a      	lsls	r2, r3, #12
34019e98:	4b68      	ldr	r3, [pc, #416]	@ (3401a03c <LL_Convacc_Init+0x770>)
34019e9a:	4413      	add	r3, r2
34019e9c:	461a      	mov	r2, r3
34019e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ea0:	6013      	str	r3, [r2, #0]

  t = ATON_CONVACC_SAMPLE_DT;
34019ea2:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
34019ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_TPAD(t, p_top);
34019ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019eaa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34019eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34019eb0:	011b      	lsls	r3, r3, #4
34019eb2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
34019eb6:	4313      	orrs	r3, r2
34019eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_BPAD(t, p_bot);
34019eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ebc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
34019ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019ec2:	019b      	lsls	r3, r3, #6
34019ec4:	b2db      	uxtb	r3, r3
34019ec6:	4313      	orrs	r3, r2
34019ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_LPAD(t, p_left);
34019eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ecc:	f023 0203 	bic.w	r2, r3, #3
34019ed0:	6a3b      	ldr	r3, [r7, #32]
34019ed2:	f003 0303 	and.w	r3, r3, #3
34019ed6:	4313      	orrs	r3, r2
34019ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_RPAD(t, p_right);
34019eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019edc:	f023 020c 	bic.w	r2, r3, #12
34019ee0:	69fb      	ldr	r3, [r7, #28]
34019ee2:	009b      	lsls	r3, r3, #2
34019ee4:	f003 030c 	and.w	r3, r3, #12
34019ee8:	4313      	orrs	r3, r2
34019eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_HSTRD(t, conf->hstride);
34019eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019eee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
34019ef2:	683b      	ldr	r3, [r7, #0]
34019ef4:	7d9b      	ldrb	r3, [r3, #22]
34019ef6:	021b      	lsls	r3, r3, #8
34019ef8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
34019efc:	4313      	orrs	r3, r2
34019efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
34019f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f02:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34019f06:	683b      	ldr	r3, [r7, #0]
34019f08:	7ddb      	ldrb	r3, [r3, #23]
34019f0a:	031b      	lsls	r3, r3, #12
34019f0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34019f10:	4313      	orrs	r3, r2
34019f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if defined(ATON_CONVACC_SAMPLE_SET_FSTATCNT)
  if (conf->fstat != 0)
34019f14:	683b      	ldr	r3, [r7, #0]
34019f16:	789b      	ldrb	r3, [r3, #2]
34019f18:	f003 0302 	and.w	r3, r3, #2
34019f1c:	b2db      	uxtb	r3, r3
34019f1e:	2b00      	cmp	r3, #0
34019f20:	d006      	beq.n	34019f30 <LL_Convacc_Init+0x664>
    t = ATON_CONVACC_SAMPLE_SET_FSTATCNT(t, conf->fstatcnt);
34019f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f24:	b29a      	uxth	r2, r3
34019f26:	683b      	ldr	r3, [r7, #0]
34019f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34019f2a:	041b      	lsls	r3, r3, #16
34019f2c:	4313      	orrs	r3, r2
34019f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif
  ATON_CONVACC_SAMPLE_SET(id, t);
34019f30:	687b      	ldr	r3, [r7, #4]
34019f32:	031a      	lsls	r2, r3, #12
34019f34:	4b42      	ldr	r3, [pc, #264]	@ (3401a040 <LL_Convacc_Init+0x774>)
34019f36:	4413      	add	r3, r2
34019f38:	461a      	mov	r2, r3
34019f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f3c:	6013      	str	r3, [r2, #0]

  // LL_ATON_PRINTF("crop_t=%d crop_b=%d crop_l=%d crop_r=%d\n",z_top,z_bot,z_left,z_right);
  t = ATON_CONVACC_FHCROP_DT;
34019f3e:	4b41      	ldr	r3, [pc, #260]	@ (3401a044 <LL_Convacc_Init+0x778>)
34019f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (conf->left_crop > 0)
34019f42:	683b      	ldr	r3, [r7, #0]
34019f44:	8c1b      	ldrh	r3, [r3, #32]
34019f46:	2b00      	cmp	r3, #0
34019f48:	d00c      	beq.n	34019f64 <LL_Convacc_Init+0x698>
    t = ATON_CONVACC_FHCROP_SET_LEFT(t, conf->left_crop * conf->batchDepth);
34019f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f4c:	0c1b      	lsrs	r3, r3, #16
34019f4e:	041b      	lsls	r3, r3, #16
34019f50:	683a      	ldr	r2, [r7, #0]
34019f52:	8c12      	ldrh	r2, [r2, #32]
34019f54:	4611      	mov	r1, r2
34019f56:	683a      	ldr	r2, [r7, #0]
34019f58:	8a92      	ldrh	r2, [r2, #20]
34019f5a:	fb01 f202 	mul.w	r2, r1, r2
34019f5e:	b292      	uxth	r2, r2
34019f60:	4313      	orrs	r3, r2
34019f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (conf->right_crop > 0)
34019f64:	683b      	ldr	r3, [r7, #0]
34019f66:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
34019f68:	2b00      	cmp	r3, #0
34019f6a:	d00f      	beq.n	34019f8c <LL_Convacc_Init+0x6c0>
    t = ATON_CONVACC_FHCROP_SET_RIGHT(t, conf->right_crop * conf->batchDepth + (conf->batchDepth - 1));
34019f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f6e:	b29a      	uxth	r2, r3
34019f70:	683b      	ldr	r3, [r7, #0]
34019f72:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
34019f74:	4619      	mov	r1, r3
34019f76:	683b      	ldr	r3, [r7, #0]
34019f78:	8a9b      	ldrh	r3, [r3, #20]
34019f7a:	fb03 f101 	mul.w	r1, r3, r1
34019f7e:	683b      	ldr	r3, [r7, #0]
34019f80:	8a9b      	ldrh	r3, [r3, #20]
34019f82:	3b01      	subs	r3, #1
34019f84:	440b      	add	r3, r1
34019f86:	041b      	lsls	r3, r3, #16
34019f88:	4313      	orrs	r3, r2
34019f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_FHCROP_SET(id, t);
34019f8c:	687b      	ldr	r3, [r7, #4]
34019f8e:	031a      	lsls	r2, r3, #12
34019f90:	4b2d      	ldr	r3, [pc, #180]	@ (3401a048 <LL_Convacc_Init+0x77c>)
34019f92:	4413      	add	r3, r2
34019f94:	461a      	mov	r2, r3
34019f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f98:	6013      	str	r3, [r2, #0]

  t = ATON_CONVACC_FVCROP_DT;
34019f9a:	4b2a      	ldr	r3, [pc, #168]	@ (3401a044 <LL_Convacc_Init+0x778>)
34019f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (conf->top_crop > 0)
34019f9e:	683b      	ldr	r3, [r7, #0]
34019fa0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
34019fa2:	2b00      	cmp	r3, #0
34019fa4:	d006      	beq.n	34019fb4 <LL_Convacc_Init+0x6e8>
    t = ATON_CONVACC_FVCROP_SET_TOP(t, conf->top_crop);
34019fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019fa8:	0c1b      	lsrs	r3, r3, #16
34019faa:	041b      	lsls	r3, r3, #16
34019fac:	683a      	ldr	r2, [r7, #0]
34019fae:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
34019fb0:	4313      	orrs	r3, r2
34019fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (conf->bot_crop > 0)
34019fb4:	683b      	ldr	r3, [r7, #0]
34019fb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
34019fb8:	2b00      	cmp	r3, #0
34019fba:	d006      	beq.n	34019fca <LL_Convacc_Init+0x6fe>
    t = ATON_CONVACC_FVCROP_SET_BOTTOM(t, conf->bot_crop);
34019fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019fbe:	b29a      	uxth	r2, r3
34019fc0:	683b      	ldr	r3, [r7, #0]
34019fc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
34019fc4:	041b      	lsls	r3, r3, #16
34019fc6:	4313      	orrs	r3, r2
34019fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_FVCROP_SET(id, t);
34019fca:	687b      	ldr	r3, [r7, #4]
34019fcc:	031a      	lsls	r2, r3, #12
34019fce:	4b1f      	ldr	r3, [pc, #124]	@ (3401a04c <LL_Convacc_Init+0x780>)
34019fd0:	4413      	add	r3, r2
34019fd2:	461a      	mov	r2, r3
34019fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019fd6:	6013      	str	r3, [r2, #0]
  // LL_ATON_PRINTF("c_t=%d c_b=%d c_l=%d c_r=%d\n",conf->top_crop,conf->bot_crop,conf->left_crop  *
  // conf->batchDepth,conf->right_crop  * conf->batchDepth + (conf->batchDepth - 1));

#if defined(ATON_CONVACC_FSUB_SET)
  if (conf->fsub != 0)
34019fd8:	683b      	ldr	r3, [r7, #0]
34019fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34019fdc:	2b00      	cmp	r3, #0
34019fde:	d011      	beq.n	3401a004 <LL_Convacc_Init+0x738>
  {
    t = ATON_CONVACC_FSUB_DT;
34019fe0:	2300      	movs	r3, #0
34019fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_FSUB_SET_FSUB(t, conf->fsub);
34019fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019fe6:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34019fea:	683b      	ldr	r3, [r7, #0]
34019fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34019fee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34019ff2:	4313      	orrs	r3, r2
34019ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ATON_CONVACC_FSUB_SET(id, t);
34019ff6:	687b      	ldr	r3, [r7, #4]
34019ff8:	031a      	lsls	r2, r3, #12
34019ffa:	4b15      	ldr	r3, [pc, #84]	@ (3401a050 <LL_Convacc_Init+0x784>)
34019ffc:	4413      	add	r3, r2
34019ffe:	461a      	mov	r2, r3
3401a000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401a002:	6013      	str	r3, [r2, #0]
  }
#endif
#if defined(ATON_CONVACC_ZFBIAS_SET)
  t = ATON_CONVACC_ZFBIAS_DT;
3401a004:	2300      	movs	r3, #0
3401a006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (conf->zfbias != 0)
3401a008:	683b      	ldr	r3, [r7, #0]
3401a00a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
3401a00e:	2b00      	cmp	r3, #0
3401a010:	d008      	beq.n	3401a024 <LL_Convacc_Init+0x758>
  {
    t = ATON_CONVACC_ZFBIAS_SET_ZFBIAS(t, conf->zfbias);
3401a012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401a014:	0c1b      	lsrs	r3, r3, #16
3401a016:	041b      	lsls	r3, r3, #16
3401a018:	683a      	ldr	r2, [r7, #0]
3401a01a:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	@ 0x38
3401a01e:	b292      	uxth	r2, r2
3401a020:	4313      	orrs	r3, r2
3401a022:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if defined(ATON_CONVACC_ZFBIAS_SET_ZFLEFTMSB)
  t = ATON_CONVACC_ZFBIAS_SET_ZFLEFTMSB(t, (z_left * conf->batchDepth) >> ATON_CONVACC_ZFRAME_LEFT_W);
  t = ATON_CONVACC_ZFBIAS_SET_ZFRIGHTMSB(t, (z_right * conf->batchDepth) >> ATON_CONVACC_ZFRAME_RIGHT_W);
#endif

  ATON_CONVACC_ZFBIAS_SET(id, t);
3401a024:	687b      	ldr	r3, [r7, #4]
3401a026:	031a      	lsls	r2, r3, #12
3401a028:	4b0a      	ldr	r3, [pc, #40]	@ (3401a054 <LL_Convacc_Init+0x788>)
3401a02a:	4413      	add	r3, r2
3401a02c:	461a      	mov	r2, r3
3401a02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401a030:	6013      	str	r3, [r2, #0]
#endif

  return 0;
3401a032:	2300      	movs	r3, #0
}
3401a034:	4618      	mov	r0, r3
3401a036:	3730      	adds	r7, #48	@ 0x30
3401a038:	46bd      	mov	sp, r7
3401a03a:	bd80      	pop	{r7, pc}
3401a03c:	580ef028 	.word	0x580ef028
3401a040:	580ef00c 	.word	0x580ef00c
3401a044:	ffff0000 	.word	0xffff0000
3401a048:	580ef018 	.word	0x580ef018
3401a04c:	580ef01c 	.word	0x580ef01c
3401a050:	580ef030 	.word	0x580ef030
3401a054:	580ef034 	.word	0x580ef034

3401a058 <LL_EpochCtrl_Init>:
 * @param  id Epoch Controller identifier [0..ATON_EPOCHCTRL_NUM-1]
 * @param  conf Structure describing Epoch Controller initialization parameters
 * @retval Error code
 */
int LL_EpochCtrl_Init(int id, const LL_EpochCtrl_InitTypeDef *conf)
{
3401a058:	b580      	push	{r7, lr}
3401a05a:	b084      	sub	sp, #16
3401a05c:	af00      	add	r7, sp, #0
3401a05e:	6078      	str	r0, [r7, #4]
3401a060:	6039      	str	r1, [r7, #0]
  uint32_t t;

  if (id >= ATON_EPOCHCTRL_NUM)
3401a062:	687b      	ldr	r3, [r7, #4]
3401a064:	2b00      	cmp	r3, #0
3401a066:	dd02      	ble.n	3401a06e <LL_EpochCtrl_Init+0x16>
    return LL_ATON_INVALID_ID;
3401a068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3401a06c:	e024      	b.n	3401a0b8 <LL_EpochCtrl_Init+0x60>

  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
3401a06e:	687b      	ldr	r3, [r7, #4]
3401a070:	3319      	adds	r3, #25
3401a072:	4618      	mov	r0, r3
3401a074:	f000 f828 	bl	3401a0c8 <LL_ATON_EnableClock>

  /* Configure CTRL register */
  t = ATON_EPOCHCTRL_CTRL_DT;
3401a078:	2300      	movs	r3, #0
3401a07a:	60fb      	str	r3, [r7, #12]
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3401a07c:	68fb      	ldr	r3, [r7, #12]
3401a07e:	f023 0208 	bic.w	r2, r3, #8
3401a082:	683b      	ldr	r3, [r7, #0]
3401a084:	791b      	ldrb	r3, [r3, #4]
3401a086:	f3c3 0300 	ubfx	r3, r3, #0, #1
3401a08a:	b2db      	uxtb	r3, r3
3401a08c:	00db      	lsls	r3, r3, #3
3401a08e:	f003 0308 	and.w	r3, r3, #8
3401a092:	4313      	orrs	r3, r2
3401a094:	60fb      	str	r3, [r7, #12]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3401a096:	4a0a      	ldr	r2, [pc, #40]	@ (3401a0c0 <LL_EpochCtrl_Init+0x68>)
3401a098:	68fb      	ldr	r3, [r7, #12]
3401a09a:	6013      	str	r3, [r2, #0]

  /* Check address is 8 byte aligned */
  if (conf->blobaddr & 0x7)
3401a09c:	683b      	ldr	r3, [r7, #0]
3401a09e:	681b      	ldr	r3, [r3, #0]
3401a0a0:	f003 0307 	and.w	r3, r3, #7
3401a0a4:	2b00      	cmp	r3, #0
3401a0a6:	d002      	beq.n	3401a0ae <LL_EpochCtrl_Init+0x56>
    return LL_ATON_INVALID_PARAM;
3401a0a8:	f06f 0301 	mvn.w	r3, #1
3401a0ac:	e004      	b.n	3401a0b8 <LL_EpochCtrl_Init+0x60>

  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
3401a0ae:	4a05      	ldr	r2, [pc, #20]	@ (3401a0c4 <LL_EpochCtrl_Init+0x6c>)
3401a0b0:	683b      	ldr	r3, [r7, #0]
3401a0b2:	681b      	ldr	r3, [r3, #0]
3401a0b4:	6013      	str	r3, [r2, #0]

  return LL_ATON_OK;
3401a0b6:	2300      	movs	r3, #0
}
3401a0b8:	4618      	mov	r0, r3
3401a0ba:	3710      	adds	r7, #16
3401a0bc:	46bd      	mov	sp, r7
3401a0be:	bd80      	pop	{r7, pc}
3401a0c0:	580fe000 	.word	0x580fe000
3401a0c4:	580fe008 	.word	0x580fe008

3401a0c8 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
3401a0c8:	b490      	push	{r4, r7}
3401a0ca:	b084      	sub	sp, #16
3401a0cc:	af00      	add	r7, sp, #0
3401a0ce:	6078      	str	r0, [r7, #4]
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
3401a0d0:	4b13      	ldr	r3, [pc, #76]	@ (3401a120 <LL_ATON_EnableClock+0x58>)
3401a0d2:	681b      	ldr	r3, [r3, #0]
3401a0d4:	60fb      	str	r3, [r7, #12]
3401a0d6:	f04f 0201 	mov.w	r2, #1
3401a0da:	f04f 0300 	mov.w	r3, #0
3401a0de:	6879      	ldr	r1, [r7, #4]
3401a0e0:	ea52 130d 	orrs.w	r3, r2, sp, lsl #4
3401a0e4:	4613      	mov	r3, r2
3401a0e6:	43da      	mvns	r2, r3
3401a0e8:	68fb      	ldr	r3, [r7, #12]
3401a0ea:	ea02 0103 	and.w	r1, r2, r3
3401a0ee:	2201      	movs	r2, #1
3401a0f0:	687b      	ldr	r3, [r7, #4]
3401a0f2:	fa02 f303 	lsl.w	r3, r2, r3
3401a0f6:	461c      	mov	r4, r3
3401a0f8:	f04f 0201 	mov.w	r2, #1
3401a0fc:	f04f 0300 	mov.w	r3, #0
3401a100:	6878      	ldr	r0, [r7, #4]
3401a102:	ea52 030d 	orrs.w	r3, r2, sp
3401a106:	4613      	mov	r3, r2
3401a108:	4023      	ands	r3, r4
3401a10a:	430b      	orrs	r3, r1
3401a10c:	60fb      	str	r3, [r7, #12]
3401a10e:	4a04      	ldr	r2, [pc, #16]	@ (3401a120 <LL_ATON_EnableClock+0x58>)
3401a110:	68fb      	ldr	r3, [r7, #12]
3401a112:	6013      	str	r3, [r2, #0]
#endif
}
3401a114:	bf00      	nop
3401a116:	3710      	adds	r7, #16
3401a118:	46bd      	mov	sp, r7
3401a11a:	bc90      	pop	{r4, r7}
3401a11c:	4770      	bx	lr
3401a11e:	bf00      	nop
3401a120:	580e0010 	.word	0x580e0010

3401a124 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
3401a124:	b480      	push	{r7}
3401a126:	b085      	sub	sp, #20
3401a128:	af00      	add	r7, sp, #0
3401a12a:	6078      	str	r0, [r7, #4]
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
3401a12c:	4b0b      	ldr	r3, [pc, #44]	@ (3401a15c <LL_ATON_DisableClock+0x38>)
3401a12e:	681b      	ldr	r3, [r3, #0]
3401a130:	60fb      	str	r3, [r7, #12]
3401a132:	f04f 0201 	mov.w	r2, #1
3401a136:	f04f 0300 	mov.w	r3, #0
3401a13a:	6879      	ldr	r1, [r7, #4]
3401a13c:	ea52 130d 	orrs.w	r3, r2, sp, lsl #4
3401a140:	4613      	mov	r3, r2
3401a142:	43db      	mvns	r3, r3
3401a144:	68fa      	ldr	r2, [r7, #12]
3401a146:	4013      	ands	r3, r2
3401a148:	60fb      	str	r3, [r7, #12]
3401a14a:	4a04      	ldr	r2, [pc, #16]	@ (3401a15c <LL_ATON_DisableClock+0x38>)
3401a14c:	68fb      	ldr	r3, [r7, #12]
3401a14e:	6013      	str	r3, [r2, #0]
#endif
}
3401a150:	bf00      	nop
3401a152:	3714      	adds	r7, #20
3401a154:	46bd      	mov	sp, r7
3401a156:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a15a:	4770      	bx	lr
3401a15c:	580e0010 	.word	0x580e0010

3401a160 <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
3401a160:	b580      	push	{r7, lr}
3401a162:	b084      	sub	sp, #16
3401a164:	af00      	add	r7, sp, #0
3401a166:	6078      	str	r0, [r7, #4]

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
3401a168:	687b      	ldr	r3, [r7, #4]
3401a16a:	2b00      	cmp	r3, #0
3401a16c:	d105      	bne.n	3401a17a <LL_ATON_RT_Main+0x1a>
3401a16e:	4b16      	ldr	r3, [pc, #88]	@ (3401a1c8 <LL_ATON_RT_Main+0x68>)
3401a170:	4a16      	ldr	r2, [pc, #88]	@ (3401a1cc <LL_ATON_RT_Main+0x6c>)
3401a172:	213c      	movs	r1, #60	@ 0x3c
3401a174:	4816      	ldr	r0, [pc, #88]	@ (3401a1d0 <LL_ATON_RT_Main+0x70>)
3401a176:	f001 f893 	bl	3401b2a0 <__assert_func>
  LL_ATON_ASSERT(network_instance->network != NULL);
3401a17a:	687b      	ldr	r3, [r7, #4]
3401a17c:	681b      	ldr	r3, [r3, #0]
3401a17e:	2b00      	cmp	r3, #0
3401a180:	d105      	bne.n	3401a18e <LL_ATON_RT_Main+0x2e>
3401a182:	4b14      	ldr	r3, [pc, #80]	@ (3401a1d4 <LL_ATON_RT_Main+0x74>)
3401a184:	4a11      	ldr	r2, [pc, #68]	@ (3401a1cc <LL_ATON_RT_Main+0x6c>)
3401a186:	213d      	movs	r1, #61	@ 0x3d
3401a188:	4811      	ldr	r0, [pc, #68]	@ (3401a1d0 <LL_ATON_RT_Main+0x70>)
3401a18a:	f001 f889 	bl	3401b2a0 <__assert_func>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
3401a18e:	f000 fd13 	bl	3401abb8 <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
3401a192:	6878      	ldr	r0, [r7, #4]
3401a194:	f000 fc98 	bl	3401aac8 <LL_ATON_RT_Init_Network>
  size_t epochCount = 0;
3401a198:	2300      	movs	r3, #0
3401a19a:	60fb      	str	r3, [r7, #12]
  do
  {
    /* Execute first/next step of Cube.AI/ATON runtime */
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
3401a19c:	6878      	ldr	r0, [r7, #4]
3401a19e:	f000 fd83 	bl	3401aca8 <LL_ATON_RT_RunEpochBlock>
3401a1a2:	4603      	mov	r3, r0
3401a1a4:	72fb      	strb	r3, [r7, #11]
    /*** Start of user event handling code ***/

    /*** End of user event handling code ***/

    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
3401a1a6:	7afb      	ldrb	r3, [r7, #11]
3401a1a8:	2b01      	cmp	r3, #1
3401a1aa:	d100      	bne.n	3401a1ae <LL_ATON_RT_Main+0x4e>
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
3401a1ac:	bf20      	wfe
    }
//    printf("Epoch: %5d, Return: %d\n\r", epochCount, ll_aton_rt_ret);
//    epochCount++;
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
3401a1ae:	7afb      	ldrb	r3, [r7, #11]
3401a1b0:	2b02      	cmp	r3, #2
3401a1b2:	d1f3      	bne.n	3401a19c <LL_ATON_RT_Main+0x3c>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
3401a1b4:	6878      	ldr	r0, [r7, #4]
3401a1b6:	f000 fcc1 	bl	3401ab3c <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
3401a1ba:	f000 fd59 	bl	3401ac70 <LL_ATON_RT_RuntimeDeInit>

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
3401a1be:	bf00      	nop
3401a1c0:	3710      	adds	r7, #16
3401a1c2:	46bd      	mov	sp, r7
3401a1c4:	bd80      	pop	{r7, pc}
3401a1c6:	bf00      	nop
3401a1c8:	3401efcc 	.word	0x3401efcc
3401a1cc:	3401faf4 	.word	0x3401faf4
3401a1d0:	3401efec 	.word	0x3401efec
3401a1d4:	3401f084 	.word	0x3401f084

3401a1d8 <__NVIC_EnableIRQ>:
{
3401a1d8:	b480      	push	{r7}
3401a1da:	b083      	sub	sp, #12
3401a1dc:	af00      	add	r7, sp, #0
3401a1de:	4603      	mov	r3, r0
3401a1e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
3401a1e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3401a1e6:	2b00      	cmp	r3, #0
3401a1e8:	db0b      	blt.n	3401a202 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3401a1ea:	88fb      	ldrh	r3, [r7, #6]
3401a1ec:	f003 021f 	and.w	r2, r3, #31
3401a1f0:	4907      	ldr	r1, [pc, #28]	@ (3401a210 <__NVIC_EnableIRQ+0x38>)
3401a1f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3401a1f6:	095b      	lsrs	r3, r3, #5
3401a1f8:	2001      	movs	r0, #1
3401a1fa:	fa00 f202 	lsl.w	r2, r0, r2
3401a1fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3401a202:	bf00      	nop
3401a204:	370c      	adds	r7, #12
3401a206:	46bd      	mov	sp, r7
3401a208:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a20c:	4770      	bx	lr
3401a20e:	bf00      	nop
3401a210:	e000e100 	.word	0xe000e100

3401a214 <__NVIC_DisableIRQ>:
{
3401a214:	b480      	push	{r7}
3401a216:	b083      	sub	sp, #12
3401a218:	af00      	add	r7, sp, #0
3401a21a:	4603      	mov	r3, r0
3401a21c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
3401a21e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3401a222:	2b00      	cmp	r3, #0
3401a224:	db12      	blt.n	3401a24c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3401a226:	88fb      	ldrh	r3, [r7, #6]
3401a228:	f003 021f 	and.w	r2, r3, #31
3401a22c:	490a      	ldr	r1, [pc, #40]	@ (3401a258 <__NVIC_DisableIRQ+0x44>)
3401a22e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3401a232:	095b      	lsrs	r3, r3, #5
3401a234:	2001      	movs	r0, #1
3401a236:	fa00 f202 	lsl.w	r2, r0, r2
3401a23a:	3320      	adds	r3, #32
3401a23c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
3401a240:	f3bf 8f4f 	dsb	sy
}
3401a244:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3401a246:	f3bf 8f6f 	isb	sy
}
3401a24a:	bf00      	nop
}
3401a24c:	bf00      	nop
3401a24e:	370c      	adds	r7, #12
3401a250:	46bd      	mov	sp, r7
3401a252:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a256:	4770      	bx	lr
3401a258:	e000e100 	.word	0xe000e100

3401a25c <EpochBlock_IsLastEpochBlock>:
  /**
   * @}
   */

  static inline bool EpochBlock_IsLastEpochBlock(const EpochBlock_ItemTypeDef *eb)
  {
3401a25c:	b480      	push	{r7}
3401a25e:	b083      	sub	sp, #12
3401a260:	af00      	add	r7, sp, #0
3401a262:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_last_eb) != 0);
3401a264:	687b      	ldr	r3, [r7, #4]
3401a266:	8a1b      	ldrh	r3, [r3, #16]
3401a268:	f003 0308 	and.w	r3, r3, #8
3401a26c:	2b00      	cmp	r3, #0
3401a26e:	bf14      	ite	ne
3401a270:	2301      	movne	r3, #1
3401a272:	2300      	moveq	r3, #0
3401a274:	b2db      	uxtb	r3, r3
  }
3401a276:	4618      	mov	r0, r3
3401a278:	370c      	adds	r7, #12
3401a27a:	46bd      	mov	sp, r7
3401a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a280:	4770      	bx	lr

3401a282 <EpochBlock_IsEpochStart>:

  static inline bool EpochBlock_IsEpochStart(const EpochBlock_ItemTypeDef *eb)
  {
3401a282:	b480      	push	{r7}
3401a284:	b083      	sub	sp, #12
3401a286:	af00      	add	r7, sp, #0
3401a288:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
3401a28a:	687b      	ldr	r3, [r7, #4]
3401a28c:	8a1b      	ldrh	r3, [r3, #16]
3401a28e:	f003 0301 	and.w	r3, r3, #1
3401a292:	2b00      	cmp	r3, #0
3401a294:	bf14      	ite	ne
3401a296:	2301      	movne	r3, #1
3401a298:	2300      	moveq	r3, #0
3401a29a:	b2db      	uxtb	r3, r3
  }
3401a29c:	4618      	mov	r0, r3
3401a29e:	370c      	adds	r7, #12
3401a2a0:	46bd      	mov	sp, r7
3401a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a2a6:	4770      	bx	lr

3401a2a8 <EpochBlock_IsEpochBlob>:
  {
    return ((eb->flags & EpochBlock_Flags_epoch_end) != 0);
  }

  static inline bool EpochBlock_IsEpochBlob(const EpochBlock_ItemTypeDef *eb)
  {
3401a2a8:	b480      	push	{r7}
3401a2aa:	b083      	sub	sp, #12
3401a2ac:	af00      	add	r7, sp, #0
3401a2ae:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_blob) != 0);
3401a2b0:	687b      	ldr	r3, [r7, #4]
3401a2b2:	8a1b      	ldrh	r3, [r3, #16]
3401a2b4:	f003 0304 	and.w	r3, r3, #4
3401a2b8:	2b00      	cmp	r3, #0
3401a2ba:	bf14      	ite	ne
3401a2bc:	2301      	movne	r3, #1
3401a2be:	2300      	moveq	r3, #0
3401a2c0:	b2db      	uxtb	r3, r3
  }
3401a2c2:	4618      	mov	r0, r3
3401a2c4:	370c      	adds	r7, #12
3401a2c6:	46bd      	mov	sp, r7
3401a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a2cc:	4770      	bx	lr

3401a2ce <EpochBlock_IsEpochPureHW>:
  {
    return ((eb->flags & EpochBlock_Flags_pure_sw) != 0);
  }

  static inline bool EpochBlock_IsEpochPureHW(const EpochBlock_ItemTypeDef *eb)
  {
3401a2ce:	b480      	push	{r7}
3401a2d0:	b083      	sub	sp, #12
3401a2d2:	af00      	add	r7, sp, #0
3401a2d4:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
3401a2d6:	687b      	ldr	r3, [r7, #4]
3401a2d8:	8a1b      	ldrh	r3, [r3, #16]
3401a2da:	f003 0310 	and.w	r3, r3, #16
3401a2de:	2b00      	cmp	r3, #0
3401a2e0:	bf14      	ite	ne
3401a2e2:	2301      	movne	r3, #1
3401a2e4:	2300      	moveq	r3, #0
3401a2e6:	b2db      	uxtb	r3, r3
  }
3401a2e8:	4618      	mov	r0, r3
3401a2ea:	370c      	adds	r7, #12
3401a2ec:	46bd      	mov	sp, r7
3401a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a2f2:	4770      	bx	lr

3401a2f4 <EpochBlock_IsEpochHybrid>:

  static inline bool EpochBlock_IsEpochHybrid(const EpochBlock_ItemTypeDef *eb)
  {
3401a2f4:	b480      	push	{r7}
3401a2f6:	b083      	sub	sp, #12
3401a2f8:	af00      	add	r7, sp, #0
3401a2fa:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_hybrid) != 0);
3401a2fc:	687b      	ldr	r3, [r7, #4]
3401a2fe:	8a1b      	ldrh	r3, [r3, #16]
3401a300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3401a304:	2b00      	cmp	r3, #0
3401a306:	bf14      	ite	ne
3401a308:	2301      	movne	r3, #1
3401a30a:	2300      	moveq	r3, #0
3401a30c:	b2db      	uxtb	r3, r3
  }
3401a30e:	4618      	mov	r0, r3
3401a310:	370c      	adds	r7, #12
3401a312:	46bd      	mov	sp, r7
3401a314:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a318:	4770      	bx	lr

3401a31a <EpochBlock_IsEpochInternal>:

  static inline bool EpochBlock_IsEpochInternal(const EpochBlock_ItemTypeDef *eb)
  {
3401a31a:	b480      	push	{r7}
3401a31c:	b083      	sub	sp, #12
3401a31e:	af00      	add	r7, sp, #0
3401a320:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
3401a322:	687b      	ldr	r3, [r7, #4]
3401a324:	8a1b      	ldrh	r3, [r3, #16]
3401a326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3401a32a:	2b00      	cmp	r3, #0
3401a32c:	bf14      	ite	ne
3401a32e:	2301      	movne	r3, #1
3401a330:	2300      	moveq	r3, #0
3401a332:	b2db      	uxtb	r3, r3
  }
3401a334:	4618      	mov	r0, r3
3401a336:	370c      	adds	r7, #12
3401a338:	46bd      	mov	sp, r7
3401a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a33e:	4770      	bx	lr

3401a340 <EpochBlock_EpochControllerUnit>:

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
3401a340:	b580      	push	{r7, lr}
3401a342:	b082      	sub	sp, #8
3401a344:	af00      	add	r7, sp, #0
3401a346:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3401a348:	6878      	ldr	r0, [r7, #4]
3401a34a:	f7ff ffad 	bl	3401a2a8 <EpochBlock_IsEpochBlob>
3401a34e:	4603      	mov	r3, r0
3401a350:	2b00      	cmp	r3, #0
3401a352:	d106      	bne.n	3401a362 <EpochBlock_EpochControllerUnit+0x22>
3401a354:	4b06      	ldr	r3, [pc, #24]	@ (3401a370 <EpochBlock_EpochControllerUnit+0x30>)
3401a356:	4a07      	ldr	r2, [pc, #28]	@ (3401a374 <EpochBlock_EpochControllerUnit+0x34>)
3401a358:	f240 212f 	movw	r1, #559	@ 0x22f
3401a35c:	4806      	ldr	r0, [pc, #24]	@ (3401a378 <EpochBlock_EpochControllerUnit+0x38>)
3401a35e:	f000 ff9f 	bl	3401b2a0 <__assert_func>
    return eb->wait_mask;
3401a362:	687b      	ldr	r3, [r7, #4]
3401a364:	68db      	ldr	r3, [r3, #12]
  }
3401a366:	4618      	mov	r0, r3
3401a368:	3708      	adds	r7, #8
3401a36a:	46bd      	mov	sp, r7
3401a36c:	bd80      	pop	{r7, pc}
3401a36e:	bf00      	nop
3401a370:	3401f0b0 	.word	0x3401f0b0
3401a374:	3401fc14 	.word	0x3401fc14
3401a378:	3401f0cc 	.word	0x3401f0cc

3401a37c <EpochBlock_EpochBlobAddr>:

  static inline uintptr_t EpochBlock_EpochBlobAddr(const EpochBlock_ItemTypeDef *eb)
  {
3401a37c:	b580      	push	{r7, lr}
3401a37e:	b082      	sub	sp, #8
3401a380:	af00      	add	r7, sp, #0
3401a382:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3401a384:	6878      	ldr	r0, [r7, #4]
3401a386:	f7ff ff8f 	bl	3401a2a8 <EpochBlock_IsEpochBlob>
3401a38a:	4603      	mov	r3, r0
3401a38c:	2b00      	cmp	r3, #0
3401a38e:	d106      	bne.n	3401a39e <EpochBlock_EpochBlobAddr+0x22>
3401a390:	4b06      	ldr	r3, [pc, #24]	@ (3401a3ac <EpochBlock_EpochBlobAddr+0x30>)
3401a392:	4a07      	ldr	r2, [pc, #28]	@ (3401a3b0 <EpochBlock_EpochBlobAddr+0x34>)
3401a394:	f240 2135 	movw	r1, #565	@ 0x235
3401a398:	4806      	ldr	r0, [pc, #24]	@ (3401a3b4 <EpochBlock_EpochBlobAddr+0x38>)
3401a39a:	f000 ff81 	bl	3401b2a0 <__assert_func>
    return eb->blob_address;
3401a39e:	687b      	ldr	r3, [r7, #4]
3401a3a0:	689b      	ldr	r3, [r3, #8]
  }
3401a3a2:	4618      	mov	r0, r3
3401a3a4:	3708      	adds	r7, #8
3401a3a6:	46bd      	mov	sp, r7
3401a3a8:	bd80      	pop	{r7, pc}
3401a3aa:	bf00      	nop
3401a3ac:	3401f0b0 	.word	0x3401f0b0
3401a3b0:	3401fc34 	.word	0x3401fc34
3401a3b4:	3401f0cc 	.word	0x3401f0cc

3401a3b8 <__ll_set_aton_owner>:
  typedef EpochBlock_ItemTypeDef LL_ATON_RT_EpochBlockItem_t;

  /*** Helper Functions ***/

  static inline void __ll_set_aton_owner(NN_Instance_TypeDef *new_owner)
  {
3401a3b8:	b580      	push	{r7, lr}
3401a3ba:	b082      	sub	sp, #8
3401a3bc:	af00      	add	r7, sp, #0
3401a3be:	6078      	str	r0, [r7, #4]
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
3401a3c0:	4b12      	ldr	r3, [pc, #72]	@ (3401a40c <__ll_set_aton_owner+0x54>)
3401a3c2:	681b      	ldr	r3, [r3, #0]
3401a3c4:	687a      	ldr	r2, [r7, #4]
3401a3c6:	429a      	cmp	r2, r3
3401a3c8:	d105      	bne.n	3401a3d6 <__ll_set_aton_owner+0x1e>
3401a3ca:	4b11      	ldr	r3, [pc, #68]	@ (3401a410 <__ll_set_aton_owner+0x58>)
3401a3cc:	4a11      	ldr	r2, [pc, #68]	@ (3401a414 <__ll_set_aton_owner+0x5c>)
3401a3ce:	2131      	movs	r1, #49	@ 0x31
3401a3d0:	4811      	ldr	r0, [pc, #68]	@ (3401a418 <__ll_set_aton_owner+0x60>)
3401a3d2:	f000 ff65 	bl	3401b2a0 <__assert_func>

    LL_ATON_OSAL_LOCK_ATON();

    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
3401a3d6:	4b0d      	ldr	r3, [pc, #52]	@ (3401a40c <__ll_set_aton_owner+0x54>)
3401a3d8:	681b      	ldr	r3, [r3, #0]
3401a3da:	2b00      	cmp	r3, #0
3401a3dc:	d005      	beq.n	3401a3ea <__ll_set_aton_owner+0x32>
3401a3de:	4b0f      	ldr	r3, [pc, #60]	@ (3401a41c <__ll_set_aton_owner+0x64>)
3401a3e0:	4a0c      	ldr	r2, [pc, #48]	@ (3401a414 <__ll_set_aton_owner+0x5c>)
3401a3e2:	2135      	movs	r1, #53	@ 0x35
3401a3e4:	480c      	ldr	r0, [pc, #48]	@ (3401a418 <__ll_set_aton_owner+0x60>)
3401a3e6:	f000 ff5b 	bl	3401b2a0 <__assert_func>

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3401a3ea:	4b0d      	ldr	r3, [pc, #52]	@ (3401a420 <__ll_set_aton_owner+0x68>)
3401a3ec:	681b      	ldr	r3, [r3, #0]
3401a3ee:	2b00      	cmp	r3, #0
3401a3f0:	d005      	beq.n	3401a3fe <__ll_set_aton_owner+0x46>
3401a3f2:	4b0c      	ldr	r3, [pc, #48]	@ (3401a424 <__ll_set_aton_owner+0x6c>)
3401a3f4:	4a07      	ldr	r2, [pc, #28]	@ (3401a414 <__ll_set_aton_owner+0x5c>)
3401a3f6:	2139      	movs	r1, #57	@ 0x39
3401a3f8:	4807      	ldr	r0, [pc, #28]	@ (3401a418 <__ll_set_aton_owner+0x60>)
3401a3fa:	f000 ff51 	bl	3401b2a0 <__assert_func>
#endif // NDEBUG

    __ll_current_aton_ip_owner = new_owner;
3401a3fe:	4a03      	ldr	r2, [pc, #12]	@ (3401a40c <__ll_set_aton_owner+0x54>)
3401a400:	687b      	ldr	r3, [r7, #4]
3401a402:	6013      	str	r3, [r2, #0]
  }
3401a404:	bf00      	nop
3401a406:	3708      	adds	r7, #8
3401a408:	46bd      	mov	sp, r7
3401a40a:	bd80      	pop	{r7, pc}
3401a40c:	34020e54 	.word	0x34020e54
3401a410:	3401f16c 	.word	0x3401f16c
3401a414:	3401fbe4 	.word	0x3401fbe4
3401a418:	3401f194 	.word	0x3401f194
3401a41c:	3401f22c 	.word	0x3401f22c
3401a420:	34020e58 	.word	0x34020e58
3401a424:	3401f258 	.word	0x3401f258

3401a428 <__ll_clear_aton_owner>:

  static inline void __ll_clear_aton_owner(NN_Instance_TypeDef *current_owner)
  {
3401a428:	b580      	push	{r7, lr}
3401a42a:	b082      	sub	sp, #8
3401a42c:	af00      	add	r7, sp, #0
3401a42e:	6078      	str	r0, [r7, #4]
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
3401a430:	4b0d      	ldr	r3, [pc, #52]	@ (3401a468 <__ll_clear_aton_owner+0x40>)
3401a432:	681b      	ldr	r3, [r3, #0]
3401a434:	687a      	ldr	r2, [r7, #4]
3401a436:	429a      	cmp	r2, r3
3401a438:	d005      	beq.n	3401a446 <__ll_clear_aton_owner+0x1e>
3401a43a:	4b0c      	ldr	r3, [pc, #48]	@ (3401a46c <__ll_clear_aton_owner+0x44>)
3401a43c:	4a0c      	ldr	r2, [pc, #48]	@ (3401a470 <__ll_clear_aton_owner+0x48>)
3401a43e:	2142      	movs	r1, #66	@ 0x42
3401a440:	480c      	ldr	r0, [pc, #48]	@ (3401a474 <__ll_clear_aton_owner+0x4c>)
3401a442:	f000 ff2d 	bl	3401b2a0 <__assert_func>

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3401a446:	4b0c      	ldr	r3, [pc, #48]	@ (3401a478 <__ll_clear_aton_owner+0x50>)
3401a448:	681b      	ldr	r3, [r3, #0]
3401a44a:	2b00      	cmp	r3, #0
3401a44c:	d005      	beq.n	3401a45a <__ll_clear_aton_owner+0x32>
3401a44e:	4b0b      	ldr	r3, [pc, #44]	@ (3401a47c <__ll_clear_aton_owner+0x54>)
3401a450:	4a07      	ldr	r2, [pc, #28]	@ (3401a470 <__ll_clear_aton_owner+0x48>)
3401a452:	2146      	movs	r1, #70	@ 0x46
3401a454:	4807      	ldr	r0, [pc, #28]	@ (3401a474 <__ll_clear_aton_owner+0x4c>)
3401a456:	f000 ff23 	bl	3401b2a0 <__assert_func>
#endif // NDEBUG

    __ll_current_aton_ip_owner = NULL;
3401a45a:	4b03      	ldr	r3, [pc, #12]	@ (3401a468 <__ll_clear_aton_owner+0x40>)
3401a45c:	2200      	movs	r2, #0
3401a45e:	601a      	str	r2, [r3, #0]
    LL_ATON_OSAL_UNLOCK_ATON();
  }
3401a460:	bf00      	nop
3401a462:	3708      	adds	r7, #8
3401a464:	46bd      	mov	sp, r7
3401a466:	bd80      	pop	{r7, pc}
3401a468:	34020e54 	.word	0x34020e54
3401a46c:	3401f274 	.word	0x3401f274
3401a470:	3401fb44 	.word	0x3401fb44
3401a474:	3401f194 	.word	0x3401f194
3401a478:	34020e58 	.word	0x34020e58
3401a47c:	3401f258 	.word	0x3401f258

3401a480 <__LL_ATON_RT_Start_AtoNN_Epoch>:
   *  Note: the following function may only be called at the beginning of
   *       `LL_ATON_Start_EpochBlock<n>()` functions, assuming also that at that point
   *       no streaming engine interrupts might trigger (anymore)!
   **/
  static inline void __LL_ATON_RT_Start_AtoNN_Epoch(NN_Instance_TypeDef *nn_instance)
  {
3401a480:	b580      	push	{r7, lr}
3401a482:	b082      	sub	sp, #8
3401a484:	af00      	add	r7, sp, #0
3401a486:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(nn_instance != NULL);
3401a488:	687b      	ldr	r3, [r7, #4]
3401a48a:	2b00      	cmp	r3, #0
3401a48c:	d105      	bne.n	3401a49a <__LL_ATON_RT_Start_AtoNN_Epoch+0x1a>
3401a48e:	4b0a      	ldr	r3, [pc, #40]	@ (3401a4b8 <__LL_ATON_RT_Start_AtoNN_Epoch+0x38>)
3401a490:	4a0a      	ldr	r2, [pc, #40]	@ (3401a4bc <__LL_ATON_RT_Start_AtoNN_Epoch+0x3c>)
3401a492:	2154      	movs	r1, #84	@ 0x54
3401a494:	480a      	ldr	r0, [pc, #40]	@ (3401a4c0 <__LL_ATON_RT_Start_AtoNN_Epoch+0x40>)
3401a496:	f000 ff03 	bl	3401b2a0 <__assert_func>
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3401a49a:	687b      	ldr	r3, [r7, #4]
3401a49c:	69db      	ldr	r3, [r3, #28]
3401a49e:	2b00      	cmp	r3, #0
3401a4a0:	d005      	beq.n	3401a4ae <__LL_ATON_RT_Start_AtoNN_Epoch+0x2e>
3401a4a2:	4b08      	ldr	r3, [pc, #32]	@ (3401a4c4 <__LL_ATON_RT_Start_AtoNN_Epoch+0x44>)
3401a4a4:	4a05      	ldr	r2, [pc, #20]	@ (3401a4bc <__LL_ATON_RT_Start_AtoNN_Epoch+0x3c>)
3401a4a6:	2156      	movs	r1, #86	@ 0x56
3401a4a8:	4805      	ldr	r0, [pc, #20]	@ (3401a4c0 <__LL_ATON_RT_Start_AtoNN_Epoch+0x40>)
3401a4aa:	f000 fef9 	bl	3401b2a0 <__assert_func>
                   0x0); // with the removal of parallel SW/HW epochs execution all triggered events must have been
                         // cleared at this point in time!
#endif
  }
3401a4ae:	bf00      	nop
3401a4b0:	3708      	adds	r7, #8
3401a4b2:	46bd      	mov	sp, r7
3401a4b4:	bd80      	pop	{r7, pc}
3401a4b6:	bf00      	nop
3401a4b8:	3401f2a0 	.word	0x3401f2a0
3401a4bc:	3401fbc4 	.word	0x3401fbc4
3401a4c0:	3401f194 	.word	0x3401f194
3401a4c4:	3401f2bc 	.word	0x3401f2bc

3401a4c8 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
3401a4c8:	b580      	push	{r7, lr}
3401a4ca:	b082      	sub	sp, #8
3401a4cc:	af00      	add	r7, sp, #0
3401a4ce:	6078      	str	r0, [r7, #4]
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3401a4d0:	4b0a      	ldr	r3, [pc, #40]	@ (3401a4fc <__LL_ATON_RT_SetWaitMask+0x34>)
3401a4d2:	681b      	ldr	r3, [r3, #0]
3401a4d4:	2b00      	cmp	r3, #0
3401a4d6:	d105      	bne.n	3401a4e4 <__LL_ATON_RT_SetWaitMask+0x1c>
3401a4d8:	4b09      	ldr	r3, [pc, #36]	@ (3401a500 <__LL_ATON_RT_SetWaitMask+0x38>)
3401a4da:	4a0a      	ldr	r2, [pc, #40]	@ (3401a504 <__LL_ATON_RT_SetWaitMask+0x3c>)
3401a4dc:	2175      	movs	r1, #117	@ 0x75
3401a4de:	480a      	ldr	r0, [pc, #40]	@ (3401a508 <__LL_ATON_RT_SetWaitMask+0x40>)
3401a4e0:	f000 fede 	bl	3401b2a0 <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
3401a4e4:	4a09      	ldr	r2, [pc, #36]	@ (3401a50c <__LL_ATON_RT_SetWaitMask+0x44>)
3401a4e6:	687b      	ldr	r3, [r7, #4]
3401a4e8:	6013      	str	r3, [r2, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3401a4ea:	4a09      	ldr	r2, [pc, #36]	@ (3401a510 <__LL_ATON_RT_SetWaitMask+0x48>)
3401a4ec:	687b      	ldr	r3, [r7, #4]
3401a4ee:	43db      	mvns	r3, r3
3401a4f0:	6013      	str	r3, [r2, #0]
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
3401a4f2:	bf00      	nop
3401a4f4:	3708      	adds	r7, #8
3401a4f6:	46bd      	mov	sp, r7
3401a4f8:	bd80      	pop	{r7, pc}
3401a4fa:	bf00      	nop
3401a4fc:	34020e54 	.word	0x34020e54
3401a500:	3401f2ec 	.word	0x3401f2ec
3401a504:	3401fbf8 	.word	0x3401fbf8
3401a508:	3401f194 	.word	0x3401f194
3401a50c:	34020e58 	.word	0x34020e58
3401a510:	580e1024 	.word	0x580e1024

3401a514 <__LL_ATON_RT_RetFromLibEpochBlockArray>:

  /* return from inserted epoch block */
  static inline void __LL_ATON_RT_RetFromLibEpochBlockArray(bool unlock, NN_Instance_TypeDef *nn_instance)
  {
3401a514:	b580      	push	{r7, lr}
3401a516:	b082      	sub	sp, #8
3401a518:	af00      	add	r7, sp, #0
3401a51a:	4603      	mov	r3, r0
3401a51c:	6039      	str	r1, [r7, #0]
3401a51e:	71fb      	strb	r3, [r7, #7]
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;

    if (!unlock)
3401a520:	79fb      	ldrb	r3, [r7, #7]
3401a522:	f083 0301 	eor.w	r3, r3, #1
3401a526:	b2db      	uxtb	r3, r3
3401a528:	2b00      	cmp	r3, #0
3401a52a:	d015      	beq.n	3401a558 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x44>
    {
      LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3401a52c:	4b38      	ldr	r3, [pc, #224]	@ (3401a610 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
3401a52e:	681b      	ldr	r3, [r3, #0]
3401a530:	2b00      	cmp	r3, #0
3401a532:	d105      	bne.n	3401a540 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x2c>
3401a534:	4b37      	ldr	r3, [pc, #220]	@ (3401a614 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x100>)
3401a536:	4a38      	ldr	r2, [pc, #224]	@ (3401a618 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a538:	2191      	movs	r1, #145	@ 0x91
3401a53a:	4838      	ldr	r0, [pc, #224]	@ (3401a61c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a53c:	f000 feb0 	bl	3401b2a0 <__assert_func>
      LL_ATON_ASSERT(nn_instance == NULL);
3401a540:	683b      	ldr	r3, [r7, #0]
3401a542:	2b00      	cmp	r3, #0
3401a544:	d005      	beq.n	3401a552 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x3e>
3401a546:	4b36      	ldr	r3, [pc, #216]	@ (3401a620 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x10c>)
3401a548:	4a33      	ldr	r2, [pc, #204]	@ (3401a618 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a54a:	2192      	movs	r1, #146	@ 0x92
3401a54c:	4833      	ldr	r0, [pc, #204]	@ (3401a61c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a54e:	f000 fea7 	bl	3401b2a0 <__assert_func>

      nn_instance = __ll_current_aton_ip_owner;
3401a552:	4b2f      	ldr	r3, [pc, #188]	@ (3401a610 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
3401a554:	681b      	ldr	r3, [r3, #0]
3401a556:	603b      	str	r3, [r7, #0]
    }

    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3401a558:	4b2d      	ldr	r3, [pc, #180]	@ (3401a610 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
3401a55a:	681b      	ldr	r3, [r3, #0]
3401a55c:	2b00      	cmp	r3, #0
3401a55e:	d105      	bne.n	3401a56c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x58>
3401a560:	4b2c      	ldr	r3, [pc, #176]	@ (3401a614 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x100>)
3401a562:	4a2d      	ldr	r2, [pc, #180]	@ (3401a618 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a564:	2197      	movs	r1, #151	@ 0x97
3401a566:	482d      	ldr	r0, [pc, #180]	@ (3401a61c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a568:	f000 fe9a 	bl	3401b2a0 <__assert_func>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
3401a56c:	79fb      	ldrb	r3, [r7, #7]
3401a56e:	2b00      	cmp	r3, #0
3401a570:	d006      	beq.n	3401a580 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x6c>
3401a572:	683b      	ldr	r3, [r7, #0]
3401a574:	685b      	ldr	r3, [r3, #4]
3401a576:	4618      	mov	r0, r3
3401a578:	f7ff fe70 	bl	3401a25c <EpochBlock_IsLastEpochBlock>
3401a57c:	4603      	mov	r3, r0
3401a57e:	e005      	b.n	3401a58c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x78>
3401a580:	683b      	ldr	r3, [r7, #0]
3401a582:	685b      	ldr	r3, [r3, #4]
3401a584:	4618      	mov	r0, r3
3401a586:	f7ff fec8 	bl	3401a31a <EpochBlock_IsEpochInternal>
3401a58a:	4603      	mov	r3, r0
3401a58c:	2b00      	cmp	r3, #0
3401a58e:	d105      	bne.n	3401a59c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x88>
3401a590:	4b24      	ldr	r3, [pc, #144]	@ (3401a624 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x110>)
3401a592:	4a21      	ldr	r2, [pc, #132]	@ (3401a618 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a594:	2198      	movs	r1, #152	@ 0x98
3401a596:	4821      	ldr	r0, [pc, #132]	@ (3401a61c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a598:	f000 fe82 	bl	3401b2a0 <__assert_func>
                          : EpochBlock_IsEpochInternal(nn_instance->exec_state.current_epoch_block));
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
3401a59c:	683b      	ldr	r3, [r7, #0]
3401a59e:	691b      	ldr	r3, [r3, #16]
3401a5a0:	4618      	mov	r0, r3
3401a5a2:	f7ff fea7 	bl	3401a2f4 <EpochBlock_IsEpochHybrid>
3401a5a6:	4603      	mov	r3, r0
3401a5a8:	2b00      	cmp	r3, #0
3401a5aa:	d105      	bne.n	3401a5b8 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xa4>
3401a5ac:	4b1e      	ldr	r3, [pc, #120]	@ (3401a628 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x114>)
3401a5ae:	4a1a      	ldr	r2, [pc, #104]	@ (3401a618 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a5b0:	219a      	movs	r1, #154	@ 0x9a
3401a5b2:	481a      	ldr	r0, [pc, #104]	@ (3401a61c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a5b4:	f000 fe74 	bl	3401b2a0 <__assert_func>

    /* Clear owner */
    if (unlock)
3401a5b8:	79fb      	ldrb	r3, [r7, #7]
3401a5ba:	2b00      	cmp	r3, #0
3401a5bc:	d004      	beq.n	3401a5c8 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xb4>
    {
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
3401a5be:	4b14      	ldr	r3, [pc, #80]	@ (3401a610 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
3401a5c0:	681b      	ldr	r3, [r3, #0]
3401a5c2:	4618      	mov	r0, r3
3401a5c4:	f7ff ff30 	bl	3401a428 <__ll_clear_aton_owner>
    }

    /* set old context */
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3401a5c8:	683b      	ldr	r3, [r7, #0]
3401a5ca:	68db      	ldr	r3, [r3, #12]
3401a5cc:	2b00      	cmp	r3, #0
3401a5ce:	d005      	beq.n	3401a5dc <__LL_ATON_RT_RetFromLibEpochBlockArray+0xc8>
3401a5d0:	4b16      	ldr	r3, [pc, #88]	@ (3401a62c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x118>)
3401a5d2:	4a11      	ldr	r2, [pc, #68]	@ (3401a618 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a5d4:	21a3      	movs	r1, #163	@ 0xa3
3401a5d6:	4811      	ldr	r0, [pc, #68]	@ (3401a61c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a5d8:	f000 fe62 	bl	3401b2a0 <__assert_func>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
3401a5dc:	683b      	ldr	r3, [r7, #0]
3401a5de:	691a      	ldr	r2, [r3, #16]
3401a5e0:	683b      	ldr	r3, [r7, #0]
3401a5e2:	605a      	str	r2, [r3, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
3401a5e4:	683b      	ldr	r3, [r7, #0]
3401a5e6:	695a      	ldr	r2, [r3, #20]
3401a5e8:	683b      	ldr	r3, [r7, #0]
3401a5ea:	609a      	str	r2, [r3, #8]

#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
3401a5ec:	683b      	ldr	r3, [r7, #0]
3401a5ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3401a5f0:	683b      	ldr	r3, [r7, #0]
3401a5f2:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

    /* reset saved context */
    nn_instance->exec_state.saved_current_epoch_block = NULL;
3401a5f4:	683b      	ldr	r3, [r7, #0]
3401a5f6:	2200      	movs	r2, #0
3401a5f8:	611a      	str	r2, [r3, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
3401a5fa:	683b      	ldr	r3, [r7, #0]
3401a5fc:	2200      	movs	r2, #0
3401a5fe:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3401a600:	683b      	ldr	r3, [r7, #0]
3401a602:	2200      	movs	r2, #0
3401a604:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
  }
3401a606:	bf00      	nop
3401a608:	3708      	adds	r7, #8
3401a60a:	46bd      	mov	sp, r7
3401a60c:	bd80      	pop	{r7, pc}
3401a60e:	bf00      	nop
3401a610:	34020e54 	.word	0x34020e54
3401a614:	3401f2ec 	.word	0x3401f2ec
3401a618:	3401fb78 	.word	0x3401fb78
3401a61c:	3401f194 	.word	0x3401f194
3401a620:	3401f318 	.word	0x3401f318
3401a624:	3401f334 	.word	0x3401f334
3401a628:	3401f3d0 	.word	0x3401f3d0
3401a62c:	3401f41c 	.word	0x3401f41c

3401a630 <dump_dma_state>:
#error current ATON runtime supports only up to 32 epoch controllers!
#endif // (ATON_EPOCHCTRL_NUM > 32)

#endif // `ATON_INT_NR` and `ATON_STRENG_NUM` are defined

LL_ATON_WEAK void dump_dma_state(void){};
3401a630:	b480      	push	{r7}
3401a632:	af00      	add	r7, sp, #0
3401a634:	bf00      	nop
3401a636:	46bd      	mov	sp, r7
3401a638:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a63c:	4770      	bx	lr

3401a63e <__LL_ATON_RT_CntEpochBlocks>:

/*** Helper Functions ***/

#ifndef NDEBUG
static uint32_t __LL_ATON_RT_CntEpochBlocks(const LL_ATON_RT_EpochBlockItem_t *list)
{
3401a63e:	b580      	push	{r7, lr}
3401a640:	b084      	sub	sp, #16
3401a642:	af00      	add	r7, sp, #0
3401a644:	6078      	str	r0, [r7, #4]
  int i = 0;
3401a646:	2300      	movs	r3, #0
3401a648:	60fb      	str	r3, [r7, #12]

  if (list != NULL)
3401a64a:	687b      	ldr	r3, [r7, #4]
3401a64c:	2b00      	cmp	r3, #0
3401a64e:	d011      	beq.n	3401a674 <__LL_ATON_RT_CntEpochBlocks+0x36>
  {
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3401a650:	2301      	movs	r3, #1
3401a652:	60fb      	str	r3, [r7, #12]
3401a654:	e005      	b.n	3401a662 <__LL_ATON_RT_CntEpochBlocks+0x24>
    { // Note: also terminating empty epoch block is counted
      list++;
3401a656:	687b      	ldr	r3, [r7, #4]
3401a658:	3314      	adds	r3, #20
3401a65a:	607b      	str	r3, [r7, #4]
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3401a65c:	68fb      	ldr	r3, [r7, #12]
3401a65e:	3301      	adds	r3, #1
3401a660:	60fb      	str	r3, [r7, #12]
3401a662:	6878      	ldr	r0, [r7, #4]
3401a664:	f7ff fdfa 	bl	3401a25c <EpochBlock_IsLastEpochBlock>
3401a668:	4603      	mov	r3, r0
3401a66a:	f083 0301 	eor.w	r3, r3, #1
3401a66e:	b2db      	uxtb	r3, r3
3401a670:	2b00      	cmp	r3, #0
3401a672:	d1f0      	bne.n	3401a656 <__LL_ATON_RT_CntEpochBlocks+0x18>
    }
  }

  return i;
3401a674:	68fb      	ldr	r3, [r7, #12]
}
3401a676:	4618      	mov	r0, r3
3401a678:	3710      	adds	r7, #16
3401a67a:	46bd      	mov	sp, r7
3401a67c:	bd80      	pop	{r7, pc}
	...

3401a680 <__LL_ATON_RT_ExecStartEpochBlock>:
#endif

static inline void __LL_ATON_RT_ExecStartEpochBlock(const LL_ATON_RT_EpochBlockItem_t *eb,
                                                    NN_Instance_TypeDef *nn_instance)
{
3401a680:	b580      	push	{r7, lr}
3401a682:	b086      	sub	sp, #24
3401a684:	af00      	add	r7, sp, #0
3401a686:	6078      	str	r0, [r7, #4]
3401a688:	6039      	str	r1, [r7, #0]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3401a68a:	683b      	ldr	r3, [r7, #0]
3401a68c:	68db      	ldr	r3, [r3, #12]
3401a68e:	2b00      	cmp	r3, #0
3401a690:	d005      	beq.n	3401a69e <__LL_ATON_RT_ExecStartEpochBlock+0x1e>
3401a692:	4b4a      	ldr	r3, [pc, #296]	@ (3401a7bc <__LL_ATON_RT_ExecStartEpochBlock+0x13c>)
3401a694:	4a4a      	ldr	r2, [pc, #296]	@ (3401a7c0 <__LL_ATON_RT_ExecStartEpochBlock+0x140>)
3401a696:	2161      	movs	r1, #97	@ 0x61
3401a698:	484a      	ldr	r0, [pc, #296]	@ (3401a7c4 <__LL_ATON_RT_ExecStartEpochBlock+0x144>)
3401a69a:	f000 fe01 	bl	3401b2a0 <__assert_func>

  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401a69e:	683b      	ldr	r3, [r7, #0]
3401a6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a6a2:	2b00      	cmp	r3, #0
3401a6a4:	d005      	beq.n	3401a6b2 <__LL_ATON_RT_ExecStartEpochBlock+0x32>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
3401a6a6:	683b      	ldr	r3, [r7, #0]
3401a6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a6aa:	687a      	ldr	r2, [r7, #4]
3401a6ac:	6839      	ldr	r1, [r7, #0]
3401a6ae:	2000      	movs	r0, #0
3401a6b0:	4798      	blx	r3

  /* Is it the first epoch block in an AtoNN epoch? */
  if (EpochBlock_IsEpochStart(eb))
3401a6b2:	6878      	ldr	r0, [r7, #4]
3401a6b4:	f7ff fde5 	bl	3401a282 <EpochBlock_IsEpochStart>
3401a6b8:	4603      	mov	r3, r0
3401a6ba:	2b00      	cmp	r3, #0
3401a6bc:	d002      	beq.n	3401a6c4 <__LL_ATON_RT_ExecStartEpochBlock+0x44>
  {
    __LL_ATON_RT_Start_AtoNN_Epoch(nn_instance);
3401a6be:	6838      	ldr	r0, [r7, #0]
3401a6c0:	f7ff fede 	bl	3401a480 <__LL_ATON_RT_Start_AtoNN_Epoch>
  }

  /* Grab ATON IP lock in case not a pure SW or internal epoch */
  if (EpochBlock_IsEpochPureHW(eb) ||
3401a6c4:	6878      	ldr	r0, [r7, #4]
3401a6c6:	f7ff fe02 	bl	3401a2ce <EpochBlock_IsEpochPureHW>
3401a6ca:	4603      	mov	r3, r0
3401a6cc:	2b00      	cmp	r3, #0
3401a6ce:	d105      	bne.n	3401a6dc <__LL_ATON_RT_ExecStartEpochBlock+0x5c>
      EpochBlock_IsEpochHybrid(eb)) // epoch blobs are flagged as pure HW, so checking for epoch blob is not necessary
3401a6d0:	6878      	ldr	r0, [r7, #4]
3401a6d2:	f7ff fe0f 	bl	3401a2f4 <EpochBlock_IsEpochHybrid>
3401a6d6:	4603      	mov	r3, r0
  if (EpochBlock_IsEpochPureHW(eb) ||
3401a6d8:	2b00      	cmp	r3, #0
3401a6da:	d002      	beq.n	3401a6e2 <__LL_ATON_RT_ExecStartEpochBlock+0x62>
  {
    __ll_set_aton_owner(nn_instance);
3401a6dc:	6838      	ldr	r0, [r7, #0]
3401a6de:	f7ff fe6b 	bl	3401a3b8 <__ll_set_aton_owner>
  }

  if (!EpochBlock_IsEpochBlob(eb))
3401a6e2:	6878      	ldr	r0, [r7, #4]
3401a6e4:	f7ff fde0 	bl	3401a2a8 <EpochBlock_IsEpochBlob>
3401a6e8:	4603      	mov	r3, r0
3401a6ea:	f083 0301 	eor.w	r3, r3, #1
3401a6ee:	b2db      	uxtb	r3, r3
3401a6f0:	2b00      	cmp	r3, #0
3401a6f2:	d01c      	beq.n	3401a72e <__LL_ATON_RT_ExecStartEpochBlock+0xae>
  { // standard epoch block handling based on streaming engines
    /* set wait mask(s) in interrupt controller */
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
3401a6f4:	6878      	ldr	r0, [r7, #4]
3401a6f6:	f7ff fdea 	bl	3401a2ce <EpochBlock_IsEpochPureHW>
3401a6fa:	4603      	mov	r3, r0
3401a6fc:	2b00      	cmp	r3, #0
3401a6fe:	d105      	bne.n	3401a70c <__LL_ATON_RT_ExecStartEpochBlock+0x8c>
3401a700:	6878      	ldr	r0, [r7, #4]
3401a702:	f7ff fe0a 	bl	3401a31a <EpochBlock_IsEpochInternal>
3401a706:	4603      	mov	r3, r0
3401a708:	2b00      	cmp	r3, #0
3401a70a:	d014      	beq.n	3401a736 <__LL_ATON_RT_ExecStartEpochBlock+0xb6>
    {
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
3401a70c:	4b2e      	ldr	r3, [pc, #184]	@ (3401a7c8 <__LL_ATON_RT_ExecStartEpochBlock+0x148>)
3401a70e:	681b      	ldr	r3, [r3, #0]
3401a710:	683a      	ldr	r2, [r7, #0]
3401a712:	429a      	cmp	r2, r3
3401a714:	d005      	beq.n	3401a722 <__LL_ATON_RT_ExecStartEpochBlock+0xa2>
3401a716:	4b2d      	ldr	r3, [pc, #180]	@ (3401a7cc <__LL_ATON_RT_ExecStartEpochBlock+0x14c>)
3401a718:	4a29      	ldr	r2, [pc, #164]	@ (3401a7c0 <__LL_ATON_RT_ExecStartEpochBlock+0x140>)
3401a71a:	2178      	movs	r1, #120	@ 0x78
3401a71c:	4829      	ldr	r0, [pc, #164]	@ (3401a7c4 <__LL_ATON_RT_ExecStartEpochBlock+0x144>)
3401a71e:	f000 fdbf 	bl	3401b2a0 <__assert_func>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
3401a722:	687b      	ldr	r3, [r7, #4]
3401a724:	68db      	ldr	r3, [r3, #12]
3401a726:	4618      	mov	r0, r3
3401a728:	f7ff fece 	bl	3401a4c8 <__LL_ATON_RT_SetWaitMask>
3401a72c:	e003      	b.n	3401a736 <__LL_ATON_RT_ExecStartEpochBlock+0xb6>
  else
  { // epoch blob handling based on epoch controller
#if defined(ATON_EPOCHCTRL_NUM) &&                                                                                     \
    (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC) // Polling mode is not allowed/supported when using the epoch controller
    /* reset wait mask(s) in interrupt controller, but ignore stream engine completion event interrupts */
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3401a72e:	f240 30ff 	movw	r0, #1023	@ 0x3ff
3401a732:	f7ff fec9 	bl	3401a4c8 <__LL_ATON_RT_SetWaitMask>
#endif // ATON_PLAT_HAS_FFLUSH
    LL_ATON_ASSERT(false); // may never happen
#endif // !ATON_EPOCHCTRL_NUM || LL_ATON_RT_POLLING
  }

  if (eb->start_epoch_block != NULL)
3401a736:	687b      	ldr	r3, [r7, #4]
3401a738:	681b      	ldr	r3, [r3, #0]
3401a73a:	2b00      	cmp	r3, #0
3401a73c:	d003      	beq.n	3401a746 <__LL_ATON_RT_ExecStartEpochBlock+0xc6>
    else
    {
      eb->start_epoch_block((const void *)eb);
    }
#else
    eb->start_epoch_block((const void *)eb);
3401a73e:	687b      	ldr	r3, [r7, #4]
3401a740:	681b      	ldr	r3, [r3, #0]
3401a742:	6878      	ldr	r0, [r7, #4]
3401a744:	4798      	blx	r3
#endif
  }

  if (EpochBlock_IsEpochBlob(eb))
3401a746:	6878      	ldr	r0, [r7, #4]
3401a748:	f7ff fdae 	bl	3401a2a8 <EpochBlock_IsEpochBlob>
3401a74c:	4603      	mov	r3, r0
3401a74e:	2b00      	cmp	r3, #0
3401a750:	d026      	beq.n	3401a7a0 <__LL_ATON_RT_ExecStartEpochBlock+0x120>
  {
#if defined(ATON_EPOCHCTRL_NUM)
    /* configure epoch controller */
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3401a752:	6878      	ldr	r0, [r7, #4]
3401a754:	f7ff fdf4 	bl	3401a340 <EpochBlock_EpochControllerUnit>
3401a758:	6178      	str	r0, [r7, #20]
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401a75a:	697b      	ldr	r3, [r7, #20]
3401a75c:	2b00      	cmp	r3, #0
3401a75e:	d005      	beq.n	3401a76c <__LL_ATON_RT_ExecStartEpochBlock+0xec>
3401a760:	4b1b      	ldr	r3, [pc, #108]	@ (3401a7d0 <__LL_ATON_RT_ExecStartEpochBlock+0x150>)
3401a762:	4a17      	ldr	r2, [pc, #92]	@ (3401a7c0 <__LL_ATON_RT_ExecStartEpochBlock+0x140>)
3401a764:	21a4      	movs	r1, #164	@ 0xa4
3401a766:	4817      	ldr	r0, [pc, #92]	@ (3401a7c4 <__LL_ATON_RT_ExecStartEpochBlock+0x144>)
3401a768:	f000 fd9a 	bl	3401b2a0 <__assert_func>

    LL_EpochCtrl_InitTypeDef conf;
    conf.stepmode = 0;
3401a76c:	7b3b      	ldrb	r3, [r7, #12]
3401a76e:	f023 0301 	bic.w	r3, r3, #1
3401a772:	733b      	strb	r3, [r7, #12]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3401a774:	6878      	ldr	r0, [r7, #4]
3401a776:	f7ff fe01 	bl	3401a37c <EpochBlock_EpochBlobAddr>
3401a77a:	4603      	mov	r3, r0
3401a77c:	60bb      	str	r3, [r7, #8]

    LL_EpochCtrl_Init(ecId, &conf);
3401a77e:	697b      	ldr	r3, [r7, #20]
3401a780:	f107 0208 	add.w	r2, r7, #8
3401a784:	4611      	mov	r1, r2
3401a786:	4618      	mov	r0, r3
3401a788:	f7ff fc66 	bl	3401a058 <LL_EpochCtrl_Init>

    /* start/enable epoch controller */
    ATON_ENABLE(EPOCHCTRL, ecId);
3401a78c:	4b11      	ldr	r3, [pc, #68]	@ (3401a7d4 <__LL_ATON_RT_ExecStartEpochBlock+0x154>)
3401a78e:	681b      	ldr	r3, [r3, #0]
3401a790:	613b      	str	r3, [r7, #16]
3401a792:	693b      	ldr	r3, [r7, #16]
3401a794:	f043 0301 	orr.w	r3, r3, #1
3401a798:	613b      	str	r3, [r7, #16]
3401a79a:	4a0e      	ldr	r2, [pc, #56]	@ (3401a7d4 <__LL_ATON_RT_ExecStartEpochBlock+0x154>)
3401a79c:	693b      	ldr	r3, [r7, #16]
3401a79e:	6013      	str	r3, [r2, #0]
#else  // !ATON_EPOCHCTRL_NUM
    LL_ATON_ASSERT(false); // may never happen
#endif // !ATON_EPOCHCTRL_NUM
  }

  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401a7a0:	683b      	ldr	r3, [r7, #0]
3401a7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a7a4:	2b00      	cmp	r3, #0
3401a7a6:	d005      	beq.n	3401a7b4 <__LL_ATON_RT_ExecStartEpochBlock+0x134>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
3401a7a8:	683b      	ldr	r3, [r7, #0]
3401a7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a7ac:	687a      	ldr	r2, [r7, #4]
3401a7ae:	6839      	ldr	r1, [r7, #0]
3401a7b0:	2001      	movs	r0, #1
3401a7b2:	4798      	blx	r3
}
3401a7b4:	bf00      	nop
3401a7b6:	3718      	adds	r7, #24
3401a7b8:	46bd      	mov	sp, r7
3401a7ba:	bd80      	pop	{r7, pc}
3401a7bc:	3401f41c 	.word	0x3401f41c
3401a7c0:	3401fba0 	.word	0x3401fba0
3401a7c4:	3401f454 	.word	0x3401f454
3401a7c8:	34020e54 	.word	0x34020e54
3401a7cc:	3401f4ec 	.word	0x3401f4ec
3401a7d0:	3401f518 	.word	0x3401f518
3401a7d4:	580fe000 	.word	0x580fe000

3401a7d8 <__LL_ATON_RT_ExecEndEpochBlock>:

static inline void __LL_ATON_RT_ExecEndEpochBlock(const LL_ATON_RT_EpochBlockItem_t *eb,
                                                  NN_Instance_TypeDef *nn_instance)
{
3401a7d8:	b580      	push	{r7, lr}
3401a7da:	b084      	sub	sp, #16
3401a7dc:	af00      	add	r7, sp, #0
3401a7de:	6078      	str	r0, [r7, #4]
3401a7e0:	6039      	str	r1, [r7, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401a7e2:	683b      	ldr	r3, [r7, #0]
3401a7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a7e6:	2b00      	cmp	r3, #0
3401a7e8:	d005      	beq.n	3401a7f6 <__LL_ATON_RT_ExecEndEpochBlock+0x1e>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
3401a7ea:	683b      	ldr	r3, [r7, #0]
3401a7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a7ee:	687a      	ldr	r2, [r7, #4]
3401a7f0:	6839      	ldr	r1, [r7, #0]
3401a7f2:	2002      	movs	r0, #2
3401a7f4:	4798      	blx	r3

  if (EpochBlock_IsEpochBlob(eb))
3401a7f6:	6878      	ldr	r0, [r7, #4]
3401a7f8:	f7ff fd56 	bl	3401a2a8 <EpochBlock_IsEpochBlob>
3401a7fc:	4603      	mov	r3, r0
3401a7fe:	2b00      	cmp	r3, #0
3401a800:	d033      	beq.n	3401a86a <__LL_ATON_RT_ExecEndEpochBlock+0x92>
  {
#if defined(ATON_EPOCHCTRL_NUM)
    /* stop/disable epoch controller */
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3401a802:	6878      	ldr	r0, [r7, #4]
3401a804:	f7ff fd9c 	bl	3401a340 <EpochBlock_EpochControllerUnit>
3401a808:	60f8      	str	r0, [r7, #12]
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401a80a:	68fb      	ldr	r3, [r7, #12]
3401a80c:	2b00      	cmp	r3, #0
3401a80e:	d005      	beq.n	3401a81c <__LL_ATON_RT_ExecEndEpochBlock+0x44>
3401a810:	4b48      	ldr	r3, [pc, #288]	@ (3401a934 <__LL_ATON_RT_ExecEndEpochBlock+0x15c>)
3401a812:	4a49      	ldr	r2, [pc, #292]	@ (3401a938 <__LL_ATON_RT_ExecEndEpochBlock+0x160>)
3401a814:	21c2      	movs	r1, #194	@ 0xc2
3401a816:	4849      	ldr	r0, [pc, #292]	@ (3401a93c <__LL_ATON_RT_ExecEndEpochBlock+0x164>)
3401a818:	f000 fd42 	bl	3401b2a0 <__assert_func>
    uint32_t t;
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
3401a81c:	2300      	movs	r3, #0
3401a81e:	60bb      	str	r3, [r7, #8]
3401a820:	68bb      	ldr	r3, [r7, #8]
3401a822:	f023 0301 	bic.w	r3, r3, #1
3401a826:	60bb      	str	r3, [r7, #8]
3401a828:	68bb      	ldr	r3, [r7, #8]
3401a82a:	f043 0302 	orr.w	r3, r3, #2
3401a82e:	60bb      	str	r3, [r7, #8]
3401a830:	4a43      	ldr	r2, [pc, #268]	@ (3401a940 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
3401a832:	68bb      	ldr	r3, [r7, #8]
3401a834:	6013      	str	r3, [r2, #0]
3401a836:	4b42      	ldr	r3, [pc, #264]	@ (3401a940 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
3401a838:	681b      	ldr	r3, [r3, #0]
3401a83a:	f003 0302 	and.w	r3, r3, #2
3401a83e:	2b00      	cmp	r3, #0
3401a840:	d1f9      	bne.n	3401a836 <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
3401a842:	2300      	movs	r3, #0
3401a844:	60bb      	str	r3, [r7, #8]
3401a846:	68bb      	ldr	r3, [r7, #8]
3401a848:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3401a84c:	60bb      	str	r3, [r7, #8]
3401a84e:	4a3c      	ldr	r2, [pc, #240]	@ (3401a940 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
3401a850:	68bb      	ldr	r3, [r7, #8]
3401a852:	6013      	str	r3, [r2, #0]
3401a854:	4b3a      	ldr	r3, [pc, #232]	@ (3401a940 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
3401a856:	681b      	ldr	r3, [r3, #0]
3401a858:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3401a85c:	2b00      	cmp	r3, #0
3401a85e:	d1f9      	bne.n	3401a854 <__LL_ATON_RT_ExecEndEpochBlock+0x7c>

    /* disable epoch controller clock */
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
3401a860:	68fb      	ldr	r3, [r7, #12]
3401a862:	3319      	adds	r3, #25
3401a864:	4618      	mov	r0, r3
3401a866:	f7ff fc5d 	bl	3401a124 <LL_ATON_DisableClock>
#else  // !ATON_EPOCHCTRL_NUM
    LL_ATON_ASSERT(false); // may never happen
#endif // !ATON_EPOCHCTRL_NUM
  }

  if (eb->end_epoch_block != NULL)
3401a86a:	687b      	ldr	r3, [r7, #4]
3401a86c:	685b      	ldr	r3, [r3, #4]
3401a86e:	2b00      	cmp	r3, #0
3401a870:	d003      	beq.n	3401a87a <__LL_ATON_RT_ExecEndEpochBlock+0xa2>
    else
    {
      eb->end_epoch_block((const void *)eb);
    }
#else
    eb->end_epoch_block((const void *)eb);
3401a872:	687b      	ldr	r3, [r7, #4]
3401a874:	685b      	ldr	r3, [r3, #4]
3401a876:	6878      	ldr	r0, [r7, #4]
3401a878:	4798      	blx	r3
#endif
  }

  /* Reset wait mask */
  if (EpochBlock_IsEpochPureHW(eb) ||
3401a87a:	6878      	ldr	r0, [r7, #4]
3401a87c:	f7ff fd27 	bl	3401a2ce <EpochBlock_IsEpochPureHW>
3401a880:	4603      	mov	r3, r0
3401a882:	2b00      	cmp	r3, #0
3401a884:	d105      	bne.n	3401a892 <__LL_ATON_RT_ExecEndEpochBlock+0xba>
      EpochBlock_IsEpochInternal(eb)) // epoch blobs are flagged as pure HW, so checking for epoch blob is not necessary
3401a886:	6878      	ldr	r0, [r7, #4]
3401a888:	f7ff fd47 	bl	3401a31a <EpochBlock_IsEpochInternal>
3401a88c:	4603      	mov	r3, r0
  if (EpochBlock_IsEpochPureHW(eb) ||
3401a88e:	2b00      	cmp	r3, #0
3401a890:	d00d      	beq.n	3401a8ae <__LL_ATON_RT_ExecEndEpochBlock+0xd6>
  {
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3401a892:	4b2c      	ldr	r3, [pc, #176]	@ (3401a944 <__LL_ATON_RT_ExecEndEpochBlock+0x16c>)
3401a894:	681b      	ldr	r3, [r3, #0]
3401a896:	683a      	ldr	r2, [r7, #0]
3401a898:	429a      	cmp	r2, r3
3401a89a:	d005      	beq.n	3401a8a8 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>
3401a89c:	4b2a      	ldr	r3, [pc, #168]	@ (3401a948 <__LL_ATON_RT_ExecEndEpochBlock+0x170>)
3401a89e:	4a26      	ldr	r2, [pc, #152]	@ (3401a938 <__LL_ATON_RT_ExecEndEpochBlock+0x160>)
3401a8a0:	21e1      	movs	r1, #225	@ 0xe1
3401a8a2:	4826      	ldr	r0, [pc, #152]	@ (3401a93c <__LL_ATON_RT_ExecEndEpochBlock+0x164>)
3401a8a4:	f000 fcfc 	bl	3401b2a0 <__assert_func>
    __LL_ATON_RT_SetWaitMask(0);
3401a8a8:	2000      	movs	r0, #0
3401a8aa:	f7ff fe0d 	bl	3401a4c8 <__LL_ATON_RT_SetWaitMask>
  }

  /* Release ATON IP unlock in case it's a pure HW epoch */
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3401a8ae:	6878      	ldr	r0, [r7, #4]
3401a8b0:	f7ff fd0d 	bl	3401a2ce <EpochBlock_IsEpochPureHW>
3401a8b4:	4603      	mov	r3, r0
3401a8b6:	2b00      	cmp	r3, #0
3401a8b8:	d113      	bne.n	3401a8e2 <__LL_ATON_RT_ExecEndEpochBlock+0x10a>
3401a8ba:	6878      	ldr	r0, [r7, #4]
3401a8bc:	f7ff fd1a 	bl	3401a2f4 <EpochBlock_IsEpochHybrid>
3401a8c0:	4603      	mov	r3, r0
3401a8c2:	2b00      	cmp	r3, #0
3401a8c4:	d105      	bne.n	3401a8d2 <__LL_ATON_RT_ExecEndEpochBlock+0xfa>
3401a8c6:	6878      	ldr	r0, [r7, #4]
3401a8c8:	f7ff fd27 	bl	3401a31a <EpochBlock_IsEpochInternal>
3401a8cc:	4603      	mov	r3, r0
3401a8ce:	2b00      	cmp	r3, #0
3401a8d0:	d00a      	beq.n	3401a8e8 <__LL_ATON_RT_ExecEndEpochBlock+0x110>
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3401a8d2:	683b      	ldr	r3, [r7, #0]
3401a8d4:	691b      	ldr	r3, [r3, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3401a8d6:	2b00      	cmp	r3, #0
3401a8d8:	d106      	bne.n	3401a8e8 <__LL_ATON_RT_ExecEndEpochBlock+0x110>
                                       (nn_instance->exec_state.next_epoch_block ==
3401a8da:	683b      	ldr	r3, [r7, #0]
3401a8dc:	68db      	ldr	r3, [r3, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3401a8de:	2b00      	cmp	r3, #0
3401a8e0:	d102      	bne.n	3401a8e8 <__LL_ATON_RT_ExecEndEpochBlock+0x110>
                                        NULL))) /* hybrid has finished after that last part has been executed in SW */
  {
    __ll_clear_aton_owner(nn_instance);
3401a8e2:	6838      	ldr	r0, [r7, #0]
3401a8e4:	f7ff fda0 	bl	3401a428 <__ll_clear_aton_owner>
  }
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3401a8e8:	6878      	ldr	r0, [r7, #4]
3401a8ea:	f7ff fd16 	bl	3401a31a <EpochBlock_IsEpochInternal>
3401a8ee:	4603      	mov	r3, r0
3401a8f0:	2b00      	cmp	r3, #0
3401a8f2:	d110      	bne.n	3401a916 <__LL_ATON_RT_ExecEndEpochBlock+0x13e>
3401a8f4:	6878      	ldr	r0, [r7, #4]
3401a8f6:	f7ff fcfd 	bl	3401a2f4 <EpochBlock_IsEpochHybrid>
3401a8fa:	4603      	mov	r3, r0
3401a8fc:	2b00      	cmp	r3, #0
3401a8fe:	d10a      	bne.n	3401a916 <__LL_ATON_RT_ExecEndEpochBlock+0x13e>
3401a900:	4b10      	ldr	r3, [pc, #64]	@ (3401a944 <__LL_ATON_RT_ExecEndEpochBlock+0x16c>)
3401a902:	681b      	ldr	r3, [r3, #0]
3401a904:	683a      	ldr	r2, [r7, #0]
3401a906:	429a      	cmp	r2, r3
3401a908:	d105      	bne.n	3401a916 <__LL_ATON_RT_ExecEndEpochBlock+0x13e>
3401a90a:	4b10      	ldr	r3, [pc, #64]	@ (3401a94c <__LL_ATON_RT_ExecEndEpochBlock+0x174>)
3401a90c:	4a0a      	ldr	r2, [pc, #40]	@ (3401a938 <__LL_ATON_RT_ExecEndEpochBlock+0x160>)
3401a90e:	21ed      	movs	r1, #237	@ 0xed
3401a910:	480a      	ldr	r0, [pc, #40]	@ (3401a93c <__LL_ATON_RT_ExecEndEpochBlock+0x164>)
3401a912:	f000 fcc5 	bl	3401b2a0 <__assert_func>
                 (__ll_current_aton_ip_owner != nn_instance));

  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401a916:	683b      	ldr	r3, [r7, #0]
3401a918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a91a:	2b00      	cmp	r3, #0
3401a91c:	d005      	beq.n	3401a92a <__LL_ATON_RT_ExecEndEpochBlock+0x152>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3401a91e:	683b      	ldr	r3, [r7, #0]
3401a920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a922:	687a      	ldr	r2, [r7, #4]
3401a924:	6839      	ldr	r1, [r7, #0]
3401a926:	2003      	movs	r0, #3
3401a928:	4798      	blx	r3
  }
}
3401a92a:	bf00      	nop
3401a92c:	3710      	adds	r7, #16
3401a92e:	46bd      	mov	sp, r7
3401a930:	bd80      	pop	{r7, pc}
3401a932:	bf00      	nop
3401a934:	3401f518 	.word	0x3401f518
3401a938:	3401fc50 	.word	0x3401fc50
3401a93c:	3401f454 	.word	0x3401f454
3401a940:	580fe000 	.word	0x580fe000
3401a944:	34020e54 	.word	0x34020e54
3401a948:	3401f524 	.word	0x3401f524
3401a94c:	3401f550 	.word	0x3401f550

3401a950 <__LL_ATON_RT_DetermineNextEpochBlock>:

static void __LL_ATON_RT_DetermineNextEpochBlock(NN_Instance_TypeDef *nn_instance)
{
3401a950:	b580      	push	{r7, lr}
3401a952:	b082      	sub	sp, #8
3401a954:	af00      	add	r7, sp, #0
3401a956:	6078      	str	r0, [r7, #4]
  LL_ATON_ASSERT(nn_instance != NULL);
3401a958:	687b      	ldr	r3, [r7, #4]
3401a95a:	2b00      	cmp	r3, #0
3401a95c:	d105      	bne.n	3401a96a <__LL_ATON_RT_DetermineNextEpochBlock+0x1a>
3401a95e:	4b26      	ldr	r3, [pc, #152]	@ (3401a9f8 <__LL_ATON_RT_DetermineNextEpochBlock+0xa8>)
3401a960:	4a26      	ldr	r2, [pc, #152]	@ (3401a9fc <__LL_ATON_RT_DetermineNextEpochBlock+0xac>)
3401a962:	21f8      	movs	r1, #248	@ 0xf8
3401a964:	4826      	ldr	r0, [pc, #152]	@ (3401aa00 <__LL_ATON_RT_DetermineNextEpochBlock+0xb0>)
3401a966:	f000 fc9b 	bl	3401b2a0 <__assert_func>
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3401a96a:	687b      	ldr	r3, [r7, #4]
3401a96c:	69db      	ldr	r3, [r3, #28]
3401a96e:	2b00      	cmp	r3, #0
3401a970:	d005      	beq.n	3401a97e <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
3401a972:	4b24      	ldr	r3, [pc, #144]	@ (3401aa04 <__LL_ATON_RT_DetermineNextEpochBlock+0xb4>)
3401a974:	4a21      	ldr	r2, [pc, #132]	@ (3401a9fc <__LL_ATON_RT_DetermineNextEpochBlock+0xac>)
3401a976:	21fa      	movs	r1, #250	@ 0xfa
3401a978:	4821      	ldr	r0, [pc, #132]	@ (3401aa00 <__LL_ATON_RT_DetermineNextEpochBlock+0xb0>)
3401a97a:	f000 fc91 	bl	3401b2a0 <__assert_func>
                 0x0); // with the removal of parallel SW/HW epochs execution all triggered events must have been
                       // cleared at this point in time!
#endif                 // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /* Determine if there is a new inserted epoch block array */
  if ((nn_instance->exec_state.next_epoch_block != NULL))
3401a97e:	687b      	ldr	r3, [r7, #4]
3401a980:	68db      	ldr	r3, [r3, #12]
3401a982:	2b00      	cmp	r3, #0
3401a984:	d02a      	beq.n	3401a9dc <__LL_ATON_RT_DetermineNextEpochBlock+0x8c>
  {
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
3401a986:	687b      	ldr	r3, [r7, #4]
3401a988:	691b      	ldr	r3, [r3, #16]
3401a98a:	2b00      	cmp	r3, #0
3401a98c:	d006      	beq.n	3401a99c <__LL_ATON_RT_DetermineNextEpochBlock+0x4c>
3401a98e:	4b1e      	ldr	r3, [pc, #120]	@ (3401aa08 <__LL_ATON_RT_DetermineNextEpochBlock+0xb8>)
3401a990:	4a1a      	ldr	r2, [pc, #104]	@ (3401a9fc <__LL_ATON_RT_DetermineNextEpochBlock+0xac>)
3401a992:	f44f 7181 	mov.w	r1, #258	@ 0x102
3401a996:	481a      	ldr	r0, [pc, #104]	@ (3401aa00 <__LL_ATON_RT_DetermineNextEpochBlock+0xb0>)
3401a998:	f000 fc82 	bl	3401b2a0 <__assert_func>

    /* save current context */
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
3401a99c:	687b      	ldr	r3, [r7, #4]
3401a99e:	685a      	ldr	r2, [r3, #4]
3401a9a0:	687b      	ldr	r3, [r7, #4]
3401a9a2:	611a      	str	r2, [r3, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
3401a9a4:	687b      	ldr	r3, [r7, #4]
3401a9a6:	689a      	ldr	r2, [r3, #8]
3401a9a8:	687b      	ldr	r3, [r7, #4]
3401a9aa:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
3401a9ac:	687b      	ldr	r3, [r7, #4]
3401a9ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3401a9b0:	687b      	ldr	r3, [r7, #4]
3401a9b2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

    /* set new context */
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
3401a9b4:	687b      	ldr	r3, [r7, #4]
3401a9b6:	68da      	ldr	r2, [r3, #12]
3401a9b8:	687b      	ldr	r3, [r7, #4]
3401a9ba:	605a      	str	r2, [r3, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
3401a9bc:	687b      	ldr	r3, [r7, #4]
3401a9be:	68da      	ldr	r2, [r3, #12]
3401a9c0:	687b      	ldr	r3, [r7, #4]
3401a9c2:	609a      	str	r2, [r3, #8]
#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3401a9c4:	687b      	ldr	r3, [r7, #4]
3401a9c6:	689b      	ldr	r3, [r3, #8]
3401a9c8:	4618      	mov	r0, r3
3401a9ca:	f7ff fe38 	bl	3401a63e <__LL_ATON_RT_CntEpochBlocks>
3401a9ce:	4602      	mov	r2, r0
3401a9d0:	687b      	ldr	r3, [r7, #4]
3401a9d2:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

    /* reset next epoch block */
    nn_instance->exec_state.next_epoch_block = NULL;
3401a9d4:	687b      	ldr	r3, [r7, #4]
3401a9d6:	2200      	movs	r2, #0
3401a9d8:	60da      	str	r2, [r3, #12]
3401a9da:	e005      	b.n	3401a9e8 <__LL_ATON_RT_DetermineNextEpochBlock+0x98>
  }
  else
  {
    nn_instance->exec_state.current_epoch_block++;
3401a9dc:	687b      	ldr	r3, [r7, #4]
3401a9de:	685b      	ldr	r3, [r3, #4]
3401a9e0:	f103 0214 	add.w	r2, r3, #20
3401a9e4:	687b      	ldr	r3, [r7, #4]
3401a9e6:	605a      	str	r2, [r3, #4]
  }

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  nn_instance->exec_state.current_epoch_block_started = false;
3401a9e8:	687b      	ldr	r3, [r7, #4]
3401a9ea:	2200      	movs	r2, #0
3401a9ec:	f883 2020 	strb.w	r2, [r3, #32]
#endif
}
3401a9f0:	bf00      	nop
3401a9f2:	3708      	adds	r7, #8
3401a9f4:	46bd      	mov	sp, r7
3401a9f6:	bd80      	pop	{r7, pc}
3401a9f8:	3401f2a0 	.word	0x3401f2a0
3401a9fc:	3401fb04 	.word	0x3401fb04
3401aa00:	3401f454 	.word	0x3401f454
3401aa04:	3401f2bc 	.word	0x3401f2bc
3401aa08:	3401f5c0 	.word	0x3401f5c0

3401aa0c <__LL_ATON_RT_GetWaitMask>:

static inline uint32_t __LL_ATON_RT_GetWaitMask(const LL_ATON_RT_EpochBlockItem_t *eb)
{
3401aa0c:	b580      	push	{r7, lr}
3401aa0e:	b082      	sub	sp, #8
3401aa10:	af00      	add	r7, sp, #0
3401aa12:	6078      	str	r0, [r7, #4]
  if (EpochBlock_IsEpochBlob(eb))
3401aa14:	6878      	ldr	r0, [r7, #4]
3401aa16:	f7ff fc47 	bl	3401a2a8 <EpochBlock_IsEpochBlob>
3401aa1a:	4603      	mov	r3, r0
3401aa1c:	2b00      	cmp	r3, #0
3401aa1e:	d007      	beq.n	3401aa30 <__LL_ATON_RT_GetWaitMask+0x24>
  {
    // in case of epoch blob `wait_mask` contains unit number of epoch controller to use
    return (1 << EpochBlock_EpochControllerUnit(eb));
3401aa20:	6878      	ldr	r0, [r7, #4]
3401aa22:	f7ff fc8d 	bl	3401a340 <EpochBlock_EpochControllerUnit>
3401aa26:	4603      	mov	r3, r0
3401aa28:	2201      	movs	r2, #1
3401aa2a:	fa02 f303 	lsl.w	r3, r2, r3
3401aa2e:	e001      	b.n	3401aa34 <__LL_ATON_RT_GetWaitMask+0x28>
  }
  else
  {
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3401aa30:	687b      	ldr	r3, [r7, #4]
3401aa32:	68db      	ldr	r3, [r3, #12]
                          // wait for
  }
}
3401aa34:	4618      	mov	r0, r3
3401aa36:	3708      	adds	r7, #8
3401aa38:	46bd      	mov	sp, r7
3401aa3a:	bd80      	pop	{r7, pc}

3401aa3c <__LL_ATON_RT_Init_Network>:

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
3401aa3c:	b580      	push	{r7, lr}
3401aa3e:	b084      	sub	sp, #16
3401aa40:	af00      	add	r7, sp, #0
3401aa42:	6078      	str	r0, [r7, #4]
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3401aa44:	687b      	ldr	r3, [r7, #4]
3401aa46:	2b00      	cmp	r3, #0
3401aa48:	d037      	beq.n	3401aaba <__LL_ATON_RT_Init_Network+0x7e>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3401aa4a:	687b      	ldr	r3, [r7, #4]
3401aa4c:	681b      	ldr	r3, [r3, #0]
3401aa4e:	2b00      	cmp	r3, #0
3401aa50:	d035      	beq.n	3401aabe <__LL_ATON_RT_Init_Network+0x82>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
3401aa52:	687b      	ldr	r3, [r7, #4]
3401aa54:	681b      	ldr	r3, [r3, #0]
3401aa56:	69db      	ldr	r3, [r3, #28]
3401aa58:	4798      	blx	r3
3401aa5a:	60f8      	str	r0, [r7, #12]
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
3401aa5c:	687b      	ldr	r3, [r7, #4]
3401aa5e:	68fa      	ldr	r2, [r7, #12]
3401aa60:	605a      	str	r2, [r3, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3401aa62:	687b      	ldr	r3, [r7, #4]
3401aa64:	68fa      	ldr	r2, [r7, #12]
3401aa66:	609a      	str	r2, [r3, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3401aa68:	687b      	ldr	r3, [r7, #4]
3401aa6a:	2200      	movs	r2, #0
3401aa6c:	60da      	str	r2, [r3, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3401aa6e:	687b      	ldr	r3, [r7, #4]
3401aa70:	2200      	movs	r2, #0
3401aa72:	611a      	str	r2, [r3, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3401aa74:	687b      	ldr	r3, [r7, #4]
3401aa76:	2200      	movs	r2, #0
3401aa78:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3401aa7a:	687b      	ldr	r3, [r7, #4]
3401aa7c:	685b      	ldr	r3, [r3, #4]
3401aa7e:	4618      	mov	r0, r3
3401aa80:	f7ff fddd 	bl	3401a63e <__LL_ATON_RT_CntEpochBlocks>
3401aa84:	4602      	mov	r2, r0
3401aa86:	687b      	ldr	r3, [r7, #4]
3401aa88:	625a      	str	r2, [r3, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3401aa8a:	687b      	ldr	r3, [r7, #4]
3401aa8c:	2200      	movs	r2, #0
3401aa8e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

  /* set information about running inference */
  nn_instance->exec_state.inference_started = false;
3401aa90:	687b      	ldr	r3, [r7, #4]
3401aa92:	2200      	movs	r2, #0
3401aa94:	761a      	strb	r2, [r3, #24]

  /* set asynchronous status variables */
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  nn_instance->exec_state.triggered_events = 0x0;
3401aa96:	687b      	ldr	r3, [r7, #4]
3401aa98:	2200      	movs	r2, #0
3401aa9a:	61da      	str	r2, [r3, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3401aa9c:	687b      	ldr	r3, [r7, #4]
3401aa9e:	2200      	movs	r2, #0
3401aaa0:	f883 2020 	strb.w	r2, [r3, #32]
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401aaa4:	687b      	ldr	r3, [r7, #4]
3401aaa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401aaa8:	2b00      	cmp	r3, #0
3401aaaa:	d009      	beq.n	3401aac0 <__LL_ATON_RT_Init_Network+0x84>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3401aaac:	687b      	ldr	r3, [r7, #4]
3401aaae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401aab0:	2200      	movs	r2, #0
3401aab2:	6879      	ldr	r1, [r7, #4]
3401aab4:	2004      	movs	r0, #4
3401aab6:	4798      	blx	r3
3401aab8:	e002      	b.n	3401aac0 <__LL_ATON_RT_Init_Network+0x84>
    return;
3401aaba:	bf00      	nop
3401aabc:	e000      	b.n	3401aac0 <__LL_ATON_RT_Init_Network+0x84>
    return;
3401aabe:	bf00      	nop
  }
}
3401aac0:	3710      	adds	r7, #16
3401aac2:	46bd      	mov	sp, r7
3401aac4:	bd80      	pop	{r7, pc}
	...

3401aac8 <LL_ATON_RT_Init_Network>:
/**
 * @brief Initialize a network instance
 * @param nn_instance Pointer to network instance to initialize
 */
void LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
3401aac8:	b580      	push	{r7, lr}
3401aaca:	b084      	sub	sp, #16
3401aacc:	af00      	add	r7, sp, #0
3401aace:	6078      	str	r0, [r7, #4]
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3401aad0:	687b      	ldr	r3, [r7, #4]
3401aad2:	2b00      	cmp	r3, #0
3401aad4:	d023      	beq.n	3401ab1e <LL_ATON_RT_Init_Network+0x56>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3401aad6:	687b      	ldr	r3, [r7, #4]
3401aad8:	681b      	ldr	r3, [r3, #0]
3401aada:	2b00      	cmp	r3, #0
3401aadc:	d021      	beq.n	3401ab22 <LL_ATON_RT_Init_Network+0x5a>
  {
    LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
    ret = nn_instance->network->ec_network_init();
  }
#else
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
3401aade:	687b      	ldr	r3, [r7, #4]
3401aae0:	681b      	ldr	r3, [r3, #0]
3401aae2:	685b      	ldr	r3, [r3, #4]
3401aae4:	2b00      	cmp	r3, #0
3401aae6:	d106      	bne.n	3401aaf6 <LL_ATON_RT_Init_Network+0x2e>
3401aae8:	4b10      	ldr	r3, [pc, #64]	@ (3401ab2c <LL_ATON_RT_Init_Network+0x64>)
3401aaea:	4a11      	ldr	r2, [pc, #68]	@ (3401ab30 <LL_ATON_RT_Init_Network+0x68>)
3401aaec:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
3401aaf0:	4810      	ldr	r0, [pc, #64]	@ (3401ab34 <LL_ATON_RT_Init_Network+0x6c>)
3401aaf2:	f000 fbd5 	bl	3401b2a0 <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
3401aaf6:	687b      	ldr	r3, [r7, #4]
3401aaf8:	681b      	ldr	r3, [r3, #0]
3401aafa:	685b      	ldr	r3, [r3, #4]
3401aafc:	4798      	blx	r3
3401aafe:	4603      	mov	r3, r0
3401ab00:	73fb      	strb	r3, [r7, #15]
#endif
  LL_ATON_ASSERT(ret == true);
3401ab02:	7bfb      	ldrb	r3, [r7, #15]
3401ab04:	2b01      	cmp	r3, #1
3401ab06:	d006      	beq.n	3401ab16 <LL_ATON_RT_Init_Network+0x4e>
3401ab08:	4b0b      	ldr	r3, [pc, #44]	@ (3401ab38 <LL_ATON_RT_Init_Network+0x70>)
3401ab0a:	4a09      	ldr	r2, [pc, #36]	@ (3401ab30 <LL_ATON_RT_Init_Network+0x68>)
3401ab0c:	f240 11a9 	movw	r1, #425	@ 0x1a9
3401ab10:	4808      	ldr	r0, [pc, #32]	@ (3401ab34 <LL_ATON_RT_Init_Network+0x6c>)
3401ab12:	f000 fbc5 	bl	3401b2a0 <__assert_func>
  LL_ATON_LIB_UNUSED(ret);

  /* Call actual network instance initialization */
  __LL_ATON_RT_Init_Network(nn_instance);
3401ab16:	6878      	ldr	r0, [r7, #4]
3401ab18:	f7ff ff90 	bl	3401aa3c <__LL_ATON_RT_Init_Network>
3401ab1c:	e002      	b.n	3401ab24 <LL_ATON_RT_Init_Network+0x5c>
    return;
3401ab1e:	bf00      	nop
3401ab20:	e000      	b.n	3401ab24 <LL_ATON_RT_Init_Network+0x5c>
    return;
3401ab22:	bf00      	nop
}
3401ab24:	3710      	adds	r7, #16
3401ab26:	46bd      	mov	sp, r7
3401ab28:	bd80      	pop	{r7, pc}
3401ab2a:	bf00      	nop
3401ab2c:	3401f604 	.word	0x3401f604
3401ab30:	3401fb2c 	.word	0x3401fb2c
3401ab34:	3401f454 	.word	0x3401f454
3401ab38:	3401f63c 	.word	0x3401f63c

3401ab3c <LL_ATON_RT_DeInit_Network>:
/**
 * @brief De-initialize a network instance
 * @param nn_instance Pointer to network instance to de-initialize
 */
void LL_ATON_RT_DeInit_Network(NN_Instance_TypeDef *nn_instance)
{
3401ab3c:	b580      	push	{r7, lr}
3401ab3e:	b084      	sub	sp, #16
3401ab40:	af00      	add	r7, sp, #0
3401ab42:	6078      	str	r0, [r7, #4]
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3401ab44:	687b      	ldr	r3, [r7, #4]
3401ab46:	2b00      	cmp	r3, #0
3401ab48:	d030      	beq.n	3401abac <LL_ATON_RT_DeInit_Network+0x70>
  {
    return;
  }

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_DeInit` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401ab4a:	687b      	ldr	r3, [r7, #4]
3401ab4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401ab4e:	2b00      	cmp	r3, #0
3401ab50:	d005      	beq.n	3401ab5e <LL_ATON_RT_DeInit_Network+0x22>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
3401ab52:	687b      	ldr	r3, [r7, #4]
3401ab54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401ab56:	2200      	movs	r2, #0
3401ab58:	6879      	ldr	r1, [r7, #4]
3401ab5a:	2005      	movs	r0, #5
3401ab5c:	4798      	blx	r3
  }

  /** Re-set ATON IP owner */
  if (nn_instance == __ll_current_aton_ip_owner)
3401ab5e:	4b15      	ldr	r3, [pc, #84]	@ (3401abb4 <LL_ATON_RT_DeInit_Network+0x78>)
3401ab60:	681b      	ldr	r3, [r3, #0]
3401ab62:	687a      	ldr	r2, [r7, #4]
3401ab64:	429a      	cmp	r2, r3
3401ab66:	d102      	bne.n	3401ab6e <LL_ATON_RT_DeInit_Network+0x32>
  { // In case this function gets called while an ATON lib internal EpochBlock (used to implement hybrid epochs) is
    // under execution we might still be owner of the ATON IP
    __ll_clear_aton_owner(nn_instance);
3401ab68:	6878      	ldr	r0, [r7, #4]
3401ab6a:	f7ff fc5d 	bl	3401a428 <__ll_clear_aton_owner>
  }

  /** De-initialize static variables **/
  /* re-set context */
  const LL_ATON_RT_EpochBlockItem_t *eb_list = NULL;
3401ab6e:	2300      	movs	r3, #0
3401ab70:	60fb      	str	r3, [r7, #12]
  nn_instance->exec_state.current_epoch_block = eb_list;
3401ab72:	687b      	ldr	r3, [r7, #4]
3401ab74:	68fa      	ldr	r2, [r7, #12]
3401ab76:	605a      	str	r2, [r3, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3401ab78:	687b      	ldr	r3, [r7, #4]
3401ab7a:	68fa      	ldr	r2, [r7, #12]
3401ab7c:	609a      	str	r2, [r3, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3401ab7e:	687b      	ldr	r3, [r7, #4]
3401ab80:	2200      	movs	r2, #0
3401ab82:	60da      	str	r2, [r3, #12]

  /* re-set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3401ab84:	687b      	ldr	r3, [r7, #4]
3401ab86:	2200      	movs	r2, #0
3401ab88:	611a      	str	r2, [r3, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3401ab8a:	687b      	ldr	r3, [r7, #4]
3401ab8c:	2200      	movs	r2, #0
3401ab8e:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
3401ab90:	687b      	ldr	r3, [r7, #4]
3401ab92:	2200      	movs	r2, #0
3401ab94:	625a      	str	r2, [r3, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3401ab96:	687b      	ldr	r3, [r7, #4]
3401ab98:	2200      	movs	r2, #0
3401ab9a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* intentional do not re-set information about running inference `nn_instance->exec_state.inference_started` */

  /* re-set asynchronous status variables */
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  nn_instance->exec_state.triggered_events = 0x0;
3401ab9c:	687b      	ldr	r3, [r7, #4]
3401ab9e:	2200      	movs	r2, #0
3401aba0:	61da      	str	r2, [r3, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3401aba2:	687b      	ldr	r3, [r7, #4]
3401aba4:	2200      	movs	r2, #0
3401aba6:	f883 2020 	strb.w	r2, [r3, #32]
3401abaa:	e000      	b.n	3401abae <LL_ATON_RT_DeInit_Network+0x72>
    return;
3401abac:	bf00      	nop
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
}
3401abae:	3710      	adds	r7, #16
3401abb0:	46bd      	mov	sp, r7
3401abb2:	bd80      	pop	{r7, pc}
3401abb4:	34020e54 	.word	0x34020e54

3401abb8 <LL_ATON_RT_RuntimeInit>:

/**
 * @brief Initialize the ATON runtime
 */
void LL_ATON_RT_RuntimeInit(void)
{
3401abb8:	b580      	push	{r7, lr}
3401abba:	b082      	sub	sp, #8
3401abbc:	af00      	add	r7, sp, #0
  /** Initialize ATON IPs **/
  LL_ATON_Init();
3401abbe:	f7fd f983 	bl	34017ec8 <LL_ATON_Init>
  /** Initialize IRQ Context **/
  {
    uint32_t t;

    /* Disable & Clear interrupt controller */
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
3401abc2:	2300      	movs	r3, #0
3401abc4:	607b      	str	r3, [r7, #4]
3401abc6:	687b      	ldr	r3, [r7, #4]
3401abc8:	f023 0301 	bic.w	r3, r3, #1
3401abcc:	607b      	str	r3, [r7, #4]
3401abce:	687b      	ldr	r3, [r7, #4]
3401abd0:	f043 0302 	orr.w	r3, r3, #2
3401abd4:	607b      	str	r3, [r7, #4]
3401abd6:	4a22      	ldr	r2, [pc, #136]	@ (3401ac60 <LL_ATON_RT_RuntimeInit+0xa8>)
3401abd8:	687b      	ldr	r3, [r7, #4]
3401abda:	6013      	str	r3, [r2, #0]
3401abdc:	4b20      	ldr	r3, [pc, #128]	@ (3401ac60 <LL_ATON_RT_RuntimeInit+0xa8>)
3401abde:	681b      	ldr	r3, [r3, #0]
3401abe0:	f003 0302 	and.w	r3, r3, #2
3401abe4:	2b00      	cmp	r3, #0
3401abe6:	d1f9      	bne.n	3401abdc <LL_ATON_RT_RuntimeInit+0x24>
3401abe8:	2300      	movs	r3, #0
3401abea:	607b      	str	r3, [r7, #4]
3401abec:	687b      	ldr	r3, [r7, #4]
3401abee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3401abf2:	607b      	str	r3, [r7, #4]
3401abf4:	4a1a      	ldr	r2, [pc, #104]	@ (3401ac60 <LL_ATON_RT_RuntimeInit+0xa8>)
3401abf6:	687b      	ldr	r3, [r7, #4]
3401abf8:	6013      	str	r3, [r2, #0]
3401abfa:	4b19      	ldr	r3, [pc, #100]	@ (3401ac60 <LL_ATON_RT_RuntimeInit+0xa8>)
3401abfc:	681b      	ldr	r3, [r3, #0]
3401abfe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3401ac02:	2b00      	cmp	r3, #0
3401ac04:	d1f9      	bne.n	3401abfa <LL_ATON_RT_RuntimeInit+0x42>

    /* Preset Interrupt Controller masks */
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3401ac06:	4b17      	ldr	r3, [pc, #92]	@ (3401ac64 <LL_ATON_RT_RuntimeInit+0xac>)
3401ac08:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3401ac0c:	601a      	str	r2, [r3, #0]
        ATON_STRENG_NUM, 0, 0)); // OR-mask: disable all streaming engine events and enable all other events & errors
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
3401ac0e:	4b16      	ldr	r3, [pc, #88]	@ (3401ac68 <LL_ATON_RT_RuntimeInit+0xb0>)
3401ac10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3401ac14:	601a      	str	r2, [r3, #0]
    ATON_INTCTRL_STD_INTORMSK_H_SET(0);           // OR-mask: enable all events & errors
    ATON_INTCTRL_STD_INTANDMSK_H_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
#endif

    /* Enable Interrupt Controller (again) */
    ATON_ENABLE(INTCTRL, 0);
3401ac16:	4b12      	ldr	r3, [pc, #72]	@ (3401ac60 <LL_ATON_RT_RuntimeInit+0xa8>)
3401ac18:	681b      	ldr	r3, [r3, #0]
3401ac1a:	603b      	str	r3, [r7, #0]
3401ac1c:	683b      	ldr	r3, [r7, #0]
3401ac1e:	f043 0301 	orr.w	r3, r3, #1
3401ac22:	603b      	str	r3, [r7, #0]
3401ac24:	4a0e      	ldr	r2, [pc, #56]	@ (3401ac60 <LL_ATON_RT_RuntimeInit+0xa8>)
3401ac26:	683b      	ldr	r3, [r7, #0]
3401ac28:	6013      	str	r3, [r2, #0]

  /** Initialize OSAL layer **/
  LL_ATON_OSAL_INIT();

  /** Disable all four ATON interrupts **/
  LL_ATON_DISABLE_ALL_IRQs();
3401ac2a:	2035      	movs	r0, #53	@ 0x35
3401ac2c:	f7ff faf2 	bl	3401a214 <__NVIC_DisableIRQ>
3401ac30:	2036      	movs	r0, #54	@ 0x36
3401ac32:	f7ff faef 	bl	3401a214 <__NVIC_DisableIRQ>
3401ac36:	2037      	movs	r0, #55	@ 0x37
3401ac38:	f7ff faec 	bl	3401a214 <__NVIC_DisableIRQ>
3401ac3c:	2038      	movs	r0, #56	@ 0x38
3401ac3e:	f7ff fae9 	bl	3401a214 <__NVIC_DisableIRQ>

  /** Install IRQ handler **/
  LL_ATON_OSAL_INSTALL_IRQ(ATON_STD_IRQ_LINE, ATON_STD_IRQHandler);

  /** Enable ATON `ATON_STD_IRQ_LINE` interrupt **/
  LL_ATON_OSAL_ENABLE_IRQ(ATON_STD_IRQ_LINE);
3401ac42:	2035      	movs	r0, #53	@ 0x35
3401ac44:	f7ff fac8 	bl	3401a1d8 <__NVIC_EnableIRQ>

  /** After having initialized ATON call callback (which among others might initialize further subsystems) */
  if (ll_aton_init_deinit_trace)
3401ac48:	4b08      	ldr	r3, [pc, #32]	@ (3401ac6c <LL_ATON_RT_RuntimeInit+0xb4>)
3401ac4a:	681b      	ldr	r3, [r3, #0]
3401ac4c:	2b00      	cmp	r3, #0
3401ac4e:	d003      	beq.n	3401ac58 <LL_ATON_RT_RuntimeInit+0xa0>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
3401ac50:	4b06      	ldr	r3, [pc, #24]	@ (3401ac6c <LL_ATON_RT_RuntimeInit+0xb4>)
3401ac52:	681b      	ldr	r3, [r3, #0]
3401ac54:	2006      	movs	r0, #6
3401ac56:	4798      	blx	r3
}
3401ac58:	bf00      	nop
3401ac5a:	3708      	adds	r7, #8
3401ac5c:	46bd      	mov	sp, r7
3401ac5e:	bd80      	pop	{r7, pc}
3401ac60:	580e1000 	.word	0x580e1000
3401ac64:	580e1014 	.word	0x580e1014
3401ac68:	580e1024 	.word	0x580e1024
3401ac6c:	34020e5c 	.word	0x34020e5c

3401ac70 <LL_ATON_RT_RuntimeDeInit>:
 * @brief De-initialize the ATON runtime
 * @param nn_instance Pointer to network instance to de-initialize (optional - i.e. may be `NULL`, see
 * `LL_ATON_RT_DeInit_Network()`)
 */
void LL_ATON_RT_RuntimeDeInit(void)
{
3401ac70:	b580      	push	{r7, lr}
3401ac72:	af00      	add	r7, sp, #0
  /* Call runtime de-init callback */
  if (ll_aton_init_deinit_trace)
3401ac74:	4b0b      	ldr	r3, [pc, #44]	@ (3401aca4 <LL_ATON_RT_RuntimeDeInit+0x34>)
3401ac76:	681b      	ldr	r3, [r3, #0]
3401ac78:	2b00      	cmp	r3, #0
3401ac7a:	d003      	beq.n	3401ac84 <LL_ATON_RT_RuntimeDeInit+0x14>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
3401ac7c:	4b09      	ldr	r3, [pc, #36]	@ (3401aca4 <LL_ATON_RT_RuntimeDeInit+0x34>)
3401ac7e:	681b      	ldr	r3, [r3, #0]
3401ac80:	2007      	movs	r0, #7
3401ac82:	4798      	blx	r3

  /* Disable all four ATON interrupts */
  LL_ATON_DISABLE_ALL_IRQs();
3401ac84:	2035      	movs	r0, #53	@ 0x35
3401ac86:	f7ff fac5 	bl	3401a214 <__NVIC_DisableIRQ>
3401ac8a:	2036      	movs	r0, #54	@ 0x36
3401ac8c:	f7ff fac2 	bl	3401a214 <__NVIC_DisableIRQ>
3401ac90:	2037      	movs	r0, #55	@ 0x37
3401ac92:	f7ff fabf 	bl	3401a214 <__NVIC_DisableIRQ>
3401ac96:	2038      	movs	r0, #56	@ 0x38
3401ac98:	f7ff fabc 	bl	3401a214 <__NVIC_DisableIRQ>

  /* De-initialize OSAL layer */
  LL_ATON_OSAL_DEINIT();

  /* De-initialize ATON IPs */
  LL_ATON_DeInit();
3401ac9c:	f7fd fcea 	bl	34018674 <LL_ATON_DeInit>
}
3401aca0:	bf00      	nop
3401aca2:	bd80      	pop	{r7, pc}
3401aca4:	34020e5c 	.word	0x34020e5c

3401aca8 <LL_ATON_RT_RunEpochBlock>:
 *                            same thread!
 *                            It is entirely the user's responsibility to comply with this restriction!
 * @retval LL_ATON_RT_DONE    NN execution finished
 */
LL_ATON_RT_RetValues_t LL_ATON_RT_RunEpochBlock(NN_Instance_TypeDef *nn_instance)
{
3401aca8:	b580      	push	{r7, lr}
3401acaa:	b084      	sub	sp, #16
3401acac:	af00      	add	r7, sp, #0
3401acae:	6078      	str	r0, [r7, #4]
  LL_ATON_ASSERT(nn_instance != NULL);
3401acb0:	687b      	ldr	r3, [r7, #4]
3401acb2:	2b00      	cmp	r3, #0
3401acb4:	d106      	bne.n	3401acc4 <LL_ATON_RT_RunEpochBlock+0x1c>
3401acb6:	4b63      	ldr	r3, [pc, #396]	@ (3401ae44 <LL_ATON_RT_RunEpochBlock+0x19c>)
3401acb8:	4a63      	ldr	r2, [pc, #396]	@ (3401ae48 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401acba:	f44f 7110 	mov.w	r1, #576	@ 0x240
3401acbe:	4863      	ldr	r0, [pc, #396]	@ (3401ae4c <LL_ATON_RT_RunEpochBlock+0x1a4>)
3401acc0:	f000 faee 	bl	3401b2a0 <__assert_func>

  /* Test for wrong/missing initialization */
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
3401acc4:	687b      	ldr	r3, [r7, #4]
3401acc6:	685b      	ldr	r3, [r3, #4]
3401acc8:	2b00      	cmp	r3, #0
3401acca:	d106      	bne.n	3401acda <LL_ATON_RT_RunEpochBlock+0x32>
3401accc:	4b60      	ldr	r3, [pc, #384]	@ (3401ae50 <LL_ATON_RT_RunEpochBlock+0x1a8>)
3401acce:	4a5e      	ldr	r2, [pc, #376]	@ (3401ae48 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401acd0:	f240 2143 	movw	r1, #579	@ 0x243
3401acd4:	485d      	ldr	r0, [pc, #372]	@ (3401ae4c <LL_ATON_RT_RunEpochBlock+0x1a4>)
3401acd6:	f000 fae3 	bl	3401b2a0 <__assert_func>

  /* Check if network is starting a new inference */
  if (nn_instance->exec_state.inference_started == false)
3401acda:	687b      	ldr	r3, [r7, #4]
3401acdc:	7e1b      	ldrb	r3, [r3, #24]
3401acde:	f083 0301 	eor.w	r3, r3, #1
3401ace2:	b2db      	uxtb	r3, r3
3401ace4:	2b00      	cmp	r3, #0
3401ace6:	d022      	beq.n	3401ad2e <LL_ATON_RT_RunEpochBlock+0x86>
    {
      LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
      ret = nn_instance->network->ec_inference_init();
    }
#else
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
3401ace8:	687b      	ldr	r3, [r7, #4]
3401acea:	681b      	ldr	r3, [r3, #0]
3401acec:	2b00      	cmp	r3, #0
3401acee:	d004      	beq.n	3401acfa <LL_ATON_RT_RunEpochBlock+0x52>
3401acf0:	687b      	ldr	r3, [r7, #4]
3401acf2:	681b      	ldr	r3, [r3, #0]
3401acf4:	689b      	ldr	r3, [r3, #8]
3401acf6:	2b00      	cmp	r3, #0
3401acf8:	d106      	bne.n	3401ad08 <LL_ATON_RT_RunEpochBlock+0x60>
3401acfa:	4b56      	ldr	r3, [pc, #344]	@ (3401ae54 <LL_ATON_RT_RunEpochBlock+0x1ac>)
3401acfc:	4a52      	ldr	r2, [pc, #328]	@ (3401ae48 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401acfe:	f240 2155 	movw	r1, #597	@ 0x255
3401ad02:	4852      	ldr	r0, [pc, #328]	@ (3401ae4c <LL_ATON_RT_RunEpochBlock+0x1a4>)
3401ad04:	f000 facc 	bl	3401b2a0 <__assert_func>
    bool ret = nn_instance->network->ec_inference_init();
3401ad08:	687b      	ldr	r3, [r7, #4]
3401ad0a:	681b      	ldr	r3, [r3, #0]
3401ad0c:	689b      	ldr	r3, [r3, #8]
3401ad0e:	4798      	blx	r3
3401ad10:	4603      	mov	r3, r0
3401ad12:	73bb      	strb	r3, [r7, #14]
#endif

    LL_ATON_ASSERT(ret == true);
3401ad14:	7bbb      	ldrb	r3, [r7, #14]
3401ad16:	2b01      	cmp	r3, #1
3401ad18:	d006      	beq.n	3401ad28 <LL_ATON_RT_RunEpochBlock+0x80>
3401ad1a:	4b4f      	ldr	r3, [pc, #316]	@ (3401ae58 <LL_ATON_RT_RunEpochBlock+0x1b0>)
3401ad1c:	4a4a      	ldr	r2, [pc, #296]	@ (3401ae48 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401ad1e:	f240 2159 	movw	r1, #601	@ 0x259
3401ad22:	484a      	ldr	r0, [pc, #296]	@ (3401ae4c <LL_ATON_RT_RunEpochBlock+0x1a4>)
3401ad24:	f000 fabc 	bl	3401b2a0 <__assert_func>
    LL_ATON_LIB_UNUSED(ret);

    /* Set inference started flag to `true` */
    nn_instance->exec_state.inference_started = true;
3401ad28:	687b      	ldr	r3, [r7, #4]
3401ad2a:	2201      	movs	r2, #1
3401ad2c:	761a      	strb	r2, [r3, #24]
    /* Placeholder for things which need to be done before starting an inference */
    /* ==> here <== */
  }

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  bool this_run_executed_end_epoch = false;
3401ad2e:	2300      	movs	r3, #0
3401ad30:	73fb      	strb	r3, [r7, #15]

  while (true)
  {
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    /* wait for current epoch block to finish */
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
3401ad32:	687b      	ldr	r3, [r7, #4]
3401ad34:	685b      	ldr	r3, [r3, #4]
3401ad36:	4618      	mov	r0, r3
3401ad38:	f7ff fe68 	bl	3401aa0c <__LL_ATON_RT_GetWaitMask>
3401ad3c:	60b8      	str	r0, [r7, #8]
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
3401ad3e:	687b      	ldr	r3, [r7, #4]
3401ad40:	f893 3020 	ldrb.w	r3, [r3, #32]
3401ad44:	b2db      	uxtb	r3, r3
3401ad46:	2b00      	cmp	r3, #0
3401ad48:	d030      	beq.n	3401adac <LL_ATON_RT_RunEpochBlock+0x104>
3401ad4a:	68bb      	ldr	r3, [r7, #8]
3401ad4c:	2b00      	cmp	r3, #0
3401ad4e:	d02d      	beq.n	3401adac <LL_ATON_RT_RunEpochBlock+0x104>
    {
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
3401ad50:	687b      	ldr	r3, [r7, #4]
3401ad52:	69da      	ldr	r2, [r3, #28]
3401ad54:	68bb      	ldr	r3, [r7, #8]
3401ad56:	4013      	ands	r3, r2
3401ad58:	68ba      	ldr	r2, [r7, #8]
3401ad5a:	429a      	cmp	r2, r3
3401ad5c:	d124      	bne.n	3401ada8 <LL_ATON_RT_RunEpochBlock+0x100>
      {
        /* Enter critical section */
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
3401ad5e:	4b3f      	ldr	r3, [pc, #252]	@ (3401ae5c <LL_ATON_RT_RunEpochBlock+0x1b4>)
3401ad60:	681b      	ldr	r3, [r3, #0]
3401ad62:	687a      	ldr	r2, [r7, #4]
3401ad64:	429a      	cmp	r2, r3
3401ad66:	d006      	beq.n	3401ad76 <LL_ATON_RT_RunEpochBlock+0xce>
3401ad68:	4b3d      	ldr	r3, [pc, #244]	@ (3401ae60 <LL_ATON_RT_RunEpochBlock+0x1b8>)
3401ad6a:	4a37      	ldr	r2, [pc, #220]	@ (3401ae48 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401ad6c:	f240 2171 	movw	r1, #625	@ 0x271
3401ad70:	4836      	ldr	r0, [pc, #216]	@ (3401ae4c <LL_ATON_RT_RunEpochBlock+0x1a4>)
3401ad72:	f000 fa95 	bl	3401b2a0 <__assert_func>
                       nn_instance); // when entering a critical section we MUST hold the ATON IP lock
        LL_ATON_OSAL_ENTER_CS();
3401ad76:	2035      	movs	r0, #53	@ 0x35
3401ad78:	f7ff fa4c 	bl	3401a214 <__NVIC_DisableIRQ>

        /* reset triggered events */
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
3401ad7c:	687b      	ldr	r3, [r7, #4]
3401ad7e:	69da      	ldr	r2, [r3, #28]
3401ad80:	68bb      	ldr	r3, [r7, #8]
3401ad82:	43db      	mvns	r3, r3
3401ad84:	401a      	ands	r2, r3
3401ad86:	687b      	ldr	r3, [r7, #4]
3401ad88:	61da      	str	r2, [r3, #28]

        /* Exit critical section */
        LL_ATON_OSAL_EXIT_CS();
3401ad8a:	2035      	movs	r0, #53	@ 0x35
3401ad8c:	f7ff fa24 	bl	3401a1d8 <__NVIC_EnableIRQ>

        /* end/clean-up epoch block */
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3401ad90:	687b      	ldr	r3, [r7, #4]
3401ad92:	685b      	ldr	r3, [r3, #4]
3401ad94:	6879      	ldr	r1, [r7, #4]
3401ad96:	4618      	mov	r0, r3
3401ad98:	f7ff fd1e 	bl	3401a7d8 <__LL_ATON_RT_ExecEndEpochBlock>
        this_run_executed_end_epoch = true;
3401ad9c:	2301      	movs	r3, #1
3401ad9e:	73fb      	strb	r3, [r7, #15]

        /* advance epoch block */
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3401ada0:	6878      	ldr	r0, [r7, #4]
3401ada2:	f7ff fdd5 	bl	3401a950 <__LL_ATON_RT_DetermineNextEpochBlock>
3401ada6:	e001      	b.n	3401adac <LL_ATON_RT_RunEpochBlock+0x104>
      }
      else
      {
        /* Return to main loop */
        return LL_ATON_RT_WFE;
3401ada8:	2301      	movs	r3, #1
3401adaa:	e047      	b.n	3401ae3c <LL_ATON_RT_RunEpochBlock+0x194>
      }
    }
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

    /* test for last epoch block */
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
3401adac:	687b      	ldr	r3, [r7, #4]
3401adae:	685b      	ldr	r3, [r3, #4]
3401adb0:	4618      	mov	r0, r3
3401adb2:	f7ff fa53 	bl	3401a25c <EpochBlock_IsLastEpochBlock>
3401adb6:	4603      	mov	r3, r0
3401adb8:	2b00      	cmp	r3, #0
3401adba:	d011      	beq.n	3401ade0 <LL_ATON_RT_RunEpochBlock+0x138>
    {
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
3401adbc:	687b      	ldr	r3, [r7, #4]
3401adbe:	691b      	ldr	r3, [r3, #16]
3401adc0:	2b00      	cmp	r3, #0
3401adc2:	d00b      	beq.n	3401addc <LL_ATON_RT_RunEpochBlock+0x134>
      {
        /* return from inserted epoch block */
        __LL_ATON_RT_RetFromLibEpochBlockArray(true, nn_instance);
3401adc4:	6879      	ldr	r1, [r7, #4]
3401adc6:	2001      	movs	r0, #1
3401adc8:	f7ff fba4 	bl	3401a514 <__LL_ATON_RT_RetFromLibEpochBlockArray>

        /* advance epoch block */
        nn_instance->exec_state.current_epoch_block++;
3401adcc:	687b      	ldr	r3, [r7, #4]
3401adce:	685b      	ldr	r3, [r3, #4]
3401add0:	f103 0214 	add.w	r2, r3, #20
3401add4:	687b      	ldr	r3, [r7, #4]
3401add6:	605a      	str	r2, [r3, #4]

        /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
        return LL_ATON_RT_NO_WFE;
3401add8:	2300      	movs	r3, #0
3401adda:	e02f      	b.n	3401ae3c <LL_ATON_RT_RunEpochBlock+0x194>
      }
      else
      {
        /* Reached end of execution */
        return LL_ATON_RT_DONE;
3401addc:	2302      	movs	r3, #2
3401adde:	e02d      	b.n	3401ae3c <LL_ATON_RT_RunEpochBlock+0x194>
      }
    }

    /* run/start current epoch block */
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    if (this_run_executed_end_epoch)
3401ade0:	7bfb      	ldrb	r3, [r7, #15]
3401ade2:	2b00      	cmp	r3, #0
3401ade4:	d001      	beq.n	3401adea <LL_ATON_RT_RunEpochBlock+0x142>
    { // alow reset of network (see function `LL_ATON_RT_Reset_Network()`)
      /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
      return LL_ATON_RT_NO_WFE;
3401ade6:	2300      	movs	r3, #0
3401ade8:	e028      	b.n	3401ae3c <LL_ATON_RT_RunEpochBlock+0x194>
    }

    if (!nn_instance->exec_state.current_epoch_block_started)
3401adea:	687b      	ldr	r3, [r7, #4]
3401adec:	f893 3020 	ldrb.w	r3, [r3, #32]
3401adf0:	b2db      	uxtb	r3, r3
3401adf2:	f083 0301 	eor.w	r3, r3, #1
3401adf6:	b2db      	uxtb	r3, r3
3401adf8:	2b00      	cmp	r3, #0
3401adfa:	d009      	beq.n	3401ae10 <LL_ATON_RT_RunEpochBlock+0x168>
    {
      nn_instance->exec_state.current_epoch_block_started = true;
3401adfc:	687b      	ldr	r3, [r7, #4]
3401adfe:	2201      	movs	r2, #1
3401ae00:	f883 2020 	strb.w	r2, [r3, #32]

      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3401ae04:	687b      	ldr	r3, [r7, #4]
3401ae06:	685b      	ldr	r3, [r3, #4]
3401ae08:	6879      	ldr	r1, [r7, #4]
3401ae0a:	4618      	mov	r0, r3
3401ae0c:	f7ff fc38 	bl	3401a680 <__LL_ATON_RT_ExecStartEpochBlock>
    }

    /* End epoch block and advance to next one */
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3401ae10:	687b      	ldr	r3, [r7, #4]
3401ae12:	685b      	ldr	r3, [r3, #4]
3401ae14:	4618      	mov	r0, r3
3401ae16:	f7ff fdf9 	bl	3401aa0c <__LL_ATON_RT_GetWaitMask>
3401ae1a:	4603      	mov	r3, r0
3401ae1c:	2b00      	cmp	r3, #0
3401ae1e:	d10c      	bne.n	3401ae3a <LL_ATON_RT_RunEpochBlock+0x192>
    {
      /* end/clean-up epoch block */
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3401ae20:	687b      	ldr	r3, [r7, #4]
3401ae22:	685b      	ldr	r3, [r3, #4]
3401ae24:	6879      	ldr	r1, [r7, #4]
3401ae26:	4618      	mov	r0, r3
3401ae28:	f7ff fcd6 	bl	3401a7d8 <__LL_ATON_RT_ExecEndEpochBlock>
      this_run_executed_end_epoch = true; // has no effect (just for cosmetics)
3401ae2c:	2301      	movs	r3, #1
3401ae2e:	73fb      	strb	r3, [r7, #15]

      /* advance epoch block */
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3401ae30:	6878      	ldr	r0, [r7, #4]
3401ae32:	f7ff fd8d 	bl	3401a950 <__LL_ATON_RT_DetermineNextEpochBlock>

      /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
      return LL_ATON_RT_NO_WFE;
3401ae36:	2300      	movs	r3, #0
3401ae38:	e000      	b.n	3401ae3c <LL_ATON_RT_RunEpochBlock+0x194>
    }
    else
    {
      /* Return to main loop */
      return LL_ATON_RT_WFE;
3401ae3a:	2301      	movs	r3, #1
    /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
    return LL_ATON_RT_NO_WFE;

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  }
}
3401ae3c:	4618      	mov	r0, r3
3401ae3e:	3710      	adds	r7, #16
3401ae40:	46bd      	mov	sp, r7
3401ae42:	bd80      	pop	{r7, pc}
3401ae44:	3401f2a0 	.word	0x3401f2a0
3401ae48:	3401fb5c 	.word	0x3401fb5c
3401ae4c:	3401f454 	.word	0x3401f454
3401ae50:	3401f648 	.word	0x3401f648
3401ae54:	3401f684 	.word	0x3401f684
3401ae58:	3401f63c 	.word	0x3401f63c
3401ae5c:	34020e54 	.word	0x34020e54
3401ae60:	3401f4ec 	.word	0x3401f4ec

3401ae64 <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3401ae64:	b5b0      	push	{r4, r5, r7, lr}
3401ae66:	b086      	sub	sp, #24
3401ae68:	af00      	add	r7, sp, #0
3401ae6a:	6078      	str	r0, [r7, #4]
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3401ae6c:	687b      	ldr	r3, [r7, #4]
3401ae6e:	2b00      	cmp	r3, #0
3401ae70:	f000 8095 	beq.w	3401af9e <__LL_ATON_RT_IrqErr+0x13a>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
3401ae74:	687a      	ldr	r2, [r7, #4]
3401ae76:	4b4c      	ldr	r3, [pc, #304]	@ (3401afa8 <__LL_ATON_RT_IrqErr+0x144>)
3401ae78:	4013      	ands	r3, r2
3401ae7a:	2b00      	cmp	r3, #0
3401ae7c:	d013      	beq.n	3401aea6 <__LL_ATON_RT_IrqErr+0x42>
    int64_t masked_irqs; // must be signed for two's compliment `(-masked_irqs)`
#else                    //(ATON_INT_NR <= 32)
    int32_t masked_irqs; // must be signed for two's compliment `(-masked_irqs)`
#endif                   //(ATON_INT_NR <= 32)

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));
3401ae7e:	687a      	ldr	r2, [r7, #4]
3401ae80:	4b49      	ldr	r3, [pc, #292]	@ (3401afa8 <__LL_ATON_RT_IrqErr+0x144>)
3401ae82:	4013      	ands	r3, r2
3401ae84:	613b      	str	r3, [r7, #16]

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3401ae86:	693b      	ldr	r3, [r7, #16]
3401ae88:	425a      	negs	r2, r3
3401ae8a:	693b      	ldr	r3, [r7, #16]
3401ae8c:	4013      	ands	r3, r2
3401ae8e:	60fb      	str	r3, [r7, #12]
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
3401ae90:	68fb      	ldr	r3, [r7, #12]
3401ae92:	031a      	lsls	r2, r3, #12
3401ae94:	4b45      	ldr	r3, [pc, #276]	@ (3401afac <__LL_ATON_RT_IrqErr+0x148>)
3401ae96:	4413      	add	r3, r2
3401ae98:	681b      	ldr	r3, [r3, #0]
3401ae9a:	60bb      	str	r3, [r7, #8]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
3401ae9c:	68ba      	ldr	r2, [r7, #8]
3401ae9e:	68f9      	ldr	r1, [r7, #12]
3401aea0:	4843      	ldr	r0, [pc, #268]	@ (3401afb0 <__LL_ATON_RT_IrqErr+0x14c>)
3401aea2:	f001 f89f 	bl	3401bfe4 <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3401aea6:	687b      	ldr	r3, [r7, #4]
3401aea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
3401aeac:	2b00      	cmp	r3, #0
3401aeae:	d002      	beq.n	3401aeb6 <__LL_ATON_RT_IrqErr+0x52>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3401aeb0:	4840      	ldr	r0, [pc, #256]	@ (3401afb4 <__LL_ATON_RT_IrqErr+0x150>)
3401aeb2:	f001 f8ff 	bl	3401c0b4 <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3401aeb6:	687b      	ldr	r3, [r7, #4]
3401aeb8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
3401aebc:	2b00      	cmp	r3, #0
3401aebe:	d002      	beq.n	3401aec6 <__LL_ATON_RT_IrqErr+0x62>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3401aec0:	483d      	ldr	r0, [pc, #244]	@ (3401afb8 <__LL_ATON_RT_IrqErr+0x154>)
3401aec2:	f001 f8f7 	bl	3401c0b4 <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
3401aec6:	687b      	ldr	r3, [r7, #4]
3401aec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3401aecc:	2b00      	cmp	r3, #0
3401aece:	d002      	beq.n	3401aed6 <__LL_ATON_RT_IrqErr+0x72>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3401aed0:	483a      	ldr	r0, [pc, #232]	@ (3401afbc <__LL_ATON_RT_IrqErr+0x158>)
3401aed2:	f001 f8ef 	bl	3401c0b4 <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3401aed6:	687b      	ldr	r3, [r7, #4]
3401aed8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
3401aedc:	2b00      	cmp	r3, #0
3401aede:	d015      	beq.n	3401af0c <__LL_ATON_RT_IrqErr+0xa8>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3401aee0:	4837      	ldr	r0, [pc, #220]	@ (3401afc0 <__LL_ATON_RT_IrqErr+0x15c>)
3401aee2:	f001 f8e7 	bl	3401c0b4 <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
3401aee6:	2300      	movs	r3, #0
3401aee8:	617b      	str	r3, [r7, #20]
3401aeea:	e00c      	b.n	3401af06 <__LL_ATON_RT_IrqErr+0xa2>
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3401aeec:	697b      	ldr	r3, [r7, #20]
3401aeee:	031a      	lsls	r2, r3, #12
3401aef0:	4b34      	ldr	r3, [pc, #208]	@ (3401afc4 <__LL_ATON_RT_IrqErr+0x160>)
3401aef2:	4413      	add	r3, r2
3401aef4:	681b      	ldr	r3, [r3, #0]
3401aef6:	461a      	mov	r2, r3
3401aef8:	6979      	ldr	r1, [r7, #20]
3401aefa:	4833      	ldr	r0, [pc, #204]	@ (3401afc8 <__LL_ATON_RT_IrqErr+0x164>)
3401aefc:	f001 f872 	bl	3401bfe4 <iprintf>
    for (i = 0; i < ATON_BUSIF_NUM; i++)
3401af00:	697b      	ldr	r3, [r7, #20]
3401af02:	3301      	adds	r3, #1
3401af04:	617b      	str	r3, [r7, #20]
3401af06:	697b      	ldr	r3, [r7, #20]
3401af08:	2b01      	cmp	r3, #1
3401af0a:	ddef      	ble.n	3401aeec <__LL_ATON_RT_IrqErr+0x88>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
3401af0c:	687b      	ldr	r3, [r7, #4]
3401af0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3401af12:	2b00      	cmp	r3, #0
3401af14:	d002      	beq.n	3401af1c <__LL_ATON_RT_IrqErr+0xb8>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3401af16:	482d      	ldr	r0, [pc, #180]	@ (3401afcc <__LL_ATON_RT_IrqErr+0x168>)
3401af18:	f001 f8cc 	bl	3401c0b4 <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
3401af1c:	687b      	ldr	r3, [r7, #4]
3401af1e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3401af22:	2b00      	cmp	r3, #0
3401af24:	d011      	beq.n	3401af4a <__LL_ATON_RT_IrqErr+0xe6>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3401af26:	4b2a      	ldr	r3, [pc, #168]	@ (3401afd0 <__LL_ATON_RT_IrqErr+0x16c>)
3401af28:	681b      	ldr	r3, [r3, #0]
3401af2a:	4619      	mov	r1, r3
3401af2c:	4829      	ldr	r0, [pc, #164]	@ (3401afd4 <__LL_ATON_RT_IrqErr+0x170>)
3401af2e:	f001 f859 	bl	3401bfe4 <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3401af32:	4b29      	ldr	r3, [pc, #164]	@ (3401afd8 <__LL_ATON_RT_IrqErr+0x174>)
3401af34:	681b      	ldr	r3, [r3, #0]
3401af36:	4619      	mov	r1, r3
3401af38:	4828      	ldr	r0, [pc, #160]	@ (3401afdc <__LL_ATON_RT_IrqErr+0x178>)
3401af3a:	f001 f853 	bl	3401bfe4 <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
3401af3e:	4b28      	ldr	r3, [pc, #160]	@ (3401afe0 <__LL_ATON_RT_IrqErr+0x17c>)
3401af40:	681b      	ldr	r3, [r3, #0]
3401af42:	4619      	mov	r1, r3
3401af44:	4827      	ldr	r0, [pc, #156]	@ (3401afe4 <__LL_ATON_RT_IrqErr+0x180>)
3401af46:	f001 f84d 	bl	3401bfe4 <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3401af4a:	687b      	ldr	r3, [r7, #4]
3401af4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
3401af50:	2b00      	cmp	r3, #0
3401af52:	d002      	beq.n	3401af5a <__LL_ATON_RT_IrqErr+0xf6>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3401af54:	4824      	ldr	r0, [pc, #144]	@ (3401afe8 <__LL_ATON_RT_IrqErr+0x184>)
3401af56:	f001 f8ad 	bl	3401c0b4 <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3401af5a:	687b      	ldr	r3, [r7, #4]
3401af5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
3401af60:	2b00      	cmp	r3, #0
3401af62:	d002      	beq.n	3401af6a <__LL_ATON_RT_IrqErr+0x106>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3401af64:	4821      	ldr	r0, [pc, #132]	@ (3401afec <__LL_ATON_RT_IrqErr+0x188>)
3401af66:	f001 f8a5 	bl	3401c0b4 <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
3401af6a:	f7ff fb61 	bl	3401a630 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
3401af6e:	687b      	ldr	r3, [r7, #4]
3401af70:	2200      	movs	r2, #0
3401af72:	461c      	mov	r4, r3
3401af74:	4615      	mov	r5, r2
3401af76:	4622      	mov	r2, r4
3401af78:	462b      	mov	r3, r5
3401af7a:	f240 314a 	movw	r1, #842	@ 0x34a
3401af7e:	481c      	ldr	r0, [pc, #112]	@ (3401aff0 <__LL_ATON_RT_IrqErr+0x18c>)
3401af80:	f001 f830 	bl	3401bfe4 <iprintf>
//#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
3401af84:	4b1b      	ldr	r3, [pc, #108]	@ (3401aff4 <__LL_ATON_RT_IrqErr+0x190>)
3401af86:	681b      	ldr	r3, [r3, #0]
3401af88:	689b      	ldr	r3, [r3, #8]
3401af8a:	4618      	mov	r0, r3
3401af8c:	f000 ff42 	bl	3401be14 <fflush>
//#endif
  LL_ATON_ASSERT(false); // may never happen
3401af90:	4b19      	ldr	r3, [pc, #100]	@ (3401aff8 <__LL_ATON_RT_IrqErr+0x194>)
3401af92:	4a1a      	ldr	r2, [pc, #104]	@ (3401affc <__LL_ATON_RT_IrqErr+0x198>)
3401af94:	f240 314e 	movw	r1, #846	@ 0x34e
3401af98:	4819      	ldr	r0, [pc, #100]	@ (3401b000 <__LL_ATON_RT_IrqErr+0x19c>)
3401af9a:	f000 f981 	bl	3401b2a0 <__assert_func>
    return;
3401af9e:	bf00      	nop
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
3401afa0:	3718      	adds	r7, #24
3401afa2:	46bd      	mov	sp, r7
3401afa4:	bdb0      	pop	{r4, r5, r7, pc}
3401afa6:	bf00      	nop
3401afa8:	000ffc00 	.word	0x000ffc00
3401afac:	580e503c 	.word	0x580e503c
3401afb0:	3401f6e8 	.word	0x3401f6e8
3401afb4:	3401f718 	.word	0x3401f718
3401afb8:	3401f740 	.word	0x3401f740
3401afbc:	3401f764 	.word	0x3401f764
3401afc0:	3401f784 	.word	0x3401f784
3401afc4:	580e2010 	.word	0x580e2010
3401afc8:	3401f79c 	.word	0x3401f79c
3401afcc:	3401f7b4 	.word	0x3401f7b4
3401afd0:	580fe00c 	.word	0x580fe00c
3401afd4:	3401f7cc 	.word	0x3401f7cc
3401afd8:	580fe020 	.word	0x580fe020
3401afdc:	3401f800 	.word	0x3401f800
3401afe0:	580fe01c 	.word	0x580fe01c
3401afe4:	3401f82c 	.word	0x3401f82c
3401afe8:	3401f850 	.word	0x3401f850
3401afec:	3401f874 	.word	0x3401f874
3401aff0:	3401f890 	.word	0x3401f890
3401aff4:	3402071c 	.word	0x3402071c
3401aff8:	3401f8b8 	.word	0x3401f8b8
3401affc:	3401fc70 	.word	0x3401fc70
3401b000:	3401f454 	.word	0x3401f454

3401b004 <__LL_ATON_RT_IrqEpochBlock>:
#if (ATON_INT_NR > 32)
static inline void __LL_ATON_RT_IrqEpochBlock(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static inline void __LL_ATON_RT_IrqEpochBlock(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3401b004:	b480      	push	{r7}
3401b006:	b087      	sub	sp, #28
3401b008:	af00      	add	r7, sp, #0
3401b00a:	6078      	str	r0, [r7, #4]
   * consecutive bits within the `INTREG` register (and within all other interrupt controller registers, like e.g.
   * status/mask/clear)! */
  irqs >>= ATON_STRENG_INT(0);
  wait_irqs =
      irqs &
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3401b00c:	4b1e      	ldr	r3, [pc, #120]	@ (3401b088 <__LL_ATON_RT_IrqEpochBlock+0x84>)
3401b00e:	681b      	ldr	r3, [r3, #0]
3401b010:	685b      	ldr	r3, [r3, #4]
          ->wait_mask; /* treat only IRQs we are currently waiting for
3401b012:	68db      	ldr	r3, [r3, #12]
  wait_irqs =
3401b014:	687a      	ldr	r2, [r7, #4]
3401b016:	4013      	ands	r3, r2
3401b018:	60fb      	str	r3, [r7, #12]
                          (Note: we might be running in a hybrid function which uses DMAs in parallel with a "normal"
                          ATON execution and we must not clear the IRQs of this "normal" ATON execution here) */
  if (wait_irqs)
3401b01a:	68fb      	ldr	r3, [r7, #12]
3401b01c:	2b00      	cmp	r3, #0
3401b01e:	d02d      	beq.n	3401b07c <__LL_ATON_RT_IrqEpochBlock+0x78>
  {
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3401b020:	4b19      	ldr	r3, [pc, #100]	@ (3401b088 <__LL_ATON_RT_IrqEpochBlock+0x84>)
3401b022:	681b      	ldr	r3, [r3, #0]
3401b024:	69db      	ldr	r3, [r3, #28]
3401b026:	613b      	str	r3, [r7, #16]
    for (i = 0; i < ATON_STRENG_NUM; i++)
3401b028:	2300      	movs	r3, #0
3401b02a:	617b      	str	r3, [r7, #20]
3401b02c:	e01f      	b.n	3401b06e <__LL_ATON_RT_IrqEpochBlock+0x6a>
    {
      /* Handle event interrupts */
      if ((wait_irqs >> i) & 1)
3401b02e:	68fa      	ldr	r2, [r7, #12]
3401b030:	697b      	ldr	r3, [r7, #20]
3401b032:	fa22 f303 	lsr.w	r3, r2, r3
3401b036:	f003 0301 	and.w	r3, r3, #1
3401b03a:	2b00      	cmp	r3, #0
3401b03c:	d014      	beq.n	3401b068 <__LL_ATON_RT_IrqEpochBlock+0x64>
      { /* more future-proofed but less efficient alternative:
           `if (wait_irqs & ATON_STRENG_INT_MASK(i, 0, 0))`
         */
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3401b03e:	697b      	ldr	r3, [r7, #20]
3401b040:	031a      	lsls	r2, r3, #12
3401b042:	4b12      	ldr	r3, [pc, #72]	@ (3401b08c <__LL_ATON_RT_IrqEpochBlock+0x88>)
3401b044:	4413      	add	r3, r2
3401b046:	681b      	ldr	r3, [r3, #0]
3401b048:	60bb      	str	r3, [r7, #8]
        ATON_STRENG_IRQ_SET(
3401b04a:	697b      	ldr	r3, [r7, #20]
3401b04c:	031a      	lsls	r2, r3, #12
3401b04e:	4b0f      	ldr	r3, [pc, #60]	@ (3401b08c <__LL_ATON_RT_IrqEpochBlock+0x88>)
3401b050:	4413      	add	r3, r2
3401b052:	461a      	mov	r2, r3
3401b054:	68bb      	ldr	r3, [r7, #8]
3401b056:	6013      	str	r3, [r2, #0]
            i, strengIrqs); /* Acknowledge ATON interrupt source (i.e. stream engine #i) - could be more fine grain */

        /* Handle RT integration */
        _tmp_triggered_events |= (1 << i);
3401b058:	2201      	movs	r2, #1
3401b05a:	697b      	ldr	r3, [r7, #20]
3401b05c:	fa02 f303 	lsl.w	r3, r2, r3
3401b060:	461a      	mov	r2, r3
3401b062:	693b      	ldr	r3, [r7, #16]
3401b064:	4313      	orrs	r3, r2
3401b066:	613b      	str	r3, [r7, #16]
    for (i = 0; i < ATON_STRENG_NUM; i++)
3401b068:	697b      	ldr	r3, [r7, #20]
3401b06a:	3301      	adds	r3, #1
3401b06c:	617b      	str	r3, [r7, #20]
3401b06e:	697b      	ldr	r3, [r7, #20]
3401b070:	2b09      	cmp	r3, #9
3401b072:	dddc      	ble.n	3401b02e <__LL_ATON_RT_IrqEpochBlock+0x2a>
      }
    }
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3401b074:	4b04      	ldr	r3, [pc, #16]	@ (3401b088 <__LL_ATON_RT_IrqEpochBlock+0x84>)
3401b076:	681b      	ldr	r3, [r3, #0]
3401b078:	693a      	ldr	r2, [r7, #16]
3401b07a:	61da      	str	r2, [r3, #28]
  }
}
3401b07c:	bf00      	nop
3401b07e:	371c      	adds	r7, #28
3401b080:	46bd      	mov	sp, r7
3401b082:	f85d 7b04 	ldr.w	r7, [sp], #4
3401b086:	4770      	bx	lr
3401b088:	34020e54 	.word	0x34020e54
3401b08c:	580e503c 	.word	0x580e503c

3401b090 <__LL_ATON_RT_IrqEpochBlob>:
#if (ATON_INT_NR > 32)
static inline void __LL_ATON_RT_IrqEpochBlob(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static inline void __LL_ATON_RT_IrqEpochBlob(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3401b090:	b580      	push	{r7, lr}
3401b092:	b086      	sub	sp, #24
3401b094:	af00      	add	r7, sp, #0
3401b096:	6078      	str	r0, [r7, #4]
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3401b098:	4b1d      	ldr	r3, [pc, #116]	@ (3401b110 <__LL_ATON_RT_IrqEpochBlob+0x80>)
3401b09a:	681b      	ldr	r3, [r3, #0]
3401b09c:	685b      	ldr	r3, [r3, #4]
3401b09e:	4618      	mov	r0, r3
3401b0a0:	f7ff f94e 	bl	3401a340 <EpochBlock_EpochControllerUnit>
3401b0a4:	6178      	str	r0, [r7, #20]
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401b0a6:	697b      	ldr	r3, [r7, #20]
3401b0a8:	2b00      	cmp	r3, #0
3401b0aa:	d006      	beq.n	3401b0ba <__LL_ATON_RT_IrqEpochBlob+0x2a>
3401b0ac:	4b19      	ldr	r3, [pc, #100]	@ (3401b114 <__LL_ATON_RT_IrqEpochBlob+0x84>)
3401b0ae:	4a1a      	ldr	r2, [pc, #104]	@ (3401b118 <__LL_ATON_RT_IrqEpochBlob+0x88>)
3401b0b0:	f240 3191 	movw	r1, #913	@ 0x391
3401b0b4:	4819      	ldr	r0, [pc, #100]	@ (3401b11c <__LL_ATON_RT_IrqEpochBlob+0x8c>)
3401b0b6:	f000 f8f3 	bl	3401b2a0 <__assert_func>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
3401b0ba:	697b      	ldr	r3, [r7, #20]
3401b0bc:	2b00      	cmp	r3, #0
3401b0be:	d007      	beq.n	3401b0d0 <__LL_ATON_RT_IrqEpochBlob+0x40>
3401b0c0:	697b      	ldr	r3, [r7, #20]
3401b0c2:	2b01      	cmp	r3, #1
3401b0c4:	d102      	bne.n	3401b0cc <__LL_ATON_RT_IrqEpochBlob+0x3c>
3401b0c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
3401b0ca:	e003      	b.n	3401b0d4 <__LL_ATON_RT_IrqEpochBlob+0x44>
3401b0cc:	2300      	movs	r3, #0
3401b0ce:	e001      	b.n	3401b0d4 <__LL_ATON_RT_IrqEpochBlob+0x44>
3401b0d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
3401b0d4:	687a      	ldr	r2, [r7, #4]
3401b0d6:	4013      	ands	r3, r2
3401b0d8:	2b00      	cmp	r3, #0
3401b0da:	d015      	beq.n	3401b108 <__LL_ATON_RT_IrqEpochBlob+0x78>
  {
    /* Acknowledge interrupts in active epoch controller unit - could be more fine grain */
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
3401b0dc:	4b10      	ldr	r3, [pc, #64]	@ (3401b120 <__LL_ATON_RT_IrqEpochBlob+0x90>)
3401b0de:	681b      	ldr	r3, [r3, #0]
3401b0e0:	613b      	str	r3, [r7, #16]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
3401b0e2:	4a0f      	ldr	r2, [pc, #60]	@ (3401b120 <__LL_ATON_RT_IrqEpochBlob+0x90>)
3401b0e4:	693b      	ldr	r3, [r7, #16]
3401b0e6:	6013      	str	r3, [r2, #0]

    /* Handle RT integration */
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3401b0e8:	4b09      	ldr	r3, [pc, #36]	@ (3401b110 <__LL_ATON_RT_IrqEpochBlob+0x80>)
3401b0ea:	681b      	ldr	r3, [r3, #0]
3401b0ec:	69db      	ldr	r3, [r3, #28]
3401b0ee:	60fb      	str	r3, [r7, #12]
    _tmp_triggered_events |= (1 << ecId);
3401b0f0:	2201      	movs	r2, #1
3401b0f2:	697b      	ldr	r3, [r7, #20]
3401b0f4:	fa02 f303 	lsl.w	r3, r2, r3
3401b0f8:	461a      	mov	r2, r3
3401b0fa:	68fb      	ldr	r3, [r7, #12]
3401b0fc:	4313      	orrs	r3, r2
3401b0fe:	60fb      	str	r3, [r7, #12]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3401b100:	4b03      	ldr	r3, [pc, #12]	@ (3401b110 <__LL_ATON_RT_IrqEpochBlob+0x80>)
3401b102:	681b      	ldr	r3, [r3, #0]
3401b104:	68fa      	ldr	r2, [r7, #12]
3401b106:	61da      	str	r2, [r3, #28]
  }
}
3401b108:	bf00      	nop
3401b10a:	3718      	adds	r7, #24
3401b10c:	46bd      	mov	sp, r7
3401b10e:	bd80      	pop	{r7, pc}
3401b110:	34020e54 	.word	0x34020e54
3401b114:	3401f518 	.word	0x3401f518
3401b118:	3401fc94 	.word	0x3401fc94
3401b11c:	3401f454 	.word	0x3401f454
3401b120:	580fe00c 	.word	0x580fe00c

3401b124 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
3401b124:	b580      	push	{r7, lr}
3401b126:	b082      	sub	sp, #8
3401b128:	af00      	add	r7, sp, #0
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3401b12a:	4b3d      	ldr	r3, [pc, #244]	@ (3401b220 <NPU0_IRQHandler+0xfc>)
3401b12c:	681b      	ldr	r3, [r3, #0]
3401b12e:	607b      	str	r3, [r7, #4]
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
3401b130:	4b3c      	ldr	r3, [pc, #240]	@ (3401b224 <NPU0_IRQHandler+0x100>)
3401b132:	681b      	ldr	r3, [r3, #0]
3401b134:	2b00      	cmp	r3, #0
3401b136:	d045      	beq.n	3401b1c4 <NPU0_IRQHandler+0xa0>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3401b138:	4b3a      	ldr	r3, [pc, #232]	@ (3401b224 <NPU0_IRQHandler+0x100>)
3401b13a:	681b      	ldr	r3, [r3, #0]
3401b13c:	685b      	ldr	r3, [r3, #4]
3401b13e:	2b00      	cmp	r3, #0
3401b140:	d106      	bne.n	3401b150 <NPU0_IRQHandler+0x2c>
3401b142:	4b39      	ldr	r3, [pc, #228]	@ (3401b228 <NPU0_IRQHandler+0x104>)
3401b144:	4a39      	ldr	r2, [pc, #228]	@ (3401b22c <NPU0_IRQHandler+0x108>)
3401b146:	f240 31b1 	movw	r1, #945	@ 0x3b1
3401b14a:	4839      	ldr	r0, [pc, #228]	@ (3401b230 <NPU0_IRQHandler+0x10c>)
3401b14c:	f000 f8a8 	bl	3401b2a0 <__assert_func>

    /** OR-mask interrupts MUST be handled first **/
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3401b150:	4b34      	ldr	r3, [pc, #208]	@ (3401b224 <NPU0_IRQHandler+0x100>)
3401b152:	681b      	ldr	r3, [r3, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
3401b154:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3401b156:	4618      	mov	r0, r3
3401b158:	f7ff f8a6 	bl	3401a2a8 <EpochBlock_IsEpochBlob>
3401b15c:	4603      	mov	r3, r0
3401b15e:	f083 0301 	eor.w	r3, r3, #1
3401b162:	b2db      	uxtb	r3, r3
3401b164:	2b00      	cmp	r3, #0
3401b166:	d008      	beq.n	3401b17a <NPU0_IRQHandler+0x56>
    {
      __LL_ATON_RT_IrqErr(
3401b168:	687b      	ldr	r3, [r7, #4]
3401b16a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
3401b16e:	f023 0303 	bic.w	r3, r3, #3
3401b172:	4618      	mov	r0, r3
3401b174:	f7ff fe76 	bl	3401ae64 <__LL_ATON_RT_IrqErr>
3401b178:	e027      	b.n	3401b1ca <NPU0_IRQHandler+0xa6>
          irqs & ~ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0)); /* exclude all streaming engine completion interrupts */
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3401b17a:	4b2a      	ldr	r3, [pc, #168]	@ (3401b224 <NPU0_IRQHandler+0x100>)
3401b17c:	681b      	ldr	r3, [r3, #0]
3401b17e:	685b      	ldr	r3, [r3, #4]
3401b180:	4618      	mov	r0, r3
3401b182:	f7ff f8dd 	bl	3401a340 <EpochBlock_EpochControllerUnit>
3401b186:	6038      	str	r0, [r7, #0]
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401b188:	683b      	ldr	r3, [r7, #0]
3401b18a:	2b00      	cmp	r3, #0
3401b18c:	d006      	beq.n	3401b19c <NPU0_IRQHandler+0x78>
3401b18e:	4b29      	ldr	r3, [pc, #164]	@ (3401b234 <NPU0_IRQHandler+0x110>)
3401b190:	4a26      	ldr	r2, [pc, #152]	@ (3401b22c <NPU0_IRQHandler+0x108>)
3401b192:	f240 31be 	movw	r1, #958	@ 0x3be
3401b196:	4826      	ldr	r0, [pc, #152]	@ (3401b230 <NPU0_IRQHandler+0x10c>)
3401b198:	f000 f882 	bl	3401b2a0 <__assert_func>

      // epoch blob handling based on epoch controller interrupt
      __LL_ATON_RT_IrqErr(
          irqs & ~ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK,
3401b19c:	683b      	ldr	r3, [r7, #0]
3401b19e:	2b00      	cmp	r3, #0
3401b1a0:	d008      	beq.n	3401b1b4 <NPU0_IRQHandler+0x90>
3401b1a2:	683b      	ldr	r3, [r7, #0]
3401b1a4:	2b01      	cmp	r3, #1
3401b1a6:	d102      	bne.n	3401b1ae <NPU0_IRQHandler+0x8a>
3401b1a8:	f06f 5380 	mvn.w	r3, #268435456	@ 0x10000000
3401b1ac:	e004      	b.n	3401b1b8 <NPU0_IRQHandler+0x94>
3401b1ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3401b1b2:	e001      	b.n	3401b1b8 <NPU0_IRQHandler+0x94>
3401b1b4:	f06f 5380 	mvn.w	r3, #268435456	@ 0x10000000
      __LL_ATON_RT_IrqErr(
3401b1b8:	687a      	ldr	r2, [r7, #4]
3401b1ba:	4013      	ands	r3, r2
3401b1bc:	4618      	mov	r0, r3
3401b1be:	f7ff fe51 	bl	3401ae64 <__LL_ATON_RT_IrqErr>
3401b1c2:	e002      	b.n	3401b1ca <NPU0_IRQHandler+0xa6>
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3401b1c4:	6878      	ldr	r0, [r7, #4]
3401b1c6:	f7ff fe4d 	bl	3401ae64 <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3401b1ca:	4b16      	ldr	r3, [pc, #88]	@ (3401b224 <NPU0_IRQHandler+0x100>)
3401b1cc:	681b      	ldr	r3, [r3, #0]
3401b1ce:	2b00      	cmp	r3, #0
3401b1d0:	d106      	bne.n	3401b1e0 <NPU0_IRQHandler+0xbc>
3401b1d2:	4b19      	ldr	r3, [pc, #100]	@ (3401b238 <NPU0_IRQHandler+0x114>)
3401b1d4:	4a15      	ldr	r2, [pc, #84]	@ (3401b22c <NPU0_IRQHandler+0x108>)
3401b1d6:	f240 31d2 	movw	r1, #978	@ 0x3d2
3401b1da:	4815      	ldr	r0, [pc, #84]	@ (3401b230 <NPU0_IRQHandler+0x10c>)
3401b1dc:	f000 f860 	bl	3401b2a0 <__assert_func>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3401b1e0:	4b10      	ldr	r3, [pc, #64]	@ (3401b224 <NPU0_IRQHandler+0x100>)
3401b1e2:	681b      	ldr	r3, [r3, #0]
3401b1e4:	685b      	ldr	r3, [r3, #4]
3401b1e6:	4618      	mov	r0, r3
3401b1e8:	f7ff f85e 	bl	3401a2a8 <EpochBlock_IsEpochBlob>
3401b1ec:	4603      	mov	r3, r0
3401b1ee:	f083 0301 	eor.w	r3, r3, #1
3401b1f2:	b2db      	uxtb	r3, r3
3401b1f4:	2b00      	cmp	r3, #0
3401b1f6:	d003      	beq.n	3401b200 <NPU0_IRQHandler+0xdc>
  { // standard epoch block handling based on streaming engines
    __LL_ATON_RT_IrqEpochBlock(irqs);
3401b1f8:	6878      	ldr	r0, [r7, #4]
3401b1fa:	f7ff ff03 	bl	3401b004 <__LL_ATON_RT_IrqEpochBlock>
3401b1fe:	e002      	b.n	3401b206 <NPU0_IRQHandler+0xe2>
  }
  else
  { // epoch blob handling based on epoch controller
#if defined(ATON_EPOCHCTRL_NUM)
    __LL_ATON_RT_IrqEpochBlob(irqs);
3401b200:	6878      	ldr	r0, [r7, #4]
3401b202:	f7ff ff45 	bl	3401b090 <__LL_ATON_RT_IrqEpochBlob>
  __ASM volatile ("dsb 0xF":::"memory");
3401b206:	f3bf 8f4f 	dsb	sy
}
3401b20a:	bf00      	nop
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
3401b20c:	4a0b      	ldr	r2, [pc, #44]	@ (3401b23c <NPU0_IRQHandler+0x118>)
3401b20e:	687b      	ldr	r3, [r7, #4]
3401b210:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
3401b212:	f3bf 8f4f 	dsb	sy
}
3401b216:	bf00      	nop
  /* Signal event */
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
3401b218:	bf00      	nop
}
3401b21a:	3708      	adds	r7, #8
3401b21c:	46bd      	mov	sp, r7
3401b21e:	bd80      	pop	{r7, pc}
3401b220:	580e1008 	.word	0x580e1008
3401b224:	34020e54 	.word	0x34020e54
3401b228:	3401f8bc 	.word	0x3401f8bc
3401b22c:	3401fc84 	.word	0x3401fc84
3401b230:	3401f454 	.word	0x3401f454
3401b234:	3401f518 	.word	0x3401f518
3401b238:	3401f2ec 	.word	0x3401f2ec
3401b23c:	580e1010 	.word	0x580e1010

3401b240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3401b240:	480f      	ldr	r0, [pc, #60]	@ (3401b280 <LoopForever+0x4>)
  msr   MSPLIM, r0
3401b242:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3401b246:	480f      	ldr	r0, [pc, #60]	@ (3401b284 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3401b248:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3401b24a:	f7e8 fa43 	bl	340036d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3401b24e:	480e      	ldr	r0, [pc, #56]	@ (3401b288 <LoopForever+0xc>)
  ldr r1, =_edata
3401b250:	490e      	ldr	r1, [pc, #56]	@ (3401b28c <LoopForever+0x10>)
  ldr r2, =_sidata
3401b252:	4a0f      	ldr	r2, [pc, #60]	@ (3401b290 <LoopForever+0x14>)
  movs r3, #0
3401b254:	2300      	movs	r3, #0
  b LoopCopyDataInit
3401b256:	e002      	b.n	3401b25e <LoopCopyDataInit>

3401b258 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3401b258:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3401b25a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3401b25c:	3304      	adds	r3, #4

3401b25e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3401b25e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3401b260:	428c      	cmp	r4, r1
  bcc CopyDataInit
3401b262:	d3f9      	bcc.n	3401b258 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3401b264:	4a0b      	ldr	r2, [pc, #44]	@ (3401b294 <LoopForever+0x18>)
  ldr r4, =_ebss
3401b266:	4c0c      	ldr	r4, [pc, #48]	@ (3401b298 <LoopForever+0x1c>)
  movs r3, #0
3401b268:	2300      	movs	r3, #0
  b LoopFillZerobss
3401b26a:	e001      	b.n	3401b270 <LoopFillZerobss>

3401b26c <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3401b26c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3401b26e:	3204      	adds	r2, #4

3401b270 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3401b270:	42a2      	cmp	r2, r4
  bcc FillZerobss
3401b272:	d3fb      	bcc.n	3401b26c <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3401b274:	f001 fa58 	bl	3401c728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3401b278:	f7e6 f9f6 	bl	34001668 <main>

3401b27c <LoopForever>:

LoopForever:
  b LoopForever
3401b27c:	e7fe      	b.n	3401b27c <LoopForever>
3401b27e:	0000      	.short	0x0000
  ldr   r0, =_sstack
3401b280:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
3401b284:	34100000 	.word	0x34100000
  ldr r0, =_sdata
3401b288:	340206cc 	.word	0x340206cc
  ldr r1, =_edata
3401b28c:	340208d8 	.word	0x340208d8
  ldr r2, =_sidata
3401b290:	340206cc 	.word	0x340206cc
  ldr r2, =_sbss
3401b294:	340208d8 	.word	0x340208d8
  ldr r4, =_ebss
3401b298:	34020fb0 	.word	0x34020fb0

3401b29c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3401b29c:	e7fe      	b.n	3401b29c <ADC1_2_IRQHandler>
	...

3401b2a0 <__assert_func>:
3401b2a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3401b2a2:	4614      	mov	r4, r2
3401b2a4:	461a      	mov	r2, r3
3401b2a6:	4b09      	ldr	r3, [pc, #36]	@ (3401b2cc <__assert_func+0x2c>)
3401b2a8:	4605      	mov	r5, r0
3401b2aa:	681b      	ldr	r3, [r3, #0]
3401b2ac:	68d8      	ldr	r0, [r3, #12]
3401b2ae:	b14c      	cbz	r4, 3401b2c4 <__assert_func+0x24>
3401b2b0:	4b07      	ldr	r3, [pc, #28]	@ (3401b2d0 <__assert_func+0x30>)
3401b2b2:	9100      	str	r1, [sp, #0]
3401b2b4:	4907      	ldr	r1, [pc, #28]	@ (3401b2d4 <__assert_func+0x34>)
3401b2b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
3401b2ba:	462b      	mov	r3, r5
3401b2bc:	f000 fe62 	bl	3401bf84 <fiprintf>
3401b2c0:	f001 fa74 	bl	3401c7ac <abort>
3401b2c4:	4b04      	ldr	r3, [pc, #16]	@ (3401b2d8 <__assert_func+0x38>)
3401b2c6:	461c      	mov	r4, r3
3401b2c8:	e7f3      	b.n	3401b2b2 <__assert_func+0x12>
3401b2ca:	bf00      	nop
3401b2cc:	3402071c 	.word	0x3402071c
3401b2d0:	3401fcae 	.word	0x3401fcae
3401b2d4:	3401fcbb 	.word	0x3401fcbb
3401b2d8:	3401fce9 	.word	0x3401fce9

3401b2dc <malloc>:
3401b2dc:	4b02      	ldr	r3, [pc, #8]	@ (3401b2e8 <malloc+0xc>)
3401b2de:	4601      	mov	r1, r0
3401b2e0:	6818      	ldr	r0, [r3, #0]
3401b2e2:	f000 b825 	b.w	3401b330 <_malloc_r>
3401b2e6:	bf00      	nop
3401b2e8:	3402071c 	.word	0x3402071c

3401b2ec <sbrk_aligned>:
3401b2ec:	b570      	push	{r4, r5, r6, lr}
3401b2ee:	4e0f      	ldr	r6, [pc, #60]	@ (3401b32c <sbrk_aligned+0x40>)
3401b2f0:	460c      	mov	r4, r1
3401b2f2:	4605      	mov	r5, r0
3401b2f4:	6831      	ldr	r1, [r6, #0]
3401b2f6:	b911      	cbnz	r1, 3401b2fe <sbrk_aligned+0x12>
3401b2f8:	f001 f9ee 	bl	3401c6d8 <_sbrk_r>
3401b2fc:	6030      	str	r0, [r6, #0]
3401b2fe:	4621      	mov	r1, r4
3401b300:	4628      	mov	r0, r5
3401b302:	f001 f9e9 	bl	3401c6d8 <_sbrk_r>
3401b306:	1c43      	adds	r3, r0, #1
3401b308:	d103      	bne.n	3401b312 <sbrk_aligned+0x26>
3401b30a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3401b30e:	4620      	mov	r0, r4
3401b310:	bd70      	pop	{r4, r5, r6, pc}
3401b312:	1cc4      	adds	r4, r0, #3
3401b314:	f024 0403 	bic.w	r4, r4, #3
3401b318:	42a0      	cmp	r0, r4
3401b31a:	d0f8      	beq.n	3401b30e <sbrk_aligned+0x22>
3401b31c:	1a21      	subs	r1, r4, r0
3401b31e:	4628      	mov	r0, r5
3401b320:	f001 f9da 	bl	3401c6d8 <_sbrk_r>
3401b324:	3001      	adds	r0, #1
3401b326:	d1f2      	bne.n	3401b30e <sbrk_aligned+0x22>
3401b328:	e7ef      	b.n	3401b30a <sbrk_aligned+0x1e>
3401b32a:	bf00      	nop
3401b32c:	34020e60 	.word	0x34020e60

3401b330 <_malloc_r>:
3401b330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401b334:	1ccd      	adds	r5, r1, #3
3401b336:	4606      	mov	r6, r0
3401b338:	f025 0503 	bic.w	r5, r5, #3
3401b33c:	3508      	adds	r5, #8
3401b33e:	2d0c      	cmp	r5, #12
3401b340:	bf38      	it	cc
3401b342:	250c      	movcc	r5, #12
3401b344:	2d00      	cmp	r5, #0
3401b346:	db01      	blt.n	3401b34c <_malloc_r+0x1c>
3401b348:	42a9      	cmp	r1, r5
3401b34a:	d904      	bls.n	3401b356 <_malloc_r+0x26>
3401b34c:	230c      	movs	r3, #12
3401b34e:	6033      	str	r3, [r6, #0]
3401b350:	2000      	movs	r0, #0
3401b352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401b356:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3401b42c <_malloc_r+0xfc>
3401b35a:	f000 f869 	bl	3401b430 <__malloc_lock>
3401b35e:	f8d8 3000 	ldr.w	r3, [r8]
3401b362:	461c      	mov	r4, r3
3401b364:	bb44      	cbnz	r4, 3401b3b8 <_malloc_r+0x88>
3401b366:	4629      	mov	r1, r5
3401b368:	4630      	mov	r0, r6
3401b36a:	f7ff ffbf 	bl	3401b2ec <sbrk_aligned>
3401b36e:	1c43      	adds	r3, r0, #1
3401b370:	4604      	mov	r4, r0
3401b372:	d158      	bne.n	3401b426 <_malloc_r+0xf6>
3401b374:	f8d8 4000 	ldr.w	r4, [r8]
3401b378:	4627      	mov	r7, r4
3401b37a:	2f00      	cmp	r7, #0
3401b37c:	d143      	bne.n	3401b406 <_malloc_r+0xd6>
3401b37e:	2c00      	cmp	r4, #0
3401b380:	d04b      	beq.n	3401b41a <_malloc_r+0xea>
3401b382:	6823      	ldr	r3, [r4, #0]
3401b384:	4639      	mov	r1, r7
3401b386:	4630      	mov	r0, r6
3401b388:	eb04 0903 	add.w	r9, r4, r3
3401b38c:	f001 f9a4 	bl	3401c6d8 <_sbrk_r>
3401b390:	4581      	cmp	r9, r0
3401b392:	d142      	bne.n	3401b41a <_malloc_r+0xea>
3401b394:	6821      	ldr	r1, [r4, #0]
3401b396:	4630      	mov	r0, r6
3401b398:	1a6d      	subs	r5, r5, r1
3401b39a:	4629      	mov	r1, r5
3401b39c:	f7ff ffa6 	bl	3401b2ec <sbrk_aligned>
3401b3a0:	3001      	adds	r0, #1
3401b3a2:	d03a      	beq.n	3401b41a <_malloc_r+0xea>
3401b3a4:	6823      	ldr	r3, [r4, #0]
3401b3a6:	442b      	add	r3, r5
3401b3a8:	6023      	str	r3, [r4, #0]
3401b3aa:	f8d8 3000 	ldr.w	r3, [r8]
3401b3ae:	685a      	ldr	r2, [r3, #4]
3401b3b0:	bb62      	cbnz	r2, 3401b40c <_malloc_r+0xdc>
3401b3b2:	f8c8 7000 	str.w	r7, [r8]
3401b3b6:	e00f      	b.n	3401b3d8 <_malloc_r+0xa8>
3401b3b8:	6822      	ldr	r2, [r4, #0]
3401b3ba:	1b52      	subs	r2, r2, r5
3401b3bc:	d420      	bmi.n	3401b400 <_malloc_r+0xd0>
3401b3be:	2a0b      	cmp	r2, #11
3401b3c0:	d917      	bls.n	3401b3f2 <_malloc_r+0xc2>
3401b3c2:	1961      	adds	r1, r4, r5
3401b3c4:	42a3      	cmp	r3, r4
3401b3c6:	6025      	str	r5, [r4, #0]
3401b3c8:	bf18      	it	ne
3401b3ca:	6059      	strne	r1, [r3, #4]
3401b3cc:	6863      	ldr	r3, [r4, #4]
3401b3ce:	bf08      	it	eq
3401b3d0:	f8c8 1000 	streq.w	r1, [r8]
3401b3d4:	5162      	str	r2, [r4, r5]
3401b3d6:	604b      	str	r3, [r1, #4]
3401b3d8:	4630      	mov	r0, r6
3401b3da:	f000 f82f 	bl	3401b43c <__malloc_unlock>
3401b3de:	f104 000b 	add.w	r0, r4, #11
3401b3e2:	1d23      	adds	r3, r4, #4
3401b3e4:	f020 0007 	bic.w	r0, r0, #7
3401b3e8:	1ac2      	subs	r2, r0, r3
3401b3ea:	bf1c      	itt	ne
3401b3ec:	1a1b      	subne	r3, r3, r0
3401b3ee:	50a3      	strne	r3, [r4, r2]
3401b3f0:	e7af      	b.n	3401b352 <_malloc_r+0x22>
3401b3f2:	6862      	ldr	r2, [r4, #4]
3401b3f4:	42a3      	cmp	r3, r4
3401b3f6:	bf0c      	ite	eq
3401b3f8:	f8c8 2000 	streq.w	r2, [r8]
3401b3fc:	605a      	strne	r2, [r3, #4]
3401b3fe:	e7eb      	b.n	3401b3d8 <_malloc_r+0xa8>
3401b400:	4623      	mov	r3, r4
3401b402:	6864      	ldr	r4, [r4, #4]
3401b404:	e7ae      	b.n	3401b364 <_malloc_r+0x34>
3401b406:	463c      	mov	r4, r7
3401b408:	687f      	ldr	r7, [r7, #4]
3401b40a:	e7b6      	b.n	3401b37a <_malloc_r+0x4a>
3401b40c:	461a      	mov	r2, r3
3401b40e:	685b      	ldr	r3, [r3, #4]
3401b410:	42a3      	cmp	r3, r4
3401b412:	d1fb      	bne.n	3401b40c <_malloc_r+0xdc>
3401b414:	2300      	movs	r3, #0
3401b416:	6053      	str	r3, [r2, #4]
3401b418:	e7de      	b.n	3401b3d8 <_malloc_r+0xa8>
3401b41a:	230c      	movs	r3, #12
3401b41c:	4630      	mov	r0, r6
3401b41e:	6033      	str	r3, [r6, #0]
3401b420:	f000 f80c 	bl	3401b43c <__malloc_unlock>
3401b424:	e794      	b.n	3401b350 <_malloc_r+0x20>
3401b426:	6005      	str	r5, [r0, #0]
3401b428:	e7d6      	b.n	3401b3d8 <_malloc_r+0xa8>
3401b42a:	bf00      	nop
3401b42c:	34020e64 	.word	0x34020e64

3401b430 <__malloc_lock>:
3401b430:	4801      	ldr	r0, [pc, #4]	@ (3401b438 <__malloc_lock+0x8>)
3401b432:	f001 b99e 	b.w	3401c772 <__retarget_lock_acquire_recursive>
3401b436:	bf00      	nop
3401b438:	34020fa8 	.word	0x34020fa8

3401b43c <__malloc_unlock>:
3401b43c:	4801      	ldr	r0, [pc, #4]	@ (3401b444 <__malloc_unlock+0x8>)
3401b43e:	f001 b999 	b.w	3401c774 <__retarget_lock_release_recursive>
3401b442:	bf00      	nop
3401b444:	34020fa8 	.word	0x34020fa8

3401b448 <__cvt>:
3401b448:	b5f0      	push	{r4, r5, r6, r7, lr}
3401b44a:	ed2d 8b02 	vpush	{d8}
3401b44e:	eeb0 8b40 	vmov.f64	d8, d0
3401b452:	b085      	sub	sp, #20
3401b454:	4617      	mov	r7, r2
3401b456:	460c      	mov	r4, r1
3401b458:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3401b45a:	ee18 2a90 	vmov	r2, s17
3401b45e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401b460:	f025 0520 	bic.w	r5, r5, #32
3401b464:	2a00      	cmp	r2, #0
3401b466:	bfb6      	itet	lt
3401b468:	222d      	movlt	r2, #45	@ 0x2d
3401b46a:	2200      	movge	r2, #0
3401b46c:	eeb1 8b40 	vneglt.f64	d8, d0
3401b470:	2d46      	cmp	r5, #70	@ 0x46
3401b472:	701a      	strb	r2, [r3, #0]
3401b474:	d004      	beq.n	3401b480 <__cvt+0x38>
3401b476:	2d45      	cmp	r5, #69	@ 0x45
3401b478:	d100      	bne.n	3401b47c <__cvt+0x34>
3401b47a:	3401      	adds	r4, #1
3401b47c:	2102      	movs	r1, #2
3401b47e:	e000      	b.n	3401b482 <__cvt+0x3a>
3401b480:	2103      	movs	r1, #3
3401b482:	ab03      	add	r3, sp, #12
3401b484:	eeb0 0b48 	vmov.f64	d0, d8
3401b488:	4622      	mov	r2, r4
3401b48a:	9301      	str	r3, [sp, #4]
3401b48c:	ab02      	add	r3, sp, #8
3401b48e:	9300      	str	r3, [sp, #0]
3401b490:	4633      	mov	r3, r6
3401b492:	f001 fa21 	bl	3401c8d8 <_dtoa_r>
3401b496:	2d47      	cmp	r5, #71	@ 0x47
3401b498:	d114      	bne.n	3401b4c4 <__cvt+0x7c>
3401b49a:	07fb      	lsls	r3, r7, #31
3401b49c:	d50a      	bpl.n	3401b4b4 <__cvt+0x6c>
3401b49e:	1902      	adds	r2, r0, r4
3401b4a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401b4a4:	2130      	movs	r1, #48	@ 0x30
3401b4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b4aa:	bf08      	it	eq
3401b4ac:	9203      	streq	r2, [sp, #12]
3401b4ae:	9b03      	ldr	r3, [sp, #12]
3401b4b0:	4293      	cmp	r3, r2
3401b4b2:	d319      	bcc.n	3401b4e8 <__cvt+0xa0>
3401b4b4:	9b03      	ldr	r3, [sp, #12]
3401b4b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401b4b8:	1a1b      	subs	r3, r3, r0
3401b4ba:	6013      	str	r3, [r2, #0]
3401b4bc:	b005      	add	sp, #20
3401b4be:	ecbd 8b02 	vpop	{d8}
3401b4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401b4c4:	2d46      	cmp	r5, #70	@ 0x46
3401b4c6:	eb00 0204 	add.w	r2, r0, r4
3401b4ca:	d1e9      	bne.n	3401b4a0 <__cvt+0x58>
3401b4cc:	7803      	ldrb	r3, [r0, #0]
3401b4ce:	2b30      	cmp	r3, #48	@ 0x30
3401b4d0:	d107      	bne.n	3401b4e2 <__cvt+0x9a>
3401b4d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401b4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b4da:	bf1c      	itt	ne
3401b4dc:	f1c4 0401 	rsbne	r4, r4, #1
3401b4e0:	6034      	strne	r4, [r6, #0]
3401b4e2:	6833      	ldr	r3, [r6, #0]
3401b4e4:	441a      	add	r2, r3
3401b4e6:	e7db      	b.n	3401b4a0 <__cvt+0x58>
3401b4e8:	1c5c      	adds	r4, r3, #1
3401b4ea:	9403      	str	r4, [sp, #12]
3401b4ec:	7019      	strb	r1, [r3, #0]
3401b4ee:	e7de      	b.n	3401b4ae <__cvt+0x66>

3401b4f0 <__exponent>:
3401b4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401b4f2:	2900      	cmp	r1, #0
3401b4f4:	7002      	strb	r2, [r0, #0]
3401b4f6:	bfba      	itte	lt
3401b4f8:	4249      	neglt	r1, r1
3401b4fa:	232d      	movlt	r3, #45	@ 0x2d
3401b4fc:	232b      	movge	r3, #43	@ 0x2b
3401b4fe:	2909      	cmp	r1, #9
3401b500:	7043      	strb	r3, [r0, #1]
3401b502:	dd28      	ble.n	3401b556 <__exponent+0x66>
3401b504:	f10d 0307 	add.w	r3, sp, #7
3401b508:	270a      	movs	r7, #10
3401b50a:	461d      	mov	r5, r3
3401b50c:	461a      	mov	r2, r3
3401b50e:	3b01      	subs	r3, #1
3401b510:	fbb1 f6f7 	udiv	r6, r1, r7
3401b514:	fb07 1416 	mls	r4, r7, r6, r1
3401b518:	3430      	adds	r4, #48	@ 0x30
3401b51a:	f802 4c01 	strb.w	r4, [r2, #-1]
3401b51e:	460c      	mov	r4, r1
3401b520:	4631      	mov	r1, r6
3401b522:	2c63      	cmp	r4, #99	@ 0x63
3401b524:	dcf2      	bgt.n	3401b50c <__exponent+0x1c>
3401b526:	3130      	adds	r1, #48	@ 0x30
3401b528:	1e94      	subs	r4, r2, #2
3401b52a:	f803 1c01 	strb.w	r1, [r3, #-1]
3401b52e:	1c41      	adds	r1, r0, #1
3401b530:	4623      	mov	r3, r4
3401b532:	42ab      	cmp	r3, r5
3401b534:	d30a      	bcc.n	3401b54c <__exponent+0x5c>
3401b536:	f10d 0309 	add.w	r3, sp, #9
3401b53a:	1a9b      	subs	r3, r3, r2
3401b53c:	42ac      	cmp	r4, r5
3401b53e:	bf88      	it	hi
3401b540:	2300      	movhi	r3, #0
3401b542:	3302      	adds	r3, #2
3401b544:	4403      	add	r3, r0
3401b546:	1a18      	subs	r0, r3, r0
3401b548:	b003      	add	sp, #12
3401b54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401b54c:	f813 6b01 	ldrb.w	r6, [r3], #1
3401b550:	f801 6f01 	strb.w	r6, [r1, #1]!
3401b554:	e7ed      	b.n	3401b532 <__exponent+0x42>
3401b556:	2330      	movs	r3, #48	@ 0x30
3401b558:	3130      	adds	r1, #48	@ 0x30
3401b55a:	7083      	strb	r3, [r0, #2]
3401b55c:	1d03      	adds	r3, r0, #4
3401b55e:	70c1      	strb	r1, [r0, #3]
3401b560:	e7f1      	b.n	3401b546 <__exponent+0x56>
3401b562:	0000      	movs	r0, r0
3401b564:	0000      	movs	r0, r0
	...

3401b568 <_printf_float>:
3401b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401b56c:	b08d      	sub	sp, #52	@ 0x34
3401b56e:	460c      	mov	r4, r1
3401b570:	4616      	mov	r6, r2
3401b572:	461f      	mov	r7, r3
3401b574:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3401b578:	4605      	mov	r5, r0
3401b57a:	f001 f875 	bl	3401c668 <_localeconv_r>
3401b57e:	f8d0 b000 	ldr.w	fp, [r0]
3401b582:	4658      	mov	r0, fp
3401b584:	f7e5 f904 	bl	34000790 <strlen>
3401b588:	2300      	movs	r3, #0
3401b58a:	f894 9018 	ldrb.w	r9, [r4, #24]
3401b58e:	930a      	str	r3, [sp, #40]	@ 0x28
3401b590:	f8d8 3000 	ldr.w	r3, [r8]
3401b594:	6822      	ldr	r2, [r4, #0]
3401b596:	3307      	adds	r3, #7
3401b598:	9005      	str	r0, [sp, #20]
3401b59a:	f023 0307 	bic.w	r3, r3, #7
3401b59e:	f103 0108 	add.w	r1, r3, #8
3401b5a2:	f8c8 1000 	str.w	r1, [r8]
3401b5a6:	ed93 0b00 	vldr	d0, [r3]
3401b5aa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3401b808 <_printf_float+0x2a0>
3401b5ae:	eeb0 7bc0 	vabs.f64	d7, d0
3401b5b2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3401b5b6:	eeb4 7b46 	vcmp.f64	d7, d6
3401b5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b5be:	dd24      	ble.n	3401b60a <_printf_float+0xa2>
3401b5c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3401b5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b5c8:	d502      	bpl.n	3401b5d0 <_printf_float+0x68>
3401b5ca:	232d      	movs	r3, #45	@ 0x2d
3401b5cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401b5d0:	498f      	ldr	r1, [pc, #572]	@ (3401b810 <_printf_float+0x2a8>)
3401b5d2:	4b90      	ldr	r3, [pc, #576]	@ (3401b814 <_printf_float+0x2ac>)
3401b5d4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3401b5d8:	bf8c      	ite	hi
3401b5da:	4688      	movhi	r8, r1
3401b5dc:	4698      	movls	r8, r3
3401b5de:	f022 0204 	bic.w	r2, r2, #4
3401b5e2:	2303      	movs	r3, #3
3401b5e4:	f04f 0a00 	mov.w	sl, #0
3401b5e8:	6022      	str	r2, [r4, #0]
3401b5ea:	6123      	str	r3, [r4, #16]
3401b5ec:	4633      	mov	r3, r6
3401b5ee:	aa0b      	add	r2, sp, #44	@ 0x2c
3401b5f0:	4621      	mov	r1, r4
3401b5f2:	4628      	mov	r0, r5
3401b5f4:	9700      	str	r7, [sp, #0]
3401b5f6:	f000 f9d1 	bl	3401b99c <_printf_common>
3401b5fa:	3001      	adds	r0, #1
3401b5fc:	f040 8089 	bne.w	3401b712 <_printf_float+0x1aa>
3401b600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401b604:	b00d      	add	sp, #52	@ 0x34
3401b606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401b60a:	eeb4 0b40 	vcmp.f64	d0, d0
3401b60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b612:	d709      	bvc.n	3401b628 <_printf_float+0xc0>
3401b614:	ee10 3a90 	vmov	r3, s1
3401b618:	497f      	ldr	r1, [pc, #508]	@ (3401b818 <_printf_float+0x2b0>)
3401b61a:	2b00      	cmp	r3, #0
3401b61c:	bfbc      	itt	lt
3401b61e:	232d      	movlt	r3, #45	@ 0x2d
3401b620:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3401b624:	4b7d      	ldr	r3, [pc, #500]	@ (3401b81c <_printf_float+0x2b4>)
3401b626:	e7d5      	b.n	3401b5d4 <_printf_float+0x6c>
3401b628:	6863      	ldr	r3, [r4, #4]
3401b62a:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3401b62e:	1c59      	adds	r1, r3, #1
3401b630:	d139      	bne.n	3401b6a6 <_printf_float+0x13e>
3401b632:	2306      	movs	r3, #6
3401b634:	6063      	str	r3, [r4, #4]
3401b636:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3401b63a:	2300      	movs	r3, #0
3401b63c:	4628      	mov	r0, r5
3401b63e:	6022      	str	r2, [r4, #0]
3401b640:	9303      	str	r3, [sp, #12]
3401b642:	ab0a      	add	r3, sp, #40	@ 0x28
3401b644:	e9cd 9301 	strd	r9, r3, [sp, #4]
3401b648:	ab09      	add	r3, sp, #36	@ 0x24
3401b64a:	9300      	str	r3, [sp, #0]
3401b64c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3401b650:	6861      	ldr	r1, [r4, #4]
3401b652:	f7ff fef9 	bl	3401b448 <__cvt>
3401b656:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3401b65a:	4680      	mov	r8, r0
3401b65c:	9909      	ldr	r1, [sp, #36]	@ 0x24
3401b65e:	d129      	bne.n	3401b6b4 <_printf_float+0x14c>
3401b660:	1cc8      	adds	r0, r1, #3
3401b662:	db02      	blt.n	3401b66a <_printf_float+0x102>
3401b664:	6863      	ldr	r3, [r4, #4]
3401b666:	4299      	cmp	r1, r3
3401b668:	dd41      	ble.n	3401b6ee <_printf_float+0x186>
3401b66a:	f1a9 0902 	sub.w	r9, r9, #2
3401b66e:	fa5f f989 	uxtb.w	r9, r9
3401b672:	3901      	subs	r1, #1
3401b674:	464a      	mov	r2, r9
3401b676:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3401b67a:	9109      	str	r1, [sp, #36]	@ 0x24
3401b67c:	f7ff ff38 	bl	3401b4f0 <__exponent>
3401b680:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401b682:	4682      	mov	sl, r0
3401b684:	1813      	adds	r3, r2, r0
3401b686:	2a01      	cmp	r2, #1
3401b688:	6123      	str	r3, [r4, #16]
3401b68a:	dc02      	bgt.n	3401b692 <_printf_float+0x12a>
3401b68c:	6822      	ldr	r2, [r4, #0]
3401b68e:	07d2      	lsls	r2, r2, #31
3401b690:	d501      	bpl.n	3401b696 <_printf_float+0x12e>
3401b692:	3301      	adds	r3, #1
3401b694:	6123      	str	r3, [r4, #16]
3401b696:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3401b69a:	2b00      	cmp	r3, #0
3401b69c:	d0a6      	beq.n	3401b5ec <_printf_float+0x84>
3401b69e:	232d      	movs	r3, #45	@ 0x2d
3401b6a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401b6a4:	e7a2      	b.n	3401b5ec <_printf_float+0x84>
3401b6a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3401b6aa:	d1c4      	bne.n	3401b636 <_printf_float+0xce>
3401b6ac:	2b00      	cmp	r3, #0
3401b6ae:	d1c2      	bne.n	3401b636 <_printf_float+0xce>
3401b6b0:	2301      	movs	r3, #1
3401b6b2:	e7bf      	b.n	3401b634 <_printf_float+0xcc>
3401b6b4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3401b6b8:	d9db      	bls.n	3401b672 <_printf_float+0x10a>
3401b6ba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3401b6be:	d118      	bne.n	3401b6f2 <_printf_float+0x18a>
3401b6c0:	2900      	cmp	r1, #0
3401b6c2:	6863      	ldr	r3, [r4, #4]
3401b6c4:	dd0b      	ble.n	3401b6de <_printf_float+0x176>
3401b6c6:	6121      	str	r1, [r4, #16]
3401b6c8:	b913      	cbnz	r3, 3401b6d0 <_printf_float+0x168>
3401b6ca:	6822      	ldr	r2, [r4, #0]
3401b6cc:	07d0      	lsls	r0, r2, #31
3401b6ce:	d502      	bpl.n	3401b6d6 <_printf_float+0x16e>
3401b6d0:	3301      	adds	r3, #1
3401b6d2:	440b      	add	r3, r1
3401b6d4:	6123      	str	r3, [r4, #16]
3401b6d6:	f04f 0a00 	mov.w	sl, #0
3401b6da:	65a1      	str	r1, [r4, #88]	@ 0x58
3401b6dc:	e7db      	b.n	3401b696 <_printf_float+0x12e>
3401b6de:	b913      	cbnz	r3, 3401b6e6 <_printf_float+0x17e>
3401b6e0:	6822      	ldr	r2, [r4, #0]
3401b6e2:	07d2      	lsls	r2, r2, #31
3401b6e4:	d501      	bpl.n	3401b6ea <_printf_float+0x182>
3401b6e6:	3302      	adds	r3, #2
3401b6e8:	e7f4      	b.n	3401b6d4 <_printf_float+0x16c>
3401b6ea:	2301      	movs	r3, #1
3401b6ec:	e7f2      	b.n	3401b6d4 <_printf_float+0x16c>
3401b6ee:	f04f 0967 	mov.w	r9, #103	@ 0x67
3401b6f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401b6f4:	4299      	cmp	r1, r3
3401b6f6:	db05      	blt.n	3401b704 <_printf_float+0x19c>
3401b6f8:	6823      	ldr	r3, [r4, #0]
3401b6fa:	6121      	str	r1, [r4, #16]
3401b6fc:	07d8      	lsls	r0, r3, #31
3401b6fe:	d5ea      	bpl.n	3401b6d6 <_printf_float+0x16e>
3401b700:	1c4b      	adds	r3, r1, #1
3401b702:	e7e7      	b.n	3401b6d4 <_printf_float+0x16c>
3401b704:	2900      	cmp	r1, #0
3401b706:	bfd4      	ite	le
3401b708:	f1c1 0202 	rsble	r2, r1, #2
3401b70c:	2201      	movgt	r2, #1
3401b70e:	4413      	add	r3, r2
3401b710:	e7e0      	b.n	3401b6d4 <_printf_float+0x16c>
3401b712:	6823      	ldr	r3, [r4, #0]
3401b714:	055a      	lsls	r2, r3, #21
3401b716:	d407      	bmi.n	3401b728 <_printf_float+0x1c0>
3401b718:	6923      	ldr	r3, [r4, #16]
3401b71a:	4642      	mov	r2, r8
3401b71c:	4631      	mov	r1, r6
3401b71e:	4628      	mov	r0, r5
3401b720:	47b8      	blx	r7
3401b722:	3001      	adds	r0, #1
3401b724:	d12a      	bne.n	3401b77c <_printf_float+0x214>
3401b726:	e76b      	b.n	3401b600 <_printf_float+0x98>
3401b728:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3401b72c:	f240 80e0 	bls.w	3401b8f0 <_printf_float+0x388>
3401b730:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401b734:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401b738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b73c:	d133      	bne.n	3401b7a6 <_printf_float+0x23e>
3401b73e:	2301      	movs	r3, #1
3401b740:	4a37      	ldr	r2, [pc, #220]	@ (3401b820 <_printf_float+0x2b8>)
3401b742:	4631      	mov	r1, r6
3401b744:	4628      	mov	r0, r5
3401b746:	47b8      	blx	r7
3401b748:	3001      	adds	r0, #1
3401b74a:	f43f af59 	beq.w	3401b600 <_printf_float+0x98>
3401b74e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3401b752:	4543      	cmp	r3, r8
3401b754:	db02      	blt.n	3401b75c <_printf_float+0x1f4>
3401b756:	6823      	ldr	r3, [r4, #0]
3401b758:	07d8      	lsls	r0, r3, #31
3401b75a:	d50f      	bpl.n	3401b77c <_printf_float+0x214>
3401b75c:	9b05      	ldr	r3, [sp, #20]
3401b75e:	465a      	mov	r2, fp
3401b760:	4631      	mov	r1, r6
3401b762:	4628      	mov	r0, r5
3401b764:	47b8      	blx	r7
3401b766:	3001      	adds	r0, #1
3401b768:	f43f af4a 	beq.w	3401b600 <_printf_float+0x98>
3401b76c:	f04f 0900 	mov.w	r9, #0
3401b770:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3401b774:	f104 0a1a 	add.w	sl, r4, #26
3401b778:	45c8      	cmp	r8, r9
3401b77a:	dc09      	bgt.n	3401b790 <_printf_float+0x228>
3401b77c:	6823      	ldr	r3, [r4, #0]
3401b77e:	079b      	lsls	r3, r3, #30
3401b780:	f100 8107 	bmi.w	3401b992 <_printf_float+0x42a>
3401b784:	68e0      	ldr	r0, [r4, #12]
3401b786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401b788:	4298      	cmp	r0, r3
3401b78a:	bfb8      	it	lt
3401b78c:	4618      	movlt	r0, r3
3401b78e:	e739      	b.n	3401b604 <_printf_float+0x9c>
3401b790:	2301      	movs	r3, #1
3401b792:	4652      	mov	r2, sl
3401b794:	4631      	mov	r1, r6
3401b796:	4628      	mov	r0, r5
3401b798:	47b8      	blx	r7
3401b79a:	3001      	adds	r0, #1
3401b79c:	f43f af30 	beq.w	3401b600 <_printf_float+0x98>
3401b7a0:	f109 0901 	add.w	r9, r9, #1
3401b7a4:	e7e8      	b.n	3401b778 <_printf_float+0x210>
3401b7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b7a8:	2b00      	cmp	r3, #0
3401b7aa:	dc3b      	bgt.n	3401b824 <_printf_float+0x2bc>
3401b7ac:	2301      	movs	r3, #1
3401b7ae:	4a1c      	ldr	r2, [pc, #112]	@ (3401b820 <_printf_float+0x2b8>)
3401b7b0:	4631      	mov	r1, r6
3401b7b2:	4628      	mov	r0, r5
3401b7b4:	47b8      	blx	r7
3401b7b6:	3001      	adds	r0, #1
3401b7b8:	f43f af22 	beq.w	3401b600 <_printf_float+0x98>
3401b7bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3401b7c0:	ea59 0303 	orrs.w	r3, r9, r3
3401b7c4:	d102      	bne.n	3401b7cc <_printf_float+0x264>
3401b7c6:	6823      	ldr	r3, [r4, #0]
3401b7c8:	07d9      	lsls	r1, r3, #31
3401b7ca:	d5d7      	bpl.n	3401b77c <_printf_float+0x214>
3401b7cc:	9b05      	ldr	r3, [sp, #20]
3401b7ce:	465a      	mov	r2, fp
3401b7d0:	4631      	mov	r1, r6
3401b7d2:	4628      	mov	r0, r5
3401b7d4:	47b8      	blx	r7
3401b7d6:	3001      	adds	r0, #1
3401b7d8:	f43f af12 	beq.w	3401b600 <_printf_float+0x98>
3401b7dc:	f04f 0a00 	mov.w	sl, #0
3401b7e0:	f104 0b1a 	add.w	fp, r4, #26
3401b7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b7e6:	425b      	negs	r3, r3
3401b7e8:	4553      	cmp	r3, sl
3401b7ea:	dc01      	bgt.n	3401b7f0 <_printf_float+0x288>
3401b7ec:	464b      	mov	r3, r9
3401b7ee:	e794      	b.n	3401b71a <_printf_float+0x1b2>
3401b7f0:	2301      	movs	r3, #1
3401b7f2:	465a      	mov	r2, fp
3401b7f4:	4631      	mov	r1, r6
3401b7f6:	4628      	mov	r0, r5
3401b7f8:	47b8      	blx	r7
3401b7fa:	3001      	adds	r0, #1
3401b7fc:	f43f af00 	beq.w	3401b600 <_printf_float+0x98>
3401b800:	f10a 0a01 	add.w	sl, sl, #1
3401b804:	e7ee      	b.n	3401b7e4 <_printf_float+0x27c>
3401b806:	bf00      	nop
3401b808:	ffffffff 	.word	0xffffffff
3401b80c:	7fefffff 	.word	0x7fefffff
3401b810:	3401fcee 	.word	0x3401fcee
3401b814:	3401fcea 	.word	0x3401fcea
3401b818:	3401fcf6 	.word	0x3401fcf6
3401b81c:	3401fcf2 	.word	0x3401fcf2
3401b820:	3401fcfa 	.word	0x3401fcfa
3401b824:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401b826:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3401b82a:	4553      	cmp	r3, sl
3401b82c:	bfa8      	it	ge
3401b82e:	4653      	movge	r3, sl
3401b830:	2b00      	cmp	r3, #0
3401b832:	4699      	mov	r9, r3
3401b834:	dc37      	bgt.n	3401b8a6 <_printf_float+0x33e>
3401b836:	2300      	movs	r3, #0
3401b838:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401b83c:	f104 021a 	add.w	r2, r4, #26
3401b840:	9307      	str	r3, [sp, #28]
3401b842:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401b844:	9907      	ldr	r1, [sp, #28]
3401b846:	9306      	str	r3, [sp, #24]
3401b848:	eba3 0309 	sub.w	r3, r3, r9
3401b84c:	428b      	cmp	r3, r1
3401b84e:	dc31      	bgt.n	3401b8b4 <_printf_float+0x34c>
3401b850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b852:	459a      	cmp	sl, r3
3401b854:	dc3b      	bgt.n	3401b8ce <_printf_float+0x366>
3401b856:	6823      	ldr	r3, [r4, #0]
3401b858:	07da      	lsls	r2, r3, #31
3401b85a:	d438      	bmi.n	3401b8ce <_printf_float+0x366>
3401b85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b85e:	ebaa 0903 	sub.w	r9, sl, r3
3401b862:	9b06      	ldr	r3, [sp, #24]
3401b864:	ebaa 0303 	sub.w	r3, sl, r3
3401b868:	4599      	cmp	r9, r3
3401b86a:	bfa8      	it	ge
3401b86c:	4699      	movge	r9, r3
3401b86e:	f1b9 0f00 	cmp.w	r9, #0
3401b872:	dc34      	bgt.n	3401b8de <_printf_float+0x376>
3401b874:	f04f 0800 	mov.w	r8, #0
3401b878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401b87c:	f104 0b1a 	add.w	fp, r4, #26
3401b880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b882:	ebaa 0303 	sub.w	r3, sl, r3
3401b886:	eba3 0309 	sub.w	r3, r3, r9
3401b88a:	4543      	cmp	r3, r8
3401b88c:	f77f af76 	ble.w	3401b77c <_printf_float+0x214>
3401b890:	2301      	movs	r3, #1
3401b892:	465a      	mov	r2, fp
3401b894:	4631      	mov	r1, r6
3401b896:	4628      	mov	r0, r5
3401b898:	47b8      	blx	r7
3401b89a:	3001      	adds	r0, #1
3401b89c:	f43f aeb0 	beq.w	3401b600 <_printf_float+0x98>
3401b8a0:	f108 0801 	add.w	r8, r8, #1
3401b8a4:	e7ec      	b.n	3401b880 <_printf_float+0x318>
3401b8a6:	4642      	mov	r2, r8
3401b8a8:	4631      	mov	r1, r6
3401b8aa:	4628      	mov	r0, r5
3401b8ac:	47b8      	blx	r7
3401b8ae:	3001      	adds	r0, #1
3401b8b0:	d1c1      	bne.n	3401b836 <_printf_float+0x2ce>
3401b8b2:	e6a5      	b.n	3401b600 <_printf_float+0x98>
3401b8b4:	2301      	movs	r3, #1
3401b8b6:	4631      	mov	r1, r6
3401b8b8:	4628      	mov	r0, r5
3401b8ba:	9206      	str	r2, [sp, #24]
3401b8bc:	47b8      	blx	r7
3401b8be:	3001      	adds	r0, #1
3401b8c0:	f43f ae9e 	beq.w	3401b600 <_printf_float+0x98>
3401b8c4:	9b07      	ldr	r3, [sp, #28]
3401b8c6:	9a06      	ldr	r2, [sp, #24]
3401b8c8:	3301      	adds	r3, #1
3401b8ca:	9307      	str	r3, [sp, #28]
3401b8cc:	e7b9      	b.n	3401b842 <_printf_float+0x2da>
3401b8ce:	9b05      	ldr	r3, [sp, #20]
3401b8d0:	465a      	mov	r2, fp
3401b8d2:	4631      	mov	r1, r6
3401b8d4:	4628      	mov	r0, r5
3401b8d6:	47b8      	blx	r7
3401b8d8:	3001      	adds	r0, #1
3401b8da:	d1bf      	bne.n	3401b85c <_printf_float+0x2f4>
3401b8dc:	e690      	b.n	3401b600 <_printf_float+0x98>
3401b8de:	9a06      	ldr	r2, [sp, #24]
3401b8e0:	464b      	mov	r3, r9
3401b8e2:	4631      	mov	r1, r6
3401b8e4:	4628      	mov	r0, r5
3401b8e6:	4442      	add	r2, r8
3401b8e8:	47b8      	blx	r7
3401b8ea:	3001      	adds	r0, #1
3401b8ec:	d1c2      	bne.n	3401b874 <_printf_float+0x30c>
3401b8ee:	e687      	b.n	3401b600 <_printf_float+0x98>
3401b8f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3401b8f4:	f1b9 0f01 	cmp.w	r9, #1
3401b8f8:	dc01      	bgt.n	3401b8fe <_printf_float+0x396>
3401b8fa:	07db      	lsls	r3, r3, #31
3401b8fc:	d536      	bpl.n	3401b96c <_printf_float+0x404>
3401b8fe:	2301      	movs	r3, #1
3401b900:	4642      	mov	r2, r8
3401b902:	4631      	mov	r1, r6
3401b904:	4628      	mov	r0, r5
3401b906:	47b8      	blx	r7
3401b908:	3001      	adds	r0, #1
3401b90a:	f43f ae79 	beq.w	3401b600 <_printf_float+0x98>
3401b90e:	9b05      	ldr	r3, [sp, #20]
3401b910:	465a      	mov	r2, fp
3401b912:	4631      	mov	r1, r6
3401b914:	4628      	mov	r0, r5
3401b916:	47b8      	blx	r7
3401b918:	3001      	adds	r0, #1
3401b91a:	f43f ae71 	beq.w	3401b600 <_printf_float+0x98>
3401b91e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3401b922:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401b926:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401b92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b92e:	d018      	beq.n	3401b962 <_printf_float+0x3fa>
3401b930:	464b      	mov	r3, r9
3401b932:	f108 0201 	add.w	r2, r8, #1
3401b936:	4631      	mov	r1, r6
3401b938:	4628      	mov	r0, r5
3401b93a:	47b8      	blx	r7
3401b93c:	3001      	adds	r0, #1
3401b93e:	d10c      	bne.n	3401b95a <_printf_float+0x3f2>
3401b940:	e65e      	b.n	3401b600 <_printf_float+0x98>
3401b942:	2301      	movs	r3, #1
3401b944:	465a      	mov	r2, fp
3401b946:	4631      	mov	r1, r6
3401b948:	4628      	mov	r0, r5
3401b94a:	47b8      	blx	r7
3401b94c:	3001      	adds	r0, #1
3401b94e:	f43f ae57 	beq.w	3401b600 <_printf_float+0x98>
3401b952:	f108 0801 	add.w	r8, r8, #1
3401b956:	45c8      	cmp	r8, r9
3401b958:	dbf3      	blt.n	3401b942 <_printf_float+0x3da>
3401b95a:	4653      	mov	r3, sl
3401b95c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3401b960:	e6dc      	b.n	3401b71c <_printf_float+0x1b4>
3401b962:	f04f 0800 	mov.w	r8, #0
3401b966:	f104 0b1a 	add.w	fp, r4, #26
3401b96a:	e7f4      	b.n	3401b956 <_printf_float+0x3ee>
3401b96c:	2301      	movs	r3, #1
3401b96e:	4642      	mov	r2, r8
3401b970:	e7e1      	b.n	3401b936 <_printf_float+0x3ce>
3401b972:	2301      	movs	r3, #1
3401b974:	464a      	mov	r2, r9
3401b976:	4631      	mov	r1, r6
3401b978:	4628      	mov	r0, r5
3401b97a:	47b8      	blx	r7
3401b97c:	3001      	adds	r0, #1
3401b97e:	f43f ae3f 	beq.w	3401b600 <_printf_float+0x98>
3401b982:	f108 0801 	add.w	r8, r8, #1
3401b986:	68e3      	ldr	r3, [r4, #12]
3401b988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3401b98a:	1a5b      	subs	r3, r3, r1
3401b98c:	4543      	cmp	r3, r8
3401b98e:	dcf0      	bgt.n	3401b972 <_printf_float+0x40a>
3401b990:	e6f8      	b.n	3401b784 <_printf_float+0x21c>
3401b992:	f04f 0800 	mov.w	r8, #0
3401b996:	f104 0919 	add.w	r9, r4, #25
3401b99a:	e7f4      	b.n	3401b986 <_printf_float+0x41e>

3401b99c <_printf_common>:
3401b99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401b9a0:	4616      	mov	r6, r2
3401b9a2:	4698      	mov	r8, r3
3401b9a4:	688a      	ldr	r2, [r1, #8]
3401b9a6:	4607      	mov	r7, r0
3401b9a8:	690b      	ldr	r3, [r1, #16]
3401b9aa:	460c      	mov	r4, r1
3401b9ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
3401b9b0:	4293      	cmp	r3, r2
3401b9b2:	bfb8      	it	lt
3401b9b4:	4613      	movlt	r3, r2
3401b9b6:	6033      	str	r3, [r6, #0]
3401b9b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3401b9bc:	b10a      	cbz	r2, 3401b9c2 <_printf_common+0x26>
3401b9be:	3301      	adds	r3, #1
3401b9c0:	6033      	str	r3, [r6, #0]
3401b9c2:	6823      	ldr	r3, [r4, #0]
3401b9c4:	0699      	lsls	r1, r3, #26
3401b9c6:	bf42      	ittt	mi
3401b9c8:	6833      	ldrmi	r3, [r6, #0]
3401b9ca:	3302      	addmi	r3, #2
3401b9cc:	6033      	strmi	r3, [r6, #0]
3401b9ce:	6825      	ldr	r5, [r4, #0]
3401b9d0:	f015 0506 	ands.w	r5, r5, #6
3401b9d4:	d106      	bne.n	3401b9e4 <_printf_common+0x48>
3401b9d6:	f104 0a19 	add.w	sl, r4, #25
3401b9da:	68e3      	ldr	r3, [r4, #12]
3401b9dc:	6832      	ldr	r2, [r6, #0]
3401b9de:	1a9b      	subs	r3, r3, r2
3401b9e0:	42ab      	cmp	r3, r5
3401b9e2:	dc2b      	bgt.n	3401ba3c <_printf_common+0xa0>
3401b9e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3401b9e8:	6822      	ldr	r2, [r4, #0]
3401b9ea:	3b00      	subs	r3, #0
3401b9ec:	bf18      	it	ne
3401b9ee:	2301      	movne	r3, #1
3401b9f0:	0692      	lsls	r2, r2, #26
3401b9f2:	d430      	bmi.n	3401ba56 <_printf_common+0xba>
3401b9f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3401b9f8:	4641      	mov	r1, r8
3401b9fa:	4638      	mov	r0, r7
3401b9fc:	47c8      	blx	r9
3401b9fe:	3001      	adds	r0, #1
3401ba00:	d023      	beq.n	3401ba4a <_printf_common+0xae>
3401ba02:	6823      	ldr	r3, [r4, #0]
3401ba04:	341a      	adds	r4, #26
3401ba06:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3401ba0a:	f003 0306 	and.w	r3, r3, #6
3401ba0e:	2b04      	cmp	r3, #4
3401ba10:	bf0a      	itet	eq
3401ba12:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3401ba16:	2500      	movne	r5, #0
3401ba18:	6833      	ldreq	r3, [r6, #0]
3401ba1a:	f04f 0600 	mov.w	r6, #0
3401ba1e:	bf08      	it	eq
3401ba20:	1aed      	subeq	r5, r5, r3
3401ba22:	f854 3c12 	ldr.w	r3, [r4, #-18]
3401ba26:	bf08      	it	eq
3401ba28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3401ba2c:	4293      	cmp	r3, r2
3401ba2e:	bfc4      	itt	gt
3401ba30:	1a9b      	subgt	r3, r3, r2
3401ba32:	18ed      	addgt	r5, r5, r3
3401ba34:	42b5      	cmp	r5, r6
3401ba36:	d11a      	bne.n	3401ba6e <_printf_common+0xd2>
3401ba38:	2000      	movs	r0, #0
3401ba3a:	e008      	b.n	3401ba4e <_printf_common+0xb2>
3401ba3c:	2301      	movs	r3, #1
3401ba3e:	4652      	mov	r2, sl
3401ba40:	4641      	mov	r1, r8
3401ba42:	4638      	mov	r0, r7
3401ba44:	47c8      	blx	r9
3401ba46:	3001      	adds	r0, #1
3401ba48:	d103      	bne.n	3401ba52 <_printf_common+0xb6>
3401ba4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401ba4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401ba52:	3501      	adds	r5, #1
3401ba54:	e7c1      	b.n	3401b9da <_printf_common+0x3e>
3401ba56:	18e1      	adds	r1, r4, r3
3401ba58:	1c5a      	adds	r2, r3, #1
3401ba5a:	2030      	movs	r0, #48	@ 0x30
3401ba5c:	3302      	adds	r3, #2
3401ba5e:	4422      	add	r2, r4
3401ba60:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3401ba64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3401ba68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3401ba6c:	e7c2      	b.n	3401b9f4 <_printf_common+0x58>
3401ba6e:	2301      	movs	r3, #1
3401ba70:	4622      	mov	r2, r4
3401ba72:	4641      	mov	r1, r8
3401ba74:	4638      	mov	r0, r7
3401ba76:	47c8      	blx	r9
3401ba78:	3001      	adds	r0, #1
3401ba7a:	d0e6      	beq.n	3401ba4a <_printf_common+0xae>
3401ba7c:	3601      	adds	r6, #1
3401ba7e:	e7d9      	b.n	3401ba34 <_printf_common+0x98>

3401ba80 <_printf_i>:
3401ba80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3401ba84:	7e0f      	ldrb	r7, [r1, #24]
3401ba86:	4691      	mov	r9, r2
3401ba88:	4680      	mov	r8, r0
3401ba8a:	460c      	mov	r4, r1
3401ba8c:	2f78      	cmp	r7, #120	@ 0x78
3401ba8e:	469a      	mov	sl, r3
3401ba90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401ba92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3401ba96:	d807      	bhi.n	3401baa8 <_printf_i+0x28>
3401ba98:	2f62      	cmp	r7, #98	@ 0x62
3401ba9a:	d80a      	bhi.n	3401bab2 <_printf_i+0x32>
3401ba9c:	2f00      	cmp	r7, #0
3401ba9e:	f000 80d1 	beq.w	3401bc44 <_printf_i+0x1c4>
3401baa2:	2f58      	cmp	r7, #88	@ 0x58
3401baa4:	f000 80b8 	beq.w	3401bc18 <_printf_i+0x198>
3401baa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401baac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3401bab0:	e03a      	b.n	3401bb28 <_printf_i+0xa8>
3401bab2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3401bab6:	2b15      	cmp	r3, #21
3401bab8:	d8f6      	bhi.n	3401baa8 <_printf_i+0x28>
3401baba:	a101      	add	r1, pc, #4	@ (adr r1, 3401bac0 <_printf_i+0x40>)
3401babc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3401bac0:	3401bb19 	.word	0x3401bb19
3401bac4:	3401bb2d 	.word	0x3401bb2d
3401bac8:	3401baa9 	.word	0x3401baa9
3401bacc:	3401baa9 	.word	0x3401baa9
3401bad0:	3401baa9 	.word	0x3401baa9
3401bad4:	3401baa9 	.word	0x3401baa9
3401bad8:	3401bb2d 	.word	0x3401bb2d
3401badc:	3401baa9 	.word	0x3401baa9
3401bae0:	3401baa9 	.word	0x3401baa9
3401bae4:	3401baa9 	.word	0x3401baa9
3401bae8:	3401baa9 	.word	0x3401baa9
3401baec:	3401bc2b 	.word	0x3401bc2b
3401baf0:	3401bb57 	.word	0x3401bb57
3401baf4:	3401bbe5 	.word	0x3401bbe5
3401baf8:	3401baa9 	.word	0x3401baa9
3401bafc:	3401baa9 	.word	0x3401baa9
3401bb00:	3401bc4d 	.word	0x3401bc4d
3401bb04:	3401baa9 	.word	0x3401baa9
3401bb08:	3401bb57 	.word	0x3401bb57
3401bb0c:	3401baa9 	.word	0x3401baa9
3401bb10:	3401baa9 	.word	0x3401baa9
3401bb14:	3401bbed 	.word	0x3401bbed
3401bb18:	6833      	ldr	r3, [r6, #0]
3401bb1a:	1d1a      	adds	r2, r3, #4
3401bb1c:	681b      	ldr	r3, [r3, #0]
3401bb1e:	6032      	str	r2, [r6, #0]
3401bb20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401bb24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3401bb28:	2301      	movs	r3, #1
3401bb2a:	e09c      	b.n	3401bc66 <_printf_i+0x1e6>
3401bb2c:	6833      	ldr	r3, [r6, #0]
3401bb2e:	6820      	ldr	r0, [r4, #0]
3401bb30:	1d19      	adds	r1, r3, #4
3401bb32:	6031      	str	r1, [r6, #0]
3401bb34:	0606      	lsls	r6, r0, #24
3401bb36:	d501      	bpl.n	3401bb3c <_printf_i+0xbc>
3401bb38:	681d      	ldr	r5, [r3, #0]
3401bb3a:	e003      	b.n	3401bb44 <_printf_i+0xc4>
3401bb3c:	0645      	lsls	r5, r0, #25
3401bb3e:	d5fb      	bpl.n	3401bb38 <_printf_i+0xb8>
3401bb40:	f9b3 5000 	ldrsh.w	r5, [r3]
3401bb44:	2d00      	cmp	r5, #0
3401bb46:	da03      	bge.n	3401bb50 <_printf_i+0xd0>
3401bb48:	232d      	movs	r3, #45	@ 0x2d
3401bb4a:	426d      	negs	r5, r5
3401bb4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401bb50:	4858      	ldr	r0, [pc, #352]	@ (3401bcb4 <_printf_i+0x234>)
3401bb52:	230a      	movs	r3, #10
3401bb54:	e011      	b.n	3401bb7a <_printf_i+0xfa>
3401bb56:	6821      	ldr	r1, [r4, #0]
3401bb58:	6833      	ldr	r3, [r6, #0]
3401bb5a:	0608      	lsls	r0, r1, #24
3401bb5c:	f853 5b04 	ldr.w	r5, [r3], #4
3401bb60:	d402      	bmi.n	3401bb68 <_printf_i+0xe8>
3401bb62:	0649      	lsls	r1, r1, #25
3401bb64:	bf48      	it	mi
3401bb66:	b2ad      	uxthmi	r5, r5
3401bb68:	2f6f      	cmp	r7, #111	@ 0x6f
3401bb6a:	6033      	str	r3, [r6, #0]
3401bb6c:	4851      	ldr	r0, [pc, #324]	@ (3401bcb4 <_printf_i+0x234>)
3401bb6e:	bf14      	ite	ne
3401bb70:	230a      	movne	r3, #10
3401bb72:	2308      	moveq	r3, #8
3401bb74:	2100      	movs	r1, #0
3401bb76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3401bb7a:	6866      	ldr	r6, [r4, #4]
3401bb7c:	2e00      	cmp	r6, #0
3401bb7e:	60a6      	str	r6, [r4, #8]
3401bb80:	db05      	blt.n	3401bb8e <_printf_i+0x10e>
3401bb82:	6821      	ldr	r1, [r4, #0]
3401bb84:	432e      	orrs	r6, r5
3401bb86:	f021 0104 	bic.w	r1, r1, #4
3401bb8a:	6021      	str	r1, [r4, #0]
3401bb8c:	d04b      	beq.n	3401bc26 <_printf_i+0x1a6>
3401bb8e:	4616      	mov	r6, r2
3401bb90:	fbb5 f1f3 	udiv	r1, r5, r3
3401bb94:	fb03 5711 	mls	r7, r3, r1, r5
3401bb98:	5dc7      	ldrb	r7, [r0, r7]
3401bb9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
3401bb9e:	462f      	mov	r7, r5
3401bba0:	460d      	mov	r5, r1
3401bba2:	42bb      	cmp	r3, r7
3401bba4:	d9f4      	bls.n	3401bb90 <_printf_i+0x110>
3401bba6:	2b08      	cmp	r3, #8
3401bba8:	d10b      	bne.n	3401bbc2 <_printf_i+0x142>
3401bbaa:	6823      	ldr	r3, [r4, #0]
3401bbac:	07df      	lsls	r7, r3, #31
3401bbae:	d508      	bpl.n	3401bbc2 <_printf_i+0x142>
3401bbb0:	6923      	ldr	r3, [r4, #16]
3401bbb2:	6861      	ldr	r1, [r4, #4]
3401bbb4:	4299      	cmp	r1, r3
3401bbb6:	bfde      	ittt	le
3401bbb8:	2330      	movle	r3, #48	@ 0x30
3401bbba:	f806 3c01 	strble.w	r3, [r6, #-1]
3401bbbe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3401bbc2:	1b92      	subs	r2, r2, r6
3401bbc4:	6122      	str	r2, [r4, #16]
3401bbc6:	464b      	mov	r3, r9
3401bbc8:	aa03      	add	r2, sp, #12
3401bbca:	4621      	mov	r1, r4
3401bbcc:	4640      	mov	r0, r8
3401bbce:	f8cd a000 	str.w	sl, [sp]
3401bbd2:	f7ff fee3 	bl	3401b99c <_printf_common>
3401bbd6:	3001      	adds	r0, #1
3401bbd8:	d14a      	bne.n	3401bc70 <_printf_i+0x1f0>
3401bbda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401bbde:	b004      	add	sp, #16
3401bbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401bbe4:	6823      	ldr	r3, [r4, #0]
3401bbe6:	f043 0320 	orr.w	r3, r3, #32
3401bbea:	6023      	str	r3, [r4, #0]
3401bbec:	2778      	movs	r7, #120	@ 0x78
3401bbee:	4832      	ldr	r0, [pc, #200]	@ (3401bcb8 <_printf_i+0x238>)
3401bbf0:	6823      	ldr	r3, [r4, #0]
3401bbf2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3401bbf6:	061f      	lsls	r7, r3, #24
3401bbf8:	6831      	ldr	r1, [r6, #0]
3401bbfa:	f851 5b04 	ldr.w	r5, [r1], #4
3401bbfe:	d402      	bmi.n	3401bc06 <_printf_i+0x186>
3401bc00:	065f      	lsls	r7, r3, #25
3401bc02:	bf48      	it	mi
3401bc04:	b2ad      	uxthmi	r5, r5
3401bc06:	6031      	str	r1, [r6, #0]
3401bc08:	07d9      	lsls	r1, r3, #31
3401bc0a:	bf44      	itt	mi
3401bc0c:	f043 0320 	orrmi.w	r3, r3, #32
3401bc10:	6023      	strmi	r3, [r4, #0]
3401bc12:	b11d      	cbz	r5, 3401bc1c <_printf_i+0x19c>
3401bc14:	2310      	movs	r3, #16
3401bc16:	e7ad      	b.n	3401bb74 <_printf_i+0xf4>
3401bc18:	4826      	ldr	r0, [pc, #152]	@ (3401bcb4 <_printf_i+0x234>)
3401bc1a:	e7e9      	b.n	3401bbf0 <_printf_i+0x170>
3401bc1c:	6823      	ldr	r3, [r4, #0]
3401bc1e:	f023 0320 	bic.w	r3, r3, #32
3401bc22:	6023      	str	r3, [r4, #0]
3401bc24:	e7f6      	b.n	3401bc14 <_printf_i+0x194>
3401bc26:	4616      	mov	r6, r2
3401bc28:	e7bd      	b.n	3401bba6 <_printf_i+0x126>
3401bc2a:	6833      	ldr	r3, [r6, #0]
3401bc2c:	6825      	ldr	r5, [r4, #0]
3401bc2e:	1d18      	adds	r0, r3, #4
3401bc30:	6961      	ldr	r1, [r4, #20]
3401bc32:	6030      	str	r0, [r6, #0]
3401bc34:	062e      	lsls	r6, r5, #24
3401bc36:	681b      	ldr	r3, [r3, #0]
3401bc38:	d501      	bpl.n	3401bc3e <_printf_i+0x1be>
3401bc3a:	6019      	str	r1, [r3, #0]
3401bc3c:	e002      	b.n	3401bc44 <_printf_i+0x1c4>
3401bc3e:	0668      	lsls	r0, r5, #25
3401bc40:	d5fb      	bpl.n	3401bc3a <_printf_i+0x1ba>
3401bc42:	8019      	strh	r1, [r3, #0]
3401bc44:	2300      	movs	r3, #0
3401bc46:	4616      	mov	r6, r2
3401bc48:	6123      	str	r3, [r4, #16]
3401bc4a:	e7bc      	b.n	3401bbc6 <_printf_i+0x146>
3401bc4c:	6833      	ldr	r3, [r6, #0]
3401bc4e:	2100      	movs	r1, #0
3401bc50:	1d1a      	adds	r2, r3, #4
3401bc52:	6032      	str	r2, [r6, #0]
3401bc54:	681e      	ldr	r6, [r3, #0]
3401bc56:	6862      	ldr	r2, [r4, #4]
3401bc58:	4630      	mov	r0, r6
3401bc5a:	f000 fd8c 	bl	3401c776 <memchr>
3401bc5e:	b108      	cbz	r0, 3401bc64 <_printf_i+0x1e4>
3401bc60:	1b80      	subs	r0, r0, r6
3401bc62:	6060      	str	r0, [r4, #4]
3401bc64:	6863      	ldr	r3, [r4, #4]
3401bc66:	6123      	str	r3, [r4, #16]
3401bc68:	2300      	movs	r3, #0
3401bc6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401bc6e:	e7aa      	b.n	3401bbc6 <_printf_i+0x146>
3401bc70:	6923      	ldr	r3, [r4, #16]
3401bc72:	4632      	mov	r2, r6
3401bc74:	4649      	mov	r1, r9
3401bc76:	4640      	mov	r0, r8
3401bc78:	47d0      	blx	sl
3401bc7a:	3001      	adds	r0, #1
3401bc7c:	d0ad      	beq.n	3401bbda <_printf_i+0x15a>
3401bc7e:	6823      	ldr	r3, [r4, #0]
3401bc80:	079b      	lsls	r3, r3, #30
3401bc82:	d413      	bmi.n	3401bcac <_printf_i+0x22c>
3401bc84:	68e0      	ldr	r0, [r4, #12]
3401bc86:	9b03      	ldr	r3, [sp, #12]
3401bc88:	4298      	cmp	r0, r3
3401bc8a:	bfb8      	it	lt
3401bc8c:	4618      	movlt	r0, r3
3401bc8e:	e7a6      	b.n	3401bbde <_printf_i+0x15e>
3401bc90:	2301      	movs	r3, #1
3401bc92:	4632      	mov	r2, r6
3401bc94:	4649      	mov	r1, r9
3401bc96:	4640      	mov	r0, r8
3401bc98:	47d0      	blx	sl
3401bc9a:	3001      	adds	r0, #1
3401bc9c:	d09d      	beq.n	3401bbda <_printf_i+0x15a>
3401bc9e:	3501      	adds	r5, #1
3401bca0:	68e3      	ldr	r3, [r4, #12]
3401bca2:	9903      	ldr	r1, [sp, #12]
3401bca4:	1a5b      	subs	r3, r3, r1
3401bca6:	42ab      	cmp	r3, r5
3401bca8:	dcf2      	bgt.n	3401bc90 <_printf_i+0x210>
3401bcaa:	e7eb      	b.n	3401bc84 <_printf_i+0x204>
3401bcac:	2500      	movs	r5, #0
3401bcae:	f104 0619 	add.w	r6, r4, #25
3401bcb2:	e7f5      	b.n	3401bca0 <_printf_i+0x220>
3401bcb4:	3401fcfc 	.word	0x3401fcfc
3401bcb8:	3401fd0d 	.word	0x3401fd0d

3401bcbc <__sflush_r>:
3401bcbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3401bcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401bcc4:	0716      	lsls	r6, r2, #28
3401bcc6:	4605      	mov	r5, r0
3401bcc8:	460c      	mov	r4, r1
3401bcca:	d454      	bmi.n	3401bd76 <__sflush_r+0xba>
3401bccc:	684b      	ldr	r3, [r1, #4]
3401bcce:	2b00      	cmp	r3, #0
3401bcd0:	dc02      	bgt.n	3401bcd8 <__sflush_r+0x1c>
3401bcd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3401bcd4:	2b00      	cmp	r3, #0
3401bcd6:	dd48      	ble.n	3401bd6a <__sflush_r+0xae>
3401bcd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3401bcda:	2e00      	cmp	r6, #0
3401bcdc:	d045      	beq.n	3401bd6a <__sflush_r+0xae>
3401bcde:	2300      	movs	r3, #0
3401bce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3401bce4:	682f      	ldr	r7, [r5, #0]
3401bce6:	6a21      	ldr	r1, [r4, #32]
3401bce8:	602b      	str	r3, [r5, #0]
3401bcea:	d030      	beq.n	3401bd4e <__sflush_r+0x92>
3401bcec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3401bcee:	89a3      	ldrh	r3, [r4, #12]
3401bcf0:	0759      	lsls	r1, r3, #29
3401bcf2:	d505      	bpl.n	3401bd00 <__sflush_r+0x44>
3401bcf4:	6863      	ldr	r3, [r4, #4]
3401bcf6:	1ad2      	subs	r2, r2, r3
3401bcf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401bcfa:	b10b      	cbz	r3, 3401bd00 <__sflush_r+0x44>
3401bcfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401bcfe:	1ad2      	subs	r2, r2, r3
3401bd00:	2300      	movs	r3, #0
3401bd02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3401bd04:	6a21      	ldr	r1, [r4, #32]
3401bd06:	4628      	mov	r0, r5
3401bd08:	47b0      	blx	r6
3401bd0a:	1c43      	adds	r3, r0, #1
3401bd0c:	89a3      	ldrh	r3, [r4, #12]
3401bd0e:	d106      	bne.n	3401bd1e <__sflush_r+0x62>
3401bd10:	6829      	ldr	r1, [r5, #0]
3401bd12:	291d      	cmp	r1, #29
3401bd14:	d82b      	bhi.n	3401bd6e <__sflush_r+0xb2>
3401bd16:	4a2a      	ldr	r2, [pc, #168]	@ (3401bdc0 <__sflush_r+0x104>)
3401bd18:	40ca      	lsrs	r2, r1
3401bd1a:	07d6      	lsls	r6, r2, #31
3401bd1c:	d527      	bpl.n	3401bd6e <__sflush_r+0xb2>
3401bd1e:	2200      	movs	r2, #0
3401bd20:	04d9      	lsls	r1, r3, #19
3401bd22:	6062      	str	r2, [r4, #4]
3401bd24:	6922      	ldr	r2, [r4, #16]
3401bd26:	6022      	str	r2, [r4, #0]
3401bd28:	d504      	bpl.n	3401bd34 <__sflush_r+0x78>
3401bd2a:	1c42      	adds	r2, r0, #1
3401bd2c:	d101      	bne.n	3401bd32 <__sflush_r+0x76>
3401bd2e:	682b      	ldr	r3, [r5, #0]
3401bd30:	b903      	cbnz	r3, 3401bd34 <__sflush_r+0x78>
3401bd32:	6560      	str	r0, [r4, #84]	@ 0x54
3401bd34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401bd36:	602f      	str	r7, [r5, #0]
3401bd38:	b1b9      	cbz	r1, 3401bd6a <__sflush_r+0xae>
3401bd3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3401bd3e:	4299      	cmp	r1, r3
3401bd40:	d002      	beq.n	3401bd48 <__sflush_r+0x8c>
3401bd42:	4628      	mov	r0, r5
3401bd44:	f001 fb26 	bl	3401d394 <_free_r>
3401bd48:	2300      	movs	r3, #0
3401bd4a:	6363      	str	r3, [r4, #52]	@ 0x34
3401bd4c:	e00d      	b.n	3401bd6a <__sflush_r+0xae>
3401bd4e:	2301      	movs	r3, #1
3401bd50:	4628      	mov	r0, r5
3401bd52:	47b0      	blx	r6
3401bd54:	4602      	mov	r2, r0
3401bd56:	1c50      	adds	r0, r2, #1
3401bd58:	d1c9      	bne.n	3401bcee <__sflush_r+0x32>
3401bd5a:	682b      	ldr	r3, [r5, #0]
3401bd5c:	2b00      	cmp	r3, #0
3401bd5e:	d0c6      	beq.n	3401bcee <__sflush_r+0x32>
3401bd60:	2b1d      	cmp	r3, #29
3401bd62:	d001      	beq.n	3401bd68 <__sflush_r+0xac>
3401bd64:	2b16      	cmp	r3, #22
3401bd66:	d11d      	bne.n	3401bda4 <__sflush_r+0xe8>
3401bd68:	602f      	str	r7, [r5, #0]
3401bd6a:	2000      	movs	r0, #0
3401bd6c:	e021      	b.n	3401bdb2 <__sflush_r+0xf6>
3401bd6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401bd72:	b21b      	sxth	r3, r3
3401bd74:	e01a      	b.n	3401bdac <__sflush_r+0xf0>
3401bd76:	690f      	ldr	r7, [r1, #16]
3401bd78:	2f00      	cmp	r7, #0
3401bd7a:	d0f6      	beq.n	3401bd6a <__sflush_r+0xae>
3401bd7c:	0793      	lsls	r3, r2, #30
3401bd7e:	680e      	ldr	r6, [r1, #0]
3401bd80:	600f      	str	r7, [r1, #0]
3401bd82:	bf0c      	ite	eq
3401bd84:	694b      	ldreq	r3, [r1, #20]
3401bd86:	2300      	movne	r3, #0
3401bd88:	eba6 0807 	sub.w	r8, r6, r7
3401bd8c:	608b      	str	r3, [r1, #8]
3401bd8e:	f1b8 0f00 	cmp.w	r8, #0
3401bd92:	ddea      	ble.n	3401bd6a <__sflush_r+0xae>
3401bd94:	4643      	mov	r3, r8
3401bd96:	463a      	mov	r2, r7
3401bd98:	6a21      	ldr	r1, [r4, #32]
3401bd9a:	4628      	mov	r0, r5
3401bd9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3401bd9e:	47b0      	blx	r6
3401bda0:	2800      	cmp	r0, #0
3401bda2:	dc08      	bgt.n	3401bdb6 <__sflush_r+0xfa>
3401bda4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401bda8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401bdac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401bdb0:	81a3      	strh	r3, [r4, #12]
3401bdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401bdb6:	4407      	add	r7, r0
3401bdb8:	eba8 0800 	sub.w	r8, r8, r0
3401bdbc:	e7e7      	b.n	3401bd8e <__sflush_r+0xd2>
3401bdbe:	bf00      	nop
3401bdc0:	20400001 	.word	0x20400001

3401bdc4 <_fflush_r>:
3401bdc4:	b538      	push	{r3, r4, r5, lr}
3401bdc6:	690b      	ldr	r3, [r1, #16]
3401bdc8:	4605      	mov	r5, r0
3401bdca:	460c      	mov	r4, r1
3401bdcc:	b913      	cbnz	r3, 3401bdd4 <_fflush_r+0x10>
3401bdce:	2500      	movs	r5, #0
3401bdd0:	4628      	mov	r0, r5
3401bdd2:	bd38      	pop	{r3, r4, r5, pc}
3401bdd4:	b118      	cbz	r0, 3401bdde <_fflush_r+0x1a>
3401bdd6:	6a03      	ldr	r3, [r0, #32]
3401bdd8:	b90b      	cbnz	r3, 3401bdde <_fflush_r+0x1a>
3401bdda:	f000 f8bb 	bl	3401bf54 <__sinit>
3401bdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401bde2:	2b00      	cmp	r3, #0
3401bde4:	d0f3      	beq.n	3401bdce <_fflush_r+0xa>
3401bde6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3401bde8:	07d0      	lsls	r0, r2, #31
3401bdea:	d404      	bmi.n	3401bdf6 <_fflush_r+0x32>
3401bdec:	0599      	lsls	r1, r3, #22
3401bdee:	d402      	bmi.n	3401bdf6 <_fflush_r+0x32>
3401bdf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401bdf2:	f000 fcbe 	bl	3401c772 <__retarget_lock_acquire_recursive>
3401bdf6:	4628      	mov	r0, r5
3401bdf8:	4621      	mov	r1, r4
3401bdfa:	f7ff ff5f 	bl	3401bcbc <__sflush_r>
3401bdfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401be00:	4605      	mov	r5, r0
3401be02:	07da      	lsls	r2, r3, #31
3401be04:	d4e4      	bmi.n	3401bdd0 <_fflush_r+0xc>
3401be06:	89a3      	ldrh	r3, [r4, #12]
3401be08:	059b      	lsls	r3, r3, #22
3401be0a:	d4e1      	bmi.n	3401bdd0 <_fflush_r+0xc>
3401be0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401be0e:	f000 fcb1 	bl	3401c774 <__retarget_lock_release_recursive>
3401be12:	e7dd      	b.n	3401bdd0 <_fflush_r+0xc>

3401be14 <fflush>:
3401be14:	4601      	mov	r1, r0
3401be16:	b920      	cbnz	r0, 3401be22 <fflush+0xe>
3401be18:	4a04      	ldr	r2, [pc, #16]	@ (3401be2c <fflush+0x18>)
3401be1a:	4905      	ldr	r1, [pc, #20]	@ (3401be30 <fflush+0x1c>)
3401be1c:	4805      	ldr	r0, [pc, #20]	@ (3401be34 <fflush+0x20>)
3401be1e:	f000 b8c3 	b.w	3401bfa8 <_fwalk_sglue>
3401be22:	4b05      	ldr	r3, [pc, #20]	@ (3401be38 <fflush+0x24>)
3401be24:	6818      	ldr	r0, [r3, #0]
3401be26:	f7ff bfcd 	b.w	3401bdc4 <_fflush_r>
3401be2a:	bf00      	nop
3401be2c:	34020710 	.word	0x34020710
3401be30:	3401bdc5 	.word	0x3401bdc5
3401be34:	34020720 	.word	0x34020720
3401be38:	3402071c 	.word	0x3402071c

3401be3c <std>:
3401be3c:	2300      	movs	r3, #0
3401be3e:	b510      	push	{r4, lr}
3401be40:	4604      	mov	r4, r0
3401be42:	6083      	str	r3, [r0, #8]
3401be44:	8181      	strh	r1, [r0, #12]
3401be46:	4619      	mov	r1, r3
3401be48:	6643      	str	r3, [r0, #100]	@ 0x64
3401be4a:	81c2      	strh	r2, [r0, #14]
3401be4c:	2208      	movs	r2, #8
3401be4e:	6183      	str	r3, [r0, #24]
3401be50:	e9c0 3300 	strd	r3, r3, [r0]
3401be54:	e9c0 3304 	strd	r3, r3, [r0, #16]
3401be58:	305c      	adds	r0, #92	@ 0x5c
3401be5a:	f000 fa0b 	bl	3401c274 <memset>
3401be5e:	4b0d      	ldr	r3, [pc, #52]	@ (3401be94 <std+0x58>)
3401be60:	6224      	str	r4, [r4, #32]
3401be62:	6263      	str	r3, [r4, #36]	@ 0x24
3401be64:	4b0c      	ldr	r3, [pc, #48]	@ (3401be98 <std+0x5c>)
3401be66:	62a3      	str	r3, [r4, #40]	@ 0x28
3401be68:	4b0c      	ldr	r3, [pc, #48]	@ (3401be9c <std+0x60>)
3401be6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
3401be6c:	4b0c      	ldr	r3, [pc, #48]	@ (3401bea0 <std+0x64>)
3401be6e:	6323      	str	r3, [r4, #48]	@ 0x30
3401be70:	4b0c      	ldr	r3, [pc, #48]	@ (3401bea4 <std+0x68>)
3401be72:	429c      	cmp	r4, r3
3401be74:	d006      	beq.n	3401be84 <std+0x48>
3401be76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3401be7a:	4294      	cmp	r4, r2
3401be7c:	d002      	beq.n	3401be84 <std+0x48>
3401be7e:	33d0      	adds	r3, #208	@ 0xd0
3401be80:	429c      	cmp	r4, r3
3401be82:	d105      	bne.n	3401be90 <std+0x54>
3401be84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3401be88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401be8c:	f000 bc70 	b.w	3401c770 <__retarget_lock_init_recursive>
3401be90:	bd10      	pop	{r4, pc}
3401be92:	bf00      	nop
3401be94:	3401c0c5 	.word	0x3401c0c5
3401be98:	3401c0e7 	.word	0x3401c0e7
3401be9c:	3401c11f 	.word	0x3401c11f
3401bea0:	3401c143 	.word	0x3401c143
3401bea4:	34020e68 	.word	0x34020e68

3401bea8 <stdio_exit_handler>:
3401bea8:	4a02      	ldr	r2, [pc, #8]	@ (3401beb4 <stdio_exit_handler+0xc>)
3401beaa:	4903      	ldr	r1, [pc, #12]	@ (3401beb8 <stdio_exit_handler+0x10>)
3401beac:	4803      	ldr	r0, [pc, #12]	@ (3401bebc <stdio_exit_handler+0x14>)
3401beae:	f000 b87b 	b.w	3401bfa8 <_fwalk_sglue>
3401beb2:	bf00      	nop
3401beb4:	34020710 	.word	0x34020710
3401beb8:	3401bdc5 	.word	0x3401bdc5
3401bebc:	34020720 	.word	0x34020720

3401bec0 <cleanup_stdio>:
3401bec0:	6841      	ldr	r1, [r0, #4]
3401bec2:	4b0c      	ldr	r3, [pc, #48]	@ (3401bef4 <cleanup_stdio+0x34>)
3401bec4:	4299      	cmp	r1, r3
3401bec6:	b510      	push	{r4, lr}
3401bec8:	4604      	mov	r4, r0
3401beca:	d001      	beq.n	3401bed0 <cleanup_stdio+0x10>
3401becc:	f7ff ff7a 	bl	3401bdc4 <_fflush_r>
3401bed0:	68a1      	ldr	r1, [r4, #8]
3401bed2:	4b09      	ldr	r3, [pc, #36]	@ (3401bef8 <cleanup_stdio+0x38>)
3401bed4:	4299      	cmp	r1, r3
3401bed6:	d002      	beq.n	3401bede <cleanup_stdio+0x1e>
3401bed8:	4620      	mov	r0, r4
3401beda:	f7ff ff73 	bl	3401bdc4 <_fflush_r>
3401bede:	68e1      	ldr	r1, [r4, #12]
3401bee0:	4b06      	ldr	r3, [pc, #24]	@ (3401befc <cleanup_stdio+0x3c>)
3401bee2:	4299      	cmp	r1, r3
3401bee4:	d004      	beq.n	3401bef0 <cleanup_stdio+0x30>
3401bee6:	4620      	mov	r0, r4
3401bee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401beec:	f7ff bf6a 	b.w	3401bdc4 <_fflush_r>
3401bef0:	bd10      	pop	{r4, pc}
3401bef2:	bf00      	nop
3401bef4:	34020e68 	.word	0x34020e68
3401bef8:	34020ed0 	.word	0x34020ed0
3401befc:	34020f38 	.word	0x34020f38

3401bf00 <global_stdio_init.part.0>:
3401bf00:	b510      	push	{r4, lr}
3401bf02:	4b0b      	ldr	r3, [pc, #44]	@ (3401bf30 <global_stdio_init.part.0+0x30>)
3401bf04:	2104      	movs	r1, #4
3401bf06:	4c0b      	ldr	r4, [pc, #44]	@ (3401bf34 <global_stdio_init.part.0+0x34>)
3401bf08:	4a0b      	ldr	r2, [pc, #44]	@ (3401bf38 <global_stdio_init.part.0+0x38>)
3401bf0a:	4620      	mov	r0, r4
3401bf0c:	601a      	str	r2, [r3, #0]
3401bf0e:	2200      	movs	r2, #0
3401bf10:	f7ff ff94 	bl	3401be3c <std>
3401bf14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3401bf18:	2201      	movs	r2, #1
3401bf1a:	2109      	movs	r1, #9
3401bf1c:	f7ff ff8e 	bl	3401be3c <std>
3401bf20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3401bf24:	2202      	movs	r2, #2
3401bf26:	2112      	movs	r1, #18
3401bf28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401bf2c:	f7ff bf86 	b.w	3401be3c <std>
3401bf30:	34020fa0 	.word	0x34020fa0
3401bf34:	34020e68 	.word	0x34020e68
3401bf38:	3401bea9 	.word	0x3401bea9

3401bf3c <__sfp_lock_acquire>:
3401bf3c:	4801      	ldr	r0, [pc, #4]	@ (3401bf44 <__sfp_lock_acquire+0x8>)
3401bf3e:	f000 bc18 	b.w	3401c772 <__retarget_lock_acquire_recursive>
3401bf42:	bf00      	nop
3401bf44:	34020fa9 	.word	0x34020fa9

3401bf48 <__sfp_lock_release>:
3401bf48:	4801      	ldr	r0, [pc, #4]	@ (3401bf50 <__sfp_lock_release+0x8>)
3401bf4a:	f000 bc13 	b.w	3401c774 <__retarget_lock_release_recursive>
3401bf4e:	bf00      	nop
3401bf50:	34020fa9 	.word	0x34020fa9

3401bf54 <__sinit>:
3401bf54:	b510      	push	{r4, lr}
3401bf56:	4604      	mov	r4, r0
3401bf58:	f7ff fff0 	bl	3401bf3c <__sfp_lock_acquire>
3401bf5c:	6a23      	ldr	r3, [r4, #32]
3401bf5e:	b11b      	cbz	r3, 3401bf68 <__sinit+0x14>
3401bf60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401bf64:	f7ff bff0 	b.w	3401bf48 <__sfp_lock_release>
3401bf68:	4b04      	ldr	r3, [pc, #16]	@ (3401bf7c <__sinit+0x28>)
3401bf6a:	6223      	str	r3, [r4, #32]
3401bf6c:	4b04      	ldr	r3, [pc, #16]	@ (3401bf80 <__sinit+0x2c>)
3401bf6e:	681b      	ldr	r3, [r3, #0]
3401bf70:	2b00      	cmp	r3, #0
3401bf72:	d1f5      	bne.n	3401bf60 <__sinit+0xc>
3401bf74:	f7ff ffc4 	bl	3401bf00 <global_stdio_init.part.0>
3401bf78:	e7f2      	b.n	3401bf60 <__sinit+0xc>
3401bf7a:	bf00      	nop
3401bf7c:	3401bec1 	.word	0x3401bec1
3401bf80:	34020fa0 	.word	0x34020fa0

3401bf84 <fiprintf>:
3401bf84:	b40e      	push	{r1, r2, r3}
3401bf86:	b503      	push	{r0, r1, lr}
3401bf88:	ab03      	add	r3, sp, #12
3401bf8a:	4601      	mov	r1, r0
3401bf8c:	4805      	ldr	r0, [pc, #20]	@ (3401bfa4 <fiprintf+0x20>)
3401bf8e:	f853 2b04 	ldr.w	r2, [r3], #4
3401bf92:	6800      	ldr	r0, [r0, #0]
3401bf94:	9301      	str	r3, [sp, #4]
3401bf96:	f001 fdf3 	bl	3401db80 <_vfiprintf_r>
3401bf9a:	b002      	add	sp, #8
3401bf9c:	f85d eb04 	ldr.w	lr, [sp], #4
3401bfa0:	b003      	add	sp, #12
3401bfa2:	4770      	bx	lr
3401bfa4:	3402071c 	.word	0x3402071c

3401bfa8 <_fwalk_sglue>:
3401bfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401bfac:	4607      	mov	r7, r0
3401bfae:	4688      	mov	r8, r1
3401bfb0:	4614      	mov	r4, r2
3401bfb2:	2600      	movs	r6, #0
3401bfb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3401bfb8:	f1b9 0901 	subs.w	r9, r9, #1
3401bfbc:	d505      	bpl.n	3401bfca <_fwalk_sglue+0x22>
3401bfbe:	6824      	ldr	r4, [r4, #0]
3401bfc0:	2c00      	cmp	r4, #0
3401bfc2:	d1f7      	bne.n	3401bfb4 <_fwalk_sglue+0xc>
3401bfc4:	4630      	mov	r0, r6
3401bfc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401bfca:	89ab      	ldrh	r3, [r5, #12]
3401bfcc:	2b01      	cmp	r3, #1
3401bfce:	d907      	bls.n	3401bfe0 <_fwalk_sglue+0x38>
3401bfd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3401bfd4:	3301      	adds	r3, #1
3401bfd6:	d003      	beq.n	3401bfe0 <_fwalk_sglue+0x38>
3401bfd8:	4629      	mov	r1, r5
3401bfda:	4638      	mov	r0, r7
3401bfdc:	47c0      	blx	r8
3401bfde:	4306      	orrs	r6, r0
3401bfe0:	3568      	adds	r5, #104	@ 0x68
3401bfe2:	e7e9      	b.n	3401bfb8 <_fwalk_sglue+0x10>

3401bfe4 <iprintf>:
3401bfe4:	b40f      	push	{r0, r1, r2, r3}
3401bfe6:	b507      	push	{r0, r1, r2, lr}
3401bfe8:	4906      	ldr	r1, [pc, #24]	@ (3401c004 <iprintf+0x20>)
3401bfea:	ab04      	add	r3, sp, #16
3401bfec:	6808      	ldr	r0, [r1, #0]
3401bfee:	f853 2b04 	ldr.w	r2, [r3], #4
3401bff2:	6881      	ldr	r1, [r0, #8]
3401bff4:	9301      	str	r3, [sp, #4]
3401bff6:	f001 fdc3 	bl	3401db80 <_vfiprintf_r>
3401bffa:	b003      	add	sp, #12
3401bffc:	f85d eb04 	ldr.w	lr, [sp], #4
3401c000:	b004      	add	sp, #16
3401c002:	4770      	bx	lr
3401c004:	3402071c 	.word	0x3402071c

3401c008 <_puts_r>:
3401c008:	6a03      	ldr	r3, [r0, #32]
3401c00a:	b570      	push	{r4, r5, r6, lr}
3401c00c:	4605      	mov	r5, r0
3401c00e:	460e      	mov	r6, r1
3401c010:	6884      	ldr	r4, [r0, #8]
3401c012:	b90b      	cbnz	r3, 3401c018 <_puts_r+0x10>
3401c014:	f7ff ff9e 	bl	3401bf54 <__sinit>
3401c018:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401c01a:	07db      	lsls	r3, r3, #31
3401c01c:	d405      	bmi.n	3401c02a <_puts_r+0x22>
3401c01e:	89a3      	ldrh	r3, [r4, #12]
3401c020:	0598      	lsls	r0, r3, #22
3401c022:	d402      	bmi.n	3401c02a <_puts_r+0x22>
3401c024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401c026:	f000 fba4 	bl	3401c772 <__retarget_lock_acquire_recursive>
3401c02a:	89a3      	ldrh	r3, [r4, #12]
3401c02c:	0719      	lsls	r1, r3, #28
3401c02e:	d502      	bpl.n	3401c036 <_puts_r+0x2e>
3401c030:	6923      	ldr	r3, [r4, #16]
3401c032:	2b00      	cmp	r3, #0
3401c034:	d135      	bne.n	3401c0a2 <_puts_r+0x9a>
3401c036:	4621      	mov	r1, r4
3401c038:	4628      	mov	r0, r5
3401c03a:	f000 f8c5 	bl	3401c1c8 <__swsetup_r>
3401c03e:	b380      	cbz	r0, 3401c0a2 <_puts_r+0x9a>
3401c040:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3401c044:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401c046:	07da      	lsls	r2, r3, #31
3401c048:	d405      	bmi.n	3401c056 <_puts_r+0x4e>
3401c04a:	89a3      	ldrh	r3, [r4, #12]
3401c04c:	059b      	lsls	r3, r3, #22
3401c04e:	d402      	bmi.n	3401c056 <_puts_r+0x4e>
3401c050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401c052:	f000 fb8f 	bl	3401c774 <__retarget_lock_release_recursive>
3401c056:	4628      	mov	r0, r5
3401c058:	bd70      	pop	{r4, r5, r6, pc}
3401c05a:	2b00      	cmp	r3, #0
3401c05c:	da04      	bge.n	3401c068 <_puts_r+0x60>
3401c05e:	69a2      	ldr	r2, [r4, #24]
3401c060:	429a      	cmp	r2, r3
3401c062:	dc17      	bgt.n	3401c094 <_puts_r+0x8c>
3401c064:	290a      	cmp	r1, #10
3401c066:	d015      	beq.n	3401c094 <_puts_r+0x8c>
3401c068:	6823      	ldr	r3, [r4, #0]
3401c06a:	1c5a      	adds	r2, r3, #1
3401c06c:	6022      	str	r2, [r4, #0]
3401c06e:	7019      	strb	r1, [r3, #0]
3401c070:	68a3      	ldr	r3, [r4, #8]
3401c072:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3401c076:	3b01      	subs	r3, #1
3401c078:	60a3      	str	r3, [r4, #8]
3401c07a:	2900      	cmp	r1, #0
3401c07c:	d1ed      	bne.n	3401c05a <_puts_r+0x52>
3401c07e:	2b00      	cmp	r3, #0
3401c080:	da11      	bge.n	3401c0a6 <_puts_r+0x9e>
3401c082:	4622      	mov	r2, r4
3401c084:	210a      	movs	r1, #10
3401c086:	4628      	mov	r0, r5
3401c088:	f000 f85f 	bl	3401c14a <__swbuf_r>
3401c08c:	3001      	adds	r0, #1
3401c08e:	d0d7      	beq.n	3401c040 <_puts_r+0x38>
3401c090:	250a      	movs	r5, #10
3401c092:	e7d7      	b.n	3401c044 <_puts_r+0x3c>
3401c094:	4622      	mov	r2, r4
3401c096:	4628      	mov	r0, r5
3401c098:	f000 f857 	bl	3401c14a <__swbuf_r>
3401c09c:	3001      	adds	r0, #1
3401c09e:	d1e7      	bne.n	3401c070 <_puts_r+0x68>
3401c0a0:	e7ce      	b.n	3401c040 <_puts_r+0x38>
3401c0a2:	3e01      	subs	r6, #1
3401c0a4:	e7e4      	b.n	3401c070 <_puts_r+0x68>
3401c0a6:	6823      	ldr	r3, [r4, #0]
3401c0a8:	1c5a      	adds	r2, r3, #1
3401c0aa:	6022      	str	r2, [r4, #0]
3401c0ac:	220a      	movs	r2, #10
3401c0ae:	701a      	strb	r2, [r3, #0]
3401c0b0:	e7ee      	b.n	3401c090 <_puts_r+0x88>
	...

3401c0b4 <puts>:
3401c0b4:	4b02      	ldr	r3, [pc, #8]	@ (3401c0c0 <puts+0xc>)
3401c0b6:	4601      	mov	r1, r0
3401c0b8:	6818      	ldr	r0, [r3, #0]
3401c0ba:	f7ff bfa5 	b.w	3401c008 <_puts_r>
3401c0be:	bf00      	nop
3401c0c0:	3402071c 	.word	0x3402071c

3401c0c4 <__sread>:
3401c0c4:	b510      	push	{r4, lr}
3401c0c6:	460c      	mov	r4, r1
3401c0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401c0cc:	f000 faf2 	bl	3401c6b4 <_read_r>
3401c0d0:	2800      	cmp	r0, #0
3401c0d2:	bfab      	itete	ge
3401c0d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3401c0d6:	89a3      	ldrhlt	r3, [r4, #12]
3401c0d8:	181b      	addge	r3, r3, r0
3401c0da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3401c0de:	bfac      	ite	ge
3401c0e0:	6563      	strge	r3, [r4, #84]	@ 0x54
3401c0e2:	81a3      	strhlt	r3, [r4, #12]
3401c0e4:	bd10      	pop	{r4, pc}

3401c0e6 <__swrite>:
3401c0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401c0ea:	461f      	mov	r7, r3
3401c0ec:	898b      	ldrh	r3, [r1, #12]
3401c0ee:	4605      	mov	r5, r0
3401c0f0:	460c      	mov	r4, r1
3401c0f2:	05db      	lsls	r3, r3, #23
3401c0f4:	4616      	mov	r6, r2
3401c0f6:	d505      	bpl.n	3401c104 <__swrite+0x1e>
3401c0f8:	2302      	movs	r3, #2
3401c0fa:	2200      	movs	r2, #0
3401c0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401c100:	f000 fac6 	bl	3401c690 <_lseek_r>
3401c104:	89a3      	ldrh	r3, [r4, #12]
3401c106:	4632      	mov	r2, r6
3401c108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401c10c:	4628      	mov	r0, r5
3401c10e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3401c112:	81a3      	strh	r3, [r4, #12]
3401c114:	463b      	mov	r3, r7
3401c116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3401c11a:	f000 baed 	b.w	3401c6f8 <_write_r>

3401c11e <__sseek>:
3401c11e:	b510      	push	{r4, lr}
3401c120:	460c      	mov	r4, r1
3401c122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401c126:	f000 fab3 	bl	3401c690 <_lseek_r>
3401c12a:	1c43      	adds	r3, r0, #1
3401c12c:	89a3      	ldrh	r3, [r4, #12]
3401c12e:	bf15      	itete	ne
3401c130:	6560      	strne	r0, [r4, #84]	@ 0x54
3401c132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3401c136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3401c13a:	81a3      	strheq	r3, [r4, #12]
3401c13c:	bf18      	it	ne
3401c13e:	81a3      	strhne	r3, [r4, #12]
3401c140:	bd10      	pop	{r4, pc}

3401c142 <__sclose>:
3401c142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401c146:	f000 ba93 	b.w	3401c670 <_close_r>

3401c14a <__swbuf_r>:
3401c14a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401c14c:	460e      	mov	r6, r1
3401c14e:	4614      	mov	r4, r2
3401c150:	4605      	mov	r5, r0
3401c152:	b118      	cbz	r0, 3401c15c <__swbuf_r+0x12>
3401c154:	6a03      	ldr	r3, [r0, #32]
3401c156:	b90b      	cbnz	r3, 3401c15c <__swbuf_r+0x12>
3401c158:	f7ff fefc 	bl	3401bf54 <__sinit>
3401c15c:	69a3      	ldr	r3, [r4, #24]
3401c15e:	60a3      	str	r3, [r4, #8]
3401c160:	89a3      	ldrh	r3, [r4, #12]
3401c162:	071a      	lsls	r2, r3, #28
3401c164:	d501      	bpl.n	3401c16a <__swbuf_r+0x20>
3401c166:	6923      	ldr	r3, [r4, #16]
3401c168:	b943      	cbnz	r3, 3401c17c <__swbuf_r+0x32>
3401c16a:	4621      	mov	r1, r4
3401c16c:	4628      	mov	r0, r5
3401c16e:	f000 f82b 	bl	3401c1c8 <__swsetup_r>
3401c172:	b118      	cbz	r0, 3401c17c <__swbuf_r+0x32>
3401c174:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3401c178:	4638      	mov	r0, r7
3401c17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3401c17c:	6823      	ldr	r3, [r4, #0]
3401c17e:	b2f6      	uxtb	r6, r6
3401c180:	6922      	ldr	r2, [r4, #16]
3401c182:	4637      	mov	r7, r6
3401c184:	1a98      	subs	r0, r3, r2
3401c186:	6963      	ldr	r3, [r4, #20]
3401c188:	4283      	cmp	r3, r0
3401c18a:	dc05      	bgt.n	3401c198 <__swbuf_r+0x4e>
3401c18c:	4621      	mov	r1, r4
3401c18e:	4628      	mov	r0, r5
3401c190:	f7ff fe18 	bl	3401bdc4 <_fflush_r>
3401c194:	2800      	cmp	r0, #0
3401c196:	d1ed      	bne.n	3401c174 <__swbuf_r+0x2a>
3401c198:	68a3      	ldr	r3, [r4, #8]
3401c19a:	3b01      	subs	r3, #1
3401c19c:	60a3      	str	r3, [r4, #8]
3401c19e:	6823      	ldr	r3, [r4, #0]
3401c1a0:	1c5a      	adds	r2, r3, #1
3401c1a2:	6022      	str	r2, [r4, #0]
3401c1a4:	701e      	strb	r6, [r3, #0]
3401c1a6:	1c43      	adds	r3, r0, #1
3401c1a8:	6962      	ldr	r2, [r4, #20]
3401c1aa:	429a      	cmp	r2, r3
3401c1ac:	d004      	beq.n	3401c1b8 <__swbuf_r+0x6e>
3401c1ae:	89a3      	ldrh	r3, [r4, #12]
3401c1b0:	07db      	lsls	r3, r3, #31
3401c1b2:	d5e1      	bpl.n	3401c178 <__swbuf_r+0x2e>
3401c1b4:	2e0a      	cmp	r6, #10
3401c1b6:	d1df      	bne.n	3401c178 <__swbuf_r+0x2e>
3401c1b8:	4621      	mov	r1, r4
3401c1ba:	4628      	mov	r0, r5
3401c1bc:	f7ff fe02 	bl	3401bdc4 <_fflush_r>
3401c1c0:	2800      	cmp	r0, #0
3401c1c2:	d0d9      	beq.n	3401c178 <__swbuf_r+0x2e>
3401c1c4:	e7d6      	b.n	3401c174 <__swbuf_r+0x2a>
	...

3401c1c8 <__swsetup_r>:
3401c1c8:	b538      	push	{r3, r4, r5, lr}
3401c1ca:	4b29      	ldr	r3, [pc, #164]	@ (3401c270 <__swsetup_r+0xa8>)
3401c1cc:	4605      	mov	r5, r0
3401c1ce:	460c      	mov	r4, r1
3401c1d0:	6818      	ldr	r0, [r3, #0]
3401c1d2:	b118      	cbz	r0, 3401c1dc <__swsetup_r+0x14>
3401c1d4:	6a03      	ldr	r3, [r0, #32]
3401c1d6:	b90b      	cbnz	r3, 3401c1dc <__swsetup_r+0x14>
3401c1d8:	f7ff febc 	bl	3401bf54 <__sinit>
3401c1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401c1e0:	0719      	lsls	r1, r3, #28
3401c1e2:	d422      	bmi.n	3401c22a <__swsetup_r+0x62>
3401c1e4:	06da      	lsls	r2, r3, #27
3401c1e6:	d407      	bmi.n	3401c1f8 <__swsetup_r+0x30>
3401c1e8:	2209      	movs	r2, #9
3401c1ea:	602a      	str	r2, [r5, #0]
3401c1ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401c1f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401c1f4:	81a3      	strh	r3, [r4, #12]
3401c1f6:	e033      	b.n	3401c260 <__swsetup_r+0x98>
3401c1f8:	0758      	lsls	r0, r3, #29
3401c1fa:	d512      	bpl.n	3401c222 <__swsetup_r+0x5a>
3401c1fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401c1fe:	b141      	cbz	r1, 3401c212 <__swsetup_r+0x4a>
3401c200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3401c204:	4299      	cmp	r1, r3
3401c206:	d002      	beq.n	3401c20e <__swsetup_r+0x46>
3401c208:	4628      	mov	r0, r5
3401c20a:	f001 f8c3 	bl	3401d394 <_free_r>
3401c20e:	2300      	movs	r3, #0
3401c210:	6363      	str	r3, [r4, #52]	@ 0x34
3401c212:	89a3      	ldrh	r3, [r4, #12]
3401c214:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3401c218:	81a3      	strh	r3, [r4, #12]
3401c21a:	2300      	movs	r3, #0
3401c21c:	6063      	str	r3, [r4, #4]
3401c21e:	6923      	ldr	r3, [r4, #16]
3401c220:	6023      	str	r3, [r4, #0]
3401c222:	89a3      	ldrh	r3, [r4, #12]
3401c224:	f043 0308 	orr.w	r3, r3, #8
3401c228:	81a3      	strh	r3, [r4, #12]
3401c22a:	6923      	ldr	r3, [r4, #16]
3401c22c:	b94b      	cbnz	r3, 3401c242 <__swsetup_r+0x7a>
3401c22e:	89a3      	ldrh	r3, [r4, #12]
3401c230:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3401c234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401c238:	d003      	beq.n	3401c242 <__swsetup_r+0x7a>
3401c23a:	4621      	mov	r1, r4
3401c23c:	4628      	mov	r0, r5
3401c23e:	f001 fddc 	bl	3401ddfa <__smakebuf_r>
3401c242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401c246:	f013 0201 	ands.w	r2, r3, #1
3401c24a:	d00a      	beq.n	3401c262 <__swsetup_r+0x9a>
3401c24c:	2200      	movs	r2, #0
3401c24e:	60a2      	str	r2, [r4, #8]
3401c250:	6962      	ldr	r2, [r4, #20]
3401c252:	4252      	negs	r2, r2
3401c254:	61a2      	str	r2, [r4, #24]
3401c256:	6922      	ldr	r2, [r4, #16]
3401c258:	b942      	cbnz	r2, 3401c26c <__swsetup_r+0xa4>
3401c25a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3401c25e:	d1c5      	bne.n	3401c1ec <__swsetup_r+0x24>
3401c260:	bd38      	pop	{r3, r4, r5, pc}
3401c262:	0799      	lsls	r1, r3, #30
3401c264:	bf58      	it	pl
3401c266:	6962      	ldrpl	r2, [r4, #20]
3401c268:	60a2      	str	r2, [r4, #8]
3401c26a:	e7f4      	b.n	3401c256 <__swsetup_r+0x8e>
3401c26c:	2000      	movs	r0, #0
3401c26e:	e7f7      	b.n	3401c260 <__swsetup_r+0x98>
3401c270:	3402071c 	.word	0x3402071c

3401c274 <memset>:
3401c274:	4402      	add	r2, r0
3401c276:	4603      	mov	r3, r0
3401c278:	4293      	cmp	r3, r2
3401c27a:	d100      	bne.n	3401c27e <memset+0xa>
3401c27c:	4770      	bx	lr
3401c27e:	f803 1b01 	strb.w	r1, [r3], #1
3401c282:	e7f9      	b.n	3401c278 <memset+0x4>

3401c284 <_strerror_r>:
3401c284:	b510      	push	{r4, lr}
3401c286:	4604      	mov	r4, r0
3401c288:	4608      	mov	r0, r1
3401c28a:	4611      	mov	r1, r2
3401c28c:	461a      	mov	r2, r3
3401c28e:	288e      	cmp	r0, #142	@ 0x8e
3401c290:	f200 8130 	bhi.w	3401c4f4 <_strerror_r+0x270>
3401c294:	e8df f010 	tbh	[pc, r0, lsl #1]
3401c298:	0138008f 	.word	0x0138008f
3401c29c:	00940092 	.word	0x00940092
3401c2a0:	00980096 	.word	0x00980096
3401c2a4:	009c009a 	.word	0x009c009a
3401c2a8:	00a2009e 	.word	0x00a2009e
3401c2ac:	00a800a4 	.word	0x00a800a4
3401c2b0:	00ac00aa 	.word	0x00ac00aa
3401c2b4:	012e00ae 	.word	0x012e00ae
3401c2b8:	00b200b0 	.word	0x00b200b0
3401c2bc:	00b600b4 	.word	0x00b600b4
3401c2c0:	00be00b8 	.word	0x00be00b8
3401c2c4:	00c600c0 	.word	0x00c600c0
3401c2c8:	00ca00c8 	.word	0x00ca00c8
3401c2cc:	00ce00cc 	.word	0x00ce00cc
3401c2d0:	00d600d2 	.word	0x00d600d2
3401c2d4:	00da00d8 	.word	0x00da00d8
3401c2d8:	00de00dc 	.word	0x00de00dc
3401c2dc:	00e200e0 	.word	0x00e200e0
3401c2e0:	012e00e4 	.word	0x012e00e4
3401c2e4:	012e012e 	.word	0x012e012e
3401c2e8:	012e012e 	.word	0x012e012e
3401c2ec:	012e012e 	.word	0x012e012e
3401c2f0:	00e8012e 	.word	0x00e8012e
3401c2f4:	012e00ec 	.word	0x012e00ec
3401c2f8:	012e012e 	.word	0x012e012e
3401c2fc:	012e012e 	.word	0x012e012e
3401c300:	012e012e 	.word	0x012e012e
3401c304:	012e012e 	.word	0x012e012e
3401c308:	012e012e 	.word	0x012e012e
3401c30c:	012e012e 	.word	0x012e012e
3401c310:	010800ee 	.word	0x010800ee
3401c314:	00f200f0 	.word	0x00f200f0
3401c318:	012e012e 	.word	0x012e012e
3401c31c:	00f4012e 	.word	0x00f4012e
3401c320:	012e012e 	.word	0x012e012e
3401c324:	00f6012e 	.word	0x00f6012e
3401c328:	012e012e 	.word	0x012e012e
3401c32c:	012e00fa 	.word	0x012e00fa
3401c330:	00fc012e 	.word	0x00fc012e
3401c334:	012e012e 	.word	0x012e012e
3401c338:	012e012e 	.word	0x012e012e
3401c33c:	012e012e 	.word	0x012e012e
3401c340:	012e012e 	.word	0x012e012e
3401c344:	012e012e 	.word	0x012e012e
3401c348:	012e00fe 	.word	0x012e00fe
3401c34c:	01020100 	.word	0x01020100
3401c350:	012e0104 	.word	0x012e0104
3401c354:	0126012e 	.word	0x0126012e
3401c358:	012e012e 	.word	0x012e012e
3401c35c:	012e012e 	.word	0x012e012e
3401c360:	012e012e 	.word	0x012e012e
3401c364:	012e012e 	.word	0x012e012e
3401c368:	01060114 	.word	0x01060114
3401c36c:	010c010a 	.word	0x010c010a
3401c370:	0110010e 	.word	0x0110010e
3401c374:	0112012e 	.word	0x0112012e
3401c378:	011a0116 	.word	0x011a0116
3401c37c:	00c200ea 	.word	0x00c200ea
3401c380:	00ba012c 	.word	0x00ba012c
3401c384:	00bc00d0 	.word	0x00bc00d0
3401c388:	00a600a0 	.word	0x00a600a0
3401c38c:	00f8012a 	.word	0x00f8012a
3401c390:	0118012e 	.word	0x0118012e
3401c394:	011e00c4 	.word	0x011e00c4
3401c398:	012e011c 	.word	0x012e011c
3401c39c:	012e012e 	.word	0x012e012e
3401c3a0:	012e012e 	.word	0x012e012e
3401c3a4:	012e00d4 	.word	0x012e00d4
3401c3a8:	012e012e 	.word	0x012e012e
3401c3ac:	012800e6 	.word	0x012800e6
3401c3b0:	01220120 	.word	0x01220120
3401c3b4:	0124      	.short	0x0124
3401c3b6:	4b55      	ldr	r3, [pc, #340]	@ (3401c50c <_strerror_r+0x288>)
3401c3b8:	4618      	mov	r0, r3
3401c3ba:	bd10      	pop	{r4, pc}
3401c3bc:	4b54      	ldr	r3, [pc, #336]	@ (3401c510 <_strerror_r+0x28c>)
3401c3be:	e7fb      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3c0:	4b54      	ldr	r3, [pc, #336]	@ (3401c514 <_strerror_r+0x290>)
3401c3c2:	e7f9      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3c4:	4b54      	ldr	r3, [pc, #336]	@ (3401c518 <_strerror_r+0x294>)
3401c3c6:	e7f7      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3c8:	4b54      	ldr	r3, [pc, #336]	@ (3401c51c <_strerror_r+0x298>)
3401c3ca:	e7f5      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3cc:	4b54      	ldr	r3, [pc, #336]	@ (3401c520 <_strerror_r+0x29c>)
3401c3ce:	e7f3      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3d0:	4b54      	ldr	r3, [pc, #336]	@ (3401c524 <_strerror_r+0x2a0>)
3401c3d2:	e7f1      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3d4:	4b54      	ldr	r3, [pc, #336]	@ (3401c528 <_strerror_r+0x2a4>)
3401c3d6:	e7ef      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3d8:	4b54      	ldr	r3, [pc, #336]	@ (3401c52c <_strerror_r+0x2a8>)
3401c3da:	e7ed      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3dc:	4b54      	ldr	r3, [pc, #336]	@ (3401c530 <_strerror_r+0x2ac>)
3401c3de:	e7eb      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3e0:	4b54      	ldr	r3, [pc, #336]	@ (3401c534 <_strerror_r+0x2b0>)
3401c3e2:	e7e9      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3e4:	4b54      	ldr	r3, [pc, #336]	@ (3401c538 <_strerror_r+0x2b4>)
3401c3e6:	e7e7      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3e8:	4b54      	ldr	r3, [pc, #336]	@ (3401c53c <_strerror_r+0x2b8>)
3401c3ea:	e7e5      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3ec:	4b54      	ldr	r3, [pc, #336]	@ (3401c540 <_strerror_r+0x2bc>)
3401c3ee:	e7e3      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3f0:	4b54      	ldr	r3, [pc, #336]	@ (3401c544 <_strerror_r+0x2c0>)
3401c3f2:	e7e1      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3f4:	4b54      	ldr	r3, [pc, #336]	@ (3401c548 <_strerror_r+0x2c4>)
3401c3f6:	e7df      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3f8:	4b54      	ldr	r3, [pc, #336]	@ (3401c54c <_strerror_r+0x2c8>)
3401c3fa:	e7dd      	b.n	3401c3b8 <_strerror_r+0x134>
3401c3fc:	4b54      	ldr	r3, [pc, #336]	@ (3401c550 <_strerror_r+0x2cc>)
3401c3fe:	e7db      	b.n	3401c3b8 <_strerror_r+0x134>
3401c400:	4b54      	ldr	r3, [pc, #336]	@ (3401c554 <_strerror_r+0x2d0>)
3401c402:	e7d9      	b.n	3401c3b8 <_strerror_r+0x134>
3401c404:	4b54      	ldr	r3, [pc, #336]	@ (3401c558 <_strerror_r+0x2d4>)
3401c406:	e7d7      	b.n	3401c3b8 <_strerror_r+0x134>
3401c408:	4b54      	ldr	r3, [pc, #336]	@ (3401c55c <_strerror_r+0x2d8>)
3401c40a:	e7d5      	b.n	3401c3b8 <_strerror_r+0x134>
3401c40c:	4b54      	ldr	r3, [pc, #336]	@ (3401c560 <_strerror_r+0x2dc>)
3401c40e:	e7d3      	b.n	3401c3b8 <_strerror_r+0x134>
3401c410:	4b54      	ldr	r3, [pc, #336]	@ (3401c564 <_strerror_r+0x2e0>)
3401c412:	e7d1      	b.n	3401c3b8 <_strerror_r+0x134>
3401c414:	4b54      	ldr	r3, [pc, #336]	@ (3401c568 <_strerror_r+0x2e4>)
3401c416:	e7cf      	b.n	3401c3b8 <_strerror_r+0x134>
3401c418:	4b54      	ldr	r3, [pc, #336]	@ (3401c56c <_strerror_r+0x2e8>)
3401c41a:	e7cd      	b.n	3401c3b8 <_strerror_r+0x134>
3401c41c:	4b54      	ldr	r3, [pc, #336]	@ (3401c570 <_strerror_r+0x2ec>)
3401c41e:	e7cb      	b.n	3401c3b8 <_strerror_r+0x134>
3401c420:	4b54      	ldr	r3, [pc, #336]	@ (3401c574 <_strerror_r+0x2f0>)
3401c422:	e7c9      	b.n	3401c3b8 <_strerror_r+0x134>
3401c424:	4b54      	ldr	r3, [pc, #336]	@ (3401c578 <_strerror_r+0x2f4>)
3401c426:	e7c7      	b.n	3401c3b8 <_strerror_r+0x134>
3401c428:	4b54      	ldr	r3, [pc, #336]	@ (3401c57c <_strerror_r+0x2f8>)
3401c42a:	e7c5      	b.n	3401c3b8 <_strerror_r+0x134>
3401c42c:	4b54      	ldr	r3, [pc, #336]	@ (3401c580 <_strerror_r+0x2fc>)
3401c42e:	e7c3      	b.n	3401c3b8 <_strerror_r+0x134>
3401c430:	4b54      	ldr	r3, [pc, #336]	@ (3401c584 <_strerror_r+0x300>)
3401c432:	e7c1      	b.n	3401c3b8 <_strerror_r+0x134>
3401c434:	4b54      	ldr	r3, [pc, #336]	@ (3401c588 <_strerror_r+0x304>)
3401c436:	e7bf      	b.n	3401c3b8 <_strerror_r+0x134>
3401c438:	4b54      	ldr	r3, [pc, #336]	@ (3401c58c <_strerror_r+0x308>)
3401c43a:	e7bd      	b.n	3401c3b8 <_strerror_r+0x134>
3401c43c:	4b54      	ldr	r3, [pc, #336]	@ (3401c590 <_strerror_r+0x30c>)
3401c43e:	e7bb      	b.n	3401c3b8 <_strerror_r+0x134>
3401c440:	4b54      	ldr	r3, [pc, #336]	@ (3401c594 <_strerror_r+0x310>)
3401c442:	e7b9      	b.n	3401c3b8 <_strerror_r+0x134>
3401c444:	4b54      	ldr	r3, [pc, #336]	@ (3401c598 <_strerror_r+0x314>)
3401c446:	e7b7      	b.n	3401c3b8 <_strerror_r+0x134>
3401c448:	4b54      	ldr	r3, [pc, #336]	@ (3401c59c <_strerror_r+0x318>)
3401c44a:	e7b5      	b.n	3401c3b8 <_strerror_r+0x134>
3401c44c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5a0 <_strerror_r+0x31c>)
3401c44e:	e7b3      	b.n	3401c3b8 <_strerror_r+0x134>
3401c450:	4b54      	ldr	r3, [pc, #336]	@ (3401c5a4 <_strerror_r+0x320>)
3401c452:	e7b1      	b.n	3401c3b8 <_strerror_r+0x134>
3401c454:	4b54      	ldr	r3, [pc, #336]	@ (3401c5a8 <_strerror_r+0x324>)
3401c456:	e7af      	b.n	3401c3b8 <_strerror_r+0x134>
3401c458:	4b54      	ldr	r3, [pc, #336]	@ (3401c5ac <_strerror_r+0x328>)
3401c45a:	e7ad      	b.n	3401c3b8 <_strerror_r+0x134>
3401c45c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5b0 <_strerror_r+0x32c>)
3401c45e:	e7ab      	b.n	3401c3b8 <_strerror_r+0x134>
3401c460:	4b54      	ldr	r3, [pc, #336]	@ (3401c5b4 <_strerror_r+0x330>)
3401c462:	e7a9      	b.n	3401c3b8 <_strerror_r+0x134>
3401c464:	4b54      	ldr	r3, [pc, #336]	@ (3401c5b8 <_strerror_r+0x334>)
3401c466:	e7a7      	b.n	3401c3b8 <_strerror_r+0x134>
3401c468:	4b54      	ldr	r3, [pc, #336]	@ (3401c5bc <_strerror_r+0x338>)
3401c46a:	e7a5      	b.n	3401c3b8 <_strerror_r+0x134>
3401c46c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5c0 <_strerror_r+0x33c>)
3401c46e:	e7a3      	b.n	3401c3b8 <_strerror_r+0x134>
3401c470:	4b54      	ldr	r3, [pc, #336]	@ (3401c5c4 <_strerror_r+0x340>)
3401c472:	e7a1      	b.n	3401c3b8 <_strerror_r+0x134>
3401c474:	4b54      	ldr	r3, [pc, #336]	@ (3401c5c8 <_strerror_r+0x344>)
3401c476:	e79f      	b.n	3401c3b8 <_strerror_r+0x134>
3401c478:	4b54      	ldr	r3, [pc, #336]	@ (3401c5cc <_strerror_r+0x348>)
3401c47a:	e79d      	b.n	3401c3b8 <_strerror_r+0x134>
3401c47c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5d0 <_strerror_r+0x34c>)
3401c47e:	e79b      	b.n	3401c3b8 <_strerror_r+0x134>
3401c480:	4b54      	ldr	r3, [pc, #336]	@ (3401c5d4 <_strerror_r+0x350>)
3401c482:	e799      	b.n	3401c3b8 <_strerror_r+0x134>
3401c484:	4b54      	ldr	r3, [pc, #336]	@ (3401c5d8 <_strerror_r+0x354>)
3401c486:	e797      	b.n	3401c3b8 <_strerror_r+0x134>
3401c488:	4b54      	ldr	r3, [pc, #336]	@ (3401c5dc <_strerror_r+0x358>)
3401c48a:	e795      	b.n	3401c3b8 <_strerror_r+0x134>
3401c48c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5e0 <_strerror_r+0x35c>)
3401c48e:	e793      	b.n	3401c3b8 <_strerror_r+0x134>
3401c490:	4b54      	ldr	r3, [pc, #336]	@ (3401c5e4 <_strerror_r+0x360>)
3401c492:	e791      	b.n	3401c3b8 <_strerror_r+0x134>
3401c494:	4b54      	ldr	r3, [pc, #336]	@ (3401c5e8 <_strerror_r+0x364>)
3401c496:	e78f      	b.n	3401c3b8 <_strerror_r+0x134>
3401c498:	4b54      	ldr	r3, [pc, #336]	@ (3401c5ec <_strerror_r+0x368>)
3401c49a:	e78d      	b.n	3401c3b8 <_strerror_r+0x134>
3401c49c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5f0 <_strerror_r+0x36c>)
3401c49e:	e78b      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4a0:	4b54      	ldr	r3, [pc, #336]	@ (3401c5f4 <_strerror_r+0x370>)
3401c4a2:	e789      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4a4:	4b54      	ldr	r3, [pc, #336]	@ (3401c5f8 <_strerror_r+0x374>)
3401c4a6:	e787      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4a8:	4b54      	ldr	r3, [pc, #336]	@ (3401c5fc <_strerror_r+0x378>)
3401c4aa:	e785      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4ac:	4b54      	ldr	r3, [pc, #336]	@ (3401c600 <_strerror_r+0x37c>)
3401c4ae:	e783      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4b0:	4b54      	ldr	r3, [pc, #336]	@ (3401c604 <_strerror_r+0x380>)
3401c4b2:	e781      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4b4:	4b54      	ldr	r3, [pc, #336]	@ (3401c608 <_strerror_r+0x384>)
3401c4b6:	e77f      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4b8:	4b54      	ldr	r3, [pc, #336]	@ (3401c60c <_strerror_r+0x388>)
3401c4ba:	e77d      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4bc:	4b54      	ldr	r3, [pc, #336]	@ (3401c610 <_strerror_r+0x38c>)
3401c4be:	e77b      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4c0:	4b54      	ldr	r3, [pc, #336]	@ (3401c614 <_strerror_r+0x390>)
3401c4c2:	e779      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4c4:	4b54      	ldr	r3, [pc, #336]	@ (3401c618 <_strerror_r+0x394>)
3401c4c6:	e777      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4c8:	4b54      	ldr	r3, [pc, #336]	@ (3401c61c <_strerror_r+0x398>)
3401c4ca:	e775      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4cc:	4b54      	ldr	r3, [pc, #336]	@ (3401c620 <_strerror_r+0x39c>)
3401c4ce:	e773      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4d0:	4b54      	ldr	r3, [pc, #336]	@ (3401c624 <_strerror_r+0x3a0>)
3401c4d2:	e771      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4d4:	4b54      	ldr	r3, [pc, #336]	@ (3401c628 <_strerror_r+0x3a4>)
3401c4d6:	e76f      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4d8:	4b54      	ldr	r3, [pc, #336]	@ (3401c62c <_strerror_r+0x3a8>)
3401c4da:	e76d      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4dc:	4b54      	ldr	r3, [pc, #336]	@ (3401c630 <_strerror_r+0x3ac>)
3401c4de:	e76b      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4e0:	4b54      	ldr	r3, [pc, #336]	@ (3401c634 <_strerror_r+0x3b0>)
3401c4e2:	e769      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4e4:	4b54      	ldr	r3, [pc, #336]	@ (3401c638 <_strerror_r+0x3b4>)
3401c4e6:	e767      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4e8:	4b54      	ldr	r3, [pc, #336]	@ (3401c63c <_strerror_r+0x3b8>)
3401c4ea:	e765      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4ec:	4b54      	ldr	r3, [pc, #336]	@ (3401c640 <_strerror_r+0x3bc>)
3401c4ee:	e763      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4f0:	4b54      	ldr	r3, [pc, #336]	@ (3401c644 <_strerror_r+0x3c0>)
3401c4f2:	e761      	b.n	3401c3b8 <_strerror_r+0x134>
3401c4f4:	2a00      	cmp	r2, #0
3401c4f6:	bf08      	it	eq
3401c4f8:	4622      	moveq	r2, r4
3401c4fa:	f000 f8b3 	bl	3401c664 <_user_strerror>
3401c4fe:	4b52      	ldr	r3, [pc, #328]	@ (3401c648 <_strerror_r+0x3c4>)
3401c500:	2800      	cmp	r0, #0
3401c502:	bf18      	it	ne
3401c504:	4603      	movne	r3, r0
3401c506:	e757      	b.n	3401c3b8 <_strerror_r+0x134>
3401c508:	4b50      	ldr	r3, [pc, #320]	@ (3401c64c <_strerror_r+0x3c8>)
3401c50a:	e755      	b.n	3401c3b8 <_strerror_r+0x134>
3401c50c:	3401fd1e 	.word	0x3401fd1e
3401c510:	3401fd30 	.word	0x3401fd30
3401c514:	3401fd4a 	.word	0x3401fd4a
3401c518:	3401fd5a 	.word	0x3401fd5a
3401c51c:	3401fd72 	.word	0x3401fd72
3401c520:	3401fd7c 	.word	0x3401fd7c
3401c524:	3401fd96 	.word	0x3401fd96
3401c528:	3401fda8 	.word	0x3401fda8
3401c52c:	3401fdba 	.word	0x3401fdba
3401c530:	3401fdd3 	.word	0x3401fdd3
3401c534:	3401fde3 	.word	0x3401fde3
3401c538:	3401fdef 	.word	0x3401fdef
3401c53c:	3401fe0c 	.word	0x3401fe0c
3401c540:	3401fe1e 	.word	0x3401fe1e
3401c544:	3401fe2f 	.word	0x3401fe2f
3401c548:	3401fe41 	.word	0x3401fe41
3401c54c:	3401fe4d 	.word	0x3401fe4d
3401c550:	3401fe65 	.word	0x3401fe65
3401c554:	3401fe71 	.word	0x3401fe71
3401c558:	3401fe83 	.word	0x3401fe83
3401c55c:	3401fe92 	.word	0x3401fe92
3401c560:	3401fea2 	.word	0x3401fea2
3401c564:	3401feaf 	.word	0x3401feaf
3401c568:	3401fece 	.word	0x3401fece
3401c56c:	3401fedd 	.word	0x3401fedd
3401c570:	3401feee 	.word	0x3401feee
3401c574:	3401ff12 	.word	0x3401ff12
3401c578:	3401ff30 	.word	0x3401ff30
3401c57c:	3401ff4e 	.word	0x3401ff4e
3401c580:	3401ff6e 	.word	0x3401ff6e
3401c584:	3401ff85 	.word	0x3401ff85
3401c588:	3401ff94 	.word	0x3401ff94
3401c58c:	3401ffa3 	.word	0x3401ffa3
3401c590:	3401ffb7 	.word	0x3401ffb7
3401c594:	3401ffcf 	.word	0x3401ffcf
3401c598:	3401ffdd 	.word	0x3401ffdd
3401c59c:	3401ffea 	.word	0x3401ffea
3401c5a0:	34020000 	.word	0x34020000
3401c5a4:	3402000f 	.word	0x3402000f
3401c5a8:	3402001b 	.word	0x3402001b
3401c5ac:	3402004a 	.word	0x3402004a
3401c5b0:	3402005b 	.word	0x3402005b
3401c5b4:	34020076 	.word	0x34020076
3401c5b8:	34020089 	.word	0x34020089
3401c5bc:	3402009f 	.word	0x3402009f
3401c5c0:	340200a8 	.word	0x340200a8
3401c5c4:	340200bf 	.word	0x340200bf
3401c5c8:	340200c7 	.word	0x340200c7
3401c5cc:	340200d4 	.word	0x340200d4
3401c5d0:	340200e9 	.word	0x340200e9
3401c5d4:	340200fd 	.word	0x340200fd
3401c5d8:	34020115 	.word	0x34020115
3401c5dc:	34020124 	.word	0x34020124
3401c5e0:	34020135 	.word	0x34020135
3401c5e4:	34020148 	.word	0x34020148
3401c5e8:	34020154 	.word	0x34020154
3401c5ec:	3402016d 	.word	0x3402016d
3401c5f0:	34020181 	.word	0x34020181
3401c5f4:	3402019c 	.word	0x3402019c
3401c5f8:	340201b4 	.word	0x340201b4
3401c5fc:	340201ce 	.word	0x340201ce
3401c600:	340201d6 	.word	0x340201d6
3401c604:	34020206 	.word	0x34020206
3401c608:	34020225 	.word	0x34020225
3401c60c:	34020244 	.word	0x34020244
3401c610:	3402025b 	.word	0x3402025b
3401c614:	3402026e 	.word	0x3402026e
3401c618:	34020287 	.word	0x34020287
3401c61c:	3402029e 	.word	0x3402029e
3401c620:	340202b4 	.word	0x340202b4
3401c624:	340202d5 	.word	0x340202d5
3401c628:	340202ed 	.word	0x340202ed
3401c62c:	34020309 	.word	0x34020309
3401c630:	3402031c 	.word	0x3402031c
3401c634:	34020332 	.word	0x34020332
3401c638:	34020346 	.word	0x34020346
3401c63c:	34020368 	.word	0x34020368
3401c640:	3402038e 	.word	0x3402038e
3401c644:	3402039f 	.word	0x3402039f
3401c648:	3401fce9 	.word	0x3401fce9
3401c64c:	3401fd26 	.word	0x3401fd26

3401c650 <strerror>:
3401c650:	4601      	mov	r1, r0
3401c652:	2300      	movs	r3, #0
3401c654:	4802      	ldr	r0, [pc, #8]	@ (3401c660 <strerror+0x10>)
3401c656:	461a      	mov	r2, r3
3401c658:	6800      	ldr	r0, [r0, #0]
3401c65a:	f7ff be13 	b.w	3401c284 <_strerror_r>
3401c65e:	bf00      	nop
3401c660:	3402071c 	.word	0x3402071c

3401c664 <_user_strerror>:
3401c664:	2000      	movs	r0, #0
3401c666:	4770      	bx	lr

3401c668 <_localeconv_r>:
3401c668:	4800      	ldr	r0, [pc, #0]	@ (3401c66c <_localeconv_r+0x4>)
3401c66a:	4770      	bx	lr
3401c66c:	3402085c 	.word	0x3402085c

3401c670 <_close_r>:
3401c670:	b538      	push	{r3, r4, r5, lr}
3401c672:	2300      	movs	r3, #0
3401c674:	4d05      	ldr	r5, [pc, #20]	@ (3401c68c <_close_r+0x1c>)
3401c676:	4604      	mov	r4, r0
3401c678:	4608      	mov	r0, r1
3401c67a:	602b      	str	r3, [r5, #0]
3401c67c:	f7e5 fc06 	bl	34001e8c <_close>
3401c680:	1c43      	adds	r3, r0, #1
3401c682:	d102      	bne.n	3401c68a <_close_r+0x1a>
3401c684:	682b      	ldr	r3, [r5, #0]
3401c686:	b103      	cbz	r3, 3401c68a <_close_r+0x1a>
3401c688:	6023      	str	r3, [r4, #0]
3401c68a:	bd38      	pop	{r3, r4, r5, pc}
3401c68c:	34020fa4 	.word	0x34020fa4

3401c690 <_lseek_r>:
3401c690:	b538      	push	{r3, r4, r5, lr}
3401c692:	4604      	mov	r4, r0
3401c694:	4d06      	ldr	r5, [pc, #24]	@ (3401c6b0 <_lseek_r+0x20>)
3401c696:	4608      	mov	r0, r1
3401c698:	4611      	mov	r1, r2
3401c69a:	2200      	movs	r2, #0
3401c69c:	602a      	str	r2, [r5, #0]
3401c69e:	461a      	mov	r2, r3
3401c6a0:	f7e5 fc1b 	bl	34001eda <_lseek>
3401c6a4:	1c43      	adds	r3, r0, #1
3401c6a6:	d102      	bne.n	3401c6ae <_lseek_r+0x1e>
3401c6a8:	682b      	ldr	r3, [r5, #0]
3401c6aa:	b103      	cbz	r3, 3401c6ae <_lseek_r+0x1e>
3401c6ac:	6023      	str	r3, [r4, #0]
3401c6ae:	bd38      	pop	{r3, r4, r5, pc}
3401c6b0:	34020fa4 	.word	0x34020fa4

3401c6b4 <_read_r>:
3401c6b4:	b538      	push	{r3, r4, r5, lr}
3401c6b6:	4604      	mov	r4, r0
3401c6b8:	4d06      	ldr	r5, [pc, #24]	@ (3401c6d4 <_read_r+0x20>)
3401c6ba:	4608      	mov	r0, r1
3401c6bc:	4611      	mov	r1, r2
3401c6be:	2200      	movs	r2, #0
3401c6c0:	602a      	str	r2, [r5, #0]
3401c6c2:	461a      	mov	r2, r3
3401c6c4:	f7e5 fbc5 	bl	34001e52 <_read>
3401c6c8:	1c43      	adds	r3, r0, #1
3401c6ca:	d102      	bne.n	3401c6d2 <_read_r+0x1e>
3401c6cc:	682b      	ldr	r3, [r5, #0]
3401c6ce:	b103      	cbz	r3, 3401c6d2 <_read_r+0x1e>
3401c6d0:	6023      	str	r3, [r4, #0]
3401c6d2:	bd38      	pop	{r3, r4, r5, pc}
3401c6d4:	34020fa4 	.word	0x34020fa4

3401c6d8 <_sbrk_r>:
3401c6d8:	b538      	push	{r3, r4, r5, lr}
3401c6da:	2300      	movs	r3, #0
3401c6dc:	4d05      	ldr	r5, [pc, #20]	@ (3401c6f4 <_sbrk_r+0x1c>)
3401c6de:	4604      	mov	r4, r0
3401c6e0:	4608      	mov	r0, r1
3401c6e2:	602b      	str	r3, [r5, #0]
3401c6e4:	f001 fc60 	bl	3401dfa8 <_sbrk>
3401c6e8:	1c43      	adds	r3, r0, #1
3401c6ea:	d102      	bne.n	3401c6f2 <_sbrk_r+0x1a>
3401c6ec:	682b      	ldr	r3, [r5, #0]
3401c6ee:	b103      	cbz	r3, 3401c6f2 <_sbrk_r+0x1a>
3401c6f0:	6023      	str	r3, [r4, #0]
3401c6f2:	bd38      	pop	{r3, r4, r5, pc}
3401c6f4:	34020fa4 	.word	0x34020fa4

3401c6f8 <_write_r>:
3401c6f8:	b538      	push	{r3, r4, r5, lr}
3401c6fa:	4604      	mov	r4, r0
3401c6fc:	4d06      	ldr	r5, [pc, #24]	@ (3401c718 <_write_r+0x20>)
3401c6fe:	4608      	mov	r0, r1
3401c700:	4611      	mov	r1, r2
3401c702:	2200      	movs	r2, #0
3401c704:	602a      	str	r2, [r5, #0]
3401c706:	461a      	mov	r2, r3
3401c708:	f7e5 f896 	bl	34001838 <_write>
3401c70c:	1c43      	adds	r3, r0, #1
3401c70e:	d102      	bne.n	3401c716 <_write_r+0x1e>
3401c710:	682b      	ldr	r3, [r5, #0]
3401c712:	b103      	cbz	r3, 3401c716 <_write_r+0x1e>
3401c714:	6023      	str	r3, [r4, #0]
3401c716:	bd38      	pop	{r3, r4, r5, pc}
3401c718:	34020fa4 	.word	0x34020fa4

3401c71c <__errno>:
3401c71c:	4b01      	ldr	r3, [pc, #4]	@ (3401c724 <__errno+0x8>)
3401c71e:	6818      	ldr	r0, [r3, #0]
3401c720:	4770      	bx	lr
3401c722:	bf00      	nop
3401c724:	3402071c 	.word	0x3402071c

3401c728 <__libc_init_array>:
3401c728:	b570      	push	{r4, r5, r6, lr}
3401c72a:	4d0d      	ldr	r5, [pc, #52]	@ (3401c760 <__libc_init_array+0x38>)
3401c72c:	2600      	movs	r6, #0
3401c72e:	4c0d      	ldr	r4, [pc, #52]	@ (3401c764 <__libc_init_array+0x3c>)
3401c730:	1b64      	subs	r4, r4, r5
3401c732:	10a4      	asrs	r4, r4, #2
3401c734:	42a6      	cmp	r6, r4
3401c736:	d109      	bne.n	3401c74c <__libc_init_array+0x24>
3401c738:	4d0b      	ldr	r5, [pc, #44]	@ (3401c768 <__libc_init_array+0x40>)
3401c73a:	2600      	movs	r6, #0
3401c73c:	4c0b      	ldr	r4, [pc, #44]	@ (3401c76c <__libc_init_array+0x44>)
3401c73e:	f001 fc41 	bl	3401dfc4 <_init>
3401c742:	1b64      	subs	r4, r4, r5
3401c744:	10a4      	asrs	r4, r4, #2
3401c746:	42a6      	cmp	r6, r4
3401c748:	d105      	bne.n	3401c756 <__libc_init_array+0x2e>
3401c74a:	bd70      	pop	{r4, r5, r6, pc}
3401c74c:	f855 3b04 	ldr.w	r3, [r5], #4
3401c750:	3601      	adds	r6, #1
3401c752:	4798      	blx	r3
3401c754:	e7ee      	b.n	3401c734 <__libc_init_array+0xc>
3401c756:	f855 3b04 	ldr.w	r3, [r5], #4
3401c75a:	3601      	adds	r6, #1
3401c75c:	4798      	blx	r3
3401c75e:	e7f2      	b.n	3401c746 <__libc_init_array+0x1e>
3401c760:	340206c4 	.word	0x340206c4
3401c764:	340206c4 	.word	0x340206c4
3401c768:	340206c4 	.word	0x340206c4
3401c76c:	340206c8 	.word	0x340206c8

3401c770 <__retarget_lock_init_recursive>:
3401c770:	4770      	bx	lr

3401c772 <__retarget_lock_acquire_recursive>:
3401c772:	4770      	bx	lr

3401c774 <__retarget_lock_release_recursive>:
3401c774:	4770      	bx	lr

3401c776 <memchr>:
3401c776:	b2c9      	uxtb	r1, r1
3401c778:	4603      	mov	r3, r0
3401c77a:	4402      	add	r2, r0
3401c77c:	b510      	push	{r4, lr}
3401c77e:	4293      	cmp	r3, r2
3401c780:	4618      	mov	r0, r3
3401c782:	d101      	bne.n	3401c788 <memchr+0x12>
3401c784:	2000      	movs	r0, #0
3401c786:	e003      	b.n	3401c790 <memchr+0x1a>
3401c788:	7804      	ldrb	r4, [r0, #0]
3401c78a:	3301      	adds	r3, #1
3401c78c:	428c      	cmp	r4, r1
3401c78e:	d1f6      	bne.n	3401c77e <memchr+0x8>
3401c790:	bd10      	pop	{r4, pc}

3401c792 <memcpy>:
3401c792:	440a      	add	r2, r1
3401c794:	1e43      	subs	r3, r0, #1
3401c796:	4291      	cmp	r1, r2
3401c798:	d100      	bne.n	3401c79c <memcpy+0xa>
3401c79a:	4770      	bx	lr
3401c79c:	b510      	push	{r4, lr}
3401c79e:	f811 4b01 	ldrb.w	r4, [r1], #1
3401c7a2:	4291      	cmp	r1, r2
3401c7a4:	f803 4f01 	strb.w	r4, [r3, #1]!
3401c7a8:	d1f9      	bne.n	3401c79e <memcpy+0xc>
3401c7aa:	bd10      	pop	{r4, pc}

3401c7ac <abort>:
3401c7ac:	2006      	movs	r0, #6
3401c7ae:	b508      	push	{r3, lr}
3401c7b0:	f001 fb88 	bl	3401dec4 <raise>
3401c7b4:	2001      	movs	r0, #1
3401c7b6:	f7e5 fb41 	bl	34001e3c <_exit>

3401c7ba <quorem>:
3401c7ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c7be:	6903      	ldr	r3, [r0, #16]
3401c7c0:	4607      	mov	r7, r0
3401c7c2:	690c      	ldr	r4, [r1, #16]
3401c7c4:	42a3      	cmp	r3, r4
3401c7c6:	f2c0 8083 	blt.w	3401c8d0 <quorem+0x116>
3401c7ca:	3c01      	subs	r4, #1
3401c7cc:	f100 0514 	add.w	r5, r0, #20
3401c7d0:	f101 0814 	add.w	r8, r1, #20
3401c7d4:	00a3      	lsls	r3, r4, #2
3401c7d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3401c7da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3401c7de:	9300      	str	r3, [sp, #0]
3401c7e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3401c7e4:	9301      	str	r3, [sp, #4]
3401c7e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3401c7ea:	3301      	adds	r3, #1
3401c7ec:	429a      	cmp	r2, r3
3401c7ee:	fbb2 f6f3 	udiv	r6, r2, r3
3401c7f2:	d331      	bcc.n	3401c858 <quorem+0x9e>
3401c7f4:	f04f 0a00 	mov.w	sl, #0
3401c7f8:	46c4      	mov	ip, r8
3401c7fa:	46ae      	mov	lr, r5
3401c7fc:	46d3      	mov	fp, sl
3401c7fe:	f85c 3b04 	ldr.w	r3, [ip], #4
3401c802:	b298      	uxth	r0, r3
3401c804:	45e1      	cmp	r9, ip
3401c806:	ea4f 4313 	mov.w	r3, r3, lsr #16
3401c80a:	fb06 a000 	mla	r0, r6, r0, sl
3401c80e:	ea4f 4210 	mov.w	r2, r0, lsr #16
3401c812:	b280      	uxth	r0, r0
3401c814:	fb06 2303 	mla	r3, r6, r3, r2
3401c818:	f8de 2000 	ldr.w	r2, [lr]
3401c81c:	b292      	uxth	r2, r2
3401c81e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401c822:	eba2 0200 	sub.w	r2, r2, r0
3401c826:	b29b      	uxth	r3, r3
3401c828:	f8de 0000 	ldr.w	r0, [lr]
3401c82c:	445a      	add	r2, fp
3401c82e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3401c832:	b292      	uxth	r2, r2
3401c834:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3401c838:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3401c83c:	ea4f 4b23 	mov.w	fp, r3, asr #16
3401c840:	f84e 2b04 	str.w	r2, [lr], #4
3401c844:	d2db      	bcs.n	3401c7fe <quorem+0x44>
3401c846:	9b00      	ldr	r3, [sp, #0]
3401c848:	58eb      	ldr	r3, [r5, r3]
3401c84a:	b92b      	cbnz	r3, 3401c858 <quorem+0x9e>
3401c84c:	9b01      	ldr	r3, [sp, #4]
3401c84e:	3b04      	subs	r3, #4
3401c850:	429d      	cmp	r5, r3
3401c852:	461a      	mov	r2, r3
3401c854:	d330      	bcc.n	3401c8b8 <quorem+0xfe>
3401c856:	613c      	str	r4, [r7, #16]
3401c858:	4638      	mov	r0, r7
3401c85a:	f001 f85b 	bl	3401d914 <__mcmp>
3401c85e:	2800      	cmp	r0, #0
3401c860:	db26      	blt.n	3401c8b0 <quorem+0xf6>
3401c862:	4629      	mov	r1, r5
3401c864:	2000      	movs	r0, #0
3401c866:	f858 2b04 	ldr.w	r2, [r8], #4
3401c86a:	f8d1 c000 	ldr.w	ip, [r1]
3401c86e:	fa1f fe82 	uxth.w	lr, r2
3401c872:	45c1      	cmp	r9, r8
3401c874:	fa1f f38c 	uxth.w	r3, ip
3401c878:	ea4f 4212 	mov.w	r2, r2, lsr #16
3401c87c:	eba3 030e 	sub.w	r3, r3, lr
3401c880:	4403      	add	r3, r0
3401c882:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3401c886:	b29b      	uxth	r3, r3
3401c888:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3401c88c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401c890:	ea4f 4022 	mov.w	r0, r2, asr #16
3401c894:	f841 3b04 	str.w	r3, [r1], #4
3401c898:	d2e5      	bcs.n	3401c866 <quorem+0xac>
3401c89a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3401c89e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3401c8a2:	b922      	cbnz	r2, 3401c8ae <quorem+0xf4>
3401c8a4:	3b04      	subs	r3, #4
3401c8a6:	429d      	cmp	r5, r3
3401c8a8:	461a      	mov	r2, r3
3401c8aa:	d30b      	bcc.n	3401c8c4 <quorem+0x10a>
3401c8ac:	613c      	str	r4, [r7, #16]
3401c8ae:	3601      	adds	r6, #1
3401c8b0:	4630      	mov	r0, r6
3401c8b2:	b003      	add	sp, #12
3401c8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401c8b8:	6812      	ldr	r2, [r2, #0]
3401c8ba:	3b04      	subs	r3, #4
3401c8bc:	2a00      	cmp	r2, #0
3401c8be:	d1ca      	bne.n	3401c856 <quorem+0x9c>
3401c8c0:	3c01      	subs	r4, #1
3401c8c2:	e7c5      	b.n	3401c850 <quorem+0x96>
3401c8c4:	6812      	ldr	r2, [r2, #0]
3401c8c6:	3b04      	subs	r3, #4
3401c8c8:	2a00      	cmp	r2, #0
3401c8ca:	d1ef      	bne.n	3401c8ac <quorem+0xf2>
3401c8cc:	3c01      	subs	r4, #1
3401c8ce:	e7ea      	b.n	3401c8a6 <quorem+0xec>
3401c8d0:	2000      	movs	r0, #0
3401c8d2:	e7ee      	b.n	3401c8b2 <quorem+0xf8>
3401c8d4:	0000      	movs	r0, r0
	...

3401c8d8 <_dtoa_r>:
3401c8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c8dc:	69c7      	ldr	r7, [r0, #28]
3401c8de:	4681      	mov	r9, r0
3401c8e0:	ed2d 8b02 	vpush	{d8}
3401c8e4:	b091      	sub	sp, #68	@ 0x44
3401c8e6:	ec55 4b10 	vmov	r4, r5, d0
3401c8ea:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3401c8ec:	9107      	str	r1, [sp, #28]
3401c8ee:	9209      	str	r2, [sp, #36]	@ 0x24
3401c8f0:	930d      	str	r3, [sp, #52]	@ 0x34
3401c8f2:	ed8d 0b02 	vstr	d0, [sp, #8]
3401c8f6:	b97f      	cbnz	r7, 3401c918 <_dtoa_r+0x40>
3401c8f8:	2010      	movs	r0, #16
3401c8fa:	f7fe fcef 	bl	3401b2dc <malloc>
3401c8fe:	4602      	mov	r2, r0
3401c900:	f8c9 001c 	str.w	r0, [r9, #28]
3401c904:	b920      	cbnz	r0, 3401c910 <_dtoa_r+0x38>
3401c906:	4ba0      	ldr	r3, [pc, #640]	@ (3401cb88 <_dtoa_r+0x2b0>)
3401c908:	21ef      	movs	r1, #239	@ 0xef
3401c90a:	48a0      	ldr	r0, [pc, #640]	@ (3401cb8c <_dtoa_r+0x2b4>)
3401c90c:	f7fe fcc8 	bl	3401b2a0 <__assert_func>
3401c910:	e9c0 7701 	strd	r7, r7, [r0, #4]
3401c914:	6007      	str	r7, [r0, #0]
3401c916:	60c7      	str	r7, [r0, #12]
3401c918:	f8d9 301c 	ldr.w	r3, [r9, #28]
3401c91c:	6819      	ldr	r1, [r3, #0]
3401c91e:	b159      	cbz	r1, 3401c938 <_dtoa_r+0x60>
3401c920:	685a      	ldr	r2, [r3, #4]
3401c922:	2301      	movs	r3, #1
3401c924:	4648      	mov	r0, r9
3401c926:	4093      	lsls	r3, r2
3401c928:	604a      	str	r2, [r1, #4]
3401c92a:	608b      	str	r3, [r1, #8]
3401c92c:	f000 fdbc 	bl	3401d4a8 <_Bfree>
3401c930:	f8d9 301c 	ldr.w	r3, [r9, #28]
3401c934:	2200      	movs	r2, #0
3401c936:	601a      	str	r2, [r3, #0]
3401c938:	1e2b      	subs	r3, r5, #0
3401c93a:	bfb7      	itett	lt
3401c93c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3401c940:	2300      	movge	r3, #0
3401c942:	2201      	movlt	r2, #1
3401c944:	9303      	strlt	r3, [sp, #12]
3401c946:	bfac      	ite	ge
3401c948:	6033      	strge	r3, [r6, #0]
3401c94a:	6032      	strlt	r2, [r6, #0]
3401c94c:	4b90      	ldr	r3, [pc, #576]	@ (3401cb90 <_dtoa_r+0x2b8>)
3401c94e:	9e03      	ldr	r6, [sp, #12]
3401c950:	43b3      	bics	r3, r6
3401c952:	d110      	bne.n	3401c976 <_dtoa_r+0x9e>
3401c954:	f242 730f 	movw	r3, #9999	@ 0x270f
3401c958:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401c95a:	6013      	str	r3, [r2, #0]
3401c95c:	f3c6 0313 	ubfx	r3, r6, #0, #20
3401c960:	4323      	orrs	r3, r4
3401c962:	f000 84e6 	beq.w	3401d332 <_dtoa_r+0xa5a>
3401c966:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401c968:	4f8a      	ldr	r7, [pc, #552]	@ (3401cb94 <_dtoa_r+0x2bc>)
3401c96a:	2b00      	cmp	r3, #0
3401c96c:	f000 84e8 	beq.w	3401d340 <_dtoa_r+0xa68>
3401c970:	1cfb      	adds	r3, r7, #3
3401c972:	f000 bce3 	b.w	3401d33c <_dtoa_r+0xa64>
3401c976:	ed9d 8b02 	vldr	d8, [sp, #8]
3401c97a:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401c97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401c982:	d10a      	bne.n	3401c99a <_dtoa_r+0xc2>
3401c984:	2301      	movs	r3, #1
3401c986:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401c988:	6013      	str	r3, [r2, #0]
3401c98a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401c98c:	b113      	cbz	r3, 3401c994 <_dtoa_r+0xbc>
3401c98e:	4b82      	ldr	r3, [pc, #520]	@ (3401cb98 <_dtoa_r+0x2c0>)
3401c990:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3401c992:	6013      	str	r3, [r2, #0]
3401c994:	4f81      	ldr	r7, [pc, #516]	@ (3401cb9c <_dtoa_r+0x2c4>)
3401c996:	f000 bcd3 	b.w	3401d340 <_dtoa_r+0xa68>
3401c99a:	aa0e      	add	r2, sp, #56	@ 0x38
3401c99c:	eeb0 0b48 	vmov.f64	d0, d8
3401c9a0:	a90f      	add	r1, sp, #60	@ 0x3c
3401c9a2:	4648      	mov	r0, r9
3401c9a4:	f001 f86a 	bl	3401da7c <__d2b>
3401c9a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
3401c9ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401c9ae:	9001      	str	r0, [sp, #4]
3401c9b0:	2b00      	cmp	r3, #0
3401c9b2:	d045      	beq.n	3401ca40 <_dtoa_r+0x168>
3401c9b4:	ee18 1a90 	vmov	r1, s17
3401c9b8:	eeb0 7b48 	vmov.f64	d7, d8
3401c9bc:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3401c9c0:	2500      	movs	r5, #0
3401c9c2:	f3c1 0113 	ubfx	r1, r1, #0, #20
3401c9c6:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3401c9ca:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3401c9ce:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3401c9d2:	ee07 1a90 	vmov	s15, r1
3401c9d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3401cb70 <_dtoa_r+0x298>
3401c9da:	ee37 7b46 	vsub.f64	d7, d7, d6
3401c9de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3401cb78 <_dtoa_r+0x2a0>
3401c9e2:	eea7 6b05 	vfma.f64	d6, d7, d5
3401c9e6:	ee07 3a90 	vmov	s15, r3
3401c9ea:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3401c9ee:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3401cb80 <_dtoa_r+0x2a8>
3401c9f2:	eeb0 7b46 	vmov.f64	d7, d6
3401c9f6:	eea4 7b05 	vfma.f64	d7, d4, d5
3401c9fa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3401c9fe:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3401ca02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ca06:	ee16 8a90 	vmov	r8, s13
3401ca0a:	d508      	bpl.n	3401ca1e <_dtoa_r+0x146>
3401ca0c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3401ca10:	eeb4 6b47 	vcmp.f64	d6, d7
3401ca14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ca18:	bf18      	it	ne
3401ca1a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3401ca1e:	f1b8 0f16 	cmp.w	r8, #22
3401ca22:	d82d      	bhi.n	3401ca80 <_dtoa_r+0x1a8>
3401ca24:	495e      	ldr	r1, [pc, #376]	@ (3401cba0 <_dtoa_r+0x2c8>)
3401ca26:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3401ca2a:	ed91 7b00 	vldr	d7, [r1]
3401ca2e:	eeb4 8bc7 	vcmpe.f64	d8, d7
3401ca32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ca36:	d501      	bpl.n	3401ca3c <_dtoa_r+0x164>
3401ca38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3401ca3c:	2100      	movs	r1, #0
3401ca3e:	e020      	b.n	3401ca82 <_dtoa_r+0x1aa>
3401ca40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3401ca42:	2501      	movs	r5, #1
3401ca44:	4413      	add	r3, r2
3401ca46:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3401ca4a:	2920      	cmp	r1, #32
3401ca4c:	bfc9      	itett	gt
3401ca4e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3401ca52:	f1c1 0120 	rsble	r1, r1, #32
3401ca56:	408e      	lslgt	r6, r1
3401ca58:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3401ca5c:	bfd8      	it	le
3401ca5e:	fa04 f101 	lslle.w	r1, r4, r1
3401ca62:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3401ca66:	bfc4      	itt	gt
3401ca68:	fa24 f101 	lsrgt.w	r1, r4, r1
3401ca6c:	4331      	orrgt	r1, r6
3401ca6e:	ee07 1a90 	vmov	s15, r1
3401ca72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3401ca76:	ee17 1a90 	vmov	r1, s15
3401ca7a:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3401ca7e:	e7a6      	b.n	3401c9ce <_dtoa_r+0xf6>
3401ca80:	2101      	movs	r1, #1
3401ca82:	1ad2      	subs	r2, r2, r3
3401ca84:	910c      	str	r1, [sp, #48]	@ 0x30
3401ca86:	1e53      	subs	r3, r2, #1
3401ca88:	9306      	str	r3, [sp, #24]
3401ca8a:	bf49      	itett	mi
3401ca8c:	f1c2 0301 	rsbmi	r3, r2, #1
3401ca90:	2300      	movpl	r3, #0
3401ca92:	9304      	strmi	r3, [sp, #16]
3401ca94:	2300      	movmi	r3, #0
3401ca96:	bf54      	ite	pl
3401ca98:	9304      	strpl	r3, [sp, #16]
3401ca9a:	9306      	strmi	r3, [sp, #24]
3401ca9c:	f1b8 0f00 	cmp.w	r8, #0
3401caa0:	db16      	blt.n	3401cad0 <_dtoa_r+0x1f8>
3401caa2:	9b06      	ldr	r3, [sp, #24]
3401caa4:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3401caa8:	4443      	add	r3, r8
3401caaa:	9306      	str	r3, [sp, #24]
3401caac:	2300      	movs	r3, #0
3401caae:	9a07      	ldr	r2, [sp, #28]
3401cab0:	2a09      	cmp	r2, #9
3401cab2:	d843      	bhi.n	3401cb3c <_dtoa_r+0x264>
3401cab4:	2a05      	cmp	r2, #5
3401cab6:	bfc5      	ittet	gt
3401cab8:	3a04      	subgt	r2, #4
3401caba:	2400      	movgt	r4, #0
3401cabc:	2401      	movle	r4, #1
3401cabe:	9207      	strgt	r2, [sp, #28]
3401cac0:	9a07      	ldr	r2, [sp, #28]
3401cac2:	3a02      	subs	r2, #2
3401cac4:	2a03      	cmp	r2, #3
3401cac6:	d844      	bhi.n	3401cb52 <_dtoa_r+0x27a>
3401cac8:	e8df f002 	tbb	[pc, r2]
3401cacc:	0b173634 	.word	0x0b173634
3401cad0:	9b04      	ldr	r3, [sp, #16]
3401cad2:	2200      	movs	r2, #0
3401cad4:	eba3 0308 	sub.w	r3, r3, r8
3401cad8:	920a      	str	r2, [sp, #40]	@ 0x28
3401cada:	9304      	str	r3, [sp, #16]
3401cadc:	f1c8 0300 	rsb	r3, r8, #0
3401cae0:	e7e5      	b.n	3401caae <_dtoa_r+0x1d6>
3401cae2:	2201      	movs	r2, #1
3401cae4:	9208      	str	r2, [sp, #32]
3401cae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401cae8:	eb08 0b02 	add.w	fp, r8, r2
3401caec:	f10b 0a01 	add.w	sl, fp, #1
3401caf0:	4652      	mov	r2, sl
3401caf2:	2a01      	cmp	r2, #1
3401caf4:	bfb8      	it	lt
3401caf6:	2201      	movlt	r2, #1
3401caf8:	e006      	b.n	3401cb08 <_dtoa_r+0x230>
3401cafa:	2201      	movs	r2, #1
3401cafc:	9208      	str	r2, [sp, #32]
3401cafe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401cb00:	2a00      	cmp	r2, #0
3401cb02:	dd29      	ble.n	3401cb58 <_dtoa_r+0x280>
3401cb04:	4693      	mov	fp, r2
3401cb06:	4692      	mov	sl, r2
3401cb08:	f8d9 701c 	ldr.w	r7, [r9, #28]
3401cb0c:	2100      	movs	r1, #0
3401cb0e:	2004      	movs	r0, #4
3401cb10:	f100 0614 	add.w	r6, r0, #20
3401cb14:	4296      	cmp	r6, r2
3401cb16:	d926      	bls.n	3401cb66 <_dtoa_r+0x28e>
3401cb18:	6079      	str	r1, [r7, #4]
3401cb1a:	4648      	mov	r0, r9
3401cb1c:	9305      	str	r3, [sp, #20]
3401cb1e:	f000 fc83 	bl	3401d428 <_Balloc>
3401cb22:	9b05      	ldr	r3, [sp, #20]
3401cb24:	4607      	mov	r7, r0
3401cb26:	2800      	cmp	r0, #0
3401cb28:	d13e      	bne.n	3401cba8 <_dtoa_r+0x2d0>
3401cb2a:	4b1e      	ldr	r3, [pc, #120]	@ (3401cba4 <_dtoa_r+0x2cc>)
3401cb2c:	4602      	mov	r2, r0
3401cb2e:	f240 11af 	movw	r1, #431	@ 0x1af
3401cb32:	e6ea      	b.n	3401c90a <_dtoa_r+0x32>
3401cb34:	2200      	movs	r2, #0
3401cb36:	e7e1      	b.n	3401cafc <_dtoa_r+0x224>
3401cb38:	2200      	movs	r2, #0
3401cb3a:	e7d3      	b.n	3401cae4 <_dtoa_r+0x20c>
3401cb3c:	2401      	movs	r4, #1
3401cb3e:	2200      	movs	r2, #0
3401cb40:	e9cd 2407 	strd	r2, r4, [sp, #28]
3401cb44:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3401cb48:	2100      	movs	r1, #0
3401cb4a:	2212      	movs	r2, #18
3401cb4c:	46da      	mov	sl, fp
3401cb4e:	9109      	str	r1, [sp, #36]	@ 0x24
3401cb50:	e7da      	b.n	3401cb08 <_dtoa_r+0x230>
3401cb52:	2201      	movs	r2, #1
3401cb54:	9208      	str	r2, [sp, #32]
3401cb56:	e7f5      	b.n	3401cb44 <_dtoa_r+0x26c>
3401cb58:	f04f 0b01 	mov.w	fp, #1
3401cb5c:	46da      	mov	sl, fp
3401cb5e:	465a      	mov	r2, fp
3401cb60:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3401cb64:	e7d0      	b.n	3401cb08 <_dtoa_r+0x230>
3401cb66:	3101      	adds	r1, #1
3401cb68:	0040      	lsls	r0, r0, #1
3401cb6a:	e7d1      	b.n	3401cb10 <_dtoa_r+0x238>
3401cb6c:	f3af 8000 	nop.w
3401cb70:	636f4361 	.word	0x636f4361
3401cb74:	3fd287a7 	.word	0x3fd287a7
3401cb78:	8b60c8b3 	.word	0x8b60c8b3
3401cb7c:	3fc68a28 	.word	0x3fc68a28
3401cb80:	509f79fb 	.word	0x509f79fb
3401cb84:	3fd34413 	.word	0x3fd34413
3401cb88:	340203c1 	.word	0x340203c1
3401cb8c:	340203d8 	.word	0x340203d8
3401cb90:	7ff00000 	.word	0x7ff00000
3401cb94:	340203bd 	.word	0x340203bd
3401cb98:	3401fcfb 	.word	0x3401fcfb
3401cb9c:	3401fcfa 	.word	0x3401fcfa
3401cba0:	340204f0 	.word	0x340204f0
3401cba4:	34020430 	.word	0x34020430
3401cba8:	f8d9 201c 	ldr.w	r2, [r9, #28]
3401cbac:	f1ba 0f0e 	cmp.w	sl, #14
3401cbb0:	6010      	str	r0, [r2, #0]
3401cbb2:	d86e      	bhi.n	3401cc92 <_dtoa_r+0x3ba>
3401cbb4:	2c00      	cmp	r4, #0
3401cbb6:	d06c      	beq.n	3401cc92 <_dtoa_r+0x3ba>
3401cbb8:	f1b8 0f00 	cmp.w	r8, #0
3401cbbc:	f340 80b4 	ble.w	3401cd28 <_dtoa_r+0x450>
3401cbc0:	f008 010f 	and.w	r1, r8, #15
3401cbc4:	4ac7      	ldr	r2, [pc, #796]	@ (3401cee4 <_dtoa_r+0x60c>)
3401cbc6:	f418 7f80 	tst.w	r8, #256	@ 0x100
3401cbca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3401cbce:	ea4f 1128 	mov.w	r1, r8, asr #4
3401cbd2:	ed92 7b00 	vldr	d7, [r2]
3401cbd6:	f000 809b 	beq.w	3401cd10 <_dtoa_r+0x438>
3401cbda:	4ac3      	ldr	r2, [pc, #780]	@ (3401cee8 <_dtoa_r+0x610>)
3401cbdc:	f001 010f 	and.w	r1, r1, #15
3401cbe0:	ed92 6b08 	vldr	d6, [r2, #32]
3401cbe4:	2203      	movs	r2, #3
3401cbe6:	ee88 6b06 	vdiv.f64	d6, d8, d6
3401cbea:	ed8d 6b02 	vstr	d6, [sp, #8]
3401cbee:	48be      	ldr	r0, [pc, #760]	@ (3401cee8 <_dtoa_r+0x610>)
3401cbf0:	2900      	cmp	r1, #0
3401cbf2:	f040 808f 	bne.w	3401cd14 <_dtoa_r+0x43c>
3401cbf6:	ed9d 6b02 	vldr	d6, [sp, #8]
3401cbfa:	ee86 7b07 	vdiv.f64	d7, d6, d7
3401cbfe:	ed8d 7b02 	vstr	d7, [sp, #8]
3401cc02:	990c      	ldr	r1, [sp, #48]	@ 0x30
3401cc04:	ed9d 7b02 	vldr	d7, [sp, #8]
3401cc08:	2900      	cmp	r1, #0
3401cc0a:	f000 80b3 	beq.w	3401cd74 <_dtoa_r+0x49c>
3401cc0e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3401cc12:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401cc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cc1a:	f140 80ab 	bpl.w	3401cd74 <_dtoa_r+0x49c>
3401cc1e:	f1ba 0f00 	cmp.w	sl, #0
3401cc22:	f000 80a7 	beq.w	3401cd74 <_dtoa_r+0x49c>
3401cc26:	f1bb 0f00 	cmp.w	fp, #0
3401cc2a:	dd30      	ble.n	3401cc8e <_dtoa_r+0x3b6>
3401cc2c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3401cc30:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3401cc34:	3201      	adds	r2, #1
3401cc36:	465c      	mov	r4, fp
3401cc38:	9105      	str	r1, [sp, #20]
3401cc3a:	ee27 7b06 	vmul.f64	d7, d7, d6
3401cc3e:	ed8d 7b02 	vstr	d7, [sp, #8]
3401cc42:	ee07 2a90 	vmov	s15, r2
3401cc46:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3401cc4a:	ed9d 6b02 	vldr	d6, [sp, #8]
3401cc4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3401cc52:	eea7 5b06 	vfma.f64	d5, d7, d6
3401cc56:	ee15 2a90 	vmov	r2, s11
3401cc5a:	ec51 0b15 	vmov	r0, r1, d5
3401cc5e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3401cc62:	2c00      	cmp	r4, #0
3401cc64:	f040 808a 	bne.w	3401cd7c <_dtoa_r+0x4a4>
3401cc68:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401cc6c:	ee36 6b47 	vsub.f64	d6, d6, d7
3401cc70:	ec41 0b17 	vmov	d7, r0, r1
3401cc74:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401cc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cc7c:	f300 826a 	bgt.w	3401d154 <_dtoa_r+0x87c>
3401cc80:	eeb1 7b47 	vneg.f64	d7, d7
3401cc84:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401cc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cc8c:	d423      	bmi.n	3401ccd6 <_dtoa_r+0x3fe>
3401cc8e:	ed8d 8b02 	vstr	d8, [sp, #8]
3401cc92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3401cc94:	2a00      	cmp	r2, #0
3401cc96:	f2c0 8129 	blt.w	3401ceec <_dtoa_r+0x614>
3401cc9a:	f1b8 0f0e 	cmp.w	r8, #14
3401cc9e:	f300 8125 	bgt.w	3401ceec <_dtoa_r+0x614>
3401cca2:	4b90      	ldr	r3, [pc, #576]	@ (3401cee4 <_dtoa_r+0x60c>)
3401cca4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3401cca8:	ed93 6b00 	vldr	d6, [r3]
3401ccac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401ccae:	2b00      	cmp	r3, #0
3401ccb0:	f280 80c8 	bge.w	3401ce44 <_dtoa_r+0x56c>
3401ccb4:	f1ba 0f00 	cmp.w	sl, #0
3401ccb8:	f300 80c4 	bgt.w	3401ce44 <_dtoa_r+0x56c>
3401ccbc:	d10b      	bne.n	3401ccd6 <_dtoa_r+0x3fe>
3401ccbe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401ccc2:	ee26 6b07 	vmul.f64	d6, d6, d7
3401ccc6:	ed9d 7b02 	vldr	d7, [sp, #8]
3401ccca:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401ccce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ccd2:	f2c0 823c 	blt.w	3401d14e <_dtoa_r+0x876>
3401ccd6:	2400      	movs	r4, #0
3401ccd8:	4625      	mov	r5, r4
3401ccda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401ccdc:	463e      	mov	r6, r7
3401ccde:	43db      	mvns	r3, r3
3401cce0:	9305      	str	r3, [sp, #20]
3401cce2:	f04f 0800 	mov.w	r8, #0
3401cce6:	4621      	mov	r1, r4
3401cce8:	4648      	mov	r0, r9
3401ccea:	f000 fbdd 	bl	3401d4a8 <_Bfree>
3401ccee:	2d00      	cmp	r5, #0
3401ccf0:	f000 80a2 	beq.w	3401ce38 <_dtoa_r+0x560>
3401ccf4:	f1b8 0f00 	cmp.w	r8, #0
3401ccf8:	d005      	beq.n	3401cd06 <_dtoa_r+0x42e>
3401ccfa:	45a8      	cmp	r8, r5
3401ccfc:	d003      	beq.n	3401cd06 <_dtoa_r+0x42e>
3401ccfe:	4641      	mov	r1, r8
3401cd00:	4648      	mov	r0, r9
3401cd02:	f000 fbd1 	bl	3401d4a8 <_Bfree>
3401cd06:	4629      	mov	r1, r5
3401cd08:	4648      	mov	r0, r9
3401cd0a:	f000 fbcd 	bl	3401d4a8 <_Bfree>
3401cd0e:	e093      	b.n	3401ce38 <_dtoa_r+0x560>
3401cd10:	2202      	movs	r2, #2
3401cd12:	e76c      	b.n	3401cbee <_dtoa_r+0x316>
3401cd14:	07cc      	lsls	r4, r1, #31
3401cd16:	d504      	bpl.n	3401cd22 <_dtoa_r+0x44a>
3401cd18:	3201      	adds	r2, #1
3401cd1a:	ed90 6b00 	vldr	d6, [r0]
3401cd1e:	ee27 7b06 	vmul.f64	d7, d7, d6
3401cd22:	1049      	asrs	r1, r1, #1
3401cd24:	3008      	adds	r0, #8
3401cd26:	e763      	b.n	3401cbf0 <_dtoa_r+0x318>
3401cd28:	d022      	beq.n	3401cd70 <_dtoa_r+0x498>
3401cd2a:	f1c8 0100 	rsb	r1, r8, #0
3401cd2e:	4a6d      	ldr	r2, [pc, #436]	@ (3401cee4 <_dtoa_r+0x60c>)
3401cd30:	2400      	movs	r4, #0
3401cd32:	f001 000f 	and.w	r0, r1, #15
3401cd36:	1109      	asrs	r1, r1, #4
3401cd38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3401cd3c:	486a      	ldr	r0, [pc, #424]	@ (3401cee8 <_dtoa_r+0x610>)
3401cd3e:	ed92 7b00 	vldr	d7, [r2]
3401cd42:	2202      	movs	r2, #2
3401cd44:	ee28 7b07 	vmul.f64	d7, d8, d7
3401cd48:	ed8d 7b02 	vstr	d7, [sp, #8]
3401cd4c:	b929      	cbnz	r1, 3401cd5a <_dtoa_r+0x482>
3401cd4e:	2c00      	cmp	r4, #0
3401cd50:	f43f af57 	beq.w	3401cc02 <_dtoa_r+0x32a>
3401cd54:	ed8d 7b02 	vstr	d7, [sp, #8]
3401cd58:	e753      	b.n	3401cc02 <_dtoa_r+0x32a>
3401cd5a:	07ce      	lsls	r6, r1, #31
3401cd5c:	d505      	bpl.n	3401cd6a <_dtoa_r+0x492>
3401cd5e:	3201      	adds	r2, #1
3401cd60:	2401      	movs	r4, #1
3401cd62:	ed90 6b00 	vldr	d6, [r0]
3401cd66:	ee27 7b06 	vmul.f64	d7, d7, d6
3401cd6a:	1049      	asrs	r1, r1, #1
3401cd6c:	3008      	adds	r0, #8
3401cd6e:	e7ed      	b.n	3401cd4c <_dtoa_r+0x474>
3401cd70:	2202      	movs	r2, #2
3401cd72:	e746      	b.n	3401cc02 <_dtoa_r+0x32a>
3401cd74:	4654      	mov	r4, sl
3401cd76:	f8cd 8014 	str.w	r8, [sp, #20]
3401cd7a:	e762      	b.n	3401cc42 <_dtoa_r+0x36a>
3401cd7c:	4a59      	ldr	r2, [pc, #356]	@ (3401cee4 <_dtoa_r+0x60c>)
3401cd7e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3401cd82:	443c      	add	r4, r7
3401cd84:	ed12 4b02 	vldr	d4, [r2, #-8]
3401cd88:	9a08      	ldr	r2, [sp, #32]
3401cd8a:	ec41 0b17 	vmov	d7, r0, r1
3401cd8e:	b34a      	cbz	r2, 3401cde4 <_dtoa_r+0x50c>
3401cd90:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3401cd94:	463e      	mov	r6, r7
3401cd96:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3401cd9a:	ee83 5b04 	vdiv.f64	d5, d3, d4
3401cd9e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3401cda2:	ee35 7b47 	vsub.f64	d7, d5, d7
3401cda6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401cdaa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401cdae:	ee14 2a90 	vmov	r2, s9
3401cdb2:	3230      	adds	r2, #48	@ 0x30
3401cdb4:	ee36 6b45 	vsub.f64	d6, d6, d5
3401cdb8:	f806 2b01 	strb.w	r2, [r6], #1
3401cdbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cdc4:	d438      	bmi.n	3401ce38 <_dtoa_r+0x560>
3401cdc6:	ee32 5b46 	vsub.f64	d5, d2, d6
3401cdca:	eeb4 5bc7 	vcmpe.f64	d5, d7
3401cdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cdd2:	d46e      	bmi.n	3401ceb2 <_dtoa_r+0x5da>
3401cdd4:	42a6      	cmp	r6, r4
3401cdd6:	f43f af5a 	beq.w	3401cc8e <_dtoa_r+0x3b6>
3401cdda:	ee27 7b03 	vmul.f64	d7, d7, d3
3401cdde:	ee26 6b03 	vmul.f64	d6, d6, d3
3401cde2:	e7e0      	b.n	3401cda6 <_dtoa_r+0x4ce>
3401cde4:	ee27 7b04 	vmul.f64	d7, d7, d4
3401cde8:	4621      	mov	r1, r4
3401cdea:	463e      	mov	r6, r7
3401cdec:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3401cdf0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401cdf4:	ee14 2a90 	vmov	r2, s9
3401cdf8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401cdfc:	3230      	adds	r2, #48	@ 0x30
3401cdfe:	ee36 6b45 	vsub.f64	d6, d6, d5
3401ce02:	f806 2b01 	strb.w	r2, [r6], #1
3401ce06:	42a6      	cmp	r6, r4
3401ce08:	d119      	bne.n	3401ce3e <_dtoa_r+0x566>
3401ce0a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3401ce0e:	ee37 4b05 	vadd.f64	d4, d7, d5
3401ce12:	eeb4 6bc4 	vcmpe.f64	d6, d4
3401ce16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ce1a:	dc4a      	bgt.n	3401ceb2 <_dtoa_r+0x5da>
3401ce1c:	ee35 5b47 	vsub.f64	d5, d5, d7
3401ce20:	eeb4 6bc5 	vcmpe.f64	d6, d5
3401ce24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ce28:	f57f af31 	bpl.w	3401cc8e <_dtoa_r+0x3b6>
3401ce2c:	460e      	mov	r6, r1
3401ce2e:	3901      	subs	r1, #1
3401ce30:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3401ce34:	2b30      	cmp	r3, #48	@ 0x30
3401ce36:	d0f9      	beq.n	3401ce2c <_dtoa_r+0x554>
3401ce38:	f8dd 8014 	ldr.w	r8, [sp, #20]
3401ce3c:	e027      	b.n	3401ce8e <_dtoa_r+0x5b6>
3401ce3e:	ee26 6b03 	vmul.f64	d6, d6, d3
3401ce42:	e7d5      	b.n	3401cdf0 <_dtoa_r+0x518>
3401ce44:	ed9d 7b02 	vldr	d7, [sp, #8]
3401ce48:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3401ce4c:	463e      	mov	r6, r7
3401ce4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
3401ce52:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3401ce56:	ee15 3a10 	vmov	r3, s10
3401ce5a:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3401ce5e:	3330      	adds	r3, #48	@ 0x30
3401ce60:	eea3 7b46 	vfms.f64	d7, d3, d6
3401ce64:	f806 3b01 	strb.w	r3, [r6], #1
3401ce68:	1bf3      	subs	r3, r6, r7
3401ce6a:	459a      	cmp	sl, r3
3401ce6c:	d132      	bne.n	3401ced4 <_dtoa_r+0x5fc>
3401ce6e:	ee37 7b07 	vadd.f64	d7, d7, d7
3401ce72:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401ce76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ce7a:	dc18      	bgt.n	3401ceae <_dtoa_r+0x5d6>
3401ce7c:	eeb4 7b46 	vcmp.f64	d7, d6
3401ce80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ce84:	d103      	bne.n	3401ce8e <_dtoa_r+0x5b6>
3401ce86:	ee15 3a10 	vmov	r3, s10
3401ce8a:	07db      	lsls	r3, r3, #31
3401ce8c:	d40f      	bmi.n	3401ceae <_dtoa_r+0x5d6>
3401ce8e:	9901      	ldr	r1, [sp, #4]
3401ce90:	4648      	mov	r0, r9
3401ce92:	f000 fb09 	bl	3401d4a8 <_Bfree>
3401ce96:	2300      	movs	r3, #0
3401ce98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401ce9a:	7033      	strb	r3, [r6, #0]
3401ce9c:	f108 0301 	add.w	r3, r8, #1
3401cea0:	6013      	str	r3, [r2, #0]
3401cea2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401cea4:	2b00      	cmp	r3, #0
3401cea6:	f000 824b 	beq.w	3401d340 <_dtoa_r+0xa68>
3401ceaa:	601e      	str	r6, [r3, #0]
3401ceac:	e248      	b.n	3401d340 <_dtoa_r+0xa68>
3401ceae:	f8cd 8014 	str.w	r8, [sp, #20]
3401ceb2:	4633      	mov	r3, r6
3401ceb4:	461e      	mov	r6, r3
3401ceb6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401ceba:	2a39      	cmp	r2, #57	@ 0x39
3401cebc:	d106      	bne.n	3401cecc <_dtoa_r+0x5f4>
3401cebe:	429f      	cmp	r7, r3
3401cec0:	d1f8      	bne.n	3401ceb4 <_dtoa_r+0x5dc>
3401cec2:	9a05      	ldr	r2, [sp, #20]
3401cec4:	3201      	adds	r2, #1
3401cec6:	9205      	str	r2, [sp, #20]
3401cec8:	2230      	movs	r2, #48	@ 0x30
3401ceca:	703a      	strb	r2, [r7, #0]
3401cecc:	781a      	ldrb	r2, [r3, #0]
3401cece:	3201      	adds	r2, #1
3401ced0:	701a      	strb	r2, [r3, #0]
3401ced2:	e7b1      	b.n	3401ce38 <_dtoa_r+0x560>
3401ced4:	ee27 7b04 	vmul.f64	d7, d7, d4
3401ced8:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401cedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cee0:	d1b5      	bne.n	3401ce4e <_dtoa_r+0x576>
3401cee2:	e7d4      	b.n	3401ce8e <_dtoa_r+0x5b6>
3401cee4:	340204f0 	.word	0x340204f0
3401cee8:	340204c8 	.word	0x340204c8
3401ceec:	9908      	ldr	r1, [sp, #32]
3401ceee:	2900      	cmp	r1, #0
3401cef0:	f000 80e9 	beq.w	3401d0c6 <_dtoa_r+0x7ee>
3401cef4:	9907      	ldr	r1, [sp, #28]
3401cef6:	2901      	cmp	r1, #1
3401cef8:	f300 80cb 	bgt.w	3401d092 <_dtoa_r+0x7ba>
3401cefc:	2d00      	cmp	r5, #0
3401cefe:	f000 80c4 	beq.w	3401d08a <_dtoa_r+0x7b2>
3401cf02:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3401cf06:	461c      	mov	r4, r3
3401cf08:	9e04      	ldr	r6, [sp, #16]
3401cf0a:	9305      	str	r3, [sp, #20]
3401cf0c:	2101      	movs	r1, #1
3401cf0e:	9b04      	ldr	r3, [sp, #16]
3401cf10:	4648      	mov	r0, r9
3401cf12:	4413      	add	r3, r2
3401cf14:	9304      	str	r3, [sp, #16]
3401cf16:	9b06      	ldr	r3, [sp, #24]
3401cf18:	4413      	add	r3, r2
3401cf1a:	9306      	str	r3, [sp, #24]
3401cf1c:	f000 fb7a 	bl	3401d614 <__i2b>
3401cf20:	9b05      	ldr	r3, [sp, #20]
3401cf22:	4605      	mov	r5, r0
3401cf24:	b166      	cbz	r6, 3401cf40 <_dtoa_r+0x668>
3401cf26:	9a06      	ldr	r2, [sp, #24]
3401cf28:	2a00      	cmp	r2, #0
3401cf2a:	dd09      	ble.n	3401cf40 <_dtoa_r+0x668>
3401cf2c:	42b2      	cmp	r2, r6
3401cf2e:	9904      	ldr	r1, [sp, #16]
3401cf30:	bfa8      	it	ge
3401cf32:	4632      	movge	r2, r6
3401cf34:	1a89      	subs	r1, r1, r2
3401cf36:	1ab6      	subs	r6, r6, r2
3401cf38:	9104      	str	r1, [sp, #16]
3401cf3a:	9906      	ldr	r1, [sp, #24]
3401cf3c:	1a8a      	subs	r2, r1, r2
3401cf3e:	9206      	str	r2, [sp, #24]
3401cf40:	b30b      	cbz	r3, 3401cf86 <_dtoa_r+0x6ae>
3401cf42:	9a08      	ldr	r2, [sp, #32]
3401cf44:	2a00      	cmp	r2, #0
3401cf46:	f000 80c5 	beq.w	3401d0d4 <_dtoa_r+0x7fc>
3401cf4a:	2c00      	cmp	r4, #0
3401cf4c:	f000 80bf 	beq.w	3401d0ce <_dtoa_r+0x7f6>
3401cf50:	4629      	mov	r1, r5
3401cf52:	4622      	mov	r2, r4
3401cf54:	4648      	mov	r0, r9
3401cf56:	930b      	str	r3, [sp, #44]	@ 0x2c
3401cf58:	f000 fc16 	bl	3401d788 <__pow5mult>
3401cf5c:	9a01      	ldr	r2, [sp, #4]
3401cf5e:	4601      	mov	r1, r0
3401cf60:	4605      	mov	r5, r0
3401cf62:	4648      	mov	r0, r9
3401cf64:	f000 fb6c 	bl	3401d640 <__multiply>
3401cf68:	9901      	ldr	r1, [sp, #4]
3401cf6a:	9005      	str	r0, [sp, #20]
3401cf6c:	4648      	mov	r0, r9
3401cf6e:	f000 fa9b 	bl	3401d4a8 <_Bfree>
3401cf72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401cf74:	1b1b      	subs	r3, r3, r4
3401cf76:	f000 80b0 	beq.w	3401d0da <_dtoa_r+0x802>
3401cf7a:	461a      	mov	r2, r3
3401cf7c:	9905      	ldr	r1, [sp, #20]
3401cf7e:	4648      	mov	r0, r9
3401cf80:	f000 fc02 	bl	3401d788 <__pow5mult>
3401cf84:	9001      	str	r0, [sp, #4]
3401cf86:	2101      	movs	r1, #1
3401cf88:	4648      	mov	r0, r9
3401cf8a:	f000 fb43 	bl	3401d614 <__i2b>
3401cf8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401cf90:	4604      	mov	r4, r0
3401cf92:	2b00      	cmp	r3, #0
3401cf94:	f000 81da 	beq.w	3401d34c <_dtoa_r+0xa74>
3401cf98:	461a      	mov	r2, r3
3401cf9a:	4601      	mov	r1, r0
3401cf9c:	4648      	mov	r0, r9
3401cf9e:	f000 fbf3 	bl	3401d788 <__pow5mult>
3401cfa2:	9b07      	ldr	r3, [sp, #28]
3401cfa4:	4604      	mov	r4, r0
3401cfa6:	2b01      	cmp	r3, #1
3401cfa8:	f300 80a0 	bgt.w	3401d0ec <_dtoa_r+0x814>
3401cfac:	9b02      	ldr	r3, [sp, #8]
3401cfae:	2b00      	cmp	r3, #0
3401cfb0:	f040 8096 	bne.w	3401d0e0 <_dtoa_r+0x808>
3401cfb4:	9b03      	ldr	r3, [sp, #12]
3401cfb6:	f3c3 0213 	ubfx	r2, r3, #0, #20
3401cfba:	2a00      	cmp	r2, #0
3401cfbc:	f040 8092 	bne.w	3401d0e4 <_dtoa_r+0x80c>
3401cfc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3401cfc4:	0d12      	lsrs	r2, r2, #20
3401cfc6:	0512      	lsls	r2, r2, #20
3401cfc8:	2a00      	cmp	r2, #0
3401cfca:	f000 808d 	beq.w	3401d0e8 <_dtoa_r+0x810>
3401cfce:	9b04      	ldr	r3, [sp, #16]
3401cfd0:	3301      	adds	r3, #1
3401cfd2:	9304      	str	r3, [sp, #16]
3401cfd4:	9b06      	ldr	r3, [sp, #24]
3401cfd6:	3301      	adds	r3, #1
3401cfd8:	9306      	str	r3, [sp, #24]
3401cfda:	2301      	movs	r3, #1
3401cfdc:	930b      	str	r3, [sp, #44]	@ 0x2c
3401cfde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401cfe0:	2b00      	cmp	r3, #0
3401cfe2:	f000 81b9 	beq.w	3401d358 <_dtoa_r+0xa80>
3401cfe6:	6922      	ldr	r2, [r4, #16]
3401cfe8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3401cfec:	6910      	ldr	r0, [r2, #16]
3401cfee:	f000 fac5 	bl	3401d57c <__hi0bits>
3401cff2:	f1c0 0020 	rsb	r0, r0, #32
3401cff6:	9b06      	ldr	r3, [sp, #24]
3401cff8:	4418      	add	r0, r3
3401cffa:	f010 001f 	ands.w	r0, r0, #31
3401cffe:	f000 8081 	beq.w	3401d104 <_dtoa_r+0x82c>
3401d002:	f1c0 0220 	rsb	r2, r0, #32
3401d006:	2a04      	cmp	r2, #4
3401d008:	dd73      	ble.n	3401d0f2 <_dtoa_r+0x81a>
3401d00a:	f1c0 001c 	rsb	r0, r0, #28
3401d00e:	9b04      	ldr	r3, [sp, #16]
3401d010:	4403      	add	r3, r0
3401d012:	4406      	add	r6, r0
3401d014:	9304      	str	r3, [sp, #16]
3401d016:	9b06      	ldr	r3, [sp, #24]
3401d018:	4403      	add	r3, r0
3401d01a:	9306      	str	r3, [sp, #24]
3401d01c:	9b04      	ldr	r3, [sp, #16]
3401d01e:	2b00      	cmp	r3, #0
3401d020:	dd05      	ble.n	3401d02e <_dtoa_r+0x756>
3401d022:	461a      	mov	r2, r3
3401d024:	9901      	ldr	r1, [sp, #4]
3401d026:	4648      	mov	r0, r9
3401d028:	f000 fc08 	bl	3401d83c <__lshift>
3401d02c:	9001      	str	r0, [sp, #4]
3401d02e:	9b06      	ldr	r3, [sp, #24]
3401d030:	2b00      	cmp	r3, #0
3401d032:	dd05      	ble.n	3401d040 <_dtoa_r+0x768>
3401d034:	4621      	mov	r1, r4
3401d036:	461a      	mov	r2, r3
3401d038:	4648      	mov	r0, r9
3401d03a:	f000 fbff 	bl	3401d83c <__lshift>
3401d03e:	4604      	mov	r4, r0
3401d040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3401d042:	2b00      	cmp	r3, #0
3401d044:	d060      	beq.n	3401d108 <_dtoa_r+0x830>
3401d046:	4621      	mov	r1, r4
3401d048:	9801      	ldr	r0, [sp, #4]
3401d04a:	f000 fc63 	bl	3401d914 <__mcmp>
3401d04e:	2800      	cmp	r0, #0
3401d050:	da5a      	bge.n	3401d108 <_dtoa_r+0x830>
3401d052:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3401d056:	220a      	movs	r2, #10
3401d058:	9901      	ldr	r1, [sp, #4]
3401d05a:	4648      	mov	r0, r9
3401d05c:	9305      	str	r3, [sp, #20]
3401d05e:	2300      	movs	r3, #0
3401d060:	f000 fa44 	bl	3401d4ec <__multadd>
3401d064:	9b08      	ldr	r3, [sp, #32]
3401d066:	9001      	str	r0, [sp, #4]
3401d068:	2b00      	cmp	r3, #0
3401d06a:	f000 8177 	beq.w	3401d35c <_dtoa_r+0xa84>
3401d06e:	4629      	mov	r1, r5
3401d070:	2300      	movs	r3, #0
3401d072:	220a      	movs	r2, #10
3401d074:	4648      	mov	r0, r9
3401d076:	f000 fa39 	bl	3401d4ec <__multadd>
3401d07a:	f1bb 0f00 	cmp.w	fp, #0
3401d07e:	4605      	mov	r5, r0
3401d080:	dc6e      	bgt.n	3401d160 <_dtoa_r+0x888>
3401d082:	9b07      	ldr	r3, [sp, #28]
3401d084:	2b02      	cmp	r3, #2
3401d086:	dc48      	bgt.n	3401d11a <_dtoa_r+0x842>
3401d088:	e06a      	b.n	3401d160 <_dtoa_r+0x888>
3401d08a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401d08c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3401d090:	e739      	b.n	3401cf06 <_dtoa_r+0x62e>
3401d092:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3401d096:	42a3      	cmp	r3, r4
3401d098:	db07      	blt.n	3401d0aa <_dtoa_r+0x7d2>
3401d09a:	f1ba 0f00 	cmp.w	sl, #0
3401d09e:	eba3 0404 	sub.w	r4, r3, r4
3401d0a2:	db0b      	blt.n	3401d0bc <_dtoa_r+0x7e4>
3401d0a4:	9e04      	ldr	r6, [sp, #16]
3401d0a6:	4652      	mov	r2, sl
3401d0a8:	e72f      	b.n	3401cf0a <_dtoa_r+0x632>
3401d0aa:	1ae2      	subs	r2, r4, r3
3401d0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401d0ae:	9e04      	ldr	r6, [sp, #16]
3401d0b0:	4413      	add	r3, r2
3401d0b2:	4652      	mov	r2, sl
3401d0b4:	930a      	str	r3, [sp, #40]	@ 0x28
3401d0b6:	4623      	mov	r3, r4
3401d0b8:	2400      	movs	r4, #0
3401d0ba:	e726      	b.n	3401cf0a <_dtoa_r+0x632>
3401d0bc:	9a04      	ldr	r2, [sp, #16]
3401d0be:	eba2 060a 	sub.w	r6, r2, sl
3401d0c2:	2200      	movs	r2, #0
3401d0c4:	e721      	b.n	3401cf0a <_dtoa_r+0x632>
3401d0c6:	461c      	mov	r4, r3
3401d0c8:	9e04      	ldr	r6, [sp, #16]
3401d0ca:	9d08      	ldr	r5, [sp, #32]
3401d0cc:	e72a      	b.n	3401cf24 <_dtoa_r+0x64c>
3401d0ce:	9a01      	ldr	r2, [sp, #4]
3401d0d0:	9205      	str	r2, [sp, #20]
3401d0d2:	e752      	b.n	3401cf7a <_dtoa_r+0x6a2>
3401d0d4:	461a      	mov	r2, r3
3401d0d6:	9901      	ldr	r1, [sp, #4]
3401d0d8:	e751      	b.n	3401cf7e <_dtoa_r+0x6a6>
3401d0da:	9b05      	ldr	r3, [sp, #20]
3401d0dc:	9301      	str	r3, [sp, #4]
3401d0de:	e752      	b.n	3401cf86 <_dtoa_r+0x6ae>
3401d0e0:	2300      	movs	r3, #0
3401d0e2:	e77b      	b.n	3401cfdc <_dtoa_r+0x704>
3401d0e4:	9b02      	ldr	r3, [sp, #8]
3401d0e6:	e779      	b.n	3401cfdc <_dtoa_r+0x704>
3401d0e8:	920b      	str	r2, [sp, #44]	@ 0x2c
3401d0ea:	e778      	b.n	3401cfde <_dtoa_r+0x706>
3401d0ec:	2300      	movs	r3, #0
3401d0ee:	930b      	str	r3, [sp, #44]	@ 0x2c
3401d0f0:	e779      	b.n	3401cfe6 <_dtoa_r+0x70e>
3401d0f2:	d093      	beq.n	3401d01c <_dtoa_r+0x744>
3401d0f4:	321c      	adds	r2, #28
3401d0f6:	9b04      	ldr	r3, [sp, #16]
3401d0f8:	4413      	add	r3, r2
3401d0fa:	4416      	add	r6, r2
3401d0fc:	9304      	str	r3, [sp, #16]
3401d0fe:	9b06      	ldr	r3, [sp, #24]
3401d100:	4413      	add	r3, r2
3401d102:	e78a      	b.n	3401d01a <_dtoa_r+0x742>
3401d104:	4602      	mov	r2, r0
3401d106:	e7f5      	b.n	3401d0f4 <_dtoa_r+0x81c>
3401d108:	f1ba 0f00 	cmp.w	sl, #0
3401d10c:	46d3      	mov	fp, sl
3401d10e:	f8cd 8014 	str.w	r8, [sp, #20]
3401d112:	dc21      	bgt.n	3401d158 <_dtoa_r+0x880>
3401d114:	9b07      	ldr	r3, [sp, #28]
3401d116:	2b02      	cmp	r3, #2
3401d118:	dd1e      	ble.n	3401d158 <_dtoa_r+0x880>
3401d11a:	f1bb 0f00 	cmp.w	fp, #0
3401d11e:	f47f addc 	bne.w	3401ccda <_dtoa_r+0x402>
3401d122:	4621      	mov	r1, r4
3401d124:	465b      	mov	r3, fp
3401d126:	2205      	movs	r2, #5
3401d128:	4648      	mov	r0, r9
3401d12a:	f000 f9df 	bl	3401d4ec <__multadd>
3401d12e:	4601      	mov	r1, r0
3401d130:	4604      	mov	r4, r0
3401d132:	9801      	ldr	r0, [sp, #4]
3401d134:	f000 fbee 	bl	3401d914 <__mcmp>
3401d138:	2800      	cmp	r0, #0
3401d13a:	f77f adce 	ble.w	3401ccda <_dtoa_r+0x402>
3401d13e:	2331      	movs	r3, #49	@ 0x31
3401d140:	463e      	mov	r6, r7
3401d142:	f806 3b01 	strb.w	r3, [r6], #1
3401d146:	9b05      	ldr	r3, [sp, #20]
3401d148:	3301      	adds	r3, #1
3401d14a:	9305      	str	r3, [sp, #20]
3401d14c:	e5c9      	b.n	3401cce2 <_dtoa_r+0x40a>
3401d14e:	4654      	mov	r4, sl
3401d150:	f8cd 8014 	str.w	r8, [sp, #20]
3401d154:	4625      	mov	r5, r4
3401d156:	e7f2      	b.n	3401d13e <_dtoa_r+0x866>
3401d158:	9b08      	ldr	r3, [sp, #32]
3401d15a:	2b00      	cmp	r3, #0
3401d15c:	f000 8102 	beq.w	3401d364 <_dtoa_r+0xa8c>
3401d160:	2e00      	cmp	r6, #0
3401d162:	dd05      	ble.n	3401d170 <_dtoa_r+0x898>
3401d164:	4629      	mov	r1, r5
3401d166:	4632      	mov	r2, r6
3401d168:	4648      	mov	r0, r9
3401d16a:	f000 fb67 	bl	3401d83c <__lshift>
3401d16e:	4605      	mov	r5, r0
3401d170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401d172:	2b00      	cmp	r3, #0
3401d174:	d058      	beq.n	3401d228 <_dtoa_r+0x950>
3401d176:	6869      	ldr	r1, [r5, #4]
3401d178:	4648      	mov	r0, r9
3401d17a:	f000 f955 	bl	3401d428 <_Balloc>
3401d17e:	4606      	mov	r6, r0
3401d180:	b928      	cbnz	r0, 3401d18e <_dtoa_r+0x8b6>
3401d182:	4b82      	ldr	r3, [pc, #520]	@ (3401d38c <_dtoa_r+0xab4>)
3401d184:	4602      	mov	r2, r0
3401d186:	f240 21ef 	movw	r1, #751	@ 0x2ef
3401d18a:	f7ff bbbe 	b.w	3401c90a <_dtoa_r+0x32>
3401d18e:	692a      	ldr	r2, [r5, #16]
3401d190:	f105 010c 	add.w	r1, r5, #12
3401d194:	300c      	adds	r0, #12
3401d196:	3202      	adds	r2, #2
3401d198:	0092      	lsls	r2, r2, #2
3401d19a:	f7ff fafa 	bl	3401c792 <memcpy>
3401d19e:	2201      	movs	r2, #1
3401d1a0:	4631      	mov	r1, r6
3401d1a2:	4648      	mov	r0, r9
3401d1a4:	f000 fb4a 	bl	3401d83c <__lshift>
3401d1a8:	1c7b      	adds	r3, r7, #1
3401d1aa:	46a8      	mov	r8, r5
3401d1ac:	4605      	mov	r5, r0
3401d1ae:	9304      	str	r3, [sp, #16]
3401d1b0:	eb07 030b 	add.w	r3, r7, fp
3401d1b4:	9309      	str	r3, [sp, #36]	@ 0x24
3401d1b6:	9b02      	ldr	r3, [sp, #8]
3401d1b8:	f003 0301 	and.w	r3, r3, #1
3401d1bc:	9308      	str	r3, [sp, #32]
3401d1be:	9b04      	ldr	r3, [sp, #16]
3401d1c0:	4621      	mov	r1, r4
3401d1c2:	9801      	ldr	r0, [sp, #4]
3401d1c4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3401d1c8:	f7ff faf7 	bl	3401c7ba <quorem>
3401d1cc:	4641      	mov	r1, r8
3401d1ce:	9002      	str	r0, [sp, #8]
3401d1d0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3401d1d4:	9801      	ldr	r0, [sp, #4]
3401d1d6:	f000 fb9d 	bl	3401d914 <__mcmp>
3401d1da:	462a      	mov	r2, r5
3401d1dc:	9006      	str	r0, [sp, #24]
3401d1de:	4621      	mov	r1, r4
3401d1e0:	4648      	mov	r0, r9
3401d1e2:	f000 fbb3 	bl	3401d94c <__mdiff>
3401d1e6:	68c2      	ldr	r2, [r0, #12]
3401d1e8:	4606      	mov	r6, r0
3401d1ea:	b9fa      	cbnz	r2, 3401d22c <_dtoa_r+0x954>
3401d1ec:	4601      	mov	r1, r0
3401d1ee:	9801      	ldr	r0, [sp, #4]
3401d1f0:	f000 fb90 	bl	3401d914 <__mcmp>
3401d1f4:	4602      	mov	r2, r0
3401d1f6:	4631      	mov	r1, r6
3401d1f8:	4648      	mov	r0, r9
3401d1fa:	920a      	str	r2, [sp, #40]	@ 0x28
3401d1fc:	f000 f954 	bl	3401d4a8 <_Bfree>
3401d200:	9b07      	ldr	r3, [sp, #28]
3401d202:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401d204:	9e04      	ldr	r6, [sp, #16]
3401d206:	ea42 0103 	orr.w	r1, r2, r3
3401d20a:	9b08      	ldr	r3, [sp, #32]
3401d20c:	4319      	orrs	r1, r3
3401d20e:	d10f      	bne.n	3401d230 <_dtoa_r+0x958>
3401d210:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401d214:	d028      	beq.n	3401d268 <_dtoa_r+0x990>
3401d216:	9b06      	ldr	r3, [sp, #24]
3401d218:	2b00      	cmp	r3, #0
3401d21a:	dd02      	ble.n	3401d222 <_dtoa_r+0x94a>
3401d21c:	9b02      	ldr	r3, [sp, #8]
3401d21e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3401d222:	f88b a000 	strb.w	sl, [fp]
3401d226:	e55e      	b.n	3401cce6 <_dtoa_r+0x40e>
3401d228:	4628      	mov	r0, r5
3401d22a:	e7bd      	b.n	3401d1a8 <_dtoa_r+0x8d0>
3401d22c:	2201      	movs	r2, #1
3401d22e:	e7e2      	b.n	3401d1f6 <_dtoa_r+0x91e>
3401d230:	9b06      	ldr	r3, [sp, #24]
3401d232:	2b00      	cmp	r3, #0
3401d234:	db04      	blt.n	3401d240 <_dtoa_r+0x968>
3401d236:	9907      	ldr	r1, [sp, #28]
3401d238:	430b      	orrs	r3, r1
3401d23a:	9908      	ldr	r1, [sp, #32]
3401d23c:	430b      	orrs	r3, r1
3401d23e:	d120      	bne.n	3401d282 <_dtoa_r+0x9aa>
3401d240:	2a00      	cmp	r2, #0
3401d242:	ddee      	ble.n	3401d222 <_dtoa_r+0x94a>
3401d244:	2201      	movs	r2, #1
3401d246:	9901      	ldr	r1, [sp, #4]
3401d248:	4648      	mov	r0, r9
3401d24a:	f000 faf7 	bl	3401d83c <__lshift>
3401d24e:	4621      	mov	r1, r4
3401d250:	9001      	str	r0, [sp, #4]
3401d252:	f000 fb5f 	bl	3401d914 <__mcmp>
3401d256:	2800      	cmp	r0, #0
3401d258:	dc03      	bgt.n	3401d262 <_dtoa_r+0x98a>
3401d25a:	d1e2      	bne.n	3401d222 <_dtoa_r+0x94a>
3401d25c:	f01a 0f01 	tst.w	sl, #1
3401d260:	d0df      	beq.n	3401d222 <_dtoa_r+0x94a>
3401d262:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401d266:	d1d9      	bne.n	3401d21c <_dtoa_r+0x944>
3401d268:	2339      	movs	r3, #57	@ 0x39
3401d26a:	f88b 3000 	strb.w	r3, [fp]
3401d26e:	4633      	mov	r3, r6
3401d270:	461e      	mov	r6, r3
3401d272:	3b01      	subs	r3, #1
3401d274:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3401d278:	2a39      	cmp	r2, #57	@ 0x39
3401d27a:	d052      	beq.n	3401d322 <_dtoa_r+0xa4a>
3401d27c:	3201      	adds	r2, #1
3401d27e:	701a      	strb	r2, [r3, #0]
3401d280:	e531      	b.n	3401cce6 <_dtoa_r+0x40e>
3401d282:	2a00      	cmp	r2, #0
3401d284:	dd07      	ble.n	3401d296 <_dtoa_r+0x9be>
3401d286:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401d28a:	d0ed      	beq.n	3401d268 <_dtoa_r+0x990>
3401d28c:	f10a 0301 	add.w	r3, sl, #1
3401d290:	f88b 3000 	strb.w	r3, [fp]
3401d294:	e527      	b.n	3401cce6 <_dtoa_r+0x40e>
3401d296:	9b04      	ldr	r3, [sp, #16]
3401d298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401d29a:	f803 ac01 	strb.w	sl, [r3, #-1]
3401d29e:	4293      	cmp	r3, r2
3401d2a0:	d029      	beq.n	3401d2f6 <_dtoa_r+0xa1e>
3401d2a2:	2300      	movs	r3, #0
3401d2a4:	220a      	movs	r2, #10
3401d2a6:	9901      	ldr	r1, [sp, #4]
3401d2a8:	4648      	mov	r0, r9
3401d2aa:	f000 f91f 	bl	3401d4ec <__multadd>
3401d2ae:	45a8      	cmp	r8, r5
3401d2b0:	9001      	str	r0, [sp, #4]
3401d2b2:	f04f 0300 	mov.w	r3, #0
3401d2b6:	f04f 020a 	mov.w	r2, #10
3401d2ba:	4641      	mov	r1, r8
3401d2bc:	4648      	mov	r0, r9
3401d2be:	d107      	bne.n	3401d2d0 <_dtoa_r+0x9f8>
3401d2c0:	f000 f914 	bl	3401d4ec <__multadd>
3401d2c4:	4680      	mov	r8, r0
3401d2c6:	4605      	mov	r5, r0
3401d2c8:	9b04      	ldr	r3, [sp, #16]
3401d2ca:	3301      	adds	r3, #1
3401d2cc:	9304      	str	r3, [sp, #16]
3401d2ce:	e776      	b.n	3401d1be <_dtoa_r+0x8e6>
3401d2d0:	f000 f90c 	bl	3401d4ec <__multadd>
3401d2d4:	4629      	mov	r1, r5
3401d2d6:	4680      	mov	r8, r0
3401d2d8:	2300      	movs	r3, #0
3401d2da:	220a      	movs	r2, #10
3401d2dc:	4648      	mov	r0, r9
3401d2de:	f000 f905 	bl	3401d4ec <__multadd>
3401d2e2:	4605      	mov	r5, r0
3401d2e4:	e7f0      	b.n	3401d2c8 <_dtoa_r+0x9f0>
3401d2e6:	f1bb 0f00 	cmp.w	fp, #0
3401d2ea:	f04f 0800 	mov.w	r8, #0
3401d2ee:	bfcc      	ite	gt
3401d2f0:	465e      	movgt	r6, fp
3401d2f2:	2601      	movle	r6, #1
3401d2f4:	443e      	add	r6, r7
3401d2f6:	2201      	movs	r2, #1
3401d2f8:	9901      	ldr	r1, [sp, #4]
3401d2fa:	4648      	mov	r0, r9
3401d2fc:	f000 fa9e 	bl	3401d83c <__lshift>
3401d300:	4621      	mov	r1, r4
3401d302:	9001      	str	r0, [sp, #4]
3401d304:	f000 fb06 	bl	3401d914 <__mcmp>
3401d308:	2800      	cmp	r0, #0
3401d30a:	dcb0      	bgt.n	3401d26e <_dtoa_r+0x996>
3401d30c:	d102      	bne.n	3401d314 <_dtoa_r+0xa3c>
3401d30e:	f01a 0f01 	tst.w	sl, #1
3401d312:	d1ac      	bne.n	3401d26e <_dtoa_r+0x996>
3401d314:	4633      	mov	r3, r6
3401d316:	461e      	mov	r6, r3
3401d318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401d31c:	2a30      	cmp	r2, #48	@ 0x30
3401d31e:	d0fa      	beq.n	3401d316 <_dtoa_r+0xa3e>
3401d320:	e4e1      	b.n	3401cce6 <_dtoa_r+0x40e>
3401d322:	429f      	cmp	r7, r3
3401d324:	d1a4      	bne.n	3401d270 <_dtoa_r+0x998>
3401d326:	9b05      	ldr	r3, [sp, #20]
3401d328:	3301      	adds	r3, #1
3401d32a:	9305      	str	r3, [sp, #20]
3401d32c:	2331      	movs	r3, #49	@ 0x31
3401d32e:	703b      	strb	r3, [r7, #0]
3401d330:	e4d9      	b.n	3401cce6 <_dtoa_r+0x40e>
3401d332:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401d334:	4f16      	ldr	r7, [pc, #88]	@ (3401d390 <_dtoa_r+0xab8>)
3401d336:	b11b      	cbz	r3, 3401d340 <_dtoa_r+0xa68>
3401d338:	f107 0308 	add.w	r3, r7, #8
3401d33c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3401d33e:	6013      	str	r3, [r2, #0]
3401d340:	4638      	mov	r0, r7
3401d342:	b011      	add	sp, #68	@ 0x44
3401d344:	ecbd 8b02 	vpop	{d8}
3401d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401d34c:	9b07      	ldr	r3, [sp, #28]
3401d34e:	2b01      	cmp	r3, #1
3401d350:	f77f ae2c 	ble.w	3401cfac <_dtoa_r+0x6d4>
3401d354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401d356:	930b      	str	r3, [sp, #44]	@ 0x2c
3401d358:	2001      	movs	r0, #1
3401d35a:	e64c      	b.n	3401cff6 <_dtoa_r+0x71e>
3401d35c:	f1bb 0f00 	cmp.w	fp, #0
3401d360:	f77f aed8 	ble.w	3401d114 <_dtoa_r+0x83c>
3401d364:	463e      	mov	r6, r7
3401d366:	4621      	mov	r1, r4
3401d368:	9801      	ldr	r0, [sp, #4]
3401d36a:	f7ff fa26 	bl	3401c7ba <quorem>
3401d36e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3401d372:	f806 ab01 	strb.w	sl, [r6], #1
3401d376:	1bf2      	subs	r2, r6, r7
3401d378:	4593      	cmp	fp, r2
3401d37a:	ddb4      	ble.n	3401d2e6 <_dtoa_r+0xa0e>
3401d37c:	2300      	movs	r3, #0
3401d37e:	220a      	movs	r2, #10
3401d380:	9901      	ldr	r1, [sp, #4]
3401d382:	4648      	mov	r0, r9
3401d384:	f000 f8b2 	bl	3401d4ec <__multadd>
3401d388:	9001      	str	r0, [sp, #4]
3401d38a:	e7ec      	b.n	3401d366 <_dtoa_r+0xa8e>
3401d38c:	34020430 	.word	0x34020430
3401d390:	340203b4 	.word	0x340203b4

3401d394 <_free_r>:
3401d394:	b538      	push	{r3, r4, r5, lr}
3401d396:	4605      	mov	r5, r0
3401d398:	2900      	cmp	r1, #0
3401d39a:	d041      	beq.n	3401d420 <_free_r+0x8c>
3401d39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
3401d3a0:	1f0c      	subs	r4, r1, #4
3401d3a2:	2b00      	cmp	r3, #0
3401d3a4:	bfb8      	it	lt
3401d3a6:	18e4      	addlt	r4, r4, r3
3401d3a8:	f7fe f842 	bl	3401b430 <__malloc_lock>
3401d3ac:	4a1d      	ldr	r2, [pc, #116]	@ (3401d424 <_free_r+0x90>)
3401d3ae:	6813      	ldr	r3, [r2, #0]
3401d3b0:	b933      	cbnz	r3, 3401d3c0 <_free_r+0x2c>
3401d3b2:	6063      	str	r3, [r4, #4]
3401d3b4:	6014      	str	r4, [r2, #0]
3401d3b6:	4628      	mov	r0, r5
3401d3b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3401d3bc:	f7fe b83e 	b.w	3401b43c <__malloc_unlock>
3401d3c0:	42a3      	cmp	r3, r4
3401d3c2:	d908      	bls.n	3401d3d6 <_free_r+0x42>
3401d3c4:	6820      	ldr	r0, [r4, #0]
3401d3c6:	1821      	adds	r1, r4, r0
3401d3c8:	428b      	cmp	r3, r1
3401d3ca:	bf01      	itttt	eq
3401d3cc:	6819      	ldreq	r1, [r3, #0]
3401d3ce:	685b      	ldreq	r3, [r3, #4]
3401d3d0:	1809      	addeq	r1, r1, r0
3401d3d2:	6021      	streq	r1, [r4, #0]
3401d3d4:	e7ed      	b.n	3401d3b2 <_free_r+0x1e>
3401d3d6:	461a      	mov	r2, r3
3401d3d8:	685b      	ldr	r3, [r3, #4]
3401d3da:	b10b      	cbz	r3, 3401d3e0 <_free_r+0x4c>
3401d3dc:	42a3      	cmp	r3, r4
3401d3de:	d9fa      	bls.n	3401d3d6 <_free_r+0x42>
3401d3e0:	6811      	ldr	r1, [r2, #0]
3401d3e2:	1850      	adds	r0, r2, r1
3401d3e4:	42a0      	cmp	r0, r4
3401d3e6:	d10b      	bne.n	3401d400 <_free_r+0x6c>
3401d3e8:	6820      	ldr	r0, [r4, #0]
3401d3ea:	4401      	add	r1, r0
3401d3ec:	1850      	adds	r0, r2, r1
3401d3ee:	6011      	str	r1, [r2, #0]
3401d3f0:	4283      	cmp	r3, r0
3401d3f2:	d1e0      	bne.n	3401d3b6 <_free_r+0x22>
3401d3f4:	6818      	ldr	r0, [r3, #0]
3401d3f6:	685b      	ldr	r3, [r3, #4]
3401d3f8:	4408      	add	r0, r1
3401d3fa:	6053      	str	r3, [r2, #4]
3401d3fc:	6010      	str	r0, [r2, #0]
3401d3fe:	e7da      	b.n	3401d3b6 <_free_r+0x22>
3401d400:	d902      	bls.n	3401d408 <_free_r+0x74>
3401d402:	230c      	movs	r3, #12
3401d404:	602b      	str	r3, [r5, #0]
3401d406:	e7d6      	b.n	3401d3b6 <_free_r+0x22>
3401d408:	6820      	ldr	r0, [r4, #0]
3401d40a:	1821      	adds	r1, r4, r0
3401d40c:	428b      	cmp	r3, r1
3401d40e:	bf02      	ittt	eq
3401d410:	6819      	ldreq	r1, [r3, #0]
3401d412:	685b      	ldreq	r3, [r3, #4]
3401d414:	1809      	addeq	r1, r1, r0
3401d416:	6063      	str	r3, [r4, #4]
3401d418:	bf08      	it	eq
3401d41a:	6021      	streq	r1, [r4, #0]
3401d41c:	6054      	str	r4, [r2, #4]
3401d41e:	e7ca      	b.n	3401d3b6 <_free_r+0x22>
3401d420:	bd38      	pop	{r3, r4, r5, pc}
3401d422:	bf00      	nop
3401d424:	34020e64 	.word	0x34020e64

3401d428 <_Balloc>:
3401d428:	b570      	push	{r4, r5, r6, lr}
3401d42a:	69c6      	ldr	r6, [r0, #28]
3401d42c:	4604      	mov	r4, r0
3401d42e:	460d      	mov	r5, r1
3401d430:	b976      	cbnz	r6, 3401d450 <_Balloc+0x28>
3401d432:	2010      	movs	r0, #16
3401d434:	f7fd ff52 	bl	3401b2dc <malloc>
3401d438:	4602      	mov	r2, r0
3401d43a:	61e0      	str	r0, [r4, #28]
3401d43c:	b920      	cbnz	r0, 3401d448 <_Balloc+0x20>
3401d43e:	4b18      	ldr	r3, [pc, #96]	@ (3401d4a0 <_Balloc+0x78>)
3401d440:	216b      	movs	r1, #107	@ 0x6b
3401d442:	4818      	ldr	r0, [pc, #96]	@ (3401d4a4 <_Balloc+0x7c>)
3401d444:	f7fd ff2c 	bl	3401b2a0 <__assert_func>
3401d448:	e9c0 6601 	strd	r6, r6, [r0, #4]
3401d44c:	6006      	str	r6, [r0, #0]
3401d44e:	60c6      	str	r6, [r0, #12]
3401d450:	69e6      	ldr	r6, [r4, #28]
3401d452:	68f3      	ldr	r3, [r6, #12]
3401d454:	b183      	cbz	r3, 3401d478 <_Balloc+0x50>
3401d456:	69e3      	ldr	r3, [r4, #28]
3401d458:	68db      	ldr	r3, [r3, #12]
3401d45a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3401d45e:	b9b8      	cbnz	r0, 3401d490 <_Balloc+0x68>
3401d460:	2101      	movs	r1, #1
3401d462:	4620      	mov	r0, r4
3401d464:	fa01 f605 	lsl.w	r6, r1, r5
3401d468:	1d72      	adds	r2, r6, #5
3401d46a:	0092      	lsls	r2, r2, #2
3401d46c:	f000 fd68 	bl	3401df40 <_calloc_r>
3401d470:	b160      	cbz	r0, 3401d48c <_Balloc+0x64>
3401d472:	e9c0 5601 	strd	r5, r6, [r0, #4]
3401d476:	e00e      	b.n	3401d496 <_Balloc+0x6e>
3401d478:	2221      	movs	r2, #33	@ 0x21
3401d47a:	2104      	movs	r1, #4
3401d47c:	4620      	mov	r0, r4
3401d47e:	f000 fd5f 	bl	3401df40 <_calloc_r>
3401d482:	69e3      	ldr	r3, [r4, #28]
3401d484:	60f0      	str	r0, [r6, #12]
3401d486:	68db      	ldr	r3, [r3, #12]
3401d488:	2b00      	cmp	r3, #0
3401d48a:	d1e4      	bne.n	3401d456 <_Balloc+0x2e>
3401d48c:	2000      	movs	r0, #0
3401d48e:	bd70      	pop	{r4, r5, r6, pc}
3401d490:	6802      	ldr	r2, [r0, #0]
3401d492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3401d496:	2300      	movs	r3, #0
3401d498:	e9c0 3303 	strd	r3, r3, [r0, #12]
3401d49c:	e7f7      	b.n	3401d48e <_Balloc+0x66>
3401d49e:	bf00      	nop
3401d4a0:	340203c1 	.word	0x340203c1
3401d4a4:	34020441 	.word	0x34020441

3401d4a8 <_Bfree>:
3401d4a8:	b570      	push	{r4, r5, r6, lr}
3401d4aa:	69c6      	ldr	r6, [r0, #28]
3401d4ac:	4605      	mov	r5, r0
3401d4ae:	460c      	mov	r4, r1
3401d4b0:	b976      	cbnz	r6, 3401d4d0 <_Bfree+0x28>
3401d4b2:	2010      	movs	r0, #16
3401d4b4:	f7fd ff12 	bl	3401b2dc <malloc>
3401d4b8:	4602      	mov	r2, r0
3401d4ba:	61e8      	str	r0, [r5, #28]
3401d4bc:	b920      	cbnz	r0, 3401d4c8 <_Bfree+0x20>
3401d4be:	4b09      	ldr	r3, [pc, #36]	@ (3401d4e4 <_Bfree+0x3c>)
3401d4c0:	218f      	movs	r1, #143	@ 0x8f
3401d4c2:	4809      	ldr	r0, [pc, #36]	@ (3401d4e8 <_Bfree+0x40>)
3401d4c4:	f7fd feec 	bl	3401b2a0 <__assert_func>
3401d4c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
3401d4cc:	6006      	str	r6, [r0, #0]
3401d4ce:	60c6      	str	r6, [r0, #12]
3401d4d0:	b13c      	cbz	r4, 3401d4e2 <_Bfree+0x3a>
3401d4d2:	69eb      	ldr	r3, [r5, #28]
3401d4d4:	6862      	ldr	r2, [r4, #4]
3401d4d6:	68db      	ldr	r3, [r3, #12]
3401d4d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3401d4dc:	6021      	str	r1, [r4, #0]
3401d4de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3401d4e2:	bd70      	pop	{r4, r5, r6, pc}
3401d4e4:	340203c1 	.word	0x340203c1
3401d4e8:	34020441 	.word	0x34020441

3401d4ec <__multadd>:
3401d4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401d4f0:	f101 0c14 	add.w	ip, r1, #20
3401d4f4:	4607      	mov	r7, r0
3401d4f6:	460c      	mov	r4, r1
3401d4f8:	461e      	mov	r6, r3
3401d4fa:	690d      	ldr	r5, [r1, #16]
3401d4fc:	2000      	movs	r0, #0
3401d4fe:	f8dc 3000 	ldr.w	r3, [ip]
3401d502:	3001      	adds	r0, #1
3401d504:	b299      	uxth	r1, r3
3401d506:	4285      	cmp	r5, r0
3401d508:	fb02 6101 	mla	r1, r2, r1, r6
3401d50c:	ea4f 4613 	mov.w	r6, r3, lsr #16
3401d510:	ea4f 4311 	mov.w	r3, r1, lsr #16
3401d514:	b289      	uxth	r1, r1
3401d516:	fb02 3306 	mla	r3, r2, r6, r3
3401d51a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3401d51e:	ea4f 4613 	mov.w	r6, r3, lsr #16
3401d522:	f84c 1b04 	str.w	r1, [ip], #4
3401d526:	dcea      	bgt.n	3401d4fe <__multadd+0x12>
3401d528:	b30e      	cbz	r6, 3401d56e <__multadd+0x82>
3401d52a:	68a3      	ldr	r3, [r4, #8]
3401d52c:	42ab      	cmp	r3, r5
3401d52e:	dc19      	bgt.n	3401d564 <__multadd+0x78>
3401d530:	6861      	ldr	r1, [r4, #4]
3401d532:	4638      	mov	r0, r7
3401d534:	3101      	adds	r1, #1
3401d536:	f7ff ff77 	bl	3401d428 <_Balloc>
3401d53a:	4680      	mov	r8, r0
3401d53c:	b928      	cbnz	r0, 3401d54a <__multadd+0x5e>
3401d53e:	4602      	mov	r2, r0
3401d540:	4b0c      	ldr	r3, [pc, #48]	@ (3401d574 <__multadd+0x88>)
3401d542:	21ba      	movs	r1, #186	@ 0xba
3401d544:	480c      	ldr	r0, [pc, #48]	@ (3401d578 <__multadd+0x8c>)
3401d546:	f7fd feab 	bl	3401b2a0 <__assert_func>
3401d54a:	6922      	ldr	r2, [r4, #16]
3401d54c:	f104 010c 	add.w	r1, r4, #12
3401d550:	300c      	adds	r0, #12
3401d552:	3202      	adds	r2, #2
3401d554:	0092      	lsls	r2, r2, #2
3401d556:	f7ff f91c 	bl	3401c792 <memcpy>
3401d55a:	4621      	mov	r1, r4
3401d55c:	4644      	mov	r4, r8
3401d55e:	4638      	mov	r0, r7
3401d560:	f7ff ffa2 	bl	3401d4a8 <_Bfree>
3401d564:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3401d568:	3501      	adds	r5, #1
3401d56a:	615e      	str	r6, [r3, #20]
3401d56c:	6125      	str	r5, [r4, #16]
3401d56e:	4620      	mov	r0, r4
3401d570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401d574:	34020430 	.word	0x34020430
3401d578:	34020441 	.word	0x34020441

3401d57c <__hi0bits>:
3401d57c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3401d580:	4603      	mov	r3, r0
3401d582:	bf36      	itet	cc
3401d584:	0403      	lslcc	r3, r0, #16
3401d586:	2000      	movcs	r0, #0
3401d588:	2010      	movcc	r0, #16
3401d58a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401d58e:	bf3c      	itt	cc
3401d590:	021b      	lslcc	r3, r3, #8
3401d592:	3008      	addcc	r0, #8
3401d594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401d598:	bf3c      	itt	cc
3401d59a:	011b      	lslcc	r3, r3, #4
3401d59c:	3004      	addcc	r0, #4
3401d59e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401d5a2:	bf3c      	itt	cc
3401d5a4:	009b      	lslcc	r3, r3, #2
3401d5a6:	3002      	addcc	r0, #2
3401d5a8:	2b00      	cmp	r3, #0
3401d5aa:	db05      	blt.n	3401d5b8 <__hi0bits+0x3c>
3401d5ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3401d5b0:	f100 0001 	add.w	r0, r0, #1
3401d5b4:	bf08      	it	eq
3401d5b6:	2020      	moveq	r0, #32
3401d5b8:	4770      	bx	lr

3401d5ba <__lo0bits>:
3401d5ba:	6803      	ldr	r3, [r0, #0]
3401d5bc:	4602      	mov	r2, r0
3401d5be:	f013 0007 	ands.w	r0, r3, #7
3401d5c2:	d00b      	beq.n	3401d5dc <__lo0bits+0x22>
3401d5c4:	07d9      	lsls	r1, r3, #31
3401d5c6:	d421      	bmi.n	3401d60c <__lo0bits+0x52>
3401d5c8:	0798      	lsls	r0, r3, #30
3401d5ca:	bf47      	ittee	mi
3401d5cc:	085b      	lsrmi	r3, r3, #1
3401d5ce:	2001      	movmi	r0, #1
3401d5d0:	089b      	lsrpl	r3, r3, #2
3401d5d2:	2002      	movpl	r0, #2
3401d5d4:	bf4c      	ite	mi
3401d5d6:	6013      	strmi	r3, [r2, #0]
3401d5d8:	6013      	strpl	r3, [r2, #0]
3401d5da:	4770      	bx	lr
3401d5dc:	b299      	uxth	r1, r3
3401d5de:	b909      	cbnz	r1, 3401d5e4 <__lo0bits+0x2a>
3401d5e0:	0c1b      	lsrs	r3, r3, #16
3401d5e2:	2010      	movs	r0, #16
3401d5e4:	b2d9      	uxtb	r1, r3
3401d5e6:	b909      	cbnz	r1, 3401d5ec <__lo0bits+0x32>
3401d5e8:	3008      	adds	r0, #8
3401d5ea:	0a1b      	lsrs	r3, r3, #8
3401d5ec:	0719      	lsls	r1, r3, #28
3401d5ee:	bf04      	itt	eq
3401d5f0:	091b      	lsreq	r3, r3, #4
3401d5f2:	3004      	addeq	r0, #4
3401d5f4:	0799      	lsls	r1, r3, #30
3401d5f6:	bf04      	itt	eq
3401d5f8:	089b      	lsreq	r3, r3, #2
3401d5fa:	3002      	addeq	r0, #2
3401d5fc:	07d9      	lsls	r1, r3, #31
3401d5fe:	d403      	bmi.n	3401d608 <__lo0bits+0x4e>
3401d600:	085b      	lsrs	r3, r3, #1
3401d602:	f100 0001 	add.w	r0, r0, #1
3401d606:	d003      	beq.n	3401d610 <__lo0bits+0x56>
3401d608:	6013      	str	r3, [r2, #0]
3401d60a:	4770      	bx	lr
3401d60c:	2000      	movs	r0, #0
3401d60e:	4770      	bx	lr
3401d610:	2020      	movs	r0, #32
3401d612:	4770      	bx	lr

3401d614 <__i2b>:
3401d614:	b510      	push	{r4, lr}
3401d616:	460c      	mov	r4, r1
3401d618:	2101      	movs	r1, #1
3401d61a:	f7ff ff05 	bl	3401d428 <_Balloc>
3401d61e:	4602      	mov	r2, r0
3401d620:	b928      	cbnz	r0, 3401d62e <__i2b+0x1a>
3401d622:	4b05      	ldr	r3, [pc, #20]	@ (3401d638 <__i2b+0x24>)
3401d624:	f240 1145 	movw	r1, #325	@ 0x145
3401d628:	4804      	ldr	r0, [pc, #16]	@ (3401d63c <__i2b+0x28>)
3401d62a:	f7fd fe39 	bl	3401b2a0 <__assert_func>
3401d62e:	2301      	movs	r3, #1
3401d630:	6144      	str	r4, [r0, #20]
3401d632:	6103      	str	r3, [r0, #16]
3401d634:	bd10      	pop	{r4, pc}
3401d636:	bf00      	nop
3401d638:	34020430 	.word	0x34020430
3401d63c:	34020441 	.word	0x34020441

3401d640 <__multiply>:
3401d640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401d644:	4617      	mov	r7, r2
3401d646:	690a      	ldr	r2, [r1, #16]
3401d648:	4689      	mov	r9, r1
3401d64a:	b085      	sub	sp, #20
3401d64c:	693b      	ldr	r3, [r7, #16]
3401d64e:	429a      	cmp	r2, r3
3401d650:	bfa2      	ittt	ge
3401d652:	463b      	movge	r3, r7
3401d654:	460f      	movge	r7, r1
3401d656:	4699      	movge	r9, r3
3401d658:	693d      	ldr	r5, [r7, #16]
3401d65a:	68bb      	ldr	r3, [r7, #8]
3401d65c:	f8d9 a010 	ldr.w	sl, [r9, #16]
3401d660:	6879      	ldr	r1, [r7, #4]
3401d662:	eb05 060a 	add.w	r6, r5, sl
3401d666:	42b3      	cmp	r3, r6
3401d668:	bfb8      	it	lt
3401d66a:	3101      	addlt	r1, #1
3401d66c:	f7ff fedc 	bl	3401d428 <_Balloc>
3401d670:	b930      	cbnz	r0, 3401d680 <__multiply+0x40>
3401d672:	4602      	mov	r2, r0
3401d674:	4b42      	ldr	r3, [pc, #264]	@ (3401d780 <__multiply+0x140>)
3401d676:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3401d67a:	4842      	ldr	r0, [pc, #264]	@ (3401d784 <__multiply+0x144>)
3401d67c:	f7fd fe10 	bl	3401b2a0 <__assert_func>
3401d680:	f100 0414 	add.w	r4, r0, #20
3401d684:	2200      	movs	r2, #0
3401d686:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
3401d68a:	4623      	mov	r3, r4
3401d68c:	4573      	cmp	r3, lr
3401d68e:	d320      	bcc.n	3401d6d2 <__multiply+0x92>
3401d690:	f107 0814 	add.w	r8, r7, #20
3401d694:	f109 0114 	add.w	r1, r9, #20
3401d698:	eb08 0585 	add.w	r5, r8, r5, lsl #2
3401d69c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
3401d6a0:	9302      	str	r3, [sp, #8]
3401d6a2:	1beb      	subs	r3, r5, r7
3401d6a4:	3715      	adds	r7, #21
3401d6a6:	3b15      	subs	r3, #21
3401d6a8:	f023 0303 	bic.w	r3, r3, #3
3401d6ac:	3304      	adds	r3, #4
3401d6ae:	42bd      	cmp	r5, r7
3401d6b0:	bf38      	it	cc
3401d6b2:	2304      	movcc	r3, #4
3401d6b4:	9301      	str	r3, [sp, #4]
3401d6b6:	9b02      	ldr	r3, [sp, #8]
3401d6b8:	9103      	str	r1, [sp, #12]
3401d6ba:	428b      	cmp	r3, r1
3401d6bc:	d80c      	bhi.n	3401d6d8 <__multiply+0x98>
3401d6be:	2e00      	cmp	r6, #0
3401d6c0:	dd03      	ble.n	3401d6ca <__multiply+0x8a>
3401d6c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
3401d6c6:	2b00      	cmp	r3, #0
3401d6c8:	d057      	beq.n	3401d77a <__multiply+0x13a>
3401d6ca:	6106      	str	r6, [r0, #16]
3401d6cc:	b005      	add	sp, #20
3401d6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401d6d2:	f843 2b04 	str.w	r2, [r3], #4
3401d6d6:	e7d9      	b.n	3401d68c <__multiply+0x4c>
3401d6d8:	f8b1 a000 	ldrh.w	sl, [r1]
3401d6dc:	f1ba 0f00 	cmp.w	sl, #0
3401d6e0:	d021      	beq.n	3401d726 <__multiply+0xe6>
3401d6e2:	46c4      	mov	ip, r8
3401d6e4:	46a1      	mov	r9, r4
3401d6e6:	2700      	movs	r7, #0
3401d6e8:	f85c 2b04 	ldr.w	r2, [ip], #4
3401d6ec:	f8d9 3000 	ldr.w	r3, [r9]
3401d6f0:	fa1f fb82 	uxth.w	fp, r2
3401d6f4:	4565      	cmp	r5, ip
3401d6f6:	b29b      	uxth	r3, r3
3401d6f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
3401d6fc:	fb0a 330b 	mla	r3, sl, fp, r3
3401d700:	443b      	add	r3, r7
3401d702:	f8d9 7000 	ldr.w	r7, [r9]
3401d706:	ea4f 4717 	mov.w	r7, r7, lsr #16
3401d70a:	fb0a 7202 	mla	r2, sl, r2, r7
3401d70e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3401d712:	b29b      	uxth	r3, r3
3401d714:	ea4f 4712 	mov.w	r7, r2, lsr #16
3401d718:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401d71c:	f849 3b04 	str.w	r3, [r9], #4
3401d720:	d8e2      	bhi.n	3401d6e8 <__multiply+0xa8>
3401d722:	9b01      	ldr	r3, [sp, #4]
3401d724:	50e7      	str	r7, [r4, r3]
3401d726:	9b03      	ldr	r3, [sp, #12]
3401d728:	3104      	adds	r1, #4
3401d72a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3401d72e:	f1b9 0f00 	cmp.w	r9, #0
3401d732:	d020      	beq.n	3401d776 <__multiply+0x136>
3401d734:	6823      	ldr	r3, [r4, #0]
3401d736:	4647      	mov	r7, r8
3401d738:	46a4      	mov	ip, r4
3401d73a:	f04f 0a00 	mov.w	sl, #0
3401d73e:	f8b7 b000 	ldrh.w	fp, [r7]
3401d742:	b29b      	uxth	r3, r3
3401d744:	f8bc 2002 	ldrh.w	r2, [ip, #2]
3401d748:	fb09 220b 	mla	r2, r9, fp, r2
3401d74c:	4452      	add	r2, sl
3401d74e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401d752:	f84c 3b04 	str.w	r3, [ip], #4
3401d756:	f857 3b04 	ldr.w	r3, [r7], #4
3401d75a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401d75e:	f8bc 3000 	ldrh.w	r3, [ip]
3401d762:	42bd      	cmp	r5, r7
3401d764:	fb09 330a 	mla	r3, r9, sl, r3
3401d768:	eb03 4312 	add.w	r3, r3, r2, lsr #16
3401d76c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401d770:	d8e5      	bhi.n	3401d73e <__multiply+0xfe>
3401d772:	9a01      	ldr	r2, [sp, #4]
3401d774:	50a3      	str	r3, [r4, r2]
3401d776:	3404      	adds	r4, #4
3401d778:	e79d      	b.n	3401d6b6 <__multiply+0x76>
3401d77a:	3e01      	subs	r6, #1
3401d77c:	e79f      	b.n	3401d6be <__multiply+0x7e>
3401d77e:	bf00      	nop
3401d780:	34020430 	.word	0x34020430
3401d784:	34020441 	.word	0x34020441

3401d788 <__pow5mult>:
3401d788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401d78c:	4615      	mov	r5, r2
3401d78e:	f012 0203 	ands.w	r2, r2, #3
3401d792:	4607      	mov	r7, r0
3401d794:	460e      	mov	r6, r1
3401d796:	d007      	beq.n	3401d7a8 <__pow5mult+0x20>
3401d798:	3a01      	subs	r2, #1
3401d79a:	4c25      	ldr	r4, [pc, #148]	@ (3401d830 <__pow5mult+0xa8>)
3401d79c:	2300      	movs	r3, #0
3401d79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3401d7a2:	f7ff fea3 	bl	3401d4ec <__multadd>
3401d7a6:	4606      	mov	r6, r0
3401d7a8:	10ad      	asrs	r5, r5, #2
3401d7aa:	d03d      	beq.n	3401d828 <__pow5mult+0xa0>
3401d7ac:	69fc      	ldr	r4, [r7, #28]
3401d7ae:	b97c      	cbnz	r4, 3401d7d0 <__pow5mult+0x48>
3401d7b0:	2010      	movs	r0, #16
3401d7b2:	f7fd fd93 	bl	3401b2dc <malloc>
3401d7b6:	4602      	mov	r2, r0
3401d7b8:	61f8      	str	r0, [r7, #28]
3401d7ba:	b928      	cbnz	r0, 3401d7c8 <__pow5mult+0x40>
3401d7bc:	4b1d      	ldr	r3, [pc, #116]	@ (3401d834 <__pow5mult+0xac>)
3401d7be:	f240 11b3 	movw	r1, #435	@ 0x1b3
3401d7c2:	481d      	ldr	r0, [pc, #116]	@ (3401d838 <__pow5mult+0xb0>)
3401d7c4:	f7fd fd6c 	bl	3401b2a0 <__assert_func>
3401d7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
3401d7cc:	6004      	str	r4, [r0, #0]
3401d7ce:	60c4      	str	r4, [r0, #12]
3401d7d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
3401d7d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
3401d7d8:	b94c      	cbnz	r4, 3401d7ee <__pow5mult+0x66>
3401d7da:	f240 2171 	movw	r1, #625	@ 0x271
3401d7de:	4638      	mov	r0, r7
3401d7e0:	f7ff ff18 	bl	3401d614 <__i2b>
3401d7e4:	2300      	movs	r3, #0
3401d7e6:	4604      	mov	r4, r0
3401d7e8:	f8c8 0008 	str.w	r0, [r8, #8]
3401d7ec:	6003      	str	r3, [r0, #0]
3401d7ee:	f04f 0900 	mov.w	r9, #0
3401d7f2:	07eb      	lsls	r3, r5, #31
3401d7f4:	d50a      	bpl.n	3401d80c <__pow5mult+0x84>
3401d7f6:	4631      	mov	r1, r6
3401d7f8:	4622      	mov	r2, r4
3401d7fa:	4638      	mov	r0, r7
3401d7fc:	f7ff ff20 	bl	3401d640 <__multiply>
3401d800:	4680      	mov	r8, r0
3401d802:	4631      	mov	r1, r6
3401d804:	4638      	mov	r0, r7
3401d806:	4646      	mov	r6, r8
3401d808:	f7ff fe4e 	bl	3401d4a8 <_Bfree>
3401d80c:	106d      	asrs	r5, r5, #1
3401d80e:	d00b      	beq.n	3401d828 <__pow5mult+0xa0>
3401d810:	6820      	ldr	r0, [r4, #0]
3401d812:	b938      	cbnz	r0, 3401d824 <__pow5mult+0x9c>
3401d814:	4622      	mov	r2, r4
3401d816:	4621      	mov	r1, r4
3401d818:	4638      	mov	r0, r7
3401d81a:	f7ff ff11 	bl	3401d640 <__multiply>
3401d81e:	6020      	str	r0, [r4, #0]
3401d820:	f8c0 9000 	str.w	r9, [r0]
3401d824:	4604      	mov	r4, r0
3401d826:	e7e4      	b.n	3401d7f2 <__pow5mult+0x6a>
3401d828:	4630      	mov	r0, r6
3401d82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401d82e:	bf00      	nop
3401d830:	340204b8 	.word	0x340204b8
3401d834:	340203c1 	.word	0x340203c1
3401d838:	34020441 	.word	0x34020441

3401d83c <__lshift>:
3401d83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401d840:	460c      	mov	r4, r1
3401d842:	4607      	mov	r7, r0
3401d844:	4691      	mov	r9, r2
3401d846:	ea4f 1a62 	mov.w	sl, r2, asr #5
3401d84a:	6923      	ldr	r3, [r4, #16]
3401d84c:	6849      	ldr	r1, [r1, #4]
3401d84e:	eb03 1862 	add.w	r8, r3, r2, asr #5
3401d852:	68a3      	ldr	r3, [r4, #8]
3401d854:	f108 0601 	add.w	r6, r8, #1
3401d858:	42b3      	cmp	r3, r6
3401d85a:	db0b      	blt.n	3401d874 <__lshift+0x38>
3401d85c:	4638      	mov	r0, r7
3401d85e:	f7ff fde3 	bl	3401d428 <_Balloc>
3401d862:	4605      	mov	r5, r0
3401d864:	b948      	cbnz	r0, 3401d87a <__lshift+0x3e>
3401d866:	4602      	mov	r2, r0
3401d868:	4b28      	ldr	r3, [pc, #160]	@ (3401d90c <__lshift+0xd0>)
3401d86a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3401d86e:	4828      	ldr	r0, [pc, #160]	@ (3401d910 <__lshift+0xd4>)
3401d870:	f7fd fd16 	bl	3401b2a0 <__assert_func>
3401d874:	3101      	adds	r1, #1
3401d876:	005b      	lsls	r3, r3, #1
3401d878:	e7ee      	b.n	3401d858 <__lshift+0x1c>
3401d87a:	2300      	movs	r3, #0
3401d87c:	f100 0114 	add.w	r1, r0, #20
3401d880:	f100 0210 	add.w	r2, r0, #16
3401d884:	4618      	mov	r0, r3
3401d886:	4553      	cmp	r3, sl
3401d888:	db33      	blt.n	3401d8f2 <__lshift+0xb6>
3401d88a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3401d88e:	f104 0314 	add.w	r3, r4, #20
3401d892:	6920      	ldr	r0, [r4, #16]
3401d894:	f019 091f 	ands.w	r9, r9, #31
3401d898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3401d89c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3401d8a0:	d02b      	beq.n	3401d8fa <__lshift+0xbe>
3401d8a2:	f1c9 0e20 	rsb	lr, r9, #32
3401d8a6:	468a      	mov	sl, r1
3401d8a8:	2200      	movs	r2, #0
3401d8aa:	6818      	ldr	r0, [r3, #0]
3401d8ac:	fa00 f009 	lsl.w	r0, r0, r9
3401d8b0:	4310      	orrs	r0, r2
3401d8b2:	f84a 0b04 	str.w	r0, [sl], #4
3401d8b6:	f853 2b04 	ldr.w	r2, [r3], #4
3401d8ba:	459c      	cmp	ip, r3
3401d8bc:	fa22 f20e 	lsr.w	r2, r2, lr
3401d8c0:	d8f3      	bhi.n	3401d8aa <__lshift+0x6e>
3401d8c2:	ebac 0304 	sub.w	r3, ip, r4
3401d8c6:	f104 0015 	add.w	r0, r4, #21
3401d8ca:	3b15      	subs	r3, #21
3401d8cc:	f023 0303 	bic.w	r3, r3, #3
3401d8d0:	3304      	adds	r3, #4
3401d8d2:	4560      	cmp	r0, ip
3401d8d4:	bf88      	it	hi
3401d8d6:	2304      	movhi	r3, #4
3401d8d8:	50ca      	str	r2, [r1, r3]
3401d8da:	b10a      	cbz	r2, 3401d8e0 <__lshift+0xa4>
3401d8dc:	f108 0602 	add.w	r6, r8, #2
3401d8e0:	3e01      	subs	r6, #1
3401d8e2:	4638      	mov	r0, r7
3401d8e4:	4621      	mov	r1, r4
3401d8e6:	612e      	str	r6, [r5, #16]
3401d8e8:	f7ff fdde 	bl	3401d4a8 <_Bfree>
3401d8ec:	4628      	mov	r0, r5
3401d8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401d8f2:	3301      	adds	r3, #1
3401d8f4:	f842 0f04 	str.w	r0, [r2, #4]!
3401d8f8:	e7c5      	b.n	3401d886 <__lshift+0x4a>
3401d8fa:	3904      	subs	r1, #4
3401d8fc:	f853 2b04 	ldr.w	r2, [r3], #4
3401d900:	459c      	cmp	ip, r3
3401d902:	f841 2f04 	str.w	r2, [r1, #4]!
3401d906:	d8f9      	bhi.n	3401d8fc <__lshift+0xc0>
3401d908:	e7ea      	b.n	3401d8e0 <__lshift+0xa4>
3401d90a:	bf00      	nop
3401d90c:	34020430 	.word	0x34020430
3401d910:	34020441 	.word	0x34020441

3401d914 <__mcmp>:
3401d914:	4603      	mov	r3, r0
3401d916:	690a      	ldr	r2, [r1, #16]
3401d918:	6900      	ldr	r0, [r0, #16]
3401d91a:	1a80      	subs	r0, r0, r2
3401d91c:	b530      	push	{r4, r5, lr}
3401d91e:	d10e      	bne.n	3401d93e <__mcmp+0x2a>
3401d920:	3314      	adds	r3, #20
3401d922:	3114      	adds	r1, #20
3401d924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
3401d928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
3401d92c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3401d930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3401d934:	4295      	cmp	r5, r2
3401d936:	d003      	beq.n	3401d940 <__mcmp+0x2c>
3401d938:	d205      	bcs.n	3401d946 <__mcmp+0x32>
3401d93a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401d93e:	bd30      	pop	{r4, r5, pc}
3401d940:	42a3      	cmp	r3, r4
3401d942:	d3f3      	bcc.n	3401d92c <__mcmp+0x18>
3401d944:	e7fb      	b.n	3401d93e <__mcmp+0x2a>
3401d946:	2001      	movs	r0, #1
3401d948:	e7f9      	b.n	3401d93e <__mcmp+0x2a>
	...

3401d94c <__mdiff>:
3401d94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401d950:	4689      	mov	r9, r1
3401d952:	4606      	mov	r6, r0
3401d954:	4611      	mov	r1, r2
3401d956:	4614      	mov	r4, r2
3401d958:	4648      	mov	r0, r9
3401d95a:	f7ff ffdb 	bl	3401d914 <__mcmp>
3401d95e:	1e05      	subs	r5, r0, #0
3401d960:	d112      	bne.n	3401d988 <__mdiff+0x3c>
3401d962:	4629      	mov	r1, r5
3401d964:	4630      	mov	r0, r6
3401d966:	f7ff fd5f 	bl	3401d428 <_Balloc>
3401d96a:	4602      	mov	r2, r0
3401d96c:	b928      	cbnz	r0, 3401d97a <__mdiff+0x2e>
3401d96e:	4b41      	ldr	r3, [pc, #260]	@ (3401da74 <__mdiff+0x128>)
3401d970:	f240 2137 	movw	r1, #567	@ 0x237
3401d974:	4840      	ldr	r0, [pc, #256]	@ (3401da78 <__mdiff+0x12c>)
3401d976:	f7fd fc93 	bl	3401b2a0 <__assert_func>
3401d97a:	2301      	movs	r3, #1
3401d97c:	e9c0 3504 	strd	r3, r5, [r0, #16]
3401d980:	4610      	mov	r0, r2
3401d982:	b003      	add	sp, #12
3401d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401d988:	bfbc      	itt	lt
3401d98a:	464b      	movlt	r3, r9
3401d98c:	46a1      	movlt	r9, r4
3401d98e:	4630      	mov	r0, r6
3401d990:	bfb8      	it	lt
3401d992:	2501      	movlt	r5, #1
3401d994:	f8d9 1004 	ldr.w	r1, [r9, #4]
3401d998:	bfb4      	ite	lt
3401d99a:	461c      	movlt	r4, r3
3401d99c:	2500      	movge	r5, #0
3401d99e:	f7ff fd43 	bl	3401d428 <_Balloc>
3401d9a2:	4602      	mov	r2, r0
3401d9a4:	b918      	cbnz	r0, 3401d9ae <__mdiff+0x62>
3401d9a6:	4b33      	ldr	r3, [pc, #204]	@ (3401da74 <__mdiff+0x128>)
3401d9a8:	f240 2145 	movw	r1, #581	@ 0x245
3401d9ac:	e7e2      	b.n	3401d974 <__mdiff+0x28>
3401d9ae:	f8d9 7010 	ldr.w	r7, [r9, #16]
3401d9b2:	f104 0e14 	add.w	lr, r4, #20
3401d9b6:	6926      	ldr	r6, [r4, #16]
3401d9b8:	f100 0b14 	add.w	fp, r0, #20
3401d9bc:	60c5      	str	r5, [r0, #12]
3401d9be:	f109 0514 	add.w	r5, r9, #20
3401d9c2:	f109 0310 	add.w	r3, r9, #16
3401d9c6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3401d9ca:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3401d9ce:	46d9      	mov	r9, fp
3401d9d0:	f04f 0c00 	mov.w	ip, #0
3401d9d4:	9301      	str	r3, [sp, #4]
3401d9d6:	9b01      	ldr	r3, [sp, #4]
3401d9d8:	f85e 0b04 	ldr.w	r0, [lr], #4
3401d9dc:	f853 af04 	ldr.w	sl, [r3, #4]!
3401d9e0:	4576      	cmp	r6, lr
3401d9e2:	9301      	str	r3, [sp, #4]
3401d9e4:	fa1f f38a 	uxth.w	r3, sl
3401d9e8:	4619      	mov	r1, r3
3401d9ea:	b283      	uxth	r3, r0
3401d9ec:	ea4f 4010 	mov.w	r0, r0, lsr #16
3401d9f0:	eba1 0303 	sub.w	r3, r1, r3
3401d9f4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
3401d9f8:	4463      	add	r3, ip
3401d9fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
3401d9fe:	b29b      	uxth	r3, r3
3401da00:	ea4f 4c20 	mov.w	ip, r0, asr #16
3401da04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401da08:	f849 3b04 	str.w	r3, [r9], #4
3401da0c:	d8e3      	bhi.n	3401d9d6 <__mdiff+0x8a>
3401da0e:	1b33      	subs	r3, r6, r4
3401da10:	3415      	adds	r4, #21
3401da12:	3b15      	subs	r3, #21
3401da14:	f023 0303 	bic.w	r3, r3, #3
3401da18:	3304      	adds	r3, #4
3401da1a:	42a6      	cmp	r6, r4
3401da1c:	bf38      	it	cc
3401da1e:	2304      	movcc	r3, #4
3401da20:	441d      	add	r5, r3
3401da22:	445b      	add	r3, fp
3401da24:	462c      	mov	r4, r5
3401da26:	461e      	mov	r6, r3
3401da28:	4544      	cmp	r4, r8
3401da2a:	d30e      	bcc.n	3401da4a <__mdiff+0xfe>
3401da2c:	f108 0103 	add.w	r1, r8, #3
3401da30:	1b49      	subs	r1, r1, r5
3401da32:	3d03      	subs	r5, #3
3401da34:	f021 0103 	bic.w	r1, r1, #3
3401da38:	45a8      	cmp	r8, r5
3401da3a:	bf38      	it	cc
3401da3c:	2100      	movcc	r1, #0
3401da3e:	440b      	add	r3, r1
3401da40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3401da44:	b199      	cbz	r1, 3401da6e <__mdiff+0x122>
3401da46:	6117      	str	r7, [r2, #16]
3401da48:	e79a      	b.n	3401d980 <__mdiff+0x34>
3401da4a:	f854 1b04 	ldr.w	r1, [r4], #4
3401da4e:	46e6      	mov	lr, ip
3401da50:	fa1f fc81 	uxth.w	ip, r1
3401da54:	0c08      	lsrs	r0, r1, #16
3401da56:	4471      	add	r1, lr
3401da58:	44f4      	add	ip, lr
3401da5a:	b289      	uxth	r1, r1
3401da5c:	eb00 402c 	add.w	r0, r0, ip, asr #16
3401da60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
3401da64:	ea4f 4c20 	mov.w	ip, r0, asr #16
3401da68:	f846 1b04 	str.w	r1, [r6], #4
3401da6c:	e7dc      	b.n	3401da28 <__mdiff+0xdc>
3401da6e:	3f01      	subs	r7, #1
3401da70:	e7e6      	b.n	3401da40 <__mdiff+0xf4>
3401da72:	bf00      	nop
3401da74:	34020430 	.word	0x34020430
3401da78:	34020441 	.word	0x34020441

3401da7c <__d2b>:
3401da7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3401da80:	460f      	mov	r7, r1
3401da82:	2101      	movs	r1, #1
3401da84:	4616      	mov	r6, r2
3401da86:	ec59 8b10 	vmov	r8, r9, d0
3401da8a:	f7ff fccd 	bl	3401d428 <_Balloc>
3401da8e:	4604      	mov	r4, r0
3401da90:	b930      	cbnz	r0, 3401daa0 <__d2b+0x24>
3401da92:	4602      	mov	r2, r0
3401da94:	4b23      	ldr	r3, [pc, #140]	@ (3401db24 <__d2b+0xa8>)
3401da96:	f240 310f 	movw	r1, #783	@ 0x30f
3401da9a:	4823      	ldr	r0, [pc, #140]	@ (3401db28 <__d2b+0xac>)
3401da9c:	f7fd fc00 	bl	3401b2a0 <__assert_func>
3401daa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
3401daa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
3401daa8:	b10d      	cbz	r5, 3401daae <__d2b+0x32>
3401daaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3401daae:	9301      	str	r3, [sp, #4]
3401dab0:	f1b8 0300 	subs.w	r3, r8, #0
3401dab4:	d023      	beq.n	3401dafe <__d2b+0x82>
3401dab6:	4668      	mov	r0, sp
3401dab8:	9300      	str	r3, [sp, #0]
3401daba:	f7ff fd7e 	bl	3401d5ba <__lo0bits>
3401dabe:	e9dd 1200 	ldrd	r1, r2, [sp]
3401dac2:	b1d0      	cbz	r0, 3401dafa <__d2b+0x7e>
3401dac4:	f1c0 0320 	rsb	r3, r0, #32
3401dac8:	fa02 f303 	lsl.w	r3, r2, r3
3401dacc:	40c2      	lsrs	r2, r0
3401dace:	430b      	orrs	r3, r1
3401dad0:	9201      	str	r2, [sp, #4]
3401dad2:	6163      	str	r3, [r4, #20]
3401dad4:	9b01      	ldr	r3, [sp, #4]
3401dad6:	2b00      	cmp	r3, #0
3401dad8:	61a3      	str	r3, [r4, #24]
3401dada:	bf0c      	ite	eq
3401dadc:	2201      	moveq	r2, #1
3401dade:	2202      	movne	r2, #2
3401dae0:	6122      	str	r2, [r4, #16]
3401dae2:	b1a5      	cbz	r5, 3401db0e <__d2b+0x92>
3401dae4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
3401dae8:	4405      	add	r5, r0
3401daea:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3401daee:	603d      	str	r5, [r7, #0]
3401daf0:	6030      	str	r0, [r6, #0]
3401daf2:	4620      	mov	r0, r4
3401daf4:	b003      	add	sp, #12
3401daf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3401dafa:	6161      	str	r1, [r4, #20]
3401dafc:	e7ea      	b.n	3401dad4 <__d2b+0x58>
3401dafe:	a801      	add	r0, sp, #4
3401db00:	f7ff fd5b 	bl	3401d5ba <__lo0bits>
3401db04:	9b01      	ldr	r3, [sp, #4]
3401db06:	3020      	adds	r0, #32
3401db08:	2201      	movs	r2, #1
3401db0a:	6163      	str	r3, [r4, #20]
3401db0c:	e7e8      	b.n	3401dae0 <__d2b+0x64>
3401db0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3401db12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3401db16:	6038      	str	r0, [r7, #0]
3401db18:	6918      	ldr	r0, [r3, #16]
3401db1a:	f7ff fd2f 	bl	3401d57c <__hi0bits>
3401db1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3401db22:	e7e5      	b.n	3401daf0 <__d2b+0x74>
3401db24:	34020430 	.word	0x34020430
3401db28:	34020441 	.word	0x34020441

3401db2c <__sfputc_r>:
3401db2c:	6893      	ldr	r3, [r2, #8]
3401db2e:	3b01      	subs	r3, #1
3401db30:	2b00      	cmp	r3, #0
3401db32:	b410      	push	{r4}
3401db34:	6093      	str	r3, [r2, #8]
3401db36:	da08      	bge.n	3401db4a <__sfputc_r+0x1e>
3401db38:	6994      	ldr	r4, [r2, #24]
3401db3a:	42a3      	cmp	r3, r4
3401db3c:	db01      	blt.n	3401db42 <__sfputc_r+0x16>
3401db3e:	290a      	cmp	r1, #10
3401db40:	d103      	bne.n	3401db4a <__sfputc_r+0x1e>
3401db42:	f85d 4b04 	ldr.w	r4, [sp], #4
3401db46:	f7fe bb00 	b.w	3401c14a <__swbuf_r>
3401db4a:	6813      	ldr	r3, [r2, #0]
3401db4c:	1c58      	adds	r0, r3, #1
3401db4e:	6010      	str	r0, [r2, #0]
3401db50:	4608      	mov	r0, r1
3401db52:	7019      	strb	r1, [r3, #0]
3401db54:	f85d 4b04 	ldr.w	r4, [sp], #4
3401db58:	4770      	bx	lr

3401db5a <__sfputs_r>:
3401db5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401db5c:	4606      	mov	r6, r0
3401db5e:	460f      	mov	r7, r1
3401db60:	4614      	mov	r4, r2
3401db62:	18d5      	adds	r5, r2, r3
3401db64:	42ac      	cmp	r4, r5
3401db66:	d101      	bne.n	3401db6c <__sfputs_r+0x12>
3401db68:	2000      	movs	r0, #0
3401db6a:	e007      	b.n	3401db7c <__sfputs_r+0x22>
3401db6c:	463a      	mov	r2, r7
3401db6e:	f814 1b01 	ldrb.w	r1, [r4], #1
3401db72:	4630      	mov	r0, r6
3401db74:	f7ff ffda 	bl	3401db2c <__sfputc_r>
3401db78:	1c43      	adds	r3, r0, #1
3401db7a:	d1f3      	bne.n	3401db64 <__sfputs_r+0xa>
3401db7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

3401db80 <_vfiprintf_r>:
3401db80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401db84:	460d      	mov	r5, r1
3401db86:	b09d      	sub	sp, #116	@ 0x74
3401db88:	4614      	mov	r4, r2
3401db8a:	4698      	mov	r8, r3
3401db8c:	4606      	mov	r6, r0
3401db8e:	b118      	cbz	r0, 3401db98 <_vfiprintf_r+0x18>
3401db90:	6a03      	ldr	r3, [r0, #32]
3401db92:	b90b      	cbnz	r3, 3401db98 <_vfiprintf_r+0x18>
3401db94:	f7fe f9de 	bl	3401bf54 <__sinit>
3401db98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401db9a:	07d9      	lsls	r1, r3, #31
3401db9c:	d405      	bmi.n	3401dbaa <_vfiprintf_r+0x2a>
3401db9e:	89ab      	ldrh	r3, [r5, #12]
3401dba0:	059a      	lsls	r2, r3, #22
3401dba2:	d402      	bmi.n	3401dbaa <_vfiprintf_r+0x2a>
3401dba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401dba6:	f7fe fde4 	bl	3401c772 <__retarget_lock_acquire_recursive>
3401dbaa:	89ab      	ldrh	r3, [r5, #12]
3401dbac:	071b      	lsls	r3, r3, #28
3401dbae:	d501      	bpl.n	3401dbb4 <_vfiprintf_r+0x34>
3401dbb0:	692b      	ldr	r3, [r5, #16]
3401dbb2:	b99b      	cbnz	r3, 3401dbdc <_vfiprintf_r+0x5c>
3401dbb4:	4629      	mov	r1, r5
3401dbb6:	4630      	mov	r0, r6
3401dbb8:	f7fe fb06 	bl	3401c1c8 <__swsetup_r>
3401dbbc:	b170      	cbz	r0, 3401dbdc <_vfiprintf_r+0x5c>
3401dbbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401dbc0:	07dc      	lsls	r4, r3, #31
3401dbc2:	d504      	bpl.n	3401dbce <_vfiprintf_r+0x4e>
3401dbc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401dbc8:	b01d      	add	sp, #116	@ 0x74
3401dbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401dbce:	89ab      	ldrh	r3, [r5, #12]
3401dbd0:	0598      	lsls	r0, r3, #22
3401dbd2:	d4f7      	bmi.n	3401dbc4 <_vfiprintf_r+0x44>
3401dbd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401dbd6:	f7fe fdcd 	bl	3401c774 <__retarget_lock_release_recursive>
3401dbda:	e7f3      	b.n	3401dbc4 <_vfiprintf_r+0x44>
3401dbdc:	2300      	movs	r3, #0
3401dbde:	f8cd 800c 	str.w	r8, [sp, #12]
3401dbe2:	f04f 0901 	mov.w	r9, #1
3401dbe6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3401dd9c <_vfiprintf_r+0x21c>
3401dbea:	9309      	str	r3, [sp, #36]	@ 0x24
3401dbec:	2320      	movs	r3, #32
3401dbee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3401dbf2:	2330      	movs	r3, #48	@ 0x30
3401dbf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3401dbf8:	4623      	mov	r3, r4
3401dbfa:	469a      	mov	sl, r3
3401dbfc:	f813 2b01 	ldrb.w	r2, [r3], #1
3401dc00:	b10a      	cbz	r2, 3401dc06 <_vfiprintf_r+0x86>
3401dc02:	2a25      	cmp	r2, #37	@ 0x25
3401dc04:	d1f9      	bne.n	3401dbfa <_vfiprintf_r+0x7a>
3401dc06:	ebba 0b04 	subs.w	fp, sl, r4
3401dc0a:	d00b      	beq.n	3401dc24 <_vfiprintf_r+0xa4>
3401dc0c:	465b      	mov	r3, fp
3401dc0e:	4622      	mov	r2, r4
3401dc10:	4629      	mov	r1, r5
3401dc12:	4630      	mov	r0, r6
3401dc14:	f7ff ffa1 	bl	3401db5a <__sfputs_r>
3401dc18:	3001      	adds	r0, #1
3401dc1a:	f000 80a7 	beq.w	3401dd6c <_vfiprintf_r+0x1ec>
3401dc1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401dc20:	445a      	add	r2, fp
3401dc22:	9209      	str	r2, [sp, #36]	@ 0x24
3401dc24:	f89a 3000 	ldrb.w	r3, [sl]
3401dc28:	2b00      	cmp	r3, #0
3401dc2a:	f000 809f 	beq.w	3401dd6c <_vfiprintf_r+0x1ec>
3401dc2e:	2300      	movs	r3, #0
3401dc30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3401dc34:	f10a 0a01 	add.w	sl, sl, #1
3401dc38:	9304      	str	r3, [sp, #16]
3401dc3a:	9307      	str	r3, [sp, #28]
3401dc3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3401dc40:	931a      	str	r3, [sp, #104]	@ 0x68
3401dc42:	e9cd 2305 	strd	r2, r3, [sp, #20]
3401dc46:	4654      	mov	r4, sl
3401dc48:	2205      	movs	r2, #5
3401dc4a:	4854      	ldr	r0, [pc, #336]	@ (3401dd9c <_vfiprintf_r+0x21c>)
3401dc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
3401dc50:	f7fe fd91 	bl	3401c776 <memchr>
3401dc54:	9a04      	ldr	r2, [sp, #16]
3401dc56:	b9d8      	cbnz	r0, 3401dc90 <_vfiprintf_r+0x110>
3401dc58:	06d1      	lsls	r1, r2, #27
3401dc5a:	bf44      	itt	mi
3401dc5c:	2320      	movmi	r3, #32
3401dc5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401dc62:	0713      	lsls	r3, r2, #28
3401dc64:	bf44      	itt	mi
3401dc66:	232b      	movmi	r3, #43	@ 0x2b
3401dc68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401dc6c:	f89a 3000 	ldrb.w	r3, [sl]
3401dc70:	2b2a      	cmp	r3, #42	@ 0x2a
3401dc72:	d015      	beq.n	3401dca0 <_vfiprintf_r+0x120>
3401dc74:	9a07      	ldr	r2, [sp, #28]
3401dc76:	4654      	mov	r4, sl
3401dc78:	2000      	movs	r0, #0
3401dc7a:	f04f 0c0a 	mov.w	ip, #10
3401dc7e:	4621      	mov	r1, r4
3401dc80:	f811 3b01 	ldrb.w	r3, [r1], #1
3401dc84:	3b30      	subs	r3, #48	@ 0x30
3401dc86:	2b09      	cmp	r3, #9
3401dc88:	d94b      	bls.n	3401dd22 <_vfiprintf_r+0x1a2>
3401dc8a:	b1b0      	cbz	r0, 3401dcba <_vfiprintf_r+0x13a>
3401dc8c:	9207      	str	r2, [sp, #28]
3401dc8e:	e014      	b.n	3401dcba <_vfiprintf_r+0x13a>
3401dc90:	eba0 0308 	sub.w	r3, r0, r8
3401dc94:	46a2      	mov	sl, r4
3401dc96:	fa09 f303 	lsl.w	r3, r9, r3
3401dc9a:	4313      	orrs	r3, r2
3401dc9c:	9304      	str	r3, [sp, #16]
3401dc9e:	e7d2      	b.n	3401dc46 <_vfiprintf_r+0xc6>
3401dca0:	9b03      	ldr	r3, [sp, #12]
3401dca2:	1d19      	adds	r1, r3, #4
3401dca4:	681b      	ldr	r3, [r3, #0]
3401dca6:	2b00      	cmp	r3, #0
3401dca8:	9103      	str	r1, [sp, #12]
3401dcaa:	bfbb      	ittet	lt
3401dcac:	425b      	neglt	r3, r3
3401dcae:	f042 0202 	orrlt.w	r2, r2, #2
3401dcb2:	9307      	strge	r3, [sp, #28]
3401dcb4:	9307      	strlt	r3, [sp, #28]
3401dcb6:	bfb8      	it	lt
3401dcb8:	9204      	strlt	r2, [sp, #16]
3401dcba:	7823      	ldrb	r3, [r4, #0]
3401dcbc:	2b2e      	cmp	r3, #46	@ 0x2e
3401dcbe:	d10a      	bne.n	3401dcd6 <_vfiprintf_r+0x156>
3401dcc0:	7863      	ldrb	r3, [r4, #1]
3401dcc2:	2b2a      	cmp	r3, #42	@ 0x2a
3401dcc4:	d132      	bne.n	3401dd2c <_vfiprintf_r+0x1ac>
3401dcc6:	9b03      	ldr	r3, [sp, #12]
3401dcc8:	3402      	adds	r4, #2
3401dcca:	1d1a      	adds	r2, r3, #4
3401dccc:	681b      	ldr	r3, [r3, #0]
3401dcce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3401dcd2:	9203      	str	r2, [sp, #12]
3401dcd4:	9305      	str	r3, [sp, #20]
3401dcd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3401ddac <_vfiprintf_r+0x22c>
3401dcda:	2203      	movs	r2, #3
3401dcdc:	7821      	ldrb	r1, [r4, #0]
3401dcde:	4650      	mov	r0, sl
3401dce0:	f7fe fd49 	bl	3401c776 <memchr>
3401dce4:	b138      	cbz	r0, 3401dcf6 <_vfiprintf_r+0x176>
3401dce6:	eba0 000a 	sub.w	r0, r0, sl
3401dcea:	2240      	movs	r2, #64	@ 0x40
3401dcec:	9b04      	ldr	r3, [sp, #16]
3401dcee:	3401      	adds	r4, #1
3401dcf0:	4082      	lsls	r2, r0
3401dcf2:	4313      	orrs	r3, r2
3401dcf4:	9304      	str	r3, [sp, #16]
3401dcf6:	f814 1b01 	ldrb.w	r1, [r4], #1
3401dcfa:	2206      	movs	r2, #6
3401dcfc:	4828      	ldr	r0, [pc, #160]	@ (3401dda0 <_vfiprintf_r+0x220>)
3401dcfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3401dd02:	f7fe fd38 	bl	3401c776 <memchr>
3401dd06:	2800      	cmp	r0, #0
3401dd08:	d03f      	beq.n	3401dd8a <_vfiprintf_r+0x20a>
3401dd0a:	4b26      	ldr	r3, [pc, #152]	@ (3401dda4 <_vfiprintf_r+0x224>)
3401dd0c:	bb1b      	cbnz	r3, 3401dd56 <_vfiprintf_r+0x1d6>
3401dd0e:	9b03      	ldr	r3, [sp, #12]
3401dd10:	3307      	adds	r3, #7
3401dd12:	f023 0307 	bic.w	r3, r3, #7
3401dd16:	3308      	adds	r3, #8
3401dd18:	9303      	str	r3, [sp, #12]
3401dd1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401dd1c:	443b      	add	r3, r7
3401dd1e:	9309      	str	r3, [sp, #36]	@ 0x24
3401dd20:	e76a      	b.n	3401dbf8 <_vfiprintf_r+0x78>
3401dd22:	fb0c 3202 	mla	r2, ip, r2, r3
3401dd26:	460c      	mov	r4, r1
3401dd28:	2001      	movs	r0, #1
3401dd2a:	e7a8      	b.n	3401dc7e <_vfiprintf_r+0xfe>
3401dd2c:	2300      	movs	r3, #0
3401dd2e:	3401      	adds	r4, #1
3401dd30:	f04f 0c0a 	mov.w	ip, #10
3401dd34:	4619      	mov	r1, r3
3401dd36:	9305      	str	r3, [sp, #20]
3401dd38:	4620      	mov	r0, r4
3401dd3a:	f810 2b01 	ldrb.w	r2, [r0], #1
3401dd3e:	3a30      	subs	r2, #48	@ 0x30
3401dd40:	2a09      	cmp	r2, #9
3401dd42:	d903      	bls.n	3401dd4c <_vfiprintf_r+0x1cc>
3401dd44:	2b00      	cmp	r3, #0
3401dd46:	d0c6      	beq.n	3401dcd6 <_vfiprintf_r+0x156>
3401dd48:	9105      	str	r1, [sp, #20]
3401dd4a:	e7c4      	b.n	3401dcd6 <_vfiprintf_r+0x156>
3401dd4c:	fb0c 2101 	mla	r1, ip, r1, r2
3401dd50:	4604      	mov	r4, r0
3401dd52:	2301      	movs	r3, #1
3401dd54:	e7f0      	b.n	3401dd38 <_vfiprintf_r+0x1b8>
3401dd56:	ab03      	add	r3, sp, #12
3401dd58:	462a      	mov	r2, r5
3401dd5a:	a904      	add	r1, sp, #16
3401dd5c:	4630      	mov	r0, r6
3401dd5e:	9300      	str	r3, [sp, #0]
3401dd60:	4b11      	ldr	r3, [pc, #68]	@ (3401dda8 <_vfiprintf_r+0x228>)
3401dd62:	f7fd fc01 	bl	3401b568 <_printf_float>
3401dd66:	4607      	mov	r7, r0
3401dd68:	1c78      	adds	r0, r7, #1
3401dd6a:	d1d6      	bne.n	3401dd1a <_vfiprintf_r+0x19a>
3401dd6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401dd6e:	07d9      	lsls	r1, r3, #31
3401dd70:	d405      	bmi.n	3401dd7e <_vfiprintf_r+0x1fe>
3401dd72:	89ab      	ldrh	r3, [r5, #12]
3401dd74:	059a      	lsls	r2, r3, #22
3401dd76:	d402      	bmi.n	3401dd7e <_vfiprintf_r+0x1fe>
3401dd78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401dd7a:	f7fe fcfb 	bl	3401c774 <__retarget_lock_release_recursive>
3401dd7e:	89ab      	ldrh	r3, [r5, #12]
3401dd80:	065b      	lsls	r3, r3, #25
3401dd82:	f53f af1f 	bmi.w	3401dbc4 <_vfiprintf_r+0x44>
3401dd86:	9809      	ldr	r0, [sp, #36]	@ 0x24
3401dd88:	e71e      	b.n	3401dbc8 <_vfiprintf_r+0x48>
3401dd8a:	ab03      	add	r3, sp, #12
3401dd8c:	462a      	mov	r2, r5
3401dd8e:	a904      	add	r1, sp, #16
3401dd90:	4630      	mov	r0, r6
3401dd92:	9300      	str	r3, [sp, #0]
3401dd94:	4b04      	ldr	r3, [pc, #16]	@ (3401dda8 <_vfiprintf_r+0x228>)
3401dd96:	f7fd fe73 	bl	3401ba80 <_printf_i>
3401dd9a:	e7e4      	b.n	3401dd66 <_vfiprintf_r+0x1e6>
3401dd9c:	3402049a 	.word	0x3402049a
3401dda0:	340204a4 	.word	0x340204a4
3401dda4:	3401b569 	.word	0x3401b569
3401dda8:	3401db5b 	.word	0x3401db5b
3401ddac:	340204a0 	.word	0x340204a0

3401ddb0 <__swhatbuf_r>:
3401ddb0:	b570      	push	{r4, r5, r6, lr}
3401ddb2:	460c      	mov	r4, r1
3401ddb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401ddb8:	b096      	sub	sp, #88	@ 0x58
3401ddba:	4615      	mov	r5, r2
3401ddbc:	2900      	cmp	r1, #0
3401ddbe:	461e      	mov	r6, r3
3401ddc0:	da0c      	bge.n	3401dddc <__swhatbuf_r+0x2c>
3401ddc2:	89a3      	ldrh	r3, [r4, #12]
3401ddc4:	2100      	movs	r1, #0
3401ddc6:	f013 0f80 	tst.w	r3, #128	@ 0x80
3401ddca:	bf14      	ite	ne
3401ddcc:	2340      	movne	r3, #64	@ 0x40
3401ddce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3401ddd2:	2000      	movs	r0, #0
3401ddd4:	6031      	str	r1, [r6, #0]
3401ddd6:	602b      	str	r3, [r5, #0]
3401ddd8:	b016      	add	sp, #88	@ 0x58
3401ddda:	bd70      	pop	{r4, r5, r6, pc}
3401dddc:	466a      	mov	r2, sp
3401ddde:	f000 f879 	bl	3401ded4 <_fstat_r>
3401dde2:	2800      	cmp	r0, #0
3401dde4:	dbed      	blt.n	3401ddc2 <__swhatbuf_r+0x12>
3401dde6:	9901      	ldr	r1, [sp, #4]
3401dde8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3401ddec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
3401ddf0:	4259      	negs	r1, r3
3401ddf2:	4159      	adcs	r1, r3
3401ddf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401ddf8:	e7eb      	b.n	3401ddd2 <__swhatbuf_r+0x22>

3401ddfa <__smakebuf_r>:
3401ddfa:	898b      	ldrh	r3, [r1, #12]
3401ddfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401ddfe:	079d      	lsls	r5, r3, #30
3401de00:	4606      	mov	r6, r0
3401de02:	460c      	mov	r4, r1
3401de04:	d507      	bpl.n	3401de16 <__smakebuf_r+0x1c>
3401de06:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3401de0a:	6023      	str	r3, [r4, #0]
3401de0c:	6123      	str	r3, [r4, #16]
3401de0e:	2301      	movs	r3, #1
3401de10:	6163      	str	r3, [r4, #20]
3401de12:	b003      	add	sp, #12
3401de14:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401de16:	ab01      	add	r3, sp, #4
3401de18:	466a      	mov	r2, sp
3401de1a:	f7ff ffc9 	bl	3401ddb0 <__swhatbuf_r>
3401de1e:	9f00      	ldr	r7, [sp, #0]
3401de20:	4605      	mov	r5, r0
3401de22:	4630      	mov	r0, r6
3401de24:	4639      	mov	r1, r7
3401de26:	f7fd fa83 	bl	3401b330 <_malloc_r>
3401de2a:	b948      	cbnz	r0, 3401de40 <__smakebuf_r+0x46>
3401de2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401de30:	059a      	lsls	r2, r3, #22
3401de32:	d4ee      	bmi.n	3401de12 <__smakebuf_r+0x18>
3401de34:	f023 0303 	bic.w	r3, r3, #3
3401de38:	f043 0302 	orr.w	r3, r3, #2
3401de3c:	81a3      	strh	r3, [r4, #12]
3401de3e:	e7e2      	b.n	3401de06 <__smakebuf_r+0xc>
3401de40:	89a3      	ldrh	r3, [r4, #12]
3401de42:	6020      	str	r0, [r4, #0]
3401de44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3401de48:	81a3      	strh	r3, [r4, #12]
3401de4a:	9b01      	ldr	r3, [sp, #4]
3401de4c:	e9c4 0704 	strd	r0, r7, [r4, #16]
3401de50:	b15b      	cbz	r3, 3401de6a <__smakebuf_r+0x70>
3401de52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401de56:	4630      	mov	r0, r6
3401de58:	f000 f84e 	bl	3401def8 <_isatty_r>
3401de5c:	b128      	cbz	r0, 3401de6a <__smakebuf_r+0x70>
3401de5e:	89a3      	ldrh	r3, [r4, #12]
3401de60:	f023 0303 	bic.w	r3, r3, #3
3401de64:	f043 0301 	orr.w	r3, r3, #1
3401de68:	81a3      	strh	r3, [r4, #12]
3401de6a:	89a3      	ldrh	r3, [r4, #12]
3401de6c:	431d      	orrs	r5, r3
3401de6e:	81a5      	strh	r5, [r4, #12]
3401de70:	e7cf      	b.n	3401de12 <__smakebuf_r+0x18>

3401de72 <_raise_r>:
3401de72:	291f      	cmp	r1, #31
3401de74:	b538      	push	{r3, r4, r5, lr}
3401de76:	4605      	mov	r5, r0
3401de78:	460c      	mov	r4, r1
3401de7a:	d904      	bls.n	3401de86 <_raise_r+0x14>
3401de7c:	2316      	movs	r3, #22
3401de7e:	6003      	str	r3, [r0, #0]
3401de80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401de84:	bd38      	pop	{r3, r4, r5, pc}
3401de86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
3401de88:	b112      	cbz	r2, 3401de90 <_raise_r+0x1e>
3401de8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
3401de8e:	b94b      	cbnz	r3, 3401dea4 <_raise_r+0x32>
3401de90:	4628      	mov	r0, r5
3401de92:	f000 f853 	bl	3401df3c <_getpid_r>
3401de96:	4622      	mov	r2, r4
3401de98:	4601      	mov	r1, r0
3401de9a:	4628      	mov	r0, r5
3401de9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3401dea0:	f000 b83a 	b.w	3401df18 <_kill_r>
3401dea4:	2b01      	cmp	r3, #1
3401dea6:	d00a      	beq.n	3401debe <_raise_r+0x4c>
3401dea8:	1c59      	adds	r1, r3, #1
3401deaa:	d103      	bne.n	3401deb4 <_raise_r+0x42>
3401deac:	2316      	movs	r3, #22
3401deae:	6003      	str	r3, [r0, #0]
3401deb0:	2001      	movs	r0, #1
3401deb2:	e7e7      	b.n	3401de84 <_raise_r+0x12>
3401deb4:	2100      	movs	r1, #0
3401deb6:	4620      	mov	r0, r4
3401deb8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
3401debc:	4798      	blx	r3
3401debe:	2000      	movs	r0, #0
3401dec0:	e7e0      	b.n	3401de84 <_raise_r+0x12>
	...

3401dec4 <raise>:
3401dec4:	4b02      	ldr	r3, [pc, #8]	@ (3401ded0 <raise+0xc>)
3401dec6:	4601      	mov	r1, r0
3401dec8:	6818      	ldr	r0, [r3, #0]
3401deca:	f7ff bfd2 	b.w	3401de72 <_raise_r>
3401dece:	bf00      	nop
3401ded0:	3402071c 	.word	0x3402071c

3401ded4 <_fstat_r>:
3401ded4:	b538      	push	{r3, r4, r5, lr}
3401ded6:	2300      	movs	r3, #0
3401ded8:	4d06      	ldr	r5, [pc, #24]	@ (3401def4 <_fstat_r+0x20>)
3401deda:	4604      	mov	r4, r0
3401dedc:	4608      	mov	r0, r1
3401dede:	4611      	mov	r1, r2
3401dee0:	602b      	str	r3, [r5, #0]
3401dee2:	f7e3 ffdf 	bl	34001ea4 <_fstat>
3401dee6:	1c43      	adds	r3, r0, #1
3401dee8:	d102      	bne.n	3401def0 <_fstat_r+0x1c>
3401deea:	682b      	ldr	r3, [r5, #0]
3401deec:	b103      	cbz	r3, 3401def0 <_fstat_r+0x1c>
3401deee:	6023      	str	r3, [r4, #0]
3401def0:	bd38      	pop	{r3, r4, r5, pc}
3401def2:	bf00      	nop
3401def4:	34020fa4 	.word	0x34020fa4

3401def8 <_isatty_r>:
3401def8:	b538      	push	{r3, r4, r5, lr}
3401defa:	2300      	movs	r3, #0
3401defc:	4d05      	ldr	r5, [pc, #20]	@ (3401df14 <_isatty_r+0x1c>)
3401defe:	4604      	mov	r4, r0
3401df00:	4608      	mov	r0, r1
3401df02:	602b      	str	r3, [r5, #0]
3401df04:	f7e3 ffde 	bl	34001ec4 <_isatty>
3401df08:	1c43      	adds	r3, r0, #1
3401df0a:	d102      	bne.n	3401df12 <_isatty_r+0x1a>
3401df0c:	682b      	ldr	r3, [r5, #0]
3401df0e:	b103      	cbz	r3, 3401df12 <_isatty_r+0x1a>
3401df10:	6023      	str	r3, [r4, #0]
3401df12:	bd38      	pop	{r3, r4, r5, pc}
3401df14:	34020fa4 	.word	0x34020fa4

3401df18 <_kill_r>:
3401df18:	b538      	push	{r3, r4, r5, lr}
3401df1a:	2300      	movs	r3, #0
3401df1c:	4d06      	ldr	r5, [pc, #24]	@ (3401df38 <_kill_r+0x20>)
3401df1e:	4604      	mov	r4, r0
3401df20:	4608      	mov	r0, r1
3401df22:	4611      	mov	r1, r2
3401df24:	602b      	str	r3, [r5, #0]
3401df26:	f7e3 ff79 	bl	34001e1c <_kill>
3401df2a:	1c43      	adds	r3, r0, #1
3401df2c:	d102      	bne.n	3401df34 <_kill_r+0x1c>
3401df2e:	682b      	ldr	r3, [r5, #0]
3401df30:	b103      	cbz	r3, 3401df34 <_kill_r+0x1c>
3401df32:	6023      	str	r3, [r4, #0]
3401df34:	bd38      	pop	{r3, r4, r5, pc}
3401df36:	bf00      	nop
3401df38:	34020fa4 	.word	0x34020fa4

3401df3c <_getpid_r>:
3401df3c:	f7e3 bf66 	b.w	34001e0c <_getpid>

3401df40 <_calloc_r>:
3401df40:	b570      	push	{r4, r5, r6, lr}
3401df42:	fba1 5402 	umull	r5, r4, r1, r2
3401df46:	b934      	cbnz	r4, 3401df56 <_calloc_r+0x16>
3401df48:	4629      	mov	r1, r5
3401df4a:	f7fd f9f1 	bl	3401b330 <_malloc_r>
3401df4e:	4606      	mov	r6, r0
3401df50:	b928      	cbnz	r0, 3401df5e <_calloc_r+0x1e>
3401df52:	4630      	mov	r0, r6
3401df54:	bd70      	pop	{r4, r5, r6, pc}
3401df56:	220c      	movs	r2, #12
3401df58:	2600      	movs	r6, #0
3401df5a:	6002      	str	r2, [r0, #0]
3401df5c:	e7f9      	b.n	3401df52 <_calloc_r+0x12>
3401df5e:	462a      	mov	r2, r5
3401df60:	4621      	mov	r1, r4
3401df62:	f7fe f987 	bl	3401c274 <memset>
3401df66:	e7f4      	b.n	3401df52 <_calloc_r+0x12>

3401df68 <__ascii_mbtowc>:
3401df68:	b082      	sub	sp, #8
3401df6a:	b901      	cbnz	r1, 3401df6e <__ascii_mbtowc+0x6>
3401df6c:	a901      	add	r1, sp, #4
3401df6e:	b142      	cbz	r2, 3401df82 <__ascii_mbtowc+0x1a>
3401df70:	b14b      	cbz	r3, 3401df86 <__ascii_mbtowc+0x1e>
3401df72:	7813      	ldrb	r3, [r2, #0]
3401df74:	600b      	str	r3, [r1, #0]
3401df76:	7812      	ldrb	r2, [r2, #0]
3401df78:	1e10      	subs	r0, r2, #0
3401df7a:	bf18      	it	ne
3401df7c:	2001      	movne	r0, #1
3401df7e:	b002      	add	sp, #8
3401df80:	4770      	bx	lr
3401df82:	4610      	mov	r0, r2
3401df84:	e7fb      	b.n	3401df7e <__ascii_mbtowc+0x16>
3401df86:	f06f 0001 	mvn.w	r0, #1
3401df8a:	e7f8      	b.n	3401df7e <__ascii_mbtowc+0x16>

3401df8c <__ascii_wctomb>:
3401df8c:	4603      	mov	r3, r0
3401df8e:	4608      	mov	r0, r1
3401df90:	b141      	cbz	r1, 3401dfa4 <__ascii_wctomb+0x18>
3401df92:	2aff      	cmp	r2, #255	@ 0xff
3401df94:	d904      	bls.n	3401dfa0 <__ascii_wctomb+0x14>
3401df96:	228a      	movs	r2, #138	@ 0x8a
3401df98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401df9c:	601a      	str	r2, [r3, #0]
3401df9e:	4770      	bx	lr
3401dfa0:	2001      	movs	r0, #1
3401dfa2:	700a      	strb	r2, [r1, #0]
3401dfa4:	4770      	bx	lr
	...

3401dfa8 <_sbrk>:
3401dfa8:	4a04      	ldr	r2, [pc, #16]	@ (3401dfbc <_sbrk+0x14>)
3401dfaa:	4603      	mov	r3, r0
3401dfac:	6811      	ldr	r1, [r2, #0]
3401dfae:	b909      	cbnz	r1, 3401dfb4 <_sbrk+0xc>
3401dfb0:	4903      	ldr	r1, [pc, #12]	@ (3401dfc0 <_sbrk+0x18>)
3401dfb2:	6011      	str	r1, [r2, #0]
3401dfb4:	6810      	ldr	r0, [r2, #0]
3401dfb6:	4403      	add	r3, r0
3401dfb8:	6013      	str	r3, [r2, #0]
3401dfba:	4770      	bx	lr
3401dfbc:	34020fac 	.word	0x34020fac
3401dfc0:	34020fb0 	.word	0x34020fb0

3401dfc4 <_init>:
3401dfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401dfc6:	bf00      	nop
3401dfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401dfca:	bc08      	pop	{r3}
3401dfcc:	469e      	mov	lr, r3
3401dfce:	4770      	bx	lr

3401dfd0 <_fini>:
3401dfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401dfd2:	bf00      	nop
3401dfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401dfd6:	bc08      	pop	{r3}
3401dfd8:	469e      	mov	lr, r3
3401dfda:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3401dfe0 <SECURE_SystemCoreClockUpdate>:
3401dfe0:	e97f e97f 	sg
3401dfe4:	f7e5 be04 	b.w	34003bf0 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
