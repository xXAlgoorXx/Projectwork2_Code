
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c080  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  3401c7e0  3401c7e0  0001c7e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000297c  3401c800  3401c800  0001c800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  3401f17c  3401f17c  0001f410  2**0
                  CONTENTS
  5 .ARM          00000008  3401f17c  3401f17c  0001f17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  3401f184  3401f410  0001f410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  3401f184  3401f184  0001f184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  3401f188  3401f188  0001f188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000284  3401f18c  3401f18c  0001f18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000069c  3401f410  3401f410  0001f410  2**2
                  ALLOC
 11 ._user_heap_stack 00004204  3401faac  3401faac  0001f410  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  0001f410  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040d43  00000000  00000000  0001f44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d92  00000000  00000000  0006018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000031d8  00000000  00000000  00065f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000026e2  00000000  00000000  000690f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000731ca  00000000  00000000  0006b7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d831  00000000  00000000  000de9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    003a1b78  00000000  00000000  0011c1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  004bdd4d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e508  00000000  00000000  004bdd90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000014b  00000000  00000000  004cc298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	3401f410 	.word	0x3401f410
3400076c:	00000000 	.word	0x00000000
34000770:	3401c7b8 	.word	0x3401c7b8

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	3401f414 	.word	0x3401f414
3400078c:	3401c7b8 	.word	0x3401c7b8

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b97e 	b.w	34000ab4 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	460c      	mov	r4, r1
340007d8:	2b00      	cmp	r3, #0
340007da:	d14d      	bne.n	34000878 <__udivmoddi4+0xa8>
340007dc:	428a      	cmp	r2, r1
340007de:	460f      	mov	r7, r1
340007e0:	4684      	mov	ip, r0
340007e2:	4696      	mov	lr, r2
340007e4:	fab2 f382 	clz	r3, r2
340007e8:	d960      	bls.n	340008ac <__udivmoddi4+0xdc>
340007ea:	b14b      	cbz	r3, 34000800 <__udivmoddi4+0x30>
340007ec:	fa02 fe03 	lsl.w	lr, r2, r3
340007f0:	f1c3 0220 	rsb	r2, r3, #32
340007f4:	409f      	lsls	r7, r3
340007f6:	fa00 fc03 	lsl.w	ip, r0, r3
340007fa:	fa20 f202 	lsr.w	r2, r0, r2
340007fe:	4317      	orrs	r7, r2
34000800:	ea4f 461e 	mov.w	r6, lr, lsr #16
34000804:	fa1f f48e 	uxth.w	r4, lr
34000808:	ea4f 421c 	mov.w	r2, ip, lsr #16
3400080c:	fbb7 f1f6 	udiv	r1, r7, r6
34000810:	fb06 7711 	mls	r7, r6, r1, r7
34000814:	fb01 f004 	mul.w	r0, r1, r4
34000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
3400081c:	4290      	cmp	r0, r2
3400081e:	d908      	bls.n	34000832 <__udivmoddi4+0x62>
34000820:	eb1e 0202 	adds.w	r2, lr, r2
34000824:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
34000828:	d202      	bcs.n	34000830 <__udivmoddi4+0x60>
3400082a:	4290      	cmp	r0, r2
3400082c:	f200 812d 	bhi.w	34000a8a <__udivmoddi4+0x2ba>
34000830:	4639      	mov	r1, r7
34000832:	1a12      	subs	r2, r2, r0
34000834:	fa1f fc8c 	uxth.w	ip, ip
34000838:	fbb2 f0f6 	udiv	r0, r2, r6
3400083c:	fb06 2210 	mls	r2, r6, r0, r2
34000840:	fb00 f404 	mul.w	r4, r0, r4
34000844:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
34000848:	4564      	cmp	r4, ip
3400084a:	d908      	bls.n	3400085e <__udivmoddi4+0x8e>
3400084c:	eb1e 0c0c 	adds.w	ip, lr, ip
34000850:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
34000854:	d202      	bcs.n	3400085c <__udivmoddi4+0x8c>
34000856:	4564      	cmp	r4, ip
34000858:	f200 811a 	bhi.w	34000a90 <__udivmoddi4+0x2c0>
3400085c:	4610      	mov	r0, r2
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	ebac 0c04 	sub.w	ip, ip, r4
34000866:	2100      	movs	r1, #0
34000868:	b125      	cbz	r5, 34000874 <__udivmoddi4+0xa4>
3400086a:	fa2c f303 	lsr.w	r3, ip, r3
3400086e:	2200      	movs	r2, #0
34000870:	e9c5 3200 	strd	r3, r2, [r5]
34000874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000878:	428b      	cmp	r3, r1
3400087a:	d905      	bls.n	34000888 <__udivmoddi4+0xb8>
3400087c:	b10d      	cbz	r5, 34000882 <__udivmoddi4+0xb2>
3400087e:	e9c5 0100 	strd	r0, r1, [r5]
34000882:	2100      	movs	r1, #0
34000884:	4608      	mov	r0, r1
34000886:	e7f5      	b.n	34000874 <__udivmoddi4+0xa4>
34000888:	fab3 f183 	clz	r1, r3
3400088c:	2900      	cmp	r1, #0
3400088e:	d14d      	bne.n	3400092c <__udivmoddi4+0x15c>
34000890:	42a3      	cmp	r3, r4
34000892:	f0c0 80f2 	bcc.w	34000a7a <__udivmoddi4+0x2aa>
34000896:	4290      	cmp	r0, r2
34000898:	f080 80ef 	bcs.w	34000a7a <__udivmoddi4+0x2aa>
3400089c:	4606      	mov	r6, r0
3400089e:	4623      	mov	r3, r4
340008a0:	4608      	mov	r0, r1
340008a2:	2d00      	cmp	r5, #0
340008a4:	d0e6      	beq.n	34000874 <__udivmoddi4+0xa4>
340008a6:	e9c5 6300 	strd	r6, r3, [r5]
340008aa:	e7e3      	b.n	34000874 <__udivmoddi4+0xa4>
340008ac:	2b00      	cmp	r3, #0
340008ae:	f040 80a2 	bne.w	340009f6 <__udivmoddi4+0x226>
340008b2:	1a8a      	subs	r2, r1, r2
340008b4:	ea4f 471e 	mov.w	r7, lr, lsr #16
340008b8:	fa1f f68e 	uxth.w	r6, lr
340008bc:	2101      	movs	r1, #1
340008be:	fbb2 f4f7 	udiv	r4, r2, r7
340008c2:	fb07 2014 	mls	r0, r7, r4, r2
340008c6:	ea4f 421c 	mov.w	r2, ip, lsr #16
340008ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
340008ce:	fb06 f004 	mul.w	r0, r6, r4
340008d2:	4290      	cmp	r0, r2
340008d4:	d90f      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d6:	eb1e 0202 	adds.w	r2, lr, r2
340008da:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	4290      	cmp	r0, r2
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80c8 	beq.w	34000a84 <__udivmoddi4+0x2b4>
340008f4:	4644      	mov	r4, r8
340008f6:	1a12      	subs	r2, r2, r0
340008f8:	fa1f fc8c 	uxth.w	ip, ip
340008fc:	fbb2 f0f7 	udiv	r0, r2, r7
34000900:	fb07 2210 	mls	r2, r7, r0, r2
34000904:	fb00 f606 	mul.w	r6, r0, r6
34000908:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
3400090c:	4566      	cmp	r6, ip
3400090e:	d908      	bls.n	34000922 <__udivmoddi4+0x152>
34000910:	eb1e 0c0c 	adds.w	ip, lr, ip
34000914:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
34000918:	d202      	bcs.n	34000920 <__udivmoddi4+0x150>
3400091a:	4566      	cmp	r6, ip
3400091c:	f200 80bb 	bhi.w	34000a96 <__udivmoddi4+0x2c6>
34000920:	4610      	mov	r0, r2
34000922:	ebac 0c06 	sub.w	ip, ip, r6
34000926:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa04 fe01 	lsl.w	lr, r4, r1
34000936:	fa22 f706 	lsr.w	r7, r2, r6
3400093a:	fa20 fc06 	lsr.w	ip, r0, r6
3400093e:	40f4      	lsrs	r4, r6
34000940:	408a      	lsls	r2, r1
34000942:	431f      	orrs	r7, r3
34000944:	ea4e 030c 	orr.w	r3, lr, ip
34000948:	fa00 fe01 	lsl.w	lr, r0, r1
3400094c:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000950:	ea4f 4913 	mov.w	r9, r3, lsr #16
34000954:	fa1f fc87 	uxth.w	ip, r7
34000958:	fbb4 f0f8 	udiv	r0, r4, r8
3400095c:	fb08 4410 	mls	r4, r8, r0, r4
34000960:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
34000964:	fb00 f90c 	mul.w	r9, r0, ip
34000968:	45a1      	cmp	r9, r4
3400096a:	d90e      	bls.n	3400098a <__udivmoddi4+0x1ba>
3400096c:	193c      	adds	r4, r7, r4
3400096e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
34000972:	bf2c      	ite	cs
34000974:	f04f 0b01 	movcs.w	fp, #1
34000978:	f04f 0b00 	movcc.w	fp, #0
3400097c:	45a1      	cmp	r9, r4
3400097e:	d903      	bls.n	34000988 <__udivmoddi4+0x1b8>
34000980:	f1bb 0f00 	cmp.w	fp, #0
34000984:	f000 8093 	beq.w	34000aae <__udivmoddi4+0x2de>
34000988:	4650      	mov	r0, sl
3400098a:	eba4 0409 	sub.w	r4, r4, r9
3400098e:	fa1f f983 	uxth.w	r9, r3
34000992:	fbb4 f3f8 	udiv	r3, r4, r8
34000996:	fb08 4413 	mls	r4, r8, r3, r4
3400099a:	fb03 fc0c 	mul.w	ip, r3, ip
3400099e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
340009a2:	45a4      	cmp	ip, r4
340009a4:	d906      	bls.n	340009b4 <__udivmoddi4+0x1e4>
340009a6:	193c      	adds	r4, r7, r4
340009a8:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
340009ac:	d201      	bcs.n	340009b2 <__udivmoddi4+0x1e2>
340009ae:	45a4      	cmp	ip, r4
340009b0:	d87a      	bhi.n	34000aa8 <__udivmoddi4+0x2d8>
340009b2:	4643      	mov	r3, r8
340009b4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
340009b8:	eba4 040c 	sub.w	r4, r4, ip
340009bc:	fba0 9802 	umull	r9, r8, r0, r2
340009c0:	4544      	cmp	r4, r8
340009c2:	46cc      	mov	ip, r9
340009c4:	4643      	mov	r3, r8
340009c6:	d302      	bcc.n	340009ce <__udivmoddi4+0x1fe>
340009c8:	d106      	bne.n	340009d8 <__udivmoddi4+0x208>
340009ca:	45ce      	cmp	lr, r9
340009cc:	d204      	bcs.n	340009d8 <__udivmoddi4+0x208>
340009ce:	3801      	subs	r0, #1
340009d0:	ebb9 0c02 	subs.w	ip, r9, r2
340009d4:	eb68 0307 	sbc.w	r3, r8, r7
340009d8:	b15d      	cbz	r5, 340009f2 <__udivmoddi4+0x222>
340009da:	ebbe 020c 	subs.w	r2, lr, ip
340009de:	eb64 0403 	sbc.w	r4, r4, r3
340009e2:	fa04 f606 	lsl.w	r6, r4, r6
340009e6:	fa22 f301 	lsr.w	r3, r2, r1
340009ea:	40cc      	lsrs	r4, r1
340009ec:	431e      	orrs	r6, r3
340009ee:	e9c5 6400 	strd	r6, r4, [r5]
340009f2:	2100      	movs	r1, #0
340009f4:	e73e      	b.n	34000874 <__udivmoddi4+0xa4>
340009f6:	fa02 fe03 	lsl.w	lr, r2, r3
340009fa:	f1c3 0120 	rsb	r1, r3, #32
340009fe:	fa04 f203 	lsl.w	r2, r4, r3
34000a02:	fa00 fc03 	lsl.w	ip, r0, r3
34000a06:	40cc      	lsrs	r4, r1
34000a08:	ea4f 471e 	mov.w	r7, lr, lsr #16
34000a0c:	fa20 f101 	lsr.w	r1, r0, r1
34000a10:	fa1f f68e 	uxth.w	r6, lr
34000a14:	fbb4 f0f7 	udiv	r0, r4, r7
34000a18:	430a      	orrs	r2, r1
34000a1a:	fb07 4410 	mls	r4, r7, r0, r4
34000a1e:	0c11      	lsrs	r1, r2, #16
34000a20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
34000a24:	fb00 f406 	mul.w	r4, r0, r6
34000a28:	428c      	cmp	r4, r1
34000a2a:	d90e      	bls.n	34000a4a <__udivmoddi4+0x27a>
34000a2c:	eb1e 0101 	adds.w	r1, lr, r1
34000a30:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
34000a34:	bf2c      	ite	cs
34000a36:	f04f 0901 	movcs.w	r9, #1
34000a3a:	f04f 0900 	movcc.w	r9, #0
34000a3e:	428c      	cmp	r4, r1
34000a40:	d902      	bls.n	34000a48 <__udivmoddi4+0x278>
34000a42:	f1b9 0f00 	cmp.w	r9, #0
34000a46:	d02c      	beq.n	34000aa2 <__udivmoddi4+0x2d2>
34000a48:	4640      	mov	r0, r8
34000a4a:	1b09      	subs	r1, r1, r4
34000a4c:	b292      	uxth	r2, r2
34000a4e:	fbb1 f4f7 	udiv	r4, r1, r7
34000a52:	fb07 1114 	mls	r1, r7, r4, r1
34000a56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34000a5a:	fb04 f106 	mul.w	r1, r4, r6
34000a5e:	4291      	cmp	r1, r2
34000a60:	d907      	bls.n	34000a72 <__udivmoddi4+0x2a2>
34000a62:	eb1e 0202 	adds.w	r2, lr, r2
34000a66:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
34000a6a:	d201      	bcs.n	34000a70 <__udivmoddi4+0x2a0>
34000a6c:	4291      	cmp	r1, r2
34000a6e:	d815      	bhi.n	34000a9c <__udivmoddi4+0x2cc>
34000a70:	4644      	mov	r4, r8
34000a72:	1a52      	subs	r2, r2, r1
34000a74:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
34000a78:	e721      	b.n	340008be <__udivmoddi4+0xee>
34000a7a:	1a86      	subs	r6, r0, r2
34000a7c:	eb64 0303 	sbc.w	r3, r4, r3
34000a80:	2001      	movs	r0, #1
34000a82:	e70e      	b.n	340008a2 <__udivmoddi4+0xd2>
34000a84:	3c02      	subs	r4, #2
34000a86:	4472      	add	r2, lr
34000a88:	e735      	b.n	340008f6 <__udivmoddi4+0x126>
34000a8a:	3902      	subs	r1, #2
34000a8c:	4472      	add	r2, lr
34000a8e:	e6d0      	b.n	34000832 <__udivmoddi4+0x62>
34000a90:	44f4      	add	ip, lr
34000a92:	3802      	subs	r0, #2
34000a94:	e6e3      	b.n	3400085e <__udivmoddi4+0x8e>
34000a96:	44f4      	add	ip, lr
34000a98:	3802      	subs	r0, #2
34000a9a:	e742      	b.n	34000922 <__udivmoddi4+0x152>
34000a9c:	3c02      	subs	r4, #2
34000a9e:	4472      	add	r2, lr
34000aa0:	e7e7      	b.n	34000a72 <__udivmoddi4+0x2a2>
34000aa2:	3802      	subs	r0, #2
34000aa4:	4471      	add	r1, lr
34000aa6:	e7d0      	b.n	34000a4a <__udivmoddi4+0x27a>
34000aa8:	3b02      	subs	r3, #2
34000aaa:	443c      	add	r4, r7
34000aac:	e782      	b.n	340009b4 <__udivmoddi4+0x1e4>
34000aae:	3802      	subs	r0, #2
34000ab0:	443c      	add	r4, r7
34000ab2:	e76a      	b.n	3400098a <__udivmoddi4+0x1ba>

34000ab4 <__aeabi_idiv0>:
34000ab4:	4770      	bx	lr
34000ab6:	bf00      	nop

34000ab8 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
34000ab8:	b580      	push	{r7, lr}
34000aba:	b086      	sub	sp, #24
34000abc:	af00      	add	r7, sp, #0
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
34000abe:	4b21      	ldr	r3, [pc, #132]	@ (34000b44 <Fuse_Programming+0x8c>)
34000ac0:	607b      	str	r3, [r7, #4]

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
34000ac2:	237c      	movs	r3, #124	@ 0x7c
34000ac4:	617b      	str	r3, [r7, #20]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000ac6:	f107 020c 	add.w	r2, r7, #12
34000aca:	1d3b      	adds	r3, r7, #4
34000acc:	6979      	ldr	r1, [r7, #20]
34000ace:	4618      	mov	r0, r3
34000ad0:	f003 f808 	bl	34003ae4 <HAL_BSEC_OTP_Read>
34000ad4:	4603      	mov	r3, r0
34000ad6:	2b00      	cmp	r3, #0
34000ad8:	d12e      	bne.n	34000b38 <Fuse_Programming+0x80>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
34000ada:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
34000ade:	613b      	str	r3, [r7, #16]
    if ((data & bit_mask) != bit_mask)
34000ae0:	68fa      	ldr	r2, [r7, #12]
34000ae2:	693b      	ldr	r3, [r7, #16]
34000ae4:	4013      	ands	r3, r2
34000ae6:	693a      	ldr	r2, [r7, #16]
34000ae8:	429a      	cmp	r2, r3
34000aea:	d027      	beq.n	34000b3c <Fuse_Programming+0x84>
    {
      data |= bit_mask;
34000aec:	68fa      	ldr	r2, [r7, #12]
34000aee:	693b      	ldr	r3, [r7, #16]
34000af0:	4313      	orrs	r3, r2
34000af2:	60fb      	str	r3, [r7, #12]
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000af4:	68fa      	ldr	r2, [r7, #12]
34000af6:	1d38      	adds	r0, r7, #4
34000af8:	2300      	movs	r3, #0
34000afa:	6979      	ldr	r1, [r7, #20]
34000afc:	f003 f82a 	bl	34003b54 <HAL_BSEC_OTP_Program>
34000b00:	4603      	mov	r3, r0
34000b02:	2b00      	cmp	r3, #0
34000b04:	d115      	bne.n	34000b32 <Fuse_Programming+0x7a>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000b06:	f107 020c 	add.w	r2, r7, #12
34000b0a:	1d3b      	adds	r3, r7, #4
34000b0c:	6979      	ldr	r1, [r7, #20]
34000b0e:	4618      	mov	r0, r3
34000b10:	f002 ffe8 	bl	34003ae4 <HAL_BSEC_OTP_Read>
34000b14:	4603      	mov	r3, r0
34000b16:	2b00      	cmp	r3, #0
34000b18:	d108      	bne.n	34000b2c <Fuse_Programming+0x74>
        {
          if ((data & bit_mask) != bit_mask)
34000b1a:	68fa      	ldr	r2, [r7, #12]
34000b1c:	693b      	ldr	r3, [r7, #16]
34000b1e:	4013      	ands	r3, r2
34000b20:	693a      	ldr	r2, [r7, #16]
34000b22:	429a      	cmp	r2, r3
34000b24:	d00a      	beq.n	34000b3c <Fuse_Programming+0x84>
          {
            /* Error : Fuse programming not taken in account */
            ErrorHandler();
34000b26:	f000 f80f 	bl	34000b48 <ErrorHandler>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
34000b2a:	e007      	b.n	34000b3c <Fuse_Programming+0x84>
          ErrorHandler();
34000b2c:	f000 f80c 	bl	34000b48 <ErrorHandler>
}
34000b30:	e004      	b.n	34000b3c <Fuse_Programming+0x84>
        ErrorHandler();
34000b32:	f000 f809 	bl	34000b48 <ErrorHandler>
}
34000b36:	e001      	b.n	34000b3c <Fuse_Programming+0x84>
    ErrorHandler();
34000b38:	f000 f806 	bl	34000b48 <ErrorHandler>
}
34000b3c:	bf00      	nop
34000b3e:	3718      	adds	r7, #24
34000b40:	46bd      	mov	sp, r7
34000b42:	bd80      	pop	{r7, pc}
34000b44:	56009000 	.word	0x56009000

34000b48 <ErrorHandler>:
/**
  * @brief  Handle error which occurs when calling HAL API
  * @retval None
  */
static void ErrorHandler(void)
{
34000b48:	b480      	push	{r7}
34000b4a:	af00      	add	r7, sp, #0
  while(1);
34000b4c:	bf00      	nop
34000b4e:	e7fd      	b.n	34000b4c <ErrorHandler+0x4>

34000b50 <LL_MEM_EnableClock>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
34000b50:	b480      	push	{r7}
34000b52:	b085      	sub	sp, #20
34000b54:	af00      	add	r7, sp, #0
34000b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
34000b58:	4a07      	ldr	r2, [pc, #28]	@ (34000b78 <LL_MEM_EnableClock+0x28>)
34000b5a:	687b      	ldr	r3, [r7, #4]
34000b5c:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
34000b60:	4b05      	ldr	r3, [pc, #20]	@ (34000b78 <LL_MEM_EnableClock+0x28>)
34000b62:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34000b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000b68:	68fb      	ldr	r3, [r7, #12]
}
34000b6a:	bf00      	nop
34000b6c:	3714      	adds	r7, #20
34000b6e:	46bd      	mov	sp, r7
34000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
34000b74:	4770      	bx	lr
34000b76:	bf00      	nop
34000b78:	56028000 	.word	0x56028000

34000b7c <LL_MEM_EnableClockLowPower>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
34000b7c:	b480      	push	{r7}
34000b7e:	b085      	sub	sp, #20
34000b80:	af00      	add	r7, sp, #0
34000b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000b84:	4a07      	ldr	r2, [pc, #28]	@ (34000ba4 <LL_MEM_EnableClockLowPower+0x28>)
34000b86:	687b      	ldr	r3, [r7, #4]
34000b88:	f8c2 3a8c 	str.w	r3, [r2, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
34000b8c:	4b05      	ldr	r3, [pc, #20]	@ (34000ba4 <LL_MEM_EnableClockLowPower+0x28>)
34000b8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34000b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000b94:	68fb      	ldr	r3, [r7, #12]
}
34000b96:	bf00      	nop
34000b98:	3714      	adds	r7, #20
34000b9a:	46bd      	mov	sp, r7
34000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34000ba0:	4770      	bx	lr
34000ba2:	bf00      	nop
34000ba4:	56028000 	.word	0x56028000

34000ba8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_MDF1
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADF1
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
34000ba8:	b480      	push	{r7}
34000baa:	b085      	sub	sp, #20
34000bac:	af00      	add	r7, sp, #0
34000bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34000bb0:	4a07      	ldr	r2, [pc, #28]	@ (34000bd0 <LL_AHB2_GRP1_EnableClock+0x28>)
34000bb2:	687b      	ldr	r3, [r7, #4]
34000bb4:	f8c2 3a54 	str.w	r3, [r2, #2644]	@ 0xa54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB2ENR);
34000bb8:	4b05      	ldr	r3, [pc, #20]	@ (34000bd0 <LL_AHB2_GRP1_EnableClock+0x28>)
34000bba:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
34000bbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000bc0:	68fb      	ldr	r3, [r7, #12]
}
34000bc2:	bf00      	nop
34000bc4:	3714      	adds	r7, #20
34000bc6:	46bd      	mov	sp, r7
34000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34000bcc:	4770      	bx	lr
34000bce:	bf00      	nop
34000bd0:	56028000 	.word	0x56028000

34000bd4 <LL_AHB3_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
34000bd4:	b480      	push	{r7}
34000bd6:	b085      	sub	sp, #20
34000bd8:	af00      	add	r7, sp, #0
34000bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34000bdc:	4a07      	ldr	r2, [pc, #28]	@ (34000bfc <LL_AHB3_GRP1_EnableClock+0x28>)
34000bde:	687b      	ldr	r3, [r7, #4]
34000be0:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB3ENR);
34000be4:	4b05      	ldr	r3, [pc, #20]	@ (34000bfc <LL_AHB3_GRP1_EnableClock+0x28>)
34000be6:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
34000bea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000bec:	68fb      	ldr	r3, [r7, #12]
}
34000bee:	bf00      	nop
34000bf0:	3714      	adds	r7, #20
34000bf2:	46bd      	mov	sp, r7
34000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
34000bf8:	4770      	bx	lr
34000bfa:	bf00      	nop
34000bfc:	56028000 	.word	0x56028000

34000c00 <LL_AHB3_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_ForceReset(uint32_t Periphs)
{
34000c00:	b480      	push	{r7}
34000c02:	b083      	sub	sp, #12
34000c04:	af00      	add	r7, sp, #0
34000c06:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
34000c08:	4a04      	ldr	r2, [pc, #16]	@ (34000c1c <LL_AHB3_GRP1_ForceReset+0x1c>)
34000c0a:	687b      	ldr	r3, [r7, #4]
34000c0c:	f8c2 3a18 	str.w	r3, [r2, #2584]	@ 0xa18
}
34000c10:	bf00      	nop
34000c12:	370c      	adds	r7, #12
34000c14:	46bd      	mov	sp, r7
34000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
34000c1a:	4770      	bx	lr
34000c1c:	56028000 	.word	0x56028000

34000c20 <LL_AHB3_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_ReleaseReset(uint32_t Periphs)
{
34000c20:	b480      	push	{r7}
34000c22:	b083      	sub	sp, #12
34000c24:	af00      	add	r7, sp, #0
34000c26:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
34000c28:	4b06      	ldr	r3, [pc, #24]	@ (34000c44 <LL_AHB3_GRP1_ReleaseReset+0x24>)
34000c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34000c2e:	461a      	mov	r2, r3
34000c30:	687b      	ldr	r3, [r7, #4]
34000c32:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
}
34000c36:	bf00      	nop
34000c38:	370c      	adds	r7, #12
34000c3a:	46bd      	mov	sp, r7
34000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34000c40:	4770      	bx	lr
34000c42:	bf00      	nop
34000c44:	56028000 	.word	0x56028000

34000c48 <LL_AHB5_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClock(uint32_t Periphs)
{
34000c48:	b480      	push	{r7}
34000c4a:	b085      	sub	sp, #20
34000c4c:	af00      	add	r7, sp, #0
34000c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34000c50:	4a07      	ldr	r2, [pc, #28]	@ (34000c70 <LL_AHB5_GRP1_EnableClock+0x28>)
34000c52:	687b      	ldr	r3, [r7, #4]
34000c54:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5ENR);
34000c58:	4b05      	ldr	r3, [pc, #20]	@ (34000c70 <LL_AHB5_GRP1_EnableClock+0x28>)
34000c5a:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34000c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000c60:	68fb      	ldr	r3, [r7, #12]
}
34000c62:	bf00      	nop
34000c64:	3714      	adds	r7, #20
34000c66:	46bd      	mov	sp, r7
34000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
34000c6c:	4770      	bx	lr
34000c6e:	bf00      	nop
34000c70:	56028000 	.word	0x56028000

34000c74 <LL_AHB5_GRP1_ForceReset>:
  *         @arg @ref LL_AHB5_GRP1_PERIPH_CACHEAXI
  *         @arg @ref LL_AHB5_GRP1_PERIPH_NPU
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_ForceReset(uint32_t Periphs)
{
34000c74:	b480      	push	{r7}
34000c76:	b083      	sub	sp, #12
34000c78:	af00      	add	r7, sp, #0
34000c7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34000c7c:	4a04      	ldr	r2, [pc, #16]	@ (34000c90 <LL_AHB5_GRP1_ForceReset+0x1c>)
34000c7e:	687b      	ldr	r3, [r7, #4]
34000c80:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
34000c84:	bf00      	nop
34000c86:	370c      	adds	r7, #12
34000c88:	46bd      	mov	sp, r7
34000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34000c8e:	4770      	bx	lr
34000c90:	56028000 	.word	0x56028000

34000c94 <LL_AHB5_GRP1_ReleaseReset>:
  *         @arg @ref LL_AHB5_GRP1_PERIPH_CACHEAXI
  *         @arg @ref LL_AHB5_GRP1_PERIPH_NPU
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_ReleaseReset(uint32_t Periphs)
{
34000c94:	b480      	push	{r7}
34000c96:	b083      	sub	sp, #12
34000c98:	af00      	add	r7, sp, #0
34000c9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000c9c:	4b06      	ldr	r3, [pc, #24]	@ (34000cb8 <LL_AHB5_GRP1_ReleaseReset+0x24>)
34000c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34000ca2:	461a      	mov	r2, r3
34000ca4:	687b      	ldr	r3, [r7, #4]
34000ca6:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
34000caa:	bf00      	nop
34000cac:	370c      	adds	r7, #12
34000cae:	46bd      	mov	sp, r7
34000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
34000cb4:	4770      	bx	lr
34000cb6:	bf00      	nop
34000cb8:	56028000 	.word	0x56028000

34000cbc <LL_AHB5_GRP1_EnableClockLowPower>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
34000cbc:	b480      	push	{r7}
34000cbe:	b085      	sub	sp, #20
34000cc0:	af00      	add	r7, sp, #0
34000cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000cc4:	4a07      	ldr	r2, [pc, #28]	@ (34000ce4 <LL_AHB5_GRP1_EnableClockLowPower+0x28>)
34000cc6:	687b      	ldr	r3, [r7, #4]
34000cc8:	f8c2 3aa0 	str.w	r3, [r2, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
34000ccc:	4b05      	ldr	r3, [pc, #20]	@ (34000ce4 <LL_AHB5_GRP1_EnableClockLowPower+0x28>)
34000cce:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34000cd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000cd4:	68fb      	ldr	r3, [r7, #12]
}
34000cd6:	bf00      	nop
34000cd8:	3714      	adds	r7, #20
34000cda:	46bd      	mov	sp, r7
34000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
34000ce0:	4770      	bx	lr
34000ce2:	bf00      	nop
34000ce4:	56028000 	.word	0x56028000

34000ce8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
34000ce8:	b480      	push	{r7}
34000cea:	b085      	sub	sp, #20
34000cec:	af00      	add	r7, sp, #0
34000cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34000cf0:	4a07      	ldr	r2, [pc, #28]	@ (34000d10 <LL_APB2_GRP1_EnableClock+0x28>)
34000cf2:	687b      	ldr	r3, [r7, #4]
34000cf4:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34000cf8:	4b05      	ldr	r3, [pc, #20]	@ (34000d10 <LL_APB2_GRP1_EnableClock+0x28>)
34000cfa:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34000cfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000d00:	68fb      	ldr	r3, [r7, #12]
}
34000d02:	bf00      	nop
34000d04:	3714      	adds	r7, #20
34000d06:	46bd      	mov	sp, r7
34000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d0c:	4770      	bx	lr
34000d0e:	bf00      	nop
34000d10:	56028000 	.word	0x56028000

34000d14 <LL_APB5_GRP1_EnableClockLowPower>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
34000d14:	b480      	push	{r7}
34000d16:	b085      	sub	sp, #20
34000d18:	af00      	add	r7, sp, #0
34000d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000d1c:	4a07      	ldr	r2, [pc, #28]	@ (34000d3c <LL_APB5_GRP1_EnableClockLowPower+0x28>)
34000d1e:	687b      	ldr	r3, [r7, #4]
34000d20:	f8c2 3abc 	str.w	r3, [r2, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34000d24:	4b05      	ldr	r3, [pc, #20]	@ (34000d3c <LL_APB5_GRP1_EnableClockLowPower+0x28>)
34000d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
34000d2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000d2c:	68fb      	ldr	r3, [r7, #12]
}
34000d2e:	bf00      	nop
34000d30:	3714      	adds	r7, #20
34000d32:	46bd      	mov	sp, r7
34000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d38:	4770      	bx	lr
34000d3a:	bf00      	nop
34000d3c:	56028000 	.word	0x56028000

34000d40 <LL_RCC_SetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
34000d40:	b480      	push	{r7}
34000d42:	b083      	sub	sp, #12
34000d44:	af00      	add	r7, sp, #0
34000d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
34000d48:	4b06      	ldr	r3, [pc, #24]	@ (34000d64 <LL_RCC_SetCpuClkSource+0x24>)
34000d4a:	6a1b      	ldr	r3, [r3, #32]
34000d4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
34000d50:	4904      	ldr	r1, [pc, #16]	@ (34000d64 <LL_RCC_SetCpuClkSource+0x24>)
34000d52:	687b      	ldr	r3, [r7, #4]
34000d54:	4313      	orrs	r3, r2
34000d56:	620b      	str	r3, [r1, #32]
}
34000d58:	bf00      	nop
34000d5a:	370c      	adds	r7, #12
34000d5c:	46bd      	mov	sp, r7
34000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d62:	4770      	bx	lr
34000d64:	56028000 	.word	0x56028000

34000d68 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
34000d68:	b480      	push	{r7}
34000d6a:	b083      	sub	sp, #12
34000d6c:	af00      	add	r7, sp, #0
34000d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
34000d70:	4b06      	ldr	r3, [pc, #24]	@ (34000d8c <LL_RCC_SetSysClkSource+0x24>)
34000d72:	6a1b      	ldr	r3, [r3, #32]
34000d74:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34000d78:	4904      	ldr	r1, [pc, #16]	@ (34000d8c <LL_RCC_SetSysClkSource+0x24>)
34000d7a:	687b      	ldr	r3, [r7, #4]
34000d7c:	4313      	orrs	r3, r2
34000d7e:	620b      	str	r3, [r1, #32]
}
34000d80:	bf00      	nop
34000d82:	370c      	adds	r7, #12
34000d84:	46bd      	mov	sp, r7
34000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d8a:	4770      	bx	lr
34000d8c:	56028000 	.word	0x56028000

34000d90 <LL_Buffer_addr_base>:
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
    return eb->blob_address;
  }

  static inline unsigned char *LL_Buffer_addr_base(const LL_Buffer_InfoTypeDef *buf)
  {
34000d90:	b480      	push	{r7}
34000d92:	b085      	sub	sp, #20
34000d94:	af00      	add	r7, sp, #0
34000d96:	6078      	str	r0, [r7, #4]
    if (buf->is_user_allocated)
34000d98:	687b      	ldr	r3, [r7, #4]
34000d9a:	7d1b      	ldrb	r3, [r3, #20]
34000d9c:	2b00      	cmp	r3, #0
34000d9e:	d005      	beq.n	34000dac <LL_Buffer_addr_base+0x1c>
    {
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
34000da0:	687b      	ldr	r3, [r7, #4]
34000da2:	685b      	ldr	r3, [r3, #4]
34000da4:	60fb      	str	r3, [r7, #12]
      return *tmp;
34000da6:	68fb      	ldr	r3, [r7, #12]
34000da8:	681b      	ldr	r3, [r3, #0]
34000daa:	e001      	b.n	34000db0 <LL_Buffer_addr_base+0x20>
    }
    return buf->addr_base.p;
34000dac:	687b      	ldr	r3, [r7, #4]
34000dae:	685b      	ldr	r3, [r3, #4]
  }
34000db0:	4618      	mov	r0, r3
34000db2:	3714      	adds	r7, #20
34000db4:	46bd      	mov	sp, r7
34000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
34000dba:	4770      	bx	lr

34000dbc <LL_Buffer_addr_start>:

  static inline unsigned char *LL_Buffer_addr_start(const LL_Buffer_InfoTypeDef *buf)
  {
34000dbc:	b580      	push	{r7, lr}
34000dbe:	b082      	sub	sp, #8
34000dc0:	af00      	add	r7, sp, #0
34000dc2:	6078      	str	r0, [r7, #4]
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34000dc4:	6878      	ldr	r0, [r7, #4]
34000dc6:	f7ff ffe3 	bl	34000d90 <LL_Buffer_addr_base>
34000dca:	4602      	mov	r2, r0
34000dcc:	687b      	ldr	r3, [r7, #4]
34000dce:	689b      	ldr	r3, [r3, #8]
34000dd0:	4413      	add	r3, r2
  }
34000dd2:	4618      	mov	r0, r3
34000dd4:	3708      	adds	r7, #8
34000dd6:	46bd      	mov	sp, r7
34000dd8:	bd80      	pop	{r7, pc}

34000dda <LL_Buffer_len>:
  {
    return LL_Buffer_addr_base(buf) + buf->offset_limit;
  }

  static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
  {
34000dda:	b480      	push	{r7}
34000ddc:	b083      	sub	sp, #12
34000dde:	af00      	add	r7, sp, #0
34000de0:	6078      	str	r0, [r7, #4]
    return buf->offset_end - buf->offset_start;
34000de2:	687b      	ldr	r3, [r7, #4]
34000de4:	68da      	ldr	r2, [r3, #12]
34000de6:	687b      	ldr	r3, [r7, #4]
34000de8:	689b      	ldr	r3, [r3, #8]
34000dea:	1ad3      	subs	r3, r2, r3
  }
34000dec:	4618      	mov	r0, r3
34000dee:	370c      	adds	r7, #12
34000df0:	46bd      	mov	sp, r7
34000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
34000df6:	4770      	bx	lr

34000df8 <enableTiming_Cyc>:
    { -38, -127,  106,   36,   -5,  -70,  -27,  -58,  -91,   21 },
    {-120,  104,   67, -110,  127,    7,  -46,  -17,  -51,   39 },
    {  25, -119,   -9,    4,  -96, -110,  127, -113, -118,   -3 }
};

void enableTiming_Cyc(void){
34000df8:	b480      	push	{r7}
34000dfa:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
34000dfc:	4b08      	ldr	r3, [pc, #32]	@ (34000e20 <enableTiming_Cyc+0x28>)
34000dfe:	68db      	ldr	r3, [r3, #12]
34000e00:	4a07      	ldr	r2, [pc, #28]	@ (34000e20 <enableTiming_Cyc+0x28>)
34000e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
34000e06:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable cycle counter
34000e08:	4b06      	ldr	r3, [pc, #24]	@ (34000e24 <enableTiming_Cyc+0x2c>)
34000e0a:	681b      	ldr	r3, [r3, #0]
34000e0c:	4a05      	ldr	r2, [pc, #20]	@ (34000e24 <enableTiming_Cyc+0x2c>)
34000e0e:	f043 0301 	orr.w	r3, r3, #1
34000e12:	6013      	str	r3, [r2, #0]
}
34000e14:	bf00      	nop
34000e16:	46bd      	mov	sp, r7
34000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e1c:	4770      	bx	lr
34000e1e:	bf00      	nop
34000e20:	e000edf0 	.word	0xe000edf0
34000e24:	e0001000 	.word	0xe0001000

34000e28 <startTiming_Cyc>:

void startTiming_Cyc(void){
34000e28:	b480      	push	{r7}
34000e2a:	af00      	add	r7, sp, #0
	DWT->CYCCNT = 0; // Reset counter
34000e2c:	4b03      	ldr	r3, [pc, #12]	@ (34000e3c <startTiming_Cyc+0x14>)
34000e2e:	2200      	movs	r2, #0
34000e30:	605a      	str	r2, [r3, #4]
}
34000e32:	bf00      	nop
34000e34:	46bd      	mov	sp, r7
34000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e3a:	4770      	bx	lr
34000e3c:	e0001000 	.word	0xe0001000

34000e40 <getTiming_Cyc>:

uint32_t getTiming_Cyc(){
34000e40:	b480      	push	{r7}
34000e42:	b083      	sub	sp, #12
34000e44:	af00      	add	r7, sp, #0
	uint32_t cycles = DWT->CYCCNT;
34000e46:	4b05      	ldr	r3, [pc, #20]	@ (34000e5c <getTiming_Cyc+0x1c>)
34000e48:	685b      	ldr	r3, [r3, #4]
34000e4a:	607b      	str	r3, [r7, #4]
	return cycles;
34000e4c:	687b      	ldr	r3, [r7, #4]
}
34000e4e:	4618      	mov	r0, r3
34000e50:	370c      	adds	r7, #12
34000e52:	46bd      	mov	sp, r7
34000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e58:	4770      	bx	lr
34000e5a:	bf00      	nop
34000e5c:	e0001000 	.word	0xe0001000

34000e60 <main>:
  * @param  None
  * @retval None
  */

int main(void)
{
34000e60:	b580      	push	{r7, lr}
34000e62:	b0b4      	sub	sp, #208	@ 0xd0
34000e64:	af02      	add	r7, sp, #8
    BSP_LED_Init(LED_BLUE);
34000e66:	2000      	movs	r0, #0
34000e68:	f001 fb84 	bl	34002574 <BSP_LED_Init>
    Hardware_init();
34000e6c:	f000 fa98 	bl	340013a0 <Hardware_init>
    printf("Init NN\n\r");
34000e70:	48aa      	ldr	r0, [pc, #680]	@ (3400111c <main+0x2bc>)
34000e72:	f019 fc09 	bl	3401a688 <iprintf>
    BSP_LED_On(LED_BLUE);
34000e76:	2000      	movs	r0, #0
34000e78:	f001 fbb6 	bl	340025e8 <BSP_LED_On>
    enableTiming_Cyc();
34000e7c:	f7ff ffbc 	bl	34000df8 <enableTiming_Cyc>

    /*** NN Init ****************************************************************/
    uint32_t nn_in_len = 0;
34000e80:	2300      	movs	r3, #0
34000e82:	67bb      	str	r3, [r7, #120]	@ 0x78
    int number_output = 0;
34000e84:	2300      	movs	r3, #0
34000e86:	677b      	str	r3, [r7, #116]	@ 0x74
    int8_t *nn_out[MAX_NUMBER_OUTPUT];
    int32_t nn_out_len[MAX_NUMBER_OUTPUT];

    // Declare instance + interface
    LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(Default);
    NeuralNetwork_init(&nn_in_len, nn_out, &number_output, nn_out_len);
34000e88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
34000e8c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
34000e90:	f107 0170 	add.w	r1, r7, #112	@ 0x70
34000e94:	f107 0078 	add.w	r0, r7, #120	@ 0x78
34000e98:	f000 f95e 	bl	34001158 <NeuralNetwork_init>

    printf("Input length: %lu bytes\n\r", nn_in_len);
34000e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34000e9e:	4619      	mov	r1, r3
34000ea0:	489f      	ldr	r0, [pc, #636]	@ (34001120 <main+0x2c0>)
34000ea2:	f019 fbf1 	bl	3401a688 <iprintf>
    printf("Number of output tensors: %d\n\r", number_output);
34000ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34000ea8:	4619      	mov	r1, r3
34000eaa:	489e      	ldr	r0, [pc, #632]	@ (34001124 <main+0x2c4>)
34000eac:	f019 fbec 	bl	3401a688 <iprintf>

    /*** Prepare Quantized INT8 Input *******************************************/
    // This should match the expected input size of your network
    int8_t matrix1_q[100] = {
34000eb0:	4a9d      	ldr	r2, [pc, #628]	@ (34001128 <main+0x2c8>)
34000eb2:	f107 0308 	add.w	r3, r7, #8
34000eb6:	6810      	ldr	r0, [r2, #0]
34000eb8:	6851      	ldr	r1, [r2, #4]
34000eba:	c303      	stmia	r3!, {r0, r1}
34000ebc:	8911      	ldrh	r1, [r2, #8]
34000ebe:	7a92      	ldrb	r2, [r2, #10]
34000ec0:	8019      	strh	r1, [r3, #0]
34000ec2:	709a      	strb	r2, [r3, #2]
34000ec4:	f107 0313 	add.w	r3, r7, #19
34000ec8:	2259      	movs	r2, #89	@ 0x59
34000eca:	2100      	movs	r1, #0
34000ecc:	4618      	mov	r0, r3
34000ece:	f019 fd23 	bl	3401a918 <memset>
        129, 131, 133, 135, 136, 138, 140, 142, 144, 146,
        // Fill the rest with quantized int8 values (range -128 to 127)
    };

    // Optional: Quantization details if you want to convert float -> int8
    float input_scale = 0.003917836584150791f;
34000ed2:	4b96      	ldr	r3, [pc, #600]	@ (3400112c <main+0x2cc>)
34000ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    int input_zero_point = 128;
34000ed8:	2380      	movs	r3, #128	@ 0x80
34000eda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    */


    while (1)
    {
        uint32_t ts[2] = { 0 };
34000ede:	463b      	mov	r3, r7
34000ee0:	2200      	movs	r2, #0
34000ee2:	601a      	str	r2, [r3, #0]
34000ee4:	605a      	str	r2, [r3, #4]
        uint32_t cyclesCPU = 0;
34000ee6:	2300      	movs	r3, #0
34000ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		uint32_t cyclesNPU = 0;
34000eec:	2300      	movs	r3, #0
34000eee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0


        // Copy quantized input data
        memcpy(nn_in, matrix1_q, nn_in_len);
34000ef2:	4b8f      	ldr	r3, [pc, #572]	@ (34001130 <main+0x2d0>)
34000ef4:	681b      	ldr	r3, [r3, #0]
34000ef6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
34000ef8:	f107 0108 	add.w	r1, r7, #8
34000efc:	4618      	mov	r0, r3
34000efe:	f019 ff9a 	bl	3401ae36 <memcpy>
        SCB_CleanDCache_by_Addr(nn_in, nn_in_len);
34000f02:	4b8b      	ldr	r3, [pc, #556]	@ (34001130 <main+0x2d0>)
34000f04:	681b      	ldr	r3, [r3, #0]
34000f06:	6fba      	ldr	r2, [r7, #120]	@ 0x78
34000f08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
34000f0c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34000f10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
34000f14:	2b00      	cmp	r3, #0
34000f16:	dd28      	ble.n	34000f6a <main+0x10a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
34000f1c:	f003 021f 	and.w	r2, r3, #31
34000f20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
34000f24:	4413      	add	r3, r2
34000f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34000f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
34000f2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34000f32:	f3bf 8f4f 	dsb	sy
}
34000f36:	bf00      	nop

      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000f38:	4a7e      	ldr	r2, [pc, #504]	@ (34001134 <main+0x2d4>)
34000f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
34000f3e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
34000f46:	3320      	adds	r3, #32
34000f48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        op_size -= __SCB_DCACHE_LINE_SIZE;
34000f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
34000f50:	3b20      	subs	r3, #32
34000f52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      } while ( op_size > 0 );
34000f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
34000f5a:	2b00      	cmp	r3, #0
34000f5c:	dcec      	bgt.n	34000f38 <main+0xd8>
  __ASM volatile ("dsb 0xF":::"memory");
34000f5e:	f3bf 8f4f 	dsb	sy
}
34000f62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34000f64:	f3bf 8f6f 	isb	sy
}
34000f68:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
34000f6a:	bf00      	nop

        // Run inference
        ts[0] = HAL_GetTick();
34000f6c:	f002 fd8a 	bl	34003a84 <HAL_GetTick>
34000f70:	4603      	mov	r3, r0
34000f72:	603b      	str	r3, [r7, #0]
        startTiming_Cyc();
34000f74:	f7ff ff58 	bl	34000e28 <startTiming_Cyc>
        LL_ATON_RT_Main(&NN_Instance_Default);
34000f78:	486f      	ldr	r0, [pc, #444]	@ (34001138 <main+0x2d8>)
34000f7a:	f017 fd0b 	bl	34018994 <LL_ATON_RT_Main>
        cyclesNPU = getTiming_Cyc();
34000f7e:	f7ff ff5f 	bl	34000e40 <getTiming_Cyc>
34000f82:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        ts[1] = HAL_GetTick();
34000f86:	f002 fd7d 	bl	34003a84 <HAL_GetTick>
34000f8a:	4603      	mov	r3, r0
34000f8c:	607b      	str	r3, [r7, #4]
        printf("Inference time NPU: %lu ms\n\r", ts[1] - ts[0]);
34000f8e:	687a      	ldr	r2, [r7, #4]
34000f90:	683b      	ldr	r3, [r7, #0]
34000f92:	1ad3      	subs	r3, r2, r3
34000f94:	4619      	mov	r1, r3
34000f96:	4869      	ldr	r0, [pc, #420]	@ (3400113c <main+0x2dc>)
34000f98:	f019 fb76 	bl	3401a688 <iprintf>
        printf("Inference cycles NPU: %lu cycles\n\r", cyclesNPU);
34000f9c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
34000fa0:	4867      	ldr	r0, [pc, #412]	@ (34001140 <main+0x2e0>)
34000fa2:	f019 fb71 	bl	3401a688 <iprintf>

        /*** Output: Dequantize INT8 -> Float ***********************************/
        float output_scale = 0.010583024471998215f;
34000fa6:	4b67      	ldr	r3, [pc, #412]	@ (34001144 <main+0x2e4>)
34000fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        int output_zero_point = -50;
34000fac:	f06f 0331 	mvn.w	r3, #49	@ 0x31
34000fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

        for (int i = 0; i < number_output; i++) {
34000fb4:	2300      	movs	r3, #0
34000fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
34000fba:	e085      	b.n	340010c8 <main+0x268>
            int8_t *out_buf = nn_out[i];
34000fbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
34000fc0:	009b      	lsls	r3, r3, #2
34000fc2:	33c8      	adds	r3, #200	@ 0xc8
34000fc4:	443b      	add	r3, r7
34000fc6:	f853 3c58 	ldr.w	r3, [r3, #-88]
34000fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            int num_bytes = nn_out_len[i];
34000fce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
34000fd2:	009b      	lsls	r3, r3, #2
34000fd4:	33c8      	adds	r3, #200	@ 0xc8
34000fd6:	443b      	add	r3, r7
34000fd8:	f853 3c5c 	ldr.w	r3, [r3, #-92]
34000fdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
34000fe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
34000fe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
34000fe8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
34000fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if ( dsize > 0 ) {
34000ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34000ff4:	2b00      	cmp	r3, #0
34000ff6:	dd24      	ble.n	34001042 <main+0x1e2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
34000ffc:	f003 021f 	and.w	r2, r3, #31
34001000:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34001004:	4413      	add	r3, r2
34001006:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
3400100a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
3400100e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
34001010:	f3bf 8f4f 	dsb	sy
}
34001014:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34001016:	4a47      	ldr	r2, [pc, #284]	@ (34001134 <main+0x2d4>)
34001018:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3400101a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
3400101e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34001020:	3320      	adds	r3, #32
34001022:	67fb      	str	r3, [r7, #124]	@ 0x7c
        op_size -= __SCB_DCACHE_LINE_SIZE;
34001024:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34001028:	3b20      	subs	r3, #32
3400102a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      } while ( op_size > 0 );
3400102e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34001032:	2b00      	cmp	r3, #0
34001034:	dcef      	bgt.n	34001016 <main+0x1b6>
  __ASM volatile ("dsb 0xF":::"memory");
34001036:	f3bf 8f4f 	dsb	sy
}
3400103a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3400103c:	f3bf 8f6f 	isb	sy
}
34001040:	bf00      	nop
}
34001042:	bf00      	nop
            SCB_InvalidateDCache_by_Addr((void*)out_buf, num_bytes);

            printf("Output %d:\n\r", i);
34001044:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
34001048:	483f      	ldr	r0, [pc, #252]	@ (34001148 <main+0x2e8>)
3400104a:	f019 fb1d 	bl	3401a688 <iprintf>
            for (int j = 0; j < num_bytes; j++) {
3400104e:	2300      	movs	r3, #0
34001050:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
34001054:	e02a      	b.n	340010ac <main+0x24c>
                float val = (out_buf[j] - output_zero_point) * output_scale;
34001056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3400105a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
3400105e:	4413      	add	r3, r2
34001060:	f993 3000 	ldrsb.w	r3, [r3]
34001064:	461a      	mov	r2, r3
34001066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
3400106a:	1ad3      	subs	r3, r2, r3
3400106c:	ee07 3a90 	vmov	s15, r3
34001070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34001074:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
34001078:	ee67 7a27 	vmul.f32	s15, s14, s15
3400107c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
                printf("  %10.6f, Int: %4d\n\r", val, out_buf[j]);
34001080:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
34001084:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
34001088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
3400108c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
34001090:	4413      	add	r3, r2
34001092:	f993 3000 	ldrsb.w	r3, [r3]
34001096:	9300      	str	r3, [sp, #0]
34001098:	ec53 2b17 	vmov	r2, r3, d7
3400109c:	482b      	ldr	r0, [pc, #172]	@ (3400114c <main+0x2ec>)
3400109e:	f019 faf3 	bl	3401a688 <iprintf>
            for (int j = 0; j < num_bytes; j++) {
340010a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
340010a6:	3301      	adds	r3, #1
340010a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
340010ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
340010b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
340010b4:	429a      	cmp	r2, r3
340010b6:	dbce      	blt.n	34001056 <main+0x1f6>

            }
            printf("\n\r");
340010b8:	4825      	ldr	r0, [pc, #148]	@ (34001150 <main+0x2f0>)
340010ba:	f019 fae5 	bl	3401a688 <iprintf>
        for (int i = 0; i < number_output; i++) {
340010be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
340010c2:	3301      	adds	r3, #1
340010c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
340010c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
340010ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
340010ce:	429a      	cmp	r2, r3
340010d0:	f6ff af74 	blt.w	34000fbc <main+0x15c>
        }

        ts[0] = HAL_GetTick();
340010d4:	f002 fcd6 	bl	34003a84 <HAL_GetTick>
340010d8:	4603      	mov	r3, r0
340010da:	603b      	str	r3, [r7, #0]
        startTiming_Cyc();
340010dc:	f7ff fea4 	bl	34000e28 <startTiming_Cyc>
        nn_simulation_int();
340010e0:	f000 f89a 	bl	34001218 <nn_simulation_int>
        cyclesCPU = getTiming_Cyc();
340010e4:	f7ff feac 	bl	34000e40 <getTiming_Cyc>
340010e8:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
		ts[1] = HAL_GetTick();
340010ec:	f002 fcca 	bl	34003a84 <HAL_GetTick>
340010f0:	4603      	mov	r3, r0
340010f2:	607b      	str	r3, [r7, #4]
		printf("Inference time NPU: %lu ms\n\r", ts[1] - ts[0]);
340010f4:	687a      	ldr	r2, [r7, #4]
340010f6:	683b      	ldr	r3, [r7, #0]
340010f8:	1ad3      	subs	r3, r2, r3
340010fa:	4619      	mov	r1, r3
340010fc:	480f      	ldr	r0, [pc, #60]	@ (3400113c <main+0x2dc>)
340010fe:	f019 fac3 	bl	3401a688 <iprintf>
		printf("Inference cycles CPU: %lu cycles\n\r", cyclesCPU);
34001102:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
34001106:	4813      	ldr	r0, [pc, #76]	@ (34001154 <main+0x2f4>)
34001108:	f019 fabe 	bl	3401a688 <iprintf>

        BSP_LED_Toggle(LED_BLUE);
3400110c:	2000      	movs	r0, #0
3400110e:	f001 fa9f 	bl	34002650 <BSP_LED_Toggle>
        HAL_Delay(1000);
34001112:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
34001116:	f002 fcc1 	bl	34003a9c <HAL_Delay>
    {
3400111a:	e6e0      	b.n	34000ede <main+0x7e>
3400111c:	3401c800 	.word	0x3401c800
34001120:	3401c80c 	.word	0x3401c80c
34001124:	3401c828 	.word	0x3401c828
34001128:	3401c8dc 	.word	0x3401c8dc
3400112c:	3b806132 	.word	0x3b806132
34001130:	3401f42c 	.word	0x3401f42c
34001134:	e000ed00 	.word	0xe000ed00
34001138:	3401f1f0 	.word	0x3401f1f0
3400113c:	3401c848 	.word	0x3401c848
34001140:	3401c868 	.word	0x3401c868
34001144:	3c2d646c 	.word	0x3c2d646c
34001148:	3401c88c 	.word	0x3401c88c
3400114c:	3401c89c 	.word	0x3401c89c
34001150:	3401c8b4 	.word	0x3401c8b4
34001154:	3401c8b8 	.word	0x3401c8b8

34001158 <NeuralNetwork_init>:
    }
}

static void NeuralNetwork_init(uint32_t *nnin_length, int8_t *nn_out[], int *number_output, int32_t nn_out_len[])
{
34001158:	b590      	push	{r4, r7, lr}
3400115a:	b089      	sub	sp, #36	@ 0x24
3400115c:	af00      	add	r7, sp, #0
3400115e:	60f8      	str	r0, [r7, #12]
34001160:	60b9      	str	r1, [r7, #8]
34001162:	607a      	str	r2, [r7, #4]
34001164:	603b      	str	r3, [r7, #0]
    const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_Default();
34001166:	f000 fc0f 	bl	34001988 <LL_ATON_Input_Buffers_Info_Default>
3400116a:	61b8      	str	r0, [r7, #24]
    const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_Default();
3400116c:	f000 fc16 	bl	3400199c <LL_ATON_Output_Buffers_Info_Default>
34001170:	6178      	str	r0, [r7, #20]

    nn_in = (int8_t *) LL_Buffer_addr_start(&nn_in_info[0]);
34001172:	69b8      	ldr	r0, [r7, #24]
34001174:	f7ff fe22 	bl	34000dbc <LL_Buffer_addr_start>
34001178:	4603      	mov	r3, r0
3400117a:	4a26      	ldr	r2, [pc, #152]	@ (34001214 <NeuralNetwork_init+0xbc>)
3400117c:	6013      	str	r3, [r2, #0]

    while (nn_out_info[*number_output].name != NULL)
3400117e:	e004      	b.n	3400118a <NeuralNetwork_init+0x32>
    {
        (*number_output)++;
34001180:	687b      	ldr	r3, [r7, #4]
34001182:	681b      	ldr	r3, [r3, #0]
34001184:	1c5a      	adds	r2, r3, #1
34001186:	687b      	ldr	r3, [r7, #4]
34001188:	601a      	str	r2, [r3, #0]
    while (nn_out_info[*number_output].name != NULL)
3400118a:	687b      	ldr	r3, [r7, #4]
3400118c:	681b      	ldr	r3, [r3, #0]
3400118e:	461a      	mov	r2, r3
34001190:	4613      	mov	r3, r2
34001192:	00db      	lsls	r3, r3, #3
34001194:	1a9b      	subs	r3, r3, r2
34001196:	00db      	lsls	r3, r3, #3
34001198:	461a      	mov	r2, r3
3400119a:	697b      	ldr	r3, [r7, #20]
3400119c:	4413      	add	r3, r2
3400119e:	681b      	ldr	r3, [r3, #0]
340011a0:	2b00      	cmp	r3, #0
340011a2:	d1ed      	bne.n	34001180 <NeuralNetwork_init+0x28>
    }

    for (int i = 0; i < *number_output; i++)
340011a4:	2300      	movs	r3, #0
340011a6:	61fb      	str	r3, [r7, #28]
340011a8:	e025      	b.n	340011f6 <NeuralNetwork_init+0x9e>
    {
        nn_out[i] = (int8_t *) LL_Buffer_addr_start(&nn_out_info[i]);
340011aa:	69fa      	ldr	r2, [r7, #28]
340011ac:	4613      	mov	r3, r2
340011ae:	00db      	lsls	r3, r3, #3
340011b0:	1a9b      	subs	r3, r3, r2
340011b2:	00db      	lsls	r3, r3, #3
340011b4:	461a      	mov	r2, r3
340011b6:	697b      	ldr	r3, [r7, #20]
340011b8:	1899      	adds	r1, r3, r2
340011ba:	69fb      	ldr	r3, [r7, #28]
340011bc:	009b      	lsls	r3, r3, #2
340011be:	68ba      	ldr	r2, [r7, #8]
340011c0:	18d4      	adds	r4, r2, r3
340011c2:	4608      	mov	r0, r1
340011c4:	f7ff fdfa 	bl	34000dbc <LL_Buffer_addr_start>
340011c8:	4603      	mov	r3, r0
340011ca:	6023      	str	r3, [r4, #0]
        nn_out_len[i] = LL_Buffer_len(&nn_out_info[i]);
340011cc:	69fa      	ldr	r2, [r7, #28]
340011ce:	4613      	mov	r3, r2
340011d0:	00db      	lsls	r3, r3, #3
340011d2:	1a9b      	subs	r3, r3, r2
340011d4:	00db      	lsls	r3, r3, #3
340011d6:	461a      	mov	r2, r3
340011d8:	697b      	ldr	r3, [r7, #20]
340011da:	4413      	add	r3, r2
340011dc:	4618      	mov	r0, r3
340011de:	f7ff fdfc 	bl	34000dda <LL_Buffer_len>
340011e2:	4601      	mov	r1, r0
340011e4:	69fb      	ldr	r3, [r7, #28]
340011e6:	009b      	lsls	r3, r3, #2
340011e8:	683a      	ldr	r2, [r7, #0]
340011ea:	4413      	add	r3, r2
340011ec:	460a      	mov	r2, r1
340011ee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < *number_output; i++)
340011f0:	69fb      	ldr	r3, [r7, #28]
340011f2:	3301      	adds	r3, #1
340011f4:	61fb      	str	r3, [r7, #28]
340011f6:	687b      	ldr	r3, [r7, #4]
340011f8:	681b      	ldr	r3, [r3, #0]
340011fa:	69fa      	ldr	r2, [r7, #28]
340011fc:	429a      	cmp	r2, r3
340011fe:	dbd4      	blt.n	340011aa <NeuralNetwork_init+0x52>
    }

    *nnin_length = LL_Buffer_len(&nn_in_info[0]);
34001200:	69b8      	ldr	r0, [r7, #24]
34001202:	f7ff fdea 	bl	34000dda <LL_Buffer_len>
34001206:	4602      	mov	r2, r0
34001208:	68fb      	ldr	r3, [r7, #12]
3400120a:	601a      	str	r2, [r3, #0]
}
3400120c:	bf00      	nop
3400120e:	3724      	adds	r7, #36	@ 0x24
34001210:	46bd      	mov	sp, r7
34001212:	bd90      	pop	{r4, r7, pc}
34001214:	3401f42c 	.word	0x3401f42c

34001218 <nn_simulation_int>:
//        printf("%10.6f\n\r", output[i]);
//    }
//}

// Calculate network on CPU (int8 simulation)
void nn_simulation_int() {
34001218:	b580      	push	{r7, lr}
3400121a:	b092      	sub	sp, #72	@ 0x48
3400121c:	af00      	add	r7, sp, #0
    int8_t input[SIZE] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
3400121e:	4a2d      	ldr	r2, [pc, #180]	@ (340012d4 <nn_simulation_int+0xbc>)
34001220:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
34001224:	ca07      	ldmia	r2, {r0, r1, r2}
34001226:	c303      	stmia	r3!, {r0, r1}
34001228:	801a      	strh	r2, [r3, #0]
    int32_t acc[SIZE] = {0};
3400122a:	1d3b      	adds	r3, r7, #4
3400122c:	2228      	movs	r2, #40	@ 0x28
3400122e:	2100      	movs	r1, #0
34001230:	4618      	mov	r0, r3
34001232:	f019 fb71 	bl	3401a918 <memset>

    // Matrix-vector multiplication
    for (int i = 0; i < SIZE; i++) {
34001236:	2300      	movs	r3, #0
34001238:	647b      	str	r3, [r7, #68]	@ 0x44
3400123a:	e02c      	b.n	34001296 <nn_simulation_int+0x7e>
        for (int j = 0; j < SIZE; j++) {
3400123c:	2300      	movs	r3, #0
3400123e:	643b      	str	r3, [r7, #64]	@ 0x40
34001240:	e023      	b.n	3400128a <nn_simulation_int+0x72>
            acc[i] += dense_weights[i][j] * input[j];
34001242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34001244:	009b      	lsls	r3, r3, #2
34001246:	3348      	adds	r3, #72	@ 0x48
34001248:	443b      	add	r3, r7
3400124a:	f853 1c44 	ldr.w	r1, [r3, #-68]
3400124e:	4822      	ldr	r0, [pc, #136]	@ (340012d8 <nn_simulation_int+0xc0>)
34001250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34001252:	4613      	mov	r3, r2
34001254:	009b      	lsls	r3, r3, #2
34001256:	4413      	add	r3, r2
34001258:	005b      	lsls	r3, r3, #1
3400125a:	18c2      	adds	r2, r0, r3
3400125c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400125e:	4413      	add	r3, r2
34001260:	f993 3000 	ldrsb.w	r3, [r3]
34001264:	4618      	mov	r0, r3
34001266:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
3400126a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400126c:	4413      	add	r3, r2
3400126e:	f993 3000 	ldrsb.w	r3, [r3]
34001272:	fb00 f303 	mul.w	r3, r0, r3
34001276:	18ca      	adds	r2, r1, r3
34001278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3400127a:	009b      	lsls	r3, r3, #2
3400127c:	3348      	adds	r3, #72	@ 0x48
3400127e:	443b      	add	r3, r7
34001280:	f843 2c44 	str.w	r2, [r3, #-68]
        for (int j = 0; j < SIZE; j++) {
34001284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34001286:	3301      	adds	r3, #1
34001288:	643b      	str	r3, [r7, #64]	@ 0x40
3400128a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400128c:	2b09      	cmp	r3, #9
3400128e:	ddd8      	ble.n	34001242 <nn_simulation_int+0x2a>
    for (int i = 0; i < SIZE; i++) {
34001290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34001292:	3301      	adds	r3, #1
34001294:	647b      	str	r3, [r7, #68]	@ 0x44
34001296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34001298:	2b09      	cmp	r3, #9
3400129a:	ddcf      	ble.n	3400123c <nn_simulation_int+0x24>
//    float weight_scale = 0.027f;         // Replace with real scale
//    float output_scale = 0.010583024f;   // From your model
//    float effective_scale = (input_scale * weight_scale) / output_scale;

    // Dequantize output
    printf("Output (quantized int8 model simulated):\n\r");
3400129c:	480f      	ldr	r0, [pc, #60]	@ (340012dc <nn_simulation_int+0xc4>)
3400129e:	f019 f9f3 	bl	3401a688 <iprintf>
    for (int i = 0; i < SIZE; i++) {
340012a2:	2300      	movs	r3, #0
340012a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
340012a6:	e00d      	b.n	340012c4 <nn_simulation_int+0xac>
//        float val = acc[i] * effective_scale;
    	int32_t val = acc[i];
340012a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
340012aa:	009b      	lsls	r3, r3, #2
340012ac:	3348      	adds	r3, #72	@ 0x48
340012ae:	443b      	add	r3, r7
340012b0:	f853 3c44 	ldr.w	r3, [r3, #-68]
340012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
        printf("%10.6f\n\r", val);
340012b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
340012b8:	4809      	ldr	r0, [pc, #36]	@ (340012e0 <nn_simulation_int+0xc8>)
340012ba:	f019 f9e5 	bl	3401a688 <iprintf>
    for (int i = 0; i < SIZE; i++) {
340012be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
340012c0:	3301      	adds	r3, #1
340012c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
340012c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
340012c6:	2b09      	cmp	r3, #9
340012c8:	ddee      	ble.n	340012a8 <nn_simulation_int+0x90>
    }
}
340012ca:	bf00      	nop
340012cc:	bf00      	nop
340012ce:	3748      	adds	r7, #72	@ 0x48
340012d0:	46bd      	mov	sp, r7
340012d2:	bd80      	pop	{r7, pc}
340012d4:	3401c920 	.word	0x3401c920
340012d8:	3401f18c 	.word	0x3401f18c
340012dc:	3401c8e8 	.word	0x3401c8e8
340012e0:	3401c914 	.word	0x3401c914

340012e4 <_write>:
	end = (end + 31U) & ~(uintptr_t)(0x1F);  // align up to next 32B boundary
	SCB_CleanDCache_by_Addr((void*)addr, end - addr);
}

int _write(int file, char *ptr, int len)
{
340012e4:	b580      	push	{r7, lr}
340012e6:	b084      	sub	sp, #16
340012e8:	af00      	add	r7, sp, #0
340012ea:	60f8      	str	r0, [r7, #12]
340012ec:	60b9      	str	r1, [r7, #8]
340012ee:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
340012f0:	687b      	ldr	r3, [r7, #4]
340012f2:	b29a      	uxth	r2, r3
340012f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340012f8:	68b9      	ldr	r1, [r7, #8]
340012fa:	4804      	ldr	r0, [pc, #16]	@ (3400130c <_write+0x28>)
340012fc:	f014 fb16 	bl	3401592c <HAL_UART_Transmit>
    return len;
34001300:	687b      	ldr	r3, [r7, #4]
}
34001302:	4618      	mov	r0, r3
34001304:	3710      	adds	r7, #16
34001306:	46bd      	mov	sp, r7
34001308:	bd80      	pop	{r7, pc}
3400130a:	bf00      	nop
3400130c:	3401f43c 	.word	0x3401f43c

34001310 <NPURam_enable>:

static void NPURam_enable(void)
{
34001310:	b580      	push	{r7, lr}
34001312:	b084      	sub	sp, #16
34001314:	af00      	add	r7, sp, #0
  __HAL_RCC_NPU_CLK_ENABLE();
34001316:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3400131a:	f7ff fc95 	bl	34000c48 <LL_AHB5_GRP1_EnableClock>
  __HAL_RCC_NPU_FORCE_RESET();
3400131e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
34001322:	f7ff fca7 	bl	34000c74 <LL_AHB5_GRP1_ForceReset>
  __HAL_RCC_NPU_RELEASE_RESET();
34001326:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3400132a:	f7ff fcb3 	bl	34000c94 <LL_AHB5_GRP1_ReleaseReset>

  /* Enable NPU RAMs (4x448KB) */
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
3400132e:	2001      	movs	r0, #1
34001330:	f7ff fc0e 	bl	34000b50 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
34001334:	2002      	movs	r0, #2
34001336:	f7ff fc0b 	bl	34000b50 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
3400133a:	2004      	movs	r0, #4
3400133c:	f7ff fc08 	bl	34000b50 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
34001340:	2008      	movs	r0, #8
34001342:	f7ff fc05 	bl	34000b50 <LL_MEM_EnableClock>
  __HAL_RCC_RAMCFG_CLK_ENABLE();
34001346:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3400134a:	f7ff fc2d 	bl	34000ba8 <LL_AHB2_GRP1_EnableClock>
  RAMCFG_HandleTypeDef hramcfg = {0};
3400134e:	1d3b      	adds	r3, r7, #4
34001350:	2200      	movs	r2, #0
34001352:	601a      	str	r2, [r3, #0]
34001354:	605a      	str	r2, [r3, #4]
34001356:	609a      	str	r2, [r3, #8]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34001358:	4b0d      	ldr	r3, [pc, #52]	@ (34001390 <NPURam_enable+0x80>)
3400135a:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3400135c:	1d3b      	adds	r3, r7, #4
3400135e:	4618      	mov	r0, r3
34001360:	f004 fe4a 	bl	34005ff8 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34001364:	4b0b      	ldr	r3, [pc, #44]	@ (34001394 <NPURam_enable+0x84>)
34001366:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001368:	1d3b      	adds	r3, r7, #4
3400136a:	4618      	mov	r0, r3
3400136c:	f004 fe44 	bl	34005ff8 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
34001370:	4b09      	ldr	r3, [pc, #36]	@ (34001398 <NPURam_enable+0x88>)
34001372:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001374:	1d3b      	adds	r3, r7, #4
34001376:	4618      	mov	r0, r3
34001378:	f004 fe3e 	bl	34005ff8 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
3400137c:	4b07      	ldr	r3, [pc, #28]	@ (3400139c <NPURam_enable+0x8c>)
3400137e:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001380:	1d3b      	adds	r3, r7, #4
34001382:	4618      	mov	r0, r3
34001384:	f004 fe38 	bl	34005ff8 <HAL_RAMCFG_EnableAXISRAM>
}
34001388:	bf00      	nop
3400138a:	3710      	adds	r7, #16
3400138c:	46bd      	mov	sp, r7
3400138e:	bd80      	pop	{r7, pc}
34001390:	52023100 	.word	0x52023100
34001394:	52023180 	.word	0x52023180
34001398:	52023200 	.word	0x52023200
3400139c:	52023280 	.word	0x52023280

340013a0 <Hardware_init>:

static void Hardware_init(void)
{
340013a0:	b580      	push	{r7, lr}
340013a2:	b086      	sub	sp, #24
340013a4:	af00      	add	r7, sp, #0
  /* Power on ICACHE */
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
340013a6:	4b31      	ldr	r3, [pc, #196]	@ (3400146c <Hardware_init+0xcc>)
340013a8:	681b      	ldr	r3, [r3, #0]
340013aa:	4a30      	ldr	r2, [pc, #192]	@ (3400146c <Hardware_init+0xcc>)
340013ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
340013b0:	6013      	str	r3, [r2, #0]

  /* Set back system and CPU clock source to HSI */
  __HAL_RCC_CPUCLK_CONFIG(RCC_CPUCLKSOURCE_HSI);
340013b2:	2000      	movs	r0, #0
340013b4:	f7ff fcc4 	bl	34000d40 <LL_RCC_SetCpuClkSource>
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);
340013b8:	2000      	movs	r0, #0
340013ba:	f7ff fcd5 	bl	34000d68 <LL_RCC_SetSysClkSource>
  __HAL_RCC_USART1_CLK_ENABLE();
340013be:	2010      	movs	r0, #16
340013c0:	f7ff fc92 	bl	34000ce8 <LL_APB2_GRP1_EnableClock>

  HAL_Init();
340013c4:	f002 faf8 	bl	340039b8 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
340013c8:	4b29      	ldr	r3, [pc, #164]	@ (34001470 <Hardware_init+0xd0>)
340013ca:	695b      	ldr	r3, [r3, #20]
340013cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
340013d0:	2b00      	cmp	r3, #0
340013d2:	d11b      	bne.n	3400140c <Hardware_init+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
340013d4:	f3bf 8f4f 	dsb	sy
}
340013d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
340013da:	f3bf 8f6f 	isb	sy
}
340013de:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
340013e0:	4b23      	ldr	r3, [pc, #140]	@ (34001470 <Hardware_init+0xd0>)
340013e2:	2200      	movs	r2, #0
340013e4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
340013e8:	f3bf 8f4f 	dsb	sy
}
340013ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
340013ee:	f3bf 8f6f 	isb	sy
}
340013f2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
340013f4:	4b1e      	ldr	r3, [pc, #120]	@ (34001470 <Hardware_init+0xd0>)
340013f6:	695b      	ldr	r3, [r3, #20]
340013f8:	4a1d      	ldr	r2, [pc, #116]	@ (34001470 <Hardware_init+0xd0>)
340013fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
340013fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34001400:	f3bf 8f4f 	dsb	sy
}
34001404:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34001406:	f3bf 8f6f 	isb	sy
}
3400140a:	e000      	b.n	3400140e <Hardware_init+0x6e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
3400140c:	bf00      	nop
#if defined(USE_DCACHE)
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
  SCB_EnableDCache();
#endif

  SystemClock_Config();
3400140e:	f000 f8e7 	bl	340015e0 <SystemClock_Config>

  NPURam_enable();
34001412:	f7ff ff7d 	bl	34001310 <NPURam_enable>
  Fuse_Programming();
34001416:	f7ff fb4f 	bl	34000ab8 <Fuse_Programming>
  NPUCache_config();
3400141a:	f000 f85e 	bl	340014da <NPUCache_config>

  BSP_XSPI_NOR_Init_t NOR_Init;
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3400141e:	2301      	movs	r3, #1
34001420:	753b      	strb	r3, [r7, #20]
  NOR_Init.TransferRate = BSP_XSPI_NOR_DTR_TRANSFER;
34001422:	2301      	movs	r3, #1
34001424:	757b      	strb	r3, [r7, #21]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34001426:	f107 0314 	add.w	r3, r7, #20
3400142a:	4619      	mov	r1, r3
3400142c:	2000      	movs	r0, #0
3400142e:	f001 fa67 	bl	34002900 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
34001432:	2000      	movs	r0, #0
34001434:	f001 fb4a 	bl	34002acc <BSP_XSPI_NOR_EnableMemoryMappedMode>

  Security_Config();
34001438:	f000 f858 	bl	340014ec <Security_Config>
  IAC_Config();
3400143c:	f000 f8bc 	bl	340015b8 <IAC_Config>
  set_clk_sleep_mode();
34001440:	f000 f818 	bl	34001474 <set_clk_sleep_mode>

  /*** Now initialize UART ***/
  COM_InitTypeDef com_config = {
34001444:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
34001448:	607b      	str	r3, [r7, #4]
3400144a:	2300      	movs	r3, #0
3400144c:	60bb      	str	r3, [r7, #8]
3400144e:	2300      	movs	r3, #0
34001450:	81bb      	strh	r3, [r7, #12]
34001452:	2300      	movs	r3, #0
34001454:	81fb      	strh	r3, [r7, #14]
34001456:	2300      	movs	r3, #0
34001458:	823b      	strh	r3, [r7, #16]
    .WordLength = UART_WORDLENGTH_8B,
    .StopBits = UART_STOPBITS_1,
    .Parity = UART_PARITY_NONE,
    .HwFlowCtl = UART_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &com_config);
3400145a:	1d3b      	adds	r3, r7, #4
3400145c:	4619      	mov	r1, r3
3400145e:	2000      	movs	r0, #0
34001460:	f001 f910 	bl	34002684 <BSP_COM_Init>
}
34001464:	bf00      	nop
34001466:	3718      	adds	r7, #24
34001468:	46bd      	mov	sp, r7
3400146a:	bd80      	pop	{r7, pc}
3400146c:	e001e000 	.word	0xe001e000
34001470:	e000ed00 	.word	0xe000ed00

34001474 <set_clk_sleep_mode>:

static void set_clk_sleep_mode(void)
{
34001474:	b580      	push	{r7, lr}
34001476:	af00      	add	r7, sp, #0
  /*** Enable sleep mode support during NPU inference *************************/
  /* Configure peripheral clocks to remain active during sleep mode */
  /* Keep all IP's enabled during WFE so they can wake up CPU. Fine tune
   * this if you want to save maximum power
   */
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
34001478:	2020      	movs	r0, #32
3400147a:	f7ff fc1f 	bl	34000cbc <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
3400147e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34001482:	f7ff fc1b 	bl	34000cbc <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
34001486:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3400148a:	f7ff fc17 	bl	34000cbc <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
3400148e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001492:	f7ff fc13 	bl	34000cbc <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
34001496:	2002      	movs	r0, #2
34001498:	f7ff fc10 	bl	34000cbc <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DCMIPP_CLK_SLEEP_ENABLE();   /* For camera configuration retention */
3400149c:	2004      	movs	r0, #4
3400149e:	f7ff fc39 	bl	34000d14 <LL_APB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CSI_CLK_SLEEP_ENABLE();      /* For camera configuration retention */
340014a2:	2040      	movs	r0, #64	@ 0x40
340014a4:	f7ff fc36 	bl	34000d14 <LL_APB5_GRP1_EnableClockLowPower>

  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
340014a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
340014ac:	f7ff fb66 	bl	34000b7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
340014b0:	2080      	movs	r0, #128	@ 0x80
340014b2:	f7ff fb63 	bl	34000b7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
340014b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
340014ba:	f7ff fb5f 	bl	34000b7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
340014be:	2001      	movs	r0, #1
340014c0:	f7ff fb5c 	bl	34000b7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
340014c4:	2002      	movs	r0, #2
340014c6:	f7ff fb59 	bl	34000b7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
340014ca:	2004      	movs	r0, #4
340014cc:	f7ff fb56 	bl	34000b7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
340014d0:	2008      	movs	r0, #8
340014d2:	f7ff fb53 	bl	34000b7c <LL_MEM_EnableClockLowPower>
}
340014d6:	bf00      	nop
340014d8:	bd80      	pop	{r7, pc}

340014da <NPUCache_config>:

static void NPUCache_config(void)
{
340014da:	b580      	push	{r7, lr}
340014dc:	af00      	add	r7, sp, #0
  npu_cache_init();
340014de:	f000 fa71 	bl	340019c4 <npu_cache_init>
  npu_cache_enable();
340014e2:	f000 fa7d 	bl	340019e0 <npu_cache_enable>
}
340014e6:	bf00      	nop
340014e8:	bd80      	pop	{r7, pc}
	...

340014ec <Security_Config>:

static void Security_Config(void)
{
340014ec:	b580      	push	{r7, lr}
340014ee:	b082      	sub	sp, #8
340014f0:	af00      	add	r7, sp, #0
  __HAL_RCC_RIFSC_CLK_ENABLE();
340014f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
340014f6:	f7ff fb6d 	bl	34000bd4 <LL_AHB3_GRP1_EnableClock>
  RIMC_MasterConfig_t RIMC_master = {0};
340014fa:	463b      	mov	r3, r7
340014fc:	2200      	movs	r2, #0
340014fe:	601a      	str	r2, [r3, #0]
34001500:	605a      	str	r2, [r3, #4]
  RIMC_master.MasterCID = RIF_CID_1;
34001502:	2302      	movs	r3, #2
34001504:	603b      	str	r3, [r7, #0]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34001506:	2303      	movs	r3, #3
34001508:	607b      	str	r3, [r7, #4]
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3400150a:	463b      	mov	r3, r7
3400150c:	4619      	mov	r1, r3
3400150e:	2001      	movs	r0, #1
34001510:	f012 ff76 	bl	34014400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
34001514:	463b      	mov	r3, r7
34001516:	4619      	mov	r1, r3
34001518:	2008      	movs	r0, #8
3400151a:	f012 ff71 	bl	34014400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
3400151e:	463b      	mov	r3, r7
34001520:	4619      	mov	r1, r3
34001522:	2009      	movs	r0, #9
34001524:	f012 ff6c 	bl	34014400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
34001528:	463b      	mov	r3, r7
3400152a:	4619      	mov	r1, r3
3400152c:	200a      	movs	r0, #10
3400152e:	f012 ff67 	bl	34014400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
34001532:	463b      	mov	r3, r7
34001534:	4619      	mov	r1, r3
34001536:	200b      	movs	r0, #11
34001538:	f012 ff62 	bl	34014400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
3400153c:	463b      	mov	r3, r7
3400153e:	4619      	mov	r1, r3
34001540:	2004      	movs	r0, #4
34001542:	f012 ff5d 	bl	34014400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001546:	2103      	movs	r1, #3
34001548:	4813      	ldr	r0, [pc, #76]	@ (34001598 <Security_Config+0xac>)
3400154a:	f013 f803 	bl	34014554 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400154e:	2103      	movs	r1, #3
34001550:	4812      	ldr	r0, [pc, #72]	@ (3400159c <Security_Config+0xb0>)
34001552:	f012 ffff 	bl	34014554 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001556:	2103      	movs	r1, #3
34001558:	4811      	ldr	r0, [pc, #68]	@ (340015a0 <Security_Config+0xb4>)
3400155a:	f012 fffb 	bl	34014554 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400155e:	2103      	movs	r1, #3
34001560:	4810      	ldr	r0, [pc, #64]	@ (340015a4 <Security_Config+0xb8>)
34001562:	f012 fff7 	bl	34014554 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001566:	2103      	movs	r1, #3
34001568:	480f      	ldr	r0, [pc, #60]	@ (340015a8 <Security_Config+0xbc>)
3400156a:	f012 fff3 	bl	34014554 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400156e:	2103      	movs	r1, #3
34001570:	480e      	ldr	r0, [pc, #56]	@ (340015ac <Security_Config+0xc0>)
34001572:	f012 ffef 	bl	34014554 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001576:	2103      	movs	r1, #3
34001578:	480d      	ldr	r0, [pc, #52]	@ (340015b0 <Security_Config+0xc4>)
3400157a:	f012 ffeb 	bl	34014554 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400157e:	2103      	movs	r1, #3
34001580:	480c      	ldr	r0, [pc, #48]	@ (340015b4 <Security_Config+0xc8>)
34001582:	f012 ffe7 	bl	34014554 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001586:	2103      	movs	r1, #3
34001588:	2004      	movs	r0, #4
3400158a:	f012 ffe3 	bl	34014554 <HAL_RIF_RISC_SetSlaveSecureAttributes>
}
3400158e:	bf00      	nop
34001590:	3708      	adds	r7, #8
34001592:	46bd      	mov	sp, r7
34001594:	bd80      	pop	{r7, pc}
34001596:	bf00      	nop
34001598:	3000000a 	.word	0x3000000a
3400159c:	30000005 	.word	0x30000005
340015a0:	2000001c 	.word	0x2000001c
340015a4:	2000001d 	.word	0x2000001d
340015a8:	30000006 	.word	0x30000006
340015ac:	30000007 	.word	0x30000007
340015b0:	30000008 	.word	0x30000008
340015b4:	10000018 	.word	0x10000018

340015b8 <IAC_Config>:

static void IAC_Config(void)
{
340015b8:	b580      	push	{r7, lr}
340015ba:	af00      	add	r7, sp, #0
/* Configure IAC to trap illegal access events */
  __HAL_RCC_IAC_CLK_ENABLE();
340015bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
340015c0:	f7ff fb08 	bl	34000bd4 <LL_AHB3_GRP1_EnableClock>
  __HAL_RCC_IAC_FORCE_RESET();
340015c4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
340015c8:	f7ff fb1a 	bl	34000c00 <LL_AHB3_GRP1_ForceReset>
  __HAL_RCC_IAC_RELEASE_RESET();
340015cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
340015d0:	f7ff fb26 	bl	34000c20 <LL_AHB3_GRP1_ReleaseReset>
}
340015d4:	bf00      	nop
340015d6:	bd80      	pop	{r7, pc}

340015d8 <IAC_IRQHandler>:

void IAC_IRQHandler(void)
{
340015d8:	b480      	push	{r7}
340015da:	af00      	add	r7, sp, #0
  while (1)
340015dc:	bf00      	nop
340015de:	e7fd      	b.n	340015dc <IAC_IRQHandler+0x4>

340015e0 <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
340015e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
340015e4:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
340015e8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
340015ea:	f507 730a 	add.w	r3, r7, #552	@ 0x228
340015ee:	2240      	movs	r2, #64	@ 0x40
340015f0:	2100      	movs	r1, #0
340015f2:	4618      	mov	r0, r3
340015f4:	f019 f990 	bl	3401a918 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
340015f8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
340015fc:	2298      	movs	r2, #152	@ 0x98
340015fe:	2100      	movs	r1, #0
34001600:	4618      	mov	r0, r3
34001602:	f019 f989 	bl	3401a918 <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34001606:	f507 731a 	add.w	r3, r7, #616	@ 0x268
3400160a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
3400160e:	4618      	mov	r0, r3
34001610:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34001614:	461a      	mov	r2, r3
34001616:	2100      	movs	r1, #0
34001618:	f019 f97e 	bl	3401a918 <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
3400161c:	2001      	movs	r0, #1
3400161e:	f000 ff7d 	bl	3400251c <BSP_SMPS_Init>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34001622:	2300      	movs	r3, #0
34001624:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

  /* PLL1 = 64 x 25 / 2 = 800MHz */
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34001628:	2302      	movs	r3, #2
3400162a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
3400162e:	2300      	movs	r3, #0
34001630:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
  RCC_OscInitStruct.PLL1.PLLM = 2;
34001634:	2302      	movs	r3, #2
34001636:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
  RCC_OscInitStruct.PLL1.PLLN = 25;
3400163a:	2319      	movs	r3, #25
3400163c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34001640:	2300      	movs	r3, #0
34001642:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34001646:	2301      	movs	r3, #1
34001648:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
3400164c:	2301      	movs	r3, #1
3400164e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
34001652:	2302      	movs	r3, #2
34001654:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
34001658:	2300      	movs	r3, #0
3400165a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
  RCC_OscInitStruct.PLL2.PLLM = 8;
3400165e:	2308      	movs	r3, #8
34001660:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
34001664:	2300      	movs	r3, #0
34001666:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
  RCC_OscInitStruct.PLL2.PLLN = 125;
3400166a:	237d      	movs	r3, #125	@ 0x7d
3400166c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
34001670:	2301      	movs	r3, #1
34001672:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
  RCC_OscInitStruct.PLL2.PLLP2 = 1;
34001676:	2301      	movs	r3, #1
34001678:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
3400167c:	2302      	movs	r3, #2
3400167e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
34001682:	2300      	movs	r3, #0
34001684:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  RCC_OscInitStruct.PLL3.PLLM = 8;
34001688:	2308      	movs	r3, #8
3400168a:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  RCC_OscInitStruct.PLL3.PLLN = 225;
3400168e:	23e1      	movs	r3, #225	@ 0xe1
34001690:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34001694:	2300      	movs	r3, #0
34001696:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
3400169a:	2301      	movs	r3, #1
3400169c:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
340016a0:	2302      	movs	r3, #2
340016a2:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
340016a6:	2302      	movs	r3, #2
340016a8:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
340016ac:	2300      	movs	r3, #0
340016ae:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
  RCC_OscInitStruct.PLL4.PLLM = 8;
340016b2:	2308      	movs	r3, #8
340016b4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
340016b8:	2300      	movs	r3, #0
340016ba:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  RCC_OscInitStruct.PLL4.PLLN = 225;
340016be:	23e1      	movs	r3, #225	@ 0xe1
340016c0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
340016c4:	2306      	movs	r3, #6
340016c6:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
340016ca:	2306      	movs	r3, #6
340016cc:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
340016d0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
340016d4:	4618      	mov	r0, r3
340016d6:	f004 ff67 	bl	340065a8 <HAL_RCC_OscConfig>
340016da:	4603      	mov	r3, r0
340016dc:	2b00      	cmp	r3, #0
340016de:	d001      	beq.n	340016e4 <SystemClock_Config+0x104>
  {
    while(1);
340016e0:	bf00      	nop
340016e2:	e7fd      	b.n	340016e0 <SystemClock_Config+0x100>
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK |
340016e4:	237f      	movs	r3, #127	@ 0x7f
340016e6:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
340016ea:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
340016ee:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
340016f2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
340016f6:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
340016fa:	2300      	movs	r3, #0
340016fc:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
34001700:	2301      	movs	r3, #1
34001702:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34001706:	2300      	movs	r3, #0
34001708:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
3400170c:	2302      	movs	r3, #2
3400170e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
34001712:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
34001716:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
3400171a:	2301      	movs	r3, #1
3400171c:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
34001720:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001724:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
34001728:	2301      	movs	r3, #1
3400172a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
3400172e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34001732:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34001736:	2300      	movs	r3, #0
34001738:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
3400173c:	2300      	movs	r3, #0
3400173e:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34001742:	2300      	movs	r3, #0
34001744:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34001748:	2300      	movs	r3, #0
3400174a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
3400174e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
34001752:	4618      	mov	r0, r3
34001754:	f005 fc48 	bl	34006fe8 <HAL_RCC_ClockConfig>
34001758:	4603      	mov	r3, r0
3400175a:	2b00      	cmp	r3, #0
3400175c:	d001      	beq.n	34001762 <SystemClock_Config+0x182>
  {
    while(1);
3400175e:	bf00      	nop
34001760:	e7fd      	b.n	3400175e <SystemClock_Config+0x17e>
  }

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;
34001762:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001766:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
3400176a:	f04f 0200 	mov.w	r2, #0
3400176e:	f04f 0300 	mov.w	r3, #0
34001772:	e9c1 2300 	strd	r2, r3, [r1]

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
34001776:	f507 731a 	add.w	r3, r7, #616	@ 0x268
3400177a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
3400177e:	e9d3 2300 	ldrd	r2, r3, [r3]
34001782:	4690      	mov	r8, r2
34001784:	f443 0980 	orr.w	r9, r3, #4194304	@ 0x400000
34001788:	f507 731a 	add.w	r3, r7, #616	@ 0x268
3400178c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001790:	e9c3 8900 	strd	r8, r9, [r3]
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34001794:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001798:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
3400179c:	4a13      	ldr	r2, [pc, #76]	@ (340017ec <SystemClock_Config+0x20c>)
3400179e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
340017a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
340017a6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
340017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
340017ae:	4614      	mov	r4, r2
340017b0:	f443 0500 	orr.w	r5, r3, #8388608	@ 0x800000
340017b4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
340017b8:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
340017bc:	e9c3 4500 	strd	r4, r5, [r3]
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
340017c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
340017c4:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
340017c8:	4a09      	ldr	r2, [pc, #36]	@ (340017f0 <SystemClock_Config+0x210>)
340017ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
340017ce:	463b      	mov	r3, r7
340017d0:	4618      	mov	r0, r3
340017d2:	f007 ffff 	bl	340097d4 <HAL_RCCEx_PeriphCLKConfig>
340017d6:	4603      	mov	r3, r0
340017d8:	2b00      	cmp	r3, #0
340017da:	d001      	beq.n	340017e0 <SystemClock_Config+0x200>
  {
    while (1);
340017dc:	bf00      	nop
340017de:	e7fd      	b.n	340017dc <SystemClock_Config+0x1fc>
  }
}
340017e0:	bf00      	nop
340017e2:	f507 771a 	add.w	r7, r7, #616	@ 0x268
340017e6:	46bd      	mov	sp, r7
340017e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
340017ec:	03000014 	.word	0x03000014
340017f0:	03000414 	.word	0x03000414

340017f4 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
340017f4:	b580      	push	{r7, lr}
340017f6:	b082      	sub	sp, #8
340017f8:	af00      	add	r7, sp, #0
340017fa:	6078      	str	r0, [r7, #4]
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
340017fc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001800:	f7ff f9a6 	bl	34000b50 <LL_MEM_EnableClock>
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
34001804:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001808:	f7ff fa1e 	bl	34000c48 <LL_AHB5_GRP1_EnableClock>
  __HAL_RCC_CACHEAXI_FORCE_RESET();
3400180c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001810:	f7ff fa30 	bl	34000c74 <LL_AHB5_GRP1_ForceReset>
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
34001814:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001818:	f7ff fa3c 	bl	34000c94 <LL_AHB5_GRP1_ReleaseReset>
}
3400181c:	bf00      	nop
3400181e:	3708      	adds	r7, #8
34001820:	46bd      	mov	sp, r7
34001822:	bd80      	pop	{r7, pc}

34001824 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
34001824:	b480      	push	{r7}
34001826:	b083      	sub	sp, #12
34001828:	af00      	add	r7, sp, #0
3400182a:	6078      	str	r0, [r7, #4]
3400182c:	6039      	str	r1, [r7, #0]
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
3400182e:	be00      	bkpt	0x0000
  while (1)
34001830:	bf00      	nop
34001832:	e7fd      	b.n	34001830 <assert_failed+0xc>

34001834 <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
34001834:	b480      	push	{r7}
34001836:	b087      	sub	sp, #28
34001838:	af00      	add	r7, sp, #0
3400183a:	6078      	str	r0, [r7, #4]
3400183c:	6039      	str	r1, [r7, #0]

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
3400183e:	4b1d      	ldr	r3, [pc, #116]	@ (340018b4 <mcu_cache_invalidate_range+0x80>)
34001840:	695b      	ldr	r3, [r3, #20]
34001842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34001846:	2b00      	cmp	r3, #0
34001848:	d001      	beq.n	3400184e <mcu_cache_invalidate_range+0x1a>
3400184a:	2301      	movs	r3, #1
3400184c:	e000      	b.n	34001850 <mcu_cache_invalidate_range+0x1c>
#endif // (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)

  return 0;
3400184e:	2300      	movs	r3, #0
  if(mcu_cache_enabled()) {
34001850:	2b00      	cmp	r3, #0
34001852:	d027      	beq.n	340018a4 <mcu_cache_invalidate_range+0x70>
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
34001854:	687b      	ldr	r3, [r7, #4]
34001856:	6839      	ldr	r1, [r7, #0]
34001858:	687a      	ldr	r2, [r7, #4]
3400185a:	1a8a      	subs	r2, r1, r2
3400185c:	617b      	str	r3, [r7, #20]
3400185e:	613a      	str	r2, [r7, #16]
    if ( dsize > 0 ) {
34001860:	693b      	ldr	r3, [r7, #16]
34001862:	2b00      	cmp	r3, #0
34001864:	dd1d      	ble.n	340018a2 <mcu_cache_invalidate_range+0x6e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34001866:	697b      	ldr	r3, [r7, #20]
34001868:	f003 021f 	and.w	r2, r3, #31
3400186c:	693b      	ldr	r3, [r7, #16]
3400186e:	4413      	add	r3, r2
34001870:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34001872:	697b      	ldr	r3, [r7, #20]
34001874:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
34001876:	f3bf 8f4f 	dsb	sy
}
3400187a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3400187c:	4a0d      	ldr	r2, [pc, #52]	@ (340018b4 <mcu_cache_invalidate_range+0x80>)
3400187e:	68bb      	ldr	r3, [r7, #8]
34001880:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
34001884:	68bb      	ldr	r3, [r7, #8]
34001886:	3320      	adds	r3, #32
34001888:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
3400188a:	68fb      	ldr	r3, [r7, #12]
3400188c:	3b20      	subs	r3, #32
3400188e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
34001890:	68fb      	ldr	r3, [r7, #12]
34001892:	2b00      	cmp	r3, #0
34001894:	dcf2      	bgt.n	3400187c <mcu_cache_invalidate_range+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
34001896:	f3bf 8f4f 	dsb	sy
}
3400189a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3400189c:	f3bf 8f6f 	isb	sy
}
340018a0:	bf00      	nop
}
340018a2:	bf00      	nop
  }
  return 0;
340018a4:	2300      	movs	r3, #0
}
340018a6:	4618      	mov	r0, r3
340018a8:	371c      	adds	r7, #28
340018aa:	46bd      	mov	sp, r7
340018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
340018b0:	4770      	bx	lr
340018b2:	bf00      	nop
340018b4:	e000ed00 	.word	0xe000ed00

340018b8 <LL_ATON_Cache_MCU_Invalidate_Range>:
 */
#if defined(LL_ATON_RT_RELOC) && defined(BUILD_AI_NETWORK_RELOC)
  void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
340018b8:	b580      	push	{r7, lr}
340018ba:	b082      	sub	sp, #8
340018bc:	af00      	add	r7, sp, #0
340018be:	6078      	str	r0, [r7, #4]
340018c0:	6039      	str	r1, [r7, #0]
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
340018c2:	687a      	ldr	r2, [r7, #4]
340018c4:	683b      	ldr	r3, [r7, #0]
340018c6:	4413      	add	r3, r2
340018c8:	4619      	mov	r1, r3
340018ca:	6878      	ldr	r0, [r7, #4]
340018cc:	f7ff ffb2 	bl	34001834 <mcu_cache_invalidate_range>
    LL_ATON_OSAL_UNLOCK_MCU_CACHE();
  }
340018d0:	bf00      	nop
340018d2:	3708      	adds	r7, #8
340018d4:	46bd      	mov	sp, r7
340018d6:	bd80      	pop	{r7, pc}

340018d8 <LL_ATON_Set_User_Input_Buffer_Default>:
/* index=5 file postfix=AXISRAM1 name=cpuRAM1 offset=0x34080000  absolute_mode size=0 READ_WRITE THROUGHPUT=MID LATENCY=MID byte width=8 freq ratio=2.5 burst max length=MAXINT burst penalty=0 pipelined=ON cacheable=OFF read_power=16.616 write_power=14.522 use4initializers=NO score=84  */
/* global pool 6 is ? */
/* index=6 file postfix=AXIFLEXMEM name=flexMEM offset=0x34000000  absolute_mode size=0 READ_WRITE THROUGHPUT=MID LATENCY=MID byte width=8 freq ratio=2.5 burst max length=MAXINT burst penalty=0 pipelined=ON cacheable=OFF read_power=9.381 write_power=8.569 use4initializers=NO score=84  */

LL_ATON_User_IO_Result_t LL_ATON_Set_User_Input_Buffer_Default(uint32_t num, void* buffer, uint32_t size)
{
340018d8:	b480      	push	{r7}
340018da:	b085      	sub	sp, #20
340018dc:	af00      	add	r7, sp, #0
340018de:	60f8      	str	r0, [r7, #12]
340018e0:	60b9      	str	r1, [r7, #8]
340018e2:	607a      	str	r2, [r7, #4]
  { 
    return LL_ATON_User_IO_WRONG_INDEX;
340018e4:	2303      	movs	r3, #3
  }
}
340018e6:	4618      	mov	r0, r3
340018e8:	3714      	adds	r7, #20
340018ea:	46bd      	mov	sp, r7
340018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
340018f0:	4770      	bx	lr

340018f2 <LL_ATON_Get_User_Input_Buffer_Default>:

void *LL_ATON_Get_User_Input_Buffer_Default(uint32_t num)
{
340018f2:	b480      	push	{r7}
340018f4:	b083      	sub	sp, #12
340018f6:	af00      	add	r7, sp, #0
340018f8:	6078      	str	r0, [r7, #4]
  { 
    return NULL;
340018fa:	2300      	movs	r3, #0
  }
}
340018fc:	4618      	mov	r0, r3
340018fe:	370c      	adds	r7, #12
34001900:	46bd      	mov	sp, r7
34001902:	f85d 7b04 	ldr.w	r7, [sp], #4
34001906:	4770      	bx	lr

34001908 <LL_ATON_Set_User_Output_Buffer_Default>:

LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_Default(uint32_t num, void* buffer, uint32_t size)
{
34001908:	b480      	push	{r7}
3400190a:	b085      	sub	sp, #20
3400190c:	af00      	add	r7, sp, #0
3400190e:	60f8      	str	r0, [r7, #12]
34001910:	60b9      	str	r1, [r7, #8]
34001912:	607a      	str	r2, [r7, #4]
  { 
    return LL_ATON_User_IO_WRONG_INDEX;
34001914:	2303      	movs	r3, #3
  }
}
34001916:	4618      	mov	r0, r3
34001918:	3714      	adds	r7, #20
3400191a:	46bd      	mov	sp, r7
3400191c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001920:	4770      	bx	lr

34001922 <LL_ATON_Get_User_Output_Buffer_Default>:

void *LL_ATON_Get_User_Output_Buffer_Default(uint32_t num)
{
34001922:	b480      	push	{r7}
34001924:	b083      	sub	sp, #12
34001926:	af00      	add	r7, sp, #0
34001928:	6078      	str	r0, [r7, #4]
  { 
    return NULL;
3400192a:	2300      	movs	r3, #0
  }
}
3400192c:	4618      	mov	r0, r3
3400192e:	370c      	adds	r7, #12
34001930:	46bd      	mov	sp, r7
34001932:	f85d 7b04 	ldr.w	r7, [sp], #4
34001936:	4770      	bx	lr

34001938 <LL_ATON_EC_Network_Init_Default>:
};


// this function MUST be called ONLY ONCE once for initializing the network
bool LL_ATON_EC_Network_Init_Default(void)
{
34001938:	b480      	push	{r7}
3400193a:	af00      	add	r7, sp, #0


  return true;
3400193c:	2301      	movs	r3, #1
}
3400193e:	4618      	mov	r0, r3
34001940:	46bd      	mov	sp, r7
34001942:	f85d 7b04 	ldr.w	r7, [sp], #4
34001946:	4770      	bx	lr

34001948 <LL_ATON_EC_Inference_Init_Default>:

// this function should be called before each inference
bool LL_ATON_EC_Inference_Init_Default(void)
{
34001948:	b480      	push	{r7}
3400194a:	af00      	add	r7, sp, #0


  return true;
3400194c:	2301      	movs	r3, #1
}
3400194e:	4618      	mov	r0, r3
34001950:	46bd      	mov	sp, r7
34001952:	f85d 7b04 	ldr.w	r7, [sp], #4
34001956:	4770      	bx	lr

34001958 <_ec_blob_cache_start_func_1>:
/* scheduling epoch=0    nodes=5   ------------------------------------------------------------------- */

// Epoch Controller Blob (name='_ec_blob_1') micro instructions needed

// Epoch Controller Blob (name='_ec_blob_1') start function
static void _ec_blob_cache_start_func_1(const void *epoch_block) {
34001958:	b580      	push	{r7, lr}
3400195a:	b082      	sub	sp, #8
3400195c:	af00      	add	r7, sp, #0
3400195e:	6078      	str	r0, [r7, #4]

  /* *** MCU cache invalidate (only) operation (HW, whole range) *** */
  /*     memory pool: 1 */
  /*     start: ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 0))) */
  /*     end:   ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 32))) */
  LL_ATON_Cache_MCU_Invalidate_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 0))) /* Equivalent hex address = 0x342e0000UL */, 32);
34001960:	2120      	movs	r1, #32
34001962:	4803      	ldr	r0, [pc, #12]	@ (34001970 <_ec_blob_cache_start_func_1+0x18>)
34001964:	f7ff ffa8 	bl	340018b8 <LL_ATON_Cache_MCU_Invalidate_Range>

};
34001968:	bf00      	nop
3400196a:	3708      	adds	r7, #8
3400196c:	46bd      	mov	sp, r7
3400196e:	bd80      	pop	{r7, pc}
34001970:	342e0000 	.word	0x342e0000

34001974 <LL_ATON_EpochBlockItems_Default>:


/* scheduling DONE                 ------------------------------------------------------------------- */

const EpochBlock_ItemTypeDef *LL_ATON_EpochBlockItems_Default(void) {
34001974:	b480      	push	{r7}
34001976:	af00      	add	r7, sp, #0
      .flags = EpochBlock_Flags_last_eb,
    },
  };


  return ll_atonn_rt_epoch_block_array;
34001978:	4b02      	ldr	r3, [pc, #8]	@ (34001984 <LL_ATON_EpochBlockItems_Default+0x10>)
}
3400197a:	4618      	mov	r0, r3
3400197c:	46bd      	mov	sp, r7
3400197e:	f85d 7b04 	ldr.w	r7, [sp], #4
34001982:	4770      	bx	lr
34001984:	3401e2f0 	.word	0x3401e2f0

34001988 <LL_ATON_Input_Buffers_Info_Default>:

const LL_Buffer_InfoTypeDef *LL_ATON_Input_Buffers_Info_Default(void)
{
34001988:	b480      	push	{r7}
3400198a:	af00      	add	r7, sp, #0
    {
      .name = NULL,
    }
  };

  return buff_info;
3400198c:	4b02      	ldr	r3, [pc, #8]	@ (34001998 <LL_ATON_Input_Buffers_Info_Default+0x10>)
}
3400198e:	4618      	mov	r0, r3
34001990:	46bd      	mov	sp, r7
34001992:	f85d 7b04 	ldr.w	r7, [sp], #4
34001996:	4770      	bx	lr
34001998:	3401e318 	.word	0x3401e318

3400199c <LL_ATON_Output_Buffers_Info_Default>:

const LL_Buffer_InfoTypeDef *LL_ATON_Output_Buffers_Info_Default(void)
{
3400199c:	b480      	push	{r7}
3400199e:	af00      	add	r7, sp, #0
    {
      .name = NULL,
    }
  };

  return buff_info;
340019a0:	4b02      	ldr	r3, [pc, #8]	@ (340019ac <LL_ATON_Output_Buffers_Info_Default+0x10>)
}
340019a2:	4618      	mov	r0, r3
340019a4:	46bd      	mov	sp, r7
340019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
340019aa:	4770      	bx	lr
340019ac:	3401e3a8 	.word	0x3401e3a8

340019b0 <LL_ATON_Internal_Buffers_Info_Default>:

const LL_Buffer_InfoTypeDef *LL_ATON_Internal_Buffers_Info_Default(void)
{
340019b0:	b480      	push	{r7}
340019b2:	af00      	add	r7, sp, #0
    {
      .name = NULL,
    }
  };

  return buff_info;
340019b4:	4b02      	ldr	r3, [pc, #8]	@ (340019c0 <LL_ATON_Internal_Buffers_Info_Default+0x10>)
}
340019b6:	4618      	mov	r0, r3
340019b8:	46bd      	mov	sp, r7
340019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340019be:	4770      	bx	lr
340019c0:	3401e438 	.word	0x3401e438

340019c4 <npu_cache_init>:
#include "stm32n6xx_hal_cacheaxi.h"

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
340019c4:	b580      	push	{r7, lr}
340019c6:	af00      	add	r7, sp, #0
  hcacheaxi_s.Instance = CACHEAXI;
340019c8:	4b03      	ldr	r3, [pc, #12]	@ (340019d8 <npu_cache_init+0x14>)
340019ca:	4a04      	ldr	r2, [pc, #16]	@ (340019dc <npu_cache_init+0x18>)
340019cc:	601a      	str	r2, [r3, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
340019ce:	4802      	ldr	r0, [pc, #8]	@ (340019d8 <npu_cache_init+0x14>)
340019d0:	f002 f9da 	bl	34003d88 <HAL_CACHEAXI_Init>
}
340019d4:	bf00      	nop
340019d6:	bd80      	pop	{r7, pc}
340019d8:	3401f430 	.word	0x3401f430
340019dc:	580dfc00 	.word	0x580dfc00

340019e0 <npu_cache_enable>:

void npu_cache_enable(void)
{
340019e0:	b580      	push	{r7, lr}
340019e2:	b082      	sub	sp, #8
340019e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
340019e6:	4806      	ldr	r0, [pc, #24]	@ (34001a00 <npu_cache_enable+0x20>)
340019e8:	f002 fa04 	bl	34003df4 <HAL_CACHEAXI_Enable>
340019ec:	4603      	mov	r3, r0
340019ee:	71fb      	strb	r3, [r7, #7]
  } while (status == HAL_BUSY);
340019f0:	79fb      	ldrb	r3, [r7, #7]
340019f2:	2b02      	cmp	r3, #2
340019f4:	d0f7      	beq.n	340019e6 <npu_cache_enable+0x6>
}
340019f6:	bf00      	nop
340019f8:	bf00      	nop
340019fa:	3708      	adds	r7, #8
340019fc:	46bd      	mov	sp, r7
340019fe:	bd80      	pop	{r7, pc}
34001a00:	3401f430 	.word	0x3401f430

34001a04 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
34001a04:	b480      	push	{r7}
34001a06:	af00      	add	r7, sp, #0
}
34001a08:	bf00      	nop
34001a0a:	46bd      	mov	sp, r7
34001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001a10:	4770      	bx	lr

34001a12 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
34001a12:	b480      	push	{r7}
34001a14:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
34001a16:	bf00      	nop
34001a18:	e7fd      	b.n	34001a16 <HardFault_Handler+0x4>

34001a1a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
34001a1a:	b480      	push	{r7}
34001a1c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
34001a1e:	bf00      	nop
34001a20:	e7fd      	b.n	34001a1e <MemManage_Handler+0x4>

34001a22 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
34001a22:	b480      	push	{r7}
34001a24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
34001a26:	bf00      	nop
34001a28:	e7fd      	b.n	34001a26 <BusFault_Handler+0x4>

34001a2a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
34001a2a:	b480      	push	{r7}
34001a2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
34001a2e:	bf00      	nop
34001a30:	e7fd      	b.n	34001a2e <UsageFault_Handler+0x4>

34001a32 <SecureFault_Handler>:
  * @brief  This function handles Secure Fault exception.
  * @param  None
  * @retval None
  */
void SecureFault_Handler(void)
{
34001a32:	b480      	push	{r7}
34001a34:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
34001a36:	bf00      	nop
34001a38:	e7fd      	b.n	34001a36 <SecureFault_Handler+0x4>

34001a3a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
34001a3a:	b480      	push	{r7}
34001a3c:	af00      	add	r7, sp, #0
}
34001a3e:	bf00      	nop
34001a40:	46bd      	mov	sp, r7
34001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
34001a46:	4770      	bx	lr

34001a48 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
34001a48:	b480      	push	{r7}
34001a4a:	af00      	add	r7, sp, #0
  while (1)
34001a4c:	bf00      	nop
34001a4e:	e7fd      	b.n	34001a4c <DebugMon_Handler+0x4>

34001a50 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
34001a50:	b480      	push	{r7}
34001a52:	af00      	add	r7, sp, #0
  while (1)
34001a54:	bf00      	nop
34001a56:	e7fd      	b.n	34001a54 <PendSV_Handler+0x4>

34001a58 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
34001a58:	b580      	push	{r7, lr}
34001a5a:	af00      	add	r7, sp, #0
  HAL_IncTick();
34001a5c:	f001 fffe 	bl	34003a5c <HAL_IncTick>
}
34001a60:	bf00      	nop
34001a62:	bd80      	pop	{r7, pc}

34001a64 <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
34001a64:	b580      	push	{r7, lr}
34001a66:	b082      	sub	sp, #8
34001a68:	af00      	add	r7, sp, #0
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001a6a:	f015 ffbf 	bl	340179ec <CMW_CAMERA_GetDCMIPPHandle>
34001a6e:	6078      	str	r0, [r7, #4]
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
34001a70:	6878      	ldr	r0, [r7, #4]
34001a72:	f002 fd6d 	bl	34004550 <HAL_DCMIPP_CSI_IRQHandler>
}
34001a76:	bf00      	nop
34001a78:	3708      	adds	r7, #8
34001a7a:	46bd      	mov	sp, r7
34001a7c:	bd80      	pop	{r7, pc}

34001a7e <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
34001a7e:	b580      	push	{r7, lr}
34001a80:	b082      	sub	sp, #8
34001a82:	af00      	add	r7, sp, #0
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001a84:	f015 ffb2 	bl	340179ec <CMW_CAMERA_GetDCMIPPHandle>
34001a88:	6078      	str	r0, [r7, #4]
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
34001a8a:	6878      	ldr	r0, [r7, #4]
34001a8c:	f002 fb7c 	bl	34004188 <HAL_DCMIPP_IRQHandler>
34001a90:	bf00      	nop
34001a92:	3708      	adds	r7, #8
34001a94:	46bd      	mov	sp, r7
34001a96:	bd80      	pop	{r7, pc}

34001a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
34001a98:	b480      	push	{r7}
34001a9a:	af00      	add	r7, sp, #0
  return 1;
34001a9c:	2301      	movs	r3, #1
}
34001a9e:	4618      	mov	r0, r3
34001aa0:	46bd      	mov	sp, r7
34001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
34001aa6:	4770      	bx	lr

34001aa8 <_kill>:

int _kill(int pid, int sig)
{
34001aa8:	b580      	push	{r7, lr}
34001aaa:	b082      	sub	sp, #8
34001aac:	af00      	add	r7, sp, #0
34001aae:	6078      	str	r0, [r7, #4]
34001ab0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
34001ab2:	f019 f985 	bl	3401adc0 <__errno>
34001ab6:	4603      	mov	r3, r0
34001ab8:	2216      	movs	r2, #22
34001aba:	601a      	str	r2, [r3, #0]
  return -1;
34001abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
34001ac0:	4618      	mov	r0, r3
34001ac2:	3708      	adds	r7, #8
34001ac4:	46bd      	mov	sp, r7
34001ac6:	bd80      	pop	{r7, pc}

34001ac8 <_exit>:

void _exit (int status)
{
34001ac8:	b580      	push	{r7, lr}
34001aca:	b082      	sub	sp, #8
34001acc:	af00      	add	r7, sp, #0
34001ace:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
34001ad0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
34001ad4:	6878      	ldr	r0, [r7, #4]
34001ad6:	f7ff ffe7 	bl	34001aa8 <_kill>
  while (1) {}    /* Make sure we hang here */
34001ada:	bf00      	nop
34001adc:	e7fd      	b.n	34001ada <_exit+0x12>

34001ade <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
34001ade:	b580      	push	{r7, lr}
34001ae0:	b086      	sub	sp, #24
34001ae2:	af00      	add	r7, sp, #0
34001ae4:	60f8      	str	r0, [r7, #12]
34001ae6:	60b9      	str	r1, [r7, #8]
34001ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001aea:	2300      	movs	r3, #0
34001aec:	617b      	str	r3, [r7, #20]
34001aee:	e00a      	b.n	34001b06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
34001af0:	f3af 8000 	nop.w
34001af4:	4601      	mov	r1, r0
34001af6:	68bb      	ldr	r3, [r7, #8]
34001af8:	1c5a      	adds	r2, r3, #1
34001afa:	60ba      	str	r2, [r7, #8]
34001afc:	b2ca      	uxtb	r2, r1
34001afe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001b00:	697b      	ldr	r3, [r7, #20]
34001b02:	3301      	adds	r3, #1
34001b04:	617b      	str	r3, [r7, #20]
34001b06:	697a      	ldr	r2, [r7, #20]
34001b08:	687b      	ldr	r3, [r7, #4]
34001b0a:	429a      	cmp	r2, r3
34001b0c:	dbf0      	blt.n	34001af0 <_read+0x12>
  }

  return len;
34001b0e:	687b      	ldr	r3, [r7, #4]
}
34001b10:	4618      	mov	r0, r3
34001b12:	3718      	adds	r7, #24
34001b14:	46bd      	mov	sp, r7
34001b16:	bd80      	pop	{r7, pc}

34001b18 <_close>:
  }
  return len;
}

int _close(int file)
{
34001b18:	b480      	push	{r7}
34001b1a:	b083      	sub	sp, #12
34001b1c:	af00      	add	r7, sp, #0
34001b1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
34001b20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
34001b24:	4618      	mov	r0, r3
34001b26:	370c      	adds	r7, #12
34001b28:	46bd      	mov	sp, r7
34001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34001b2e:	4770      	bx	lr

34001b30 <_fstat>:


int _fstat(int file, struct stat *st)
{
34001b30:	b480      	push	{r7}
34001b32:	b083      	sub	sp, #12
34001b34:	af00      	add	r7, sp, #0
34001b36:	6078      	str	r0, [r7, #4]
34001b38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
34001b3a:	683b      	ldr	r3, [r7, #0]
34001b3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34001b40:	605a      	str	r2, [r3, #4]
  return 0;
34001b42:	2300      	movs	r3, #0
}
34001b44:	4618      	mov	r0, r3
34001b46:	370c      	adds	r7, #12
34001b48:	46bd      	mov	sp, r7
34001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
34001b4e:	4770      	bx	lr

34001b50 <_isatty>:

int _isatty(int file)
{
34001b50:	b480      	push	{r7}
34001b52:	b083      	sub	sp, #12
34001b54:	af00      	add	r7, sp, #0
34001b56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
34001b58:	2301      	movs	r3, #1
}
34001b5a:	4618      	mov	r0, r3
34001b5c:	370c      	adds	r7, #12
34001b5e:	46bd      	mov	sp, r7
34001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
34001b64:	4770      	bx	lr

34001b66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
34001b66:	b480      	push	{r7}
34001b68:	b085      	sub	sp, #20
34001b6a:	af00      	add	r7, sp, #0
34001b6c:	60f8      	str	r0, [r7, #12]
34001b6e:	60b9      	str	r1, [r7, #8]
34001b70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
34001b72:	2300      	movs	r3, #0
}
34001b74:	4618      	mov	r0, r3
34001b76:	3714      	adds	r7, #20
34001b78:	46bd      	mov	sp, r7
34001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
34001b7e:	4770      	bx	lr

34001b80 <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
34001b80:	b480      	push	{r7}
34001b82:	b083      	sub	sp, #12
34001b84:	af00      	add	r7, sp, #0
34001b86:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
34001b88:	687b      	ldr	r3, [r7, #4]
34001b8a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34001b8e:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
34001b90:	687b      	ldr	r3, [r7, #4]
34001b92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34001b96:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
34001b98:	687b      	ldr	r3, [r7, #4]
34001b9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34001b9e:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
34001ba0:	687b      	ldr	r3, [r7, #4]
34001ba2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34001ba6:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001ba8:	687b      	ldr	r3, [r7, #4]
34001baa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34001bae:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
34001bb0:	687b      	ldr	r3, [r7, #4]
34001bb2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34001bb6:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001bb8:	687b      	ldr	r3, [r7, #4]
34001bba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34001bbe:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
34001bc0:	687b      	ldr	r3, [r7, #4]
34001bc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
34001bc6:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
34001bc8:	687b      	ldr	r3, [r7, #4]
34001bca:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34001bce:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
34001bd0:	2300      	movs	r3, #0
};
34001bd2:	4618      	mov	r0, r3
34001bd4:	370c      	adds	r7, #12
34001bd6:	46bd      	mov	sp, r7
34001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
34001bdc:	4770      	bx	lr

34001bde <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
34001bde:	b580      	push	{r7, lr}
34001be0:	b09a      	sub	sp, #104	@ 0x68
34001be2:	af00      	add	r7, sp, #0
34001be4:	6078      	str	r0, [r7, #4]
34001be6:	460b      	mov	r3, r1
34001be8:	70fb      	strb	r3, [r7, #3]
34001bea:	4613      	mov	r3, r2
34001bec:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
34001bee:	f107 031c 	add.w	r3, r7, #28
34001bf2:	224c      	movs	r2, #76	@ 0x4c
34001bf4:	2100      	movs	r1, #0
34001bf6:	4618      	mov	r0, r3
34001bf8:	f018 fe8e 	bl	3401a918 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001bfc:	f107 0308 	add.w	r3, r7, #8
34001c00:	2200      	movs	r2, #0
34001c02:	601a      	str	r2, [r3, #0]
34001c04:	605a      	str	r2, [r3, #4]
34001c06:	609a      	str	r2, [r3, #8]
34001c08:	60da      	str	r2, [r3, #12]
34001c0a:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001c0c:	78fb      	ldrb	r3, [r7, #3]
34001c0e:	2b00      	cmp	r3, #0
34001c10:	d105      	bne.n	34001c1e <MX25UM51245G_AutoPollingMemReady+0x40>
34001c12:	78bb      	ldrb	r3, [r7, #2]
34001c14:	2b01      	cmp	r3, #1
34001c16:	d102      	bne.n	34001c1e <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
34001c18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001c1c:	e08b      	b.n	34001d36 <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001c1e:	2300      	movs	r3, #0
34001c20:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001c22:	2300      	movs	r3, #0
34001c24:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001c26:	78fb      	ldrb	r3, [r7, #3]
34001c28:	2b00      	cmp	r3, #0
34001c2a:	d101      	bne.n	34001c30 <MX25UM51245G_AutoPollingMemReady+0x52>
34001c2c:	2301      	movs	r3, #1
34001c2e:	e000      	b.n	34001c32 <MX25UM51245G_AutoPollingMemReady+0x54>
34001c30:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001c34:	78bb      	ldrb	r3, [r7, #2]
34001c36:	2b01      	cmp	r3, #1
34001c38:	d101      	bne.n	34001c3e <MX25UM51245G_AutoPollingMemReady+0x60>
34001c3a:	2308      	movs	r3, #8
34001c3c:	e000      	b.n	34001c40 <MX25UM51245G_AutoPollingMemReady+0x62>
34001c3e:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001c40:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001c42:	78fb      	ldrb	r3, [r7, #3]
34001c44:	2b00      	cmp	r3, #0
34001c46:	d101      	bne.n	34001c4c <MX25UM51245G_AutoPollingMemReady+0x6e>
34001c48:	2300      	movs	r3, #0
34001c4a:	e000      	b.n	34001c4e <MX25UM51245G_AutoPollingMemReady+0x70>
34001c4c:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34001c50:	78fb      	ldrb	r3, [r7, #3]
34001c52:	2b00      	cmp	r3, #0
34001c54:	d101      	bne.n	34001c5a <MX25UM51245G_AutoPollingMemReady+0x7c>
34001c56:	2305      	movs	r3, #5
34001c58:	e001      	b.n	34001c5e <MX25UM51245G_AutoPollingMemReady+0x80>
34001c5a:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001c60:	78fb      	ldrb	r3, [r7, #3]
34001c62:	2b00      	cmp	r3, #0
34001c64:	d101      	bne.n	34001c6a <MX25UM51245G_AutoPollingMemReady+0x8c>
34001c66:	2300      	movs	r3, #0
34001c68:	e001      	b.n	34001c6e <MX25UM51245G_AutoPollingMemReady+0x90>
34001c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001c70:	78bb      	ldrb	r3, [r7, #2]
34001c72:	2b01      	cmp	r3, #1
34001c74:	d102      	bne.n	34001c7c <MX25UM51245G_AutoPollingMemReady+0x9e>
34001c76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001c7a:	e000      	b.n	34001c7e <MX25UM51245G_AutoPollingMemReady+0xa0>
34001c7c:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001c80:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.Address            = 0U;
34001c86:	2300      	movs	r3, #0
34001c88:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001c8a:	2300      	movs	r3, #0
34001c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001c8e:	78fb      	ldrb	r3, [r7, #3]
34001c90:	2b00      	cmp	r3, #0
34001c92:	d102      	bne.n	34001c9a <MX25UM51245G_AutoPollingMemReady+0xbc>
34001c94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001c98:	e001      	b.n	34001c9e <MX25UM51245G_AutoPollingMemReady+0xc0>
34001c9a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001c9e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001ca0:	78bb      	ldrb	r3, [r7, #2]
34001ca2:	2b01      	cmp	r3, #1
34001ca4:	d102      	bne.n	34001cac <MX25UM51245G_AutoPollingMemReady+0xce>
34001ca6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001caa:	e000      	b.n	34001cae <MX25UM51245G_AutoPollingMemReady+0xd0>
34001cac:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001cb0:	78fb      	ldrb	r3, [r7, #3]
34001cb2:	2b00      	cmp	r3, #0
34001cb4:	d006      	beq.n	34001cc4 <MX25UM51245G_AutoPollingMemReady+0xe6>
34001cb6:	78bb      	ldrb	r3, [r7, #2]
34001cb8:	2b01      	cmp	r3, #1
34001cba:	d101      	bne.n	34001cc0 <MX25UM51245G_AutoPollingMemReady+0xe2>
34001cbc:	2305      	movs	r3, #5
34001cbe:	e002      	b.n	34001cc6 <MX25UM51245G_AutoPollingMemReady+0xe8>
34001cc0:	2304      	movs	r3, #4
34001cc2:	e000      	b.n	34001cc6 <MX25UM51245G_AutoPollingMemReady+0xe8>
34001cc4:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001cc6:	663b      	str	r3, [r7, #96]	@ 0x60
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001cc8:	78bb      	ldrb	r3, [r7, #2]
34001cca:	2b01      	cmp	r3, #1
34001ccc:	d101      	bne.n	34001cd2 <MX25UM51245G_AutoPollingMemReady+0xf4>
34001cce:	2302      	movs	r3, #2
34001cd0:	e000      	b.n	34001cd4 <MX25UM51245G_AutoPollingMemReady+0xf6>
34001cd2:	2301      	movs	r3, #1
34001cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001cd6:	78bb      	ldrb	r3, [r7, #2]
34001cd8:	2b01      	cmp	r3, #1
34001cda:	d102      	bne.n	34001ce2 <MX25UM51245G_AutoPollingMemReady+0x104>
34001cdc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001ce0:	e000      	b.n	34001ce4 <MX25UM51245G_AutoPollingMemReady+0x106>
34001ce2:	2300      	movs	r3, #0
34001ce4:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  s_config.MatchValue    = 0U;
34001ce6:	2300      	movs	r3, #0
34001ce8:	60bb      	str	r3, [r7, #8]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001cea:	2301      	movs	r3, #1
34001cec:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
34001cee:	2300      	movs	r3, #0
34001cf0:	613b      	str	r3, [r7, #16]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
34001cf2:	2310      	movs	r3, #16
34001cf4:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001cf6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34001cfa:	617b      	str	r3, [r7, #20]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001cfc:	f107 031c 	add.w	r3, r7, #28
34001d00:	f241 3288 	movw	r2, #5000	@ 0x1388
34001d04:	4619      	mov	r1, r3
34001d06:	6878      	ldr	r0, [r7, #4]
34001d08:	f014 ffaa 	bl	34016c60 <HAL_XSPI_Command>
34001d0c:	4603      	mov	r3, r0
34001d0e:	2b00      	cmp	r3, #0
34001d10:	d002      	beq.n	34001d18 <MX25UM51245G_AutoPollingMemReady+0x13a>
  {
    return MX25UM51245G_ERROR;
34001d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001d16:	e00e      	b.n	34001d36 <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001d18:	f107 0308 	add.w	r3, r7, #8
34001d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001d20:	4619      	mov	r1, r3
34001d22:	6878      	ldr	r0, [r7, #4]
34001d24:	f015 fac4 	bl	340172b0 <HAL_XSPI_AutoPolling>
34001d28:	4603      	mov	r3, r0
34001d2a:	2b00      	cmp	r3, #0
34001d2c:	d002      	beq.n	34001d34 <MX25UM51245G_AutoPollingMemReady+0x156>
  {
    return MX25UM51245G_ERROR;
34001d2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001d32:	e000      	b.n	34001d36 <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  return MX25UM51245G_OK;
34001d34:	2300      	movs	r3, #0
}
34001d36:	4618      	mov	r0, r3
34001d38:	3768      	adds	r7, #104	@ 0x68
34001d3a:	46bd      	mov	sp, r7
34001d3c:	bd80      	pop	{r7, pc}

34001d3e <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
34001d3e:	b580      	push	{r7, lr}
34001d40:	b09a      	sub	sp, #104	@ 0x68
34001d42:	af00      	add	r7, sp, #0
34001d44:	6078      	str	r0, [r7, #4]
34001d46:	460b      	mov	r3, r1
34001d48:	70fb      	strb	r3, [r7, #3]
34001d4a:	4613      	mov	r3, r2
34001d4c:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
34001d4e:	f107 031c 	add.w	r3, r7, #28
34001d52:	224c      	movs	r2, #76	@ 0x4c
34001d54:	2100      	movs	r1, #0
34001d56:	4618      	mov	r0, r3
34001d58:	f018 fdde 	bl	3401a918 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001d5c:	f107 030c 	add.w	r3, r7, #12
34001d60:	2200      	movs	r2, #0
34001d62:	601a      	str	r2, [r3, #0]
34001d64:	605a      	str	r2, [r3, #4]
34001d66:	609a      	str	r2, [r3, #8]
34001d68:	60da      	str	r2, [r3, #12]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
34001d6a:	78fb      	ldrb	r3, [r7, #3]
34001d6c:	2b01      	cmp	r3, #1
34001d6e:	d105      	bne.n	34001d7c <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
34001d70:	78bb      	ldrb	r3, [r7, #2]
34001d72:	2b00      	cmp	r3, #0
34001d74:	d102      	bne.n	34001d7c <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
  {
    return MX25UM51245G_ERROR;
34001d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001d7a:	e086      	b.n	34001e8a <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001d7c:	2301      	movs	r3, #1
34001d7e:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001d80:	2300      	movs	r3, #0
34001d82:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001d84:	78fb      	ldrb	r3, [r7, #3]
34001d86:	2b00      	cmp	r3, #0
34001d88:	d101      	bne.n	34001d8e <MX25UM51245G_EnableSTRMemoryMappedMode+0x50>
34001d8a:	2301      	movs	r3, #1
34001d8c:	e000      	b.n	34001d90 <MX25UM51245G_EnableSTRMemoryMappedMode+0x52>
34001d8e:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001d92:	2300      	movs	r3, #0
34001d94:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001d96:	78fb      	ldrb	r3, [r7, #3]
34001d98:	2b00      	cmp	r3, #0
34001d9a:	d101      	bne.n	34001da0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x62>
34001d9c:	2300      	movs	r3, #0
34001d9e:	e000      	b.n	34001da2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x64>
34001da0:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
34001da4:	78fb      	ldrb	r3, [r7, #3]
34001da6:	2b00      	cmp	r3, #0
34001da8:	d106      	bne.n	34001db8 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
34001daa:	78bb      	ldrb	r3, [r7, #2]
34001dac:	2b00      	cmp	r3, #0
34001dae:	d101      	bne.n	34001db4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
34001db0:	230b      	movs	r3, #11
34001db2:	e003      	b.n	34001dbc <MX25UM51245G_EnableSTRMemoryMappedMode+0x7e>
34001db4:	230c      	movs	r3, #12
34001db6:	e001      	b.n	34001dbc <MX25UM51245G_EnableSTRMemoryMappedMode+0x7e>
34001db8:	f64e 4313 	movw	r3, #60435	@ 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001dbe:	78fb      	ldrb	r3, [r7, #3]
34001dc0:	2b00      	cmp	r3, #0
34001dc2:	d102      	bne.n	34001dca <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
34001dc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001dc8:	e001      	b.n	34001dce <MX25UM51245G_EnableSTRMemoryMappedMode+0x90>
34001dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
34001dd0:	2300      	movs	r3, #0
34001dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
34001dd4:	78bb      	ldrb	r3, [r7, #2]
34001dd6:	2b00      	cmp	r3, #0
34001dd8:	d102      	bne.n	34001de0 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
34001dda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34001dde:	e001      	b.n	34001de4 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa6>
34001de0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
34001de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001de6:	2300      	movs	r3, #0
34001de8:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001dea:	78fb      	ldrb	r3, [r7, #3]
34001dec:	2b00      	cmp	r3, #0
34001dee:	d102      	bne.n	34001df6 <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
34001df0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001df4:	e001      	b.n	34001dfa <MX25UM51245G_EnableSTRMemoryMappedMode+0xbc>
34001df6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001dfa:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
34001dfc:	2300      	movs	r3, #0
34001dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
34001e00:	78fb      	ldrb	r3, [r7, #3]
34001e02:	2b00      	cmp	r3, #0
34001e04:	d101      	bne.n	34001e0a <MX25UM51245G_EnableSTRMemoryMappedMode+0xcc>
34001e06:	2308      	movs	r3, #8
34001e08:	e000      	b.n	34001e0c <MX25UM51245G_EnableSTRMemoryMappedMode+0xce>
34001e0a:	2306      	movs	r3, #6
34001e0c:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34001e0e:	2300      	movs	r3, #0
34001e10:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001e12:	f107 031c 	add.w	r3, r7, #28
34001e16:	f241 3288 	movw	r2, #5000	@ 0x1388
34001e1a:	4619      	mov	r1, r3
34001e1c:	6878      	ldr	r0, [r7, #4]
34001e1e:	f014 ff1f 	bl	34016c60 <HAL_XSPI_Command>
34001e22:	4603      	mov	r3, r0
34001e24:	2b00      	cmp	r3, #0
34001e26:	d002      	beq.n	34001e2e <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
34001e28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001e2c:	e02d      	b.n	34001e8a <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
34001e2e:	2302      	movs	r3, #2
34001e30:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001e32:	78fb      	ldrb	r3, [r7, #3]
34001e34:	2b00      	cmp	r3, #0
34001e36:	d106      	bne.n	34001e46 <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
34001e38:	78bb      	ldrb	r3, [r7, #2]
34001e3a:	2b00      	cmp	r3, #0
34001e3c:	d101      	bne.n	34001e42 <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
34001e3e:	2302      	movs	r3, #2
34001e40:	e003      	b.n	34001e4a <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
34001e42:	2312      	movs	r3, #18
34001e44:	e001      	b.n	34001e4a <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
34001e46:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DummyCycles        = 0U;
34001e4c:	2300      	movs	r3, #0
34001e4e:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001e50:	f107 031c 	add.w	r3, r7, #28
34001e54:	f241 3288 	movw	r2, #5000	@ 0x1388
34001e58:	4619      	mov	r1, r3
34001e5a:	6878      	ldr	r0, [r7, #4]
34001e5c:	f014 ff00 	bl	34016c60 <HAL_XSPI_Command>
34001e60:	4603      	mov	r3, r0
34001e62:	2b00      	cmp	r3, #0
34001e64:	d002      	beq.n	34001e6c <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
34001e66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001e6a:	e00e      	b.n	34001e8a <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001e6c:	2300      	movs	r3, #0
34001e6e:	60fb      	str	r3, [r7, #12]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001e70:	f107 030c 	add.w	r3, r7, #12
34001e74:	4619      	mov	r1, r3
34001e76:	6878      	ldr	r0, [r7, #4]
34001e78:	f015 fae4 	bl	34017444 <HAL_XSPI_MemoryMapped>
34001e7c:	4603      	mov	r3, r0
34001e7e:	2b00      	cmp	r3, #0
34001e80:	d002      	beq.n	34001e88 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
34001e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001e86:	e000      	b.n	34001e8a <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
34001e88:	2300      	movs	r3, #0
}
34001e8a:	4618      	mov	r0, r3
34001e8c:	3768      	adds	r7, #104	@ 0x68
34001e8e:	46bd      	mov	sp, r7
34001e90:	bd80      	pop	{r7, pc}

34001e92 <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
34001e92:	b580      	push	{r7, lr}
34001e94:	b09a      	sub	sp, #104	@ 0x68
34001e96:	af00      	add	r7, sp, #0
34001e98:	6078      	str	r0, [r7, #4]
34001e9a:	460b      	mov	r3, r1
34001e9c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
34001e9e:	f107 031c 	add.w	r3, r7, #28
34001ea2:	224c      	movs	r2, #76	@ 0x4c
34001ea4:	2100      	movs	r1, #0
34001ea6:	4618      	mov	r0, r3
34001ea8:	f018 fd36 	bl	3401a918 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001eac:	f107 030c 	add.w	r3, r7, #12
34001eb0:	2200      	movs	r2, #0
34001eb2:	601a      	str	r2, [r3, #0]
34001eb4:	605a      	str	r2, [r3, #4]
34001eb6:	609a      	str	r2, [r3, #8]
34001eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001eba:	2301      	movs	r3, #1
34001ebc:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001ebe:	2300      	movs	r3, #0
34001ec0:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34001ec2:	2304      	movs	r3, #4
34001ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
34001ec6:	2308      	movs	r3, #8
34001ec8:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
34001eca:	2310      	movs	r3, #16
34001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
34001ece:	f64e 6311 	movw	r3, #60945	@ 0xee11
34001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34001ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
34001eda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001ede:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001ee0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001ee6:	2300      	movs	r3, #0
34001ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
34001eea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001eee:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
34001ef0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
34001ef6:	2306      	movs	r3, #6
34001ef8:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
34001efa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001efe:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001f00:	f107 031c 	add.w	r3, r7, #28
34001f04:	f241 3288 	movw	r2, #5000	@ 0x1388
34001f08:	4619      	mov	r1, r3
34001f0a:	6878      	ldr	r0, [r7, #4]
34001f0c:	f014 fea8 	bl	34016c60 <HAL_XSPI_Command>
34001f10:	4603      	mov	r3, r0
34001f12:	2b00      	cmp	r3, #0
34001f14:	d002      	beq.n	34001f1c <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
34001f16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001f1a:	e025      	b.n	34001f68 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
34001f1c:	2302      	movs	r3, #2
34001f1e:	61fb      	str	r3, [r7, #28]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001f20:	f241 23ed 	movw	r3, #4845	@ 0x12ed
34001f24:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DummyCycles   = 0U;
34001f26:	2300      	movs	r3, #0
34001f28:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
34001f2a:	2300      	movs	r3, #0
34001f2c:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001f2e:	f107 031c 	add.w	r3, r7, #28
34001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
34001f36:	4619      	mov	r1, r3
34001f38:	6878      	ldr	r0, [r7, #4]
34001f3a:	f014 fe91 	bl	34016c60 <HAL_XSPI_Command>
34001f3e:	4603      	mov	r3, r0
34001f40:	2b00      	cmp	r3, #0
34001f42:	d002      	beq.n	34001f4a <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
34001f44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001f48:	e00e      	b.n	34001f68 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001f4a:	2300      	movs	r3, #0
34001f4c:	60fb      	str	r3, [r7, #12]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001f4e:	f107 030c 	add.w	r3, r7, #12
34001f52:	4619      	mov	r1, r3
34001f54:	6878      	ldr	r0, [r7, #4]
34001f56:	f015 fa75 	bl	34017444 <HAL_XSPI_MemoryMapped>
34001f5a:	4603      	mov	r3, r0
34001f5c:	2b00      	cmp	r3, #0
34001f5e:	d002      	beq.n	34001f66 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
34001f60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001f64:	e000      	b.n	34001f68 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
34001f66:	2300      	movs	r3, #0
}
34001f68:	4618      	mov	r0, r3
34001f6a:	3768      	adds	r7, #104	@ 0x68
34001f6c:	46bd      	mov	sp, r7
34001f6e:	bd80      	pop	{r7, pc}

34001f70 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001f70:	b580      	push	{r7, lr}
34001f72:	b09a      	sub	sp, #104	@ 0x68
34001f74:	af00      	add	r7, sp, #0
34001f76:	6078      	str	r0, [r7, #4]
34001f78:	460b      	mov	r3, r1
34001f7a:	70fb      	strb	r3, [r7, #3]
34001f7c:	4613      	mov	r3, r2
34001f7e:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
34001f80:	f107 031c 	add.w	r3, r7, #28
34001f84:	224c      	movs	r2, #76	@ 0x4c
34001f86:	2100      	movs	r1, #0
34001f88:	4618      	mov	r0, r3
34001f8a:	f018 fcc5 	bl	3401a918 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001f8e:	f107 0308 	add.w	r3, r7, #8
34001f92:	2200      	movs	r2, #0
34001f94:	601a      	str	r2, [r3, #0]
34001f96:	605a      	str	r2, [r3, #4]
34001f98:	609a      	str	r2, [r3, #8]
34001f9a:	60da      	str	r2, [r3, #12]
34001f9c:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001f9e:	78fb      	ldrb	r3, [r7, #3]
34001fa0:	2b00      	cmp	r3, #0
34001fa2:	d105      	bne.n	34001fb0 <MX25UM51245G_WriteEnable+0x40>
34001fa4:	78bb      	ldrb	r3, [r7, #2]
34001fa6:	2b01      	cmp	r3, #1
34001fa8:	d102      	bne.n	34001fb0 <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
34001faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001fae:	e0a9      	b.n	34002104 <MX25UM51245G_WriteEnable+0x194>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001fb0:	2300      	movs	r3, #0
34001fb2:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001fb4:	2300      	movs	r3, #0
34001fb6:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001fb8:	78fb      	ldrb	r3, [r7, #3]
34001fba:	2b00      	cmp	r3, #0
34001fbc:	d101      	bne.n	34001fc2 <MX25UM51245G_WriteEnable+0x52>
34001fbe:	2301      	movs	r3, #1
34001fc0:	e000      	b.n	34001fc4 <MX25UM51245G_WriteEnable+0x54>
34001fc2:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001fc6:	78bb      	ldrb	r3, [r7, #2]
34001fc8:	2b01      	cmp	r3, #1
34001fca:	d101      	bne.n	34001fd0 <MX25UM51245G_WriteEnable+0x60>
34001fcc:	2308      	movs	r3, #8
34001fce:	e000      	b.n	34001fd2 <MX25UM51245G_WriteEnable+0x62>
34001fd0:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001fd4:	78fb      	ldrb	r3, [r7, #3]
34001fd6:	2b00      	cmp	r3, #0
34001fd8:	d101      	bne.n	34001fde <MX25UM51245G_WriteEnable+0x6e>
34001fda:	2300      	movs	r3, #0
34001fdc:	e000      	b.n	34001fe0 <MX25UM51245G_WriteEnable+0x70>
34001fde:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001fe2:	78fb      	ldrb	r3, [r7, #3]
34001fe4:	2b00      	cmp	r3, #0
34001fe6:	d101      	bne.n	34001fec <MX25UM51245G_WriteEnable+0x7c>
34001fe8:	2306      	movs	r3, #6
34001fea:	e001      	b.n	34001ff0 <MX25UM51245G_WriteEnable+0x80>
34001fec:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
34001ff2:	2300      	movs	r3, #0
34001ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001ff6:	2300      	movs	r3, #0
34001ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
34001ffa:	2300      	movs	r3, #0
34001ffc:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = 0U;
34001ffe:	2300      	movs	r3, #0
34002000:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34002002:	2300      	movs	r3, #0
34002004:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002006:	f107 031c 	add.w	r3, r7, #28
3400200a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400200e:	4619      	mov	r1, r3
34002010:	6878      	ldr	r0, [r7, #4]
34002012:	f014 fe25 	bl	34016c60 <HAL_XSPI_Command>
34002016:	4603      	mov	r3, r0
34002018:	2b00      	cmp	r3, #0
3400201a:	d002      	beq.n	34002022 <MX25UM51245G_WriteEnable+0xb2>
  {
    return MX25UM51245G_ERROR;
3400201c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002020:	e070      	b.n	34002104 <MX25UM51245G_WriteEnable+0x194>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34002022:	78fb      	ldrb	r3, [r7, #3]
34002024:	2b00      	cmp	r3, #0
34002026:	d101      	bne.n	3400202c <MX25UM51245G_WriteEnable+0xbc>
34002028:	2305      	movs	r3, #5
3400202a:	e001      	b.n	34002030 <MX25UM51245G_WriteEnable+0xc0>
3400202c:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
34002030:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34002032:	78fb      	ldrb	r3, [r7, #3]
34002034:	2b00      	cmp	r3, #0
34002036:	d101      	bne.n	3400203c <MX25UM51245G_WriteEnable+0xcc>
34002038:	2300      	movs	r3, #0
3400203a:	e001      	b.n	34002040 <MX25UM51245G_WriteEnable+0xd0>
3400203c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34002040:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
34002042:	78bb      	ldrb	r3, [r7, #2]
34002044:	2b01      	cmp	r3, #1
34002046:	d102      	bne.n	3400204e <MX25UM51245G_WriteEnable+0xde>
34002048:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400204c:	e000      	b.n	34002050 <MX25UM51245G_WriteEnable+0xe0>
3400204e:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34002050:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
34002052:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.Address        = 0U;
34002058:	2300      	movs	r3, #0
3400205a:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400205c:	78fb      	ldrb	r3, [r7, #3]
3400205e:	2b00      	cmp	r3, #0
34002060:	d102      	bne.n	34002068 <MX25UM51245G_WriteEnable+0xf8>
34002062:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34002066:	e001      	b.n	3400206c <MX25UM51245G_WriteEnable+0xfc>
34002068:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3400206c:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400206e:	78bb      	ldrb	r3, [r7, #2]
34002070:	2b01      	cmp	r3, #1
34002072:	d102      	bne.n	3400207a <MX25UM51245G_WriteEnable+0x10a>
34002074:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34002078:	e000      	b.n	3400207c <MX25UM51245G_WriteEnable+0x10c>
3400207a:	2300      	movs	r3, #0
3400207c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
3400207e:	78fb      	ldrb	r3, [r7, #3]
34002080:	2b00      	cmp	r3, #0
34002082:	d006      	beq.n	34002092 <MX25UM51245G_WriteEnable+0x122>
34002084:	78bb      	ldrb	r3, [r7, #2]
34002086:	2b01      	cmp	r3, #1
34002088:	d101      	bne.n	3400208e <MX25UM51245G_WriteEnable+0x11e>
3400208a:	2305      	movs	r3, #5
3400208c:	e002      	b.n	34002094 <MX25UM51245G_WriteEnable+0x124>
3400208e:	2304      	movs	r3, #4
34002090:	e000      	b.n	34002094 <MX25UM51245G_WriteEnable+0x124>
34002092:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
34002094:	663b      	str	r3, [r7, #96]	@ 0x60
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34002096:	78bb      	ldrb	r3, [r7, #2]
34002098:	2b01      	cmp	r3, #1
3400209a:	d101      	bne.n	340020a0 <MX25UM51245G_WriteEnable+0x130>
3400209c:	2302      	movs	r3, #2
3400209e:	e000      	b.n	340020a2 <MX25UM51245G_WriteEnable+0x132>
340020a0:	2301      	movs	r3, #1
340020a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340020a4:	78bb      	ldrb	r3, [r7, #2]
340020a6:	2b01      	cmp	r3, #1
340020a8:	d102      	bne.n	340020b0 <MX25UM51245G_WriteEnable+0x140>
340020aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
340020ae:	e000      	b.n	340020b2 <MX25UM51245G_WriteEnable+0x142>
340020b0:	2300      	movs	r3, #0
340020b2:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340020b4:	f107 031c 	add.w	r3, r7, #28
340020b8:	f241 3288 	movw	r2, #5000	@ 0x1388
340020bc:	4619      	mov	r1, r3
340020be:	6878      	ldr	r0, [r7, #4]
340020c0:	f014 fdce 	bl	34016c60 <HAL_XSPI_Command>
340020c4:	4603      	mov	r3, r0
340020c6:	2b00      	cmp	r3, #0
340020c8:	d002      	beq.n	340020d0 <MX25UM51245G_WriteEnable+0x160>
  {
    return MX25UM51245G_ERROR;
340020ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340020ce:	e019      	b.n	34002104 <MX25UM51245G_WriteEnable+0x194>
  }

  s_config.MatchValue      = 2U;
340020d0:	2302      	movs	r3, #2
340020d2:	60bb      	str	r3, [r7, #8]
  s_config.MatchMask       = 2U;
340020d4:	2302      	movs	r3, #2
340020d6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
340020d8:	2300      	movs	r3, #0
340020da:	613b      	str	r3, [r7, #16]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
340020dc:	2310      	movs	r3, #16
340020de:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
340020e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
340020e4:	617b      	str	r3, [r7, #20]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340020e6:	f107 0308 	add.w	r3, r7, #8
340020ea:	f241 3288 	movw	r2, #5000	@ 0x1388
340020ee:	4619      	mov	r1, r3
340020f0:	6878      	ldr	r0, [r7, #4]
340020f2:	f015 f8dd 	bl	340172b0 <HAL_XSPI_AutoPolling>
340020f6:	4603      	mov	r3, r0
340020f8:	2b00      	cmp	r3, #0
340020fa:	d002      	beq.n	34002102 <MX25UM51245G_WriteEnable+0x192>
  {
    return MX25UM51245G_ERROR;
340020fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002100:	e000      	b.n	34002104 <MX25UM51245G_WriteEnable+0x194>
  }

  return MX25UM51245G_OK;
34002102:	2300      	movs	r3, #0
}
34002104:	4618      	mov	r0, r3
34002106:	3768      	adds	r7, #104	@ 0x68
34002108:	46bd      	mov	sp, r7
3400210a:	bd80      	pop	{r7, pc}

3400210c <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
3400210c:	b580      	push	{r7, lr}
3400210e:	b098      	sub	sp, #96	@ 0x60
34002110:	af00      	add	r7, sp, #0
34002112:	60f8      	str	r0, [r7, #12]
34002114:	607b      	str	r3, [r7, #4]
34002116:	460b      	mov	r3, r1
34002118:	72fb      	strb	r3, [r7, #11]
3400211a:	4613      	mov	r3, r2
3400211c:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
3400211e:	f107 0314 	add.w	r3, r7, #20
34002122:	224c      	movs	r2, #76	@ 0x4c
34002124:	2100      	movs	r1, #0
34002126:	4618      	mov	r0, r3
34002128:	f018 fbf6 	bl	3401a918 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400212c:	7afb      	ldrb	r3, [r7, #11]
3400212e:	2b00      	cmp	r3, #0
34002130:	d105      	bne.n	3400213e <MX25UM51245G_WriteCfg2Register+0x32>
34002132:	7abb      	ldrb	r3, [r7, #10]
34002134:	2b01      	cmp	r3, #1
34002136:	d102      	bne.n	3400213e <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
34002138:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400213c:	e075      	b.n	3400222a <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
3400213e:	2300      	movs	r3, #0
34002140:	617b      	str	r3, [r7, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34002142:	2300      	movs	r3, #0
34002144:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34002146:	7afb      	ldrb	r3, [r7, #11]
34002148:	2b00      	cmp	r3, #0
3400214a:	d101      	bne.n	34002150 <MX25UM51245G_WriteCfg2Register+0x44>
3400214c:	2301      	movs	r3, #1
3400214e:	e000      	b.n	34002152 <MX25UM51245G_WriteCfg2Register+0x46>
34002150:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34002152:	623b      	str	r3, [r7, #32]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34002154:	7abb      	ldrb	r3, [r7, #10]
34002156:	2b01      	cmp	r3, #1
34002158:	d101      	bne.n	3400215e <MX25UM51245G_WriteCfg2Register+0x52>
3400215a:	2308      	movs	r3, #8
3400215c:	e000      	b.n	34002160 <MX25UM51245G_WriteCfg2Register+0x54>
3400215e:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34002160:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34002162:	7afb      	ldrb	r3, [r7, #11]
34002164:	2b00      	cmp	r3, #0
34002166:	d101      	bne.n	3400216c <MX25UM51245G_WriteCfg2Register+0x60>
34002168:	2300      	movs	r3, #0
3400216a:	e000      	b.n	3400216e <MX25UM51245G_WriteCfg2Register+0x62>
3400216c:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400216e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
34002170:	7afb      	ldrb	r3, [r7, #11]
34002172:	2b00      	cmp	r3, #0
34002174:	d101      	bne.n	3400217a <MX25UM51245G_WriteCfg2Register+0x6e>
34002176:	2372      	movs	r3, #114	@ 0x72
34002178:	e001      	b.n	3400217e <MX25UM51245G_WriteCfg2Register+0x72>
3400217a:	f247 238d 	movw	r3, #29325	@ 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400217e:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34002180:	7afb      	ldrb	r3, [r7, #11]
34002182:	2b00      	cmp	r3, #0
34002184:	d102      	bne.n	3400218c <MX25UM51245G_WriteCfg2Register+0x80>
34002186:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400218a:	e001      	b.n	34002190 <MX25UM51245G_WriteCfg2Register+0x84>
3400218c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34002190:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34002192:	7abb      	ldrb	r3, [r7, #10]
34002194:	2b01      	cmp	r3, #1
34002196:	d102      	bne.n	3400219e <MX25UM51245G_WriteCfg2Register+0x92>
34002198:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400219c:	e000      	b.n	340021a0 <MX25UM51245G_WriteCfg2Register+0x94>
3400219e:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
340021a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340021a2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340021a6:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.Address            = WriteAddr;
340021a8:	687b      	ldr	r3, [r7, #4]
340021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
340021ac:	2300      	movs	r3, #0
340021ae:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340021b0:	7afb      	ldrb	r3, [r7, #11]
340021b2:	2b00      	cmp	r3, #0
340021b4:	d102      	bne.n	340021bc <MX25UM51245G_WriteCfg2Register+0xb0>
340021b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
340021ba:	e001      	b.n	340021c0 <MX25UM51245G_WriteCfg2Register+0xb4>
340021bc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
340021c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
340021c2:	7abb      	ldrb	r3, [r7, #10]
340021c4:	2b01      	cmp	r3, #1
340021c6:	d102      	bne.n	340021ce <MX25UM51245G_WriteCfg2Register+0xc2>
340021c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
340021cc:	e000      	b.n	340021d0 <MX25UM51245G_WriteCfg2Register+0xc4>
340021ce:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
340021d0:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = 0U;
340021d2:	2300      	movs	r3, #0
340021d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
340021d6:	7afb      	ldrb	r3, [r7, #11]
340021d8:	2b00      	cmp	r3, #0
340021da:	d006      	beq.n	340021ea <MX25UM51245G_WriteCfg2Register+0xde>
340021dc:	7abb      	ldrb	r3, [r7, #10]
340021de:	2b01      	cmp	r3, #1
340021e0:	d101      	bne.n	340021e6 <MX25UM51245G_WriteCfg2Register+0xda>
340021e2:	2302      	movs	r3, #2
340021e4:	e002      	b.n	340021ec <MX25UM51245G_WriteCfg2Register+0xe0>
340021e6:	2301      	movs	r3, #1
340021e8:	e000      	b.n	340021ec <MX25UM51245G_WriteCfg2Register+0xe0>
340021ea:	2301      	movs	r3, #1
340021ec:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
340021ee:	2300      	movs	r3, #0
340021f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340021f2:	f107 0314 	add.w	r3, r7, #20
340021f6:	f241 3288 	movw	r2, #5000	@ 0x1388
340021fa:	4619      	mov	r1, r3
340021fc:	68f8      	ldr	r0, [r7, #12]
340021fe:	f014 fd2f 	bl	34016c60 <HAL_XSPI_Command>
34002202:	4603      	mov	r3, r0
34002204:	2b00      	cmp	r3, #0
34002206:	d002      	beq.n	3400220e <MX25UM51245G_WriteCfg2Register+0x102>
  {
    return MX25UM51245G_ERROR;
34002208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400220c:	e00d      	b.n	3400222a <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400220e:	f241 3288 	movw	r2, #5000	@ 0x1388
34002212:	f107 0168 	add.w	r1, r7, #104	@ 0x68
34002216:	68f8      	ldr	r0, [r7, #12]
34002218:	f014 ff34 	bl	34017084 <HAL_XSPI_Transmit>
3400221c:	4603      	mov	r3, r0
3400221e:	2b00      	cmp	r3, #0
34002220:	d002      	beq.n	34002228 <MX25UM51245G_WriteCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
34002222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002226:	e000      	b.n	3400222a <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  return MX25UM51245G_OK;
34002228:	2300      	movs	r3, #0
}
3400222a:	4618      	mov	r0, r3
3400222c:	3760      	adds	r7, #96	@ 0x60
3400222e:	46bd      	mov	sp, r7
34002230:	bd80      	pop	{r7, pc}

34002232 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
34002232:	b580      	push	{r7, lr}
34002234:	b098      	sub	sp, #96	@ 0x60
34002236:	af00      	add	r7, sp, #0
34002238:	60f8      	str	r0, [r7, #12]
3400223a:	607b      	str	r3, [r7, #4]
3400223c:	460b      	mov	r3, r1
3400223e:	72fb      	strb	r3, [r7, #11]
34002240:	4613      	mov	r3, r2
34002242:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
34002244:	f107 0314 	add.w	r3, r7, #20
34002248:	224c      	movs	r2, #76	@ 0x4c
3400224a:	2100      	movs	r1, #0
3400224c:	4618      	mov	r0, r3
3400224e:	f018 fb63 	bl	3401a918 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34002252:	7afb      	ldrb	r3, [r7, #11]
34002254:	2b00      	cmp	r3, #0
34002256:	d105      	bne.n	34002264 <MX25UM51245G_ReadCfg2Register+0x32>
34002258:	7abb      	ldrb	r3, [r7, #10]
3400225a:	2b01      	cmp	r3, #1
3400225c:	d102      	bne.n	34002264 <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
3400225e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002262:	e07f      	b.n	34002364 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34002264:	2300      	movs	r3, #0
34002266:	617b      	str	r3, [r7, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34002268:	2300      	movs	r3, #0
3400226a:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400226c:	7afb      	ldrb	r3, [r7, #11]
3400226e:	2b00      	cmp	r3, #0
34002270:	d101      	bne.n	34002276 <MX25UM51245G_ReadCfg2Register+0x44>
34002272:	2301      	movs	r3, #1
34002274:	e000      	b.n	34002278 <MX25UM51245G_ReadCfg2Register+0x46>
34002276:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34002278:	623b      	str	r3, [r7, #32]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400227a:	7abb      	ldrb	r3, [r7, #10]
3400227c:	2b01      	cmp	r3, #1
3400227e:	d101      	bne.n	34002284 <MX25UM51245G_ReadCfg2Register+0x52>
34002280:	2308      	movs	r3, #8
34002282:	e000      	b.n	34002286 <MX25UM51245G_ReadCfg2Register+0x54>
34002284:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34002286:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34002288:	7afb      	ldrb	r3, [r7, #11]
3400228a:	2b00      	cmp	r3, #0
3400228c:	d101      	bne.n	34002292 <MX25UM51245G_ReadCfg2Register+0x60>
3400228e:	2300      	movs	r3, #0
34002290:	e000      	b.n	34002294 <MX25UM51245G_ReadCfg2Register+0x62>
34002292:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34002294:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
34002296:	7afb      	ldrb	r3, [r7, #11]
34002298:	2b00      	cmp	r3, #0
3400229a:	d101      	bne.n	340022a0 <MX25UM51245G_ReadCfg2Register+0x6e>
3400229c:	2371      	movs	r3, #113	@ 0x71
3400229e:	e001      	b.n	340022a4 <MX25UM51245G_ReadCfg2Register+0x72>
340022a0:	f247 138e 	movw	r3, #29070	@ 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340022a4:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340022a6:	7afb      	ldrb	r3, [r7, #11]
340022a8:	2b00      	cmp	r3, #0
340022aa:	d102      	bne.n	340022b2 <MX25UM51245G_ReadCfg2Register+0x80>
340022ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
340022b0:	e001      	b.n	340022b6 <MX25UM51245G_ReadCfg2Register+0x84>
340022b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340022b6:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
340022b8:	7abb      	ldrb	r3, [r7, #10]
340022ba:	2b01      	cmp	r3, #1
340022bc:	d102      	bne.n	340022c4 <MX25UM51245G_ReadCfg2Register+0x92>
340022be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
340022c2:	e000      	b.n	340022c6 <MX25UM51245G_ReadCfg2Register+0x94>
340022c4:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
340022c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340022c8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340022cc:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.Address            = ReadAddr;
340022ce:	687b      	ldr	r3, [r7, #4]
340022d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
340022d2:	2300      	movs	r3, #0
340022d4:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340022d6:	7afb      	ldrb	r3, [r7, #11]
340022d8:	2b00      	cmp	r3, #0
340022da:	d102      	bne.n	340022e2 <MX25UM51245G_ReadCfg2Register+0xb0>
340022dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
340022e0:	e001      	b.n	340022e6 <MX25UM51245G_ReadCfg2Register+0xb4>
340022e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
340022e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
340022e8:	7abb      	ldrb	r3, [r7, #10]
340022ea:	2b01      	cmp	r3, #1
340022ec:	d102      	bne.n	340022f4 <MX25UM51245G_ReadCfg2Register+0xc2>
340022ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
340022f2:	e000      	b.n	340022f6 <MX25UM51245G_ReadCfg2Register+0xc4>
340022f4:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
340022f6:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
340022f8:	7afb      	ldrb	r3, [r7, #11]
340022fa:	2b00      	cmp	r3, #0
340022fc:	d006      	beq.n	3400230c <MX25UM51245G_ReadCfg2Register+0xda>
340022fe:	7abb      	ldrb	r3, [r7, #10]
34002300:	2b01      	cmp	r3, #1
34002302:	d101      	bne.n	34002308 <MX25UM51245G_ReadCfg2Register+0xd6>
34002304:	2305      	movs	r3, #5
34002306:	e002      	b.n	3400230e <MX25UM51245G_ReadCfg2Register+0xdc>
34002308:	2304      	movs	r3, #4
3400230a:	e000      	b.n	3400230e <MX25UM51245G_ReadCfg2Register+0xdc>
3400230c:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
3400230e:	65bb      	str	r3, [r7, #88]	@ 0x58
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34002310:	7abb      	ldrb	r3, [r7, #10]
34002312:	2b01      	cmp	r3, #1
34002314:	d101      	bne.n	3400231a <MX25UM51245G_ReadCfg2Register+0xe8>
34002316:	2302      	movs	r3, #2
34002318:	e000      	b.n	3400231c <MX25UM51245G_ReadCfg2Register+0xea>
3400231a:	2301      	movs	r3, #1
3400231c:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400231e:	7abb      	ldrb	r3, [r7, #10]
34002320:	2b01      	cmp	r3, #1
34002322:	d102      	bne.n	3400232a <MX25UM51245G_ReadCfg2Register+0xf8>
34002324:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34002328:	e000      	b.n	3400232c <MX25UM51245G_ReadCfg2Register+0xfa>
3400232a:	2300      	movs	r3, #0
3400232c:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400232e:	f107 0314 	add.w	r3, r7, #20
34002332:	f241 3288 	movw	r2, #5000	@ 0x1388
34002336:	4619      	mov	r1, r3
34002338:	68f8      	ldr	r0, [r7, #12]
3400233a:	f014 fc91 	bl	34016c60 <HAL_XSPI_Command>
3400233e:	4603      	mov	r3, r0
34002340:	2b00      	cmp	r3, #0
34002342:	d002      	beq.n	3400234a <MX25UM51245G_ReadCfg2Register+0x118>
  {
    return MX25UM51245G_ERROR;
34002344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002348:	e00c      	b.n	34002364 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400234a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400234e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
34002350:	68f8      	ldr	r0, [r7, #12]
34002352:	f014 ff0a 	bl	3401716a <HAL_XSPI_Receive>
34002356:	4603      	mov	r3, r0
34002358:	2b00      	cmp	r3, #0
3400235a:	d002      	beq.n	34002362 <MX25UM51245G_ReadCfg2Register+0x130>
  {
    return MX25UM51245G_ERROR;
3400235c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002360:	e000      	b.n	34002364 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  return MX25UM51245G_OK;
34002362:	2300      	movs	r3, #0
}
34002364:	4618      	mov	r0, r3
34002366:	3760      	adds	r7, #96	@ 0x60
34002368:	46bd      	mov	sp, r7
3400236a:	bd80      	pop	{r7, pc}

3400236c <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
3400236c:	b580      	push	{r7, lr}
3400236e:	b096      	sub	sp, #88	@ 0x58
34002370:	af00      	add	r7, sp, #0
34002372:	6078      	str	r0, [r7, #4]
34002374:	460b      	mov	r3, r1
34002376:	70fb      	strb	r3, [r7, #3]
34002378:	4613      	mov	r3, r2
3400237a:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
3400237c:	f107 030c 	add.w	r3, r7, #12
34002380:	224c      	movs	r2, #76	@ 0x4c
34002382:	2100      	movs	r1, #0
34002384:	4618      	mov	r0, r3
34002386:	f018 fac7 	bl	3401a918 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400238a:	78fb      	ldrb	r3, [r7, #3]
3400238c:	2b00      	cmp	r3, #0
3400238e:	d105      	bne.n	3400239c <MX25UM51245G_ResetEnable+0x30>
34002390:	78bb      	ldrb	r3, [r7, #2]
34002392:	2b01      	cmp	r3, #1
34002394:	d102      	bne.n	3400239c <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
34002396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400239a:	e039      	b.n	34002410 <MX25UM51245G_ResetEnable+0xa4>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
3400239c:	2300      	movs	r3, #0
3400239e:	60fb      	str	r3, [r7, #12]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340023a0:	2300      	movs	r3, #0
340023a2:	613b      	str	r3, [r7, #16]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340023a4:	78fb      	ldrb	r3, [r7, #3]
340023a6:	2b00      	cmp	r3, #0
340023a8:	d101      	bne.n	340023ae <MX25UM51245G_ResetEnable+0x42>
340023aa:	2301      	movs	r3, #1
340023ac:	e000      	b.n	340023b0 <MX25UM51245G_ResetEnable+0x44>
340023ae:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340023b0:	61bb      	str	r3, [r7, #24]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340023b2:	78bb      	ldrb	r3, [r7, #2]
340023b4:	2b01      	cmp	r3, #1
340023b6:	d101      	bne.n	340023bc <MX25UM51245G_ResetEnable+0x50>
340023b8:	2308      	movs	r3, #8
340023ba:	e000      	b.n	340023be <MX25UM51245G_ResetEnable+0x52>
340023bc:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340023be:	623b      	str	r3, [r7, #32]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340023c0:	78fb      	ldrb	r3, [r7, #3]
340023c2:	2b00      	cmp	r3, #0
340023c4:	d101      	bne.n	340023ca <MX25UM51245G_ResetEnable+0x5e>
340023c6:	2300      	movs	r3, #0
340023c8:	e000      	b.n	340023cc <MX25UM51245G_ResetEnable+0x60>
340023ca:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340023cc:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
340023ce:	78fb      	ldrb	r3, [r7, #3]
340023d0:	2b00      	cmp	r3, #0
340023d2:	d101      	bne.n	340023d8 <MX25UM51245G_ResetEnable+0x6c>
340023d4:	2366      	movs	r3, #102	@ 0x66
340023d6:	e001      	b.n	340023dc <MX25UM51245G_ResetEnable+0x70>
340023d8:	f246 6399 	movw	r3, #26265	@ 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340023dc:	617b      	str	r3, [r7, #20]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
340023de:	2300      	movs	r3, #0
340023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
340023e2:	2300      	movs	r3, #0
340023e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
340023e6:	2300      	movs	r3, #0
340023e8:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles        = 0U;
340023ea:	2300      	movs	r3, #0
340023ec:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
340023ee:	2300      	movs	r3, #0
340023f0:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340023f2:	f107 030c 	add.w	r3, r7, #12
340023f6:	f241 3288 	movw	r2, #5000	@ 0x1388
340023fa:	4619      	mov	r1, r3
340023fc:	6878      	ldr	r0, [r7, #4]
340023fe:	f014 fc2f 	bl	34016c60 <HAL_XSPI_Command>
34002402:	4603      	mov	r3, r0
34002404:	2b00      	cmp	r3, #0
34002406:	d002      	beq.n	3400240e <MX25UM51245G_ResetEnable+0xa2>
  {
    return MX25UM51245G_ERROR;
34002408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400240c:	e000      	b.n	34002410 <MX25UM51245G_ResetEnable+0xa4>
  }

  return MX25UM51245G_OK;
3400240e:	2300      	movs	r3, #0
}
34002410:	4618      	mov	r0, r3
34002412:	3758      	adds	r7, #88	@ 0x58
34002414:	46bd      	mov	sp, r7
34002416:	bd80      	pop	{r7, pc}

34002418 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34002418:	b580      	push	{r7, lr}
3400241a:	b096      	sub	sp, #88	@ 0x58
3400241c:	af00      	add	r7, sp, #0
3400241e:	6078      	str	r0, [r7, #4]
34002420:	460b      	mov	r3, r1
34002422:	70fb      	strb	r3, [r7, #3]
34002424:	4613      	mov	r3, r2
34002426:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
34002428:	f107 030c 	add.w	r3, r7, #12
3400242c:	224c      	movs	r2, #76	@ 0x4c
3400242e:	2100      	movs	r1, #0
34002430:	4618      	mov	r0, r3
34002432:	f018 fa71 	bl	3401a918 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34002436:	78fb      	ldrb	r3, [r7, #3]
34002438:	2b00      	cmp	r3, #0
3400243a:	d105      	bne.n	34002448 <MX25UM51245G_ResetMemory+0x30>
3400243c:	78bb      	ldrb	r3, [r7, #2]
3400243e:	2b01      	cmp	r3, #1
34002440:	d102      	bne.n	34002448 <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
34002442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002446:	e039      	b.n	340024bc <MX25UM51245G_ResetMemory+0xa4>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34002448:	2300      	movs	r3, #0
3400244a:	60fb      	str	r3, [r7, #12]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
3400244c:	2300      	movs	r3, #0
3400244e:	613b      	str	r3, [r7, #16]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34002450:	78fb      	ldrb	r3, [r7, #3]
34002452:	2b00      	cmp	r3, #0
34002454:	d101      	bne.n	3400245a <MX25UM51245G_ResetMemory+0x42>
34002456:	2301      	movs	r3, #1
34002458:	e000      	b.n	3400245c <MX25UM51245G_ResetMemory+0x44>
3400245a:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400245c:	61bb      	str	r3, [r7, #24]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400245e:	78bb      	ldrb	r3, [r7, #2]
34002460:	2b01      	cmp	r3, #1
34002462:	d101      	bne.n	34002468 <MX25UM51245G_ResetMemory+0x50>
34002464:	2308      	movs	r3, #8
34002466:	e000      	b.n	3400246a <MX25UM51245G_ResetMemory+0x52>
34002468:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400246a:	623b      	str	r3, [r7, #32]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400246c:	78fb      	ldrb	r3, [r7, #3]
3400246e:	2b00      	cmp	r3, #0
34002470:	d101      	bne.n	34002476 <MX25UM51245G_ResetMemory+0x5e>
34002472:	2300      	movs	r3, #0
34002474:	e000      	b.n	34002478 <MX25UM51245G_ResetMemory+0x60>
34002476:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34002478:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
3400247a:	78fb      	ldrb	r3, [r7, #3]
3400247c:	2b00      	cmp	r3, #0
3400247e:	d101      	bne.n	34002484 <MX25UM51245G_ResetMemory+0x6c>
34002480:	2399      	movs	r3, #153	@ 0x99
34002482:	e001      	b.n	34002488 <MX25UM51245G_ResetMemory+0x70>
34002484:	f649 1366 	movw	r3, #39270	@ 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34002488:	617b      	str	r3, [r7, #20]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3400248a:	2300      	movs	r3, #0
3400248c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3400248e:	2300      	movs	r3, #0
34002490:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
34002492:	2300      	movs	r3, #0
34002494:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles        = 0U;
34002496:	2300      	movs	r3, #0
34002498:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3400249a:	2300      	movs	r3, #0
3400249c:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400249e:	f107 030c 	add.w	r3, r7, #12
340024a2:	f241 3288 	movw	r2, #5000	@ 0x1388
340024a6:	4619      	mov	r1, r3
340024a8:	6878      	ldr	r0, [r7, #4]
340024aa:	f014 fbd9 	bl	34016c60 <HAL_XSPI_Command>
340024ae:	4603      	mov	r3, r0
340024b0:	2b00      	cmp	r3, #0
340024b2:	d002      	beq.n	340024ba <MX25UM51245G_ResetMemory+0xa2>
  {
    return MX25UM51245G_ERROR;
340024b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340024b8:	e000      	b.n	340024bc <MX25UM51245G_ResetMemory+0xa4>
  }

  return MX25UM51245G_OK;
340024ba:	2300      	movs	r3, #0
}
340024bc:	4618      	mov	r0, r3
340024be:	3758      	adds	r7, #88	@ 0x58
340024c0:	46bd      	mov	sp, r7
340024c2:	bd80      	pop	{r7, pc}

340024c4 <LL_AHB4_GRP1_EnableClock>:
{
340024c4:	b480      	push	{r7}
340024c6:	b085      	sub	sp, #20
340024c8:	af00      	add	r7, sp, #0
340024ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
340024cc:	4a07      	ldr	r2, [pc, #28]	@ (340024ec <LL_AHB4_GRP1_EnableClock+0x28>)
340024ce:	687b      	ldr	r3, [r7, #4]
340024d0:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
340024d4:	4b05      	ldr	r3, [pc, #20]	@ (340024ec <LL_AHB4_GRP1_EnableClock+0x28>)
340024d6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
340024da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
340024dc:	68fb      	ldr	r3, [r7, #12]
}
340024de:	bf00      	nop
340024e0:	3714      	adds	r7, #20
340024e2:	46bd      	mov	sp, r7
340024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
340024e8:	4770      	bx	lr
340024ea:	bf00      	nop
340024ec:	56028000 	.word	0x56028000

340024f0 <LL_APB2_GRP1_EnableClock>:
{
340024f0:	b480      	push	{r7}
340024f2:	b085      	sub	sp, #20
340024f4:	af00      	add	r7, sp, #0
340024f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB2ENSR, Periphs);
340024f8:	4a07      	ldr	r2, [pc, #28]	@ (34002518 <LL_APB2_GRP1_EnableClock+0x28>)
340024fa:	687b      	ldr	r3, [r7, #4]
340024fc:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
34002500:	4b05      	ldr	r3, [pc, #20]	@ (34002518 <LL_APB2_GRP1_EnableClock+0x28>)
34002502:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34002506:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002508:	68fb      	ldr	r3, [r7, #12]
}
3400250a:	bf00      	nop
3400250c:	3714      	adds	r7, #20
3400250e:	46bd      	mov	sp, r7
34002510:	f85d 7b04 	ldr.w	r7, [sp], #4
34002514:	4770      	bx	lr
34002516:	bf00      	nop
34002518:	56028000 	.word	0x56028000

3400251c <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
3400251c:	b580      	push	{r7, lr}
3400251e:	b088      	sub	sp, #32
34002520:	af00      	add	r7, sp, #0
34002522:	4603      	mov	r3, r0
34002524:	71fb      	strb	r3, [r7, #7]
  SMPS_GPIO_CLK_ENABLE();
34002526:	2002      	movs	r0, #2
34002528:	f7ff ffcc 	bl	340024c4 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
3400252c:	f107 030c 	add.w	r3, r7, #12
34002530:	2200      	movs	r2, #0
34002532:	601a      	str	r2, [r3, #0]
34002534:	605a      	str	r2, [r3, #4]
34002536:	609a      	str	r2, [r3, #8]
34002538:	60da      	str	r2, [r3, #12]
3400253a:	611a      	str	r2, [r3, #16]
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
3400253c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34002540:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34002542:	2301      	movs	r3, #1
34002544:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
34002546:	2300      	movs	r3, #0
34002548:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3400254a:	2303      	movs	r3, #3
3400254c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
3400254e:	f107 030c 	add.w	r3, r7, #12
34002552:	4619      	mov	r1, r3
34002554:	4806      	ldr	r0, [pc, #24]	@ (34002570 <BSP_SMPS_Init+0x54>)
34002556:	f003 f921 	bl	3400579c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
3400255a:	79fb      	ldrb	r3, [r7, #7]
3400255c:	461a      	mov	r2, r3
3400255e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
34002562:	4803      	ldr	r0, [pc, #12]	@ (34002570 <BSP_SMPS_Init+0x54>)
34002564:	f003 fc7a 	bl	34005e5c <HAL_GPIO_WritePin>
}
34002568:	bf00      	nop
3400256a:	3720      	adds	r7, #32
3400256c:	46bd      	mov	sp, r7
3400256e:	bd80      	pop	{r7, pc}
34002570:	56020400 	.word	0x56020400

34002574 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
34002574:	b580      	push	{r7, lr}
34002576:	b088      	sub	sp, #32
34002578:	af00      	add	r7, sp, #0
3400257a:	4603      	mov	r3, r0
3400257c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
3400257e:	2300      	movs	r3, #0
34002580:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
34002582:	79fb      	ldrb	r3, [r7, #7]
34002584:	2b00      	cmp	r3, #0
34002586:	d103      	bne.n	34002590 <BSP_LED_Init+0x1c>
  {
    LED1_GPIO_CLK_ENABLE();
34002588:	2040      	movs	r0, #64	@ 0x40
3400258a:	f7ff ff9b 	bl	340024c4 <LL_AHB4_GRP1_EnableClock>
3400258e:	e009      	b.n	340025a4 <BSP_LED_Init+0x30>
  }
  else if (Led == LED2)
34002590:	79fb      	ldrb	r3, [r7, #7]
34002592:	2b01      	cmp	r3, #1
34002594:	d103      	bne.n	3400259e <BSP_LED_Init+0x2a>
  {
    LED2_GPIO_CLK_ENABLE();
34002596:	2040      	movs	r0, #64	@ 0x40
34002598:	f7ff ff94 	bl	340024c4 <LL_AHB4_GRP1_EnableClock>
3400259c:	e002      	b.n	340025a4 <BSP_LED_Init+0x30>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
3400259e:	2040      	movs	r0, #64	@ 0x40
340025a0:	f7ff ff90 	bl	340024c4 <LL_AHB4_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
340025a4:	79fb      	ldrb	r3, [r7, #7]
340025a6:	4a0e      	ldr	r2, [pc, #56]	@ (340025e0 <BSP_LED_Init+0x6c>)
340025a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
340025ac:	60bb      	str	r3, [r7, #8]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
340025ae:	2301      	movs	r3, #1
340025b0:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Pull  = GPIO_NOPULL;
340025b2:	2300      	movs	r3, #0
340025b4:	613b      	str	r3, [r7, #16]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
340025b6:	2303      	movs	r3, #3
340025b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
340025ba:	79fb      	ldrb	r3, [r7, #7]
340025bc:	4a09      	ldr	r2, [pc, #36]	@ (340025e4 <BSP_LED_Init+0x70>)
340025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
340025c2:	f107 0208 	add.w	r2, r7, #8
340025c6:	4611      	mov	r1, r2
340025c8:	4618      	mov	r0, r3
340025ca:	f003 f8e7 	bl	3400579c <HAL_GPIO_Init>

  /* By default, turn off LED */
  BSP_LED_Off(Led);
340025ce:	79fb      	ldrb	r3, [r7, #7]
340025d0:	4618      	mov	r0, r3
340025d2:	f000 f823 	bl	3400261c <BSP_LED_Off>
  return ret;
340025d6:	69fb      	ldr	r3, [r7, #28]
}
340025d8:	4618      	mov	r0, r3
340025da:	3720      	adds	r7, #32
340025dc:	46bd      	mov	sp, r7
340025de:	bd80      	pop	{r7, pc}
340025e0:	3401f228 	.word	0x3401f228
340025e4:	3401f230 	.word	0x3401f230

340025e8 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
340025e8:	b580      	push	{r7, lr}
340025ea:	b082      	sub	sp, #8
340025ec:	af00      	add	r7, sp, #0
340025ee:	4603      	mov	r3, r0
340025f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
340025f2:	79fb      	ldrb	r3, [r7, #7]
340025f4:	4a07      	ldr	r2, [pc, #28]	@ (34002614 <BSP_LED_On+0x2c>)
340025f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
340025fa:	79fb      	ldrb	r3, [r7, #7]
340025fc:	4a06      	ldr	r2, [pc, #24]	@ (34002618 <BSP_LED_On+0x30>)
340025fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34002602:	2200      	movs	r2, #0
34002604:	4619      	mov	r1, r3
34002606:	f003 fc29 	bl	34005e5c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
3400260a:	2300      	movs	r3, #0
}
3400260c:	4618      	mov	r0, r3
3400260e:	3708      	adds	r7, #8
34002610:	46bd      	mov	sp, r7
34002612:	bd80      	pop	{r7, pc}
34002614:	3401f230 	.word	0x3401f230
34002618:	3401f228 	.word	0x3401f228

3400261c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
3400261c:	b580      	push	{r7, lr}
3400261e:	b082      	sub	sp, #8
34002620:	af00      	add	r7, sp, #0
34002622:	4603      	mov	r3, r0
34002624:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
34002626:	79fb      	ldrb	r3, [r7, #7]
34002628:	4a07      	ldr	r2, [pc, #28]	@ (34002648 <BSP_LED_Off+0x2c>)
3400262a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
3400262e:	79fb      	ldrb	r3, [r7, #7]
34002630:	4a06      	ldr	r2, [pc, #24]	@ (3400264c <BSP_LED_Off+0x30>)
34002632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34002636:	2201      	movs	r2, #1
34002638:	4619      	mov	r1, r3
3400263a:	f003 fc0f 	bl	34005e5c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
3400263e:	2300      	movs	r3, #0
}
34002640:	4618      	mov	r0, r3
34002642:	3708      	adds	r7, #8
34002644:	46bd      	mov	sp, r7
34002646:	bd80      	pop	{r7, pc}
34002648:	3401f230 	.word	0x3401f230
3400264c:	3401f228 	.word	0x3401f228

34002650 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
34002650:	b580      	push	{r7, lr}
34002652:	b082      	sub	sp, #8
34002654:	af00      	add	r7, sp, #0
34002656:	4603      	mov	r3, r0
34002658:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
3400265a:	79fb      	ldrb	r3, [r7, #7]
3400265c:	4a07      	ldr	r2, [pc, #28]	@ (3400267c <BSP_LED_Toggle+0x2c>)
3400265e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
34002662:	79fb      	ldrb	r3, [r7, #7]
34002664:	4906      	ldr	r1, [pc, #24]	@ (34002680 <BSP_LED_Toggle+0x30>)
34002666:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
3400266a:	4619      	mov	r1, r3
3400266c:	4610      	mov	r0, r2
3400266e:	f003 fc21 	bl	34005eb4 <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
34002672:	2300      	movs	r3, #0
}
34002674:	4618      	mov	r0, r3
34002676:	3708      	adds	r7, #8
34002678:	46bd      	mov	sp, r7
3400267a:	bd80      	pop	{r7, pc}
3400267c:	3401f230 	.word	0x3401f230
34002680:	3401f228 	.word	0x3401f228

34002684 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
34002684:	b580      	push	{r7, lr}
34002686:	b084      	sub	sp, #16
34002688:	af00      	add	r7, sp, #0
3400268a:	4603      	mov	r3, r0
3400268c:	6039      	str	r1, [r7, #0]
3400268e:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
34002690:	2300      	movs	r3, #0
34002692:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
34002694:	683b      	ldr	r3, [r7, #0]
34002696:	2b00      	cmp	r3, #0
34002698:	d103      	bne.n	340026a2 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
3400269a:	f06f 0301 	mvn.w	r3, #1
3400269e:	60fb      	str	r3, [r7, #12]
340026a0:	e029      	b.n	340026f6 <BSP_COM_Init+0x72>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
340026a2:	79fa      	ldrb	r2, [r7, #7]
340026a4:	79fb      	ldrb	r3, [r7, #7]
340026a6:	4916      	ldr	r1, [pc, #88]	@ (34002700 <BSP_COM_Init+0x7c>)
340026a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
340026ac:	4915      	ldr	r1, [pc, #84]	@ (34002704 <BSP_COM_Init+0x80>)
340026ae:	2094      	movs	r0, #148	@ 0x94
340026b0:	fb00 f303 	mul.w	r3, r0, r3
340026b4:	440b      	add	r3, r1
340026b6:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
340026b8:	79fb      	ldrb	r3, [r7, #7]
340026ba:	2294      	movs	r2, #148	@ 0x94
340026bc:	fb02 f303 	mul.w	r3, r2, r3
340026c0:	4a10      	ldr	r2, [pc, #64]	@ (34002704 <BSP_COM_Init+0x80>)
340026c2:	4413      	add	r3, r2
340026c4:	4618      	mov	r0, r3
340026c6:	f000 f853 	bl	34002770 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

    if (status == BSP_ERROR_NONE)
340026ca:	68fb      	ldr	r3, [r7, #12]
340026cc:	2b00      	cmp	r3, #0
340026ce:	d112      	bne.n	340026f6 <BSP_COM_Init+0x72>
    {
      if (COM == COM1)
340026d0:	79fb      	ldrb	r3, [r7, #7]
340026d2:	2b00      	cmp	r3, #0
340026d4:	d10f      	bne.n	340026f6 <BSP_COM_Init+0x72>
      {
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
340026d6:	79fb      	ldrb	r3, [r7, #7]
340026d8:	2294      	movs	r2, #148	@ 0x94
340026da:	fb02 f303 	mul.w	r3, r2, r3
340026de:	4a09      	ldr	r2, [pc, #36]	@ (34002704 <BSP_COM_Init+0x80>)
340026e0:	4413      	add	r3, r2
340026e2:	6839      	ldr	r1, [r7, #0]
340026e4:	4618      	mov	r0, r3
340026e6:	f000 f80f 	bl	34002708 <MX_USART1_Init>
340026ea:	4603      	mov	r3, r0
340026ec:	2b00      	cmp	r3, #0
340026ee:	d002      	beq.n	340026f6 <BSP_COM_Init+0x72>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
340026f0:	f06f 0303 	mvn.w	r3, #3
340026f4:	60fb      	str	r3, [r7, #12]
//        }
      }
    }
  }

  return status;
340026f6:	68fb      	ldr	r3, [r7, #12]
}
340026f8:	4618      	mov	r0, r3
340026fa:	3710      	adds	r7, #16
340026fc:	46bd      	mov	sp, r7
340026fe:	bd80      	pop	{r7, pc}
34002700:	3401f220 	.word	0x3401f220
34002704:	3401f43c 	.word	0x3401f43c

34002708 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
34002708:	b580      	push	{r7, lr}
3400270a:	b082      	sub	sp, #8
3400270c:	af00      	add	r7, sp, #0
3400270e:	6078      	str	r0, [r7, #4]
34002710:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
34002712:	4b16      	ldr	r3, [pc, #88]	@ (3400276c <MX_USART1_Init+0x64>)
34002714:	681a      	ldr	r2, [r3, #0]
34002716:	687b      	ldr	r3, [r7, #4]
34002718:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
3400271a:	683b      	ldr	r3, [r7, #0]
3400271c:	681a      	ldr	r2, [r3, #0]
3400271e:	687b      	ldr	r3, [r7, #4]
34002720:	605a      	str	r2, [r3, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
34002722:	687b      	ldr	r3, [r7, #4]
34002724:	220c      	movs	r2, #12
34002726:	615a      	str	r2, [r3, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
34002728:	683b      	ldr	r3, [r7, #0]
3400272a:	895b      	ldrh	r3, [r3, #10]
3400272c:	461a      	mov	r2, r3
3400272e:	687b      	ldr	r3, [r7, #4]
34002730:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
34002732:	683b      	ldr	r3, [r7, #0]
34002734:	685a      	ldr	r2, [r3, #4]
34002736:	687b      	ldr	r3, [r7, #4]
34002738:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
3400273a:	683b      	ldr	r3, [r7, #0]
3400273c:	891b      	ldrh	r3, [r3, #8]
3400273e:	461a      	mov	r2, r3
34002740:	687b      	ldr	r3, [r7, #4]
34002742:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
34002744:	683b      	ldr	r3, [r7, #0]
34002746:	899b      	ldrh	r3, [r3, #12]
34002748:	461a      	mov	r2, r3
3400274a:	687b      	ldr	r3, [r7, #4]
3400274c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
3400274e:	687b      	ldr	r3, [r7, #4]
34002750:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34002754:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
34002756:	687b      	ldr	r3, [r7, #4]
34002758:	2200      	movs	r2, #0
3400275a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
3400275c:	6878      	ldr	r0, [r7, #4]
3400275e:	f012 ff5f 	bl	34015620 <HAL_UART_Init>
34002762:	4603      	mov	r3, r0
}
34002764:	4618      	mov	r0, r3
34002766:	3708      	adds	r7, #8
34002768:	46bd      	mov	sp, r7
3400276a:	bd80      	pop	{r7, pc}
3400276c:	3401f220 	.word	0x3401f220

34002770 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
34002770:	b580      	push	{r7, lr}
34002772:	b090      	sub	sp, #64	@ 0x40
34002774:	af00      	add	r7, sp, #0
34002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT};
34002778:	f107 0320 	add.w	r3, r7, #32
3400277c:	2200      	movs	r2, #0
3400277e:	601a      	str	r2, [r3, #0]
34002780:	605a      	str	r2, [r3, #4]
34002782:	4b34      	ldr	r3, [pc, #208]	@ (34002854 <UART_MspInit+0xe4>)
34002784:	623b      	str	r3, [r7, #32]
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT};
34002786:	f107 0318 	add.w	r3, r7, #24
3400278a:	2200      	movs	r2, #0
3400278c:	601a      	str	r2, [r3, #0]
3400278e:	605a      	str	r2, [r3, #4]
34002790:	4b31      	ldr	r3, [pc, #196]	@ (34002858 <UART_MspInit+0xe8>)
34002792:	61bb      	str	r3, [r7, #24]
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN};
34002794:	2300      	movs	r3, #0
34002796:	617b      	str	r3, [r7, #20]
34002798:	2320      	movs	r3, #32
3400279a:	82bb      	strh	r3, [r7, #20]
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN};
3400279c:	2300      	movs	r3, #0
3400279e:	613b      	str	r3, [r7, #16]
340027a0:	2340      	movs	r3, #64	@ 0x40
340027a2:	823b      	strh	r3, [r7, #16]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
340027a4:	2307      	movs	r3, #7
340027a6:	81bb      	strh	r3, [r7, #12]
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
340027a8:	2307      	movs	r3, #7
340027aa:	813b      	strh	r3, [r7, #8]
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
340027ac:	687b      	ldr	r3, [r7, #4]
340027ae:	681b      	ldr	r3, [r3, #0]
340027b0:	4a2a      	ldr	r2, [pc, #168]	@ (3400285c <UART_MspInit+0xec>)
340027b2:	4293      	cmp	r3, r2
340027b4:	d14a      	bne.n	3400284c <UART_MspInit+0xdc>
  {
    COM = COM1;
340027b6:	2300      	movs	r3, #0
340027b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
340027bc:	2010      	movs	r0, #16
340027be:	f7ff fe81 	bl	340024c4 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
340027c2:	2008      	movs	r0, #8
340027c4:	f7ff fe7e 	bl	340024c4 <LL_AHB4_GRP1_EnableClock>
    COM1_CLK_ENABLE();
340027c8:	2010      	movs	r0, #16
340027ca:	f7ff fe91 	bl	340024f0 <LL_APB2_GRP1_EnableClock>
  {
      return;
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
340027ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
340027d2:	005b      	lsls	r3, r3, #1
340027d4:	3340      	adds	r3, #64	@ 0x40
340027d6:	443b      	add	r3, r7
340027d8:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
340027dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
340027de:	2302      	movs	r3, #2
340027e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
340027e2:	2302      	movs	r3, #2
340027e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_Init.Pull      = GPIO_PULLUP;
340027e6:	2301      	movs	r3, #1
340027e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_Init.Alternate = COM_TX_AF[COM];
340027ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
340027ee:	3340      	adds	r3, #64	@ 0x40
340027f0:	443b      	add	r3, r7
340027f2:	f813 3c34 	ldrb.w	r3, [r3, #-52]
340027f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
340027f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
340027fc:	009b      	lsls	r3, r3, #2
340027fe:	3340      	adds	r3, #64	@ 0x40
34002800:	443b      	add	r3, r7
34002802:	f853 3c20 	ldr.w	r3, [r3, #-32]
34002806:	f107 0228 	add.w	r2, r7, #40	@ 0x28
3400280a:	4611      	mov	r1, r2
3400280c:	4618      	mov	r0, r3
3400280e:	f002 ffc5 	bl	3400579c <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34002812:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002816:	005b      	lsls	r3, r3, #1
34002818:	3340      	adds	r3, #64	@ 0x40
3400281a:	443b      	add	r3, r7
3400281c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
34002820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = COM_RX_AF[COM];
34002822:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002826:	3340      	adds	r3, #64	@ 0x40
34002828:	443b      	add	r3, r7
3400282a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
3400282e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34002830:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002834:	009b      	lsls	r3, r3, #2
34002836:	3340      	adds	r3, #64	@ 0x40
34002838:	443b      	add	r3, r7
3400283a:	f853 3c28 	ldr.w	r3, [r3, #-40]
3400283e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
34002842:	4611      	mov	r1, r2
34002844:	4618      	mov	r0, r3
34002846:	f002 ffa9 	bl	3400579c <HAL_GPIO_Init>
3400284a:	e000      	b.n	3400284e <UART_MspInit+0xde>
      return;
3400284c:	bf00      	nop
}
3400284e:	3740      	adds	r7, #64	@ 0x40
34002850:	46bd      	mov	sp, r7
34002852:	bd80      	pop	{r7, pc}
34002854:	56021000 	.word	0x56021000
34002858:	56020c00 	.word	0x56020c00
3400285c:	52001000 	.word	0x52001000

34002860 <LL_AHB4_GRP1_EnableClock>:
{
34002860:	b480      	push	{r7}
34002862:	b085      	sub	sp, #20
34002864:	af00      	add	r7, sp, #0
34002866:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34002868:	4a07      	ldr	r2, [pc, #28]	@ (34002888 <LL_AHB4_GRP1_EnableClock+0x28>)
3400286a:	687b      	ldr	r3, [r7, #4]
3400286c:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34002870:	4b05      	ldr	r3, [pc, #20]	@ (34002888 <LL_AHB4_GRP1_EnableClock+0x28>)
34002872:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34002876:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002878:	68fb      	ldr	r3, [r7, #12]
}
3400287a:	bf00      	nop
3400287c:	3714      	adds	r7, #20
3400287e:	46bd      	mov	sp, r7
34002880:	f85d 7b04 	ldr.w	r7, [sp], #4
34002884:	4770      	bx	lr
34002886:	bf00      	nop
34002888:	56028000 	.word	0x56028000

3400288c <LL_AHB5_GRP1_EnableClock>:
{
3400288c:	b480      	push	{r7}
3400288e:	b085      	sub	sp, #20
34002890:	af00      	add	r7, sp, #0
34002892:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34002894:	4a07      	ldr	r2, [pc, #28]	@ (340028b4 <LL_AHB5_GRP1_EnableClock+0x28>)
34002896:	687b      	ldr	r3, [r7, #4]
34002898:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400289c:	4b05      	ldr	r3, [pc, #20]	@ (340028b4 <LL_AHB5_GRP1_EnableClock+0x28>)
3400289e:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
340028a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
340028a4:	68fb      	ldr	r3, [r7, #12]
}
340028a6:	bf00      	nop
340028a8:	3714      	adds	r7, #20
340028aa:	46bd      	mov	sp, r7
340028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
340028b0:	4770      	bx	lr
340028b2:	bf00      	nop
340028b4:	56028000 	.word	0x56028000

340028b8 <LL_AHB5_GRP1_ForceReset>:
{
340028b8:	b480      	push	{r7}
340028ba:	b083      	sub	sp, #12
340028bc:	af00      	add	r7, sp, #0
340028be:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
340028c0:	4a04      	ldr	r2, [pc, #16]	@ (340028d4 <LL_AHB5_GRP1_ForceReset+0x1c>)
340028c2:	687b      	ldr	r3, [r7, #4]
340028c4:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
340028c8:	bf00      	nop
340028ca:	370c      	adds	r7, #12
340028cc:	46bd      	mov	sp, r7
340028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
340028d2:	4770      	bx	lr
340028d4:	56028000 	.word	0x56028000

340028d8 <LL_AHB5_GRP1_ReleaseReset>:
{
340028d8:	b480      	push	{r7}
340028da:	b083      	sub	sp, #12
340028dc:	af00      	add	r7, sp, #0
340028de:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340028e0:	4b06      	ldr	r3, [pc, #24]	@ (340028fc <LL_AHB5_GRP1_ReleaseReset+0x24>)
340028e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340028e6:	461a      	mov	r2, r3
340028e8:	687b      	ldr	r3, [r7, #4]
340028ea:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
340028ee:	bf00      	nop
340028f0:	370c      	adds	r7, #12
340028f2:	46bd      	mov	sp, r7
340028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
340028f8:	4770      	bx	lr
340028fa:	bf00      	nop
340028fc:	56028000 	.word	0x56028000

34002900 <BSP_XSPI_NOR_Init>:
  * @param  Instance   XSPI Instance
  * @param  Init       XSPI Init structure
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_Init(uint32_t Instance, BSP_XSPI_NOR_Init_t *Init)
{
34002900:	b590      	push	{r4, r7, lr}
34002902:	b095      	sub	sp, #84	@ 0x54
34002904:	af00      	add	r7, sp, #0
34002906:	6078      	str	r0, [r7, #4]
34002908:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_XSPI_NOR_Info_t pInfo;
  MX_XSPI_InitTypeDef xspi_init;

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400290a:	687b      	ldr	r3, [r7, #4]
3400290c:	2b00      	cmp	r3, #0
3400290e:	d003      	beq.n	34002918 <BSP_XSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002910:	f06f 0301 	mvn.w	r3, #1
34002914:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002916:	e080      	b.n	34002a1a <BSP_XSPI_NOR_Init+0x11a>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34002918:	4947      	ldr	r1, [pc, #284]	@ (34002a38 <BSP_XSPI_NOR_Init+0x138>)
3400291a:	687a      	ldr	r2, [r7, #4]
3400291c:	4613      	mov	r3, r2
3400291e:	005b      	lsls	r3, r3, #1
34002920:	4413      	add	r3, r2
34002922:	440b      	add	r3, r1
34002924:	781b      	ldrb	r3, [r3, #0]
34002926:	2b00      	cmp	r3, #0
34002928:	d175      	bne.n	34002a16 <BSP_XSPI_NOR_Init+0x116>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp XSPI initialization */
      XSPI_NOR_MspInit(&hxspi_nor[Instance]);
3400292a:	687b      	ldr	r3, [r7, #4]
3400292c:	2264      	movs	r2, #100	@ 0x64
3400292e:	fb02 f303 	mul.w	r3, r2, r3
34002932:	4a42      	ldr	r2, [pc, #264]	@ (34002a3c <BSP_XSPI_NOR_Init+0x13c>)
34002934:	4413      	add	r3, r2
34002936:	4618      	mov	r0, r3
34002938:	f000 f9b6 	bl	34002ca8 <XSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
3400293c:	f107 031c 	add.w	r3, r7, #28
34002940:	4618      	mov	r0, r3
34002942:	f7ff f91d 	bl	34001b80 <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      xspi_init.ClockPrescaler = 3;
34002946:	2303      	movs	r3, #3
34002948:	613b      	str	r3, [r7, #16]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
3400294a:	69fb      	ldr	r3, [r7, #28]
3400294c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3400294e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34002950:	fa93 f3a3 	rbit	r3, r3
34002954:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
34002956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34002958:	64bb      	str	r3, [r7, #72]	@ 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
3400295a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3400295c:	2b00      	cmp	r3, #0
3400295e:	d101      	bne.n	34002964 <BSP_XSPI_NOR_Init+0x64>
  {
    return 32U;
34002960:	2320      	movs	r3, #32
34002962:	e003      	b.n	3400296c <BSP_XSPI_NOR_Init+0x6c>
  }
  return __builtin_clz(value);
34002964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34002966:	fab3 f383 	clz	r3, r3
3400296a:	b2db      	uxtb	r3, r3
3400296c:	60fb      	str	r3, [r7, #12]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
3400296e:	2300      	movs	r3, #0
34002970:	617b      	str	r3, [r7, #20]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34002972:	683b      	ldr	r3, [r7, #0]
34002974:	785b      	ldrb	r3, [r3, #1]
34002976:	61bb      	str	r3, [r7, #24]

      /* STM32 XSPI interface initialization */
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34002978:	687b      	ldr	r3, [r7, #4]
3400297a:	2264      	movs	r2, #100	@ 0x64
3400297c:	fb02 f303 	mul.w	r3, r2, r3
34002980:	4a2e      	ldr	r2, [pc, #184]	@ (34002a3c <BSP_XSPI_NOR_Init+0x13c>)
34002982:	4413      	add	r3, r2
34002984:	f107 020c 	add.w	r2, r7, #12
34002988:	4611      	mov	r1, r2
3400298a:	4618      	mov	r0, r3
3400298c:	f000 f858 	bl	34002a40 <MX_XSPI_NOR_Init>
34002990:	4603      	mov	r3, r0
34002992:	2b00      	cmp	r3, #0
34002994:	d003      	beq.n	3400299e <BSP_XSPI_NOR_Init+0x9e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
34002996:	f06f 0303 	mvn.w	r3, #3
3400299a:	64fb      	str	r3, [r7, #76]	@ 0x4c
3400299c:	e03d      	b.n	34002a1a <BSP_XSPI_NOR_Init+0x11a>
      }
      /* XSPI memory reset */
      else if (XSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
3400299e:	6878      	ldr	r0, [r7, #4]
340029a0:	f000 fa50 	bl	34002e44 <XSPI_NOR_ResetMemory>
340029a4:	4603      	mov	r3, r0
340029a6:	2b00      	cmp	r3, #0
340029a8:	d003      	beq.n	340029b2 <BSP_XSPI_NOR_Init+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
340029aa:	f06f 0304 	mvn.w	r3, #4
340029ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
340029b0:	e033      	b.n	34002a1a <BSP_XSPI_NOR_Init+0x11a>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340029b2:	687b      	ldr	r3, [r7, #4]
340029b4:	2264      	movs	r2, #100	@ 0x64
340029b6:	fb02 f303 	mul.w	r3, r2, r3
340029ba:	4a20      	ldr	r2, [pc, #128]	@ (34002a3c <BSP_XSPI_NOR_Init+0x13c>)
340029bc:	1898      	adds	r0, r3, r2
340029be:	491e      	ldr	r1, [pc, #120]	@ (34002a38 <BSP_XSPI_NOR_Init+0x138>)
340029c0:	687a      	ldr	r2, [r7, #4]
340029c2:	4613      	mov	r3, r2
340029c4:	005b      	lsls	r3, r3, #1
340029c6:	4413      	add	r3, r2
340029c8:	440b      	add	r3, r1
340029ca:	3301      	adds	r3, #1
340029cc:	7819      	ldrb	r1, [r3, #0]
340029ce:	4c1a      	ldr	r4, [pc, #104]	@ (34002a38 <BSP_XSPI_NOR_Init+0x138>)
340029d0:	687a      	ldr	r2, [r7, #4]
340029d2:	4613      	mov	r3, r2
340029d4:	005b      	lsls	r3, r3, #1
340029d6:	4413      	add	r3, r2
340029d8:	4423      	add	r3, r4
340029da:	3302      	adds	r3, #2
340029dc:	781b      	ldrb	r3, [r3, #0]
340029de:	461a      	mov	r2, r3
340029e0:	f7ff f8fd 	bl	34001bde <MX25UM51245G_AutoPollingMemReady>
340029e4:	4603      	mov	r3, r0
340029e6:	2b00      	cmp	r3, #0
340029e8:	d003      	beq.n	340029f2 <BSP_XSPI_NOR_Init+0xf2>
                                                Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
340029ea:	f06f 0304 	mvn.w	r3, #4
340029ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
340029f0:	e013      	b.n	34002a1a <BSP_XSPI_NOR_Init+0x11a>
      }
      /* Configure the memory */
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
340029f2:	683b      	ldr	r3, [r7, #0]
340029f4:	7819      	ldrb	r1, [r3, #0]
340029f6:	683b      	ldr	r3, [r7, #0]
340029f8:	785b      	ldrb	r3, [r3, #1]
340029fa:	461a      	mov	r2, r3
340029fc:	6878      	ldr	r0, [r7, #4]
340029fe:	f000 f8c7 	bl	34002b90 <BSP_XSPI_NOR_ConfigFlash>
34002a02:	4603      	mov	r3, r0
34002a04:	2b00      	cmp	r3, #0
34002a06:	d003      	beq.n	34002a10 <BSP_XSPI_NOR_Init+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002a08:	f06f 0304 	mvn.w	r3, #4
34002a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002a0e:	e004      	b.n	34002a1a <BSP_XSPI_NOR_Init+0x11a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
34002a10:	2300      	movs	r3, #0
34002a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002a14:	e001      	b.n	34002a1a <BSP_XSPI_NOR_Init+0x11a>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
34002a16:	2300      	movs	r3, #0
34002a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
34002a1a:	687b      	ldr	r3, [r7, #4]
34002a1c:	2264      	movs	r2, #100	@ 0x64
34002a1e:	fb02 f303 	mul.w	r3, r2, r3
34002a22:	4a06      	ldr	r2, [pc, #24]	@ (34002a3c <BSP_XSPI_NOR_Init+0x13c>)
34002a24:	4413      	add	r3, r2
34002a26:	2100      	movs	r1, #0
34002a28:	4618      	mov	r0, r3
34002a2a:	f014 fdad 	bl	34017588 <HAL_XSPI_SetClockPrescaler>
  /* Return BSP status */
  return ret;
34002a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
34002a30:	4618      	mov	r0, r3
34002a32:	3754      	adds	r7, #84	@ 0x54
34002a34:	46bd      	mov	sp, r7
34002a36:	bd90      	pop	{r4, r7, pc}
34002a38:	3401f5c8 	.word	0x3401f5c8
34002a3c:	3401f564 	.word	0x3401f564

34002a40 <MX_XSPI_NOR_Init>:
  * @param  hxspi          XSPI handle
  * @param  Init           XSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_XSPI_NOR_Init(XSPI_HandleTypeDef *hxspi, MX_XSPI_InitTypeDef *Init)
{
34002a40:	b580      	push	{r7, lr}
34002a42:	b082      	sub	sp, #8
34002a44:	af00      	add	r7, sp, #0
34002a46:	6078      	str	r0, [r7, #4]
34002a48:	6039      	str	r1, [r7, #0]
  /* XSPI initialization */
  hxspi->Instance = XSPI2;
34002a4a:	687b      	ldr	r3, [r7, #4]
34002a4c:	4a1e      	ldr	r2, [pc, #120]	@ (34002ac8 <MX_XSPI_NOR_Init+0x88>)
34002a4e:	601a      	str	r2, [r3, #0]

  hxspi->Init.FifoThresholdByte       = 4;
34002a50:	687b      	ldr	r3, [r7, #4]
34002a52:	2204      	movs	r2, #4
34002a54:	605a      	str	r2, [r3, #4]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34002a56:	687b      	ldr	r3, [r7, #4]
34002a58:	2200      	movs	r2, #0
34002a5a:	609a      	str	r2, [r3, #8]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34002a5c:	683b      	ldr	r3, [r7, #0]
34002a5e:	681a      	ldr	r2, [r3, #0]
34002a60:	687b      	ldr	r3, [r7, #4]
34002a62:	611a      	str	r2, [r3, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
34002a64:	687b      	ldr	r3, [r7, #4]
34002a66:	2202      	movs	r2, #2
34002a68:	615a      	str	r2, [r3, #20]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
34002a6a:	687b      	ldr	r3, [r7, #4]
34002a6c:	2200      	movs	r2, #0
34002a6e:	619a      	str	r2, [r3, #24]
  hxspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
34002a70:	687b      	ldr	r3, [r7, #4]
34002a72:	2200      	movs	r2, #0
34002a74:	61da      	str	r2, [r3, #28]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
34002a76:	687b      	ldr	r3, [r7, #4]
34002a78:	2200      	movs	r2, #0
34002a7a:	621a      	str	r2, [r3, #32]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34002a7c:	683b      	ldr	r3, [r7, #0]
34002a7e:	685a      	ldr	r2, [r3, #4]
34002a80:	687b      	ldr	r3, [r7, #4]
34002a82:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34002a84:	683b      	ldr	r3, [r7, #0]
34002a86:	689a      	ldr	r2, [r3, #8]
34002a88:	687b      	ldr	r3, [r7, #4]
34002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi->Init.ChipSelectBoundary      = 0;
34002a8c:	687b      	ldr	r3, [r7, #4]
34002a8e:	2200      	movs	r2, #0
34002a90:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined (OCTOSPI_DCR1_DLYBYP)
  hxspi->Init.DelayBlockBypass           = HAL_XSPI_DELAY_BLOCK_BYPASS;
#endif /* OCTOSPI_DCR1_DLYBYP */

  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34002a92:	683b      	ldr	r3, [r7, #0]
34002a94:	68db      	ldr	r3, [r3, #12]
34002a96:	2b01      	cmp	r3, #1
34002a98:	d108      	bne.n	34002aac <MX_XSPI_NOR_Init+0x6c>
  {
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34002a9a:	687b      	ldr	r3, [r7, #4]
34002a9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002aa0:	60da      	str	r2, [r3, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34002aa2:	687b      	ldr	r3, [r7, #4]
34002aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
34002aaa:	e005      	b.n	34002ab8 <MX_XSPI_NOR_Init+0x78>
  }
  else
  {
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34002aac:	687b      	ldr	r3, [r7, #4]
34002aae:	2200      	movs	r2, #0
34002ab0:	60da      	str	r2, [r3, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34002ab2:	687b      	ldr	r3, [r7, #4]
34002ab4:	2200      	movs	r2, #0
34002ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_XSPI_Init(hxspi);
34002ab8:	6878      	ldr	r0, [r7, #4]
34002aba:	f013 fdd9 	bl	34016670 <HAL_XSPI_Init>
34002abe:	4603      	mov	r3, r0
}
34002ac0:	4618      	mov	r0, r3
34002ac2:	3708      	adds	r7, #8
34002ac4:	46bd      	mov	sp, r7
34002ac6:	bd80      	pop	{r7, pc}
34002ac8:	5802a000 	.word	0x5802a000

34002acc <BSP_XSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the XSPI in memory-mapped mode
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
34002acc:	b580      	push	{r7, lr}
34002ace:	b084      	sub	sp, #16
34002ad0:	af00      	add	r7, sp, #0
34002ad2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34002ad4:	2300      	movs	r3, #0
34002ad6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002ad8:	687b      	ldr	r3, [r7, #4]
34002ada:	2b00      	cmp	r3, #0
34002adc:	d003      	beq.n	34002ae6 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002ade:	f06f 0301 	mvn.w	r3, #1
34002ae2:	60fb      	str	r3, [r7, #12]
34002ae4:	e04b      	b.n	34002b7e <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
  }
  else
  {
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34002ae6:	4928      	ldr	r1, [pc, #160]	@ (34002b88 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002ae8:	687a      	ldr	r2, [r7, #4]
34002aea:	4613      	mov	r3, r2
34002aec:	005b      	lsls	r3, r3, #1
34002aee:	4413      	add	r3, r2
34002af0:	440b      	add	r3, r1
34002af2:	3302      	adds	r3, #2
34002af4:	781b      	ldrb	r3, [r3, #0]
34002af6:	2b00      	cmp	r3, #0
34002af8:	d121      	bne.n	34002b3e <BSP_XSPI_NOR_EnableMemoryMappedMode+0x72>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002afa:	687b      	ldr	r3, [r7, #4]
34002afc:	2264      	movs	r2, #100	@ 0x64
34002afe:	fb02 f303 	mul.w	r3, r2, r3
34002b02:	4a22      	ldr	r2, [pc, #136]	@ (34002b8c <BSP_XSPI_NOR_EnableMemoryMappedMode+0xc0>)
34002b04:	1898      	adds	r0, r3, r2
34002b06:	4920      	ldr	r1, [pc, #128]	@ (34002b88 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002b08:	687a      	ldr	r2, [r7, #4]
34002b0a:	4613      	mov	r3, r2
34002b0c:	005b      	lsls	r3, r3, #1
34002b0e:	4413      	add	r3, r2
34002b10:	440b      	add	r3, r1
34002b12:	3301      	adds	r3, #1
34002b14:	781b      	ldrb	r3, [r3, #0]
34002b16:	2201      	movs	r2, #1
34002b18:	4619      	mov	r1, r3
34002b1a:	f7ff f910 	bl	34001d3e <MX25UM51245G_EnableSTRMemoryMappedMode>
34002b1e:	4603      	mov	r3, r0
34002b20:	2b00      	cmp	r3, #0
34002b22:	d003      	beq.n	34002b2c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x60>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002b24:	f06f 0304 	mvn.w	r3, #4
34002b28:	60fb      	str	r3, [r7, #12]
34002b2a:	e028      	b.n	34002b7e <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update XSPI context if all operations are well done */
      {
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34002b2c:	4916      	ldr	r1, [pc, #88]	@ (34002b88 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002b2e:	687a      	ldr	r2, [r7, #4]
34002b30:	4613      	mov	r3, r2
34002b32:	005b      	lsls	r3, r3, #1
34002b34:	4413      	add	r3, r2
34002b36:	440b      	add	r3, r1
34002b38:	2202      	movs	r2, #2
34002b3a:	701a      	strb	r2, [r3, #0]
34002b3c:	e01f      	b.n	34002b7e <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
34002b3e:	687b      	ldr	r3, [r7, #4]
34002b40:	2264      	movs	r2, #100	@ 0x64
34002b42:	fb02 f303 	mul.w	r3, r2, r3
34002b46:	4a11      	ldr	r2, [pc, #68]	@ (34002b8c <BSP_XSPI_NOR_EnableMemoryMappedMode+0xc0>)
34002b48:	1898      	adds	r0, r3, r2
34002b4a:	490f      	ldr	r1, [pc, #60]	@ (34002b88 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002b4c:	687a      	ldr	r2, [r7, #4]
34002b4e:	4613      	mov	r3, r2
34002b50:	005b      	lsls	r3, r3, #1
34002b52:	4413      	add	r3, r2
34002b54:	440b      	add	r3, r1
34002b56:	3301      	adds	r3, #1
34002b58:	781b      	ldrb	r3, [r3, #0]
34002b5a:	4619      	mov	r1, r3
34002b5c:	f7ff f999 	bl	34001e92 <MX25UM51245G_EnableDTRMemoryMappedMode>
34002b60:	4603      	mov	r3, r0
34002b62:	2b00      	cmp	r3, #0
34002b64:	d003      	beq.n	34002b6e <BSP_XSPI_NOR_EnableMemoryMappedMode+0xa2>
                                                 Xspi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002b66:	f06f 0304 	mvn.w	r3, #4
34002b6a:	60fb      	str	r3, [r7, #12]
34002b6c:	e007      	b.n	34002b7e <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update XSPI context if all operations are well done */
      {
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34002b6e:	4906      	ldr	r1, [pc, #24]	@ (34002b88 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002b70:	687a      	ldr	r2, [r7, #4]
34002b72:	4613      	mov	r3, r2
34002b74:	005b      	lsls	r3, r3, #1
34002b76:	4413      	add	r3, r2
34002b78:	440b      	add	r3, r1
34002b7a:	2202      	movs	r2, #2
34002b7c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
34002b7e:	68fb      	ldr	r3, [r7, #12]
}
34002b80:	4618      	mov	r0, r3
34002b82:	3710      	adds	r7, #16
34002b84:	46bd      	mov	sp, r7
34002b86:	bd80      	pop	{r7, pc}
34002b88:	3401f5c8 	.word	0x3401f5c8
34002b8c:	3401f564 	.word	0x3401f564

34002b90 <BSP_XSPI_NOR_ConfigFlash>:
  * @param  Mode      XSPI mode
  * @param  Rate      XSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_ConfigFlash(uint32_t Instance, BSP_XSPI_NOR_Interface_t Mode, BSP_XSPI_NOR_Transfer_t Rate)
{
34002b90:	b580      	push	{r7, lr}
34002b92:	b084      	sub	sp, #16
34002b94:	af00      	add	r7, sp, #0
34002b96:	6078      	str	r0, [r7, #4]
34002b98:	460b      	mov	r3, r1
34002b9a:	70fb      	strb	r3, [r7, #3]
34002b9c:	4613      	mov	r3, r2
34002b9e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
34002ba0:	2300      	movs	r3, #0
34002ba2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002ba4:	687b      	ldr	r3, [r7, #4]
34002ba6:	2b00      	cmp	r3, #0
34002ba8:	d003      	beq.n	34002bb2 <BSP_XSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002baa:	f06f 0301 	mvn.w	r3, #1
34002bae:	60fb      	str	r3, [r7, #12]
34002bb0:	e072      	b.n	34002c98 <BSP_XSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
34002bb2:	493c      	ldr	r1, [pc, #240]	@ (34002ca4 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002bb4:	687a      	ldr	r2, [r7, #4]
34002bb6:	4613      	mov	r3, r2
34002bb8:	005b      	lsls	r3, r3, #1
34002bba:	4413      	add	r3, r2
34002bbc:	440b      	add	r3, r1
34002bbe:	781b      	ldrb	r3, [r3, #0]
34002bc0:	2b02      	cmp	r3, #2
34002bc2:	d103      	bne.n	34002bcc <BSP_XSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
34002bc4:	f06f 0319 	mvn.w	r3, #25
34002bc8:	60fb      	str	r3, [r7, #12]
34002bca:	e065      	b.n	34002c98 <BSP_XSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
34002bcc:	4935      	ldr	r1, [pc, #212]	@ (34002ca4 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002bce:	687a      	ldr	r2, [r7, #4]
34002bd0:	4613      	mov	r3, r2
34002bd2:	005b      	lsls	r3, r3, #1
34002bd4:	4413      	add	r3, r2
34002bd6:	440b      	add	r3, r1
34002bd8:	3301      	adds	r3, #1
34002bda:	781b      	ldrb	r3, [r3, #0]
34002bdc:	2b01      	cmp	r3, #1
34002bde:	d12b      	bne.n	34002c38 <BSP_XSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_XSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
34002be0:	78fb      	ldrb	r3, [r7, #3]
34002be2:	2b01      	cmp	r3, #1
34002be4:	d10a      	bne.n	34002bfc <BSP_XSPI_NOR_ConfigFlash+0x6c>
34002be6:	492f      	ldr	r1, [pc, #188]	@ (34002ca4 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002be8:	687a      	ldr	r2, [r7, #4]
34002bea:	4613      	mov	r3, r2
34002bec:	005b      	lsls	r3, r3, #1
34002bee:	4413      	add	r3, r2
34002bf0:	440b      	add	r3, r1
34002bf2:	3302      	adds	r3, #2
34002bf4:	781b      	ldrb	r3, [r3, #0]
34002bf6:	78ba      	ldrb	r2, [r7, #2]
34002bf8:	429a      	cmp	r2, r3
34002bfa:	d02d      	beq.n	34002c58 <BSP_XSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = XSPI_NOR_ExitOPIMode(Instance);
34002bfc:	6878      	ldr	r0, [r7, #4]
34002bfe:	f000 fb7d 	bl	340032fc <XSPI_NOR_ExitOPIMode>
34002c02:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
34002c04:	68fb      	ldr	r3, [r7, #12]
34002c06:	2b00      	cmp	r3, #0
34002c08:	d126      	bne.n	34002c58 <BSP_XSPI_NOR_ConfigFlash+0xc8>
34002c0a:	78fb      	ldrb	r3, [r7, #3]
34002c0c:	2b01      	cmp	r3, #1
34002c0e:	d123      	bne.n	34002c58 <BSP_XSPI_NOR_ConfigFlash+0xc8>
            {

              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34002c10:	4924      	ldr	r1, [pc, #144]	@ (34002ca4 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002c12:	687a      	ldr	r2, [r7, #4]
34002c14:	4613      	mov	r3, r2
34002c16:	005b      	lsls	r3, r3, #1
34002c18:	4413      	add	r3, r2
34002c1a:	440b      	add	r3, r1
34002c1c:	3302      	adds	r3, #2
34002c1e:	781b      	ldrb	r3, [r3, #0]
34002c20:	2b00      	cmp	r3, #0
34002c22:	d104      	bne.n	34002c2e <BSP_XSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = XSPI_NOR_EnterDOPIMode(Instance);
34002c24:	6878      	ldr	r0, [r7, #4]
34002c26:	f000 f9ad 	bl	34002f84 <XSPI_NOR_EnterDOPIMode>
34002c2a:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = XSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
34002c2c:	e014      	b.n	34002c58 <BSP_XSPI_NOR_ConfigFlash+0xc8>
                ret = XSPI_NOR_EnterSOPIMode(Instance);
34002c2e:	6878      	ldr	r0, [r7, #4]
34002c30:	f000 fa98 	bl	34003164 <XSPI_NOR_EnterSOPIMode>
34002c34:	60f8      	str	r0, [r7, #12]
          break;
34002c36:	e00f      	b.n	34002c58 <BSP_XSPI_NOR_ConfigFlash+0xc8>

        case BSP_XSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
34002c38:	78fb      	ldrb	r3, [r7, #3]
34002c3a:	2b01      	cmp	r3, #1
34002c3c:	d10e      	bne.n	34002c5c <BSP_XSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
34002c3e:	78bb      	ldrb	r3, [r7, #2]
34002c40:	2b00      	cmp	r3, #0
34002c42:	d104      	bne.n	34002c4e <BSP_XSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34002c44:	6878      	ldr	r0, [r7, #4]
34002c46:	f000 fa8d 	bl	34003164 <XSPI_NOR_EnterSOPIMode>
34002c4a:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = XSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
34002c4c:	e006      	b.n	34002c5c <BSP_XSPI_NOR_ConfigFlash+0xcc>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
34002c4e:	6878      	ldr	r0, [r7, #4]
34002c50:	f000 f998 	bl	34002f84 <XSPI_NOR_EnterDOPIMode>
34002c54:	60f8      	str	r0, [r7, #12]
          break;
34002c56:	e001      	b.n	34002c5c <BSP_XSPI_NOR_ConfigFlash+0xcc>
          break;
34002c58:	bf00      	nop
34002c5a:	e000      	b.n	34002c5e <BSP_XSPI_NOR_ConfigFlash+0xce>
          break;
34002c5c:	bf00      	nop
      }

      /* Update XSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
34002c5e:	68fb      	ldr	r3, [r7, #12]
34002c60:	2b00      	cmp	r3, #0
34002c62:	d119      	bne.n	34002c98 <BSP_XSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34002c64:	490f      	ldr	r1, [pc, #60]	@ (34002ca4 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002c66:	687a      	ldr	r2, [r7, #4]
34002c68:	4613      	mov	r3, r2
34002c6a:	005b      	lsls	r3, r3, #1
34002c6c:	4413      	add	r3, r2
34002c6e:	440b      	add	r3, r1
34002c70:	2201      	movs	r2, #1
34002c72:	701a      	strb	r2, [r3, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
34002c74:	490b      	ldr	r1, [pc, #44]	@ (34002ca4 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002c76:	687a      	ldr	r2, [r7, #4]
34002c78:	4613      	mov	r3, r2
34002c7a:	005b      	lsls	r3, r3, #1
34002c7c:	4413      	add	r3, r2
34002c7e:	440b      	add	r3, r1
34002c80:	3301      	adds	r3, #1
34002c82:	78fa      	ldrb	r2, [r7, #3]
34002c84:	701a      	strb	r2, [r3, #0]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34002c86:	4907      	ldr	r1, [pc, #28]	@ (34002ca4 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002c88:	687a      	ldr	r2, [r7, #4]
34002c8a:	4613      	mov	r3, r2
34002c8c:	005b      	lsls	r3, r3, #1
34002c8e:	4413      	add	r3, r2
34002c90:	440b      	add	r3, r1
34002c92:	3302      	adds	r3, #2
34002c94:	78ba      	ldrb	r2, [r7, #2]
34002c96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
34002c98:	68fb      	ldr	r3, [r7, #12]
}
34002c9a:	4618      	mov	r0, r3
34002c9c:	3710      	adds	r7, #16
34002c9e:	46bd      	mov	sp, r7
34002ca0:	bd80      	pop	{r7, pc}
34002ca2:	bf00      	nop
34002ca4:	3401f5c8 	.word	0x3401f5c8

34002ca8 <XSPI_NOR_MspInit>:
  * @brief  Initializes the XSPI MSP.
  * @param  hxspi XSPI handle
  * @retval None
  */
static void XSPI_NOR_MspInit(XSPI_HandleTypeDef *hxspi)
{
34002ca8:	b580      	push	{r7, lr}
34002caa:	b088      	sub	sp, #32
34002cac:	af00      	add	r7, sp, #0
34002cae:	6078      	str	r0, [r7, #4]

  /* hxspi unused argument(s) compilation warning */
  UNUSED(hxspi);

  /* Enable the XSPI memory interface clock */
  XSPI_CLK_ENABLE();
34002cb0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002cb4:	f7ff fdea 	bl	3400288c <LL_AHB5_GRP1_EnableClock>

  /* XSPI power enable */
  __HAL_RCC_PWR_CLK_ENABLE();
34002cb8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34002cbc:	f7ff fdd0 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
34002cc0:	f003 f98a 	bl	34005fd8 <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34002cc4:	2101      	movs	r1, #1
34002cc6:	2002      	movs	r0, #2
34002cc8:	f003 f916 	bl	34005ef8 <HAL_PWREx_ConfigVddIORange>

  /* Reset the XSPI memory interface */
  XSPI_FORCE_RESET();
34002ccc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002cd0:	f7ff fdf2 	bl	340028b8 <LL_AHB5_GRP1_ForceReset>
  XSPI_RELEASE_RESET();
34002cd4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002cd8:	f7ff fdfe 	bl	340028d8 <LL_AHB5_GRP1_ReleaseReset>

  /* Enable GPIO clocks */
  XSPI_CLK_GPIO_CLK_ENABLE();
34002cdc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002ce0:	f7ff fdbe 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  XSPI_DQS_GPIO_CLK_ENABLE();
34002ce4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002ce8:	f7ff fdba 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  XSPI_CS_GPIO_CLK_ENABLE();
34002cec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002cf0:	f7ff fdb6 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
34002cf4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002cf8:	f7ff fdb2 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
34002cfc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002d00:	f7ff fdae 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
34002d04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002d08:	f7ff fdaa 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
34002d0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002d10:	f7ff fda6 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
34002d14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002d18:	f7ff fda2 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
34002d1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002d20:	f7ff fd9e 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
34002d24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002d28:	f7ff fd9a 	bl	34002860 <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34002d2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002d30:	f7ff fd96 	bl	34002860 <LL_AHB4_GRP1_EnableClock>

  /* XSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
34002d34:	2302      	movs	r3, #2
34002d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34002d38:	2302      	movs	r3, #2
34002d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
34002d3c:	2301      	movs	r3, #1
34002d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34002d40:	2303      	movs	r3, #3
34002d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34002d44:	2309      	movs	r3, #9
34002d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34002d48:	f107 030c 	add.w	r3, r7, #12
34002d4c:	4619      	mov	r1, r3
34002d4e:	483c      	ldr	r0, [pc, #240]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002d50:	f002 fd24 	bl	3400579c <HAL_GPIO_Init>

  /* XSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34002d54:	2340      	movs	r3, #64	@ 0x40
34002d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34002d58:	2300      	movs	r3, #0
34002d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
34002d5c:	2309      	movs	r3, #9
34002d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34002d60:	f107 030c 	add.w	r3, r7, #12
34002d64:	4619      	mov	r1, r3
34002d66:	4836      	ldr	r0, [pc, #216]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002d68:	f002 fd18 	bl	3400579c <HAL_GPIO_Init>

  /* XSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34002d6c:	2304      	movs	r3, #4
34002d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
34002d70:	2309      	movs	r3, #9
34002d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34002d74:	f107 030c 	add.w	r3, r7, #12
34002d78:	4619      	mov	r1, r3
34002d7a:	4831      	ldr	r0, [pc, #196]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002d7c:	f002 fd0e 	bl	3400579c <HAL_GPIO_Init>

  /* XSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34002d80:	2308      	movs	r3, #8
34002d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
34002d84:	2309      	movs	r3, #9
34002d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34002d88:	f107 030c 	add.w	r3, r7, #12
34002d8c:	4619      	mov	r1, r3
34002d8e:	482c      	ldr	r0, [pc, #176]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002d90:	f002 fd04 	bl	3400579c <HAL_GPIO_Init>

  /* XSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34002d94:	2310      	movs	r3, #16
34002d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
34002d98:	2309      	movs	r3, #9
34002d9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34002d9c:	f107 030c 	add.w	r3, r7, #12
34002da0:	4619      	mov	r1, r3
34002da2:	4827      	ldr	r0, [pc, #156]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002da4:	f002 fcfa 	bl	3400579c <HAL_GPIO_Init>

  /* XSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34002da8:	2320      	movs	r3, #32
34002daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
34002dac:	2309      	movs	r3, #9
34002dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34002db0:	f107 030c 	add.w	r3, r7, #12
34002db4:	4619      	mov	r1, r3
34002db6:	4822      	ldr	r0, [pc, #136]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002db8:	f002 fcf0 	bl	3400579c <HAL_GPIO_Init>

  /* XSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34002dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
34002dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
34002dc2:	2309      	movs	r3, #9
34002dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34002dc6:	f107 030c 	add.w	r3, r7, #12
34002dca:	4619      	mov	r1, r3
34002dcc:	481c      	ldr	r0, [pc, #112]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002dce:	f002 fce5 	bl	3400579c <HAL_GPIO_Init>

  /* XSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34002dd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
34002dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
34002dd8:	2309      	movs	r3, #9
34002dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34002ddc:	f107 030c 	add.w	r3, r7, #12
34002de0:	4619      	mov	r1, r3
34002de2:	4817      	ldr	r0, [pc, #92]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002de4:	f002 fcda 	bl	3400579c <HAL_GPIO_Init>

  /* XSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34002de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34002dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
34002dee:	2309      	movs	r3, #9
34002df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34002df2:	f107 030c 	add.w	r3, r7, #12
34002df6:	4619      	mov	r1, r3
34002df8:	4811      	ldr	r0, [pc, #68]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002dfa:	f002 fccf 	bl	3400579c <HAL_GPIO_Init>

  /* XSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34002dfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34002e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
34002e04:	2309      	movs	r3, #9
34002e06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34002e08:	f107 030c 	add.w	r3, r7, #12
34002e0c:	4619      	mov	r1, r3
34002e0e:	480c      	ldr	r0, [pc, #48]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002e10:	f002 fcc4 	bl	3400579c <HAL_GPIO_Init>

  /* XSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
34002e14:	2301      	movs	r3, #1
34002e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
34002e18:	2309      	movs	r3, #9
34002e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34002e1c:	f107 030c 	add.w	r3, r7, #12
34002e20:	4619      	mov	r1, r3
34002e22:	4807      	ldr	r0, [pc, #28]	@ (34002e40 <XSPI_NOR_MspInit+0x198>)
34002e24:	f002 fcba 	bl	3400579c <HAL_GPIO_Init>

  /* Configure the NVIC for XSPI */
  /* NVIC configuration for XSPI interrupt */
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
34002e28:	2200      	movs	r2, #0
34002e2a:	210f      	movs	r1, #15
34002e2c:	20aa      	movs	r0, #170	@ 0xaa
34002e2e:	f001 f92b 	bl	34004088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
34002e32:	20aa      	movs	r0, #170	@ 0xaa
34002e34:	f001 f982 	bl	3400413c <HAL_NVIC_EnableIRQ>
}
34002e38:	bf00      	nop
34002e3a:	3720      	adds	r7, #32
34002e3c:	46bd      	mov	sp, r7
34002e3e:	bd80      	pop	{r7, pc}
34002e40:	56023400 	.word	0x56023400

34002e44 <XSPI_NOR_ResetMemory>:
  * @brief  This function reset the XSPI memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_ResetMemory(uint32_t Instance)
{
34002e44:	b580      	push	{r7, lr}
34002e46:	b084      	sub	sp, #16
34002e48:	af00      	add	r7, sp, #0
34002e4a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34002e4c:	2300      	movs	r3, #0
34002e4e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002e50:	687b      	ldr	r3, [r7, #4]
34002e52:	2b00      	cmp	r3, #0
34002e54:	d003      	beq.n	34002e5e <XSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002e56:	f06f 0301 	mvn.w	r3, #1
34002e5a:	60fb      	str	r3, [r7, #12]
34002e5c:	e088      	b.n	34002f70 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34002e5e:	687b      	ldr	r3, [r7, #4]
34002e60:	2264      	movs	r2, #100	@ 0x64
34002e62:	fb02 f303 	mul.w	r3, r2, r3
34002e66:	4a45      	ldr	r2, [pc, #276]	@ (34002f7c <XSPI_NOR_ResetMemory+0x138>)
34002e68:	4413      	add	r3, r2
34002e6a:	2200      	movs	r2, #0
34002e6c:	2100      	movs	r1, #0
34002e6e:	4618      	mov	r0, r3
34002e70:	f7ff fa7c 	bl	3400236c <MX25UM51245G_ResetEnable>
34002e74:	4603      	mov	r3, r0
34002e76:	2b00      	cmp	r3, #0
34002e78:	d003      	beq.n	34002e82 <XSPI_NOR_ResetMemory+0x3e>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002e7a:	f06f 0304 	mvn.w	r3, #4
34002e7e:	60fb      	str	r3, [r7, #12]
34002e80:	e076      	b.n	34002f70 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34002e82:	687b      	ldr	r3, [r7, #4]
34002e84:	2264      	movs	r2, #100	@ 0x64
34002e86:	fb02 f303 	mul.w	r3, r2, r3
34002e8a:	4a3c      	ldr	r2, [pc, #240]	@ (34002f7c <XSPI_NOR_ResetMemory+0x138>)
34002e8c:	4413      	add	r3, r2
34002e8e:	2200      	movs	r2, #0
34002e90:	2100      	movs	r1, #0
34002e92:	4618      	mov	r0, r3
34002e94:	f7ff fac0 	bl	34002418 <MX25UM51245G_ResetMemory>
34002e98:	4603      	mov	r3, r0
34002e9a:	2b00      	cmp	r3, #0
34002e9c:	d003      	beq.n	34002ea6 <XSPI_NOR_ResetMemory+0x62>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002e9e:	f06f 0304 	mvn.w	r3, #4
34002ea2:	60fb      	str	r3, [r7, #12]
34002ea4:	e064      	b.n	34002f70 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002ea6:	687b      	ldr	r3, [r7, #4]
34002ea8:	2264      	movs	r2, #100	@ 0x64
34002eaa:	fb02 f303 	mul.w	r3, r2, r3
34002eae:	4a33      	ldr	r2, [pc, #204]	@ (34002f7c <XSPI_NOR_ResetMemory+0x138>)
34002eb0:	4413      	add	r3, r2
34002eb2:	2200      	movs	r2, #0
34002eb4:	2101      	movs	r1, #1
34002eb6:	4618      	mov	r0, r3
34002eb8:	f7ff fa58 	bl	3400236c <MX25UM51245G_ResetEnable>
34002ebc:	4603      	mov	r3, r0
34002ebe:	2b00      	cmp	r3, #0
34002ec0:	d003      	beq.n	34002eca <XSPI_NOR_ResetMemory+0x86>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002ec2:	f06f 0304 	mvn.w	r3, #4
34002ec6:	60fb      	str	r3, [r7, #12]
34002ec8:	e052      	b.n	34002f70 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002eca:	687b      	ldr	r3, [r7, #4]
34002ecc:	2264      	movs	r2, #100	@ 0x64
34002ece:	fb02 f303 	mul.w	r3, r2, r3
34002ed2:	4a2a      	ldr	r2, [pc, #168]	@ (34002f7c <XSPI_NOR_ResetMemory+0x138>)
34002ed4:	4413      	add	r3, r2
34002ed6:	2200      	movs	r2, #0
34002ed8:	2101      	movs	r1, #1
34002eda:	4618      	mov	r0, r3
34002edc:	f7ff fa9c 	bl	34002418 <MX25UM51245G_ResetMemory>
34002ee0:	4603      	mov	r3, r0
34002ee2:	2b00      	cmp	r3, #0
34002ee4:	d003      	beq.n	34002eee <XSPI_NOR_ResetMemory+0xaa>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002ee6:	f06f 0304 	mvn.w	r3, #4
34002eea:	60fb      	str	r3, [r7, #12]
34002eec:	e040      	b.n	34002f70 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002eee:	687b      	ldr	r3, [r7, #4]
34002ef0:	2264      	movs	r2, #100	@ 0x64
34002ef2:	fb02 f303 	mul.w	r3, r2, r3
34002ef6:	4a21      	ldr	r2, [pc, #132]	@ (34002f7c <XSPI_NOR_ResetMemory+0x138>)
34002ef8:	4413      	add	r3, r2
34002efa:	2201      	movs	r2, #1
34002efc:	2101      	movs	r1, #1
34002efe:	4618      	mov	r0, r3
34002f00:	f7ff fa34 	bl	3400236c <MX25UM51245G_ResetEnable>
34002f04:	4603      	mov	r3, r0
34002f06:	2b00      	cmp	r3, #0
34002f08:	d003      	beq.n	34002f12 <XSPI_NOR_ResetMemory+0xce>
                                    BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002f0a:	f06f 0304 	mvn.w	r3, #4
34002f0e:	60fb      	str	r3, [r7, #12]
34002f10:	e02e      	b.n	34002f70 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002f12:	687b      	ldr	r3, [r7, #4]
34002f14:	2264      	movs	r2, #100	@ 0x64
34002f16:	fb02 f303 	mul.w	r3, r2, r3
34002f1a:	4a18      	ldr	r2, [pc, #96]	@ (34002f7c <XSPI_NOR_ResetMemory+0x138>)
34002f1c:	4413      	add	r3, r2
34002f1e:	2201      	movs	r2, #1
34002f20:	2101      	movs	r1, #1
34002f22:	4618      	mov	r0, r3
34002f24:	f7ff fa78 	bl	34002418 <MX25UM51245G_ResetMemory>
34002f28:	4603      	mov	r3, r0
34002f2a:	2b00      	cmp	r3, #0
34002f2c:	d003      	beq.n	34002f36 <XSPI_NOR_ResetMemory+0xf2>
                                    BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002f2e:	f06f 0304 	mvn.w	r3, #4
34002f32:	60fb      	str	r3, [r7, #12]
34002f34:	e01c      	b.n	34002f70 <XSPI_NOR_ResetMemory+0x12c>
  }
  else
  {
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
34002f36:	4912      	ldr	r1, [pc, #72]	@ (34002f80 <XSPI_NOR_ResetMemory+0x13c>)
34002f38:	687a      	ldr	r2, [r7, #4]
34002f3a:	4613      	mov	r3, r2
34002f3c:	005b      	lsls	r3, r3, #1
34002f3e:	4413      	add	r3, r2
34002f40:	440b      	add	r3, r1
34002f42:	2201      	movs	r2, #1
34002f44:	701a      	strb	r2, [r3, #0]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
34002f46:	490e      	ldr	r1, [pc, #56]	@ (34002f80 <XSPI_NOR_ResetMemory+0x13c>)
34002f48:	687a      	ldr	r2, [r7, #4]
34002f4a:	4613      	mov	r3, r2
34002f4c:	005b      	lsls	r3, r3, #1
34002f4e:	4413      	add	r3, r2
34002f50:	440b      	add	r3, r1
34002f52:	3301      	adds	r3, #1
34002f54:	2200      	movs	r2, #0
34002f56:	701a      	strb	r2, [r3, #0]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
34002f58:	4909      	ldr	r1, [pc, #36]	@ (34002f80 <XSPI_NOR_ResetMemory+0x13c>)
34002f5a:	687a      	ldr	r2, [r7, #4]
34002f5c:	4613      	mov	r3, r2
34002f5e:	005b      	lsls	r3, r3, #1
34002f60:	4413      	add	r3, r2
34002f62:	440b      	add	r3, r1
34002f64:	3302      	adds	r3, #2
34002f66:	2200      	movs	r2, #0
34002f68:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34002f6a:	2064      	movs	r0, #100	@ 0x64
34002f6c:	f000 fd96 	bl	34003a9c <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
34002f70:	68fb      	ldr	r3, [r7, #12]
}
34002f72:	4618      	mov	r0, r3
34002f74:	3710      	adds	r7, #16
34002f76:	46bd      	mov	sp, r7
34002f78:	bd80      	pop	{r7, pc}
34002f7a:	bf00      	nop
34002f7c:	3401f564 	.word	0x3401f564
34002f80:	3401f5c8 	.word	0x3401f5c8

34002f84 <XSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
34002f84:	b590      	push	{r4, r7, lr}
34002f86:	b087      	sub	sp, #28
34002f88:	af02      	add	r7, sp, #8
34002f8a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002f8c:	687b      	ldr	r3, [r7, #4]
34002f8e:	2b00      	cmp	r3, #0
34002f90:	d003      	beq.n	34002f9a <XSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002f92:	f06f 0301 	mvn.w	r3, #1
34002f96:	60fb      	str	r3, [r7, #12]
34002f98:	e0db      	b.n	34003152 <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002f9a:	687b      	ldr	r3, [r7, #4]
34002f9c:	2264      	movs	r2, #100	@ 0x64
34002f9e:	fb02 f303 	mul.w	r3, r2, r3
34002fa2:	4a6e      	ldr	r2, [pc, #440]	@ (3400315c <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002fa4:	1898      	adds	r0, r3, r2
34002fa6:	496e      	ldr	r1, [pc, #440]	@ (34003160 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002fa8:	687a      	ldr	r2, [r7, #4]
34002faa:	4613      	mov	r3, r2
34002fac:	005b      	lsls	r3, r3, #1
34002fae:	4413      	add	r3, r2
34002fb0:	440b      	add	r3, r1
34002fb2:	3301      	adds	r3, #1
34002fb4:	7819      	ldrb	r1, [r3, #0]
34002fb6:	4c6a      	ldr	r4, [pc, #424]	@ (34003160 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002fb8:	687a      	ldr	r2, [r7, #4]
34002fba:	4613      	mov	r3, r2
34002fbc:	005b      	lsls	r3, r3, #1
34002fbe:	4413      	add	r3, r2
34002fc0:	4423      	add	r3, r4
34002fc2:	3302      	adds	r3, #2
34002fc4:	781b      	ldrb	r3, [r3, #0]
34002fc6:	461a      	mov	r2, r3
34002fc8:	f7fe ffd2 	bl	34001f70 <MX25UM51245G_WriteEnable>
34002fcc:	4603      	mov	r3, r0
34002fce:	2b00      	cmp	r3, #0
34002fd0:	d003      	beq.n	34002fda <XSPI_NOR_EnterDOPIMode+0x56>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002fd2:	f06f 0304 	mvn.w	r3, #4
34002fd6:	60fb      	str	r3, [r7, #12]
34002fd8:	e0bb      	b.n	34003152 <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002fda:	687b      	ldr	r3, [r7, #4]
34002fdc:	2264      	movs	r2, #100	@ 0x64
34002fde:	fb02 f303 	mul.w	r3, r2, r3
34002fe2:	4a5e      	ldr	r2, [pc, #376]	@ (3400315c <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002fe4:	1898      	adds	r0, r3, r2
34002fe6:	495e      	ldr	r1, [pc, #376]	@ (34003160 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002fe8:	687a      	ldr	r2, [r7, #4]
34002fea:	4613      	mov	r3, r2
34002fec:	005b      	lsls	r3, r3, #1
34002fee:	4413      	add	r3, r2
34002ff0:	440b      	add	r3, r1
34002ff2:	3301      	adds	r3, #1
34002ff4:	7819      	ldrb	r1, [r3, #0]
34002ff6:	4c5a      	ldr	r4, [pc, #360]	@ (34003160 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002ff8:	687a      	ldr	r2, [r7, #4]
34002ffa:	4613      	mov	r3, r2
34002ffc:	005b      	lsls	r3, r3, #1
34002ffe:	4413      	add	r3, r2
34003000:	4423      	add	r3, r4
34003002:	3302      	adds	r3, #2
34003004:	781a      	ldrb	r2, [r3, #0]
34003006:	2300      	movs	r3, #0
34003008:	9300      	str	r3, [sp, #0]
3400300a:	f44f 7340 	mov.w	r3, #768	@ 0x300
3400300e:	f7ff f87d 	bl	3400210c <MX25UM51245G_WriteCfg2Register>
34003012:	4603      	mov	r3, r0
34003014:	2b00      	cmp	r3, #0
34003016:	d003      	beq.n	34003020 <XSPI_NOR_EnterDOPIMode+0x9c>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_20_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003018:	f06f 0304 	mvn.w	r3, #4
3400301c:	60fb      	str	r3, [r7, #12]
3400301e:	e098      	b.n	34003152 <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34003020:	687b      	ldr	r3, [r7, #4]
34003022:	2264      	movs	r2, #100	@ 0x64
34003024:	fb02 f303 	mul.w	r3, r2, r3
34003028:	4a4c      	ldr	r2, [pc, #304]	@ (3400315c <XSPI_NOR_EnterDOPIMode+0x1d8>)
3400302a:	1898      	adds	r0, r3, r2
3400302c:	494c      	ldr	r1, [pc, #304]	@ (34003160 <XSPI_NOR_EnterDOPIMode+0x1dc>)
3400302e:	687a      	ldr	r2, [r7, #4]
34003030:	4613      	mov	r3, r2
34003032:	005b      	lsls	r3, r3, #1
34003034:	4413      	add	r3, r2
34003036:	440b      	add	r3, r1
34003038:	3301      	adds	r3, #1
3400303a:	7819      	ldrb	r1, [r3, #0]
3400303c:	4c48      	ldr	r4, [pc, #288]	@ (34003160 <XSPI_NOR_EnterDOPIMode+0x1dc>)
3400303e:	687a      	ldr	r2, [r7, #4]
34003040:	4613      	mov	r3, r2
34003042:	005b      	lsls	r3, r3, #1
34003044:	4413      	add	r3, r2
34003046:	4423      	add	r3, r4
34003048:	3302      	adds	r3, #2
3400304a:	781b      	ldrb	r3, [r3, #0]
3400304c:	461a      	mov	r2, r3
3400304e:	f7fe ff8f 	bl	34001f70 <MX25UM51245G_WriteEnable>
34003052:	4603      	mov	r3, r0
34003054:	2b00      	cmp	r3, #0
34003056:	d003      	beq.n	34003060 <XSPI_NOR_EnterDOPIMode+0xdc>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003058:	f06f 0304 	mvn.w	r3, #4
3400305c:	60fb      	str	r3, [r7, #12]
3400305e:	e078      	b.n	34003152 <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34003060:	687b      	ldr	r3, [r7, #4]
34003062:	2264      	movs	r2, #100	@ 0x64
34003064:	fb02 f303 	mul.w	r3, r2, r3
34003068:	4a3c      	ldr	r2, [pc, #240]	@ (3400315c <XSPI_NOR_EnterDOPIMode+0x1d8>)
3400306a:	1898      	adds	r0, r3, r2
3400306c:	493c      	ldr	r1, [pc, #240]	@ (34003160 <XSPI_NOR_EnterDOPIMode+0x1dc>)
3400306e:	687a      	ldr	r2, [r7, #4]
34003070:	4613      	mov	r3, r2
34003072:	005b      	lsls	r3, r3, #1
34003074:	4413      	add	r3, r2
34003076:	440b      	add	r3, r1
34003078:	3301      	adds	r3, #1
3400307a:	7819      	ldrb	r1, [r3, #0]
3400307c:	4c38      	ldr	r4, [pc, #224]	@ (34003160 <XSPI_NOR_EnterDOPIMode+0x1dc>)
3400307e:	687a      	ldr	r2, [r7, #4]
34003080:	4613      	mov	r3, r2
34003082:	005b      	lsls	r3, r3, #1
34003084:	4413      	add	r3, r2
34003086:	4423      	add	r3, r4
34003088:	3302      	adds	r3, #2
3400308a:	781a      	ldrb	r2, [r3, #0]
3400308c:	2302      	movs	r3, #2
3400308e:	9300      	str	r3, [sp, #0]
34003090:	2300      	movs	r3, #0
34003092:	f7ff f83b 	bl	3400210c <MX25UM51245G_WriteCfg2Register>
34003096:	4603      	mov	r3, r0
34003098:	2b00      	cmp	r3, #0
3400309a:	d003      	beq.n	340030a4 <XSPI_NOR_EnterDOPIMode+0x120>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400309c:	f06f 0304 	mvn.w	r3, #4
340030a0:	60fb      	str	r3, [r7, #12]
340030a2:	e056      	b.n	34003152 <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
340030a4:	2028      	movs	r0, #40	@ 0x28
340030a6:	f000 fcf9 	bl	34003a9c <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
340030aa:	4a2c      	ldr	r2, [pc, #176]	@ (3400315c <XSPI_NOR_EnterDOPIMode+0x1d8>)
340030ac:	687b      	ldr	r3, [r7, #4]
340030ae:	2164      	movs	r1, #100	@ 0x64
340030b0:	fb01 f303 	mul.w	r3, r1, r3
340030b4:	4413      	add	r3, r2
340030b6:	330c      	adds	r3, #12
340030b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340030bc:	601a      	str	r2, [r3, #0]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
340030be:	4a27      	ldr	r2, [pc, #156]	@ (3400315c <XSPI_NOR_EnterDOPIMode+0x1d8>)
340030c0:	687b      	ldr	r3, [r7, #4]
340030c2:	2164      	movs	r1, #100	@ 0x64
340030c4:	fb01 f303 	mul.w	r3, r1, r3
340030c8:	4413      	add	r3, r2
340030ca:	332c      	adds	r3, #44	@ 0x2c
340030cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
340030d0:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
340030d2:	687b      	ldr	r3, [r7, #4]
340030d4:	2264      	movs	r2, #100	@ 0x64
340030d6:	fb02 f303 	mul.w	r3, r2, r3
340030da:	4a20      	ldr	r2, [pc, #128]	@ (3400315c <XSPI_NOR_EnterDOPIMode+0x1d8>)
340030dc:	4413      	add	r3, r2
340030de:	4618      	mov	r0, r3
340030e0:	f013 fac6 	bl	34016670 <HAL_XSPI_Init>
340030e4:	4603      	mov	r3, r0
340030e6:	2b00      	cmp	r3, #0
340030e8:	d003      	beq.n	340030f2 <XSPI_NOR_EnterDOPIMode+0x16e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
340030ea:	f06f 0303 	mvn.w	r3, #3
340030ee:	60fb      	str	r3, [r7, #12]
340030f0:	e02f      	b.n	34003152 <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
340030f2:	687b      	ldr	r3, [r7, #4]
340030f4:	2264      	movs	r2, #100	@ 0x64
340030f6:	fb02 f303 	mul.w	r3, r2, r3
340030fa:	4a18      	ldr	r2, [pc, #96]	@ (3400315c <XSPI_NOR_EnterDOPIMode+0x1d8>)
340030fc:	4413      	add	r3, r2
340030fe:	2201      	movs	r2, #1
34003100:	2101      	movs	r1, #1
34003102:	4618      	mov	r0, r3
34003104:	f7fe fd6b 	bl	34001bde <MX25UM51245G_AutoPollingMemReady>
34003108:	4603      	mov	r3, r0
3400310a:	2b00      	cmp	r3, #0
3400310c:	d003      	beq.n	34003116 <XSPI_NOR_EnterDOPIMode+0x192>
                                              BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
3400310e:	f06f 0304 	mvn.w	r3, #4
34003112:	60fb      	str	r3, [r7, #12]
34003114:	e01d      	b.n	34003152 <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34003116:	687b      	ldr	r3, [r7, #4]
34003118:	2264      	movs	r2, #100	@ 0x64
3400311a:	fb02 f303 	mul.w	r3, r2, r3
3400311e:	4a0f      	ldr	r2, [pc, #60]	@ (3400315c <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003120:	1898      	adds	r0, r3, r2
34003122:	f107 0308 	add.w	r3, r7, #8
34003126:	9300      	str	r3, [sp, #0]
34003128:	2300      	movs	r3, #0
3400312a:	2201      	movs	r2, #1
3400312c:	2101      	movs	r1, #1
3400312e:	f7ff f880 	bl	34002232 <MX25UM51245G_ReadCfg2Register>
34003132:	4603      	mov	r3, r0
34003134:	2b00      	cmp	r3, #0
34003136:	d003      	beq.n	34003140 <XSPI_NOR_EnterDOPIMode+0x1bc>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34003138:	f06f 0304 	mvn.w	r3, #4
3400313c:	60fb      	str	r3, [r7, #12]
3400313e:	e008      	b.n	34003152 <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
34003140:	7a3b      	ldrb	r3, [r7, #8]
34003142:	2b02      	cmp	r3, #2
34003144:	d003      	beq.n	3400314e <XSPI_NOR_EnterDOPIMode+0x1ca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34003146:	f06f 0304 	mvn.w	r3, #4
3400314a:	60fb      	str	r3, [r7, #12]
3400314c:	e001      	b.n	34003152 <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
3400314e:	2300      	movs	r3, #0
34003150:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
34003152:	68fb      	ldr	r3, [r7, #12]
}
34003154:	4618      	mov	r0, r3
34003156:	3714      	adds	r7, #20
34003158:	46bd      	mov	sp, r7
3400315a:	bd90      	pop	{r4, r7, pc}
3400315c:	3401f564 	.word	0x3401f564
34003160:	3401f5c8 	.word	0x3401f5c8

34003164 <XSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
34003164:	b590      	push	{r4, r7, lr}
34003166:	b087      	sub	sp, #28
34003168:	af02      	add	r7, sp, #8
3400316a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400316c:	687b      	ldr	r3, [r7, #4]
3400316e:	2b00      	cmp	r3, #0
34003170:	d003      	beq.n	3400317a <XSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34003172:	f06f 0301 	mvn.w	r3, #1
34003176:	60fb      	str	r3, [r7, #12]
34003178:	e0b7      	b.n	340032ea <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400317a:	687b      	ldr	r3, [r7, #4]
3400317c:	2264      	movs	r2, #100	@ 0x64
3400317e:	fb02 f303 	mul.w	r3, r2, r3
34003182:	4a5c      	ldr	r2, [pc, #368]	@ (340032f4 <XSPI_NOR_EnterSOPIMode+0x190>)
34003184:	1898      	adds	r0, r3, r2
34003186:	495c      	ldr	r1, [pc, #368]	@ (340032f8 <XSPI_NOR_EnterSOPIMode+0x194>)
34003188:	687a      	ldr	r2, [r7, #4]
3400318a:	4613      	mov	r3, r2
3400318c:	005b      	lsls	r3, r3, #1
3400318e:	4413      	add	r3, r2
34003190:	440b      	add	r3, r1
34003192:	3301      	adds	r3, #1
34003194:	7819      	ldrb	r1, [r3, #0]
34003196:	4c58      	ldr	r4, [pc, #352]	@ (340032f8 <XSPI_NOR_EnterSOPIMode+0x194>)
34003198:	687a      	ldr	r2, [r7, #4]
3400319a:	4613      	mov	r3, r2
3400319c:	005b      	lsls	r3, r3, #1
3400319e:	4413      	add	r3, r2
340031a0:	4423      	add	r3, r4
340031a2:	3302      	adds	r3, #2
340031a4:	781b      	ldrb	r3, [r3, #0]
340031a6:	461a      	mov	r2, r3
340031a8:	f7fe fee2 	bl	34001f70 <MX25UM51245G_WriteEnable>
340031ac:	4603      	mov	r3, r0
340031ae:	2b00      	cmp	r3, #0
340031b0:	d003      	beq.n	340031ba <XSPI_NOR_EnterSOPIMode+0x56>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340031b2:	f06f 0304 	mvn.w	r3, #4
340031b6:	60fb      	str	r3, [r7, #12]
340031b8:	e097      	b.n	340032ea <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340031ba:	687b      	ldr	r3, [r7, #4]
340031bc:	2264      	movs	r2, #100	@ 0x64
340031be:	fb02 f303 	mul.w	r3, r2, r3
340031c2:	4a4c      	ldr	r2, [pc, #304]	@ (340032f4 <XSPI_NOR_EnterSOPIMode+0x190>)
340031c4:	1898      	adds	r0, r3, r2
340031c6:	494c      	ldr	r1, [pc, #304]	@ (340032f8 <XSPI_NOR_EnterSOPIMode+0x194>)
340031c8:	687a      	ldr	r2, [r7, #4]
340031ca:	4613      	mov	r3, r2
340031cc:	005b      	lsls	r3, r3, #1
340031ce:	4413      	add	r3, r2
340031d0:	440b      	add	r3, r1
340031d2:	3301      	adds	r3, #1
340031d4:	7819      	ldrb	r1, [r3, #0]
340031d6:	4c48      	ldr	r4, [pc, #288]	@ (340032f8 <XSPI_NOR_EnterSOPIMode+0x194>)
340031d8:	687a      	ldr	r2, [r7, #4]
340031da:	4613      	mov	r3, r2
340031dc:	005b      	lsls	r3, r3, #1
340031de:	4413      	add	r3, r2
340031e0:	4423      	add	r3, r4
340031e2:	3302      	adds	r3, #2
340031e4:	781a      	ldrb	r2, [r3, #0]
340031e6:	2300      	movs	r3, #0
340031e8:	9300      	str	r3, [sp, #0]
340031ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
340031ee:	f7fe ff8d 	bl	3400210c <MX25UM51245G_WriteCfg2Register>
340031f2:	4603      	mov	r3, r0
340031f4:	2b00      	cmp	r3, #0
340031f6:	d003      	beq.n	34003200 <XSPI_NOR_EnterSOPIMode+0x9c>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_20_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340031f8:	f06f 0304 	mvn.w	r3, #4
340031fc:	60fb      	str	r3, [r7, #12]
340031fe:	e074      	b.n	340032ea <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34003200:	687b      	ldr	r3, [r7, #4]
34003202:	2264      	movs	r2, #100	@ 0x64
34003204:	fb02 f303 	mul.w	r3, r2, r3
34003208:	4a3a      	ldr	r2, [pc, #232]	@ (340032f4 <XSPI_NOR_EnterSOPIMode+0x190>)
3400320a:	1898      	adds	r0, r3, r2
3400320c:	493a      	ldr	r1, [pc, #232]	@ (340032f8 <XSPI_NOR_EnterSOPIMode+0x194>)
3400320e:	687a      	ldr	r2, [r7, #4]
34003210:	4613      	mov	r3, r2
34003212:	005b      	lsls	r3, r3, #1
34003214:	4413      	add	r3, r2
34003216:	440b      	add	r3, r1
34003218:	3301      	adds	r3, #1
3400321a:	7819      	ldrb	r1, [r3, #0]
3400321c:	4c36      	ldr	r4, [pc, #216]	@ (340032f8 <XSPI_NOR_EnterSOPIMode+0x194>)
3400321e:	687a      	ldr	r2, [r7, #4]
34003220:	4613      	mov	r3, r2
34003222:	005b      	lsls	r3, r3, #1
34003224:	4413      	add	r3, r2
34003226:	4423      	add	r3, r4
34003228:	3302      	adds	r3, #2
3400322a:	781b      	ldrb	r3, [r3, #0]
3400322c:	461a      	mov	r2, r3
3400322e:	f7fe fe9f 	bl	34001f70 <MX25UM51245G_WriteEnable>
34003232:	4603      	mov	r3, r0
34003234:	2b00      	cmp	r3, #0
34003236:	d003      	beq.n	34003240 <XSPI_NOR_EnterSOPIMode+0xdc>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003238:	f06f 0304 	mvn.w	r3, #4
3400323c:	60fb      	str	r3, [r7, #12]
3400323e:	e054      	b.n	340032ea <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34003240:	687b      	ldr	r3, [r7, #4]
34003242:	2264      	movs	r2, #100	@ 0x64
34003244:	fb02 f303 	mul.w	r3, r2, r3
34003248:	4a2a      	ldr	r2, [pc, #168]	@ (340032f4 <XSPI_NOR_EnterSOPIMode+0x190>)
3400324a:	1898      	adds	r0, r3, r2
3400324c:	492a      	ldr	r1, [pc, #168]	@ (340032f8 <XSPI_NOR_EnterSOPIMode+0x194>)
3400324e:	687a      	ldr	r2, [r7, #4]
34003250:	4613      	mov	r3, r2
34003252:	005b      	lsls	r3, r3, #1
34003254:	4413      	add	r3, r2
34003256:	440b      	add	r3, r1
34003258:	3301      	adds	r3, #1
3400325a:	7819      	ldrb	r1, [r3, #0]
3400325c:	4c26      	ldr	r4, [pc, #152]	@ (340032f8 <XSPI_NOR_EnterSOPIMode+0x194>)
3400325e:	687a      	ldr	r2, [r7, #4]
34003260:	4613      	mov	r3, r2
34003262:	005b      	lsls	r3, r3, #1
34003264:	4413      	add	r3, r2
34003266:	4423      	add	r3, r4
34003268:	3302      	adds	r3, #2
3400326a:	781a      	ldrb	r2, [r3, #0]
3400326c:	2301      	movs	r3, #1
3400326e:	9300      	str	r3, [sp, #0]
34003270:	2300      	movs	r3, #0
34003272:	f7fe ff4b 	bl	3400210c <MX25UM51245G_WriteCfg2Register>
34003276:	4603      	mov	r3, r0
34003278:	2b00      	cmp	r3, #0
3400327a:	d003      	beq.n	34003284 <XSPI_NOR_EnterSOPIMode+0x120>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400327c:	f06f 0304 	mvn.w	r3, #4
34003280:	60fb      	str	r3, [r7, #12]
34003282:	e032      	b.n	340032ea <XSPI_NOR_EnterSOPIMode+0x186>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34003284:	2028      	movs	r0, #40	@ 0x28
34003286:	f000 fc09 	bl	34003a9c <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400328a:	687b      	ldr	r3, [r7, #4]
3400328c:	2264      	movs	r2, #100	@ 0x64
3400328e:	fb02 f303 	mul.w	r3, r2, r3
34003292:	4a18      	ldr	r2, [pc, #96]	@ (340032f4 <XSPI_NOR_EnterSOPIMode+0x190>)
34003294:	4413      	add	r3, r2
34003296:	2200      	movs	r2, #0
34003298:	2101      	movs	r1, #1
3400329a:	4618      	mov	r0, r3
3400329c:	f7fe fc9f 	bl	34001bde <MX25UM51245G_AutoPollingMemReady>
340032a0:	4603      	mov	r3, r0
340032a2:	2b00      	cmp	r3, #0
340032a4:	d003      	beq.n	340032ae <XSPI_NOR_EnterSOPIMode+0x14a>
                                         BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
340032a6:	f06f 0304 	mvn.w	r3, #4
340032aa:	60fb      	str	r3, [r7, #12]
340032ac:	e01d      	b.n	340032ea <XSPI_NOR_EnterSOPIMode+0x186>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
340032ae:	687b      	ldr	r3, [r7, #4]
340032b0:	2264      	movs	r2, #100	@ 0x64
340032b2:	fb02 f303 	mul.w	r3, r2, r3
340032b6:	4a0f      	ldr	r2, [pc, #60]	@ (340032f4 <XSPI_NOR_EnterSOPIMode+0x190>)
340032b8:	1898      	adds	r0, r3, r2
340032ba:	f107 0308 	add.w	r3, r7, #8
340032be:	9300      	str	r3, [sp, #0]
340032c0:	2300      	movs	r3, #0
340032c2:	2200      	movs	r2, #0
340032c4:	2101      	movs	r1, #1
340032c6:	f7fe ffb4 	bl	34002232 <MX25UM51245G_ReadCfg2Register>
340032ca:	4603      	mov	r3, r0
340032cc:	2b00      	cmp	r3, #0
340032ce:	d003      	beq.n	340032d8 <XSPI_NOR_EnterSOPIMode+0x174>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
340032d0:	f06f 0304 	mvn.w	r3, #4
340032d4:	60fb      	str	r3, [r7, #12]
340032d6:	e008      	b.n	340032ea <XSPI_NOR_EnterSOPIMode+0x186>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
340032d8:	7a3b      	ldrb	r3, [r7, #8]
340032da:	2b01      	cmp	r3, #1
340032dc:	d003      	beq.n	340032e6 <XSPI_NOR_EnterSOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
340032de:	f06f 0304 	mvn.w	r3, #4
340032e2:	60fb      	str	r3, [r7, #12]
340032e4:	e001      	b.n	340032ea <XSPI_NOR_EnterSOPIMode+0x186>
    }
    else
    {
      ret = BSP_ERROR_NONE;
340032e6:	2300      	movs	r3, #0
340032e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
340032ea:	68fb      	ldr	r3, [r7, #12]
}
340032ec:	4618      	mov	r0, r3
340032ee:	3714      	adds	r7, #20
340032f0:	46bd      	mov	sp, r7
340032f2:	bd90      	pop	{r4, r7, pc}
340032f4:	3401f564 	.word	0x3401f564
340032f8:	3401f5c8 	.word	0x3401f5c8

340032fc <XSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_ExitOPIMode(uint32_t Instance)
{
340032fc:	b590      	push	{r4, r7, lr}
340032fe:	b087      	sub	sp, #28
34003300:	af02      	add	r7, sp, #8
34003302:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34003304:	2300      	movs	r3, #0
34003306:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34003308:	687b      	ldr	r3, [r7, #4]
3400330a:	2b00      	cmp	r3, #0
3400330c:	d003      	beq.n	34003316 <XSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
3400330e:	f06f 0301 	mvn.w	r3, #1
34003312:	60fb      	str	r3, [r7, #12]
34003314:	e0a3      	b.n	3400345e <XSPI_NOR_ExitOPIMode+0x162>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34003316:	687b      	ldr	r3, [r7, #4]
34003318:	2264      	movs	r2, #100	@ 0x64
3400331a:	fb02 f303 	mul.w	r3, r2, r3
3400331e:	4a52      	ldr	r2, [pc, #328]	@ (34003468 <XSPI_NOR_ExitOPIMode+0x16c>)
34003320:	1898      	adds	r0, r3, r2
34003322:	4952      	ldr	r1, [pc, #328]	@ (3400346c <XSPI_NOR_ExitOPIMode+0x170>)
34003324:	687a      	ldr	r2, [r7, #4]
34003326:	4613      	mov	r3, r2
34003328:	005b      	lsls	r3, r3, #1
3400332a:	4413      	add	r3, r2
3400332c:	440b      	add	r3, r1
3400332e:	3301      	adds	r3, #1
34003330:	7819      	ldrb	r1, [r3, #0]
34003332:	4c4e      	ldr	r4, [pc, #312]	@ (3400346c <XSPI_NOR_ExitOPIMode+0x170>)
34003334:	687a      	ldr	r2, [r7, #4]
34003336:	4613      	mov	r3, r2
34003338:	005b      	lsls	r3, r3, #1
3400333a:	4413      	add	r3, r2
3400333c:	4423      	add	r3, r4
3400333e:	3302      	adds	r3, #2
34003340:	781b      	ldrb	r3, [r3, #0]
34003342:	461a      	mov	r2, r3
34003344:	f7fe fe14 	bl	34001f70 <MX25UM51245G_WriteEnable>
34003348:	4603      	mov	r3, r0
3400334a:	2b00      	cmp	r3, #0
3400334c:	d003      	beq.n	34003356 <XSPI_NOR_ExitOPIMode+0x5a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400334e:	f06f 0304 	mvn.w	r3, #4
34003352:	60fb      	str	r3, [r7, #12]
34003354:	e083      	b.n	3400345e <XSPI_NOR_ExitOPIMode+0x162>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
34003356:	2300      	movs	r3, #0
34003358:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
3400335a:	2300      	movs	r3, #0
3400335c:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400335e:	687b      	ldr	r3, [r7, #4]
34003360:	2264      	movs	r2, #100	@ 0x64
34003362:	fb02 f303 	mul.w	r3, r2, r3
34003366:	4a40      	ldr	r2, [pc, #256]	@ (34003468 <XSPI_NOR_ExitOPIMode+0x16c>)
34003368:	1898      	adds	r0, r3, r2
3400336a:	4940      	ldr	r1, [pc, #256]	@ (3400346c <XSPI_NOR_ExitOPIMode+0x170>)
3400336c:	687a      	ldr	r2, [r7, #4]
3400336e:	4613      	mov	r3, r2
34003370:	005b      	lsls	r3, r3, #1
34003372:	4413      	add	r3, r2
34003374:	440b      	add	r3, r1
34003376:	3301      	adds	r3, #1
34003378:	7819      	ldrb	r1, [r3, #0]
3400337a:	4c3c      	ldr	r4, [pc, #240]	@ (3400346c <XSPI_NOR_ExitOPIMode+0x170>)
3400337c:	687a      	ldr	r2, [r7, #4]
3400337e:	4613      	mov	r3, r2
34003380:	005b      	lsls	r3, r3, #1
34003382:	4413      	add	r3, r2
34003384:	4423      	add	r3, r4
34003386:	3302      	adds	r3, #2
34003388:	781a      	ldrb	r2, [r3, #0]
3400338a:	7a3b      	ldrb	r3, [r7, #8]
3400338c:	9300      	str	r3, [sp, #0]
3400338e:	2300      	movs	r3, #0
34003390:	f7fe febc 	bl	3400210c <MX25UM51245G_WriteCfg2Register>
34003394:	4603      	mov	r3, r0
34003396:	2b00      	cmp	r3, #0
34003398:	d003      	beq.n	340033a2 <XSPI_NOR_ExitOPIMode+0xa6>
                                       Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
3400339a:	f06f 0304 	mvn.w	r3, #4
3400339e:	60fb      	str	r3, [r7, #12]
340033a0:	e05d      	b.n	3400345e <XSPI_NOR_ExitOPIMode+0x162>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
340033a2:	2028      	movs	r0, #40	@ 0x28
340033a4:	f000 fb7a 	bl	34003a9c <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
340033a8:	4930      	ldr	r1, [pc, #192]	@ (3400346c <XSPI_NOR_ExitOPIMode+0x170>)
340033aa:	687a      	ldr	r2, [r7, #4]
340033ac:	4613      	mov	r3, r2
340033ae:	005b      	lsls	r3, r3, #1
340033b0:	4413      	add	r3, r2
340033b2:	440b      	add	r3, r1
340033b4:	3302      	adds	r3, #2
340033b6:	781b      	ldrb	r3, [r3, #0]
340033b8:	2b01      	cmp	r3, #1
340033ba:	d120      	bne.n	340033fe <XSPI_NOR_ExitOPIMode+0x102>
      {
        /* Reconfigure the memory type of the peripheral */
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
340033bc:	4a2a      	ldr	r2, [pc, #168]	@ (34003468 <XSPI_NOR_ExitOPIMode+0x16c>)
340033be:	687b      	ldr	r3, [r7, #4]
340033c0:	2164      	movs	r1, #100	@ 0x64
340033c2:	fb01 f303 	mul.w	r3, r1, r3
340033c6:	4413      	add	r3, r2
340033c8:	330c      	adds	r3, #12
340033ca:	2200      	movs	r2, #0
340033cc:	601a      	str	r2, [r3, #0]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
340033ce:	4a26      	ldr	r2, [pc, #152]	@ (34003468 <XSPI_NOR_ExitOPIMode+0x16c>)
340033d0:	687b      	ldr	r3, [r7, #4]
340033d2:	2164      	movs	r1, #100	@ 0x64
340033d4:	fb01 f303 	mul.w	r3, r1, r3
340033d8:	4413      	add	r3, r2
340033da:	332c      	adds	r3, #44	@ 0x2c
340033dc:	2200      	movs	r2, #0
340033de:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
340033e0:	687b      	ldr	r3, [r7, #4]
340033e2:	2264      	movs	r2, #100	@ 0x64
340033e4:	fb02 f303 	mul.w	r3, r2, r3
340033e8:	4a1f      	ldr	r2, [pc, #124]	@ (34003468 <XSPI_NOR_ExitOPIMode+0x16c>)
340033ea:	4413      	add	r3, r2
340033ec:	4618      	mov	r0, r3
340033ee:	f013 f93f 	bl	34016670 <HAL_XSPI_Init>
340033f2:	4603      	mov	r3, r0
340033f4:	2b00      	cmp	r3, #0
340033f6:	d002      	beq.n	340033fe <XSPI_NOR_ExitOPIMode+0x102>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
340033f8:	f06f 0303 	mvn.w	r3, #3
340033fc:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
340033fe:	68fb      	ldr	r3, [r7, #12]
34003400:	2b00      	cmp	r3, #0
34003402:	d12c      	bne.n	3400345e <XSPI_NOR_ExitOPIMode+0x162>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34003404:	687b      	ldr	r3, [r7, #4]
34003406:	2264      	movs	r2, #100	@ 0x64
34003408:	fb02 f303 	mul.w	r3, r2, r3
3400340c:	4a16      	ldr	r2, [pc, #88]	@ (34003468 <XSPI_NOR_ExitOPIMode+0x16c>)
3400340e:	4413      	add	r3, r2
34003410:	2200      	movs	r2, #0
34003412:	2100      	movs	r1, #0
34003414:	4618      	mov	r0, r3
34003416:	f7fe fbe2 	bl	34001bde <MX25UM51245G_AutoPollingMemReady>
3400341a:	4603      	mov	r3, r0
3400341c:	2b00      	cmp	r3, #0
3400341e:	d003      	beq.n	34003428 <XSPI_NOR_ExitOPIMode+0x12c>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
34003420:	f06f 0304 	mvn.w	r3, #4
34003424:	60fb      	str	r3, [r7, #12]
34003426:	e01a      	b.n	3400345e <XSPI_NOR_ExitOPIMode+0x162>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34003428:	687b      	ldr	r3, [r7, #4]
3400342a:	2264      	movs	r2, #100	@ 0x64
3400342c:	fb02 f303 	mul.w	r3, r2, r3
34003430:	4a0d      	ldr	r2, [pc, #52]	@ (34003468 <XSPI_NOR_ExitOPIMode+0x16c>)
34003432:	1898      	adds	r0, r3, r2
34003434:	f107 0308 	add.w	r3, r7, #8
34003438:	9300      	str	r3, [sp, #0]
3400343a:	2300      	movs	r3, #0
3400343c:	2200      	movs	r2, #0
3400343e:	2100      	movs	r1, #0
34003440:	f7fe fef7 	bl	34002232 <MX25UM51245G_ReadCfg2Register>
34003444:	4603      	mov	r3, r0
34003446:	2b00      	cmp	r3, #0
34003448:	d003      	beq.n	34003452 <XSPI_NOR_ExitOPIMode+0x156>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
3400344a:	f06f 0304 	mvn.w	r3, #4
3400344e:	60fb      	str	r3, [r7, #12]
34003450:	e005      	b.n	3400345e <XSPI_NOR_ExitOPIMode+0x162>
        }
        else if (reg[0] != 0U)
34003452:	7a3b      	ldrb	r3, [r7, #8]
34003454:	2b00      	cmp	r3, #0
34003456:	d002      	beq.n	3400345e <XSPI_NOR_ExitOPIMode+0x162>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
34003458:	f06f 0304 	mvn.w	r3, #4
3400345c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
3400345e:	68fb      	ldr	r3, [r7, #12]
}
34003460:	4618      	mov	r0, r3
34003462:	3714      	adds	r7, #20
34003464:	46bd      	mov	sp, r7
34003466:	bd90      	pop	{r4, r7, pc}
34003468:	3401f564 	.word	0x3401f564
3400346c:	3401f5c8 	.word	0x3401f5c8

34003470 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
34003470:	b480      	push	{r7}
34003472:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34003474:	4b6a      	ldr	r3, [pc, #424]	@ (34003620 <SystemInit+0x1b0>)
34003476:	4a6b      	ldr	r2, [pc, #428]	@ (34003624 <SystemInit+0x1b4>)
34003478:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400347a:	4b6b      	ldr	r3, [pc, #428]	@ (34003628 <SystemInit+0x1b8>)
3400347c:	2201      	movs	r2, #1
3400347e:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34003482:	4b69      	ldr	r3, [pc, #420]	@ (34003628 <SystemInit+0x1b8>)
34003484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003488:	461a      	mov	r2, r3
3400348a:	2301      	movs	r3, #1
3400348c:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34003490:	4b65      	ldr	r3, [pc, #404]	@ (34003628 <SystemInit+0x1b8>)
34003492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003496:	461a      	mov	r2, r3
34003498:	2301      	movs	r3, #1
3400349a:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
3400349e:	4b63      	ldr	r3, [pc, #396]	@ (3400362c <SystemInit+0x1bc>)
340034a0:	2200      	movs	r2, #0
340034a2:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
340034a4:	4b61      	ldr	r3, [pc, #388]	@ (3400362c <SystemInit+0x1bc>)
340034a6:	2200      	movs	r2, #0
340034a8:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
340034aa:	4b60      	ldr	r3, [pc, #384]	@ (3400362c <SystemInit+0x1bc>)
340034ac:	2200      	movs	r2, #0
340034ae:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
340034b0:	4b5e      	ldr	r3, [pc, #376]	@ (3400362c <SystemInit+0x1bc>)
340034b2:	2201      	movs	r2, #1
340034b4:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
340034b6:	4b5d      	ldr	r3, [pc, #372]	@ (3400362c <SystemInit+0x1bc>)
340034b8:	2200      	movs	r2, #0
340034ba:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
340034bc:	4b5b      	ldr	r3, [pc, #364]	@ (3400362c <SystemInit+0x1bc>)
340034be:	2200      	movs	r2, #0
340034c0:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
340034c2:	4b5a      	ldr	r3, [pc, #360]	@ (3400362c <SystemInit+0x1bc>)
340034c4:	2202      	movs	r2, #2
340034c6:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
340034c8:	4b58      	ldr	r3, [pc, #352]	@ (3400362c <SystemInit+0x1bc>)
340034ca:	2200      	movs	r2, #0
340034cc:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
340034ce:	4b57      	ldr	r3, [pc, #348]	@ (3400362c <SystemInit+0x1bc>)
340034d0:	2200      	movs	r2, #0
340034d2:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
340034d4:	4b55      	ldr	r3, [pc, #340]	@ (3400362c <SystemInit+0x1bc>)
340034d6:	2203      	movs	r2, #3
340034d8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
340034da:	4b54      	ldr	r3, [pc, #336]	@ (3400362c <SystemInit+0x1bc>)
340034dc:	2200      	movs	r2, #0
340034de:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
340034e0:	4b52      	ldr	r3, [pc, #328]	@ (3400362c <SystemInit+0x1bc>)
340034e2:	2200      	movs	r2, #0
340034e4:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
340034e6:	4b51      	ldr	r3, [pc, #324]	@ (3400362c <SystemInit+0x1bc>)
340034e8:	2204      	movs	r2, #4
340034ea:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
340034ec:	4b4f      	ldr	r3, [pc, #316]	@ (3400362c <SystemInit+0x1bc>)
340034ee:	2200      	movs	r2, #0
340034f0:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
340034f2:	4b4e      	ldr	r3, [pc, #312]	@ (3400362c <SystemInit+0x1bc>)
340034f4:	2200      	movs	r2, #0
340034f6:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
340034f8:	4b4c      	ldr	r3, [pc, #304]	@ (3400362c <SystemInit+0x1bc>)
340034fa:	2205      	movs	r2, #5
340034fc:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
340034fe:	4b4b      	ldr	r3, [pc, #300]	@ (3400362c <SystemInit+0x1bc>)
34003500:	2200      	movs	r2, #0
34003502:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003504:	4b49      	ldr	r3, [pc, #292]	@ (3400362c <SystemInit+0x1bc>)
34003506:	2200      	movs	r2, #0
34003508:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
3400350a:	4b48      	ldr	r3, [pc, #288]	@ (3400362c <SystemInit+0x1bc>)
3400350c:	2206      	movs	r2, #6
3400350e:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003510:	4b46      	ldr	r3, [pc, #280]	@ (3400362c <SystemInit+0x1bc>)
34003512:	2200      	movs	r2, #0
34003514:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003516:	4b45      	ldr	r3, [pc, #276]	@ (3400362c <SystemInit+0x1bc>)
34003518:	2200      	movs	r2, #0
3400351a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
3400351c:	4b43      	ldr	r3, [pc, #268]	@ (3400362c <SystemInit+0x1bc>)
3400351e:	2207      	movs	r2, #7
34003520:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003522:	4b42      	ldr	r3, [pc, #264]	@ (3400362c <SystemInit+0x1bc>)
34003524:	2200      	movs	r2, #0
34003526:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003528:	4b40      	ldr	r3, [pc, #256]	@ (3400362c <SystemInit+0x1bc>)
3400352a:	2200      	movs	r2, #0
3400352c:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
3400352e:	4b3e      	ldr	r3, [pc, #248]	@ (34003628 <SystemInit+0x1b8>)
34003530:	2201      	movs	r2, #1
34003532:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
34003536:	4b3c      	ldr	r3, [pc, #240]	@ (34003628 <SystemInit+0x1b8>)
34003538:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
3400353c:	4b38      	ldr	r3, [pc, #224]	@ (34003620 <SystemInit+0x1b0>)
3400353e:	4a3c      	ldr	r2, [pc, #240]	@ (34003630 <SystemInit+0x1c0>)
34003540:	689b      	ldr	r3, [r3, #8]
34003542:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34003544:	4b3b      	ldr	r3, [pc, #236]	@ (34003634 <SystemInit+0x1c4>)
34003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34003548:	4a3a      	ldr	r2, [pc, #232]	@ (34003634 <SystemInit+0x1c4>)
3400354a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3400354e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34003550:	4b38      	ldr	r3, [pc, #224]	@ (34003634 <SystemInit+0x1c4>)
34003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34003554:	4a37      	ldr	r2, [pc, #220]	@ (34003634 <SystemInit+0x1c4>)
34003556:	f043 0310 	orr.w	r3, r3, #16
3400355a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
3400355c:	4b35      	ldr	r3, [pc, #212]	@ (34003634 <SystemInit+0x1c4>)
3400355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34003560:	4b31      	ldr	r3, [pc, #196]	@ (34003628 <SystemInit+0x1b8>)
34003562:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
34003566:	4a30      	ldr	r2, [pc, #192]	@ (34003628 <SystemInit+0x1b8>)
34003568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400356c:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34003570:	4b2d      	ldr	r3, [pc, #180]	@ (34003628 <SystemInit+0x1b8>)
34003572:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34003576:	4a2c      	ldr	r2, [pc, #176]	@ (34003628 <SystemInit+0x1b8>)
34003578:	f043 0310 	orr.w	r3, r3, #16
3400357c:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34003580:	4b29      	ldr	r3, [pc, #164]	@ (34003628 <SystemInit+0x1b8>)
34003582:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34003586:	4b28      	ldr	r3, [pc, #160]	@ (34003628 <SystemInit+0x1b8>)
34003588:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
3400358c:	4a26      	ldr	r2, [pc, #152]	@ (34003628 <SystemInit+0x1b8>)
3400358e:	f023 0310 	bic.w	r3, r3, #16
34003592:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
34003596:	4b24      	ldr	r3, [pc, #144]	@ (34003628 <SystemInit+0x1b8>)
34003598:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
3400359c:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
340035a0:	4b21      	ldr	r3, [pc, #132]	@ (34003628 <SystemInit+0x1b8>)
340035a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340035a6:	461a      	mov	r2, r3
340035a8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340035ac:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
340035b0:	4b1d      	ldr	r3, [pc, #116]	@ (34003628 <SystemInit+0x1b8>)
340035b2:	2201      	movs	r2, #1
340035b4:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
340035b8:	4b1b      	ldr	r3, [pc, #108]	@ (34003628 <SystemInit+0x1b8>)
340035ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340035be:	461a      	mov	r2, r3
340035c0:	2301      	movs	r3, #1
340035c2:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
340035c6:	4b18      	ldr	r3, [pc, #96]	@ (34003628 <SystemInit+0x1b8>)
340035c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340035cc:	461a      	mov	r2, r3
340035ce:	2301      	movs	r3, #1
340035d0:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
340035d4:	4b14      	ldr	r3, [pc, #80]	@ (34003628 <SystemInit+0x1b8>)
340035d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340035da:	461a      	mov	r2, r3
340035dc:	2340      	movs	r3, #64	@ 0x40
340035de:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
340035e2:	4b13      	ldr	r3, [pc, #76]	@ (34003630 <SystemInit+0x1c0>)
340035e4:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
340035e6:	4b10      	ldr	r3, [pc, #64]	@ (34003628 <SystemInit+0x1b8>)
340035e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340035ec:	461a      	mov	r2, r3
340035ee:	2301      	movs	r3, #1
340035f0:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
340035f4:	4b0a      	ldr	r3, [pc, #40]	@ (34003620 <SystemInit+0x1b0>)
340035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
340035fa:	4a09      	ldr	r2, [pc, #36]	@ (34003620 <SystemInit+0x1b0>)
340035fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34003600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34003604:	4b0c      	ldr	r3, [pc, #48]	@ (34003638 <SystemInit+0x1c8>)
34003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400360a:	4a0b      	ldr	r2, [pc, #44]	@ (34003638 <SystemInit+0x1c8>)
3400360c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34003610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34003614:	bf00      	nop
34003616:	46bd      	mov	sp, r7
34003618:	f85d 7b04 	ldr.w	r7, [sp], #4
3400361c:	4770      	bx	lr
3400361e:	bf00      	nop
34003620:	e000ed00 	.word	0xe000ed00
34003624:	34000400 	.word	0x34000400
34003628:	56028000 	.word	0x56028000
3400362c:	e000edd0 	.word	0xe000edd0
34003630:	56008000 	.word	0x56008000
34003634:	56024800 	.word	0x56024800
34003638:	e002ed00 	.word	0xe002ed00

3400363c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
3400363c:	b480      	push	{r7}
3400363e:	b08d      	sub	sp, #52	@ 0x34
34003640:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
34003642:	2300      	movs	r3, #0
34003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
34003646:	2300      	movs	r3, #0
34003648:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
3400364a:	2300      	movs	r3, #0
3400364c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
3400364e:	2300      	movs	r3, #0
34003650:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
34003652:	2300      	movs	r3, #0
34003654:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
34003656:	2300      	movs	r3, #0
34003658:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400365a:	4b9b      	ldr	r3, [pc, #620]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
3400365c:	6a1b      	ldr	r3, [r3, #32]
3400365e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34003662:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34003666:	d029      	beq.n	340036bc <SystemCoreClockUpdate+0x80>
34003668:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400366c:	f200 8180 	bhi.w	34003970 <SystemCoreClockUpdate+0x334>
34003670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34003674:	d01f      	beq.n	340036b6 <SystemCoreClockUpdate+0x7a>
34003676:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400367a:	f200 8179 	bhi.w	34003970 <SystemCoreClockUpdate+0x334>
3400367e:	2b00      	cmp	r3, #0
34003680:	d003      	beq.n	3400368a <SystemCoreClockUpdate+0x4e>
34003682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34003686:	d00a      	beq.n	3400369e <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
34003688:	e172      	b.n	34003970 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3400368a:	4b8f      	ldr	r3, [pc, #572]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
3400368c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400368e:	09db      	lsrs	r3, r3, #7
34003690:	f003 0303 	and.w	r3, r3, #3
34003694:	4a8d      	ldr	r2, [pc, #564]	@ (340038cc <SystemCoreClockUpdate+0x290>)
34003696:	fa22 f303 	lsr.w	r3, r2, r3
3400369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3400369c:	e169      	b.n	34003972 <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400369e:	4b8a      	ldr	r3, [pc, #552]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
340036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340036a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340036a6:	2b00      	cmp	r3, #0
340036a8:	d102      	bne.n	340036b0 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
340036aa:	4b89      	ldr	r3, [pc, #548]	@ (340038d0 <SystemCoreClockUpdate+0x294>)
340036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
340036ae:	e160      	b.n	34003972 <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
340036b0:	4b88      	ldr	r3, [pc, #544]	@ (340038d4 <SystemCoreClockUpdate+0x298>)
340036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
340036b4:	e15d      	b.n	34003972 <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
340036b6:	4b88      	ldr	r3, [pc, #544]	@ (340038d8 <SystemCoreClockUpdate+0x29c>)
340036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
340036ba:	e15a      	b.n	34003972 <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
340036bc:	4b82      	ldr	r3, [pc, #520]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
340036be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
340036c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
340036c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340036ca:	d066      	beq.n	3400379a <SystemCoreClockUpdate+0x15e>
340036cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340036d0:	f200 8091 	bhi.w	340037f6 <SystemCoreClockUpdate+0x1ba>
340036d4:	2b00      	cmp	r3, #0
340036d6:	d003      	beq.n	340036e0 <SystemCoreClockUpdate+0xa4>
340036d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340036dc:	d02f      	beq.n	3400373e <SystemCoreClockUpdate+0x102>
340036de:	e08a      	b.n	340037f6 <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
340036e0:	4b79      	ldr	r3, [pc, #484]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
340036e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340036e6:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
340036e8:	68fb      	ldr	r3, [r7, #12]
340036ea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
340036ee:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
340036f0:	68fb      	ldr	r3, [r7, #12]
340036f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340036f6:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
340036f8:	693b      	ldr	r3, [r7, #16]
340036fa:	2b00      	cmp	r3, #0
340036fc:	f040 80a9 	bne.w	34003852 <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
34003700:	68fb      	ldr	r3, [r7, #12]
34003702:	0d1b      	lsrs	r3, r3, #20
34003704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34003708:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
3400370a:	68fb      	ldr	r3, [r7, #12]
3400370c:	0a1b      	lsrs	r3, r3, #8
3400370e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34003712:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34003714:	4b6c      	ldr	r3, [pc, #432]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
34003716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400371a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3400371e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34003720:	4b69      	ldr	r3, [pc, #420]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
34003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34003726:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
34003728:	68fb      	ldr	r3, [r7, #12]
3400372a:	0edb      	lsrs	r3, r3, #27
3400372c:	f003 0307 	and.w	r3, r3, #7
34003730:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
34003732:	68fb      	ldr	r3, [r7, #12]
34003734:	0e1b      	lsrs	r3, r3, #24
34003736:	f003 0307 	and.w	r3, r3, #7
3400373a:	61bb      	str	r3, [r7, #24]
      break;
3400373c:	e089      	b.n	34003852 <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
3400373e:	4b62      	ldr	r3, [pc, #392]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
34003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34003744:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
34003746:	68fb      	ldr	r3, [r7, #12]
34003748:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
3400374c:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
3400374e:	68fb      	ldr	r3, [r7, #12]
34003750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34003754:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34003756:	693b      	ldr	r3, [r7, #16]
34003758:	2b00      	cmp	r3, #0
3400375a:	d17c      	bne.n	34003856 <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
3400375c:	68fb      	ldr	r3, [r7, #12]
3400375e:	0d1b      	lsrs	r3, r3, #20
34003760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34003764:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
34003766:	68fb      	ldr	r3, [r7, #12]
34003768:	0a1b      	lsrs	r3, r3, #8
3400376a:	f3c3 030b 	ubfx	r3, r3, #0, #12
3400376e:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34003770:	4b55      	ldr	r3, [pc, #340]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
34003772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34003776:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3400377a:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
3400377c:	4b52      	ldr	r3, [pc, #328]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
3400377e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34003782:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34003784:	68fb      	ldr	r3, [r7, #12]
34003786:	0edb      	lsrs	r3, r3, #27
34003788:	f003 0307 	and.w	r3, r3, #7
3400378c:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
3400378e:	68fb      	ldr	r3, [r7, #12]
34003790:	0e1b      	lsrs	r3, r3, #24
34003792:	f003 0307 	and.w	r3, r3, #7
34003796:	61bb      	str	r3, [r7, #24]
      break;
34003798:	e05d      	b.n	34003856 <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
3400379a:	4b4b      	ldr	r3, [pc, #300]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
3400379c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340037a0:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
340037a2:	68fb      	ldr	r3, [r7, #12]
340037a4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
340037a8:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
340037aa:	68fb      	ldr	r3, [r7, #12]
340037ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340037b0:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
340037b2:	693b      	ldr	r3, [r7, #16]
340037b4:	2b00      	cmp	r3, #0
340037b6:	d150      	bne.n	3400385a <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
340037b8:	68fb      	ldr	r3, [r7, #12]
340037ba:	0d1b      	lsrs	r3, r3, #20
340037bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
340037c0:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
340037c2:	68fb      	ldr	r3, [r7, #12]
340037c4:	0a1b      	lsrs	r3, r3, #8
340037c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
340037ca:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
340037cc:	4b3e      	ldr	r3, [pc, #248]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
340037ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
340037d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340037d6:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
340037d8:	4b3b      	ldr	r3, [pc, #236]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
340037da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
340037de:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
340037e0:	68fb      	ldr	r3, [r7, #12]
340037e2:	0edb      	lsrs	r3, r3, #27
340037e4:	f003 0307 	and.w	r3, r3, #7
340037e8:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
340037ea:	68fb      	ldr	r3, [r7, #12]
340037ec:	0e1b      	lsrs	r3, r3, #24
340037ee:	f003 0307 	and.w	r3, r3, #7
340037f2:	61bb      	str	r3, [r7, #24]
      break;
340037f4:	e031      	b.n	3400385a <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
340037f6:	4b34      	ldr	r3, [pc, #208]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
340037f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340037fc:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
340037fe:	68fb      	ldr	r3, [r7, #12]
34003800:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34003804:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
34003806:	68fb      	ldr	r3, [r7, #12]
34003808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400380c:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3400380e:	693b      	ldr	r3, [r7, #16]
34003810:	2b00      	cmp	r3, #0
34003812:	d124      	bne.n	3400385e <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34003814:	68fb      	ldr	r3, [r7, #12]
34003816:	0d1b      	lsrs	r3, r3, #20
34003818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3400381c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
3400381e:	68fb      	ldr	r3, [r7, #12]
34003820:	0a1b      	lsrs	r3, r3, #8
34003822:	f3c3 030b 	ubfx	r3, r3, #0, #12
34003826:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34003828:	4b27      	ldr	r3, [pc, #156]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
3400382a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3400382e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34003832:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34003834:	4b24      	ldr	r3, [pc, #144]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
34003836:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400383a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
3400383c:	68fb      	ldr	r3, [r7, #12]
3400383e:	0edb      	lsrs	r3, r3, #27
34003840:	f003 0307 	and.w	r3, r3, #7
34003844:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34003846:	68fb      	ldr	r3, [r7, #12]
34003848:	0e1b      	lsrs	r3, r3, #24
3400384a:	f003 0307 	and.w	r3, r3, #7
3400384e:	61bb      	str	r3, [r7, #24]
      break;
34003850:	e005      	b.n	3400385e <SystemCoreClockUpdate+0x222>
      break;
34003852:	bf00      	nop
34003854:	e004      	b.n	34003860 <SystemCoreClockUpdate+0x224>
      break;
34003856:	bf00      	nop
34003858:	e002      	b.n	34003860 <SystemCoreClockUpdate+0x224>
      break;
3400385a:	bf00      	nop
3400385c:	e000      	b.n	34003860 <SystemCoreClockUpdate+0x224>
      break;
3400385e:	bf00      	nop
34003860:	697b      	ldr	r3, [r7, #20]
34003862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34003866:	d02c      	beq.n	340038c2 <SystemCoreClockUpdate+0x286>
34003868:	697b      	ldr	r3, [r7, #20]
3400386a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400386e:	d839      	bhi.n	340038e4 <SystemCoreClockUpdate+0x2a8>
34003870:	697b      	ldr	r3, [r7, #20]
34003872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003876:	d021      	beq.n	340038bc <SystemCoreClockUpdate+0x280>
34003878:	697b      	ldr	r3, [r7, #20]
3400387a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400387e:	d831      	bhi.n	340038e4 <SystemCoreClockUpdate+0x2a8>
34003880:	697b      	ldr	r3, [r7, #20]
34003882:	2b00      	cmp	r3, #0
34003884:	d004      	beq.n	34003890 <SystemCoreClockUpdate+0x254>
34003886:	697b      	ldr	r3, [r7, #20]
34003888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400388c:	d00a      	beq.n	340038a4 <SystemCoreClockUpdate+0x268>
      break;
3400388e:	e029      	b.n	340038e4 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34003890:	4b0d      	ldr	r3, [pc, #52]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
34003892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34003894:	09db      	lsrs	r3, r3, #7
34003896:	f003 0303 	and.w	r3, r3, #3
3400389a:	4a0c      	ldr	r2, [pc, #48]	@ (340038cc <SystemCoreClockUpdate+0x290>)
3400389c:	fa22 f303 	lsr.w	r3, r2, r3
340038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
340038a2:	e020      	b.n	340038e6 <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340038a4:	4b08      	ldr	r3, [pc, #32]	@ (340038c8 <SystemCoreClockUpdate+0x28c>)
340038a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340038a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340038ac:	2b00      	cmp	r3, #0
340038ae:	d102      	bne.n	340038b6 <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
340038b0:	4b07      	ldr	r3, [pc, #28]	@ (340038d0 <SystemCoreClockUpdate+0x294>)
340038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
340038b4:	e017      	b.n	340038e6 <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
340038b6:	4b07      	ldr	r3, [pc, #28]	@ (340038d4 <SystemCoreClockUpdate+0x298>)
340038b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
340038ba:	e014      	b.n	340038e6 <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
340038bc:	4b06      	ldr	r3, [pc, #24]	@ (340038d8 <SystemCoreClockUpdate+0x29c>)
340038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
340038c0:	e011      	b.n	340038e6 <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
340038c2:	4b06      	ldr	r3, [pc, #24]	@ (340038dc <SystemCoreClockUpdate+0x2a0>)
340038c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
340038c6:	e00e      	b.n	340038e6 <SystemCoreClockUpdate+0x2aa>
340038c8:	56028000 	.word	0x56028000
340038cc:	03d09000 	.word	0x03d09000
340038d0:	003d0900 	.word	0x003d0900
340038d4:	00f42400 	.word	0x00f42400
340038d8:	02dc6c00 	.word	0x02dc6c00
340038dc:	00bb8000 	.word	0x00bb8000
340038e0:	4b800000 	.word	0x4b800000
      break;
340038e4:	bf00      	nop
    if (pllbypass == 0U)
340038e6:	693b      	ldr	r3, [r7, #16]
340038e8:	2b00      	cmp	r3, #0
340038ea:	d134      	bne.n	34003956 <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
340038ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340038ee:	ee07 3a90 	vmov	s15, r3
340038f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340038f8:	ee07 3a90 	vmov	s15, r3
340038fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
34003900:	6a3b      	ldr	r3, [r7, #32]
34003902:	ee07 3a90 	vmov	s15, r3
34003906:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3400390a:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 340038e0 <SystemCoreClockUpdate+0x2a4>
3400390e:	eec6 7a25 	vdiv.f32	s15, s12, s11
34003912:	ee76 7aa7 	vadd.f32	s15, s13, s15
34003916:	ee67 6a27 	vmul.f32	s13, s14, s15
3400391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400391c:	ee07 3a90 	vmov	s15, r3
34003920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
34003928:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
3400392c:	69fb      	ldr	r3, [r7, #28]
3400392e:	ee07 3a90 	vmov	s15, r3
34003932:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34003936:	69bb      	ldr	r3, [r7, #24]
34003938:	ee07 3a90 	vmov	s15, r3
3400393c:	eef8 7a67 	vcvt.f32.u32	s15, s15
34003940:	ee27 7a27 	vmul.f32	s14, s14, s15
34003944:	edd7 6a02 	vldr	s13, [r7, #8]
34003948:	eec6 7a87 	vdiv.f32	s15, s13, s14
3400394c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34003950:	ee17 3a90 	vmov	r3, s15
34003954:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34003956:	4b0b      	ldr	r3, [pc, #44]	@ (34003984 <SystemCoreClockUpdate+0x348>)
34003958:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400395c:	0c1b      	lsrs	r3, r3, #16
3400395e:	b2db      	uxtb	r3, r3
34003960:	3301      	adds	r3, #1
34003962:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
34003964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34003966:	687b      	ldr	r3, [r7, #4]
34003968:	fbb2 f3f3 	udiv	r3, r2, r3
3400396c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3400396e:	e000      	b.n	34003972 <SystemCoreClockUpdate+0x336>
    break;
34003970:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34003972:	4a05      	ldr	r2, [pc, #20]	@ (34003988 <SystemCoreClockUpdate+0x34c>)
34003974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34003976:	6013      	str	r3, [r2, #0]
}
34003978:	bf00      	nop
3400397a:	3734      	adds	r7, #52	@ 0x34
3400397c:	46bd      	mov	sp, r7
3400397e:	f85d 7b04 	ldr.w	r7, [sp], #4
34003982:	4770      	bx	lr
34003984:	56028000 	.word	0x56028000
34003988:	3401f23c 	.word	0x3401f23c

3400398c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
3400398c:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34003990:	b588      	push	{r3, r7, lr}
34003992:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
34003994:	f7ff fe52 	bl	3400363c <SystemCoreClockUpdate>

  return SystemCoreClock;
34003998:	4b06      	ldr	r3, [pc, #24]	@ (340039b4 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
3400399a:	681b      	ldr	r3, [r3, #0]
}
3400399c:	4618      	mov	r0, r3
3400399e:	46bd      	mov	sp, r7
340039a0:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
340039a4:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
340039a8:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
340039ac:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
340039b0:	4774      	bxns	lr
340039b2:	bf00      	nop
340039b4:	3401f23c 	.word	0x3401f23c

340039b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
340039b8:	b580      	push	{r7, lr}
340039ba:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
340039bc:	2003      	movs	r0, #3
340039be:	f000 fb43 	bl	34004048 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
340039c2:	f7ff fe3b 	bl	3400363c <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
340039c6:	200f      	movs	r0, #15
340039c8:	f000 f812 	bl	340039f0 <HAL_InitTick>
340039cc:	4603      	mov	r3, r0
340039ce:	2b00      	cmp	r3, #0
340039d0:	d001      	beq.n	340039d6 <HAL_Init+0x1e>
  {
    return HAL_ERROR;
340039d2:	2301      	movs	r3, #1
340039d4:	e002      	b.n	340039dc <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
340039d6:	f000 f803 	bl	340039e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
340039da:	2300      	movs	r3, #0
}
340039dc:	4618      	mov	r0, r3
340039de:	bd80      	pop	{r7, pc}

340039e0 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
340039e0:	b480      	push	{r7}
340039e2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
340039e4:	bf00      	nop
340039e6:	46bd      	mov	sp, r7
340039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340039ec:	4770      	bx	lr
	...

340039f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
340039f0:	b580      	push	{r7, lr}
340039f2:	b082      	sub	sp, #8
340039f4:	af00      	add	r7, sp, #0
340039f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
340039f8:	4b15      	ldr	r3, [pc, #84]	@ (34003a50 <HAL_InitTick+0x60>)
340039fa:	781b      	ldrb	r3, [r3, #0]
340039fc:	2b00      	cmp	r3, #0
340039fe:	d101      	bne.n	34003a04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
34003a00:	2301      	movs	r3, #1
34003a02:	e021      	b.n	34003a48 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34003a04:	4b13      	ldr	r3, [pc, #76]	@ (34003a54 <HAL_InitTick+0x64>)
34003a06:	681a      	ldr	r2, [r3, #0]
34003a08:	4b11      	ldr	r3, [pc, #68]	@ (34003a50 <HAL_InitTick+0x60>)
34003a0a:	781b      	ldrb	r3, [r3, #0]
34003a0c:	4619      	mov	r1, r3
34003a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34003a12:	fbb3 f3f1 	udiv	r3, r3, r1
34003a16:	fbb2 f3f3 	udiv	r3, r2, r3
34003a1a:	4618      	mov	r0, r3
34003a1c:	f000 fba8 	bl	34004170 <HAL_SYSTICK_Config>
34003a20:	4603      	mov	r3, r0
34003a22:	2b00      	cmp	r3, #0
34003a24:	d001      	beq.n	34003a2a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
34003a26:	2301      	movs	r3, #1
34003a28:	e00e      	b.n	34003a48 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
34003a2a:	687b      	ldr	r3, [r7, #4]
34003a2c:	2b0f      	cmp	r3, #15
34003a2e:	d80a      	bhi.n	34003a46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34003a30:	2200      	movs	r2, #0
34003a32:	6879      	ldr	r1, [r7, #4]
34003a34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34003a38:	f000 fb26 	bl	34004088 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
34003a3c:	4a06      	ldr	r2, [pc, #24]	@ (34003a58 <HAL_InitTick+0x68>)
34003a3e:	687b      	ldr	r3, [r7, #4]
34003a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
34003a42:	2300      	movs	r3, #0
34003a44:	e000      	b.n	34003a48 <HAL_InitTick+0x58>
    return HAL_ERROR;
34003a46:	2301      	movs	r3, #1
}
34003a48:	4618      	mov	r0, r3
34003a4a:	3708      	adds	r7, #8
34003a4c:	46bd      	mov	sp, r7
34003a4e:	bd80      	pop	{r7, pc}
34003a50:	3401f244 	.word	0x3401f244
34003a54:	3401f23c 	.word	0x3401f23c
34003a58:	3401f240 	.word	0x3401f240

34003a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
34003a5c:	b480      	push	{r7}
34003a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
34003a60:	4b06      	ldr	r3, [pc, #24]	@ (34003a7c <HAL_IncTick+0x20>)
34003a62:	781b      	ldrb	r3, [r3, #0]
34003a64:	461a      	mov	r2, r3
34003a66:	4b06      	ldr	r3, [pc, #24]	@ (34003a80 <HAL_IncTick+0x24>)
34003a68:	681b      	ldr	r3, [r3, #0]
34003a6a:	4413      	add	r3, r2
34003a6c:	4a04      	ldr	r2, [pc, #16]	@ (34003a80 <HAL_IncTick+0x24>)
34003a6e:	6013      	str	r3, [r2, #0]
}
34003a70:	bf00      	nop
34003a72:	46bd      	mov	sp, r7
34003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
34003a78:	4770      	bx	lr
34003a7a:	bf00      	nop
34003a7c:	3401f244 	.word	0x3401f244
34003a80:	3401f5cc 	.word	0x3401f5cc

34003a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
34003a84:	b480      	push	{r7}
34003a86:	af00      	add	r7, sp, #0
  return uwTick;
34003a88:	4b03      	ldr	r3, [pc, #12]	@ (34003a98 <HAL_GetTick+0x14>)
34003a8a:	681b      	ldr	r3, [r3, #0]
}
34003a8c:	4618      	mov	r0, r3
34003a8e:	46bd      	mov	sp, r7
34003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
34003a94:	4770      	bx	lr
34003a96:	bf00      	nop
34003a98:	3401f5cc 	.word	0x3401f5cc

34003a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34003a9c:	b580      	push	{r7, lr}
34003a9e:	b084      	sub	sp, #16
34003aa0:	af00      	add	r7, sp, #0
34003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34003aa4:	f7ff ffee 	bl	34003a84 <HAL_GetTick>
34003aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34003aaa:	687b      	ldr	r3, [r7, #4]
34003aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34003aae:	68fb      	ldr	r3, [r7, #12]
34003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34003ab4:	d005      	beq.n	34003ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34003ab6:	4b0a      	ldr	r3, [pc, #40]	@ (34003ae0 <HAL_Delay+0x44>)
34003ab8:	781b      	ldrb	r3, [r3, #0]
34003aba:	461a      	mov	r2, r3
34003abc:	68fb      	ldr	r3, [r7, #12]
34003abe:	4413      	add	r3, r2
34003ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
34003ac2:	bf00      	nop
34003ac4:	f7ff ffde 	bl	34003a84 <HAL_GetTick>
34003ac8:	4602      	mov	r2, r0
34003aca:	68bb      	ldr	r3, [r7, #8]
34003acc:	1ad3      	subs	r3, r2, r3
34003ace:	68fa      	ldr	r2, [r7, #12]
34003ad0:	429a      	cmp	r2, r3
34003ad2:	d8f7      	bhi.n	34003ac4 <HAL_Delay+0x28>
  {
  }
}
34003ad4:	bf00      	nop
34003ad6:	bf00      	nop
34003ad8:	3710      	adds	r7, #16
34003ada:	46bd      	mov	sp, r7
34003adc:	bd80      	pop	{r7, pc}
34003ade:	bf00      	nop
34003ae0:	3401f244 	.word	0x3401f244

34003ae4 <HAL_BSEC_OTP_Read>:
  * @param  pFuseData  Returned value of fuse. The returned value is between 0 and 0xFFFFFFFFU
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Read(BSEC_HandleTypeDef * hbsec, uint32_t FuseId, uint32_t *pFuseData)
{
34003ae4:	b580      	push	{r7, lr}
34003ae6:	b084      	sub	sp, #16
34003ae8:	af00      	add	r7, sp, #0
34003aea:	60f8      	str	r0, [r7, #12]
34003aec:	60b9      	str	r1, [r7, #8]
34003aee:	607a      	str	r2, [r7, #4]
  /* Check the handle pointer */
  if (hbsec == NULL)
34003af0:	68fb      	ldr	r3, [r7, #12]
34003af2:	2b00      	cmp	r3, #0
34003af4:	d101      	bne.n	34003afa <HAL_BSEC_OTP_Read+0x16>
  {
    return HAL_ERROR;
34003af6:	2301      	movs	r3, #1
34003af8:	e026      	b.n	34003b48 <HAL_BSEC_OTP_Read+0x64>
  }

  /* Check the address of returned value and instance */
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
34003afa:	687b      	ldr	r3, [r7, #4]
34003afc:	2b00      	cmp	r3, #0
34003afe:	d004      	beq.n	34003b0a <HAL_BSEC_OTP_Read+0x26>
34003b00:	68fb      	ldr	r3, [r7, #12]
34003b02:	681b      	ldr	r3, [r3, #0]
34003b04:	4a12      	ldr	r2, [pc, #72]	@ (34003b50 <HAL_BSEC_OTP_Read+0x6c>)
34003b06:	4293      	cmp	r3, r2
34003b08:	d004      	beq.n	34003b14 <HAL_BSEC_OTP_Read+0x30>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003b0a:	68fb      	ldr	r3, [r7, #12]
34003b0c:	2201      	movs	r2, #1
34003b0e:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003b10:	2301      	movs	r3, #1
34003b12:	e019      	b.n	34003b48 <HAL_BSEC_OTP_Read+0x64>
  }

  if (FuseId < BSEC_NB_FUSES)
34003b14:	68bb      	ldr	r3, [r7, #8]
34003b16:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003b1a:	d211      	bcs.n	34003b40 <HAL_BSEC_OTP_Read+0x5c>
  {
    /* Reload the data :
       - Unshadowed fuse are not automatically reload and data no more available after register read
       - Shadowed fuse contains by default the shadow value in the register */
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
34003b1c:	68b9      	ldr	r1, [r7, #8]
34003b1e:	68f8      	ldr	r0, [r7, #12]
34003b20:	f000 f8ba 	bl	34003c98 <HAL_BSEC_OTP_Reload>
34003b24:	4603      	mov	r3, r0
34003b26:	2b00      	cmp	r3, #0
34003b28:	d108      	bne.n	34003b3c <HAL_BSEC_OTP_Read+0x58>
    {
      /* Read data from shadow register */
      *pFuseData = hbsec->Instance->FVRw[FuseId];
34003b2a:	68fb      	ldr	r3, [r7, #12]
34003b2c:	681b      	ldr	r3, [r3, #0]
34003b2e:	68ba      	ldr	r2, [r7, #8]
34003b30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003b34:	687b      	ldr	r3, [r7, #4]
34003b36:	601a      	str	r2, [r3, #0]
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
34003b38:	2300      	movs	r3, #0
34003b3a:	e005      	b.n	34003b48 <HAL_BSEC_OTP_Read+0x64>
      return HAL_ERROR;
34003b3c:	2301      	movs	r3, #1
34003b3e:	e003      	b.n	34003b48 <HAL_BSEC_OTP_Read+0x64>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003b40:	68fb      	ldr	r3, [r7, #12]
34003b42:	2201      	movs	r2, #1
34003b44:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003b46:	2301      	movs	r3, #1
}
34003b48:	4618      	mov	r0, r3
34003b4a:	3710      	adds	r7, #16
34003b4c:	46bd      	mov	sp, r7
34003b4e:	bd80      	pop	{r7, pc}
34003b50:	56009000 	.word	0x56009000

34003b54 <HAL_BSEC_OTP_Program>:
  * @param  Lock      Permanent lock value, this parameter is @ref BSEC_Permanent_Lock
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Program(BSEC_HandleTypeDef *hbsec, uint32_t FuseId, uint32_t FuseData, uint32_t Lock)
{
34003b54:	b580      	push	{r7, lr}
34003b56:	b088      	sub	sp, #32
34003b58:	af00      	add	r7, sp, #0
34003b5a:	60f8      	str	r0, [r7, #12]
34003b5c:	60b9      	str	r1, [r7, #8]
34003b5e:	607a      	str	r2, [r7, #4]
34003b60:	603b      	str	r3, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t read_data;
  uint32_t tick_start = HAL_GetTick();
34003b62:	f7ff ff8f 	bl	34003a84 <HAL_GetTick>
34003b66:	61f8      	str	r0, [r7, #28]

  /* Check the handle pointer */
  if (hbsec == NULL)
34003b68:	68fb      	ldr	r3, [r7, #12]
34003b6a:	2b00      	cmp	r3, #0
34003b6c:	d101      	bne.n	34003b72 <HAL_BSEC_OTP_Program+0x1e>
  {
    return HAL_ERROR;
34003b6e:	2301      	movs	r3, #1
34003b70:	e08a      	b.n	34003c88 <HAL_BSEC_OTP_Program+0x134>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34003b72:	68fb      	ldr	r3, [r7, #12]
34003b74:	681b      	ldr	r3, [r3, #0]
34003b76:	4a46      	ldr	r2, [pc, #280]	@ (34003c90 <HAL_BSEC_OTP_Program+0x13c>)
34003b78:	4293      	cmp	r3, r2
34003b7a:	d004      	beq.n	34003b86 <HAL_BSEC_OTP_Program+0x32>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003b7c:	68fb      	ldr	r3, [r7, #12]
34003b7e:	2201      	movs	r2, #1
34003b80:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003b82:	2301      	movs	r3, #1
34003b84:	e080      	b.n	34003c88 <HAL_BSEC_OTP_Program+0x134>
  }

  /* Check the permanent lock */
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
34003b86:	683b      	ldr	r3, [r7, #0]
34003b88:	2b00      	cmp	r3, #0
34003b8a:	d008      	beq.n	34003b9e <HAL_BSEC_OTP_Program+0x4a>
34003b8c:	683b      	ldr	r3, [r7, #0]
34003b8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34003b92:	d004      	beq.n	34003b9e <HAL_BSEC_OTP_Program+0x4a>
34003b94:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
34003b98:	483e      	ldr	r0, [pc, #248]	@ (34003c94 <HAL_BSEC_OTP_Program+0x140>)
34003b9a:	f7fd fe43 	bl	34001824 <assert_failed>

  /* Get the correct register value */
  if (FuseId < BSEC_NB_FUSES)
34003b9e:	68bb      	ldr	r3, [r7, #8]
34003ba0:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003ba4:	d26a      	bcs.n	34003c7c <HAL_BSEC_OTP_Program+0x128>
  {
    status_reg = FuseId / 32U;
34003ba6:	68bb      	ldr	r3, [r7, #8]
34003ba8:	095b      	lsrs	r3, r3, #5
34003baa:	61bb      	str	r3, [r7, #24]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34003bac:	68bb      	ldr	r3, [r7, #8]
34003bae:	f003 031f 	and.w	r3, r3, #31
34003bb2:	2201      	movs	r2, #1
34003bb4:	fa02 f303 	lsl.w	r3, r2, r3
34003bb8:	617b      	str	r3, [r7, #20]

    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34003bba:	68fb      	ldr	r3, [r7, #12]
34003bbc:	681b      	ldr	r3, [r3, #0]
34003bbe:	69ba      	ldr	r2, [r7, #24]
34003bc0:	f502 7200 	add.w	r2, r2, #512	@ 0x200
34003bc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003bc8:	697b      	ldr	r3, [r7, #20]
34003bca:	4013      	ands	r3, r2
34003bcc:	2b00      	cmp	r3, #0
34003bce:	d150      	bne.n	34003c72 <HAL_BSEC_OTP_Program+0x11e>
    {
      /* Write data in register */
      hbsec->Instance->WDR = FuseData;
34003bd0:	68fb      	ldr	r3, [r7, #12]
34003bd2:	681b      	ldr	r3, [r3, #0]
34003bd4:	687a      	ldr	r2, [r7, #4]
34003bd6:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08

      /* Perform a program of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
34003bda:	68fb      	ldr	r3, [r7, #12]
34003bdc:	681b      	ldr	r3, [r3, #0]
34003bde:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34003be2:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
34003be6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34003bea:	68b9      	ldr	r1, [r7, #8]
34003bec:	683a      	ldr	r2, [r7, #0]
34003bee:	430a      	orrs	r2, r1
34003bf0:	431a      	orrs	r2, r3
34003bf2:	68fb      	ldr	r3, [r7, #12]
34003bf4:	681b      	ldr	r3, [r3, #0]
34003bf6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
34003bfa:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
                                         (FuseId | BSEC_OTPCR_PROG | Lock));

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003bfe:	e00c      	b.n	34003c1a <HAL_BSEC_OTP_Program+0xc6>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34003c00:	f7ff ff40 	bl	34003a84 <HAL_GetTick>
34003c04:	4602      	mov	r2, r0
34003c06:	69fb      	ldr	r3, [r7, #28]
34003c08:	1ad3      	subs	r3, r2, r3
34003c0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34003c0e:	d904      	bls.n	34003c1a <HAL_BSEC_OTP_Program+0xc6>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34003c10:	68fb      	ldr	r3, [r7, #12]
34003c12:	220a      	movs	r2, #10
34003c14:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34003c16:	2301      	movs	r3, #1
34003c18:	e036      	b.n	34003c88 <HAL_BSEC_OTP_Program+0x134>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003c1a:	68fb      	ldr	r3, [r7, #12]
34003c1c:	681b      	ldr	r3, [r3, #0]
34003c1e:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003c22:	f003 0301 	and.w	r3, r3, #1
34003c26:	2b00      	cmp	r3, #0
34003c28:	d1ea      	bne.n	34003c00 <HAL_BSEC_OTP_Program+0xac>
        }
      }

      /* Check programming errors */
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
34003c2a:	68fb      	ldr	r3, [r7, #12]
34003c2c:	681b      	ldr	r3, [r3, #0]
34003c2e:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34003c36:	2b00      	cmp	r3, #0
34003c38:	d005      	beq.n	34003c46 <HAL_BSEC_OTP_Program+0xf2>
      {
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
34003c3a:	68fb      	ldr	r3, [r7, #12]
34003c3c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34003c40:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
34003c42:	2301      	movs	r3, #1
34003c44:	e020      	b.n	34003c88 <HAL_BSEC_OTP_Program+0x134>
      }

      /* Read back programmed data */
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
34003c46:	f107 0310 	add.w	r3, r7, #16
34003c4a:	461a      	mov	r2, r3
34003c4c:	68b9      	ldr	r1, [r7, #8]
34003c4e:	68f8      	ldr	r0, [r7, #12]
34003c50:	f7ff ff48 	bl	34003ae4 <HAL_BSEC_OTP_Read>
34003c54:	4603      	mov	r3, r0
34003c56:	2b00      	cmp	r3, #0
34003c58:	d109      	bne.n	34003c6e <HAL_BSEC_OTP_Program+0x11a>
      {
        /* Verify programmed data */
        if (read_data != FuseData)
34003c5a:	693b      	ldr	r3, [r7, #16]
34003c5c:	687a      	ldr	r2, [r7, #4]
34003c5e:	429a      	cmp	r2, r3
34003c60:	d011      	beq.n	34003c86 <HAL_BSEC_OTP_Program+0x132>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
34003c62:	68fb      	ldr	r3, [r7, #12]
34003c64:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34003c68:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34003c6a:	2301      	movs	r3, #1
34003c6c:	e00c      	b.n	34003c88 <HAL_BSEC_OTP_Program+0x134>
        }
      }
      else
      {
        return HAL_ERROR;
34003c6e:	2301      	movs	r3, #1
34003c70:	e00a      	b.n	34003c88 <HAL_BSEC_OTP_Program+0x134>
      }
    }
    else
    {
      /* Fuse is sticky programming locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34003c72:	68fb      	ldr	r3, [r7, #12]
34003c74:	2204      	movs	r2, #4
34003c76:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
34003c78:	2301      	movs	r3, #1
34003c7a:	e005      	b.n	34003c88 <HAL_BSEC_OTP_Program+0x134>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003c7c:	68fb      	ldr	r3, [r7, #12]
34003c7e:	2201      	movs	r2, #1
34003c80:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003c82:	2301      	movs	r3, #1
34003c84:	e000      	b.n	34003c88 <HAL_BSEC_OTP_Program+0x134>
  }

  return HAL_OK;
34003c86:	2300      	movs	r3, #0
}
34003c88:	4618      	mov	r0, r3
34003c8a:	3720      	adds	r7, #32
34003c8c:	46bd      	mov	sp, r7
34003c8e:	bd80      	pop	{r7, pc}
34003c90:	56009000 	.word	0x56009000
34003c94:	3401c98c 	.word	0x3401c98c

34003c98 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34003c98:	b580      	push	{r7, lr}
34003c9a:	b086      	sub	sp, #24
34003c9c:	af00      	add	r7, sp, #0
34003c9e:	6078      	str	r0, [r7, #4]
34003ca0:	6039      	str	r1, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
34003ca2:	f7ff feef 	bl	34003a84 <HAL_GetTick>
34003ca6:	6178      	str	r0, [r7, #20]

  /* Check the handle pointer */
  if (hbsec == NULL)
34003ca8:	687b      	ldr	r3, [r7, #4]
34003caa:	2b00      	cmp	r3, #0
34003cac:	d101      	bne.n	34003cb2 <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
34003cae:	2301      	movs	r3, #1
34003cb0:	e063      	b.n	34003d7a <HAL_BSEC_OTP_Reload+0xe2>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34003cb2:	687b      	ldr	r3, [r7, #4]
34003cb4:	681b      	ldr	r3, [r3, #0]
34003cb6:	4a33      	ldr	r2, [pc, #204]	@ (34003d84 <HAL_BSEC_OTP_Reload+0xec>)
34003cb8:	4293      	cmp	r3, r2
34003cba:	d004      	beq.n	34003cc6 <HAL_BSEC_OTP_Reload+0x2e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003cbc:	687b      	ldr	r3, [r7, #4]
34003cbe:	2201      	movs	r2, #1
34003cc0:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003cc2:	2301      	movs	r3, #1
34003cc4:	e059      	b.n	34003d7a <HAL_BSEC_OTP_Reload+0xe2>
  }

  if (FuseId < BSEC_NB_FUSES)
34003cc6:	683b      	ldr	r3, [r7, #0]
34003cc8:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003ccc:	d24f      	bcs.n	34003d6e <HAL_BSEC_OTP_Reload+0xd6>
  {
    status_reg = FuseId / 32U;
34003cce:	683b      	ldr	r3, [r7, #0]
34003cd0:	095b      	lsrs	r3, r3, #5
34003cd2:	613b      	str	r3, [r7, #16]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34003cd4:	683b      	ldr	r3, [r7, #0]
34003cd6:	f003 031f 	and.w	r3, r3, #31
34003cda:	2201      	movs	r2, #1
34003cdc:	fa02 f303 	lsl.w	r3, r2, r3
34003ce0:	60fb      	str	r3, [r7, #12]

    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34003ce2:	687b      	ldr	r3, [r7, #4]
34003ce4:	681b      	ldr	r3, [r3, #0]
34003ce6:	693a      	ldr	r2, [r7, #16]
34003ce8:	f502 7208 	add.w	r2, r2, #544	@ 0x220
34003cec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003cf0:	68fb      	ldr	r3, [r7, #12]
34003cf2:	4013      	ands	r3, r2
34003cf4:	2b00      	cmp	r3, #0
34003cf6:	d135      	bne.n	34003d64 <HAL_BSEC_OTP_Reload+0xcc>
    {
      /* Perform a reload of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
34003cf8:	687b      	ldr	r3, [r7, #4]
34003cfa:	681b      	ldr	r3, [r3, #0]
34003cfc:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34003d00:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
34003d04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34003d08:	687a      	ldr	r2, [r7, #4]
34003d0a:	6812      	ldr	r2, [r2, #0]
34003d0c:	6839      	ldr	r1, [r7, #0]
34003d0e:	430b      	orrs	r3, r1
34003d10:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003d14:	e00c      	b.n	34003d30 <HAL_BSEC_OTP_Reload+0x98>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34003d16:	f7ff feb5 	bl	34003a84 <HAL_GetTick>
34003d1a:	4602      	mov	r2, r0
34003d1c:	697b      	ldr	r3, [r7, #20]
34003d1e:	1ad3      	subs	r3, r2, r3
34003d20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34003d24:	d904      	bls.n	34003d30 <HAL_BSEC_OTP_Reload+0x98>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34003d26:	687b      	ldr	r3, [r7, #4]
34003d28:	220a      	movs	r2, #10
34003d2a:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34003d2c:	2301      	movs	r3, #1
34003d2e:	e024      	b.n	34003d7a <HAL_BSEC_OTP_Reload+0xe2>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003d30:	687b      	ldr	r3, [r7, #4]
34003d32:	681b      	ldr	r3, [r3, #0]
34003d34:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003d38:	f003 0301 	and.w	r3, r3, #1
34003d3c:	2b00      	cmp	r3, #0
34003d3e:	d1ea      	bne.n	34003d16 <HAL_BSEC_OTP_Reload+0x7e>
        }
      }

      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
34003d40:	687b      	ldr	r3, [r7, #4]
34003d42:	681b      	ldr	r3, [r3, #0]
34003d44:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003d48:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
34003d4c:	2b00      	cmp	r3, #0
34003d4e:	d013      	beq.n	34003d78 <HAL_BSEC_OTP_Reload+0xe0>
      {
        /* An error occurred during reloading, value can't be relied on */
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
34003d50:	687b      	ldr	r3, [r7, #4]
34003d52:	681b      	ldr	r3, [r3, #0]
34003d54:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003d58:	f403 028c 	and.w	r2, r3, #4587520	@ 0x460000
34003d5c:	687b      	ldr	r3, [r7, #4]
34003d5e:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
34003d60:	2301      	movs	r3, #1
34003d62:	e00a      	b.n	34003d7a <HAL_BSEC_OTP_Reload+0xe2>
      }
    }
    else
    {
      /* Shadow register is sticky reload locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34003d64:	687b      	ldr	r3, [r7, #4]
34003d66:	2204      	movs	r2, #4
34003d68:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
34003d6a:	2301      	movs	r3, #1
34003d6c:	e005      	b.n	34003d7a <HAL_BSEC_OTP_Reload+0xe2>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003d6e:	687b      	ldr	r3, [r7, #4]
34003d70:	2201      	movs	r2, #1
34003d72:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003d74:	2301      	movs	r3, #1
34003d76:	e000      	b.n	34003d7a <HAL_BSEC_OTP_Reload+0xe2>
  }

  return HAL_OK;
34003d78:	2300      	movs	r3, #0
}
34003d7a:	4618      	mov	r0, r3
34003d7c:	3718      	adds	r7, #24
34003d7e:	46bd      	mov	sp, r7
34003d80:	bd80      	pop	{r7, pc}
34003d82:	bf00      	nop
34003d84:	56009000 	.word	0x56009000

34003d88 <HAL_CACHEAXI_Init>:
  * @note   In case HAL_CACHEAXI_Init() returns HAL_BUSY because an invalidation
  *         procedure is ongoing, the application should call again HAL_CACHEAXI_Init()
  *         until it returns HAL_OK to have the CACHEAXI enabled
  */
HAL_StatusTypeDef  HAL_CACHEAXI_Init(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34003d88:	b580      	push	{r7, lr}
34003d8a:	b084      	sub	sp, #16
34003d8c:	af00      	add	r7, sp, #0
34003d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the CACHEAXI handle allocation */
  if (hcacheaxi == NULL)
34003d90:	687b      	ldr	r3, [r7, #4]
34003d92:	2b00      	cmp	r3, #0
34003d94:	d101      	bne.n	34003d9a <HAL_CACHEAXI_Init+0x12>
  {
    return HAL_ERROR;
34003d96:	2301      	movs	r3, #1
34003d98:	e021      	b.n	34003dde <HAL_CACHEAXI_Init+0x56>
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34003d9a:	687b      	ldr	r3, [r7, #4]
34003d9c:	681b      	ldr	r3, [r3, #0]
34003d9e:	4a12      	ldr	r2, [pc, #72]	@ (34003de8 <HAL_CACHEAXI_Init+0x60>)
34003da0:	4293      	cmp	r3, r2
34003da2:	d008      	beq.n	34003db6 <HAL_CACHEAXI_Init+0x2e>
34003da4:	687b      	ldr	r3, [r7, #4]
34003da6:	681b      	ldr	r3, [r3, #0]
34003da8:	4a10      	ldr	r2, [pc, #64]	@ (34003dec <HAL_CACHEAXI_Init+0x64>)
34003daa:	4293      	cmp	r3, r2
34003dac:	d003      	beq.n	34003db6 <HAL_CACHEAXI_Init+0x2e>
34003dae:	21bc      	movs	r1, #188	@ 0xbc
34003db0:	480f      	ldr	r0, [pc, #60]	@ (34003df0 <HAL_CACHEAXI_Init+0x68>)
34003db2:	f7fd fd37 	bl	34001824 <assert_failed>

  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
34003db6:	687b      	ldr	r3, [r7, #4]
34003db8:	791b      	ldrb	r3, [r3, #4]
34003dba:	b2db      	uxtb	r3, r3
34003dbc:	2b00      	cmp	r3, #0
34003dbe:	d102      	bne.n	34003dc6 <HAL_CACHEAXI_Init+0x3e>

    /* Init the low level hardware */
    hcacheaxi->MspInitCallback(hcacheaxi);
#else
    /* Init the low level hardware */
    HAL_CACHEAXI_MspInit(hcacheaxi);
34003dc0:	6878      	ldr	r0, [r7, #4]
34003dc2:	f7fd fd17 	bl	340017f4 <HAL_CACHEAXI_MspInit>
#endif /* USE_HAL_CACHEAXI_REGISTER_CALLBACKS */
  }

  /* Init the error code */
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34003dc6:	687b      	ldr	r3, [r7, #4]
34003dc8:	2200      	movs	r2, #0
34003dca:	609a      	str	r2, [r3, #8]

  /* Init the CACHEAXI handle state */
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
34003dcc:	687b      	ldr	r3, [r7, #4]
34003dce:	2201      	movs	r2, #1
34003dd0:	711a      	strb	r2, [r3, #4]

  /* Enable the selected CACHEAXI peripheral */
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34003dd2:	6878      	ldr	r0, [r7, #4]
34003dd4:	f000 f80e 	bl	34003df4 <HAL_CACHEAXI_Enable>
34003dd8:	4603      	mov	r3, r0
34003dda:	73fb      	strb	r3, [r7, #15]

  return status;
34003ddc:	7bfb      	ldrb	r3, [r7, #15]
}
34003dde:	4618      	mov	r0, r3
34003de0:	3710      	adds	r7, #16
34003de2:	46bd      	mov	sp, r7
34003de4:	bd80      	pop	{r7, pc}
34003de6:	bf00      	nop
34003de8:	580dfc00 	.word	0x580dfc00
34003dec:	480dfc00 	.word	0x480dfc00
34003df0:	3401ca30 	.word	0x3401ca30

34003df4 <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34003df4:	b580      	push	{r7, lr}
34003df6:	b084      	sub	sp, #16
34003df8:	af00      	add	r7, sp, #0
34003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34003dfc:	2300      	movs	r3, #0
34003dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
34003e00:	687b      	ldr	r3, [r7, #4]
34003e02:	2b00      	cmp	r3, #0
34003e04:	d101      	bne.n	34003e0a <HAL_CACHEAXI_Enable+0x16>
  {
    return HAL_ERROR;
34003e06:	2301      	movs	r3, #1
34003e08:	e043      	b.n	34003e92 <HAL_CACHEAXI_Enable+0x9e>
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34003e0a:	687b      	ldr	r3, [r7, #4]
34003e0c:	681b      	ldr	r3, [r3, #0]
34003e0e:	4a23      	ldr	r2, [pc, #140]	@ (34003e9c <HAL_CACHEAXI_Enable+0xa8>)
34003e10:	4293      	cmp	r3, r2
34003e12:	d009      	beq.n	34003e28 <HAL_CACHEAXI_Enable+0x34>
34003e14:	687b      	ldr	r3, [r7, #4]
34003e16:	681b      	ldr	r3, [r3, #0]
34003e18:	4a21      	ldr	r2, [pc, #132]	@ (34003ea0 <HAL_CACHEAXI_Enable+0xac>)
34003e1a:	4293      	cmp	r3, r2
34003e1c:	d004      	beq.n	34003e28 <HAL_CACHEAXI_Enable+0x34>
34003e1e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
34003e22:	4820      	ldr	r0, [pc, #128]	@ (34003ea4 <HAL_CACHEAXI_Enable+0xb0>)
34003e24:	f7fd fcfe 	bl	34001824 <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
34003e28:	687b      	ldr	r3, [r7, #4]
34003e2a:	681b      	ldr	r3, [r3, #0]
34003e2c:	685b      	ldr	r3, [r3, #4]
34003e2e:	f003 0301 	and.w	r3, r3, #1
34003e32:	2b00      	cmp	r3, #0
34003e34:	d01e      	beq.n	34003e74 <HAL_CACHEAXI_Enable+0x80>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
34003e36:	f7ff fe25 	bl	34003a84 <HAL_GetTick>
34003e3a:	60b8      	str	r0, [r7, #8]

    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
34003e3c:	e013      	b.n	34003e66 <HAL_CACHEAXI_Enable+0x72>
    {
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
34003e3e:	f7ff fe21 	bl	34003a84 <HAL_GetTick>
34003e42:	4602      	mov	r2, r0
34003e44:	68bb      	ldr	r3, [r7, #8]
34003e46:	1ad3      	subs	r3, r2, r3
34003e48:	2b01      	cmp	r3, #1
34003e4a:	d90c      	bls.n	34003e66 <HAL_CACHEAXI_Enable+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
34003e4c:	687b      	ldr	r3, [r7, #4]
34003e4e:	681b      	ldr	r3, [r3, #0]
34003e50:	685b      	ldr	r3, [r3, #4]
34003e52:	f003 0301 	and.w	r3, r3, #1
34003e56:	2b00      	cmp	r3, #0
34003e58:	d105      	bne.n	34003e66 <HAL_CACHEAXI_Enable+0x72>
        {
          /* Update error code */
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
34003e5a:	687b      	ldr	r3, [r7, #4]
34003e5c:	2210      	movs	r2, #16
34003e5e:	609a      	str	r2, [r3, #8]
          /* Return error status */
          status =  HAL_ERROR;
34003e60:	2301      	movs	r3, #1
34003e62:	73fb      	strb	r3, [r7, #15]
          break;
34003e64:	e006      	b.n	34003e74 <HAL_CACHEAXI_Enable+0x80>
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
34003e66:	687b      	ldr	r3, [r7, #4]
34003e68:	681b      	ldr	r3, [r3, #0]
34003e6a:	685b      	ldr	r3, [r3, #4]
34003e6c:	f003 0301 	and.w	r3, r3, #1
34003e70:	2b00      	cmp	r3, #0
34003e72:	d1e4      	bne.n	34003e3e <HAL_CACHEAXI_Enable+0x4a>
        }
      }
    }
  }

  if (status == HAL_OK)
34003e74:	7bfb      	ldrb	r3, [r7, #15]
34003e76:	2b00      	cmp	r3, #0
34003e78:	d10a      	bne.n	34003e90 <HAL_CACHEAXI_Enable+0x9c>
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34003e7a:	687b      	ldr	r3, [r7, #4]
34003e7c:	2200      	movs	r2, #0
34003e7e:	609a      	str	r2, [r3, #8]
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
34003e80:	687b      	ldr	r3, [r7, #4]
34003e82:	681b      	ldr	r3, [r3, #0]
34003e84:	681a      	ldr	r2, [r3, #0]
34003e86:	687b      	ldr	r3, [r7, #4]
34003e88:	681b      	ldr	r3, [r3, #0]
34003e8a:	f042 0201 	orr.w	r2, r2, #1
34003e8e:	601a      	str	r2, [r3, #0]
  }

  return status;
34003e90:	7bfb      	ldrb	r3, [r7, #15]
}
34003e92:	4618      	mov	r0, r3
34003e94:	3710      	adds	r7, #16
34003e96:	46bd      	mov	sp, r7
34003e98:	bd80      	pop	{r7, pc}
34003e9a:	bf00      	nop
34003e9c:	580dfc00 	.word	0x580dfc00
34003ea0:	480dfc00 	.word	0x480dfc00
34003ea4:	3401ca30 	.word	0x3401ca30

34003ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34003ea8:	b480      	push	{r7}
34003eaa:	b085      	sub	sp, #20
34003eac:	af00      	add	r7, sp, #0
34003eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
34003eb0:	687b      	ldr	r3, [r7, #4]
34003eb2:	f003 0307 	and.w	r3, r3, #7
34003eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (34003eec <__NVIC_SetPriorityGrouping+0x44>)
34003eba:	68db      	ldr	r3, [r3, #12]
34003ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34003ebe:	68ba      	ldr	r2, [r7, #8]
34003ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34003ec4:	4013      	ands	r3, r2
34003ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34003ec8:	68fb      	ldr	r3, [r7, #12]
34003eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34003ecc:	68bb      	ldr	r3, [r7, #8]
34003ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34003ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34003ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34003ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
34003eda:	4a04      	ldr	r2, [pc, #16]	@ (34003eec <__NVIC_SetPriorityGrouping+0x44>)
34003edc:	68bb      	ldr	r3, [r7, #8]
34003ede:	60d3      	str	r3, [r2, #12]
}
34003ee0:	bf00      	nop
34003ee2:	3714      	adds	r7, #20
34003ee4:	46bd      	mov	sp, r7
34003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
34003eea:	4770      	bx	lr
34003eec:	e000ed00 	.word	0xe000ed00

34003ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
34003ef0:	b480      	push	{r7}
34003ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34003ef4:	4b04      	ldr	r3, [pc, #16]	@ (34003f08 <__NVIC_GetPriorityGrouping+0x18>)
34003ef6:	68db      	ldr	r3, [r3, #12]
34003ef8:	0a1b      	lsrs	r3, r3, #8
34003efa:	f003 0307 	and.w	r3, r3, #7
}
34003efe:	4618      	mov	r0, r3
34003f00:	46bd      	mov	sp, r7
34003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
34003f06:	4770      	bx	lr
34003f08:	e000ed00 	.word	0xe000ed00

34003f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
34003f0c:	b480      	push	{r7}
34003f0e:	b083      	sub	sp, #12
34003f10:	af00      	add	r7, sp, #0
34003f12:	4603      	mov	r3, r0
34003f14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34003f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34003f1a:	2b00      	cmp	r3, #0
34003f1c:	db0b      	blt.n	34003f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34003f1e:	88fb      	ldrh	r3, [r7, #6]
34003f20:	f003 021f 	and.w	r2, r3, #31
34003f24:	4907      	ldr	r1, [pc, #28]	@ (34003f44 <__NVIC_EnableIRQ+0x38>)
34003f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34003f2a:	095b      	lsrs	r3, r3, #5
34003f2c:	2001      	movs	r0, #1
34003f2e:	fa00 f202 	lsl.w	r2, r0, r2
34003f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
34003f36:	bf00      	nop
34003f38:	370c      	adds	r7, #12
34003f3a:	46bd      	mov	sp, r7
34003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34003f40:	4770      	bx	lr
34003f42:	bf00      	nop
34003f44:	e000e100 	.word	0xe000e100

34003f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
34003f48:	b480      	push	{r7}
34003f4a:	b083      	sub	sp, #12
34003f4c:	af00      	add	r7, sp, #0
34003f4e:	4603      	mov	r3, r0
34003f50:	6039      	str	r1, [r7, #0]
34003f52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34003f54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34003f58:	2b00      	cmp	r3, #0
34003f5a:	db0a      	blt.n	34003f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34003f5c:	683b      	ldr	r3, [r7, #0]
34003f5e:	b2da      	uxtb	r2, r3
34003f60:	490c      	ldr	r1, [pc, #48]	@ (34003f94 <__NVIC_SetPriority+0x4c>)
34003f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34003f66:	0112      	lsls	r2, r2, #4
34003f68:	b2d2      	uxtb	r2, r2
34003f6a:	440b      	add	r3, r1
34003f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
34003f70:	e00a      	b.n	34003f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34003f72:	683b      	ldr	r3, [r7, #0]
34003f74:	b2da      	uxtb	r2, r3
34003f76:	4908      	ldr	r1, [pc, #32]	@ (34003f98 <__NVIC_SetPriority+0x50>)
34003f78:	88fb      	ldrh	r3, [r7, #6]
34003f7a:	f003 030f 	and.w	r3, r3, #15
34003f7e:	3b04      	subs	r3, #4
34003f80:	0112      	lsls	r2, r2, #4
34003f82:	b2d2      	uxtb	r2, r2
34003f84:	440b      	add	r3, r1
34003f86:	761a      	strb	r2, [r3, #24]
}
34003f88:	bf00      	nop
34003f8a:	370c      	adds	r7, #12
34003f8c:	46bd      	mov	sp, r7
34003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
34003f92:	4770      	bx	lr
34003f94:	e000e100 	.word	0xe000e100
34003f98:	e000ed00 	.word	0xe000ed00

34003f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34003f9c:	b480      	push	{r7}
34003f9e:	b089      	sub	sp, #36	@ 0x24
34003fa0:	af00      	add	r7, sp, #0
34003fa2:	60f8      	str	r0, [r7, #12]
34003fa4:	60b9      	str	r1, [r7, #8]
34003fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34003fa8:	68fb      	ldr	r3, [r7, #12]
34003faa:	f003 0307 	and.w	r3, r3, #7
34003fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34003fb0:	69fb      	ldr	r3, [r7, #28]
34003fb2:	f1c3 0307 	rsb	r3, r3, #7
34003fb6:	2b04      	cmp	r3, #4
34003fb8:	bf28      	it	cs
34003fba:	2304      	movcs	r3, #4
34003fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34003fbe:	69fb      	ldr	r3, [r7, #28]
34003fc0:	3304      	adds	r3, #4
34003fc2:	2b06      	cmp	r3, #6
34003fc4:	d902      	bls.n	34003fcc <NVIC_EncodePriority+0x30>
34003fc6:	69fb      	ldr	r3, [r7, #28]
34003fc8:	3b03      	subs	r3, #3
34003fca:	e000      	b.n	34003fce <NVIC_EncodePriority+0x32>
34003fcc:	2300      	movs	r3, #0
34003fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34003fd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34003fd4:	69bb      	ldr	r3, [r7, #24]
34003fd6:	fa02 f303 	lsl.w	r3, r2, r3
34003fda:	43da      	mvns	r2, r3
34003fdc:	68bb      	ldr	r3, [r7, #8]
34003fde:	401a      	ands	r2, r3
34003fe0:	697b      	ldr	r3, [r7, #20]
34003fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34003fe4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
34003fe8:	697b      	ldr	r3, [r7, #20]
34003fea:	fa01 f303 	lsl.w	r3, r1, r3
34003fee:	43d9      	mvns	r1, r3
34003ff0:	687b      	ldr	r3, [r7, #4]
34003ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34003ff4:	4313      	orrs	r3, r2
         );
}
34003ff6:	4618      	mov	r0, r3
34003ff8:	3724      	adds	r7, #36	@ 0x24
34003ffa:	46bd      	mov	sp, r7
34003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
34004000:	4770      	bx	lr
	...

34004004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
34004004:	b580      	push	{r7, lr}
34004006:	b082      	sub	sp, #8
34004008:	af00      	add	r7, sp, #0
3400400a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
3400400c:	687b      	ldr	r3, [r7, #4]
3400400e:	3b01      	subs	r3, #1
34004010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34004014:	d301      	bcc.n	3400401a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
34004016:	2301      	movs	r3, #1
34004018:	e00f      	b.n	3400403a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
3400401a:	4a0a      	ldr	r2, [pc, #40]	@ (34004044 <SysTick_Config+0x40>)
3400401c:	687b      	ldr	r3, [r7, #4]
3400401e:	3b01      	subs	r3, #1
34004020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
34004022:	210f      	movs	r1, #15
34004024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34004028:	f7ff ff8e 	bl	34003f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
3400402c:	4b05      	ldr	r3, [pc, #20]	@ (34004044 <SysTick_Config+0x40>)
3400402e:	2200      	movs	r2, #0
34004030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34004032:	4b04      	ldr	r3, [pc, #16]	@ (34004044 <SysTick_Config+0x40>)
34004034:	2207      	movs	r2, #7
34004036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34004038:	2300      	movs	r3, #0
}
3400403a:	4618      	mov	r0, r3
3400403c:	3708      	adds	r7, #8
3400403e:	46bd      	mov	sp, r7
34004040:	bd80      	pop	{r7, pc}
34004042:	bf00      	nop
34004044:	e000e010 	.word	0xe000e010

34004048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34004048:	b580      	push	{r7, lr}
3400404a:	b082      	sub	sp, #8
3400404c:	af00      	add	r7, sp, #0
3400404e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34004050:	687b      	ldr	r3, [r7, #4]
34004052:	2b07      	cmp	r3, #7
34004054:	d00f      	beq.n	34004076 <HAL_NVIC_SetPriorityGrouping+0x2e>
34004056:	687b      	ldr	r3, [r7, #4]
34004058:	2b06      	cmp	r3, #6
3400405a:	d00c      	beq.n	34004076 <HAL_NVIC_SetPriorityGrouping+0x2e>
3400405c:	687b      	ldr	r3, [r7, #4]
3400405e:	2b05      	cmp	r3, #5
34004060:	d009      	beq.n	34004076 <HAL_NVIC_SetPriorityGrouping+0x2e>
34004062:	687b      	ldr	r3, [r7, #4]
34004064:	2b04      	cmp	r3, #4
34004066:	d006      	beq.n	34004076 <HAL_NVIC_SetPriorityGrouping+0x2e>
34004068:	687b      	ldr	r3, [r7, #4]
3400406a:	2b03      	cmp	r3, #3
3400406c:	d003      	beq.n	34004076 <HAL_NVIC_SetPriorityGrouping+0x2e>
3400406e:	21e6      	movs	r1, #230	@ 0xe6
34004070:	4804      	ldr	r0, [pc, #16]	@ (34004084 <HAL_NVIC_SetPriorityGrouping+0x3c>)
34004072:	f7fd fbd7 	bl	34001824 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
34004076:	6878      	ldr	r0, [r7, #4]
34004078:	f7ff ff16 	bl	34003ea8 <__NVIC_SetPriorityGrouping>
}
3400407c:	bf00      	nop
3400407e:	3708      	adds	r7, #8
34004080:	46bd      	mov	sp, r7
34004082:	bd80      	pop	{r7, pc}
34004084:	3401cad8 	.word	0x3401cad8

34004088 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
34004088:	b580      	push	{r7, lr}
3400408a:	b086      	sub	sp, #24
3400408c:	af00      	add	r7, sp, #0
3400408e:	4603      	mov	r3, r0
34004090:	60b9      	str	r1, [r7, #8]
34004092:	607a      	str	r2, [r7, #4]
34004094:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34004096:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
3400409a:	f113 0f0c 	cmn.w	r3, #12
3400409e:	db04      	blt.n	340040aa <HAL_NVIC_SetPriority+0x22>
340040a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
340040a4:	f113 0f04 	cmn.w	r3, #4
340040a8:	d103      	bne.n	340040b2 <HAL_NVIC_SetPriority+0x2a>
340040aa:	21ff      	movs	r1, #255	@ 0xff
340040ac:	4822      	ldr	r0, [pc, #136]	@ (34004138 <HAL_NVIC_SetPriority+0xb0>)
340040ae:	f7fd fbb9 	bl	34001824 <assert_failed>

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
340040b2:	f7ff ff1d 	bl	34003ef0 <__NVIC_GetPriorityGrouping>
340040b6:	4603      	mov	r3, r0
340040b8:	f003 0307 	and.w	r3, r3, #7
340040bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
340040be:	697b      	ldr	r3, [r7, #20]
340040c0:	2b02      	cmp	r3, #2
340040c2:	d806      	bhi.n	340040d2 <HAL_NVIC_SetPriority+0x4a>
340040c4:	687b      	ldr	r3, [r7, #4]
340040c6:	2b00      	cmp	r3, #0
340040c8:	bf0c      	ite	eq
340040ca:	2301      	moveq	r3, #1
340040cc:	2300      	movne	r3, #0
340040ce:	b2db      	uxtb	r3, r3
340040d0:	e00a      	b.n	340040e8 <HAL_NVIC_SetPriority+0x60>
340040d2:	697b      	ldr	r3, [r7, #20]
340040d4:	3b03      	subs	r3, #3
340040d6:	2201      	movs	r2, #1
340040d8:	fa02 f303 	lsl.w	r3, r2, r3
340040dc:	687a      	ldr	r2, [r7, #4]
340040de:	429a      	cmp	r2, r3
340040e0:	bf34      	ite	cc
340040e2:	2301      	movcc	r3, #1
340040e4:	2300      	movcs	r3, #0
340040e6:	b2db      	uxtb	r3, r3
340040e8:	2b00      	cmp	r3, #0
340040ea:	d104      	bne.n	340040f6 <HAL_NVIC_SetPriority+0x6e>
340040ec:	f44f 7181 	mov.w	r1, #258	@ 0x102
340040f0:	4811      	ldr	r0, [pc, #68]	@ (34004138 <HAL_NVIC_SetPriority+0xb0>)
340040f2:	f7fd fb97 	bl	34001824 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
340040f6:	68bb      	ldr	r3, [r7, #8]
340040f8:	2b0f      	cmp	r3, #15
340040fa:	d808      	bhi.n	3400410e <HAL_NVIC_SetPriority+0x86>
340040fc:	697b      	ldr	r3, [r7, #20]
340040fe:	f1c3 0307 	rsb	r3, r3, #7
34004102:	2201      	movs	r2, #1
34004104:	fa02 f303 	lsl.w	r3, r2, r3
34004108:	68ba      	ldr	r2, [r7, #8]
3400410a:	429a      	cmp	r2, r3
3400410c:	d304      	bcc.n	34004118 <HAL_NVIC_SetPriority+0x90>
3400410e:	f240 1103 	movw	r1, #259	@ 0x103
34004112:	4809      	ldr	r0, [pc, #36]	@ (34004138 <HAL_NVIC_SetPriority+0xb0>)
34004114:	f7fd fb86 	bl	34001824 <assert_failed>

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
34004118:	687a      	ldr	r2, [r7, #4]
3400411a:	68b9      	ldr	r1, [r7, #8]
3400411c:	6978      	ldr	r0, [r7, #20]
3400411e:	f7ff ff3d 	bl	34003f9c <NVIC_EncodePriority>
34004122:	4602      	mov	r2, r0
34004124:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34004128:	4611      	mov	r1, r2
3400412a:	4618      	mov	r0, r3
3400412c:	f7ff ff0c 	bl	34003f48 <__NVIC_SetPriority>
}
34004130:	bf00      	nop
34004132:	3718      	adds	r7, #24
34004134:	46bd      	mov	sp, r7
34004136:	bd80      	pop	{r7, pc}
34004138:	3401cad8 	.word	0x3401cad8

3400413c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
3400413c:	b580      	push	{r7, lr}
3400413e:	b082      	sub	sp, #8
34004140:	af00      	add	r7, sp, #0
34004142:	4603      	mov	r3, r0
34004144:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34004146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3400414a:	2b00      	cmp	r3, #0
3400414c:	da04      	bge.n	34004158 <HAL_NVIC_EnableIRQ+0x1c>
3400414e:	f240 1115 	movw	r1, #277	@ 0x115
34004152:	4806      	ldr	r0, [pc, #24]	@ (3400416c <HAL_NVIC_EnableIRQ+0x30>)
34004154:	f7fd fb66 	bl	34001824 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
34004158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3400415c:	4618      	mov	r0, r3
3400415e:	f7ff fed5 	bl	34003f0c <__NVIC_EnableIRQ>
}
34004162:	bf00      	nop
34004164:	3708      	adds	r7, #8
34004166:	46bd      	mov	sp, r7
34004168:	bd80      	pop	{r7, pc}
3400416a:	bf00      	nop
3400416c:	3401cad8 	.word	0x3401cad8

34004170 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34004170:	b580      	push	{r7, lr}
34004172:	b082      	sub	sp, #8
34004174:	af00      	add	r7, sp, #0
34004176:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34004178:	6878      	ldr	r0, [r7, #4]
3400417a:	f7ff ff43 	bl	34004004 <SysTick_Config>
3400417e:	4603      	mov	r3, r0
}
34004180:	4618      	mov	r0, r3
34004182:	3708      	adds	r7, #8
34004184:	46bd      	mov	sp, r7
34004186:	bd80      	pop	{r7, pc}

34004188 <HAL_DCMIPP_IRQHandler>:
  * @brief  Handles DCMIPP interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
34004188:	b580      	push	{r7, lr}
3400418a:	b084      	sub	sp, #16
3400418c:	af00      	add	r7, sp, #0
3400418e:	6078      	str	r0, [r7, #4]
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
34004190:	687b      	ldr	r3, [r7, #4]
34004192:	681b      	ldr	r3, [r3, #0]
34004194:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
34004198:	60fb      	str	r3, [r7, #12]
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
3400419a:	687b      	ldr	r3, [r7, #4]
3400419c:	681b      	ldr	r3, [r3, #0]
3400419e:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
340041a2:	60bb      	str	r3, [r7, #8]

  /* ========================= PIPE0 INTERRUPTS ==================== */
  /* Limit error on the PIPE0 ********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
340041a4:	68fb      	ldr	r3, [r7, #12]
340041a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
340041aa:	2b00      	cmp	r3, #0
340041ac:	d01e      	beq.n	340041ec <HAL_DCMIPP_IRQHandler+0x64>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
340041ae:	68bb      	ldr	r3, [r7, #8]
340041b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
340041b4:	2b00      	cmp	r3, #0
340041b6:	d019      	beq.n	340041ec <HAL_DCMIPP_IRQHandler+0x64>
    {
      /* Disable Limit error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
340041b8:	687b      	ldr	r3, [r7, #4]
340041ba:	681b      	ldr	r3, [r3, #0]
340041bc:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340041c0:	687b      	ldr	r3, [r7, #4]
340041c2:	681b      	ldr	r3, [r3, #0]
340041c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
340041c8:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
340041cc:	687b      	ldr	r3, [r7, #4]
340041ce:	689b      	ldr	r3, [r3, #8]
340041d0:	f043 0204 	orr.w	r2, r3, #4
340041d4:	687b      	ldr	r3, [r7, #4]
340041d6:	609a      	str	r2, [r3, #8]

      /* Clear the Limit error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
340041d8:	687b      	ldr	r3, [r7, #4]
340041da:	681b      	ldr	r3, [r3, #0]
340041dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340041e0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LIMIT Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
340041e4:	2100      	movs	r1, #0
340041e6:	6878      	ldr	r0, [r7, #4]
340041e8:	f000 fe67 	bl	34004eba <HAL_DCMIPP_PIPE_LimitEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
340041ec:	68fb      	ldr	r3, [r7, #12]
340041ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340041f2:	2b00      	cmp	r3, #0
340041f4:	d00e      	beq.n	34004214 <HAL_DCMIPP_IRQHandler+0x8c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
340041f6:	68bb      	ldr	r3, [r7, #8]
340041f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340041fc:	2b00      	cmp	r3, #0
340041fe:	d009      	beq.n	34004214 <HAL_DCMIPP_IRQHandler+0x8c>
    {
      /* Clear the VSYNC flag for pipe0 */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34004200:	687b      	ldr	r3, [r7, #4]
34004202:	681b      	ldr	r3, [r3, #0]
34004204:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34004208:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
3400420c:	2100      	movs	r1, #0
3400420e:	6878      	ldr	r0, [r7, #4]
34004210:	f013 fc0c 	bl	34017a2c <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* FRAME interrupt management ****************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
34004214:	68fb      	ldr	r3, [r7, #12]
34004216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400421a:	2b00      	cmp	r3, #0
3400421c:	d023      	beq.n	34004266 <HAL_DCMIPP_IRQHandler+0xde>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
3400421e:	68bb      	ldr	r3, [r7, #8]
34004220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004224:	2b00      	cmp	r3, #0
34004226:	d01e      	beq.n	34004266 <HAL_DCMIPP_IRQHandler+0xde>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004228:	687b      	ldr	r3, [r7, #4]
3400422a:	681b      	ldr	r3, [r3, #0]
3400422c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004230:	f003 0304 	and.w	r3, r3, #4
34004234:	2b04      	cmp	r3, #4
34004236:	d10c      	bne.n	34004252 <HAL_DCMIPP_IRQHandler+0xca>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
34004238:	687b      	ldr	r3, [r7, #4]
3400423a:	681b      	ldr	r3, [r3, #0]
3400423c:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34004240:	687b      	ldr	r3, [r7, #4]
34004242:	681b      	ldr	r3, [r3, #0]
34004244:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
34004248:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
3400424c:	687b      	ldr	r3, [r7, #4]
3400424e:	2201      	movs	r2, #1
34004250:	715a      	strb	r2, [r3, #5]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34004252:	687b      	ldr	r3, [r7, #4]
34004254:	681b      	ldr	r3, [r3, #0]
34004256:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400425a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
3400425e:	2100      	movs	r1, #0
34004260:	6878      	ldr	r0, [r7, #4]
34004262:	f013 fbfd 	bl	34017a60 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* LINE interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
34004266:	68fb      	ldr	r3, [r7, #12]
34004268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400426c:	2b00      	cmp	r3, #0
3400426e:	d00e      	beq.n	3400428e <HAL_DCMIPP_IRQHandler+0x106>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34004270:	68bb      	ldr	r3, [r7, #8]
34004272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004276:	2b00      	cmp	r3, #0
34004278:	d009      	beq.n	3400428e <HAL_DCMIPP_IRQHandler+0x106>
    {
      /* Clear the LINE flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
3400427a:	687b      	ldr	r3, [r7, #4]
3400427c:	681b      	ldr	r3, [r3, #0]
3400427e:	f44f 7280 	mov.w	r2, #256	@ 0x100
34004282:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LINE Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34004286:	2100      	movs	r1, #0
34004288:	6878      	ldr	r0, [r7, #4]
3400428a:	f000 fe0b 	bl	34004ea4 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error interrupt for Pipe0 ***************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
3400428e:	68fb      	ldr	r3, [r7, #12]
34004290:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34004294:	2b00      	cmp	r3, #0
34004296:	d021      	beq.n	340042dc <HAL_DCMIPP_IRQHandler+0x154>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
34004298:	68bb      	ldr	r3, [r7, #8]
3400429a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400429e:	2b00      	cmp	r3, #0
340042a0:	d01c      	beq.n	340042dc <HAL_DCMIPP_IRQHandler+0x154>
    {
      /* Disable Overrun Error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
340042a2:	687b      	ldr	r3, [r7, #4]
340042a4:	681b      	ldr	r3, [r3, #0]
340042a6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340042aa:	687b      	ldr	r3, [r7, #4]
340042ac:	681b      	ldr	r3, [r3, #0]
340042ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
340042b2:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
340042b6:	687b      	ldr	r3, [r7, #4]
340042b8:	689b      	ldr	r3, [r3, #8]
340042ba:	f043 0208 	orr.w	r2, r3, #8
340042be:	687b      	ldr	r3, [r7, #4]
340042c0:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
340042c2:	687b      	ldr	r3, [r7, #4]
340042c4:	681b      	ldr	r3, [r3, #0]
340042c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
340042ca:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP Pipe state */
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
340042ce:	687b      	ldr	r3, [r7, #4]
340042d0:	2204      	movs	r2, #4
340042d2:	715a      	strb	r2, [r3, #5]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
340042d4:	2100      	movs	r1, #0
340042d6:	6878      	ldr	r0, [r7, #4]
340042d8:	f000 fdfa 	bl	34004ed0 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE1 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
340042dc:	68fb      	ldr	r3, [r7, #12]
340042de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340042e2:	2b00      	cmp	r3, #0
340042e4:	d00e      	beq.n	34004304 <HAL_DCMIPP_IRQHandler+0x17c>
  {
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
340042e6:	68bb      	ldr	r3, [r7, #8]
340042e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340042ec:	2b00      	cmp	r3, #0
340042ee:	d009      	beq.n	34004304 <HAL_DCMIPP_IRQHandler+0x17c>
    {
      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
340042f0:	687b      	ldr	r3, [r7, #4]
340042f2:	681b      	ldr	r3, [r3, #0]
340042f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340042f8:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
340042fc:	2101      	movs	r1, #1
340042fe:	6878      	ldr	r0, [r7, #4]
34004300:	f000 fdd0 	bl	34004ea4 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
34004304:	68fb      	ldr	r3, [r7, #12]
34004306:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3400430a:	2b00      	cmp	r3, #0
3400430c:	d00e      	beq.n	3400432c <HAL_DCMIPP_IRQHandler+0x1a4>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
3400430e:	68bb      	ldr	r3, [r7, #8]
34004310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34004314:	2b00      	cmp	r3, #0
34004316:	d009      	beq.n	3400432c <HAL_DCMIPP_IRQHandler+0x1a4>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34004318:	687b      	ldr	r3, [r7, #4]
3400431a:	681b      	ldr	r3, [r3, #0]
3400431c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34004320:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34004324:	2101      	movs	r1, #1
34004326:	6878      	ldr	r0, [r7, #4]
34004328:	f013 fb80 	bl	34017a2c <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
3400432c:	68fb      	ldr	r3, [r7, #12]
3400432e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34004332:	2b00      	cmp	r3, #0
34004334:	d023      	beq.n	3400437e <HAL_DCMIPP_IRQHandler+0x1f6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
34004336:	68bb      	ldr	r3, [r7, #8]
34004338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400433c:	2b00      	cmp	r3, #0
3400433e:	d01e      	beq.n	3400437e <HAL_DCMIPP_IRQHandler+0x1f6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004340:	687b      	ldr	r3, [r7, #4]
34004342:	681b      	ldr	r3, [r3, #0]
34004344:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
34004348:	f003 0304 	and.w	r3, r3, #4
3400434c:	2b04      	cmp	r3, #4
3400434e:	d10c      	bne.n	3400436a <HAL_DCMIPP_IRQHandler+0x1e2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
34004350:	687b      	ldr	r3, [r7, #4]
34004352:	681b      	ldr	r3, [r3, #0]
34004354:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34004358:	687b      	ldr	r3, [r7, #4]
3400435a:	681b      	ldr	r3, [r3, #0]
3400435c:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
34004360:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
34004364:	687b      	ldr	r3, [r7, #4]
34004366:	2201      	movs	r2, #1
34004368:	719a      	strb	r2, [r3, #6]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
3400436a:	687b      	ldr	r3, [r7, #4]
3400436c:	681b      	ldr	r3, [r3, #0]
3400436e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34004372:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34004376:	2101      	movs	r1, #1
34004378:	6878      	ldr	r0, [r7, #4]
3400437a:	f013 fb71 	bl	34017a60 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error on the PIPE1 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
3400437e:	68fb      	ldr	r3, [r7, #12]
34004380:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34004384:	2b00      	cmp	r3, #0
34004386:	d021      	beq.n	340043cc <HAL_DCMIPP_IRQHandler+0x244>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
34004388:	68bb      	ldr	r3, [r7, #8]
3400438a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3400438e:	2b00      	cmp	r3, #0
34004390:	d01c      	beq.n	340043cc <HAL_DCMIPP_IRQHandler+0x244>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34004392:	687b      	ldr	r3, [r7, #4]
34004394:	681b      	ldr	r3, [r3, #0]
34004396:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400439a:	687b      	ldr	r3, [r7, #4]
3400439c:	681b      	ldr	r3, [r3, #0]
3400439e:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
340043a2:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
340043a6:	687b      	ldr	r3, [r7, #4]
340043a8:	689b      	ldr	r3, [r3, #8]
340043aa:	f043 0210 	orr.w	r2, r3, #16
340043ae:	687b      	ldr	r3, [r7, #4]
340043b0:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
340043b2:	687b      	ldr	r3, [r7, #4]
340043b4:	681b      	ldr	r3, [r3, #0]
340043b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
340043ba:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
340043be:	687b      	ldr	r3, [r7, #4]
340043c0:	2204      	movs	r2, #4
340043c2:	719a      	strb	r2, [r3, #6]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340043c4:	2101      	movs	r1, #1
340043c6:	6878      	ldr	r0, [r7, #4]
340043c8:	f000 fd82 	bl	34004ed0 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE2 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
340043cc:	68fb      	ldr	r3, [r7, #12]
340043ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
340043d2:	2b00      	cmp	r3, #0
340043d4:	d00e      	beq.n	340043f4 <HAL_DCMIPP_IRQHandler+0x26c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
340043d6:	68bb      	ldr	r3, [r7, #8]
340043d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
340043dc:	2b00      	cmp	r3, #0
340043de:	d009      	beq.n	340043f4 <HAL_DCMIPP_IRQHandler+0x26c>
    {
      /* Clear the End of Line flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
340043e0:	687b      	ldr	r3, [r7, #4]
340043e2:	681b      	ldr	r3, [r3, #0]
340043e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340043e8:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
340043ec:	2102      	movs	r1, #2
340043ee:	6878      	ldr	r0, [r7, #4]
340043f0:	f000 fd58 	bl	34004ea4 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
340043f4:	68fb      	ldr	r3, [r7, #12]
340043f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
340043fa:	2b00      	cmp	r3, #0
340043fc:	d00e      	beq.n	3400441c <HAL_DCMIPP_IRQHandler+0x294>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
340043fe:	68bb      	ldr	r3, [r7, #8]
34004400:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004404:	2b00      	cmp	r3, #0
34004406:	d009      	beq.n	3400441c <HAL_DCMIPP_IRQHandler+0x294>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34004408:	687b      	ldr	r3, [r7, #4]
3400440a:	681b      	ldr	r3, [r3, #0]
3400440c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34004410:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34004414:	2102      	movs	r1, #2
34004416:	6878      	ldr	r0, [r7, #4]
34004418:	f013 fb08 	bl	34017a2c <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
3400441c:	68fb      	ldr	r3, [r7, #12]
3400441e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34004422:	2b00      	cmp	r3, #0
34004424:	d023      	beq.n	3400446e <HAL_DCMIPP_IRQHandler+0x2e6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34004426:	68bb      	ldr	r3, [r7, #8]
34004428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
3400442c:	2b00      	cmp	r3, #0
3400442e:	d01e      	beq.n	3400446e <HAL_DCMIPP_IRQHandler+0x2e6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004430:	687b      	ldr	r3, [r7, #4]
34004432:	681b      	ldr	r3, [r3, #0]
34004434:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
34004438:	f003 0304 	and.w	r3, r3, #4
3400443c:	2b04      	cmp	r3, #4
3400443e:	d10c      	bne.n	3400445a <HAL_DCMIPP_IRQHandler+0x2d2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
34004440:	687b      	ldr	r3, [r7, #4]
34004442:	681b      	ldr	r3, [r3, #0]
34004444:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34004448:	687b      	ldr	r3, [r7, #4]
3400444a:	681b      	ldr	r3, [r3, #0]
3400444c:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
34004450:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
34004454:	687b      	ldr	r3, [r7, #4]
34004456:	2201      	movs	r2, #1
34004458:	71da      	strb	r2, [r3, #7]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
3400445a:	687b      	ldr	r3, [r7, #4]
3400445c:	681b      	ldr	r3, [r3, #0]
3400445e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34004462:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34004466:	2102      	movs	r1, #2
34004468:	6878      	ldr	r0, [r7, #4]
3400446a:	f013 faf9 	bl	34017a60 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
  /* Overrun error on the PIPE2 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
3400446e:	68fb      	ldr	r3, [r7, #12]
34004470:	2b00      	cmp	r3, #0
34004472:	da1f      	bge.n	340044b4 <HAL_DCMIPP_IRQHandler+0x32c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
34004474:	68bb      	ldr	r3, [r7, #8]
34004476:	2b00      	cmp	r3, #0
34004478:	da1c      	bge.n	340044b4 <HAL_DCMIPP_IRQHandler+0x32c>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
3400447a:	687b      	ldr	r3, [r7, #4]
3400447c:	681b      	ldr	r3, [r3, #0]
3400447e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34004482:	687b      	ldr	r3, [r7, #4]
34004484:	681b      	ldr	r3, [r3, #0]
34004486:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
3400448a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
3400448e:	687b      	ldr	r3, [r7, #4]
34004490:	689b      	ldr	r3, [r3, #8]
34004492:	f043 0220 	orr.w	r2, r3, #32
34004496:	687b      	ldr	r3, [r7, #4]
34004498:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
3400449a:	687b      	ldr	r3, [r7, #4]
3400449c:	681b      	ldr	r3, [r3, #0]
3400449e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
340044a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
340044a6:	687b      	ldr	r3, [r7, #4]
340044a8:	2204      	movs	r2, #4
340044aa:	71da      	strb	r2, [r3, #7]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
340044ac:	2102      	movs	r1, #2
340044ae:	6878      	ldr	r0, [r7, #4]
340044b0:	f000 fd0e 	bl	34004ed0 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization Error Interrupt on the parallel interface  **************/
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
340044b4:	68fb      	ldr	r3, [r7, #12]
340044b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340044ba:	2b00      	cmp	r3, #0
340044bc:	d01f      	beq.n	340044fe <HAL_DCMIPP_IRQHandler+0x376>
  {
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
340044be:	68bb      	ldr	r3, [r7, #8]
340044c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340044c4:	2b00      	cmp	r3, #0
340044c6:	d01a      	beq.n	340044fe <HAL_DCMIPP_IRQHandler+0x376>
    {
      /* Disable Synchronization error interrupt on parallel interface */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
340044c8:	687b      	ldr	r3, [r7, #4]
340044ca:	681b      	ldr	r3, [r3, #0]
340044cc:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340044d0:	687b      	ldr	r3, [r7, #4]
340044d2:	681b      	ldr	r3, [r3, #0]
340044d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
340044d8:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
340044dc:	687b      	ldr	r3, [r7, #4]
340044de:	689b      	ldr	r3, [r3, #8]
340044e0:	f043 0202 	orr.w	r2, r3, #2
340044e4:	687b      	ldr	r3, [r7, #4]
340044e6:	609a      	str	r2, [r3, #8]

      /* Clear the synchronization error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
340044e8:	687b      	ldr	r3, [r7, #4]
340044ea:	681b      	ldr	r3, [r3, #0]
340044ec:	2240      	movs	r2, #64	@ 0x40
340044ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340044f2:	687b      	ldr	r3, [r7, #4]
340044f4:	2204      	movs	r2, #4
340044f6:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340044f8:	6878      	ldr	r0, [r7, #4]
340044fa:	f000 fcf4 	bl	34004ee6 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* IPPLUG AXI transfer Error Interrupt     *********************************/
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
340044fe:	68fb      	ldr	r3, [r7, #12]
34004500:	f003 0320 	and.w	r3, r3, #32
34004504:	2b00      	cmp	r3, #0
34004506:	d01f      	beq.n	34004548 <HAL_DCMIPP_IRQHandler+0x3c0>
  {
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
34004508:	68bb      	ldr	r3, [r7, #8]
3400450a:	f003 0320 	and.w	r3, r3, #32
3400450e:	2b00      	cmp	r3, #0
34004510:	d01a      	beq.n	34004548 <HAL_DCMIPP_IRQHandler+0x3c0>
    {
      /* Disable IPPLUG AXI transfer Error Interrupt */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
34004512:	687b      	ldr	r3, [r7, #4]
34004514:	681b      	ldr	r3, [r3, #0]
34004516:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400451a:	687b      	ldr	r3, [r7, #4]
3400451c:	681b      	ldr	r3, [r3, #0]
3400451e:	f022 0220 	bic.w	r2, r2, #32
34004522:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
34004526:	687b      	ldr	r3, [r7, #4]
34004528:	689b      	ldr	r3, [r3, #8]
3400452a:	f043 0201 	orr.w	r2, r3, #1
3400452e:	687b      	ldr	r3, [r7, #4]
34004530:	609a      	str	r2, [r3, #8]

      /* Clear the AXI transfer error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
34004532:	687b      	ldr	r3, [r7, #4]
34004534:	681b      	ldr	r3, [r3, #0]
34004536:	2220      	movs	r2, #32
34004538:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3400453c:	687b      	ldr	r3, [r7, #4]
3400453e:	2204      	movs	r2, #4
34004540:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004542:	6878      	ldr	r0, [r7, #4]
34004544:	f000 fccf 	bl	34004ee6 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34004548:	bf00      	nop
3400454a:	3710      	adds	r7, #16
3400454c:	46bd      	mov	sp, r7
3400454e:	bd80      	pop	{r7, pc}

34004550 <HAL_DCMIPP_CSI_IRQHandler>:
  * @brief  Handles DCMIPP CSI interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_CSI_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
34004550:	b580      	push	{r7, lr}
34004552:	b088      	sub	sp, #32
34004554:	af00      	add	r7, sp, #0
34004556:	6078      	str	r0, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34004558:	4bb1      	ldr	r3, [pc, #708]	@ (34004820 <HAL_DCMIPP_CSI_IRQHandler+0x2d0>)
3400455a:	61fb      	str	r3, [r7, #28]

  /* Read the SR0 register once */
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
3400455c:	69fb      	ldr	r3, [r7, #28]
3400455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34004562:	61bb      	str	r3, [r7, #24]
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
34004564:	69fb      	ldr	r3, [r7, #28]
34004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400456a:	617b      	str	r3, [r7, #20]

  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
3400456c:	69fb      	ldr	r3, [r7, #28]
3400456e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004572:	613b      	str	r3, [r7, #16]
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
34004574:	69fb      	ldr	r3, [r7, #28]
34004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400457a:	60fb      	str	r3, [r7, #12]

  /* Clock changer FIFO full event */
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
3400457c:	69bb      	ldr	r3, [r7, #24]
3400457e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34004582:	2b00      	cmp	r3, #0
34004584:	d014      	beq.n	340045b0 <HAL_DCMIPP_CSI_IRQHandler+0x60>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
34004586:	693b      	ldr	r3, [r7, #16]
34004588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3400458c:	2b00      	cmp	r3, #0
3400458e:	d00f      	beq.n	340045b0 <HAL_DCMIPP_CSI_IRQHandler+0x60>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
34004590:	69fb      	ldr	r3, [r7, #28]
34004592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004596:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
3400459a:	69fb      	ldr	r3, [r7, #28]
3400459c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
340045a0:	69fb      	ldr	r3, [r7, #28]
340045a2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
340045a6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ClockChangerFifoFullEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
340045aa:	6878      	ldr	r0, [r7, #4]
340045ac:	f000 fcb0 	bl	34004f10 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  }

  /*###############################
     Byte/Line Counter Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
340045b0:	69bb      	ldr	r3, [r7, #24]
340045b2:	f003 0308 	and.w	r3, r3, #8
340045b6:	2b00      	cmp	r3, #0
340045b8:	d01c      	beq.n	340045f4 <HAL_DCMIPP_CSI_IRQHandler+0xa4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
340045ba:	693b      	ldr	r3, [r7, #16]
340045bc:	f003 0308 	and.w	r3, r3, #8
340045c0:	2b00      	cmp	r3, #0
340045c2:	d017      	beq.n	340045f4 <HAL_DCMIPP_CSI_IRQHandler+0xa4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340045c4:	687b      	ldr	r3, [r7, #4]
340045c6:	681b      	ldr	r3, [r3, #0]
340045c8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340045cc:	f003 0304 	and.w	r3, r3, #4
340045d0:	2b04      	cmp	r3, #4
340045d2:	d107      	bne.n	340045e4 <HAL_DCMIPP_CSI_IRQHandler+0x94>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
340045d4:	69fb      	ldr	r3, [r7, #28]
340045d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340045da:	f023 0208 	bic.w	r2, r3, #8
340045de:	69fb      	ldr	r3, [r7, #28]
340045e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
340045e4:	69fb      	ldr	r3, [r7, #28]
340045e6:	2208      	movs	r2, #8
340045e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
340045ec:	2103      	movs	r1, #3
340045ee:	6878      	ldr	r0, [r7, #4]
340045f0:	f000 fcc3 	bl	34004f7a <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
340045f4:	69bb      	ldr	r3, [r7, #24]
340045f6:	f003 0304 	and.w	r3, r3, #4
340045fa:	2b00      	cmp	r3, #0
340045fc:	d01c      	beq.n	34004638 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
340045fe:	693b      	ldr	r3, [r7, #16]
34004600:	f003 0304 	and.w	r3, r3, #4
34004604:	2b00      	cmp	r3, #0
34004606:	d017      	beq.n	34004638 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004608:	687b      	ldr	r3, [r7, #4]
3400460a:	681b      	ldr	r3, [r3, #0]
3400460c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004610:	f003 0304 	and.w	r3, r3, #4
34004614:	2b04      	cmp	r3, #4
34004616:	d107      	bne.n	34004628 <HAL_DCMIPP_CSI_IRQHandler+0xd8>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34004618:	69fb      	ldr	r3, [r7, #28]
3400461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400461e:	f023 0204 	bic.w	r2, r3, #4
34004622:	69fb      	ldr	r3, [r7, #28]
34004624:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34004628:	69fb      	ldr	r3, [r7, #28]
3400462a:	2204      	movs	r2, #4
3400462c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34004630:	2102      	movs	r1, #2
34004632:	6878      	ldr	r0, [r7, #4]
34004634:	f000 fca1 	bl	34004f7a <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
34004638:	69bb      	ldr	r3, [r7, #24]
3400463a:	f003 0302 	and.w	r3, r3, #2
3400463e:	2b00      	cmp	r3, #0
34004640:	d01c      	beq.n	3400467c <HAL_DCMIPP_CSI_IRQHandler+0x12c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
34004642:	693b      	ldr	r3, [r7, #16]
34004644:	f003 0302 	and.w	r3, r3, #2
34004648:	2b00      	cmp	r3, #0
3400464a:	d017      	beq.n	3400467c <HAL_DCMIPP_CSI_IRQHandler+0x12c>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400464c:	687b      	ldr	r3, [r7, #4]
3400464e:	681b      	ldr	r3, [r3, #0]
34004650:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004654:	f003 0304 	and.w	r3, r3, #4
34004658:	2b04      	cmp	r3, #4
3400465a:	d107      	bne.n	3400466c <HAL_DCMIPP_CSI_IRQHandler+0x11c>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
3400465c:	69fb      	ldr	r3, [r7, #28]
3400465e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004662:	f023 0202 	bic.w	r2, r3, #2
34004666:	69fb      	ldr	r3, [r7, #28]
34004668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
3400466c:	69fb      	ldr	r3, [r7, #28]
3400466e:	2202      	movs	r2, #2
34004670:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34004674:	2101      	movs	r1, #1
34004676:	6878      	ldr	r0, [r7, #4]
34004678:	f000 fc7f 	bl	34004f7a <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
3400467c:	69bb      	ldr	r3, [r7, #24]
3400467e:	f003 0301 	and.w	r3, r3, #1
34004682:	2b00      	cmp	r3, #0
34004684:	d01c      	beq.n	340046c0 <HAL_DCMIPP_CSI_IRQHandler+0x170>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
34004686:	693b      	ldr	r3, [r7, #16]
34004688:	f003 0301 	and.w	r3, r3, #1
3400468c:	2b00      	cmp	r3, #0
3400468e:	d017      	beq.n	340046c0 <HAL_DCMIPP_CSI_IRQHandler+0x170>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004690:	687b      	ldr	r3, [r7, #4]
34004692:	681b      	ldr	r3, [r3, #0]
34004694:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004698:	f003 0304 	and.w	r3, r3, #4
3400469c:	2b04      	cmp	r3, #4
3400469e:	d107      	bne.n	340046b0 <HAL_DCMIPP_CSI_IRQHandler+0x160>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
340046a0:	69fb      	ldr	r3, [r7, #28]
340046a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340046a6:	f023 0201 	bic.w	r2, r3, #1
340046aa:	69fb      	ldr	r3, [r7, #28]
340046ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
340046b0:	69fb      	ldr	r3, [r7, #28]
340046b2:	2201      	movs	r2, #1
340046b4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
340046b8:	2100      	movs	r1, #0
340046ba:	6878      	ldr	r0, [r7, #4]
340046bc:	f000 fc5d 	bl	34004f7a <HAL_DCMIPP_CSI_LineByteEventCallback>
  }

  /*###############################
            End Of Frame
    ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
340046c0:	69bb      	ldr	r3, [r7, #24]
340046c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
340046c6:	2b00      	cmp	r3, #0
340046c8:	d01d      	beq.n	34004706 <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
340046ca:	693b      	ldr	r3, [r7, #16]
340046cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
340046d0:	2b00      	cmp	r3, #0
340046d2:	d018      	beq.n	34004706 <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340046d4:	687b      	ldr	r3, [r7, #4]
340046d6:	681b      	ldr	r3, [r3, #0]
340046d8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340046dc:	f003 0304 	and.w	r3, r3, #4
340046e0:	2b04      	cmp	r3, #4
340046e2:	d107      	bne.n	340046f4 <HAL_DCMIPP_CSI_IRQHandler+0x1a4>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
340046e4:	69fb      	ldr	r3, [r7, #28]
340046e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340046ea:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
340046ee:	69fb      	ldr	r3, [r7, #28]
340046f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
340046f4:	69fb      	ldr	r3, [r7, #28]
340046f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
340046fa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340046fe:	2103      	movs	r1, #3
34004700:	6878      	ldr	r0, [r7, #4]
34004702:	f000 fc19 	bl	34004f38 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34004706:	69bb      	ldr	r3, [r7, #24]
34004708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400470c:	2b00      	cmp	r3, #0
3400470e:	d01d      	beq.n	3400474c <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34004710:	693b      	ldr	r3, [r7, #16]
34004712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34004716:	2b00      	cmp	r3, #0
34004718:	d018      	beq.n	3400474c <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400471a:	687b      	ldr	r3, [r7, #4]
3400471c:	681b      	ldr	r3, [r3, #0]
3400471e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004722:	f003 0304 	and.w	r3, r3, #4
34004726:	2b04      	cmp	r3, #4
34004728:	d107      	bne.n	3400473a <HAL_DCMIPP_CSI_IRQHandler+0x1ea>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
3400472a:	69fb      	ldr	r3, [r7, #28]
3400472c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004730:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34004734:	69fb      	ldr	r3, [r7, #28]
34004736:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
3400473a:	69fb      	ldr	r3, [r7, #28]
3400473c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34004740:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34004744:	2102      	movs	r1, #2
34004746:	6878      	ldr	r0, [r7, #4]
34004748:	f000 fbf6 	bl	34004f38 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
3400474c:	69bb      	ldr	r3, [r7, #24]
3400474e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34004752:	2b00      	cmp	r3, #0
34004754:	d01d      	beq.n	34004792 <HAL_DCMIPP_CSI_IRQHandler+0x242>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
34004756:	693b      	ldr	r3, [r7, #16]
34004758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400475c:	2b00      	cmp	r3, #0
3400475e:	d018      	beq.n	34004792 <HAL_DCMIPP_CSI_IRQHandler+0x242>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004760:	687b      	ldr	r3, [r7, #4]
34004762:	681b      	ldr	r3, [r3, #0]
34004764:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004768:	f003 0304 	and.w	r3, r3, #4
3400476c:	2b04      	cmp	r3, #4
3400476e:	d107      	bne.n	34004780 <HAL_DCMIPP_CSI_IRQHandler+0x230>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34004770:	69fb      	ldr	r3, [r7, #28]
34004772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004776:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
3400477a:	69fb      	ldr	r3, [r7, #28]
3400477c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
34004780:	69fb      	ldr	r3, [r7, #28]
34004782:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34004786:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
3400478a:	2101      	movs	r1, #1
3400478c:	6878      	ldr	r0, [r7, #4]
3400478e:	f000 fbd3 	bl	34004f38 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
34004792:	69bb      	ldr	r3, [r7, #24]
34004794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34004798:	2b00      	cmp	r3, #0
3400479a:	d01d      	beq.n	340047d8 <HAL_DCMIPP_CSI_IRQHandler+0x288>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
3400479c:	693b      	ldr	r3, [r7, #16]
3400479e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340047a2:	2b00      	cmp	r3, #0
340047a4:	d018      	beq.n	340047d8 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340047a6:	687b      	ldr	r3, [r7, #4]
340047a8:	681b      	ldr	r3, [r3, #0]
340047aa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340047ae:	f003 0304 	and.w	r3, r3, #4
340047b2:	2b04      	cmp	r3, #4
340047b4:	d107      	bne.n	340047c6 <HAL_DCMIPP_CSI_IRQHandler+0x276>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
340047b6:	69fb      	ldr	r3, [r7, #28]
340047b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340047bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
340047c0:	69fb      	ldr	r3, [r7, #28]
340047c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
340047c6:	69fb      	ldr	r3, [r7, #28]
340047c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340047cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_CSIREGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340047d0:	2100      	movs	r1, #0
340047d2:	6878      	ldr	r0, [r7, #4]
340047d4:	f000 fbb0 	bl	34004f38 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  }

  /*###############################
           Start Of Frame
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
340047d8:	69bb      	ldr	r3, [r7, #24]
340047da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340047de:	2b00      	cmp	r3, #0
340047e0:	d020      	beq.n	34004824 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
340047e2:	693b      	ldr	r3, [r7, #16]
340047e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340047e8:	2b00      	cmp	r3, #0
340047ea:	d01b      	beq.n	34004824 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340047ec:	687b      	ldr	r3, [r7, #4]
340047ee:	681b      	ldr	r3, [r3, #0]
340047f0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340047f4:	f003 0304 	and.w	r3, r3, #4
340047f8:	2b04      	cmp	r3, #4
340047fa:	d107      	bne.n	3400480c <HAL_DCMIPP_CSI_IRQHandler+0x2bc>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
340047fc:	69fb      	ldr	r3, [r7, #28]
340047fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004802:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34004806:	69fb      	ldr	r3, [r7, #28]
34004808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
3400480c:	69fb      	ldr	r3, [r7, #28]
3400480e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34004812:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34004816:	2103      	movs	r1, #3
34004818:	6878      	ldr	r0, [r7, #4]
3400481a:	f000 fb98 	bl	34004f4e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
3400481e:	e001      	b.n	34004824 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
34004820:	58006000 	.word	0x58006000
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34004824:	69bb      	ldr	r3, [r7, #24]
34004826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400482a:	2b00      	cmp	r3, #0
3400482c:	d01d      	beq.n	3400486a <HAL_DCMIPP_CSI_IRQHandler+0x31a>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
3400482e:	693b      	ldr	r3, [r7, #16]
34004830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004834:	2b00      	cmp	r3, #0
34004836:	d018      	beq.n	3400486a <HAL_DCMIPP_CSI_IRQHandler+0x31a>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004838:	687b      	ldr	r3, [r7, #4]
3400483a:	681b      	ldr	r3, [r3, #0]
3400483c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004840:	f003 0304 	and.w	r3, r3, #4
34004844:	2b04      	cmp	r3, #4
34004846:	d107      	bne.n	34004858 <HAL_DCMIPP_CSI_IRQHandler+0x308>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34004848:	69fb      	ldr	r3, [r7, #28]
3400484a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400484e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34004852:	69fb      	ldr	r3, [r7, #28]
34004854:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34004858:	69fb      	ldr	r3, [r7, #28]
3400485a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3400485e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34004862:	2102      	movs	r1, #2
34004864:	6878      	ldr	r0, [r7, #4]
34004866:	f000 fb72 	bl	34004f4e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
3400486a:	69bb      	ldr	r3, [r7, #24]
3400486c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004870:	2b00      	cmp	r3, #0
34004872:	d01d      	beq.n	340048b0 <HAL_DCMIPP_CSI_IRQHandler+0x360>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34004874:	693b      	ldr	r3, [r7, #16]
34004876:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400487a:	2b00      	cmp	r3, #0
3400487c:	d018      	beq.n	340048b0 <HAL_DCMIPP_CSI_IRQHandler+0x360>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400487e:	687b      	ldr	r3, [r7, #4]
34004880:	681b      	ldr	r3, [r3, #0]
34004882:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004886:	f003 0304 	and.w	r3, r3, #4
3400488a:	2b04      	cmp	r3, #4
3400488c:	d107      	bne.n	3400489e <HAL_DCMIPP_CSI_IRQHandler+0x34e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
3400488e:	69fb      	ldr	r3, [r7, #28]
34004890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004894:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34004898:	69fb      	ldr	r3, [r7, #28]
3400489a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
3400489e:	69fb      	ldr	r3, [r7, #28]
340048a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
340048a4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340048a8:	2101      	movs	r1, #1
340048aa:	6878      	ldr	r0, [r7, #4]
340048ac:	f000 fb4f 	bl	34004f4e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
340048b0:	69bb      	ldr	r3, [r7, #24]
340048b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340048b6:	2b00      	cmp	r3, #0
340048b8:	d01d      	beq.n	340048f6 <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
340048ba:	693b      	ldr	r3, [r7, #16]
340048bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340048c0:	2b00      	cmp	r3, #0
340048c2:	d018      	beq.n	340048f6 <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340048c4:	687b      	ldr	r3, [r7, #4]
340048c6:	681b      	ldr	r3, [r3, #0]
340048c8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340048cc:	f003 0304 	and.w	r3, r3, #4
340048d0:	2b04      	cmp	r3, #4
340048d2:	d107      	bne.n	340048e4 <HAL_DCMIPP_CSI_IRQHandler+0x394>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
340048d4:	69fb      	ldr	r3, [r7, #28]
340048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340048da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
340048de:	69fb      	ldr	r3, [r7, #28]
340048e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
340048e4:	69fb      	ldr	r3, [r7, #28]
340048e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
340048ea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340048ee:	2100      	movs	r1, #0
340048f0:	6878      	ldr	r0, [r7, #4]
340048f2:	f000 fb2c 	bl	34004f4e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  }

  /*###############################
           Timer Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
340048f6:	69bb      	ldr	r3, [r7, #24]
340048f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340048fc:	2b00      	cmp	r3, #0
340048fe:	d01c      	beq.n	3400493a <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34004900:	693b      	ldr	r3, [r7, #16]
34004902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34004906:	2b00      	cmp	r3, #0
34004908:	d017      	beq.n	3400493a <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400490a:	687b      	ldr	r3, [r7, #4]
3400490c:	681b      	ldr	r3, [r3, #0]
3400490e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004912:	f003 0304 	and.w	r3, r3, #4
34004916:	2b04      	cmp	r3, #4
34004918:	d107      	bne.n	3400492a <HAL_DCMIPP_CSI_IRQHandler+0x3da>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
3400491a:	69fb      	ldr	r3, [r7, #28]
3400491c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004920:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
34004924:	69fb      	ldr	r3, [r7, #28]
34004926:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
3400492a:	69fb      	ldr	r3, [r7, #28]
3400492c:	2280      	movs	r2, #128	@ 0x80
3400492e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34004932:	2103      	movs	r1, #3
34004934:	6878      	ldr	r0, [r7, #4]
34004936:	f000 fb15 	bl	34004f64 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
3400493a:	69bb      	ldr	r3, [r7, #24]
3400493c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34004940:	2b00      	cmp	r3, #0
34004942:	d01c      	beq.n	3400497e <HAL_DCMIPP_CSI_IRQHandler+0x42e>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34004944:	693b      	ldr	r3, [r7, #16]
34004946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400494a:	2b00      	cmp	r3, #0
3400494c:	d017      	beq.n	3400497e <HAL_DCMIPP_CSI_IRQHandler+0x42e>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400494e:	687b      	ldr	r3, [r7, #4]
34004950:	681b      	ldr	r3, [r3, #0]
34004952:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004956:	f003 0304 	and.w	r3, r3, #4
3400495a:	2b04      	cmp	r3, #4
3400495c:	d107      	bne.n	3400496e <HAL_DCMIPP_CSI_IRQHandler+0x41e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
3400495e:	69fb      	ldr	r3, [r7, #28]
34004960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004964:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
34004968:	69fb      	ldr	r3, [r7, #28]
3400496a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
3400496e:	69fb      	ldr	r3, [r7, #28]
34004970:	2240      	movs	r2, #64	@ 0x40
34004972:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34004976:	2102      	movs	r1, #2
34004978:	6878      	ldr	r0, [r7, #4]
3400497a:	f000 faf3 	bl	34004f64 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
3400497e:	69bb      	ldr	r3, [r7, #24]
34004980:	f003 0320 	and.w	r3, r3, #32
34004984:	2b00      	cmp	r3, #0
34004986:	d01c      	beq.n	340049c2 <HAL_DCMIPP_CSI_IRQHandler+0x472>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34004988:	693b      	ldr	r3, [r7, #16]
3400498a:	f003 0320 	and.w	r3, r3, #32
3400498e:	2b00      	cmp	r3, #0
34004990:	d017      	beq.n	340049c2 <HAL_DCMIPP_CSI_IRQHandler+0x472>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004992:	687b      	ldr	r3, [r7, #4]
34004994:	681b      	ldr	r3, [r3, #0]
34004996:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3400499a:	f003 0304 	and.w	r3, r3, #4
3400499e:	2b04      	cmp	r3, #4
340049a0:	d107      	bne.n	340049b2 <HAL_DCMIPP_CSI_IRQHandler+0x462>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
340049a2:	69fb      	ldr	r3, [r7, #28]
340049a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340049a8:	f023 0220 	bic.w	r2, r3, #32
340049ac:	69fb      	ldr	r3, [r7, #28]
340049ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
340049b2:	69fb      	ldr	r3, [r7, #28]
340049b4:	2220      	movs	r2, #32
340049b6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
340049ba:	2101      	movs	r1, #1
340049bc:	6878      	ldr	r0, [r7, #4]
340049be:	f000 fad1 	bl	34004f64 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
340049c2:	69bb      	ldr	r3, [r7, #24]
340049c4:	f003 0310 	and.w	r3, r3, #16
340049c8:	2b00      	cmp	r3, #0
340049ca:	d01c      	beq.n	34004a06 <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
340049cc:	693b      	ldr	r3, [r7, #16]
340049ce:	f003 0310 	and.w	r3, r3, #16
340049d2:	2b00      	cmp	r3, #0
340049d4:	d017      	beq.n	34004a06 <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340049d6:	687b      	ldr	r3, [r7, #4]
340049d8:	681b      	ldr	r3, [r3, #0]
340049da:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340049de:	f003 0304 	and.w	r3, r3, #4
340049e2:	2b04      	cmp	r3, #4
340049e4:	d107      	bne.n	340049f6 <HAL_DCMIPP_CSI_IRQHandler+0x4a6>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
340049e6:	69fb      	ldr	r3, [r7, #28]
340049e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340049ec:	f023 0210 	bic.w	r2, r3, #16
340049f0:	69fb      	ldr	r3, [r7, #28]
340049f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
340049f6:	69fb      	ldr	r3, [r7, #28]
340049f8:	2210      	movs	r2, #16
340049fa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
340049fe:	2100      	movs	r1, #0
34004a00:	6878      	ldr	r0, [r7, #4]
34004a02:	f000 faaf 	bl	34004f64 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization error  */
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34004a06:	69bb      	ldr	r3, [r7, #24]
34004a08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34004a0c:	2b00      	cmp	r3, #0
34004a0e:	d01a      	beq.n	34004a46 <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34004a10:	693b      	ldr	r3, [r7, #16]
34004a12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34004a16:	2b00      	cmp	r3, #0
34004a18:	d015      	beq.n	34004a46 <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34004a1a:	69fb      	ldr	r3, [r7, #28]
34004a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004a20:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34004a24:	69fb      	ldr	r3, [r7, #28]
34004a26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34004a2a:	69fb      	ldr	r3, [r7, #28]
34004a2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34004a30:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34004a34:	687b      	ldr	r3, [r7, #4]
34004a36:	689b      	ldr	r3, [r3, #8]
34004a38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
34004a3c:	687b      	ldr	r3, [r7, #4]
34004a3e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004a40:	6878      	ldr	r0, [r7, #4]
34004a42:	f000 fa50 	bl	34004ee6 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34004a46:	69bb      	ldr	r3, [r7, #24]
34004a48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34004a4c:	2b00      	cmp	r3, #0
34004a4e:	d01a      	beq.n	34004a86 <HAL_DCMIPP_CSI_IRQHandler+0x536>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34004a50:	693b      	ldr	r3, [r7, #16]
34004a52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34004a56:	2b00      	cmp	r3, #0
34004a58:	d015      	beq.n	34004a86 <HAL_DCMIPP_CSI_IRQHandler+0x536>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34004a5a:	69fb      	ldr	r3, [r7, #28]
34004a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004a60:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
34004a64:	69fb      	ldr	r3, [r7, #28]
34004a66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34004a6a:	69fb      	ldr	r3, [r7, #28]
34004a6c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34004a70:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34004a74:	687b      	ldr	r3, [r7, #4]
34004a76:	689b      	ldr	r3, [r3, #8]
34004a78:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
34004a7c:	687b      	ldr	r3, [r7, #4]
34004a7e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004a80:	6878      	ldr	r0, [r7, #4]
34004a82:	f000 fa30 	bl	34004ee6 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34004a86:	69bb      	ldr	r3, [r7, #24]
34004a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34004a8c:	2b00      	cmp	r3, #0
34004a8e:	d01a      	beq.n	34004ac6 <HAL_DCMIPP_CSI_IRQHandler+0x576>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34004a90:	693b      	ldr	r3, [r7, #16]
34004a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34004a96:	2b00      	cmp	r3, #0
34004a98:	d015      	beq.n	34004ac6 <HAL_DCMIPP_CSI_IRQHandler+0x576>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34004a9a:	69fb      	ldr	r3, [r7, #28]
34004a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004aa0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
34004aa4:	69fb      	ldr	r3, [r7, #28]
34004aa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34004aaa:	69fb      	ldr	r3, [r7, #28]
34004aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34004ab0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34004ab4:	687b      	ldr	r3, [r7, #4]
34004ab6:	689b      	ldr	r3, [r3, #8]
34004ab8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
34004abc:	687b      	ldr	r3, [r7, #4]
34004abe:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004ac0:	6878      	ldr	r0, [r7, #4]
34004ac2:	f000 fa10 	bl	34004ee6 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34004ac6:	69bb      	ldr	r3, [r7, #24]
34004ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34004acc:	2b00      	cmp	r3, #0
34004ace:	d01a      	beq.n	34004b06 <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34004ad0:	693b      	ldr	r3, [r7, #16]
34004ad2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34004ad6:	2b00      	cmp	r3, #0
34004ad8:	d015      	beq.n	34004b06 <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34004ada:	69fb      	ldr	r3, [r7, #28]
34004adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004ae0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34004ae4:	69fb      	ldr	r3, [r7, #28]
34004ae6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34004aea:	69fb      	ldr	r3, [r7, #28]
34004aec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34004af0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34004af4:	687b      	ldr	r3, [r7, #4]
34004af6:	689b      	ldr	r3, [r3, #8]
34004af8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
34004afc:	687b      	ldr	r3, [r7, #4]
34004afe:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004b00:	6878      	ldr	r0, [r7, #4]
34004b02:	f000 f9f0 	bl	34004ee6 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34004b06:	69bb      	ldr	r3, [r7, #24]
34004b08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004b0c:	2b00      	cmp	r3, #0
34004b0e:	d01a      	beq.n	34004b46 <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34004b10:	693b      	ldr	r3, [r7, #16]
34004b12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004b16:	2b00      	cmp	r3, #0
34004b18:	d015      	beq.n	34004b46 <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34004b1a:	69fb      	ldr	r3, [r7, #28]
34004b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004b20:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
34004b24:	69fb      	ldr	r3, [r7, #28]
34004b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34004b2a:	69fb      	ldr	r3, [r7, #28]
34004b2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34004b30:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34004b34:	687b      	ldr	r3, [r7, #4]
34004b36:	689b      	ldr	r3, [r3, #8]
34004b38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
34004b3c:	687b      	ldr	r3, [r7, #4]
34004b3e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004b40:	6878      	ldr	r0, [r7, #4]
34004b42:	f000 f9d0 	bl	34004ee6 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34004b46:	69bb      	ldr	r3, [r7, #24]
34004b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34004b4c:	2b00      	cmp	r3, #0
34004b4e:	d01a      	beq.n	34004b86 <HAL_DCMIPP_CSI_IRQHandler+0x636>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34004b50:	693b      	ldr	r3, [r7, #16]
34004b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34004b56:	2b00      	cmp	r3, #0
34004b58:	d015      	beq.n	34004b86 <HAL_DCMIPP_CSI_IRQHandler+0x636>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34004b5a:	69fb      	ldr	r3, [r7, #28]
34004b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004b60:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34004b64:	69fb      	ldr	r3, [r7, #28]
34004b66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34004b6a:	69fb      	ldr	r3, [r7, #28]
34004b6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34004b70:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34004b74:	687b      	ldr	r3, [r7, #4]
34004b76:	689b      	ldr	r3, [r3, #8]
34004b78:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
34004b7c:	687b      	ldr	r3, [r7, #4]
34004b7e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004b80:	6878      	ldr	r0, [r7, #4]
34004b82:	f000 f9b0 	bl	34004ee6 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34004b86:	69bb      	ldr	r3, [r7, #24]
34004b88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34004b8c:	2b00      	cmp	r3, #0
34004b8e:	d01a      	beq.n	34004bc6 <HAL_DCMIPP_CSI_IRQHandler+0x676>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34004b90:	693b      	ldr	r3, [r7, #16]
34004b92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34004b96:	2b00      	cmp	r3, #0
34004b98:	d015      	beq.n	34004bc6 <HAL_DCMIPP_CSI_IRQHandler+0x676>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34004b9a:	69fb      	ldr	r3, [r7, #28]
34004b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004ba0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34004ba4:	69fb      	ldr	r3, [r7, #28]
34004ba6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34004baa:	69fb      	ldr	r3, [r7, #28]
34004bac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34004bb0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34004bb4:	687b      	ldr	r3, [r7, #4]
34004bb6:	689b      	ldr	r3, [r3, #8]
34004bb8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
34004bbc:	687b      	ldr	r3, [r7, #4]
34004bbe:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004bc0:	6878      	ldr	r0, [r7, #4]
34004bc2:	f000 f990 	bl	34004ee6 <HAL_DCMIPP_ErrorCallback>
    }
  }

  /* Lane 0 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34004bc6:	697b      	ldr	r3, [r7, #20]
34004bc8:	f003 0301 	and.w	r3, r3, #1
34004bcc:	2b00      	cmp	r3, #0
34004bce:	d01d      	beq.n	34004c0c <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34004bd0:	68fb      	ldr	r3, [r7, #12]
34004bd2:	f003 0301 	and.w	r3, r3, #1
34004bd6:	2b00      	cmp	r3, #0
34004bd8:	d018      	beq.n	34004c0c <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34004bda:	69fb      	ldr	r3, [r7, #28]
34004bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004be0:	f023 0201 	bic.w	r2, r3, #1
34004be4:	69fb      	ldr	r3, [r7, #28]
34004be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34004bea:	69fb      	ldr	r3, [r7, #28]
34004bec:	2201      	movs	r2, #1
34004bee:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34004bf2:	687b      	ldr	r3, [r7, #4]
34004bf4:	689b      	ldr	r3, [r3, #8]
34004bf6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34004bfa:	687b      	ldr	r3, [r7, #4]
34004bfc:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004bfe:	687b      	ldr	r3, [r7, #4]
34004c00:	2204      	movs	r2, #4
34004c02:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004c04:	2101      	movs	r1, #1
34004c06:	6878      	ldr	r0, [r7, #4]
34004c08:	f000 f977 	bl	34004efa <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34004c0c:	697b      	ldr	r3, [r7, #20]
34004c0e:	f003 0302 	and.w	r3, r3, #2
34004c12:	2b00      	cmp	r3, #0
34004c14:	d01d      	beq.n	34004c52 <HAL_DCMIPP_CSI_IRQHandler+0x702>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34004c16:	68fb      	ldr	r3, [r7, #12]
34004c18:	f003 0302 	and.w	r3, r3, #2
34004c1c:	2b00      	cmp	r3, #0
34004c1e:	d018      	beq.n	34004c52 <HAL_DCMIPP_CSI_IRQHandler+0x702>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34004c20:	69fb      	ldr	r3, [r7, #28]
34004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004c26:	f023 0202 	bic.w	r2, r3, #2
34004c2a:	69fb      	ldr	r3, [r7, #28]
34004c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34004c30:	69fb      	ldr	r3, [r7, #28]
34004c32:	2202      	movs	r2, #2
34004c34:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34004c38:	687b      	ldr	r3, [r7, #4]
34004c3a:	689b      	ldr	r3, [r3, #8]
34004c3c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34004c40:	687b      	ldr	r3, [r7, #4]
34004c42:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004c44:	687b      	ldr	r3, [r7, #4]
34004c46:	2204      	movs	r2, #4
34004c48:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004c4a:	2101      	movs	r1, #1
34004c4c:	6878      	ldr	r0, [r7, #4]
34004c4e:	f000 f954 	bl	34004efa <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34004c52:	697b      	ldr	r3, [r7, #20]
34004c54:	f003 0304 	and.w	r3, r3, #4
34004c58:	2b00      	cmp	r3, #0
34004c5a:	d01a      	beq.n	34004c92 <HAL_DCMIPP_CSI_IRQHandler+0x742>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34004c5c:	68fb      	ldr	r3, [r7, #12]
34004c5e:	f003 0304 	and.w	r3, r3, #4
34004c62:	2b00      	cmp	r3, #0
34004c64:	d015      	beq.n	34004c92 <HAL_DCMIPP_CSI_IRQHandler+0x742>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34004c66:	69fb      	ldr	r3, [r7, #28]
34004c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004c6c:	f023 0204 	bic.w	r2, r3, #4
34004c70:	69fb      	ldr	r3, [r7, #28]
34004c72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34004c76:	69fb      	ldr	r3, [r7, #28]
34004c78:	2204      	movs	r2, #4
34004c7a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34004c7e:	687b      	ldr	r3, [r7, #4]
34004c80:	689b      	ldr	r3, [r3, #8]
34004c82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34004c86:	687b      	ldr	r3, [r7, #4]
34004c88:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004c8a:	2101      	movs	r1, #1
34004c8c:	6878      	ldr	r0, [r7, #4]
34004c8e:	f000 f934 	bl	34004efa <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34004c92:	697b      	ldr	r3, [r7, #20]
34004c94:	f003 0308 	and.w	r3, r3, #8
34004c98:	2b00      	cmp	r3, #0
34004c9a:	d01a      	beq.n	34004cd2 <HAL_DCMIPP_CSI_IRQHandler+0x782>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34004c9c:	68fb      	ldr	r3, [r7, #12]
34004c9e:	f003 0308 	and.w	r3, r3, #8
34004ca2:	2b00      	cmp	r3, #0
34004ca4:	d015      	beq.n	34004cd2 <HAL_DCMIPP_CSI_IRQHandler+0x782>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34004ca6:	69fb      	ldr	r3, [r7, #28]
34004ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004cac:	f023 0208 	bic.w	r2, r3, #8
34004cb0:	69fb      	ldr	r3, [r7, #28]
34004cb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34004cb6:	69fb      	ldr	r3, [r7, #28]
34004cb8:	2208      	movs	r2, #8
34004cba:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34004cbe:	687b      	ldr	r3, [r7, #4]
34004cc0:	689b      	ldr	r3, [r3, #8]
34004cc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
34004cc6:	687b      	ldr	r3, [r7, #4]
34004cc8:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004cca:	2101      	movs	r1, #1
34004ccc:	6878      	ldr	r0, [r7, #4]
34004cce:	f000 f914 	bl	34004efa <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34004cd2:	697b      	ldr	r3, [r7, #20]
34004cd4:	f003 0310 	and.w	r3, r3, #16
34004cd8:	2b00      	cmp	r3, #0
34004cda:	d01a      	beq.n	34004d12 <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34004cdc:	68fb      	ldr	r3, [r7, #12]
34004cde:	f003 0310 	and.w	r3, r3, #16
34004ce2:	2b00      	cmp	r3, #0
34004ce4:	d015      	beq.n	34004d12 <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34004ce6:	69fb      	ldr	r3, [r7, #28]
34004ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004cec:	f023 0210 	bic.w	r2, r3, #16
34004cf0:	69fb      	ldr	r3, [r7, #28]
34004cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
34004cf6:	69fb      	ldr	r3, [r7, #28]
34004cf8:	2210      	movs	r2, #16
34004cfa:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34004cfe:	687b      	ldr	r3, [r7, #4]
34004d00:	689b      	ldr	r3, [r3, #8]
34004d02:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
34004d06:	687b      	ldr	r3, [r7, #4]
34004d08:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004d0a:	2101      	movs	r1, #1
34004d0c:	6878      	ldr	r0, [r7, #4]
34004d0e:	f000 f8f4 	bl	34004efa <HAL_DCMIPP_CSI_LineErrorCallback>
    }
  }

  /* Lane 1 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
34004d12:	697b      	ldr	r3, [r7, #20]
34004d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004d18:	2b00      	cmp	r3, #0
34004d1a:	d01e      	beq.n	34004d5a <HAL_DCMIPP_CSI_IRQHandler+0x80a>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34004d1c:	68fb      	ldr	r3, [r7, #12]
34004d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004d22:	2b00      	cmp	r3, #0
34004d24:	d019      	beq.n	34004d5a <HAL_DCMIPP_CSI_IRQHandler+0x80a>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34004d26:	69fb      	ldr	r3, [r7, #28]
34004d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34004d30:	69fb      	ldr	r3, [r7, #28]
34004d32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34004d36:	69fb      	ldr	r3, [r7, #28]
34004d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
34004d3c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34004d40:	687b      	ldr	r3, [r7, #4]
34004d42:	689b      	ldr	r3, [r3, #8]
34004d44:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34004d48:	687b      	ldr	r3, [r7, #4]
34004d4a:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004d4c:	687b      	ldr	r3, [r7, #4]
34004d4e:	2204      	movs	r2, #4
34004d50:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004d52:	2102      	movs	r1, #2
34004d54:	6878      	ldr	r0, [r7, #4]
34004d56:	f000 f8d0 	bl	34004efa <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34004d5a:	697b      	ldr	r3, [r7, #20]
34004d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004d60:	2b00      	cmp	r3, #0
34004d62:	d01e      	beq.n	34004da2 <HAL_DCMIPP_CSI_IRQHandler+0x852>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34004d64:	68fb      	ldr	r3, [r7, #12]
34004d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004d6a:	2b00      	cmp	r3, #0
34004d6c:	d019      	beq.n	34004da2 <HAL_DCMIPP_CSI_IRQHandler+0x852>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34004d6e:	69fb      	ldr	r3, [r7, #28]
34004d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004d74:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34004d78:	69fb      	ldr	r3, [r7, #28]
34004d7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34004d7e:	69fb      	ldr	r3, [r7, #28]
34004d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
34004d84:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34004d88:	687b      	ldr	r3, [r7, #4]
34004d8a:	689b      	ldr	r3, [r3, #8]
34004d8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34004d90:	687b      	ldr	r3, [r7, #4]
34004d92:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004d94:	687b      	ldr	r3, [r7, #4]
34004d96:	2204      	movs	r2, #4
34004d98:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004d9a:	2102      	movs	r1, #2
34004d9c:	6878      	ldr	r0, [r7, #4]
34004d9e:	f000 f8ac 	bl	34004efa <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34004da2:	697b      	ldr	r3, [r7, #20]
34004da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004da8:	2b00      	cmp	r3, #0
34004daa:	d01b      	beq.n	34004de4 <HAL_DCMIPP_CSI_IRQHandler+0x894>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34004dac:	68fb      	ldr	r3, [r7, #12]
34004dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004db2:	2b00      	cmp	r3, #0
34004db4:	d016      	beq.n	34004de4 <HAL_DCMIPP_CSI_IRQHandler+0x894>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34004db6:	69fb      	ldr	r3, [r7, #28]
34004db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004dbc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34004dc0:	69fb      	ldr	r3, [r7, #28]
34004dc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34004dc6:	69fb      	ldr	r3, [r7, #28]
34004dc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34004dcc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34004dd0:	687b      	ldr	r3, [r7, #4]
34004dd2:	689b      	ldr	r3, [r3, #8]
34004dd4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34004dd8:	687b      	ldr	r3, [r7, #4]
34004dda:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004ddc:	2102      	movs	r1, #2
34004dde:	6878      	ldr	r0, [r7, #4]
34004de0:	f000 f88b 	bl	34004efa <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34004de4:	697b      	ldr	r3, [r7, #20]
34004de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004dea:	2b00      	cmp	r3, #0
34004dec:	d01b      	beq.n	34004e26 <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34004dee:	68fb      	ldr	r3, [r7, #12]
34004df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004df4:	2b00      	cmp	r3, #0
34004df6:	d016      	beq.n	34004e26 <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34004df8:	69fb      	ldr	r3, [r7, #28]
34004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004dfe:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34004e02:	69fb      	ldr	r3, [r7, #28]
34004e04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34004e08:	69fb      	ldr	r3, [r7, #28]
34004e0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34004e0e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34004e12:	687b      	ldr	r3, [r7, #4]
34004e14:	689b      	ldr	r3, [r3, #8]
34004e16:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
34004e1a:	687b      	ldr	r3, [r7, #4]
34004e1c:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004e1e:	2102      	movs	r1, #2
34004e20:	6878      	ldr	r0, [r7, #4]
34004e22:	f000 f86a 	bl	34004efa <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34004e26:	697b      	ldr	r3, [r7, #20]
34004e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34004e2c:	2b00      	cmp	r3, #0
34004e2e:	d01b      	beq.n	34004e68 <HAL_DCMIPP_CSI_IRQHandler+0x918>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34004e30:	68fb      	ldr	r3, [r7, #12]
34004e32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34004e36:	2b00      	cmp	r3, #0
34004e38:	d016      	beq.n	34004e68 <HAL_DCMIPP_CSI_IRQHandler+0x918>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34004e3a:	69fb      	ldr	r3, [r7, #28]
34004e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004e40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
34004e44:	69fb      	ldr	r3, [r7, #28]
34004e46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34004e4a:	69fb      	ldr	r3, [r7, #28]
34004e4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34004e50:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34004e54:	687b      	ldr	r3, [r7, #4]
34004e56:	689b      	ldr	r3, [r3, #8]
34004e58:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
34004e5c:	687b      	ldr	r3, [r7, #4]
34004e5e:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004e60:	2102      	movs	r1, #2
34004e62:	6878      	ldr	r0, [r7, #4]
34004e64:	f000 f849 	bl	34004efa <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
34004e68:	69bb      	ldr	r3, [r7, #24]
34004e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34004e6e:	2b00      	cmp	r3, #0
34004e70:	d014      	beq.n	34004e9c <HAL_DCMIPP_CSI_IRQHandler+0x94c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
34004e72:	693b      	ldr	r3, [r7, #16]
34004e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34004e78:	2b00      	cmp	r3, #0
34004e7a:	d00f      	beq.n	34004e9c <HAL_DCMIPP_CSI_IRQHandler+0x94c>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34004e7c:	69fb      	ldr	r3, [r7, #28]
34004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004e82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
34004e86:	69fb      	ldr	r3, [r7, #28]
34004e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
34004e8c:	69fb      	ldr	r3, [r7, #28]
34004e8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34004e92:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ShortPacketDetectionEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34004e96:	6878      	ldr	r0, [r7, #4]
34004e98:	f000 f844 	bl	34004f24 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34004e9c:	bf00      	nop
34004e9e:	3720      	adds	r7, #32
34004ea0:	46bd      	mov	sp, r7
34004ea2:	bd80      	pop	{r7, pc}

34004ea4 <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34004ea4:	b480      	push	{r7}
34004ea6:	b083      	sub	sp, #12
34004ea8:	af00      	add	r7, sp, #0
34004eaa:	6078      	str	r0, [r7, #4]
34004eac:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LineEventMainPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34004eae:	bf00      	nop
34004eb0:	370c      	adds	r7, #12
34004eb2:	46bd      	mov	sp, r7
34004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
34004eb8:	4770      	bx	lr

34004eba <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34004eba:	b480      	push	{r7}
34004ebc:	b083      	sub	sp, #12
34004ebe:	af00      	add	r7, sp, #0
34004ec0:	6078      	str	r0, [r7, #4]
34004ec2:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LimitEventDumpPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34004ec4:	bf00      	nop
34004ec6:	370c      	adds	r7, #12
34004ec8:	46bd      	mov	sp, r7
34004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
34004ece:	4770      	bx	lr

34004ed0 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34004ed0:	b480      	push	{r7}
34004ed2:	b083      	sub	sp, #12
34004ed4:	af00      	add	r7, sp, #0
34004ed6:	6078      	str	r0, [r7, #4]
34004ed8:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_SyncErrorEventCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34004eda:	bf00      	nop
34004edc:	370c      	adds	r7, #12
34004ede:	46bd      	mov	sp, r7
34004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
34004ee4:	4770      	bx	lr

34004ee6 <HAL_DCMIPP_ErrorCallback>:
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34004ee6:	b480      	push	{r7}
34004ee8:	b083      	sub	sp, #12
34004eea:	af00      	add	r7, sp, #0
34004eec:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_ErrorCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmipp);
}
34004eee:	bf00      	nop
34004ef0:	370c      	adds	r7, #12
34004ef2:	46bd      	mov	sp, r7
34004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
34004ef8:	4770      	bx	lr

34004efa <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
{
34004efa:	b480      	push	{r7}
34004efc:	b083      	sub	sp, #12
34004efe:	af00      	add	r7, sp, #0
34004f00:	6078      	str	r0, [r7, #4]
34004f02:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_LineErrorCallback could be implemented in the user file
   */
  UNUSED(DataLane);
  UNUSED(hdcmipp);
}
34004f04:	bf00      	nop
34004f06:	370c      	adds	r7, #12
34004f08:	46bd      	mov	sp, r7
34004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34004f0e:	4770      	bx	lr

34004f10 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34004f10:	b480      	push	{r7}
34004f12:	b083      	sub	sp, #12
34004f14:	af00      	add	r7, sp, #0
34004f16:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
34004f18:	bf00      	nop
34004f1a:	370c      	adds	r7, #12
34004f1c:	46bd      	mov	sp, r7
34004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
34004f22:	4770      	bx	lr

34004f24 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34004f24:	b480      	push	{r7}
34004f26:	b083      	sub	sp, #12
34004f28:	af00      	add	r7, sp, #0
34004f2a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
34004f2c:	bf00      	nop
34004f2e:	370c      	adds	r7, #12
34004f30:	46bd      	mov	sp, r7
34004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
34004f36:	4770      	bx	lr

34004f38 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
34004f38:	b480      	push	{r7}
34004f3a:	b083      	sub	sp, #12
34004f3c:	af00      	add	r7, sp, #0
34004f3e:	6078      	str	r0, [r7, #4]
34004f40:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_EndOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
34004f42:	bf00      	nop
34004f44:	370c      	adds	r7, #12
34004f46:	46bd      	mov	sp, r7
34004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
34004f4c:	4770      	bx	lr

34004f4e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
34004f4e:	b480      	push	{r7}
34004f50:	b083      	sub	sp, #12
34004f52:	af00      	add	r7, sp, #0
34004f54:	6078      	str	r0, [r7, #4]
34004f56:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_StartOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
34004f58:	bf00      	nop
34004f5a:	370c      	adds	r7, #12
34004f5c:	46bd      	mov	sp, r7
34004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
34004f62:	4770      	bx	lr

34004f64 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
{
34004f64:	b480      	push	{r7}
34004f66:	b083      	sub	sp, #12
34004f68:	af00      	add	r7, sp, #0
34004f6a:	6078      	str	r0, [r7, #4]
34004f6c:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_TimerCounterEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(Timer);
}
34004f6e:	bf00      	nop
34004f70:	370c      	adds	r7, #12
34004f72:	46bd      	mov	sp, r7
34004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
34004f78:	4770      	bx	lr

34004f7a <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
{
34004f7a:	b480      	push	{r7}
34004f7c:	b083      	sub	sp, #12
34004f7e:	af00      	add	r7, sp, #0
34004f80:	6078      	str	r0, [r7, #4]
34004f82:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
          the HAL_DCMIPP_CSI_LineByteEventCallback could be implemented in the user file
  */
  UNUSED(hdcmipp);
  UNUSED(Counter);
}
34004f84:	bf00      	nop
34004f86:	370c      	adds	r7, #12
34004f88:	46bd      	mov	sp, r7
34004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34004f8e:	4770      	bx	lr

34004f90 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
34004f90:	b580      	push	{r7, lr}
34004f92:	b084      	sub	sp, #16
34004f94:	af00      	add	r7, sp, #0
34004f96:	60f8      	str	r0, [r7, #12]
34004f98:	60b9      	str	r1, [r7, #8]
34004f9a:	607a      	str	r2, [r7, #4]
34004f9c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34004f9e:	68fb      	ldr	r3, [r7, #12]
34004fa0:	2b00      	cmp	r3, #0
34004fa2:	d101      	bne.n	34004fa8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
34004fa4:	2301      	movs	r3, #1
34004fa6:	e05b      	b.n	34005060 <HAL_DMA_Start_IT+0xd0>
  }

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));
34004fa8:	683b      	ldr	r3, [r7, #0]
34004faa:	2b00      	cmp	r3, #0
34004fac:	d003      	beq.n	34004fb6 <HAL_DMA_Start_IT+0x26>
34004fae:	683b      	ldr	r3, [r7, #0]
34004fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34004fb4:	d304      	bcc.n	34004fc0 <HAL_DMA_Start_IT+0x30>
34004fb6:	f240 2143 	movw	r1, #579	@ 0x243
34004fba:	482b      	ldr	r0, [pc, #172]	@ (34005068 <HAL_DMA_Start_IT+0xd8>)
34004fbc:	f7fc fc32 	bl	34001824 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
34004fc0:	68fb      	ldr	r3, [r7, #12]
34004fc2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
34004fc6:	2b01      	cmp	r3, #1
34004fc8:	d101      	bne.n	34004fce <HAL_DMA_Start_IT+0x3e>
34004fca:	2302      	movs	r3, #2
34004fcc:	e048      	b.n	34005060 <HAL_DMA_Start_IT+0xd0>
34004fce:	68fb      	ldr	r3, [r7, #12]
34004fd0:	2201      	movs	r2, #1
34004fd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
34004fd6:	68fb      	ldr	r3, [r7, #12]
34004fd8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34004fdc:	b2db      	uxtb	r3, r3
34004fde:	2b01      	cmp	r3, #1
34004fe0:	d136      	bne.n	34005050 <HAL_DMA_Start_IT+0xc0>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
34004fe2:	68fb      	ldr	r3, [r7, #12]
34004fe4:	2202      	movs	r2, #2
34004fe6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
34004fea:	68fb      	ldr	r3, [r7, #12]
34004fec:	2200      	movs	r2, #0
34004fee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
34004ff0:	683b      	ldr	r3, [r7, #0]
34004ff2:	687a      	ldr	r2, [r7, #4]
34004ff4:	68b9      	ldr	r1, [r7, #8]
34004ff6:	68f8      	ldr	r0, [r7, #12]
34004ff8:	f000 f9d6 	bl	340053a8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
34004ffc:	68fb      	ldr	r3, [r7, #12]
34004ffe:	681b      	ldr	r3, [r3, #0]
34005000:	695a      	ldr	r2, [r3, #20]
34005002:	68fb      	ldr	r3, [r7, #12]
34005004:	681b      	ldr	r3, [r3, #0]
34005006:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
3400500a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
3400500c:	68fb      	ldr	r3, [r7, #12]
3400500e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005010:	2b00      	cmp	r3, #0
34005012:	d007      	beq.n	34005024 <HAL_DMA_Start_IT+0x94>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
34005014:	68fb      	ldr	r3, [r7, #12]
34005016:	681b      	ldr	r3, [r3, #0]
34005018:	695a      	ldr	r2, [r3, #20]
3400501a:	68fb      	ldr	r3, [r7, #12]
3400501c:	681b      	ldr	r3, [r3, #0]
3400501e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34005022:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
34005024:	68fb      	ldr	r3, [r7, #12]
34005026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34005028:	2b00      	cmp	r3, #0
3400502a:	d007      	beq.n	3400503c <HAL_DMA_Start_IT+0xac>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
3400502c:	68fb      	ldr	r3, [r7, #12]
3400502e:	681b      	ldr	r3, [r3, #0]
34005030:	695a      	ldr	r2, [r3, #20]
34005032:	68fb      	ldr	r3, [r7, #12]
34005034:	681b      	ldr	r3, [r3, #0]
34005036:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
3400503a:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
3400503c:	68fb      	ldr	r3, [r7, #12]
3400503e:	681b      	ldr	r3, [r3, #0]
34005040:	695a      	ldr	r2, [r3, #20]
34005042:	68fb      	ldr	r3, [r7, #12]
34005044:	681b      	ldr	r3, [r3, #0]
34005046:	f042 0201 	orr.w	r2, r2, #1
3400504a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
3400504c:	2300      	movs	r3, #0
3400504e:	e007      	b.n	34005060 <HAL_DMA_Start_IT+0xd0>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
34005050:	68fb      	ldr	r3, [r7, #12]
34005052:	2240      	movs	r2, #64	@ 0x40
34005054:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
34005056:	68fb      	ldr	r3, [r7, #12]
34005058:	2200      	movs	r2, #0
3400505a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
3400505e:	2301      	movs	r3, #1
}
34005060:	4618      	mov	r0, r3
34005062:	3710      	adds	r7, #16
34005064:	46bd      	mov	sp, r7
34005066:	bd80      	pop	{r7, pc}
34005068:	3401cb80 	.word	0x3401cb80

3400506c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
3400506c:	b480      	push	{r7}
3400506e:	b083      	sub	sp, #12
34005070:	af00      	add	r7, sp, #0
34005072:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34005074:	687b      	ldr	r3, [r7, #4]
34005076:	2b00      	cmp	r3, #0
34005078:	d101      	bne.n	3400507e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
3400507a:	2301      	movs	r3, #1
3400507c:	e019      	b.n	340050b2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
3400507e:	687b      	ldr	r3, [r7, #4]
34005080:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34005084:	b2db      	uxtb	r3, r3
34005086:	2b02      	cmp	r3, #2
34005088:	d004      	beq.n	34005094 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
3400508a:	687b      	ldr	r3, [r7, #4]
3400508c:	2220      	movs	r2, #32
3400508e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
34005090:	2301      	movs	r3, #1
34005092:	e00e      	b.n	340050b2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
34005094:	687b      	ldr	r3, [r7, #4]
34005096:	2204      	movs	r2, #4
34005098:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
3400509c:	687b      	ldr	r3, [r7, #4]
3400509e:	681b      	ldr	r3, [r3, #0]
340050a0:	695b      	ldr	r3, [r3, #20]
340050a2:	687a      	ldr	r2, [r7, #4]
340050a4:	6812      	ldr	r2, [r2, #0]
340050a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
340050aa:	f043 0304 	orr.w	r3, r3, #4
340050ae:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
340050b0:	2300      	movs	r3, #0
}
340050b2:	4618      	mov	r0, r3
340050b4:	370c      	adds	r7, #12
340050b6:	46bd      	mov	sp, r7
340050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
340050bc:	4770      	bx	lr

340050be <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
340050be:	b580      	push	{r7, lr}
340050c0:	b086      	sub	sp, #24
340050c2:	af00      	add	r7, sp, #0
340050c4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
340050c6:	687b      	ldr	r3, [r7, #4]
340050c8:	681b      	ldr	r3, [r3, #0]
340050ca:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
340050ce:	f023 030f 	bic.w	r3, r3, #15
340050d2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
340050d4:	687b      	ldr	r3, [r7, #4]
340050d6:	681b      	ldr	r3, [r3, #0]
340050d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
340050dc:	3b50      	subs	r3, #80	@ 0x50
340050de:	09db      	lsrs	r3, r3, #7
340050e0:	f003 031f 	and.w	r3, r3, #31
340050e4:	2201      	movs	r2, #1
340050e6:	fa02 f303 	lsl.w	r3, r2, r3
340050ea:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
340050ec:	697b      	ldr	r3, [r7, #20]
340050ee:	68db      	ldr	r3, [r3, #12]
340050f0:	693a      	ldr	r2, [r7, #16]
340050f2:	4013      	ands	r3, r2
340050f4:	60fb      	str	r3, [r7, #12]
#if defined (CPU_IN_SECURE_STATE)
  uint32_t global_active_flag_s = IS_DMA_GLOBAL_ACTIVE_FLAG_S(p_dma_instance, global_it_flag);
340050f6:	697b      	ldr	r3, [r7, #20]
340050f8:	691b      	ldr	r3, [r3, #16]
340050fa:	693a      	ldr	r2, [r7, #16]
340050fc:	4013      	ands	r3, r2
340050fe:	60bb      	str	r3, [r7, #8]
#endif /* CPU_IN_SECURE_STATE */

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (CPU_IN_SECURE_STATE)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
34005100:	68bb      	ldr	r3, [r7, #8]
34005102:	2b00      	cmp	r3, #0
34005104:	d103      	bne.n	3400510e <HAL_DMA_IRQHandler+0x50>
34005106:	68fb      	ldr	r3, [r7, #12]
34005108:	2b00      	cmp	r3, #0
3400510a:	f000 813b 	beq.w	34005384 <HAL_DMA_IRQHandler+0x2c6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
3400510e:	687b      	ldr	r3, [r7, #4]
34005110:	681b      	ldr	r3, [r3, #0]
34005112:	691b      	ldr	r3, [r3, #16]
34005114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34005118:	2b00      	cmp	r3, #0
3400511a:	d011      	beq.n	34005140 <HAL_DMA_IRQHandler+0x82>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
3400511c:	687b      	ldr	r3, [r7, #4]
3400511e:	681b      	ldr	r3, [r3, #0]
34005120:	695b      	ldr	r3, [r3, #20]
34005122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34005126:	2b00      	cmp	r3, #0
34005128:	d00a      	beq.n	34005140 <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
3400512a:	687b      	ldr	r3, [r7, #4]
3400512c:	681b      	ldr	r3, [r3, #0]
3400512e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34005132:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
34005134:	687b      	ldr	r3, [r7, #4]
34005136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34005138:	f043 0201 	orr.w	r2, r3, #1
3400513c:	687b      	ldr	r3, [r7, #4]
3400513e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
34005140:	687b      	ldr	r3, [r7, #4]
34005142:	681b      	ldr	r3, [r3, #0]
34005144:	691b      	ldr	r3, [r3, #16]
34005146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400514a:	2b00      	cmp	r3, #0
3400514c:	d011      	beq.n	34005172 <HAL_DMA_IRQHandler+0xb4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
3400514e:	687b      	ldr	r3, [r7, #4]
34005150:	681b      	ldr	r3, [r3, #0]
34005152:	695b      	ldr	r3, [r3, #20]
34005154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34005158:	2b00      	cmp	r3, #0
3400515a:	d00a      	beq.n	34005172 <HAL_DMA_IRQHandler+0xb4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
3400515c:	687b      	ldr	r3, [r7, #4]
3400515e:	681b      	ldr	r3, [r3, #0]
34005160:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34005164:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
34005166:	687b      	ldr	r3, [r7, #4]
34005168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3400516a:	f043 0202 	orr.w	r2, r3, #2
3400516e:	687b      	ldr	r3, [r7, #4]
34005170:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
34005172:	687b      	ldr	r3, [r7, #4]
34005174:	681b      	ldr	r3, [r3, #0]
34005176:	691b      	ldr	r3, [r3, #16]
34005178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400517c:	2b00      	cmp	r3, #0
3400517e:	d011      	beq.n	340051a4 <HAL_DMA_IRQHandler+0xe6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
34005180:	687b      	ldr	r3, [r7, #4]
34005182:	681b      	ldr	r3, [r3, #0]
34005184:	695b      	ldr	r3, [r3, #20]
34005186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400518a:	2b00      	cmp	r3, #0
3400518c:	d00a      	beq.n	340051a4 <HAL_DMA_IRQHandler+0xe6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
3400518e:	687b      	ldr	r3, [r7, #4]
34005190:	681b      	ldr	r3, [r3, #0]
34005192:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34005196:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
34005198:	687b      	ldr	r3, [r7, #4]
3400519a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3400519c:	f043 0204 	orr.w	r2, r3, #4
340051a0:	687b      	ldr	r3, [r7, #4]
340051a2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
340051a4:	687b      	ldr	r3, [r7, #4]
340051a6:	681b      	ldr	r3, [r3, #0]
340051a8:	691b      	ldr	r3, [r3, #16]
340051aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
340051ae:	2b00      	cmp	r3, #0
340051b0:	d011      	beq.n	340051d6 <HAL_DMA_IRQHandler+0x118>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
340051b2:	687b      	ldr	r3, [r7, #4]
340051b4:	681b      	ldr	r3, [r3, #0]
340051b6:	695b      	ldr	r3, [r3, #20]
340051b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
340051bc:	2b00      	cmp	r3, #0
340051be:	d00a      	beq.n	340051d6 <HAL_DMA_IRQHandler+0x118>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
340051c0:	687b      	ldr	r3, [r7, #4]
340051c2:	681b      	ldr	r3, [r3, #0]
340051c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340051c8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
340051ca:	687b      	ldr	r3, [r7, #4]
340051cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340051ce:	f043 0208 	orr.w	r2, r3, #8
340051d2:	687b      	ldr	r3, [r7, #4]
340051d4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
340051d6:	687b      	ldr	r3, [r7, #4]
340051d8:	681b      	ldr	r3, [r3, #0]
340051da:	691b      	ldr	r3, [r3, #16]
340051dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340051e0:	2b00      	cmp	r3, #0
340051e2:	d013      	beq.n	3400520c <HAL_DMA_IRQHandler+0x14e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
340051e4:	687b      	ldr	r3, [r7, #4]
340051e6:	681b      	ldr	r3, [r3, #0]
340051e8:	695b      	ldr	r3, [r3, #20]
340051ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340051ee:	2b00      	cmp	r3, #0
340051f0:	d00c      	beq.n	3400520c <HAL_DMA_IRQHandler+0x14e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
340051f2:	687b      	ldr	r3, [r7, #4]
340051f4:	681b      	ldr	r3, [r3, #0]
340051f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
340051fa:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
340051fc:	687b      	ldr	r3, [r7, #4]
340051fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005200:	2b00      	cmp	r3, #0
34005202:	d003      	beq.n	3400520c <HAL_DMA_IRQHandler+0x14e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
34005204:	687b      	ldr	r3, [r7, #4]
34005206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005208:	6878      	ldr	r0, [r7, #4]
3400520a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
3400520c:	687b      	ldr	r3, [r7, #4]
3400520e:	681b      	ldr	r3, [r3, #0]
34005210:	691b      	ldr	r3, [r3, #16]
34005212:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34005216:	2b00      	cmp	r3, #0
34005218:	d04c      	beq.n	340052b4 <HAL_DMA_IRQHandler+0x1f6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
3400521a:	687b      	ldr	r3, [r7, #4]
3400521c:	681b      	ldr	r3, [r3, #0]
3400521e:	695b      	ldr	r3, [r3, #20]
34005220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34005224:	2b00      	cmp	r3, #0
34005226:	d045      	beq.n	340052b4 <HAL_DMA_IRQHandler+0x1f6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
34005228:	687b      	ldr	r3, [r7, #4]
3400522a:	681b      	ldr	r3, [r3, #0]
3400522c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34005230:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
34005232:	687b      	ldr	r3, [r7, #4]
34005234:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34005238:	b2db      	uxtb	r3, r3
3400523a:	2b04      	cmp	r3, #4
3400523c:	d12e      	bne.n	3400529c <HAL_DMA_IRQHandler+0x1de>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
3400523e:	687b      	ldr	r3, [r7, #4]
34005240:	681b      	ldr	r3, [r3, #0]
34005242:	695a      	ldr	r2, [r3, #20]
34005244:	687b      	ldr	r3, [r7, #4]
34005246:	681b      	ldr	r3, [r3, #0]
34005248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
3400524c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
3400524e:	687b      	ldr	r3, [r7, #4]
34005250:	681b      	ldr	r3, [r3, #0]
34005252:	695a      	ldr	r2, [r3, #20]
34005254:	687b      	ldr	r3, [r7, #4]
34005256:	681b      	ldr	r3, [r3, #0]
34005258:	f042 0202 	orr.w	r2, r2, #2
3400525c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
3400525e:	687b      	ldr	r3, [r7, #4]
34005260:	2201      	movs	r2, #1
34005262:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34005266:	687b      	ldr	r3, [r7, #4]
34005268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400526a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3400526e:	2b00      	cmp	r3, #0
34005270:	d007      	beq.n	34005282 <HAL_DMA_IRQHandler+0x1c4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34005272:	687b      	ldr	r3, [r7, #4]
34005274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005276:	2201      	movs	r2, #1
34005278:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
3400527a:	687b      	ldr	r3, [r7, #4]
3400527c:	681b      	ldr	r3, [r3, #0]
3400527e:	2200      	movs	r2, #0
34005280:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
34005282:	687b      	ldr	r3, [r7, #4]
34005284:	2200      	movs	r2, #0
34005286:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
3400528a:	687b      	ldr	r3, [r7, #4]
3400528c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400528e:	2b00      	cmp	r3, #0
34005290:	d07a      	beq.n	34005388 <HAL_DMA_IRQHandler+0x2ca>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
34005292:	687b      	ldr	r3, [r7, #4]
34005294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34005296:	6878      	ldr	r0, [r7, #4]
34005298:	4798      	blx	r3
        }

        return;
3400529a:	e075      	b.n	34005388 <HAL_DMA_IRQHandler+0x2ca>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
3400529c:	687b      	ldr	r3, [r7, #4]
3400529e:	2205      	movs	r2, #5
340052a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
340052a4:	687b      	ldr	r3, [r7, #4]
340052a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340052a8:	2b00      	cmp	r3, #0
340052aa:	d003      	beq.n	340052b4 <HAL_DMA_IRQHandler+0x1f6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
340052ac:	687b      	ldr	r3, [r7, #4]
340052ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340052b0:	6878      	ldr	r0, [r7, #4]
340052b2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
340052b4:	687b      	ldr	r3, [r7, #4]
340052b6:	681b      	ldr	r3, [r3, #0]
340052b8:	691b      	ldr	r3, [r3, #16]
340052ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340052be:	2b00      	cmp	r3, #0
340052c0:	d039      	beq.n	34005336 <HAL_DMA_IRQHandler+0x278>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
340052c2:	687b      	ldr	r3, [r7, #4]
340052c4:	681b      	ldr	r3, [r3, #0]
340052c6:	695b      	ldr	r3, [r3, #20]
340052c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340052cc:	2b00      	cmp	r3, #0
340052ce:	d032      	beq.n	34005336 <HAL_DMA_IRQHandler+0x278>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
340052d0:	687b      	ldr	r3, [r7, #4]
340052d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340052d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340052d8:	2b00      	cmp	r3, #0
340052da:	d012      	beq.n	34005302 <HAL_DMA_IRQHandler+0x244>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
340052dc:	687b      	ldr	r3, [r7, #4]
340052de:	681b      	ldr	r3, [r3, #0]
340052e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340052e2:	2b00      	cmp	r3, #0
340052e4:	d116      	bne.n	34005314 <HAL_DMA_IRQHandler+0x256>
        {
          if (hdma->Instance->CBR1 == 0U)
340052e6:	687b      	ldr	r3, [r7, #4]
340052e8:	681b      	ldr	r3, [r3, #0]
340052ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340052ec:	2b00      	cmp	r3, #0
340052ee:	d111      	bne.n	34005314 <HAL_DMA_IRQHandler+0x256>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
340052f0:	687b      	ldr	r3, [r7, #4]
340052f2:	2201      	movs	r2, #1
340052f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
340052f8:	687b      	ldr	r3, [r7, #4]
340052fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340052fc:	2201      	movs	r2, #1
340052fe:	731a      	strb	r2, [r3, #12]
34005300:	e008      	b.n	34005314 <HAL_DMA_IRQHandler+0x256>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
34005302:	687b      	ldr	r3, [r7, #4]
34005304:	681b      	ldr	r3, [r3, #0]
34005306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005308:	2b00      	cmp	r3, #0
3400530a:	d103      	bne.n	34005314 <HAL_DMA_IRQHandler+0x256>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
3400530c:	687b      	ldr	r3, [r7, #4]
3400530e:	2201      	movs	r2, #1
34005310:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
34005314:	687b      	ldr	r3, [r7, #4]
34005316:	681b      	ldr	r3, [r3, #0]
34005318:	f44f 7240 	mov.w	r2, #768	@ 0x300
3400531c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
3400531e:	687b      	ldr	r3, [r7, #4]
34005320:	2200      	movs	r2, #0
34005322:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
34005326:	687b      	ldr	r3, [r7, #4]
34005328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400532a:	2b00      	cmp	r3, #0
3400532c:	d003      	beq.n	34005336 <HAL_DMA_IRQHandler+0x278>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
3400532e:	687b      	ldr	r3, [r7, #4]
34005330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34005332:	6878      	ldr	r0, [r7, #4]
34005334:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
34005336:	687b      	ldr	r3, [r7, #4]
34005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3400533a:	2b00      	cmp	r3, #0
3400533c:	d025      	beq.n	3400538a <HAL_DMA_IRQHandler+0x2cc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
3400533e:	687b      	ldr	r3, [r7, #4]
34005340:	681b      	ldr	r3, [r3, #0]
34005342:	695a      	ldr	r2, [r3, #20]
34005344:	687b      	ldr	r3, [r7, #4]
34005346:	681b      	ldr	r3, [r3, #0]
34005348:	f042 0202 	orr.w	r2, r2, #2
3400534c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
3400534e:	687b      	ldr	r3, [r7, #4]
34005350:	2201      	movs	r2, #1
34005352:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34005356:	687b      	ldr	r3, [r7, #4]
34005358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400535a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3400535e:	2b00      	cmp	r3, #0
34005360:	d003      	beq.n	3400536a <HAL_DMA_IRQHandler+0x2ac>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34005362:	687b      	ldr	r3, [r7, #4]
34005364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005366:	2201      	movs	r2, #1
34005368:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
3400536a:	687b      	ldr	r3, [r7, #4]
3400536c:	2200      	movs	r2, #0
3400536e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
34005372:	687b      	ldr	r3, [r7, #4]
34005374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34005376:	2b00      	cmp	r3, #0
34005378:	d007      	beq.n	3400538a <HAL_DMA_IRQHandler+0x2cc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
3400537a:	687b      	ldr	r3, [r7, #4]
3400537c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400537e:	6878      	ldr	r0, [r7, #4]
34005380:	4798      	blx	r3
34005382:	e002      	b.n	3400538a <HAL_DMA_IRQHandler+0x2cc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
34005384:	bf00      	nop
34005386:	e000      	b.n	3400538a <HAL_DMA_IRQHandler+0x2cc>
        return;
34005388:	bf00      	nop
    }
  }
}
3400538a:	3718      	adds	r7, #24
3400538c:	46bd      	mov	sp, r7
3400538e:	bd80      	pop	{r7, pc}

34005390 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
34005390:	b480      	push	{r7}
34005392:	b083      	sub	sp, #12
34005394:	af00      	add	r7, sp, #0
34005396:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
34005398:	687b      	ldr	r3, [r7, #4]
3400539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
3400539c:	4618      	mov	r0, r3
3400539e:	370c      	adds	r7, #12
340053a0:	46bd      	mov	sp, r7
340053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340053a6:	4770      	bx	lr

340053a8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
340053a8:	b480      	push	{r7}
340053aa:	b085      	sub	sp, #20
340053ac:	af00      	add	r7, sp, #0
340053ae:	60f8      	str	r0, [r7, #12]
340053b0:	60b9      	str	r1, [r7, #8]
340053b2:	607a      	str	r2, [r7, #4]
340053b4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
340053b6:	68fb      	ldr	r3, [r7, #12]
340053b8:	681b      	ldr	r3, [r3, #0]
340053ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340053bc:	0c1b      	lsrs	r3, r3, #16
340053be:	041b      	lsls	r3, r3, #16
340053c0:	683a      	ldr	r2, [r7, #0]
340053c2:	b291      	uxth	r1, r2
340053c4:	68fa      	ldr	r2, [r7, #12]
340053c6:	6812      	ldr	r2, [r2, #0]
340053c8:	430b      	orrs	r3, r1
340053ca:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
340053cc:	68fb      	ldr	r3, [r7, #12]
340053ce:	681b      	ldr	r3, [r3, #0]
340053d0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
340053d4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
340053d6:	68fb      	ldr	r3, [r7, #12]
340053d8:	681b      	ldr	r3, [r3, #0]
340053da:	68ba      	ldr	r2, [r7, #8]
340053dc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
340053de:	68fb      	ldr	r3, [r7, #12]
340053e0:	681b      	ldr	r3, [r3, #0]
340053e2:	687a      	ldr	r2, [r7, #4]
340053e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
340053e6:	bf00      	nop
340053e8:	3714      	adds	r7, #20
340053ea:	46bd      	mov	sp, r7
340053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
340053f0:	4770      	bx	lr

340053f2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
340053f2:	b580      	push	{r7, lr}
340053f4:	b084      	sub	sp, #16
340053f6:	af00      	add	r7, sp, #0
340053f8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
340053fa:	687b      	ldr	r3, [r7, #4]
340053fc:	681b      	ldr	r3, [r3, #0]
340053fe:	685b      	ldr	r3, [r3, #4]
34005400:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
34005402:	687b      	ldr	r3, [r7, #4]
34005404:	681b      	ldr	r3, [r3, #0]
34005406:	681b      	ldr	r3, [r3, #0]
34005408:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
3400540a:	68fb      	ldr	r3, [r7, #12]
3400540c:	f003 0301 	and.w	r3, r3, #1
34005410:	2b00      	cmp	r3, #0
34005412:	d026      	beq.n	34005462 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
34005414:	68bb      	ldr	r3, [r7, #8]
34005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400541a:	2b00      	cmp	r3, #0
3400541c:	d021      	beq.n	34005462 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
3400541e:	687b      	ldr	r3, [r7, #4]
34005420:	681b      	ldr	r3, [r3, #0]
34005422:	681a      	ldr	r2, [r3, #0]
34005424:	687b      	ldr	r3, [r7, #4]
34005426:	681b      	ldr	r3, [r3, #0]
34005428:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
3400542c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
3400542e:	687b      	ldr	r3, [r7, #4]
34005430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005432:	f043 0201 	orr.w	r2, r3, #1
34005436:	687b      	ldr	r3, [r7, #4]
34005438:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
3400543a:	687b      	ldr	r3, [r7, #4]
3400543c:	681b      	ldr	r3, [r3, #0]
3400543e:	2201      	movs	r2, #1
34005440:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34005442:	687b      	ldr	r3, [r7, #4]
34005444:	2204      	movs	r2, #4
34005446:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
3400544a:	687b      	ldr	r3, [r7, #4]
3400544c:	2200      	movs	r2, #0
3400544e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
34005452:	687b      	ldr	r3, [r7, #4]
34005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34005456:	2b00      	cmp	r3, #0
34005458:	d003      	beq.n	34005462 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
3400545a:	687b      	ldr	r3, [r7, #4]
3400545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400545e:	6878      	ldr	r0, [r7, #4]
34005460:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
34005462:	68fb      	ldr	r3, [r7, #12]
34005464:	f003 0320 	and.w	r3, r3, #32
34005468:	2b00      	cmp	r3, #0
3400546a:	d026      	beq.n	340054ba <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
3400546c:	68bb      	ldr	r3, [r7, #8]
3400546e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34005472:	2b00      	cmp	r3, #0
34005474:	d021      	beq.n	340054ba <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
34005476:	687b      	ldr	r3, [r7, #4]
34005478:	681b      	ldr	r3, [r3, #0]
3400547a:	681a      	ldr	r2, [r3, #0]
3400547c:	687b      	ldr	r3, [r7, #4]
3400547e:	681b      	ldr	r3, [r3, #0]
34005480:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
34005484:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
34005486:	687b      	ldr	r3, [r7, #4]
34005488:	681b      	ldr	r3, [r3, #0]
3400548a:	2220      	movs	r2, #32
3400548c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
3400548e:	687b      	ldr	r3, [r7, #4]
34005490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005492:	f043 0202 	orr.w	r2, r3, #2
34005496:	687b      	ldr	r3, [r7, #4]
34005498:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
3400549a:	687b      	ldr	r3, [r7, #4]
3400549c:	2204      	movs	r2, #4
3400549e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
340054a2:	687b      	ldr	r3, [r7, #4]
340054a4:	2200      	movs	r2, #0
340054a6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
340054aa:	687b      	ldr	r3, [r7, #4]
340054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340054ae:	2b00      	cmp	r3, #0
340054b0:	d003      	beq.n	340054ba <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
340054b2:	687b      	ldr	r3, [r7, #4]
340054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340054b6:	6878      	ldr	r0, [r7, #4]
340054b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
340054ba:	68fb      	ldr	r3, [r7, #12]
340054bc:	f003 0308 	and.w	r3, r3, #8
340054c0:	2b00      	cmp	r3, #0
340054c2:	d026      	beq.n	34005512 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
340054c4:	68bb      	ldr	r3, [r7, #8]
340054c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340054ca:	2b00      	cmp	r3, #0
340054cc:	d021      	beq.n	34005512 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
340054ce:	687b      	ldr	r3, [r7, #4]
340054d0:	681b      	ldr	r3, [r3, #0]
340054d2:	681a      	ldr	r2, [r3, #0]
340054d4:	687b      	ldr	r3, [r7, #4]
340054d6:	681b      	ldr	r3, [r3, #0]
340054d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
340054dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
340054de:	687b      	ldr	r3, [r7, #4]
340054e0:	681b      	ldr	r3, [r3, #0]
340054e2:	2208      	movs	r2, #8
340054e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
340054e6:	687b      	ldr	r3, [r7, #4]
340054e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
340054ea:	f043 0204 	orr.w	r2, r3, #4
340054ee:	687b      	ldr	r3, [r7, #4]
340054f0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
340054f2:	687b      	ldr	r3, [r7, #4]
340054f4:	2204      	movs	r2, #4
340054f6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
340054fa:	687b      	ldr	r3, [r7, #4]
340054fc:	2200      	movs	r2, #0
340054fe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
34005502:	687b      	ldr	r3, [r7, #4]
34005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34005506:	2b00      	cmp	r3, #0
34005508:	d003      	beq.n	34005512 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
3400550a:	687b      	ldr	r3, [r7, #4]
3400550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400550e:	6878      	ldr	r0, [r7, #4]
34005510:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
34005512:	68fb      	ldr	r3, [r7, #12]
34005514:	f003 0304 	and.w	r3, r3, #4
34005518:	2b00      	cmp	r3, #0
3400551a:	d013      	beq.n	34005544 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
3400551c:	68bb      	ldr	r3, [r7, #8]
3400551e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34005522:	2b00      	cmp	r3, #0
34005524:	d00e      	beq.n	34005544 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34005526:	687b      	ldr	r3, [r7, #4]
34005528:	681b      	ldr	r3, [r3, #0]
3400552a:	681a      	ldr	r2, [r3, #0]
3400552c:	687b      	ldr	r3, [r7, #4]
3400552e:	681b      	ldr	r3, [r3, #0]
34005530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34005534:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
34005536:	687b      	ldr	r3, [r7, #4]
34005538:	681b      	ldr	r3, [r3, #0]
3400553a:	2204      	movs	r2, #4
3400553c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
3400553e:	6878      	ldr	r0, [r7, #4]
34005540:	f000 f853 	bl	340055ea <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
34005544:	68fb      	ldr	r3, [r7, #12]
34005546:	f003 0302 	and.w	r3, r3, #2
3400554a:	2b00      	cmp	r3, #0
3400554c:	d024      	beq.n	34005598 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
3400554e:	68bb      	ldr	r3, [r7, #8]
34005550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34005554:	2b00      	cmp	r3, #0
34005556:	d01f      	beq.n	34005598 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
34005558:	687b      	ldr	r3, [r7, #4]
3400555a:	681b      	ldr	r3, [r3, #0]
3400555c:	681a      	ldr	r2, [r3, #0]
3400555e:	687b      	ldr	r3, [r7, #4]
34005560:	681b      	ldr	r3, [r3, #0]
34005562:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34005566:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
34005568:	687b      	ldr	r3, [r7, #4]
3400556a:	681b      	ldr	r3, [r3, #0]
3400556c:	2202      	movs	r2, #2
3400556e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34005570:	687b      	ldr	r3, [r7, #4]
34005572:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
34005574:	687b      	ldr	r3, [r7, #4]
34005576:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
34005578:	687b      	ldr	r3, [r7, #4]
3400557a:	2201      	movs	r2, #1
3400557c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34005580:	687b      	ldr	r3, [r7, #4]
34005582:	2200      	movs	r2, #0
34005584:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
34005588:	687b      	ldr	r3, [r7, #4]
3400558a:	6a1b      	ldr	r3, [r3, #32]
3400558c:	2b00      	cmp	r3, #0
3400558e:	d003      	beq.n	34005598 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
34005590:	687b      	ldr	r3, [r7, #4]
34005592:	6a1b      	ldr	r3, [r3, #32]
34005594:	6878      	ldr	r0, [r7, #4]
34005596:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
34005598:	68fb      	ldr	r3, [r7, #12]
3400559a:	f003 0310 	and.w	r3, r3, #16
3400559e:	2b00      	cmp	r3, #0
340055a0:	d01f      	beq.n	340055e2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
340055a2:	68bb      	ldr	r3, [r7, #8]
340055a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340055a8:	2b00      	cmp	r3, #0
340055aa:	d01a      	beq.n	340055e2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
340055ac:	687b      	ldr	r3, [r7, #4]
340055ae:	681b      	ldr	r3, [r3, #0]
340055b0:	681a      	ldr	r2, [r3, #0]
340055b2:	687b      	ldr	r3, [r7, #4]
340055b4:	681b      	ldr	r3, [r3, #0]
340055b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
340055ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
340055bc:	687b      	ldr	r3, [r7, #4]
340055be:	681b      	ldr	r3, [r3, #0]
340055c0:	2210      	movs	r2, #16
340055c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
340055c4:	687b      	ldr	r3, [r7, #4]
340055c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
340055c8:	687b      	ldr	r3, [r7, #4]
340055ca:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
340055cc:	687b      	ldr	r3, [r7, #4]
340055ce:	2201      	movs	r2, #1
340055d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
340055d4:	687b      	ldr	r3, [r7, #4]
340055d6:	2200      	movs	r2, #0
340055d8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
340055dc:	6878      	ldr	r0, [r7, #4]
340055de:	f000 f80e 	bl	340055fe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
340055e2:	bf00      	nop
340055e4:	3710      	adds	r7, #16
340055e6:	46bd      	mov	sp, r7
340055e8:	bd80      	pop	{r7, pc}

340055ea <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
340055ea:	b480      	push	{r7}
340055ec:	b083      	sub	sp, #12
340055ee:	af00      	add	r7, sp, #0
340055f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
340055f2:	bf00      	nop
340055f4:	370c      	adds	r7, #12
340055f6:	46bd      	mov	sp, r7
340055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
340055fc:	4770      	bx	lr

340055fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
340055fe:	b480      	push	{r7}
34005600:	b083      	sub	sp, #12
34005602:	af00      	add	r7, sp, #0
34005604:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
34005606:	bf00      	nop
34005608:	370c      	adds	r7, #12
3400560a:	46bd      	mov	sp, r7
3400560c:	f85d 7b04 	ldr.w	r7, [sp], #4
34005610:	4770      	bx	lr

34005612 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
34005612:	b580      	push	{r7, lr}
34005614:	b086      	sub	sp, #24
34005616:	af00      	add	r7, sp, #0
34005618:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
3400561a:	687b      	ldr	r3, [r7, #4]
3400561c:	2b00      	cmp	r3, #0
3400561e:	d003      	beq.n	34005628 <HAL_DMAEx_List_Start_IT+0x16>
34005620:	687b      	ldr	r3, [r7, #4]
34005622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005624:	2b00      	cmp	r3, #0
34005626:	d101      	bne.n	3400562c <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
34005628:	2301      	movs	r3, #1
3400562a:	e082      	b.n	34005732 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
3400562c:	687b      	ldr	r3, [r7, #4]
3400562e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34005632:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
34005634:	687b      	ldr	r3, [r7, #4]
34005636:	681b      	ldr	r3, [r3, #0]
34005638:	695b      	ldr	r3, [r3, #20]
3400563a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400563e:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
34005640:	7dfb      	ldrb	r3, [r7, #23]
34005642:	2b01      	cmp	r3, #1
34005644:	d005      	beq.n	34005652 <HAL_DMAEx_List_Start_IT+0x40>
34005646:	7dfb      	ldrb	r3, [r7, #23]
34005648:	2b02      	cmp	r3, #2
3400564a:	d16a      	bne.n	34005722 <HAL_DMAEx_List_Start_IT+0x110>
3400564c:	693b      	ldr	r3, [r7, #16]
3400564e:	2b00      	cmp	r3, #0
34005650:	d067      	beq.n	34005722 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
34005652:	687b      	ldr	r3, [r7, #4]
34005654:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34005658:	b2db      	uxtb	r3, r3
3400565a:	2b01      	cmp	r3, #1
3400565c:	d157      	bne.n	3400570e <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
3400565e:	687b      	ldr	r3, [r7, #4]
34005660:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
34005664:	2b01      	cmp	r3, #1
34005666:	d101      	bne.n	3400566c <HAL_DMAEx_List_Start_IT+0x5a>
34005668:	2302      	movs	r3, #2
3400566a:	e062      	b.n	34005732 <HAL_DMAEx_List_Start_IT+0x120>
3400566c:	687b      	ldr	r3, [r7, #4]
3400566e:	2201      	movs	r2, #1
34005670:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
34005674:	687b      	ldr	r3, [r7, #4]
34005676:	2202      	movs	r2, #2
34005678:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
3400567c:	687b      	ldr	r3, [r7, #4]
3400567e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005680:	2202      	movs	r2, #2
34005682:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
34005684:	687b      	ldr	r3, [r7, #4]
34005686:	2200      	movs	r2, #0
34005688:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
3400568a:	687b      	ldr	r3, [r7, #4]
3400568c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400568e:	2200      	movs	r2, #0
34005690:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
34005692:	687b      	ldr	r3, [r7, #4]
34005694:	681b      	ldr	r3, [r3, #0]
34005696:	695a      	ldr	r2, [r3, #20]
34005698:	687b      	ldr	r3, [r7, #4]
3400569a:	681b      	ldr	r3, [r3, #0]
3400569c:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
340056a0:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
340056a2:	687b      	ldr	r3, [r7, #4]
340056a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
340056a6:	2b00      	cmp	r3, #0
340056a8:	d007      	beq.n	340056ba <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
340056aa:	687b      	ldr	r3, [r7, #4]
340056ac:	681b      	ldr	r3, [r3, #0]
340056ae:	695a      	ldr	r2, [r3, #20]
340056b0:	687b      	ldr	r3, [r7, #4]
340056b2:	681b      	ldr	r3, [r3, #0]
340056b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
340056b8:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
340056ba:	687b      	ldr	r3, [r7, #4]
340056bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340056be:	2b00      	cmp	r3, #0
340056c0:	d007      	beq.n	340056d2 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
340056c2:	687b      	ldr	r3, [r7, #4]
340056c4:	681b      	ldr	r3, [r3, #0]
340056c6:	695a      	ldr	r2, [r3, #20]
340056c8:	687b      	ldr	r3, [r7, #4]
340056ca:	681b      	ldr	r3, [r3, #0]
340056cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
340056d0:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
340056d2:	687b      	ldr	r3, [r7, #4]
340056d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340056d6:	681b      	ldr	r3, [r3, #0]
340056d8:	f107 010c 	add.w	r1, r7, #12
340056dc:	2200      	movs	r2, #0
340056de:	4618      	mov	r0, r3
340056e0:	f000 f82c 	bl	3400573c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
340056e4:	687b      	ldr	r3, [r7, #4]
340056e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340056e8:	681b      	ldr	r3, [r3, #0]
340056ea:	4619      	mov	r1, r3
340056ec:	687b      	ldr	r3, [r7, #4]
340056ee:	681a      	ldr	r2, [r3, #0]
340056f0:	0c0b      	lsrs	r3, r1, #16
340056f2:	041b      	lsls	r3, r3, #16
340056f4:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
340056f6:	687b      	ldr	r3, [r7, #4]
340056f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340056fa:	681b      	ldr	r3, [r3, #0]
340056fc:	461a      	mov	r2, r3
340056fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
34005702:	4013      	ands	r3, r2
34005704:	68f9      	ldr	r1, [r7, #12]
34005706:	687a      	ldr	r2, [r7, #4]
34005708:	6812      	ldr	r2, [r2, #0]
3400570a:	430b      	orrs	r3, r1
3400570c:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
3400570e:	687b      	ldr	r3, [r7, #4]
34005710:	681b      	ldr	r3, [r3, #0]
34005712:	695a      	ldr	r2, [r3, #20]
34005714:	687b      	ldr	r3, [r7, #4]
34005716:	681b      	ldr	r3, [r3, #0]
34005718:	f042 0201 	orr.w	r2, r2, #1
3400571c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
3400571e:	2300      	movs	r3, #0
34005720:	e007      	b.n	34005732 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
34005722:	687b      	ldr	r3, [r7, #4]
34005724:	2240      	movs	r2, #64	@ 0x40
34005726:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
34005728:	687b      	ldr	r3, [r7, #4]
3400572a:	2200      	movs	r2, #0
3400572c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
34005730:	2301      	movs	r3, #1
}
34005732:	4618      	mov	r0, r3
34005734:	3718      	adds	r7, #24
34005736:	46bd      	mov	sp, r7
34005738:	bd80      	pop	{r7, pc}
	...

3400573c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
3400573c:	b480      	push	{r7}
3400573e:	b085      	sub	sp, #20
34005740:	af00      	add	r7, sp, #0
34005742:	60f8      	str	r0, [r7, #12]
34005744:	60b9      	str	r1, [r7, #8]
34005746:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
34005748:	68fb      	ldr	r3, [r7, #12]
3400574a:	6a1b      	ldr	r3, [r3, #32]
3400574c:	f003 0302 	and.w	r3, r3, #2
34005750:	2b00      	cmp	r3, #0
34005752:	d00c      	beq.n	3400576e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
34005754:	68bb      	ldr	r3, [r7, #8]
34005756:	2b00      	cmp	r3, #0
34005758:	d002      	beq.n	34005760 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
3400575a:	68bb      	ldr	r3, [r7, #8]
3400575c:	4a0d      	ldr	r2, [pc, #52]	@ (34005794 <DMA_List_GetCLLRNodeInfo+0x58>)
3400575e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
34005760:	687b      	ldr	r3, [r7, #4]
34005762:	2b00      	cmp	r3, #0
34005764:	d00f      	beq.n	34005786 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
34005766:	687b      	ldr	r3, [r7, #4]
34005768:	2207      	movs	r2, #7
3400576a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
3400576c:	e00b      	b.n	34005786 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
3400576e:	68bb      	ldr	r3, [r7, #8]
34005770:	2b00      	cmp	r3, #0
34005772:	d002      	beq.n	3400577a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
34005774:	68bb      	ldr	r3, [r7, #8]
34005776:	4a08      	ldr	r2, [pc, #32]	@ (34005798 <DMA_List_GetCLLRNodeInfo+0x5c>)
34005778:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
3400577a:	687b      	ldr	r3, [r7, #4]
3400577c:	2b00      	cmp	r3, #0
3400577e:	d002      	beq.n	34005786 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
34005780:	687b      	ldr	r3, [r7, #4]
34005782:	2205      	movs	r2, #5
34005784:	601a      	str	r2, [r3, #0]
}
34005786:	bf00      	nop
34005788:	3714      	adds	r7, #20
3400578a:	46bd      	mov	sp, r7
3400578c:	f85d 7b04 	ldr.w	r7, [sp], #4
34005790:	4770      	bx	lr
34005792:	bf00      	nop
34005794:	fe010000 	.word	0xfe010000
34005798:	f8010000 	.word	0xf8010000

3400579c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
3400579c:	b580      	push	{r7, lr}
3400579e:	b086      	sub	sp, #24
340057a0:	af00      	add	r7, sp, #0
340057a2:	6078      	str	r0, [r7, #4]
340057a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
340057a6:	2300      	movs	r3, #0
340057a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340057aa:	687b      	ldr	r3, [r7, #4]
340057ac:	4a5b      	ldr	r2, [pc, #364]	@ (3400591c <HAL_GPIO_Init+0x180>)
340057ae:	4293      	cmp	r3, r2
340057b0:	d05f      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
340057b2:	687b      	ldr	r3, [r7, #4]
340057b4:	4a5a      	ldr	r2, [pc, #360]	@ (34005920 <HAL_GPIO_Init+0x184>)
340057b6:	4293      	cmp	r3, r2
340057b8:	d05b      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
340057ba:	687b      	ldr	r3, [r7, #4]
340057bc:	4a59      	ldr	r2, [pc, #356]	@ (34005924 <HAL_GPIO_Init+0x188>)
340057be:	4293      	cmp	r3, r2
340057c0:	d057      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
340057c2:	687b      	ldr	r3, [r7, #4]
340057c4:	4a58      	ldr	r2, [pc, #352]	@ (34005928 <HAL_GPIO_Init+0x18c>)
340057c6:	4293      	cmp	r3, r2
340057c8:	d053      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
340057ca:	687b      	ldr	r3, [r7, #4]
340057cc:	4a57      	ldr	r2, [pc, #348]	@ (3400592c <HAL_GPIO_Init+0x190>)
340057ce:	4293      	cmp	r3, r2
340057d0:	d04f      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
340057d2:	687b      	ldr	r3, [r7, #4]
340057d4:	4a56      	ldr	r2, [pc, #344]	@ (34005930 <HAL_GPIO_Init+0x194>)
340057d6:	4293      	cmp	r3, r2
340057d8:	d04b      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
340057da:	687b      	ldr	r3, [r7, #4]
340057dc:	4a55      	ldr	r2, [pc, #340]	@ (34005934 <HAL_GPIO_Init+0x198>)
340057de:	4293      	cmp	r3, r2
340057e0:	d047      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
340057e2:	687b      	ldr	r3, [r7, #4]
340057e4:	4a54      	ldr	r2, [pc, #336]	@ (34005938 <HAL_GPIO_Init+0x19c>)
340057e6:	4293      	cmp	r3, r2
340057e8:	d043      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
340057ea:	687b      	ldr	r3, [r7, #4]
340057ec:	4a53      	ldr	r2, [pc, #332]	@ (3400593c <HAL_GPIO_Init+0x1a0>)
340057ee:	4293      	cmp	r3, r2
340057f0:	d03f      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
340057f2:	687b      	ldr	r3, [r7, #4]
340057f4:	4a52      	ldr	r2, [pc, #328]	@ (34005940 <HAL_GPIO_Init+0x1a4>)
340057f6:	4293      	cmp	r3, r2
340057f8:	d03b      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
340057fa:	687b      	ldr	r3, [r7, #4]
340057fc:	4a51      	ldr	r2, [pc, #324]	@ (34005944 <HAL_GPIO_Init+0x1a8>)
340057fe:	4293      	cmp	r3, r2
34005800:	d037      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
34005802:	687b      	ldr	r3, [r7, #4]
34005804:	4a50      	ldr	r2, [pc, #320]	@ (34005948 <HAL_GPIO_Init+0x1ac>)
34005806:	4293      	cmp	r3, r2
34005808:	d033      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
3400580a:	687b      	ldr	r3, [r7, #4]
3400580c:	4a4f      	ldr	r2, [pc, #316]	@ (3400594c <HAL_GPIO_Init+0x1b0>)
3400580e:	4293      	cmp	r3, r2
34005810:	d02f      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
34005812:	687b      	ldr	r3, [r7, #4]
34005814:	4a4e      	ldr	r2, [pc, #312]	@ (34005950 <HAL_GPIO_Init+0x1b4>)
34005816:	4293      	cmp	r3, r2
34005818:	d02b      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
3400581a:	687b      	ldr	r3, [r7, #4]
3400581c:	4a4d      	ldr	r2, [pc, #308]	@ (34005954 <HAL_GPIO_Init+0x1b8>)
3400581e:	4293      	cmp	r3, r2
34005820:	d027      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
34005822:	687b      	ldr	r3, [r7, #4]
34005824:	4a4c      	ldr	r2, [pc, #304]	@ (34005958 <HAL_GPIO_Init+0x1bc>)
34005826:	4293      	cmp	r3, r2
34005828:	d023      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
3400582a:	687b      	ldr	r3, [r7, #4]
3400582c:	4a4b      	ldr	r2, [pc, #300]	@ (3400595c <HAL_GPIO_Init+0x1c0>)
3400582e:	4293      	cmp	r3, r2
34005830:	d01f      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
34005832:	687b      	ldr	r3, [r7, #4]
34005834:	4a4a      	ldr	r2, [pc, #296]	@ (34005960 <HAL_GPIO_Init+0x1c4>)
34005836:	4293      	cmp	r3, r2
34005838:	d01b      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
3400583a:	687b      	ldr	r3, [r7, #4]
3400583c:	4a49      	ldr	r2, [pc, #292]	@ (34005964 <HAL_GPIO_Init+0x1c8>)
3400583e:	4293      	cmp	r3, r2
34005840:	d017      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
34005842:	687b      	ldr	r3, [r7, #4]
34005844:	4a48      	ldr	r2, [pc, #288]	@ (34005968 <HAL_GPIO_Init+0x1cc>)
34005846:	4293      	cmp	r3, r2
34005848:	d013      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
3400584a:	687b      	ldr	r3, [r7, #4]
3400584c:	4a47      	ldr	r2, [pc, #284]	@ (3400596c <HAL_GPIO_Init+0x1d0>)
3400584e:	4293      	cmp	r3, r2
34005850:	d00f      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
34005852:	687b      	ldr	r3, [r7, #4]
34005854:	4a46      	ldr	r2, [pc, #280]	@ (34005970 <HAL_GPIO_Init+0x1d4>)
34005856:	4293      	cmp	r3, r2
34005858:	d00b      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
3400585a:	687b      	ldr	r3, [r7, #4]
3400585c:	4a45      	ldr	r2, [pc, #276]	@ (34005974 <HAL_GPIO_Init+0x1d8>)
3400585e:	4293      	cmp	r3, r2
34005860:	d007      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
34005862:	687b      	ldr	r3, [r7, #4]
34005864:	4a44      	ldr	r2, [pc, #272]	@ (34005978 <HAL_GPIO_Init+0x1dc>)
34005866:	4293      	cmp	r3, r2
34005868:	d003      	beq.n	34005872 <HAL_GPIO_Init+0xd6>
3400586a:	21ad      	movs	r1, #173	@ 0xad
3400586c:	4843      	ldr	r0, [pc, #268]	@ (3400597c <HAL_GPIO_Init+0x1e0>)
3400586e:	f7fb ffd9 	bl	34001824 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34005872:	683b      	ldr	r3, [r7, #0]
34005874:	681b      	ldr	r3, [r3, #0]
34005876:	b29b      	uxth	r3, r3
34005878:	2b00      	cmp	r3, #0
3400587a:	d004      	beq.n	34005886 <HAL_GPIO_Init+0xea>
3400587c:	683b      	ldr	r3, [r7, #0]
3400587e:	681b      	ldr	r3, [r3, #0]
34005880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34005884:	d303      	bcc.n	3400588e <HAL_GPIO_Init+0xf2>
34005886:	21ae      	movs	r1, #174	@ 0xae
34005888:	483c      	ldr	r0, [pc, #240]	@ (3400597c <HAL_GPIO_Init+0x1e0>)
3400588a:	f7fb ffcb 	bl	34001824 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
3400588e:	683b      	ldr	r3, [r7, #0]
34005890:	685b      	ldr	r3, [r3, #4]
34005892:	2b00      	cmp	r3, #0
34005894:	f000 82bb 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
34005898:	683b      	ldr	r3, [r7, #0]
3400589a:	685b      	ldr	r3, [r3, #4]
3400589c:	2b01      	cmp	r3, #1
3400589e:	f000 82b6 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
340058a2:	683b      	ldr	r3, [r7, #0]
340058a4:	685b      	ldr	r3, [r3, #4]
340058a6:	2b11      	cmp	r3, #17
340058a8:	f000 82b1 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
340058ac:	683b      	ldr	r3, [r7, #0]
340058ae:	685b      	ldr	r3, [r3, #4]
340058b0:	2b02      	cmp	r3, #2
340058b2:	f000 82ac 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
340058b6:	683b      	ldr	r3, [r7, #0]
340058b8:	685b      	ldr	r3, [r3, #4]
340058ba:	2b12      	cmp	r3, #18
340058bc:	f000 82a7 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
340058c0:	683b      	ldr	r3, [r7, #0]
340058c2:	685b      	ldr	r3, [r3, #4]
340058c4:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
340058c8:	f000 82a1 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
340058cc:	683b      	ldr	r3, [r7, #0]
340058ce:	685b      	ldr	r3, [r3, #4]
340058d0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
340058d4:	f000 829b 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
340058d8:	683b      	ldr	r3, [r7, #0]
340058da:	685b      	ldr	r3, [r3, #4]
340058dc:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
340058e0:	f000 8295 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
340058e4:	683b      	ldr	r3, [r7, #0]
340058e6:	685b      	ldr	r3, [r3, #4]
340058e8:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
340058ec:	f000 828f 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
340058f0:	683b      	ldr	r3, [r7, #0]
340058f2:	685b      	ldr	r3, [r3, #4]
340058f4:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
340058f8:	f000 8289 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
340058fc:	683b      	ldr	r3, [r7, #0]
340058fe:	685b      	ldr	r3, [r3, #4]
34005900:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
34005904:	f000 8283 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
34005908:	683b      	ldr	r3, [r7, #0]
3400590a:	685b      	ldr	r3, [r3, #4]
3400590c:	2b03      	cmp	r3, #3
3400590e:	f000 827e 	beq.w	34005e0e <HAL_GPIO_Init+0x672>
34005912:	21af      	movs	r1, #175	@ 0xaf
34005914:	4819      	ldr	r0, [pc, #100]	@ (3400597c <HAL_GPIO_Init+0x1e0>)
34005916:	f7fb ff85 	bl	34001824 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
3400591a:	e278      	b.n	34005e0e <HAL_GPIO_Init+0x672>
3400591c:	56020000 	.word	0x56020000
34005920:	46020000 	.word	0x46020000
34005924:	56020400 	.word	0x56020400
34005928:	46020400 	.word	0x46020400
3400592c:	56020800 	.word	0x56020800
34005930:	46020800 	.word	0x46020800
34005934:	56020c00 	.word	0x56020c00
34005938:	46020c00 	.word	0x46020c00
3400593c:	56021000 	.word	0x56021000
34005940:	46021000 	.word	0x46021000
34005944:	56021400 	.word	0x56021400
34005948:	46021400 	.word	0x46021400
3400594c:	56021800 	.word	0x56021800
34005950:	46021800 	.word	0x46021800
34005954:	56021c00 	.word	0x56021c00
34005958:	46021c00 	.word	0x46021c00
3400595c:	56023400 	.word	0x56023400
34005960:	46023400 	.word	0x46023400
34005964:	56023800 	.word	0x56023800
34005968:	46023800 	.word	0x46023800
3400596c:	56023c00 	.word	0x56023c00
34005970:	46023c00 	.word	0x46023c00
34005974:	56024000 	.word	0x56024000
34005978:	46024000 	.word	0x46024000
3400597c:	3401cc24 	.word	0x3401cc24
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34005980:	683b      	ldr	r3, [r7, #0]
34005982:	681a      	ldr	r2, [r3, #0]
34005984:	2101      	movs	r1, #1
34005986:	697b      	ldr	r3, [r7, #20]
34005988:	fa01 f303 	lsl.w	r3, r1, r3
3400598c:	4013      	ands	r3, r2
3400598e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34005990:	68fb      	ldr	r3, [r7, #12]
34005992:	2b00      	cmp	r3, #0
34005994:	f000 8238 	beq.w	34005e08 <HAL_GPIO_Init+0x66c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34005998:	683b      	ldr	r3, [r7, #0]
3400599a:	685b      	ldr	r3, [r3, #4]
3400599c:	f003 0303 	and.w	r3, r3, #3
340059a0:	2b01      	cmp	r3, #1
340059a2:	d005      	beq.n	340059b0 <HAL_GPIO_Init+0x214>
340059a4:	683b      	ldr	r3, [r7, #0]
340059a6:	685b      	ldr	r3, [r3, #4]
340059a8:	f003 0303 	and.w	r3, r3, #3
340059ac:	2b02      	cmp	r3, #2
340059ae:	d144      	bne.n	34005a3a <HAL_GPIO_Init+0x29e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
340059b0:	683b      	ldr	r3, [r7, #0]
340059b2:	68db      	ldr	r3, [r3, #12]
340059b4:	2b00      	cmp	r3, #0
340059b6:	d00f      	beq.n	340059d8 <HAL_GPIO_Init+0x23c>
340059b8:	683b      	ldr	r3, [r7, #0]
340059ba:	68db      	ldr	r3, [r3, #12]
340059bc:	2b01      	cmp	r3, #1
340059be:	d00b      	beq.n	340059d8 <HAL_GPIO_Init+0x23c>
340059c0:	683b      	ldr	r3, [r7, #0]
340059c2:	68db      	ldr	r3, [r3, #12]
340059c4:	2b02      	cmp	r3, #2
340059c6:	d007      	beq.n	340059d8 <HAL_GPIO_Init+0x23c>
340059c8:	683b      	ldr	r3, [r7, #0]
340059ca:	68db      	ldr	r3, [r3, #12]
340059cc:	2b03      	cmp	r3, #3
340059ce:	d003      	beq.n	340059d8 <HAL_GPIO_Init+0x23c>
340059d0:	21be      	movs	r1, #190	@ 0xbe
340059d2:	4896      	ldr	r0, [pc, #600]	@ (34005c2c <HAL_GPIO_Init+0x490>)
340059d4:	f7fb ff26 	bl	34001824 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
340059d8:	687b      	ldr	r3, [r7, #4]
340059da:	689b      	ldr	r3, [r3, #8]
340059dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340059de:	697b      	ldr	r3, [r7, #20]
340059e0:	005b      	lsls	r3, r3, #1
340059e2:	2203      	movs	r2, #3
340059e4:	fa02 f303 	lsl.w	r3, r2, r3
340059e8:	43db      	mvns	r3, r3
340059ea:	693a      	ldr	r2, [r7, #16]
340059ec:	4013      	ands	r3, r2
340059ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340059f0:	683b      	ldr	r3, [r7, #0]
340059f2:	68da      	ldr	r2, [r3, #12]
340059f4:	697b      	ldr	r3, [r7, #20]
340059f6:	005b      	lsls	r3, r3, #1
340059f8:	fa02 f303 	lsl.w	r3, r2, r3
340059fc:	693a      	ldr	r2, [r7, #16]
340059fe:	4313      	orrs	r3, r2
34005a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
34005a02:	687b      	ldr	r3, [r7, #4]
34005a04:	693a      	ldr	r2, [r7, #16]
34005a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34005a08:	687b      	ldr	r3, [r7, #4]
34005a0a:	685b      	ldr	r3, [r3, #4]
34005a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34005a0e:	2201      	movs	r2, #1
34005a10:	697b      	ldr	r3, [r7, #20]
34005a12:	fa02 f303 	lsl.w	r3, r2, r3
34005a16:	43db      	mvns	r3, r3
34005a18:	693a      	ldr	r2, [r7, #16]
34005a1a:	4013      	ands	r3, r2
34005a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34005a1e:	683b      	ldr	r3, [r7, #0]
34005a20:	685b      	ldr	r3, [r3, #4]
34005a22:	091b      	lsrs	r3, r3, #4
34005a24:	f003 0201 	and.w	r2, r3, #1
34005a28:	697b      	ldr	r3, [r7, #20]
34005a2a:	fa02 f303 	lsl.w	r3, r2, r3
34005a2e:	693a      	ldr	r2, [r7, #16]
34005a30:	4313      	orrs	r3, r2
34005a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34005a34:	687b      	ldr	r3, [r7, #4]
34005a36:	693a      	ldr	r2, [r7, #16]
34005a38:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34005a3a:	683b      	ldr	r3, [r7, #0]
34005a3c:	685b      	ldr	r3, [r3, #4]
34005a3e:	f003 0303 	and.w	r3, r3, #3
34005a42:	2b03      	cmp	r3, #3
34005a44:	d109      	bne.n	34005a5a <HAL_GPIO_Init+0x2be>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34005a46:	683b      	ldr	r3, [r7, #0]
34005a48:	685b      	ldr	r3, [r3, #4]
34005a4a:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34005a4e:	2b03      	cmp	r3, #3
34005a50:	d12b      	bne.n	34005aaa <HAL_GPIO_Init+0x30e>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34005a52:	683b      	ldr	r3, [r7, #0]
34005a54:	689b      	ldr	r3, [r3, #8]
34005a56:	2b01      	cmp	r3, #1
34005a58:	d027      	beq.n	34005aaa <HAL_GPIO_Init+0x30e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34005a5a:	683b      	ldr	r3, [r7, #0]
34005a5c:	689b      	ldr	r3, [r3, #8]
34005a5e:	2b00      	cmp	r3, #0
34005a60:	d00b      	beq.n	34005a7a <HAL_GPIO_Init+0x2de>
34005a62:	683b      	ldr	r3, [r7, #0]
34005a64:	689b      	ldr	r3, [r3, #8]
34005a66:	2b01      	cmp	r3, #1
34005a68:	d007      	beq.n	34005a7a <HAL_GPIO_Init+0x2de>
34005a6a:	683b      	ldr	r3, [r7, #0]
34005a6c:	689b      	ldr	r3, [r3, #8]
34005a6e:	2b02      	cmp	r3, #2
34005a70:	d003      	beq.n	34005a7a <HAL_GPIO_Init+0x2de>
34005a72:	21d1      	movs	r1, #209	@ 0xd1
34005a74:	486d      	ldr	r0, [pc, #436]	@ (34005c2c <HAL_GPIO_Init+0x490>)
34005a76:	f7fb fed5 	bl	34001824 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
34005a7a:	687b      	ldr	r3, [r7, #4]
34005a7c:	68db      	ldr	r3, [r3, #12]
34005a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34005a80:	697b      	ldr	r3, [r7, #20]
34005a82:	005b      	lsls	r3, r3, #1
34005a84:	2203      	movs	r2, #3
34005a86:	fa02 f303 	lsl.w	r3, r2, r3
34005a8a:	43db      	mvns	r3, r3
34005a8c:	693a      	ldr	r2, [r7, #16]
34005a8e:	4013      	ands	r3, r2
34005a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34005a92:	683b      	ldr	r3, [r7, #0]
34005a94:	689a      	ldr	r2, [r3, #8]
34005a96:	697b      	ldr	r3, [r7, #20]
34005a98:	005b      	lsls	r3, r3, #1
34005a9a:	fa02 f303 	lsl.w	r3, r2, r3
34005a9e:	693a      	ldr	r2, [r7, #16]
34005aa0:	4313      	orrs	r3, r2
34005aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
34005aa4:	687b      	ldr	r3, [r7, #4]
34005aa6:	693a      	ldr	r2, [r7, #16]
34005aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34005aaa:	683b      	ldr	r3, [r7, #0]
34005aac:	685b      	ldr	r3, [r3, #4]
34005aae:	f003 0303 	and.w	r3, r3, #3
34005ab2:	2b02      	cmp	r3, #2
34005ab4:	f040 8090 	bne.w	34005bd8 <HAL_GPIO_Init+0x43c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34005ab8:	687b      	ldr	r3, [r7, #4]
34005aba:	4a5d      	ldr	r2, [pc, #372]	@ (34005c30 <HAL_GPIO_Init+0x494>)
34005abc:	4293      	cmp	r3, r2
34005abe:	d05f      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005ac0:	687b      	ldr	r3, [r7, #4]
34005ac2:	4a5c      	ldr	r2, [pc, #368]	@ (34005c34 <HAL_GPIO_Init+0x498>)
34005ac4:	4293      	cmp	r3, r2
34005ac6:	d05b      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005ac8:	687b      	ldr	r3, [r7, #4]
34005aca:	4a5b      	ldr	r2, [pc, #364]	@ (34005c38 <HAL_GPIO_Init+0x49c>)
34005acc:	4293      	cmp	r3, r2
34005ace:	d057      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005ad0:	687b      	ldr	r3, [r7, #4]
34005ad2:	4a5a      	ldr	r2, [pc, #360]	@ (34005c3c <HAL_GPIO_Init+0x4a0>)
34005ad4:	4293      	cmp	r3, r2
34005ad6:	d053      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005ad8:	687b      	ldr	r3, [r7, #4]
34005ada:	4a59      	ldr	r2, [pc, #356]	@ (34005c40 <HAL_GPIO_Init+0x4a4>)
34005adc:	4293      	cmp	r3, r2
34005ade:	d04f      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005ae0:	687b      	ldr	r3, [r7, #4]
34005ae2:	4a58      	ldr	r2, [pc, #352]	@ (34005c44 <HAL_GPIO_Init+0x4a8>)
34005ae4:	4293      	cmp	r3, r2
34005ae6:	d04b      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005ae8:	687b      	ldr	r3, [r7, #4]
34005aea:	4a57      	ldr	r2, [pc, #348]	@ (34005c48 <HAL_GPIO_Init+0x4ac>)
34005aec:	4293      	cmp	r3, r2
34005aee:	d047      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005af0:	687b      	ldr	r3, [r7, #4]
34005af2:	4a56      	ldr	r2, [pc, #344]	@ (34005c4c <HAL_GPIO_Init+0x4b0>)
34005af4:	4293      	cmp	r3, r2
34005af6:	d043      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005af8:	687b      	ldr	r3, [r7, #4]
34005afa:	4a55      	ldr	r2, [pc, #340]	@ (34005c50 <HAL_GPIO_Init+0x4b4>)
34005afc:	4293      	cmp	r3, r2
34005afe:	d03f      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b00:	687b      	ldr	r3, [r7, #4]
34005b02:	4a54      	ldr	r2, [pc, #336]	@ (34005c54 <HAL_GPIO_Init+0x4b8>)
34005b04:	4293      	cmp	r3, r2
34005b06:	d03b      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b08:	687b      	ldr	r3, [r7, #4]
34005b0a:	4a53      	ldr	r2, [pc, #332]	@ (34005c58 <HAL_GPIO_Init+0x4bc>)
34005b0c:	4293      	cmp	r3, r2
34005b0e:	d037      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b10:	687b      	ldr	r3, [r7, #4]
34005b12:	4a52      	ldr	r2, [pc, #328]	@ (34005c5c <HAL_GPIO_Init+0x4c0>)
34005b14:	4293      	cmp	r3, r2
34005b16:	d033      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b18:	687b      	ldr	r3, [r7, #4]
34005b1a:	4a51      	ldr	r2, [pc, #324]	@ (34005c60 <HAL_GPIO_Init+0x4c4>)
34005b1c:	4293      	cmp	r3, r2
34005b1e:	d02f      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b20:	687b      	ldr	r3, [r7, #4]
34005b22:	4a50      	ldr	r2, [pc, #320]	@ (34005c64 <HAL_GPIO_Init+0x4c8>)
34005b24:	4293      	cmp	r3, r2
34005b26:	d02b      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b28:	687b      	ldr	r3, [r7, #4]
34005b2a:	4a4f      	ldr	r2, [pc, #316]	@ (34005c68 <HAL_GPIO_Init+0x4cc>)
34005b2c:	4293      	cmp	r3, r2
34005b2e:	d027      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b30:	687b      	ldr	r3, [r7, #4]
34005b32:	4a4e      	ldr	r2, [pc, #312]	@ (34005c6c <HAL_GPIO_Init+0x4d0>)
34005b34:	4293      	cmp	r3, r2
34005b36:	d023      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b38:	687b      	ldr	r3, [r7, #4]
34005b3a:	4a4d      	ldr	r2, [pc, #308]	@ (34005c70 <HAL_GPIO_Init+0x4d4>)
34005b3c:	4293      	cmp	r3, r2
34005b3e:	d01f      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b40:	687b      	ldr	r3, [r7, #4]
34005b42:	4a4c      	ldr	r2, [pc, #304]	@ (34005c74 <HAL_GPIO_Init+0x4d8>)
34005b44:	4293      	cmp	r3, r2
34005b46:	d01b      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b48:	687b      	ldr	r3, [r7, #4]
34005b4a:	4a4b      	ldr	r2, [pc, #300]	@ (34005c78 <HAL_GPIO_Init+0x4dc>)
34005b4c:	4293      	cmp	r3, r2
34005b4e:	d017      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b50:	687b      	ldr	r3, [r7, #4]
34005b52:	4a4a      	ldr	r2, [pc, #296]	@ (34005c7c <HAL_GPIO_Init+0x4e0>)
34005b54:	4293      	cmp	r3, r2
34005b56:	d013      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b58:	687b      	ldr	r3, [r7, #4]
34005b5a:	4a49      	ldr	r2, [pc, #292]	@ (34005c80 <HAL_GPIO_Init+0x4e4>)
34005b5c:	4293      	cmp	r3, r2
34005b5e:	d00f      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b60:	687b      	ldr	r3, [r7, #4]
34005b62:	4a48      	ldr	r2, [pc, #288]	@ (34005c84 <HAL_GPIO_Init+0x4e8>)
34005b64:	4293      	cmp	r3, r2
34005b66:	d00b      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b68:	687b      	ldr	r3, [r7, #4]
34005b6a:	4a47      	ldr	r2, [pc, #284]	@ (34005c88 <HAL_GPIO_Init+0x4ec>)
34005b6c:	4293      	cmp	r3, r2
34005b6e:	d007      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b70:	687b      	ldr	r3, [r7, #4]
34005b72:	4a46      	ldr	r2, [pc, #280]	@ (34005c8c <HAL_GPIO_Init+0x4f0>)
34005b74:	4293      	cmp	r3, r2
34005b76:	d003      	beq.n	34005b80 <HAL_GPIO_Init+0x3e4>
34005b78:	21de      	movs	r1, #222	@ 0xde
34005b7a:	482c      	ldr	r0, [pc, #176]	@ (34005c2c <HAL_GPIO_Init+0x490>)
34005b7c:	f7fb fe52 	bl	34001824 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34005b80:	683b      	ldr	r3, [r7, #0]
34005b82:	691b      	ldr	r3, [r3, #16]
34005b84:	2b0f      	cmp	r3, #15
34005b86:	d903      	bls.n	34005b90 <HAL_GPIO_Init+0x3f4>
34005b88:	21df      	movs	r1, #223	@ 0xdf
34005b8a:	4828      	ldr	r0, [pc, #160]	@ (34005c2c <HAL_GPIO_Init+0x490>)
34005b8c:	f7fb fe4a 	bl	34001824 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34005b90:	697b      	ldr	r3, [r7, #20]
34005b92:	08da      	lsrs	r2, r3, #3
34005b94:	687b      	ldr	r3, [r7, #4]
34005b96:	3208      	adds	r2, #8
34005b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34005b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34005b9e:	697b      	ldr	r3, [r7, #20]
34005ba0:	f003 0307 	and.w	r3, r3, #7
34005ba4:	009b      	lsls	r3, r3, #2
34005ba6:	220f      	movs	r2, #15
34005ba8:	fa02 f303 	lsl.w	r3, r2, r3
34005bac:	43db      	mvns	r3, r3
34005bae:	693a      	ldr	r2, [r7, #16]
34005bb0:	4013      	ands	r3, r2
34005bb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34005bb4:	683b      	ldr	r3, [r7, #0]
34005bb6:	691a      	ldr	r2, [r3, #16]
34005bb8:	697b      	ldr	r3, [r7, #20]
34005bba:	f003 0307 	and.w	r3, r3, #7
34005bbe:	009b      	lsls	r3, r3, #2
34005bc0:	fa02 f303 	lsl.w	r3, r2, r3
34005bc4:	693a      	ldr	r2, [r7, #16]
34005bc6:	4313      	orrs	r3, r2
34005bc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34005bca:	697b      	ldr	r3, [r7, #20]
34005bcc:	08da      	lsrs	r2, r3, #3
34005bce:	687b      	ldr	r3, [r7, #4]
34005bd0:	3208      	adds	r2, #8
34005bd2:	6939      	ldr	r1, [r7, #16]
34005bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34005bd8:	687b      	ldr	r3, [r7, #4]
34005bda:	681b      	ldr	r3, [r3, #0]
34005bdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34005bde:	697b      	ldr	r3, [r7, #20]
34005be0:	005b      	lsls	r3, r3, #1
34005be2:	2203      	movs	r2, #3
34005be4:	fa02 f303 	lsl.w	r3, r2, r3
34005be8:	43db      	mvns	r3, r3
34005bea:	693a      	ldr	r2, [r7, #16]
34005bec:	4013      	ands	r3, r2
34005bee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34005bf0:	683b      	ldr	r3, [r7, #0]
34005bf2:	685b      	ldr	r3, [r3, #4]
34005bf4:	f003 0203 	and.w	r2, r3, #3
34005bf8:	697b      	ldr	r3, [r7, #20]
34005bfa:	005b      	lsls	r3, r3, #1
34005bfc:	fa02 f303 	lsl.w	r3, r2, r3
34005c00:	693a      	ldr	r2, [r7, #16]
34005c02:	4313      	orrs	r3, r2
34005c04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34005c06:	687b      	ldr	r3, [r7, #4]
34005c08:	693a      	ldr	r2, [r7, #16]
34005c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34005c0c:	683b      	ldr	r3, [r7, #0]
34005c0e:	685b      	ldr	r3, [r3, #4]
34005c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34005c14:	2b00      	cmp	r3, #0
34005c16:	f000 80f7 	beq.w	34005e08 <HAL_GPIO_Init+0x66c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34005c1a:	4a1d      	ldr	r2, [pc, #116]	@ (34005c90 <HAL_GPIO_Init+0x4f4>)
34005c1c:	697b      	ldr	r3, [r7, #20]
34005c1e:	089b      	lsrs	r3, r3, #2
34005c20:	3318      	adds	r3, #24
34005c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34005c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34005c28:	697b      	ldr	r3, [r7, #20]
34005c2a:	e033      	b.n	34005c94 <HAL_GPIO_Init+0x4f8>
34005c2c:	3401cc24 	.word	0x3401cc24
34005c30:	56020000 	.word	0x56020000
34005c34:	46020000 	.word	0x46020000
34005c38:	56020400 	.word	0x56020400
34005c3c:	46020400 	.word	0x46020400
34005c40:	56020800 	.word	0x56020800
34005c44:	46020800 	.word	0x46020800
34005c48:	56020c00 	.word	0x56020c00
34005c4c:	46020c00 	.word	0x46020c00
34005c50:	56021000 	.word	0x56021000
34005c54:	46021000 	.word	0x46021000
34005c58:	56021400 	.word	0x56021400
34005c5c:	46021400 	.word	0x46021400
34005c60:	56021800 	.word	0x56021800
34005c64:	46021800 	.word	0x46021800
34005c68:	56021c00 	.word	0x56021c00
34005c6c:	46021c00 	.word	0x46021c00
34005c70:	56023400 	.word	0x56023400
34005c74:	46023400 	.word	0x46023400
34005c78:	56023800 	.word	0x56023800
34005c7c:	46023800 	.word	0x46023800
34005c80:	56023c00 	.word	0x56023c00
34005c84:	46023c00 	.word	0x46023c00
34005c88:	56024000 	.word	0x56024000
34005c8c:	46024000 	.word	0x46024000
34005c90:	56025000 	.word	0x56025000
34005c94:	f003 0303 	and.w	r3, r3, #3
34005c98:	00db      	lsls	r3, r3, #3
34005c9a:	220f      	movs	r2, #15
34005c9c:	fa02 f303 	lsl.w	r3, r2, r3
34005ca0:	43db      	mvns	r3, r3
34005ca2:	693a      	ldr	r2, [r7, #16]
34005ca4:	4013      	ands	r3, r2
34005ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34005ca8:	687b      	ldr	r3, [r7, #4]
34005caa:	4a5f      	ldr	r2, [pc, #380]	@ (34005e28 <HAL_GPIO_Init+0x68c>)
34005cac:	4293      	cmp	r3, r2
34005cae:	d043      	beq.n	34005d38 <HAL_GPIO_Init+0x59c>
34005cb0:	687b      	ldr	r3, [r7, #4]
34005cb2:	4a5e      	ldr	r2, [pc, #376]	@ (34005e2c <HAL_GPIO_Init+0x690>)
34005cb4:	4293      	cmp	r3, r2
34005cb6:	d03d      	beq.n	34005d34 <HAL_GPIO_Init+0x598>
34005cb8:	687b      	ldr	r3, [r7, #4]
34005cba:	4a5d      	ldr	r2, [pc, #372]	@ (34005e30 <HAL_GPIO_Init+0x694>)
34005cbc:	4293      	cmp	r3, r2
34005cbe:	d037      	beq.n	34005d30 <HAL_GPIO_Init+0x594>
34005cc0:	687b      	ldr	r3, [r7, #4]
34005cc2:	4a5c      	ldr	r2, [pc, #368]	@ (34005e34 <HAL_GPIO_Init+0x698>)
34005cc4:	4293      	cmp	r3, r2
34005cc6:	d031      	beq.n	34005d2c <HAL_GPIO_Init+0x590>
34005cc8:	687b      	ldr	r3, [r7, #4]
34005cca:	4a5b      	ldr	r2, [pc, #364]	@ (34005e38 <HAL_GPIO_Init+0x69c>)
34005ccc:	4293      	cmp	r3, r2
34005cce:	d02b      	beq.n	34005d28 <HAL_GPIO_Init+0x58c>
34005cd0:	687b      	ldr	r3, [r7, #4]
34005cd2:	4a5a      	ldr	r2, [pc, #360]	@ (34005e3c <HAL_GPIO_Init+0x6a0>)
34005cd4:	4293      	cmp	r3, r2
34005cd6:	d025      	beq.n	34005d24 <HAL_GPIO_Init+0x588>
34005cd8:	687b      	ldr	r3, [r7, #4]
34005cda:	4a59      	ldr	r2, [pc, #356]	@ (34005e40 <HAL_GPIO_Init+0x6a4>)
34005cdc:	4293      	cmp	r3, r2
34005cde:	d01f      	beq.n	34005d20 <HAL_GPIO_Init+0x584>
34005ce0:	687b      	ldr	r3, [r7, #4]
34005ce2:	4a58      	ldr	r2, [pc, #352]	@ (34005e44 <HAL_GPIO_Init+0x6a8>)
34005ce4:	4293      	cmp	r3, r2
34005ce6:	d019      	beq.n	34005d1c <HAL_GPIO_Init+0x580>
34005ce8:	687b      	ldr	r3, [r7, #4]
34005cea:	4a57      	ldr	r2, [pc, #348]	@ (34005e48 <HAL_GPIO_Init+0x6ac>)
34005cec:	4293      	cmp	r3, r2
34005cee:	d013      	beq.n	34005d18 <HAL_GPIO_Init+0x57c>
34005cf0:	687b      	ldr	r3, [r7, #4]
34005cf2:	4a56      	ldr	r2, [pc, #344]	@ (34005e4c <HAL_GPIO_Init+0x6b0>)
34005cf4:	4293      	cmp	r3, r2
34005cf6:	d00d      	beq.n	34005d14 <HAL_GPIO_Init+0x578>
34005cf8:	687b      	ldr	r3, [r7, #4]
34005cfa:	4a55      	ldr	r2, [pc, #340]	@ (34005e50 <HAL_GPIO_Init+0x6b4>)
34005cfc:	4293      	cmp	r3, r2
34005cfe:	d007      	beq.n	34005d10 <HAL_GPIO_Init+0x574>
34005d00:	687b      	ldr	r3, [r7, #4]
34005d02:	4a54      	ldr	r2, [pc, #336]	@ (34005e54 <HAL_GPIO_Init+0x6b8>)
34005d04:	4293      	cmp	r3, r2
34005d06:	d101      	bne.n	34005d0c <HAL_GPIO_Init+0x570>
34005d08:	230b      	movs	r3, #11
34005d0a:	e016      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d0c:	2310      	movs	r3, #16
34005d0e:	e014      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d10:	230a      	movs	r3, #10
34005d12:	e012      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d14:	2309      	movs	r3, #9
34005d16:	e010      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d18:	2308      	movs	r3, #8
34005d1a:	e00e      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d1c:	2307      	movs	r3, #7
34005d1e:	e00c      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d20:	2306      	movs	r3, #6
34005d22:	e00a      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d24:	2305      	movs	r3, #5
34005d26:	e008      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d28:	2304      	movs	r3, #4
34005d2a:	e006      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d2c:	2303      	movs	r3, #3
34005d2e:	e004      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d30:	2302      	movs	r3, #2
34005d32:	e002      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d34:	2301      	movs	r3, #1
34005d36:	e000      	b.n	34005d3a <HAL_GPIO_Init+0x59e>
34005d38:	2300      	movs	r3, #0
34005d3a:	697a      	ldr	r2, [r7, #20]
34005d3c:	f002 0203 	and.w	r2, r2, #3
34005d40:	00d2      	lsls	r2, r2, #3
34005d42:	4093      	lsls	r3, r2
34005d44:	693a      	ldr	r2, [r7, #16]
34005d46:	4313      	orrs	r3, r2
34005d48:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34005d4a:	4943      	ldr	r1, [pc, #268]	@ (34005e58 <HAL_GPIO_Init+0x6bc>)
34005d4c:	697b      	ldr	r3, [r7, #20]
34005d4e:	089b      	lsrs	r3, r3, #2
34005d50:	3318      	adds	r3, #24
34005d52:	693a      	ldr	r2, [r7, #16]
34005d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34005d58:	4b3f      	ldr	r3, [pc, #252]	@ (34005e58 <HAL_GPIO_Init+0x6bc>)
34005d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34005d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34005d60:	68fb      	ldr	r3, [r7, #12]
34005d62:	43db      	mvns	r3, r3
34005d64:	693a      	ldr	r2, [r7, #16]
34005d66:	4013      	ands	r3, r2
34005d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34005d6a:	683b      	ldr	r3, [r7, #0]
34005d6c:	685b      	ldr	r3, [r3, #4]
34005d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34005d72:	2b00      	cmp	r3, #0
34005d74:	d003      	beq.n	34005d7e <HAL_GPIO_Init+0x5e2>
        {
          temp |= iocurrent;
34005d76:	693a      	ldr	r2, [r7, #16]
34005d78:	68fb      	ldr	r3, [r7, #12]
34005d7a:	4313      	orrs	r3, r2
34005d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34005d7e:	4a36      	ldr	r2, [pc, #216]	@ (34005e58 <HAL_GPIO_Init+0x6bc>)
34005d80:	693b      	ldr	r3, [r7, #16]
34005d82:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34005d86:	4b34      	ldr	r3, [pc, #208]	@ (34005e58 <HAL_GPIO_Init+0x6bc>)
34005d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34005d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34005d8e:	68fb      	ldr	r3, [r7, #12]
34005d90:	43db      	mvns	r3, r3
34005d92:	693a      	ldr	r2, [r7, #16]
34005d94:	4013      	ands	r3, r2
34005d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34005d98:	683b      	ldr	r3, [r7, #0]
34005d9a:	685b      	ldr	r3, [r3, #4]
34005d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34005da0:	2b00      	cmp	r3, #0
34005da2:	d003      	beq.n	34005dac <HAL_GPIO_Init+0x610>
        {
          temp |= iocurrent;
34005da4:	693a      	ldr	r2, [r7, #16]
34005da6:	68fb      	ldr	r3, [r7, #12]
34005da8:	4313      	orrs	r3, r2
34005daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34005dac:	4a2a      	ldr	r2, [pc, #168]	@ (34005e58 <HAL_GPIO_Init+0x6bc>)
34005dae:	693b      	ldr	r3, [r7, #16]
34005db0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34005db4:	4b28      	ldr	r3, [pc, #160]	@ (34005e58 <HAL_GPIO_Init+0x6bc>)
34005db6:	681b      	ldr	r3, [r3, #0]
34005db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34005dba:	68fb      	ldr	r3, [r7, #12]
34005dbc:	43db      	mvns	r3, r3
34005dbe:	693a      	ldr	r2, [r7, #16]
34005dc0:	4013      	ands	r3, r2
34005dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34005dc4:	683b      	ldr	r3, [r7, #0]
34005dc6:	685b      	ldr	r3, [r3, #4]
34005dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34005dcc:	2b00      	cmp	r3, #0
34005dce:	d003      	beq.n	34005dd8 <HAL_GPIO_Init+0x63c>
        {
          temp |= iocurrent;
34005dd0:	693a      	ldr	r2, [r7, #16]
34005dd2:	68fb      	ldr	r3, [r7, #12]
34005dd4:	4313      	orrs	r3, r2
34005dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34005dd8:	4a1f      	ldr	r2, [pc, #124]	@ (34005e58 <HAL_GPIO_Init+0x6bc>)
34005dda:	693b      	ldr	r3, [r7, #16]
34005ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34005dde:	4b1e      	ldr	r3, [pc, #120]	@ (34005e58 <HAL_GPIO_Init+0x6bc>)
34005de0:	685b      	ldr	r3, [r3, #4]
34005de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34005de4:	68fb      	ldr	r3, [r7, #12]
34005de6:	43db      	mvns	r3, r3
34005de8:	693a      	ldr	r2, [r7, #16]
34005dea:	4013      	ands	r3, r2
34005dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34005dee:	683b      	ldr	r3, [r7, #0]
34005df0:	685b      	ldr	r3, [r3, #4]
34005df2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34005df6:	2b00      	cmp	r3, #0
34005df8:	d003      	beq.n	34005e02 <HAL_GPIO_Init+0x666>
        {
          temp |= iocurrent;
34005dfa:	693a      	ldr	r2, [r7, #16]
34005dfc:	68fb      	ldr	r3, [r7, #12]
34005dfe:	4313      	orrs	r3, r2
34005e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
34005e02:	4a15      	ldr	r2, [pc, #84]	@ (34005e58 <HAL_GPIO_Init+0x6bc>)
34005e04:	693b      	ldr	r3, [r7, #16]
34005e06:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34005e08:	697b      	ldr	r3, [r7, #20]
34005e0a:	3301      	adds	r3, #1
34005e0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34005e0e:	683b      	ldr	r3, [r7, #0]
34005e10:	681a      	ldr	r2, [r3, #0]
34005e12:	697b      	ldr	r3, [r7, #20]
34005e14:	fa22 f303 	lsr.w	r3, r2, r3
34005e18:	2b00      	cmp	r3, #0
34005e1a:	f47f adb1 	bne.w	34005980 <HAL_GPIO_Init+0x1e4>
  }
}
34005e1e:	bf00      	nop
34005e20:	bf00      	nop
34005e22:	3718      	adds	r7, #24
34005e24:	46bd      	mov	sp, r7
34005e26:	bd80      	pop	{r7, pc}
34005e28:	56020000 	.word	0x56020000
34005e2c:	56020400 	.word	0x56020400
34005e30:	56020800 	.word	0x56020800
34005e34:	56020c00 	.word	0x56020c00
34005e38:	56021000 	.word	0x56021000
34005e3c:	56021400 	.word	0x56021400
34005e40:	56021800 	.word	0x56021800
34005e44:	56021c00 	.word	0x56021c00
34005e48:	56023400 	.word	0x56023400
34005e4c:	56023800 	.word	0x56023800
34005e50:	56023c00 	.word	0x56023c00
34005e54:	56024000 	.word	0x56024000
34005e58:	56025000 	.word	0x56025000

34005e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34005e5c:	b580      	push	{r7, lr}
34005e5e:	b082      	sub	sp, #8
34005e60:	af00      	add	r7, sp, #0
34005e62:	6078      	str	r0, [r7, #4]
34005e64:	460b      	mov	r3, r1
34005e66:	807b      	strh	r3, [r7, #2]
34005e68:	4613      	mov	r3, r2
34005e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34005e6c:	887b      	ldrh	r3, [r7, #2]
34005e6e:	2b00      	cmp	r3, #0
34005e70:	d104      	bne.n	34005e7c <HAL_GPIO_WritePin+0x20>
34005e72:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
34005e76:	480e      	ldr	r0, [pc, #56]	@ (34005eb0 <HAL_GPIO_WritePin+0x54>)
34005e78:	f7fb fcd4 	bl	34001824 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34005e7c:	787b      	ldrb	r3, [r7, #1]
34005e7e:	2b00      	cmp	r3, #0
34005e80:	d007      	beq.n	34005e92 <HAL_GPIO_WritePin+0x36>
34005e82:	787b      	ldrb	r3, [r7, #1]
34005e84:	2b01      	cmp	r3, #1
34005e86:	d004      	beq.n	34005e92 <HAL_GPIO_WritePin+0x36>
34005e88:	f240 11a1 	movw	r1, #417	@ 0x1a1
34005e8c:	4808      	ldr	r0, [pc, #32]	@ (34005eb0 <HAL_GPIO_WritePin+0x54>)
34005e8e:	f7fb fcc9 	bl	34001824 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
34005e92:	787b      	ldrb	r3, [r7, #1]
34005e94:	2b00      	cmp	r3, #0
34005e96:	d003      	beq.n	34005ea0 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34005e98:	887a      	ldrh	r2, [r7, #2]
34005e9a:	687b      	ldr	r3, [r7, #4]
34005e9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34005e9e:	e002      	b.n	34005ea6 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34005ea0:	887a      	ldrh	r2, [r7, #2]
34005ea2:	687b      	ldr	r3, [r7, #4]
34005ea4:	629a      	str	r2, [r3, #40]	@ 0x28
}
34005ea6:	bf00      	nop
34005ea8:	3708      	adds	r7, #8
34005eaa:	46bd      	mov	sp, r7
34005eac:	bd80      	pop	{r7, pc}
34005eae:	bf00      	nop
34005eb0:	3401cc24 	.word	0x3401cc24

34005eb4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
34005eb4:	b580      	push	{r7, lr}
34005eb6:	b084      	sub	sp, #16
34005eb8:	af00      	add	r7, sp, #0
34005eba:	6078      	str	r0, [r7, #4]
34005ebc:	460b      	mov	r3, r1
34005ebe:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34005ec0:	887b      	ldrh	r3, [r7, #2]
34005ec2:	2b00      	cmp	r3, #0
34005ec4:	d104      	bne.n	34005ed0 <HAL_GPIO_TogglePin+0x1c>
34005ec6:	f240 11b9 	movw	r1, #441	@ 0x1b9
34005eca:	480a      	ldr	r0, [pc, #40]	@ (34005ef4 <HAL_GPIO_TogglePin+0x40>)
34005ecc:	f7fb fcaa 	bl	34001824 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
34005ed0:	687b      	ldr	r3, [r7, #4]
34005ed2:	695b      	ldr	r3, [r3, #20]
34005ed4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
34005ed6:	887a      	ldrh	r2, [r7, #2]
34005ed8:	68fb      	ldr	r3, [r7, #12]
34005eda:	4013      	ands	r3, r2
34005edc:	041a      	lsls	r2, r3, #16
34005ede:	68fb      	ldr	r3, [r7, #12]
34005ee0:	43d9      	mvns	r1, r3
34005ee2:	887b      	ldrh	r3, [r7, #2]
34005ee4:	400b      	ands	r3, r1
34005ee6:	431a      	orrs	r2, r3
34005ee8:	687b      	ldr	r3, [r7, #4]
34005eea:	619a      	str	r2, [r3, #24]
}
34005eec:	bf00      	nop
34005eee:	3710      	adds	r7, #16
34005ef0:	46bd      	mov	sp, r7
34005ef2:	bd80      	pop	{r7, pc}
34005ef4:	3401cc24 	.word	0x3401cc24

34005ef8 <HAL_PWREx_ConfigVddIORange>:
  * @note   Setting this configuration while VDDIOx is in 3v3 range
  *         damages the device.
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
34005ef8:	b580      	push	{r7, lr}
34005efa:	b082      	sub	sp, #8
34005efc:	af00      	add	r7, sp, #0
34005efe:	6078      	str	r0, [r7, #4]
34005f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34005f02:	687b      	ldr	r3, [r7, #4]
34005f04:	2b00      	cmp	r3, #0
34005f06:	d010      	beq.n	34005f2a <HAL_PWREx_ConfigVddIORange+0x32>
34005f08:	687b      	ldr	r3, [r7, #4]
34005f0a:	2b01      	cmp	r3, #1
34005f0c:	d00d      	beq.n	34005f2a <HAL_PWREx_ConfigVddIORange+0x32>
34005f0e:	687b      	ldr	r3, [r7, #4]
34005f10:	2b02      	cmp	r3, #2
34005f12:	d00a      	beq.n	34005f2a <HAL_PWREx_ConfigVddIORange+0x32>
34005f14:	687b      	ldr	r3, [r7, #4]
34005f16:	2b03      	cmp	r3, #3
34005f18:	d007      	beq.n	34005f2a <HAL_PWREx_ConfigVddIORange+0x32>
34005f1a:	687b      	ldr	r3, [r7, #4]
34005f1c:	2b04      	cmp	r3, #4
34005f1e:	d004      	beq.n	34005f2a <HAL_PWREx_ConfigVddIORange+0x32>
34005f20:	f240 316a 	movw	r1, #874	@ 0x36a
34005f24:	482a      	ldr	r0, [pc, #168]	@ (34005fd0 <HAL_PWREx_ConfigVddIORange+0xd8>)
34005f26:	f7fb fc7d 	bl	34001824 <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34005f2a:	683b      	ldr	r3, [r7, #0]
34005f2c:	2b00      	cmp	r3, #0
34005f2e:	d007      	beq.n	34005f40 <HAL_PWREx_ConfigVddIORange+0x48>
34005f30:	683b      	ldr	r3, [r7, #0]
34005f32:	2b01      	cmp	r3, #1
34005f34:	d004      	beq.n	34005f40 <HAL_PWREx_ConfigVddIORange+0x48>
34005f36:	f240 316b 	movw	r1, #875	@ 0x36b
34005f3a:	4825      	ldr	r0, [pc, #148]	@ (34005fd0 <HAL_PWREx_ConfigVddIORange+0xd8>)
34005f3c:	f7fb fc72 	bl	34001824 <assert_failed>

  switch (VddIOPort)
34005f40:	687b      	ldr	r3, [r7, #4]
34005f42:	2b04      	cmp	r3, #4
34005f44:	d83e      	bhi.n	34005fc4 <HAL_PWREx_ConfigVddIORange+0xcc>
34005f46:	a201      	add	r2, pc, #4	@ (adr r2, 34005f4c <HAL_PWREx_ConfigVddIORange+0x54>)
34005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34005f4c:	34005f61 	.word	0x34005f61
34005f50:	34005f75 	.word	0x34005f75
34005f54:	34005f89 	.word	0x34005f89
34005f58:	34005f9d 	.word	0x34005f9d
34005f5c:	34005fb1 	.word	0x34005fb1
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34005f60:	4b1c      	ldr	r3, [pc, #112]	@ (34005fd4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34005f64:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34005f68:	683b      	ldr	r3, [r7, #0]
34005f6a:	061b      	lsls	r3, r3, #24
34005f6c:	4919      	ldr	r1, [pc, #100]	@ (34005fd4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005f6e:	4313      	orrs	r3, r2
34005f70:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
34005f72:	e028      	b.n	34005fc6 <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34005f74:	4b17      	ldr	r3, [pc, #92]	@ (34005fd4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34005f78:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34005f7c:	683b      	ldr	r3, [r7, #0]
34005f7e:	065b      	lsls	r3, r3, #25
34005f80:	4914      	ldr	r1, [pc, #80]	@ (34005fd4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005f82:	4313      	orrs	r3, r2
34005f84:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
34005f86:	e01e      	b.n	34005fc6 <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34005f88:	4b12      	ldr	r3, [pc, #72]	@ (34005fd4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34005f8c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
34005f90:	683b      	ldr	r3, [r7, #0]
34005f92:	069b      	lsls	r3, r3, #26
34005f94:	490f      	ldr	r1, [pc, #60]	@ (34005fd4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005f96:	4313      	orrs	r3, r2
34005f98:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
34005f9a:	e014      	b.n	34005fc6 <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO4:
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34005f9c:	4b0d      	ldr	r3, [pc, #52]	@ (34005fd4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34005fa0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34005fa4:	683b      	ldr	r3, [r7, #0]
34005fa6:	061b      	lsls	r3, r3, #24
34005fa8:	490a      	ldr	r1, [pc, #40]	@ (34005fd4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005faa:	4313      	orrs	r3, r2
34005fac:	634b      	str	r3, [r1, #52]	@ 0x34
      break;
34005fae:	e00a      	b.n	34005fc6 <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO5:
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34005fb0:	4b08      	ldr	r3, [pc, #32]	@ (34005fd4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34005fb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34005fb8:	683b      	ldr	r3, [r7, #0]
34005fba:	061b      	lsls	r3, r3, #24
34005fbc:	4905      	ldr	r1, [pc, #20]	@ (34005fd4 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005fbe:	4313      	orrs	r3, r2
34005fc0:	638b      	str	r3, [r1, #56]	@ 0x38
      break;
34005fc2:	e000      	b.n	34005fc6 <HAL_PWREx_ConfigVddIORange+0xce>

    default:
      break;
34005fc4:	bf00      	nop
  }
}
34005fc6:	bf00      	nop
34005fc8:	3708      	adds	r7, #8
34005fca:	46bd      	mov	sp, r7
34005fcc:	bd80      	pop	{r7, pc}
34005fce:	bf00      	nop
34005fd0:	3401ccc8 	.word	0x3401ccc8
34005fd4:	56024800 	.word	0x56024800

34005fd8 <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
34005fd8:	b480      	push	{r7}
34005fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34005fdc:	4b05      	ldr	r3, [pc, #20]	@ (34005ff4 <HAL_PWREx_EnableVddIO3+0x1c>)
34005fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34005fe0:	4a04      	ldr	r2, [pc, #16]	@ (34005ff4 <HAL_PWREx_EnableVddIO3+0x1c>)
34005fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34005fe6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34005fe8:	bf00      	nop
34005fea:	46bd      	mov	sp, r7
34005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
34005ff0:	4770      	bx	lr
34005ff2:	bf00      	nop
34005ff4:	56024800 	.word	0x56024800

34005ff8 <HAL_RAMCFG_EnableAXISRAM>:
  *                   contains the configuration information for the
  *                   specified RAMCFG instance.
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
34005ff8:	b580      	push	{r7, lr}
34005ffa:	b082      	sub	sp, #8
34005ffc:	af00      	add	r7, sp, #0
34005ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34006000:	687b      	ldr	r3, [r7, #4]
34006002:	681b      	ldr	r3, [r3, #0]
34006004:	4a20      	ldr	r2, [pc, #128]	@ (34006088 <HAL_RAMCFG_EnableAXISRAM+0x90>)
34006006:	4293      	cmp	r3, r2
34006008:	d031      	beq.n	3400606e <HAL_RAMCFG_EnableAXISRAM+0x76>
3400600a:	687b      	ldr	r3, [r7, #4]
3400600c:	681b      	ldr	r3, [r3, #0]
3400600e:	4a1f      	ldr	r2, [pc, #124]	@ (3400608c <HAL_RAMCFG_EnableAXISRAM+0x94>)
34006010:	4293      	cmp	r3, r2
34006012:	d02c      	beq.n	3400606e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006014:	687b      	ldr	r3, [r7, #4]
34006016:	681b      	ldr	r3, [r3, #0]
34006018:	4a1d      	ldr	r2, [pc, #116]	@ (34006090 <HAL_RAMCFG_EnableAXISRAM+0x98>)
3400601a:	4293      	cmp	r3, r2
3400601c:	d027      	beq.n	3400606e <HAL_RAMCFG_EnableAXISRAM+0x76>
3400601e:	687b      	ldr	r3, [r7, #4]
34006020:	681b      	ldr	r3, [r3, #0]
34006022:	4a1c      	ldr	r2, [pc, #112]	@ (34006094 <HAL_RAMCFG_EnableAXISRAM+0x9c>)
34006024:	4293      	cmp	r3, r2
34006026:	d022      	beq.n	3400606e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006028:	687b      	ldr	r3, [r7, #4]
3400602a:	681b      	ldr	r3, [r3, #0]
3400602c:	4a1a      	ldr	r2, [pc, #104]	@ (34006098 <HAL_RAMCFG_EnableAXISRAM+0xa0>)
3400602e:	4293      	cmp	r3, r2
34006030:	d01d      	beq.n	3400606e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006032:	687b      	ldr	r3, [r7, #4]
34006034:	681b      	ldr	r3, [r3, #0]
34006036:	4a19      	ldr	r2, [pc, #100]	@ (3400609c <HAL_RAMCFG_EnableAXISRAM+0xa4>)
34006038:	4293      	cmp	r3, r2
3400603a:	d018      	beq.n	3400606e <HAL_RAMCFG_EnableAXISRAM+0x76>
3400603c:	687b      	ldr	r3, [r7, #4]
3400603e:	681b      	ldr	r3, [r3, #0]
34006040:	4a17      	ldr	r2, [pc, #92]	@ (340060a0 <HAL_RAMCFG_EnableAXISRAM+0xa8>)
34006042:	4293      	cmp	r3, r2
34006044:	d013      	beq.n	3400606e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006046:	687b      	ldr	r3, [r7, #4]
34006048:	681b      	ldr	r3, [r3, #0]
3400604a:	4a16      	ldr	r2, [pc, #88]	@ (340060a4 <HAL_RAMCFG_EnableAXISRAM+0xac>)
3400604c:	4293      	cmp	r3, r2
3400604e:	d00e      	beq.n	3400606e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006050:	687b      	ldr	r3, [r7, #4]
34006052:	681b      	ldr	r3, [r3, #0]
34006054:	4a14      	ldr	r2, [pc, #80]	@ (340060a8 <HAL_RAMCFG_EnableAXISRAM+0xb0>)
34006056:	4293      	cmp	r3, r2
34006058:	d009      	beq.n	3400606e <HAL_RAMCFG_EnableAXISRAM+0x76>
3400605a:	687b      	ldr	r3, [r7, #4]
3400605c:	681b      	ldr	r3, [r3, #0]
3400605e:	4a13      	ldr	r2, [pc, #76]	@ (340060ac <HAL_RAMCFG_EnableAXISRAM+0xb4>)
34006060:	4293      	cmp	r3, r2
34006062:	d004      	beq.n	3400606e <HAL_RAMCFG_EnableAXISRAM+0x76>
34006064:	f240 4107 	movw	r1, #1031	@ 0x407
34006068:	4811      	ldr	r0, [pc, #68]	@ (340060b0 <HAL_RAMCFG_EnableAXISRAM+0xb8>)
3400606a:	f7fb fbdb 	bl	34001824 <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
3400606e:	687b      	ldr	r3, [r7, #4]
34006070:	681b      	ldr	r3, [r3, #0]
34006072:	681a      	ldr	r2, [r3, #0]
34006074:	687b      	ldr	r3, [r7, #4]
34006076:	681b      	ldr	r3, [r3, #0]
34006078:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
3400607c:	601a      	str	r2, [r3, #0]
}
3400607e:	bf00      	nop
34006080:	3708      	adds	r7, #8
34006082:	46bd      	mov	sp, r7
34006084:	bd80      	pop	{r7, pc}
34006086:	bf00      	nop
34006088:	52023080 	.word	0x52023080
3400608c:	42023080 	.word	0x42023080
34006090:	52023100 	.word	0x52023100
34006094:	42023100 	.word	0x42023100
34006098:	52023180 	.word	0x52023180
3400609c:	42023180 	.word	0x42023180
340060a0:	52023200 	.word	0x52023200
340060a4:	42023200 	.word	0x42023200
340060a8:	52023280 	.word	0x52023280
340060ac:	42023280 	.word	0x42023280
340060b0:	3401cd70 	.word	0x3401cd70

340060b4 <LL_RCC_HSE_IsReady>:
{
340060b4:	b480      	push	{r7}
340060b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340060b8:	4b06      	ldr	r3, [pc, #24]	@ (340060d4 <LL_RCC_HSE_IsReady+0x20>)
340060ba:	685b      	ldr	r3, [r3, #4]
340060bc:	f003 0310 	and.w	r3, r3, #16
340060c0:	2b00      	cmp	r3, #0
340060c2:	d001      	beq.n	340060c8 <LL_RCC_HSE_IsReady+0x14>
340060c4:	2301      	movs	r3, #1
340060c6:	e000      	b.n	340060ca <LL_RCC_HSE_IsReady+0x16>
340060c8:	2300      	movs	r3, #0
}
340060ca:	4618      	mov	r0, r3
340060cc:	46bd      	mov	sp, r7
340060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
340060d2:	4770      	bx	lr
340060d4:	56028000 	.word	0x56028000

340060d8 <LL_RCC_HSI_Enable>:
{
340060d8:	b480      	push	{r7}
340060da:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
340060dc:	4b04      	ldr	r3, [pc, #16]	@ (340060f0 <LL_RCC_HSI_Enable+0x18>)
340060de:	2208      	movs	r2, #8
340060e0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
340060e4:	bf00      	nop
340060e6:	46bd      	mov	sp, r7
340060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340060ec:	4770      	bx	lr
340060ee:	bf00      	nop
340060f0:	56028000 	.word	0x56028000

340060f4 <LL_RCC_HSI_Disable>:
{
340060f4:	b480      	push	{r7}
340060f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
340060f8:	4b05      	ldr	r3, [pc, #20]	@ (34006110 <LL_RCC_HSI_Disable+0x1c>)
340060fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340060fe:	461a      	mov	r2, r3
34006100:	2308      	movs	r3, #8
34006102:	6013      	str	r3, [r2, #0]
}
34006104:	bf00      	nop
34006106:	46bd      	mov	sp, r7
34006108:	f85d 7b04 	ldr.w	r7, [sp], #4
3400610c:	4770      	bx	lr
3400610e:	bf00      	nop
34006110:	56028000 	.word	0x56028000

34006114 <LL_RCC_HSI_IsReady>:
{
34006114:	b480      	push	{r7}
34006116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34006118:	4b06      	ldr	r3, [pc, #24]	@ (34006134 <LL_RCC_HSI_IsReady+0x20>)
3400611a:	685b      	ldr	r3, [r3, #4]
3400611c:	f003 0308 	and.w	r3, r3, #8
34006120:	2b00      	cmp	r3, #0
34006122:	d001      	beq.n	34006128 <LL_RCC_HSI_IsReady+0x14>
34006124:	2301      	movs	r3, #1
34006126:	e000      	b.n	3400612a <LL_RCC_HSI_IsReady+0x16>
34006128:	2300      	movs	r3, #0
}
3400612a:	4618      	mov	r0, r3
3400612c:	46bd      	mov	sp, r7
3400612e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006132:	4770      	bx	lr
34006134:	56028000 	.word	0x56028000

34006138 <LL_RCC_HSI_SetDivider>:
{
34006138:	b480      	push	{r7}
3400613a:	b083      	sub	sp, #12
3400613c:	af00      	add	r7, sp, #0
3400613e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34006140:	4b06      	ldr	r3, [pc, #24]	@ (3400615c <LL_RCC_HSI_SetDivider+0x24>)
34006142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34006144:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34006148:	4904      	ldr	r1, [pc, #16]	@ (3400615c <LL_RCC_HSI_SetDivider+0x24>)
3400614a:	687b      	ldr	r3, [r7, #4]
3400614c:	4313      	orrs	r3, r2
3400614e:	648b      	str	r3, [r1, #72]	@ 0x48
}
34006150:	bf00      	nop
34006152:	370c      	adds	r7, #12
34006154:	46bd      	mov	sp, r7
34006156:	f85d 7b04 	ldr.w	r7, [sp], #4
3400615a:	4770      	bx	lr
3400615c:	56028000 	.word	0x56028000

34006160 <LL_RCC_HSI_GetDivider>:
{
34006160:	b480      	push	{r7}
34006162:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34006164:	4b04      	ldr	r3, [pc, #16]	@ (34006178 <LL_RCC_HSI_GetDivider+0x18>)
34006166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34006168:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
3400616c:	4618      	mov	r0, r3
3400616e:	46bd      	mov	sp, r7
34006170:	f85d 7b04 	ldr.w	r7, [sp], #4
34006174:	4770      	bx	lr
34006176:	bf00      	nop
34006178:	56028000 	.word	0x56028000

3400617c <LL_RCC_HSI_SetCalibTrimming>:
{
3400617c:	b480      	push	{r7}
3400617e:	b083      	sub	sp, #12
34006180:	af00      	add	r7, sp, #0
34006182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34006184:	4b07      	ldr	r3, [pc, #28]	@ (340061a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34006186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34006188:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
3400618c:	687b      	ldr	r3, [r7, #4]
3400618e:	041b      	lsls	r3, r3, #16
34006190:	4904      	ldr	r1, [pc, #16]	@ (340061a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34006192:	4313      	orrs	r3, r2
34006194:	648b      	str	r3, [r1, #72]	@ 0x48
}
34006196:	bf00      	nop
34006198:	370c      	adds	r7, #12
3400619a:	46bd      	mov	sp, r7
3400619c:	f85d 7b04 	ldr.w	r7, [sp], #4
340061a0:	4770      	bx	lr
340061a2:	bf00      	nop
340061a4:	56028000 	.word	0x56028000

340061a8 <LL_RCC_MSI_Enable>:
{
340061a8:	b480      	push	{r7}
340061aa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
340061ac:	4b04      	ldr	r3, [pc, #16]	@ (340061c0 <LL_RCC_MSI_Enable+0x18>)
340061ae:	2204      	movs	r2, #4
340061b0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
340061b4:	bf00      	nop
340061b6:	46bd      	mov	sp, r7
340061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
340061bc:	4770      	bx	lr
340061be:	bf00      	nop
340061c0:	56028000 	.word	0x56028000

340061c4 <LL_RCC_MSI_Disable>:
{
340061c4:	b480      	push	{r7}
340061c6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
340061c8:	4b05      	ldr	r3, [pc, #20]	@ (340061e0 <LL_RCC_MSI_Disable+0x1c>)
340061ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340061ce:	461a      	mov	r2, r3
340061d0:	2304      	movs	r3, #4
340061d2:	6013      	str	r3, [r2, #0]
}
340061d4:	bf00      	nop
340061d6:	46bd      	mov	sp, r7
340061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
340061dc:	4770      	bx	lr
340061de:	bf00      	nop
340061e0:	56028000 	.word	0x56028000

340061e4 <LL_RCC_MSI_IsReady>:
{
340061e4:	b480      	push	{r7}
340061e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
340061e8:	4b06      	ldr	r3, [pc, #24]	@ (34006204 <LL_RCC_MSI_IsReady+0x20>)
340061ea:	685b      	ldr	r3, [r3, #4]
340061ec:	f003 0304 	and.w	r3, r3, #4
340061f0:	2b00      	cmp	r3, #0
340061f2:	d001      	beq.n	340061f8 <LL_RCC_MSI_IsReady+0x14>
340061f4:	2301      	movs	r3, #1
340061f6:	e000      	b.n	340061fa <LL_RCC_MSI_IsReady+0x16>
340061f8:	2300      	movs	r3, #0
}
340061fa:	4618      	mov	r0, r3
340061fc:	46bd      	mov	sp, r7
340061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34006202:	4770      	bx	lr
34006204:	56028000 	.word	0x56028000

34006208 <LL_RCC_MSI_SetFrequency>:
{
34006208:	b480      	push	{r7}
3400620a:	b083      	sub	sp, #12
3400620c:	af00      	add	r7, sp, #0
3400620e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34006210:	4b06      	ldr	r3, [pc, #24]	@ (3400622c <LL_RCC_MSI_SetFrequency+0x24>)
34006212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006214:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34006218:	4904      	ldr	r1, [pc, #16]	@ (3400622c <LL_RCC_MSI_SetFrequency+0x24>)
3400621a:	687b      	ldr	r3, [r7, #4]
3400621c:	4313      	orrs	r3, r2
3400621e:	644b      	str	r3, [r1, #68]	@ 0x44
}
34006220:	bf00      	nop
34006222:	370c      	adds	r7, #12
34006224:	46bd      	mov	sp, r7
34006226:	f85d 7b04 	ldr.w	r7, [sp], #4
3400622a:	4770      	bx	lr
3400622c:	56028000 	.word	0x56028000

34006230 <LL_RCC_MSI_GetFrequency>:
{
34006230:	b480      	push	{r7}
34006232:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34006234:	4b04      	ldr	r3, [pc, #16]	@ (34006248 <LL_RCC_MSI_GetFrequency+0x18>)
34006236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
3400623c:	4618      	mov	r0, r3
3400623e:	46bd      	mov	sp, r7
34006240:	f85d 7b04 	ldr.w	r7, [sp], #4
34006244:	4770      	bx	lr
34006246:	bf00      	nop
34006248:	56028000 	.word	0x56028000

3400624c <LL_RCC_MSI_SetCalibTrimming>:
{
3400624c:	b480      	push	{r7}
3400624e:	b083      	sub	sp, #12
34006250:	af00      	add	r7, sp, #0
34006252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34006254:	4b07      	ldr	r3, [pc, #28]	@ (34006274 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34006256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006258:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
3400625c:	687b      	ldr	r3, [r7, #4]
3400625e:	041b      	lsls	r3, r3, #16
34006260:	4904      	ldr	r1, [pc, #16]	@ (34006274 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34006262:	4313      	orrs	r3, r2
34006264:	644b      	str	r3, [r1, #68]	@ 0x44
}
34006266:	bf00      	nop
34006268:	370c      	adds	r7, #12
3400626a:	46bd      	mov	sp, r7
3400626c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006270:	4770      	bx	lr
34006272:	bf00      	nop
34006274:	56028000 	.word	0x56028000

34006278 <LL_RCC_LSE_IsReady>:
{
34006278:	b480      	push	{r7}
3400627a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3400627c:	4b06      	ldr	r3, [pc, #24]	@ (34006298 <LL_RCC_LSE_IsReady+0x20>)
3400627e:	685b      	ldr	r3, [r3, #4]
34006280:	f003 0302 	and.w	r3, r3, #2
34006284:	2b00      	cmp	r3, #0
34006286:	d001      	beq.n	3400628c <LL_RCC_LSE_IsReady+0x14>
34006288:	2301      	movs	r3, #1
3400628a:	e000      	b.n	3400628e <LL_RCC_LSE_IsReady+0x16>
3400628c:	2300      	movs	r3, #0
}
3400628e:	4618      	mov	r0, r3
34006290:	46bd      	mov	sp, r7
34006292:	f85d 7b04 	ldr.w	r7, [sp], #4
34006296:	4770      	bx	lr
34006298:	56028000 	.word	0x56028000

3400629c <LL_RCC_LSI_Enable>:
{
3400629c:	b480      	push	{r7}
3400629e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
340062a0:	4b04      	ldr	r3, [pc, #16]	@ (340062b4 <LL_RCC_LSI_Enable+0x18>)
340062a2:	2201      	movs	r2, #1
340062a4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
340062a8:	bf00      	nop
340062aa:	46bd      	mov	sp, r7
340062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
340062b0:	4770      	bx	lr
340062b2:	bf00      	nop
340062b4:	56028000 	.word	0x56028000

340062b8 <LL_RCC_LSI_Disable>:
{
340062b8:	b480      	push	{r7}
340062ba:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340062bc:	4b05      	ldr	r3, [pc, #20]	@ (340062d4 <LL_RCC_LSI_Disable+0x1c>)
340062be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340062c2:	461a      	mov	r2, r3
340062c4:	2301      	movs	r3, #1
340062c6:	6013      	str	r3, [r2, #0]
}
340062c8:	bf00      	nop
340062ca:	46bd      	mov	sp, r7
340062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
340062d0:	4770      	bx	lr
340062d2:	bf00      	nop
340062d4:	56028000 	.word	0x56028000

340062d8 <LL_RCC_LSI_IsReady>:
{
340062d8:	b480      	push	{r7}
340062da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340062dc:	4b04      	ldr	r3, [pc, #16]	@ (340062f0 <LL_RCC_LSI_IsReady+0x18>)
340062de:	685b      	ldr	r3, [r3, #4]
340062e0:	f003 0301 	and.w	r3, r3, #1
}
340062e4:	4618      	mov	r0, r3
340062e6:	46bd      	mov	sp, r7
340062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340062ec:	4770      	bx	lr
340062ee:	bf00      	nop
340062f0:	56028000 	.word	0x56028000

340062f4 <LL_RCC_GetCpuClkSource>:
{
340062f4:	b480      	push	{r7}
340062f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340062f8:	4b04      	ldr	r3, [pc, #16]	@ (3400630c <LL_RCC_GetCpuClkSource+0x18>)
340062fa:	6a1b      	ldr	r3, [r3, #32]
340062fc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34006300:	4618      	mov	r0, r3
34006302:	46bd      	mov	sp, r7
34006304:	f85d 7b04 	ldr.w	r7, [sp], #4
34006308:	4770      	bx	lr
3400630a:	bf00      	nop
3400630c:	56028000 	.word	0x56028000

34006310 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34006310:	b480      	push	{r7}
34006312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34006314:	4b04      	ldr	r3, [pc, #16]	@ (34006328 <LL_RCC_GetSysClkSource+0x18>)
34006316:	6a1b      	ldr	r3, [r3, #32]
34006318:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400631c:	4618      	mov	r0, r3
3400631e:	46bd      	mov	sp, r7
34006320:	f85d 7b04 	ldr.w	r7, [sp], #4
34006324:	4770      	bx	lr
34006326:	bf00      	nop
34006328:	56028000 	.word	0x56028000

3400632c <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
3400632c:	b480      	push	{r7}
3400632e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34006330:	4b04      	ldr	r3, [pc, #16]	@ (34006344 <LL_RCC_PLL1_GetSource+0x18>)
34006332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006336:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400633a:	4618      	mov	r0, r3
3400633c:	46bd      	mov	sp, r7
3400633e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006342:	4770      	bx	lr
34006344:	56028000 	.word	0x56028000

34006348 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
34006348:	b480      	push	{r7}
3400634a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3400634c:	4b07      	ldr	r3, [pc, #28]	@ (3400636c <LL_RCC_PLL1_IsReady+0x24>)
3400634e:	685b      	ldr	r3, [r3, #4]
34006350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006358:	d101      	bne.n	3400635e <LL_RCC_PLL1_IsReady+0x16>
3400635a:	2301      	movs	r3, #1
3400635c:	e000      	b.n	34006360 <LL_RCC_PLL1_IsReady+0x18>
3400635e:	2300      	movs	r3, #0
}
34006360:	4618      	mov	r0, r3
34006362:	46bd      	mov	sp, r7
34006364:	f85d 7b04 	ldr.w	r7, [sp], #4
34006368:	4770      	bx	lr
3400636a:	bf00      	nop
3400636c:	56028000 	.word	0x56028000

34006370 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
34006370:	b480      	push	{r7}
34006372:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34006374:	4b07      	ldr	r3, [pc, #28]	@ (34006394 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34006376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400637a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400637e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34006382:	d101      	bne.n	34006388 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34006384:	2301      	movs	r3, #1
34006386:	e000      	b.n	3400638a <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34006388:	2300      	movs	r3, #0
}
3400638a:	4618      	mov	r0, r3
3400638c:	46bd      	mov	sp, r7
3400638e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006392:	4770      	bx	lr
34006394:	56028000 	.word	0x56028000

34006398 <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
34006398:	b480      	push	{r7}
3400639a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3400639c:	4b04      	ldr	r3, [pc, #16]	@ (340063b0 <LL_RCC_PLL2_GetSource+0x18>)
3400639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340063a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
340063a6:	4618      	mov	r0, r3
340063a8:	46bd      	mov	sp, r7
340063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
340063ae:	4770      	bx	lr
340063b0:	56028000 	.word	0x56028000

340063b4 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
340063b4:	b480      	push	{r7}
340063b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340063b8:	4b07      	ldr	r3, [pc, #28]	@ (340063d8 <LL_RCC_PLL2_IsReady+0x24>)
340063ba:	685b      	ldr	r3, [r3, #4]
340063bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340063c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340063c4:	d101      	bne.n	340063ca <LL_RCC_PLL2_IsReady+0x16>
340063c6:	2301      	movs	r3, #1
340063c8:	e000      	b.n	340063cc <LL_RCC_PLL2_IsReady+0x18>
340063ca:	2300      	movs	r3, #0
}
340063cc:	4618      	mov	r0, r3
340063ce:	46bd      	mov	sp, r7
340063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
340063d4:	4770      	bx	lr
340063d6:	bf00      	nop
340063d8:	56028000 	.word	0x56028000

340063dc <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
340063dc:	b480      	push	{r7}
340063de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340063e0:	4b07      	ldr	r3, [pc, #28]	@ (34006400 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
340063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340063e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340063ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340063ee:	d101      	bne.n	340063f4 <LL_RCC_PLL2_IsEnabledBypass+0x18>
340063f0:	2301      	movs	r3, #1
340063f2:	e000      	b.n	340063f6 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
340063f4:	2300      	movs	r3, #0
}
340063f6:	4618      	mov	r0, r3
340063f8:	46bd      	mov	sp, r7
340063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
340063fe:	4770      	bx	lr
34006400:	56028000 	.word	0x56028000

34006404 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
34006404:	b480      	push	{r7}
34006406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34006408:	4b04      	ldr	r3, [pc, #16]	@ (3400641c <LL_RCC_PLL3_GetSource+0x18>)
3400640a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400640e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34006412:	4618      	mov	r0, r3
34006414:	46bd      	mov	sp, r7
34006416:	f85d 7b04 	ldr.w	r7, [sp], #4
3400641a:	4770      	bx	lr
3400641c:	56028000 	.word	0x56028000

34006420 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34006420:	b480      	push	{r7}
34006422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34006424:	4b07      	ldr	r3, [pc, #28]	@ (34006444 <LL_RCC_PLL3_IsReady+0x24>)
34006426:	685b      	ldr	r3, [r3, #4]
34006428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400642c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34006430:	d101      	bne.n	34006436 <LL_RCC_PLL3_IsReady+0x16>
34006432:	2301      	movs	r3, #1
34006434:	e000      	b.n	34006438 <LL_RCC_PLL3_IsReady+0x18>
34006436:	2300      	movs	r3, #0
}
34006438:	4618      	mov	r0, r3
3400643a:	46bd      	mov	sp, r7
3400643c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006440:	4770      	bx	lr
34006442:	bf00      	nop
34006444:	56028000 	.word	0x56028000

34006448 <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
34006448:	b480      	push	{r7}
3400644a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400644c:	4b07      	ldr	r3, [pc, #28]	@ (3400646c <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3400644e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34006452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34006456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400645a:	d101      	bne.n	34006460 <LL_RCC_PLL3_IsEnabledBypass+0x18>
3400645c:	2301      	movs	r3, #1
3400645e:	e000      	b.n	34006462 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34006460:	2300      	movs	r3, #0
}
34006462:	4618      	mov	r0, r3
34006464:	46bd      	mov	sp, r7
34006466:	f85d 7b04 	ldr.w	r7, [sp], #4
3400646a:	4770      	bx	lr
3400646c:	56028000 	.word	0x56028000

34006470 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
34006470:	b480      	push	{r7}
34006472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34006474:	4b04      	ldr	r3, [pc, #16]	@ (34006488 <LL_RCC_PLL4_GetSource+0x18>)
34006476:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400647a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400647e:	4618      	mov	r0, r3
34006480:	46bd      	mov	sp, r7
34006482:	f85d 7b04 	ldr.w	r7, [sp], #4
34006486:	4770      	bx	lr
34006488:	56028000 	.word	0x56028000

3400648c <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
3400648c:	b480      	push	{r7}
3400648e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34006490:	4b07      	ldr	r3, [pc, #28]	@ (340064b0 <LL_RCC_PLL4_IsReady+0x24>)
34006492:	685b      	ldr	r3, [r3, #4]
34006494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34006498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3400649c:	d101      	bne.n	340064a2 <LL_RCC_PLL4_IsReady+0x16>
3400649e:	2301      	movs	r3, #1
340064a0:	e000      	b.n	340064a4 <LL_RCC_PLL4_IsReady+0x18>
340064a2:	2300      	movs	r3, #0
}
340064a4:	4618      	mov	r0, r3
340064a6:	46bd      	mov	sp, r7
340064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
340064ac:	4770      	bx	lr
340064ae:	bf00      	nop
340064b0:	56028000 	.word	0x56028000

340064b4 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
340064b4:	b480      	push	{r7}
340064b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340064b8:	4b07      	ldr	r3, [pc, #28]	@ (340064d8 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
340064ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340064be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340064c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340064c6:	d101      	bne.n	340064cc <LL_RCC_PLL4_IsEnabledBypass+0x18>
340064c8:	2301      	movs	r3, #1
340064ca:	e000      	b.n	340064ce <LL_RCC_PLL4_IsEnabledBypass+0x1a>
340064cc:	2300      	movs	r3, #0
}
340064ce:	4618      	mov	r0, r3
340064d0:	46bd      	mov	sp, r7
340064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
340064d6:	4770      	bx	lr
340064d8:	56028000 	.word	0x56028000

340064dc <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
340064dc:	b480      	push	{r7}
340064de:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
340064e0:	4b04      	ldr	r3, [pc, #16]	@ (340064f4 <LL_RCC_IC1_Enable+0x18>)
340064e2:	2201      	movs	r2, #1
340064e4:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340064e8:	bf00      	nop
340064ea:	46bd      	mov	sp, r7
340064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
340064f0:	4770      	bx	lr
340064f2:	bf00      	nop
340064f4:	56028000 	.word	0x56028000

340064f8 <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
340064f8:	b480      	push	{r7}
340064fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340064fc:	4b04      	ldr	r3, [pc, #16]	@ (34006510 <LL_RCC_IC1_GetSource+0x18>)
340064fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34006502:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34006506:	4618      	mov	r0, r3
34006508:	46bd      	mov	sp, r7
3400650a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400650e:	4770      	bx	lr
34006510:	56028000 	.word	0x56028000

34006514 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
34006514:	b480      	push	{r7}
34006516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34006518:	4b05      	ldr	r3, [pc, #20]	@ (34006530 <LL_RCC_IC1_GetDivider+0x1c>)
3400651a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400651e:	0c1b      	lsrs	r3, r3, #16
34006520:	b2db      	uxtb	r3, r3
34006522:	3301      	adds	r3, #1
}
34006524:	4618      	mov	r0, r3
34006526:	46bd      	mov	sp, r7
34006528:	f85d 7b04 	ldr.w	r7, [sp], #4
3400652c:	4770      	bx	lr
3400652e:	bf00      	nop
34006530:	56028000 	.word	0x56028000

34006534 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
34006534:	b480      	push	{r7}
34006536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34006538:	4b04      	ldr	r3, [pc, #16]	@ (3400654c <LL_RCC_IC2_GetSource+0x18>)
3400653a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400653e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34006542:	4618      	mov	r0, r3
34006544:	46bd      	mov	sp, r7
34006546:	f85d 7b04 	ldr.w	r7, [sp], #4
3400654a:	4770      	bx	lr
3400654c:	56028000 	.word	0x56028000

34006550 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34006550:	b480      	push	{r7}
34006552:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34006554:	4b05      	ldr	r3, [pc, #20]	@ (3400656c <LL_RCC_IC2_GetDivider+0x1c>)
34006556:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400655a:	0c1b      	lsrs	r3, r3, #16
3400655c:	b2db      	uxtb	r3, r3
3400655e:	3301      	adds	r3, #1
}
34006560:	4618      	mov	r0, r3
34006562:	46bd      	mov	sp, r7
34006564:	f85d 7b04 	ldr.w	r7, [sp], #4
34006568:	4770      	bx	lr
3400656a:	bf00      	nop
3400656c:	56028000 	.word	0x56028000

34006570 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34006570:	b480      	push	{r7}
34006572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34006574:	4b04      	ldr	r3, [pc, #16]	@ (34006588 <LL_RCC_IC6_GetSource+0x18>)
34006576:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400657a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400657e:	4618      	mov	r0, r3
34006580:	46bd      	mov	sp, r7
34006582:	f85d 7b04 	ldr.w	r7, [sp], #4
34006586:	4770      	bx	lr
34006588:	56028000 	.word	0x56028000

3400658c <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
3400658c:	b480      	push	{r7}
3400658e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34006590:	4b04      	ldr	r3, [pc, #16]	@ (340065a4 <LL_RCC_IC11_GetSource+0x18>)
34006592:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34006596:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400659a:	4618      	mov	r0, r3
3400659c:	46bd      	mov	sp, r7
3400659e:	f85d 7b04 	ldr.w	r7, [sp], #4
340065a2:	4770      	bx	lr
340065a4:	56028000 	.word	0x56028000

340065a8 <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
340065a8:	b580      	push	{r7, lr}
340065aa:	b0a2      	sub	sp, #136	@ 0x88
340065ac:	af00      	add	r7, sp, #0
340065ae:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
340065b0:	687b      	ldr	r3, [r7, #4]
340065b2:	2b00      	cmp	r3, #0
340065b4:	d102      	bne.n	340065bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
340065b6:	2301      	movs	r3, #1
340065b8:	f000 bd10 	b.w	34006fdc <HAL_RCC_OscConfig+0xa34>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
340065bc:	687b      	ldr	r3, [r7, #4]
340065be:	681b      	ldr	r3, [r3, #0]
340065c0:	2b00      	cmp	r3, #0
340065c2:	d022      	beq.n	3400660a <HAL_RCC_OscConfig+0x62>
340065c4:	687b      	ldr	r3, [r7, #4]
340065c6:	681b      	ldr	r3, [r3, #0]
340065c8:	f003 0301 	and.w	r3, r3, #1
340065cc:	2b00      	cmp	r3, #0
340065ce:	d11c      	bne.n	3400660a <HAL_RCC_OscConfig+0x62>
340065d0:	687b      	ldr	r3, [r7, #4]
340065d2:	681b      	ldr	r3, [r3, #0]
340065d4:	f003 0302 	and.w	r3, r3, #2
340065d8:	2b00      	cmp	r3, #0
340065da:	d116      	bne.n	3400660a <HAL_RCC_OscConfig+0x62>
340065dc:	687b      	ldr	r3, [r7, #4]
340065de:	681b      	ldr	r3, [r3, #0]
340065e0:	f003 0310 	and.w	r3, r3, #16
340065e4:	2b00      	cmp	r3, #0
340065e6:	d110      	bne.n	3400660a <HAL_RCC_OscConfig+0x62>
340065e8:	687b      	ldr	r3, [r7, #4]
340065ea:	681b      	ldr	r3, [r3, #0]
340065ec:	f003 0308 	and.w	r3, r3, #8
340065f0:	2b00      	cmp	r3, #0
340065f2:	d10a      	bne.n	3400660a <HAL_RCC_OscConfig+0x62>
340065f4:	687b      	ldr	r3, [r7, #4]
340065f6:	681b      	ldr	r3, [r3, #0]
340065f8:	f003 0304 	and.w	r3, r3, #4
340065fc:	2b00      	cmp	r3, #0
340065fe:	d104      	bne.n	3400660a <HAL_RCC_OscConfig+0x62>
34006600:	f44f 71b9 	mov.w	r1, #370	@ 0x172
34006604:	4892      	ldr	r0, [pc, #584]	@ (34006850 <HAL_RCC_OscConfig+0x2a8>)
34006606:	f7fb f90d 	bl	34001824 <assert_failed>

  cpuclksrc = LL_RCC_GetCpuClkSource();
3400660a:	f7ff fe73 	bl	340062f4 <LL_RCC_GetCpuClkSource>
3400660e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
34006612:	f7ff fe7d 	bl	34006310 <LL_RCC_GetSysClkSource>
34006616:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
3400661a:	f7ff fe87 	bl	3400632c <LL_RCC_PLL1_GetSource>
3400661e:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
34006620:	f7ff feba 	bl	34006398 <LL_RCC_PLL2_GetSource>
34006624:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
34006626:	f7ff feed 	bl	34006404 <LL_RCC_PLL3_GetSource>
3400662a:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
3400662c:	f7ff ff20 	bl	34006470 <LL_RCC_PLL4_GetSource>
34006630:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
34006632:	4b88      	ldr	r3, [pc, #544]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
34006634:	685b      	ldr	r3, [r3, #4]
34006636:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34006638:	687b      	ldr	r3, [r7, #4]
3400663a:	681b      	ldr	r3, [r3, #0]
3400663c:	f003 0301 	and.w	r3, r3, #1
34006640:	2b00      	cmp	r3, #0
34006642:	f000 80c3 	beq.w	340067cc <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
34006646:	687b      	ldr	r3, [r7, #4]
34006648:	685b      	ldr	r3, [r3, #4]
3400664a:	2b00      	cmp	r3, #0
3400664c:	d013      	beq.n	34006676 <HAL_RCC_OscConfig+0xce>
3400664e:	687b      	ldr	r3, [r7, #4]
34006650:	685b      	ldr	r3, [r3, #4]
34006652:	2b10      	cmp	r3, #16
34006654:	d00f      	beq.n	34006676 <HAL_RCC_OscConfig+0xce>
34006656:	687b      	ldr	r3, [r7, #4]
34006658:	685b      	ldr	r3, [r3, #4]
3400665a:	f248 0210 	movw	r2, #32784	@ 0x8010
3400665e:	4293      	cmp	r3, r2
34006660:	d009      	beq.n	34006676 <HAL_RCC_OscConfig+0xce>
34006662:	687b      	ldr	r3, [r7, #4]
34006664:	685b      	ldr	r3, [r3, #4]
34006666:	4a7c      	ldr	r2, [pc, #496]	@ (34006858 <HAL_RCC_OscConfig+0x2b0>)
34006668:	4293      	cmp	r3, r2
3400666a:	d004      	beq.n	34006676 <HAL_RCC_OscConfig+0xce>
3400666c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
34006670:	4877      	ldr	r0, [pc, #476]	@ (34006850 <HAL_RCC_OscConfig+0x2a8>)
34006672:	f7fb f8d7 	bl	34001824 <assert_failed>

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34006676:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3400667a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400667e:	d028      	beq.n	340066d2 <HAL_RCC_OscConfig+0x12a>
34006680:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006688:	d023      	beq.n	340066d2 <HAL_RCC_OscConfig+0x12a>
3400668a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3400668c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006690:	d104      	bne.n	3400669c <HAL_RCC_OscConfig+0xf4>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34006692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006698:	2b00      	cmp	r3, #0
3400669a:	d11a      	bne.n	340066d2 <HAL_RCC_OscConfig+0x12a>
3400669c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3400669e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340066a2:	d104      	bne.n	340066ae <HAL_RCC_OscConfig+0x106>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340066a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340066a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340066aa:	2b00      	cmp	r3, #0
340066ac:	d111      	bne.n	340066d2 <HAL_RCC_OscConfig+0x12a>
340066ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
340066b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340066b4:	d104      	bne.n	340066c0 <HAL_RCC_OscConfig+0x118>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340066b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340066b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340066bc:	2b00      	cmp	r3, #0
340066be:	d108      	bne.n	340066d2 <HAL_RCC_OscConfig+0x12a>
340066c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
340066c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340066c6:	d10b      	bne.n	340066e0 <HAL_RCC_OscConfig+0x138>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340066c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340066ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340066ce:	2b00      	cmp	r3, #0
340066d0:	d006      	beq.n	340066e0 <HAL_RCC_OscConfig+0x138>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
340066d2:	687b      	ldr	r3, [r7, #4]
340066d4:	685b      	ldr	r3, [r3, #4]
340066d6:	2b00      	cmp	r3, #0
340066d8:	d178      	bne.n	340067cc <HAL_RCC_OscConfig+0x224>
      {
        return HAL_ERROR;
340066da:	2301      	movs	r3, #1
340066dc:	f000 bc7e 	b.w	34006fdc <HAL_RCC_OscConfig+0xa34>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
340066e0:	687b      	ldr	r3, [r7, #4]
340066e2:	685b      	ldr	r3, [r3, #4]
340066e4:	2b10      	cmp	r3, #16
340066e6:	d104      	bne.n	340066f2 <HAL_RCC_OscConfig+0x14a>
340066e8:	4b5a      	ldr	r3, [pc, #360]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
340066ea:	2210      	movs	r2, #16
340066ec:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
340066f0:	e043      	b.n	3400677a <HAL_RCC_OscConfig+0x1d2>
340066f2:	687b      	ldr	r3, [r7, #4]
340066f4:	685b      	ldr	r3, [r3, #4]
340066f6:	2b00      	cmp	r3, #0
340066f8:	d10c      	bne.n	34006714 <HAL_RCC_OscConfig+0x16c>
340066fa:	4b56      	ldr	r3, [pc, #344]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
340066fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006700:	461a      	mov	r2, r3
34006702:	2310      	movs	r3, #16
34006704:	6013      	str	r3, [r2, #0]
34006706:	4b53      	ldr	r3, [pc, #332]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
34006708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400670a:	4a52      	ldr	r2, [pc, #328]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
3400670c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34006710:	6553      	str	r3, [r2, #84]	@ 0x54
34006712:	e032      	b.n	3400677a <HAL_RCC_OscConfig+0x1d2>
34006714:	687b      	ldr	r3, [r7, #4]
34006716:	685b      	ldr	r3, [r3, #4]
34006718:	f248 0210 	movw	r2, #32784	@ 0x8010
3400671c:	4293      	cmp	r3, r2
3400671e:	d110      	bne.n	34006742 <HAL_RCC_OscConfig+0x19a>
34006720:	4b4c      	ldr	r3, [pc, #304]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
34006722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006724:	4a4b      	ldr	r2, [pc, #300]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
34006726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400672a:	6553      	str	r3, [r2, #84]	@ 0x54
3400672c:	4b49      	ldr	r3, [pc, #292]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
3400672e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006730:	4a48      	ldr	r2, [pc, #288]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
34006732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006736:	6553      	str	r3, [r2, #84]	@ 0x54
34006738:	4b46      	ldr	r3, [pc, #280]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
3400673a:	2210      	movs	r2, #16
3400673c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006740:	e01b      	b.n	3400677a <HAL_RCC_OscConfig+0x1d2>
34006742:	687b      	ldr	r3, [r7, #4]
34006744:	685b      	ldr	r3, [r3, #4]
34006746:	4a44      	ldr	r2, [pc, #272]	@ (34006858 <HAL_RCC_OscConfig+0x2b0>)
34006748:	4293      	cmp	r3, r2
3400674a:	d10a      	bne.n	34006762 <HAL_RCC_OscConfig+0x1ba>
3400674c:	4b41      	ldr	r3, [pc, #260]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
3400674e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006750:	4a40      	ldr	r2, [pc, #256]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
34006752:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
34006756:	6553      	str	r3, [r2, #84]	@ 0x54
34006758:	4b3e      	ldr	r3, [pc, #248]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
3400675a:	2210      	movs	r2, #16
3400675c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006760:	e00b      	b.n	3400677a <HAL_RCC_OscConfig+0x1d2>
34006762:	4b3c      	ldr	r3, [pc, #240]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
34006764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006768:	461a      	mov	r2, r3
3400676a:	2310      	movs	r3, #16
3400676c:	6013      	str	r3, [r2, #0]
3400676e:	4b39      	ldr	r3, [pc, #228]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
34006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006772:	4a38      	ldr	r2, [pc, #224]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
34006774:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34006778:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3400677a:	f7fd f983 	bl	34003a84 <HAL_GetTick>
3400677e:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34006780:	687b      	ldr	r3, [r7, #4]
34006782:	685b      	ldr	r3, [r3, #4]
34006784:	2b00      	cmp	r3, #0
34006786:	d01b      	beq.n	340067c0 <HAL_RCC_OscConfig+0x218>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34006788:	e009      	b.n	3400679e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3400678a:	f7fd f97b 	bl	34003a84 <HAL_GetTick>
3400678e:	4602      	mov	r2, r0
34006790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006792:	1ad3      	subs	r3, r2, r3
34006794:	2b64      	cmp	r3, #100	@ 0x64
34006796:	d902      	bls.n	3400679e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
34006798:	2303      	movs	r3, #3
3400679a:	f000 bc1f 	b.w	34006fdc <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3400679e:	4b2d      	ldr	r3, [pc, #180]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
340067a0:	685b      	ldr	r3, [r3, #4]
340067a2:	f003 0310 	and.w	r3, r3, #16
340067a6:	2b00      	cmp	r3, #0
340067a8:	d0ef      	beq.n	3400678a <HAL_RCC_OscConfig+0x1e2>
340067aa:	e00f      	b.n	340067cc <HAL_RCC_OscConfig+0x224>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340067ac:	f7fd f96a 	bl	34003a84 <HAL_GetTick>
340067b0:	4602      	mov	r2, r0
340067b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
340067b4:	1ad3      	subs	r3, r2, r3
340067b6:	2b64      	cmp	r3, #100	@ 0x64
340067b8:	d902      	bls.n	340067c0 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
340067ba:	2303      	movs	r3, #3
340067bc:	f000 bc0e 	b.w	34006fdc <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
340067c0:	4b24      	ldr	r3, [pc, #144]	@ (34006854 <HAL_RCC_OscConfig+0x2ac>)
340067c2:	685b      	ldr	r3, [r3, #4]
340067c4:	f003 0310 	and.w	r3, r3, #16
340067c8:	2b00      	cmp	r3, #0
340067ca:	d1ef      	bne.n	340067ac <HAL_RCC_OscConfig+0x204>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
340067cc:	687b      	ldr	r3, [r7, #4]
340067ce:	681b      	ldr	r3, [r3, #0]
340067d0:	f003 0302 	and.w	r3, r3, #2
340067d4:	2b00      	cmp	r3, #0
340067d6:	f000 80c3 	beq.w	34006960 <HAL_RCC_OscConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
340067da:	687b      	ldr	r3, [r7, #4]
340067dc:	68db      	ldr	r3, [r3, #12]
340067de:	2b00      	cmp	r3, #0
340067e0:	d008      	beq.n	340067f4 <HAL_RCC_OscConfig+0x24c>
340067e2:	687b      	ldr	r3, [r7, #4]
340067e4:	68db      	ldr	r3, [r3, #12]
340067e6:	2b08      	cmp	r3, #8
340067e8:	d004      	beq.n	340067f4 <HAL_RCC_OscConfig+0x24c>
340067ea:	f240 11b5 	movw	r1, #437	@ 0x1b5
340067ee:	4818      	ldr	r0, [pc, #96]	@ (34006850 <HAL_RCC_OscConfig+0x2a8>)
340067f0:	f7fb f818 	bl	34001824 <assert_failed>

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
340067f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
340067f8:	2b00      	cmp	r3, #0
340067fa:	d023      	beq.n	34006844 <HAL_RCC_OscConfig+0x29c>
340067fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006800:	2b00      	cmp	r3, #0
34006802:	d01f      	beq.n	34006844 <HAL_RCC_OscConfig+0x29c>
34006804:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34006806:	2b00      	cmp	r3, #0
34006808:	d104      	bne.n	34006814 <HAL_RCC_OscConfig+0x26c>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3400680a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3400680c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006810:	2b00      	cmp	r3, #0
34006812:	d117      	bne.n	34006844 <HAL_RCC_OscConfig+0x29c>
34006814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34006816:	2b00      	cmp	r3, #0
34006818:	d104      	bne.n	34006824 <HAL_RCC_OscConfig+0x27c>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3400681a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3400681c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34006820:	2b00      	cmp	r3, #0
34006822:	d10f      	bne.n	34006844 <HAL_RCC_OscConfig+0x29c>
34006824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34006826:	2b00      	cmp	r3, #0
34006828:	d104      	bne.n	34006834 <HAL_RCC_OscConfig+0x28c>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3400682a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3400682c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34006830:	2b00      	cmp	r3, #0
34006832:	d107      	bne.n	34006844 <HAL_RCC_OscConfig+0x29c>
34006834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34006836:	2b00      	cmp	r3, #0
34006838:	d13b      	bne.n	340068b2 <HAL_RCC_OscConfig+0x30a>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3400683a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3400683c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34006840:	2b00      	cmp	r3, #0
34006842:	d036      	beq.n	340068b2 <HAL_RCC_OscConfig+0x30a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34006844:	687b      	ldr	r3, [r7, #4]
34006846:	68db      	ldr	r3, [r3, #12]
34006848:	2b00      	cmp	r3, #0
3400684a:	d107      	bne.n	3400685c <HAL_RCC_OscConfig+0x2b4>
      {
        return HAL_ERROR;
3400684c:	2301      	movs	r3, #1
3400684e:	e3c5      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
34006850:	3401ce18 	.word	0x3401ce18
34006854:	56028000 	.word	0x56028000
34006858:	00018010 	.word	0x00018010
      }
      /* Otherwise, just the divider and calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
3400685c:	687b      	ldr	r3, [r7, #4]
3400685e:	691b      	ldr	r3, [r3, #16]
34006860:	2b00      	cmp	r3, #0
34006862:	d012      	beq.n	3400688a <HAL_RCC_OscConfig+0x2e2>
34006864:	687b      	ldr	r3, [r7, #4]
34006866:	691b      	ldr	r3, [r3, #16]
34006868:	2b80      	cmp	r3, #128	@ 0x80
3400686a:	d00e      	beq.n	3400688a <HAL_RCC_OscConfig+0x2e2>
3400686c:	687b      	ldr	r3, [r7, #4]
3400686e:	691b      	ldr	r3, [r3, #16]
34006870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006874:	d009      	beq.n	3400688a <HAL_RCC_OscConfig+0x2e2>
34006876:	687b      	ldr	r3, [r7, #4]
34006878:	691b      	ldr	r3, [r3, #16]
3400687a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
3400687e:	d004      	beq.n	3400688a <HAL_RCC_OscConfig+0x2e2>
34006880:	f240 11c7 	movw	r1, #455	@ 0x1c7
34006884:	48a2      	ldr	r0, [pc, #648]	@ (34006b10 <HAL_RCC_OscConfig+0x568>)
34006886:	f7fa ffcd 	bl	34001824 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
3400688a:	687b      	ldr	r3, [r7, #4]
3400688c:	695b      	ldr	r3, [r3, #20]
3400688e:	2b7f      	cmp	r3, #127	@ 0x7f
34006890:	d904      	bls.n	3400689c <HAL_RCC_OscConfig+0x2f4>
34006892:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
34006896:	489e      	ldr	r0, [pc, #632]	@ (34006b10 <HAL_RCC_OscConfig+0x568>)
34006898:	f7fa ffc4 	bl	34001824 <assert_failed>

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
3400689c:	687b      	ldr	r3, [r7, #4]
3400689e:	691b      	ldr	r3, [r3, #16]
340068a0:	4618      	mov	r0, r3
340068a2:	f7ff fc49 	bl	34006138 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
340068a6:	687b      	ldr	r3, [r7, #4]
340068a8:	695b      	ldr	r3, [r3, #20]
340068aa:	4618      	mov	r0, r3
340068ac:	f7ff fc66 	bl	3400617c <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
340068b0:	e056      	b.n	34006960 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
340068b2:	687b      	ldr	r3, [r7, #4]
340068b4:	68db      	ldr	r3, [r3, #12]
340068b6:	2b00      	cmp	r3, #0
340068b8:	d03e      	beq.n	34006938 <HAL_RCC_OscConfig+0x390>
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
340068ba:	687b      	ldr	r3, [r7, #4]
340068bc:	691b      	ldr	r3, [r3, #16]
340068be:	2b00      	cmp	r3, #0
340068c0:	d012      	beq.n	340068e8 <HAL_RCC_OscConfig+0x340>
340068c2:	687b      	ldr	r3, [r7, #4]
340068c4:	691b      	ldr	r3, [r3, #16]
340068c6:	2b80      	cmp	r3, #128	@ 0x80
340068c8:	d00e      	beq.n	340068e8 <HAL_RCC_OscConfig+0x340>
340068ca:	687b      	ldr	r3, [r7, #4]
340068cc:	691b      	ldr	r3, [r3, #16]
340068ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340068d2:	d009      	beq.n	340068e8 <HAL_RCC_OscConfig+0x340>
340068d4:	687b      	ldr	r3, [r7, #4]
340068d6:	691b      	ldr	r3, [r3, #16]
340068d8:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
340068dc:	d004      	beq.n	340068e8 <HAL_RCC_OscConfig+0x340>
340068de:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
340068e2:	488b      	ldr	r0, [pc, #556]	@ (34006b10 <HAL_RCC_OscConfig+0x568>)
340068e4:	f7fa ff9e 	bl	34001824 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
340068e8:	687b      	ldr	r3, [r7, #4]
340068ea:	695b      	ldr	r3, [r3, #20]
340068ec:	2b7f      	cmp	r3, #127	@ 0x7f
340068ee:	d904      	bls.n	340068fa <HAL_RCC_OscConfig+0x352>
340068f0:	f240 11d7 	movw	r1, #471	@ 0x1d7
340068f4:	4886      	ldr	r0, [pc, #536]	@ (34006b10 <HAL_RCC_OscConfig+0x568>)
340068f6:	f7fa ff95 	bl	34001824 <assert_failed>

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
340068fa:	f7ff fbed 	bl	340060d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
340068fe:	f7fd f8c1 	bl	34003a84 <HAL_GetTick>
34006902:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
34006904:	e008      	b.n	34006918 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34006906:	f7fd f8bd 	bl	34003a84 <HAL_GetTick>
3400690a:	4602      	mov	r2, r0
3400690c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3400690e:	1ad3      	subs	r3, r2, r3
34006910:	2b01      	cmp	r3, #1
34006912:	d901      	bls.n	34006918 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
34006914:	2303      	movs	r3, #3
34006916:	e361      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() == 0U)
34006918:	f7ff fbfc 	bl	34006114 <LL_RCC_HSI_IsReady>
3400691c:	4603      	mov	r3, r0
3400691e:	2b00      	cmp	r3, #0
34006920:	d0f1      	beq.n	34006906 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34006922:	687b      	ldr	r3, [r7, #4]
34006924:	691b      	ldr	r3, [r3, #16]
34006926:	4618      	mov	r0, r3
34006928:	f7ff fc06 	bl	34006138 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
3400692c:	687b      	ldr	r3, [r7, #4]
3400692e:	695b      	ldr	r3, [r3, #20]
34006930:	4618      	mov	r0, r3
34006932:	f7ff fc23 	bl	3400617c <LL_RCC_HSI_SetCalibTrimming>
34006936:	e013      	b.n	34006960 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
34006938:	f7ff fbdc 	bl	340060f4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3400693c:	f7fd f8a2 	bl	34003a84 <HAL_GetTick>
34006940:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
34006942:	e008      	b.n	34006956 <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34006944:	f7fd f89e 	bl	34003a84 <HAL_GetTick>
34006948:	4602      	mov	r2, r0
3400694a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3400694c:	1ad3      	subs	r3, r2, r3
3400694e:	2b01      	cmp	r3, #1
34006950:	d901      	bls.n	34006956 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
34006952:	2303      	movs	r3, #3
34006954:	e342      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() != 0U)
34006956:	f7ff fbdd 	bl	34006114 <LL_RCC_HSI_IsReady>
3400695a:	4603      	mov	r3, r0
3400695c:	2b00      	cmp	r3, #0
3400695e:	d1f1      	bne.n	34006944 <HAL_RCC_OscConfig+0x39c>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34006960:	687b      	ldr	r3, [r7, #4]
34006962:	681b      	ldr	r3, [r3, #0]
34006964:	f003 0310 	and.w	r3, r3, #16
34006968:	2b00      	cmp	r3, #0
3400696a:	f000 809e 	beq.w	34006aaa <HAL_RCC_OscConfig+0x502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
3400696e:	687b      	ldr	r3, [r7, #4]
34006970:	69db      	ldr	r3, [r3, #28]
34006972:	2b00      	cmp	r3, #0
34006974:	d008      	beq.n	34006988 <HAL_RCC_OscConfig+0x3e0>
34006976:	687b      	ldr	r3, [r7, #4]
34006978:	69db      	ldr	r3, [r3, #28]
3400697a:	2b04      	cmp	r3, #4
3400697c:	d004      	beq.n	34006988 <HAL_RCC_OscConfig+0x3e0>
3400697e:	f240 2105 	movw	r1, #517	@ 0x205
34006982:	4863      	ldr	r0, [pc, #396]	@ (34006b10 <HAL_RCC_OscConfig+0x568>)
34006984:	f7fa ff4e 	bl	34001824 <assert_failed>

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34006988:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3400698c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34006990:	d028      	beq.n	340069e4 <HAL_RCC_OscConfig+0x43c>
34006992:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006996:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400699a:	d023      	beq.n	340069e4 <HAL_RCC_OscConfig+0x43c>
3400699c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3400699e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340069a2:	d104      	bne.n	340069ae <HAL_RCC_OscConfig+0x406>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340069a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340069a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340069aa:	2b00      	cmp	r3, #0
340069ac:	d11a      	bne.n	340069e4 <HAL_RCC_OscConfig+0x43c>
340069ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
340069b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340069b4:	d104      	bne.n	340069c0 <HAL_RCC_OscConfig+0x418>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340069b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340069b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340069bc:	2b00      	cmp	r3, #0
340069be:	d111      	bne.n	340069e4 <HAL_RCC_OscConfig+0x43c>
340069c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
340069c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340069c6:	d104      	bne.n	340069d2 <HAL_RCC_OscConfig+0x42a>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340069c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340069ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340069ce:	2b00      	cmp	r3, #0
340069d0:	d108      	bne.n	340069e4 <HAL_RCC_OscConfig+0x43c>
340069d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
340069d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340069d8:	d119      	bne.n	34006a0e <HAL_RCC_OscConfig+0x466>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340069da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340069dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340069e0:	2b00      	cmp	r3, #0
340069e2:	d014      	beq.n	34006a0e <HAL_RCC_OscConfig+0x466>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
340069e4:	687b      	ldr	r3, [r7, #4]
340069e6:	69db      	ldr	r3, [r3, #28]
340069e8:	2b00      	cmp	r3, #0
340069ea:	d101      	bne.n	340069f0 <HAL_RCC_OscConfig+0x448>
      {
        return HAL_ERROR;
340069ec:	2301      	movs	r3, #1
340069ee:	e2f5      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
340069f0:	687b      	ldr	r3, [r7, #4]
340069f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340069f4:	2b1f      	cmp	r3, #31
340069f6:	d904      	bls.n	34006a02 <HAL_RCC_OscConfig+0x45a>
340069f8:	f44f 7106 	mov.w	r1, #536	@ 0x218
340069fc:	4844      	ldr	r0, [pc, #272]	@ (34006b10 <HAL_RCC_OscConfig+0x568>)
340069fe:	f7fa ff11 	bl	34001824 <assert_failed>

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34006a02:	687b      	ldr	r3, [r7, #4]
34006a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006a06:	4618      	mov	r0, r3
34006a08:	f7ff fc20 	bl	3400624c <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34006a0c:	e04d      	b.n	34006aaa <HAL_RCC_OscConfig+0x502>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34006a0e:	687b      	ldr	r3, [r7, #4]
34006a10:	69db      	ldr	r3, [r3, #28]
34006a12:	2b00      	cmp	r3, #0
34006a14:	d035      	beq.n	34006a82 <HAL_RCC_OscConfig+0x4da>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
34006a16:	687b      	ldr	r3, [r7, #4]
34006a18:	6a1b      	ldr	r3, [r3, #32]
34006a1a:	2b00      	cmp	r3, #0
34006a1c:	d009      	beq.n	34006a32 <HAL_RCC_OscConfig+0x48a>
34006a1e:	687b      	ldr	r3, [r7, #4]
34006a20:	6a1b      	ldr	r3, [r3, #32]
34006a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34006a26:	d004      	beq.n	34006a32 <HAL_RCC_OscConfig+0x48a>
34006a28:	f44f 7109 	mov.w	r1, #548	@ 0x224
34006a2c:	4838      	ldr	r0, [pc, #224]	@ (34006b10 <HAL_RCC_OscConfig+0x568>)
34006a2e:	f7fa fef9 	bl	34001824 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34006a32:	687b      	ldr	r3, [r7, #4]
34006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006a36:	2b1f      	cmp	r3, #31
34006a38:	d904      	bls.n	34006a44 <HAL_RCC_OscConfig+0x49c>
34006a3a:	f240 2125 	movw	r1, #549	@ 0x225
34006a3e:	4834      	ldr	r0, [pc, #208]	@ (34006b10 <HAL_RCC_OscConfig+0x568>)
34006a40:	f7fa fef0 	bl	34001824 <assert_failed>

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
34006a44:	687b      	ldr	r3, [r7, #4]
34006a46:	6a1b      	ldr	r3, [r3, #32]
34006a48:	4618      	mov	r0, r3
34006a4a:	f7ff fbdd 	bl	34006208 <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
34006a4e:	f7ff fbab 	bl	340061a8 <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006a52:	f7fd f817 	bl	34003a84 <HAL_GetTick>
34006a56:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
34006a58:	e008      	b.n	34006a6c <HAL_RCC_OscConfig+0x4c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34006a5a:	f7fd f813 	bl	34003a84 <HAL_GetTick>
34006a5e:	4602      	mov	r2, r0
34006a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006a62:	1ad3      	subs	r3, r2, r3
34006a64:	2b01      	cmp	r3, #1
34006a66:	d901      	bls.n	34006a6c <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
34006a68:	2303      	movs	r3, #3
34006a6a:	e2b7      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() == 0U)
34006a6c:	f7ff fbba 	bl	340061e4 <LL_RCC_MSI_IsReady>
34006a70:	4603      	mov	r3, r0
34006a72:	2b00      	cmp	r3, #0
34006a74:	d0f1      	beq.n	34006a5a <HAL_RCC_OscConfig+0x4b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34006a76:	687b      	ldr	r3, [r7, #4]
34006a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006a7a:	4618      	mov	r0, r3
34006a7c:	f7ff fbe6 	bl	3400624c <LL_RCC_MSI_SetCalibTrimming>
34006a80:	e013      	b.n	34006aaa <HAL_RCC_OscConfig+0x502>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
34006a82:	f7ff fb9f 	bl	340061c4 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006a86:	f7fc fffd 	bl	34003a84 <HAL_GetTick>
34006a8a:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
34006a8c:	e008      	b.n	34006aa0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34006a8e:	f7fc fff9 	bl	34003a84 <HAL_GetTick>
34006a92:	4602      	mov	r2, r0
34006a94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006a96:	1ad3      	subs	r3, r2, r3
34006a98:	2b01      	cmp	r3, #1
34006a9a:	d901      	bls.n	34006aa0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
34006a9c:	2303      	movs	r3, #3
34006a9e:	e29d      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() != 0U)
34006aa0:	f7ff fba0 	bl	340061e4 <LL_RCC_MSI_IsReady>
34006aa4:	4603      	mov	r3, r0
34006aa6:	2b00      	cmp	r3, #0
34006aa8:	d1f1      	bne.n	34006a8e <HAL_RCC_OscConfig+0x4e6>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34006aaa:	687b      	ldr	r3, [r7, #4]
34006aac:	681b      	ldr	r3, [r3, #0]
34006aae:	f003 0308 	and.w	r3, r3, #8
34006ab2:	2b00      	cmp	r3, #0
34006ab4:	d03c      	beq.n	34006b30 <HAL_RCC_OscConfig+0x588>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
34006ab6:	687b      	ldr	r3, [r7, #4]
34006ab8:	699b      	ldr	r3, [r3, #24]
34006aba:	2b00      	cmp	r3, #0
34006abc:	d008      	beq.n	34006ad0 <HAL_RCC_OscConfig+0x528>
34006abe:	687b      	ldr	r3, [r7, #4]
34006ac0:	699b      	ldr	r3, [r3, #24]
34006ac2:	2b01      	cmp	r3, #1
34006ac4:	d004      	beq.n	34006ad0 <HAL_RCC_OscConfig+0x528>
34006ac6:	f240 2155 	movw	r1, #597	@ 0x255
34006aca:	4811      	ldr	r0, [pc, #68]	@ (34006b10 <HAL_RCC_OscConfig+0x568>)
34006acc:	f7fa feaa 	bl	34001824 <assert_failed>

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34006ad0:	687b      	ldr	r3, [r7, #4]
34006ad2:	699b      	ldr	r3, [r3, #24]
34006ad4:	2b00      	cmp	r3, #0
34006ad6:	d014      	beq.n	34006b02 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
34006ad8:	f7ff fbe0 	bl	3400629c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006adc:	f7fc ffd2 	bl	34003a84 <HAL_GetTick>
34006ae0:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
34006ae2:	e008      	b.n	34006af6 <HAL_RCC_OscConfig+0x54e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34006ae4:	f7fc ffce 	bl	34003a84 <HAL_GetTick>
34006ae8:	4602      	mov	r2, r0
34006aea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006aec:	1ad3      	subs	r3, r2, r3
34006aee:	2b01      	cmp	r3, #1
34006af0:	d901      	bls.n	34006af6 <HAL_RCC_OscConfig+0x54e>
        {
          return HAL_TIMEOUT;
34006af2:	2303      	movs	r3, #3
34006af4:	e272      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() == 0U)
34006af6:	f7ff fbef 	bl	340062d8 <LL_RCC_LSI_IsReady>
34006afa:	4603      	mov	r3, r0
34006afc:	2b00      	cmp	r3, #0
34006afe:	d0f1      	beq.n	34006ae4 <HAL_RCC_OscConfig+0x53c>
34006b00:	e016      	b.n	34006b30 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
34006b02:	f7ff fbd9 	bl	340062b8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006b06:	f7fc ffbd 	bl	34003a84 <HAL_GetTick>
34006b0a:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
34006b0c:	e00b      	b.n	34006b26 <HAL_RCC_OscConfig+0x57e>
34006b0e:	bf00      	nop
34006b10:	3401ce18 	.word	0x3401ce18
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34006b14:	f7fc ffb6 	bl	34003a84 <HAL_GetTick>
34006b18:	4602      	mov	r2, r0
34006b1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006b1c:	1ad3      	subs	r3, r2, r3
34006b1e:	2b01      	cmp	r3, #1
34006b20:	d901      	bls.n	34006b26 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
34006b22:	2303      	movs	r3, #3
34006b24:	e25a      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() != 0U)
34006b26:	f7ff fbd7 	bl	340062d8 <LL_RCC_LSI_IsReady>
34006b2a:	4603      	mov	r3, r0
34006b2c:	2b00      	cmp	r3, #0
34006b2e:	d1f1      	bne.n	34006b14 <HAL_RCC_OscConfig+0x56c>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34006b30:	687b      	ldr	r3, [r7, #4]
34006b32:	681b      	ldr	r3, [r3, #0]
34006b34:	f003 0304 	and.w	r3, r3, #4
34006b38:	2b00      	cmp	r3, #0
34006b3a:	f000 80a4 	beq.w	34006c86 <HAL_RCC_OscConfig+0x6de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
34006b3e:	687b      	ldr	r3, [r7, #4]
34006b40:	689b      	ldr	r3, [r3, #8]
34006b42:	2b00      	cmp	r3, #0
34006b44:	d013      	beq.n	34006b6e <HAL_RCC_OscConfig+0x5c6>
34006b46:	687b      	ldr	r3, [r7, #4]
34006b48:	689b      	ldr	r3, [r3, #8]
34006b4a:	2b02      	cmp	r3, #2
34006b4c:	d00f      	beq.n	34006b6e <HAL_RCC_OscConfig+0x5c6>
34006b4e:	687b      	ldr	r3, [r7, #4]
34006b50:	689b      	ldr	r3, [r3, #8]
34006b52:	f248 0202 	movw	r2, #32770	@ 0x8002
34006b56:	4293      	cmp	r3, r2
34006b58:	d009      	beq.n	34006b6e <HAL_RCC_OscConfig+0x5c6>
34006b5a:	687b      	ldr	r3, [r7, #4]
34006b5c:	689b      	ldr	r3, [r3, #8]
34006b5e:	4a9b      	ldr	r2, [pc, #620]	@ (34006dcc <HAL_RCC_OscConfig+0x824>)
34006b60:	4293      	cmp	r3, r2
34006b62:	d004      	beq.n	34006b6e <HAL_RCC_OscConfig+0x5c6>
34006b64:	f44f 7120 	mov.w	r1, #640	@ 0x280
34006b68:	4899      	ldr	r0, [pc, #612]	@ (34006dd0 <HAL_RCC_OscConfig+0x828>)
34006b6a:	f7fa fe5b 	bl	34001824 <assert_failed>

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34006b6e:	687b      	ldr	r3, [r7, #4]
34006b70:	689b      	ldr	r3, [r3, #8]
34006b72:	2b02      	cmp	r3, #2
34006b74:	d104      	bne.n	34006b80 <HAL_RCC_OscConfig+0x5d8>
34006b76:	4b97      	ldr	r3, [pc, #604]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006b78:	2202      	movs	r2, #2
34006b7a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006b7e:	e055      	b.n	34006c2c <HAL_RCC_OscConfig+0x684>
34006b80:	687b      	ldr	r3, [r7, #4]
34006b82:	689b      	ldr	r3, [r3, #8]
34006b84:	2b00      	cmp	r3, #0
34006b86:	d112      	bne.n	34006bae <HAL_RCC_OscConfig+0x606>
34006b88:	4b92      	ldr	r3, [pc, #584]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006b8e:	461a      	mov	r2, r3
34006b90:	2302      	movs	r3, #2
34006b92:	6013      	str	r3, [r2, #0]
34006b94:	4b8f      	ldr	r3, [pc, #572]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006b98:	4a8e      	ldr	r2, [pc, #568]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006b9e:	6413      	str	r3, [r2, #64]	@ 0x40
34006ba0:	4b8c      	ldr	r3, [pc, #560]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006ba4:	4a8b      	ldr	r2, [pc, #556]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006ba6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34006baa:	6413      	str	r3, [r2, #64]	@ 0x40
34006bac:	e03e      	b.n	34006c2c <HAL_RCC_OscConfig+0x684>
34006bae:	687b      	ldr	r3, [r7, #4]
34006bb0:	689b      	ldr	r3, [r3, #8]
34006bb2:	f248 0202 	movw	r2, #32770	@ 0x8002
34006bb6:	4293      	cmp	r3, r2
34006bb8:	d110      	bne.n	34006bdc <HAL_RCC_OscConfig+0x634>
34006bba:	4b86      	ldr	r3, [pc, #536]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006bbe:	4a85      	ldr	r2, [pc, #532]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34006bc4:	6413      	str	r3, [r2, #64]	@ 0x40
34006bc6:	4b83      	ldr	r3, [pc, #524]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006bca:	4a82      	ldr	r2, [pc, #520]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006bcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006bd0:	6413      	str	r3, [r2, #64]	@ 0x40
34006bd2:	4b80      	ldr	r3, [pc, #512]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006bd4:	2202      	movs	r2, #2
34006bd6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006bda:	e027      	b.n	34006c2c <HAL_RCC_OscConfig+0x684>
34006bdc:	687b      	ldr	r3, [r7, #4]
34006bde:	689b      	ldr	r3, [r3, #8]
34006be0:	4a7a      	ldr	r2, [pc, #488]	@ (34006dcc <HAL_RCC_OscConfig+0x824>)
34006be2:	4293      	cmp	r3, r2
34006be4:	d110      	bne.n	34006c08 <HAL_RCC_OscConfig+0x660>
34006be6:	4b7b      	ldr	r3, [pc, #492]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006bea:	4a7a      	ldr	r2, [pc, #488]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34006bf0:	6413      	str	r3, [r2, #64]	@ 0x40
34006bf2:	4b78      	ldr	r3, [pc, #480]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006bf6:	4a77      	ldr	r2, [pc, #476]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34006bfc:	6413      	str	r3, [r2, #64]	@ 0x40
34006bfe:	4b75      	ldr	r3, [pc, #468]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006c00:	2202      	movs	r2, #2
34006c02:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006c06:	e011      	b.n	34006c2c <HAL_RCC_OscConfig+0x684>
34006c08:	4b72      	ldr	r3, [pc, #456]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006c0e:	461a      	mov	r2, r3
34006c10:	2302      	movs	r3, #2
34006c12:	6013      	str	r3, [r2, #0]
34006c14:	4b6f      	ldr	r3, [pc, #444]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006c18:	4a6e      	ldr	r2, [pc, #440]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006c1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34006c1e:	6413      	str	r3, [r2, #64]	@ 0x40
34006c20:	4b6c      	ldr	r3, [pc, #432]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006c24:	4a6b      	ldr	r2, [pc, #428]	@ (34006dd4 <HAL_RCC_OscConfig+0x82c>)
34006c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34006c2c:	687b      	ldr	r3, [r7, #4]
34006c2e:	689b      	ldr	r3, [r3, #8]
34006c30:	2b00      	cmp	r3, #0
34006c32:	d014      	beq.n	34006c5e <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006c34:	f7fc ff26 	bl	34003a84 <HAL_GetTick>
34006c38:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
34006c3a:	e00a      	b.n	34006c52 <HAL_RCC_OscConfig+0x6aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34006c3c:	f7fc ff22 	bl	34003a84 <HAL_GetTick>
34006c40:	4602      	mov	r2, r0
34006c42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006c44:	1ad3      	subs	r3, r2, r3
34006c46:	f241 3288 	movw	r2, #5000	@ 0x1388
34006c4a:	4293      	cmp	r3, r2
34006c4c:	d901      	bls.n	34006c52 <HAL_RCC_OscConfig+0x6aa>
        {
          return HAL_TIMEOUT;
34006c4e:	2303      	movs	r3, #3
34006c50:	e1c4      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() == 0U)
34006c52:	f7ff fb11 	bl	34006278 <LL_RCC_LSE_IsReady>
34006c56:	4603      	mov	r3, r0
34006c58:	2b00      	cmp	r3, #0
34006c5a:	d0ef      	beq.n	34006c3c <HAL_RCC_OscConfig+0x694>
34006c5c:	e013      	b.n	34006c86 <HAL_RCC_OscConfig+0x6de>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006c5e:	f7fc ff11 	bl	34003a84 <HAL_GetTick>
34006c62:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
34006c64:	e00a      	b.n	34006c7c <HAL_RCC_OscConfig+0x6d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34006c66:	f7fc ff0d 	bl	34003a84 <HAL_GetTick>
34006c6a:	4602      	mov	r2, r0
34006c6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006c6e:	1ad3      	subs	r3, r2, r3
34006c70:	f241 3288 	movw	r2, #5000	@ 0x1388
34006c74:	4293      	cmp	r3, r2
34006c76:	d901      	bls.n	34006c7c <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
34006c78:	2303      	movs	r3, #3
34006c7a:	e1af      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() != 0U)
34006c7c:	f7ff fafc 	bl	34006278 <LL_RCC_LSE_IsReady>
34006c80:	4603      	mov	r3, r0
34006c82:	2b00      	cmp	r3, #0
34006c84:	d1ef      	bne.n	34006c66 <HAL_RCC_OscConfig+0x6be>
    }
  }

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
34006c86:	687b      	ldr	r3, [r7, #4]
34006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006c8a:	2b00      	cmp	r3, #0
34006c8c:	d010      	beq.n	34006cb0 <HAL_RCC_OscConfig+0x708>
34006c8e:	687b      	ldr	r3, [r7, #4]
34006c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006c92:	2b01      	cmp	r3, #1
34006c94:	d00c      	beq.n	34006cb0 <HAL_RCC_OscConfig+0x708>
34006c96:	687b      	ldr	r3, [r7, #4]
34006c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006c9a:	2b02      	cmp	r3, #2
34006c9c:	d008      	beq.n	34006cb0 <HAL_RCC_OscConfig+0x708>
34006c9e:	687b      	ldr	r3, [r7, #4]
34006ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006ca2:	2b03      	cmp	r3, #3
34006ca4:	d004      	beq.n	34006cb0 <HAL_RCC_OscConfig+0x708>
34006ca6:	f240 21a5 	movw	r1, #677	@ 0x2a5
34006caa:	4849      	ldr	r0, [pc, #292]	@ (34006dd0 <HAL_RCC_OscConfig+0x828>)
34006cac:	f7fa fdba 	bl	34001824 <assert_failed>

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34006cb0:	687b      	ldr	r3, [r7, #4]
34006cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006cb4:	2b00      	cmp	r3, #0
34006cb6:	d04c      	beq.n	34006d52 <HAL_RCC_OscConfig+0x7aa>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34006cb8:	687b      	ldr	r3, [r7, #4]
34006cba:	3328      	adds	r3, #40	@ 0x28
34006cbc:	4619      	mov	r1, r3
34006cbe:	2000      	movs	r0, #0
34006cc0:	f001 f8e0 	bl	34007e84 <RCC_PLL_IsNewConfig>
34006cc4:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34006cc6:	f7ff fb3f 	bl	34006348 <LL_RCC_PLL1_IsReady>
34006cca:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
34006ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
34006cce:	2b01      	cmp	r3, #1
34006cd0:	d130      	bne.n	34006d34 <HAL_RCC_OscConfig+0x78c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34006cd2:	f7ff fc11 	bl	340064f8 <LL_RCC_IC1_GetSource>
34006cd6:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34006cd8:	f7ff fc2c 	bl	34006534 <LL_RCC_IC2_GetSource>
34006cdc:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34006cde:	f7ff fc47 	bl	34006570 <LL_RCC_IC6_GetSource>
34006ce2:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34006ce4:	f7ff fc52 	bl	3400658c <LL_RCC_IC11_GetSource>
34006ce8:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34006cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006cee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006cf2:	d104      	bne.n	34006cfe <HAL_RCC_OscConfig+0x756>
34006cf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
34006cf6:	2b00      	cmp	r3, #0
34006cf8:	d101      	bne.n	34006cfe <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
34006cfa:	2301      	movs	r3, #1
34006cfc:	e16e      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34006cfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006d02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006d06:	d10a      	bne.n	34006d1e <HAL_RCC_OscConfig+0x776>
34006d08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
34006d0a:	2b00      	cmp	r3, #0
34006d0c:	d005      	beq.n	34006d1a <HAL_RCC_OscConfig+0x772>
34006d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34006d10:	2b00      	cmp	r3, #0
34006d12:	d002      	beq.n	34006d1a <HAL_RCC_OscConfig+0x772>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34006d14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34006d16:	2b00      	cmp	r3, #0
34006d18:	d101      	bne.n	34006d1e <HAL_RCC_OscConfig+0x776>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
34006d1a:	2301      	movs	r3, #1
34006d1c:	e15e      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34006d1e:	687b      	ldr	r3, [r7, #4]
34006d20:	3328      	adds	r3, #40	@ 0x28
34006d22:	4619      	mov	r1, r3
34006d24:	2000      	movs	r0, #0
34006d26:	f000 fedd 	bl	34007ae4 <RCC_PLL_Config>
34006d2a:	4603      	mov	r3, r0
34006d2c:	2b00      	cmp	r3, #0
34006d2e:	d010      	beq.n	34006d52 <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
34006d30:	2301      	movs	r3, #1
34006d32:	e153      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34006d34:	687b      	ldr	r3, [r7, #4]
34006d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006d38:	2b02      	cmp	r3, #2
34006d3a:	d10a      	bne.n	34006d52 <HAL_RCC_OscConfig+0x7aa>
34006d3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
34006d3e:	2b00      	cmp	r3, #0
34006d40:	d107      	bne.n	34006d52 <HAL_RCC_OscConfig+0x7aa>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34006d42:	2000      	movs	r0, #0
34006d44:	f001 f872 	bl	34007e2c <RCC_PLL_Enable>
34006d48:	4603      	mov	r3, r0
34006d4a:	2b00      	cmp	r3, #0
34006d4c:	d001      	beq.n	34006d52 <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
34006d4e:	2301      	movs	r3, #1
34006d50:	e144      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
34006d52:	687b      	ldr	r3, [r7, #4]
34006d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006d56:	2b00      	cmp	r3, #0
34006d58:	d010      	beq.n	34006d7c <HAL_RCC_OscConfig+0x7d4>
34006d5a:	687b      	ldr	r3, [r7, #4]
34006d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006d5e:	2b01      	cmp	r3, #1
34006d60:	d00c      	beq.n	34006d7c <HAL_RCC_OscConfig+0x7d4>
34006d62:	687b      	ldr	r3, [r7, #4]
34006d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006d66:	2b02      	cmp	r3, #2
34006d68:	d008      	beq.n	34006d7c <HAL_RCC_OscConfig+0x7d4>
34006d6a:	687b      	ldr	r3, [r7, #4]
34006d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006d6e:	2b03      	cmp	r3, #3
34006d70:	d004      	beq.n	34006d7c <HAL_RCC_OscConfig+0x7d4>
34006d72:	f240 21d3 	movw	r1, #723	@ 0x2d3
34006d76:	4816      	ldr	r0, [pc, #88]	@ (34006dd0 <HAL_RCC_OscConfig+0x828>)
34006d78:	f7fa fd54 	bl	34001824 <assert_failed>

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34006d7c:	687b      	ldr	r3, [r7, #4]
34006d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006d80:	2b00      	cmp	r3, #0
34006d82:	d056      	beq.n	34006e32 <HAL_RCC_OscConfig+0x88a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34006d84:	687b      	ldr	r3, [r7, #4]
34006d86:	3344      	adds	r3, #68	@ 0x44
34006d88:	4619      	mov	r1, r3
34006d8a:	2001      	movs	r0, #1
34006d8c:	f001 f87a 	bl	34007e84 <RCC_PLL_IsNewConfig>
34006d90:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
34006d92:	f7ff fb0f 	bl	340063b4 <LL_RCC_PLL2_IsReady>
34006d96:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
34006d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34006d9a:	2b01      	cmp	r3, #1
34006d9c:	d13a      	bne.n	34006e14 <HAL_RCC_OscConfig+0x86c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34006d9e:	f7ff fbab 	bl	340064f8 <LL_RCC_IC1_GetSource>
34006da2:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34006da4:	f7ff fbc6 	bl	34006534 <LL_RCC_IC2_GetSource>
34006da8:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34006daa:	f7ff fbe1 	bl	34006570 <LL_RCC_IC6_GetSource>
34006dae:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34006db0:	f7ff fbec 	bl	3400658c <LL_RCC_IC11_GetSource>
34006db4:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34006db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006dba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006dbe:	d10b      	bne.n	34006dd8 <HAL_RCC_OscConfig+0x830>
34006dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34006dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006dc6:	d107      	bne.n	34006dd8 <HAL_RCC_OscConfig+0x830>
      {
        return HAL_ERROR;
34006dc8:	2301      	movs	r3, #1
34006dca:	e107      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
34006dcc:	00018002 	.word	0x00018002
34006dd0:	3401ce18 	.word	0x3401ce18
34006dd4:	56028000 	.word	0x56028000
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34006dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006ddc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006de0:	d10d      	bne.n	34006dfe <HAL_RCC_OscConfig+0x856>
34006de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34006de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006de8:	d007      	beq.n	34006dfa <HAL_RCC_OscConfig+0x852>
34006dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34006dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006df0:	d003      	beq.n	34006dfa <HAL_RCC_OscConfig+0x852>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34006df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34006df4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006df8:	d101      	bne.n	34006dfe <HAL_RCC_OscConfig+0x856>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
34006dfa:	2301      	movs	r3, #1
34006dfc:	e0ee      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34006dfe:	687b      	ldr	r3, [r7, #4]
34006e00:	3344      	adds	r3, #68	@ 0x44
34006e02:	4619      	mov	r1, r3
34006e04:	2001      	movs	r0, #1
34006e06:	f000 fe6d 	bl	34007ae4 <RCC_PLL_Config>
34006e0a:	4603      	mov	r3, r0
34006e0c:	2b00      	cmp	r3, #0
34006e0e:	d010      	beq.n	34006e32 <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
34006e10:	2301      	movs	r3, #1
34006e12:	e0e3      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34006e14:	687b      	ldr	r3, [r7, #4]
34006e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006e18:	2b02      	cmp	r3, #2
34006e1a:	d10a      	bne.n	34006e32 <HAL_RCC_OscConfig+0x88a>
34006e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34006e1e:	2b00      	cmp	r3, #0
34006e20:	d107      	bne.n	34006e32 <HAL_RCC_OscConfig+0x88a>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34006e22:	2001      	movs	r0, #1
34006e24:	f001 f802 	bl	34007e2c <RCC_PLL_Enable>
34006e28:	4603      	mov	r3, r0
34006e2a:	2b00      	cmp	r3, #0
34006e2c:	d001      	beq.n	34006e32 <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
34006e2e:	2301      	movs	r3, #1
34006e30:	e0d4      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
34006e32:	687b      	ldr	r3, [r7, #4]
34006e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006e36:	2b00      	cmp	r3, #0
34006e38:	d010      	beq.n	34006e5c <HAL_RCC_OscConfig+0x8b4>
34006e3a:	687b      	ldr	r3, [r7, #4]
34006e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006e3e:	2b01      	cmp	r3, #1
34006e40:	d00c      	beq.n	34006e5c <HAL_RCC_OscConfig+0x8b4>
34006e42:	687b      	ldr	r3, [r7, #4]
34006e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006e46:	2b02      	cmp	r3, #2
34006e48:	d008      	beq.n	34006e5c <HAL_RCC_OscConfig+0x8b4>
34006e4a:	687b      	ldr	r3, [r7, #4]
34006e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006e4e:	2b03      	cmp	r3, #3
34006e50:	d004      	beq.n	34006e5c <HAL_RCC_OscConfig+0x8b4>
34006e52:	f240 3101 	movw	r1, #769	@ 0x301
34006e56:	4863      	ldr	r0, [pc, #396]	@ (34006fe4 <HAL_RCC_OscConfig+0xa3c>)
34006e58:	f7fa fce4 	bl	34001824 <assert_failed>

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34006e5c:	687b      	ldr	r3, [r7, #4]
34006e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006e60:	2b00      	cmp	r3, #0
34006e62:	d050      	beq.n	34006f06 <HAL_RCC_OscConfig+0x95e>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34006e64:	687b      	ldr	r3, [r7, #4]
34006e66:	3360      	adds	r3, #96	@ 0x60
34006e68:	4619      	mov	r1, r3
34006e6a:	2002      	movs	r0, #2
34006e6c:	f001 f80a 	bl	34007e84 <RCC_PLL_IsNewConfig>
34006e70:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34006e72:	f7ff fa69 	bl	34006348 <LL_RCC_PLL1_IsReady>
34006e76:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
34006e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34006e7a:	2b01      	cmp	r3, #1
34006e7c:	d134      	bne.n	34006ee8 <HAL_RCC_OscConfig+0x940>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34006e7e:	f7ff fb3b 	bl	340064f8 <LL_RCC_IC1_GetSource>
34006e82:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34006e84:	f7ff fb56 	bl	34006534 <LL_RCC_IC2_GetSource>
34006e88:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34006e8a:	f7ff fb71 	bl	34006570 <LL_RCC_IC6_GetSource>
34006e8e:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34006e90:	f7ff fb7c 	bl	3400658c <LL_RCC_IC11_GetSource>
34006e94:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34006e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006e9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006e9e:	d105      	bne.n	34006eac <HAL_RCC_OscConfig+0x904>
34006ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34006ea2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006ea6:	d101      	bne.n	34006eac <HAL_RCC_OscConfig+0x904>
      {
        return HAL_ERROR;
34006ea8:	2301      	movs	r3, #1
34006eaa:	e097      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34006eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006eb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006eb4:	d10d      	bne.n	34006ed2 <HAL_RCC_OscConfig+0x92a>
34006eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34006eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006ebc:	d007      	beq.n	34006ece <HAL_RCC_OscConfig+0x926>
34006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34006ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006ec4:	d003      	beq.n	34006ece <HAL_RCC_OscConfig+0x926>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34006ec6:	6a3b      	ldr	r3, [r7, #32]
34006ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006ecc:	d101      	bne.n	34006ed2 <HAL_RCC_OscConfig+0x92a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
34006ece:	2301      	movs	r3, #1
34006ed0:	e084      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34006ed2:	687b      	ldr	r3, [r7, #4]
34006ed4:	3360      	adds	r3, #96	@ 0x60
34006ed6:	4619      	mov	r1, r3
34006ed8:	2002      	movs	r0, #2
34006eda:	f000 fe03 	bl	34007ae4 <RCC_PLL_Config>
34006ede:	4603      	mov	r3, r0
34006ee0:	2b00      	cmp	r3, #0
34006ee2:	d010      	beq.n	34006f06 <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
34006ee4:	2301      	movs	r3, #1
34006ee6:	e079      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34006ee8:	687b      	ldr	r3, [r7, #4]
34006eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006eec:	2b02      	cmp	r3, #2
34006eee:	d10a      	bne.n	34006f06 <HAL_RCC_OscConfig+0x95e>
34006ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34006ef2:	2b00      	cmp	r3, #0
34006ef4:	d107      	bne.n	34006f06 <HAL_RCC_OscConfig+0x95e>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34006ef6:	2002      	movs	r0, #2
34006ef8:	f000 ff98 	bl	34007e2c <RCC_PLL_Enable>
34006efc:	4603      	mov	r3, r0
34006efe:	2b00      	cmp	r3, #0
34006f00:	d001      	beq.n	34006f06 <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
34006f02:	2301      	movs	r3, #1
34006f04:	e06a      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
34006f06:	687b      	ldr	r3, [r7, #4]
34006f08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006f0a:	2b00      	cmp	r3, #0
34006f0c:	d010      	beq.n	34006f30 <HAL_RCC_OscConfig+0x988>
34006f0e:	687b      	ldr	r3, [r7, #4]
34006f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006f12:	2b01      	cmp	r3, #1
34006f14:	d00c      	beq.n	34006f30 <HAL_RCC_OscConfig+0x988>
34006f16:	687b      	ldr	r3, [r7, #4]
34006f18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006f1a:	2b02      	cmp	r3, #2
34006f1c:	d008      	beq.n	34006f30 <HAL_RCC_OscConfig+0x988>
34006f1e:	687b      	ldr	r3, [r7, #4]
34006f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006f22:	2b03      	cmp	r3, #3
34006f24:	d004      	beq.n	34006f30 <HAL_RCC_OscConfig+0x988>
34006f26:	f240 312e 	movw	r1, #814	@ 0x32e
34006f2a:	482e      	ldr	r0, [pc, #184]	@ (34006fe4 <HAL_RCC_OscConfig+0xa3c>)
34006f2c:	f7fa fc7a 	bl	34001824 <assert_failed>

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34006f30:	687b      	ldr	r3, [r7, #4]
34006f32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006f34:	2b00      	cmp	r3, #0
34006f36:	d050      	beq.n	34006fda <HAL_RCC_OscConfig+0xa32>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34006f38:	687b      	ldr	r3, [r7, #4]
34006f3a:	337c      	adds	r3, #124	@ 0x7c
34006f3c:	4619      	mov	r1, r3
34006f3e:	2003      	movs	r0, #3
34006f40:	f000 ffa0 	bl	34007e84 <RCC_PLL_IsNewConfig>
34006f44:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34006f46:	f7ff faa1 	bl	3400648c <LL_RCC_PLL4_IsReady>
34006f4a:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
34006f4c:	69fb      	ldr	r3, [r7, #28]
34006f4e:	2b01      	cmp	r3, #1
34006f50:	d134      	bne.n	34006fbc <HAL_RCC_OscConfig+0xa14>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34006f52:	f7ff fad1 	bl	340064f8 <LL_RCC_IC1_GetSource>
34006f56:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34006f58:	f7ff faec 	bl	34006534 <LL_RCC_IC2_GetSource>
34006f5c:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34006f5e:	f7ff fb07 	bl	34006570 <LL_RCC_IC6_GetSource>
34006f62:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34006f64:	f7ff fb12 	bl	3400658c <LL_RCC_IC11_GetSource>
34006f68:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34006f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006f6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006f72:	d105      	bne.n	34006f80 <HAL_RCC_OscConfig+0x9d8>
34006f74:	697b      	ldr	r3, [r7, #20]
34006f76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006f7a:	d101      	bne.n	34006f80 <HAL_RCC_OscConfig+0x9d8>
      {
        return HAL_ERROR;
34006f7c:	2301      	movs	r3, #1
34006f7e:	e02d      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34006f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006f84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006f88:	d10d      	bne.n	34006fa6 <HAL_RCC_OscConfig+0x9fe>
34006f8a:	693b      	ldr	r3, [r7, #16]
34006f8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006f90:	d007      	beq.n	34006fa2 <HAL_RCC_OscConfig+0x9fa>
34006f92:	68fb      	ldr	r3, [r7, #12]
34006f94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006f98:	d003      	beq.n	34006fa2 <HAL_RCC_OscConfig+0x9fa>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34006f9a:	68bb      	ldr	r3, [r7, #8]
34006f9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006fa0:	d101      	bne.n	34006fa6 <HAL_RCC_OscConfig+0x9fe>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
34006fa2:	2301      	movs	r3, #1
34006fa4:	e01a      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34006fa6:	687b      	ldr	r3, [r7, #4]
34006fa8:	337c      	adds	r3, #124	@ 0x7c
34006faa:	4619      	mov	r1, r3
34006fac:	2003      	movs	r0, #3
34006fae:	f000 fd99 	bl	34007ae4 <RCC_PLL_Config>
34006fb2:	4603      	mov	r3, r0
34006fb4:	2b00      	cmp	r3, #0
34006fb6:	d010      	beq.n	34006fda <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
34006fb8:	2301      	movs	r3, #1
34006fba:	e00f      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34006fbc:	687b      	ldr	r3, [r7, #4]
34006fbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006fc0:	2b02      	cmp	r3, #2
34006fc2:	d10a      	bne.n	34006fda <HAL_RCC_OscConfig+0xa32>
34006fc4:	69bb      	ldr	r3, [r7, #24]
34006fc6:	2b00      	cmp	r3, #0
34006fc8:	d107      	bne.n	34006fda <HAL_RCC_OscConfig+0xa32>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34006fca:	2003      	movs	r0, #3
34006fcc:	f000 ff2e 	bl	34007e2c <RCC_PLL_Enable>
34006fd0:	4603      	mov	r3, r0
34006fd2:	2b00      	cmp	r3, #0
34006fd4:	d001      	beq.n	34006fda <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
34006fd6:	2301      	movs	r3, #1
34006fd8:	e000      	b.n	34006fdc <HAL_RCC_OscConfig+0xa34>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
34006fda:	2300      	movs	r3, #0
}
34006fdc:	4618      	mov	r0, r3
34006fde:	3788      	adds	r7, #136	@ 0x88
34006fe0:	46bd      	mov	sp, r7
34006fe2:	bd80      	pop	{r7, pc}
34006fe4:	3401ce18 	.word	0x3401ce18

34006fe8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34006fe8:	b580      	push	{r7, lr}
34006fea:	b084      	sub	sp, #16
34006fec:	af00      	add	r7, sp, #0
34006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34006ff0:	687b      	ldr	r3, [r7, #4]
34006ff2:	2b00      	cmp	r3, #0
34006ff4:	d102      	bne.n	34006ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
34006ff6:	2301      	movs	r3, #1
34006ff8:	f000 bc6d 	b.w	340078d6 <HAL_RCC_ClockConfig+0x8ee>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34006ffc:	687b      	ldr	r3, [r7, #4]
34006ffe:	681b      	ldr	r3, [r3, #0]
34007000:	2b7f      	cmp	r3, #127	@ 0x7f
34007002:	d904      	bls.n	3400700e <HAL_RCC_ClockConfig+0x26>
34007004:	f240 317e 	movw	r1, #894	@ 0x37e
34007008:	4880      	ldr	r0, [pc, #512]	@ (3400720c <HAL_RCC_ClockConfig+0x224>)
3400700a:	f7fa fc0b 	bl	34001824 <assert_failed>

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
3400700e:	687b      	ldr	r3, [r7, #4]
34007010:	681b      	ldr	r3, [r3, #0]
34007012:	f003 0308 	and.w	r3, r3, #8
34007016:	2b00      	cmp	r3, #0
34007018:	d035      	beq.n	34007086 <HAL_RCC_ClockConfig+0x9e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
3400701a:	687b      	ldr	r3, [r7, #4]
3400701c:	691b      	ldr	r3, [r3, #16]
3400701e:	2b00      	cmp	r3, #0
34007020:	d020      	beq.n	34007064 <HAL_RCC_ClockConfig+0x7c>
34007022:	687b      	ldr	r3, [r7, #4]
34007024:	691b      	ldr	r3, [r3, #16]
34007026:	2b01      	cmp	r3, #1
34007028:	d01c      	beq.n	34007064 <HAL_RCC_ClockConfig+0x7c>
3400702a:	687b      	ldr	r3, [r7, #4]
3400702c:	691b      	ldr	r3, [r3, #16]
3400702e:	2b02      	cmp	r3, #2
34007030:	d018      	beq.n	34007064 <HAL_RCC_ClockConfig+0x7c>
34007032:	687b      	ldr	r3, [r7, #4]
34007034:	691b      	ldr	r3, [r3, #16]
34007036:	2b03      	cmp	r3, #3
34007038:	d014      	beq.n	34007064 <HAL_RCC_ClockConfig+0x7c>
3400703a:	687b      	ldr	r3, [r7, #4]
3400703c:	691b      	ldr	r3, [r3, #16]
3400703e:	2b04      	cmp	r3, #4
34007040:	d010      	beq.n	34007064 <HAL_RCC_ClockConfig+0x7c>
34007042:	687b      	ldr	r3, [r7, #4]
34007044:	691b      	ldr	r3, [r3, #16]
34007046:	2b05      	cmp	r3, #5
34007048:	d00c      	beq.n	34007064 <HAL_RCC_ClockConfig+0x7c>
3400704a:	687b      	ldr	r3, [r7, #4]
3400704c:	691b      	ldr	r3, [r3, #16]
3400704e:	2b06      	cmp	r3, #6
34007050:	d008      	beq.n	34007064 <HAL_RCC_ClockConfig+0x7c>
34007052:	687b      	ldr	r3, [r7, #4]
34007054:	691b      	ldr	r3, [r3, #16]
34007056:	2b07      	cmp	r3, #7
34007058:	d004      	beq.n	34007064 <HAL_RCC_ClockConfig+0x7c>
3400705a:	f240 3185 	movw	r1, #901	@ 0x385
3400705e:	486b      	ldr	r0, [pc, #428]	@ (3400720c <HAL_RCC_ClockConfig+0x224>)
34007060:	f7fa fbe0 	bl	34001824 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34007064:	687b      	ldr	r3, [r7, #4]
34007066:	691a      	ldr	r2, [r3, #16]
34007068:	4b69      	ldr	r3, [pc, #420]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
3400706a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400706c:	f003 0307 	and.w	r3, r3, #7
34007070:	429a      	cmp	r2, r3
34007072:	d908      	bls.n	34007086 <HAL_RCC_ClockConfig+0x9e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34007074:	4b66      	ldr	r3, [pc, #408]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
34007076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007078:	f023 0207 	bic.w	r2, r3, #7
3400707c:	687b      	ldr	r3, [r7, #4]
3400707e:	691b      	ldr	r3, [r3, #16]
34007080:	4963      	ldr	r1, [pc, #396]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
34007082:	4313      	orrs	r3, r2
34007084:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34007086:	687b      	ldr	r3, [r7, #4]
34007088:	681b      	ldr	r3, [r3, #0]
3400708a:	f003 0310 	and.w	r3, r3, #16
3400708e:	2b00      	cmp	r3, #0
34007090:	d035      	beq.n	340070fe <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34007092:	687b      	ldr	r3, [r7, #4]
34007094:	695b      	ldr	r3, [r3, #20]
34007096:	2b00      	cmp	r3, #0
34007098:	d020      	beq.n	340070dc <HAL_RCC_ClockConfig+0xf4>
3400709a:	687b      	ldr	r3, [r7, #4]
3400709c:	695b      	ldr	r3, [r3, #20]
3400709e:	2b10      	cmp	r3, #16
340070a0:	d01c      	beq.n	340070dc <HAL_RCC_ClockConfig+0xf4>
340070a2:	687b      	ldr	r3, [r7, #4]
340070a4:	695b      	ldr	r3, [r3, #20]
340070a6:	2b20      	cmp	r3, #32
340070a8:	d018      	beq.n	340070dc <HAL_RCC_ClockConfig+0xf4>
340070aa:	687b      	ldr	r3, [r7, #4]
340070ac:	695b      	ldr	r3, [r3, #20]
340070ae:	2b30      	cmp	r3, #48	@ 0x30
340070b0:	d014      	beq.n	340070dc <HAL_RCC_ClockConfig+0xf4>
340070b2:	687b      	ldr	r3, [r7, #4]
340070b4:	695b      	ldr	r3, [r3, #20]
340070b6:	2b40      	cmp	r3, #64	@ 0x40
340070b8:	d010      	beq.n	340070dc <HAL_RCC_ClockConfig+0xf4>
340070ba:	687b      	ldr	r3, [r7, #4]
340070bc:	695b      	ldr	r3, [r3, #20]
340070be:	2b50      	cmp	r3, #80	@ 0x50
340070c0:	d00c      	beq.n	340070dc <HAL_RCC_ClockConfig+0xf4>
340070c2:	687b      	ldr	r3, [r7, #4]
340070c4:	695b      	ldr	r3, [r3, #20]
340070c6:	2b60      	cmp	r3, #96	@ 0x60
340070c8:	d008      	beq.n	340070dc <HAL_RCC_ClockConfig+0xf4>
340070ca:	687b      	ldr	r3, [r7, #4]
340070cc:	695b      	ldr	r3, [r3, #20]
340070ce:	2b70      	cmp	r3, #112	@ 0x70
340070d0:	d004      	beq.n	340070dc <HAL_RCC_ClockConfig+0xf4>
340070d2:	f240 318f 	movw	r1, #911	@ 0x38f
340070d6:	484d      	ldr	r0, [pc, #308]	@ (3400720c <HAL_RCC_ClockConfig+0x224>)
340070d8:	f7fa fba4 	bl	34001824 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
340070dc:	687b      	ldr	r3, [r7, #4]
340070de:	695a      	ldr	r2, [r3, #20]
340070e0:	4b4b      	ldr	r3, [pc, #300]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
340070e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340070e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
340070e8:	429a      	cmp	r2, r3
340070ea:	d908      	bls.n	340070fe <HAL_RCC_ClockConfig+0x116>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
340070ec:	4b48      	ldr	r3, [pc, #288]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
340070ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340070f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
340070f4:	687b      	ldr	r3, [r7, #4]
340070f6:	695b      	ldr	r3, [r3, #20]
340070f8:	4945      	ldr	r1, [pc, #276]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
340070fa:	4313      	orrs	r3, r2
340070fc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
340070fe:	687b      	ldr	r3, [r7, #4]
34007100:	681b      	ldr	r3, [r3, #0]
34007102:	f003 0320 	and.w	r3, r3, #32
34007106:	2b00      	cmp	r3, #0
34007108:	d03c      	beq.n	34007184 <HAL_RCC_ClockConfig+0x19c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
3400710a:	687b      	ldr	r3, [r7, #4]
3400710c:	699b      	ldr	r3, [r3, #24]
3400710e:	2b00      	cmp	r3, #0
34007110:	d027      	beq.n	34007162 <HAL_RCC_ClockConfig+0x17a>
34007112:	687b      	ldr	r3, [r7, #4]
34007114:	699b      	ldr	r3, [r3, #24]
34007116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400711a:	d022      	beq.n	34007162 <HAL_RCC_ClockConfig+0x17a>
3400711c:	687b      	ldr	r3, [r7, #4]
3400711e:	699b      	ldr	r3, [r3, #24]
34007120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34007124:	d01d      	beq.n	34007162 <HAL_RCC_ClockConfig+0x17a>
34007126:	687b      	ldr	r3, [r7, #4]
34007128:	699b      	ldr	r3, [r3, #24]
3400712a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3400712e:	d018      	beq.n	34007162 <HAL_RCC_ClockConfig+0x17a>
34007130:	687b      	ldr	r3, [r7, #4]
34007132:	699b      	ldr	r3, [r3, #24]
34007134:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34007138:	d013      	beq.n	34007162 <HAL_RCC_ClockConfig+0x17a>
3400713a:	687b      	ldr	r3, [r7, #4]
3400713c:	699b      	ldr	r3, [r3, #24]
3400713e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34007142:	d00e      	beq.n	34007162 <HAL_RCC_ClockConfig+0x17a>
34007144:	687b      	ldr	r3, [r7, #4]
34007146:	699b      	ldr	r3, [r3, #24]
34007148:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
3400714c:	d009      	beq.n	34007162 <HAL_RCC_ClockConfig+0x17a>
3400714e:	687b      	ldr	r3, [r7, #4]
34007150:	699b      	ldr	r3, [r3, #24]
34007152:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
34007156:	d004      	beq.n	34007162 <HAL_RCC_ClockConfig+0x17a>
34007158:	f240 3199 	movw	r1, #921	@ 0x399
3400715c:	482b      	ldr	r0, [pc, #172]	@ (3400720c <HAL_RCC_ClockConfig+0x224>)
3400715e:	f7fa fb61 	bl	34001824 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34007162:	687b      	ldr	r3, [r7, #4]
34007164:	699a      	ldr	r2, [r3, #24]
34007166:	4b2a      	ldr	r3, [pc, #168]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
34007168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400716a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
3400716e:	429a      	cmp	r2, r3
34007170:	d908      	bls.n	34007184 <HAL_RCC_ClockConfig+0x19c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34007172:	4b27      	ldr	r3, [pc, #156]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
34007174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007176:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
3400717a:	687b      	ldr	r3, [r7, #4]
3400717c:	699b      	ldr	r3, [r3, #24]
3400717e:	4924      	ldr	r1, [pc, #144]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
34007180:	4313      	orrs	r3, r2
34007182:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34007184:	687b      	ldr	r3, [r7, #4]
34007186:	681b      	ldr	r3, [r3, #0]
34007188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400718c:	2b00      	cmp	r3, #0
3400718e:	d041      	beq.n	34007214 <HAL_RCC_ClockConfig+0x22c>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34007190:	687b      	ldr	r3, [r7, #4]
34007192:	69db      	ldr	r3, [r3, #28]
34007194:	2b00      	cmp	r3, #0
34007196:	d027      	beq.n	340071e8 <HAL_RCC_ClockConfig+0x200>
34007198:	687b      	ldr	r3, [r7, #4]
3400719a:	69db      	ldr	r3, [r3, #28]
3400719c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340071a0:	d022      	beq.n	340071e8 <HAL_RCC_ClockConfig+0x200>
340071a2:	687b      	ldr	r3, [r7, #4]
340071a4:	69db      	ldr	r3, [r3, #28]
340071a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340071aa:	d01d      	beq.n	340071e8 <HAL_RCC_ClockConfig+0x200>
340071ac:	687b      	ldr	r3, [r7, #4]
340071ae:	69db      	ldr	r3, [r3, #28]
340071b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340071b4:	d018      	beq.n	340071e8 <HAL_RCC_ClockConfig+0x200>
340071b6:	687b      	ldr	r3, [r7, #4]
340071b8:	69db      	ldr	r3, [r3, #28]
340071ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340071be:	d013      	beq.n	340071e8 <HAL_RCC_ClockConfig+0x200>
340071c0:	687b      	ldr	r3, [r7, #4]
340071c2:	69db      	ldr	r3, [r3, #28]
340071c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340071c8:	d00e      	beq.n	340071e8 <HAL_RCC_ClockConfig+0x200>
340071ca:	687b      	ldr	r3, [r7, #4]
340071cc:	69db      	ldr	r3, [r3, #28]
340071ce:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340071d2:	d009      	beq.n	340071e8 <HAL_RCC_ClockConfig+0x200>
340071d4:	687b      	ldr	r3, [r7, #4]
340071d6:	69db      	ldr	r3, [r3, #28]
340071d8:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
340071dc:	d004      	beq.n	340071e8 <HAL_RCC_ClockConfig+0x200>
340071de:	f240 31a3 	movw	r1, #931	@ 0x3a3
340071e2:	480a      	ldr	r0, [pc, #40]	@ (3400720c <HAL_RCC_ClockConfig+0x224>)
340071e4:	f7fa fb1e 	bl	34001824 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
340071e8:	687b      	ldr	r3, [r7, #4]
340071ea:	69da      	ldr	r2, [r3, #28]
340071ec:	4b08      	ldr	r3, [pc, #32]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
340071ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340071f0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
340071f4:	429a      	cmp	r2, r3
340071f6:	d90d      	bls.n	34007214 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
340071f8:	4b05      	ldr	r3, [pc, #20]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
340071fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340071fc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34007200:	687b      	ldr	r3, [r7, #4]
34007202:	69db      	ldr	r3, [r3, #28]
34007204:	4902      	ldr	r1, [pc, #8]	@ (34007210 <HAL_RCC_ClockConfig+0x228>)
34007206:	4313      	orrs	r3, r2
34007208:	624b      	str	r3, [r1, #36]	@ 0x24
3400720a:	e003      	b.n	34007214 <HAL_RCC_ClockConfig+0x22c>
3400720c:	3401ce18 	.word	0x3401ce18
34007210:	56028000 	.word	0x56028000
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34007214:	687b      	ldr	r3, [r7, #4]
34007216:	681b      	ldr	r3, [r3, #0]
34007218:	f003 0304 	and.w	r3, r3, #4
3400721c:	2b00      	cmp	r3, #0
3400721e:	d03c      	beq.n	3400729a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34007220:	687b      	ldr	r3, [r7, #4]
34007222:	68db      	ldr	r3, [r3, #12]
34007224:	2b00      	cmp	r3, #0
34007226:	d027      	beq.n	34007278 <HAL_RCC_ClockConfig+0x290>
34007228:	687b      	ldr	r3, [r7, #4]
3400722a:	68db      	ldr	r3, [r3, #12]
3400722c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34007230:	d022      	beq.n	34007278 <HAL_RCC_ClockConfig+0x290>
34007232:	687b      	ldr	r3, [r7, #4]
34007234:	68db      	ldr	r3, [r3, #12]
34007236:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400723a:	d01d      	beq.n	34007278 <HAL_RCC_ClockConfig+0x290>
3400723c:	687b      	ldr	r3, [r7, #4]
3400723e:	68db      	ldr	r3, [r3, #12]
34007240:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007244:	d018      	beq.n	34007278 <HAL_RCC_ClockConfig+0x290>
34007246:	687b      	ldr	r3, [r7, #4]
34007248:	68db      	ldr	r3, [r3, #12]
3400724a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3400724e:	d013      	beq.n	34007278 <HAL_RCC_ClockConfig+0x290>
34007250:	687b      	ldr	r3, [r7, #4]
34007252:	68db      	ldr	r3, [r3, #12]
34007254:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
34007258:	d00e      	beq.n	34007278 <HAL_RCC_ClockConfig+0x290>
3400725a:	687b      	ldr	r3, [r7, #4]
3400725c:	68db      	ldr	r3, [r3, #12]
3400725e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
34007262:	d009      	beq.n	34007278 <HAL_RCC_ClockConfig+0x290>
34007264:	687b      	ldr	r3, [r7, #4]
34007266:	68db      	ldr	r3, [r3, #12]
34007268:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
3400726c:	d004      	beq.n	34007278 <HAL_RCC_ClockConfig+0x290>
3400726e:	f240 31ad 	movw	r1, #941	@ 0x3ad
34007272:	4874      	ldr	r0, [pc, #464]	@ (34007444 <HAL_RCC_ClockConfig+0x45c>)
34007274:	f7fa fad6 	bl	34001824 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34007278:	687b      	ldr	r3, [r7, #4]
3400727a:	68da      	ldr	r2, [r3, #12]
3400727c:	4b72      	ldr	r3, [pc, #456]	@ (34007448 <HAL_RCC_ClockConfig+0x460>)
3400727e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007280:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34007284:	429a      	cmp	r2, r3
34007286:	d908      	bls.n	3400729a <HAL_RCC_ClockConfig+0x2b2>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34007288:	4b6f      	ldr	r3, [pc, #444]	@ (34007448 <HAL_RCC_ClockConfig+0x460>)
3400728a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400728c:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34007290:	687b      	ldr	r3, [r7, #4]
34007292:	68db      	ldr	r3, [r3, #12]
34007294:	496c      	ldr	r1, [pc, #432]	@ (34007448 <HAL_RCC_ClockConfig+0x460>)
34007296:	4313      	orrs	r3, r2
34007298:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
3400729a:	687b      	ldr	r3, [r7, #4]
3400729c:	681b      	ldr	r3, [r3, #0]
3400729e:	f003 0301 	and.w	r3, r3, #1
340072a2:	2b00      	cmp	r3, #0
340072a4:	f000 80a2 	beq.w	340073ec <HAL_RCC_ClockConfig+0x404>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
340072a8:	687b      	ldr	r3, [r7, #4]
340072aa:	685b      	ldr	r3, [r3, #4]
340072ac:	2b00      	cmp	r3, #0
340072ae:	d013      	beq.n	340072d8 <HAL_RCC_ClockConfig+0x2f0>
340072b0:	687b      	ldr	r3, [r7, #4]
340072b2:	685b      	ldr	r3, [r3, #4]
340072b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340072b8:	d00e      	beq.n	340072d8 <HAL_RCC_ClockConfig+0x2f0>
340072ba:	687b      	ldr	r3, [r7, #4]
340072bc:	685b      	ldr	r3, [r3, #4]
340072be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340072c2:	d009      	beq.n	340072d8 <HAL_RCC_ClockConfig+0x2f0>
340072c4:	687b      	ldr	r3, [r7, #4]
340072c6:	685b      	ldr	r3, [r3, #4]
340072c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340072cc:	d004      	beq.n	340072d8 <HAL_RCC_ClockConfig+0x2f0>
340072ce:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
340072d2:	485c      	ldr	r0, [pc, #368]	@ (34007444 <HAL_RCC_ClockConfig+0x45c>)
340072d4:	f7fa faa6 	bl	34001824 <assert_failed>

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
340072d8:	687b      	ldr	r3, [r7, #4]
340072da:	685b      	ldr	r3, [r3, #4]
340072dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340072e0:	d106      	bne.n	340072f0 <HAL_RCC_ClockConfig+0x308>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
340072e2:	f7fe fee7 	bl	340060b4 <LL_RCC_HSE_IsReady>
340072e6:	4603      	mov	r3, r0
340072e8:	2b00      	cmp	r3, #0
340072ea:	d15a      	bne.n	340073a2 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
340072ec:	2301      	movs	r3, #1
340072ee:	e2f2      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
340072f0:	687b      	ldr	r3, [r7, #4]
340072f2:	685b      	ldr	r3, [r3, #4]
340072f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340072f8:	d140      	bne.n	3400737c <HAL_RCC_ClockConfig+0x394>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
340072fa:	687b      	ldr	r3, [r7, #4]
340072fc:	6a1b      	ldr	r3, [r3, #32]
340072fe:	2b00      	cmp	r3, #0
34007300:	d013      	beq.n	3400732a <HAL_RCC_ClockConfig+0x342>
34007302:	687b      	ldr	r3, [r7, #4]
34007304:	6a1b      	ldr	r3, [r3, #32]
34007306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400730a:	d00e      	beq.n	3400732a <HAL_RCC_ClockConfig+0x342>
3400730c:	687b      	ldr	r3, [r7, #4]
3400730e:	6a1b      	ldr	r3, [r3, #32]
34007310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007314:	d009      	beq.n	3400732a <HAL_RCC_ClockConfig+0x342>
34007316:	687b      	ldr	r3, [r7, #4]
34007318:	6a1b      	ldr	r3, [r3, #32]
3400731a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400731e:	d004      	beq.n	3400732a <HAL_RCC_ClockConfig+0x342>
34007320:	f240 31c7 	movw	r1, #967	@ 0x3c7
34007324:	4847      	ldr	r0, [pc, #284]	@ (34007444 <HAL_RCC_ClockConfig+0x45c>)
34007326:	f7fa fa7d 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
3400732a:	687b      	ldr	r3, [r7, #4]
3400732c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400732e:	2b00      	cmp	r3, #0
34007330:	d004      	beq.n	3400733c <HAL_RCC_ClockConfig+0x354>
34007332:	687b      	ldr	r3, [r7, #4]
34007334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400733a:	d904      	bls.n	34007346 <HAL_RCC_ClockConfig+0x35e>
3400733c:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34007340:	4840      	ldr	r0, [pc, #256]	@ (34007444 <HAL_RCC_ClockConfig+0x45c>)
34007342:	f7fa fa6f 	bl	34001824 <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34007346:	f7ff f8d7 	bl	340064f8 <LL_RCC_IC1_GetSource>
3400734a:	4602      	mov	r2, r0
3400734c:	687b      	ldr	r3, [r7, #4]
3400734e:	6a1b      	ldr	r3, [r3, #32]
34007350:	4619      	mov	r1, r3
34007352:	4610      	mov	r0, r2
34007354:	f000 fe4a 	bl	34007fec <RCC_IC_CheckPLLSources>
34007358:	4603      	mov	r3, r0
3400735a:	2b01      	cmp	r3, #1
3400735c:	d001      	beq.n	34007362 <HAL_RCC_ClockConfig+0x37a>
      {
        return HAL_ERROR;
3400735e:	2301      	movs	r3, #1
34007360:	e2b9      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34007362:	687b      	ldr	r3, [r7, #4]
34007364:	6a1a      	ldr	r2, [r3, #32]
34007366:	687b      	ldr	r3, [r7, #4]
34007368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400736a:	3b01      	subs	r3, #1
3400736c:	041b      	lsls	r3, r3, #16
3400736e:	4936      	ldr	r1, [pc, #216]	@ (34007448 <HAL_RCC_ClockConfig+0x460>)
34007370:	4313      	orrs	r3, r2
34007372:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
34007376:	f7ff f8b1 	bl	340064dc <LL_RCC_IC1_Enable>
3400737a:	e012      	b.n	340073a2 <HAL_RCC_ClockConfig+0x3ba>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
3400737c:	687b      	ldr	r3, [r7, #4]
3400737e:	685b      	ldr	r3, [r3, #4]
34007380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34007384:	d106      	bne.n	34007394 <HAL_RCC_ClockConfig+0x3ac>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34007386:	f7fe ff2d 	bl	340061e4 <LL_RCC_MSI_IsReady>
3400738a:	4603      	mov	r3, r0
3400738c:	2b00      	cmp	r3, #0
3400738e:	d108      	bne.n	340073a2 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
34007390:	2301      	movs	r3, #1
34007392:	e2a0      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34007394:	f7fe febe 	bl	34006114 <LL_RCC_HSI_IsReady>
34007398:	4603      	mov	r3, r0
3400739a:	2b00      	cmp	r3, #0
3400739c:	d101      	bne.n	340073a2 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
3400739e:	2301      	movs	r3, #1
340073a0:	e299      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
340073a2:	4b29      	ldr	r3, [pc, #164]	@ (34007448 <HAL_RCC_ClockConfig+0x460>)
340073a4:	6a1b      	ldr	r3, [r3, #32]
340073a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
340073aa:	687b      	ldr	r3, [r7, #4]
340073ac:	685b      	ldr	r3, [r3, #4]
340073ae:	4926      	ldr	r1, [pc, #152]	@ (34007448 <HAL_RCC_ClockConfig+0x460>)
340073b0:	4313      	orrs	r3, r2
340073b2:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
340073b4:	f7fc fb66 	bl	34003a84 <HAL_GetTick>
340073b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
340073ba:	e00a      	b.n	340073d2 <HAL_RCC_ClockConfig+0x3ea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
340073bc:	f7fc fb62 	bl	34003a84 <HAL_GetTick>
340073c0:	4602      	mov	r2, r0
340073c2:	68fb      	ldr	r3, [r7, #12]
340073c4:	1ad3      	subs	r3, r2, r3
340073c6:	f241 3288 	movw	r2, #5000	@ 0x1388
340073ca:	4293      	cmp	r3, r2
340073cc:	d901      	bls.n	340073d2 <HAL_RCC_ClockConfig+0x3ea>
      {
        return HAL_TIMEOUT;
340073ce:	2303      	movs	r3, #3
340073d0:	e281      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
340073d2:	f7fe ff8f 	bl	340062f4 <LL_RCC_GetCpuClkSource>
340073d6:	4602      	mov	r2, r0
340073d8:	687b      	ldr	r3, [r7, #4]
340073da:	685b      	ldr	r3, [r3, #4]
340073dc:	011b      	lsls	r3, r3, #4
340073de:	429a      	cmp	r2, r3
340073e0:	d1ec      	bne.n	340073bc <HAL_RCC_ClockConfig+0x3d4>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
340073e2:	f000 fa83 	bl	340078ec <HAL_RCC_GetCpuClockFreq>
340073e6:	4603      	mov	r3, r0
340073e8:	4a18      	ldr	r2, [pc, #96]	@ (3400744c <HAL_RCC_ClockConfig+0x464>)
340073ea:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
340073ec:	687b      	ldr	r3, [r7, #4]
340073ee:	681b      	ldr	r3, [r3, #0]
340073f0:	f003 0302 	and.w	r3, r3, #2
340073f4:	2b00      	cmp	r3, #0
340073f6:	f000 8127 	beq.w	34007648 <HAL_RCC_ClockConfig+0x660>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
340073fa:	687b      	ldr	r3, [r7, #4]
340073fc:	689b      	ldr	r3, [r3, #8]
340073fe:	2b00      	cmp	r3, #0
34007400:	d013      	beq.n	3400742a <HAL_RCC_ClockConfig+0x442>
34007402:	687b      	ldr	r3, [r7, #4]
34007404:	689b      	ldr	r3, [r3, #8]
34007406:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400740a:	d00e      	beq.n	3400742a <HAL_RCC_ClockConfig+0x442>
3400740c:	687b      	ldr	r3, [r7, #4]
3400740e:	689b      	ldr	r3, [r3, #8]
34007410:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34007414:	d009      	beq.n	3400742a <HAL_RCC_ClockConfig+0x442>
34007416:	687b      	ldr	r3, [r7, #4]
34007418:	689b      	ldr	r3, [r3, #8]
3400741a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3400741e:	d004      	beq.n	3400742a <HAL_RCC_ClockConfig+0x442>
34007420:	f240 4101 	movw	r1, #1025	@ 0x401
34007424:	4807      	ldr	r0, [pc, #28]	@ (34007444 <HAL_RCC_ClockConfig+0x45c>)
34007426:	f7fa f9fd 	bl	34001824 <assert_failed>

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
3400742a:	687b      	ldr	r3, [r7, #4]
3400742c:	689b      	ldr	r3, [r3, #8]
3400742e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34007432:	d10d      	bne.n	34007450 <HAL_RCC_ClockConfig+0x468>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34007434:	f7fe fe3e 	bl	340060b4 <LL_RCC_HSE_IsReady>
34007438:	4603      	mov	r3, r0
3400743a:	2b00      	cmp	r3, #0
3400743c:	f040 80e0 	bne.w	34007600 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
34007440:	2301      	movs	r3, #1
34007442:	e248      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
34007444:	3401ce18 	.word	0x3401ce18
34007448:	56028000 	.word	0x56028000
3400744c:	3401f23c 	.word	0x3401f23c
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34007450:	687b      	ldr	r3, [r7, #4]
34007452:	689b      	ldr	r3, [r3, #8]
34007454:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34007458:	f040 80c0 	bne.w	340075dc <HAL_RCC_ClockConfig+0x5f4>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
3400745c:	687b      	ldr	r3, [r7, #4]
3400745e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34007460:	2b00      	cmp	r3, #0
34007462:	d013      	beq.n	3400748c <HAL_RCC_ClockConfig+0x4a4>
34007464:	687b      	ldr	r3, [r7, #4]
34007466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34007468:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400746c:	d00e      	beq.n	3400748c <HAL_RCC_ClockConfig+0x4a4>
3400746e:	687b      	ldr	r3, [r7, #4]
34007470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34007472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007476:	d009      	beq.n	3400748c <HAL_RCC_ClockConfig+0x4a4>
34007478:	687b      	ldr	r3, [r7, #4]
3400747a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400747c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007480:	d004      	beq.n	3400748c <HAL_RCC_ClockConfig+0x4a4>
34007482:	f44f 6182 	mov.w	r1, #1040	@ 0x410
34007486:	486a      	ldr	r0, [pc, #424]	@ (34007630 <HAL_RCC_ClockConfig+0x648>)
34007488:	f7fa f9cc 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
3400748c:	687b      	ldr	r3, [r7, #4]
3400748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34007490:	2b00      	cmp	r3, #0
34007492:	d004      	beq.n	3400749e <HAL_RCC_ClockConfig+0x4b6>
34007494:	687b      	ldr	r3, [r7, #4]
34007496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34007498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400749c:	d904      	bls.n	340074a8 <HAL_RCC_ClockConfig+0x4c0>
3400749e:	f240 4111 	movw	r1, #1041	@ 0x411
340074a2:	4863      	ldr	r0, [pc, #396]	@ (34007630 <HAL_RCC_ClockConfig+0x648>)
340074a4:	f7fa f9be 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
340074a8:	687b      	ldr	r3, [r7, #4]
340074aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340074ac:	2b00      	cmp	r3, #0
340074ae:	d013      	beq.n	340074d8 <HAL_RCC_ClockConfig+0x4f0>
340074b0:	687b      	ldr	r3, [r7, #4]
340074b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340074b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340074b8:	d00e      	beq.n	340074d8 <HAL_RCC_ClockConfig+0x4f0>
340074ba:	687b      	ldr	r3, [r7, #4]
340074bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340074be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340074c2:	d009      	beq.n	340074d8 <HAL_RCC_ClockConfig+0x4f0>
340074c4:	687b      	ldr	r3, [r7, #4]
340074c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340074c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340074cc:	d004      	beq.n	340074d8 <HAL_RCC_ClockConfig+0x4f0>
340074ce:	f240 4112 	movw	r1, #1042	@ 0x412
340074d2:	4857      	ldr	r0, [pc, #348]	@ (34007630 <HAL_RCC_ClockConfig+0x648>)
340074d4:	f7fa f9a6 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
340074d8:	687b      	ldr	r3, [r7, #4]
340074da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340074dc:	2b00      	cmp	r3, #0
340074de:	d004      	beq.n	340074ea <HAL_RCC_ClockConfig+0x502>
340074e0:	687b      	ldr	r3, [r7, #4]
340074e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340074e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340074e8:	d904      	bls.n	340074f4 <HAL_RCC_ClockConfig+0x50c>
340074ea:	f240 4113 	movw	r1, #1043	@ 0x413
340074ee:	4850      	ldr	r0, [pc, #320]	@ (34007630 <HAL_RCC_ClockConfig+0x648>)
340074f0:	f7fa f998 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
340074f4:	687b      	ldr	r3, [r7, #4]
340074f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340074f8:	2b00      	cmp	r3, #0
340074fa:	d013      	beq.n	34007524 <HAL_RCC_ClockConfig+0x53c>
340074fc:	687b      	ldr	r3, [r7, #4]
340074fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007504:	d00e      	beq.n	34007524 <HAL_RCC_ClockConfig+0x53c>
34007506:	687b      	ldr	r3, [r7, #4]
34007508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400750a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400750e:	d009      	beq.n	34007524 <HAL_RCC_ClockConfig+0x53c>
34007510:	687b      	ldr	r3, [r7, #4]
34007512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007514:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007518:	d004      	beq.n	34007524 <HAL_RCC_ClockConfig+0x53c>
3400751a:	f240 4114 	movw	r1, #1044	@ 0x414
3400751e:	4844      	ldr	r0, [pc, #272]	@ (34007630 <HAL_RCC_ClockConfig+0x648>)
34007520:	f7fa f980 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
34007524:	687b      	ldr	r3, [r7, #4]
34007526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34007528:	2b00      	cmp	r3, #0
3400752a:	d004      	beq.n	34007536 <HAL_RCC_ClockConfig+0x54e>
3400752c:	687b      	ldr	r3, [r7, #4]
3400752e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34007530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34007534:	d904      	bls.n	34007540 <HAL_RCC_ClockConfig+0x558>
34007536:	f240 4115 	movw	r1, #1045	@ 0x415
3400753a:	483d      	ldr	r0, [pc, #244]	@ (34007630 <HAL_RCC_ClockConfig+0x648>)
3400753c:	f7fa f972 	bl	34001824 <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34007540:	f7fe fff8 	bl	34006534 <LL_RCC_IC2_GetSource>
34007544:	4602      	mov	r2, r0
34007546:	687b      	ldr	r3, [r7, #4]
34007548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400754a:	4619      	mov	r1, r3
3400754c:	4610      	mov	r0, r2
3400754e:	f000 fd4d 	bl	34007fec <RCC_IC_CheckPLLSources>
34007552:	4603      	mov	r3, r0
34007554:	2b01      	cmp	r3, #1
34007556:	d001      	beq.n	3400755c <HAL_RCC_ClockConfig+0x574>
      {
        return HAL_ERROR;
34007558:	2301      	movs	r3, #1
3400755a:	e1bc      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
3400755c:	f7ff f808 	bl	34006570 <LL_RCC_IC6_GetSource>
34007560:	4602      	mov	r2, r0
34007562:	687b      	ldr	r3, [r7, #4]
34007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34007566:	4619      	mov	r1, r3
34007568:	4610      	mov	r0, r2
3400756a:	f000 fd3f 	bl	34007fec <RCC_IC_CheckPLLSources>
3400756e:	4603      	mov	r3, r0
34007570:	2b01      	cmp	r3, #1
34007572:	d001      	beq.n	34007578 <HAL_RCC_ClockConfig+0x590>
      {
        return HAL_ERROR;
34007574:	2301      	movs	r3, #1
34007576:	e1ae      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34007578:	f7ff f808 	bl	3400658c <LL_RCC_IC11_GetSource>
3400757c:	4602      	mov	r2, r0
3400757e:	687b      	ldr	r3, [r7, #4]
34007580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007582:	4619      	mov	r1, r3
34007584:	4610      	mov	r0, r2
34007586:	f000 fd31 	bl	34007fec <RCC_IC_CheckPLLSources>
3400758a:	4603      	mov	r3, r0
3400758c:	2b01      	cmp	r3, #1
3400758e:	d001      	beq.n	34007594 <HAL_RCC_ClockConfig+0x5ac>
      {
        return HAL_ERROR;
34007590:	2301      	movs	r3, #1
34007592:	e1a0      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34007594:	687b      	ldr	r3, [r7, #4]
34007596:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34007598:	687b      	ldr	r3, [r7, #4]
3400759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400759c:	3b01      	subs	r3, #1
3400759e:	041b      	lsls	r3, r3, #16
340075a0:	4924      	ldr	r1, [pc, #144]	@ (34007634 <HAL_RCC_ClockConfig+0x64c>)
340075a2:	4313      	orrs	r3, r2
340075a4:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
340075a8:	687b      	ldr	r3, [r7, #4]
340075aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
340075ac:	687b      	ldr	r3, [r7, #4]
340075ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340075b0:	3b01      	subs	r3, #1
340075b2:	041b      	lsls	r3, r3, #16
340075b4:	491f      	ldr	r1, [pc, #124]	@ (34007634 <HAL_RCC_ClockConfig+0x64c>)
340075b6:	4313      	orrs	r3, r2
340075b8:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
340075bc:	687b      	ldr	r3, [r7, #4]
340075be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
340075c0:	687b      	ldr	r3, [r7, #4]
340075c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340075c4:	3b01      	subs	r3, #1
340075c6:	041b      	lsls	r3, r3, #16
340075c8:	491a      	ldr	r1, [pc, #104]	@ (34007634 <HAL_RCC_ClockConfig+0x64c>)
340075ca:	4313      	orrs	r3, r2
340075cc:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
340075d0:	4b18      	ldr	r3, [pc, #96]	@ (34007634 <HAL_RCC_ClockConfig+0x64c>)
340075d2:	f240 4222 	movw	r2, #1058	@ 0x422
340075d6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
340075da:	e011      	b.n	34007600 <HAL_RCC_ClockConfig+0x618>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
340075dc:	687b      	ldr	r3, [r7, #4]
340075de:	689b      	ldr	r3, [r3, #8]
340075e0:	2b00      	cmp	r3, #0
340075e2:	d106      	bne.n	340075f2 <HAL_RCC_ClockConfig+0x60a>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
340075e4:	f7fe fd96 	bl	34006114 <LL_RCC_HSI_IsReady>
340075e8:	4603      	mov	r3, r0
340075ea:	2b00      	cmp	r3, #0
340075ec:	d108      	bne.n	34007600 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
340075ee:	2301      	movs	r3, #1
340075f0:	e171      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
340075f2:	f7fe fdf7 	bl	340061e4 <LL_RCC_MSI_IsReady>
340075f6:	4603      	mov	r3, r0
340075f8:	2b00      	cmp	r3, #0
340075fa:	d101      	bne.n	34007600 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
340075fc:	2301      	movs	r3, #1
340075fe:	e16a      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34007600:	4b0c      	ldr	r3, [pc, #48]	@ (34007634 <HAL_RCC_ClockConfig+0x64c>)
34007602:	6a1b      	ldr	r3, [r3, #32]
34007604:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34007608:	687b      	ldr	r3, [r7, #4]
3400760a:	689b      	ldr	r3, [r3, #8]
3400760c:	4909      	ldr	r1, [pc, #36]	@ (34007634 <HAL_RCC_ClockConfig+0x64c>)
3400760e:	4313      	orrs	r3, r2
34007610:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007612:	f7fc fa37 	bl	34003a84 <HAL_GetTick>
34007616:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34007618:	e00e      	b.n	34007638 <HAL_RCC_ClockConfig+0x650>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3400761a:	f7fc fa33 	bl	34003a84 <HAL_GetTick>
3400761e:	4602      	mov	r2, r0
34007620:	68fb      	ldr	r3, [r7, #12]
34007622:	1ad3      	subs	r3, r2, r3
34007624:	f241 3288 	movw	r2, #5000	@ 0x1388
34007628:	4293      	cmp	r3, r2
3400762a:	d905      	bls.n	34007638 <HAL_RCC_ClockConfig+0x650>
      {
        return HAL_TIMEOUT;
3400762c:	2303      	movs	r3, #3
3400762e:	e152      	b.n	340078d6 <HAL_RCC_ClockConfig+0x8ee>
34007630:	3401ce18 	.word	0x3401ce18
34007634:	56028000 	.word	0x56028000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34007638:	f7fe fe6a 	bl	34006310 <LL_RCC_GetSysClkSource>
3400763c:	4602      	mov	r2, r0
3400763e:	687b      	ldr	r3, [r7, #4]
34007640:	689b      	ldr	r3, [r3, #8]
34007642:	011b      	lsls	r3, r3, #4
34007644:	429a      	cmp	r2, r3
34007646:	d1e8      	bne.n	3400761a <HAL_RCC_ClockConfig+0x632>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34007648:	687b      	ldr	r3, [r7, #4]
3400764a:	681b      	ldr	r3, [r3, #0]
3400764c:	f003 0304 	and.w	r3, r3, #4
34007650:	2b00      	cmp	r3, #0
34007652:	d03c      	beq.n	340076ce <HAL_RCC_ClockConfig+0x6e6>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34007654:	687b      	ldr	r3, [r7, #4]
34007656:	68db      	ldr	r3, [r3, #12]
34007658:	2b00      	cmp	r3, #0
3400765a:	d027      	beq.n	340076ac <HAL_RCC_ClockConfig+0x6c4>
3400765c:	687b      	ldr	r3, [r7, #4]
3400765e:	68db      	ldr	r3, [r3, #12]
34007660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34007664:	d022      	beq.n	340076ac <HAL_RCC_ClockConfig+0x6c4>
34007666:	687b      	ldr	r3, [r7, #4]
34007668:	68db      	ldr	r3, [r3, #12]
3400766a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400766e:	d01d      	beq.n	340076ac <HAL_RCC_ClockConfig+0x6c4>
34007670:	687b      	ldr	r3, [r7, #4]
34007672:	68db      	ldr	r3, [r3, #12]
34007674:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007678:	d018      	beq.n	340076ac <HAL_RCC_ClockConfig+0x6c4>
3400767a:	687b      	ldr	r3, [r7, #4]
3400767c:	68db      	ldr	r3, [r3, #12]
3400767e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34007682:	d013      	beq.n	340076ac <HAL_RCC_ClockConfig+0x6c4>
34007684:	687b      	ldr	r3, [r7, #4]
34007686:	68db      	ldr	r3, [r3, #12]
34007688:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
3400768c:	d00e      	beq.n	340076ac <HAL_RCC_ClockConfig+0x6c4>
3400768e:	687b      	ldr	r3, [r7, #4]
34007690:	68db      	ldr	r3, [r3, #12]
34007692:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
34007696:	d009      	beq.n	340076ac <HAL_RCC_ClockConfig+0x6c4>
34007698:	687b      	ldr	r3, [r7, #4]
3400769a:	68db      	ldr	r3, [r3, #12]
3400769c:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
340076a0:	d004      	beq.n	340076ac <HAL_RCC_ClockConfig+0x6c4>
340076a2:	f44f 618b 	mov.w	r1, #1112	@ 0x458
340076a6:	488e      	ldr	r0, [pc, #568]	@ (340078e0 <HAL_RCC_ClockConfig+0x8f8>)
340076a8:	f7fa f8bc 	bl	34001824 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
340076ac:	687b      	ldr	r3, [r7, #4]
340076ae:	68da      	ldr	r2, [r3, #12]
340076b0:	4b8c      	ldr	r3, [pc, #560]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
340076b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340076b4:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
340076b8:	429a      	cmp	r2, r3
340076ba:	d208      	bcs.n	340076ce <HAL_RCC_ClockConfig+0x6e6>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
340076bc:	4b89      	ldr	r3, [pc, #548]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
340076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340076c0:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
340076c4:	687b      	ldr	r3, [r7, #4]
340076c6:	68db      	ldr	r3, [r3, #12]
340076c8:	4986      	ldr	r1, [pc, #536]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
340076ca:	4313      	orrs	r3, r2
340076cc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
340076ce:	687b      	ldr	r3, [r7, #4]
340076d0:	681b      	ldr	r3, [r3, #0]
340076d2:	f003 0308 	and.w	r3, r3, #8
340076d6:	2b00      	cmp	r3, #0
340076d8:	d035      	beq.n	34007746 <HAL_RCC_ClockConfig+0x75e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
340076da:	687b      	ldr	r3, [r7, #4]
340076dc:	691b      	ldr	r3, [r3, #16]
340076de:	2b00      	cmp	r3, #0
340076e0:	d020      	beq.n	34007724 <HAL_RCC_ClockConfig+0x73c>
340076e2:	687b      	ldr	r3, [r7, #4]
340076e4:	691b      	ldr	r3, [r3, #16]
340076e6:	2b01      	cmp	r3, #1
340076e8:	d01c      	beq.n	34007724 <HAL_RCC_ClockConfig+0x73c>
340076ea:	687b      	ldr	r3, [r7, #4]
340076ec:	691b      	ldr	r3, [r3, #16]
340076ee:	2b02      	cmp	r3, #2
340076f0:	d018      	beq.n	34007724 <HAL_RCC_ClockConfig+0x73c>
340076f2:	687b      	ldr	r3, [r7, #4]
340076f4:	691b      	ldr	r3, [r3, #16]
340076f6:	2b03      	cmp	r3, #3
340076f8:	d014      	beq.n	34007724 <HAL_RCC_ClockConfig+0x73c>
340076fa:	687b      	ldr	r3, [r7, #4]
340076fc:	691b      	ldr	r3, [r3, #16]
340076fe:	2b04      	cmp	r3, #4
34007700:	d010      	beq.n	34007724 <HAL_RCC_ClockConfig+0x73c>
34007702:	687b      	ldr	r3, [r7, #4]
34007704:	691b      	ldr	r3, [r3, #16]
34007706:	2b05      	cmp	r3, #5
34007708:	d00c      	beq.n	34007724 <HAL_RCC_ClockConfig+0x73c>
3400770a:	687b      	ldr	r3, [r7, #4]
3400770c:	691b      	ldr	r3, [r3, #16]
3400770e:	2b06      	cmp	r3, #6
34007710:	d008      	beq.n	34007724 <HAL_RCC_ClockConfig+0x73c>
34007712:	687b      	ldr	r3, [r7, #4]
34007714:	691b      	ldr	r3, [r3, #16]
34007716:	2b07      	cmp	r3, #7
34007718:	d004      	beq.n	34007724 <HAL_RCC_ClockConfig+0x73c>
3400771a:	f240 4163 	movw	r1, #1123	@ 0x463
3400771e:	4870      	ldr	r0, [pc, #448]	@ (340078e0 <HAL_RCC_ClockConfig+0x8f8>)
34007720:	f7fa f880 	bl	34001824 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34007724:	687b      	ldr	r3, [r7, #4]
34007726:	691a      	ldr	r2, [r3, #16]
34007728:	4b6e      	ldr	r3, [pc, #440]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
3400772a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400772c:	f003 0307 	and.w	r3, r3, #7
34007730:	429a      	cmp	r2, r3
34007732:	d208      	bcs.n	34007746 <HAL_RCC_ClockConfig+0x75e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34007734:	4b6b      	ldr	r3, [pc, #428]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
34007736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007738:	f023 0207 	bic.w	r2, r3, #7
3400773c:	687b      	ldr	r3, [r7, #4]
3400773e:	691b      	ldr	r3, [r3, #16]
34007740:	4968      	ldr	r1, [pc, #416]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
34007742:	4313      	orrs	r3, r2
34007744:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34007746:	687b      	ldr	r3, [r7, #4]
34007748:	681b      	ldr	r3, [r3, #0]
3400774a:	f003 0310 	and.w	r3, r3, #16
3400774e:	2b00      	cmp	r3, #0
34007750:	d035      	beq.n	340077be <HAL_RCC_ClockConfig+0x7d6>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34007752:	687b      	ldr	r3, [r7, #4]
34007754:	695b      	ldr	r3, [r3, #20]
34007756:	2b00      	cmp	r3, #0
34007758:	d020      	beq.n	3400779c <HAL_RCC_ClockConfig+0x7b4>
3400775a:	687b      	ldr	r3, [r7, #4]
3400775c:	695b      	ldr	r3, [r3, #20]
3400775e:	2b10      	cmp	r3, #16
34007760:	d01c      	beq.n	3400779c <HAL_RCC_ClockConfig+0x7b4>
34007762:	687b      	ldr	r3, [r7, #4]
34007764:	695b      	ldr	r3, [r3, #20]
34007766:	2b20      	cmp	r3, #32
34007768:	d018      	beq.n	3400779c <HAL_RCC_ClockConfig+0x7b4>
3400776a:	687b      	ldr	r3, [r7, #4]
3400776c:	695b      	ldr	r3, [r3, #20]
3400776e:	2b30      	cmp	r3, #48	@ 0x30
34007770:	d014      	beq.n	3400779c <HAL_RCC_ClockConfig+0x7b4>
34007772:	687b      	ldr	r3, [r7, #4]
34007774:	695b      	ldr	r3, [r3, #20]
34007776:	2b40      	cmp	r3, #64	@ 0x40
34007778:	d010      	beq.n	3400779c <HAL_RCC_ClockConfig+0x7b4>
3400777a:	687b      	ldr	r3, [r7, #4]
3400777c:	695b      	ldr	r3, [r3, #20]
3400777e:	2b50      	cmp	r3, #80	@ 0x50
34007780:	d00c      	beq.n	3400779c <HAL_RCC_ClockConfig+0x7b4>
34007782:	687b      	ldr	r3, [r7, #4]
34007784:	695b      	ldr	r3, [r3, #20]
34007786:	2b60      	cmp	r3, #96	@ 0x60
34007788:	d008      	beq.n	3400779c <HAL_RCC_ClockConfig+0x7b4>
3400778a:	687b      	ldr	r3, [r7, #4]
3400778c:	695b      	ldr	r3, [r3, #20]
3400778e:	2b70      	cmp	r3, #112	@ 0x70
34007790:	d004      	beq.n	3400779c <HAL_RCC_ClockConfig+0x7b4>
34007792:	f240 416d 	movw	r1, #1133	@ 0x46d
34007796:	4852      	ldr	r0, [pc, #328]	@ (340078e0 <HAL_RCC_ClockConfig+0x8f8>)
34007798:	f7fa f844 	bl	34001824 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
3400779c:	687b      	ldr	r3, [r7, #4]
3400779e:	695a      	ldr	r2, [r3, #20]
340077a0:	4b50      	ldr	r3, [pc, #320]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
340077a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340077a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
340077a8:	429a      	cmp	r2, r3
340077aa:	d208      	bcs.n	340077be <HAL_RCC_ClockConfig+0x7d6>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
340077ac:	4b4d      	ldr	r3, [pc, #308]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
340077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340077b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
340077b4:	687b      	ldr	r3, [r7, #4]
340077b6:	695b      	ldr	r3, [r3, #20]
340077b8:	494a      	ldr	r1, [pc, #296]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
340077ba:	4313      	orrs	r3, r2
340077bc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
340077be:	687b      	ldr	r3, [r7, #4]
340077c0:	681b      	ldr	r3, [r3, #0]
340077c2:	f003 0320 	and.w	r3, r3, #32
340077c6:	2b00      	cmp	r3, #0
340077c8:	d03c      	beq.n	34007844 <HAL_RCC_ClockConfig+0x85c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
340077ca:	687b      	ldr	r3, [r7, #4]
340077cc:	699b      	ldr	r3, [r3, #24]
340077ce:	2b00      	cmp	r3, #0
340077d0:	d027      	beq.n	34007822 <HAL_RCC_ClockConfig+0x83a>
340077d2:	687b      	ldr	r3, [r7, #4]
340077d4:	699b      	ldr	r3, [r3, #24]
340077d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340077da:	d022      	beq.n	34007822 <HAL_RCC_ClockConfig+0x83a>
340077dc:	687b      	ldr	r3, [r7, #4]
340077de:	699b      	ldr	r3, [r3, #24]
340077e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340077e4:	d01d      	beq.n	34007822 <HAL_RCC_ClockConfig+0x83a>
340077e6:	687b      	ldr	r3, [r7, #4]
340077e8:	699b      	ldr	r3, [r3, #24]
340077ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
340077ee:	d018      	beq.n	34007822 <HAL_RCC_ClockConfig+0x83a>
340077f0:	687b      	ldr	r3, [r7, #4]
340077f2:	699b      	ldr	r3, [r3, #24]
340077f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
340077f8:	d013      	beq.n	34007822 <HAL_RCC_ClockConfig+0x83a>
340077fa:	687b      	ldr	r3, [r7, #4]
340077fc:	699b      	ldr	r3, [r3, #24]
340077fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34007802:	d00e      	beq.n	34007822 <HAL_RCC_ClockConfig+0x83a>
34007804:	687b      	ldr	r3, [r7, #4]
34007806:	699b      	ldr	r3, [r3, #24]
34007808:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
3400780c:	d009      	beq.n	34007822 <HAL_RCC_ClockConfig+0x83a>
3400780e:	687b      	ldr	r3, [r7, #4]
34007810:	699b      	ldr	r3, [r3, #24]
34007812:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
34007816:	d004      	beq.n	34007822 <HAL_RCC_ClockConfig+0x83a>
34007818:	f240 4177 	movw	r1, #1143	@ 0x477
3400781c:	4830      	ldr	r0, [pc, #192]	@ (340078e0 <HAL_RCC_ClockConfig+0x8f8>)
3400781e:	f7fa f801 	bl	34001824 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34007822:	687b      	ldr	r3, [r7, #4]
34007824:	699a      	ldr	r2, [r3, #24]
34007826:	4b2f      	ldr	r3, [pc, #188]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
34007828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400782a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
3400782e:	429a      	cmp	r2, r3
34007830:	d208      	bcs.n	34007844 <HAL_RCC_ClockConfig+0x85c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34007832:	4b2c      	ldr	r3, [pc, #176]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
34007834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007836:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
3400783a:	687b      	ldr	r3, [r7, #4]
3400783c:	699b      	ldr	r3, [r3, #24]
3400783e:	4929      	ldr	r1, [pc, #164]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
34007840:	4313      	orrs	r3, r2
34007842:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34007844:	687b      	ldr	r3, [r7, #4]
34007846:	681b      	ldr	r3, [r3, #0]
34007848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400784c:	2b00      	cmp	r3, #0
3400784e:	d03c      	beq.n	340078ca <HAL_RCC_ClockConfig+0x8e2>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34007850:	687b      	ldr	r3, [r7, #4]
34007852:	69db      	ldr	r3, [r3, #28]
34007854:	2b00      	cmp	r3, #0
34007856:	d027      	beq.n	340078a8 <HAL_RCC_ClockConfig+0x8c0>
34007858:	687b      	ldr	r3, [r7, #4]
3400785a:	69db      	ldr	r3, [r3, #28]
3400785c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34007860:	d022      	beq.n	340078a8 <HAL_RCC_ClockConfig+0x8c0>
34007862:	687b      	ldr	r3, [r7, #4]
34007864:	69db      	ldr	r3, [r3, #28]
34007866:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400786a:	d01d      	beq.n	340078a8 <HAL_RCC_ClockConfig+0x8c0>
3400786c:	687b      	ldr	r3, [r7, #4]
3400786e:	69db      	ldr	r3, [r3, #28]
34007870:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34007874:	d018      	beq.n	340078a8 <HAL_RCC_ClockConfig+0x8c0>
34007876:	687b      	ldr	r3, [r7, #4]
34007878:	69db      	ldr	r3, [r3, #28]
3400787a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400787e:	d013      	beq.n	340078a8 <HAL_RCC_ClockConfig+0x8c0>
34007880:	687b      	ldr	r3, [r7, #4]
34007882:	69db      	ldr	r3, [r3, #28]
34007884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34007888:	d00e      	beq.n	340078a8 <HAL_RCC_ClockConfig+0x8c0>
3400788a:	687b      	ldr	r3, [r7, #4]
3400788c:	69db      	ldr	r3, [r3, #28]
3400788e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34007892:	d009      	beq.n	340078a8 <HAL_RCC_ClockConfig+0x8c0>
34007894:	687b      	ldr	r3, [r7, #4]
34007896:	69db      	ldr	r3, [r3, #28]
34007898:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3400789c:	d004      	beq.n	340078a8 <HAL_RCC_ClockConfig+0x8c0>
3400789e:	f240 4181 	movw	r1, #1153	@ 0x481
340078a2:	480f      	ldr	r0, [pc, #60]	@ (340078e0 <HAL_RCC_ClockConfig+0x8f8>)
340078a4:	f7f9 ffbe 	bl	34001824 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
340078a8:	687b      	ldr	r3, [r7, #4]
340078aa:	69da      	ldr	r2, [r3, #28]
340078ac:	4b0d      	ldr	r3, [pc, #52]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
340078ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340078b0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
340078b4:	429a      	cmp	r2, r3
340078b6:	d208      	bcs.n	340078ca <HAL_RCC_ClockConfig+0x8e2>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
340078b8:	4b0a      	ldr	r3, [pc, #40]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
340078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340078bc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
340078c0:	687b      	ldr	r3, [r7, #4]
340078c2:	69db      	ldr	r3, [r3, #28]
340078c4:	4907      	ldr	r1, [pc, #28]	@ (340078e4 <HAL_RCC_ClockConfig+0x8fc>)
340078c6:	4313      	orrs	r3, r2
340078c8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
340078ca:	4b07      	ldr	r3, [pc, #28]	@ (340078e8 <HAL_RCC_ClockConfig+0x900>)
340078cc:	681b      	ldr	r3, [r3, #0]
340078ce:	4618      	mov	r0, r3
340078d0:	f7fc f88e 	bl	340039f0 <HAL_InitTick>
340078d4:	4603      	mov	r3, r0
}
340078d6:	4618      	mov	r0, r3
340078d8:	3710      	adds	r7, #16
340078da:	46bd      	mov	sp, r7
340078dc:	bd80      	pop	{r7, pc}
340078de:	bf00      	nop
340078e0:	3401ce18 	.word	0x3401ce18
340078e4:	56028000 	.word	0x56028000
340078e8:	3401f240 	.word	0x3401f240

340078ec <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
340078ec:	b580      	push	{r7, lr}
340078ee:	b082      	sub	sp, #8
340078f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
340078f2:	2300      	movs	r3, #0
340078f4:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
340078f6:	f7fe fcfd 	bl	340062f4 <LL_RCC_GetCpuClkSource>
340078fa:	4603      	mov	r3, r0
340078fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007900:	d025      	beq.n	3400794e <HAL_RCC_GetCpuClockFreq+0x62>
34007902:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007906:	d860      	bhi.n	340079ca <HAL_RCC_GetCpuClockFreq+0xde>
34007908:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400790c:	d01c      	beq.n	34007948 <HAL_RCC_GetCpuClockFreq+0x5c>
3400790e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34007912:	d85a      	bhi.n	340079ca <HAL_RCC_GetCpuClockFreq+0xde>
34007914:	2b00      	cmp	r3, #0
34007916:	d003      	beq.n	34007920 <HAL_RCC_GetCpuClockFreq+0x34>
34007918:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400791c:	d009      	beq.n	34007932 <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
3400791e:	e054      	b.n	340079ca <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007920:	f7fe fc1e 	bl	34006160 <LL_RCC_HSI_GetDivider>
34007924:	4603      	mov	r3, r0
34007926:	09db      	lsrs	r3, r3, #7
34007928:	4a2b      	ldr	r2, [pc, #172]	@ (340079d8 <HAL_RCC_GetCpuClockFreq+0xec>)
3400792a:	fa22 f303 	lsr.w	r3, r2, r3
3400792e:	607b      	str	r3, [r7, #4]
      break;
34007930:	e04c      	b.n	340079cc <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34007932:	f7fe fc7d 	bl	34006230 <LL_RCC_MSI_GetFrequency>
34007936:	4603      	mov	r3, r0
34007938:	2b00      	cmp	r3, #0
3400793a:	d102      	bne.n	34007942 <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
3400793c:	4b27      	ldr	r3, [pc, #156]	@ (340079dc <HAL_RCC_GetCpuClockFreq+0xf0>)
3400793e:	607b      	str	r3, [r7, #4]
      break;
34007940:	e044      	b.n	340079cc <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
34007942:	4b27      	ldr	r3, [pc, #156]	@ (340079e0 <HAL_RCC_GetCpuClockFreq+0xf4>)
34007944:	607b      	str	r3, [r7, #4]
      break;
34007946:	e041      	b.n	340079cc <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
34007948:	4b26      	ldr	r3, [pc, #152]	@ (340079e4 <HAL_RCC_GetCpuClockFreq+0xf8>)
3400794a:	607b      	str	r3, [r7, #4]
      break;
3400794c:	e03e      	b.n	340079cc <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
3400794e:	f7fe fde1 	bl	34006514 <LL_RCC_IC1_GetDivider>
34007952:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
34007954:	f7fe fdd0 	bl	340064f8 <LL_RCC_IC1_GetSource>
34007958:	4603      	mov	r3, r0
3400795a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400795e:	d029      	beq.n	340079b4 <HAL_RCC_GetCpuClockFreq+0xc8>
34007960:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007964:	d82f      	bhi.n	340079c6 <HAL_RCC_GetCpuClockFreq+0xda>
34007966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400796a:	d01a      	beq.n	340079a2 <HAL_RCC_GetCpuClockFreq+0xb6>
3400796c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007970:	d829      	bhi.n	340079c6 <HAL_RCC_GetCpuClockFreq+0xda>
34007972:	2b00      	cmp	r3, #0
34007974:	d003      	beq.n	3400797e <HAL_RCC_GetCpuClockFreq+0x92>
34007976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400797a:	d009      	beq.n	34007990 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
3400797c:	e023      	b.n	340079c6 <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400797e:	f009 f813 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34007982:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007984:	687a      	ldr	r2, [r7, #4]
34007986:	683b      	ldr	r3, [r7, #0]
34007988:	fbb2 f3f3 	udiv	r3, r2, r3
3400798c:	607b      	str	r3, [r7, #4]
          break;
3400798e:	e01b      	b.n	340079c8 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007990:	f009 f850 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34007994:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007996:	687a      	ldr	r2, [r7, #4]
34007998:	683b      	ldr	r3, [r7, #0]
3400799a:	fbb2 f3f3 	udiv	r3, r2, r3
3400799e:	607b      	str	r3, [r7, #4]
          break;
340079a0:	e012      	b.n	340079c8 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
340079a2:	f009 f88d 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
340079a6:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
340079a8:	687a      	ldr	r2, [r7, #4]
340079aa:	683b      	ldr	r3, [r7, #0]
340079ac:	fbb2 f3f3 	udiv	r3, r2, r3
340079b0:	607b      	str	r3, [r7, #4]
          break;
340079b2:	e009      	b.n	340079c8 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
340079b4:	f009 f8ca 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
340079b8:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
340079ba:	687a      	ldr	r2, [r7, #4]
340079bc:	683b      	ldr	r3, [r7, #0]
340079be:	fbb2 f3f3 	udiv	r3, r2, r3
340079c2:	607b      	str	r3, [r7, #4]
          break;
340079c4:	e000      	b.n	340079c8 <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
340079c6:	bf00      	nop
      break;
340079c8:	e000      	b.n	340079cc <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
340079ca:	bf00      	nop
  }

  return frequency;
340079cc:	687b      	ldr	r3, [r7, #4]
}
340079ce:	4618      	mov	r0, r3
340079d0:	3708      	adds	r7, #8
340079d2:	46bd      	mov	sp, r7
340079d4:	bd80      	pop	{r7, pc}
340079d6:	bf00      	nop
340079d8:	03d09000 	.word	0x03d09000
340079dc:	003d0900 	.word	0x003d0900
340079e0:	00f42400 	.word	0x00f42400
340079e4:	02dc6c00 	.word	0x02dc6c00

340079e8 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
340079e8:	b580      	push	{r7, lr}
340079ea:	b082      	sub	sp, #8
340079ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
340079ee:	2300      	movs	r3, #0
340079f0:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
340079f2:	f7fe fc8d 	bl	34006310 <LL_RCC_GetSysClkSource>
340079f6:	4603      	mov	r3, r0
340079f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340079fc:	d025      	beq.n	34007a4a <HAL_RCC_GetSysClockFreq+0x62>
340079fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007a02:	d860      	bhi.n	34007ac6 <HAL_RCC_GetSysClockFreq+0xde>
34007a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007a08:	d01c      	beq.n	34007a44 <HAL_RCC_GetSysClockFreq+0x5c>
34007a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007a0e:	d85a      	bhi.n	34007ac6 <HAL_RCC_GetSysClockFreq+0xde>
34007a10:	2b00      	cmp	r3, #0
34007a12:	d003      	beq.n	34007a1c <HAL_RCC_GetSysClockFreq+0x34>
34007a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007a18:	d009      	beq.n	34007a2e <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34007a1a:	e054      	b.n	34007ac6 <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007a1c:	f7fe fba0 	bl	34006160 <LL_RCC_HSI_GetDivider>
34007a20:	4603      	mov	r3, r0
34007a22:	09db      	lsrs	r3, r3, #7
34007a24:	4a2b      	ldr	r2, [pc, #172]	@ (34007ad4 <HAL_RCC_GetSysClockFreq+0xec>)
34007a26:	fa22 f303 	lsr.w	r3, r2, r3
34007a2a:	607b      	str	r3, [r7, #4]
      break;
34007a2c:	e04c      	b.n	34007ac8 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34007a2e:	f7fe fbff 	bl	34006230 <LL_RCC_MSI_GetFrequency>
34007a32:	4603      	mov	r3, r0
34007a34:	2b00      	cmp	r3, #0
34007a36:	d102      	bne.n	34007a3e <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
34007a38:	4b27      	ldr	r3, [pc, #156]	@ (34007ad8 <HAL_RCC_GetSysClockFreq+0xf0>)
34007a3a:	607b      	str	r3, [r7, #4]
      break;
34007a3c:	e044      	b.n	34007ac8 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
34007a3e:	4b27      	ldr	r3, [pc, #156]	@ (34007adc <HAL_RCC_GetSysClockFreq+0xf4>)
34007a40:	607b      	str	r3, [r7, #4]
      break;
34007a42:	e041      	b.n	34007ac8 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
34007a44:	4b26      	ldr	r3, [pc, #152]	@ (34007ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
34007a46:	607b      	str	r3, [r7, #4]
      break;
34007a48:	e03e      	b.n	34007ac8 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
34007a4a:	f7fe fd81 	bl	34006550 <LL_RCC_IC2_GetDivider>
34007a4e:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34007a50:	f7fe fd70 	bl	34006534 <LL_RCC_IC2_GetSource>
34007a54:	4603      	mov	r3, r0
34007a56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007a5a:	d029      	beq.n	34007ab0 <HAL_RCC_GetSysClockFreq+0xc8>
34007a5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007a60:	d82f      	bhi.n	34007ac2 <HAL_RCC_GetSysClockFreq+0xda>
34007a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007a66:	d01a      	beq.n	34007a9e <HAL_RCC_GetSysClockFreq+0xb6>
34007a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007a6c:	d829      	bhi.n	34007ac2 <HAL_RCC_GetSysClockFreq+0xda>
34007a6e:	2b00      	cmp	r3, #0
34007a70:	d003      	beq.n	34007a7a <HAL_RCC_GetSysClockFreq+0x92>
34007a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007a76:	d009      	beq.n	34007a8c <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34007a78:	e023      	b.n	34007ac2 <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007a7a:	f008 ff95 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34007a7e:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007a80:	687a      	ldr	r2, [r7, #4]
34007a82:	683b      	ldr	r3, [r7, #0]
34007a84:	fbb2 f3f3 	udiv	r3, r2, r3
34007a88:	607b      	str	r3, [r7, #4]
          break;
34007a8a:	e01b      	b.n	34007ac4 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007a8c:	f008 ffd2 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34007a90:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007a92:	687a      	ldr	r2, [r7, #4]
34007a94:	683b      	ldr	r3, [r7, #0]
34007a96:	fbb2 f3f3 	udiv	r3, r2, r3
34007a9a:	607b      	str	r3, [r7, #4]
          break;
34007a9c:	e012      	b.n	34007ac4 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007a9e:	f009 f80f 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34007aa2:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007aa4:	687a      	ldr	r2, [r7, #4]
34007aa6:	683b      	ldr	r3, [r7, #0]
34007aa8:	fbb2 f3f3 	udiv	r3, r2, r3
34007aac:	607b      	str	r3, [r7, #4]
          break;
34007aae:	e009      	b.n	34007ac4 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007ab0:	f009 f84c 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34007ab4:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007ab6:	687a      	ldr	r2, [r7, #4]
34007ab8:	683b      	ldr	r3, [r7, #0]
34007aba:	fbb2 f3f3 	udiv	r3, r2, r3
34007abe:	607b      	str	r3, [r7, #4]
          break;
34007ac0:	e000      	b.n	34007ac4 <HAL_RCC_GetSysClockFreq+0xdc>
          break;
34007ac2:	bf00      	nop
      break;
34007ac4:	e000      	b.n	34007ac8 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
34007ac6:	bf00      	nop
  }

  return frequency;
34007ac8:	687b      	ldr	r3, [r7, #4]
}
34007aca:	4618      	mov	r0, r3
34007acc:	3708      	adds	r7, #8
34007ace:	46bd      	mov	sp, r7
34007ad0:	bd80      	pop	{r7, pc}
34007ad2:	bf00      	nop
34007ad4:	03d09000 	.word	0x03d09000
34007ad8:	003d0900 	.word	0x003d0900
34007adc:	00f42400 	.word	0x00f42400
34007ae0:	02dc6c00 	.word	0x02dc6c00

34007ae4 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34007ae4:	b580      	push	{r7, lr}
34007ae6:	b088      	sub	sp, #32
34007ae8:	af00      	add	r7, sp, #0
34007aea:	6078      	str	r0, [r7, #4]
34007aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
34007aee:	2300      	movs	r3, #0
34007af0:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34007af2:	687b      	ldr	r3, [r7, #4]
34007af4:	011a      	lsls	r2, r3, #4
34007af6:	4b9a      	ldr	r3, [pc, #616]	@ (34007d60 <RCC_PLL_Config+0x27c>)
34007af8:	4413      	add	r3, r2
34007afa:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34007afc:	687b      	ldr	r3, [r7, #4]
34007afe:	011a      	lsls	r2, r3, #4
34007b00:	4b98      	ldr	r3, [pc, #608]	@ (34007d64 <RCC_PLL_Config+0x280>)
34007b02:	4413      	add	r3, r2
34007b04:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34007b06:	687b      	ldr	r3, [r7, #4]
34007b08:	011a      	lsls	r2, r3, #4
34007b0a:	4b97      	ldr	r3, [pc, #604]	@ (34007d68 <RCC_PLL_Config+0x284>)
34007b0c:	4413      	add	r3, r2
34007b0e:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
34007b10:	683b      	ldr	r3, [r7, #0]
34007b12:	681b      	ldr	r3, [r3, #0]
34007b14:	2b02      	cmp	r3, #2
34007b16:	f040 80e9 	bne.w	34007cec <RCC_PLL_Config+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34007b1a:	683b      	ldr	r3, [r7, #0]
34007b1c:	685b      	ldr	r3, [r3, #4]
34007b1e:	2b00      	cmp	r3, #0
34007b20:	d013      	beq.n	34007b4a <RCC_PLL_Config+0x66>
34007b22:	683b      	ldr	r3, [r7, #0]
34007b24:	685b      	ldr	r3, [r3, #4]
34007b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007b2a:	d00e      	beq.n	34007b4a <RCC_PLL_Config+0x66>
34007b2c:	683b      	ldr	r3, [r7, #0]
34007b2e:	685b      	ldr	r3, [r3, #4]
34007b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007b34:	d009      	beq.n	34007b4a <RCC_PLL_Config+0x66>
34007b36:	683b      	ldr	r3, [r7, #0]
34007b38:	685b      	ldr	r3, [r3, #4]
34007b3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007b3e:	d004      	beq.n	34007b4a <RCC_PLL_Config+0x66>
34007b40:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34007b44:	4889      	ldr	r0, [pc, #548]	@ (34007d6c <RCC_PLL_Config+0x288>)
34007b46:	f7f9 fe6d 	bl	34001824 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
34007b4a:	683b      	ldr	r3, [r7, #0]
34007b4c:	68db      	ldr	r3, [r3, #12]
34007b4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34007b52:	d304      	bcc.n	34007b5e <RCC_PLL_Config+0x7a>
34007b54:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34007b58:	4884      	ldr	r0, [pc, #528]	@ (34007d6c <RCC_PLL_Config+0x288>)
34007b5a:	f7f9 fe63 	bl	34001824 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
34007b5e:	683b      	ldr	r3, [r7, #0]
34007b60:	689b      	ldr	r3, [r3, #8]
34007b62:	2b00      	cmp	r3, #0
34007b64:	d003      	beq.n	34007b6e <RCC_PLL_Config+0x8a>
34007b66:	683b      	ldr	r3, [r7, #0]
34007b68:	689b      	ldr	r3, [r3, #8]
34007b6a:	2b3f      	cmp	r3, #63	@ 0x3f
34007b6c:	d904      	bls.n	34007b78 <RCC_PLL_Config+0x94>
34007b6e:	f240 71fc 	movw	r1, #2044	@ 0x7fc
34007b72:	487e      	ldr	r0, [pc, #504]	@ (34007d6c <RCC_PLL_Config+0x288>)
34007b74:	f7f9 fe56 	bl	34001824 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
34007b78:	683b      	ldr	r3, [r7, #0]
34007b7a:	691b      	ldr	r3, [r3, #16]
34007b7c:	2b09      	cmp	r3, #9
34007b7e:	d905      	bls.n	34007b8c <RCC_PLL_Config+0xa8>
34007b80:	683b      	ldr	r3, [r7, #0]
34007b82:	691b      	ldr	r3, [r3, #16]
34007b84:	f640 12c4 	movw	r2, #2500	@ 0x9c4
34007b88:	4293      	cmp	r3, r2
34007b8a:	d904      	bls.n	34007b96 <RCC_PLL_Config+0xb2>
34007b8c:	f240 71fd 	movw	r1, #2045	@ 0x7fd
34007b90:	4876      	ldr	r0, [pc, #472]	@ (34007d6c <RCC_PLL_Config+0x288>)
34007b92:	f7f9 fe47 	bl	34001824 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34007b96:	683b      	ldr	r3, [r7, #0]
34007b98:	695b      	ldr	r3, [r3, #20]
34007b9a:	2b00      	cmp	r3, #0
34007b9c:	d003      	beq.n	34007ba6 <RCC_PLL_Config+0xc2>
34007b9e:	683b      	ldr	r3, [r7, #0]
34007ba0:	695b      	ldr	r3, [r3, #20]
34007ba2:	2b07      	cmp	r3, #7
34007ba4:	d904      	bls.n	34007bb0 <RCC_PLL_Config+0xcc>
34007ba6:	f240 71fe 	movw	r1, #2046	@ 0x7fe
34007baa:	4870      	ldr	r0, [pc, #448]	@ (34007d6c <RCC_PLL_Config+0x288>)
34007bac:	f7f9 fe3a 	bl	34001824 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34007bb0:	683b      	ldr	r3, [r7, #0]
34007bb2:	699b      	ldr	r3, [r3, #24]
34007bb4:	2b00      	cmp	r3, #0
34007bb6:	d003      	beq.n	34007bc0 <RCC_PLL_Config+0xdc>
34007bb8:	683b      	ldr	r3, [r7, #0]
34007bba:	699b      	ldr	r3, [r3, #24]
34007bbc:	2b07      	cmp	r3, #7
34007bbe:	d904      	bls.n	34007bca <RCC_PLL_Config+0xe6>
34007bc0:	f240 71ff 	movw	r1, #2047	@ 0x7ff
34007bc4:	4869      	ldr	r0, [pc, #420]	@ (34007d6c <RCC_PLL_Config+0x288>)
34007bc6:	f7f9 fe2d 	bl	34001824 <assert_failed>

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34007bca:	4a69      	ldr	r2, [pc, #420]	@ (34007d70 <RCC_PLL_Config+0x28c>)
34007bcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007bd0:	687b      	ldr	r3, [r7, #4]
34007bd2:	fa01 f303 	lsl.w	r3, r1, r3
34007bd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34007bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007bdc:	f7fb ff52 	bl	34003a84 <HAL_GetTick>
34007be0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007be2:	e008      	b.n	34007bf6 <RCC_PLL_Config+0x112>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007be4:	f7fb ff4e 	bl	34003a84 <HAL_GetTick>
34007be8:	4602      	mov	r2, r0
34007bea:	68fb      	ldr	r3, [r7, #12]
34007bec:	1ad3      	subs	r3, r2, r3
34007bee:	2b01      	cmp	r3, #1
34007bf0:	d901      	bls.n	34007bf6 <RCC_PLL_Config+0x112>
      {
        return HAL_TIMEOUT;
34007bf2:	2303      	movs	r3, #3
34007bf4:	e114      	b.n	34007e20 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007bf6:	4b5e      	ldr	r3, [pc, #376]	@ (34007d70 <RCC_PLL_Config+0x28c>)
34007bf8:	685a      	ldr	r2, [r3, #4]
34007bfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007bfe:	687b      	ldr	r3, [r7, #4]
34007c00:	fa01 f303 	lsl.w	r3, r1, r3
34007c04:	401a      	ands	r2, r3
34007c06:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007c0a:	687b      	ldr	r3, [r7, #4]
34007c0c:	fa01 f303 	lsl.w	r3, r1, r3
34007c10:	429a      	cmp	r2, r3
34007c12:	d0e7      	beq.n	34007be4 <RCC_PLL_Config+0x100>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34007c14:	693b      	ldr	r3, [r7, #16]
34007c16:	681b      	ldr	r3, [r3, #0]
34007c18:	f043 0204 	orr.w	r2, r3, #4
34007c1c:	693b      	ldr	r3, [r7, #16]
34007c1e:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34007c20:	69bb      	ldr	r3, [r7, #24]
34007c22:	681b      	ldr	r3, [r3, #0]
34007c24:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34007c28:	69bb      	ldr	r3, [r7, #24]
34007c2a:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34007c2c:	69bb      	ldr	r3, [r7, #24]
34007c2e:	681a      	ldr	r2, [r3, #0]
34007c30:	4b50      	ldr	r3, [pc, #320]	@ (34007d74 <RCC_PLL_Config+0x290>)
34007c32:	4013      	ands	r3, r2
34007c34:	683a      	ldr	r2, [r7, #0]
34007c36:	6851      	ldr	r1, [r2, #4]
34007c38:	683a      	ldr	r2, [r7, #0]
34007c3a:	6892      	ldr	r2, [r2, #8]
34007c3c:	0512      	lsls	r2, r2, #20
34007c3e:	4311      	orrs	r1, r2
34007c40:	683a      	ldr	r2, [r7, #0]
34007c42:	6912      	ldr	r2, [r2, #16]
34007c44:	0212      	lsls	r2, r2, #8
34007c46:	430a      	orrs	r2, r1
34007c48:	431a      	orrs	r2, r3
34007c4a:	69bb      	ldr	r3, [r7, #24]
34007c4c:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34007c4e:	693b      	ldr	r3, [r7, #16]
34007c50:	681b      	ldr	r3, [r3, #0]
34007c52:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34007c56:	683b      	ldr	r3, [r7, #0]
34007c58:	695b      	ldr	r3, [r3, #20]
34007c5a:	06d9      	lsls	r1, r3, #27
34007c5c:	683b      	ldr	r3, [r7, #0]
34007c5e:	699b      	ldr	r3, [r3, #24]
34007c60:	061b      	lsls	r3, r3, #24
34007c62:	430b      	orrs	r3, r1
34007c64:	431a      	orrs	r2, r3
34007c66:	693b      	ldr	r3, [r7, #16]
34007c68:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34007c6a:	697b      	ldr	r3, [r7, #20]
34007c6c:	681b      	ldr	r3, [r3, #0]
34007c6e:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34007c72:	683b      	ldr	r3, [r7, #0]
34007c74:	68db      	ldr	r3, [r3, #12]
34007c76:	431a      	orrs	r2, r3
34007c78:	697b      	ldr	r3, [r7, #20]
34007c7a:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34007c7c:	693b      	ldr	r3, [r7, #16]
34007c7e:	681b      	ldr	r3, [r3, #0]
34007c80:	f023 0208 	bic.w	r2, r3, #8
34007c84:	693b      	ldr	r3, [r7, #16]
34007c86:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
34007c88:	683b      	ldr	r3, [r7, #0]
34007c8a:	68db      	ldr	r3, [r3, #12]
34007c8c:	2b00      	cmp	r3, #0
34007c8e:	d005      	beq.n	34007c9c <RCC_PLL_Config+0x1b8>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34007c90:	693b      	ldr	r3, [r7, #16]
34007c92:	681b      	ldr	r3, [r3, #0]
34007c94:	f043 020a 	orr.w	r2, r3, #10
34007c98:	693b      	ldr	r3, [r7, #16]
34007c9a:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34007c9c:	693b      	ldr	r3, [r7, #16]
34007c9e:	681b      	ldr	r3, [r3, #0]
34007ca0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34007ca4:	f043 0301 	orr.w	r3, r3, #1
34007ca8:	693a      	ldr	r2, [r7, #16]
34007caa:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34007cac:	4a30      	ldr	r2, [pc, #192]	@ (34007d70 <RCC_PLL_Config+0x28c>)
34007cae:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007cb2:	687b      	ldr	r3, [r7, #4]
34007cb4:	fa01 f303 	lsl.w	r3, r1, r3
34007cb8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007cbc:	f7fb fee2 	bl	34003a84 <HAL_GetTick>
34007cc0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34007cc2:	e008      	b.n	34007cd6 <RCC_PLL_Config+0x1f2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007cc4:	f7fb fede 	bl	34003a84 <HAL_GetTick>
34007cc8:	4602      	mov	r2, r0
34007cca:	68fb      	ldr	r3, [r7, #12]
34007ccc:	1ad3      	subs	r3, r2, r3
34007cce:	2b01      	cmp	r3, #1
34007cd0:	d901      	bls.n	34007cd6 <RCC_PLL_Config+0x1f2>
      {
        return HAL_TIMEOUT;
34007cd2:	2303      	movs	r3, #3
34007cd4:	e0a4      	b.n	34007e20 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34007cd6:	4b26      	ldr	r3, [pc, #152]	@ (34007d70 <RCC_PLL_Config+0x28c>)
34007cd8:	685a      	ldr	r2, [r3, #4]
34007cda:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007cde:	687b      	ldr	r3, [r7, #4]
34007ce0:	fa01 f303 	lsl.w	r3, r1, r3
34007ce4:	4013      	ands	r3, r2
34007ce6:	2b00      	cmp	r3, #0
34007ce8:	d0ec      	beq.n	34007cc4 <RCC_PLL_Config+0x1e0>
34007cea:	e098      	b.n	34007e1e <RCC_PLL_Config+0x33a>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34007cec:	683b      	ldr	r3, [r7, #0]
34007cee:	681b      	ldr	r3, [r3, #0]
34007cf0:	2b03      	cmp	r3, #3
34007cf2:	d15f      	bne.n	34007db4 <RCC_PLL_Config+0x2d0>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34007cf4:	683b      	ldr	r3, [r7, #0]
34007cf6:	685b      	ldr	r3, [r3, #4]
34007cf8:	2b00      	cmp	r3, #0
34007cfa:	d013      	beq.n	34007d24 <RCC_PLL_Config+0x240>
34007cfc:	683b      	ldr	r3, [r7, #0]
34007cfe:	685b      	ldr	r3, [r3, #4]
34007d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007d04:	d00e      	beq.n	34007d24 <RCC_PLL_Config+0x240>
34007d06:	683b      	ldr	r3, [r7, #0]
34007d08:	685b      	ldr	r3, [r3, #4]
34007d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007d0e:	d009      	beq.n	34007d24 <RCC_PLL_Config+0x240>
34007d10:	683b      	ldr	r3, [r7, #0]
34007d12:	685b      	ldr	r3, [r3, #4]
34007d14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007d18:	d004      	beq.n	34007d24 <RCC_PLL_Config+0x240>
34007d1a:	f640 013f 	movw	r1, #2111	@ 0x83f
34007d1e:	4813      	ldr	r0, [pc, #76]	@ (34007d6c <RCC_PLL_Config+0x288>)
34007d20:	f7f9 fd80 	bl	34001824 <assert_failed>

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34007d24:	683b      	ldr	r3, [r7, #0]
34007d26:	685b      	ldr	r3, [r3, #4]
34007d28:	4618      	mov	r0, r3
34007d2a:	f000 f925 	bl	34007f78 <RCC_PLL_Source_IsReady>
34007d2e:	4603      	mov	r3, r0
34007d30:	2b01      	cmp	r3, #1
34007d32:	d13c      	bne.n	34007dae <RCC_PLL_Config+0x2ca>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34007d34:	4a0e      	ldr	r2, [pc, #56]	@ (34007d70 <RCC_PLL_Config+0x28c>)
34007d36:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007d3a:	687b      	ldr	r3, [r7, #4]
34007d3c:	fa01 f303 	lsl.w	r3, r1, r3
34007d40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34007d44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34007d46:	f7fb fe9d 	bl	34003a84 <HAL_GetTick>
34007d4a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007d4c:	e014      	b.n	34007d78 <RCC_PLL_Config+0x294>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007d4e:	f7fb fe99 	bl	34003a84 <HAL_GetTick>
34007d52:	4602      	mov	r2, r0
34007d54:	68fb      	ldr	r3, [r7, #12]
34007d56:	1ad3      	subs	r3, r2, r3
34007d58:	2b01      	cmp	r3, #1
34007d5a:	d90d      	bls.n	34007d78 <RCC_PLL_Config+0x294>
        {
          return HAL_TIMEOUT;
34007d5c:	2303      	movs	r3, #3
34007d5e:	e05f      	b.n	34007e20 <RCC_PLL_Config+0x33c>
34007d60:	56028080 	.word	0x56028080
34007d64:	56028084 	.word	0x56028084
34007d68:	56028088 	.word	0x56028088
34007d6c:	3401ce18 	.word	0x3401ce18
34007d70:	56028000 	.word	0x56028000
34007d74:	8c0000ff 	.word	0x8c0000ff
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007d78:	4b2b      	ldr	r3, [pc, #172]	@ (34007e28 <RCC_PLL_Config+0x344>)
34007d7a:	685a      	ldr	r2, [r3, #4]
34007d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007d80:	687b      	ldr	r3, [r7, #4]
34007d82:	fa01 f303 	lsl.w	r3, r1, r3
34007d86:	401a      	ands	r2, r3
34007d88:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007d8c:	687b      	ldr	r3, [r7, #4]
34007d8e:	fa01 f303 	lsl.w	r3, r1, r3
34007d92:	429a      	cmp	r2, r3
34007d94:	d0db      	beq.n	34007d4e <RCC_PLL_Config+0x26a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34007d96:	69bb      	ldr	r3, [r7, #24]
34007d98:	681b      	ldr	r3, [r3, #0]
34007d9a:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
34007d9e:	683b      	ldr	r3, [r7, #0]
34007da0:	685b      	ldr	r3, [r3, #4]
34007da2:	4313      	orrs	r3, r2
34007da4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34007da8:	69bb      	ldr	r3, [r7, #24]
34007daa:	601a      	str	r2, [r3, #0]
34007dac:	e037      	b.n	34007e1e <RCC_PLL_Config+0x33a>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
34007dae:	2301      	movs	r3, #1
34007db0:	77fb      	strb	r3, [r7, #31]
34007db2:	e034      	b.n	34007e1e <RCC_PLL_Config+0x33a>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34007db4:	683b      	ldr	r3, [r7, #0]
34007db6:	681b      	ldr	r3, [r3, #0]
34007db8:	2b01      	cmp	r3, #1
34007dba:	d130      	bne.n	34007e1e <RCC_PLL_Config+0x33a>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34007dbc:	693b      	ldr	r3, [r7, #16]
34007dbe:	681b      	ldr	r3, [r3, #0]
34007dc0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34007dc4:	693b      	ldr	r3, [r7, #16]
34007dc6:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34007dc8:	4a17      	ldr	r2, [pc, #92]	@ (34007e28 <RCC_PLL_Config+0x344>)
34007dca:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007dce:	687b      	ldr	r3, [r7, #4]
34007dd0:	fa01 f303 	lsl.w	r3, r1, r3
34007dd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34007dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007dda:	f7fb fe53 	bl	34003a84 <HAL_GetTick>
34007dde:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007de0:	e008      	b.n	34007df4 <RCC_PLL_Config+0x310>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007de2:	f7fb fe4f 	bl	34003a84 <HAL_GetTick>
34007de6:	4602      	mov	r2, r0
34007de8:	68fb      	ldr	r3, [r7, #12]
34007dea:	1ad3      	subs	r3, r2, r3
34007dec:	2b01      	cmp	r3, #1
34007dee:	d901      	bls.n	34007df4 <RCC_PLL_Config+0x310>
      {
        return HAL_TIMEOUT;
34007df0:	2303      	movs	r3, #3
34007df2:	e015      	b.n	34007e20 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007df4:	4b0c      	ldr	r3, [pc, #48]	@ (34007e28 <RCC_PLL_Config+0x344>)
34007df6:	685a      	ldr	r2, [r3, #4]
34007df8:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007dfc:	687b      	ldr	r3, [r7, #4]
34007dfe:	fa01 f303 	lsl.w	r3, r1, r3
34007e02:	401a      	ands	r2, r3
34007e04:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007e08:	687b      	ldr	r3, [r7, #4]
34007e0a:	fa01 f303 	lsl.w	r3, r1, r3
34007e0e:	429a      	cmp	r2, r3
34007e10:	d0e7      	beq.n	34007de2 <RCC_PLL_Config+0x2fe>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34007e12:	69bb      	ldr	r3, [r7, #24]
34007e14:	681b      	ldr	r3, [r3, #0]
34007e16:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34007e1a:	69bb      	ldr	r3, [r7, #24]
34007e1c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
34007e1e:	7ffb      	ldrb	r3, [r7, #31]
}
34007e20:	4618      	mov	r0, r3
34007e22:	3720      	adds	r7, #32
34007e24:	46bd      	mov	sp, r7
34007e26:	bd80      	pop	{r7, pc}
34007e28:	56028000 	.word	0x56028000

34007e2c <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
34007e2c:	b580      	push	{r7, lr}
34007e2e:	b084      	sub	sp, #16
34007e30:	af00      	add	r7, sp, #0
34007e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
34007e34:	2300      	movs	r3, #0
34007e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34007e38:	4a11      	ldr	r2, [pc, #68]	@ (34007e80 <RCC_PLL_Enable+0x54>)
34007e3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007e3e:	687b      	ldr	r3, [r7, #4]
34007e40:	fa01 f303 	lsl.w	r3, r1, r3
34007e44:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
34007e48:	f7fb fe1c 	bl	34003a84 <HAL_GetTick>
34007e4c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34007e4e:	e008      	b.n	34007e62 <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007e50:	f7fb fe18 	bl	34003a84 <HAL_GetTick>
34007e54:	4602      	mov	r2, r0
34007e56:	68bb      	ldr	r3, [r7, #8]
34007e58:	1ad3      	subs	r3, r2, r3
34007e5a:	2b01      	cmp	r3, #1
34007e5c:	d901      	bls.n	34007e62 <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
34007e5e:	2303      	movs	r3, #3
34007e60:	e00a      	b.n	34007e78 <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34007e62:	4b07      	ldr	r3, [pc, #28]	@ (34007e80 <RCC_PLL_Enable+0x54>)
34007e64:	685a      	ldr	r2, [r3, #4]
34007e66:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007e6a:	687b      	ldr	r3, [r7, #4]
34007e6c:	fa01 f303 	lsl.w	r3, r1, r3
34007e70:	4013      	ands	r3, r2
34007e72:	2b00      	cmp	r3, #0
34007e74:	d0ec      	beq.n	34007e50 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
34007e76:	7bfb      	ldrb	r3, [r7, #15]
}
34007e78:	4618      	mov	r0, r3
34007e7a:	3710      	adds	r7, #16
34007e7c:	46bd      	mov	sp, r7
34007e7e:	bd80      	pop	{r7, pc}
34007e80:	56028000 	.word	0x56028000

34007e84 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34007e84:	b480      	push	{r7}
34007e86:	b089      	sub	sp, #36	@ 0x24
34007e88:	af00      	add	r7, sp, #0
34007e8a:	6078      	str	r0, [r7, #4]
34007e8c:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
34007e8e:	2300      	movs	r3, #0
34007e90:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34007e92:	687b      	ldr	r3, [r7, #4]
34007e94:	011a      	lsls	r2, r3, #4
34007e96:	4b34      	ldr	r3, [pc, #208]	@ (34007f68 <RCC_PLL_IsNewConfig+0xe4>)
34007e98:	4413      	add	r3, r2
34007e9a:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34007e9c:	687b      	ldr	r3, [r7, #4]
34007e9e:	011a      	lsls	r2, r3, #4
34007ea0:	4b32      	ldr	r3, [pc, #200]	@ (34007f6c <RCC_PLL_IsNewConfig+0xe8>)
34007ea2:	4413      	add	r3, r2
34007ea4:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34007ea6:	687b      	ldr	r3, [r7, #4]
34007ea8:	011a      	lsls	r2, r3, #4
34007eaa:	4b31      	ldr	r3, [pc, #196]	@ (34007f70 <RCC_PLL_IsNewConfig+0xec>)
34007eac:	4413      	add	r3, r2
34007eae:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34007eb0:	697b      	ldr	r3, [r7, #20]
34007eb2:	681b      	ldr	r3, [r3, #0]
34007eb4:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
34007eb8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34007ebc:	683a      	ldr	r2, [r7, #0]
34007ebe:	6851      	ldr	r1, [r2, #4]
34007ec0:	683a      	ldr	r2, [r7, #0]
34007ec2:	6892      	ldr	r2, [r2, #8]
34007ec4:	0512      	lsls	r2, r2, #20
34007ec6:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34007ec8:	683a      	ldr	r2, [r7, #0]
34007eca:	6912      	ldr	r2, [r2, #16]
34007ecc:	0212      	lsls	r2, r2, #8
34007ece:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34007ed0:	4293      	cmp	r3, r2
34007ed2:	d002      	beq.n	34007eda <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
34007ed4:	2301      	movs	r3, #1
34007ed6:	61fb      	str	r3, [r7, #28]
34007ed8:	e03e      	b.n	34007f58 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34007eda:	693b      	ldr	r3, [r7, #16]
34007edc:	681b      	ldr	r3, [r3, #0]
34007ede:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
34007ee2:	683b      	ldr	r3, [r7, #0]
34007ee4:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34007ee6:	429a      	cmp	r2, r3
34007ee8:	d002      	beq.n	34007ef0 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
34007eea:	2301      	movs	r3, #1
34007eec:	61fb      	str	r3, [r7, #28]
34007eee:	e033      	b.n	34007f58 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34007ef0:	68fb      	ldr	r3, [r7, #12]
34007ef2:	681b      	ldr	r3, [r3, #0]
34007ef4:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34007ef8:	683b      	ldr	r3, [r7, #0]
34007efa:	695b      	ldr	r3, [r3, #20]
34007efc:	06d9      	lsls	r1, r3, #27
34007efe:	683b      	ldr	r3, [r7, #0]
34007f00:	699b      	ldr	r3, [r3, #24]
34007f02:	061b      	lsls	r3, r3, #24
34007f04:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34007f06:	429a      	cmp	r2, r3
34007f08:	d002      	beq.n	34007f10 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
34007f0a:	2301      	movs	r3, #1
34007f0c:	61fb      	str	r3, [r7, #28]
34007f0e:	e023      	b.n	34007f58 <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007f10:	4b18      	ldr	r3, [pc, #96]	@ (34007f74 <RCC_PLL_IsNewConfig+0xf0>)
34007f12:	685a      	ldr	r2, [r3, #4]
34007f14:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007f18:	687b      	ldr	r3, [r7, #4]
34007f1a:	fa01 f303 	lsl.w	r3, r1, r3
34007f1e:	401a      	ands	r2, r3
34007f20:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007f24:	687b      	ldr	r3, [r7, #4]
34007f26:	fa01 f303 	lsl.w	r3, r1, r3
34007f2a:	429a      	cmp	r2, r3
34007f2c:	d102      	bne.n	34007f34 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
34007f2e:	2302      	movs	r3, #2
34007f30:	61bb      	str	r3, [r7, #24]
34007f32:	e00a      	b.n	34007f4a <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34007f34:	697b      	ldr	r3, [r7, #20]
34007f36:	681b      	ldr	r3, [r3, #0]
34007f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34007f3c:	2b00      	cmp	r3, #0
34007f3e:	d002      	beq.n	34007f46 <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
34007f40:	2303      	movs	r3, #3
34007f42:	61bb      	str	r3, [r7, #24]
34007f44:	e001      	b.n	34007f4a <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
34007f46:	2301      	movs	r3, #1
34007f48:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34007f4a:	683b      	ldr	r3, [r7, #0]
34007f4c:	681b      	ldr	r3, [r3, #0]
34007f4e:	69ba      	ldr	r2, [r7, #24]
34007f50:	429a      	cmp	r2, r3
34007f52:	d001      	beq.n	34007f58 <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
34007f54:	2301      	movs	r3, #1
34007f56:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
34007f58:	69fb      	ldr	r3, [r7, #28]
}
34007f5a:	4618      	mov	r0, r3
34007f5c:	3724      	adds	r7, #36	@ 0x24
34007f5e:	46bd      	mov	sp, r7
34007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
34007f64:	4770      	bx	lr
34007f66:	bf00      	nop
34007f68:	56028080 	.word	0x56028080
34007f6c:	56028084 	.word	0x56028084
34007f70:	56028088 	.word	0x56028088
34007f74:	56028000 	.word	0x56028000

34007f78 <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
34007f78:	b580      	push	{r7, lr}
34007f7a:	b084      	sub	sp, #16
34007f7c:	af00      	add	r7, sp, #0
34007f7e:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
34007f80:	2301      	movs	r3, #1
34007f82:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
34007f84:	687b      	ldr	r3, [r7, #4]
34007f86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007f8a:	d01b      	beq.n	34007fc4 <RCC_PLL_Source_IsReady+0x4c>
34007f8c:	687b      	ldr	r3, [r7, #4]
34007f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007f92:	d81f      	bhi.n	34007fd4 <RCC_PLL_Source_IsReady+0x5c>
34007f94:	687b      	ldr	r3, [r7, #4]
34007f96:	2b00      	cmp	r3, #0
34007f98:	d004      	beq.n	34007fa4 <RCC_PLL_Source_IsReady+0x2c>
34007f9a:	687b      	ldr	r3, [r7, #4]
34007f9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007fa0:	d008      	beq.n	34007fb4 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
34007fa2:	e017      	b.n	34007fd4 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
34007fa4:	f7fe f8b6 	bl	34006114 <LL_RCC_HSI_IsReady>
34007fa8:	4603      	mov	r3, r0
34007faa:	2b00      	cmp	r3, #0
34007fac:	d114      	bne.n	34007fd8 <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
34007fae:	2300      	movs	r3, #0
34007fb0:	60fb      	str	r3, [r7, #12]
      break;
34007fb2:	e011      	b.n	34007fd8 <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
34007fb4:	f7fe f916 	bl	340061e4 <LL_RCC_MSI_IsReady>
34007fb8:	4603      	mov	r3, r0
34007fba:	2b00      	cmp	r3, #0
34007fbc:	d10e      	bne.n	34007fdc <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
34007fbe:	2300      	movs	r3, #0
34007fc0:	60fb      	str	r3, [r7, #12]
      break;
34007fc2:	e00b      	b.n	34007fdc <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
34007fc4:	f7fe f876 	bl	340060b4 <LL_RCC_HSE_IsReady>
34007fc8:	4603      	mov	r3, r0
34007fca:	2b00      	cmp	r3, #0
34007fcc:	d108      	bne.n	34007fe0 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
34007fce:	2300      	movs	r3, #0
34007fd0:	60fb      	str	r3, [r7, #12]
      break;
34007fd2:	e005      	b.n	34007fe0 <RCC_PLL_Source_IsReady+0x68>
      break;
34007fd4:	bf00      	nop
34007fd6:	e004      	b.n	34007fe2 <RCC_PLL_Source_IsReady+0x6a>
      break;
34007fd8:	bf00      	nop
34007fda:	e002      	b.n	34007fe2 <RCC_PLL_Source_IsReady+0x6a>
      break;
34007fdc:	bf00      	nop
34007fde:	e000      	b.n	34007fe2 <RCC_PLL_Source_IsReady+0x6a>
      break;
34007fe0:	bf00      	nop
  }

  return ret;
34007fe2:	68fb      	ldr	r3, [r7, #12]
}
34007fe4:	4618      	mov	r0, r3
34007fe6:	3710      	adds	r7, #16
34007fe8:	46bd      	mov	sp, r7
34007fea:	bd80      	pop	{r7, pc}

34007fec <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
34007fec:	b580      	push	{r7, lr}
34007fee:	b084      	sub	sp, #16
34007ff0:	af00      	add	r7, sp, #0
34007ff2:	6078      	str	r0, [r7, #4]
34007ff4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
34007ff6:	2301      	movs	r3, #1
34007ff8:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34007ffa:	687b      	ldr	r3, [r7, #4]
34007ffc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008000:	d03a      	beq.n	34008078 <RCC_IC_CheckPLLSources+0x8c>
34008002:	687b      	ldr	r3, [r7, #4]
34008004:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008008:	d843      	bhi.n	34008092 <RCC_IC_CheckPLLSources+0xa6>
3400800a:	687b      	ldr	r3, [r7, #4]
3400800c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008010:	d025      	beq.n	3400805e <RCC_IC_CheckPLLSources+0x72>
34008012:	687b      	ldr	r3, [r7, #4]
34008014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008018:	d83b      	bhi.n	34008092 <RCC_IC_CheckPLLSources+0xa6>
3400801a:	687b      	ldr	r3, [r7, #4]
3400801c:	2b00      	cmp	r3, #0
3400801e:	d004      	beq.n	3400802a <RCC_IC_CheckPLLSources+0x3e>
34008020:	687b      	ldr	r3, [r7, #4]
34008022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008026:	d00d      	beq.n	34008044 <RCC_IC_CheckPLLSources+0x58>
34008028:	e033      	b.n	34008092 <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3400802a:	f7fe f98d 	bl	34006348 <LL_RCC_PLL1_IsReady>
3400802e:	4603      	mov	r3, r0
34008030:	2b00      	cmp	r3, #0
34008032:	d131      	bne.n	34008098 <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34008034:	f7fe f99c 	bl	34006370 <LL_RCC_PLL1_IsEnabledBypass>
34008038:	4603      	mov	r3, r0
3400803a:	2b00      	cmp	r3, #0
3400803c:	d12c      	bne.n	34008098 <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
3400803e:	2300      	movs	r3, #0
34008040:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008042:	e029      	b.n	34008098 <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34008044:	f7fe f9b6 	bl	340063b4 <LL_RCC_PLL2_IsReady>
34008048:	4603      	mov	r3, r0
3400804a:	2b00      	cmp	r3, #0
3400804c:	d126      	bne.n	3400809c <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3400804e:	f7fe f9c5 	bl	340063dc <LL_RCC_PLL2_IsEnabledBypass>
34008052:	4603      	mov	r3, r0
34008054:	2b00      	cmp	r3, #0
34008056:	d121      	bne.n	3400809c <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
34008058:	2300      	movs	r3, #0
3400805a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400805c:	e01e      	b.n	3400809c <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3400805e:	f7fe f9df 	bl	34006420 <LL_RCC_PLL3_IsReady>
34008062:	4603      	mov	r3, r0
34008064:	2b00      	cmp	r3, #0
34008066:	d11b      	bne.n	340080a0 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34008068:	f7fe f9ee 	bl	34006448 <LL_RCC_PLL3_IsEnabledBypass>
3400806c:	4603      	mov	r3, r0
3400806e:	2b00      	cmp	r3, #0
34008070:	d116      	bne.n	340080a0 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
34008072:	2300      	movs	r3, #0
34008074:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008076:	e013      	b.n	340080a0 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34008078:	f7fe fa08 	bl	3400648c <LL_RCC_PLL4_IsReady>
3400807c:	4603      	mov	r3, r0
3400807e:	2b00      	cmp	r3, #0
34008080:	d110      	bne.n	340080a4 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
34008082:	f7fe fa17 	bl	340064b4 <LL_RCC_PLL4_IsEnabledBypass>
34008086:	4603      	mov	r3, r0
34008088:	2b00      	cmp	r3, #0
3400808a:	d10b      	bne.n	340080a4 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
3400808c:	2300      	movs	r3, #0
3400808e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008090:	e008      	b.n	340080a4 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
34008092:	2300      	movs	r3, #0
34008094:	60fb      	str	r3, [r7, #12]
      break;
34008096:	e006      	b.n	340080a6 <RCC_IC_CheckPLLSources+0xba>
      break;
34008098:	bf00      	nop
3400809a:	e004      	b.n	340080a6 <RCC_IC_CheckPLLSources+0xba>
      break;
3400809c:	bf00      	nop
3400809e:	e002      	b.n	340080a6 <RCC_IC_CheckPLLSources+0xba>
      break;
340080a0:	bf00      	nop
340080a2:	e000      	b.n	340080a6 <RCC_IC_CheckPLLSources+0xba>
      break;
340080a4:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
340080a6:	683b      	ldr	r3, [r7, #0]
340080a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340080ac:	d03a      	beq.n	34008124 <RCC_IC_CheckPLLSources+0x138>
340080ae:	683b      	ldr	r3, [r7, #0]
340080b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340080b4:	d843      	bhi.n	3400813e <RCC_IC_CheckPLLSources+0x152>
340080b6:	683b      	ldr	r3, [r7, #0]
340080b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340080bc:	d025      	beq.n	3400810a <RCC_IC_CheckPLLSources+0x11e>
340080be:	683b      	ldr	r3, [r7, #0]
340080c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340080c4:	d83b      	bhi.n	3400813e <RCC_IC_CheckPLLSources+0x152>
340080c6:	683b      	ldr	r3, [r7, #0]
340080c8:	2b00      	cmp	r3, #0
340080ca:	d004      	beq.n	340080d6 <RCC_IC_CheckPLLSources+0xea>
340080cc:	683b      	ldr	r3, [r7, #0]
340080ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340080d2:	d00d      	beq.n	340080f0 <RCC_IC_CheckPLLSources+0x104>
340080d4:	e033      	b.n	3400813e <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
340080d6:	f7fe f937 	bl	34006348 <LL_RCC_PLL1_IsReady>
340080da:	4603      	mov	r3, r0
340080dc:	2b00      	cmp	r3, #0
340080de:	d131      	bne.n	34008144 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
340080e0:	f7fe f946 	bl	34006370 <LL_RCC_PLL1_IsEnabledBypass>
340080e4:	4603      	mov	r3, r0
340080e6:	2b00      	cmp	r3, #0
340080e8:	d12c      	bne.n	34008144 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
340080ea:	2300      	movs	r3, #0
340080ec:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
340080ee:	e029      	b.n	34008144 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
340080f0:	f7fe f960 	bl	340063b4 <LL_RCC_PLL2_IsReady>
340080f4:	4603      	mov	r3, r0
340080f6:	2b00      	cmp	r3, #0
340080f8:	d126      	bne.n	34008148 <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
340080fa:	f7fe f96f 	bl	340063dc <LL_RCC_PLL2_IsEnabledBypass>
340080fe:	4603      	mov	r3, r0
34008100:	2b00      	cmp	r3, #0
34008102:	d121      	bne.n	34008148 <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
34008104:	2300      	movs	r3, #0
34008106:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008108:	e01e      	b.n	34008148 <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3400810a:	f7fe f989 	bl	34006420 <LL_RCC_PLL3_IsReady>
3400810e:	4603      	mov	r3, r0
34008110:	2b00      	cmp	r3, #0
34008112:	d11b      	bne.n	3400814c <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34008114:	f7fe f998 	bl	34006448 <LL_RCC_PLL3_IsEnabledBypass>
34008118:	4603      	mov	r3, r0
3400811a:	2b00      	cmp	r3, #0
3400811c:	d116      	bne.n	3400814c <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
3400811e:	2300      	movs	r3, #0
34008120:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008122:	e013      	b.n	3400814c <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34008124:	f7fe f9b2 	bl	3400648c <LL_RCC_PLL4_IsReady>
34008128:	4603      	mov	r3, r0
3400812a:	2b00      	cmp	r3, #0
3400812c:	d110      	bne.n	34008150 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3400812e:	f7fe f9c1 	bl	340064b4 <LL_RCC_PLL4_IsEnabledBypass>
34008132:	4603      	mov	r3, r0
34008134:	2b00      	cmp	r3, #0
34008136:	d10b      	bne.n	34008150 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
34008138:	2300      	movs	r3, #0
3400813a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400813c:	e008      	b.n	34008150 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
3400813e:	2300      	movs	r3, #0
34008140:	60fb      	str	r3, [r7, #12]
      break;
34008142:	e006      	b.n	34008152 <RCC_IC_CheckPLLSources+0x166>
      break;
34008144:	bf00      	nop
34008146:	e004      	b.n	34008152 <RCC_IC_CheckPLLSources+0x166>
      break;
34008148:	bf00      	nop
3400814a:	e002      	b.n	34008152 <RCC_IC_CheckPLLSources+0x166>
      break;
3400814c:	bf00      	nop
3400814e:	e000      	b.n	34008152 <RCC_IC_CheckPLLSources+0x166>
      break;
34008150:	bf00      	nop
  }

  return ret;
34008152:	68fb      	ldr	r3, [r7, #12]
}
34008154:	4618      	mov	r0, r3
34008156:	3710      	adds	r7, #16
34008158:	46bd      	mov	sp, r7
3400815a:	bd80      	pop	{r7, pc}

3400815c <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
3400815c:	b480      	push	{r7}
3400815e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34008160:	4b05      	ldr	r3, [pc, #20]	@ (34008178 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34008162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34008164:	4a04      	ldr	r2, [pc, #16]	@ (34008178 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34008166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3400816a:	6553      	str	r3, [r2, #84]	@ 0x54
}
3400816c:	bf00      	nop
3400816e:	46bd      	mov	sp, r7
34008170:	f85d 7b04 	ldr.w	r7, [sp], #4
34008174:	4770      	bx	lr
34008176:	bf00      	nop
34008178:	56028000 	.word	0x56028000

3400817c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
3400817c:	b480      	push	{r7}
3400817e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34008180:	4b05      	ldr	r3, [pc, #20]	@ (34008198 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34008182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34008184:	4a04      	ldr	r2, [pc, #16]	@ (34008198 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34008186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400818a:	6553      	str	r3, [r2, #84]	@ 0x54
}
3400818c:	bf00      	nop
3400818e:	46bd      	mov	sp, r7
34008190:	f85d 7b04 	ldr.w	r7, [sp], #4
34008194:	4770      	bx	lr
34008196:	bf00      	nop
34008198:	56028000 	.word	0x56028000

3400819c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
3400819c:	b480      	push	{r7}
3400819e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
340081a0:	4b06      	ldr	r3, [pc, #24]	@ (340081bc <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
340081a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
340081a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340081a8:	2b40      	cmp	r3, #64	@ 0x40
340081aa:	d101      	bne.n	340081b0 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
340081ac:	2301      	movs	r3, #1
340081ae:	e000      	b.n	340081b2 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
340081b0:	2300      	movs	r3, #0
}
340081b2:	4618      	mov	r0, r3
340081b4:	46bd      	mov	sp, r7
340081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
340081ba:	4770      	bx	lr
340081bc:	56028000 	.word	0x56028000

340081c0 <LL_RCC_HSE_IsReady>:
{
340081c0:	b480      	push	{r7}
340081c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340081c4:	4b06      	ldr	r3, [pc, #24]	@ (340081e0 <LL_RCC_HSE_IsReady+0x20>)
340081c6:	685b      	ldr	r3, [r3, #4]
340081c8:	f003 0310 	and.w	r3, r3, #16
340081cc:	2b00      	cmp	r3, #0
340081ce:	d001      	beq.n	340081d4 <LL_RCC_HSE_IsReady+0x14>
340081d0:	2301      	movs	r3, #1
340081d2:	e000      	b.n	340081d6 <LL_RCC_HSE_IsReady+0x16>
340081d4:	2300      	movs	r3, #0
}
340081d6:	4618      	mov	r0, r3
340081d8:	46bd      	mov	sp, r7
340081da:	f85d 7b04 	ldr.w	r7, [sp], #4
340081de:	4770      	bx	lr
340081e0:	56028000 	.word	0x56028000

340081e4 <LL_RCC_HSI_IsReady>:
{
340081e4:	b480      	push	{r7}
340081e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
340081e8:	4b06      	ldr	r3, [pc, #24]	@ (34008204 <LL_RCC_HSI_IsReady+0x20>)
340081ea:	685b      	ldr	r3, [r3, #4]
340081ec:	f003 0308 	and.w	r3, r3, #8
340081f0:	2b00      	cmp	r3, #0
340081f2:	d001      	beq.n	340081f8 <LL_RCC_HSI_IsReady+0x14>
340081f4:	2301      	movs	r3, #1
340081f6:	e000      	b.n	340081fa <LL_RCC_HSI_IsReady+0x16>
340081f8:	2300      	movs	r3, #0
}
340081fa:	4618      	mov	r0, r3
340081fc:	46bd      	mov	sp, r7
340081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34008202:	4770      	bx	lr
34008204:	56028000 	.word	0x56028000

34008208 <LL_RCC_HSI_GetDivider>:
{
34008208:	b480      	push	{r7}
3400820a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400820c:	4b04      	ldr	r3, [pc, #16]	@ (34008220 <LL_RCC_HSI_GetDivider+0x18>)
3400820e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008210:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34008214:	4618      	mov	r0, r3
34008216:	46bd      	mov	sp, r7
34008218:	f85d 7b04 	ldr.w	r7, [sp], #4
3400821c:	4770      	bx	lr
3400821e:	bf00      	nop
34008220:	56028000 	.word	0x56028000

34008224 <LL_RCC_MSI_IsReady>:
{
34008224:	b480      	push	{r7}
34008226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34008228:	4b06      	ldr	r3, [pc, #24]	@ (34008244 <LL_RCC_MSI_IsReady+0x20>)
3400822a:	685b      	ldr	r3, [r3, #4]
3400822c:	f003 0304 	and.w	r3, r3, #4
34008230:	2b00      	cmp	r3, #0
34008232:	d001      	beq.n	34008238 <LL_RCC_MSI_IsReady+0x14>
34008234:	2301      	movs	r3, #1
34008236:	e000      	b.n	3400823a <LL_RCC_MSI_IsReady+0x16>
34008238:	2300      	movs	r3, #0
}
3400823a:	4618      	mov	r0, r3
3400823c:	46bd      	mov	sp, r7
3400823e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008242:	4770      	bx	lr
34008244:	56028000 	.word	0x56028000

34008248 <LL_RCC_MSI_GetFrequency>:
{
34008248:	b480      	push	{r7}
3400824a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3400824c:	4b04      	ldr	r3, [pc, #16]	@ (34008260 <LL_RCC_MSI_GetFrequency+0x18>)
3400824e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34008250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34008254:	4618      	mov	r0, r3
34008256:	46bd      	mov	sp, r7
34008258:	f85d 7b04 	ldr.w	r7, [sp], #4
3400825c:	4770      	bx	lr
3400825e:	bf00      	nop
34008260:	56028000 	.word	0x56028000

34008264 <LL_RCC_LSE_IsReady>:
{
34008264:	b480      	push	{r7}
34008266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34008268:	4b06      	ldr	r3, [pc, #24]	@ (34008284 <LL_RCC_LSE_IsReady+0x20>)
3400826a:	685b      	ldr	r3, [r3, #4]
3400826c:	f003 0302 	and.w	r3, r3, #2
34008270:	2b00      	cmp	r3, #0
34008272:	d001      	beq.n	34008278 <LL_RCC_LSE_IsReady+0x14>
34008274:	2301      	movs	r3, #1
34008276:	e000      	b.n	3400827a <LL_RCC_LSE_IsReady+0x16>
34008278:	2300      	movs	r3, #0
}
3400827a:	4618      	mov	r0, r3
3400827c:	46bd      	mov	sp, r7
3400827e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008282:	4770      	bx	lr
34008284:	56028000 	.word	0x56028000

34008288 <LL_RCC_LSI_IsReady>:
{
34008288:	b480      	push	{r7}
3400828a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3400828c:	4b04      	ldr	r3, [pc, #16]	@ (340082a0 <LL_RCC_LSI_IsReady+0x18>)
3400828e:	685b      	ldr	r3, [r3, #4]
34008290:	f003 0301 	and.w	r3, r3, #1
}
34008294:	4618      	mov	r0, r3
34008296:	46bd      	mov	sp, r7
34008298:	f85d 7b04 	ldr.w	r7, [sp], #4
3400829c:	4770      	bx	lr
3400829e:	bf00      	nop
340082a0:	56028000 	.word	0x56028000

340082a4 <LL_RCC_GetAHBPrescaler>:
{
340082a4:	b480      	push	{r7}
340082a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
340082a8:	4b04      	ldr	r3, [pc, #16]	@ (340082bc <LL_RCC_GetAHBPrescaler+0x18>)
340082aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340082ac:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
340082b0:	4618      	mov	r0, r3
340082b2:	46bd      	mov	sp, r7
340082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
340082b8:	4770      	bx	lr
340082ba:	bf00      	nop
340082bc:	56028000 	.word	0x56028000

340082c0 <LL_RCC_GetAPB1Prescaler>:
{
340082c0:	b480      	push	{r7}
340082c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340082c4:	4b04      	ldr	r3, [pc, #16]	@ (340082d8 <LL_RCC_GetAPB1Prescaler+0x18>)
340082c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340082c8:	f003 0307 	and.w	r3, r3, #7
}
340082cc:	4618      	mov	r0, r3
340082ce:	46bd      	mov	sp, r7
340082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
340082d4:	4770      	bx	lr
340082d6:	bf00      	nop
340082d8:	56028000 	.word	0x56028000

340082dc <LL_RCC_GetAPB2Prescaler>:
{
340082dc:	b480      	push	{r7}
340082de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
340082e0:	4b04      	ldr	r3, [pc, #16]	@ (340082f4 <LL_RCC_GetAPB2Prescaler+0x18>)
340082e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340082e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
340082e8:	4618      	mov	r0, r3
340082ea:	46bd      	mov	sp, r7
340082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
340082f0:	4770      	bx	lr
340082f2:	bf00      	nop
340082f4:	56028000 	.word	0x56028000

340082f8 <LL_RCC_GetAPB4Prescaler>:
{
340082f8:	b480      	push	{r7}
340082fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
340082fc:	4b04      	ldr	r3, [pc, #16]	@ (34008310 <LL_RCC_GetAPB4Prescaler+0x18>)
340082fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008300:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
34008304:	4618      	mov	r0, r3
34008306:	46bd      	mov	sp, r7
34008308:	f85d 7b04 	ldr.w	r7, [sp], #4
3400830c:	4770      	bx	lr
3400830e:	bf00      	nop
34008310:	56028000 	.word	0x56028000

34008314 <LL_RCC_GetAPB5Prescaler>:
{
34008314:	b480      	push	{r7}
34008316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34008318:	4b04      	ldr	r3, [pc, #16]	@ (3400832c <LL_RCC_GetAPB5Prescaler+0x18>)
3400831a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400831c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34008320:	4618      	mov	r0, r3
34008322:	46bd      	mov	sp, r7
34008324:	f85d 7b04 	ldr.w	r7, [sp], #4
34008328:	4770      	bx	lr
3400832a:	bf00      	nop
3400832c:	56028000 	.word	0x56028000

34008330 <LL_RCC_SetClockSource>:
{
34008330:	b480      	push	{r7}
34008332:	b085      	sub	sp, #20
34008334:	af00      	add	r7, sp, #0
34008336:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34008338:	687b      	ldr	r3, [r7, #4]
3400833a:	b2da      	uxtb	r2, r3
3400833c:	4b10      	ldr	r3, [pc, #64]	@ (34008380 <LL_RCC_SetClockSource+0x50>)
3400833e:	4413      	add	r3, r2
34008340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34008342:	68fb      	ldr	r3, [r7, #12]
34008344:	681a      	ldr	r2, [r3, #0]
34008346:	687b      	ldr	r3, [r7, #4]
34008348:	0e19      	lsrs	r1, r3, #24
3400834a:	687b      	ldr	r3, [r7, #4]
3400834c:	0a1b      	lsrs	r3, r3, #8
3400834e:	f003 031f 	and.w	r3, r3, #31
34008352:	fa01 f303 	lsl.w	r3, r1, r3
34008356:	43db      	mvns	r3, r3
34008358:	401a      	ands	r2, r3
3400835a:	687b      	ldr	r3, [r7, #4]
3400835c:	0c1b      	lsrs	r3, r3, #16
3400835e:	b2d9      	uxtb	r1, r3
34008360:	687b      	ldr	r3, [r7, #4]
34008362:	0a1b      	lsrs	r3, r3, #8
34008364:	f003 031f 	and.w	r3, r3, #31
34008368:	fa01 f303 	lsl.w	r3, r1, r3
3400836c:	431a      	orrs	r2, r3
3400836e:	68fb      	ldr	r3, [r7, #12]
34008370:	601a      	str	r2, [r3, #0]
}
34008372:	bf00      	nop
34008374:	3714      	adds	r7, #20
34008376:	46bd      	mov	sp, r7
34008378:	f85d 7b04 	ldr.w	r7, [sp], #4
3400837c:	4770      	bx	lr
3400837e:	bf00      	nop
34008380:	56028144 	.word	0x56028144

34008384 <LL_RCC_GetADCPrescaler>:
{
34008384:	b480      	push	{r7}
34008386:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34008388:	4b04      	ldr	r3, [pc, #16]	@ (3400839c <LL_RCC_GetADCPrescaler+0x18>)
3400838a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400838e:	0a1b      	lsrs	r3, r3, #8
34008390:	b2db      	uxtb	r3, r3
}
34008392:	4618      	mov	r0, r3
34008394:	46bd      	mov	sp, r7
34008396:	f85d 7b04 	ldr.w	r7, [sp], #4
3400839a:	4770      	bx	lr
3400839c:	56028000 	.word	0x56028000

340083a0 <LL_RCC_SetADFClockSource>:
{
340083a0:	b480      	push	{r7}
340083a2:	b083      	sub	sp, #12
340083a4:	af00      	add	r7, sp, #0
340083a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
340083a8:	4b07      	ldr	r3, [pc, #28]	@ (340083c8 <LL_RCC_SetADFClockSource+0x28>)
340083aa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340083ae:	f023 0207 	bic.w	r2, r3, #7
340083b2:	4905      	ldr	r1, [pc, #20]	@ (340083c8 <LL_RCC_SetADFClockSource+0x28>)
340083b4:	687b      	ldr	r3, [r7, #4]
340083b6:	4313      	orrs	r3, r2
340083b8:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
340083bc:	bf00      	nop
340083be:	370c      	adds	r7, #12
340083c0:	46bd      	mov	sp, r7
340083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340083c6:	4770      	bx	lr
340083c8:	56028000 	.word	0x56028000

340083cc <LL_RCC_SetCLKPClockSource>:
{
340083cc:	b480      	push	{r7}
340083ce:	b083      	sub	sp, #12
340083d0:	af00      	add	r7, sp, #0
340083d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
340083d4:	4b07      	ldr	r3, [pc, #28]	@ (340083f4 <LL_RCC_SetCLKPClockSource+0x28>)
340083d6:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340083da:	f023 0207 	bic.w	r2, r3, #7
340083de:	4905      	ldr	r1, [pc, #20]	@ (340083f4 <LL_RCC_SetCLKPClockSource+0x28>)
340083e0:	687b      	ldr	r3, [r7, #4]
340083e2:	4313      	orrs	r3, r2
340083e4:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
340083e8:	bf00      	nop
340083ea:	370c      	adds	r7, #12
340083ec:	46bd      	mov	sp, r7
340083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
340083f2:	4770      	bx	lr
340083f4:	56028000 	.word	0x56028000

340083f8 <LL_RCC_SetDCMIPPClockSource>:
{
340083f8:	b480      	push	{r7}
340083fa:	b083      	sub	sp, #12
340083fc:	af00      	add	r7, sp, #0
340083fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34008400:	4b07      	ldr	r3, [pc, #28]	@ (34008420 <LL_RCC_SetDCMIPPClockSource+0x28>)
34008402:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34008406:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
3400840a:	4905      	ldr	r1, [pc, #20]	@ (34008420 <LL_RCC_SetDCMIPPClockSource+0x28>)
3400840c:	687b      	ldr	r3, [r7, #4]
3400840e:	4313      	orrs	r3, r2
34008410:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34008414:	bf00      	nop
34008416:	370c      	adds	r7, #12
34008418:	46bd      	mov	sp, r7
3400841a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400841e:	4770      	bx	lr
34008420:	56028000 	.word	0x56028000

34008424 <LL_RCC_SetETHClockSource>:
{
34008424:	b480      	push	{r7}
34008426:	b083      	sub	sp, #12
34008428:	af00      	add	r7, sp, #0
3400842a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
3400842c:	4b07      	ldr	r3, [pc, #28]	@ (3400844c <LL_RCC_SetETHClockSource+0x28>)
3400842e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008432:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34008436:	4905      	ldr	r1, [pc, #20]	@ (3400844c <LL_RCC_SetETHClockSource+0x28>)
34008438:	687b      	ldr	r3, [r7, #4]
3400843a:	4313      	orrs	r3, r2
3400843c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34008440:	bf00      	nop
34008442:	370c      	adds	r7, #12
34008444:	46bd      	mov	sp, r7
34008446:	f85d 7b04 	ldr.w	r7, [sp], #4
3400844a:	4770      	bx	lr
3400844c:	56028000 	.word	0x56028000

34008450 <LL_RCC_SetETHPHYInterface>:
{
34008450:	b480      	push	{r7}
34008452:	b083      	sub	sp, #12
34008454:	af00      	add	r7, sp, #0
34008456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34008458:	4b07      	ldr	r3, [pc, #28]	@ (34008478 <LL_RCC_SetETHPHYInterface+0x28>)
3400845a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400845e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34008462:	4905      	ldr	r1, [pc, #20]	@ (34008478 <LL_RCC_SetETHPHYInterface+0x28>)
34008464:	687b      	ldr	r3, [r7, #4]
34008466:	4313      	orrs	r3, r2
34008468:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3400846c:	bf00      	nop
3400846e:	370c      	adds	r7, #12
34008470:	46bd      	mov	sp, r7
34008472:	f85d 7b04 	ldr.w	r7, [sp], #4
34008476:	4770      	bx	lr
34008478:	56028000 	.word	0x56028000

3400847c <LL_RCC_GetETH1PTPDivider>:
{
3400847c:	b480      	push	{r7}
3400847e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34008480:	4b04      	ldr	r3, [pc, #16]	@ (34008494 <LL_RCC_GetETH1PTPDivider+0x18>)
34008482:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008486:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
3400848a:	4618      	mov	r0, r3
3400848c:	46bd      	mov	sp, r7
3400848e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008492:	4770      	bx	lr
34008494:	56028000 	.word	0x56028000

34008498 <LL_RCC_SetETHREFRXClockSource>:
{
34008498:	b480      	push	{r7}
3400849a:	b083      	sub	sp, #12
3400849c:	af00      	add	r7, sp, #0
3400849e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
340084a0:	4b07      	ldr	r3, [pc, #28]	@ (340084c0 <LL_RCC_SetETHREFRXClockSource+0x28>)
340084a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340084a6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
340084aa:	4905      	ldr	r1, [pc, #20]	@ (340084c0 <LL_RCC_SetETHREFRXClockSource+0x28>)
340084ac:	687b      	ldr	r3, [r7, #4]
340084ae:	4313      	orrs	r3, r2
340084b0:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
340084b4:	bf00      	nop
340084b6:	370c      	adds	r7, #12
340084b8:	46bd      	mov	sp, r7
340084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340084be:	4770      	bx	lr
340084c0:	56028000 	.word	0x56028000

340084c4 <LL_RCC_SetETHREFTXClockSource>:
{
340084c4:	b480      	push	{r7}
340084c6:	b083      	sub	sp, #12
340084c8:	af00      	add	r7, sp, #0
340084ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
340084cc:	4b07      	ldr	r3, [pc, #28]	@ (340084ec <LL_RCC_SetETHREFTXClockSource+0x28>)
340084ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340084d2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340084d6:	4905      	ldr	r1, [pc, #20]	@ (340084ec <LL_RCC_SetETHREFTXClockSource+0x28>)
340084d8:	687b      	ldr	r3, [r7, #4]
340084da:	4313      	orrs	r3, r2
340084dc:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
340084e0:	bf00      	nop
340084e2:	370c      	adds	r7, #12
340084e4:	46bd      	mov	sp, r7
340084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340084ea:	4770      	bx	lr
340084ec:	56028000 	.word	0x56028000

340084f0 <LL_RCC_SetFDCANClockSource>:
{
340084f0:	b480      	push	{r7}
340084f2:	b083      	sub	sp, #12
340084f4:	af00      	add	r7, sp, #0
340084f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
340084f8:	4b07      	ldr	r3, [pc, #28]	@ (34008518 <LL_RCC_SetFDCANClockSource+0x28>)
340084fa:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
340084fe:	f023 0203 	bic.w	r2, r3, #3
34008502:	4905      	ldr	r1, [pc, #20]	@ (34008518 <LL_RCC_SetFDCANClockSource+0x28>)
34008504:	687b      	ldr	r3, [r7, #4]
34008506:	4313      	orrs	r3, r2
34008508:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3400850c:	bf00      	nop
3400850e:	370c      	adds	r7, #12
34008510:	46bd      	mov	sp, r7
34008512:	f85d 7b04 	ldr.w	r7, [sp], #4
34008516:	4770      	bx	lr
34008518:	56028000 	.word	0x56028000

3400851c <LL_RCC_SetFMCClockSource>:
{
3400851c:	b480      	push	{r7}
3400851e:	b083      	sub	sp, #12
34008520:	af00      	add	r7, sp, #0
34008522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34008524:	4b07      	ldr	r3, [pc, #28]	@ (34008544 <LL_RCC_SetFMCClockSource+0x28>)
34008526:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400852a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3400852e:	4905      	ldr	r1, [pc, #20]	@ (34008544 <LL_RCC_SetFMCClockSource+0x28>)
34008530:	687b      	ldr	r3, [r7, #4]
34008532:	4313      	orrs	r3, r2
34008534:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34008538:	bf00      	nop
3400853a:	370c      	adds	r7, #12
3400853c:	46bd      	mov	sp, r7
3400853e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008542:	4770      	bx	lr
34008544:	56028000 	.word	0x56028000

34008548 <LL_RCC_SetI2CClockSource>:
{
34008548:	b580      	push	{r7, lr}
3400854a:	b082      	sub	sp, #8
3400854c:	af00      	add	r7, sp, #0
3400854e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008550:	6878      	ldr	r0, [r7, #4]
34008552:	f7ff feed 	bl	34008330 <LL_RCC_SetClockSource>
}
34008556:	bf00      	nop
34008558:	3708      	adds	r7, #8
3400855a:	46bd      	mov	sp, r7
3400855c:	bd80      	pop	{r7, pc}

3400855e <LL_RCC_SetI3CClockSource>:
{
3400855e:	b580      	push	{r7, lr}
34008560:	b082      	sub	sp, #8
34008562:	af00      	add	r7, sp, #0
34008564:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008566:	6878      	ldr	r0, [r7, #4]
34008568:	f7ff fee2 	bl	34008330 <LL_RCC_SetClockSource>
}
3400856c:	bf00      	nop
3400856e:	3708      	adds	r7, #8
34008570:	46bd      	mov	sp, r7
34008572:	bd80      	pop	{r7, pc}

34008574 <LL_RCC_SetLPTIMClockSource>:
{
34008574:	b580      	push	{r7, lr}
34008576:	b082      	sub	sp, #8
34008578:	af00      	add	r7, sp, #0
3400857a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400857c:	6878      	ldr	r0, [r7, #4]
3400857e:	f7ff fed7 	bl	34008330 <LL_RCC_SetClockSource>
}
34008582:	bf00      	nop
34008584:	3708      	adds	r7, #8
34008586:	46bd      	mov	sp, r7
34008588:	bd80      	pop	{r7, pc}
	...

3400858c <LL_RCC_SetLPUARTClockSource>:
{
3400858c:	b480      	push	{r7}
3400858e:	b083      	sub	sp, #12
34008590:	af00      	add	r7, sp, #0
34008592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34008594:	4b07      	ldr	r3, [pc, #28]	@ (340085b4 <LL_RCC_SetLPUARTClockSource+0x28>)
34008596:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400859a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
3400859e:	4905      	ldr	r1, [pc, #20]	@ (340085b4 <LL_RCC_SetLPUARTClockSource+0x28>)
340085a0:	687b      	ldr	r3, [r7, #4]
340085a2:	4313      	orrs	r3, r2
340085a4:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
340085a8:	bf00      	nop
340085aa:	370c      	adds	r7, #12
340085ac:	46bd      	mov	sp, r7
340085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
340085b2:	4770      	bx	lr
340085b4:	56028000 	.word	0x56028000

340085b8 <LL_RCC_SetLTDCClockSource>:
{
340085b8:	b480      	push	{r7}
340085ba:	b083      	sub	sp, #12
340085bc:	af00      	add	r7, sp, #0
340085be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
340085c0:	4b07      	ldr	r3, [pc, #28]	@ (340085e0 <LL_RCC_SetLTDCClockSource+0x28>)
340085c2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
340085c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
340085ca:	4905      	ldr	r1, [pc, #20]	@ (340085e0 <LL_RCC_SetLTDCClockSource+0x28>)
340085cc:	687b      	ldr	r3, [r7, #4]
340085ce:	4313      	orrs	r3, r2
340085d0:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
340085d4:	bf00      	nop
340085d6:	370c      	adds	r7, #12
340085d8:	46bd      	mov	sp, r7
340085da:	f85d 7b04 	ldr.w	r7, [sp], #4
340085de:	4770      	bx	lr
340085e0:	56028000 	.word	0x56028000

340085e4 <LL_RCC_SetMDFClockSource>:
{
340085e4:	b480      	push	{r7}
340085e6:	b083      	sub	sp, #12
340085e8:	af00      	add	r7, sp, #0
340085ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
340085ec:	4b07      	ldr	r3, [pc, #28]	@ (3400860c <LL_RCC_SetMDFClockSource+0x28>)
340085ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
340085f2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
340085f6:	4905      	ldr	r1, [pc, #20]	@ (3400860c <LL_RCC_SetMDFClockSource+0x28>)
340085f8:	687b      	ldr	r3, [r7, #4]
340085fa:	4313      	orrs	r3, r2
340085fc:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34008600:	bf00      	nop
34008602:	370c      	adds	r7, #12
34008604:	46bd      	mov	sp, r7
34008606:	f85d 7b04 	ldr.w	r7, [sp], #4
3400860a:	4770      	bx	lr
3400860c:	56028000 	.word	0x56028000

34008610 <LL_RCC_SetOTGPHYClockSource>:
{
34008610:	b580      	push	{r7, lr}
34008612:	b082      	sub	sp, #8
34008614:	af00      	add	r7, sp, #0
34008616:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008618:	6878      	ldr	r0, [r7, #4]
3400861a:	f7ff fe89 	bl	34008330 <LL_RCC_SetClockSource>
}
3400861e:	bf00      	nop
34008620:	3708      	adds	r7, #8
34008622:	46bd      	mov	sp, r7
34008624:	bd80      	pop	{r7, pc}

34008626 <LL_RCC_SetOTGPHYCKREFClockSource>:
{
34008626:	b580      	push	{r7, lr}
34008628:	b082      	sub	sp, #8
3400862a:	af00      	add	r7, sp, #0
3400862c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400862e:	6878      	ldr	r0, [r7, #4]
34008630:	f7ff fe7e 	bl	34008330 <LL_RCC_SetClockSource>
}
34008634:	bf00      	nop
34008636:	3708      	adds	r7, #8
34008638:	46bd      	mov	sp, r7
3400863a:	bd80      	pop	{r7, pc}

3400863c <LL_RCC_SetPSSIClockSource>:
{
3400863c:	b480      	push	{r7}
3400863e:	b083      	sub	sp, #12
34008640:	af00      	add	r7, sp, #0
34008642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34008644:	4b07      	ldr	r3, [pc, #28]	@ (34008664 <LL_RCC_SetPSSIClockSource+0x28>)
34008646:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400864a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3400864e:	4905      	ldr	r1, [pc, #20]	@ (34008664 <LL_RCC_SetPSSIClockSource+0x28>)
34008650:	687b      	ldr	r3, [r7, #4]
34008652:	4313      	orrs	r3, r2
34008654:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008658:	bf00      	nop
3400865a:	370c      	adds	r7, #12
3400865c:	46bd      	mov	sp, r7
3400865e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008662:	4770      	bx	lr
34008664:	56028000 	.word	0x56028000

34008668 <LL_RCC_SetSAIClockSource>:
{
34008668:	b580      	push	{r7, lr}
3400866a:	b082      	sub	sp, #8
3400866c:	af00      	add	r7, sp, #0
3400866e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008670:	6878      	ldr	r0, [r7, #4]
34008672:	f7ff fe5d 	bl	34008330 <LL_RCC_SetClockSource>
}
34008676:	bf00      	nop
34008678:	3708      	adds	r7, #8
3400867a:	46bd      	mov	sp, r7
3400867c:	bd80      	pop	{r7, pc}

3400867e <LL_RCC_SetSDMMCClockSource>:
{
3400867e:	b580      	push	{r7, lr}
34008680:	b082      	sub	sp, #8
34008682:	af00      	add	r7, sp, #0
34008684:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008686:	6878      	ldr	r0, [r7, #4]
34008688:	f7ff fe52 	bl	34008330 <LL_RCC_SetClockSource>
}
3400868c:	bf00      	nop
3400868e:	3708      	adds	r7, #8
34008690:	46bd      	mov	sp, r7
34008692:	bd80      	pop	{r7, pc}

34008694 <LL_RCC_SetSPDIFRXClockSource>:
{
34008694:	b480      	push	{r7}
34008696:	b083      	sub	sp, #12
34008698:	af00      	add	r7, sp, #0
3400869a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
3400869c:	4b07      	ldr	r3, [pc, #28]	@ (340086bc <LL_RCC_SetSPDIFRXClockSource+0x28>)
3400869e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
340086a2:	f023 0207 	bic.w	r2, r3, #7
340086a6:	4905      	ldr	r1, [pc, #20]	@ (340086bc <LL_RCC_SetSPDIFRXClockSource+0x28>)
340086a8:	687b      	ldr	r3, [r7, #4]
340086aa:	4313      	orrs	r3, r2
340086ac:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
340086b0:	bf00      	nop
340086b2:	370c      	adds	r7, #12
340086b4:	46bd      	mov	sp, r7
340086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
340086ba:	4770      	bx	lr
340086bc:	56028000 	.word	0x56028000

340086c0 <LL_RCC_SetSPIClockSource>:
{
340086c0:	b580      	push	{r7, lr}
340086c2:	b082      	sub	sp, #8
340086c4:	af00      	add	r7, sp, #0
340086c6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340086c8:	6878      	ldr	r0, [r7, #4]
340086ca:	f7ff fe31 	bl	34008330 <LL_RCC_SetClockSource>
}
340086ce:	bf00      	nop
340086d0:	3708      	adds	r7, #8
340086d2:	46bd      	mov	sp, r7
340086d4:	bd80      	pop	{r7, pc}

340086d6 <LL_RCC_SetUSARTClockSource>:
{
340086d6:	b580      	push	{r7, lr}
340086d8:	b082      	sub	sp, #8
340086da:	af00      	add	r7, sp, #0
340086dc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340086de:	6878      	ldr	r0, [r7, #4]
340086e0:	f7ff fe26 	bl	34008330 <LL_RCC_SetClockSource>
}
340086e4:	bf00      	nop
340086e6:	3708      	adds	r7, #8
340086e8:	46bd      	mov	sp, r7
340086ea:	bd80      	pop	{r7, pc}

340086ec <LL_RCC_SetXSPIClockSource>:
{
340086ec:	b580      	push	{r7, lr}
340086ee:	b082      	sub	sp, #8
340086f0:	af00      	add	r7, sp, #0
340086f2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340086f4:	6878      	ldr	r0, [r7, #4]
340086f6:	f7ff fe1b 	bl	34008330 <LL_RCC_SetClockSource>
}
340086fa:	bf00      	nop
340086fc:	3708      	adds	r7, #8
340086fe:	46bd      	mov	sp, r7
34008700:	bd80      	pop	{r7, pc}
	...

34008704 <LL_RCC_GetClockSource>:
{
34008704:	b480      	push	{r7}
34008706:	b085      	sub	sp, #20
34008708:	af00      	add	r7, sp, #0
3400870a:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
3400870c:	687b      	ldr	r3, [r7, #4]
3400870e:	b2da      	uxtb	r2, r3
34008710:	4b0e      	ldr	r3, [pc, #56]	@ (3400874c <LL_RCC_GetClockSource+0x48>)
34008712:	4413      	add	r3, r2
34008714:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34008716:	68fb      	ldr	r3, [r7, #12]
34008718:	681a      	ldr	r2, [r3, #0]
3400871a:	687b      	ldr	r3, [r7, #4]
3400871c:	0e19      	lsrs	r1, r3, #24
3400871e:	687b      	ldr	r3, [r7, #4]
34008720:	0a1b      	lsrs	r3, r3, #8
34008722:	f003 031f 	and.w	r3, r3, #31
34008726:	fa01 f303 	lsl.w	r3, r1, r3
3400872a:	401a      	ands	r2, r3
3400872c:	687b      	ldr	r3, [r7, #4]
3400872e:	0a1b      	lsrs	r3, r3, #8
34008730:	f003 031f 	and.w	r3, r3, #31
34008734:	fa22 f303 	lsr.w	r3, r2, r3
34008738:	041a      	lsls	r2, r3, #16
3400873a:	687b      	ldr	r3, [r7, #4]
3400873c:	4313      	orrs	r3, r2
}
3400873e:	4618      	mov	r0, r3
34008740:	3714      	adds	r7, #20
34008742:	46bd      	mov	sp, r7
34008744:	f85d 7b04 	ldr.w	r7, [sp], #4
34008748:	4770      	bx	lr
3400874a:	bf00      	nop
3400874c:	56028144 	.word	0x56028144

34008750 <LL_RCC_GetADCClockSource>:
{
34008750:	b480      	push	{r7}
34008752:	b083      	sub	sp, #12
34008754:	af00      	add	r7, sp, #0
34008756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34008758:	4b05      	ldr	r3, [pc, #20]	@ (34008770 <LL_RCC_GetADCClockSource+0x20>)
3400875a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400875e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34008762:	4618      	mov	r0, r3
34008764:	370c      	adds	r7, #12
34008766:	46bd      	mov	sp, r7
34008768:	f85d 7b04 	ldr.w	r7, [sp], #4
3400876c:	4770      	bx	lr
3400876e:	bf00      	nop
34008770:	56028000 	.word	0x56028000

34008774 <LL_RCC_GetADFClockSource>:
{
34008774:	b480      	push	{r7}
34008776:	b083      	sub	sp, #12
34008778:	af00      	add	r7, sp, #0
3400877a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
3400877c:	4b05      	ldr	r3, [pc, #20]	@ (34008794 <LL_RCC_GetADFClockSource+0x20>)
3400877e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34008782:	f003 0307 	and.w	r3, r3, #7
}
34008786:	4618      	mov	r0, r3
34008788:	370c      	adds	r7, #12
3400878a:	46bd      	mov	sp, r7
3400878c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008790:	4770      	bx	lr
34008792:	bf00      	nop
34008794:	56028000 	.word	0x56028000

34008798 <LL_RCC_GetCLKPClockSource>:
{
34008798:	b480      	push	{r7}
3400879a:	b083      	sub	sp, #12
3400879c:	af00      	add	r7, sp, #0
3400879e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
340087a0:	4b05      	ldr	r3, [pc, #20]	@ (340087b8 <LL_RCC_GetCLKPClockSource+0x20>)
340087a2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340087a6:	f003 0307 	and.w	r3, r3, #7
}
340087aa:	4618      	mov	r0, r3
340087ac:	370c      	adds	r7, #12
340087ae:	46bd      	mov	sp, r7
340087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
340087b4:	4770      	bx	lr
340087b6:	bf00      	nop
340087b8:	56028000 	.word	0x56028000

340087bc <LL_RCC_GetDCMIPPClockSource>:
{
340087bc:	b480      	push	{r7}
340087be:	b083      	sub	sp, #12
340087c0:	af00      	add	r7, sp, #0
340087c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
340087c4:	4b05      	ldr	r3, [pc, #20]	@ (340087dc <LL_RCC_GetDCMIPPClockSource+0x20>)
340087c6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340087ca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
340087ce:	4618      	mov	r0, r3
340087d0:	370c      	adds	r7, #12
340087d2:	46bd      	mov	sp, r7
340087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
340087d8:	4770      	bx	lr
340087da:	bf00      	nop
340087dc:	56028000 	.word	0x56028000

340087e0 <LL_RCC_GetETHClockSource>:
{
340087e0:	b480      	push	{r7}
340087e2:	b083      	sub	sp, #12
340087e4:	af00      	add	r7, sp, #0
340087e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
340087e8:	4b05      	ldr	r3, [pc, #20]	@ (34008800 <LL_RCC_GetETHClockSource+0x20>)
340087ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340087ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
340087f2:	4618      	mov	r0, r3
340087f4:	370c      	adds	r7, #12
340087f6:	46bd      	mov	sp, r7
340087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
340087fc:	4770      	bx	lr
340087fe:	bf00      	nop
34008800:	56028000 	.word	0x56028000

34008804 <LL_RCC_GetETHPTPClockSource>:
{
34008804:	b480      	push	{r7}
34008806:	b083      	sub	sp, #12
34008808:	af00      	add	r7, sp, #0
3400880a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
3400880c:	4b05      	ldr	r3, [pc, #20]	@ (34008824 <LL_RCC_GetETHPTPClockSource+0x20>)
3400880e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008812:	f003 0303 	and.w	r3, r3, #3
}
34008816:	4618      	mov	r0, r3
34008818:	370c      	adds	r7, #12
3400881a:	46bd      	mov	sp, r7
3400881c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008820:	4770      	bx	lr
34008822:	bf00      	nop
34008824:	56028000 	.word	0x56028000

34008828 <LL_RCC_GetFDCANClockSource>:
{
34008828:	b480      	push	{r7}
3400882a:	b083      	sub	sp, #12
3400882c:	af00      	add	r7, sp, #0
3400882e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34008830:	4b05      	ldr	r3, [pc, #20]	@ (34008848 <LL_RCC_GetFDCANClockSource+0x20>)
34008832:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34008836:	f003 0303 	and.w	r3, r3, #3
}
3400883a:	4618      	mov	r0, r3
3400883c:	370c      	adds	r7, #12
3400883e:	46bd      	mov	sp, r7
34008840:	f85d 7b04 	ldr.w	r7, [sp], #4
34008844:	4770      	bx	lr
34008846:	bf00      	nop
34008848:	56028000 	.word	0x56028000

3400884c <LL_RCC_GetFMCClockSource>:
{
3400884c:	b480      	push	{r7}
3400884e:	b083      	sub	sp, #12
34008850:	af00      	add	r7, sp, #0
34008852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34008854:	4b05      	ldr	r3, [pc, #20]	@ (3400886c <LL_RCC_GetFMCClockSource+0x20>)
34008856:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400885a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
3400885e:	4618      	mov	r0, r3
34008860:	370c      	adds	r7, #12
34008862:	46bd      	mov	sp, r7
34008864:	f85d 7b04 	ldr.w	r7, [sp], #4
34008868:	4770      	bx	lr
3400886a:	bf00      	nop
3400886c:	56028000 	.word	0x56028000

34008870 <LL_RCC_GetI2CClockSource>:
{
34008870:	b580      	push	{r7, lr}
34008872:	b082      	sub	sp, #8
34008874:	af00      	add	r7, sp, #0
34008876:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008878:	6878      	ldr	r0, [r7, #4]
3400887a:	f7ff ff43 	bl	34008704 <LL_RCC_GetClockSource>
3400887e:	4603      	mov	r3, r0
}
34008880:	4618      	mov	r0, r3
34008882:	3708      	adds	r7, #8
34008884:	46bd      	mov	sp, r7
34008886:	bd80      	pop	{r7, pc}

34008888 <LL_RCC_GetI3CClockSource>:
{
34008888:	b580      	push	{r7, lr}
3400888a:	b082      	sub	sp, #8
3400888c:	af00      	add	r7, sp, #0
3400888e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008890:	6878      	ldr	r0, [r7, #4]
34008892:	f7ff ff37 	bl	34008704 <LL_RCC_GetClockSource>
34008896:	4603      	mov	r3, r0
}
34008898:	4618      	mov	r0, r3
3400889a:	3708      	adds	r7, #8
3400889c:	46bd      	mov	sp, r7
3400889e:	bd80      	pop	{r7, pc}

340088a0 <LL_RCC_GetLPTIMClockSource>:
{
340088a0:	b580      	push	{r7, lr}
340088a2:	b082      	sub	sp, #8
340088a4:	af00      	add	r7, sp, #0
340088a6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340088a8:	6878      	ldr	r0, [r7, #4]
340088aa:	f7ff ff2b 	bl	34008704 <LL_RCC_GetClockSource>
340088ae:	4603      	mov	r3, r0
}
340088b0:	4618      	mov	r0, r3
340088b2:	3708      	adds	r7, #8
340088b4:	46bd      	mov	sp, r7
340088b6:	bd80      	pop	{r7, pc}

340088b8 <LL_RCC_GetLPUARTClockSource>:
{
340088b8:	b480      	push	{r7}
340088ba:	b083      	sub	sp, #12
340088bc:	af00      	add	r7, sp, #0
340088be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
340088c0:	4b05      	ldr	r3, [pc, #20]	@ (340088d8 <LL_RCC_GetLPUARTClockSource+0x20>)
340088c2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
340088c6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
340088ca:	4618      	mov	r0, r3
340088cc:	370c      	adds	r7, #12
340088ce:	46bd      	mov	sp, r7
340088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
340088d4:	4770      	bx	lr
340088d6:	bf00      	nop
340088d8:	56028000 	.word	0x56028000

340088dc <LL_RCC_GetLTDCClockSource>:
{
340088dc:	b480      	push	{r7}
340088de:	b083      	sub	sp, #12
340088e0:	af00      	add	r7, sp, #0
340088e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
340088e4:	4b05      	ldr	r3, [pc, #20]	@ (340088fc <LL_RCC_GetLTDCClockSource+0x20>)
340088e6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
340088ea:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
340088ee:	4618      	mov	r0, r3
340088f0:	370c      	adds	r7, #12
340088f2:	46bd      	mov	sp, r7
340088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
340088f8:	4770      	bx	lr
340088fa:	bf00      	nop
340088fc:	56028000 	.word	0x56028000

34008900 <LL_RCC_GetMDFClockSource>:
{
34008900:	b480      	push	{r7}
34008902:	b083      	sub	sp, #12
34008904:	af00      	add	r7, sp, #0
34008906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34008908:	4b05      	ldr	r3, [pc, #20]	@ (34008920 <LL_RCC_GetMDFClockSource+0x20>)
3400890a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3400890e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34008912:	4618      	mov	r0, r3
34008914:	370c      	adds	r7, #12
34008916:	46bd      	mov	sp, r7
34008918:	f85d 7b04 	ldr.w	r7, [sp], #4
3400891c:	4770      	bx	lr
3400891e:	bf00      	nop
34008920:	56028000 	.word	0x56028000

34008924 <LL_RCC_GetPSSIClockSource>:
{
34008924:	b480      	push	{r7}
34008926:	b083      	sub	sp, #12
34008928:	af00      	add	r7, sp, #0
3400892a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
3400892c:	4b05      	ldr	r3, [pc, #20]	@ (34008944 <LL_RCC_GetPSSIClockSource+0x20>)
3400892e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008932:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34008936:	4618      	mov	r0, r3
34008938:	370c      	adds	r7, #12
3400893a:	46bd      	mov	sp, r7
3400893c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008940:	4770      	bx	lr
34008942:	bf00      	nop
34008944:	56028000 	.word	0x56028000

34008948 <LL_RCC_GetSAIClockSource>:
{
34008948:	b580      	push	{r7, lr}
3400894a:	b082      	sub	sp, #8
3400894c:	af00      	add	r7, sp, #0
3400894e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008950:	6878      	ldr	r0, [r7, #4]
34008952:	f7ff fed7 	bl	34008704 <LL_RCC_GetClockSource>
34008956:	4603      	mov	r3, r0
}
34008958:	4618      	mov	r0, r3
3400895a:	3708      	adds	r7, #8
3400895c:	46bd      	mov	sp, r7
3400895e:	bd80      	pop	{r7, pc}

34008960 <LL_RCC_GetSDMMCClockSource>:
{
34008960:	b580      	push	{r7, lr}
34008962:	b082      	sub	sp, #8
34008964:	af00      	add	r7, sp, #0
34008966:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008968:	6878      	ldr	r0, [r7, #4]
3400896a:	f7ff fecb 	bl	34008704 <LL_RCC_GetClockSource>
3400896e:	4603      	mov	r3, r0
}
34008970:	4618      	mov	r0, r3
34008972:	3708      	adds	r7, #8
34008974:	46bd      	mov	sp, r7
34008976:	bd80      	pop	{r7, pc}

34008978 <LL_RCC_GetSPDIFRXClockSource>:
{
34008978:	b480      	push	{r7}
3400897a:	b083      	sub	sp, #12
3400897c:	af00      	add	r7, sp, #0
3400897e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34008980:	4b05      	ldr	r3, [pc, #20]	@ (34008998 <LL_RCC_GetSPDIFRXClockSource+0x20>)
34008982:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34008986:	f003 0307 	and.w	r3, r3, #7
}
3400898a:	4618      	mov	r0, r3
3400898c:	370c      	adds	r7, #12
3400898e:	46bd      	mov	sp, r7
34008990:	f85d 7b04 	ldr.w	r7, [sp], #4
34008994:	4770      	bx	lr
34008996:	bf00      	nop
34008998:	56028000 	.word	0x56028000

3400899c <LL_RCC_GetSPIClockSource>:
{
3400899c:	b580      	push	{r7, lr}
3400899e:	b082      	sub	sp, #8
340089a0:	af00      	add	r7, sp, #0
340089a2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340089a4:	6878      	ldr	r0, [r7, #4]
340089a6:	f7ff fead 	bl	34008704 <LL_RCC_GetClockSource>
340089aa:	4603      	mov	r3, r0
}
340089ac:	4618      	mov	r0, r3
340089ae:	3708      	adds	r7, #8
340089b0:	46bd      	mov	sp, r7
340089b2:	bd80      	pop	{r7, pc}

340089b4 <LL_RCC_GetUSARTClockSource>:
{
340089b4:	b580      	push	{r7, lr}
340089b6:	b082      	sub	sp, #8
340089b8:	af00      	add	r7, sp, #0
340089ba:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340089bc:	6878      	ldr	r0, [r7, #4]
340089be:	f7ff fea1 	bl	34008704 <LL_RCC_GetClockSource>
340089c2:	4603      	mov	r3, r0
}
340089c4:	4618      	mov	r0, r3
340089c6:	3708      	adds	r7, #8
340089c8:	46bd      	mov	sp, r7
340089ca:	bd80      	pop	{r7, pc}

340089cc <LL_RCC_GetUARTClockSource>:
{
340089cc:	b580      	push	{r7, lr}
340089ce:	b082      	sub	sp, #8
340089d0:	af00      	add	r7, sp, #0
340089d2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340089d4:	6878      	ldr	r0, [r7, #4]
340089d6:	f7ff fe95 	bl	34008704 <LL_RCC_GetClockSource>
340089da:	4603      	mov	r3, r0
}
340089dc:	4618      	mov	r0, r3
340089de:	3708      	adds	r7, #8
340089e0:	46bd      	mov	sp, r7
340089e2:	bd80      	pop	{r7, pc}

340089e4 <LL_RCC_GetUSBClockSource>:
{
340089e4:	b580      	push	{r7, lr}
340089e6:	b082      	sub	sp, #8
340089e8:	af00      	add	r7, sp, #0
340089ea:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340089ec:	6878      	ldr	r0, [r7, #4]
340089ee:	f7ff fe89 	bl	34008704 <LL_RCC_GetClockSource>
340089f2:	4603      	mov	r3, r0
}
340089f4:	4618      	mov	r0, r3
340089f6:	3708      	adds	r7, #8
340089f8:	46bd      	mov	sp, r7
340089fa:	bd80      	pop	{r7, pc}

340089fc <LL_RCC_GetXSPIClockSource>:
{
340089fc:	b580      	push	{r7, lr}
340089fe:	b082      	sub	sp, #8
34008a00:	af00      	add	r7, sp, #0
34008a02:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008a04:	6878      	ldr	r0, [r7, #4]
34008a06:	f7ff fe7d 	bl	34008704 <LL_RCC_GetClockSource>
34008a0a:	4603      	mov	r3, r0
}
34008a0c:	4618      	mov	r0, r3
34008a0e:	3708      	adds	r7, #8
34008a10:	46bd      	mov	sp, r7
34008a12:	bd80      	pop	{r7, pc}

34008a14 <LL_RCC_SetRTCClockSource>:
{
34008a14:	b480      	push	{r7}
34008a16:	b083      	sub	sp, #12
34008a18:	af00      	add	r7, sp, #0
34008a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34008a1c:	4b07      	ldr	r3, [pc, #28]	@ (34008a3c <LL_RCC_SetRTCClockSource+0x28>)
34008a1e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008a22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
34008a26:	4905      	ldr	r1, [pc, #20]	@ (34008a3c <LL_RCC_SetRTCClockSource+0x28>)
34008a28:	687b      	ldr	r3, [r7, #4]
34008a2a:	4313      	orrs	r3, r2
34008a2c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008a30:	bf00      	nop
34008a32:	370c      	adds	r7, #12
34008a34:	46bd      	mov	sp, r7
34008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a3a:	4770      	bx	lr
34008a3c:	56028000 	.word	0x56028000

34008a40 <LL_RCC_GetRTCClockSource>:
{
34008a40:	b480      	push	{r7}
34008a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34008a44:	4b04      	ldr	r3, [pc, #16]	@ (34008a58 <LL_RCC_GetRTCClockSource+0x18>)
34008a46:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
34008a4e:	4618      	mov	r0, r3
34008a50:	46bd      	mov	sp, r7
34008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a56:	4770      	bx	lr
34008a58:	56028000 	.word	0x56028000

34008a5c <LL_RCC_SetRTC_HSEPrescaler>:
{
34008a5c:	b480      	push	{r7}
34008a5e:	b083      	sub	sp, #12
34008a60:	af00      	add	r7, sp, #0
34008a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34008a64:	4b07      	ldr	r3, [pc, #28]	@ (34008a84 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34008a66:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008a6a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
34008a6e:	4905      	ldr	r1, [pc, #20]	@ (34008a84 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34008a70:	687b      	ldr	r3, [r7, #4]
34008a72:	4313      	orrs	r3, r2
34008a74:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008a78:	bf00      	nop
34008a7a:	370c      	adds	r7, #12
34008a7c:	46bd      	mov	sp, r7
34008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a82:	4770      	bx	lr
34008a84:	56028000 	.word	0x56028000

34008a88 <LL_RCC_SetTIMPrescaler>:
{
34008a88:	b480      	push	{r7}
34008a8a:	b083      	sub	sp, #12
34008a8c:	af00      	add	r7, sp, #0
34008a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34008a90:	4b07      	ldr	r3, [pc, #28]	@ (34008ab0 <LL_RCC_SetTIMPrescaler+0x28>)
34008a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008a94:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34008a98:	687b      	ldr	r3, [r7, #4]
34008a9a:	061b      	lsls	r3, r3, #24
34008a9c:	4904      	ldr	r1, [pc, #16]	@ (34008ab0 <LL_RCC_SetTIMPrescaler+0x28>)
34008a9e:	4313      	orrs	r3, r2
34008aa0:	624b      	str	r3, [r1, #36]	@ 0x24
}
34008aa2:	bf00      	nop
34008aa4:	370c      	adds	r7, #12
34008aa6:	46bd      	mov	sp, r7
34008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008aac:	4770      	bx	lr
34008aae:	bf00      	nop
34008ab0:	56028000 	.word	0x56028000

34008ab4 <LL_RCC_GetTIMPrescaler>:
{
34008ab4:	b480      	push	{r7}
34008ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34008ab8:	4b04      	ldr	r3, [pc, #16]	@ (34008acc <LL_RCC_GetTIMPrescaler+0x18>)
34008aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008abc:	0e1b      	lsrs	r3, r3, #24
34008abe:	f003 0303 	and.w	r3, r3, #3
}
34008ac2:	4618      	mov	r0, r3
34008ac4:	46bd      	mov	sp, r7
34008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
34008aca:	4770      	bx	lr
34008acc:	56028000 	.word	0x56028000

34008ad0 <LL_RCC_PLL1_GetSource>:
{
34008ad0:	b480      	push	{r7}
34008ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34008ad4:	4b04      	ldr	r3, [pc, #16]	@ (34008ae8 <LL_RCC_PLL1_GetSource+0x18>)
34008ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008ada:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008ade:	4618      	mov	r0, r3
34008ae0:	46bd      	mov	sp, r7
34008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ae6:	4770      	bx	lr
34008ae8:	56028000 	.word	0x56028000

34008aec <LL_RCC_PLL1_IsReady>:
{
34008aec:	b480      	push	{r7}
34008aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34008af0:	4b07      	ldr	r3, [pc, #28]	@ (34008b10 <LL_RCC_PLL1_IsReady+0x24>)
34008af2:	685b      	ldr	r3, [r3, #4]
34008af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34008af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34008afc:	d101      	bne.n	34008b02 <LL_RCC_PLL1_IsReady+0x16>
34008afe:	2301      	movs	r3, #1
34008b00:	e000      	b.n	34008b04 <LL_RCC_PLL1_IsReady+0x18>
34008b02:	2300      	movs	r3, #0
}
34008b04:	4618      	mov	r0, r3
34008b06:	46bd      	mov	sp, r7
34008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b0c:	4770      	bx	lr
34008b0e:	bf00      	nop
34008b10:	56028000 	.word	0x56028000

34008b14 <LL_RCC_PLL1_IsEnabledBypass>:
{
34008b14:	b480      	push	{r7}
34008b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34008b18:	4b07      	ldr	r3, [pc, #28]	@ (34008b38 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34008b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008b1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008b26:	d101      	bne.n	34008b2c <LL_RCC_PLL1_IsEnabledBypass+0x18>
34008b28:	2301      	movs	r3, #1
34008b2a:	e000      	b.n	34008b2e <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34008b2c:	2300      	movs	r3, #0
}
34008b2e:	4618      	mov	r0, r3
34008b30:	46bd      	mov	sp, r7
34008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b36:	4770      	bx	lr
34008b38:	56028000 	.word	0x56028000

34008b3c <LL_RCC_PLL1_GetN>:
{
34008b3c:	b480      	push	{r7}
34008b3e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34008b40:	4b05      	ldr	r3, [pc, #20]	@ (34008b58 <LL_RCC_PLL1_GetN+0x1c>)
34008b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008b46:	0a1b      	lsrs	r3, r3, #8
34008b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008b4c:	4618      	mov	r0, r3
34008b4e:	46bd      	mov	sp, r7
34008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b54:	4770      	bx	lr
34008b56:	bf00      	nop
34008b58:	56028000 	.word	0x56028000

34008b5c <LL_RCC_PLL1_GetM>:
{
34008b5c:	b480      	push	{r7}
34008b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34008b60:	4b05      	ldr	r3, [pc, #20]	@ (34008b78 <LL_RCC_PLL1_GetM+0x1c>)
34008b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008b66:	0d1b      	lsrs	r3, r3, #20
34008b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008b6c:	4618      	mov	r0, r3
34008b6e:	46bd      	mov	sp, r7
34008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b74:	4770      	bx	lr
34008b76:	bf00      	nop
34008b78:	56028000 	.word	0x56028000

34008b7c <LL_RCC_PLL1_GetP1>:
{
34008b7c:	b480      	push	{r7}
34008b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008b80:	4b05      	ldr	r3, [pc, #20]	@ (34008b98 <LL_RCC_PLL1_GetP1+0x1c>)
34008b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34008b86:	0edb      	lsrs	r3, r3, #27
34008b88:	f003 0307 	and.w	r3, r3, #7
}
34008b8c:	4618      	mov	r0, r3
34008b8e:	46bd      	mov	sp, r7
34008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b94:	4770      	bx	lr
34008b96:	bf00      	nop
34008b98:	56028000 	.word	0x56028000

34008b9c <LL_RCC_PLL1_GetP2>:
{
34008b9c:	b480      	push	{r7}
34008b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34008ba0:	4b05      	ldr	r3, [pc, #20]	@ (34008bb8 <LL_RCC_PLL1_GetP2+0x1c>)
34008ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34008ba6:	0e1b      	lsrs	r3, r3, #24
34008ba8:	f003 0307 	and.w	r3, r3, #7
}
34008bac:	4618      	mov	r0, r3
34008bae:	46bd      	mov	sp, r7
34008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008bb4:	4770      	bx	lr
34008bb6:	bf00      	nop
34008bb8:	56028000 	.word	0x56028000

34008bbc <LL_RCC_PLL1P_IsEnabled>:
{
34008bbc:	b480      	push	{r7}
34008bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34008bc0:	4b07      	ldr	r3, [pc, #28]	@ (34008be0 <LL_RCC_PLL1P_IsEnabled+0x24>)
34008bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34008bc6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34008bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008bce:	d101      	bne.n	34008bd4 <LL_RCC_PLL1P_IsEnabled+0x18>
34008bd0:	2301      	movs	r3, #1
34008bd2:	e000      	b.n	34008bd6 <LL_RCC_PLL1P_IsEnabled+0x1a>
34008bd4:	2300      	movs	r3, #0
}
34008bd6:	4618      	mov	r0, r3
34008bd8:	46bd      	mov	sp, r7
34008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
34008bde:	4770      	bx	lr
34008be0:	56028000 	.word	0x56028000

34008be4 <LL_RCC_PLL1_GetFRACN>:
{
34008be4:	b480      	push	{r7}
34008be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34008be8:	4b04      	ldr	r3, [pc, #16]	@ (34008bfc <LL_RCC_PLL1_GetFRACN+0x18>)
34008bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34008bee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008bf2:	4618      	mov	r0, r3
34008bf4:	46bd      	mov	sp, r7
34008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
34008bfa:	4770      	bx	lr
34008bfc:	56028000 	.word	0x56028000

34008c00 <LL_RCC_PLL2_GetSource>:
{
34008c00:	b480      	push	{r7}
34008c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34008c04:	4b04      	ldr	r3, [pc, #16]	@ (34008c18 <LL_RCC_PLL2_GetSource+0x18>)
34008c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008c0a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008c0e:	4618      	mov	r0, r3
34008c10:	46bd      	mov	sp, r7
34008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c16:	4770      	bx	lr
34008c18:	56028000 	.word	0x56028000

34008c1c <LL_RCC_PLL2_IsReady>:
{
34008c1c:	b480      	push	{r7}
34008c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34008c20:	4b07      	ldr	r3, [pc, #28]	@ (34008c40 <LL_RCC_PLL2_IsReady+0x24>)
34008c22:	685b      	ldr	r3, [r3, #4]
34008c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34008c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34008c2c:	d101      	bne.n	34008c32 <LL_RCC_PLL2_IsReady+0x16>
34008c2e:	2301      	movs	r3, #1
34008c30:	e000      	b.n	34008c34 <LL_RCC_PLL2_IsReady+0x18>
34008c32:	2300      	movs	r3, #0
}
34008c34:	4618      	mov	r0, r3
34008c36:	46bd      	mov	sp, r7
34008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c3c:	4770      	bx	lr
34008c3e:	bf00      	nop
34008c40:	56028000 	.word	0x56028000

34008c44 <LL_RCC_PLL2_IsEnabledBypass>:
{
34008c44:	b480      	push	{r7}
34008c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34008c48:	4b07      	ldr	r3, [pc, #28]	@ (34008c68 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34008c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008c4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008c56:	d101      	bne.n	34008c5c <LL_RCC_PLL2_IsEnabledBypass+0x18>
34008c58:	2301      	movs	r3, #1
34008c5a:	e000      	b.n	34008c5e <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34008c5c:	2300      	movs	r3, #0
}
34008c5e:	4618      	mov	r0, r3
34008c60:	46bd      	mov	sp, r7
34008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c66:	4770      	bx	lr
34008c68:	56028000 	.word	0x56028000

34008c6c <LL_RCC_PLL2_GetN>:
{
34008c6c:	b480      	push	{r7}
34008c6e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34008c70:	4b05      	ldr	r3, [pc, #20]	@ (34008c88 <LL_RCC_PLL2_GetN+0x1c>)
34008c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008c76:	0a1b      	lsrs	r3, r3, #8
34008c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008c7c:	4618      	mov	r0, r3
34008c7e:	46bd      	mov	sp, r7
34008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c84:	4770      	bx	lr
34008c86:	bf00      	nop
34008c88:	56028000 	.word	0x56028000

34008c8c <LL_RCC_PLL2_GetM>:
{
34008c8c:	b480      	push	{r7}
34008c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34008c90:	4b05      	ldr	r3, [pc, #20]	@ (34008ca8 <LL_RCC_PLL2_GetM+0x1c>)
34008c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008c96:	0d1b      	lsrs	r3, r3, #20
34008c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008c9c:	4618      	mov	r0, r3
34008c9e:	46bd      	mov	sp, r7
34008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ca4:	4770      	bx	lr
34008ca6:	bf00      	nop
34008ca8:	56028000 	.word	0x56028000

34008cac <LL_RCC_PLL2_GetP1>:
{
34008cac:	b480      	push	{r7}
34008cae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34008cb0:	4b05      	ldr	r3, [pc, #20]	@ (34008cc8 <LL_RCC_PLL2_GetP1+0x1c>)
34008cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34008cb6:	0edb      	lsrs	r3, r3, #27
34008cb8:	f003 0307 	and.w	r3, r3, #7
}
34008cbc:	4618      	mov	r0, r3
34008cbe:	46bd      	mov	sp, r7
34008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008cc4:	4770      	bx	lr
34008cc6:	bf00      	nop
34008cc8:	56028000 	.word	0x56028000

34008ccc <LL_RCC_PLL2_GetP2>:
{
34008ccc:	b480      	push	{r7}
34008cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34008cd0:	4b05      	ldr	r3, [pc, #20]	@ (34008ce8 <LL_RCC_PLL2_GetP2+0x1c>)
34008cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34008cd6:	0e1b      	lsrs	r3, r3, #24
34008cd8:	f003 0307 	and.w	r3, r3, #7
}
34008cdc:	4618      	mov	r0, r3
34008cde:	46bd      	mov	sp, r7
34008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ce4:	4770      	bx	lr
34008ce6:	bf00      	nop
34008ce8:	56028000 	.word	0x56028000

34008cec <LL_RCC_PLL2P_IsEnabled>:
{
34008cec:	b480      	push	{r7}
34008cee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
34008cf0:	4b07      	ldr	r3, [pc, #28]	@ (34008d10 <LL_RCC_PLL2P_IsEnabled+0x24>)
34008cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34008cf6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34008cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008cfe:	d101      	bne.n	34008d04 <LL_RCC_PLL2P_IsEnabled+0x18>
34008d00:	2301      	movs	r3, #1
34008d02:	e000      	b.n	34008d06 <LL_RCC_PLL2P_IsEnabled+0x1a>
34008d04:	2300      	movs	r3, #0
}
34008d06:	4618      	mov	r0, r3
34008d08:	46bd      	mov	sp, r7
34008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d0e:	4770      	bx	lr
34008d10:	56028000 	.word	0x56028000

34008d14 <LL_RCC_PLL2_GetFRACN>:
{
34008d14:	b480      	push	{r7}
34008d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
34008d18:	4b04      	ldr	r3, [pc, #16]	@ (34008d2c <LL_RCC_PLL2_GetFRACN+0x18>)
34008d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34008d1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008d22:	4618      	mov	r0, r3
34008d24:	46bd      	mov	sp, r7
34008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d2a:	4770      	bx	lr
34008d2c:	56028000 	.word	0x56028000

34008d30 <LL_RCC_PLL3_GetSource>:
{
34008d30:	b480      	push	{r7}
34008d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34008d34:	4b04      	ldr	r3, [pc, #16]	@ (34008d48 <LL_RCC_PLL3_GetSource+0x18>)
34008d36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008d3a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008d3e:	4618      	mov	r0, r3
34008d40:	46bd      	mov	sp, r7
34008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d46:	4770      	bx	lr
34008d48:	56028000 	.word	0x56028000

34008d4c <LL_RCC_PLL3_IsReady>:
{
34008d4c:	b480      	push	{r7}
34008d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34008d50:	4b07      	ldr	r3, [pc, #28]	@ (34008d70 <LL_RCC_PLL3_IsReady+0x24>)
34008d52:	685b      	ldr	r3, [r3, #4]
34008d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34008d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34008d5c:	d101      	bne.n	34008d62 <LL_RCC_PLL3_IsReady+0x16>
34008d5e:	2301      	movs	r3, #1
34008d60:	e000      	b.n	34008d64 <LL_RCC_PLL3_IsReady+0x18>
34008d62:	2300      	movs	r3, #0
}
34008d64:	4618      	mov	r0, r3
34008d66:	46bd      	mov	sp, r7
34008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d6c:	4770      	bx	lr
34008d6e:	bf00      	nop
34008d70:	56028000 	.word	0x56028000

34008d74 <LL_RCC_PLL3_IsEnabledBypass>:
{
34008d74:	b480      	push	{r7}
34008d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34008d78:	4b07      	ldr	r3, [pc, #28]	@ (34008d98 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34008d7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008d7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008d86:	d101      	bne.n	34008d8c <LL_RCC_PLL3_IsEnabledBypass+0x18>
34008d88:	2301      	movs	r3, #1
34008d8a:	e000      	b.n	34008d8e <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34008d8c:	2300      	movs	r3, #0
}
34008d8e:	4618      	mov	r0, r3
34008d90:	46bd      	mov	sp, r7
34008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d96:	4770      	bx	lr
34008d98:	56028000 	.word	0x56028000

34008d9c <LL_RCC_PLL3_GetN>:
{
34008d9c:	b480      	push	{r7}
34008d9e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34008da0:	4b05      	ldr	r3, [pc, #20]	@ (34008db8 <LL_RCC_PLL3_GetN+0x1c>)
34008da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008da6:	0a1b      	lsrs	r3, r3, #8
34008da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008dac:	4618      	mov	r0, r3
34008dae:	46bd      	mov	sp, r7
34008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008db4:	4770      	bx	lr
34008db6:	bf00      	nop
34008db8:	56028000 	.word	0x56028000

34008dbc <LL_RCC_PLL3_GetM>:
{
34008dbc:	b480      	push	{r7}
34008dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34008dc0:	4b05      	ldr	r3, [pc, #20]	@ (34008dd8 <LL_RCC_PLL3_GetM+0x1c>)
34008dc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008dc6:	0d1b      	lsrs	r3, r3, #20
34008dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008dcc:	4618      	mov	r0, r3
34008dce:	46bd      	mov	sp, r7
34008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008dd4:	4770      	bx	lr
34008dd6:	bf00      	nop
34008dd8:	56028000 	.word	0x56028000

34008ddc <LL_RCC_PLL3_GetP1>:
{
34008ddc:	b480      	push	{r7}
34008dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008de0:	4b05      	ldr	r3, [pc, #20]	@ (34008df8 <LL_RCC_PLL3_GetP1+0x1c>)
34008de2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34008de6:	0edb      	lsrs	r3, r3, #27
34008de8:	f003 0307 	and.w	r3, r3, #7
}
34008dec:	4618      	mov	r0, r3
34008dee:	46bd      	mov	sp, r7
34008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008df4:	4770      	bx	lr
34008df6:	bf00      	nop
34008df8:	56028000 	.word	0x56028000

34008dfc <LL_RCC_PLL3_GetP2>:
{
34008dfc:	b480      	push	{r7}
34008dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34008e00:	4b05      	ldr	r3, [pc, #20]	@ (34008e18 <LL_RCC_PLL3_GetP2+0x1c>)
34008e02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34008e06:	0e1b      	lsrs	r3, r3, #24
34008e08:	f003 0307 	and.w	r3, r3, #7
}
34008e0c:	4618      	mov	r0, r3
34008e0e:	46bd      	mov	sp, r7
34008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e14:	4770      	bx	lr
34008e16:	bf00      	nop
34008e18:	56028000 	.word	0x56028000

34008e1c <LL_RCC_PLL3P_IsEnabled>:
{
34008e1c:	b480      	push	{r7}
34008e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34008e20:	4b07      	ldr	r3, [pc, #28]	@ (34008e40 <LL_RCC_PLL3P_IsEnabled+0x24>)
34008e22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34008e26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34008e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008e2e:	d101      	bne.n	34008e34 <LL_RCC_PLL3P_IsEnabled+0x18>
34008e30:	2301      	movs	r3, #1
34008e32:	e000      	b.n	34008e36 <LL_RCC_PLL3P_IsEnabled+0x1a>
34008e34:	2300      	movs	r3, #0
}
34008e36:	4618      	mov	r0, r3
34008e38:	46bd      	mov	sp, r7
34008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e3e:	4770      	bx	lr
34008e40:	56028000 	.word	0x56028000

34008e44 <LL_RCC_PLL3_GetFRACN>:
{
34008e44:	b480      	push	{r7}
34008e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34008e48:	4b04      	ldr	r3, [pc, #16]	@ (34008e5c <LL_RCC_PLL3_GetFRACN+0x18>)
34008e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34008e4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008e52:	4618      	mov	r0, r3
34008e54:	46bd      	mov	sp, r7
34008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e5a:	4770      	bx	lr
34008e5c:	56028000 	.word	0x56028000

34008e60 <LL_RCC_PLL4_GetSource>:
{
34008e60:	b480      	push	{r7}
34008e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34008e64:	4b04      	ldr	r3, [pc, #16]	@ (34008e78 <LL_RCC_PLL4_GetSource+0x18>)
34008e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34008e6a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008e6e:	4618      	mov	r0, r3
34008e70:	46bd      	mov	sp, r7
34008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e76:	4770      	bx	lr
34008e78:	56028000 	.word	0x56028000

34008e7c <LL_RCC_PLL4_IsReady>:
{
34008e7c:	b480      	push	{r7}
34008e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34008e80:	4b07      	ldr	r3, [pc, #28]	@ (34008ea0 <LL_RCC_PLL4_IsReady+0x24>)
34008e82:	685b      	ldr	r3, [r3, #4]
34008e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34008e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34008e8c:	d101      	bne.n	34008e92 <LL_RCC_PLL4_IsReady+0x16>
34008e8e:	2301      	movs	r3, #1
34008e90:	e000      	b.n	34008e94 <LL_RCC_PLL4_IsReady+0x18>
34008e92:	2300      	movs	r3, #0
}
34008e94:	4618      	mov	r0, r3
34008e96:	46bd      	mov	sp, r7
34008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e9c:	4770      	bx	lr
34008e9e:	bf00      	nop
34008ea0:	56028000 	.word	0x56028000

34008ea4 <LL_RCC_PLL4_IsEnabledBypass>:
{
34008ea4:	b480      	push	{r7}
34008ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34008ea8:	4b07      	ldr	r3, [pc, #28]	@ (34008ec8 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
34008eaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34008eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008eb6:	d101      	bne.n	34008ebc <LL_RCC_PLL4_IsEnabledBypass+0x18>
34008eb8:	2301      	movs	r3, #1
34008eba:	e000      	b.n	34008ebe <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34008ebc:	2300      	movs	r3, #0
}
34008ebe:	4618      	mov	r0, r3
34008ec0:	46bd      	mov	sp, r7
34008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ec6:	4770      	bx	lr
34008ec8:	56028000 	.word	0x56028000

34008ecc <LL_RCC_PLL4_GetN>:
{
34008ecc:	b480      	push	{r7}
34008ece:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
34008ed0:	4b05      	ldr	r3, [pc, #20]	@ (34008ee8 <LL_RCC_PLL4_GetN+0x1c>)
34008ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34008ed6:	0a1b      	lsrs	r3, r3, #8
34008ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008edc:	4618      	mov	r0, r3
34008ede:	46bd      	mov	sp, r7
34008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ee4:	4770      	bx	lr
34008ee6:	bf00      	nop
34008ee8:	56028000 	.word	0x56028000

34008eec <LL_RCC_PLL4_GetM>:
{
34008eec:	b480      	push	{r7}
34008eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34008ef0:	4b05      	ldr	r3, [pc, #20]	@ (34008f08 <LL_RCC_PLL4_GetM+0x1c>)
34008ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34008ef6:	0d1b      	lsrs	r3, r3, #20
34008ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008efc:	4618      	mov	r0, r3
34008efe:	46bd      	mov	sp, r7
34008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f04:	4770      	bx	lr
34008f06:	bf00      	nop
34008f08:	56028000 	.word	0x56028000

34008f0c <LL_RCC_PLL4_GetP1>:
{
34008f0c:	b480      	push	{r7}
34008f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34008f10:	4b05      	ldr	r3, [pc, #20]	@ (34008f28 <LL_RCC_PLL4_GetP1+0x1c>)
34008f12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34008f16:	0edb      	lsrs	r3, r3, #27
34008f18:	f003 0307 	and.w	r3, r3, #7
}
34008f1c:	4618      	mov	r0, r3
34008f1e:	46bd      	mov	sp, r7
34008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f24:	4770      	bx	lr
34008f26:	bf00      	nop
34008f28:	56028000 	.word	0x56028000

34008f2c <LL_RCC_PLL4_GetP2>:
{
34008f2c:	b480      	push	{r7}
34008f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34008f30:	4b05      	ldr	r3, [pc, #20]	@ (34008f48 <LL_RCC_PLL4_GetP2+0x1c>)
34008f32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34008f36:	0e1b      	lsrs	r3, r3, #24
34008f38:	f003 0307 	and.w	r3, r3, #7
}
34008f3c:	4618      	mov	r0, r3
34008f3e:	46bd      	mov	sp, r7
34008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f44:	4770      	bx	lr
34008f46:	bf00      	nop
34008f48:	56028000 	.word	0x56028000

34008f4c <LL_RCC_PLL4P_IsEnabled>:
{
34008f4c:	b480      	push	{r7}
34008f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
34008f50:	4b07      	ldr	r3, [pc, #28]	@ (34008f70 <LL_RCC_PLL4P_IsEnabled+0x24>)
34008f52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34008f56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34008f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008f5e:	d101      	bne.n	34008f64 <LL_RCC_PLL4P_IsEnabled+0x18>
34008f60:	2301      	movs	r3, #1
34008f62:	e000      	b.n	34008f66 <LL_RCC_PLL4P_IsEnabled+0x1a>
34008f64:	2300      	movs	r3, #0
}
34008f66:	4618      	mov	r0, r3
34008f68:	46bd      	mov	sp, r7
34008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f6e:	4770      	bx	lr
34008f70:	56028000 	.word	0x56028000

34008f74 <LL_RCC_PLL4_GetFRACN>:
{
34008f74:	b480      	push	{r7}
34008f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34008f78:	4b04      	ldr	r3, [pc, #16]	@ (34008f8c <LL_RCC_PLL4_GetFRACN+0x18>)
34008f7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34008f7e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008f82:	4618      	mov	r0, r3
34008f84:	46bd      	mov	sp, r7
34008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f8a:	4770      	bx	lr
34008f8c:	56028000 	.word	0x56028000

34008f90 <LL_RCC_IC3_Enable>:
{
34008f90:	b480      	push	{r7}
34008f92:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34008f94:	4b04      	ldr	r3, [pc, #16]	@ (34008fa8 <LL_RCC_IC3_Enable+0x18>)
34008f96:	2204      	movs	r2, #4
34008f98:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008f9c:	bf00      	nop
34008f9e:	46bd      	mov	sp, r7
34008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008fa4:	4770      	bx	lr
34008fa6:	bf00      	nop
34008fa8:	56028000 	.word	0x56028000

34008fac <LL_RCC_IC3_IsEnabled>:
{
34008fac:	b480      	push	{r7}
34008fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34008fb0:	4b07      	ldr	r3, [pc, #28]	@ (34008fd0 <LL_RCC_IC3_IsEnabled+0x24>)
34008fb2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008fb6:	f003 0304 	and.w	r3, r3, #4
34008fba:	2b04      	cmp	r3, #4
34008fbc:	d101      	bne.n	34008fc2 <LL_RCC_IC3_IsEnabled+0x16>
34008fbe:	2301      	movs	r3, #1
34008fc0:	e000      	b.n	34008fc4 <LL_RCC_IC3_IsEnabled+0x18>
34008fc2:	2300      	movs	r3, #0
}
34008fc4:	4618      	mov	r0, r3
34008fc6:	46bd      	mov	sp, r7
34008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008fcc:	4770      	bx	lr
34008fce:	bf00      	nop
34008fd0:	56028000 	.word	0x56028000

34008fd4 <LL_RCC_IC3_GetSource>:
{
34008fd4:	b480      	push	{r7}
34008fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34008fd8:	4b04      	ldr	r3, [pc, #16]	@ (34008fec <LL_RCC_IC3_GetSource+0x18>)
34008fda:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34008fde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008fe2:	4618      	mov	r0, r3
34008fe4:	46bd      	mov	sp, r7
34008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
34008fea:	4770      	bx	lr
34008fec:	56028000 	.word	0x56028000

34008ff0 <LL_RCC_IC3_GetDivider>:
{
34008ff0:	b480      	push	{r7}
34008ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34008ff4:	4b05      	ldr	r3, [pc, #20]	@ (3400900c <LL_RCC_IC3_GetDivider+0x1c>)
34008ff6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34008ffa:	0c1b      	lsrs	r3, r3, #16
34008ffc:	b2db      	uxtb	r3, r3
34008ffe:	3301      	adds	r3, #1
}
34009000:	4618      	mov	r0, r3
34009002:	46bd      	mov	sp, r7
34009004:	f85d 7b04 	ldr.w	r7, [sp], #4
34009008:	4770      	bx	lr
3400900a:	bf00      	nop
3400900c:	56028000 	.word	0x56028000

34009010 <LL_RCC_IC4_Enable>:
{
34009010:	b480      	push	{r7}
34009012:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34009014:	4b04      	ldr	r3, [pc, #16]	@ (34009028 <LL_RCC_IC4_Enable+0x18>)
34009016:	2208      	movs	r2, #8
34009018:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400901c:	bf00      	nop
3400901e:	46bd      	mov	sp, r7
34009020:	f85d 7b04 	ldr.w	r7, [sp], #4
34009024:	4770      	bx	lr
34009026:	bf00      	nop
34009028:	56028000 	.word	0x56028000

3400902c <LL_RCC_IC4_IsEnabled>:
{
3400902c:	b480      	push	{r7}
3400902e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34009030:	4b07      	ldr	r3, [pc, #28]	@ (34009050 <LL_RCC_IC4_IsEnabled+0x24>)
34009032:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009036:	f003 0308 	and.w	r3, r3, #8
3400903a:	2b08      	cmp	r3, #8
3400903c:	d101      	bne.n	34009042 <LL_RCC_IC4_IsEnabled+0x16>
3400903e:	2301      	movs	r3, #1
34009040:	e000      	b.n	34009044 <LL_RCC_IC4_IsEnabled+0x18>
34009042:	2300      	movs	r3, #0
}
34009044:	4618      	mov	r0, r3
34009046:	46bd      	mov	sp, r7
34009048:	f85d 7b04 	ldr.w	r7, [sp], #4
3400904c:	4770      	bx	lr
3400904e:	bf00      	nop
34009050:	56028000 	.word	0x56028000

34009054 <LL_RCC_IC4_GetSource>:
{
34009054:	b480      	push	{r7}
34009056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009058:	4b04      	ldr	r3, [pc, #16]	@ (3400906c <LL_RCC_IC4_GetSource+0x18>)
3400905a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400905e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009062:	4618      	mov	r0, r3
34009064:	46bd      	mov	sp, r7
34009066:	f85d 7b04 	ldr.w	r7, [sp], #4
3400906a:	4770      	bx	lr
3400906c:	56028000 	.word	0x56028000

34009070 <LL_RCC_IC4_GetDivider>:
{
34009070:	b480      	push	{r7}
34009072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009074:	4b05      	ldr	r3, [pc, #20]	@ (3400908c <LL_RCC_IC4_GetDivider+0x1c>)
34009076:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400907a:	0c1b      	lsrs	r3, r3, #16
3400907c:	b2db      	uxtb	r3, r3
3400907e:	3301      	adds	r3, #1
}
34009080:	4618      	mov	r0, r3
34009082:	46bd      	mov	sp, r7
34009084:	f85d 7b04 	ldr.w	r7, [sp], #4
34009088:	4770      	bx	lr
3400908a:	bf00      	nop
3400908c:	56028000 	.word	0x56028000

34009090 <LL_RCC_IC5_Enable>:
{
34009090:	b480      	push	{r7}
34009092:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34009094:	4b04      	ldr	r3, [pc, #16]	@ (340090a8 <LL_RCC_IC5_Enable+0x18>)
34009096:	2210      	movs	r2, #16
34009098:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400909c:	bf00      	nop
3400909e:	46bd      	mov	sp, r7
340090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
340090a4:	4770      	bx	lr
340090a6:	bf00      	nop
340090a8:	56028000 	.word	0x56028000

340090ac <LL_RCC_IC5_IsEnabled>:
{
340090ac:	b480      	push	{r7}
340090ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
340090b0:	4b07      	ldr	r3, [pc, #28]	@ (340090d0 <LL_RCC_IC5_IsEnabled+0x24>)
340090b2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340090b6:	f003 0310 	and.w	r3, r3, #16
340090ba:	2b10      	cmp	r3, #16
340090bc:	d101      	bne.n	340090c2 <LL_RCC_IC5_IsEnabled+0x16>
340090be:	2301      	movs	r3, #1
340090c0:	e000      	b.n	340090c4 <LL_RCC_IC5_IsEnabled+0x18>
340090c2:	2300      	movs	r3, #0
}
340090c4:	4618      	mov	r0, r3
340090c6:	46bd      	mov	sp, r7
340090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
340090cc:	4770      	bx	lr
340090ce:	bf00      	nop
340090d0:	56028000 	.word	0x56028000

340090d4 <LL_RCC_IC5_GetSource>:
{
340090d4:	b480      	push	{r7}
340090d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340090d8:	4b04      	ldr	r3, [pc, #16]	@ (340090ec <LL_RCC_IC5_GetSource+0x18>)
340090da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
340090de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340090e2:	4618      	mov	r0, r3
340090e4:	46bd      	mov	sp, r7
340090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340090ea:	4770      	bx	lr
340090ec:	56028000 	.word	0x56028000

340090f0 <LL_RCC_IC5_GetDivider>:
{
340090f0:	b480      	push	{r7}
340090f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340090f4:	4b05      	ldr	r3, [pc, #20]	@ (3400910c <LL_RCC_IC5_GetDivider+0x1c>)
340090f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
340090fa:	0c1b      	lsrs	r3, r3, #16
340090fc:	b2db      	uxtb	r3, r3
340090fe:	3301      	adds	r3, #1
}
34009100:	4618      	mov	r0, r3
34009102:	46bd      	mov	sp, r7
34009104:	f85d 7b04 	ldr.w	r7, [sp], #4
34009108:	4770      	bx	lr
3400910a:	bf00      	nop
3400910c:	56028000 	.word	0x56028000

34009110 <LL_RCC_IC7_Enable>:
{
34009110:	b480      	push	{r7}
34009112:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34009114:	4b04      	ldr	r3, [pc, #16]	@ (34009128 <LL_RCC_IC7_Enable+0x18>)
34009116:	2240      	movs	r2, #64	@ 0x40
34009118:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400911c:	bf00      	nop
3400911e:	46bd      	mov	sp, r7
34009120:	f85d 7b04 	ldr.w	r7, [sp], #4
34009124:	4770      	bx	lr
34009126:	bf00      	nop
34009128:	56028000 	.word	0x56028000

3400912c <LL_RCC_IC7_IsEnabled>:
{
3400912c:	b480      	push	{r7}
3400912e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34009130:	4b07      	ldr	r3, [pc, #28]	@ (34009150 <LL_RCC_IC7_IsEnabled+0x24>)
34009132:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400913a:	2b40      	cmp	r3, #64	@ 0x40
3400913c:	d101      	bne.n	34009142 <LL_RCC_IC7_IsEnabled+0x16>
3400913e:	2301      	movs	r3, #1
34009140:	e000      	b.n	34009144 <LL_RCC_IC7_IsEnabled+0x18>
34009142:	2300      	movs	r3, #0
}
34009144:	4618      	mov	r0, r3
34009146:	46bd      	mov	sp, r7
34009148:	f85d 7b04 	ldr.w	r7, [sp], #4
3400914c:	4770      	bx	lr
3400914e:	bf00      	nop
34009150:	56028000 	.word	0x56028000

34009154 <LL_RCC_IC7_GetSource>:
{
34009154:	b480      	push	{r7}
34009156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009158:	4b04      	ldr	r3, [pc, #16]	@ (3400916c <LL_RCC_IC7_GetSource+0x18>)
3400915a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400915e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009162:	4618      	mov	r0, r3
34009164:	46bd      	mov	sp, r7
34009166:	f85d 7b04 	ldr.w	r7, [sp], #4
3400916a:	4770      	bx	lr
3400916c:	56028000 	.word	0x56028000

34009170 <LL_RCC_IC7_GetDivider>:
{
34009170:	b480      	push	{r7}
34009172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34009174:	4b05      	ldr	r3, [pc, #20]	@ (3400918c <LL_RCC_IC7_GetDivider+0x1c>)
34009176:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400917a:	0c1b      	lsrs	r3, r3, #16
3400917c:	b2db      	uxtb	r3, r3
3400917e:	3301      	adds	r3, #1
}
34009180:	4618      	mov	r0, r3
34009182:	46bd      	mov	sp, r7
34009184:	f85d 7b04 	ldr.w	r7, [sp], #4
34009188:	4770      	bx	lr
3400918a:	bf00      	nop
3400918c:	56028000 	.word	0x56028000

34009190 <LL_RCC_IC8_Enable>:
{
34009190:	b480      	push	{r7}
34009192:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34009194:	4b04      	ldr	r3, [pc, #16]	@ (340091a8 <LL_RCC_IC8_Enable+0x18>)
34009196:	2280      	movs	r2, #128	@ 0x80
34009198:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400919c:	bf00      	nop
3400919e:	46bd      	mov	sp, r7
340091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
340091a4:	4770      	bx	lr
340091a6:	bf00      	nop
340091a8:	56028000 	.word	0x56028000

340091ac <LL_RCC_IC8_IsEnabled>:
{
340091ac:	b480      	push	{r7}
340091ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
340091b0:	4b07      	ldr	r3, [pc, #28]	@ (340091d0 <LL_RCC_IC8_IsEnabled+0x24>)
340091b2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340091b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340091ba:	2b80      	cmp	r3, #128	@ 0x80
340091bc:	d101      	bne.n	340091c2 <LL_RCC_IC8_IsEnabled+0x16>
340091be:	2301      	movs	r3, #1
340091c0:	e000      	b.n	340091c4 <LL_RCC_IC8_IsEnabled+0x18>
340091c2:	2300      	movs	r3, #0
}
340091c4:	4618      	mov	r0, r3
340091c6:	46bd      	mov	sp, r7
340091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
340091cc:	4770      	bx	lr
340091ce:	bf00      	nop
340091d0:	56028000 	.word	0x56028000

340091d4 <LL_RCC_IC8_GetSource>:
{
340091d4:	b480      	push	{r7}
340091d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340091d8:	4b04      	ldr	r3, [pc, #16]	@ (340091ec <LL_RCC_IC8_GetSource+0x18>)
340091da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
340091de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340091e2:	4618      	mov	r0, r3
340091e4:	46bd      	mov	sp, r7
340091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340091ea:	4770      	bx	lr
340091ec:	56028000 	.word	0x56028000

340091f0 <LL_RCC_IC8_GetDivider>:
{
340091f0:	b480      	push	{r7}
340091f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
340091f4:	4b05      	ldr	r3, [pc, #20]	@ (3400920c <LL_RCC_IC8_GetDivider+0x1c>)
340091f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
340091fa:	0c1b      	lsrs	r3, r3, #16
340091fc:	b2db      	uxtb	r3, r3
340091fe:	3301      	adds	r3, #1
}
34009200:	4618      	mov	r0, r3
34009202:	46bd      	mov	sp, r7
34009204:	f85d 7b04 	ldr.w	r7, [sp], #4
34009208:	4770      	bx	lr
3400920a:	bf00      	nop
3400920c:	56028000 	.word	0x56028000

34009210 <LL_RCC_IC9_Enable>:
{
34009210:	b480      	push	{r7}
34009212:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34009214:	4b04      	ldr	r3, [pc, #16]	@ (34009228 <LL_RCC_IC9_Enable+0x18>)
34009216:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400921a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400921e:	bf00      	nop
34009220:	46bd      	mov	sp, r7
34009222:	f85d 7b04 	ldr.w	r7, [sp], #4
34009226:	4770      	bx	lr
34009228:	56028000 	.word	0x56028000

3400922c <LL_RCC_IC9_IsEnabled>:
{
3400922c:	b480      	push	{r7}
3400922e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34009230:	4b07      	ldr	r3, [pc, #28]	@ (34009250 <LL_RCC_IC9_IsEnabled+0x24>)
34009232:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400923a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400923e:	d101      	bne.n	34009244 <LL_RCC_IC9_IsEnabled+0x18>
34009240:	2301      	movs	r3, #1
34009242:	e000      	b.n	34009246 <LL_RCC_IC9_IsEnabled+0x1a>
34009244:	2300      	movs	r3, #0
}
34009246:	4618      	mov	r0, r3
34009248:	46bd      	mov	sp, r7
3400924a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400924e:	4770      	bx	lr
34009250:	56028000 	.word	0x56028000

34009254 <LL_RCC_IC9_GetSource>:
{
34009254:	b480      	push	{r7}
34009256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34009258:	4b04      	ldr	r3, [pc, #16]	@ (3400926c <LL_RCC_IC9_GetSource+0x18>)
3400925a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400925e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009262:	4618      	mov	r0, r3
34009264:	46bd      	mov	sp, r7
34009266:	f85d 7b04 	ldr.w	r7, [sp], #4
3400926a:	4770      	bx	lr
3400926c:	56028000 	.word	0x56028000

34009270 <LL_RCC_IC9_GetDivider>:
{
34009270:	b480      	push	{r7}
34009272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34009274:	4b05      	ldr	r3, [pc, #20]	@ (3400928c <LL_RCC_IC9_GetDivider+0x1c>)
34009276:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400927a:	0c1b      	lsrs	r3, r3, #16
3400927c:	b2db      	uxtb	r3, r3
3400927e:	3301      	adds	r3, #1
}
34009280:	4618      	mov	r0, r3
34009282:	46bd      	mov	sp, r7
34009284:	f85d 7b04 	ldr.w	r7, [sp], #4
34009288:	4770      	bx	lr
3400928a:	bf00      	nop
3400928c:	56028000 	.word	0x56028000

34009290 <LL_RCC_IC10_Enable>:
{
34009290:	b480      	push	{r7}
34009292:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34009294:	4b04      	ldr	r3, [pc, #16]	@ (340092a8 <LL_RCC_IC10_Enable+0x18>)
34009296:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400929a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400929e:	bf00      	nop
340092a0:	46bd      	mov	sp, r7
340092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340092a6:	4770      	bx	lr
340092a8:	56028000 	.word	0x56028000

340092ac <LL_RCC_IC10_IsEnabled>:
{
340092ac:	b480      	push	{r7}
340092ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340092b0:	4b07      	ldr	r3, [pc, #28]	@ (340092d0 <LL_RCC_IC10_IsEnabled+0x24>)
340092b2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340092b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340092ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340092be:	d101      	bne.n	340092c4 <LL_RCC_IC10_IsEnabled+0x18>
340092c0:	2301      	movs	r3, #1
340092c2:	e000      	b.n	340092c6 <LL_RCC_IC10_IsEnabled+0x1a>
340092c4:	2300      	movs	r3, #0
}
340092c6:	4618      	mov	r0, r3
340092c8:	46bd      	mov	sp, r7
340092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
340092ce:	4770      	bx	lr
340092d0:	56028000 	.word	0x56028000

340092d4 <LL_RCC_IC10_GetSource>:
{
340092d4:	b480      	push	{r7}
340092d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340092d8:	4b04      	ldr	r3, [pc, #16]	@ (340092ec <LL_RCC_IC10_GetSource+0x18>)
340092da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
340092de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340092e2:	4618      	mov	r0, r3
340092e4:	46bd      	mov	sp, r7
340092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340092ea:	4770      	bx	lr
340092ec:	56028000 	.word	0x56028000

340092f0 <LL_RCC_IC10_GetDivider>:
{
340092f0:	b480      	push	{r7}
340092f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340092f4:	4b05      	ldr	r3, [pc, #20]	@ (3400930c <LL_RCC_IC10_GetDivider+0x1c>)
340092f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
340092fa:	0c1b      	lsrs	r3, r3, #16
340092fc:	b2db      	uxtb	r3, r3
340092fe:	3301      	adds	r3, #1
}
34009300:	4618      	mov	r0, r3
34009302:	46bd      	mov	sp, r7
34009304:	f85d 7b04 	ldr.w	r7, [sp], #4
34009308:	4770      	bx	lr
3400930a:	bf00      	nop
3400930c:	56028000 	.word	0x56028000

34009310 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
34009310:	b480      	push	{r7}
34009312:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34009314:	4b04      	ldr	r3, [pc, #16]	@ (34009328 <LL_RCC_IC12_Enable+0x18>)
34009316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3400931a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400931e:	bf00      	nop
34009320:	46bd      	mov	sp, r7
34009322:	f85d 7b04 	ldr.w	r7, [sp], #4
34009326:	4770      	bx	lr
34009328:	56028000 	.word	0x56028000

3400932c <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
3400932c:	b480      	push	{r7}
3400932e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34009330:	4b07      	ldr	r3, [pc, #28]	@ (34009350 <LL_RCC_IC12_IsEnabled+0x24>)
34009332:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009336:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400933a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3400933e:	d101      	bne.n	34009344 <LL_RCC_IC12_IsEnabled+0x18>
34009340:	2301      	movs	r3, #1
34009342:	e000      	b.n	34009346 <LL_RCC_IC12_IsEnabled+0x1a>
34009344:	2300      	movs	r3, #0
}
34009346:	4618      	mov	r0, r3
34009348:	46bd      	mov	sp, r7
3400934a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400934e:	4770      	bx	lr
34009350:	56028000 	.word	0x56028000

34009354 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
34009354:	b480      	push	{r7}
34009356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009358:	4b04      	ldr	r3, [pc, #16]	@ (3400936c <LL_RCC_IC12_GetSource+0x18>)
3400935a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400935e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009362:	4618      	mov	r0, r3
34009364:	46bd      	mov	sp, r7
34009366:	f85d 7b04 	ldr.w	r7, [sp], #4
3400936a:	4770      	bx	lr
3400936c:	56028000 	.word	0x56028000

34009370 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
34009370:	b480      	push	{r7}
34009372:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009374:	4b05      	ldr	r3, [pc, #20]	@ (3400938c <LL_RCC_IC12_GetDivider+0x1c>)
34009376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400937a:	0c1b      	lsrs	r3, r3, #16
3400937c:	b2db      	uxtb	r3, r3
3400937e:	3301      	adds	r3, #1
}
34009380:	4618      	mov	r0, r3
34009382:	46bd      	mov	sp, r7
34009384:	f85d 7b04 	ldr.w	r7, [sp], #4
34009388:	4770      	bx	lr
3400938a:	bf00      	nop
3400938c:	56028000 	.word	0x56028000

34009390 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
34009390:	b480      	push	{r7}
34009392:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34009394:	4b04      	ldr	r3, [pc, #16]	@ (340093a8 <LL_RCC_IC13_Enable+0x18>)
34009396:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400939a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400939e:	bf00      	nop
340093a0:	46bd      	mov	sp, r7
340093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340093a6:	4770      	bx	lr
340093a8:	56028000 	.word	0x56028000

340093ac <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
340093ac:	b480      	push	{r7}
340093ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
340093b0:	4b07      	ldr	r3, [pc, #28]	@ (340093d0 <LL_RCC_IC13_IsEnabled+0x24>)
340093b2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340093b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340093ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340093be:	d101      	bne.n	340093c4 <LL_RCC_IC13_IsEnabled+0x18>
340093c0:	2301      	movs	r3, #1
340093c2:	e000      	b.n	340093c6 <LL_RCC_IC13_IsEnabled+0x1a>
340093c4:	2300      	movs	r3, #0
}
340093c6:	4618      	mov	r0, r3
340093c8:	46bd      	mov	sp, r7
340093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
340093ce:	4770      	bx	lr
340093d0:	56028000 	.word	0x56028000

340093d4 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
340093d4:	b480      	push	{r7}
340093d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
340093d8:	4b04      	ldr	r3, [pc, #16]	@ (340093ec <LL_RCC_IC13_GetSource+0x18>)
340093da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
340093de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340093e2:	4618      	mov	r0, r3
340093e4:	46bd      	mov	sp, r7
340093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340093ea:	4770      	bx	lr
340093ec:	56028000 	.word	0x56028000

340093f0 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
340093f0:	b480      	push	{r7}
340093f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
340093f4:	4b05      	ldr	r3, [pc, #20]	@ (3400940c <LL_RCC_IC13_GetDivider+0x1c>)
340093f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
340093fa:	0c1b      	lsrs	r3, r3, #16
340093fc:	b2db      	uxtb	r3, r3
340093fe:	3301      	adds	r3, #1
}
34009400:	4618      	mov	r0, r3
34009402:	46bd      	mov	sp, r7
34009404:	f85d 7b04 	ldr.w	r7, [sp], #4
34009408:	4770      	bx	lr
3400940a:	bf00      	nop
3400940c:	56028000 	.word	0x56028000

34009410 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
34009410:	b480      	push	{r7}
34009412:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34009414:	4b04      	ldr	r3, [pc, #16]	@ (34009428 <LL_RCC_IC14_Enable+0x18>)
34009416:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3400941a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400941e:	bf00      	nop
34009420:	46bd      	mov	sp, r7
34009422:	f85d 7b04 	ldr.w	r7, [sp], #4
34009426:	4770      	bx	lr
34009428:	56028000 	.word	0x56028000

3400942c <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
3400942c:	b480      	push	{r7}
3400942e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34009430:	4b07      	ldr	r3, [pc, #28]	@ (34009450 <LL_RCC_IC14_IsEnabled+0x24>)
34009432:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400943a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400943e:	d101      	bne.n	34009444 <LL_RCC_IC14_IsEnabled+0x18>
34009440:	2301      	movs	r3, #1
34009442:	e000      	b.n	34009446 <LL_RCC_IC14_IsEnabled+0x1a>
34009444:	2300      	movs	r3, #0
}
34009446:	4618      	mov	r0, r3
34009448:	46bd      	mov	sp, r7
3400944a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400944e:	4770      	bx	lr
34009450:	56028000 	.word	0x56028000

34009454 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
34009454:	b480      	push	{r7}
34009456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34009458:	4b04      	ldr	r3, [pc, #16]	@ (3400946c <LL_RCC_IC14_GetSource+0x18>)
3400945a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400945e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009462:	4618      	mov	r0, r3
34009464:	46bd      	mov	sp, r7
34009466:	f85d 7b04 	ldr.w	r7, [sp], #4
3400946a:	4770      	bx	lr
3400946c:	56028000 	.word	0x56028000

34009470 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
34009470:	b480      	push	{r7}
34009472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34009474:	4b05      	ldr	r3, [pc, #20]	@ (3400948c <LL_RCC_IC14_GetDivider+0x1c>)
34009476:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400947a:	0c1b      	lsrs	r3, r3, #16
3400947c:	b2db      	uxtb	r3, r3
3400947e:	3301      	adds	r3, #1
}
34009480:	4618      	mov	r0, r3
34009482:	46bd      	mov	sp, r7
34009484:	f85d 7b04 	ldr.w	r7, [sp], #4
34009488:	4770      	bx	lr
3400948a:	bf00      	nop
3400948c:	56028000 	.word	0x56028000

34009490 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
34009490:	b480      	push	{r7}
34009492:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34009494:	4b04      	ldr	r3, [pc, #16]	@ (340094a8 <LL_RCC_IC15_Enable+0x18>)
34009496:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3400949a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400949e:	bf00      	nop
340094a0:	46bd      	mov	sp, r7
340094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340094a6:	4770      	bx	lr
340094a8:	56028000 	.word	0x56028000

340094ac <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
340094ac:	b480      	push	{r7}
340094ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
340094b0:	4b07      	ldr	r3, [pc, #28]	@ (340094d0 <LL_RCC_IC15_IsEnabled+0x24>)
340094b2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340094b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
340094ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
340094be:	d101      	bne.n	340094c4 <LL_RCC_IC15_IsEnabled+0x18>
340094c0:	2301      	movs	r3, #1
340094c2:	e000      	b.n	340094c6 <LL_RCC_IC15_IsEnabled+0x1a>
340094c4:	2300      	movs	r3, #0
}
340094c6:	4618      	mov	r0, r3
340094c8:	46bd      	mov	sp, r7
340094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
340094ce:	4770      	bx	lr
340094d0:	56028000 	.word	0x56028000

340094d4 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
340094d4:	b480      	push	{r7}
340094d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340094d8:	4b04      	ldr	r3, [pc, #16]	@ (340094ec <LL_RCC_IC15_GetSource+0x18>)
340094da:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340094de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340094e2:	4618      	mov	r0, r3
340094e4:	46bd      	mov	sp, r7
340094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340094ea:	4770      	bx	lr
340094ec:	56028000 	.word	0x56028000

340094f0 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
340094f0:	b480      	push	{r7}
340094f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
340094f4:	4b05      	ldr	r3, [pc, #20]	@ (3400950c <LL_RCC_IC15_GetDivider+0x1c>)
340094f6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340094fa:	0c1b      	lsrs	r3, r3, #16
340094fc:	b2db      	uxtb	r3, r3
340094fe:	3301      	adds	r3, #1
}
34009500:	4618      	mov	r0, r3
34009502:	46bd      	mov	sp, r7
34009504:	f85d 7b04 	ldr.w	r7, [sp], #4
34009508:	4770      	bx	lr
3400950a:	bf00      	nop
3400950c:	56028000 	.word	0x56028000

34009510 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34009510:	b480      	push	{r7}
34009512:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34009514:	4b04      	ldr	r3, [pc, #16]	@ (34009528 <LL_RCC_IC16_Enable+0x18>)
34009516:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400951a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400951e:	bf00      	nop
34009520:	46bd      	mov	sp, r7
34009522:	f85d 7b04 	ldr.w	r7, [sp], #4
34009526:	4770      	bx	lr
34009528:	56028000 	.word	0x56028000

3400952c <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
3400952c:	b480      	push	{r7}
3400952e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34009530:	4b07      	ldr	r3, [pc, #28]	@ (34009550 <LL_RCC_IC16_IsEnabled+0x24>)
34009532:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009536:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400953a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3400953e:	d101      	bne.n	34009544 <LL_RCC_IC16_IsEnabled+0x18>
34009540:	2301      	movs	r3, #1
34009542:	e000      	b.n	34009546 <LL_RCC_IC16_IsEnabled+0x1a>
34009544:	2300      	movs	r3, #0
}
34009546:	4618      	mov	r0, r3
34009548:	46bd      	mov	sp, r7
3400954a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400954e:	4770      	bx	lr
34009550:	56028000 	.word	0x56028000

34009554 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
34009554:	b480      	push	{r7}
34009556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009558:	4b04      	ldr	r3, [pc, #16]	@ (3400956c <LL_RCC_IC16_GetSource+0x18>)
3400955a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400955e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009562:	4618      	mov	r0, r3
34009564:	46bd      	mov	sp, r7
34009566:	f85d 7b04 	ldr.w	r7, [sp], #4
3400956a:	4770      	bx	lr
3400956c:	56028000 	.word	0x56028000

34009570 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
34009570:	b480      	push	{r7}
34009572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009574:	4b05      	ldr	r3, [pc, #20]	@ (3400958c <LL_RCC_IC16_GetDivider+0x1c>)
34009576:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400957a:	0c1b      	lsrs	r3, r3, #16
3400957c:	b2db      	uxtb	r3, r3
3400957e:	3301      	adds	r3, #1
}
34009580:	4618      	mov	r0, r3
34009582:	46bd      	mov	sp, r7
34009584:	f85d 7b04 	ldr.w	r7, [sp], #4
34009588:	4770      	bx	lr
3400958a:	bf00      	nop
3400958c:	56028000 	.word	0x56028000

34009590 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
34009590:	b480      	push	{r7}
34009592:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34009594:	4b04      	ldr	r3, [pc, #16]	@ (340095a8 <LL_RCC_IC17_Enable+0x18>)
34009596:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3400959a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400959e:	bf00      	nop
340095a0:	46bd      	mov	sp, r7
340095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340095a6:	4770      	bx	lr
340095a8:	56028000 	.word	0x56028000

340095ac <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
340095ac:	b480      	push	{r7}
340095ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
340095b0:	4b07      	ldr	r3, [pc, #28]	@ (340095d0 <LL_RCC_IC17_IsEnabled+0x24>)
340095b2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340095b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340095ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340095be:	d101      	bne.n	340095c4 <LL_RCC_IC17_IsEnabled+0x18>
340095c0:	2301      	movs	r3, #1
340095c2:	e000      	b.n	340095c6 <LL_RCC_IC17_IsEnabled+0x1a>
340095c4:	2300      	movs	r3, #0
}
340095c6:	4618      	mov	r0, r3
340095c8:	46bd      	mov	sp, r7
340095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
340095ce:	4770      	bx	lr
340095d0:	56028000 	.word	0x56028000

340095d4 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
340095d4:	b480      	push	{r7}
340095d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
340095d8:	4b04      	ldr	r3, [pc, #16]	@ (340095ec <LL_RCC_IC17_GetSource+0x18>)
340095da:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
340095de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340095e2:	4618      	mov	r0, r3
340095e4:	46bd      	mov	sp, r7
340095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340095ea:	4770      	bx	lr
340095ec:	56028000 	.word	0x56028000

340095f0 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
340095f0:	b480      	push	{r7}
340095f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
340095f4:	4b05      	ldr	r3, [pc, #20]	@ (3400960c <LL_RCC_IC17_GetDivider+0x1c>)
340095f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
340095fa:	0c1b      	lsrs	r3, r3, #16
340095fc:	b2db      	uxtb	r3, r3
340095fe:	3301      	adds	r3, #1
}
34009600:	4618      	mov	r0, r3
34009602:	46bd      	mov	sp, r7
34009604:	f85d 7b04 	ldr.w	r7, [sp], #4
34009608:	4770      	bx	lr
3400960a:	bf00      	nop
3400960c:	56028000 	.word	0x56028000

34009610 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34009610:	b480      	push	{r7}
34009612:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34009614:	4b04      	ldr	r3, [pc, #16]	@ (34009628 <LL_RCC_IC18_Enable+0x18>)
34009616:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3400961a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400961e:	bf00      	nop
34009620:	46bd      	mov	sp, r7
34009622:	f85d 7b04 	ldr.w	r7, [sp], #4
34009626:	4770      	bx	lr
34009628:	56028000 	.word	0x56028000

3400962c <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
3400962c:	b480      	push	{r7}
3400962e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34009630:	4b07      	ldr	r3, [pc, #28]	@ (34009650 <LL_RCC_IC18_IsEnabled+0x24>)
34009632:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400963a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400963e:	d101      	bne.n	34009644 <LL_RCC_IC18_IsEnabled+0x18>
34009640:	2301      	movs	r3, #1
34009642:	e000      	b.n	34009646 <LL_RCC_IC18_IsEnabled+0x1a>
34009644:	2300      	movs	r3, #0
}
34009646:	4618      	mov	r0, r3
34009648:	46bd      	mov	sp, r7
3400964a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400964e:	4770      	bx	lr
34009650:	56028000 	.word	0x56028000

34009654 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
34009654:	b480      	push	{r7}
34009656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34009658:	4b04      	ldr	r3, [pc, #16]	@ (3400966c <LL_RCC_IC18_GetSource+0x18>)
3400965a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400965e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009662:	4618      	mov	r0, r3
34009664:	46bd      	mov	sp, r7
34009666:	f85d 7b04 	ldr.w	r7, [sp], #4
3400966a:	4770      	bx	lr
3400966c:	56028000 	.word	0x56028000

34009670 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
34009670:	b480      	push	{r7}
34009672:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009674:	4b05      	ldr	r3, [pc, #20]	@ (3400968c <LL_RCC_IC18_GetDivider+0x1c>)
34009676:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400967a:	0c1b      	lsrs	r3, r3, #16
3400967c:	b2db      	uxtb	r3, r3
3400967e:	3301      	adds	r3, #1
}
34009680:	4618      	mov	r0, r3
34009682:	46bd      	mov	sp, r7
34009684:	f85d 7b04 	ldr.w	r7, [sp], #4
34009688:	4770      	bx	lr
3400968a:	bf00      	nop
3400968c:	56028000 	.word	0x56028000

34009690 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
34009690:	b480      	push	{r7}
34009692:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34009694:	4b04      	ldr	r3, [pc, #16]	@ (340096a8 <LL_RCC_IC19_Enable+0x18>)
34009696:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3400969a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400969e:	bf00      	nop
340096a0:	46bd      	mov	sp, r7
340096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340096a6:	4770      	bx	lr
340096a8:	56028000 	.word	0x56028000

340096ac <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
340096ac:	b480      	push	{r7}
340096ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
340096b0:	4b07      	ldr	r3, [pc, #28]	@ (340096d0 <LL_RCC_IC19_IsEnabled+0x24>)
340096b2:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340096b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
340096ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340096be:	d101      	bne.n	340096c4 <LL_RCC_IC19_IsEnabled+0x18>
340096c0:	2301      	movs	r3, #1
340096c2:	e000      	b.n	340096c6 <LL_RCC_IC19_IsEnabled+0x1a>
340096c4:	2300      	movs	r3, #0
}
340096c6:	4618      	mov	r0, r3
340096c8:	46bd      	mov	sp, r7
340096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
340096ce:	4770      	bx	lr
340096d0:	56028000 	.word	0x56028000

340096d4 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
340096d4:	b480      	push	{r7}
340096d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340096d8:	4b04      	ldr	r3, [pc, #16]	@ (340096ec <LL_RCC_IC19_GetSource+0x18>)
340096da:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
340096de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340096e2:	4618      	mov	r0, r3
340096e4:	46bd      	mov	sp, r7
340096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340096ea:	4770      	bx	lr
340096ec:	56028000 	.word	0x56028000

340096f0 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
340096f0:	b480      	push	{r7}
340096f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340096f4:	4b05      	ldr	r3, [pc, #20]	@ (3400970c <LL_RCC_IC19_GetDivider+0x1c>)
340096f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
340096fa:	0c1b      	lsrs	r3, r3, #16
340096fc:	b2db      	uxtb	r3, r3
340096fe:	3301      	adds	r3, #1
}
34009700:	4618      	mov	r0, r3
34009702:	46bd      	mov	sp, r7
34009704:	f85d 7b04 	ldr.w	r7, [sp], #4
34009708:	4770      	bx	lr
3400970a:	bf00      	nop
3400970c:	56028000 	.word	0x56028000

34009710 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34009710:	b480      	push	{r7}
34009712:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34009714:	4b04      	ldr	r3, [pc, #16]	@ (34009728 <LL_RCC_IC20_Enable+0x18>)
34009716:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3400971a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400971e:	bf00      	nop
34009720:	46bd      	mov	sp, r7
34009722:	f85d 7b04 	ldr.w	r7, [sp], #4
34009726:	4770      	bx	lr
34009728:	56028000 	.word	0x56028000

3400972c <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
3400972c:	b480      	push	{r7}
3400972e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34009730:	4b07      	ldr	r3, [pc, #28]	@ (34009750 <LL_RCC_IC20_IsEnabled+0x24>)
34009732:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34009736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400973a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3400973e:	d101      	bne.n	34009744 <LL_RCC_IC20_IsEnabled+0x18>
34009740:	2301      	movs	r3, #1
34009742:	e000      	b.n	34009746 <LL_RCC_IC20_IsEnabled+0x1a>
34009744:	2300      	movs	r3, #0
}
34009746:	4618      	mov	r0, r3
34009748:	46bd      	mov	sp, r7
3400974a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400974e:	4770      	bx	lr
34009750:	56028000 	.word	0x56028000

34009754 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
34009754:	b480      	push	{r7}
34009756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009758:	4b04      	ldr	r3, [pc, #16]	@ (3400976c <LL_RCC_IC20_GetSource+0x18>)
3400975a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400975e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009762:	4618      	mov	r0, r3
34009764:	46bd      	mov	sp, r7
34009766:	f85d 7b04 	ldr.w	r7, [sp], #4
3400976a:	4770      	bx	lr
3400976c:	56028000 	.word	0x56028000

34009770 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
34009770:	b480      	push	{r7}
34009772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009774:	4b05      	ldr	r3, [pc, #20]	@ (3400978c <LL_RCC_IC20_GetDivider+0x1c>)
34009776:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400977a:	0c1b      	lsrs	r3, r3, #16
3400977c:	b2db      	uxtb	r3, r3
3400977e:	3301      	adds	r3, #1
}
34009780:	4618      	mov	r0, r3
34009782:	46bd      	mov	sp, r7
34009784:	f85d 7b04 	ldr.w	r7, [sp], #4
34009788:	4770      	bx	lr
3400978a:	bf00      	nop
3400978c:	56028000 	.word	0x56028000

34009790 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
34009790:	b480      	push	{r7}
34009792:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34009794:	4b04      	ldr	r3, [pc, #16]	@ (340097a8 <LL_RCC_CLKP_Enable+0x18>)
34009796:	2240      	movs	r2, #64	@ 0x40
34009798:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
3400979c:	bf00      	nop
3400979e:	46bd      	mov	sp, r7
340097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
340097a4:	4770      	bx	lr
340097a6:	bf00      	nop
340097a8:	56028000 	.word	0x56028000

340097ac <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
340097ac:	b480      	push	{r7}
340097ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
340097b0:	4b07      	ldr	r3, [pc, #28]	@ (340097d0 <LL_RCC_CLKP_IsEnabled+0x24>)
340097b2:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
340097b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340097ba:	2b40      	cmp	r3, #64	@ 0x40
340097bc:	d101      	bne.n	340097c2 <LL_RCC_CLKP_IsEnabled+0x16>
340097be:	2301      	movs	r3, #1
340097c0:	e000      	b.n	340097c4 <LL_RCC_CLKP_IsEnabled+0x18>
340097c2:	2300      	movs	r3, #0
}
340097c4:	4618      	mov	r0, r3
340097c6:	46bd      	mov	sp, r7
340097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
340097cc:	4770      	bx	lr
340097ce:	bf00      	nop
340097d0:	56028000 	.word	0x56028000

340097d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
340097d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
340097d8:	f5ad 7d64 	sub.w	sp, sp, #912	@ 0x390
340097dc:	af00      	add	r7, sp, #0
340097de:	f8c7 037c 	str.w	r0, [r7, #892]	@ 0x37c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
340097e2:	2300      	movs	r3, #0
340097e4:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
340097e8:	2300      	movs	r3, #0
340097ea:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
340097ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
340097f6:	f402 6400 	and.w	r4, r2, #2048	@ 0x800
340097fa:	2500      	movs	r5, #0
340097fc:	ea54 0305 	orrs.w	r3, r4, r5
34009800:	f040 83e0 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009804:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009808:	e9d3 2300 	ldrd	r2, r3, [r3]
3400980c:	f04f 0800 	mov.w	r8, #0
34009810:	f403 0980 	and.w	r9, r3, #4194304	@ 0x400000
34009814:	ea58 0309 	orrs.w	r3, r8, r9
34009818:	f040 83d4 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400981c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009820:	e9d3 2300 	ldrd	r2, r3, [r3]
34009824:	f04f 0a00 	mov.w	sl, #0
34009828:	f403 0b00 	and.w	fp, r3, #8388608	@ 0x800000
3400982c:	ea5a 030b 	orrs.w	r3, sl, fp
34009830:	f040 83c8 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009834:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009838:	e9d3 2300 	ldrd	r2, r3, [r3]
3400983c:	2100      	movs	r1, #0
3400983e:	f8c7 1370 	str.w	r1, [r7, #880]	@ 0x370
34009842:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34009846:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
3400984a:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	@ 0x370
3400984e:	4603      	mov	r3, r0
34009850:	460a      	mov	r2, r1
34009852:	4313      	orrs	r3, r2
34009854:	f040 83b6 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009858:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400985c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009860:	f002 0304 	and.w	r3, r2, #4
34009864:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
34009868:	2300      	movs	r3, #0
3400986a:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
3400986e:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	@ 0x368
34009872:	4603      	mov	r3, r0
34009874:	460a      	mov	r2, r1
34009876:	4313      	orrs	r3, r2
34009878:	f040 83a4 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400987c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009880:	e9d3 2300 	ldrd	r2, r3, [r3]
34009884:	f002 0301 	and.w	r3, r2, #1
34009888:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
3400988c:	2300      	movs	r3, #0
3400988e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
34009892:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	@ 0x360
34009896:	4603      	mov	r3, r0
34009898:	460a      	mov	r2, r1
3400989a:	4313      	orrs	r3, r2
3400989c:	f040 8392 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340098a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
340098a8:	f002 0302 	and.w	r3, r2, #2
340098ac:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
340098b0:	2300      	movs	r3, #0
340098b2:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
340098b6:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
340098ba:	4603      	mov	r3, r0
340098bc:	460a      	mov	r2, r1
340098be:	4313      	orrs	r3, r2
340098c0:	f040 8380 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340098c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
340098cc:	f002 0308 	and.w	r3, r2, #8
340098d0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
340098d4:	2300      	movs	r3, #0
340098d6:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
340098da:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
340098de:	4603      	mov	r3, r0
340098e0:	460a      	mov	r2, r1
340098e2:	4313      	orrs	r3, r2
340098e4:	f040 836e 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340098e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
340098f0:	f002 0310 	and.w	r3, r2, #16
340098f4:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
340098f8:	2300      	movs	r3, #0
340098fa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
340098fe:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
34009902:	4603      	mov	r3, r0
34009904:	460a      	mov	r2, r1
34009906:	4313      	orrs	r3, r2
34009908:	f040 835c 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400990c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009910:	e9d3 2300 	ldrd	r2, r3, [r3]
34009914:	f002 0320 	and.w	r3, r2, #32
34009918:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
3400991c:	2300      	movs	r3, #0
3400991e:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
34009922:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
34009926:	4603      	mov	r3, r0
34009928:	460a      	mov	r2, r1
3400992a:	4313      	orrs	r3, r2
3400992c:	f040 834a 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009930:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009934:	e9d3 2300 	ldrd	r2, r3, [r3]
34009938:	f002 0340 	and.w	r3, r2, #64	@ 0x40
3400993c:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
34009940:	2300      	movs	r3, #0
34009942:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
34009946:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
3400994a:	4603      	mov	r3, r0
3400994c:	460a      	mov	r2, r1
3400994e:	4313      	orrs	r3, r2
34009950:	f040 8338 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009954:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009958:	e9d3 2300 	ldrd	r2, r3, [r3]
3400995c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
34009960:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
34009964:	2300      	movs	r3, #0
34009966:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
3400996a:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
3400996e:	4603      	mov	r3, r0
34009970:	460a      	mov	r2, r1
34009972:	4313      	orrs	r3, r2
34009974:	f040 8326 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009978:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400997c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009980:	f402 7380 	and.w	r3, r2, #256	@ 0x100
34009984:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
34009988:	2300      	movs	r3, #0
3400998a:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
3400998e:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
34009992:	4603      	mov	r3, r0
34009994:	460a      	mov	r2, r1
34009996:	4313      	orrs	r3, r2
34009998:	f040 8314 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400999c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
340099a4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
340099a8:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
340099ac:	2300      	movs	r3, #0
340099ae:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
340099b2:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
340099b6:	4603      	mov	r3, r0
340099b8:	460a      	mov	r2, r1
340099ba:	4313      	orrs	r3, r2
340099bc:	f040 8302 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340099c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
340099c8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
340099cc:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
340099d0:	2300      	movs	r3, #0
340099d2:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
340099d6:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
340099da:	4603      	mov	r3, r0
340099dc:	460a      	mov	r2, r1
340099de:	4313      	orrs	r3, r2
340099e0:	f040 82f0 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340099e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
340099ec:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
340099f0:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
340099f4:	2300      	movs	r3, #0
340099f6:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
340099fa:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
340099fe:	4603      	mov	r3, r0
34009a00:	460a      	mov	r2, r1
34009a02:	4313      	orrs	r3, r2
34009a04:	f040 82de 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a10:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
34009a14:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
34009a18:	2300      	movs	r3, #0
34009a1a:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
34009a1e:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	@ 0x308
34009a22:	4603      	mov	r3, r0
34009a24:	460a      	mov	r2, r1
34009a26:	4313      	orrs	r3, r2
34009a28:	f040 82cc 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a34:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
34009a38:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
34009a3c:	2300      	movs	r3, #0
34009a3e:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
34009a42:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
34009a46:	4603      	mov	r3, r0
34009a48:	460a      	mov	r2, r1
34009a4a:	4313      	orrs	r3, r2
34009a4c:	f040 82ba 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a58:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
34009a5c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
34009a60:	2300      	movs	r3, #0
34009a62:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
34009a66:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
34009a6a:	4603      	mov	r3, r0
34009a6c:	460a      	mov	r2, r1
34009a6e:	4313      	orrs	r3, r2
34009a70:	f040 82a8 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a7c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
34009a80:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
34009a84:	2300      	movs	r3, #0
34009a86:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
34009a8a:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
34009a8e:	4603      	mov	r3, r0
34009a90:	460a      	mov	r2, r1
34009a92:	4313      	orrs	r3, r2
34009a94:	f040 8296 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009aa0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
34009aa4:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
34009aa8:	2300      	movs	r3, #0
34009aaa:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
34009aae:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
34009ab2:	4603      	mov	r3, r0
34009ab4:	460a      	mov	r2, r1
34009ab6:	4313      	orrs	r3, r2
34009ab8:	f040 8284 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009abc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ac4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
34009ac8:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
34009acc:	2300      	movs	r3, #0
34009ace:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
34009ad2:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
34009ad6:	4603      	mov	r3, r0
34009ad8:	460a      	mov	r2, r1
34009ada:	4313      	orrs	r3, r2
34009adc:	f040 8272 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ae0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ae8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34009aec:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
34009af0:	2300      	movs	r3, #0
34009af2:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
34009af6:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
34009afa:	4603      	mov	r3, r0
34009afc:	460a      	mov	r2, r1
34009afe:	4313      	orrs	r3, r2
34009b00:	f040 8260 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b0c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34009b10:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
34009b14:	2300      	movs	r3, #0
34009b16:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
34009b1a:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
34009b1e:	4603      	mov	r3, r0
34009b20:	460a      	mov	r2, r1
34009b22:	4313      	orrs	r3, r2
34009b24:	f040 824e 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b30:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34009b34:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
34009b38:	2300      	movs	r3, #0
34009b3a:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
34009b3e:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
34009b42:	4603      	mov	r3, r0
34009b44:	460a      	mov	r2, r1
34009b46:	4313      	orrs	r3, r2
34009b48:	f040 823c 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
34009b58:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
34009b5c:	2300      	movs	r3, #0
34009b5e:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
34009b62:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
34009b66:	4603      	mov	r3, r0
34009b68:	460a      	mov	r2, r1
34009b6a:	4313      	orrs	r3, r2
34009b6c:	f040 822a 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b78:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
34009b7c:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
34009b80:	2300      	movs	r3, #0
34009b82:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
34009b86:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
34009b8a:	4603      	mov	r3, r0
34009b8c:	460a      	mov	r2, r1
34009b8e:	4313      	orrs	r3, r2
34009b90:	f040 8218 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b9c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
34009ba0:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
34009ba4:	2300      	movs	r3, #0
34009ba6:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
34009baa:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
34009bae:	4603      	mov	r3, r0
34009bb0:	460a      	mov	r2, r1
34009bb2:	4313      	orrs	r3, r2
34009bb4:	f040 8206 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009bb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009bc0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
34009bc4:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
34009bc8:	2300      	movs	r3, #0
34009bca:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
34009bce:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
34009bd2:	4603      	mov	r3, r0
34009bd4:	460a      	mov	r2, r1
34009bd6:	4313      	orrs	r3, r2
34009bd8:	f040 81f4 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009bdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009be4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34009be8:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
34009bec:	2300      	movs	r3, #0
34009bee:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
34009bf2:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
34009bf6:	4603      	mov	r3, r0
34009bf8:	460a      	mov	r2, r1
34009bfa:	4313      	orrs	r3, r2
34009bfc:	f040 81e2 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c08:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
34009c0c:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
34009c10:	2300      	movs	r3, #0
34009c12:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
34009c16:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
34009c1a:	4603      	mov	r3, r0
34009c1c:	460a      	mov	r2, r1
34009c1e:	4313      	orrs	r3, r2
34009c20:	f040 81d0 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c2c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
34009c30:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
34009c34:	2300      	movs	r3, #0
34009c36:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
34009c3a:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
34009c3e:	4603      	mov	r3, r0
34009c40:	460a      	mov	r2, r1
34009c42:	4313      	orrs	r3, r2
34009c44:	f040 81be 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
34009c54:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
34009c58:	2300      	movs	r3, #0
34009c5a:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
34009c5e:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
34009c62:	4603      	mov	r3, r0
34009c64:	460a      	mov	r2, r1
34009c66:	4313      	orrs	r3, r2
34009c68:	f040 81ac 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c74:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
34009c78:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
34009c7c:	2300      	movs	r3, #0
34009c7e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
34009c82:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
34009c86:	4603      	mov	r3, r0
34009c88:	460a      	mov	r2, r1
34009c8a:	4313      	orrs	r3, r2
34009c8c:	f040 819a 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c98:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
34009c9c:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
34009ca0:	2300      	movs	r3, #0
34009ca2:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
34009ca6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
34009caa:	4603      	mov	r3, r0
34009cac:	460a      	mov	r2, r1
34009cae:	4313      	orrs	r3, r2
34009cb0:	f040 8188 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009cb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009cbc:	2100      	movs	r1, #0
34009cbe:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
34009cc2:	f003 0301 	and.w	r3, r3, #1
34009cc6:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
34009cca:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
34009cce:	4603      	mov	r3, r0
34009cd0:	460a      	mov	r2, r1
34009cd2:	4313      	orrs	r3, r2
34009cd4:	f040 8176 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009cd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ce0:	2100      	movs	r1, #0
34009ce2:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
34009ce6:	f003 0302 	and.w	r3, r3, #2
34009cea:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
34009cee:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
34009cf2:	4603      	mov	r3, r0
34009cf4:	460a      	mov	r2, r1
34009cf6:	4313      	orrs	r3, r2
34009cf8:	f040 8164 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009cfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d04:	2100      	movs	r1, #0
34009d06:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
34009d0a:	f003 0304 	and.w	r3, r3, #4
34009d0e:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
34009d12:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
34009d16:	4603      	mov	r3, r0
34009d18:	460a      	mov	r2, r1
34009d1a:	4313      	orrs	r3, r2
34009d1c:	f040 8152 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d28:	2100      	movs	r1, #0
34009d2a:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
34009d2e:	f003 0308 	and.w	r3, r3, #8
34009d32:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
34009d36:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
34009d3a:	4603      	mov	r3, r0
34009d3c:	460a      	mov	r2, r1
34009d3e:	4313      	orrs	r3, r2
34009d40:	f040 8140 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d4c:	2100      	movs	r1, #0
34009d4e:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
34009d52:	f003 0310 	and.w	r3, r3, #16
34009d56:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
34009d5a:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
34009d5e:	4603      	mov	r3, r0
34009d60:	460a      	mov	r2, r1
34009d62:	4313      	orrs	r3, r2
34009d64:	f040 812e 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d70:	2100      	movs	r1, #0
34009d72:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
34009d76:	f003 0320 	and.w	r3, r3, #32
34009d7a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
34009d7e:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
34009d82:	4603      	mov	r3, r0
34009d84:	460a      	mov	r2, r1
34009d86:	4313      	orrs	r3, r2
34009d88:	f040 811c 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d94:	2100      	movs	r1, #0
34009d96:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
34009d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34009d9e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
34009da2:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
34009da6:	4603      	mov	r3, r0
34009da8:	460a      	mov	r2, r1
34009daa:	4313      	orrs	r3, r2
34009dac:	f040 810a 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009db0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
34009db8:	2100      	movs	r1, #0
34009dba:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
34009dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34009dc2:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
34009dc6:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
34009dca:	4603      	mov	r3, r0
34009dcc:	460a      	mov	r2, r1
34009dce:	4313      	orrs	r3, r2
34009dd0:	f040 80f8 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009dd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ddc:	2100      	movs	r1, #0
34009dde:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
34009de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34009de6:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
34009dea:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
34009dee:	4603      	mov	r3, r0
34009df0:	460a      	mov	r2, r1
34009df2:	4313      	orrs	r3, r2
34009df4:	f040 80e6 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009df8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e00:	2100      	movs	r1, #0
34009e02:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
34009e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34009e0a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
34009e0e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
34009e12:	4603      	mov	r3, r0
34009e14:	460a      	mov	r2, r1
34009e16:	4313      	orrs	r3, r2
34009e18:	f040 80d4 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e24:	2100      	movs	r1, #0
34009e26:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
34009e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34009e2e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
34009e32:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
34009e36:	4603      	mov	r3, r0
34009e38:	460a      	mov	r2, r1
34009e3a:	4313      	orrs	r3, r2
34009e3c:	f040 80c2 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e48:	2100      	movs	r1, #0
34009e4a:	f8c7 1218 	str.w	r1, [r7, #536]	@ 0x218
34009e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34009e52:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
34009e56:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
34009e5a:	4603      	mov	r3, r0
34009e5c:	460a      	mov	r2, r1
34009e5e:	4313      	orrs	r3, r2
34009e60:	f040 80b0 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e6c:	2100      	movs	r1, #0
34009e6e:	f8c7 1210 	str.w	r1, [r7, #528]	@ 0x210
34009e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34009e76:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
34009e7a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
34009e7e:	4603      	mov	r3, r0
34009e80:	460a      	mov	r2, r1
34009e82:	4313      	orrs	r3, r2
34009e84:	f040 809e 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e90:	2100      	movs	r1, #0
34009e92:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
34009e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34009e9a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
34009e9e:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
34009ea2:	4603      	mov	r3, r0
34009ea4:	460a      	mov	r2, r1
34009ea6:	4313      	orrs	r3, r2
34009ea8:	f040 808c 	bne.w	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009eac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009eb4:	2100      	movs	r1, #0
34009eb6:	f8c7 1200 	str.w	r1, [r7, #512]	@ 0x200
34009eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34009ebe:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
34009ec2:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
34009ec6:	4603      	mov	r3, r0
34009ec8:	460a      	mov	r2, r1
34009eca:	4313      	orrs	r3, r2
34009ecc:	d17a      	bne.n	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ece:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ed6:	2100      	movs	r1, #0
34009ed8:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
34009edc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34009ee0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
34009ee4:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
34009ee8:	4603      	mov	r3, r0
34009eea:	460a      	mov	r2, r1
34009eec:	4313      	orrs	r3, r2
34009eee:	d169      	bne.n	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ef0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ef8:	2100      	movs	r1, #0
34009efa:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
34009efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34009f02:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
34009f06:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
34009f0a:	4603      	mov	r3, r0
34009f0c:	460a      	mov	r2, r1
34009f0e:	4313      	orrs	r3, r2
34009f10:	d158      	bne.n	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f1a:	2100      	movs	r1, #0
34009f1c:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
34009f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34009f24:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
34009f28:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
34009f2c:	4603      	mov	r3, r0
34009f2e:	460a      	mov	r2, r1
34009f30:	4313      	orrs	r3, r2
34009f32:	d147      	bne.n	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f3c:	2100      	movs	r1, #0
34009f3e:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
34009f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34009f46:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
34009f4a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
34009f4e:	4603      	mov	r3, r0
34009f50:	460a      	mov	r2, r1
34009f52:	4313      	orrs	r3, r2
34009f54:	d136      	bne.n	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f5e:	2100      	movs	r1, #0
34009f60:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
34009f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34009f68:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
34009f6c:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
34009f70:	4603      	mov	r3, r0
34009f72:	460a      	mov	r2, r1
34009f74:	4313      	orrs	r3, r2
34009f76:	d125      	bne.n	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f80:	2100      	movs	r1, #0
34009f82:	f8c7 11d0 	str.w	r1, [r7, #464]	@ 0x1d0
34009f86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34009f8a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
34009f8e:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
34009f92:	4603      	mov	r3, r0
34009f94:	460a      	mov	r2, r1
34009f96:	4313      	orrs	r3, r2
34009f98:	d114      	bne.n	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
34009fa2:	2100      	movs	r1, #0
34009fa4:	f8c7 11c8 	str.w	r1, [r7, #456]	@ 0x1c8
34009fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34009fac:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
34009fb0:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
34009fb4:	4603      	mov	r3, r0
34009fb6:	460a      	mov	r2, r1
34009fb8:	4313      	orrs	r3, r2
34009fba:	d103      	bne.n	34009fc4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009fbc:	2188      	movs	r1, #136	@ 0x88
34009fbe:	48d3      	ldr	r0, [pc, #844]	@ (3400a30c <HAL_RCCEx_PeriphCLKConfig+0xb38>)
34009fc0:	f7f7 fc30 	bl	34001824 <assert_failed>

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34009fc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009fcc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
34009fd0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
34009fd4:	2300      	movs	r3, #0
34009fd6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
34009fda:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
34009fde:	4603      	mov	r3, r0
34009fe0:	460a      	mov	r2, r1
34009fe2:	4313      	orrs	r3, r2
34009fe4:	f000 82b5 	beq.w	3400a552 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
34009fe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009fec:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009ff4:	f000 8240 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009ff8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ffc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400a004:	f000 8238 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a008:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a00c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a010:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400a014:	f000 8230 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a018:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a01c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a020:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
3400a024:	f000 8228 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a028:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a02c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a030:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
3400a034:	f000 8220 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a038:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a03c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a040:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
3400a044:	f000 8218 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a048:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a04c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a050:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
3400a054:	f000 8210 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a058:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a05c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a060:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
3400a064:	f000 8208 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a068:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a06c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a070:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
3400a074:	f000 8200 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a078:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a07c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a080:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
3400a084:	f000 81f8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a088:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a08c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a090:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
3400a094:	f000 81f0 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a098:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a09c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a0a0:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
3400a0a4:	f000 81e8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a0a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0ac:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a0b0:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
3400a0b4:	f000 81e0 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a0b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0bc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a0c0:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
3400a0c4:	f000 81d8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a0c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0cc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a0d0:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
3400a0d4:	f000 81d0 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a0d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0dc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a0e0:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
3400a0e4:	f000 81c8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a0e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0ec:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a0f0:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
3400a0f4:	f000 81c0 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a0f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0fc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a100:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
3400a104:	f000 81b8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a108:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a10c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a110:	4b7f      	ldr	r3, [pc, #508]	@ (3400a310 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
3400a112:	429a      	cmp	r2, r3
3400a114:	f000 81b0 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a118:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a11c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a120:	4b7c      	ldr	r3, [pc, #496]	@ (3400a314 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
3400a122:	429a      	cmp	r2, r3
3400a124:	f000 81a8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a128:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a12c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a130:	4b79      	ldr	r3, [pc, #484]	@ (3400a318 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
3400a132:	429a      	cmp	r2, r3
3400a134:	f000 81a0 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a138:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a13c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a140:	4b76      	ldr	r3, [pc, #472]	@ (3400a31c <HAL_RCCEx_PeriphCLKConfig+0xb48>)
3400a142:	429a      	cmp	r2, r3
3400a144:	f000 8198 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a148:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a14c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a150:	4b73      	ldr	r3, [pc, #460]	@ (3400a320 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
3400a152:	429a      	cmp	r2, r3
3400a154:	f000 8190 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a158:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a15c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a160:	4b70      	ldr	r3, [pc, #448]	@ (3400a324 <HAL_RCCEx_PeriphCLKConfig+0xb50>)
3400a162:	429a      	cmp	r2, r3
3400a164:	f000 8188 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a168:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a16c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a170:	4b6d      	ldr	r3, [pc, #436]	@ (3400a328 <HAL_RCCEx_PeriphCLKConfig+0xb54>)
3400a172:	429a      	cmp	r2, r3
3400a174:	f000 8180 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a178:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a17c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a180:	4b6a      	ldr	r3, [pc, #424]	@ (3400a32c <HAL_RCCEx_PeriphCLKConfig+0xb58>)
3400a182:	429a      	cmp	r2, r3
3400a184:	f000 8178 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a188:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a18c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a190:	4b67      	ldr	r3, [pc, #412]	@ (3400a330 <HAL_RCCEx_PeriphCLKConfig+0xb5c>)
3400a192:	429a      	cmp	r2, r3
3400a194:	f000 8170 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a198:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a19c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a1a0:	4b64      	ldr	r3, [pc, #400]	@ (3400a334 <HAL_RCCEx_PeriphCLKConfig+0xb60>)
3400a1a2:	429a      	cmp	r2, r3
3400a1a4:	f000 8168 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a1a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1ac:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a1b0:	4b61      	ldr	r3, [pc, #388]	@ (3400a338 <HAL_RCCEx_PeriphCLKConfig+0xb64>)
3400a1b2:	429a      	cmp	r2, r3
3400a1b4:	f000 8160 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a1b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1bc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a1c0:	4b5e      	ldr	r3, [pc, #376]	@ (3400a33c <HAL_RCCEx_PeriphCLKConfig+0xb68>)
3400a1c2:	429a      	cmp	r2, r3
3400a1c4:	f000 8158 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a1c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1cc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a1d0:	4b5b      	ldr	r3, [pc, #364]	@ (3400a340 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
3400a1d2:	429a      	cmp	r2, r3
3400a1d4:	f000 8150 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a1d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1dc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a1e0:	4b58      	ldr	r3, [pc, #352]	@ (3400a344 <HAL_RCCEx_PeriphCLKConfig+0xb70>)
3400a1e2:	429a      	cmp	r2, r3
3400a1e4:	f000 8148 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a1e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1ec:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a1f0:	4b55      	ldr	r3, [pc, #340]	@ (3400a348 <HAL_RCCEx_PeriphCLKConfig+0xb74>)
3400a1f2:	429a      	cmp	r2, r3
3400a1f4:	f000 8140 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a1f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1fc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a200:	4b52      	ldr	r3, [pc, #328]	@ (3400a34c <HAL_RCCEx_PeriphCLKConfig+0xb78>)
3400a202:	429a      	cmp	r2, r3
3400a204:	f000 8138 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a208:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a20c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a210:	4b4f      	ldr	r3, [pc, #316]	@ (3400a350 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
3400a212:	429a      	cmp	r2, r3
3400a214:	f000 8130 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a218:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a21c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a220:	4b4c      	ldr	r3, [pc, #304]	@ (3400a354 <HAL_RCCEx_PeriphCLKConfig+0xb80>)
3400a222:	429a      	cmp	r2, r3
3400a224:	f000 8128 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a228:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a22c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a230:	4b49      	ldr	r3, [pc, #292]	@ (3400a358 <HAL_RCCEx_PeriphCLKConfig+0xb84>)
3400a232:	429a      	cmp	r2, r3
3400a234:	f000 8120 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a238:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a23c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a240:	4b46      	ldr	r3, [pc, #280]	@ (3400a35c <HAL_RCCEx_PeriphCLKConfig+0xb88>)
3400a242:	429a      	cmp	r2, r3
3400a244:	f000 8118 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a248:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a24c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a250:	4b43      	ldr	r3, [pc, #268]	@ (3400a360 <HAL_RCCEx_PeriphCLKConfig+0xb8c>)
3400a252:	429a      	cmp	r2, r3
3400a254:	f000 8110 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a258:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a25c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a260:	4b40      	ldr	r3, [pc, #256]	@ (3400a364 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
3400a262:	429a      	cmp	r2, r3
3400a264:	f000 8108 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a268:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a26c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a270:	4b3d      	ldr	r3, [pc, #244]	@ (3400a368 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
3400a272:	429a      	cmp	r2, r3
3400a274:	f000 8100 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a278:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a27c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a280:	4b3a      	ldr	r3, [pc, #232]	@ (3400a36c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
3400a282:	429a      	cmp	r2, r3
3400a284:	f000 80f8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a288:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a28c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a290:	4b37      	ldr	r3, [pc, #220]	@ (3400a370 <HAL_RCCEx_PeriphCLKConfig+0xb9c>)
3400a292:	429a      	cmp	r2, r3
3400a294:	f000 80f0 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a298:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a29c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a2a0:	4b34      	ldr	r3, [pc, #208]	@ (3400a374 <HAL_RCCEx_PeriphCLKConfig+0xba0>)
3400a2a2:	429a      	cmp	r2, r3
3400a2a4:	f000 80e8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2ac:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a2b0:	4b31      	ldr	r3, [pc, #196]	@ (3400a378 <HAL_RCCEx_PeriphCLKConfig+0xba4>)
3400a2b2:	429a      	cmp	r2, r3
3400a2b4:	f000 80e0 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2bc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a2c0:	4b2e      	ldr	r3, [pc, #184]	@ (3400a37c <HAL_RCCEx_PeriphCLKConfig+0xba8>)
3400a2c2:	429a      	cmp	r2, r3
3400a2c4:	f000 80d8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2cc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a2d0:	4b2b      	ldr	r3, [pc, #172]	@ (3400a380 <HAL_RCCEx_PeriphCLKConfig+0xbac>)
3400a2d2:	429a      	cmp	r2, r3
3400a2d4:	f000 80d0 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2dc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a2e0:	4b28      	ldr	r3, [pc, #160]	@ (3400a384 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
3400a2e2:	429a      	cmp	r2, r3
3400a2e4:	f000 80c8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2ec:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a2f0:	4b25      	ldr	r3, [pc, #148]	@ (3400a388 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
3400a2f2:	429a      	cmp	r2, r3
3400a2f4:	f000 80c0 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2fc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a300:	4b22      	ldr	r3, [pc, #136]	@ (3400a38c <HAL_RCCEx_PeriphCLKConfig+0xbb8>)
3400a302:	429a      	cmp	r2, r3
3400a304:	f000 80b8 	beq.w	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a308:	e042      	b.n	3400a390 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
3400a30a:	bf00      	nop
3400a30c:	3401cebc 	.word	0x3401cebc
3400a310:	00010300 	.word	0x00010300
3400a314:	00011300 	.word	0x00011300
3400a318:	00012300 	.word	0x00012300
3400a31c:	00013300 	.word	0x00013300
3400a320:	00014300 	.word	0x00014300
3400a324:	00015300 	.word	0x00015300
3400a328:	00016300 	.word	0x00016300
3400a32c:	00017300 	.word	0x00017300
3400a330:	00018300 	.word	0x00018300
3400a334:	00019300 	.word	0x00019300
3400a338:	0001a300 	.word	0x0001a300
3400a33c:	0001b300 	.word	0x0001b300
3400a340:	0001c300 	.word	0x0001c300
3400a344:	0001d300 	.word	0x0001d300
3400a348:	0001e300 	.word	0x0001e300
3400a34c:	0001f300 	.word	0x0001f300
3400a350:	00020300 	.word	0x00020300
3400a354:	00021300 	.word	0x00021300
3400a358:	00022300 	.word	0x00022300
3400a35c:	00023300 	.word	0x00023300
3400a360:	00024300 	.word	0x00024300
3400a364:	00025300 	.word	0x00025300
3400a368:	00026300 	.word	0x00026300
3400a36c:	00027300 	.word	0x00027300
3400a370:	00028300 	.word	0x00028300
3400a374:	00029300 	.word	0x00029300
3400a378:	0002a300 	.word	0x0002a300
3400a37c:	0002b300 	.word	0x0002b300
3400a380:	0002c300 	.word	0x0002c300
3400a384:	0002d300 	.word	0x0002d300
3400a388:	0002e300 	.word	0x0002e300
3400a38c:	0002f300 	.word	0x0002f300
3400a390:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a394:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a398:	4bb4      	ldr	r3, [pc, #720]	@ (3400a66c <HAL_RCCEx_PeriphCLKConfig+0xe98>)
3400a39a:	429a      	cmp	r2, r3
3400a39c:	d06c      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a39e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3a2:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3a6:	4bb2      	ldr	r3, [pc, #712]	@ (3400a670 <HAL_RCCEx_PeriphCLKConfig+0xe9c>)
3400a3a8:	429a      	cmp	r2, r3
3400a3aa:	d065      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3b0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3b4:	4baf      	ldr	r3, [pc, #700]	@ (3400a674 <HAL_RCCEx_PeriphCLKConfig+0xea0>)
3400a3b6:	429a      	cmp	r2, r3
3400a3b8:	d05e      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3be:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3c2:	4bad      	ldr	r3, [pc, #692]	@ (3400a678 <HAL_RCCEx_PeriphCLKConfig+0xea4>)
3400a3c4:	429a      	cmp	r2, r3
3400a3c6:	d057      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3cc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3d0:	4baa      	ldr	r3, [pc, #680]	@ (3400a67c <HAL_RCCEx_PeriphCLKConfig+0xea8>)
3400a3d2:	429a      	cmp	r2, r3
3400a3d4:	d050      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3da:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3de:	4ba8      	ldr	r3, [pc, #672]	@ (3400a680 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
3400a3e0:	429a      	cmp	r2, r3
3400a3e2:	d049      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3e8:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3ec:	4ba5      	ldr	r3, [pc, #660]	@ (3400a684 <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
3400a3ee:	429a      	cmp	r2, r3
3400a3f0:	d042      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3f6:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3fa:	4ba3      	ldr	r3, [pc, #652]	@ (3400a688 <HAL_RCCEx_PeriphCLKConfig+0xeb4>)
3400a3fc:	429a      	cmp	r2, r3
3400a3fe:	d03b      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a400:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a404:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a408:	4ba0      	ldr	r3, [pc, #640]	@ (3400a68c <HAL_RCCEx_PeriphCLKConfig+0xeb8>)
3400a40a:	429a      	cmp	r2, r3
3400a40c:	d034      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a40e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a412:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a416:	4b9e      	ldr	r3, [pc, #632]	@ (3400a690 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
3400a418:	429a      	cmp	r2, r3
3400a41a:	d02d      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a41c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a420:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a424:	4b9b      	ldr	r3, [pc, #620]	@ (3400a694 <HAL_RCCEx_PeriphCLKConfig+0xec0>)
3400a426:	429a      	cmp	r2, r3
3400a428:	d026      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a42a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a42e:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a432:	4b99      	ldr	r3, [pc, #612]	@ (3400a698 <HAL_RCCEx_PeriphCLKConfig+0xec4>)
3400a434:	429a      	cmp	r2, r3
3400a436:	d01f      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a438:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a43c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a440:	4b96      	ldr	r3, [pc, #600]	@ (3400a69c <HAL_RCCEx_PeriphCLKConfig+0xec8>)
3400a442:	429a      	cmp	r2, r3
3400a444:	d018      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a446:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a44a:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a44e:	4b94      	ldr	r3, [pc, #592]	@ (3400a6a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
3400a450:	429a      	cmp	r2, r3
3400a452:	d011      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a454:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a458:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a45c:	4b91      	ldr	r3, [pc, #580]	@ (3400a6a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
3400a45e:	429a      	cmp	r2, r3
3400a460:	d00a      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a462:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a466:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a46a:	4b8f      	ldr	r3, [pc, #572]	@ (3400a6a8 <HAL_RCCEx_PeriphCLKConfig+0xed4>)
3400a46c:	429a      	cmp	r2, r3
3400a46e:	d003      	beq.n	3400a478 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a470:	218e      	movs	r1, #142	@ 0x8e
3400a472:	488e      	ldr	r0, [pc, #568]	@ (3400a6ac <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a474:	f7f7 f9d6 	bl	34001824 <assert_failed>

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
3400a478:	f7fe fae2 	bl	34008a40 <LL_RCC_GetRTCClockSource>
3400a47c:	f8c7 0388 	str.w	r0, [r7, #904]	@ 0x388

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3400a480:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
3400a484:	2b00      	cmp	r3, #0
3400a486:	d018      	beq.n	3400a4ba <HAL_RCCEx_PeriphCLKConfig+0xce6>
3400a488:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a48c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a490:	f403 7240 	and.w	r2, r3, #768	@ 0x300
3400a494:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
3400a498:	4293      	cmp	r3, r2
3400a49a:	d00e      	beq.n	3400a4ba <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
3400a49c:	4b84      	ldr	r3, [pc, #528]	@ (3400a6b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400a49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a4a0:	4a83      	ldr	r2, [pc, #524]	@ (3400a6b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400a4a2:	f043 0301 	orr.w	r3, r3, #1
3400a4a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3400a4a8:	4b81      	ldr	r3, [pc, #516]	@ (3400a6b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400a4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a4ac:	f003 0301 	and.w	r3, r3, #1
3400a4b0:	2b00      	cmp	r3, #0
3400a4b2:	d102      	bne.n	3400a4ba <HAL_RCCEx_PeriphCLKConfig+0xce6>
      {
        ret = HAL_ERROR;
3400a4b4:	2301      	movs	r3, #1
3400a4b6:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
3400a4ba:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a4be:	2b00      	cmp	r3, #0
3400a4c0:	d143      	bne.n	3400a54a <HAL_RCCEx_PeriphCLKConfig+0xd76>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3400a4c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4c6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a4ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a4ce:	d117      	bne.n	3400a500 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3400a4d0:	f7f9 fad8 	bl	34003a84 <HAL_GetTick>
3400a4d4:	f8c7 0384 	str.w	r0, [r7, #900]	@ 0x384

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
3400a4d8:	e00d      	b.n	3400a4f6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400a4da:	f7f9 fad3 	bl	34003a84 <HAL_GetTick>
3400a4de:	4602      	mov	r2, r0
3400a4e0:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
3400a4e4:	1ad2      	subs	r2, r2, r3
3400a4e6:	f241 3388 	movw	r3, #5000	@ 0x1388
3400a4ea:	429a      	cmp	r2, r3
3400a4ec:	d903      	bls.n	3400a4f6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
          {
            ret = HAL_TIMEOUT;
3400a4ee:	2303      	movs	r3, #3
3400a4f0:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
            break;
3400a4f4:	e004      	b.n	3400a500 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
        while (LL_RCC_LSE_IsReady() == 0U)
3400a4f6:	f7fd feb5 	bl	34008264 <LL_RCC_LSE_IsReady>
3400a4fa:	4603      	mov	r3, r0
3400a4fc:	2b00      	cmp	r3, #0
3400a4fe:	d0ec      	beq.n	3400a4da <HAL_RCCEx_PeriphCLKConfig+0xd06>
          }
        }
      }

      if (ret == HAL_OK)
3400a500:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a504:	2b00      	cmp	r3, #0
3400a506:	d11b      	bne.n	3400a540 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
3400a508:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a50c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3400a514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400a518:	d108      	bne.n	3400a52c <HAL_RCCEx_PeriphCLKConfig+0xd58>
3400a51a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a51e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3400a526:	4618      	mov	r0, r3
3400a528:	f7fe fa98 	bl	34008a5c <LL_RCC_SetRTC_HSEPrescaler>
3400a52c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a530:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3400a538:	4618      	mov	r0, r3
3400a53a:	f7fe fa6b 	bl	34008a14 <LL_RCC_SetRTCClockSource>
3400a53e:	e008      	b.n	3400a552 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
      else
      {
        /* set overall return value */
        status = ret;
3400a540:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a544:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
3400a548:	e003      	b.n	3400a552 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
3400a54a:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a54e:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3400a552:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a556:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a55a:	f002 0304 	and.w	r3, r2, #4
3400a55e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
3400a562:	2300      	movs	r3, #0
3400a564:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
3400a568:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
3400a56c:	4603      	mov	r3, r0
3400a56e:	460a      	mov	r2, r1
3400a570:	4313      	orrs	r3, r2
3400a572:	f000 81dc 	beq.w	3400a92e <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
3400a576:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a57a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a57e:	2b00      	cmp	r3, #0
3400a580:	d02d      	beq.n	3400a5de <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a582:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a586:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a58a:	2b01      	cmp	r3, #1
3400a58c:	d027      	beq.n	3400a5de <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a58e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a592:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a596:	2b02      	cmp	r3, #2
3400a598:	d021      	beq.n	3400a5de <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a59a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a59e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a5a2:	2b03      	cmp	r3, #3
3400a5a4:	d01b      	beq.n	3400a5de <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a5a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a5ae:	2b04      	cmp	r3, #4
3400a5b0:	d015      	beq.n	3400a5de <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a5b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a5ba:	2b05      	cmp	r3, #5
3400a5bc:	d00f      	beq.n	3400a5de <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a5be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a5c6:	2b06      	cmp	r3, #6
3400a5c8:	d009      	beq.n	3400a5de <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a5ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a5d2:	2b07      	cmp	r3, #7
3400a5d4:	d003      	beq.n	3400a5de <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a5d6:	21d4      	movs	r1, #212	@ 0xd4
3400a5d8:	4834      	ldr	r0, [pc, #208]	@ (3400a6ac <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a5da:	f7f7 f923 	bl	34001824 <assert_failed>

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
3400a5de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a5e6:	2b04      	cmp	r3, #4
3400a5e8:	d166      	bne.n	3400a6b8 <HAL_RCCEx_PeriphCLKConfig+0xee4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400a5ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a5f0:	2b00      	cmp	r3, #0
3400a5f2:	d015      	beq.n	3400a620 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a5f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a5fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a5fe:	d00f      	beq.n	3400a620 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a600:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a60a:	d009      	beq.n	3400a620 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a60c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a612:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a616:	d003      	beq.n	3400a620 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a618:	21d9      	movs	r1, #217	@ 0xd9
3400a61a:	4824      	ldr	r0, [pc, #144]	@ (3400a6ac <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a61c:	f7f7 f902 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400a620:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a626:	2b00      	cmp	r3, #0
3400a628:	d005      	beq.n	3400a636 <HAL_RCCEx_PeriphCLKConfig+0xe62>
3400a62a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a634:	d903      	bls.n	3400a63e <HAL_RCCEx_PeriphCLKConfig+0xe6a>
3400a636:	21da      	movs	r1, #218	@ 0xda
3400a638:	481c      	ldr	r0, [pc, #112]	@ (3400a6ac <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a63a:	f7f7 f8f3 	bl	34001824 <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400a63e:	4b1d      	ldr	r3, [pc, #116]	@ (3400a6b4 <HAL_RCCEx_PeriphCLKConfig+0xee0>)
3400a640:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400a644:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a648:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a64c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400a652:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a658:	3b01      	subs	r3, #1
3400a65a:	041b      	lsls	r3, r3, #16
3400a65c:	4313      	orrs	r3, r2
3400a65e:	4a15      	ldr	r2, [pc, #84]	@ (3400a6b4 <HAL_RCCEx_PeriphCLKConfig+0xee0>)
3400a660:	430b      	orrs	r3, r1
3400a662:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400a666:	f7fe fd13 	bl	34009090 <LL_RCC_IC5_Enable>
3400a66a:	e159      	b.n	3400a920 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3400a66c:	00030300 	.word	0x00030300
3400a670:	00031300 	.word	0x00031300
3400a674:	00032300 	.word	0x00032300
3400a678:	00033300 	.word	0x00033300
3400a67c:	00034300 	.word	0x00034300
3400a680:	00035300 	.word	0x00035300
3400a684:	00036300 	.word	0x00036300
3400a688:	00037300 	.word	0x00037300
3400a68c:	00038300 	.word	0x00038300
3400a690:	00039300 	.word	0x00039300
3400a694:	0003a300 	.word	0x0003a300
3400a698:	0003b300 	.word	0x0003b300
3400a69c:	0003c300 	.word	0x0003c300
3400a6a0:	0003d300 	.word	0x0003d300
3400a6a4:	0003e300 	.word	0x0003e300
3400a6a8:	0003f300 	.word	0x0003f300
3400a6ac:	3401cebc 	.word	0x3401cebc
3400a6b0:	56024800 	.word	0x56024800
3400a6b4:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
3400a6b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a6c0:	2b05      	cmp	r3, #5
3400a6c2:	d140      	bne.n	3400a746 <HAL_RCCEx_PeriphCLKConfig+0xf72>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400a6c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a6ca:	2b00      	cmp	r3, #0
3400a6cc:	d015      	beq.n	3400a6fa <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a6ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a6d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a6d8:	d00f      	beq.n	3400a6fa <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a6da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a6e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a6e4:	d009      	beq.n	3400a6fa <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a6e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a6ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a6f0:	d003      	beq.n	3400a6fa <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a6f2:	21e6      	movs	r1, #230	@ 0xe6
3400a6f4:	4860      	ldr	r0, [pc, #384]	@ (3400a878 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a6f6:	f7f7 f895 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400a6fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a700:	2b00      	cmp	r3, #0
3400a702:	d005      	beq.n	3400a710 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
3400a704:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a70a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a70e:	d903      	bls.n	3400a718 <HAL_RCCEx_PeriphCLKConfig+0xf44>
3400a710:	21e7      	movs	r1, #231	@ 0xe7
3400a712:	4859      	ldr	r0, [pc, #356]	@ (3400a878 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a714:	f7f7 f886 	bl	34001824 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400a718:	4b58      	ldr	r3, [pc, #352]	@ (3400a87c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a71a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400a71e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a722:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a726:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a72a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400a72c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a732:	3b01      	subs	r3, #1
3400a734:	041b      	lsls	r3, r3, #16
3400a736:	4313      	orrs	r3, r2
3400a738:	4a50      	ldr	r2, [pc, #320]	@ (3400a87c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a73a:	430b      	orrs	r3, r1
3400a73c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400a740:	f7fe fda6 	bl	34009290 <LL_RCC_IC10_Enable>
3400a744:	e0ec      	b.n	3400a920 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
3400a746:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a74a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a74e:	2b06      	cmp	r3, #6
3400a750:	d140      	bne.n	3400a7d4 <HAL_RCCEx_PeriphCLKConfig+0x1000>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400a752:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a758:	2b00      	cmp	r3, #0
3400a75a:	d015      	beq.n	3400a788 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a75c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a766:	d00f      	beq.n	3400a788 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a768:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a76c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a76e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a772:	d009      	beq.n	3400a788 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a774:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a77a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a77e:	d003      	beq.n	3400a788 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a780:	21f3      	movs	r1, #243	@ 0xf3
3400a782:	483d      	ldr	r0, [pc, #244]	@ (3400a878 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a784:	f7f7 f84e 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400a788:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a78c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a78e:	2b00      	cmp	r3, #0
3400a790:	d005      	beq.n	3400a79e <HAL_RCCEx_PeriphCLKConfig+0xfca>
3400a792:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a796:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a79c:	d903      	bls.n	3400a7a6 <HAL_RCCEx_PeriphCLKConfig+0xfd2>
3400a79e:	21f4      	movs	r1, #244	@ 0xf4
3400a7a0:	4835      	ldr	r0, [pc, #212]	@ (3400a878 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a7a2:	f7f7 f83f 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400a7a6:	4b35      	ldr	r3, [pc, #212]	@ (3400a87c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a7a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400a7ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a7b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a7b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7b8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400a7ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a7c0:	3b01      	subs	r3, #1
3400a7c2:	041b      	lsls	r3, r3, #16
3400a7c4:	4313      	orrs	r3, r2
3400a7c6:	4a2d      	ldr	r2, [pc, #180]	@ (3400a87c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a7c8:	430b      	orrs	r3, r1
3400a7ca:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400a7ce:	f7fe fe5f 	bl	34009490 <LL_RCC_IC15_Enable>
3400a7d2:	e0a5      	b.n	3400a920 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
3400a7d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7dc:	2b03      	cmp	r3, #3
3400a7de:	d14f      	bne.n	3400a880 <HAL_RCCEx_PeriphCLKConfig+0x10ac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
3400a7e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400a7e8:	2b00      	cmp	r3, #0
3400a7ea:	d019      	beq.n	3400a820 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400a7ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400a7f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a7f8:	d012      	beq.n	3400a820 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400a7fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400a802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a806:	d00b      	beq.n	3400a820 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400a808:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a80c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400a810:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a814:	d004      	beq.n	3400a820 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400a816:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a81a:	4817      	ldr	r0, [pc, #92]	@ (3400a878 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a81c:	f7f7 f802 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400a820:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a824:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400a828:	2b00      	cmp	r3, #0
3400a82a:	d006      	beq.n	3400a83a <HAL_RCCEx_PeriphCLKConfig+0x1066>
3400a82c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400a834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a838:	d904      	bls.n	3400a844 <HAL_RCCEx_PeriphCLKConfig+0x1070>
3400a83a:	f240 1101 	movw	r1, #257	@ 0x101
3400a83e:	480e      	ldr	r0, [pc, #56]	@ (3400a878 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a840:	f7f6 fff0 	bl	34001824 <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400a844:	4b0d      	ldr	r3, [pc, #52]	@ (3400a87c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a846:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400a84a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a84e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a852:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a856:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400a85a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a85e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400a862:	3b01      	subs	r3, #1
3400a864:	041b      	lsls	r3, r3, #16
3400a866:	4313      	orrs	r3, r2
3400a868:	4a04      	ldr	r2, [pc, #16]	@ (3400a87c <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a86a:	430b      	orrs	r3, r1
3400a86c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3400a870:	f7fe ff0e 	bl	34009690 <LL_RCC_IC19_Enable>
3400a874:	e054      	b.n	3400a920 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3400a876:	bf00      	nop
3400a878:	3401cebc 	.word	0x3401cebc
3400a87c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
3400a880:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a884:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a888:	2b07      	cmp	r3, #7
3400a88a:	d149      	bne.n	3400a920 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400a88c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a890:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400a894:	2b00      	cmp	r3, #0
3400a896:	d019      	beq.n	3400a8cc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400a898:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a89c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400a8a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a8a4:	d012      	beq.n	3400a8cc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400a8a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400a8ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a8b2:	d00b      	beq.n	3400a8cc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400a8b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400a8bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a8c0:	d004      	beq.n	3400a8cc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400a8c2:	f240 110d 	movw	r1, #269	@ 0x10d
3400a8c6:	487d      	ldr	r0, [pc, #500]	@ (3400aabc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a8c8:	f7f6 ffac 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400a8cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400a8d4:	2b00      	cmp	r3, #0
3400a8d6:	d006      	beq.n	3400a8e6 <HAL_RCCEx_PeriphCLKConfig+0x1112>
3400a8d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400a8e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a8e4:	d904      	bls.n	3400a8f0 <HAL_RCCEx_PeriphCLKConfig+0x111c>
3400a8e6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
3400a8ea:	4874      	ldr	r0, [pc, #464]	@ (3400aabc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a8ec:	f7f6 ff9a 	bl	34001824 <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400a8f0:	4b73      	ldr	r3, [pc, #460]	@ (3400aac0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400a8f2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400a8f6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a8fa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a8fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a902:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400a906:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a90a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400a90e:	3b01      	subs	r3, #1
3400a910:	041b      	lsls	r3, r3, #16
3400a912:	4313      	orrs	r3, r2
3400a914:	4a6a      	ldr	r2, [pc, #424]	@ (3400aac0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400a916:	430b      	orrs	r3, r1
3400a918:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3400a91c:	f7fe fef8 	bl	34009710 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
3400a920:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a924:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a928:	4618      	mov	r0, r3
3400a92a:	f7fd fd4f 	bl	340083cc <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
3400a92e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a932:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a936:	2100      	movs	r1, #0
3400a938:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
3400a93c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3400a940:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
3400a944:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
3400a948:	4603      	mov	r3, r0
3400a94a:	460a      	mov	r2, r1
3400a94c:	4313      	orrs	r3, r2
3400a94e:	f000 80d1 	beq.w	3400aaf4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
3400a952:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a956:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a95a:	4b5a      	ldr	r3, [pc, #360]	@ (3400aac4 <HAL_RCCEx_PeriphCLKConfig+0x12f0>)
3400a95c:	429a      	cmp	r2, r3
3400a95e:	d019      	beq.n	3400a994 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400a960:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a964:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a968:	4b57      	ldr	r3, [pc, #348]	@ (3400aac8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
3400a96a:	429a      	cmp	r2, r3
3400a96c:	d012      	beq.n	3400a994 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400a96e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a972:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a976:	4b55      	ldr	r3, [pc, #340]	@ (3400aacc <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
3400a978:	429a      	cmp	r2, r3
3400a97a:	d00b      	beq.n	3400a994 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400a97c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a980:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a984:	4b52      	ldr	r3, [pc, #328]	@ (3400aad0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400a986:	429a      	cmp	r2, r3
3400a988:	d004      	beq.n	3400a994 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400a98a:	f44f 7192 	mov.w	r1, #292	@ 0x124
3400a98e:	484b      	ldr	r0, [pc, #300]	@ (3400aabc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a990:	f7f6 ff48 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3400a994:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a998:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a99c:	4b4b      	ldr	r3, [pc, #300]	@ (3400aacc <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
3400a99e:	429a      	cmp	r2, r3
3400a9a0:	d142      	bne.n	3400aa28 <HAL_RCCEx_PeriphCLKConfig+0x1254>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400a9a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9a6:	699b      	ldr	r3, [r3, #24]
3400a9a8:	2b00      	cmp	r3, #0
3400a9aa:	d016      	beq.n	3400a9da <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400a9ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9b0:	699b      	ldr	r3, [r3, #24]
3400a9b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a9b6:	d010      	beq.n	3400a9da <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400a9b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9bc:	699b      	ldr	r3, [r3, #24]
3400a9be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a9c2:	d00a      	beq.n	3400a9da <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400a9c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9c8:	699b      	ldr	r3, [r3, #24]
3400a9ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a9ce:	d004      	beq.n	3400a9da <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400a9d0:	f240 1129 	movw	r1, #297	@ 0x129
3400a9d4:	4839      	ldr	r0, [pc, #228]	@ (3400aabc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a9d6:	f7f6 ff25 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400a9da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9de:	69db      	ldr	r3, [r3, #28]
3400a9e0:	2b00      	cmp	r3, #0
3400a9e2:	d005      	beq.n	3400a9f0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
3400a9e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9e8:	69db      	ldr	r3, [r3, #28]
3400a9ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a9ee:	d904      	bls.n	3400a9fa <HAL_RCCEx_PeriphCLKConfig+0x1226>
3400a9f0:	f44f 7195 	mov.w	r1, #298	@ 0x12a
3400a9f4:	4831      	ldr	r0, [pc, #196]	@ (3400aabc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a9f6:	f7f6 ff15 	bl	34001824 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400a9fa:	4b31      	ldr	r3, [pc, #196]	@ (3400aac0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400a9fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400aa00:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400aa04:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400aa08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa0c:	699a      	ldr	r2, [r3, #24]
3400aa0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa12:	69db      	ldr	r3, [r3, #28]
3400aa14:	3b01      	subs	r3, #1
3400aa16:	041b      	lsls	r3, r3, #16
3400aa18:	4313      	orrs	r3, r2
3400aa1a:	4a29      	ldr	r2, [pc, #164]	@ (3400aac0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400aa1c:	430b      	orrs	r3, r1
3400aa1e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400aa22:	f7fe fab5 	bl	34008f90 <LL_RCC_IC3_Enable>
3400aa26:	e05e      	b.n	3400aae6 <HAL_RCCEx_PeriphCLKConfig+0x1312>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
3400aa28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa2c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400aa30:	4b27      	ldr	r3, [pc, #156]	@ (3400aad0 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400aa32:	429a      	cmp	r2, r3
3400aa34:	d14e      	bne.n	3400aad4 <HAL_RCCEx_PeriphCLKConfig+0x1300>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400aa36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa3a:	6a1b      	ldr	r3, [r3, #32]
3400aa3c:	2b00      	cmp	r3, #0
3400aa3e:	d016      	beq.n	3400aa6e <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400aa40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa44:	6a1b      	ldr	r3, [r3, #32]
3400aa46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400aa4a:	d010      	beq.n	3400aa6e <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400aa4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa50:	6a1b      	ldr	r3, [r3, #32]
3400aa52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400aa56:	d00a      	beq.n	3400aa6e <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400aa58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa5c:	6a1b      	ldr	r3, [r3, #32]
3400aa5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400aa62:	d004      	beq.n	3400aa6e <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400aa64:	f44f 719b 	mov.w	r1, #310	@ 0x136
3400aa68:	4814      	ldr	r0, [pc, #80]	@ (3400aabc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400aa6a:	f7f6 fedb 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400aa6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400aa74:	2b00      	cmp	r3, #0
3400aa76:	d005      	beq.n	3400aa84 <HAL_RCCEx_PeriphCLKConfig+0x12b0>
3400aa78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400aa7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400aa82:	d904      	bls.n	3400aa8e <HAL_RCCEx_PeriphCLKConfig+0x12ba>
3400aa84:	f240 1137 	movw	r1, #311	@ 0x137
3400aa88:	480c      	ldr	r0, [pc, #48]	@ (3400aabc <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400aa8a:	f7f6 fecb 	bl	34001824 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400aa8e:	4b0c      	ldr	r3, [pc, #48]	@ (3400aac0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400aa90:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400aa94:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400aa98:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400aa9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaa0:	6a1a      	ldr	r2, [r3, #32]
3400aaa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400aaa8:	3b01      	subs	r3, #1
3400aaaa:	041b      	lsls	r3, r3, #16
3400aaac:	4313      	orrs	r3, r2
3400aaae:	4a04      	ldr	r2, [pc, #16]	@ (3400aac0 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400aab0:	430b      	orrs	r3, r1
3400aab2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400aab6:	f7fe faab 	bl	34009010 <LL_RCC_IC4_Enable>
3400aaba:	e014      	b.n	3400aae6 <HAL_RCCEx_PeriphCLKConfig+0x1312>
3400aabc:	3401cebc 	.word	0x3401cebc
3400aac0:	56028000 	.word	0x56028000
3400aac4:	03000014 	.word	0x03000014
3400aac8:	03010014 	.word	0x03010014
3400aacc:	03020014 	.word	0x03020014
3400aad0:	03030014 	.word	0x03030014
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3400aad4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aad8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400aadc:	4baf      	ldr	r3, [pc, #700]	@ (3400ad9c <HAL_RCCEx_PeriphCLKConfig+0x15c8>)
3400aade:	429a      	cmp	r2, r3
3400aae0:	d101      	bne.n	3400aae6 <HAL_RCCEx_PeriphCLKConfig+0x1312>
    {
      LL_RCC_CLKP_Enable();
3400aae2:	f7fe fe55 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
3400aae6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
3400aaee:	4618      	mov	r0, r3
3400aaf0:	f7fd fdfc 	bl	340086ec <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3400aaf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400aafc:	2100      	movs	r1, #0
3400aafe:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
3400ab02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3400ab06:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
3400ab0a:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
3400ab0e:	4603      	mov	r3, r0
3400ab10:	460a      	mov	r2, r1
3400ab12:	4313      	orrs	r3, r2
3400ab14:	f000 80c5 	beq.w	3400aca2 <HAL_RCCEx_PeriphCLKConfig+0x14ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
3400ab18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab1c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ab20:	4b9f      	ldr	r3, [pc, #636]	@ (3400ada0 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
3400ab22:	429a      	cmp	r2, r3
3400ab24:	d019      	beq.n	3400ab5a <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ab26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ab2e:	4b9d      	ldr	r3, [pc, #628]	@ (3400ada4 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
3400ab30:	429a      	cmp	r2, r3
3400ab32:	d012      	beq.n	3400ab5a <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ab34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab38:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ab3c:	4b9a      	ldr	r3, [pc, #616]	@ (3400ada8 <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3400ab3e:	429a      	cmp	r2, r3
3400ab40:	d00b      	beq.n	3400ab5a <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ab42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ab4a:	4b98      	ldr	r3, [pc, #608]	@ (3400adac <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
3400ab4c:	429a      	cmp	r2, r3
3400ab4e:	d004      	beq.n	3400ab5a <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ab50:	f240 1151 	movw	r1, #337	@ 0x151
3400ab54:	4896      	ldr	r0, [pc, #600]	@ (3400adb0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ab56:	f7f6 fe65 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
3400ab5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ab62:	4b91      	ldr	r3, [pc, #580]	@ (3400ada8 <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3400ab64:	429a      	cmp	r2, r3
3400ab66:	d142      	bne.n	3400abee <HAL_RCCEx_PeriphCLKConfig+0x141a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400ab68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab6c:	699b      	ldr	r3, [r3, #24]
3400ab6e:	2b00      	cmp	r3, #0
3400ab70:	d016      	beq.n	3400aba0 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400ab72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab76:	699b      	ldr	r3, [r3, #24]
3400ab78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ab7c:	d010      	beq.n	3400aba0 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400ab7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab82:	699b      	ldr	r3, [r3, #24]
3400ab84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ab88:	d00a      	beq.n	3400aba0 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400ab8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab8e:	699b      	ldr	r3, [r3, #24]
3400ab90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ab94:	d004      	beq.n	3400aba0 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400ab96:	f44f 71ab 	mov.w	r1, #342	@ 0x156
3400ab9a:	4885      	ldr	r0, [pc, #532]	@ (3400adb0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ab9c:	f7f6 fe42 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400aba0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aba4:	69db      	ldr	r3, [r3, #28]
3400aba6:	2b00      	cmp	r3, #0
3400aba8:	d005      	beq.n	3400abb6 <HAL_RCCEx_PeriphCLKConfig+0x13e2>
3400abaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abae:	69db      	ldr	r3, [r3, #28]
3400abb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400abb4:	d904      	bls.n	3400abc0 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
3400abb6:	f240 1157 	movw	r1, #343	@ 0x157
3400abba:	487d      	ldr	r0, [pc, #500]	@ (3400adb0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400abbc:	f7f6 fe32 	bl	34001824 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400abc0:	4b7c      	ldr	r3, [pc, #496]	@ (3400adb4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400abc2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400abc6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400abca:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400abce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abd2:	699a      	ldr	r2, [r3, #24]
3400abd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abd8:	69db      	ldr	r3, [r3, #28]
3400abda:	3b01      	subs	r3, #1
3400abdc:	041b      	lsls	r3, r3, #16
3400abde:	4313      	orrs	r3, r2
3400abe0:	4a74      	ldr	r2, [pc, #464]	@ (3400adb4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400abe2:	430b      	orrs	r3, r1
3400abe4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400abe8:	f7fe f9d2 	bl	34008f90 <LL_RCC_IC3_Enable>
3400abec:	e052      	b.n	3400ac94 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
3400abee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400abf6:	4b6d      	ldr	r3, [pc, #436]	@ (3400adac <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
3400abf8:	429a      	cmp	r2, r3
3400abfa:	d142      	bne.n	3400ac82 <HAL_RCCEx_PeriphCLKConfig+0x14ae>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400abfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac00:	6a1b      	ldr	r3, [r3, #32]
3400ac02:	2b00      	cmp	r3, #0
3400ac04:	d016      	beq.n	3400ac34 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ac06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac0a:	6a1b      	ldr	r3, [r3, #32]
3400ac0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ac10:	d010      	beq.n	3400ac34 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ac12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac16:	6a1b      	ldr	r3, [r3, #32]
3400ac18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ac1c:	d00a      	beq.n	3400ac34 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ac1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac22:	6a1b      	ldr	r3, [r3, #32]
3400ac24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ac28:	d004      	beq.n	3400ac34 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ac2a:	f240 1163 	movw	r1, #355	@ 0x163
3400ac2e:	4860      	ldr	r0, [pc, #384]	@ (3400adb0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ac30:	f7f6 fdf8 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400ac34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ac3a:	2b00      	cmp	r3, #0
3400ac3c:	d005      	beq.n	3400ac4a <HAL_RCCEx_PeriphCLKConfig+0x1476>
3400ac3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ac44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ac48:	d904      	bls.n	3400ac54 <HAL_RCCEx_PeriphCLKConfig+0x1480>
3400ac4a:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400ac4e:	4858      	ldr	r0, [pc, #352]	@ (3400adb0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ac50:	f7f6 fde8 	bl	34001824 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400ac54:	4b57      	ldr	r3, [pc, #348]	@ (3400adb4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400ac56:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400ac5a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ac5e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ac62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac66:	6a1a      	ldr	r2, [r3, #32]
3400ac68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ac6e:	3b01      	subs	r3, #1
3400ac70:	041b      	lsls	r3, r3, #16
3400ac72:	4313      	orrs	r3, r2
3400ac74:	4a4f      	ldr	r2, [pc, #316]	@ (3400adb4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400ac76:	430b      	orrs	r3, r1
3400ac78:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400ac7c:	f7fe f9c8 	bl	34009010 <LL_RCC_IC4_Enable>
3400ac80:	e008      	b.n	3400ac94 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3400ac82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ac8a:	4b46      	ldr	r3, [pc, #280]	@ (3400ada4 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
3400ac8c:	429a      	cmp	r2, r3
3400ac8e:	d101      	bne.n	3400ac94 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    {
      LL_RCC_CLKP_Enable();
3400ac90:	f7fe fd7e 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
3400ac94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400ac9c:	4618      	mov	r0, r3
3400ac9e:	f7fd fd25 	bl	340086ec <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
3400aca2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
3400acaa:	2100      	movs	r1, #0
3400acac:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
3400acb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3400acb4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
3400acb8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
3400acbc:	4603      	mov	r3, r0
3400acbe:	460a      	mov	r2, r1
3400acc0:	4313      	orrs	r3, r2
3400acc2:	f000 80db 	beq.w	3400ae7c <HAL_RCCEx_PeriphCLKConfig+0x16a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
3400acc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acca:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400acce:	4b3a      	ldr	r3, [pc, #232]	@ (3400adb8 <HAL_RCCEx_PeriphCLKConfig+0x15e4>)
3400acd0:	429a      	cmp	r2, r3
3400acd2:	d019      	beq.n	3400ad08 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400acd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acd8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400acdc:	4b37      	ldr	r3, [pc, #220]	@ (3400adbc <HAL_RCCEx_PeriphCLKConfig+0x15e8>)
3400acde:	429a      	cmp	r2, r3
3400ace0:	d012      	beq.n	3400ad08 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400ace2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ace6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400acea:	4b35      	ldr	r3, [pc, #212]	@ (3400adc0 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3400acec:	429a      	cmp	r2, r3
3400acee:	d00b      	beq.n	3400ad08 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400acf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acf4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400acf8:	4b32      	ldr	r3, [pc, #200]	@ (3400adc4 <HAL_RCCEx_PeriphCLKConfig+0x15f0>)
3400acfa:	429a      	cmp	r2, r3
3400acfc:	d004      	beq.n	3400ad08 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400acfe:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
3400ad02:	482b      	ldr	r0, [pc, #172]	@ (3400adb0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ad04:	f7f6 fd8e 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3400ad08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad0c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400ad10:	4b2b      	ldr	r3, [pc, #172]	@ (3400adc0 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3400ad12:	429a      	cmp	r2, r3
3400ad14:	d158      	bne.n	3400adc8 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400ad16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad1a:	699b      	ldr	r3, [r3, #24]
3400ad1c:	2b00      	cmp	r3, #0
3400ad1e:	d016      	beq.n	3400ad4e <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400ad20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad24:	699b      	ldr	r3, [r3, #24]
3400ad26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ad2a:	d010      	beq.n	3400ad4e <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400ad2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad30:	699b      	ldr	r3, [r3, #24]
3400ad32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ad36:	d00a      	beq.n	3400ad4e <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400ad38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad3c:	699b      	ldr	r3, [r3, #24]
3400ad3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ad42:	d004      	beq.n	3400ad4e <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400ad44:	f240 1183 	movw	r1, #387	@ 0x183
3400ad48:	4819      	ldr	r0, [pc, #100]	@ (3400adb0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ad4a:	f7f6 fd6b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400ad4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad52:	69db      	ldr	r3, [r3, #28]
3400ad54:	2b00      	cmp	r3, #0
3400ad56:	d005      	beq.n	3400ad64 <HAL_RCCEx_PeriphCLKConfig+0x1590>
3400ad58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad5c:	69db      	ldr	r3, [r3, #28]
3400ad5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ad62:	d904      	bls.n	3400ad6e <HAL_RCCEx_PeriphCLKConfig+0x159a>
3400ad64:	f44f 71c2 	mov.w	r1, #388	@ 0x184
3400ad68:	4811      	ldr	r0, [pc, #68]	@ (3400adb0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ad6a:	f7f6 fd5b 	bl	34001824 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400ad6e:	4b11      	ldr	r3, [pc, #68]	@ (3400adb4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400ad70:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400ad74:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ad78:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ad7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad80:	699a      	ldr	r2, [r3, #24]
3400ad82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad86:	69db      	ldr	r3, [r3, #28]
3400ad88:	3b01      	subs	r3, #1
3400ad8a:	041b      	lsls	r3, r3, #16
3400ad8c:	4313      	orrs	r3, r2
3400ad8e:	4a09      	ldr	r2, [pc, #36]	@ (3400adb4 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400ad90:	430b      	orrs	r3, r1
3400ad92:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400ad96:	f7fe f8fb 	bl	34008f90 <LL_RCC_IC3_Enable>
3400ad9a:	e068      	b.n	3400ae6e <HAL_RCCEx_PeriphCLKConfig+0x169a>
3400ad9c:	03010014 	.word	0x03010014
3400ada0:	03000414 	.word	0x03000414
3400ada4:	03010414 	.word	0x03010414
3400ada8:	03020414 	.word	0x03020414
3400adac:	03030414 	.word	0x03030414
3400adb0:	3401cebc 	.word	0x3401cebc
3400adb4:	56028000 	.word	0x56028000
3400adb8:	03000814 	.word	0x03000814
3400adbc:	03010814 	.word	0x03010814
3400adc0:	03020814 	.word	0x03020814
3400adc4:	03030814 	.word	0x03030814
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
3400adc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adcc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400add0:	4b8b      	ldr	r3, [pc, #556]	@ (3400b000 <HAL_RCCEx_PeriphCLKConfig+0x182c>)
3400add2:	429a      	cmp	r2, r3
3400add4:	d142      	bne.n	3400ae5c <HAL_RCCEx_PeriphCLKConfig+0x1688>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400add6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adda:	6a1b      	ldr	r3, [r3, #32]
3400addc:	2b00      	cmp	r3, #0
3400adde:	d016      	beq.n	3400ae0e <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400ade0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ade4:	6a1b      	ldr	r3, [r3, #32]
3400ade6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400adea:	d010      	beq.n	3400ae0e <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400adec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adf0:	6a1b      	ldr	r3, [r3, #32]
3400adf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400adf6:	d00a      	beq.n	3400ae0e <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400adf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adfc:	6a1b      	ldr	r3, [r3, #32]
3400adfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ae02:	d004      	beq.n	3400ae0e <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400ae04:	f44f 71c8 	mov.w	r1, #400	@ 0x190
3400ae08:	487e      	ldr	r0, [pc, #504]	@ (3400b004 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400ae0a:	f7f6 fd0b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400ae0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ae14:	2b00      	cmp	r3, #0
3400ae16:	d005      	beq.n	3400ae24 <HAL_RCCEx_PeriphCLKConfig+0x1650>
3400ae18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ae1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ae22:	d904      	bls.n	3400ae2e <HAL_RCCEx_PeriphCLKConfig+0x165a>
3400ae24:	f240 1191 	movw	r1, #401	@ 0x191
3400ae28:	4876      	ldr	r0, [pc, #472]	@ (3400b004 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400ae2a:	f7f6 fcfb 	bl	34001824 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400ae2e:	4b76      	ldr	r3, [pc, #472]	@ (3400b008 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400ae30:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400ae34:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ae38:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ae3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae40:	6a1a      	ldr	r2, [r3, #32]
3400ae42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ae48:	3b01      	subs	r3, #1
3400ae4a:	041b      	lsls	r3, r3, #16
3400ae4c:	4313      	orrs	r3, r2
3400ae4e:	4a6e      	ldr	r2, [pc, #440]	@ (3400b008 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400ae50:	430b      	orrs	r3, r1
3400ae52:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400ae56:	f7fe f8db 	bl	34009010 <LL_RCC_IC4_Enable>
3400ae5a:	e008      	b.n	3400ae6e <HAL_RCCEx_PeriphCLKConfig+0x169a>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3400ae5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae60:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400ae64:	4b69      	ldr	r3, [pc, #420]	@ (3400b00c <HAL_RCCEx_PeriphCLKConfig+0x1838>)
3400ae66:	429a      	cmp	r2, r3
3400ae68:	d101      	bne.n	3400ae6e <HAL_RCCEx_PeriphCLKConfig+0x169a>
    {
      LL_RCC_CLKP_Enable();
3400ae6a:	f7fe fc91 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
3400ae6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3400ae76:	4618      	mov	r0, r3
3400ae78:	f7fd fc38 	bl	340086ec <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3400ae7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ae84:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
3400ae88:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
3400ae8c:	2300      	movs	r3, #0
3400ae8e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
3400ae92:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
3400ae96:	4603      	mov	r3, r0
3400ae98:	460a      	mov	r2, r1
3400ae9a:	4313      	orrs	r3, r2
3400ae9c:	f000 80c7 	beq.w	3400b02e <HAL_RCCEx_PeriphCLKConfig+0x185a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
3400aea0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aea4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400aea8:	2b00      	cmp	r3, #0
3400aeaa:	d016      	beq.n	3400aeda <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400aeac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aeb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400aeb4:	2b10      	cmp	r3, #16
3400aeb6:	d010      	beq.n	3400aeda <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400aeb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aebc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400aec0:	2b20      	cmp	r3, #32
3400aec2:	d00a      	beq.n	3400aeda <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400aec4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aec8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400aecc:	2b30      	cmp	r3, #48	@ 0x30
3400aece:	d004      	beq.n	3400aeda <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400aed0:	f240 11ab 	movw	r1, #427	@ 0x1ab
3400aed4:	484b      	ldr	r0, [pc, #300]	@ (3400b004 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400aed6:	f7f6 fca5 	bl	34001824 <assert_failed>

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
3400aeda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aede:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400aee2:	2b20      	cmp	r3, #32
3400aee4:	d142      	bne.n	3400af6c <HAL_RCCEx_PeriphCLKConfig+0x1798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400aee6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aeea:	699b      	ldr	r3, [r3, #24]
3400aeec:	2b00      	cmp	r3, #0
3400aeee:	d016      	beq.n	3400af1e <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400aef0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aef4:	699b      	ldr	r3, [r3, #24]
3400aef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400aefa:	d010      	beq.n	3400af1e <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400aefc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af00:	699b      	ldr	r3, [r3, #24]
3400af02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400af06:	d00a      	beq.n	3400af1e <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400af08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af0c:	699b      	ldr	r3, [r3, #24]
3400af0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400af12:	d004      	beq.n	3400af1e <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400af14:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
3400af18:	483a      	ldr	r0, [pc, #232]	@ (3400b004 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400af1a:	f7f6 fc83 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400af1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af22:	69db      	ldr	r3, [r3, #28]
3400af24:	2b00      	cmp	r3, #0
3400af26:	d005      	beq.n	3400af34 <HAL_RCCEx_PeriphCLKConfig+0x1760>
3400af28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af2c:	69db      	ldr	r3, [r3, #28]
3400af2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400af32:	d904      	bls.n	3400af3e <HAL_RCCEx_PeriphCLKConfig+0x176a>
3400af34:	f240 11b1 	movw	r1, #433	@ 0x1b1
3400af38:	4832      	ldr	r0, [pc, #200]	@ (3400b004 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400af3a:	f7f6 fc73 	bl	34001824 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400af3e:	4b32      	ldr	r3, [pc, #200]	@ (3400b008 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400af40:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400af44:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400af48:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400af4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af50:	699a      	ldr	r2, [r3, #24]
3400af52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af56:	69db      	ldr	r3, [r3, #28]
3400af58:	3b01      	subs	r3, #1
3400af5a:	041b      	lsls	r3, r3, #16
3400af5c:	4313      	orrs	r3, r2
3400af5e:	4a2a      	ldr	r2, [pc, #168]	@ (3400b008 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400af60:	430b      	orrs	r3, r1
3400af62:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400af66:	f7fe f813 	bl	34008f90 <LL_RCC_IC3_Enable>
3400af6a:	e059      	b.n	3400b020 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
3400af6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400af74:	2b30      	cmp	r3, #48	@ 0x30
3400af76:	d14b      	bne.n	3400b010 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400af78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af7c:	6a1b      	ldr	r3, [r3, #32]
3400af7e:	2b00      	cmp	r3, #0
3400af80:	d016      	beq.n	3400afb0 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400af82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af86:	6a1b      	ldr	r3, [r3, #32]
3400af88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400af8c:	d010      	beq.n	3400afb0 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400af8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af92:	6a1b      	ldr	r3, [r3, #32]
3400af94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400af98:	d00a      	beq.n	3400afb0 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400af9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af9e:	6a1b      	ldr	r3, [r3, #32]
3400afa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400afa4:	d004      	beq.n	3400afb0 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400afa6:	f240 11bd 	movw	r1, #445	@ 0x1bd
3400afaa:	4816      	ldr	r0, [pc, #88]	@ (3400b004 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400afac:	f7f6 fc3a 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400afb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400afb6:	2b00      	cmp	r3, #0
3400afb8:	d005      	beq.n	3400afc6 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
3400afba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400afc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400afc4:	d904      	bls.n	3400afd0 <HAL_RCCEx_PeriphCLKConfig+0x17fc>
3400afc6:	f44f 71df 	mov.w	r1, #446	@ 0x1be
3400afca:	480e      	ldr	r0, [pc, #56]	@ (3400b004 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400afcc:	f7f6 fc2a 	bl	34001824 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400afd0:	4b0d      	ldr	r3, [pc, #52]	@ (3400b008 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400afd2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400afd6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400afda:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400afde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afe2:	6a1a      	ldr	r2, [r3, #32]
3400afe4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400afea:	3b01      	subs	r3, #1
3400afec:	041b      	lsls	r3, r3, #16
3400afee:	4313      	orrs	r3, r2
3400aff0:	4a05      	ldr	r2, [pc, #20]	@ (3400b008 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400aff2:	430b      	orrs	r3, r1
3400aff4:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400aff8:	f7fe f80a 	bl	34009010 <LL_RCC_IC4_Enable>
3400affc:	e010      	b.n	3400b020 <HAL_RCCEx_PeriphCLKConfig+0x184c>
3400affe:	bf00      	nop
3400b000:	03030814 	.word	0x03030814
3400b004:	3401cebc 	.word	0x3401cebc
3400b008:	56028000 	.word	0x56028000
3400b00c:	03010814 	.word	0x03010814
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
3400b010:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b014:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b018:	2b10      	cmp	r3, #16
3400b01a:	d101      	bne.n	3400b020 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    {
      LL_RCC_CLKP_Enable();
3400b01c:	f7fe fbb8 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
3400b020:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b024:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b028:	4618      	mov	r0, r3
3400b02a:	f7fd fa77 	bl	3400851c <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
3400b02e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b032:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b036:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3400b03a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
3400b03e:	2300      	movs	r3, #0
3400b040:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
3400b044:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
3400b048:	4603      	mov	r3, r0
3400b04a:	460a      	mov	r2, r1
3400b04c:	4313      	orrs	r3, r2
3400b04e:	f000 80c5 	beq.w	3400b1dc <HAL_RCCEx_PeriphCLKConfig+0x1a08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
3400b052:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b056:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b05a:	4b9f      	ldr	r3, [pc, #636]	@ (3400b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1b04>)
3400b05c:	429a      	cmp	r2, r3
3400b05e:	d019      	beq.n	3400b094 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b060:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b064:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b068:	4b9c      	ldr	r3, [pc, #624]	@ (3400b2dc <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
3400b06a:	429a      	cmp	r2, r3
3400b06c:	d012      	beq.n	3400b094 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b06e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b072:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b076:	4b9a      	ldr	r3, [pc, #616]	@ (3400b2e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
3400b078:	429a      	cmp	r2, r3
3400b07a:	d00b      	beq.n	3400b094 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b07c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b080:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b084:	4b97      	ldr	r3, [pc, #604]	@ (3400b2e4 <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
3400b086:	429a      	cmp	r2, r3
3400b088:	d004      	beq.n	3400b094 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b08a:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
3400b08e:	4896      	ldr	r0, [pc, #600]	@ (3400b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b090:	f7f6 fbc8 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
3400b094:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b098:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b09c:	4b90      	ldr	r3, [pc, #576]	@ (3400b2e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
3400b09e:	429a      	cmp	r2, r3
3400b0a0:	d142      	bne.n	3400b128 <HAL_RCCEx_PeriphCLKConfig+0x1954>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400b0a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0a6:	6a1b      	ldr	r3, [r3, #32]
3400b0a8:	2b00      	cmp	r3, #0
3400b0aa:	d016      	beq.n	3400b0da <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b0ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0b0:	6a1b      	ldr	r3, [r3, #32]
3400b0b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b0b6:	d010      	beq.n	3400b0da <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b0b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0bc:	6a1b      	ldr	r3, [r3, #32]
3400b0be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b0c2:	d00a      	beq.n	3400b0da <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b0c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0c8:	6a1b      	ldr	r3, [r3, #32]
3400b0ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b0ce:	d004      	beq.n	3400b0da <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b0d0:	f240 11dd 	movw	r1, #477	@ 0x1dd
3400b0d4:	4884      	ldr	r0, [pc, #528]	@ (3400b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b0d6:	f7f6 fba5 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400b0da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b0e0:	2b00      	cmp	r3, #0
3400b0e2:	d005      	beq.n	3400b0f0 <HAL_RCCEx_PeriphCLKConfig+0x191c>
3400b0e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b0ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b0ee:	d904      	bls.n	3400b0fa <HAL_RCCEx_PeriphCLKConfig+0x1926>
3400b0f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400b0f4:	487c      	ldr	r0, [pc, #496]	@ (3400b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b0f6:	f7f6 fb95 	bl	34001824 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400b0fa:	4b7c      	ldr	r3, [pc, #496]	@ (3400b2ec <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b0fc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b100:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b104:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b108:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b10c:	6a1a      	ldr	r2, [r3, #32]
3400b10e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b114:	3b01      	subs	r3, #1
3400b116:	041b      	lsls	r3, r3, #16
3400b118:	4313      	orrs	r3, r2
3400b11a:	4a74      	ldr	r2, [pc, #464]	@ (3400b2ec <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b11c:	430b      	orrs	r3, r1
3400b11e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400b122:	f7fd ff75 	bl	34009010 <LL_RCC_IC4_Enable>
3400b126:	e052      	b.n	3400b1ce <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
3400b128:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b12c:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b130:	4b6c      	ldr	r3, [pc, #432]	@ (3400b2e4 <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
3400b132:	429a      	cmp	r2, r3
3400b134:	d142      	bne.n	3400b1bc <HAL_RCCEx_PeriphCLKConfig+0x19e8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400b136:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b13c:	2b00      	cmp	r3, #0
3400b13e:	d016      	beq.n	3400b16e <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b140:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b146:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b14a:	d010      	beq.n	3400b16e <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b14c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b156:	d00a      	beq.n	3400b16e <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b158:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b15e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b162:	d004      	beq.n	3400b16e <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b164:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
3400b168:	485f      	ldr	r0, [pc, #380]	@ (3400b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b16a:	f7f6 fb5b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400b16e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b174:	2b00      	cmp	r3, #0
3400b176:	d005      	beq.n	3400b184 <HAL_RCCEx_PeriphCLKConfig+0x19b0>
3400b178:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b17e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b182:	d904      	bls.n	3400b18e <HAL_RCCEx_PeriphCLKConfig+0x19ba>
3400b184:	f240 11eb 	movw	r1, #491	@ 0x1eb
3400b188:	4857      	ldr	r0, [pc, #348]	@ (3400b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b18a:	f7f6 fb4b 	bl	34001824 <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400b18e:	4b57      	ldr	r3, [pc, #348]	@ (3400b2ec <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b190:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b194:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b198:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b19c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400b1a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b1a8:	3b01      	subs	r3, #1
3400b1aa:	041b      	lsls	r3, r3, #16
3400b1ac:	4313      	orrs	r3, r2
3400b1ae:	4a4f      	ldr	r2, [pc, #316]	@ (3400b2ec <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b1b0:	430b      	orrs	r3, r1
3400b1b2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400b1b6:	f7fd ff6b 	bl	34009090 <LL_RCC_IC5_Enable>
3400b1ba:	e008      	b.n	3400b1ce <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3400b1bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1c0:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b1c4:	4b45      	ldr	r3, [pc, #276]	@ (3400b2dc <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
3400b1c6:	429a      	cmp	r2, r3
3400b1c8:	d101      	bne.n	3400b1ce <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    {
      LL_RCC_CLKP_Enable();
3400b1ca:	f7fe fae1 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
3400b1ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1d2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
3400b1d6:	4618      	mov	r0, r3
3400b1d8:	f7fd fa51 	bl	3400867e <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
3400b1dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b1e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
3400b1e8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
3400b1ec:	2300      	movs	r3, #0
3400b1ee:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
3400b1f2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
3400b1f6:	4603      	mov	r3, r0
3400b1f8:	460a      	mov	r2, r1
3400b1fa:	4313      	orrs	r3, r2
3400b1fc:	f000 80da 	beq.w	3400b3b4 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
3400b200:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b204:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b208:	4b39      	ldr	r3, [pc, #228]	@ (3400b2f0 <HAL_RCCEx_PeriphCLKConfig+0x1b1c>)
3400b20a:	429a      	cmp	r2, r3
3400b20c:	d019      	beq.n	3400b242 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b20e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b212:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b216:	4b37      	ldr	r3, [pc, #220]	@ (3400b2f4 <HAL_RCCEx_PeriphCLKConfig+0x1b20>)
3400b218:	429a      	cmp	r2, r3
3400b21a:	d012      	beq.n	3400b242 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b21c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b220:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b224:	4b34      	ldr	r3, [pc, #208]	@ (3400b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
3400b226:	429a      	cmp	r2, r3
3400b228:	d00b      	beq.n	3400b242 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b22a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b22e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b232:	4b32      	ldr	r3, [pc, #200]	@ (3400b2fc <HAL_RCCEx_PeriphCLKConfig+0x1b28>)
3400b234:	429a      	cmp	r2, r3
3400b236:	d004      	beq.n	3400b242 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b238:	f240 2105 	movw	r1, #517	@ 0x205
3400b23c:	482a      	ldr	r0, [pc, #168]	@ (3400b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b23e:	f7f6 faf1 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3400b242:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b246:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b24a:	4b2b      	ldr	r3, [pc, #172]	@ (3400b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
3400b24c:	429a      	cmp	r2, r3
3400b24e:	d157      	bne.n	3400b300 <HAL_RCCEx_PeriphCLKConfig+0x1b2c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400b250:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b254:	6a1b      	ldr	r3, [r3, #32]
3400b256:	2b00      	cmp	r3, #0
3400b258:	d016      	beq.n	3400b288 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b25a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b25e:	6a1b      	ldr	r3, [r3, #32]
3400b260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b264:	d010      	beq.n	3400b288 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b266:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b26a:	6a1b      	ldr	r3, [r3, #32]
3400b26c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b270:	d00a      	beq.n	3400b288 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b272:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b276:	6a1b      	ldr	r3, [r3, #32]
3400b278:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b27c:	d004      	beq.n	3400b288 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b27e:	f240 210a 	movw	r1, #522	@ 0x20a
3400b282:	4819      	ldr	r0, [pc, #100]	@ (3400b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b284:	f7f6 face 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400b288:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b28e:	2b00      	cmp	r3, #0
3400b290:	d005      	beq.n	3400b29e <HAL_RCCEx_PeriphCLKConfig+0x1aca>
3400b292:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b29c:	d904      	bls.n	3400b2a8 <HAL_RCCEx_PeriphCLKConfig+0x1ad4>
3400b29e:	f240 210b 	movw	r1, #523	@ 0x20b
3400b2a2:	4811      	ldr	r0, [pc, #68]	@ (3400b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b2a4:	f7f6 fabe 	bl	34001824 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400b2a8:	4b10      	ldr	r3, [pc, #64]	@ (3400b2ec <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b2aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b2ae:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b2b2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b2b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2ba:	6a1a      	ldr	r2, [r3, #32]
3400b2bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b2c2:	3b01      	subs	r3, #1
3400b2c4:	041b      	lsls	r3, r3, #16
3400b2c6:	4313      	orrs	r3, r2
3400b2c8:	4a08      	ldr	r2, [pc, #32]	@ (3400b2ec <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b2ca:	430b      	orrs	r3, r1
3400b2cc:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400b2d0:	f7fd fe9e 	bl	34009010 <LL_RCC_IC4_Enable>
3400b2d4:	e067      	b.n	3400b3a6 <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
3400b2d6:	bf00      	nop
3400b2d8:	0300001c 	.word	0x0300001c
3400b2dc:	0301001c 	.word	0x0301001c
3400b2e0:	0302001c 	.word	0x0302001c
3400b2e4:	0303001c 	.word	0x0303001c
3400b2e8:	3401cebc 	.word	0x3401cebc
3400b2ec:	56028000 	.word	0x56028000
3400b2f0:	0300041c 	.word	0x0300041c
3400b2f4:	0301041c 	.word	0x0301041c
3400b2f8:	0302041c 	.word	0x0302041c
3400b2fc:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3400b300:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b304:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b308:	4ba0      	ldr	r3, [pc, #640]	@ (3400b58c <HAL_RCCEx_PeriphCLKConfig+0x1db8>)
3400b30a:	429a      	cmp	r2, r3
3400b30c:	d142      	bne.n	3400b394 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400b30e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b314:	2b00      	cmp	r3, #0
3400b316:	d016      	beq.n	3400b346 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b318:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b31e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b322:	d010      	beq.n	3400b346 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b324:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b32a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b32e:	d00a      	beq.n	3400b346 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b330:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b336:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b33a:	d004      	beq.n	3400b346 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b33c:	f240 2117 	movw	r1, #535	@ 0x217
3400b340:	4893      	ldr	r0, [pc, #588]	@ (3400b590 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b342:	f7f6 fa6f 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400b346:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b34c:	2b00      	cmp	r3, #0
3400b34e:	d005      	beq.n	3400b35c <HAL_RCCEx_PeriphCLKConfig+0x1b88>
3400b350:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b35a:	d904      	bls.n	3400b366 <HAL_RCCEx_PeriphCLKConfig+0x1b92>
3400b35c:	f44f 7106 	mov.w	r1, #536	@ 0x218
3400b360:	488b      	ldr	r0, [pc, #556]	@ (3400b590 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b362:	f7f6 fa5f 	bl	34001824 <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400b366:	4b8b      	ldr	r3, [pc, #556]	@ (3400b594 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b368:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b36c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b370:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b374:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b378:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400b37a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b380:	3b01      	subs	r3, #1
3400b382:	041b      	lsls	r3, r3, #16
3400b384:	4313      	orrs	r3, r2
3400b386:	4a83      	ldr	r2, [pc, #524]	@ (3400b594 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b388:	430b      	orrs	r3, r1
3400b38a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400b38e:	f7fd fe7f 	bl	34009090 <LL_RCC_IC5_Enable>
3400b392:	e008      	b.n	3400b3a6 <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3400b394:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b398:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b39c:	4b7e      	ldr	r3, [pc, #504]	@ (3400b598 <HAL_RCCEx_PeriphCLKConfig+0x1dc4>)
3400b39e:	429a      	cmp	r2, r3
3400b3a0:	d101      	bne.n	3400b3a6 <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    {
      LL_RCC_CLKP_Enable();
3400b3a2:	f7fe f9f5 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
3400b3a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3aa:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
3400b3ae:	4618      	mov	r0, r3
3400b3b0:	f7fd f965 	bl	3400867e <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3400b3b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b3bc:	f002 0301 	and.w	r3, r2, #1
3400b3c0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
3400b3c4:	2300      	movs	r3, #0
3400b3c6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
3400b3ca:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
3400b3ce:	4603      	mov	r3, r0
3400b3d0:	460a      	mov	r2, r1
3400b3d2:	4313      	orrs	r3, r2
3400b3d4:	f000 8100 	beq.w	3400b5d8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
3400b3d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b3e0:	2b00      	cmp	r3, #0
3400b3e2:	d02e      	beq.n	3400b442 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b3e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b3ec:	2b10      	cmp	r3, #16
3400b3ee:	d028      	beq.n	3400b442 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b3f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b3f8:	2b20      	cmp	r3, #32
3400b3fa:	d022      	beq.n	3400b442 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b3fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b400:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b404:	2b30      	cmp	r3, #48	@ 0x30
3400b406:	d01c      	beq.n	3400b442 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b408:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b40c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b410:	2b40      	cmp	r3, #64	@ 0x40
3400b412:	d016      	beq.n	3400b442 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b414:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b418:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b41c:	2b50      	cmp	r3, #80	@ 0x50
3400b41e:	d010      	beq.n	3400b442 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b420:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b424:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b428:	2b60      	cmp	r3, #96	@ 0x60
3400b42a:	d00a      	beq.n	3400b442 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b42c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b430:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b434:	2b70      	cmp	r3, #112	@ 0x70
3400b436:	d004      	beq.n	3400b442 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b438:	f240 2132 	movw	r1, #562	@ 0x232
3400b43c:	4854      	ldr	r0, [pc, #336]	@ (3400b590 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b43e:	f7f6 f9f1 	bl	34001824 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
3400b442:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b446:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400b44a:	2b00      	cmp	r3, #0
3400b44c:	d006      	beq.n	3400b45c <HAL_RCCEx_PeriphCLKConfig+0x1c88>
3400b44e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b452:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400b456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b45a:	d904      	bls.n	3400b466 <HAL_RCCEx_PeriphCLKConfig+0x1c92>
3400b45c:	f240 2133 	movw	r1, #563	@ 0x233
3400b460:	484b      	ldr	r0, [pc, #300]	@ (3400b590 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b462:	f7f6 f9df 	bl	34001824 <assert_failed>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3400b466:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b46a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b46e:	2b20      	cmp	r3, #32
3400b470:	d142      	bne.n	3400b4f8 <HAL_RCCEx_PeriphCLKConfig+0x1d24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400b472:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b478:	2b00      	cmp	r3, #0
3400b47a:	d016      	beq.n	3400b4aa <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b47c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b486:	d010      	beq.n	3400b4aa <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b488:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b48c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b48e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b492:	d00a      	beq.n	3400b4aa <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b494:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b49a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b49e:	d004      	beq.n	3400b4aa <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b4a0:	f44f 710e 	mov.w	r1, #568	@ 0x238
3400b4a4:	483a      	ldr	r0, [pc, #232]	@ (3400b590 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b4a6:	f7f6 f9bd 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400b4aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b4b0:	2b00      	cmp	r3, #0
3400b4b2:	d005      	beq.n	3400b4c0 <HAL_RCCEx_PeriphCLKConfig+0x1cec>
3400b4b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b4ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b4be:	d904      	bls.n	3400b4ca <HAL_RCCEx_PeriphCLKConfig+0x1cf6>
3400b4c0:	f240 2139 	movw	r1, #569	@ 0x239
3400b4c4:	4832      	ldr	r0, [pc, #200]	@ (3400b590 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b4c6:	f7f6 f9ad 	bl	34001824 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400b4ca:	4b32      	ldr	r3, [pc, #200]	@ (3400b594 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b4cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b4d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b4d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b4d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400b4de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b4e4:	3b01      	subs	r3, #1
3400b4e6:	041b      	lsls	r3, r3, #16
3400b4e8:	4313      	orrs	r3, r2
3400b4ea:	4a2a      	ldr	r2, [pc, #168]	@ (3400b594 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b4ec:	430b      	orrs	r3, r1
3400b4ee:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400b4f2:	f7fd fe0d 	bl	34009110 <LL_RCC_IC7_Enable>
3400b4f6:	e059      	b.n	3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
3400b4f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b500:	2b30      	cmp	r3, #48	@ 0x30
3400b502:	d14b      	bne.n	3400b59c <HAL_RCCEx_PeriphCLKConfig+0x1dc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400b504:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b50a:	2b00      	cmp	r3, #0
3400b50c:	d016      	beq.n	3400b53c <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b50e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b518:	d010      	beq.n	3400b53c <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b51a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b51e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b524:	d00a      	beq.n	3400b53c <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b526:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b52c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b530:	d004      	beq.n	3400b53c <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b532:	f240 2145 	movw	r1, #581	@ 0x245
3400b536:	4816      	ldr	r0, [pc, #88]	@ (3400b590 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b538:	f7f6 f974 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400b53c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b542:	2b00      	cmp	r3, #0
3400b544:	d005      	beq.n	3400b552 <HAL_RCCEx_PeriphCLKConfig+0x1d7e>
3400b546:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b54a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b54c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b550:	d904      	bls.n	3400b55c <HAL_RCCEx_PeriphCLKConfig+0x1d88>
3400b552:	f240 2146 	movw	r1, #582	@ 0x246
3400b556:	480e      	ldr	r0, [pc, #56]	@ (3400b590 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b558:	f7f6 f964 	bl	34001824 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400b55c:	4b0d      	ldr	r3, [pc, #52]	@ (3400b594 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b55e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b562:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b566:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b56a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b56e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400b570:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b576:	3b01      	subs	r3, #1
3400b578:	041b      	lsls	r3, r3, #16
3400b57a:	4313      	orrs	r3, r2
3400b57c:	4a05      	ldr	r2, [pc, #20]	@ (3400b594 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b57e:	430b      	orrs	r3, r1
3400b580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400b584:	f7fd fe04 	bl	34009190 <LL_RCC_IC8_Enable>
3400b588:	e010      	b.n	3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
3400b58a:	bf00      	nop
3400b58c:	0303041c 	.word	0x0303041c
3400b590:	3401cebc 	.word	0x3401cebc
3400b594:	56028000 	.word	0x56028000
3400b598:	0301041c 	.word	0x0301041c
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3400b59c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b5a4:	2b10      	cmp	r3, #16
3400b5a6:	d101      	bne.n	3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    {
      LL_RCC_CLKP_Enable();
3400b5a8:	f7fe f8f2 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3400b5ac:	4b77      	ldr	r3, [pc, #476]	@ (3400b78c <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b5ae:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400b5b2:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
3400b5b6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
3400b5ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400b5c2:	3b01      	subs	r3, #1
3400b5c4:	021a      	lsls	r2, r3, #8
3400b5c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b5ce:	4313      	orrs	r3, r2
3400b5d0:	4a6e      	ldr	r2, [pc, #440]	@ (3400b78c <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b5d2:	430b      	orrs	r3, r1
3400b5d4:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
3400b5d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b5e0:	f002 0302 	and.w	r3, r2, #2
3400b5e4:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
3400b5e8:	2300      	movs	r3, #0
3400b5ea:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
3400b5ee:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
3400b5f2:	4603      	mov	r3, r0
3400b5f4:	460a      	mov	r2, r1
3400b5f6:	4313      	orrs	r3, r2
3400b5f8:	f000 80db 	beq.w	3400b7b2 <HAL_RCCEx_PeriphCLKConfig+0x1fde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
3400b5fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b600:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b604:	2b00      	cmp	r3, #0
3400b606:	d02e      	beq.n	3400b666 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b608:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b60c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b610:	2b01      	cmp	r3, #1
3400b612:	d028      	beq.n	3400b666 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b614:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b618:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b61c:	2b02      	cmp	r3, #2
3400b61e:	d022      	beq.n	3400b666 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b620:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b624:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b628:	2b03      	cmp	r3, #3
3400b62a:	d01c      	beq.n	3400b666 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b62c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b630:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b634:	2b04      	cmp	r3, #4
3400b636:	d016      	beq.n	3400b666 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b638:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b63c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b640:	2b05      	cmp	r3, #5
3400b642:	d010      	beq.n	3400b666 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b644:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b648:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b64c:	2b06      	cmp	r3, #6
3400b64e:	d00a      	beq.n	3400b666 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b650:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b654:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b658:	2b07      	cmp	r3, #7
3400b65a:	d004      	beq.n	3400b666 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b65c:	f240 2161 	movw	r1, #609	@ 0x261
3400b660:	484b      	ldr	r0, [pc, #300]	@ (3400b790 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b662:	f7f6 f8df 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
3400b666:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b66a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b66e:	2b02      	cmp	r3, #2
3400b670:	d142      	bne.n	3400b6f8 <HAL_RCCEx_PeriphCLKConfig+0x1f24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400b672:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b678:	2b00      	cmp	r3, #0
3400b67a:	d016      	beq.n	3400b6aa <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b67c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b686:	d010      	beq.n	3400b6aa <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b688:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b68c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b68e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b692:	d00a      	beq.n	3400b6aa <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b694:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b69a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b69e:	d004      	beq.n	3400b6aa <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b6a0:	f240 2166 	movw	r1, #614	@ 0x266
3400b6a4:	483a      	ldr	r0, [pc, #232]	@ (3400b790 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b6a6:	f7f6 f8bd 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400b6aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b6b0:	2b00      	cmp	r3, #0
3400b6b2:	d005      	beq.n	3400b6c0 <HAL_RCCEx_PeriphCLKConfig+0x1eec>
3400b6b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b6ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b6be:	d904      	bls.n	3400b6ca <HAL_RCCEx_PeriphCLKConfig+0x1ef6>
3400b6c0:	f240 2167 	movw	r1, #615	@ 0x267
3400b6c4:	4832      	ldr	r0, [pc, #200]	@ (3400b790 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b6c6:	f7f6 f8ad 	bl	34001824 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400b6ca:	4b30      	ldr	r3, [pc, #192]	@ (3400b78c <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b6cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b6d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b6d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b6d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400b6de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b6e4:	3b01      	subs	r3, #1
3400b6e6:	041b      	lsls	r3, r3, #16
3400b6e8:	4313      	orrs	r3, r2
3400b6ea:	4a28      	ldr	r2, [pc, #160]	@ (3400b78c <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b6ec:	430b      	orrs	r3, r1
3400b6ee:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400b6f2:	f7fd fd0d 	bl	34009110 <LL_RCC_IC7_Enable>
3400b6f6:	e055      	b.n	3400b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
3400b6f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b700:	2b03      	cmp	r3, #3
3400b702:	d147      	bne.n	3400b794 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400b704:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b70a:	2b00      	cmp	r3, #0
3400b70c:	d016      	beq.n	3400b73c <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b70e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b718:	d010      	beq.n	3400b73c <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b71a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b724:	d00a      	beq.n	3400b73c <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b726:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b72c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b730:	d004      	beq.n	3400b73c <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b732:	f240 2173 	movw	r1, #627	@ 0x273
3400b736:	4816      	ldr	r0, [pc, #88]	@ (3400b790 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b738:	f7f6 f874 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400b73c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b742:	2b00      	cmp	r3, #0
3400b744:	d005      	beq.n	3400b752 <HAL_RCCEx_PeriphCLKConfig+0x1f7e>
3400b746:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b74a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b74c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b750:	d904      	bls.n	3400b75c <HAL_RCCEx_PeriphCLKConfig+0x1f88>
3400b752:	f44f 711d 	mov.w	r1, #628	@ 0x274
3400b756:	480e      	ldr	r0, [pc, #56]	@ (3400b790 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b758:	f7f6 f864 	bl	34001824 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400b75c:	4b0b      	ldr	r3, [pc, #44]	@ (3400b78c <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b75e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b762:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b766:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b76a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b76e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400b770:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b776:	3b01      	subs	r3, #1
3400b778:	041b      	lsls	r3, r3, #16
3400b77a:	4313      	orrs	r3, r2
3400b77c:	4a03      	ldr	r2, [pc, #12]	@ (3400b78c <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b77e:	430b      	orrs	r3, r1
3400b780:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400b784:	f7fd fd04 	bl	34009190 <LL_RCC_IC8_Enable>
3400b788:	e00c      	b.n	3400b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
3400b78a:	bf00      	nop
3400b78c:	56028000 	.word	0x56028000
3400b790:	3401cebc 	.word	0x3401cebc
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
3400b794:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b798:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b79c:	2b01      	cmp	r3, #1
3400b79e:	d101      	bne.n	3400b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    {
      LL_RCC_CLKP_Enable();
3400b7a0:	f7fd fff6 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
3400b7a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b7ac:	4618      	mov	r0, r3
3400b7ae:	f7fc fdf7 	bl	340083a0 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3400b7b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b7ba:	f002 0308 	and.w	r3, r2, #8
3400b7be:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3400b7c2:	2300      	movs	r3, #0
3400b7c4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
3400b7c8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
3400b7cc:	4603      	mov	r3, r0
3400b7ce:	460a      	mov	r2, r1
3400b7d0:	4313      	orrs	r3, r2
3400b7d2:	d049      	beq.n	3400b868 <HAL_RCCEx_PeriphCLKConfig+0x2094>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
3400b7d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b7dc:	2b00      	cmp	r3, #0
3400b7de:	d019      	beq.n	3400b814 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400b7e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b7e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b7ec:	d012      	beq.n	3400b814 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400b7ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b7f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b7fa:	d00b      	beq.n	3400b814 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400b7fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b804:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b808:	d004      	beq.n	3400b814 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400b80a:	f240 218e 	movw	r1, #654	@ 0x28e
3400b80e:	489e      	ldr	r0, [pc, #632]	@ (3400ba88 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b810:	f7f6 f808 	bl	34001824 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
3400b814:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400b81c:	2b00      	cmp	r3, #0
3400b81e:	d006      	beq.n	3400b82e <HAL_RCCEx_PeriphCLKConfig+0x205a>
3400b820:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400b828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b82c:	d904      	bls.n	3400b838 <HAL_RCCEx_PeriphCLKConfig+0x2064>
3400b82e:	f240 218f 	movw	r1, #655	@ 0x28f
3400b832:	4895      	ldr	r0, [pc, #596]	@ (3400ba88 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b834:	f7f5 fff6 	bl	34001824 <assert_failed>

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3400b838:	4b94      	ldr	r3, [pc, #592]	@ (3400ba8c <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400b83a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400b83e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b842:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b846:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b84a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3400b84e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400b856:	3b01      	subs	r3, #1
3400b858:	041b      	lsls	r3, r3, #16
3400b85a:	4313      	orrs	r3, r2
3400b85c:	4a8b      	ldr	r2, [pc, #556]	@ (3400ba8c <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400b85e:	430b      	orrs	r3, r1
3400b860:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
3400b864:	f7fd fed4 	bl	34009610 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3400b868:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b870:	f002 0310 	and.w	r3, r2, #16
3400b874:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
3400b878:	2300      	movs	r3, #0
3400b87a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
3400b87e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
3400b882:	4603      	mov	r3, r0
3400b884:	460a      	mov	r2, r1
3400b886:	4313      	orrs	r3, r2
3400b888:	f000 8082 	beq.w	3400b990 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
3400b88c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b890:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b894:	2b00      	cmp	r3, #0
3400b896:	d019      	beq.n	3400b8cc <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400b898:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b89c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b8a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400b8a4:	d012      	beq.n	3400b8cc <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400b8a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b8ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400b8b2:	d00b      	beq.n	3400b8cc <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400b8b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8b8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b8bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400b8c0:	d004      	beq.n	3400b8cc <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400b8c2:	f240 219d 	movw	r1, #669	@ 0x29d
3400b8c6:	4870      	ldr	r0, [pc, #448]	@ (3400ba88 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b8c8:	f7f5 ffac 	bl	34001824 <assert_failed>

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
3400b8cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b8d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400b8d8:	d14a      	bne.n	3400b970 <HAL_RCCEx_PeriphCLKConfig+0x219c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
3400b8da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b8e2:	2b00      	cmp	r3, #0
3400b8e4:	d019      	beq.n	3400b91a <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400b8e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b8ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b8f2:	d012      	beq.n	3400b91a <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400b8f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b8fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b900:	d00b      	beq.n	3400b91a <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400b902:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b90a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b90e:	d004      	beq.n	3400b91a <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400b910:	f240 21a2 	movw	r1, #674	@ 0x2a2
3400b914:	485c      	ldr	r0, [pc, #368]	@ (3400ba88 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b916:	f7f5 ff85 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
3400b91a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b91e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400b922:	2b00      	cmp	r3, #0
3400b924:	d006      	beq.n	3400b934 <HAL_RCCEx_PeriphCLKConfig+0x2160>
3400b926:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b92a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400b92e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b932:	d904      	bls.n	3400b93e <HAL_RCCEx_PeriphCLKConfig+0x216a>
3400b934:	f240 21a3 	movw	r1, #675	@ 0x2a3
3400b938:	4853      	ldr	r0, [pc, #332]	@ (3400ba88 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b93a:	f7f5 ff73 	bl	34001824 <assert_failed>

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
3400b93e:	4b53      	ldr	r3, [pc, #332]	@ (3400ba8c <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400b940:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400b944:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b948:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b94c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b950:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3400b954:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400b95c:	3b01      	subs	r3, #1
3400b95e:	041b      	lsls	r3, r3, #16
3400b960:	4313      	orrs	r3, r2
3400b962:	4a4a      	ldr	r2, [pc, #296]	@ (3400ba8c <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400b964:	430b      	orrs	r3, r1
3400b966:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
3400b96a:	f7fd fe11 	bl	34009590 <LL_RCC_IC17_Enable>
3400b96e:	e008      	b.n	3400b982 <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
3400b970:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b974:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b978:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400b97c:	d101      	bne.n	3400b982 <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    {
      LL_RCC_CLKP_Enable();
3400b97e:	f7fd ff07 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
3400b982:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b986:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b98a:	4618      	mov	r0, r3
3400b98c:	f7fc fd34 	bl	340083f8 <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
3400b990:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b994:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b998:	f002 0320 	and.w	r3, r2, #32
3400b99c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
3400b9a0:	2300      	movs	r3, #0
3400b9a2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
3400b9a6:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
3400b9aa:	4603      	mov	r3, r0
3400b9ac:	460a      	mov	r2, r1
3400b9ae:	4313      	orrs	r3, r2
3400b9b0:	d07e      	beq.n	3400bab0 <HAL_RCCEx_PeriphCLKConfig+0x22dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
3400b9b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b9ba:	2b00      	cmp	r3, #0
3400b9bc:	d019      	beq.n	3400b9f2 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400b9be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b9c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400b9ca:	d012      	beq.n	3400b9f2 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400b9cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9d0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b9d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400b9d8:	d00b      	beq.n	3400b9f2 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400b9da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b9e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3400b9e6:	d004      	beq.n	3400b9f2 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400b9e8:	f240 21bd 	movw	r1, #701	@ 0x2bd
3400b9ec:	4826      	ldr	r0, [pc, #152]	@ (3400ba88 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b9ee:	f7f5 ff19 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
3400b9f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b9fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400b9fe:	d147      	bne.n	3400ba90 <HAL_RCCEx_PeriphCLKConfig+0x22bc>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
3400ba00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400ba06:	2b00      	cmp	r3, #0
3400ba08:	d016      	beq.n	3400ba38 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400ba0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400ba10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ba14:	d010      	beq.n	3400ba38 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400ba16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400ba1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ba20:	d00a      	beq.n	3400ba38 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400ba22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400ba28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ba2c:	d004      	beq.n	3400ba38 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400ba2e:	f240 21c2 	movw	r1, #706	@ 0x2c2
3400ba32:	4815      	ldr	r0, [pc, #84]	@ (3400ba88 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400ba34:	f7f5 fef6 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
3400ba38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400ba3e:	2b00      	cmp	r3, #0
3400ba40:	d005      	beq.n	3400ba4e <HAL_RCCEx_PeriphCLKConfig+0x227a>
3400ba42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400ba48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ba4c:	d904      	bls.n	3400ba58 <HAL_RCCEx_PeriphCLKConfig+0x2284>
3400ba4e:	f240 21c3 	movw	r1, #707	@ 0x2c3
3400ba52:	480d      	ldr	r0, [pc, #52]	@ (3400ba88 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400ba54:	f7f5 fee6 	bl	34001824 <assert_failed>

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
3400ba58:	4b0c      	ldr	r3, [pc, #48]	@ (3400ba8c <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400ba5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400ba5e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ba62:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ba66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba6a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
3400ba6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400ba72:	3b01      	subs	r3, #1
3400ba74:	041b      	lsls	r3, r3, #16
3400ba76:	4313      	orrs	r3, r2
3400ba78:	4a04      	ldr	r2, [pc, #16]	@ (3400ba8c <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400ba7a:	430b      	orrs	r3, r1
3400ba7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
3400ba80:	f7fd fc46 	bl	34009310 <LL_RCC_IC12_Enable>
3400ba84:	e00d      	b.n	3400baa2 <HAL_RCCEx_PeriphCLKConfig+0x22ce>
3400ba86:	bf00      	nop
3400ba88:	3401cebc 	.word	0x3401cebc
3400ba8c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3400ba90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba94:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400ba98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400ba9c:	d101      	bne.n	3400baa2 <HAL_RCCEx_PeriphCLKConfig+0x22ce>
    {
      LL_RCC_CLKP_Enable();
3400ba9e:	f7fd fe77 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
3400baa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400baa6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400baaa:	4618      	mov	r0, r3
3400baac:	f7fc fcba 	bl	34008424 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3400bab0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bab8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
3400babc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
3400bac0:	2300      	movs	r3, #0
3400bac2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
3400bac6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
3400baca:	4603      	mov	r3, r0
3400bacc:	460a      	mov	r2, r1
3400bace:	4313      	orrs	r3, r2
3400bad0:	d01f      	beq.n	3400bb12 <HAL_RCCEx_PeriphCLKConfig+0x233e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
3400bad2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bad6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bada:	2b00      	cmp	r3, #0
3400badc:	d012      	beq.n	3400bb04 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400bade:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bae2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400baea:	d00b      	beq.n	3400bb04 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400baec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400baf0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400baf4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400baf8:	d004      	beq.n	3400bb04 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400bafa:	f240 21dd 	movw	r1, #733	@ 0x2dd
3400bafe:	48c1      	ldr	r0, [pc, #772]	@ (3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bb00:	f7f5 fe90 	bl	34001824 <assert_failed>

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3400bb04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb08:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bb0c:	4618      	mov	r0, r3
3400bb0e:	f7fc fc9f 	bl	34008450 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
3400bb12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bb1a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
3400bb1e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
3400bb22:	2300      	movs	r3, #0
3400bb24:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
3400bb28:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
3400bb2c:	4603      	mov	r3, r0
3400bb2e:	460a      	mov	r2, r1
3400bb30:	4313      	orrs	r3, r2
3400bb32:	d018      	beq.n	3400bb66 <HAL_RCCEx_PeriphCLKConfig+0x2392>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
3400bb34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400bb3c:	2b00      	cmp	r3, #0
3400bb3e:	d00b      	beq.n	3400bb58 <HAL_RCCEx_PeriphCLKConfig+0x2384>
3400bb40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400bb48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400bb4c:	d004      	beq.n	3400bb58 <HAL_RCCEx_PeriphCLKConfig+0x2384>
3400bb4e:	f240 21e7 	movw	r1, #743	@ 0x2e7
3400bb52:	48ac      	ldr	r0, [pc, #688]	@ (3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bb54:	f7f5 fe66 	bl	34001824 <assert_failed>

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
3400bb58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400bb60:	4618      	mov	r0, r3
3400bb62:	f7fc fc99 	bl	34008498 <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3400bb66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bb6e:	f402 7380 	and.w	r3, r2, #256	@ 0x100
3400bb72:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
3400bb76:	2300      	movs	r3, #0
3400bb78:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
3400bb7c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
3400bb80:	4603      	mov	r3, r0
3400bb82:	460a      	mov	r2, r1
3400bb84:	4313      	orrs	r3, r2
3400bb86:	d018      	beq.n	3400bbba <HAL_RCCEx_PeriphCLKConfig+0x23e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
3400bb88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400bb90:	2b00      	cmp	r3, #0
3400bb92:	d00b      	beq.n	3400bbac <HAL_RCCEx_PeriphCLKConfig+0x23d8>
3400bb94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400bb9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400bba0:	d004      	beq.n	3400bbac <HAL_RCCEx_PeriphCLKConfig+0x23d8>
3400bba2:	f240 21f1 	movw	r1, #753	@ 0x2f1
3400bba6:	4897      	ldr	r0, [pc, #604]	@ (3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bba8:	f7f5 fe3c 	bl	34001824 <assert_failed>

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
3400bbac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400bbb4:	4618      	mov	r0, r3
3400bbb6:	f7fc fc85 	bl	340084c4 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3400bbba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bbc2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
3400bbc6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
3400bbca:	2300      	movs	r3, #0
3400bbcc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
3400bbd0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
3400bbd4:	4603      	mov	r3, r0
3400bbd6:	460a      	mov	r2, r1
3400bbd8:	4313      	orrs	r3, r2
3400bbda:	f000 8093 	beq.w	3400bd04 <HAL_RCCEx_PeriphCLKConfig+0x2530>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
3400bbde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbe2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bbe6:	2b00      	cmp	r3, #0
3400bbe8:	d016      	beq.n	3400bc18 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400bbea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bbf2:	2b01      	cmp	r3, #1
3400bbf4:	d010      	beq.n	3400bc18 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400bbf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbfa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bbfe:	2b02      	cmp	r3, #2
3400bc00:	d00a      	beq.n	3400bc18 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400bc02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bc0a:	2b03      	cmp	r3, #3
3400bc0c:	d004      	beq.n	3400bc18 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400bc0e:	f240 21fb 	movw	r1, #763	@ 0x2fb
3400bc12:	487c      	ldr	r0, [pc, #496]	@ (3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bc14:	f7f5 fe06 	bl	34001824 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
3400bc18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400bc20:	2b00      	cmp	r3, #0
3400bc22:	d005      	beq.n	3400bc30 <HAL_RCCEx_PeriphCLKConfig+0x245c>
3400bc24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400bc2c:	2b10      	cmp	r3, #16
3400bc2e:	d904      	bls.n	3400bc3a <HAL_RCCEx_PeriphCLKConfig+0x2466>
3400bc30:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
3400bc34:	4873      	ldr	r0, [pc, #460]	@ (3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bc36:	f7f5 fdf5 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3400bc3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bc42:	2b02      	cmp	r3, #2
3400bc44:	d142      	bne.n	3400bccc <HAL_RCCEx_PeriphCLKConfig+0x24f8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
3400bc46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400bc4c:	2b00      	cmp	r3, #0
3400bc4e:	d016      	beq.n	3400bc7e <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400bc50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400bc56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bc5a:	d010      	beq.n	3400bc7e <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400bc5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400bc62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bc66:	d00a      	beq.n	3400bc7e <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400bc68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400bc6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bc72:	d004      	beq.n	3400bc7e <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400bc74:	f240 3101 	movw	r1, #769	@ 0x301
3400bc78:	4862      	ldr	r0, [pc, #392]	@ (3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bc7a:	f7f5 fdd3 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
3400bc7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400bc84:	2b00      	cmp	r3, #0
3400bc86:	d005      	beq.n	3400bc94 <HAL_RCCEx_PeriphCLKConfig+0x24c0>
3400bc88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400bc8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bc92:	d904      	bls.n	3400bc9e <HAL_RCCEx_PeriphCLKConfig+0x24ca>
3400bc94:	f240 3102 	movw	r1, #770	@ 0x302
3400bc98:	485a      	ldr	r0, [pc, #360]	@ (3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bc9a:	f7f5 fdc3 	bl	34001824 <assert_failed>

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3400bc9e:	4b5a      	ldr	r3, [pc, #360]	@ (3400be08 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400bca4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bca8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bcac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcb0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3400bcb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400bcb8:	3b01      	subs	r3, #1
3400bcba:	041b      	lsls	r3, r3, #16
3400bcbc:	4313      	orrs	r3, r2
3400bcbe:	4a52      	ldr	r2, [pc, #328]	@ (3400be08 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bcc0:	430b      	orrs	r3, r1
3400bcc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
3400bcc6:	f7fd fb63 	bl	34009390 <LL_RCC_IC13_Enable>
3400bcca:	e007      	b.n	3400bcdc <HAL_RCCEx_PeriphCLKConfig+0x2508>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
3400bccc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bcd4:	2b01      	cmp	r3, #1
3400bcd6:	d101      	bne.n	3400bcdc <HAL_RCCEx_PeriphCLKConfig+0x2508>
    {
      LL_RCC_CLKP_Enable();
3400bcd8:	f7fd fd5a 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
3400bcdc:	4b4a      	ldr	r3, [pc, #296]	@ (3400be08 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bcde:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400bce2:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
3400bce6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400bcee:	3b01      	subs	r3, #1
3400bcf0:	011a      	lsls	r2, r3, #4
3400bcf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcf6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bcfa:	4313      	orrs	r3, r2
3400bcfc:	4a42      	ldr	r2, [pc, #264]	@ (3400be08 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bcfe:	430b      	orrs	r3, r1
3400bd00:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
3400bd04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bd0c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3400bd10:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
3400bd14:	2300      	movs	r3, #0
3400bd16:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
3400bd1a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3400bd1e:	4603      	mov	r3, r0
3400bd20:	460a      	mov	r2, r1
3400bd22:	4313      	orrs	r3, r2
3400bd24:	f000 8081 	beq.w	3400be2a <HAL_RCCEx_PeriphCLKConfig+0x2656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
3400bd28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bd30:	2b00      	cmp	r3, #0
3400bd32:	d016      	beq.n	3400bd62 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bd34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bd3c:	2b01      	cmp	r3, #1
3400bd3e:	d010      	beq.n	3400bd62 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bd40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bd48:	2b02      	cmp	r3, #2
3400bd4a:	d00a      	beq.n	3400bd62 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bd4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bd54:	2b03      	cmp	r3, #3
3400bd56:	d004      	beq.n	3400bd62 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bd58:	f240 311d 	movw	r1, #797	@ 0x31d
3400bd5c:	4829      	ldr	r0, [pc, #164]	@ (3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bd5e:	f7f5 fd61 	bl	34001824 <assert_failed>

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3400bd62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bd6a:	2b02      	cmp	r3, #2
3400bd6c:	d14e      	bne.n	3400be0c <HAL_RCCEx_PeriphCLKConfig+0x2638>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
3400bd6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bd76:	2b00      	cmp	r3, #0
3400bd78:	d019      	beq.n	3400bdae <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bd7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bd82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bd86:	d012      	beq.n	3400bdae <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bd88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bd90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bd94:	d00b      	beq.n	3400bdae <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bd96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bd9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bda2:	d004      	beq.n	3400bdae <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bda4:	f240 3122 	movw	r1, #802	@ 0x322
3400bda8:	4816      	ldr	r0, [pc, #88]	@ (3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bdaa:	f7f5 fd3b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400bdae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400bdb6:	2b00      	cmp	r3, #0
3400bdb8:	d006      	beq.n	3400bdc8 <HAL_RCCEx_PeriphCLKConfig+0x25f4>
3400bdba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400bdc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bdc6:	d904      	bls.n	3400bdd2 <HAL_RCCEx_PeriphCLKConfig+0x25fe>
3400bdc8:	f240 3123 	movw	r1, #803	@ 0x323
3400bdcc:	480d      	ldr	r0, [pc, #52]	@ (3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bdce:	f7f5 fd29 	bl	34001824 <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400bdd2:	4b0d      	ldr	r3, [pc, #52]	@ (3400be08 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bdd4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400bdd8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bddc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bde0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bde4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400bde8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400bdf0:	3b01      	subs	r3, #1
3400bdf2:	041b      	lsls	r3, r3, #16
3400bdf4:	4313      	orrs	r3, r2
3400bdf6:	4a04      	ldr	r2, [pc, #16]	@ (3400be08 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bdf8:	430b      	orrs	r3, r1
3400bdfa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3400bdfe:	f7fd fc47 	bl	34009690 <LL_RCC_IC19_Enable>
3400be02:	e00b      	b.n	3400be1c <HAL_RCCEx_PeriphCLKConfig+0x2648>
3400be04:	3401cebc 	.word	0x3401cebc
3400be08:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
3400be0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400be14:	2b01      	cmp	r3, #1
3400be16:	d101      	bne.n	3400be1c <HAL_RCCEx_PeriphCLKConfig+0x2648>
    {
      LL_RCC_CLKP_Enable();
3400be18:	f7fd fcba 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
3400be1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400be24:	4618      	mov	r0, r3
3400be26:	f7fc fb63 	bl	340084f0 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3400be2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
3400be32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3400be36:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
3400be3a:	2300      	movs	r3, #0
3400be3c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
3400be40:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3400be44:	4603      	mov	r3, r0
3400be46:	460a      	mov	r2, r1
3400be48:	4313      	orrs	r3, r2
3400be4a:	f000 80d3 	beq.w	3400bff4 <HAL_RCCEx_PeriphCLKConfig+0x2820>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
3400be4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be52:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400be56:	4bad      	ldr	r3, [pc, #692]	@ (3400c10c <HAL_RCCEx_PeriphCLKConfig+0x2938>)
3400be58:	429a      	cmp	r2, r3
3400be5a:	d027      	beq.n	3400beac <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400be5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be60:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400be64:	4baa      	ldr	r3, [pc, #680]	@ (3400c110 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3400be66:	429a      	cmp	r2, r3
3400be68:	d020      	beq.n	3400beac <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400be6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be6e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400be72:	4ba8      	ldr	r3, [pc, #672]	@ (3400c114 <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3400be74:	429a      	cmp	r2, r3
3400be76:	d019      	beq.n	3400beac <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400be78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be7c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400be80:	4ba5      	ldr	r3, [pc, #660]	@ (3400c118 <HAL_RCCEx_PeriphCLKConfig+0x2944>)
3400be82:	429a      	cmp	r2, r3
3400be84:	d012      	beq.n	3400beac <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400be86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be8a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400be8e:	4ba3      	ldr	r3, [pc, #652]	@ (3400c11c <HAL_RCCEx_PeriphCLKConfig+0x2948>)
3400be90:	429a      	cmp	r2, r3
3400be92:	d00b      	beq.n	3400beac <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400be94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be98:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400be9c:	4ba0      	ldr	r3, [pc, #640]	@ (3400c120 <HAL_RCCEx_PeriphCLKConfig+0x294c>)
3400be9e:	429a      	cmp	r2, r3
3400bea0:	d004      	beq.n	3400beac <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400bea2:	f240 313d 	movw	r1, #829	@ 0x33d
3400bea6:	489f      	ldr	r0, [pc, #636]	@ (3400c124 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400bea8:	f7f5 fcbc 	bl	34001824 <assert_failed>

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
3400beac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400beb0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400beb4:	4b97      	ldr	r3, [pc, #604]	@ (3400c114 <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3400beb6:	429a      	cmp	r2, r3
3400beb8:	d142      	bne.n	3400bf40 <HAL_RCCEx_PeriphCLKConfig+0x276c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400beba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bec0:	2b00      	cmp	r3, #0
3400bec2:	d016      	beq.n	3400bef2 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400bec4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400beca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bece:	d010      	beq.n	3400bef2 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400bed0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bed6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400beda:	d00a      	beq.n	3400bef2 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400bedc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bee2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bee6:	d004      	beq.n	3400bef2 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400bee8:	f240 3142 	movw	r1, #834	@ 0x342
3400beec:	488d      	ldr	r0, [pc, #564]	@ (3400c124 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400beee:	f7f5 fc99 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400bef2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400bef8:	2b00      	cmp	r3, #0
3400befa:	d005      	beq.n	3400bf08 <HAL_RCCEx_PeriphCLKConfig+0x2734>
3400befc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400bf02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bf06:	d904      	bls.n	3400bf12 <HAL_RCCEx_PeriphCLKConfig+0x273e>
3400bf08:	f240 3143 	movw	r1, #835	@ 0x343
3400bf0c:	4885      	ldr	r0, [pc, #532]	@ (3400c124 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400bf0e:	f7f5 fc89 	bl	34001824 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400bf12:	4b85      	ldr	r3, [pc, #532]	@ (3400c128 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400bf14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400bf18:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bf1c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bf20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400bf26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400bf2c:	3b01      	subs	r3, #1
3400bf2e:	041b      	lsls	r3, r3, #16
3400bf30:	4313      	orrs	r3, r2
3400bf32:	4a7d      	ldr	r2, [pc, #500]	@ (3400c128 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400bf34:	430b      	orrs	r3, r1
3400bf36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400bf3a:	f7fd f9a9 	bl	34009290 <LL_RCC_IC10_Enable>
3400bf3e:	e052      	b.n	3400bfe6 <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
3400bf40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf44:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400bf48:	4b73      	ldr	r3, [pc, #460]	@ (3400c118 <HAL_RCCEx_PeriphCLKConfig+0x2944>)
3400bf4a:	429a      	cmp	r2, r3
3400bf4c:	d142      	bne.n	3400bfd4 <HAL_RCCEx_PeriphCLKConfig+0x2800>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400bf4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400bf54:	2b00      	cmp	r3, #0
3400bf56:	d016      	beq.n	3400bf86 <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400bf58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400bf5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bf62:	d010      	beq.n	3400bf86 <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400bf64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400bf6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bf6e:	d00a      	beq.n	3400bf86 <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400bf70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400bf76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bf7a:	d004      	beq.n	3400bf86 <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400bf7c:	f240 314f 	movw	r1, #847	@ 0x34f
3400bf80:	4868      	ldr	r0, [pc, #416]	@ (3400c124 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400bf82:	f7f5 fc4f 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400bf86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400bf8c:	2b00      	cmp	r3, #0
3400bf8e:	d005      	beq.n	3400bf9c <HAL_RCCEx_PeriphCLKConfig+0x27c8>
3400bf90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400bf96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bf9a:	d904      	bls.n	3400bfa6 <HAL_RCCEx_PeriphCLKConfig+0x27d2>
3400bf9c:	f44f 7154 	mov.w	r1, #848	@ 0x350
3400bfa0:	4860      	ldr	r0, [pc, #384]	@ (3400c124 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400bfa2:	f7f5 fc3f 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400bfa6:	4b60      	ldr	r3, [pc, #384]	@ (3400c128 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400bfa8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400bfac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bfb0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bfb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfb8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400bfba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400bfc0:	3b01      	subs	r3, #1
3400bfc2:	041b      	lsls	r3, r3, #16
3400bfc4:	4313      	orrs	r3, r2
3400bfc6:	4a58      	ldr	r2, [pc, #352]	@ (3400c128 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400bfc8:	430b      	orrs	r3, r1
3400bfca:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400bfce:	f7fd fa5f 	bl	34009490 <LL_RCC_IC15_Enable>
3400bfd2:	e008      	b.n	3400bfe6 <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
3400bfd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfd8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400bfdc:	4b4c      	ldr	r3, [pc, #304]	@ (3400c110 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3400bfde:	429a      	cmp	r2, r3
3400bfe0:	d101      	bne.n	3400bfe6 <HAL_RCCEx_PeriphCLKConfig+0x2812>
    {
      LL_RCC_CLKP_Enable();
3400bfe2:	f7fd fbd5 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
3400bfe6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400bfee:	4618      	mov	r0, r3
3400bff0:	f7fc faaa 	bl	34008548 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
3400bff4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bffc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
3400c000:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
3400c004:	2300      	movs	r3, #0
3400c006:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
3400c00a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3400c00e:	4603      	mov	r3, r0
3400c010:	460a      	mov	r2, r1
3400c012:	4313      	orrs	r3, r2
3400c014:	f000 80f0 	beq.w	3400c1f8 <HAL_RCCEx_PeriphCLKConfig+0x2a24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
3400c018:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c01c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c020:	4b42      	ldr	r3, [pc, #264]	@ (3400c12c <HAL_RCCEx_PeriphCLKConfig+0x2958>)
3400c022:	429a      	cmp	r2, r3
3400c024:	d027      	beq.n	3400c076 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c026:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c02a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c02e:	4b40      	ldr	r3, [pc, #256]	@ (3400c130 <HAL_RCCEx_PeriphCLKConfig+0x295c>)
3400c030:	429a      	cmp	r2, r3
3400c032:	d020      	beq.n	3400c076 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c034:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c038:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c03c:	4b3d      	ldr	r3, [pc, #244]	@ (3400c134 <HAL_RCCEx_PeriphCLKConfig+0x2960>)
3400c03e:	429a      	cmp	r2, r3
3400c040:	d019      	beq.n	3400c076 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c042:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c046:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c04a:	4b3b      	ldr	r3, [pc, #236]	@ (3400c138 <HAL_RCCEx_PeriphCLKConfig+0x2964>)
3400c04c:	429a      	cmp	r2, r3
3400c04e:	d012      	beq.n	3400c076 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c050:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c054:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c058:	4b38      	ldr	r3, [pc, #224]	@ (3400c13c <HAL_RCCEx_PeriphCLKConfig+0x2968>)
3400c05a:	429a      	cmp	r2, r3
3400c05c:	d00b      	beq.n	3400c076 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c05e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c062:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c066:	4b36      	ldr	r3, [pc, #216]	@ (3400c140 <HAL_RCCEx_PeriphCLKConfig+0x296c>)
3400c068:	429a      	cmp	r2, r3
3400c06a:	d004      	beq.n	3400c076 <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c06c:	f240 316a 	movw	r1, #874	@ 0x36a
3400c070:	482c      	ldr	r0, [pc, #176]	@ (3400c124 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c072:	f7f5 fbd7 	bl	34001824 <assert_failed>

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
3400c076:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c07a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c07e:	4b2d      	ldr	r3, [pc, #180]	@ (3400c134 <HAL_RCCEx_PeriphCLKConfig+0x2960>)
3400c080:	429a      	cmp	r2, r3
3400c082:	d15f      	bne.n	3400c144 <HAL_RCCEx_PeriphCLKConfig+0x2970>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c084:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c08a:	2b00      	cmp	r3, #0
3400c08c:	d016      	beq.n	3400c0bc <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c08e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c098:	d010      	beq.n	3400c0bc <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c09a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c09e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c0a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c0a4:	d00a      	beq.n	3400c0bc <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c0a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c0ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c0b0:	d004      	beq.n	3400c0bc <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c0b2:	f240 316f 	movw	r1, #879	@ 0x36f
3400c0b6:	481b      	ldr	r0, [pc, #108]	@ (3400c124 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c0b8:	f7f5 fbb4 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c0bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c0c2:	2b00      	cmp	r3, #0
3400c0c4:	d005      	beq.n	3400c0d2 <HAL_RCCEx_PeriphCLKConfig+0x28fe>
3400c0c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c0cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c0d0:	d904      	bls.n	3400c0dc <HAL_RCCEx_PeriphCLKConfig+0x2908>
3400c0d2:	f44f 715c 	mov.w	r1, #880	@ 0x370
3400c0d6:	4813      	ldr	r0, [pc, #76]	@ (3400c124 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c0d8:	f7f5 fba4 	bl	34001824 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c0dc:	4b12      	ldr	r3, [pc, #72]	@ (3400c128 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c0de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c0e2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c0e6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c0ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c0f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c0f6:	3b01      	subs	r3, #1
3400c0f8:	041b      	lsls	r3, r3, #16
3400c0fa:	4313      	orrs	r3, r2
3400c0fc:	4a0a      	ldr	r2, [pc, #40]	@ (3400c128 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c0fe:	430b      	orrs	r3, r1
3400c100:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c104:	f7fd f8c4 	bl	34009290 <LL_RCC_IC10_Enable>
3400c108:	e06f      	b.n	3400c1ea <HAL_RCCEx_PeriphCLKConfig+0x2a16>
3400c10a:	bf00      	nop
3400c10c:	0700000c 	.word	0x0700000c
3400c110:	0701000c 	.word	0x0701000c
3400c114:	0702000c 	.word	0x0702000c
3400c118:	0703000c 	.word	0x0703000c
3400c11c:	0704000c 	.word	0x0704000c
3400c120:	0705000c 	.word	0x0705000c
3400c124:	3401cebc 	.word	0x3401cebc
3400c128:	56028000 	.word	0x56028000
3400c12c:	0700040c 	.word	0x0700040c
3400c130:	0701040c 	.word	0x0701040c
3400c134:	0702040c 	.word	0x0702040c
3400c138:	0703040c 	.word	0x0703040c
3400c13c:	0704040c 	.word	0x0704040c
3400c140:	0705040c 	.word	0x0705040c
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3400c144:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c148:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c14c:	4b95      	ldr	r3, [pc, #596]	@ (3400c3a4 <HAL_RCCEx_PeriphCLKConfig+0x2bd0>)
3400c14e:	429a      	cmp	r2, r3
3400c150:	d142      	bne.n	3400c1d8 <HAL_RCCEx_PeriphCLKConfig+0x2a04>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c152:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c158:	2b00      	cmp	r3, #0
3400c15a:	d016      	beq.n	3400c18a <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c15c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c162:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c166:	d010      	beq.n	3400c18a <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c168:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c16c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c16e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c172:	d00a      	beq.n	3400c18a <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c174:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c17a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c17e:	d004      	beq.n	3400c18a <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c180:	f44f 715f 	mov.w	r1, #892	@ 0x37c
3400c184:	4888      	ldr	r0, [pc, #544]	@ (3400c3a8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c186:	f7f5 fb4d 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c18a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c18e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c190:	2b00      	cmp	r3, #0
3400c192:	d005      	beq.n	3400c1a0 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
3400c194:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c198:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c19a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c19e:	d904      	bls.n	3400c1aa <HAL_RCCEx_PeriphCLKConfig+0x29d6>
3400c1a0:	f240 317d 	movw	r1, #893	@ 0x37d
3400c1a4:	4880      	ldr	r0, [pc, #512]	@ (3400c3a8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c1a6:	f7f5 fb3d 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c1aa:	4b80      	ldr	r3, [pc, #512]	@ (3400c3ac <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c1ac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c1b0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c1b4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c1b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1bc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c1be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c1c4:	3b01      	subs	r3, #1
3400c1c6:	041b      	lsls	r3, r3, #16
3400c1c8:	4313      	orrs	r3, r2
3400c1ca:	4a78      	ldr	r2, [pc, #480]	@ (3400c3ac <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c1cc:	430b      	orrs	r3, r1
3400c1ce:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c1d2:	f7fd f95d 	bl	34009490 <LL_RCC_IC15_Enable>
3400c1d6:	e008      	b.n	3400c1ea <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
3400c1d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1dc:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c1e0:	4b73      	ldr	r3, [pc, #460]	@ (3400c3b0 <HAL_RCCEx_PeriphCLKConfig+0x2bdc>)
3400c1e2:	429a      	cmp	r2, r3
3400c1e4:	d101      	bne.n	3400c1ea <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    {
      LL_RCC_CLKP_Enable();
3400c1e6:	f7fd fad3 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
3400c1ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400c1f2:	4618      	mov	r0, r3
3400c1f4:	f7fc f9a8 	bl	34008548 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
3400c1f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c200:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3400c204:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
3400c208:	2300      	movs	r3, #0
3400c20a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
3400c20e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
3400c212:	4603      	mov	r3, r0
3400c214:	460a      	mov	r2, r1
3400c216:	4313      	orrs	r3, r2
3400c218:	f000 80e8 	beq.w	3400c3ec <HAL_RCCEx_PeriphCLKConfig+0x2c18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
3400c21c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c220:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c224:	4b63      	ldr	r3, [pc, #396]	@ (3400c3b4 <HAL_RCCEx_PeriphCLKConfig+0x2be0>)
3400c226:	429a      	cmp	r2, r3
3400c228:	d027      	beq.n	3400c27a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c22a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c22e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c232:	4b61      	ldr	r3, [pc, #388]	@ (3400c3b8 <HAL_RCCEx_PeriphCLKConfig+0x2be4>)
3400c234:	429a      	cmp	r2, r3
3400c236:	d020      	beq.n	3400c27a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c238:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c23c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c240:	4b5e      	ldr	r3, [pc, #376]	@ (3400c3bc <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
3400c242:	429a      	cmp	r2, r3
3400c244:	d019      	beq.n	3400c27a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c246:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c24a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c24e:	4b5c      	ldr	r3, [pc, #368]	@ (3400c3c0 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
3400c250:	429a      	cmp	r2, r3
3400c252:	d012      	beq.n	3400c27a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c254:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c258:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c25c:	4b59      	ldr	r3, [pc, #356]	@ (3400c3c4 <HAL_RCCEx_PeriphCLKConfig+0x2bf0>)
3400c25e:	429a      	cmp	r2, r3
3400c260:	d00b      	beq.n	3400c27a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c262:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c266:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c26a:	4b57      	ldr	r3, [pc, #348]	@ (3400c3c8 <HAL_RCCEx_PeriphCLKConfig+0x2bf4>)
3400c26c:	429a      	cmp	r2, r3
3400c26e:	d004      	beq.n	3400c27a <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c270:	f240 3197 	movw	r1, #919	@ 0x397
3400c274:	484c      	ldr	r0, [pc, #304]	@ (3400c3a8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c276:	f7f5 fad5 	bl	34001824 <assert_failed>

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
3400c27a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c27e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c282:	4b4e      	ldr	r3, [pc, #312]	@ (3400c3bc <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
3400c284:	429a      	cmp	r2, r3
3400c286:	d142      	bne.n	3400c30e <HAL_RCCEx_PeriphCLKConfig+0x2b3a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c288:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c28c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c28e:	2b00      	cmp	r3, #0
3400c290:	d016      	beq.n	3400c2c0 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c292:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c29c:	d010      	beq.n	3400c2c0 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c29e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c2a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c2a8:	d00a      	beq.n	3400c2c0 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c2aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c2b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c2b4:	d004      	beq.n	3400c2c0 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c2b6:	f44f 7167 	mov.w	r1, #924	@ 0x39c
3400c2ba:	483b      	ldr	r0, [pc, #236]	@ (3400c3a8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c2bc:	f7f5 fab2 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c2c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c2c6:	2b00      	cmp	r3, #0
3400c2c8:	d005      	beq.n	3400c2d6 <HAL_RCCEx_PeriphCLKConfig+0x2b02>
3400c2ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c2d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c2d4:	d904      	bls.n	3400c2e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0c>
3400c2d6:	f240 319d 	movw	r1, #925	@ 0x39d
3400c2da:	4833      	ldr	r0, [pc, #204]	@ (3400c3a8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c2dc:	f7f5 faa2 	bl	34001824 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c2e0:	4b32      	ldr	r3, [pc, #200]	@ (3400c3ac <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c2e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c2e6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c2ea:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c2ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c2f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c2fa:	3b01      	subs	r3, #1
3400c2fc:	041b      	lsls	r3, r3, #16
3400c2fe:	4313      	orrs	r3, r2
3400c300:	4a2a      	ldr	r2, [pc, #168]	@ (3400c3ac <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c302:	430b      	orrs	r3, r1
3400c304:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c308:	f7fc ffc2 	bl	34009290 <LL_RCC_IC10_Enable>
3400c30c:	e067      	b.n	3400c3de <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
3400c30e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c312:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c316:	4b2a      	ldr	r3, [pc, #168]	@ (3400c3c0 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
3400c318:	429a      	cmp	r2, r3
3400c31a:	d157      	bne.n	3400c3cc <HAL_RCCEx_PeriphCLKConfig+0x2bf8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c31c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c322:	2b00      	cmp	r3, #0
3400c324:	d016      	beq.n	3400c354 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c326:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c32a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c32c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c330:	d010      	beq.n	3400c354 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c332:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c336:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c33c:	d00a      	beq.n	3400c354 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c33e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c344:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c348:	d004      	beq.n	3400c354 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c34a:	f240 31a9 	movw	r1, #937	@ 0x3a9
3400c34e:	4816      	ldr	r0, [pc, #88]	@ (3400c3a8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c350:	f7f5 fa68 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c354:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c35a:	2b00      	cmp	r3, #0
3400c35c:	d005      	beq.n	3400c36a <HAL_RCCEx_PeriphCLKConfig+0x2b96>
3400c35e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c368:	d904      	bls.n	3400c374 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>
3400c36a:	f240 31aa 	movw	r1, #938	@ 0x3aa
3400c36e:	480e      	ldr	r0, [pc, #56]	@ (3400c3a8 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c370:	f7f5 fa58 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c374:	4b0d      	ldr	r3, [pc, #52]	@ (3400c3ac <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c376:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c37a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c37e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c382:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c386:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c388:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c38c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c38e:	3b01      	subs	r3, #1
3400c390:	041b      	lsls	r3, r3, #16
3400c392:	4313      	orrs	r3, r2
3400c394:	4a05      	ldr	r2, [pc, #20]	@ (3400c3ac <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c396:	430b      	orrs	r3, r1
3400c398:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c39c:	f7fd f878 	bl	34009490 <LL_RCC_IC15_Enable>
3400c3a0:	e01d      	b.n	3400c3de <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
3400c3a2:	bf00      	nop
3400c3a4:	0703040c 	.word	0x0703040c
3400c3a8:	3401cebc 	.word	0x3401cebc
3400c3ac:	56028000 	.word	0x56028000
3400c3b0:	0701040c 	.word	0x0701040c
3400c3b4:	0700080c 	.word	0x0700080c
3400c3b8:	0701080c 	.word	0x0701080c
3400c3bc:	0702080c 	.word	0x0702080c
3400c3c0:	0703080c 	.word	0x0703080c
3400c3c4:	0704080c 	.word	0x0704080c
3400c3c8:	0705080c 	.word	0x0705080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
3400c3cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c3d4:	4b70      	ldr	r3, [pc, #448]	@ (3400c598 <HAL_RCCEx_PeriphCLKConfig+0x2dc4>)
3400c3d6:	429a      	cmp	r2, r3
3400c3d8:	d101      	bne.n	3400c3de <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    {
      LL_RCC_CLKP_Enable();
3400c3da:	f7fd f9d9 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
3400c3de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400c3e6:	4618      	mov	r0, r3
3400c3e8:	f7fc f8ae 	bl	34008548 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
3400c3ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c3f4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
3400c3f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
3400c3fc:	2300      	movs	r3, #0
3400c3fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
3400c402:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
3400c406:	4603      	mov	r3, r0
3400c408:	460a      	mov	r2, r1
3400c40a:	4313      	orrs	r3, r2
3400c40c:	f000 80e6 	beq.w	3400c5dc <HAL_RCCEx_PeriphCLKConfig+0x2e08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
3400c410:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c414:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c418:	4b60      	ldr	r3, [pc, #384]	@ (3400c59c <HAL_RCCEx_PeriphCLKConfig+0x2dc8>)
3400c41a:	429a      	cmp	r2, r3
3400c41c:	d027      	beq.n	3400c46e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c41e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c422:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c426:	4b5e      	ldr	r3, [pc, #376]	@ (3400c5a0 <HAL_RCCEx_PeriphCLKConfig+0x2dcc>)
3400c428:	429a      	cmp	r2, r3
3400c42a:	d020      	beq.n	3400c46e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c42c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c430:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c434:	4b5b      	ldr	r3, [pc, #364]	@ (3400c5a4 <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
3400c436:	429a      	cmp	r2, r3
3400c438:	d019      	beq.n	3400c46e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c43a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c43e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c442:	4b59      	ldr	r3, [pc, #356]	@ (3400c5a8 <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
3400c444:	429a      	cmp	r2, r3
3400c446:	d012      	beq.n	3400c46e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c448:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c44c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c450:	4b56      	ldr	r3, [pc, #344]	@ (3400c5ac <HAL_RCCEx_PeriphCLKConfig+0x2dd8>)
3400c452:	429a      	cmp	r2, r3
3400c454:	d00b      	beq.n	3400c46e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c456:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c45a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c45e:	4b54      	ldr	r3, [pc, #336]	@ (3400c5b0 <HAL_RCCEx_PeriphCLKConfig+0x2ddc>)
3400c460:	429a      	cmp	r2, r3
3400c462:	d004      	beq.n	3400c46e <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c464:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
3400c468:	4852      	ldr	r0, [pc, #328]	@ (3400c5b4 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c46a:	f7f5 f9db 	bl	34001824 <assert_failed>

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
3400c46e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c472:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c476:	4b4b      	ldr	r3, [pc, #300]	@ (3400c5a4 <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
3400c478:	429a      	cmp	r2, r3
3400c47a:	d142      	bne.n	3400c502 <HAL_RCCEx_PeriphCLKConfig+0x2d2e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c47c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c482:	2b00      	cmp	r3, #0
3400c484:	d016      	beq.n	3400c4b4 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c486:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c48a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c48c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c490:	d010      	beq.n	3400c4b4 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c492:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c49c:	d00a      	beq.n	3400c4b4 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c49e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c4a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c4a8:	d004      	beq.n	3400c4b4 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c4aa:	f240 31c9 	movw	r1, #969	@ 0x3c9
3400c4ae:	4841      	ldr	r0, [pc, #260]	@ (3400c5b4 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c4b0:	f7f5 f9b8 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c4b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c4ba:	2b00      	cmp	r3, #0
3400c4bc:	d005      	beq.n	3400c4ca <HAL_RCCEx_PeriphCLKConfig+0x2cf6>
3400c4be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c4c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c4c8:	d904      	bls.n	3400c4d4 <HAL_RCCEx_PeriphCLKConfig+0x2d00>
3400c4ca:	f240 31ca 	movw	r1, #970	@ 0x3ca
3400c4ce:	4839      	ldr	r0, [pc, #228]	@ (3400c5b4 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c4d0:	f7f5 f9a8 	bl	34001824 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c4d4:	4b38      	ldr	r3, [pc, #224]	@ (3400c5b8 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c4d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c4da:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c4de:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c4e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c4e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c4ee:	3b01      	subs	r3, #1
3400c4f0:	041b      	lsls	r3, r3, #16
3400c4f2:	4313      	orrs	r3, r2
3400c4f4:	4a30      	ldr	r2, [pc, #192]	@ (3400c5b8 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c4f6:	430b      	orrs	r3, r1
3400c4f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c4fc:	f7fc fec8 	bl	34009290 <LL_RCC_IC10_Enable>
3400c500:	e065      	b.n	3400c5ce <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3400c502:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c506:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c50a:	4b27      	ldr	r3, [pc, #156]	@ (3400c5a8 <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
3400c50c:	429a      	cmp	r2, r3
3400c50e:	d155      	bne.n	3400c5bc <HAL_RCCEx_PeriphCLKConfig+0x2de8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c510:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c516:	2b00      	cmp	r3, #0
3400c518:	d016      	beq.n	3400c548 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c51a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c51e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c524:	d010      	beq.n	3400c548 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c526:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c52a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c52c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c530:	d00a      	beq.n	3400c548 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c532:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c536:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c538:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c53c:	d004      	beq.n	3400c548 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c53e:	f240 31d6 	movw	r1, #982	@ 0x3d6
3400c542:	481c      	ldr	r0, [pc, #112]	@ (3400c5b4 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c544:	f7f5 f96e 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c548:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c54c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c54e:	2b00      	cmp	r3, #0
3400c550:	d005      	beq.n	3400c55e <HAL_RCCEx_PeriphCLKConfig+0x2d8a>
3400c552:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c556:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c55c:	d904      	bls.n	3400c568 <HAL_RCCEx_PeriphCLKConfig+0x2d94>
3400c55e:	f240 31d7 	movw	r1, #983	@ 0x3d7
3400c562:	4814      	ldr	r0, [pc, #80]	@ (3400c5b4 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c564:	f7f5 f95e 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c568:	4b13      	ldr	r3, [pc, #76]	@ (3400c5b8 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c56a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c56e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c572:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c576:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c57a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c57c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c582:	3b01      	subs	r3, #1
3400c584:	041b      	lsls	r3, r3, #16
3400c586:	4313      	orrs	r3, r2
3400c588:	4a0b      	ldr	r2, [pc, #44]	@ (3400c5b8 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c58a:	430b      	orrs	r3, r1
3400c58c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c590:	f7fc ff7e 	bl	34009490 <LL_RCC_IC15_Enable>
3400c594:	e01b      	b.n	3400c5ce <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
3400c596:	bf00      	nop
3400c598:	0701080c 	.word	0x0701080c
3400c59c:	07000c0c 	.word	0x07000c0c
3400c5a0:	07010c0c 	.word	0x07010c0c
3400c5a4:	07020c0c 	.word	0x07020c0c
3400c5a8:	07030c0c 	.word	0x07030c0c
3400c5ac:	07040c0c 	.word	0x07040c0c
3400c5b0:	07050c0c 	.word	0x07050c0c
3400c5b4:	3401cebc 	.word	0x3401cebc
3400c5b8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3400c5bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5c0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c5c4:	4b70      	ldr	r3, [pc, #448]	@ (3400c788 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
3400c5c6:	429a      	cmp	r2, r3
3400c5c8:	d101      	bne.n	3400c5ce <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    {
      LL_RCC_CLKP_Enable();
3400c5ca:	f7fd f8e1 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
3400c5ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400c5d6:	4618      	mov	r0, r3
3400c5d8:	f7fb ffb6 	bl	34008548 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
3400c5dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c5e4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
3400c5e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
3400c5ec:	2300      	movs	r3, #0
3400c5ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
3400c5f2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
3400c5f6:	4603      	mov	r3, r0
3400c5f8:	460a      	mov	r2, r1
3400c5fa:	4313      	orrs	r3, r2
3400c5fc:	f000 80e6 	beq.w	3400c7cc <HAL_RCCEx_PeriphCLKConfig+0x2ff8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
3400c600:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c604:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c608:	4b60      	ldr	r3, [pc, #384]	@ (3400c78c <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
3400c60a:	429a      	cmp	r2, r3
3400c60c:	d027      	beq.n	3400c65e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c60e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c612:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c616:	4b5e      	ldr	r3, [pc, #376]	@ (3400c790 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
3400c618:	429a      	cmp	r2, r3
3400c61a:	d020      	beq.n	3400c65e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c61c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c620:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c624:	4b5b      	ldr	r3, [pc, #364]	@ (3400c794 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400c626:	429a      	cmp	r2, r3
3400c628:	d019      	beq.n	3400c65e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c62a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c62e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c632:	4b59      	ldr	r3, [pc, #356]	@ (3400c798 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400c634:	429a      	cmp	r2, r3
3400c636:	d012      	beq.n	3400c65e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c638:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c63c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c640:	4b56      	ldr	r3, [pc, #344]	@ (3400c79c <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
3400c642:	429a      	cmp	r2, r3
3400c644:	d00b      	beq.n	3400c65e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c646:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c64a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c64e:	4b54      	ldr	r3, [pc, #336]	@ (3400c7a0 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
3400c650:	429a      	cmp	r2, r3
3400c652:	d004      	beq.n	3400c65e <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c654:	f240 31f1 	movw	r1, #1009	@ 0x3f1
3400c658:	4852      	ldr	r0, [pc, #328]	@ (3400c7a4 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c65a:	f7f5 f8e3 	bl	34001824 <assert_failed>

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
3400c65e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c662:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c666:	4b4b      	ldr	r3, [pc, #300]	@ (3400c794 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400c668:	429a      	cmp	r2, r3
3400c66a:	d142      	bne.n	3400c6f2 <HAL_RCCEx_PeriphCLKConfig+0x2f1e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c66c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c672:	2b00      	cmp	r3, #0
3400c674:	d016      	beq.n	3400c6a4 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c676:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c67a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c67c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c680:	d010      	beq.n	3400c6a4 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c682:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c68c:	d00a      	beq.n	3400c6a4 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c68e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c694:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c698:	d004      	beq.n	3400c6a4 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c69a:	f240 31f6 	movw	r1, #1014	@ 0x3f6
3400c69e:	4841      	ldr	r0, [pc, #260]	@ (3400c7a4 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c6a0:	f7f5 f8c0 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c6a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c6aa:	2b00      	cmp	r3, #0
3400c6ac:	d005      	beq.n	3400c6ba <HAL_RCCEx_PeriphCLKConfig+0x2ee6>
3400c6ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c6b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c6b8:	d904      	bls.n	3400c6c4 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
3400c6ba:	f240 31f7 	movw	r1, #1015	@ 0x3f7
3400c6be:	4839      	ldr	r0, [pc, #228]	@ (3400c7a4 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c6c0:	f7f5 f8b0 	bl	34001824 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c6c4:	4b38      	ldr	r3, [pc, #224]	@ (3400c7a8 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c6c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c6ca:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c6ce:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c6d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c6d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c6de:	3b01      	subs	r3, #1
3400c6e0:	041b      	lsls	r3, r3, #16
3400c6e2:	4313      	orrs	r3, r2
3400c6e4:	4a30      	ldr	r2, [pc, #192]	@ (3400c7a8 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c6e6:	430b      	orrs	r3, r1
3400c6e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c6ec:	f7fc fdd0 	bl	34009290 <LL_RCC_IC10_Enable>
3400c6f0:	e065      	b.n	3400c7be <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3400c6f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6f6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c6fa:	4b27      	ldr	r3, [pc, #156]	@ (3400c798 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400c6fc:	429a      	cmp	r2, r3
3400c6fe:	d155      	bne.n	3400c7ac <HAL_RCCEx_PeriphCLKConfig+0x2fd8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c700:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c706:	2b00      	cmp	r3, #0
3400c708:	d016      	beq.n	3400c738 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c70a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c70e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c714:	d010      	beq.n	3400c738 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c716:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c71a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c71c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c720:	d00a      	beq.n	3400c738 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c722:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c726:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c728:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c72c:	d004      	beq.n	3400c738 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c72e:	f240 4103 	movw	r1, #1027	@ 0x403
3400c732:	481c      	ldr	r0, [pc, #112]	@ (3400c7a4 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c734:	f7f5 f876 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c738:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c73c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c73e:	2b00      	cmp	r3, #0
3400c740:	d005      	beq.n	3400c74e <HAL_RCCEx_PeriphCLKConfig+0x2f7a>
3400c742:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c74c:	d904      	bls.n	3400c758 <HAL_RCCEx_PeriphCLKConfig+0x2f84>
3400c74e:	f240 4104 	movw	r1, #1028	@ 0x404
3400c752:	4814      	ldr	r0, [pc, #80]	@ (3400c7a4 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c754:	f7f5 f866 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c758:	4b13      	ldr	r3, [pc, #76]	@ (3400c7a8 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c75a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c75e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c762:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c766:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c76a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c76c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c772:	3b01      	subs	r3, #1
3400c774:	041b      	lsls	r3, r3, #16
3400c776:	4313      	orrs	r3, r2
3400c778:	4a0b      	ldr	r2, [pc, #44]	@ (3400c7a8 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c77a:	430b      	orrs	r3, r1
3400c77c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c780:	f7fc fe86 	bl	34009490 <LL_RCC_IC15_Enable>
3400c784:	e01b      	b.n	3400c7be <HAL_RCCEx_PeriphCLKConfig+0x2fea>
3400c786:	bf00      	nop
3400c788:	07010c0c 	.word	0x07010c0c
3400c78c:	0700100c 	.word	0x0700100c
3400c790:	0701100c 	.word	0x0701100c
3400c794:	0702100c 	.word	0x0702100c
3400c798:	0703100c 	.word	0x0703100c
3400c79c:	0704100c 	.word	0x0704100c
3400c7a0:	0705100c 	.word	0x0705100c
3400c7a4:	3401cebc 	.word	0x3401cebc
3400c7a8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
3400c7ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7b0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c7b4:	4b70      	ldr	r3, [pc, #448]	@ (3400c978 <HAL_RCCEx_PeriphCLKConfig+0x31a4>)
3400c7b6:	429a      	cmp	r2, r3
3400c7b8:	d101      	bne.n	3400c7be <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    {
      LL_RCC_CLKP_Enable();
3400c7ba:	f7fc ffe9 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
3400c7be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7c2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400c7c6:	4618      	mov	r0, r3
3400c7c8:	f7fb fec9 	bl	3400855e <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
3400c7cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c7d4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
3400c7d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
3400c7dc:	2300      	movs	r3, #0
3400c7de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
3400c7e2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
3400c7e6:	4603      	mov	r3, r0
3400c7e8:	460a      	mov	r2, r1
3400c7ea:	4313      	orrs	r3, r2
3400c7ec:	f000 80e6 	beq.w	3400c9bc <HAL_RCCEx_PeriphCLKConfig+0x31e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
3400c7f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7f4:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c7f8:	4b60      	ldr	r3, [pc, #384]	@ (3400c97c <HAL_RCCEx_PeriphCLKConfig+0x31a8>)
3400c7fa:	429a      	cmp	r2, r3
3400c7fc:	d027      	beq.n	3400c84e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c7fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c802:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c806:	4b5e      	ldr	r3, [pc, #376]	@ (3400c980 <HAL_RCCEx_PeriphCLKConfig+0x31ac>)
3400c808:	429a      	cmp	r2, r3
3400c80a:	d020      	beq.n	3400c84e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c80c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c810:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c814:	4b5b      	ldr	r3, [pc, #364]	@ (3400c984 <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3400c816:	429a      	cmp	r2, r3
3400c818:	d019      	beq.n	3400c84e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c81a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c81e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c822:	4b59      	ldr	r3, [pc, #356]	@ (3400c988 <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3400c824:	429a      	cmp	r2, r3
3400c826:	d012      	beq.n	3400c84e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c828:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c82c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c830:	4b56      	ldr	r3, [pc, #344]	@ (3400c98c <HAL_RCCEx_PeriphCLKConfig+0x31b8>)
3400c832:	429a      	cmp	r2, r3
3400c834:	d00b      	beq.n	3400c84e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c836:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c83a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c83e:	4b54      	ldr	r3, [pc, #336]	@ (3400c990 <HAL_RCCEx_PeriphCLKConfig+0x31bc>)
3400c840:	429a      	cmp	r2, r3
3400c842:	d004      	beq.n	3400c84e <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c844:	f240 411e 	movw	r1, #1054	@ 0x41e
3400c848:	4852      	ldr	r0, [pc, #328]	@ (3400c994 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400c84a:	f7f4 ffeb 	bl	34001824 <assert_failed>

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
3400c84e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c852:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c856:	4b4b      	ldr	r3, [pc, #300]	@ (3400c984 <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3400c858:	429a      	cmp	r2, r3
3400c85a:	d142      	bne.n	3400c8e2 <HAL_RCCEx_PeriphCLKConfig+0x310e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c85c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c862:	2b00      	cmp	r3, #0
3400c864:	d016      	beq.n	3400c894 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400c866:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c86a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c86c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c870:	d010      	beq.n	3400c894 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400c872:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c87c:	d00a      	beq.n	3400c894 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400c87e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c884:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c888:	d004      	beq.n	3400c894 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400c88a:	f240 4123 	movw	r1, #1059	@ 0x423
3400c88e:	4841      	ldr	r0, [pc, #260]	@ (3400c994 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400c890:	f7f4 ffc8 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c894:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c89a:	2b00      	cmp	r3, #0
3400c89c:	d005      	beq.n	3400c8aa <HAL_RCCEx_PeriphCLKConfig+0x30d6>
3400c89e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c8a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c8a8:	d904      	bls.n	3400c8b4 <HAL_RCCEx_PeriphCLKConfig+0x30e0>
3400c8aa:	f240 4124 	movw	r1, #1060	@ 0x424
3400c8ae:	4839      	ldr	r0, [pc, #228]	@ (3400c994 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400c8b0:	f7f4 ffb8 	bl	34001824 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c8b4:	4b38      	ldr	r3, [pc, #224]	@ (3400c998 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400c8b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c8ba:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c8be:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c8c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c8c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c8ce:	3b01      	subs	r3, #1
3400c8d0:	041b      	lsls	r3, r3, #16
3400c8d2:	4313      	orrs	r3, r2
3400c8d4:	4a30      	ldr	r2, [pc, #192]	@ (3400c998 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400c8d6:	430b      	orrs	r3, r1
3400c8d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c8dc:	f7fc fcd8 	bl	34009290 <LL_RCC_IC10_Enable>
3400c8e0:	e065      	b.n	3400c9ae <HAL_RCCEx_PeriphCLKConfig+0x31da>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
3400c8e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8e6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c8ea:	4b27      	ldr	r3, [pc, #156]	@ (3400c988 <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3400c8ec:	429a      	cmp	r2, r3
3400c8ee:	d155      	bne.n	3400c99c <HAL_RCCEx_PeriphCLKConfig+0x31c8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c8f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c8f6:	2b00      	cmp	r3, #0
3400c8f8:	d016      	beq.n	3400c928 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400c8fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c900:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c904:	d010      	beq.n	3400c928 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400c906:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c90a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c90c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c910:	d00a      	beq.n	3400c928 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400c912:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c918:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c91c:	d004      	beq.n	3400c928 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400c91e:	f44f 6186 	mov.w	r1, #1072	@ 0x430
3400c922:	481c      	ldr	r0, [pc, #112]	@ (3400c994 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400c924:	f7f4 ff7e 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c928:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c92c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c92e:	2b00      	cmp	r3, #0
3400c930:	d005      	beq.n	3400c93e <HAL_RCCEx_PeriphCLKConfig+0x316a>
3400c932:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c93c:	d904      	bls.n	3400c948 <HAL_RCCEx_PeriphCLKConfig+0x3174>
3400c93e:	f240 4131 	movw	r1, #1073	@ 0x431
3400c942:	4814      	ldr	r0, [pc, #80]	@ (3400c994 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400c944:	f7f4 ff6e 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c948:	4b13      	ldr	r3, [pc, #76]	@ (3400c998 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400c94a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c94e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c952:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c956:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c95a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c95c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c962:	3b01      	subs	r3, #1
3400c964:	041b      	lsls	r3, r3, #16
3400c966:	4313      	orrs	r3, r2
3400c968:	4a0b      	ldr	r2, [pc, #44]	@ (3400c998 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400c96a:	430b      	orrs	r3, r1
3400c96c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c970:	f7fc fd8e 	bl	34009490 <LL_RCC_IC15_Enable>
3400c974:	e01b      	b.n	3400c9ae <HAL_RCCEx_PeriphCLKConfig+0x31da>
3400c976:	bf00      	nop
3400c978:	0701100c 	.word	0x0701100c
3400c97c:	0700140c 	.word	0x0700140c
3400c980:	0701140c 	.word	0x0701140c
3400c984:	0702140c 	.word	0x0702140c
3400c988:	0703140c 	.word	0x0703140c
3400c98c:	0704140c 	.word	0x0704140c
3400c990:	0705140c 	.word	0x0705140c
3400c994:	3401cebc 	.word	0x3401cebc
3400c998:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
3400c99c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9a0:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c9a4:	4b98      	ldr	r3, [pc, #608]	@ (3400cc08 <HAL_RCCEx_PeriphCLKConfig+0x3434>)
3400c9a6:	429a      	cmp	r2, r3
3400c9a8:	d101      	bne.n	3400c9ae <HAL_RCCEx_PeriphCLKConfig+0x31da>
    {
      LL_RCC_CLKP_Enable();
3400c9aa:	f7fc fef1 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
3400c9ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c9b6:	4618      	mov	r0, r3
3400c9b8:	f7fb fdd1 	bl	3400855e <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
3400c9bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c9c4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3400c9c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
3400c9cc:	2300      	movs	r3, #0
3400c9ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
3400c9d2:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
3400c9d6:	4603      	mov	r3, r0
3400c9d8:	460a      	mov	r2, r1
3400c9da:	4313      	orrs	r3, r2
3400c9dc:	f000 8089 	beq.w	3400caf2 <HAL_RCCEx_PeriphCLKConfig+0x331e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
3400c9e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400c9e8:	4b88      	ldr	r3, [pc, #544]	@ (3400cc0c <HAL_RCCEx_PeriphCLKConfig+0x3438>)
3400c9ea:	429a      	cmp	r2, r3
3400c9ec:	d027      	beq.n	3400ca3e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400c9ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400c9f6:	4b86      	ldr	r3, [pc, #536]	@ (3400cc10 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
3400c9f8:	429a      	cmp	r2, r3
3400c9fa:	d020      	beq.n	3400ca3e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400c9fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca00:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ca04:	4b83      	ldr	r3, [pc, #524]	@ (3400cc14 <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3400ca06:	429a      	cmp	r2, r3
3400ca08:	d019      	beq.n	3400ca3e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400ca0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca0e:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ca12:	4b81      	ldr	r3, [pc, #516]	@ (3400cc18 <HAL_RCCEx_PeriphCLKConfig+0x3444>)
3400ca14:	429a      	cmp	r2, r3
3400ca16:	d012      	beq.n	3400ca3e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400ca18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ca20:	4b7e      	ldr	r3, [pc, #504]	@ (3400cc1c <HAL_RCCEx_PeriphCLKConfig+0x3448>)
3400ca22:	429a      	cmp	r2, r3
3400ca24:	d00b      	beq.n	3400ca3e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400ca26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca2a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ca2e:	4b7c      	ldr	r3, [pc, #496]	@ (3400cc20 <HAL_RCCEx_PeriphCLKConfig+0x344c>)
3400ca30:	429a      	cmp	r2, r3
3400ca32:	d004      	beq.n	3400ca3e <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400ca34:	f240 414b 	movw	r1, #1099	@ 0x44b
3400ca38:	487a      	ldr	r0, [pc, #488]	@ (3400cc24 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400ca3a:	f7f4 fef3 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
3400ca3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca42:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ca46:	4b73      	ldr	r3, [pc, #460]	@ (3400cc14 <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3400ca48:	429a      	cmp	r2, r3
3400ca4a:	d142      	bne.n	3400cad2 <HAL_RCCEx_PeriphCLKConfig+0x32fe>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400ca4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ca52:	2b00      	cmp	r3, #0
3400ca54:	d016      	beq.n	3400ca84 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400ca56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ca5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ca60:	d010      	beq.n	3400ca84 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400ca62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ca68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ca6c:	d00a      	beq.n	3400ca84 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400ca6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ca74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ca78:	d004      	beq.n	3400ca84 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400ca7a:	f44f 618a 	mov.w	r1, #1104	@ 0x450
3400ca7e:	4869      	ldr	r0, [pc, #420]	@ (3400cc24 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400ca80:	f7f4 fed0 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400ca84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ca8a:	2b00      	cmp	r3, #0
3400ca8c:	d005      	beq.n	3400ca9a <HAL_RCCEx_PeriphCLKConfig+0x32c6>
3400ca8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ca94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ca98:	d904      	bls.n	3400caa4 <HAL_RCCEx_PeriphCLKConfig+0x32d0>
3400ca9a:	f240 4151 	movw	r1, #1105	@ 0x451
3400ca9e:	4861      	ldr	r0, [pc, #388]	@ (3400cc24 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400caa0:	f7f4 fec0 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400caa4:	4b60      	ldr	r3, [pc, #384]	@ (3400cc28 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400caa6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400caaa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400caae:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cab2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cab6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400cab8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cabc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cabe:	3b01      	subs	r3, #1
3400cac0:	041b      	lsls	r3, r3, #16
3400cac2:	4313      	orrs	r3, r2
3400cac4:	4a58      	ldr	r2, [pc, #352]	@ (3400cc28 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400cac6:	430b      	orrs	r3, r1
3400cac8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400cacc:	f7fc fce0 	bl	34009490 <LL_RCC_IC15_Enable>
3400cad0:	e008      	b.n	3400cae4 <HAL_RCCEx_PeriphCLKConfig+0x3310>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
3400cad2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cad6:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cada:	4b4d      	ldr	r3, [pc, #308]	@ (3400cc10 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
3400cadc:	429a      	cmp	r2, r3
3400cade:	d101      	bne.n	3400cae4 <HAL_RCCEx_PeriphCLKConfig+0x3310>
    {
      LL_RCC_CLKP_Enable();
3400cae0:	f7fc fe56 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
3400cae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cae8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400caec:	4618      	mov	r0, r3
3400caee:	f7fb fd41 	bl	34008574 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3400caf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400caf6:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cafa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
3400cafe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
3400cb02:	2300      	movs	r3, #0
3400cb04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
3400cb08:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
3400cb0c:	4603      	mov	r3, r0
3400cb0e:	460a      	mov	r2, r1
3400cb10:	4313      	orrs	r3, r2
3400cb12:	f000 80a7 	beq.w	3400cc64 <HAL_RCCEx_PeriphCLKConfig+0x3490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
3400cb16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cb1e:	4b43      	ldr	r3, [pc, #268]	@ (3400cc2c <HAL_RCCEx_PeriphCLKConfig+0x3458>)
3400cb20:	429a      	cmp	r2, r3
3400cb22:	d027      	beq.n	3400cb74 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cb24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb28:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cb2c:	4b40      	ldr	r3, [pc, #256]	@ (3400cc30 <HAL_RCCEx_PeriphCLKConfig+0x345c>)
3400cb2e:	429a      	cmp	r2, r3
3400cb30:	d020      	beq.n	3400cb74 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cb32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb36:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cb3a:	4b3e      	ldr	r3, [pc, #248]	@ (3400cc34 <HAL_RCCEx_PeriphCLKConfig+0x3460>)
3400cb3c:	429a      	cmp	r2, r3
3400cb3e:	d019      	beq.n	3400cb74 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cb40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb44:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cb48:	4b3b      	ldr	r3, [pc, #236]	@ (3400cc38 <HAL_RCCEx_PeriphCLKConfig+0x3464>)
3400cb4a:	429a      	cmp	r2, r3
3400cb4c:	d012      	beq.n	3400cb74 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cb4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb52:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cb56:	4b39      	ldr	r3, [pc, #228]	@ (3400cc3c <HAL_RCCEx_PeriphCLKConfig+0x3468>)
3400cb58:	429a      	cmp	r2, r3
3400cb5a:	d00b      	beq.n	3400cb74 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cb5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb60:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cb64:	4b36      	ldr	r3, [pc, #216]	@ (3400cc40 <HAL_RCCEx_PeriphCLKConfig+0x346c>)
3400cb66:	429a      	cmp	r2, r3
3400cb68:	d004      	beq.n	3400cb74 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cb6a:	f240 416b 	movw	r1, #1131	@ 0x46b
3400cb6e:	482d      	ldr	r0, [pc, #180]	@ (3400cc24 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cb70:	f7f4 fe58 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
3400cb74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb78:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cb7c:	4b2d      	ldr	r3, [pc, #180]	@ (3400cc34 <HAL_RCCEx_PeriphCLKConfig+0x3460>)
3400cb7e:	429a      	cmp	r2, r3
3400cb80:	d160      	bne.n	3400cc44 <HAL_RCCEx_PeriphCLKConfig+0x3470>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cb82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb88:	2b00      	cmp	r3, #0
3400cb8a:	d016      	beq.n	3400cbba <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cb8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cb96:	d010      	beq.n	3400cbba <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cb98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cba2:	d00a      	beq.n	3400cbba <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cba4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cbaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cbae:	d004      	beq.n	3400cbba <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cbb0:	f44f 618e 	mov.w	r1, #1136	@ 0x470
3400cbb4:	481b      	ldr	r0, [pc, #108]	@ (3400cc24 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cbb6:	f7f4 fe35 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cbba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cbc0:	2b00      	cmp	r3, #0
3400cbc2:	d005      	beq.n	3400cbd0 <HAL_RCCEx_PeriphCLKConfig+0x33fc>
3400cbc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cbca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cbce:	d904      	bls.n	3400cbda <HAL_RCCEx_PeriphCLKConfig+0x3406>
3400cbd0:	f240 4171 	movw	r1, #1137	@ 0x471
3400cbd4:	4813      	ldr	r0, [pc, #76]	@ (3400cc24 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cbd6:	f7f4 fe25 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cbda:	4b13      	ldr	r3, [pc, #76]	@ (3400cc28 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400cbdc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cbe0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cbe4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cbe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbec:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400cbee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cbf4:	3b01      	subs	r3, #1
3400cbf6:	041b      	lsls	r3, r3, #16
3400cbf8:	4313      	orrs	r3, r2
3400cbfa:	4a0b      	ldr	r2, [pc, #44]	@ (3400cc28 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400cbfc:	430b      	orrs	r3, r1
3400cbfe:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400cc02:	f7fc fc45 	bl	34009490 <LL_RCC_IC15_Enable>
3400cc06:	e026      	b.n	3400cc56 <HAL_RCCEx_PeriphCLKConfig+0x3482>
3400cc08:	0701140c 	.word	0x0701140c
3400cc0c:	0700082c 	.word	0x0700082c
3400cc10:	0701082c 	.word	0x0701082c
3400cc14:	0702082c 	.word	0x0702082c
3400cc18:	0703082c 	.word	0x0703082c
3400cc1c:	0704082c 	.word	0x0704082c
3400cc20:	0705082c 	.word	0x0705082c
3400cc24:	3401cebc 	.word	0x3401cebc
3400cc28:	56028000 	.word	0x56028000
3400cc2c:	07000c2c 	.word	0x07000c2c
3400cc30:	07010c2c 	.word	0x07010c2c
3400cc34:	07020c2c 	.word	0x07020c2c
3400cc38:	07030c2c 	.word	0x07030c2c
3400cc3c:	07040c2c 	.word	0x07040c2c
3400cc40:	07050c2c 	.word	0x07050c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3400cc44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc48:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cc4c:	4b98      	ldr	r3, [pc, #608]	@ (3400ceb0 <HAL_RCCEx_PeriphCLKConfig+0x36dc>)
3400cc4e:	429a      	cmp	r2, r3
3400cc50:	d101      	bne.n	3400cc56 <HAL_RCCEx_PeriphCLKConfig+0x3482>
    {
      LL_RCC_CLKP_Enable();
3400cc52:	f7fc fd9d 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
3400cc56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc5a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400cc5e:	4618      	mov	r0, r3
3400cc60:	f7fb fc88 	bl	34008574 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
3400cc64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cc6c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
3400cc70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
3400cc74:	2300      	movs	r3, #0
3400cc76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
3400cc7a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
3400cc7e:	4603      	mov	r3, r0
3400cc80:	460a      	mov	r2, r1
3400cc82:	4313      	orrs	r3, r2
3400cc84:	f000 8089 	beq.w	3400cd9a <HAL_RCCEx_PeriphCLKConfig+0x35c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
3400cc88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc8c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cc90:	4b88      	ldr	r3, [pc, #544]	@ (3400ceb4 <HAL_RCCEx_PeriphCLKConfig+0x36e0>)
3400cc92:	429a      	cmp	r2, r3
3400cc94:	d027      	beq.n	3400cce6 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400cc96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc9a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cc9e:	4b86      	ldr	r3, [pc, #536]	@ (3400ceb8 <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
3400cca0:	429a      	cmp	r2, r3
3400cca2:	d020      	beq.n	3400cce6 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400cca4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cca8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400ccac:	4b83      	ldr	r3, [pc, #524]	@ (3400cebc <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
3400ccae:	429a      	cmp	r2, r3
3400ccb0:	d019      	beq.n	3400cce6 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400ccb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccb6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400ccba:	4b81      	ldr	r3, [pc, #516]	@ (3400cec0 <HAL_RCCEx_PeriphCLKConfig+0x36ec>)
3400ccbc:	429a      	cmp	r2, r3
3400ccbe:	d012      	beq.n	3400cce6 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400ccc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccc4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400ccc8:	4b7e      	ldr	r3, [pc, #504]	@ (3400cec4 <HAL_RCCEx_PeriphCLKConfig+0x36f0>)
3400ccca:	429a      	cmp	r2, r3
3400cccc:	d00b      	beq.n	3400cce6 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400ccce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccd2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400ccd6:	4b7c      	ldr	r3, [pc, #496]	@ (3400cec8 <HAL_RCCEx_PeriphCLKConfig+0x36f4>)
3400ccd8:	429a      	cmp	r2, r3
3400ccda:	d004      	beq.n	3400cce6 <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400ccdc:	f240 418b 	movw	r1, #1163	@ 0x48b
3400cce0:	487a      	ldr	r0, [pc, #488]	@ (3400cecc <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400cce2:	f7f4 fd9f 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3400cce6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccea:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400ccee:	4b73      	ldr	r3, [pc, #460]	@ (3400cebc <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
3400ccf0:	429a      	cmp	r2, r3
3400ccf2:	d142      	bne.n	3400cd7a <HAL_RCCEx_PeriphCLKConfig+0x35a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400ccf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ccfa:	2b00      	cmp	r3, #0
3400ccfc:	d016      	beq.n	3400cd2c <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400ccfe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cd04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cd08:	d010      	beq.n	3400cd2c <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cd0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cd10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cd14:	d00a      	beq.n	3400cd2c <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cd16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cd1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cd20:	d004      	beq.n	3400cd2c <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cd22:	f44f 6192 	mov.w	r1, #1168	@ 0x490
3400cd26:	4869      	ldr	r0, [pc, #420]	@ (3400cecc <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400cd28:	f7f4 fd7c 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cd2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cd32:	2b00      	cmp	r3, #0
3400cd34:	d005      	beq.n	3400cd42 <HAL_RCCEx_PeriphCLKConfig+0x356e>
3400cd36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cd3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cd40:	d904      	bls.n	3400cd4c <HAL_RCCEx_PeriphCLKConfig+0x3578>
3400cd42:	f240 4191 	movw	r1, #1169	@ 0x491
3400cd46:	4861      	ldr	r0, [pc, #388]	@ (3400cecc <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400cd48:	f7f4 fd6c 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cd4c:	4b60      	ldr	r3, [pc, #384]	@ (3400ced0 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400cd4e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cd52:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cd56:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cd5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd5e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400cd60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cd66:	3b01      	subs	r3, #1
3400cd68:	041b      	lsls	r3, r3, #16
3400cd6a:	4313      	orrs	r3, r2
3400cd6c:	4a58      	ldr	r2, [pc, #352]	@ (3400ced0 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400cd6e:	430b      	orrs	r3, r1
3400cd70:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400cd74:	f7fc fb8c 	bl	34009490 <LL_RCC_IC15_Enable>
3400cd78:	e008      	b.n	3400cd8c <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
3400cd7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd7e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cd82:	4b4d      	ldr	r3, [pc, #308]	@ (3400ceb8 <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
3400cd84:	429a      	cmp	r2, r3
3400cd86:	d101      	bne.n	3400cd8c <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    {
      LL_RCC_CLKP_Enable();
3400cd88:	f7fc fd02 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
3400cd8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd90:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400cd94:	4618      	mov	r0, r3
3400cd96:	f7fb fbed 	bl	34008574 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3400cd9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cda2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
3400cda6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3400cdaa:	2300      	movs	r3, #0
3400cdac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
3400cdb0:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
3400cdb4:	4603      	mov	r3, r0
3400cdb6:	460a      	mov	r2, r1
3400cdb8:	4313      	orrs	r3, r2
3400cdba:	f000 80a7 	beq.w	3400cf0c <HAL_RCCEx_PeriphCLKConfig+0x3738>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
3400cdbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdc2:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cdc6:	4b43      	ldr	r3, [pc, #268]	@ (3400ced4 <HAL_RCCEx_PeriphCLKConfig+0x3700>)
3400cdc8:	429a      	cmp	r2, r3
3400cdca:	d027      	beq.n	3400ce1c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400cdcc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdd0:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cdd4:	4b40      	ldr	r3, [pc, #256]	@ (3400ced8 <HAL_RCCEx_PeriphCLKConfig+0x3704>)
3400cdd6:	429a      	cmp	r2, r3
3400cdd8:	d020      	beq.n	3400ce1c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400cdda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdde:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cde2:	4b3e      	ldr	r3, [pc, #248]	@ (3400cedc <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3400cde4:	429a      	cmp	r2, r3
3400cde6:	d019      	beq.n	3400ce1c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400cde8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdec:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cdf0:	4b3b      	ldr	r3, [pc, #236]	@ (3400cee0 <HAL_RCCEx_PeriphCLKConfig+0x370c>)
3400cdf2:	429a      	cmp	r2, r3
3400cdf4:	d012      	beq.n	3400ce1c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400cdf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdfa:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cdfe:	4b39      	ldr	r3, [pc, #228]	@ (3400cee4 <HAL_RCCEx_PeriphCLKConfig+0x3710>)
3400ce00:	429a      	cmp	r2, r3
3400ce02:	d00b      	beq.n	3400ce1c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400ce04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce08:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400ce0c:	4b36      	ldr	r3, [pc, #216]	@ (3400cee8 <HAL_RCCEx_PeriphCLKConfig+0x3714>)
3400ce0e:	429a      	cmp	r2, r3
3400ce10:	d004      	beq.n	3400ce1c <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400ce12:	f240 41ab 	movw	r1, #1195	@ 0x4ab
3400ce16:	482d      	ldr	r0, [pc, #180]	@ (3400cecc <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400ce18:	f7f4 fd04 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3400ce1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce20:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400ce24:	4b2d      	ldr	r3, [pc, #180]	@ (3400cedc <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3400ce26:	429a      	cmp	r2, r3
3400ce28:	d160      	bne.n	3400ceec <HAL_RCCEx_PeriphCLKConfig+0x3718>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400ce2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ce30:	2b00      	cmp	r3, #0
3400ce32:	d016      	beq.n	3400ce62 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400ce34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ce3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ce3e:	d010      	beq.n	3400ce62 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400ce40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ce46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ce4a:	d00a      	beq.n	3400ce62 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400ce4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ce52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ce56:	d004      	beq.n	3400ce62 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400ce58:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
3400ce5c:	481b      	ldr	r0, [pc, #108]	@ (3400cecc <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400ce5e:	f7f4 fce1 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400ce62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ce68:	2b00      	cmp	r3, #0
3400ce6a:	d005      	beq.n	3400ce78 <HAL_RCCEx_PeriphCLKConfig+0x36a4>
3400ce6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ce72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ce76:	d904      	bls.n	3400ce82 <HAL_RCCEx_PeriphCLKConfig+0x36ae>
3400ce78:	f240 41b1 	movw	r1, #1201	@ 0x4b1
3400ce7c:	4813      	ldr	r0, [pc, #76]	@ (3400cecc <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400ce7e:	f7f4 fcd1 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400ce82:	4b13      	ldr	r3, [pc, #76]	@ (3400ced0 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400ce84:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400ce88:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ce8c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ce90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce94:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400ce96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ce9c:	3b01      	subs	r3, #1
3400ce9e:	041b      	lsls	r3, r3, #16
3400cea0:	4313      	orrs	r3, r2
3400cea2:	4a0b      	ldr	r2, [pc, #44]	@ (3400ced0 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400cea4:	430b      	orrs	r3, r1
3400cea6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400ceaa:	f7fc faf1 	bl	34009490 <LL_RCC_IC15_Enable>
3400ceae:	e026      	b.n	3400cefe <HAL_RCCEx_PeriphCLKConfig+0x372a>
3400ceb0:	07010c2c 	.word	0x07010c2c
3400ceb4:	0700102c 	.word	0x0700102c
3400ceb8:	0701102c 	.word	0x0701102c
3400cebc:	0702102c 	.word	0x0702102c
3400cec0:	0703102c 	.word	0x0703102c
3400cec4:	0704102c 	.word	0x0704102c
3400cec8:	0705102c 	.word	0x0705102c
3400cecc:	3401cebc 	.word	0x3401cebc
3400ced0:	56028000 	.word	0x56028000
3400ced4:	0700142c 	.word	0x0700142c
3400ced8:	0701142c 	.word	0x0701142c
3400cedc:	0702142c 	.word	0x0702142c
3400cee0:	0703142c 	.word	0x0703142c
3400cee4:	0704142c 	.word	0x0704142c
3400cee8:	0705142c 	.word	0x0705142c
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
3400ceec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cef0:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cef4:	4b9b      	ldr	r3, [pc, #620]	@ (3400d164 <HAL_RCCEx_PeriphCLKConfig+0x3990>)
3400cef6:	429a      	cmp	r2, r3
3400cef8:	d101      	bne.n	3400cefe <HAL_RCCEx_PeriphCLKConfig+0x372a>
    {
      LL_RCC_CLKP_Enable();
3400cefa:	f7fc fc49 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
3400cefe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf02:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400cf06:	4618      	mov	r0, r3
3400cf08:	f7fb fb34 	bl	34008574 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
3400cf0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf10:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cf14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
3400cf18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
3400cf1c:	2300      	movs	r3, #0
3400cf1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3400cf22:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
3400cf26:	4603      	mov	r3, r0
3400cf28:	460a      	mov	r2, r1
3400cf2a:	4313      	orrs	r3, r2
3400cf2c:	f000 8089 	beq.w	3400d042 <HAL_RCCEx_PeriphCLKConfig+0x386e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
3400cf30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf34:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400cf38:	4b8b      	ldr	r3, [pc, #556]	@ (3400d168 <HAL_RCCEx_PeriphCLKConfig+0x3994>)
3400cf3a:	429a      	cmp	r2, r3
3400cf3c:	d027      	beq.n	3400cf8e <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400cf3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf42:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400cf46:	4b89      	ldr	r3, [pc, #548]	@ (3400d16c <HAL_RCCEx_PeriphCLKConfig+0x3998>)
3400cf48:	429a      	cmp	r2, r3
3400cf4a:	d020      	beq.n	3400cf8e <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400cf4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf50:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400cf54:	4b86      	ldr	r3, [pc, #536]	@ (3400d170 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
3400cf56:	429a      	cmp	r2, r3
3400cf58:	d019      	beq.n	3400cf8e <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400cf5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf5e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400cf62:	4b84      	ldr	r3, [pc, #528]	@ (3400d174 <HAL_RCCEx_PeriphCLKConfig+0x39a0>)
3400cf64:	429a      	cmp	r2, r3
3400cf66:	d012      	beq.n	3400cf8e <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400cf68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf6c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400cf70:	4b81      	ldr	r3, [pc, #516]	@ (3400d178 <HAL_RCCEx_PeriphCLKConfig+0x39a4>)
3400cf72:	429a      	cmp	r2, r3
3400cf74:	d00b      	beq.n	3400cf8e <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400cf76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf7a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400cf7e:	4b7f      	ldr	r3, [pc, #508]	@ (3400d17c <HAL_RCCEx_PeriphCLKConfig+0x39a8>)
3400cf80:	429a      	cmp	r2, r3
3400cf82:	d004      	beq.n	3400cf8e <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400cf84:	f240 41cb 	movw	r1, #1227	@ 0x4cb
3400cf88:	487d      	ldr	r0, [pc, #500]	@ (3400d180 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400cf8a:	f7f4 fc4b 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3400cf8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf92:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400cf96:	4b76      	ldr	r3, [pc, #472]	@ (3400d170 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
3400cf98:	429a      	cmp	r2, r3
3400cf9a:	d142      	bne.n	3400d022 <HAL_RCCEx_PeriphCLKConfig+0x384e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cf9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cfa2:	2b00      	cmp	r3, #0
3400cfa4:	d016      	beq.n	3400cfd4 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400cfa6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cfac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cfb0:	d010      	beq.n	3400cfd4 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400cfb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cfb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cfbc:	d00a      	beq.n	3400cfd4 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400cfbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cfc4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cfc8:	d004      	beq.n	3400cfd4 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400cfca:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
3400cfce:	486c      	ldr	r0, [pc, #432]	@ (3400d180 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400cfd0:	f7f4 fc28 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cfd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cfda:	2b00      	cmp	r3, #0
3400cfdc:	d005      	beq.n	3400cfea <HAL_RCCEx_PeriphCLKConfig+0x3816>
3400cfde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cfe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cfe8:	d904      	bls.n	3400cff4 <HAL_RCCEx_PeriphCLKConfig+0x3820>
3400cfea:	f240 41d1 	movw	r1, #1233	@ 0x4d1
3400cfee:	4864      	ldr	r0, [pc, #400]	@ (3400d180 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400cff0:	f7f4 fc18 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cff4:	4b63      	ldr	r3, [pc, #396]	@ (3400d184 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400cff6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cffa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cffe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d002:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d006:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400d008:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d00c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d00e:	3b01      	subs	r3, #1
3400d010:	041b      	lsls	r3, r3, #16
3400d012:	4313      	orrs	r3, r2
3400d014:	4a5b      	ldr	r2, [pc, #364]	@ (3400d184 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d016:	430b      	orrs	r3, r1
3400d018:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400d01c:	f7fc fa38 	bl	34009490 <LL_RCC_IC15_Enable>
3400d020:	e008      	b.n	3400d034 <HAL_RCCEx_PeriphCLKConfig+0x3860>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
3400d022:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d026:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d02a:	4b50      	ldr	r3, [pc, #320]	@ (3400d16c <HAL_RCCEx_PeriphCLKConfig+0x3998>)
3400d02c:	429a      	cmp	r2, r3
3400d02e:	d101      	bne.n	3400d034 <HAL_RCCEx_PeriphCLKConfig+0x3860>
    {
      LL_RCC_CLKP_Enable();
3400d030:	f7fc fbae 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
3400d034:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d038:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400d03c:	4618      	mov	r0, r3
3400d03e:	f7fb fa99 	bl	34008574 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3400d042:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d046:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d04a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3400d04e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
3400d052:	2300      	movs	r3, #0
3400d054:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3400d058:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
3400d05c:	4603      	mov	r3, r0
3400d05e:	460a      	mov	r2, r1
3400d060:	4313      	orrs	r3, r2
3400d062:	f000 80eb 	beq.w	3400d23c <HAL_RCCEx_PeriphCLKConfig+0x3a68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
3400d066:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d06a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d06e:	2b00      	cmp	r3, #0
3400d070:	d02e      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d072:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d076:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d07a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d07e:	d027      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d080:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d084:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400d08c:	d020      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d08e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d092:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400d09a:	d019      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d09c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0a0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d0a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400d0a8:	d012      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d0aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d0b2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3400d0b6:	d00b      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d0b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d0c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400d0c4:	d004      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d0c6:	f240 41eb 	movw	r1, #1259	@ 0x4eb
3400d0ca:	482d      	ldr	r0, [pc, #180]	@ (3400d180 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d0cc:	f7f4 fbaa 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3400d0d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d0d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400d0dc:	d154      	bne.n	3400d188 <HAL_RCCEx_PeriphCLKConfig+0x39b4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400d0de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d0e4:	2b00      	cmp	r3, #0
3400d0e6:	d016      	beq.n	3400d116 <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d0e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d0ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d0f2:	d010      	beq.n	3400d116 <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d0f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d0fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d0fe:	d00a      	beq.n	3400d116 <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d100:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d106:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d10a:	d004      	beq.n	3400d116 <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d10c:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
3400d110:	481b      	ldr	r0, [pc, #108]	@ (3400d180 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d112:	f7f4 fb87 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400d116:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d11a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d11c:	2b00      	cmp	r3, #0
3400d11e:	d005      	beq.n	3400d12c <HAL_RCCEx_PeriphCLKConfig+0x3958>
3400d120:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d12a:	d904      	bls.n	3400d136 <HAL_RCCEx_PeriphCLKConfig+0x3962>
3400d12c:	f240 41f1 	movw	r1, #1265	@ 0x4f1
3400d130:	4813      	ldr	r0, [pc, #76]	@ (3400d180 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d132:	f7f4 fb77 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400d136:	4b13      	ldr	r3, [pc, #76]	@ (3400d184 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d138:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400d13c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d140:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d144:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d148:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400d14a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d14e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d150:	3b01      	subs	r3, #1
3400d152:	041b      	lsls	r3, r3, #16
3400d154:	4313      	orrs	r3, r2
3400d156:	4a0b      	ldr	r2, [pc, #44]	@ (3400d184 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d158:	430b      	orrs	r3, r1
3400d15a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400d15e:	f7fc f857 	bl	34009210 <LL_RCC_IC9_Enable>
3400d162:	e064      	b.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
3400d164:	0701142c 	.word	0x0701142c
3400d168:	0700182c 	.word	0x0700182c
3400d16c:	0701182c 	.word	0x0701182c
3400d170:	0702182c 	.word	0x0702182c
3400d174:	0703182c 	.word	0x0703182c
3400d178:	0704182c 	.word	0x0704182c
3400d17c:	0705182c 	.word	0x0705182c
3400d180:	3401cebc 	.word	0x3401cebc
3400d184:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
3400d188:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d18c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400d194:	d142      	bne.n	3400d21c <HAL_RCCEx_PeriphCLKConfig+0x3a48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400d196:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d19a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d19c:	2b00      	cmp	r3, #0
3400d19e:	d016      	beq.n	3400d1ce <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d1a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d1a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d1aa:	d010      	beq.n	3400d1ce <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d1ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d1b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d1b6:	d00a      	beq.n	3400d1ce <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d1b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d1be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d1c2:	d004      	beq.n	3400d1ce <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d1c4:	f240 41fd 	movw	r1, #1277	@ 0x4fd
3400d1c8:	48b2      	ldr	r0, [pc, #712]	@ (3400d494 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d1ca:	f7f4 fb2b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400d1ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400d1d4:	2b00      	cmp	r3, #0
3400d1d6:	d005      	beq.n	3400d1e4 <HAL_RCCEx_PeriphCLKConfig+0x3a10>
3400d1d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400d1de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d1e2:	d904      	bls.n	3400d1ee <HAL_RCCEx_PeriphCLKConfig+0x3a1a>
3400d1e4:	f240 41fe 	movw	r1, #1278	@ 0x4fe
3400d1e8:	48aa      	ldr	r0, [pc, #680]	@ (3400d494 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d1ea:	f7f4 fb1b 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400d1ee:	4baa      	ldr	r3, [pc, #680]	@ (3400d498 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d1f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400d1f4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d1f8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d1fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d200:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400d202:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400d208:	3b01      	subs	r3, #1
3400d20a:	041b      	lsls	r3, r3, #16
3400d20c:	4313      	orrs	r3, r2
3400d20e:	4aa2      	ldr	r2, [pc, #648]	@ (3400d498 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d210:	430b      	orrs	r3, r1
3400d212:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400d216:	f7fc f8fb 	bl	34009410 <LL_RCC_IC14_Enable>
3400d21a:	e008      	b.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
3400d21c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d220:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d228:	d101      	bne.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    {
      LL_RCC_CLKP_Enable();
3400d22a:	f7fc fab1 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
3400d22e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d232:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d236:	4618      	mov	r0, r3
3400d238:	f7fb f9a8 	bl	3400858c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
3400d23c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d240:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d244:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3400d248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
3400d24c:	2300      	movs	r3, #0
3400d24e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
3400d252:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3400d256:	4603      	mov	r3, r0
3400d258:	460a      	mov	r2, r1
3400d25a:	4313      	orrs	r3, r2
3400d25c:	f000 8082 	beq.w	3400d364 <HAL_RCCEx_PeriphCLKConfig+0x3b90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
3400d260:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d264:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d268:	2b00      	cmp	r3, #0
3400d26a:	d019      	beq.n	3400d2a0 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d26c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d270:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400d278:	d012      	beq.n	3400d2a0 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d27a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d27e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400d286:	d00b      	beq.n	3400d2a0 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d288:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d28c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d290:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3400d294:	d004      	beq.n	3400d2a0 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d296:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
3400d29a:	487e      	ldr	r0, [pc, #504]	@ (3400d494 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d29c:	f7f4 fac2 	bl	34001824 <assert_failed>

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3400d2a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2a4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d2a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400d2ac:	d14a      	bne.n	3400d344 <HAL_RCCEx_PeriphCLKConfig+0x3b70>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
3400d2ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d2b6:	2b00      	cmp	r3, #0
3400d2b8:	d019      	beq.n	3400d2ee <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d2ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d2c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d2c6:	d012      	beq.n	3400d2ee <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d2c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d2d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d2d4:	d00b      	beq.n	3400d2ee <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d2d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d2de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d2e2:	d004      	beq.n	3400d2ee <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d2e4:	f240 511d 	movw	r1, #1309	@ 0x51d
3400d2e8:	486a      	ldr	r0, [pc, #424]	@ (3400d494 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d2ea:	f7f4 fa9b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
3400d2ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400d2f6:	2b00      	cmp	r3, #0
3400d2f8:	d006      	beq.n	3400d308 <HAL_RCCEx_PeriphCLKConfig+0x3b34>
3400d2fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400d302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d306:	d904      	bls.n	3400d312 <HAL_RCCEx_PeriphCLKConfig+0x3b3e>
3400d308:	f240 511e 	movw	r1, #1310	@ 0x51e
3400d30c:	4861      	ldr	r0, [pc, #388]	@ (3400d494 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d30e:	f7f4 fa89 	bl	34001824 <assert_failed>

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3400d312:	4b61      	ldr	r3, [pc, #388]	@ (3400d498 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d314:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400d318:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d31c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d320:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d324:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400d328:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d32c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400d330:	3b01      	subs	r3, #1
3400d332:	041b      	lsls	r3, r3, #16
3400d334:	4313      	orrs	r3, r2
3400d336:	4a58      	ldr	r2, [pc, #352]	@ (3400d498 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d338:	430b      	orrs	r3, r1
3400d33a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
3400d33e:	f7fc f8e7 	bl	34009510 <LL_RCC_IC16_Enable>
3400d342:	e008      	b.n	3400d356 <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
3400d344:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d348:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d34c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400d350:	d101      	bne.n	3400d356 <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    {
      LL_RCC_CLKP_Enable();
3400d352:	f7fc fa1d 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
3400d356:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d35a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d35e:	4618      	mov	r0, r3
3400d360:	f7fb f92a 	bl	340085b8 <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
3400d364:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d368:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d36c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3400d370:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
3400d374:	2300      	movs	r3, #0
3400d376:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
3400d37a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3400d37e:	4603      	mov	r3, r0
3400d380:	460a      	mov	r2, r1
3400d382:	4313      	orrs	r3, r2
3400d384:	f000 80e4 	beq.w	3400d550 <HAL_RCCEx_PeriphCLKConfig+0x3d7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
3400d388:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d38c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d390:	2b00      	cmp	r3, #0
3400d392:	d035      	beq.n	3400d400 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d394:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d398:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d39c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400d3a0:	d02e      	beq.n	3400d400 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d3a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3a6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d3aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400d3ae:	d027      	beq.n	3400d400 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d3b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3b4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d3b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400d3bc:	d020      	beq.n	3400d400 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d3be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3c2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d3c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400d3ca:	d019      	beq.n	3400d400 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d3cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3d0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d3d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3400d3d8:	d012      	beq.n	3400d400 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d3da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3de:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d3e2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3400d3e6:	d00b      	beq.n	3400d400 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d3e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3ec:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d3f0:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3400d3f4:	d004      	beq.n	3400d400 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d3f6:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
3400d3fa:	4826      	ldr	r0, [pc, #152]	@ (3400d494 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d3fc:	f7f4 fa12 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
3400d400:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d404:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400d40c:	d146      	bne.n	3400d49c <HAL_RCCEx_PeriphCLKConfig+0x3cc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d40e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d414:	2b00      	cmp	r3, #0
3400d416:	d016      	beq.n	3400d446 <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d418:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d41c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d41e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d422:	d010      	beq.n	3400d446 <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d424:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d42a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d42e:	d00a      	beq.n	3400d446 <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d430:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d436:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d43a:	d004      	beq.n	3400d446 <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d43c:	f240 513d 	movw	r1, #1341	@ 0x53d
3400d440:	4814      	ldr	r0, [pc, #80]	@ (3400d494 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d442:	f7f4 f9ef 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400d446:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d44a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d44c:	2b00      	cmp	r3, #0
3400d44e:	d005      	beq.n	3400d45c <HAL_RCCEx_PeriphCLKConfig+0x3c88>
3400d450:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d45a:	d904      	bls.n	3400d466 <HAL_RCCEx_PeriphCLKConfig+0x3c92>
3400d45c:	f240 513e 	movw	r1, #1342	@ 0x53e
3400d460:	480c      	ldr	r0, [pc, #48]	@ (3400d494 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d462:	f7f4 f9df 	bl	34001824 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400d466:	4b0c      	ldr	r3, [pc, #48]	@ (3400d498 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d468:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400d46c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d470:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d474:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400d47a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d47e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d480:	3b01      	subs	r3, #1
3400d482:	041b      	lsls	r3, r3, #16
3400d484:	4313      	orrs	r3, r2
3400d486:	4a04      	ldr	r2, [pc, #16]	@ (3400d498 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d488:	430b      	orrs	r3, r1
3400d48a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400d48e:	f7fb fe3f 	bl	34009110 <LL_RCC_IC7_Enable>
3400d492:	e056      	b.n	3400d542 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
3400d494:	3401cebc 	.word	0x3401cebc
3400d498:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
3400d49c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4a0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d4a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400d4a8:	d142      	bne.n	3400d530 <HAL_RCCEx_PeriphCLKConfig+0x3d5c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d4aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d4b0:	2b00      	cmp	r3, #0
3400d4b2:	d016      	beq.n	3400d4e2 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d4b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d4ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d4be:	d010      	beq.n	3400d4e2 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d4c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d4c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d4ca:	d00a      	beq.n	3400d4e2 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d4cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d4d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d4d6:	d004      	beq.n	3400d4e2 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d4d8:	f240 514a 	movw	r1, #1354	@ 0x54a
3400d4dc:	48b0      	ldr	r0, [pc, #704]	@ (3400d7a0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d4de:	f7f4 f9a1 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400d4e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d4e8:	2b00      	cmp	r3, #0
3400d4ea:	d005      	beq.n	3400d4f8 <HAL_RCCEx_PeriphCLKConfig+0x3d24>
3400d4ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d4f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d4f6:	d904      	bls.n	3400d502 <HAL_RCCEx_PeriphCLKConfig+0x3d2e>
3400d4f8:	f240 514b 	movw	r1, #1355	@ 0x54b
3400d4fc:	48a8      	ldr	r0, [pc, #672]	@ (3400d7a0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d4fe:	f7f4 f991 	bl	34001824 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400d502:	4ba8      	ldr	r3, [pc, #672]	@ (3400d7a4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400d508:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d50c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d510:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400d516:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d51a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d51c:	3b01      	subs	r3, #1
3400d51e:	041b      	lsls	r3, r3, #16
3400d520:	4313      	orrs	r3, r2
3400d522:	4aa0      	ldr	r2, [pc, #640]	@ (3400d7a4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d524:	430b      	orrs	r3, r1
3400d526:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400d52a:	f7fb fe31 	bl	34009190 <LL_RCC_IC8_Enable>
3400d52e:	e008      	b.n	3400d542 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3400d530:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d534:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400d53c:	d101      	bne.n	3400d542 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    {
      LL_RCC_CLKP_Enable();
3400d53e:	f7fc f927 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3400d542:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d546:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d54a:	4618      	mov	r0, r3
3400d54c:	f7fb f84a 	bl	340085e4 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3400d550:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d554:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d558:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
3400d55c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3400d560:	2300      	movs	r3, #0
3400d562:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3400d566:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
3400d56a:	4603      	mov	r3, r0
3400d56c:	460a      	mov	r2, r1
3400d56e:	4313      	orrs	r3, r2
3400d570:	d07c      	beq.n	3400d66c <HAL_RCCEx_PeriphCLKConfig+0x3e98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
3400d572:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d576:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d57a:	2b00      	cmp	r3, #0
3400d57c:	d016      	beq.n	3400d5ac <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d57e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d582:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d586:	2b10      	cmp	r3, #16
3400d588:	d010      	beq.n	3400d5ac <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d58a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d58e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d592:	2b20      	cmp	r3, #32
3400d594:	d00a      	beq.n	3400d5ac <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d596:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d59a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d59e:	2b30      	cmp	r3, #48	@ 0x30
3400d5a0:	d004      	beq.n	3400d5ac <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d5a2:	f240 5165 	movw	r1, #1381	@ 0x565
3400d5a6:	487e      	ldr	r0, [pc, #504]	@ (3400d7a0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d5a8:	f7f4 f93c 	bl	34001824 <assert_failed>

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3400d5ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5b0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d5b4:	2b20      	cmp	r3, #32
3400d5b6:	d14a      	bne.n	3400d64e <HAL_RCCEx_PeriphCLKConfig+0x3e7a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400d5b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d5c0:	2b00      	cmp	r3, #0
3400d5c2:	d019      	beq.n	3400d5f8 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d5c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d5cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d5d0:	d012      	beq.n	3400d5f8 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d5d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d5da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d5de:	d00b      	beq.n	3400d5f8 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d5e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d5e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d5ec:	d004      	beq.n	3400d5f8 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d5ee:	f240 516a 	movw	r1, #1386	@ 0x56a
3400d5f2:	486b      	ldr	r0, [pc, #428]	@ (3400d7a0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d5f4:	f7f4 f916 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400d5f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d600:	2b00      	cmp	r3, #0
3400d602:	d006      	beq.n	3400d612 <HAL_RCCEx_PeriphCLKConfig+0x3e3e>
3400d604:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d608:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d60c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d610:	d904      	bls.n	3400d61c <HAL_RCCEx_PeriphCLKConfig+0x3e48>
3400d612:	f240 516b 	movw	r1, #1387	@ 0x56b
3400d616:	4862      	ldr	r0, [pc, #392]	@ (3400d7a0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d618:	f7f4 f904 	bl	34001824 <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400d61c:	4b61      	ldr	r3, [pc, #388]	@ (3400d7a4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d61e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400d622:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d626:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d62a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d62e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400d632:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d63a:	3b01      	subs	r3, #1
3400d63c:	041b      	lsls	r3, r3, #16
3400d63e:	4313      	orrs	r3, r2
3400d640:	4a58      	ldr	r2, [pc, #352]	@ (3400d7a4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d642:	430b      	orrs	r3, r1
3400d644:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3400d648:	f7fc f862 	bl	34009710 <LL_RCC_IC20_Enable>
3400d64c:	e007      	b.n	3400d65e <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
3400d64e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d652:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d656:	2b10      	cmp	r3, #16
3400d658:	d101      	bne.n	3400d65e <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    {
      LL_RCC_CLKP_Enable();
3400d65a:	f7fc f899 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
3400d65e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d662:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d666:	4618      	mov	r0, r3
3400d668:	f7fa ffe8 	bl	3400863c <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3400d66c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d670:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d674:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
3400d678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3400d67c:	2300      	movs	r3, #0
3400d67e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3400d682:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3400d686:	4603      	mov	r3, r0
3400d688:	460a      	mov	r2, r1
3400d68a:	4313      	orrs	r3, r2
3400d68c:	f000 80f6 	beq.w	3400d87c <HAL_RCCEx_PeriphCLKConfig+0x40a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
3400d690:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d694:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d698:	4b43      	ldr	r3, [pc, #268]	@ (3400d7a8 <HAL_RCCEx_PeriphCLKConfig+0x3fd4>)
3400d69a:	429a      	cmp	r2, r3
3400d69c:	d035      	beq.n	3400d70a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d69e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6a2:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d6a6:	4b41      	ldr	r3, [pc, #260]	@ (3400d7ac <HAL_RCCEx_PeriphCLKConfig+0x3fd8>)
3400d6a8:	429a      	cmp	r2, r3
3400d6aa:	d02e      	beq.n	3400d70a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d6ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6b0:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d6b4:	4b3e      	ldr	r3, [pc, #248]	@ (3400d7b0 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3400d6b6:	429a      	cmp	r2, r3
3400d6b8:	d027      	beq.n	3400d70a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d6ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6be:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d6c2:	4b3c      	ldr	r3, [pc, #240]	@ (3400d7b4 <HAL_RCCEx_PeriphCLKConfig+0x3fe0>)
3400d6c4:	429a      	cmp	r2, r3
3400d6c6:	d020      	beq.n	3400d70a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d6c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6cc:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d6d0:	4b39      	ldr	r3, [pc, #228]	@ (3400d7b8 <HAL_RCCEx_PeriphCLKConfig+0x3fe4>)
3400d6d2:	429a      	cmp	r2, r3
3400d6d4:	d019      	beq.n	3400d70a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d6d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6da:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d6de:	4b37      	ldr	r3, [pc, #220]	@ (3400d7bc <HAL_RCCEx_PeriphCLKConfig+0x3fe8>)
3400d6e0:	429a      	cmp	r2, r3
3400d6e2:	d012      	beq.n	3400d70a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d6e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6e8:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d6ec:	4b34      	ldr	r3, [pc, #208]	@ (3400d7c0 <HAL_RCCEx_PeriphCLKConfig+0x3fec>)
3400d6ee:	429a      	cmp	r2, r3
3400d6f0:	d00b      	beq.n	3400d70a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d6f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6f6:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d6fa:	4b32      	ldr	r3, [pc, #200]	@ (3400d7c4 <HAL_RCCEx_PeriphCLKConfig+0x3ff0>)
3400d6fc:	429a      	cmp	r2, r3
3400d6fe:	d004      	beq.n	3400d70a <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d700:	f240 5185 	movw	r1, #1413	@ 0x585
3400d704:	4826      	ldr	r0, [pc, #152]	@ (3400d7a0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d706:	f7f4 f88d 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
3400d70a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d70e:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d712:	4b27      	ldr	r3, [pc, #156]	@ (3400d7b0 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3400d714:	429a      	cmp	r2, r3
3400d716:	d157      	bne.n	3400d7c8 <HAL_RCCEx_PeriphCLKConfig+0x3ff4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d718:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d71c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d71e:	2b00      	cmp	r3, #0
3400d720:	d016      	beq.n	3400d750 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d722:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d72c:	d010      	beq.n	3400d750 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d72e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d738:	d00a      	beq.n	3400d750 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d73a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d73e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d740:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d744:	d004      	beq.n	3400d750 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d746:	f240 518a 	movw	r1, #1418	@ 0x58a
3400d74a:	4815      	ldr	r0, [pc, #84]	@ (3400d7a0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d74c:	f7f4 f86a 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400d750:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d756:	2b00      	cmp	r3, #0
3400d758:	d005      	beq.n	3400d766 <HAL_RCCEx_PeriphCLKConfig+0x3f92>
3400d75a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d75e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d764:	d904      	bls.n	3400d770 <HAL_RCCEx_PeriphCLKConfig+0x3f9c>
3400d766:	f240 518b 	movw	r1, #1419	@ 0x58b
3400d76a:	480d      	ldr	r0, [pc, #52]	@ (3400d7a0 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d76c:	f7f4 f85a 	bl	34001824 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400d770:	4b0c      	ldr	r3, [pc, #48]	@ (3400d7a4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d772:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400d776:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d77a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d77e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400d784:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d78a:	3b01      	subs	r3, #1
3400d78c:	041b      	lsls	r3, r3, #16
3400d78e:	4313      	orrs	r3, r2
3400d790:	4a04      	ldr	r2, [pc, #16]	@ (3400d7a4 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d792:	430b      	orrs	r3, r1
3400d794:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400d798:	f7fb fcba 	bl	34009110 <LL_RCC_IC7_Enable>
3400d79c:	e067      	b.n	3400d86e <HAL_RCCEx_PeriphCLKConfig+0x409a>
3400d79e:	bf00      	nop
3400d7a0:	3401cebc 	.word	0x3401cebc
3400d7a4:	56028000 	.word	0x56028000
3400d7a8:	07001418 	.word	0x07001418
3400d7ac:	07011418 	.word	0x07011418
3400d7b0:	07021418 	.word	0x07021418
3400d7b4:	07031418 	.word	0x07031418
3400d7b8:	07041418 	.word	0x07041418
3400d7bc:	07051418 	.word	0x07051418
3400d7c0:	07061418 	.word	0x07061418
3400d7c4:	07071418 	.word	0x07071418
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
3400d7c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7cc:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d7d0:	4b9c      	ldr	r3, [pc, #624]	@ (3400da44 <HAL_RCCEx_PeriphCLKConfig+0x4270>)
3400d7d2:	429a      	cmp	r2, r3
3400d7d4:	d142      	bne.n	3400d85c <HAL_RCCEx_PeriphCLKConfig+0x4088>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d7d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d7dc:	2b00      	cmp	r3, #0
3400d7de:	d016      	beq.n	3400d80e <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400d7e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d7e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d7ea:	d010      	beq.n	3400d80e <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400d7ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d7f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d7f6:	d00a      	beq.n	3400d80e <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400d7f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d7fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d802:	d004      	beq.n	3400d80e <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400d804:	f240 5197 	movw	r1, #1431	@ 0x597
3400d808:	488f      	ldr	r0, [pc, #572]	@ (3400da48 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d80a:	f7f4 f80b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400d80e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d814:	2b00      	cmp	r3, #0
3400d816:	d005      	beq.n	3400d824 <HAL_RCCEx_PeriphCLKConfig+0x4050>
3400d818:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d81c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d81e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d822:	d904      	bls.n	3400d82e <HAL_RCCEx_PeriphCLKConfig+0x405a>
3400d824:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
3400d828:	4887      	ldr	r0, [pc, #540]	@ (3400da48 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d82a:	f7f3 fffb 	bl	34001824 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400d82e:	4b87      	ldr	r3, [pc, #540]	@ (3400da4c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400d830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400d834:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d838:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d83c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400d842:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d848:	3b01      	subs	r3, #1
3400d84a:	041b      	lsls	r3, r3, #16
3400d84c:	4313      	orrs	r3, r2
3400d84e:	4a7f      	ldr	r2, [pc, #508]	@ (3400da4c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400d850:	430b      	orrs	r3, r1
3400d852:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400d856:	f7fb fc9b 	bl	34009190 <LL_RCC_IC8_Enable>
3400d85a:	e008      	b.n	3400d86e <HAL_RCCEx_PeriphCLKConfig+0x409a>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
3400d85c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d860:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d864:	4b7a      	ldr	r3, [pc, #488]	@ (3400da50 <HAL_RCCEx_PeriphCLKConfig+0x427c>)
3400d866:	429a      	cmp	r2, r3
3400d868:	d101      	bne.n	3400d86e <HAL_RCCEx_PeriphCLKConfig+0x409a>
    {
      LL_RCC_CLKP_Enable();
3400d86a:	f7fb ff91 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
3400d86e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d872:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
3400d876:	4618      	mov	r0, r3
3400d878:	f7fa fef6 	bl	34008668 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
3400d87c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d880:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d884:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
3400d888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
3400d88c:	2300      	movs	r3, #0
3400d88e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3400d892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3400d896:	4603      	mov	r3, r0
3400d898:	460a      	mov	r2, r1
3400d89a:	4313      	orrs	r3, r2
3400d89c:	f000 80fa 	beq.w	3400da94 <HAL_RCCEx_PeriphCLKConfig+0x42c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
3400d8a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8a4:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d8a8:	4b6a      	ldr	r3, [pc, #424]	@ (3400da54 <HAL_RCCEx_PeriphCLKConfig+0x4280>)
3400d8aa:	429a      	cmp	r2, r3
3400d8ac:	d035      	beq.n	3400d91a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d8ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8b2:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d8b6:	4b68      	ldr	r3, [pc, #416]	@ (3400da58 <HAL_RCCEx_PeriphCLKConfig+0x4284>)
3400d8b8:	429a      	cmp	r2, r3
3400d8ba:	d02e      	beq.n	3400d91a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d8bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8c0:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d8c4:	4b65      	ldr	r3, [pc, #404]	@ (3400da5c <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3400d8c6:	429a      	cmp	r2, r3
3400d8c8:	d027      	beq.n	3400d91a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d8ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8ce:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d8d2:	4b63      	ldr	r3, [pc, #396]	@ (3400da60 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
3400d8d4:	429a      	cmp	r2, r3
3400d8d6:	d020      	beq.n	3400d91a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d8d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8dc:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d8e0:	4b60      	ldr	r3, [pc, #384]	@ (3400da64 <HAL_RCCEx_PeriphCLKConfig+0x4290>)
3400d8e2:	429a      	cmp	r2, r3
3400d8e4:	d019      	beq.n	3400d91a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d8e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8ea:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d8ee:	4b5e      	ldr	r3, [pc, #376]	@ (3400da68 <HAL_RCCEx_PeriphCLKConfig+0x4294>)
3400d8f0:	429a      	cmp	r2, r3
3400d8f2:	d012      	beq.n	3400d91a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d8f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8f8:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d8fc:	4b5b      	ldr	r3, [pc, #364]	@ (3400da6c <HAL_RCCEx_PeriphCLKConfig+0x4298>)
3400d8fe:	429a      	cmp	r2, r3
3400d900:	d00b      	beq.n	3400d91a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d902:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d906:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d90a:	4b59      	ldr	r3, [pc, #356]	@ (3400da70 <HAL_RCCEx_PeriphCLKConfig+0x429c>)
3400d90c:	429a      	cmp	r2, r3
3400d90e:	d004      	beq.n	3400d91a <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d910:	f240 51b2 	movw	r1, #1458	@ 0x5b2
3400d914:	484c      	ldr	r0, [pc, #304]	@ (3400da48 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d916:	f7f3 ff85 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
3400d91a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d91e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d922:	4b4e      	ldr	r3, [pc, #312]	@ (3400da5c <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3400d924:	429a      	cmp	r2, r3
3400d926:	d142      	bne.n	3400d9ae <HAL_RCCEx_PeriphCLKConfig+0x41da>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d928:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d92e:	2b00      	cmp	r3, #0
3400d930:	d016      	beq.n	3400d960 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400d932:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d93c:	d010      	beq.n	3400d960 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400d93e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d948:	d00a      	beq.n	3400d960 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400d94a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d950:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d954:	d004      	beq.n	3400d960 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400d956:	f240 51b7 	movw	r1, #1463	@ 0x5b7
3400d95a:	483b      	ldr	r0, [pc, #236]	@ (3400da48 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d95c:	f7f3 ff62 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400d960:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d966:	2b00      	cmp	r3, #0
3400d968:	d005      	beq.n	3400d976 <HAL_RCCEx_PeriphCLKConfig+0x41a2>
3400d96a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d96e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d974:	d904      	bls.n	3400d980 <HAL_RCCEx_PeriphCLKConfig+0x41ac>
3400d976:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
3400d97a:	4833      	ldr	r0, [pc, #204]	@ (3400da48 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d97c:	f7f3 ff52 	bl	34001824 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400d980:	4b32      	ldr	r3, [pc, #200]	@ (3400da4c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400d982:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400d986:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d98a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d98e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400d994:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d99a:	3b01      	subs	r3, #1
3400d99c:	041b      	lsls	r3, r3, #16
3400d99e:	4313      	orrs	r3, r2
3400d9a0:	4a2a      	ldr	r2, [pc, #168]	@ (3400da4c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400d9a2:	430b      	orrs	r3, r1
3400d9a4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400d9a8:	f7fb fbb2 	bl	34009110 <LL_RCC_IC7_Enable>
3400d9ac:	e06b      	b.n	3400da86 <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
3400d9ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9b2:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d9b6:	4b2a      	ldr	r3, [pc, #168]	@ (3400da60 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
3400d9b8:	429a      	cmp	r2, r3
3400d9ba:	d15b      	bne.n	3400da74 <HAL_RCCEx_PeriphCLKConfig+0x42a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d9bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d9c2:	2b00      	cmp	r3, #0
3400d9c4:	d016      	beq.n	3400d9f4 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400d9c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d9cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d9d0:	d010      	beq.n	3400d9f4 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400d9d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d9d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d9dc:	d00a      	beq.n	3400d9f4 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400d9de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d9e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d9e8:	d004      	beq.n	3400d9f4 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400d9ea:	f240 51c4 	movw	r1, #1476	@ 0x5c4
3400d9ee:	4816      	ldr	r0, [pc, #88]	@ (3400da48 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d9f0:	f7f3 ff18 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400d9f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d9fa:	2b00      	cmp	r3, #0
3400d9fc:	d005      	beq.n	3400da0a <HAL_RCCEx_PeriphCLKConfig+0x4236>
3400d9fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400da08:	d904      	bls.n	3400da14 <HAL_RCCEx_PeriphCLKConfig+0x4240>
3400da0a:	f240 51c5 	movw	r1, #1477	@ 0x5c5
3400da0e:	480e      	ldr	r0, [pc, #56]	@ (3400da48 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400da10:	f7f3 ff08 	bl	34001824 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400da14:	4b0d      	ldr	r3, [pc, #52]	@ (3400da4c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400da16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400da1a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400da1e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400da22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400da28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da2e:	3b01      	subs	r3, #1
3400da30:	041b      	lsls	r3, r3, #16
3400da32:	4313      	orrs	r3, r2
3400da34:	4a05      	ldr	r2, [pc, #20]	@ (3400da4c <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400da36:	430b      	orrs	r3, r1
3400da38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400da3c:	f7fb fba8 	bl	34009190 <LL_RCC_IC8_Enable>
3400da40:	e021      	b.n	3400da86 <HAL_RCCEx_PeriphCLKConfig+0x42b2>
3400da42:	bf00      	nop
3400da44:	07031418 	.word	0x07031418
3400da48:	3401cebc 	.word	0x3401cebc
3400da4c:	56028000 	.word	0x56028000
3400da50:	07011418 	.word	0x07011418
3400da54:	07001818 	.word	0x07001818
3400da58:	07011818 	.word	0x07011818
3400da5c:	07021818 	.word	0x07021818
3400da60:	07031818 	.word	0x07031818
3400da64:	07041818 	.word	0x07041818
3400da68:	07051818 	.word	0x07051818
3400da6c:	07061818 	.word	0x07061818
3400da70:	07071818 	.word	0x07071818
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3400da74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da78:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400da7c:	4b6f      	ldr	r3, [pc, #444]	@ (3400dc3c <HAL_RCCEx_PeriphCLKConfig+0x4468>)
3400da7e:	429a      	cmp	r2, r3
3400da80:	d101      	bne.n	3400da86 <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    {
      LL_RCC_CLKP_Enable();
3400da82:	f7fb fe85 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
3400da86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da8a:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
3400da8e:	4618      	mov	r0, r3
3400da90:	f7fa fdea 	bl	34008668 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
3400da94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da98:	e9d3 2300 	ldrd	r2, r3, [r3]
3400da9c:	2100      	movs	r1, #0
3400da9e:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
3400daa2:	f003 0301 	and.w	r3, r3, #1
3400daa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
3400daaa:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
3400daae:	4603      	mov	r3, r0
3400dab0:	460a      	mov	r2, r1
3400dab2:	4313      	orrs	r3, r2
3400dab4:	f000 80d7 	beq.w	3400dc66 <HAL_RCCEx_PeriphCLKConfig+0x4492>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
3400dab8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dabc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dac0:	2b00      	cmp	r3, #0
3400dac2:	d028      	beq.n	3400db16 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dac4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dac8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dacc:	2b01      	cmp	r3, #1
3400dace:	d022      	beq.n	3400db16 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dad0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dad4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dad8:	2b02      	cmp	r3, #2
3400dada:	d01c      	beq.n	3400db16 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dadc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dae0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dae4:	2b03      	cmp	r3, #3
3400dae6:	d016      	beq.n	3400db16 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dae8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400daec:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400daf0:	2b04      	cmp	r3, #4
3400daf2:	d010      	beq.n	3400db16 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400daf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400daf8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dafc:	2b05      	cmp	r3, #5
3400dafe:	d00a      	beq.n	3400db16 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400db00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db04:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400db08:	2b06      	cmp	r3, #6
3400db0a:	d004      	beq.n	3400db16 <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400db0c:	f240 51df 	movw	r1, #1503	@ 0x5df
3400db10:	484b      	ldr	r0, [pc, #300]	@ (3400dc40 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400db12:	f7f3 fe87 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
3400db16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db1a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400db1e:	2b02      	cmp	r3, #2
3400db20:	d142      	bne.n	3400dba8 <HAL_RCCEx_PeriphCLKConfig+0x43d4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400db22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db28:	2b00      	cmp	r3, #0
3400db2a:	d016      	beq.n	3400db5a <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400db2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400db36:	d010      	beq.n	3400db5a <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400db38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400db42:	d00a      	beq.n	3400db5a <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400db44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400db4e:	d004      	beq.n	3400db5a <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400db50:	f240 51e4 	movw	r1, #1508	@ 0x5e4
3400db54:	483a      	ldr	r0, [pc, #232]	@ (3400dc40 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400db56:	f7f3 fe65 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400db5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400db60:	2b00      	cmp	r3, #0
3400db62:	d005      	beq.n	3400db70 <HAL_RCCEx_PeriphCLKConfig+0x439c>
3400db64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400db6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400db6e:	d904      	bls.n	3400db7a <HAL_RCCEx_PeriphCLKConfig+0x43a6>
3400db70:	f240 51e5 	movw	r1, #1509	@ 0x5e5
3400db74:	4832      	ldr	r0, [pc, #200]	@ (3400dc40 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400db76:	f7f3 fe55 	bl	34001824 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400db7a:	4b32      	ldr	r3, [pc, #200]	@ (3400dc44 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400db7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400db80:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400db84:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400db88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400db8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400db94:	3b01      	subs	r3, #1
3400db96:	041b      	lsls	r3, r3, #16
3400db98:	4313      	orrs	r3, r2
3400db9a:	4a2a      	ldr	r2, [pc, #168]	@ (3400dc44 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400db9c:	430b      	orrs	r3, r1
3400db9e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400dba2:	f7fb fab5 	bl	34009110 <LL_RCC_IC7_Enable>
3400dba6:	e057      	b.n	3400dc58 <HAL_RCCEx_PeriphCLKConfig+0x4484>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
3400dba8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbac:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dbb0:	2b03      	cmp	r3, #3
3400dbb2:	d149      	bne.n	3400dc48 <HAL_RCCEx_PeriphCLKConfig+0x4474>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400dbb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbba:	2b00      	cmp	r3, #0
3400dbbc:	d016      	beq.n	3400dbec <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400dbbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dbc8:	d010      	beq.n	3400dbec <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400dbca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dbd4:	d00a      	beq.n	3400dbec <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400dbd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbdc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dbe0:	d004      	beq.n	3400dbec <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400dbe2:	f240 51f1 	movw	r1, #1521	@ 0x5f1
3400dbe6:	4816      	ldr	r0, [pc, #88]	@ (3400dc40 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400dbe8:	f7f3 fe1c 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400dbec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dbf2:	2b00      	cmp	r3, #0
3400dbf4:	d005      	beq.n	3400dc02 <HAL_RCCEx_PeriphCLKConfig+0x442e>
3400dbf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dbfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dc00:	d904      	bls.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4438>
3400dc02:	f240 51f2 	movw	r1, #1522	@ 0x5f2
3400dc06:	480e      	ldr	r0, [pc, #56]	@ (3400dc40 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400dc08:	f7f3 fe0c 	bl	34001824 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400dc0c:	4b0d      	ldr	r3, [pc, #52]	@ (3400dc44 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400dc0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400dc12:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dc16:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dc1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400dc20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dc26:	3b01      	subs	r3, #1
3400dc28:	041b      	lsls	r3, r3, #16
3400dc2a:	4313      	orrs	r3, r2
3400dc2c:	4a05      	ldr	r2, [pc, #20]	@ (3400dc44 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400dc2e:	430b      	orrs	r3, r1
3400dc30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400dc34:	f7fb faac 	bl	34009190 <LL_RCC_IC8_Enable>
3400dc38:	e00e      	b.n	3400dc58 <HAL_RCCEx_PeriphCLKConfig+0x4484>
3400dc3a:	bf00      	nop
3400dc3c:	07011818 	.word	0x07011818
3400dc40:	3401cebc 	.word	0x3401cebc
3400dc44:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
3400dc48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc4c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dc50:	2b01      	cmp	r3, #1
3400dc52:	d101      	bne.n	3400dc58 <HAL_RCCEx_PeriphCLKConfig+0x4484>
    {
      LL_RCC_CLKP_Enable();
3400dc54:	f7fb fd9c 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
3400dc58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc5c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dc60:	4618      	mov	r0, r3
3400dc62:	f7fa fd17 	bl	34008694 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3400dc66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400dc6e:	2100      	movs	r1, #0
3400dc70:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
3400dc74:	f003 0302 	and.w	r3, r3, #2
3400dc78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
3400dc7c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
3400dc80:	4603      	mov	r3, r0
3400dc82:	460a      	mov	r2, r1
3400dc84:	4313      	orrs	r3, r2
3400dc86:	f000 80da 	beq.w	3400de3e <HAL_RCCEx_PeriphCLKConfig+0x466a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
3400dc8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc8e:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dc92:	4bb4      	ldr	r3, [pc, #720]	@ (3400df64 <HAL_RCCEx_PeriphCLKConfig+0x4790>)
3400dc94:	429a      	cmp	r2, r3
3400dc96:	d02e      	beq.n	3400dcf6 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400dc98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc9c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dca0:	4bb1      	ldr	r3, [pc, #708]	@ (3400df68 <HAL_RCCEx_PeriphCLKConfig+0x4794>)
3400dca2:	429a      	cmp	r2, r3
3400dca4:	d027      	beq.n	3400dcf6 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400dca6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcaa:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dcae:	4baf      	ldr	r3, [pc, #700]	@ (3400df6c <HAL_RCCEx_PeriphCLKConfig+0x4798>)
3400dcb0:	429a      	cmp	r2, r3
3400dcb2:	d020      	beq.n	3400dcf6 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400dcb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcb8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dcbc:	4bac      	ldr	r3, [pc, #688]	@ (3400df70 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
3400dcbe:	429a      	cmp	r2, r3
3400dcc0:	d019      	beq.n	3400dcf6 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400dcc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcc6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dcca:	4baa      	ldr	r3, [pc, #680]	@ (3400df74 <HAL_RCCEx_PeriphCLKConfig+0x47a0>)
3400dccc:	429a      	cmp	r2, r3
3400dcce:	d012      	beq.n	3400dcf6 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400dcd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcd4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dcd8:	4ba7      	ldr	r3, [pc, #668]	@ (3400df78 <HAL_RCCEx_PeriphCLKConfig+0x47a4>)
3400dcda:	429a      	cmp	r2, r3
3400dcdc:	d00b      	beq.n	3400dcf6 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400dcde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dce2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dce6:	4ba5      	ldr	r3, [pc, #660]	@ (3400df7c <HAL_RCCEx_PeriphCLKConfig+0x47a8>)
3400dce8:	429a      	cmp	r2, r3
3400dcea:	d004      	beq.n	3400dcf6 <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400dcec:	f240 610c 	movw	r1, #1548	@ 0x60c
3400dcf0:	48a3      	ldr	r0, [pc, #652]	@ (3400df80 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400dcf2:	f7f3 fd97 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
3400dcf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcfa:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dcfe:	4b9b      	ldr	r3, [pc, #620]	@ (3400df6c <HAL_RCCEx_PeriphCLKConfig+0x4798>)
3400dd00:	429a      	cmp	r2, r3
3400dd02:	d142      	bne.n	3400dd8a <HAL_RCCEx_PeriphCLKConfig+0x45b6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400dd04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dd0a:	2b00      	cmp	r3, #0
3400dd0c:	d016      	beq.n	3400dd3c <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400dd0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dd14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dd18:	d010      	beq.n	3400dd3c <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400dd1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dd20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dd24:	d00a      	beq.n	3400dd3c <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400dd26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dd2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dd30:	d004      	beq.n	3400dd3c <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400dd32:	f240 6111 	movw	r1, #1553	@ 0x611
3400dd36:	4892      	ldr	r0, [pc, #584]	@ (3400df80 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400dd38:	f7f3 fd74 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400dd3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dd42:	2b00      	cmp	r3, #0
3400dd44:	d005      	beq.n	3400dd52 <HAL_RCCEx_PeriphCLKConfig+0x457e>
3400dd46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dd4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dd50:	d904      	bls.n	3400dd5c <HAL_RCCEx_PeriphCLKConfig+0x4588>
3400dd52:	f240 6112 	movw	r1, #1554	@ 0x612
3400dd56:	488a      	ldr	r0, [pc, #552]	@ (3400df80 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400dd58:	f7f3 fd64 	bl	34001824 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400dd5c:	4b89      	ldr	r3, [pc, #548]	@ (3400df84 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400dd5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400dd62:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dd66:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dd6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400dd70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dd76:	3b01      	subs	r3, #1
3400dd78:	041b      	lsls	r3, r3, #16
3400dd7a:	4313      	orrs	r3, r2
3400dd7c:	4a81      	ldr	r2, [pc, #516]	@ (3400df84 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400dd7e:	430b      	orrs	r3, r1
3400dd80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400dd84:	f7fb fa04 	bl	34009190 <LL_RCC_IC8_Enable>
3400dd88:	e052      	b.n	3400de30 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
3400dd8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd8e:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dd92:	4b77      	ldr	r3, [pc, #476]	@ (3400df70 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
3400dd94:	429a      	cmp	r2, r3
3400dd96:	d142      	bne.n	3400de1e <HAL_RCCEx_PeriphCLKConfig+0x464a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400dd98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dd9e:	2b00      	cmp	r3, #0
3400dda0:	d016      	beq.n	3400ddd0 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400dda2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dda6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dda8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ddac:	d010      	beq.n	3400ddd0 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400ddae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ddb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ddb8:	d00a      	beq.n	3400ddd0 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400ddba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ddc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ddc4:	d004      	beq.n	3400ddd0 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400ddc6:	f240 611e 	movw	r1, #1566	@ 0x61e
3400ddca:	486d      	ldr	r0, [pc, #436]	@ (3400df80 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400ddcc:	f7f3 fd2a 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400ddd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ddd6:	2b00      	cmp	r3, #0
3400ddd8:	d005      	beq.n	3400dde6 <HAL_RCCEx_PeriphCLKConfig+0x4612>
3400ddda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400dde0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dde4:	d904      	bls.n	3400ddf0 <HAL_RCCEx_PeriphCLKConfig+0x461c>
3400dde6:	f240 611f 	movw	r1, #1567	@ 0x61f
3400ddea:	4865      	ldr	r0, [pc, #404]	@ (3400df80 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400ddec:	f7f3 fd1a 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ddf0:	4b64      	ldr	r3, [pc, #400]	@ (3400df84 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400ddf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ddf6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ddfa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ddfe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400de04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400de0a:	3b01      	subs	r3, #1
3400de0c:	041b      	lsls	r3, r3, #16
3400de0e:	4313      	orrs	r3, r2
3400de10:	4a5c      	ldr	r2, [pc, #368]	@ (3400df84 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400de12:	430b      	orrs	r3, r1
3400de14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400de18:	f7fb f9fa 	bl	34009210 <LL_RCC_IC9_Enable>
3400de1c:	e008      	b.n	3400de30 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
3400de1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de22:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400de26:	4b50      	ldr	r3, [pc, #320]	@ (3400df68 <HAL_RCCEx_PeriphCLKConfig+0x4794>)
3400de28:	429a      	cmp	r2, r3
3400de2a:	d101      	bne.n	3400de30 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    {
      LL_RCC_CLKP_Enable();
3400de2c:	f7fb fcb0 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
3400de30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de34:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
3400de38:	4618      	mov	r0, r3
3400de3a:	f7fa fc41 	bl	340086c0 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
3400de3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de42:	e9d3 2300 	ldrd	r2, r3, [r3]
3400de46:	2100      	movs	r1, #0
3400de48:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
3400de4c:	f003 0304 	and.w	r3, r3, #4
3400de50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3400de54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
3400de58:	4603      	mov	r3, r0
3400de5a:	460a      	mov	r2, r1
3400de5c:	4313      	orrs	r3, r2
3400de5e:	f000 80fb 	beq.w	3400e058 <HAL_RCCEx_PeriphCLKConfig+0x4884>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
3400de62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de66:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400de6a:	4b47      	ldr	r3, [pc, #284]	@ (3400df88 <HAL_RCCEx_PeriphCLKConfig+0x47b4>)
3400de6c:	429a      	cmp	r2, r3
3400de6e:	d02e      	beq.n	3400dece <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400de70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de74:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400de78:	4b44      	ldr	r3, [pc, #272]	@ (3400df8c <HAL_RCCEx_PeriphCLKConfig+0x47b8>)
3400de7a:	429a      	cmp	r2, r3
3400de7c:	d027      	beq.n	3400dece <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400de7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de82:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400de86:	4b42      	ldr	r3, [pc, #264]	@ (3400df90 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
3400de88:	429a      	cmp	r2, r3
3400de8a:	d020      	beq.n	3400dece <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400de8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de90:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400de94:	4b3f      	ldr	r3, [pc, #252]	@ (3400df94 <HAL_RCCEx_PeriphCLKConfig+0x47c0>)
3400de96:	429a      	cmp	r2, r3
3400de98:	d019      	beq.n	3400dece <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400de9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de9e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400dea2:	4b3d      	ldr	r3, [pc, #244]	@ (3400df98 <HAL_RCCEx_PeriphCLKConfig+0x47c4>)
3400dea4:	429a      	cmp	r2, r3
3400dea6:	d012      	beq.n	3400dece <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400dea8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deac:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400deb0:	4b3a      	ldr	r3, [pc, #232]	@ (3400df9c <HAL_RCCEx_PeriphCLKConfig+0x47c8>)
3400deb2:	429a      	cmp	r2, r3
3400deb4:	d00b      	beq.n	3400dece <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400deb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deba:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400debe:	4b38      	ldr	r3, [pc, #224]	@ (3400dfa0 <HAL_RCCEx_PeriphCLKConfig+0x47cc>)
3400dec0:	429a      	cmp	r2, r3
3400dec2:	d004      	beq.n	3400dece <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400dec4:	f240 6139 	movw	r1, #1593	@ 0x639
3400dec8:	482d      	ldr	r0, [pc, #180]	@ (3400df80 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400deca:	f7f3 fcab 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3400dece:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ded2:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400ded6:	4b2e      	ldr	r3, [pc, #184]	@ (3400df90 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
3400ded8:	429a      	cmp	r2, r3
3400deda:	d163      	bne.n	3400dfa4 <HAL_RCCEx_PeriphCLKConfig+0x47d0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400dedc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dee2:	2b00      	cmp	r3, #0
3400dee4:	d016      	beq.n	3400df14 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400dee6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400deec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400def0:	d010      	beq.n	3400df14 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400def2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400def6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400def8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400defc:	d00a      	beq.n	3400df14 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400defe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400df04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400df08:	d004      	beq.n	3400df14 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400df0a:	f240 613e 	movw	r1, #1598	@ 0x63e
3400df0e:	481c      	ldr	r0, [pc, #112]	@ (3400df80 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400df10:	f7f3 fc88 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400df14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400df1a:	2b00      	cmp	r3, #0
3400df1c:	d005      	beq.n	3400df2a <HAL_RCCEx_PeriphCLKConfig+0x4756>
3400df1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400df24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400df28:	d904      	bls.n	3400df34 <HAL_RCCEx_PeriphCLKConfig+0x4760>
3400df2a:	f240 613f 	movw	r1, #1599	@ 0x63f
3400df2e:	4814      	ldr	r0, [pc, #80]	@ (3400df80 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400df30:	f7f3 fc78 	bl	34001824 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400df34:	4b13      	ldr	r3, [pc, #76]	@ (3400df84 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400df36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400df3a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400df3e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400df42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400df48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400df4e:	3b01      	subs	r3, #1
3400df50:	041b      	lsls	r3, r3, #16
3400df52:	4313      	orrs	r3, r2
3400df54:	4a0b      	ldr	r2, [pc, #44]	@ (3400df84 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400df56:	430b      	orrs	r3, r1
3400df58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400df5c:	f7fb f918 	bl	34009190 <LL_RCC_IC8_Enable>
3400df60:	e073      	b.n	3400e04a <HAL_RCCEx_PeriphCLKConfig+0x4876>
3400df62:	bf00      	nop
3400df64:	07000420 	.word	0x07000420
3400df68:	07010420 	.word	0x07010420
3400df6c:	07020420 	.word	0x07020420
3400df70:	07030420 	.word	0x07030420
3400df74:	07040420 	.word	0x07040420
3400df78:	07050420 	.word	0x07050420
3400df7c:	07060420 	.word	0x07060420
3400df80:	3401cebc 	.word	0x3401cebc
3400df84:	56028000 	.word	0x56028000
3400df88:	07000820 	.word	0x07000820
3400df8c:	07010820 	.word	0x07010820
3400df90:	07020820 	.word	0x07020820
3400df94:	07030820 	.word	0x07030820
3400df98:	07040820 	.word	0x07040820
3400df9c:	07050820 	.word	0x07050820
3400dfa0:	07060820 	.word	0x07060820
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
3400dfa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfa8:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400dfac:	4b98      	ldr	r3, [pc, #608]	@ (3400e210 <HAL_RCCEx_PeriphCLKConfig+0x4a3c>)
3400dfae:	429a      	cmp	r2, r3
3400dfb0:	d142      	bne.n	3400e038 <HAL_RCCEx_PeriphCLKConfig+0x4864>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400dfb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfb8:	2b00      	cmp	r3, #0
3400dfba:	d016      	beq.n	3400dfea <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400dfbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dfc6:	d010      	beq.n	3400dfea <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400dfc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dfd2:	d00a      	beq.n	3400dfea <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400dfd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dfde:	d004      	beq.n	3400dfea <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400dfe0:	f240 614b 	movw	r1, #1611	@ 0x64b
3400dfe4:	488b      	ldr	r0, [pc, #556]	@ (3400e214 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400dfe6:	f7f3 fc1d 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400dfea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400dff0:	2b00      	cmp	r3, #0
3400dff2:	d005      	beq.n	3400e000 <HAL_RCCEx_PeriphCLKConfig+0x482c>
3400dff4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400dffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dffe:	d904      	bls.n	3400e00a <HAL_RCCEx_PeriphCLKConfig+0x4836>
3400e000:	f240 614c 	movw	r1, #1612	@ 0x64c
3400e004:	4883      	ldr	r0, [pc, #524]	@ (3400e214 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e006:	f7f3 fc0d 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e00a:	4b83      	ldr	r3, [pc, #524]	@ (3400e218 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e00c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e010:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e014:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e018:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e01c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e01e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e024:	3b01      	subs	r3, #1
3400e026:	041b      	lsls	r3, r3, #16
3400e028:	4313      	orrs	r3, r2
3400e02a:	4a7b      	ldr	r2, [pc, #492]	@ (3400e218 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e02c:	430b      	orrs	r3, r1
3400e02e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e032:	f7fb f8ed 	bl	34009210 <LL_RCC_IC9_Enable>
3400e036:	e008      	b.n	3400e04a <HAL_RCCEx_PeriphCLKConfig+0x4876>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3400e038:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e03c:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e040:	4b76      	ldr	r3, [pc, #472]	@ (3400e21c <HAL_RCCEx_PeriphCLKConfig+0x4a48>)
3400e042:	429a      	cmp	r2, r3
3400e044:	d101      	bne.n	3400e04a <HAL_RCCEx_PeriphCLKConfig+0x4876>
    {
      LL_RCC_CLKP_Enable();
3400e046:	f7fb fba3 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
3400e04a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e04e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
3400e052:	4618      	mov	r0, r3
3400e054:	f7fa fb34 	bl	340086c0 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
3400e058:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e05c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e060:	2100      	movs	r1, #0
3400e062:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
3400e066:	f003 0308 	and.w	r3, r3, #8
3400e06a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
3400e06e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
3400e072:	4603      	mov	r3, r0
3400e074:	460a      	mov	r2, r1
3400e076:	4313      	orrs	r3, r2
3400e078:	f000 80f0 	beq.w	3400e25c <HAL_RCCEx_PeriphCLKConfig+0x4a88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
3400e07c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e080:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e084:	4b66      	ldr	r3, [pc, #408]	@ (3400e220 <HAL_RCCEx_PeriphCLKConfig+0x4a4c>)
3400e086:	429a      	cmp	r2, r3
3400e088:	d02e      	beq.n	3400e0e8 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e08a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e08e:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e092:	4b64      	ldr	r3, [pc, #400]	@ (3400e224 <HAL_RCCEx_PeriphCLKConfig+0x4a50>)
3400e094:	429a      	cmp	r2, r3
3400e096:	d027      	beq.n	3400e0e8 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e098:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e09c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e0a0:	4b61      	ldr	r3, [pc, #388]	@ (3400e228 <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
3400e0a2:	429a      	cmp	r2, r3
3400e0a4:	d020      	beq.n	3400e0e8 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e0a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0aa:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e0ae:	4b5f      	ldr	r3, [pc, #380]	@ (3400e22c <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
3400e0b0:	429a      	cmp	r2, r3
3400e0b2:	d019      	beq.n	3400e0e8 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e0b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0b8:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e0bc:	4b5c      	ldr	r3, [pc, #368]	@ (3400e230 <HAL_RCCEx_PeriphCLKConfig+0x4a5c>)
3400e0be:	429a      	cmp	r2, r3
3400e0c0:	d012      	beq.n	3400e0e8 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e0c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0c6:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e0ca:	4b5a      	ldr	r3, [pc, #360]	@ (3400e234 <HAL_RCCEx_PeriphCLKConfig+0x4a60>)
3400e0cc:	429a      	cmp	r2, r3
3400e0ce:	d00b      	beq.n	3400e0e8 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e0d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0d4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e0d8:	4b57      	ldr	r3, [pc, #348]	@ (3400e238 <HAL_RCCEx_PeriphCLKConfig+0x4a64>)
3400e0da:	429a      	cmp	r2, r3
3400e0dc:	d004      	beq.n	3400e0e8 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e0de:	f240 6166 	movw	r1, #1638	@ 0x666
3400e0e2:	484c      	ldr	r0, [pc, #304]	@ (3400e214 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e0e4:	f7f3 fb9e 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3400e0e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0ec:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e0f0:	4b4d      	ldr	r3, [pc, #308]	@ (3400e228 <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
3400e0f2:	429a      	cmp	r2, r3
3400e0f4:	d142      	bne.n	3400e17c <HAL_RCCEx_PeriphCLKConfig+0x49a8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400e0f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e0fc:	2b00      	cmp	r3, #0
3400e0fe:	d016      	beq.n	3400e12e <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e100:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e10a:	d010      	beq.n	3400e12e <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e10c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e116:	d00a      	beq.n	3400e12e <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e118:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e11c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e11e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e122:	d004      	beq.n	3400e12e <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e124:	f240 616b 	movw	r1, #1643	@ 0x66b
3400e128:	483a      	ldr	r0, [pc, #232]	@ (3400e214 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e12a:	f7f3 fb7b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400e12e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e134:	2b00      	cmp	r3, #0
3400e136:	d005      	beq.n	3400e144 <HAL_RCCEx_PeriphCLKConfig+0x4970>
3400e138:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e13e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e142:	d904      	bls.n	3400e14e <HAL_RCCEx_PeriphCLKConfig+0x497a>
3400e144:	f240 616c 	movw	r1, #1644	@ 0x66c
3400e148:	4832      	ldr	r0, [pc, #200]	@ (3400e214 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e14a:	f7f3 fb6b 	bl	34001824 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400e14e:	4b32      	ldr	r3, [pc, #200]	@ (3400e218 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e154:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e158:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e15c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e160:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400e162:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e168:	3b01      	subs	r3, #1
3400e16a:	041b      	lsls	r3, r3, #16
3400e16c:	4313      	orrs	r3, r2
3400e16e:	4a2a      	ldr	r2, [pc, #168]	@ (3400e218 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e170:	430b      	orrs	r3, r1
3400e172:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400e176:	f7fb f80b 	bl	34009190 <LL_RCC_IC8_Enable>
3400e17a:	e068      	b.n	3400e24e <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
3400e17c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e180:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e184:	4b29      	ldr	r3, [pc, #164]	@ (3400e22c <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
3400e186:	429a      	cmp	r2, r3
3400e188:	d158      	bne.n	3400e23c <HAL_RCCEx_PeriphCLKConfig+0x4a68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e18a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e18e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e190:	2b00      	cmp	r3, #0
3400e192:	d016      	beq.n	3400e1c2 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e194:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e19a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e19e:	d010      	beq.n	3400e1c2 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e1a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e1a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e1aa:	d00a      	beq.n	3400e1c2 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e1ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e1b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e1b6:	d004      	beq.n	3400e1c2 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e1b8:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
3400e1bc:	4815      	ldr	r0, [pc, #84]	@ (3400e214 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e1be:	f7f3 fb31 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e1c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e1c8:	2b00      	cmp	r3, #0
3400e1ca:	d005      	beq.n	3400e1d8 <HAL_RCCEx_PeriphCLKConfig+0x4a04>
3400e1cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e1d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e1d6:	d904      	bls.n	3400e1e2 <HAL_RCCEx_PeriphCLKConfig+0x4a0e>
3400e1d8:	f240 6179 	movw	r1, #1657	@ 0x679
3400e1dc:	480d      	ldr	r0, [pc, #52]	@ (3400e214 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e1de:	f7f3 fb21 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e1e2:	4b0d      	ldr	r3, [pc, #52]	@ (3400e218 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e1e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e1e8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e1ec:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e1f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e1f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e1fc:	3b01      	subs	r3, #1
3400e1fe:	041b      	lsls	r3, r3, #16
3400e200:	4313      	orrs	r3, r2
3400e202:	4a05      	ldr	r2, [pc, #20]	@ (3400e218 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e204:	430b      	orrs	r3, r1
3400e206:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e20a:	f7fb f801 	bl	34009210 <LL_RCC_IC9_Enable>
3400e20e:	e01e      	b.n	3400e24e <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
3400e210:	07030820 	.word	0x07030820
3400e214:	3401cebc 	.word	0x3401cebc
3400e218:	56028000 	.word	0x56028000
3400e21c:	07010820 	.word	0x07010820
3400e220:	07000c20 	.word	0x07000c20
3400e224:	07010c20 	.word	0x07010c20
3400e228:	07020c20 	.word	0x07020c20
3400e22c:	07030c20 	.word	0x07030c20
3400e230:	07040c20 	.word	0x07040c20
3400e234:	07050c20 	.word	0x07050c20
3400e238:	07060c20 	.word	0x07060c20
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
3400e23c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e240:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e244:	4b73      	ldr	r3, [pc, #460]	@ (3400e414 <HAL_RCCEx_PeriphCLKConfig+0x4c40>)
3400e246:	429a      	cmp	r2, r3
3400e248:	d101      	bne.n	3400e24e <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    {
      LL_RCC_CLKP_Enable();
3400e24a:	f7fb faa1 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
3400e24e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e252:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
3400e256:	4618      	mov	r0, r3
3400e258:	f7fa fa32 	bl	340086c0 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
3400e25c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e260:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e264:	2100      	movs	r1, #0
3400e266:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
3400e26a:	f003 0310 	and.w	r3, r3, #16
3400e26e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
3400e272:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
3400e276:	4603      	mov	r3, r0
3400e278:	460a      	mov	r2, r1
3400e27a:	4313      	orrs	r3, r2
3400e27c:	f000 80ee 	beq.w	3400e45c <HAL_RCCEx_PeriphCLKConfig+0x4c88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
3400e280:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e284:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e288:	4b63      	ldr	r3, [pc, #396]	@ (3400e418 <HAL_RCCEx_PeriphCLKConfig+0x4c44>)
3400e28a:	429a      	cmp	r2, r3
3400e28c:	d02e      	beq.n	3400e2ec <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e28e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e292:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e296:	4b61      	ldr	r3, [pc, #388]	@ (3400e41c <HAL_RCCEx_PeriphCLKConfig+0x4c48>)
3400e298:	429a      	cmp	r2, r3
3400e29a:	d027      	beq.n	3400e2ec <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e29c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2a0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e2a4:	4b5e      	ldr	r3, [pc, #376]	@ (3400e420 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
3400e2a6:	429a      	cmp	r2, r3
3400e2a8:	d020      	beq.n	3400e2ec <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e2aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2ae:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e2b2:	4b5c      	ldr	r3, [pc, #368]	@ (3400e424 <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
3400e2b4:	429a      	cmp	r2, r3
3400e2b6:	d019      	beq.n	3400e2ec <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e2b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2bc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e2c0:	4b59      	ldr	r3, [pc, #356]	@ (3400e428 <HAL_RCCEx_PeriphCLKConfig+0x4c54>)
3400e2c2:	429a      	cmp	r2, r3
3400e2c4:	d012      	beq.n	3400e2ec <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e2c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2ca:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e2ce:	4b57      	ldr	r3, [pc, #348]	@ (3400e42c <HAL_RCCEx_PeriphCLKConfig+0x4c58>)
3400e2d0:	429a      	cmp	r2, r3
3400e2d2:	d00b      	beq.n	3400e2ec <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e2d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2d8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e2dc:	4b54      	ldr	r3, [pc, #336]	@ (3400e430 <HAL_RCCEx_PeriphCLKConfig+0x4c5c>)
3400e2de:	429a      	cmp	r2, r3
3400e2e0:	d004      	beq.n	3400e2ec <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e2e2:	f240 6193 	movw	r1, #1683	@ 0x693
3400e2e6:	4853      	ldr	r0, [pc, #332]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e2e8:	f7f3 fa9c 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
3400e2ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2f0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e2f4:	4b4a      	ldr	r3, [pc, #296]	@ (3400e420 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
3400e2f6:	429a      	cmp	r2, r3
3400e2f8:	d142      	bne.n	3400e380 <HAL_RCCEx_PeriphCLKConfig+0x4bac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e2fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e300:	2b00      	cmp	r3, #0
3400e302:	d016      	beq.n	3400e332 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e304:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e30a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e30e:	d010      	beq.n	3400e332 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e310:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e31a:	d00a      	beq.n	3400e332 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e31c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e322:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e326:	d004      	beq.n	3400e332 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e328:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
3400e32c:	4841      	ldr	r0, [pc, #260]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e32e:	f7f3 fa79 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e332:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e338:	2b00      	cmp	r3, #0
3400e33a:	d005      	beq.n	3400e348 <HAL_RCCEx_PeriphCLKConfig+0x4b74>
3400e33c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e346:	d904      	bls.n	3400e352 <HAL_RCCEx_PeriphCLKConfig+0x4b7e>
3400e348:	f240 6199 	movw	r1, #1689	@ 0x699
3400e34c:	4839      	ldr	r0, [pc, #228]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e34e:	f7f3 fa69 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e352:	4b39      	ldr	r3, [pc, #228]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e354:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e358:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e35c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e360:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e364:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e366:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e36a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e36c:	3b01      	subs	r3, #1
3400e36e:	041b      	lsls	r3, r3, #16
3400e370:	4313      	orrs	r3, r2
3400e372:	4a31      	ldr	r2, [pc, #196]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e374:	430b      	orrs	r3, r1
3400e376:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e37a:	f7fa ff49 	bl	34009210 <LL_RCC_IC9_Enable>
3400e37e:	e066      	b.n	3400e44e <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
3400e380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e384:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e388:	4b26      	ldr	r3, [pc, #152]	@ (3400e424 <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
3400e38a:	429a      	cmp	r2, r3
3400e38c:	d156      	bne.n	3400e43c <HAL_RCCEx_PeriphCLKConfig+0x4c68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e38e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e394:	2b00      	cmp	r3, #0
3400e396:	d016      	beq.n	3400e3c6 <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e398:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e39c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e39e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e3a2:	d010      	beq.n	3400e3c6 <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e3a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e3aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e3ae:	d00a      	beq.n	3400e3c6 <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e3b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e3b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e3ba:	d004      	beq.n	3400e3c6 <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e3bc:	f240 61a5 	movw	r1, #1701	@ 0x6a5
3400e3c0:	481c      	ldr	r0, [pc, #112]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e3c2:	f7f3 fa2f 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e3c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e3cc:	2b00      	cmp	r3, #0
3400e3ce:	d005      	beq.n	3400e3dc <HAL_RCCEx_PeriphCLKConfig+0x4c08>
3400e3d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e3d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e3da:	d904      	bls.n	3400e3e6 <HAL_RCCEx_PeriphCLKConfig+0x4c12>
3400e3dc:	f240 61a6 	movw	r1, #1702	@ 0x6a6
3400e3e0:	4814      	ldr	r0, [pc, #80]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e3e2:	f7f3 fa1f 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e3e6:	4b14      	ldr	r3, [pc, #80]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e3e8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e3ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e3f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e3f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e3fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e400:	3b01      	subs	r3, #1
3400e402:	041b      	lsls	r3, r3, #16
3400e404:	4313      	orrs	r3, r2
3400e406:	4a0c      	ldr	r2, [pc, #48]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e408:	430b      	orrs	r3, r1
3400e40a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400e40e:	f7fa ffff 	bl	34009410 <LL_RCC_IC14_Enable>
3400e412:	e01c      	b.n	3400e44e <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
3400e414:	07010c20 	.word	0x07010c20
3400e418:	07001020 	.word	0x07001020
3400e41c:	07011020 	.word	0x07011020
3400e420:	07021020 	.word	0x07021020
3400e424:	07031020 	.word	0x07031020
3400e428:	07041020 	.word	0x07041020
3400e42c:	07051020 	.word	0x07051020
3400e430:	07061020 	.word	0x07061020
3400e434:	3401cebc 	.word	0x3401cebc
3400e438:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
3400e43c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e440:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e444:	4b73      	ldr	r3, [pc, #460]	@ (3400e614 <HAL_RCCEx_PeriphCLKConfig+0x4e40>)
3400e446:	429a      	cmp	r2, r3
3400e448:	d101      	bne.n	3400e44e <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    {
      LL_RCC_CLKP_Enable();
3400e44a:	f7fb f9a1 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
3400e44e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e452:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
3400e456:	4618      	mov	r0, r3
3400e458:	f7fa f932 	bl	340086c0 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3400e45c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e460:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e464:	2100      	movs	r1, #0
3400e466:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
3400e46a:	f003 0320 	and.w	r3, r3, #32
3400e46e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
3400e472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
3400e476:	4603      	mov	r3, r0
3400e478:	460a      	mov	r2, r1
3400e47a:	4313      	orrs	r3, r2
3400e47c:	f000 80ee 	beq.w	3400e65c <HAL_RCCEx_PeriphCLKConfig+0x4e88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
3400e480:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e484:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e488:	4b63      	ldr	r3, [pc, #396]	@ (3400e618 <HAL_RCCEx_PeriphCLKConfig+0x4e44>)
3400e48a:	429a      	cmp	r2, r3
3400e48c:	d02e      	beq.n	3400e4ec <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e48e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e492:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e496:	4b61      	ldr	r3, [pc, #388]	@ (3400e61c <HAL_RCCEx_PeriphCLKConfig+0x4e48>)
3400e498:	429a      	cmp	r2, r3
3400e49a:	d027      	beq.n	3400e4ec <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e49c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4a0:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e4a4:	4b5e      	ldr	r3, [pc, #376]	@ (3400e620 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
3400e4a6:	429a      	cmp	r2, r3
3400e4a8:	d020      	beq.n	3400e4ec <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e4aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4ae:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e4b2:	4b5c      	ldr	r3, [pc, #368]	@ (3400e624 <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
3400e4b4:	429a      	cmp	r2, r3
3400e4b6:	d019      	beq.n	3400e4ec <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e4b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4bc:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e4c0:	4b59      	ldr	r3, [pc, #356]	@ (3400e628 <HAL_RCCEx_PeriphCLKConfig+0x4e54>)
3400e4c2:	429a      	cmp	r2, r3
3400e4c4:	d012      	beq.n	3400e4ec <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e4c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4ca:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e4ce:	4b57      	ldr	r3, [pc, #348]	@ (3400e62c <HAL_RCCEx_PeriphCLKConfig+0x4e58>)
3400e4d0:	429a      	cmp	r2, r3
3400e4d2:	d00b      	beq.n	3400e4ec <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e4d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4d8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e4dc:	4b54      	ldr	r3, [pc, #336]	@ (3400e630 <HAL_RCCEx_PeriphCLKConfig+0x4e5c>)
3400e4de:	429a      	cmp	r2, r3
3400e4e0:	d004      	beq.n	3400e4ec <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e4e2:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
3400e4e6:	4853      	ldr	r0, [pc, #332]	@ (3400e634 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e4e8:	f7f3 f99c 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
3400e4ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4f0:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e4f4:	4b4a      	ldr	r3, [pc, #296]	@ (3400e620 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
3400e4f6:	429a      	cmp	r2, r3
3400e4f8:	d142      	bne.n	3400e580 <HAL_RCCEx_PeriphCLKConfig+0x4dac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e4fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e500:	2b00      	cmp	r3, #0
3400e502:	d016      	beq.n	3400e532 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e504:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e50a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e50e:	d010      	beq.n	3400e532 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e510:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e51a:	d00a      	beq.n	3400e532 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e51c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e522:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e526:	d004      	beq.n	3400e532 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e528:	f240 61c5 	movw	r1, #1733	@ 0x6c5
3400e52c:	4841      	ldr	r0, [pc, #260]	@ (3400e634 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e52e:	f7f3 f979 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e532:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e538:	2b00      	cmp	r3, #0
3400e53a:	d005      	beq.n	3400e548 <HAL_RCCEx_PeriphCLKConfig+0x4d74>
3400e53c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e546:	d904      	bls.n	3400e552 <HAL_RCCEx_PeriphCLKConfig+0x4d7e>
3400e548:	f240 61c6 	movw	r1, #1734	@ 0x6c6
3400e54c:	4839      	ldr	r0, [pc, #228]	@ (3400e634 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e54e:	f7f3 f969 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e552:	4b39      	ldr	r3, [pc, #228]	@ (3400e638 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e554:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e558:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e55c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e560:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e564:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e566:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e56a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e56c:	3b01      	subs	r3, #1
3400e56e:	041b      	lsls	r3, r3, #16
3400e570:	4313      	orrs	r3, r2
3400e572:	4a31      	ldr	r2, [pc, #196]	@ (3400e638 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e574:	430b      	orrs	r3, r1
3400e576:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e57a:	f7fa fe49 	bl	34009210 <LL_RCC_IC9_Enable>
3400e57e:	e066      	b.n	3400e64e <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
3400e580:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e584:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e588:	4b26      	ldr	r3, [pc, #152]	@ (3400e624 <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
3400e58a:	429a      	cmp	r2, r3
3400e58c:	d156      	bne.n	3400e63c <HAL_RCCEx_PeriphCLKConfig+0x4e68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e58e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e594:	2b00      	cmp	r3, #0
3400e596:	d016      	beq.n	3400e5c6 <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e598:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e59c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e59e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e5a2:	d010      	beq.n	3400e5c6 <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e5a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e5aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e5ae:	d00a      	beq.n	3400e5c6 <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e5b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e5b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e5ba:	d004      	beq.n	3400e5c6 <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e5bc:	f240 61d2 	movw	r1, #1746	@ 0x6d2
3400e5c0:	481c      	ldr	r0, [pc, #112]	@ (3400e634 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e5c2:	f7f3 f92f 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e5c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e5cc:	2b00      	cmp	r3, #0
3400e5ce:	d005      	beq.n	3400e5dc <HAL_RCCEx_PeriphCLKConfig+0x4e08>
3400e5d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e5d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e5da:	d904      	bls.n	3400e5e6 <HAL_RCCEx_PeriphCLKConfig+0x4e12>
3400e5dc:	f240 61d3 	movw	r1, #1747	@ 0x6d3
3400e5e0:	4814      	ldr	r0, [pc, #80]	@ (3400e634 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e5e2:	f7f3 f91f 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e5e6:	4b14      	ldr	r3, [pc, #80]	@ (3400e638 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e5e8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e5ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e5f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e5f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e5fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e600:	3b01      	subs	r3, #1
3400e602:	041b      	lsls	r3, r3, #16
3400e604:	4313      	orrs	r3, r2
3400e606:	4a0c      	ldr	r2, [pc, #48]	@ (3400e638 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e608:	430b      	orrs	r3, r1
3400e60a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400e60e:	f7fa feff 	bl	34009410 <LL_RCC_IC14_Enable>
3400e612:	e01c      	b.n	3400e64e <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
3400e614:	07011020 	.word	0x07011020
3400e618:	07001420 	.word	0x07001420
3400e61c:	07011420 	.word	0x07011420
3400e620:	07021420 	.word	0x07021420
3400e624:	07031420 	.word	0x07031420
3400e628:	07041420 	.word	0x07041420
3400e62c:	07051420 	.word	0x07051420
3400e630:	07061420 	.word	0x07061420
3400e634:	3401cebc 	.word	0x3401cebc
3400e638:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
3400e63c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e640:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e644:	4b72      	ldr	r3, [pc, #456]	@ (3400e810 <HAL_RCCEx_PeriphCLKConfig+0x503c>)
3400e646:	429a      	cmp	r2, r3
3400e648:	d101      	bne.n	3400e64e <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    {
      LL_RCC_CLKP_Enable();
3400e64a:	f7fb f8a1 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
3400e64e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e652:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400e656:	4618      	mov	r0, r3
3400e658:	f7fa f832 	bl	340086c0 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
3400e65c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e660:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e664:	2100      	movs	r1, #0
3400e666:	67b9      	str	r1, [r7, #120]	@ 0x78
3400e668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400e66c:	67fb      	str	r3, [r7, #124]	@ 0x7c
3400e66e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
3400e672:	4603      	mov	r3, r0
3400e674:	460a      	mov	r2, r1
3400e676:	4313      	orrs	r3, r2
3400e678:	f000 80ee 	beq.w	3400e858 <HAL_RCCEx_PeriphCLKConfig+0x5084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
3400e67c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e680:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e684:	4b63      	ldr	r3, [pc, #396]	@ (3400e814 <HAL_RCCEx_PeriphCLKConfig+0x5040>)
3400e686:	429a      	cmp	r2, r3
3400e688:	d02e      	beq.n	3400e6e8 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e68a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e68e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e692:	4b61      	ldr	r3, [pc, #388]	@ (3400e818 <HAL_RCCEx_PeriphCLKConfig+0x5044>)
3400e694:	429a      	cmp	r2, r3
3400e696:	d027      	beq.n	3400e6e8 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e698:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e69c:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e6a0:	4b5e      	ldr	r3, [pc, #376]	@ (3400e81c <HAL_RCCEx_PeriphCLKConfig+0x5048>)
3400e6a2:	429a      	cmp	r2, r3
3400e6a4:	d020      	beq.n	3400e6e8 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e6a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6aa:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e6ae:	4b5c      	ldr	r3, [pc, #368]	@ (3400e820 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
3400e6b0:	429a      	cmp	r2, r3
3400e6b2:	d019      	beq.n	3400e6e8 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e6b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6b8:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e6bc:	4b59      	ldr	r3, [pc, #356]	@ (3400e824 <HAL_RCCEx_PeriphCLKConfig+0x5050>)
3400e6be:	429a      	cmp	r2, r3
3400e6c0:	d012      	beq.n	3400e6e8 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e6c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6c6:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e6ca:	4b57      	ldr	r3, [pc, #348]	@ (3400e828 <HAL_RCCEx_PeriphCLKConfig+0x5054>)
3400e6cc:	429a      	cmp	r2, r3
3400e6ce:	d00b      	beq.n	3400e6e8 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e6d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6d4:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e6d8:	4b54      	ldr	r3, [pc, #336]	@ (3400e82c <HAL_RCCEx_PeriphCLKConfig+0x5058>)
3400e6da:	429a      	cmp	r2, r3
3400e6dc:	d004      	beq.n	3400e6e8 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e6de:	f240 61ed 	movw	r1, #1773	@ 0x6ed
3400e6e2:	4853      	ldr	r0, [pc, #332]	@ (3400e830 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e6e4:	f7f3 f89e 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3400e6e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6ec:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e6f0:	4b4a      	ldr	r3, [pc, #296]	@ (3400e81c <HAL_RCCEx_PeriphCLKConfig+0x5048>)
3400e6f2:	429a      	cmp	r2, r3
3400e6f4:	d142      	bne.n	3400e77c <HAL_RCCEx_PeriphCLKConfig+0x4fa8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400e6f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e6fc:	2b00      	cmp	r3, #0
3400e6fe:	d016      	beq.n	3400e72e <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e700:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e70a:	d010      	beq.n	3400e72e <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e70c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e712:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e716:	d00a      	beq.n	3400e72e <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e718:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e71c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e71e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e722:	d004      	beq.n	3400e72e <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e724:	f240 61f2 	movw	r1, #1778	@ 0x6f2
3400e728:	4841      	ldr	r0, [pc, #260]	@ (3400e830 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e72a:	f7f3 f87b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400e72e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e734:	2b00      	cmp	r3, #0
3400e736:	d005      	beq.n	3400e744 <HAL_RCCEx_PeriphCLKConfig+0x4f70>
3400e738:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e73c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e73e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e742:	d904      	bls.n	3400e74e <HAL_RCCEx_PeriphCLKConfig+0x4f7a>
3400e744:	f240 61f3 	movw	r1, #1779	@ 0x6f3
3400e748:	4839      	ldr	r0, [pc, #228]	@ (3400e830 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e74a:	f7f3 f86b 	bl	34001824 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400e74e:	4b39      	ldr	r3, [pc, #228]	@ (3400e834 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e754:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e758:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e75c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e760:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400e762:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e768:	3b01      	subs	r3, #1
3400e76a:	041b      	lsls	r3, r3, #16
3400e76c:	4313      	orrs	r3, r2
3400e76e:	4a31      	ldr	r2, [pc, #196]	@ (3400e834 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e770:	430b      	orrs	r3, r1
3400e772:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400e776:	f7fa fd0b 	bl	34009190 <LL_RCC_IC8_Enable>
3400e77a:	e066      	b.n	3400e84a <HAL_RCCEx_PeriphCLKConfig+0x5076>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
3400e77c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e780:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e784:	4b26      	ldr	r3, [pc, #152]	@ (3400e820 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
3400e786:	429a      	cmp	r2, r3
3400e788:	d156      	bne.n	3400e838 <HAL_RCCEx_PeriphCLKConfig+0x5064>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e78a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e78e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e790:	2b00      	cmp	r3, #0
3400e792:	d016      	beq.n	3400e7c2 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e794:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e79a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e79e:	d010      	beq.n	3400e7c2 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e7a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e7a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e7aa:	d00a      	beq.n	3400e7c2 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e7ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e7b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e7b6:	d004      	beq.n	3400e7c2 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e7b8:	f240 61ff 	movw	r1, #1791	@ 0x6ff
3400e7bc:	481c      	ldr	r0, [pc, #112]	@ (3400e830 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e7be:	f7f3 f831 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e7c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e7c8:	2b00      	cmp	r3, #0
3400e7ca:	d005      	beq.n	3400e7d8 <HAL_RCCEx_PeriphCLKConfig+0x5004>
3400e7cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e7d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e7d6:	d904      	bls.n	3400e7e2 <HAL_RCCEx_PeriphCLKConfig+0x500e>
3400e7d8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
3400e7dc:	4814      	ldr	r0, [pc, #80]	@ (3400e830 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e7de:	f7f3 f821 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e7e2:	4b14      	ldr	r3, [pc, #80]	@ (3400e834 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e7e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e7e8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e7ec:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e7f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e7f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e7fc:	3b01      	subs	r3, #1
3400e7fe:	041b      	lsls	r3, r3, #16
3400e800:	4313      	orrs	r3, r2
3400e802:	4a0c      	ldr	r2, [pc, #48]	@ (3400e834 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e804:	430b      	orrs	r3, r1
3400e806:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e80a:	f7fa fd01 	bl	34009210 <LL_RCC_IC9_Enable>
3400e80e:	e01c      	b.n	3400e84a <HAL_RCCEx_PeriphCLKConfig+0x5076>
3400e810:	07011420 	.word	0x07011420
3400e814:	07001820 	.word	0x07001820
3400e818:	07011820 	.word	0x07011820
3400e81c:	07021820 	.word	0x07021820
3400e820:	07031820 	.word	0x07031820
3400e824:	07041820 	.word	0x07041820
3400e828:	07051820 	.word	0x07051820
3400e82c:	07061820 	.word	0x07061820
3400e830:	3401cebc 	.word	0x3401cebc
3400e834:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
3400e838:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e83c:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e840:	4b72      	ldr	r3, [pc, #456]	@ (3400ea0c <HAL_RCCEx_PeriphCLKConfig+0x5238>)
3400e842:	429a      	cmp	r2, r3
3400e844:	d101      	bne.n	3400e84a <HAL_RCCEx_PeriphCLKConfig+0x5076>
    {
      LL_RCC_CLKP_Enable();
3400e846:	f7fa ffa3 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
3400e84a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e84e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400e852:	4618      	mov	r0, r3
3400e854:	f7f9 ff34 	bl	340086c0 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
3400e858:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e85c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e860:	2100      	movs	r1, #0
3400e862:	6739      	str	r1, [r7, #112]	@ 0x70
3400e864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400e868:	677b      	str	r3, [r7, #116]	@ 0x74
3400e86a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
3400e86e:	4603      	mov	r3, r0
3400e870:	460a      	mov	r2, r1
3400e872:	4313      	orrs	r3, r2
3400e874:	f000 80ee 	beq.w	3400ea54 <HAL_RCCEx_PeriphCLKConfig+0x5280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
3400e878:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e87c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e880:	4b63      	ldr	r3, [pc, #396]	@ (3400ea10 <HAL_RCCEx_PeriphCLKConfig+0x523c>)
3400e882:	429a      	cmp	r2, r3
3400e884:	d02e      	beq.n	3400e8e4 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e886:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e88a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e88e:	4b61      	ldr	r3, [pc, #388]	@ (3400ea14 <HAL_RCCEx_PeriphCLKConfig+0x5240>)
3400e890:	429a      	cmp	r2, r3
3400e892:	d027      	beq.n	3400e8e4 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e894:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e898:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e89c:	4b5e      	ldr	r3, [pc, #376]	@ (3400ea18 <HAL_RCCEx_PeriphCLKConfig+0x5244>)
3400e89e:	429a      	cmp	r2, r3
3400e8a0:	d020      	beq.n	3400e8e4 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e8a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e8aa:	4b5c      	ldr	r3, [pc, #368]	@ (3400ea1c <HAL_RCCEx_PeriphCLKConfig+0x5248>)
3400e8ac:	429a      	cmp	r2, r3
3400e8ae:	d019      	beq.n	3400e8e4 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e8b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8b4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e8b8:	4b59      	ldr	r3, [pc, #356]	@ (3400ea20 <HAL_RCCEx_PeriphCLKConfig+0x524c>)
3400e8ba:	429a      	cmp	r2, r3
3400e8bc:	d012      	beq.n	3400e8e4 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e8be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8c2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e8c6:	4b57      	ldr	r3, [pc, #348]	@ (3400ea24 <HAL_RCCEx_PeriphCLKConfig+0x5250>)
3400e8c8:	429a      	cmp	r2, r3
3400e8ca:	d00b      	beq.n	3400e8e4 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e8cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8d0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e8d4:	4b54      	ldr	r3, [pc, #336]	@ (3400ea28 <HAL_RCCEx_PeriphCLKConfig+0x5254>)
3400e8d6:	429a      	cmp	r2, r3
3400e8d8:	d004      	beq.n	3400e8e4 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e8da:	f240 711a 	movw	r1, #1818	@ 0x71a
3400e8de:	4853      	ldr	r0, [pc, #332]	@ (3400ea2c <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400e8e0:	f7f2 ffa0 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
3400e8e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8e8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e8ec:	4b4a      	ldr	r3, [pc, #296]	@ (3400ea18 <HAL_RCCEx_PeriphCLKConfig+0x5244>)
3400e8ee:	429a      	cmp	r2, r3
3400e8f0:	d142      	bne.n	3400e978 <HAL_RCCEx_PeriphCLKConfig+0x51a4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e8f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e8f8:	2b00      	cmp	r3, #0
3400e8fa:	d016      	beq.n	3400e92a <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400e8fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e906:	d010      	beq.n	3400e92a <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400e908:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e90c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e90e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e912:	d00a      	beq.n	3400e92a <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400e914:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e91a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e91e:	d004      	beq.n	3400e92a <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400e920:	f240 711f 	movw	r1, #1823	@ 0x71f
3400e924:	4841      	ldr	r0, [pc, #260]	@ (3400ea2c <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400e926:	f7f2 ff7d 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e92a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e92e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e930:	2b00      	cmp	r3, #0
3400e932:	d005      	beq.n	3400e940 <HAL_RCCEx_PeriphCLKConfig+0x516c>
3400e934:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e93a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e93e:	d904      	bls.n	3400e94a <HAL_RCCEx_PeriphCLKConfig+0x5176>
3400e940:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
3400e944:	4839      	ldr	r0, [pc, #228]	@ (3400ea2c <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400e946:	f7f2 ff6d 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e94a:	4b39      	ldr	r3, [pc, #228]	@ (3400ea30 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400e94c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e950:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e954:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e958:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e95c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e95e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e964:	3b01      	subs	r3, #1
3400e966:	041b      	lsls	r3, r3, #16
3400e968:	4313      	orrs	r3, r2
3400e96a:	4a31      	ldr	r2, [pc, #196]	@ (3400ea30 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400e96c:	430b      	orrs	r3, r1
3400e96e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e972:	f7fa fc4d 	bl	34009210 <LL_RCC_IC9_Enable>
3400e976:	e066      	b.n	3400ea46 <HAL_RCCEx_PeriphCLKConfig+0x5272>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
3400e978:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e97c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e980:	4b26      	ldr	r3, [pc, #152]	@ (3400ea1c <HAL_RCCEx_PeriphCLKConfig+0x5248>)
3400e982:	429a      	cmp	r2, r3
3400e984:	d156      	bne.n	3400ea34 <HAL_RCCEx_PeriphCLKConfig+0x5260>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e986:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e98a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e98c:	2b00      	cmp	r3, #0
3400e98e:	d016      	beq.n	3400e9be <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400e990:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e996:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e99a:	d010      	beq.n	3400e9be <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400e99c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e9a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e9a6:	d00a      	beq.n	3400e9be <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400e9a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e9ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e9b2:	d004      	beq.n	3400e9be <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400e9b4:	f240 712c 	movw	r1, #1836	@ 0x72c
3400e9b8:	481c      	ldr	r0, [pc, #112]	@ (3400ea2c <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400e9ba:	f7f2 ff33 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e9be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e9c4:	2b00      	cmp	r3, #0
3400e9c6:	d005      	beq.n	3400e9d4 <HAL_RCCEx_PeriphCLKConfig+0x5200>
3400e9c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e9ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e9d2:	d904      	bls.n	3400e9de <HAL_RCCEx_PeriphCLKConfig+0x520a>
3400e9d4:	f240 712d 	movw	r1, #1837	@ 0x72d
3400e9d8:	4814      	ldr	r0, [pc, #80]	@ (3400ea2c <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400e9da:	f7f2 ff23 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e9de:	4b14      	ldr	r3, [pc, #80]	@ (3400ea30 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400e9e0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e9e4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e9e8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e9ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e9f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e9f8:	3b01      	subs	r3, #1
3400e9fa:	041b      	lsls	r3, r3, #16
3400e9fc:	4313      	orrs	r3, r2
3400e9fe:	4a0c      	ldr	r2, [pc, #48]	@ (3400ea30 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400ea00:	430b      	orrs	r3, r1
3400ea02:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400ea06:	f7fa fd03 	bl	34009410 <LL_RCC_IC14_Enable>
3400ea0a:	e01c      	b.n	3400ea46 <HAL_RCCEx_PeriphCLKConfig+0x5272>
3400ea0c:	07011820 	.word	0x07011820
3400ea10:	07000030 	.word	0x07000030
3400ea14:	07010030 	.word	0x07010030
3400ea18:	07020030 	.word	0x07020030
3400ea1c:	07030030 	.word	0x07030030
3400ea20:	07040030 	.word	0x07040030
3400ea24:	07050030 	.word	0x07050030
3400ea28:	07060030 	.word	0x07060030
3400ea2c:	3401cebc 	.word	0x3401cebc
3400ea30:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
3400ea34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea38:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400ea3c:	4b72      	ldr	r3, [pc, #456]	@ (3400ec08 <HAL_RCCEx_PeriphCLKConfig+0x5434>)
3400ea3e:	429a      	cmp	r2, r3
3400ea40:	d101      	bne.n	3400ea46 <HAL_RCCEx_PeriphCLKConfig+0x5272>
    {
      LL_RCC_CLKP_Enable();
3400ea42:	f7fa fea5 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
3400ea46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea4a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3400ea4e:	4618      	mov	r0, r3
3400ea50:	f7f9 fe41 	bl	340086d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
3400ea54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ea5c:	2100      	movs	r1, #0
3400ea5e:	66b9      	str	r1, [r7, #104]	@ 0x68
3400ea60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400ea64:	66fb      	str	r3, [r7, #108]	@ 0x6c
3400ea66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
3400ea6a:	4603      	mov	r3, r0
3400ea6c:	460a      	mov	r2, r1
3400ea6e:	4313      	orrs	r3, r2
3400ea70:	f000 80ee 	beq.w	3400ec50 <HAL_RCCEx_PeriphCLKConfig+0x547c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
3400ea74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea78:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ea7c:	4b63      	ldr	r3, [pc, #396]	@ (3400ec0c <HAL_RCCEx_PeriphCLKConfig+0x5438>)
3400ea7e:	429a      	cmp	r2, r3
3400ea80:	d02e      	beq.n	3400eae0 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ea82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea86:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ea8a:	4b61      	ldr	r3, [pc, #388]	@ (3400ec10 <HAL_RCCEx_PeriphCLKConfig+0x543c>)
3400ea8c:	429a      	cmp	r2, r3
3400ea8e:	d027      	beq.n	3400eae0 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ea90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea94:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ea98:	4b5e      	ldr	r3, [pc, #376]	@ (3400ec14 <HAL_RCCEx_PeriphCLKConfig+0x5440>)
3400ea9a:	429a      	cmp	r2, r3
3400ea9c:	d020      	beq.n	3400eae0 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ea9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eaa2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400eaa6:	4b5c      	ldr	r3, [pc, #368]	@ (3400ec18 <HAL_RCCEx_PeriphCLKConfig+0x5444>)
3400eaa8:	429a      	cmp	r2, r3
3400eaaa:	d019      	beq.n	3400eae0 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400eaac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eab0:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400eab4:	4b59      	ldr	r3, [pc, #356]	@ (3400ec1c <HAL_RCCEx_PeriphCLKConfig+0x5448>)
3400eab6:	429a      	cmp	r2, r3
3400eab8:	d012      	beq.n	3400eae0 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400eaba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eabe:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400eac2:	4b57      	ldr	r3, [pc, #348]	@ (3400ec20 <HAL_RCCEx_PeriphCLKConfig+0x544c>)
3400eac4:	429a      	cmp	r2, r3
3400eac6:	d00b      	beq.n	3400eae0 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400eac8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eacc:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ead0:	4b54      	ldr	r3, [pc, #336]	@ (3400ec24 <HAL_RCCEx_PeriphCLKConfig+0x5450>)
3400ead2:	429a      	cmp	r2, r3
3400ead4:	d004      	beq.n	3400eae0 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ead6:	f240 7147 	movw	r1, #1863	@ 0x747
3400eada:	4853      	ldr	r0, [pc, #332]	@ (3400ec28 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400eadc:	f7f2 fea2 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
3400eae0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eae4:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400eae8:	4b4a      	ldr	r3, [pc, #296]	@ (3400ec14 <HAL_RCCEx_PeriphCLKConfig+0x5440>)
3400eaea:	429a      	cmp	r2, r3
3400eaec:	d142      	bne.n	3400eb74 <HAL_RCCEx_PeriphCLKConfig+0x53a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400eaee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eaf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eaf4:	2b00      	cmp	r3, #0
3400eaf6:	d016      	beq.n	3400eb26 <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400eaf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eafc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eafe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400eb02:	d010      	beq.n	3400eb26 <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400eb04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eb0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400eb0e:	d00a      	beq.n	3400eb26 <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400eb10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eb16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400eb1a:	d004      	beq.n	3400eb26 <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400eb1c:	f240 714c 	movw	r1, #1868	@ 0x74c
3400eb20:	4841      	ldr	r0, [pc, #260]	@ (3400ec28 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400eb22:	f7f2 fe7f 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400eb26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400eb2c:	2b00      	cmp	r3, #0
3400eb2e:	d005      	beq.n	3400eb3c <HAL_RCCEx_PeriphCLKConfig+0x5368>
3400eb30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400eb36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400eb3a:	d904      	bls.n	3400eb46 <HAL_RCCEx_PeriphCLKConfig+0x5372>
3400eb3c:	f240 714d 	movw	r1, #1869	@ 0x74d
3400eb40:	4839      	ldr	r0, [pc, #228]	@ (3400ec28 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400eb42:	f7f2 fe6f 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400eb46:	4b39      	ldr	r3, [pc, #228]	@ (3400ec2c <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400eb48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400eb4c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400eb50:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400eb54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400eb5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400eb60:	3b01      	subs	r3, #1
3400eb62:	041b      	lsls	r3, r3, #16
3400eb64:	4313      	orrs	r3, r2
3400eb66:	4a31      	ldr	r2, [pc, #196]	@ (3400ec2c <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400eb68:	430b      	orrs	r3, r1
3400eb6a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400eb6e:	f7fa fb4f 	bl	34009210 <LL_RCC_IC9_Enable>
3400eb72:	e066      	b.n	3400ec42 <HAL_RCCEx_PeriphCLKConfig+0x546e>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
3400eb74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb78:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400eb7c:	4b26      	ldr	r3, [pc, #152]	@ (3400ec18 <HAL_RCCEx_PeriphCLKConfig+0x5444>)
3400eb7e:	429a      	cmp	r2, r3
3400eb80:	d156      	bne.n	3400ec30 <HAL_RCCEx_PeriphCLKConfig+0x545c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400eb82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eb88:	2b00      	cmp	r3, #0
3400eb8a:	d016      	beq.n	3400ebba <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400eb8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eb92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400eb96:	d010      	beq.n	3400ebba <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400eb98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eb9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400eba2:	d00a      	beq.n	3400ebba <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400eba4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ebaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ebae:	d004      	beq.n	3400ebba <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400ebb0:	f240 7159 	movw	r1, #1881	@ 0x759
3400ebb4:	481c      	ldr	r0, [pc, #112]	@ (3400ec28 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400ebb6:	f7f2 fe35 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400ebba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ebc0:	2b00      	cmp	r3, #0
3400ebc2:	d005      	beq.n	3400ebd0 <HAL_RCCEx_PeriphCLKConfig+0x53fc>
3400ebc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ebca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ebce:	d904      	bls.n	3400ebda <HAL_RCCEx_PeriphCLKConfig+0x5406>
3400ebd0:	f240 715a 	movw	r1, #1882	@ 0x75a
3400ebd4:	4814      	ldr	r0, [pc, #80]	@ (3400ec28 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400ebd6:	f7f2 fe25 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400ebda:	4b14      	ldr	r3, [pc, #80]	@ (3400ec2c <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400ebdc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400ebe0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ebe4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ebe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400ebee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ebf4:	3b01      	subs	r3, #1
3400ebf6:	041b      	lsls	r3, r3, #16
3400ebf8:	4313      	orrs	r3, r2
3400ebfa:	4a0c      	ldr	r2, [pc, #48]	@ (3400ec2c <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400ebfc:	430b      	orrs	r3, r1
3400ebfe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400ec02:	f7fa fc05 	bl	34009410 <LL_RCC_IC14_Enable>
3400ec06:	e01c      	b.n	3400ec42 <HAL_RCCEx_PeriphCLKConfig+0x546e>
3400ec08:	07010030 	.word	0x07010030
3400ec0c:	07000430 	.word	0x07000430
3400ec10:	07010430 	.word	0x07010430
3400ec14:	07020430 	.word	0x07020430
3400ec18:	07030430 	.word	0x07030430
3400ec1c:	07040430 	.word	0x07040430
3400ec20:	07050430 	.word	0x07050430
3400ec24:	07060430 	.word	0x07060430
3400ec28:	3401cebc 	.word	0x3401cebc
3400ec2c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
3400ec30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec34:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ec38:	4b72      	ldr	r3, [pc, #456]	@ (3400ee04 <HAL_RCCEx_PeriphCLKConfig+0x5630>)
3400ec3a:	429a      	cmp	r2, r3
3400ec3c:	d101      	bne.n	3400ec42 <HAL_RCCEx_PeriphCLKConfig+0x546e>
    {
      LL_RCC_CLKP_Enable();
3400ec3e:	f7fa fda7 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
3400ec42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec46:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3400ec4a:	4618      	mov	r0, r3
3400ec4c:	f7f9 fd43 	bl	340086d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
3400ec50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec54:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ec58:	2100      	movs	r1, #0
3400ec5a:	6639      	str	r1, [r7, #96]	@ 0x60
3400ec5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400ec60:	667b      	str	r3, [r7, #100]	@ 0x64
3400ec62:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
3400ec66:	4603      	mov	r3, r0
3400ec68:	460a      	mov	r2, r1
3400ec6a:	4313      	orrs	r3, r2
3400ec6c:	f000 80ee 	beq.w	3400ee4c <HAL_RCCEx_PeriphCLKConfig+0x5678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
3400ec70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec74:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ec78:	4b63      	ldr	r3, [pc, #396]	@ (3400ee08 <HAL_RCCEx_PeriphCLKConfig+0x5634>)
3400ec7a:	429a      	cmp	r2, r3
3400ec7c:	d02e      	beq.n	3400ecdc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400ec7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec82:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ec86:	4b61      	ldr	r3, [pc, #388]	@ (3400ee0c <HAL_RCCEx_PeriphCLKConfig+0x5638>)
3400ec88:	429a      	cmp	r2, r3
3400ec8a:	d027      	beq.n	3400ecdc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400ec8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec90:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ec94:	4b5e      	ldr	r3, [pc, #376]	@ (3400ee10 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
3400ec96:	429a      	cmp	r2, r3
3400ec98:	d020      	beq.n	3400ecdc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400ec9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec9e:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eca2:	4b5c      	ldr	r3, [pc, #368]	@ (3400ee14 <HAL_RCCEx_PeriphCLKConfig+0x5640>)
3400eca4:	429a      	cmp	r2, r3
3400eca6:	d019      	beq.n	3400ecdc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eca8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecac:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ecb0:	4b59      	ldr	r3, [pc, #356]	@ (3400ee18 <HAL_RCCEx_PeriphCLKConfig+0x5644>)
3400ecb2:	429a      	cmp	r2, r3
3400ecb4:	d012      	beq.n	3400ecdc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400ecb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecba:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ecbe:	4b57      	ldr	r3, [pc, #348]	@ (3400ee1c <HAL_RCCEx_PeriphCLKConfig+0x5648>)
3400ecc0:	429a      	cmp	r2, r3
3400ecc2:	d00b      	beq.n	3400ecdc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400ecc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecc8:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eccc:	4b54      	ldr	r3, [pc, #336]	@ (3400ee20 <HAL_RCCEx_PeriphCLKConfig+0x564c>)
3400ecce:	429a      	cmp	r2, r3
3400ecd0:	d004      	beq.n	3400ecdc <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400ecd2:	f240 7174 	movw	r1, #1908	@ 0x774
3400ecd6:	4853      	ldr	r0, [pc, #332]	@ (3400ee24 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400ecd8:	f7f2 fda4 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
3400ecdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ece0:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ece4:	4b4a      	ldr	r3, [pc, #296]	@ (3400ee10 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
3400ece6:	429a      	cmp	r2, r3
3400ece8:	d142      	bne.n	3400ed70 <HAL_RCCEx_PeriphCLKConfig+0x559c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400ecea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ecf0:	2b00      	cmp	r3, #0
3400ecf2:	d016      	beq.n	3400ed22 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ecf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ecfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ecfe:	d010      	beq.n	3400ed22 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ed00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ed06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ed0a:	d00a      	beq.n	3400ed22 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ed0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ed12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ed16:	d004      	beq.n	3400ed22 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ed18:	f240 7179 	movw	r1, #1913	@ 0x779
3400ed1c:	4841      	ldr	r0, [pc, #260]	@ (3400ee24 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400ed1e:	f7f2 fd81 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400ed22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ed28:	2b00      	cmp	r3, #0
3400ed2a:	d005      	beq.n	3400ed38 <HAL_RCCEx_PeriphCLKConfig+0x5564>
3400ed2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ed32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ed36:	d904      	bls.n	3400ed42 <HAL_RCCEx_PeriphCLKConfig+0x556e>
3400ed38:	f240 717a 	movw	r1, #1914	@ 0x77a
3400ed3c:	4839      	ldr	r0, [pc, #228]	@ (3400ee24 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400ed3e:	f7f2 fd71 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ed42:	4b39      	ldr	r3, [pc, #228]	@ (3400ee28 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400ed44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ed48:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ed4c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ed50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ed56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ed5c:	3b01      	subs	r3, #1
3400ed5e:	041b      	lsls	r3, r3, #16
3400ed60:	4313      	orrs	r3, r2
3400ed62:	4a31      	ldr	r2, [pc, #196]	@ (3400ee28 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400ed64:	430b      	orrs	r3, r1
3400ed66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ed6a:	f7fa fa51 	bl	34009210 <LL_RCC_IC9_Enable>
3400ed6e:	e066      	b.n	3400ee3e <HAL_RCCEx_PeriphCLKConfig+0x566a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
3400ed70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed74:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ed78:	4b26      	ldr	r3, [pc, #152]	@ (3400ee14 <HAL_RCCEx_PeriphCLKConfig+0x5640>)
3400ed7a:	429a      	cmp	r2, r3
3400ed7c:	d156      	bne.n	3400ee2c <HAL_RCCEx_PeriphCLKConfig+0x5658>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400ed7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ed84:	2b00      	cmp	r3, #0
3400ed86:	d016      	beq.n	3400edb6 <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400ed88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ed8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ed92:	d010      	beq.n	3400edb6 <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400ed94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ed9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ed9e:	d00a      	beq.n	3400edb6 <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400eda0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eda4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eda6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400edaa:	d004      	beq.n	3400edb6 <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400edac:	f240 7186 	movw	r1, #1926	@ 0x786
3400edb0:	481c      	ldr	r0, [pc, #112]	@ (3400ee24 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400edb2:	f7f2 fd37 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400edb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400edbc:	2b00      	cmp	r3, #0
3400edbe:	d005      	beq.n	3400edcc <HAL_RCCEx_PeriphCLKConfig+0x55f8>
3400edc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400edc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400edca:	d904      	bls.n	3400edd6 <HAL_RCCEx_PeriphCLKConfig+0x5602>
3400edcc:	f240 7187 	movw	r1, #1927	@ 0x787
3400edd0:	4814      	ldr	r0, [pc, #80]	@ (3400ee24 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400edd2:	f7f2 fd27 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400edd6:	4b14      	ldr	r3, [pc, #80]	@ (3400ee28 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400edd8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400eddc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ede0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ede4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ede8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400edea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400edf0:	3b01      	subs	r3, #1
3400edf2:	041b      	lsls	r3, r3, #16
3400edf4:	4313      	orrs	r3, r2
3400edf6:	4a0c      	ldr	r2, [pc, #48]	@ (3400ee28 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400edf8:	430b      	orrs	r3, r1
3400edfa:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400edfe:	f7fa fb07 	bl	34009410 <LL_RCC_IC14_Enable>
3400ee02:	e01c      	b.n	3400ee3e <HAL_RCCEx_PeriphCLKConfig+0x566a>
3400ee04:	07010430 	.word	0x07010430
3400ee08:	07000830 	.word	0x07000830
3400ee0c:	07010830 	.word	0x07010830
3400ee10:	07020830 	.word	0x07020830
3400ee14:	07030830 	.word	0x07030830
3400ee18:	07040830 	.word	0x07040830
3400ee1c:	07050830 	.word	0x07050830
3400ee20:	07060830 	.word	0x07060830
3400ee24:	3401cebc 	.word	0x3401cebc
3400ee28:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
3400ee2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee30:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ee34:	4b72      	ldr	r3, [pc, #456]	@ (3400f000 <HAL_RCCEx_PeriphCLKConfig+0x582c>)
3400ee36:	429a      	cmp	r2, r3
3400ee38:	d101      	bne.n	3400ee3e <HAL_RCCEx_PeriphCLKConfig+0x566a>
    {
      LL_RCC_CLKP_Enable();
3400ee3a:	f7fa fca9 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
3400ee3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee42:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
3400ee46:	4618      	mov	r0, r3
3400ee48:	f7f9 fc45 	bl	340086d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
3400ee4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee50:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ee54:	2100      	movs	r1, #0
3400ee56:	65b9      	str	r1, [r7, #88]	@ 0x58
3400ee58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400ee5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
3400ee5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
3400ee62:	4603      	mov	r3, r0
3400ee64:	460a      	mov	r2, r1
3400ee66:	4313      	orrs	r3, r2
3400ee68:	f000 80ee 	beq.w	3400f048 <HAL_RCCEx_PeriphCLKConfig+0x5874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
3400ee6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee70:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400ee74:	4b63      	ldr	r3, [pc, #396]	@ (3400f004 <HAL_RCCEx_PeriphCLKConfig+0x5830>)
3400ee76:	429a      	cmp	r2, r3
3400ee78:	d02e      	beq.n	3400eed8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400ee7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee7e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400ee82:	4b61      	ldr	r3, [pc, #388]	@ (3400f008 <HAL_RCCEx_PeriphCLKConfig+0x5834>)
3400ee84:	429a      	cmp	r2, r3
3400ee86:	d027      	beq.n	3400eed8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400ee88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee8c:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400ee90:	4b5e      	ldr	r3, [pc, #376]	@ (3400f00c <HAL_RCCEx_PeriphCLKConfig+0x5838>)
3400ee92:	429a      	cmp	r2, r3
3400ee94:	d020      	beq.n	3400eed8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400ee96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee9a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400ee9e:	4b5c      	ldr	r3, [pc, #368]	@ (3400f010 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
3400eea0:	429a      	cmp	r2, r3
3400eea2:	d019      	beq.n	3400eed8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400eea4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eea8:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400eeac:	4b59      	ldr	r3, [pc, #356]	@ (3400f014 <HAL_RCCEx_PeriphCLKConfig+0x5840>)
3400eeae:	429a      	cmp	r2, r3
3400eeb0:	d012      	beq.n	3400eed8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400eeb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eeb6:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400eeba:	4b57      	ldr	r3, [pc, #348]	@ (3400f018 <HAL_RCCEx_PeriphCLKConfig+0x5844>)
3400eebc:	429a      	cmp	r2, r3
3400eebe:	d00b      	beq.n	3400eed8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400eec0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eec4:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400eec8:	4b54      	ldr	r3, [pc, #336]	@ (3400f01c <HAL_RCCEx_PeriphCLKConfig+0x5848>)
3400eeca:	429a      	cmp	r2, r3
3400eecc:	d004      	beq.n	3400eed8 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400eece:	f240 71a1 	movw	r1, #1953	@ 0x7a1
3400eed2:	4853      	ldr	r0, [pc, #332]	@ (3400f020 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400eed4:	f7f2 fca6 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
3400eed8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eedc:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400eee0:	4b4a      	ldr	r3, [pc, #296]	@ (3400f00c <HAL_RCCEx_PeriphCLKConfig+0x5838>)
3400eee2:	429a      	cmp	r2, r3
3400eee4:	d142      	bne.n	3400ef6c <HAL_RCCEx_PeriphCLKConfig+0x5798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400eee6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eeea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eeec:	2b00      	cmp	r3, #0
3400eeee:	d016      	beq.n	3400ef1e <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400eef0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400eefa:	d010      	beq.n	3400ef1e <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400eefc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ef02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ef06:	d00a      	beq.n	3400ef1e <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400ef08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ef0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ef12:	d004      	beq.n	3400ef1e <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400ef14:	f240 71a6 	movw	r1, #1958	@ 0x7a6
3400ef18:	4841      	ldr	r0, [pc, #260]	@ (3400f020 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400ef1a:	f7f2 fc83 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400ef1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ef24:	2b00      	cmp	r3, #0
3400ef26:	d005      	beq.n	3400ef34 <HAL_RCCEx_PeriphCLKConfig+0x5760>
3400ef28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ef2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ef32:	d904      	bls.n	3400ef3e <HAL_RCCEx_PeriphCLKConfig+0x576a>
3400ef34:	f240 71a7 	movw	r1, #1959	@ 0x7a7
3400ef38:	4839      	ldr	r0, [pc, #228]	@ (3400f020 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400ef3a:	f7f2 fc73 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ef3e:	4b39      	ldr	r3, [pc, #228]	@ (3400f024 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400ef40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ef44:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ef48:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ef4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ef52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ef58:	3b01      	subs	r3, #1
3400ef5a:	041b      	lsls	r3, r3, #16
3400ef5c:	4313      	orrs	r3, r2
3400ef5e:	4a31      	ldr	r2, [pc, #196]	@ (3400f024 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400ef60:	430b      	orrs	r3, r1
3400ef62:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ef66:	f7fa f953 	bl	34009210 <LL_RCC_IC9_Enable>
3400ef6a:	e066      	b.n	3400f03a <HAL_RCCEx_PeriphCLKConfig+0x5866>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
3400ef6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef70:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400ef74:	4b26      	ldr	r3, [pc, #152]	@ (3400f010 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
3400ef76:	429a      	cmp	r2, r3
3400ef78:	d156      	bne.n	3400f028 <HAL_RCCEx_PeriphCLKConfig+0x5854>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400ef7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ef80:	2b00      	cmp	r3, #0
3400ef82:	d016      	beq.n	3400efb2 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400ef84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ef8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ef8e:	d010      	beq.n	3400efb2 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400ef90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ef96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ef9a:	d00a      	beq.n	3400efb2 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400ef9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400efa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400efa6:	d004      	beq.n	3400efb2 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400efa8:	f240 71b3 	movw	r1, #1971	@ 0x7b3
3400efac:	481c      	ldr	r0, [pc, #112]	@ (3400f020 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400efae:	f7f2 fc39 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400efb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400efb8:	2b00      	cmp	r3, #0
3400efba:	d005      	beq.n	3400efc8 <HAL_RCCEx_PeriphCLKConfig+0x57f4>
3400efbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400efc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400efc6:	d904      	bls.n	3400efd2 <HAL_RCCEx_PeriphCLKConfig+0x57fe>
3400efc8:	f240 71b4 	movw	r1, #1972	@ 0x7b4
3400efcc:	4814      	ldr	r0, [pc, #80]	@ (3400f020 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400efce:	f7f2 fc29 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400efd2:	4b14      	ldr	r3, [pc, #80]	@ (3400f024 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400efd4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400efd8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400efdc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400efe0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efe4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400efe6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400efec:	3b01      	subs	r3, #1
3400efee:	041b      	lsls	r3, r3, #16
3400eff0:	4313      	orrs	r3, r2
3400eff2:	4a0c      	ldr	r2, [pc, #48]	@ (3400f024 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400eff4:	430b      	orrs	r3, r1
3400eff6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400effa:	f7fa fa09 	bl	34009410 <LL_RCC_IC14_Enable>
3400effe:	e01c      	b.n	3400f03a <HAL_RCCEx_PeriphCLKConfig+0x5866>
3400f000:	07010830 	.word	0x07010830
3400f004:	07000c30 	.word	0x07000c30
3400f008:	07010c30 	.word	0x07010c30
3400f00c:	07020c30 	.word	0x07020c30
3400f010:	07030c30 	.word	0x07030c30
3400f014:	07040c30 	.word	0x07040c30
3400f018:	07050c30 	.word	0x07050c30
3400f01c:	07060c30 	.word	0x07060c30
3400f020:	3401cebc 	.word	0x3401cebc
3400f024:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
3400f028:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f02c:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f030:	4b72      	ldr	r3, [pc, #456]	@ (3400f1fc <HAL_RCCEx_PeriphCLKConfig+0x5a28>)
3400f032:	429a      	cmp	r2, r3
3400f034:	d101      	bne.n	3400f03a <HAL_RCCEx_PeriphCLKConfig+0x5866>
    {
      LL_RCC_CLKP_Enable();
3400f036:	f7fa fbab 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
3400f03a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f03e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400f042:	4618      	mov	r0, r3
3400f044:	f7f9 fb47 	bl	340086d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
3400f048:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f050:	2100      	movs	r1, #0
3400f052:	6539      	str	r1, [r7, #80]	@ 0x50
3400f054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400f058:	657b      	str	r3, [r7, #84]	@ 0x54
3400f05a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
3400f05e:	4603      	mov	r3, r0
3400f060:	460a      	mov	r2, r1
3400f062:	4313      	orrs	r3, r2
3400f064:	f000 80ee 	beq.w	3400f244 <HAL_RCCEx_PeriphCLKConfig+0x5a70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
3400f068:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f06c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f070:	4b63      	ldr	r3, [pc, #396]	@ (3400f200 <HAL_RCCEx_PeriphCLKConfig+0x5a2c>)
3400f072:	429a      	cmp	r2, r3
3400f074:	d02e      	beq.n	3400f0d4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f076:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f07a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f07e:	4b61      	ldr	r3, [pc, #388]	@ (3400f204 <HAL_RCCEx_PeriphCLKConfig+0x5a30>)
3400f080:	429a      	cmp	r2, r3
3400f082:	d027      	beq.n	3400f0d4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f084:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f088:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f08c:	4b5e      	ldr	r3, [pc, #376]	@ (3400f208 <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
3400f08e:	429a      	cmp	r2, r3
3400f090:	d020      	beq.n	3400f0d4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f092:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f096:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f09a:	4b5c      	ldr	r3, [pc, #368]	@ (3400f20c <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
3400f09c:	429a      	cmp	r2, r3
3400f09e:	d019      	beq.n	3400f0d4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f0a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0a4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f0a8:	4b59      	ldr	r3, [pc, #356]	@ (3400f210 <HAL_RCCEx_PeriphCLKConfig+0x5a3c>)
3400f0aa:	429a      	cmp	r2, r3
3400f0ac:	d012      	beq.n	3400f0d4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f0ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0b2:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f0b6:	4b57      	ldr	r3, [pc, #348]	@ (3400f214 <HAL_RCCEx_PeriphCLKConfig+0x5a40>)
3400f0b8:	429a      	cmp	r2, r3
3400f0ba:	d00b      	beq.n	3400f0d4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f0bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0c0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f0c4:	4b54      	ldr	r3, [pc, #336]	@ (3400f218 <HAL_RCCEx_PeriphCLKConfig+0x5a44>)
3400f0c6:	429a      	cmp	r2, r3
3400f0c8:	d004      	beq.n	3400f0d4 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f0ca:	f240 71ce 	movw	r1, #1998	@ 0x7ce
3400f0ce:	4853      	ldr	r0, [pc, #332]	@ (3400f21c <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f0d0:	f7f2 fba8 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
3400f0d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0d8:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f0dc:	4b4a      	ldr	r3, [pc, #296]	@ (3400f208 <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
3400f0de:	429a      	cmp	r2, r3
3400f0e0:	d142      	bne.n	3400f168 <HAL_RCCEx_PeriphCLKConfig+0x5994>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f0e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f0e8:	2b00      	cmp	r3, #0
3400f0ea:	d016      	beq.n	3400f11a <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f0ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f0f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f0f6:	d010      	beq.n	3400f11a <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f0f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f0fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f102:	d00a      	beq.n	3400f11a <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f104:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f10a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f10e:	d004      	beq.n	3400f11a <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f110:	f240 71d3 	movw	r1, #2003	@ 0x7d3
3400f114:	4841      	ldr	r0, [pc, #260]	@ (3400f21c <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f116:	f7f2 fb85 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f11a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f11e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f120:	2b00      	cmp	r3, #0
3400f122:	d005      	beq.n	3400f130 <HAL_RCCEx_PeriphCLKConfig+0x595c>
3400f124:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f12a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f12e:	d904      	bls.n	3400f13a <HAL_RCCEx_PeriphCLKConfig+0x5966>
3400f130:	f240 71d4 	movw	r1, #2004	@ 0x7d4
3400f134:	4839      	ldr	r0, [pc, #228]	@ (3400f21c <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f136:	f7f2 fb75 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f13a:	4b39      	ldr	r3, [pc, #228]	@ (3400f220 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f13c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f140:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f144:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f148:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f14c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f14e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f154:	3b01      	subs	r3, #1
3400f156:	041b      	lsls	r3, r3, #16
3400f158:	4313      	orrs	r3, r2
3400f15a:	4a31      	ldr	r2, [pc, #196]	@ (3400f220 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f15c:	430b      	orrs	r3, r1
3400f15e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f162:	f7fa f855 	bl	34009210 <LL_RCC_IC9_Enable>
3400f166:	e066      	b.n	3400f236 <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
3400f168:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f16c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f170:	4b26      	ldr	r3, [pc, #152]	@ (3400f20c <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
3400f172:	429a      	cmp	r2, r3
3400f174:	d156      	bne.n	3400f224 <HAL_RCCEx_PeriphCLKConfig+0x5a50>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f176:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f17a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f17c:	2b00      	cmp	r3, #0
3400f17e:	d016      	beq.n	3400f1ae <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f180:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f186:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f18a:	d010      	beq.n	3400f1ae <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f18c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f196:	d00a      	beq.n	3400f1ae <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f198:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f19c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f19e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f1a2:	d004      	beq.n	3400f1ae <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f1a4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
3400f1a8:	481c      	ldr	r0, [pc, #112]	@ (3400f21c <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f1aa:	f7f2 fb3b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f1ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f1b4:	2b00      	cmp	r3, #0
3400f1b6:	d005      	beq.n	3400f1c4 <HAL_RCCEx_PeriphCLKConfig+0x59f0>
3400f1b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f1be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f1c2:	d904      	bls.n	3400f1ce <HAL_RCCEx_PeriphCLKConfig+0x59fa>
3400f1c4:	f240 71e1 	movw	r1, #2017	@ 0x7e1
3400f1c8:	4814      	ldr	r0, [pc, #80]	@ (3400f21c <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f1ca:	f7f2 fb2b 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f1ce:	4b14      	ldr	r3, [pc, #80]	@ (3400f220 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f1d0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f1d4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f1d8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f1dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f1e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f1e8:	3b01      	subs	r3, #1
3400f1ea:	041b      	lsls	r3, r3, #16
3400f1ec:	4313      	orrs	r3, r2
3400f1ee:	4a0c      	ldr	r2, [pc, #48]	@ (3400f220 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f1f0:	430b      	orrs	r3, r1
3400f1f2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f1f6:	f7fa f90b 	bl	34009410 <LL_RCC_IC14_Enable>
3400f1fa:	e01c      	b.n	3400f236 <HAL_RCCEx_PeriphCLKConfig+0x5a62>
3400f1fc:	07010c30 	.word	0x07010c30
3400f200:	07001030 	.word	0x07001030
3400f204:	07011030 	.word	0x07011030
3400f208:	07021030 	.word	0x07021030
3400f20c:	07031030 	.word	0x07031030
3400f210:	07041030 	.word	0x07041030
3400f214:	07051030 	.word	0x07051030
3400f218:	07061030 	.word	0x07061030
3400f21c:	3401cebc 	.word	0x3401cebc
3400f220:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
3400f224:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f228:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f22c:	4b72      	ldr	r3, [pc, #456]	@ (3400f3f8 <HAL_RCCEx_PeriphCLKConfig+0x5c24>)
3400f22e:	429a      	cmp	r2, r3
3400f230:	d101      	bne.n	3400f236 <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    {
      LL_RCC_CLKP_Enable();
3400f232:	f7fa faad 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
3400f236:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f23a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
3400f23e:	4618      	mov	r0, r3
3400f240:	f7f9 fa49 	bl	340086d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
3400f244:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f248:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f24c:	2100      	movs	r1, #0
3400f24e:	64b9      	str	r1, [r7, #72]	@ 0x48
3400f250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400f254:	64fb      	str	r3, [r7, #76]	@ 0x4c
3400f256:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
3400f25a:	4603      	mov	r3, r0
3400f25c:	460a      	mov	r2, r1
3400f25e:	4313      	orrs	r3, r2
3400f260:	f000 80ee 	beq.w	3400f440 <HAL_RCCEx_PeriphCLKConfig+0x5c6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
3400f264:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f268:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f26c:	4b63      	ldr	r3, [pc, #396]	@ (3400f3fc <HAL_RCCEx_PeriphCLKConfig+0x5c28>)
3400f26e:	429a      	cmp	r2, r3
3400f270:	d02e      	beq.n	3400f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f272:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f276:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f27a:	4b61      	ldr	r3, [pc, #388]	@ (3400f400 <HAL_RCCEx_PeriphCLKConfig+0x5c2c>)
3400f27c:	429a      	cmp	r2, r3
3400f27e:	d027      	beq.n	3400f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f280:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f284:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f288:	4b5e      	ldr	r3, [pc, #376]	@ (3400f404 <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
3400f28a:	429a      	cmp	r2, r3
3400f28c:	d020      	beq.n	3400f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f28e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f292:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f296:	4b5c      	ldr	r3, [pc, #368]	@ (3400f408 <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
3400f298:	429a      	cmp	r2, r3
3400f29a:	d019      	beq.n	3400f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f29c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2a0:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f2a4:	4b59      	ldr	r3, [pc, #356]	@ (3400f40c <HAL_RCCEx_PeriphCLKConfig+0x5c38>)
3400f2a6:	429a      	cmp	r2, r3
3400f2a8:	d012      	beq.n	3400f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f2aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2ae:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f2b2:	4b57      	ldr	r3, [pc, #348]	@ (3400f410 <HAL_RCCEx_PeriphCLKConfig+0x5c3c>)
3400f2b4:	429a      	cmp	r2, r3
3400f2b6:	d00b      	beq.n	3400f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f2b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2bc:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f2c0:	4b54      	ldr	r3, [pc, #336]	@ (3400f414 <HAL_RCCEx_PeriphCLKConfig+0x5c40>)
3400f2c2:	429a      	cmp	r2, r3
3400f2c4:	d004      	beq.n	3400f2d0 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f2c6:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3400f2ca:	4853      	ldr	r0, [pc, #332]	@ (3400f418 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f2cc:	f7f2 faaa 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
3400f2d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2d4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f2d8:	4b4a      	ldr	r3, [pc, #296]	@ (3400f404 <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
3400f2da:	429a      	cmp	r2, r3
3400f2dc:	d142      	bne.n	3400f364 <HAL_RCCEx_PeriphCLKConfig+0x5b90>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f2de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f2e4:	2b00      	cmp	r3, #0
3400f2e6:	d016      	beq.n	3400f316 <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f2e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f2ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f2f2:	d010      	beq.n	3400f316 <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f2f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f2fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f2fe:	d00a      	beq.n	3400f316 <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f300:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f306:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f30a:	d004      	beq.n	3400f316 <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f30c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400f310:	4841      	ldr	r0, [pc, #260]	@ (3400f418 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f312:	f7f2 fa87 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f316:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f31a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f31c:	2b00      	cmp	r3, #0
3400f31e:	d005      	beq.n	3400f32c <HAL_RCCEx_PeriphCLKConfig+0x5b58>
3400f320:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f32a:	d904      	bls.n	3400f336 <HAL_RCCEx_PeriphCLKConfig+0x5b62>
3400f32c:	f640 0101 	movw	r1, #2049	@ 0x801
3400f330:	4839      	ldr	r0, [pc, #228]	@ (3400f418 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f332:	f7f2 fa77 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f336:	4b39      	ldr	r3, [pc, #228]	@ (3400f41c <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f338:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f33c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f340:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f344:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f348:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f34a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f34e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f350:	3b01      	subs	r3, #1
3400f352:	041b      	lsls	r3, r3, #16
3400f354:	4313      	orrs	r3, r2
3400f356:	4a31      	ldr	r2, [pc, #196]	@ (3400f41c <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f358:	430b      	orrs	r3, r1
3400f35a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f35e:	f7f9 ff57 	bl	34009210 <LL_RCC_IC9_Enable>
3400f362:	e066      	b.n	3400f432 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
3400f364:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f368:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f36c:	4b26      	ldr	r3, [pc, #152]	@ (3400f408 <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
3400f36e:	429a      	cmp	r2, r3
3400f370:	d156      	bne.n	3400f420 <HAL_RCCEx_PeriphCLKConfig+0x5c4c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f372:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f378:	2b00      	cmp	r3, #0
3400f37a:	d016      	beq.n	3400f3aa <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f37c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f386:	d010      	beq.n	3400f3aa <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f388:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f38c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f38e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f392:	d00a      	beq.n	3400f3aa <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f394:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f39a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f39e:	d004      	beq.n	3400f3aa <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f3a0:	f640 010d 	movw	r1, #2061	@ 0x80d
3400f3a4:	481c      	ldr	r0, [pc, #112]	@ (3400f418 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f3a6:	f7f2 fa3d 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f3aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f3b0:	2b00      	cmp	r3, #0
3400f3b2:	d005      	beq.n	3400f3c0 <HAL_RCCEx_PeriphCLKConfig+0x5bec>
3400f3b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f3ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f3be:	d904      	bls.n	3400f3ca <HAL_RCCEx_PeriphCLKConfig+0x5bf6>
3400f3c0:	f640 010e 	movw	r1, #2062	@ 0x80e
3400f3c4:	4814      	ldr	r0, [pc, #80]	@ (3400f418 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f3c6:	f7f2 fa2d 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f3ca:	4b14      	ldr	r3, [pc, #80]	@ (3400f41c <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f3cc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f3d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f3d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f3d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f3de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f3e4:	3b01      	subs	r3, #1
3400f3e6:	041b      	lsls	r3, r3, #16
3400f3e8:	4313      	orrs	r3, r2
3400f3ea:	4a0c      	ldr	r2, [pc, #48]	@ (3400f41c <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f3ec:	430b      	orrs	r3, r1
3400f3ee:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f3f2:	f7fa f80d 	bl	34009410 <LL_RCC_IC14_Enable>
3400f3f6:	e01c      	b.n	3400f432 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
3400f3f8:	07011030 	.word	0x07011030
3400f3fc:	07001430 	.word	0x07001430
3400f400:	07011430 	.word	0x07011430
3400f404:	07021430 	.word	0x07021430
3400f408:	07031430 	.word	0x07031430
3400f40c:	07041430 	.word	0x07041430
3400f410:	07051430 	.word	0x07051430
3400f414:	07061430 	.word	0x07061430
3400f418:	3401cebc 	.word	0x3401cebc
3400f41c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
3400f420:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f424:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f428:	4b72      	ldr	r3, [pc, #456]	@ (3400f5f4 <HAL_RCCEx_PeriphCLKConfig+0x5e20>)
3400f42a:	429a      	cmp	r2, r3
3400f42c:	d101      	bne.n	3400f432 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    {
      LL_RCC_CLKP_Enable();
3400f42e:	f7fa f9af 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
3400f432:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f436:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400f43a:	4618      	mov	r0, r3
3400f43c:	f7f9 f94b 	bl	340086d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
3400f440:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f444:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f448:	2100      	movs	r1, #0
3400f44a:	6439      	str	r1, [r7, #64]	@ 0x40
3400f44c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400f450:	647b      	str	r3, [r7, #68]	@ 0x44
3400f452:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
3400f456:	4603      	mov	r3, r0
3400f458:	460a      	mov	r2, r1
3400f45a:	4313      	orrs	r3, r2
3400f45c:	f000 80ee 	beq.w	3400f63c <HAL_RCCEx_PeriphCLKConfig+0x5e68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
3400f460:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f464:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f468:	4b63      	ldr	r3, [pc, #396]	@ (3400f5f8 <HAL_RCCEx_PeriphCLKConfig+0x5e24>)
3400f46a:	429a      	cmp	r2, r3
3400f46c:	d02e      	beq.n	3400f4cc <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f46e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f472:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f476:	4b61      	ldr	r3, [pc, #388]	@ (3400f5fc <HAL_RCCEx_PeriphCLKConfig+0x5e28>)
3400f478:	429a      	cmp	r2, r3
3400f47a:	d027      	beq.n	3400f4cc <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f47c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f480:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f484:	4b5e      	ldr	r3, [pc, #376]	@ (3400f600 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
3400f486:	429a      	cmp	r2, r3
3400f488:	d020      	beq.n	3400f4cc <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f48a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f48e:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f492:	4b5c      	ldr	r3, [pc, #368]	@ (3400f604 <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
3400f494:	429a      	cmp	r2, r3
3400f496:	d019      	beq.n	3400f4cc <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f498:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f49c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f4a0:	4b59      	ldr	r3, [pc, #356]	@ (3400f608 <HAL_RCCEx_PeriphCLKConfig+0x5e34>)
3400f4a2:	429a      	cmp	r2, r3
3400f4a4:	d012      	beq.n	3400f4cc <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f4a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4aa:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f4ae:	4b57      	ldr	r3, [pc, #348]	@ (3400f60c <HAL_RCCEx_PeriphCLKConfig+0x5e38>)
3400f4b0:	429a      	cmp	r2, r3
3400f4b2:	d00b      	beq.n	3400f4cc <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f4b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4b8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f4bc:	4b54      	ldr	r3, [pc, #336]	@ (3400f610 <HAL_RCCEx_PeriphCLKConfig+0x5e3c>)
3400f4be:	429a      	cmp	r2, r3
3400f4c0:	d004      	beq.n	3400f4cc <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f4c2:	f640 0128 	movw	r1, #2088	@ 0x828
3400f4c6:	4853      	ldr	r0, [pc, #332]	@ (3400f614 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f4c8:	f7f2 f9ac 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
3400f4cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4d0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f4d4:	4b4a      	ldr	r3, [pc, #296]	@ (3400f600 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
3400f4d6:	429a      	cmp	r2, r3
3400f4d8:	d142      	bne.n	3400f560 <HAL_RCCEx_PeriphCLKConfig+0x5d8c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f4da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f4e0:	2b00      	cmp	r3, #0
3400f4e2:	d016      	beq.n	3400f512 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f4e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f4ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f4ee:	d010      	beq.n	3400f512 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f4f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f4f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f4fa:	d00a      	beq.n	3400f512 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f4fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f502:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f506:	d004      	beq.n	3400f512 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f508:	f640 012d 	movw	r1, #2093	@ 0x82d
3400f50c:	4841      	ldr	r0, [pc, #260]	@ (3400f614 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f50e:	f7f2 f989 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f512:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f518:	2b00      	cmp	r3, #0
3400f51a:	d005      	beq.n	3400f528 <HAL_RCCEx_PeriphCLKConfig+0x5d54>
3400f51c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f526:	d904      	bls.n	3400f532 <HAL_RCCEx_PeriphCLKConfig+0x5d5e>
3400f528:	f640 012e 	movw	r1, #2094	@ 0x82e
3400f52c:	4839      	ldr	r0, [pc, #228]	@ (3400f614 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f52e:	f7f2 f979 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f532:	4b39      	ldr	r3, [pc, #228]	@ (3400f618 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f534:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f538:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f53c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f540:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f544:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f546:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f54a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f54c:	3b01      	subs	r3, #1
3400f54e:	041b      	lsls	r3, r3, #16
3400f550:	4313      	orrs	r3, r2
3400f552:	4a31      	ldr	r2, [pc, #196]	@ (3400f618 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f554:	430b      	orrs	r3, r1
3400f556:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f55a:	f7f9 fe59 	bl	34009210 <LL_RCC_IC9_Enable>
3400f55e:	e066      	b.n	3400f62e <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
3400f560:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f564:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f568:	4b26      	ldr	r3, [pc, #152]	@ (3400f604 <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
3400f56a:	429a      	cmp	r2, r3
3400f56c:	d156      	bne.n	3400f61c <HAL_RCCEx_PeriphCLKConfig+0x5e48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f56e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f574:	2b00      	cmp	r3, #0
3400f576:	d016      	beq.n	3400f5a6 <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f578:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f57e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f582:	d010      	beq.n	3400f5a6 <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f584:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f58a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f58e:	d00a      	beq.n	3400f5a6 <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f590:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f596:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f59a:	d004      	beq.n	3400f5a6 <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f59c:	f640 013a 	movw	r1, #2106	@ 0x83a
3400f5a0:	481c      	ldr	r0, [pc, #112]	@ (3400f614 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f5a2:	f7f2 f93f 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f5a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f5ac:	2b00      	cmp	r3, #0
3400f5ae:	d005      	beq.n	3400f5bc <HAL_RCCEx_PeriphCLKConfig+0x5de8>
3400f5b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f5b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f5ba:	d904      	bls.n	3400f5c6 <HAL_RCCEx_PeriphCLKConfig+0x5df2>
3400f5bc:	f640 013b 	movw	r1, #2107	@ 0x83b
3400f5c0:	4814      	ldr	r0, [pc, #80]	@ (3400f614 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f5c2:	f7f2 f92f 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f5c6:	4b14      	ldr	r3, [pc, #80]	@ (3400f618 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f5c8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f5cc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f5d0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f5d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f5da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f5e0:	3b01      	subs	r3, #1
3400f5e2:	041b      	lsls	r3, r3, #16
3400f5e4:	4313      	orrs	r3, r2
3400f5e6:	4a0c      	ldr	r2, [pc, #48]	@ (3400f618 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f5e8:	430b      	orrs	r3, r1
3400f5ea:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f5ee:	f7f9 ff0f 	bl	34009410 <LL_RCC_IC14_Enable>
3400f5f2:	e01c      	b.n	3400f62e <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
3400f5f4:	07011430 	.word	0x07011430
3400f5f8:	07001830 	.word	0x07001830
3400f5fc:	07011830 	.word	0x07011830
3400f600:	07021830 	.word	0x07021830
3400f604:	07031830 	.word	0x07031830
3400f608:	07041830 	.word	0x07041830
3400f60c:	07051830 	.word	0x07051830
3400f610:	07061830 	.word	0x07061830
3400f614:	3401cebc 	.word	0x3401cebc
3400f618:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
3400f61c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f620:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f624:	4b72      	ldr	r3, [pc, #456]	@ (3400f7f0 <HAL_RCCEx_PeriphCLKConfig+0x601c>)
3400f626:	429a      	cmp	r2, r3
3400f628:	d101      	bne.n	3400f62e <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    {
      LL_RCC_CLKP_Enable();
3400f62a:	f7fa f8b1 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
3400f62e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f632:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
3400f636:	4618      	mov	r0, r3
3400f638:	f7f9 f84d 	bl	340086d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
3400f63c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f640:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f644:	2100      	movs	r1, #0
3400f646:	63b9      	str	r1, [r7, #56]	@ 0x38
3400f648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400f64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
3400f64e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
3400f652:	4603      	mov	r3, r0
3400f654:	460a      	mov	r2, r1
3400f656:	4313      	orrs	r3, r2
3400f658:	f000 80ee 	beq.w	3400f838 <HAL_RCCEx_PeriphCLKConfig+0x6064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
3400f65c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f660:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f664:	4b63      	ldr	r3, [pc, #396]	@ (3400f7f4 <HAL_RCCEx_PeriphCLKConfig+0x6020>)
3400f666:	429a      	cmp	r2, r3
3400f668:	d02e      	beq.n	3400f6c8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f66a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f66e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f672:	4b61      	ldr	r3, [pc, #388]	@ (3400f7f8 <HAL_RCCEx_PeriphCLKConfig+0x6024>)
3400f674:	429a      	cmp	r2, r3
3400f676:	d027      	beq.n	3400f6c8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f678:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f67c:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f680:	4b5e      	ldr	r3, [pc, #376]	@ (3400f7fc <HAL_RCCEx_PeriphCLKConfig+0x6028>)
3400f682:	429a      	cmp	r2, r3
3400f684:	d020      	beq.n	3400f6c8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f686:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f68a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f68e:	4b5c      	ldr	r3, [pc, #368]	@ (3400f800 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
3400f690:	429a      	cmp	r2, r3
3400f692:	d019      	beq.n	3400f6c8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f694:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f698:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f69c:	4b59      	ldr	r3, [pc, #356]	@ (3400f804 <HAL_RCCEx_PeriphCLKConfig+0x6030>)
3400f69e:	429a      	cmp	r2, r3
3400f6a0:	d012      	beq.n	3400f6c8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f6a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6a6:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f6aa:	4b57      	ldr	r3, [pc, #348]	@ (3400f808 <HAL_RCCEx_PeriphCLKConfig+0x6034>)
3400f6ac:	429a      	cmp	r2, r3
3400f6ae:	d00b      	beq.n	3400f6c8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f6b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6b4:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f6b8:	4b54      	ldr	r3, [pc, #336]	@ (3400f80c <HAL_RCCEx_PeriphCLKConfig+0x6038>)
3400f6ba:	429a      	cmp	r2, r3
3400f6bc:	d004      	beq.n	3400f6c8 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f6be:	f640 0155 	movw	r1, #2133	@ 0x855
3400f6c2:	4853      	ldr	r0, [pc, #332]	@ (3400f810 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f6c4:	f7f2 f8ae 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
3400f6c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6cc:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f6d0:	4b4a      	ldr	r3, [pc, #296]	@ (3400f7fc <HAL_RCCEx_PeriphCLKConfig+0x6028>)
3400f6d2:	429a      	cmp	r2, r3
3400f6d4:	d142      	bne.n	3400f75c <HAL_RCCEx_PeriphCLKConfig+0x5f88>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f6d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f6dc:	2b00      	cmp	r3, #0
3400f6de:	d016      	beq.n	3400f70e <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f6e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f6e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f6ea:	d010      	beq.n	3400f70e <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f6ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f6f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f6f6:	d00a      	beq.n	3400f70e <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f6f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f6fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f702:	d004      	beq.n	3400f70e <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f704:	f640 015a 	movw	r1, #2138	@ 0x85a
3400f708:	4841      	ldr	r0, [pc, #260]	@ (3400f810 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f70a:	f7f2 f88b 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f70e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f714:	2b00      	cmp	r3, #0
3400f716:	d005      	beq.n	3400f724 <HAL_RCCEx_PeriphCLKConfig+0x5f50>
3400f718:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f71c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f71e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f722:	d904      	bls.n	3400f72e <HAL_RCCEx_PeriphCLKConfig+0x5f5a>
3400f724:	f640 015b 	movw	r1, #2139	@ 0x85b
3400f728:	4839      	ldr	r0, [pc, #228]	@ (3400f810 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f72a:	f7f2 f87b 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f72e:	4b39      	ldr	r3, [pc, #228]	@ (3400f814 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f730:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f734:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f738:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f73c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f740:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f742:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f748:	3b01      	subs	r3, #1
3400f74a:	041b      	lsls	r3, r3, #16
3400f74c:	4313      	orrs	r3, r2
3400f74e:	4a31      	ldr	r2, [pc, #196]	@ (3400f814 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f750:	430b      	orrs	r3, r1
3400f752:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f756:	f7f9 fd5b 	bl	34009210 <LL_RCC_IC9_Enable>
3400f75a:	e066      	b.n	3400f82a <HAL_RCCEx_PeriphCLKConfig+0x6056>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3400f75c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f760:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f764:	4b26      	ldr	r3, [pc, #152]	@ (3400f800 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
3400f766:	429a      	cmp	r2, r3
3400f768:	d156      	bne.n	3400f818 <HAL_RCCEx_PeriphCLKConfig+0x6044>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f76a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f76e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f770:	2b00      	cmp	r3, #0
3400f772:	d016      	beq.n	3400f7a2 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f774:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f77a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f77e:	d010      	beq.n	3400f7a2 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f780:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f78a:	d00a      	beq.n	3400f7a2 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f78c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f792:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f796:	d004      	beq.n	3400f7a2 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f798:	f640 0167 	movw	r1, #2151	@ 0x867
3400f79c:	481c      	ldr	r0, [pc, #112]	@ (3400f810 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f79e:	f7f2 f841 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f7a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f7a8:	2b00      	cmp	r3, #0
3400f7aa:	d005      	beq.n	3400f7b8 <HAL_RCCEx_PeriphCLKConfig+0x5fe4>
3400f7ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f7b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f7b6:	d904      	bls.n	3400f7c2 <HAL_RCCEx_PeriphCLKConfig+0x5fee>
3400f7b8:	f640 0168 	movw	r1, #2152	@ 0x868
3400f7bc:	4814      	ldr	r0, [pc, #80]	@ (3400f810 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f7be:	f7f2 f831 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f7c2:	4b14      	ldr	r3, [pc, #80]	@ (3400f814 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f7c4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f7c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f7cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f7d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f7d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f7dc:	3b01      	subs	r3, #1
3400f7de:	041b      	lsls	r3, r3, #16
3400f7e0:	4313      	orrs	r3, r2
3400f7e2:	4a0c      	ldr	r2, [pc, #48]	@ (3400f814 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f7e4:	430b      	orrs	r3, r1
3400f7e6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f7ea:	f7f9 fe11 	bl	34009410 <LL_RCC_IC14_Enable>
3400f7ee:	e01c      	b.n	3400f82a <HAL_RCCEx_PeriphCLKConfig+0x6056>
3400f7f0:	07011830 	.word	0x07011830
3400f7f4:	07001c30 	.word	0x07001c30
3400f7f8:	07011c30 	.word	0x07011c30
3400f7fc:	07021c30 	.word	0x07021c30
3400f800:	07031c30 	.word	0x07031c30
3400f804:	07041c30 	.word	0x07041c30
3400f808:	07051c30 	.word	0x07051c30
3400f80c:	07061c30 	.word	0x07061c30
3400f810:	3401cebc 	.word	0x3401cebc
3400f814:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
3400f818:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f81c:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f820:	4b72      	ldr	r3, [pc, #456]	@ (3400f9ec <HAL_RCCEx_PeriphCLKConfig+0x6218>)
3400f822:	429a      	cmp	r2, r3
3400f824:	d101      	bne.n	3400f82a <HAL_RCCEx_PeriphCLKConfig+0x6056>
    {
      LL_RCC_CLKP_Enable();
3400f826:	f7f9 ffb3 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
3400f82a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f82e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
3400f832:	4618      	mov	r0, r3
3400f834:	f7f8 ff4f 	bl	340086d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
3400f838:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f83c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f840:	2100      	movs	r1, #0
3400f842:	6339      	str	r1, [r7, #48]	@ 0x30
3400f844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400f848:	637b      	str	r3, [r7, #52]	@ 0x34
3400f84a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3400f84e:	4603      	mov	r3, r0
3400f850:	460a      	mov	r2, r1
3400f852:	4313      	orrs	r3, r2
3400f854:	f000 80ee 	beq.w	3400fa34 <HAL_RCCEx_PeriphCLKConfig+0x6260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
3400f858:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f85c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f860:	4a63      	ldr	r2, [pc, #396]	@ (3400f9f0 <HAL_RCCEx_PeriphCLKConfig+0x621c>)
3400f862:	4293      	cmp	r3, r2
3400f864:	d02e      	beq.n	3400f8c4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f866:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f86a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f86e:	4a61      	ldr	r2, [pc, #388]	@ (3400f9f4 <HAL_RCCEx_PeriphCLKConfig+0x6220>)
3400f870:	4293      	cmp	r3, r2
3400f872:	d027      	beq.n	3400f8c4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f874:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f878:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f87c:	4a5e      	ldr	r2, [pc, #376]	@ (3400f9f8 <HAL_RCCEx_PeriphCLKConfig+0x6224>)
3400f87e:	4293      	cmp	r3, r2
3400f880:	d020      	beq.n	3400f8c4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f882:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f886:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f88a:	4a5c      	ldr	r2, [pc, #368]	@ (3400f9fc <HAL_RCCEx_PeriphCLKConfig+0x6228>)
3400f88c:	4293      	cmp	r3, r2
3400f88e:	d019      	beq.n	3400f8c4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f890:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f894:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f898:	4a59      	ldr	r2, [pc, #356]	@ (3400fa00 <HAL_RCCEx_PeriphCLKConfig+0x622c>)
3400f89a:	4293      	cmp	r3, r2
3400f89c:	d012      	beq.n	3400f8c4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f89e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8a2:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f8a6:	4a57      	ldr	r2, [pc, #348]	@ (3400fa04 <HAL_RCCEx_PeriphCLKConfig+0x6230>)
3400f8a8:	4293      	cmp	r3, r2
3400f8aa:	d00b      	beq.n	3400f8c4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f8ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8b0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f8b4:	4a54      	ldr	r2, [pc, #336]	@ (3400fa08 <HAL_RCCEx_PeriphCLKConfig+0x6234>)
3400f8b6:	4293      	cmp	r3, r2
3400f8b8:	d004      	beq.n	3400f8c4 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f8ba:	f640 0182 	movw	r1, #2178	@ 0x882
3400f8be:	4853      	ldr	r0, [pc, #332]	@ (3400fa0c <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400f8c0:	f7f1 ffb0 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
3400f8c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8c8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f8cc:	4a4a      	ldr	r2, [pc, #296]	@ (3400f9f8 <HAL_RCCEx_PeriphCLKConfig+0x6224>)
3400f8ce:	4293      	cmp	r3, r2
3400f8d0:	d142      	bne.n	3400f958 <HAL_RCCEx_PeriphCLKConfig+0x6184>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f8d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f8d8:	2b00      	cmp	r3, #0
3400f8da:	d016      	beq.n	3400f90a <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400f8dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f8e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f8e6:	d010      	beq.n	3400f90a <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400f8e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f8ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f8f2:	d00a      	beq.n	3400f90a <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400f8f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f8fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f8fe:	d004      	beq.n	3400f90a <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400f900:	f640 0187 	movw	r1, #2183	@ 0x887
3400f904:	4841      	ldr	r0, [pc, #260]	@ (3400fa0c <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400f906:	f7f1 ff8d 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f90a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f90e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f910:	2b00      	cmp	r3, #0
3400f912:	d005      	beq.n	3400f920 <HAL_RCCEx_PeriphCLKConfig+0x614c>
3400f914:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f91a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f91e:	d904      	bls.n	3400f92a <HAL_RCCEx_PeriphCLKConfig+0x6156>
3400f920:	f640 0188 	movw	r1, #2184	@ 0x888
3400f924:	4839      	ldr	r0, [pc, #228]	@ (3400fa0c <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400f926:	f7f1 ff7d 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f92a:	4b39      	ldr	r3, [pc, #228]	@ (3400fa10 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400f92c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f930:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f934:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f938:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f93c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f93e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f944:	3b01      	subs	r3, #1
3400f946:	041b      	lsls	r3, r3, #16
3400f948:	4313      	orrs	r3, r2
3400f94a:	4a31      	ldr	r2, [pc, #196]	@ (3400fa10 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400f94c:	430b      	orrs	r3, r1
3400f94e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f952:	f7f9 fc5d 	bl	34009210 <LL_RCC_IC9_Enable>
3400f956:	e066      	b.n	3400fa26 <HAL_RCCEx_PeriphCLKConfig+0x6252>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
3400f958:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f95c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f960:	4a26      	ldr	r2, [pc, #152]	@ (3400f9fc <HAL_RCCEx_PeriphCLKConfig+0x6228>)
3400f962:	4293      	cmp	r3, r2
3400f964:	d156      	bne.n	3400fa14 <HAL_RCCEx_PeriphCLKConfig+0x6240>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f966:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f96a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f96c:	2b00      	cmp	r3, #0
3400f96e:	d016      	beq.n	3400f99e <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400f970:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f97a:	d010      	beq.n	3400f99e <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400f97c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f986:	d00a      	beq.n	3400f99e <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400f988:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f98c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f98e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f992:	d004      	beq.n	3400f99e <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400f994:	f640 0194 	movw	r1, #2196	@ 0x894
3400f998:	481c      	ldr	r0, [pc, #112]	@ (3400fa0c <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400f99a:	f7f1 ff43 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f99e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f9a4:	2b00      	cmp	r3, #0
3400f9a6:	d005      	beq.n	3400f9b4 <HAL_RCCEx_PeriphCLKConfig+0x61e0>
3400f9a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f9ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f9b2:	d904      	bls.n	3400f9be <HAL_RCCEx_PeriphCLKConfig+0x61ea>
3400f9b4:	f640 0195 	movw	r1, #2197	@ 0x895
3400f9b8:	4814      	ldr	r0, [pc, #80]	@ (3400fa0c <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400f9ba:	f7f1 ff33 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f9be:	4b14      	ldr	r3, [pc, #80]	@ (3400fa10 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400f9c0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f9c4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f9c8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f9cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f9d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f9d8:	3b01      	subs	r3, #1
3400f9da:	041b      	lsls	r3, r3, #16
3400f9dc:	4313      	orrs	r3, r2
3400f9de:	4a0c      	ldr	r2, [pc, #48]	@ (3400fa10 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400f9e0:	430b      	orrs	r3, r1
3400f9e2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f9e6:	f7f9 fd13 	bl	34009410 <LL_RCC_IC14_Enable>
3400f9ea:	e01c      	b.n	3400fa26 <HAL_RCCEx_PeriphCLKConfig+0x6252>
3400f9ec:	07011c30 	.word	0x07011c30
3400f9f0:	07000034 	.word	0x07000034
3400f9f4:	07010034 	.word	0x07010034
3400f9f8:	07020034 	.word	0x07020034
3400f9fc:	07030034 	.word	0x07030034
3400fa00:	07040034 	.word	0x07040034
3400fa04:	07050034 	.word	0x07050034
3400fa08:	07060034 	.word	0x07060034
3400fa0c:	3401cebc 	.word	0x3401cebc
3400fa10:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
3400fa14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa18:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fa1c:	4ab7      	ldr	r2, [pc, #732]	@ (3400fcfc <HAL_RCCEx_PeriphCLKConfig+0x6528>)
3400fa1e:	4293      	cmp	r3, r2
3400fa20:	d101      	bne.n	3400fa26 <HAL_RCCEx_PeriphCLKConfig+0x6252>
    {
      LL_RCC_CLKP_Enable();
3400fa22:	f7f9 feb5 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
3400fa26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa2a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fa2e:	4618      	mov	r0, r3
3400fa30:	f7f8 fe51 	bl	340086d6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
3400fa34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa38:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fa3c:	2100      	movs	r1, #0
3400fa3e:	62b9      	str	r1, [r7, #40]	@ 0x28
3400fa40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400fa44:	62fb      	str	r3, [r7, #44]	@ 0x2c
3400fa46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3400fa4a:	4603      	mov	r3, r0
3400fa4c:	460a      	mov	r2, r1
3400fa4e:	4313      	orrs	r3, r2
3400fa50:	f000 80da 	beq.w	3400fc08 <HAL_RCCEx_PeriphCLKConfig+0x6434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
3400fa54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa58:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fa5c:	4aa8      	ldr	r2, [pc, #672]	@ (3400fd00 <HAL_RCCEx_PeriphCLKConfig+0x652c>)
3400fa5e:	4293      	cmp	r3, r2
3400fa60:	d02e      	beq.n	3400fac0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fa62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa66:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fa6a:	4aa6      	ldr	r2, [pc, #664]	@ (3400fd04 <HAL_RCCEx_PeriphCLKConfig+0x6530>)
3400fa6c:	4293      	cmp	r3, r2
3400fa6e:	d027      	beq.n	3400fac0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fa70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa74:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fa78:	4aa3      	ldr	r2, [pc, #652]	@ (3400fd08 <HAL_RCCEx_PeriphCLKConfig+0x6534>)
3400fa7a:	4293      	cmp	r3, r2
3400fa7c:	d020      	beq.n	3400fac0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fa7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa82:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fa86:	4aa1      	ldr	r2, [pc, #644]	@ (3400fd0c <HAL_RCCEx_PeriphCLKConfig+0x6538>)
3400fa88:	4293      	cmp	r3, r2
3400fa8a:	d019      	beq.n	3400fac0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fa8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa90:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fa94:	4a9e      	ldr	r2, [pc, #632]	@ (3400fd10 <HAL_RCCEx_PeriphCLKConfig+0x653c>)
3400fa96:	4293      	cmp	r3, r2
3400fa98:	d012      	beq.n	3400fac0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fa9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa9e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400faa2:	4a9c      	ldr	r2, [pc, #624]	@ (3400fd14 <HAL_RCCEx_PeriphCLKConfig+0x6540>)
3400faa4:	4293      	cmp	r3, r2
3400faa6:	d00b      	beq.n	3400fac0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400faa8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faac:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fab0:	4a99      	ldr	r2, [pc, #612]	@ (3400fd18 <HAL_RCCEx_PeriphCLKConfig+0x6544>)
3400fab2:	4293      	cmp	r3, r2
3400fab4:	d004      	beq.n	3400fac0 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fab6:	f640 01af 	movw	r1, #2223	@ 0x8af
3400faba:	4898      	ldr	r0, [pc, #608]	@ (3400fd1c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fabc:	f7f1 feb2 	bl	34001824 <assert_failed>

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
3400fac0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fac4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fac8:	4a8f      	ldr	r2, [pc, #572]	@ (3400fd08 <HAL_RCCEx_PeriphCLKConfig+0x6534>)
3400faca:	4293      	cmp	r3, r2
3400facc:	d142      	bne.n	3400fb54 <HAL_RCCEx_PeriphCLKConfig+0x6380>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400face:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fad4:	2b00      	cmp	r3, #0
3400fad6:	d016      	beq.n	3400fb06 <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fad8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fadc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fade:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fae2:	d010      	beq.n	3400fb06 <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400faea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400faee:	d00a      	beq.n	3400fb06 <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400faf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400faf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fafa:	d004      	beq.n	3400fb06 <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fafc:	f640 01b4 	movw	r1, #2228	@ 0x8b4
3400fb00:	4886      	ldr	r0, [pc, #536]	@ (3400fd1c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fb02:	f7f1 fe8f 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400fb06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fb0c:	2b00      	cmp	r3, #0
3400fb0e:	d005      	beq.n	3400fb1c <HAL_RCCEx_PeriphCLKConfig+0x6348>
3400fb10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fb16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fb1a:	d904      	bls.n	3400fb26 <HAL_RCCEx_PeriphCLKConfig+0x6352>
3400fb1c:	f640 01b5 	movw	r1, #2229	@ 0x8b5
3400fb20:	487e      	ldr	r0, [pc, #504]	@ (3400fd1c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fb22:	f7f1 fe7f 	bl	34001824 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400fb26:	4b7e      	ldr	r3, [pc, #504]	@ (3400fd20 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fb28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400fb2c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400fb30:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400fb34:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fb38:	6c91      	ldr	r1, [r2, #72]	@ 0x48
3400fb3a:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fb3e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
3400fb40:	3a01      	subs	r2, #1
3400fb42:	0412      	lsls	r2, r2, #16
3400fb44:	430a      	orrs	r2, r1
3400fb46:	4976      	ldr	r1, [pc, #472]	@ (3400fd20 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fb48:	4313      	orrs	r3, r2
3400fb4a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400fb4e:	f7f9 fb5f 	bl	34009210 <LL_RCC_IC9_Enable>
3400fb52:	e052      	b.n	3400fbfa <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
3400fb54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb58:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fb5c:	4a6b      	ldr	r2, [pc, #428]	@ (3400fd0c <HAL_RCCEx_PeriphCLKConfig+0x6538>)
3400fb5e:	4293      	cmp	r3, r2
3400fb60:	d142      	bne.n	3400fbe8 <HAL_RCCEx_PeriphCLKConfig+0x6414>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400fb62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fb68:	2b00      	cmp	r3, #0
3400fb6a:	d016      	beq.n	3400fb9a <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fb6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fb72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fb76:	d010      	beq.n	3400fb9a <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fb78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fb7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fb82:	d00a      	beq.n	3400fb9a <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fb84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fb8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fb8e:	d004      	beq.n	3400fb9a <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fb90:	f640 01c1 	movw	r1, #2241	@ 0x8c1
3400fb94:	4861      	ldr	r0, [pc, #388]	@ (3400fd1c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fb96:	f7f1 fe45 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400fb9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fba0:	2b00      	cmp	r3, #0
3400fba2:	d005      	beq.n	3400fbb0 <HAL_RCCEx_PeriphCLKConfig+0x63dc>
3400fba4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fbaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fbae:	d904      	bls.n	3400fbba <HAL_RCCEx_PeriphCLKConfig+0x63e6>
3400fbb0:	f640 01c2 	movw	r1, #2242	@ 0x8c2
3400fbb4:	4859      	ldr	r0, [pc, #356]	@ (3400fd1c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fbb6:	f7f1 fe35 	bl	34001824 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400fbba:	4b59      	ldr	r3, [pc, #356]	@ (3400fd20 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fbbc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400fbc0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400fbc4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400fbc8:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fbcc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
3400fbce:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fbd2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
3400fbd4:	3a01      	subs	r2, #1
3400fbd6:	0412      	lsls	r2, r2, #16
3400fbd8:	430a      	orrs	r2, r1
3400fbda:	4951      	ldr	r1, [pc, #324]	@ (3400fd20 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fbdc:	4313      	orrs	r3, r2
3400fbde:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400fbe2:	f7f9 fc15 	bl	34009410 <LL_RCC_IC14_Enable>
3400fbe6:	e008      	b.n	3400fbfa <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
3400fbe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbec:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fbf0:	4a44      	ldr	r2, [pc, #272]	@ (3400fd04 <HAL_RCCEx_PeriphCLKConfig+0x6530>)
3400fbf2:	4293      	cmp	r3, r2
3400fbf4:	d101      	bne.n	3400fbfa <HAL_RCCEx_PeriphCLKConfig+0x6426>
    {
      LL_RCC_CLKP_Enable();
3400fbf6:	f7f9 fdcb 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
3400fbfa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbfe:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fc02:	4618      	mov	r0, r3
3400fc04:	f7f8 fd67 	bl	340086d6 <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
3400fc08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fc10:	2100      	movs	r1, #0
3400fc12:	6239      	str	r1, [r7, #32]
3400fc14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3400fc18:	627b      	str	r3, [r7, #36]	@ 0x24
3400fc1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
3400fc1e:	4603      	mov	r3, r0
3400fc20:	460a      	mov	r2, r1
3400fc22:	4313      	orrs	r3, r2
3400fc24:	d02e      	beq.n	3400fc84 <HAL_RCCEx_PeriphCLKConfig+0x64b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
3400fc26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc2a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fc2e:	4a3d      	ldr	r2, [pc, #244]	@ (3400fd24 <HAL_RCCEx_PeriphCLKConfig+0x6550>)
3400fc30:	4293      	cmp	r3, r2
3400fc32:	d012      	beq.n	3400fc5a <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400fc34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc38:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fc3c:	4a3a      	ldr	r2, [pc, #232]	@ (3400fd28 <HAL_RCCEx_PeriphCLKConfig+0x6554>)
3400fc3e:	4293      	cmp	r3, r2
3400fc40:	d00b      	beq.n	3400fc5a <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400fc42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc46:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fc4a:	4a38      	ldr	r2, [pc, #224]	@ (3400fd2c <HAL_RCCEx_PeriphCLKConfig+0x6558>)
3400fc4c:	4293      	cmp	r3, r2
3400fc4e:	d004      	beq.n	3400fc5a <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400fc50:	f640 01dc 	movw	r1, #2268	@ 0x8dc
3400fc54:	4831      	ldr	r0, [pc, #196]	@ (3400fd1c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fc56:	f7f1 fde5 	bl	34001824 <assert_failed>

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3400fc5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc5e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fc62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400fc66:	4618      	mov	r0, r3
3400fc68:	f7f8 fcdd 	bl	34008626 <LL_RCC_SetOTGPHYCKREFClockSource>
3400fc6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc70:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fc74:	0fdb      	lsrs	r3, r3, #31
3400fc76:	2b01      	cmp	r3, #1
3400fc78:	d102      	bne.n	3400fc80 <HAL_RCCEx_PeriphCLKConfig+0x64ac>
3400fc7a:	f7f8 fa7f 	bl	3400817c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400fc7e:	e001      	b.n	3400fc84 <HAL_RCCEx_PeriphCLKConfig+0x64b0>
3400fc80:	f7f8 fa6c 	bl	3400815c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
3400fc84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc88:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fc8c:	2100      	movs	r1, #0
3400fc8e:	61b9      	str	r1, [r7, #24]
3400fc90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3400fc94:	61fb      	str	r3, [r7, #28]
3400fc96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
3400fc9a:	4603      	mov	r3, r0
3400fc9c:	460a      	mov	r2, r1
3400fc9e:	4313      	orrs	r3, r2
3400fca0:	d04e      	beq.n	3400fd40 <HAL_RCCEx_PeriphCLKConfig+0x656c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
3400fca2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fca6:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fcaa:	4a21      	ldr	r2, [pc, #132]	@ (3400fd30 <HAL_RCCEx_PeriphCLKConfig+0x655c>)
3400fcac:	4293      	cmp	r3, r2
3400fcae:	d012      	beq.n	3400fcd6 <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400fcb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcb4:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fcb8:	4a1e      	ldr	r2, [pc, #120]	@ (3400fd34 <HAL_RCCEx_PeriphCLKConfig+0x6560>)
3400fcba:	4293      	cmp	r3, r2
3400fcbc:	d00b      	beq.n	3400fcd6 <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400fcbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcc2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fcc6:	4a1c      	ldr	r2, [pc, #112]	@ (3400fd38 <HAL_RCCEx_PeriphCLKConfig+0x6564>)
3400fcc8:	4293      	cmp	r3, r2
3400fcca:	d004      	beq.n	3400fcd6 <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400fccc:	f640 01e6 	movw	r1, #2278	@ 0x8e6
3400fcd0:	4812      	ldr	r0, [pc, #72]	@ (3400fd1c <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fcd2:	f7f1 fda7 	bl	34001824 <assert_failed>

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3400fcd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcda:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fcde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400fce2:	4618      	mov	r0, r3
3400fce4:	f7f8 fc9f 	bl	34008626 <LL_RCC_SetOTGPHYCKREFClockSource>
3400fce8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcec:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fcf0:	0fdb      	lsrs	r3, r3, #31
3400fcf2:	2b01      	cmp	r3, #1
3400fcf4:	d122      	bne.n	3400fd3c <HAL_RCCEx_PeriphCLKConfig+0x6568>
3400fcf6:	f7f8 fa41 	bl	3400817c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400fcfa:	e021      	b.n	3400fd40 <HAL_RCCEx_PeriphCLKConfig+0x656c>
3400fcfc:	07010034 	.word	0x07010034
3400fd00:	07000434 	.word	0x07000434
3400fd04:	07010434 	.word	0x07010434
3400fd08:	07020434 	.word	0x07020434
3400fd0c:	07030434 	.word	0x07030434
3400fd10:	07040434 	.word	0x07040434
3400fd14:	07050434 	.word	0x07050434
3400fd18:	07060434 	.word	0x07060434
3400fd1c:	3401cebc 	.word	0x3401cebc
3400fd20:	56028000 	.word	0x56028000
3400fd24:	01001014 	.word	0x01001014
3400fd28:	01011014 	.word	0x01011014
3400fd2c:	81011014 	.word	0x81011014
3400fd30:	01001814 	.word	0x01001814
3400fd34:	01011814 	.word	0x01011814
3400fd38:	81011814 	.word	0x81011814
3400fd3c:	f7f8 fa0e 	bl	3400815c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
3400fd40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd44:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fd48:	2100      	movs	r1, #0
3400fd4a:	6139      	str	r1, [r7, #16]
3400fd4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400fd50:	617b      	str	r3, [r7, #20]
3400fd52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
3400fd56:	4603      	mov	r3, r0
3400fd58:	460a      	mov	r2, r1
3400fd5a:	4313      	orrs	r3, r2
3400fd5c:	f000 8090 	beq.w	3400fe80 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
3400fd60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd64:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400fd68:	4ab5      	ldr	r2, [pc, #724]	@ (34010040 <HAL_RCCEx_PeriphCLKConfig+0x686c>)
3400fd6a:	4293      	cmp	r3, r2
3400fd6c:	d020      	beq.n	3400fdb0 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400fd6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd72:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400fd76:	4ab3      	ldr	r2, [pc, #716]	@ (34010044 <HAL_RCCEx_PeriphCLKConfig+0x6870>)
3400fd78:	4293      	cmp	r3, r2
3400fd7a:	d019      	beq.n	3400fdb0 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400fd7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd80:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400fd84:	4ab0      	ldr	r2, [pc, #704]	@ (34010048 <HAL_RCCEx_PeriphCLKConfig+0x6874>)
3400fd86:	4293      	cmp	r3, r2
3400fd88:	d012      	beq.n	3400fdb0 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400fd8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd8e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400fd92:	4aae      	ldr	r2, [pc, #696]	@ (3401004c <HAL_RCCEx_PeriphCLKConfig+0x6878>)
3400fd94:	4293      	cmp	r3, r2
3400fd96:	d00b      	beq.n	3400fdb0 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400fd98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd9c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400fda0:	4aab      	ldr	r2, [pc, #684]	@ (34010050 <HAL_RCCEx_PeriphCLKConfig+0x687c>)
3400fda2:	4293      	cmp	r3, r2
3400fda4:	d004      	beq.n	3400fdb0 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400fda6:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
3400fdaa:	48aa      	ldr	r0, [pc, #680]	@ (34010054 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400fdac:	f7f1 fd3a 	bl	34001824 <assert_failed>

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
3400fdb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdb4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400fdb8:	4aa3      	ldr	r2, [pc, #652]	@ (34010048 <HAL_RCCEx_PeriphCLKConfig+0x6874>)
3400fdba:	4293      	cmp	r3, r2
3400fdbc:	d142      	bne.n	3400fe44 <HAL_RCCEx_PeriphCLKConfig+0x6670>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400fdbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fdc4:	2b00      	cmp	r3, #0
3400fdc6:	d016      	beq.n	3400fdf6 <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400fdc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fdce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fdd2:	d010      	beq.n	3400fdf6 <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400fdd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fdda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fdde:	d00a      	beq.n	3400fdf6 <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400fde0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fde4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fde6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fdea:	d004      	beq.n	3400fdf6 <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400fdec:	f640 01f5 	movw	r1, #2293	@ 0x8f5
3400fdf0:	4898      	ldr	r0, [pc, #608]	@ (34010054 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400fdf2:	f7f1 fd17 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400fdf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400fdfc:	2b00      	cmp	r3, #0
3400fdfe:	d005      	beq.n	3400fe0c <HAL_RCCEx_PeriphCLKConfig+0x6638>
3400fe00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400fe06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fe0a:	d904      	bls.n	3400fe16 <HAL_RCCEx_PeriphCLKConfig+0x6642>
3400fe0c:	f640 01f6 	movw	r1, #2294	@ 0x8f6
3400fe10:	4890      	ldr	r0, [pc, #576]	@ (34010054 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400fe12:	f7f1 fd07 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400fe16:	4b90      	ldr	r3, [pc, #576]	@ (34010058 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
3400fe18:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400fe1c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400fe20:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400fe24:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fe28:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3400fe2a:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fe2e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3400fe30:	3a01      	subs	r2, #1
3400fe32:	0412      	lsls	r2, r2, #16
3400fe34:	430a      	orrs	r2, r1
3400fe36:	4988      	ldr	r1, [pc, #544]	@ (34010058 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
3400fe38:	4313      	orrs	r3, r2
3400fe3a:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400fe3e:	f7f9 fb27 	bl	34009490 <LL_RCC_IC15_Enable>
3400fe42:	e008      	b.n	3400fe56 <HAL_RCCEx_PeriphCLKConfig+0x6682>
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
3400fe44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe48:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400fe4c:	4a7d      	ldr	r2, [pc, #500]	@ (34010044 <HAL_RCCEx_PeriphCLKConfig+0x6870>)
3400fe4e:	4293      	cmp	r3, r2
3400fe50:	d101      	bne.n	3400fe56 <HAL_RCCEx_PeriphCLKConfig+0x6682>
    {
      LL_RCC_CLKP_Enable();
3400fe52:	f7f9 fc9d 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
3400fe56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe5a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400fe5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400fe62:	4618      	mov	r0, r3
3400fe64:	f7f8 fbd4 	bl	34008610 <LL_RCC_SetOTGPHYClockSource>
3400fe68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe6c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400fe70:	0fdb      	lsrs	r3, r3, #31
3400fe72:	2b01      	cmp	r3, #1
3400fe74:	d102      	bne.n	3400fe7c <HAL_RCCEx_PeriphCLKConfig+0x66a8>
3400fe76:	f7f8 f981 	bl	3400817c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400fe7a:	e001      	b.n	3400fe80 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
3400fe7c:	f7f8 f96e 	bl	3400815c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
3400fe80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe84:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fe88:	2100      	movs	r1, #0
3400fe8a:	60b9      	str	r1, [r7, #8]
3400fe8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3400fe90:	60fb      	str	r3, [r7, #12]
3400fe92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3400fe96:	4603      	mov	r3, r0
3400fe98:	460a      	mov	r2, r1
3400fe9a:	4313      	orrs	r3, r2
3400fe9c:	f000 8090 	beq.w	3400ffc0 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
3400fea0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fea4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400fea8:	4a6c      	ldr	r2, [pc, #432]	@ (3401005c <HAL_RCCEx_PeriphCLKConfig+0x6888>)
3400feaa:	4293      	cmp	r3, r2
3400feac:	d020      	beq.n	3400fef0 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3400feae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400feb2:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400feb6:	4a6a      	ldr	r2, [pc, #424]	@ (34010060 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
3400feb8:	4293      	cmp	r3, r2
3400feba:	d019      	beq.n	3400fef0 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3400febc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fec0:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400fec4:	4a67      	ldr	r2, [pc, #412]	@ (34010064 <HAL_RCCEx_PeriphCLKConfig+0x6890>)
3400fec6:	4293      	cmp	r3, r2
3400fec8:	d012      	beq.n	3400fef0 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3400feca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fece:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400fed2:	4a65      	ldr	r2, [pc, #404]	@ (34010068 <HAL_RCCEx_PeriphCLKConfig+0x6894>)
3400fed4:	4293      	cmp	r3, r2
3400fed6:	d00b      	beq.n	3400fef0 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3400fed8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fedc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400fee0:	4a62      	ldr	r2, [pc, #392]	@ (3401006c <HAL_RCCEx_PeriphCLKConfig+0x6898>)
3400fee2:	4293      	cmp	r3, r2
3400fee4:	d004      	beq.n	3400fef0 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3400fee6:	f44f 6111 	mov.w	r1, #2320	@ 0x910
3400feea:	485a      	ldr	r0, [pc, #360]	@ (34010054 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400feec:	f7f1 fc9a 	bl	34001824 <assert_failed>

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
3400fef0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fef4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400fef8:	4a5a      	ldr	r2, [pc, #360]	@ (34010064 <HAL_RCCEx_PeriphCLKConfig+0x6890>)
3400fefa:	4293      	cmp	r3, r2
3400fefc:	d142      	bne.n	3400ff84 <HAL_RCCEx_PeriphCLKConfig+0x67b0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400fefe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ff04:	2b00      	cmp	r3, #0
3400ff06:	d016      	beq.n	3400ff36 <HAL_RCCEx_PeriphCLKConfig+0x6762>
3400ff08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ff0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ff12:	d010      	beq.n	3400ff36 <HAL_RCCEx_PeriphCLKConfig+0x6762>
3400ff14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ff1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ff1e:	d00a      	beq.n	3400ff36 <HAL_RCCEx_PeriphCLKConfig+0x6762>
3400ff20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ff26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ff2a:	d004      	beq.n	3400ff36 <HAL_RCCEx_PeriphCLKConfig+0x6762>
3400ff2c:	f640 1115 	movw	r1, #2325	@ 0x915
3400ff30:	4848      	ldr	r0, [pc, #288]	@ (34010054 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400ff32:	f7f1 fc77 	bl	34001824 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400ff36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ff3c:	2b00      	cmp	r3, #0
3400ff3e:	d005      	beq.n	3400ff4c <HAL_RCCEx_PeriphCLKConfig+0x6778>
3400ff40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ff46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ff4a:	d904      	bls.n	3400ff56 <HAL_RCCEx_PeriphCLKConfig+0x6782>
3400ff4c:	f640 1116 	movw	r1, #2326	@ 0x916
3400ff50:	4840      	ldr	r0, [pc, #256]	@ (34010054 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400ff52:	f7f1 fc67 	bl	34001824 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400ff56:	4b40      	ldr	r3, [pc, #256]	@ (34010058 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
3400ff58:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400ff5c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400ff60:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400ff64:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400ff68:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3400ff6a:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400ff6e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3400ff70:	3a01      	subs	r2, #1
3400ff72:	0412      	lsls	r2, r2, #16
3400ff74:	430a      	orrs	r2, r1
3400ff76:	4938      	ldr	r1, [pc, #224]	@ (34010058 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
3400ff78:	4313      	orrs	r3, r2
3400ff7a:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400ff7e:	f7f9 fa87 	bl	34009490 <LL_RCC_IC15_Enable>
3400ff82:	e008      	b.n	3400ff96 <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
3400ff84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff88:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400ff8c:	4a34      	ldr	r2, [pc, #208]	@ (34010060 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
3400ff8e:	4293      	cmp	r3, r2
3400ff90:	d101      	bne.n	3400ff96 <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    {
      LL_RCC_CLKP_Enable();
3400ff92:	f7f9 fbfd 	bl	34009790 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3400ff96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff9a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400ff9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400ffa2:	4618      	mov	r0, r3
3400ffa4:	f7f8 fb34 	bl	34008610 <LL_RCC_SetOTGPHYClockSource>
3400ffa8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffac:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400ffb0:	0fdb      	lsrs	r3, r3, #31
3400ffb2:	2b01      	cmp	r3, #1
3400ffb4:	d102      	bne.n	3400ffbc <HAL_RCCEx_PeriphCLKConfig+0x67e8>
3400ffb6:	f7f8 f8e1 	bl	3400817c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400ffba:	e001      	b.n	3400ffc0 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
3400ffbc:	f7f8 f8ce 	bl	3400815c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
3400ffc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ffc8:	2100      	movs	r1, #0
3400ffca:	6039      	str	r1, [r7, #0]
3400ffcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3400ffd0:	607b      	str	r3, [r7, #4]
3400ffd2:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ffd6:	4603      	mov	r3, r0
3400ffd8:	460a      	mov	r2, r1
3400ffda:	4313      	orrs	r3, r2
3400ffdc:	d023      	beq.n	34010026 <HAL_RCCEx_PeriphCLKConfig+0x6852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
3400ffde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffe2:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3400ffe6:	2b00      	cmp	r3, #0
3400ffe8:	d016      	beq.n	34010018 <HAL_RCCEx_PeriphCLKConfig+0x6844>
3400ffea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffee:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3400fff2:	2b01      	cmp	r3, #1
3400fff4:	d010      	beq.n	34010018 <HAL_RCCEx_PeriphCLKConfig+0x6844>
3400fff6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fffa:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3400fffe:	2b02      	cmp	r3, #2
34010000:	d00a      	beq.n	34010018 <HAL_RCCEx_PeriphCLKConfig+0x6844>
34010002:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010006:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3401000a:	2b03      	cmp	r3, #3
3401000c:	d004      	beq.n	34010018 <HAL_RCCEx_PeriphCLKConfig+0x6844>
3401000e:	f44f 6113 	mov.w	r1, #2352	@ 0x930
34010012:	4810      	ldr	r0, [pc, #64]	@ (34010054 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34010014:	f7f1 fc06 	bl	34001824 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
34010018:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401001c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34010020:	4618      	mov	r0, r3
34010022:	f7f8 fd31 	bl	34008a88 <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
34010026:	f897 338e 	ldrb.w	r3, [r7, #910]	@ 0x38e
3401002a:	2b00      	cmp	r3, #0
3401002c:	d101      	bne.n	34010032 <HAL_RCCEx_PeriphCLKConfig+0x685e>
  {
    return HAL_OK;
3401002e:	2300      	movs	r3, #0
34010030:	e000      	b.n	34010034 <HAL_RCCEx_PeriphCLKConfig+0x6860>
  }
  return HAL_ERROR;
34010032:	2301      	movs	r3, #1
}
34010034:	4618      	mov	r0, r3
34010036:	f507 7764 	add.w	r7, r7, #912	@ 0x390
3401003a:	46bd      	mov	sp, r7
3401003c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34010040:	03000c14 	.word	0x03000c14
34010044:	03010c14 	.word	0x03010c14
34010048:	03020c14 	.word	0x03020c14
3401004c:	03030c14 	.word	0x03030c14
34010050:	83030c14 	.word	0x83030c14
34010054:	3401cebc 	.word	0x3401cebc
34010058:	56028000 	.word	0x56028000
3401005c:	03001414 	.word	0x03001414
34010060:	03011414 	.word	0x03011414
34010064:	03021414 	.word	0x03021414
34010068:	03031414 	.word	0x03031414
3401006c:	83031414 	.word	0x83031414

34010070 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
34010070:	b590      	push	{r4, r7, lr}
34010072:	b085      	sub	sp, #20
34010074:	af00      	add	r7, sp, #0
34010076:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
3401007a:	2100      	movs	r1, #0
3401007c:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
3401007e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010082:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
34010086:	ea50 0104 	orrs.w	r1, r0, r4
3401008a:	f000 8436 	beq.w	340108fa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
3401008e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010092:	2801      	cmp	r0, #1
34010094:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
34010098:	f080 8434 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401009c:	e9d7 0100 	ldrd	r0, r1, [r7]
340100a0:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
340100a4:	ea50 0104 	orrs.w	r1, r0, r4
340100a8:	f000 8422 	beq.w	340108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
340100ac:	e9d7 0100 	ldrd	r0, r1, [r7]
340100b0:	2801      	cmp	r0, #1
340100b2:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
340100b6:	f080 8425 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340100ba:	e9d7 0100 	ldrd	r0, r1, [r7]
340100be:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
340100c2:	ea50 0104 	orrs.w	r1, r0, r4
340100c6:	f000 840e 	beq.w	340108e6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
340100ca:	e9d7 0100 	ldrd	r0, r1, [r7]
340100ce:	2801      	cmp	r0, #1
340100d0:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
340100d4:	f080 8416 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340100d8:	e9d7 0100 	ldrd	r0, r1, [r7]
340100dc:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
340100e0:	ea50 0104 	orrs.w	r1, r0, r4
340100e4:	f000 83fa 	beq.w	340108dc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
340100e8:	e9d7 0100 	ldrd	r0, r1, [r7]
340100ec:	2801      	cmp	r0, #1
340100ee:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
340100f2:	f080 8407 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340100f6:	e9d7 0100 	ldrd	r0, r1, [r7]
340100fa:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
340100fe:	ea50 0104 	orrs.w	r1, r0, r4
34010102:	f000 83e6 	beq.w	340108d2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
34010106:	e9d7 0100 	ldrd	r0, r1, [r7]
3401010a:	2801      	cmp	r0, #1
3401010c:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34010110:	f080 83f8 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010114:	e9d7 0100 	ldrd	r0, r1, [r7]
34010118:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
3401011c:	ea50 0104 	orrs.w	r1, r0, r4
34010120:	f000 83d2 	beq.w	340108c8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34010124:	e9d7 0100 	ldrd	r0, r1, [r7]
34010128:	2801      	cmp	r0, #1
3401012a:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
3401012e:	f080 83e9 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010132:	e9d7 0100 	ldrd	r0, r1, [r7]
34010136:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
3401013a:	ea50 0104 	orrs.w	r1, r0, r4
3401013e:	f000 83be 	beq.w	340108be <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
34010142:	e9d7 0100 	ldrd	r0, r1, [r7]
34010146:	2801      	cmp	r0, #1
34010148:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
3401014c:	f080 83da 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010150:	e9d7 0100 	ldrd	r0, r1, [r7]
34010154:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
34010158:	ea50 0104 	orrs.w	r1, r0, r4
3401015c:	f000 83aa 	beq.w	340108b4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34010160:	e9d7 0100 	ldrd	r0, r1, [r7]
34010164:	2801      	cmp	r0, #1
34010166:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
3401016a:	f080 83cb 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401016e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010172:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
34010176:	ea50 0104 	orrs.w	r1, r0, r4
3401017a:	f000 8396 	beq.w	340108aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
3401017e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010182:	2801      	cmp	r0, #1
34010184:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
34010188:	f080 83bc 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401018c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010190:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
34010194:	ea50 0104 	orrs.w	r1, r0, r4
34010198:	f000 8382 	beq.w	340108a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
3401019c:	e9d7 0100 	ldrd	r0, r1, [r7]
340101a0:	2801      	cmp	r0, #1
340101a2:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
340101a6:	f080 83ad 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340101aa:	e9d7 0100 	ldrd	r0, r1, [r7]
340101ae:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
340101b2:	ea50 0104 	orrs.w	r1, r0, r4
340101b6:	f000 836e 	beq.w	34010896 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
340101ba:	e9d7 0100 	ldrd	r0, r1, [r7]
340101be:	2801      	cmp	r0, #1
340101c0:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
340101c4:	f080 839e 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340101c8:	e9d7 0100 	ldrd	r0, r1, [r7]
340101cc:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
340101d0:	ea50 0104 	orrs.w	r1, r0, r4
340101d4:	f000 835a 	beq.w	3401088c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
340101d8:	e9d7 0100 	ldrd	r0, r1, [r7]
340101dc:	2801      	cmp	r0, #1
340101de:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
340101e2:	f080 838f 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340101e6:	e9d7 0100 	ldrd	r0, r1, [r7]
340101ea:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
340101ee:	ea50 0104 	orrs.w	r1, r0, r4
340101f2:	f000 8346 	beq.w	34010882 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
340101f6:	e9d7 0100 	ldrd	r0, r1, [r7]
340101fa:	2801      	cmp	r0, #1
340101fc:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
34010200:	f080 8380 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010204:	e9d7 0100 	ldrd	r0, r1, [r7]
34010208:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
3401020c:	ea50 0104 	orrs.w	r1, r0, r4
34010210:	f000 8332 	beq.w	34010878 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
34010214:	e9d7 0100 	ldrd	r0, r1, [r7]
34010218:	2801      	cmp	r0, #1
3401021a:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
3401021e:	f080 8371 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010222:	e9d7 0100 	ldrd	r0, r1, [r7]
34010226:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
3401022a:	ea50 0104 	orrs.w	r1, r0, r4
3401022e:	f000 831e 	beq.w	3401086e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
34010232:	e9d7 0100 	ldrd	r0, r1, [r7]
34010236:	2801      	cmp	r0, #1
34010238:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
3401023c:	f080 8362 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010240:	e9d7 0100 	ldrd	r0, r1, [r7]
34010244:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
34010248:	ea50 0104 	orrs.w	r1, r0, r4
3401024c:	f000 830a 	beq.w	34010864 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
34010250:	e9d7 0100 	ldrd	r0, r1, [r7]
34010254:	2801      	cmp	r0, #1
34010256:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
3401025a:	f080 8353 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401025e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010262:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
34010266:	ea50 0104 	orrs.w	r1, r0, r4
3401026a:	f000 82f6 	beq.w	3401085a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
3401026e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010272:	2801      	cmp	r0, #1
34010274:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
34010278:	f080 8344 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401027c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010280:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
34010284:	ea50 0104 	orrs.w	r1, r0, r4
34010288:	f000 82e2 	beq.w	34010850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
3401028c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010290:	2801      	cmp	r0, #1
34010292:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
34010296:	f080 8335 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401029a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401029e:	f1a1 0420 	sub.w	r4, r1, #32
340102a2:	ea50 0104 	orrs.w	r1, r0, r4
340102a6:	f000 82ce 	beq.w	34010846 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
340102aa:	e9d7 0100 	ldrd	r0, r1, [r7]
340102ae:	2801      	cmp	r0, #1
340102b0:	f171 0120 	sbcs.w	r1, r1, #32
340102b4:	f080 8326 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340102b8:	e9d7 0100 	ldrd	r0, r1, [r7]
340102bc:	f1a1 0410 	sub.w	r4, r1, #16
340102c0:	ea50 0104 	orrs.w	r1, r0, r4
340102c4:	f000 82ba 	beq.w	3401083c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
340102c8:	e9d7 0100 	ldrd	r0, r1, [r7]
340102cc:	2801      	cmp	r0, #1
340102ce:	f171 0110 	sbcs.w	r1, r1, #16
340102d2:	f080 8317 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340102d6:	e9d7 0100 	ldrd	r0, r1, [r7]
340102da:	f1a1 0408 	sub.w	r4, r1, #8
340102de:	ea50 0104 	orrs.w	r1, r0, r4
340102e2:	f000 82a6 	beq.w	34010832 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
340102e6:	e9d7 0100 	ldrd	r0, r1, [r7]
340102ea:	2801      	cmp	r0, #1
340102ec:	f171 0108 	sbcs.w	r1, r1, #8
340102f0:	f080 8308 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340102f4:	e9d7 0100 	ldrd	r0, r1, [r7]
340102f8:	1f0c      	subs	r4, r1, #4
340102fa:	ea50 0104 	orrs.w	r1, r0, r4
340102fe:	f000 8293 	beq.w	34010828 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
34010302:	e9d7 0100 	ldrd	r0, r1, [r7]
34010306:	2801      	cmp	r0, #1
34010308:	f171 0104 	sbcs.w	r1, r1, #4
3401030c:	f080 82fa 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010310:	e9d7 0100 	ldrd	r0, r1, [r7]
34010314:	1e8c      	subs	r4, r1, #2
34010316:	ea50 0104 	orrs.w	r1, r0, r4
3401031a:	f000 8280 	beq.w	3401081e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
3401031e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010322:	2801      	cmp	r0, #1
34010324:	f171 0102 	sbcs.w	r1, r1, #2
34010328:	f080 82ec 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401032c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010330:	1e4c      	subs	r4, r1, #1
34010332:	ea50 0104 	orrs.w	r1, r0, r4
34010336:	f000 826d 	beq.w	34010814 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
3401033a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401033e:	2801      	cmp	r0, #1
34010340:	f171 0101 	sbcs.w	r1, r1, #1
34010344:	f080 82de 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010348:	e9d7 0100 	ldrd	r0, r1, [r7]
3401034c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
34010350:	4321      	orrs	r1, r4
34010352:	f000 825a 	beq.w	3401080a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
34010356:	e9d7 0100 	ldrd	r0, r1, [r7]
3401035a:	4cda      	ldr	r4, [pc, #872]	@ (340106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
3401035c:	42a0      	cmp	r0, r4
3401035e:	f171 0100 	sbcs.w	r1, r1, #0
34010362:	f080 82cf 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010366:	e9d7 0100 	ldrd	r0, r1, [r7]
3401036a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
3401036e:	4321      	orrs	r1, r4
34010370:	f000 8246 	beq.w	34010800 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
34010374:	e9d7 0100 	ldrd	r0, r1, [r7]
34010378:	4cd3      	ldr	r4, [pc, #844]	@ (340106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
3401037a:	42a0      	cmp	r0, r4
3401037c:	f171 0100 	sbcs.w	r1, r1, #0
34010380:	f080 82c0 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010384:	e9d7 0100 	ldrd	r0, r1, [r7]
34010388:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
3401038c:	4321      	orrs	r1, r4
3401038e:	f000 8232 	beq.w	340107f6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
34010392:	e9d7 0100 	ldrd	r0, r1, [r7]
34010396:	4ccd      	ldr	r4, [pc, #820]	@ (340106cc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
34010398:	42a0      	cmp	r0, r4
3401039a:	f171 0100 	sbcs.w	r1, r1, #0
3401039e:	f080 82b1 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103a2:	e9d7 0100 	ldrd	r0, r1, [r7]
340103a6:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
340103aa:	4321      	orrs	r1, r4
340103ac:	f000 821e 	beq.w	340107ec <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
340103b0:	e9d7 0100 	ldrd	r0, r1, [r7]
340103b4:	4cc6      	ldr	r4, [pc, #792]	@ (340106d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
340103b6:	42a0      	cmp	r0, r4
340103b8:	f171 0100 	sbcs.w	r1, r1, #0
340103bc:	f080 82a2 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103c0:	e9d7 0100 	ldrd	r0, r1, [r7]
340103c4:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
340103c8:	4321      	orrs	r1, r4
340103ca:	f000 820b 	beq.w	340107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
340103ce:	e9d7 0100 	ldrd	r0, r1, [r7]
340103d2:	4cc0      	ldr	r4, [pc, #768]	@ (340106d4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
340103d4:	42a0      	cmp	r0, r4
340103d6:	f171 0100 	sbcs.w	r1, r1, #0
340103da:	f080 8293 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103de:	e9d7 0100 	ldrd	r0, r1, [r7]
340103e2:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
340103e6:	4321      	orrs	r1, r4
340103e8:	f000 81f7 	beq.w	340107da <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
340103ec:	e9d7 0100 	ldrd	r0, r1, [r7]
340103f0:	4cb9      	ldr	r4, [pc, #740]	@ (340106d8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
340103f2:	42a0      	cmp	r0, r4
340103f4:	f171 0100 	sbcs.w	r1, r1, #0
340103f8:	f080 8284 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103fc:	e9d7 0100 	ldrd	r0, r1, [r7]
34010400:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
34010404:	4321      	orrs	r1, r4
34010406:	f000 81e2 	beq.w	340107ce <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
3401040a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401040e:	4cb3      	ldr	r4, [pc, #716]	@ (340106dc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
34010410:	42a0      	cmp	r0, r4
34010412:	f171 0100 	sbcs.w	r1, r1, #0
34010416:	f080 8275 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401041a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401041e:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
34010422:	4321      	orrs	r1, r4
34010424:	f000 81cd 	beq.w	340107c2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
34010428:	e9d7 0100 	ldrd	r0, r1, [r7]
3401042c:	4cac      	ldr	r4, [pc, #688]	@ (340106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
3401042e:	42a0      	cmp	r0, r4
34010430:	f171 0100 	sbcs.w	r1, r1, #0
34010434:	f080 8266 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010438:	e9d7 0100 	ldrd	r0, r1, [r7]
3401043c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
34010440:	4321      	orrs	r1, r4
34010442:	f000 81b8 	beq.w	340107b6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
34010446:	e9d7 0100 	ldrd	r0, r1, [r7]
3401044a:	4ca6      	ldr	r4, [pc, #664]	@ (340106e4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
3401044c:	42a0      	cmp	r0, r4
3401044e:	f171 0100 	sbcs.w	r1, r1, #0
34010452:	f080 8257 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010456:	e9d7 0100 	ldrd	r0, r1, [r7]
3401045a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
3401045e:	4321      	orrs	r1, r4
34010460:	f000 81a4 	beq.w	340107ac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
34010464:	e9d7 0100 	ldrd	r0, r1, [r7]
34010468:	4c9f      	ldr	r4, [pc, #636]	@ (340106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
3401046a:	42a0      	cmp	r0, r4
3401046c:	f171 0100 	sbcs.w	r1, r1, #0
34010470:	f080 8248 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010474:	e9d7 0100 	ldrd	r0, r1, [r7]
34010478:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
3401047c:	4321      	orrs	r1, r4
3401047e:	f000 8190 	beq.w	340107a2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
34010482:	e9d7 0100 	ldrd	r0, r1, [r7]
34010486:	4c99      	ldr	r4, [pc, #612]	@ (340106ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
34010488:	42a0      	cmp	r0, r4
3401048a:	f171 0100 	sbcs.w	r1, r1, #0
3401048e:	f080 8239 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010492:	e9d7 0100 	ldrd	r0, r1, [r7]
34010496:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
3401049a:	4321      	orrs	r1, r4
3401049c:	f000 817c 	beq.w	34010798 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
340104a0:	e9d7 0100 	ldrd	r0, r1, [r7]
340104a4:	4c92      	ldr	r4, [pc, #584]	@ (340106f0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
340104a6:	42a0      	cmp	r0, r4
340104a8:	f171 0100 	sbcs.w	r1, r1, #0
340104ac:	f080 822a 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340104b0:	e9d7 0100 	ldrd	r0, r1, [r7]
340104b4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
340104b8:	4321      	orrs	r1, r4
340104ba:	f000 8168 	beq.w	3401078e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
340104be:	e9d7 0100 	ldrd	r0, r1, [r7]
340104c2:	4c8c      	ldr	r4, [pc, #560]	@ (340106f4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
340104c4:	42a0      	cmp	r0, r4
340104c6:	f171 0100 	sbcs.w	r1, r1, #0
340104ca:	f080 821b 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340104ce:	e9d7 0100 	ldrd	r0, r1, [r7]
340104d2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
340104d6:	4321      	orrs	r1, r4
340104d8:	f000 8154 	beq.w	34010784 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
340104dc:	e9d7 0100 	ldrd	r0, r1, [r7]
340104e0:	4c85      	ldr	r4, [pc, #532]	@ (340106f8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
340104e2:	42a0      	cmp	r0, r4
340104e4:	f171 0100 	sbcs.w	r1, r1, #0
340104e8:	f080 820c 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340104ec:	e9d7 0100 	ldrd	r0, r1, [r7]
340104f0:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
340104f4:	4321      	orrs	r1, r4
340104f6:	f000 8140 	beq.w	3401077a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
340104fa:	e9d7 0100 	ldrd	r0, r1, [r7]
340104fe:	4c7f      	ldr	r4, [pc, #508]	@ (340106fc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
34010500:	42a0      	cmp	r0, r4
34010502:	f171 0100 	sbcs.w	r1, r1, #0
34010506:	f080 81fd 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401050a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401050e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
34010512:	4321      	orrs	r1, r4
34010514:	f000 812c 	beq.w	34010770 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
34010518:	e9d7 0100 	ldrd	r0, r1, [r7]
3401051c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34010520:	f171 0100 	sbcs.w	r1, r1, #0
34010524:	f080 81ee 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010528:	e9d7 0100 	ldrd	r0, r1, [r7]
3401052c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
34010530:	4321      	orrs	r1, r4
34010532:	f000 8118 	beq.w	34010766 <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
34010536:	e9d7 0100 	ldrd	r0, r1, [r7]
3401053a:	f248 0401 	movw	r4, #32769	@ 0x8001
3401053e:	42a0      	cmp	r0, r4
34010540:	f171 0100 	sbcs.w	r1, r1, #0
34010544:	f080 81de 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010548:	e9d7 0100 	ldrd	r0, r1, [r7]
3401054c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
34010550:	4321      	orrs	r1, r4
34010552:	f000 8103 	beq.w	3401075c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34010556:	e9d7 0100 	ldrd	r0, r1, [r7]
3401055a:	f244 0401 	movw	r4, #16385	@ 0x4001
3401055e:	42a0      	cmp	r0, r4
34010560:	f171 0100 	sbcs.w	r1, r1, #0
34010564:	f080 81ce 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010568:	e9d7 0100 	ldrd	r0, r1, [r7]
3401056c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
34010570:	4321      	orrs	r1, r4
34010572:	f000 80ee 	beq.w	34010752 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34010576:	e9d7 0100 	ldrd	r0, r1, [r7]
3401057a:	f242 0401 	movw	r4, #8193	@ 0x2001
3401057e:	42a0      	cmp	r0, r4
34010580:	f171 0100 	sbcs.w	r1, r1, #0
34010584:	f080 81be 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010588:	e9d7 0100 	ldrd	r0, r1, [r7]
3401058c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
34010590:	4321      	orrs	r1, r4
34010592:	f000 80d9 	beq.w	34010748 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
34010596:	e9d7 0100 	ldrd	r0, r1, [r7]
3401059a:	f241 0401 	movw	r4, #4097	@ 0x1001
3401059e:	42a0      	cmp	r0, r4
340105a0:	f171 0100 	sbcs.w	r1, r1, #0
340105a4:	f080 81ae 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105a8:	e9d7 0100 	ldrd	r0, r1, [r7]
340105ac:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
340105b0:	4321      	orrs	r1, r4
340105b2:	f000 80c4 	beq.w	3401073e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
340105b6:	e9d7 0100 	ldrd	r0, r1, [r7]
340105ba:	f640 0401 	movw	r4, #2049	@ 0x801
340105be:	42a0      	cmp	r0, r4
340105c0:	f171 0100 	sbcs.w	r1, r1, #0
340105c4:	f080 819e 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105c8:	e9d7 0100 	ldrd	r0, r1, [r7]
340105cc:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
340105d0:	4321      	orrs	r1, r4
340105d2:	f000 80af 	beq.w	34010734 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
340105d6:	e9d7 0100 	ldrd	r0, r1, [r7]
340105da:	f240 4401 	movw	r4, #1025	@ 0x401
340105de:	42a0      	cmp	r0, r4
340105e0:	f171 0100 	sbcs.w	r1, r1, #0
340105e4:	f080 818e 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105e8:	e9d7 0100 	ldrd	r0, r1, [r7]
340105ec:	2821      	cmp	r0, #33	@ 0x21
340105ee:	f171 0100 	sbcs.w	r1, r1, #0
340105f2:	d255      	bcs.n	340106a0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
340105f4:	e9d7 0100 	ldrd	r0, r1, [r7]
340105f8:	4301      	orrs	r1, r0
340105fa:	f000 8183 	beq.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105fe:	e9d7 0100 	ldrd	r0, r1, [r7]
34010602:	1e42      	subs	r2, r0, #1
34010604:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
34010608:	2a20      	cmp	r2, #32
3401060a:	f173 0100 	sbcs.w	r1, r3, #0
3401060e:	f080 8179 	bcs.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010612:	2a1f      	cmp	r2, #31
34010614:	f200 8176 	bhi.w	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010618:	a101      	add	r1, pc, #4	@ (adr r1, 34010620 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
3401061a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
3401061e:	bf00      	nop
34010620:	340106af 	.word	0x340106af
34010624:	340106b9 	.word	0x340106b9
34010628:	34010905 	.word	0x34010905
3401062c:	34010709 	.word	0x34010709
34010630:	34010905 	.word	0x34010905
34010634:	34010905 	.word	0x34010905
34010638:	34010905 	.word	0x34010905
3401063c:	34010701 	.word	0x34010701
34010640:	34010905 	.word	0x34010905
34010644:	34010905 	.word	0x34010905
34010648:	34010905 	.word	0x34010905
3401064c:	34010905 	.word	0x34010905
34010650:	34010905 	.word	0x34010905
34010654:	34010905 	.word	0x34010905
34010658:	34010905 	.word	0x34010905
3401065c:	34010713 	.word	0x34010713
34010660:	34010905 	.word	0x34010905
34010664:	34010905 	.word	0x34010905
34010668:	34010905 	.word	0x34010905
3401066c:	34010905 	.word	0x34010905
34010670:	34010905 	.word	0x34010905
34010674:	34010905 	.word	0x34010905
34010678:	34010905 	.word	0x34010905
3401067c:	34010905 	.word	0x34010905
34010680:	34010905 	.word	0x34010905
34010684:	34010905 	.word	0x34010905
34010688:	34010905 	.word	0x34010905
3401068c:	34010905 	.word	0x34010905
34010690:	34010905 	.word	0x34010905
34010694:	34010905 	.word	0x34010905
34010698:	34010905 	.word	0x34010905
3401069c:	3401071f 	.word	0x3401071f
340106a0:	e9d7 2300 	ldrd	r2, r3, [r7]
340106a4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
340106a8:	430b      	orrs	r3, r1
340106aa:	d03e      	beq.n	3401072a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
340106ac:	e12a      	b.n	34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
340106ae:	2070      	movs	r0, #112	@ 0x70
340106b0:	f000 fb90 	bl	34010dd4 <RCCEx_GetADCCLKFreq>
340106b4:	60f8      	str	r0, [r7, #12]
      break;
340106b6:	e126      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
340106b8:	2007      	movs	r0, #7
340106ba:	f000 fc8d 	bl	34010fd8 <RCCEx_GetADFCLKFreq>
340106be:	60f8      	str	r0, [r7, #12]
      break;
340106c0:	e121      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
340106c2:	bf00      	nop
340106c4:	80000001 	.word	0x80000001
340106c8:	40000001 	.word	0x40000001
340106cc:	20000001 	.word	0x20000001
340106d0:	10000001 	.word	0x10000001
340106d4:	08000001 	.word	0x08000001
340106d8:	04000001 	.word	0x04000001
340106dc:	02000001 	.word	0x02000001
340106e0:	01000001 	.word	0x01000001
340106e4:	00800001 	.word	0x00800001
340106e8:	00400001 	.word	0x00400001
340106ec:	00200001 	.word	0x00200001
340106f0:	00100001 	.word	0x00100001
340106f4:	00080001 	.word	0x00080001
340106f8:	00040001 	.word	0x00040001
340106fc:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34010700:	f000 ff0c 	bl	3401151c <RCCEx_GetCSICLKFreq>
34010704:	60f8      	str	r0, [r7, #12]
      break;
34010706:	e0fe      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34010708:	2007      	movs	r0, #7
3401070a:	f000 fd51 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
3401070e:	60f8      	str	r0, [r7, #12]
      break;
34010710:	e0f9      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
34010712:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
34010716:	f000 ff4d 	bl	340115b4 <RCCEx_GetDCMIPPCLKFreq>
3401071a:	60f8      	str	r0, [r7, #12]
      break;
3401071c:	e0f3      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
3401071e:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
34010722:	f000 ffd1 	bl	340116c8 <RCCEx_GetETH1CLKFreq>
34010726:	60f8      	str	r0, [r7, #12]
      break;
34010728:	e0ed      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
3401072a:	2003      	movs	r0, #3
3401072c:	f001 f84c 	bl	340117c8 <RCCEx_GetETH1PTPCLKFreq>
34010730:	60f8      	str	r0, [r7, #12]
      break;
34010732:	e0e8      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
34010734:	2003      	movs	r0, #3
34010736:	f001 f8cb 	bl	340118d0 <RCCEx_GetFDCANCLKFreq>
3401073a:	60f8      	str	r0, [r7, #12]
      break;
3401073c:	e0e3      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
3401073e:	2030      	movs	r0, #48	@ 0x30
34010740:	f001 f946 	bl	340119d0 <RCCEx_GetFMCCLKFreq>
34010744:	60f8      	str	r0, [r7, #12]
      break;
34010746:	e0de      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34010748:	4871      	ldr	r0, [pc, #452]	@ (34010910 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
3401074a:	f001 f9f9 	bl	34011b40 <RCCEx_GetI2CCLKFreq>
3401074e:	60f8      	str	r0, [r7, #12]
      break;
34010750:	e0d9      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34010752:	4870      	ldr	r0, [pc, #448]	@ (34010914 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
34010754:	f001 f9f4 	bl	34011b40 <RCCEx_GetI2CCLKFreq>
34010758:	60f8      	str	r0, [r7, #12]
      break;
3401075a:	e0d4      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
3401075c:	486e      	ldr	r0, [pc, #440]	@ (34010918 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
3401075e:	f001 f9ef 	bl	34011b40 <RCCEx_GetI2CCLKFreq>
34010762:	60f8      	str	r0, [r7, #12]
      break;
34010764:	e0cf      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
34010766:	486d      	ldr	r0, [pc, #436]	@ (3401091c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
34010768:	f001 f9ea 	bl	34011b40 <RCCEx_GetI2CCLKFreq>
3401076c:	60f8      	str	r0, [r7, #12]
      break;
3401076e:	e0ca      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34010770:	486b      	ldr	r0, [pc, #428]	@ (34010920 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
34010772:	f001 fb8d 	bl	34011e90 <RCCEx_GetI3CCLKFreq>
34010776:	60f8      	str	r0, [r7, #12]
      break;
34010778:	e0c5      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3401077a:	486a      	ldr	r0, [pc, #424]	@ (34010924 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
3401077c:	f001 fb88 	bl	34011e90 <RCCEx_GetI3CCLKFreq>
34010780:	60f8      	str	r0, [r7, #12]
      break;
34010782:	e0c0      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34010784:	4868      	ldr	r0, [pc, #416]	@ (34010928 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
34010786:	f001 fcb7 	bl	340120f8 <RCCEx_GetLPTIMCLKFreq>
3401078a:	60f8      	str	r0, [r7, #12]
      break;
3401078c:	e0bb      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
3401078e:	4867      	ldr	r0, [pc, #412]	@ (3401092c <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
34010790:	f001 fcb2 	bl	340120f8 <RCCEx_GetLPTIMCLKFreq>
34010794:	60f8      	str	r0, [r7, #12]
      break;
34010796:	e0b6      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34010798:	4865      	ldr	r0, [pc, #404]	@ (34010930 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
3401079a:	f001 fcad 	bl	340120f8 <RCCEx_GetLPTIMCLKFreq>
3401079e:	60f8      	str	r0, [r7, #12]
      break;
340107a0:	e0b1      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
340107a2:	4864      	ldr	r0, [pc, #400]	@ (34010934 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
340107a4:	f001 fca8 	bl	340120f8 <RCCEx_GetLPTIMCLKFreq>
340107a8:	60f8      	str	r0, [r7, #12]
      break;
340107aa:	e0ac      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
340107ac:	4862      	ldr	r0, [pc, #392]	@ (34010938 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
340107ae:	f001 fca3 	bl	340120f8 <RCCEx_GetLPTIMCLKFreq>
340107b2:	60f8      	str	r0, [r7, #12]
      break;
340107b4:	e0a7      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
340107b6:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
340107ba:	f001 fe47 	bl	3401244c <RCCEx_GetLPUARTCLKFreq>
340107be:	60f8      	str	r0, [r7, #12]
      break;
340107c0:	e0a1      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
340107c2:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
340107c6:	f001 ff43 	bl	34012650 <RCCEx_GetLTDCCLKFreq>
340107ca:	60f8      	str	r0, [r7, #12]
      break;
340107cc:	e09b      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
340107ce:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
340107d2:	f001 ffc7 	bl	34012764 <RCCEx_GetMDFCLKFreq>
340107d6:	60f8      	str	r0, [r7, #12]
      break;
340107d8:	e095      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
340107da:	2030      	movs	r0, #48	@ 0x30
340107dc:	f002 f8cc 	bl	34012978 <RCCEx_GetPSSICLKFreq>
340107e0:	60f8      	str	r0, [r7, #12]
      break;
340107e2:	e090      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
340107e4:	f002 f94a 	bl	34012a7c <RCCEx_GetRTCCLKFreq>
340107e8:	60f8      	str	r0, [r7, #12]
      break;
340107ea:	e08c      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
340107ec:	4853      	ldr	r0, [pc, #332]	@ (3401093c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
340107ee:	f002 f997 	bl	34012b20 <RCCEx_GetSAICLKFreq>
340107f2:	60f8      	str	r0, [r7, #12]
      break;
340107f4:	e087      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
340107f6:	4852      	ldr	r0, [pc, #328]	@ (34010940 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
340107f8:	f002 f992 	bl	34012b20 <RCCEx_GetSAICLKFreq>
340107fc:	60f8      	str	r0, [r7, #12]
      break;
340107fe:	e082      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34010800:	4850      	ldr	r0, [pc, #320]	@ (34010944 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
34010802:	f002 faf3 	bl	34012dec <RCCEx_GetSDMMCCLKFreq>
34010806:	60f8      	str	r0, [r7, #12]
      break;
34010808:	e07d      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3401080a:	484f      	ldr	r0, [pc, #316]	@ (34010948 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
3401080c:	f002 faee 	bl	34012dec <RCCEx_GetSDMMCCLKFreq>
34010810:	60f8      	str	r0, [r7, #12]
      break;
34010812:	e078      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34010814:	2007      	movs	r0, #7
34010816:	f002 fbd3 	bl	34012fc0 <RCCEx_GetSPDIFRXCLKFreq>
3401081a:	60f8      	str	r0, [r7, #12]
      break;
3401081c:	e073      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
3401081e:	484b      	ldr	r0, [pc, #300]	@ (3401094c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
34010820:	f002 fcb2 	bl	34013188 <RCCEx_GetSPICLKFreq>
34010824:	60f8      	str	r0, [r7, #12]
      break;
34010826:	e06e      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34010828:	4849      	ldr	r0, [pc, #292]	@ (34010950 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
3401082a:	f002 fcad 	bl	34013188 <RCCEx_GetSPICLKFreq>
3401082e:	60f8      	str	r0, [r7, #12]
      break;
34010830:	e069      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34010832:	4848      	ldr	r0, [pc, #288]	@ (34010954 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
34010834:	f002 fca8 	bl	34013188 <RCCEx_GetSPICLKFreq>
34010838:	60f8      	str	r0, [r7, #12]
      break;
3401083a:	e064      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
3401083c:	4846      	ldr	r0, [pc, #280]	@ (34010958 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
3401083e:	f002 fca3 	bl	34013188 <RCCEx_GetSPICLKFreq>
34010842:	60f8      	str	r0, [r7, #12]
      break;
34010844:	e05f      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34010846:	4845      	ldr	r0, [pc, #276]	@ (3401095c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
34010848:	f002 fc9e 	bl	34013188 <RCCEx_GetSPICLKFreq>
3401084c:	60f8      	str	r0, [r7, #12]
      break;
3401084e:	e05a      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34010850:	4843      	ldr	r0, [pc, #268]	@ (34010960 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
34010852:	f002 fc99 	bl	34013188 <RCCEx_GetSPICLKFreq>
34010856:	60f8      	str	r0, [r7, #12]
      break;
34010858:	e055      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
3401085a:	4842      	ldr	r0, [pc, #264]	@ (34010964 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
3401085c:	f003 f990 	bl	34013b80 <RCCEx_GetUSARTCLKFreq>
34010860:	60f8      	str	r0, [r7, #12]
      break;
34010862:	e050      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34010864:	4840      	ldr	r0, [pc, #256]	@ (34010968 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
34010866:	f003 f98b 	bl	34013b80 <RCCEx_GetUSARTCLKFreq>
3401086a:	60f8      	str	r0, [r7, #12]
      break;
3401086c:	e04b      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
3401086e:	483f      	ldr	r0, [pc, #252]	@ (3401096c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34010870:	f003 f986 	bl	34013b80 <RCCEx_GetUSARTCLKFreq>
34010874:	60f8      	str	r0, [r7, #12]
      break;
34010876:	e046      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34010878:	483d      	ldr	r0, [pc, #244]	@ (34010970 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
3401087a:	f002 ff57 	bl	3401372c <RCCEx_GetUARTCLKFreq>
3401087e:	60f8      	str	r0, [r7, #12]
      break;
34010880:	e041      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34010882:	483c      	ldr	r0, [pc, #240]	@ (34010974 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
34010884:	f002 ff52 	bl	3401372c <RCCEx_GetUARTCLKFreq>
34010888:	60f8      	str	r0, [r7, #12]
      break;
3401088a:	e03c      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
3401088c:	483a      	ldr	r0, [pc, #232]	@ (34010978 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401088e:	f003 f977 	bl	34013b80 <RCCEx_GetUSARTCLKFreq>
34010892:	60f8      	str	r0, [r7, #12]
      break;
34010894:	e037      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34010896:	4839      	ldr	r0, [pc, #228]	@ (3401097c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
34010898:	f002 ff48 	bl	3401372c <RCCEx_GetUARTCLKFreq>
3401089c:	60f8      	str	r0, [r7, #12]
      break;
3401089e:	e032      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
340108a0:	4837      	ldr	r0, [pc, #220]	@ (34010980 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
340108a2:	f002 ff43 	bl	3401372c <RCCEx_GetUARTCLKFreq>
340108a6:	60f8      	str	r0, [r7, #12]
      break;
340108a8:	e02d      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
340108aa:	4836      	ldr	r0, [pc, #216]	@ (34010984 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
340108ac:	f002 ff3e 	bl	3401372c <RCCEx_GetUARTCLKFreq>
340108b0:	60f8      	str	r0, [r7, #12]
      break;
340108b2:	e028      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
340108b4:	4834      	ldr	r0, [pc, #208]	@ (34010988 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
340108b6:	f003 f963 	bl	34013b80 <RCCEx_GetUSARTCLKFreq>
340108ba:	60f8      	str	r0, [r7, #12]
      break;
340108bc:	e023      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
340108be:	4833      	ldr	r0, [pc, #204]	@ (3401098c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
340108c0:	f003 fc3e 	bl	34014140 <RCCEx_GetOTGPHYCKREFCLKFreq>
340108c4:	60f8      	str	r0, [r7, #12]
      break;
340108c6:	e01e      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
340108c8:	4831      	ldr	r0, [pc, #196]	@ (34010990 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
340108ca:	f003 fb83 	bl	34013fd4 <RCCEx_GetOTGPHYCLKFreq>
340108ce:	60f8      	str	r0, [r7, #12]
      break;
340108d0:	e019      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
340108d2:	4830      	ldr	r0, [pc, #192]	@ (34010994 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
340108d4:	f003 fc34 	bl	34014140 <RCCEx_GetOTGPHYCKREFCLKFreq>
340108d8:	60f8      	str	r0, [r7, #12]
      break;
340108da:	e014      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340108dc:	482e      	ldr	r0, [pc, #184]	@ (34010998 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
340108de:	f003 fb79 	bl	34013fd4 <RCCEx_GetOTGPHYCLKFreq>
340108e2:	60f8      	str	r0, [r7, #12]
      break;
340108e4:	e00f      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
340108e6:	482d      	ldr	r0, [pc, #180]	@ (3401099c <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
340108e8:	f003 fc7a 	bl	340141e0 <RCCEx_GetXSPICLKFreq>
340108ec:	60f8      	str	r0, [r7, #12]
      break;
340108ee:	e00a      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
340108f0:	482b      	ldr	r0, [pc, #172]	@ (340109a0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
340108f2:	f003 fc75 	bl	340141e0 <RCCEx_GetXSPICLKFreq>
340108f6:	60f8      	str	r0, [r7, #12]
      break;
340108f8:	e005      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
340108fa:	482a      	ldr	r0, [pc, #168]	@ (340109a4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
340108fc:	f003 fc70 	bl	340141e0 <RCCEx_GetXSPICLKFreq>
34010900:	60f8      	str	r0, [r7, #12]
      break;
34010902:	e000      	b.n	34010906 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34010904:	bf00      	nop
  }

  return frequency;
34010906:	68fb      	ldr	r3, [r7, #12]
}
34010908:	4618      	mov	r0, r3
3401090a:	3714      	adds	r7, #20
3401090c:	46bd      	mov	sp, r7
3401090e:	bd90      	pop	{r4, r7, pc}
34010910:	0700000c 	.word	0x0700000c
34010914:	0700040c 	.word	0x0700040c
34010918:	0700080c 	.word	0x0700080c
3401091c:	07000c0c 	.word	0x07000c0c
34010920:	0700100c 	.word	0x0700100c
34010924:	0700140c 	.word	0x0700140c
34010928:	0700082c 	.word	0x0700082c
3401092c:	07000c2c 	.word	0x07000c2c
34010930:	0700102c 	.word	0x0700102c
34010934:	0700142c 	.word	0x0700142c
34010938:	0700182c 	.word	0x0700182c
3401093c:	07001418 	.word	0x07001418
34010940:	07001818 	.word	0x07001818
34010944:	0300001c 	.word	0x0300001c
34010948:	0300041c 	.word	0x0300041c
3401094c:	07000420 	.word	0x07000420
34010950:	07000820 	.word	0x07000820
34010954:	07000c20 	.word	0x07000c20
34010958:	07001020 	.word	0x07001020
3401095c:	07001420 	.word	0x07001420
34010960:	07001820 	.word	0x07001820
34010964:	07000030 	.word	0x07000030
34010968:	07000430 	.word	0x07000430
3401096c:	07000830 	.word	0x07000830
34010970:	07000c30 	.word	0x07000c30
34010974:	07001030 	.word	0x07001030
34010978:	07001430 	.word	0x07001430
3401097c:	07001830 	.word	0x07001830
34010980:	07001c30 	.word	0x07001c30
34010984:	07000034 	.word	0x07000034
34010988:	07000434 	.word	0x07000434
3401098c:	01001014 	.word	0x01001014
34010990:	03000c14 	.word	0x03000c14
34010994:	01001814 	.word	0x01001814
34010998:	03001414 	.word	0x03001414
3401099c:	03000014 	.word	0x03000014
340109a0:	03000414 	.word	0x03000414
340109a4:	03000814 	.word	0x03000814

340109a8 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
340109a8:	b5f0      	push	{r4, r5, r6, r7, lr}
340109aa:	b087      	sub	sp, #28
340109ac:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340109ae:	2300      	movs	r3, #0
340109b0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
340109b2:	f7f8 f89b 	bl	34008aec <LL_RCC_PLL1_IsReady>
340109b6:	4603      	mov	r3, r0
340109b8:	2b00      	cmp	r3, #0
340109ba:	d02a      	beq.n	34010a12 <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
340109bc:	f7f8 f8fe 	bl	34008bbc <LL_RCC_PLL1P_IsEnabled>
340109c0:	4603      	mov	r3, r0
340109c2:	2b00      	cmp	r3, #0
340109c4:	d031      	beq.n	34010a2a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340109c6:	f7f8 f883 	bl	34008ad0 <LL_RCC_PLL1_GetSource>
340109ca:	4603      	mov	r3, r0
340109cc:	4618      	mov	r0, r3
340109ce:	f000 f957 	bl	34010c80 <RCCEx_GetPLLSourceFreq>
340109d2:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340109d4:	68bb      	ldr	r3, [r7, #8]
340109d6:	2b00      	cmp	r3, #0
340109d8:	d027      	beq.n	34010a2a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
340109da:	f7f8 f8bf 	bl	34008b5c <LL_RCC_PLL1_GetM>
340109de:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
340109e0:	687b      	ldr	r3, [r7, #4]
340109e2:	2b00      	cmp	r3, #0
340109e4:	d021      	beq.n	34010a2a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
340109e6:	f7f8 f8a9 	bl	34008b3c <LL_RCC_PLL1_GetN>
340109ea:	4605      	mov	r5, r0
340109ec:	f7f8 f8fa 	bl	34008be4 <LL_RCC_PLL1_GetFRACN>
340109f0:	4606      	mov	r6, r0
340109f2:	f7f8 f8c3 	bl	34008b7c <LL_RCC_PLL1_GetP1>
340109f6:	4604      	mov	r4, r0
340109f8:	f7f8 f8d0 	bl	34008b9c <LL_RCC_PLL1_GetP2>
340109fc:	4603      	mov	r3, r0
340109fe:	9301      	str	r3, [sp, #4]
34010a00:	9400      	str	r4, [sp, #0]
34010a02:	4633      	mov	r3, r6
34010a04:	462a      	mov	r2, r5
34010a06:	6879      	ldr	r1, [r7, #4]
34010a08:	68b8      	ldr	r0, [r7, #8]
34010a0a:	f000 f997 	bl	34010d3c <RCCEx_CalcPLLFreq>
34010a0e:	60f8      	str	r0, [r7, #12]
34010a10:	e00b      	b.n	34010a2a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
34010a12:	f7f8 f87f 	bl	34008b14 <LL_RCC_PLL1_IsEnabledBypass>
34010a16:	4603      	mov	r3, r0
34010a18:	2b00      	cmp	r3, #0
34010a1a:	d006      	beq.n	34010a2a <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34010a1c:	f7f8 f858 	bl	34008ad0 <LL_RCC_PLL1_GetSource>
34010a20:	4603      	mov	r3, r0
34010a22:	4618      	mov	r0, r3
34010a24:	f000 f92c 	bl	34010c80 <RCCEx_GetPLLSourceFreq>
34010a28:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010a2a:	68fb      	ldr	r3, [r7, #12]
}
34010a2c:	4618      	mov	r0, r3
34010a2e:	3714      	adds	r7, #20
34010a30:	46bd      	mov	sp, r7
34010a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010a34 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
34010a34:	b5f0      	push	{r4, r5, r6, r7, lr}
34010a36:	b087      	sub	sp, #28
34010a38:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010a3a:	2300      	movs	r3, #0
34010a3c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
34010a3e:	f7f8 f8ed 	bl	34008c1c <LL_RCC_PLL2_IsReady>
34010a42:	4603      	mov	r3, r0
34010a44:	2b00      	cmp	r3, #0
34010a46:	d02a      	beq.n	34010a9e <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
34010a48:	f7f8 f950 	bl	34008cec <LL_RCC_PLL2P_IsEnabled>
34010a4c:	4603      	mov	r3, r0
34010a4e:	2b00      	cmp	r3, #0
34010a50:	d031      	beq.n	34010ab6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34010a52:	f7f8 f8d5 	bl	34008c00 <LL_RCC_PLL2_GetSource>
34010a56:	4603      	mov	r3, r0
34010a58:	4618      	mov	r0, r3
34010a5a:	f000 f911 	bl	34010c80 <RCCEx_GetPLLSourceFreq>
34010a5e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010a60:	68bb      	ldr	r3, [r7, #8]
34010a62:	2b00      	cmp	r3, #0
34010a64:	d027      	beq.n	34010ab6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
34010a66:	f7f8 f911 	bl	34008c8c <LL_RCC_PLL2_GetM>
34010a6a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010a6c:	687b      	ldr	r3, [r7, #4]
34010a6e:	2b00      	cmp	r3, #0
34010a70:	d021      	beq.n	34010ab6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34010a72:	f7f8 f8fb 	bl	34008c6c <LL_RCC_PLL2_GetN>
34010a76:	4605      	mov	r5, r0
34010a78:	f7f8 f94c 	bl	34008d14 <LL_RCC_PLL2_GetFRACN>
34010a7c:	4606      	mov	r6, r0
34010a7e:	f7f8 f915 	bl	34008cac <LL_RCC_PLL2_GetP1>
34010a82:	4604      	mov	r4, r0
34010a84:	f7f8 f922 	bl	34008ccc <LL_RCC_PLL2_GetP2>
34010a88:	4603      	mov	r3, r0
34010a8a:	9301      	str	r3, [sp, #4]
34010a8c:	9400      	str	r4, [sp, #0]
34010a8e:	4633      	mov	r3, r6
34010a90:	462a      	mov	r2, r5
34010a92:	6879      	ldr	r1, [r7, #4]
34010a94:	68b8      	ldr	r0, [r7, #8]
34010a96:	f000 f951 	bl	34010d3c <RCCEx_CalcPLLFreq>
34010a9a:	60f8      	str	r0, [r7, #12]
34010a9c:	e00b      	b.n	34010ab6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
34010a9e:	f7f8 f8d1 	bl	34008c44 <LL_RCC_PLL2_IsEnabledBypass>
34010aa2:	4603      	mov	r3, r0
34010aa4:	2b00      	cmp	r3, #0
34010aa6:	d006      	beq.n	34010ab6 <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34010aa8:	f7f8 f8aa 	bl	34008c00 <LL_RCC_PLL2_GetSource>
34010aac:	4603      	mov	r3, r0
34010aae:	4618      	mov	r0, r3
34010ab0:	f000 f8e6 	bl	34010c80 <RCCEx_GetPLLSourceFreq>
34010ab4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010ab6:	68fb      	ldr	r3, [r7, #12]
}
34010ab8:	4618      	mov	r0, r3
34010aba:	3714      	adds	r7, #20
34010abc:	46bd      	mov	sp, r7
34010abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
34010ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
34010ac2:	b087      	sub	sp, #28
34010ac4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010ac6:	2300      	movs	r3, #0
34010ac8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
34010aca:	f7f8 f93f 	bl	34008d4c <LL_RCC_PLL3_IsReady>
34010ace:	4603      	mov	r3, r0
34010ad0:	2b00      	cmp	r3, #0
34010ad2:	d02a      	beq.n	34010b2a <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
34010ad4:	f7f8 f9a2 	bl	34008e1c <LL_RCC_PLL3P_IsEnabled>
34010ad8:	4603      	mov	r3, r0
34010ada:	2b00      	cmp	r3, #0
34010adc:	d031      	beq.n	34010b42 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34010ade:	f7f8 f927 	bl	34008d30 <LL_RCC_PLL3_GetSource>
34010ae2:	4603      	mov	r3, r0
34010ae4:	4618      	mov	r0, r3
34010ae6:	f000 f8cb 	bl	34010c80 <RCCEx_GetPLLSourceFreq>
34010aea:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010aec:	68bb      	ldr	r3, [r7, #8]
34010aee:	2b00      	cmp	r3, #0
34010af0:	d027      	beq.n	34010b42 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
34010af2:	f7f8 f963 	bl	34008dbc <LL_RCC_PLL3_GetM>
34010af6:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010af8:	687b      	ldr	r3, [r7, #4]
34010afa:	2b00      	cmp	r3, #0
34010afc:	d021      	beq.n	34010b42 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34010afe:	f7f8 f94d 	bl	34008d9c <LL_RCC_PLL3_GetN>
34010b02:	4605      	mov	r5, r0
34010b04:	f7f8 f99e 	bl	34008e44 <LL_RCC_PLL3_GetFRACN>
34010b08:	4606      	mov	r6, r0
34010b0a:	f7f8 f967 	bl	34008ddc <LL_RCC_PLL3_GetP1>
34010b0e:	4604      	mov	r4, r0
34010b10:	f7f8 f974 	bl	34008dfc <LL_RCC_PLL3_GetP2>
34010b14:	4603      	mov	r3, r0
34010b16:	9301      	str	r3, [sp, #4]
34010b18:	9400      	str	r4, [sp, #0]
34010b1a:	4633      	mov	r3, r6
34010b1c:	462a      	mov	r2, r5
34010b1e:	6879      	ldr	r1, [r7, #4]
34010b20:	68b8      	ldr	r0, [r7, #8]
34010b22:	f000 f90b 	bl	34010d3c <RCCEx_CalcPLLFreq>
34010b26:	60f8      	str	r0, [r7, #12]
34010b28:	e00b      	b.n	34010b42 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
34010b2a:	f7f8 f923 	bl	34008d74 <LL_RCC_PLL3_IsEnabledBypass>
34010b2e:	4603      	mov	r3, r0
34010b30:	2b00      	cmp	r3, #0
34010b32:	d006      	beq.n	34010b42 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34010b34:	f7f8 f8fc 	bl	34008d30 <LL_RCC_PLL3_GetSource>
34010b38:	4603      	mov	r3, r0
34010b3a:	4618      	mov	r0, r3
34010b3c:	f000 f8a0 	bl	34010c80 <RCCEx_GetPLLSourceFreq>
34010b40:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010b42:	68fb      	ldr	r3, [r7, #12]
}
34010b44:	4618      	mov	r0, r3
34010b46:	3714      	adds	r7, #20
34010b48:	46bd      	mov	sp, r7
34010b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010b4c <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
34010b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
34010b4e:	b087      	sub	sp, #28
34010b50:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010b52:	2300      	movs	r3, #0
34010b54:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
34010b56:	f7f8 f991 	bl	34008e7c <LL_RCC_PLL4_IsReady>
34010b5a:	4603      	mov	r3, r0
34010b5c:	2b00      	cmp	r3, #0
34010b5e:	d02a      	beq.n	34010bb6 <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
34010b60:	f7f8 f9f4 	bl	34008f4c <LL_RCC_PLL4P_IsEnabled>
34010b64:	4603      	mov	r3, r0
34010b66:	2b00      	cmp	r3, #0
34010b68:	d031      	beq.n	34010bce <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34010b6a:	f7f8 f979 	bl	34008e60 <LL_RCC_PLL4_GetSource>
34010b6e:	4603      	mov	r3, r0
34010b70:	4618      	mov	r0, r3
34010b72:	f000 f885 	bl	34010c80 <RCCEx_GetPLLSourceFreq>
34010b76:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010b78:	68bb      	ldr	r3, [r7, #8]
34010b7a:	2b00      	cmp	r3, #0
34010b7c:	d027      	beq.n	34010bce <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
34010b7e:	f7f8 f9b5 	bl	34008eec <LL_RCC_PLL4_GetM>
34010b82:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010b84:	687b      	ldr	r3, [r7, #4]
34010b86:	2b00      	cmp	r3, #0
34010b88:	d021      	beq.n	34010bce <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34010b8a:	f7f8 f99f 	bl	34008ecc <LL_RCC_PLL4_GetN>
34010b8e:	4605      	mov	r5, r0
34010b90:	f7f8 f9f0 	bl	34008f74 <LL_RCC_PLL4_GetFRACN>
34010b94:	4606      	mov	r6, r0
34010b96:	f7f8 f9b9 	bl	34008f0c <LL_RCC_PLL4_GetP1>
34010b9a:	4604      	mov	r4, r0
34010b9c:	f7f8 f9c6 	bl	34008f2c <LL_RCC_PLL4_GetP2>
34010ba0:	4603      	mov	r3, r0
34010ba2:	9301      	str	r3, [sp, #4]
34010ba4:	9400      	str	r4, [sp, #0]
34010ba6:	4633      	mov	r3, r6
34010ba8:	462a      	mov	r2, r5
34010baa:	6879      	ldr	r1, [r7, #4]
34010bac:	68b8      	ldr	r0, [r7, #8]
34010bae:	f000 f8c5 	bl	34010d3c <RCCEx_CalcPLLFreq>
34010bb2:	60f8      	str	r0, [r7, #12]
34010bb4:	e00b      	b.n	34010bce <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
34010bb6:	f7f8 f975 	bl	34008ea4 <LL_RCC_PLL4_IsEnabledBypass>
34010bba:	4603      	mov	r3, r0
34010bbc:	2b00      	cmp	r3, #0
34010bbe:	d006      	beq.n	34010bce <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34010bc0:	f7f8 f94e 	bl	34008e60 <LL_RCC_PLL4_GetSource>
34010bc4:	4603      	mov	r3, r0
34010bc6:	4618      	mov	r0, r3
34010bc8:	f000 f85a 	bl	34010c80 <RCCEx_GetPLLSourceFreq>
34010bcc:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010bce:	68fb      	ldr	r3, [r7, #12]
}
34010bd0:	4618      	mov	r0, r3
34010bd2:	3714      	adds	r7, #20
34010bd4:	46bd      	mov	sp, r7
34010bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010bd8 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
34010bd8:	b580      	push	{r7, lr}
34010bda:	b082      	sub	sp, #8
34010bdc:	af00      	add	r7, sp, #0
34010bde:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34010be0:	f7f7 fb60 	bl	340082a4 <LL_RCC_GetAHBPrescaler>
34010be4:	4603      	mov	r3, r0
34010be6:	0d1b      	lsrs	r3, r3, #20
34010be8:	f003 0307 	and.w	r3, r3, #7
34010bec:	687a      	ldr	r2, [r7, #4]
34010bee:	fa22 f303 	lsr.w	r3, r2, r3
}
34010bf2:	4618      	mov	r0, r3
34010bf4:	3708      	adds	r7, #8
34010bf6:	46bd      	mov	sp, r7
34010bf8:	bd80      	pop	{r7, pc}

34010bfa <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
34010bfa:	b580      	push	{r7, lr}
34010bfc:	b082      	sub	sp, #8
34010bfe:	af00      	add	r7, sp, #0
34010c00:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
34010c02:	f7f7 fb5d 	bl	340082c0 <LL_RCC_GetAPB1Prescaler>
34010c06:	4603      	mov	r3, r0
34010c08:	f003 0307 	and.w	r3, r3, #7
34010c0c:	687a      	ldr	r2, [r7, #4]
34010c0e:	fa22 f303 	lsr.w	r3, r2, r3
}
34010c12:	4618      	mov	r0, r3
34010c14:	3708      	adds	r7, #8
34010c16:	46bd      	mov	sp, r7
34010c18:	bd80      	pop	{r7, pc}

34010c1a <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
34010c1a:	b580      	push	{r7, lr}
34010c1c:	b082      	sub	sp, #8
34010c1e:	af00      	add	r7, sp, #0
34010c20:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34010c22:	f7f7 fb5b 	bl	340082dc <LL_RCC_GetAPB2Prescaler>
34010c26:	4603      	mov	r3, r0
34010c28:	091b      	lsrs	r3, r3, #4
34010c2a:	f003 0307 	and.w	r3, r3, #7
34010c2e:	687a      	ldr	r2, [r7, #4]
34010c30:	fa22 f303 	lsr.w	r3, r2, r3
}
34010c34:	4618      	mov	r0, r3
34010c36:	3708      	adds	r7, #8
34010c38:	46bd      	mov	sp, r7
34010c3a:	bd80      	pop	{r7, pc}

34010c3c <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
34010c3c:	b580      	push	{r7, lr}
34010c3e:	b082      	sub	sp, #8
34010c40:	af00      	add	r7, sp, #0
34010c42:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34010c44:	f7f7 fb58 	bl	340082f8 <LL_RCC_GetAPB4Prescaler>
34010c48:	4603      	mov	r3, r0
34010c4a:	0b1b      	lsrs	r3, r3, #12
34010c4c:	f003 0307 	and.w	r3, r3, #7
34010c50:	687a      	ldr	r2, [r7, #4]
34010c52:	fa22 f303 	lsr.w	r3, r2, r3
}
34010c56:	4618      	mov	r0, r3
34010c58:	3708      	adds	r7, #8
34010c5a:	46bd      	mov	sp, r7
34010c5c:	bd80      	pop	{r7, pc}

34010c5e <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
34010c5e:	b580      	push	{r7, lr}
34010c60:	b082      	sub	sp, #8
34010c62:	af00      	add	r7, sp, #0
34010c64:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34010c66:	f7f7 fb55 	bl	34008314 <LL_RCC_GetAPB5Prescaler>
34010c6a:	4603      	mov	r3, r0
34010c6c:	0c1b      	lsrs	r3, r3, #16
34010c6e:	f003 0307 	and.w	r3, r3, #7
34010c72:	687a      	ldr	r2, [r7, #4]
34010c74:	fa22 f303 	lsr.w	r3, r2, r3
}
34010c78:	4618      	mov	r0, r3
34010c7a:	3708      	adds	r7, #8
34010c7c:	46bd      	mov	sp, r7
34010c7e:	bd80      	pop	{r7, pc}

34010c80 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
34010c80:	b580      	push	{r7, lr}
34010c82:	b084      	sub	sp, #16
34010c84:	af00      	add	r7, sp, #0
34010c86:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34010c88:	2300      	movs	r3, #0
34010c8a:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
34010c8c:	687b      	ldr	r3, [r7, #4]
34010c8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010c92:	d039      	beq.n	34010d08 <RCCEx_GetPLLSourceFreq+0x88>
34010c94:	687b      	ldr	r3, [r7, #4]
34010c96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010c9a:	d838      	bhi.n	34010d0e <RCCEx_GetPLLSourceFreq+0x8e>
34010c9c:	687b      	ldr	r3, [r7, #4]
34010c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010ca2:	d029      	beq.n	34010cf8 <RCCEx_GetPLLSourceFreq+0x78>
34010ca4:	687b      	ldr	r3, [r7, #4]
34010ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010caa:	d830      	bhi.n	34010d0e <RCCEx_GetPLLSourceFreq+0x8e>
34010cac:	687b      	ldr	r3, [r7, #4]
34010cae:	2b00      	cmp	r3, #0
34010cb0:	d004      	beq.n	34010cbc <RCCEx_GetPLLSourceFreq+0x3c>
34010cb2:	687b      	ldr	r3, [r7, #4]
34010cb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010cb8:	d00e      	beq.n	34010cd8 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
34010cba:	e028      	b.n	34010d0e <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
34010cbc:	f7f7 fa92 	bl	340081e4 <LL_RCC_HSI_IsReady>
34010cc0:	4603      	mov	r3, r0
34010cc2:	2b00      	cmp	r3, #0
34010cc4:	d025      	beq.n	34010d12 <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34010cc6:	f7f7 fa9f 	bl	34008208 <LL_RCC_HSI_GetDivider>
34010cca:	4603      	mov	r3, r0
34010ccc:	09db      	lsrs	r3, r3, #7
34010cce:	4a16      	ldr	r2, [pc, #88]	@ (34010d28 <RCCEx_GetPLLSourceFreq+0xa8>)
34010cd0:	fa22 f303 	lsr.w	r3, r2, r3
34010cd4:	60fb      	str	r3, [r7, #12]
      break;
34010cd6:	e01c      	b.n	34010d12 <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
34010cd8:	f7f7 faa4 	bl	34008224 <LL_RCC_MSI_IsReady>
34010cdc:	4603      	mov	r3, r0
34010cde:	2b00      	cmp	r3, #0
34010ce0:	d019      	beq.n	34010d16 <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34010ce2:	f7f7 fab1 	bl	34008248 <LL_RCC_MSI_GetFrequency>
34010ce6:	4603      	mov	r3, r0
34010ce8:	2b00      	cmp	r3, #0
34010cea:	d102      	bne.n	34010cf2 <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
34010cec:	4b0f      	ldr	r3, [pc, #60]	@ (34010d2c <RCCEx_GetPLLSourceFreq+0xac>)
34010cee:	60fb      	str	r3, [r7, #12]
      break;
34010cf0:	e011      	b.n	34010d16 <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
34010cf2:	4b0f      	ldr	r3, [pc, #60]	@ (34010d30 <RCCEx_GetPLLSourceFreq+0xb0>)
34010cf4:	60fb      	str	r3, [r7, #12]
      break;
34010cf6:	e00e      	b.n	34010d16 <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
34010cf8:	f7f7 fa62 	bl	340081c0 <LL_RCC_HSE_IsReady>
34010cfc:	4603      	mov	r3, r0
34010cfe:	2b00      	cmp	r3, #0
34010d00:	d00b      	beq.n	34010d1a <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
34010d02:	4b0c      	ldr	r3, [pc, #48]	@ (34010d34 <RCCEx_GetPLLSourceFreq+0xb4>)
34010d04:	60fb      	str	r3, [r7, #12]
      break;
34010d06:	e008      	b.n	34010d1a <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34010d08:	4b0b      	ldr	r3, [pc, #44]	@ (34010d38 <RCCEx_GetPLLSourceFreq+0xb8>)
34010d0a:	60fb      	str	r3, [r7, #12]
      break;
34010d0c:	e006      	b.n	34010d1c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010d0e:	bf00      	nop
34010d10:	e004      	b.n	34010d1c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010d12:	bf00      	nop
34010d14:	e002      	b.n	34010d1c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010d16:	bf00      	nop
34010d18:	e000      	b.n	34010d1c <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010d1a:	bf00      	nop
  }

  return pllinputfreq;
34010d1c:	68fb      	ldr	r3, [r7, #12]
}
34010d1e:	4618      	mov	r0, r3
34010d20:	3710      	adds	r7, #16
34010d22:	46bd      	mov	sp, r7
34010d24:	bd80      	pop	{r7, pc}
34010d26:	bf00      	nop
34010d28:	03d09000 	.word	0x03d09000
34010d2c:	003d0900 	.word	0x003d0900
34010d30:	00f42400 	.word	0x00f42400
34010d34:	02dc6c00 	.word	0x02dc6c00
34010d38:	00bb8000 	.word	0x00bb8000

34010d3c <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34010d3c:	b480      	push	{r7}
34010d3e:	b087      	sub	sp, #28
34010d40:	af00      	add	r7, sp, #0
34010d42:	60f8      	str	r0, [r7, #12]
34010d44:	60b9      	str	r1, [r7, #8]
34010d46:	607a      	str	r2, [r7, #4]
34010d48:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34010d4a:	68fb      	ldr	r3, [r7, #12]
34010d4c:	ee07 3a90 	vmov	s15, r3
34010d50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010d54:	687b      	ldr	r3, [r7, #4]
34010d56:	ee07 3a90 	vmov	s15, r3
34010d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
34010d5e:	683b      	ldr	r3, [r7, #0]
34010d60:	ee07 3a90 	vmov	s15, r3
34010d64:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34010d68:	eddf 5a19 	vldr	s11, [pc, #100]	@ 34010dd0 <RCCEx_CalcPLLFreq+0x94>
34010d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
34010d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
34010d74:	ee67 6a27 	vmul.f32	s13, s14, s15
34010d78:	68bb      	ldr	r3, [r7, #8]
34010d7a:	ee07 3a90 	vmov	s15, r3
34010d7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
34010d86:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
34010d8a:	6a3b      	ldr	r3, [r7, #32]
34010d8c:	ee07 3a90 	vmov	s15, r3
34010d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010d94:	edd7 6a05 	vldr	s13, [r7, #20]
34010d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
34010d9c:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
34010da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34010da2:	ee07 3a90 	vmov	s15, r3
34010da6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010daa:	edd7 6a05 	vldr	s13, [r7, #20]
34010dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
34010db2:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
34010db6:	edd7 7a05 	vldr	s15, [r7, #20]
34010dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34010dbe:	ee17 3a90 	vmov	r3, s15
}
34010dc2:	4618      	mov	r0, r3
34010dc4:	371c      	adds	r7, #28
34010dc6:	46bd      	mov	sp, r7
34010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34010dcc:	4770      	bx	lr
34010dce:	bf00      	nop
34010dd0:	4b800000 	.word	0x4b800000

34010dd4 <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
34010dd4:	b590      	push	{r4, r7, lr}
34010dd6:	b085      	sub	sp, #20
34010dd8:	af00      	add	r7, sp, #0
34010dda:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34010ddc:	2300      	movs	r3, #0
34010dde:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
34010de0:	6878      	ldr	r0, [r7, #4]
34010de2:	f7f7 fcb5 	bl	34008750 <LL_RCC_GetADCClockSource>
34010de6:	4603      	mov	r3, r0
34010de8:	2b70      	cmp	r3, #112	@ 0x70
34010dea:	f000 80d1 	beq.w	34010f90 <RCCEx_GetADCCLKFreq+0x1bc>
34010dee:	2b70      	cmp	r3, #112	@ 0x70
34010df0:	f200 80d8 	bhi.w	34010fa4 <RCCEx_GetADCCLKFreq+0x1d0>
34010df4:	2b60      	cmp	r3, #96	@ 0x60
34010df6:	f000 80c8 	beq.w	34010f8a <RCCEx_GetADCCLKFreq+0x1b6>
34010dfa:	2b60      	cmp	r3, #96	@ 0x60
34010dfc:	f200 80d2 	bhi.w	34010fa4 <RCCEx_GetADCCLKFreq+0x1d0>
34010e00:	2b50      	cmp	r3, #80	@ 0x50
34010e02:	f000 80ac 	beq.w	34010f5e <RCCEx_GetADCCLKFreq+0x18a>
34010e06:	2b50      	cmp	r3, #80	@ 0x50
34010e08:	f200 80cc 	bhi.w	34010fa4 <RCCEx_GetADCCLKFreq+0x1d0>
34010e0c:	2b40      	cmp	r3, #64	@ 0x40
34010e0e:	f000 80b4 	beq.w	34010f7a <RCCEx_GetADCCLKFreq+0x1a6>
34010e12:	2b40      	cmp	r3, #64	@ 0x40
34010e14:	f200 80c6 	bhi.w	34010fa4 <RCCEx_GetADCCLKFreq+0x1d0>
34010e18:	2b30      	cmp	r3, #48	@ 0x30
34010e1a:	d05d      	beq.n	34010ed8 <RCCEx_GetADCCLKFreq+0x104>
34010e1c:	2b30      	cmp	r3, #48	@ 0x30
34010e1e:	f200 80c1 	bhi.w	34010fa4 <RCCEx_GetADCCLKFreq+0x1d0>
34010e22:	2b20      	cmp	r3, #32
34010e24:	d014      	beq.n	34010e50 <RCCEx_GetADCCLKFreq+0x7c>
34010e26:	2b20      	cmp	r3, #32
34010e28:	f200 80bc 	bhi.w	34010fa4 <RCCEx_GetADCCLKFreq+0x1d0>
34010e2c:	2b00      	cmp	r3, #0
34010e2e:	d002      	beq.n	34010e36 <RCCEx_GetADCCLKFreq+0x62>
34010e30:	2b10      	cmp	r3, #16
34010e32:	d008      	beq.n	34010e46 <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34010e34:	e0b6      	b.n	34010fa4 <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34010e36:	f7f6 fdd7 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34010e3a:	4603      	mov	r3, r0
34010e3c:	4618      	mov	r0, r3
34010e3e:	f7ff fecb 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34010e42:	60f8      	str	r0, [r7, #12]
      break;
34010e44:	e0b7      	b.n	34010fb6 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34010e46:	2007      	movs	r0, #7
34010e48:	f000 f9b2 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
34010e4c:	60f8      	str	r0, [r7, #12]
      break;
34010e4e:	e0b2      	b.n	34010fb6 <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34010e50:	f7f8 f96c 	bl	3400912c <LL_RCC_IC7_IsEnabled>
34010e54:	4603      	mov	r3, r0
34010e56:	2b00      	cmp	r3, #0
34010e58:	f000 80a6 	beq.w	34010fa8 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
34010e5c:	f7f8 f988 	bl	34009170 <LL_RCC_IC7_GetDivider>
34010e60:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34010e62:	f7f8 f977 	bl	34009154 <LL_RCC_IC7_GetSource>
34010e66:	4603      	mov	r3, r0
34010e68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010e6c:	d029      	beq.n	34010ec2 <RCCEx_GetADCCLKFreq+0xee>
34010e6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010e72:	d82f      	bhi.n	34010ed4 <RCCEx_GetADCCLKFreq+0x100>
34010e74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010e78:	d01a      	beq.n	34010eb0 <RCCEx_GetADCCLKFreq+0xdc>
34010e7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010e7e:	d829      	bhi.n	34010ed4 <RCCEx_GetADCCLKFreq+0x100>
34010e80:	2b00      	cmp	r3, #0
34010e82:	d003      	beq.n	34010e8c <RCCEx_GetADCCLKFreq+0xb8>
34010e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010e88:	d009      	beq.n	34010e9e <RCCEx_GetADCCLKFreq+0xca>
            break;
34010e8a:	e023      	b.n	34010ed4 <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34010e8c:	f7ff fd8c 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34010e90:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010e92:	68fa      	ldr	r2, [r7, #12]
34010e94:	68bb      	ldr	r3, [r7, #8]
34010e96:	fbb2 f3f3 	udiv	r3, r2, r3
34010e9a:	60fb      	str	r3, [r7, #12]
            break;
34010e9c:	e01b      	b.n	34010ed6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34010e9e:	f7ff fdc9 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34010ea2:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010ea4:	68fa      	ldr	r2, [r7, #12]
34010ea6:	68bb      	ldr	r3, [r7, #8]
34010ea8:	fbb2 f3f3 	udiv	r3, r2, r3
34010eac:	60fb      	str	r3, [r7, #12]
            break;
34010eae:	e012      	b.n	34010ed6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34010eb0:	f7ff fe06 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34010eb4:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010eb6:	68fa      	ldr	r2, [r7, #12]
34010eb8:	68bb      	ldr	r3, [r7, #8]
34010eba:	fbb2 f3f3 	udiv	r3, r2, r3
34010ebe:	60fb      	str	r3, [r7, #12]
            break;
34010ec0:	e009      	b.n	34010ed6 <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34010ec2:	f7ff fe43 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34010ec6:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010ec8:	68fa      	ldr	r2, [r7, #12]
34010eca:	68bb      	ldr	r3, [r7, #8]
34010ecc:	fbb2 f3f3 	udiv	r3, r2, r3
34010ed0:	60fb      	str	r3, [r7, #12]
            break;
34010ed2:	e000      	b.n	34010ed6 <RCCEx_GetADCCLKFreq+0x102>
            break;
34010ed4:	bf00      	nop
      break;
34010ed6:	e067      	b.n	34010fa8 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34010ed8:	f7f8 f968 	bl	340091ac <LL_RCC_IC8_IsEnabled>
34010edc:	4603      	mov	r3, r0
34010ede:	2b00      	cmp	r3, #0
34010ee0:	d064      	beq.n	34010fac <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34010ee2:	f7f8 f985 	bl	340091f0 <LL_RCC_IC8_GetDivider>
34010ee6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34010ee8:	f7f8 f974 	bl	340091d4 <LL_RCC_IC8_GetSource>
34010eec:	4603      	mov	r3, r0
34010eee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010ef2:	d029      	beq.n	34010f48 <RCCEx_GetADCCLKFreq+0x174>
34010ef4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010ef8:	d82f      	bhi.n	34010f5a <RCCEx_GetADCCLKFreq+0x186>
34010efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010efe:	d01a      	beq.n	34010f36 <RCCEx_GetADCCLKFreq+0x162>
34010f00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010f04:	d829      	bhi.n	34010f5a <RCCEx_GetADCCLKFreq+0x186>
34010f06:	2b00      	cmp	r3, #0
34010f08:	d003      	beq.n	34010f12 <RCCEx_GetADCCLKFreq+0x13e>
34010f0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010f0e:	d009      	beq.n	34010f24 <RCCEx_GetADCCLKFreq+0x150>
            break;
34010f10:	e023      	b.n	34010f5a <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34010f12:	f7ff fd49 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34010f16:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010f18:	68fa      	ldr	r2, [r7, #12]
34010f1a:	68bb      	ldr	r3, [r7, #8]
34010f1c:	fbb2 f3f3 	udiv	r3, r2, r3
34010f20:	60fb      	str	r3, [r7, #12]
            break;
34010f22:	e01b      	b.n	34010f5c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34010f24:	f7ff fd86 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34010f28:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010f2a:	68fa      	ldr	r2, [r7, #12]
34010f2c:	68bb      	ldr	r3, [r7, #8]
34010f2e:	fbb2 f3f3 	udiv	r3, r2, r3
34010f32:	60fb      	str	r3, [r7, #12]
            break;
34010f34:	e012      	b.n	34010f5c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34010f36:	f7ff fdc3 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34010f3a:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010f3c:	68fa      	ldr	r2, [r7, #12]
34010f3e:	68bb      	ldr	r3, [r7, #8]
34010f40:	fbb2 f3f3 	udiv	r3, r2, r3
34010f44:	60fb      	str	r3, [r7, #12]
            break;
34010f46:	e009      	b.n	34010f5c <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34010f48:	f7ff fe00 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34010f4c:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010f4e:	68fa      	ldr	r2, [r7, #12]
34010f50:	68bb      	ldr	r3, [r7, #8]
34010f52:	fbb2 f3f3 	udiv	r3, r2, r3
34010f56:	60fb      	str	r3, [r7, #12]
            break;
34010f58:	e000      	b.n	34010f5c <RCCEx_GetADCCLKFreq+0x188>
            break;
34010f5a:	bf00      	nop
      break;
34010f5c:	e026      	b.n	34010fac <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34010f5e:	f7f7 f941 	bl	340081e4 <LL_RCC_HSI_IsReady>
34010f62:	4603      	mov	r3, r0
34010f64:	2b00      	cmp	r3, #0
34010f66:	d023      	beq.n	34010fb0 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34010f68:	f7f7 f94e 	bl	34008208 <LL_RCC_HSI_GetDivider>
34010f6c:	4603      	mov	r3, r0
34010f6e:	09db      	lsrs	r3, r3, #7
34010f70:	4a16      	ldr	r2, [pc, #88]	@ (34010fcc <RCCEx_GetADCCLKFreq+0x1f8>)
34010f72:	fa22 f303 	lsr.w	r3, r2, r3
34010f76:	60fb      	str	r3, [r7, #12]
      break;
34010f78:	e01a      	b.n	34010fb0 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
34010f7a:	f7f7 f953 	bl	34008224 <LL_RCC_MSI_IsReady>
34010f7e:	4603      	mov	r3, r0
34010f80:	2b00      	cmp	r3, #0
34010f82:	d017      	beq.n	34010fb4 <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
34010f84:	4b12      	ldr	r3, [pc, #72]	@ (34010fd0 <RCCEx_GetADCCLKFreq+0x1fc>)
34010f86:	60fb      	str	r3, [r7, #12]
      break;
34010f88:	e014      	b.n	34010fb4 <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
34010f8a:	4b12      	ldr	r3, [pc, #72]	@ (34010fd4 <RCCEx_GetADCCLKFreq+0x200>)
34010f8c:	60fb      	str	r3, [r7, #12]
      break;
34010f8e:	e012      	b.n	34010fb6 <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34010f90:	f7f6 fd2a 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34010f94:	4604      	mov	r4, r0
34010f96:	f7f7 fd8d 	bl	34008ab4 <LL_RCC_GetTIMPrescaler>
34010f9a:	4603      	mov	r3, r0
34010f9c:	fa24 f303 	lsr.w	r3, r4, r3
34010fa0:	60fb      	str	r3, [r7, #12]
      break;
34010fa2:	e008      	b.n	34010fb6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34010fa4:	bf00      	nop
34010fa6:	e006      	b.n	34010fb6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34010fa8:	bf00      	nop
34010faa:	e004      	b.n	34010fb6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34010fac:	bf00      	nop
34010fae:	e002      	b.n	34010fb6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34010fb0:	bf00      	nop
34010fb2:	e000      	b.n	34010fb6 <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34010fb4:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
34010fb6:	f7f7 f9e5 	bl	34008384 <LL_RCC_GetADCPrescaler>
34010fba:	4603      	mov	r3, r0
34010fbc:	3301      	adds	r3, #1
34010fbe:	68fa      	ldr	r2, [r7, #12]
34010fc0:	fbb2 f3f3 	udiv	r3, r2, r3
}
34010fc4:	4618      	mov	r0, r3
34010fc6:	3714      	adds	r7, #20
34010fc8:	46bd      	mov	sp, r7
34010fca:	bd90      	pop	{r4, r7, pc}
34010fcc:	03d09000 	.word	0x03d09000
34010fd0:	003d0900 	.word	0x003d0900
34010fd4:	00bb8000 	.word	0x00bb8000

34010fd8 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
34010fd8:	b590      	push	{r4, r7, lr}
34010fda:	b085      	sub	sp, #20
34010fdc:	af00      	add	r7, sp, #0
34010fde:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34010fe0:	2300      	movs	r3, #0
34010fe2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
34010fe4:	6878      	ldr	r0, [r7, #4]
34010fe6:	f7f7 fbc5 	bl	34008774 <LL_RCC_GetADFClockSource>
34010fea:	4603      	mov	r3, r0
34010fec:	2b07      	cmp	r3, #7
34010fee:	f200 80ca 	bhi.w	34011186 <RCCEx_GetADFCLKFreq+0x1ae>
34010ff2:	a201      	add	r2, pc, #4	@ (adr r2, 34010ff8 <RCCEx_GetADFCLKFreq+0x20>)
34010ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34010ff8:	34011019 	.word	0x34011019
34010ffc:	34011029 	.word	0x34011029
34011000:	34011033 	.word	0x34011033
34011004:	340110bb 	.word	0x340110bb
34011008:	3401115d 	.word	0x3401115d
3401100c:	34011141 	.word	0x34011141
34011010:	3401116d 	.word	0x3401116d
34011014:	34011173 	.word	0x34011173
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011018:	f7f6 fce6 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
3401101c:	4603      	mov	r3, r0
3401101e:	4618      	mov	r0, r3
34011020:	f7ff fdda 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34011024:	60f8      	str	r0, [r7, #12]
      break;
34011026:	e0b7      	b.n	34011198 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011028:	2007      	movs	r0, #7
3401102a:	f000 f8c1 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
3401102e:	60f8      	str	r0, [r7, #12]
      break;
34011030:	e0b2      	b.n	34011198 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34011032:	f7f8 f87b 	bl	3400912c <LL_RCC_IC7_IsEnabled>
34011036:	4603      	mov	r3, r0
34011038:	2b00      	cmp	r3, #0
3401103a:	f000 80a6 	beq.w	3401118a <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3401103e:	f7f8 f897 	bl	34009170 <LL_RCC_IC7_GetDivider>
34011042:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34011044:	f7f8 f886 	bl	34009154 <LL_RCC_IC7_GetSource>
34011048:	4603      	mov	r3, r0
3401104a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401104e:	d029      	beq.n	340110a4 <RCCEx_GetADFCLKFreq+0xcc>
34011050:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011054:	d82f      	bhi.n	340110b6 <RCCEx_GetADFCLKFreq+0xde>
34011056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401105a:	d01a      	beq.n	34011092 <RCCEx_GetADFCLKFreq+0xba>
3401105c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011060:	d829      	bhi.n	340110b6 <RCCEx_GetADFCLKFreq+0xde>
34011062:	2b00      	cmp	r3, #0
34011064:	d003      	beq.n	3401106e <RCCEx_GetADFCLKFreq+0x96>
34011066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401106a:	d009      	beq.n	34011080 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401106c:	e023      	b.n	340110b6 <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401106e:	f7ff fc9b 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011072:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34011074:	68fa      	ldr	r2, [r7, #12]
34011076:	68bb      	ldr	r3, [r7, #8]
34011078:	fbb2 f3f3 	udiv	r3, r2, r3
3401107c:	60fb      	str	r3, [r7, #12]
            break;
3401107e:	e01b      	b.n	340110b8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011080:	f7ff fcd8 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011084:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34011086:	68fa      	ldr	r2, [r7, #12]
34011088:	68bb      	ldr	r3, [r7, #8]
3401108a:	fbb2 f3f3 	udiv	r3, r2, r3
3401108e:	60fb      	str	r3, [r7, #12]
            break;
34011090:	e012      	b.n	340110b8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011092:	f7ff fd15 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34011096:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34011098:	68fa      	ldr	r2, [r7, #12]
3401109a:	68bb      	ldr	r3, [r7, #8]
3401109c:	fbb2 f3f3 	udiv	r3, r2, r3
340110a0:	60fb      	str	r3, [r7, #12]
            break;
340110a2:	e009      	b.n	340110b8 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340110a4:	f7ff fd52 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
340110a8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340110aa:	68fa      	ldr	r2, [r7, #12]
340110ac:	68bb      	ldr	r3, [r7, #8]
340110ae:	fbb2 f3f3 	udiv	r3, r2, r3
340110b2:	60fb      	str	r3, [r7, #12]
            break;
340110b4:	e000      	b.n	340110b8 <RCCEx_GetADFCLKFreq+0xe0>
            break;
340110b6:	bf00      	nop
        }
      }
      break;
340110b8:	e067      	b.n	3401118a <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
340110ba:	f7f8 f877 	bl	340091ac <LL_RCC_IC8_IsEnabled>
340110be:	4603      	mov	r3, r0
340110c0:	2b00      	cmp	r3, #0
340110c2:	d064      	beq.n	3401118e <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
340110c4:	f7f8 f894 	bl	340091f0 <LL_RCC_IC8_GetDivider>
340110c8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
340110ca:	f7f8 f883 	bl	340091d4 <LL_RCC_IC8_GetSource>
340110ce:	4603      	mov	r3, r0
340110d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340110d4:	d029      	beq.n	3401112a <RCCEx_GetADFCLKFreq+0x152>
340110d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340110da:	d82f      	bhi.n	3401113c <RCCEx_GetADFCLKFreq+0x164>
340110dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340110e0:	d01a      	beq.n	34011118 <RCCEx_GetADFCLKFreq+0x140>
340110e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340110e6:	d829      	bhi.n	3401113c <RCCEx_GetADFCLKFreq+0x164>
340110e8:	2b00      	cmp	r3, #0
340110ea:	d003      	beq.n	340110f4 <RCCEx_GetADFCLKFreq+0x11c>
340110ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340110f0:	d009      	beq.n	34011106 <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340110f2:	e023      	b.n	3401113c <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340110f4:	f7ff fc58 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340110f8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340110fa:	68fa      	ldr	r2, [r7, #12]
340110fc:	68bb      	ldr	r3, [r7, #8]
340110fe:	fbb2 f3f3 	udiv	r3, r2, r3
34011102:	60fb      	str	r3, [r7, #12]
            break;
34011104:	e01b      	b.n	3401113e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011106:	f7ff fc95 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
3401110a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401110c:	68fa      	ldr	r2, [r7, #12]
3401110e:	68bb      	ldr	r3, [r7, #8]
34011110:	fbb2 f3f3 	udiv	r3, r2, r3
34011114:	60fb      	str	r3, [r7, #12]
            break;
34011116:	e012      	b.n	3401113e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011118:	f7ff fcd2 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
3401111c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401111e:	68fa      	ldr	r2, [r7, #12]
34011120:	68bb      	ldr	r3, [r7, #8]
34011122:	fbb2 f3f3 	udiv	r3, r2, r3
34011126:	60fb      	str	r3, [r7, #12]
            break;
34011128:	e009      	b.n	3401113e <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401112a:	f7ff fd0f 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
3401112e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34011130:	68fa      	ldr	r2, [r7, #12]
34011132:	68bb      	ldr	r3, [r7, #8]
34011134:	fbb2 f3f3 	udiv	r3, r2, r3
34011138:	60fb      	str	r3, [r7, #12]
            break;
3401113a:	e000      	b.n	3401113e <RCCEx_GetADFCLKFreq+0x166>
            break;
3401113c:	bf00      	nop
        }
      }
      break;
3401113e:	e026      	b.n	3401118e <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34011140:	f7f7 f850 	bl	340081e4 <LL_RCC_HSI_IsReady>
34011144:	4603      	mov	r3, r0
34011146:	2b00      	cmp	r3, #0
34011148:	d023      	beq.n	34011192 <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401114a:	f7f7 f85d 	bl	34008208 <LL_RCC_HSI_GetDivider>
3401114e:	4603      	mov	r3, r0
34011150:	09db      	lsrs	r3, r3, #7
34011152:	4a14      	ldr	r2, [pc, #80]	@ (340111a4 <RCCEx_GetADFCLKFreq+0x1cc>)
34011154:	fa22 f303 	lsr.w	r3, r2, r3
34011158:	60fb      	str	r3, [r7, #12]
      }
      break;
3401115a:	e01a      	b.n	34011192 <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3401115c:	f7f7 f862 	bl	34008224 <LL_RCC_MSI_IsReady>
34011160:	4603      	mov	r3, r0
34011162:	2b00      	cmp	r3, #0
34011164:	d017      	beq.n	34011196 <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
34011166:	4b10      	ldr	r3, [pc, #64]	@ (340111a8 <RCCEx_GetADFCLKFreq+0x1d0>)
34011168:	60fb      	str	r3, [r7, #12]
      }
      break;
3401116a:	e014      	b.n	34011196 <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
3401116c:	4b0f      	ldr	r3, [pc, #60]	@ (340111ac <RCCEx_GetADFCLKFreq+0x1d4>)
3401116e:	60fb      	str	r3, [r7, #12]
      break;
34011170:	e012      	b.n	34011198 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34011172:	f7f6 fc39 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34011176:	4604      	mov	r4, r0
34011178:	f7f7 fc9c 	bl	34008ab4 <LL_RCC_GetTIMPrescaler>
3401117c:	4603      	mov	r3, r0
3401117e:	fa24 f303 	lsr.w	r3, r4, r3
34011182:	60fb      	str	r3, [r7, #12]
      break;
34011184:	e008      	b.n	34011198 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
34011186:	bf00      	nop
34011188:	e006      	b.n	34011198 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3401118a:	bf00      	nop
3401118c:	e004      	b.n	34011198 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3401118e:	bf00      	nop
34011190:	e002      	b.n	34011198 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34011192:	bf00      	nop
34011194:	e000      	b.n	34011198 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34011196:	bf00      	nop
  }

  return adf_frequency;
34011198:	68fb      	ldr	r3, [r7, #12]
}
3401119a:	4618      	mov	r0, r3
3401119c:	3714      	adds	r7, #20
3401119e:	46bd      	mov	sp, r7
340111a0:	bd90      	pop	{r4, r7, pc}
340111a2:	bf00      	nop
340111a4:	03d09000 	.word	0x03d09000
340111a8:	003d0900 	.word	0x003d0900
340111ac:	00bb8000 	.word	0x00bb8000

340111b0 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
340111b0:	b580      	push	{r7, lr}
340111b2:	b084      	sub	sp, #16
340111b4:	af00      	add	r7, sp, #0
340111b6:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
340111b8:	2300      	movs	r3, #0
340111ba:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
340111bc:	f7f8 faf6 	bl	340097ac <LL_RCC_CLKP_IsEnabled>
340111c0:	4603      	mov	r3, r0
340111c2:	2b01      	cmp	r3, #1
340111c4:	f040 81a5 	bne.w	34011512 <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
340111c8:	6878      	ldr	r0, [r7, #4]
340111ca:	f7f7 fae5 	bl	34008798 <LL_RCC_GetCLKPClockSource>
340111ce:	4603      	mov	r3, r0
340111d0:	2b07      	cmp	r3, #7
340111d2:	f200 818d 	bhi.w	340114f0 <RCCEx_GetCLKPCLKFreq+0x340>
340111d6:	a201      	add	r2, pc, #4	@ (adr r2, 340111dc <RCCEx_GetCLKPCLKFreq+0x2c>)
340111d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340111dc:	340111fd 	.word	0x340111fd
340111e0:	3401121b 	.word	0x3401121b
340111e4:	3401122d 	.word	0x3401122d
340111e8:	340113d7 	.word	0x340113d7
340111ec:	3401123f 	.word	0x3401123f
340111f0:	340112c7 	.word	0x340112c7
340111f4:	3401134f 	.word	0x3401134f
340111f8:	3401145f 	.word	0x3401145f
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
340111fc:	f7f6 fff2 	bl	340081e4 <LL_RCC_HSI_IsReady>
34011200:	4603      	mov	r3, r0
34011202:	2b00      	cmp	r3, #0
34011204:	f000 8176 	beq.w	340114f4 <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34011208:	f7f6 fffe 	bl	34008208 <LL_RCC_HSI_GetDivider>
3401120c:	4603      	mov	r3, r0
3401120e:	09db      	lsrs	r3, r3, #7
34011210:	4aa1      	ldr	r2, [pc, #644]	@ (34011498 <RCCEx_GetCLKPCLKFreq+0x2e8>)
34011212:	fa22 f303 	lsr.w	r3, r2, r3
34011216:	60fb      	str	r3, [r7, #12]
        }
        break;
34011218:	e16c      	b.n	340114f4 <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
3401121a:	f7f7 f803 	bl	34008224 <LL_RCC_MSI_IsReady>
3401121e:	4603      	mov	r3, r0
34011220:	2b00      	cmp	r3, #0
34011222:	f000 8169 	beq.w	340114f8 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
34011226:	4b9d      	ldr	r3, [pc, #628]	@ (3401149c <RCCEx_GetCLKPCLKFreq+0x2ec>)
34011228:	60fb      	str	r3, [r7, #12]
        }
        break;
3401122a:	e165      	b.n	340114f8 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
3401122c:	f7f6 ffc8 	bl	340081c0 <LL_RCC_HSE_IsReady>
34011230:	4603      	mov	r3, r0
34011232:	2b00      	cmp	r3, #0
34011234:	f000 8162 	beq.w	340114fc <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
34011238:	4b99      	ldr	r3, [pc, #612]	@ (340114a0 <RCCEx_GetCLKPCLKFreq+0x2f0>)
3401123a:	60fb      	str	r3, [r7, #12]
        }
        break;
3401123c:	e15e      	b.n	340114fc <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
3401123e:	f7f7 ff35 	bl	340090ac <LL_RCC_IC5_IsEnabled>
34011242:	4603      	mov	r3, r0
34011244:	2b00      	cmp	r3, #0
34011246:	f000 815b 	beq.w	34011500 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
3401124a:	f7f7 ff51 	bl	340090f0 <LL_RCC_IC5_GetDivider>
3401124e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
34011250:	f7f7 ff40 	bl	340090d4 <LL_RCC_IC5_GetSource>
34011254:	4603      	mov	r3, r0
34011256:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401125a:	d029      	beq.n	340112b0 <RCCEx_GetCLKPCLKFreq+0x100>
3401125c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011260:	d82f      	bhi.n	340112c2 <RCCEx_GetCLKPCLKFreq+0x112>
34011262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011266:	d01a      	beq.n	3401129e <RCCEx_GetCLKPCLKFreq+0xee>
34011268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401126c:	d829      	bhi.n	340112c2 <RCCEx_GetCLKPCLKFreq+0x112>
3401126e:	2b00      	cmp	r3, #0
34011270:	d003      	beq.n	3401127a <RCCEx_GetCLKPCLKFreq+0xca>
34011272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011276:	d009      	beq.n	3401128c <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011278:	e023      	b.n	340112c2 <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401127a:	f7ff fb95 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
3401127e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011280:	68fa      	ldr	r2, [r7, #12]
34011282:	68bb      	ldr	r3, [r7, #8]
34011284:	fbb2 f3f3 	udiv	r3, r2, r3
34011288:	60fb      	str	r3, [r7, #12]
              break;
3401128a:	e01b      	b.n	340112c4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401128c:	f7ff fbd2 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011290:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011292:	68fa      	ldr	r2, [r7, #12]
34011294:	68bb      	ldr	r3, [r7, #8]
34011296:	fbb2 f3f3 	udiv	r3, r2, r3
3401129a:	60fb      	str	r3, [r7, #12]
              break;
3401129c:	e012      	b.n	340112c4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401129e:	f7ff fc0f 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
340112a2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340112a4:	68fa      	ldr	r2, [r7, #12]
340112a6:	68bb      	ldr	r3, [r7, #8]
340112a8:	fbb2 f3f3 	udiv	r3, r2, r3
340112ac:	60fb      	str	r3, [r7, #12]
              break;
340112ae:	e009      	b.n	340112c4 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340112b0:	f7ff fc4c 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
340112b4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340112b6:	68fa      	ldr	r2, [r7, #12]
340112b8:	68bb      	ldr	r3, [r7, #8]
340112ba:	fbb2 f3f3 	udiv	r3, r2, r3
340112be:	60fb      	str	r3, [r7, #12]
              break;
340112c0:	e000      	b.n	340112c4 <RCCEx_GetCLKPCLKFreq+0x114>
              break;
340112c2:	bf00      	nop
          }
        }
        break;
340112c4:	e11c      	b.n	34011500 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
340112c6:	f7f7 fff1 	bl	340092ac <LL_RCC_IC10_IsEnabled>
340112ca:	4603      	mov	r3, r0
340112cc:	2b00      	cmp	r3, #0
340112ce:	f000 8119 	beq.w	34011504 <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
340112d2:	f7f8 f80d 	bl	340092f0 <LL_RCC_IC10_GetDivider>
340112d6:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
340112d8:	f7f7 fffc 	bl	340092d4 <LL_RCC_IC10_GetSource>
340112dc:	4603      	mov	r3, r0
340112de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340112e2:	d029      	beq.n	34011338 <RCCEx_GetCLKPCLKFreq+0x188>
340112e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340112e8:	d82f      	bhi.n	3401134a <RCCEx_GetCLKPCLKFreq+0x19a>
340112ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340112ee:	d01a      	beq.n	34011326 <RCCEx_GetCLKPCLKFreq+0x176>
340112f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340112f4:	d829      	bhi.n	3401134a <RCCEx_GetCLKPCLKFreq+0x19a>
340112f6:	2b00      	cmp	r3, #0
340112f8:	d003      	beq.n	34011302 <RCCEx_GetCLKPCLKFreq+0x152>
340112fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340112fe:	d009      	beq.n	34011314 <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011300:	e023      	b.n	3401134a <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011302:	f7ff fb51 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011306:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011308:	68fa      	ldr	r2, [r7, #12]
3401130a:	68bb      	ldr	r3, [r7, #8]
3401130c:	fbb2 f3f3 	udiv	r3, r2, r3
34011310:	60fb      	str	r3, [r7, #12]
              break;
34011312:	e01b      	b.n	3401134c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011314:	f7ff fb8e 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011318:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401131a:	68fa      	ldr	r2, [r7, #12]
3401131c:	68bb      	ldr	r3, [r7, #8]
3401131e:	fbb2 f3f3 	udiv	r3, r2, r3
34011322:	60fb      	str	r3, [r7, #12]
              break;
34011324:	e012      	b.n	3401134c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011326:	f7ff fbcb 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
3401132a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401132c:	68fa      	ldr	r2, [r7, #12]
3401132e:	68bb      	ldr	r3, [r7, #8]
34011330:	fbb2 f3f3 	udiv	r3, r2, r3
34011334:	60fb      	str	r3, [r7, #12]
              break;
34011336:	e009      	b.n	3401134c <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011338:	f7ff fc08 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
3401133c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401133e:	68fa      	ldr	r2, [r7, #12]
34011340:	68bb      	ldr	r3, [r7, #8]
34011342:	fbb2 f3f3 	udiv	r3, r2, r3
34011346:	60fb      	str	r3, [r7, #12]
              break;
34011348:	e000      	b.n	3401134c <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
3401134a:	bf00      	nop
          }
        }
        break;
3401134c:	e0da      	b.n	34011504 <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
3401134e:	f7f8 f8ad 	bl	340094ac <LL_RCC_IC15_IsEnabled>
34011352:	4603      	mov	r3, r0
34011354:	2b00      	cmp	r3, #0
34011356:	f000 80d7 	beq.w	34011508 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
3401135a:	f7f8 f8c9 	bl	340094f0 <LL_RCC_IC15_GetDivider>
3401135e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
34011360:	f7f8 f8b8 	bl	340094d4 <LL_RCC_IC15_GetSource>
34011364:	4603      	mov	r3, r0
34011366:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401136a:	d029      	beq.n	340113c0 <RCCEx_GetCLKPCLKFreq+0x210>
3401136c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011370:	d82f      	bhi.n	340113d2 <RCCEx_GetCLKPCLKFreq+0x222>
34011372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011376:	d01a      	beq.n	340113ae <RCCEx_GetCLKPCLKFreq+0x1fe>
34011378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401137c:	d829      	bhi.n	340113d2 <RCCEx_GetCLKPCLKFreq+0x222>
3401137e:	2b00      	cmp	r3, #0
34011380:	d003      	beq.n	3401138a <RCCEx_GetCLKPCLKFreq+0x1da>
34011382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011386:	d009      	beq.n	3401139c <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011388:	e023      	b.n	340113d2 <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401138a:	f7ff fb0d 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
3401138e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011390:	68fa      	ldr	r2, [r7, #12]
34011392:	68bb      	ldr	r3, [r7, #8]
34011394:	fbb2 f3f3 	udiv	r3, r2, r3
34011398:	60fb      	str	r3, [r7, #12]
              break;
3401139a:	e01b      	b.n	340113d4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401139c:	f7ff fb4a 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
340113a0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340113a2:	68fa      	ldr	r2, [r7, #12]
340113a4:	68bb      	ldr	r3, [r7, #8]
340113a6:	fbb2 f3f3 	udiv	r3, r2, r3
340113aa:	60fb      	str	r3, [r7, #12]
              break;
340113ac:	e012      	b.n	340113d4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340113ae:	f7ff fb87 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
340113b2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340113b4:	68fa      	ldr	r2, [r7, #12]
340113b6:	68bb      	ldr	r3, [r7, #8]
340113b8:	fbb2 f3f3 	udiv	r3, r2, r3
340113bc:	60fb      	str	r3, [r7, #12]
              break;
340113be:	e009      	b.n	340113d4 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340113c0:	f7ff fbc4 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
340113c4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340113c6:	68fa      	ldr	r2, [r7, #12]
340113c8:	68bb      	ldr	r3, [r7, #8]
340113ca:	fbb2 f3f3 	udiv	r3, r2, r3
340113ce:	60fb      	str	r3, [r7, #12]
              break;
340113d0:	e000      	b.n	340113d4 <RCCEx_GetCLKPCLKFreq+0x224>
              break;
340113d2:	bf00      	nop
          }
        }
        break;
340113d4:	e098      	b.n	34011508 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
340113d6:	f7f8 f969 	bl	340096ac <LL_RCC_IC19_IsEnabled>
340113da:	4603      	mov	r3, r0
340113dc:	2b00      	cmp	r3, #0
340113de:	f000 8095 	beq.w	3401150c <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
340113e2:	f7f8 f985 	bl	340096f0 <LL_RCC_IC19_GetDivider>
340113e6:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
340113e8:	f7f8 f974 	bl	340096d4 <LL_RCC_IC19_GetSource>
340113ec:	4603      	mov	r3, r0
340113ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340113f2:	d029      	beq.n	34011448 <RCCEx_GetCLKPCLKFreq+0x298>
340113f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340113f8:	d82f      	bhi.n	3401145a <RCCEx_GetCLKPCLKFreq+0x2aa>
340113fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340113fe:	d01a      	beq.n	34011436 <RCCEx_GetCLKPCLKFreq+0x286>
34011400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011404:	d829      	bhi.n	3401145a <RCCEx_GetCLKPCLKFreq+0x2aa>
34011406:	2b00      	cmp	r3, #0
34011408:	d003      	beq.n	34011412 <RCCEx_GetCLKPCLKFreq+0x262>
3401140a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401140e:	d009      	beq.n	34011424 <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011410:	e023      	b.n	3401145a <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011412:	f7ff fac9 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011416:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011418:	68fa      	ldr	r2, [r7, #12]
3401141a:	68bb      	ldr	r3, [r7, #8]
3401141c:	fbb2 f3f3 	udiv	r3, r2, r3
34011420:	60fb      	str	r3, [r7, #12]
              break;
34011422:	e01b      	b.n	3401145c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011424:	f7ff fb06 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011428:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401142a:	68fa      	ldr	r2, [r7, #12]
3401142c:	68bb      	ldr	r3, [r7, #8]
3401142e:	fbb2 f3f3 	udiv	r3, r2, r3
34011432:	60fb      	str	r3, [r7, #12]
              break;
34011434:	e012      	b.n	3401145c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011436:	f7ff fb43 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
3401143a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401143c:	68fa      	ldr	r2, [r7, #12]
3401143e:	68bb      	ldr	r3, [r7, #8]
34011440:	fbb2 f3f3 	udiv	r3, r2, r3
34011444:	60fb      	str	r3, [r7, #12]
              break;
34011446:	e009      	b.n	3401145c <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011448:	f7ff fb80 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
3401144c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401144e:	68fa      	ldr	r2, [r7, #12]
34011450:	68bb      	ldr	r3, [r7, #8]
34011452:	fbb2 f3f3 	udiv	r3, r2, r3
34011456:	60fb      	str	r3, [r7, #12]
              break;
34011458:	e000      	b.n	3401145c <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
3401145a:	bf00      	nop
          }
        }
        break;
3401145c:	e056      	b.n	3401150c <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
3401145e:	f7f8 f965 	bl	3400972c <LL_RCC_IC20_IsEnabled>
34011462:	4603      	mov	r3, r0
34011464:	2b00      	cmp	r3, #0
34011466:	d053      	beq.n	34011510 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
34011468:	f7f8 f982 	bl	34009770 <LL_RCC_IC20_GetDivider>
3401146c:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
3401146e:	f7f8 f971 	bl	34009754 <LL_RCC_IC20_GetSource>
34011472:	4603      	mov	r3, r0
34011474:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011478:	d02f      	beq.n	340114da <RCCEx_GetCLKPCLKFreq+0x32a>
3401147a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401147e:	d835      	bhi.n	340114ec <RCCEx_GetCLKPCLKFreq+0x33c>
34011480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011484:	d020      	beq.n	340114c8 <RCCEx_GetCLKPCLKFreq+0x318>
34011486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401148a:	d82f      	bhi.n	340114ec <RCCEx_GetCLKPCLKFreq+0x33c>
3401148c:	2b00      	cmp	r3, #0
3401148e:	d009      	beq.n	340114a4 <RCCEx_GetCLKPCLKFreq+0x2f4>
34011490:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011494:	d00f      	beq.n	340114b6 <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011496:	e029      	b.n	340114ec <RCCEx_GetCLKPCLKFreq+0x33c>
34011498:	03d09000 	.word	0x03d09000
3401149c:	003d0900 	.word	0x003d0900
340114a0:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340114a4:	f7ff fa80 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340114a8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114aa:	68fa      	ldr	r2, [r7, #12]
340114ac:	68bb      	ldr	r3, [r7, #8]
340114ae:	fbb2 f3f3 	udiv	r3, r2, r3
340114b2:	60fb      	str	r3, [r7, #12]
              break;
340114b4:	e01b      	b.n	340114ee <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340114b6:	f7ff fabd 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
340114ba:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114bc:	68fa      	ldr	r2, [r7, #12]
340114be:	68bb      	ldr	r3, [r7, #8]
340114c0:	fbb2 f3f3 	udiv	r3, r2, r3
340114c4:	60fb      	str	r3, [r7, #12]
              break;
340114c6:	e012      	b.n	340114ee <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340114c8:	f7ff fafa 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
340114cc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114ce:	68fa      	ldr	r2, [r7, #12]
340114d0:	68bb      	ldr	r3, [r7, #8]
340114d2:	fbb2 f3f3 	udiv	r3, r2, r3
340114d6:	60fb      	str	r3, [r7, #12]
              break;
340114d8:	e009      	b.n	340114ee <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340114da:	f7ff fb37 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
340114de:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114e0:	68fa      	ldr	r2, [r7, #12]
340114e2:	68bb      	ldr	r3, [r7, #8]
340114e4:	fbb2 f3f3 	udiv	r3, r2, r3
340114e8:	60fb      	str	r3, [r7, #12]
              break;
340114ea:	e000      	b.n	340114ee <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
340114ec:	bf00      	nop
          }
        }
        break;
340114ee:	e00f      	b.n	34011510 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
340114f0:	bf00      	nop
340114f2:	e00e      	b.n	34011512 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
340114f4:	bf00      	nop
340114f6:	e00c      	b.n	34011512 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
340114f8:	bf00      	nop
340114fa:	e00a      	b.n	34011512 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
340114fc:	bf00      	nop
340114fe:	e008      	b.n	34011512 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011500:	bf00      	nop
34011502:	e006      	b.n	34011512 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011504:	bf00      	nop
34011506:	e004      	b.n	34011512 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011508:	bf00      	nop
3401150a:	e002      	b.n	34011512 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3401150c:	bf00      	nop
3401150e:	e000      	b.n	34011512 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011510:	bf00      	nop
    }
  }

  return clkp_frequency;
34011512:	68fb      	ldr	r3, [r7, #12]
}
34011514:	4618      	mov	r0, r3
34011516:	3710      	adds	r7, #16
34011518:	46bd      	mov	sp, r7
3401151a:	bd80      	pop	{r7, pc}

3401151c <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
3401151c:	b580      	push	{r7, lr}
3401151e:	b082      	sub	sp, #8
34011520:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34011522:	2300      	movs	r3, #0
34011524:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
34011526:	f7f8 f881 	bl	3400962c <LL_RCC_IC18_IsEnabled>
3401152a:	4603      	mov	r3, r0
3401152c:	2b00      	cmp	r3, #0
3401152e:	d03c      	beq.n	340115aa <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
34011530:	f7f8 f89e 	bl	34009670 <LL_RCC_IC18_GetDivider>
34011534:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
34011536:	f7f8 f88d 	bl	34009654 <LL_RCC_IC18_GetSource>
3401153a:	4603      	mov	r3, r0
3401153c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011540:	d029      	beq.n	34011596 <RCCEx_GetCSICLKFreq+0x7a>
34011542:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011546:	d82f      	bhi.n	340115a8 <RCCEx_GetCSICLKFreq+0x8c>
34011548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401154c:	d01a      	beq.n	34011584 <RCCEx_GetCSICLKFreq+0x68>
3401154e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011552:	d829      	bhi.n	340115a8 <RCCEx_GetCSICLKFreq+0x8c>
34011554:	2b00      	cmp	r3, #0
34011556:	d003      	beq.n	34011560 <RCCEx_GetCSICLKFreq+0x44>
34011558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401155c:	d009      	beq.n	34011572 <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
3401155e:	e023      	b.n	340115a8 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011560:	f7ff fa22 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011564:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34011566:	687a      	ldr	r2, [r7, #4]
34011568:	683b      	ldr	r3, [r7, #0]
3401156a:	fbb2 f3f3 	udiv	r3, r2, r3
3401156e:	607b      	str	r3, [r7, #4]
        break;
34011570:	e01b      	b.n	340115aa <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011572:	f7ff fa5f 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011576:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34011578:	687a      	ldr	r2, [r7, #4]
3401157a:	683b      	ldr	r3, [r7, #0]
3401157c:	fbb2 f3f3 	udiv	r3, r2, r3
34011580:	607b      	str	r3, [r7, #4]
        break;
34011582:	e012      	b.n	340115aa <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011584:	f7ff fa9c 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34011588:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3401158a:	687a      	ldr	r2, [r7, #4]
3401158c:	683b      	ldr	r3, [r7, #0]
3401158e:	fbb2 f3f3 	udiv	r3, r2, r3
34011592:	607b      	str	r3, [r7, #4]
        break;
34011594:	e009      	b.n	340115aa <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011596:	f7ff fad9 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
3401159a:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3401159c:	687a      	ldr	r2, [r7, #4]
3401159e:	683b      	ldr	r3, [r7, #0]
340115a0:	fbb2 f3f3 	udiv	r3, r2, r3
340115a4:	607b      	str	r3, [r7, #4]
        break;
340115a6:	e000      	b.n	340115aa <RCCEx_GetCSICLKFreq+0x8e>
        break;
340115a8:	bf00      	nop
    }
  }

  return clkp_frequency;
340115aa:	687b      	ldr	r3, [r7, #4]
}
340115ac:	4618      	mov	r0, r3
340115ae:	3708      	adds	r7, #8
340115b0:	46bd      	mov	sp, r7
340115b2:	bd80      	pop	{r7, pc}

340115b4 <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
340115b4:	b580      	push	{r7, lr}
340115b6:	b084      	sub	sp, #16
340115b8:	af00      	add	r7, sp, #0
340115ba:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
340115bc:	2300      	movs	r3, #0
340115be:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
340115c0:	6878      	ldr	r0, [r7, #4]
340115c2:	f7f7 f8fb 	bl	340087bc <LL_RCC_GetDCMIPPClockSource>
340115c6:	4603      	mov	r3, r0
340115c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340115cc:	d062      	beq.n	34011694 <RCCEx_GetDCMIPPCLKFreq+0xe0>
340115ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340115d2:	d86d      	bhi.n	340116b0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
340115d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340115d8:	d019      	beq.n	3401160e <RCCEx_GetDCMIPPCLKFreq+0x5a>
340115da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340115de:	d867      	bhi.n	340116b0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
340115e0:	2b00      	cmp	r3, #0
340115e2:	d003      	beq.n	340115ec <RCCEx_GetDCMIPPCLKFreq+0x38>
340115e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340115e8:	d00c      	beq.n	34011604 <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
340115ea:	e061      	b.n	340116b0 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340115ec:	f7f6 f9fc 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
340115f0:	4603      	mov	r3, r0
340115f2:	4618      	mov	r0, r3
340115f4:	f7ff faf0 	bl	34010bd8 <RCCEx_GetHCLKFreq>
340115f8:	4603      	mov	r3, r0
340115fa:	4618      	mov	r0, r3
340115fc:	f7ff fb2f 	bl	34010c5e <RCCEx_GetPCLK5Freq>
34011600:	60f8      	str	r0, [r7, #12]
      break;
34011602:	e05a      	b.n	340116ba <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011604:	2007      	movs	r0, #7
34011606:	f7ff fdd3 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
3401160a:	60f8      	str	r0, [r7, #12]
      break;
3401160c:	e055      	b.n	340116ba <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
3401160e:	f7f7 ffcd 	bl	340095ac <LL_RCC_IC17_IsEnabled>
34011612:	4603      	mov	r3, r0
34011614:	2b00      	cmp	r3, #0
34011616:	d04d      	beq.n	340116b4 <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
34011618:	f7f7 ffea 	bl	340095f0 <LL_RCC_IC17_GetDivider>
3401161c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
3401161e:	f7f7 ffd9 	bl	340095d4 <LL_RCC_IC17_GetSource>
34011622:	4603      	mov	r3, r0
34011624:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011628:	d029      	beq.n	3401167e <RCCEx_GetDCMIPPCLKFreq+0xca>
3401162a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401162e:	d82f      	bhi.n	34011690 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34011630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011634:	d01a      	beq.n	3401166c <RCCEx_GetDCMIPPCLKFreq+0xb8>
34011636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401163a:	d829      	bhi.n	34011690 <RCCEx_GetDCMIPPCLKFreq+0xdc>
3401163c:	2b00      	cmp	r3, #0
3401163e:	d003      	beq.n	34011648 <RCCEx_GetDCMIPPCLKFreq+0x94>
34011640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011644:	d009      	beq.n	3401165a <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
34011646:	e023      	b.n	34011690 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011648:	f7ff f9ae 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
3401164c:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3401164e:	68fa      	ldr	r2, [r7, #12]
34011650:	68bb      	ldr	r3, [r7, #8]
34011652:	fbb2 f3f3 	udiv	r3, r2, r3
34011656:	60fb      	str	r3, [r7, #12]
            break;
34011658:	e01b      	b.n	34011692 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401165a:	f7ff f9eb 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
3401165e:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34011660:	68fa      	ldr	r2, [r7, #12]
34011662:	68bb      	ldr	r3, [r7, #8]
34011664:	fbb2 f3f3 	udiv	r3, r2, r3
34011668:	60fb      	str	r3, [r7, #12]
            break;
3401166a:	e012      	b.n	34011692 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401166c:	f7ff fa28 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34011670:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34011672:	68fa      	ldr	r2, [r7, #12]
34011674:	68bb      	ldr	r3, [r7, #8]
34011676:	fbb2 f3f3 	udiv	r3, r2, r3
3401167a:	60fb      	str	r3, [r7, #12]
            break;
3401167c:	e009      	b.n	34011692 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401167e:	f7ff fa65 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34011682:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34011684:	68fa      	ldr	r2, [r7, #12]
34011686:	68bb      	ldr	r3, [r7, #8]
34011688:	fbb2 f3f3 	udiv	r3, r2, r3
3401168c:	60fb      	str	r3, [r7, #12]
            break;
3401168e:	e000      	b.n	34011692 <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
34011690:	bf00      	nop
      break;
34011692:	e00f      	b.n	340116b4 <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34011694:	f7f6 fda6 	bl	340081e4 <LL_RCC_HSI_IsReady>
34011698:	4603      	mov	r3, r0
3401169a:	2b00      	cmp	r3, #0
3401169c:	d00c      	beq.n	340116b8 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401169e:	f7f6 fdb3 	bl	34008208 <LL_RCC_HSI_GetDivider>
340116a2:	4603      	mov	r3, r0
340116a4:	09db      	lsrs	r3, r3, #7
340116a6:	4a07      	ldr	r2, [pc, #28]	@ (340116c4 <RCCEx_GetDCMIPPCLKFreq+0x110>)
340116a8:	fa22 f303 	lsr.w	r3, r2, r3
340116ac:	60fb      	str	r3, [r7, #12]
      break;
340116ae:	e003      	b.n	340116b8 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
340116b0:	bf00      	nop
340116b2:	e002      	b.n	340116ba <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
340116b4:	bf00      	nop
340116b6:	e000      	b.n	340116ba <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
340116b8:	bf00      	nop
  }

  return dcmipp_frequency;
340116ba:	68fb      	ldr	r3, [r7, #12]
}
340116bc:	4618      	mov	r0, r3
340116be:	3710      	adds	r7, #16
340116c0:	46bd      	mov	sp, r7
340116c2:	bd80      	pop	{r7, pc}
340116c4:	03d09000 	.word	0x03d09000

340116c8 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
340116c8:	b580      	push	{r7, lr}
340116ca:	b084      	sub	sp, #16
340116cc:	af00      	add	r7, sp, #0
340116ce:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
340116d0:	2300      	movs	r3, #0
340116d2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
340116d4:	6878      	ldr	r0, [r7, #4]
340116d6:	f7f7 f883 	bl	340087e0 <LL_RCC_GetETHClockSource>
340116da:	4603      	mov	r3, r0
340116dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
340116e0:	d05e      	beq.n	340117a0 <RCCEx_GetETH1CLKFreq+0xd8>
340116e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
340116e6:	d863      	bhi.n	340117b0 <RCCEx_GetETH1CLKFreq+0xe8>
340116e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340116ec:	d015      	beq.n	3401171a <RCCEx_GetETH1CLKFreq+0x52>
340116ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340116f2:	d85d      	bhi.n	340117b0 <RCCEx_GetETH1CLKFreq+0xe8>
340116f4:	2b00      	cmp	r3, #0
340116f6:	d003      	beq.n	34011700 <RCCEx_GetETH1CLKFreq+0x38>
340116f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340116fc:	d008      	beq.n	34011710 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
340116fe:	e057      	b.n	340117b0 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011700:	f7f6 f972 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34011704:	4603      	mov	r3, r0
34011706:	4618      	mov	r0, r3
34011708:	f7ff fa66 	bl	34010bd8 <RCCEx_GetHCLKFreq>
3401170c:	60f8      	str	r0, [r7, #12]
      break;
3401170e:	e054      	b.n	340117ba <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011710:	2007      	movs	r0, #7
34011712:	f7ff fd4d 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
34011716:	60f8      	str	r0, [r7, #12]
      break;
34011718:	e04f      	b.n	340117ba <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
3401171a:	f7f7 fe07 	bl	3400932c <LL_RCC_IC12_IsEnabled>
3401171e:	4603      	mov	r3, r0
34011720:	2b00      	cmp	r3, #0
34011722:	d047      	beq.n	340117b4 <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
34011724:	f7f7 fe24 	bl	34009370 <LL_RCC_IC12_GetDivider>
34011728:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
3401172a:	f7f7 fe13 	bl	34009354 <LL_RCC_IC12_GetSource>
3401172e:	4603      	mov	r3, r0
34011730:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011734:	d029      	beq.n	3401178a <RCCEx_GetETH1CLKFreq+0xc2>
34011736:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401173a:	d82f      	bhi.n	3401179c <RCCEx_GetETH1CLKFreq+0xd4>
3401173c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011740:	d01a      	beq.n	34011778 <RCCEx_GetETH1CLKFreq+0xb0>
34011742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011746:	d829      	bhi.n	3401179c <RCCEx_GetETH1CLKFreq+0xd4>
34011748:	2b00      	cmp	r3, #0
3401174a:	d003      	beq.n	34011754 <RCCEx_GetETH1CLKFreq+0x8c>
3401174c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011750:	d009      	beq.n	34011766 <RCCEx_GetETH1CLKFreq+0x9e>
            break;
34011752:	e023      	b.n	3401179c <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011754:	f7ff f928 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011758:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3401175a:	68fa      	ldr	r2, [r7, #12]
3401175c:	68bb      	ldr	r3, [r7, #8]
3401175e:	fbb2 f3f3 	udiv	r3, r2, r3
34011762:	60fb      	str	r3, [r7, #12]
            break;
34011764:	e01b      	b.n	3401179e <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011766:	f7ff f965 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
3401176a:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3401176c:	68fa      	ldr	r2, [r7, #12]
3401176e:	68bb      	ldr	r3, [r7, #8]
34011770:	fbb2 f3f3 	udiv	r3, r2, r3
34011774:	60fb      	str	r3, [r7, #12]
            break;
34011776:	e012      	b.n	3401179e <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011778:	f7ff f9a2 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
3401177c:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3401177e:	68fa      	ldr	r2, [r7, #12]
34011780:	68bb      	ldr	r3, [r7, #8]
34011782:	fbb2 f3f3 	udiv	r3, r2, r3
34011786:	60fb      	str	r3, [r7, #12]
            break;
34011788:	e009      	b.n	3401179e <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401178a:	f7ff f9df 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
3401178e:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34011790:	68fa      	ldr	r2, [r7, #12]
34011792:	68bb      	ldr	r3, [r7, #8]
34011794:	fbb2 f3f3 	udiv	r3, r2, r3
34011798:	60fb      	str	r3, [r7, #12]
            break;
3401179a:	e000      	b.n	3401179e <RCCEx_GetETH1CLKFreq+0xd6>
            break;
3401179c:	bf00      	nop
      break;
3401179e:	e009      	b.n	340117b4 <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
340117a0:	f7f6 fd0e 	bl	340081c0 <LL_RCC_HSE_IsReady>
340117a4:	4603      	mov	r3, r0
340117a6:	2b00      	cmp	r3, #0
340117a8:	d006      	beq.n	340117b8 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
340117aa:	4b06      	ldr	r3, [pc, #24]	@ (340117c4 <RCCEx_GetETH1CLKFreq+0xfc>)
340117ac:	60fb      	str	r3, [r7, #12]
      break;
340117ae:	e003      	b.n	340117b8 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
340117b0:	bf00      	nop
340117b2:	e002      	b.n	340117ba <RCCEx_GetETH1CLKFreq+0xf2>
      break;
340117b4:	bf00      	nop
340117b6:	e000      	b.n	340117ba <RCCEx_GetETH1CLKFreq+0xf2>
      break;
340117b8:	bf00      	nop
  }

  return eth1_frequency;
340117ba:	68fb      	ldr	r3, [r7, #12]
}
340117bc:	4618      	mov	r0, r3
340117be:	3710      	adds	r7, #16
340117c0:	46bd      	mov	sp, r7
340117c2:	bd80      	pop	{r7, pc}
340117c4:	02dc6c00 	.word	0x02dc6c00

340117c8 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
340117c8:	b580      	push	{r7, lr}
340117ca:	b084      	sub	sp, #16
340117cc:	af00      	add	r7, sp, #0
340117ce:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
340117d0:	2300      	movs	r3, #0
340117d2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
340117d4:	6878      	ldr	r0, [r7, #4]
340117d6:	f7f7 f815 	bl	34008804 <LL_RCC_GetETHPTPClockSource>
340117da:	4603      	mov	r3, r0
340117dc:	2b03      	cmp	r3, #3
340117de:	d863      	bhi.n	340118a8 <RCCEx_GetETH1PTPCLKFreq+0xe0>
340117e0:	a201      	add	r2, pc, #4	@ (adr r2, 340117e8 <RCCEx_GetETH1PTPCLKFreq+0x20>)
340117e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340117e6:	bf00      	nop
340117e8:	340117f9 	.word	0x340117f9
340117ec:	34011809 	.word	0x34011809
340117f0:	34011813 	.word	0x34011813
340117f4:	34011899 	.word	0x34011899
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340117f8:	f7f6 f8f6 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
340117fc:	4603      	mov	r3, r0
340117fe:	4618      	mov	r0, r3
34011800:	f7ff f9ea 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34011804:	60f8      	str	r0, [r7, #12]
      break;
34011806:	e054      	b.n	340118b2 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011808:	2007      	movs	r0, #7
3401180a:	f7ff fcd1 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
3401180e:	60f8      	str	r0, [r7, #12]
      break;
34011810:	e04f      	b.n	340118b2 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
34011812:	f7f7 fdcb 	bl	340093ac <LL_RCC_IC13_IsEnabled>
34011816:	4603      	mov	r3, r0
34011818:	2b00      	cmp	r3, #0
3401181a:	d047      	beq.n	340118ac <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
3401181c:	f7f7 fde8 	bl	340093f0 <LL_RCC_IC13_GetDivider>
34011820:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
34011822:	f7f7 fdd7 	bl	340093d4 <LL_RCC_IC13_GetSource>
34011826:	4603      	mov	r3, r0
34011828:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401182c:	d029      	beq.n	34011882 <RCCEx_GetETH1PTPCLKFreq+0xba>
3401182e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011832:	d82f      	bhi.n	34011894 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34011834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011838:	d01a      	beq.n	34011870 <RCCEx_GetETH1PTPCLKFreq+0xa8>
3401183a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401183e:	d829      	bhi.n	34011894 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34011840:	2b00      	cmp	r3, #0
34011842:	d003      	beq.n	3401184c <RCCEx_GetETH1PTPCLKFreq+0x84>
34011844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011848:	d009      	beq.n	3401185e <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401184a:	e023      	b.n	34011894 <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401184c:	f7ff f8ac 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011850:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011852:	68fa      	ldr	r2, [r7, #12]
34011854:	68bb      	ldr	r3, [r7, #8]
34011856:	fbb2 f3f3 	udiv	r3, r2, r3
3401185a:	60fb      	str	r3, [r7, #12]
            break;
3401185c:	e01b      	b.n	34011896 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401185e:	f7ff f8e9 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011862:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011864:	68fa      	ldr	r2, [r7, #12]
34011866:	68bb      	ldr	r3, [r7, #8]
34011868:	fbb2 f3f3 	udiv	r3, r2, r3
3401186c:	60fb      	str	r3, [r7, #12]
            break;
3401186e:	e012      	b.n	34011896 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011870:	f7ff f926 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34011874:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011876:	68fa      	ldr	r2, [r7, #12]
34011878:	68bb      	ldr	r3, [r7, #8]
3401187a:	fbb2 f3f3 	udiv	r3, r2, r3
3401187e:	60fb      	str	r3, [r7, #12]
            break;
34011880:	e009      	b.n	34011896 <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011882:	f7ff f963 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34011886:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011888:	68fa      	ldr	r2, [r7, #12]
3401188a:	68bb      	ldr	r3, [r7, #8]
3401188c:	fbb2 f3f3 	udiv	r3, r2, r3
34011890:	60fb      	str	r3, [r7, #12]
            break;
34011892:	e000      	b.n	34011896 <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
34011894:	bf00      	nop
        }
      }
      break;
34011896:	e009      	b.n	340118ac <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34011898:	f7f6 fc92 	bl	340081c0 <LL_RCC_HSE_IsReady>
3401189c:	4603      	mov	r3, r0
3401189e:	2b00      	cmp	r3, #0
340118a0:	d006      	beq.n	340118b0 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
340118a2:	4b0a      	ldr	r3, [pc, #40]	@ (340118cc <RCCEx_GetETH1PTPCLKFreq+0x104>)
340118a4:	60fb      	str	r3, [r7, #12]
      }
      break;
340118a6:	e003      	b.n	340118b0 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
340118a8:	bf00      	nop
340118aa:	e002      	b.n	340118b2 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
340118ac:	bf00      	nop
340118ae:	e000      	b.n	340118b2 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
340118b0:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
340118b2:	f7f6 fde3 	bl	3400847c <LL_RCC_GetETH1PTPDivider>
340118b6:	4603      	mov	r3, r0
340118b8:	091b      	lsrs	r3, r3, #4
340118ba:	3301      	adds	r3, #1
340118bc:	68fa      	ldr	r2, [r7, #12]
340118be:	fbb2 f3f3 	udiv	r3, r2, r3
}
340118c2:	4618      	mov	r0, r3
340118c4:	3710      	adds	r7, #16
340118c6:	46bd      	mov	sp, r7
340118c8:	bd80      	pop	{r7, pc}
340118ca:	bf00      	nop
340118cc:	02dc6c00 	.word	0x02dc6c00

340118d0 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
340118d0:	b580      	push	{r7, lr}
340118d2:	b084      	sub	sp, #16
340118d4:	af00      	add	r7, sp, #0
340118d6:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
340118d8:	2300      	movs	r3, #0
340118da:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
340118dc:	6878      	ldr	r0, [r7, #4]
340118de:	f7f6 ffa3 	bl	34008828 <LL_RCC_GetFDCANClockSource>
340118e2:	4603      	mov	r3, r0
340118e4:	2b03      	cmp	r3, #3
340118e6:	d867      	bhi.n	340119b8 <RCCEx_GetFDCANCLKFreq+0xe8>
340118e8:	a201      	add	r2, pc, #4	@ (adr r2, 340118f0 <RCCEx_GetFDCANCLKFreq+0x20>)
340118ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340118ee:	bf00      	nop
340118f0:	34011901 	.word	0x34011901
340118f4:	34011919 	.word	0x34011919
340118f8:	34011923 	.word	0x34011923
340118fc:	340119a9 	.word	0x340119a9
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011900:	f7f6 f872 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34011904:	4603      	mov	r3, r0
34011906:	4618      	mov	r0, r3
34011908:	f7ff f966 	bl	34010bd8 <RCCEx_GetHCLKFreq>
3401190c:	4603      	mov	r3, r0
3401190e:	4618      	mov	r0, r3
34011910:	f7ff f973 	bl	34010bfa <RCCEx_GetPCLK1Freq>
34011914:	60f8      	str	r0, [r7, #12]
      break;
34011916:	e054      	b.n	340119c2 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011918:	2007      	movs	r0, #7
3401191a:	f7ff fc49 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
3401191e:	60f8      	str	r0, [r7, #12]
      break;
34011920:	e04f      	b.n	340119c2 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
34011922:	f7f7 fec3 	bl	340096ac <LL_RCC_IC19_IsEnabled>
34011926:	4603      	mov	r3, r0
34011928:	2b00      	cmp	r3, #0
3401192a:	d047      	beq.n	340119bc <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
3401192c:	f7f7 fee0 	bl	340096f0 <LL_RCC_IC19_GetDivider>
34011930:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
34011932:	f7f7 fecf 	bl	340096d4 <LL_RCC_IC19_GetSource>
34011936:	4603      	mov	r3, r0
34011938:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401193c:	d029      	beq.n	34011992 <RCCEx_GetFDCANCLKFreq+0xc2>
3401193e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011942:	d82f      	bhi.n	340119a4 <RCCEx_GetFDCANCLKFreq+0xd4>
34011944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011948:	d01a      	beq.n	34011980 <RCCEx_GetFDCANCLKFreq+0xb0>
3401194a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401194e:	d829      	bhi.n	340119a4 <RCCEx_GetFDCANCLKFreq+0xd4>
34011950:	2b00      	cmp	r3, #0
34011952:	d003      	beq.n	3401195c <RCCEx_GetFDCANCLKFreq+0x8c>
34011954:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011958:	d009      	beq.n	3401196e <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401195a:	e023      	b.n	340119a4 <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401195c:	f7ff f824 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011960:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011962:	68fa      	ldr	r2, [r7, #12]
34011964:	68bb      	ldr	r3, [r7, #8]
34011966:	fbb2 f3f3 	udiv	r3, r2, r3
3401196a:	60fb      	str	r3, [r7, #12]
            break;
3401196c:	e01b      	b.n	340119a6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401196e:	f7ff f861 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011972:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011974:	68fa      	ldr	r2, [r7, #12]
34011976:	68bb      	ldr	r3, [r7, #8]
34011978:	fbb2 f3f3 	udiv	r3, r2, r3
3401197c:	60fb      	str	r3, [r7, #12]
            break;
3401197e:	e012      	b.n	340119a6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011980:	f7ff f89e 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34011984:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011986:	68fa      	ldr	r2, [r7, #12]
34011988:	68bb      	ldr	r3, [r7, #8]
3401198a:	fbb2 f3f3 	udiv	r3, r2, r3
3401198e:	60fb      	str	r3, [r7, #12]
            break;
34011990:	e009      	b.n	340119a6 <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011992:	f7ff f8db 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34011996:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011998:	68fa      	ldr	r2, [r7, #12]
3401199a:	68bb      	ldr	r3, [r7, #8]
3401199c:	fbb2 f3f3 	udiv	r3, r2, r3
340119a0:	60fb      	str	r3, [r7, #12]
            break;
340119a2:	e000      	b.n	340119a6 <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
340119a4:	bf00      	nop
        }
      }
      break;
340119a6:	e009      	b.n	340119bc <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
340119a8:	f7f6 fc0a 	bl	340081c0 <LL_RCC_HSE_IsReady>
340119ac:	4603      	mov	r3, r0
340119ae:	2b00      	cmp	r3, #0
340119b0:	d006      	beq.n	340119c0 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
340119b2:	4b06      	ldr	r3, [pc, #24]	@ (340119cc <RCCEx_GetFDCANCLKFreq+0xfc>)
340119b4:	60fb      	str	r3, [r7, #12]
      }
      break;
340119b6:	e003      	b.n	340119c0 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
340119b8:	bf00      	nop
340119ba:	e002      	b.n	340119c2 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
340119bc:	bf00      	nop
340119be:	e000      	b.n	340119c2 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
340119c0:	bf00      	nop
  }

  return fdcan_frequency;
340119c2:	68fb      	ldr	r3, [r7, #12]
}
340119c4:	4618      	mov	r0, r3
340119c6:	3710      	adds	r7, #16
340119c8:	46bd      	mov	sp, r7
340119ca:	bd80      	pop	{r7, pc}
340119cc:	02dc6c00 	.word	0x02dc6c00

340119d0 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
340119d0:	b580      	push	{r7, lr}
340119d2:	b084      	sub	sp, #16
340119d4:	af00      	add	r7, sp, #0
340119d6:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
340119d8:	2300      	movs	r3, #0
340119da:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
340119dc:	6878      	ldr	r0, [r7, #4]
340119de:	f7f6 ff35 	bl	3400884c <LL_RCC_GetFMCClockSource>
340119e2:	4603      	mov	r3, r0
340119e4:	2b30      	cmp	r3, #48	@ 0x30
340119e6:	d05d      	beq.n	34011aa4 <RCCEx_GetFMCCLKFreq+0xd4>
340119e8:	2b30      	cmp	r3, #48	@ 0x30
340119ea:	f200 809e 	bhi.w	34011b2a <RCCEx_GetFMCCLKFreq+0x15a>
340119ee:	2b20      	cmp	r3, #32
340119f0:	d014      	beq.n	34011a1c <RCCEx_GetFMCCLKFreq+0x4c>
340119f2:	2b20      	cmp	r3, #32
340119f4:	f200 8099 	bhi.w	34011b2a <RCCEx_GetFMCCLKFreq+0x15a>
340119f8:	2b00      	cmp	r3, #0
340119fa:	d002      	beq.n	34011a02 <RCCEx_GetFMCCLKFreq+0x32>
340119fc:	2b10      	cmp	r3, #16
340119fe:	d008      	beq.n	34011a12 <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34011a00:	e093      	b.n	34011b2a <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011a02:	f7f5 fff1 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34011a06:	4603      	mov	r3, r0
34011a08:	4618      	mov	r0, r3
34011a0a:	f7ff f8e5 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34011a0e:	60f8      	str	r0, [r7, #12]
      break;
34011a10:	e090      	b.n	34011b34 <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011a12:	2007      	movs	r0, #7
34011a14:	f7ff fbcc 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
34011a18:	60f8      	str	r0, [r7, #12]
      break;
34011a1a:	e08b      	b.n	34011b34 <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
34011a1c:	f7f7 fac6 	bl	34008fac <LL_RCC_IC3_IsEnabled>
34011a20:	4603      	mov	r3, r0
34011a22:	2b00      	cmp	r3, #0
34011a24:	f000 8083 	beq.w	34011b2e <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
34011a28:	f7f7 fae2 	bl	34008ff0 <LL_RCC_IC3_GetDivider>
34011a2c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34011a2e:	f7f7 fad1 	bl	34008fd4 <LL_RCC_IC3_GetSource>
34011a32:	4603      	mov	r3, r0
34011a34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011a38:	d029      	beq.n	34011a8e <RCCEx_GetFMCCLKFreq+0xbe>
34011a3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011a3e:	d82f      	bhi.n	34011aa0 <RCCEx_GetFMCCLKFreq+0xd0>
34011a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011a44:	d01a      	beq.n	34011a7c <RCCEx_GetFMCCLKFreq+0xac>
34011a46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011a4a:	d829      	bhi.n	34011aa0 <RCCEx_GetFMCCLKFreq+0xd0>
34011a4c:	2b00      	cmp	r3, #0
34011a4e:	d003      	beq.n	34011a58 <RCCEx_GetFMCCLKFreq+0x88>
34011a50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011a54:	d009      	beq.n	34011a6a <RCCEx_GetFMCCLKFreq+0x9a>
            break;
34011a56:	e023      	b.n	34011aa0 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011a58:	f7fe ffa6 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011a5c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011a5e:	68fa      	ldr	r2, [r7, #12]
34011a60:	68bb      	ldr	r3, [r7, #8]
34011a62:	fbb2 f3f3 	udiv	r3, r2, r3
34011a66:	60fb      	str	r3, [r7, #12]
            break;
34011a68:	e01b      	b.n	34011aa2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011a6a:	f7fe ffe3 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011a6e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011a70:	68fa      	ldr	r2, [r7, #12]
34011a72:	68bb      	ldr	r3, [r7, #8]
34011a74:	fbb2 f3f3 	udiv	r3, r2, r3
34011a78:	60fb      	str	r3, [r7, #12]
            break;
34011a7a:	e012      	b.n	34011aa2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011a7c:	f7ff f820 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34011a80:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011a82:	68fa      	ldr	r2, [r7, #12]
34011a84:	68bb      	ldr	r3, [r7, #8]
34011a86:	fbb2 f3f3 	udiv	r3, r2, r3
34011a8a:	60fb      	str	r3, [r7, #12]
            break;
34011a8c:	e009      	b.n	34011aa2 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011a8e:	f7ff f85d 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34011a92:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011a94:	68fa      	ldr	r2, [r7, #12]
34011a96:	68bb      	ldr	r3, [r7, #8]
34011a98:	fbb2 f3f3 	udiv	r3, r2, r3
34011a9c:	60fb      	str	r3, [r7, #12]
            break;
34011a9e:	e000      	b.n	34011aa2 <RCCEx_GetFMCCLKFreq+0xd2>
            break;
34011aa0:	bf00      	nop
      break;
34011aa2:	e044      	b.n	34011b2e <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
34011aa4:	f7f7 fac2 	bl	3400902c <LL_RCC_IC4_IsEnabled>
34011aa8:	4603      	mov	r3, r0
34011aaa:	2b00      	cmp	r3, #0
34011aac:	d041      	beq.n	34011b32 <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
34011aae:	f7f7 fadf 	bl	34009070 <LL_RCC_IC4_GetDivider>
34011ab2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34011ab4:	f7f7 face 	bl	34009054 <LL_RCC_IC4_GetSource>
34011ab8:	4603      	mov	r3, r0
34011aba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011abe:	d029      	beq.n	34011b14 <RCCEx_GetFMCCLKFreq+0x144>
34011ac0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011ac4:	d82f      	bhi.n	34011b26 <RCCEx_GetFMCCLKFreq+0x156>
34011ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011aca:	d01a      	beq.n	34011b02 <RCCEx_GetFMCCLKFreq+0x132>
34011acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011ad0:	d829      	bhi.n	34011b26 <RCCEx_GetFMCCLKFreq+0x156>
34011ad2:	2b00      	cmp	r3, #0
34011ad4:	d003      	beq.n	34011ade <RCCEx_GetFMCCLKFreq+0x10e>
34011ad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011ada:	d009      	beq.n	34011af0 <RCCEx_GetFMCCLKFreq+0x120>
            break;
34011adc:	e023      	b.n	34011b26 <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011ade:	f7fe ff63 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011ae2:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011ae4:	68fa      	ldr	r2, [r7, #12]
34011ae6:	68bb      	ldr	r3, [r7, #8]
34011ae8:	fbb2 f3f3 	udiv	r3, r2, r3
34011aec:	60fb      	str	r3, [r7, #12]
            break;
34011aee:	e01b      	b.n	34011b28 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011af0:	f7fe ffa0 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011af4:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011af6:	68fa      	ldr	r2, [r7, #12]
34011af8:	68bb      	ldr	r3, [r7, #8]
34011afa:	fbb2 f3f3 	udiv	r3, r2, r3
34011afe:	60fb      	str	r3, [r7, #12]
            break;
34011b00:	e012      	b.n	34011b28 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011b02:	f7fe ffdd 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34011b06:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011b08:	68fa      	ldr	r2, [r7, #12]
34011b0a:	68bb      	ldr	r3, [r7, #8]
34011b0c:	fbb2 f3f3 	udiv	r3, r2, r3
34011b10:	60fb      	str	r3, [r7, #12]
            break;
34011b12:	e009      	b.n	34011b28 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011b14:	f7ff f81a 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34011b18:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011b1a:	68fa      	ldr	r2, [r7, #12]
34011b1c:	68bb      	ldr	r3, [r7, #8]
34011b1e:	fbb2 f3f3 	udiv	r3, r2, r3
34011b22:	60fb      	str	r3, [r7, #12]
            break;
34011b24:	e000      	b.n	34011b28 <RCCEx_GetFMCCLKFreq+0x158>
            break;
34011b26:	bf00      	nop
      break;
34011b28:	e003      	b.n	34011b32 <RCCEx_GetFMCCLKFreq+0x162>
      break;
34011b2a:	bf00      	nop
34011b2c:	e002      	b.n	34011b34 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34011b2e:	bf00      	nop
34011b30:	e000      	b.n	34011b34 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34011b32:	bf00      	nop
  }

  return fmc_frequency;
34011b34:	68fb      	ldr	r3, [r7, #12]
}
34011b36:	4618      	mov	r0, r3
34011b38:	3710      	adds	r7, #16
34011b3a:	46bd      	mov	sp, r7
34011b3c:	bd80      	pop	{r7, pc}
	...

34011b40 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
34011b40:	b580      	push	{r7, lr}
34011b42:	b084      	sub	sp, #16
34011b44:	af00      	add	r7, sp, #0
34011b46:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
34011b48:	2300      	movs	r3, #0
34011b4a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34011b4c:	6878      	ldr	r0, [r7, #4]
34011b4e:	f7f6 fe8f 	bl	34008870 <LL_RCC_GetI2CClockSource>
34011b52:	4603      	mov	r3, r0
34011b54:	4aa2      	ldr	r2, [pc, #648]	@ (34011de0 <RCCEx_GetI2CCLKFreq+0x2a0>)
34011b56:	4293      	cmp	r3, r2
34011b58:	f000 8172 	beq.w	34011e40 <RCCEx_GetI2CCLKFreq+0x300>
34011b5c:	4aa0      	ldr	r2, [pc, #640]	@ (34011de0 <RCCEx_GetI2CCLKFreq+0x2a0>)
34011b5e:	4293      	cmp	r3, r2
34011b60:	f200 8184 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011b64:	4a9f      	ldr	r2, [pc, #636]	@ (34011de4 <RCCEx_GetI2CCLKFreq+0x2a4>)
34011b66:	4293      	cmp	r3, r2
34011b68:	f000 816a 	beq.w	34011e40 <RCCEx_GetI2CCLKFreq+0x300>
34011b6c:	4a9d      	ldr	r2, [pc, #628]	@ (34011de4 <RCCEx_GetI2CCLKFreq+0x2a4>)
34011b6e:	4293      	cmp	r3, r2
34011b70:	f200 817c 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011b74:	4a9c      	ldr	r2, [pc, #624]	@ (34011de8 <RCCEx_GetI2CCLKFreq+0x2a8>)
34011b76:	4293      	cmp	r3, r2
34011b78:	f000 8162 	beq.w	34011e40 <RCCEx_GetI2CCLKFreq+0x300>
34011b7c:	4a9a      	ldr	r2, [pc, #616]	@ (34011de8 <RCCEx_GetI2CCLKFreq+0x2a8>)
34011b7e:	4293      	cmp	r3, r2
34011b80:	f200 8174 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011b84:	4a99      	ldr	r2, [pc, #612]	@ (34011dec <RCCEx_GetI2CCLKFreq+0x2ac>)
34011b86:	4293      	cmp	r3, r2
34011b88:	f000 815a 	beq.w	34011e40 <RCCEx_GetI2CCLKFreq+0x300>
34011b8c:	4a97      	ldr	r2, [pc, #604]	@ (34011dec <RCCEx_GetI2CCLKFreq+0x2ac>)
34011b8e:	4293      	cmp	r3, r2
34011b90:	f200 816c 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011b94:	4a96      	ldr	r2, [pc, #600]	@ (34011df0 <RCCEx_GetI2CCLKFreq+0x2b0>)
34011b96:	4293      	cmp	r3, r2
34011b98:	f000 8160 	beq.w	34011e5c <RCCEx_GetI2CCLKFreq+0x31c>
34011b9c:	4a94      	ldr	r2, [pc, #592]	@ (34011df0 <RCCEx_GetI2CCLKFreq+0x2b0>)
34011b9e:	4293      	cmp	r3, r2
34011ba0:	f200 8164 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011ba4:	4a93      	ldr	r2, [pc, #588]	@ (34011df4 <RCCEx_GetI2CCLKFreq+0x2b4>)
34011ba6:	4293      	cmp	r3, r2
34011ba8:	f000 8158 	beq.w	34011e5c <RCCEx_GetI2CCLKFreq+0x31c>
34011bac:	4a91      	ldr	r2, [pc, #580]	@ (34011df4 <RCCEx_GetI2CCLKFreq+0x2b4>)
34011bae:	4293      	cmp	r3, r2
34011bb0:	f200 815c 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011bb4:	4a90      	ldr	r2, [pc, #576]	@ (34011df8 <RCCEx_GetI2CCLKFreq+0x2b8>)
34011bb6:	4293      	cmp	r3, r2
34011bb8:	f000 8150 	beq.w	34011e5c <RCCEx_GetI2CCLKFreq+0x31c>
34011bbc:	4a8e      	ldr	r2, [pc, #568]	@ (34011df8 <RCCEx_GetI2CCLKFreq+0x2b8>)
34011bbe:	4293      	cmp	r3, r2
34011bc0:	f200 8154 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011bc4:	4a8d      	ldr	r2, [pc, #564]	@ (34011dfc <RCCEx_GetI2CCLKFreq+0x2bc>)
34011bc6:	4293      	cmp	r3, r2
34011bc8:	f000 8148 	beq.w	34011e5c <RCCEx_GetI2CCLKFreq+0x31c>
34011bcc:	4a8b      	ldr	r2, [pc, #556]	@ (34011dfc <RCCEx_GetI2CCLKFreq+0x2bc>)
34011bce:	4293      	cmp	r3, r2
34011bd0:	f200 814c 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011bd4:	4a8a      	ldr	r2, [pc, #552]	@ (34011e00 <RCCEx_GetI2CCLKFreq+0x2c0>)
34011bd6:	4293      	cmp	r3, r2
34011bd8:	f000 80be 	beq.w	34011d58 <RCCEx_GetI2CCLKFreq+0x218>
34011bdc:	4a88      	ldr	r2, [pc, #544]	@ (34011e00 <RCCEx_GetI2CCLKFreq+0x2c0>)
34011bde:	4293      	cmp	r3, r2
34011be0:	f200 8144 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011be4:	4a87      	ldr	r2, [pc, #540]	@ (34011e04 <RCCEx_GetI2CCLKFreq+0x2c4>)
34011be6:	4293      	cmp	r3, r2
34011be8:	f000 80b6 	beq.w	34011d58 <RCCEx_GetI2CCLKFreq+0x218>
34011bec:	4a85      	ldr	r2, [pc, #532]	@ (34011e04 <RCCEx_GetI2CCLKFreq+0x2c4>)
34011bee:	4293      	cmp	r3, r2
34011bf0:	f200 813c 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011bf4:	4a84      	ldr	r2, [pc, #528]	@ (34011e08 <RCCEx_GetI2CCLKFreq+0x2c8>)
34011bf6:	4293      	cmp	r3, r2
34011bf8:	f000 80ae 	beq.w	34011d58 <RCCEx_GetI2CCLKFreq+0x218>
34011bfc:	4a82      	ldr	r2, [pc, #520]	@ (34011e08 <RCCEx_GetI2CCLKFreq+0x2c8>)
34011bfe:	4293      	cmp	r3, r2
34011c00:	f200 8134 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c04:	4a81      	ldr	r2, [pc, #516]	@ (34011e0c <RCCEx_GetI2CCLKFreq+0x2cc>)
34011c06:	4293      	cmp	r3, r2
34011c08:	f000 80a6 	beq.w	34011d58 <RCCEx_GetI2CCLKFreq+0x218>
34011c0c:	4a7f      	ldr	r2, [pc, #508]	@ (34011e0c <RCCEx_GetI2CCLKFreq+0x2cc>)
34011c0e:	4293      	cmp	r3, r2
34011c10:	f200 812c 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c14:	4a7e      	ldr	r2, [pc, #504]	@ (34011e10 <RCCEx_GetI2CCLKFreq+0x2d0>)
34011c16:	4293      	cmp	r3, r2
34011c18:	d05a      	beq.n	34011cd0 <RCCEx_GetI2CCLKFreq+0x190>
34011c1a:	4a7d      	ldr	r2, [pc, #500]	@ (34011e10 <RCCEx_GetI2CCLKFreq+0x2d0>)
34011c1c:	4293      	cmp	r3, r2
34011c1e:	f200 8125 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c22:	4a7c      	ldr	r2, [pc, #496]	@ (34011e14 <RCCEx_GetI2CCLKFreq+0x2d4>)
34011c24:	4293      	cmp	r3, r2
34011c26:	d053      	beq.n	34011cd0 <RCCEx_GetI2CCLKFreq+0x190>
34011c28:	4a7a      	ldr	r2, [pc, #488]	@ (34011e14 <RCCEx_GetI2CCLKFreq+0x2d4>)
34011c2a:	4293      	cmp	r3, r2
34011c2c:	f200 811e 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c30:	4a79      	ldr	r2, [pc, #484]	@ (34011e18 <RCCEx_GetI2CCLKFreq+0x2d8>)
34011c32:	4293      	cmp	r3, r2
34011c34:	d04c      	beq.n	34011cd0 <RCCEx_GetI2CCLKFreq+0x190>
34011c36:	4a78      	ldr	r2, [pc, #480]	@ (34011e18 <RCCEx_GetI2CCLKFreq+0x2d8>)
34011c38:	4293      	cmp	r3, r2
34011c3a:	f200 8117 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c3e:	4a77      	ldr	r2, [pc, #476]	@ (34011e1c <RCCEx_GetI2CCLKFreq+0x2dc>)
34011c40:	4293      	cmp	r3, r2
34011c42:	d045      	beq.n	34011cd0 <RCCEx_GetI2CCLKFreq+0x190>
34011c44:	4a75      	ldr	r2, [pc, #468]	@ (34011e1c <RCCEx_GetI2CCLKFreq+0x2dc>)
34011c46:	4293      	cmp	r3, r2
34011c48:	f200 8110 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c4c:	4a74      	ldr	r2, [pc, #464]	@ (34011e20 <RCCEx_GetI2CCLKFreq+0x2e0>)
34011c4e:	4293      	cmp	r3, r2
34011c50:	d039      	beq.n	34011cc6 <RCCEx_GetI2CCLKFreq+0x186>
34011c52:	4a73      	ldr	r2, [pc, #460]	@ (34011e20 <RCCEx_GetI2CCLKFreq+0x2e0>)
34011c54:	4293      	cmp	r3, r2
34011c56:	f200 8109 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c5a:	4a72      	ldr	r2, [pc, #456]	@ (34011e24 <RCCEx_GetI2CCLKFreq+0x2e4>)
34011c5c:	4293      	cmp	r3, r2
34011c5e:	d032      	beq.n	34011cc6 <RCCEx_GetI2CCLKFreq+0x186>
34011c60:	4a70      	ldr	r2, [pc, #448]	@ (34011e24 <RCCEx_GetI2CCLKFreq+0x2e4>)
34011c62:	4293      	cmp	r3, r2
34011c64:	f200 8102 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c68:	4a6f      	ldr	r2, [pc, #444]	@ (34011e28 <RCCEx_GetI2CCLKFreq+0x2e8>)
34011c6a:	4293      	cmp	r3, r2
34011c6c:	d02b      	beq.n	34011cc6 <RCCEx_GetI2CCLKFreq+0x186>
34011c6e:	4a6e      	ldr	r2, [pc, #440]	@ (34011e28 <RCCEx_GetI2CCLKFreq+0x2e8>)
34011c70:	4293      	cmp	r3, r2
34011c72:	f200 80fb 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c76:	4a6d      	ldr	r2, [pc, #436]	@ (34011e2c <RCCEx_GetI2CCLKFreq+0x2ec>)
34011c78:	4293      	cmp	r3, r2
34011c7a:	d024      	beq.n	34011cc6 <RCCEx_GetI2CCLKFreq+0x186>
34011c7c:	4a6b      	ldr	r2, [pc, #428]	@ (34011e2c <RCCEx_GetI2CCLKFreq+0x2ec>)
34011c7e:	4293      	cmp	r3, r2
34011c80:	f200 80f4 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c84:	4a6a      	ldr	r2, [pc, #424]	@ (34011e30 <RCCEx_GetI2CCLKFreq+0x2f0>)
34011c86:	4293      	cmp	r3, r2
34011c88:	d011      	beq.n	34011cae <RCCEx_GetI2CCLKFreq+0x16e>
34011c8a:	4a69      	ldr	r2, [pc, #420]	@ (34011e30 <RCCEx_GetI2CCLKFreq+0x2f0>)
34011c8c:	4293      	cmp	r3, r2
34011c8e:	f200 80ed 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011c92:	4a68      	ldr	r2, [pc, #416]	@ (34011e34 <RCCEx_GetI2CCLKFreq+0x2f4>)
34011c94:	4293      	cmp	r3, r2
34011c96:	d00a      	beq.n	34011cae <RCCEx_GetI2CCLKFreq+0x16e>
34011c98:	4a66      	ldr	r2, [pc, #408]	@ (34011e34 <RCCEx_GetI2CCLKFreq+0x2f4>)
34011c9a:	4293      	cmp	r3, r2
34011c9c:	f200 80e6 	bhi.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
34011ca0:	4a65      	ldr	r2, [pc, #404]	@ (34011e38 <RCCEx_GetI2CCLKFreq+0x2f8>)
34011ca2:	4293      	cmp	r3, r2
34011ca4:	d003      	beq.n	34011cae <RCCEx_GetI2CCLKFreq+0x16e>
34011ca6:	4a65      	ldr	r2, [pc, #404]	@ (34011e3c <RCCEx_GetI2CCLKFreq+0x2fc>)
34011ca8:	4293      	cmp	r3, r2
34011caa:	f040 80df 	bne.w	34011e6c <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011cae:	f7f5 fe9b 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34011cb2:	4603      	mov	r3, r0
34011cb4:	4618      	mov	r0, r3
34011cb6:	f7fe ff8f 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34011cba:	4603      	mov	r3, r0
34011cbc:	4618      	mov	r0, r3
34011cbe:	f7fe ff9c 	bl	34010bfa <RCCEx_GetPCLK1Freq>
34011cc2:	60f8      	str	r0, [r7, #12]
      break;
34011cc4:	e0db      	b.n	34011e7e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011cc6:	2007      	movs	r0, #7
34011cc8:	f7ff fa72 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
34011ccc:	60f8      	str	r0, [r7, #12]
      break;
34011cce:	e0d6      	b.n	34011e7e <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34011cd0:	f7f7 faec 	bl	340092ac <LL_RCC_IC10_IsEnabled>
34011cd4:	4603      	mov	r3, r0
34011cd6:	2b00      	cmp	r3, #0
34011cd8:	f000 80ca 	beq.w	34011e70 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34011cdc:	f7f7 fb08 	bl	340092f0 <LL_RCC_IC10_GetDivider>
34011ce0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34011ce2:	f7f7 faf7 	bl	340092d4 <LL_RCC_IC10_GetSource>
34011ce6:	4603      	mov	r3, r0
34011ce8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011cec:	d029      	beq.n	34011d42 <RCCEx_GetI2CCLKFreq+0x202>
34011cee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011cf2:	d82f      	bhi.n	34011d54 <RCCEx_GetI2CCLKFreq+0x214>
34011cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011cf8:	d01a      	beq.n	34011d30 <RCCEx_GetI2CCLKFreq+0x1f0>
34011cfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011cfe:	d829      	bhi.n	34011d54 <RCCEx_GetI2CCLKFreq+0x214>
34011d00:	2b00      	cmp	r3, #0
34011d02:	d003      	beq.n	34011d0c <RCCEx_GetI2CCLKFreq+0x1cc>
34011d04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011d08:	d009      	beq.n	34011d1e <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011d0a:	e023      	b.n	34011d54 <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011d0c:	f7fe fe4c 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011d10:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011d12:	68fa      	ldr	r2, [r7, #12]
34011d14:	68bb      	ldr	r3, [r7, #8]
34011d16:	fbb2 f3f3 	udiv	r3, r2, r3
34011d1a:	60fb      	str	r3, [r7, #12]
            break;
34011d1c:	e01b      	b.n	34011d56 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011d1e:	f7fe fe89 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011d22:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011d24:	68fa      	ldr	r2, [r7, #12]
34011d26:	68bb      	ldr	r3, [r7, #8]
34011d28:	fbb2 f3f3 	udiv	r3, r2, r3
34011d2c:	60fb      	str	r3, [r7, #12]
            break;
34011d2e:	e012      	b.n	34011d56 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011d30:	f7fe fec6 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34011d34:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011d36:	68fa      	ldr	r2, [r7, #12]
34011d38:	68bb      	ldr	r3, [r7, #8]
34011d3a:	fbb2 f3f3 	udiv	r3, r2, r3
34011d3e:	60fb      	str	r3, [r7, #12]
            break;
34011d40:	e009      	b.n	34011d56 <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011d42:	f7fe ff03 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34011d46:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011d48:	68fa      	ldr	r2, [r7, #12]
34011d4a:	68bb      	ldr	r3, [r7, #8]
34011d4c:	fbb2 f3f3 	udiv	r3, r2, r3
34011d50:	60fb      	str	r3, [r7, #12]
            break;
34011d52:	e000      	b.n	34011d56 <RCCEx_GetI2CCLKFreq+0x216>
            break;
34011d54:	bf00      	nop
        }
      }
      break;
34011d56:	e08b      	b.n	34011e70 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34011d58:	f7f7 fba8 	bl	340094ac <LL_RCC_IC15_IsEnabled>
34011d5c:	4603      	mov	r3, r0
34011d5e:	2b00      	cmp	r3, #0
34011d60:	f000 8088 	beq.w	34011e74 <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34011d64:	f7f7 fbc4 	bl	340094f0 <LL_RCC_IC15_GetDivider>
34011d68:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34011d6a:	f7f7 fbb3 	bl	340094d4 <LL_RCC_IC15_GetSource>
34011d6e:	4603      	mov	r3, r0
34011d70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011d74:	d029      	beq.n	34011dca <RCCEx_GetI2CCLKFreq+0x28a>
34011d76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011d7a:	d82f      	bhi.n	34011ddc <RCCEx_GetI2CCLKFreq+0x29c>
34011d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011d80:	d01a      	beq.n	34011db8 <RCCEx_GetI2CCLKFreq+0x278>
34011d82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011d86:	d829      	bhi.n	34011ddc <RCCEx_GetI2CCLKFreq+0x29c>
34011d88:	2b00      	cmp	r3, #0
34011d8a:	d003      	beq.n	34011d94 <RCCEx_GetI2CCLKFreq+0x254>
34011d8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011d90:	d009      	beq.n	34011da6 <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011d92:	e023      	b.n	34011ddc <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011d94:	f7fe fe08 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011d98:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011d9a:	68fa      	ldr	r2, [r7, #12]
34011d9c:	68bb      	ldr	r3, [r7, #8]
34011d9e:	fbb2 f3f3 	udiv	r3, r2, r3
34011da2:	60fb      	str	r3, [r7, #12]
            break;
34011da4:	e01b      	b.n	34011dde <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011da6:	f7fe fe45 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011daa:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011dac:	68fa      	ldr	r2, [r7, #12]
34011dae:	68bb      	ldr	r3, [r7, #8]
34011db0:	fbb2 f3f3 	udiv	r3, r2, r3
34011db4:	60fb      	str	r3, [r7, #12]
            break;
34011db6:	e012      	b.n	34011dde <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011db8:	f7fe fe82 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34011dbc:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011dbe:	68fa      	ldr	r2, [r7, #12]
34011dc0:	68bb      	ldr	r3, [r7, #8]
34011dc2:	fbb2 f3f3 	udiv	r3, r2, r3
34011dc6:	60fb      	str	r3, [r7, #12]
            break;
34011dc8:	e009      	b.n	34011dde <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011dca:	f7fe febf 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34011dce:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011dd0:	68fa      	ldr	r2, [r7, #12]
34011dd2:	68bb      	ldr	r3, [r7, #8]
34011dd4:	fbb2 f3f3 	udiv	r3, r2, r3
34011dd8:	60fb      	str	r3, [r7, #12]
            break;
34011dda:	e000      	b.n	34011dde <RCCEx_GetI2CCLKFreq+0x29e>
            break;
34011ddc:	bf00      	nop
        }
      }
      break;
34011dde:	e049      	b.n	34011e74 <RCCEx_GetI2CCLKFreq+0x334>
34011de0:	07050c0c 	.word	0x07050c0c
34011de4:	0705080c 	.word	0x0705080c
34011de8:	0705040c 	.word	0x0705040c
34011dec:	0705000c 	.word	0x0705000c
34011df0:	07040c0c 	.word	0x07040c0c
34011df4:	0704080c 	.word	0x0704080c
34011df8:	0704040c 	.word	0x0704040c
34011dfc:	0704000c 	.word	0x0704000c
34011e00:	07030c0c 	.word	0x07030c0c
34011e04:	0703080c 	.word	0x0703080c
34011e08:	0703040c 	.word	0x0703040c
34011e0c:	0703000c 	.word	0x0703000c
34011e10:	07020c0c 	.word	0x07020c0c
34011e14:	0702080c 	.word	0x0702080c
34011e18:	0702040c 	.word	0x0702040c
34011e1c:	0702000c 	.word	0x0702000c
34011e20:	07010c0c 	.word	0x07010c0c
34011e24:	0701080c 	.word	0x0701080c
34011e28:	0701040c 	.word	0x0701040c
34011e2c:	0701000c 	.word	0x0701000c
34011e30:	07000c0c 	.word	0x07000c0c
34011e34:	0700080c 	.word	0x0700080c
34011e38:	0700000c 	.word	0x0700000c
34011e3c:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34011e40:	f7f6 f9d0 	bl	340081e4 <LL_RCC_HSI_IsReady>
34011e44:	4603      	mov	r3, r0
34011e46:	2b00      	cmp	r3, #0
34011e48:	d016      	beq.n	34011e78 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34011e4a:	f7f6 f9dd 	bl	34008208 <LL_RCC_HSI_GetDivider>
34011e4e:	4603      	mov	r3, r0
34011e50:	09db      	lsrs	r3, r3, #7
34011e52:	4a0d      	ldr	r2, [pc, #52]	@ (34011e88 <RCCEx_GetI2CCLKFreq+0x348>)
34011e54:	fa22 f303 	lsr.w	r3, r2, r3
34011e58:	60fb      	str	r3, [r7, #12]
      }
      break;
34011e5a:	e00d      	b.n	34011e78 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34011e5c:	f7f6 f9e2 	bl	34008224 <LL_RCC_MSI_IsReady>
34011e60:	4603      	mov	r3, r0
34011e62:	2b00      	cmp	r3, #0
34011e64:	d00a      	beq.n	34011e7c <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
34011e66:	4b09      	ldr	r3, [pc, #36]	@ (34011e8c <RCCEx_GetI2CCLKFreq+0x34c>)
34011e68:	60fb      	str	r3, [r7, #12]
      }
      break;
34011e6a:	e007      	b.n	34011e7c <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
34011e6c:	bf00      	nop
34011e6e:	e006      	b.n	34011e7e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34011e70:	bf00      	nop
34011e72:	e004      	b.n	34011e7e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34011e74:	bf00      	nop
34011e76:	e002      	b.n	34011e7e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34011e78:	bf00      	nop
34011e7a:	e000      	b.n	34011e7e <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34011e7c:	bf00      	nop
  }

  return i2c_frequency;
34011e7e:	68fb      	ldr	r3, [r7, #12]
}
34011e80:	4618      	mov	r0, r3
34011e82:	3710      	adds	r7, #16
34011e84:	46bd      	mov	sp, r7
34011e86:	bd80      	pop	{r7, pc}
34011e88:	03d09000 	.word	0x03d09000
34011e8c:	003d0900 	.word	0x003d0900

34011e90 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
34011e90:	b580      	push	{r7, lr}
34011e92:	b084      	sub	sp, #16
34011e94:	af00      	add	r7, sp, #0
34011e96:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34011e98:	2300      	movs	r3, #0
34011e9a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34011e9c:	6878      	ldr	r0, [r7, #4]
34011e9e:	f7f6 fcf3 	bl	34008888 <LL_RCC_GetI3CClockSource>
34011ea2:	4603      	mov	r3, r0
34011ea4:	4a86      	ldr	r2, [pc, #536]	@ (340120c0 <RCCEx_GetI3CCLKFreq+0x230>)
34011ea6:	4293      	cmp	r3, r2
34011ea8:	f000 80e6 	beq.w	34012078 <RCCEx_GetI3CCLKFreq+0x1e8>
34011eac:	4a84      	ldr	r2, [pc, #528]	@ (340120c0 <RCCEx_GetI3CCLKFreq+0x230>)
34011eae:	4293      	cmp	r3, r2
34011eb0:	f200 80f8 	bhi.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
34011eb4:	4a83      	ldr	r2, [pc, #524]	@ (340120c4 <RCCEx_GetI3CCLKFreq+0x234>)
34011eb6:	4293      	cmp	r3, r2
34011eb8:	f000 80de 	beq.w	34012078 <RCCEx_GetI3CCLKFreq+0x1e8>
34011ebc:	4a81      	ldr	r2, [pc, #516]	@ (340120c4 <RCCEx_GetI3CCLKFreq+0x234>)
34011ebe:	4293      	cmp	r3, r2
34011ec0:	f200 80f0 	bhi.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
34011ec4:	4a80      	ldr	r2, [pc, #512]	@ (340120c8 <RCCEx_GetI3CCLKFreq+0x238>)
34011ec6:	4293      	cmp	r3, r2
34011ec8:	f000 80e4 	beq.w	34012094 <RCCEx_GetI3CCLKFreq+0x204>
34011ecc:	4a7e      	ldr	r2, [pc, #504]	@ (340120c8 <RCCEx_GetI3CCLKFreq+0x238>)
34011ece:	4293      	cmp	r3, r2
34011ed0:	f200 80e8 	bhi.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
34011ed4:	4a7d      	ldr	r2, [pc, #500]	@ (340120cc <RCCEx_GetI3CCLKFreq+0x23c>)
34011ed6:	4293      	cmp	r3, r2
34011ed8:	f000 80dc 	beq.w	34012094 <RCCEx_GetI3CCLKFreq+0x204>
34011edc:	4a7b      	ldr	r2, [pc, #492]	@ (340120cc <RCCEx_GetI3CCLKFreq+0x23c>)
34011ede:	4293      	cmp	r3, r2
34011ee0:	f200 80e0 	bhi.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
34011ee4:	4a7a      	ldr	r2, [pc, #488]	@ (340120d0 <RCCEx_GetI3CCLKFreq+0x240>)
34011ee6:	4293      	cmp	r3, r2
34011ee8:	f000 8083 	beq.w	34011ff2 <RCCEx_GetI3CCLKFreq+0x162>
34011eec:	4a78      	ldr	r2, [pc, #480]	@ (340120d0 <RCCEx_GetI3CCLKFreq+0x240>)
34011eee:	4293      	cmp	r3, r2
34011ef0:	f200 80d8 	bhi.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
34011ef4:	4a77      	ldr	r2, [pc, #476]	@ (340120d4 <RCCEx_GetI3CCLKFreq+0x244>)
34011ef6:	4293      	cmp	r3, r2
34011ef8:	d07b      	beq.n	34011ff2 <RCCEx_GetI3CCLKFreq+0x162>
34011efa:	4a76      	ldr	r2, [pc, #472]	@ (340120d4 <RCCEx_GetI3CCLKFreq+0x244>)
34011efc:	4293      	cmp	r3, r2
34011efe:	f200 80d1 	bhi.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
34011f02:	4a75      	ldr	r2, [pc, #468]	@ (340120d8 <RCCEx_GetI3CCLKFreq+0x248>)
34011f04:	4293      	cmp	r3, r2
34011f06:	d030      	beq.n	34011f6a <RCCEx_GetI3CCLKFreq+0xda>
34011f08:	4a73      	ldr	r2, [pc, #460]	@ (340120d8 <RCCEx_GetI3CCLKFreq+0x248>)
34011f0a:	4293      	cmp	r3, r2
34011f0c:	f200 80ca 	bhi.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
34011f10:	4a72      	ldr	r2, [pc, #456]	@ (340120dc <RCCEx_GetI3CCLKFreq+0x24c>)
34011f12:	4293      	cmp	r3, r2
34011f14:	d029      	beq.n	34011f6a <RCCEx_GetI3CCLKFreq+0xda>
34011f16:	4a71      	ldr	r2, [pc, #452]	@ (340120dc <RCCEx_GetI3CCLKFreq+0x24c>)
34011f18:	4293      	cmp	r3, r2
34011f1a:	f200 80c3 	bhi.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
34011f1e:	4a70      	ldr	r2, [pc, #448]	@ (340120e0 <RCCEx_GetI3CCLKFreq+0x250>)
34011f20:	4293      	cmp	r3, r2
34011f22:	d01d      	beq.n	34011f60 <RCCEx_GetI3CCLKFreq+0xd0>
34011f24:	4a6e      	ldr	r2, [pc, #440]	@ (340120e0 <RCCEx_GetI3CCLKFreq+0x250>)
34011f26:	4293      	cmp	r3, r2
34011f28:	f200 80bc 	bhi.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
34011f2c:	4a6d      	ldr	r2, [pc, #436]	@ (340120e4 <RCCEx_GetI3CCLKFreq+0x254>)
34011f2e:	4293      	cmp	r3, r2
34011f30:	d016      	beq.n	34011f60 <RCCEx_GetI3CCLKFreq+0xd0>
34011f32:	4a6c      	ldr	r2, [pc, #432]	@ (340120e4 <RCCEx_GetI3CCLKFreq+0x254>)
34011f34:	4293      	cmp	r3, r2
34011f36:	f200 80b5 	bhi.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
34011f3a:	4a6b      	ldr	r2, [pc, #428]	@ (340120e8 <RCCEx_GetI3CCLKFreq+0x258>)
34011f3c:	4293      	cmp	r3, r2
34011f3e:	d003      	beq.n	34011f48 <RCCEx_GetI3CCLKFreq+0xb8>
34011f40:	4a6a      	ldr	r2, [pc, #424]	@ (340120ec <RCCEx_GetI3CCLKFreq+0x25c>)
34011f42:	4293      	cmp	r3, r2
34011f44:	f040 80ae 	bne.w	340120a4 <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011f48:	f7f5 fd4e 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34011f4c:	4603      	mov	r3, r0
34011f4e:	4618      	mov	r0, r3
34011f50:	f7fe fe42 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34011f54:	4603      	mov	r3, r0
34011f56:	4618      	mov	r0, r3
34011f58:	f7fe fe4f 	bl	34010bfa <RCCEx_GetPCLK1Freq>
34011f5c:	60f8      	str	r0, [r7, #12]
      break;
34011f5e:	e0aa      	b.n	340120b6 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011f60:	2007      	movs	r0, #7
34011f62:	f7ff f925 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
34011f66:	60f8      	str	r0, [r7, #12]
      break;
34011f68:	e0a5      	b.n	340120b6 <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34011f6a:	f7f7 f99f 	bl	340092ac <LL_RCC_IC10_IsEnabled>
34011f6e:	4603      	mov	r3, r0
34011f70:	2b00      	cmp	r3, #0
34011f72:	f000 8099 	beq.w	340120a8 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34011f76:	f7f7 f9bb 	bl	340092f0 <LL_RCC_IC10_GetDivider>
34011f7a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34011f7c:	f7f7 f9aa 	bl	340092d4 <LL_RCC_IC10_GetSource>
34011f80:	4603      	mov	r3, r0
34011f82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011f86:	d029      	beq.n	34011fdc <RCCEx_GetI3CCLKFreq+0x14c>
34011f88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011f8c:	d82f      	bhi.n	34011fee <RCCEx_GetI3CCLKFreq+0x15e>
34011f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011f92:	d01a      	beq.n	34011fca <RCCEx_GetI3CCLKFreq+0x13a>
34011f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011f98:	d829      	bhi.n	34011fee <RCCEx_GetI3CCLKFreq+0x15e>
34011f9a:	2b00      	cmp	r3, #0
34011f9c:	d003      	beq.n	34011fa6 <RCCEx_GetI3CCLKFreq+0x116>
34011f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011fa2:	d009      	beq.n	34011fb8 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011fa4:	e023      	b.n	34011fee <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011fa6:	f7fe fcff 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34011faa:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011fac:	68fa      	ldr	r2, [r7, #12]
34011fae:	68bb      	ldr	r3, [r7, #8]
34011fb0:	fbb2 f3f3 	udiv	r3, r2, r3
34011fb4:	60fb      	str	r3, [r7, #12]
            break;
34011fb6:	e01b      	b.n	34011ff0 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011fb8:	f7fe fd3c 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34011fbc:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011fbe:	68fa      	ldr	r2, [r7, #12]
34011fc0:	68bb      	ldr	r3, [r7, #8]
34011fc2:	fbb2 f3f3 	udiv	r3, r2, r3
34011fc6:	60fb      	str	r3, [r7, #12]
            break;
34011fc8:	e012      	b.n	34011ff0 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011fca:	f7fe fd79 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34011fce:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011fd0:	68fa      	ldr	r2, [r7, #12]
34011fd2:	68bb      	ldr	r3, [r7, #8]
34011fd4:	fbb2 f3f3 	udiv	r3, r2, r3
34011fd8:	60fb      	str	r3, [r7, #12]
            break;
34011fda:	e009      	b.n	34011ff0 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011fdc:	f7fe fdb6 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34011fe0:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011fe2:	68fa      	ldr	r2, [r7, #12]
34011fe4:	68bb      	ldr	r3, [r7, #8]
34011fe6:	fbb2 f3f3 	udiv	r3, r2, r3
34011fea:	60fb      	str	r3, [r7, #12]
            break;
34011fec:	e000      	b.n	34011ff0 <RCCEx_GetI3CCLKFreq+0x160>
            break;
34011fee:	bf00      	nop
        }
      }
      break;
34011ff0:	e05a      	b.n	340120a8 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34011ff2:	f7f7 fa5b 	bl	340094ac <LL_RCC_IC15_IsEnabled>
34011ff6:	4603      	mov	r3, r0
34011ff8:	2b00      	cmp	r3, #0
34011ffa:	d057      	beq.n	340120ac <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34011ffc:	f7f7 fa78 	bl	340094f0 <LL_RCC_IC15_GetDivider>
34012000:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34012002:	f7f7 fa67 	bl	340094d4 <LL_RCC_IC15_GetSource>
34012006:	4603      	mov	r3, r0
34012008:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401200c:	d029      	beq.n	34012062 <RCCEx_GetI3CCLKFreq+0x1d2>
3401200e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012012:	d82f      	bhi.n	34012074 <RCCEx_GetI3CCLKFreq+0x1e4>
34012014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012018:	d01a      	beq.n	34012050 <RCCEx_GetI3CCLKFreq+0x1c0>
3401201a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401201e:	d829      	bhi.n	34012074 <RCCEx_GetI3CCLKFreq+0x1e4>
34012020:	2b00      	cmp	r3, #0
34012022:	d003      	beq.n	3401202c <RCCEx_GetI3CCLKFreq+0x19c>
34012024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012028:	d009      	beq.n	3401203e <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401202a:	e023      	b.n	34012074 <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401202c:	f7fe fcbc 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34012030:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34012032:	68fa      	ldr	r2, [r7, #12]
34012034:	68bb      	ldr	r3, [r7, #8]
34012036:	fbb2 f3f3 	udiv	r3, r2, r3
3401203a:	60fb      	str	r3, [r7, #12]
            break;
3401203c:	e01b      	b.n	34012076 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401203e:	f7fe fcf9 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34012042:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34012044:	68fa      	ldr	r2, [r7, #12]
34012046:	68bb      	ldr	r3, [r7, #8]
34012048:	fbb2 f3f3 	udiv	r3, r2, r3
3401204c:	60fb      	str	r3, [r7, #12]
            break;
3401204e:	e012      	b.n	34012076 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012050:	f7fe fd36 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34012054:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34012056:	68fa      	ldr	r2, [r7, #12]
34012058:	68bb      	ldr	r3, [r7, #8]
3401205a:	fbb2 f3f3 	udiv	r3, r2, r3
3401205e:	60fb      	str	r3, [r7, #12]
            break;
34012060:	e009      	b.n	34012076 <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012062:	f7fe fd73 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34012066:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34012068:	68fa      	ldr	r2, [r7, #12]
3401206a:	68bb      	ldr	r3, [r7, #8]
3401206c:	fbb2 f3f3 	udiv	r3, r2, r3
34012070:	60fb      	str	r3, [r7, #12]
            break;
34012072:	e000      	b.n	34012076 <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
34012074:	bf00      	nop
        }
      }
      break;
34012076:	e019      	b.n	340120ac <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34012078:	f7f6 f8b4 	bl	340081e4 <LL_RCC_HSI_IsReady>
3401207c:	4603      	mov	r3, r0
3401207e:	2b00      	cmp	r3, #0
34012080:	d016      	beq.n	340120b0 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012082:	f7f6 f8c1 	bl	34008208 <LL_RCC_HSI_GetDivider>
34012086:	4603      	mov	r3, r0
34012088:	09db      	lsrs	r3, r3, #7
3401208a:	4a19      	ldr	r2, [pc, #100]	@ (340120f0 <RCCEx_GetI3CCLKFreq+0x260>)
3401208c:	fa22 f303 	lsr.w	r3, r2, r3
34012090:	60fb      	str	r3, [r7, #12]
      }
      break;
34012092:	e00d      	b.n	340120b0 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34012094:	f7f6 f8c6 	bl	34008224 <LL_RCC_MSI_IsReady>
34012098:	4603      	mov	r3, r0
3401209a:	2b00      	cmp	r3, #0
3401209c:	d00a      	beq.n	340120b4 <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
3401209e:	4b15      	ldr	r3, [pc, #84]	@ (340120f4 <RCCEx_GetI3CCLKFreq+0x264>)
340120a0:	60fb      	str	r3, [r7, #12]
      }
      break;
340120a2:	e007      	b.n	340120b4 <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
340120a4:	bf00      	nop
340120a6:	e006      	b.n	340120b6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
340120a8:	bf00      	nop
340120aa:	e004      	b.n	340120b6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
340120ac:	bf00      	nop
340120ae:	e002      	b.n	340120b6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
340120b0:	bf00      	nop
340120b2:	e000      	b.n	340120b6 <RCCEx_GetI3CCLKFreq+0x226>
      break;
340120b4:	bf00      	nop
  }

  return i3c_frequency;
340120b6:	68fb      	ldr	r3, [r7, #12]
}
340120b8:	4618      	mov	r0, r3
340120ba:	3710      	adds	r7, #16
340120bc:	46bd      	mov	sp, r7
340120be:	bd80      	pop	{r7, pc}
340120c0:	0705140c 	.word	0x0705140c
340120c4:	0705100c 	.word	0x0705100c
340120c8:	0704140c 	.word	0x0704140c
340120cc:	0704100c 	.word	0x0704100c
340120d0:	0703140c 	.word	0x0703140c
340120d4:	0703100c 	.word	0x0703100c
340120d8:	0702140c 	.word	0x0702140c
340120dc:	0702100c 	.word	0x0702100c
340120e0:	0701140c 	.word	0x0701140c
340120e4:	0701100c 	.word	0x0701100c
340120e8:	0700100c 	.word	0x0700100c
340120ec:	0700140c 	.word	0x0700140c
340120f0:	03d09000 	.word	0x03d09000
340120f4:	003d0900 	.word	0x003d0900

340120f8 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
340120f8:	b590      	push	{r4, r7, lr}
340120fa:	b085      	sub	sp, #20
340120fc:	af00      	add	r7, sp, #0
340120fe:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34012100:	2300      	movs	r3, #0
34012102:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34012104:	6878      	ldr	r0, [r7, #4]
34012106:	f7f6 fbcb 	bl	340088a0 <LL_RCC_GetLPTIMClockSource>
3401210a:	4603      	mov	r3, r0
3401210c:	4aa1      	ldr	r2, [pc, #644]	@ (34012394 <RCCEx_GetLPTIMCLKFreq+0x29c>)
3401210e:	4293      	cmp	r3, r2
34012110:	f000 8185 	beq.w	3401241e <RCCEx_GetLPTIMCLKFreq+0x326>
34012114:	4a9f      	ldr	r2, [pc, #636]	@ (34012394 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34012116:	4293      	cmp	r3, r2
34012118:	f200 818b 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401211c:	4a9e      	ldr	r2, [pc, #632]	@ (34012398 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3401211e:	4293      	cmp	r3, r2
34012120:	f000 817d 	beq.w	3401241e <RCCEx_GetLPTIMCLKFreq+0x326>
34012124:	4a9c      	ldr	r2, [pc, #624]	@ (34012398 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34012126:	4293      	cmp	r3, r2
34012128:	f200 8183 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401212c:	4a9b      	ldr	r2, [pc, #620]	@ (3401239c <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3401212e:	4293      	cmp	r3, r2
34012130:	f000 8175 	beq.w	3401241e <RCCEx_GetLPTIMCLKFreq+0x326>
34012134:	4a99      	ldr	r2, [pc, #612]	@ (3401239c <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34012136:	4293      	cmp	r3, r2
34012138:	f200 817b 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401213c:	4a98      	ldr	r2, [pc, #608]	@ (340123a0 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3401213e:	4293      	cmp	r3, r2
34012140:	f000 816d 	beq.w	3401241e <RCCEx_GetLPTIMCLKFreq+0x326>
34012144:	4a96      	ldr	r2, [pc, #600]	@ (340123a0 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34012146:	4293      	cmp	r3, r2
34012148:	f200 8173 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401214c:	4a95      	ldr	r2, [pc, #596]	@ (340123a4 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3401214e:	4293      	cmp	r3, r2
34012150:	f000 8165 	beq.w	3401241e <RCCEx_GetLPTIMCLKFreq+0x326>
34012154:	4a93      	ldr	r2, [pc, #588]	@ (340123a4 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34012156:	4293      	cmp	r3, r2
34012158:	f200 816b 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401215c:	4a92      	ldr	r2, [pc, #584]	@ (340123a8 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
3401215e:	4293      	cmp	r3, r2
34012160:	f000 8154 	beq.w	3401240c <RCCEx_GetLPTIMCLKFreq+0x314>
34012164:	4a90      	ldr	r2, [pc, #576]	@ (340123a8 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34012166:	4293      	cmp	r3, r2
34012168:	f200 8163 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401216c:	4a8f      	ldr	r2, [pc, #572]	@ (340123ac <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3401216e:	4293      	cmp	r3, r2
34012170:	f000 814c 	beq.w	3401240c <RCCEx_GetLPTIMCLKFreq+0x314>
34012174:	4a8d      	ldr	r2, [pc, #564]	@ (340123ac <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34012176:	4293      	cmp	r3, r2
34012178:	f200 815b 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401217c:	4a8c      	ldr	r2, [pc, #560]	@ (340123b0 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3401217e:	4293      	cmp	r3, r2
34012180:	f000 8144 	beq.w	3401240c <RCCEx_GetLPTIMCLKFreq+0x314>
34012184:	4a8a      	ldr	r2, [pc, #552]	@ (340123b0 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34012186:	4293      	cmp	r3, r2
34012188:	f200 8153 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401218c:	4a89      	ldr	r2, [pc, #548]	@ (340123b4 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3401218e:	4293      	cmp	r3, r2
34012190:	f000 813c 	beq.w	3401240c <RCCEx_GetLPTIMCLKFreq+0x314>
34012194:	4a87      	ldr	r2, [pc, #540]	@ (340123b4 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
34012196:	4293      	cmp	r3, r2
34012198:	f200 814b 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401219c:	4a86      	ldr	r2, [pc, #536]	@ (340123b8 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3401219e:	4293      	cmp	r3, r2
340121a0:	f000 8134 	beq.w	3401240c <RCCEx_GetLPTIMCLKFreq+0x314>
340121a4:	4a84      	ldr	r2, [pc, #528]	@ (340123b8 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
340121a6:	4293      	cmp	r3, r2
340121a8:	f200 8143 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
340121ac:	4a83      	ldr	r2, [pc, #524]	@ (340123bc <RCCEx_GetLPTIMCLKFreq+0x2c4>)
340121ae:	4293      	cmp	r3, r2
340121b0:	f000 80e7 	beq.w	34012382 <RCCEx_GetLPTIMCLKFreq+0x28a>
340121b4:	4a81      	ldr	r2, [pc, #516]	@ (340123bc <RCCEx_GetLPTIMCLKFreq+0x2c4>)
340121b6:	4293      	cmp	r3, r2
340121b8:	f200 813b 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
340121bc:	4a80      	ldr	r2, [pc, #512]	@ (340123c0 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
340121be:	4293      	cmp	r3, r2
340121c0:	f000 80df 	beq.w	34012382 <RCCEx_GetLPTIMCLKFreq+0x28a>
340121c4:	4a7e      	ldr	r2, [pc, #504]	@ (340123c0 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
340121c6:	4293      	cmp	r3, r2
340121c8:	f200 8133 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
340121cc:	4a7d      	ldr	r2, [pc, #500]	@ (340123c4 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
340121ce:	4293      	cmp	r3, r2
340121d0:	f000 80d7 	beq.w	34012382 <RCCEx_GetLPTIMCLKFreq+0x28a>
340121d4:	4a7b      	ldr	r2, [pc, #492]	@ (340123c4 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
340121d6:	4293      	cmp	r3, r2
340121d8:	f200 812b 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
340121dc:	4a7a      	ldr	r2, [pc, #488]	@ (340123c8 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
340121de:	4293      	cmp	r3, r2
340121e0:	f000 80cf 	beq.w	34012382 <RCCEx_GetLPTIMCLKFreq+0x28a>
340121e4:	4a78      	ldr	r2, [pc, #480]	@ (340123c8 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
340121e6:	4293      	cmp	r3, r2
340121e8:	f200 8123 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
340121ec:	4a77      	ldr	r2, [pc, #476]	@ (340123cc <RCCEx_GetLPTIMCLKFreq+0x2d4>)
340121ee:	4293      	cmp	r3, r2
340121f0:	f000 80c7 	beq.w	34012382 <RCCEx_GetLPTIMCLKFreq+0x28a>
340121f4:	4a75      	ldr	r2, [pc, #468]	@ (340123cc <RCCEx_GetLPTIMCLKFreq+0x2d4>)
340121f6:	4293      	cmp	r3, r2
340121f8:	f200 811b 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
340121fc:	4a74      	ldr	r2, [pc, #464]	@ (340123d0 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
340121fe:	4293      	cmp	r3, r2
34012200:	d07b      	beq.n	340122fa <RCCEx_GetLPTIMCLKFreq+0x202>
34012202:	4a73      	ldr	r2, [pc, #460]	@ (340123d0 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34012204:	4293      	cmp	r3, r2
34012206:	f200 8114 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401220a:	4a72      	ldr	r2, [pc, #456]	@ (340123d4 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3401220c:	4293      	cmp	r3, r2
3401220e:	d074      	beq.n	340122fa <RCCEx_GetLPTIMCLKFreq+0x202>
34012210:	4a70      	ldr	r2, [pc, #448]	@ (340123d4 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34012212:	4293      	cmp	r3, r2
34012214:	f200 810d 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012218:	4a6f      	ldr	r2, [pc, #444]	@ (340123d8 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3401221a:	4293      	cmp	r3, r2
3401221c:	d06d      	beq.n	340122fa <RCCEx_GetLPTIMCLKFreq+0x202>
3401221e:	4a6e      	ldr	r2, [pc, #440]	@ (340123d8 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34012220:	4293      	cmp	r3, r2
34012222:	f200 8106 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012226:	4a6d      	ldr	r2, [pc, #436]	@ (340123dc <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34012228:	4293      	cmp	r3, r2
3401222a:	d066      	beq.n	340122fa <RCCEx_GetLPTIMCLKFreq+0x202>
3401222c:	4a6b      	ldr	r2, [pc, #428]	@ (340123dc <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3401222e:	4293      	cmp	r3, r2
34012230:	f200 80ff 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012234:	4a6a      	ldr	r2, [pc, #424]	@ (340123e0 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34012236:	4293      	cmp	r3, r2
34012238:	d05f      	beq.n	340122fa <RCCEx_GetLPTIMCLKFreq+0x202>
3401223a:	4a69      	ldr	r2, [pc, #420]	@ (340123e0 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3401223c:	4293      	cmp	r3, r2
3401223e:	f200 80f8 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012242:	4a68      	ldr	r2, [pc, #416]	@ (340123e4 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34012244:	4293      	cmp	r3, r2
34012246:	d053      	beq.n	340122f0 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012248:	4a66      	ldr	r2, [pc, #408]	@ (340123e4 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3401224a:	4293      	cmp	r3, r2
3401224c:	f200 80f1 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012250:	4a65      	ldr	r2, [pc, #404]	@ (340123e8 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34012252:	4293      	cmp	r3, r2
34012254:	d04c      	beq.n	340122f0 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012256:	4a64      	ldr	r2, [pc, #400]	@ (340123e8 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34012258:	4293      	cmp	r3, r2
3401225a:	f200 80ea 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401225e:	4a63      	ldr	r2, [pc, #396]	@ (340123ec <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34012260:	4293      	cmp	r3, r2
34012262:	d045      	beq.n	340122f0 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012264:	4a61      	ldr	r2, [pc, #388]	@ (340123ec <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34012266:	4293      	cmp	r3, r2
34012268:	f200 80e3 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401226c:	4a60      	ldr	r2, [pc, #384]	@ (340123f0 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3401226e:	4293      	cmp	r3, r2
34012270:	d03e      	beq.n	340122f0 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012272:	4a5f      	ldr	r2, [pc, #380]	@ (340123f0 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
34012274:	4293      	cmp	r3, r2
34012276:	f200 80dc 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401227a:	4a5e      	ldr	r2, [pc, #376]	@ (340123f4 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3401227c:	4293      	cmp	r3, r2
3401227e:	d037      	beq.n	340122f0 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012280:	4a5c      	ldr	r2, [pc, #368]	@ (340123f4 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
34012282:	4293      	cmp	r3, r2
34012284:	f200 80d5 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012288:	4a5b      	ldr	r2, [pc, #364]	@ (340123f8 <RCCEx_GetLPTIMCLKFreq+0x300>)
3401228a:	4293      	cmp	r3, r2
3401228c:	d024      	beq.n	340122d8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3401228e:	4a5a      	ldr	r2, [pc, #360]	@ (340123f8 <RCCEx_GetLPTIMCLKFreq+0x300>)
34012290:	4293      	cmp	r3, r2
34012292:	f200 80ce 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
34012296:	4a59      	ldr	r2, [pc, #356]	@ (340123fc <RCCEx_GetLPTIMCLKFreq+0x304>)
34012298:	4293      	cmp	r3, r2
3401229a:	d01d      	beq.n	340122d8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3401229c:	4a57      	ldr	r2, [pc, #348]	@ (340123fc <RCCEx_GetLPTIMCLKFreq+0x304>)
3401229e:	4293      	cmp	r3, r2
340122a0:	f200 80c7 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
340122a4:	4a56      	ldr	r2, [pc, #344]	@ (34012400 <RCCEx_GetLPTIMCLKFreq+0x308>)
340122a6:	4293      	cmp	r3, r2
340122a8:	d016      	beq.n	340122d8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
340122aa:	4a55      	ldr	r2, [pc, #340]	@ (34012400 <RCCEx_GetLPTIMCLKFreq+0x308>)
340122ac:	4293      	cmp	r3, r2
340122ae:	f200 80c0 	bhi.w	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
340122b2:	4a54      	ldr	r2, [pc, #336]	@ (34012404 <RCCEx_GetLPTIMCLKFreq+0x30c>)
340122b4:	4293      	cmp	r3, r2
340122b6:	d003      	beq.n	340122c0 <RCCEx_GetLPTIMCLKFreq+0x1c8>
340122b8:	4a53      	ldr	r2, [pc, #332]	@ (34012408 <RCCEx_GetLPTIMCLKFreq+0x310>)
340122ba:	4293      	cmp	r3, r2
340122bc:	d00c      	beq.n	340122d8 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
340122be:	e0b8      	b.n	34012432 <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340122c0:	f7f5 fb92 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
340122c4:	4603      	mov	r3, r0
340122c6:	4618      	mov	r0, r3
340122c8:	f7fe fc86 	bl	34010bd8 <RCCEx_GetHCLKFreq>
340122cc:	4603      	mov	r3, r0
340122ce:	4618      	mov	r0, r3
340122d0:	f7fe fc93 	bl	34010bfa <RCCEx_GetPCLK1Freq>
340122d4:	60f8      	str	r0, [r7, #12]
      break;
340122d6:	e0b3      	b.n	34012440 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340122d8:	f7f5 fb86 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
340122dc:	4603      	mov	r3, r0
340122de:	4618      	mov	r0, r3
340122e0:	f7fe fc7a 	bl	34010bd8 <RCCEx_GetHCLKFreq>
340122e4:	4603      	mov	r3, r0
340122e6:	4618      	mov	r0, r3
340122e8:	f7fe fca8 	bl	34010c3c <RCCEx_GetPCLK4Freq>
340122ec:	60f8      	str	r0, [r7, #12]
      break;
340122ee:	e0a7      	b.n	34012440 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340122f0:	2007      	movs	r0, #7
340122f2:	f7fe ff5d 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
340122f6:	60f8      	str	r0, [r7, #12]
      break;
340122f8:	e0a2      	b.n	34012440 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340122fa:	f7f7 f8d7 	bl	340094ac <LL_RCC_IC15_IsEnabled>
340122fe:	4603      	mov	r3, r0
34012300:	2b00      	cmp	r3, #0
34012302:	f000 8098 	beq.w	34012436 <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
34012306:	f7f7 f8f3 	bl	340094f0 <LL_RCC_IC15_GetDivider>
3401230a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3401230c:	f7f7 f8e2 	bl	340094d4 <LL_RCC_IC15_GetSource>
34012310:	4603      	mov	r3, r0
34012312:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012316:	d029      	beq.n	3401236c <RCCEx_GetLPTIMCLKFreq+0x274>
34012318:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401231c:	d82f      	bhi.n	3401237e <RCCEx_GetLPTIMCLKFreq+0x286>
3401231e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012322:	d01a      	beq.n	3401235a <RCCEx_GetLPTIMCLKFreq+0x262>
34012324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012328:	d829      	bhi.n	3401237e <RCCEx_GetLPTIMCLKFreq+0x286>
3401232a:	2b00      	cmp	r3, #0
3401232c:	d003      	beq.n	34012336 <RCCEx_GetLPTIMCLKFreq+0x23e>
3401232e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012332:	d009      	beq.n	34012348 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
34012334:	e023      	b.n	3401237e <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012336:	f7fe fb37 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
3401233a:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3401233c:	68fa      	ldr	r2, [r7, #12]
3401233e:	68bb      	ldr	r3, [r7, #8]
34012340:	fbb2 f3f3 	udiv	r3, r2, r3
34012344:	60fb      	str	r3, [r7, #12]
            break;
34012346:	e01b      	b.n	34012380 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012348:	f7fe fb74 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
3401234c:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3401234e:	68fa      	ldr	r2, [r7, #12]
34012350:	68bb      	ldr	r3, [r7, #8]
34012352:	fbb2 f3f3 	udiv	r3, r2, r3
34012356:	60fb      	str	r3, [r7, #12]
            break;
34012358:	e012      	b.n	34012380 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401235a:	f7fe fbb1 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
3401235e:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34012360:	68fa      	ldr	r2, [r7, #12]
34012362:	68bb      	ldr	r3, [r7, #8]
34012364:	fbb2 f3f3 	udiv	r3, r2, r3
34012368:	60fb      	str	r3, [r7, #12]
            break;
3401236a:	e009      	b.n	34012380 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401236c:	f7fe fbee 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34012370:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34012372:	68fa      	ldr	r2, [r7, #12]
34012374:	68bb      	ldr	r3, [r7, #8]
34012376:	fbb2 f3f3 	udiv	r3, r2, r3
3401237a:	60fb      	str	r3, [r7, #12]
            break;
3401237c:	e000      	b.n	34012380 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
3401237e:	bf00      	nop
      break;
34012380:	e059      	b.n	34012436 <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
34012382:	f7f5 ff6f 	bl	34008264 <LL_RCC_LSE_IsReady>
34012386:	4603      	mov	r3, r0
34012388:	2b00      	cmp	r3, #0
3401238a:	d056      	beq.n	3401243a <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
3401238c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34012390:	60fb      	str	r3, [r7, #12]
      break;
34012392:	e052      	b.n	3401243a <RCCEx_GetLPTIMCLKFreq+0x342>
34012394:	0705182c 	.word	0x0705182c
34012398:	0705142c 	.word	0x0705142c
3401239c:	0705102c 	.word	0x0705102c
340123a0:	07050c2c 	.word	0x07050c2c
340123a4:	0705082c 	.word	0x0705082c
340123a8:	0704182c 	.word	0x0704182c
340123ac:	0704142c 	.word	0x0704142c
340123b0:	0704102c 	.word	0x0704102c
340123b4:	07040c2c 	.word	0x07040c2c
340123b8:	0704082c 	.word	0x0704082c
340123bc:	0703182c 	.word	0x0703182c
340123c0:	0703142c 	.word	0x0703142c
340123c4:	0703102c 	.word	0x0703102c
340123c8:	07030c2c 	.word	0x07030c2c
340123cc:	0703082c 	.word	0x0703082c
340123d0:	0702182c 	.word	0x0702182c
340123d4:	0702142c 	.word	0x0702142c
340123d8:	0702102c 	.word	0x0702102c
340123dc:	07020c2c 	.word	0x07020c2c
340123e0:	0702082c 	.word	0x0702082c
340123e4:	0701182c 	.word	0x0701182c
340123e8:	0701142c 	.word	0x0701142c
340123ec:	0701102c 	.word	0x0701102c
340123f0:	07010c2c 	.word	0x07010c2c
340123f4:	0701082c 	.word	0x0701082c
340123f8:	0700182c 	.word	0x0700182c
340123fc:	0700142c 	.word	0x0700142c
34012400:	0700102c 	.word	0x0700102c
34012404:	0700082c 	.word	0x0700082c
34012408:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
3401240c:	f7f5 ff3c 	bl	34008288 <LL_RCC_LSI_IsReady>
34012410:	4603      	mov	r3, r0
34012412:	2b00      	cmp	r3, #0
34012414:	d013      	beq.n	3401243e <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
34012416:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3401241a:	60fb      	str	r3, [r7, #12]
      break;
3401241c:	e00f      	b.n	3401243e <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3401241e:	f7f5 fae3 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34012422:	4604      	mov	r4, r0
34012424:	f7f6 fb46 	bl	34008ab4 <LL_RCC_GetTIMPrescaler>
34012428:	4603      	mov	r3, r0
3401242a:	fa24 f303 	lsr.w	r3, r4, r3
3401242e:	60fb      	str	r3, [r7, #12]
      break;
34012430:	e006      	b.n	34012440 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34012432:	bf00      	nop
34012434:	e004      	b.n	34012440 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34012436:	bf00      	nop
34012438:	e002      	b.n	34012440 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3401243a:	bf00      	nop
3401243c:	e000      	b.n	34012440 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3401243e:	bf00      	nop
  }

  return lptim_frequency;
34012440:	68fb      	ldr	r3, [r7, #12]
}
34012442:	4618      	mov	r0, r3
34012444:	3714      	adds	r7, #20
34012446:	46bd      	mov	sp, r7
34012448:	bd90      	pop	{r4, r7, pc}
3401244a:	bf00      	nop

3401244c <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
3401244c:	b580      	push	{r7, lr}
3401244e:	b084      	sub	sp, #16
34012450:	af00      	add	r7, sp, #0
34012452:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
34012454:	2300      	movs	r3, #0
34012456:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34012458:	6878      	ldr	r0, [r7, #4]
3401245a:	f7f6 fa2d 	bl	340088b8 <LL_RCC_GetLPUARTClockSource>
3401245e:	4603      	mov	r3, r0
34012460:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34012464:	f000 80c0 	beq.w	340125e8 <RCCEx_GetLPUARTCLKFreq+0x19c>
34012468:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401246c:	f200 80db 	bhi.w	34012626 <RCCEx_GetLPUARTCLKFreq+0x1da>
34012470:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34012474:	f000 80c6 	beq.w	34012604 <RCCEx_GetLPUARTCLKFreq+0x1b8>
34012478:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3401247c:	f200 80d3 	bhi.w	34012626 <RCCEx_GetLPUARTCLKFreq+0x1da>
34012480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34012484:	f000 80c6 	beq.w	34012614 <RCCEx_GetLPUARTCLKFreq+0x1c8>
34012488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3401248c:	f200 80cb 	bhi.w	34012626 <RCCEx_GetLPUARTCLKFreq+0x1da>
34012490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34012494:	d065      	beq.n	34012562 <RCCEx_GetLPUARTCLKFreq+0x116>
34012496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3401249a:	f200 80c4 	bhi.w	34012626 <RCCEx_GetLPUARTCLKFreq+0x1da>
3401249e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340124a2:	d01a      	beq.n	340124da <RCCEx_GetLPUARTCLKFreq+0x8e>
340124a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340124a8:	f200 80bd 	bhi.w	34012626 <RCCEx_GetLPUARTCLKFreq+0x1da>
340124ac:	2b00      	cmp	r3, #0
340124ae:	d003      	beq.n	340124b8 <RCCEx_GetLPUARTCLKFreq+0x6c>
340124b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340124b4:	d00c      	beq.n	340124d0 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
340124b6:	e0b6      	b.n	34012626 <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340124b8:	f7f5 fa96 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
340124bc:	4603      	mov	r3, r0
340124be:	4618      	mov	r0, r3
340124c0:	f7fe fb8a 	bl	34010bd8 <RCCEx_GetHCLKFreq>
340124c4:	4603      	mov	r3, r0
340124c6:	4618      	mov	r0, r3
340124c8:	f7fe fbb8 	bl	34010c3c <RCCEx_GetPCLK4Freq>
340124cc:	60f8      	str	r0, [r7, #12]
      break;
340124ce:	e0b5      	b.n	3401263c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340124d0:	2007      	movs	r0, #7
340124d2:	f7fe fe6d 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
340124d6:	60f8      	str	r0, [r7, #12]
      break;
340124d8:	e0b0      	b.n	3401263c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
340124da:	f7f6 fea7 	bl	3400922c <LL_RCC_IC9_IsEnabled>
340124de:	4603      	mov	r3, r0
340124e0:	2b00      	cmp	r3, #0
340124e2:	f000 80a2 	beq.w	3401262a <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
340124e6:	f7f6 fec3 	bl	34009270 <LL_RCC_IC9_GetDivider>
340124ea:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
340124ec:	f7f6 feb2 	bl	34009254 <LL_RCC_IC9_GetSource>
340124f0:	4603      	mov	r3, r0
340124f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340124f6:	d029      	beq.n	3401254c <RCCEx_GetLPUARTCLKFreq+0x100>
340124f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340124fc:	d82f      	bhi.n	3401255e <RCCEx_GetLPUARTCLKFreq+0x112>
340124fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012502:	d01a      	beq.n	3401253a <RCCEx_GetLPUARTCLKFreq+0xee>
34012504:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012508:	d829      	bhi.n	3401255e <RCCEx_GetLPUARTCLKFreq+0x112>
3401250a:	2b00      	cmp	r3, #0
3401250c:	d003      	beq.n	34012516 <RCCEx_GetLPUARTCLKFreq+0xca>
3401250e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012512:	d009      	beq.n	34012528 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
34012514:	e023      	b.n	3401255e <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012516:	f7fe fa47 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
3401251a:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3401251c:	68fa      	ldr	r2, [r7, #12]
3401251e:	68bb      	ldr	r3, [r7, #8]
34012520:	fbb2 f3f3 	udiv	r3, r2, r3
34012524:	60fb      	str	r3, [r7, #12]
            break;
34012526:	e01b      	b.n	34012560 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012528:	f7fe fa84 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
3401252c:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3401252e:	68fa      	ldr	r2, [r7, #12]
34012530:	68bb      	ldr	r3, [r7, #8]
34012532:	fbb2 f3f3 	udiv	r3, r2, r3
34012536:	60fb      	str	r3, [r7, #12]
            break;
34012538:	e012      	b.n	34012560 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401253a:	f7fe fac1 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
3401253e:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012540:	68fa      	ldr	r2, [r7, #12]
34012542:	68bb      	ldr	r3, [r7, #8]
34012544:	fbb2 f3f3 	udiv	r3, r2, r3
34012548:	60fb      	str	r3, [r7, #12]
            break;
3401254a:	e009      	b.n	34012560 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401254c:	f7fe fafe 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34012550:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012552:	68fa      	ldr	r2, [r7, #12]
34012554:	68bb      	ldr	r3, [r7, #8]
34012556:	fbb2 f3f3 	udiv	r3, r2, r3
3401255a:	60fb      	str	r3, [r7, #12]
            break;
3401255c:	e000      	b.n	34012560 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
3401255e:	bf00      	nop
      break;
34012560:	e063      	b.n	3401262a <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34012562:	f7f6 ff63 	bl	3400942c <LL_RCC_IC14_IsEnabled>
34012566:	4603      	mov	r3, r0
34012568:	2b00      	cmp	r3, #0
3401256a:	d060      	beq.n	3401262e <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
3401256c:	f7f6 ff80 	bl	34009470 <LL_RCC_IC14_GetDivider>
34012570:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34012572:	f7f6 ff6f 	bl	34009454 <LL_RCC_IC14_GetSource>
34012576:	4603      	mov	r3, r0
34012578:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401257c:	d029      	beq.n	340125d2 <RCCEx_GetLPUARTCLKFreq+0x186>
3401257e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012582:	d82f      	bhi.n	340125e4 <RCCEx_GetLPUARTCLKFreq+0x198>
34012584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012588:	d01a      	beq.n	340125c0 <RCCEx_GetLPUARTCLKFreq+0x174>
3401258a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401258e:	d829      	bhi.n	340125e4 <RCCEx_GetLPUARTCLKFreq+0x198>
34012590:	2b00      	cmp	r3, #0
34012592:	d003      	beq.n	3401259c <RCCEx_GetLPUARTCLKFreq+0x150>
34012594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012598:	d009      	beq.n	340125ae <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
3401259a:	e023      	b.n	340125e4 <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401259c:	f7fe fa04 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340125a0:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340125a2:	68fa      	ldr	r2, [r7, #12]
340125a4:	68bb      	ldr	r3, [r7, #8]
340125a6:	fbb2 f3f3 	udiv	r3, r2, r3
340125aa:	60fb      	str	r3, [r7, #12]
            break;
340125ac:	e01b      	b.n	340125e6 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340125ae:	f7fe fa41 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
340125b2:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340125b4:	68fa      	ldr	r2, [r7, #12]
340125b6:	68bb      	ldr	r3, [r7, #8]
340125b8:	fbb2 f3f3 	udiv	r3, r2, r3
340125bc:	60fb      	str	r3, [r7, #12]
            break;
340125be:	e012      	b.n	340125e6 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340125c0:	f7fe fa7e 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
340125c4:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340125c6:	68fa      	ldr	r2, [r7, #12]
340125c8:	68bb      	ldr	r3, [r7, #8]
340125ca:	fbb2 f3f3 	udiv	r3, r2, r3
340125ce:	60fb      	str	r3, [r7, #12]
            break;
340125d0:	e009      	b.n	340125e6 <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340125d2:	f7fe fabb 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
340125d6:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340125d8:	68fa      	ldr	r2, [r7, #12]
340125da:	68bb      	ldr	r3, [r7, #8]
340125dc:	fbb2 f3f3 	udiv	r3, r2, r3
340125e0:	60fb      	str	r3, [r7, #12]
            break;
340125e2:	e000      	b.n	340125e6 <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
340125e4:	bf00      	nop
      break;
340125e6:	e022      	b.n	3401262e <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
340125e8:	f7f5 fdfc 	bl	340081e4 <LL_RCC_HSI_IsReady>
340125ec:	4603      	mov	r3, r0
340125ee:	2b00      	cmp	r3, #0
340125f0:	d01f      	beq.n	34012632 <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340125f2:	f7f5 fe09 	bl	34008208 <LL_RCC_HSI_GetDivider>
340125f6:	4603      	mov	r3, r0
340125f8:	09db      	lsrs	r3, r3, #7
340125fa:	4a13      	ldr	r2, [pc, #76]	@ (34012648 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
340125fc:	fa22 f303 	lsr.w	r3, r2, r3
34012600:	60fb      	str	r3, [r7, #12]
      break;
34012602:	e016      	b.n	34012632 <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
34012604:	f7f5 fe0e 	bl	34008224 <LL_RCC_MSI_IsReady>
34012608:	4603      	mov	r3, r0
3401260a:	2b00      	cmp	r3, #0
3401260c:	d013      	beq.n	34012636 <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
3401260e:	4b0f      	ldr	r3, [pc, #60]	@ (3401264c <RCCEx_GetLPUARTCLKFreq+0x200>)
34012610:	60fb      	str	r3, [r7, #12]
      break;
34012612:	e010      	b.n	34012636 <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
34012614:	f7f5 fe26 	bl	34008264 <LL_RCC_LSE_IsReady>
34012618:	4603      	mov	r3, r0
3401261a:	2b00      	cmp	r3, #0
3401261c:	d00d      	beq.n	3401263a <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
3401261e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34012622:	60fb      	str	r3, [r7, #12]
      break;
34012624:	e009      	b.n	3401263a <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
34012626:	bf00      	nop
34012628:	e008      	b.n	3401263c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401262a:	bf00      	nop
3401262c:	e006      	b.n	3401263c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401262e:	bf00      	nop
34012630:	e004      	b.n	3401263c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34012632:	bf00      	nop
34012634:	e002      	b.n	3401263c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34012636:	bf00      	nop
34012638:	e000      	b.n	3401263c <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401263a:	bf00      	nop
  }

  return lpuart_frequency;
3401263c:	68fb      	ldr	r3, [r7, #12]
}
3401263e:	4618      	mov	r0, r3
34012640:	3710      	adds	r7, #16
34012642:	46bd      	mov	sp, r7
34012644:	bd80      	pop	{r7, pc}
34012646:	bf00      	nop
34012648:	03d09000 	.word	0x03d09000
3401264c:	003d0900 	.word	0x003d0900

34012650 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
34012650:	b580      	push	{r7, lr}
34012652:	b084      	sub	sp, #16
34012654:	af00      	add	r7, sp, #0
34012656:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
34012658:	2300      	movs	r3, #0
3401265a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3401265c:	6878      	ldr	r0, [r7, #4]
3401265e:	f7f6 f93d 	bl	340088dc <LL_RCC_GetLTDCClockSource>
34012662:	4603      	mov	r3, r0
34012664:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34012668:	d062      	beq.n	34012730 <RCCEx_GetLTDCCLKFreq+0xe0>
3401266a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3401266e:	d86d      	bhi.n	3401274c <RCCEx_GetLTDCCLKFreq+0xfc>
34012670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34012674:	d019      	beq.n	340126aa <RCCEx_GetLTDCCLKFreq+0x5a>
34012676:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401267a:	d867      	bhi.n	3401274c <RCCEx_GetLTDCCLKFreq+0xfc>
3401267c:	2b00      	cmp	r3, #0
3401267e:	d003      	beq.n	34012688 <RCCEx_GetLTDCCLKFreq+0x38>
34012680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34012684:	d00c      	beq.n	340126a0 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34012686:	e061      	b.n	3401274c <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34012688:	f7f5 f9ae 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
3401268c:	4603      	mov	r3, r0
3401268e:	4618      	mov	r0, r3
34012690:	f7fe faa2 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34012694:	4603      	mov	r3, r0
34012696:	4618      	mov	r0, r3
34012698:	f7fe fae1 	bl	34010c5e <RCCEx_GetPCLK5Freq>
3401269c:	60f8      	str	r0, [r7, #12]
      break;
3401269e:	e05a      	b.n	34012756 <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340126a0:	2007      	movs	r0, #7
340126a2:	f7fe fd85 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
340126a6:	60f8      	str	r0, [r7, #12]
      break;
340126a8:	e055      	b.n	34012756 <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
340126aa:	f7f6 ff3f 	bl	3400952c <LL_RCC_IC16_IsEnabled>
340126ae:	4603      	mov	r3, r0
340126b0:	2b00      	cmp	r3, #0
340126b2:	d04d      	beq.n	34012750 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
340126b4:	f7f6 ff5c 	bl	34009570 <LL_RCC_IC16_GetDivider>
340126b8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
340126ba:	f7f6 ff4b 	bl	34009554 <LL_RCC_IC16_GetSource>
340126be:	4603      	mov	r3, r0
340126c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340126c4:	d029      	beq.n	3401271a <RCCEx_GetLTDCCLKFreq+0xca>
340126c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340126ca:	d82f      	bhi.n	3401272c <RCCEx_GetLTDCCLKFreq+0xdc>
340126cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340126d0:	d01a      	beq.n	34012708 <RCCEx_GetLTDCCLKFreq+0xb8>
340126d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340126d6:	d829      	bhi.n	3401272c <RCCEx_GetLTDCCLKFreq+0xdc>
340126d8:	2b00      	cmp	r3, #0
340126da:	d003      	beq.n	340126e4 <RCCEx_GetLTDCCLKFreq+0x94>
340126dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340126e0:	d009      	beq.n	340126f6 <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
340126e2:	e023      	b.n	3401272c <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340126e4:	f7fe f960 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340126e8:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
340126ea:	68fa      	ldr	r2, [r7, #12]
340126ec:	68bb      	ldr	r3, [r7, #8]
340126ee:	fbb2 f3f3 	udiv	r3, r2, r3
340126f2:	60fb      	str	r3, [r7, #12]
            break;
340126f4:	e01b      	b.n	3401272e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340126f6:	f7fe f99d 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
340126fa:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
340126fc:	68fa      	ldr	r2, [r7, #12]
340126fe:	68bb      	ldr	r3, [r7, #8]
34012700:	fbb2 f3f3 	udiv	r3, r2, r3
34012704:	60fb      	str	r3, [r7, #12]
            break;
34012706:	e012      	b.n	3401272e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012708:	f7fe f9da 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
3401270c:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3401270e:	68fa      	ldr	r2, [r7, #12]
34012710:	68bb      	ldr	r3, [r7, #8]
34012712:	fbb2 f3f3 	udiv	r3, r2, r3
34012716:	60fb      	str	r3, [r7, #12]
            break;
34012718:	e009      	b.n	3401272e <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401271a:	f7fe fa17 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
3401271e:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34012720:	68fa      	ldr	r2, [r7, #12]
34012722:	68bb      	ldr	r3, [r7, #8]
34012724:	fbb2 f3f3 	udiv	r3, r2, r3
34012728:	60fb      	str	r3, [r7, #12]
            break;
3401272a:	e000      	b.n	3401272e <RCCEx_GetLTDCCLKFreq+0xde>
            break;
3401272c:	bf00      	nop
      break;
3401272e:	e00f      	b.n	34012750 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34012730:	f7f5 fd58 	bl	340081e4 <LL_RCC_HSI_IsReady>
34012734:	4603      	mov	r3, r0
34012736:	2b00      	cmp	r3, #0
34012738:	d00c      	beq.n	34012754 <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401273a:	f7f5 fd65 	bl	34008208 <LL_RCC_HSI_GetDivider>
3401273e:	4603      	mov	r3, r0
34012740:	09db      	lsrs	r3, r3, #7
34012742:	4a07      	ldr	r2, [pc, #28]	@ (34012760 <RCCEx_GetLTDCCLKFreq+0x110>)
34012744:	fa22 f303 	lsr.w	r3, r2, r3
34012748:	60fb      	str	r3, [r7, #12]
      break;
3401274a:	e003      	b.n	34012754 <RCCEx_GetLTDCCLKFreq+0x104>
      break;
3401274c:	bf00      	nop
3401274e:	e002      	b.n	34012756 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34012750:	bf00      	nop
34012752:	e000      	b.n	34012756 <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34012754:	bf00      	nop
  }

  return ltdc_frequency;
34012756:	68fb      	ldr	r3, [r7, #12]
}
34012758:	4618      	mov	r0, r3
3401275a:	3710      	adds	r7, #16
3401275c:	46bd      	mov	sp, r7
3401275e:	bd80      	pop	{r7, pc}
34012760:	03d09000 	.word	0x03d09000

34012764 <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
34012764:	b590      	push	{r4, r7, lr}
34012766:	b085      	sub	sp, #20
34012768:	af00      	add	r7, sp, #0
3401276a:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
3401276c:	2300      	movs	r3, #0
3401276e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34012770:	6878      	ldr	r0, [r7, #4]
34012772:	f7f6 f8c5 	bl	34008900 <LL_RCC_GetMDFClockSource>
34012776:	4603      	mov	r3, r0
34012778:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3401277c:	f000 80dd 	beq.w	3401293a <RCCEx_GetMDFCLKFreq+0x1d6>
34012780:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34012784:	f200 80e3 	bhi.w	3401294e <RCCEx_GetMDFCLKFreq+0x1ea>
34012788:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3401278c:	f000 80d2 	beq.w	34012934 <RCCEx_GetMDFCLKFreq+0x1d0>
34012790:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34012794:	f200 80db 	bhi.w	3401294e <RCCEx_GetMDFCLKFreq+0x1ea>
34012798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3401279c:	f000 80b4 	beq.w	34012908 <RCCEx_GetMDFCLKFreq+0x1a4>
340127a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340127a4:	f200 80d3 	bhi.w	3401294e <RCCEx_GetMDFCLKFreq+0x1ea>
340127a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340127ac:	f000 80ba 	beq.w	34012924 <RCCEx_GetMDFCLKFreq+0x1c0>
340127b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340127b4:	f200 80cb 	bhi.w	3401294e <RCCEx_GetMDFCLKFreq+0x1ea>
340127b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340127bc:	d061      	beq.n	34012882 <RCCEx_GetMDFCLKFreq+0x11e>
340127be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340127c2:	f200 80c4 	bhi.w	3401294e <RCCEx_GetMDFCLKFreq+0x1ea>
340127c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340127ca:	d016      	beq.n	340127fa <RCCEx_GetMDFCLKFreq+0x96>
340127cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340127d0:	f200 80bd 	bhi.w	3401294e <RCCEx_GetMDFCLKFreq+0x1ea>
340127d4:	2b00      	cmp	r3, #0
340127d6:	d003      	beq.n	340127e0 <RCCEx_GetMDFCLKFreq+0x7c>
340127d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340127dc:	d008      	beq.n	340127f0 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
340127de:	e0b6      	b.n	3401294e <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340127e0:	f7f5 f902 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
340127e4:	4603      	mov	r3, r0
340127e6:	4618      	mov	r0, r3
340127e8:	f7fe f9f6 	bl	34010bd8 <RCCEx_GetHCLKFreq>
340127ec:	60f8      	str	r0, [r7, #12]
      break;
340127ee:	e0b7      	b.n	34012960 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340127f0:	2007      	movs	r0, #7
340127f2:	f7fe fcdd 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
340127f6:	60f8      	str	r0, [r7, #12]
      break;
340127f8:	e0b2      	b.n	34012960 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
340127fa:	f7f6 fc97 	bl	3400912c <LL_RCC_IC7_IsEnabled>
340127fe:	4603      	mov	r3, r0
34012800:	2b00      	cmp	r3, #0
34012802:	f000 80a6 	beq.w	34012952 <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
34012806:	f7f6 fcb3 	bl	34009170 <LL_RCC_IC7_GetDivider>
3401280a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3401280c:	f7f6 fca2 	bl	34009154 <LL_RCC_IC7_GetSource>
34012810:	4603      	mov	r3, r0
34012812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012816:	d029      	beq.n	3401286c <RCCEx_GetMDFCLKFreq+0x108>
34012818:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401281c:	d82f      	bhi.n	3401287e <RCCEx_GetMDFCLKFreq+0x11a>
3401281e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012822:	d01a      	beq.n	3401285a <RCCEx_GetMDFCLKFreq+0xf6>
34012824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012828:	d829      	bhi.n	3401287e <RCCEx_GetMDFCLKFreq+0x11a>
3401282a:	2b00      	cmp	r3, #0
3401282c:	d003      	beq.n	34012836 <RCCEx_GetMDFCLKFreq+0xd2>
3401282e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012832:	d009      	beq.n	34012848 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
34012834:	e023      	b.n	3401287e <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012836:	f7fe f8b7 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
3401283a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401283c:	68fa      	ldr	r2, [r7, #12]
3401283e:	68bb      	ldr	r3, [r7, #8]
34012840:	fbb2 f3f3 	udiv	r3, r2, r3
34012844:	60fb      	str	r3, [r7, #12]
            break;
34012846:	e01b      	b.n	34012880 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012848:	f7fe f8f4 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
3401284c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401284e:	68fa      	ldr	r2, [r7, #12]
34012850:	68bb      	ldr	r3, [r7, #8]
34012852:	fbb2 f3f3 	udiv	r3, r2, r3
34012856:	60fb      	str	r3, [r7, #12]
            break;
34012858:	e012      	b.n	34012880 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401285a:	f7fe f931 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
3401285e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012860:	68fa      	ldr	r2, [r7, #12]
34012862:	68bb      	ldr	r3, [r7, #8]
34012864:	fbb2 f3f3 	udiv	r3, r2, r3
34012868:	60fb      	str	r3, [r7, #12]
            break;
3401286a:	e009      	b.n	34012880 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401286c:	f7fe f96e 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34012870:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012872:	68fa      	ldr	r2, [r7, #12]
34012874:	68bb      	ldr	r3, [r7, #8]
34012876:	fbb2 f3f3 	udiv	r3, r2, r3
3401287a:	60fb      	str	r3, [r7, #12]
            break;
3401287c:	e000      	b.n	34012880 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
3401287e:	bf00      	nop
      break;
34012880:	e067      	b.n	34012952 <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34012882:	f7f6 fc93 	bl	340091ac <LL_RCC_IC8_IsEnabled>
34012886:	4603      	mov	r3, r0
34012888:	2b00      	cmp	r3, #0
3401288a:	d064      	beq.n	34012956 <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
3401288c:	f7f6 fcb0 	bl	340091f0 <LL_RCC_IC8_GetDivider>
34012890:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34012892:	f7f6 fc9f 	bl	340091d4 <LL_RCC_IC8_GetSource>
34012896:	4603      	mov	r3, r0
34012898:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401289c:	d029      	beq.n	340128f2 <RCCEx_GetMDFCLKFreq+0x18e>
3401289e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340128a2:	d82f      	bhi.n	34012904 <RCCEx_GetMDFCLKFreq+0x1a0>
340128a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340128a8:	d01a      	beq.n	340128e0 <RCCEx_GetMDFCLKFreq+0x17c>
340128aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340128ae:	d829      	bhi.n	34012904 <RCCEx_GetMDFCLKFreq+0x1a0>
340128b0:	2b00      	cmp	r3, #0
340128b2:	d003      	beq.n	340128bc <RCCEx_GetMDFCLKFreq+0x158>
340128b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340128b8:	d009      	beq.n	340128ce <RCCEx_GetMDFCLKFreq+0x16a>
            break;
340128ba:	e023      	b.n	34012904 <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340128bc:	f7fe f874 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340128c0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340128c2:	68fa      	ldr	r2, [r7, #12]
340128c4:	68bb      	ldr	r3, [r7, #8]
340128c6:	fbb2 f3f3 	udiv	r3, r2, r3
340128ca:	60fb      	str	r3, [r7, #12]
            break;
340128cc:	e01b      	b.n	34012906 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340128ce:	f7fe f8b1 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
340128d2:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340128d4:	68fa      	ldr	r2, [r7, #12]
340128d6:	68bb      	ldr	r3, [r7, #8]
340128d8:	fbb2 f3f3 	udiv	r3, r2, r3
340128dc:	60fb      	str	r3, [r7, #12]
            break;
340128de:	e012      	b.n	34012906 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340128e0:	f7fe f8ee 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
340128e4:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340128e6:	68fa      	ldr	r2, [r7, #12]
340128e8:	68bb      	ldr	r3, [r7, #8]
340128ea:	fbb2 f3f3 	udiv	r3, r2, r3
340128ee:	60fb      	str	r3, [r7, #12]
            break;
340128f0:	e009      	b.n	34012906 <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340128f2:	f7fe f92b 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
340128f6:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340128f8:	68fa      	ldr	r2, [r7, #12]
340128fa:	68bb      	ldr	r3, [r7, #8]
340128fc:	fbb2 f3f3 	udiv	r3, r2, r3
34012900:	60fb      	str	r3, [r7, #12]
            break;
34012902:	e000      	b.n	34012906 <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
34012904:	bf00      	nop
      break;
34012906:	e026      	b.n	34012956 <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
34012908:	f7f5 fc6c 	bl	340081e4 <LL_RCC_HSI_IsReady>
3401290c:	4603      	mov	r3, r0
3401290e:	2b00      	cmp	r3, #0
34012910:	d023      	beq.n	3401295a <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012912:	f7f5 fc79 	bl	34008208 <LL_RCC_HSI_GetDivider>
34012916:	4603      	mov	r3, r0
34012918:	09db      	lsrs	r3, r3, #7
3401291a:	4a14      	ldr	r2, [pc, #80]	@ (3401296c <RCCEx_GetMDFCLKFreq+0x208>)
3401291c:	fa22 f303 	lsr.w	r3, r2, r3
34012920:	60fb      	str	r3, [r7, #12]
      break;
34012922:	e01a      	b.n	3401295a <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
34012924:	f7f5 fc7e 	bl	34008224 <LL_RCC_MSI_IsReady>
34012928:	4603      	mov	r3, r0
3401292a:	2b00      	cmp	r3, #0
3401292c:	d017      	beq.n	3401295e <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
3401292e:	4b10      	ldr	r3, [pc, #64]	@ (34012970 <RCCEx_GetMDFCLKFreq+0x20c>)
34012930:	60fb      	str	r3, [r7, #12]
      break;
34012932:	e014      	b.n	3401295e <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34012934:	4b0f      	ldr	r3, [pc, #60]	@ (34012974 <RCCEx_GetMDFCLKFreq+0x210>)
34012936:	60fb      	str	r3, [r7, #12]
      break;
34012938:	e012      	b.n	34012960 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3401293a:	f7f5 f855 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
3401293e:	4604      	mov	r4, r0
34012940:	f7f6 f8b8 	bl	34008ab4 <LL_RCC_GetTIMPrescaler>
34012944:	4603      	mov	r3, r0
34012946:	fa24 f303 	lsr.w	r3, r4, r3
3401294a:	60fb      	str	r3, [r7, #12]
      break;
3401294c:	e008      	b.n	34012960 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3401294e:	bf00      	nop
34012950:	e006      	b.n	34012960 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012952:	bf00      	nop
34012954:	e004      	b.n	34012960 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012956:	bf00      	nop
34012958:	e002      	b.n	34012960 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3401295a:	bf00      	nop
3401295c:	e000      	b.n	34012960 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3401295e:	bf00      	nop
  }

  return adf_frequency;
34012960:	68fb      	ldr	r3, [r7, #12]
}
34012962:	4618      	mov	r0, r3
34012964:	3714      	adds	r7, #20
34012966:	46bd      	mov	sp, r7
34012968:	bd90      	pop	{r4, r7, pc}
3401296a:	bf00      	nop
3401296c:	03d09000 	.word	0x03d09000
34012970:	003d0900 	.word	0x003d0900
34012974:	00bb8000 	.word	0x00bb8000

34012978 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
34012978:	b580      	push	{r7, lr}
3401297a:	b084      	sub	sp, #16
3401297c:	af00      	add	r7, sp, #0
3401297e:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
34012980:	2300      	movs	r3, #0
34012982:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34012984:	6878      	ldr	r0, [r7, #4]
34012986:	f7f5 ffcd 	bl	34008924 <LL_RCC_GetPSSIClockSource>
3401298a:	4603      	mov	r3, r0
3401298c:	2b30      	cmp	r3, #48	@ 0x30
3401298e:	d05a      	beq.n	34012a46 <RCCEx_GetPSSICLKFreq+0xce>
34012990:	2b30      	cmp	r3, #48	@ 0x30
34012992:	d866      	bhi.n	34012a62 <RCCEx_GetPSSICLKFreq+0xea>
34012994:	2b20      	cmp	r3, #32
34012996:	d013      	beq.n	340129c0 <RCCEx_GetPSSICLKFreq+0x48>
34012998:	2b20      	cmp	r3, #32
3401299a:	d862      	bhi.n	34012a62 <RCCEx_GetPSSICLKFreq+0xea>
3401299c:	2b00      	cmp	r3, #0
3401299e:	d002      	beq.n	340129a6 <RCCEx_GetPSSICLKFreq+0x2e>
340129a0:	2b10      	cmp	r3, #16
340129a2:	d008      	beq.n	340129b6 <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
340129a4:	e05d      	b.n	34012a62 <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340129a6:	f7f5 f81f 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
340129aa:	4603      	mov	r3, r0
340129ac:	4618      	mov	r0, r3
340129ae:	f7fe f913 	bl	34010bd8 <RCCEx_GetHCLKFreq>
340129b2:	60f8      	str	r0, [r7, #12]
      break;
340129b4:	e05a      	b.n	34012a6c <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340129b6:	2007      	movs	r0, #7
340129b8:	f7fe fbfa 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
340129bc:	60f8      	str	r0, [r7, #12]
      break;
340129be:	e055      	b.n	34012a6c <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
340129c0:	f7f6 feb4 	bl	3400972c <LL_RCC_IC20_IsEnabled>
340129c4:	4603      	mov	r3, r0
340129c6:	2b00      	cmp	r3, #0
340129c8:	d04d      	beq.n	34012a66 <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
340129ca:	f7f6 fed1 	bl	34009770 <LL_RCC_IC20_GetDivider>
340129ce:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
340129d0:	f7f6 fec0 	bl	34009754 <LL_RCC_IC20_GetSource>
340129d4:	4603      	mov	r3, r0
340129d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340129da:	d029      	beq.n	34012a30 <RCCEx_GetPSSICLKFreq+0xb8>
340129dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340129e0:	d82f      	bhi.n	34012a42 <RCCEx_GetPSSICLKFreq+0xca>
340129e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340129e6:	d01a      	beq.n	34012a1e <RCCEx_GetPSSICLKFreq+0xa6>
340129e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340129ec:	d829      	bhi.n	34012a42 <RCCEx_GetPSSICLKFreq+0xca>
340129ee:	2b00      	cmp	r3, #0
340129f0:	d003      	beq.n	340129fa <RCCEx_GetPSSICLKFreq+0x82>
340129f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340129f6:	d009      	beq.n	34012a0c <RCCEx_GetPSSICLKFreq+0x94>
            break;
340129f8:	e023      	b.n	34012a42 <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340129fa:	f7fd ffd5 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340129fe:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012a00:	68fa      	ldr	r2, [r7, #12]
34012a02:	68bb      	ldr	r3, [r7, #8]
34012a04:	fbb2 f3f3 	udiv	r3, r2, r3
34012a08:	60fb      	str	r3, [r7, #12]
            break;
34012a0a:	e01b      	b.n	34012a44 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012a0c:	f7fe f812 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34012a10:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012a12:	68fa      	ldr	r2, [r7, #12]
34012a14:	68bb      	ldr	r3, [r7, #8]
34012a16:	fbb2 f3f3 	udiv	r3, r2, r3
34012a1a:	60fb      	str	r3, [r7, #12]
            break;
34012a1c:	e012      	b.n	34012a44 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012a1e:	f7fe f84f 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34012a22:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012a24:	68fa      	ldr	r2, [r7, #12]
34012a26:	68bb      	ldr	r3, [r7, #8]
34012a28:	fbb2 f3f3 	udiv	r3, r2, r3
34012a2c:	60fb      	str	r3, [r7, #12]
            break;
34012a2e:	e009      	b.n	34012a44 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012a30:	f7fe f88c 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34012a34:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012a36:	68fa      	ldr	r2, [r7, #12]
34012a38:	68bb      	ldr	r3, [r7, #8]
34012a3a:	fbb2 f3f3 	udiv	r3, r2, r3
34012a3e:	60fb      	str	r3, [r7, #12]
            break;
34012a40:	e000      	b.n	34012a44 <RCCEx_GetPSSICLKFreq+0xcc>
            break;
34012a42:	bf00      	nop
      break;
34012a44:	e00f      	b.n	34012a66 <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
34012a46:	f7f5 fbcd 	bl	340081e4 <LL_RCC_HSI_IsReady>
34012a4a:	4603      	mov	r3, r0
34012a4c:	2b00      	cmp	r3, #0
34012a4e:	d00c      	beq.n	34012a6a <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012a50:	f7f5 fbda 	bl	34008208 <LL_RCC_HSI_GetDivider>
34012a54:	4603      	mov	r3, r0
34012a56:	09db      	lsrs	r3, r3, #7
34012a58:	4a07      	ldr	r2, [pc, #28]	@ (34012a78 <RCCEx_GetPSSICLKFreq+0x100>)
34012a5a:	fa22 f303 	lsr.w	r3, r2, r3
34012a5e:	60fb      	str	r3, [r7, #12]
      break;
34012a60:	e003      	b.n	34012a6a <RCCEx_GetPSSICLKFreq+0xf2>
      break;
34012a62:	bf00      	nop
34012a64:	e002      	b.n	34012a6c <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34012a66:	bf00      	nop
34012a68:	e000      	b.n	34012a6c <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34012a6a:	bf00      	nop
  }

  return pssi_frequency;
34012a6c:	68fb      	ldr	r3, [r7, #12]
}
34012a6e:	4618      	mov	r0, r3
34012a70:	3710      	adds	r7, #16
34012a72:	46bd      	mov	sp, r7
34012a74:	bd80      	pop	{r7, pc}
34012a76:	bf00      	nop
34012a78:	03d09000 	.word	0x03d09000

34012a7c <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
34012a7c:	b580      	push	{r7, lr}
34012a7e:	b082      	sub	sp, #8
34012a80:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
34012a82:	2300      	movs	r3, #0
34012a84:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
34012a86:	f7f5 ffdb 	bl	34008a40 <LL_RCC_GetRTCClockSource>
34012a8a:	4603      	mov	r3, r0
34012a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34012a90:	d020      	beq.n	34012ad4 <RCCEx_GetRTCCLKFreq+0x58>
34012a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34012a96:	d830      	bhi.n	34012afa <RCCEx_GetRTCCLKFreq+0x7e>
34012a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34012a9c:	d011      	beq.n	34012ac2 <RCCEx_GetRTCCLKFreq+0x46>
34012a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34012aa2:	d82a      	bhi.n	34012afa <RCCEx_GetRTCCLKFreq+0x7e>
34012aa4:	2b00      	cmp	r3, #0
34012aa6:	d02a      	beq.n	34012afe <RCCEx_GetRTCCLKFreq+0x82>
34012aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34012aac:	d000      	beq.n	34012ab0 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
34012aae:	e024      	b.n	34012afa <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
34012ab0:	f7f5 fbd8 	bl	34008264 <LL_RCC_LSE_IsReady>
34012ab4:	4603      	mov	r3, r0
34012ab6:	2b00      	cmp	r3, #0
34012ab8:	d023      	beq.n	34012b02 <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
34012aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34012abe:	607b      	str	r3, [r7, #4]
      break;
34012ac0:	e01f      	b.n	34012b02 <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
34012ac2:	f7f5 fbe1 	bl	34008288 <LL_RCC_LSI_IsReady>
34012ac6:	4603      	mov	r3, r0
34012ac8:	2b00      	cmp	r3, #0
34012aca:	d01c      	beq.n	34012b06 <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
34012acc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34012ad0:	607b      	str	r3, [r7, #4]
      break;
34012ad2:	e018      	b.n	34012b06 <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
34012ad4:	f7f5 fb74 	bl	340081c0 <LL_RCC_HSE_IsReady>
34012ad8:	4603      	mov	r3, r0
34012ada:	2b00      	cmp	r3, #0
34012adc:	d015      	beq.n	34012b0a <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34012ade:	4b0e      	ldr	r3, [pc, #56]	@ (34012b18 <RCCEx_GetRTCCLKFreq+0x9c>)
34012ae0:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34012ae4:	0b1b      	lsrs	r3, r3, #12
34012ae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34012aea:	3301      	adds	r3, #1
34012aec:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
34012aee:	4a0b      	ldr	r2, [pc, #44]	@ (34012b1c <RCCEx_GetRTCCLKFreq+0xa0>)
34012af0:	683b      	ldr	r3, [r7, #0]
34012af2:	fbb2 f3f3 	udiv	r3, r2, r3
34012af6:	607b      	str	r3, [r7, #4]
      break;
34012af8:	e007      	b.n	34012b0a <RCCEx_GetRTCCLKFreq+0x8e>
      break;
34012afa:	bf00      	nop
34012afc:	e006      	b.n	34012b0c <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012afe:	bf00      	nop
34012b00:	e004      	b.n	34012b0c <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012b02:	bf00      	nop
34012b04:	e002      	b.n	34012b0c <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012b06:	bf00      	nop
34012b08:	e000      	b.n	34012b0c <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012b0a:	bf00      	nop
  }

  return rtc_frequency;
34012b0c:	687b      	ldr	r3, [r7, #4]
}
34012b0e:	4618      	mov	r0, r3
34012b10:	3708      	adds	r7, #8
34012b12:	46bd      	mov	sp, r7
34012b14:	bd80      	pop	{r7, pc}
34012b16:	bf00      	nop
34012b18:	56028000 	.word	0x56028000
34012b1c:	02dc6c00 	.word	0x02dc6c00

34012b20 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
34012b20:	b580      	push	{r7, lr}
34012b22:	b084      	sub	sp, #16
34012b24:	af00      	add	r7, sp, #0
34012b26:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34012b28:	2300      	movs	r3, #0
34012b2a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34012b2c:	6878      	ldr	r0, [r7, #4]
34012b2e:	f7f5 ff0b 	bl	34008948 <LL_RCC_GetSAIClockSource>
34012b32:	4603      	mov	r3, r0
34012b34:	4a9a      	ldr	r2, [pc, #616]	@ (34012da0 <RCCEx_GetSAICLKFreq+0x280>)
34012b36:	4293      	cmp	r3, r2
34012b38:	f000 811f 	beq.w	34012d7a <RCCEx_GetSAICLKFreq+0x25a>
34012b3c:	4a98      	ldr	r2, [pc, #608]	@ (34012da0 <RCCEx_GetSAICLKFreq+0x280>)
34012b3e:	4293      	cmp	r3, r2
34012b40:	f200 8120 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012b44:	4a97      	ldr	r2, [pc, #604]	@ (34012da4 <RCCEx_GetSAICLKFreq+0x284>)
34012b46:	4293      	cmp	r3, r2
34012b48:	f000 8117 	beq.w	34012d7a <RCCEx_GetSAICLKFreq+0x25a>
34012b4c:	4a95      	ldr	r2, [pc, #596]	@ (34012da4 <RCCEx_GetSAICLKFreq+0x284>)
34012b4e:	4293      	cmp	r3, r2
34012b50:	f200 8118 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012b54:	4a94      	ldr	r2, [pc, #592]	@ (34012da8 <RCCEx_GetSAICLKFreq+0x288>)
34012b56:	4293      	cmp	r3, r2
34012b58:	f000 810c 	beq.w	34012d74 <RCCEx_GetSAICLKFreq+0x254>
34012b5c:	4a92      	ldr	r2, [pc, #584]	@ (34012da8 <RCCEx_GetSAICLKFreq+0x288>)
34012b5e:	4293      	cmp	r3, r2
34012b60:	f200 8110 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012b64:	4a91      	ldr	r2, [pc, #580]	@ (34012dac <RCCEx_GetSAICLKFreq+0x28c>)
34012b66:	4293      	cmp	r3, r2
34012b68:	f000 8104 	beq.w	34012d74 <RCCEx_GetSAICLKFreq+0x254>
34012b6c:	4a8f      	ldr	r2, [pc, #572]	@ (34012dac <RCCEx_GetSAICLKFreq+0x28c>)
34012b6e:	4293      	cmp	r3, r2
34012b70:	f200 8108 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012b74:	4a8e      	ldr	r2, [pc, #568]	@ (34012db0 <RCCEx_GetSAICLKFreq+0x290>)
34012b76:	4293      	cmp	r3, r2
34012b78:	f000 80e6 	beq.w	34012d48 <RCCEx_GetSAICLKFreq+0x228>
34012b7c:	4a8c      	ldr	r2, [pc, #560]	@ (34012db0 <RCCEx_GetSAICLKFreq+0x290>)
34012b7e:	4293      	cmp	r3, r2
34012b80:	f200 8100 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012b84:	4a8b      	ldr	r2, [pc, #556]	@ (34012db4 <RCCEx_GetSAICLKFreq+0x294>)
34012b86:	4293      	cmp	r3, r2
34012b88:	f000 80de 	beq.w	34012d48 <RCCEx_GetSAICLKFreq+0x228>
34012b8c:	4a89      	ldr	r2, [pc, #548]	@ (34012db4 <RCCEx_GetSAICLKFreq+0x294>)
34012b8e:	4293      	cmp	r3, r2
34012b90:	f200 80f8 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012b94:	4a88      	ldr	r2, [pc, #544]	@ (34012db8 <RCCEx_GetSAICLKFreq+0x298>)
34012b96:	4293      	cmp	r3, r2
34012b98:	f000 80e4 	beq.w	34012d64 <RCCEx_GetSAICLKFreq+0x244>
34012b9c:	4a86      	ldr	r2, [pc, #536]	@ (34012db8 <RCCEx_GetSAICLKFreq+0x298>)
34012b9e:	4293      	cmp	r3, r2
34012ba0:	f200 80f0 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012ba4:	4a85      	ldr	r2, [pc, #532]	@ (34012dbc <RCCEx_GetSAICLKFreq+0x29c>)
34012ba6:	4293      	cmp	r3, r2
34012ba8:	f000 80dc 	beq.w	34012d64 <RCCEx_GetSAICLKFreq+0x244>
34012bac:	4a83      	ldr	r2, [pc, #524]	@ (34012dbc <RCCEx_GetSAICLKFreq+0x29c>)
34012bae:	4293      	cmp	r3, r2
34012bb0:	f200 80e8 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012bb4:	4a82      	ldr	r2, [pc, #520]	@ (34012dc0 <RCCEx_GetSAICLKFreq+0x2a0>)
34012bb6:	4293      	cmp	r3, r2
34012bb8:	f000 8083 	beq.w	34012cc2 <RCCEx_GetSAICLKFreq+0x1a2>
34012bbc:	4a80      	ldr	r2, [pc, #512]	@ (34012dc0 <RCCEx_GetSAICLKFreq+0x2a0>)
34012bbe:	4293      	cmp	r3, r2
34012bc0:	f200 80e0 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012bc4:	4a7f      	ldr	r2, [pc, #508]	@ (34012dc4 <RCCEx_GetSAICLKFreq+0x2a4>)
34012bc6:	4293      	cmp	r3, r2
34012bc8:	d07b      	beq.n	34012cc2 <RCCEx_GetSAICLKFreq+0x1a2>
34012bca:	4a7e      	ldr	r2, [pc, #504]	@ (34012dc4 <RCCEx_GetSAICLKFreq+0x2a4>)
34012bcc:	4293      	cmp	r3, r2
34012bce:	f200 80d9 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012bd2:	4a7d      	ldr	r2, [pc, #500]	@ (34012dc8 <RCCEx_GetSAICLKFreq+0x2a8>)
34012bd4:	4293      	cmp	r3, r2
34012bd6:	d030      	beq.n	34012c3a <RCCEx_GetSAICLKFreq+0x11a>
34012bd8:	4a7b      	ldr	r2, [pc, #492]	@ (34012dc8 <RCCEx_GetSAICLKFreq+0x2a8>)
34012bda:	4293      	cmp	r3, r2
34012bdc:	f200 80d2 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012be0:	4a7a      	ldr	r2, [pc, #488]	@ (34012dcc <RCCEx_GetSAICLKFreq+0x2ac>)
34012be2:	4293      	cmp	r3, r2
34012be4:	d029      	beq.n	34012c3a <RCCEx_GetSAICLKFreq+0x11a>
34012be6:	4a79      	ldr	r2, [pc, #484]	@ (34012dcc <RCCEx_GetSAICLKFreq+0x2ac>)
34012be8:	4293      	cmp	r3, r2
34012bea:	f200 80cb 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012bee:	4a78      	ldr	r2, [pc, #480]	@ (34012dd0 <RCCEx_GetSAICLKFreq+0x2b0>)
34012bf0:	4293      	cmp	r3, r2
34012bf2:	d01d      	beq.n	34012c30 <RCCEx_GetSAICLKFreq+0x110>
34012bf4:	4a76      	ldr	r2, [pc, #472]	@ (34012dd0 <RCCEx_GetSAICLKFreq+0x2b0>)
34012bf6:	4293      	cmp	r3, r2
34012bf8:	f200 80c4 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012bfc:	4a75      	ldr	r2, [pc, #468]	@ (34012dd4 <RCCEx_GetSAICLKFreq+0x2b4>)
34012bfe:	4293      	cmp	r3, r2
34012c00:	d016      	beq.n	34012c30 <RCCEx_GetSAICLKFreq+0x110>
34012c02:	4a74      	ldr	r2, [pc, #464]	@ (34012dd4 <RCCEx_GetSAICLKFreq+0x2b4>)
34012c04:	4293      	cmp	r3, r2
34012c06:	f200 80bd 	bhi.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
34012c0a:	4a73      	ldr	r2, [pc, #460]	@ (34012dd8 <RCCEx_GetSAICLKFreq+0x2b8>)
34012c0c:	4293      	cmp	r3, r2
34012c0e:	d003      	beq.n	34012c18 <RCCEx_GetSAICLKFreq+0xf8>
34012c10:	4a72      	ldr	r2, [pc, #456]	@ (34012ddc <RCCEx_GetSAICLKFreq+0x2bc>)
34012c12:	4293      	cmp	r3, r2
34012c14:	f040 80b6 	bne.w	34012d84 <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34012c18:	f7f4 fee6 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34012c1c:	4603      	mov	r3, r0
34012c1e:	4618      	mov	r0, r3
34012c20:	f7fd ffda 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34012c24:	4603      	mov	r3, r0
34012c26:	4618      	mov	r0, r3
34012c28:	f7fd fff7 	bl	34010c1a <RCCEx_GetPCLK2Freq>
34012c2c:	60f8      	str	r0, [r7, #12]
      break;
34012c2e:	e0b2      	b.n	34012d96 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012c30:	2007      	movs	r0, #7
34012c32:	f7fe fabd 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
34012c36:	60f8      	str	r0, [r7, #12]
      break;
34012c38:	e0ad      	b.n	34012d96 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34012c3a:	f7f6 fa77 	bl	3400912c <LL_RCC_IC7_IsEnabled>
34012c3e:	4603      	mov	r3, r0
34012c40:	2b00      	cmp	r3, #0
34012c42:	f000 80a1 	beq.w	34012d88 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34012c46:	f7f6 fa93 	bl	34009170 <LL_RCC_IC7_GetDivider>
34012c4a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34012c4c:	f7f6 fa82 	bl	34009154 <LL_RCC_IC7_GetSource>
34012c50:	4603      	mov	r3, r0
34012c52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012c56:	d029      	beq.n	34012cac <RCCEx_GetSAICLKFreq+0x18c>
34012c58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012c5c:	d82f      	bhi.n	34012cbe <RCCEx_GetSAICLKFreq+0x19e>
34012c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012c62:	d01a      	beq.n	34012c9a <RCCEx_GetSAICLKFreq+0x17a>
34012c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012c68:	d829      	bhi.n	34012cbe <RCCEx_GetSAICLKFreq+0x19e>
34012c6a:	2b00      	cmp	r3, #0
34012c6c:	d003      	beq.n	34012c76 <RCCEx_GetSAICLKFreq+0x156>
34012c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012c72:	d009      	beq.n	34012c88 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012c74:	e023      	b.n	34012cbe <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012c76:	f7fd fe97 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34012c7a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012c7c:	68fa      	ldr	r2, [r7, #12]
34012c7e:	68bb      	ldr	r3, [r7, #8]
34012c80:	fbb2 f3f3 	udiv	r3, r2, r3
34012c84:	60fb      	str	r3, [r7, #12]
            break;
34012c86:	e01b      	b.n	34012cc0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012c88:	f7fd fed4 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34012c8c:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012c8e:	68fa      	ldr	r2, [r7, #12]
34012c90:	68bb      	ldr	r3, [r7, #8]
34012c92:	fbb2 f3f3 	udiv	r3, r2, r3
34012c96:	60fb      	str	r3, [r7, #12]
            break;
34012c98:	e012      	b.n	34012cc0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012c9a:	f7fd ff11 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34012c9e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012ca0:	68fa      	ldr	r2, [r7, #12]
34012ca2:	68bb      	ldr	r3, [r7, #8]
34012ca4:	fbb2 f3f3 	udiv	r3, r2, r3
34012ca8:	60fb      	str	r3, [r7, #12]
            break;
34012caa:	e009      	b.n	34012cc0 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012cac:	f7fd ff4e 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34012cb0:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012cb2:	68fa      	ldr	r2, [r7, #12]
34012cb4:	68bb      	ldr	r3, [r7, #8]
34012cb6:	fbb2 f3f3 	udiv	r3, r2, r3
34012cba:	60fb      	str	r3, [r7, #12]
            break;
34012cbc:	e000      	b.n	34012cc0 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
34012cbe:	bf00      	nop
        }
      }
      break;
34012cc0:	e062      	b.n	34012d88 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34012cc2:	f7f6 fa73 	bl	340091ac <LL_RCC_IC8_IsEnabled>
34012cc6:	4603      	mov	r3, r0
34012cc8:	2b00      	cmp	r3, #0
34012cca:	d05f      	beq.n	34012d8c <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34012ccc:	f7f6 fa90 	bl	340091f0 <LL_RCC_IC8_GetDivider>
34012cd0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34012cd2:	f7f6 fa7f 	bl	340091d4 <LL_RCC_IC8_GetSource>
34012cd6:	4603      	mov	r3, r0
34012cd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012cdc:	d029      	beq.n	34012d32 <RCCEx_GetSAICLKFreq+0x212>
34012cde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012ce2:	d82f      	bhi.n	34012d44 <RCCEx_GetSAICLKFreq+0x224>
34012ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012ce8:	d01a      	beq.n	34012d20 <RCCEx_GetSAICLKFreq+0x200>
34012cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012cee:	d829      	bhi.n	34012d44 <RCCEx_GetSAICLKFreq+0x224>
34012cf0:	2b00      	cmp	r3, #0
34012cf2:	d003      	beq.n	34012cfc <RCCEx_GetSAICLKFreq+0x1dc>
34012cf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012cf8:	d009      	beq.n	34012d0e <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012cfa:	e023      	b.n	34012d44 <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012cfc:	f7fd fe54 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34012d00:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012d02:	68fa      	ldr	r2, [r7, #12]
34012d04:	68bb      	ldr	r3, [r7, #8]
34012d06:	fbb2 f3f3 	udiv	r3, r2, r3
34012d0a:	60fb      	str	r3, [r7, #12]
            break;
34012d0c:	e01b      	b.n	34012d46 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012d0e:	f7fd fe91 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34012d12:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012d14:	68fa      	ldr	r2, [r7, #12]
34012d16:	68bb      	ldr	r3, [r7, #8]
34012d18:	fbb2 f3f3 	udiv	r3, r2, r3
34012d1c:	60fb      	str	r3, [r7, #12]
            break;
34012d1e:	e012      	b.n	34012d46 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012d20:	f7fd fece 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34012d24:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012d26:	68fa      	ldr	r2, [r7, #12]
34012d28:	68bb      	ldr	r3, [r7, #8]
34012d2a:	fbb2 f3f3 	udiv	r3, r2, r3
34012d2e:	60fb      	str	r3, [r7, #12]
            break;
34012d30:	e009      	b.n	34012d46 <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012d32:	f7fd ff0b 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34012d36:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012d38:	68fa      	ldr	r2, [r7, #12]
34012d3a:	68bb      	ldr	r3, [r7, #8]
34012d3c:	fbb2 f3f3 	udiv	r3, r2, r3
34012d40:	60fb      	str	r3, [r7, #12]
            break;
34012d42:	e000      	b.n	34012d46 <RCCEx_GetSAICLKFreq+0x226>
            break;
34012d44:	bf00      	nop
        }
      }
      break;
34012d46:	e021      	b.n	34012d8c <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34012d48:	f7f5 fa4c 	bl	340081e4 <LL_RCC_HSI_IsReady>
34012d4c:	4603      	mov	r3, r0
34012d4e:	2b00      	cmp	r3, #0
34012d50:	d01e      	beq.n	34012d90 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012d52:	f7f5 fa59 	bl	34008208 <LL_RCC_HSI_GetDivider>
34012d56:	4603      	mov	r3, r0
34012d58:	09db      	lsrs	r3, r3, #7
34012d5a:	4a21      	ldr	r2, [pc, #132]	@ (34012de0 <RCCEx_GetSAICLKFreq+0x2c0>)
34012d5c:	fa22 f303 	lsr.w	r3, r2, r3
34012d60:	60fb      	str	r3, [r7, #12]
      }
      break;
34012d62:	e015      	b.n	34012d90 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34012d64:	f7f5 fa5e 	bl	34008224 <LL_RCC_MSI_IsReady>
34012d68:	4603      	mov	r3, r0
34012d6a:	2b00      	cmp	r3, #0
34012d6c:	d012      	beq.n	34012d94 <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
34012d6e:	4b1d      	ldr	r3, [pc, #116]	@ (34012de4 <RCCEx_GetSAICLKFreq+0x2c4>)
34012d70:	60fb      	str	r3, [r7, #12]
      }
      break;
34012d72:	e00f      	b.n	34012d94 <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
34012d74:	4b1c      	ldr	r3, [pc, #112]	@ (34012de8 <RCCEx_GetSAICLKFreq+0x2c8>)
34012d76:	60fb      	str	r3, [r7, #12]
      break;
34012d78:	e00d      	b.n	34012d96 <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34012d7a:	2007      	movs	r0, #7
34012d7c:	f000 f920 	bl	34012fc0 <RCCEx_GetSPDIFRXCLKFreq>
34012d80:	60f8      	str	r0, [r7, #12]
      break;
34012d82:	e008      	b.n	34012d96 <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
34012d84:	bf00      	nop
34012d86:	e006      	b.n	34012d96 <RCCEx_GetSAICLKFreq+0x276>
      break;
34012d88:	bf00      	nop
34012d8a:	e004      	b.n	34012d96 <RCCEx_GetSAICLKFreq+0x276>
      break;
34012d8c:	bf00      	nop
34012d8e:	e002      	b.n	34012d96 <RCCEx_GetSAICLKFreq+0x276>
      break;
34012d90:	bf00      	nop
34012d92:	e000      	b.n	34012d96 <RCCEx_GetSAICLKFreq+0x276>
      break;
34012d94:	bf00      	nop
  }

  return sai_frequency;
34012d96:	68fb      	ldr	r3, [r7, #12]
}
34012d98:	4618      	mov	r0, r3
34012d9a:	3710      	adds	r7, #16
34012d9c:	46bd      	mov	sp, r7
34012d9e:	bd80      	pop	{r7, pc}
34012da0:	07071818 	.word	0x07071818
34012da4:	07071418 	.word	0x07071418
34012da8:	07061818 	.word	0x07061818
34012dac:	07061418 	.word	0x07061418
34012db0:	07051818 	.word	0x07051818
34012db4:	07051418 	.word	0x07051418
34012db8:	07041818 	.word	0x07041818
34012dbc:	07041418 	.word	0x07041418
34012dc0:	07031818 	.word	0x07031818
34012dc4:	07031418 	.word	0x07031418
34012dc8:	07021818 	.word	0x07021818
34012dcc:	07021418 	.word	0x07021418
34012dd0:	07011818 	.word	0x07011818
34012dd4:	07011418 	.word	0x07011418
34012dd8:	07001418 	.word	0x07001418
34012ddc:	07001818 	.word	0x07001818
34012de0:	03d09000 	.word	0x03d09000
34012de4:	003d0900 	.word	0x003d0900
34012de8:	00bb8000 	.word	0x00bb8000

34012dec <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
34012dec:	b580      	push	{r7, lr}
34012dee:	b084      	sub	sp, #16
34012df0:	af00      	add	r7, sp, #0
34012df2:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34012df4:	2300      	movs	r3, #0
34012df6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34012df8:	6878      	ldr	r0, [r7, #4]
34012dfa:	f7f5 fdb1 	bl	34008960 <LL_RCC_GetSDMMCClockSource>
34012dfe:	4603      	mov	r3, r0
34012e00:	4a67      	ldr	r2, [pc, #412]	@ (34012fa0 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34012e02:	4293      	cmp	r3, r2
34012e04:	d07e      	beq.n	34012f04 <RCCEx_GetSDMMCCLKFreq+0x118>
34012e06:	4a66      	ldr	r2, [pc, #408]	@ (34012fa0 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34012e08:	4293      	cmp	r3, r2
34012e0a:	f200 80be 	bhi.w	34012f8a <RCCEx_GetSDMMCCLKFreq+0x19e>
34012e0e:	4a65      	ldr	r2, [pc, #404]	@ (34012fa4 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34012e10:	4293      	cmp	r3, r2
34012e12:	d077      	beq.n	34012f04 <RCCEx_GetSDMMCCLKFreq+0x118>
34012e14:	4a63      	ldr	r2, [pc, #396]	@ (34012fa4 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34012e16:	4293      	cmp	r3, r2
34012e18:	f200 80b7 	bhi.w	34012f8a <RCCEx_GetSDMMCCLKFreq+0x19e>
34012e1c:	4a62      	ldr	r2, [pc, #392]	@ (34012fa8 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34012e1e:	4293      	cmp	r3, r2
34012e20:	d02c      	beq.n	34012e7c <RCCEx_GetSDMMCCLKFreq+0x90>
34012e22:	4a61      	ldr	r2, [pc, #388]	@ (34012fa8 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34012e24:	4293      	cmp	r3, r2
34012e26:	f200 80b0 	bhi.w	34012f8a <RCCEx_GetSDMMCCLKFreq+0x19e>
34012e2a:	4a60      	ldr	r2, [pc, #384]	@ (34012fac <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34012e2c:	4293      	cmp	r3, r2
34012e2e:	d025      	beq.n	34012e7c <RCCEx_GetSDMMCCLKFreq+0x90>
34012e30:	4a5e      	ldr	r2, [pc, #376]	@ (34012fac <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34012e32:	4293      	cmp	r3, r2
34012e34:	f200 80a9 	bhi.w	34012f8a <RCCEx_GetSDMMCCLKFreq+0x19e>
34012e38:	4a5d      	ldr	r2, [pc, #372]	@ (34012fb0 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34012e3a:	4293      	cmp	r3, r2
34012e3c:	d019      	beq.n	34012e72 <RCCEx_GetSDMMCCLKFreq+0x86>
34012e3e:	4a5c      	ldr	r2, [pc, #368]	@ (34012fb0 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34012e40:	4293      	cmp	r3, r2
34012e42:	f200 80a2 	bhi.w	34012f8a <RCCEx_GetSDMMCCLKFreq+0x19e>
34012e46:	4a5b      	ldr	r2, [pc, #364]	@ (34012fb4 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34012e48:	4293      	cmp	r3, r2
34012e4a:	d012      	beq.n	34012e72 <RCCEx_GetSDMMCCLKFreq+0x86>
34012e4c:	4a59      	ldr	r2, [pc, #356]	@ (34012fb4 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34012e4e:	4293      	cmp	r3, r2
34012e50:	f200 809b 	bhi.w	34012f8a <RCCEx_GetSDMMCCLKFreq+0x19e>
34012e54:	4a58      	ldr	r2, [pc, #352]	@ (34012fb8 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
34012e56:	4293      	cmp	r3, r2
34012e58:	d003      	beq.n	34012e62 <RCCEx_GetSDMMCCLKFreq+0x76>
34012e5a:	4a58      	ldr	r2, [pc, #352]	@ (34012fbc <RCCEx_GetSDMMCCLKFreq+0x1d0>)
34012e5c:	4293      	cmp	r3, r2
34012e5e:	f040 8094 	bne.w	34012f8a <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34012e62:	f7f4 fdc1 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34012e66:	4603      	mov	r3, r0
34012e68:	4618      	mov	r0, r3
34012e6a:	f7fd feb5 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34012e6e:	60f8      	str	r0, [r7, #12]
      break;
34012e70:	e090      	b.n	34012f94 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012e72:	2007      	movs	r0, #7
34012e74:	f7fe f99c 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
34012e78:	60f8      	str	r0, [r7, #12]
      break;
34012e7a:	e08b      	b.n	34012f94 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
34012e7c:	f7f6 f8d6 	bl	3400902c <LL_RCC_IC4_IsEnabled>
34012e80:	4603      	mov	r3, r0
34012e82:	2b00      	cmp	r3, #0
34012e84:	f000 8083 	beq.w	34012f8e <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
34012e88:	f7f6 f8f2 	bl	34009070 <LL_RCC_IC4_GetDivider>
34012e8c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34012e8e:	f7f6 f8e1 	bl	34009054 <LL_RCC_IC4_GetSource>
34012e92:	4603      	mov	r3, r0
34012e94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012e98:	d029      	beq.n	34012eee <RCCEx_GetSDMMCCLKFreq+0x102>
34012e9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012e9e:	d82f      	bhi.n	34012f00 <RCCEx_GetSDMMCCLKFreq+0x114>
34012ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012ea4:	d01a      	beq.n	34012edc <RCCEx_GetSDMMCCLKFreq+0xf0>
34012ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012eaa:	d829      	bhi.n	34012f00 <RCCEx_GetSDMMCCLKFreq+0x114>
34012eac:	2b00      	cmp	r3, #0
34012eae:	d003      	beq.n	34012eb8 <RCCEx_GetSDMMCCLKFreq+0xcc>
34012eb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012eb4:	d009      	beq.n	34012eca <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012eb6:	e023      	b.n	34012f00 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012eb8:	f7fd fd76 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34012ebc:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012ebe:	68fa      	ldr	r2, [r7, #12]
34012ec0:	68bb      	ldr	r3, [r7, #8]
34012ec2:	fbb2 f3f3 	udiv	r3, r2, r3
34012ec6:	60fb      	str	r3, [r7, #12]
            break;
34012ec8:	e01b      	b.n	34012f02 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012eca:	f7fd fdb3 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34012ece:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012ed0:	68fa      	ldr	r2, [r7, #12]
34012ed2:	68bb      	ldr	r3, [r7, #8]
34012ed4:	fbb2 f3f3 	udiv	r3, r2, r3
34012ed8:	60fb      	str	r3, [r7, #12]
            break;
34012eda:	e012      	b.n	34012f02 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012edc:	f7fd fdf0 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34012ee0:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012ee2:	68fa      	ldr	r2, [r7, #12]
34012ee4:	68bb      	ldr	r3, [r7, #8]
34012ee6:	fbb2 f3f3 	udiv	r3, r2, r3
34012eea:	60fb      	str	r3, [r7, #12]
            break;
34012eec:	e009      	b.n	34012f02 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012eee:	f7fd fe2d 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34012ef2:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012ef4:	68fa      	ldr	r2, [r7, #12]
34012ef6:	68bb      	ldr	r3, [r7, #8]
34012ef8:	fbb2 f3f3 	udiv	r3, r2, r3
34012efc:	60fb      	str	r3, [r7, #12]
            break;
34012efe:	e000      	b.n	34012f02 <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
34012f00:	bf00      	nop
        }
      }
      break;
34012f02:	e044      	b.n	34012f8e <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
34012f04:	f7f6 f8d2 	bl	340090ac <LL_RCC_IC5_IsEnabled>
34012f08:	4603      	mov	r3, r0
34012f0a:	2b00      	cmp	r3, #0
34012f0c:	d041      	beq.n	34012f92 <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
34012f0e:	f7f6 f8ef 	bl	340090f0 <LL_RCC_IC5_GetDivider>
34012f12:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
34012f14:	f7f6 f8de 	bl	340090d4 <LL_RCC_IC5_GetSource>
34012f18:	4603      	mov	r3, r0
34012f1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012f1e:	d029      	beq.n	34012f74 <RCCEx_GetSDMMCCLKFreq+0x188>
34012f20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012f24:	d82f      	bhi.n	34012f86 <RCCEx_GetSDMMCCLKFreq+0x19a>
34012f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012f2a:	d01a      	beq.n	34012f62 <RCCEx_GetSDMMCCLKFreq+0x176>
34012f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012f30:	d829      	bhi.n	34012f86 <RCCEx_GetSDMMCCLKFreq+0x19a>
34012f32:	2b00      	cmp	r3, #0
34012f34:	d003      	beq.n	34012f3e <RCCEx_GetSDMMCCLKFreq+0x152>
34012f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012f3a:	d009      	beq.n	34012f50 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012f3c:	e023      	b.n	34012f86 <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012f3e:	f7fd fd33 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34012f42:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012f44:	68fa      	ldr	r2, [r7, #12]
34012f46:	68bb      	ldr	r3, [r7, #8]
34012f48:	fbb2 f3f3 	udiv	r3, r2, r3
34012f4c:	60fb      	str	r3, [r7, #12]
            break;
34012f4e:	e01b      	b.n	34012f88 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012f50:	f7fd fd70 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34012f54:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012f56:	68fa      	ldr	r2, [r7, #12]
34012f58:	68bb      	ldr	r3, [r7, #8]
34012f5a:	fbb2 f3f3 	udiv	r3, r2, r3
34012f5e:	60fb      	str	r3, [r7, #12]
            break;
34012f60:	e012      	b.n	34012f88 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012f62:	f7fd fdad 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34012f66:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012f68:	68fa      	ldr	r2, [r7, #12]
34012f6a:	68bb      	ldr	r3, [r7, #8]
34012f6c:	fbb2 f3f3 	udiv	r3, r2, r3
34012f70:	60fb      	str	r3, [r7, #12]
            break;
34012f72:	e009      	b.n	34012f88 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012f74:	f7fd fdea 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34012f78:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012f7a:	68fa      	ldr	r2, [r7, #12]
34012f7c:	68bb      	ldr	r3, [r7, #8]
34012f7e:	fbb2 f3f3 	udiv	r3, r2, r3
34012f82:	60fb      	str	r3, [r7, #12]
            break;
34012f84:	e000      	b.n	34012f88 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
34012f86:	bf00      	nop
        }
      }
      break;
34012f88:	e003      	b.n	34012f92 <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
34012f8a:	bf00      	nop
34012f8c:	e002      	b.n	34012f94 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
34012f8e:	bf00      	nop
34012f90:	e000      	b.n	34012f94 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
34012f92:	bf00      	nop
  }

  return sdmmc_frequency;
34012f94:	68fb      	ldr	r3, [r7, #12]
}
34012f96:	4618      	mov	r0, r3
34012f98:	3710      	adds	r7, #16
34012f9a:	46bd      	mov	sp, r7
34012f9c:	bd80      	pop	{r7, pc}
34012f9e:	bf00      	nop
34012fa0:	0303041c 	.word	0x0303041c
34012fa4:	0303001c 	.word	0x0303001c
34012fa8:	0302041c 	.word	0x0302041c
34012fac:	0302001c 	.word	0x0302001c
34012fb0:	0301041c 	.word	0x0301041c
34012fb4:	0301001c 	.word	0x0301001c
34012fb8:	0300001c 	.word	0x0300001c
34012fbc:	0300041c 	.word	0x0300041c

34012fc0 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
34012fc0:	b580      	push	{r7, lr}
34012fc2:	b084      	sub	sp, #16
34012fc4:	af00      	add	r7, sp, #0
34012fc6:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34012fc8:	2300      	movs	r3, #0
34012fca:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34012fcc:	6878      	ldr	r0, [r7, #4]
34012fce:	f7f5 fcd3 	bl	34008978 <LL_RCC_GetSPDIFRXClockSource>
34012fd2:	4603      	mov	r3, r0
34012fd4:	2b06      	cmp	r3, #6
34012fd6:	f200 80c2 	bhi.w	3401315e <RCCEx_GetSPDIFRXCLKFreq+0x19e>
34012fda:	a201      	add	r2, pc, #4	@ (adr r2, 34012fe0 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
34012fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34012fe0:	34012ffd 	.word	0x34012ffd
34012fe4:	34013015 	.word	0x34013015
34012fe8:	3401301f 	.word	0x3401301f
34012fec:	340130a7 	.word	0x340130a7
34012ff0:	34013149 	.word	0x34013149
34012ff4:	3401312d 	.word	0x3401312d
34012ff8:	34013159 	.word	0x34013159
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34012ffc:	f7f4 fcf4 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34013000:	4603      	mov	r3, r0
34013002:	4618      	mov	r0, r3
34013004:	f7fd fde8 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34013008:	4603      	mov	r3, r0
3401300a:	4618      	mov	r0, r3
3401300c:	f7fd fdf5 	bl	34010bfa <RCCEx_GetPCLK1Freq>
34013010:	60f8      	str	r0, [r7, #12]
      break;
34013012:	e0ad      	b.n	34013170 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013014:	2007      	movs	r0, #7
34013016:	f7fe f8cb 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
3401301a:	60f8      	str	r0, [r7, #12]
      break;
3401301c:	e0a8      	b.n	34013170 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401301e:	f7f6 f885 	bl	3400912c <LL_RCC_IC7_IsEnabled>
34013022:	4603      	mov	r3, r0
34013024:	2b00      	cmp	r3, #0
34013026:	f000 809c 	beq.w	34013162 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3401302a:	f7f6 f8a1 	bl	34009170 <LL_RCC_IC7_GetDivider>
3401302e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34013030:	f7f6 f890 	bl	34009154 <LL_RCC_IC7_GetSource>
34013034:	4603      	mov	r3, r0
34013036:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401303a:	d029      	beq.n	34013090 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
3401303c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013040:	d82f      	bhi.n	340130a2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34013042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013046:	d01a      	beq.n	3401307e <RCCEx_GetSPDIFRXCLKFreq+0xbe>
34013048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401304c:	d829      	bhi.n	340130a2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3401304e:	2b00      	cmp	r3, #0
34013050:	d003      	beq.n	3401305a <RCCEx_GetSPDIFRXCLKFreq+0x9a>
34013052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013056:	d009      	beq.n	3401306c <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013058:	e023      	b.n	340130a2 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401305a:	f7fd fca5 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
3401305e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013060:	68fa      	ldr	r2, [r7, #12]
34013062:	68bb      	ldr	r3, [r7, #8]
34013064:	fbb2 f3f3 	udiv	r3, r2, r3
34013068:	60fb      	str	r3, [r7, #12]
            break;
3401306a:	e01b      	b.n	340130a4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401306c:	f7fd fce2 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34013070:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013072:	68fa      	ldr	r2, [r7, #12]
34013074:	68bb      	ldr	r3, [r7, #8]
34013076:	fbb2 f3f3 	udiv	r3, r2, r3
3401307a:	60fb      	str	r3, [r7, #12]
            break;
3401307c:	e012      	b.n	340130a4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401307e:	f7fd fd1f 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34013082:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013084:	68fa      	ldr	r2, [r7, #12]
34013086:	68bb      	ldr	r3, [r7, #8]
34013088:	fbb2 f3f3 	udiv	r3, r2, r3
3401308c:	60fb      	str	r3, [r7, #12]
            break;
3401308e:	e009      	b.n	340130a4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013090:	f7fd fd5c 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34013094:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013096:	68fa      	ldr	r2, [r7, #12]
34013098:	68bb      	ldr	r3, [r7, #8]
3401309a:	fbb2 f3f3 	udiv	r3, r2, r3
3401309e:	60fb      	str	r3, [r7, #12]
            break;
340130a0:	e000      	b.n	340130a4 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
340130a2:	bf00      	nop
        }
      }
      break;
340130a4:	e05d      	b.n	34013162 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
340130a6:	f7f6 f881 	bl	340091ac <LL_RCC_IC8_IsEnabled>
340130aa:	4603      	mov	r3, r0
340130ac:	2b00      	cmp	r3, #0
340130ae:	d05a      	beq.n	34013166 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
340130b0:	f7f6 f89e 	bl	340091f0 <LL_RCC_IC8_GetDivider>
340130b4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
340130b6:	f7f6 f88d 	bl	340091d4 <LL_RCC_IC8_GetSource>
340130ba:	4603      	mov	r3, r0
340130bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340130c0:	d029      	beq.n	34013116 <RCCEx_GetSPDIFRXCLKFreq+0x156>
340130c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340130c6:	d82f      	bhi.n	34013128 <RCCEx_GetSPDIFRXCLKFreq+0x168>
340130c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340130cc:	d01a      	beq.n	34013104 <RCCEx_GetSPDIFRXCLKFreq+0x144>
340130ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340130d2:	d829      	bhi.n	34013128 <RCCEx_GetSPDIFRXCLKFreq+0x168>
340130d4:	2b00      	cmp	r3, #0
340130d6:	d003      	beq.n	340130e0 <RCCEx_GetSPDIFRXCLKFreq+0x120>
340130d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340130dc:	d009      	beq.n	340130f2 <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340130de:	e023      	b.n	34013128 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340130e0:	f7fd fc62 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340130e4:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340130e6:	68fa      	ldr	r2, [r7, #12]
340130e8:	68bb      	ldr	r3, [r7, #8]
340130ea:	fbb2 f3f3 	udiv	r3, r2, r3
340130ee:	60fb      	str	r3, [r7, #12]
            break;
340130f0:	e01b      	b.n	3401312a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340130f2:	f7fd fc9f 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
340130f6:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340130f8:	68fa      	ldr	r2, [r7, #12]
340130fa:	68bb      	ldr	r3, [r7, #8]
340130fc:	fbb2 f3f3 	udiv	r3, r2, r3
34013100:	60fb      	str	r3, [r7, #12]
            break;
34013102:	e012      	b.n	3401312a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013104:	f7fd fcdc 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34013108:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3401310a:	68fa      	ldr	r2, [r7, #12]
3401310c:	68bb      	ldr	r3, [r7, #8]
3401310e:	fbb2 f3f3 	udiv	r3, r2, r3
34013112:	60fb      	str	r3, [r7, #12]
            break;
34013114:	e009      	b.n	3401312a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013116:	f7fd fd19 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
3401311a:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3401311c:	68fa      	ldr	r2, [r7, #12]
3401311e:	68bb      	ldr	r3, [r7, #8]
34013120:	fbb2 f3f3 	udiv	r3, r2, r3
34013124:	60fb      	str	r3, [r7, #12]
            break;
34013126:	e000      	b.n	3401312a <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
34013128:	bf00      	nop
        }
      }
      break;
3401312a:	e01c      	b.n	34013166 <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3401312c:	f7f5 f85a 	bl	340081e4 <LL_RCC_HSI_IsReady>
34013130:	4603      	mov	r3, r0
34013132:	2b00      	cmp	r3, #0
34013134:	d019      	beq.n	3401316a <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34013136:	f7f5 f867 	bl	34008208 <LL_RCC_HSI_GetDivider>
3401313a:	4603      	mov	r3, r0
3401313c:	09db      	lsrs	r3, r3, #7
3401313e:	4a0f      	ldr	r2, [pc, #60]	@ (3401317c <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
34013140:	fa22 f303 	lsr.w	r3, r2, r3
34013144:	60fb      	str	r3, [r7, #12]
      }
      break;
34013146:	e010      	b.n	3401316a <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34013148:	f7f5 f86c 	bl	34008224 <LL_RCC_MSI_IsReady>
3401314c:	4603      	mov	r3, r0
3401314e:	2b00      	cmp	r3, #0
34013150:	d00d      	beq.n	3401316e <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
34013152:	4b0b      	ldr	r3, [pc, #44]	@ (34013180 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
34013154:	60fb      	str	r3, [r7, #12]
      }
      break;
34013156:	e00a      	b.n	3401316e <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
34013158:	4b0a      	ldr	r3, [pc, #40]	@ (34013184 <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
3401315a:	60fb      	str	r3, [r7, #12]
      break;
3401315c:	e008      	b.n	34013170 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
3401315e:	bf00      	nop
34013160:	e006      	b.n	34013170 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34013162:	bf00      	nop
34013164:	e004      	b.n	34013170 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34013166:	bf00      	nop
34013168:	e002      	b.n	34013170 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3401316a:	bf00      	nop
3401316c:	e000      	b.n	34013170 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3401316e:	bf00      	nop
  }

  return spdifrx_frequency;
34013170:	68fb      	ldr	r3, [r7, #12]
}
34013172:	4618      	mov	r0, r3
34013174:	3710      	adds	r7, #16
34013176:	46bd      	mov	sp, r7
34013178:	bd80      	pop	{r7, pc}
3401317a:	bf00      	nop
3401317c:	03d09000 	.word	0x03d09000
34013180:	003d0900 	.word	0x003d0900
34013184:	00bb8000 	.word	0x00bb8000

34013188 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
34013188:	b580      	push	{r7, lr}
3401318a:	b084      	sub	sp, #16
3401318c:	af00      	add	r7, sp, #0
3401318e:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34013190:	2300      	movs	r3, #0
34013192:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34013194:	6878      	ldr	r0, [r7, #4]
34013196:	f7f5 fc01 	bl	3400899c <LL_RCC_GetSPIClockSource>
3401319a:	4603      	mov	r3, r0
3401319c:	4aa7      	ldr	r2, [pc, #668]	@ (3401343c <RCCEx_GetSPICLKFreq+0x2b4>)
3401319e:	4293      	cmp	r3, r2
340131a0:	f000 829e 	beq.w	340136e0 <RCCEx_GetSPICLKFreq+0x558>
340131a4:	4aa5      	ldr	r2, [pc, #660]	@ (3401343c <RCCEx_GetSPICLKFreq+0x2b4>)
340131a6:	4293      	cmp	r3, r2
340131a8:	f200 82a5 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340131ac:	4aa4      	ldr	r2, [pc, #656]	@ (34013440 <RCCEx_GetSPICLKFreq+0x2b8>)
340131ae:	4293      	cmp	r3, r2
340131b0:	f000 8299 	beq.w	340136e6 <RCCEx_GetSPICLKFreq+0x55e>
340131b4:	4aa2      	ldr	r2, [pc, #648]	@ (34013440 <RCCEx_GetSPICLKFreq+0x2b8>)
340131b6:	4293      	cmp	r3, r2
340131b8:	f200 829d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340131bc:	4aa1      	ldr	r2, [pc, #644]	@ (34013444 <RCCEx_GetSPICLKFreq+0x2bc>)
340131be:	4293      	cmp	r3, r2
340131c0:	f000 8291 	beq.w	340136e6 <RCCEx_GetSPICLKFreq+0x55e>
340131c4:	4a9f      	ldr	r2, [pc, #636]	@ (34013444 <RCCEx_GetSPICLKFreq+0x2bc>)
340131c6:	4293      	cmp	r3, r2
340131c8:	f200 8295 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340131cc:	4a9e      	ldr	r2, [pc, #632]	@ (34013448 <RCCEx_GetSPICLKFreq+0x2c0>)
340131ce:	4293      	cmp	r3, r2
340131d0:	f000 8286 	beq.w	340136e0 <RCCEx_GetSPICLKFreq+0x558>
340131d4:	4a9c      	ldr	r2, [pc, #624]	@ (34013448 <RCCEx_GetSPICLKFreq+0x2c0>)
340131d6:	4293      	cmp	r3, r2
340131d8:	f200 828d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340131dc:	4a9b      	ldr	r2, [pc, #620]	@ (3401344c <RCCEx_GetSPICLKFreq+0x2c4>)
340131de:	4293      	cmp	r3, r2
340131e0:	f000 827e 	beq.w	340136e0 <RCCEx_GetSPICLKFreq+0x558>
340131e4:	4a99      	ldr	r2, [pc, #612]	@ (3401344c <RCCEx_GetSPICLKFreq+0x2c4>)
340131e6:	4293      	cmp	r3, r2
340131e8:	f200 8285 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340131ec:	4a98      	ldr	r2, [pc, #608]	@ (34013450 <RCCEx_GetSPICLKFreq+0x2c8>)
340131ee:	4293      	cmp	r3, r2
340131f0:	f000 8276 	beq.w	340136e0 <RCCEx_GetSPICLKFreq+0x558>
340131f4:	4a96      	ldr	r2, [pc, #600]	@ (34013450 <RCCEx_GetSPICLKFreq+0x2c8>)
340131f6:	4293      	cmp	r3, r2
340131f8:	f200 827d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340131fc:	4a95      	ldr	r2, [pc, #596]	@ (34013454 <RCCEx_GetSPICLKFreq+0x2cc>)
340131fe:	4293      	cmp	r3, r2
34013200:	f000 8258 	beq.w	340136b4 <RCCEx_GetSPICLKFreq+0x52c>
34013204:	4a93      	ldr	r2, [pc, #588]	@ (34013454 <RCCEx_GetSPICLKFreq+0x2cc>)
34013206:	4293      	cmp	r3, r2
34013208:	f200 8275 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401320c:	4a92      	ldr	r2, [pc, #584]	@ (34013458 <RCCEx_GetSPICLKFreq+0x2d0>)
3401320e:	4293      	cmp	r3, r2
34013210:	f000 8250 	beq.w	340136b4 <RCCEx_GetSPICLKFreq+0x52c>
34013214:	4a90      	ldr	r2, [pc, #576]	@ (34013458 <RCCEx_GetSPICLKFreq+0x2d0>)
34013216:	4293      	cmp	r3, r2
34013218:	f200 826d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401321c:	4a8f      	ldr	r2, [pc, #572]	@ (3401345c <RCCEx_GetSPICLKFreq+0x2d4>)
3401321e:	4293      	cmp	r3, r2
34013220:	f000 8248 	beq.w	340136b4 <RCCEx_GetSPICLKFreq+0x52c>
34013224:	4a8d      	ldr	r2, [pc, #564]	@ (3401345c <RCCEx_GetSPICLKFreq+0x2d4>)
34013226:	4293      	cmp	r3, r2
34013228:	f200 8265 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401322c:	4a8c      	ldr	r2, [pc, #560]	@ (34013460 <RCCEx_GetSPICLKFreq+0x2d8>)
3401322e:	4293      	cmp	r3, r2
34013230:	f000 8240 	beq.w	340136b4 <RCCEx_GetSPICLKFreq+0x52c>
34013234:	4a8a      	ldr	r2, [pc, #552]	@ (34013460 <RCCEx_GetSPICLKFreq+0x2d8>)
34013236:	4293      	cmp	r3, r2
34013238:	f200 825d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401323c:	4a89      	ldr	r2, [pc, #548]	@ (34013464 <RCCEx_GetSPICLKFreq+0x2dc>)
3401323e:	4293      	cmp	r3, r2
34013240:	f000 8238 	beq.w	340136b4 <RCCEx_GetSPICLKFreq+0x52c>
34013244:	4a87      	ldr	r2, [pc, #540]	@ (34013464 <RCCEx_GetSPICLKFreq+0x2dc>)
34013246:	4293      	cmp	r3, r2
34013248:	f200 8255 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401324c:	4a86      	ldr	r2, [pc, #536]	@ (34013468 <RCCEx_GetSPICLKFreq+0x2e0>)
3401324e:	4293      	cmp	r3, r2
34013250:	f000 8230 	beq.w	340136b4 <RCCEx_GetSPICLKFreq+0x52c>
34013254:	4a84      	ldr	r2, [pc, #528]	@ (34013468 <RCCEx_GetSPICLKFreq+0x2e0>)
34013256:	4293      	cmp	r3, r2
34013258:	f200 824d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401325c:	4a83      	ldr	r2, [pc, #524]	@ (3401346c <RCCEx_GetSPICLKFreq+0x2e4>)
3401325e:	4293      	cmp	r3, r2
34013260:	f000 8236 	beq.w	340136d0 <RCCEx_GetSPICLKFreq+0x548>
34013264:	4a81      	ldr	r2, [pc, #516]	@ (3401346c <RCCEx_GetSPICLKFreq+0x2e4>)
34013266:	4293      	cmp	r3, r2
34013268:	f200 8245 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401326c:	4a80      	ldr	r2, [pc, #512]	@ (34013470 <RCCEx_GetSPICLKFreq+0x2e8>)
3401326e:	4293      	cmp	r3, r2
34013270:	f000 822e 	beq.w	340136d0 <RCCEx_GetSPICLKFreq+0x548>
34013274:	4a7e      	ldr	r2, [pc, #504]	@ (34013470 <RCCEx_GetSPICLKFreq+0x2e8>)
34013276:	4293      	cmp	r3, r2
34013278:	f200 823d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401327c:	4a7d      	ldr	r2, [pc, #500]	@ (34013474 <RCCEx_GetSPICLKFreq+0x2ec>)
3401327e:	4293      	cmp	r3, r2
34013280:	f000 8226 	beq.w	340136d0 <RCCEx_GetSPICLKFreq+0x548>
34013284:	4a7b      	ldr	r2, [pc, #492]	@ (34013474 <RCCEx_GetSPICLKFreq+0x2ec>)
34013286:	4293      	cmp	r3, r2
34013288:	f200 8235 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401328c:	4a7a      	ldr	r2, [pc, #488]	@ (34013478 <RCCEx_GetSPICLKFreq+0x2f0>)
3401328e:	4293      	cmp	r3, r2
34013290:	f000 821e 	beq.w	340136d0 <RCCEx_GetSPICLKFreq+0x548>
34013294:	4a78      	ldr	r2, [pc, #480]	@ (34013478 <RCCEx_GetSPICLKFreq+0x2f0>)
34013296:	4293      	cmp	r3, r2
34013298:	f200 822d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401329c:	4a77      	ldr	r2, [pc, #476]	@ (3401347c <RCCEx_GetSPICLKFreq+0x2f4>)
3401329e:	4293      	cmp	r3, r2
340132a0:	f000 8216 	beq.w	340136d0 <RCCEx_GetSPICLKFreq+0x548>
340132a4:	4a75      	ldr	r2, [pc, #468]	@ (3401347c <RCCEx_GetSPICLKFreq+0x2f4>)
340132a6:	4293      	cmp	r3, r2
340132a8:	f200 8225 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340132ac:	4a74      	ldr	r2, [pc, #464]	@ (34013480 <RCCEx_GetSPICLKFreq+0x2f8>)
340132ae:	4293      	cmp	r3, r2
340132b0:	f000 820e 	beq.w	340136d0 <RCCEx_GetSPICLKFreq+0x548>
340132b4:	4a72      	ldr	r2, [pc, #456]	@ (34013480 <RCCEx_GetSPICLKFreq+0x2f8>)
340132b6:	4293      	cmp	r3, r2
340132b8:	f200 821d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340132bc:	4a71      	ldr	r2, [pc, #452]	@ (34013484 <RCCEx_GetSPICLKFreq+0x2fc>)
340132be:	4293      	cmp	r3, r2
340132c0:	f000 8171 	beq.w	340135a6 <RCCEx_GetSPICLKFreq+0x41e>
340132c4:	4a6f      	ldr	r2, [pc, #444]	@ (34013484 <RCCEx_GetSPICLKFreq+0x2fc>)
340132c6:	4293      	cmp	r3, r2
340132c8:	f200 8215 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340132cc:	4a6e      	ldr	r2, [pc, #440]	@ (34013488 <RCCEx_GetSPICLKFreq+0x300>)
340132ce:	4293      	cmp	r3, r2
340132d0:	f000 81ad 	beq.w	3401362e <RCCEx_GetSPICLKFreq+0x4a6>
340132d4:	4a6c      	ldr	r2, [pc, #432]	@ (34013488 <RCCEx_GetSPICLKFreq+0x300>)
340132d6:	4293      	cmp	r3, r2
340132d8:	f200 820d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340132dc:	4a6b      	ldr	r2, [pc, #428]	@ (3401348c <RCCEx_GetSPICLKFreq+0x304>)
340132de:	4293      	cmp	r3, r2
340132e0:	f000 81a5 	beq.w	3401362e <RCCEx_GetSPICLKFreq+0x4a6>
340132e4:	4a69      	ldr	r2, [pc, #420]	@ (3401348c <RCCEx_GetSPICLKFreq+0x304>)
340132e6:	4293      	cmp	r3, r2
340132e8:	f200 8205 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340132ec:	4a68      	ldr	r2, [pc, #416]	@ (34013490 <RCCEx_GetSPICLKFreq+0x308>)
340132ee:	4293      	cmp	r3, r2
340132f0:	f000 8159 	beq.w	340135a6 <RCCEx_GetSPICLKFreq+0x41e>
340132f4:	4a66      	ldr	r2, [pc, #408]	@ (34013490 <RCCEx_GetSPICLKFreq+0x308>)
340132f6:	4293      	cmp	r3, r2
340132f8:	f200 81fd 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340132fc:	4a65      	ldr	r2, [pc, #404]	@ (34013494 <RCCEx_GetSPICLKFreq+0x30c>)
340132fe:	4293      	cmp	r3, r2
34013300:	f000 8151 	beq.w	340135a6 <RCCEx_GetSPICLKFreq+0x41e>
34013304:	4a63      	ldr	r2, [pc, #396]	@ (34013494 <RCCEx_GetSPICLKFreq+0x30c>)
34013306:	4293      	cmp	r3, r2
34013308:	f200 81f5 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401330c:	4a62      	ldr	r2, [pc, #392]	@ (34013498 <RCCEx_GetSPICLKFreq+0x310>)
3401330e:	4293      	cmp	r3, r2
34013310:	f000 8149 	beq.w	340135a6 <RCCEx_GetSPICLKFreq+0x41e>
34013314:	4a60      	ldr	r2, [pc, #384]	@ (34013498 <RCCEx_GetSPICLKFreq+0x310>)
34013316:	4293      	cmp	r3, r2
34013318:	f200 81ed 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401331c:	4a5f      	ldr	r2, [pc, #380]	@ (3401349c <RCCEx_GetSPICLKFreq+0x314>)
3401331e:	4293      	cmp	r3, r2
34013320:	f000 80fd 	beq.w	3401351e <RCCEx_GetSPICLKFreq+0x396>
34013324:	4a5d      	ldr	r2, [pc, #372]	@ (3401349c <RCCEx_GetSPICLKFreq+0x314>)
34013326:	4293      	cmp	r3, r2
34013328:	f200 81e5 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401332c:	4a5c      	ldr	r2, [pc, #368]	@ (340134a0 <RCCEx_GetSPICLKFreq+0x318>)
3401332e:	4293      	cmp	r3, r2
34013330:	f000 8139 	beq.w	340135a6 <RCCEx_GetSPICLKFreq+0x41e>
34013334:	4a5a      	ldr	r2, [pc, #360]	@ (340134a0 <RCCEx_GetSPICLKFreq+0x318>)
34013336:	4293      	cmp	r3, r2
34013338:	f200 81dd 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401333c:	4a59      	ldr	r2, [pc, #356]	@ (340134a4 <RCCEx_GetSPICLKFreq+0x31c>)
3401333e:	4293      	cmp	r3, r2
34013340:	f000 8131 	beq.w	340135a6 <RCCEx_GetSPICLKFreq+0x41e>
34013344:	4a57      	ldr	r2, [pc, #348]	@ (340134a4 <RCCEx_GetSPICLKFreq+0x31c>)
34013346:	4293      	cmp	r3, r2
34013348:	f200 81d5 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401334c:	4a56      	ldr	r2, [pc, #344]	@ (340134a8 <RCCEx_GetSPICLKFreq+0x320>)
3401334e:	4293      	cmp	r3, r2
34013350:	f000 80e5 	beq.w	3401351e <RCCEx_GetSPICLKFreq+0x396>
34013354:	4a54      	ldr	r2, [pc, #336]	@ (340134a8 <RCCEx_GetSPICLKFreq+0x320>)
34013356:	4293      	cmp	r3, r2
34013358:	f200 81cd 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401335c:	4a53      	ldr	r2, [pc, #332]	@ (340134ac <RCCEx_GetSPICLKFreq+0x324>)
3401335e:	4293      	cmp	r3, r2
34013360:	f000 80dd 	beq.w	3401351e <RCCEx_GetSPICLKFreq+0x396>
34013364:	4a51      	ldr	r2, [pc, #324]	@ (340134ac <RCCEx_GetSPICLKFreq+0x324>)
34013366:	4293      	cmp	r3, r2
34013368:	f200 81c5 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401336c:	4a50      	ldr	r2, [pc, #320]	@ (340134b0 <RCCEx_GetSPICLKFreq+0x328>)
3401336e:	4293      	cmp	r3, r2
34013370:	f000 80d5 	beq.w	3401351e <RCCEx_GetSPICLKFreq+0x396>
34013374:	4a4e      	ldr	r2, [pc, #312]	@ (340134b0 <RCCEx_GetSPICLKFreq+0x328>)
34013376:	4293      	cmp	r3, r2
34013378:	f200 81bd 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401337c:	4a4d      	ldr	r2, [pc, #308]	@ (340134b4 <RCCEx_GetSPICLKFreq+0x32c>)
3401337e:	4293      	cmp	r3, r2
34013380:	f000 80c8 	beq.w	34013514 <RCCEx_GetSPICLKFreq+0x38c>
34013384:	4a4b      	ldr	r2, [pc, #300]	@ (340134b4 <RCCEx_GetSPICLKFreq+0x32c>)
34013386:	4293      	cmp	r3, r2
34013388:	f200 81b5 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401338c:	4a4a      	ldr	r2, [pc, #296]	@ (340134b8 <RCCEx_GetSPICLKFreq+0x330>)
3401338e:	4293      	cmp	r3, r2
34013390:	f000 80c0 	beq.w	34013514 <RCCEx_GetSPICLKFreq+0x38c>
34013394:	4a48      	ldr	r2, [pc, #288]	@ (340134b8 <RCCEx_GetSPICLKFreq+0x330>)
34013396:	4293      	cmp	r3, r2
34013398:	f200 81ad 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
3401339c:	4a47      	ldr	r2, [pc, #284]	@ (340134bc <RCCEx_GetSPICLKFreq+0x334>)
3401339e:	4293      	cmp	r3, r2
340133a0:	f000 80b8 	beq.w	34013514 <RCCEx_GetSPICLKFreq+0x38c>
340133a4:	4a45      	ldr	r2, [pc, #276]	@ (340134bc <RCCEx_GetSPICLKFreq+0x334>)
340133a6:	4293      	cmp	r3, r2
340133a8:	f200 81a5 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340133ac:	4a44      	ldr	r2, [pc, #272]	@ (340134c0 <RCCEx_GetSPICLKFreq+0x338>)
340133ae:	4293      	cmp	r3, r2
340133b0:	f000 80b0 	beq.w	34013514 <RCCEx_GetSPICLKFreq+0x38c>
340133b4:	4a42      	ldr	r2, [pc, #264]	@ (340134c0 <RCCEx_GetSPICLKFreq+0x338>)
340133b6:	4293      	cmp	r3, r2
340133b8:	f200 819d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340133bc:	4a41      	ldr	r2, [pc, #260]	@ (340134c4 <RCCEx_GetSPICLKFreq+0x33c>)
340133be:	4293      	cmp	r3, r2
340133c0:	f000 80a8 	beq.w	34013514 <RCCEx_GetSPICLKFreq+0x38c>
340133c4:	4a3f      	ldr	r2, [pc, #252]	@ (340134c4 <RCCEx_GetSPICLKFreq+0x33c>)
340133c6:	4293      	cmp	r3, r2
340133c8:	f200 8195 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340133cc:	4a3e      	ldr	r2, [pc, #248]	@ (340134c8 <RCCEx_GetSPICLKFreq+0x340>)
340133ce:	4293      	cmp	r3, r2
340133d0:	f000 80a0 	beq.w	34013514 <RCCEx_GetSPICLKFreq+0x38c>
340133d4:	4a3c      	ldr	r2, [pc, #240]	@ (340134c8 <RCCEx_GetSPICLKFreq+0x340>)
340133d6:	4293      	cmp	r3, r2
340133d8:	f200 818d 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340133dc:	4a3b      	ldr	r2, [pc, #236]	@ (340134cc <RCCEx_GetSPICLKFreq+0x344>)
340133de:	4293      	cmp	r3, r2
340133e0:	f000 808c 	beq.w	340134fc <RCCEx_GetSPICLKFreq+0x374>
340133e4:	4a39      	ldr	r2, [pc, #228]	@ (340134cc <RCCEx_GetSPICLKFreq+0x344>)
340133e6:	4293      	cmp	r3, r2
340133e8:	f200 8185 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340133ec:	4a38      	ldr	r2, [pc, #224]	@ (340134d0 <RCCEx_GetSPICLKFreq+0x348>)
340133ee:	4293      	cmp	r3, r2
340133f0:	d078      	beq.n	340134e4 <RCCEx_GetSPICLKFreq+0x35c>
340133f2:	4a37      	ldr	r2, [pc, #220]	@ (340134d0 <RCCEx_GetSPICLKFreq+0x348>)
340133f4:	4293      	cmp	r3, r2
340133f6:	f200 817e 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
340133fa:	4a36      	ldr	r2, [pc, #216]	@ (340134d4 <RCCEx_GetSPICLKFreq+0x34c>)
340133fc:	4293      	cmp	r3, r2
340133fe:	d071      	beq.n	340134e4 <RCCEx_GetSPICLKFreq+0x35c>
34013400:	4a34      	ldr	r2, [pc, #208]	@ (340134d4 <RCCEx_GetSPICLKFreq+0x34c>)
34013402:	4293      	cmp	r3, r2
34013404:	f200 8177 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
34013408:	4a33      	ldr	r2, [pc, #204]	@ (340134d8 <RCCEx_GetSPICLKFreq+0x350>)
3401340a:	4293      	cmp	r3, r2
3401340c:	d00a      	beq.n	34013424 <RCCEx_GetSPICLKFreq+0x29c>
3401340e:	4a32      	ldr	r2, [pc, #200]	@ (340134d8 <RCCEx_GetSPICLKFreq+0x350>)
34013410:	4293      	cmp	r3, r2
34013412:	f200 8170 	bhi.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
34013416:	4a31      	ldr	r2, [pc, #196]	@ (340134dc <RCCEx_GetSPICLKFreq+0x354>)
34013418:	4293      	cmp	r3, r2
3401341a:	d063      	beq.n	340134e4 <RCCEx_GetSPICLKFreq+0x35c>
3401341c:	4a30      	ldr	r2, [pc, #192]	@ (340134e0 <RCCEx_GetSPICLKFreq+0x358>)
3401341e:	4293      	cmp	r3, r2
34013420:	f040 8169 	bne.w	340136f6 <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013424:	f7f4 fae0 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34013428:	4603      	mov	r3, r0
3401342a:	4618      	mov	r0, r3
3401342c:	f7fd fbd4 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34013430:	4603      	mov	r3, r0
34013432:	4618      	mov	r0, r3
34013434:	f7fd fbe1 	bl	34010bfa <RCCEx_GetPCLK1Freq>
34013438:	60f8      	str	r0, [r7, #12]
      break;
3401343a:	e169      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>
3401343c:	07061820 	.word	0x07061820
34013440:	07061420 	.word	0x07061420
34013444:	07061020 	.word	0x07061020
34013448:	07060c20 	.word	0x07060c20
3401344c:	07060820 	.word	0x07060820
34013450:	07060420 	.word	0x07060420
34013454:	07051820 	.word	0x07051820
34013458:	07051420 	.word	0x07051420
3401345c:	07051020 	.word	0x07051020
34013460:	07050c20 	.word	0x07050c20
34013464:	07050820 	.word	0x07050820
34013468:	07050420 	.word	0x07050420
3401346c:	07041820 	.word	0x07041820
34013470:	07041420 	.word	0x07041420
34013474:	07041020 	.word	0x07041020
34013478:	07040c20 	.word	0x07040c20
3401347c:	07040820 	.word	0x07040820
34013480:	07040420 	.word	0x07040420
34013484:	07031820 	.word	0x07031820
34013488:	07031420 	.word	0x07031420
3401348c:	07031020 	.word	0x07031020
34013490:	07030c20 	.word	0x07030c20
34013494:	07030820 	.word	0x07030820
34013498:	07030420 	.word	0x07030420
3401349c:	07021820 	.word	0x07021820
340134a0:	07021420 	.word	0x07021420
340134a4:	07021020 	.word	0x07021020
340134a8:	07020c20 	.word	0x07020c20
340134ac:	07020820 	.word	0x07020820
340134b0:	07020420 	.word	0x07020420
340134b4:	07011820 	.word	0x07011820
340134b8:	07011420 	.word	0x07011420
340134bc:	07011020 	.word	0x07011020
340134c0:	07010c20 	.word	0x07010c20
340134c4:	07010820 	.word	0x07010820
340134c8:	07010420 	.word	0x07010420
340134cc:	07001820 	.word	0x07001820
340134d0:	07001420 	.word	0x07001420
340134d4:	07001020 	.word	0x07001020
340134d8:	07000c20 	.word	0x07000c20
340134dc:	07000420 	.word	0x07000420
340134e0:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340134e4:	f7f4 fa80 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
340134e8:	4603      	mov	r3, r0
340134ea:	4618      	mov	r0, r3
340134ec:	f7fd fb74 	bl	34010bd8 <RCCEx_GetHCLKFreq>
340134f0:	4603      	mov	r3, r0
340134f2:	4618      	mov	r0, r3
340134f4:	f7fd fb91 	bl	34010c1a <RCCEx_GetPCLK2Freq>
340134f8:	60f8      	str	r0, [r7, #12]
      break;
340134fa:	e109      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340134fc:	f7f4 fa74 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34013500:	4603      	mov	r3, r0
34013502:	4618      	mov	r0, r3
34013504:	f7fd fb68 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34013508:	4603      	mov	r3, r0
3401350a:	4618      	mov	r0, r3
3401350c:	f7fd fb96 	bl	34010c3c <RCCEx_GetPCLK4Freq>
34013510:	60f8      	str	r0, [r7, #12]
      break;
34013512:	e0fd      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013514:	2007      	movs	r0, #7
34013516:	f7fd fe4b 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
3401351a:	60f8      	str	r0, [r7, #12]
      break;
3401351c:	e0f8      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401351e:	f7f5 fe45 	bl	340091ac <LL_RCC_IC8_IsEnabled>
34013522:	4603      	mov	r3, r0
34013524:	2b00      	cmp	r3, #0
34013526:	f000 80e8 	beq.w	340136fa <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3401352a:	f7f5 fe61 	bl	340091f0 <LL_RCC_IC8_GetDivider>
3401352e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34013530:	f7f5 fe50 	bl	340091d4 <LL_RCC_IC8_GetSource>
34013534:	4603      	mov	r3, r0
34013536:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401353a:	d029      	beq.n	34013590 <RCCEx_GetSPICLKFreq+0x408>
3401353c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013540:	d82f      	bhi.n	340135a2 <RCCEx_GetSPICLKFreq+0x41a>
34013542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013546:	d01a      	beq.n	3401357e <RCCEx_GetSPICLKFreq+0x3f6>
34013548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401354c:	d829      	bhi.n	340135a2 <RCCEx_GetSPICLKFreq+0x41a>
3401354e:	2b00      	cmp	r3, #0
34013550:	d003      	beq.n	3401355a <RCCEx_GetSPICLKFreq+0x3d2>
34013552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013556:	d009      	beq.n	3401356c <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013558:	e023      	b.n	340135a2 <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401355a:	f7fd fa25 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
3401355e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013560:	68fa      	ldr	r2, [r7, #12]
34013562:	68bb      	ldr	r3, [r7, #8]
34013564:	fbb2 f3f3 	udiv	r3, r2, r3
34013568:	60fb      	str	r3, [r7, #12]
            break;
3401356a:	e01b      	b.n	340135a4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401356c:	f7fd fa62 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34013570:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013572:	68fa      	ldr	r2, [r7, #12]
34013574:	68bb      	ldr	r3, [r7, #8]
34013576:	fbb2 f3f3 	udiv	r3, r2, r3
3401357a:	60fb      	str	r3, [r7, #12]
            break;
3401357c:	e012      	b.n	340135a4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401357e:	f7fd fa9f 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34013582:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013584:	68fa      	ldr	r2, [r7, #12]
34013586:	68bb      	ldr	r3, [r7, #8]
34013588:	fbb2 f3f3 	udiv	r3, r2, r3
3401358c:	60fb      	str	r3, [r7, #12]
            break;
3401358e:	e009      	b.n	340135a4 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013590:	f7fd fadc 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34013594:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013596:	68fa      	ldr	r2, [r7, #12]
34013598:	68bb      	ldr	r3, [r7, #8]
3401359a:	fbb2 f3f3 	udiv	r3, r2, r3
3401359e:	60fb      	str	r3, [r7, #12]
            break;
340135a0:	e000      	b.n	340135a4 <RCCEx_GetSPICLKFreq+0x41c>
            break;
340135a2:	bf00      	nop
        }
      }
      break;
340135a4:	e0a9      	b.n	340136fa <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
340135a6:	f7f5 fe41 	bl	3400922c <LL_RCC_IC9_IsEnabled>
340135aa:	4603      	mov	r3, r0
340135ac:	2b00      	cmp	r3, #0
340135ae:	f000 80a6 	beq.w	340136fe <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
340135b2:	f7f5 fe5d 	bl	34009270 <LL_RCC_IC9_GetDivider>
340135b6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
340135b8:	f7f5 fe4c 	bl	34009254 <LL_RCC_IC9_GetSource>
340135bc:	4603      	mov	r3, r0
340135be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340135c2:	d029      	beq.n	34013618 <RCCEx_GetSPICLKFreq+0x490>
340135c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340135c8:	d82f      	bhi.n	3401362a <RCCEx_GetSPICLKFreq+0x4a2>
340135ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340135ce:	d01a      	beq.n	34013606 <RCCEx_GetSPICLKFreq+0x47e>
340135d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340135d4:	d829      	bhi.n	3401362a <RCCEx_GetSPICLKFreq+0x4a2>
340135d6:	2b00      	cmp	r3, #0
340135d8:	d003      	beq.n	340135e2 <RCCEx_GetSPICLKFreq+0x45a>
340135da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340135de:	d009      	beq.n	340135f4 <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340135e0:	e023      	b.n	3401362a <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340135e2:	f7fd f9e1 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340135e6:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340135e8:	68fa      	ldr	r2, [r7, #12]
340135ea:	68bb      	ldr	r3, [r7, #8]
340135ec:	fbb2 f3f3 	udiv	r3, r2, r3
340135f0:	60fb      	str	r3, [r7, #12]
            break;
340135f2:	e01b      	b.n	3401362c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340135f4:	f7fd fa1e 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
340135f8:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340135fa:	68fa      	ldr	r2, [r7, #12]
340135fc:	68bb      	ldr	r3, [r7, #8]
340135fe:	fbb2 f3f3 	udiv	r3, r2, r3
34013602:	60fb      	str	r3, [r7, #12]
            break;
34013604:	e012      	b.n	3401362c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013606:	f7fd fa5b 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
3401360a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401360c:	68fa      	ldr	r2, [r7, #12]
3401360e:	68bb      	ldr	r3, [r7, #8]
34013610:	fbb2 f3f3 	udiv	r3, r2, r3
34013614:	60fb      	str	r3, [r7, #12]
            break;
34013616:	e009      	b.n	3401362c <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013618:	f7fd fa98 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
3401361c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401361e:	68fa      	ldr	r2, [r7, #12]
34013620:	68bb      	ldr	r3, [r7, #8]
34013622:	fbb2 f3f3 	udiv	r3, r2, r3
34013626:	60fb      	str	r3, [r7, #12]
            break;
34013628:	e000      	b.n	3401362c <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3401362a:	bf00      	nop
        }
      }
      break;
3401362c:	e067      	b.n	340136fe <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3401362e:	f7f5 fefd 	bl	3400942c <LL_RCC_IC14_IsEnabled>
34013632:	4603      	mov	r3, r0
34013634:	2b00      	cmp	r3, #0
34013636:	d064      	beq.n	34013702 <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
34013638:	f7f5 ff1a 	bl	34009470 <LL_RCC_IC14_GetDivider>
3401363c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3401363e:	f7f5 ff09 	bl	34009454 <LL_RCC_IC14_GetSource>
34013642:	4603      	mov	r3, r0
34013644:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013648:	d029      	beq.n	3401369e <RCCEx_GetSPICLKFreq+0x516>
3401364a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401364e:	d82f      	bhi.n	340136b0 <RCCEx_GetSPICLKFreq+0x528>
34013650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013654:	d01a      	beq.n	3401368c <RCCEx_GetSPICLKFreq+0x504>
34013656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401365a:	d829      	bhi.n	340136b0 <RCCEx_GetSPICLKFreq+0x528>
3401365c:	2b00      	cmp	r3, #0
3401365e:	d003      	beq.n	34013668 <RCCEx_GetSPICLKFreq+0x4e0>
34013660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013664:	d009      	beq.n	3401367a <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013666:	e023      	b.n	340136b0 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013668:	f7fd f99e 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
3401366c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401366e:	68fa      	ldr	r2, [r7, #12]
34013670:	68bb      	ldr	r3, [r7, #8]
34013672:	fbb2 f3f3 	udiv	r3, r2, r3
34013676:	60fb      	str	r3, [r7, #12]
            break;
34013678:	e01b      	b.n	340136b2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401367a:	f7fd f9db 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
3401367e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013680:	68fa      	ldr	r2, [r7, #12]
34013682:	68bb      	ldr	r3, [r7, #8]
34013684:	fbb2 f3f3 	udiv	r3, r2, r3
34013688:	60fb      	str	r3, [r7, #12]
            break;
3401368a:	e012      	b.n	340136b2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401368c:	f7fd fa18 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34013690:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013692:	68fa      	ldr	r2, [r7, #12]
34013694:	68bb      	ldr	r3, [r7, #8]
34013696:	fbb2 f3f3 	udiv	r3, r2, r3
3401369a:	60fb      	str	r3, [r7, #12]
            break;
3401369c:	e009      	b.n	340136b2 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401369e:	f7fd fa55 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
340136a2:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340136a4:	68fa      	ldr	r2, [r7, #12]
340136a6:	68bb      	ldr	r3, [r7, #8]
340136a8:	fbb2 f3f3 	udiv	r3, r2, r3
340136ac:	60fb      	str	r3, [r7, #12]
            break;
340136ae:	e000      	b.n	340136b2 <RCCEx_GetSPICLKFreq+0x52a>
            break;
340136b0:	bf00      	nop
        }
      }
      break;
340136b2:	e026      	b.n	34013702 <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340136b4:	f7f4 fd96 	bl	340081e4 <LL_RCC_HSI_IsReady>
340136b8:	4603      	mov	r3, r0
340136ba:	2b00      	cmp	r3, #0
340136bc:	d023      	beq.n	34013706 <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340136be:	f7f4 fda3 	bl	34008208 <LL_RCC_HSI_GetDivider>
340136c2:	4603      	mov	r3, r0
340136c4:	09db      	lsrs	r3, r3, #7
340136c6:	4a15      	ldr	r2, [pc, #84]	@ (3401371c <RCCEx_GetSPICLKFreq+0x594>)
340136c8:	fa22 f303 	lsr.w	r3, r2, r3
340136cc:	60fb      	str	r3, [r7, #12]
      }
      break;
340136ce:	e01a      	b.n	34013706 <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340136d0:	f7f4 fda8 	bl	34008224 <LL_RCC_MSI_IsReady>
340136d4:	4603      	mov	r3, r0
340136d6:	2b00      	cmp	r3, #0
340136d8:	d017      	beq.n	3401370a <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
340136da:	4b11      	ldr	r3, [pc, #68]	@ (34013720 <RCCEx_GetSPICLKFreq+0x598>)
340136dc:	60fb      	str	r3, [r7, #12]
      }
      break;
340136de:	e014      	b.n	3401370a <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
340136e0:	4b10      	ldr	r3, [pc, #64]	@ (34013724 <RCCEx_GetSPICLKFreq+0x59c>)
340136e2:	60fb      	str	r3, [r7, #12]
      break;
340136e4:	e014      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
340136e6:	f7f4 fd6b 	bl	340081c0 <LL_RCC_HSE_IsReady>
340136ea:	4603      	mov	r3, r0
340136ec:	2b00      	cmp	r3, #0
340136ee:	d00e      	beq.n	3401370e <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
340136f0:	4b0d      	ldr	r3, [pc, #52]	@ (34013728 <RCCEx_GetSPICLKFreq+0x5a0>)
340136f2:	60fb      	str	r3, [r7, #12]
      }
      break;
340136f4:	e00b      	b.n	3401370e <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
340136f6:	bf00      	nop
340136f8:	e00a      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>
      break;
340136fa:	bf00      	nop
340136fc:	e008      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>
      break;
340136fe:	bf00      	nop
34013700:	e006      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013702:	bf00      	nop
34013704:	e004      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013706:	bf00      	nop
34013708:	e002      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401370a:	bf00      	nop
3401370c:	e000      	b.n	34013710 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401370e:	bf00      	nop
  }

  return spi_frequency;
34013710:	68fb      	ldr	r3, [r7, #12]
}
34013712:	4618      	mov	r0, r3
34013714:	3710      	adds	r7, #16
34013716:	46bd      	mov	sp, r7
34013718:	bd80      	pop	{r7, pc}
3401371a:	bf00      	nop
3401371c:	03d09000 	.word	0x03d09000
34013720:	003d0900 	.word	0x003d0900
34013724:	00bb8000 	.word	0x00bb8000
34013728:	02dc6c00 	.word	0x02dc6c00

3401372c <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
3401372c:	b580      	push	{r7, lr}
3401372e:	b084      	sub	sp, #16
34013730:	af00      	add	r7, sp, #0
34013732:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34013734:	2300      	movs	r3, #0
34013736:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34013738:	6878      	ldr	r0, [r7, #4]
3401373a:	f7f5 f947 	bl	340089cc <LL_RCC_GetUARTClockSource>
3401373e:	4603      	mov	r3, r0
34013740:	4aa2      	ldr	r2, [pc, #648]	@ (340139cc <RCCEx_GetUARTCLKFreq+0x2a0>)
34013742:	4293      	cmp	r3, r2
34013744:	f000 81e8 	beq.w	34013b18 <RCCEx_GetUARTCLKFreq+0x3ec>
34013748:	4aa0      	ldr	r2, [pc, #640]	@ (340139cc <RCCEx_GetUARTCLKFreq+0x2a0>)
3401374a:	4293      	cmp	r3, r2
3401374c:	f200 8203 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013750:	4a9f      	ldr	r2, [pc, #636]	@ (340139d0 <RCCEx_GetUARTCLKFreq+0x2a4>)
34013752:	4293      	cmp	r3, r2
34013754:	f000 81e0 	beq.w	34013b18 <RCCEx_GetUARTCLKFreq+0x3ec>
34013758:	4a9d      	ldr	r2, [pc, #628]	@ (340139d0 <RCCEx_GetUARTCLKFreq+0x2a4>)
3401375a:	4293      	cmp	r3, r2
3401375c:	f200 81fb 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013760:	4a9c      	ldr	r2, [pc, #624]	@ (340139d4 <RCCEx_GetUARTCLKFreq+0x2a8>)
34013762:	4293      	cmp	r3, r2
34013764:	f000 81d8 	beq.w	34013b18 <RCCEx_GetUARTCLKFreq+0x3ec>
34013768:	4a9a      	ldr	r2, [pc, #616]	@ (340139d4 <RCCEx_GetUARTCLKFreq+0x2a8>)
3401376a:	4293      	cmp	r3, r2
3401376c:	f200 81f3 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013770:	4a99      	ldr	r2, [pc, #612]	@ (340139d8 <RCCEx_GetUARTCLKFreq+0x2ac>)
34013772:	4293      	cmp	r3, r2
34013774:	f000 81d0 	beq.w	34013b18 <RCCEx_GetUARTCLKFreq+0x3ec>
34013778:	4a97      	ldr	r2, [pc, #604]	@ (340139d8 <RCCEx_GetUARTCLKFreq+0x2ac>)
3401377a:	4293      	cmp	r3, r2
3401377c:	f200 81eb 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013780:	4a96      	ldr	r2, [pc, #600]	@ (340139dc <RCCEx_GetUARTCLKFreq+0x2b0>)
34013782:	4293      	cmp	r3, r2
34013784:	f000 81c8 	beq.w	34013b18 <RCCEx_GetUARTCLKFreq+0x3ec>
34013788:	4a94      	ldr	r2, [pc, #592]	@ (340139dc <RCCEx_GetUARTCLKFreq+0x2b0>)
3401378a:	4293      	cmp	r3, r2
3401378c:	f200 81e3 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013790:	4a93      	ldr	r2, [pc, #588]	@ (340139e0 <RCCEx_GetUARTCLKFreq+0x2b4>)
34013792:	4293      	cmp	r3, r2
34013794:	f000 81ce 	beq.w	34013b34 <RCCEx_GetUARTCLKFreq+0x408>
34013798:	4a91      	ldr	r2, [pc, #580]	@ (340139e0 <RCCEx_GetUARTCLKFreq+0x2b4>)
3401379a:	4293      	cmp	r3, r2
3401379c:	f200 81db 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340137a0:	4a90      	ldr	r2, [pc, #576]	@ (340139e4 <RCCEx_GetUARTCLKFreq+0x2b8>)
340137a2:	4293      	cmp	r3, r2
340137a4:	f000 81c6 	beq.w	34013b34 <RCCEx_GetUARTCLKFreq+0x408>
340137a8:	4a8e      	ldr	r2, [pc, #568]	@ (340139e4 <RCCEx_GetUARTCLKFreq+0x2b8>)
340137aa:	4293      	cmp	r3, r2
340137ac:	f200 81d3 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340137b0:	4a8d      	ldr	r2, [pc, #564]	@ (340139e8 <RCCEx_GetUARTCLKFreq+0x2bc>)
340137b2:	4293      	cmp	r3, r2
340137b4:	f000 81be 	beq.w	34013b34 <RCCEx_GetUARTCLKFreq+0x408>
340137b8:	4a8b      	ldr	r2, [pc, #556]	@ (340139e8 <RCCEx_GetUARTCLKFreq+0x2bc>)
340137ba:	4293      	cmp	r3, r2
340137bc:	f200 81cb 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340137c0:	4a8a      	ldr	r2, [pc, #552]	@ (340139ec <RCCEx_GetUARTCLKFreq+0x2c0>)
340137c2:	4293      	cmp	r3, r2
340137c4:	f000 81b6 	beq.w	34013b34 <RCCEx_GetUARTCLKFreq+0x408>
340137c8:	4a88      	ldr	r2, [pc, #544]	@ (340139ec <RCCEx_GetUARTCLKFreq+0x2c0>)
340137ca:	4293      	cmp	r3, r2
340137cc:	f200 81c3 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340137d0:	4a87      	ldr	r2, [pc, #540]	@ (340139f0 <RCCEx_GetUARTCLKFreq+0x2c4>)
340137d2:	4293      	cmp	r3, r2
340137d4:	f000 81ae 	beq.w	34013b34 <RCCEx_GetUARTCLKFreq+0x408>
340137d8:	4a85      	ldr	r2, [pc, #532]	@ (340139f0 <RCCEx_GetUARTCLKFreq+0x2c4>)
340137da:	4293      	cmp	r3, r2
340137dc:	f200 81bb 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340137e0:	4a84      	ldr	r2, [pc, #528]	@ (340139f4 <RCCEx_GetUARTCLKFreq+0x2c8>)
340137e2:	4293      	cmp	r3, r2
340137e4:	f000 81ae 	beq.w	34013b44 <RCCEx_GetUARTCLKFreq+0x418>
340137e8:	4a82      	ldr	r2, [pc, #520]	@ (340139f4 <RCCEx_GetUARTCLKFreq+0x2c8>)
340137ea:	4293      	cmp	r3, r2
340137ec:	f200 81b3 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340137f0:	4a81      	ldr	r2, [pc, #516]	@ (340139f8 <RCCEx_GetUARTCLKFreq+0x2cc>)
340137f2:	4293      	cmp	r3, r2
340137f4:	f000 81a6 	beq.w	34013b44 <RCCEx_GetUARTCLKFreq+0x418>
340137f8:	4a7f      	ldr	r2, [pc, #508]	@ (340139f8 <RCCEx_GetUARTCLKFreq+0x2cc>)
340137fa:	4293      	cmp	r3, r2
340137fc:	f200 81ab 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013800:	4a7e      	ldr	r2, [pc, #504]	@ (340139fc <RCCEx_GetUARTCLKFreq+0x2d0>)
34013802:	4293      	cmp	r3, r2
34013804:	f000 819e 	beq.w	34013b44 <RCCEx_GetUARTCLKFreq+0x418>
34013808:	4a7c      	ldr	r2, [pc, #496]	@ (340139fc <RCCEx_GetUARTCLKFreq+0x2d0>)
3401380a:	4293      	cmp	r3, r2
3401380c:	f200 81a3 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013810:	4a7b      	ldr	r2, [pc, #492]	@ (34013a00 <RCCEx_GetUARTCLKFreq+0x2d4>)
34013812:	4293      	cmp	r3, r2
34013814:	f000 8196 	beq.w	34013b44 <RCCEx_GetUARTCLKFreq+0x418>
34013818:	4a79      	ldr	r2, [pc, #484]	@ (34013a00 <RCCEx_GetUARTCLKFreq+0x2d4>)
3401381a:	4293      	cmp	r3, r2
3401381c:	f200 819b 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013820:	4a78      	ldr	r2, [pc, #480]	@ (34013a04 <RCCEx_GetUARTCLKFreq+0x2d8>)
34013822:	4293      	cmp	r3, r2
34013824:	f000 818e 	beq.w	34013b44 <RCCEx_GetUARTCLKFreq+0x418>
34013828:	4a76      	ldr	r2, [pc, #472]	@ (34013a04 <RCCEx_GetUARTCLKFreq+0x2d8>)
3401382a:	4293      	cmp	r3, r2
3401382c:	f200 8193 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013830:	4a75      	ldr	r2, [pc, #468]	@ (34013a08 <RCCEx_GetUARTCLKFreq+0x2dc>)
34013832:	4293      	cmp	r3, r2
34013834:	f000 812d 	beq.w	34013a92 <RCCEx_GetUARTCLKFreq+0x366>
34013838:	4a73      	ldr	r2, [pc, #460]	@ (34013a08 <RCCEx_GetUARTCLKFreq+0x2dc>)
3401383a:	4293      	cmp	r3, r2
3401383c:	f200 818b 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013840:	4a72      	ldr	r2, [pc, #456]	@ (34013a0c <RCCEx_GetUARTCLKFreq+0x2e0>)
34013842:	4293      	cmp	r3, r2
34013844:	f000 8125 	beq.w	34013a92 <RCCEx_GetUARTCLKFreq+0x366>
34013848:	4a70      	ldr	r2, [pc, #448]	@ (34013a0c <RCCEx_GetUARTCLKFreq+0x2e0>)
3401384a:	4293      	cmp	r3, r2
3401384c:	f200 8183 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013850:	4a6f      	ldr	r2, [pc, #444]	@ (34013a10 <RCCEx_GetUARTCLKFreq+0x2e4>)
34013852:	4293      	cmp	r3, r2
34013854:	f000 811d 	beq.w	34013a92 <RCCEx_GetUARTCLKFreq+0x366>
34013858:	4a6d      	ldr	r2, [pc, #436]	@ (34013a10 <RCCEx_GetUARTCLKFreq+0x2e4>)
3401385a:	4293      	cmp	r3, r2
3401385c:	f200 817b 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013860:	4a6c      	ldr	r2, [pc, #432]	@ (34013a14 <RCCEx_GetUARTCLKFreq+0x2e8>)
34013862:	4293      	cmp	r3, r2
34013864:	f000 8115 	beq.w	34013a92 <RCCEx_GetUARTCLKFreq+0x366>
34013868:	4a6a      	ldr	r2, [pc, #424]	@ (34013a14 <RCCEx_GetUARTCLKFreq+0x2e8>)
3401386a:	4293      	cmp	r3, r2
3401386c:	f200 8173 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013870:	4a69      	ldr	r2, [pc, #420]	@ (34013a18 <RCCEx_GetUARTCLKFreq+0x2ec>)
34013872:	4293      	cmp	r3, r2
34013874:	f000 810d 	beq.w	34013a92 <RCCEx_GetUARTCLKFreq+0x366>
34013878:	4a67      	ldr	r2, [pc, #412]	@ (34013a18 <RCCEx_GetUARTCLKFreq+0x2ec>)
3401387a:	4293      	cmp	r3, r2
3401387c:	f200 816b 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013880:	4a66      	ldr	r2, [pc, #408]	@ (34013a1c <RCCEx_GetUARTCLKFreq+0x2f0>)
34013882:	4293      	cmp	r3, r2
34013884:	d07b      	beq.n	3401397e <RCCEx_GetUARTCLKFreq+0x252>
34013886:	4a65      	ldr	r2, [pc, #404]	@ (34013a1c <RCCEx_GetUARTCLKFreq+0x2f0>)
34013888:	4293      	cmp	r3, r2
3401388a:	f200 8164 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
3401388e:	4a64      	ldr	r2, [pc, #400]	@ (34013a20 <RCCEx_GetUARTCLKFreq+0x2f4>)
34013890:	4293      	cmp	r3, r2
34013892:	d074      	beq.n	3401397e <RCCEx_GetUARTCLKFreq+0x252>
34013894:	4a62      	ldr	r2, [pc, #392]	@ (34013a20 <RCCEx_GetUARTCLKFreq+0x2f4>)
34013896:	4293      	cmp	r3, r2
34013898:	f200 815d 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
3401389c:	4a61      	ldr	r2, [pc, #388]	@ (34013a24 <RCCEx_GetUARTCLKFreq+0x2f8>)
3401389e:	4293      	cmp	r3, r2
340138a0:	d06d      	beq.n	3401397e <RCCEx_GetUARTCLKFreq+0x252>
340138a2:	4a60      	ldr	r2, [pc, #384]	@ (34013a24 <RCCEx_GetUARTCLKFreq+0x2f8>)
340138a4:	4293      	cmp	r3, r2
340138a6:	f200 8156 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340138aa:	4a5f      	ldr	r2, [pc, #380]	@ (34013a28 <RCCEx_GetUARTCLKFreq+0x2fc>)
340138ac:	4293      	cmp	r3, r2
340138ae:	d066      	beq.n	3401397e <RCCEx_GetUARTCLKFreq+0x252>
340138b0:	4a5d      	ldr	r2, [pc, #372]	@ (34013a28 <RCCEx_GetUARTCLKFreq+0x2fc>)
340138b2:	4293      	cmp	r3, r2
340138b4:	f200 814f 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340138b8:	4a5c      	ldr	r2, [pc, #368]	@ (34013a2c <RCCEx_GetUARTCLKFreq+0x300>)
340138ba:	4293      	cmp	r3, r2
340138bc:	d05f      	beq.n	3401397e <RCCEx_GetUARTCLKFreq+0x252>
340138be:	4a5b      	ldr	r2, [pc, #364]	@ (34013a2c <RCCEx_GetUARTCLKFreq+0x300>)
340138c0:	4293      	cmp	r3, r2
340138c2:	f200 8148 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340138c6:	4a5a      	ldr	r2, [pc, #360]	@ (34013a30 <RCCEx_GetUARTCLKFreq+0x304>)
340138c8:	4293      	cmp	r3, r2
340138ca:	d053      	beq.n	34013974 <RCCEx_GetUARTCLKFreq+0x248>
340138cc:	4a58      	ldr	r2, [pc, #352]	@ (34013a30 <RCCEx_GetUARTCLKFreq+0x304>)
340138ce:	4293      	cmp	r3, r2
340138d0:	f200 8141 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340138d4:	4a57      	ldr	r2, [pc, #348]	@ (34013a34 <RCCEx_GetUARTCLKFreq+0x308>)
340138d6:	4293      	cmp	r3, r2
340138d8:	d04c      	beq.n	34013974 <RCCEx_GetUARTCLKFreq+0x248>
340138da:	4a56      	ldr	r2, [pc, #344]	@ (34013a34 <RCCEx_GetUARTCLKFreq+0x308>)
340138dc:	4293      	cmp	r3, r2
340138de:	f200 813a 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340138e2:	4a55      	ldr	r2, [pc, #340]	@ (34013a38 <RCCEx_GetUARTCLKFreq+0x30c>)
340138e4:	4293      	cmp	r3, r2
340138e6:	d045      	beq.n	34013974 <RCCEx_GetUARTCLKFreq+0x248>
340138e8:	4a53      	ldr	r2, [pc, #332]	@ (34013a38 <RCCEx_GetUARTCLKFreq+0x30c>)
340138ea:	4293      	cmp	r3, r2
340138ec:	f200 8133 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340138f0:	4a52      	ldr	r2, [pc, #328]	@ (34013a3c <RCCEx_GetUARTCLKFreq+0x310>)
340138f2:	4293      	cmp	r3, r2
340138f4:	d03e      	beq.n	34013974 <RCCEx_GetUARTCLKFreq+0x248>
340138f6:	4a51      	ldr	r2, [pc, #324]	@ (34013a3c <RCCEx_GetUARTCLKFreq+0x310>)
340138f8:	4293      	cmp	r3, r2
340138fa:	f200 812c 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
340138fe:	4a50      	ldr	r2, [pc, #320]	@ (34013a40 <RCCEx_GetUARTCLKFreq+0x314>)
34013900:	4293      	cmp	r3, r2
34013902:	d037      	beq.n	34013974 <RCCEx_GetUARTCLKFreq+0x248>
34013904:	4a4e      	ldr	r2, [pc, #312]	@ (34013a40 <RCCEx_GetUARTCLKFreq+0x314>)
34013906:	4293      	cmp	r3, r2
34013908:	f200 8125 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
3401390c:	4a4d      	ldr	r2, [pc, #308]	@ (34013a44 <RCCEx_GetUARTCLKFreq+0x318>)
3401390e:	4293      	cmp	r3, r2
34013910:	d018      	beq.n	34013944 <RCCEx_GetUARTCLKFreq+0x218>
34013912:	4a4c      	ldr	r2, [pc, #304]	@ (34013a44 <RCCEx_GetUARTCLKFreq+0x318>)
34013914:	4293      	cmp	r3, r2
34013916:	f200 811e 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
3401391a:	4a4b      	ldr	r2, [pc, #300]	@ (34013a48 <RCCEx_GetUARTCLKFreq+0x31c>)
3401391c:	4293      	cmp	r3, r2
3401391e:	d011      	beq.n	34013944 <RCCEx_GetUARTCLKFreq+0x218>
34013920:	4a49      	ldr	r2, [pc, #292]	@ (34013a48 <RCCEx_GetUARTCLKFreq+0x31c>)
34013922:	4293      	cmp	r3, r2
34013924:	f200 8117 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013928:	4a48      	ldr	r2, [pc, #288]	@ (34013a4c <RCCEx_GetUARTCLKFreq+0x320>)
3401392a:	4293      	cmp	r3, r2
3401392c:	d00a      	beq.n	34013944 <RCCEx_GetUARTCLKFreq+0x218>
3401392e:	4a47      	ldr	r2, [pc, #284]	@ (34013a4c <RCCEx_GetUARTCLKFreq+0x320>)
34013930:	4293      	cmp	r3, r2
34013932:	f200 8110 	bhi.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
34013936:	4a46      	ldr	r2, [pc, #280]	@ (34013a50 <RCCEx_GetUARTCLKFreq+0x324>)
34013938:	4293      	cmp	r3, r2
3401393a:	d00f      	beq.n	3401395c <RCCEx_GetUARTCLKFreq+0x230>
3401393c:	4a45      	ldr	r2, [pc, #276]	@ (34013a54 <RCCEx_GetUARTCLKFreq+0x328>)
3401393e:	4293      	cmp	r3, r2
34013940:	f040 8109 	bne.w	34013b56 <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013944:	f7f4 f850 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34013948:	4603      	mov	r3, r0
3401394a:	4618      	mov	r0, r3
3401394c:	f7fd f944 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34013950:	4603      	mov	r3, r0
34013952:	4618      	mov	r0, r3
34013954:	f7fd f951 	bl	34010bfa <RCCEx_GetPCLK1Freq>
34013958:	60f8      	str	r0, [r7, #12]
      break;
3401395a:	e107      	b.n	34013b6c <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401395c:	f7f4 f844 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34013960:	4603      	mov	r3, r0
34013962:	4618      	mov	r0, r3
34013964:	f7fd f938 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34013968:	4603      	mov	r3, r0
3401396a:	4618      	mov	r0, r3
3401396c:	f7fd f955 	bl	34010c1a <RCCEx_GetPCLK2Freq>
34013970:	60f8      	str	r0, [r7, #12]
      break;
34013972:	e0fb      	b.n	34013b6c <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013974:	2007      	movs	r0, #7
34013976:	f7fd fc1b 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
3401397a:	60f8      	str	r0, [r7, #12]
      break;
3401397c:	e0f6      	b.n	34013b6c <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3401397e:	f7f5 fc55 	bl	3400922c <LL_RCC_IC9_IsEnabled>
34013982:	4603      	mov	r3, r0
34013984:	2b00      	cmp	r3, #0
34013986:	f000 80e8 	beq.w	34013b5a <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3401398a:	f7f5 fc71 	bl	34009270 <LL_RCC_IC9_GetDivider>
3401398e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34013990:	f7f5 fc60 	bl	34009254 <LL_RCC_IC9_GetSource>
34013994:	4603      	mov	r3, r0
34013996:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401399a:	d06f      	beq.n	34013a7c <RCCEx_GetUARTCLKFreq+0x350>
3401399c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340139a0:	d875      	bhi.n	34013a8e <RCCEx_GetUARTCLKFreq+0x362>
340139a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340139a6:	d060      	beq.n	34013a6a <RCCEx_GetUARTCLKFreq+0x33e>
340139a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340139ac:	d86f      	bhi.n	34013a8e <RCCEx_GetUARTCLKFreq+0x362>
340139ae:	2b00      	cmp	r3, #0
340139b0:	d003      	beq.n	340139ba <RCCEx_GetUARTCLKFreq+0x28e>
340139b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340139b6:	d04f      	beq.n	34013a58 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340139b8:	e069      	b.n	34013a8e <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340139ba:	f7fc fff5 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340139be:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
340139c0:	68fa      	ldr	r2, [r7, #12]
340139c2:	68bb      	ldr	r3, [r7, #8]
340139c4:	fbb2 f3f3 	udiv	r3, r2, r3
340139c8:	60fb      	str	r3, [r7, #12]
            break;
340139ca:	e061      	b.n	34013a90 <RCCEx_GetUARTCLKFreq+0x364>
340139cc:	07061c30 	.word	0x07061c30
340139d0:	07061830 	.word	0x07061830
340139d4:	07061030 	.word	0x07061030
340139d8:	07060c30 	.word	0x07060c30
340139dc:	07060034 	.word	0x07060034
340139e0:	07051c30 	.word	0x07051c30
340139e4:	07051830 	.word	0x07051830
340139e8:	07051030 	.word	0x07051030
340139ec:	07050c30 	.word	0x07050c30
340139f0:	07050034 	.word	0x07050034
340139f4:	07041c30 	.word	0x07041c30
340139f8:	07041830 	.word	0x07041830
340139fc:	07041030 	.word	0x07041030
34013a00:	07040c30 	.word	0x07040c30
34013a04:	07040034 	.word	0x07040034
34013a08:	07031c30 	.word	0x07031c30
34013a0c:	07031830 	.word	0x07031830
34013a10:	07031030 	.word	0x07031030
34013a14:	07030c30 	.word	0x07030c30
34013a18:	07030034 	.word	0x07030034
34013a1c:	07021c30 	.word	0x07021c30
34013a20:	07021830 	.word	0x07021830
34013a24:	07021030 	.word	0x07021030
34013a28:	07020c30 	.word	0x07020c30
34013a2c:	07020034 	.word	0x07020034
34013a30:	07011c30 	.word	0x07011c30
34013a34:	07011830 	.word	0x07011830
34013a38:	07011030 	.word	0x07011030
34013a3c:	07010c30 	.word	0x07010c30
34013a40:	07010034 	.word	0x07010034
34013a44:	07001c30 	.word	0x07001c30
34013a48:	07001830 	.word	0x07001830
34013a4c:	07001030 	.word	0x07001030
34013a50:	07000034 	.word	0x07000034
34013a54:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013a58:	f7fc ffec 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34013a5c:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013a5e:	68fa      	ldr	r2, [r7, #12]
34013a60:	68bb      	ldr	r3, [r7, #8]
34013a62:	fbb2 f3f3 	udiv	r3, r2, r3
34013a66:	60fb      	str	r3, [r7, #12]
            break;
34013a68:	e012      	b.n	34013a90 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013a6a:	f7fd f829 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34013a6e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013a70:	68fa      	ldr	r2, [r7, #12]
34013a72:	68bb      	ldr	r3, [r7, #8]
34013a74:	fbb2 f3f3 	udiv	r3, r2, r3
34013a78:	60fb      	str	r3, [r7, #12]
            break;
34013a7a:	e009      	b.n	34013a90 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013a7c:	f7fd f866 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34013a80:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013a82:	68fa      	ldr	r2, [r7, #12]
34013a84:	68bb      	ldr	r3, [r7, #8]
34013a86:	fbb2 f3f3 	udiv	r3, r2, r3
34013a8a:	60fb      	str	r3, [r7, #12]
            break;
34013a8c:	e000      	b.n	34013a90 <RCCEx_GetUARTCLKFreq+0x364>
            break;
34013a8e:	bf00      	nop
        }
      }
      break;
34013a90:	e063      	b.n	34013b5a <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
34013a92:	f7f5 fccb 	bl	3400942c <LL_RCC_IC14_IsEnabled>
34013a96:	4603      	mov	r3, r0
34013a98:	2b00      	cmp	r3, #0
34013a9a:	d060      	beq.n	34013b5e <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
34013a9c:	f7f5 fce8 	bl	34009470 <LL_RCC_IC14_GetDivider>
34013aa0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34013aa2:	f7f5 fcd7 	bl	34009454 <LL_RCC_IC14_GetSource>
34013aa6:	4603      	mov	r3, r0
34013aa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013aac:	d029      	beq.n	34013b02 <RCCEx_GetUARTCLKFreq+0x3d6>
34013aae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013ab2:	d82f      	bhi.n	34013b14 <RCCEx_GetUARTCLKFreq+0x3e8>
34013ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013ab8:	d01a      	beq.n	34013af0 <RCCEx_GetUARTCLKFreq+0x3c4>
34013aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013abe:	d829      	bhi.n	34013b14 <RCCEx_GetUARTCLKFreq+0x3e8>
34013ac0:	2b00      	cmp	r3, #0
34013ac2:	d003      	beq.n	34013acc <RCCEx_GetUARTCLKFreq+0x3a0>
34013ac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013ac8:	d009      	beq.n	34013ade <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013aca:	e023      	b.n	34013b14 <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013acc:	f7fc ff6c 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34013ad0:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013ad2:	68fa      	ldr	r2, [r7, #12]
34013ad4:	68bb      	ldr	r3, [r7, #8]
34013ad6:	fbb2 f3f3 	udiv	r3, r2, r3
34013ada:	60fb      	str	r3, [r7, #12]
            break;
34013adc:	e01b      	b.n	34013b16 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013ade:	f7fc ffa9 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34013ae2:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013ae4:	68fa      	ldr	r2, [r7, #12]
34013ae6:	68bb      	ldr	r3, [r7, #8]
34013ae8:	fbb2 f3f3 	udiv	r3, r2, r3
34013aec:	60fb      	str	r3, [r7, #12]
            break;
34013aee:	e012      	b.n	34013b16 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013af0:	f7fc ffe6 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34013af4:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013af6:	68fa      	ldr	r2, [r7, #12]
34013af8:	68bb      	ldr	r3, [r7, #8]
34013afa:	fbb2 f3f3 	udiv	r3, r2, r3
34013afe:	60fb      	str	r3, [r7, #12]
            break;
34013b00:	e009      	b.n	34013b16 <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013b02:	f7fd f823 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34013b06:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013b08:	68fa      	ldr	r2, [r7, #12]
34013b0a:	68bb      	ldr	r3, [r7, #8]
34013b0c:	fbb2 f3f3 	udiv	r3, r2, r3
34013b10:	60fb      	str	r3, [r7, #12]
            break;
34013b12:	e000      	b.n	34013b16 <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
34013b14:	bf00      	nop
        }
      }
      break;
34013b16:	e022      	b.n	34013b5e <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34013b18:	f7f4 fb64 	bl	340081e4 <LL_RCC_HSI_IsReady>
34013b1c:	4603      	mov	r3, r0
34013b1e:	2b00      	cmp	r3, #0
34013b20:	d01f      	beq.n	34013b62 <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34013b22:	f7f4 fb71 	bl	34008208 <LL_RCC_HSI_GetDivider>
34013b26:	4603      	mov	r3, r0
34013b28:	09db      	lsrs	r3, r3, #7
34013b2a:	4a13      	ldr	r2, [pc, #76]	@ (34013b78 <RCCEx_GetUARTCLKFreq+0x44c>)
34013b2c:	fa22 f303 	lsr.w	r3, r2, r3
34013b30:	60fb      	str	r3, [r7, #12]
      }
      break;
34013b32:	e016      	b.n	34013b62 <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34013b34:	f7f4 fb76 	bl	34008224 <LL_RCC_MSI_IsReady>
34013b38:	4603      	mov	r3, r0
34013b3a:	2b00      	cmp	r3, #0
34013b3c:	d013      	beq.n	34013b66 <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
34013b3e:	4b0f      	ldr	r3, [pc, #60]	@ (34013b7c <RCCEx_GetUARTCLKFreq+0x450>)
34013b40:	60fb      	str	r3, [r7, #12]
      }
      break;
34013b42:	e010      	b.n	34013b66 <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
34013b44:	f7f4 fb8e 	bl	34008264 <LL_RCC_LSE_IsReady>
34013b48:	4603      	mov	r3, r0
34013b4a:	2b00      	cmp	r3, #0
34013b4c:	d00d      	beq.n	34013b6a <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
34013b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34013b52:	60fb      	str	r3, [r7, #12]
      }
      break;
34013b54:	e009      	b.n	34013b6a <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
34013b56:	bf00      	nop
34013b58:	e008      	b.n	34013b6c <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013b5a:	bf00      	nop
34013b5c:	e006      	b.n	34013b6c <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013b5e:	bf00      	nop
34013b60:	e004      	b.n	34013b6c <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013b62:	bf00      	nop
34013b64:	e002      	b.n	34013b6c <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013b66:	bf00      	nop
34013b68:	e000      	b.n	34013b6c <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013b6a:	bf00      	nop
  }

  return uart_frequency;
34013b6c:	68fb      	ldr	r3, [r7, #12]
}
34013b6e:	4618      	mov	r0, r3
34013b70:	3710      	adds	r7, #16
34013b72:	46bd      	mov	sp, r7
34013b74:	bd80      	pop	{r7, pc}
34013b76:	bf00      	nop
34013b78:	03d09000 	.word	0x03d09000
34013b7c:	003d0900 	.word	0x003d0900

34013b80 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
34013b80:	b580      	push	{r7, lr}
34013b82:	b084      	sub	sp, #16
34013b84:	af00      	add	r7, sp, #0
34013b86:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
34013b88:	2300      	movs	r3, #0
34013b8a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34013b8c:	6878      	ldr	r0, [r7, #4]
34013b8e:	f7f4 ff11 	bl	340089b4 <LL_RCC_GetUSARTClockSource>
34013b92:	4603      	mov	r3, r0
34013b94:	4aa2      	ldr	r2, [pc, #648]	@ (34013e20 <RCCEx_GetUSARTCLKFreq+0x2a0>)
34013b96:	4293      	cmp	r3, r2
34013b98:	f000 81e8 	beq.w	34013f6c <RCCEx_GetUSARTCLKFreq+0x3ec>
34013b9c:	4aa0      	ldr	r2, [pc, #640]	@ (34013e20 <RCCEx_GetUSARTCLKFreq+0x2a0>)
34013b9e:	4293      	cmp	r3, r2
34013ba0:	f200 8203 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013ba4:	4a9f      	ldr	r2, [pc, #636]	@ (34013e24 <RCCEx_GetUSARTCLKFreq+0x2a4>)
34013ba6:	4293      	cmp	r3, r2
34013ba8:	f000 81e0 	beq.w	34013f6c <RCCEx_GetUSARTCLKFreq+0x3ec>
34013bac:	4a9d      	ldr	r2, [pc, #628]	@ (34013e24 <RCCEx_GetUSARTCLKFreq+0x2a4>)
34013bae:	4293      	cmp	r3, r2
34013bb0:	f200 81fb 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013bb4:	4a9c      	ldr	r2, [pc, #624]	@ (34013e28 <RCCEx_GetUSARTCLKFreq+0x2a8>)
34013bb6:	4293      	cmp	r3, r2
34013bb8:	f000 81d8 	beq.w	34013f6c <RCCEx_GetUSARTCLKFreq+0x3ec>
34013bbc:	4a9a      	ldr	r2, [pc, #616]	@ (34013e28 <RCCEx_GetUSARTCLKFreq+0x2a8>)
34013bbe:	4293      	cmp	r3, r2
34013bc0:	f200 81f3 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013bc4:	4a99      	ldr	r2, [pc, #612]	@ (34013e2c <RCCEx_GetUSARTCLKFreq+0x2ac>)
34013bc6:	4293      	cmp	r3, r2
34013bc8:	f000 81d0 	beq.w	34013f6c <RCCEx_GetUSARTCLKFreq+0x3ec>
34013bcc:	4a97      	ldr	r2, [pc, #604]	@ (34013e2c <RCCEx_GetUSARTCLKFreq+0x2ac>)
34013bce:	4293      	cmp	r3, r2
34013bd0:	f200 81eb 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013bd4:	4a96      	ldr	r2, [pc, #600]	@ (34013e30 <RCCEx_GetUSARTCLKFreq+0x2b0>)
34013bd6:	4293      	cmp	r3, r2
34013bd8:	f000 81c8 	beq.w	34013f6c <RCCEx_GetUSARTCLKFreq+0x3ec>
34013bdc:	4a94      	ldr	r2, [pc, #592]	@ (34013e30 <RCCEx_GetUSARTCLKFreq+0x2b0>)
34013bde:	4293      	cmp	r3, r2
34013be0:	f200 81e3 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013be4:	4a93      	ldr	r2, [pc, #588]	@ (34013e34 <RCCEx_GetUSARTCLKFreq+0x2b4>)
34013be6:	4293      	cmp	r3, r2
34013be8:	f000 81ce 	beq.w	34013f88 <RCCEx_GetUSARTCLKFreq+0x408>
34013bec:	4a91      	ldr	r2, [pc, #580]	@ (34013e34 <RCCEx_GetUSARTCLKFreq+0x2b4>)
34013bee:	4293      	cmp	r3, r2
34013bf0:	f200 81db 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013bf4:	4a90      	ldr	r2, [pc, #576]	@ (34013e38 <RCCEx_GetUSARTCLKFreq+0x2b8>)
34013bf6:	4293      	cmp	r3, r2
34013bf8:	f000 81c6 	beq.w	34013f88 <RCCEx_GetUSARTCLKFreq+0x408>
34013bfc:	4a8e      	ldr	r2, [pc, #568]	@ (34013e38 <RCCEx_GetUSARTCLKFreq+0x2b8>)
34013bfe:	4293      	cmp	r3, r2
34013c00:	f200 81d3 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013c04:	4a8d      	ldr	r2, [pc, #564]	@ (34013e3c <RCCEx_GetUSARTCLKFreq+0x2bc>)
34013c06:	4293      	cmp	r3, r2
34013c08:	f000 81be 	beq.w	34013f88 <RCCEx_GetUSARTCLKFreq+0x408>
34013c0c:	4a8b      	ldr	r2, [pc, #556]	@ (34013e3c <RCCEx_GetUSARTCLKFreq+0x2bc>)
34013c0e:	4293      	cmp	r3, r2
34013c10:	f200 81cb 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013c14:	4a8a      	ldr	r2, [pc, #552]	@ (34013e40 <RCCEx_GetUSARTCLKFreq+0x2c0>)
34013c16:	4293      	cmp	r3, r2
34013c18:	f000 81b6 	beq.w	34013f88 <RCCEx_GetUSARTCLKFreq+0x408>
34013c1c:	4a88      	ldr	r2, [pc, #544]	@ (34013e40 <RCCEx_GetUSARTCLKFreq+0x2c0>)
34013c1e:	4293      	cmp	r3, r2
34013c20:	f200 81c3 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013c24:	4a87      	ldr	r2, [pc, #540]	@ (34013e44 <RCCEx_GetUSARTCLKFreq+0x2c4>)
34013c26:	4293      	cmp	r3, r2
34013c28:	f000 81ae 	beq.w	34013f88 <RCCEx_GetUSARTCLKFreq+0x408>
34013c2c:	4a85      	ldr	r2, [pc, #532]	@ (34013e44 <RCCEx_GetUSARTCLKFreq+0x2c4>)
34013c2e:	4293      	cmp	r3, r2
34013c30:	f200 81bb 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013c34:	4a84      	ldr	r2, [pc, #528]	@ (34013e48 <RCCEx_GetUSARTCLKFreq+0x2c8>)
34013c36:	4293      	cmp	r3, r2
34013c38:	f000 81ae 	beq.w	34013f98 <RCCEx_GetUSARTCLKFreq+0x418>
34013c3c:	4a82      	ldr	r2, [pc, #520]	@ (34013e48 <RCCEx_GetUSARTCLKFreq+0x2c8>)
34013c3e:	4293      	cmp	r3, r2
34013c40:	f200 81b3 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013c44:	4a81      	ldr	r2, [pc, #516]	@ (34013e4c <RCCEx_GetUSARTCLKFreq+0x2cc>)
34013c46:	4293      	cmp	r3, r2
34013c48:	f000 81a6 	beq.w	34013f98 <RCCEx_GetUSARTCLKFreq+0x418>
34013c4c:	4a7f      	ldr	r2, [pc, #508]	@ (34013e4c <RCCEx_GetUSARTCLKFreq+0x2cc>)
34013c4e:	4293      	cmp	r3, r2
34013c50:	f200 81ab 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013c54:	4a7e      	ldr	r2, [pc, #504]	@ (34013e50 <RCCEx_GetUSARTCLKFreq+0x2d0>)
34013c56:	4293      	cmp	r3, r2
34013c58:	f000 819e 	beq.w	34013f98 <RCCEx_GetUSARTCLKFreq+0x418>
34013c5c:	4a7c      	ldr	r2, [pc, #496]	@ (34013e50 <RCCEx_GetUSARTCLKFreq+0x2d0>)
34013c5e:	4293      	cmp	r3, r2
34013c60:	f200 81a3 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013c64:	4a7b      	ldr	r2, [pc, #492]	@ (34013e54 <RCCEx_GetUSARTCLKFreq+0x2d4>)
34013c66:	4293      	cmp	r3, r2
34013c68:	f000 8196 	beq.w	34013f98 <RCCEx_GetUSARTCLKFreq+0x418>
34013c6c:	4a79      	ldr	r2, [pc, #484]	@ (34013e54 <RCCEx_GetUSARTCLKFreq+0x2d4>)
34013c6e:	4293      	cmp	r3, r2
34013c70:	f200 819b 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013c74:	4a78      	ldr	r2, [pc, #480]	@ (34013e58 <RCCEx_GetUSARTCLKFreq+0x2d8>)
34013c76:	4293      	cmp	r3, r2
34013c78:	f000 818e 	beq.w	34013f98 <RCCEx_GetUSARTCLKFreq+0x418>
34013c7c:	4a76      	ldr	r2, [pc, #472]	@ (34013e58 <RCCEx_GetUSARTCLKFreq+0x2d8>)
34013c7e:	4293      	cmp	r3, r2
34013c80:	f200 8193 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013c84:	4a75      	ldr	r2, [pc, #468]	@ (34013e5c <RCCEx_GetUSARTCLKFreq+0x2dc>)
34013c86:	4293      	cmp	r3, r2
34013c88:	f000 812d 	beq.w	34013ee6 <RCCEx_GetUSARTCLKFreq+0x366>
34013c8c:	4a73      	ldr	r2, [pc, #460]	@ (34013e5c <RCCEx_GetUSARTCLKFreq+0x2dc>)
34013c8e:	4293      	cmp	r3, r2
34013c90:	f200 818b 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013c94:	4a72      	ldr	r2, [pc, #456]	@ (34013e60 <RCCEx_GetUSARTCLKFreq+0x2e0>)
34013c96:	4293      	cmp	r3, r2
34013c98:	f000 8125 	beq.w	34013ee6 <RCCEx_GetUSARTCLKFreq+0x366>
34013c9c:	4a70      	ldr	r2, [pc, #448]	@ (34013e60 <RCCEx_GetUSARTCLKFreq+0x2e0>)
34013c9e:	4293      	cmp	r3, r2
34013ca0:	f200 8183 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013ca4:	4a6f      	ldr	r2, [pc, #444]	@ (34013e64 <RCCEx_GetUSARTCLKFreq+0x2e4>)
34013ca6:	4293      	cmp	r3, r2
34013ca8:	f000 811d 	beq.w	34013ee6 <RCCEx_GetUSARTCLKFreq+0x366>
34013cac:	4a6d      	ldr	r2, [pc, #436]	@ (34013e64 <RCCEx_GetUSARTCLKFreq+0x2e4>)
34013cae:	4293      	cmp	r3, r2
34013cb0:	f200 817b 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013cb4:	4a6c      	ldr	r2, [pc, #432]	@ (34013e68 <RCCEx_GetUSARTCLKFreq+0x2e8>)
34013cb6:	4293      	cmp	r3, r2
34013cb8:	f000 8115 	beq.w	34013ee6 <RCCEx_GetUSARTCLKFreq+0x366>
34013cbc:	4a6a      	ldr	r2, [pc, #424]	@ (34013e68 <RCCEx_GetUSARTCLKFreq+0x2e8>)
34013cbe:	4293      	cmp	r3, r2
34013cc0:	f200 8173 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013cc4:	4a69      	ldr	r2, [pc, #420]	@ (34013e6c <RCCEx_GetUSARTCLKFreq+0x2ec>)
34013cc6:	4293      	cmp	r3, r2
34013cc8:	f000 810d 	beq.w	34013ee6 <RCCEx_GetUSARTCLKFreq+0x366>
34013ccc:	4a67      	ldr	r2, [pc, #412]	@ (34013e6c <RCCEx_GetUSARTCLKFreq+0x2ec>)
34013cce:	4293      	cmp	r3, r2
34013cd0:	f200 816b 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013cd4:	4a66      	ldr	r2, [pc, #408]	@ (34013e70 <RCCEx_GetUSARTCLKFreq+0x2f0>)
34013cd6:	4293      	cmp	r3, r2
34013cd8:	d07b      	beq.n	34013dd2 <RCCEx_GetUSARTCLKFreq+0x252>
34013cda:	4a65      	ldr	r2, [pc, #404]	@ (34013e70 <RCCEx_GetUSARTCLKFreq+0x2f0>)
34013cdc:	4293      	cmp	r3, r2
34013cde:	f200 8164 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013ce2:	4a64      	ldr	r2, [pc, #400]	@ (34013e74 <RCCEx_GetUSARTCLKFreq+0x2f4>)
34013ce4:	4293      	cmp	r3, r2
34013ce6:	d074      	beq.n	34013dd2 <RCCEx_GetUSARTCLKFreq+0x252>
34013ce8:	4a62      	ldr	r2, [pc, #392]	@ (34013e74 <RCCEx_GetUSARTCLKFreq+0x2f4>)
34013cea:	4293      	cmp	r3, r2
34013cec:	f200 815d 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013cf0:	4a61      	ldr	r2, [pc, #388]	@ (34013e78 <RCCEx_GetUSARTCLKFreq+0x2f8>)
34013cf2:	4293      	cmp	r3, r2
34013cf4:	d06d      	beq.n	34013dd2 <RCCEx_GetUSARTCLKFreq+0x252>
34013cf6:	4a60      	ldr	r2, [pc, #384]	@ (34013e78 <RCCEx_GetUSARTCLKFreq+0x2f8>)
34013cf8:	4293      	cmp	r3, r2
34013cfa:	f200 8156 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013cfe:	4a5f      	ldr	r2, [pc, #380]	@ (34013e7c <RCCEx_GetUSARTCLKFreq+0x2fc>)
34013d00:	4293      	cmp	r3, r2
34013d02:	d066      	beq.n	34013dd2 <RCCEx_GetUSARTCLKFreq+0x252>
34013d04:	4a5d      	ldr	r2, [pc, #372]	@ (34013e7c <RCCEx_GetUSARTCLKFreq+0x2fc>)
34013d06:	4293      	cmp	r3, r2
34013d08:	f200 814f 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013d0c:	4a5c      	ldr	r2, [pc, #368]	@ (34013e80 <RCCEx_GetUSARTCLKFreq+0x300>)
34013d0e:	4293      	cmp	r3, r2
34013d10:	d05f      	beq.n	34013dd2 <RCCEx_GetUSARTCLKFreq+0x252>
34013d12:	4a5b      	ldr	r2, [pc, #364]	@ (34013e80 <RCCEx_GetUSARTCLKFreq+0x300>)
34013d14:	4293      	cmp	r3, r2
34013d16:	f200 8148 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013d1a:	4a5a      	ldr	r2, [pc, #360]	@ (34013e84 <RCCEx_GetUSARTCLKFreq+0x304>)
34013d1c:	4293      	cmp	r3, r2
34013d1e:	d053      	beq.n	34013dc8 <RCCEx_GetUSARTCLKFreq+0x248>
34013d20:	4a58      	ldr	r2, [pc, #352]	@ (34013e84 <RCCEx_GetUSARTCLKFreq+0x304>)
34013d22:	4293      	cmp	r3, r2
34013d24:	f200 8141 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013d28:	4a57      	ldr	r2, [pc, #348]	@ (34013e88 <RCCEx_GetUSARTCLKFreq+0x308>)
34013d2a:	4293      	cmp	r3, r2
34013d2c:	d04c      	beq.n	34013dc8 <RCCEx_GetUSARTCLKFreq+0x248>
34013d2e:	4a56      	ldr	r2, [pc, #344]	@ (34013e88 <RCCEx_GetUSARTCLKFreq+0x308>)
34013d30:	4293      	cmp	r3, r2
34013d32:	f200 813a 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013d36:	4a55      	ldr	r2, [pc, #340]	@ (34013e8c <RCCEx_GetUSARTCLKFreq+0x30c>)
34013d38:	4293      	cmp	r3, r2
34013d3a:	d045      	beq.n	34013dc8 <RCCEx_GetUSARTCLKFreq+0x248>
34013d3c:	4a53      	ldr	r2, [pc, #332]	@ (34013e8c <RCCEx_GetUSARTCLKFreq+0x30c>)
34013d3e:	4293      	cmp	r3, r2
34013d40:	f200 8133 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013d44:	4a52      	ldr	r2, [pc, #328]	@ (34013e90 <RCCEx_GetUSARTCLKFreq+0x310>)
34013d46:	4293      	cmp	r3, r2
34013d48:	d03e      	beq.n	34013dc8 <RCCEx_GetUSARTCLKFreq+0x248>
34013d4a:	4a51      	ldr	r2, [pc, #324]	@ (34013e90 <RCCEx_GetUSARTCLKFreq+0x310>)
34013d4c:	4293      	cmp	r3, r2
34013d4e:	f200 812c 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013d52:	4a50      	ldr	r2, [pc, #320]	@ (34013e94 <RCCEx_GetUSARTCLKFreq+0x314>)
34013d54:	4293      	cmp	r3, r2
34013d56:	d037      	beq.n	34013dc8 <RCCEx_GetUSARTCLKFreq+0x248>
34013d58:	4a4e      	ldr	r2, [pc, #312]	@ (34013e94 <RCCEx_GetUSARTCLKFreq+0x314>)
34013d5a:	4293      	cmp	r3, r2
34013d5c:	f200 8125 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013d60:	4a4d      	ldr	r2, [pc, #308]	@ (34013e98 <RCCEx_GetUSARTCLKFreq+0x318>)
34013d62:	4293      	cmp	r3, r2
34013d64:	d018      	beq.n	34013d98 <RCCEx_GetUSARTCLKFreq+0x218>
34013d66:	4a4c      	ldr	r2, [pc, #304]	@ (34013e98 <RCCEx_GetUSARTCLKFreq+0x318>)
34013d68:	4293      	cmp	r3, r2
34013d6a:	f200 811e 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013d6e:	4a4b      	ldr	r2, [pc, #300]	@ (34013e9c <RCCEx_GetUSARTCLKFreq+0x31c>)
34013d70:	4293      	cmp	r3, r2
34013d72:	d01d      	beq.n	34013db0 <RCCEx_GetUSARTCLKFreq+0x230>
34013d74:	4a49      	ldr	r2, [pc, #292]	@ (34013e9c <RCCEx_GetUSARTCLKFreq+0x31c>)
34013d76:	4293      	cmp	r3, r2
34013d78:	f200 8117 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013d7c:	4a48      	ldr	r2, [pc, #288]	@ (34013ea0 <RCCEx_GetUSARTCLKFreq+0x320>)
34013d7e:	4293      	cmp	r3, r2
34013d80:	d00a      	beq.n	34013d98 <RCCEx_GetUSARTCLKFreq+0x218>
34013d82:	4a47      	ldr	r2, [pc, #284]	@ (34013ea0 <RCCEx_GetUSARTCLKFreq+0x320>)
34013d84:	4293      	cmp	r3, r2
34013d86:	f200 8110 	bhi.w	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
34013d8a:	4a46      	ldr	r2, [pc, #280]	@ (34013ea4 <RCCEx_GetUSARTCLKFreq+0x324>)
34013d8c:	4293      	cmp	r3, r2
34013d8e:	d003      	beq.n	34013d98 <RCCEx_GetUSARTCLKFreq+0x218>
34013d90:	4a45      	ldr	r2, [pc, #276]	@ (34013ea8 <RCCEx_GetUSARTCLKFreq+0x328>)
34013d92:	4293      	cmp	r3, r2
34013d94:	d00c      	beq.n	34013db0 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
34013d96:	e108      	b.n	34013faa <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013d98:	f7f3 fe26 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34013d9c:	4603      	mov	r3, r0
34013d9e:	4618      	mov	r0, r3
34013da0:	f7fc ff1a 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34013da4:	4603      	mov	r3, r0
34013da6:	4618      	mov	r0, r3
34013da8:	f7fc ff37 	bl	34010c1a <RCCEx_GetPCLK2Freq>
34013dac:	60f8      	str	r0, [r7, #12]
      break;
34013dae:	e107      	b.n	34013fc0 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013db0:	f7f3 fe1a 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34013db4:	4603      	mov	r3, r0
34013db6:	4618      	mov	r0, r3
34013db8:	f7fc ff0e 	bl	34010bd8 <RCCEx_GetHCLKFreq>
34013dbc:	4603      	mov	r3, r0
34013dbe:	4618      	mov	r0, r3
34013dc0:	f7fc ff1b 	bl	34010bfa <RCCEx_GetPCLK1Freq>
34013dc4:	60f8      	str	r0, [r7, #12]
      break;
34013dc6:	e0fb      	b.n	34013fc0 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013dc8:	2007      	movs	r0, #7
34013dca:	f7fd f9f1 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
34013dce:	60f8      	str	r0, [r7, #12]
      break;
34013dd0:	e0f6      	b.n	34013fc0 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34013dd2:	f7f5 fa2b 	bl	3400922c <LL_RCC_IC9_IsEnabled>
34013dd6:	4603      	mov	r3, r0
34013dd8:	2b00      	cmp	r3, #0
34013dda:	f000 80e8 	beq.w	34013fae <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
34013dde:	f7f5 fa47 	bl	34009270 <LL_RCC_IC9_GetDivider>
34013de2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34013de4:	f7f5 fa36 	bl	34009254 <LL_RCC_IC9_GetSource>
34013de8:	4603      	mov	r3, r0
34013dea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013dee:	d06f      	beq.n	34013ed0 <RCCEx_GetUSARTCLKFreq+0x350>
34013df0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013df4:	d875      	bhi.n	34013ee2 <RCCEx_GetUSARTCLKFreq+0x362>
34013df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013dfa:	d060      	beq.n	34013ebe <RCCEx_GetUSARTCLKFreq+0x33e>
34013dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013e00:	d86f      	bhi.n	34013ee2 <RCCEx_GetUSARTCLKFreq+0x362>
34013e02:	2b00      	cmp	r3, #0
34013e04:	d003      	beq.n	34013e0e <RCCEx_GetUSARTCLKFreq+0x28e>
34013e06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013e0a:	d04f      	beq.n	34013eac <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
34013e0c:	e069      	b.n	34013ee2 <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013e0e:	f7fc fdcb 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34013e12:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013e14:	68fa      	ldr	r2, [r7, #12]
34013e16:	68bb      	ldr	r3, [r7, #8]
34013e18:	fbb2 f3f3 	udiv	r3, r2, r3
34013e1c:	60fb      	str	r3, [r7, #12]
            break;
34013e1e:	e061      	b.n	34013ee4 <RCCEx_GetUSARTCLKFreq+0x364>
34013e20:	07061430 	.word	0x07061430
34013e24:	07060830 	.word	0x07060830
34013e28:	07060434 	.word	0x07060434
34013e2c:	07060430 	.word	0x07060430
34013e30:	07060030 	.word	0x07060030
34013e34:	07051430 	.word	0x07051430
34013e38:	07050830 	.word	0x07050830
34013e3c:	07050434 	.word	0x07050434
34013e40:	07050430 	.word	0x07050430
34013e44:	07050030 	.word	0x07050030
34013e48:	07041430 	.word	0x07041430
34013e4c:	07040830 	.word	0x07040830
34013e50:	07040434 	.word	0x07040434
34013e54:	07040430 	.word	0x07040430
34013e58:	07040030 	.word	0x07040030
34013e5c:	07031430 	.word	0x07031430
34013e60:	07030830 	.word	0x07030830
34013e64:	07030434 	.word	0x07030434
34013e68:	07030430 	.word	0x07030430
34013e6c:	07030030 	.word	0x07030030
34013e70:	07021430 	.word	0x07021430
34013e74:	07020830 	.word	0x07020830
34013e78:	07020434 	.word	0x07020434
34013e7c:	07020430 	.word	0x07020430
34013e80:	07020030 	.word	0x07020030
34013e84:	07011430 	.word	0x07011430
34013e88:	07010830 	.word	0x07010830
34013e8c:	07010434 	.word	0x07010434
34013e90:	07010430 	.word	0x07010430
34013e94:	07010030 	.word	0x07010030
34013e98:	07001430 	.word	0x07001430
34013e9c:	07000830 	.word	0x07000830
34013ea0:	07000434 	.word	0x07000434
34013ea4:	07000030 	.word	0x07000030
34013ea8:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013eac:	f7fc fdc2 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34013eb0:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013eb2:	68fa      	ldr	r2, [r7, #12]
34013eb4:	68bb      	ldr	r3, [r7, #8]
34013eb6:	fbb2 f3f3 	udiv	r3, r2, r3
34013eba:	60fb      	str	r3, [r7, #12]
            break;
34013ebc:	e012      	b.n	34013ee4 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013ebe:	f7fc fdff 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34013ec2:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013ec4:	68fa      	ldr	r2, [r7, #12]
34013ec6:	68bb      	ldr	r3, [r7, #8]
34013ec8:	fbb2 f3f3 	udiv	r3, r2, r3
34013ecc:	60fb      	str	r3, [r7, #12]
            break;
34013ece:	e009      	b.n	34013ee4 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013ed0:	f7fc fe3c 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34013ed4:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013ed6:	68fa      	ldr	r2, [r7, #12]
34013ed8:	68bb      	ldr	r3, [r7, #8]
34013eda:	fbb2 f3f3 	udiv	r3, r2, r3
34013ede:	60fb      	str	r3, [r7, #12]
            break;
34013ee0:	e000      	b.n	34013ee4 <RCCEx_GetUSARTCLKFreq+0x364>
            break;
34013ee2:	bf00      	nop
      break;
34013ee4:	e063      	b.n	34013fae <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34013ee6:	f7f5 faa1 	bl	3400942c <LL_RCC_IC14_IsEnabled>
34013eea:	4603      	mov	r3, r0
34013eec:	2b00      	cmp	r3, #0
34013eee:	d060      	beq.n	34013fb2 <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
34013ef0:	f7f5 fabe 	bl	34009470 <LL_RCC_IC14_GetDivider>
34013ef4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34013ef6:	f7f5 faad 	bl	34009454 <LL_RCC_IC14_GetSource>
34013efa:	4603      	mov	r3, r0
34013efc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013f00:	d029      	beq.n	34013f56 <RCCEx_GetUSARTCLKFreq+0x3d6>
34013f02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013f06:	d82f      	bhi.n	34013f68 <RCCEx_GetUSARTCLKFreq+0x3e8>
34013f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013f0c:	d01a      	beq.n	34013f44 <RCCEx_GetUSARTCLKFreq+0x3c4>
34013f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013f12:	d829      	bhi.n	34013f68 <RCCEx_GetUSARTCLKFreq+0x3e8>
34013f14:	2b00      	cmp	r3, #0
34013f16:	d003      	beq.n	34013f20 <RCCEx_GetUSARTCLKFreq+0x3a0>
34013f18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013f1c:	d009      	beq.n	34013f32 <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
34013f1e:	e023      	b.n	34013f68 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013f20:	f7fc fd42 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34013f24:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013f26:	68fa      	ldr	r2, [r7, #12]
34013f28:	68bb      	ldr	r3, [r7, #8]
34013f2a:	fbb2 f3f3 	udiv	r3, r2, r3
34013f2e:	60fb      	str	r3, [r7, #12]
            break;
34013f30:	e01b      	b.n	34013f6a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013f32:	f7fc fd7f 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34013f36:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013f38:	68fa      	ldr	r2, [r7, #12]
34013f3a:	68bb      	ldr	r3, [r7, #8]
34013f3c:	fbb2 f3f3 	udiv	r3, r2, r3
34013f40:	60fb      	str	r3, [r7, #12]
            break;
34013f42:	e012      	b.n	34013f6a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013f44:	f7fc fdbc 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34013f48:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013f4a:	68fa      	ldr	r2, [r7, #12]
34013f4c:	68bb      	ldr	r3, [r7, #8]
34013f4e:	fbb2 f3f3 	udiv	r3, r2, r3
34013f52:	60fb      	str	r3, [r7, #12]
            break;
34013f54:	e009      	b.n	34013f6a <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013f56:	f7fc fdf9 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34013f5a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013f5c:	68fa      	ldr	r2, [r7, #12]
34013f5e:	68bb      	ldr	r3, [r7, #8]
34013f60:	fbb2 f3f3 	udiv	r3, r2, r3
34013f64:	60fb      	str	r3, [r7, #12]
            break;
34013f66:	e000      	b.n	34013f6a <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
34013f68:	bf00      	nop
      break;
34013f6a:	e022      	b.n	34013fb2 <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
34013f6c:	f7f4 f93a 	bl	340081e4 <LL_RCC_HSI_IsReady>
34013f70:	4603      	mov	r3, r0
34013f72:	2b00      	cmp	r3, #0
34013f74:	d01f      	beq.n	34013fb6 <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34013f76:	f7f4 f947 	bl	34008208 <LL_RCC_HSI_GetDivider>
34013f7a:	4603      	mov	r3, r0
34013f7c:	09db      	lsrs	r3, r3, #7
34013f7e:	4a13      	ldr	r2, [pc, #76]	@ (34013fcc <RCCEx_GetUSARTCLKFreq+0x44c>)
34013f80:	fa22 f303 	lsr.w	r3, r2, r3
34013f84:	60fb      	str	r3, [r7, #12]
      break;
34013f86:	e016      	b.n	34013fb6 <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
34013f88:	f7f4 f94c 	bl	34008224 <LL_RCC_MSI_IsReady>
34013f8c:	4603      	mov	r3, r0
34013f8e:	2b00      	cmp	r3, #0
34013f90:	d013      	beq.n	34013fba <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
34013f92:	4b0f      	ldr	r3, [pc, #60]	@ (34013fd0 <RCCEx_GetUSARTCLKFreq+0x450>)
34013f94:	60fb      	str	r3, [r7, #12]
      break;
34013f96:	e010      	b.n	34013fba <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
34013f98:	f7f4 f964 	bl	34008264 <LL_RCC_LSE_IsReady>
34013f9c:	4603      	mov	r3, r0
34013f9e:	2b00      	cmp	r3, #0
34013fa0:	d00d      	beq.n	34013fbe <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
34013fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34013fa6:	60fb      	str	r3, [r7, #12]
      break;
34013fa8:	e009      	b.n	34013fbe <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
34013faa:	bf00      	nop
34013fac:	e008      	b.n	34013fc0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34013fae:	bf00      	nop
34013fb0:	e006      	b.n	34013fc0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34013fb2:	bf00      	nop
34013fb4:	e004      	b.n	34013fc0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34013fb6:	bf00      	nop
34013fb8:	e002      	b.n	34013fc0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34013fba:	bf00      	nop
34013fbc:	e000      	b.n	34013fc0 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34013fbe:	bf00      	nop
  }

  return usart_frequency;
34013fc0:	68fb      	ldr	r3, [r7, #12]
}
34013fc2:	4618      	mov	r0, r3
34013fc4:	3710      	adds	r7, #16
34013fc6:	46bd      	mov	sp, r7
34013fc8:	bd80      	pop	{r7, pc}
34013fca:	bf00      	nop
34013fcc:	03d09000 	.word	0x03d09000
34013fd0:	003d0900 	.word	0x003d0900

34013fd4 <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
34013fd4:	b580      	push	{r7, lr}
34013fd6:	b084      	sub	sp, #16
34013fd8:	af00      	add	r7, sp, #0
34013fda:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34013fdc:	2300      	movs	r3, #0
34013fde:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34013fe0:	6878      	ldr	r0, [r7, #4]
34013fe2:	f7f4 fcff 	bl	340089e4 <LL_RCC_GetUSBClockSource>
34013fe6:	4603      	mov	r3, r0
34013fe8:	4a4b      	ldr	r2, [pc, #300]	@ (34014118 <RCCEx_GetOTGPHYCLKFreq+0x144>)
34013fea:	4293      	cmp	r3, r2
34013fec:	d035      	beq.n	3401405a <RCCEx_GetOTGPHYCLKFreq+0x86>
34013fee:	4a4a      	ldr	r2, [pc, #296]	@ (34014118 <RCCEx_GetOTGPHYCLKFreq+0x144>)
34013ff0:	4293      	cmp	r3, r2
34013ff2:	f200 8085 	bhi.w	34014100 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34013ff6:	4a49      	ldr	r2, [pc, #292]	@ (3401411c <RCCEx_GetOTGPHYCLKFreq+0x148>)
34013ff8:	4293      	cmp	r3, r2
34013ffa:	d02e      	beq.n	3401405a <RCCEx_GetOTGPHYCLKFreq+0x86>
34013ffc:	4a47      	ldr	r2, [pc, #284]	@ (3401411c <RCCEx_GetOTGPHYCLKFreq+0x148>)
34013ffe:	4293      	cmp	r3, r2
34014000:	d87e      	bhi.n	34014100 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34014002:	4a47      	ldr	r2, [pc, #284]	@ (34014120 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
34014004:	4293      	cmp	r3, r2
34014006:	d038      	beq.n	3401407a <RCCEx_GetOTGPHYCLKFreq+0xa6>
34014008:	4a45      	ldr	r2, [pc, #276]	@ (34014120 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3401400a:	4293      	cmp	r3, r2
3401400c:	d878      	bhi.n	34014100 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401400e:	4a45      	ldr	r2, [pc, #276]	@ (34014124 <RCCEx_GetOTGPHYCLKFreq+0x150>)
34014010:	4293      	cmp	r3, r2
34014012:	d032      	beq.n	3401407a <RCCEx_GetOTGPHYCLKFreq+0xa6>
34014014:	4a43      	ldr	r2, [pc, #268]	@ (34014124 <RCCEx_GetOTGPHYCLKFreq+0x150>)
34014016:	4293      	cmp	r3, r2
34014018:	d872      	bhi.n	34014100 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401401a:	4a43      	ldr	r2, [pc, #268]	@ (34014128 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3401401c:	4293      	cmp	r3, r2
3401401e:	d00f      	beq.n	34014040 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34014020:	4a41      	ldr	r2, [pc, #260]	@ (34014128 <RCCEx_GetOTGPHYCLKFreq+0x154>)
34014022:	4293      	cmp	r3, r2
34014024:	d86c      	bhi.n	34014100 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34014026:	4a41      	ldr	r2, [pc, #260]	@ (3401412c <RCCEx_GetOTGPHYCLKFreq+0x158>)
34014028:	4293      	cmp	r3, r2
3401402a:	d009      	beq.n	34014040 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3401402c:	4a3f      	ldr	r2, [pc, #252]	@ (3401412c <RCCEx_GetOTGPHYCLKFreq+0x158>)
3401402e:	4293      	cmp	r3, r2
34014030:	d866      	bhi.n	34014100 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34014032:	4a3f      	ldr	r2, [pc, #252]	@ (34014130 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
34014034:	4293      	cmp	r3, r2
34014036:	d008      	beq.n	3401404a <RCCEx_GetOTGPHYCLKFreq+0x76>
34014038:	4a3e      	ldr	r2, [pc, #248]	@ (34014134 <RCCEx_GetOTGPHYCLKFreq+0x160>)
3401403a:	4293      	cmp	r3, r2
3401403c:	d005      	beq.n	3401404a <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
3401403e:	e05f      	b.n	34014100 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34014040:	2007      	movs	r0, #7
34014042:	f7fd f8b5 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
34014046:	60f8      	str	r0, [r7, #12]
      break;
34014048:	e061      	b.n	3401410e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
3401404a:	f7f4 f8b9 	bl	340081c0 <LL_RCC_HSE_IsReady>
3401404e:	4603      	mov	r3, r0
34014050:	2b00      	cmp	r3, #0
34014052:	d057      	beq.n	34014104 <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
34014054:	4b38      	ldr	r3, [pc, #224]	@ (34014138 <RCCEx_GetOTGPHYCLKFreq+0x164>)
34014056:	60fb      	str	r3, [r7, #12]
      break;
34014058:	e054      	b.n	34014104 <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
3401405a:	f7f4 f8b1 	bl	340081c0 <LL_RCC_HSE_IsReady>
3401405e:	4603      	mov	r3, r0
34014060:	2b00      	cmp	r3, #0
34014062:	d051      	beq.n	34014108 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34014064:	f7f4 f89a 	bl	3400819c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34014068:	4603      	mov	r3, r0
3401406a:	2b00      	cmp	r3, #0
3401406c:	d102      	bne.n	34014074 <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
3401406e:	4b33      	ldr	r3, [pc, #204]	@ (3401413c <RCCEx_GetOTGPHYCLKFreq+0x168>)
34014070:	60fb      	str	r3, [r7, #12]
      break;
34014072:	e049      	b.n	34014108 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
34014074:	4b30      	ldr	r3, [pc, #192]	@ (34014138 <RCCEx_GetOTGPHYCLKFreq+0x164>)
34014076:	60fb      	str	r3, [r7, #12]
      break;
34014078:	e046      	b.n	34014108 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401407a:	f7f5 fa17 	bl	340094ac <LL_RCC_IC15_IsEnabled>
3401407e:	4603      	mov	r3, r0
34014080:	2b00      	cmp	r3, #0
34014082:	d043      	beq.n	3401410c <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
34014084:	f7f5 fa34 	bl	340094f0 <LL_RCC_IC15_GetDivider>
34014088:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3401408a:	f7f5 fa23 	bl	340094d4 <LL_RCC_IC15_GetSource>
3401408e:	4603      	mov	r3, r0
34014090:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014094:	d029      	beq.n	340140ea <RCCEx_GetOTGPHYCLKFreq+0x116>
34014096:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401409a:	d82f      	bhi.n	340140fc <RCCEx_GetOTGPHYCLKFreq+0x128>
3401409c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340140a0:	d01a      	beq.n	340140d8 <RCCEx_GetOTGPHYCLKFreq+0x104>
340140a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340140a6:	d829      	bhi.n	340140fc <RCCEx_GetOTGPHYCLKFreq+0x128>
340140a8:	2b00      	cmp	r3, #0
340140aa:	d003      	beq.n	340140b4 <RCCEx_GetOTGPHYCLKFreq+0xe0>
340140ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340140b0:	d009      	beq.n	340140c6 <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
340140b2:	e023      	b.n	340140fc <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340140b4:	f7fc fc78 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340140b8:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
340140ba:	68fa      	ldr	r2, [r7, #12]
340140bc:	68bb      	ldr	r3, [r7, #8]
340140be:	fbb2 f3f3 	udiv	r3, r2, r3
340140c2:	60fb      	str	r3, [r7, #12]
            break;
340140c4:	e01b      	b.n	340140fe <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340140c6:	f7fc fcb5 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
340140ca:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
340140cc:	68fa      	ldr	r2, [r7, #12]
340140ce:	68bb      	ldr	r3, [r7, #8]
340140d0:	fbb2 f3f3 	udiv	r3, r2, r3
340140d4:	60fb      	str	r3, [r7, #12]
            break;
340140d6:	e012      	b.n	340140fe <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340140d8:	f7fc fcf2 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
340140dc:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
340140de:	68fa      	ldr	r2, [r7, #12]
340140e0:	68bb      	ldr	r3, [r7, #8]
340140e2:	fbb2 f3f3 	udiv	r3, r2, r3
340140e6:	60fb      	str	r3, [r7, #12]
            break;
340140e8:	e009      	b.n	340140fe <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340140ea:	f7fc fd2f 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
340140ee:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
340140f0:	68fa      	ldr	r2, [r7, #12]
340140f2:	68bb      	ldr	r3, [r7, #8]
340140f4:	fbb2 f3f3 	udiv	r3, r2, r3
340140f8:	60fb      	str	r3, [r7, #12]
            break;
340140fa:	e000      	b.n	340140fe <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
340140fc:	bf00      	nop
      break;
340140fe:	e005      	b.n	3401410c <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
34014100:	bf00      	nop
34014102:	e004      	b.n	3401410e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34014104:	bf00      	nop
34014106:	e002      	b.n	3401410e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34014108:	bf00      	nop
3401410a:	e000      	b.n	3401410e <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3401410c:	bf00      	nop
  }

  return usb_frequency;
3401410e:	68fb      	ldr	r3, [r7, #12]
}
34014110:	4618      	mov	r0, r3
34014112:	3710      	adds	r7, #16
34014114:	46bd      	mov	sp, r7
34014116:	bd80      	pop	{r7, pc}
34014118:	03031414 	.word	0x03031414
3401411c:	03030c14 	.word	0x03030c14
34014120:	03021414 	.word	0x03021414
34014124:	03020c14 	.word	0x03020c14
34014128:	03011414 	.word	0x03011414
3401412c:	03010c14 	.word	0x03010c14
34014130:	03000c14 	.word	0x03000c14
34014134:	03001414 	.word	0x03001414
34014138:	016e3600 	.word	0x016e3600
3401413c:	02dc6c00 	.word	0x02dc6c00

34014140 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
34014140:	b580      	push	{r7, lr}
34014142:	b084      	sub	sp, #16
34014144:	af00      	add	r7, sp, #0
34014146:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34014148:	2300      	movs	r3, #0
3401414a:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3401414c:	6878      	ldr	r0, [r7, #4]
3401414e:	f7f4 fc49 	bl	340089e4 <LL_RCC_GetUSBClockSource>
34014152:	4603      	mov	r3, r0
34014154:	4a1a      	ldr	r2, [pc, #104]	@ (340141c0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
34014156:	4293      	cmp	r3, r2
34014158:	d00f      	beq.n	3401417a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3401415a:	4a19      	ldr	r2, [pc, #100]	@ (340141c0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3401415c:	4293      	cmp	r3, r2
3401415e:	d826      	bhi.n	340141ae <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
34014160:	4a18      	ldr	r2, [pc, #96]	@ (340141c4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34014162:	4293      	cmp	r3, r2
34014164:	d009      	beq.n	3401417a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
34014166:	4a17      	ldr	r2, [pc, #92]	@ (340141c4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34014168:	4293      	cmp	r3, r2
3401416a:	d820      	bhi.n	340141ae <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3401416c:	4a16      	ldr	r2, [pc, #88]	@ (340141c8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
3401416e:	4293      	cmp	r3, r2
34014170:	d013      	beq.n	3401419a <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
34014172:	4a16      	ldr	r2, [pc, #88]	@ (340141cc <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
34014174:	4293      	cmp	r3, r2
34014176:	d015      	beq.n	340141a4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
34014178:	e019      	b.n	340141ae <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
3401417a:	f7f4 f821 	bl	340081c0 <LL_RCC_HSE_IsReady>
3401417e:	4603      	mov	r3, r0
34014180:	2b00      	cmp	r3, #0
34014182:	d016      	beq.n	340141b2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34014184:	f7f4 f80a 	bl	3400819c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34014188:	4603      	mov	r3, r0
3401418a:	2b00      	cmp	r3, #0
3401418c:	d102      	bne.n	34014194 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
3401418e:	4b10      	ldr	r3, [pc, #64]	@ (340141d0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
34014190:	60fb      	str	r3, [r7, #12]
      break;
34014192:	e00e      	b.n	340141b2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
34014194:	4b0f      	ldr	r3, [pc, #60]	@ (340141d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
34014196:	60fb      	str	r3, [r7, #12]
      break;
34014198:	e00b      	b.n	340141b2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3401419a:	480f      	ldr	r0, [pc, #60]	@ (340141d8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
3401419c:	f7ff ff1a 	bl	34013fd4 <RCCEx_GetOTGPHYCLKFreq>
340141a0:	60f8      	str	r0, [r7, #12]
      break;
340141a2:	e007      	b.n	340141b4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340141a4:	480d      	ldr	r0, [pc, #52]	@ (340141dc <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
340141a6:	f7ff ff15 	bl	34013fd4 <RCCEx_GetOTGPHYCLKFreq>
340141aa:	60f8      	str	r0, [r7, #12]
      break;
340141ac:	e002      	b.n	340141b4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
340141ae:	bf00      	nop
340141b0:	e000      	b.n	340141b4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
340141b2:	bf00      	nop
  }

  return usb_frequency;
340141b4:	68fb      	ldr	r3, [r7, #12]
}
340141b6:	4618      	mov	r0, r3
340141b8:	3710      	adds	r7, #16
340141ba:	46bd      	mov	sp, r7
340141bc:	bd80      	pop	{r7, pc}
340141be:	bf00      	nop
340141c0:	01011814 	.word	0x01011814
340141c4:	01011014 	.word	0x01011014
340141c8:	01001014 	.word	0x01001014
340141cc:	01001814 	.word	0x01001814
340141d0:	02dc6c00 	.word	0x02dc6c00
340141d4:	016e3600 	.word	0x016e3600
340141d8:	03000c14 	.word	0x03000c14
340141dc:	03001414 	.word	0x03001414

340141e0 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
340141e0:	b580      	push	{r7, lr}
340141e2:	b084      	sub	sp, #16
340141e4:	af00      	add	r7, sp, #0
340141e6:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
340141e8:	2300      	movs	r3, #0
340141ea:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340141ec:	6878      	ldr	r0, [r7, #4]
340141ee:	f7f4 fc05 	bl	340089fc <LL_RCC_GetXSPIClockSource>
340141f2:	4603      	mov	r3, r0
340141f4:	4a76      	ldr	r2, [pc, #472]	@ (340143d0 <RCCEx_GetXSPICLKFreq+0x1f0>)
340141f6:	4293      	cmp	r3, r2
340141f8:	f000 809d 	beq.w	34014336 <RCCEx_GetXSPICLKFreq+0x156>
340141fc:	4a74      	ldr	r2, [pc, #464]	@ (340143d0 <RCCEx_GetXSPICLKFreq+0x1f0>)
340141fe:	4293      	cmp	r3, r2
34014200:	f200 80dc 	bhi.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
34014204:	4a73      	ldr	r2, [pc, #460]	@ (340143d4 <RCCEx_GetXSPICLKFreq+0x1f4>)
34014206:	4293      	cmp	r3, r2
34014208:	f000 8095 	beq.w	34014336 <RCCEx_GetXSPICLKFreq+0x156>
3401420c:	4a71      	ldr	r2, [pc, #452]	@ (340143d4 <RCCEx_GetXSPICLKFreq+0x1f4>)
3401420e:	4293      	cmp	r3, r2
34014210:	f200 80d4 	bhi.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
34014214:	4a70      	ldr	r2, [pc, #448]	@ (340143d8 <RCCEx_GetXSPICLKFreq+0x1f8>)
34014216:	4293      	cmp	r3, r2
34014218:	f000 808d 	beq.w	34014336 <RCCEx_GetXSPICLKFreq+0x156>
3401421c:	4a6e      	ldr	r2, [pc, #440]	@ (340143d8 <RCCEx_GetXSPICLKFreq+0x1f8>)
3401421e:	4293      	cmp	r3, r2
34014220:	f200 80cc 	bhi.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
34014224:	4a6d      	ldr	r2, [pc, #436]	@ (340143dc <RCCEx_GetXSPICLKFreq+0x1fc>)
34014226:	4293      	cmp	r3, r2
34014228:	d041      	beq.n	340142ae <RCCEx_GetXSPICLKFreq+0xce>
3401422a:	4a6c      	ldr	r2, [pc, #432]	@ (340143dc <RCCEx_GetXSPICLKFreq+0x1fc>)
3401422c:	4293      	cmp	r3, r2
3401422e:	f200 80c5 	bhi.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
34014232:	4a6b      	ldr	r2, [pc, #428]	@ (340143e0 <RCCEx_GetXSPICLKFreq+0x200>)
34014234:	4293      	cmp	r3, r2
34014236:	d03a      	beq.n	340142ae <RCCEx_GetXSPICLKFreq+0xce>
34014238:	4a69      	ldr	r2, [pc, #420]	@ (340143e0 <RCCEx_GetXSPICLKFreq+0x200>)
3401423a:	4293      	cmp	r3, r2
3401423c:	f200 80be 	bhi.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
34014240:	4a68      	ldr	r2, [pc, #416]	@ (340143e4 <RCCEx_GetXSPICLKFreq+0x204>)
34014242:	4293      	cmp	r3, r2
34014244:	d033      	beq.n	340142ae <RCCEx_GetXSPICLKFreq+0xce>
34014246:	4a67      	ldr	r2, [pc, #412]	@ (340143e4 <RCCEx_GetXSPICLKFreq+0x204>)
34014248:	4293      	cmp	r3, r2
3401424a:	f200 80b7 	bhi.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
3401424e:	4a66      	ldr	r2, [pc, #408]	@ (340143e8 <RCCEx_GetXSPICLKFreq+0x208>)
34014250:	4293      	cmp	r3, r2
34014252:	d027      	beq.n	340142a4 <RCCEx_GetXSPICLKFreq+0xc4>
34014254:	4a64      	ldr	r2, [pc, #400]	@ (340143e8 <RCCEx_GetXSPICLKFreq+0x208>)
34014256:	4293      	cmp	r3, r2
34014258:	f200 80b0 	bhi.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
3401425c:	4a63      	ldr	r2, [pc, #396]	@ (340143ec <RCCEx_GetXSPICLKFreq+0x20c>)
3401425e:	4293      	cmp	r3, r2
34014260:	d020      	beq.n	340142a4 <RCCEx_GetXSPICLKFreq+0xc4>
34014262:	4a62      	ldr	r2, [pc, #392]	@ (340143ec <RCCEx_GetXSPICLKFreq+0x20c>)
34014264:	4293      	cmp	r3, r2
34014266:	f200 80a9 	bhi.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
3401426a:	4a61      	ldr	r2, [pc, #388]	@ (340143f0 <RCCEx_GetXSPICLKFreq+0x210>)
3401426c:	4293      	cmp	r3, r2
3401426e:	d019      	beq.n	340142a4 <RCCEx_GetXSPICLKFreq+0xc4>
34014270:	4a5f      	ldr	r2, [pc, #380]	@ (340143f0 <RCCEx_GetXSPICLKFreq+0x210>)
34014272:	4293      	cmp	r3, r2
34014274:	f200 80a2 	bhi.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
34014278:	4a5e      	ldr	r2, [pc, #376]	@ (340143f4 <RCCEx_GetXSPICLKFreq+0x214>)
3401427a:	4293      	cmp	r3, r2
3401427c:	d00a      	beq.n	34014294 <RCCEx_GetXSPICLKFreq+0xb4>
3401427e:	4a5d      	ldr	r2, [pc, #372]	@ (340143f4 <RCCEx_GetXSPICLKFreq+0x214>)
34014280:	4293      	cmp	r3, r2
34014282:	f200 809b 	bhi.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
34014286:	4a5c      	ldr	r2, [pc, #368]	@ (340143f8 <RCCEx_GetXSPICLKFreq+0x218>)
34014288:	4293      	cmp	r3, r2
3401428a:	d003      	beq.n	34014294 <RCCEx_GetXSPICLKFreq+0xb4>
3401428c:	4a5b      	ldr	r2, [pc, #364]	@ (340143fc <RCCEx_GetXSPICLKFreq+0x21c>)
3401428e:	4293      	cmp	r3, r2
34014290:	f040 8094 	bne.w	340143bc <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34014294:	f7f3 fba8 	bl	340079e8 <HAL_RCC_GetSysClockFreq>
34014298:	4603      	mov	r3, r0
3401429a:	4618      	mov	r0, r3
3401429c:	f7fc fc9c 	bl	34010bd8 <RCCEx_GetHCLKFreq>
340142a0:	60f8      	str	r0, [r7, #12]
      break;
340142a2:	e090      	b.n	340143c6 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340142a4:	2007      	movs	r0, #7
340142a6:	f7fc ff83 	bl	340111b0 <RCCEx_GetCLKPCLKFreq>
340142aa:	60f8      	str	r0, [r7, #12]
      break;
340142ac:	e08b      	b.n	340143c6 <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
340142ae:	f7f4 fe7d 	bl	34008fac <LL_RCC_IC3_IsEnabled>
340142b2:	4603      	mov	r3, r0
340142b4:	2b00      	cmp	r3, #0
340142b6:	f000 8083 	beq.w	340143c0 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
340142ba:	f7f4 fe99 	bl	34008ff0 <LL_RCC_IC3_GetDivider>
340142be:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
340142c0:	f7f4 fe88 	bl	34008fd4 <LL_RCC_IC3_GetSource>
340142c4:	4603      	mov	r3, r0
340142c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340142ca:	d029      	beq.n	34014320 <RCCEx_GetXSPICLKFreq+0x140>
340142cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340142d0:	d82f      	bhi.n	34014332 <RCCEx_GetXSPICLKFreq+0x152>
340142d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340142d6:	d01a      	beq.n	3401430e <RCCEx_GetXSPICLKFreq+0x12e>
340142d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340142dc:	d829      	bhi.n	34014332 <RCCEx_GetXSPICLKFreq+0x152>
340142de:	2b00      	cmp	r3, #0
340142e0:	d003      	beq.n	340142ea <RCCEx_GetXSPICLKFreq+0x10a>
340142e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340142e6:	d009      	beq.n	340142fc <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340142e8:	e023      	b.n	34014332 <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340142ea:	f7fc fb5d 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
340142ee:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340142f0:	68fa      	ldr	r2, [r7, #12]
340142f2:	68bb      	ldr	r3, [r7, #8]
340142f4:	fbb2 f3f3 	udiv	r3, r2, r3
340142f8:	60fb      	str	r3, [r7, #12]
            break;
340142fa:	e01b      	b.n	34014334 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340142fc:	f7fc fb9a 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34014300:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014302:	68fa      	ldr	r2, [r7, #12]
34014304:	68bb      	ldr	r3, [r7, #8]
34014306:	fbb2 f3f3 	udiv	r3, r2, r3
3401430a:	60fb      	str	r3, [r7, #12]
            break;
3401430c:	e012      	b.n	34014334 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401430e:	f7fc fbd7 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34014312:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014314:	68fa      	ldr	r2, [r7, #12]
34014316:	68bb      	ldr	r3, [r7, #8]
34014318:	fbb2 f3f3 	udiv	r3, r2, r3
3401431c:	60fb      	str	r3, [r7, #12]
            break;
3401431e:	e009      	b.n	34014334 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014320:	f7fc fc14 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
34014324:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014326:	68fa      	ldr	r2, [r7, #12]
34014328:	68bb      	ldr	r3, [r7, #8]
3401432a:	fbb2 f3f3 	udiv	r3, r2, r3
3401432e:	60fb      	str	r3, [r7, #12]
            break;
34014330:	e000      	b.n	34014334 <RCCEx_GetXSPICLKFreq+0x154>
            break;
34014332:	bf00      	nop
        }
      }
      break;
34014334:	e044      	b.n	340143c0 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
34014336:	f7f4 fe79 	bl	3400902c <LL_RCC_IC4_IsEnabled>
3401433a:	4603      	mov	r3, r0
3401433c:	2b00      	cmp	r3, #0
3401433e:	d041      	beq.n	340143c4 <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
34014340:	f7f4 fe96 	bl	34009070 <LL_RCC_IC4_GetDivider>
34014344:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34014346:	f7f4 fe85 	bl	34009054 <LL_RCC_IC4_GetSource>
3401434a:	4603      	mov	r3, r0
3401434c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014350:	d029      	beq.n	340143a6 <RCCEx_GetXSPICLKFreq+0x1c6>
34014352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014356:	d82f      	bhi.n	340143b8 <RCCEx_GetXSPICLKFreq+0x1d8>
34014358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401435c:	d01a      	beq.n	34014394 <RCCEx_GetXSPICLKFreq+0x1b4>
3401435e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014362:	d829      	bhi.n	340143b8 <RCCEx_GetXSPICLKFreq+0x1d8>
34014364:	2b00      	cmp	r3, #0
34014366:	d003      	beq.n	34014370 <RCCEx_GetXSPICLKFreq+0x190>
34014368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401436c:	d009      	beq.n	34014382 <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401436e:	e023      	b.n	340143b8 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014370:	f7fc fb1a 	bl	340109a8 <HAL_RCCEx_GetPLL1CLKFreq>
34014374:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014376:	68fa      	ldr	r2, [r7, #12]
34014378:	68bb      	ldr	r3, [r7, #8]
3401437a:	fbb2 f3f3 	udiv	r3, r2, r3
3401437e:	60fb      	str	r3, [r7, #12]
            break;
34014380:	e01b      	b.n	340143ba <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014382:	f7fc fb57 	bl	34010a34 <HAL_RCCEx_GetPLL2CLKFreq>
34014386:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014388:	68fa      	ldr	r2, [r7, #12]
3401438a:	68bb      	ldr	r3, [r7, #8]
3401438c:	fbb2 f3f3 	udiv	r3, r2, r3
34014390:	60fb      	str	r3, [r7, #12]
            break;
34014392:	e012      	b.n	340143ba <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014394:	f7fc fb94 	bl	34010ac0 <HAL_RCCEx_GetPLL3CLKFreq>
34014398:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3401439a:	68fa      	ldr	r2, [r7, #12]
3401439c:	68bb      	ldr	r3, [r7, #8]
3401439e:	fbb2 f3f3 	udiv	r3, r2, r3
340143a2:	60fb      	str	r3, [r7, #12]
            break;
340143a4:	e009      	b.n	340143ba <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340143a6:	f7fc fbd1 	bl	34010b4c <HAL_RCCEx_GetPLL4CLKFreq>
340143aa:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340143ac:	68fa      	ldr	r2, [r7, #12]
340143ae:	68bb      	ldr	r3, [r7, #8]
340143b0:	fbb2 f3f3 	udiv	r3, r2, r3
340143b4:	60fb      	str	r3, [r7, #12]
            break;
340143b6:	e000      	b.n	340143ba <RCCEx_GetXSPICLKFreq+0x1da>
            break;
340143b8:	bf00      	nop
        }
      }
      break;
340143ba:	e003      	b.n	340143c4 <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
340143bc:	bf00      	nop
340143be:	e002      	b.n	340143c6 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
340143c0:	bf00      	nop
340143c2:	e000      	b.n	340143c6 <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
340143c4:	bf00      	nop
  }

  return xspi_frequency;
340143c6:	68fb      	ldr	r3, [r7, #12]
}
340143c8:	4618      	mov	r0, r3
340143ca:	3710      	adds	r7, #16
340143cc:	46bd      	mov	sp, r7
340143ce:	bd80      	pop	{r7, pc}
340143d0:	03030814 	.word	0x03030814
340143d4:	03030414 	.word	0x03030414
340143d8:	03030014 	.word	0x03030014
340143dc:	03020814 	.word	0x03020814
340143e0:	03020414 	.word	0x03020414
340143e4:	03020014 	.word	0x03020014
340143e8:	03010814 	.word	0x03010814
340143ec:	03010414 	.word	0x03010414
340143f0:	03010014 	.word	0x03010014
340143f4:	03000814 	.word	0x03000814
340143f8:	03000014 	.word	0x03000014
340143fc:	03000414 	.word	0x03000414

34014400 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34014400:	b580      	push	{r7, lr}
34014402:	b088      	sub	sp, #32
34014404:	af00      	add	r7, sp, #0
34014406:	6078      	str	r0, [r7, #4]
34014408:	6039      	str	r1, [r7, #0]
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
3401440a:	683b      	ldr	r3, [r7, #0]
3401440c:	2b00      	cmp	r3, #0
3401440e:	d104      	bne.n	3401441a <HAL_RIF_RIMC_ConfigMasterAttributes+0x1a>
34014410:	f240 1111 	movw	r1, #273	@ 0x111
34014414:	484d      	ldr	r0, [pc, #308]	@ (3401454c <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34014416:	f7ed fa05 	bl	34001824 <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
3401441a:	687b      	ldr	r3, [r7, #4]
3401441c:	2b00      	cmp	r3, #0
3401441e:	d028      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014420:	687b      	ldr	r3, [r7, #4]
34014422:	2b01      	cmp	r3, #1
34014424:	d025      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014426:	687b      	ldr	r3, [r7, #4]
34014428:	2b02      	cmp	r3, #2
3401442a:	d022      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401442c:	687b      	ldr	r3, [r7, #4]
3401442e:	2b03      	cmp	r3, #3
34014430:	d01f      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014432:	687b      	ldr	r3, [r7, #4]
34014434:	2b04      	cmp	r3, #4
34014436:	d01c      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014438:	687b      	ldr	r3, [r7, #4]
3401443a:	2b05      	cmp	r3, #5
3401443c:	d019      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401443e:	687b      	ldr	r3, [r7, #4]
34014440:	2b06      	cmp	r3, #6
34014442:	d016      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014444:	687b      	ldr	r3, [r7, #4]
34014446:	2b07      	cmp	r3, #7
34014448:	d013      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401444a:	687b      	ldr	r3, [r7, #4]
3401444c:	2b08      	cmp	r3, #8
3401444e:	d010      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014450:	687b      	ldr	r3, [r7, #4]
34014452:	2b09      	cmp	r3, #9
34014454:	d00d      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014456:	687b      	ldr	r3, [r7, #4]
34014458:	2b0a      	cmp	r3, #10
3401445a:	d00a      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401445c:	687b      	ldr	r3, [r7, #4]
3401445e:	2b0b      	cmp	r3, #11
34014460:	d007      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014462:	687b      	ldr	r3, [r7, #4]
34014464:	2b0c      	cmp	r3, #12
34014466:	d004      	beq.n	34014472 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014468:	f44f 7189 	mov.w	r1, #274	@ 0x112
3401446c:	4837      	ldr	r0, [pc, #220]	@ (3401454c <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
3401446e:	f7ed f9d9 	bl	34001824 <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34014472:	683b      	ldr	r3, [r7, #0]
34014474:	681b      	ldr	r3, [r3, #0]
34014476:	2b01      	cmp	r3, #1
34014478:	d020      	beq.n	340144bc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
3401447a:	683b      	ldr	r3, [r7, #0]
3401447c:	681b      	ldr	r3, [r3, #0]
3401447e:	2b02      	cmp	r3, #2
34014480:	d01c      	beq.n	340144bc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34014482:	683b      	ldr	r3, [r7, #0]
34014484:	681b      	ldr	r3, [r3, #0]
34014486:	2b04      	cmp	r3, #4
34014488:	d018      	beq.n	340144bc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
3401448a:	683b      	ldr	r3, [r7, #0]
3401448c:	681b      	ldr	r3, [r3, #0]
3401448e:	2b08      	cmp	r3, #8
34014490:	d014      	beq.n	340144bc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34014492:	683b      	ldr	r3, [r7, #0]
34014494:	681b      	ldr	r3, [r3, #0]
34014496:	2b10      	cmp	r3, #16
34014498:	d010      	beq.n	340144bc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
3401449a:	683b      	ldr	r3, [r7, #0]
3401449c:	681b      	ldr	r3, [r3, #0]
3401449e:	2b20      	cmp	r3, #32
340144a0:	d00c      	beq.n	340144bc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340144a2:	683b      	ldr	r3, [r7, #0]
340144a4:	681b      	ldr	r3, [r3, #0]
340144a6:	2b40      	cmp	r3, #64	@ 0x40
340144a8:	d008      	beq.n	340144bc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340144aa:	683b      	ldr	r3, [r7, #0]
340144ac:	681b      	ldr	r3, [r3, #0]
340144ae:	2b80      	cmp	r3, #128	@ 0x80
340144b0:	d004      	beq.n	340144bc <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340144b2:	f240 1113 	movw	r1, #275	@ 0x113
340144b6:	4825      	ldr	r0, [pc, #148]	@ (3401454c <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
340144b8:	f7ed f9b4 	bl	34001824 <assert_failed>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
340144bc:	683b      	ldr	r3, [r7, #0]
340144be:	681b      	ldr	r3, [r3, #0]
340144c0:	2b80      	cmp	r3, #128	@ 0x80
340144c2:	d003      	beq.n	340144cc <HAL_RIF_RIMC_ConfigMasterAttributes+0xcc>
340144c4:	683b      	ldr	r3, [r7, #0]
340144c6:	681b      	ldr	r3, [r3, #0]
340144c8:	2bff      	cmp	r3, #255	@ 0xff
340144ca:	d904      	bls.n	340144d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0xd6>
340144cc:	f44f 718a 	mov.w	r1, #276	@ 0x114
340144d0:	481e      	ldr	r0, [pc, #120]	@ (3401454c <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
340144d2:	f7ed f9a7 	bl	34001824 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
340144d6:	683b      	ldr	r3, [r7, #0]
340144d8:	685b      	ldr	r3, [r3, #4]
340144da:	2b03      	cmp	r3, #3
340144dc:	d904      	bls.n	340144e8 <HAL_RIF_RIMC_ConfigMasterAttributes+0xe8>
340144de:	f240 1115 	movw	r1, #277	@ 0x115
340144e2:	481a      	ldr	r0, [pc, #104]	@ (3401454c <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
340144e4:	f7ed f99e 	bl	34001824 <assert_failed>

  master_cid = POSITION_VAL(pConfig->MasterCID);
340144e8:	683b      	ldr	r3, [r7, #0]
340144ea:	681b      	ldr	r3, [r3, #0]
340144ec:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
340144ee:	693b      	ldr	r3, [r7, #16]
340144f0:	fa93 f3a3 	rbit	r3, r3
340144f4:	60fb      	str	r3, [r7, #12]
  return result;
340144f6:	68fb      	ldr	r3, [r7, #12]
340144f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
340144fa:	697b      	ldr	r3, [r7, #20]
340144fc:	2b00      	cmp	r3, #0
340144fe:	d101      	bne.n	34014504 <HAL_RIF_RIMC_ConfigMasterAttributes+0x104>
    return 32U;
34014500:	2320      	movs	r3, #32
34014502:	e003      	b.n	3401450c <HAL_RIF_RIMC_ConfigMasterAttributes+0x10c>
  return __builtin_clz(value);
34014504:	697b      	ldr	r3, [r7, #20]
34014506:	fab3 f383 	clz	r3, r3
3401450a:	b2db      	uxtb	r3, r3
3401450c:	61fb      	str	r3, [r7, #28]
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3401450e:	4a10      	ldr	r2, [pc, #64]	@ (34014550 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
34014510:	687b      	ldr	r3, [r7, #4]
34014512:	f503 7341 	add.w	r3, r3, #772	@ 0x304
34014516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3401451a:	61bb      	str	r3, [r7, #24]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3401451c:	69bb      	ldr	r3, [r7, #24]
3401451e:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
34014522:	61bb      	str	r3, [r7, #24]
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34014524:	69fb      	ldr	r3, [r7, #28]
34014526:	011a      	lsls	r2, r3, #4
34014528:	683b      	ldr	r3, [r7, #0]
3401452a:	685b      	ldr	r3, [r3, #4]
3401452c:	021b      	lsls	r3, r3, #8
3401452e:	4313      	orrs	r3, r2
34014530:	69ba      	ldr	r2, [r7, #24]
34014532:	4313      	orrs	r3, r2
34014534:	61bb      	str	r3, [r7, #24]
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
34014536:	4906      	ldr	r1, [pc, #24]	@ (34014550 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
34014538:	687b      	ldr	r3, [r7, #4]
3401453a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3401453e:	69ba      	ldr	r2, [r7, #24]
34014540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
34014544:	bf00      	nop
34014546:	3720      	adds	r7, #32
34014548:	46bd      	mov	sp, r7
3401454a:	bd80      	pop	{r7, pc}
3401454c:	3401cf64 	.word	0x3401cf64
34014550:	54024000 	.word	0x54024000

34014554 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  * @param  SecPriv specifies the security and privilege attributes of the peripheral.
  *         This parameter can be one or a combination of @ref RIF_SEC_PRIV
  * @retval None
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
34014554:	b580      	push	{r7, lr}
34014556:	b084      	sub	sp, #16
34014558:	af00      	add	r7, sp, #0
3401455a:	6078      	str	r0, [r7, #4]
3401455c:	6039      	str	r1, [r7, #0]
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3401455e:	687b      	ldr	r3, [r7, #4]
34014560:	2b00      	cmp	r3, #0
34014562:	f000 82c6 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014566:	687b      	ldr	r3, [r7, #4]
34014568:	2b01      	cmp	r3, #1
3401456a:	f000 82c2 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401456e:	687b      	ldr	r3, [r7, #4]
34014570:	2b02      	cmp	r3, #2
34014572:	f000 82be 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014576:	687b      	ldr	r3, [r7, #4]
34014578:	2b03      	cmp	r3, #3
3401457a:	f000 82ba 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401457e:	687b      	ldr	r3, [r7, #4]
34014580:	2b04      	cmp	r3, #4
34014582:	f000 82b6 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014586:	687b      	ldr	r3, [r7, #4]
34014588:	2b05      	cmp	r3, #5
3401458a:	f000 82b2 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401458e:	687b      	ldr	r3, [r7, #4]
34014590:	2b06      	cmp	r3, #6
34014592:	f000 82ae 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014596:	687b      	ldr	r3, [r7, #4]
34014598:	2b08      	cmp	r3, #8
3401459a:	f000 82aa 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401459e:	687b      	ldr	r3, [r7, #4]
340145a0:	2b09      	cmp	r3, #9
340145a2:	f000 82a6 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145a6:	687b      	ldr	r3, [r7, #4]
340145a8:	2b0a      	cmp	r3, #10
340145aa:	f000 82a2 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145ae:	687b      	ldr	r3, [r7, #4]
340145b0:	2b0b      	cmp	r3, #11
340145b2:	f000 829e 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145b6:	687b      	ldr	r3, [r7, #4]
340145b8:	2b0c      	cmp	r3, #12
340145ba:	f000 829a 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145be:	687b      	ldr	r3, [r7, #4]
340145c0:	2b0d      	cmp	r3, #13
340145c2:	f000 8296 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145c6:	687b      	ldr	r3, [r7, #4]
340145c8:	2b0e      	cmp	r3, #14
340145ca:	f000 8292 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145ce:	687b      	ldr	r3, [r7, #4]
340145d0:	2b0f      	cmp	r3, #15
340145d2:	f000 828e 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145d6:	687b      	ldr	r3, [r7, #4]
340145d8:	2b10      	cmp	r3, #16
340145da:	f000 828a 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145de:	687b      	ldr	r3, [r7, #4]
340145e0:	2b11      	cmp	r3, #17
340145e2:	f000 8286 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145e6:	687b      	ldr	r3, [r7, #4]
340145e8:	2b12      	cmp	r3, #18
340145ea:	f000 8282 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145ee:	687b      	ldr	r3, [r7, #4]
340145f0:	2b13      	cmp	r3, #19
340145f2:	f000 827e 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145f6:	687b      	ldr	r3, [r7, #4]
340145f8:	2b14      	cmp	r3, #20
340145fa:	f000 827a 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145fe:	687b      	ldr	r3, [r7, #4]
34014600:	2b15      	cmp	r3, #21
34014602:	f000 8276 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014606:	687b      	ldr	r3, [r7, #4]
34014608:	2b16      	cmp	r3, #22
3401460a:	f000 8272 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401460e:	687b      	ldr	r3, [r7, #4]
34014610:	2b17      	cmp	r3, #23
34014612:	f000 826e 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014616:	687b      	ldr	r3, [r7, #4]
34014618:	2b18      	cmp	r3, #24
3401461a:	f000 826a 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401461e:	687b      	ldr	r3, [r7, #4]
34014620:	2b19      	cmp	r3, #25
34014622:	f000 8266 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014626:	687b      	ldr	r3, [r7, #4]
34014628:	2b1a      	cmp	r3, #26
3401462a:	f000 8262 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401462e:	687b      	ldr	r3, [r7, #4]
34014630:	2b1b      	cmp	r3, #27
34014632:	f000 825e 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014636:	687b      	ldr	r3, [r7, #4]
34014638:	2b1c      	cmp	r3, #28
3401463a:	f000 825a 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401463e:	687b      	ldr	r3, [r7, #4]
34014640:	2b1d      	cmp	r3, #29
34014642:	f000 8256 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014646:	687b      	ldr	r3, [r7, #4]
34014648:	2b1e      	cmp	r3, #30
3401464a:	f000 8252 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401464e:	687b      	ldr	r3, [r7, #4]
34014650:	2b1f      	cmp	r3, #31
34014652:	f000 824e 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014656:	687b      	ldr	r3, [r7, #4]
34014658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401465c:	f000 8249 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014660:	687b      	ldr	r3, [r7, #4]
34014662:	4aa0      	ldr	r2, [pc, #640]	@ (340148e4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x390>)
34014664:	4293      	cmp	r3, r2
34014666:	f000 8244 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401466a:	687b      	ldr	r3, [r7, #4]
3401466c:	4a9e      	ldr	r2, [pc, #632]	@ (340148e8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x394>)
3401466e:	4293      	cmp	r3, r2
34014670:	f000 823f 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014674:	687b      	ldr	r3, [r7, #4]
34014676:	4a9d      	ldr	r2, [pc, #628]	@ (340148ec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x398>)
34014678:	4293      	cmp	r3, r2
3401467a:	f000 823a 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401467e:	687b      	ldr	r3, [r7, #4]
34014680:	4a9b      	ldr	r2, [pc, #620]	@ (340148f0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x39c>)
34014682:	4293      	cmp	r3, r2
34014684:	f000 8235 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014688:	687b      	ldr	r3, [r7, #4]
3401468a:	4a9a      	ldr	r2, [pc, #616]	@ (340148f4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a0>)
3401468c:	4293      	cmp	r3, r2
3401468e:	f000 8230 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014692:	687b      	ldr	r3, [r7, #4]
34014694:	4a98      	ldr	r2, [pc, #608]	@ (340148f8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a4>)
34014696:	4293      	cmp	r3, r2
34014698:	f000 822b 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401469c:	687b      	ldr	r3, [r7, #4]
3401469e:	4a97      	ldr	r2, [pc, #604]	@ (340148fc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a8>)
340146a0:	4293      	cmp	r3, r2
340146a2:	f000 8226 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340146a6:	687b      	ldr	r3, [r7, #4]
340146a8:	4a95      	ldr	r2, [pc, #596]	@ (34014900 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ac>)
340146aa:	4293      	cmp	r3, r2
340146ac:	f000 8221 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340146b0:	687b      	ldr	r3, [r7, #4]
340146b2:	4a94      	ldr	r2, [pc, #592]	@ (34014904 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b0>)
340146b4:	4293      	cmp	r3, r2
340146b6:	f000 821c 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340146ba:	687b      	ldr	r3, [r7, #4]
340146bc:	4a92      	ldr	r2, [pc, #584]	@ (34014908 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b4>)
340146be:	4293      	cmp	r3, r2
340146c0:	f000 8217 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340146c4:	687b      	ldr	r3, [r7, #4]
340146c6:	4a91      	ldr	r2, [pc, #580]	@ (3401490c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b8>)
340146c8:	4293      	cmp	r3, r2
340146ca:	f000 8212 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340146ce:	687b      	ldr	r3, [r7, #4]
340146d0:	4a8f      	ldr	r2, [pc, #572]	@ (34014910 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3bc>)
340146d2:	4293      	cmp	r3, r2
340146d4:	f000 820d 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340146d8:	687b      	ldr	r3, [r7, #4]
340146da:	4a8e      	ldr	r2, [pc, #568]	@ (34014914 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c0>)
340146dc:	4293      	cmp	r3, r2
340146de:	f000 8208 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340146e2:	687b      	ldr	r3, [r7, #4]
340146e4:	4a8c      	ldr	r2, [pc, #560]	@ (34014918 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c4>)
340146e6:	4293      	cmp	r3, r2
340146e8:	f000 8203 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340146ec:	687b      	ldr	r3, [r7, #4]
340146ee:	4a8b      	ldr	r2, [pc, #556]	@ (3401491c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c8>)
340146f0:	4293      	cmp	r3, r2
340146f2:	f000 81fe 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340146f6:	687b      	ldr	r3, [r7, #4]
340146f8:	4a89      	ldr	r2, [pc, #548]	@ (34014920 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3cc>)
340146fa:	4293      	cmp	r3, r2
340146fc:	f000 81f9 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014700:	687b      	ldr	r3, [r7, #4]
34014702:	4a88      	ldr	r2, [pc, #544]	@ (34014924 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d0>)
34014704:	4293      	cmp	r3, r2
34014706:	f000 81f4 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401470a:	687b      	ldr	r3, [r7, #4]
3401470c:	4a86      	ldr	r2, [pc, #536]	@ (34014928 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d4>)
3401470e:	4293      	cmp	r3, r2
34014710:	f000 81ef 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014714:	687b      	ldr	r3, [r7, #4]
34014716:	4a85      	ldr	r2, [pc, #532]	@ (3401492c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d8>)
34014718:	4293      	cmp	r3, r2
3401471a:	f000 81ea 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401471e:	687b      	ldr	r3, [r7, #4]
34014720:	4a83      	ldr	r2, [pc, #524]	@ (34014930 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3dc>)
34014722:	4293      	cmp	r3, r2
34014724:	f000 81e5 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014728:	687b      	ldr	r3, [r7, #4]
3401472a:	4a82      	ldr	r2, [pc, #520]	@ (34014934 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e0>)
3401472c:	4293      	cmp	r3, r2
3401472e:	f000 81e0 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014732:	687b      	ldr	r3, [r7, #4]
34014734:	4a80      	ldr	r2, [pc, #512]	@ (34014938 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e4>)
34014736:	4293      	cmp	r3, r2
34014738:	f000 81db 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401473c:	687b      	ldr	r3, [r7, #4]
3401473e:	4a7f      	ldr	r2, [pc, #508]	@ (3401493c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e8>)
34014740:	4293      	cmp	r3, r2
34014742:	f000 81d6 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014746:	687b      	ldr	r3, [r7, #4]
34014748:	4a7d      	ldr	r2, [pc, #500]	@ (34014940 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ec>)
3401474a:	4293      	cmp	r3, r2
3401474c:	f000 81d1 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014750:	687b      	ldr	r3, [r7, #4]
34014752:	4a7c      	ldr	r2, [pc, #496]	@ (34014944 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f0>)
34014754:	4293      	cmp	r3, r2
34014756:	f000 81cc 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401475a:	687b      	ldr	r3, [r7, #4]
3401475c:	4a7a      	ldr	r2, [pc, #488]	@ (34014948 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f4>)
3401475e:	4293      	cmp	r3, r2
34014760:	f000 81c7 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014764:	687b      	ldr	r3, [r7, #4]
34014766:	4a79      	ldr	r2, [pc, #484]	@ (3401494c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f8>)
34014768:	4293      	cmp	r3, r2
3401476a:	f000 81c2 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401476e:	687b      	ldr	r3, [r7, #4]
34014770:	4a77      	ldr	r2, [pc, #476]	@ (34014950 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3fc>)
34014772:	4293      	cmp	r3, r2
34014774:	f000 81bd 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014778:	687b      	ldr	r3, [r7, #4]
3401477a:	4a76      	ldr	r2, [pc, #472]	@ (34014954 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x400>)
3401477c:	4293      	cmp	r3, r2
3401477e:	f000 81b8 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014782:	687b      	ldr	r3, [r7, #4]
34014784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014788:	f000 81b3 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401478c:	687b      	ldr	r3, [r7, #4]
3401478e:	4a72      	ldr	r2, [pc, #456]	@ (34014958 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x404>)
34014790:	4293      	cmp	r3, r2
34014792:	f000 81ae 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014796:	687b      	ldr	r3, [r7, #4]
34014798:	4a70      	ldr	r2, [pc, #448]	@ (3401495c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x408>)
3401479a:	4293      	cmp	r3, r2
3401479c:	f000 81a9 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147a0:	687b      	ldr	r3, [r7, #4]
340147a2:	4a6f      	ldr	r2, [pc, #444]	@ (34014960 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x40c>)
340147a4:	4293      	cmp	r3, r2
340147a6:	f000 81a4 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147aa:	687b      	ldr	r3, [r7, #4]
340147ac:	4a6d      	ldr	r2, [pc, #436]	@ (34014964 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x410>)
340147ae:	4293      	cmp	r3, r2
340147b0:	f000 819f 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147b4:	687b      	ldr	r3, [r7, #4]
340147b6:	4a6c      	ldr	r2, [pc, #432]	@ (34014968 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x414>)
340147b8:	4293      	cmp	r3, r2
340147ba:	f000 819a 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147be:	687b      	ldr	r3, [r7, #4]
340147c0:	4a6a      	ldr	r2, [pc, #424]	@ (3401496c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x418>)
340147c2:	4293      	cmp	r3, r2
340147c4:	f000 8195 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147c8:	687b      	ldr	r3, [r7, #4]
340147ca:	4a69      	ldr	r2, [pc, #420]	@ (34014970 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x41c>)
340147cc:	4293      	cmp	r3, r2
340147ce:	f000 8190 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147d2:	687b      	ldr	r3, [r7, #4]
340147d4:	4a67      	ldr	r2, [pc, #412]	@ (34014974 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x420>)
340147d6:	4293      	cmp	r3, r2
340147d8:	f000 818b 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147dc:	687b      	ldr	r3, [r7, #4]
340147de:	4a66      	ldr	r2, [pc, #408]	@ (34014978 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x424>)
340147e0:	4293      	cmp	r3, r2
340147e2:	f000 8186 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147e6:	687b      	ldr	r3, [r7, #4]
340147e8:	4a64      	ldr	r2, [pc, #400]	@ (3401497c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x428>)
340147ea:	4293      	cmp	r3, r2
340147ec:	f000 8181 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147f0:	687b      	ldr	r3, [r7, #4]
340147f2:	4a63      	ldr	r2, [pc, #396]	@ (34014980 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x42c>)
340147f4:	4293      	cmp	r3, r2
340147f6:	f000 817c 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147fa:	687b      	ldr	r3, [r7, #4]
340147fc:	4a61      	ldr	r2, [pc, #388]	@ (34014984 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x430>)
340147fe:	4293      	cmp	r3, r2
34014800:	f000 8177 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014804:	687b      	ldr	r3, [r7, #4]
34014806:	4a60      	ldr	r2, [pc, #384]	@ (34014988 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x434>)
34014808:	4293      	cmp	r3, r2
3401480a:	f000 8172 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401480e:	687b      	ldr	r3, [r7, #4]
34014810:	4a5e      	ldr	r2, [pc, #376]	@ (3401498c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x438>)
34014812:	4293      	cmp	r3, r2
34014814:	f000 816d 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014818:	687b      	ldr	r3, [r7, #4]
3401481a:	4a5d      	ldr	r2, [pc, #372]	@ (34014990 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x43c>)
3401481c:	4293      	cmp	r3, r2
3401481e:	f000 8168 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014822:	687b      	ldr	r3, [r7, #4]
34014824:	4a5b      	ldr	r2, [pc, #364]	@ (34014994 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x440>)
34014826:	4293      	cmp	r3, r2
34014828:	f000 8163 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401482c:	687b      	ldr	r3, [r7, #4]
3401482e:	4a5a      	ldr	r2, [pc, #360]	@ (34014998 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x444>)
34014830:	4293      	cmp	r3, r2
34014832:	f000 815e 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014836:	687b      	ldr	r3, [r7, #4]
34014838:	4a58      	ldr	r2, [pc, #352]	@ (3401499c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x448>)
3401483a:	4293      	cmp	r3, r2
3401483c:	f000 8159 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014840:	687b      	ldr	r3, [r7, #4]
34014842:	4a57      	ldr	r2, [pc, #348]	@ (340149a0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x44c>)
34014844:	4293      	cmp	r3, r2
34014846:	f000 8154 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401484a:	687b      	ldr	r3, [r7, #4]
3401484c:	4a55      	ldr	r2, [pc, #340]	@ (340149a4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x450>)
3401484e:	4293      	cmp	r3, r2
34014850:	f000 814f 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014854:	687b      	ldr	r3, [r7, #4]
34014856:	4a54      	ldr	r2, [pc, #336]	@ (340149a8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x454>)
34014858:	4293      	cmp	r3, r2
3401485a:	f000 814a 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401485e:	687b      	ldr	r3, [r7, #4]
34014860:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014864:	f000 8145 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014868:	687b      	ldr	r3, [r7, #4]
3401486a:	4a50      	ldr	r2, [pc, #320]	@ (340149ac <HAL_RIF_RISC_SetSlaveSecureAttributes+0x458>)
3401486c:	4293      	cmp	r3, r2
3401486e:	f000 8140 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014872:	687b      	ldr	r3, [r7, #4]
34014874:	4a4e      	ldr	r2, [pc, #312]	@ (340149b0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x45c>)
34014876:	4293      	cmp	r3, r2
34014878:	f000 813b 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401487c:	687b      	ldr	r3, [r7, #4]
3401487e:	4a4d      	ldr	r2, [pc, #308]	@ (340149b4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x460>)
34014880:	4293      	cmp	r3, r2
34014882:	f000 8136 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014886:	687b      	ldr	r3, [r7, #4]
34014888:	4a4b      	ldr	r2, [pc, #300]	@ (340149b8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x464>)
3401488a:	4293      	cmp	r3, r2
3401488c:	f000 8131 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014890:	687b      	ldr	r3, [r7, #4]
34014892:	4a4a      	ldr	r2, [pc, #296]	@ (340149bc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x468>)
34014894:	4293      	cmp	r3, r2
34014896:	f000 812c 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401489a:	687b      	ldr	r3, [r7, #4]
3401489c:	4a48      	ldr	r2, [pc, #288]	@ (340149c0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x46c>)
3401489e:	4293      	cmp	r3, r2
340148a0:	f000 8127 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148a4:	687b      	ldr	r3, [r7, #4]
340148a6:	4a47      	ldr	r2, [pc, #284]	@ (340149c4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x470>)
340148a8:	4293      	cmp	r3, r2
340148aa:	f000 8122 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148ae:	687b      	ldr	r3, [r7, #4]
340148b0:	4a45      	ldr	r2, [pc, #276]	@ (340149c8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x474>)
340148b2:	4293      	cmp	r3, r2
340148b4:	f000 811d 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148b8:	687b      	ldr	r3, [r7, #4]
340148ba:	4a44      	ldr	r2, [pc, #272]	@ (340149cc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x478>)
340148bc:	4293      	cmp	r3, r2
340148be:	f000 8118 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148c2:	687b      	ldr	r3, [r7, #4]
340148c4:	4a42      	ldr	r2, [pc, #264]	@ (340149d0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x47c>)
340148c6:	4293      	cmp	r3, r2
340148c8:	f000 8113 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148cc:	687b      	ldr	r3, [r7, #4]
340148ce:	4a41      	ldr	r2, [pc, #260]	@ (340149d4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x480>)
340148d0:	4293      	cmp	r3, r2
340148d2:	f000 810e 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148d6:	687b      	ldr	r3, [r7, #4]
340148d8:	4a3f      	ldr	r2, [pc, #252]	@ (340149d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x484>)
340148da:	4293      	cmp	r3, r2
340148dc:	f000 8109 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148e0:	e07c      	b.n	340149dc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x488>
340148e2:	bf00      	nop
340148e4:	10000001 	.word	0x10000001
340148e8:	10000002 	.word	0x10000002
340148ec:	10000003 	.word	0x10000003
340148f0:	10000004 	.word	0x10000004
340148f4:	10000005 	.word	0x10000005
340148f8:	10000006 	.word	0x10000006
340148fc:	10000007 	.word	0x10000007
34014900:	10000008 	.word	0x10000008
34014904:	10000009 	.word	0x10000009
34014908:	1000000a 	.word	0x1000000a
3401490c:	1000000b 	.word	0x1000000b
34014910:	1000000c 	.word	0x1000000c
34014914:	1000000d 	.word	0x1000000d
34014918:	1000000e 	.word	0x1000000e
3401491c:	1000000f 	.word	0x1000000f
34014920:	10000010 	.word	0x10000010
34014924:	10000011 	.word	0x10000011
34014928:	10000012 	.word	0x10000012
3401492c:	10000013 	.word	0x10000013
34014930:	10000014 	.word	0x10000014
34014934:	10000015 	.word	0x10000015
34014938:	10000016 	.word	0x10000016
3401493c:	10000017 	.word	0x10000017
34014940:	10000018 	.word	0x10000018
34014944:	10000019 	.word	0x10000019
34014948:	1000001a 	.word	0x1000001a
3401494c:	1000001c 	.word	0x1000001c
34014950:	1000001d 	.word	0x1000001d
34014954:	1000001e 	.word	0x1000001e
34014958:	20000001 	.word	0x20000001
3401495c:	20000003 	.word	0x20000003
34014960:	20000004 	.word	0x20000004
34014964:	20000005 	.word	0x20000005
34014968:	2000000c 	.word	0x2000000c
3401496c:	2000000d 	.word	0x2000000d
34014970:	2000000e 	.word	0x2000000e
34014974:	2000000f 	.word	0x2000000f
34014978:	20000010 	.word	0x20000010
3401497c:	20000011 	.word	0x20000011
34014980:	20000012 	.word	0x20000012
34014984:	20000013 	.word	0x20000013
34014988:	20000014 	.word	0x20000014
3401498c:	20000016 	.word	0x20000016
34014990:	20000017 	.word	0x20000017
34014994:	20000018 	.word	0x20000018
34014998:	20000019 	.word	0x20000019
3401499c:	2000001a 	.word	0x2000001a
340149a0:	2000001c 	.word	0x2000001c
340149a4:	2000001d 	.word	0x2000001d
340149a8:	2000001e 	.word	0x2000001e
340149ac:	30000001 	.word	0x30000001
340149b0:	30000002 	.word	0x30000002
340149b4:	30000003 	.word	0x30000003
340149b8:	30000004 	.word	0x30000004
340149bc:	30000005 	.word	0x30000005
340149c0:	30000006 	.word	0x30000006
340149c4:	30000007 	.word	0x30000007
340149c8:	30000008 	.word	0x30000008
340149cc:	3000000a 	.word	0x3000000a
340149d0:	40000002 	.word	0x40000002
340149d4:	40000003 	.word	0x40000003
340149d8:	40000005 	.word	0x40000005
340149dc:	687b      	ldr	r3, [r7, #4]
340149de:	4a6d      	ldr	r2, [pc, #436]	@ (34014b94 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x640>)
340149e0:	4293      	cmp	r3, r2
340149e2:	f000 8086 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149e6:	687b      	ldr	r3, [r7, #4]
340149e8:	4a6b      	ldr	r2, [pc, #428]	@ (34014b98 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x644>)
340149ea:	4293      	cmp	r3, r2
340149ec:	f000 8081 	beq.w	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149f0:	687b      	ldr	r3, [r7, #4]
340149f2:	4a6a      	ldr	r2, [pc, #424]	@ (34014b9c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x648>)
340149f4:	4293      	cmp	r3, r2
340149f6:	d07c      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149f8:	687b      	ldr	r3, [r7, #4]
340149fa:	4a69      	ldr	r2, [pc, #420]	@ (34014ba0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x64c>)
340149fc:	4293      	cmp	r3, r2
340149fe:	d078      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a00:	687b      	ldr	r3, [r7, #4]
34014a02:	4a68      	ldr	r2, [pc, #416]	@ (34014ba4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x650>)
34014a04:	4293      	cmp	r3, r2
34014a06:	d074      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a08:	687b      	ldr	r3, [r7, #4]
34014a0a:	4a67      	ldr	r2, [pc, #412]	@ (34014ba8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x654>)
34014a0c:	4293      	cmp	r3, r2
34014a0e:	d070      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a10:	687b      	ldr	r3, [r7, #4]
34014a12:	4a66      	ldr	r2, [pc, #408]	@ (34014bac <HAL_RIF_RISC_SetSlaveSecureAttributes+0x658>)
34014a14:	4293      	cmp	r3, r2
34014a16:	d06c      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a18:	687b      	ldr	r3, [r7, #4]
34014a1a:	4a65      	ldr	r2, [pc, #404]	@ (34014bb0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x65c>)
34014a1c:	4293      	cmp	r3, r2
34014a1e:	d068      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a20:	687b      	ldr	r3, [r7, #4]
34014a22:	4a64      	ldr	r2, [pc, #400]	@ (34014bb4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x660>)
34014a24:	4293      	cmp	r3, r2
34014a26:	d064      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a28:	687b      	ldr	r3, [r7, #4]
34014a2a:	4a63      	ldr	r2, [pc, #396]	@ (34014bb8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x664>)
34014a2c:	4293      	cmp	r3, r2
34014a2e:	d060      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a30:	687b      	ldr	r3, [r7, #4]
34014a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
34014a36:	d05c      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a38:	687b      	ldr	r3, [r7, #4]
34014a3a:	4a60      	ldr	r2, [pc, #384]	@ (34014bbc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x668>)
34014a3c:	4293      	cmp	r3, r2
34014a3e:	d058      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a40:	687b      	ldr	r3, [r7, #4]
34014a42:	4a5f      	ldr	r2, [pc, #380]	@ (34014bc0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x66c>)
34014a44:	4293      	cmp	r3, r2
34014a46:	d054      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a48:	687b      	ldr	r3, [r7, #4]
34014a4a:	4a5e      	ldr	r2, [pc, #376]	@ (34014bc4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x670>)
34014a4c:	4293      	cmp	r3, r2
34014a4e:	d050      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a50:	687b      	ldr	r3, [r7, #4]
34014a52:	4a5d      	ldr	r2, [pc, #372]	@ (34014bc8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x674>)
34014a54:	4293      	cmp	r3, r2
34014a56:	d04c      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a58:	687b      	ldr	r3, [r7, #4]
34014a5a:	4a5c      	ldr	r2, [pc, #368]	@ (34014bcc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x678>)
34014a5c:	4293      	cmp	r3, r2
34014a5e:	d048      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a60:	687b      	ldr	r3, [r7, #4]
34014a62:	4a5b      	ldr	r2, [pc, #364]	@ (34014bd0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x67c>)
34014a64:	4293      	cmp	r3, r2
34014a66:	d044      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a68:	687b      	ldr	r3, [r7, #4]
34014a6a:	4a5a      	ldr	r2, [pc, #360]	@ (34014bd4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x680>)
34014a6c:	4293      	cmp	r3, r2
34014a6e:	d040      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a70:	687b      	ldr	r3, [r7, #4]
34014a72:	4a59      	ldr	r2, [pc, #356]	@ (34014bd8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x684>)
34014a74:	4293      	cmp	r3, r2
34014a76:	d03c      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a78:	687b      	ldr	r3, [r7, #4]
34014a7a:	4a58      	ldr	r2, [pc, #352]	@ (34014bdc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x688>)
34014a7c:	4293      	cmp	r3, r2
34014a7e:	d038      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a80:	687b      	ldr	r3, [r7, #4]
34014a82:	4a57      	ldr	r2, [pc, #348]	@ (34014be0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x68c>)
34014a84:	4293      	cmp	r3, r2
34014a86:	d034      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a88:	687b      	ldr	r3, [r7, #4]
34014a8a:	4a56      	ldr	r2, [pc, #344]	@ (34014be4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x690>)
34014a8c:	4293      	cmp	r3, r2
34014a8e:	d030      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a90:	687b      	ldr	r3, [r7, #4]
34014a92:	4a55      	ldr	r2, [pc, #340]	@ (34014be8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x694>)
34014a94:	4293      	cmp	r3, r2
34014a96:	d02c      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a98:	687b      	ldr	r3, [r7, #4]
34014a9a:	4a54      	ldr	r2, [pc, #336]	@ (34014bec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x698>)
34014a9c:	4293      	cmp	r3, r2
34014a9e:	d028      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014aa0:	687b      	ldr	r3, [r7, #4]
34014aa2:	4a53      	ldr	r2, [pc, #332]	@ (34014bf0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x69c>)
34014aa4:	4293      	cmp	r3, r2
34014aa6:	d024      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014aa8:	687b      	ldr	r3, [r7, #4]
34014aaa:	4a52      	ldr	r2, [pc, #328]	@ (34014bf4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a0>)
34014aac:	4293      	cmp	r3, r2
34014aae:	d020      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ab0:	687b      	ldr	r3, [r7, #4]
34014ab2:	4a51      	ldr	r2, [pc, #324]	@ (34014bf8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a4>)
34014ab4:	4293      	cmp	r3, r2
34014ab6:	d01c      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ab8:	687b      	ldr	r3, [r7, #4]
34014aba:	4a50      	ldr	r2, [pc, #320]	@ (34014bfc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a8>)
34014abc:	4293      	cmp	r3, r2
34014abe:	d018      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ac0:	687b      	ldr	r3, [r7, #4]
34014ac2:	4a4f      	ldr	r2, [pc, #316]	@ (34014c00 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6ac>)
34014ac4:	4293      	cmp	r3, r2
34014ac6:	d014      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ac8:	687b      	ldr	r3, [r7, #4]
34014aca:	4a4e      	ldr	r2, [pc, #312]	@ (34014c04 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b0>)
34014acc:	4293      	cmp	r3, r2
34014ace:	d010      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ad0:	687b      	ldr	r3, [r7, #4]
34014ad2:	4a4d      	ldr	r2, [pc, #308]	@ (34014c08 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b4>)
34014ad4:	4293      	cmp	r3, r2
34014ad6:	d00c      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ad8:	687b      	ldr	r3, [r7, #4]
34014ada:	4a4c      	ldr	r2, [pc, #304]	@ (34014c0c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b8>)
34014adc:	4293      	cmp	r3, r2
34014ade:	d008      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ae0:	687b      	ldr	r3, [r7, #4]
34014ae2:	4a4b      	ldr	r2, [pc, #300]	@ (34014c10 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6bc>)
34014ae4:	4293      	cmp	r3, r2
34014ae6:	d004      	beq.n	34014af2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ae8:	f240 1173 	movw	r1, #371	@ 0x173
34014aec:	4849      	ldr	r0, [pc, #292]	@ (34014c14 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
34014aee:	f7ec fe99 	bl	34001824 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
34014af2:	683b      	ldr	r3, [r7, #0]
34014af4:	2b03      	cmp	r3, #3
34014af6:	d904      	bls.n	34014b02 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x5ae>
34014af8:	f44f 71ba 	mov.w	r1, #372	@ 0x174
34014afc:	4845      	ldr	r0, [pc, #276]	@ (34014c14 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
34014afe:	f7ec fe91 	bl	34001824 <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34014b02:	4a45      	ldr	r2, [pc, #276]	@ (34014c18 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014b04:	687b      	ldr	r3, [r7, #4]
34014b06:	0f1b      	lsrs	r3, r3, #28
34014b08:	3304      	adds	r3, #4
34014b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34014b0e:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34014b10:	687b      	ldr	r3, [r7, #4]
34014b12:	f003 031f 	and.w	r3, r3, #31
34014b16:	2201      	movs	r2, #1
34014b18:	fa02 f303 	lsl.w	r3, r2, r3
34014b1c:	43da      	mvns	r2, r3
34014b1e:	68fb      	ldr	r3, [r7, #12]
34014b20:	4013      	ands	r3, r2
34014b22:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34014b24:	683b      	ldr	r3, [r7, #0]
34014b26:	f003 0201 	and.w	r2, r3, #1
34014b2a:	687b      	ldr	r3, [r7, #4]
34014b2c:	f003 031f 	and.w	r3, r3, #31
34014b30:	409a      	lsls	r2, r3
34014b32:	68fb      	ldr	r3, [r7, #12]
34014b34:	4313      	orrs	r3, r2
34014b36:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34014b38:	4937      	ldr	r1, [pc, #220]	@ (34014c18 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014b3a:	687b      	ldr	r3, [r7, #4]
34014b3c:	0f1b      	lsrs	r3, r3, #28
34014b3e:	68fa      	ldr	r2, [r7, #12]
34014b40:	3304      	adds	r3, #4
34014b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34014b46:	4a34      	ldr	r2, [pc, #208]	@ (34014c18 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014b48:	687b      	ldr	r3, [r7, #4]
34014b4a:	0f1b      	lsrs	r3, r3, #28
34014b4c:	330c      	adds	r3, #12
34014b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34014b52:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34014b54:	687b      	ldr	r3, [r7, #4]
34014b56:	f003 031f 	and.w	r3, r3, #31
34014b5a:	2201      	movs	r2, #1
34014b5c:	fa02 f303 	lsl.w	r3, r2, r3
34014b60:	43da      	mvns	r2, r3
34014b62:	68fb      	ldr	r3, [r7, #12]
34014b64:	4013      	ands	r3, r2
34014b66:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34014b68:	683b      	ldr	r3, [r7, #0]
34014b6a:	085b      	lsrs	r3, r3, #1
34014b6c:	f003 0201 	and.w	r2, r3, #1
34014b70:	687b      	ldr	r3, [r7, #4]
34014b72:	f003 031f 	and.w	r3, r3, #31
34014b76:	409a      	lsls	r2, r3
34014b78:	68fb      	ldr	r3, [r7, #12]
34014b7a:	4313      	orrs	r3, r2
34014b7c:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34014b7e:	4926      	ldr	r1, [pc, #152]	@ (34014c18 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014b80:	687b      	ldr	r3, [r7, #4]
34014b82:	0f1b      	lsrs	r3, r3, #28
34014b84:	68fa      	ldr	r2, [r7, #12]
34014b86:	330c      	adds	r3, #12
34014b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
34014b8c:	bf00      	nop
34014b8e:	3710      	adds	r7, #16
34014b90:	46bd      	mov	sp, r7
34014b92:	bd80      	pop	{r7, pc}
34014b94:	4000000c 	.word	0x4000000c
34014b98:	4000000d 	.word	0x4000000d
34014b9c:	40000011 	.word	0x40000011
34014ba0:	40000012 	.word	0x40000012
34014ba4:	40000013 	.word	0x40000013
34014ba8:	40000019 	.word	0x40000019
34014bac:	4000001b 	.word	0x4000001b
34014bb0:	4000001c 	.word	0x4000001c
34014bb4:	4000001d 	.word	0x4000001d
34014bb8:	4000001f 	.word	0x4000001f
34014bbc:	50000001 	.word	0x50000001
34014bc0:	50000002 	.word	0x50000002
34014bc4:	50000003 	.word	0x50000003
34014bc8:	50000004 	.word	0x50000004
34014bcc:	50000005 	.word	0x50000005
34014bd0:	50000006 	.word	0x50000006
34014bd4:	50000008 	.word	0x50000008
34014bd8:	50000009 	.word	0x50000009
34014bdc:	5000000a 	.word	0x5000000a
34014be0:	5000000b 	.word	0x5000000b
34014be4:	5000000d 	.word	0x5000000d
34014be8:	5000000e 	.word	0x5000000e
34014bec:	5000000f 	.word	0x5000000f
34014bf0:	50000011 	.word	0x50000011
34014bf4:	50000012 	.word	0x50000012
34014bf8:	50000013 	.word	0x50000013
34014bfc:	50000014 	.word	0x50000014
34014c00:	50000016 	.word	0x50000016
34014c04:	50000017 	.word	0x50000017
34014c08:	50000018 	.word	0x50000018
34014c0c:	5000001b 	.word	0x5000001b
34014c10:	5000001e 	.word	0x5000001e
34014c14:	3401cf64 	.word	0x3401cf64
34014c18:	54024000 	.word	0x54024000

34014c1c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
34014c1c:	b580      	push	{r7, lr}
34014c1e:	b086      	sub	sp, #24
34014c20:	af00      	add	r7, sp, #0
34014c22:	60f8      	str	r0, [r7, #12]
34014c24:	60b9      	str	r1, [r7, #8]
34014c26:	4613      	mov	r3, r2
34014c28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
34014c2a:	68fb      	ldr	r3, [r7, #12]
34014c2c:	689b      	ldr	r3, [r3, #8]
34014c2e:	2b00      	cmp	r3, #0
34014c30:	d00e      	beq.n	34014c50 <HAL_SPI_Transmit_DMA+0x34>
34014c32:	68fb      	ldr	r3, [r7, #12]
34014c34:	689b      	ldr	r3, [r3, #8]
34014c36:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34014c3a:	d009      	beq.n	34014c50 <HAL_SPI_Transmit_DMA+0x34>
34014c3c:	68fb      	ldr	r3, [r7, #12]
34014c3e:	689b      	ldr	r3, [r3, #8]
34014c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34014c44:	d004      	beq.n	34014c50 <HAL_SPI_Transmit_DMA+0x34>
34014c46:	f240 71a5 	movw	r1, #1957	@ 0x7a5
34014c4a:	4882      	ldr	r0, [pc, #520]	@ (34014e54 <HAL_SPI_Transmit_DMA+0x238>)
34014c4c:	f7ec fdea 	bl	34001824 <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
34014c50:	68fb      	ldr	r3, [r7, #12]
34014c52:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34014c56:	b2db      	uxtb	r3, r3
34014c58:	2b01      	cmp	r3, #1
34014c5a:	d001      	beq.n	34014c60 <HAL_SPI_Transmit_DMA+0x44>
  {
    return HAL_BUSY;
34014c5c:	2302      	movs	r3, #2
34014c5e:	e1b7      	b.n	34014fd0 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  if ((pData == NULL) || (Size == 0UL))
34014c60:	68bb      	ldr	r3, [r7, #8]
34014c62:	2b00      	cmp	r3, #0
34014c64:	d002      	beq.n	34014c6c <HAL_SPI_Transmit_DMA+0x50>
34014c66:	88fb      	ldrh	r3, [r7, #6]
34014c68:	2b00      	cmp	r3, #0
34014c6a:	d101      	bne.n	34014c70 <HAL_SPI_Transmit_DMA+0x54>
  {
    return HAL_ERROR;
34014c6c:	2301      	movs	r3, #1
34014c6e:	e1af      	b.n	34014fd0 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
34014c70:	68fb      	ldr	r3, [r7, #12]
34014c72:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
34014c76:	2b01      	cmp	r3, #1
34014c78:	d101      	bne.n	34014c7e <HAL_SPI_Transmit_DMA+0x62>
34014c7a:	2302      	movs	r3, #2
34014c7c:	e1a8      	b.n	34014fd0 <HAL_SPI_Transmit_DMA+0x3b4>
34014c7e:	68fb      	ldr	r3, [r7, #12]
34014c80:	2201      	movs	r2, #1
34014c82:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
34014c86:	68fb      	ldr	r3, [r7, #12]
34014c88:	2203      	movs	r2, #3
34014c8a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
34014c8e:	68fb      	ldr	r3, [r7, #12]
34014c90:	2200      	movs	r2, #0
34014c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
34014c96:	68fb      	ldr	r3, [r7, #12]
34014c98:	68ba      	ldr	r2, [r7, #8]
34014c9a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
34014c9c:	68fb      	ldr	r3, [r7, #12]
34014c9e:	88fa      	ldrh	r2, [r7, #6]
34014ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
34014ca4:	68fb      	ldr	r3, [r7, #12]
34014ca6:	88fa      	ldrh	r2, [r7, #6]
34014ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
34014cac:	68fb      	ldr	r3, [r7, #12]
34014cae:	2200      	movs	r2, #0
34014cb0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
34014cb2:	68fb      	ldr	r3, [r7, #12]
34014cb4:	2200      	movs	r2, #0
34014cb6:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
34014cb8:	68fb      	ldr	r3, [r7, #12]
34014cba:	2200      	movs	r2, #0
34014cbc:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
34014cbe:	68fb      	ldr	r3, [r7, #12]
34014cc0:	2200      	movs	r2, #0
34014cc2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
34014cc6:	68fb      	ldr	r3, [r7, #12]
34014cc8:	2200      	movs	r2, #0
34014cca:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
34014cce:	68fb      	ldr	r3, [r7, #12]
34014cd0:	689b      	ldr	r3, [r3, #8]
34014cd2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34014cd6:	d108      	bne.n	34014cea <HAL_SPI_Transmit_DMA+0xce>
  {
    SPI_1LINE_TX(hspi);
34014cd8:	68fb      	ldr	r3, [r7, #12]
34014cda:	681b      	ldr	r3, [r3, #0]
34014cdc:	681a      	ldr	r2, [r3, #0]
34014cde:	68fb      	ldr	r3, [r7, #12]
34014ce0:	681b      	ldr	r3, [r3, #0]
34014ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34014ce6:	601a      	str	r2, [r3, #0]
34014ce8:	e009      	b.n	34014cfe <HAL_SPI_Transmit_DMA+0xe2>
  }
  else
  {
    SPI_2LINES_TX(hspi);
34014cea:	68fb      	ldr	r3, [r7, #12]
34014cec:	681b      	ldr	r3, [r3, #0]
34014cee:	68db      	ldr	r3, [r3, #12]
34014cf0:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
34014cf4:	68fb      	ldr	r3, [r7, #12]
34014cf6:	681b      	ldr	r3, [r3, #0]
34014cf8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
34014cfc:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
34014cfe:	68fb      	ldr	r3, [r7, #12]
34014d00:	68db      	ldr	r3, [r3, #12]
34014d02:	2b0f      	cmp	r3, #15
34014d04:	d92d      	bls.n	34014d62 <HAL_SPI_Transmit_DMA+0x146>
34014d06:	68fb      	ldr	r3, [r7, #12]
34014d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014d0c:	699b      	ldr	r3, [r3, #24]
34014d0e:	2b02      	cmp	r3, #2
34014d10:	d027      	beq.n	34014d62 <HAL_SPI_Transmit_DMA+0x146>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014d12:	68fb      	ldr	r3, [r7, #12]
34014d14:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
34014d16:	4a50      	ldr	r2, [pc, #320]	@ (34014e58 <HAL_SPI_Transmit_DMA+0x23c>)
34014d18:	4293      	cmp	r3, r2
34014d1a:	d02c      	beq.n	34014d76 <HAL_SPI_Transmit_DMA+0x15a>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014d1c:	68fb      	ldr	r3, [r7, #12]
34014d1e:	681b      	ldr	r3, [r3, #0]
34014d20:	4a4e      	ldr	r2, [pc, #312]	@ (34014e5c <HAL_SPI_Transmit_DMA+0x240>)
34014d22:	4293      	cmp	r3, r2
34014d24:	d027      	beq.n	34014d76 <HAL_SPI_Transmit_DMA+0x15a>
34014d26:	68fb      	ldr	r3, [r7, #12]
34014d28:	681b      	ldr	r3, [r3, #0]
34014d2a:	4a4d      	ldr	r2, [pc, #308]	@ (34014e60 <HAL_SPI_Transmit_DMA+0x244>)
34014d2c:	4293      	cmp	r3, r2
34014d2e:	d022      	beq.n	34014d76 <HAL_SPI_Transmit_DMA+0x15a>
34014d30:	68fb      	ldr	r3, [r7, #12]
34014d32:	681b      	ldr	r3, [r3, #0]
34014d34:	4a4b      	ldr	r2, [pc, #300]	@ (34014e64 <HAL_SPI_Transmit_DMA+0x248>)
34014d36:	4293      	cmp	r3, r2
34014d38:	d01d      	beq.n	34014d76 <HAL_SPI_Transmit_DMA+0x15a>
34014d3a:	68fb      	ldr	r3, [r7, #12]
34014d3c:	681b      	ldr	r3, [r3, #0]
34014d3e:	4a4a      	ldr	r2, [pc, #296]	@ (34014e68 <HAL_SPI_Transmit_DMA+0x24c>)
34014d40:	4293      	cmp	r3, r2
34014d42:	d018      	beq.n	34014d76 <HAL_SPI_Transmit_DMA+0x15a>
34014d44:	68fb      	ldr	r3, [r7, #12]
34014d46:	681b      	ldr	r3, [r3, #0]
34014d48:	4a48      	ldr	r2, [pc, #288]	@ (34014e6c <HAL_SPI_Transmit_DMA+0x250>)
34014d4a:	4293      	cmp	r3, r2
34014d4c:	d013      	beq.n	34014d76 <HAL_SPI_Transmit_DMA+0x15a>
34014d4e:	68fb      	ldr	r3, [r7, #12]
34014d50:	681b      	ldr	r3, [r3, #0]
34014d52:	4a47      	ldr	r2, [pc, #284]	@ (34014e70 <HAL_SPI_Transmit_DMA+0x254>)
34014d54:	4293      	cmp	r3, r2
34014d56:	d00e      	beq.n	34014d76 <HAL_SPI_Transmit_DMA+0x15a>
34014d58:	68fb      	ldr	r3, [r7, #12]
34014d5a:	681b      	ldr	r3, [r3, #0]
34014d5c:	4a45      	ldr	r2, [pc, #276]	@ (34014e74 <HAL_SPI_Transmit_DMA+0x258>)
34014d5e:	4293      	cmp	r3, r2
34014d60:	d009      	beq.n	34014d76 <HAL_SPI_Transmit_DMA+0x15a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
34014d62:	68fb      	ldr	r3, [r7, #12]
34014d64:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014d66:	2b07      	cmp	r3, #7
34014d68:	d90b      	bls.n	34014d82 <HAL_SPI_Transmit_DMA+0x166>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
34014d6a:	68fb      	ldr	r3, [r7, #12]
34014d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014d70:	699b      	ldr	r3, [r3, #24]
34014d72:	2b00      	cmp	r3, #0
34014d74:	d105      	bne.n	34014d82 <HAL_SPI_Transmit_DMA+0x166>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
34014d76:	68fb      	ldr	r3, [r7, #12]
34014d78:	2200      	movs	r2, #0
34014d7a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
34014d7e:	2301      	movs	r3, #1
34014d80:	e126      	b.n	34014fd0 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
34014d82:	68fb      	ldr	r3, [r7, #12]
34014d84:	68db      	ldr	r3, [r3, #12]
34014d86:	2b07      	cmp	r3, #7
34014d88:	d820      	bhi.n	34014dcc <HAL_SPI_Transmit_DMA+0x1b0>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
34014d8a:	68fb      	ldr	r3, [r7, #12]
34014d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014d90:	699b      	ldr	r3, [r3, #24]
34014d92:	2b01      	cmp	r3, #1
34014d94:	d109      	bne.n	34014daa <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
34014d96:	68fb      	ldr	r3, [r7, #12]
34014d98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014d9c:	b29b      	uxth	r3, r3
34014d9e:	3301      	adds	r3, #1
34014da0:	105b      	asrs	r3, r3, #1
34014da2:	b29a      	uxth	r2, r3
34014da4:	68fb      	ldr	r3, [r7, #12]
34014da6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
34014daa:	68fb      	ldr	r3, [r7, #12]
34014dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014db0:	699b      	ldr	r3, [r3, #24]
34014db2:	2b02      	cmp	r3, #2
34014db4:	d11e      	bne.n	34014df4 <HAL_SPI_Transmit_DMA+0x1d8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
34014db6:	68fb      	ldr	r3, [r7, #12]
34014db8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014dbc:	b29b      	uxth	r3, r3
34014dbe:	3303      	adds	r3, #3
34014dc0:	109b      	asrs	r3, r3, #2
34014dc2:	b29a      	uxth	r2, r3
34014dc4:	68fb      	ldr	r3, [r7, #12]
34014dc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
34014dca:	e013      	b.n	34014df4 <HAL_SPI_Transmit_DMA+0x1d8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
34014dcc:	68fb      	ldr	r3, [r7, #12]
34014dce:	68db      	ldr	r3, [r3, #12]
34014dd0:	2b0f      	cmp	r3, #15
34014dd2:	d80f      	bhi.n	34014df4 <HAL_SPI_Transmit_DMA+0x1d8>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
34014dd4:	68fb      	ldr	r3, [r7, #12]
34014dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014dda:	699b      	ldr	r3, [r3, #24]
34014ddc:	2b02      	cmp	r3, #2
34014dde:	d109      	bne.n	34014df4 <HAL_SPI_Transmit_DMA+0x1d8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
34014de0:	68fb      	ldr	r3, [r7, #12]
34014de2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014de6:	b29b      	uxth	r3, r3
34014de8:	3301      	adds	r3, #1
34014dea:	105b      	asrs	r3, r3, #1
34014dec:	b29a      	uxth	r2, r3
34014dee:	68fb      	ldr	r3, [r7, #12]
34014df0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
34014df4:	68fb      	ldr	r3, [r7, #12]
34014df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014dfa:	4a1f      	ldr	r2, [pc, #124]	@ (34014e78 <HAL_SPI_Transmit_DMA+0x25c>)
34014dfc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
34014dfe:	68fb      	ldr	r3, [r7, #12]
34014e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014e04:	4a1d      	ldr	r2, [pc, #116]	@ (34014e7c <HAL_SPI_Transmit_DMA+0x260>)
34014e06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
34014e08:	68fb      	ldr	r3, [r7, #12]
34014e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014e0e:	4a1c      	ldr	r2, [pc, #112]	@ (34014e80 <HAL_SPI_Transmit_DMA+0x264>)
34014e10:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
34014e12:	68fb      	ldr	r3, [r7, #12]
34014e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014e18:	2200      	movs	r2, #0
34014e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
34014e1c:	68fb      	ldr	r3, [r7, #12]
34014e1e:	681b      	ldr	r3, [r3, #0]
34014e20:	689a      	ldr	r2, [r3, #8]
34014e22:	68fb      	ldr	r3, [r7, #12]
34014e24:	681b      	ldr	r3, [r3, #0]
34014e26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34014e2a:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
34014e2c:	68fb      	ldr	r3, [r7, #12]
34014e2e:	68db      	ldr	r3, [r3, #12]
34014e30:	2b07      	cmp	r3, #7
34014e32:	d804      	bhi.n	34014e3e <HAL_SPI_Transmit_DMA+0x222>
  {
    hspi->TxXferCount = Size;
34014e34:	68fb      	ldr	r3, [r7, #12]
34014e36:	88fa      	ldrh	r2, [r7, #6]
34014e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
34014e3c:	e028      	b.n	34014e90 <HAL_SPI_Transmit_DMA+0x274>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
34014e3e:	68fb      	ldr	r3, [r7, #12]
34014e40:	68db      	ldr	r3, [r3, #12]
34014e42:	2b0f      	cmp	r3, #15
34014e44:	d81e      	bhi.n	34014e84 <HAL_SPI_Transmit_DMA+0x268>
  {
    hspi->TxXferCount = Size * 2U;
34014e46:	88fb      	ldrh	r3, [r7, #6]
34014e48:	005b      	lsls	r3, r3, #1
34014e4a:	b29a      	uxth	r2, r3
34014e4c:	68fb      	ldr	r3, [r7, #12]
34014e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
34014e52:	e01d      	b.n	34014e90 <HAL_SPI_Transmit_DMA+0x274>
34014e54:	3401d008 	.word	0x3401d008
34014e58:	52003000 	.word	0x52003000
34014e5c:	42003000 	.word	0x42003000
34014e60:	50003800 	.word	0x50003800
34014e64:	40003800 	.word	0x40003800
34014e68:	50003c00 	.word	0x50003c00
34014e6c:	40003c00 	.word	0x40003c00
34014e70:	56001400 	.word	0x56001400
34014e74:	46001400 	.word	0x46001400
34014e78:	34015417 	.word	0x34015417
34014e7c:	340153d1 	.word	0x340153d1
34014e80:	34015433 	.word	0x34015433
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
34014e84:	88fb      	ldrh	r3, [r7, #6]
34014e86:	009b      	lsls	r3, r3, #2
34014e88:	b29a      	uxth	r2, r3
34014e8a:	68fb      	ldr	r3, [r7, #12]
34014e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34014e90:	68fb      	ldr	r3, [r7, #12]
34014e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34014e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34014e9c:	2b00      	cmp	r3, #0
34014e9e:	d02d      	beq.n	34014efc <HAL_SPI_Transmit_DMA+0x2e0>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
34014ea0:	68fb      	ldr	r3, [r7, #12]
34014ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34014ea8:	2b00      	cmp	r3, #0
34014eaa:	d024      	beq.n	34014ef6 <HAL_SPI_Transmit_DMA+0x2da>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
34014eac:	68fb      	ldr	r3, [r7, #12]
34014eae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014eb2:	b29a      	uxth	r2, r3
34014eb4:	68fb      	ldr	r3, [r7, #12]
34014eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34014ebc:	681b      	ldr	r3, [r3, #0]
34014ebe:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
34014ec0:	68fb      	ldr	r3, [r7, #12]
34014ec2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
34014ec4:	68fb      	ldr	r3, [r7, #12]
34014ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34014ecc:	681b      	ldr	r3, [r3, #0]
34014ece:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
34014ed0:	68fb      	ldr	r3, [r7, #12]
34014ed2:	681b      	ldr	r3, [r3, #0]
34014ed4:	f103 0220 	add.w	r2, r3, #32
34014ed8:	68fb      	ldr	r3, [r7, #12]
34014eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34014ee0:	681b      	ldr	r3, [r3, #0]
34014ee2:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
34014ee4:	68fb      	ldr	r3, [r7, #12]
34014ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014eea:	4618      	mov	r0, r3
34014eec:	f7f0 fb91 	bl	34005612 <HAL_DMAEx_List_Start_IT>
34014ef0:	4603      	mov	r3, r0
34014ef2:	75fb      	strb	r3, [r7, #23]
34014ef4:	e014      	b.n	34014f20 <HAL_SPI_Transmit_DMA+0x304>
    }
    else
    {
      status = HAL_ERROR;
34014ef6:	2301      	movs	r3, #1
34014ef8:	75fb      	strb	r3, [r7, #23]
34014efa:	e011      	b.n	34014f20 <HAL_SPI_Transmit_DMA+0x304>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
34014efc:	68fb      	ldr	r3, [r7, #12]
34014efe:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
34014f02:	68fb      	ldr	r3, [r7, #12]
34014f04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34014f06:	4619      	mov	r1, r3
34014f08:	68fb      	ldr	r3, [r7, #12]
34014f0a:	681b      	ldr	r3, [r3, #0]
34014f0c:	3320      	adds	r3, #32
34014f0e:	461a      	mov	r2, r3
                              hspi->TxXferCount);
34014f10:	68fb      	ldr	r3, [r7, #12]
34014f12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014f16:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
34014f18:	f7f0 f83a 	bl	34004f90 <HAL_DMA_Start_IT>
34014f1c:	4603      	mov	r3, r0
34014f1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
34014f20:	7dfb      	ldrb	r3, [r7, #23]
34014f22:	2b00      	cmp	r3, #0
34014f24:	d011      	beq.n	34014f4a <HAL_SPI_Transmit_DMA+0x32e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
34014f26:	68fb      	ldr	r3, [r7, #12]
34014f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014f2c:	f043 0210 	orr.w	r2, r3, #16
34014f30:	68fb      	ldr	r3, [r7, #12]
34014f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
34014f36:	68fb      	ldr	r3, [r7, #12]
34014f38:	2201      	movs	r2, #1
34014f3a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
34014f3e:	68fb      	ldr	r3, [r7, #12]
34014f40:	2200      	movs	r2, #0
34014f42:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
34014f46:	2301      	movs	r3, #1
34014f48:	e042      	b.n	34014fd0 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
34014f4a:	68fb      	ldr	r3, [r7, #12]
34014f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34014f52:	2b81      	cmp	r3, #129	@ 0x81
34014f54:	d108      	bne.n	34014f68 <HAL_SPI_Transmit_DMA+0x34c>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
34014f56:	68fb      	ldr	r3, [r7, #12]
34014f58:	681b      	ldr	r3, [r3, #0]
34014f5a:	685b      	ldr	r3, [r3, #4]
34014f5c:	68fa      	ldr	r2, [r7, #12]
34014f5e:	6812      	ldr	r2, [r2, #0]
34014f60:	0c1b      	lsrs	r3, r3, #16
34014f62:	041b      	lsls	r3, r3, #16
34014f64:	6053      	str	r3, [r2, #4]
34014f66:	e009      	b.n	34014f7c <HAL_SPI_Transmit_DMA+0x360>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
34014f68:	68fb      	ldr	r3, [r7, #12]
34014f6a:	681b      	ldr	r3, [r3, #0]
34014f6c:	685b      	ldr	r3, [r3, #4]
34014f6e:	0c1b      	lsrs	r3, r3, #16
34014f70:	041b      	lsls	r3, r3, #16
34014f72:	88f9      	ldrh	r1, [r7, #6]
34014f74:	68fa      	ldr	r2, [r7, #12]
34014f76:	6812      	ldr	r2, [r2, #0]
34014f78:	430b      	orrs	r3, r1
34014f7a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
34014f7c:	68fb      	ldr	r3, [r7, #12]
34014f7e:	681b      	ldr	r3, [r3, #0]
34014f80:	689a      	ldr	r2, [r3, #8]
34014f82:	68fb      	ldr	r3, [r7, #12]
34014f84:	681b      	ldr	r3, [r3, #0]
34014f86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34014f8a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
34014f8c:	68fb      	ldr	r3, [r7, #12]
34014f8e:	681b      	ldr	r3, [r3, #0]
34014f90:	691a      	ldr	r2, [r3, #16]
34014f92:	68fb      	ldr	r3, [r7, #12]
34014f94:	681b      	ldr	r3, [r3, #0]
34014f96:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
34014f9a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
34014f9c:	68fb      	ldr	r3, [r7, #12]
34014f9e:	681b      	ldr	r3, [r3, #0]
34014fa0:	681a      	ldr	r2, [r3, #0]
34014fa2:	68fb      	ldr	r3, [r7, #12]
34014fa4:	681b      	ldr	r3, [r3, #0]
34014fa6:	f042 0201 	orr.w	r2, r2, #1
34014faa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
34014fac:	68fb      	ldr	r3, [r7, #12]
34014fae:	685b      	ldr	r3, [r3, #4]
34014fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34014fb4:	d107      	bne.n	34014fc6 <HAL_SPI_Transmit_DMA+0x3aa>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
34014fb6:	68fb      	ldr	r3, [r7, #12]
34014fb8:	681b      	ldr	r3, [r3, #0]
34014fba:	681a      	ldr	r2, [r3, #0]
34014fbc:	68fb      	ldr	r3, [r7, #12]
34014fbe:	681b      	ldr	r3, [r3, #0]
34014fc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34014fc4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
34014fc6:	68fb      	ldr	r3, [r7, #12]
34014fc8:	2200      	movs	r2, #0
34014fca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
34014fce:	2300      	movs	r3, #0
}
34014fd0:	4618      	mov	r0, r3
34014fd2:	3718      	adds	r7, #24
34014fd4:	46bd      	mov	sp, r7
34014fd6:	bd80      	pop	{r7, pc}

34014fd8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
34014fd8:	b580      	push	{r7, lr}
34014fda:	b08a      	sub	sp, #40	@ 0x28
34014fdc:	af00      	add	r7, sp, #0
34014fde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
34014fe0:	687b      	ldr	r3, [r7, #4]
34014fe2:	681b      	ldr	r3, [r3, #0]
34014fe4:	691b      	ldr	r3, [r3, #16]
34014fe6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
34014fe8:	687b      	ldr	r3, [r7, #4]
34014fea:	681b      	ldr	r3, [r3, #0]
34014fec:	695b      	ldr	r3, [r3, #20]
34014fee:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
34014ff0:	6a3a      	ldr	r2, [r7, #32]
34014ff2:	69fb      	ldr	r3, [r7, #28]
34014ff4:	4013      	ands	r3, r2
34014ff6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
34014ff8:	687b      	ldr	r3, [r7, #4]
34014ffa:	681b      	ldr	r3, [r3, #0]
34014ffc:	689b      	ldr	r3, [r3, #8]
34014ffe:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
34015000:	2300      	movs	r3, #0
34015002:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
34015004:	687b      	ldr	r3, [r7, #4]
34015006:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
3401500a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
3401500c:	687b      	ldr	r3, [r7, #4]
3401500e:	681b      	ldr	r3, [r3, #0]
34015010:	3330      	adds	r3, #48	@ 0x30
34015012:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
34015014:	69fb      	ldr	r3, [r7, #28]
34015016:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3401501a:	2b00      	cmp	r3, #0
3401501c:	d010      	beq.n	34015040 <HAL_SPI_IRQHandler+0x68>
3401501e:	6a3b      	ldr	r3, [r7, #32]
34015020:	f003 0308 	and.w	r3, r3, #8
34015024:	2b00      	cmp	r3, #0
34015026:	d00b      	beq.n	34015040 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
34015028:	687b      	ldr	r3, [r7, #4]
3401502a:	681b      	ldr	r3, [r3, #0]
3401502c:	699a      	ldr	r2, [r3, #24]
3401502e:	687b      	ldr	r3, [r7, #4]
34015030:	681b      	ldr	r3, [r3, #0]
34015032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34015036:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
34015038:	6878      	ldr	r0, [r7, #4]
3401503a:	f000 f9bf 	bl	340153bc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
3401503e:	e19a      	b.n	34015376 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
34015040:	69bb      	ldr	r3, [r7, #24]
34015042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015046:	2b00      	cmp	r3, #0
34015048:	d113      	bne.n	34015072 <HAL_SPI_IRQHandler+0x9a>
3401504a:	69bb      	ldr	r3, [r7, #24]
3401504c:	f003 0320 	and.w	r3, r3, #32
34015050:	2b00      	cmp	r3, #0
34015052:	d10e      	bne.n	34015072 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
34015054:	69bb      	ldr	r3, [r7, #24]
34015056:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
3401505a:	2b00      	cmp	r3, #0
3401505c:	d009      	beq.n	34015072 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
3401505e:	687b      	ldr	r3, [r7, #4]
34015060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34015062:	6878      	ldr	r0, [r7, #4]
34015064:	4798      	blx	r3
    hspi->RxISR(hspi);
34015066:	687b      	ldr	r3, [r7, #4]
34015068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3401506a:	6878      	ldr	r0, [r7, #4]
3401506c:	4798      	blx	r3
    handled = 1UL;
3401506e:	2301      	movs	r3, #1
34015070:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
34015072:	69bb      	ldr	r3, [r7, #24]
34015074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015078:	2b00      	cmp	r3, #0
3401507a:	d10f      	bne.n	3401509c <HAL_SPI_IRQHandler+0xc4>
3401507c:	69bb      	ldr	r3, [r7, #24]
3401507e:	f003 0301 	and.w	r3, r3, #1
34015082:	2b00      	cmp	r3, #0
34015084:	d00a      	beq.n	3401509c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
34015086:	69bb      	ldr	r3, [r7, #24]
34015088:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
3401508c:	2b00      	cmp	r3, #0
3401508e:	d105      	bne.n	3401509c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
34015090:	687b      	ldr	r3, [r7, #4]
34015092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34015094:	6878      	ldr	r0, [r7, #4]
34015096:	4798      	blx	r3
    handled = 1UL;
34015098:	2301      	movs	r3, #1
3401509a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
3401509c:	69bb      	ldr	r3, [r7, #24]
3401509e:	f003 0320 	and.w	r3, r3, #32
340150a2:	2b00      	cmp	r3, #0
340150a4:	d10f      	bne.n	340150c6 <HAL_SPI_IRQHandler+0xee>
340150a6:	69bb      	ldr	r3, [r7, #24]
340150a8:	f003 0302 	and.w	r3, r3, #2
340150ac:	2b00      	cmp	r3, #0
340150ae:	d00a      	beq.n	340150c6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
340150b0:	69bb      	ldr	r3, [r7, #24]
340150b2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
340150b6:	2b00      	cmp	r3, #0
340150b8:	d105      	bne.n	340150c6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
340150ba:	687b      	ldr	r3, [r7, #4]
340150bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340150be:	6878      	ldr	r0, [r7, #4]
340150c0:	4798      	blx	r3
    handled = 1UL;
340150c2:	2301      	movs	r3, #1
340150c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
340150c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340150c8:	2b00      	cmp	r3, #0
340150ca:	f040 814f 	bne.w	3401536c <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
340150ce:	69bb      	ldr	r3, [r7, #24]
340150d0:	f003 0308 	and.w	r3, r3, #8
340150d4:	2b00      	cmp	r3, #0
340150d6:	f000 808b 	beq.w	340151f0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
340150da:	687b      	ldr	r3, [r7, #4]
340150dc:	681b      	ldr	r3, [r3, #0]
340150de:	699a      	ldr	r2, [r3, #24]
340150e0:	687b      	ldr	r3, [r7, #4]
340150e2:	681b      	ldr	r3, [r3, #0]
340150e4:	f042 0208 	orr.w	r2, r2, #8
340150e8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
340150ea:	687b      	ldr	r3, [r7, #4]
340150ec:	681b      	ldr	r3, [r3, #0]
340150ee:	699a      	ldr	r2, [r3, #24]
340150f0:	687b      	ldr	r3, [r7, #4]
340150f2:	681b      	ldr	r3, [r3, #0]
340150f4:	f042 0210 	orr.w	r2, r2, #16
340150f8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
340150fa:	687b      	ldr	r3, [r7, #4]
340150fc:	681b      	ldr	r3, [r3, #0]
340150fe:	699a      	ldr	r2, [r3, #24]
34015100:	687b      	ldr	r3, [r7, #4]
34015102:	681b      	ldr	r3, [r3, #0]
34015104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34015108:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
3401510a:	687b      	ldr	r3, [r7, #4]
3401510c:	681b      	ldr	r3, [r3, #0]
3401510e:	691a      	ldr	r2, [r3, #16]
34015110:	687b      	ldr	r3, [r7, #4]
34015112:	681b      	ldr	r3, [r3, #0]
34015114:	f022 0208 	bic.w	r2, r2, #8
34015118:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
3401511a:	687b      	ldr	r3, [r7, #4]
3401511c:	681b      	ldr	r3, [r3, #0]
3401511e:	689b      	ldr	r3, [r3, #8]
34015120:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
34015124:	2b00      	cmp	r3, #0
34015126:	d13d      	bne.n	340151a4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
34015128:	e036      	b.n	34015198 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
3401512a:	687b      	ldr	r3, [r7, #4]
3401512c:	68db      	ldr	r3, [r3, #12]
3401512e:	2b0f      	cmp	r3, #15
34015130:	d90b      	bls.n	3401514a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
34015132:	687b      	ldr	r3, [r7, #4]
34015134:	681a      	ldr	r2, [r3, #0]
34015136:	687b      	ldr	r3, [r7, #4]
34015138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3401513a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
3401513c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
3401513e:	687b      	ldr	r3, [r7, #4]
34015140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015142:	1d1a      	adds	r2, r3, #4
34015144:	687b      	ldr	r3, [r7, #4]
34015146:	66da      	str	r2, [r3, #108]	@ 0x6c
34015148:	e01d      	b.n	34015186 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
3401514a:	687b      	ldr	r3, [r7, #4]
3401514c:	68db      	ldr	r3, [r3, #12]
3401514e:	2b07      	cmp	r3, #7
34015150:	d90b      	bls.n	3401516a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
34015152:	687b      	ldr	r3, [r7, #4]
34015154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015156:	68fa      	ldr	r2, [r7, #12]
34015158:	8812      	ldrh	r2, [r2, #0]
3401515a:	b292      	uxth	r2, r2
3401515c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
3401515e:	687b      	ldr	r3, [r7, #4]
34015160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015162:	1c9a      	adds	r2, r3, #2
34015164:	687b      	ldr	r3, [r7, #4]
34015166:	66da      	str	r2, [r3, #108]	@ 0x6c
34015168:	e00d      	b.n	34015186 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
3401516a:	687b      	ldr	r3, [r7, #4]
3401516c:	681b      	ldr	r3, [r3, #0]
3401516e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
34015172:	687b      	ldr	r3, [r7, #4]
34015174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015176:	7812      	ldrb	r2, [r2, #0]
34015178:	b2d2      	uxtb	r2, r2
3401517a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
3401517c:	687b      	ldr	r3, [r7, #4]
3401517e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015180:	1c5a      	adds	r2, r3, #1
34015182:	687b      	ldr	r3, [r7, #4]
34015184:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
34015186:	687b      	ldr	r3, [r7, #4]
34015188:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
3401518c:	b29b      	uxth	r3, r3
3401518e:	3b01      	subs	r3, #1
34015190:	b29a      	uxth	r2, r3
34015192:	687b      	ldr	r3, [r7, #4]
34015194:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
34015198:	687b      	ldr	r3, [r7, #4]
3401519a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
3401519e:	b29b      	uxth	r3, r3
340151a0:	2b00      	cmp	r3, #0
340151a2:	d1c2      	bne.n	3401512a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
340151a4:	6878      	ldr	r0, [r7, #4]
340151a6:	f000 f981 	bl	340154ac <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
340151aa:	687b      	ldr	r3, [r7, #4]
340151ac:	2201      	movs	r2, #1
340151ae:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
340151b2:	687b      	ldr	r3, [r7, #4]
340151b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340151b8:	2b00      	cmp	r3, #0
340151ba:	d003      	beq.n	340151c4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
340151bc:	6878      	ldr	r0, [r7, #4]
340151be:	f002 fcdd 	bl	34017b7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
340151c2:	e0d8      	b.n	34015376 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
340151c4:	7cfb      	ldrb	r3, [r7, #19]
340151c6:	2b05      	cmp	r3, #5
340151c8:	d103      	bne.n	340151d2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
340151ca:	6878      	ldr	r0, [r7, #4]
340151cc:	f000 f8e2 	bl	34015394 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
340151d0:	e0ce      	b.n	34015370 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
340151d2:	7cfb      	ldrb	r3, [r7, #19]
340151d4:	2b04      	cmp	r3, #4
340151d6:	d103      	bne.n	340151e0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
340151d8:	6878      	ldr	r0, [r7, #4]
340151da:	f000 f8d1 	bl	34015380 <HAL_SPI_RxCpltCallback>
    return;
340151de:	e0c7      	b.n	34015370 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
340151e0:	7cfb      	ldrb	r3, [r7, #19]
340151e2:	2b03      	cmp	r3, #3
340151e4:	f040 80c4 	bne.w	34015370 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
340151e8:	6878      	ldr	r0, [r7, #4]
340151ea:	f002 fcab 	bl	34017b44 <HAL_SPI_TxCpltCallback>
    return;
340151ee:	e0bf      	b.n	34015370 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
340151f0:	69bb      	ldr	r3, [r7, #24]
340151f2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
340151f6:	2b00      	cmp	r3, #0
340151f8:	f000 80bd 	beq.w	34015376 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
340151fc:	69bb      	ldr	r3, [r7, #24]
340151fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015202:	2b00      	cmp	r3, #0
34015204:	d00f      	beq.n	34015226 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
34015206:	687b      	ldr	r3, [r7, #4]
34015208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401520c:	f043 0204 	orr.w	r2, r3, #4
34015210:	687b      	ldr	r3, [r7, #4]
34015212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
34015216:	687b      	ldr	r3, [r7, #4]
34015218:	681b      	ldr	r3, [r3, #0]
3401521a:	699a      	ldr	r2, [r3, #24]
3401521c:	687b      	ldr	r3, [r7, #4]
3401521e:	681b      	ldr	r3, [r3, #0]
34015220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
34015224:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
34015226:	69bb      	ldr	r3, [r7, #24]
34015228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3401522c:	2b00      	cmp	r3, #0
3401522e:	d00f      	beq.n	34015250 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
34015230:	687b      	ldr	r3, [r7, #4]
34015232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015236:	f043 0201 	orr.w	r2, r3, #1
3401523a:	687b      	ldr	r3, [r7, #4]
3401523c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
34015240:	687b      	ldr	r3, [r7, #4]
34015242:	681b      	ldr	r3, [r3, #0]
34015244:	699a      	ldr	r2, [r3, #24]
34015246:	687b      	ldr	r3, [r7, #4]
34015248:	681b      	ldr	r3, [r3, #0]
3401524a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
3401524e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
34015250:	69bb      	ldr	r3, [r7, #24]
34015252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34015256:	2b00      	cmp	r3, #0
34015258:	d00f      	beq.n	3401527a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
3401525a:	687b      	ldr	r3, [r7, #4]
3401525c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015260:	f043 0208 	orr.w	r2, r3, #8
34015264:	687b      	ldr	r3, [r7, #4]
34015266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
3401526a:	687b      	ldr	r3, [r7, #4]
3401526c:	681b      	ldr	r3, [r3, #0]
3401526e:	699a      	ldr	r2, [r3, #24]
34015270:	687b      	ldr	r3, [r7, #4]
34015272:	681b      	ldr	r3, [r3, #0]
34015274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34015278:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
3401527a:	69bb      	ldr	r3, [r7, #24]
3401527c:	f003 0320 	and.w	r3, r3, #32
34015280:	2b00      	cmp	r3, #0
34015282:	d00f      	beq.n	340152a4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
34015284:	687b      	ldr	r3, [r7, #4]
34015286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401528a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
3401528e:	687b      	ldr	r3, [r7, #4]
34015290:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
34015294:	687b      	ldr	r3, [r7, #4]
34015296:	681b      	ldr	r3, [r3, #0]
34015298:	699a      	ldr	r2, [r3, #24]
3401529a:	687b      	ldr	r3, [r7, #4]
3401529c:	681b      	ldr	r3, [r3, #0]
3401529e:	f042 0220 	orr.w	r2, r2, #32
340152a2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
340152a4:	687b      	ldr	r3, [r7, #4]
340152a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340152aa:	2b00      	cmp	r3, #0
340152ac:	d062      	beq.n	34015374 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
340152ae:	687b      	ldr	r3, [r7, #4]
340152b0:	681b      	ldr	r3, [r3, #0]
340152b2:	681a      	ldr	r2, [r3, #0]
340152b4:	687b      	ldr	r3, [r7, #4]
340152b6:	681b      	ldr	r3, [r3, #0]
340152b8:	f022 0201 	bic.w	r2, r2, #1
340152bc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
340152be:	687b      	ldr	r3, [r7, #4]
340152c0:	681b      	ldr	r3, [r3, #0]
340152c2:	691b      	ldr	r3, [r3, #16]
340152c4:	687a      	ldr	r2, [r7, #4]
340152c6:	6812      	ldr	r2, [r2, #0]
340152c8:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
340152cc:	f023 0303 	bic.w	r3, r3, #3
340152d0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
340152d2:	697b      	ldr	r3, [r7, #20]
340152d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
340152d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
340152dc:	d13e      	bne.n	3401535c <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
340152de:	687b      	ldr	r3, [r7, #4]
340152e0:	681b      	ldr	r3, [r3, #0]
340152e2:	689a      	ldr	r2, [r3, #8]
340152e4:	687b      	ldr	r3, [r7, #4]
340152e6:	681b      	ldr	r3, [r3, #0]
340152e8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
340152ec:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
340152ee:	687b      	ldr	r3, [r7, #4]
340152f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
340152f4:	2b00      	cmp	r3, #0
340152f6:	d015      	beq.n	34015324 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
340152f8:	687b      	ldr	r3, [r7, #4]
340152fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
340152fe:	4a1f      	ldr	r2, [pc, #124]	@ (3401537c <HAL_SPI_IRQHandler+0x3a4>)
34015300:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
34015302:	687b      	ldr	r3, [r7, #4]
34015304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34015308:	4618      	mov	r0, r3
3401530a:	f7ef feaf 	bl	3400506c <HAL_DMA_Abort_IT>
3401530e:	4603      	mov	r3, r0
34015310:	2b00      	cmp	r3, #0
34015312:	d007      	beq.n	34015324 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
34015314:	687b      	ldr	r3, [r7, #4]
34015316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401531a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
3401531e:	687b      	ldr	r3, [r7, #4]
34015320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
34015324:	687b      	ldr	r3, [r7, #4]
34015326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401532a:	2b00      	cmp	r3, #0
3401532c:	d022      	beq.n	34015374 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
3401532e:	687b      	ldr	r3, [r7, #4]
34015330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015334:	4a11      	ldr	r2, [pc, #68]	@ (3401537c <HAL_SPI_IRQHandler+0x3a4>)
34015336:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
34015338:	687b      	ldr	r3, [r7, #4]
3401533a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401533e:	4618      	mov	r0, r3
34015340:	f7ef fe94 	bl	3400506c <HAL_DMA_Abort_IT>
34015344:	4603      	mov	r3, r0
34015346:	2b00      	cmp	r3, #0
34015348:	d014      	beq.n	34015374 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
3401534a:	687b      	ldr	r3, [r7, #4]
3401534c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015350:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
34015354:	687b      	ldr	r3, [r7, #4]
34015356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
3401535a:	e00b      	b.n	34015374 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
3401535c:	687b      	ldr	r3, [r7, #4]
3401535e:	2201      	movs	r2, #1
34015360:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
34015364:	6878      	ldr	r0, [r7, #4]
34015366:	f002 fc09 	bl	34017b7c <HAL_SPI_ErrorCallback>
    return;
3401536a:	e003      	b.n	34015374 <HAL_SPI_IRQHandler+0x39c>
    return;
3401536c:	bf00      	nop
3401536e:	e002      	b.n	34015376 <HAL_SPI_IRQHandler+0x39e>
    return;
34015370:	bf00      	nop
34015372:	e000      	b.n	34015376 <HAL_SPI_IRQHandler+0x39e>
    return;
34015374:	bf00      	nop
  }
}
34015376:	3728      	adds	r7, #40	@ 0x28
34015378:	46bd      	mov	sp, r7
3401537a:	bd80      	pop	{r7, pc}
3401537c:	34015479 	.word	0x34015479

34015380 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
34015380:	b480      	push	{r7}
34015382:	b083      	sub	sp, #12
34015384:	af00      	add	r7, sp, #0
34015386:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
34015388:	bf00      	nop
3401538a:	370c      	adds	r7, #12
3401538c:	46bd      	mov	sp, r7
3401538e:	f85d 7b04 	ldr.w	r7, [sp], #4
34015392:	4770      	bx	lr

34015394 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
34015394:	b480      	push	{r7}
34015396:	b083      	sub	sp, #12
34015398:	af00      	add	r7, sp, #0
3401539a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
3401539c:	bf00      	nop
3401539e:	370c      	adds	r7, #12
340153a0:	46bd      	mov	sp, r7
340153a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340153a6:	4770      	bx	lr

340153a8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340153a8:	b480      	push	{r7}
340153aa:	b083      	sub	sp, #12
340153ac:	af00      	add	r7, sp, #0
340153ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
340153b0:	bf00      	nop
340153b2:	370c      	adds	r7, #12
340153b4:	46bd      	mov	sp, r7
340153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
340153ba:	4770      	bx	lr

340153bc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340153bc:	b480      	push	{r7}
340153be:	b083      	sub	sp, #12
340153c0:	af00      	add	r7, sp, #0
340153c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
340153c4:	bf00      	nop
340153c6:	370c      	adds	r7, #12
340153c8:	46bd      	mov	sp, r7
340153ca:	f85d 7b04 	ldr.w	r7, [sp], #4
340153ce:	4770      	bx	lr

340153d0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
340153d0:	b580      	push	{r7, lr}
340153d2:	b084      	sub	sp, #16
340153d4:	af00      	add	r7, sp, #0
340153d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
340153d8:	687b      	ldr	r3, [r7, #4]
340153da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
340153dc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
340153de:	68fb      	ldr	r3, [r7, #12]
340153e0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
340153e4:	b2db      	uxtb	r3, r3
340153e6:	2b07      	cmp	r3, #7
340153e8:	d011      	beq.n	3401540e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
340153ea:	68fb      	ldr	r3, [r7, #12]
340153ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340153f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340153f2:	2b81      	cmp	r3, #129	@ 0x81
340153f4:	d103      	bne.n	340153fe <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
340153f6:	68f8      	ldr	r0, [r7, #12]
340153f8:	f002 fba4 	bl	34017b44 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
340153fc:	e007      	b.n	3401540e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
340153fe:	68fb      	ldr	r3, [r7, #12]
34015400:	681b      	ldr	r3, [r3, #0]
34015402:	691a      	ldr	r2, [r3, #16]
34015404:	68fb      	ldr	r3, [r7, #12]
34015406:	681b      	ldr	r3, [r3, #0]
34015408:	f042 0208 	orr.w	r2, r2, #8
3401540c:	611a      	str	r2, [r3, #16]
}
3401540e:	bf00      	nop
34015410:	3710      	adds	r7, #16
34015412:	46bd      	mov	sp, r7
34015414:	bd80      	pop	{r7, pc}

34015416 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
34015416:	b580      	push	{r7, lr}
34015418:	b084      	sub	sp, #16
3401541a:	af00      	add	r7, sp, #0
3401541c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
3401541e:	687b      	ldr	r3, [r7, #4]
34015420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34015422:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
34015424:	68f8      	ldr	r0, [r7, #12]
34015426:	f7ff ffbf 	bl	340153a8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
3401542a:	bf00      	nop
3401542c:	3710      	adds	r7, #16
3401542e:	46bd      	mov	sp, r7
34015430:	bd80      	pop	{r7, pc}

34015432 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
34015432:	b580      	push	{r7, lr}
34015434:	b084      	sub	sp, #16
34015436:	af00      	add	r7, sp, #0
34015438:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3401543a:	687b      	ldr	r3, [r7, #4]
3401543c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3401543e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
34015440:	6878      	ldr	r0, [r7, #4]
34015442:	f7ef ffa5 	bl	34005390 <HAL_DMA_GetError>
34015446:	4603      	mov	r3, r0
34015448:	2b00      	cmp	r3, #0
3401544a:	d011      	beq.n	34015470 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
3401544c:	68f8      	ldr	r0, [r7, #12]
3401544e:	f000 f82d 	bl	340154ac <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
34015452:	68fb      	ldr	r3, [r7, #12]
34015454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015458:	f043 0210 	orr.w	r2, r3, #16
3401545c:	68fb      	ldr	r3, [r7, #12]
3401545e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
34015462:	68fb      	ldr	r3, [r7, #12]
34015464:	2201      	movs	r2, #1
34015466:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
3401546a:	68f8      	ldr	r0, [r7, #12]
3401546c:	f002 fb86 	bl	34017b7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
34015470:	bf00      	nop
34015472:	3710      	adds	r7, #16
34015474:	46bd      	mov	sp, r7
34015476:	bd80      	pop	{r7, pc}

34015478 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
34015478:	b580      	push	{r7, lr}
3401547a:	b084      	sub	sp, #16
3401547c:	af00      	add	r7, sp, #0
3401547e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
34015480:	687b      	ldr	r3, [r7, #4]
34015482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34015484:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
34015486:	68fb      	ldr	r3, [r7, #12]
34015488:	2200      	movs	r2, #0
3401548a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
3401548e:	68fb      	ldr	r3, [r7, #12]
34015490:	2200      	movs	r2, #0
34015492:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
34015496:	68fb      	ldr	r3, [r7, #12]
34015498:	2201      	movs	r2, #1
3401549a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
3401549e:	68f8      	ldr	r0, [r7, #12]
340154a0:	f002 fb6c 	bl	34017b7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
340154a4:	bf00      	nop
340154a6:	3710      	adds	r7, #16
340154a8:	46bd      	mov	sp, r7
340154aa:	bd80      	pop	{r7, pc}

340154ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
340154ac:	b480      	push	{r7}
340154ae:	b085      	sub	sp, #20
340154b0:	af00      	add	r7, sp, #0
340154b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
340154b4:	687b      	ldr	r3, [r7, #4]
340154b6:	681b      	ldr	r3, [r3, #0]
340154b8:	695b      	ldr	r3, [r3, #20]
340154ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
340154bc:	687b      	ldr	r3, [r7, #4]
340154be:	681b      	ldr	r3, [r3, #0]
340154c0:	699a      	ldr	r2, [r3, #24]
340154c2:	687b      	ldr	r3, [r7, #4]
340154c4:	681b      	ldr	r3, [r3, #0]
340154c6:	f042 0208 	orr.w	r2, r2, #8
340154ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
340154cc:	687b      	ldr	r3, [r7, #4]
340154ce:	681b      	ldr	r3, [r3, #0]
340154d0:	699a      	ldr	r2, [r3, #24]
340154d2:	687b      	ldr	r3, [r7, #4]
340154d4:	681b      	ldr	r3, [r3, #0]
340154d6:	f042 0210 	orr.w	r2, r2, #16
340154da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
340154dc:	687b      	ldr	r3, [r7, #4]
340154de:	681b      	ldr	r3, [r3, #0]
340154e0:	681a      	ldr	r2, [r3, #0]
340154e2:	687b      	ldr	r3, [r7, #4]
340154e4:	681b      	ldr	r3, [r3, #0]
340154e6:	f022 0201 	bic.w	r2, r2, #1
340154ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
340154ec:	687b      	ldr	r3, [r7, #4]
340154ee:	681b      	ldr	r3, [r3, #0]
340154f0:	691b      	ldr	r3, [r3, #16]
340154f2:	687a      	ldr	r2, [r7, #4]
340154f4:	6812      	ldr	r2, [r2, #0]
340154f6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
340154fa:	f023 0303 	bic.w	r3, r3, #3
340154fe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
34015500:	687b      	ldr	r3, [r7, #4]
34015502:	681b      	ldr	r3, [r3, #0]
34015504:	689a      	ldr	r2, [r3, #8]
34015506:	687b      	ldr	r3, [r7, #4]
34015508:	681b      	ldr	r3, [r3, #0]
3401550a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
3401550e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
34015510:	687b      	ldr	r3, [r7, #4]
34015512:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34015516:	b2db      	uxtb	r3, r3
34015518:	2b04      	cmp	r3, #4
3401551a:	d014      	beq.n	34015546 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
3401551c:	68fb      	ldr	r3, [r7, #12]
3401551e:	f003 0320 	and.w	r3, r3, #32
34015522:	2b00      	cmp	r3, #0
34015524:	d00f      	beq.n	34015546 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
34015526:	687b      	ldr	r3, [r7, #4]
34015528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401552c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
34015530:	687b      	ldr	r3, [r7, #4]
34015532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
34015536:	687b      	ldr	r3, [r7, #4]
34015538:	681b      	ldr	r3, [r3, #0]
3401553a:	699a      	ldr	r2, [r3, #24]
3401553c:	687b      	ldr	r3, [r7, #4]
3401553e:	681b      	ldr	r3, [r3, #0]
34015540:	f042 0220 	orr.w	r2, r2, #32
34015544:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
34015546:	687b      	ldr	r3, [r7, #4]
34015548:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
3401554c:	b2db      	uxtb	r3, r3
3401554e:	2b03      	cmp	r3, #3
34015550:	d02e      	beq.n	340155b0 <SPI_CloseTransfer+0x104>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
34015552:	68fb      	ldr	r3, [r7, #12]
34015554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015558:	2b00      	cmp	r3, #0
3401555a:	d00f      	beq.n	3401557c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
3401555c:	687b      	ldr	r3, [r7, #4]
3401555e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015562:	f043 0204 	orr.w	r2, r3, #4
34015566:	687b      	ldr	r3, [r7, #4]
34015568:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
3401556c:	687b      	ldr	r3, [r7, #4]
3401556e:	681b      	ldr	r3, [r3, #0]
34015570:	699a      	ldr	r2, [r3, #24]
34015572:	687b      	ldr	r3, [r7, #4]
34015574:	681b      	ldr	r3, [r3, #0]
34015576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
3401557a:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
3401557c:	687b      	ldr	r3, [r7, #4]
3401557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015580:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34015584:	d114      	bne.n	340155b0 <SPI_CloseTransfer+0x104>
    {
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
34015586:	68fb      	ldr	r3, [r7, #12]
34015588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3401558c:	2b00      	cmp	r3, #0
3401558e:	d00f      	beq.n	340155b0 <SPI_CloseTransfer+0x104>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
34015590:	687b      	ldr	r3, [r7, #4]
34015592:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015596:	f043 0202 	orr.w	r2, r3, #2
3401559a:	687b      	ldr	r3, [r7, #4]
3401559c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
340155a0:	687b      	ldr	r3, [r7, #4]
340155a2:	681b      	ldr	r3, [r3, #0]
340155a4:	699a      	ldr	r2, [r3, #24]
340155a6:	687b      	ldr	r3, [r7, #4]
340155a8:	681b      	ldr	r3, [r3, #0]
340155aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
340155ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
340155b0:	68fb      	ldr	r3, [r7, #12]
340155b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340155b6:	2b00      	cmp	r3, #0
340155b8:	d00f      	beq.n	340155da <SPI_CloseTransfer+0x12e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
340155ba:	687b      	ldr	r3, [r7, #4]
340155bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340155c0:	f043 0201 	orr.w	r2, r3, #1
340155c4:	687b      	ldr	r3, [r7, #4]
340155c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
340155ca:	687b      	ldr	r3, [r7, #4]
340155cc:	681b      	ldr	r3, [r3, #0]
340155ce:	699a      	ldr	r2, [r3, #24]
340155d0:	687b      	ldr	r3, [r7, #4]
340155d2:	681b      	ldr	r3, [r3, #0]
340155d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
340155d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
340155da:	68fb      	ldr	r3, [r7, #12]
340155dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340155e0:	2b00      	cmp	r3, #0
340155e2:	d00f      	beq.n	34015604 <SPI_CloseTransfer+0x158>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
340155e4:	687b      	ldr	r3, [r7, #4]
340155e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340155ea:	f043 0208 	orr.w	r2, r3, #8
340155ee:	687b      	ldr	r3, [r7, #4]
340155f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
340155f4:	687b      	ldr	r3, [r7, #4]
340155f6:	681b      	ldr	r3, [r3, #0]
340155f8:	699a      	ldr	r2, [r3, #24]
340155fa:	687b      	ldr	r3, [r7, #4]
340155fc:	681b      	ldr	r3, [r3, #0]
340155fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34015602:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
34015604:	687b      	ldr	r3, [r7, #4]
34015606:	2200      	movs	r2, #0
34015608:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
3401560c:	687b      	ldr	r3, [r7, #4]
3401560e:	2200      	movs	r2, #0
34015610:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
34015614:	bf00      	nop
34015616:	3714      	adds	r7, #20
34015618:	46bd      	mov	sp, r7
3401561a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401561e:	4770      	bx	lr

34015620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
34015620:	b580      	push	{r7, lr}
34015622:	b082      	sub	sp, #8
34015624:	af00      	add	r7, sp, #0
34015626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
34015628:	687b      	ldr	r3, [r7, #4]
3401562a:	2b00      	cmp	r3, #0
3401562c:	d101      	bne.n	34015632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
3401562e:	2301      	movs	r3, #1
34015630:	e16e      	b.n	34015910 <HAL_UART_Init+0x2f0>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
34015632:	687b      	ldr	r3, [r7, #4]
34015634:	699b      	ldr	r3, [r3, #24]
34015636:	2b00      	cmp	r3, #0
34015638:	f000 8088 	beq.w	3401574c <HAL_UART_Init+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3401563c:	687b      	ldr	r3, [r7, #4]
3401563e:	681b      	ldr	r3, [r3, #0]
34015640:	4a8f      	ldr	r2, [pc, #572]	@ (34015880 <HAL_UART_Init+0x260>)
34015642:	4293      	cmp	r3, r2
34015644:	f000 80f5 	beq.w	34015832 <HAL_UART_Init+0x212>
34015648:	687b      	ldr	r3, [r7, #4]
3401564a:	681b      	ldr	r3, [r3, #0]
3401564c:	4a8d      	ldr	r2, [pc, #564]	@ (34015884 <HAL_UART_Init+0x264>)
3401564e:	4293      	cmp	r3, r2
34015650:	f000 80ef 	beq.w	34015832 <HAL_UART_Init+0x212>
34015654:	687b      	ldr	r3, [r7, #4]
34015656:	681b      	ldr	r3, [r3, #0]
34015658:	4a8b      	ldr	r2, [pc, #556]	@ (34015888 <HAL_UART_Init+0x268>)
3401565a:	4293      	cmp	r3, r2
3401565c:	f000 80e9 	beq.w	34015832 <HAL_UART_Init+0x212>
34015660:	687b      	ldr	r3, [r7, #4]
34015662:	681b      	ldr	r3, [r3, #0]
34015664:	4a89      	ldr	r2, [pc, #548]	@ (3401588c <HAL_UART_Init+0x26c>)
34015666:	4293      	cmp	r3, r2
34015668:	f000 80e3 	beq.w	34015832 <HAL_UART_Init+0x212>
3401566c:	687b      	ldr	r3, [r7, #4]
3401566e:	681b      	ldr	r3, [r3, #0]
34015670:	4a87      	ldr	r2, [pc, #540]	@ (34015890 <HAL_UART_Init+0x270>)
34015672:	4293      	cmp	r3, r2
34015674:	f000 80dd 	beq.w	34015832 <HAL_UART_Init+0x212>
34015678:	687b      	ldr	r3, [r7, #4]
3401567a:	681b      	ldr	r3, [r3, #0]
3401567c:	4a85      	ldr	r2, [pc, #532]	@ (34015894 <HAL_UART_Init+0x274>)
3401567e:	4293      	cmp	r3, r2
34015680:	f000 80d7 	beq.w	34015832 <HAL_UART_Init+0x212>
34015684:	687b      	ldr	r3, [r7, #4]
34015686:	681b      	ldr	r3, [r3, #0]
34015688:	4a83      	ldr	r2, [pc, #524]	@ (34015898 <HAL_UART_Init+0x278>)
3401568a:	4293      	cmp	r3, r2
3401568c:	f000 80d1 	beq.w	34015832 <HAL_UART_Init+0x212>
34015690:	687b      	ldr	r3, [r7, #4]
34015692:	681b      	ldr	r3, [r3, #0]
34015694:	4a81      	ldr	r2, [pc, #516]	@ (3401589c <HAL_UART_Init+0x27c>)
34015696:	4293      	cmp	r3, r2
34015698:	f000 80cb 	beq.w	34015832 <HAL_UART_Init+0x212>
3401569c:	687b      	ldr	r3, [r7, #4]
3401569e:	681b      	ldr	r3, [r3, #0]
340156a0:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340156a4:	f000 80c5 	beq.w	34015832 <HAL_UART_Init+0x212>
340156a8:	687b      	ldr	r3, [r7, #4]
340156aa:	681b      	ldr	r3, [r3, #0]
340156ac:	4a7c      	ldr	r2, [pc, #496]	@ (340158a0 <HAL_UART_Init+0x280>)
340156ae:	4293      	cmp	r3, r2
340156b0:	f000 80bf 	beq.w	34015832 <HAL_UART_Init+0x212>
340156b4:	687b      	ldr	r3, [r7, #4]
340156b6:	681b      	ldr	r3, [r3, #0]
340156b8:	4a7a      	ldr	r2, [pc, #488]	@ (340158a4 <HAL_UART_Init+0x284>)
340156ba:	4293      	cmp	r3, r2
340156bc:	f000 80b9 	beq.w	34015832 <HAL_UART_Init+0x212>
340156c0:	687b      	ldr	r3, [r7, #4]
340156c2:	681b      	ldr	r3, [r3, #0]
340156c4:	4a78      	ldr	r2, [pc, #480]	@ (340158a8 <HAL_UART_Init+0x288>)
340156c6:	4293      	cmp	r3, r2
340156c8:	f000 80b3 	beq.w	34015832 <HAL_UART_Init+0x212>
340156cc:	687b      	ldr	r3, [r7, #4]
340156ce:	681b      	ldr	r3, [r3, #0]
340156d0:	4a76      	ldr	r2, [pc, #472]	@ (340158ac <HAL_UART_Init+0x28c>)
340156d2:	4293      	cmp	r3, r2
340156d4:	f000 80ad 	beq.w	34015832 <HAL_UART_Init+0x212>
340156d8:	687b      	ldr	r3, [r7, #4]
340156da:	681b      	ldr	r3, [r3, #0]
340156dc:	4a74      	ldr	r2, [pc, #464]	@ (340158b0 <HAL_UART_Init+0x290>)
340156de:	4293      	cmp	r3, r2
340156e0:	f000 80a7 	beq.w	34015832 <HAL_UART_Init+0x212>
340156e4:	687b      	ldr	r3, [r7, #4]
340156e6:	681b      	ldr	r3, [r3, #0]
340156e8:	4a72      	ldr	r2, [pc, #456]	@ (340158b4 <HAL_UART_Init+0x294>)
340156ea:	4293      	cmp	r3, r2
340156ec:	f000 80a1 	beq.w	34015832 <HAL_UART_Init+0x212>
340156f0:	687b      	ldr	r3, [r7, #4]
340156f2:	681b      	ldr	r3, [r3, #0]
340156f4:	4a70      	ldr	r2, [pc, #448]	@ (340158b8 <HAL_UART_Init+0x298>)
340156f6:	4293      	cmp	r3, r2
340156f8:	f000 809b 	beq.w	34015832 <HAL_UART_Init+0x212>
340156fc:	687b      	ldr	r3, [r7, #4]
340156fe:	681b      	ldr	r3, [r3, #0]
34015700:	4a6e      	ldr	r2, [pc, #440]	@ (340158bc <HAL_UART_Init+0x29c>)
34015702:	4293      	cmp	r3, r2
34015704:	f000 8095 	beq.w	34015832 <HAL_UART_Init+0x212>
34015708:	687b      	ldr	r3, [r7, #4]
3401570a:	681b      	ldr	r3, [r3, #0]
3401570c:	4a6c      	ldr	r2, [pc, #432]	@ (340158c0 <HAL_UART_Init+0x2a0>)
3401570e:	4293      	cmp	r3, r2
34015710:	f000 808f 	beq.w	34015832 <HAL_UART_Init+0x212>
34015714:	687b      	ldr	r3, [r7, #4]
34015716:	681b      	ldr	r3, [r3, #0]
34015718:	4a6a      	ldr	r2, [pc, #424]	@ (340158c4 <HAL_UART_Init+0x2a4>)
3401571a:	4293      	cmp	r3, r2
3401571c:	f000 8089 	beq.w	34015832 <HAL_UART_Init+0x212>
34015720:	687b      	ldr	r3, [r7, #4]
34015722:	681b      	ldr	r3, [r3, #0]
34015724:	4a68      	ldr	r2, [pc, #416]	@ (340158c8 <HAL_UART_Init+0x2a8>)
34015726:	4293      	cmp	r3, r2
34015728:	f000 8083 	beq.w	34015832 <HAL_UART_Init+0x212>
3401572c:	687b      	ldr	r3, [r7, #4]
3401572e:	681b      	ldr	r3, [r3, #0]
34015730:	4a66      	ldr	r2, [pc, #408]	@ (340158cc <HAL_UART_Init+0x2ac>)
34015732:	4293      	cmp	r3, r2
34015734:	d07d      	beq.n	34015832 <HAL_UART_Init+0x212>
34015736:	687b      	ldr	r3, [r7, #4]
34015738:	681b      	ldr	r3, [r3, #0]
3401573a:	4a65      	ldr	r2, [pc, #404]	@ (340158d0 <HAL_UART_Init+0x2b0>)
3401573c:	4293      	cmp	r3, r2
3401573e:	d078      	beq.n	34015832 <HAL_UART_Init+0x212>
34015740:	f240 113f 	movw	r1, #319	@ 0x13f
34015744:	4863      	ldr	r0, [pc, #396]	@ (340158d4 <HAL_UART_Init+0x2b4>)
34015746:	f7ec f86d 	bl	34001824 <assert_failed>
3401574a:	e072      	b.n	34015832 <HAL_UART_Init+0x212>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3401574c:	687b      	ldr	r3, [r7, #4]
3401574e:	681b      	ldr	r3, [r3, #0]
34015750:	4a4b      	ldr	r2, [pc, #300]	@ (34015880 <HAL_UART_Init+0x260>)
34015752:	4293      	cmp	r3, r2
34015754:	d06d      	beq.n	34015832 <HAL_UART_Init+0x212>
34015756:	687b      	ldr	r3, [r7, #4]
34015758:	681b      	ldr	r3, [r3, #0]
3401575a:	4a4a      	ldr	r2, [pc, #296]	@ (34015884 <HAL_UART_Init+0x264>)
3401575c:	4293      	cmp	r3, r2
3401575e:	d068      	beq.n	34015832 <HAL_UART_Init+0x212>
34015760:	687b      	ldr	r3, [r7, #4]
34015762:	681b      	ldr	r3, [r3, #0]
34015764:	4a48      	ldr	r2, [pc, #288]	@ (34015888 <HAL_UART_Init+0x268>)
34015766:	4293      	cmp	r3, r2
34015768:	d063      	beq.n	34015832 <HAL_UART_Init+0x212>
3401576a:	687b      	ldr	r3, [r7, #4]
3401576c:	681b      	ldr	r3, [r3, #0]
3401576e:	4a47      	ldr	r2, [pc, #284]	@ (3401588c <HAL_UART_Init+0x26c>)
34015770:	4293      	cmp	r3, r2
34015772:	d05e      	beq.n	34015832 <HAL_UART_Init+0x212>
34015774:	687b      	ldr	r3, [r7, #4]
34015776:	681b      	ldr	r3, [r3, #0]
34015778:	4a45      	ldr	r2, [pc, #276]	@ (34015890 <HAL_UART_Init+0x270>)
3401577a:	4293      	cmp	r3, r2
3401577c:	d059      	beq.n	34015832 <HAL_UART_Init+0x212>
3401577e:	687b      	ldr	r3, [r7, #4]
34015780:	681b      	ldr	r3, [r3, #0]
34015782:	4a44      	ldr	r2, [pc, #272]	@ (34015894 <HAL_UART_Init+0x274>)
34015784:	4293      	cmp	r3, r2
34015786:	d054      	beq.n	34015832 <HAL_UART_Init+0x212>
34015788:	687b      	ldr	r3, [r7, #4]
3401578a:	681b      	ldr	r3, [r3, #0]
3401578c:	4a42      	ldr	r2, [pc, #264]	@ (34015898 <HAL_UART_Init+0x278>)
3401578e:	4293      	cmp	r3, r2
34015790:	d04f      	beq.n	34015832 <HAL_UART_Init+0x212>
34015792:	687b      	ldr	r3, [r7, #4]
34015794:	681b      	ldr	r3, [r3, #0]
34015796:	4a41      	ldr	r2, [pc, #260]	@ (3401589c <HAL_UART_Init+0x27c>)
34015798:	4293      	cmp	r3, r2
3401579a:	d04a      	beq.n	34015832 <HAL_UART_Init+0x212>
3401579c:	687b      	ldr	r3, [r7, #4]
3401579e:	681b      	ldr	r3, [r3, #0]
340157a0:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340157a4:	d045      	beq.n	34015832 <HAL_UART_Init+0x212>
340157a6:	687b      	ldr	r3, [r7, #4]
340157a8:	681b      	ldr	r3, [r3, #0]
340157aa:	4a3d      	ldr	r2, [pc, #244]	@ (340158a0 <HAL_UART_Init+0x280>)
340157ac:	4293      	cmp	r3, r2
340157ae:	d040      	beq.n	34015832 <HAL_UART_Init+0x212>
340157b0:	687b      	ldr	r3, [r7, #4]
340157b2:	681b      	ldr	r3, [r3, #0]
340157b4:	4a3b      	ldr	r2, [pc, #236]	@ (340158a4 <HAL_UART_Init+0x284>)
340157b6:	4293      	cmp	r3, r2
340157b8:	d03b      	beq.n	34015832 <HAL_UART_Init+0x212>
340157ba:	687b      	ldr	r3, [r7, #4]
340157bc:	681b      	ldr	r3, [r3, #0]
340157be:	4a3a      	ldr	r2, [pc, #232]	@ (340158a8 <HAL_UART_Init+0x288>)
340157c0:	4293      	cmp	r3, r2
340157c2:	d036      	beq.n	34015832 <HAL_UART_Init+0x212>
340157c4:	687b      	ldr	r3, [r7, #4]
340157c6:	681b      	ldr	r3, [r3, #0]
340157c8:	4a38      	ldr	r2, [pc, #224]	@ (340158ac <HAL_UART_Init+0x28c>)
340157ca:	4293      	cmp	r3, r2
340157cc:	d031      	beq.n	34015832 <HAL_UART_Init+0x212>
340157ce:	687b      	ldr	r3, [r7, #4]
340157d0:	681b      	ldr	r3, [r3, #0]
340157d2:	4a37      	ldr	r2, [pc, #220]	@ (340158b0 <HAL_UART_Init+0x290>)
340157d4:	4293      	cmp	r3, r2
340157d6:	d02c      	beq.n	34015832 <HAL_UART_Init+0x212>
340157d8:	687b      	ldr	r3, [r7, #4]
340157da:	681b      	ldr	r3, [r3, #0]
340157dc:	4a35      	ldr	r2, [pc, #212]	@ (340158b4 <HAL_UART_Init+0x294>)
340157de:	4293      	cmp	r3, r2
340157e0:	d027      	beq.n	34015832 <HAL_UART_Init+0x212>
340157e2:	687b      	ldr	r3, [r7, #4]
340157e4:	681b      	ldr	r3, [r3, #0]
340157e6:	4a34      	ldr	r2, [pc, #208]	@ (340158b8 <HAL_UART_Init+0x298>)
340157e8:	4293      	cmp	r3, r2
340157ea:	d022      	beq.n	34015832 <HAL_UART_Init+0x212>
340157ec:	687b      	ldr	r3, [r7, #4]
340157ee:	681b      	ldr	r3, [r3, #0]
340157f0:	4a32      	ldr	r2, [pc, #200]	@ (340158bc <HAL_UART_Init+0x29c>)
340157f2:	4293      	cmp	r3, r2
340157f4:	d01d      	beq.n	34015832 <HAL_UART_Init+0x212>
340157f6:	687b      	ldr	r3, [r7, #4]
340157f8:	681b      	ldr	r3, [r3, #0]
340157fa:	4a31      	ldr	r2, [pc, #196]	@ (340158c0 <HAL_UART_Init+0x2a0>)
340157fc:	4293      	cmp	r3, r2
340157fe:	d018      	beq.n	34015832 <HAL_UART_Init+0x212>
34015800:	687b      	ldr	r3, [r7, #4]
34015802:	681b      	ldr	r3, [r3, #0]
34015804:	4a2f      	ldr	r2, [pc, #188]	@ (340158c4 <HAL_UART_Init+0x2a4>)
34015806:	4293      	cmp	r3, r2
34015808:	d013      	beq.n	34015832 <HAL_UART_Init+0x212>
3401580a:	687b      	ldr	r3, [r7, #4]
3401580c:	681b      	ldr	r3, [r3, #0]
3401580e:	4a2e      	ldr	r2, [pc, #184]	@ (340158c8 <HAL_UART_Init+0x2a8>)
34015810:	4293      	cmp	r3, r2
34015812:	d00e      	beq.n	34015832 <HAL_UART_Init+0x212>
34015814:	687b      	ldr	r3, [r7, #4]
34015816:	681b      	ldr	r3, [r3, #0]
34015818:	4a2c      	ldr	r2, [pc, #176]	@ (340158cc <HAL_UART_Init+0x2ac>)
3401581a:	4293      	cmp	r3, r2
3401581c:	d009      	beq.n	34015832 <HAL_UART_Init+0x212>
3401581e:	687b      	ldr	r3, [r7, #4]
34015820:	681b      	ldr	r3, [r3, #0]
34015822:	4a2b      	ldr	r2, [pc, #172]	@ (340158d0 <HAL_UART_Init+0x2b0>)
34015824:	4293      	cmp	r3, r2
34015826:	d004      	beq.n	34015832 <HAL_UART_Init+0x212>
34015828:	f44f 71a2 	mov.w	r1, #324	@ 0x144
3401582c:	4829      	ldr	r0, [pc, #164]	@ (340158d4 <HAL_UART_Init+0x2b4>)
3401582e:	f7eb fff9 	bl	34001824 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
34015832:	687b      	ldr	r3, [r7, #4]
34015834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34015838:	2b00      	cmp	r3, #0
3401583a:	d106      	bne.n	3401584a <HAL_UART_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
3401583c:	687b      	ldr	r3, [r7, #4]
3401583e:	2200      	movs	r2, #0
34015840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
34015844:	6878      	ldr	r0, [r7, #4]
34015846:	f000 f867 	bl	34015918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
3401584a:	687b      	ldr	r3, [r7, #4]
3401584c:	2224      	movs	r2, #36	@ 0x24
3401584e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
34015852:	687b      	ldr	r3, [r7, #4]
34015854:	681b      	ldr	r3, [r3, #0]
34015856:	681a      	ldr	r2, [r3, #0]
34015858:	687b      	ldr	r3, [r7, #4]
3401585a:	681b      	ldr	r3, [r3, #0]
3401585c:	f022 0201 	bic.w	r2, r2, #1
34015860:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
34015862:	687b      	ldr	r3, [r7, #4]
34015864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015866:	2b00      	cmp	r3, #0
34015868:	d002      	beq.n	34015870 <HAL_UART_Init+0x250>
  {
    UART_AdvFeatureConfig(huart);
3401586a:	6878      	ldr	r0, [r7, #4]
3401586c:	f000 fbb8 	bl	34015fe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
34015870:	6878      	ldr	r0, [r7, #4]
34015872:	f000 f8e9 	bl	34015a48 <UART_SetConfig>
34015876:	4603      	mov	r3, r0
34015878:	2b01      	cmp	r3, #1
3401587a:	d12d      	bne.n	340158d8 <HAL_UART_Init+0x2b8>
  {
    return HAL_ERROR;
3401587c:	2301      	movs	r3, #1
3401587e:	e047      	b.n	34015910 <HAL_UART_Init+0x2f0>
34015880:	52001000 	.word	0x52001000
34015884:	42001000 	.word	0x42001000
34015888:	50004400 	.word	0x50004400
3401588c:	40004400 	.word	0x40004400
34015890:	50004800 	.word	0x50004800
34015894:	40004800 	.word	0x40004800
34015898:	50004c00 	.word	0x50004c00
3401589c:	40004c00 	.word	0x40004c00
340158a0:	40005000 	.word	0x40005000
340158a4:	52001400 	.word	0x52001400
340158a8:	42001400 	.word	0x42001400
340158ac:	50007800 	.word	0x50007800
340158b0:	40007800 	.word	0x40007800
340158b4:	50007c00 	.word	0x50007c00
340158b8:	40007c00 	.word	0x40007c00
340158bc:	52001800 	.word	0x52001800
340158c0:	42001800 	.word	0x42001800
340158c4:	52001c00 	.word	0x52001c00
340158c8:	42001c00 	.word	0x42001c00
340158cc:	56000c00 	.word	0x56000c00
340158d0:	46000c00 	.word	0x46000c00
340158d4:	3401d0ac 	.word	0x3401d0ac
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
340158d8:	687b      	ldr	r3, [r7, #4]
340158da:	681b      	ldr	r3, [r3, #0]
340158dc:	685a      	ldr	r2, [r3, #4]
340158de:	687b      	ldr	r3, [r7, #4]
340158e0:	681b      	ldr	r3, [r3, #0]
340158e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
340158e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
340158e8:	687b      	ldr	r3, [r7, #4]
340158ea:	681b      	ldr	r3, [r3, #0]
340158ec:	689a      	ldr	r2, [r3, #8]
340158ee:	687b      	ldr	r3, [r7, #4]
340158f0:	681b      	ldr	r3, [r3, #0]
340158f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
340158f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
340158f8:	687b      	ldr	r3, [r7, #4]
340158fa:	681b      	ldr	r3, [r3, #0]
340158fc:	681a      	ldr	r2, [r3, #0]
340158fe:	687b      	ldr	r3, [r7, #4]
34015900:	681b      	ldr	r3, [r3, #0]
34015902:	f042 0201 	orr.w	r2, r2, #1
34015906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
34015908:	6878      	ldr	r0, [r7, #4]
3401590a:	f000 fd33 	bl	34016374 <UART_CheckIdleState>
3401590e:	4603      	mov	r3, r0
}
34015910:	4618      	mov	r0, r3
34015912:	3708      	adds	r7, #8
34015914:	46bd      	mov	sp, r7
34015916:	bd80      	pop	{r7, pc}

34015918 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
34015918:	b480      	push	{r7}
3401591a:	b083      	sub	sp, #12
3401591c:	af00      	add	r7, sp, #0
3401591e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
34015920:	bf00      	nop
34015922:	370c      	adds	r7, #12
34015924:	46bd      	mov	sp, r7
34015926:	f85d 7b04 	ldr.w	r7, [sp], #4
3401592a:	4770      	bx	lr

3401592c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
3401592c:	b580      	push	{r7, lr}
3401592e:	b08a      	sub	sp, #40	@ 0x28
34015930:	af02      	add	r7, sp, #8
34015932:	60f8      	str	r0, [r7, #12]
34015934:	60b9      	str	r1, [r7, #8]
34015936:	603b      	str	r3, [r7, #0]
34015938:	4613      	mov	r3, r2
3401593a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
3401593c:	68fb      	ldr	r3, [r7, #12]
3401593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34015942:	2b20      	cmp	r3, #32
34015944:	d17b      	bne.n	34015a3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
34015946:	68bb      	ldr	r3, [r7, #8]
34015948:	2b00      	cmp	r3, #0
3401594a:	d002      	beq.n	34015952 <HAL_UART_Transmit+0x26>
3401594c:	88fb      	ldrh	r3, [r7, #6]
3401594e:	2b00      	cmp	r3, #0
34015950:	d101      	bne.n	34015956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
34015952:	2301      	movs	r3, #1
34015954:	e074      	b.n	34015a40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
34015956:	68fb      	ldr	r3, [r7, #12]
34015958:	2200      	movs	r2, #0
3401595a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3401595e:	68fb      	ldr	r3, [r7, #12]
34015960:	2221      	movs	r2, #33	@ 0x21
34015962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
34015966:	f7ee f88d 	bl	34003a84 <HAL_GetTick>
3401596a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
3401596c:	68fb      	ldr	r3, [r7, #12]
3401596e:	88fa      	ldrh	r2, [r7, #6]
34015970:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
34015974:	68fb      	ldr	r3, [r7, #12]
34015976:	88fa      	ldrh	r2, [r7, #6]
34015978:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3401597c:	68fb      	ldr	r3, [r7, #12]
3401597e:	689b      	ldr	r3, [r3, #8]
34015980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015984:	d108      	bne.n	34015998 <HAL_UART_Transmit+0x6c>
34015986:	68fb      	ldr	r3, [r7, #12]
34015988:	691b      	ldr	r3, [r3, #16]
3401598a:	2b00      	cmp	r3, #0
3401598c:	d104      	bne.n	34015998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
3401598e:	2300      	movs	r3, #0
34015990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
34015992:	68bb      	ldr	r3, [r7, #8]
34015994:	61bb      	str	r3, [r7, #24]
34015996:	e003      	b.n	340159a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
34015998:	68bb      	ldr	r3, [r7, #8]
3401599a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
3401599c:	2300      	movs	r3, #0
3401599e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
340159a0:	e030      	b.n	34015a04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
340159a2:	683b      	ldr	r3, [r7, #0]
340159a4:	9300      	str	r3, [sp, #0]
340159a6:	697b      	ldr	r3, [r7, #20]
340159a8:	2200      	movs	r2, #0
340159aa:	2180      	movs	r1, #128	@ 0x80
340159ac:	68f8      	ldr	r0, [r7, #12]
340159ae:	f000 fd8b 	bl	340164c8 <UART_WaitOnFlagUntilTimeout>
340159b2:	4603      	mov	r3, r0
340159b4:	2b00      	cmp	r3, #0
340159b6:	d005      	beq.n	340159c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
340159b8:	68fb      	ldr	r3, [r7, #12]
340159ba:	2220      	movs	r2, #32
340159bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
340159c0:	2303      	movs	r3, #3
340159c2:	e03d      	b.n	34015a40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
340159c4:	69fb      	ldr	r3, [r7, #28]
340159c6:	2b00      	cmp	r3, #0
340159c8:	d10b      	bne.n	340159e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
340159ca:	69bb      	ldr	r3, [r7, #24]
340159cc:	881b      	ldrh	r3, [r3, #0]
340159ce:	461a      	mov	r2, r3
340159d0:	68fb      	ldr	r3, [r7, #12]
340159d2:	681b      	ldr	r3, [r3, #0]
340159d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
340159d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
340159da:	69bb      	ldr	r3, [r7, #24]
340159dc:	3302      	adds	r3, #2
340159de:	61bb      	str	r3, [r7, #24]
340159e0:	e007      	b.n	340159f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
340159e2:	69fb      	ldr	r3, [r7, #28]
340159e4:	781a      	ldrb	r2, [r3, #0]
340159e6:	68fb      	ldr	r3, [r7, #12]
340159e8:	681b      	ldr	r3, [r3, #0]
340159ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
340159ec:	69fb      	ldr	r3, [r7, #28]
340159ee:	3301      	adds	r3, #1
340159f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
340159f2:	68fb      	ldr	r3, [r7, #12]
340159f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
340159f8:	b29b      	uxth	r3, r3
340159fa:	3b01      	subs	r3, #1
340159fc:	b29a      	uxth	r2, r3
340159fe:	68fb      	ldr	r3, [r7, #12]
34015a00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
34015a04:	68fb      	ldr	r3, [r7, #12]
34015a06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
34015a0a:	b29b      	uxth	r3, r3
34015a0c:	2b00      	cmp	r3, #0
34015a0e:	d1c8      	bne.n	340159a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
34015a10:	683b      	ldr	r3, [r7, #0]
34015a12:	9300      	str	r3, [sp, #0]
34015a14:	697b      	ldr	r3, [r7, #20]
34015a16:	2200      	movs	r2, #0
34015a18:	2140      	movs	r1, #64	@ 0x40
34015a1a:	68f8      	ldr	r0, [r7, #12]
34015a1c:	f000 fd54 	bl	340164c8 <UART_WaitOnFlagUntilTimeout>
34015a20:	4603      	mov	r3, r0
34015a22:	2b00      	cmp	r3, #0
34015a24:	d005      	beq.n	34015a32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
34015a26:	68fb      	ldr	r3, [r7, #12]
34015a28:	2220      	movs	r2, #32
34015a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
34015a2e:	2303      	movs	r3, #3
34015a30:	e006      	b.n	34015a40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
34015a32:	68fb      	ldr	r3, [r7, #12]
34015a34:	2220      	movs	r2, #32
34015a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
34015a3a:	2300      	movs	r3, #0
34015a3c:	e000      	b.n	34015a40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
34015a3e:	2302      	movs	r3, #2
  }
}
34015a40:	4618      	mov	r0, r3
34015a42:	3720      	adds	r7, #32
34015a44:	46bd      	mov	sp, r7
34015a46:	bd80      	pop	{r7, pc}

34015a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
34015a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34015a4c:	b090      	sub	sp, #64	@ 0x40
34015a4e:	af00      	add	r7, sp, #0
34015a50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
34015a52:	2300      	movs	r3, #0
34015a54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
34015a58:	697b      	ldr	r3, [r7, #20]
34015a5a:	685b      	ldr	r3, [r3, #4]
34015a5c:	4a19      	ldr	r2, [pc, #100]	@ (34015ac4 <UART_SetConfig+0x7c>)
34015a5e:	4293      	cmp	r3, r2
34015a60:	d904      	bls.n	34015a6c <UART_SetConfig+0x24>
34015a62:	f640 414f 	movw	r1, #3151	@ 0xc4f
34015a66:	4818      	ldr	r0, [pc, #96]	@ (34015ac8 <UART_SetConfig+0x80>)
34015a68:	f7eb fedc 	bl	34001824 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
34015a6c:	697b      	ldr	r3, [r7, #20]
34015a6e:	689b      	ldr	r3, [r3, #8]
34015a70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015a74:	d00d      	beq.n	34015a92 <UART_SetConfig+0x4a>
34015a76:	697b      	ldr	r3, [r7, #20]
34015a78:	689b      	ldr	r3, [r3, #8]
34015a7a:	2b00      	cmp	r3, #0
34015a7c:	d009      	beq.n	34015a92 <UART_SetConfig+0x4a>
34015a7e:	697b      	ldr	r3, [r7, #20]
34015a80:	689b      	ldr	r3, [r3, #8]
34015a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015a86:	d004      	beq.n	34015a92 <UART_SetConfig+0x4a>
34015a88:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
34015a8c:	480e      	ldr	r0, [pc, #56]	@ (34015ac8 <UART_SetConfig+0x80>)
34015a8e:	f7eb fec9 	bl	34001824 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
34015a92:	697b      	ldr	r3, [r7, #20]
34015a94:	681b      	ldr	r3, [r3, #0]
34015a96:	4a0d      	ldr	r2, [pc, #52]	@ (34015acc <UART_SetConfig+0x84>)
34015a98:	4293      	cmp	r3, r2
34015a9a:	d004      	beq.n	34015aa6 <UART_SetConfig+0x5e>
34015a9c:	697b      	ldr	r3, [r7, #20]
34015a9e:	681b      	ldr	r3, [r3, #0]
34015aa0:	4a0b      	ldr	r2, [pc, #44]	@ (34015ad0 <UART_SetConfig+0x88>)
34015aa2:	4293      	cmp	r3, r2
34015aa4:	d116      	bne.n	34015ad4 <UART_SetConfig+0x8c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
34015aa6:	697b      	ldr	r3, [r7, #20]
34015aa8:	68db      	ldr	r3, [r3, #12]
34015aaa:	2b00      	cmp	r3, #0
34015aac:	d038      	beq.n	34015b20 <UART_SetConfig+0xd8>
34015aae:	697b      	ldr	r3, [r7, #20]
34015ab0:	68db      	ldr	r3, [r3, #12]
34015ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34015ab6:	d033      	beq.n	34015b20 <UART_SetConfig+0xd8>
34015ab8:	f640 4153 	movw	r1, #3155	@ 0xc53
34015abc:	4802      	ldr	r0, [pc, #8]	@ (34015ac8 <UART_SetConfig+0x80>)
34015abe:	f7eb feb1 	bl	34001824 <assert_failed>
34015ac2:	e02d      	b.n	34015b20 <UART_SetConfig+0xd8>
34015ac4:	00bebc1f 	.word	0x00bebc1f
34015ac8:	3401d0ac 	.word	0x3401d0ac
34015acc:	56000c00 	.word	0x56000c00
34015ad0:	46000c00 	.word	0x46000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
34015ad4:	697b      	ldr	r3, [r7, #20]
34015ad6:	68db      	ldr	r3, [r3, #12]
34015ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015adc:	d012      	beq.n	34015b04 <UART_SetConfig+0xbc>
34015ade:	697b      	ldr	r3, [r7, #20]
34015ae0:	68db      	ldr	r3, [r3, #12]
34015ae2:	2b00      	cmp	r3, #0
34015ae4:	d00e      	beq.n	34015b04 <UART_SetConfig+0xbc>
34015ae6:	697b      	ldr	r3, [r7, #20]
34015ae8:	68db      	ldr	r3, [r3, #12]
34015aea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34015aee:	d009      	beq.n	34015b04 <UART_SetConfig+0xbc>
34015af0:	697b      	ldr	r3, [r7, #20]
34015af2:	68db      	ldr	r3, [r3, #12]
34015af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34015af8:	d004      	beq.n	34015b04 <UART_SetConfig+0xbc>
34015afa:	f640 4157 	movw	r1, #3159	@ 0xc57
34015afe:	4896      	ldr	r0, [pc, #600]	@ (34015d58 <UART_SetConfig+0x310>)
34015b00:	f7eb fe90 	bl	34001824 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
34015b04:	697b      	ldr	r3, [r7, #20]
34015b06:	6a1b      	ldr	r3, [r3, #32]
34015b08:	2b00      	cmp	r3, #0
34015b0a:	d009      	beq.n	34015b20 <UART_SetConfig+0xd8>
34015b0c:	697b      	ldr	r3, [r7, #20]
34015b0e:	6a1b      	ldr	r3, [r3, #32]
34015b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34015b14:	d004      	beq.n	34015b20 <UART_SetConfig+0xd8>
34015b16:	f640 4158 	movw	r1, #3160	@ 0xc58
34015b1a:	488f      	ldr	r0, [pc, #572]	@ (34015d58 <UART_SetConfig+0x310>)
34015b1c:	f7eb fe82 	bl	34001824 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
34015b20:	697b      	ldr	r3, [r7, #20]
34015b22:	691b      	ldr	r3, [r3, #16]
34015b24:	2b00      	cmp	r3, #0
34015b26:	d00e      	beq.n	34015b46 <UART_SetConfig+0xfe>
34015b28:	697b      	ldr	r3, [r7, #20]
34015b2a:	691b      	ldr	r3, [r3, #16]
34015b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34015b30:	d009      	beq.n	34015b46 <UART_SetConfig+0xfe>
34015b32:	697b      	ldr	r3, [r7, #20]
34015b34:	691b      	ldr	r3, [r3, #16]
34015b36:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34015b3a:	d004      	beq.n	34015b46 <UART_SetConfig+0xfe>
34015b3c:	f640 415b 	movw	r1, #3163	@ 0xc5b
34015b40:	4885      	ldr	r0, [pc, #532]	@ (34015d58 <UART_SetConfig+0x310>)
34015b42:	f7eb fe6f 	bl	34001824 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
34015b46:	697b      	ldr	r3, [r7, #20]
34015b48:	695b      	ldr	r3, [r3, #20]
34015b4a:	f023 030c 	bic.w	r3, r3, #12
34015b4e:	2b00      	cmp	r3, #0
34015b50:	d103      	bne.n	34015b5a <UART_SetConfig+0x112>
34015b52:	697b      	ldr	r3, [r7, #20]
34015b54:	695b      	ldr	r3, [r3, #20]
34015b56:	2b00      	cmp	r3, #0
34015b58:	d104      	bne.n	34015b64 <UART_SetConfig+0x11c>
34015b5a:	f640 415c 	movw	r1, #3164	@ 0xc5c
34015b5e:	487e      	ldr	r0, [pc, #504]	@ (34015d58 <UART_SetConfig+0x310>)
34015b60:	f7eb fe60 	bl	34001824 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
34015b64:	697b      	ldr	r3, [r7, #20]
34015b66:	699b      	ldr	r3, [r3, #24]
34015b68:	2b00      	cmp	r3, #0
34015b6a:	d013      	beq.n	34015b94 <UART_SetConfig+0x14c>
34015b6c:	697b      	ldr	r3, [r7, #20]
34015b6e:	699b      	ldr	r3, [r3, #24]
34015b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34015b74:	d00e      	beq.n	34015b94 <UART_SetConfig+0x14c>
34015b76:	697b      	ldr	r3, [r7, #20]
34015b78:	699b      	ldr	r3, [r3, #24]
34015b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34015b7e:	d009      	beq.n	34015b94 <UART_SetConfig+0x14c>
34015b80:	697b      	ldr	r3, [r7, #20]
34015b82:	699b      	ldr	r3, [r3, #24]
34015b84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34015b88:	d004      	beq.n	34015b94 <UART_SetConfig+0x14c>
34015b8a:	f640 415d 	movw	r1, #3165	@ 0xc5d
34015b8e:	4872      	ldr	r0, [pc, #456]	@ (34015d58 <UART_SetConfig+0x310>)
34015b90:	f7eb fe48 	bl	34001824 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
34015b94:	697b      	ldr	r3, [r7, #20]
34015b96:	69db      	ldr	r3, [r3, #28]
34015b98:	2b00      	cmp	r3, #0
34015b9a:	d009      	beq.n	34015bb0 <UART_SetConfig+0x168>
34015b9c:	697b      	ldr	r3, [r7, #20]
34015b9e:	69db      	ldr	r3, [r3, #28]
34015ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34015ba4:	d004      	beq.n	34015bb0 <UART_SetConfig+0x168>
34015ba6:	f640 415e 	movw	r1, #3166	@ 0xc5e
34015baa:	486b      	ldr	r0, [pc, #428]	@ (34015d58 <UART_SetConfig+0x310>)
34015bac:	f7eb fe3a 	bl	34001824 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
34015bb0:	697b      	ldr	r3, [r7, #20]
34015bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015bb4:	2b00      	cmp	r3, #0
34015bb6:	d030      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015bb8:	697b      	ldr	r3, [r7, #20]
34015bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015bbc:	2b01      	cmp	r3, #1
34015bbe:	d02c      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015bc0:	697b      	ldr	r3, [r7, #20]
34015bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015bc4:	2b02      	cmp	r3, #2
34015bc6:	d028      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015bc8:	697b      	ldr	r3, [r7, #20]
34015bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015bcc:	2b03      	cmp	r3, #3
34015bce:	d024      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015bd0:	697b      	ldr	r3, [r7, #20]
34015bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015bd4:	2b04      	cmp	r3, #4
34015bd6:	d020      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015bd8:	697b      	ldr	r3, [r7, #20]
34015bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015bdc:	2b05      	cmp	r3, #5
34015bde:	d01c      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015be0:	697b      	ldr	r3, [r7, #20]
34015be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015be4:	2b06      	cmp	r3, #6
34015be6:	d018      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015be8:	697b      	ldr	r3, [r7, #20]
34015bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015bec:	2b07      	cmp	r3, #7
34015bee:	d014      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015bf0:	697b      	ldr	r3, [r7, #20]
34015bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015bf4:	2b08      	cmp	r3, #8
34015bf6:	d010      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015bf8:	697b      	ldr	r3, [r7, #20]
34015bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015bfc:	2b09      	cmp	r3, #9
34015bfe:	d00c      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015c00:	697b      	ldr	r3, [r7, #20]
34015c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015c04:	2b0a      	cmp	r3, #10
34015c06:	d008      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015c08:	697b      	ldr	r3, [r7, #20]
34015c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015c0c:	2b0b      	cmp	r3, #11
34015c0e:	d004      	beq.n	34015c1a <UART_SetConfig+0x1d2>
34015c10:	f640 415f 	movw	r1, #3167	@ 0xc5f
34015c14:	4850      	ldr	r0, [pc, #320]	@ (34015d58 <UART_SetConfig+0x310>)
34015c16:	f7eb fe05 	bl	34001824 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34015c1a:	697b      	ldr	r3, [r7, #20]
34015c1c:	689a      	ldr	r2, [r3, #8]
34015c1e:	697b      	ldr	r3, [r7, #20]
34015c20:	691b      	ldr	r3, [r3, #16]
34015c22:	431a      	orrs	r2, r3
34015c24:	697b      	ldr	r3, [r7, #20]
34015c26:	695b      	ldr	r3, [r3, #20]
34015c28:	431a      	orrs	r2, r3
34015c2a:	697b      	ldr	r3, [r7, #20]
34015c2c:	69db      	ldr	r3, [r3, #28]
34015c2e:	4313      	orrs	r3, r2
34015c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34015c32:	697b      	ldr	r3, [r7, #20]
34015c34:	681b      	ldr	r3, [r3, #0]
34015c36:	681a      	ldr	r2, [r3, #0]
34015c38:	4b48      	ldr	r3, [pc, #288]	@ (34015d5c <UART_SetConfig+0x314>)
34015c3a:	4013      	ands	r3, r2
34015c3c:	697a      	ldr	r2, [r7, #20]
34015c3e:	6812      	ldr	r2, [r2, #0]
34015c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
34015c42:	430b      	orrs	r3, r1
34015c44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
34015c46:	697b      	ldr	r3, [r7, #20]
34015c48:	681b      	ldr	r3, [r3, #0]
34015c4a:	685b      	ldr	r3, [r3, #4]
34015c4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
34015c50:	697b      	ldr	r3, [r7, #20]
34015c52:	68da      	ldr	r2, [r3, #12]
34015c54:	697b      	ldr	r3, [r7, #20]
34015c56:	681b      	ldr	r3, [r3, #0]
34015c58:	430a      	orrs	r2, r1
34015c5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
34015c5c:	697b      	ldr	r3, [r7, #20]
34015c5e:	699b      	ldr	r3, [r3, #24]
34015c60:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
34015c62:	697b      	ldr	r3, [r7, #20]
34015c64:	681b      	ldr	r3, [r3, #0]
34015c66:	4a3e      	ldr	r2, [pc, #248]	@ (34015d60 <UART_SetConfig+0x318>)
34015c68:	4293      	cmp	r3, r2
34015c6a:	d009      	beq.n	34015c80 <UART_SetConfig+0x238>
34015c6c:	697b      	ldr	r3, [r7, #20]
34015c6e:	681b      	ldr	r3, [r3, #0]
34015c70:	4a3c      	ldr	r2, [pc, #240]	@ (34015d64 <UART_SetConfig+0x31c>)
34015c72:	4293      	cmp	r3, r2
34015c74:	d004      	beq.n	34015c80 <UART_SetConfig+0x238>
  {
    tmpreg |= huart->Init.OneBitSampling;
34015c76:	697b      	ldr	r3, [r7, #20]
34015c78:	6a1b      	ldr	r3, [r3, #32]
34015c7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
34015c7c:	4313      	orrs	r3, r2
34015c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
34015c80:	697b      	ldr	r3, [r7, #20]
34015c82:	681b      	ldr	r3, [r3, #0]
34015c84:	689b      	ldr	r3, [r3, #8]
34015c86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
34015c8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
34015c8e:	697a      	ldr	r2, [r7, #20]
34015c90:	6812      	ldr	r2, [r2, #0]
34015c92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
34015c94:	430b      	orrs	r3, r1
34015c96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
34015c98:	697b      	ldr	r3, [r7, #20]
34015c9a:	681b      	ldr	r3, [r3, #0]
34015c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34015c9e:	f023 010f 	bic.w	r1, r3, #15
34015ca2:	697b      	ldr	r3, [r7, #20]
34015ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34015ca6:	697b      	ldr	r3, [r7, #20]
34015ca8:	681b      	ldr	r3, [r3, #0]
34015caa:	430a      	orrs	r2, r1
34015cac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
34015cae:	697b      	ldr	r3, [r7, #20]
34015cb0:	681b      	ldr	r3, [r3, #0]
34015cb2:	4a2d      	ldr	r2, [pc, #180]	@ (34015d68 <UART_SetConfig+0x320>)
34015cb4:	4293      	cmp	r3, r2
34015cb6:	d106      	bne.n	34015cc6 <UART_SetConfig+0x27e>
34015cb8:	f04f 0200 	mov.w	r2, #0
34015cbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
34015cc0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015cc4:	e092      	b.n	34015dec <UART_SetConfig+0x3a4>
34015cc6:	697b      	ldr	r3, [r7, #20]
34015cc8:	681b      	ldr	r3, [r3, #0]
34015cca:	4a28      	ldr	r2, [pc, #160]	@ (34015d6c <UART_SetConfig+0x324>)
34015ccc:	4293      	cmp	r3, r2
34015cce:	d106      	bne.n	34015cde <UART_SetConfig+0x296>
34015cd0:	f04f 0200 	mov.w	r2, #0
34015cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
34015cd8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015cdc:	e086      	b.n	34015dec <UART_SetConfig+0x3a4>
34015cde:	697b      	ldr	r3, [r7, #20]
34015ce0:	681b      	ldr	r3, [r3, #0]
34015ce2:	4a23      	ldr	r2, [pc, #140]	@ (34015d70 <UART_SetConfig+0x328>)
34015ce4:	4293      	cmp	r3, r2
34015ce6:	d106      	bne.n	34015cf6 <UART_SetConfig+0x2ae>
34015ce8:	f04f 0200 	mov.w	r2, #0
34015cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34015cf0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015cf4:	e07a      	b.n	34015dec <UART_SetConfig+0x3a4>
34015cf6:	697b      	ldr	r3, [r7, #20]
34015cf8:	681b      	ldr	r3, [r3, #0]
34015cfa:	4a1e      	ldr	r2, [pc, #120]	@ (34015d74 <UART_SetConfig+0x32c>)
34015cfc:	4293      	cmp	r3, r2
34015cfe:	d106      	bne.n	34015d0e <UART_SetConfig+0x2c6>
34015d00:	f04f 0200 	mov.w	r2, #0
34015d04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34015d08:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015d0c:	e06e      	b.n	34015dec <UART_SetConfig+0x3a4>
34015d0e:	697b      	ldr	r3, [r7, #20]
34015d10:	681b      	ldr	r3, [r3, #0]
34015d12:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
34015d16:	d106      	bne.n	34015d26 <UART_SetConfig+0x2de>
34015d18:	f04f 0200 	mov.w	r2, #0
34015d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34015d20:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015d24:	e062      	b.n	34015dec <UART_SetConfig+0x3a4>
34015d26:	697b      	ldr	r3, [r7, #20]
34015d28:	681b      	ldr	r3, [r3, #0]
34015d2a:	4a13      	ldr	r2, [pc, #76]	@ (34015d78 <UART_SetConfig+0x330>)
34015d2c:	4293      	cmp	r3, r2
34015d2e:	d106      	bne.n	34015d3e <UART_SetConfig+0x2f6>
34015d30:	f04f 0200 	mov.w	r2, #0
34015d34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34015d38:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015d3c:	e056      	b.n	34015dec <UART_SetConfig+0x3a4>
34015d3e:	697b      	ldr	r3, [r7, #20]
34015d40:	681b      	ldr	r3, [r3, #0]
34015d42:	4a0e      	ldr	r2, [pc, #56]	@ (34015d7c <UART_SetConfig+0x334>)
34015d44:	4293      	cmp	r3, r2
34015d46:	d11b      	bne.n	34015d80 <UART_SetConfig+0x338>
34015d48:	f04f 0200 	mov.w	r2, #0
34015d4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34015d50:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015d54:	e04a      	b.n	34015dec <UART_SetConfig+0x3a4>
34015d56:	bf00      	nop
34015d58:	3401d0ac 	.word	0x3401d0ac
34015d5c:	cfff69f3 	.word	0xcfff69f3
34015d60:	56000c00 	.word	0x56000c00
34015d64:	46000c00 	.word	0x46000c00
34015d68:	52001000 	.word	0x52001000
34015d6c:	50004400 	.word	0x50004400
34015d70:	50004800 	.word	0x50004800
34015d74:	50004c00 	.word	0x50004c00
34015d78:	52001400 	.word	0x52001400
34015d7c:	50007800 	.word	0x50007800
34015d80:	697b      	ldr	r3, [r7, #20]
34015d82:	681b      	ldr	r3, [r3, #0]
34015d84:	4a90      	ldr	r2, [pc, #576]	@ (34015fc8 <UART_SetConfig+0x580>)
34015d86:	4293      	cmp	r3, r2
34015d88:	d106      	bne.n	34015d98 <UART_SetConfig+0x350>
34015d8a:	f04f 0200 	mov.w	r2, #0
34015d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34015d92:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015d96:	e029      	b.n	34015dec <UART_SetConfig+0x3a4>
34015d98:	697b      	ldr	r3, [r7, #20]
34015d9a:	681b      	ldr	r3, [r3, #0]
34015d9c:	4a8b      	ldr	r2, [pc, #556]	@ (34015fcc <UART_SetConfig+0x584>)
34015d9e:	4293      	cmp	r3, r2
34015da0:	d106      	bne.n	34015db0 <UART_SetConfig+0x368>
34015da2:	f04f 0200 	mov.w	r2, #0
34015da6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34015daa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015dae:	e01d      	b.n	34015dec <UART_SetConfig+0x3a4>
34015db0:	697b      	ldr	r3, [r7, #20]
34015db2:	681b      	ldr	r3, [r3, #0]
34015db4:	4a86      	ldr	r2, [pc, #536]	@ (34015fd0 <UART_SetConfig+0x588>)
34015db6:	4293      	cmp	r3, r2
34015db8:	d106      	bne.n	34015dc8 <UART_SetConfig+0x380>
34015dba:	f04f 0200 	mov.w	r2, #0
34015dbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34015dc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015dc6:	e011      	b.n	34015dec <UART_SetConfig+0x3a4>
34015dc8:	697b      	ldr	r3, [r7, #20]
34015dca:	681b      	ldr	r3, [r3, #0]
34015dcc:	4a81      	ldr	r2, [pc, #516]	@ (34015fd4 <UART_SetConfig+0x58c>)
34015dce:	4293      	cmp	r3, r2
34015dd0:	d106      	bne.n	34015de0 <UART_SetConfig+0x398>
34015dd2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34015dd6:	f04f 0300 	mov.w	r3, #0
34015dda:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015dde:	e005      	b.n	34015dec <UART_SetConfig+0x3a4>
34015de0:	f04f 0200 	mov.w	r2, #0
34015de4:	f04f 0300 	mov.w	r3, #0
34015de8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
34015dec:	697b      	ldr	r3, [r7, #20]
34015dee:	681b      	ldr	r3, [r3, #0]
34015df0:	4a78      	ldr	r2, [pc, #480]	@ (34015fd4 <UART_SetConfig+0x58c>)
34015df2:	4293      	cmp	r3, r2
34015df4:	d004      	beq.n	34015e00 <UART_SetConfig+0x3b8>
34015df6:	697b      	ldr	r3, [r7, #20]
34015df8:	681b      	ldr	r3, [r3, #0]
34015dfa:	4a77      	ldr	r2, [pc, #476]	@ (34015fd8 <UART_SetConfig+0x590>)
34015dfc:	4293      	cmp	r3, r2
34015dfe:	d166      	bne.n	34015ece <UART_SetConfig+0x486>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34015e00:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34015e04:	f7fa f934 	bl	34010070 <HAL_RCCEx_GetPeriphCLKFreq>
34015e08:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
34015e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015e0c:	2b00      	cmp	r3, #0
34015e0e:	f000 80c6 	beq.w	34015f9e <UART_SetConfig+0x556>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34015e12:	697b      	ldr	r3, [r7, #20]
34015e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e16:	4a71      	ldr	r2, [pc, #452]	@ (34015fdc <UART_SetConfig+0x594>)
34015e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34015e1c:	461a      	mov	r2, r3
34015e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015e20:	fbb3 f3f2 	udiv	r3, r3, r2
34015e24:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34015e26:	697b      	ldr	r3, [r7, #20]
34015e28:	685a      	ldr	r2, [r3, #4]
34015e2a:	4613      	mov	r3, r2
34015e2c:	005b      	lsls	r3, r3, #1
34015e2e:	4413      	add	r3, r2
34015e30:	69fa      	ldr	r2, [r7, #28]
34015e32:	429a      	cmp	r2, r3
34015e34:	d305      	bcc.n	34015e42 <UART_SetConfig+0x3fa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
34015e36:	697b      	ldr	r3, [r7, #20]
34015e38:	685b      	ldr	r3, [r3, #4]
34015e3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34015e3c:	69fa      	ldr	r2, [r7, #28]
34015e3e:	429a      	cmp	r2, r3
34015e40:	d903      	bls.n	34015e4a <UART_SetConfig+0x402>
      {
        ret = HAL_ERROR;
34015e42:	2301      	movs	r3, #1
34015e44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
34015e48:	e040      	b.n	34015ecc <UART_SetConfig+0x484>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34015e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015e4c:	2200      	movs	r2, #0
34015e4e:	60bb      	str	r3, [r7, #8]
34015e50:	60fa      	str	r2, [r7, #12]
34015e52:	697b      	ldr	r3, [r7, #20]
34015e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e56:	4a61      	ldr	r2, [pc, #388]	@ (34015fdc <UART_SetConfig+0x594>)
34015e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34015e5c:	b29b      	uxth	r3, r3
34015e5e:	2200      	movs	r2, #0
34015e60:	603b      	str	r3, [r7, #0]
34015e62:	607a      	str	r2, [r7, #4]
34015e64:	e9d7 2300 	ldrd	r2, r3, [r7]
34015e68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
34015e6c:	f7ea fc98 	bl	340007a0 <__aeabi_uldivmod>
34015e70:	4602      	mov	r2, r0
34015e72:	460b      	mov	r3, r1
34015e74:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
34015e78:	6979      	ldr	r1, [r7, #20]
34015e7a:	6849      	ldr	r1, [r1, #4]
34015e7c:	0849      	lsrs	r1, r1, #1
34015e7e:	2000      	movs	r0, #0
34015e80:	460c      	mov	r4, r1
34015e82:	4605      	mov	r5, r0
34015e84:	eb12 0804 	adds.w	r8, r2, r4
34015e88:	eb43 0905 	adc.w	r9, r3, r5
34015e8c:	697b      	ldr	r3, [r7, #20]
34015e8e:	685b      	ldr	r3, [r3, #4]
34015e90:	2200      	movs	r2, #0
34015e92:	469a      	mov	sl, r3
34015e94:	4693      	mov	fp, r2
34015e96:	4652      	mov	r2, sl
34015e98:	465b      	mov	r3, fp
34015e9a:	4640      	mov	r0, r8
34015e9c:	4649      	mov	r1, r9
34015e9e:	f7ea fc7f 	bl	340007a0 <__aeabi_uldivmod>
34015ea2:	4602      	mov	r2, r0
34015ea4:	460b      	mov	r3, r1
34015ea6:	4613      	mov	r3, r2
34015ea8:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
34015eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015eac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34015eb0:	d308      	bcc.n	34015ec4 <UART_SetConfig+0x47c>
34015eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015eb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34015eb8:	d204      	bcs.n	34015ec4 <UART_SetConfig+0x47c>
        {
          huart->Instance->BRR = usartdiv;
34015eba:	697b      	ldr	r3, [r7, #20]
34015ebc:	681b      	ldr	r3, [r3, #0]
34015ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
34015ec0:	60da      	str	r2, [r3, #12]
34015ec2:	e003      	b.n	34015ecc <UART_SetConfig+0x484>
        }
        else
        {
          ret = HAL_ERROR;
34015ec4:	2301      	movs	r3, #1
34015ec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
34015eca:	e068      	b.n	34015f9e <UART_SetConfig+0x556>
34015ecc:	e067      	b.n	34015f9e <UART_SetConfig+0x556>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
34015ece:	697b      	ldr	r3, [r7, #20]
34015ed0:	69db      	ldr	r3, [r3, #28]
34015ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34015ed6:	d138      	bne.n	34015f4a <UART_SetConfig+0x502>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34015ed8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34015edc:	f7fa f8c8 	bl	34010070 <HAL_RCCEx_GetPeriphCLKFreq>
34015ee0:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
34015ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015ee4:	2b00      	cmp	r3, #0
34015ee6:	d05a      	beq.n	34015f9e <UART_SetConfig+0x556>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34015ee8:	697b      	ldr	r3, [r7, #20]
34015eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015eec:	4a3b      	ldr	r2, [pc, #236]	@ (34015fdc <UART_SetConfig+0x594>)
34015eee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34015ef2:	461a      	mov	r2, r3
34015ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015ef6:	fbb3 f3f2 	udiv	r3, r3, r2
34015efa:	005a      	lsls	r2, r3, #1
34015efc:	697b      	ldr	r3, [r7, #20]
34015efe:	685b      	ldr	r3, [r3, #4]
34015f00:	085b      	lsrs	r3, r3, #1
34015f02:	441a      	add	r2, r3
34015f04:	697b      	ldr	r3, [r7, #20]
34015f06:	685b      	ldr	r3, [r3, #4]
34015f08:	fbb2 f3f3 	udiv	r3, r2, r3
34015f0c:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
34015f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015f10:	2b0f      	cmp	r3, #15
34015f12:	d916      	bls.n	34015f42 <UART_SetConfig+0x4fa>
34015f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34015f1a:	d212      	bcs.n	34015f42 <UART_SetConfig+0x4fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
34015f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015f1e:	b29b      	uxth	r3, r3
34015f20:	f023 030f 	bic.w	r3, r3, #15
34015f24:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
34015f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015f28:	085b      	lsrs	r3, r3, #1
34015f2a:	b29b      	uxth	r3, r3
34015f2c:	f003 0307 	and.w	r3, r3, #7
34015f30:	b29a      	uxth	r2, r3
34015f32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
34015f34:	4313      	orrs	r3, r2
34015f36:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
34015f38:	697b      	ldr	r3, [r7, #20]
34015f3a:	681b      	ldr	r3, [r3, #0]
34015f3c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
34015f3e:	60da      	str	r2, [r3, #12]
34015f40:	e02d      	b.n	34015f9e <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
34015f42:	2301      	movs	r3, #1
34015f44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
34015f48:	e029      	b.n	34015f9e <UART_SetConfig+0x556>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34015f4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34015f4e:	f7fa f88f 	bl	34010070 <HAL_RCCEx_GetPeriphCLKFreq>
34015f52:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
34015f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015f56:	2b00      	cmp	r3, #0
34015f58:	d021      	beq.n	34015f9e <UART_SetConfig+0x556>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34015f5a:	697b      	ldr	r3, [r7, #20]
34015f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015f5e:	4a1f      	ldr	r2, [pc, #124]	@ (34015fdc <UART_SetConfig+0x594>)
34015f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34015f64:	461a      	mov	r2, r3
34015f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015f68:	fbb3 f2f2 	udiv	r2, r3, r2
34015f6c:	697b      	ldr	r3, [r7, #20]
34015f6e:	685b      	ldr	r3, [r3, #4]
34015f70:	085b      	lsrs	r3, r3, #1
34015f72:	441a      	add	r2, r3
34015f74:	697b      	ldr	r3, [r7, #20]
34015f76:	685b      	ldr	r3, [r3, #4]
34015f78:	fbb2 f3f3 	udiv	r3, r2, r3
34015f7c:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
34015f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015f80:	2b0f      	cmp	r3, #15
34015f82:	d909      	bls.n	34015f98 <UART_SetConfig+0x550>
34015f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34015f8a:	d205      	bcs.n	34015f98 <UART_SetConfig+0x550>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
34015f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015f8e:	b29a      	uxth	r2, r3
34015f90:	697b      	ldr	r3, [r7, #20]
34015f92:	681b      	ldr	r3, [r3, #0]
34015f94:	60da      	str	r2, [r3, #12]
34015f96:	e002      	b.n	34015f9e <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
34015f98:	2301      	movs	r3, #1
34015f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
34015f9e:	697b      	ldr	r3, [r7, #20]
34015fa0:	2201      	movs	r2, #1
34015fa2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
34015fa6:	697b      	ldr	r3, [r7, #20]
34015fa8:	2201      	movs	r2, #1
34015faa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
34015fae:	697b      	ldr	r3, [r7, #20]
34015fb0:	2200      	movs	r2, #0
34015fb2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
34015fb4:	697b      	ldr	r3, [r7, #20]
34015fb6:	2200      	movs	r2, #0
34015fb8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
34015fba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
34015fbe:	4618      	mov	r0, r3
34015fc0:	3740      	adds	r7, #64	@ 0x40
34015fc2:	46bd      	mov	sp, r7
34015fc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34015fc8:	50007c00 	.word	0x50007c00
34015fcc:	52001800 	.word	0x52001800
34015fd0:	52001c00 	.word	0x52001c00
34015fd4:	56000c00 	.word	0x56000c00
34015fd8:	46000c00 	.word	0x46000c00
34015fdc:	3401e510 	.word	0x3401e510

34015fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
34015fe0:	b580      	push	{r7, lr}
34015fe2:	b082      	sub	sp, #8
34015fe4:	af00      	add	r7, sp, #0
34015fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
34015fe8:	687b      	ldr	r3, [r7, #4]
34015fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015fec:	2bff      	cmp	r3, #255	@ 0xff
34015fee:	d904      	bls.n	34015ffa <UART_AdvFeatureConfig+0x1a>
34015ff0:	f640 41e4 	movw	r1, #3300	@ 0xce4
34015ff4:	4890      	ldr	r0, [pc, #576]	@ (34016238 <UART_AdvFeatureConfig+0x258>)
34015ff6:	f7eb fc15 	bl	34001824 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
34015ffa:	687b      	ldr	r3, [r7, #4]
34015ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015ffe:	f003 0308 	and.w	r3, r3, #8
34016002:	2b00      	cmp	r3, #0
34016004:	d018      	beq.n	34016038 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
34016006:	687b      	ldr	r3, [r7, #4]
34016008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401600a:	2b00      	cmp	r3, #0
3401600c:	d009      	beq.n	34016022 <UART_AdvFeatureConfig+0x42>
3401600e:	687b      	ldr	r3, [r7, #4]
34016010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34016016:	d004      	beq.n	34016022 <UART_AdvFeatureConfig+0x42>
34016018:	f640 41e9 	movw	r1, #3305	@ 0xce9
3401601c:	4886      	ldr	r0, [pc, #536]	@ (34016238 <UART_AdvFeatureConfig+0x258>)
3401601e:	f7eb fc01 	bl	34001824 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
34016022:	687b      	ldr	r3, [r7, #4]
34016024:	681b      	ldr	r3, [r3, #0]
34016026:	685b      	ldr	r3, [r3, #4]
34016028:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
3401602c:	687b      	ldr	r3, [r7, #4]
3401602e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34016030:	687b      	ldr	r3, [r7, #4]
34016032:	681b      	ldr	r3, [r3, #0]
34016034:	430a      	orrs	r2, r1
34016036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
34016038:	687b      	ldr	r3, [r7, #4]
3401603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401603c:	f003 0301 	and.w	r3, r3, #1
34016040:	2b00      	cmp	r3, #0
34016042:	d018      	beq.n	34016076 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
34016044:	687b      	ldr	r3, [r7, #4]
34016046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016048:	2b00      	cmp	r3, #0
3401604a:	d009      	beq.n	34016060 <UART_AdvFeatureConfig+0x80>
3401604c:	687b      	ldr	r3, [r7, #4]
3401604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34016054:	d004      	beq.n	34016060 <UART_AdvFeatureConfig+0x80>
34016056:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
3401605a:	4877      	ldr	r0, [pc, #476]	@ (34016238 <UART_AdvFeatureConfig+0x258>)
3401605c:	f7eb fbe2 	bl	34001824 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
34016060:	687b      	ldr	r3, [r7, #4]
34016062:	681b      	ldr	r3, [r3, #0]
34016064:	685b      	ldr	r3, [r3, #4]
34016066:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
3401606a:	687b      	ldr	r3, [r7, #4]
3401606c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3401606e:	687b      	ldr	r3, [r7, #4]
34016070:	681b      	ldr	r3, [r3, #0]
34016072:	430a      	orrs	r2, r1
34016074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
34016076:	687b      	ldr	r3, [r7, #4]
34016078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401607a:	f003 0302 	and.w	r3, r3, #2
3401607e:	2b00      	cmp	r3, #0
34016080:	d018      	beq.n	340160b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
34016082:	687b      	ldr	r3, [r7, #4]
34016084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016086:	2b00      	cmp	r3, #0
34016088:	d009      	beq.n	3401609e <UART_AdvFeatureConfig+0xbe>
3401608a:	687b      	ldr	r3, [r7, #4]
3401608c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401608e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34016092:	d004      	beq.n	3401609e <UART_AdvFeatureConfig+0xbe>
34016094:	f640 41f7 	movw	r1, #3319	@ 0xcf7
34016098:	4867      	ldr	r0, [pc, #412]	@ (34016238 <UART_AdvFeatureConfig+0x258>)
3401609a:	f7eb fbc3 	bl	34001824 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3401609e:	687b      	ldr	r3, [r7, #4]
340160a0:	681b      	ldr	r3, [r3, #0]
340160a2:	685b      	ldr	r3, [r3, #4]
340160a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340160a8:	687b      	ldr	r3, [r7, #4]
340160aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
340160ac:	687b      	ldr	r3, [r7, #4]
340160ae:	681b      	ldr	r3, [r3, #0]
340160b0:	430a      	orrs	r2, r1
340160b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
340160b4:	687b      	ldr	r3, [r7, #4]
340160b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340160b8:	f003 0304 	and.w	r3, r3, #4
340160bc:	2b00      	cmp	r3, #0
340160be:	d018      	beq.n	340160f2 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
340160c0:	687b      	ldr	r3, [r7, #4]
340160c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340160c4:	2b00      	cmp	r3, #0
340160c6:	d009      	beq.n	340160dc <UART_AdvFeatureConfig+0xfc>
340160c8:	687b      	ldr	r3, [r7, #4]
340160ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340160cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340160d0:	d004      	beq.n	340160dc <UART_AdvFeatureConfig+0xfc>
340160d2:	f640 41fe 	movw	r1, #3326	@ 0xcfe
340160d6:	4858      	ldr	r0, [pc, #352]	@ (34016238 <UART_AdvFeatureConfig+0x258>)
340160d8:	f7eb fba4 	bl	34001824 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
340160dc:	687b      	ldr	r3, [r7, #4]
340160de:	681b      	ldr	r3, [r3, #0]
340160e0:	685b      	ldr	r3, [r3, #4]
340160e2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
340160e6:	687b      	ldr	r3, [r7, #4]
340160e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
340160ea:	687b      	ldr	r3, [r7, #4]
340160ec:	681b      	ldr	r3, [r3, #0]
340160ee:	430a      	orrs	r2, r1
340160f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
340160f2:	687b      	ldr	r3, [r7, #4]
340160f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340160f6:	f003 0310 	and.w	r3, r3, #16
340160fa:	2b00      	cmp	r3, #0
340160fc:	d018      	beq.n	34016130 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
340160fe:	687b      	ldr	r3, [r7, #4]
34016100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016102:	2b00      	cmp	r3, #0
34016104:	d009      	beq.n	3401611a <UART_AdvFeatureConfig+0x13a>
34016106:	687b      	ldr	r3, [r7, #4]
34016108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3401610a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401610e:	d004      	beq.n	3401611a <UART_AdvFeatureConfig+0x13a>
34016110:	f640 5105 	movw	r1, #3333	@ 0xd05
34016114:	4848      	ldr	r0, [pc, #288]	@ (34016238 <UART_AdvFeatureConfig+0x258>)
34016116:	f7eb fb85 	bl	34001824 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3401611a:	687b      	ldr	r3, [r7, #4]
3401611c:	681b      	ldr	r3, [r3, #0]
3401611e:	689b      	ldr	r3, [r3, #8]
34016120:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
34016124:	687b      	ldr	r3, [r7, #4]
34016126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
34016128:	687b      	ldr	r3, [r7, #4]
3401612a:	681b      	ldr	r3, [r3, #0]
3401612c:	430a      	orrs	r2, r1
3401612e:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
34016130:	687b      	ldr	r3, [r7, #4]
34016132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016134:	f003 0320 	and.w	r3, r3, #32
34016138:	2b00      	cmp	r3, #0
3401613a:	d018      	beq.n	3401616e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3401613c:	687b      	ldr	r3, [r7, #4]
3401613e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016140:	2b00      	cmp	r3, #0
34016142:	d009      	beq.n	34016158 <UART_AdvFeatureConfig+0x178>
34016144:	687b      	ldr	r3, [r7, #4]
34016146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3401614c:	d004      	beq.n	34016158 <UART_AdvFeatureConfig+0x178>
3401614e:	f640 510d 	movw	r1, #3341	@ 0xd0d
34016152:	4839      	ldr	r0, [pc, #228]	@ (34016238 <UART_AdvFeatureConfig+0x258>)
34016154:	f7eb fb66 	bl	34001824 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
34016158:	687b      	ldr	r3, [r7, #4]
3401615a:	681b      	ldr	r3, [r3, #0]
3401615c:	689b      	ldr	r3, [r3, #8]
3401615e:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
34016162:	687b      	ldr	r3, [r7, #4]
34016164:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34016166:	687b      	ldr	r3, [r7, #4]
34016168:	681b      	ldr	r3, [r3, #0]
3401616a:	430a      	orrs	r2, r1
3401616c:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3401616e:	687b      	ldr	r3, [r7, #4]
34016170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34016176:	2b00      	cmp	r3, #0
34016178:	f000 80d2 	beq.w	34016320 <UART_AdvFeatureConfig+0x340>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3401617c:	687b      	ldr	r3, [r7, #4]
3401617e:	681b      	ldr	r3, [r3, #0]
34016180:	4a2e      	ldr	r2, [pc, #184]	@ (3401623c <UART_AdvFeatureConfig+0x25c>)
34016182:	4293      	cmp	r3, r2
34016184:	f000 808b 	beq.w	3401629e <UART_AdvFeatureConfig+0x2be>
34016188:	687b      	ldr	r3, [r7, #4]
3401618a:	681b      	ldr	r3, [r3, #0]
3401618c:	4a2c      	ldr	r2, [pc, #176]	@ (34016240 <UART_AdvFeatureConfig+0x260>)
3401618e:	4293      	cmp	r3, r2
34016190:	f000 8085 	beq.w	3401629e <UART_AdvFeatureConfig+0x2be>
34016194:	687b      	ldr	r3, [r7, #4]
34016196:	681b      	ldr	r3, [r3, #0]
34016198:	4a2a      	ldr	r2, [pc, #168]	@ (34016244 <UART_AdvFeatureConfig+0x264>)
3401619a:	4293      	cmp	r3, r2
3401619c:	d07f      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
3401619e:	687b      	ldr	r3, [r7, #4]
340161a0:	681b      	ldr	r3, [r3, #0]
340161a2:	4a29      	ldr	r2, [pc, #164]	@ (34016248 <UART_AdvFeatureConfig+0x268>)
340161a4:	4293      	cmp	r3, r2
340161a6:	d07a      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
340161a8:	687b      	ldr	r3, [r7, #4]
340161aa:	681b      	ldr	r3, [r3, #0]
340161ac:	4a27      	ldr	r2, [pc, #156]	@ (3401624c <UART_AdvFeatureConfig+0x26c>)
340161ae:	4293      	cmp	r3, r2
340161b0:	d075      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
340161b2:	687b      	ldr	r3, [r7, #4]
340161b4:	681b      	ldr	r3, [r3, #0]
340161b6:	4a26      	ldr	r2, [pc, #152]	@ (34016250 <UART_AdvFeatureConfig+0x270>)
340161b8:	4293      	cmp	r3, r2
340161ba:	d070      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
340161bc:	687b      	ldr	r3, [r7, #4]
340161be:	681b      	ldr	r3, [r3, #0]
340161c0:	4a24      	ldr	r2, [pc, #144]	@ (34016254 <UART_AdvFeatureConfig+0x274>)
340161c2:	4293      	cmp	r3, r2
340161c4:	d06b      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
340161c6:	687b      	ldr	r3, [r7, #4]
340161c8:	681b      	ldr	r3, [r3, #0]
340161ca:	4a23      	ldr	r2, [pc, #140]	@ (34016258 <UART_AdvFeatureConfig+0x278>)
340161cc:	4293      	cmp	r3, r2
340161ce:	d066      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
340161d0:	687b      	ldr	r3, [r7, #4]
340161d2:	681b      	ldr	r3, [r3, #0]
340161d4:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340161d8:	d061      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
340161da:	687b      	ldr	r3, [r7, #4]
340161dc:	681b      	ldr	r3, [r3, #0]
340161de:	4a1f      	ldr	r2, [pc, #124]	@ (3401625c <UART_AdvFeatureConfig+0x27c>)
340161e0:	4293      	cmp	r3, r2
340161e2:	d05c      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
340161e4:	687b      	ldr	r3, [r7, #4]
340161e6:	681b      	ldr	r3, [r3, #0]
340161e8:	4a1d      	ldr	r2, [pc, #116]	@ (34016260 <UART_AdvFeatureConfig+0x280>)
340161ea:	4293      	cmp	r3, r2
340161ec:	d057      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
340161ee:	687b      	ldr	r3, [r7, #4]
340161f0:	681b      	ldr	r3, [r3, #0]
340161f2:	4a1c      	ldr	r2, [pc, #112]	@ (34016264 <UART_AdvFeatureConfig+0x284>)
340161f4:	4293      	cmp	r3, r2
340161f6:	d052      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
340161f8:	687b      	ldr	r3, [r7, #4]
340161fa:	681b      	ldr	r3, [r3, #0]
340161fc:	4a1a      	ldr	r2, [pc, #104]	@ (34016268 <UART_AdvFeatureConfig+0x288>)
340161fe:	4293      	cmp	r3, r2
34016200:	d04d      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
34016202:	687b      	ldr	r3, [r7, #4]
34016204:	681b      	ldr	r3, [r3, #0]
34016206:	4a19      	ldr	r2, [pc, #100]	@ (3401626c <UART_AdvFeatureConfig+0x28c>)
34016208:	4293      	cmp	r3, r2
3401620a:	d048      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
3401620c:	687b      	ldr	r3, [r7, #4]
3401620e:	681b      	ldr	r3, [r3, #0]
34016210:	4a17      	ldr	r2, [pc, #92]	@ (34016270 <UART_AdvFeatureConfig+0x290>)
34016212:	4293      	cmp	r3, r2
34016214:	d043      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
34016216:	687b      	ldr	r3, [r7, #4]
34016218:	681b      	ldr	r3, [r3, #0]
3401621a:	4a16      	ldr	r2, [pc, #88]	@ (34016274 <UART_AdvFeatureConfig+0x294>)
3401621c:	4293      	cmp	r3, r2
3401621e:	d03e      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
34016220:	687b      	ldr	r3, [r7, #4]
34016222:	681b      	ldr	r3, [r3, #0]
34016224:	4a14      	ldr	r2, [pc, #80]	@ (34016278 <UART_AdvFeatureConfig+0x298>)
34016226:	4293      	cmp	r3, r2
34016228:	d039      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
3401622a:	687b      	ldr	r3, [r7, #4]
3401622c:	681b      	ldr	r3, [r3, #0]
3401622e:	4a13      	ldr	r2, [pc, #76]	@ (3401627c <UART_AdvFeatureConfig+0x29c>)
34016230:	4293      	cmp	r3, r2
34016232:	d034      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
34016234:	e024      	b.n	34016280 <UART_AdvFeatureConfig+0x2a0>
34016236:	bf00      	nop
34016238:	3401d0ac 	.word	0x3401d0ac
3401623c:	52001000 	.word	0x52001000
34016240:	42001000 	.word	0x42001000
34016244:	50004400 	.word	0x50004400
34016248:	40004400 	.word	0x40004400
3401624c:	50004800 	.word	0x50004800
34016250:	40004800 	.word	0x40004800
34016254:	50004c00 	.word	0x50004c00
34016258:	40004c00 	.word	0x40004c00
3401625c:	40005000 	.word	0x40005000
34016260:	52001400 	.word	0x52001400
34016264:	42001400 	.word	0x42001400
34016268:	50007800 	.word	0x50007800
3401626c:	40007800 	.word	0x40007800
34016270:	50007c00 	.word	0x50007c00
34016274:	40007c00 	.word	0x40007c00
34016278:	52001800 	.word	0x52001800
3401627c:	42001800 	.word	0x42001800
34016280:	687b      	ldr	r3, [r7, #4]
34016282:	681b      	ldr	r3, [r3, #0]
34016284:	4a38      	ldr	r2, [pc, #224]	@ (34016368 <UART_AdvFeatureConfig+0x388>)
34016286:	4293      	cmp	r3, r2
34016288:	d009      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
3401628a:	687b      	ldr	r3, [r7, #4]
3401628c:	681b      	ldr	r3, [r3, #0]
3401628e:	4a37      	ldr	r2, [pc, #220]	@ (3401636c <UART_AdvFeatureConfig+0x38c>)
34016290:	4293      	cmp	r3, r2
34016292:	d004      	beq.n	3401629e <UART_AdvFeatureConfig+0x2be>
34016294:	f640 5115 	movw	r1, #3349	@ 0xd15
34016298:	4835      	ldr	r0, [pc, #212]	@ (34016370 <UART_AdvFeatureConfig+0x390>)
3401629a:	f7eb fac3 	bl	34001824 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3401629e:	687b      	ldr	r3, [r7, #4]
340162a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340162a2:	2b00      	cmp	r3, #0
340162a4:	d009      	beq.n	340162ba <UART_AdvFeatureConfig+0x2da>
340162a6:	687b      	ldr	r3, [r7, #4]
340162a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340162aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340162ae:	d004      	beq.n	340162ba <UART_AdvFeatureConfig+0x2da>
340162b0:	f640 5116 	movw	r1, #3350	@ 0xd16
340162b4:	482e      	ldr	r0, [pc, #184]	@ (34016370 <UART_AdvFeatureConfig+0x390>)
340162b6:	f7eb fab5 	bl	34001824 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
340162ba:	687b      	ldr	r3, [r7, #4]
340162bc:	681b      	ldr	r3, [r3, #0]
340162be:	685b      	ldr	r3, [r3, #4]
340162c0:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
340162c4:	687b      	ldr	r3, [r7, #4]
340162c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
340162c8:	687b      	ldr	r3, [r7, #4]
340162ca:	681b      	ldr	r3, [r3, #0]
340162cc:	430a      	orrs	r2, r1
340162ce:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
340162d0:	687b      	ldr	r3, [r7, #4]
340162d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340162d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340162d8:	d122      	bne.n	34016320 <UART_AdvFeatureConfig+0x340>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
340162da:	687b      	ldr	r3, [r7, #4]
340162dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340162de:	2b00      	cmp	r3, #0
340162e0:	d013      	beq.n	3401630a <UART_AdvFeatureConfig+0x32a>
340162e2:	687b      	ldr	r3, [r7, #4]
340162e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340162e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340162ea:	d00e      	beq.n	3401630a <UART_AdvFeatureConfig+0x32a>
340162ec:	687b      	ldr	r3, [r7, #4]
340162ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340162f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
340162f4:	d009      	beq.n	3401630a <UART_AdvFeatureConfig+0x32a>
340162f6:	687b      	ldr	r3, [r7, #4]
340162f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340162fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
340162fe:	d004      	beq.n	3401630a <UART_AdvFeatureConfig+0x32a>
34016300:	f640 511b 	movw	r1, #3355	@ 0xd1b
34016304:	481a      	ldr	r0, [pc, #104]	@ (34016370 <UART_AdvFeatureConfig+0x390>)
34016306:	f7eb fa8d 	bl	34001824 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3401630a:	687b      	ldr	r3, [r7, #4]
3401630c:	681b      	ldr	r3, [r3, #0]
3401630e:	685b      	ldr	r3, [r3, #4]
34016310:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
34016314:	687b      	ldr	r3, [r7, #4]
34016316:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34016318:	687b      	ldr	r3, [r7, #4]
3401631a:	681b      	ldr	r3, [r3, #0]
3401631c:	430a      	orrs	r2, r1
3401631e:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
34016320:	687b      	ldr	r3, [r7, #4]
34016322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34016328:	2b00      	cmp	r3, #0
3401632a:	d018      	beq.n	3401635e <UART_AdvFeatureConfig+0x37e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3401632c:	687b      	ldr	r3, [r7, #4]
3401632e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34016330:	2b00      	cmp	r3, #0
34016332:	d009      	beq.n	34016348 <UART_AdvFeatureConfig+0x368>
34016334:	687b      	ldr	r3, [r7, #4]
34016336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34016338:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3401633c:	d004      	beq.n	34016348 <UART_AdvFeatureConfig+0x368>
3401633e:	f640 5123 	movw	r1, #3363	@ 0xd23
34016342:	480b      	ldr	r0, [pc, #44]	@ (34016370 <UART_AdvFeatureConfig+0x390>)
34016344:	f7eb fa6e 	bl	34001824 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
34016348:	687b      	ldr	r3, [r7, #4]
3401634a:	681b      	ldr	r3, [r3, #0]
3401634c:	685b      	ldr	r3, [r3, #4]
3401634e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
34016352:	687b      	ldr	r3, [r7, #4]
34016354:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
34016356:	687b      	ldr	r3, [r7, #4]
34016358:	681b      	ldr	r3, [r3, #0]
3401635a:	430a      	orrs	r2, r1
3401635c:	605a      	str	r2, [r3, #4]
  }
}
3401635e:	bf00      	nop
34016360:	3708      	adds	r7, #8
34016362:	46bd      	mov	sp, r7
34016364:	bd80      	pop	{r7, pc}
34016366:	bf00      	nop
34016368:	52001c00 	.word	0x52001c00
3401636c:	42001c00 	.word	0x42001c00
34016370:	3401d0ac 	.word	0x3401d0ac

34016374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
34016374:	b580      	push	{r7, lr}
34016376:	b098      	sub	sp, #96	@ 0x60
34016378:	af02      	add	r7, sp, #8
3401637a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3401637c:	687b      	ldr	r3, [r7, #4]
3401637e:	2200      	movs	r2, #0
34016380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
34016384:	f7ed fb7e 	bl	34003a84 <HAL_GetTick>
34016388:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3401638a:	687b      	ldr	r3, [r7, #4]
3401638c:	681b      	ldr	r3, [r3, #0]
3401638e:	681b      	ldr	r3, [r3, #0]
34016390:	f003 0308 	and.w	r3, r3, #8
34016394:	2b08      	cmp	r3, #8
34016396:	d12f      	bne.n	340163f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
34016398:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3401639c:	9300      	str	r3, [sp, #0]
3401639e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340163a0:	2200      	movs	r2, #0
340163a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
340163a6:	6878      	ldr	r0, [r7, #4]
340163a8:	f000 f88e 	bl	340164c8 <UART_WaitOnFlagUntilTimeout>
340163ac:	4603      	mov	r3, r0
340163ae:	2b00      	cmp	r3, #0
340163b0:	d022      	beq.n	340163f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
340163b2:	687b      	ldr	r3, [r7, #4]
340163b4:	681b      	ldr	r3, [r3, #0]
340163b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
340163b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
340163ba:	e853 3f00 	ldrex	r3, [r3]
340163be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
340163c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340163c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
340163c6:	653b      	str	r3, [r7, #80]	@ 0x50
340163c8:	687b      	ldr	r3, [r7, #4]
340163ca:	681b      	ldr	r3, [r3, #0]
340163cc:	461a      	mov	r2, r3
340163ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
340163d0:	647b      	str	r3, [r7, #68]	@ 0x44
340163d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
340163d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
340163d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
340163d8:	e841 2300 	strex	r3, r2, [r1]
340163dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
340163de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
340163e0:	2b00      	cmp	r3, #0
340163e2:	d1e6      	bne.n	340163b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
340163e4:	687b      	ldr	r3, [r7, #4]
340163e6:	2220      	movs	r2, #32
340163e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
340163ec:	687b      	ldr	r3, [r7, #4]
340163ee:	2200      	movs	r2, #0
340163f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
340163f4:	2303      	movs	r3, #3
340163f6:	e063      	b.n	340164c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
340163f8:	687b      	ldr	r3, [r7, #4]
340163fa:	681b      	ldr	r3, [r3, #0]
340163fc:	681b      	ldr	r3, [r3, #0]
340163fe:	f003 0304 	and.w	r3, r3, #4
34016402:	2b04      	cmp	r3, #4
34016404:	d149      	bne.n	3401649a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
34016406:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3401640a:	9300      	str	r3, [sp, #0]
3401640c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401640e:	2200      	movs	r2, #0
34016410:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
34016414:	6878      	ldr	r0, [r7, #4]
34016416:	f000 f857 	bl	340164c8 <UART_WaitOnFlagUntilTimeout>
3401641a:	4603      	mov	r3, r0
3401641c:	2b00      	cmp	r3, #0
3401641e:	d03c      	beq.n	3401649a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
34016420:	687b      	ldr	r3, [r7, #4]
34016422:	681b      	ldr	r3, [r3, #0]
34016424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34016426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016428:	e853 3f00 	ldrex	r3, [r3]
3401642c:	623b      	str	r3, [r7, #32]
   return(result);
3401642e:	6a3b      	ldr	r3, [r7, #32]
34016430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
34016434:	64fb      	str	r3, [r7, #76]	@ 0x4c
34016436:	687b      	ldr	r3, [r7, #4]
34016438:	681b      	ldr	r3, [r3, #0]
3401643a:	461a      	mov	r2, r3
3401643c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3401643e:	633b      	str	r3, [r7, #48]	@ 0x30
34016440:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34016442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
34016444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
34016446:	e841 2300 	strex	r3, r2, [r1]
3401644a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
3401644c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3401644e:	2b00      	cmp	r3, #0
34016450:	d1e6      	bne.n	34016420 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
34016452:	687b      	ldr	r3, [r7, #4]
34016454:	681b      	ldr	r3, [r3, #0]
34016456:	3308      	adds	r3, #8
34016458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401645a:	693b      	ldr	r3, [r7, #16]
3401645c:	e853 3f00 	ldrex	r3, [r3]
34016460:	60fb      	str	r3, [r7, #12]
   return(result);
34016462:	68fb      	ldr	r3, [r7, #12]
34016464:	f023 0301 	bic.w	r3, r3, #1
34016468:	64bb      	str	r3, [r7, #72]	@ 0x48
3401646a:	687b      	ldr	r3, [r7, #4]
3401646c:	681b      	ldr	r3, [r3, #0]
3401646e:	3308      	adds	r3, #8
34016470:	6cba      	ldr	r2, [r7, #72]	@ 0x48
34016472:	61fa      	str	r2, [r7, #28]
34016474:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34016476:	69b9      	ldr	r1, [r7, #24]
34016478:	69fa      	ldr	r2, [r7, #28]
3401647a:	e841 2300 	strex	r3, r2, [r1]
3401647e:	617b      	str	r3, [r7, #20]
   return(result);
34016480:	697b      	ldr	r3, [r7, #20]
34016482:	2b00      	cmp	r3, #0
34016484:	d1e5      	bne.n	34016452 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
34016486:	687b      	ldr	r3, [r7, #4]
34016488:	2220      	movs	r2, #32
3401648a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
3401648e:	687b      	ldr	r3, [r7, #4]
34016490:	2200      	movs	r2, #0
34016492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
34016496:	2303      	movs	r3, #3
34016498:	e012      	b.n	340164c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
3401649a:	687b      	ldr	r3, [r7, #4]
3401649c:	2220      	movs	r2, #32
3401649e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
340164a2:	687b      	ldr	r3, [r7, #4]
340164a4:	2220      	movs	r2, #32
340164a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
340164aa:	687b      	ldr	r3, [r7, #4]
340164ac:	2200      	movs	r2, #0
340164ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
340164b0:	687b      	ldr	r3, [r7, #4]
340164b2:	2200      	movs	r2, #0
340164b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
340164b6:	687b      	ldr	r3, [r7, #4]
340164b8:	2200      	movs	r2, #0
340164ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
340164be:	2300      	movs	r3, #0
}
340164c0:	4618      	mov	r0, r3
340164c2:	3758      	adds	r7, #88	@ 0x58
340164c4:	46bd      	mov	sp, r7
340164c6:	bd80      	pop	{r7, pc}

340164c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
340164c8:	b580      	push	{r7, lr}
340164ca:	b084      	sub	sp, #16
340164cc:	af00      	add	r7, sp, #0
340164ce:	60f8      	str	r0, [r7, #12]
340164d0:	60b9      	str	r1, [r7, #8]
340164d2:	603b      	str	r3, [r7, #0]
340164d4:	4613      	mov	r3, r2
340164d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
340164d8:	e04f      	b.n	3401657a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
340164da:	69bb      	ldr	r3, [r7, #24]
340164dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
340164e0:	d04b      	beq.n	3401657a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
340164e2:	f7ed facf 	bl	34003a84 <HAL_GetTick>
340164e6:	4602      	mov	r2, r0
340164e8:	683b      	ldr	r3, [r7, #0]
340164ea:	1ad3      	subs	r3, r2, r3
340164ec:	69ba      	ldr	r2, [r7, #24]
340164ee:	429a      	cmp	r2, r3
340164f0:	d302      	bcc.n	340164f8 <UART_WaitOnFlagUntilTimeout+0x30>
340164f2:	69bb      	ldr	r3, [r7, #24]
340164f4:	2b00      	cmp	r3, #0
340164f6:	d101      	bne.n	340164fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
340164f8:	2303      	movs	r3, #3
340164fa:	e04e      	b.n	3401659a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
340164fc:	68fb      	ldr	r3, [r7, #12]
340164fe:	681b      	ldr	r3, [r3, #0]
34016500:	681b      	ldr	r3, [r3, #0]
34016502:	f003 0304 	and.w	r3, r3, #4
34016506:	2b00      	cmp	r3, #0
34016508:	d037      	beq.n	3401657a <UART_WaitOnFlagUntilTimeout+0xb2>
3401650a:	68bb      	ldr	r3, [r7, #8]
3401650c:	2b80      	cmp	r3, #128	@ 0x80
3401650e:	d034      	beq.n	3401657a <UART_WaitOnFlagUntilTimeout+0xb2>
34016510:	68bb      	ldr	r3, [r7, #8]
34016512:	2b40      	cmp	r3, #64	@ 0x40
34016514:	d031      	beq.n	3401657a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
34016516:	68fb      	ldr	r3, [r7, #12]
34016518:	681b      	ldr	r3, [r3, #0]
3401651a:	69db      	ldr	r3, [r3, #28]
3401651c:	f003 0308 	and.w	r3, r3, #8
34016520:	2b08      	cmp	r3, #8
34016522:	d110      	bne.n	34016546 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
34016524:	68fb      	ldr	r3, [r7, #12]
34016526:	681b      	ldr	r3, [r3, #0]
34016528:	2208      	movs	r2, #8
3401652a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3401652c:	68f8      	ldr	r0, [r7, #12]
3401652e:	f000 f838 	bl	340165a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
34016532:	68fb      	ldr	r3, [r7, #12]
34016534:	2208      	movs	r2, #8
34016536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3401653a:	68fb      	ldr	r3, [r7, #12]
3401653c:	2200      	movs	r2, #0
3401653e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
34016542:	2301      	movs	r3, #1
34016544:	e029      	b.n	3401659a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
34016546:	68fb      	ldr	r3, [r7, #12]
34016548:	681b      	ldr	r3, [r3, #0]
3401654a:	69db      	ldr	r3, [r3, #28]
3401654c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34016550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34016554:	d111      	bne.n	3401657a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
34016556:	68fb      	ldr	r3, [r7, #12]
34016558:	681b      	ldr	r3, [r3, #0]
3401655a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401655e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
34016560:	68f8      	ldr	r0, [r7, #12]
34016562:	f000 f81e 	bl	340165a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
34016566:	68fb      	ldr	r3, [r7, #12]
34016568:	2220      	movs	r2, #32
3401656a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3401656e:	68fb      	ldr	r3, [r7, #12]
34016570:	2200      	movs	r2, #0
34016572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
34016576:	2303      	movs	r3, #3
34016578:	e00f      	b.n	3401659a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3401657a:	68fb      	ldr	r3, [r7, #12]
3401657c:	681b      	ldr	r3, [r3, #0]
3401657e:	69da      	ldr	r2, [r3, #28]
34016580:	68bb      	ldr	r3, [r7, #8]
34016582:	4013      	ands	r3, r2
34016584:	68ba      	ldr	r2, [r7, #8]
34016586:	429a      	cmp	r2, r3
34016588:	bf0c      	ite	eq
3401658a:	2301      	moveq	r3, #1
3401658c:	2300      	movne	r3, #0
3401658e:	b2db      	uxtb	r3, r3
34016590:	461a      	mov	r2, r3
34016592:	79fb      	ldrb	r3, [r7, #7]
34016594:	429a      	cmp	r2, r3
34016596:	d0a0      	beq.n	340164da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
34016598:	2300      	movs	r3, #0
}
3401659a:	4618      	mov	r0, r3
3401659c:	3710      	adds	r7, #16
3401659e:	46bd      	mov	sp, r7
340165a0:	bd80      	pop	{r7, pc}

340165a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
340165a2:	b480      	push	{r7}
340165a4:	b095      	sub	sp, #84	@ 0x54
340165a6:	af00      	add	r7, sp, #0
340165a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
340165aa:	687b      	ldr	r3, [r7, #4]
340165ac:	681b      	ldr	r3, [r3, #0]
340165ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
340165b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340165b2:	e853 3f00 	ldrex	r3, [r3]
340165b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
340165b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
340165ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
340165be:	64fb      	str	r3, [r7, #76]	@ 0x4c
340165c0:	687b      	ldr	r3, [r7, #4]
340165c2:	681b      	ldr	r3, [r3, #0]
340165c4:	461a      	mov	r2, r3
340165c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
340165c8:	643b      	str	r3, [r7, #64]	@ 0x40
340165ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
340165cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
340165ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
340165d0:	e841 2300 	strex	r3, r2, [r1]
340165d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
340165d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
340165d8:	2b00      	cmp	r3, #0
340165da:	d1e6      	bne.n	340165aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
340165dc:	687b      	ldr	r3, [r7, #4]
340165de:	681b      	ldr	r3, [r3, #0]
340165e0:	3308      	adds	r3, #8
340165e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
340165e4:	6a3b      	ldr	r3, [r7, #32]
340165e6:	e853 3f00 	ldrex	r3, [r3]
340165ea:	61fb      	str	r3, [r7, #28]
   return(result);
340165ec:	69fb      	ldr	r3, [r7, #28]
340165ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
340165f2:	f023 0301 	bic.w	r3, r3, #1
340165f6:	64bb      	str	r3, [r7, #72]	@ 0x48
340165f8:	687b      	ldr	r3, [r7, #4]
340165fa:	681b      	ldr	r3, [r3, #0]
340165fc:	3308      	adds	r3, #8
340165fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
34016600:	62fa      	str	r2, [r7, #44]	@ 0x2c
34016602:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34016604:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34016606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34016608:	e841 2300 	strex	r3, r2, [r1]
3401660c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
3401660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016610:	2b00      	cmp	r3, #0
34016612:	d1e3      	bne.n	340165dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
34016614:	687b      	ldr	r3, [r7, #4]
34016616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34016618:	2b01      	cmp	r3, #1
3401661a:	d118      	bne.n	3401664e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3401661c:	687b      	ldr	r3, [r7, #4]
3401661e:	681b      	ldr	r3, [r3, #0]
34016620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34016622:	68fb      	ldr	r3, [r7, #12]
34016624:	e853 3f00 	ldrex	r3, [r3]
34016628:	60bb      	str	r3, [r7, #8]
   return(result);
3401662a:	68bb      	ldr	r3, [r7, #8]
3401662c:	f023 0310 	bic.w	r3, r3, #16
34016630:	647b      	str	r3, [r7, #68]	@ 0x44
34016632:	687b      	ldr	r3, [r7, #4]
34016634:	681b      	ldr	r3, [r3, #0]
34016636:	461a      	mov	r2, r3
34016638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3401663a:	61bb      	str	r3, [r7, #24]
3401663c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401663e:	6979      	ldr	r1, [r7, #20]
34016640:	69ba      	ldr	r2, [r7, #24]
34016642:	e841 2300 	strex	r3, r2, [r1]
34016646:	613b      	str	r3, [r7, #16]
   return(result);
34016648:	693b      	ldr	r3, [r7, #16]
3401664a:	2b00      	cmp	r3, #0
3401664c:	d1e6      	bne.n	3401661c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3401664e:	687b      	ldr	r3, [r7, #4]
34016650:	2220      	movs	r2, #32
34016652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
34016656:	687b      	ldr	r3, [r7, #4]
34016658:	2200      	movs	r2, #0
3401665a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3401665c:	687b      	ldr	r3, [r7, #4]
3401665e:	2200      	movs	r2, #0
34016660:	675a      	str	r2, [r3, #116]	@ 0x74
}
34016662:	bf00      	nop
34016664:	3754      	adds	r7, #84	@ 0x54
34016666:	46bd      	mov	sp, r7
34016668:	f85d 7b04 	ldr.w	r7, [sp], #4
3401666c:	4770      	bx	lr
	...

34016670 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
34016670:	b580      	push	{r7, lr}
34016672:	b086      	sub	sp, #24
34016674:	af02      	add	r7, sp, #8
34016676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34016678:	2300      	movs	r3, #0
3401667a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3401667c:	f7ed fa02 	bl	34003a84 <HAL_GetTick>
34016680:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
34016682:	687b      	ldr	r3, [r7, #4]
34016684:	2b00      	cmp	r3, #0
34016686:	d102      	bne.n	3401668e <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
34016688:	2301      	movs	r3, #1
3401668a:	73fb      	strb	r3, [r7, #15]
3401668c:	e2c8      	b.n	34016c20 <HAL_XSPI_Init+0x5b0>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Check the parameters of the initialization structure */
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
3401668e:	687b      	ldr	r3, [r7, #4]
34016690:	689b      	ldr	r3, [r3, #8]
34016692:	2b00      	cmp	r3, #0
34016694:	d008      	beq.n	340166a8 <HAL_XSPI_Init+0x38>
34016696:	687b      	ldr	r3, [r7, #4]
34016698:	689b      	ldr	r3, [r3, #8]
3401669a:	2b40      	cmp	r3, #64	@ 0x40
3401669c:	d004      	beq.n	340166a8 <HAL_XSPI_Init+0x38>
3401669e:	f240 1161 	movw	r1, #353	@ 0x161
340166a2:	488a      	ldr	r0, [pc, #552]	@ (340168cc <HAL_XSPI_Init+0x25c>)
340166a4:	f7eb f8be 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
340166a8:	687b      	ldr	r3, [r7, #4]
340166aa:	68db      	ldr	r3, [r3, #12]
340166ac:	2b00      	cmp	r3, #0
340166ae:	d01d      	beq.n	340166ec <HAL_XSPI_Init+0x7c>
340166b0:	687b      	ldr	r3, [r7, #4]
340166b2:	68db      	ldr	r3, [r3, #12]
340166b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340166b8:	d018      	beq.n	340166ec <HAL_XSPI_Init+0x7c>
340166ba:	687b      	ldr	r3, [r7, #4]
340166bc:	68db      	ldr	r3, [r3, #12]
340166be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340166c2:	d013      	beq.n	340166ec <HAL_XSPI_Init+0x7c>
340166c4:	687b      	ldr	r3, [r7, #4]
340166c6:	68db      	ldr	r3, [r3, #12]
340166c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
340166cc:	d00e      	beq.n	340166ec <HAL_XSPI_Init+0x7c>
340166ce:	687b      	ldr	r3, [r7, #4]
340166d0:	68db      	ldr	r3, [r3, #12]
340166d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340166d6:	d009      	beq.n	340166ec <HAL_XSPI_Init+0x7c>
340166d8:	687b      	ldr	r3, [r7, #4]
340166da:	68db      	ldr	r3, [r3, #12]
340166dc:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
340166e0:	d004      	beq.n	340166ec <HAL_XSPI_Init+0x7c>
340166e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
340166e6:	4879      	ldr	r0, [pc, #484]	@ (340168cc <HAL_XSPI_Init+0x25c>)
340166e8:	f7eb f89c 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
340166ec:	687b      	ldr	r3, [r7, #4]
340166ee:	691b      	ldr	r3, [r3, #16]
340166f0:	2b00      	cmp	r3, #0
340166f2:	f000 8081 	beq.w	340167f8 <HAL_XSPI_Init+0x188>
340166f6:	687b      	ldr	r3, [r7, #4]
340166f8:	691b      	ldr	r3, [r3, #16]
340166fa:	2b01      	cmp	r3, #1
340166fc:	d07c      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340166fe:	687b      	ldr	r3, [r7, #4]
34016700:	691b      	ldr	r3, [r3, #16]
34016702:	2b02      	cmp	r3, #2
34016704:	d078      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
34016706:	687b      	ldr	r3, [r7, #4]
34016708:	691b      	ldr	r3, [r3, #16]
3401670a:	2b03      	cmp	r3, #3
3401670c:	d074      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
3401670e:	687b      	ldr	r3, [r7, #4]
34016710:	691b      	ldr	r3, [r3, #16]
34016712:	2b04      	cmp	r3, #4
34016714:	d070      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
34016716:	687b      	ldr	r3, [r7, #4]
34016718:	691b      	ldr	r3, [r3, #16]
3401671a:	2b05      	cmp	r3, #5
3401671c:	d06c      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
3401671e:	687b      	ldr	r3, [r7, #4]
34016720:	691b      	ldr	r3, [r3, #16]
34016722:	2b06      	cmp	r3, #6
34016724:	d068      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
34016726:	687b      	ldr	r3, [r7, #4]
34016728:	691b      	ldr	r3, [r3, #16]
3401672a:	2b07      	cmp	r3, #7
3401672c:	d064      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
3401672e:	687b      	ldr	r3, [r7, #4]
34016730:	691b      	ldr	r3, [r3, #16]
34016732:	2b08      	cmp	r3, #8
34016734:	d060      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
34016736:	687b      	ldr	r3, [r7, #4]
34016738:	691b      	ldr	r3, [r3, #16]
3401673a:	2b09      	cmp	r3, #9
3401673c:	d05c      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
3401673e:	687b      	ldr	r3, [r7, #4]
34016740:	691b      	ldr	r3, [r3, #16]
34016742:	2b0a      	cmp	r3, #10
34016744:	d058      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
34016746:	687b      	ldr	r3, [r7, #4]
34016748:	691b      	ldr	r3, [r3, #16]
3401674a:	2b0b      	cmp	r3, #11
3401674c:	d054      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
3401674e:	687b      	ldr	r3, [r7, #4]
34016750:	691b      	ldr	r3, [r3, #16]
34016752:	2b0c      	cmp	r3, #12
34016754:	d050      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
34016756:	687b      	ldr	r3, [r7, #4]
34016758:	691b      	ldr	r3, [r3, #16]
3401675a:	2b0d      	cmp	r3, #13
3401675c:	d04c      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
3401675e:	687b      	ldr	r3, [r7, #4]
34016760:	691b      	ldr	r3, [r3, #16]
34016762:	2b0e      	cmp	r3, #14
34016764:	d048      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
34016766:	687b      	ldr	r3, [r7, #4]
34016768:	691b      	ldr	r3, [r3, #16]
3401676a:	2b0f      	cmp	r3, #15
3401676c:	d044      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
3401676e:	687b      	ldr	r3, [r7, #4]
34016770:	691b      	ldr	r3, [r3, #16]
34016772:	2b10      	cmp	r3, #16
34016774:	d040      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
34016776:	687b      	ldr	r3, [r7, #4]
34016778:	691b      	ldr	r3, [r3, #16]
3401677a:	2b11      	cmp	r3, #17
3401677c:	d03c      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
3401677e:	687b      	ldr	r3, [r7, #4]
34016780:	691b      	ldr	r3, [r3, #16]
34016782:	2b12      	cmp	r3, #18
34016784:	d038      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
34016786:	687b      	ldr	r3, [r7, #4]
34016788:	691b      	ldr	r3, [r3, #16]
3401678a:	2b13      	cmp	r3, #19
3401678c:	d034      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
3401678e:	687b      	ldr	r3, [r7, #4]
34016790:	691b      	ldr	r3, [r3, #16]
34016792:	2b14      	cmp	r3, #20
34016794:	d030      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
34016796:	687b      	ldr	r3, [r7, #4]
34016798:	691b      	ldr	r3, [r3, #16]
3401679a:	2b15      	cmp	r3, #21
3401679c:	d02c      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
3401679e:	687b      	ldr	r3, [r7, #4]
340167a0:	691b      	ldr	r3, [r3, #16]
340167a2:	2b16      	cmp	r3, #22
340167a4:	d028      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340167a6:	687b      	ldr	r3, [r7, #4]
340167a8:	691b      	ldr	r3, [r3, #16]
340167aa:	2b17      	cmp	r3, #23
340167ac:	d024      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340167ae:	687b      	ldr	r3, [r7, #4]
340167b0:	691b      	ldr	r3, [r3, #16]
340167b2:	2b18      	cmp	r3, #24
340167b4:	d020      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340167b6:	687b      	ldr	r3, [r7, #4]
340167b8:	691b      	ldr	r3, [r3, #16]
340167ba:	2b19      	cmp	r3, #25
340167bc:	d01c      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340167be:	687b      	ldr	r3, [r7, #4]
340167c0:	691b      	ldr	r3, [r3, #16]
340167c2:	2b1a      	cmp	r3, #26
340167c4:	d018      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340167c6:	687b      	ldr	r3, [r7, #4]
340167c8:	691b      	ldr	r3, [r3, #16]
340167ca:	2b1b      	cmp	r3, #27
340167cc:	d014      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340167ce:	687b      	ldr	r3, [r7, #4]
340167d0:	691b      	ldr	r3, [r3, #16]
340167d2:	2b1c      	cmp	r3, #28
340167d4:	d010      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340167d6:	687b      	ldr	r3, [r7, #4]
340167d8:	691b      	ldr	r3, [r3, #16]
340167da:	2b1d      	cmp	r3, #29
340167dc:	d00c      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340167de:	687b      	ldr	r3, [r7, #4]
340167e0:	691b      	ldr	r3, [r3, #16]
340167e2:	2b1e      	cmp	r3, #30
340167e4:	d008      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340167e6:	687b      	ldr	r3, [r7, #4]
340167e8:	691b      	ldr	r3, [r3, #16]
340167ea:	2b1f      	cmp	r3, #31
340167ec:	d004      	beq.n	340167f8 <HAL_XSPI_Init+0x188>
340167ee:	f240 1163 	movw	r1, #355	@ 0x163
340167f2:	4836      	ldr	r0, [pc, #216]	@ (340168cc <HAL_XSPI_Init+0x25c>)
340167f4:	f7eb f816 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
340167f8:	687b      	ldr	r3, [r7, #4]
340167fa:	695b      	ldr	r3, [r3, #20]
340167fc:	2b00      	cmp	r3, #0
340167fe:	d003      	beq.n	34016808 <HAL_XSPI_Init+0x198>
34016800:	687b      	ldr	r3, [r7, #4]
34016802:	695b      	ldr	r3, [r3, #20]
34016804:	2b40      	cmp	r3, #64	@ 0x40
34016806:	d904      	bls.n	34016812 <HAL_XSPI_Init+0x1a2>
34016808:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3401680c:	482f      	ldr	r0, [pc, #188]	@ (340168cc <HAL_XSPI_Init+0x25c>)
3401680e:	f7eb f809 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
34016812:	687b      	ldr	r3, [r7, #4]
34016814:	699b      	ldr	r3, [r3, #24]
34016816:	2b00      	cmp	r3, #0
34016818:	d008      	beq.n	3401682c <HAL_XSPI_Init+0x1bc>
3401681a:	687b      	ldr	r3, [r7, #4]
3401681c:	699b      	ldr	r3, [r3, #24]
3401681e:	2b02      	cmp	r3, #2
34016820:	d004      	beq.n	3401682c <HAL_XSPI_Init+0x1bc>
34016822:	f240 1165 	movw	r1, #357	@ 0x165
34016826:	4829      	ldr	r0, [pc, #164]	@ (340168cc <HAL_XSPI_Init+0x25c>)
34016828:	f7ea fffc 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3401682c:	687b      	ldr	r3, [r7, #4]
3401682e:	69db      	ldr	r3, [r3, #28]
34016830:	2b00      	cmp	r3, #0
34016832:	d008      	beq.n	34016846 <HAL_XSPI_Init+0x1d6>
34016834:	687b      	ldr	r3, [r7, #4]
34016836:	69db      	ldr	r3, [r3, #28]
34016838:	2b01      	cmp	r3, #1
3401683a:	d004      	beq.n	34016846 <HAL_XSPI_Init+0x1d6>
3401683c:	f44f 71b3 	mov.w	r1, #358	@ 0x166
34016840:	4822      	ldr	r0, [pc, #136]	@ (340168cc <HAL_XSPI_Init+0x25c>)
34016842:	f7ea ffef 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
34016846:	687b      	ldr	r3, [r7, #4]
34016848:	6a1b      	ldr	r3, [r3, #32]
3401684a:	2b00      	cmp	r3, #0
3401684c:	d018      	beq.n	34016880 <HAL_XSPI_Init+0x210>
3401684e:	687b      	ldr	r3, [r7, #4]
34016850:	6a1b      	ldr	r3, [r3, #32]
34016852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34016856:	d013      	beq.n	34016880 <HAL_XSPI_Init+0x210>
34016858:	687b      	ldr	r3, [r7, #4]
3401685a:	6a1b      	ldr	r3, [r3, #32]
3401685c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34016860:	d00e      	beq.n	34016880 <HAL_XSPI_Init+0x210>
34016862:	687b      	ldr	r3, [r7, #4]
34016864:	6a1b      	ldr	r3, [r3, #32]
34016866:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3401686a:	d009      	beq.n	34016880 <HAL_XSPI_Init+0x210>
3401686c:	687b      	ldr	r3, [r7, #4]
3401686e:	6a1b      	ldr	r3, [r3, #32]
34016870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34016874:	d004      	beq.n	34016880 <HAL_XSPI_Init+0x210>
34016876:	f240 1167 	movw	r1, #359	@ 0x167
3401687a:	4814      	ldr	r0, [pc, #80]	@ (340168cc <HAL_XSPI_Init+0x25c>)
3401687c:	f7ea ffd2 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
34016880:	687b      	ldr	r3, [r7, #4]
34016882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016884:	2bff      	cmp	r3, #255	@ 0xff
34016886:	d904      	bls.n	34016892 <HAL_XSPI_Init+0x222>
34016888:	f44f 71b4 	mov.w	r1, #360	@ 0x168
3401688c:	480f      	ldr	r0, [pc, #60]	@ (340168cc <HAL_XSPI_Init+0x25c>)
3401688e:	f7ea ffc9 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
34016892:	687b      	ldr	r3, [r7, #4]
34016894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016896:	2b00      	cmp	r3, #0
34016898:	d009      	beq.n	340168ae <HAL_XSPI_Init+0x23e>
3401689a:	687b      	ldr	r3, [r7, #4]
3401689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401689e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
340168a2:	d004      	beq.n	340168ae <HAL_XSPI_Init+0x23e>
340168a4:	f240 1169 	movw	r1, #361	@ 0x169
340168a8:	4808      	ldr	r0, [pc, #32]	@ (340168cc <HAL_XSPI_Init+0x25c>)
340168aa:	f7ea ffbb 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
340168ae:	687b      	ldr	r3, [r7, #4]
340168b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340168b2:	2b00      	cmp	r3, #0
340168b4:	d00c      	beq.n	340168d0 <HAL_XSPI_Init+0x260>
340168b6:	687b      	ldr	r3, [r7, #4]
340168b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340168ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340168be:	d007      	beq.n	340168d0 <HAL_XSPI_Init+0x260>
340168c0:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
340168c4:	4801      	ldr	r0, [pc, #4]	@ (340168cc <HAL_XSPI_Init+0x25c>)
340168c6:	f7ea ffad 	bl	34001824 <assert_failed>
340168ca:	e001      	b.n	340168d0 <HAL_XSPI_Init+0x260>
340168cc:	3401d0e4 	.word	0x3401d0e4
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
340168d0:	687b      	ldr	r3, [r7, #4]
340168d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340168d4:	2b00      	cmp	r3, #0
340168d6:	f000 8081 	beq.w	340169dc <HAL_XSPI_Init+0x36c>
340168da:	687b      	ldr	r3, [r7, #4]
340168dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340168de:	2b01      	cmp	r3, #1
340168e0:	d07c      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340168e2:	687b      	ldr	r3, [r7, #4]
340168e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340168e6:	2b02      	cmp	r3, #2
340168e8:	d078      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340168ea:	687b      	ldr	r3, [r7, #4]
340168ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340168ee:	2b03      	cmp	r3, #3
340168f0:	d074      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340168f2:	687b      	ldr	r3, [r7, #4]
340168f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340168f6:	2b04      	cmp	r3, #4
340168f8:	d070      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340168fa:	687b      	ldr	r3, [r7, #4]
340168fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340168fe:	2b05      	cmp	r3, #5
34016900:	d06c      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
34016902:	687b      	ldr	r3, [r7, #4]
34016904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016906:	2b06      	cmp	r3, #6
34016908:	d068      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
3401690a:	687b      	ldr	r3, [r7, #4]
3401690c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401690e:	2b07      	cmp	r3, #7
34016910:	d064      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
34016912:	687b      	ldr	r3, [r7, #4]
34016914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016916:	2b08      	cmp	r3, #8
34016918:	d060      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
3401691a:	687b      	ldr	r3, [r7, #4]
3401691c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401691e:	2b09      	cmp	r3, #9
34016920:	d05c      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
34016922:	687b      	ldr	r3, [r7, #4]
34016924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016926:	2b0a      	cmp	r3, #10
34016928:	d058      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
3401692a:	687b      	ldr	r3, [r7, #4]
3401692c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401692e:	2b0b      	cmp	r3, #11
34016930:	d054      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
34016932:	687b      	ldr	r3, [r7, #4]
34016934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016936:	2b0c      	cmp	r3, #12
34016938:	d050      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
3401693a:	687b      	ldr	r3, [r7, #4]
3401693c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401693e:	2b0d      	cmp	r3, #13
34016940:	d04c      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
34016942:	687b      	ldr	r3, [r7, #4]
34016944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016946:	2b0e      	cmp	r3, #14
34016948:	d048      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
3401694a:	687b      	ldr	r3, [r7, #4]
3401694c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401694e:	2b0f      	cmp	r3, #15
34016950:	d044      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
34016952:	687b      	ldr	r3, [r7, #4]
34016954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016956:	2b10      	cmp	r3, #16
34016958:	d040      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
3401695a:	687b      	ldr	r3, [r7, #4]
3401695c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401695e:	2b11      	cmp	r3, #17
34016960:	d03c      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
34016962:	687b      	ldr	r3, [r7, #4]
34016964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016966:	2b12      	cmp	r3, #18
34016968:	d038      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
3401696a:	687b      	ldr	r3, [r7, #4]
3401696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401696e:	2b13      	cmp	r3, #19
34016970:	d034      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
34016972:	687b      	ldr	r3, [r7, #4]
34016974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016976:	2b14      	cmp	r3, #20
34016978:	d030      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
3401697a:	687b      	ldr	r3, [r7, #4]
3401697c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401697e:	2b15      	cmp	r3, #21
34016980:	d02c      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
34016982:	687b      	ldr	r3, [r7, #4]
34016984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016986:	2b16      	cmp	r3, #22
34016988:	d028      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
3401698a:	687b      	ldr	r3, [r7, #4]
3401698c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401698e:	2b17      	cmp	r3, #23
34016990:	d024      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
34016992:	687b      	ldr	r3, [r7, #4]
34016994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016996:	2b18      	cmp	r3, #24
34016998:	d020      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
3401699a:	687b      	ldr	r3, [r7, #4]
3401699c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401699e:	2b19      	cmp	r3, #25
340169a0:	d01c      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340169a2:	687b      	ldr	r3, [r7, #4]
340169a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340169a6:	2b1a      	cmp	r3, #26
340169a8:	d018      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340169aa:	687b      	ldr	r3, [r7, #4]
340169ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340169ae:	2b1b      	cmp	r3, #27
340169b0:	d014      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340169b2:	687b      	ldr	r3, [r7, #4]
340169b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340169b6:	2b1c      	cmp	r3, #28
340169b8:	d010      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340169ba:	687b      	ldr	r3, [r7, #4]
340169bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340169be:	2b1d      	cmp	r3, #29
340169c0:	d00c      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340169c2:	687b      	ldr	r3, [r7, #4]
340169c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340169c6:	2b1e      	cmp	r3, #30
340169c8:	d008      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340169ca:	687b      	ldr	r3, [r7, #4]
340169cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340169ce:	2b1f      	cmp	r3, #31
340169d0:	d004      	beq.n	340169dc <HAL_XSPI_Init+0x36c>
340169d2:	f240 116b 	movw	r1, #363	@ 0x16b
340169d6:	4895      	ldr	r0, [pc, #596]	@ (34016c2c <HAL_XSPI_Init+0x5bc>)
340169d8:	f7ea ff24 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
340169dc:	687b      	ldr	r3, [r7, #4]
340169de:	685b      	ldr	r3, [r3, #4]
340169e0:	2b00      	cmp	r3, #0
340169e2:	d003      	beq.n	340169ec <HAL_XSPI_Init+0x37c>
340169e4:	687b      	ldr	r3, [r7, #4]
340169e6:	685b      	ldr	r3, [r3, #4]
340169e8:	2b40      	cmp	r3, #64	@ 0x40
340169ea:	d904      	bls.n	340169f6 <HAL_XSPI_Init+0x386>
340169ec:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
340169f0:	488e      	ldr	r0, [pc, #568]	@ (34016c2c <HAL_XSPI_Init+0x5bc>)
340169f2:	f7ea ff17 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
340169f6:	687b      	ldr	r3, [r7, #4]
340169f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340169fa:	2bff      	cmp	r3, #255	@ 0xff
340169fc:	d904      	bls.n	34016a08 <HAL_XSPI_Init+0x398>
340169fe:	f240 116d 	movw	r1, #365	@ 0x16d
34016a02:	488a      	ldr	r0, [pc, #552]	@ (34016c2c <HAL_XSPI_Init+0x5bc>)
34016a04:	f7ea ff0e 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
34016a08:	687b      	ldr	r3, [r7, #4]
34016a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016a0c:	2b00      	cmp	r3, #0
34016a0e:	d009      	beq.n	34016a24 <HAL_XSPI_Init+0x3b4>
34016a10:	687b      	ldr	r3, [r7, #4]
34016a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34016a18:	d004      	beq.n	34016a24 <HAL_XSPI_Init+0x3b4>
34016a1a:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
34016a1e:	4883      	ldr	r0, [pc, #524]	@ (34016c2c <HAL_XSPI_Init+0x5bc>)
34016a20:	f7ea ff00 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
34016a24:	687b      	ldr	r3, [r7, #4]
34016a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016a28:	2b00      	cmp	r3, #0
34016a2a:	d009      	beq.n	34016a40 <HAL_XSPI_Init+0x3d0>
34016a2c:	687b      	ldr	r3, [r7, #4]
34016a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016a30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016a34:	d004      	beq.n	34016a40 <HAL_XSPI_Init+0x3d0>
34016a36:	f240 116f 	movw	r1, #367	@ 0x16f
34016a3a:	487c      	ldr	r0, [pc, #496]	@ (34016c2c <HAL_XSPI_Init+0x5bc>)
34016a3c:	f7ea fef2 	bl	34001824 <assert_failed>
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
34016a40:	687b      	ldr	r3, [r7, #4]
34016a42:	2200      	movs	r2, #0
34016a44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
34016a46:	687b      	ldr	r3, [r7, #4]
34016a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016a4a:	2b00      	cmp	r3, #0
34016a4c:	f040 80e8 	bne.w	34016c20 <HAL_XSPI_Init+0x5b0>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
34016a50:	6878      	ldr	r0, [r7, #4]
34016a52:	f000 f8fb 	bl	34016c4c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34016a56:	f241 3188 	movw	r1, #5000	@ 0x1388
34016a5a:	6878      	ldr	r0, [r7, #4]
34016a5c:	f000 fdc4 	bl	340175e8 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
34016a60:	687b      	ldr	r3, [r7, #4]
34016a62:	681b      	ldr	r3, [r3, #0]
34016a64:	689a      	ldr	r2, [r3, #8]
34016a66:	4b72      	ldr	r3, [pc, #456]	@ (34016c30 <HAL_XSPI_Init+0x5c0>)
34016a68:	4013      	ands	r3, r2
34016a6a:	687a      	ldr	r2, [r7, #4]
34016a6c:	68d1      	ldr	r1, [r2, #12]
34016a6e:	687a      	ldr	r2, [r7, #4]
34016a70:	6912      	ldr	r2, [r2, #16]
34016a72:	0412      	lsls	r2, r2, #16
34016a74:	4311      	orrs	r1, r2
34016a76:	687a      	ldr	r2, [r7, #4]
34016a78:	6952      	ldr	r2, [r2, #20]
34016a7a:	3a01      	subs	r2, #1
34016a7c:	0212      	lsls	r2, r2, #8
34016a7e:	4311      	orrs	r1, r2
34016a80:	687a      	ldr	r2, [r7, #4]
34016a82:	69d2      	ldr	r2, [r2, #28]
34016a84:	4311      	orrs	r1, r2
34016a86:	687a      	ldr	r2, [r7, #4]
34016a88:	6812      	ldr	r2, [r2, #0]
34016a8a:	430b      	orrs	r3, r1
34016a8c:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
34016a8e:	687b      	ldr	r3, [r7, #4]
34016a90:	681b      	ldr	r3, [r3, #0]
34016a92:	68db      	ldr	r3, [r3, #12]
34016a94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
34016a98:	687b      	ldr	r3, [r7, #4]
34016a9a:	6a1a      	ldr	r2, [r3, #32]
34016a9c:	687b      	ldr	r3, [r7, #4]
34016a9e:	681b      	ldr	r3, [r3, #0]
34016aa0:	430a      	orrs	r2, r1
34016aa2:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
34016aa4:	687b      	ldr	r3, [r7, #4]
34016aa6:	681b      	ldr	r3, [r3, #0]
34016aa8:	691b      	ldr	r3, [r3, #16]
34016aaa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
34016aae:	687b      	ldr	r3, [r7, #4]
34016ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016ab2:	041a      	lsls	r2, r3, #16
34016ab4:	687b      	ldr	r3, [r7, #4]
34016ab6:	681b      	ldr	r3, [r3, #0]
34016ab8:	430a      	orrs	r2, r1
34016aba:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
34016abc:	687b      	ldr	r3, [r7, #4]
34016abe:	681b      	ldr	r3, [r3, #0]
34016ac0:	691b      	ldr	r3, [r3, #16]
34016ac2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34016ac6:	687b      	ldr	r3, [r7, #4]
34016ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
34016aca:	687b      	ldr	r3, [r7, #4]
34016acc:	681b      	ldr	r3, [r3, #0]
34016ace:	430a      	orrs	r2, r1
34016ad0:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
34016ad2:	687b      	ldr	r3, [r7, #4]
34016ad4:	681b      	ldr	r3, [r3, #0]
34016ad6:	687a      	ldr	r2, [r7, #4]
34016ad8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34016ada:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
34016adc:	687b      	ldr	r3, [r7, #4]
34016ade:	681b      	ldr	r3, [r3, #0]
34016ae0:	681b      	ldr	r3, [r3, #0]
34016ae2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
34016ae6:	687b      	ldr	r3, [r7, #4]
34016ae8:	685b      	ldr	r3, [r3, #4]
34016aea:	3b01      	subs	r3, #1
34016aec:	021a      	lsls	r2, r3, #8
34016aee:	687b      	ldr	r3, [r7, #4]
34016af0:	681b      	ldr	r3, [r3, #0]
34016af2:	430a      	orrs	r2, r1
34016af4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34016af6:	687b      	ldr	r3, [r7, #4]
34016af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34016afa:	9300      	str	r3, [sp, #0]
34016afc:	68bb      	ldr	r3, [r7, #8]
34016afe:	2200      	movs	r2, #0
34016b00:	2120      	movs	r1, #32
34016b02:	6878      	ldr	r0, [r7, #4]
34016b04:	f000 fd7f 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
34016b08:	4603      	mov	r3, r0
34016b0a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
34016b0c:	7bfb      	ldrb	r3, [r7, #15]
34016b0e:	2b00      	cmp	r3, #0
34016b10:	f040 8086 	bne.w	34016c20 <HAL_XSPI_Init+0x5b0>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
34016b14:	687b      	ldr	r3, [r7, #4]
34016b16:	681b      	ldr	r3, [r3, #0]
34016b18:	68db      	ldr	r3, [r3, #12]
34016b1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34016b1e:	687b      	ldr	r3, [r7, #4]
34016b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34016b22:	687b      	ldr	r3, [r7, #4]
34016b24:	681b      	ldr	r3, [r3, #0]
34016b26:	430a      	orrs	r2, r1
34016b28:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
34016b2a:	687b      	ldr	r3, [r7, #4]
34016b2c:	681b      	ldr	r3, [r3, #0]
34016b2e:	4a41      	ldr	r2, [pc, #260]	@ (34016c34 <HAL_XSPI_Init+0x5c4>)
34016b30:	4293      	cmp	r3, r2
34016b32:	d018      	beq.n	34016b66 <HAL_XSPI_Init+0x4f6>
34016b34:	687b      	ldr	r3, [r7, #4]
34016b36:	681b      	ldr	r3, [r3, #0]
34016b38:	4a3f      	ldr	r2, [pc, #252]	@ (34016c38 <HAL_XSPI_Init+0x5c8>)
34016b3a:	4293      	cmp	r3, r2
34016b3c:	d013      	beq.n	34016b66 <HAL_XSPI_Init+0x4f6>
34016b3e:	687b      	ldr	r3, [r7, #4]
34016b40:	681b      	ldr	r3, [r3, #0]
34016b42:	4a3e      	ldr	r2, [pc, #248]	@ (34016c3c <HAL_XSPI_Init+0x5cc>)
34016b44:	4293      	cmp	r3, r2
34016b46:	d00e      	beq.n	34016b66 <HAL_XSPI_Init+0x4f6>
34016b48:	687b      	ldr	r3, [r7, #4]
34016b4a:	681b      	ldr	r3, [r3, #0]
34016b4c:	4a3c      	ldr	r2, [pc, #240]	@ (34016c40 <HAL_XSPI_Init+0x5d0>)
34016b4e:	4293      	cmp	r3, r2
34016b50:	d009      	beq.n	34016b66 <HAL_XSPI_Init+0x4f6>
34016b52:	687b      	ldr	r3, [r7, #4]
34016b54:	681b      	ldr	r3, [r3, #0]
34016b56:	4a3b      	ldr	r2, [pc, #236]	@ (34016c44 <HAL_XSPI_Init+0x5d4>)
34016b58:	4293      	cmp	r3, r2
34016b5a:	d004      	beq.n	34016b66 <HAL_XSPI_Init+0x4f6>
34016b5c:	687b      	ldr	r3, [r7, #4]
34016b5e:	681b      	ldr	r3, [r3, #0]
34016b60:	4a39      	ldr	r2, [pc, #228]	@ (34016c48 <HAL_XSPI_Init+0x5d8>)
34016b62:	4293      	cmp	r3, r2
34016b64:	d10f      	bne.n	34016b86 <HAL_XSPI_Init+0x516>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34016b66:	687b      	ldr	r3, [r7, #4]
34016b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34016b6a:	9300      	str	r3, [sp, #0]
34016b6c:	68bb      	ldr	r3, [r7, #8]
34016b6e:	2200      	movs	r2, #0
34016b70:	2120      	movs	r1, #32
34016b72:	6878      	ldr	r0, [r7, #4]
34016b74:	f000 fd47 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
34016b78:	4603      	mov	r3, r0
34016b7a:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
34016b7c:	7bfb      	ldrb	r3, [r7, #15]
34016b7e:	2b00      	cmp	r3, #0
34016b80:	d001      	beq.n	34016b86 <HAL_XSPI_Init+0x516>
          {
            return status;
34016b82:	7bfb      	ldrb	r3, [r7, #15]
34016b84:	e04d      	b.n	34016c22 <HAL_XSPI_Init+0x5b2>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
34016b86:	687b      	ldr	r3, [r7, #4]
34016b88:	681b      	ldr	r3, [r3, #0]
34016b8a:	681b      	ldr	r3, [r3, #0]
34016b8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34016b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34016b94:	687a      	ldr	r2, [r7, #4]
34016b96:	6891      	ldr	r1, [r2, #8]
34016b98:	687a      	ldr	r2, [r7, #4]
34016b9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
34016b9c:	4311      	orrs	r1, r2
34016b9e:	687a      	ldr	r2, [r7, #4]
34016ba0:	6812      	ldr	r2, [r2, #0]
34016ba2:	430b      	orrs	r3, r1
34016ba4:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
34016ba6:	687b      	ldr	r3, [r7, #4]
34016ba8:	681b      	ldr	r3, [r3, #0]
34016baa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34016bae:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
34016bb2:	687b      	ldr	r3, [r7, #4]
34016bb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34016bb6:	687b      	ldr	r3, [r7, #4]
34016bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016bba:	431a      	orrs	r2, r3
34016bbc:	687b      	ldr	r3, [r7, #4]
34016bbe:	681b      	ldr	r3, [r3, #0]
34016bc0:	430a      	orrs	r2, r1
34016bc2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
34016bc6:	687b      	ldr	r3, [r7, #4]
34016bc8:	681b      	ldr	r3, [r3, #0]
34016bca:	681a      	ldr	r2, [r3, #0]
34016bcc:	687b      	ldr	r3, [r7, #4]
34016bce:	681b      	ldr	r3, [r3, #0]
34016bd0:	f042 0201 	orr.w	r2, r2, #1
34016bd4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
34016bd6:	687b      	ldr	r3, [r7, #4]
34016bd8:	699b      	ldr	r3, [r3, #24]
34016bda:	2b02      	cmp	r3, #2
34016bdc:	d107      	bne.n	34016bee <HAL_XSPI_Init+0x57e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
34016bde:	687b      	ldr	r3, [r7, #4]
34016be0:	681b      	ldr	r3, [r3, #0]
34016be2:	689a      	ldr	r2, [r3, #8]
34016be4:	687b      	ldr	r3, [r7, #4]
34016be6:	681b      	ldr	r3, [r3, #0]
34016be8:	f042 0202 	orr.w	r2, r2, #2
34016bec:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
34016bee:	687b      	ldr	r3, [r7, #4]
34016bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016bf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016bf6:	d107      	bne.n	34016c08 <HAL_XSPI_Init+0x598>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
34016bf8:	687b      	ldr	r3, [r7, #4]
34016bfa:	681b      	ldr	r3, [r3, #0]
34016bfc:	689a      	ldr	r2, [r3, #8]
34016bfe:	687b      	ldr	r3, [r7, #4]
34016c00:	681b      	ldr	r3, [r3, #0]
34016c02:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
34016c06:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34016c08:	687b      	ldr	r3, [r7, #4]
34016c0a:	68db      	ldr	r3, [r3, #12]
34016c0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016c10:	d103      	bne.n	34016c1a <HAL_XSPI_Init+0x5aa>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
34016c12:	687b      	ldr	r3, [r7, #4]
34016c14:	2201      	movs	r2, #1
34016c16:	659a      	str	r2, [r3, #88]	@ 0x58
34016c18:	e002      	b.n	34016c20 <HAL_XSPI_Init+0x5b0>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
34016c1a:	687b      	ldr	r3, [r7, #4]
34016c1c:	2202      	movs	r2, #2
34016c1e:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
34016c20:	7bfb      	ldrb	r3, [r7, #15]
}
34016c22:	4618      	mov	r0, r3
34016c24:	3710      	adds	r7, #16
34016c26:	46bd      	mov	sp, r7
34016c28:	bd80      	pop	{r7, pc}
34016c2a:	bf00      	nop
34016c2c:	3401d0e4 	.word	0x3401d0e4
34016c30:	f8e0c0fc 	.word	0xf8e0c0fc
34016c34:	58025000 	.word	0x58025000
34016c38:	48025000 	.word	0x48025000
34016c3c:	5802a000 	.word	0x5802a000
34016c40:	4802a000 	.word	0x4802a000
34016c44:	5802d000 	.word	0x5802d000
34016c48:	4802d000 	.word	0x4802d000

34016c4c <HAL_XSPI_MspInit>:
  * @brief  Initialize the XSPI MSP.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_MspInit(XSPI_HandleTypeDef *hxspi)
{
34016c4c:	b480      	push	{r7}
34016c4e:	b083      	sub	sp, #12
34016c50:	af00      	add	r7, sp, #0
34016c52:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_MspInit can be implemented in the user file
   */
}
34016c54:	bf00      	nop
34016c56:	370c      	adds	r7, #12
34016c58:	46bd      	mov	sp, r7
34016c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34016c5e:	4770      	bx	lr

34016c60 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd, uint32_t Timeout)
{
34016c60:	b580      	push	{r7, lr}
34016c62:	b08a      	sub	sp, #40	@ 0x28
34016c64:	af02      	add	r7, sp, #8
34016c66:	60f8      	str	r0, [r7, #12]
34016c68:	60b9      	str	r1, [r7, #8]
34016c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
34016c6c:	f7ec ff0a 	bl	34003a84 <HAL_GetTick>
34016c70:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
34016c72:	68bb      	ldr	r3, [r7, #8]
34016c74:	681b      	ldr	r3, [r3, #0]
34016c76:	2b00      	cmp	r3, #0
34016c78:	d010      	beq.n	34016c9c <HAL_XSPI_Command+0x3c>
34016c7a:	68bb      	ldr	r3, [r7, #8]
34016c7c:	681b      	ldr	r3, [r3, #0]
34016c7e:	2b01      	cmp	r3, #1
34016c80:	d00c      	beq.n	34016c9c <HAL_XSPI_Command+0x3c>
34016c82:	68bb      	ldr	r3, [r7, #8]
34016c84:	681b      	ldr	r3, [r3, #0]
34016c86:	2b02      	cmp	r3, #2
34016c88:	d008      	beq.n	34016c9c <HAL_XSPI_Command+0x3c>
34016c8a:	68bb      	ldr	r3, [r7, #8]
34016c8c:	681b      	ldr	r3, [r3, #0]
34016c8e:	2b03      	cmp	r3, #3
34016c90:	d004      	beq.n	34016c9c <HAL_XSPI_Command+0x3c>
34016c92:	f240 313e 	movw	r1, #830	@ 0x33e
34016c96:	4887      	ldr	r0, [pc, #540]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016c98:	f7ea fdc4 	bl	34001824 <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
34016c9c:	68fb      	ldr	r3, [r7, #12]
34016c9e:	689b      	ldr	r3, [r3, #8]
34016ca0:	2b00      	cmp	r3, #0
34016ca2:	d120      	bne.n	34016ce6 <HAL_XSPI_Command+0x86>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
34016ca4:	68bb      	ldr	r3, [r7, #8]
34016ca6:	685b      	ldr	r3, [r3, #4]
34016ca8:	2b00      	cmp	r3, #0
34016caa:	d01c      	beq.n	34016ce6 <HAL_XSPI_Command+0x86>
34016cac:	68bb      	ldr	r3, [r7, #8]
34016cae:	685b      	ldr	r3, [r3, #4]
34016cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34016cb4:	d017      	beq.n	34016ce6 <HAL_XSPI_Command+0x86>
34016cb6:	68bb      	ldr	r3, [r7, #8]
34016cb8:	685b      	ldr	r3, [r3, #4]
34016cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
34016cbe:	d012      	beq.n	34016ce6 <HAL_XSPI_Command+0x86>
34016cc0:	68bb      	ldr	r3, [r7, #8]
34016cc2:	685b      	ldr	r3, [r3, #4]
34016cc4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
34016cc8:	d00d      	beq.n	34016ce6 <HAL_XSPI_Command+0x86>
34016cca:	68bb      	ldr	r3, [r7, #8]
34016ccc:	685b      	ldr	r3, [r3, #4]
34016cce:	2b00      	cmp	r3, #0
34016cd0:	d009      	beq.n	34016ce6 <HAL_XSPI_Command+0x86>
34016cd2:	68bb      	ldr	r3, [r7, #8]
34016cd4:	685b      	ldr	r3, [r3, #4]
34016cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
34016cda:	d004      	beq.n	34016ce6 <HAL_XSPI_Command+0x86>
34016cdc:	f240 3141 	movw	r1, #833	@ 0x341
34016ce0:	4874      	ldr	r0, [pc, #464]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016ce2:	f7ea fd9f 	bl	34001824 <assert_failed>
  }

  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
34016ce6:	68bb      	ldr	r3, [r7, #8]
34016ce8:	68db      	ldr	r3, [r3, #12]
34016cea:	2b00      	cmp	r3, #0
34016cec:	d014      	beq.n	34016d18 <HAL_XSPI_Command+0xb8>
34016cee:	68bb      	ldr	r3, [r7, #8]
34016cf0:	68db      	ldr	r3, [r3, #12]
34016cf2:	2b01      	cmp	r3, #1
34016cf4:	d010      	beq.n	34016d18 <HAL_XSPI_Command+0xb8>
34016cf6:	68bb      	ldr	r3, [r7, #8]
34016cf8:	68db      	ldr	r3, [r3, #12]
34016cfa:	2b02      	cmp	r3, #2
34016cfc:	d00c      	beq.n	34016d18 <HAL_XSPI_Command+0xb8>
34016cfe:	68bb      	ldr	r3, [r7, #8]
34016d00:	68db      	ldr	r3, [r3, #12]
34016d02:	2b03      	cmp	r3, #3
34016d04:	d008      	beq.n	34016d18 <HAL_XSPI_Command+0xb8>
34016d06:	68bb      	ldr	r3, [r7, #8]
34016d08:	68db      	ldr	r3, [r3, #12]
34016d0a:	2b04      	cmp	r3, #4
34016d0c:	d004      	beq.n	34016d18 <HAL_XSPI_Command+0xb8>
34016d0e:	f44f 7151 	mov.w	r1, #836	@ 0x344
34016d12:	4868      	ldr	r0, [pc, #416]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016d14:	f7ea fd86 	bl	34001824 <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
34016d18:	68bb      	ldr	r3, [r7, #8]
34016d1a:	68db      	ldr	r3, [r3, #12]
34016d1c:	2b00      	cmp	r3, #0
34016d1e:	d021      	beq.n	34016d64 <HAL_XSPI_Command+0x104>
  {
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
34016d20:	68bb      	ldr	r3, [r7, #8]
34016d22:	691b      	ldr	r3, [r3, #16]
34016d24:	2b00      	cmp	r3, #0
34016d26:	d010      	beq.n	34016d4a <HAL_XSPI_Command+0xea>
34016d28:	68bb      	ldr	r3, [r7, #8]
34016d2a:	691b      	ldr	r3, [r3, #16]
34016d2c:	2b10      	cmp	r3, #16
34016d2e:	d00c      	beq.n	34016d4a <HAL_XSPI_Command+0xea>
34016d30:	68bb      	ldr	r3, [r7, #8]
34016d32:	691b      	ldr	r3, [r3, #16]
34016d34:	2b20      	cmp	r3, #32
34016d36:	d008      	beq.n	34016d4a <HAL_XSPI_Command+0xea>
34016d38:	68bb      	ldr	r3, [r7, #8]
34016d3a:	691b      	ldr	r3, [r3, #16]
34016d3c:	2b30      	cmp	r3, #48	@ 0x30
34016d3e:	d004      	beq.n	34016d4a <HAL_XSPI_Command+0xea>
34016d40:	f240 3147 	movw	r1, #839	@ 0x347
34016d44:	485b      	ldr	r0, [pc, #364]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016d46:	f7ea fd6d 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
34016d4a:	68bb      	ldr	r3, [r7, #8]
34016d4c:	695b      	ldr	r3, [r3, #20]
34016d4e:	2b00      	cmp	r3, #0
34016d50:	d008      	beq.n	34016d64 <HAL_XSPI_Command+0x104>
34016d52:	68bb      	ldr	r3, [r7, #8]
34016d54:	695b      	ldr	r3, [r3, #20]
34016d56:	2b08      	cmp	r3, #8
34016d58:	d004      	beq.n	34016d64 <HAL_XSPI_Command+0x104>
34016d5a:	f44f 7152 	mov.w	r1, #840	@ 0x348
34016d5e:	4855      	ldr	r0, [pc, #340]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016d60:	f7ea fd60 	bl	34001824 <assert_failed>
  }

  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
34016d64:	68bb      	ldr	r3, [r7, #8]
34016d66:	69db      	ldr	r3, [r3, #28]
34016d68:	2b00      	cmp	r3, #0
34016d6a:	d018      	beq.n	34016d9e <HAL_XSPI_Command+0x13e>
34016d6c:	68bb      	ldr	r3, [r7, #8]
34016d6e:	69db      	ldr	r3, [r3, #28]
34016d70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34016d74:	d013      	beq.n	34016d9e <HAL_XSPI_Command+0x13e>
34016d76:	68bb      	ldr	r3, [r7, #8]
34016d78:	69db      	ldr	r3, [r3, #28]
34016d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34016d7e:	d00e      	beq.n	34016d9e <HAL_XSPI_Command+0x13e>
34016d80:	68bb      	ldr	r3, [r7, #8]
34016d82:	69db      	ldr	r3, [r3, #28]
34016d84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34016d88:	d009      	beq.n	34016d9e <HAL_XSPI_Command+0x13e>
34016d8a:	68bb      	ldr	r3, [r7, #8]
34016d8c:	69db      	ldr	r3, [r3, #28]
34016d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34016d92:	d004      	beq.n	34016d9e <HAL_XSPI_Command+0x13e>
34016d94:	f240 314b 	movw	r1, #843	@ 0x34b
34016d98:	4846      	ldr	r0, [pc, #280]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016d9a:	f7ea fd43 	bl	34001824 <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34016d9e:	68bb      	ldr	r3, [r7, #8]
34016da0:	69db      	ldr	r3, [r3, #28]
34016da2:	2b00      	cmp	r3, #0
34016da4:	d025      	beq.n	34016df2 <HAL_XSPI_Command+0x192>
  {
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
34016da6:	68bb      	ldr	r3, [r7, #8]
34016da8:	6a1b      	ldr	r3, [r3, #32]
34016daa:	2b00      	cmp	r3, #0
34016dac:	d013      	beq.n	34016dd6 <HAL_XSPI_Command+0x176>
34016dae:	68bb      	ldr	r3, [r7, #8]
34016db0:	6a1b      	ldr	r3, [r3, #32]
34016db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34016db6:	d00e      	beq.n	34016dd6 <HAL_XSPI_Command+0x176>
34016db8:	68bb      	ldr	r3, [r7, #8]
34016dba:	6a1b      	ldr	r3, [r3, #32]
34016dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34016dc0:	d009      	beq.n	34016dd6 <HAL_XSPI_Command+0x176>
34016dc2:	68bb      	ldr	r3, [r7, #8]
34016dc4:	6a1b      	ldr	r3, [r3, #32]
34016dc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34016dca:	d004      	beq.n	34016dd6 <HAL_XSPI_Command+0x176>
34016dcc:	f240 314e 	movw	r1, #846	@ 0x34e
34016dd0:	4838      	ldr	r0, [pc, #224]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016dd2:	f7ea fd27 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
34016dd6:	68bb      	ldr	r3, [r7, #8]
34016dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016dda:	2b00      	cmp	r3, #0
34016ddc:	d009      	beq.n	34016df2 <HAL_XSPI_Command+0x192>
34016dde:	68bb      	ldr	r3, [r7, #8]
34016de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34016de6:	d004      	beq.n	34016df2 <HAL_XSPI_Command+0x192>
34016de8:	f240 314f 	movw	r1, #847	@ 0x34f
34016dec:	4831      	ldr	r0, [pc, #196]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016dee:	f7ea fd19 	bl	34001824 <assert_failed>
  }

  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
34016df2:	68bb      	ldr	r3, [r7, #8]
34016df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016df6:	2b00      	cmp	r3, #0
34016df8:	d018      	beq.n	34016e2c <HAL_XSPI_Command+0x1cc>
34016dfa:	68bb      	ldr	r3, [r7, #8]
34016dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34016e02:	d013      	beq.n	34016e2c <HAL_XSPI_Command+0x1cc>
34016e04:	68bb      	ldr	r3, [r7, #8]
34016e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016e08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34016e0c:	d00e      	beq.n	34016e2c <HAL_XSPI_Command+0x1cc>
34016e0e:	68bb      	ldr	r3, [r7, #8]
34016e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016e12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34016e16:	d009      	beq.n	34016e2c <HAL_XSPI_Command+0x1cc>
34016e18:	68bb      	ldr	r3, [r7, #8]
34016e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016e1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34016e20:	d004      	beq.n	34016e2c <HAL_XSPI_Command+0x1cc>
34016e22:	f240 3152 	movw	r1, #850	@ 0x352
34016e26:	4823      	ldr	r0, [pc, #140]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016e28:	f7ea fcfc 	bl	34001824 <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
34016e2c:	68bb      	ldr	r3, [r7, #8]
34016e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016e30:	2b00      	cmp	r3, #0
34016e32:	d025      	beq.n	34016e80 <HAL_XSPI_Command+0x220>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
34016e34:	68bb      	ldr	r3, [r7, #8]
34016e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016e38:	2b00      	cmp	r3, #0
34016e3a:	d013      	beq.n	34016e64 <HAL_XSPI_Command+0x204>
34016e3c:	68bb      	ldr	r3, [r7, #8]
34016e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016e40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34016e44:	d00e      	beq.n	34016e64 <HAL_XSPI_Command+0x204>
34016e46:	68bb      	ldr	r3, [r7, #8]
34016e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016e4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016e4e:	d009      	beq.n	34016e64 <HAL_XSPI_Command+0x204>
34016e50:	68bb      	ldr	r3, [r7, #8]
34016e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016e54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34016e58:	d004      	beq.n	34016e64 <HAL_XSPI_Command+0x204>
34016e5a:	f240 3155 	movw	r1, #853	@ 0x355
34016e5e:	4815      	ldr	r0, [pc, #84]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016e60:	f7ea fce0 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
34016e64:	68bb      	ldr	r3, [r7, #8]
34016e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34016e68:	2b00      	cmp	r3, #0
34016e6a:	d009      	beq.n	34016e80 <HAL_XSPI_Command+0x220>
34016e6c:	68bb      	ldr	r3, [r7, #8]
34016e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34016e70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34016e74:	d004      	beq.n	34016e80 <HAL_XSPI_Command+0x220>
34016e76:	f240 3156 	movw	r1, #854	@ 0x356
34016e7a:	480e      	ldr	r0, [pc, #56]	@ (34016eb4 <HAL_XSPI_Command+0x254>)
34016e7c:	f7ea fcd2 	bl	34001824 <assert_failed>
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
34016e80:	68fb      	ldr	r3, [r7, #12]
34016e82:	68db      	ldr	r3, [r3, #12]
34016e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016e88:	d116      	bne.n	34016eb8 <HAL_XSPI_Command+0x258>
34016e8a:	68bb      	ldr	r3, [r7, #8]
34016e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016e8e:	2b00      	cmp	r3, #0
34016e90:	d009      	beq.n	34016ea6 <HAL_XSPI_Command+0x246>
34016e92:	68bb      	ldr	r3, [r7, #8]
34016e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016e96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016e9a:	d004      	beq.n	34016ea6 <HAL_XSPI_Command+0x246>
34016e9c:	68bb      	ldr	r3, [r7, #8]
34016e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016ea0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
34016ea4:	d101      	bne.n	34016eaa <HAL_XSPI_Command+0x24a>
34016ea6:	2301      	movs	r3, #1
34016ea8:	e000      	b.n	34016eac <HAL_XSPI_Command+0x24c>
34016eaa:	2300      	movs	r3, #0
34016eac:	f003 0301 	and.w	r3, r3, #1
34016eb0:	b2db      	uxtb	r3, r3
34016eb2:	e024      	b.n	34016efe <HAL_XSPI_Command+0x29e>
34016eb4:	3401d0e4 	.word	0x3401d0e4
34016eb8:	68bb      	ldr	r3, [r7, #8]
34016eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016ebc:	2b00      	cmp	r3, #0
34016ebe:	d018      	beq.n	34016ef2 <HAL_XSPI_Command+0x292>
34016ec0:	68bb      	ldr	r3, [r7, #8]
34016ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34016ec8:	d013      	beq.n	34016ef2 <HAL_XSPI_Command+0x292>
34016eca:	68bb      	ldr	r3, [r7, #8]
34016ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34016ed2:	d00e      	beq.n	34016ef2 <HAL_XSPI_Command+0x292>
34016ed4:	68bb      	ldr	r3, [r7, #8]
34016ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016ed8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34016edc:	d009      	beq.n	34016ef2 <HAL_XSPI_Command+0x292>
34016ede:	68bb      	ldr	r3, [r7, #8]
34016ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016ee2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016ee6:	d004      	beq.n	34016ef2 <HAL_XSPI_Command+0x292>
34016ee8:	68bb      	ldr	r3, [r7, #8]
34016eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016eec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
34016ef0:	d101      	bne.n	34016ef6 <HAL_XSPI_Command+0x296>
34016ef2:	2301      	movs	r3, #1
34016ef4:	e000      	b.n	34016ef8 <HAL_XSPI_Command+0x298>
34016ef6:	2300      	movs	r3, #0
34016ef8:	f003 0301 	and.w	r3, r3, #1
34016efc:	b2db      	uxtb	r3, r3
34016efe:	2b00      	cmp	r3, #0
34016f00:	d104      	bne.n	34016f0c <HAL_XSPI_Command+0x2ac>
34016f02:	f240 3159 	movw	r1, #857	@ 0x359
34016f06:	485e      	ldr	r0, [pc, #376]	@ (34017080 <HAL_XSPI_Command+0x420>)
34016f08:	f7ea fc8c 	bl	34001824 <assert_failed>

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34016f0c:	68bb      	ldr	r3, [r7, #8]
34016f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016f10:	2b00      	cmp	r3, #0
34016f12:	d023      	beq.n	34016f5c <HAL_XSPI_Command+0x2fc>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34016f14:	68bb      	ldr	r3, [r7, #8]
34016f16:	681b      	ldr	r3, [r3, #0]
34016f18:	2b00      	cmp	r3, #0
34016f1a:	d108      	bne.n	34016f2e <HAL_XSPI_Command+0x2ce>
    {
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
34016f1c:	68bb      	ldr	r3, [r7, #8]
34016f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016f20:	2b00      	cmp	r3, #0
34016f22:	d104      	bne.n	34016f2e <HAL_XSPI_Command+0x2ce>
34016f24:	f240 315f 	movw	r1, #863	@ 0x35f
34016f28:	4855      	ldr	r0, [pc, #340]	@ (34017080 <HAL_XSPI_Command+0x420>)
34016f2a:	f7ea fc7b 	bl	34001824 <assert_failed>
    }
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
34016f2e:	68bb      	ldr	r3, [r7, #8]
34016f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016f32:	2b00      	cmp	r3, #0
34016f34:	d009      	beq.n	34016f4a <HAL_XSPI_Command+0x2ea>
34016f36:	68bb      	ldr	r3, [r7, #8]
34016f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34016f3e:	d004      	beq.n	34016f4a <HAL_XSPI_Command+0x2ea>
34016f40:	f240 3161 	movw	r1, #865	@ 0x361
34016f44:	484e      	ldr	r0, [pc, #312]	@ (34017080 <HAL_XSPI_Command+0x420>)
34016f46:	f7ea fc6d 	bl	34001824 <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
34016f4a:	68bb      	ldr	r3, [r7, #8]
34016f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34016f4e:	2b1f      	cmp	r3, #31
34016f50:	d904      	bls.n	34016f5c <HAL_XSPI_Command+0x2fc>
34016f52:	f240 3162 	movw	r1, #866	@ 0x362
34016f56:	484a      	ldr	r0, [pc, #296]	@ (34017080 <HAL_XSPI_Command+0x420>)
34016f58:	f7ea fc64 	bl	34001824 <assert_failed>
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
34016f5c:	68bb      	ldr	r3, [r7, #8]
34016f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34016f60:	2b00      	cmp	r3, #0
34016f62:	d009      	beq.n	34016f78 <HAL_XSPI_Command+0x318>
34016f64:	68bb      	ldr	r3, [r7, #8]
34016f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34016f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34016f6c:	d004      	beq.n	34016f78 <HAL_XSPI_Command+0x318>
34016f6e:	f240 3165 	movw	r1, #869	@ 0x365
34016f72:	4843      	ldr	r0, [pc, #268]	@ (34017080 <HAL_XSPI_Command+0x420>)
34016f74:	f7ea fc56 	bl	34001824 <assert_failed>

  /* Check the state of the driver */
  state = hxspi->State;
34016f78:	68fb      	ldr	r3, [r7, #12]
34016f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016f7c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
34016f7e:	697b      	ldr	r3, [r7, #20]
34016f80:	2b02      	cmp	r3, #2
34016f82:	d104      	bne.n	34016f8e <HAL_XSPI_Command+0x32e>
34016f84:	68fb      	ldr	r3, [r7, #12]
34016f86:	68db      	ldr	r3, [r3, #12]
34016f88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016f8c:	d115      	bne.n	34016fba <HAL_XSPI_Command+0x35a>
34016f8e:	697b      	ldr	r3, [r7, #20]
34016f90:	2b14      	cmp	r3, #20
34016f92:	d107      	bne.n	34016fa4 <HAL_XSPI_Command+0x344>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
34016f94:	68bb      	ldr	r3, [r7, #8]
34016f96:	681b      	ldr	r3, [r3, #0]
34016f98:	2b02      	cmp	r3, #2
34016f9a:	d00e      	beq.n	34016fba <HAL_XSPI_Command+0x35a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
34016f9c:	68bb      	ldr	r3, [r7, #8]
34016f9e:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
34016fa0:	2b03      	cmp	r3, #3
34016fa2:	d00a      	beq.n	34016fba <HAL_XSPI_Command+0x35a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
34016fa4:	697b      	ldr	r3, [r7, #20]
34016fa6:	2b24      	cmp	r3, #36	@ 0x24
34016fa8:	d15e      	bne.n	34017068 <HAL_XSPI_Command+0x408>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
34016faa:	68bb      	ldr	r3, [r7, #8]
34016fac:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
34016fae:	2b01      	cmp	r3, #1
34016fb0:	d003      	beq.n	34016fba <HAL_XSPI_Command+0x35a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
34016fb2:	68bb      	ldr	r3, [r7, #8]
34016fb4:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
34016fb6:	2b03      	cmp	r3, #3
34016fb8:	d156      	bne.n	34017068 <HAL_XSPI_Command+0x408>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
34016fba:	687b      	ldr	r3, [r7, #4]
34016fbc:	9300      	str	r3, [sp, #0]
34016fbe:	69bb      	ldr	r3, [r7, #24]
34016fc0:	2200      	movs	r2, #0
34016fc2:	2120      	movs	r1, #32
34016fc4:	68f8      	ldr	r0, [r7, #12]
34016fc6:	f000 fb1e 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
34016fca:	4603      	mov	r3, r0
34016fcc:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
34016fce:	7ffb      	ldrb	r3, [r7, #31]
34016fd0:	2b00      	cmp	r3, #0
34016fd2:	d146      	bne.n	34017062 <HAL_XSPI_Command+0x402>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
34016fd4:	68fb      	ldr	r3, [r7, #12]
34016fd6:	2200      	movs	r2, #0
34016fd8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
34016fda:	68b9      	ldr	r1, [r7, #8]
34016fdc:	68f8      	ldr	r0, [r7, #12]
34016fde:	f000 fb49 	bl	34017674 <XSPI_ConfigCmd>
34016fe2:	4603      	mov	r3, r0
34016fe4:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
34016fe6:	7ffb      	ldrb	r3, [r7, #31]
34016fe8:	2b00      	cmp	r3, #0
34016fea:	d143      	bne.n	34017074 <HAL_XSPI_Command+0x414>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
34016fec:	68bb      	ldr	r3, [r7, #8]
34016fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016ff0:	2b00      	cmp	r3, #0
34016ff2:	d10e      	bne.n	34017012 <HAL_XSPI_Command+0x3b2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
34016ff4:	687b      	ldr	r3, [r7, #4]
34016ff6:	9300      	str	r3, [sp, #0]
34016ff8:	69bb      	ldr	r3, [r7, #24]
34016ffa:	2200      	movs	r2, #0
34016ffc:	2120      	movs	r1, #32
34016ffe:	68f8      	ldr	r0, [r7, #12]
34017000:	f000 fb01 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
34017004:	4603      	mov	r3, r0
34017006:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
34017008:	68fb      	ldr	r3, [r7, #12]
3401700a:	681b      	ldr	r3, [r3, #0]
3401700c:	2202      	movs	r2, #2
3401700e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
34017010:	e030      	b.n	34017074 <HAL_XSPI_Command+0x414>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34017012:	68bb      	ldr	r3, [r7, #8]
34017014:	681b      	ldr	r3, [r3, #0]
34017016:	2b00      	cmp	r3, #0
34017018:	d103      	bne.n	34017022 <HAL_XSPI_Command+0x3c2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3401701a:	68fb      	ldr	r3, [r7, #12]
3401701c:	2204      	movs	r2, #4
3401701e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017020:	e028      	b.n	34017074 <HAL_XSPI_Command+0x414>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
34017022:	68bb      	ldr	r3, [r7, #8]
34017024:	681b      	ldr	r3, [r3, #0]
34017026:	2b01      	cmp	r3, #1
34017028:	d10b      	bne.n	34017042 <HAL_XSPI_Command+0x3e2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3401702a:	68fb      	ldr	r3, [r7, #12]
3401702c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3401702e:	2b24      	cmp	r3, #36	@ 0x24
34017030:	d103      	bne.n	3401703a <HAL_XSPI_Command+0x3da>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
34017032:	68fb      	ldr	r3, [r7, #12]
34017034:	2204      	movs	r2, #4
34017036:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017038:	e01c      	b.n	34017074 <HAL_XSPI_Command+0x414>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3401703a:	68fb      	ldr	r3, [r7, #12]
3401703c:	2214      	movs	r2, #20
3401703e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017040:	e018      	b.n	34017074 <HAL_XSPI_Command+0x414>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
34017042:	68bb      	ldr	r3, [r7, #8]
34017044:	681b      	ldr	r3, [r3, #0]
34017046:	2b02      	cmp	r3, #2
34017048:	d114      	bne.n	34017074 <HAL_XSPI_Command+0x414>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3401704a:	68fb      	ldr	r3, [r7, #12]
3401704c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3401704e:	2b14      	cmp	r3, #20
34017050:	d103      	bne.n	3401705a <HAL_XSPI_Command+0x3fa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
34017052:	68fb      	ldr	r3, [r7, #12]
34017054:	2204      	movs	r2, #4
34017056:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017058:	e00c      	b.n	34017074 <HAL_XSPI_Command+0x414>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3401705a:	68fb      	ldr	r3, [r7, #12]
3401705c:	2224      	movs	r2, #36	@ 0x24
3401705e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017060:	e008      	b.n	34017074 <HAL_XSPI_Command+0x414>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
34017062:	2302      	movs	r3, #2
34017064:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
34017066:	e005      	b.n	34017074 <HAL_XSPI_Command+0x414>
    }
  }
  else
  {
    status = HAL_ERROR;
34017068:	2301      	movs	r3, #1
3401706a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401706c:	68fb      	ldr	r3, [r7, #12]
3401706e:	2210      	movs	r2, #16
34017070:	65da      	str	r2, [r3, #92]	@ 0x5c
34017072:	e000      	b.n	34017076 <HAL_XSPI_Command+0x416>
    if (status == HAL_OK)
34017074:	bf00      	nop
  }

  return status;
34017076:	7ffb      	ldrb	r3, [r7, #31]
}
34017078:	4618      	mov	r0, r3
3401707a:	3720      	adds	r7, #32
3401707c:	46bd      	mov	sp, r7
3401707e:	bd80      	pop	{r7, pc}
34017080:	3401d0e4 	.word	0x3401d0e4

34017084 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
34017084:	b580      	push	{r7, lr}
34017086:	b08a      	sub	sp, #40	@ 0x28
34017088:	af02      	add	r7, sp, #8
3401708a:	60f8      	str	r0, [r7, #12]
3401708c:	60b9      	str	r1, [r7, #8]
3401708e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
34017090:	f7ec fcf8 	bl	34003a84 <HAL_GetTick>
34017094:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
34017096:	68fb      	ldr	r3, [r7, #12]
34017098:	681b      	ldr	r3, [r3, #0]
3401709a:	3350      	adds	r3, #80	@ 0x50
3401709c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3401709e:	68bb      	ldr	r3, [r7, #8]
340170a0:	2b00      	cmp	r3, #0
340170a2:	d105      	bne.n	340170b0 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
340170a4:	2301      	movs	r3, #1
340170a6:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
340170a8:	68fb      	ldr	r3, [r7, #12]
340170aa:	2208      	movs	r2, #8
340170ac:	65da      	str	r2, [r3, #92]	@ 0x5c
340170ae:	e057      	b.n	34017160 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
340170b0:	68fb      	ldr	r3, [r7, #12]
340170b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340170b4:	2b04      	cmp	r3, #4
340170b6:	d14e      	bne.n	34017156 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
340170b8:	68fb      	ldr	r3, [r7, #12]
340170ba:	681b      	ldr	r3, [r3, #0]
340170bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340170be:	1c5a      	adds	r2, r3, #1
340170c0:	68fb      	ldr	r3, [r7, #12]
340170c2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
340170c4:	68fb      	ldr	r3, [r7, #12]
340170c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
340170c8:	68fb      	ldr	r3, [r7, #12]
340170ca:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
340170cc:	68fb      	ldr	r3, [r7, #12]
340170ce:	68ba      	ldr	r2, [r7, #8]
340170d0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
340170d2:	68fb      	ldr	r3, [r7, #12]
340170d4:	681b      	ldr	r3, [r3, #0]
340170d6:	681a      	ldr	r2, [r3, #0]
340170d8:	68fb      	ldr	r3, [r7, #12]
340170da:	681b      	ldr	r3, [r3, #0]
340170dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
340170e0:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
340170e2:	687b      	ldr	r3, [r7, #4]
340170e4:	9300      	str	r3, [sp, #0]
340170e6:	69bb      	ldr	r3, [r7, #24]
340170e8:	2201      	movs	r2, #1
340170ea:	2104      	movs	r1, #4
340170ec:	68f8      	ldr	r0, [r7, #12]
340170ee:	f000 fa8a 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
340170f2:	4603      	mov	r3, r0
340170f4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
340170f6:	7ffb      	ldrb	r3, [r7, #31]
340170f8:	2b00      	cmp	r3, #0
340170fa:	d113      	bne.n	34017124 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
340170fc:	68fb      	ldr	r3, [r7, #12]
340170fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34017100:	781a      	ldrb	r2, [r3, #0]
34017102:	697b      	ldr	r3, [r7, #20]
34017104:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
34017106:	68fb      	ldr	r3, [r7, #12]
34017108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401710a:	1c5a      	adds	r2, r3, #1
3401710c:	68fb      	ldr	r3, [r7, #12]
3401710e:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
34017110:	68fb      	ldr	r3, [r7, #12]
34017112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34017114:	1e5a      	subs	r2, r3, #1
34017116:	68fb      	ldr	r3, [r7, #12]
34017118:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3401711a:	68fb      	ldr	r3, [r7, #12]
3401711c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401711e:	2b00      	cmp	r3, #0
34017120:	d1df      	bne.n	340170e2 <HAL_XSPI_Transmit+0x5e>
34017122:	e000      	b.n	34017126 <HAL_XSPI_Transmit+0xa2>
          break;
34017124:	bf00      	nop

      if (status == HAL_OK)
34017126:	7ffb      	ldrb	r3, [r7, #31]
34017128:	2b00      	cmp	r3, #0
3401712a:	d119      	bne.n	34017160 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3401712c:	687b      	ldr	r3, [r7, #4]
3401712e:	9300      	str	r3, [sp, #0]
34017130:	69bb      	ldr	r3, [r7, #24]
34017132:	2201      	movs	r2, #1
34017134:	2102      	movs	r1, #2
34017136:	68f8      	ldr	r0, [r7, #12]
34017138:	f000 fa65 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
3401713c:	4603      	mov	r3, r0
3401713e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
34017140:	7ffb      	ldrb	r3, [r7, #31]
34017142:	2b00      	cmp	r3, #0
34017144:	d10c      	bne.n	34017160 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
34017146:	68fb      	ldr	r3, [r7, #12]
34017148:	681b      	ldr	r3, [r3, #0]
3401714a:	2202      	movs	r2, #2
3401714c:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3401714e:	68fb      	ldr	r3, [r7, #12]
34017150:	2202      	movs	r2, #2
34017152:	659a      	str	r2, [r3, #88]	@ 0x58
34017154:	e004      	b.n	34017160 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
34017156:	2301      	movs	r3, #1
34017158:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401715a:	68fb      	ldr	r3, [r7, #12]
3401715c:	2210      	movs	r2, #16
3401715e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
34017160:	7ffb      	ldrb	r3, [r7, #31]
}
34017162:	4618      	mov	r0, r3
34017164:	3720      	adds	r7, #32
34017166:	46bd      	mov	sp, r7
34017168:	bd80      	pop	{r7, pc}

3401716a <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *pData, uint32_t Timeout)
{
3401716a:	b580      	push	{r7, lr}
3401716c:	b08c      	sub	sp, #48	@ 0x30
3401716e:	af02      	add	r7, sp, #8
34017170:	60f8      	str	r0, [r7, #12]
34017172:	60b9      	str	r1, [r7, #8]
34017174:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
34017176:	f7ec fc85 	bl	34003a84 <HAL_GetTick>
3401717a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3401717c:	68fb      	ldr	r3, [r7, #12]
3401717e:	681b      	ldr	r3, [r3, #0]
34017180:	3350      	adds	r3, #80	@ 0x50
34017182:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
34017184:	68fb      	ldr	r3, [r7, #12]
34017186:	681b      	ldr	r3, [r3, #0]
34017188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401718a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
3401718c:	68fb      	ldr	r3, [r7, #12]
3401718e:	681b      	ldr	r3, [r3, #0]
34017190:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34017194:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
34017196:	68bb      	ldr	r3, [r7, #8]
34017198:	2b00      	cmp	r3, #0
3401719a:	d106      	bne.n	340171aa <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
3401719c:	2301      	movs	r3, #1
3401719e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
340171a2:	68fb      	ldr	r3, [r7, #12]
340171a4:	2208      	movs	r2, #8
340171a6:	65da      	str	r2, [r3, #92]	@ 0x5c
340171a8:	e07c      	b.n	340172a4 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
340171aa:	68fb      	ldr	r3, [r7, #12]
340171ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340171ae:	2b04      	cmp	r3, #4
340171b0:	d172      	bne.n	34017298 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
340171b2:	68fb      	ldr	r3, [r7, #12]
340171b4:	681b      	ldr	r3, [r3, #0]
340171b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340171b8:	1c5a      	adds	r2, r3, #1
340171ba:	68fb      	ldr	r3, [r7, #12]
340171bc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
340171be:	68fb      	ldr	r3, [r7, #12]
340171c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
340171c2:	68fb      	ldr	r3, [r7, #12]
340171c4:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
340171c6:	68fb      	ldr	r3, [r7, #12]
340171c8:	68ba      	ldr	r2, [r7, #8]
340171ca:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
340171cc:	68fb      	ldr	r3, [r7, #12]
340171ce:	681b      	ldr	r3, [r3, #0]
340171d0:	681b      	ldr	r3, [r3, #0]
340171d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
340171d6:	68fb      	ldr	r3, [r7, #12]
340171d8:	681b      	ldr	r3, [r3, #0]
340171da:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
340171de:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
340171e0:	68fb      	ldr	r3, [r7, #12]
340171e2:	68db      	ldr	r3, [r3, #12]
340171e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340171e8:	d104      	bne.n	340171f4 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
340171ea:	68fb      	ldr	r3, [r7, #12]
340171ec:	681b      	ldr	r3, [r3, #0]
340171ee:	69ba      	ldr	r2, [r7, #24]
340171f0:	649a      	str	r2, [r3, #72]	@ 0x48
340171f2:	e011      	b.n	34017218 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
340171f4:	68fb      	ldr	r3, [r7, #12]
340171f6:	681b      	ldr	r3, [r3, #0]
340171f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
340171fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
34017200:	2b00      	cmp	r3, #0
34017202:	d004      	beq.n	3401720e <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
34017204:	68fb      	ldr	r3, [r7, #12]
34017206:	681b      	ldr	r3, [r3, #0]
34017208:	69ba      	ldr	r2, [r7, #24]
3401720a:	649a      	str	r2, [r3, #72]	@ 0x48
3401720c:	e004      	b.n	34017218 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3401720e:	68fb      	ldr	r3, [r7, #12]
34017210:	681b      	ldr	r3, [r3, #0]
34017212:	697a      	ldr	r2, [r7, #20]
34017214:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
34017218:	687b      	ldr	r3, [r7, #4]
3401721a:	9300      	str	r3, [sp, #0]
3401721c:	6a3b      	ldr	r3, [r7, #32]
3401721e:	2201      	movs	r2, #1
34017220:	2106      	movs	r1, #6
34017222:	68f8      	ldr	r0, [r7, #12]
34017224:	f000 f9ef 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
34017228:	4603      	mov	r3, r0
3401722a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
3401722e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34017232:	2b00      	cmp	r3, #0
34017234:	d114      	bne.n	34017260 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
34017236:	68fb      	ldr	r3, [r7, #12]
34017238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401723a:	69fa      	ldr	r2, [r7, #28]
3401723c:	7812      	ldrb	r2, [r2, #0]
3401723e:	b2d2      	uxtb	r2, r2
34017240:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
34017242:	68fb      	ldr	r3, [r7, #12]
34017244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34017246:	1c5a      	adds	r2, r3, #1
34017248:	68fb      	ldr	r3, [r7, #12]
3401724a:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3401724c:	68fb      	ldr	r3, [r7, #12]
3401724e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34017250:	1e5a      	subs	r2, r3, #1
34017252:	68fb      	ldr	r3, [r7, #12]
34017254:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
34017256:	68fb      	ldr	r3, [r7, #12]
34017258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401725a:	2b00      	cmp	r3, #0
3401725c:	d1dc      	bne.n	34017218 <HAL_XSPI_Receive+0xae>
3401725e:	e000      	b.n	34017262 <HAL_XSPI_Receive+0xf8>
          break;
34017260:	bf00      	nop

      if (status == HAL_OK)
34017262:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34017266:	2b00      	cmp	r3, #0
34017268:	d11c      	bne.n	340172a4 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3401726a:	687b      	ldr	r3, [r7, #4]
3401726c:	9300      	str	r3, [sp, #0]
3401726e:	6a3b      	ldr	r3, [r7, #32]
34017270:	2201      	movs	r2, #1
34017272:	2102      	movs	r1, #2
34017274:	68f8      	ldr	r0, [r7, #12]
34017276:	f000 f9c6 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
3401727a:	4603      	mov	r3, r0
3401727c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
34017280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34017284:	2b00      	cmp	r3, #0
34017286:	d10d      	bne.n	340172a4 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
34017288:	68fb      	ldr	r3, [r7, #12]
3401728a:	681b      	ldr	r3, [r3, #0]
3401728c:	2202      	movs	r2, #2
3401728e:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
34017290:	68fb      	ldr	r3, [r7, #12]
34017292:	2202      	movs	r2, #2
34017294:	659a      	str	r2, [r3, #88]	@ 0x58
34017296:	e005      	b.n	340172a4 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
34017298:	2301      	movs	r3, #1
3401729a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401729e:	68fb      	ldr	r3, [r7, #12]
340172a0:	2210      	movs	r2, #16
340172a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
340172a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
340172a8:	4618      	mov	r0, r3
340172aa:	3728      	adds	r7, #40	@ 0x28
340172ac:	46bd      	mov	sp, r7
340172ae:	bd80      	pop	{r7, pc}

340172b0 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, const XSPI_AutoPollingTypeDef *pCfg,
                                       uint32_t Timeout)
{
340172b0:	b580      	push	{r7, lr}
340172b2:	b08c      	sub	sp, #48	@ 0x30
340172b4:	af02      	add	r7, sp, #8
340172b6:	60f8      	str	r0, [r7, #12]
340172b8:	60b9      	str	r1, [r7, #8]
340172ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
340172bc:	f7ec fbe2 	bl	34003a84 <HAL_GetTick>
340172c0:	6238      	str	r0, [r7, #32]
  uint32_t addr_reg = hxspi->Instance->AR;
340172c2:	68fb      	ldr	r3, [r7, #12]
340172c4:	681b      	ldr	r3, [r3, #0]
340172c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340172c8:	61fb      	str	r3, [r7, #28]
  uint32_t ir_reg = hxspi->Instance->IR;
340172ca:	68fb      	ldr	r3, [r7, #12]
340172cc:	681b      	ldr	r3, [r3, #0]
340172ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
340172d2:	61bb      	str	r3, [r7, #24]
#ifdef USE_FULL_ASSERT
  uint32_t dlr_reg = hxspi->Instance->DLR;
340172d4:	68fb      	ldr	r3, [r7, #12]
340172d6:	681b      	ldr	r3, [r3, #0]
340172d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340172da:	617b      	str	r3, [r7, #20]
#endif /* USE_FULL_ASSERT */

  /* Check the parameters of the autopolling configuration structure */
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
340172dc:	68bb      	ldr	r3, [r7, #8]
340172de:	689b      	ldr	r3, [r3, #8]
340172e0:	2b00      	cmp	r3, #0
340172e2:	d009      	beq.n	340172f8 <HAL_XSPI_AutoPolling+0x48>
340172e4:	68bb      	ldr	r3, [r7, #8]
340172e6:	689b      	ldr	r3, [r3, #8]
340172e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
340172ec:	d004      	beq.n	340172f8 <HAL_XSPI_AutoPolling+0x48>
340172ee:	f240 7134 	movw	r1, #1844	@ 0x734
340172f2:	4853      	ldr	r0, [pc, #332]	@ (34017440 <HAL_XSPI_AutoPolling+0x190>)
340172f4:	f7ea fa96 	bl	34001824 <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
340172f8:	68bb      	ldr	r3, [r7, #8]
340172fa:	68db      	ldr	r3, [r3, #12]
340172fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34017300:	d008      	beq.n	34017314 <HAL_XSPI_AutoPolling+0x64>
34017302:	68bb      	ldr	r3, [r7, #8]
34017304:	68db      	ldr	r3, [r3, #12]
34017306:	2b00      	cmp	r3, #0
34017308:	d004      	beq.n	34017314 <HAL_XSPI_AutoPolling+0x64>
3401730a:	f240 7135 	movw	r1, #1845	@ 0x735
3401730e:	484c      	ldr	r0, [pc, #304]	@ (34017440 <HAL_XSPI_AutoPolling+0x190>)
34017310:	f7ea fa88 	bl	34001824 <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
34017314:	68bb      	ldr	r3, [r7, #8]
34017316:	691b      	ldr	r3, [r3, #16]
34017318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401731c:	d304      	bcc.n	34017328 <HAL_XSPI_AutoPolling+0x78>
3401731e:	f240 7136 	movw	r1, #1846	@ 0x736
34017322:	4847      	ldr	r0, [pc, #284]	@ (34017440 <HAL_XSPI_AutoPolling+0x190>)
34017324:	f7ea fa7e 	bl	34001824 <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
34017328:	697b      	ldr	r3, [r7, #20]
3401732a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3401732e:	d003      	beq.n	34017338 <HAL_XSPI_AutoPolling+0x88>
34017330:	697b      	ldr	r3, [r7, #20]
34017332:	3301      	adds	r3, #1
34017334:	2b04      	cmp	r3, #4
34017336:	d904      	bls.n	34017342 <HAL_XSPI_AutoPolling+0x92>
34017338:	f240 7137 	movw	r1, #1847	@ 0x737
3401733c:	4840      	ldr	r0, [pc, #256]	@ (34017440 <HAL_XSPI_AutoPolling+0x190>)
3401733e:	f7ea fa71 	bl	34001824 <assert_failed>

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
34017342:	68fb      	ldr	r3, [r7, #12]
34017344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34017346:	2b04      	cmp	r3, #4
34017348:	d16c      	bne.n	34017424 <HAL_XSPI_AutoPolling+0x174>
3401734a:	68bb      	ldr	r3, [r7, #8]
3401734c:	68db      	ldr	r3, [r3, #12]
3401734e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34017352:	d167      	bne.n	34017424 <HAL_XSPI_AutoPolling+0x174>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
34017354:	687b      	ldr	r3, [r7, #4]
34017356:	9300      	str	r3, [sp, #0]
34017358:	6a3b      	ldr	r3, [r7, #32]
3401735a:	2200      	movs	r2, #0
3401735c:	2120      	movs	r1, #32
3401735e:	68f8      	ldr	r0, [r7, #12]
34017360:	f000 f951 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
34017364:	4603      	mov	r3, r0
34017366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (status == HAL_OK)
3401736a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3401736e:	2b00      	cmp	r3, #0
34017370:	d154      	bne.n	3401741c <HAL_XSPI_AutoPolling+0x16c>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
34017372:	68fb      	ldr	r3, [r7, #12]
34017374:	681b      	ldr	r3, [r3, #0]
34017376:	68ba      	ldr	r2, [r7, #8]
34017378:	6812      	ldr	r2, [r2, #0]
3401737a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3401737e:	68fb      	ldr	r3, [r7, #12]
34017380:	681b      	ldr	r3, [r3, #0]
34017382:	68ba      	ldr	r2, [r7, #8]
34017384:	6852      	ldr	r2, [r2, #4]
34017386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3401738a:	68fb      	ldr	r3, [r7, #12]
3401738c:	681b      	ldr	r3, [r3, #0]
3401738e:	68ba      	ldr	r2, [r7, #8]
34017390:	6912      	ldr	r2, [r2, #16]
34017392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
34017396:	68fb      	ldr	r3, [r7, #12]
34017398:	681b      	ldr	r3, [r3, #0]
3401739a:	681b      	ldr	r3, [r3, #0]
3401739c:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
340173a0:	68bb      	ldr	r3, [r7, #8]
340173a2:	6899      	ldr	r1, [r3, #8]
340173a4:	68bb      	ldr	r3, [r7, #8]
340173a6:	68db      	ldr	r3, [r3, #12]
340173a8:	430b      	orrs	r3, r1
340173aa:	431a      	orrs	r2, r3
340173ac:	68fb      	ldr	r3, [r7, #12]
340173ae:	681b      	ldr	r3, [r3, #0]
340173b0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
340173b4:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
340173b6:	68fb      	ldr	r3, [r7, #12]
340173b8:	68db      	ldr	r3, [r3, #12]
340173ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340173be:	d104      	bne.n	340173ca <HAL_XSPI_AutoPolling+0x11a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
340173c0:	68fb      	ldr	r3, [r7, #12]
340173c2:	681b      	ldr	r3, [r3, #0]
340173c4:	69fa      	ldr	r2, [r7, #28]
340173c6:	649a      	str	r2, [r3, #72]	@ 0x48
340173c8:	e011      	b.n	340173ee <HAL_XSPI_AutoPolling+0x13e>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
340173ca:	68fb      	ldr	r3, [r7, #12]
340173cc:	681b      	ldr	r3, [r3, #0]
340173ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
340173d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
340173d6:	2b00      	cmp	r3, #0
340173d8:	d004      	beq.n	340173e4 <HAL_XSPI_AutoPolling+0x134>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
340173da:	68fb      	ldr	r3, [r7, #12]
340173dc:	681b      	ldr	r3, [r3, #0]
340173de:	69fa      	ldr	r2, [r7, #28]
340173e0:	649a      	str	r2, [r3, #72]	@ 0x48
340173e2:	e004      	b.n	340173ee <HAL_XSPI_AutoPolling+0x13e>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
340173e4:	68fb      	ldr	r3, [r7, #12]
340173e6:	681b      	ldr	r3, [r3, #0]
340173e8:	69ba      	ldr	r2, [r7, #24]
340173ea:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
340173ee:	687b      	ldr	r3, [r7, #4]
340173f0:	9300      	str	r3, [sp, #0]
340173f2:	6a3b      	ldr	r3, [r7, #32]
340173f4:	2201      	movs	r2, #1
340173f6:	2108      	movs	r1, #8
340173f8:	68f8      	ldr	r0, [r7, #12]
340173fa:	f000 f904 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
340173fe:	4603      	mov	r3, r0
34017400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      if (status == HAL_OK)
34017404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34017408:	2b00      	cmp	r3, #0
3401740a:	d112      	bne.n	34017432 <HAL_XSPI_AutoPolling+0x182>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3401740c:	68fb      	ldr	r3, [r7, #12]
3401740e:	681b      	ldr	r3, [r3, #0]
34017410:	2208      	movs	r2, #8
34017412:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
34017414:	68fb      	ldr	r3, [r7, #12]
34017416:	2202      	movs	r2, #2
34017418:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3401741a:	e00a      	b.n	34017432 <HAL_XSPI_AutoPolling+0x182>
      }
    }
    else
    {
      status = HAL_BUSY;
3401741c:	2302      	movs	r3, #2
3401741e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status == HAL_OK)
34017422:	e006      	b.n	34017432 <HAL_XSPI_AutoPolling+0x182>
    }
  }
  else
  {
    status = HAL_ERROR;
34017424:	2301      	movs	r3, #1
34017426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401742a:	68fb      	ldr	r3, [r7, #12]
3401742c:	2210      	movs	r2, #16
3401742e:	65da      	str	r2, [r3, #92]	@ 0x5c
34017430:	e000      	b.n	34017434 <HAL_XSPI_AutoPolling+0x184>
    if (status == HAL_OK)
34017432:	bf00      	nop
  }

  return status;
34017434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
34017438:	4618      	mov	r0, r3
3401743a:	3728      	adds	r7, #40	@ 0x28
3401743c:	46bd      	mov	sp, r7
3401743e:	bd80      	pop	{r7, pc}
34017440:	3401d0e4 	.word	0x3401d0e4

34017444 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, const XSPI_MemoryMappedTypeDef *pCfg)
{
34017444:	b580      	push	{r7, lr}
34017446:	b086      	sub	sp, #24
34017448:	af02      	add	r7, sp, #8
3401744a:	6078      	str	r0, [r7, #4]
3401744c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3401744e:	f7ec fb19 	bl	34003a84 <HAL_GetTick>
34017452:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
34017454:	683b      	ldr	r3, [r7, #0]
34017456:	681b      	ldr	r3, [r3, #0]
34017458:	2b00      	cmp	r3, #0
3401745a:	d008      	beq.n	3401746e <HAL_XSPI_MemoryMapped+0x2a>
3401745c:	683b      	ldr	r3, [r7, #0]
3401745e:	681b      	ldr	r3, [r3, #0]
34017460:	2b08      	cmp	r3, #8
34017462:	d004      	beq.n	3401746e <HAL_XSPI_MemoryMapped+0x2a>
34017464:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
34017468:	4846      	ldr	r0, [pc, #280]	@ (34017584 <HAL_XSPI_MemoryMapped+0x140>)
3401746a:	f7ea f9db 	bl	34001824 <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3401746e:	683b      	ldr	r3, [r7, #0]
34017470:	689b      	ldr	r3, [r3, #8]
34017472:	2b00      	cmp	r3, #0
34017474:	d009      	beq.n	3401748a <HAL_XSPI_MemoryMapped+0x46>
34017476:	683b      	ldr	r3, [r7, #0]
34017478:	689b      	ldr	r3, [r3, #8]
3401747a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401747e:	d004      	beq.n	3401748a <HAL_XSPI_MemoryMapped+0x46>
34017480:	f240 71c9 	movw	r1, #1993	@ 0x7c9
34017484:	483f      	ldr	r0, [pc, #252]	@ (34017584 <HAL_XSPI_MemoryMapped+0x140>)
34017486:	f7ea f9cd 	bl	34001824 <assert_failed>

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401748a:	687b      	ldr	r3, [r7, #4]
3401748c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3401748e:	2b04      	cmp	r3, #4
34017490:	d16d      	bne.n	3401756e <HAL_XSPI_MemoryMapped+0x12a>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34017492:	687b      	ldr	r3, [r7, #4]
34017494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34017496:	9300      	str	r3, [sp, #0]
34017498:	68bb      	ldr	r3, [r7, #8]
3401749a:	2200      	movs	r2, #0
3401749c:	2120      	movs	r1, #32
3401749e:	6878      	ldr	r0, [r7, #4]
340174a0:	f000 f8b1 	bl	34017606 <XSPI_WaitFlagStateUntilTimeout>
340174a4:	4603      	mov	r3, r0
340174a6:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
340174a8:	7bfb      	ldrb	r3, [r7, #15]
340174aa:	2b00      	cmp	r3, #0
340174ac:	d164      	bne.n	34017578 <HAL_XSPI_MemoryMapped+0x134>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
340174ae:	687b      	ldr	r3, [r7, #4]
340174b0:	2288      	movs	r2, #136	@ 0x88
340174b2:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
340174b4:	683b      	ldr	r3, [r7, #0]
340174b6:	689b      	ldr	r3, [r3, #8]
340174b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340174bc:	d10b      	bne.n	340174d6 <HAL_XSPI_MemoryMapped+0x92>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
340174be:	687b      	ldr	r3, [r7, #4]
340174c0:	681b      	ldr	r3, [r3, #0]
340174c2:	681b      	ldr	r3, [r3, #0]
340174c4:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
340174c8:	683b      	ldr	r3, [r7, #0]
340174ca:	689a      	ldr	r2, [r3, #8]
340174cc:	687b      	ldr	r3, [r7, #4]
340174ce:	681b      	ldr	r3, [r3, #0]
340174d0:	430a      	orrs	r2, r1
340174d2:	601a      	str	r2, [r3, #0]
340174d4:	e01b      	b.n	3401750e <HAL_XSPI_MemoryMapped+0xca>
      }

      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
340174d6:	683b      	ldr	r3, [r7, #0]
340174d8:	68db      	ldr	r3, [r3, #12]
340174da:	2b00      	cmp	r3, #0
340174dc:	d009      	beq.n	340174f2 <HAL_XSPI_MemoryMapped+0xae>
340174de:	683b      	ldr	r3, [r7, #0]
340174e0:	68db      	ldr	r3, [r3, #12]
340174e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340174e6:	d004      	beq.n	340174f2 <HAL_XSPI_MemoryMapped+0xae>
340174e8:	f240 71dd 	movw	r1, #2013	@ 0x7dd
340174ec:	4825      	ldr	r0, [pc, #148]	@ (34017584 <HAL_XSPI_MemoryMapped+0x140>)
340174ee:	f7ea f999 	bl	34001824 <assert_failed>

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
340174f2:	687b      	ldr	r3, [r7, #4]
340174f4:	681b      	ldr	r3, [r3, #0]
340174f6:	681b      	ldr	r3, [r3, #0]
340174f8:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
340174fc:	683b      	ldr	r3, [r7, #0]
340174fe:	689a      	ldr	r2, [r3, #8]
34017500:	683b      	ldr	r3, [r7, #0]
34017502:	68db      	ldr	r3, [r3, #12]
34017504:	431a      	orrs	r2, r3
34017506:	687b      	ldr	r3, [r7, #4]
34017508:	681b      	ldr	r3, [r3, #0]
3401750a:	430a      	orrs	r2, r1
3401750c:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3401750e:	683b      	ldr	r3, [r7, #0]
34017510:	681b      	ldr	r3, [r3, #0]
34017512:	2b08      	cmp	r3, #8
34017514:	d11b      	bne.n	3401754e <HAL_XSPI_MemoryMapped+0x10a>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
34017516:	683b      	ldr	r3, [r7, #0]
34017518:	685b      	ldr	r3, [r3, #4]
3401751a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401751e:	d304      	bcc.n	3401752a <HAL_XSPI_MemoryMapped+0xe6>
34017520:	f240 71e5 	movw	r1, #2021	@ 0x7e5
34017524:	4817      	ldr	r0, [pc, #92]	@ (34017584 <HAL_XSPI_MemoryMapped+0x140>)
34017526:	f7ea f97d 	bl	34001824 <assert_failed>

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3401752a:	687b      	ldr	r3, [r7, #4]
3401752c:	681b      	ldr	r3, [r3, #0]
3401752e:	683a      	ldr	r2, [r7, #0]
34017530:	6852      	ldr	r2, [r2, #4]
34017532:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
34017536:	687b      	ldr	r3, [r7, #4]
34017538:	681b      	ldr	r3, [r3, #0]
3401753a:	2210      	movs	r2, #16
3401753c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3401753e:	687b      	ldr	r3, [r7, #4]
34017540:	681b      	ldr	r3, [r3, #0]
34017542:	681a      	ldr	r2, [r3, #0]
34017544:	687b      	ldr	r3, [r7, #4]
34017546:	681b      	ldr	r3, [r3, #0]
34017548:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3401754c:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3401754e:	687b      	ldr	r3, [r7, #4]
34017550:	681b      	ldr	r3, [r3, #0]
34017552:	681b      	ldr	r3, [r3, #0]
34017554:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
34017558:	f023 0308 	bic.w	r3, r3, #8
3401755c:	683a      	ldr	r2, [r7, #0]
3401755e:	6812      	ldr	r2, [r2, #0]
34017560:	431a      	orrs	r2, r3
34017562:	687b      	ldr	r3, [r7, #4]
34017564:	681b      	ldr	r3, [r3, #0]
34017566:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
3401756a:	601a      	str	r2, [r3, #0]
3401756c:	e004      	b.n	34017578 <HAL_XSPI_MemoryMapped+0x134>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
3401756e:	2301      	movs	r3, #1
34017570:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34017572:	687b      	ldr	r3, [r7, #4]
34017574:	2210      	movs	r2, #16
34017576:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
34017578:	7bfb      	ldrb	r3, [r7, #15]
}
3401757a:	4618      	mov	r0, r3
3401757c:	3710      	adds	r7, #16
3401757e:	46bd      	mov	sp, r7
34017580:	bd80      	pop	{r7, pc}
34017582:	bf00      	nop
34017584:	3401d0e4 	.word	0x3401d0e4

34017588 <HAL_XSPI_SetClockPrescaler>:
  * @param  hxspi     : XSPI handle.
  * @param  Prescaler : Clock prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetClockPrescaler(XSPI_HandleTypeDef *hxspi, uint32_t Prescaler)
{
34017588:	b580      	push	{r7, lr}
3401758a:	b084      	sub	sp, #16
3401758c:	af00      	add	r7, sp, #0
3401758e:	6078      	str	r0, [r7, #4]
34017590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
34017592:	2300      	movs	r3, #0
34017594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
34017596:	683b      	ldr	r3, [r7, #0]
34017598:	2bff      	cmp	r3, #255	@ 0xff
3401759a:	d904      	bls.n	340175a6 <HAL_XSPI_SetClockPrescaler+0x1e>
3401759c:	f640 2193 	movw	r1, #2707	@ 0xa93
340175a0:	4810      	ldr	r0, [pc, #64]	@ (340175e4 <HAL_XSPI_SetClockPrescaler+0x5c>)
340175a2:	f7ea f93f 	bl	34001824 <assert_failed>

  /* Check the state */
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
340175a6:	687b      	ldr	r3, [r7, #4]
340175a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340175aa:	f003 0308 	and.w	r3, r3, #8
340175ae:	2b00      	cmp	r3, #0
340175b0:	d10e      	bne.n	340175d0 <HAL_XSPI_SetClockPrescaler+0x48>
  {
    /* Synchronize initialization structure with the new clock prescaler value */
    hxspi->Init.ClockPrescaler = Prescaler;
340175b2:	687b      	ldr	r3, [r7, #4]
340175b4:	683a      	ldr	r2, [r7, #0]
340175b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure clock prescaler */
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
340175b8:	687b      	ldr	r3, [r7, #4]
340175ba:	681b      	ldr	r3, [r3, #0]
340175bc:	68db      	ldr	r3, [r3, #12]
340175be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
340175c2:	687b      	ldr	r3, [r7, #4]
340175c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
340175c6:	687b      	ldr	r3, [r7, #4]
340175c8:	681b      	ldr	r3, [r3, #0]
340175ca:	430a      	orrs	r2, r1
340175cc:	60da      	str	r2, [r3, #12]
340175ce:	e004      	b.n	340175da <HAL_XSPI_SetClockPrescaler+0x52>
               ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));
  }
  else
  {
    status = HAL_ERROR;
340175d0:	2301      	movs	r3, #1
340175d2:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340175d4:	687b      	ldr	r3, [r7, #4]
340175d6:	2210      	movs	r2, #16
340175d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
340175da:	7bfb      	ldrb	r3, [r7, #15]
}
340175dc:	4618      	mov	r0, r3
340175de:	3710      	adds	r7, #16
340175e0:	46bd      	mov	sp, r7
340175e2:	bd80      	pop	{r7, pc}
340175e4:	3401d0e4 	.word	0x3401d0e4

340175e8 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
340175e8:	b480      	push	{r7}
340175ea:	b083      	sub	sp, #12
340175ec:	af00      	add	r7, sp, #0
340175ee:	6078      	str	r0, [r7, #4]
340175f0:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
340175f2:	687b      	ldr	r3, [r7, #4]
340175f4:	683a      	ldr	r2, [r7, #0]
340175f6:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
340175f8:	2300      	movs	r3, #0
}
340175fa:	4618      	mov	r0, r3
340175fc:	370c      	adds	r7, #12
340175fe:	46bd      	mov	sp, r7
34017600:	f85d 7b04 	ldr.w	r7, [sp], #4
34017604:	4770      	bx	lr

34017606 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
34017606:	b580      	push	{r7, lr}
34017608:	b084      	sub	sp, #16
3401760a:	af00      	add	r7, sp, #0
3401760c:	60f8      	str	r0, [r7, #12]
3401760e:	60b9      	str	r1, [r7, #8]
34017610:	603b      	str	r3, [r7, #0]
34017612:	4613      	mov	r3, r2
34017614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
34017616:	e019      	b.n	3401764c <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
34017618:	69bb      	ldr	r3, [r7, #24]
3401761a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3401761e:	d015      	beq.n	3401764c <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34017620:	f7ec fa30 	bl	34003a84 <HAL_GetTick>
34017624:	4602      	mov	r2, r0
34017626:	683b      	ldr	r3, [r7, #0]
34017628:	1ad3      	subs	r3, r2, r3
3401762a:	69ba      	ldr	r2, [r7, #24]
3401762c:	429a      	cmp	r2, r3
3401762e:	d302      	bcc.n	34017636 <XSPI_WaitFlagStateUntilTimeout+0x30>
34017630:	69bb      	ldr	r3, [r7, #24]
34017632:	2b00      	cmp	r3, #0
34017634:	d10a      	bne.n	3401764c <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
34017636:	68fb      	ldr	r3, [r7, #12]
34017638:	2202      	movs	r2, #2
3401763a:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3401763c:	68fb      	ldr	r3, [r7, #12]
3401763e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34017640:	f043 0201 	orr.w	r2, r3, #1
34017644:	68fb      	ldr	r3, [r7, #12]
34017646:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
34017648:	2303      	movs	r3, #3
3401764a:	e00e      	b.n	3401766a <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3401764c:	68fb      	ldr	r3, [r7, #12]
3401764e:	681b      	ldr	r3, [r3, #0]
34017650:	6a1a      	ldr	r2, [r3, #32]
34017652:	68bb      	ldr	r3, [r7, #8]
34017654:	4013      	ands	r3, r2
34017656:	2b00      	cmp	r3, #0
34017658:	bf14      	ite	ne
3401765a:	2301      	movne	r3, #1
3401765c:	2300      	moveq	r3, #0
3401765e:	b2db      	uxtb	r3, r3
34017660:	461a      	mov	r2, r3
34017662:	79fb      	ldrb	r3, [r7, #7]
34017664:	429a      	cmp	r2, r3
34017666:	d1d7      	bne.n	34017618 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
34017668:	2300      	movs	r3, #0
}
3401766a:	4618      	mov	r0, r3
3401766c:	3710      	adds	r7, #16
3401766e:	46bd      	mov	sp, r7
34017670:	bd80      	pop	{r7, pc}
	...

34017674 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd)
{
34017674:	b580      	push	{r7, lr}
34017676:	b088      	sub	sp, #32
34017678:	af00      	add	r7, sp, #0
3401767a:	6078      	str	r0, [r7, #4]
3401767c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
3401767e:	2300      	movs	r3, #0
34017680:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
34017682:	687b      	ldr	r3, [r7, #4]
34017684:	681b      	ldr	r3, [r3, #0]
34017686:	681a      	ldr	r2, [r3, #0]
34017688:	687b      	ldr	r3, [r7, #4]
3401768a:	681b      	ldr	r3, [r3, #0]
3401768c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
34017690:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
34017692:	687b      	ldr	r3, [r7, #4]
34017694:	689b      	ldr	r3, [r3, #8]
34017696:	2b00      	cmp	r3, #0
34017698:	d12b      	bne.n	340176f2 <XSPI_ConfigCmd+0x7e>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3401769a:	683b      	ldr	r3, [r7, #0]
3401769c:	685b      	ldr	r3, [r3, #4]
3401769e:	2b00      	cmp	r3, #0
340176a0:	d01c      	beq.n	340176dc <XSPI_ConfigCmd+0x68>
340176a2:	683b      	ldr	r3, [r7, #0]
340176a4:	685b      	ldr	r3, [r3, #4]
340176a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
340176aa:	d017      	beq.n	340176dc <XSPI_ConfigCmd+0x68>
340176ac:	683b      	ldr	r3, [r7, #0]
340176ae:	685b      	ldr	r3, [r3, #4]
340176b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
340176b4:	d012      	beq.n	340176dc <XSPI_ConfigCmd+0x68>
340176b6:	683b      	ldr	r3, [r7, #0]
340176b8:	685b      	ldr	r3, [r3, #4]
340176ba:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
340176be:	d00d      	beq.n	340176dc <XSPI_ConfigCmd+0x68>
340176c0:	683b      	ldr	r3, [r7, #0]
340176c2:	685b      	ldr	r3, [r3, #4]
340176c4:	2b00      	cmp	r3, #0
340176c6:	d009      	beq.n	340176dc <XSPI_ConfigCmd+0x68>
340176c8:	683b      	ldr	r3, [r7, #0]
340176ca:	685b      	ldr	r3, [r3, #4]
340176cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
340176d0:	d004      	beq.n	340176dc <XSPI_ConfigCmd+0x68>
340176d2:	f640 41a4 	movw	r1, #3236	@ 0xca4
340176d6:	4892      	ldr	r0, [pc, #584]	@ (34017920 <XSPI_ConfigCmd+0x2ac>)
340176d8:	f7ea f8a4 	bl	34001824 <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
340176dc:	687b      	ldr	r3, [r7, #4]
340176de:	681b      	ldr	r3, [r3, #0]
340176e0:	681b      	ldr	r3, [r3, #0]
340176e2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
340176e6:	683b      	ldr	r3, [r7, #0]
340176e8:	685a      	ldr	r2, [r3, #4]
340176ea:	687b      	ldr	r3, [r7, #4]
340176ec:	681b      	ldr	r3, [r3, #0]
340176ee:	430a      	orrs	r2, r1
340176f0:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
340176f2:	683b      	ldr	r3, [r7, #0]
340176f4:	681b      	ldr	r3, [r3, #0]
340176f6:	2b02      	cmp	r3, #2
340176f8:	d114      	bne.n	34017724 <XSPI_ConfigCmd+0xb0>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
340176fa:	687b      	ldr	r3, [r7, #4]
340176fc:	681b      	ldr	r3, [r3, #0]
340176fe:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
34017702:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
34017704:	687b      	ldr	r3, [r7, #4]
34017706:	681b      	ldr	r3, [r3, #0]
34017708:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
3401770c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
3401770e:	687b      	ldr	r3, [r7, #4]
34017710:	681b      	ldr	r3, [r3, #0]
34017712:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
34017716:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
34017718:	687b      	ldr	r3, [r7, #4]
3401771a:	681b      	ldr	r3, [r3, #0]
3401771c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
34017720:	60fb      	str	r3, [r7, #12]
34017722:	e02c      	b.n	3401777e <XSPI_ConfigCmd+0x10a>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
34017724:	683b      	ldr	r3, [r7, #0]
34017726:	681b      	ldr	r3, [r3, #0]
34017728:	2b03      	cmp	r3, #3
3401772a:	d114      	bne.n	34017756 <XSPI_ConfigCmd+0xe2>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
3401772c:	687b      	ldr	r3, [r7, #4]
3401772e:	681b      	ldr	r3, [r3, #0]
34017730:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
34017734:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
34017736:	687b      	ldr	r3, [r7, #4]
34017738:	681b      	ldr	r3, [r3, #0]
3401773a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
3401773e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
34017740:	687b      	ldr	r3, [r7, #4]
34017742:	681b      	ldr	r3, [r3, #0]
34017744:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
34017748:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
3401774a:	687b      	ldr	r3, [r7, #4]
3401774c:	681b      	ldr	r3, [r3, #0]
3401774e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
34017752:	60fb      	str	r3, [r7, #12]
34017754:	e013      	b.n	3401777e <XSPI_ConfigCmd+0x10a>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
34017756:	687b      	ldr	r3, [r7, #4]
34017758:	681b      	ldr	r3, [r3, #0]
3401775a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3401775e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
34017760:	687b      	ldr	r3, [r7, #4]
34017762:	681b      	ldr	r3, [r3, #0]
34017764:	f503 7384 	add.w	r3, r3, #264	@ 0x108
34017768:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
3401776a:	687b      	ldr	r3, [r7, #4]
3401776c:	681b      	ldr	r3, [r3, #0]
3401776e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
34017772:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
34017774:	687b      	ldr	r3, [r7, #4]
34017776:	681b      	ldr	r3, [r3, #0]
34017778:	f503 7390 	add.w	r3, r3, #288	@ 0x120
3401777c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3401777e:	683b      	ldr	r3, [r7, #0]
34017780:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34017782:	69bb      	ldr	r3, [r7, #24]
34017784:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
34017786:	683b      	ldr	r3, [r7, #0]
34017788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401778a:	2b00      	cmp	r3, #0
3401778c:	d012      	beq.n	340177b4 <XSPI_ConfigCmd+0x140>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3401778e:	683b      	ldr	r3, [r7, #0]
34017790:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34017792:	68fb      	ldr	r3, [r7, #12]
34017794:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
34017796:	69bb      	ldr	r3, [r7, #24]
34017798:	681b      	ldr	r3, [r3, #0]
3401779a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
3401779e:	683b      	ldr	r3, [r7, #0]
340177a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
340177a2:	683b      	ldr	r3, [r7, #0]
340177a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340177a6:	4319      	orrs	r1, r3
340177a8:	683b      	ldr	r3, [r7, #0]
340177aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340177ac:	430b      	orrs	r3, r1
340177ae:	431a      	orrs	r2, r3
340177b0:	69bb      	ldr	r3, [r7, #24]
340177b2:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
340177b4:	697b      	ldr	r3, [r7, #20]
340177b6:	681b      	ldr	r3, [r3, #0]
340177b8:	f023 021f 	bic.w	r2, r3, #31
340177bc:	683b      	ldr	r3, [r7, #0]
340177be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340177c0:	431a      	orrs	r2, r3
340177c2:	697b      	ldr	r3, [r7, #20]
340177c4:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
340177c6:	683b      	ldr	r3, [r7, #0]
340177c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340177ca:	2b00      	cmp	r3, #0
340177cc:	d009      	beq.n	340177e2 <XSPI_ConfigCmd+0x16e>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
340177ce:	683b      	ldr	r3, [r7, #0]
340177d0:	681b      	ldr	r3, [r3, #0]
340177d2:	2b00      	cmp	r3, #0
340177d4:	d105      	bne.n	340177e2 <XSPI_ConfigCmd+0x16e>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
340177d6:	683b      	ldr	r3, [r7, #0]
340177d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
340177da:	687b      	ldr	r3, [r7, #4]
340177dc:	681b      	ldr	r3, [r3, #0]
340177de:	3a01      	subs	r2, #1
340177e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
340177e2:	683b      	ldr	r3, [r7, #0]
340177e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340177e6:	2b00      	cmp	r3, #0
340177e8:	d01e      	beq.n	34017828 <XSPI_ConfigCmd+0x1b4>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
340177ea:	683b      	ldr	r3, [r7, #0]
340177ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340177ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340177f2:	d10a      	bne.n	3401780a <XSPI_ConfigCmd+0x196>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
340177f4:	687b      	ldr	r3, [r7, #4]
340177f6:	681b      	ldr	r3, [r3, #0]
340177f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
340177fc:	687b      	ldr	r3, [r7, #4]
340177fe:	681b      	ldr	r3, [r3, #0]
34017800:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34017804:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
34017808:	e00e      	b.n	34017828 <XSPI_ConfigCmd+0x1b4>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3401780a:	687b      	ldr	r3, [r7, #4]
3401780c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401780e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34017812:	d109      	bne.n	34017828 <XSPI_ConfigCmd+0x1b4>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34017814:	687b      	ldr	r3, [r7, #4]
34017816:	681b      	ldr	r3, [r3, #0]
34017818:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3401781c:	687b      	ldr	r3, [r7, #4]
3401781e:	681b      	ldr	r3, [r3, #0]
34017820:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
34017824:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
34017828:	683b      	ldr	r3, [r7, #0]
3401782a:	68db      	ldr	r3, [r3, #12]
3401782c:	2b00      	cmp	r3, #0
3401782e:	f000 809e 	beq.w	3401796e <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34017832:	683b      	ldr	r3, [r7, #0]
34017834:	69db      	ldr	r3, [r3, #28]
34017836:	2b00      	cmp	r3, #0
34017838:	d055      	beq.n	340178e6 <XSPI_ConfigCmd+0x272>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401783a:	683b      	ldr	r3, [r7, #0]
3401783c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401783e:	2b00      	cmp	r3, #0
34017840:	d01e      	beq.n	34017880 <XSPI_ConfigCmd+0x20c>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34017842:	69bb      	ldr	r3, [r7, #24]
34017844:	681a      	ldr	r2, [r3, #0]
34017846:	4b37      	ldr	r3, [pc, #220]	@ (34017924 <XSPI_ConfigCmd+0x2b0>)
34017848:	4013      	ands	r3, r2
3401784a:	683a      	ldr	r2, [r7, #0]
3401784c:	68d1      	ldr	r1, [r2, #12]
3401784e:	683a      	ldr	r2, [r7, #0]
34017850:	6952      	ldr	r2, [r2, #20]
34017852:	4311      	orrs	r1, r2
34017854:	683a      	ldr	r2, [r7, #0]
34017856:	6912      	ldr	r2, [r2, #16]
34017858:	4311      	orrs	r1, r2
3401785a:	683a      	ldr	r2, [r7, #0]
3401785c:	69d2      	ldr	r2, [r2, #28]
3401785e:	4311      	orrs	r1, r2
34017860:	683a      	ldr	r2, [r7, #0]
34017862:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34017864:	4311      	orrs	r1, r2
34017866:	683a      	ldr	r2, [r7, #0]
34017868:	6a12      	ldr	r2, [r2, #32]
3401786a:	4311      	orrs	r1, r2
3401786c:	683a      	ldr	r2, [r7, #0]
3401786e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34017870:	4311      	orrs	r1, r2
34017872:	683a      	ldr	r2, [r7, #0]
34017874:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34017876:	430a      	orrs	r2, r1
34017878:	431a      	orrs	r2, r3
3401787a:	69bb      	ldr	r3, [r7, #24]
3401787c:	601a      	str	r2, [r3, #0]
3401787e:	e028      	b.n	340178d2 <XSPI_ConfigCmd+0x25e>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34017880:	69bb      	ldr	r3, [r7, #24]
34017882:	681b      	ldr	r3, [r3, #0]
34017884:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
34017888:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3401788c:	683a      	ldr	r2, [r7, #0]
3401788e:	68d1      	ldr	r1, [r2, #12]
34017890:	683a      	ldr	r2, [r7, #0]
34017892:	6952      	ldr	r2, [r2, #20]
34017894:	4311      	orrs	r1, r2
34017896:	683a      	ldr	r2, [r7, #0]
34017898:	6912      	ldr	r2, [r2, #16]
3401789a:	4311      	orrs	r1, r2
3401789c:	683a      	ldr	r2, [r7, #0]
3401789e:	69d2      	ldr	r2, [r2, #28]
340178a0:	4311      	orrs	r1, r2
340178a2:	683a      	ldr	r2, [r7, #0]
340178a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
340178a6:	4311      	orrs	r1, r2
340178a8:	683a      	ldr	r2, [r7, #0]
340178aa:	6a12      	ldr	r2, [r2, #32]
340178ac:	430a      	orrs	r2, r1
340178ae:	431a      	orrs	r2, r3
340178b0:	69bb      	ldr	r3, [r7, #24]
340178b2:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
340178b4:	687b      	ldr	r3, [r7, #4]
340178b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340178b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340178bc:	d109      	bne.n	340178d2 <XSPI_ConfigCmd+0x25e>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
340178be:	683b      	ldr	r3, [r7, #0]
340178c0:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
340178c2:	2b08      	cmp	r3, #8
340178c4:	d105      	bne.n	340178d2 <XSPI_ConfigCmd+0x25e>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
340178c6:	69bb      	ldr	r3, [r7, #24]
340178c8:	681b      	ldr	r3, [r3, #0]
340178ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
340178ce:	69bb      	ldr	r3, [r7, #24]
340178d0:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
340178d2:	683b      	ldr	r3, [r7, #0]
340178d4:	689a      	ldr	r2, [r3, #8]
340178d6:	693b      	ldr	r3, [r7, #16]
340178d8:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
340178da:	687b      	ldr	r3, [r7, #4]
340178dc:	681b      	ldr	r3, [r3, #0]
340178de:	683a      	ldr	r2, [r7, #0]
340178e0:	6992      	ldr	r2, [r2, #24]
340178e2:	649a      	str	r2, [r3, #72]	@ 0x48
340178e4:	e07d      	b.n	340179e2 <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
340178e6:	683b      	ldr	r3, [r7, #0]
340178e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340178ea:	2b00      	cmp	r3, #0
340178ec:	d01c      	beq.n	34017928 <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
340178ee:	69bb      	ldr	r3, [r7, #24]
340178f0:	681b      	ldr	r3, [r3, #0]
340178f2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
340178f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
340178fa:	683a      	ldr	r2, [r7, #0]
340178fc:	68d1      	ldr	r1, [r2, #12]
340178fe:	683a      	ldr	r2, [r7, #0]
34017900:	6952      	ldr	r2, [r2, #20]
34017902:	4311      	orrs	r1, r2
34017904:	683a      	ldr	r2, [r7, #0]
34017906:	6912      	ldr	r2, [r2, #16]
34017908:	4311      	orrs	r1, r2
3401790a:	683a      	ldr	r2, [r7, #0]
3401790c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3401790e:	4311      	orrs	r1, r2
34017910:	683a      	ldr	r2, [r7, #0]
34017912:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34017914:	430a      	orrs	r2, r1
34017916:	431a      	orrs	r2, r3
34017918:	69bb      	ldr	r3, [r7, #24]
3401791a:	601a      	str	r2, [r3, #0]
3401791c:	e022      	b.n	34017964 <XSPI_ConfigCmd+0x2f0>
3401791e:	bf00      	nop
34017920:	3401d0e4 	.word	0x3401d0e4
34017924:	f0ffc0c0 	.word	0xf0ffc0c0
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
34017928:	69bb      	ldr	r3, [r7, #24]
3401792a:	681b      	ldr	r3, [r3, #0]
3401792c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
34017930:	683b      	ldr	r3, [r7, #0]
34017932:	68d9      	ldr	r1, [r3, #12]
34017934:	683b      	ldr	r3, [r7, #0]
34017936:	695b      	ldr	r3, [r3, #20]
34017938:	4319      	orrs	r1, r3
3401793a:	683b      	ldr	r3, [r7, #0]
3401793c:	691b      	ldr	r3, [r3, #16]
3401793e:	430b      	orrs	r3, r1
34017940:	431a      	orrs	r2, r3
34017942:	69bb      	ldr	r3, [r7, #24]
34017944:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017946:	687b      	ldr	r3, [r7, #4]
34017948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401794a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401794e:	d109      	bne.n	34017964 <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
34017950:	683b      	ldr	r3, [r7, #0]
34017952:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017954:	2b08      	cmp	r3, #8
34017956:	d105      	bne.n	34017964 <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34017958:	69bb      	ldr	r3, [r7, #24]
3401795a:	681b      	ldr	r3, [r3, #0]
3401795c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34017960:	69bb      	ldr	r3, [r7, #24]
34017962:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
34017964:	683b      	ldr	r3, [r7, #0]
34017966:	689a      	ldr	r2, [r3, #8]
34017968:	693b      	ldr	r3, [r7, #16]
3401796a:	601a      	str	r2, [r3, #0]
3401796c:	e039      	b.n	340179e2 <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401796e:	683b      	ldr	r3, [r7, #0]
34017970:	69db      	ldr	r3, [r3, #28]
34017972:	2b00      	cmp	r3, #0
34017974:	d030      	beq.n	340179d8 <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34017976:	683b      	ldr	r3, [r7, #0]
34017978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401797a:	2b00      	cmp	r3, #0
3401797c:	d017      	beq.n	340179ae <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3401797e:	69bb      	ldr	r3, [r7, #24]
34017980:	681b      	ldr	r3, [r3, #0]
34017982:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
34017986:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3401798a:	683a      	ldr	r2, [r7, #0]
3401798c:	69d1      	ldr	r1, [r2, #28]
3401798e:	683a      	ldr	r2, [r7, #0]
34017990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34017992:	4311      	orrs	r1, r2
34017994:	683a      	ldr	r2, [r7, #0]
34017996:	6a12      	ldr	r2, [r2, #32]
34017998:	4311      	orrs	r1, r2
3401799a:	683a      	ldr	r2, [r7, #0]
3401799c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3401799e:	4311      	orrs	r1, r2
340179a0:	683a      	ldr	r2, [r7, #0]
340179a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
340179a4:	430a      	orrs	r2, r1
340179a6:	431a      	orrs	r2, r3
340179a8:	69bb      	ldr	r3, [r7, #24]
340179aa:	601a      	str	r2, [r3, #0]
340179ac:	e00e      	b.n	340179cc <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
340179ae:	69bb      	ldr	r3, [r7, #24]
340179b0:	681b      	ldr	r3, [r3, #0]
340179b2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
340179b6:	683b      	ldr	r3, [r7, #0]
340179b8:	69d9      	ldr	r1, [r3, #28]
340179ba:	683b      	ldr	r3, [r7, #0]
340179bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340179be:	4319      	orrs	r1, r3
340179c0:	683b      	ldr	r3, [r7, #0]
340179c2:	6a1b      	ldr	r3, [r3, #32]
340179c4:	430b      	orrs	r3, r1
340179c6:	431a      	orrs	r2, r3
340179c8:	69bb      	ldr	r3, [r7, #24]
340179ca:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
340179cc:	687b      	ldr	r3, [r7, #4]
340179ce:	681b      	ldr	r3, [r3, #0]
340179d0:	683a      	ldr	r2, [r7, #0]
340179d2:	6992      	ldr	r2, [r2, #24]
340179d4:	649a      	str	r2, [r3, #72]	@ 0x48
340179d6:	e004      	b.n	340179e2 <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
340179d8:	2301      	movs	r3, #1
340179da:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
340179dc:	687b      	ldr	r3, [r7, #4]
340179de:	2208      	movs	r2, #8
340179e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
340179e2:	7ffb      	ldrb	r3, [r7, #31]
}
340179e4:	4618      	mov	r0, r3
340179e6:	3720      	adds	r7, #32
340179e8:	46bd      	mov	sp, r7
340179ea:	bd80      	pop	{r7, pc}

340179ec <CMW_CAMERA_GetDCMIPPHandle>:
static void CMW_CAMERA_PwrDown(void);
static int32_t CMW_CAMERA_SetPipe(DCMIPP_HandleTypeDef *hdcmipp, uint32_t pipe, CMW_DCMIPP_Conf_t *p_conf, uint32_t *pitch);
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
340179ec:	b480      	push	{r7}
340179ee:	af00      	add	r7, sp, #0
    return &hcamera_dcmipp;
340179f0:	4b02      	ldr	r3, [pc, #8]	@ (340179fc <CMW_CAMERA_GetDCMIPPHandle+0x10>)
}
340179f2:	4618      	mov	r0, r3
340179f4:	46bd      	mov	sp, r7
340179f6:	f85d 7b04 	ldr.w	r7, [sp], #4
340179fa:	4770      	bx	lr
340179fc:	3401f5d0 	.word	0x3401f5d0

34017a00 <CMW_CAMERA_PIPE_VsyncEventCallback>:
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
{
34017a00:	b480      	push	{r7}
34017a02:	b083      	sub	sp, #12
34017a04:	af00      	add	r7, sp, #0
34017a06:	6078      	str	r0, [r7, #4]
  UNUSED(pipe);

  return HAL_OK;
34017a08:	2300      	movs	r3, #0
}
34017a0a:	4618      	mov	r0, r3
34017a0c:	370c      	adds	r7, #12
34017a0e:	46bd      	mov	sp, r7
34017a10:	f85d 7b04 	ldr.w	r7, [sp], #4
34017a14:	4770      	bx	lr

34017a16 <CMW_CAMERA_PIPE_FrameEventCallback>:
 * @brief  Frame Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
34017a16:	b480      	push	{r7}
34017a18:	b083      	sub	sp, #12
34017a1a:	af00      	add	r7, sp, #0
34017a1c:	6078      	str	r0, [r7, #4]
  UNUSED(pipe);

  return HAL_OK;
34017a1e:	2300      	movs	r3, #0
}
34017a20:	4618      	mov	r0, r3
34017a22:	370c      	adds	r7, #12
34017a24:	46bd      	mov	sp, r7
34017a26:	f85d 7b04 	ldr.w	r7, [sp], #4
34017a2a:	4770      	bx	lr

34017a2c <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34017a2c:	b580      	push	{r7, lr}
34017a2e:	b082      	sub	sp, #8
34017a30:	af00      	add	r7, sp, #0
34017a32:	6078      	str	r0, [r7, #4]
34017a34:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
34017a36:	4b08      	ldr	r3, [pc, #32]	@ (34017a58 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>)
34017a38:	691b      	ldr	r3, [r3, #16]
34017a3a:	2b00      	cmp	r3, #0
34017a3c:	d004      	beq.n	34017a48 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
34017a3e:	4b06      	ldr	r3, [pc, #24]	@ (34017a58 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>)
34017a40:	691b      	ldr	r3, [r3, #16]
34017a42:	6839      	ldr	r1, [r7, #0]
34017a44:	4805      	ldr	r0, [pc, #20]	@ (34017a5c <HAL_DCMIPP_PIPE_VsyncEventCallback+0x30>)
34017a46:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
34017a48:	6838      	ldr	r0, [r7, #0]
34017a4a:	f7ff ffd9 	bl	34017a00 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
34017a4e:	bf00      	nop
34017a50:	3708      	adds	r7, #8
34017a52:	46bd      	mov	sp, r7
34017a54:	bd80      	pop	{r7, pc}
34017a56:	bf00      	nop
34017a58:	3401f5dc 	.word	0x3401f5dc
34017a5c:	3401f644 	.word	0x3401f644

34017a60 <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34017a60:	b580      	push	{r7, lr}
34017a62:	b082      	sub	sp, #8
34017a64:	af00      	add	r7, sp, #0
34017a66:	6078      	str	r0, [r7, #4]
34017a68:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
34017a6a:	4b08      	ldr	r3, [pc, #32]	@ (34017a8c <HAL_DCMIPP_PIPE_FrameEventCallback+0x2c>)
34017a6c:	695b      	ldr	r3, [r3, #20]
34017a6e:	2b00      	cmp	r3, #0
34017a70:	d004      	beq.n	34017a7c <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
34017a72:	4b06      	ldr	r3, [pc, #24]	@ (34017a8c <HAL_DCMIPP_PIPE_FrameEventCallback+0x2c>)
34017a74:	695b      	ldr	r3, [r3, #20]
34017a76:	6839      	ldr	r1, [r7, #0]
34017a78:	4805      	ldr	r0, [pc, #20]	@ (34017a90 <HAL_DCMIPP_PIPE_FrameEventCallback+0x30>)
34017a7a:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
34017a7c:	6838      	ldr	r0, [r7, #0]
34017a7e:	f7ff ffca 	bl	34017a16 <CMW_CAMERA_PIPE_FrameEventCallback>
}
34017a82:	bf00      	nop
34017a84:	3708      	adds	r7, #8
34017a86:	46bd      	mov	sp, r7
34017a88:	bd80      	pop	{r7, pc}
34017a8a:	bf00      	nop
34017a8c:	3401f5dc 	.word	0x3401f5dc
34017a90:	3401f644 	.word	0x3401f644

34017a94 <DMA2D_IRQHandler>:
                                   ctx->layers[0].size.height);
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
34017a94:	b580      	push	{r7, lr}
34017a96:	af00      	add	r7, sp, #0
  HAL_DMA2D_IRQHandler(dma2d_current);
34017a98:	4b03      	ldr	r3, [pc, #12]	@ (34017aa8 <DMA2D_IRQHandler+0x14>)
34017a9a:	681b      	ldr	r3, [r3, #0]
34017a9c:	4618      	mov	r0, r3
34017a9e:	f7ed fca8 	bl	340053f2 <HAL_DMA2D_IRQHandler>
}
34017aa2:	bf00      	nop
34017aa4:	bd80      	pop	{r7, pc}
34017aa6:	bf00      	nop
34017aa8:	3401f788 	.word	0x3401f788

34017aac <spi_transfert_data_deinit>:
  ctx->len = w * h * 2;
  LCD_CS_LOW();
}

static void spi_transfert_data_deinit(struct scrl_spi_ctx *ctx)
{
34017aac:	b480      	push	{r7}
34017aae:	b083      	sub	sp, #12
34017ab0:	af00      	add	r7, sp, #0
34017ab2:	6078      	str	r0, [r7, #4]
  LCD_CS_HIGH();
34017ab4:	4b04      	ldr	r3, [pc, #16]	@ (34017ac8 <spi_transfert_data_deinit+0x1c>)
34017ab6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34017aba:	619a      	str	r2, [r3, #24]
}
34017abc:	bf00      	nop
34017abe:	370c      	adds	r7, #12
34017ac0:	46bd      	mov	sp, r7
34017ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
34017ac6:	4770      	bx	lr
34017ac8:	56020c00 	.word	0x56020c00

34017acc <spi_transfert_data_chunck_start>:

static void spi_transfert_data_chunck_start(struct scrl_spi_ctx *ctx)
{
34017acc:	b580      	push	{r7, lr}
34017ace:	b084      	sub	sp, #16
34017ad0:	af00      	add	r7, sp, #0
34017ad2:	6078      	str	r0, [r7, #4]
  uint16_t size = MIN(ctx->len, 63 * 1024);
34017ad4:	687b      	ldr	r3, [r7, #4]
34017ad6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34017ada:	f5b3 4f7c 	cmp.w	r3, #64512	@ 0xfc00
34017ade:	bfa8      	it	ge
34017ae0:	f44f 437c 	movge.w	r3, #64512	@ 0xfc00
34017ae4:	81fb      	strh	r3, [r7, #14]
  int ret;

  ret = HAL_SPI_Transmit_DMA(&hspi, ctx->data, size);
34017ae6:	687b      	ldr	r3, [r7, #4]
34017ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34017aec:	89fa      	ldrh	r2, [r7, #14]
34017aee:	4619      	mov	r1, r3
34017af0:	4810      	ldr	r0, [pc, #64]	@ (34017b34 <spi_transfert_data_chunck_start+0x68>)
34017af2:	f7fd f893 	bl	34014c1c <HAL_SPI_Transmit_DMA>
34017af6:	4603      	mov	r3, r0
34017af8:	60bb      	str	r3, [r7, #8]
  assert(ret == HAL_OK);
34017afa:	68bb      	ldr	r3, [r7, #8]
34017afc:	2b00      	cmp	r3, #0
34017afe:	d005      	beq.n	34017b0c <spi_transfert_data_chunck_start+0x40>
34017b00:	4b0d      	ldr	r3, [pc, #52]	@ (34017b38 <spi_transfert_data_chunck_start+0x6c>)
34017b02:	4a0e      	ldr	r2, [pc, #56]	@ (34017b3c <spi_transfert_data_chunck_start+0x70>)
34017b04:	219e      	movs	r1, #158	@ 0x9e
34017b06:	480e      	ldr	r0, [pc, #56]	@ (34017b40 <spi_transfert_data_chunck_start+0x74>)
34017b08:	f001 ffdc 	bl	34019ac4 <__assert_func>

  ctx->len -= size;
34017b0c:	687b      	ldr	r3, [r7, #4]
34017b0e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34017b12:	89fb      	ldrh	r3, [r7, #14]
34017b14:	1ad2      	subs	r2, r2, r3
34017b16:	687b      	ldr	r3, [r7, #4]
34017b18:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ctx->data += size;
34017b1c:	687b      	ldr	r3, [r7, #4]
34017b1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34017b22:	89fb      	ldrh	r3, [r7, #14]
34017b24:	441a      	add	r2, r3
34017b26:	687b      	ldr	r3, [r7, #4]
34017b28:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
34017b2c:	bf00      	nop
34017b2e:	3710      	adds	r7, #16
34017b30:	46bd      	mov	sp, r7
34017b32:	bd80      	pop	{r7, pc}
34017b34:	3401f844 	.word	0x3401f844
34017b38:	3401d188 	.word	0x3401d188
34017b3c:	3401e528 	.word	0x3401e528
34017b40:	3401d198 	.word	0x3401d198

34017b44 <HAL_SPI_TxCpltCallback>:
  ret = xSemaphoreGive(ctx->dma_sem);
  assert(ret == pdTRUE);
}
#else
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
34017b44:	b580      	push	{r7, lr}
34017b46:	b084      	sub	sp, #16
34017b48:	af00      	add	r7, sp, #0
34017b4a:	6078      	str	r0, [r7, #4]
  struct scrl_spi_ctx *ctx = &scrl_ctx;
34017b4c:	4b0a      	ldr	r3, [pc, #40]	@ (34017b78 <HAL_SPI_TxCpltCallback+0x34>)
34017b4e:	60fb      	str	r3, [r7, #12]

  if (ctx->len) {
34017b50:	68fb      	ldr	r3, [r7, #12]
34017b52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34017b56:	2b00      	cmp	r3, #0
34017b58:	d003      	beq.n	34017b62 <HAL_SPI_TxCpltCallback+0x1e>
    spi_transfert_data_chunck_start(ctx);
34017b5a:	68f8      	ldr	r0, [r7, #12]
34017b5c:	f7ff ffb6 	bl	34017acc <spi_transfert_data_chunck_start>
  } else {
    spi_transfert_data_deinit(ctx);
    ctx->is_screen_ready_to_update = 1;
  }
}
34017b60:	e006      	b.n	34017b70 <HAL_SPI_TxCpltCallback+0x2c>
    spi_transfert_data_deinit(ctx);
34017b62:	68f8      	ldr	r0, [r7, #12]
34017b64:	f7ff ffa2 	bl	34017aac <spi_transfert_data_deinit>
    ctx->is_screen_ready_to_update = 1;
34017b68:	68fb      	ldr	r3, [r7, #12]
34017b6a:	2201      	movs	r2, #1
34017b6c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
34017b70:	bf00      	nop
34017b72:	3710      	adds	r7, #16
34017b74:	46bd      	mov	sp, r7
34017b76:	bd80      	pop	{r7, pc}
34017b78:	3401f78c 	.word	0x3401f78c

34017b7c <HAL_SPI_ErrorCallback>:
#endif

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
34017b7c:	b580      	push	{r7, lr}
34017b7e:	b082      	sub	sp, #8
34017b80:	af00      	add	r7, sp, #0
34017b82:	6078      	str	r0, [r7, #4]
  assert(0);
34017b84:	4b03      	ldr	r3, [pc, #12]	@ (34017b94 <HAL_SPI_ErrorCallback+0x18>)
34017b86:	4a04      	ldr	r2, [pc, #16]	@ (34017b98 <HAL_SPI_ErrorCallback+0x1c>)
34017b88:	f44f 7123 	mov.w	r1, #652	@ 0x28c
34017b8c:	4803      	ldr	r0, [pc, #12]	@ (34017b9c <HAL_SPI_ErrorCallback+0x20>)
34017b8e:	f001 ff99 	bl	34019ac4 <__assert_func>
34017b92:	bf00      	nop
34017b94:	3401d21c 	.word	0x3401d21c
34017b98:	3401e548 	.word	0x3401e548
34017b9c:	3401d198 	.word	0x3401d198

34017ba0 <SPI5_IRQHandler>:
}

void SPI5_IRQHandler(void)
{
34017ba0:	b580      	push	{r7, lr}
34017ba2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
34017ba4:	4802      	ldr	r0, [pc, #8]	@ (34017bb0 <SPI5_IRQHandler+0x10>)
34017ba6:	f7fd fa17 	bl	34014fd8 <HAL_SPI_IRQHandler>
}
34017baa:	bf00      	nop
34017bac:	bd80      	pop	{r7, pc}
34017bae:	bf00      	nop
34017bb0:	3401f844 	.word	0x3401f844

34017bb4 <HPDMA1_Channel12_IRQHandler>:

void HPDMA1_Channel12_IRQHandler(void)
{
34017bb4:	b580      	push	{r7, lr}
34017bb6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma);
34017bb8:	4802      	ldr	r0, [pc, #8]	@ (34017bc4 <HPDMA1_Channel12_IRQHandler+0x10>)
34017bba:	f7ed fa80 	bl	340050be <HAL_DMA_IRQHandler>
}
34017bbe:	bf00      	nop
34017bc0:	bd80      	pop	{r7, pc}
34017bc2:	bf00      	nop
34017bc4:	3401f8d4 	.word	0x3401f8d4

34017bc8 <ll_aton_static_checks>:
 *  Used to exit from LL_Streng_Wait() in case epoch locks
 * @{
 */

static inline void ll_aton_static_checks(void)
{
34017bc8:	b580      	push	{r7, lr}
34017bca:	b082      	sub	sp, #8
34017bcc:	af02      	add	r7, sp, #8
  static char done = 0;

  if (done != 0)
34017bce:	4b27      	ldr	r3, [pc, #156]	@ (34017c6c <ll_aton_static_checks+0xa4>)
34017bd0:	781b      	ldrb	r3, [r3, #0]
34017bd2:	2b00      	cmp	r3, #0
34017bd4:	d146      	bne.n	34017c64 <ll_aton_static_checks+0x9c>
    return;
  done = 1;
34017bd6:	4b25      	ldr	r3, [pc, #148]	@ (34017c6c <ll_aton_static_checks+0xa4>)
34017bd8:	2201      	movs	r2, #1
34017bda:	701a      	strb	r2, [r3, #0]
  LL_ATON_ASSERT(ATONN_CONST_SRCPORT(S, J, U, I, P) == __atonn_getSrcPortID(S, J, U, I, P))
#define ASSERT_ATONN_DSTPORT(S, J, U, I, P)                                                                            \
  LL_ATON_ASSERT(ATONN_CONST_DSTPORT(S, J, U, I, P) == __atonn_getDstPortID(S, J, U, I, P))

#if ATON_STRENG_NUM > 1
  ASSERT_ATONN_SRCPORT(STRSWITCH, 0, STRENG, 1, 0);
34017bdc:	2300      	movs	r3, #0
34017bde:	9300      	str	r3, [sp, #0]
34017be0:	2301      	movs	r3, #1
34017be2:	2200      	movs	r2, #0
34017be4:	2100      	movs	r1, #0
34017be6:	2000      	movs	r0, #0
34017be8:	f000 fc5a 	bl	340184a0 <__atonn_getSrcPortID>
34017bec:	4603      	mov	r3, r0
34017bee:	2b01      	cmp	r3, #1
34017bf0:	d005      	beq.n	34017bfe <ll_aton_static_checks+0x36>
34017bf2:	4b1f      	ldr	r3, [pc, #124]	@ (34017c70 <ll_aton_static_checks+0xa8>)
34017bf4:	4a1f      	ldr	r2, [pc, #124]	@ (34017c74 <ll_aton_static_checks+0xac>)
34017bf6:	214c      	movs	r1, #76	@ 0x4c
34017bf8:	481f      	ldr	r0, [pc, #124]	@ (34017c78 <ll_aton_static_checks+0xb0>)
34017bfa:	f001 ff63 	bl	34019ac4 <__assert_func>
  ASSERT_ATONN_DSTPORT(STRSWITCH, 0, STRENG, 1, 0);
34017bfe:	2300      	movs	r3, #0
34017c00:	9300      	str	r3, [sp, #0]
34017c02:	2301      	movs	r3, #1
34017c04:	2200      	movs	r2, #0
34017c06:	2100      	movs	r1, #0
34017c08:	2000      	movs	r0, #0
34017c0a:	f000 fd39 	bl	34018680 <__atonn_getDstPortID>
34017c0e:	4603      	mov	r3, r0
34017c10:	2b0c      	cmp	r3, #12
34017c12:	d005      	beq.n	34017c20 <ll_aton_static_checks+0x58>
34017c14:	4b19      	ldr	r3, [pc, #100]	@ (34017c7c <ll_aton_static_checks+0xb4>)
34017c16:	4a17      	ldr	r2, [pc, #92]	@ (34017c74 <ll_aton_static_checks+0xac>)
34017c18:	214d      	movs	r1, #77	@ 0x4d
34017c1a:	4817      	ldr	r0, [pc, #92]	@ (34017c78 <ll_aton_static_checks+0xb0>)
34017c1c:	f001 ff52 	bl	34019ac4 <__assert_func>
#endif
#if ATON_STRENG_NUM > 2
  ASSERT_ATONN_SRCPORT(STRSWITCH, 0, STRENG, 2, 0);
34017c20:	2300      	movs	r3, #0
34017c22:	9300      	str	r3, [sp, #0]
34017c24:	2302      	movs	r3, #2
34017c26:	2200      	movs	r2, #0
34017c28:	2100      	movs	r1, #0
34017c2a:	2000      	movs	r0, #0
34017c2c:	f000 fc38 	bl	340184a0 <__atonn_getSrcPortID>
34017c30:	4603      	mov	r3, r0
34017c32:	2b02      	cmp	r3, #2
34017c34:	d005      	beq.n	34017c42 <ll_aton_static_checks+0x7a>
34017c36:	4b12      	ldr	r3, [pc, #72]	@ (34017c80 <ll_aton_static_checks+0xb8>)
34017c38:	4a0e      	ldr	r2, [pc, #56]	@ (34017c74 <ll_aton_static_checks+0xac>)
34017c3a:	2150      	movs	r1, #80	@ 0x50
34017c3c:	480e      	ldr	r0, [pc, #56]	@ (34017c78 <ll_aton_static_checks+0xb0>)
34017c3e:	f001 ff41 	bl	34019ac4 <__assert_func>
  ASSERT_ATONN_DSTPORT(STRSWITCH, 0, STRENG, 2, 0);
34017c42:	2300      	movs	r3, #0
34017c44:	9300      	str	r3, [sp, #0]
34017c46:	2302      	movs	r3, #2
34017c48:	2200      	movs	r2, #0
34017c4a:	2100      	movs	r1, #0
34017c4c:	2000      	movs	r0, #0
34017c4e:	f000 fd17 	bl	34018680 <__atonn_getDstPortID>
34017c52:	4603      	mov	r3, r0
34017c54:	2b10      	cmp	r3, #16
34017c56:	d006      	beq.n	34017c66 <ll_aton_static_checks+0x9e>
34017c58:	4b0a      	ldr	r3, [pc, #40]	@ (34017c84 <ll_aton_static_checks+0xbc>)
34017c5a:	4a06      	ldr	r2, [pc, #24]	@ (34017c74 <ll_aton_static_checks+0xac>)
34017c5c:	2151      	movs	r1, #81	@ 0x51
34017c5e:	4806      	ldr	r0, [pc, #24]	@ (34017c78 <ll_aton_static_checks+0xb0>)
34017c60:	f001 ff30 	bl	34019ac4 <__assert_func>
    return;
34017c64:	bf00      	nop

#endif // (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)

#undef ASSERT_ATONN_SRCPORT
#undef ASSERT_ATONN_DSTPORT
}
34017c66:	46bd      	mov	sp, r7
34017c68:	bd80      	pop	{r7, pc}
34017c6a:	bf00      	nop
34017c6c:	3401f94c 	.word	0x3401f94c
34017c70:	3401d22c 	.word	0x3401d22c
34017c74:	3401e570 	.word	0x3401e570
34017c78:	3401d268 	.word	0x3401d268
34017c7c:	3401d2f4 	.word	0x3401d2f4
34017c80:	3401d340 	.word	0x3401d340
34017c84:	3401d37c 	.word	0x3401d37c

34017c88 <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
34017c88:	b590      	push	{r4, r7, lr}
34017c8a:	b08b      	sub	sp, #44	@ 0x2c
34017c8c:	af08      	add	r7, sp, #32
  uint32_t t;
  int i;

  ll_aton_static_checks();
34017c8e:	f7ff ff9b 	bl	34017bc8 <ll_aton_static_checks>

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
34017c92:	4b98      	ldr	r3, [pc, #608]	@ (34017ef4 <LL_ATON_Init+0x26c>)
34017c94:	681b      	ldr	r3, [r3, #0]
34017c96:	603b      	str	r3, [r7, #0]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
34017c98:	683b      	ldr	r3, [r7, #0]
34017c9a:	f043 0302 	orr.w	r3, r3, #2
34017c9e:	603b      	str	r3, [r7, #0]
  ATON_CLKCTRL_CTRL_SET(0, t);
34017ca0:	4a94      	ldr	r2, [pc, #592]	@ (34017ef4 <LL_ATON_Init+0x26c>)
34017ca2:	683b      	ldr	r3, [r7, #0]
34017ca4:	6013      	str	r3, [r2, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
34017ca6:	4b93      	ldr	r3, [pc, #588]	@ (34017ef4 <LL_ATON_Init+0x26c>)
34017ca8:	2201      	movs	r2, #1
34017caa:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
34017cac:	4b92      	ldr	r3, [pc, #584]	@ (34017ef8 <LL_ATON_Init+0x270>)
34017cae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34017cb2:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
34017cb4:	4b91      	ldr	r3, [pc, #580]	@ (34017efc <LL_ATON_Init+0x274>)
34017cb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34017cba:	601a      	str	r2, [r3, #0]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
34017cbc:	4b90      	ldr	r3, [pc, #576]	@ (34017f00 <LL_ATON_Init+0x278>)
34017cbe:	2200      	movs	r2, #0
34017cc0:	601a      	str	r2, [r3, #0]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
34017cc2:	4b90      	ldr	r3, [pc, #576]	@ (34017f04 <LL_ATON_Init+0x27c>)
34017cc4:	681b      	ldr	r3, [r3, #0]
34017cc6:	603b      	str	r3, [r7, #0]
34017cc8:	683b      	ldr	r3, [r7, #0]
34017cca:	2b00      	cmp	r3, #0
34017ccc:	d0f9      	beq.n	34017cc2 <LL_ATON_Init+0x3a>
34017cce:	683b      	ldr	r3, [r7, #0]
34017cd0:	b2db      	uxtb	r3, r3
34017cd2:	2b01      	cmp	r3, #1
34017cd4:	d10b      	bne.n	34017cee <LL_ATON_Init+0x66>
34017cd6:	683b      	ldr	r3, [r7, #0]
34017cd8:	0b1b      	lsrs	r3, r3, #12
34017cda:	f003 030f 	and.w	r3, r3, #15
34017cde:	2b05      	cmp	r3, #5
34017ce0:	d105      	bne.n	34017cee <LL_ATON_Init+0x66>
34017ce2:	683b      	ldr	r3, [r7, #0]
34017ce4:	0a1b      	lsrs	r3, r3, #8
34017ce6:	f003 030f 	and.w	r3, r3, #15
34017cea:	2b00      	cmp	r3, #0
34017cec:	d02f      	beq.n	34017d4e <LL_ATON_Init+0xc6>
34017cee:	f003 f867 	bl	3401adc0 <__errno>
34017cf2:	4603      	mov	r3, r0
34017cf4:	681b      	ldr	r3, [r3, #0]
34017cf6:	2b00      	cmp	r3, #0
34017cf8:	d008      	beq.n	34017d0c <LL_ATON_Init+0x84>
34017cfa:	f003 f861 	bl	3401adc0 <__errno>
34017cfe:	4603      	mov	r3, r0
34017d00:	681b      	ldr	r3, [r3, #0]
34017d02:	4618      	mov	r0, r3
34017d04:	f002 fff6 	bl	3401acf4 <strerror>
34017d08:	4603      	mov	r3, r0
34017d0a:	e000      	b.n	34017d0e <LL_ATON_Init+0x86>
34017d0c:	4b7e      	ldr	r3, [pc, #504]	@ (34017f08 <LL_ATON_Init+0x280>)
34017d0e:	683a      	ldr	r2, [r7, #0]
34017d10:	b2d2      	uxtb	r2, r2
34017d12:	6839      	ldr	r1, [r7, #0]
34017d14:	0b09      	lsrs	r1, r1, #12
34017d16:	f001 010f 	and.w	r1, r1, #15
34017d1a:	6838      	ldr	r0, [r7, #0]
34017d1c:	0a00      	lsrs	r0, r0, #8
34017d1e:	f000 000f 	and.w	r0, r0, #15
34017d22:	2400      	movs	r4, #0
34017d24:	9406      	str	r4, [sp, #24]
34017d26:	2405      	movs	r4, #5
34017d28:	9405      	str	r4, [sp, #20]
34017d2a:	2401      	movs	r4, #1
34017d2c:	9404      	str	r4, [sp, #16]
34017d2e:	9003      	str	r0, [sp, #12]
34017d30:	9102      	str	r1, [sp, #8]
34017d32:	9201      	str	r2, [sp, #4]
34017d34:	4a75      	ldr	r2, [pc, #468]	@ (34017f0c <LL_ATON_Init+0x284>)
34017d36:	9200      	str	r2, [sp, #0]
34017d38:	22c7      	movs	r2, #199	@ 0xc7
34017d3a:	4975      	ldr	r1, [pc, #468]	@ (34017f10 <LL_ATON_Init+0x288>)
34017d3c:	4875      	ldr	r0, [pc, #468]	@ (34017f14 <LL_ATON_Init+0x28c>)
34017d3e:	f002 fca3 	bl	3401a688 <iprintf>
34017d42:	4b75      	ldr	r3, [pc, #468]	@ (34017f18 <LL_ATON_Init+0x290>)
34017d44:	4a75      	ldr	r2, [pc, #468]	@ (34017f1c <LL_ATON_Init+0x294>)
34017d46:	21c7      	movs	r1, #199	@ 0xc7
34017d48:	4871      	ldr	r0, [pc, #452]	@ (34017f10 <LL_ATON_Init+0x288>)
34017d4a:	f001 febb 	bl	34019ac4 <__assert_func>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
34017d4e:	4b74      	ldr	r3, [pc, #464]	@ (34017f20 <LL_ATON_Init+0x298>)
34017d50:	681b      	ldr	r3, [r3, #0]
34017d52:	603b      	str	r3, [r7, #0]
34017d54:	683b      	ldr	r3, [r7, #0]
34017d56:	2b00      	cmp	r3, #0
34017d58:	d0f9      	beq.n	34017d4e <LL_ATON_Init+0xc6>
34017d5a:	683b      	ldr	r3, [r7, #0]
34017d5c:	b2db      	uxtb	r3, r3
34017d5e:	2b17      	cmp	r3, #23
34017d60:	d10b      	bne.n	34017d7a <LL_ATON_Init+0xf2>
34017d62:	683b      	ldr	r3, [r7, #0]
34017d64:	0b1b      	lsrs	r3, r3, #12
34017d66:	f003 030f 	and.w	r3, r3, #15
34017d6a:	2b05      	cmp	r3, #5
34017d6c:	d105      	bne.n	34017d7a <LL_ATON_Init+0xf2>
34017d6e:	683b      	ldr	r3, [r7, #0]
34017d70:	0a1b      	lsrs	r3, r3, #8
34017d72:	f003 030f 	and.w	r3, r3, #15
34017d76:	2b01      	cmp	r3, #1
34017d78:	d02f      	beq.n	34017dda <LL_ATON_Init+0x152>
34017d7a:	f003 f821 	bl	3401adc0 <__errno>
34017d7e:	4603      	mov	r3, r0
34017d80:	681b      	ldr	r3, [r3, #0]
34017d82:	2b00      	cmp	r3, #0
34017d84:	d008      	beq.n	34017d98 <LL_ATON_Init+0x110>
34017d86:	f003 f81b 	bl	3401adc0 <__errno>
34017d8a:	4603      	mov	r3, r0
34017d8c:	681b      	ldr	r3, [r3, #0]
34017d8e:	4618      	mov	r0, r3
34017d90:	f002 ffb0 	bl	3401acf4 <strerror>
34017d94:	4603      	mov	r3, r0
34017d96:	e000      	b.n	34017d9a <LL_ATON_Init+0x112>
34017d98:	4b5b      	ldr	r3, [pc, #364]	@ (34017f08 <LL_ATON_Init+0x280>)
34017d9a:	683a      	ldr	r2, [r7, #0]
34017d9c:	b2d2      	uxtb	r2, r2
34017d9e:	6839      	ldr	r1, [r7, #0]
34017da0:	0b09      	lsrs	r1, r1, #12
34017da2:	f001 010f 	and.w	r1, r1, #15
34017da6:	6838      	ldr	r0, [r7, #0]
34017da8:	0a00      	lsrs	r0, r0, #8
34017daa:	f000 000f 	and.w	r0, r0, #15
34017dae:	2401      	movs	r4, #1
34017db0:	9406      	str	r4, [sp, #24]
34017db2:	2405      	movs	r4, #5
34017db4:	9405      	str	r4, [sp, #20]
34017db6:	2417      	movs	r4, #23
34017db8:	9404      	str	r4, [sp, #16]
34017dba:	9003      	str	r0, [sp, #12]
34017dbc:	9102      	str	r1, [sp, #8]
34017dbe:	9201      	str	r2, [sp, #4]
34017dc0:	4a58      	ldr	r2, [pc, #352]	@ (34017f24 <LL_ATON_Init+0x29c>)
34017dc2:	9200      	str	r2, [sp, #0]
34017dc4:	22ca      	movs	r2, #202	@ 0xca
34017dc6:	4952      	ldr	r1, [pc, #328]	@ (34017f10 <LL_ATON_Init+0x288>)
34017dc8:	4852      	ldr	r0, [pc, #328]	@ (34017f14 <LL_ATON_Init+0x28c>)
34017dca:	f002 fc5d 	bl	3401a688 <iprintf>
34017dce:	4b52      	ldr	r3, [pc, #328]	@ (34017f18 <LL_ATON_Init+0x290>)
34017dd0:	4a52      	ldr	r2, [pc, #328]	@ (34017f1c <LL_ATON_Init+0x294>)
34017dd2:	21ca      	movs	r1, #202	@ 0xca
34017dd4:	484e      	ldr	r0, [pc, #312]	@ (34017f10 <LL_ATON_Init+0x288>)
34017dd6:	f001 fe75 	bl	34019ac4 <__assert_func>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
34017dda:	4b53      	ldr	r3, [pc, #332]	@ (34017f28 <LL_ATON_Init+0x2a0>)
34017ddc:	681b      	ldr	r3, [r3, #0]
34017dde:	603b      	str	r3, [r7, #0]
34017de0:	683b      	ldr	r3, [r7, #0]
34017de2:	2b00      	cmp	r3, #0
34017de4:	d0f9      	beq.n	34017dda <LL_ATON_Init+0x152>
34017de6:	683b      	ldr	r3, [r7, #0]
34017de8:	b2db      	uxtb	r3, r3
34017dea:	2b1c      	cmp	r3, #28
34017dec:	d10b      	bne.n	34017e06 <LL_ATON_Init+0x17e>
34017dee:	683b      	ldr	r3, [r7, #0]
34017df0:	0b1b      	lsrs	r3, r3, #12
34017df2:	f003 030f 	and.w	r3, r3, #15
34017df6:	2b01      	cmp	r3, #1
34017df8:	d105      	bne.n	34017e06 <LL_ATON_Init+0x17e>
34017dfa:	683b      	ldr	r3, [r7, #0]
34017dfc:	0a1b      	lsrs	r3, r3, #8
34017dfe:	f003 030f 	and.w	r3, r3, #15
34017e02:	2b01      	cmp	r3, #1
34017e04:	d02f      	beq.n	34017e66 <LL_ATON_Init+0x1de>
34017e06:	f002 ffdb 	bl	3401adc0 <__errno>
34017e0a:	4603      	mov	r3, r0
34017e0c:	681b      	ldr	r3, [r3, #0]
34017e0e:	2b00      	cmp	r3, #0
34017e10:	d008      	beq.n	34017e24 <LL_ATON_Init+0x19c>
34017e12:	f002 ffd5 	bl	3401adc0 <__errno>
34017e16:	4603      	mov	r3, r0
34017e18:	681b      	ldr	r3, [r3, #0]
34017e1a:	4618      	mov	r0, r3
34017e1c:	f002 ff6a 	bl	3401acf4 <strerror>
34017e20:	4603      	mov	r3, r0
34017e22:	e000      	b.n	34017e26 <LL_ATON_Init+0x19e>
34017e24:	4b38      	ldr	r3, [pc, #224]	@ (34017f08 <LL_ATON_Init+0x280>)
34017e26:	683a      	ldr	r2, [r7, #0]
34017e28:	b2d2      	uxtb	r2, r2
34017e2a:	6839      	ldr	r1, [r7, #0]
34017e2c:	0b09      	lsrs	r1, r1, #12
34017e2e:	f001 010f 	and.w	r1, r1, #15
34017e32:	6838      	ldr	r0, [r7, #0]
34017e34:	0a00      	lsrs	r0, r0, #8
34017e36:	f000 000f 	and.w	r0, r0, #15
34017e3a:	2401      	movs	r4, #1
34017e3c:	9406      	str	r4, [sp, #24]
34017e3e:	2401      	movs	r4, #1
34017e40:	9405      	str	r4, [sp, #20]
34017e42:	241c      	movs	r4, #28
34017e44:	9404      	str	r4, [sp, #16]
34017e46:	9003      	str	r0, [sp, #12]
34017e48:	9102      	str	r1, [sp, #8]
34017e4a:	9201      	str	r2, [sp, #4]
34017e4c:	4a37      	ldr	r2, [pc, #220]	@ (34017f2c <LL_ATON_Init+0x2a4>)
34017e4e:	9200      	str	r2, [sp, #0]
34017e50:	22ce      	movs	r2, #206	@ 0xce
34017e52:	492f      	ldr	r1, [pc, #188]	@ (34017f10 <LL_ATON_Init+0x288>)
34017e54:	482f      	ldr	r0, [pc, #188]	@ (34017f14 <LL_ATON_Init+0x28c>)
34017e56:	f002 fc17 	bl	3401a688 <iprintf>
34017e5a:	4b2f      	ldr	r3, [pc, #188]	@ (34017f18 <LL_ATON_Init+0x290>)
34017e5c:	4a2f      	ldr	r2, [pc, #188]	@ (34017f1c <LL_ATON_Init+0x294>)
34017e5e:	21ce      	movs	r1, #206	@ 0xce
34017e60:	482b      	ldr	r0, [pc, #172]	@ (34017f10 <LL_ATON_Init+0x288>)
34017e62:	f001 fe2f 	bl	34019ac4 <__assert_func>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
34017e66:	4b32      	ldr	r3, [pc, #200]	@ (34017f30 <LL_ATON_Init+0x2a8>)
34017e68:	681b      	ldr	r3, [r3, #0]
34017e6a:	603b      	str	r3, [r7, #0]
34017e6c:	683b      	ldr	r3, [r7, #0]
34017e6e:	2b00      	cmp	r3, #0
34017e70:	d0f9      	beq.n	34017e66 <LL_ATON_Init+0x1de>
34017e72:	683b      	ldr	r3, [r7, #0]
34017e74:	b2db      	uxtb	r3, r3
34017e76:	2b1a      	cmp	r3, #26
34017e78:	d10b      	bne.n	34017e92 <LL_ATON_Init+0x20a>
34017e7a:	683b      	ldr	r3, [r7, #0]
34017e7c:	0b1b      	lsrs	r3, r3, #12
34017e7e:	f003 030f 	and.w	r3, r3, #15
34017e82:	2b01      	cmp	r3, #1
34017e84:	d105      	bne.n	34017e92 <LL_ATON_Init+0x20a>
34017e86:	683b      	ldr	r3, [r7, #0]
34017e88:	0a1b      	lsrs	r3, r3, #8
34017e8a:	f003 030f 	and.w	r3, r3, #15
34017e8e:	2b00      	cmp	r3, #0
34017e90:	d052      	beq.n	34017f38 <LL_ATON_Init+0x2b0>
34017e92:	f002 ff95 	bl	3401adc0 <__errno>
34017e96:	4603      	mov	r3, r0
34017e98:	681b      	ldr	r3, [r3, #0]
34017e9a:	2b00      	cmp	r3, #0
34017e9c:	d008      	beq.n	34017eb0 <LL_ATON_Init+0x228>
34017e9e:	f002 ff8f 	bl	3401adc0 <__errno>
34017ea2:	4603      	mov	r3, r0
34017ea4:	681b      	ldr	r3, [r3, #0]
34017ea6:	4618      	mov	r0, r3
34017ea8:	f002 ff24 	bl	3401acf4 <strerror>
34017eac:	4603      	mov	r3, r0
34017eae:	e000      	b.n	34017eb2 <LL_ATON_Init+0x22a>
34017eb0:	4b15      	ldr	r3, [pc, #84]	@ (34017f08 <LL_ATON_Init+0x280>)
34017eb2:	683a      	ldr	r2, [r7, #0]
34017eb4:	b2d2      	uxtb	r2, r2
34017eb6:	6839      	ldr	r1, [r7, #0]
34017eb8:	0b09      	lsrs	r1, r1, #12
34017eba:	f001 010f 	and.w	r1, r1, #15
34017ebe:	6838      	ldr	r0, [r7, #0]
34017ec0:	0a00      	lsrs	r0, r0, #8
34017ec2:	f000 000f 	and.w	r0, r0, #15
34017ec6:	2400      	movs	r4, #0
34017ec8:	9406      	str	r4, [sp, #24]
34017eca:	2401      	movs	r4, #1
34017ecc:	9405      	str	r4, [sp, #20]
34017ece:	241a      	movs	r4, #26
34017ed0:	9404      	str	r4, [sp, #16]
34017ed2:	9003      	str	r0, [sp, #12]
34017ed4:	9102      	str	r1, [sp, #8]
34017ed6:	9201      	str	r2, [sp, #4]
34017ed8:	4a16      	ldr	r2, [pc, #88]	@ (34017f34 <LL_ATON_Init+0x2ac>)
34017eda:	9200      	str	r2, [sp, #0]
34017edc:	22d2      	movs	r2, #210	@ 0xd2
34017ede:	490c      	ldr	r1, [pc, #48]	@ (34017f10 <LL_ATON_Init+0x288>)
34017ee0:	480c      	ldr	r0, [pc, #48]	@ (34017f14 <LL_ATON_Init+0x28c>)
34017ee2:	f002 fbd1 	bl	3401a688 <iprintf>
34017ee6:	4b0c      	ldr	r3, [pc, #48]	@ (34017f18 <LL_ATON_Init+0x290>)
34017ee8:	4a0c      	ldr	r2, [pc, #48]	@ (34017f1c <LL_ATON_Init+0x294>)
34017eea:	21d2      	movs	r1, #210	@ 0xd2
34017eec:	4808      	ldr	r0, [pc, #32]	@ (34017f10 <LL_ATON_Init+0x288>)
34017eee:	f001 fde9 	bl	34019ac4 <__assert_func>
34017ef2:	bf00      	nop
34017ef4:	580e0000 	.word	0x580e0000
34017ef8:	580e0008 	.word	0x580e0008
34017efc:	580e000c 	.word	0x580e000c
34017f00:	580e0010 	.word	0x580e0010
34017f04:	580e5004 	.word	0x580e5004
34017f08:	3401d3c8 	.word	0x3401d3c8
34017f0c:	3401d434 	.word	0x3401d434
34017f10:	3401d268 	.word	0x3401d268
34017f14:	3401d3d0 	.word	0x3401d3d0
34017f18:	3401d43c 	.word	0x3401d43c
34017f1c:	3401e560 	.word	0x3401e560
34017f20:	580ef004 	.word	0x580ef004
34017f24:	3401d440 	.word	0x3401d440
34017f28:	580fb004 	.word	0x580fb004
34017f2c:	3401d448 	.word	0x3401d448
34017f30:	580f7004 	.word	0x580f7004
34017f34:	3401d450 	.word	0x3401d450
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
34017f38:	4b9e      	ldr	r3, [pc, #632]	@ (340181b4 <LL_ATON_Init+0x52c>)
34017f3a:	681b      	ldr	r3, [r3, #0]
34017f3c:	603b      	str	r3, [r7, #0]
34017f3e:	683b      	ldr	r3, [r7, #0]
34017f40:	2b00      	cmp	r3, #0
34017f42:	d0f9      	beq.n	34017f38 <LL_ATON_Init+0x2b0>
34017f44:	683b      	ldr	r3, [r7, #0]
34017f46:	b2db      	uxtb	r3, r3
34017f48:	2b1b      	cmp	r3, #27
34017f4a:	d10b      	bne.n	34017f64 <LL_ATON_Init+0x2dc>
34017f4c:	683b      	ldr	r3, [r7, #0]
34017f4e:	0b1b      	lsrs	r3, r3, #12
34017f50:	f003 030f 	and.w	r3, r3, #15
34017f54:	2b01      	cmp	r3, #1
34017f56:	d105      	bne.n	34017f64 <LL_ATON_Init+0x2dc>
34017f58:	683b      	ldr	r3, [r7, #0]
34017f5a:	0a1b      	lsrs	r3, r3, #8
34017f5c:	f003 030f 	and.w	r3, r3, #15
34017f60:	2b01      	cmp	r3, #1
34017f62:	d02f      	beq.n	34017fc4 <LL_ATON_Init+0x33c>
34017f64:	f002 ff2c 	bl	3401adc0 <__errno>
34017f68:	4603      	mov	r3, r0
34017f6a:	681b      	ldr	r3, [r3, #0]
34017f6c:	2b00      	cmp	r3, #0
34017f6e:	d008      	beq.n	34017f82 <LL_ATON_Init+0x2fa>
34017f70:	f002 ff26 	bl	3401adc0 <__errno>
34017f74:	4603      	mov	r3, r0
34017f76:	681b      	ldr	r3, [r3, #0]
34017f78:	4618      	mov	r0, r3
34017f7a:	f002 febb 	bl	3401acf4 <strerror>
34017f7e:	4603      	mov	r3, r0
34017f80:	e000      	b.n	34017f84 <LL_ATON_Init+0x2fc>
34017f82:	4b8d      	ldr	r3, [pc, #564]	@ (340181b8 <LL_ATON_Init+0x530>)
34017f84:	683a      	ldr	r2, [r7, #0]
34017f86:	b2d2      	uxtb	r2, r2
34017f88:	6839      	ldr	r1, [r7, #0]
34017f8a:	0b09      	lsrs	r1, r1, #12
34017f8c:	f001 010f 	and.w	r1, r1, #15
34017f90:	6838      	ldr	r0, [r7, #0]
34017f92:	0a00      	lsrs	r0, r0, #8
34017f94:	f000 000f 	and.w	r0, r0, #15
34017f98:	2401      	movs	r4, #1
34017f9a:	9406      	str	r4, [sp, #24]
34017f9c:	2401      	movs	r4, #1
34017f9e:	9405      	str	r4, [sp, #20]
34017fa0:	241b      	movs	r4, #27
34017fa2:	9404      	str	r4, [sp, #16]
34017fa4:	9003      	str	r0, [sp, #12]
34017fa6:	9102      	str	r1, [sp, #8]
34017fa8:	9201      	str	r2, [sp, #4]
34017faa:	4a84      	ldr	r2, [pc, #528]	@ (340181bc <LL_ATON_Init+0x534>)
34017fac:	9200      	str	r2, [sp, #0]
34017fae:	22d6      	movs	r2, #214	@ 0xd6
34017fb0:	4983      	ldr	r1, [pc, #524]	@ (340181c0 <LL_ATON_Init+0x538>)
34017fb2:	4884      	ldr	r0, [pc, #528]	@ (340181c4 <LL_ATON_Init+0x53c>)
34017fb4:	f002 fb68 	bl	3401a688 <iprintf>
34017fb8:	4b83      	ldr	r3, [pc, #524]	@ (340181c8 <LL_ATON_Init+0x540>)
34017fba:	4a84      	ldr	r2, [pc, #528]	@ (340181cc <LL_ATON_Init+0x544>)
34017fbc:	21d6      	movs	r1, #214	@ 0xd6
34017fbe:	4880      	ldr	r0, [pc, #512]	@ (340181c0 <LL_ATON_Init+0x538>)
34017fc0:	f001 fd80 	bl	34019ac4 <__assert_func>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
34017fc4:	4b82      	ldr	r3, [pc, #520]	@ (340181d0 <LL_ATON_Init+0x548>)
34017fc6:	681b      	ldr	r3, [r3, #0]
34017fc8:	603b      	str	r3, [r7, #0]
34017fca:	683b      	ldr	r3, [r7, #0]
34017fcc:	2b00      	cmp	r3, #0
34017fce:	d0f9      	beq.n	34017fc4 <LL_ATON_Init+0x33c>
34017fd0:	683b      	ldr	r3, [r7, #0]
34017fd2:	b2db      	uxtb	r3, r3
34017fd4:	2b19      	cmp	r3, #25
34017fd6:	d10b      	bne.n	34017ff0 <LL_ATON_Init+0x368>
34017fd8:	683b      	ldr	r3, [r7, #0]
34017fda:	0b1b      	lsrs	r3, r3, #12
34017fdc:	f003 030f 	and.w	r3, r3, #15
34017fe0:	2b01      	cmp	r3, #1
34017fe2:	d105      	bne.n	34017ff0 <LL_ATON_Init+0x368>
34017fe4:	683b      	ldr	r3, [r7, #0]
34017fe6:	0a1b      	lsrs	r3, r3, #8
34017fe8:	f003 030f 	and.w	r3, r3, #15
34017fec:	2b0a      	cmp	r3, #10
34017fee:	d02f      	beq.n	34018050 <LL_ATON_Init+0x3c8>
34017ff0:	f002 fee6 	bl	3401adc0 <__errno>
34017ff4:	4603      	mov	r3, r0
34017ff6:	681b      	ldr	r3, [r3, #0]
34017ff8:	2b00      	cmp	r3, #0
34017ffa:	d008      	beq.n	3401800e <LL_ATON_Init+0x386>
34017ffc:	f002 fee0 	bl	3401adc0 <__errno>
34018000:	4603      	mov	r3, r0
34018002:	681b      	ldr	r3, [r3, #0]
34018004:	4618      	mov	r0, r3
34018006:	f002 fe75 	bl	3401acf4 <strerror>
3401800a:	4603      	mov	r3, r0
3401800c:	e000      	b.n	34018010 <LL_ATON_Init+0x388>
3401800e:	4b6a      	ldr	r3, [pc, #424]	@ (340181b8 <LL_ATON_Init+0x530>)
34018010:	683a      	ldr	r2, [r7, #0]
34018012:	b2d2      	uxtb	r2, r2
34018014:	6839      	ldr	r1, [r7, #0]
34018016:	0b09      	lsrs	r1, r1, #12
34018018:	f001 010f 	and.w	r1, r1, #15
3401801c:	6838      	ldr	r0, [r7, #0]
3401801e:	0a00      	lsrs	r0, r0, #8
34018020:	f000 000f 	and.w	r0, r0, #15
34018024:	240a      	movs	r4, #10
34018026:	9406      	str	r4, [sp, #24]
34018028:	2401      	movs	r4, #1
3401802a:	9405      	str	r4, [sp, #20]
3401802c:	2419      	movs	r4, #25
3401802e:	9404      	str	r4, [sp, #16]
34018030:	9003      	str	r0, [sp, #12]
34018032:	9102      	str	r1, [sp, #8]
34018034:	9201      	str	r2, [sp, #4]
34018036:	4a67      	ldr	r2, [pc, #412]	@ (340181d4 <LL_ATON_Init+0x54c>)
34018038:	9200      	str	r2, [sp, #0]
3401803a:	22da      	movs	r2, #218	@ 0xda
3401803c:	4960      	ldr	r1, [pc, #384]	@ (340181c0 <LL_ATON_Init+0x538>)
3401803e:	4861      	ldr	r0, [pc, #388]	@ (340181c4 <LL_ATON_Init+0x53c>)
34018040:	f002 fb22 	bl	3401a688 <iprintf>
34018044:	4b60      	ldr	r3, [pc, #384]	@ (340181c8 <LL_ATON_Init+0x540>)
34018046:	4a61      	ldr	r2, [pc, #388]	@ (340181cc <LL_ATON_Init+0x544>)
34018048:	21da      	movs	r1, #218	@ 0xda
3401804a:	485d      	ldr	r0, [pc, #372]	@ (340181c0 <LL_ATON_Init+0x538>)
3401804c:	f001 fd3a 	bl	34019ac4 <__assert_func>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
34018050:	4b61      	ldr	r3, [pc, #388]	@ (340181d8 <LL_ATON_Init+0x550>)
34018052:	681b      	ldr	r3, [r3, #0]
34018054:	603b      	str	r3, [r7, #0]
34018056:	683b      	ldr	r3, [r7, #0]
34018058:	2b00      	cmp	r3, #0
3401805a:	d0f9      	beq.n	34018050 <LL_ATON_Init+0x3c8>
3401805c:	683b      	ldr	r3, [r7, #0]
3401805e:	b2db      	uxtb	r3, r3
34018060:	2b21      	cmp	r3, #33	@ 0x21
34018062:	d10b      	bne.n	3401807c <LL_ATON_Init+0x3f4>
34018064:	683b      	ldr	r3, [r7, #0]
34018066:	0b1b      	lsrs	r3, r3, #12
34018068:	f003 030f 	and.w	r3, r3, #15
3401806c:	2b01      	cmp	r3, #1
3401806e:	d105      	bne.n	3401807c <LL_ATON_Init+0x3f4>
34018070:	683b      	ldr	r3, [r7, #0]
34018072:	0a1b      	lsrs	r3, r3, #8
34018074:	f003 030f 	and.w	r3, r3, #15
34018078:	2b01      	cmp	r3, #1
3401807a:	d02f      	beq.n	340180dc <LL_ATON_Init+0x454>
3401807c:	f002 fea0 	bl	3401adc0 <__errno>
34018080:	4603      	mov	r3, r0
34018082:	681b      	ldr	r3, [r3, #0]
34018084:	2b00      	cmp	r3, #0
34018086:	d008      	beq.n	3401809a <LL_ATON_Init+0x412>
34018088:	f002 fe9a 	bl	3401adc0 <__errno>
3401808c:	4603      	mov	r3, r0
3401808e:	681b      	ldr	r3, [r3, #0]
34018090:	4618      	mov	r0, r3
34018092:	f002 fe2f 	bl	3401acf4 <strerror>
34018096:	4603      	mov	r3, r0
34018098:	e000      	b.n	3401809c <LL_ATON_Init+0x414>
3401809a:	4b47      	ldr	r3, [pc, #284]	@ (340181b8 <LL_ATON_Init+0x530>)
3401809c:	683a      	ldr	r2, [r7, #0]
3401809e:	b2d2      	uxtb	r2, r2
340180a0:	6839      	ldr	r1, [r7, #0]
340180a2:	0b09      	lsrs	r1, r1, #12
340180a4:	f001 010f 	and.w	r1, r1, #15
340180a8:	6838      	ldr	r0, [r7, #0]
340180aa:	0a00      	lsrs	r0, r0, #8
340180ac:	f000 000f 	and.w	r0, r0, #15
340180b0:	2401      	movs	r4, #1
340180b2:	9406      	str	r4, [sp, #24]
340180b4:	2401      	movs	r4, #1
340180b6:	9405      	str	r4, [sp, #20]
340180b8:	2421      	movs	r4, #33	@ 0x21
340180ba:	9404      	str	r4, [sp, #16]
340180bc:	9003      	str	r0, [sp, #12]
340180be:	9102      	str	r1, [sp, #8]
340180c0:	9201      	str	r2, [sp, #4]
340180c2:	4a46      	ldr	r2, [pc, #280]	@ (340181dc <LL_ATON_Init+0x554>)
340180c4:	9200      	str	r2, [sp, #0]
340180c6:	22de      	movs	r2, #222	@ 0xde
340180c8:	493d      	ldr	r1, [pc, #244]	@ (340181c0 <LL_ATON_Init+0x538>)
340180ca:	483e      	ldr	r0, [pc, #248]	@ (340181c4 <LL_ATON_Init+0x53c>)
340180cc:	f002 fadc 	bl	3401a688 <iprintf>
340180d0:	4b3d      	ldr	r3, [pc, #244]	@ (340181c8 <LL_ATON_Init+0x540>)
340180d2:	4a3e      	ldr	r2, [pc, #248]	@ (340181cc <LL_ATON_Init+0x544>)
340180d4:	21de      	movs	r1, #222	@ 0xde
340180d6:	483a      	ldr	r0, [pc, #232]	@ (340181c0 <LL_ATON_Init+0x538>)
340180d8:	f001 fcf4 	bl	34019ac4 <__assert_func>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
340180dc:	4b40      	ldr	r3, [pc, #256]	@ (340181e0 <LL_ATON_Init+0x558>)
340180de:	681b      	ldr	r3, [r3, #0]
340180e0:	603b      	str	r3, [r7, #0]
340180e2:	683b      	ldr	r3, [r7, #0]
340180e4:	2b00      	cmp	r3, #0
340180e6:	d0f9      	beq.n	340180dc <LL_ATON_Init+0x454>
340180e8:	683b      	ldr	r3, [r7, #0]
340180ea:	b2db      	uxtb	r3, r3
340180ec:	2b20      	cmp	r3, #32
340180ee:	d10b      	bne.n	34018108 <LL_ATON_Init+0x480>
340180f0:	683b      	ldr	r3, [r7, #0]
340180f2:	0b1b      	lsrs	r3, r3, #12
340180f4:	f003 030f 	and.w	r3, r3, #15
340180f8:	2b03      	cmp	r3, #3
340180fa:	d105      	bne.n	34018108 <LL_ATON_Init+0x480>
340180fc:	683b      	ldr	r3, [r7, #0]
340180fe:	0a1b      	lsrs	r3, r3, #8
34018100:	f003 030f 	and.w	r3, r3, #15
34018104:	2b02      	cmp	r3, #2
34018106:	d02f      	beq.n	34018168 <LL_ATON_Init+0x4e0>
34018108:	f002 fe5a 	bl	3401adc0 <__errno>
3401810c:	4603      	mov	r3, r0
3401810e:	681b      	ldr	r3, [r3, #0]
34018110:	2b00      	cmp	r3, #0
34018112:	d008      	beq.n	34018126 <LL_ATON_Init+0x49e>
34018114:	f002 fe54 	bl	3401adc0 <__errno>
34018118:	4603      	mov	r3, r0
3401811a:	681b      	ldr	r3, [r3, #0]
3401811c:	4618      	mov	r0, r3
3401811e:	f002 fde9 	bl	3401acf4 <strerror>
34018122:	4603      	mov	r3, r0
34018124:	e000      	b.n	34018128 <LL_ATON_Init+0x4a0>
34018126:	4b24      	ldr	r3, [pc, #144]	@ (340181b8 <LL_ATON_Init+0x530>)
34018128:	683a      	ldr	r2, [r7, #0]
3401812a:	b2d2      	uxtb	r2, r2
3401812c:	6839      	ldr	r1, [r7, #0]
3401812e:	0b09      	lsrs	r1, r1, #12
34018130:	f001 010f 	and.w	r1, r1, #15
34018134:	6838      	ldr	r0, [r7, #0]
34018136:	0a00      	lsrs	r0, r0, #8
34018138:	f000 000f 	and.w	r0, r0, #15
3401813c:	2402      	movs	r4, #2
3401813e:	9406      	str	r4, [sp, #24]
34018140:	2403      	movs	r4, #3
34018142:	9405      	str	r4, [sp, #20]
34018144:	2420      	movs	r4, #32
34018146:	9404      	str	r4, [sp, #16]
34018148:	9003      	str	r0, [sp, #12]
3401814a:	9102      	str	r1, [sp, #8]
3401814c:	9201      	str	r2, [sp, #4]
3401814e:	4a25      	ldr	r2, [pc, #148]	@ (340181e4 <LL_ATON_Init+0x55c>)
34018150:	9200      	str	r2, [sp, #0]
34018152:	22e2      	movs	r2, #226	@ 0xe2
34018154:	491a      	ldr	r1, [pc, #104]	@ (340181c0 <LL_ATON_Init+0x538>)
34018156:	481b      	ldr	r0, [pc, #108]	@ (340181c4 <LL_ATON_Init+0x53c>)
34018158:	f002 fa96 	bl	3401a688 <iprintf>
3401815c:	4b1a      	ldr	r3, [pc, #104]	@ (340181c8 <LL_ATON_Init+0x540>)
3401815e:	4a1b      	ldr	r2, [pc, #108]	@ (340181cc <LL_ATON_Init+0x544>)
34018160:	21e2      	movs	r1, #226	@ 0xe2
34018162:	4817      	ldr	r0, [pc, #92]	@ (340181c0 <LL_ATON_Init+0x538>)
34018164:	f001 fcae 	bl	34019ac4 <__assert_func>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
34018168:	4b1f      	ldr	r3, [pc, #124]	@ (340181e8 <LL_ATON_Init+0x560>)
3401816a:	681b      	ldr	r3, [r3, #0]
3401816c:	603b      	str	r3, [r7, #0]
3401816e:	683b      	ldr	r3, [r7, #0]
34018170:	2b00      	cmp	r3, #0
34018172:	d0f9      	beq.n	34018168 <LL_ATON_Init+0x4e0>
34018174:	683b      	ldr	r3, [r7, #0]
34018176:	b2db      	uxtb	r3, r3
34018178:	2b1f      	cmp	r3, #31
3401817a:	d10b      	bne.n	34018194 <LL_ATON_Init+0x50c>
3401817c:	683b      	ldr	r3, [r7, #0]
3401817e:	0b1b      	lsrs	r3, r3, #12
34018180:	f003 030f 	and.w	r3, r3, #15
34018184:	2b01      	cmp	r3, #1
34018186:	d105      	bne.n	34018194 <LL_ATON_Init+0x50c>
34018188:	683b      	ldr	r3, [r7, #0]
3401818a:	0a1b      	lsrs	r3, r3, #8
3401818c:	f003 030f 	and.w	r3, r3, #15
34018190:	2b02      	cmp	r3, #2
34018192:	d04c      	beq.n	3401822e <LL_ATON_Init+0x5a6>
34018194:	f002 fe14 	bl	3401adc0 <__errno>
34018198:	4603      	mov	r3, r0
3401819a:	681b      	ldr	r3, [r3, #0]
3401819c:	2b00      	cmp	r3, #0
3401819e:	d025      	beq.n	340181ec <LL_ATON_Init+0x564>
340181a0:	f002 fe0e 	bl	3401adc0 <__errno>
340181a4:	4603      	mov	r3, r0
340181a6:	681b      	ldr	r3, [r3, #0]
340181a8:	4618      	mov	r0, r3
340181aa:	f002 fda3 	bl	3401acf4 <strerror>
340181ae:	4603      	mov	r3, r0
340181b0:	e01d      	b.n	340181ee <LL_ATON_Init+0x566>
340181b2:	bf00      	nop
340181b4:	580f5004 	.word	0x580f5004
340181b8:	3401d3c8 	.word	0x3401d3c8
340181bc:	3401d458 	.word	0x3401d458
340181c0:	3401d268 	.word	0x3401d268
340181c4:	3401d3d0 	.word	0x3401d3d0
340181c8:	3401d43c 	.word	0x3401d43c
340181cc:	3401e560 	.word	0x3401e560
340181d0:	580f3004 	.word	0x580f3004
340181d4:	3401d460 	.word	0x3401d460
340181d8:	580fe004 	.word	0x580fe004
340181dc:	3401d468 	.word	0x3401d468
340181e0:	580fd004 	.word	0x580fd004
340181e4:	3401d474 	.word	0x3401d474
340181e8:	580e0004 	.word	0x580e0004
340181ec:	4b85      	ldr	r3, [pc, #532]	@ (34018404 <LL_ATON_Init+0x77c>)
340181ee:	683a      	ldr	r2, [r7, #0]
340181f0:	b2d2      	uxtb	r2, r2
340181f2:	6839      	ldr	r1, [r7, #0]
340181f4:	0b09      	lsrs	r1, r1, #12
340181f6:	f001 010f 	and.w	r1, r1, #15
340181fa:	6838      	ldr	r0, [r7, #0]
340181fc:	0a00      	lsrs	r0, r0, #8
340181fe:	f000 000f 	and.w	r0, r0, #15
34018202:	2402      	movs	r4, #2
34018204:	9406      	str	r4, [sp, #24]
34018206:	2401      	movs	r4, #1
34018208:	9405      	str	r4, [sp, #20]
3401820a:	241f      	movs	r4, #31
3401820c:	9404      	str	r4, [sp, #16]
3401820e:	9003      	str	r0, [sp, #12]
34018210:	9102      	str	r1, [sp, #8]
34018212:	9201      	str	r2, [sp, #4]
34018214:	4a7c      	ldr	r2, [pc, #496]	@ (34018408 <LL_ATON_Init+0x780>)
34018216:	9200      	str	r2, [sp, #0]
34018218:	22f5      	movs	r2, #245	@ 0xf5
3401821a:	497c      	ldr	r1, [pc, #496]	@ (3401840c <LL_ATON_Init+0x784>)
3401821c:	487c      	ldr	r0, [pc, #496]	@ (34018410 <LL_ATON_Init+0x788>)
3401821e:	f002 fa33 	bl	3401a688 <iprintf>
34018222:	4b7c      	ldr	r3, [pc, #496]	@ (34018414 <LL_ATON_Init+0x78c>)
34018224:	4a7c      	ldr	r2, [pc, #496]	@ (34018418 <LL_ATON_Init+0x790>)
34018226:	21f5      	movs	r1, #245	@ 0xf5
34018228:	4878      	ldr	r0, [pc, #480]	@ (3401840c <LL_ATON_Init+0x784>)
3401822a:	f001 fc4b 	bl	34019ac4 <__assert_func>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3401822e:	4b7b      	ldr	r3, [pc, #492]	@ (3401841c <LL_ATON_Init+0x794>)
34018230:	681b      	ldr	r3, [r3, #0]
34018232:	603b      	str	r3, [r7, #0]
34018234:	683b      	ldr	r3, [r7, #0]
34018236:	2b00      	cmp	r3, #0
34018238:	d0f9      	beq.n	3401822e <LL_ATON_Init+0x5a6>
3401823a:	683b      	ldr	r3, [r7, #0]
3401823c:	b2db      	uxtb	r3, r3
3401823e:	2b1e      	cmp	r3, #30
34018240:	d10b      	bne.n	3401825a <LL_ATON_Init+0x5d2>
34018242:	683b      	ldr	r3, [r7, #0]
34018244:	0b1b      	lsrs	r3, r3, #12
34018246:	f003 030f 	and.w	r3, r3, #15
3401824a:	2b01      	cmp	r3, #1
3401824c:	d105      	bne.n	3401825a <LL_ATON_Init+0x5d2>
3401824e:	683b      	ldr	r3, [r7, #0]
34018250:	0a1b      	lsrs	r3, r3, #8
34018252:	f003 030f 	and.w	r3, r3, #15
34018256:	2b01      	cmp	r3, #1
34018258:	d02f      	beq.n	340182ba <LL_ATON_Init+0x632>
3401825a:	f002 fdb1 	bl	3401adc0 <__errno>
3401825e:	4603      	mov	r3, r0
34018260:	681b      	ldr	r3, [r3, #0]
34018262:	2b00      	cmp	r3, #0
34018264:	d008      	beq.n	34018278 <LL_ATON_Init+0x5f0>
34018266:	f002 fdab 	bl	3401adc0 <__errno>
3401826a:	4603      	mov	r3, r0
3401826c:	681b      	ldr	r3, [r3, #0]
3401826e:	4618      	mov	r0, r3
34018270:	f002 fd40 	bl	3401acf4 <strerror>
34018274:	4603      	mov	r3, r0
34018276:	e000      	b.n	3401827a <LL_ATON_Init+0x5f2>
34018278:	4b62      	ldr	r3, [pc, #392]	@ (34018404 <LL_ATON_Init+0x77c>)
3401827a:	683a      	ldr	r2, [r7, #0]
3401827c:	b2d2      	uxtb	r2, r2
3401827e:	6839      	ldr	r1, [r7, #0]
34018280:	0b09      	lsrs	r1, r1, #12
34018282:	f001 010f 	and.w	r1, r1, #15
34018286:	6838      	ldr	r0, [r7, #0]
34018288:	0a00      	lsrs	r0, r0, #8
3401828a:	f000 000f 	and.w	r0, r0, #15
3401828e:	2401      	movs	r4, #1
34018290:	9406      	str	r4, [sp, #24]
34018292:	2401      	movs	r4, #1
34018294:	9405      	str	r4, [sp, #20]
34018296:	241e      	movs	r4, #30
34018298:	9404      	str	r4, [sp, #16]
3401829a:	9003      	str	r0, [sp, #12]
3401829c:	9102      	str	r1, [sp, #8]
3401829e:	9201      	str	r2, [sp, #4]
340182a0:	4a5f      	ldr	r2, [pc, #380]	@ (34018420 <LL_ATON_Init+0x798>)
340182a2:	9200      	str	r2, [sp, #0]
340182a4:	22f7      	movs	r2, #247	@ 0xf7
340182a6:	4959      	ldr	r1, [pc, #356]	@ (3401840c <LL_ATON_Init+0x784>)
340182a8:	4859      	ldr	r0, [pc, #356]	@ (34018410 <LL_ATON_Init+0x788>)
340182aa:	f002 f9ed 	bl	3401a688 <iprintf>
340182ae:	4b59      	ldr	r3, [pc, #356]	@ (34018414 <LL_ATON_Init+0x78c>)
340182b0:	4a59      	ldr	r2, [pc, #356]	@ (34018418 <LL_ATON_Init+0x790>)
340182b2:	21f7      	movs	r1, #247	@ 0xf7
340182b4:	4855      	ldr	r0, [pc, #340]	@ (3401840c <LL_ATON_Init+0x784>)
340182b6:	f001 fc05 	bl	34019ac4 <__assert_func>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
340182ba:	4b5a      	ldr	r3, [pc, #360]	@ (34018424 <LL_ATON_Init+0x79c>)
340182bc:	681b      	ldr	r3, [r3, #0]
340182be:	603b      	str	r3, [r7, #0]
340182c0:	683b      	ldr	r3, [r7, #0]
340182c2:	2b00      	cmp	r3, #0
340182c4:	d0f9      	beq.n	340182ba <LL_ATON_Init+0x632>
340182c6:	683b      	ldr	r3, [r7, #0]
340182c8:	b2db      	uxtb	r3, r3
340182ca:	2b00      	cmp	r3, #0
340182cc:	d10b      	bne.n	340182e6 <LL_ATON_Init+0x65e>
340182ce:	683b      	ldr	r3, [r7, #0]
340182d0:	0b1b      	lsrs	r3, r3, #12
340182d2:	f003 030f 	and.w	r3, r3, #15
340182d6:	2b01      	cmp	r3, #1
340182d8:	d105      	bne.n	340182e6 <LL_ATON_Init+0x65e>
340182da:	683b      	ldr	r3, [r7, #0]
340182dc:	0a1b      	lsrs	r3, r3, #8
340182de:	f003 030f 	and.w	r3, r3, #15
340182e2:	2b06      	cmp	r3, #6
340182e4:	d02f      	beq.n	34018346 <LL_ATON_Init+0x6be>
340182e6:	f002 fd6b 	bl	3401adc0 <__errno>
340182ea:	4603      	mov	r3, r0
340182ec:	681b      	ldr	r3, [r3, #0]
340182ee:	2b00      	cmp	r3, #0
340182f0:	d008      	beq.n	34018304 <LL_ATON_Init+0x67c>
340182f2:	f002 fd65 	bl	3401adc0 <__errno>
340182f6:	4603      	mov	r3, r0
340182f8:	681b      	ldr	r3, [r3, #0]
340182fa:	4618      	mov	r0, r3
340182fc:	f002 fcfa 	bl	3401acf4 <strerror>
34018300:	4603      	mov	r3, r0
34018302:	e000      	b.n	34018306 <LL_ATON_Init+0x67e>
34018304:	4b3f      	ldr	r3, [pc, #252]	@ (34018404 <LL_ATON_Init+0x77c>)
34018306:	683a      	ldr	r2, [r7, #0]
34018308:	b2d2      	uxtb	r2, r2
3401830a:	6839      	ldr	r1, [r7, #0]
3401830c:	0b09      	lsrs	r1, r1, #12
3401830e:	f001 010f 	and.w	r1, r1, #15
34018312:	6838      	ldr	r0, [r7, #0]
34018314:	0a00      	lsrs	r0, r0, #8
34018316:	f000 000f 	and.w	r0, r0, #15
3401831a:	2406      	movs	r4, #6
3401831c:	9406      	str	r4, [sp, #24]
3401831e:	2401      	movs	r4, #1
34018320:	9405      	str	r4, [sp, #20]
34018322:	2400      	movs	r4, #0
34018324:	9404      	str	r4, [sp, #16]
34018326:	9003      	str	r0, [sp, #12]
34018328:	9102      	str	r1, [sp, #8]
3401832a:	9201      	str	r2, [sp, #4]
3401832c:	4a3e      	ldr	r2, [pc, #248]	@ (34018428 <LL_ATON_Init+0x7a0>)
3401832e:	9200      	str	r2, [sp, #0]
34018330:	22f9      	movs	r2, #249	@ 0xf9
34018332:	4936      	ldr	r1, [pc, #216]	@ (3401840c <LL_ATON_Init+0x784>)
34018334:	4836      	ldr	r0, [pc, #216]	@ (34018410 <LL_ATON_Init+0x788>)
34018336:	f002 f9a7 	bl	3401a688 <iprintf>
3401833a:	4b36      	ldr	r3, [pc, #216]	@ (34018414 <LL_ATON_Init+0x78c>)
3401833c:	4a36      	ldr	r2, [pc, #216]	@ (34018418 <LL_ATON_Init+0x790>)
3401833e:	21f9      	movs	r1, #249	@ 0xf9
34018340:	4832      	ldr	r0, [pc, #200]	@ (3401840c <LL_ATON_Init+0x784>)
34018342:	f001 fbbf 	bl	34019ac4 <__assert_func>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
34018346:	4b39      	ldr	r3, [pc, #228]	@ (3401842c <LL_ATON_Init+0x7a4>)
34018348:	681b      	ldr	r3, [r3, #0]
3401834a:	603b      	str	r3, [r7, #0]
3401834c:	683b      	ldr	r3, [r7, #0]
3401834e:	2b00      	cmp	r3, #0
34018350:	d0f9      	beq.n	34018346 <LL_ATON_Init+0x6be>
34018352:	683b      	ldr	r3, [r7, #0]
34018354:	b2db      	uxtb	r3, r3
34018356:	2b1d      	cmp	r3, #29
34018358:	d10b      	bne.n	34018372 <LL_ATON_Init+0x6ea>
3401835a:	683b      	ldr	r3, [r7, #0]
3401835c:	0b1b      	lsrs	r3, r3, #12
3401835e:	f003 030f 	and.w	r3, r3, #15
34018362:	2b05      	cmp	r3, #5
34018364:	d105      	bne.n	34018372 <LL_ATON_Init+0x6ea>
34018366:	683b      	ldr	r3, [r7, #0]
34018368:	0a1b      	lsrs	r3, r3, #8
3401836a:	f003 030f 	and.w	r3, r3, #15
3401836e:	2b00      	cmp	r3, #0
34018370:	d02f      	beq.n	340183d2 <LL_ATON_Init+0x74a>
34018372:	f002 fd25 	bl	3401adc0 <__errno>
34018376:	4603      	mov	r3, r0
34018378:	681b      	ldr	r3, [r3, #0]
3401837a:	2b00      	cmp	r3, #0
3401837c:	d008      	beq.n	34018390 <LL_ATON_Init+0x708>
3401837e:	f002 fd1f 	bl	3401adc0 <__errno>
34018382:	4603      	mov	r3, r0
34018384:	681b      	ldr	r3, [r3, #0]
34018386:	4618      	mov	r0, r3
34018388:	f002 fcb4 	bl	3401acf4 <strerror>
3401838c:	4603      	mov	r3, r0
3401838e:	e000      	b.n	34018392 <LL_ATON_Init+0x70a>
34018390:	4b1c      	ldr	r3, [pc, #112]	@ (34018404 <LL_ATON_Init+0x77c>)
34018392:	683a      	ldr	r2, [r7, #0]
34018394:	b2d2      	uxtb	r2, r2
34018396:	6839      	ldr	r1, [r7, #0]
34018398:	0b09      	lsrs	r1, r1, #12
3401839a:	f001 010f 	and.w	r1, r1, #15
3401839e:	6838      	ldr	r0, [r7, #0]
340183a0:	0a00      	lsrs	r0, r0, #8
340183a2:	f000 000f 	and.w	r0, r0, #15
340183a6:	2400      	movs	r4, #0
340183a8:	9406      	str	r4, [sp, #24]
340183aa:	2405      	movs	r4, #5
340183ac:	9405      	str	r4, [sp, #20]
340183ae:	241d      	movs	r4, #29
340183b0:	9404      	str	r4, [sp, #16]
340183b2:	9003      	str	r0, [sp, #12]
340183b4:	9102      	str	r1, [sp, #8]
340183b6:	9201      	str	r2, [sp, #4]
340183b8:	4a1d      	ldr	r2, [pc, #116]	@ (34018430 <LL_ATON_Init+0x7a8>)
340183ba:	9200      	str	r2, [sp, #0]
340183bc:	22fb      	movs	r2, #251	@ 0xfb
340183be:	4913      	ldr	r1, [pc, #76]	@ (3401840c <LL_ATON_Init+0x784>)
340183c0:	4813      	ldr	r0, [pc, #76]	@ (34018410 <LL_ATON_Init+0x788>)
340183c2:	f002 f961 	bl	3401a688 <iprintf>
340183c6:	4b13      	ldr	r3, [pc, #76]	@ (34018414 <LL_ATON_Init+0x78c>)
340183c8:	4a13      	ldr	r2, [pc, #76]	@ (34018418 <LL_ATON_Init+0x790>)
340183ca:	21fb      	movs	r1, #251	@ 0xfb
340183cc:	480f      	ldr	r0, [pc, #60]	@ (3401840c <LL_ATON_Init+0x784>)
340183ce:	f001 fb79 	bl	34019ac4 <__assert_func>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
340183d2:	2300      	movs	r3, #0
340183d4:	607b      	str	r3, [r7, #4]
340183d6:	e00a      	b.n	340183ee <LL_ATON_Init+0x766>
  {
    ATON_BUSIF_CTRL_SET(i, 1);
340183d8:	687b      	ldr	r3, [r7, #4]
340183da:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340183de:	33e2      	adds	r3, #226	@ 0xe2
340183e0:	031b      	lsls	r3, r3, #12
340183e2:	461a      	mov	r2, r3
340183e4:	2301      	movs	r3, #1
340183e6:	6013      	str	r3, [r2, #0]
  for (i = 0; i < ATON_BUSIF_NUM; i++)
340183e8:	687b      	ldr	r3, [r7, #4]
340183ea:	3301      	adds	r3, #1
340183ec:	607b      	str	r3, [r7, #4]
340183ee:	687b      	ldr	r3, [r7, #4]
340183f0:	2b01      	cmp	r3, #1
340183f2:	ddf1      	ble.n	340183d8 <LL_ATON_Init+0x750>
  }

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);
340183f4:	4b0f      	ldr	r3, [pc, #60]	@ (34018434 <LL_ATON_Init+0x7ac>)
340183f6:	2201      	movs	r2, #1
340183f8:	601a      	str	r2, [r3, #0]

  return 0;
340183fa:	2300      	movs	r3, #0
}
340183fc:	4618      	mov	r0, r3
340183fe:	370c      	adds	r7, #12
34018400:	46bd      	mov	sp, r7
34018402:	bd90      	pop	{r4, r7, pc}
34018404:	3401d3c8 	.word	0x3401d3c8
34018408:	3401d47c 	.word	0x3401d47c
3401840c:	3401d268 	.word	0x3401d268
34018410:	3401d3d0 	.word	0x3401d3d0
34018414:	3401d43c 	.word	0x3401d43c
34018418:	3401e560 	.word	0x3401e560
3401841c:	580e1004 	.word	0x580e1004
34018420:	3401d484 	.word	0x3401d484
34018424:	580e4004 	.word	0x580e4004
34018428:	3401d48c 	.word	0x3401d48c
3401842c:	580e2004 	.word	0x580e2004
34018430:	3401d498 	.word	0x3401d498
34018434:	580e1000 	.word	0x580e1000

34018438 <LL_ATON_DeInit>:
/**
 * @brief  ATON global de-initialization. Must be called at the very end
 * @retval Always zero
 */
int LL_ATON_DeInit(void)
{
34018438:	b480      	push	{r7}
3401843a:	b083      	sub	sp, #12
3401843c:	af00      	add	r7, sp, #0
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
3401843e:	4b13      	ldr	r3, [pc, #76]	@ (3401848c <LL_ATON_DeInit+0x54>)
34018440:	2200      	movs	r2, #0
34018442:	601a      	str	r2, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
34018444:	2300      	movs	r3, #0
34018446:	607b      	str	r3, [r7, #4]
34018448:	e00a      	b.n	34018460 <LL_ATON_DeInit+0x28>
  {
    ATON_BUSIF_CTRL_SET(i, 0);
3401844a:	687b      	ldr	r3, [r7, #4]
3401844c:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018450:	33e2      	adds	r3, #226	@ 0xe2
34018452:	031b      	lsls	r3, r3, #12
34018454:	461a      	mov	r2, r3
34018456:	2300      	movs	r3, #0
34018458:	6013      	str	r3, [r2, #0]
  for (i = 0; i < ATON_BUSIF_NUM; i++)
3401845a:	687b      	ldr	r3, [r7, #4]
3401845c:	3301      	adds	r3, #1
3401845e:	607b      	str	r3, [r7, #4]
34018460:	687b      	ldr	r3, [r7, #4]
34018462:	2b01      	cmp	r3, #1
34018464:	ddf1      	ble.n	3401844a <LL_ATON_DeInit+0x12>
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
34018466:	4b0a      	ldr	r3, [pc, #40]	@ (34018490 <LL_ATON_DeInit+0x58>)
34018468:	2200      	movs	r2, #0
3401846a:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
3401846c:	4b09      	ldr	r3, [pc, #36]	@ (34018494 <LL_ATON_DeInit+0x5c>)
3401846e:	2200      	movs	r2, #0
34018470:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_BGATES_SET(0, 0);
34018472:	4b09      	ldr	r3, [pc, #36]	@ (34018498 <LL_ATON_DeInit+0x60>)
34018474:	2200      	movs	r2, #0
34018476:	601a      	str	r2, [r3, #0]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
34018478:	4b08      	ldr	r3, [pc, #32]	@ (3401849c <LL_ATON_DeInit+0x64>)
3401847a:	2200      	movs	r2, #0
3401847c:	601a      	str	r2, [r3, #0]

  return 0;
3401847e:	2300      	movs	r3, #0
}
34018480:	4618      	mov	r0, r3
34018482:	370c      	adds	r7, #12
34018484:	46bd      	mov	sp, r7
34018486:	f85d 7b04 	ldr.w	r7, [sp], #4
3401848a:	4770      	bx	lr
3401848c:	580e1000 	.word	0x580e1000
34018490:	580e0008 	.word	0x580e0008
34018494:	580e000c 	.word	0x580e000c
34018498:	580e0010 	.word	0x580e0010
3401849c:	580e0000 	.word	0x580e0000

340184a0 <__atonn_getSrcPortID>:
}
#endif

unsigned __atonn_getSrcPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
340184a0:	b590      	push	{r4, r7, lr}
340184a2:	b083      	sub	sp, #12
340184a4:	af00      	add	r7, sp, #0
340184a6:	4604      	mov	r4, r0
340184a8:	4608      	mov	r0, r1
340184aa:	4611      	mov	r1, r2
340184ac:	461a      	mov	r2, r3
340184ae:	4623      	mov	r3, r4
340184b0:	71fb      	strb	r3, [r7, #7]
340184b2:	4603      	mov	r3, r0
340184b4:	71bb      	strb	r3, [r7, #6]
340184b6:	460b      	mov	r3, r1
340184b8:	717b      	strb	r3, [r7, #5]
340184ba:	4613      	mov	r3, r2
340184bc:	713b      	strb	r3, [r7, #4]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
340184be:	79bb      	ldrb	r3, [r7, #6]
340184c0:	2b00      	cmp	r3, #0
340184c2:	d006      	beq.n	340184d2 <__atonn_getSrcPortID+0x32>
340184c4:	4b66      	ldr	r3, [pc, #408]	@ (34018660 <__atonn_getSrcPortID+0x1c0>)
340184c6:	4a67      	ldr	r2, [pc, #412]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
340184c8:	f240 313e 	movw	r1, #830	@ 0x33e
340184cc:	4866      	ldr	r0, [pc, #408]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
340184ce:	f001 faf9 	bl	34019ac4 <__assert_func>
  switch (sut)
340184d2:	79fb      	ldrb	r3, [r7, #7]
340184d4:	2b02      	cmp	r3, #2
340184d6:	f000 80b6 	beq.w	34018646 <__atonn_getSrcPortID+0x1a6>
340184da:	2b02      	cmp	r3, #2
340184dc:	f300 80ba 	bgt.w	34018654 <__atonn_getSrcPortID+0x1b4>
340184e0:	2b00      	cmp	r3, #0
340184e2:	d003      	beq.n	340184ec <__atonn_getSrcPortID+0x4c>
340184e4:	2b01      	cmp	r3, #1
340184e6:	f000 80a7 	beq.w	34018638 <__atonn_getSrcPortID+0x198>
340184ea:	e0b3      	b.n	34018654 <__atonn_getSrcPortID+0x1b4>
  {
  case STRSWITCH:
    switch (aut)
340184ec:	797b      	ldrb	r3, [r7, #5]
340184ee:	2b06      	cmp	r3, #6
340184f0:	f200 809b 	bhi.w	3401862a <__atonn_getSrcPortID+0x18a>
340184f4:	a201      	add	r2, pc, #4	@ (adr r2, 340184fc <__atonn_getSrcPortID+0x5c>)
340184f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340184fa:	bf00      	nop
340184fc:	34018519 	.word	0x34018519
34018500:	3401862b 	.word	0x3401862b
34018504:	34018545 	.word	0x34018545
34018508:	34018573 	.word	0x34018573
3401850c:	340185a1 	.word	0x340185a1
34018510:	340185cf 	.word	0x340185cf
34018514:	340185fd 	.word	0x340185fd
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
34018518:	7e3b      	ldrb	r3, [r7, #24]
3401851a:	2b00      	cmp	r3, #0
3401851c:	d006      	beq.n	3401852c <__atonn_getSrcPortID+0x8c>
3401851e:	4b53      	ldr	r3, [pc, #332]	@ (3401866c <__atonn_getSrcPortID+0x1cc>)
34018520:	4a50      	ldr	r2, [pc, #320]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
34018522:	f240 3146 	movw	r1, #838	@ 0x346
34018526:	4850      	ldr	r0, [pc, #320]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
34018528:	f001 facc 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
3401852c:	793b      	ldrb	r3, [r7, #4]
3401852e:	2b09      	cmp	r3, #9
34018530:	d906      	bls.n	34018540 <__atonn_getSrcPortID+0xa0>
34018532:	4b4f      	ldr	r3, [pc, #316]	@ (34018670 <__atonn_getSrcPortID+0x1d0>)
34018534:	4a4b      	ldr	r2, [pc, #300]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
34018536:	f240 3147 	movw	r1, #839	@ 0x347
3401853a:	484b      	ldr	r0, [pc, #300]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
3401853c:	f001 fac2 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, STRENG, 0, 0) + au_num;
34018540:	793b      	ldrb	r3, [r7, #4]
34018542:	e088      	b.n	34018656 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_CONVACC_NUM)
    case CONVACC:
      LL_ATON_ASSERT(port == 0);
34018544:	7e3b      	ldrb	r3, [r7, #24]
34018546:	2b00      	cmp	r3, #0
34018548:	d006      	beq.n	34018558 <__atonn_getSrcPortID+0xb8>
3401854a:	4b48      	ldr	r3, [pc, #288]	@ (3401866c <__atonn_getSrcPortID+0x1cc>)
3401854c:	4a45      	ldr	r2, [pc, #276]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
3401854e:	f240 314d 	movw	r1, #845	@ 0x34d
34018552:	4845      	ldr	r0, [pc, #276]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
34018554:	f001 fab6 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
34018558:	793b      	ldrb	r3, [r7, #4]
3401855a:	2b03      	cmp	r3, #3
3401855c:	d906      	bls.n	3401856c <__atonn_getSrcPortID+0xcc>
3401855e:	4b45      	ldr	r3, [pc, #276]	@ (34018674 <__atonn_getSrcPortID+0x1d4>)
34018560:	4a40      	ldr	r2, [pc, #256]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
34018562:	f240 314e 	movw	r1, #846	@ 0x34e
34018566:	4840      	ldr	r0, [pc, #256]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
34018568:	f001 faac 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0) + au_num;
3401856c:	793b      	ldrb	r3, [r7, #4]
3401856e:	330a      	adds	r3, #10
34018570:	e071      	b.n	34018656 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_DECUN_NUM)
    case DECUN:
      LL_ATON_ASSERT(port == 0);
34018572:	7e3b      	ldrb	r3, [r7, #24]
34018574:	2b00      	cmp	r3, #0
34018576:	d006      	beq.n	34018586 <__atonn_getSrcPortID+0xe6>
34018578:	4b3c      	ldr	r3, [pc, #240]	@ (3401866c <__atonn_getSrcPortID+0x1cc>)
3401857a:	4a3a      	ldr	r2, [pc, #232]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
3401857c:	f44f 7155 	mov.w	r1, #852	@ 0x354
34018580:	4839      	ldr	r0, [pc, #228]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
34018582:	f001 fa9f 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
34018586:	793b      	ldrb	r3, [r7, #4]
34018588:	2b01      	cmp	r3, #1
3401858a:	d906      	bls.n	3401859a <__atonn_getSrcPortID+0xfa>
3401858c:	4b3a      	ldr	r3, [pc, #232]	@ (34018678 <__atonn_getSrcPortID+0x1d8>)
3401858e:	4a35      	ldr	r2, [pc, #212]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
34018590:	f240 3155 	movw	r1, #853	@ 0x355
34018594:	4834      	ldr	r0, [pc, #208]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
34018596:	f001 fa95 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, DECUN, 0, 0) + au_num;
3401859a:	793b      	ldrb	r3, [r7, #4]
3401859c:	330e      	adds	r3, #14
3401859e:	e05a      	b.n	34018656 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_ACTIV_NUM)
    case ACTIV:
      LL_ATON_ASSERT(port == 0);
340185a0:	7e3b      	ldrb	r3, [r7, #24]
340185a2:	2b00      	cmp	r3, #0
340185a4:	d006      	beq.n	340185b4 <__atonn_getSrcPortID+0x114>
340185a6:	4b31      	ldr	r3, [pc, #196]	@ (3401866c <__atonn_getSrcPortID+0x1cc>)
340185a8:	4a2e      	ldr	r2, [pc, #184]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
340185aa:	f240 315b 	movw	r1, #859	@ 0x35b
340185ae:	482e      	ldr	r0, [pc, #184]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
340185b0:	f001 fa88 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
340185b4:	793b      	ldrb	r3, [r7, #4]
340185b6:	2b01      	cmp	r3, #1
340185b8:	d906      	bls.n	340185c8 <__atonn_getSrcPortID+0x128>
340185ba:	4b2f      	ldr	r3, [pc, #188]	@ (34018678 <__atonn_getSrcPortID+0x1d8>)
340185bc:	4a29      	ldr	r2, [pc, #164]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
340185be:	f44f 7157 	mov.w	r1, #860	@ 0x35c
340185c2:	4829      	ldr	r0, [pc, #164]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
340185c4:	f001 fa7e 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ACTIV, 0, 0) + au_num;
340185c8:	793b      	ldrb	r3, [r7, #4]
340185ca:	3310      	adds	r3, #16
340185cc:	e043      	b.n	34018656 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_ARITH_NUM)
    case ARITH:
      LL_ATON_ASSERT(port == 0);
340185ce:	7e3b      	ldrb	r3, [r7, #24]
340185d0:	2b00      	cmp	r3, #0
340185d2:	d006      	beq.n	340185e2 <__atonn_getSrcPortID+0x142>
340185d4:	4b25      	ldr	r3, [pc, #148]	@ (3401866c <__atonn_getSrcPortID+0x1cc>)
340185d6:	4a23      	ldr	r2, [pc, #140]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
340185d8:	f240 3162 	movw	r1, #866	@ 0x362
340185dc:	4822      	ldr	r0, [pc, #136]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
340185de:	f001 fa71 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
340185e2:	793b      	ldrb	r3, [r7, #4]
340185e4:	2b03      	cmp	r3, #3
340185e6:	d906      	bls.n	340185f6 <__atonn_getSrcPortID+0x156>
340185e8:	4b22      	ldr	r3, [pc, #136]	@ (34018674 <__atonn_getSrcPortID+0x1d4>)
340185ea:	4a1e      	ldr	r2, [pc, #120]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
340185ec:	f240 3163 	movw	r1, #867	@ 0x363
340185f0:	481d      	ldr	r0, [pc, #116]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
340185f2:	f001 fa67 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ARITH, 0, 0) + au_num;
340185f6:	793b      	ldrb	r3, [r7, #4]
340185f8:	3312      	adds	r3, #18
340185fa:	e02c      	b.n	34018656 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_POOL_NUM)
    case POOL:
      LL_ATON_ASSERT(port == 0);
340185fc:	7e3b      	ldrb	r3, [r7, #24]
340185fe:	2b00      	cmp	r3, #0
34018600:	d006      	beq.n	34018610 <__atonn_getSrcPortID+0x170>
34018602:	4b1a      	ldr	r3, [pc, #104]	@ (3401866c <__atonn_getSrcPortID+0x1cc>)
34018604:	4a17      	ldr	r2, [pc, #92]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
34018606:	f240 3169 	movw	r1, #873	@ 0x369
3401860a:	4817      	ldr	r0, [pc, #92]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
3401860c:	f001 fa5a 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
34018610:	793b      	ldrb	r3, [r7, #4]
34018612:	2b01      	cmp	r3, #1
34018614:	d906      	bls.n	34018624 <__atonn_getSrcPortID+0x184>
34018616:	4b18      	ldr	r3, [pc, #96]	@ (34018678 <__atonn_getSrcPortID+0x1d8>)
34018618:	4a12      	ldr	r2, [pc, #72]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
3401861a:	f240 316a 	movw	r1, #874	@ 0x36a
3401861e:	4812      	ldr	r0, [pc, #72]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
34018620:	f001 fa50 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, POOL, 0, 0) + au_num;
34018624:	793b      	ldrb	r3, [r7, #4]
34018626:	3316      	adds	r3, #22
34018628:	e015      	b.n	34018656 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
    default:
      LL_ATON_ASSERT(0);
3401862a:	4b14      	ldr	r3, [pc, #80]	@ (3401867c <__atonn_getSrcPortID+0x1dc>)
3401862c:	4a0d      	ldr	r2, [pc, #52]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
3401862e:	f240 316f 	movw	r1, #879	@ 0x36f
34018632:	480d      	ldr	r0, [pc, #52]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
34018634:	f001 fa46 	bl	34019ac4 <__assert_func>
      break;
    }
    break;
  case STRSWITCH64:
    // TODO
    LL_ATON_ASSERT(0);
34018638:	4b10      	ldr	r3, [pc, #64]	@ (3401867c <__atonn_getSrcPortID+0x1dc>)
3401863a:	4a0a      	ldr	r2, [pc, #40]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
3401863c:	f240 3175 	movw	r1, #885	@ 0x375
34018640:	4809      	ldr	r0, [pc, #36]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
34018642:	f001 fa3f 	bl	34019ac4 <__assert_func>
    break;
  case STRSWITCH_VC:
    // TODO
    LL_ATON_ASSERT(0);
34018646:	4b0d      	ldr	r3, [pc, #52]	@ (3401867c <__atonn_getSrcPortID+0x1dc>)
34018648:	4a06      	ldr	r2, [pc, #24]	@ (34018664 <__atonn_getSrcPortID+0x1c4>)
3401864a:	f240 3179 	movw	r1, #889	@ 0x379
3401864e:	4806      	ldr	r0, [pc, #24]	@ (34018668 <__atonn_getSrcPortID+0x1c8>)
34018650:	f001 fa38 	bl	34019ac4 <__assert_func>
    break;
  }
  return 0;
34018654:	2300      	movs	r3, #0
}
34018656:	4618      	mov	r0, r3
34018658:	370c      	adds	r7, #12
3401865a:	46bd      	mov	sp, r7
3401865c:	bd90      	pop	{r4, r7, pc}
3401865e:	bf00      	nop
34018660:	3401d4b8 	.word	0x3401d4b8
34018664:	3401e588 	.word	0x3401e588
34018668:	3401d268 	.word	0x3401d268
3401866c:	3401d4c4 	.word	0x3401d4c4
34018670:	3401d4d0 	.word	0x3401d4d0
34018674:	3401d4dc 	.word	0x3401d4dc
34018678:	3401d4e8 	.word	0x3401d4e8
3401867c:	3401d43c 	.word	0x3401d43c

34018680 <__atonn_getDstPortID>:

unsigned __atonn_getDstPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
34018680:	b590      	push	{r4, r7, lr}
34018682:	b083      	sub	sp, #12
34018684:	af00      	add	r7, sp, #0
34018686:	4604      	mov	r4, r0
34018688:	4608      	mov	r0, r1
3401868a:	4611      	mov	r1, r2
3401868c:	461a      	mov	r2, r3
3401868e:	4623      	mov	r3, r4
34018690:	71fb      	strb	r3, [r7, #7]
34018692:	4603      	mov	r3, r0
34018694:	71bb      	strb	r3, [r7, #6]
34018696:	460b      	mov	r3, r1
34018698:	717b      	strb	r3, [r7, #5]
3401869a:	4613      	mov	r3, r2
3401869c:	713b      	strb	r3, [r7, #4]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
3401869e:	79bb      	ldrb	r3, [r7, #6]
340186a0:	2b00      	cmp	r3, #0
340186a2:	d006      	beq.n	340186b2 <__atonn_getDstPortID+0x32>
340186a4:	4b6f      	ldr	r3, [pc, #444]	@ (34018864 <__atonn_getDstPortID+0x1e4>)
340186a6:	4a70      	ldr	r2, [pc, #448]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
340186a8:	f240 3183 	movw	r1, #899	@ 0x383
340186ac:	486f      	ldr	r0, [pc, #444]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
340186ae:	f001 fa09 	bl	34019ac4 <__assert_func>
  switch (sut)
340186b2:	79fb      	ldrb	r3, [r7, #7]
340186b4:	2b02      	cmp	r3, #2
340186b6:	f000 80c8 	beq.w	3401884a <__atonn_getDstPortID+0x1ca>
340186ba:	2b02      	cmp	r3, #2
340186bc:	f300 80cc 	bgt.w	34018858 <__atonn_getDstPortID+0x1d8>
340186c0:	2b00      	cmp	r3, #0
340186c2:	d003      	beq.n	340186cc <__atonn_getDstPortID+0x4c>
340186c4:	2b01      	cmp	r3, #1
340186c6:	f000 80b9 	beq.w	3401883c <__atonn_getDstPortID+0x1bc>
340186ca:	e0c5      	b.n	34018858 <__atonn_getDstPortID+0x1d8>
  {
  case STRSWITCH:
    switch (aut)
340186cc:	797b      	ldrb	r3, [r7, #5]
340186ce:	2b06      	cmp	r3, #6
340186d0:	f200 80ad 	bhi.w	3401882e <__atonn_getDstPortID+0x1ae>
340186d4:	a201      	add	r2, pc, #4	@ (adr r2, 340186dc <__atonn_getDstPortID+0x5c>)
340186d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340186da:	bf00      	nop
340186dc:	340186f9 	.word	0x340186f9
340186e0:	3401882f 	.word	0x3401882f
340186e4:	34018729 	.word	0x34018729
340186e8:	34018763 	.word	0x34018763
340186ec:	34018799 	.word	0x34018799
340186f0:	340187c9 	.word	0x340187c9
340186f4:	340187ff 	.word	0x340187ff
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
340186f8:	7e3b      	ldrb	r3, [r7, #24]
340186fa:	2b00      	cmp	r3, #0
340186fc:	d006      	beq.n	3401870c <__atonn_getDstPortID+0x8c>
340186fe:	4b5c      	ldr	r3, [pc, #368]	@ (34018870 <__atonn_getDstPortID+0x1f0>)
34018700:	4a59      	ldr	r2, [pc, #356]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
34018702:	f240 318b 	movw	r1, #907	@ 0x38b
34018706:	4859      	ldr	r0, [pc, #356]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
34018708:	f001 f9dc 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
3401870c:	793b      	ldrb	r3, [r7, #4]
3401870e:	2b09      	cmp	r3, #9
34018710:	d906      	bls.n	34018720 <__atonn_getDstPortID+0xa0>
34018712:	4b58      	ldr	r3, [pc, #352]	@ (34018874 <__atonn_getDstPortID+0x1f4>)
34018714:	4a54      	ldr	r2, [pc, #336]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
34018716:	f44f 7163 	mov.w	r1, #908	@ 0x38c
3401871a:	4854      	ldr	r0, [pc, #336]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
3401871c:	f001 f9d2 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, STRENG, 0, 0) + (0x4 * au_num);
34018720:	793b      	ldrb	r3, [r7, #4]
34018722:	009b      	lsls	r3, r3, #2
34018724:	3308      	adds	r3, #8
34018726:	e098      	b.n	3401885a <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_CONVACC_NUM)
    case CONVACC:
      LL_ATON_ASSERT(port < 3);
34018728:	7e3b      	ldrb	r3, [r7, #24]
3401872a:	2b02      	cmp	r3, #2
3401872c:	d906      	bls.n	3401873c <__atonn_getDstPortID+0xbc>
3401872e:	4b52      	ldr	r3, [pc, #328]	@ (34018878 <__atonn_getDstPortID+0x1f8>)
34018730:	4a4d      	ldr	r2, [pc, #308]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
34018732:	f240 3192 	movw	r1, #914	@ 0x392
34018736:	484d      	ldr	r0, [pc, #308]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
34018738:	f001 f9c4 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
3401873c:	793b      	ldrb	r3, [r7, #4]
3401873e:	2b03      	cmp	r3, #3
34018740:	d906      	bls.n	34018750 <__atonn_getDstPortID+0xd0>
34018742:	4b4e      	ldr	r3, [pc, #312]	@ (3401887c <__atonn_getDstPortID+0x1fc>)
34018744:	4a48      	ldr	r2, [pc, #288]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
34018746:	f240 3193 	movw	r1, #915	@ 0x393
3401874a:	4848      	ldr	r0, [pc, #288]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
3401874c:	f001 f9ba 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, CONVACC, 0, 0) + (0x4 * (3 * au_num + port));
34018750:	793a      	ldrb	r2, [r7, #4]
34018752:	4613      	mov	r3, r2
34018754:	005b      	lsls	r3, r3, #1
34018756:	441a      	add	r2, r3
34018758:	7e3b      	ldrb	r3, [r7, #24]
3401875a:	4413      	add	r3, r2
3401875c:	009b      	lsls	r3, r3, #2
3401875e:	3330      	adds	r3, #48	@ 0x30
34018760:	e07b      	b.n	3401885a <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_DECUN_NUM)
    case DECUN:
      LL_ATON_ASSERT(port < 2);
34018762:	7e3b      	ldrb	r3, [r7, #24]
34018764:	2b01      	cmp	r3, #1
34018766:	d906      	bls.n	34018776 <__atonn_getDstPortID+0xf6>
34018768:	4b45      	ldr	r3, [pc, #276]	@ (34018880 <__atonn_getDstPortID+0x200>)
3401876a:	4a3f      	ldr	r2, [pc, #252]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
3401876c:	f240 3199 	movw	r1, #921	@ 0x399
34018770:	483e      	ldr	r0, [pc, #248]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
34018772:	f001 f9a7 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
34018776:	793b      	ldrb	r3, [r7, #4]
34018778:	2b01      	cmp	r3, #1
3401877a:	d906      	bls.n	3401878a <__atonn_getDstPortID+0x10a>
3401877c:	4b41      	ldr	r3, [pc, #260]	@ (34018884 <__atonn_getDstPortID+0x204>)
3401877e:	4a3a      	ldr	r2, [pc, #232]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
34018780:	f240 319a 	movw	r1, #922	@ 0x39a
34018784:	4839      	ldr	r0, [pc, #228]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
34018786:	f001 f99d 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, DECUN, 0, 0) + (0x4 * (2 * au_num + port));
3401878a:	793b      	ldrb	r3, [r7, #4]
3401878c:	005a      	lsls	r2, r3, #1
3401878e:	7e3b      	ldrb	r3, [r7, #24]
34018790:	4413      	add	r3, r2
34018792:	009b      	lsls	r3, r3, #2
34018794:	3360      	adds	r3, #96	@ 0x60
34018796:	e060      	b.n	3401885a <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_ACTIV_NUM)
    case ACTIV:
      LL_ATON_ASSERT(port == 0);
34018798:	7e3b      	ldrb	r3, [r7, #24]
3401879a:	2b00      	cmp	r3, #0
3401879c:	d006      	beq.n	340187ac <__atonn_getDstPortID+0x12c>
3401879e:	4b34      	ldr	r3, [pc, #208]	@ (34018870 <__atonn_getDstPortID+0x1f0>)
340187a0:	4a31      	ldr	r2, [pc, #196]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
340187a2:	f44f 7168 	mov.w	r1, #928	@ 0x3a0
340187a6:	4831      	ldr	r0, [pc, #196]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
340187a8:	f001 f98c 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
340187ac:	793b      	ldrb	r3, [r7, #4]
340187ae:	2b01      	cmp	r3, #1
340187b0:	d906      	bls.n	340187c0 <__atonn_getDstPortID+0x140>
340187b2:	4b34      	ldr	r3, [pc, #208]	@ (34018884 <__atonn_getDstPortID+0x204>)
340187b4:	4a2c      	ldr	r2, [pc, #176]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
340187b6:	f240 31a1 	movw	r1, #929	@ 0x3a1
340187ba:	482c      	ldr	r0, [pc, #176]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
340187bc:	f001 f982 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ACTIV, 0, 0) + (0x4 * au_num);
340187c0:	793b      	ldrb	r3, [r7, #4]
340187c2:	009b      	lsls	r3, r3, #2
340187c4:	3370      	adds	r3, #112	@ 0x70
340187c6:	e048      	b.n	3401885a <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_ARITH_NUM)
    case ARITH:
      LL_ATON_ASSERT(port < 2);
340187c8:	7e3b      	ldrb	r3, [r7, #24]
340187ca:	2b01      	cmp	r3, #1
340187cc:	d906      	bls.n	340187dc <__atonn_getDstPortID+0x15c>
340187ce:	4b2c      	ldr	r3, [pc, #176]	@ (34018880 <__atonn_getDstPortID+0x200>)
340187d0:	4a25      	ldr	r2, [pc, #148]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
340187d2:	f240 31a7 	movw	r1, #935	@ 0x3a7
340187d6:	4825      	ldr	r0, [pc, #148]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
340187d8:	f001 f974 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
340187dc:	793b      	ldrb	r3, [r7, #4]
340187de:	2b03      	cmp	r3, #3
340187e0:	d906      	bls.n	340187f0 <__atonn_getDstPortID+0x170>
340187e2:	4b26      	ldr	r3, [pc, #152]	@ (3401887c <__atonn_getDstPortID+0x1fc>)
340187e4:	4a20      	ldr	r2, [pc, #128]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
340187e6:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
340187ea:	4820      	ldr	r0, [pc, #128]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
340187ec:	f001 f96a 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ARITH, 0, 0) + (0x4 * (2 * au_num + port));
340187f0:	793b      	ldrb	r3, [r7, #4]
340187f2:	005a      	lsls	r2, r3, #1
340187f4:	7e3b      	ldrb	r3, [r7, #24]
340187f6:	4413      	add	r3, r2
340187f8:	009b      	lsls	r3, r3, #2
340187fa:	3378      	adds	r3, #120	@ 0x78
340187fc:	e02d      	b.n	3401885a <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_POOL_NUM)
    case POOL:
      LL_ATON_ASSERT(port == 0);
340187fe:	7e3b      	ldrb	r3, [r7, #24]
34018800:	2b00      	cmp	r3, #0
34018802:	d006      	beq.n	34018812 <__atonn_getDstPortID+0x192>
34018804:	4b1a      	ldr	r3, [pc, #104]	@ (34018870 <__atonn_getDstPortID+0x1f0>)
34018806:	4a18      	ldr	r2, [pc, #96]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
34018808:	f240 31ae 	movw	r1, #942	@ 0x3ae
3401880c:	4817      	ldr	r0, [pc, #92]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
3401880e:	f001 f959 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
34018812:	793b      	ldrb	r3, [r7, #4]
34018814:	2b01      	cmp	r3, #1
34018816:	d906      	bls.n	34018826 <__atonn_getDstPortID+0x1a6>
34018818:	4b1a      	ldr	r3, [pc, #104]	@ (34018884 <__atonn_getDstPortID+0x204>)
3401881a:	4a13      	ldr	r2, [pc, #76]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
3401881c:	f240 31af 	movw	r1, #943	@ 0x3af
34018820:	4812      	ldr	r0, [pc, #72]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
34018822:	f001 f94f 	bl	34019ac4 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, POOL, 0, 0) + (0x4 * au_num);
34018826:	793b      	ldrb	r3, [r7, #4]
34018828:	009b      	lsls	r3, r3, #2
3401882a:	3398      	adds	r3, #152	@ 0x98
3401882c:	e015      	b.n	3401885a <__atonn_getDstPortID+0x1da>
      break;
#endif
    default:
      LL_ATON_ASSERT(0);
3401882e:	4b16      	ldr	r3, [pc, #88]	@ (34018888 <__atonn_getDstPortID+0x208>)
34018830:	4a0d      	ldr	r2, [pc, #52]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
34018832:	f44f 716d 	mov.w	r1, #948	@ 0x3b4
34018836:	480d      	ldr	r0, [pc, #52]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
34018838:	f001 f944 	bl	34019ac4 <__assert_func>
      break;
    }
    break;
  case STRSWITCH64:
    // TODO
    LL_ATON_ASSERT(0);
3401883c:	4b12      	ldr	r3, [pc, #72]	@ (34018888 <__atonn_getDstPortID+0x208>)
3401883e:	4a0a      	ldr	r2, [pc, #40]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
34018840:	f240 31ba 	movw	r1, #954	@ 0x3ba
34018844:	4809      	ldr	r0, [pc, #36]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
34018846:	f001 f93d 	bl	34019ac4 <__assert_func>
    break;
  case STRSWITCH_VC:
    // TODO
    LL_ATON_ASSERT(0);
3401884a:	4b0f      	ldr	r3, [pc, #60]	@ (34018888 <__atonn_getDstPortID+0x208>)
3401884c:	4a06      	ldr	r2, [pc, #24]	@ (34018868 <__atonn_getDstPortID+0x1e8>)
3401884e:	f240 31be 	movw	r1, #958	@ 0x3be
34018852:	4806      	ldr	r0, [pc, #24]	@ (3401886c <__atonn_getDstPortID+0x1ec>)
34018854:	f001 f936 	bl	34019ac4 <__assert_func>
    break;
  }
  return 0;
34018858:	2300      	movs	r3, #0
}
3401885a:	4618      	mov	r0, r3
3401885c:	370c      	adds	r7, #12
3401885e:	46bd      	mov	sp, r7
34018860:	bd90      	pop	{r4, r7, pc}
34018862:	bf00      	nop
34018864:	3401d4b8 	.word	0x3401d4b8
34018868:	3401e5a0 	.word	0x3401e5a0
3401886c:	3401d268 	.word	0x3401d268
34018870:	3401d4c4 	.word	0x3401d4c4
34018874:	3401d4d0 	.word	0x3401d4d0
34018878:	3401d4f4 	.word	0x3401d4f4
3401887c:	3401d4dc 	.word	0x3401d4dc
34018880:	3401d500 	.word	0x3401d500
34018884:	3401d4e8 	.word	0x3401d4e8
34018888:	3401d43c 	.word	0x3401d43c

3401888c <LL_EpochCtrl_Init>:
 * @param  id Epoch Controller identifier [0..ATON_EPOCHCTRL_NUM-1]
 * @param  conf Structure describing Epoch Controller initialization parameters
 * @retval Error code
 */
int LL_EpochCtrl_Init(int id, const LL_EpochCtrl_InitTypeDef *conf)
{
3401888c:	b580      	push	{r7, lr}
3401888e:	b084      	sub	sp, #16
34018890:	af00      	add	r7, sp, #0
34018892:	6078      	str	r0, [r7, #4]
34018894:	6039      	str	r1, [r7, #0]
  uint32_t t;

  if (id >= ATON_EPOCHCTRL_NUM)
34018896:	687b      	ldr	r3, [r7, #4]
34018898:	2b00      	cmp	r3, #0
3401889a:	dd02      	ble.n	340188a2 <LL_EpochCtrl_Init+0x16>
    return LL_ATON_INVALID_ID;
3401889c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340188a0:	e024      	b.n	340188ec <LL_EpochCtrl_Init+0x60>

  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
340188a2:	687b      	ldr	r3, [r7, #4]
340188a4:	3319      	adds	r3, #25
340188a6:	4618      	mov	r0, r3
340188a8:	f000 f828 	bl	340188fc <LL_ATON_EnableClock>

  /* Configure CTRL register */
  t = ATON_EPOCHCTRL_CTRL_DT;
340188ac:	2300      	movs	r3, #0
340188ae:	60fb      	str	r3, [r7, #12]
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
340188b0:	68fb      	ldr	r3, [r7, #12]
340188b2:	f023 0208 	bic.w	r2, r3, #8
340188b6:	683b      	ldr	r3, [r7, #0]
340188b8:	791b      	ldrb	r3, [r3, #4]
340188ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
340188be:	b2db      	uxtb	r3, r3
340188c0:	00db      	lsls	r3, r3, #3
340188c2:	f003 0308 	and.w	r3, r3, #8
340188c6:	4313      	orrs	r3, r2
340188c8:	60fb      	str	r3, [r7, #12]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
340188ca:	4a0a      	ldr	r2, [pc, #40]	@ (340188f4 <LL_EpochCtrl_Init+0x68>)
340188cc:	68fb      	ldr	r3, [r7, #12]
340188ce:	6013      	str	r3, [r2, #0]

  /* Check address is 8 byte aligned */
  if (conf->blobaddr & 0x7)
340188d0:	683b      	ldr	r3, [r7, #0]
340188d2:	681b      	ldr	r3, [r3, #0]
340188d4:	f003 0307 	and.w	r3, r3, #7
340188d8:	2b00      	cmp	r3, #0
340188da:	d002      	beq.n	340188e2 <LL_EpochCtrl_Init+0x56>
    return LL_ATON_INVALID_PARAM;
340188dc:	f06f 0301 	mvn.w	r3, #1
340188e0:	e004      	b.n	340188ec <LL_EpochCtrl_Init+0x60>

  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
340188e2:	4a05      	ldr	r2, [pc, #20]	@ (340188f8 <LL_EpochCtrl_Init+0x6c>)
340188e4:	683b      	ldr	r3, [r7, #0]
340188e6:	681b      	ldr	r3, [r3, #0]
340188e8:	6013      	str	r3, [r2, #0]

  return LL_ATON_OK;
340188ea:	2300      	movs	r3, #0
}
340188ec:	4618      	mov	r0, r3
340188ee:	3710      	adds	r7, #16
340188f0:	46bd      	mov	sp, r7
340188f2:	bd80      	pop	{r7, pc}
340188f4:	580fe000 	.word	0x580fe000
340188f8:	580fe008 	.word	0x580fe008

340188fc <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
340188fc:	b490      	push	{r4, r7}
340188fe:	b084      	sub	sp, #16
34018900:	af00      	add	r7, sp, #0
34018902:	6078      	str	r0, [r7, #4]
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
34018904:	4b13      	ldr	r3, [pc, #76]	@ (34018954 <LL_ATON_EnableClock+0x58>)
34018906:	681b      	ldr	r3, [r3, #0]
34018908:	60fb      	str	r3, [r7, #12]
3401890a:	f04f 0201 	mov.w	r2, #1
3401890e:	f04f 0300 	mov.w	r3, #0
34018912:	6879      	ldr	r1, [r7, #4]
34018914:	ea52 130d 	orrs.w	r3, r2, sp, lsl #4
34018918:	4613      	mov	r3, r2
3401891a:	43da      	mvns	r2, r3
3401891c:	68fb      	ldr	r3, [r7, #12]
3401891e:	ea02 0103 	and.w	r1, r2, r3
34018922:	2201      	movs	r2, #1
34018924:	687b      	ldr	r3, [r7, #4]
34018926:	fa02 f303 	lsl.w	r3, r2, r3
3401892a:	461c      	mov	r4, r3
3401892c:	f04f 0201 	mov.w	r2, #1
34018930:	f04f 0300 	mov.w	r3, #0
34018934:	6878      	ldr	r0, [r7, #4]
34018936:	ea52 030d 	orrs.w	r3, r2, sp
3401893a:	4613      	mov	r3, r2
3401893c:	4023      	ands	r3, r4
3401893e:	430b      	orrs	r3, r1
34018940:	60fb      	str	r3, [r7, #12]
34018942:	4a04      	ldr	r2, [pc, #16]	@ (34018954 <LL_ATON_EnableClock+0x58>)
34018944:	68fb      	ldr	r3, [r7, #12]
34018946:	6013      	str	r3, [r2, #0]
#endif
}
34018948:	bf00      	nop
3401894a:	3710      	adds	r7, #16
3401894c:	46bd      	mov	sp, r7
3401894e:	bc90      	pop	{r4, r7}
34018950:	4770      	bx	lr
34018952:	bf00      	nop
34018954:	580e0010 	.word	0x580e0010

34018958 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
34018958:	b480      	push	{r7}
3401895a:	b085      	sub	sp, #20
3401895c:	af00      	add	r7, sp, #0
3401895e:	6078      	str	r0, [r7, #4]
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
34018960:	4b0b      	ldr	r3, [pc, #44]	@ (34018990 <LL_ATON_DisableClock+0x38>)
34018962:	681b      	ldr	r3, [r3, #0]
34018964:	60fb      	str	r3, [r7, #12]
34018966:	f04f 0201 	mov.w	r2, #1
3401896a:	f04f 0300 	mov.w	r3, #0
3401896e:	6879      	ldr	r1, [r7, #4]
34018970:	ea52 130d 	orrs.w	r3, r2, sp, lsl #4
34018974:	4613      	mov	r3, r2
34018976:	43db      	mvns	r3, r3
34018978:	68fa      	ldr	r2, [r7, #12]
3401897a:	4013      	ands	r3, r2
3401897c:	60fb      	str	r3, [r7, #12]
3401897e:	4a04      	ldr	r2, [pc, #16]	@ (34018990 <LL_ATON_DisableClock+0x38>)
34018980:	68fb      	ldr	r3, [r7, #12]
34018982:	6013      	str	r3, [r2, #0]
#endif
}
34018984:	bf00      	nop
34018986:	3714      	adds	r7, #20
34018988:	46bd      	mov	sp, r7
3401898a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401898e:	4770      	bx	lr
34018990:	580e0010 	.word	0x580e0010

34018994 <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
34018994:	b580      	push	{r7, lr}
34018996:	b084      	sub	sp, #16
34018998:	af00      	add	r7, sp, #0
3401899a:	6078      	str	r0, [r7, #4]

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
3401899c:	687b      	ldr	r3, [r7, #4]
3401899e:	2b00      	cmp	r3, #0
340189a0:	d105      	bne.n	340189ae <LL_ATON_RT_Main+0x1a>
340189a2:	4b15      	ldr	r3, [pc, #84]	@ (340189f8 <LL_ATON_RT_Main+0x64>)
340189a4:	4a15      	ldr	r2, [pc, #84]	@ (340189fc <LL_ATON_RT_Main+0x68>)
340189a6:	212f      	movs	r1, #47	@ 0x2f
340189a8:	4815      	ldr	r0, [pc, #84]	@ (34018a00 <LL_ATON_RT_Main+0x6c>)
340189aa:	f001 f88b 	bl	34019ac4 <__assert_func>
  LL_ATON_ASSERT(network_instance->network != NULL);
340189ae:	687b      	ldr	r3, [r7, #4]
340189b0:	681b      	ldr	r3, [r3, #0]
340189b2:	2b00      	cmp	r3, #0
340189b4:	d105      	bne.n	340189c2 <LL_ATON_RT_Main+0x2e>
340189b6:	4b13      	ldr	r3, [pc, #76]	@ (34018a04 <LL_ATON_RT_Main+0x70>)
340189b8:	4a10      	ldr	r2, [pc, #64]	@ (340189fc <LL_ATON_RT_Main+0x68>)
340189ba:	2130      	movs	r1, #48	@ 0x30
340189bc:	4810      	ldr	r0, [pc, #64]	@ (34018a00 <LL_ATON_RT_Main+0x6c>)
340189be:	f001 f881 	bl	34019ac4 <__assert_func>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
340189c2:	f000 fd11 	bl	340193e8 <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
340189c6:	6878      	ldr	r0, [r7, #4]
340189c8:	f000 fc96 	bl	340192f8 <LL_ATON_RT_Init_Network>

  do
  {
    /* Execute first/next step of Cube.AI/ATON runtime */
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
340189cc:	6878      	ldr	r0, [r7, #4]
340189ce:	f000 fd83 	bl	340194d8 <LL_ATON_RT_RunEpochBlock>
340189d2:	4603      	mov	r3, r0
340189d4:	73fb      	strb	r3, [r7, #15]
    /*** Start of user event handling code ***/

    /*** End of user event handling code ***/

    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
340189d6:	7bfb      	ldrb	r3, [r7, #15]
340189d8:	2b01      	cmp	r3, #1
340189da:	d100      	bne.n	340189de <LL_ATON_RT_Main+0x4a>
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
340189dc:	bf20      	wfe
    }
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
340189de:	7bfb      	ldrb	r3, [r7, #15]
340189e0:	2b02      	cmp	r3, #2
340189e2:	d1f3      	bne.n	340189cc <LL_ATON_RT_Main+0x38>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
340189e4:	6878      	ldr	r0, [r7, #4]
340189e6:	f000 fcc1 	bl	3401936c <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
340189ea:	f000 fd59 	bl	340194a0 <LL_ATON_RT_RuntimeDeInit>

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
340189ee:	bf00      	nop
340189f0:	3710      	adds	r7, #16
340189f2:	46bd      	mov	sp, r7
340189f4:	bd80      	pop	{r7, pc}
340189f6:	bf00      	nop
340189f8:	3401d55c 	.word	0x3401d55c
340189fc:	3401e5b8 	.word	0x3401e5b8
34018a00:	3401d57c 	.word	0x3401d57c
34018a04:	3401d610 	.word	0x3401d610

34018a08 <__NVIC_EnableIRQ>:
{
34018a08:	b480      	push	{r7}
34018a0a:	b083      	sub	sp, #12
34018a0c:	af00      	add	r7, sp, #0
34018a0e:	4603      	mov	r3, r0
34018a10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34018a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34018a16:	2b00      	cmp	r3, #0
34018a18:	db0b      	blt.n	34018a32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34018a1a:	88fb      	ldrh	r3, [r7, #6]
34018a1c:	f003 021f 	and.w	r2, r3, #31
34018a20:	4907      	ldr	r1, [pc, #28]	@ (34018a40 <__NVIC_EnableIRQ+0x38>)
34018a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34018a26:	095b      	lsrs	r3, r3, #5
34018a28:	2001      	movs	r0, #1
34018a2a:	fa00 f202 	lsl.w	r2, r0, r2
34018a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
34018a32:	bf00      	nop
34018a34:	370c      	adds	r7, #12
34018a36:	46bd      	mov	sp, r7
34018a38:	f85d 7b04 	ldr.w	r7, [sp], #4
34018a3c:	4770      	bx	lr
34018a3e:	bf00      	nop
34018a40:	e000e100 	.word	0xe000e100

34018a44 <__NVIC_DisableIRQ>:
{
34018a44:	b480      	push	{r7}
34018a46:	b083      	sub	sp, #12
34018a48:	af00      	add	r7, sp, #0
34018a4a:	4603      	mov	r3, r0
34018a4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34018a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34018a52:	2b00      	cmp	r3, #0
34018a54:	db12      	blt.n	34018a7c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34018a56:	88fb      	ldrh	r3, [r7, #6]
34018a58:	f003 021f 	and.w	r2, r3, #31
34018a5c:	490a      	ldr	r1, [pc, #40]	@ (34018a88 <__NVIC_DisableIRQ+0x44>)
34018a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34018a62:	095b      	lsrs	r3, r3, #5
34018a64:	2001      	movs	r0, #1
34018a66:	fa00 f202 	lsl.w	r2, r0, r2
34018a6a:	3320      	adds	r3, #32
34018a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
34018a70:	f3bf 8f4f 	dsb	sy
}
34018a74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34018a76:	f3bf 8f6f 	isb	sy
}
34018a7a:	bf00      	nop
}
34018a7c:	bf00      	nop
34018a7e:	370c      	adds	r7, #12
34018a80:	46bd      	mov	sp, r7
34018a82:	f85d 7b04 	ldr.w	r7, [sp], #4
34018a86:	4770      	bx	lr
34018a88:	e000e100 	.word	0xe000e100

34018a8c <EpochBlock_IsLastEpochBlock>:
  /**
   * @}
   */

  static inline bool EpochBlock_IsLastEpochBlock(const EpochBlock_ItemTypeDef *eb)
  {
34018a8c:	b480      	push	{r7}
34018a8e:	b083      	sub	sp, #12
34018a90:	af00      	add	r7, sp, #0
34018a92:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_last_eb) != 0);
34018a94:	687b      	ldr	r3, [r7, #4]
34018a96:	8a1b      	ldrh	r3, [r3, #16]
34018a98:	f003 0308 	and.w	r3, r3, #8
34018a9c:	2b00      	cmp	r3, #0
34018a9e:	bf14      	ite	ne
34018aa0:	2301      	movne	r3, #1
34018aa2:	2300      	moveq	r3, #0
34018aa4:	b2db      	uxtb	r3, r3
  }
34018aa6:	4618      	mov	r0, r3
34018aa8:	370c      	adds	r7, #12
34018aaa:	46bd      	mov	sp, r7
34018aac:	f85d 7b04 	ldr.w	r7, [sp], #4
34018ab0:	4770      	bx	lr

34018ab2 <EpochBlock_IsEpochStart>:

  static inline bool EpochBlock_IsEpochStart(const EpochBlock_ItemTypeDef *eb)
  {
34018ab2:	b480      	push	{r7}
34018ab4:	b083      	sub	sp, #12
34018ab6:	af00      	add	r7, sp, #0
34018ab8:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
34018aba:	687b      	ldr	r3, [r7, #4]
34018abc:	8a1b      	ldrh	r3, [r3, #16]
34018abe:	f003 0301 	and.w	r3, r3, #1
34018ac2:	2b00      	cmp	r3, #0
34018ac4:	bf14      	ite	ne
34018ac6:	2301      	movne	r3, #1
34018ac8:	2300      	moveq	r3, #0
34018aca:	b2db      	uxtb	r3, r3
  }
34018acc:	4618      	mov	r0, r3
34018ace:	370c      	adds	r7, #12
34018ad0:	46bd      	mov	sp, r7
34018ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
34018ad6:	4770      	bx	lr

34018ad8 <EpochBlock_IsEpochBlob>:
  {
    return ((eb->flags & EpochBlock_Flags_epoch_end) != 0);
  }

  static inline bool EpochBlock_IsEpochBlob(const EpochBlock_ItemTypeDef *eb)
  {
34018ad8:	b480      	push	{r7}
34018ada:	b083      	sub	sp, #12
34018adc:	af00      	add	r7, sp, #0
34018ade:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_blob) != 0);
34018ae0:	687b      	ldr	r3, [r7, #4]
34018ae2:	8a1b      	ldrh	r3, [r3, #16]
34018ae4:	f003 0304 	and.w	r3, r3, #4
34018ae8:	2b00      	cmp	r3, #0
34018aea:	bf14      	ite	ne
34018aec:	2301      	movne	r3, #1
34018aee:	2300      	moveq	r3, #0
34018af0:	b2db      	uxtb	r3, r3
  }
34018af2:	4618      	mov	r0, r3
34018af4:	370c      	adds	r7, #12
34018af6:	46bd      	mov	sp, r7
34018af8:	f85d 7b04 	ldr.w	r7, [sp], #4
34018afc:	4770      	bx	lr

34018afe <EpochBlock_IsEpochPureHW>:
  {
    return ((eb->flags & EpochBlock_Flags_pure_sw) != 0);
  }

  static inline bool EpochBlock_IsEpochPureHW(const EpochBlock_ItemTypeDef *eb)
  {
34018afe:	b480      	push	{r7}
34018b00:	b083      	sub	sp, #12
34018b02:	af00      	add	r7, sp, #0
34018b04:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
34018b06:	687b      	ldr	r3, [r7, #4]
34018b08:	8a1b      	ldrh	r3, [r3, #16]
34018b0a:	f003 0310 	and.w	r3, r3, #16
34018b0e:	2b00      	cmp	r3, #0
34018b10:	bf14      	ite	ne
34018b12:	2301      	movne	r3, #1
34018b14:	2300      	moveq	r3, #0
34018b16:	b2db      	uxtb	r3, r3
  }
34018b18:	4618      	mov	r0, r3
34018b1a:	370c      	adds	r7, #12
34018b1c:	46bd      	mov	sp, r7
34018b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
34018b22:	4770      	bx	lr

34018b24 <EpochBlock_IsEpochHybrid>:

  static inline bool EpochBlock_IsEpochHybrid(const EpochBlock_ItemTypeDef *eb)
  {
34018b24:	b480      	push	{r7}
34018b26:	b083      	sub	sp, #12
34018b28:	af00      	add	r7, sp, #0
34018b2a:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_hybrid) != 0);
34018b2c:	687b      	ldr	r3, [r7, #4]
34018b2e:	8a1b      	ldrh	r3, [r3, #16]
34018b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34018b34:	2b00      	cmp	r3, #0
34018b36:	bf14      	ite	ne
34018b38:	2301      	movne	r3, #1
34018b3a:	2300      	moveq	r3, #0
34018b3c:	b2db      	uxtb	r3, r3
  }
34018b3e:	4618      	mov	r0, r3
34018b40:	370c      	adds	r7, #12
34018b42:	46bd      	mov	sp, r7
34018b44:	f85d 7b04 	ldr.w	r7, [sp], #4
34018b48:	4770      	bx	lr

34018b4a <EpochBlock_IsEpochInternal>:

  static inline bool EpochBlock_IsEpochInternal(const EpochBlock_ItemTypeDef *eb)
  {
34018b4a:	b480      	push	{r7}
34018b4c:	b083      	sub	sp, #12
34018b4e:	af00      	add	r7, sp, #0
34018b50:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
34018b52:	687b      	ldr	r3, [r7, #4]
34018b54:	8a1b      	ldrh	r3, [r3, #16]
34018b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34018b5a:	2b00      	cmp	r3, #0
34018b5c:	bf14      	ite	ne
34018b5e:	2301      	movne	r3, #1
34018b60:	2300      	moveq	r3, #0
34018b62:	b2db      	uxtb	r3, r3
  }
34018b64:	4618      	mov	r0, r3
34018b66:	370c      	adds	r7, #12
34018b68:	46bd      	mov	sp, r7
34018b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34018b6e:	4770      	bx	lr

34018b70 <EpochBlock_EpochControllerUnit>:

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
34018b70:	b580      	push	{r7, lr}
34018b72:	b082      	sub	sp, #8
34018b74:	af00      	add	r7, sp, #0
34018b76:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
34018b78:	6878      	ldr	r0, [r7, #4]
34018b7a:	f7ff ffad 	bl	34018ad8 <EpochBlock_IsEpochBlob>
34018b7e:	4603      	mov	r3, r0
34018b80:	2b00      	cmp	r3, #0
34018b82:	d106      	bne.n	34018b92 <EpochBlock_EpochControllerUnit+0x22>
34018b84:	4b06      	ldr	r3, [pc, #24]	@ (34018ba0 <EpochBlock_EpochControllerUnit+0x30>)
34018b86:	4a07      	ldr	r2, [pc, #28]	@ (34018ba4 <EpochBlock_EpochControllerUnit+0x34>)
34018b88:	f240 212f 	movw	r1, #559	@ 0x22f
34018b8c:	4806      	ldr	r0, [pc, #24]	@ (34018ba8 <EpochBlock_EpochControllerUnit+0x38>)
34018b8e:	f000 ff99 	bl	34019ac4 <__assert_func>
    return eb->wait_mask;
34018b92:	687b      	ldr	r3, [r7, #4]
34018b94:	68db      	ldr	r3, [r3, #12]
  }
34018b96:	4618      	mov	r0, r3
34018b98:	3708      	adds	r7, #8
34018b9a:	46bd      	mov	sp, r7
34018b9c:	bd80      	pop	{r7, pc}
34018b9e:	bf00      	nop
34018ba0:	3401d63c 	.word	0x3401d63c
34018ba4:	3401e6d8 	.word	0x3401e6d8
34018ba8:	3401d658 	.word	0x3401d658

34018bac <EpochBlock_EpochBlobAddr>:

  static inline uintptr_t EpochBlock_EpochBlobAddr(const EpochBlock_ItemTypeDef *eb)
  {
34018bac:	b580      	push	{r7, lr}
34018bae:	b082      	sub	sp, #8
34018bb0:	af00      	add	r7, sp, #0
34018bb2:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
34018bb4:	6878      	ldr	r0, [r7, #4]
34018bb6:	f7ff ff8f 	bl	34018ad8 <EpochBlock_IsEpochBlob>
34018bba:	4603      	mov	r3, r0
34018bbc:	2b00      	cmp	r3, #0
34018bbe:	d106      	bne.n	34018bce <EpochBlock_EpochBlobAddr+0x22>
34018bc0:	4b06      	ldr	r3, [pc, #24]	@ (34018bdc <EpochBlock_EpochBlobAddr+0x30>)
34018bc2:	4a07      	ldr	r2, [pc, #28]	@ (34018be0 <EpochBlock_EpochBlobAddr+0x34>)
34018bc4:	f240 2135 	movw	r1, #565	@ 0x235
34018bc8:	4806      	ldr	r0, [pc, #24]	@ (34018be4 <EpochBlock_EpochBlobAddr+0x38>)
34018bca:	f000 ff7b 	bl	34019ac4 <__assert_func>
    return eb->blob_address;
34018bce:	687b      	ldr	r3, [r7, #4]
34018bd0:	689b      	ldr	r3, [r3, #8]
  }
34018bd2:	4618      	mov	r0, r3
34018bd4:	3708      	adds	r7, #8
34018bd6:	46bd      	mov	sp, r7
34018bd8:	bd80      	pop	{r7, pc}
34018bda:	bf00      	nop
34018bdc:	3401d63c 	.word	0x3401d63c
34018be0:	3401e6f8 	.word	0x3401e6f8
34018be4:	3401d658 	.word	0x3401d658

34018be8 <__ll_set_aton_owner>:
  typedef EpochBlock_ItemTypeDef LL_ATON_RT_EpochBlockItem_t;

  /*** Helper Functions ***/

  static inline void __ll_set_aton_owner(NN_Instance_TypeDef *new_owner)
  {
34018be8:	b580      	push	{r7, lr}
34018bea:	b082      	sub	sp, #8
34018bec:	af00      	add	r7, sp, #0
34018bee:	6078      	str	r0, [r7, #4]
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
34018bf0:	4b12      	ldr	r3, [pc, #72]	@ (34018c3c <__ll_set_aton_owner+0x54>)
34018bf2:	681b      	ldr	r3, [r3, #0]
34018bf4:	687a      	ldr	r2, [r7, #4]
34018bf6:	429a      	cmp	r2, r3
34018bf8:	d105      	bne.n	34018c06 <__ll_set_aton_owner+0x1e>
34018bfa:	4b11      	ldr	r3, [pc, #68]	@ (34018c40 <__ll_set_aton_owner+0x58>)
34018bfc:	4a11      	ldr	r2, [pc, #68]	@ (34018c44 <__ll_set_aton_owner+0x5c>)
34018bfe:	2131      	movs	r1, #49	@ 0x31
34018c00:	4811      	ldr	r0, [pc, #68]	@ (34018c48 <__ll_set_aton_owner+0x60>)
34018c02:	f000 ff5f 	bl	34019ac4 <__assert_func>

    LL_ATON_OSAL_LOCK_ATON();

    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
34018c06:	4b0d      	ldr	r3, [pc, #52]	@ (34018c3c <__ll_set_aton_owner+0x54>)
34018c08:	681b      	ldr	r3, [r3, #0]
34018c0a:	2b00      	cmp	r3, #0
34018c0c:	d005      	beq.n	34018c1a <__ll_set_aton_owner+0x32>
34018c0e:	4b0f      	ldr	r3, [pc, #60]	@ (34018c4c <__ll_set_aton_owner+0x64>)
34018c10:	4a0c      	ldr	r2, [pc, #48]	@ (34018c44 <__ll_set_aton_owner+0x5c>)
34018c12:	2135      	movs	r1, #53	@ 0x35
34018c14:	480c      	ldr	r0, [pc, #48]	@ (34018c48 <__ll_set_aton_owner+0x60>)
34018c16:	f000 ff55 	bl	34019ac4 <__assert_func>

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
34018c1a:	4b0d      	ldr	r3, [pc, #52]	@ (34018c50 <__ll_set_aton_owner+0x68>)
34018c1c:	681b      	ldr	r3, [r3, #0]
34018c1e:	2b00      	cmp	r3, #0
34018c20:	d005      	beq.n	34018c2e <__ll_set_aton_owner+0x46>
34018c22:	4b0c      	ldr	r3, [pc, #48]	@ (34018c54 <__ll_set_aton_owner+0x6c>)
34018c24:	4a07      	ldr	r2, [pc, #28]	@ (34018c44 <__ll_set_aton_owner+0x5c>)
34018c26:	2139      	movs	r1, #57	@ 0x39
34018c28:	4807      	ldr	r0, [pc, #28]	@ (34018c48 <__ll_set_aton_owner+0x60>)
34018c2a:	f000 ff4b 	bl	34019ac4 <__assert_func>
#endif // NDEBUG

    __ll_current_aton_ip_owner = new_owner;
34018c2e:	4a03      	ldr	r2, [pc, #12]	@ (34018c3c <__ll_set_aton_owner+0x54>)
34018c30:	687b      	ldr	r3, [r7, #4]
34018c32:	6013      	str	r3, [r2, #0]
  }
34018c34:	bf00      	nop
34018c36:	3708      	adds	r7, #8
34018c38:	46bd      	mov	sp, r7
34018c3a:	bd80      	pop	{r7, pc}
34018c3c:	3401f950 	.word	0x3401f950
34018c40:	3401d6f0 	.word	0x3401d6f0
34018c44:	3401e6a8 	.word	0x3401e6a8
34018c48:	3401d718 	.word	0x3401d718
34018c4c:	3401d7ac 	.word	0x3401d7ac
34018c50:	3401f954 	.word	0x3401f954
34018c54:	3401d7d8 	.word	0x3401d7d8

34018c58 <__ll_clear_aton_owner>:

  static inline void __ll_clear_aton_owner(NN_Instance_TypeDef *current_owner)
  {
34018c58:	b580      	push	{r7, lr}
34018c5a:	b082      	sub	sp, #8
34018c5c:	af00      	add	r7, sp, #0
34018c5e:	6078      	str	r0, [r7, #4]
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
34018c60:	4b0d      	ldr	r3, [pc, #52]	@ (34018c98 <__ll_clear_aton_owner+0x40>)
34018c62:	681b      	ldr	r3, [r3, #0]
34018c64:	687a      	ldr	r2, [r7, #4]
34018c66:	429a      	cmp	r2, r3
34018c68:	d005      	beq.n	34018c76 <__ll_clear_aton_owner+0x1e>
34018c6a:	4b0c      	ldr	r3, [pc, #48]	@ (34018c9c <__ll_clear_aton_owner+0x44>)
34018c6c:	4a0c      	ldr	r2, [pc, #48]	@ (34018ca0 <__ll_clear_aton_owner+0x48>)
34018c6e:	2142      	movs	r1, #66	@ 0x42
34018c70:	480c      	ldr	r0, [pc, #48]	@ (34018ca4 <__ll_clear_aton_owner+0x4c>)
34018c72:	f000 ff27 	bl	34019ac4 <__assert_func>

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
34018c76:	4b0c      	ldr	r3, [pc, #48]	@ (34018ca8 <__ll_clear_aton_owner+0x50>)
34018c78:	681b      	ldr	r3, [r3, #0]
34018c7a:	2b00      	cmp	r3, #0
34018c7c:	d005      	beq.n	34018c8a <__ll_clear_aton_owner+0x32>
34018c7e:	4b0b      	ldr	r3, [pc, #44]	@ (34018cac <__ll_clear_aton_owner+0x54>)
34018c80:	4a07      	ldr	r2, [pc, #28]	@ (34018ca0 <__ll_clear_aton_owner+0x48>)
34018c82:	2146      	movs	r1, #70	@ 0x46
34018c84:	4807      	ldr	r0, [pc, #28]	@ (34018ca4 <__ll_clear_aton_owner+0x4c>)
34018c86:	f000 ff1d 	bl	34019ac4 <__assert_func>
#endif // NDEBUG

    __ll_current_aton_ip_owner = NULL;
34018c8a:	4b03      	ldr	r3, [pc, #12]	@ (34018c98 <__ll_clear_aton_owner+0x40>)
34018c8c:	2200      	movs	r2, #0
34018c8e:	601a      	str	r2, [r3, #0]
    LL_ATON_OSAL_UNLOCK_ATON();
  }
34018c90:	bf00      	nop
34018c92:	3708      	adds	r7, #8
34018c94:	46bd      	mov	sp, r7
34018c96:	bd80      	pop	{r7, pc}
34018c98:	3401f950 	.word	0x3401f950
34018c9c:	3401d7f4 	.word	0x3401d7f4
34018ca0:	3401e608 	.word	0x3401e608
34018ca4:	3401d718 	.word	0x3401d718
34018ca8:	3401f954 	.word	0x3401f954
34018cac:	3401d7d8 	.word	0x3401d7d8

34018cb0 <__LL_ATON_RT_Start_AtoNN_Epoch>:
   *  Note: the following function may only be called at the beginning of
   *       `LL_ATON_Start_EpochBlock<n>()` functions, assuming also that at that point
   *       no streaming engine interrupts might trigger (anymore)!
   **/
  static inline void __LL_ATON_RT_Start_AtoNN_Epoch(NN_Instance_TypeDef *nn_instance)
  {
34018cb0:	b580      	push	{r7, lr}
34018cb2:	b082      	sub	sp, #8
34018cb4:	af00      	add	r7, sp, #0
34018cb6:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(nn_instance != NULL);
34018cb8:	687b      	ldr	r3, [r7, #4]
34018cba:	2b00      	cmp	r3, #0
34018cbc:	d105      	bne.n	34018cca <__LL_ATON_RT_Start_AtoNN_Epoch+0x1a>
34018cbe:	4b0a      	ldr	r3, [pc, #40]	@ (34018ce8 <__LL_ATON_RT_Start_AtoNN_Epoch+0x38>)
34018cc0:	4a0a      	ldr	r2, [pc, #40]	@ (34018cec <__LL_ATON_RT_Start_AtoNN_Epoch+0x3c>)
34018cc2:	2154      	movs	r1, #84	@ 0x54
34018cc4:	480a      	ldr	r0, [pc, #40]	@ (34018cf0 <__LL_ATON_RT_Start_AtoNN_Epoch+0x40>)
34018cc6:	f000 fefd 	bl	34019ac4 <__assert_func>
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
34018cca:	687b      	ldr	r3, [r7, #4]
34018ccc:	69db      	ldr	r3, [r3, #28]
34018cce:	2b00      	cmp	r3, #0
34018cd0:	d005      	beq.n	34018cde <__LL_ATON_RT_Start_AtoNN_Epoch+0x2e>
34018cd2:	4b08      	ldr	r3, [pc, #32]	@ (34018cf4 <__LL_ATON_RT_Start_AtoNN_Epoch+0x44>)
34018cd4:	4a05      	ldr	r2, [pc, #20]	@ (34018cec <__LL_ATON_RT_Start_AtoNN_Epoch+0x3c>)
34018cd6:	2156      	movs	r1, #86	@ 0x56
34018cd8:	4805      	ldr	r0, [pc, #20]	@ (34018cf0 <__LL_ATON_RT_Start_AtoNN_Epoch+0x40>)
34018cda:	f000 fef3 	bl	34019ac4 <__assert_func>
                   0x0); // with the removal of parallel SW/HW epochs execution all triggered events must have been
                         // cleared at this point in time!
#endif
  }
34018cde:	bf00      	nop
34018ce0:	3708      	adds	r7, #8
34018ce2:	46bd      	mov	sp, r7
34018ce4:	bd80      	pop	{r7, pc}
34018ce6:	bf00      	nop
34018ce8:	3401d820 	.word	0x3401d820
34018cec:	3401e688 	.word	0x3401e688
34018cf0:	3401d718 	.word	0x3401d718
34018cf4:	3401d83c 	.word	0x3401d83c

34018cf8 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
34018cf8:	b580      	push	{r7, lr}
34018cfa:	b082      	sub	sp, #8
34018cfc:	af00      	add	r7, sp, #0
34018cfe:	6078      	str	r0, [r7, #4]
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34018d00:	4b0a      	ldr	r3, [pc, #40]	@ (34018d2c <__LL_ATON_RT_SetWaitMask+0x34>)
34018d02:	681b      	ldr	r3, [r3, #0]
34018d04:	2b00      	cmp	r3, #0
34018d06:	d105      	bne.n	34018d14 <__LL_ATON_RT_SetWaitMask+0x1c>
34018d08:	4b09      	ldr	r3, [pc, #36]	@ (34018d30 <__LL_ATON_RT_SetWaitMask+0x38>)
34018d0a:	4a0a      	ldr	r2, [pc, #40]	@ (34018d34 <__LL_ATON_RT_SetWaitMask+0x3c>)
34018d0c:	2175      	movs	r1, #117	@ 0x75
34018d0e:	480a      	ldr	r0, [pc, #40]	@ (34018d38 <__LL_ATON_RT_SetWaitMask+0x40>)
34018d10:	f000 fed8 	bl	34019ac4 <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
34018d14:	4a09      	ldr	r2, [pc, #36]	@ (34018d3c <__LL_ATON_RT_SetWaitMask+0x44>)
34018d16:	687b      	ldr	r3, [r7, #4]
34018d18:	6013      	str	r3, [r2, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
34018d1a:	4a09      	ldr	r2, [pc, #36]	@ (34018d40 <__LL_ATON_RT_SetWaitMask+0x48>)
34018d1c:	687b      	ldr	r3, [r7, #4]
34018d1e:	43db      	mvns	r3, r3
34018d20:	6013      	str	r3, [r2, #0]
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
34018d22:	bf00      	nop
34018d24:	3708      	adds	r7, #8
34018d26:	46bd      	mov	sp, r7
34018d28:	bd80      	pop	{r7, pc}
34018d2a:	bf00      	nop
34018d2c:	3401f950 	.word	0x3401f950
34018d30:	3401d86c 	.word	0x3401d86c
34018d34:	3401e6bc 	.word	0x3401e6bc
34018d38:	3401d718 	.word	0x3401d718
34018d3c:	3401f954 	.word	0x3401f954
34018d40:	580e1024 	.word	0x580e1024

34018d44 <__LL_ATON_RT_RetFromLibEpochBlockArray>:

  /* return from inserted epoch block */
  static inline void __LL_ATON_RT_RetFromLibEpochBlockArray(bool unlock, NN_Instance_TypeDef *nn_instance)
  {
34018d44:	b580      	push	{r7, lr}
34018d46:	b082      	sub	sp, #8
34018d48:	af00      	add	r7, sp, #0
34018d4a:	4603      	mov	r3, r0
34018d4c:	6039      	str	r1, [r7, #0]
34018d4e:	71fb      	strb	r3, [r7, #7]
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;

    if (!unlock)
34018d50:	79fb      	ldrb	r3, [r7, #7]
34018d52:	f083 0301 	eor.w	r3, r3, #1
34018d56:	b2db      	uxtb	r3, r3
34018d58:	2b00      	cmp	r3, #0
34018d5a:	d015      	beq.n	34018d88 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x44>
    {
      LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34018d5c:	4b38      	ldr	r3, [pc, #224]	@ (34018e40 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
34018d5e:	681b      	ldr	r3, [r3, #0]
34018d60:	2b00      	cmp	r3, #0
34018d62:	d105      	bne.n	34018d70 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x2c>
34018d64:	4b37      	ldr	r3, [pc, #220]	@ (34018e44 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x100>)
34018d66:	4a38      	ldr	r2, [pc, #224]	@ (34018e48 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
34018d68:	2191      	movs	r1, #145	@ 0x91
34018d6a:	4838      	ldr	r0, [pc, #224]	@ (34018e4c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
34018d6c:	f000 feaa 	bl	34019ac4 <__assert_func>
      LL_ATON_ASSERT(nn_instance == NULL);
34018d70:	683b      	ldr	r3, [r7, #0]
34018d72:	2b00      	cmp	r3, #0
34018d74:	d005      	beq.n	34018d82 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x3e>
34018d76:	4b36      	ldr	r3, [pc, #216]	@ (34018e50 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x10c>)
34018d78:	4a33      	ldr	r2, [pc, #204]	@ (34018e48 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
34018d7a:	2192      	movs	r1, #146	@ 0x92
34018d7c:	4833      	ldr	r0, [pc, #204]	@ (34018e4c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
34018d7e:	f000 fea1 	bl	34019ac4 <__assert_func>

      nn_instance = __ll_current_aton_ip_owner;
34018d82:	4b2f      	ldr	r3, [pc, #188]	@ (34018e40 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
34018d84:	681b      	ldr	r3, [r3, #0]
34018d86:	603b      	str	r3, [r7, #0]
    }

    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34018d88:	4b2d      	ldr	r3, [pc, #180]	@ (34018e40 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
34018d8a:	681b      	ldr	r3, [r3, #0]
34018d8c:	2b00      	cmp	r3, #0
34018d8e:	d105      	bne.n	34018d9c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x58>
34018d90:	4b2c      	ldr	r3, [pc, #176]	@ (34018e44 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x100>)
34018d92:	4a2d      	ldr	r2, [pc, #180]	@ (34018e48 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
34018d94:	2197      	movs	r1, #151	@ 0x97
34018d96:	482d      	ldr	r0, [pc, #180]	@ (34018e4c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
34018d98:	f000 fe94 	bl	34019ac4 <__assert_func>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
34018d9c:	79fb      	ldrb	r3, [r7, #7]
34018d9e:	2b00      	cmp	r3, #0
34018da0:	d006      	beq.n	34018db0 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x6c>
34018da2:	683b      	ldr	r3, [r7, #0]
34018da4:	685b      	ldr	r3, [r3, #4]
34018da6:	4618      	mov	r0, r3
34018da8:	f7ff fe70 	bl	34018a8c <EpochBlock_IsLastEpochBlock>
34018dac:	4603      	mov	r3, r0
34018dae:	e005      	b.n	34018dbc <__LL_ATON_RT_RetFromLibEpochBlockArray+0x78>
34018db0:	683b      	ldr	r3, [r7, #0]
34018db2:	685b      	ldr	r3, [r3, #4]
34018db4:	4618      	mov	r0, r3
34018db6:	f7ff fec8 	bl	34018b4a <EpochBlock_IsEpochInternal>
34018dba:	4603      	mov	r3, r0
34018dbc:	2b00      	cmp	r3, #0
34018dbe:	d105      	bne.n	34018dcc <__LL_ATON_RT_RetFromLibEpochBlockArray+0x88>
34018dc0:	4b24      	ldr	r3, [pc, #144]	@ (34018e54 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x110>)
34018dc2:	4a21      	ldr	r2, [pc, #132]	@ (34018e48 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
34018dc4:	2198      	movs	r1, #152	@ 0x98
34018dc6:	4821      	ldr	r0, [pc, #132]	@ (34018e4c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
34018dc8:	f000 fe7c 	bl	34019ac4 <__assert_func>
                          : EpochBlock_IsEpochInternal(nn_instance->exec_state.current_epoch_block));
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
34018dcc:	683b      	ldr	r3, [r7, #0]
34018dce:	691b      	ldr	r3, [r3, #16]
34018dd0:	4618      	mov	r0, r3
34018dd2:	f7ff fea7 	bl	34018b24 <EpochBlock_IsEpochHybrid>
34018dd6:	4603      	mov	r3, r0
34018dd8:	2b00      	cmp	r3, #0
34018dda:	d105      	bne.n	34018de8 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xa4>
34018ddc:	4b1e      	ldr	r3, [pc, #120]	@ (34018e58 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x114>)
34018dde:	4a1a      	ldr	r2, [pc, #104]	@ (34018e48 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
34018de0:	219a      	movs	r1, #154	@ 0x9a
34018de2:	481a      	ldr	r0, [pc, #104]	@ (34018e4c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
34018de4:	f000 fe6e 	bl	34019ac4 <__assert_func>

    /* Clear owner */
    if (unlock)
34018de8:	79fb      	ldrb	r3, [r7, #7]
34018dea:	2b00      	cmp	r3, #0
34018dec:	d004      	beq.n	34018df8 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xb4>
    {
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
34018dee:	4b14      	ldr	r3, [pc, #80]	@ (34018e40 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
34018df0:	681b      	ldr	r3, [r3, #0]
34018df2:	4618      	mov	r0, r3
34018df4:	f7ff ff30 	bl	34018c58 <__ll_clear_aton_owner>
    }

    /* set old context */
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
34018df8:	683b      	ldr	r3, [r7, #0]
34018dfa:	68db      	ldr	r3, [r3, #12]
34018dfc:	2b00      	cmp	r3, #0
34018dfe:	d005      	beq.n	34018e0c <__LL_ATON_RT_RetFromLibEpochBlockArray+0xc8>
34018e00:	4b16      	ldr	r3, [pc, #88]	@ (34018e5c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x118>)
34018e02:	4a11      	ldr	r2, [pc, #68]	@ (34018e48 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
34018e04:	21a3      	movs	r1, #163	@ 0xa3
34018e06:	4811      	ldr	r0, [pc, #68]	@ (34018e4c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
34018e08:	f000 fe5c 	bl	34019ac4 <__assert_func>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
34018e0c:	683b      	ldr	r3, [r7, #0]
34018e0e:	691a      	ldr	r2, [r3, #16]
34018e10:	683b      	ldr	r3, [r7, #0]
34018e12:	605a      	str	r2, [r3, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
34018e14:	683b      	ldr	r3, [r7, #0]
34018e16:	695a      	ldr	r2, [r3, #20]
34018e18:	683b      	ldr	r3, [r7, #0]
34018e1a:	609a      	str	r2, [r3, #8]

#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
34018e1c:	683b      	ldr	r3, [r7, #0]
34018e1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34018e20:	683b      	ldr	r3, [r7, #0]
34018e22:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

    /* reset saved context */
    nn_instance->exec_state.saved_current_epoch_block = NULL;
34018e24:	683b      	ldr	r3, [r7, #0]
34018e26:	2200      	movs	r2, #0
34018e28:	611a      	str	r2, [r3, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
34018e2a:	683b      	ldr	r3, [r7, #0]
34018e2c:	2200      	movs	r2, #0
34018e2e:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
34018e30:	683b      	ldr	r3, [r7, #0]
34018e32:	2200      	movs	r2, #0
34018e34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
  }
34018e36:	bf00      	nop
34018e38:	3708      	adds	r7, #8
34018e3a:	46bd      	mov	sp, r7
34018e3c:	bd80      	pop	{r7, pc}
34018e3e:	bf00      	nop
34018e40:	3401f950 	.word	0x3401f950
34018e44:	3401d86c 	.word	0x3401d86c
34018e48:	3401e63c 	.word	0x3401e63c
34018e4c:	3401d718 	.word	0x3401d718
34018e50:	3401d898 	.word	0x3401d898
34018e54:	3401d8b4 	.word	0x3401d8b4
34018e58:	3401d950 	.word	0x3401d950
34018e5c:	3401d99c 	.word	0x3401d99c

34018e60 <dump_dma_state>:
#error current ATON runtime supports only up to 32 epoch controllers!
#endif // (ATON_EPOCHCTRL_NUM > 32)

#endif // `ATON_INT_NR` and `ATON_STRENG_NUM` are defined

LL_ATON_WEAK void dump_dma_state(void){};
34018e60:	b480      	push	{r7}
34018e62:	af00      	add	r7, sp, #0
34018e64:	bf00      	nop
34018e66:	46bd      	mov	sp, r7
34018e68:	f85d 7b04 	ldr.w	r7, [sp], #4
34018e6c:	4770      	bx	lr

34018e6e <__LL_ATON_RT_CntEpochBlocks>:

/*** Helper Functions ***/

#ifndef NDEBUG
static uint32_t __LL_ATON_RT_CntEpochBlocks(const LL_ATON_RT_EpochBlockItem_t *list)
{
34018e6e:	b580      	push	{r7, lr}
34018e70:	b084      	sub	sp, #16
34018e72:	af00      	add	r7, sp, #0
34018e74:	6078      	str	r0, [r7, #4]
  int i = 0;
34018e76:	2300      	movs	r3, #0
34018e78:	60fb      	str	r3, [r7, #12]

  if (list != NULL)
34018e7a:	687b      	ldr	r3, [r7, #4]
34018e7c:	2b00      	cmp	r3, #0
34018e7e:	d011      	beq.n	34018ea4 <__LL_ATON_RT_CntEpochBlocks+0x36>
  {
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
34018e80:	2301      	movs	r3, #1
34018e82:	60fb      	str	r3, [r7, #12]
34018e84:	e005      	b.n	34018e92 <__LL_ATON_RT_CntEpochBlocks+0x24>
    { // Note: also terminating empty epoch block is counted
      list++;
34018e86:	687b      	ldr	r3, [r7, #4]
34018e88:	3314      	adds	r3, #20
34018e8a:	607b      	str	r3, [r7, #4]
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
34018e8c:	68fb      	ldr	r3, [r7, #12]
34018e8e:	3301      	adds	r3, #1
34018e90:	60fb      	str	r3, [r7, #12]
34018e92:	6878      	ldr	r0, [r7, #4]
34018e94:	f7ff fdfa 	bl	34018a8c <EpochBlock_IsLastEpochBlock>
34018e98:	4603      	mov	r3, r0
34018e9a:	f083 0301 	eor.w	r3, r3, #1
34018e9e:	b2db      	uxtb	r3, r3
34018ea0:	2b00      	cmp	r3, #0
34018ea2:	d1f0      	bne.n	34018e86 <__LL_ATON_RT_CntEpochBlocks+0x18>
    }
  }

  return i;
34018ea4:	68fb      	ldr	r3, [r7, #12]
}
34018ea6:	4618      	mov	r0, r3
34018ea8:	3710      	adds	r7, #16
34018eaa:	46bd      	mov	sp, r7
34018eac:	bd80      	pop	{r7, pc}
	...

34018eb0 <__LL_ATON_RT_ExecStartEpochBlock>:
#endif

static inline void __LL_ATON_RT_ExecStartEpochBlock(const LL_ATON_RT_EpochBlockItem_t *eb,
                                                    NN_Instance_TypeDef *nn_instance)
{
34018eb0:	b580      	push	{r7, lr}
34018eb2:	b086      	sub	sp, #24
34018eb4:	af00      	add	r7, sp, #0
34018eb6:	6078      	str	r0, [r7, #4]
34018eb8:	6039      	str	r1, [r7, #0]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
34018eba:	683b      	ldr	r3, [r7, #0]
34018ebc:	68db      	ldr	r3, [r3, #12]
34018ebe:	2b00      	cmp	r3, #0
34018ec0:	d005      	beq.n	34018ece <__LL_ATON_RT_ExecStartEpochBlock+0x1e>
34018ec2:	4b4a      	ldr	r3, [pc, #296]	@ (34018fec <__LL_ATON_RT_ExecStartEpochBlock+0x13c>)
34018ec4:	4a4a      	ldr	r2, [pc, #296]	@ (34018ff0 <__LL_ATON_RT_ExecStartEpochBlock+0x140>)
34018ec6:	2161      	movs	r1, #97	@ 0x61
34018ec8:	484a      	ldr	r0, [pc, #296]	@ (34018ff4 <__LL_ATON_RT_ExecStartEpochBlock+0x144>)
34018eca:	f000 fdfb 	bl	34019ac4 <__assert_func>

  if (nn_instance->exec_state.epoch_callback_function != NULL)
34018ece:	683b      	ldr	r3, [r7, #0]
34018ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34018ed2:	2b00      	cmp	r3, #0
34018ed4:	d005      	beq.n	34018ee2 <__LL_ATON_RT_ExecStartEpochBlock+0x32>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
34018ed6:	683b      	ldr	r3, [r7, #0]
34018ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34018eda:	687a      	ldr	r2, [r7, #4]
34018edc:	6839      	ldr	r1, [r7, #0]
34018ede:	2000      	movs	r0, #0
34018ee0:	4798      	blx	r3

  /* Is it the first epoch block in an AtoNN epoch? */
  if (EpochBlock_IsEpochStart(eb))
34018ee2:	6878      	ldr	r0, [r7, #4]
34018ee4:	f7ff fde5 	bl	34018ab2 <EpochBlock_IsEpochStart>
34018ee8:	4603      	mov	r3, r0
34018eea:	2b00      	cmp	r3, #0
34018eec:	d002      	beq.n	34018ef4 <__LL_ATON_RT_ExecStartEpochBlock+0x44>
  {
    __LL_ATON_RT_Start_AtoNN_Epoch(nn_instance);
34018eee:	6838      	ldr	r0, [r7, #0]
34018ef0:	f7ff fede 	bl	34018cb0 <__LL_ATON_RT_Start_AtoNN_Epoch>
  }

  /* Grab ATON IP lock in case not a pure SW or internal epoch */
  if (EpochBlock_IsEpochPureHW(eb) ||
34018ef4:	6878      	ldr	r0, [r7, #4]
34018ef6:	f7ff fe02 	bl	34018afe <EpochBlock_IsEpochPureHW>
34018efa:	4603      	mov	r3, r0
34018efc:	2b00      	cmp	r3, #0
34018efe:	d105      	bne.n	34018f0c <__LL_ATON_RT_ExecStartEpochBlock+0x5c>
      EpochBlock_IsEpochHybrid(eb)) // epoch blobs are flagged as pure HW, so checking for epoch blob is not necessary
34018f00:	6878      	ldr	r0, [r7, #4]
34018f02:	f7ff fe0f 	bl	34018b24 <EpochBlock_IsEpochHybrid>
34018f06:	4603      	mov	r3, r0
  if (EpochBlock_IsEpochPureHW(eb) ||
34018f08:	2b00      	cmp	r3, #0
34018f0a:	d002      	beq.n	34018f12 <__LL_ATON_RT_ExecStartEpochBlock+0x62>
  {
    __ll_set_aton_owner(nn_instance);
34018f0c:	6838      	ldr	r0, [r7, #0]
34018f0e:	f7ff fe6b 	bl	34018be8 <__ll_set_aton_owner>
  }

  if (!EpochBlock_IsEpochBlob(eb))
34018f12:	6878      	ldr	r0, [r7, #4]
34018f14:	f7ff fde0 	bl	34018ad8 <EpochBlock_IsEpochBlob>
34018f18:	4603      	mov	r3, r0
34018f1a:	f083 0301 	eor.w	r3, r3, #1
34018f1e:	b2db      	uxtb	r3, r3
34018f20:	2b00      	cmp	r3, #0
34018f22:	d01c      	beq.n	34018f5e <__LL_ATON_RT_ExecStartEpochBlock+0xae>
  { // standard epoch block handling based on streaming engines
    /* set wait mask(s) in interrupt controller */
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
34018f24:	6878      	ldr	r0, [r7, #4]
34018f26:	f7ff fdea 	bl	34018afe <EpochBlock_IsEpochPureHW>
34018f2a:	4603      	mov	r3, r0
34018f2c:	2b00      	cmp	r3, #0
34018f2e:	d105      	bne.n	34018f3c <__LL_ATON_RT_ExecStartEpochBlock+0x8c>
34018f30:	6878      	ldr	r0, [r7, #4]
34018f32:	f7ff fe0a 	bl	34018b4a <EpochBlock_IsEpochInternal>
34018f36:	4603      	mov	r3, r0
34018f38:	2b00      	cmp	r3, #0
34018f3a:	d014      	beq.n	34018f66 <__LL_ATON_RT_ExecStartEpochBlock+0xb6>
    {
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
34018f3c:	4b2e      	ldr	r3, [pc, #184]	@ (34018ff8 <__LL_ATON_RT_ExecStartEpochBlock+0x148>)
34018f3e:	681b      	ldr	r3, [r3, #0]
34018f40:	683a      	ldr	r2, [r7, #0]
34018f42:	429a      	cmp	r2, r3
34018f44:	d005      	beq.n	34018f52 <__LL_ATON_RT_ExecStartEpochBlock+0xa2>
34018f46:	4b2d      	ldr	r3, [pc, #180]	@ (34018ffc <__LL_ATON_RT_ExecStartEpochBlock+0x14c>)
34018f48:	4a29      	ldr	r2, [pc, #164]	@ (34018ff0 <__LL_ATON_RT_ExecStartEpochBlock+0x140>)
34018f4a:	2178      	movs	r1, #120	@ 0x78
34018f4c:	4829      	ldr	r0, [pc, #164]	@ (34018ff4 <__LL_ATON_RT_ExecStartEpochBlock+0x144>)
34018f4e:	f000 fdb9 	bl	34019ac4 <__assert_func>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
34018f52:	687b      	ldr	r3, [r7, #4]
34018f54:	68db      	ldr	r3, [r3, #12]
34018f56:	4618      	mov	r0, r3
34018f58:	f7ff fece 	bl	34018cf8 <__LL_ATON_RT_SetWaitMask>
34018f5c:	e003      	b.n	34018f66 <__LL_ATON_RT_ExecStartEpochBlock+0xb6>
  else
  { // epoch blob handling based on epoch controller
#if defined(ATON_EPOCHCTRL_NUM) &&                                                                                     \
    (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC) // Polling mode is not allowed/supported when using the epoch controller
    /* reset wait mask(s) in interrupt controller, but ignore stream engine completion event interrupts */
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
34018f5e:	f240 30ff 	movw	r0, #1023	@ 0x3ff
34018f62:	f7ff fec9 	bl	34018cf8 <__LL_ATON_RT_SetWaitMask>
#endif // ATON_PLAT_HAS_FFLUSH
    LL_ATON_ASSERT(false); // may never happen
#endif // !ATON_EPOCHCTRL_NUM || LL_ATON_RT_POLLING
  }

  if (eb->start_epoch_block != NULL)
34018f66:	687b      	ldr	r3, [r7, #4]
34018f68:	681b      	ldr	r3, [r3, #0]
34018f6a:	2b00      	cmp	r3, #0
34018f6c:	d003      	beq.n	34018f76 <__LL_ATON_RT_ExecStartEpochBlock+0xc6>
    else
    {
      eb->start_epoch_block((const void *)eb);
    }
#else
    eb->start_epoch_block((const void *)eb);
34018f6e:	687b      	ldr	r3, [r7, #4]
34018f70:	681b      	ldr	r3, [r3, #0]
34018f72:	6878      	ldr	r0, [r7, #4]
34018f74:	4798      	blx	r3
#endif
  }

  if (EpochBlock_IsEpochBlob(eb))
34018f76:	6878      	ldr	r0, [r7, #4]
34018f78:	f7ff fdae 	bl	34018ad8 <EpochBlock_IsEpochBlob>
34018f7c:	4603      	mov	r3, r0
34018f7e:	2b00      	cmp	r3, #0
34018f80:	d026      	beq.n	34018fd0 <__LL_ATON_RT_ExecStartEpochBlock+0x120>
  {
#if defined(ATON_EPOCHCTRL_NUM)
    /* configure epoch controller */
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
34018f82:	6878      	ldr	r0, [r7, #4]
34018f84:	f7ff fdf4 	bl	34018b70 <EpochBlock_EpochControllerUnit>
34018f88:	6178      	str	r0, [r7, #20]
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34018f8a:	697b      	ldr	r3, [r7, #20]
34018f8c:	2b00      	cmp	r3, #0
34018f8e:	d005      	beq.n	34018f9c <__LL_ATON_RT_ExecStartEpochBlock+0xec>
34018f90:	4b1b      	ldr	r3, [pc, #108]	@ (34019000 <__LL_ATON_RT_ExecStartEpochBlock+0x150>)
34018f92:	4a17      	ldr	r2, [pc, #92]	@ (34018ff0 <__LL_ATON_RT_ExecStartEpochBlock+0x140>)
34018f94:	21a4      	movs	r1, #164	@ 0xa4
34018f96:	4817      	ldr	r0, [pc, #92]	@ (34018ff4 <__LL_ATON_RT_ExecStartEpochBlock+0x144>)
34018f98:	f000 fd94 	bl	34019ac4 <__assert_func>

    LL_EpochCtrl_InitTypeDef conf;
    conf.stepmode = 0;
34018f9c:	7b3b      	ldrb	r3, [r7, #12]
34018f9e:	f36f 0300 	bfc	r3, #0, #1
34018fa2:	733b      	strb	r3, [r7, #12]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
34018fa4:	6878      	ldr	r0, [r7, #4]
34018fa6:	f7ff fe01 	bl	34018bac <EpochBlock_EpochBlobAddr>
34018faa:	4603      	mov	r3, r0
34018fac:	60bb      	str	r3, [r7, #8]

    LL_EpochCtrl_Init(ecId, &conf);
34018fae:	697b      	ldr	r3, [r7, #20]
34018fb0:	f107 0208 	add.w	r2, r7, #8
34018fb4:	4611      	mov	r1, r2
34018fb6:	4618      	mov	r0, r3
34018fb8:	f7ff fc68 	bl	3401888c <LL_EpochCtrl_Init>

    /* start/enable epoch controller */
    ATON_ENABLE(EPOCHCTRL, ecId);
34018fbc:	4b11      	ldr	r3, [pc, #68]	@ (34019004 <__LL_ATON_RT_ExecStartEpochBlock+0x154>)
34018fbe:	681b      	ldr	r3, [r3, #0]
34018fc0:	613b      	str	r3, [r7, #16]
34018fc2:	693b      	ldr	r3, [r7, #16]
34018fc4:	f043 0301 	orr.w	r3, r3, #1
34018fc8:	613b      	str	r3, [r7, #16]
34018fca:	4a0e      	ldr	r2, [pc, #56]	@ (34019004 <__LL_ATON_RT_ExecStartEpochBlock+0x154>)
34018fcc:	693b      	ldr	r3, [r7, #16]
34018fce:	6013      	str	r3, [r2, #0]
#else  // !ATON_EPOCHCTRL_NUM
    LL_ATON_ASSERT(false); // may never happen
#endif // !ATON_EPOCHCTRL_NUM
  }

  if (nn_instance->exec_state.epoch_callback_function != NULL)
34018fd0:	683b      	ldr	r3, [r7, #0]
34018fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34018fd4:	2b00      	cmp	r3, #0
34018fd6:	d005      	beq.n	34018fe4 <__LL_ATON_RT_ExecStartEpochBlock+0x134>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
34018fd8:	683b      	ldr	r3, [r7, #0]
34018fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34018fdc:	687a      	ldr	r2, [r7, #4]
34018fde:	6839      	ldr	r1, [r7, #0]
34018fe0:	2001      	movs	r0, #1
34018fe2:	4798      	blx	r3
}
34018fe4:	bf00      	nop
34018fe6:	3718      	adds	r7, #24
34018fe8:	46bd      	mov	sp, r7
34018fea:	bd80      	pop	{r7, pc}
34018fec:	3401d99c 	.word	0x3401d99c
34018ff0:	3401e664 	.word	0x3401e664
34018ff4:	3401d9d4 	.word	0x3401d9d4
34018ff8:	3401f950 	.word	0x3401f950
34018ffc:	3401da68 	.word	0x3401da68
34019000:	3401da94 	.word	0x3401da94
34019004:	580fe000 	.word	0x580fe000

34019008 <__LL_ATON_RT_ExecEndEpochBlock>:

static inline void __LL_ATON_RT_ExecEndEpochBlock(const LL_ATON_RT_EpochBlockItem_t *eb,
                                                  NN_Instance_TypeDef *nn_instance)
{
34019008:	b580      	push	{r7, lr}
3401900a:	b084      	sub	sp, #16
3401900c:	af00      	add	r7, sp, #0
3401900e:	6078      	str	r0, [r7, #4]
34019010:	6039      	str	r1, [r7, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34019012:	683b      	ldr	r3, [r7, #0]
34019014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019016:	2b00      	cmp	r3, #0
34019018:	d005      	beq.n	34019026 <__LL_ATON_RT_ExecEndEpochBlock+0x1e>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
3401901a:	683b      	ldr	r3, [r7, #0]
3401901c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401901e:	687a      	ldr	r2, [r7, #4]
34019020:	6839      	ldr	r1, [r7, #0]
34019022:	2002      	movs	r0, #2
34019024:	4798      	blx	r3

  if (EpochBlock_IsEpochBlob(eb))
34019026:	6878      	ldr	r0, [r7, #4]
34019028:	f7ff fd56 	bl	34018ad8 <EpochBlock_IsEpochBlob>
3401902c:	4603      	mov	r3, r0
3401902e:	2b00      	cmp	r3, #0
34019030:	d033      	beq.n	3401909a <__LL_ATON_RT_ExecEndEpochBlock+0x92>
  {
#if defined(ATON_EPOCHCTRL_NUM)
    /* stop/disable epoch controller */
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
34019032:	6878      	ldr	r0, [r7, #4]
34019034:	f7ff fd9c 	bl	34018b70 <EpochBlock_EpochControllerUnit>
34019038:	60f8      	str	r0, [r7, #12]
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401903a:	68fb      	ldr	r3, [r7, #12]
3401903c:	2b00      	cmp	r3, #0
3401903e:	d005      	beq.n	3401904c <__LL_ATON_RT_ExecEndEpochBlock+0x44>
34019040:	4b48      	ldr	r3, [pc, #288]	@ (34019164 <__LL_ATON_RT_ExecEndEpochBlock+0x15c>)
34019042:	4a49      	ldr	r2, [pc, #292]	@ (34019168 <__LL_ATON_RT_ExecEndEpochBlock+0x160>)
34019044:	21c2      	movs	r1, #194	@ 0xc2
34019046:	4849      	ldr	r0, [pc, #292]	@ (3401916c <__LL_ATON_RT_ExecEndEpochBlock+0x164>)
34019048:	f000 fd3c 	bl	34019ac4 <__assert_func>
    uint32_t t;
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
3401904c:	2300      	movs	r3, #0
3401904e:	60bb      	str	r3, [r7, #8]
34019050:	68bb      	ldr	r3, [r7, #8]
34019052:	f023 0301 	bic.w	r3, r3, #1
34019056:	60bb      	str	r3, [r7, #8]
34019058:	68bb      	ldr	r3, [r7, #8]
3401905a:	f043 0302 	orr.w	r3, r3, #2
3401905e:	60bb      	str	r3, [r7, #8]
34019060:	4a43      	ldr	r2, [pc, #268]	@ (34019170 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
34019062:	68bb      	ldr	r3, [r7, #8]
34019064:	6013      	str	r3, [r2, #0]
34019066:	4b42      	ldr	r3, [pc, #264]	@ (34019170 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
34019068:	681b      	ldr	r3, [r3, #0]
3401906a:	f003 0302 	and.w	r3, r3, #2
3401906e:	2b00      	cmp	r3, #0
34019070:	d1f9      	bne.n	34019066 <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
34019072:	2300      	movs	r3, #0
34019074:	60bb      	str	r3, [r7, #8]
34019076:	68bb      	ldr	r3, [r7, #8]
34019078:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3401907c:	60bb      	str	r3, [r7, #8]
3401907e:	4a3c      	ldr	r2, [pc, #240]	@ (34019170 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
34019080:	68bb      	ldr	r3, [r7, #8]
34019082:	6013      	str	r3, [r2, #0]
34019084:	4b3a      	ldr	r3, [pc, #232]	@ (34019170 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
34019086:	681b      	ldr	r3, [r3, #0]
34019088:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3401908c:	2b00      	cmp	r3, #0
3401908e:	d1f9      	bne.n	34019084 <__LL_ATON_RT_ExecEndEpochBlock+0x7c>

    /* disable epoch controller clock */
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
34019090:	68fb      	ldr	r3, [r7, #12]
34019092:	3319      	adds	r3, #25
34019094:	4618      	mov	r0, r3
34019096:	f7ff fc5f 	bl	34018958 <LL_ATON_DisableClock>
#else  // !ATON_EPOCHCTRL_NUM
    LL_ATON_ASSERT(false); // may never happen
#endif // !ATON_EPOCHCTRL_NUM
  }

  if (eb->end_epoch_block != NULL)
3401909a:	687b      	ldr	r3, [r7, #4]
3401909c:	685b      	ldr	r3, [r3, #4]
3401909e:	2b00      	cmp	r3, #0
340190a0:	d003      	beq.n	340190aa <__LL_ATON_RT_ExecEndEpochBlock+0xa2>
    else
    {
      eb->end_epoch_block((const void *)eb);
    }
#else
    eb->end_epoch_block((const void *)eb);
340190a2:	687b      	ldr	r3, [r7, #4]
340190a4:	685b      	ldr	r3, [r3, #4]
340190a6:	6878      	ldr	r0, [r7, #4]
340190a8:	4798      	blx	r3
#endif
  }

  /* Reset wait mask */
  if (EpochBlock_IsEpochPureHW(eb) ||
340190aa:	6878      	ldr	r0, [r7, #4]
340190ac:	f7ff fd27 	bl	34018afe <EpochBlock_IsEpochPureHW>
340190b0:	4603      	mov	r3, r0
340190b2:	2b00      	cmp	r3, #0
340190b4:	d105      	bne.n	340190c2 <__LL_ATON_RT_ExecEndEpochBlock+0xba>
      EpochBlock_IsEpochInternal(eb)) // epoch blobs are flagged as pure HW, so checking for epoch blob is not necessary
340190b6:	6878      	ldr	r0, [r7, #4]
340190b8:	f7ff fd47 	bl	34018b4a <EpochBlock_IsEpochInternal>
340190bc:	4603      	mov	r3, r0
  if (EpochBlock_IsEpochPureHW(eb) ||
340190be:	2b00      	cmp	r3, #0
340190c0:	d00d      	beq.n	340190de <__LL_ATON_RT_ExecEndEpochBlock+0xd6>
  {
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
340190c2:	4b2c      	ldr	r3, [pc, #176]	@ (34019174 <__LL_ATON_RT_ExecEndEpochBlock+0x16c>)
340190c4:	681b      	ldr	r3, [r3, #0]
340190c6:	683a      	ldr	r2, [r7, #0]
340190c8:	429a      	cmp	r2, r3
340190ca:	d005      	beq.n	340190d8 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>
340190cc:	4b2a      	ldr	r3, [pc, #168]	@ (34019178 <__LL_ATON_RT_ExecEndEpochBlock+0x170>)
340190ce:	4a26      	ldr	r2, [pc, #152]	@ (34019168 <__LL_ATON_RT_ExecEndEpochBlock+0x160>)
340190d0:	21e1      	movs	r1, #225	@ 0xe1
340190d2:	4826      	ldr	r0, [pc, #152]	@ (3401916c <__LL_ATON_RT_ExecEndEpochBlock+0x164>)
340190d4:	f000 fcf6 	bl	34019ac4 <__assert_func>
    __LL_ATON_RT_SetWaitMask(0);
340190d8:	2000      	movs	r0, #0
340190da:	f7ff fe0d 	bl	34018cf8 <__LL_ATON_RT_SetWaitMask>
  }

  /* Release ATON IP unlock in case it's a pure HW epoch */
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
340190de:	6878      	ldr	r0, [r7, #4]
340190e0:	f7ff fd0d 	bl	34018afe <EpochBlock_IsEpochPureHW>
340190e4:	4603      	mov	r3, r0
340190e6:	2b00      	cmp	r3, #0
340190e8:	d113      	bne.n	34019112 <__LL_ATON_RT_ExecEndEpochBlock+0x10a>
340190ea:	6878      	ldr	r0, [r7, #4]
340190ec:	f7ff fd1a 	bl	34018b24 <EpochBlock_IsEpochHybrid>
340190f0:	4603      	mov	r3, r0
340190f2:	2b00      	cmp	r3, #0
340190f4:	d105      	bne.n	34019102 <__LL_ATON_RT_ExecEndEpochBlock+0xfa>
340190f6:	6878      	ldr	r0, [r7, #4]
340190f8:	f7ff fd27 	bl	34018b4a <EpochBlock_IsEpochInternal>
340190fc:	4603      	mov	r3, r0
340190fe:	2b00      	cmp	r3, #0
34019100:	d00a      	beq.n	34019118 <__LL_ATON_RT_ExecEndEpochBlock+0x110>
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
34019102:	683b      	ldr	r3, [r7, #0]
34019104:	691b      	ldr	r3, [r3, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
34019106:	2b00      	cmp	r3, #0
34019108:	d106      	bne.n	34019118 <__LL_ATON_RT_ExecEndEpochBlock+0x110>
                                       (nn_instance->exec_state.next_epoch_block ==
3401910a:	683b      	ldr	r3, [r7, #0]
3401910c:	68db      	ldr	r3, [r3, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3401910e:	2b00      	cmp	r3, #0
34019110:	d102      	bne.n	34019118 <__LL_ATON_RT_ExecEndEpochBlock+0x110>
                                        NULL))) /* hybrid has finished after that last part has been executed in SW */
  {
    __ll_clear_aton_owner(nn_instance);
34019112:	6838      	ldr	r0, [r7, #0]
34019114:	f7ff fda0 	bl	34018c58 <__ll_clear_aton_owner>
  }
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
34019118:	6878      	ldr	r0, [r7, #4]
3401911a:	f7ff fd16 	bl	34018b4a <EpochBlock_IsEpochInternal>
3401911e:	4603      	mov	r3, r0
34019120:	2b00      	cmp	r3, #0
34019122:	d110      	bne.n	34019146 <__LL_ATON_RT_ExecEndEpochBlock+0x13e>
34019124:	6878      	ldr	r0, [r7, #4]
34019126:	f7ff fcfd 	bl	34018b24 <EpochBlock_IsEpochHybrid>
3401912a:	4603      	mov	r3, r0
3401912c:	2b00      	cmp	r3, #0
3401912e:	d10a      	bne.n	34019146 <__LL_ATON_RT_ExecEndEpochBlock+0x13e>
34019130:	4b10      	ldr	r3, [pc, #64]	@ (34019174 <__LL_ATON_RT_ExecEndEpochBlock+0x16c>)
34019132:	681b      	ldr	r3, [r3, #0]
34019134:	683a      	ldr	r2, [r7, #0]
34019136:	429a      	cmp	r2, r3
34019138:	d105      	bne.n	34019146 <__LL_ATON_RT_ExecEndEpochBlock+0x13e>
3401913a:	4b10      	ldr	r3, [pc, #64]	@ (3401917c <__LL_ATON_RT_ExecEndEpochBlock+0x174>)
3401913c:	4a0a      	ldr	r2, [pc, #40]	@ (34019168 <__LL_ATON_RT_ExecEndEpochBlock+0x160>)
3401913e:	21ed      	movs	r1, #237	@ 0xed
34019140:	480a      	ldr	r0, [pc, #40]	@ (3401916c <__LL_ATON_RT_ExecEndEpochBlock+0x164>)
34019142:	f000 fcbf 	bl	34019ac4 <__assert_func>
                 (__ll_current_aton_ip_owner != nn_instance));

  if (nn_instance->exec_state.epoch_callback_function != NULL)
34019146:	683b      	ldr	r3, [r7, #0]
34019148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401914a:	2b00      	cmp	r3, #0
3401914c:	d005      	beq.n	3401915a <__LL_ATON_RT_ExecEndEpochBlock+0x152>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3401914e:	683b      	ldr	r3, [r7, #0]
34019150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019152:	687a      	ldr	r2, [r7, #4]
34019154:	6839      	ldr	r1, [r7, #0]
34019156:	2003      	movs	r0, #3
34019158:	4798      	blx	r3
  }
}
3401915a:	bf00      	nop
3401915c:	3710      	adds	r7, #16
3401915e:	46bd      	mov	sp, r7
34019160:	bd80      	pop	{r7, pc}
34019162:	bf00      	nop
34019164:	3401da94 	.word	0x3401da94
34019168:	3401e714 	.word	0x3401e714
3401916c:	3401d9d4 	.word	0x3401d9d4
34019170:	580fe000 	.word	0x580fe000
34019174:	3401f950 	.word	0x3401f950
34019178:	3401daa0 	.word	0x3401daa0
3401917c:	3401dacc 	.word	0x3401dacc

34019180 <__LL_ATON_RT_DetermineNextEpochBlock>:

static void __LL_ATON_RT_DetermineNextEpochBlock(NN_Instance_TypeDef *nn_instance)
{
34019180:	b580      	push	{r7, lr}
34019182:	b082      	sub	sp, #8
34019184:	af00      	add	r7, sp, #0
34019186:	6078      	str	r0, [r7, #4]
  LL_ATON_ASSERT(nn_instance != NULL);
34019188:	687b      	ldr	r3, [r7, #4]
3401918a:	2b00      	cmp	r3, #0
3401918c:	d105      	bne.n	3401919a <__LL_ATON_RT_DetermineNextEpochBlock+0x1a>
3401918e:	4b26      	ldr	r3, [pc, #152]	@ (34019228 <__LL_ATON_RT_DetermineNextEpochBlock+0xa8>)
34019190:	4a26      	ldr	r2, [pc, #152]	@ (3401922c <__LL_ATON_RT_DetermineNextEpochBlock+0xac>)
34019192:	21f8      	movs	r1, #248	@ 0xf8
34019194:	4826      	ldr	r0, [pc, #152]	@ (34019230 <__LL_ATON_RT_DetermineNextEpochBlock+0xb0>)
34019196:	f000 fc95 	bl	34019ac4 <__assert_func>
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3401919a:	687b      	ldr	r3, [r7, #4]
3401919c:	69db      	ldr	r3, [r3, #28]
3401919e:	2b00      	cmp	r3, #0
340191a0:	d005      	beq.n	340191ae <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
340191a2:	4b24      	ldr	r3, [pc, #144]	@ (34019234 <__LL_ATON_RT_DetermineNextEpochBlock+0xb4>)
340191a4:	4a21      	ldr	r2, [pc, #132]	@ (3401922c <__LL_ATON_RT_DetermineNextEpochBlock+0xac>)
340191a6:	21fa      	movs	r1, #250	@ 0xfa
340191a8:	4821      	ldr	r0, [pc, #132]	@ (34019230 <__LL_ATON_RT_DetermineNextEpochBlock+0xb0>)
340191aa:	f000 fc8b 	bl	34019ac4 <__assert_func>
                 0x0); // with the removal of parallel SW/HW epochs execution all triggered events must have been
                       // cleared at this point in time!
#endif                 // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /* Determine if there is a new inserted epoch block array */
  if ((nn_instance->exec_state.next_epoch_block != NULL))
340191ae:	687b      	ldr	r3, [r7, #4]
340191b0:	68db      	ldr	r3, [r3, #12]
340191b2:	2b00      	cmp	r3, #0
340191b4:	d02a      	beq.n	3401920c <__LL_ATON_RT_DetermineNextEpochBlock+0x8c>
  {
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
340191b6:	687b      	ldr	r3, [r7, #4]
340191b8:	691b      	ldr	r3, [r3, #16]
340191ba:	2b00      	cmp	r3, #0
340191bc:	d006      	beq.n	340191cc <__LL_ATON_RT_DetermineNextEpochBlock+0x4c>
340191be:	4b1e      	ldr	r3, [pc, #120]	@ (34019238 <__LL_ATON_RT_DetermineNextEpochBlock+0xb8>)
340191c0:	4a1a      	ldr	r2, [pc, #104]	@ (3401922c <__LL_ATON_RT_DetermineNextEpochBlock+0xac>)
340191c2:	f44f 7181 	mov.w	r1, #258	@ 0x102
340191c6:	481a      	ldr	r0, [pc, #104]	@ (34019230 <__LL_ATON_RT_DetermineNextEpochBlock+0xb0>)
340191c8:	f000 fc7c 	bl	34019ac4 <__assert_func>

    /* save current context */
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
340191cc:	687b      	ldr	r3, [r7, #4]
340191ce:	685a      	ldr	r2, [r3, #4]
340191d0:	687b      	ldr	r3, [r7, #4]
340191d2:	611a      	str	r2, [r3, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
340191d4:	687b      	ldr	r3, [r7, #4]
340191d6:	689a      	ldr	r2, [r3, #8]
340191d8:	687b      	ldr	r3, [r7, #4]
340191da:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
340191dc:	687b      	ldr	r3, [r7, #4]
340191de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
340191e0:	687b      	ldr	r3, [r7, #4]
340191e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

    /* set new context */
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
340191e4:	687b      	ldr	r3, [r7, #4]
340191e6:	68da      	ldr	r2, [r3, #12]
340191e8:	687b      	ldr	r3, [r7, #4]
340191ea:	605a      	str	r2, [r3, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
340191ec:	687b      	ldr	r3, [r7, #4]
340191ee:	68da      	ldr	r2, [r3, #12]
340191f0:	687b      	ldr	r3, [r7, #4]
340191f2:	609a      	str	r2, [r3, #8]
#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
340191f4:	687b      	ldr	r3, [r7, #4]
340191f6:	689b      	ldr	r3, [r3, #8]
340191f8:	4618      	mov	r0, r3
340191fa:	f7ff fe38 	bl	34018e6e <__LL_ATON_RT_CntEpochBlocks>
340191fe:	4602      	mov	r2, r0
34019200:	687b      	ldr	r3, [r7, #4]
34019202:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

    /* reset next epoch block */
    nn_instance->exec_state.next_epoch_block = NULL;
34019204:	687b      	ldr	r3, [r7, #4]
34019206:	2200      	movs	r2, #0
34019208:	60da      	str	r2, [r3, #12]
3401920a:	e005      	b.n	34019218 <__LL_ATON_RT_DetermineNextEpochBlock+0x98>
  }
  else
  {
    nn_instance->exec_state.current_epoch_block++;
3401920c:	687b      	ldr	r3, [r7, #4]
3401920e:	685b      	ldr	r3, [r3, #4]
34019210:	f103 0214 	add.w	r2, r3, #20
34019214:	687b      	ldr	r3, [r7, #4]
34019216:	605a      	str	r2, [r3, #4]
  }

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  nn_instance->exec_state.current_epoch_block_started = false;
34019218:	687b      	ldr	r3, [r7, #4]
3401921a:	2200      	movs	r2, #0
3401921c:	f883 2020 	strb.w	r2, [r3, #32]
#endif
}
34019220:	bf00      	nop
34019222:	3708      	adds	r7, #8
34019224:	46bd      	mov	sp, r7
34019226:	bd80      	pop	{r7, pc}
34019228:	3401d820 	.word	0x3401d820
3401922c:	3401e5c8 	.word	0x3401e5c8
34019230:	3401d9d4 	.word	0x3401d9d4
34019234:	3401d83c 	.word	0x3401d83c
34019238:	3401db3c 	.word	0x3401db3c

3401923c <__LL_ATON_RT_GetWaitMask>:

static inline uint32_t __LL_ATON_RT_GetWaitMask(const LL_ATON_RT_EpochBlockItem_t *eb)
{
3401923c:	b580      	push	{r7, lr}
3401923e:	b082      	sub	sp, #8
34019240:	af00      	add	r7, sp, #0
34019242:	6078      	str	r0, [r7, #4]
  if (EpochBlock_IsEpochBlob(eb))
34019244:	6878      	ldr	r0, [r7, #4]
34019246:	f7ff fc47 	bl	34018ad8 <EpochBlock_IsEpochBlob>
3401924a:	4603      	mov	r3, r0
3401924c:	2b00      	cmp	r3, #0
3401924e:	d007      	beq.n	34019260 <__LL_ATON_RT_GetWaitMask+0x24>
  {
    // in case of epoch blob `wait_mask` contains unit number of epoch controller to use
    return (1 << EpochBlock_EpochControllerUnit(eb));
34019250:	6878      	ldr	r0, [r7, #4]
34019252:	f7ff fc8d 	bl	34018b70 <EpochBlock_EpochControllerUnit>
34019256:	4603      	mov	r3, r0
34019258:	2201      	movs	r2, #1
3401925a:	fa02 f303 	lsl.w	r3, r2, r3
3401925e:	e001      	b.n	34019264 <__LL_ATON_RT_GetWaitMask+0x28>
  }
  else
  {
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
34019260:	687b      	ldr	r3, [r7, #4]
34019262:	68db      	ldr	r3, [r3, #12]
                          // wait for
  }
}
34019264:	4618      	mov	r0, r3
34019266:	3708      	adds	r7, #8
34019268:	46bd      	mov	sp, r7
3401926a:	bd80      	pop	{r7, pc}

3401926c <__LL_ATON_RT_Init_Network>:

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
3401926c:	b580      	push	{r7, lr}
3401926e:	b084      	sub	sp, #16
34019270:	af00      	add	r7, sp, #0
34019272:	6078      	str	r0, [r7, #4]
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
34019274:	687b      	ldr	r3, [r7, #4]
34019276:	2b00      	cmp	r3, #0
34019278:	d037      	beq.n	340192ea <__LL_ATON_RT_Init_Network+0x7e>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3401927a:	687b      	ldr	r3, [r7, #4]
3401927c:	681b      	ldr	r3, [r3, #0]
3401927e:	2b00      	cmp	r3, #0
34019280:	d035      	beq.n	340192ee <__LL_ATON_RT_Init_Network+0x82>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
34019282:	687b      	ldr	r3, [r7, #4]
34019284:	681b      	ldr	r3, [r3, #0]
34019286:	69db      	ldr	r3, [r3, #28]
34019288:	4798      	blx	r3
3401928a:	60f8      	str	r0, [r7, #12]
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
3401928c:	687b      	ldr	r3, [r7, #4]
3401928e:	68fa      	ldr	r2, [r7, #12]
34019290:	605a      	str	r2, [r3, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
34019292:	687b      	ldr	r3, [r7, #4]
34019294:	68fa      	ldr	r2, [r7, #12]
34019296:	609a      	str	r2, [r3, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
34019298:	687b      	ldr	r3, [r7, #4]
3401929a:	2200      	movs	r2, #0
3401929c:	60da      	str	r2, [r3, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3401929e:	687b      	ldr	r3, [r7, #4]
340192a0:	2200      	movs	r2, #0
340192a2:	611a      	str	r2, [r3, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
340192a4:	687b      	ldr	r3, [r7, #4]
340192a6:	2200      	movs	r2, #0
340192a8:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
340192aa:	687b      	ldr	r3, [r7, #4]
340192ac:	685b      	ldr	r3, [r3, #4]
340192ae:	4618      	mov	r0, r3
340192b0:	f7ff fddd 	bl	34018e6e <__LL_ATON_RT_CntEpochBlocks>
340192b4:	4602      	mov	r2, r0
340192b6:	687b      	ldr	r3, [r7, #4]
340192b8:	625a      	str	r2, [r3, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
340192ba:	687b      	ldr	r3, [r7, #4]
340192bc:	2200      	movs	r2, #0
340192be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

  /* set information about running inference */
  nn_instance->exec_state.inference_started = false;
340192c0:	687b      	ldr	r3, [r7, #4]
340192c2:	2200      	movs	r2, #0
340192c4:	761a      	strb	r2, [r3, #24]

  /* set asynchronous status variables */
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  nn_instance->exec_state.triggered_events = 0x0;
340192c6:	687b      	ldr	r3, [r7, #4]
340192c8:	2200      	movs	r2, #0
340192ca:	61da      	str	r2, [r3, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
340192cc:	687b      	ldr	r3, [r7, #4]
340192ce:	2200      	movs	r2, #0
340192d0:	f883 2020 	strb.w	r2, [r3, #32]
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
340192d4:	687b      	ldr	r3, [r7, #4]
340192d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340192d8:	2b00      	cmp	r3, #0
340192da:	d009      	beq.n	340192f0 <__LL_ATON_RT_Init_Network+0x84>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
340192dc:	687b      	ldr	r3, [r7, #4]
340192de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340192e0:	2200      	movs	r2, #0
340192e2:	6879      	ldr	r1, [r7, #4]
340192e4:	2004      	movs	r0, #4
340192e6:	4798      	blx	r3
340192e8:	e002      	b.n	340192f0 <__LL_ATON_RT_Init_Network+0x84>
    return;
340192ea:	bf00      	nop
340192ec:	e000      	b.n	340192f0 <__LL_ATON_RT_Init_Network+0x84>
    return;
340192ee:	bf00      	nop
  }
}
340192f0:	3710      	adds	r7, #16
340192f2:	46bd      	mov	sp, r7
340192f4:	bd80      	pop	{r7, pc}
	...

340192f8 <LL_ATON_RT_Init_Network>:
/**
 * @brief Initialize a network instance
 * @param nn_instance Pointer to network instance to initialize
 */
void LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
340192f8:	b580      	push	{r7, lr}
340192fa:	b084      	sub	sp, #16
340192fc:	af00      	add	r7, sp, #0
340192fe:	6078      	str	r0, [r7, #4]
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
34019300:	687b      	ldr	r3, [r7, #4]
34019302:	2b00      	cmp	r3, #0
34019304:	d023      	beq.n	3401934e <LL_ATON_RT_Init_Network+0x56>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
34019306:	687b      	ldr	r3, [r7, #4]
34019308:	681b      	ldr	r3, [r3, #0]
3401930a:	2b00      	cmp	r3, #0
3401930c:	d021      	beq.n	34019352 <LL_ATON_RT_Init_Network+0x5a>
  {
    LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
    ret = nn_instance->network->ec_network_init();
  }
#else
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
3401930e:	687b      	ldr	r3, [r7, #4]
34019310:	681b      	ldr	r3, [r3, #0]
34019312:	685b      	ldr	r3, [r3, #4]
34019314:	2b00      	cmp	r3, #0
34019316:	d106      	bne.n	34019326 <LL_ATON_RT_Init_Network+0x2e>
34019318:	4b10      	ldr	r3, [pc, #64]	@ (3401935c <LL_ATON_RT_Init_Network+0x64>)
3401931a:	4a11      	ldr	r2, [pc, #68]	@ (34019360 <LL_ATON_RT_Init_Network+0x68>)
3401931c:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
34019320:	4810      	ldr	r0, [pc, #64]	@ (34019364 <LL_ATON_RT_Init_Network+0x6c>)
34019322:	f000 fbcf 	bl	34019ac4 <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
34019326:	687b      	ldr	r3, [r7, #4]
34019328:	681b      	ldr	r3, [r3, #0]
3401932a:	685b      	ldr	r3, [r3, #4]
3401932c:	4798      	blx	r3
3401932e:	4603      	mov	r3, r0
34019330:	73fb      	strb	r3, [r7, #15]
#endif
  LL_ATON_ASSERT(ret == true);
34019332:	7bfb      	ldrb	r3, [r7, #15]
34019334:	2b01      	cmp	r3, #1
34019336:	d006      	beq.n	34019346 <LL_ATON_RT_Init_Network+0x4e>
34019338:	4b0b      	ldr	r3, [pc, #44]	@ (34019368 <LL_ATON_RT_Init_Network+0x70>)
3401933a:	4a09      	ldr	r2, [pc, #36]	@ (34019360 <LL_ATON_RT_Init_Network+0x68>)
3401933c:	f240 11a9 	movw	r1, #425	@ 0x1a9
34019340:	4808      	ldr	r0, [pc, #32]	@ (34019364 <LL_ATON_RT_Init_Network+0x6c>)
34019342:	f000 fbbf 	bl	34019ac4 <__assert_func>
  LL_ATON_LIB_UNUSED(ret);

  /* Call actual network instance initialization */
  __LL_ATON_RT_Init_Network(nn_instance);
34019346:	6878      	ldr	r0, [r7, #4]
34019348:	f7ff ff90 	bl	3401926c <__LL_ATON_RT_Init_Network>
3401934c:	e002      	b.n	34019354 <LL_ATON_RT_Init_Network+0x5c>
    return;
3401934e:	bf00      	nop
34019350:	e000      	b.n	34019354 <LL_ATON_RT_Init_Network+0x5c>
    return;
34019352:	bf00      	nop
}
34019354:	3710      	adds	r7, #16
34019356:	46bd      	mov	sp, r7
34019358:	bd80      	pop	{r7, pc}
3401935a:	bf00      	nop
3401935c:	3401db80 	.word	0x3401db80
34019360:	3401e5f0 	.word	0x3401e5f0
34019364:	3401d9d4 	.word	0x3401d9d4
34019368:	3401dbb8 	.word	0x3401dbb8

3401936c <LL_ATON_RT_DeInit_Network>:
/**
 * @brief De-initialize a network instance
 * @param nn_instance Pointer to network instance to de-initialize
 */
void LL_ATON_RT_DeInit_Network(NN_Instance_TypeDef *nn_instance)
{
3401936c:	b580      	push	{r7, lr}
3401936e:	b084      	sub	sp, #16
34019370:	af00      	add	r7, sp, #0
34019372:	6078      	str	r0, [r7, #4]
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
34019374:	687b      	ldr	r3, [r7, #4]
34019376:	2b00      	cmp	r3, #0
34019378:	d030      	beq.n	340193dc <LL_ATON_RT_DeInit_Network+0x70>
  {
    return;
  }

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_DeInit` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401937a:	687b      	ldr	r3, [r7, #4]
3401937c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401937e:	2b00      	cmp	r3, #0
34019380:	d005      	beq.n	3401938e <LL_ATON_RT_DeInit_Network+0x22>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
34019382:	687b      	ldr	r3, [r7, #4]
34019384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019386:	2200      	movs	r2, #0
34019388:	6879      	ldr	r1, [r7, #4]
3401938a:	2005      	movs	r0, #5
3401938c:	4798      	blx	r3
  }

  /** Re-set ATON IP owner */
  if (nn_instance == __ll_current_aton_ip_owner)
3401938e:	4b15      	ldr	r3, [pc, #84]	@ (340193e4 <LL_ATON_RT_DeInit_Network+0x78>)
34019390:	681b      	ldr	r3, [r3, #0]
34019392:	687a      	ldr	r2, [r7, #4]
34019394:	429a      	cmp	r2, r3
34019396:	d102      	bne.n	3401939e <LL_ATON_RT_DeInit_Network+0x32>
  { // In case this function gets called while an ATON lib internal EpochBlock (used to implement hybrid epochs) is
    // under execution we might still be owner of the ATON IP
    __ll_clear_aton_owner(nn_instance);
34019398:	6878      	ldr	r0, [r7, #4]
3401939a:	f7ff fc5d 	bl	34018c58 <__ll_clear_aton_owner>
  }

  /** De-initialize static variables **/
  /* re-set context */
  const LL_ATON_RT_EpochBlockItem_t *eb_list = NULL;
3401939e:	2300      	movs	r3, #0
340193a0:	60fb      	str	r3, [r7, #12]
  nn_instance->exec_state.current_epoch_block = eb_list;
340193a2:	687b      	ldr	r3, [r7, #4]
340193a4:	68fa      	ldr	r2, [r7, #12]
340193a6:	605a      	str	r2, [r3, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
340193a8:	687b      	ldr	r3, [r7, #4]
340193aa:	68fa      	ldr	r2, [r7, #12]
340193ac:	609a      	str	r2, [r3, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
340193ae:	687b      	ldr	r3, [r7, #4]
340193b0:	2200      	movs	r2, #0
340193b2:	60da      	str	r2, [r3, #12]

  /* re-set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
340193b4:	687b      	ldr	r3, [r7, #4]
340193b6:	2200      	movs	r2, #0
340193b8:	611a      	str	r2, [r3, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
340193ba:	687b      	ldr	r3, [r7, #4]
340193bc:	2200      	movs	r2, #0
340193be:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
340193c0:	687b      	ldr	r3, [r7, #4]
340193c2:	2200      	movs	r2, #0
340193c4:	625a      	str	r2, [r3, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
340193c6:	687b      	ldr	r3, [r7, #4]
340193c8:	2200      	movs	r2, #0
340193ca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* intentional do not re-set information about running inference `nn_instance->exec_state.inference_started` */

  /* re-set asynchronous status variables */
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  nn_instance->exec_state.triggered_events = 0x0;
340193cc:	687b      	ldr	r3, [r7, #4]
340193ce:	2200      	movs	r2, #0
340193d0:	61da      	str	r2, [r3, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
340193d2:	687b      	ldr	r3, [r7, #4]
340193d4:	2200      	movs	r2, #0
340193d6:	f883 2020 	strb.w	r2, [r3, #32]
340193da:	e000      	b.n	340193de <LL_ATON_RT_DeInit_Network+0x72>
    return;
340193dc:	bf00      	nop
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
}
340193de:	3710      	adds	r7, #16
340193e0:	46bd      	mov	sp, r7
340193e2:	bd80      	pop	{r7, pc}
340193e4:	3401f950 	.word	0x3401f950

340193e8 <LL_ATON_RT_RuntimeInit>:

/**
 * @brief Initialize the ATON runtime
 */
void LL_ATON_RT_RuntimeInit(void)
{
340193e8:	b580      	push	{r7, lr}
340193ea:	b082      	sub	sp, #8
340193ec:	af00      	add	r7, sp, #0
  /** Initialize ATON IPs **/
  LL_ATON_Init();
340193ee:	f7fe fc4b 	bl	34017c88 <LL_ATON_Init>
  /** Initialize IRQ Context **/
  {
    uint32_t t;

    /* Disable & Clear interrupt controller */
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
340193f2:	2300      	movs	r3, #0
340193f4:	607b      	str	r3, [r7, #4]
340193f6:	687b      	ldr	r3, [r7, #4]
340193f8:	f023 0301 	bic.w	r3, r3, #1
340193fc:	607b      	str	r3, [r7, #4]
340193fe:	687b      	ldr	r3, [r7, #4]
34019400:	f043 0302 	orr.w	r3, r3, #2
34019404:	607b      	str	r3, [r7, #4]
34019406:	4a22      	ldr	r2, [pc, #136]	@ (34019490 <LL_ATON_RT_RuntimeInit+0xa8>)
34019408:	687b      	ldr	r3, [r7, #4]
3401940a:	6013      	str	r3, [r2, #0]
3401940c:	4b20      	ldr	r3, [pc, #128]	@ (34019490 <LL_ATON_RT_RuntimeInit+0xa8>)
3401940e:	681b      	ldr	r3, [r3, #0]
34019410:	f003 0302 	and.w	r3, r3, #2
34019414:	2b00      	cmp	r3, #0
34019416:	d1f9      	bne.n	3401940c <LL_ATON_RT_RuntimeInit+0x24>
34019418:	2300      	movs	r3, #0
3401941a:	607b      	str	r3, [r7, #4]
3401941c:	687b      	ldr	r3, [r7, #4]
3401941e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34019422:	607b      	str	r3, [r7, #4]
34019424:	4a1a      	ldr	r2, [pc, #104]	@ (34019490 <LL_ATON_RT_RuntimeInit+0xa8>)
34019426:	687b      	ldr	r3, [r7, #4]
34019428:	6013      	str	r3, [r2, #0]
3401942a:	4b19      	ldr	r3, [pc, #100]	@ (34019490 <LL_ATON_RT_RuntimeInit+0xa8>)
3401942c:	681b      	ldr	r3, [r3, #0]
3401942e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34019432:	2b00      	cmp	r3, #0
34019434:	d1f9      	bne.n	3401942a <LL_ATON_RT_RuntimeInit+0x42>

    /* Preset Interrupt Controller masks */
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
34019436:	4b17      	ldr	r3, [pc, #92]	@ (34019494 <LL_ATON_RT_RuntimeInit+0xac>)
34019438:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3401943c:	601a      	str	r2, [r3, #0]
        ATON_STRENG_NUM, 0, 0)); // OR-mask: disable all streaming engine events and enable all other events & errors
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
3401943e:	4b16      	ldr	r3, [pc, #88]	@ (34019498 <LL_ATON_RT_RuntimeInit+0xb0>)
34019440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34019444:	601a      	str	r2, [r3, #0]
    ATON_INTCTRL_STD_INTORMSK_H_SET(0);           // OR-mask: enable all events & errors
    ATON_INTCTRL_STD_INTANDMSK_H_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
#endif

    /* Enable Interrupt Controller (again) */
    ATON_ENABLE(INTCTRL, 0);
34019446:	4b12      	ldr	r3, [pc, #72]	@ (34019490 <LL_ATON_RT_RuntimeInit+0xa8>)
34019448:	681b      	ldr	r3, [r3, #0]
3401944a:	603b      	str	r3, [r7, #0]
3401944c:	683b      	ldr	r3, [r7, #0]
3401944e:	f043 0301 	orr.w	r3, r3, #1
34019452:	603b      	str	r3, [r7, #0]
34019454:	4a0e      	ldr	r2, [pc, #56]	@ (34019490 <LL_ATON_RT_RuntimeInit+0xa8>)
34019456:	683b      	ldr	r3, [r7, #0]
34019458:	6013      	str	r3, [r2, #0]

  /** Initialize OSAL layer **/
  LL_ATON_OSAL_INIT();

  /** Disable all four ATON interrupts **/
  LL_ATON_DISABLE_ALL_IRQs();
3401945a:	2035      	movs	r0, #53	@ 0x35
3401945c:	f7ff faf2 	bl	34018a44 <__NVIC_DisableIRQ>
34019460:	2036      	movs	r0, #54	@ 0x36
34019462:	f7ff faef 	bl	34018a44 <__NVIC_DisableIRQ>
34019466:	2037      	movs	r0, #55	@ 0x37
34019468:	f7ff faec 	bl	34018a44 <__NVIC_DisableIRQ>
3401946c:	2038      	movs	r0, #56	@ 0x38
3401946e:	f7ff fae9 	bl	34018a44 <__NVIC_DisableIRQ>

  /** Install IRQ handler **/
  LL_ATON_OSAL_INSTALL_IRQ(ATON_STD_IRQ_LINE, ATON_STD_IRQHandler);

  /** Enable ATON `ATON_STD_IRQ_LINE` interrupt **/
  LL_ATON_OSAL_ENABLE_IRQ(ATON_STD_IRQ_LINE);
34019472:	2035      	movs	r0, #53	@ 0x35
34019474:	f7ff fac8 	bl	34018a08 <__NVIC_EnableIRQ>

  /** After having initialized ATON call callback (which among others might initialize further subsystems) */
  if (ll_aton_init_deinit_trace)
34019478:	4b08      	ldr	r3, [pc, #32]	@ (3401949c <LL_ATON_RT_RuntimeInit+0xb4>)
3401947a:	681b      	ldr	r3, [r3, #0]
3401947c:	2b00      	cmp	r3, #0
3401947e:	d003      	beq.n	34019488 <LL_ATON_RT_RuntimeInit+0xa0>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
34019480:	4b06      	ldr	r3, [pc, #24]	@ (3401949c <LL_ATON_RT_RuntimeInit+0xb4>)
34019482:	681b      	ldr	r3, [r3, #0]
34019484:	2006      	movs	r0, #6
34019486:	4798      	blx	r3
}
34019488:	bf00      	nop
3401948a:	3708      	adds	r7, #8
3401948c:	46bd      	mov	sp, r7
3401948e:	bd80      	pop	{r7, pc}
34019490:	580e1000 	.word	0x580e1000
34019494:	580e1014 	.word	0x580e1014
34019498:	580e1024 	.word	0x580e1024
3401949c:	3401f958 	.word	0x3401f958

340194a0 <LL_ATON_RT_RuntimeDeInit>:
 * @brief De-initialize the ATON runtime
 * @param nn_instance Pointer to network instance to de-initialize (optional - i.e. may be `NULL`, see
 * `LL_ATON_RT_DeInit_Network()`)
 */
void LL_ATON_RT_RuntimeDeInit(void)
{
340194a0:	b580      	push	{r7, lr}
340194a2:	af00      	add	r7, sp, #0
  /* Call runtime de-init callback */
  if (ll_aton_init_deinit_trace)
340194a4:	4b0b      	ldr	r3, [pc, #44]	@ (340194d4 <LL_ATON_RT_RuntimeDeInit+0x34>)
340194a6:	681b      	ldr	r3, [r3, #0]
340194a8:	2b00      	cmp	r3, #0
340194aa:	d003      	beq.n	340194b4 <LL_ATON_RT_RuntimeDeInit+0x14>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
340194ac:	4b09      	ldr	r3, [pc, #36]	@ (340194d4 <LL_ATON_RT_RuntimeDeInit+0x34>)
340194ae:	681b      	ldr	r3, [r3, #0]
340194b0:	2007      	movs	r0, #7
340194b2:	4798      	blx	r3

  /* Disable all four ATON interrupts */
  LL_ATON_DISABLE_ALL_IRQs();
340194b4:	2035      	movs	r0, #53	@ 0x35
340194b6:	f7ff fac5 	bl	34018a44 <__NVIC_DisableIRQ>
340194ba:	2036      	movs	r0, #54	@ 0x36
340194bc:	f7ff fac2 	bl	34018a44 <__NVIC_DisableIRQ>
340194c0:	2037      	movs	r0, #55	@ 0x37
340194c2:	f7ff fabf 	bl	34018a44 <__NVIC_DisableIRQ>
340194c6:	2038      	movs	r0, #56	@ 0x38
340194c8:	f7ff fabc 	bl	34018a44 <__NVIC_DisableIRQ>

  /* De-initialize OSAL layer */
  LL_ATON_OSAL_DEINIT();

  /* De-initialize ATON IPs */
  LL_ATON_DeInit();
340194cc:	f7fe ffb4 	bl	34018438 <LL_ATON_DeInit>
}
340194d0:	bf00      	nop
340194d2:	bd80      	pop	{r7, pc}
340194d4:	3401f958 	.word	0x3401f958

340194d8 <LL_ATON_RT_RunEpochBlock>:
 *                            same thread!
 *                            It is entirely the user's responsibility to comply with this restriction!
 * @retval LL_ATON_RT_DONE    NN execution finished
 */
LL_ATON_RT_RetValues_t LL_ATON_RT_RunEpochBlock(NN_Instance_TypeDef *nn_instance)
{
340194d8:	b580      	push	{r7, lr}
340194da:	b084      	sub	sp, #16
340194dc:	af00      	add	r7, sp, #0
340194de:	6078      	str	r0, [r7, #4]
  LL_ATON_ASSERT(nn_instance != NULL);
340194e0:	687b      	ldr	r3, [r7, #4]
340194e2:	2b00      	cmp	r3, #0
340194e4:	d106      	bne.n	340194f4 <LL_ATON_RT_RunEpochBlock+0x1c>
340194e6:	4b63      	ldr	r3, [pc, #396]	@ (34019674 <LL_ATON_RT_RunEpochBlock+0x19c>)
340194e8:	4a63      	ldr	r2, [pc, #396]	@ (34019678 <LL_ATON_RT_RunEpochBlock+0x1a0>)
340194ea:	f44f 7110 	mov.w	r1, #576	@ 0x240
340194ee:	4863      	ldr	r0, [pc, #396]	@ (3401967c <LL_ATON_RT_RunEpochBlock+0x1a4>)
340194f0:	f000 fae8 	bl	34019ac4 <__assert_func>

  /* Test for wrong/missing initialization */
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
340194f4:	687b      	ldr	r3, [r7, #4]
340194f6:	685b      	ldr	r3, [r3, #4]
340194f8:	2b00      	cmp	r3, #0
340194fa:	d106      	bne.n	3401950a <LL_ATON_RT_RunEpochBlock+0x32>
340194fc:	4b60      	ldr	r3, [pc, #384]	@ (34019680 <LL_ATON_RT_RunEpochBlock+0x1a8>)
340194fe:	4a5e      	ldr	r2, [pc, #376]	@ (34019678 <LL_ATON_RT_RunEpochBlock+0x1a0>)
34019500:	f240 2143 	movw	r1, #579	@ 0x243
34019504:	485d      	ldr	r0, [pc, #372]	@ (3401967c <LL_ATON_RT_RunEpochBlock+0x1a4>)
34019506:	f000 fadd 	bl	34019ac4 <__assert_func>

  /* Check if network is starting a new inference */
  if (nn_instance->exec_state.inference_started == false)
3401950a:	687b      	ldr	r3, [r7, #4]
3401950c:	7e1b      	ldrb	r3, [r3, #24]
3401950e:	f083 0301 	eor.w	r3, r3, #1
34019512:	b2db      	uxtb	r3, r3
34019514:	2b00      	cmp	r3, #0
34019516:	d022      	beq.n	3401955e <LL_ATON_RT_RunEpochBlock+0x86>
    {
      LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
      ret = nn_instance->network->ec_inference_init();
    }
#else
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
34019518:	687b      	ldr	r3, [r7, #4]
3401951a:	681b      	ldr	r3, [r3, #0]
3401951c:	2b00      	cmp	r3, #0
3401951e:	d004      	beq.n	3401952a <LL_ATON_RT_RunEpochBlock+0x52>
34019520:	687b      	ldr	r3, [r7, #4]
34019522:	681b      	ldr	r3, [r3, #0]
34019524:	689b      	ldr	r3, [r3, #8]
34019526:	2b00      	cmp	r3, #0
34019528:	d106      	bne.n	34019538 <LL_ATON_RT_RunEpochBlock+0x60>
3401952a:	4b56      	ldr	r3, [pc, #344]	@ (34019684 <LL_ATON_RT_RunEpochBlock+0x1ac>)
3401952c:	4a52      	ldr	r2, [pc, #328]	@ (34019678 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401952e:	f240 2155 	movw	r1, #597	@ 0x255
34019532:	4852      	ldr	r0, [pc, #328]	@ (3401967c <LL_ATON_RT_RunEpochBlock+0x1a4>)
34019534:	f000 fac6 	bl	34019ac4 <__assert_func>
    bool ret = nn_instance->network->ec_inference_init();
34019538:	687b      	ldr	r3, [r7, #4]
3401953a:	681b      	ldr	r3, [r3, #0]
3401953c:	689b      	ldr	r3, [r3, #8]
3401953e:	4798      	blx	r3
34019540:	4603      	mov	r3, r0
34019542:	73bb      	strb	r3, [r7, #14]
#endif

    LL_ATON_ASSERT(ret == true);
34019544:	7bbb      	ldrb	r3, [r7, #14]
34019546:	2b01      	cmp	r3, #1
34019548:	d006      	beq.n	34019558 <LL_ATON_RT_RunEpochBlock+0x80>
3401954a:	4b4f      	ldr	r3, [pc, #316]	@ (34019688 <LL_ATON_RT_RunEpochBlock+0x1b0>)
3401954c:	4a4a      	ldr	r2, [pc, #296]	@ (34019678 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401954e:	f240 2159 	movw	r1, #601	@ 0x259
34019552:	484a      	ldr	r0, [pc, #296]	@ (3401967c <LL_ATON_RT_RunEpochBlock+0x1a4>)
34019554:	f000 fab6 	bl	34019ac4 <__assert_func>
    LL_ATON_LIB_UNUSED(ret);

    /* Set inference started flag to `true` */
    nn_instance->exec_state.inference_started = true;
34019558:	687b      	ldr	r3, [r7, #4]
3401955a:	2201      	movs	r2, #1
3401955c:	761a      	strb	r2, [r3, #24]
    /* Placeholder for things which need to be done before starting an inference */
    /* ==> here <== */
  }

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  bool this_run_executed_end_epoch = false;
3401955e:	2300      	movs	r3, #0
34019560:	73fb      	strb	r3, [r7, #15]

  while (true)
  {
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    /* wait for current epoch block to finish */
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
34019562:	687b      	ldr	r3, [r7, #4]
34019564:	685b      	ldr	r3, [r3, #4]
34019566:	4618      	mov	r0, r3
34019568:	f7ff fe68 	bl	3401923c <__LL_ATON_RT_GetWaitMask>
3401956c:	60b8      	str	r0, [r7, #8]
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
3401956e:	687b      	ldr	r3, [r7, #4]
34019570:	f893 3020 	ldrb.w	r3, [r3, #32]
34019574:	b2db      	uxtb	r3, r3
34019576:	2b00      	cmp	r3, #0
34019578:	d030      	beq.n	340195dc <LL_ATON_RT_RunEpochBlock+0x104>
3401957a:	68bb      	ldr	r3, [r7, #8]
3401957c:	2b00      	cmp	r3, #0
3401957e:	d02d      	beq.n	340195dc <LL_ATON_RT_RunEpochBlock+0x104>
    {
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
34019580:	687b      	ldr	r3, [r7, #4]
34019582:	69da      	ldr	r2, [r3, #28]
34019584:	68bb      	ldr	r3, [r7, #8]
34019586:	4013      	ands	r3, r2
34019588:	68ba      	ldr	r2, [r7, #8]
3401958a:	429a      	cmp	r2, r3
3401958c:	d124      	bne.n	340195d8 <LL_ATON_RT_RunEpochBlock+0x100>
      {
        /* Enter critical section */
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
3401958e:	4b3f      	ldr	r3, [pc, #252]	@ (3401968c <LL_ATON_RT_RunEpochBlock+0x1b4>)
34019590:	681b      	ldr	r3, [r3, #0]
34019592:	687a      	ldr	r2, [r7, #4]
34019594:	429a      	cmp	r2, r3
34019596:	d006      	beq.n	340195a6 <LL_ATON_RT_RunEpochBlock+0xce>
34019598:	4b3d      	ldr	r3, [pc, #244]	@ (34019690 <LL_ATON_RT_RunEpochBlock+0x1b8>)
3401959a:	4a37      	ldr	r2, [pc, #220]	@ (34019678 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401959c:	f240 2171 	movw	r1, #625	@ 0x271
340195a0:	4836      	ldr	r0, [pc, #216]	@ (3401967c <LL_ATON_RT_RunEpochBlock+0x1a4>)
340195a2:	f000 fa8f 	bl	34019ac4 <__assert_func>
                       nn_instance); // when entering a critical section we MUST hold the ATON IP lock
        LL_ATON_OSAL_ENTER_CS();
340195a6:	2035      	movs	r0, #53	@ 0x35
340195a8:	f7ff fa4c 	bl	34018a44 <__NVIC_DisableIRQ>

        /* reset triggered events */
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
340195ac:	687b      	ldr	r3, [r7, #4]
340195ae:	69da      	ldr	r2, [r3, #28]
340195b0:	68bb      	ldr	r3, [r7, #8]
340195b2:	43db      	mvns	r3, r3
340195b4:	401a      	ands	r2, r3
340195b6:	687b      	ldr	r3, [r7, #4]
340195b8:	61da      	str	r2, [r3, #28]

        /* Exit critical section */
        LL_ATON_OSAL_EXIT_CS();
340195ba:	2035      	movs	r0, #53	@ 0x35
340195bc:	f7ff fa24 	bl	34018a08 <__NVIC_EnableIRQ>

        /* end/clean-up epoch block */
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
340195c0:	687b      	ldr	r3, [r7, #4]
340195c2:	685b      	ldr	r3, [r3, #4]
340195c4:	6879      	ldr	r1, [r7, #4]
340195c6:	4618      	mov	r0, r3
340195c8:	f7ff fd1e 	bl	34019008 <__LL_ATON_RT_ExecEndEpochBlock>
        this_run_executed_end_epoch = true;
340195cc:	2301      	movs	r3, #1
340195ce:	73fb      	strb	r3, [r7, #15]

        /* advance epoch block */
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
340195d0:	6878      	ldr	r0, [r7, #4]
340195d2:	f7ff fdd5 	bl	34019180 <__LL_ATON_RT_DetermineNextEpochBlock>
340195d6:	e001      	b.n	340195dc <LL_ATON_RT_RunEpochBlock+0x104>
      }
      else
      {
        /* Return to main loop */
        return LL_ATON_RT_WFE;
340195d8:	2301      	movs	r3, #1
340195da:	e047      	b.n	3401966c <LL_ATON_RT_RunEpochBlock+0x194>
      }
    }
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

    /* test for last epoch block */
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
340195dc:	687b      	ldr	r3, [r7, #4]
340195de:	685b      	ldr	r3, [r3, #4]
340195e0:	4618      	mov	r0, r3
340195e2:	f7ff fa53 	bl	34018a8c <EpochBlock_IsLastEpochBlock>
340195e6:	4603      	mov	r3, r0
340195e8:	2b00      	cmp	r3, #0
340195ea:	d011      	beq.n	34019610 <LL_ATON_RT_RunEpochBlock+0x138>
    {
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
340195ec:	687b      	ldr	r3, [r7, #4]
340195ee:	691b      	ldr	r3, [r3, #16]
340195f0:	2b00      	cmp	r3, #0
340195f2:	d00b      	beq.n	3401960c <LL_ATON_RT_RunEpochBlock+0x134>
      {
        /* return from inserted epoch block */
        __LL_ATON_RT_RetFromLibEpochBlockArray(true, nn_instance);
340195f4:	6879      	ldr	r1, [r7, #4]
340195f6:	2001      	movs	r0, #1
340195f8:	f7ff fba4 	bl	34018d44 <__LL_ATON_RT_RetFromLibEpochBlockArray>

        /* advance epoch block */
        nn_instance->exec_state.current_epoch_block++;
340195fc:	687b      	ldr	r3, [r7, #4]
340195fe:	685b      	ldr	r3, [r3, #4]
34019600:	f103 0214 	add.w	r2, r3, #20
34019604:	687b      	ldr	r3, [r7, #4]
34019606:	605a      	str	r2, [r3, #4]

        /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
        return LL_ATON_RT_NO_WFE;
34019608:	2300      	movs	r3, #0
3401960a:	e02f      	b.n	3401966c <LL_ATON_RT_RunEpochBlock+0x194>
      }
      else
      {
        /* Reached end of execution */
        return LL_ATON_RT_DONE;
3401960c:	2302      	movs	r3, #2
3401960e:	e02d      	b.n	3401966c <LL_ATON_RT_RunEpochBlock+0x194>
      }
    }

    /* run/start current epoch block */
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    if (this_run_executed_end_epoch)
34019610:	7bfb      	ldrb	r3, [r7, #15]
34019612:	2b00      	cmp	r3, #0
34019614:	d001      	beq.n	3401961a <LL_ATON_RT_RunEpochBlock+0x142>
    { // alow reset of network (see function `LL_ATON_RT_Reset_Network()`)
      /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
      return LL_ATON_RT_NO_WFE;
34019616:	2300      	movs	r3, #0
34019618:	e028      	b.n	3401966c <LL_ATON_RT_RunEpochBlock+0x194>
    }

    if (!nn_instance->exec_state.current_epoch_block_started)
3401961a:	687b      	ldr	r3, [r7, #4]
3401961c:	f893 3020 	ldrb.w	r3, [r3, #32]
34019620:	b2db      	uxtb	r3, r3
34019622:	f083 0301 	eor.w	r3, r3, #1
34019626:	b2db      	uxtb	r3, r3
34019628:	2b00      	cmp	r3, #0
3401962a:	d009      	beq.n	34019640 <LL_ATON_RT_RunEpochBlock+0x168>
    {
      nn_instance->exec_state.current_epoch_block_started = true;
3401962c:	687b      	ldr	r3, [r7, #4]
3401962e:	2201      	movs	r2, #1
34019630:	f883 2020 	strb.w	r2, [r3, #32]

      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
34019634:	687b      	ldr	r3, [r7, #4]
34019636:	685b      	ldr	r3, [r3, #4]
34019638:	6879      	ldr	r1, [r7, #4]
3401963a:	4618      	mov	r0, r3
3401963c:	f7ff fc38 	bl	34018eb0 <__LL_ATON_RT_ExecStartEpochBlock>
    }

    /* End epoch block and advance to next one */
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
34019640:	687b      	ldr	r3, [r7, #4]
34019642:	685b      	ldr	r3, [r3, #4]
34019644:	4618      	mov	r0, r3
34019646:	f7ff fdf9 	bl	3401923c <__LL_ATON_RT_GetWaitMask>
3401964a:	4603      	mov	r3, r0
3401964c:	2b00      	cmp	r3, #0
3401964e:	d10c      	bne.n	3401966a <LL_ATON_RT_RunEpochBlock+0x192>
    {
      /* end/clean-up epoch block */
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
34019650:	687b      	ldr	r3, [r7, #4]
34019652:	685b      	ldr	r3, [r3, #4]
34019654:	6879      	ldr	r1, [r7, #4]
34019656:	4618      	mov	r0, r3
34019658:	f7ff fcd6 	bl	34019008 <__LL_ATON_RT_ExecEndEpochBlock>
      this_run_executed_end_epoch = true; // has no effect (just for cosmetics)
3401965c:	2301      	movs	r3, #1
3401965e:	73fb      	strb	r3, [r7, #15]

      /* advance epoch block */
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
34019660:	6878      	ldr	r0, [r7, #4]
34019662:	f7ff fd8d 	bl	34019180 <__LL_ATON_RT_DetermineNextEpochBlock>

      /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
      return LL_ATON_RT_NO_WFE;
34019666:	2300      	movs	r3, #0
34019668:	e000      	b.n	3401966c <LL_ATON_RT_RunEpochBlock+0x194>
    }
    else
    {
      /* Return to main loop */
      return LL_ATON_RT_WFE;
3401966a:	2301      	movs	r3, #1
    /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
    return LL_ATON_RT_NO_WFE;

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  }
}
3401966c:	4618      	mov	r0, r3
3401966e:	3710      	adds	r7, #16
34019670:	46bd      	mov	sp, r7
34019672:	bd80      	pop	{r7, pc}
34019674:	3401d820 	.word	0x3401d820
34019678:	3401e620 	.word	0x3401e620
3401967c:	3401d9d4 	.word	0x3401d9d4
34019680:	3401dbc4 	.word	0x3401dbc4
34019684:	3401dc00 	.word	0x3401dc00
34019688:	3401dbb8 	.word	0x3401dbb8
3401968c:	3401f950 	.word	0x3401f950
34019690:	3401da68 	.word	0x3401da68

34019694 <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
34019694:	b5b0      	push	{r4, r5, r7, lr}
34019696:	b086      	sub	sp, #24
34019698:	af00      	add	r7, sp, #0
3401969a:	6078      	str	r0, [r7, #4]
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3401969c:	687b      	ldr	r3, [r7, #4]
3401969e:	2b00      	cmp	r3, #0
340196a0:	f000 8093 	beq.w	340197ca <__LL_ATON_RT_IrqErr+0x136>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
340196a4:	687a      	ldr	r2, [r7, #4]
340196a6:	4b4b      	ldr	r3, [pc, #300]	@ (340197d4 <__LL_ATON_RT_IrqErr+0x140>)
340196a8:	4013      	ands	r3, r2
340196aa:	2b00      	cmp	r3, #0
340196ac:	d015      	beq.n	340196da <__LL_ATON_RT_IrqErr+0x46>
    int64_t masked_irqs; // must be signed for two's compliment `(-masked_irqs)`
#else                    //(ATON_INT_NR <= 32)
    int32_t masked_irqs; // must be signed for two's compliment `(-masked_irqs)`
#endif                   //(ATON_INT_NR <= 32)

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));
340196ae:	687a      	ldr	r2, [r7, #4]
340196b0:	4b48      	ldr	r3, [pc, #288]	@ (340197d4 <__LL_ATON_RT_IrqErr+0x140>)
340196b2:	4013      	ands	r3, r2
340196b4:	613b      	str	r3, [r7, #16]

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
340196b6:	693b      	ldr	r3, [r7, #16]
340196b8:	425a      	negs	r2, r3
340196ba:	693b      	ldr	r3, [r7, #16]
340196bc:	4013      	ands	r3, r2
340196be:	60fb      	str	r3, [r7, #12]
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
340196c0:	68fb      	ldr	r3, [r7, #12]
340196c2:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340196c6:	33e5      	adds	r3, #229	@ 0xe5
340196c8:	031b      	lsls	r3, r3, #12
340196ca:	333c      	adds	r3, #60	@ 0x3c
340196cc:	681b      	ldr	r3, [r3, #0]
340196ce:	60bb      	str	r3, [r7, #8]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
340196d0:	68ba      	ldr	r2, [r7, #8]
340196d2:	68f9      	ldr	r1, [r7, #12]
340196d4:	4840      	ldr	r0, [pc, #256]	@ (340197d8 <__LL_ATON_RT_IrqErr+0x144>)
340196d6:	f000 ffd7 	bl	3401a688 <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
340196da:	687b      	ldr	r3, [r7, #4]
340196dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
340196e0:	2b00      	cmp	r3, #0
340196e2:	d002      	beq.n	340196ea <__LL_ATON_RT_IrqErr+0x56>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
340196e4:	483d      	ldr	r0, [pc, #244]	@ (340197dc <__LL_ATON_RT_IrqErr+0x148>)
340196e6:	f001 f837 	bl	3401a758 <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
340196ea:	687b      	ldr	r3, [r7, #4]
340196ec:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
340196f0:	2b00      	cmp	r3, #0
340196f2:	d002      	beq.n	340196fa <__LL_ATON_RT_IrqErr+0x66>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
340196f4:	483a      	ldr	r0, [pc, #232]	@ (340197e0 <__LL_ATON_RT_IrqErr+0x14c>)
340196f6:	f001 f82f 	bl	3401a758 <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
340196fa:	687b      	ldr	r3, [r7, #4]
340196fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34019700:	2b00      	cmp	r3, #0
34019702:	d002      	beq.n	3401970a <__LL_ATON_RT_IrqErr+0x76>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
34019704:	4837      	ldr	r0, [pc, #220]	@ (340197e4 <__LL_ATON_RT_IrqErr+0x150>)
34019706:	f001 f827 	bl	3401a758 <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3401970a:	687b      	ldr	r3, [r7, #4]
3401970c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
34019710:	2b00      	cmp	r3, #0
34019712:	d017      	beq.n	34019744 <__LL_ATON_RT_IrqErr+0xb0>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
34019714:	4834      	ldr	r0, [pc, #208]	@ (340197e8 <__LL_ATON_RT_IrqErr+0x154>)
34019716:	f001 f81f 	bl	3401a758 <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
3401971a:	2300      	movs	r3, #0
3401971c:	617b      	str	r3, [r7, #20]
3401971e:	e00e      	b.n	3401973e <__LL_ATON_RT_IrqErr+0xaa>
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
34019720:	697b      	ldr	r3, [r7, #20]
34019722:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34019726:	33e2      	adds	r3, #226	@ 0xe2
34019728:	031b      	lsls	r3, r3, #12
3401972a:	3310      	adds	r3, #16
3401972c:	681b      	ldr	r3, [r3, #0]
3401972e:	461a      	mov	r2, r3
34019730:	6979      	ldr	r1, [r7, #20]
34019732:	482e      	ldr	r0, [pc, #184]	@ (340197ec <__LL_ATON_RT_IrqErr+0x158>)
34019734:	f000 ffa8 	bl	3401a688 <iprintf>
    for (i = 0; i < ATON_BUSIF_NUM; i++)
34019738:	697b      	ldr	r3, [r7, #20]
3401973a:	3301      	adds	r3, #1
3401973c:	617b      	str	r3, [r7, #20]
3401973e:	697b      	ldr	r3, [r7, #20]
34019740:	2b01      	cmp	r3, #1
34019742:	dded      	ble.n	34019720 <__LL_ATON_RT_IrqErr+0x8c>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
34019744:	687b      	ldr	r3, [r7, #4]
34019746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3401974a:	2b00      	cmp	r3, #0
3401974c:	d002      	beq.n	34019754 <__LL_ATON_RT_IrqErr+0xc0>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3401974e:	4828      	ldr	r0, [pc, #160]	@ (340197f0 <__LL_ATON_RT_IrqErr+0x15c>)
34019750:	f001 f802 	bl	3401a758 <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
34019754:	687b      	ldr	r3, [r7, #4]
34019756:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3401975a:	2b00      	cmp	r3, #0
3401975c:	d011      	beq.n	34019782 <__LL_ATON_RT_IrqErr+0xee>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3401975e:	4b25      	ldr	r3, [pc, #148]	@ (340197f4 <__LL_ATON_RT_IrqErr+0x160>)
34019760:	681b      	ldr	r3, [r3, #0]
34019762:	4619      	mov	r1, r3
34019764:	4824      	ldr	r0, [pc, #144]	@ (340197f8 <__LL_ATON_RT_IrqErr+0x164>)
34019766:	f000 ff8f 	bl	3401a688 <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3401976a:	4b24      	ldr	r3, [pc, #144]	@ (340197fc <__LL_ATON_RT_IrqErr+0x168>)
3401976c:	681b      	ldr	r3, [r3, #0]
3401976e:	4619      	mov	r1, r3
34019770:	4823      	ldr	r0, [pc, #140]	@ (34019800 <__LL_ATON_RT_IrqErr+0x16c>)
34019772:	f000 ff89 	bl	3401a688 <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
34019776:	4b23      	ldr	r3, [pc, #140]	@ (34019804 <__LL_ATON_RT_IrqErr+0x170>)
34019778:	681b      	ldr	r3, [r3, #0]
3401977a:	4619      	mov	r1, r3
3401977c:	4822      	ldr	r0, [pc, #136]	@ (34019808 <__LL_ATON_RT_IrqErr+0x174>)
3401977e:	f000 ff83 	bl	3401a688 <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
34019782:	687b      	ldr	r3, [r7, #4]
34019784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34019788:	2b00      	cmp	r3, #0
3401978a:	d002      	beq.n	34019792 <__LL_ATON_RT_IrqErr+0xfe>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3401978c:	481f      	ldr	r0, [pc, #124]	@ (3401980c <__LL_ATON_RT_IrqErr+0x178>)
3401978e:	f000 ffe3 	bl	3401a758 <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
34019792:	687b      	ldr	r3, [r7, #4]
34019794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34019798:	2b00      	cmp	r3, #0
3401979a:	d002      	beq.n	340197a2 <__LL_ATON_RT_IrqErr+0x10e>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3401979c:	481c      	ldr	r0, [pc, #112]	@ (34019810 <__LL_ATON_RT_IrqErr+0x17c>)
3401979e:	f000 ffdb 	bl	3401a758 <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
340197a2:	f7ff fb5d 	bl	34018e60 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
340197a6:	687b      	ldr	r3, [r7, #4]
340197a8:	2200      	movs	r2, #0
340197aa:	461c      	mov	r4, r3
340197ac:	4615      	mov	r5, r2
340197ae:	4622      	mov	r2, r4
340197b0:	462b      	mov	r3, r5
340197b2:	f240 314a 	movw	r1, #842	@ 0x34a
340197b6:	4817      	ldr	r0, [pc, #92]	@ (34019814 <__LL_ATON_RT_IrqErr+0x180>)
340197b8:	f000 ff66 	bl	3401a688 <iprintf>
#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
#endif
  LL_ATON_ASSERT(false); // may never happen
340197bc:	4b16      	ldr	r3, [pc, #88]	@ (34019818 <__LL_ATON_RT_IrqErr+0x184>)
340197be:	4a17      	ldr	r2, [pc, #92]	@ (3401981c <__LL_ATON_RT_IrqErr+0x188>)
340197c0:	f240 314e 	movw	r1, #846	@ 0x34e
340197c4:	4816      	ldr	r0, [pc, #88]	@ (34019820 <__LL_ATON_RT_IrqErr+0x18c>)
340197c6:	f000 f97d 	bl	34019ac4 <__assert_func>
    return;
340197ca:	bf00      	nop
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
340197cc:	3718      	adds	r7, #24
340197ce:	46bd      	mov	sp, r7
340197d0:	bdb0      	pop	{r4, r5, r7, pc}
340197d2:	bf00      	nop
340197d4:	000ffc00 	.word	0x000ffc00
340197d8:	3401dc64 	.word	0x3401dc64
340197dc:	3401dc94 	.word	0x3401dc94
340197e0:	3401dcbc 	.word	0x3401dcbc
340197e4:	3401dce0 	.word	0x3401dce0
340197e8:	3401dd00 	.word	0x3401dd00
340197ec:	3401dd18 	.word	0x3401dd18
340197f0:	3401dd30 	.word	0x3401dd30
340197f4:	580fe00c 	.word	0x580fe00c
340197f8:	3401dd48 	.word	0x3401dd48
340197fc:	580fe020 	.word	0x580fe020
34019800:	3401dd7c 	.word	0x3401dd7c
34019804:	580fe01c 	.word	0x580fe01c
34019808:	3401dda8 	.word	0x3401dda8
3401980c:	3401ddcc 	.word	0x3401ddcc
34019810:	3401ddf0 	.word	0x3401ddf0
34019814:	3401de0c 	.word	0x3401de0c
34019818:	3401de34 	.word	0x3401de34
3401981c:	3401e734 	.word	0x3401e734
34019820:	3401d9d4 	.word	0x3401d9d4

34019824 <__LL_ATON_RT_IrqEpochBlock>:
#if (ATON_INT_NR > 32)
static inline void __LL_ATON_RT_IrqEpochBlock(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static inline void __LL_ATON_RT_IrqEpochBlock(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
34019824:	b480      	push	{r7}
34019826:	b087      	sub	sp, #28
34019828:	af00      	add	r7, sp, #0
3401982a:	6078      	str	r0, [r7, #4]
   * consecutive bits within the `INTREG` register (and within all other interrupt controller registers, like e.g.
   * status/mask/clear)! */
  irqs >>= ATON_STRENG_INT(0);
  wait_irqs =
      irqs &
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3401982c:	4b20      	ldr	r3, [pc, #128]	@ (340198b0 <__LL_ATON_RT_IrqEpochBlock+0x8c>)
3401982e:	681b      	ldr	r3, [r3, #0]
34019830:	685b      	ldr	r3, [r3, #4]
          ->wait_mask; /* treat only IRQs we are currently waiting for
34019832:	68db      	ldr	r3, [r3, #12]
  wait_irqs =
34019834:	687a      	ldr	r2, [r7, #4]
34019836:	4013      	ands	r3, r2
34019838:	60fb      	str	r3, [r7, #12]
                          (Note: we might be running in a hybrid function which uses DMAs in parallel with a "normal"
                          ATON execution and we must not clear the IRQs of this "normal" ATON execution here) */
  if (wait_irqs)
3401983a:	68fb      	ldr	r3, [r7, #12]
3401983c:	2b00      	cmp	r3, #0
3401983e:	d031      	beq.n	340198a4 <__LL_ATON_RT_IrqEpochBlock+0x80>
  {
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
34019840:	4b1b      	ldr	r3, [pc, #108]	@ (340198b0 <__LL_ATON_RT_IrqEpochBlock+0x8c>)
34019842:	681b      	ldr	r3, [r3, #0]
34019844:	69db      	ldr	r3, [r3, #28]
34019846:	613b      	str	r3, [r7, #16]
    for (i = 0; i < ATON_STRENG_NUM; i++)
34019848:	2300      	movs	r3, #0
3401984a:	617b      	str	r3, [r7, #20]
3401984c:	e023      	b.n	34019896 <__LL_ATON_RT_IrqEpochBlock+0x72>
    {
      /* Handle event interrupts */
      if ((wait_irqs >> i) & 1)
3401984e:	68fa      	ldr	r2, [r7, #12]
34019850:	697b      	ldr	r3, [r7, #20]
34019852:	fa22 f303 	lsr.w	r3, r2, r3
34019856:	f003 0301 	and.w	r3, r3, #1
3401985a:	2b00      	cmp	r3, #0
3401985c:	d018      	beq.n	34019890 <__LL_ATON_RT_IrqEpochBlock+0x6c>
      { /* more future-proofed but less efficient alternative:
           `if (wait_irqs & ATON_STRENG_INT_MASK(i, 0, 0))`
         */
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3401985e:	697b      	ldr	r3, [r7, #20]
34019860:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34019864:	33e5      	adds	r3, #229	@ 0xe5
34019866:	031b      	lsls	r3, r3, #12
34019868:	333c      	adds	r3, #60	@ 0x3c
3401986a:	681b      	ldr	r3, [r3, #0]
3401986c:	60bb      	str	r3, [r7, #8]
        ATON_STRENG_IRQ_SET(
3401986e:	697b      	ldr	r3, [r7, #20]
34019870:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34019874:	33e5      	adds	r3, #229	@ 0xe5
34019876:	031b      	lsls	r3, r3, #12
34019878:	333c      	adds	r3, #60	@ 0x3c
3401987a:	461a      	mov	r2, r3
3401987c:	68bb      	ldr	r3, [r7, #8]
3401987e:	6013      	str	r3, [r2, #0]
            i, strengIrqs); /* Acknowledge ATON interrupt source (i.e. stream engine #i) - could be more fine grain */

        /* Handle RT integration */
        _tmp_triggered_events |= (1 << i);
34019880:	2201      	movs	r2, #1
34019882:	697b      	ldr	r3, [r7, #20]
34019884:	fa02 f303 	lsl.w	r3, r2, r3
34019888:	461a      	mov	r2, r3
3401988a:	693b      	ldr	r3, [r7, #16]
3401988c:	4313      	orrs	r3, r2
3401988e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < ATON_STRENG_NUM; i++)
34019890:	697b      	ldr	r3, [r7, #20]
34019892:	3301      	adds	r3, #1
34019894:	617b      	str	r3, [r7, #20]
34019896:	697b      	ldr	r3, [r7, #20]
34019898:	2b09      	cmp	r3, #9
3401989a:	ddd8      	ble.n	3401984e <__LL_ATON_RT_IrqEpochBlock+0x2a>
      }
    }
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3401989c:	4b04      	ldr	r3, [pc, #16]	@ (340198b0 <__LL_ATON_RT_IrqEpochBlock+0x8c>)
3401989e:	681b      	ldr	r3, [r3, #0]
340198a0:	693a      	ldr	r2, [r7, #16]
340198a2:	61da      	str	r2, [r3, #28]
  }
}
340198a4:	bf00      	nop
340198a6:	371c      	adds	r7, #28
340198a8:	46bd      	mov	sp, r7
340198aa:	f85d 7b04 	ldr.w	r7, [sp], #4
340198ae:	4770      	bx	lr
340198b0:	3401f950 	.word	0x3401f950

340198b4 <__LL_ATON_RT_IrqEpochBlob>:
#if (ATON_INT_NR > 32)
static inline void __LL_ATON_RT_IrqEpochBlob(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static inline void __LL_ATON_RT_IrqEpochBlob(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
340198b4:	b580      	push	{r7, lr}
340198b6:	b086      	sub	sp, #24
340198b8:	af00      	add	r7, sp, #0
340198ba:	6078      	str	r0, [r7, #4]
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
340198bc:	4b1d      	ldr	r3, [pc, #116]	@ (34019934 <__LL_ATON_RT_IrqEpochBlob+0x80>)
340198be:	681b      	ldr	r3, [r3, #0]
340198c0:	685b      	ldr	r3, [r3, #4]
340198c2:	4618      	mov	r0, r3
340198c4:	f7ff f954 	bl	34018b70 <EpochBlock_EpochControllerUnit>
340198c8:	6178      	str	r0, [r7, #20]
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
340198ca:	697b      	ldr	r3, [r7, #20]
340198cc:	2b00      	cmp	r3, #0
340198ce:	d006      	beq.n	340198de <__LL_ATON_RT_IrqEpochBlob+0x2a>
340198d0:	4b19      	ldr	r3, [pc, #100]	@ (34019938 <__LL_ATON_RT_IrqEpochBlob+0x84>)
340198d2:	4a1a      	ldr	r2, [pc, #104]	@ (3401993c <__LL_ATON_RT_IrqEpochBlob+0x88>)
340198d4:	f240 3191 	movw	r1, #913	@ 0x391
340198d8:	4819      	ldr	r0, [pc, #100]	@ (34019940 <__LL_ATON_RT_IrqEpochBlob+0x8c>)
340198da:	f000 f8f3 	bl	34019ac4 <__assert_func>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
340198de:	697b      	ldr	r3, [r7, #20]
340198e0:	2b00      	cmp	r3, #0
340198e2:	d007      	beq.n	340198f4 <__LL_ATON_RT_IrqEpochBlob+0x40>
340198e4:	697b      	ldr	r3, [r7, #20]
340198e6:	2b01      	cmp	r3, #1
340198e8:	d102      	bne.n	340198f0 <__LL_ATON_RT_IrqEpochBlob+0x3c>
340198ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
340198ee:	e003      	b.n	340198f8 <__LL_ATON_RT_IrqEpochBlob+0x44>
340198f0:	2300      	movs	r3, #0
340198f2:	e001      	b.n	340198f8 <__LL_ATON_RT_IrqEpochBlob+0x44>
340198f4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
340198f8:	687a      	ldr	r2, [r7, #4]
340198fa:	4013      	ands	r3, r2
340198fc:	2b00      	cmp	r3, #0
340198fe:	d015      	beq.n	3401992c <__LL_ATON_RT_IrqEpochBlob+0x78>
  {
    /* Acknowledge interrupts in active epoch controller unit - could be more fine grain */
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
34019900:	4b10      	ldr	r3, [pc, #64]	@ (34019944 <__LL_ATON_RT_IrqEpochBlob+0x90>)
34019902:	681b      	ldr	r3, [r3, #0]
34019904:	613b      	str	r3, [r7, #16]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
34019906:	4a0f      	ldr	r2, [pc, #60]	@ (34019944 <__LL_ATON_RT_IrqEpochBlob+0x90>)
34019908:	693b      	ldr	r3, [r7, #16]
3401990a:	6013      	str	r3, [r2, #0]

    /* Handle RT integration */
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3401990c:	4b09      	ldr	r3, [pc, #36]	@ (34019934 <__LL_ATON_RT_IrqEpochBlob+0x80>)
3401990e:	681b      	ldr	r3, [r3, #0]
34019910:	69db      	ldr	r3, [r3, #28]
34019912:	60fb      	str	r3, [r7, #12]
    _tmp_triggered_events |= (1 << ecId);
34019914:	2201      	movs	r2, #1
34019916:	697b      	ldr	r3, [r7, #20]
34019918:	fa02 f303 	lsl.w	r3, r2, r3
3401991c:	461a      	mov	r2, r3
3401991e:	68fb      	ldr	r3, [r7, #12]
34019920:	4313      	orrs	r3, r2
34019922:	60fb      	str	r3, [r7, #12]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
34019924:	4b03      	ldr	r3, [pc, #12]	@ (34019934 <__LL_ATON_RT_IrqEpochBlob+0x80>)
34019926:	681b      	ldr	r3, [r3, #0]
34019928:	68fa      	ldr	r2, [r7, #12]
3401992a:	61da      	str	r2, [r3, #28]
  }
}
3401992c:	bf00      	nop
3401992e:	3718      	adds	r7, #24
34019930:	46bd      	mov	sp, r7
34019932:	bd80      	pop	{r7, pc}
34019934:	3401f950 	.word	0x3401f950
34019938:	3401da94 	.word	0x3401da94
3401993c:	3401e758 	.word	0x3401e758
34019940:	3401d9d4 	.word	0x3401d9d4
34019944:	580fe00c 	.word	0x580fe00c

34019948 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
34019948:	b580      	push	{r7, lr}
3401994a:	b082      	sub	sp, #8
3401994c:	af00      	add	r7, sp, #0
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3401994e:	4b3d      	ldr	r3, [pc, #244]	@ (34019a44 <NPU0_IRQHandler+0xfc>)
34019950:	681b      	ldr	r3, [r3, #0]
34019952:	607b      	str	r3, [r7, #4]
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
34019954:	4b3c      	ldr	r3, [pc, #240]	@ (34019a48 <NPU0_IRQHandler+0x100>)
34019956:	681b      	ldr	r3, [r3, #0]
34019958:	2b00      	cmp	r3, #0
3401995a:	d045      	beq.n	340199e8 <NPU0_IRQHandler+0xa0>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3401995c:	4b3a      	ldr	r3, [pc, #232]	@ (34019a48 <NPU0_IRQHandler+0x100>)
3401995e:	681b      	ldr	r3, [r3, #0]
34019960:	685b      	ldr	r3, [r3, #4]
34019962:	2b00      	cmp	r3, #0
34019964:	d106      	bne.n	34019974 <NPU0_IRQHandler+0x2c>
34019966:	4b39      	ldr	r3, [pc, #228]	@ (34019a4c <NPU0_IRQHandler+0x104>)
34019968:	4a39      	ldr	r2, [pc, #228]	@ (34019a50 <NPU0_IRQHandler+0x108>)
3401996a:	f240 31b1 	movw	r1, #945	@ 0x3b1
3401996e:	4839      	ldr	r0, [pc, #228]	@ (34019a54 <NPU0_IRQHandler+0x10c>)
34019970:	f000 f8a8 	bl	34019ac4 <__assert_func>

    /** OR-mask interrupts MUST be handled first **/
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
34019974:	4b34      	ldr	r3, [pc, #208]	@ (34019a48 <NPU0_IRQHandler+0x100>)
34019976:	681b      	ldr	r3, [r3, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
34019978:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3401997a:	4618      	mov	r0, r3
3401997c:	f7ff f8ac 	bl	34018ad8 <EpochBlock_IsEpochBlob>
34019980:	4603      	mov	r3, r0
34019982:	f083 0301 	eor.w	r3, r3, #1
34019986:	b2db      	uxtb	r3, r3
34019988:	2b00      	cmp	r3, #0
3401998a:	d008      	beq.n	3401999e <NPU0_IRQHandler+0x56>
    {
      __LL_ATON_RT_IrqErr(
3401998c:	687b      	ldr	r3, [r7, #4]
3401998e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
34019992:	f023 0303 	bic.w	r3, r3, #3
34019996:	4618      	mov	r0, r3
34019998:	f7ff fe7c 	bl	34019694 <__LL_ATON_RT_IrqErr>
3401999c:	e027      	b.n	340199ee <NPU0_IRQHandler+0xa6>
          irqs & ~ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0)); /* exclude all streaming engine completion interrupts */
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3401999e:	4b2a      	ldr	r3, [pc, #168]	@ (34019a48 <NPU0_IRQHandler+0x100>)
340199a0:	681b      	ldr	r3, [r3, #0]
340199a2:	685b      	ldr	r3, [r3, #4]
340199a4:	4618      	mov	r0, r3
340199a6:	f7ff f8e3 	bl	34018b70 <EpochBlock_EpochControllerUnit>
340199aa:	6038      	str	r0, [r7, #0]
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
340199ac:	683b      	ldr	r3, [r7, #0]
340199ae:	2b00      	cmp	r3, #0
340199b0:	d006      	beq.n	340199c0 <NPU0_IRQHandler+0x78>
340199b2:	4b29      	ldr	r3, [pc, #164]	@ (34019a58 <NPU0_IRQHandler+0x110>)
340199b4:	4a26      	ldr	r2, [pc, #152]	@ (34019a50 <NPU0_IRQHandler+0x108>)
340199b6:	f240 31be 	movw	r1, #958	@ 0x3be
340199ba:	4826      	ldr	r0, [pc, #152]	@ (34019a54 <NPU0_IRQHandler+0x10c>)
340199bc:	f000 f882 	bl	34019ac4 <__assert_func>

      // epoch blob handling based on epoch controller interrupt
      __LL_ATON_RT_IrqErr(
          irqs & ~ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK,
340199c0:	683b      	ldr	r3, [r7, #0]
340199c2:	2b00      	cmp	r3, #0
340199c4:	d008      	beq.n	340199d8 <NPU0_IRQHandler+0x90>
340199c6:	683b      	ldr	r3, [r7, #0]
340199c8:	2b01      	cmp	r3, #1
340199ca:	d102      	bne.n	340199d2 <NPU0_IRQHandler+0x8a>
340199cc:	f06f 5380 	mvn.w	r3, #268435456	@ 0x10000000
340199d0:	e004      	b.n	340199dc <NPU0_IRQHandler+0x94>
340199d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340199d6:	e001      	b.n	340199dc <NPU0_IRQHandler+0x94>
340199d8:	f06f 5380 	mvn.w	r3, #268435456	@ 0x10000000
      __LL_ATON_RT_IrqErr(
340199dc:	687a      	ldr	r2, [r7, #4]
340199de:	4013      	ands	r3, r2
340199e0:	4618      	mov	r0, r3
340199e2:	f7ff fe57 	bl	34019694 <__LL_ATON_RT_IrqErr>
340199e6:	e002      	b.n	340199ee <NPU0_IRQHandler+0xa6>
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
340199e8:	6878      	ldr	r0, [r7, #4]
340199ea:	f7ff fe53 	bl	34019694 <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
340199ee:	4b16      	ldr	r3, [pc, #88]	@ (34019a48 <NPU0_IRQHandler+0x100>)
340199f0:	681b      	ldr	r3, [r3, #0]
340199f2:	2b00      	cmp	r3, #0
340199f4:	d106      	bne.n	34019a04 <NPU0_IRQHandler+0xbc>
340199f6:	4b19      	ldr	r3, [pc, #100]	@ (34019a5c <NPU0_IRQHandler+0x114>)
340199f8:	4a15      	ldr	r2, [pc, #84]	@ (34019a50 <NPU0_IRQHandler+0x108>)
340199fa:	f240 31d2 	movw	r1, #978	@ 0x3d2
340199fe:	4815      	ldr	r0, [pc, #84]	@ (34019a54 <NPU0_IRQHandler+0x10c>)
34019a00:	f000 f860 	bl	34019ac4 <__assert_func>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
34019a04:	4b10      	ldr	r3, [pc, #64]	@ (34019a48 <NPU0_IRQHandler+0x100>)
34019a06:	681b      	ldr	r3, [r3, #0]
34019a08:	685b      	ldr	r3, [r3, #4]
34019a0a:	4618      	mov	r0, r3
34019a0c:	f7ff f864 	bl	34018ad8 <EpochBlock_IsEpochBlob>
34019a10:	4603      	mov	r3, r0
34019a12:	f083 0301 	eor.w	r3, r3, #1
34019a16:	b2db      	uxtb	r3, r3
34019a18:	2b00      	cmp	r3, #0
34019a1a:	d003      	beq.n	34019a24 <NPU0_IRQHandler+0xdc>
  { // standard epoch block handling based on streaming engines
    __LL_ATON_RT_IrqEpochBlock(irqs);
34019a1c:	6878      	ldr	r0, [r7, #4]
34019a1e:	f7ff ff01 	bl	34019824 <__LL_ATON_RT_IrqEpochBlock>
34019a22:	e002      	b.n	34019a2a <NPU0_IRQHandler+0xe2>
  }
  else
  { // epoch blob handling based on epoch controller
#if defined(ATON_EPOCHCTRL_NUM)
    __LL_ATON_RT_IrqEpochBlob(irqs);
34019a24:	6878      	ldr	r0, [r7, #4]
34019a26:	f7ff ff45 	bl	340198b4 <__LL_ATON_RT_IrqEpochBlob>
  __ASM volatile ("dsb 0xF":::"memory");
34019a2a:	f3bf 8f4f 	dsb	sy
}
34019a2e:	bf00      	nop
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
34019a30:	4a0b      	ldr	r2, [pc, #44]	@ (34019a60 <NPU0_IRQHandler+0x118>)
34019a32:	687b      	ldr	r3, [r7, #4]
34019a34:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
34019a36:	f3bf 8f4f 	dsb	sy
}
34019a3a:	bf00      	nop
  /* Signal event */
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
34019a3c:	bf00      	nop
}
34019a3e:	3708      	adds	r7, #8
34019a40:	46bd      	mov	sp, r7
34019a42:	bd80      	pop	{r7, pc}
34019a44:	580e1008 	.word	0x580e1008
34019a48:	3401f950 	.word	0x3401f950
34019a4c:	3401de38 	.word	0x3401de38
34019a50:	3401e748 	.word	0x3401e748
34019a54:	3401d9d4 	.word	0x3401d9d4
34019a58:	3401da94 	.word	0x3401da94
34019a5c:	3401d86c 	.word	0x3401d86c
34019a60:	580e1010 	.word	0x580e1010

34019a64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
34019a64:	480f      	ldr	r0, [pc, #60]	@ (34019aa4 <LoopForever+0x4>)
  msr   MSPLIM, r0
34019a66:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
34019a6a:	480f      	ldr	r0, [pc, #60]	@ (34019aa8 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
34019a6c:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
34019a6e:	f7e9 fcff 	bl	34003470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
34019a72:	480e      	ldr	r0, [pc, #56]	@ (34019aac <LoopForever+0xc>)
  ldr r1, =_edata
34019a74:	490e      	ldr	r1, [pc, #56]	@ (34019ab0 <LoopForever+0x10>)
  ldr r2, =_sidata
34019a76:	4a0f      	ldr	r2, [pc, #60]	@ (34019ab4 <LoopForever+0x14>)
  movs r3, #0
34019a78:	2300      	movs	r3, #0
  b LoopCopyDataInit
34019a7a:	e002      	b.n	34019a82 <LoopCopyDataInit>

34019a7c <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
34019a7c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
34019a7e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
34019a80:	3304      	adds	r3, #4

34019a82 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
34019a82:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34019a84:	428c      	cmp	r4, r1
  bcc CopyDataInit
34019a86:	d3f9      	bcc.n	34019a7c <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
34019a88:	4a0b      	ldr	r2, [pc, #44]	@ (34019ab8 <LoopForever+0x18>)
  ldr r4, =_ebss
34019a8a:	4c0c      	ldr	r4, [pc, #48]	@ (34019abc <LoopForever+0x1c>)
  movs r3, #0
34019a8c:	2300      	movs	r3, #0
  b LoopFillZerobss
34019a8e:	e001      	b.n	34019a94 <LoopFillZerobss>

34019a90 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
34019a90:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
34019a92:	3204      	adds	r2, #4

34019a94 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
34019a94:	42a2      	cmp	r2, r4
  bcc FillZerobss
34019a96:	d3fb      	bcc.n	34019a90 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
34019a98:	f001 f998 	bl	3401adcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
34019a9c:	f7e7 f9e0 	bl	34000e60 <main>

34019aa0 <LoopForever>:

LoopForever:
  b LoopForever
34019aa0:	e7fe      	b.n	34019aa0 <LoopForever>
34019aa2:	0000      	.short	0x0000
  ldr   r0, =_sstack
34019aa4:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
34019aa8:	34100000 	.word	0x34100000
  ldr r0, =_sdata
34019aac:	3401f18c 	.word	0x3401f18c
  ldr r1, =_edata
34019ab0:	3401f410 	.word	0x3401f410
  ldr r2, =_sidata
34019ab4:	3401f18c 	.word	0x3401f18c
  ldr r2, =_sbss
34019ab8:	3401f410 	.word	0x3401f410
  ldr r4, =_ebss
34019abc:	3401faac 	.word	0x3401faac

34019ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34019ac0:	e7fe      	b.n	34019ac0 <ADC1_2_IRQHandler>
	...

34019ac4 <__assert_func>:
34019ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
34019ac6:	4614      	mov	r4, r2
34019ac8:	461a      	mov	r2, r3
34019aca:	4b09      	ldr	r3, [pc, #36]	@ (34019af0 <__assert_func+0x2c>)
34019acc:	4605      	mov	r5, r0
34019ace:	681b      	ldr	r3, [r3, #0]
34019ad0:	68d8      	ldr	r0, [r3, #12]
34019ad2:	b954      	cbnz	r4, 34019aea <__assert_func+0x26>
34019ad4:	4b07      	ldr	r3, [pc, #28]	@ (34019af4 <__assert_func+0x30>)
34019ad6:	461c      	mov	r4, r3
34019ad8:	9100      	str	r1, [sp, #0]
34019ada:	4907      	ldr	r1, [pc, #28]	@ (34019af8 <__assert_func+0x34>)
34019adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
34019ae0:	462b      	mov	r3, r5
34019ae2:	f000 fda1 	bl	3401a628 <fiprintf>
34019ae6:	f001 f9b3 	bl	3401ae50 <abort>
34019aea:	4b04      	ldr	r3, [pc, #16]	@ (34019afc <__assert_func+0x38>)
34019aec:	e7f4      	b.n	34019ad8 <__assert_func+0x14>
34019aee:	bf00      	nop
34019af0:	3401f254 	.word	0x3401f254
34019af4:	3401e7ad 	.word	0x3401e7ad
34019af8:	3401e77f 	.word	0x3401e77f
34019afc:	3401e772 	.word	0x3401e772

34019b00 <malloc>:
34019b00:	4b02      	ldr	r3, [pc, #8]	@ (34019b0c <malloc+0xc>)
34019b02:	4601      	mov	r1, r0
34019b04:	6818      	ldr	r0, [r3, #0]
34019b06:	f000 b825 	b.w	34019b54 <_malloc_r>
34019b0a:	bf00      	nop
34019b0c:	3401f254 	.word	0x3401f254

34019b10 <sbrk_aligned>:
34019b10:	b570      	push	{r4, r5, r6, lr}
34019b12:	4e0f      	ldr	r6, [pc, #60]	@ (34019b50 <sbrk_aligned+0x40>)
34019b14:	460c      	mov	r4, r1
34019b16:	4605      	mov	r5, r0
34019b18:	6831      	ldr	r1, [r6, #0]
34019b1a:	b911      	cbnz	r1, 34019b22 <sbrk_aligned+0x12>
34019b1c:	f001 f92e 	bl	3401ad7c <_sbrk_r>
34019b20:	6030      	str	r0, [r6, #0]
34019b22:	4621      	mov	r1, r4
34019b24:	4628      	mov	r0, r5
34019b26:	f001 f929 	bl	3401ad7c <_sbrk_r>
34019b2a:	1c43      	adds	r3, r0, #1
34019b2c:	d103      	bne.n	34019b36 <sbrk_aligned+0x26>
34019b2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
34019b32:	4620      	mov	r0, r4
34019b34:	bd70      	pop	{r4, r5, r6, pc}
34019b36:	1cc4      	adds	r4, r0, #3
34019b38:	f024 0403 	bic.w	r4, r4, #3
34019b3c:	42a0      	cmp	r0, r4
34019b3e:	d0f8      	beq.n	34019b32 <sbrk_aligned+0x22>
34019b40:	1a21      	subs	r1, r4, r0
34019b42:	4628      	mov	r0, r5
34019b44:	f001 f91a 	bl	3401ad7c <_sbrk_r>
34019b48:	3001      	adds	r0, #1
34019b4a:	d1f2      	bne.n	34019b32 <sbrk_aligned+0x22>
34019b4c:	e7ef      	b.n	34019b2e <sbrk_aligned+0x1e>
34019b4e:	bf00      	nop
34019b50:	3401f95c 	.word	0x3401f95c

34019b54 <_malloc_r>:
34019b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34019b58:	1ccd      	adds	r5, r1, #3
34019b5a:	4606      	mov	r6, r0
34019b5c:	f025 0503 	bic.w	r5, r5, #3
34019b60:	3508      	adds	r5, #8
34019b62:	2d0c      	cmp	r5, #12
34019b64:	bf38      	it	cc
34019b66:	250c      	movcc	r5, #12
34019b68:	2d00      	cmp	r5, #0
34019b6a:	db01      	blt.n	34019b70 <_malloc_r+0x1c>
34019b6c:	42a9      	cmp	r1, r5
34019b6e:	d904      	bls.n	34019b7a <_malloc_r+0x26>
34019b70:	230c      	movs	r3, #12
34019b72:	6033      	str	r3, [r6, #0]
34019b74:	2000      	movs	r0, #0
34019b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34019b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 34019c50 <_malloc_r+0xfc>
34019b7e:	f000 f869 	bl	34019c54 <__malloc_lock>
34019b82:	f8d8 3000 	ldr.w	r3, [r8]
34019b86:	461c      	mov	r4, r3
34019b88:	bb44      	cbnz	r4, 34019bdc <_malloc_r+0x88>
34019b8a:	4629      	mov	r1, r5
34019b8c:	4630      	mov	r0, r6
34019b8e:	f7ff ffbf 	bl	34019b10 <sbrk_aligned>
34019b92:	1c43      	adds	r3, r0, #1
34019b94:	4604      	mov	r4, r0
34019b96:	d158      	bne.n	34019c4a <_malloc_r+0xf6>
34019b98:	f8d8 4000 	ldr.w	r4, [r8]
34019b9c:	4627      	mov	r7, r4
34019b9e:	2f00      	cmp	r7, #0
34019ba0:	d143      	bne.n	34019c2a <_malloc_r+0xd6>
34019ba2:	2c00      	cmp	r4, #0
34019ba4:	d04b      	beq.n	34019c3e <_malloc_r+0xea>
34019ba6:	6823      	ldr	r3, [r4, #0]
34019ba8:	4639      	mov	r1, r7
34019baa:	4630      	mov	r0, r6
34019bac:	eb04 0903 	add.w	r9, r4, r3
34019bb0:	f001 f8e4 	bl	3401ad7c <_sbrk_r>
34019bb4:	4581      	cmp	r9, r0
34019bb6:	d142      	bne.n	34019c3e <_malloc_r+0xea>
34019bb8:	6821      	ldr	r1, [r4, #0]
34019bba:	4630      	mov	r0, r6
34019bbc:	1a6d      	subs	r5, r5, r1
34019bbe:	4629      	mov	r1, r5
34019bc0:	f7ff ffa6 	bl	34019b10 <sbrk_aligned>
34019bc4:	3001      	adds	r0, #1
34019bc6:	d03a      	beq.n	34019c3e <_malloc_r+0xea>
34019bc8:	6823      	ldr	r3, [r4, #0]
34019bca:	442b      	add	r3, r5
34019bcc:	6023      	str	r3, [r4, #0]
34019bce:	f8d8 3000 	ldr.w	r3, [r8]
34019bd2:	685a      	ldr	r2, [r3, #4]
34019bd4:	bb62      	cbnz	r2, 34019c30 <_malloc_r+0xdc>
34019bd6:	f8c8 7000 	str.w	r7, [r8]
34019bda:	e00f      	b.n	34019bfc <_malloc_r+0xa8>
34019bdc:	6822      	ldr	r2, [r4, #0]
34019bde:	1b52      	subs	r2, r2, r5
34019be0:	d420      	bmi.n	34019c24 <_malloc_r+0xd0>
34019be2:	2a0b      	cmp	r2, #11
34019be4:	d917      	bls.n	34019c16 <_malloc_r+0xc2>
34019be6:	1961      	adds	r1, r4, r5
34019be8:	42a3      	cmp	r3, r4
34019bea:	6025      	str	r5, [r4, #0]
34019bec:	bf18      	it	ne
34019bee:	6059      	strne	r1, [r3, #4]
34019bf0:	6863      	ldr	r3, [r4, #4]
34019bf2:	bf08      	it	eq
34019bf4:	f8c8 1000 	streq.w	r1, [r8]
34019bf8:	5162      	str	r2, [r4, r5]
34019bfa:	604b      	str	r3, [r1, #4]
34019bfc:	4630      	mov	r0, r6
34019bfe:	f000 f82f 	bl	34019c60 <__malloc_unlock>
34019c02:	f104 000b 	add.w	r0, r4, #11
34019c06:	1d23      	adds	r3, r4, #4
34019c08:	f020 0007 	bic.w	r0, r0, #7
34019c0c:	1ac2      	subs	r2, r0, r3
34019c0e:	bf1c      	itt	ne
34019c10:	1a1b      	subne	r3, r3, r0
34019c12:	50a3      	strne	r3, [r4, r2]
34019c14:	e7af      	b.n	34019b76 <_malloc_r+0x22>
34019c16:	6862      	ldr	r2, [r4, #4]
34019c18:	42a3      	cmp	r3, r4
34019c1a:	bf0c      	ite	eq
34019c1c:	f8c8 2000 	streq.w	r2, [r8]
34019c20:	605a      	strne	r2, [r3, #4]
34019c22:	e7eb      	b.n	34019bfc <_malloc_r+0xa8>
34019c24:	4623      	mov	r3, r4
34019c26:	6864      	ldr	r4, [r4, #4]
34019c28:	e7ae      	b.n	34019b88 <_malloc_r+0x34>
34019c2a:	463c      	mov	r4, r7
34019c2c:	687f      	ldr	r7, [r7, #4]
34019c2e:	e7b6      	b.n	34019b9e <_malloc_r+0x4a>
34019c30:	461a      	mov	r2, r3
34019c32:	685b      	ldr	r3, [r3, #4]
34019c34:	42a3      	cmp	r3, r4
34019c36:	d1fb      	bne.n	34019c30 <_malloc_r+0xdc>
34019c38:	2300      	movs	r3, #0
34019c3a:	6053      	str	r3, [r2, #4]
34019c3c:	e7de      	b.n	34019bfc <_malloc_r+0xa8>
34019c3e:	230c      	movs	r3, #12
34019c40:	4630      	mov	r0, r6
34019c42:	6033      	str	r3, [r6, #0]
34019c44:	f000 f80c 	bl	34019c60 <__malloc_unlock>
34019c48:	e794      	b.n	34019b74 <_malloc_r+0x20>
34019c4a:	6005      	str	r5, [r0, #0]
34019c4c:	e7d6      	b.n	34019bfc <_malloc_r+0xa8>
34019c4e:	bf00      	nop
34019c50:	3401f960 	.word	0x3401f960

34019c54 <__malloc_lock>:
34019c54:	4801      	ldr	r0, [pc, #4]	@ (34019c5c <__malloc_lock+0x8>)
34019c56:	f001 b8de 	b.w	3401ae16 <__retarget_lock_acquire_recursive>
34019c5a:	bf00      	nop
34019c5c:	3401faa4 	.word	0x3401faa4

34019c60 <__malloc_unlock>:
34019c60:	4801      	ldr	r0, [pc, #4]	@ (34019c68 <__malloc_unlock+0x8>)
34019c62:	f001 b8d9 	b.w	3401ae18 <__retarget_lock_release_recursive>
34019c66:	bf00      	nop
34019c68:	3401faa4 	.word	0x3401faa4

34019c6c <__cvt>:
34019c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
34019c6e:	ed2d 8b02 	vpush	{d8}
34019c72:	eeb0 8b40 	vmov.f64	d8, d0
34019c76:	b085      	sub	sp, #20
34019c78:	4617      	mov	r7, r2
34019c7a:	460c      	mov	r4, r1
34019c7c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
34019c7e:	ee18 2a90 	vmov	r2, s17
34019c82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
34019c84:	f025 0520 	bic.w	r5, r5, #32
34019c88:	2a00      	cmp	r2, #0
34019c8a:	bfb6      	itet	lt
34019c8c:	222d      	movlt	r2, #45	@ 0x2d
34019c8e:	2200      	movge	r2, #0
34019c90:	eeb1 8b40 	vneglt.f64	d8, d0
34019c94:	2d46      	cmp	r5, #70	@ 0x46
34019c96:	701a      	strb	r2, [r3, #0]
34019c98:	d004      	beq.n	34019ca4 <__cvt+0x38>
34019c9a:	2d45      	cmp	r5, #69	@ 0x45
34019c9c:	d100      	bne.n	34019ca0 <__cvt+0x34>
34019c9e:	3401      	adds	r4, #1
34019ca0:	2102      	movs	r1, #2
34019ca2:	e000      	b.n	34019ca6 <__cvt+0x3a>
34019ca4:	2103      	movs	r1, #3
34019ca6:	ab03      	add	r3, sp, #12
34019ca8:	eeb0 0b48 	vmov.f64	d0, d8
34019cac:	4622      	mov	r2, r4
34019cae:	9301      	str	r3, [sp, #4]
34019cb0:	ab02      	add	r3, sp, #8
34019cb2:	9300      	str	r3, [sp, #0]
34019cb4:	4633      	mov	r3, r6
34019cb6:	f001 f95f 	bl	3401af78 <_dtoa_r>
34019cba:	2d47      	cmp	r5, #71	@ 0x47
34019cbc:	d114      	bne.n	34019ce8 <__cvt+0x7c>
34019cbe:	07fb      	lsls	r3, r7, #31
34019cc0:	d50a      	bpl.n	34019cd8 <__cvt+0x6c>
34019cc2:	1902      	adds	r2, r0, r4
34019cc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
34019cc8:	2130      	movs	r1, #48	@ 0x30
34019cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34019cce:	bf08      	it	eq
34019cd0:	9203      	streq	r2, [sp, #12]
34019cd2:	9b03      	ldr	r3, [sp, #12]
34019cd4:	4293      	cmp	r3, r2
34019cd6:	d319      	bcc.n	34019d0c <__cvt+0xa0>
34019cd8:	9b03      	ldr	r3, [sp, #12]
34019cda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34019cdc:	1a1b      	subs	r3, r3, r0
34019cde:	6013      	str	r3, [r2, #0]
34019ce0:	b005      	add	sp, #20
34019ce2:	ecbd 8b02 	vpop	{d8}
34019ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
34019ce8:	2d46      	cmp	r5, #70	@ 0x46
34019cea:	eb00 0204 	add.w	r2, r0, r4
34019cee:	d1e9      	bne.n	34019cc4 <__cvt+0x58>
34019cf0:	7803      	ldrb	r3, [r0, #0]
34019cf2:	2b30      	cmp	r3, #48	@ 0x30
34019cf4:	d107      	bne.n	34019d06 <__cvt+0x9a>
34019cf6:	eeb5 8b40 	vcmp.f64	d8, #0.0
34019cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34019cfe:	bf1c      	itt	ne
34019d00:	f1c4 0401 	rsbne	r4, r4, #1
34019d04:	6034      	strne	r4, [r6, #0]
34019d06:	6833      	ldr	r3, [r6, #0]
34019d08:	441a      	add	r2, r3
34019d0a:	e7db      	b.n	34019cc4 <__cvt+0x58>
34019d0c:	1c5c      	adds	r4, r3, #1
34019d0e:	9403      	str	r4, [sp, #12]
34019d10:	7019      	strb	r1, [r3, #0]
34019d12:	e7de      	b.n	34019cd2 <__cvt+0x66>

34019d14 <__exponent>:
34019d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34019d16:	2900      	cmp	r1, #0
34019d18:	7002      	strb	r2, [r0, #0]
34019d1a:	bfba      	itte	lt
34019d1c:	4249      	neglt	r1, r1
34019d1e:	232d      	movlt	r3, #45	@ 0x2d
34019d20:	232b      	movge	r3, #43	@ 0x2b
34019d22:	2909      	cmp	r1, #9
34019d24:	7043      	strb	r3, [r0, #1]
34019d26:	dd28      	ble.n	34019d7a <__exponent+0x66>
34019d28:	f10d 0307 	add.w	r3, sp, #7
34019d2c:	270a      	movs	r7, #10
34019d2e:	461d      	mov	r5, r3
34019d30:	461a      	mov	r2, r3
34019d32:	3b01      	subs	r3, #1
34019d34:	fbb1 f6f7 	udiv	r6, r1, r7
34019d38:	fb07 1416 	mls	r4, r7, r6, r1
34019d3c:	3430      	adds	r4, #48	@ 0x30
34019d3e:	f802 4c01 	strb.w	r4, [r2, #-1]
34019d42:	460c      	mov	r4, r1
34019d44:	4631      	mov	r1, r6
34019d46:	2c63      	cmp	r4, #99	@ 0x63
34019d48:	dcf2      	bgt.n	34019d30 <__exponent+0x1c>
34019d4a:	3130      	adds	r1, #48	@ 0x30
34019d4c:	1e94      	subs	r4, r2, #2
34019d4e:	f803 1c01 	strb.w	r1, [r3, #-1]
34019d52:	1c41      	adds	r1, r0, #1
34019d54:	4623      	mov	r3, r4
34019d56:	42ab      	cmp	r3, r5
34019d58:	d30a      	bcc.n	34019d70 <__exponent+0x5c>
34019d5a:	f10d 0309 	add.w	r3, sp, #9
34019d5e:	1a9b      	subs	r3, r3, r2
34019d60:	42ac      	cmp	r4, r5
34019d62:	bf88      	it	hi
34019d64:	2300      	movhi	r3, #0
34019d66:	3302      	adds	r3, #2
34019d68:	4403      	add	r3, r0
34019d6a:	1a18      	subs	r0, r3, r0
34019d6c:	b003      	add	sp, #12
34019d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
34019d70:	f813 6b01 	ldrb.w	r6, [r3], #1
34019d74:	f801 6f01 	strb.w	r6, [r1, #1]!
34019d78:	e7ed      	b.n	34019d56 <__exponent+0x42>
34019d7a:	2330      	movs	r3, #48	@ 0x30
34019d7c:	3130      	adds	r1, #48	@ 0x30
34019d7e:	7083      	strb	r3, [r0, #2]
34019d80:	1d03      	adds	r3, r0, #4
34019d82:	70c1      	strb	r1, [r0, #3]
34019d84:	e7f1      	b.n	34019d6a <__exponent+0x56>
	...

34019d88 <_printf_float>:
34019d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34019d8c:	b08d      	sub	sp, #52	@ 0x34
34019d8e:	460c      	mov	r4, r1
34019d90:	4616      	mov	r6, r2
34019d92:	461f      	mov	r7, r3
34019d94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
34019d98:	4605      	mov	r5, r0
34019d9a:	f000 ffb7 	bl	3401ad0c <_localeconv_r>
34019d9e:	f8d0 b000 	ldr.w	fp, [r0]
34019da2:	4658      	mov	r0, fp
34019da4:	f7e6 fcf4 	bl	34000790 <strlen>
34019da8:	2300      	movs	r3, #0
34019daa:	f894 9018 	ldrb.w	r9, [r4, #24]
34019dae:	930a      	str	r3, [sp, #40]	@ 0x28
34019db0:	f8d8 3000 	ldr.w	r3, [r8]
34019db4:	6822      	ldr	r2, [r4, #0]
34019db6:	3307      	adds	r3, #7
34019db8:	9005      	str	r0, [sp, #20]
34019dba:	f023 0307 	bic.w	r3, r3, #7
34019dbe:	f103 0108 	add.w	r1, r3, #8
34019dc2:	f8c8 1000 	str.w	r1, [r8]
34019dc6:	ed93 0b00 	vldr	d0, [r3]
34019dca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3401a028 <_printf_float+0x2a0>
34019dce:	eeb0 7bc0 	vabs.f64	d7, d0
34019dd2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
34019dd6:	eeb4 7b46 	vcmp.f64	d7, d6
34019dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34019dde:	dd24      	ble.n	34019e2a <_printf_float+0xa2>
34019de0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
34019de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34019de8:	d502      	bpl.n	34019df0 <_printf_float+0x68>
34019dea:	232d      	movs	r3, #45	@ 0x2d
34019dec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34019df0:	498f      	ldr	r1, [pc, #572]	@ (3401a030 <_printf_float+0x2a8>)
34019df2:	4b90      	ldr	r3, [pc, #576]	@ (3401a034 <_printf_float+0x2ac>)
34019df4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
34019df8:	bf94      	ite	ls
34019dfa:	4688      	movls	r8, r1
34019dfc:	4698      	movhi	r8, r3
34019dfe:	f022 0204 	bic.w	r2, r2, #4
34019e02:	2303      	movs	r3, #3
34019e04:	f04f 0a00 	mov.w	sl, #0
34019e08:	6022      	str	r2, [r4, #0]
34019e0a:	6123      	str	r3, [r4, #16]
34019e0c:	4633      	mov	r3, r6
34019e0e:	aa0b      	add	r2, sp, #44	@ 0x2c
34019e10:	4621      	mov	r1, r4
34019e12:	4628      	mov	r0, r5
34019e14:	9700      	str	r7, [sp, #0]
34019e16:	f000 f9d1 	bl	3401a1bc <_printf_common>
34019e1a:	3001      	adds	r0, #1
34019e1c:	f040 8089 	bne.w	34019f32 <_printf_float+0x1aa>
34019e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34019e24:	b00d      	add	sp, #52	@ 0x34
34019e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34019e2a:	eeb4 0b40 	vcmp.f64	d0, d0
34019e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34019e32:	d709      	bvc.n	34019e48 <_printf_float+0xc0>
34019e34:	ee10 3a90 	vmov	r3, s1
34019e38:	497f      	ldr	r1, [pc, #508]	@ (3401a038 <_printf_float+0x2b0>)
34019e3a:	2b00      	cmp	r3, #0
34019e3c:	bfbc      	itt	lt
34019e3e:	232d      	movlt	r3, #45	@ 0x2d
34019e40:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
34019e44:	4b7d      	ldr	r3, [pc, #500]	@ (3401a03c <_printf_float+0x2b4>)
34019e46:	e7d5      	b.n	34019df4 <_printf_float+0x6c>
34019e48:	6863      	ldr	r3, [r4, #4]
34019e4a:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
34019e4e:	1c59      	adds	r1, r3, #1
34019e50:	d139      	bne.n	34019ec6 <_printf_float+0x13e>
34019e52:	2306      	movs	r3, #6
34019e54:	6063      	str	r3, [r4, #4]
34019e56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
34019e5a:	2300      	movs	r3, #0
34019e5c:	4628      	mov	r0, r5
34019e5e:	6022      	str	r2, [r4, #0]
34019e60:	9303      	str	r3, [sp, #12]
34019e62:	ab0a      	add	r3, sp, #40	@ 0x28
34019e64:	e9cd 9301 	strd	r9, r3, [sp, #4]
34019e68:	ab09      	add	r3, sp, #36	@ 0x24
34019e6a:	9300      	str	r3, [sp, #0]
34019e6c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
34019e70:	6861      	ldr	r1, [r4, #4]
34019e72:	f7ff fefb 	bl	34019c6c <__cvt>
34019e76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
34019e7a:	4680      	mov	r8, r0
34019e7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
34019e7e:	d129      	bne.n	34019ed4 <_printf_float+0x14c>
34019e80:	1cc8      	adds	r0, r1, #3
34019e82:	db02      	blt.n	34019e8a <_printf_float+0x102>
34019e84:	6863      	ldr	r3, [r4, #4]
34019e86:	4299      	cmp	r1, r3
34019e88:	dd41      	ble.n	34019f0e <_printf_float+0x186>
34019e8a:	f1a9 0902 	sub.w	r9, r9, #2
34019e8e:	fa5f f989 	uxtb.w	r9, r9
34019e92:	3901      	subs	r1, #1
34019e94:	464a      	mov	r2, r9
34019e96:	f104 0050 	add.w	r0, r4, #80	@ 0x50
34019e9a:	9109      	str	r1, [sp, #36]	@ 0x24
34019e9c:	f7ff ff3a 	bl	34019d14 <__exponent>
34019ea0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
34019ea2:	4682      	mov	sl, r0
34019ea4:	1813      	adds	r3, r2, r0
34019ea6:	2a01      	cmp	r2, #1
34019ea8:	6123      	str	r3, [r4, #16]
34019eaa:	dc02      	bgt.n	34019eb2 <_printf_float+0x12a>
34019eac:	6822      	ldr	r2, [r4, #0]
34019eae:	07d2      	lsls	r2, r2, #31
34019eb0:	d501      	bpl.n	34019eb6 <_printf_float+0x12e>
34019eb2:	3301      	adds	r3, #1
34019eb4:	6123      	str	r3, [r4, #16]
34019eb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
34019eba:	2b00      	cmp	r3, #0
34019ebc:	d0a6      	beq.n	34019e0c <_printf_float+0x84>
34019ebe:	232d      	movs	r3, #45	@ 0x2d
34019ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34019ec4:	e7a2      	b.n	34019e0c <_printf_float+0x84>
34019ec6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
34019eca:	d1c4      	bne.n	34019e56 <_printf_float+0xce>
34019ecc:	2b00      	cmp	r3, #0
34019ece:	d1c2      	bne.n	34019e56 <_printf_float+0xce>
34019ed0:	2301      	movs	r3, #1
34019ed2:	e7bf      	b.n	34019e54 <_printf_float+0xcc>
34019ed4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
34019ed8:	d9db      	bls.n	34019e92 <_printf_float+0x10a>
34019eda:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
34019ede:	d118      	bne.n	34019f12 <_printf_float+0x18a>
34019ee0:	2900      	cmp	r1, #0
34019ee2:	6863      	ldr	r3, [r4, #4]
34019ee4:	dd0b      	ble.n	34019efe <_printf_float+0x176>
34019ee6:	6121      	str	r1, [r4, #16]
34019ee8:	b913      	cbnz	r3, 34019ef0 <_printf_float+0x168>
34019eea:	6822      	ldr	r2, [r4, #0]
34019eec:	07d0      	lsls	r0, r2, #31
34019eee:	d502      	bpl.n	34019ef6 <_printf_float+0x16e>
34019ef0:	3301      	adds	r3, #1
34019ef2:	440b      	add	r3, r1
34019ef4:	6123      	str	r3, [r4, #16]
34019ef6:	f04f 0a00 	mov.w	sl, #0
34019efa:	65a1      	str	r1, [r4, #88]	@ 0x58
34019efc:	e7db      	b.n	34019eb6 <_printf_float+0x12e>
34019efe:	b913      	cbnz	r3, 34019f06 <_printf_float+0x17e>
34019f00:	6822      	ldr	r2, [r4, #0]
34019f02:	07d2      	lsls	r2, r2, #31
34019f04:	d501      	bpl.n	34019f0a <_printf_float+0x182>
34019f06:	3302      	adds	r3, #2
34019f08:	e7f4      	b.n	34019ef4 <_printf_float+0x16c>
34019f0a:	2301      	movs	r3, #1
34019f0c:	e7f2      	b.n	34019ef4 <_printf_float+0x16c>
34019f0e:	f04f 0967 	mov.w	r9, #103	@ 0x67
34019f12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34019f14:	4299      	cmp	r1, r3
34019f16:	db05      	blt.n	34019f24 <_printf_float+0x19c>
34019f18:	6823      	ldr	r3, [r4, #0]
34019f1a:	6121      	str	r1, [r4, #16]
34019f1c:	07d8      	lsls	r0, r3, #31
34019f1e:	d5ea      	bpl.n	34019ef6 <_printf_float+0x16e>
34019f20:	1c4b      	adds	r3, r1, #1
34019f22:	e7e7      	b.n	34019ef4 <_printf_float+0x16c>
34019f24:	2900      	cmp	r1, #0
34019f26:	bfd4      	ite	le
34019f28:	f1c1 0202 	rsble	r2, r1, #2
34019f2c:	2201      	movgt	r2, #1
34019f2e:	4413      	add	r3, r2
34019f30:	e7e0      	b.n	34019ef4 <_printf_float+0x16c>
34019f32:	6823      	ldr	r3, [r4, #0]
34019f34:	055a      	lsls	r2, r3, #21
34019f36:	d407      	bmi.n	34019f48 <_printf_float+0x1c0>
34019f38:	6923      	ldr	r3, [r4, #16]
34019f3a:	4642      	mov	r2, r8
34019f3c:	4631      	mov	r1, r6
34019f3e:	4628      	mov	r0, r5
34019f40:	47b8      	blx	r7
34019f42:	3001      	adds	r0, #1
34019f44:	d12a      	bne.n	34019f9c <_printf_float+0x214>
34019f46:	e76b      	b.n	34019e20 <_printf_float+0x98>
34019f48:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
34019f4c:	f240 80e0 	bls.w	3401a110 <_printf_float+0x388>
34019f50:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
34019f54:	eeb5 7b40 	vcmp.f64	d7, #0.0
34019f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34019f5c:	d133      	bne.n	34019fc6 <_printf_float+0x23e>
34019f5e:	2301      	movs	r3, #1
34019f60:	4a37      	ldr	r2, [pc, #220]	@ (3401a040 <_printf_float+0x2b8>)
34019f62:	4631      	mov	r1, r6
34019f64:	4628      	mov	r0, r5
34019f66:	47b8      	blx	r7
34019f68:	3001      	adds	r0, #1
34019f6a:	f43f af59 	beq.w	34019e20 <_printf_float+0x98>
34019f6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
34019f72:	4543      	cmp	r3, r8
34019f74:	db02      	blt.n	34019f7c <_printf_float+0x1f4>
34019f76:	6823      	ldr	r3, [r4, #0]
34019f78:	07d8      	lsls	r0, r3, #31
34019f7a:	d50f      	bpl.n	34019f9c <_printf_float+0x214>
34019f7c:	9b05      	ldr	r3, [sp, #20]
34019f7e:	465a      	mov	r2, fp
34019f80:	4631      	mov	r1, r6
34019f82:	4628      	mov	r0, r5
34019f84:	47b8      	blx	r7
34019f86:	3001      	adds	r0, #1
34019f88:	f43f af4a 	beq.w	34019e20 <_printf_float+0x98>
34019f8c:	f04f 0900 	mov.w	r9, #0
34019f90:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
34019f94:	f104 0a1a 	add.w	sl, r4, #26
34019f98:	45c8      	cmp	r8, r9
34019f9a:	dc09      	bgt.n	34019fb0 <_printf_float+0x228>
34019f9c:	6823      	ldr	r3, [r4, #0]
34019f9e:	079b      	lsls	r3, r3, #30
34019fa0:	f100 8107 	bmi.w	3401a1b2 <_printf_float+0x42a>
34019fa4:	68e0      	ldr	r0, [r4, #12]
34019fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34019fa8:	4298      	cmp	r0, r3
34019faa:	bfb8      	it	lt
34019fac:	4618      	movlt	r0, r3
34019fae:	e739      	b.n	34019e24 <_printf_float+0x9c>
34019fb0:	2301      	movs	r3, #1
34019fb2:	4652      	mov	r2, sl
34019fb4:	4631      	mov	r1, r6
34019fb6:	4628      	mov	r0, r5
34019fb8:	47b8      	blx	r7
34019fba:	3001      	adds	r0, #1
34019fbc:	f43f af30 	beq.w	34019e20 <_printf_float+0x98>
34019fc0:	f109 0901 	add.w	r9, r9, #1
34019fc4:	e7e8      	b.n	34019f98 <_printf_float+0x210>
34019fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34019fc8:	2b00      	cmp	r3, #0
34019fca:	dc3b      	bgt.n	3401a044 <_printf_float+0x2bc>
34019fcc:	2301      	movs	r3, #1
34019fce:	4a1c      	ldr	r2, [pc, #112]	@ (3401a040 <_printf_float+0x2b8>)
34019fd0:	4631      	mov	r1, r6
34019fd2:	4628      	mov	r0, r5
34019fd4:	47b8      	blx	r7
34019fd6:	3001      	adds	r0, #1
34019fd8:	f43f af22 	beq.w	34019e20 <_printf_float+0x98>
34019fdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
34019fe0:	ea59 0303 	orrs.w	r3, r9, r3
34019fe4:	d102      	bne.n	34019fec <_printf_float+0x264>
34019fe6:	6823      	ldr	r3, [r4, #0]
34019fe8:	07d9      	lsls	r1, r3, #31
34019fea:	d5d7      	bpl.n	34019f9c <_printf_float+0x214>
34019fec:	9b05      	ldr	r3, [sp, #20]
34019fee:	465a      	mov	r2, fp
34019ff0:	4631      	mov	r1, r6
34019ff2:	4628      	mov	r0, r5
34019ff4:	47b8      	blx	r7
34019ff6:	3001      	adds	r0, #1
34019ff8:	f43f af12 	beq.w	34019e20 <_printf_float+0x98>
34019ffc:	f04f 0a00 	mov.w	sl, #0
3401a000:	f104 0b1a 	add.w	fp, r4, #26
3401a004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401a006:	425b      	negs	r3, r3
3401a008:	4553      	cmp	r3, sl
3401a00a:	dc01      	bgt.n	3401a010 <_printf_float+0x288>
3401a00c:	464b      	mov	r3, r9
3401a00e:	e794      	b.n	34019f3a <_printf_float+0x1b2>
3401a010:	2301      	movs	r3, #1
3401a012:	465a      	mov	r2, fp
3401a014:	4631      	mov	r1, r6
3401a016:	4628      	mov	r0, r5
3401a018:	47b8      	blx	r7
3401a01a:	3001      	adds	r0, #1
3401a01c:	f43f af00 	beq.w	34019e20 <_printf_float+0x98>
3401a020:	f10a 0a01 	add.w	sl, sl, #1
3401a024:	e7ee      	b.n	3401a004 <_printf_float+0x27c>
3401a026:	bf00      	nop
3401a028:	ffffffff 	.word	0xffffffff
3401a02c:	7fefffff 	.word	0x7fefffff
3401a030:	3401e7ae 	.word	0x3401e7ae
3401a034:	3401e7b2 	.word	0x3401e7b2
3401a038:	3401e7b6 	.word	0x3401e7b6
3401a03c:	3401e7ba 	.word	0x3401e7ba
3401a040:	3401e7be 	.word	0x3401e7be
3401a044:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401a046:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3401a04a:	4553      	cmp	r3, sl
3401a04c:	bfa8      	it	ge
3401a04e:	4653      	movge	r3, sl
3401a050:	2b00      	cmp	r3, #0
3401a052:	4699      	mov	r9, r3
3401a054:	dc37      	bgt.n	3401a0c6 <_printf_float+0x33e>
3401a056:	2300      	movs	r3, #0
3401a058:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401a05c:	f104 021a 	add.w	r2, r4, #26
3401a060:	9307      	str	r3, [sp, #28]
3401a062:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401a064:	9907      	ldr	r1, [sp, #28]
3401a066:	9306      	str	r3, [sp, #24]
3401a068:	eba3 0309 	sub.w	r3, r3, r9
3401a06c:	428b      	cmp	r3, r1
3401a06e:	dc31      	bgt.n	3401a0d4 <_printf_float+0x34c>
3401a070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401a072:	459a      	cmp	sl, r3
3401a074:	dc3b      	bgt.n	3401a0ee <_printf_float+0x366>
3401a076:	6823      	ldr	r3, [r4, #0]
3401a078:	07da      	lsls	r2, r3, #31
3401a07a:	d438      	bmi.n	3401a0ee <_printf_float+0x366>
3401a07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401a07e:	ebaa 0903 	sub.w	r9, sl, r3
3401a082:	9b06      	ldr	r3, [sp, #24]
3401a084:	ebaa 0303 	sub.w	r3, sl, r3
3401a088:	4599      	cmp	r9, r3
3401a08a:	bfa8      	it	ge
3401a08c:	4699      	movge	r9, r3
3401a08e:	f1b9 0f00 	cmp.w	r9, #0
3401a092:	dc34      	bgt.n	3401a0fe <_printf_float+0x376>
3401a094:	f04f 0800 	mov.w	r8, #0
3401a098:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401a09c:	f104 0b1a 	add.w	fp, r4, #26
3401a0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401a0a2:	ebaa 0303 	sub.w	r3, sl, r3
3401a0a6:	eba3 0309 	sub.w	r3, r3, r9
3401a0aa:	4543      	cmp	r3, r8
3401a0ac:	f77f af76 	ble.w	34019f9c <_printf_float+0x214>
3401a0b0:	2301      	movs	r3, #1
3401a0b2:	465a      	mov	r2, fp
3401a0b4:	4631      	mov	r1, r6
3401a0b6:	4628      	mov	r0, r5
3401a0b8:	47b8      	blx	r7
3401a0ba:	3001      	adds	r0, #1
3401a0bc:	f43f aeb0 	beq.w	34019e20 <_printf_float+0x98>
3401a0c0:	f108 0801 	add.w	r8, r8, #1
3401a0c4:	e7ec      	b.n	3401a0a0 <_printf_float+0x318>
3401a0c6:	4642      	mov	r2, r8
3401a0c8:	4631      	mov	r1, r6
3401a0ca:	4628      	mov	r0, r5
3401a0cc:	47b8      	blx	r7
3401a0ce:	3001      	adds	r0, #1
3401a0d0:	d1c1      	bne.n	3401a056 <_printf_float+0x2ce>
3401a0d2:	e6a5      	b.n	34019e20 <_printf_float+0x98>
3401a0d4:	2301      	movs	r3, #1
3401a0d6:	4631      	mov	r1, r6
3401a0d8:	4628      	mov	r0, r5
3401a0da:	9206      	str	r2, [sp, #24]
3401a0dc:	47b8      	blx	r7
3401a0de:	3001      	adds	r0, #1
3401a0e0:	f43f ae9e 	beq.w	34019e20 <_printf_float+0x98>
3401a0e4:	9b07      	ldr	r3, [sp, #28]
3401a0e6:	9a06      	ldr	r2, [sp, #24]
3401a0e8:	3301      	adds	r3, #1
3401a0ea:	9307      	str	r3, [sp, #28]
3401a0ec:	e7b9      	b.n	3401a062 <_printf_float+0x2da>
3401a0ee:	9b05      	ldr	r3, [sp, #20]
3401a0f0:	465a      	mov	r2, fp
3401a0f2:	4631      	mov	r1, r6
3401a0f4:	4628      	mov	r0, r5
3401a0f6:	47b8      	blx	r7
3401a0f8:	3001      	adds	r0, #1
3401a0fa:	d1bf      	bne.n	3401a07c <_printf_float+0x2f4>
3401a0fc:	e690      	b.n	34019e20 <_printf_float+0x98>
3401a0fe:	9a06      	ldr	r2, [sp, #24]
3401a100:	464b      	mov	r3, r9
3401a102:	4631      	mov	r1, r6
3401a104:	4628      	mov	r0, r5
3401a106:	4442      	add	r2, r8
3401a108:	47b8      	blx	r7
3401a10a:	3001      	adds	r0, #1
3401a10c:	d1c2      	bne.n	3401a094 <_printf_float+0x30c>
3401a10e:	e687      	b.n	34019e20 <_printf_float+0x98>
3401a110:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3401a114:	f1b9 0f01 	cmp.w	r9, #1
3401a118:	dc01      	bgt.n	3401a11e <_printf_float+0x396>
3401a11a:	07db      	lsls	r3, r3, #31
3401a11c:	d536      	bpl.n	3401a18c <_printf_float+0x404>
3401a11e:	2301      	movs	r3, #1
3401a120:	4642      	mov	r2, r8
3401a122:	4631      	mov	r1, r6
3401a124:	4628      	mov	r0, r5
3401a126:	47b8      	blx	r7
3401a128:	3001      	adds	r0, #1
3401a12a:	f43f ae79 	beq.w	34019e20 <_printf_float+0x98>
3401a12e:	9b05      	ldr	r3, [sp, #20]
3401a130:	465a      	mov	r2, fp
3401a132:	4631      	mov	r1, r6
3401a134:	4628      	mov	r0, r5
3401a136:	47b8      	blx	r7
3401a138:	3001      	adds	r0, #1
3401a13a:	f43f ae71 	beq.w	34019e20 <_printf_float+0x98>
3401a13e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3401a142:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401a146:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401a14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401a14e:	d018      	beq.n	3401a182 <_printf_float+0x3fa>
3401a150:	464b      	mov	r3, r9
3401a152:	f108 0201 	add.w	r2, r8, #1
3401a156:	4631      	mov	r1, r6
3401a158:	4628      	mov	r0, r5
3401a15a:	47b8      	blx	r7
3401a15c:	3001      	adds	r0, #1
3401a15e:	d10c      	bne.n	3401a17a <_printf_float+0x3f2>
3401a160:	e65e      	b.n	34019e20 <_printf_float+0x98>
3401a162:	2301      	movs	r3, #1
3401a164:	465a      	mov	r2, fp
3401a166:	4631      	mov	r1, r6
3401a168:	4628      	mov	r0, r5
3401a16a:	47b8      	blx	r7
3401a16c:	3001      	adds	r0, #1
3401a16e:	f43f ae57 	beq.w	34019e20 <_printf_float+0x98>
3401a172:	f108 0801 	add.w	r8, r8, #1
3401a176:	45c8      	cmp	r8, r9
3401a178:	dbf3      	blt.n	3401a162 <_printf_float+0x3da>
3401a17a:	4653      	mov	r3, sl
3401a17c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3401a180:	e6dc      	b.n	34019f3c <_printf_float+0x1b4>
3401a182:	f04f 0800 	mov.w	r8, #0
3401a186:	f104 0b1a 	add.w	fp, r4, #26
3401a18a:	e7f4      	b.n	3401a176 <_printf_float+0x3ee>
3401a18c:	2301      	movs	r3, #1
3401a18e:	4642      	mov	r2, r8
3401a190:	e7e1      	b.n	3401a156 <_printf_float+0x3ce>
3401a192:	2301      	movs	r3, #1
3401a194:	464a      	mov	r2, r9
3401a196:	4631      	mov	r1, r6
3401a198:	4628      	mov	r0, r5
3401a19a:	47b8      	blx	r7
3401a19c:	3001      	adds	r0, #1
3401a19e:	f43f ae3f 	beq.w	34019e20 <_printf_float+0x98>
3401a1a2:	f108 0801 	add.w	r8, r8, #1
3401a1a6:	68e3      	ldr	r3, [r4, #12]
3401a1a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3401a1aa:	1a5b      	subs	r3, r3, r1
3401a1ac:	4543      	cmp	r3, r8
3401a1ae:	dcf0      	bgt.n	3401a192 <_printf_float+0x40a>
3401a1b0:	e6f8      	b.n	34019fa4 <_printf_float+0x21c>
3401a1b2:	f04f 0800 	mov.w	r8, #0
3401a1b6:	f104 0919 	add.w	r9, r4, #25
3401a1ba:	e7f4      	b.n	3401a1a6 <_printf_float+0x41e>

3401a1bc <_printf_common>:
3401a1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401a1c0:	4616      	mov	r6, r2
3401a1c2:	4698      	mov	r8, r3
3401a1c4:	688a      	ldr	r2, [r1, #8]
3401a1c6:	4607      	mov	r7, r0
3401a1c8:	690b      	ldr	r3, [r1, #16]
3401a1ca:	460c      	mov	r4, r1
3401a1cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
3401a1d0:	4293      	cmp	r3, r2
3401a1d2:	bfb8      	it	lt
3401a1d4:	4613      	movlt	r3, r2
3401a1d6:	6033      	str	r3, [r6, #0]
3401a1d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3401a1dc:	b10a      	cbz	r2, 3401a1e2 <_printf_common+0x26>
3401a1de:	3301      	adds	r3, #1
3401a1e0:	6033      	str	r3, [r6, #0]
3401a1e2:	6823      	ldr	r3, [r4, #0]
3401a1e4:	0699      	lsls	r1, r3, #26
3401a1e6:	bf42      	ittt	mi
3401a1e8:	6833      	ldrmi	r3, [r6, #0]
3401a1ea:	3302      	addmi	r3, #2
3401a1ec:	6033      	strmi	r3, [r6, #0]
3401a1ee:	6825      	ldr	r5, [r4, #0]
3401a1f0:	f015 0506 	ands.w	r5, r5, #6
3401a1f4:	d106      	bne.n	3401a204 <_printf_common+0x48>
3401a1f6:	f104 0a19 	add.w	sl, r4, #25
3401a1fa:	68e3      	ldr	r3, [r4, #12]
3401a1fc:	6832      	ldr	r2, [r6, #0]
3401a1fe:	1a9b      	subs	r3, r3, r2
3401a200:	42ab      	cmp	r3, r5
3401a202:	dc2b      	bgt.n	3401a25c <_printf_common+0xa0>
3401a204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3401a208:	6822      	ldr	r2, [r4, #0]
3401a20a:	3b00      	subs	r3, #0
3401a20c:	bf18      	it	ne
3401a20e:	2301      	movne	r3, #1
3401a210:	0692      	lsls	r2, r2, #26
3401a212:	d430      	bmi.n	3401a276 <_printf_common+0xba>
3401a214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3401a218:	4641      	mov	r1, r8
3401a21a:	4638      	mov	r0, r7
3401a21c:	47c8      	blx	r9
3401a21e:	3001      	adds	r0, #1
3401a220:	d023      	beq.n	3401a26a <_printf_common+0xae>
3401a222:	6823      	ldr	r3, [r4, #0]
3401a224:	341a      	adds	r4, #26
3401a226:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3401a22a:	f003 0306 	and.w	r3, r3, #6
3401a22e:	2b04      	cmp	r3, #4
3401a230:	bf0a      	itet	eq
3401a232:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3401a236:	2500      	movne	r5, #0
3401a238:	6833      	ldreq	r3, [r6, #0]
3401a23a:	f04f 0600 	mov.w	r6, #0
3401a23e:	bf08      	it	eq
3401a240:	1aed      	subeq	r5, r5, r3
3401a242:	f854 3c12 	ldr.w	r3, [r4, #-18]
3401a246:	bf08      	it	eq
3401a248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3401a24c:	4293      	cmp	r3, r2
3401a24e:	bfc4      	itt	gt
3401a250:	1a9b      	subgt	r3, r3, r2
3401a252:	18ed      	addgt	r5, r5, r3
3401a254:	42b5      	cmp	r5, r6
3401a256:	d11a      	bne.n	3401a28e <_printf_common+0xd2>
3401a258:	2000      	movs	r0, #0
3401a25a:	e008      	b.n	3401a26e <_printf_common+0xb2>
3401a25c:	2301      	movs	r3, #1
3401a25e:	4652      	mov	r2, sl
3401a260:	4641      	mov	r1, r8
3401a262:	4638      	mov	r0, r7
3401a264:	47c8      	blx	r9
3401a266:	3001      	adds	r0, #1
3401a268:	d103      	bne.n	3401a272 <_printf_common+0xb6>
3401a26a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401a26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401a272:	3501      	adds	r5, #1
3401a274:	e7c1      	b.n	3401a1fa <_printf_common+0x3e>
3401a276:	18e1      	adds	r1, r4, r3
3401a278:	1c5a      	adds	r2, r3, #1
3401a27a:	2030      	movs	r0, #48	@ 0x30
3401a27c:	3302      	adds	r3, #2
3401a27e:	4422      	add	r2, r4
3401a280:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3401a284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3401a288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3401a28c:	e7c2      	b.n	3401a214 <_printf_common+0x58>
3401a28e:	2301      	movs	r3, #1
3401a290:	4622      	mov	r2, r4
3401a292:	4641      	mov	r1, r8
3401a294:	4638      	mov	r0, r7
3401a296:	47c8      	blx	r9
3401a298:	3001      	adds	r0, #1
3401a29a:	d0e6      	beq.n	3401a26a <_printf_common+0xae>
3401a29c:	3601      	adds	r6, #1
3401a29e:	e7d9      	b.n	3401a254 <_printf_common+0x98>

3401a2a0 <_printf_i>:
3401a2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3401a2a4:	7e0f      	ldrb	r7, [r1, #24]
3401a2a6:	4691      	mov	r9, r2
3401a2a8:	4680      	mov	r8, r0
3401a2aa:	460c      	mov	r4, r1
3401a2ac:	2f78      	cmp	r7, #120	@ 0x78
3401a2ae:	469a      	mov	sl, r3
3401a2b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401a2b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3401a2b6:	d807      	bhi.n	3401a2c8 <_printf_i+0x28>
3401a2b8:	2f62      	cmp	r7, #98	@ 0x62
3401a2ba:	d80a      	bhi.n	3401a2d2 <_printf_i+0x32>
3401a2bc:	2f00      	cmp	r7, #0
3401a2be:	f000 80d2 	beq.w	3401a466 <_printf_i+0x1c6>
3401a2c2:	2f58      	cmp	r7, #88	@ 0x58
3401a2c4:	f000 80b9 	beq.w	3401a43a <_printf_i+0x19a>
3401a2c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401a2cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3401a2d0:	e03a      	b.n	3401a348 <_printf_i+0xa8>
3401a2d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3401a2d6:	2b15      	cmp	r3, #21
3401a2d8:	d8f6      	bhi.n	3401a2c8 <_printf_i+0x28>
3401a2da:	a101      	add	r1, pc, #4	@ (adr r1, 3401a2e0 <_printf_i+0x40>)
3401a2dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3401a2e0:	3401a339 	.word	0x3401a339
3401a2e4:	3401a34d 	.word	0x3401a34d
3401a2e8:	3401a2c9 	.word	0x3401a2c9
3401a2ec:	3401a2c9 	.word	0x3401a2c9
3401a2f0:	3401a2c9 	.word	0x3401a2c9
3401a2f4:	3401a2c9 	.word	0x3401a2c9
3401a2f8:	3401a34d 	.word	0x3401a34d
3401a2fc:	3401a2c9 	.word	0x3401a2c9
3401a300:	3401a2c9 	.word	0x3401a2c9
3401a304:	3401a2c9 	.word	0x3401a2c9
3401a308:	3401a2c9 	.word	0x3401a2c9
3401a30c:	3401a44d 	.word	0x3401a44d
3401a310:	3401a377 	.word	0x3401a377
3401a314:	3401a407 	.word	0x3401a407
3401a318:	3401a2c9 	.word	0x3401a2c9
3401a31c:	3401a2c9 	.word	0x3401a2c9
3401a320:	3401a46f 	.word	0x3401a46f
3401a324:	3401a2c9 	.word	0x3401a2c9
3401a328:	3401a377 	.word	0x3401a377
3401a32c:	3401a2c9 	.word	0x3401a2c9
3401a330:	3401a2c9 	.word	0x3401a2c9
3401a334:	3401a40f 	.word	0x3401a40f
3401a338:	6833      	ldr	r3, [r6, #0]
3401a33a:	1d1a      	adds	r2, r3, #4
3401a33c:	681b      	ldr	r3, [r3, #0]
3401a33e:	6032      	str	r2, [r6, #0]
3401a340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401a344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3401a348:	2301      	movs	r3, #1
3401a34a:	e09d      	b.n	3401a488 <_printf_i+0x1e8>
3401a34c:	6833      	ldr	r3, [r6, #0]
3401a34e:	6820      	ldr	r0, [r4, #0]
3401a350:	1d19      	adds	r1, r3, #4
3401a352:	6031      	str	r1, [r6, #0]
3401a354:	0606      	lsls	r6, r0, #24
3401a356:	d501      	bpl.n	3401a35c <_printf_i+0xbc>
3401a358:	681d      	ldr	r5, [r3, #0]
3401a35a:	e003      	b.n	3401a364 <_printf_i+0xc4>
3401a35c:	0645      	lsls	r5, r0, #25
3401a35e:	d5fb      	bpl.n	3401a358 <_printf_i+0xb8>
3401a360:	f9b3 5000 	ldrsh.w	r5, [r3]
3401a364:	2d00      	cmp	r5, #0
3401a366:	da03      	bge.n	3401a370 <_printf_i+0xd0>
3401a368:	232d      	movs	r3, #45	@ 0x2d
3401a36a:	426d      	negs	r5, r5
3401a36c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401a370:	4859      	ldr	r0, [pc, #356]	@ (3401a4d8 <_printf_i+0x238>)
3401a372:	230a      	movs	r3, #10
3401a374:	e011      	b.n	3401a39a <_printf_i+0xfa>
3401a376:	6821      	ldr	r1, [r4, #0]
3401a378:	6833      	ldr	r3, [r6, #0]
3401a37a:	0608      	lsls	r0, r1, #24
3401a37c:	f853 5b04 	ldr.w	r5, [r3], #4
3401a380:	d402      	bmi.n	3401a388 <_printf_i+0xe8>
3401a382:	0649      	lsls	r1, r1, #25
3401a384:	bf48      	it	mi
3401a386:	b2ad      	uxthmi	r5, r5
3401a388:	2f6f      	cmp	r7, #111	@ 0x6f
3401a38a:	6033      	str	r3, [r6, #0]
3401a38c:	4852      	ldr	r0, [pc, #328]	@ (3401a4d8 <_printf_i+0x238>)
3401a38e:	bf14      	ite	ne
3401a390:	230a      	movne	r3, #10
3401a392:	2308      	moveq	r3, #8
3401a394:	2100      	movs	r1, #0
3401a396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3401a39a:	6866      	ldr	r6, [r4, #4]
3401a39c:	2e00      	cmp	r6, #0
3401a39e:	60a6      	str	r6, [r4, #8]
3401a3a0:	bfa2      	ittt	ge
3401a3a2:	6821      	ldrge	r1, [r4, #0]
3401a3a4:	f021 0104 	bicge.w	r1, r1, #4
3401a3a8:	6021      	strge	r1, [r4, #0]
3401a3aa:	b90d      	cbnz	r5, 3401a3b0 <_printf_i+0x110>
3401a3ac:	2e00      	cmp	r6, #0
3401a3ae:	d04b      	beq.n	3401a448 <_printf_i+0x1a8>
3401a3b0:	4616      	mov	r6, r2
3401a3b2:	fbb5 f1f3 	udiv	r1, r5, r3
3401a3b6:	fb03 5711 	mls	r7, r3, r1, r5
3401a3ba:	5dc7      	ldrb	r7, [r0, r7]
3401a3bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
3401a3c0:	462f      	mov	r7, r5
3401a3c2:	460d      	mov	r5, r1
3401a3c4:	42bb      	cmp	r3, r7
3401a3c6:	d9f4      	bls.n	3401a3b2 <_printf_i+0x112>
3401a3c8:	2b08      	cmp	r3, #8
3401a3ca:	d10b      	bne.n	3401a3e4 <_printf_i+0x144>
3401a3cc:	6823      	ldr	r3, [r4, #0]
3401a3ce:	07df      	lsls	r7, r3, #31
3401a3d0:	d508      	bpl.n	3401a3e4 <_printf_i+0x144>
3401a3d2:	6923      	ldr	r3, [r4, #16]
3401a3d4:	6861      	ldr	r1, [r4, #4]
3401a3d6:	4299      	cmp	r1, r3
3401a3d8:	bfde      	ittt	le
3401a3da:	2330      	movle	r3, #48	@ 0x30
3401a3dc:	f806 3c01 	strble.w	r3, [r6, #-1]
3401a3e0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3401a3e4:	1b92      	subs	r2, r2, r6
3401a3e6:	6122      	str	r2, [r4, #16]
3401a3e8:	464b      	mov	r3, r9
3401a3ea:	aa03      	add	r2, sp, #12
3401a3ec:	4621      	mov	r1, r4
3401a3ee:	4640      	mov	r0, r8
3401a3f0:	f8cd a000 	str.w	sl, [sp]
3401a3f4:	f7ff fee2 	bl	3401a1bc <_printf_common>
3401a3f8:	3001      	adds	r0, #1
3401a3fa:	d14a      	bne.n	3401a492 <_printf_i+0x1f2>
3401a3fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401a400:	b004      	add	sp, #16
3401a402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401a406:	6823      	ldr	r3, [r4, #0]
3401a408:	f043 0320 	orr.w	r3, r3, #32
3401a40c:	6023      	str	r3, [r4, #0]
3401a40e:	2778      	movs	r7, #120	@ 0x78
3401a410:	4832      	ldr	r0, [pc, #200]	@ (3401a4dc <_printf_i+0x23c>)
3401a412:	6823      	ldr	r3, [r4, #0]
3401a414:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3401a418:	061f      	lsls	r7, r3, #24
3401a41a:	6831      	ldr	r1, [r6, #0]
3401a41c:	f851 5b04 	ldr.w	r5, [r1], #4
3401a420:	d402      	bmi.n	3401a428 <_printf_i+0x188>
3401a422:	065f      	lsls	r7, r3, #25
3401a424:	bf48      	it	mi
3401a426:	b2ad      	uxthmi	r5, r5
3401a428:	6031      	str	r1, [r6, #0]
3401a42a:	07d9      	lsls	r1, r3, #31
3401a42c:	bf44      	itt	mi
3401a42e:	f043 0320 	orrmi.w	r3, r3, #32
3401a432:	6023      	strmi	r3, [r4, #0]
3401a434:	b11d      	cbz	r5, 3401a43e <_printf_i+0x19e>
3401a436:	2310      	movs	r3, #16
3401a438:	e7ac      	b.n	3401a394 <_printf_i+0xf4>
3401a43a:	4827      	ldr	r0, [pc, #156]	@ (3401a4d8 <_printf_i+0x238>)
3401a43c:	e7e9      	b.n	3401a412 <_printf_i+0x172>
3401a43e:	6823      	ldr	r3, [r4, #0]
3401a440:	f023 0320 	bic.w	r3, r3, #32
3401a444:	6023      	str	r3, [r4, #0]
3401a446:	e7f6      	b.n	3401a436 <_printf_i+0x196>
3401a448:	4616      	mov	r6, r2
3401a44a:	e7bd      	b.n	3401a3c8 <_printf_i+0x128>
3401a44c:	6833      	ldr	r3, [r6, #0]
3401a44e:	6825      	ldr	r5, [r4, #0]
3401a450:	1d18      	adds	r0, r3, #4
3401a452:	6961      	ldr	r1, [r4, #20]
3401a454:	6030      	str	r0, [r6, #0]
3401a456:	062e      	lsls	r6, r5, #24
3401a458:	681b      	ldr	r3, [r3, #0]
3401a45a:	d501      	bpl.n	3401a460 <_printf_i+0x1c0>
3401a45c:	6019      	str	r1, [r3, #0]
3401a45e:	e002      	b.n	3401a466 <_printf_i+0x1c6>
3401a460:	0668      	lsls	r0, r5, #25
3401a462:	d5fb      	bpl.n	3401a45c <_printf_i+0x1bc>
3401a464:	8019      	strh	r1, [r3, #0]
3401a466:	2300      	movs	r3, #0
3401a468:	4616      	mov	r6, r2
3401a46a:	6123      	str	r3, [r4, #16]
3401a46c:	e7bc      	b.n	3401a3e8 <_printf_i+0x148>
3401a46e:	6833      	ldr	r3, [r6, #0]
3401a470:	2100      	movs	r1, #0
3401a472:	1d1a      	adds	r2, r3, #4
3401a474:	6032      	str	r2, [r6, #0]
3401a476:	681e      	ldr	r6, [r3, #0]
3401a478:	6862      	ldr	r2, [r4, #4]
3401a47a:	4630      	mov	r0, r6
3401a47c:	f000 fccd 	bl	3401ae1a <memchr>
3401a480:	b108      	cbz	r0, 3401a486 <_printf_i+0x1e6>
3401a482:	1b80      	subs	r0, r0, r6
3401a484:	6060      	str	r0, [r4, #4]
3401a486:	6863      	ldr	r3, [r4, #4]
3401a488:	6123      	str	r3, [r4, #16]
3401a48a:	2300      	movs	r3, #0
3401a48c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401a490:	e7aa      	b.n	3401a3e8 <_printf_i+0x148>
3401a492:	6923      	ldr	r3, [r4, #16]
3401a494:	4632      	mov	r2, r6
3401a496:	4649      	mov	r1, r9
3401a498:	4640      	mov	r0, r8
3401a49a:	47d0      	blx	sl
3401a49c:	3001      	adds	r0, #1
3401a49e:	d0ad      	beq.n	3401a3fc <_printf_i+0x15c>
3401a4a0:	6823      	ldr	r3, [r4, #0]
3401a4a2:	079b      	lsls	r3, r3, #30
3401a4a4:	d413      	bmi.n	3401a4ce <_printf_i+0x22e>
3401a4a6:	68e0      	ldr	r0, [r4, #12]
3401a4a8:	9b03      	ldr	r3, [sp, #12]
3401a4aa:	4298      	cmp	r0, r3
3401a4ac:	bfb8      	it	lt
3401a4ae:	4618      	movlt	r0, r3
3401a4b0:	e7a6      	b.n	3401a400 <_printf_i+0x160>
3401a4b2:	2301      	movs	r3, #1
3401a4b4:	4632      	mov	r2, r6
3401a4b6:	4649      	mov	r1, r9
3401a4b8:	4640      	mov	r0, r8
3401a4ba:	47d0      	blx	sl
3401a4bc:	3001      	adds	r0, #1
3401a4be:	d09d      	beq.n	3401a3fc <_printf_i+0x15c>
3401a4c0:	3501      	adds	r5, #1
3401a4c2:	68e3      	ldr	r3, [r4, #12]
3401a4c4:	9903      	ldr	r1, [sp, #12]
3401a4c6:	1a5b      	subs	r3, r3, r1
3401a4c8:	42ab      	cmp	r3, r5
3401a4ca:	dcf2      	bgt.n	3401a4b2 <_printf_i+0x212>
3401a4cc:	e7eb      	b.n	3401a4a6 <_printf_i+0x206>
3401a4ce:	2500      	movs	r5, #0
3401a4d0:	f104 0619 	add.w	r6, r4, #25
3401a4d4:	e7f5      	b.n	3401a4c2 <_printf_i+0x222>
3401a4d6:	bf00      	nop
3401a4d8:	3401e7c0 	.word	0x3401e7c0
3401a4dc:	3401e7d1 	.word	0x3401e7d1

3401a4e0 <std>:
3401a4e0:	2300      	movs	r3, #0
3401a4e2:	b510      	push	{r4, lr}
3401a4e4:	4604      	mov	r4, r0
3401a4e6:	6083      	str	r3, [r0, #8]
3401a4e8:	8181      	strh	r1, [r0, #12]
3401a4ea:	4619      	mov	r1, r3
3401a4ec:	6643      	str	r3, [r0, #100]	@ 0x64
3401a4ee:	81c2      	strh	r2, [r0, #14]
3401a4f0:	2208      	movs	r2, #8
3401a4f2:	6183      	str	r3, [r0, #24]
3401a4f4:	e9c0 3300 	strd	r3, r3, [r0]
3401a4f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
3401a4fc:	305c      	adds	r0, #92	@ 0x5c
3401a4fe:	f000 fa0b 	bl	3401a918 <memset>
3401a502:	4b0d      	ldr	r3, [pc, #52]	@ (3401a538 <std+0x58>)
3401a504:	6224      	str	r4, [r4, #32]
3401a506:	6263      	str	r3, [r4, #36]	@ 0x24
3401a508:	4b0c      	ldr	r3, [pc, #48]	@ (3401a53c <std+0x5c>)
3401a50a:	62a3      	str	r3, [r4, #40]	@ 0x28
3401a50c:	4b0c      	ldr	r3, [pc, #48]	@ (3401a540 <std+0x60>)
3401a50e:	62e3      	str	r3, [r4, #44]	@ 0x2c
3401a510:	4b0c      	ldr	r3, [pc, #48]	@ (3401a544 <std+0x64>)
3401a512:	6323      	str	r3, [r4, #48]	@ 0x30
3401a514:	4b0c      	ldr	r3, [pc, #48]	@ (3401a548 <std+0x68>)
3401a516:	429c      	cmp	r4, r3
3401a518:	d006      	beq.n	3401a528 <std+0x48>
3401a51a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3401a51e:	4294      	cmp	r4, r2
3401a520:	d002      	beq.n	3401a528 <std+0x48>
3401a522:	33d0      	adds	r3, #208	@ 0xd0
3401a524:	429c      	cmp	r4, r3
3401a526:	d105      	bne.n	3401a534 <std+0x54>
3401a528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3401a52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401a530:	f000 bc70 	b.w	3401ae14 <__retarget_lock_init_recursive>
3401a534:	bd10      	pop	{r4, pc}
3401a536:	bf00      	nop
3401a538:	3401a769 	.word	0x3401a769
3401a53c:	3401a78b 	.word	0x3401a78b
3401a540:	3401a7c3 	.word	0x3401a7c3
3401a544:	3401a7e7 	.word	0x3401a7e7
3401a548:	3401f964 	.word	0x3401f964

3401a54c <stdio_exit_handler>:
3401a54c:	4a02      	ldr	r2, [pc, #8]	@ (3401a558 <stdio_exit_handler+0xc>)
3401a54e:	4903      	ldr	r1, [pc, #12]	@ (3401a55c <stdio_exit_handler+0x10>)
3401a550:	4803      	ldr	r0, [pc, #12]	@ (3401a560 <stdio_exit_handler+0x14>)
3401a552:	f000 b87b 	b.w	3401a64c <_fwalk_sglue>
3401a556:	bf00      	nop
3401a558:	3401f248 	.word	0x3401f248
3401a55c:	3401c555 	.word	0x3401c555
3401a560:	3401f258 	.word	0x3401f258

3401a564 <cleanup_stdio>:
3401a564:	6841      	ldr	r1, [r0, #4]
3401a566:	4b0c      	ldr	r3, [pc, #48]	@ (3401a598 <cleanup_stdio+0x34>)
3401a568:	4299      	cmp	r1, r3
3401a56a:	b510      	push	{r4, lr}
3401a56c:	4604      	mov	r4, r0
3401a56e:	d001      	beq.n	3401a574 <cleanup_stdio+0x10>
3401a570:	f001 fff0 	bl	3401c554 <_fflush_r>
3401a574:	68a1      	ldr	r1, [r4, #8]
3401a576:	4b09      	ldr	r3, [pc, #36]	@ (3401a59c <cleanup_stdio+0x38>)
3401a578:	4299      	cmp	r1, r3
3401a57a:	d002      	beq.n	3401a582 <cleanup_stdio+0x1e>
3401a57c:	4620      	mov	r0, r4
3401a57e:	f001 ffe9 	bl	3401c554 <_fflush_r>
3401a582:	68e1      	ldr	r1, [r4, #12]
3401a584:	4b06      	ldr	r3, [pc, #24]	@ (3401a5a0 <cleanup_stdio+0x3c>)
3401a586:	4299      	cmp	r1, r3
3401a588:	d004      	beq.n	3401a594 <cleanup_stdio+0x30>
3401a58a:	4620      	mov	r0, r4
3401a58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401a590:	f001 bfe0 	b.w	3401c554 <_fflush_r>
3401a594:	bd10      	pop	{r4, pc}
3401a596:	bf00      	nop
3401a598:	3401f964 	.word	0x3401f964
3401a59c:	3401f9cc 	.word	0x3401f9cc
3401a5a0:	3401fa34 	.word	0x3401fa34

3401a5a4 <global_stdio_init.part.0>:
3401a5a4:	b510      	push	{r4, lr}
3401a5a6:	4b0b      	ldr	r3, [pc, #44]	@ (3401a5d4 <global_stdio_init.part.0+0x30>)
3401a5a8:	2104      	movs	r1, #4
3401a5aa:	4c0b      	ldr	r4, [pc, #44]	@ (3401a5d8 <global_stdio_init.part.0+0x34>)
3401a5ac:	4a0b      	ldr	r2, [pc, #44]	@ (3401a5dc <global_stdio_init.part.0+0x38>)
3401a5ae:	4620      	mov	r0, r4
3401a5b0:	601a      	str	r2, [r3, #0]
3401a5b2:	2200      	movs	r2, #0
3401a5b4:	f7ff ff94 	bl	3401a4e0 <std>
3401a5b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3401a5bc:	2201      	movs	r2, #1
3401a5be:	2109      	movs	r1, #9
3401a5c0:	f7ff ff8e 	bl	3401a4e0 <std>
3401a5c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3401a5c8:	2202      	movs	r2, #2
3401a5ca:	2112      	movs	r1, #18
3401a5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401a5d0:	f7ff bf86 	b.w	3401a4e0 <std>
3401a5d4:	3401fa9c 	.word	0x3401fa9c
3401a5d8:	3401f964 	.word	0x3401f964
3401a5dc:	3401a54d 	.word	0x3401a54d

3401a5e0 <__sfp_lock_acquire>:
3401a5e0:	4801      	ldr	r0, [pc, #4]	@ (3401a5e8 <__sfp_lock_acquire+0x8>)
3401a5e2:	f000 bc18 	b.w	3401ae16 <__retarget_lock_acquire_recursive>
3401a5e6:	bf00      	nop
3401a5e8:	3401faa5 	.word	0x3401faa5

3401a5ec <__sfp_lock_release>:
3401a5ec:	4801      	ldr	r0, [pc, #4]	@ (3401a5f4 <__sfp_lock_release+0x8>)
3401a5ee:	f000 bc13 	b.w	3401ae18 <__retarget_lock_release_recursive>
3401a5f2:	bf00      	nop
3401a5f4:	3401faa5 	.word	0x3401faa5

3401a5f8 <__sinit>:
3401a5f8:	b510      	push	{r4, lr}
3401a5fa:	4604      	mov	r4, r0
3401a5fc:	f7ff fff0 	bl	3401a5e0 <__sfp_lock_acquire>
3401a600:	6a23      	ldr	r3, [r4, #32]
3401a602:	b11b      	cbz	r3, 3401a60c <__sinit+0x14>
3401a604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401a608:	f7ff bff0 	b.w	3401a5ec <__sfp_lock_release>
3401a60c:	4b04      	ldr	r3, [pc, #16]	@ (3401a620 <__sinit+0x28>)
3401a60e:	6223      	str	r3, [r4, #32]
3401a610:	4b04      	ldr	r3, [pc, #16]	@ (3401a624 <__sinit+0x2c>)
3401a612:	681b      	ldr	r3, [r3, #0]
3401a614:	2b00      	cmp	r3, #0
3401a616:	d1f5      	bne.n	3401a604 <__sinit+0xc>
3401a618:	f7ff ffc4 	bl	3401a5a4 <global_stdio_init.part.0>
3401a61c:	e7f2      	b.n	3401a604 <__sinit+0xc>
3401a61e:	bf00      	nop
3401a620:	3401a565 	.word	0x3401a565
3401a624:	3401fa9c 	.word	0x3401fa9c

3401a628 <fiprintf>:
3401a628:	b40e      	push	{r1, r2, r3}
3401a62a:	b503      	push	{r0, r1, lr}
3401a62c:	ab03      	add	r3, sp, #12
3401a62e:	4601      	mov	r1, r0
3401a630:	4805      	ldr	r0, [pc, #20]	@ (3401a648 <fiprintf+0x20>)
3401a632:	f853 2b04 	ldr.w	r2, [r3], #4
3401a636:	6800      	ldr	r0, [r0, #0]
3401a638:	9301      	str	r3, [sp, #4]
3401a63a:	f001 fdef 	bl	3401c21c <_vfiprintf_r>
3401a63e:	b002      	add	sp, #8
3401a640:	f85d eb04 	ldr.w	lr, [sp], #4
3401a644:	b003      	add	sp, #12
3401a646:	4770      	bx	lr
3401a648:	3401f254 	.word	0x3401f254

3401a64c <_fwalk_sglue>:
3401a64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401a650:	4607      	mov	r7, r0
3401a652:	4688      	mov	r8, r1
3401a654:	4614      	mov	r4, r2
3401a656:	2600      	movs	r6, #0
3401a658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3401a65c:	f1b9 0901 	subs.w	r9, r9, #1
3401a660:	d505      	bpl.n	3401a66e <_fwalk_sglue+0x22>
3401a662:	6824      	ldr	r4, [r4, #0]
3401a664:	2c00      	cmp	r4, #0
3401a666:	d1f7      	bne.n	3401a658 <_fwalk_sglue+0xc>
3401a668:	4630      	mov	r0, r6
3401a66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401a66e:	89ab      	ldrh	r3, [r5, #12]
3401a670:	2b01      	cmp	r3, #1
3401a672:	d907      	bls.n	3401a684 <_fwalk_sglue+0x38>
3401a674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3401a678:	3301      	adds	r3, #1
3401a67a:	d003      	beq.n	3401a684 <_fwalk_sglue+0x38>
3401a67c:	4629      	mov	r1, r5
3401a67e:	4638      	mov	r0, r7
3401a680:	47c0      	blx	r8
3401a682:	4306      	orrs	r6, r0
3401a684:	3568      	adds	r5, #104	@ 0x68
3401a686:	e7e9      	b.n	3401a65c <_fwalk_sglue+0x10>

3401a688 <iprintf>:
3401a688:	b40f      	push	{r0, r1, r2, r3}
3401a68a:	b507      	push	{r0, r1, r2, lr}
3401a68c:	4906      	ldr	r1, [pc, #24]	@ (3401a6a8 <iprintf+0x20>)
3401a68e:	ab04      	add	r3, sp, #16
3401a690:	6808      	ldr	r0, [r1, #0]
3401a692:	f853 2b04 	ldr.w	r2, [r3], #4
3401a696:	6881      	ldr	r1, [r0, #8]
3401a698:	9301      	str	r3, [sp, #4]
3401a69a:	f001 fdbf 	bl	3401c21c <_vfiprintf_r>
3401a69e:	b003      	add	sp, #12
3401a6a0:	f85d eb04 	ldr.w	lr, [sp], #4
3401a6a4:	b004      	add	sp, #16
3401a6a6:	4770      	bx	lr
3401a6a8:	3401f254 	.word	0x3401f254

3401a6ac <_puts_r>:
3401a6ac:	6a03      	ldr	r3, [r0, #32]
3401a6ae:	b570      	push	{r4, r5, r6, lr}
3401a6b0:	4605      	mov	r5, r0
3401a6b2:	460e      	mov	r6, r1
3401a6b4:	6884      	ldr	r4, [r0, #8]
3401a6b6:	b90b      	cbnz	r3, 3401a6bc <_puts_r+0x10>
3401a6b8:	f7ff ff9e 	bl	3401a5f8 <__sinit>
3401a6bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401a6be:	07db      	lsls	r3, r3, #31
3401a6c0:	d405      	bmi.n	3401a6ce <_puts_r+0x22>
3401a6c2:	89a3      	ldrh	r3, [r4, #12]
3401a6c4:	0598      	lsls	r0, r3, #22
3401a6c6:	d402      	bmi.n	3401a6ce <_puts_r+0x22>
3401a6c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401a6ca:	f000 fba4 	bl	3401ae16 <__retarget_lock_acquire_recursive>
3401a6ce:	89a3      	ldrh	r3, [r4, #12]
3401a6d0:	0719      	lsls	r1, r3, #28
3401a6d2:	d502      	bpl.n	3401a6da <_puts_r+0x2e>
3401a6d4:	6923      	ldr	r3, [r4, #16]
3401a6d6:	2b00      	cmp	r3, #0
3401a6d8:	d135      	bne.n	3401a746 <_puts_r+0x9a>
3401a6da:	4621      	mov	r1, r4
3401a6dc:	4628      	mov	r0, r5
3401a6de:	f000 f8c5 	bl	3401a86c <__swsetup_r>
3401a6e2:	b380      	cbz	r0, 3401a746 <_puts_r+0x9a>
3401a6e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3401a6e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401a6ea:	07da      	lsls	r2, r3, #31
3401a6ec:	d405      	bmi.n	3401a6fa <_puts_r+0x4e>
3401a6ee:	89a3      	ldrh	r3, [r4, #12]
3401a6f0:	059b      	lsls	r3, r3, #22
3401a6f2:	d402      	bmi.n	3401a6fa <_puts_r+0x4e>
3401a6f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401a6f6:	f000 fb8f 	bl	3401ae18 <__retarget_lock_release_recursive>
3401a6fa:	4628      	mov	r0, r5
3401a6fc:	bd70      	pop	{r4, r5, r6, pc}
3401a6fe:	2b00      	cmp	r3, #0
3401a700:	da04      	bge.n	3401a70c <_puts_r+0x60>
3401a702:	69a2      	ldr	r2, [r4, #24]
3401a704:	429a      	cmp	r2, r3
3401a706:	dc17      	bgt.n	3401a738 <_puts_r+0x8c>
3401a708:	290a      	cmp	r1, #10
3401a70a:	d015      	beq.n	3401a738 <_puts_r+0x8c>
3401a70c:	6823      	ldr	r3, [r4, #0]
3401a70e:	1c5a      	adds	r2, r3, #1
3401a710:	6022      	str	r2, [r4, #0]
3401a712:	7019      	strb	r1, [r3, #0]
3401a714:	68a3      	ldr	r3, [r4, #8]
3401a716:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3401a71a:	3b01      	subs	r3, #1
3401a71c:	60a3      	str	r3, [r4, #8]
3401a71e:	2900      	cmp	r1, #0
3401a720:	d1ed      	bne.n	3401a6fe <_puts_r+0x52>
3401a722:	2b00      	cmp	r3, #0
3401a724:	da11      	bge.n	3401a74a <_puts_r+0x9e>
3401a726:	4622      	mov	r2, r4
3401a728:	210a      	movs	r1, #10
3401a72a:	4628      	mov	r0, r5
3401a72c:	f000 f85f 	bl	3401a7ee <__swbuf_r>
3401a730:	3001      	adds	r0, #1
3401a732:	d0d7      	beq.n	3401a6e4 <_puts_r+0x38>
3401a734:	250a      	movs	r5, #10
3401a736:	e7d7      	b.n	3401a6e8 <_puts_r+0x3c>
3401a738:	4622      	mov	r2, r4
3401a73a:	4628      	mov	r0, r5
3401a73c:	f000 f857 	bl	3401a7ee <__swbuf_r>
3401a740:	3001      	adds	r0, #1
3401a742:	d1e7      	bne.n	3401a714 <_puts_r+0x68>
3401a744:	e7ce      	b.n	3401a6e4 <_puts_r+0x38>
3401a746:	3e01      	subs	r6, #1
3401a748:	e7e4      	b.n	3401a714 <_puts_r+0x68>
3401a74a:	6823      	ldr	r3, [r4, #0]
3401a74c:	1c5a      	adds	r2, r3, #1
3401a74e:	6022      	str	r2, [r4, #0]
3401a750:	220a      	movs	r2, #10
3401a752:	701a      	strb	r2, [r3, #0]
3401a754:	e7ee      	b.n	3401a734 <_puts_r+0x88>
	...

3401a758 <puts>:
3401a758:	4b02      	ldr	r3, [pc, #8]	@ (3401a764 <puts+0xc>)
3401a75a:	4601      	mov	r1, r0
3401a75c:	6818      	ldr	r0, [r3, #0]
3401a75e:	f7ff bfa5 	b.w	3401a6ac <_puts_r>
3401a762:	bf00      	nop
3401a764:	3401f254 	.word	0x3401f254

3401a768 <__sread>:
3401a768:	b510      	push	{r4, lr}
3401a76a:	460c      	mov	r4, r1
3401a76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401a770:	f000 faf2 	bl	3401ad58 <_read_r>
3401a774:	2800      	cmp	r0, #0
3401a776:	bfab      	itete	ge
3401a778:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3401a77a:	89a3      	ldrhlt	r3, [r4, #12]
3401a77c:	181b      	addge	r3, r3, r0
3401a77e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3401a782:	bfac      	ite	ge
3401a784:	6563      	strge	r3, [r4, #84]	@ 0x54
3401a786:	81a3      	strhlt	r3, [r4, #12]
3401a788:	bd10      	pop	{r4, pc}

3401a78a <__swrite>:
3401a78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401a78e:	461f      	mov	r7, r3
3401a790:	898b      	ldrh	r3, [r1, #12]
3401a792:	4605      	mov	r5, r0
3401a794:	460c      	mov	r4, r1
3401a796:	05db      	lsls	r3, r3, #23
3401a798:	4616      	mov	r6, r2
3401a79a:	d505      	bpl.n	3401a7a8 <__swrite+0x1e>
3401a79c:	2302      	movs	r3, #2
3401a79e:	2200      	movs	r2, #0
3401a7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401a7a4:	f000 fac6 	bl	3401ad34 <_lseek_r>
3401a7a8:	89a3      	ldrh	r3, [r4, #12]
3401a7aa:	4632      	mov	r2, r6
3401a7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401a7b0:	4628      	mov	r0, r5
3401a7b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3401a7b6:	81a3      	strh	r3, [r4, #12]
3401a7b8:	463b      	mov	r3, r7
3401a7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3401a7be:	f000 baed 	b.w	3401ad9c <_write_r>

3401a7c2 <__sseek>:
3401a7c2:	b510      	push	{r4, lr}
3401a7c4:	460c      	mov	r4, r1
3401a7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401a7ca:	f000 fab3 	bl	3401ad34 <_lseek_r>
3401a7ce:	1c43      	adds	r3, r0, #1
3401a7d0:	89a3      	ldrh	r3, [r4, #12]
3401a7d2:	bf15      	itete	ne
3401a7d4:	6560      	strne	r0, [r4, #84]	@ 0x54
3401a7d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3401a7da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3401a7de:	81a3      	strheq	r3, [r4, #12]
3401a7e0:	bf18      	it	ne
3401a7e2:	81a3      	strhne	r3, [r4, #12]
3401a7e4:	bd10      	pop	{r4, pc}

3401a7e6 <__sclose>:
3401a7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401a7ea:	f000 ba93 	b.w	3401ad14 <_close_r>

3401a7ee <__swbuf_r>:
3401a7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401a7f0:	460e      	mov	r6, r1
3401a7f2:	4614      	mov	r4, r2
3401a7f4:	4605      	mov	r5, r0
3401a7f6:	b118      	cbz	r0, 3401a800 <__swbuf_r+0x12>
3401a7f8:	6a03      	ldr	r3, [r0, #32]
3401a7fa:	b90b      	cbnz	r3, 3401a800 <__swbuf_r+0x12>
3401a7fc:	f7ff fefc 	bl	3401a5f8 <__sinit>
3401a800:	69a3      	ldr	r3, [r4, #24]
3401a802:	60a3      	str	r3, [r4, #8]
3401a804:	89a3      	ldrh	r3, [r4, #12]
3401a806:	071a      	lsls	r2, r3, #28
3401a808:	d501      	bpl.n	3401a80e <__swbuf_r+0x20>
3401a80a:	6923      	ldr	r3, [r4, #16]
3401a80c:	b943      	cbnz	r3, 3401a820 <__swbuf_r+0x32>
3401a80e:	4621      	mov	r1, r4
3401a810:	4628      	mov	r0, r5
3401a812:	f000 f82b 	bl	3401a86c <__swsetup_r>
3401a816:	b118      	cbz	r0, 3401a820 <__swbuf_r+0x32>
3401a818:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3401a81c:	4638      	mov	r0, r7
3401a81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3401a820:	6823      	ldr	r3, [r4, #0]
3401a822:	b2f6      	uxtb	r6, r6
3401a824:	6922      	ldr	r2, [r4, #16]
3401a826:	4637      	mov	r7, r6
3401a828:	1a98      	subs	r0, r3, r2
3401a82a:	6963      	ldr	r3, [r4, #20]
3401a82c:	4283      	cmp	r3, r0
3401a82e:	dc05      	bgt.n	3401a83c <__swbuf_r+0x4e>
3401a830:	4621      	mov	r1, r4
3401a832:	4628      	mov	r0, r5
3401a834:	f001 fe8e 	bl	3401c554 <_fflush_r>
3401a838:	2800      	cmp	r0, #0
3401a83a:	d1ed      	bne.n	3401a818 <__swbuf_r+0x2a>
3401a83c:	68a3      	ldr	r3, [r4, #8]
3401a83e:	3b01      	subs	r3, #1
3401a840:	60a3      	str	r3, [r4, #8]
3401a842:	6823      	ldr	r3, [r4, #0]
3401a844:	1c5a      	adds	r2, r3, #1
3401a846:	6022      	str	r2, [r4, #0]
3401a848:	701e      	strb	r6, [r3, #0]
3401a84a:	1c43      	adds	r3, r0, #1
3401a84c:	6962      	ldr	r2, [r4, #20]
3401a84e:	429a      	cmp	r2, r3
3401a850:	d004      	beq.n	3401a85c <__swbuf_r+0x6e>
3401a852:	89a3      	ldrh	r3, [r4, #12]
3401a854:	07db      	lsls	r3, r3, #31
3401a856:	d5e1      	bpl.n	3401a81c <__swbuf_r+0x2e>
3401a858:	2e0a      	cmp	r6, #10
3401a85a:	d1df      	bne.n	3401a81c <__swbuf_r+0x2e>
3401a85c:	4621      	mov	r1, r4
3401a85e:	4628      	mov	r0, r5
3401a860:	f001 fe78 	bl	3401c554 <_fflush_r>
3401a864:	2800      	cmp	r0, #0
3401a866:	d0d9      	beq.n	3401a81c <__swbuf_r+0x2e>
3401a868:	e7d6      	b.n	3401a818 <__swbuf_r+0x2a>
	...

3401a86c <__swsetup_r>:
3401a86c:	b538      	push	{r3, r4, r5, lr}
3401a86e:	4b29      	ldr	r3, [pc, #164]	@ (3401a914 <__swsetup_r+0xa8>)
3401a870:	4605      	mov	r5, r0
3401a872:	460c      	mov	r4, r1
3401a874:	6818      	ldr	r0, [r3, #0]
3401a876:	b118      	cbz	r0, 3401a880 <__swsetup_r+0x14>
3401a878:	6a03      	ldr	r3, [r0, #32]
3401a87a:	b90b      	cbnz	r3, 3401a880 <__swsetup_r+0x14>
3401a87c:	f7ff febc 	bl	3401a5f8 <__sinit>
3401a880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401a884:	0719      	lsls	r1, r3, #28
3401a886:	d422      	bmi.n	3401a8ce <__swsetup_r+0x62>
3401a888:	06da      	lsls	r2, r3, #27
3401a88a:	d407      	bmi.n	3401a89c <__swsetup_r+0x30>
3401a88c:	2209      	movs	r2, #9
3401a88e:	602a      	str	r2, [r5, #0]
3401a890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401a894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401a898:	81a3      	strh	r3, [r4, #12]
3401a89a:	e033      	b.n	3401a904 <__swsetup_r+0x98>
3401a89c:	0758      	lsls	r0, r3, #29
3401a89e:	d512      	bpl.n	3401a8c6 <__swsetup_r+0x5a>
3401a8a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401a8a2:	b141      	cbz	r1, 3401a8b6 <__swsetup_r+0x4a>
3401a8a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3401a8a8:	4299      	cmp	r1, r3
3401a8aa:	d002      	beq.n	3401a8b2 <__swsetup_r+0x46>
3401a8ac:	4628      	mov	r0, r5
3401a8ae:	f001 f8b9 	bl	3401ba24 <_free_r>
3401a8b2:	2300      	movs	r3, #0
3401a8b4:	6363      	str	r3, [r4, #52]	@ 0x34
3401a8b6:	89a3      	ldrh	r3, [r4, #12]
3401a8b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3401a8bc:	81a3      	strh	r3, [r4, #12]
3401a8be:	2300      	movs	r3, #0
3401a8c0:	6063      	str	r3, [r4, #4]
3401a8c2:	6923      	ldr	r3, [r4, #16]
3401a8c4:	6023      	str	r3, [r4, #0]
3401a8c6:	89a3      	ldrh	r3, [r4, #12]
3401a8c8:	f043 0308 	orr.w	r3, r3, #8
3401a8cc:	81a3      	strh	r3, [r4, #12]
3401a8ce:	6923      	ldr	r3, [r4, #16]
3401a8d0:	b94b      	cbnz	r3, 3401a8e6 <__swsetup_r+0x7a>
3401a8d2:	89a3      	ldrh	r3, [r4, #12]
3401a8d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3401a8d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401a8dc:	d003      	beq.n	3401a8e6 <__swsetup_r+0x7a>
3401a8de:	4621      	mov	r1, r4
3401a8e0:	4628      	mov	r0, r5
3401a8e2:	f001 fe84 	bl	3401c5ee <__smakebuf_r>
3401a8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401a8ea:	f013 0201 	ands.w	r2, r3, #1
3401a8ee:	d00a      	beq.n	3401a906 <__swsetup_r+0x9a>
3401a8f0:	2200      	movs	r2, #0
3401a8f2:	60a2      	str	r2, [r4, #8]
3401a8f4:	6962      	ldr	r2, [r4, #20]
3401a8f6:	4252      	negs	r2, r2
3401a8f8:	61a2      	str	r2, [r4, #24]
3401a8fa:	6922      	ldr	r2, [r4, #16]
3401a8fc:	b942      	cbnz	r2, 3401a910 <__swsetup_r+0xa4>
3401a8fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3401a902:	d1c5      	bne.n	3401a890 <__swsetup_r+0x24>
3401a904:	bd38      	pop	{r3, r4, r5, pc}
3401a906:	0799      	lsls	r1, r3, #30
3401a908:	bf58      	it	pl
3401a90a:	6962      	ldrpl	r2, [r4, #20]
3401a90c:	60a2      	str	r2, [r4, #8]
3401a90e:	e7f4      	b.n	3401a8fa <__swsetup_r+0x8e>
3401a910:	2000      	movs	r0, #0
3401a912:	e7f7      	b.n	3401a904 <__swsetup_r+0x98>
3401a914:	3401f254 	.word	0x3401f254

3401a918 <memset>:
3401a918:	4402      	add	r2, r0
3401a91a:	4603      	mov	r3, r0
3401a91c:	4293      	cmp	r3, r2
3401a91e:	d100      	bne.n	3401a922 <memset+0xa>
3401a920:	4770      	bx	lr
3401a922:	f803 1b01 	strb.w	r1, [r3], #1
3401a926:	e7f9      	b.n	3401a91c <memset+0x4>

3401a928 <_strerror_r>:
3401a928:	b510      	push	{r4, lr}
3401a92a:	4604      	mov	r4, r0
3401a92c:	4608      	mov	r0, r1
3401a92e:	4611      	mov	r1, r2
3401a930:	461a      	mov	r2, r3
3401a932:	288e      	cmp	r0, #142	@ 0x8e
3401a934:	f200 8130 	bhi.w	3401ab98 <_strerror_r+0x270>
3401a938:	e8df f010 	tbh	[pc, r0, lsl #1]
3401a93c:	0138008f 	.word	0x0138008f
3401a940:	00940092 	.word	0x00940092
3401a944:	00980096 	.word	0x00980096
3401a948:	009c009a 	.word	0x009c009a
3401a94c:	00a2009e 	.word	0x00a2009e
3401a950:	00a800a4 	.word	0x00a800a4
3401a954:	00ac00aa 	.word	0x00ac00aa
3401a958:	012e00ae 	.word	0x012e00ae
3401a95c:	00b200b0 	.word	0x00b200b0
3401a960:	00b600b4 	.word	0x00b600b4
3401a964:	00be00b8 	.word	0x00be00b8
3401a968:	00c600c0 	.word	0x00c600c0
3401a96c:	00ca00c8 	.word	0x00ca00c8
3401a970:	00ce00cc 	.word	0x00ce00cc
3401a974:	00d600d2 	.word	0x00d600d2
3401a978:	00da00d8 	.word	0x00da00d8
3401a97c:	00de00dc 	.word	0x00de00dc
3401a980:	00e200e0 	.word	0x00e200e0
3401a984:	012e00e4 	.word	0x012e00e4
3401a988:	012e012e 	.word	0x012e012e
3401a98c:	012e012e 	.word	0x012e012e
3401a990:	012e012e 	.word	0x012e012e
3401a994:	00e8012e 	.word	0x00e8012e
3401a998:	012e00ec 	.word	0x012e00ec
3401a99c:	012e012e 	.word	0x012e012e
3401a9a0:	012e012e 	.word	0x012e012e
3401a9a4:	012e012e 	.word	0x012e012e
3401a9a8:	012e012e 	.word	0x012e012e
3401a9ac:	012e012e 	.word	0x012e012e
3401a9b0:	012e012e 	.word	0x012e012e
3401a9b4:	010800ee 	.word	0x010800ee
3401a9b8:	00f200f0 	.word	0x00f200f0
3401a9bc:	012e012e 	.word	0x012e012e
3401a9c0:	00f4012e 	.word	0x00f4012e
3401a9c4:	012e012e 	.word	0x012e012e
3401a9c8:	00f6012e 	.word	0x00f6012e
3401a9cc:	012e012e 	.word	0x012e012e
3401a9d0:	012e00fa 	.word	0x012e00fa
3401a9d4:	00fc012e 	.word	0x00fc012e
3401a9d8:	012e012e 	.word	0x012e012e
3401a9dc:	012e012e 	.word	0x012e012e
3401a9e0:	012e012e 	.word	0x012e012e
3401a9e4:	012e012e 	.word	0x012e012e
3401a9e8:	012e012e 	.word	0x012e012e
3401a9ec:	012e00fe 	.word	0x012e00fe
3401a9f0:	01020100 	.word	0x01020100
3401a9f4:	012e0104 	.word	0x012e0104
3401a9f8:	0126012e 	.word	0x0126012e
3401a9fc:	012e012e 	.word	0x012e012e
3401aa00:	012e012e 	.word	0x012e012e
3401aa04:	012e012e 	.word	0x012e012e
3401aa08:	012e012e 	.word	0x012e012e
3401aa0c:	01060114 	.word	0x01060114
3401aa10:	010c010a 	.word	0x010c010a
3401aa14:	0110010e 	.word	0x0110010e
3401aa18:	0112012e 	.word	0x0112012e
3401aa1c:	011a0116 	.word	0x011a0116
3401aa20:	00c200ea 	.word	0x00c200ea
3401aa24:	00ba012c 	.word	0x00ba012c
3401aa28:	00bc00d0 	.word	0x00bc00d0
3401aa2c:	00a600a0 	.word	0x00a600a0
3401aa30:	00f8012a 	.word	0x00f8012a
3401aa34:	0118012e 	.word	0x0118012e
3401aa38:	011e00c4 	.word	0x011e00c4
3401aa3c:	012e011c 	.word	0x012e011c
3401aa40:	012e012e 	.word	0x012e012e
3401aa44:	012e012e 	.word	0x012e012e
3401aa48:	012e00d4 	.word	0x012e00d4
3401aa4c:	012e012e 	.word	0x012e012e
3401aa50:	012800e6 	.word	0x012800e6
3401aa54:	01220120 	.word	0x01220120
3401aa58:	0124      	.short	0x0124
3401aa5a:	4b55      	ldr	r3, [pc, #340]	@ (3401abb0 <_strerror_r+0x288>)
3401aa5c:	4618      	mov	r0, r3
3401aa5e:	bd10      	pop	{r4, pc}
3401aa60:	4b54      	ldr	r3, [pc, #336]	@ (3401abb4 <_strerror_r+0x28c>)
3401aa62:	e7fb      	b.n	3401aa5c <_strerror_r+0x134>
3401aa64:	4b54      	ldr	r3, [pc, #336]	@ (3401abb8 <_strerror_r+0x290>)
3401aa66:	e7f9      	b.n	3401aa5c <_strerror_r+0x134>
3401aa68:	4b54      	ldr	r3, [pc, #336]	@ (3401abbc <_strerror_r+0x294>)
3401aa6a:	e7f7      	b.n	3401aa5c <_strerror_r+0x134>
3401aa6c:	4b54      	ldr	r3, [pc, #336]	@ (3401abc0 <_strerror_r+0x298>)
3401aa6e:	e7f5      	b.n	3401aa5c <_strerror_r+0x134>
3401aa70:	4b54      	ldr	r3, [pc, #336]	@ (3401abc4 <_strerror_r+0x29c>)
3401aa72:	e7f3      	b.n	3401aa5c <_strerror_r+0x134>
3401aa74:	4b54      	ldr	r3, [pc, #336]	@ (3401abc8 <_strerror_r+0x2a0>)
3401aa76:	e7f1      	b.n	3401aa5c <_strerror_r+0x134>
3401aa78:	4b54      	ldr	r3, [pc, #336]	@ (3401abcc <_strerror_r+0x2a4>)
3401aa7a:	e7ef      	b.n	3401aa5c <_strerror_r+0x134>
3401aa7c:	4b54      	ldr	r3, [pc, #336]	@ (3401abd0 <_strerror_r+0x2a8>)
3401aa7e:	e7ed      	b.n	3401aa5c <_strerror_r+0x134>
3401aa80:	4b54      	ldr	r3, [pc, #336]	@ (3401abd4 <_strerror_r+0x2ac>)
3401aa82:	e7eb      	b.n	3401aa5c <_strerror_r+0x134>
3401aa84:	4b54      	ldr	r3, [pc, #336]	@ (3401abd8 <_strerror_r+0x2b0>)
3401aa86:	e7e9      	b.n	3401aa5c <_strerror_r+0x134>
3401aa88:	4b54      	ldr	r3, [pc, #336]	@ (3401abdc <_strerror_r+0x2b4>)
3401aa8a:	e7e7      	b.n	3401aa5c <_strerror_r+0x134>
3401aa8c:	4b54      	ldr	r3, [pc, #336]	@ (3401abe0 <_strerror_r+0x2b8>)
3401aa8e:	e7e5      	b.n	3401aa5c <_strerror_r+0x134>
3401aa90:	4b54      	ldr	r3, [pc, #336]	@ (3401abe4 <_strerror_r+0x2bc>)
3401aa92:	e7e3      	b.n	3401aa5c <_strerror_r+0x134>
3401aa94:	4b54      	ldr	r3, [pc, #336]	@ (3401abe8 <_strerror_r+0x2c0>)
3401aa96:	e7e1      	b.n	3401aa5c <_strerror_r+0x134>
3401aa98:	4b54      	ldr	r3, [pc, #336]	@ (3401abec <_strerror_r+0x2c4>)
3401aa9a:	e7df      	b.n	3401aa5c <_strerror_r+0x134>
3401aa9c:	4b54      	ldr	r3, [pc, #336]	@ (3401abf0 <_strerror_r+0x2c8>)
3401aa9e:	e7dd      	b.n	3401aa5c <_strerror_r+0x134>
3401aaa0:	4b54      	ldr	r3, [pc, #336]	@ (3401abf4 <_strerror_r+0x2cc>)
3401aaa2:	e7db      	b.n	3401aa5c <_strerror_r+0x134>
3401aaa4:	4b54      	ldr	r3, [pc, #336]	@ (3401abf8 <_strerror_r+0x2d0>)
3401aaa6:	e7d9      	b.n	3401aa5c <_strerror_r+0x134>
3401aaa8:	4b54      	ldr	r3, [pc, #336]	@ (3401abfc <_strerror_r+0x2d4>)
3401aaaa:	e7d7      	b.n	3401aa5c <_strerror_r+0x134>
3401aaac:	4b54      	ldr	r3, [pc, #336]	@ (3401ac00 <_strerror_r+0x2d8>)
3401aaae:	e7d5      	b.n	3401aa5c <_strerror_r+0x134>
3401aab0:	4b54      	ldr	r3, [pc, #336]	@ (3401ac04 <_strerror_r+0x2dc>)
3401aab2:	e7d3      	b.n	3401aa5c <_strerror_r+0x134>
3401aab4:	4b54      	ldr	r3, [pc, #336]	@ (3401ac08 <_strerror_r+0x2e0>)
3401aab6:	e7d1      	b.n	3401aa5c <_strerror_r+0x134>
3401aab8:	4b54      	ldr	r3, [pc, #336]	@ (3401ac0c <_strerror_r+0x2e4>)
3401aaba:	e7cf      	b.n	3401aa5c <_strerror_r+0x134>
3401aabc:	4b54      	ldr	r3, [pc, #336]	@ (3401ac10 <_strerror_r+0x2e8>)
3401aabe:	e7cd      	b.n	3401aa5c <_strerror_r+0x134>
3401aac0:	4b54      	ldr	r3, [pc, #336]	@ (3401ac14 <_strerror_r+0x2ec>)
3401aac2:	e7cb      	b.n	3401aa5c <_strerror_r+0x134>
3401aac4:	4b54      	ldr	r3, [pc, #336]	@ (3401ac18 <_strerror_r+0x2f0>)
3401aac6:	e7c9      	b.n	3401aa5c <_strerror_r+0x134>
3401aac8:	4b54      	ldr	r3, [pc, #336]	@ (3401ac1c <_strerror_r+0x2f4>)
3401aaca:	e7c7      	b.n	3401aa5c <_strerror_r+0x134>
3401aacc:	4b54      	ldr	r3, [pc, #336]	@ (3401ac20 <_strerror_r+0x2f8>)
3401aace:	e7c5      	b.n	3401aa5c <_strerror_r+0x134>
3401aad0:	4b54      	ldr	r3, [pc, #336]	@ (3401ac24 <_strerror_r+0x2fc>)
3401aad2:	e7c3      	b.n	3401aa5c <_strerror_r+0x134>
3401aad4:	4b54      	ldr	r3, [pc, #336]	@ (3401ac28 <_strerror_r+0x300>)
3401aad6:	e7c1      	b.n	3401aa5c <_strerror_r+0x134>
3401aad8:	4b54      	ldr	r3, [pc, #336]	@ (3401ac2c <_strerror_r+0x304>)
3401aada:	e7bf      	b.n	3401aa5c <_strerror_r+0x134>
3401aadc:	4b54      	ldr	r3, [pc, #336]	@ (3401ac30 <_strerror_r+0x308>)
3401aade:	e7bd      	b.n	3401aa5c <_strerror_r+0x134>
3401aae0:	4b54      	ldr	r3, [pc, #336]	@ (3401ac34 <_strerror_r+0x30c>)
3401aae2:	e7bb      	b.n	3401aa5c <_strerror_r+0x134>
3401aae4:	4b54      	ldr	r3, [pc, #336]	@ (3401ac38 <_strerror_r+0x310>)
3401aae6:	e7b9      	b.n	3401aa5c <_strerror_r+0x134>
3401aae8:	4b54      	ldr	r3, [pc, #336]	@ (3401ac3c <_strerror_r+0x314>)
3401aaea:	e7b7      	b.n	3401aa5c <_strerror_r+0x134>
3401aaec:	4b54      	ldr	r3, [pc, #336]	@ (3401ac40 <_strerror_r+0x318>)
3401aaee:	e7b5      	b.n	3401aa5c <_strerror_r+0x134>
3401aaf0:	4b54      	ldr	r3, [pc, #336]	@ (3401ac44 <_strerror_r+0x31c>)
3401aaf2:	e7b3      	b.n	3401aa5c <_strerror_r+0x134>
3401aaf4:	4b54      	ldr	r3, [pc, #336]	@ (3401ac48 <_strerror_r+0x320>)
3401aaf6:	e7b1      	b.n	3401aa5c <_strerror_r+0x134>
3401aaf8:	4b54      	ldr	r3, [pc, #336]	@ (3401ac4c <_strerror_r+0x324>)
3401aafa:	e7af      	b.n	3401aa5c <_strerror_r+0x134>
3401aafc:	4b54      	ldr	r3, [pc, #336]	@ (3401ac50 <_strerror_r+0x328>)
3401aafe:	e7ad      	b.n	3401aa5c <_strerror_r+0x134>
3401ab00:	4b54      	ldr	r3, [pc, #336]	@ (3401ac54 <_strerror_r+0x32c>)
3401ab02:	e7ab      	b.n	3401aa5c <_strerror_r+0x134>
3401ab04:	4b54      	ldr	r3, [pc, #336]	@ (3401ac58 <_strerror_r+0x330>)
3401ab06:	e7a9      	b.n	3401aa5c <_strerror_r+0x134>
3401ab08:	4b54      	ldr	r3, [pc, #336]	@ (3401ac5c <_strerror_r+0x334>)
3401ab0a:	e7a7      	b.n	3401aa5c <_strerror_r+0x134>
3401ab0c:	4b54      	ldr	r3, [pc, #336]	@ (3401ac60 <_strerror_r+0x338>)
3401ab0e:	e7a5      	b.n	3401aa5c <_strerror_r+0x134>
3401ab10:	4b54      	ldr	r3, [pc, #336]	@ (3401ac64 <_strerror_r+0x33c>)
3401ab12:	e7a3      	b.n	3401aa5c <_strerror_r+0x134>
3401ab14:	4b54      	ldr	r3, [pc, #336]	@ (3401ac68 <_strerror_r+0x340>)
3401ab16:	e7a1      	b.n	3401aa5c <_strerror_r+0x134>
3401ab18:	4b54      	ldr	r3, [pc, #336]	@ (3401ac6c <_strerror_r+0x344>)
3401ab1a:	e79f      	b.n	3401aa5c <_strerror_r+0x134>
3401ab1c:	4b54      	ldr	r3, [pc, #336]	@ (3401ac70 <_strerror_r+0x348>)
3401ab1e:	e79d      	b.n	3401aa5c <_strerror_r+0x134>
3401ab20:	4b54      	ldr	r3, [pc, #336]	@ (3401ac74 <_strerror_r+0x34c>)
3401ab22:	e79b      	b.n	3401aa5c <_strerror_r+0x134>
3401ab24:	4b54      	ldr	r3, [pc, #336]	@ (3401ac78 <_strerror_r+0x350>)
3401ab26:	e799      	b.n	3401aa5c <_strerror_r+0x134>
3401ab28:	4b54      	ldr	r3, [pc, #336]	@ (3401ac7c <_strerror_r+0x354>)
3401ab2a:	e797      	b.n	3401aa5c <_strerror_r+0x134>
3401ab2c:	4b54      	ldr	r3, [pc, #336]	@ (3401ac80 <_strerror_r+0x358>)
3401ab2e:	e795      	b.n	3401aa5c <_strerror_r+0x134>
3401ab30:	4b54      	ldr	r3, [pc, #336]	@ (3401ac84 <_strerror_r+0x35c>)
3401ab32:	e793      	b.n	3401aa5c <_strerror_r+0x134>
3401ab34:	4b54      	ldr	r3, [pc, #336]	@ (3401ac88 <_strerror_r+0x360>)
3401ab36:	e791      	b.n	3401aa5c <_strerror_r+0x134>
3401ab38:	4b54      	ldr	r3, [pc, #336]	@ (3401ac8c <_strerror_r+0x364>)
3401ab3a:	e78f      	b.n	3401aa5c <_strerror_r+0x134>
3401ab3c:	4b54      	ldr	r3, [pc, #336]	@ (3401ac90 <_strerror_r+0x368>)
3401ab3e:	e78d      	b.n	3401aa5c <_strerror_r+0x134>
3401ab40:	4b54      	ldr	r3, [pc, #336]	@ (3401ac94 <_strerror_r+0x36c>)
3401ab42:	e78b      	b.n	3401aa5c <_strerror_r+0x134>
3401ab44:	4b54      	ldr	r3, [pc, #336]	@ (3401ac98 <_strerror_r+0x370>)
3401ab46:	e789      	b.n	3401aa5c <_strerror_r+0x134>
3401ab48:	4b54      	ldr	r3, [pc, #336]	@ (3401ac9c <_strerror_r+0x374>)
3401ab4a:	e787      	b.n	3401aa5c <_strerror_r+0x134>
3401ab4c:	4b54      	ldr	r3, [pc, #336]	@ (3401aca0 <_strerror_r+0x378>)
3401ab4e:	e785      	b.n	3401aa5c <_strerror_r+0x134>
3401ab50:	4b54      	ldr	r3, [pc, #336]	@ (3401aca4 <_strerror_r+0x37c>)
3401ab52:	e783      	b.n	3401aa5c <_strerror_r+0x134>
3401ab54:	4b54      	ldr	r3, [pc, #336]	@ (3401aca8 <_strerror_r+0x380>)
3401ab56:	e781      	b.n	3401aa5c <_strerror_r+0x134>
3401ab58:	4b54      	ldr	r3, [pc, #336]	@ (3401acac <_strerror_r+0x384>)
3401ab5a:	e77f      	b.n	3401aa5c <_strerror_r+0x134>
3401ab5c:	4b54      	ldr	r3, [pc, #336]	@ (3401acb0 <_strerror_r+0x388>)
3401ab5e:	e77d      	b.n	3401aa5c <_strerror_r+0x134>
3401ab60:	4b54      	ldr	r3, [pc, #336]	@ (3401acb4 <_strerror_r+0x38c>)
3401ab62:	e77b      	b.n	3401aa5c <_strerror_r+0x134>
3401ab64:	4b54      	ldr	r3, [pc, #336]	@ (3401acb8 <_strerror_r+0x390>)
3401ab66:	e779      	b.n	3401aa5c <_strerror_r+0x134>
3401ab68:	4b54      	ldr	r3, [pc, #336]	@ (3401acbc <_strerror_r+0x394>)
3401ab6a:	e777      	b.n	3401aa5c <_strerror_r+0x134>
3401ab6c:	4b54      	ldr	r3, [pc, #336]	@ (3401acc0 <_strerror_r+0x398>)
3401ab6e:	e775      	b.n	3401aa5c <_strerror_r+0x134>
3401ab70:	4b54      	ldr	r3, [pc, #336]	@ (3401acc4 <_strerror_r+0x39c>)
3401ab72:	e773      	b.n	3401aa5c <_strerror_r+0x134>
3401ab74:	4b54      	ldr	r3, [pc, #336]	@ (3401acc8 <_strerror_r+0x3a0>)
3401ab76:	e771      	b.n	3401aa5c <_strerror_r+0x134>
3401ab78:	4b54      	ldr	r3, [pc, #336]	@ (3401accc <_strerror_r+0x3a4>)
3401ab7a:	e76f      	b.n	3401aa5c <_strerror_r+0x134>
3401ab7c:	4b54      	ldr	r3, [pc, #336]	@ (3401acd0 <_strerror_r+0x3a8>)
3401ab7e:	e76d      	b.n	3401aa5c <_strerror_r+0x134>
3401ab80:	4b54      	ldr	r3, [pc, #336]	@ (3401acd4 <_strerror_r+0x3ac>)
3401ab82:	e76b      	b.n	3401aa5c <_strerror_r+0x134>
3401ab84:	4b54      	ldr	r3, [pc, #336]	@ (3401acd8 <_strerror_r+0x3b0>)
3401ab86:	e769      	b.n	3401aa5c <_strerror_r+0x134>
3401ab88:	4b54      	ldr	r3, [pc, #336]	@ (3401acdc <_strerror_r+0x3b4>)
3401ab8a:	e767      	b.n	3401aa5c <_strerror_r+0x134>
3401ab8c:	4b54      	ldr	r3, [pc, #336]	@ (3401ace0 <_strerror_r+0x3b8>)
3401ab8e:	e765      	b.n	3401aa5c <_strerror_r+0x134>
3401ab90:	4b54      	ldr	r3, [pc, #336]	@ (3401ace4 <_strerror_r+0x3bc>)
3401ab92:	e763      	b.n	3401aa5c <_strerror_r+0x134>
3401ab94:	4b54      	ldr	r3, [pc, #336]	@ (3401ace8 <_strerror_r+0x3c0>)
3401ab96:	e761      	b.n	3401aa5c <_strerror_r+0x134>
3401ab98:	2a00      	cmp	r2, #0
3401ab9a:	bf08      	it	eq
3401ab9c:	4622      	moveq	r2, r4
3401ab9e:	f000 f8b3 	bl	3401ad08 <_user_strerror>
3401aba2:	4b52      	ldr	r3, [pc, #328]	@ (3401acec <_strerror_r+0x3c4>)
3401aba4:	2800      	cmp	r0, #0
3401aba6:	bf18      	it	ne
3401aba8:	4603      	movne	r3, r0
3401abaa:	e757      	b.n	3401aa5c <_strerror_r+0x134>
3401abac:	4b50      	ldr	r3, [pc, #320]	@ (3401acf0 <_strerror_r+0x3c8>)
3401abae:	e755      	b.n	3401aa5c <_strerror_r+0x134>
3401abb0:	3401e7e2 	.word	0x3401e7e2
3401abb4:	3401e7f4 	.word	0x3401e7f4
3401abb8:	3401e80e 	.word	0x3401e80e
3401abbc:	3401e81e 	.word	0x3401e81e
3401abc0:	3401e836 	.word	0x3401e836
3401abc4:	3401e840 	.word	0x3401e840
3401abc8:	3401e85a 	.word	0x3401e85a
3401abcc:	3401e86c 	.word	0x3401e86c
3401abd0:	3401e87e 	.word	0x3401e87e
3401abd4:	3401e897 	.word	0x3401e897
3401abd8:	3401e8a7 	.word	0x3401e8a7
3401abdc:	3401e8b3 	.word	0x3401e8b3
3401abe0:	3401e8d0 	.word	0x3401e8d0
3401abe4:	3401e8e2 	.word	0x3401e8e2
3401abe8:	3401e8f3 	.word	0x3401e8f3
3401abec:	3401e905 	.word	0x3401e905
3401abf0:	3401e911 	.word	0x3401e911
3401abf4:	3401e929 	.word	0x3401e929
3401abf8:	3401e935 	.word	0x3401e935
3401abfc:	3401e947 	.word	0x3401e947
3401ac00:	3401e956 	.word	0x3401e956
3401ac04:	3401e966 	.word	0x3401e966
3401ac08:	3401e973 	.word	0x3401e973
3401ac0c:	3401e992 	.word	0x3401e992
3401ac10:	3401e9a1 	.word	0x3401e9a1
3401ac14:	3401e9b2 	.word	0x3401e9b2
3401ac18:	3401e9d6 	.word	0x3401e9d6
3401ac1c:	3401e9f4 	.word	0x3401e9f4
3401ac20:	3401ea12 	.word	0x3401ea12
3401ac24:	3401ea32 	.word	0x3401ea32
3401ac28:	3401ea49 	.word	0x3401ea49
3401ac2c:	3401ea58 	.word	0x3401ea58
3401ac30:	3401ea67 	.word	0x3401ea67
3401ac34:	3401ea7b 	.word	0x3401ea7b
3401ac38:	3401ea93 	.word	0x3401ea93
3401ac3c:	3401eaa1 	.word	0x3401eaa1
3401ac40:	3401eaae 	.word	0x3401eaae
3401ac44:	3401eac4 	.word	0x3401eac4
3401ac48:	3401ead3 	.word	0x3401ead3
3401ac4c:	3401eadf 	.word	0x3401eadf
3401ac50:	3401eb0e 	.word	0x3401eb0e
3401ac54:	3401eb1f 	.word	0x3401eb1f
3401ac58:	3401eb3a 	.word	0x3401eb3a
3401ac5c:	3401eb4d 	.word	0x3401eb4d
3401ac60:	3401eb63 	.word	0x3401eb63
3401ac64:	3401eb6c 	.word	0x3401eb6c
3401ac68:	3401eb83 	.word	0x3401eb83
3401ac6c:	3401eb8b 	.word	0x3401eb8b
3401ac70:	3401eb98 	.word	0x3401eb98
3401ac74:	3401ebad 	.word	0x3401ebad
3401ac78:	3401ebc1 	.word	0x3401ebc1
3401ac7c:	3401ebd9 	.word	0x3401ebd9
3401ac80:	3401ebe8 	.word	0x3401ebe8
3401ac84:	3401ebf9 	.word	0x3401ebf9
3401ac88:	3401ec0c 	.word	0x3401ec0c
3401ac8c:	3401ec18 	.word	0x3401ec18
3401ac90:	3401ec31 	.word	0x3401ec31
3401ac94:	3401ec45 	.word	0x3401ec45
3401ac98:	3401ec60 	.word	0x3401ec60
3401ac9c:	3401ec78 	.word	0x3401ec78
3401aca0:	3401ec92 	.word	0x3401ec92
3401aca4:	3401ec9a 	.word	0x3401ec9a
3401aca8:	3401ecca 	.word	0x3401ecca
3401acac:	3401ece9 	.word	0x3401ece9
3401acb0:	3401ed08 	.word	0x3401ed08
3401acb4:	3401ed1f 	.word	0x3401ed1f
3401acb8:	3401ed32 	.word	0x3401ed32
3401acbc:	3401ed4b 	.word	0x3401ed4b
3401acc0:	3401ed62 	.word	0x3401ed62
3401acc4:	3401ed78 	.word	0x3401ed78
3401acc8:	3401ed99 	.word	0x3401ed99
3401accc:	3401edb1 	.word	0x3401edb1
3401acd0:	3401edcd 	.word	0x3401edcd
3401acd4:	3401ede0 	.word	0x3401ede0
3401acd8:	3401edf6 	.word	0x3401edf6
3401acdc:	3401ee0a 	.word	0x3401ee0a
3401ace0:	3401ee2c 	.word	0x3401ee2c
3401ace4:	3401ee52 	.word	0x3401ee52
3401ace8:	3401ee63 	.word	0x3401ee63
3401acec:	3401e7ad 	.word	0x3401e7ad
3401acf0:	3401e7ea 	.word	0x3401e7ea

3401acf4 <strerror>:
3401acf4:	4601      	mov	r1, r0
3401acf6:	2300      	movs	r3, #0
3401acf8:	4802      	ldr	r0, [pc, #8]	@ (3401ad04 <strerror+0x10>)
3401acfa:	461a      	mov	r2, r3
3401acfc:	6800      	ldr	r0, [r0, #0]
3401acfe:	f7ff be13 	b.w	3401a928 <_strerror_r>
3401ad02:	bf00      	nop
3401ad04:	3401f254 	.word	0x3401f254

3401ad08 <_user_strerror>:
3401ad08:	2000      	movs	r0, #0
3401ad0a:	4770      	bx	lr

3401ad0c <_localeconv_r>:
3401ad0c:	4800      	ldr	r0, [pc, #0]	@ (3401ad10 <_localeconv_r+0x4>)
3401ad0e:	4770      	bx	lr
3401ad10:	3401f394 	.word	0x3401f394

3401ad14 <_close_r>:
3401ad14:	b538      	push	{r3, r4, r5, lr}
3401ad16:	2300      	movs	r3, #0
3401ad18:	4d05      	ldr	r5, [pc, #20]	@ (3401ad30 <_close_r+0x1c>)
3401ad1a:	4604      	mov	r4, r0
3401ad1c:	4608      	mov	r0, r1
3401ad1e:	602b      	str	r3, [r5, #0]
3401ad20:	f7e6 fefa 	bl	34001b18 <_close>
3401ad24:	1c43      	adds	r3, r0, #1
3401ad26:	d102      	bne.n	3401ad2e <_close_r+0x1a>
3401ad28:	682b      	ldr	r3, [r5, #0]
3401ad2a:	b103      	cbz	r3, 3401ad2e <_close_r+0x1a>
3401ad2c:	6023      	str	r3, [r4, #0]
3401ad2e:	bd38      	pop	{r3, r4, r5, pc}
3401ad30:	3401faa0 	.word	0x3401faa0

3401ad34 <_lseek_r>:
3401ad34:	b538      	push	{r3, r4, r5, lr}
3401ad36:	4604      	mov	r4, r0
3401ad38:	4d06      	ldr	r5, [pc, #24]	@ (3401ad54 <_lseek_r+0x20>)
3401ad3a:	4608      	mov	r0, r1
3401ad3c:	4611      	mov	r1, r2
3401ad3e:	2200      	movs	r2, #0
3401ad40:	602a      	str	r2, [r5, #0]
3401ad42:	461a      	mov	r2, r3
3401ad44:	f7e6 ff0f 	bl	34001b66 <_lseek>
3401ad48:	1c43      	adds	r3, r0, #1
3401ad4a:	d102      	bne.n	3401ad52 <_lseek_r+0x1e>
3401ad4c:	682b      	ldr	r3, [r5, #0]
3401ad4e:	b103      	cbz	r3, 3401ad52 <_lseek_r+0x1e>
3401ad50:	6023      	str	r3, [r4, #0]
3401ad52:	bd38      	pop	{r3, r4, r5, pc}
3401ad54:	3401faa0 	.word	0x3401faa0

3401ad58 <_read_r>:
3401ad58:	b538      	push	{r3, r4, r5, lr}
3401ad5a:	4604      	mov	r4, r0
3401ad5c:	4d06      	ldr	r5, [pc, #24]	@ (3401ad78 <_read_r+0x20>)
3401ad5e:	4608      	mov	r0, r1
3401ad60:	4611      	mov	r1, r2
3401ad62:	2200      	movs	r2, #0
3401ad64:	602a      	str	r2, [r5, #0]
3401ad66:	461a      	mov	r2, r3
3401ad68:	f7e6 feb9 	bl	34001ade <_read>
3401ad6c:	1c43      	adds	r3, r0, #1
3401ad6e:	d102      	bne.n	3401ad76 <_read_r+0x1e>
3401ad70:	682b      	ldr	r3, [r5, #0]
3401ad72:	b103      	cbz	r3, 3401ad76 <_read_r+0x1e>
3401ad74:	6023      	str	r3, [r4, #0]
3401ad76:	bd38      	pop	{r3, r4, r5, pc}
3401ad78:	3401faa0 	.word	0x3401faa0

3401ad7c <_sbrk_r>:
3401ad7c:	b538      	push	{r3, r4, r5, lr}
3401ad7e:	2300      	movs	r3, #0
3401ad80:	4d05      	ldr	r5, [pc, #20]	@ (3401ad98 <_sbrk_r+0x1c>)
3401ad82:	4604      	mov	r4, r0
3401ad84:	4608      	mov	r0, r1
3401ad86:	602b      	str	r3, [r5, #0]
3401ad88:	f001 fd08 	bl	3401c79c <_sbrk>
3401ad8c:	1c43      	adds	r3, r0, #1
3401ad8e:	d102      	bne.n	3401ad96 <_sbrk_r+0x1a>
3401ad90:	682b      	ldr	r3, [r5, #0]
3401ad92:	b103      	cbz	r3, 3401ad96 <_sbrk_r+0x1a>
3401ad94:	6023      	str	r3, [r4, #0]
3401ad96:	bd38      	pop	{r3, r4, r5, pc}
3401ad98:	3401faa0 	.word	0x3401faa0

3401ad9c <_write_r>:
3401ad9c:	b538      	push	{r3, r4, r5, lr}
3401ad9e:	4604      	mov	r4, r0
3401ada0:	4d06      	ldr	r5, [pc, #24]	@ (3401adbc <_write_r+0x20>)
3401ada2:	4608      	mov	r0, r1
3401ada4:	4611      	mov	r1, r2
3401ada6:	2200      	movs	r2, #0
3401ada8:	602a      	str	r2, [r5, #0]
3401adaa:	461a      	mov	r2, r3
3401adac:	f7e6 fa9a 	bl	340012e4 <_write>
3401adb0:	1c43      	adds	r3, r0, #1
3401adb2:	d102      	bne.n	3401adba <_write_r+0x1e>
3401adb4:	682b      	ldr	r3, [r5, #0]
3401adb6:	b103      	cbz	r3, 3401adba <_write_r+0x1e>
3401adb8:	6023      	str	r3, [r4, #0]
3401adba:	bd38      	pop	{r3, r4, r5, pc}
3401adbc:	3401faa0 	.word	0x3401faa0

3401adc0 <__errno>:
3401adc0:	4b01      	ldr	r3, [pc, #4]	@ (3401adc8 <__errno+0x8>)
3401adc2:	6818      	ldr	r0, [r3, #0]
3401adc4:	4770      	bx	lr
3401adc6:	bf00      	nop
3401adc8:	3401f254 	.word	0x3401f254

3401adcc <__libc_init_array>:
3401adcc:	b570      	push	{r4, r5, r6, lr}
3401adce:	4d0d      	ldr	r5, [pc, #52]	@ (3401ae04 <__libc_init_array+0x38>)
3401add0:	2600      	movs	r6, #0
3401add2:	4c0d      	ldr	r4, [pc, #52]	@ (3401ae08 <__libc_init_array+0x3c>)
3401add4:	1b64      	subs	r4, r4, r5
3401add6:	10a4      	asrs	r4, r4, #2
3401add8:	42a6      	cmp	r6, r4
3401adda:	d109      	bne.n	3401adf0 <__libc_init_array+0x24>
3401addc:	4d0b      	ldr	r5, [pc, #44]	@ (3401ae0c <__libc_init_array+0x40>)
3401adde:	2600      	movs	r6, #0
3401ade0:	4c0b      	ldr	r4, [pc, #44]	@ (3401ae10 <__libc_init_array+0x44>)
3401ade2:	f001 fce9 	bl	3401c7b8 <_init>
3401ade6:	1b64      	subs	r4, r4, r5
3401ade8:	10a4      	asrs	r4, r4, #2
3401adea:	42a6      	cmp	r6, r4
3401adec:	d105      	bne.n	3401adfa <__libc_init_array+0x2e>
3401adee:	bd70      	pop	{r4, r5, r6, pc}
3401adf0:	f855 3b04 	ldr.w	r3, [r5], #4
3401adf4:	3601      	adds	r6, #1
3401adf6:	4798      	blx	r3
3401adf8:	e7ee      	b.n	3401add8 <__libc_init_array+0xc>
3401adfa:	f855 3b04 	ldr.w	r3, [r5], #4
3401adfe:	3601      	adds	r6, #1
3401ae00:	4798      	blx	r3
3401ae02:	e7f2      	b.n	3401adea <__libc_init_array+0x1e>
3401ae04:	3401f184 	.word	0x3401f184
3401ae08:	3401f184 	.word	0x3401f184
3401ae0c:	3401f184 	.word	0x3401f184
3401ae10:	3401f188 	.word	0x3401f188

3401ae14 <__retarget_lock_init_recursive>:
3401ae14:	4770      	bx	lr

3401ae16 <__retarget_lock_acquire_recursive>:
3401ae16:	4770      	bx	lr

3401ae18 <__retarget_lock_release_recursive>:
3401ae18:	4770      	bx	lr

3401ae1a <memchr>:
3401ae1a:	b2c9      	uxtb	r1, r1
3401ae1c:	4603      	mov	r3, r0
3401ae1e:	4402      	add	r2, r0
3401ae20:	b510      	push	{r4, lr}
3401ae22:	4293      	cmp	r3, r2
3401ae24:	4618      	mov	r0, r3
3401ae26:	d101      	bne.n	3401ae2c <memchr+0x12>
3401ae28:	2000      	movs	r0, #0
3401ae2a:	e003      	b.n	3401ae34 <memchr+0x1a>
3401ae2c:	7804      	ldrb	r4, [r0, #0]
3401ae2e:	3301      	adds	r3, #1
3401ae30:	428c      	cmp	r4, r1
3401ae32:	d1f6      	bne.n	3401ae22 <memchr+0x8>
3401ae34:	bd10      	pop	{r4, pc}

3401ae36 <memcpy>:
3401ae36:	440a      	add	r2, r1
3401ae38:	1e43      	subs	r3, r0, #1
3401ae3a:	4291      	cmp	r1, r2
3401ae3c:	d100      	bne.n	3401ae40 <memcpy+0xa>
3401ae3e:	4770      	bx	lr
3401ae40:	b510      	push	{r4, lr}
3401ae42:	f811 4b01 	ldrb.w	r4, [r1], #1
3401ae46:	4291      	cmp	r1, r2
3401ae48:	f803 4f01 	strb.w	r4, [r3, #1]!
3401ae4c:	d1f9      	bne.n	3401ae42 <memcpy+0xc>
3401ae4e:	bd10      	pop	{r4, pc}

3401ae50 <abort>:
3401ae50:	2006      	movs	r0, #6
3401ae52:	b508      	push	{r3, lr}
3401ae54:	f001 fc30 	bl	3401c6b8 <raise>
3401ae58:	2001      	movs	r0, #1
3401ae5a:	f7e6 fe35 	bl	34001ac8 <_exit>

3401ae5e <quorem>:
3401ae5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401ae62:	6903      	ldr	r3, [r0, #16]
3401ae64:	4607      	mov	r7, r0
3401ae66:	690c      	ldr	r4, [r1, #16]
3401ae68:	42a3      	cmp	r3, r4
3401ae6a:	f2c0 8083 	blt.w	3401af74 <quorem+0x116>
3401ae6e:	3c01      	subs	r4, #1
3401ae70:	f100 0514 	add.w	r5, r0, #20
3401ae74:	f101 0814 	add.w	r8, r1, #20
3401ae78:	00a3      	lsls	r3, r4, #2
3401ae7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3401ae7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3401ae82:	9300      	str	r3, [sp, #0]
3401ae84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3401ae88:	9301      	str	r3, [sp, #4]
3401ae8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3401ae8e:	3301      	adds	r3, #1
3401ae90:	429a      	cmp	r2, r3
3401ae92:	fbb2 f6f3 	udiv	r6, r2, r3
3401ae96:	d331      	bcc.n	3401aefc <quorem+0x9e>
3401ae98:	f04f 0a00 	mov.w	sl, #0
3401ae9c:	46c4      	mov	ip, r8
3401ae9e:	46ae      	mov	lr, r5
3401aea0:	46d3      	mov	fp, sl
3401aea2:	f85c 3b04 	ldr.w	r3, [ip], #4
3401aea6:	b298      	uxth	r0, r3
3401aea8:	45e1      	cmp	r9, ip
3401aeaa:	ea4f 4313 	mov.w	r3, r3, lsr #16
3401aeae:	fb06 a000 	mla	r0, r6, r0, sl
3401aeb2:	ea4f 4210 	mov.w	r2, r0, lsr #16
3401aeb6:	b280      	uxth	r0, r0
3401aeb8:	fb06 2303 	mla	r3, r6, r3, r2
3401aebc:	f8de 2000 	ldr.w	r2, [lr]
3401aec0:	b292      	uxth	r2, r2
3401aec2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401aec6:	eba2 0200 	sub.w	r2, r2, r0
3401aeca:	b29b      	uxth	r3, r3
3401aecc:	f8de 0000 	ldr.w	r0, [lr]
3401aed0:	445a      	add	r2, fp
3401aed2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3401aed6:	b292      	uxth	r2, r2
3401aed8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3401aedc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3401aee0:	ea4f 4b23 	mov.w	fp, r3, asr #16
3401aee4:	f84e 2b04 	str.w	r2, [lr], #4
3401aee8:	d2db      	bcs.n	3401aea2 <quorem+0x44>
3401aeea:	9b00      	ldr	r3, [sp, #0]
3401aeec:	58eb      	ldr	r3, [r5, r3]
3401aeee:	b92b      	cbnz	r3, 3401aefc <quorem+0x9e>
3401aef0:	9b01      	ldr	r3, [sp, #4]
3401aef2:	3b04      	subs	r3, #4
3401aef4:	429d      	cmp	r5, r3
3401aef6:	461a      	mov	r2, r3
3401aef8:	d330      	bcc.n	3401af5c <quorem+0xfe>
3401aefa:	613c      	str	r4, [r7, #16]
3401aefc:	4638      	mov	r0, r7
3401aefe:	f001 f857 	bl	3401bfb0 <__mcmp>
3401af02:	2800      	cmp	r0, #0
3401af04:	db26      	blt.n	3401af54 <quorem+0xf6>
3401af06:	4629      	mov	r1, r5
3401af08:	2000      	movs	r0, #0
3401af0a:	f858 2b04 	ldr.w	r2, [r8], #4
3401af0e:	f8d1 c000 	ldr.w	ip, [r1]
3401af12:	fa1f fe82 	uxth.w	lr, r2
3401af16:	45c1      	cmp	r9, r8
3401af18:	fa1f f38c 	uxth.w	r3, ip
3401af1c:	ea4f 4212 	mov.w	r2, r2, lsr #16
3401af20:	eba3 030e 	sub.w	r3, r3, lr
3401af24:	4403      	add	r3, r0
3401af26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3401af2a:	b29b      	uxth	r3, r3
3401af2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3401af30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401af34:	ea4f 4022 	mov.w	r0, r2, asr #16
3401af38:	f841 3b04 	str.w	r3, [r1], #4
3401af3c:	d2e5      	bcs.n	3401af0a <quorem+0xac>
3401af3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3401af42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3401af46:	b922      	cbnz	r2, 3401af52 <quorem+0xf4>
3401af48:	3b04      	subs	r3, #4
3401af4a:	429d      	cmp	r5, r3
3401af4c:	461a      	mov	r2, r3
3401af4e:	d30b      	bcc.n	3401af68 <quorem+0x10a>
3401af50:	613c      	str	r4, [r7, #16]
3401af52:	3601      	adds	r6, #1
3401af54:	4630      	mov	r0, r6
3401af56:	b003      	add	sp, #12
3401af58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401af5c:	6812      	ldr	r2, [r2, #0]
3401af5e:	3b04      	subs	r3, #4
3401af60:	2a00      	cmp	r2, #0
3401af62:	d1ca      	bne.n	3401aefa <quorem+0x9c>
3401af64:	3c01      	subs	r4, #1
3401af66:	e7c5      	b.n	3401aef4 <quorem+0x96>
3401af68:	6812      	ldr	r2, [r2, #0]
3401af6a:	3b04      	subs	r3, #4
3401af6c:	2a00      	cmp	r2, #0
3401af6e:	d1ef      	bne.n	3401af50 <quorem+0xf2>
3401af70:	3c01      	subs	r4, #1
3401af72:	e7ea      	b.n	3401af4a <quorem+0xec>
3401af74:	2000      	movs	r0, #0
3401af76:	e7ee      	b.n	3401af56 <quorem+0xf8>

3401af78 <_dtoa_r>:
3401af78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401af7c:	69c7      	ldr	r7, [r0, #28]
3401af7e:	4681      	mov	r9, r0
3401af80:	ed2d 8b02 	vpush	{d8}
3401af84:	b091      	sub	sp, #68	@ 0x44
3401af86:	ec55 4b10 	vmov	r4, r5, d0
3401af8a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3401af8c:	9107      	str	r1, [sp, #28]
3401af8e:	9209      	str	r2, [sp, #36]	@ 0x24
3401af90:	930d      	str	r3, [sp, #52]	@ 0x34
3401af92:	ed8d 0b02 	vstr	d0, [sp, #8]
3401af96:	b97f      	cbnz	r7, 3401afb8 <_dtoa_r+0x40>
3401af98:	2010      	movs	r0, #16
3401af9a:	f7fe fdb1 	bl	34019b00 <malloc>
3401af9e:	4602      	mov	r2, r0
3401afa0:	f8c9 001c 	str.w	r0, [r9, #28]
3401afa4:	b920      	cbnz	r0, 3401afb0 <_dtoa_r+0x38>
3401afa6:	4ba0      	ldr	r3, [pc, #640]	@ (3401b228 <_dtoa_r+0x2b0>)
3401afa8:	21ef      	movs	r1, #239	@ 0xef
3401afaa:	48a0      	ldr	r0, [pc, #640]	@ (3401b22c <_dtoa_r+0x2b4>)
3401afac:	f7fe fd8a 	bl	34019ac4 <__assert_func>
3401afb0:	e9c0 7701 	strd	r7, r7, [r0, #4]
3401afb4:	6007      	str	r7, [r0, #0]
3401afb6:	60c7      	str	r7, [r0, #12]
3401afb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
3401afbc:	6819      	ldr	r1, [r3, #0]
3401afbe:	b159      	cbz	r1, 3401afd8 <_dtoa_r+0x60>
3401afc0:	685a      	ldr	r2, [r3, #4]
3401afc2:	2301      	movs	r3, #1
3401afc4:	4648      	mov	r0, r9
3401afc6:	4093      	lsls	r3, r2
3401afc8:	604a      	str	r2, [r1, #4]
3401afca:	608b      	str	r3, [r1, #8]
3401afcc:	f000 fdb4 	bl	3401bb38 <_Bfree>
3401afd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
3401afd4:	2200      	movs	r2, #0
3401afd6:	601a      	str	r2, [r3, #0]
3401afd8:	1e2b      	subs	r3, r5, #0
3401afda:	bfb7      	itett	lt
3401afdc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3401afe0:	2300      	movge	r3, #0
3401afe2:	2201      	movlt	r2, #1
3401afe4:	9303      	strlt	r3, [sp, #12]
3401afe6:	bfac      	ite	ge
3401afe8:	6033      	strge	r3, [r6, #0]
3401afea:	6032      	strlt	r2, [r6, #0]
3401afec:	4b90      	ldr	r3, [pc, #576]	@ (3401b230 <_dtoa_r+0x2b8>)
3401afee:	9e03      	ldr	r6, [sp, #12]
3401aff0:	43b3      	bics	r3, r6
3401aff2:	d110      	bne.n	3401b016 <_dtoa_r+0x9e>
3401aff4:	f242 730f 	movw	r3, #9999	@ 0x270f
3401aff8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401affa:	6013      	str	r3, [r2, #0]
3401affc:	f3c6 0313 	ubfx	r3, r6, #0, #20
3401b000:	4323      	orrs	r3, r4
3401b002:	f000 84de 	beq.w	3401b9c2 <_dtoa_r+0xa4a>
3401b006:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401b008:	4f8a      	ldr	r7, [pc, #552]	@ (3401b234 <_dtoa_r+0x2bc>)
3401b00a:	2b00      	cmp	r3, #0
3401b00c:	f000 84e0 	beq.w	3401b9d0 <_dtoa_r+0xa58>
3401b010:	1cfb      	adds	r3, r7, #3
3401b012:	f000 bcdb 	b.w	3401b9cc <_dtoa_r+0xa54>
3401b016:	ed9d 8b02 	vldr	d8, [sp, #8]
3401b01a:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401b01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b022:	d10a      	bne.n	3401b03a <_dtoa_r+0xc2>
3401b024:	2301      	movs	r3, #1
3401b026:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401b028:	6013      	str	r3, [r2, #0]
3401b02a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401b02c:	b113      	cbz	r3, 3401b034 <_dtoa_r+0xbc>
3401b02e:	4b82      	ldr	r3, [pc, #520]	@ (3401b238 <_dtoa_r+0x2c0>)
3401b030:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3401b032:	6013      	str	r3, [r2, #0]
3401b034:	4f81      	ldr	r7, [pc, #516]	@ (3401b23c <_dtoa_r+0x2c4>)
3401b036:	f000 bccb 	b.w	3401b9d0 <_dtoa_r+0xa58>
3401b03a:	aa0e      	add	r2, sp, #56	@ 0x38
3401b03c:	eeb0 0b48 	vmov.f64	d0, d8
3401b040:	a90f      	add	r1, sp, #60	@ 0x3c
3401b042:	4648      	mov	r0, r9
3401b044:	f001 f868 	bl	3401c118 <__d2b>
3401b048:	f3c6 530a 	ubfx	r3, r6, #20, #11
3401b04c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401b04e:	9001      	str	r0, [sp, #4]
3401b050:	2b00      	cmp	r3, #0
3401b052:	d045      	beq.n	3401b0e0 <_dtoa_r+0x168>
3401b054:	ee18 1a90 	vmov	r1, s17
3401b058:	eeb0 7b48 	vmov.f64	d7, d8
3401b05c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3401b060:	2500      	movs	r5, #0
3401b062:	f3c1 0113 	ubfx	r1, r1, #0, #20
3401b066:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3401b06a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3401b06e:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3401b072:	ee07 1a90 	vmov	s15, r1
3401b076:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3401b210 <_dtoa_r+0x298>
3401b07a:	ee37 7b46 	vsub.f64	d7, d7, d6
3401b07e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3401b218 <_dtoa_r+0x2a0>
3401b082:	eea7 6b05 	vfma.f64	d6, d7, d5
3401b086:	ee07 3a90 	vmov	s15, r3
3401b08a:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3401b08e:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3401b220 <_dtoa_r+0x2a8>
3401b092:	eeb0 7b46 	vmov.f64	d7, d6
3401b096:	eea4 7b05 	vfma.f64	d7, d4, d5
3401b09a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3401b09e:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3401b0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b0a6:	ee16 8a90 	vmov	r8, s13
3401b0aa:	d508      	bpl.n	3401b0be <_dtoa_r+0x146>
3401b0ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3401b0b0:	eeb4 6b47 	vcmp.f64	d6, d7
3401b0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b0b8:	bf18      	it	ne
3401b0ba:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3401b0be:	f1b8 0f16 	cmp.w	r8, #22
3401b0c2:	d82d      	bhi.n	3401b120 <_dtoa_r+0x1a8>
3401b0c4:	495e      	ldr	r1, [pc, #376]	@ (3401b240 <_dtoa_r+0x2c8>)
3401b0c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3401b0ca:	ed91 7b00 	vldr	d7, [r1]
3401b0ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
3401b0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b0d6:	d501      	bpl.n	3401b0dc <_dtoa_r+0x164>
3401b0d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3401b0dc:	2100      	movs	r1, #0
3401b0de:	e020      	b.n	3401b122 <_dtoa_r+0x1aa>
3401b0e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3401b0e2:	2501      	movs	r5, #1
3401b0e4:	4413      	add	r3, r2
3401b0e6:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3401b0ea:	2920      	cmp	r1, #32
3401b0ec:	bfc9      	itett	gt
3401b0ee:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3401b0f2:	f1c1 0120 	rsble	r1, r1, #32
3401b0f6:	408e      	lslgt	r6, r1
3401b0f8:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3401b0fc:	bfd8      	it	le
3401b0fe:	fa04 f101 	lslle.w	r1, r4, r1
3401b102:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3401b106:	bfc4      	itt	gt
3401b108:	fa24 f101 	lsrgt.w	r1, r4, r1
3401b10c:	4331      	orrgt	r1, r6
3401b10e:	ee07 1a90 	vmov	s15, r1
3401b112:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3401b116:	ee17 1a90 	vmov	r1, s15
3401b11a:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3401b11e:	e7a6      	b.n	3401b06e <_dtoa_r+0xf6>
3401b120:	2101      	movs	r1, #1
3401b122:	1ad2      	subs	r2, r2, r3
3401b124:	910c      	str	r1, [sp, #48]	@ 0x30
3401b126:	1e53      	subs	r3, r2, #1
3401b128:	9306      	str	r3, [sp, #24]
3401b12a:	bf49      	itett	mi
3401b12c:	f1c2 0301 	rsbmi	r3, r2, #1
3401b130:	2300      	movpl	r3, #0
3401b132:	9305      	strmi	r3, [sp, #20]
3401b134:	2300      	movmi	r3, #0
3401b136:	bf54      	ite	pl
3401b138:	9305      	strpl	r3, [sp, #20]
3401b13a:	9306      	strmi	r3, [sp, #24]
3401b13c:	f1b8 0f00 	cmp.w	r8, #0
3401b140:	db16      	blt.n	3401b170 <_dtoa_r+0x1f8>
3401b142:	9b06      	ldr	r3, [sp, #24]
3401b144:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3401b148:	4443      	add	r3, r8
3401b14a:	9306      	str	r3, [sp, #24]
3401b14c:	2300      	movs	r3, #0
3401b14e:	9a07      	ldr	r2, [sp, #28]
3401b150:	2a09      	cmp	r2, #9
3401b152:	d847      	bhi.n	3401b1e4 <_dtoa_r+0x26c>
3401b154:	2a05      	cmp	r2, #5
3401b156:	bfc5      	ittet	gt
3401b158:	3a04      	subgt	r2, #4
3401b15a:	2400      	movgt	r4, #0
3401b15c:	2401      	movle	r4, #1
3401b15e:	9207      	strgt	r2, [sp, #28]
3401b160:	9a07      	ldr	r2, [sp, #28]
3401b162:	3a02      	subs	r2, #2
3401b164:	2a03      	cmp	r2, #3
3401b166:	d848      	bhi.n	3401b1fa <_dtoa_r+0x282>
3401b168:	e8df f002 	tbb	[pc, r2]
3401b16c:	3a2c2e0b 	.word	0x3a2c2e0b
3401b170:	9b05      	ldr	r3, [sp, #20]
3401b172:	2200      	movs	r2, #0
3401b174:	eba3 0308 	sub.w	r3, r3, r8
3401b178:	920a      	str	r2, [sp, #40]	@ 0x28
3401b17a:	9305      	str	r3, [sp, #20]
3401b17c:	f1c8 0300 	rsb	r3, r8, #0
3401b180:	e7e5      	b.n	3401b14e <_dtoa_r+0x1d6>
3401b182:	2200      	movs	r2, #0
3401b184:	9208      	str	r2, [sp, #32]
3401b186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401b188:	2a00      	cmp	r2, #0
3401b18a:	dc39      	bgt.n	3401b200 <_dtoa_r+0x288>
3401b18c:	f04f 0b01 	mov.w	fp, #1
3401b190:	46da      	mov	sl, fp
3401b192:	465a      	mov	r2, fp
3401b194:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3401b198:	f8d9 701c 	ldr.w	r7, [r9, #28]
3401b19c:	2100      	movs	r1, #0
3401b19e:	2004      	movs	r0, #4
3401b1a0:	f100 0614 	add.w	r6, r0, #20
3401b1a4:	4296      	cmp	r6, r2
3401b1a6:	d930      	bls.n	3401b20a <_dtoa_r+0x292>
3401b1a8:	6079      	str	r1, [r7, #4]
3401b1aa:	4648      	mov	r0, r9
3401b1ac:	9304      	str	r3, [sp, #16]
3401b1ae:	f000 fc83 	bl	3401bab8 <_Balloc>
3401b1b2:	9b04      	ldr	r3, [sp, #16]
3401b1b4:	4607      	mov	r7, r0
3401b1b6:	2800      	cmp	r0, #0
3401b1b8:	d146      	bne.n	3401b248 <_dtoa_r+0x2d0>
3401b1ba:	4b22      	ldr	r3, [pc, #136]	@ (3401b244 <_dtoa_r+0x2cc>)
3401b1bc:	4602      	mov	r2, r0
3401b1be:	f240 11af 	movw	r1, #431	@ 0x1af
3401b1c2:	e6f2      	b.n	3401afaa <_dtoa_r+0x32>
3401b1c4:	2201      	movs	r2, #1
3401b1c6:	e7dd      	b.n	3401b184 <_dtoa_r+0x20c>
3401b1c8:	2200      	movs	r2, #0
3401b1ca:	9208      	str	r2, [sp, #32]
3401b1cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401b1ce:	eb08 0b02 	add.w	fp, r8, r2
3401b1d2:	f10b 0a01 	add.w	sl, fp, #1
3401b1d6:	4652      	mov	r2, sl
3401b1d8:	2a01      	cmp	r2, #1
3401b1da:	bfb8      	it	lt
3401b1dc:	2201      	movlt	r2, #1
3401b1de:	e7db      	b.n	3401b198 <_dtoa_r+0x220>
3401b1e0:	2201      	movs	r2, #1
3401b1e2:	e7f2      	b.n	3401b1ca <_dtoa_r+0x252>
3401b1e4:	2401      	movs	r4, #1
3401b1e6:	2200      	movs	r2, #0
3401b1e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
3401b1ec:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3401b1f0:	2100      	movs	r1, #0
3401b1f2:	2212      	movs	r2, #18
3401b1f4:	46da      	mov	sl, fp
3401b1f6:	9109      	str	r1, [sp, #36]	@ 0x24
3401b1f8:	e7ce      	b.n	3401b198 <_dtoa_r+0x220>
3401b1fa:	2201      	movs	r2, #1
3401b1fc:	9208      	str	r2, [sp, #32]
3401b1fe:	e7f5      	b.n	3401b1ec <_dtoa_r+0x274>
3401b200:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
3401b204:	46da      	mov	sl, fp
3401b206:	465a      	mov	r2, fp
3401b208:	e7c6      	b.n	3401b198 <_dtoa_r+0x220>
3401b20a:	3101      	adds	r1, #1
3401b20c:	0040      	lsls	r0, r0, #1
3401b20e:	e7c7      	b.n	3401b1a0 <_dtoa_r+0x228>
3401b210:	636f4361 	.word	0x636f4361
3401b214:	3fd287a7 	.word	0x3fd287a7
3401b218:	8b60c8b3 	.word	0x8b60c8b3
3401b21c:	3fc68a28 	.word	0x3fc68a28
3401b220:	509f79fb 	.word	0x509f79fb
3401b224:	3fd34413 	.word	0x3fd34413
3401b228:	3401ee85 	.word	0x3401ee85
3401b22c:	3401ee9c 	.word	0x3401ee9c
3401b230:	7ff00000 	.word	0x7ff00000
3401b234:	3401ee81 	.word	0x3401ee81
3401b238:	3401e7bf 	.word	0x3401e7bf
3401b23c:	3401e7be 	.word	0x3401e7be
3401b240:	3401ef98 	.word	0x3401ef98
3401b244:	3401eef4 	.word	0x3401eef4
3401b248:	f8d9 201c 	ldr.w	r2, [r9, #28]
3401b24c:	f1ba 0f0e 	cmp.w	sl, #14
3401b250:	6010      	str	r0, [r2, #0]
3401b252:	d86f      	bhi.n	3401b334 <_dtoa_r+0x3bc>
3401b254:	2c00      	cmp	r4, #0
3401b256:	d06d      	beq.n	3401b334 <_dtoa_r+0x3bc>
3401b258:	f1b8 0f00 	cmp.w	r8, #0
3401b25c:	f340 80c2 	ble.w	3401b3e4 <_dtoa_r+0x46c>
3401b260:	f008 010f 	and.w	r1, r8, #15
3401b264:	4ac9      	ldr	r2, [pc, #804]	@ (3401b58c <_dtoa_r+0x614>)
3401b266:	f418 7f80 	tst.w	r8, #256	@ 0x100
3401b26a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3401b26e:	ea4f 1128 	mov.w	r1, r8, asr #4
3401b272:	ed92 7b00 	vldr	d7, [r2]
3401b276:	f000 80a9 	beq.w	3401b3cc <_dtoa_r+0x454>
3401b27a:	4ac5      	ldr	r2, [pc, #788]	@ (3401b590 <_dtoa_r+0x618>)
3401b27c:	f001 010f 	and.w	r1, r1, #15
3401b280:	ed92 6b08 	vldr	d6, [r2, #32]
3401b284:	2203      	movs	r2, #3
3401b286:	ee88 6b06 	vdiv.f64	d6, d8, d6
3401b28a:	ed8d 6b02 	vstr	d6, [sp, #8]
3401b28e:	48c0      	ldr	r0, [pc, #768]	@ (3401b590 <_dtoa_r+0x618>)
3401b290:	2900      	cmp	r1, #0
3401b292:	f040 809d 	bne.w	3401b3d0 <_dtoa_r+0x458>
3401b296:	ed9d 6b02 	vldr	d6, [sp, #8]
3401b29a:	ee86 7b07 	vdiv.f64	d7, d6, d7
3401b29e:	ed8d 7b02 	vstr	d7, [sp, #8]
3401b2a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
3401b2a4:	ed9d 7b02 	vldr	d7, [sp, #8]
3401b2a8:	2900      	cmp	r1, #0
3401b2aa:	f000 80c1 	beq.w	3401b430 <_dtoa_r+0x4b8>
3401b2ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3401b2b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401b2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b2ba:	f140 80b9 	bpl.w	3401b430 <_dtoa_r+0x4b8>
3401b2be:	f1ba 0f00 	cmp.w	sl, #0
3401b2c2:	f000 80b5 	beq.w	3401b430 <_dtoa_r+0x4b8>
3401b2c6:	f1bb 0f00 	cmp.w	fp, #0
3401b2ca:	dd31      	ble.n	3401b330 <_dtoa_r+0x3b8>
3401b2cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3401b2d0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3401b2d4:	3201      	adds	r2, #1
3401b2d6:	465c      	mov	r4, fp
3401b2d8:	9104      	str	r1, [sp, #16]
3401b2da:	ee27 7b06 	vmul.f64	d7, d7, d6
3401b2de:	ed8d 7b02 	vstr	d7, [sp, #8]
3401b2e2:	ee07 2a90 	vmov	s15, r2
3401b2e6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3401b2ea:	ed9d 6b02 	vldr	d6, [sp, #8]
3401b2ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3401b2f2:	eea7 5b06 	vfma.f64	d5, d7, d6
3401b2f6:	ee15 2a90 	vmov	r2, s11
3401b2fa:	ec51 0b15 	vmov	r0, r1, d5
3401b2fe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3401b302:	2c00      	cmp	r4, #0
3401b304:	f040 8098 	bne.w	3401b438 <_dtoa_r+0x4c0>
3401b308:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401b30c:	ee36 6b47 	vsub.f64	d6, d6, d7
3401b310:	ec41 0b17 	vmov	d7, r0, r1
3401b314:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401b318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b31c:	f300 8261 	bgt.w	3401b7e2 <_dtoa_r+0x86a>
3401b320:	eeb1 7b47 	vneg.f64	d7, d7
3401b324:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401b328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b32c:	f100 80f5 	bmi.w	3401b51a <_dtoa_r+0x5a2>
3401b330:	ed8d 8b02 	vstr	d8, [sp, #8]
3401b334:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3401b336:	2a00      	cmp	r2, #0
3401b338:	f2c0 812c 	blt.w	3401b594 <_dtoa_r+0x61c>
3401b33c:	f1b8 0f0e 	cmp.w	r8, #14
3401b340:	f300 8128 	bgt.w	3401b594 <_dtoa_r+0x61c>
3401b344:	4b91      	ldr	r3, [pc, #580]	@ (3401b58c <_dtoa_r+0x614>)
3401b346:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3401b34a:	ed93 6b00 	vldr	d6, [r3]
3401b34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b350:	2b00      	cmp	r3, #0
3401b352:	da03      	bge.n	3401b35c <_dtoa_r+0x3e4>
3401b354:	f1ba 0f00 	cmp.w	sl, #0
3401b358:	f340 80d2 	ble.w	3401b500 <_dtoa_r+0x588>
3401b35c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3401b360:	463e      	mov	r6, r7
3401b362:	ed9d 7b02 	vldr	d7, [sp, #8]
3401b366:	ee87 5b06 	vdiv.f64	d5, d7, d6
3401b36a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3401b36e:	ee15 3a10 	vmov	r3, s10
3401b372:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3401b376:	3330      	adds	r3, #48	@ 0x30
3401b378:	eea3 7b46 	vfms.f64	d7, d3, d6
3401b37c:	f806 3b01 	strb.w	r3, [r6], #1
3401b380:	1bf3      	subs	r3, r6, r7
3401b382:	459a      	cmp	sl, r3
3401b384:	f040 80f8 	bne.w	3401b578 <_dtoa_r+0x600>
3401b388:	ee37 7b07 	vadd.f64	d7, d7, d7
3401b38c:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401b390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b394:	f300 80dd 	bgt.w	3401b552 <_dtoa_r+0x5da>
3401b398:	eeb4 7b46 	vcmp.f64	d7, d6
3401b39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b3a0:	d104      	bne.n	3401b3ac <_dtoa_r+0x434>
3401b3a2:	ee15 3a10 	vmov	r3, s10
3401b3a6:	07db      	lsls	r3, r3, #31
3401b3a8:	f100 80d3 	bmi.w	3401b552 <_dtoa_r+0x5da>
3401b3ac:	9901      	ldr	r1, [sp, #4]
3401b3ae:	4648      	mov	r0, r9
3401b3b0:	f000 fbc2 	bl	3401bb38 <_Bfree>
3401b3b4:	2300      	movs	r3, #0
3401b3b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401b3b8:	7033      	strb	r3, [r6, #0]
3401b3ba:	f108 0301 	add.w	r3, r8, #1
3401b3be:	6013      	str	r3, [r2, #0]
3401b3c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401b3c2:	2b00      	cmp	r3, #0
3401b3c4:	f000 8304 	beq.w	3401b9d0 <_dtoa_r+0xa58>
3401b3c8:	601e      	str	r6, [r3, #0]
3401b3ca:	e301      	b.n	3401b9d0 <_dtoa_r+0xa58>
3401b3cc:	2202      	movs	r2, #2
3401b3ce:	e75e      	b.n	3401b28e <_dtoa_r+0x316>
3401b3d0:	07cc      	lsls	r4, r1, #31
3401b3d2:	d504      	bpl.n	3401b3de <_dtoa_r+0x466>
3401b3d4:	3201      	adds	r2, #1
3401b3d6:	ed90 6b00 	vldr	d6, [r0]
3401b3da:	ee27 7b06 	vmul.f64	d7, d7, d6
3401b3de:	1049      	asrs	r1, r1, #1
3401b3e0:	3008      	adds	r0, #8
3401b3e2:	e755      	b.n	3401b290 <_dtoa_r+0x318>
3401b3e4:	d022      	beq.n	3401b42c <_dtoa_r+0x4b4>
3401b3e6:	f1c8 0100 	rsb	r1, r8, #0
3401b3ea:	4a68      	ldr	r2, [pc, #416]	@ (3401b58c <_dtoa_r+0x614>)
3401b3ec:	2400      	movs	r4, #0
3401b3ee:	f001 000f 	and.w	r0, r1, #15
3401b3f2:	1109      	asrs	r1, r1, #4
3401b3f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3401b3f8:	4865      	ldr	r0, [pc, #404]	@ (3401b590 <_dtoa_r+0x618>)
3401b3fa:	ed92 7b00 	vldr	d7, [r2]
3401b3fe:	2202      	movs	r2, #2
3401b400:	ee28 7b07 	vmul.f64	d7, d8, d7
3401b404:	ed8d 7b02 	vstr	d7, [sp, #8]
3401b408:	b929      	cbnz	r1, 3401b416 <_dtoa_r+0x49e>
3401b40a:	2c00      	cmp	r4, #0
3401b40c:	f43f af49 	beq.w	3401b2a2 <_dtoa_r+0x32a>
3401b410:	ed8d 7b02 	vstr	d7, [sp, #8]
3401b414:	e745      	b.n	3401b2a2 <_dtoa_r+0x32a>
3401b416:	07ce      	lsls	r6, r1, #31
3401b418:	d505      	bpl.n	3401b426 <_dtoa_r+0x4ae>
3401b41a:	3201      	adds	r2, #1
3401b41c:	2401      	movs	r4, #1
3401b41e:	ed90 6b00 	vldr	d6, [r0]
3401b422:	ee27 7b06 	vmul.f64	d7, d7, d6
3401b426:	1049      	asrs	r1, r1, #1
3401b428:	3008      	adds	r0, #8
3401b42a:	e7ed      	b.n	3401b408 <_dtoa_r+0x490>
3401b42c:	2202      	movs	r2, #2
3401b42e:	e738      	b.n	3401b2a2 <_dtoa_r+0x32a>
3401b430:	4654      	mov	r4, sl
3401b432:	f8cd 8010 	str.w	r8, [sp, #16]
3401b436:	e754      	b.n	3401b2e2 <_dtoa_r+0x36a>
3401b438:	4a54      	ldr	r2, [pc, #336]	@ (3401b58c <_dtoa_r+0x614>)
3401b43a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3401b43e:	443c      	add	r4, r7
3401b440:	ed12 4b02 	vldr	d4, [r2, #-8]
3401b444:	9a08      	ldr	r2, [sp, #32]
3401b446:	ec41 0b17 	vmov	d7, r0, r1
3401b44a:	b34a      	cbz	r2, 3401b4a0 <_dtoa_r+0x528>
3401b44c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3401b450:	463e      	mov	r6, r7
3401b452:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3401b456:	ee83 5b04 	vdiv.f64	d5, d3, d4
3401b45a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3401b45e:	ee35 7b47 	vsub.f64	d7, d5, d7
3401b462:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401b466:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401b46a:	ee14 2a90 	vmov	r2, s9
3401b46e:	3230      	adds	r2, #48	@ 0x30
3401b470:	ee36 6b45 	vsub.f64	d6, d6, d5
3401b474:	f806 2b01 	strb.w	r2, [r6], #1
3401b478:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401b47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b480:	d438      	bmi.n	3401b4f4 <_dtoa_r+0x57c>
3401b482:	ee32 5b46 	vsub.f64	d5, d2, d6
3401b486:	eeb4 5bc7 	vcmpe.f64	d5, d7
3401b48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b48e:	d462      	bmi.n	3401b556 <_dtoa_r+0x5de>
3401b490:	42a6      	cmp	r6, r4
3401b492:	f43f af4d 	beq.w	3401b330 <_dtoa_r+0x3b8>
3401b496:	ee27 7b03 	vmul.f64	d7, d7, d3
3401b49a:	ee26 6b03 	vmul.f64	d6, d6, d3
3401b49e:	e7e0      	b.n	3401b462 <_dtoa_r+0x4ea>
3401b4a0:	ee27 7b04 	vmul.f64	d7, d7, d4
3401b4a4:	4621      	mov	r1, r4
3401b4a6:	463e      	mov	r6, r7
3401b4a8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3401b4ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401b4b0:	ee14 2a90 	vmov	r2, s9
3401b4b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401b4b8:	3230      	adds	r2, #48	@ 0x30
3401b4ba:	ee36 6b45 	vsub.f64	d6, d6, d5
3401b4be:	f806 2b01 	strb.w	r2, [r6], #1
3401b4c2:	42a6      	cmp	r6, r4
3401b4c4:	d119      	bne.n	3401b4fa <_dtoa_r+0x582>
3401b4c6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3401b4ca:	ee37 4b05 	vadd.f64	d4, d7, d5
3401b4ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
3401b4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b4d6:	dc3e      	bgt.n	3401b556 <_dtoa_r+0x5de>
3401b4d8:	ee35 5b47 	vsub.f64	d5, d5, d7
3401b4dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
3401b4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b4e4:	f57f af24 	bpl.w	3401b330 <_dtoa_r+0x3b8>
3401b4e8:	460e      	mov	r6, r1
3401b4ea:	3901      	subs	r1, #1
3401b4ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3401b4f0:	2b30      	cmp	r3, #48	@ 0x30
3401b4f2:	d0f9      	beq.n	3401b4e8 <_dtoa_r+0x570>
3401b4f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
3401b4f8:	e758      	b.n	3401b3ac <_dtoa_r+0x434>
3401b4fa:	ee26 6b03 	vmul.f64	d6, d6, d3
3401b4fe:	e7d5      	b.n	3401b4ac <_dtoa_r+0x534>
3401b500:	d10b      	bne.n	3401b51a <_dtoa_r+0x5a2>
3401b502:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401b506:	ee26 6b07 	vmul.f64	d6, d6, d7
3401b50a:	ed9d 7b02 	vldr	d7, [sp, #8]
3401b50e:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401b512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b516:	f2c0 8161 	blt.w	3401b7dc <_dtoa_r+0x864>
3401b51a:	2400      	movs	r4, #0
3401b51c:	4625      	mov	r5, r4
3401b51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b520:	463e      	mov	r6, r7
3401b522:	43db      	mvns	r3, r3
3401b524:	9304      	str	r3, [sp, #16]
3401b526:	f04f 0800 	mov.w	r8, #0
3401b52a:	4621      	mov	r1, r4
3401b52c:	4648      	mov	r0, r9
3401b52e:	f000 fb03 	bl	3401bb38 <_Bfree>
3401b532:	2d00      	cmp	r5, #0
3401b534:	d0de      	beq.n	3401b4f4 <_dtoa_r+0x57c>
3401b536:	f1b8 0f00 	cmp.w	r8, #0
3401b53a:	d005      	beq.n	3401b548 <_dtoa_r+0x5d0>
3401b53c:	45a8      	cmp	r8, r5
3401b53e:	d003      	beq.n	3401b548 <_dtoa_r+0x5d0>
3401b540:	4641      	mov	r1, r8
3401b542:	4648      	mov	r0, r9
3401b544:	f000 faf8 	bl	3401bb38 <_Bfree>
3401b548:	4629      	mov	r1, r5
3401b54a:	4648      	mov	r0, r9
3401b54c:	f000 faf4 	bl	3401bb38 <_Bfree>
3401b550:	e7d0      	b.n	3401b4f4 <_dtoa_r+0x57c>
3401b552:	f8cd 8010 	str.w	r8, [sp, #16]
3401b556:	4633      	mov	r3, r6
3401b558:	461e      	mov	r6, r3
3401b55a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401b55e:	2a39      	cmp	r2, #57	@ 0x39
3401b560:	d106      	bne.n	3401b570 <_dtoa_r+0x5f8>
3401b562:	429f      	cmp	r7, r3
3401b564:	d1f8      	bne.n	3401b558 <_dtoa_r+0x5e0>
3401b566:	9a04      	ldr	r2, [sp, #16]
3401b568:	3201      	adds	r2, #1
3401b56a:	9204      	str	r2, [sp, #16]
3401b56c:	2230      	movs	r2, #48	@ 0x30
3401b56e:	703a      	strb	r2, [r7, #0]
3401b570:	781a      	ldrb	r2, [r3, #0]
3401b572:	3201      	adds	r2, #1
3401b574:	701a      	strb	r2, [r3, #0]
3401b576:	e7bd      	b.n	3401b4f4 <_dtoa_r+0x57c>
3401b578:	ee27 7b04 	vmul.f64	d7, d7, d4
3401b57c:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401b580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b584:	f47f aeef 	bne.w	3401b366 <_dtoa_r+0x3ee>
3401b588:	e710      	b.n	3401b3ac <_dtoa_r+0x434>
3401b58a:	bf00      	nop
3401b58c:	3401ef98 	.word	0x3401ef98
3401b590:	3401ef70 	.word	0x3401ef70
3401b594:	9908      	ldr	r1, [sp, #32]
3401b596:	2900      	cmp	r1, #0
3401b598:	f000 80e3 	beq.w	3401b762 <_dtoa_r+0x7ea>
3401b59c:	9907      	ldr	r1, [sp, #28]
3401b59e:	2901      	cmp	r1, #1
3401b5a0:	f300 80c8 	bgt.w	3401b734 <_dtoa_r+0x7bc>
3401b5a4:	2d00      	cmp	r5, #0
3401b5a6:	f000 80c1 	beq.w	3401b72c <_dtoa_r+0x7b4>
3401b5aa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3401b5ae:	461c      	mov	r4, r3
3401b5b0:	9e05      	ldr	r6, [sp, #20]
3401b5b2:	9304      	str	r3, [sp, #16]
3401b5b4:	2101      	movs	r1, #1
3401b5b6:	9b05      	ldr	r3, [sp, #20]
3401b5b8:	4648      	mov	r0, r9
3401b5ba:	4413      	add	r3, r2
3401b5bc:	9305      	str	r3, [sp, #20]
3401b5be:	9b06      	ldr	r3, [sp, #24]
3401b5c0:	4413      	add	r3, r2
3401b5c2:	9306      	str	r3, [sp, #24]
3401b5c4:	f000 fb6e 	bl	3401bca4 <__i2b>
3401b5c8:	9b04      	ldr	r3, [sp, #16]
3401b5ca:	4605      	mov	r5, r0
3401b5cc:	b166      	cbz	r6, 3401b5e8 <_dtoa_r+0x670>
3401b5ce:	9a06      	ldr	r2, [sp, #24]
3401b5d0:	2a00      	cmp	r2, #0
3401b5d2:	dd09      	ble.n	3401b5e8 <_dtoa_r+0x670>
3401b5d4:	42b2      	cmp	r2, r6
3401b5d6:	9905      	ldr	r1, [sp, #20]
3401b5d8:	bfa8      	it	ge
3401b5da:	4632      	movge	r2, r6
3401b5dc:	1a89      	subs	r1, r1, r2
3401b5de:	1ab6      	subs	r6, r6, r2
3401b5e0:	9105      	str	r1, [sp, #20]
3401b5e2:	9906      	ldr	r1, [sp, #24]
3401b5e4:	1a8a      	subs	r2, r1, r2
3401b5e6:	9206      	str	r2, [sp, #24]
3401b5e8:	b1fb      	cbz	r3, 3401b62a <_dtoa_r+0x6b2>
3401b5ea:	9a08      	ldr	r2, [sp, #32]
3401b5ec:	2a00      	cmp	r2, #0
3401b5ee:	f000 80bc 	beq.w	3401b76a <_dtoa_r+0x7f2>
3401b5f2:	b19c      	cbz	r4, 3401b61c <_dtoa_r+0x6a4>
3401b5f4:	4629      	mov	r1, r5
3401b5f6:	4622      	mov	r2, r4
3401b5f8:	4648      	mov	r0, r9
3401b5fa:	930b      	str	r3, [sp, #44]	@ 0x2c
3401b5fc:	f000 fc12 	bl	3401be24 <__pow5mult>
3401b600:	9a01      	ldr	r2, [sp, #4]
3401b602:	4601      	mov	r1, r0
3401b604:	4605      	mov	r5, r0
3401b606:	4648      	mov	r0, r9
3401b608:	f000 fb62 	bl	3401bcd0 <__multiply>
3401b60c:	9901      	ldr	r1, [sp, #4]
3401b60e:	9004      	str	r0, [sp, #16]
3401b610:	4648      	mov	r0, r9
3401b612:	f000 fa91 	bl	3401bb38 <_Bfree>
3401b616:	9a04      	ldr	r2, [sp, #16]
3401b618:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401b61a:	9201      	str	r2, [sp, #4]
3401b61c:	1b1a      	subs	r2, r3, r4
3401b61e:	d004      	beq.n	3401b62a <_dtoa_r+0x6b2>
3401b620:	9901      	ldr	r1, [sp, #4]
3401b622:	4648      	mov	r0, r9
3401b624:	f000 fbfe 	bl	3401be24 <__pow5mult>
3401b628:	9001      	str	r0, [sp, #4]
3401b62a:	2101      	movs	r1, #1
3401b62c:	4648      	mov	r0, r9
3401b62e:	f000 fb39 	bl	3401bca4 <__i2b>
3401b632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401b634:	4604      	mov	r4, r0
3401b636:	2b00      	cmp	r3, #0
3401b638:	f000 81d0 	beq.w	3401b9dc <_dtoa_r+0xa64>
3401b63c:	461a      	mov	r2, r3
3401b63e:	4601      	mov	r1, r0
3401b640:	4648      	mov	r0, r9
3401b642:	f000 fbef 	bl	3401be24 <__pow5mult>
3401b646:	9b07      	ldr	r3, [sp, #28]
3401b648:	4604      	mov	r4, r0
3401b64a:	2b01      	cmp	r3, #1
3401b64c:	f300 8095 	bgt.w	3401b77a <_dtoa_r+0x802>
3401b650:	9b02      	ldr	r3, [sp, #8]
3401b652:	2b00      	cmp	r3, #0
3401b654:	f040 808b 	bne.w	3401b76e <_dtoa_r+0x7f6>
3401b658:	9b03      	ldr	r3, [sp, #12]
3401b65a:	f3c3 0213 	ubfx	r2, r3, #0, #20
3401b65e:	2a00      	cmp	r2, #0
3401b660:	f040 8087 	bne.w	3401b772 <_dtoa_r+0x7fa>
3401b664:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3401b668:	0d12      	lsrs	r2, r2, #20
3401b66a:	0512      	lsls	r2, r2, #20
3401b66c:	2a00      	cmp	r2, #0
3401b66e:	f000 8082 	beq.w	3401b776 <_dtoa_r+0x7fe>
3401b672:	9b05      	ldr	r3, [sp, #20]
3401b674:	3301      	adds	r3, #1
3401b676:	9305      	str	r3, [sp, #20]
3401b678:	9b06      	ldr	r3, [sp, #24]
3401b67a:	3301      	adds	r3, #1
3401b67c:	9306      	str	r3, [sp, #24]
3401b67e:	2301      	movs	r3, #1
3401b680:	930b      	str	r3, [sp, #44]	@ 0x2c
3401b682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401b684:	2b00      	cmp	r3, #0
3401b686:	f000 81af 	beq.w	3401b9e8 <_dtoa_r+0xa70>
3401b68a:	6922      	ldr	r2, [r4, #16]
3401b68c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3401b690:	6910      	ldr	r0, [r2, #16]
3401b692:	f000 fabb 	bl	3401bc0c <__hi0bits>
3401b696:	f1c0 0020 	rsb	r0, r0, #32
3401b69a:	9b06      	ldr	r3, [sp, #24]
3401b69c:	4418      	add	r0, r3
3401b69e:	f010 001f 	ands.w	r0, r0, #31
3401b6a2:	d076      	beq.n	3401b792 <_dtoa_r+0x81a>
3401b6a4:	f1c0 0220 	rsb	r2, r0, #32
3401b6a8:	2a04      	cmp	r2, #4
3401b6aa:	dd69      	ble.n	3401b780 <_dtoa_r+0x808>
3401b6ac:	f1c0 001c 	rsb	r0, r0, #28
3401b6b0:	9b05      	ldr	r3, [sp, #20]
3401b6b2:	4403      	add	r3, r0
3401b6b4:	4406      	add	r6, r0
3401b6b6:	9305      	str	r3, [sp, #20]
3401b6b8:	9b06      	ldr	r3, [sp, #24]
3401b6ba:	4403      	add	r3, r0
3401b6bc:	9306      	str	r3, [sp, #24]
3401b6be:	9b05      	ldr	r3, [sp, #20]
3401b6c0:	2b00      	cmp	r3, #0
3401b6c2:	dd05      	ble.n	3401b6d0 <_dtoa_r+0x758>
3401b6c4:	461a      	mov	r2, r3
3401b6c6:	9901      	ldr	r1, [sp, #4]
3401b6c8:	4648      	mov	r0, r9
3401b6ca:	f000 fc05 	bl	3401bed8 <__lshift>
3401b6ce:	9001      	str	r0, [sp, #4]
3401b6d0:	9b06      	ldr	r3, [sp, #24]
3401b6d2:	2b00      	cmp	r3, #0
3401b6d4:	dd05      	ble.n	3401b6e2 <_dtoa_r+0x76a>
3401b6d6:	4621      	mov	r1, r4
3401b6d8:	461a      	mov	r2, r3
3401b6da:	4648      	mov	r0, r9
3401b6dc:	f000 fbfc 	bl	3401bed8 <__lshift>
3401b6e0:	4604      	mov	r4, r0
3401b6e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3401b6e4:	2b00      	cmp	r3, #0
3401b6e6:	d056      	beq.n	3401b796 <_dtoa_r+0x81e>
3401b6e8:	4621      	mov	r1, r4
3401b6ea:	9801      	ldr	r0, [sp, #4]
3401b6ec:	f000 fc60 	bl	3401bfb0 <__mcmp>
3401b6f0:	2800      	cmp	r0, #0
3401b6f2:	da50      	bge.n	3401b796 <_dtoa_r+0x81e>
3401b6f4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3401b6f8:	220a      	movs	r2, #10
3401b6fa:	9901      	ldr	r1, [sp, #4]
3401b6fc:	4648      	mov	r0, r9
3401b6fe:	9304      	str	r3, [sp, #16]
3401b700:	2300      	movs	r3, #0
3401b702:	f000 fa3b 	bl	3401bb7c <__multadd>
3401b706:	9b08      	ldr	r3, [sp, #32]
3401b708:	9001      	str	r0, [sp, #4]
3401b70a:	2b00      	cmp	r3, #0
3401b70c:	f000 816e 	beq.w	3401b9ec <_dtoa_r+0xa74>
3401b710:	4629      	mov	r1, r5
3401b712:	2300      	movs	r3, #0
3401b714:	220a      	movs	r2, #10
3401b716:	4648      	mov	r0, r9
3401b718:	f000 fa30 	bl	3401bb7c <__multadd>
3401b71c:	f1bb 0f00 	cmp.w	fp, #0
3401b720:	4605      	mov	r5, r0
3401b722:	dc64      	bgt.n	3401b7ee <_dtoa_r+0x876>
3401b724:	9b07      	ldr	r3, [sp, #28]
3401b726:	2b02      	cmp	r3, #2
3401b728:	dc3e      	bgt.n	3401b7a8 <_dtoa_r+0x830>
3401b72a:	e060      	b.n	3401b7ee <_dtoa_r+0x876>
3401b72c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401b72e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3401b732:	e73c      	b.n	3401b5ae <_dtoa_r+0x636>
3401b734:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3401b738:	42a3      	cmp	r3, r4
3401b73a:	bfbb      	ittet	lt
3401b73c:	1ae2      	sublt	r2, r4, r3
3401b73e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
3401b740:	1b1c      	subge	r4, r3, r4
3401b742:	189b      	addlt	r3, r3, r2
3401b744:	bfbe      	ittt	lt
3401b746:	930a      	strlt	r3, [sp, #40]	@ 0x28
3401b748:	4623      	movlt	r3, r4
3401b74a:	2400      	movlt	r4, #0
3401b74c:	f1ba 0f00 	cmp.w	sl, #0
3401b750:	bfb3      	iteet	lt
3401b752:	9a05      	ldrlt	r2, [sp, #20]
3401b754:	4652      	movge	r2, sl
3401b756:	9e05      	ldrge	r6, [sp, #20]
3401b758:	eba2 060a 	sublt.w	r6, r2, sl
3401b75c:	bfb8      	it	lt
3401b75e:	2200      	movlt	r2, #0
3401b760:	e727      	b.n	3401b5b2 <_dtoa_r+0x63a>
3401b762:	461c      	mov	r4, r3
3401b764:	9e05      	ldr	r6, [sp, #20]
3401b766:	9d08      	ldr	r5, [sp, #32]
3401b768:	e730      	b.n	3401b5cc <_dtoa_r+0x654>
3401b76a:	461a      	mov	r2, r3
3401b76c:	e758      	b.n	3401b620 <_dtoa_r+0x6a8>
3401b76e:	2300      	movs	r3, #0
3401b770:	e786      	b.n	3401b680 <_dtoa_r+0x708>
3401b772:	9b02      	ldr	r3, [sp, #8]
3401b774:	e784      	b.n	3401b680 <_dtoa_r+0x708>
3401b776:	920b      	str	r2, [sp, #44]	@ 0x2c
3401b778:	e783      	b.n	3401b682 <_dtoa_r+0x70a>
3401b77a:	2300      	movs	r3, #0
3401b77c:	930b      	str	r3, [sp, #44]	@ 0x2c
3401b77e:	e784      	b.n	3401b68a <_dtoa_r+0x712>
3401b780:	d09d      	beq.n	3401b6be <_dtoa_r+0x746>
3401b782:	321c      	adds	r2, #28
3401b784:	9b05      	ldr	r3, [sp, #20]
3401b786:	4413      	add	r3, r2
3401b788:	4416      	add	r6, r2
3401b78a:	9305      	str	r3, [sp, #20]
3401b78c:	9b06      	ldr	r3, [sp, #24]
3401b78e:	4413      	add	r3, r2
3401b790:	e794      	b.n	3401b6bc <_dtoa_r+0x744>
3401b792:	4602      	mov	r2, r0
3401b794:	e7f5      	b.n	3401b782 <_dtoa_r+0x80a>
3401b796:	f1ba 0f00 	cmp.w	sl, #0
3401b79a:	46d3      	mov	fp, sl
3401b79c:	f8cd 8010 	str.w	r8, [sp, #16]
3401b7a0:	dc21      	bgt.n	3401b7e6 <_dtoa_r+0x86e>
3401b7a2:	9b07      	ldr	r3, [sp, #28]
3401b7a4:	2b02      	cmp	r3, #2
3401b7a6:	dd1e      	ble.n	3401b7e6 <_dtoa_r+0x86e>
3401b7a8:	f1bb 0f00 	cmp.w	fp, #0
3401b7ac:	f47f aeb7 	bne.w	3401b51e <_dtoa_r+0x5a6>
3401b7b0:	4621      	mov	r1, r4
3401b7b2:	465b      	mov	r3, fp
3401b7b4:	2205      	movs	r2, #5
3401b7b6:	4648      	mov	r0, r9
3401b7b8:	f000 f9e0 	bl	3401bb7c <__multadd>
3401b7bc:	4601      	mov	r1, r0
3401b7be:	4604      	mov	r4, r0
3401b7c0:	9801      	ldr	r0, [sp, #4]
3401b7c2:	f000 fbf5 	bl	3401bfb0 <__mcmp>
3401b7c6:	2800      	cmp	r0, #0
3401b7c8:	f77f aea9 	ble.w	3401b51e <_dtoa_r+0x5a6>
3401b7cc:	2331      	movs	r3, #49	@ 0x31
3401b7ce:	463e      	mov	r6, r7
3401b7d0:	f806 3b01 	strb.w	r3, [r6], #1
3401b7d4:	9b04      	ldr	r3, [sp, #16]
3401b7d6:	3301      	adds	r3, #1
3401b7d8:	9304      	str	r3, [sp, #16]
3401b7da:	e6a4      	b.n	3401b526 <_dtoa_r+0x5ae>
3401b7dc:	4654      	mov	r4, sl
3401b7de:	f8cd 8010 	str.w	r8, [sp, #16]
3401b7e2:	4625      	mov	r5, r4
3401b7e4:	e7f2      	b.n	3401b7cc <_dtoa_r+0x854>
3401b7e6:	9b08      	ldr	r3, [sp, #32]
3401b7e8:	2b00      	cmp	r3, #0
3401b7ea:	f000 8103 	beq.w	3401b9f4 <_dtoa_r+0xa7c>
3401b7ee:	2e00      	cmp	r6, #0
3401b7f0:	dd05      	ble.n	3401b7fe <_dtoa_r+0x886>
3401b7f2:	4629      	mov	r1, r5
3401b7f4:	4632      	mov	r2, r6
3401b7f6:	4648      	mov	r0, r9
3401b7f8:	f000 fb6e 	bl	3401bed8 <__lshift>
3401b7fc:	4605      	mov	r5, r0
3401b7fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401b800:	2b00      	cmp	r3, #0
3401b802:	d058      	beq.n	3401b8b6 <_dtoa_r+0x93e>
3401b804:	6869      	ldr	r1, [r5, #4]
3401b806:	4648      	mov	r0, r9
3401b808:	f000 f956 	bl	3401bab8 <_Balloc>
3401b80c:	4606      	mov	r6, r0
3401b80e:	b928      	cbnz	r0, 3401b81c <_dtoa_r+0x8a4>
3401b810:	4b82      	ldr	r3, [pc, #520]	@ (3401ba1c <_dtoa_r+0xaa4>)
3401b812:	4602      	mov	r2, r0
3401b814:	f240 21ef 	movw	r1, #751	@ 0x2ef
3401b818:	f7ff bbc7 	b.w	3401afaa <_dtoa_r+0x32>
3401b81c:	692a      	ldr	r2, [r5, #16]
3401b81e:	f105 010c 	add.w	r1, r5, #12
3401b822:	300c      	adds	r0, #12
3401b824:	3202      	adds	r2, #2
3401b826:	0092      	lsls	r2, r2, #2
3401b828:	f7ff fb05 	bl	3401ae36 <memcpy>
3401b82c:	2201      	movs	r2, #1
3401b82e:	4631      	mov	r1, r6
3401b830:	4648      	mov	r0, r9
3401b832:	f000 fb51 	bl	3401bed8 <__lshift>
3401b836:	1c7b      	adds	r3, r7, #1
3401b838:	46a8      	mov	r8, r5
3401b83a:	4605      	mov	r5, r0
3401b83c:	9305      	str	r3, [sp, #20]
3401b83e:	eb07 030b 	add.w	r3, r7, fp
3401b842:	9309      	str	r3, [sp, #36]	@ 0x24
3401b844:	9b02      	ldr	r3, [sp, #8]
3401b846:	f003 0301 	and.w	r3, r3, #1
3401b84a:	9308      	str	r3, [sp, #32]
3401b84c:	9b05      	ldr	r3, [sp, #20]
3401b84e:	4621      	mov	r1, r4
3401b850:	9801      	ldr	r0, [sp, #4]
3401b852:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3401b856:	f7ff fb02 	bl	3401ae5e <quorem>
3401b85a:	4641      	mov	r1, r8
3401b85c:	9002      	str	r0, [sp, #8]
3401b85e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3401b862:	9801      	ldr	r0, [sp, #4]
3401b864:	f000 fba4 	bl	3401bfb0 <__mcmp>
3401b868:	462a      	mov	r2, r5
3401b86a:	9006      	str	r0, [sp, #24]
3401b86c:	4621      	mov	r1, r4
3401b86e:	4648      	mov	r0, r9
3401b870:	f000 fbba 	bl	3401bfe8 <__mdiff>
3401b874:	68c2      	ldr	r2, [r0, #12]
3401b876:	4606      	mov	r6, r0
3401b878:	b9fa      	cbnz	r2, 3401b8ba <_dtoa_r+0x942>
3401b87a:	4601      	mov	r1, r0
3401b87c:	9801      	ldr	r0, [sp, #4]
3401b87e:	f000 fb97 	bl	3401bfb0 <__mcmp>
3401b882:	4602      	mov	r2, r0
3401b884:	4631      	mov	r1, r6
3401b886:	4648      	mov	r0, r9
3401b888:	920a      	str	r2, [sp, #40]	@ 0x28
3401b88a:	f000 f955 	bl	3401bb38 <_Bfree>
3401b88e:	9b07      	ldr	r3, [sp, #28]
3401b890:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401b892:	9e05      	ldr	r6, [sp, #20]
3401b894:	ea43 0102 	orr.w	r1, r3, r2
3401b898:	9b08      	ldr	r3, [sp, #32]
3401b89a:	4319      	orrs	r1, r3
3401b89c:	d10f      	bne.n	3401b8be <_dtoa_r+0x946>
3401b89e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401b8a2:	d028      	beq.n	3401b8f6 <_dtoa_r+0x97e>
3401b8a4:	9b06      	ldr	r3, [sp, #24]
3401b8a6:	2b00      	cmp	r3, #0
3401b8a8:	dd02      	ble.n	3401b8b0 <_dtoa_r+0x938>
3401b8aa:	9b02      	ldr	r3, [sp, #8]
3401b8ac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3401b8b0:	f88b a000 	strb.w	sl, [fp]
3401b8b4:	e639      	b.n	3401b52a <_dtoa_r+0x5b2>
3401b8b6:	4628      	mov	r0, r5
3401b8b8:	e7bd      	b.n	3401b836 <_dtoa_r+0x8be>
3401b8ba:	2201      	movs	r2, #1
3401b8bc:	e7e2      	b.n	3401b884 <_dtoa_r+0x90c>
3401b8be:	9b06      	ldr	r3, [sp, #24]
3401b8c0:	2b00      	cmp	r3, #0
3401b8c2:	db04      	blt.n	3401b8ce <_dtoa_r+0x956>
3401b8c4:	9907      	ldr	r1, [sp, #28]
3401b8c6:	430b      	orrs	r3, r1
3401b8c8:	9908      	ldr	r1, [sp, #32]
3401b8ca:	430b      	orrs	r3, r1
3401b8cc:	d120      	bne.n	3401b910 <_dtoa_r+0x998>
3401b8ce:	2a00      	cmp	r2, #0
3401b8d0:	ddee      	ble.n	3401b8b0 <_dtoa_r+0x938>
3401b8d2:	2201      	movs	r2, #1
3401b8d4:	9901      	ldr	r1, [sp, #4]
3401b8d6:	4648      	mov	r0, r9
3401b8d8:	f000 fafe 	bl	3401bed8 <__lshift>
3401b8dc:	4621      	mov	r1, r4
3401b8de:	9001      	str	r0, [sp, #4]
3401b8e0:	f000 fb66 	bl	3401bfb0 <__mcmp>
3401b8e4:	2800      	cmp	r0, #0
3401b8e6:	dc03      	bgt.n	3401b8f0 <_dtoa_r+0x978>
3401b8e8:	d1e2      	bne.n	3401b8b0 <_dtoa_r+0x938>
3401b8ea:	f01a 0f01 	tst.w	sl, #1
3401b8ee:	d0df      	beq.n	3401b8b0 <_dtoa_r+0x938>
3401b8f0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401b8f4:	d1d9      	bne.n	3401b8aa <_dtoa_r+0x932>
3401b8f6:	2339      	movs	r3, #57	@ 0x39
3401b8f8:	f88b 3000 	strb.w	r3, [fp]
3401b8fc:	4633      	mov	r3, r6
3401b8fe:	461e      	mov	r6, r3
3401b900:	3b01      	subs	r3, #1
3401b902:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3401b906:	2a39      	cmp	r2, #57	@ 0x39
3401b908:	d053      	beq.n	3401b9b2 <_dtoa_r+0xa3a>
3401b90a:	3201      	adds	r2, #1
3401b90c:	701a      	strb	r2, [r3, #0]
3401b90e:	e60c      	b.n	3401b52a <_dtoa_r+0x5b2>
3401b910:	2a00      	cmp	r2, #0
3401b912:	dd07      	ble.n	3401b924 <_dtoa_r+0x9ac>
3401b914:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401b918:	d0ed      	beq.n	3401b8f6 <_dtoa_r+0x97e>
3401b91a:	f10a 0301 	add.w	r3, sl, #1
3401b91e:	f88b 3000 	strb.w	r3, [fp]
3401b922:	e602      	b.n	3401b52a <_dtoa_r+0x5b2>
3401b924:	9b05      	ldr	r3, [sp, #20]
3401b926:	9a05      	ldr	r2, [sp, #20]
3401b928:	f803 ac01 	strb.w	sl, [r3, #-1]
3401b92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b92e:	4293      	cmp	r3, r2
3401b930:	d029      	beq.n	3401b986 <_dtoa_r+0xa0e>
3401b932:	2300      	movs	r3, #0
3401b934:	220a      	movs	r2, #10
3401b936:	9901      	ldr	r1, [sp, #4]
3401b938:	4648      	mov	r0, r9
3401b93a:	f000 f91f 	bl	3401bb7c <__multadd>
3401b93e:	45a8      	cmp	r8, r5
3401b940:	9001      	str	r0, [sp, #4]
3401b942:	f04f 0300 	mov.w	r3, #0
3401b946:	f04f 020a 	mov.w	r2, #10
3401b94a:	4641      	mov	r1, r8
3401b94c:	4648      	mov	r0, r9
3401b94e:	d107      	bne.n	3401b960 <_dtoa_r+0x9e8>
3401b950:	f000 f914 	bl	3401bb7c <__multadd>
3401b954:	4680      	mov	r8, r0
3401b956:	4605      	mov	r5, r0
3401b958:	9b05      	ldr	r3, [sp, #20]
3401b95a:	3301      	adds	r3, #1
3401b95c:	9305      	str	r3, [sp, #20]
3401b95e:	e775      	b.n	3401b84c <_dtoa_r+0x8d4>
3401b960:	f000 f90c 	bl	3401bb7c <__multadd>
3401b964:	4629      	mov	r1, r5
3401b966:	4680      	mov	r8, r0
3401b968:	2300      	movs	r3, #0
3401b96a:	220a      	movs	r2, #10
3401b96c:	4648      	mov	r0, r9
3401b96e:	f000 f905 	bl	3401bb7c <__multadd>
3401b972:	4605      	mov	r5, r0
3401b974:	e7f0      	b.n	3401b958 <_dtoa_r+0x9e0>
3401b976:	f1bb 0f00 	cmp.w	fp, #0
3401b97a:	f04f 0800 	mov.w	r8, #0
3401b97e:	bfcc      	ite	gt
3401b980:	465e      	movgt	r6, fp
3401b982:	2601      	movle	r6, #1
3401b984:	443e      	add	r6, r7
3401b986:	2201      	movs	r2, #1
3401b988:	9901      	ldr	r1, [sp, #4]
3401b98a:	4648      	mov	r0, r9
3401b98c:	f000 faa4 	bl	3401bed8 <__lshift>
3401b990:	4621      	mov	r1, r4
3401b992:	9001      	str	r0, [sp, #4]
3401b994:	f000 fb0c 	bl	3401bfb0 <__mcmp>
3401b998:	2800      	cmp	r0, #0
3401b99a:	dcaf      	bgt.n	3401b8fc <_dtoa_r+0x984>
3401b99c:	d102      	bne.n	3401b9a4 <_dtoa_r+0xa2c>
3401b99e:	f01a 0f01 	tst.w	sl, #1
3401b9a2:	d1ab      	bne.n	3401b8fc <_dtoa_r+0x984>
3401b9a4:	4633      	mov	r3, r6
3401b9a6:	461e      	mov	r6, r3
3401b9a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401b9ac:	2a30      	cmp	r2, #48	@ 0x30
3401b9ae:	d0fa      	beq.n	3401b9a6 <_dtoa_r+0xa2e>
3401b9b0:	e5bb      	b.n	3401b52a <_dtoa_r+0x5b2>
3401b9b2:	429f      	cmp	r7, r3
3401b9b4:	d1a3      	bne.n	3401b8fe <_dtoa_r+0x986>
3401b9b6:	9b04      	ldr	r3, [sp, #16]
3401b9b8:	3301      	adds	r3, #1
3401b9ba:	9304      	str	r3, [sp, #16]
3401b9bc:	2331      	movs	r3, #49	@ 0x31
3401b9be:	703b      	strb	r3, [r7, #0]
3401b9c0:	e5b3      	b.n	3401b52a <_dtoa_r+0x5b2>
3401b9c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401b9c4:	4f16      	ldr	r7, [pc, #88]	@ (3401ba20 <_dtoa_r+0xaa8>)
3401b9c6:	b11b      	cbz	r3, 3401b9d0 <_dtoa_r+0xa58>
3401b9c8:	f107 0308 	add.w	r3, r7, #8
3401b9cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3401b9ce:	6013      	str	r3, [r2, #0]
3401b9d0:	4638      	mov	r0, r7
3401b9d2:	b011      	add	sp, #68	@ 0x44
3401b9d4:	ecbd 8b02 	vpop	{d8}
3401b9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401b9dc:	9b07      	ldr	r3, [sp, #28]
3401b9de:	2b01      	cmp	r3, #1
3401b9e0:	f77f ae36 	ble.w	3401b650 <_dtoa_r+0x6d8>
3401b9e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401b9e6:	930b      	str	r3, [sp, #44]	@ 0x2c
3401b9e8:	2001      	movs	r0, #1
3401b9ea:	e656      	b.n	3401b69a <_dtoa_r+0x722>
3401b9ec:	f1bb 0f00 	cmp.w	fp, #0
3401b9f0:	f77f aed7 	ble.w	3401b7a2 <_dtoa_r+0x82a>
3401b9f4:	463e      	mov	r6, r7
3401b9f6:	4621      	mov	r1, r4
3401b9f8:	9801      	ldr	r0, [sp, #4]
3401b9fa:	f7ff fa30 	bl	3401ae5e <quorem>
3401b9fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3401ba02:	f806 ab01 	strb.w	sl, [r6], #1
3401ba06:	1bf2      	subs	r2, r6, r7
3401ba08:	4593      	cmp	fp, r2
3401ba0a:	ddb4      	ble.n	3401b976 <_dtoa_r+0x9fe>
3401ba0c:	2300      	movs	r3, #0
3401ba0e:	220a      	movs	r2, #10
3401ba10:	9901      	ldr	r1, [sp, #4]
3401ba12:	4648      	mov	r0, r9
3401ba14:	f000 f8b2 	bl	3401bb7c <__multadd>
3401ba18:	9001      	str	r0, [sp, #4]
3401ba1a:	e7ec      	b.n	3401b9f6 <_dtoa_r+0xa7e>
3401ba1c:	3401eef4 	.word	0x3401eef4
3401ba20:	3401ee78 	.word	0x3401ee78

3401ba24 <_free_r>:
3401ba24:	b538      	push	{r3, r4, r5, lr}
3401ba26:	4605      	mov	r5, r0
3401ba28:	2900      	cmp	r1, #0
3401ba2a:	d041      	beq.n	3401bab0 <_free_r+0x8c>
3401ba2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
3401ba30:	1f0c      	subs	r4, r1, #4
3401ba32:	2b00      	cmp	r3, #0
3401ba34:	bfb8      	it	lt
3401ba36:	18e4      	addlt	r4, r4, r3
3401ba38:	f7fe f90c 	bl	34019c54 <__malloc_lock>
3401ba3c:	4a1d      	ldr	r2, [pc, #116]	@ (3401bab4 <_free_r+0x90>)
3401ba3e:	6813      	ldr	r3, [r2, #0]
3401ba40:	b933      	cbnz	r3, 3401ba50 <_free_r+0x2c>
3401ba42:	6063      	str	r3, [r4, #4]
3401ba44:	6014      	str	r4, [r2, #0]
3401ba46:	4628      	mov	r0, r5
3401ba48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3401ba4c:	f7fe b908 	b.w	34019c60 <__malloc_unlock>
3401ba50:	42a3      	cmp	r3, r4
3401ba52:	d908      	bls.n	3401ba66 <_free_r+0x42>
3401ba54:	6820      	ldr	r0, [r4, #0]
3401ba56:	1821      	adds	r1, r4, r0
3401ba58:	428b      	cmp	r3, r1
3401ba5a:	bf01      	itttt	eq
3401ba5c:	6819      	ldreq	r1, [r3, #0]
3401ba5e:	685b      	ldreq	r3, [r3, #4]
3401ba60:	1809      	addeq	r1, r1, r0
3401ba62:	6021      	streq	r1, [r4, #0]
3401ba64:	e7ed      	b.n	3401ba42 <_free_r+0x1e>
3401ba66:	461a      	mov	r2, r3
3401ba68:	685b      	ldr	r3, [r3, #4]
3401ba6a:	b10b      	cbz	r3, 3401ba70 <_free_r+0x4c>
3401ba6c:	42a3      	cmp	r3, r4
3401ba6e:	d9fa      	bls.n	3401ba66 <_free_r+0x42>
3401ba70:	6811      	ldr	r1, [r2, #0]
3401ba72:	1850      	adds	r0, r2, r1
3401ba74:	42a0      	cmp	r0, r4
3401ba76:	d10b      	bne.n	3401ba90 <_free_r+0x6c>
3401ba78:	6820      	ldr	r0, [r4, #0]
3401ba7a:	4401      	add	r1, r0
3401ba7c:	1850      	adds	r0, r2, r1
3401ba7e:	6011      	str	r1, [r2, #0]
3401ba80:	4283      	cmp	r3, r0
3401ba82:	d1e0      	bne.n	3401ba46 <_free_r+0x22>
3401ba84:	6818      	ldr	r0, [r3, #0]
3401ba86:	685b      	ldr	r3, [r3, #4]
3401ba88:	4408      	add	r0, r1
3401ba8a:	6053      	str	r3, [r2, #4]
3401ba8c:	6010      	str	r0, [r2, #0]
3401ba8e:	e7da      	b.n	3401ba46 <_free_r+0x22>
3401ba90:	d902      	bls.n	3401ba98 <_free_r+0x74>
3401ba92:	230c      	movs	r3, #12
3401ba94:	602b      	str	r3, [r5, #0]
3401ba96:	e7d6      	b.n	3401ba46 <_free_r+0x22>
3401ba98:	6820      	ldr	r0, [r4, #0]
3401ba9a:	1821      	adds	r1, r4, r0
3401ba9c:	428b      	cmp	r3, r1
3401ba9e:	bf02      	ittt	eq
3401baa0:	6819      	ldreq	r1, [r3, #0]
3401baa2:	685b      	ldreq	r3, [r3, #4]
3401baa4:	1809      	addeq	r1, r1, r0
3401baa6:	6063      	str	r3, [r4, #4]
3401baa8:	bf08      	it	eq
3401baaa:	6021      	streq	r1, [r4, #0]
3401baac:	6054      	str	r4, [r2, #4]
3401baae:	e7ca      	b.n	3401ba46 <_free_r+0x22>
3401bab0:	bd38      	pop	{r3, r4, r5, pc}
3401bab2:	bf00      	nop
3401bab4:	3401f960 	.word	0x3401f960

3401bab8 <_Balloc>:
3401bab8:	b570      	push	{r4, r5, r6, lr}
3401baba:	69c6      	ldr	r6, [r0, #28]
3401babc:	4604      	mov	r4, r0
3401babe:	460d      	mov	r5, r1
3401bac0:	b976      	cbnz	r6, 3401bae0 <_Balloc+0x28>
3401bac2:	2010      	movs	r0, #16
3401bac4:	f7fe f81c 	bl	34019b00 <malloc>
3401bac8:	4602      	mov	r2, r0
3401baca:	61e0      	str	r0, [r4, #28]
3401bacc:	b920      	cbnz	r0, 3401bad8 <_Balloc+0x20>
3401bace:	4b18      	ldr	r3, [pc, #96]	@ (3401bb30 <_Balloc+0x78>)
3401bad0:	216b      	movs	r1, #107	@ 0x6b
3401bad2:	4818      	ldr	r0, [pc, #96]	@ (3401bb34 <_Balloc+0x7c>)
3401bad4:	f7fd fff6 	bl	34019ac4 <__assert_func>
3401bad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
3401badc:	6006      	str	r6, [r0, #0]
3401bade:	60c6      	str	r6, [r0, #12]
3401bae0:	69e6      	ldr	r6, [r4, #28]
3401bae2:	68f3      	ldr	r3, [r6, #12]
3401bae4:	b183      	cbz	r3, 3401bb08 <_Balloc+0x50>
3401bae6:	69e3      	ldr	r3, [r4, #28]
3401bae8:	68db      	ldr	r3, [r3, #12]
3401baea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3401baee:	b9b8      	cbnz	r0, 3401bb20 <_Balloc+0x68>
3401baf0:	2101      	movs	r1, #1
3401baf2:	4620      	mov	r0, r4
3401baf4:	fa01 f605 	lsl.w	r6, r1, r5
3401baf8:	1d72      	adds	r2, r6, #5
3401bafa:	0092      	lsls	r2, r2, #2
3401bafc:	f000 fe1a 	bl	3401c734 <_calloc_r>
3401bb00:	b160      	cbz	r0, 3401bb1c <_Balloc+0x64>
3401bb02:	e9c0 5601 	strd	r5, r6, [r0, #4]
3401bb06:	e00e      	b.n	3401bb26 <_Balloc+0x6e>
3401bb08:	2221      	movs	r2, #33	@ 0x21
3401bb0a:	2104      	movs	r1, #4
3401bb0c:	4620      	mov	r0, r4
3401bb0e:	f000 fe11 	bl	3401c734 <_calloc_r>
3401bb12:	69e3      	ldr	r3, [r4, #28]
3401bb14:	60f0      	str	r0, [r6, #12]
3401bb16:	68db      	ldr	r3, [r3, #12]
3401bb18:	2b00      	cmp	r3, #0
3401bb1a:	d1e4      	bne.n	3401bae6 <_Balloc+0x2e>
3401bb1c:	2000      	movs	r0, #0
3401bb1e:	bd70      	pop	{r4, r5, r6, pc}
3401bb20:	6802      	ldr	r2, [r0, #0]
3401bb22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3401bb26:	2300      	movs	r3, #0
3401bb28:	e9c0 3303 	strd	r3, r3, [r0, #12]
3401bb2c:	e7f7      	b.n	3401bb1e <_Balloc+0x66>
3401bb2e:	bf00      	nop
3401bb30:	3401ee85 	.word	0x3401ee85
3401bb34:	3401ef05 	.word	0x3401ef05

3401bb38 <_Bfree>:
3401bb38:	b570      	push	{r4, r5, r6, lr}
3401bb3a:	69c6      	ldr	r6, [r0, #28]
3401bb3c:	4605      	mov	r5, r0
3401bb3e:	460c      	mov	r4, r1
3401bb40:	b976      	cbnz	r6, 3401bb60 <_Bfree+0x28>
3401bb42:	2010      	movs	r0, #16
3401bb44:	f7fd ffdc 	bl	34019b00 <malloc>
3401bb48:	4602      	mov	r2, r0
3401bb4a:	61e8      	str	r0, [r5, #28]
3401bb4c:	b920      	cbnz	r0, 3401bb58 <_Bfree+0x20>
3401bb4e:	4b09      	ldr	r3, [pc, #36]	@ (3401bb74 <_Bfree+0x3c>)
3401bb50:	218f      	movs	r1, #143	@ 0x8f
3401bb52:	4809      	ldr	r0, [pc, #36]	@ (3401bb78 <_Bfree+0x40>)
3401bb54:	f7fd ffb6 	bl	34019ac4 <__assert_func>
3401bb58:	e9c0 6601 	strd	r6, r6, [r0, #4]
3401bb5c:	6006      	str	r6, [r0, #0]
3401bb5e:	60c6      	str	r6, [r0, #12]
3401bb60:	b13c      	cbz	r4, 3401bb72 <_Bfree+0x3a>
3401bb62:	69eb      	ldr	r3, [r5, #28]
3401bb64:	6862      	ldr	r2, [r4, #4]
3401bb66:	68db      	ldr	r3, [r3, #12]
3401bb68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3401bb6c:	6021      	str	r1, [r4, #0]
3401bb6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3401bb72:	bd70      	pop	{r4, r5, r6, pc}
3401bb74:	3401ee85 	.word	0x3401ee85
3401bb78:	3401ef05 	.word	0x3401ef05

3401bb7c <__multadd>:
3401bb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401bb80:	f101 0c14 	add.w	ip, r1, #20
3401bb84:	4607      	mov	r7, r0
3401bb86:	460c      	mov	r4, r1
3401bb88:	461e      	mov	r6, r3
3401bb8a:	690d      	ldr	r5, [r1, #16]
3401bb8c:	2000      	movs	r0, #0
3401bb8e:	f8dc 3000 	ldr.w	r3, [ip]
3401bb92:	3001      	adds	r0, #1
3401bb94:	b299      	uxth	r1, r3
3401bb96:	4285      	cmp	r5, r0
3401bb98:	fb02 6101 	mla	r1, r2, r1, r6
3401bb9c:	ea4f 4613 	mov.w	r6, r3, lsr #16
3401bba0:	ea4f 4311 	mov.w	r3, r1, lsr #16
3401bba4:	b289      	uxth	r1, r1
3401bba6:	fb02 3306 	mla	r3, r2, r6, r3
3401bbaa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3401bbae:	ea4f 4613 	mov.w	r6, r3, lsr #16
3401bbb2:	f84c 1b04 	str.w	r1, [ip], #4
3401bbb6:	dcea      	bgt.n	3401bb8e <__multadd+0x12>
3401bbb8:	b30e      	cbz	r6, 3401bbfe <__multadd+0x82>
3401bbba:	68a3      	ldr	r3, [r4, #8]
3401bbbc:	42ab      	cmp	r3, r5
3401bbbe:	dc19      	bgt.n	3401bbf4 <__multadd+0x78>
3401bbc0:	6861      	ldr	r1, [r4, #4]
3401bbc2:	4638      	mov	r0, r7
3401bbc4:	3101      	adds	r1, #1
3401bbc6:	f7ff ff77 	bl	3401bab8 <_Balloc>
3401bbca:	4680      	mov	r8, r0
3401bbcc:	b928      	cbnz	r0, 3401bbda <__multadd+0x5e>
3401bbce:	4602      	mov	r2, r0
3401bbd0:	4b0c      	ldr	r3, [pc, #48]	@ (3401bc04 <__multadd+0x88>)
3401bbd2:	21ba      	movs	r1, #186	@ 0xba
3401bbd4:	480c      	ldr	r0, [pc, #48]	@ (3401bc08 <__multadd+0x8c>)
3401bbd6:	f7fd ff75 	bl	34019ac4 <__assert_func>
3401bbda:	6922      	ldr	r2, [r4, #16]
3401bbdc:	f104 010c 	add.w	r1, r4, #12
3401bbe0:	300c      	adds	r0, #12
3401bbe2:	3202      	adds	r2, #2
3401bbe4:	0092      	lsls	r2, r2, #2
3401bbe6:	f7ff f926 	bl	3401ae36 <memcpy>
3401bbea:	4621      	mov	r1, r4
3401bbec:	4644      	mov	r4, r8
3401bbee:	4638      	mov	r0, r7
3401bbf0:	f7ff ffa2 	bl	3401bb38 <_Bfree>
3401bbf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3401bbf8:	3501      	adds	r5, #1
3401bbfa:	615e      	str	r6, [r3, #20]
3401bbfc:	6125      	str	r5, [r4, #16]
3401bbfe:	4620      	mov	r0, r4
3401bc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401bc04:	3401eef4 	.word	0x3401eef4
3401bc08:	3401ef05 	.word	0x3401ef05

3401bc0c <__hi0bits>:
3401bc0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3401bc10:	4603      	mov	r3, r0
3401bc12:	bf36      	itet	cc
3401bc14:	0403      	lslcc	r3, r0, #16
3401bc16:	2000      	movcs	r0, #0
3401bc18:	2010      	movcc	r0, #16
3401bc1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401bc1e:	bf3c      	itt	cc
3401bc20:	021b      	lslcc	r3, r3, #8
3401bc22:	3008      	addcc	r0, #8
3401bc24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401bc28:	bf3c      	itt	cc
3401bc2a:	011b      	lslcc	r3, r3, #4
3401bc2c:	3004      	addcc	r0, #4
3401bc2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401bc32:	bf3c      	itt	cc
3401bc34:	009b      	lslcc	r3, r3, #2
3401bc36:	3002      	addcc	r0, #2
3401bc38:	2b00      	cmp	r3, #0
3401bc3a:	db05      	blt.n	3401bc48 <__hi0bits+0x3c>
3401bc3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3401bc40:	f100 0001 	add.w	r0, r0, #1
3401bc44:	bf08      	it	eq
3401bc46:	2020      	moveq	r0, #32
3401bc48:	4770      	bx	lr

3401bc4a <__lo0bits>:
3401bc4a:	6803      	ldr	r3, [r0, #0]
3401bc4c:	4602      	mov	r2, r0
3401bc4e:	f013 0007 	ands.w	r0, r3, #7
3401bc52:	d00b      	beq.n	3401bc6c <__lo0bits+0x22>
3401bc54:	07d9      	lsls	r1, r3, #31
3401bc56:	d421      	bmi.n	3401bc9c <__lo0bits+0x52>
3401bc58:	0798      	lsls	r0, r3, #30
3401bc5a:	bf47      	ittee	mi
3401bc5c:	085b      	lsrmi	r3, r3, #1
3401bc5e:	2001      	movmi	r0, #1
3401bc60:	089b      	lsrpl	r3, r3, #2
3401bc62:	2002      	movpl	r0, #2
3401bc64:	bf4c      	ite	mi
3401bc66:	6013      	strmi	r3, [r2, #0]
3401bc68:	6013      	strpl	r3, [r2, #0]
3401bc6a:	4770      	bx	lr
3401bc6c:	b299      	uxth	r1, r3
3401bc6e:	b909      	cbnz	r1, 3401bc74 <__lo0bits+0x2a>
3401bc70:	0c1b      	lsrs	r3, r3, #16
3401bc72:	2010      	movs	r0, #16
3401bc74:	b2d9      	uxtb	r1, r3
3401bc76:	b909      	cbnz	r1, 3401bc7c <__lo0bits+0x32>
3401bc78:	3008      	adds	r0, #8
3401bc7a:	0a1b      	lsrs	r3, r3, #8
3401bc7c:	0719      	lsls	r1, r3, #28
3401bc7e:	bf04      	itt	eq
3401bc80:	091b      	lsreq	r3, r3, #4
3401bc82:	3004      	addeq	r0, #4
3401bc84:	0799      	lsls	r1, r3, #30
3401bc86:	bf04      	itt	eq
3401bc88:	089b      	lsreq	r3, r3, #2
3401bc8a:	3002      	addeq	r0, #2
3401bc8c:	07d9      	lsls	r1, r3, #31
3401bc8e:	d403      	bmi.n	3401bc98 <__lo0bits+0x4e>
3401bc90:	085b      	lsrs	r3, r3, #1
3401bc92:	f100 0001 	add.w	r0, r0, #1
3401bc96:	d003      	beq.n	3401bca0 <__lo0bits+0x56>
3401bc98:	6013      	str	r3, [r2, #0]
3401bc9a:	4770      	bx	lr
3401bc9c:	2000      	movs	r0, #0
3401bc9e:	4770      	bx	lr
3401bca0:	2020      	movs	r0, #32
3401bca2:	4770      	bx	lr

3401bca4 <__i2b>:
3401bca4:	b510      	push	{r4, lr}
3401bca6:	460c      	mov	r4, r1
3401bca8:	2101      	movs	r1, #1
3401bcaa:	f7ff ff05 	bl	3401bab8 <_Balloc>
3401bcae:	4602      	mov	r2, r0
3401bcb0:	b928      	cbnz	r0, 3401bcbe <__i2b+0x1a>
3401bcb2:	4b05      	ldr	r3, [pc, #20]	@ (3401bcc8 <__i2b+0x24>)
3401bcb4:	f240 1145 	movw	r1, #325	@ 0x145
3401bcb8:	4804      	ldr	r0, [pc, #16]	@ (3401bccc <__i2b+0x28>)
3401bcba:	f7fd ff03 	bl	34019ac4 <__assert_func>
3401bcbe:	2301      	movs	r3, #1
3401bcc0:	6144      	str	r4, [r0, #20]
3401bcc2:	6103      	str	r3, [r0, #16]
3401bcc4:	bd10      	pop	{r4, pc}
3401bcc6:	bf00      	nop
3401bcc8:	3401eef4 	.word	0x3401eef4
3401bccc:	3401ef05 	.word	0x3401ef05

3401bcd0 <__multiply>:
3401bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401bcd4:	4614      	mov	r4, r2
3401bcd6:	690a      	ldr	r2, [r1, #16]
3401bcd8:	460f      	mov	r7, r1
3401bcda:	b085      	sub	sp, #20
3401bcdc:	6923      	ldr	r3, [r4, #16]
3401bcde:	429a      	cmp	r2, r3
3401bce0:	bfa2      	ittt	ge
3401bce2:	4623      	movge	r3, r4
3401bce4:	460c      	movge	r4, r1
3401bce6:	461f      	movge	r7, r3
3401bce8:	f8d4 a010 	ldr.w	sl, [r4, #16]
3401bcec:	68a3      	ldr	r3, [r4, #8]
3401bcee:	f8d7 9010 	ldr.w	r9, [r7, #16]
3401bcf2:	6861      	ldr	r1, [r4, #4]
3401bcf4:	eb0a 0609 	add.w	r6, sl, r9
3401bcf8:	42b3      	cmp	r3, r6
3401bcfa:	bfb8      	it	lt
3401bcfc:	3101      	addlt	r1, #1
3401bcfe:	f7ff fedb 	bl	3401bab8 <_Balloc>
3401bd02:	b930      	cbnz	r0, 3401bd12 <__multiply+0x42>
3401bd04:	4602      	mov	r2, r0
3401bd06:	4b45      	ldr	r3, [pc, #276]	@ (3401be1c <__multiply+0x14c>)
3401bd08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3401bd0c:	4844      	ldr	r0, [pc, #272]	@ (3401be20 <__multiply+0x150>)
3401bd0e:	f7fd fed9 	bl	34019ac4 <__assert_func>
3401bd12:	f100 0514 	add.w	r5, r0, #20
3401bd16:	2200      	movs	r2, #0
3401bd18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
3401bd1c:	462b      	mov	r3, r5
3401bd1e:	4543      	cmp	r3, r8
3401bd20:	d321      	bcc.n	3401bd66 <__multiply+0x96>
3401bd22:	f107 0114 	add.w	r1, r7, #20
3401bd26:	f104 0214 	add.w	r2, r4, #20
3401bd2a:	f104 0715 	add.w	r7, r4, #21
3401bd2e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
3401bd32:	eb01 0389 	add.w	r3, r1, r9, lsl #2
3401bd36:	9302      	str	r3, [sp, #8]
3401bd38:	1b13      	subs	r3, r2, r4
3401bd3a:	3b15      	subs	r3, #21
3401bd3c:	f023 0303 	bic.w	r3, r3, #3
3401bd40:	3304      	adds	r3, #4
3401bd42:	42ba      	cmp	r2, r7
3401bd44:	bf38      	it	cc
3401bd46:	2304      	movcc	r3, #4
3401bd48:	9301      	str	r3, [sp, #4]
3401bd4a:	9b02      	ldr	r3, [sp, #8]
3401bd4c:	9103      	str	r1, [sp, #12]
3401bd4e:	428b      	cmp	r3, r1
3401bd50:	d80c      	bhi.n	3401bd6c <__multiply+0x9c>
3401bd52:	2e00      	cmp	r6, #0
3401bd54:	dd03      	ble.n	3401bd5e <__multiply+0x8e>
3401bd56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
3401bd5a:	2b00      	cmp	r3, #0
3401bd5c:	d05b      	beq.n	3401be16 <__multiply+0x146>
3401bd5e:	6106      	str	r6, [r0, #16]
3401bd60:	b005      	add	sp, #20
3401bd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401bd66:	f843 2b04 	str.w	r2, [r3], #4
3401bd6a:	e7d8      	b.n	3401bd1e <__multiply+0x4e>
3401bd6c:	f8b1 a000 	ldrh.w	sl, [r1]
3401bd70:	f1ba 0f00 	cmp.w	sl, #0
3401bd74:	d024      	beq.n	3401bdc0 <__multiply+0xf0>
3401bd76:	f104 0e14 	add.w	lr, r4, #20
3401bd7a:	46a9      	mov	r9, r5
3401bd7c:	f04f 0c00 	mov.w	ip, #0
3401bd80:	f85e 7b04 	ldr.w	r7, [lr], #4
3401bd84:	f8d9 3000 	ldr.w	r3, [r9]
3401bd88:	fa1f fb87 	uxth.w	fp, r7
3401bd8c:	4572      	cmp	r2, lr
3401bd8e:	b29b      	uxth	r3, r3
3401bd90:	fb0a 330b 	mla	r3, sl, fp, r3
3401bd94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
3401bd98:	f8d9 7000 	ldr.w	r7, [r9]
3401bd9c:	4463      	add	r3, ip
3401bd9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
3401bda2:	fb0a c70b 	mla	r7, sl, fp, ip
3401bda6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
3401bdaa:	b29b      	uxth	r3, r3
3401bdac:	ea4f 4c17 	mov.w	ip, r7, lsr #16
3401bdb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
3401bdb4:	f849 3b04 	str.w	r3, [r9], #4
3401bdb8:	d8e2      	bhi.n	3401bd80 <__multiply+0xb0>
3401bdba:	9b01      	ldr	r3, [sp, #4]
3401bdbc:	f845 c003 	str.w	ip, [r5, r3]
3401bdc0:	9b03      	ldr	r3, [sp, #12]
3401bdc2:	3104      	adds	r1, #4
3401bdc4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3401bdc8:	f1b9 0f00 	cmp.w	r9, #0
3401bdcc:	d021      	beq.n	3401be12 <__multiply+0x142>
3401bdce:	682b      	ldr	r3, [r5, #0]
3401bdd0:	f104 0c14 	add.w	ip, r4, #20
3401bdd4:	46ae      	mov	lr, r5
3401bdd6:	f04f 0a00 	mov.w	sl, #0
3401bdda:	f8bc b000 	ldrh.w	fp, [ip]
3401bdde:	b29b      	uxth	r3, r3
3401bde0:	f8be 7002 	ldrh.w	r7, [lr, #2]
3401bde4:	fb09 770b 	mla	r7, r9, fp, r7
3401bde8:	4457      	add	r7, sl
3401bdea:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
3401bdee:	f84e 3b04 	str.w	r3, [lr], #4
3401bdf2:	f85c 3b04 	ldr.w	r3, [ip], #4
3401bdf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401bdfa:	f8be 3000 	ldrh.w	r3, [lr]
3401bdfe:	4562      	cmp	r2, ip
3401be00:	fb09 330a 	mla	r3, r9, sl, r3
3401be04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
3401be08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401be0c:	d8e5      	bhi.n	3401bdda <__multiply+0x10a>
3401be0e:	9f01      	ldr	r7, [sp, #4]
3401be10:	51eb      	str	r3, [r5, r7]
3401be12:	3504      	adds	r5, #4
3401be14:	e799      	b.n	3401bd4a <__multiply+0x7a>
3401be16:	3e01      	subs	r6, #1
3401be18:	e79b      	b.n	3401bd52 <__multiply+0x82>
3401be1a:	bf00      	nop
3401be1c:	3401eef4 	.word	0x3401eef4
3401be20:	3401ef05 	.word	0x3401ef05

3401be24 <__pow5mult>:
3401be24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401be28:	4615      	mov	r5, r2
3401be2a:	f012 0203 	ands.w	r2, r2, #3
3401be2e:	4607      	mov	r7, r0
3401be30:	460e      	mov	r6, r1
3401be32:	d007      	beq.n	3401be44 <__pow5mult+0x20>
3401be34:	3a01      	subs	r2, #1
3401be36:	4c25      	ldr	r4, [pc, #148]	@ (3401becc <__pow5mult+0xa8>)
3401be38:	2300      	movs	r3, #0
3401be3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3401be3e:	f7ff fe9d 	bl	3401bb7c <__multadd>
3401be42:	4606      	mov	r6, r0
3401be44:	10ad      	asrs	r5, r5, #2
3401be46:	d03d      	beq.n	3401bec4 <__pow5mult+0xa0>
3401be48:	69fc      	ldr	r4, [r7, #28]
3401be4a:	b97c      	cbnz	r4, 3401be6c <__pow5mult+0x48>
3401be4c:	2010      	movs	r0, #16
3401be4e:	f7fd fe57 	bl	34019b00 <malloc>
3401be52:	4602      	mov	r2, r0
3401be54:	61f8      	str	r0, [r7, #28]
3401be56:	b928      	cbnz	r0, 3401be64 <__pow5mult+0x40>
3401be58:	4b1d      	ldr	r3, [pc, #116]	@ (3401bed0 <__pow5mult+0xac>)
3401be5a:	f240 11b3 	movw	r1, #435	@ 0x1b3
3401be5e:	481d      	ldr	r0, [pc, #116]	@ (3401bed4 <__pow5mult+0xb0>)
3401be60:	f7fd fe30 	bl	34019ac4 <__assert_func>
3401be64:	e9c0 4401 	strd	r4, r4, [r0, #4]
3401be68:	6004      	str	r4, [r0, #0]
3401be6a:	60c4      	str	r4, [r0, #12]
3401be6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
3401be70:	f8d8 4008 	ldr.w	r4, [r8, #8]
3401be74:	b94c      	cbnz	r4, 3401be8a <__pow5mult+0x66>
3401be76:	f240 2171 	movw	r1, #625	@ 0x271
3401be7a:	4638      	mov	r0, r7
3401be7c:	f7ff ff12 	bl	3401bca4 <__i2b>
3401be80:	2300      	movs	r3, #0
3401be82:	4604      	mov	r4, r0
3401be84:	f8c8 0008 	str.w	r0, [r8, #8]
3401be88:	6003      	str	r3, [r0, #0]
3401be8a:	f04f 0900 	mov.w	r9, #0
3401be8e:	07eb      	lsls	r3, r5, #31
3401be90:	d50a      	bpl.n	3401bea8 <__pow5mult+0x84>
3401be92:	4631      	mov	r1, r6
3401be94:	4622      	mov	r2, r4
3401be96:	4638      	mov	r0, r7
3401be98:	f7ff ff1a 	bl	3401bcd0 <__multiply>
3401be9c:	4680      	mov	r8, r0
3401be9e:	4631      	mov	r1, r6
3401bea0:	4638      	mov	r0, r7
3401bea2:	4646      	mov	r6, r8
3401bea4:	f7ff fe48 	bl	3401bb38 <_Bfree>
3401bea8:	106d      	asrs	r5, r5, #1
3401beaa:	d00b      	beq.n	3401bec4 <__pow5mult+0xa0>
3401beac:	6820      	ldr	r0, [r4, #0]
3401beae:	b938      	cbnz	r0, 3401bec0 <__pow5mult+0x9c>
3401beb0:	4622      	mov	r2, r4
3401beb2:	4621      	mov	r1, r4
3401beb4:	4638      	mov	r0, r7
3401beb6:	f7ff ff0b 	bl	3401bcd0 <__multiply>
3401beba:	6020      	str	r0, [r4, #0]
3401bebc:	f8c0 9000 	str.w	r9, [r0]
3401bec0:	4604      	mov	r4, r0
3401bec2:	e7e4      	b.n	3401be8e <__pow5mult+0x6a>
3401bec4:	4630      	mov	r0, r6
3401bec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401beca:	bf00      	nop
3401becc:	3401ef60 	.word	0x3401ef60
3401bed0:	3401ee85 	.word	0x3401ee85
3401bed4:	3401ef05 	.word	0x3401ef05

3401bed8 <__lshift>:
3401bed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401bedc:	460c      	mov	r4, r1
3401bede:	4607      	mov	r7, r0
3401bee0:	4691      	mov	r9, r2
3401bee2:	ea4f 1a62 	mov.w	sl, r2, asr #5
3401bee6:	6923      	ldr	r3, [r4, #16]
3401bee8:	6849      	ldr	r1, [r1, #4]
3401beea:	eb03 1862 	add.w	r8, r3, r2, asr #5
3401beee:	68a3      	ldr	r3, [r4, #8]
3401bef0:	f108 0601 	add.w	r6, r8, #1
3401bef4:	42b3      	cmp	r3, r6
3401bef6:	db0b      	blt.n	3401bf10 <__lshift+0x38>
3401bef8:	4638      	mov	r0, r7
3401befa:	f7ff fddd 	bl	3401bab8 <_Balloc>
3401befe:	4605      	mov	r5, r0
3401bf00:	b948      	cbnz	r0, 3401bf16 <__lshift+0x3e>
3401bf02:	4602      	mov	r2, r0
3401bf04:	4b28      	ldr	r3, [pc, #160]	@ (3401bfa8 <__lshift+0xd0>)
3401bf06:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3401bf0a:	4828      	ldr	r0, [pc, #160]	@ (3401bfac <__lshift+0xd4>)
3401bf0c:	f7fd fdda 	bl	34019ac4 <__assert_func>
3401bf10:	3101      	adds	r1, #1
3401bf12:	005b      	lsls	r3, r3, #1
3401bf14:	e7ee      	b.n	3401bef4 <__lshift+0x1c>
3401bf16:	2300      	movs	r3, #0
3401bf18:	f100 0114 	add.w	r1, r0, #20
3401bf1c:	f100 0210 	add.w	r2, r0, #16
3401bf20:	4618      	mov	r0, r3
3401bf22:	4553      	cmp	r3, sl
3401bf24:	db33      	blt.n	3401bf8e <__lshift+0xb6>
3401bf26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3401bf2a:	f104 0314 	add.w	r3, r4, #20
3401bf2e:	6920      	ldr	r0, [r4, #16]
3401bf30:	f019 091f 	ands.w	r9, r9, #31
3401bf34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3401bf38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3401bf3c:	d02b      	beq.n	3401bf96 <__lshift+0xbe>
3401bf3e:	f1c9 0e20 	rsb	lr, r9, #32
3401bf42:	468a      	mov	sl, r1
3401bf44:	2200      	movs	r2, #0
3401bf46:	6818      	ldr	r0, [r3, #0]
3401bf48:	fa00 f009 	lsl.w	r0, r0, r9
3401bf4c:	4310      	orrs	r0, r2
3401bf4e:	f84a 0b04 	str.w	r0, [sl], #4
3401bf52:	f853 2b04 	ldr.w	r2, [r3], #4
3401bf56:	459c      	cmp	ip, r3
3401bf58:	fa22 f20e 	lsr.w	r2, r2, lr
3401bf5c:	d8f3      	bhi.n	3401bf46 <__lshift+0x6e>
3401bf5e:	ebac 0304 	sub.w	r3, ip, r4
3401bf62:	f104 0015 	add.w	r0, r4, #21
3401bf66:	3b15      	subs	r3, #21
3401bf68:	f023 0303 	bic.w	r3, r3, #3
3401bf6c:	3304      	adds	r3, #4
3401bf6e:	4584      	cmp	ip, r0
3401bf70:	bf38      	it	cc
3401bf72:	2304      	movcc	r3, #4
3401bf74:	50ca      	str	r2, [r1, r3]
3401bf76:	b10a      	cbz	r2, 3401bf7c <__lshift+0xa4>
3401bf78:	f108 0602 	add.w	r6, r8, #2
3401bf7c:	3e01      	subs	r6, #1
3401bf7e:	4638      	mov	r0, r7
3401bf80:	4621      	mov	r1, r4
3401bf82:	612e      	str	r6, [r5, #16]
3401bf84:	f7ff fdd8 	bl	3401bb38 <_Bfree>
3401bf88:	4628      	mov	r0, r5
3401bf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401bf8e:	3301      	adds	r3, #1
3401bf90:	f842 0f04 	str.w	r0, [r2, #4]!
3401bf94:	e7c5      	b.n	3401bf22 <__lshift+0x4a>
3401bf96:	3904      	subs	r1, #4
3401bf98:	f853 2b04 	ldr.w	r2, [r3], #4
3401bf9c:	459c      	cmp	ip, r3
3401bf9e:	f841 2f04 	str.w	r2, [r1, #4]!
3401bfa2:	d8f9      	bhi.n	3401bf98 <__lshift+0xc0>
3401bfa4:	e7ea      	b.n	3401bf7c <__lshift+0xa4>
3401bfa6:	bf00      	nop
3401bfa8:	3401eef4 	.word	0x3401eef4
3401bfac:	3401ef05 	.word	0x3401ef05

3401bfb0 <__mcmp>:
3401bfb0:	4603      	mov	r3, r0
3401bfb2:	690a      	ldr	r2, [r1, #16]
3401bfb4:	6900      	ldr	r0, [r0, #16]
3401bfb6:	1a80      	subs	r0, r0, r2
3401bfb8:	b530      	push	{r4, r5, lr}
3401bfba:	d10e      	bne.n	3401bfda <__mcmp+0x2a>
3401bfbc:	3314      	adds	r3, #20
3401bfbe:	3114      	adds	r1, #20
3401bfc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
3401bfc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
3401bfc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3401bfcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3401bfd0:	4295      	cmp	r5, r2
3401bfd2:	d003      	beq.n	3401bfdc <__mcmp+0x2c>
3401bfd4:	d205      	bcs.n	3401bfe2 <__mcmp+0x32>
3401bfd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401bfda:	bd30      	pop	{r4, r5, pc}
3401bfdc:	42a3      	cmp	r3, r4
3401bfde:	d3f3      	bcc.n	3401bfc8 <__mcmp+0x18>
3401bfe0:	e7fb      	b.n	3401bfda <__mcmp+0x2a>
3401bfe2:	2001      	movs	r0, #1
3401bfe4:	e7f9      	b.n	3401bfda <__mcmp+0x2a>
	...

3401bfe8 <__mdiff>:
3401bfe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401bfec:	4689      	mov	r9, r1
3401bfee:	4606      	mov	r6, r0
3401bff0:	4611      	mov	r1, r2
3401bff2:	4614      	mov	r4, r2
3401bff4:	4648      	mov	r0, r9
3401bff6:	f7ff ffdb 	bl	3401bfb0 <__mcmp>
3401bffa:	1e05      	subs	r5, r0, #0
3401bffc:	d112      	bne.n	3401c024 <__mdiff+0x3c>
3401bffe:	4629      	mov	r1, r5
3401c000:	4630      	mov	r0, r6
3401c002:	f7ff fd59 	bl	3401bab8 <_Balloc>
3401c006:	4602      	mov	r2, r0
3401c008:	b928      	cbnz	r0, 3401c016 <__mdiff+0x2e>
3401c00a:	4b41      	ldr	r3, [pc, #260]	@ (3401c110 <__mdiff+0x128>)
3401c00c:	f240 2137 	movw	r1, #567	@ 0x237
3401c010:	4840      	ldr	r0, [pc, #256]	@ (3401c114 <__mdiff+0x12c>)
3401c012:	f7fd fd57 	bl	34019ac4 <__assert_func>
3401c016:	2301      	movs	r3, #1
3401c018:	e9c0 3504 	strd	r3, r5, [r0, #16]
3401c01c:	4610      	mov	r0, r2
3401c01e:	b003      	add	sp, #12
3401c020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401c024:	bfbc      	itt	lt
3401c026:	464b      	movlt	r3, r9
3401c028:	46a1      	movlt	r9, r4
3401c02a:	4630      	mov	r0, r6
3401c02c:	bfb8      	it	lt
3401c02e:	2501      	movlt	r5, #1
3401c030:	f8d9 1004 	ldr.w	r1, [r9, #4]
3401c034:	bfb4      	ite	lt
3401c036:	461c      	movlt	r4, r3
3401c038:	2500      	movge	r5, #0
3401c03a:	f7ff fd3d 	bl	3401bab8 <_Balloc>
3401c03e:	4602      	mov	r2, r0
3401c040:	b918      	cbnz	r0, 3401c04a <__mdiff+0x62>
3401c042:	4b33      	ldr	r3, [pc, #204]	@ (3401c110 <__mdiff+0x128>)
3401c044:	f240 2145 	movw	r1, #581	@ 0x245
3401c048:	e7e2      	b.n	3401c010 <__mdiff+0x28>
3401c04a:	f8d9 7010 	ldr.w	r7, [r9, #16]
3401c04e:	f104 0e14 	add.w	lr, r4, #20
3401c052:	6926      	ldr	r6, [r4, #16]
3401c054:	f100 0b14 	add.w	fp, r0, #20
3401c058:	60c5      	str	r5, [r0, #12]
3401c05a:	f109 0514 	add.w	r5, r9, #20
3401c05e:	f109 0310 	add.w	r3, r9, #16
3401c062:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3401c066:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3401c06a:	46d9      	mov	r9, fp
3401c06c:	f04f 0c00 	mov.w	ip, #0
3401c070:	9301      	str	r3, [sp, #4]
3401c072:	9b01      	ldr	r3, [sp, #4]
3401c074:	f85e 0b04 	ldr.w	r0, [lr], #4
3401c078:	f853 af04 	ldr.w	sl, [r3, #4]!
3401c07c:	4576      	cmp	r6, lr
3401c07e:	9301      	str	r3, [sp, #4]
3401c080:	fa1f f38a 	uxth.w	r3, sl
3401c084:	4619      	mov	r1, r3
3401c086:	b283      	uxth	r3, r0
3401c088:	ea4f 4010 	mov.w	r0, r0, lsr #16
3401c08c:	eba1 0303 	sub.w	r3, r1, r3
3401c090:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
3401c094:	4463      	add	r3, ip
3401c096:	eb00 4023 	add.w	r0, r0, r3, asr #16
3401c09a:	b29b      	uxth	r3, r3
3401c09c:	ea4f 4c20 	mov.w	ip, r0, asr #16
3401c0a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401c0a4:	f849 3b04 	str.w	r3, [r9], #4
3401c0a8:	d8e3      	bhi.n	3401c072 <__mdiff+0x8a>
3401c0aa:	1b33      	subs	r3, r6, r4
3401c0ac:	3415      	adds	r4, #21
3401c0ae:	3b15      	subs	r3, #21
3401c0b0:	f023 0303 	bic.w	r3, r3, #3
3401c0b4:	3304      	adds	r3, #4
3401c0b6:	42a6      	cmp	r6, r4
3401c0b8:	bf38      	it	cc
3401c0ba:	2304      	movcc	r3, #4
3401c0bc:	441d      	add	r5, r3
3401c0be:	445b      	add	r3, fp
3401c0c0:	462c      	mov	r4, r5
3401c0c2:	461e      	mov	r6, r3
3401c0c4:	4544      	cmp	r4, r8
3401c0c6:	d30e      	bcc.n	3401c0e6 <__mdiff+0xfe>
3401c0c8:	f108 0103 	add.w	r1, r8, #3
3401c0cc:	1b49      	subs	r1, r1, r5
3401c0ce:	3d03      	subs	r5, #3
3401c0d0:	f021 0103 	bic.w	r1, r1, #3
3401c0d4:	45a8      	cmp	r8, r5
3401c0d6:	bf38      	it	cc
3401c0d8:	2100      	movcc	r1, #0
3401c0da:	440b      	add	r3, r1
3401c0dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3401c0e0:	b199      	cbz	r1, 3401c10a <__mdiff+0x122>
3401c0e2:	6117      	str	r7, [r2, #16]
3401c0e4:	e79a      	b.n	3401c01c <__mdiff+0x34>
3401c0e6:	f854 1b04 	ldr.w	r1, [r4], #4
3401c0ea:	46e6      	mov	lr, ip
3401c0ec:	fa1f fc81 	uxth.w	ip, r1
3401c0f0:	0c08      	lsrs	r0, r1, #16
3401c0f2:	4471      	add	r1, lr
3401c0f4:	44f4      	add	ip, lr
3401c0f6:	b289      	uxth	r1, r1
3401c0f8:	eb00 402c 	add.w	r0, r0, ip, asr #16
3401c0fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
3401c100:	ea4f 4c20 	mov.w	ip, r0, asr #16
3401c104:	f846 1b04 	str.w	r1, [r6], #4
3401c108:	e7dc      	b.n	3401c0c4 <__mdiff+0xdc>
3401c10a:	3f01      	subs	r7, #1
3401c10c:	e7e6      	b.n	3401c0dc <__mdiff+0xf4>
3401c10e:	bf00      	nop
3401c110:	3401eef4 	.word	0x3401eef4
3401c114:	3401ef05 	.word	0x3401ef05

3401c118 <__d2b>:
3401c118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3401c11c:	460f      	mov	r7, r1
3401c11e:	2101      	movs	r1, #1
3401c120:	4616      	mov	r6, r2
3401c122:	ec59 8b10 	vmov	r8, r9, d0
3401c126:	f7ff fcc7 	bl	3401bab8 <_Balloc>
3401c12a:	4604      	mov	r4, r0
3401c12c:	b930      	cbnz	r0, 3401c13c <__d2b+0x24>
3401c12e:	4602      	mov	r2, r0
3401c130:	4b23      	ldr	r3, [pc, #140]	@ (3401c1c0 <__d2b+0xa8>)
3401c132:	f240 310f 	movw	r1, #783	@ 0x30f
3401c136:	4823      	ldr	r0, [pc, #140]	@ (3401c1c4 <__d2b+0xac>)
3401c138:	f7fd fcc4 	bl	34019ac4 <__assert_func>
3401c13c:	f3c9 550a 	ubfx	r5, r9, #20, #11
3401c140:	f3c9 0313 	ubfx	r3, r9, #0, #20
3401c144:	b10d      	cbz	r5, 3401c14a <__d2b+0x32>
3401c146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3401c14a:	9301      	str	r3, [sp, #4]
3401c14c:	f1b8 0300 	subs.w	r3, r8, #0
3401c150:	d023      	beq.n	3401c19a <__d2b+0x82>
3401c152:	4668      	mov	r0, sp
3401c154:	9300      	str	r3, [sp, #0]
3401c156:	f7ff fd78 	bl	3401bc4a <__lo0bits>
3401c15a:	e9dd 1200 	ldrd	r1, r2, [sp]
3401c15e:	b1d0      	cbz	r0, 3401c196 <__d2b+0x7e>
3401c160:	f1c0 0320 	rsb	r3, r0, #32
3401c164:	fa02 f303 	lsl.w	r3, r2, r3
3401c168:	40c2      	lsrs	r2, r0
3401c16a:	430b      	orrs	r3, r1
3401c16c:	9201      	str	r2, [sp, #4]
3401c16e:	6163      	str	r3, [r4, #20]
3401c170:	9b01      	ldr	r3, [sp, #4]
3401c172:	2b00      	cmp	r3, #0
3401c174:	61a3      	str	r3, [r4, #24]
3401c176:	bf0c      	ite	eq
3401c178:	2201      	moveq	r2, #1
3401c17a:	2202      	movne	r2, #2
3401c17c:	6122      	str	r2, [r4, #16]
3401c17e:	b1a5      	cbz	r5, 3401c1aa <__d2b+0x92>
3401c180:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
3401c184:	4405      	add	r5, r0
3401c186:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3401c18a:	603d      	str	r5, [r7, #0]
3401c18c:	6030      	str	r0, [r6, #0]
3401c18e:	4620      	mov	r0, r4
3401c190:	b003      	add	sp, #12
3401c192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3401c196:	6161      	str	r1, [r4, #20]
3401c198:	e7ea      	b.n	3401c170 <__d2b+0x58>
3401c19a:	a801      	add	r0, sp, #4
3401c19c:	f7ff fd55 	bl	3401bc4a <__lo0bits>
3401c1a0:	9b01      	ldr	r3, [sp, #4]
3401c1a2:	3020      	adds	r0, #32
3401c1a4:	2201      	movs	r2, #1
3401c1a6:	6163      	str	r3, [r4, #20]
3401c1a8:	e7e8      	b.n	3401c17c <__d2b+0x64>
3401c1aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3401c1ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3401c1b2:	6038      	str	r0, [r7, #0]
3401c1b4:	6918      	ldr	r0, [r3, #16]
3401c1b6:	f7ff fd29 	bl	3401bc0c <__hi0bits>
3401c1ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3401c1be:	e7e5      	b.n	3401c18c <__d2b+0x74>
3401c1c0:	3401eef4 	.word	0x3401eef4
3401c1c4:	3401ef05 	.word	0x3401ef05

3401c1c8 <__sfputc_r>:
3401c1c8:	6893      	ldr	r3, [r2, #8]
3401c1ca:	3b01      	subs	r3, #1
3401c1cc:	2b00      	cmp	r3, #0
3401c1ce:	6093      	str	r3, [r2, #8]
3401c1d0:	b410      	push	{r4}
3401c1d2:	da08      	bge.n	3401c1e6 <__sfputc_r+0x1e>
3401c1d4:	6994      	ldr	r4, [r2, #24]
3401c1d6:	42a3      	cmp	r3, r4
3401c1d8:	db01      	blt.n	3401c1de <__sfputc_r+0x16>
3401c1da:	290a      	cmp	r1, #10
3401c1dc:	d103      	bne.n	3401c1e6 <__sfputc_r+0x1e>
3401c1de:	f85d 4b04 	ldr.w	r4, [sp], #4
3401c1e2:	f7fe bb04 	b.w	3401a7ee <__swbuf_r>
3401c1e6:	6813      	ldr	r3, [r2, #0]
3401c1e8:	1c58      	adds	r0, r3, #1
3401c1ea:	6010      	str	r0, [r2, #0]
3401c1ec:	4608      	mov	r0, r1
3401c1ee:	7019      	strb	r1, [r3, #0]
3401c1f0:	f85d 4b04 	ldr.w	r4, [sp], #4
3401c1f4:	4770      	bx	lr

3401c1f6 <__sfputs_r>:
3401c1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401c1f8:	4606      	mov	r6, r0
3401c1fa:	460f      	mov	r7, r1
3401c1fc:	4614      	mov	r4, r2
3401c1fe:	18d5      	adds	r5, r2, r3
3401c200:	42ac      	cmp	r4, r5
3401c202:	d101      	bne.n	3401c208 <__sfputs_r+0x12>
3401c204:	2000      	movs	r0, #0
3401c206:	e007      	b.n	3401c218 <__sfputs_r+0x22>
3401c208:	463a      	mov	r2, r7
3401c20a:	f814 1b01 	ldrb.w	r1, [r4], #1
3401c20e:	4630      	mov	r0, r6
3401c210:	f7ff ffda 	bl	3401c1c8 <__sfputc_r>
3401c214:	1c43      	adds	r3, r0, #1
3401c216:	d1f3      	bne.n	3401c200 <__sfputs_r+0xa>
3401c218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

3401c21c <_vfiprintf_r>:
3401c21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c220:	460d      	mov	r5, r1
3401c222:	b09d      	sub	sp, #116	@ 0x74
3401c224:	4614      	mov	r4, r2
3401c226:	4698      	mov	r8, r3
3401c228:	4606      	mov	r6, r0
3401c22a:	b118      	cbz	r0, 3401c234 <_vfiprintf_r+0x18>
3401c22c:	6a03      	ldr	r3, [r0, #32]
3401c22e:	b90b      	cbnz	r3, 3401c234 <_vfiprintf_r+0x18>
3401c230:	f7fe f9e2 	bl	3401a5f8 <__sinit>
3401c234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401c236:	07d9      	lsls	r1, r3, #31
3401c238:	d405      	bmi.n	3401c246 <_vfiprintf_r+0x2a>
3401c23a:	89ab      	ldrh	r3, [r5, #12]
3401c23c:	059a      	lsls	r2, r3, #22
3401c23e:	d402      	bmi.n	3401c246 <_vfiprintf_r+0x2a>
3401c240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401c242:	f7fe fde8 	bl	3401ae16 <__retarget_lock_acquire_recursive>
3401c246:	89ab      	ldrh	r3, [r5, #12]
3401c248:	071b      	lsls	r3, r3, #28
3401c24a:	d501      	bpl.n	3401c250 <_vfiprintf_r+0x34>
3401c24c:	692b      	ldr	r3, [r5, #16]
3401c24e:	b99b      	cbnz	r3, 3401c278 <_vfiprintf_r+0x5c>
3401c250:	4629      	mov	r1, r5
3401c252:	4630      	mov	r0, r6
3401c254:	f7fe fb0a 	bl	3401a86c <__swsetup_r>
3401c258:	b170      	cbz	r0, 3401c278 <_vfiprintf_r+0x5c>
3401c25a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401c25c:	07dc      	lsls	r4, r3, #31
3401c25e:	d504      	bpl.n	3401c26a <_vfiprintf_r+0x4e>
3401c260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401c264:	b01d      	add	sp, #116	@ 0x74
3401c266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401c26a:	89ab      	ldrh	r3, [r5, #12]
3401c26c:	0598      	lsls	r0, r3, #22
3401c26e:	d4f7      	bmi.n	3401c260 <_vfiprintf_r+0x44>
3401c270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401c272:	f7fe fdd1 	bl	3401ae18 <__retarget_lock_release_recursive>
3401c276:	e7f3      	b.n	3401c260 <_vfiprintf_r+0x44>
3401c278:	2300      	movs	r3, #0
3401c27a:	f8cd 800c 	str.w	r8, [sp, #12]
3401c27e:	f04f 0901 	mov.w	r9, #1
3401c282:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3401c438 <_vfiprintf_r+0x21c>
3401c286:	9309      	str	r3, [sp, #36]	@ 0x24
3401c288:	2320      	movs	r3, #32
3401c28a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3401c28e:	2330      	movs	r3, #48	@ 0x30
3401c290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3401c294:	4623      	mov	r3, r4
3401c296:	469a      	mov	sl, r3
3401c298:	f813 2b01 	ldrb.w	r2, [r3], #1
3401c29c:	b10a      	cbz	r2, 3401c2a2 <_vfiprintf_r+0x86>
3401c29e:	2a25      	cmp	r2, #37	@ 0x25
3401c2a0:	d1f9      	bne.n	3401c296 <_vfiprintf_r+0x7a>
3401c2a2:	ebba 0b04 	subs.w	fp, sl, r4
3401c2a6:	d00b      	beq.n	3401c2c0 <_vfiprintf_r+0xa4>
3401c2a8:	465b      	mov	r3, fp
3401c2aa:	4622      	mov	r2, r4
3401c2ac:	4629      	mov	r1, r5
3401c2ae:	4630      	mov	r0, r6
3401c2b0:	f7ff ffa1 	bl	3401c1f6 <__sfputs_r>
3401c2b4:	3001      	adds	r0, #1
3401c2b6:	f000 80a7 	beq.w	3401c408 <_vfiprintf_r+0x1ec>
3401c2ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401c2bc:	445a      	add	r2, fp
3401c2be:	9209      	str	r2, [sp, #36]	@ 0x24
3401c2c0:	f89a 3000 	ldrb.w	r3, [sl]
3401c2c4:	2b00      	cmp	r3, #0
3401c2c6:	f000 809f 	beq.w	3401c408 <_vfiprintf_r+0x1ec>
3401c2ca:	2300      	movs	r3, #0
3401c2cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3401c2d0:	f10a 0a01 	add.w	sl, sl, #1
3401c2d4:	9304      	str	r3, [sp, #16]
3401c2d6:	9307      	str	r3, [sp, #28]
3401c2d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3401c2dc:	931a      	str	r3, [sp, #104]	@ 0x68
3401c2de:	e9cd 2305 	strd	r2, r3, [sp, #20]
3401c2e2:	4654      	mov	r4, sl
3401c2e4:	2205      	movs	r2, #5
3401c2e6:	4854      	ldr	r0, [pc, #336]	@ (3401c438 <_vfiprintf_r+0x21c>)
3401c2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
3401c2ec:	f7fe fd95 	bl	3401ae1a <memchr>
3401c2f0:	9a04      	ldr	r2, [sp, #16]
3401c2f2:	b9d8      	cbnz	r0, 3401c32c <_vfiprintf_r+0x110>
3401c2f4:	06d1      	lsls	r1, r2, #27
3401c2f6:	bf44      	itt	mi
3401c2f8:	2320      	movmi	r3, #32
3401c2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401c2fe:	0713      	lsls	r3, r2, #28
3401c300:	bf44      	itt	mi
3401c302:	232b      	movmi	r3, #43	@ 0x2b
3401c304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401c308:	f89a 3000 	ldrb.w	r3, [sl]
3401c30c:	2b2a      	cmp	r3, #42	@ 0x2a
3401c30e:	d015      	beq.n	3401c33c <_vfiprintf_r+0x120>
3401c310:	9a07      	ldr	r2, [sp, #28]
3401c312:	4654      	mov	r4, sl
3401c314:	2000      	movs	r0, #0
3401c316:	f04f 0c0a 	mov.w	ip, #10
3401c31a:	4621      	mov	r1, r4
3401c31c:	f811 3b01 	ldrb.w	r3, [r1], #1
3401c320:	3b30      	subs	r3, #48	@ 0x30
3401c322:	2b09      	cmp	r3, #9
3401c324:	d94b      	bls.n	3401c3be <_vfiprintf_r+0x1a2>
3401c326:	b1b0      	cbz	r0, 3401c356 <_vfiprintf_r+0x13a>
3401c328:	9207      	str	r2, [sp, #28]
3401c32a:	e014      	b.n	3401c356 <_vfiprintf_r+0x13a>
3401c32c:	eba0 0308 	sub.w	r3, r0, r8
3401c330:	46a2      	mov	sl, r4
3401c332:	fa09 f303 	lsl.w	r3, r9, r3
3401c336:	4313      	orrs	r3, r2
3401c338:	9304      	str	r3, [sp, #16]
3401c33a:	e7d2      	b.n	3401c2e2 <_vfiprintf_r+0xc6>
3401c33c:	9b03      	ldr	r3, [sp, #12]
3401c33e:	1d19      	adds	r1, r3, #4
3401c340:	681b      	ldr	r3, [r3, #0]
3401c342:	2b00      	cmp	r3, #0
3401c344:	9103      	str	r1, [sp, #12]
3401c346:	bfbb      	ittet	lt
3401c348:	425b      	neglt	r3, r3
3401c34a:	f042 0202 	orrlt.w	r2, r2, #2
3401c34e:	9307      	strge	r3, [sp, #28]
3401c350:	9307      	strlt	r3, [sp, #28]
3401c352:	bfb8      	it	lt
3401c354:	9204      	strlt	r2, [sp, #16]
3401c356:	7823      	ldrb	r3, [r4, #0]
3401c358:	2b2e      	cmp	r3, #46	@ 0x2e
3401c35a:	d10a      	bne.n	3401c372 <_vfiprintf_r+0x156>
3401c35c:	7863      	ldrb	r3, [r4, #1]
3401c35e:	2b2a      	cmp	r3, #42	@ 0x2a
3401c360:	d132      	bne.n	3401c3c8 <_vfiprintf_r+0x1ac>
3401c362:	9b03      	ldr	r3, [sp, #12]
3401c364:	3402      	adds	r4, #2
3401c366:	1d1a      	adds	r2, r3, #4
3401c368:	681b      	ldr	r3, [r3, #0]
3401c36a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3401c36e:	9203      	str	r2, [sp, #12]
3401c370:	9305      	str	r3, [sp, #20]
3401c372:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3401c448 <_vfiprintf_r+0x22c>
3401c376:	2203      	movs	r2, #3
3401c378:	7821      	ldrb	r1, [r4, #0]
3401c37a:	4650      	mov	r0, sl
3401c37c:	f7fe fd4d 	bl	3401ae1a <memchr>
3401c380:	b138      	cbz	r0, 3401c392 <_vfiprintf_r+0x176>
3401c382:	eba0 000a 	sub.w	r0, r0, sl
3401c386:	2240      	movs	r2, #64	@ 0x40
3401c388:	9b04      	ldr	r3, [sp, #16]
3401c38a:	3401      	adds	r4, #1
3401c38c:	4082      	lsls	r2, r0
3401c38e:	4313      	orrs	r3, r2
3401c390:	9304      	str	r3, [sp, #16]
3401c392:	f814 1b01 	ldrb.w	r1, [r4], #1
3401c396:	2206      	movs	r2, #6
3401c398:	4828      	ldr	r0, [pc, #160]	@ (3401c43c <_vfiprintf_r+0x220>)
3401c39a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3401c39e:	f7fe fd3c 	bl	3401ae1a <memchr>
3401c3a2:	2800      	cmp	r0, #0
3401c3a4:	d03f      	beq.n	3401c426 <_vfiprintf_r+0x20a>
3401c3a6:	4b26      	ldr	r3, [pc, #152]	@ (3401c440 <_vfiprintf_r+0x224>)
3401c3a8:	bb1b      	cbnz	r3, 3401c3f2 <_vfiprintf_r+0x1d6>
3401c3aa:	9b03      	ldr	r3, [sp, #12]
3401c3ac:	3307      	adds	r3, #7
3401c3ae:	f023 0307 	bic.w	r3, r3, #7
3401c3b2:	3308      	adds	r3, #8
3401c3b4:	9303      	str	r3, [sp, #12]
3401c3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401c3b8:	443b      	add	r3, r7
3401c3ba:	9309      	str	r3, [sp, #36]	@ 0x24
3401c3bc:	e76a      	b.n	3401c294 <_vfiprintf_r+0x78>
3401c3be:	fb0c 3202 	mla	r2, ip, r2, r3
3401c3c2:	460c      	mov	r4, r1
3401c3c4:	2001      	movs	r0, #1
3401c3c6:	e7a8      	b.n	3401c31a <_vfiprintf_r+0xfe>
3401c3c8:	2300      	movs	r3, #0
3401c3ca:	3401      	adds	r4, #1
3401c3cc:	f04f 0c0a 	mov.w	ip, #10
3401c3d0:	4619      	mov	r1, r3
3401c3d2:	9305      	str	r3, [sp, #20]
3401c3d4:	4620      	mov	r0, r4
3401c3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
3401c3da:	3a30      	subs	r2, #48	@ 0x30
3401c3dc:	2a09      	cmp	r2, #9
3401c3de:	d903      	bls.n	3401c3e8 <_vfiprintf_r+0x1cc>
3401c3e0:	2b00      	cmp	r3, #0
3401c3e2:	d0c6      	beq.n	3401c372 <_vfiprintf_r+0x156>
3401c3e4:	9105      	str	r1, [sp, #20]
3401c3e6:	e7c4      	b.n	3401c372 <_vfiprintf_r+0x156>
3401c3e8:	fb0c 2101 	mla	r1, ip, r1, r2
3401c3ec:	4604      	mov	r4, r0
3401c3ee:	2301      	movs	r3, #1
3401c3f0:	e7f0      	b.n	3401c3d4 <_vfiprintf_r+0x1b8>
3401c3f2:	ab03      	add	r3, sp, #12
3401c3f4:	462a      	mov	r2, r5
3401c3f6:	a904      	add	r1, sp, #16
3401c3f8:	4630      	mov	r0, r6
3401c3fa:	9300      	str	r3, [sp, #0]
3401c3fc:	4b11      	ldr	r3, [pc, #68]	@ (3401c444 <_vfiprintf_r+0x228>)
3401c3fe:	f7fd fcc3 	bl	34019d88 <_printf_float>
3401c402:	4607      	mov	r7, r0
3401c404:	1c78      	adds	r0, r7, #1
3401c406:	d1d6      	bne.n	3401c3b6 <_vfiprintf_r+0x19a>
3401c408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401c40a:	07d9      	lsls	r1, r3, #31
3401c40c:	d405      	bmi.n	3401c41a <_vfiprintf_r+0x1fe>
3401c40e:	89ab      	ldrh	r3, [r5, #12]
3401c410:	059a      	lsls	r2, r3, #22
3401c412:	d402      	bmi.n	3401c41a <_vfiprintf_r+0x1fe>
3401c414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401c416:	f7fe fcff 	bl	3401ae18 <__retarget_lock_release_recursive>
3401c41a:	89ab      	ldrh	r3, [r5, #12]
3401c41c:	065b      	lsls	r3, r3, #25
3401c41e:	f53f af1f 	bmi.w	3401c260 <_vfiprintf_r+0x44>
3401c422:	9809      	ldr	r0, [sp, #36]	@ 0x24
3401c424:	e71e      	b.n	3401c264 <_vfiprintf_r+0x48>
3401c426:	ab03      	add	r3, sp, #12
3401c428:	462a      	mov	r2, r5
3401c42a:	a904      	add	r1, sp, #16
3401c42c:	4630      	mov	r0, r6
3401c42e:	9300      	str	r3, [sp, #0]
3401c430:	4b04      	ldr	r3, [pc, #16]	@ (3401c444 <_vfiprintf_r+0x228>)
3401c432:	f7fd ff35 	bl	3401a2a0 <_printf_i>
3401c436:	e7e4      	b.n	3401c402 <_vfiprintf_r+0x1e6>
3401c438:	3401f060 	.word	0x3401f060
3401c43c:	3401f06a 	.word	0x3401f06a
3401c440:	34019d89 	.word	0x34019d89
3401c444:	3401c1f7 	.word	0x3401c1f7
3401c448:	3401f066 	.word	0x3401f066

3401c44c <__sflush_r>:
3401c44c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3401c450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401c454:	0716      	lsls	r6, r2, #28
3401c456:	4605      	mov	r5, r0
3401c458:	460c      	mov	r4, r1
3401c45a:	d454      	bmi.n	3401c506 <__sflush_r+0xba>
3401c45c:	684b      	ldr	r3, [r1, #4]
3401c45e:	2b00      	cmp	r3, #0
3401c460:	dc02      	bgt.n	3401c468 <__sflush_r+0x1c>
3401c462:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3401c464:	2b00      	cmp	r3, #0
3401c466:	dd48      	ble.n	3401c4fa <__sflush_r+0xae>
3401c468:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3401c46a:	2e00      	cmp	r6, #0
3401c46c:	d045      	beq.n	3401c4fa <__sflush_r+0xae>
3401c46e:	2300      	movs	r3, #0
3401c470:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3401c474:	682f      	ldr	r7, [r5, #0]
3401c476:	6a21      	ldr	r1, [r4, #32]
3401c478:	602b      	str	r3, [r5, #0]
3401c47a:	d030      	beq.n	3401c4de <__sflush_r+0x92>
3401c47c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3401c47e:	89a3      	ldrh	r3, [r4, #12]
3401c480:	0759      	lsls	r1, r3, #29
3401c482:	d505      	bpl.n	3401c490 <__sflush_r+0x44>
3401c484:	6863      	ldr	r3, [r4, #4]
3401c486:	1ad2      	subs	r2, r2, r3
3401c488:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401c48a:	b10b      	cbz	r3, 3401c490 <__sflush_r+0x44>
3401c48c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401c48e:	1ad2      	subs	r2, r2, r3
3401c490:	2300      	movs	r3, #0
3401c492:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3401c494:	6a21      	ldr	r1, [r4, #32]
3401c496:	4628      	mov	r0, r5
3401c498:	47b0      	blx	r6
3401c49a:	1c43      	adds	r3, r0, #1
3401c49c:	89a3      	ldrh	r3, [r4, #12]
3401c49e:	d106      	bne.n	3401c4ae <__sflush_r+0x62>
3401c4a0:	6829      	ldr	r1, [r5, #0]
3401c4a2:	291d      	cmp	r1, #29
3401c4a4:	d82b      	bhi.n	3401c4fe <__sflush_r+0xb2>
3401c4a6:	4a2a      	ldr	r2, [pc, #168]	@ (3401c550 <__sflush_r+0x104>)
3401c4a8:	410a      	asrs	r2, r1
3401c4aa:	07d6      	lsls	r6, r2, #31
3401c4ac:	d427      	bmi.n	3401c4fe <__sflush_r+0xb2>
3401c4ae:	2200      	movs	r2, #0
3401c4b0:	04d9      	lsls	r1, r3, #19
3401c4b2:	6062      	str	r2, [r4, #4]
3401c4b4:	6922      	ldr	r2, [r4, #16]
3401c4b6:	6022      	str	r2, [r4, #0]
3401c4b8:	d504      	bpl.n	3401c4c4 <__sflush_r+0x78>
3401c4ba:	1c42      	adds	r2, r0, #1
3401c4bc:	d101      	bne.n	3401c4c2 <__sflush_r+0x76>
3401c4be:	682b      	ldr	r3, [r5, #0]
3401c4c0:	b903      	cbnz	r3, 3401c4c4 <__sflush_r+0x78>
3401c4c2:	6560      	str	r0, [r4, #84]	@ 0x54
3401c4c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401c4c6:	602f      	str	r7, [r5, #0]
3401c4c8:	b1b9      	cbz	r1, 3401c4fa <__sflush_r+0xae>
3401c4ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3401c4ce:	4299      	cmp	r1, r3
3401c4d0:	d002      	beq.n	3401c4d8 <__sflush_r+0x8c>
3401c4d2:	4628      	mov	r0, r5
3401c4d4:	f7ff faa6 	bl	3401ba24 <_free_r>
3401c4d8:	2300      	movs	r3, #0
3401c4da:	6363      	str	r3, [r4, #52]	@ 0x34
3401c4dc:	e00d      	b.n	3401c4fa <__sflush_r+0xae>
3401c4de:	2301      	movs	r3, #1
3401c4e0:	4628      	mov	r0, r5
3401c4e2:	47b0      	blx	r6
3401c4e4:	4602      	mov	r2, r0
3401c4e6:	1c50      	adds	r0, r2, #1
3401c4e8:	d1c9      	bne.n	3401c47e <__sflush_r+0x32>
3401c4ea:	682b      	ldr	r3, [r5, #0]
3401c4ec:	2b00      	cmp	r3, #0
3401c4ee:	d0c6      	beq.n	3401c47e <__sflush_r+0x32>
3401c4f0:	2b1d      	cmp	r3, #29
3401c4f2:	d001      	beq.n	3401c4f8 <__sflush_r+0xac>
3401c4f4:	2b16      	cmp	r3, #22
3401c4f6:	d11d      	bne.n	3401c534 <__sflush_r+0xe8>
3401c4f8:	602f      	str	r7, [r5, #0]
3401c4fa:	2000      	movs	r0, #0
3401c4fc:	e021      	b.n	3401c542 <__sflush_r+0xf6>
3401c4fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401c502:	b21b      	sxth	r3, r3
3401c504:	e01a      	b.n	3401c53c <__sflush_r+0xf0>
3401c506:	690f      	ldr	r7, [r1, #16]
3401c508:	2f00      	cmp	r7, #0
3401c50a:	d0f6      	beq.n	3401c4fa <__sflush_r+0xae>
3401c50c:	0793      	lsls	r3, r2, #30
3401c50e:	680e      	ldr	r6, [r1, #0]
3401c510:	600f      	str	r7, [r1, #0]
3401c512:	bf0c      	ite	eq
3401c514:	694b      	ldreq	r3, [r1, #20]
3401c516:	2300      	movne	r3, #0
3401c518:	eba6 0807 	sub.w	r8, r6, r7
3401c51c:	608b      	str	r3, [r1, #8]
3401c51e:	f1b8 0f00 	cmp.w	r8, #0
3401c522:	ddea      	ble.n	3401c4fa <__sflush_r+0xae>
3401c524:	4643      	mov	r3, r8
3401c526:	463a      	mov	r2, r7
3401c528:	6a21      	ldr	r1, [r4, #32]
3401c52a:	4628      	mov	r0, r5
3401c52c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3401c52e:	47b0      	blx	r6
3401c530:	2800      	cmp	r0, #0
3401c532:	dc08      	bgt.n	3401c546 <__sflush_r+0xfa>
3401c534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401c538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401c53c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401c540:	81a3      	strh	r3, [r4, #12]
3401c542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401c546:	4407      	add	r7, r0
3401c548:	eba8 0800 	sub.w	r8, r8, r0
3401c54c:	e7e7      	b.n	3401c51e <__sflush_r+0xd2>
3401c54e:	bf00      	nop
3401c550:	dfbffffe 	.word	0xdfbffffe

3401c554 <_fflush_r>:
3401c554:	b538      	push	{r3, r4, r5, lr}
3401c556:	690b      	ldr	r3, [r1, #16]
3401c558:	4605      	mov	r5, r0
3401c55a:	460c      	mov	r4, r1
3401c55c:	b913      	cbnz	r3, 3401c564 <_fflush_r+0x10>
3401c55e:	2500      	movs	r5, #0
3401c560:	4628      	mov	r0, r5
3401c562:	bd38      	pop	{r3, r4, r5, pc}
3401c564:	b118      	cbz	r0, 3401c56e <_fflush_r+0x1a>
3401c566:	6a03      	ldr	r3, [r0, #32]
3401c568:	b90b      	cbnz	r3, 3401c56e <_fflush_r+0x1a>
3401c56a:	f7fe f845 	bl	3401a5f8 <__sinit>
3401c56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401c572:	2b00      	cmp	r3, #0
3401c574:	d0f3      	beq.n	3401c55e <_fflush_r+0xa>
3401c576:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3401c578:	07d0      	lsls	r0, r2, #31
3401c57a:	d404      	bmi.n	3401c586 <_fflush_r+0x32>
3401c57c:	0599      	lsls	r1, r3, #22
3401c57e:	d402      	bmi.n	3401c586 <_fflush_r+0x32>
3401c580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401c582:	f7fe fc48 	bl	3401ae16 <__retarget_lock_acquire_recursive>
3401c586:	4628      	mov	r0, r5
3401c588:	4621      	mov	r1, r4
3401c58a:	f7ff ff5f 	bl	3401c44c <__sflush_r>
3401c58e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401c590:	4605      	mov	r5, r0
3401c592:	07da      	lsls	r2, r3, #31
3401c594:	d4e4      	bmi.n	3401c560 <_fflush_r+0xc>
3401c596:	89a3      	ldrh	r3, [r4, #12]
3401c598:	059b      	lsls	r3, r3, #22
3401c59a:	d4e1      	bmi.n	3401c560 <_fflush_r+0xc>
3401c59c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401c59e:	f7fe fc3b 	bl	3401ae18 <__retarget_lock_release_recursive>
3401c5a2:	e7dd      	b.n	3401c560 <_fflush_r+0xc>

3401c5a4 <__swhatbuf_r>:
3401c5a4:	b570      	push	{r4, r5, r6, lr}
3401c5a6:	460c      	mov	r4, r1
3401c5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401c5ac:	b096      	sub	sp, #88	@ 0x58
3401c5ae:	4615      	mov	r5, r2
3401c5b0:	2900      	cmp	r1, #0
3401c5b2:	461e      	mov	r6, r3
3401c5b4:	da0c      	bge.n	3401c5d0 <__swhatbuf_r+0x2c>
3401c5b6:	89a3      	ldrh	r3, [r4, #12]
3401c5b8:	2100      	movs	r1, #0
3401c5ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
3401c5be:	bf14      	ite	ne
3401c5c0:	2340      	movne	r3, #64	@ 0x40
3401c5c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3401c5c6:	2000      	movs	r0, #0
3401c5c8:	6031      	str	r1, [r6, #0]
3401c5ca:	602b      	str	r3, [r5, #0]
3401c5cc:	b016      	add	sp, #88	@ 0x58
3401c5ce:	bd70      	pop	{r4, r5, r6, pc}
3401c5d0:	466a      	mov	r2, sp
3401c5d2:	f000 f879 	bl	3401c6c8 <_fstat_r>
3401c5d6:	2800      	cmp	r0, #0
3401c5d8:	dbed      	blt.n	3401c5b6 <__swhatbuf_r+0x12>
3401c5da:	9901      	ldr	r1, [sp, #4]
3401c5dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3401c5e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
3401c5e4:	4259      	negs	r1, r3
3401c5e6:	4159      	adcs	r1, r3
3401c5e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401c5ec:	e7eb      	b.n	3401c5c6 <__swhatbuf_r+0x22>

3401c5ee <__smakebuf_r>:
3401c5ee:	898b      	ldrh	r3, [r1, #12]
3401c5f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401c5f2:	079d      	lsls	r5, r3, #30
3401c5f4:	4606      	mov	r6, r0
3401c5f6:	460c      	mov	r4, r1
3401c5f8:	d507      	bpl.n	3401c60a <__smakebuf_r+0x1c>
3401c5fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3401c5fe:	6023      	str	r3, [r4, #0]
3401c600:	6123      	str	r3, [r4, #16]
3401c602:	2301      	movs	r3, #1
3401c604:	6163      	str	r3, [r4, #20]
3401c606:	b003      	add	sp, #12
3401c608:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401c60a:	ab01      	add	r3, sp, #4
3401c60c:	466a      	mov	r2, sp
3401c60e:	f7ff ffc9 	bl	3401c5a4 <__swhatbuf_r>
3401c612:	9f00      	ldr	r7, [sp, #0]
3401c614:	4605      	mov	r5, r0
3401c616:	4630      	mov	r0, r6
3401c618:	4639      	mov	r1, r7
3401c61a:	f7fd fa9b 	bl	34019b54 <_malloc_r>
3401c61e:	b948      	cbnz	r0, 3401c634 <__smakebuf_r+0x46>
3401c620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401c624:	059a      	lsls	r2, r3, #22
3401c626:	d4ee      	bmi.n	3401c606 <__smakebuf_r+0x18>
3401c628:	f023 0303 	bic.w	r3, r3, #3
3401c62c:	f043 0302 	orr.w	r3, r3, #2
3401c630:	81a3      	strh	r3, [r4, #12]
3401c632:	e7e2      	b.n	3401c5fa <__smakebuf_r+0xc>
3401c634:	89a3      	ldrh	r3, [r4, #12]
3401c636:	6020      	str	r0, [r4, #0]
3401c638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3401c63c:	81a3      	strh	r3, [r4, #12]
3401c63e:	9b01      	ldr	r3, [sp, #4]
3401c640:	e9c4 0704 	strd	r0, r7, [r4, #16]
3401c644:	b15b      	cbz	r3, 3401c65e <__smakebuf_r+0x70>
3401c646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401c64a:	4630      	mov	r0, r6
3401c64c:	f000 f84e 	bl	3401c6ec <_isatty_r>
3401c650:	b128      	cbz	r0, 3401c65e <__smakebuf_r+0x70>
3401c652:	89a3      	ldrh	r3, [r4, #12]
3401c654:	f023 0303 	bic.w	r3, r3, #3
3401c658:	f043 0301 	orr.w	r3, r3, #1
3401c65c:	81a3      	strh	r3, [r4, #12]
3401c65e:	89a3      	ldrh	r3, [r4, #12]
3401c660:	431d      	orrs	r5, r3
3401c662:	81a5      	strh	r5, [r4, #12]
3401c664:	e7cf      	b.n	3401c606 <__smakebuf_r+0x18>

3401c666 <_raise_r>:
3401c666:	291f      	cmp	r1, #31
3401c668:	b538      	push	{r3, r4, r5, lr}
3401c66a:	4605      	mov	r5, r0
3401c66c:	460c      	mov	r4, r1
3401c66e:	d904      	bls.n	3401c67a <_raise_r+0x14>
3401c670:	2316      	movs	r3, #22
3401c672:	6003      	str	r3, [r0, #0]
3401c674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401c678:	bd38      	pop	{r3, r4, r5, pc}
3401c67a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
3401c67c:	b112      	cbz	r2, 3401c684 <_raise_r+0x1e>
3401c67e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
3401c682:	b94b      	cbnz	r3, 3401c698 <_raise_r+0x32>
3401c684:	4628      	mov	r0, r5
3401c686:	f000 f853 	bl	3401c730 <_getpid_r>
3401c68a:	4622      	mov	r2, r4
3401c68c:	4601      	mov	r1, r0
3401c68e:	4628      	mov	r0, r5
3401c690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3401c694:	f000 b83a 	b.w	3401c70c <_kill_r>
3401c698:	2b01      	cmp	r3, #1
3401c69a:	d00a      	beq.n	3401c6b2 <_raise_r+0x4c>
3401c69c:	1c59      	adds	r1, r3, #1
3401c69e:	d103      	bne.n	3401c6a8 <_raise_r+0x42>
3401c6a0:	2316      	movs	r3, #22
3401c6a2:	6003      	str	r3, [r0, #0]
3401c6a4:	2001      	movs	r0, #1
3401c6a6:	e7e7      	b.n	3401c678 <_raise_r+0x12>
3401c6a8:	2100      	movs	r1, #0
3401c6aa:	4620      	mov	r0, r4
3401c6ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
3401c6b0:	4798      	blx	r3
3401c6b2:	2000      	movs	r0, #0
3401c6b4:	e7e0      	b.n	3401c678 <_raise_r+0x12>
	...

3401c6b8 <raise>:
3401c6b8:	4b02      	ldr	r3, [pc, #8]	@ (3401c6c4 <raise+0xc>)
3401c6ba:	4601      	mov	r1, r0
3401c6bc:	6818      	ldr	r0, [r3, #0]
3401c6be:	f7ff bfd2 	b.w	3401c666 <_raise_r>
3401c6c2:	bf00      	nop
3401c6c4:	3401f254 	.word	0x3401f254

3401c6c8 <_fstat_r>:
3401c6c8:	b538      	push	{r3, r4, r5, lr}
3401c6ca:	2300      	movs	r3, #0
3401c6cc:	4d06      	ldr	r5, [pc, #24]	@ (3401c6e8 <_fstat_r+0x20>)
3401c6ce:	4604      	mov	r4, r0
3401c6d0:	4608      	mov	r0, r1
3401c6d2:	4611      	mov	r1, r2
3401c6d4:	602b      	str	r3, [r5, #0]
3401c6d6:	f7e5 fa2b 	bl	34001b30 <_fstat>
3401c6da:	1c43      	adds	r3, r0, #1
3401c6dc:	d102      	bne.n	3401c6e4 <_fstat_r+0x1c>
3401c6de:	682b      	ldr	r3, [r5, #0]
3401c6e0:	b103      	cbz	r3, 3401c6e4 <_fstat_r+0x1c>
3401c6e2:	6023      	str	r3, [r4, #0]
3401c6e4:	bd38      	pop	{r3, r4, r5, pc}
3401c6e6:	bf00      	nop
3401c6e8:	3401faa0 	.word	0x3401faa0

3401c6ec <_isatty_r>:
3401c6ec:	b538      	push	{r3, r4, r5, lr}
3401c6ee:	2300      	movs	r3, #0
3401c6f0:	4d05      	ldr	r5, [pc, #20]	@ (3401c708 <_isatty_r+0x1c>)
3401c6f2:	4604      	mov	r4, r0
3401c6f4:	4608      	mov	r0, r1
3401c6f6:	602b      	str	r3, [r5, #0]
3401c6f8:	f7e5 fa2a 	bl	34001b50 <_isatty>
3401c6fc:	1c43      	adds	r3, r0, #1
3401c6fe:	d102      	bne.n	3401c706 <_isatty_r+0x1a>
3401c700:	682b      	ldr	r3, [r5, #0]
3401c702:	b103      	cbz	r3, 3401c706 <_isatty_r+0x1a>
3401c704:	6023      	str	r3, [r4, #0]
3401c706:	bd38      	pop	{r3, r4, r5, pc}
3401c708:	3401faa0 	.word	0x3401faa0

3401c70c <_kill_r>:
3401c70c:	b538      	push	{r3, r4, r5, lr}
3401c70e:	2300      	movs	r3, #0
3401c710:	4d06      	ldr	r5, [pc, #24]	@ (3401c72c <_kill_r+0x20>)
3401c712:	4604      	mov	r4, r0
3401c714:	4608      	mov	r0, r1
3401c716:	4611      	mov	r1, r2
3401c718:	602b      	str	r3, [r5, #0]
3401c71a:	f7e5 f9c5 	bl	34001aa8 <_kill>
3401c71e:	1c43      	adds	r3, r0, #1
3401c720:	d102      	bne.n	3401c728 <_kill_r+0x1c>
3401c722:	682b      	ldr	r3, [r5, #0]
3401c724:	b103      	cbz	r3, 3401c728 <_kill_r+0x1c>
3401c726:	6023      	str	r3, [r4, #0]
3401c728:	bd38      	pop	{r3, r4, r5, pc}
3401c72a:	bf00      	nop
3401c72c:	3401faa0 	.word	0x3401faa0

3401c730 <_getpid_r>:
3401c730:	f7e5 b9b2 	b.w	34001a98 <_getpid>

3401c734 <_calloc_r>:
3401c734:	b570      	push	{r4, r5, r6, lr}
3401c736:	fba1 5402 	umull	r5, r4, r1, r2
3401c73a:	b93c      	cbnz	r4, 3401c74c <_calloc_r+0x18>
3401c73c:	4629      	mov	r1, r5
3401c73e:	f7fd fa09 	bl	34019b54 <_malloc_r>
3401c742:	4606      	mov	r6, r0
3401c744:	b928      	cbnz	r0, 3401c752 <_calloc_r+0x1e>
3401c746:	2600      	movs	r6, #0
3401c748:	4630      	mov	r0, r6
3401c74a:	bd70      	pop	{r4, r5, r6, pc}
3401c74c:	220c      	movs	r2, #12
3401c74e:	6002      	str	r2, [r0, #0]
3401c750:	e7f9      	b.n	3401c746 <_calloc_r+0x12>
3401c752:	462a      	mov	r2, r5
3401c754:	4621      	mov	r1, r4
3401c756:	f7fe f8df 	bl	3401a918 <memset>
3401c75a:	e7f5      	b.n	3401c748 <_calloc_r+0x14>

3401c75c <__ascii_mbtowc>:
3401c75c:	b082      	sub	sp, #8
3401c75e:	b901      	cbnz	r1, 3401c762 <__ascii_mbtowc+0x6>
3401c760:	a901      	add	r1, sp, #4
3401c762:	b142      	cbz	r2, 3401c776 <__ascii_mbtowc+0x1a>
3401c764:	b14b      	cbz	r3, 3401c77a <__ascii_mbtowc+0x1e>
3401c766:	7813      	ldrb	r3, [r2, #0]
3401c768:	600b      	str	r3, [r1, #0]
3401c76a:	7812      	ldrb	r2, [r2, #0]
3401c76c:	1e10      	subs	r0, r2, #0
3401c76e:	bf18      	it	ne
3401c770:	2001      	movne	r0, #1
3401c772:	b002      	add	sp, #8
3401c774:	4770      	bx	lr
3401c776:	4610      	mov	r0, r2
3401c778:	e7fb      	b.n	3401c772 <__ascii_mbtowc+0x16>
3401c77a:	f06f 0001 	mvn.w	r0, #1
3401c77e:	e7f8      	b.n	3401c772 <__ascii_mbtowc+0x16>

3401c780 <__ascii_wctomb>:
3401c780:	4603      	mov	r3, r0
3401c782:	4608      	mov	r0, r1
3401c784:	b141      	cbz	r1, 3401c798 <__ascii_wctomb+0x18>
3401c786:	2aff      	cmp	r2, #255	@ 0xff
3401c788:	d904      	bls.n	3401c794 <__ascii_wctomb+0x14>
3401c78a:	228a      	movs	r2, #138	@ 0x8a
3401c78c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401c790:	601a      	str	r2, [r3, #0]
3401c792:	4770      	bx	lr
3401c794:	2001      	movs	r0, #1
3401c796:	700a      	strb	r2, [r1, #0]
3401c798:	4770      	bx	lr
	...

3401c79c <_sbrk>:
3401c79c:	4a04      	ldr	r2, [pc, #16]	@ (3401c7b0 <_sbrk+0x14>)
3401c79e:	4603      	mov	r3, r0
3401c7a0:	6811      	ldr	r1, [r2, #0]
3401c7a2:	b909      	cbnz	r1, 3401c7a8 <_sbrk+0xc>
3401c7a4:	4903      	ldr	r1, [pc, #12]	@ (3401c7b4 <_sbrk+0x18>)
3401c7a6:	6011      	str	r1, [r2, #0]
3401c7a8:	6810      	ldr	r0, [r2, #0]
3401c7aa:	4403      	add	r3, r0
3401c7ac:	6013      	str	r3, [r2, #0]
3401c7ae:	4770      	bx	lr
3401c7b0:	3401faa8 	.word	0x3401faa8
3401c7b4:	3401fab0 	.word	0x3401fab0

3401c7b8 <_init>:
3401c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401c7ba:	bf00      	nop
3401c7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401c7be:	bc08      	pop	{r3}
3401c7c0:	469e      	mov	lr, r3
3401c7c2:	4770      	bx	lr

3401c7c4 <_fini>:
3401c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401c7c6:	bf00      	nop
3401c7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401c7ca:	bc08      	pop	{r3}
3401c7cc:	469e      	mov	lr, r3
3401c7ce:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3401c7e0 <SECURE_SystemCoreClockUpdate>:
3401c7e0:	e97f e97f 	sg
3401c7e4:	f7e7 b8d2 	b.w	3400398c <__acle_se_SECURE_SystemCoreClockUpdate>
	...
