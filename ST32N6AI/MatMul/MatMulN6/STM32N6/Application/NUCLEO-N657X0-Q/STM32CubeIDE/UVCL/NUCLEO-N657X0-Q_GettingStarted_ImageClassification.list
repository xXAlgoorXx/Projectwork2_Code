
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f578  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  3400fce0  3400fce0  0000fce0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002444  3400fd00  3400fd00  0000fd00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  34012144  34012144  00012370  2**0
                  CONTENTS
  5 .ARM          00000008  34012144  34012144  00012144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  3401214c  34012370  00012370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  3401214c  3401214c  0001214c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  34012150  34012150  00012150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000021c  34012154  34012154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000009c4  34012370  34012370  00012370  2**2
                  ALLOC
 11 ._user_heap_stack 00004204  34012d34  34012d34  00012370  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  00012370  2**0
                  CONTENTS, READONLY
 13 .debug_info   00064083  00000000  00000000  000123aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000978d  00000000  00000000  0007642d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001dac8  00000000  00000000  0007fbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000028f8  00000000  00000000  0009d688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000331a  00000000  00000000  0009ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00078ad0  00000000  00000000  000a329a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004aaa6  00000000  00000000  0011bd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    003b1255  00000000  00000000  00166810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00517a65  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000080f4  00000000  00000000  00517aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000014c  00000000  00000000  0051fb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	34012370 	.word	0x34012370
3400076c:	00000000 	.word	0x00000000
34000770:	3400fcb0 	.word	0x3400fcb0

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	34012374 	.word	0x34012374
3400078c:	3400fcb0 	.word	0x3400fcb0

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b97e 	b.w	34000ab4 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	460c      	mov	r4, r1
340007d8:	2b00      	cmp	r3, #0
340007da:	d14d      	bne.n	34000878 <__udivmoddi4+0xa8>
340007dc:	428a      	cmp	r2, r1
340007de:	460f      	mov	r7, r1
340007e0:	4684      	mov	ip, r0
340007e2:	4696      	mov	lr, r2
340007e4:	fab2 f382 	clz	r3, r2
340007e8:	d960      	bls.n	340008ac <__udivmoddi4+0xdc>
340007ea:	b14b      	cbz	r3, 34000800 <__udivmoddi4+0x30>
340007ec:	fa02 fe03 	lsl.w	lr, r2, r3
340007f0:	f1c3 0220 	rsb	r2, r3, #32
340007f4:	409f      	lsls	r7, r3
340007f6:	fa00 fc03 	lsl.w	ip, r0, r3
340007fa:	fa20 f202 	lsr.w	r2, r0, r2
340007fe:	4317      	orrs	r7, r2
34000800:	ea4f 461e 	mov.w	r6, lr, lsr #16
34000804:	fa1f f48e 	uxth.w	r4, lr
34000808:	ea4f 421c 	mov.w	r2, ip, lsr #16
3400080c:	fbb7 f1f6 	udiv	r1, r7, r6
34000810:	fb06 7711 	mls	r7, r6, r1, r7
34000814:	fb01 f004 	mul.w	r0, r1, r4
34000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
3400081c:	4290      	cmp	r0, r2
3400081e:	d908      	bls.n	34000832 <__udivmoddi4+0x62>
34000820:	eb1e 0202 	adds.w	r2, lr, r2
34000824:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
34000828:	d202      	bcs.n	34000830 <__udivmoddi4+0x60>
3400082a:	4290      	cmp	r0, r2
3400082c:	f200 812d 	bhi.w	34000a8a <__udivmoddi4+0x2ba>
34000830:	4639      	mov	r1, r7
34000832:	1a12      	subs	r2, r2, r0
34000834:	fa1f fc8c 	uxth.w	ip, ip
34000838:	fbb2 f0f6 	udiv	r0, r2, r6
3400083c:	fb06 2210 	mls	r2, r6, r0, r2
34000840:	fb00 f404 	mul.w	r4, r0, r4
34000844:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
34000848:	4564      	cmp	r4, ip
3400084a:	d908      	bls.n	3400085e <__udivmoddi4+0x8e>
3400084c:	eb1e 0c0c 	adds.w	ip, lr, ip
34000850:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
34000854:	d202      	bcs.n	3400085c <__udivmoddi4+0x8c>
34000856:	4564      	cmp	r4, ip
34000858:	f200 811a 	bhi.w	34000a90 <__udivmoddi4+0x2c0>
3400085c:	4610      	mov	r0, r2
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	ebac 0c04 	sub.w	ip, ip, r4
34000866:	2100      	movs	r1, #0
34000868:	b125      	cbz	r5, 34000874 <__udivmoddi4+0xa4>
3400086a:	fa2c f303 	lsr.w	r3, ip, r3
3400086e:	2200      	movs	r2, #0
34000870:	e9c5 3200 	strd	r3, r2, [r5]
34000874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000878:	428b      	cmp	r3, r1
3400087a:	d905      	bls.n	34000888 <__udivmoddi4+0xb8>
3400087c:	b10d      	cbz	r5, 34000882 <__udivmoddi4+0xb2>
3400087e:	e9c5 0100 	strd	r0, r1, [r5]
34000882:	2100      	movs	r1, #0
34000884:	4608      	mov	r0, r1
34000886:	e7f5      	b.n	34000874 <__udivmoddi4+0xa4>
34000888:	fab3 f183 	clz	r1, r3
3400088c:	2900      	cmp	r1, #0
3400088e:	d14d      	bne.n	3400092c <__udivmoddi4+0x15c>
34000890:	42a3      	cmp	r3, r4
34000892:	f0c0 80f2 	bcc.w	34000a7a <__udivmoddi4+0x2aa>
34000896:	4290      	cmp	r0, r2
34000898:	f080 80ef 	bcs.w	34000a7a <__udivmoddi4+0x2aa>
3400089c:	4606      	mov	r6, r0
3400089e:	4623      	mov	r3, r4
340008a0:	4608      	mov	r0, r1
340008a2:	2d00      	cmp	r5, #0
340008a4:	d0e6      	beq.n	34000874 <__udivmoddi4+0xa4>
340008a6:	e9c5 6300 	strd	r6, r3, [r5]
340008aa:	e7e3      	b.n	34000874 <__udivmoddi4+0xa4>
340008ac:	2b00      	cmp	r3, #0
340008ae:	f040 80a2 	bne.w	340009f6 <__udivmoddi4+0x226>
340008b2:	1a8a      	subs	r2, r1, r2
340008b4:	ea4f 471e 	mov.w	r7, lr, lsr #16
340008b8:	fa1f f68e 	uxth.w	r6, lr
340008bc:	2101      	movs	r1, #1
340008be:	fbb2 f4f7 	udiv	r4, r2, r7
340008c2:	fb07 2014 	mls	r0, r7, r4, r2
340008c6:	ea4f 421c 	mov.w	r2, ip, lsr #16
340008ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
340008ce:	fb06 f004 	mul.w	r0, r6, r4
340008d2:	4290      	cmp	r0, r2
340008d4:	d90f      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d6:	eb1e 0202 	adds.w	r2, lr, r2
340008da:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	4290      	cmp	r0, r2
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80c8 	beq.w	34000a84 <__udivmoddi4+0x2b4>
340008f4:	4644      	mov	r4, r8
340008f6:	1a12      	subs	r2, r2, r0
340008f8:	fa1f fc8c 	uxth.w	ip, ip
340008fc:	fbb2 f0f7 	udiv	r0, r2, r7
34000900:	fb07 2210 	mls	r2, r7, r0, r2
34000904:	fb00 f606 	mul.w	r6, r0, r6
34000908:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
3400090c:	4566      	cmp	r6, ip
3400090e:	d908      	bls.n	34000922 <__udivmoddi4+0x152>
34000910:	eb1e 0c0c 	adds.w	ip, lr, ip
34000914:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
34000918:	d202      	bcs.n	34000920 <__udivmoddi4+0x150>
3400091a:	4566      	cmp	r6, ip
3400091c:	f200 80bb 	bhi.w	34000a96 <__udivmoddi4+0x2c6>
34000920:	4610      	mov	r0, r2
34000922:	ebac 0c06 	sub.w	ip, ip, r6
34000926:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa04 fe01 	lsl.w	lr, r4, r1
34000936:	fa22 f706 	lsr.w	r7, r2, r6
3400093a:	fa20 fc06 	lsr.w	ip, r0, r6
3400093e:	40f4      	lsrs	r4, r6
34000940:	408a      	lsls	r2, r1
34000942:	431f      	orrs	r7, r3
34000944:	ea4e 030c 	orr.w	r3, lr, ip
34000948:	fa00 fe01 	lsl.w	lr, r0, r1
3400094c:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000950:	ea4f 4913 	mov.w	r9, r3, lsr #16
34000954:	fa1f fc87 	uxth.w	ip, r7
34000958:	fbb4 f0f8 	udiv	r0, r4, r8
3400095c:	fb08 4410 	mls	r4, r8, r0, r4
34000960:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
34000964:	fb00 f90c 	mul.w	r9, r0, ip
34000968:	45a1      	cmp	r9, r4
3400096a:	d90e      	bls.n	3400098a <__udivmoddi4+0x1ba>
3400096c:	193c      	adds	r4, r7, r4
3400096e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
34000972:	bf2c      	ite	cs
34000974:	f04f 0b01 	movcs.w	fp, #1
34000978:	f04f 0b00 	movcc.w	fp, #0
3400097c:	45a1      	cmp	r9, r4
3400097e:	d903      	bls.n	34000988 <__udivmoddi4+0x1b8>
34000980:	f1bb 0f00 	cmp.w	fp, #0
34000984:	f000 8093 	beq.w	34000aae <__udivmoddi4+0x2de>
34000988:	4650      	mov	r0, sl
3400098a:	eba4 0409 	sub.w	r4, r4, r9
3400098e:	fa1f f983 	uxth.w	r9, r3
34000992:	fbb4 f3f8 	udiv	r3, r4, r8
34000996:	fb08 4413 	mls	r4, r8, r3, r4
3400099a:	fb03 fc0c 	mul.w	ip, r3, ip
3400099e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
340009a2:	45a4      	cmp	ip, r4
340009a4:	d906      	bls.n	340009b4 <__udivmoddi4+0x1e4>
340009a6:	193c      	adds	r4, r7, r4
340009a8:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
340009ac:	d201      	bcs.n	340009b2 <__udivmoddi4+0x1e2>
340009ae:	45a4      	cmp	ip, r4
340009b0:	d87a      	bhi.n	34000aa8 <__udivmoddi4+0x2d8>
340009b2:	4643      	mov	r3, r8
340009b4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
340009b8:	eba4 040c 	sub.w	r4, r4, ip
340009bc:	fba0 9802 	umull	r9, r8, r0, r2
340009c0:	4544      	cmp	r4, r8
340009c2:	46cc      	mov	ip, r9
340009c4:	4643      	mov	r3, r8
340009c6:	d302      	bcc.n	340009ce <__udivmoddi4+0x1fe>
340009c8:	d106      	bne.n	340009d8 <__udivmoddi4+0x208>
340009ca:	45ce      	cmp	lr, r9
340009cc:	d204      	bcs.n	340009d8 <__udivmoddi4+0x208>
340009ce:	3801      	subs	r0, #1
340009d0:	ebb9 0c02 	subs.w	ip, r9, r2
340009d4:	eb68 0307 	sbc.w	r3, r8, r7
340009d8:	b15d      	cbz	r5, 340009f2 <__udivmoddi4+0x222>
340009da:	ebbe 020c 	subs.w	r2, lr, ip
340009de:	eb64 0403 	sbc.w	r4, r4, r3
340009e2:	fa04 f606 	lsl.w	r6, r4, r6
340009e6:	fa22 f301 	lsr.w	r3, r2, r1
340009ea:	40cc      	lsrs	r4, r1
340009ec:	431e      	orrs	r6, r3
340009ee:	e9c5 6400 	strd	r6, r4, [r5]
340009f2:	2100      	movs	r1, #0
340009f4:	e73e      	b.n	34000874 <__udivmoddi4+0xa4>
340009f6:	fa02 fe03 	lsl.w	lr, r2, r3
340009fa:	f1c3 0120 	rsb	r1, r3, #32
340009fe:	fa04 f203 	lsl.w	r2, r4, r3
34000a02:	fa00 fc03 	lsl.w	ip, r0, r3
34000a06:	40cc      	lsrs	r4, r1
34000a08:	ea4f 471e 	mov.w	r7, lr, lsr #16
34000a0c:	fa20 f101 	lsr.w	r1, r0, r1
34000a10:	fa1f f68e 	uxth.w	r6, lr
34000a14:	fbb4 f0f7 	udiv	r0, r4, r7
34000a18:	430a      	orrs	r2, r1
34000a1a:	fb07 4410 	mls	r4, r7, r0, r4
34000a1e:	0c11      	lsrs	r1, r2, #16
34000a20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
34000a24:	fb00 f406 	mul.w	r4, r0, r6
34000a28:	428c      	cmp	r4, r1
34000a2a:	d90e      	bls.n	34000a4a <__udivmoddi4+0x27a>
34000a2c:	eb1e 0101 	adds.w	r1, lr, r1
34000a30:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
34000a34:	bf2c      	ite	cs
34000a36:	f04f 0901 	movcs.w	r9, #1
34000a3a:	f04f 0900 	movcc.w	r9, #0
34000a3e:	428c      	cmp	r4, r1
34000a40:	d902      	bls.n	34000a48 <__udivmoddi4+0x278>
34000a42:	f1b9 0f00 	cmp.w	r9, #0
34000a46:	d02c      	beq.n	34000aa2 <__udivmoddi4+0x2d2>
34000a48:	4640      	mov	r0, r8
34000a4a:	1b09      	subs	r1, r1, r4
34000a4c:	b292      	uxth	r2, r2
34000a4e:	fbb1 f4f7 	udiv	r4, r1, r7
34000a52:	fb07 1114 	mls	r1, r7, r4, r1
34000a56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34000a5a:	fb04 f106 	mul.w	r1, r4, r6
34000a5e:	4291      	cmp	r1, r2
34000a60:	d907      	bls.n	34000a72 <__udivmoddi4+0x2a2>
34000a62:	eb1e 0202 	adds.w	r2, lr, r2
34000a66:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
34000a6a:	d201      	bcs.n	34000a70 <__udivmoddi4+0x2a0>
34000a6c:	4291      	cmp	r1, r2
34000a6e:	d815      	bhi.n	34000a9c <__udivmoddi4+0x2cc>
34000a70:	4644      	mov	r4, r8
34000a72:	1a52      	subs	r2, r2, r1
34000a74:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
34000a78:	e721      	b.n	340008be <__udivmoddi4+0xee>
34000a7a:	1a86      	subs	r6, r0, r2
34000a7c:	eb64 0303 	sbc.w	r3, r4, r3
34000a80:	2001      	movs	r0, #1
34000a82:	e70e      	b.n	340008a2 <__udivmoddi4+0xd2>
34000a84:	3c02      	subs	r4, #2
34000a86:	4472      	add	r2, lr
34000a88:	e735      	b.n	340008f6 <__udivmoddi4+0x126>
34000a8a:	3902      	subs	r1, #2
34000a8c:	4472      	add	r2, lr
34000a8e:	e6d0      	b.n	34000832 <__udivmoddi4+0x62>
34000a90:	44f4      	add	ip, lr
34000a92:	3802      	subs	r0, #2
34000a94:	e6e3      	b.n	3400085e <__udivmoddi4+0x8e>
34000a96:	44f4      	add	ip, lr
34000a98:	3802      	subs	r0, #2
34000a9a:	e742      	b.n	34000922 <__udivmoddi4+0x152>
34000a9c:	3c02      	subs	r4, #2
34000a9e:	4472      	add	r2, lr
34000aa0:	e7e7      	b.n	34000a72 <__udivmoddi4+0x2a2>
34000aa2:	3802      	subs	r0, #2
34000aa4:	4471      	add	r1, lr
34000aa6:	e7d0      	b.n	34000a4a <__udivmoddi4+0x27a>
34000aa8:	3b02      	subs	r3, #2
34000aaa:	443c      	add	r4, r7
34000aac:	e782      	b.n	340009b4 <__udivmoddi4+0x1e4>
34000aae:	3802      	subs	r0, #2
34000ab0:	443c      	add	r4, r7
34000ab2:	e76a      	b.n	3400098a <__udivmoddi4+0x1ba>

34000ab4 <__aeabi_idiv0>:
34000ab4:	4770      	bx	lr
34000ab6:	bf00      	nop

34000ab8 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
34000ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
34000aba:	4b15      	ldr	r3, [pc, #84]	@ (34000b10 <Fuse_Programming+0x58>)

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000abc:	217c      	movs	r1, #124	@ 0x7c
34000abe:	aa01      	add	r2, sp, #4
34000ac0:	a802      	add	r0, sp, #8
  sBsecHandler.Instance = BSEC;
34000ac2:	9302      	str	r3, [sp, #8]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000ac4:	f001 fc64 	bl	34002390 <HAL_BSEC_OTP_Read>
34000ac8:	4603      	mov	r3, r0
34000aca:	b9e0      	cbnz	r0, 34000b06 <Fuse_Programming+0x4e>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
    if ((data & bit_mask) != bit_mask)
34000acc:	9a01      	ldr	r2, [sp, #4]
34000ace:	f402 31c0 	and.w	r1, r2, #98304	@ 0x18000
34000ad2:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
34000ad6:	d017      	beq.n	34000b08 <Fuse_Programming+0x50>
    {
      data |= bit_mask;
34000ad8:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000adc:	217c      	movs	r1, #124	@ 0x7c
34000ade:	a802      	add	r0, sp, #8
      data |= bit_mask;
34000ae0:	9201      	str	r2, [sp, #4]
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000ae2:	f001 fc71 	bl	340023c8 <HAL_BSEC_OTP_Program>
34000ae6:	b968      	cbnz	r0, 34000b04 <Fuse_Programming+0x4c>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000ae8:	217c      	movs	r1, #124	@ 0x7c
34000aea:	aa01      	add	r2, sp, #4
34000aec:	a802      	add	r0, sp, #8
34000aee:	f001 fc4f 	bl	34002390 <HAL_BSEC_OTP_Read>
34000af2:	b930      	cbnz	r0, 34000b02 <Fuse_Programming+0x4a>
        {
          if ((data & bit_mask) != bit_mask)
34000af4:	9b01      	ldr	r3, [sp, #4]
34000af6:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
34000afa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
34000afe:	d003      	beq.n	34000b08 <Fuse_Programming+0x50>
34000b00:	e7fe      	b.n	34000b00 <Fuse_Programming+0x48>
34000b02:	e7fe      	b.n	34000b02 <Fuse_Programming+0x4a>
34000b04:	e7fe      	b.n	34000b04 <Fuse_Programming+0x4c>
34000b06:	e7fe      	b.n	34000b06 <Fuse_Programming+0x4e>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
34000b08:	b005      	add	sp, #20
34000b0a:	f85d fb04 	ldr.w	pc, [sp], #4
34000b0e:	bf00      	nop
34000b10:	56009000 	.word	0x56009000

34000b14 <LL_MEM_EnableClock>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
34000b14:	4b04      	ldr	r3, [pc, #16]	@ (34000b28 <LL_MEM_EnableClock+0x14>)
{
34000b16:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMENSR, Memories);
34000b18:	f8c3 0a4c 	str.w	r0, [r3, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
34000b1c:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34000b20:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000b22:	9b01      	ldr	r3, [sp, #4]
}
34000b24:	b002      	add	sp, #8
34000b26:	4770      	bx	lr
34000b28:	56028000 	.word	0x56028000

34000b2c <LL_MEM_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000b2c:	4b04      	ldr	r3, [pc, #16]	@ (34000b40 <LL_MEM_EnableClockLowPower+0x14>)
{
34000b2e:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000b30:	f8c3 0a8c 	str.w	r0, [r3, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
34000b34:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34000b38:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000b3a:	9b01      	ldr	r3, [sp, #4]
}
34000b3c:	b002      	add	sp, #8
34000b3e:	4770      	bx	lr
34000b40:	56028000 	.word	0x56028000

34000b44 <LL_AHB5_GRP1_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000b44:	4b04      	ldr	r3, [pc, #16]	@ (34000b58 <LL_AHB5_GRP1_EnableClockLowPower+0x14>)
{
34000b46:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000b48:	f8c3 0aa0 	str.w	r0, [r3, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
34000b4c:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34000b50:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000b52:	9b01      	ldr	r3, [sp, #4]
}
34000b54:	b002      	add	sp, #8
34000b56:	4770      	bx	lr
34000b58:	56028000 	.word	0x56028000

34000b5c <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
34000b5c:	b530      	push	{r4, r5, lr}
34000b5e:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34000b62:	2240      	movs	r2, #64	@ 0x40
34000b64:	2100      	movs	r1, #0
34000b66:	4668      	mov	r0, sp
34000b68:	f00d f952 	bl	3400de10 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34000b6c:	2298      	movs	r2, #152	@ 0x98
34000b6e:	2100      	movs	r1, #0
34000b70:	a810      	add	r0, sp, #64	@ 0x40
34000b72:	f00d f94d 	bl	3400de10 <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34000b76:	f44f 72c8 	mov.w	r2, #400	@ 0x190
34000b7a:	2100      	movs	r1, #0
34000b7c:	a836      	add	r0, sp, #216	@ 0xd8
34000b7e:	f00d f947 	bl	3400de10 <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
34000b82:	2001      	movs	r0, #1
34000b84:	f000 fe72 	bl	3400186c <BSP_SMPS_Init>
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL1.PLLM = 2;
  RCC_OscInitStruct.PLL1.PLLN = 25;
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34000b88:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000b8a:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL1.PLLN = 25;
34000b8c:	2219      	movs	r2, #25
  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL2.PLLM = 8;
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
  RCC_OscInitStruct.PLL2.PLLN = 125;
34000b8e:	217d      	movs	r1, #125	@ 0x7d
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34000b90:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34000b92:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
34000b96:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL2.PLLM = 8;
34000b9a:	2208      	movs	r2, #8

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL3.PLLM = 8;
  RCC_OscInitStruct.PLL3.PLLN = 225;
34000b9c:	21e1      	movs	r1, #225	@ 0xe1
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34000b9e:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
34000ba2:	e9cd 5321 	strd	r5, r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
34000ba6:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL3.PLLM = 8;
34000baa:	e9cd 3229 	strd	r3, r2, [sp, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34000bae:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
  RCC_OscInitStruct.PLL3.PLLP2 = 2;

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
34000bb2:	e9cd 532f 	strd	r5, r3, [sp, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLM = 8;
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
34000bb6:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000bba:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL4.PLLN = 225;
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
34000bbc:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL4.PLLP2 = 6;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34000bbe:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34000bc0:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
34000bc4:	e9cd 4527 	strd	r4, r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
34000bc8:	e9cd 452d 	strd	r4, r5, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
34000bcc:	e9cd 3334 	strd	r3, r3, [sp, #208]	@ 0xd0
  RCC_OscInitStruct.PLL1.PLLM = 2;
34000bd0:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL4.PLLN = 225;
34000bd2:	9133      	str	r1, [sp, #204]	@ 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34000bd4:	f003 fb6a 	bl	340042ac <HAL_RCC_OscConfig>
34000bd8:	b100      	cbz	r0, 34000bdc <SystemClock_Config+0x80>
  {
    while(1);
34000bda:	e7fe      	b.n	34000bda <SystemClock_Config+0x7e>
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34000bdc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34000be0:	227f      	movs	r2, #127	@ 0x7f
34000be2:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34000be6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34000bea:	9302      	str	r3, [sp, #8]
  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
34000bec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
34000bf0:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
34000bf4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
34000bf8:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34000bfc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
34000c00:	e9cd 0408 	strd	r0, r4, [sp, #32]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
34000c04:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34000c08:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34000c0c:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34000c10:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34000c12:	4668      	mov	r0, sp
34000c14:	f003 ff4c 	bl	34004ab0 <HAL_RCC_ClockConfig>
34000c18:	b100      	cbz	r0, 34000c1c <SystemClock_Config+0xc0>
  {
    while(1);
34000c1a:	e7fe      	b.n	34000c1a <SystemClock_Config+0xbe>

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34000c1c:	4b08      	ldr	r3, [pc, #32]	@ (34000c40 <SystemClock_Config+0xe4>)

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34000c1e:	2200      	movs	r2, #0
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34000c20:	9361      	str	r3, [sp, #388]	@ 0x184
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34000c22:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
34000c26:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34000c2a:	4b06      	ldr	r3, [pc, #24]	@ (34000c44 <SystemClock_Config+0xe8>)

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34000c2c:	a836      	add	r0, sp, #216	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34000c2e:	9362      	str	r3, [sp, #392]	@ 0x188
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34000c30:	f004 fafa 	bl	34005228 <HAL_RCCEx_PeriphCLKConfig>
34000c34:	b100      	cbz	r0, 34000c38 <SystemClock_Config+0xdc>
  {
    while (1);
34000c36:	e7fe      	b.n	34000c36 <SystemClock_Config+0xda>
  }
}
34000c38:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
34000c3c:	bd30      	pop	{r4, r5, pc}
34000c3e:	bf00      	nop
34000c40:	03000014 	.word	0x03000014
34000c44:	03000414 	.word	0x03000414

34000c48 <enableTiming_Cyc>:
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
34000c48:	4a06      	ldr	r2, [pc, #24]	@ (34000c64 <enableTiming_Cyc+0x1c>)
34000c4a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34000c4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
34000c52:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable cycle counter
34000c56:	f5a2 425d 	sub.w	r2, r2, #56576	@ 0xdd00
34000c5a:	6813      	ldr	r3, [r2, #0]
34000c5c:	f043 0301 	orr.w	r3, r3, #1
34000c60:	6013      	str	r3, [r2, #0]
}
34000c62:	4770      	bx	lr
34000c64:	e000ed00 	.word	0xe000ed00

34000c68 <main>:
{
34000c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34000c6c:	ed2d 8b02 	vpush	{d8}
    BSP_LED_Init(LED_BLUE);
34000c70:	2000      	movs	r0, #0
{
34000c72:	b0a7      	sub	sp, #156	@ 0x9c
    BSP_LED_Init(LED_BLUE);
34000c74:	f000 fe38 	bl	340018e8 <BSP_LED_Init>
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34000c78:	4acf      	ldr	r2, [pc, #828]	@ (34000fb8 <main+0x350>)
34000c7a:	6813      	ldr	r3, [r2, #0]
34000c7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34000c80:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
34000c82:	4bce      	ldr	r3, [pc, #824]	@ (34000fbc <main+0x354>)
34000c84:	6a1a      	ldr	r2, [r3, #32]
34000c86:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
34000c8a:	621a      	str	r2, [r3, #32]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
34000c8c:	6a1a      	ldr	r2, [r3, #32]
34000c8e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
34000c92:	621a      	str	r2, [r3, #32]
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34000c94:	2210      	movs	r2, #16
34000c96:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34000c9a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34000c9e:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
34000ca0:	9b06      	ldr	r3, [sp, #24]
  HAL_Init();
34000ca2:	f001 fafd 	bl	340022a0 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34000ca6:	4bc6      	ldr	r3, [pc, #792]	@ (34000fc0 <main+0x358>)
34000ca8:	695a      	ldr	r2, [r3, #20]
34000caa:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
34000cae:	d111      	bne.n	34000cd4 <main+0x6c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34000cb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000cb4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
34000cb8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34000cbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000cc0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
34000cc4:	695a      	ldr	r2, [r3, #20]
34000cc6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
34000cca:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34000ccc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000cd0:	f3bf 8f6f 	isb	sy
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34000cd4:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34000cd8:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
  RAMCFG_HandleTypeDef hramcfg = {0};
34000cdc:	2600      	movs	r6, #0
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34000cde:	4cb7      	ldr	r4, [pc, #732]	@ (34000fbc <main+0x354>)
  SystemClock_Config();
34000ce0:	f7ff ff3c 	bl	34000b5c <SystemClock_Config>
34000ce4:	f8c4 7a60 	str.w	r7, [r4, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34000ce8:	f8d4 3260 	ldr.w	r3, [r4, #608]	@ 0x260
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000cec:	f8df b32c 	ldr.w	fp, [pc, #812]	@ 3400101c <main+0x3b4>
  tmpreg = READ_REG(RCC->AHB5ENR);
34000cf0:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
34000cf2:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
34000cf4:	2001      	movs	r0, #1
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34000cf6:	f8c4 7a20 	str.w	r7, [r4, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000cfa:	f8cb 7220 	str.w	r7, [fp, #544]	@ 0x220
34000cfe:	f7ff ff09 	bl	34000b14 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
34000d02:	2002      	movs	r0, #2
34000d04:	f7ff ff06 	bl	34000b14 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
34000d08:	2004      	movs	r0, #4
34000d0a:	f7ff ff03 	bl	34000b14 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
34000d0e:	2008      	movs	r0, #8
34000d10:	f7ff ff00 	bl	34000b14 <LL_MEM_EnableClock>
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34000d14:	f8c4 aa54 	str.w	sl, [r4, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
34000d18:	f8d4 3254 	ldr.w	r3, [r4, #596]	@ 0x254
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000d1c:	a80d      	add	r0, sp, #52	@ 0x34
34000d1e:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
34000d20:	9b07      	ldr	r3, [sp, #28]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34000d22:	4ba8      	ldr	r3, [pc, #672]	@ (34000fc4 <main+0x35c>)
  RAMCFG_HandleTypeDef hramcfg = {0};
34000d24:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34000d28:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000d2a:	f003 f897 	bl	34003e5c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34000d2e:	4ba6      	ldr	r3, [pc, #664]	@ (34000fc8 <main+0x360>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000d30:	a80d      	add	r0, sp, #52	@ 0x34
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34000d32:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000d34:	f003 f892 	bl	34003e5c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
34000d38:	4ba4      	ldr	r3, [pc, #656]	@ (34000fcc <main+0x364>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000d3a:	a80d      	add	r0, sp, #52	@ 0x34
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
34000d3c:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000d3e:	f003 f88d 	bl	34003e5c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34000d42:	4ba3      	ldr	r3, [pc, #652]	@ (34000fd0 <main+0x368>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000d44:	a80d      	add	r0, sp, #52	@ 0x34
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34000d46:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000d48:	f003 f888 	bl	34003e5c <HAL_RAMCFG_EnableAXISRAM>
  Fuse_Programming();
34000d4c:	f7ff feb4 	bl	34000ab8 <Fuse_Programming>
  npu_cache_init();
34000d50:	f000 fa5c 	bl	3400120c <npu_cache_init>
  npu_cache_enable();
34000d54:	f000 fa64 	bl	34001220 <npu_cache_enable>
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
34000d58:	f240 1301 	movw	r3, #257	@ 0x101
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34000d5c:	f44f 7900 	mov.w	r9, #512	@ 0x200
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34000d60:	2503      	movs	r5, #3
34000d62:	f04f 0802 	mov.w	r8, #2
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34000d66:	a905      	add	r1, sp, #20
34000d68:	4630      	mov	r0, r6
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
34000d6a:	f8ad 3014 	strh.w	r3, [sp, #20]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34000d6e:	f000 ffa3 	bl	34001cb8 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
34000d72:	4630      	mov	r0, r6
34000d74:	f000 ff14 	bl	34001ba0 <BSP_XSPI_NOR_EnableMemoryMappedMode>
34000d78:	f8c4 9a58 	str.w	r9, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
34000d7c:	f8d4 3258 	ldr.w	r3, [r4, #600]	@ 0x258
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34000d80:	2001      	movs	r0, #1
34000d82:	9309      	str	r3, [sp, #36]	@ 0x24
34000d84:	a90d      	add	r1, sp, #52	@ 0x34
  (void)tmpreg;
34000d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34000d88:	e9cd 850d 	strd	r8, r5, [sp, #52]	@ 0x34
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34000d8c:	f009 f8c6 	bl	34009f1c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
34000d90:	2008      	movs	r0, #8
34000d92:	a90d      	add	r1, sp, #52	@ 0x34
34000d94:	f009 f8c2 	bl	34009f1c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
34000d98:	2009      	movs	r0, #9
34000d9a:	a90d      	add	r1, sp, #52	@ 0x34
34000d9c:	f009 f8be 	bl	34009f1c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
34000da0:	200a      	movs	r0, #10
34000da2:	a90d      	add	r1, sp, #52	@ 0x34
34000da4:	f009 f8ba 	bl	34009f1c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
34000da8:	200b      	movs	r0, #11
34000daa:	a90d      	add	r1, sp, #52	@ 0x34
34000dac:	f009 f8b6 	bl	34009f1c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
34000db0:	2004      	movs	r0, #4
34000db2:	a90d      	add	r1, sp, #52	@ 0x34
34000db4:	f009 f8b2 	bl	34009f1c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000db8:	4629      	mov	r1, r5
34000dba:	4886      	ldr	r0, [pc, #536]	@ (34000fd4 <main+0x36c>)
34000dbc:	f009 f902 	bl	34009fc4 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000dc0:	4629      	mov	r1, r5
34000dc2:	4885      	ldr	r0, [pc, #532]	@ (34000fd8 <main+0x370>)
34000dc4:	f009 f8fe 	bl	34009fc4 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000dc8:	4629      	mov	r1, r5
34000dca:	4884      	ldr	r0, [pc, #528]	@ (34000fdc <main+0x374>)
34000dcc:	f009 f8fa 	bl	34009fc4 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000dd0:	4629      	mov	r1, r5
34000dd2:	4883      	ldr	r0, [pc, #524]	@ (34000fe0 <main+0x378>)
34000dd4:	f009 f8f6 	bl	34009fc4 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000dd8:	4629      	mov	r1, r5
34000dda:	4882      	ldr	r0, [pc, #520]	@ (34000fe4 <main+0x37c>)
34000ddc:	f009 f8f2 	bl	34009fc4 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000de0:	4629      	mov	r1, r5
34000de2:	4881      	ldr	r0, [pc, #516]	@ (34000fe8 <main+0x380>)
34000de4:	f009 f8ee 	bl	34009fc4 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000de8:	4629      	mov	r1, r5
34000dea:	4880      	ldr	r0, [pc, #512]	@ (34000fec <main+0x384>)
34000dec:	f009 f8ea 	bl	34009fc4 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000df0:	4629      	mov	r1, r5
34000df2:	487f      	ldr	r0, [pc, #508]	@ (34000ff0 <main+0x388>)
34000df4:	f009 f8e6 	bl	34009fc4 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000df8:	4629      	mov	r1, r5
34000dfa:	2004      	movs	r0, #4
34000dfc:	f009 f8e2 	bl	34009fc4 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34000e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34000e04:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
34000e08:	f8d4 2258 	ldr.w	r2, [r4, #600]	@ 0x258
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
34000e0c:	2020      	movs	r0, #32
34000e0e:	920a      	str	r2, [sp, #40]	@ 0x28
  (void)tmpreg;
34000e10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000e12:	2204      	movs	r2, #4
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
34000e14:	f8c4 3a18 	str.w	r3, [r4, #2584]	@ 0xa18
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
34000e18:	f8cb 3218 	str.w	r3, [fp, #536]	@ 0x218
34000e1c:	f7ff fe92 	bl	34000b44 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
34000e20:	4650      	mov	r0, sl
34000e22:	f7ff fe8f 	bl	34000b44 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
34000e26:	4638      	mov	r0, r7
34000e28:	f7ff fe8c 	bl	34000b44 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
34000e2c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34000e30:	f7ff fe88 	bl	34000b44 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
34000e34:	4640      	mov	r0, r8
34000e36:	f7ff fe85 	bl	34000b44 <LL_AHB5_GRP1_EnableClockLowPower>
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000e3a:	f8c4 2abc 	str.w	r2, [r4, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34000e3e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34000e42:	4648      	mov	r0, r9
34000e44:	930c      	str	r3, [sp, #48]	@ 0x30
  (void)tmpreg;
34000e46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000e48:	2340      	movs	r3, #64	@ 0x40
34000e4a:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34000e4e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  BSP_COM_Init(COM1, &com_config);
34000e52:	a90d      	add	r1, sp, #52	@ 0x34
34000e54:	930b      	str	r3, [sp, #44]	@ 0x2c
  (void)tmpreg;
34000e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34000e58:	f7ff fe68 	bl	34000b2c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
34000e5c:	2080      	movs	r0, #128	@ 0x80
34000e5e:	f7ff fe65 	bl	34000b2c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
34000e62:	f44f 7080 	mov.w	r0, #256	@ 0x100
34000e66:	f7ff fe61 	bl	34000b2c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
34000e6a:	2001      	movs	r0, #1
34000e6c:	f7ff fe5e 	bl	34000b2c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
34000e70:	4640      	mov	r0, r8
34000e72:	f7ff fe5b 	bl	34000b2c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
34000e76:	4610      	mov	r0, r2
34000e78:	f7ff fe58 	bl	34000b2c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
34000e7c:	2008      	movs	r0, #8
34000e7e:	f7ff fe55 	bl	34000b2c <LL_MEM_EnableClockLowPower>
  COM_InitTypeDef com_config = {
34000e82:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  BSP_COM_Init(COM1, &com_config);
34000e86:	4630      	mov	r0, r6
  COM_InitTypeDef com_config = {
34000e88:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
34000e8c:	960f      	str	r6, [sp, #60]	@ 0x3c
34000e8e:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
  BSP_COM_Init(COM1, &com_config);
34000e92:	f000 fd71 	bl	34001978 <BSP_COM_Init>
    printf("Init NN\n\r");
34000e96:	4857      	ldr	r0, [pc, #348]	@ (34000ff4 <main+0x38c>)
34000e98:	f00c fe72 	bl	3400db80 <iprintf>
    BSP_LED_On(LED_BLUE);
34000e9c:	4630      	mov	r0, r6
34000e9e:	f000 fd03 	bl	340018a8 <BSP_LED_On>
    enableTiming_Cyc();
34000ea2:	f7ff fed1 	bl	34000c48 <enableTiming_Cyc>
    const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_Default();
34000ea6:	f000 f9a5 	bl	340011f4 <LL_ATON_Input_Buffers_Info_Default>
34000eaa:	4604      	mov	r4, r0
    const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_Default();
34000eac:	f000 f9a6 	bl	340011fc <LL_ATON_Output_Buffers_Info_Default>
34000eb0:	6861      	ldr	r1, [r4, #4]
34000eb2:	4602      	mov	r2, r0
    return eb->blob_address;
  }

  static inline unsigned char *LL_Buffer_addr_base(const LL_Buffer_InfoTypeDef *buf)
  {
    if (buf->is_user_allocated)
34000eb4:	7d20      	ldrb	r0, [r4, #20]
    {
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
      return *tmp;
    }
    return buf->addr_base.p;
34000eb6:	460b      	mov	r3, r1
    if (buf->is_user_allocated)
34000eb8:	b100      	cbz	r0, 34000ebc <main+0x254>
      return *tmp;
34000eba:	680b      	ldr	r3, [r1, #0]
    int number_output = 0;
34000ebc:	2600      	movs	r6, #0
34000ebe:	2038      	movs	r0, #56	@ 0x38
  }

  static inline unsigned char *LL_Buffer_addr_start(const LL_Buffer_InfoTypeDef *buf)
  {
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34000ec0:	68a7      	ldr	r7, [r4, #8]
    nn_in = (int8_t *) LL_Buffer_addr_start(&nn_in_info[0]);
34000ec2:	f8df 815c 	ldr.w	r8, [pc, #348]	@ 34001020 <main+0x3b8>
34000ec6:	443b      	add	r3, r7
34000ec8:	f8c8 3000 	str.w	r3, [r8]
    while (nn_out_info[*number_output].name != NULL)
34000ecc:	fb00 f306 	mul.w	r3, r0, r6
34000ed0:	58d1      	ldr	r1, [r2, r3]
34000ed2:	2900      	cmp	r1, #0
34000ed4:	f040 80ba 	bne.w	3400104c <main+0x3e4>
34000ed8:	4947      	ldr	r1, [pc, #284]	@ (34000ff8 <main+0x390>)
34000eda:	08db      	lsrs	r3, r3, #3
34000edc:	434b      	muls	r3, r1
34000ede:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
34000ee2:	ad05      	add	r5, sp, #20
34000ee4:	a804      	add	r0, sp, #16
34000ee6:	3301      	adds	r3, #1
    for (int i = 0; i < *number_output; i++)
34000ee8:	3b01      	subs	r3, #1
34000eea:	f040 80b1 	bne.w	34001050 <main+0x3e8>
    return LL_Buffer_addr_base(buf) + buf->offset_limit;
  }

  static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
  {
    return buf->offset_end - buf->offset_start;
34000eee:	68e5      	ldr	r5, [r4, #12]
    printf("Input length: %lu bytes\n\r", nn_in_len);
34000ef0:	4842      	ldr	r0, [pc, #264]	@ (34000ffc <main+0x394>)
34000ef2:	1bed      	subs	r5, r5, r7
34000ef4:	4629      	mov	r1, r5
34000ef6:	f00c fe43 	bl	3400db80 <iprintf>
    printf("Number of output tensors: %d\n\r", number_output);
34000efa:	4631      	mov	r1, r6
34000efc:	4840      	ldr	r0, [pc, #256]	@ (34001000 <main+0x398>)
34000efe:	f00c fe3f 	bl	3400db80 <iprintf>
    int8_t matrix1_q[100] = {
34000f02:	4a40      	ldr	r2, [pc, #256]	@ (34001004 <main+0x39c>)
34000f04:	ab0d      	add	r3, sp, #52	@ 0x34
34000f06:	6810      	ldr	r0, [r2, #0]
34000f08:	6851      	ldr	r1, [r2, #4]
                float val = (out_buf[j] - output_zero_point) * output_scale;
34000f0a:	ed9f 8a3f 	vldr	s16, [pc, #252]	@ 34001008 <main+0x3a0>
    int8_t matrix1_q[100] = {
34000f0e:	c303      	stmia	r3!, {r0, r1}
34000f10:	8911      	ldrh	r1, [r2, #8]
34000f12:	7a92      	ldrb	r2, [r2, #10]
34000f14:	8019      	strh	r1, [r3, #0]
34000f16:	709a      	strb	r2, [r3, #2]
34000f18:	2100      	movs	r1, #0
34000f1a:	2259      	movs	r2, #89	@ 0x59
34000f1c:	f10d 003f 	add.w	r0, sp, #63	@ 0x3f
34000f20:	f00c ff76 	bl	3400de10 <memset>
        memcpy(nn_in, matrix1_q, nn_in_len);
34000f24:	462a      	mov	r2, r5
34000f26:	f8d8 0000 	ldr.w	r0, [r8]
34000f2a:	a90d      	add	r1, sp, #52	@ 0x34
34000f2c:	f00d f9ff 	bl	3400e32e <memcpy>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34000f30:	2d00      	cmp	r5, #0
34000f32:	dd1d      	ble.n	34000f70 <main+0x308>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000f34:	f8d8 3000 	ldr.w	r3, [r8]
34000f38:	f003 011f 	and.w	r1, r3, #31
34000f3c:	4429      	add	r1, r5
  __ASM volatile ("dsb 0xF":::"memory");
34000f3e:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
34000f42:	43da      	mvns	r2, r3
34000f44:	1858      	adds	r0, r3, r1
34000f46:	4402      	add	r2, r0
34000f48:	3920      	subs	r1, #32
34000f4a:	0952      	lsrs	r2, r2, #5
34000f4c:	3120      	adds	r1, #32
34000f4e:	f102 0e01 	add.w	lr, r2, #1
34000f52:	bfd8      	it	le
34000f54:	f04f 0e01 	movle.w	lr, #1
34000f58:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000f5c:	4a18      	ldr	r2, [pc, #96]	@ (34000fc0 <main+0x358>)
34000f5e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000f62:	3320      	adds	r3, #32
      } while ( op_size > 0 );
34000f64:	f00f c007 	le	lr, 34000f5c <main+0x2f4>
34000f68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000f6c:	f3bf 8f6f 	isb	sy
        ts[0] = HAL_GetTick();
34000f70:	f001 f9b4 	bl	340022dc <HAL_GetTick>
	DWT->CYCCNT = 0; // Reset counter
34000f74:	2400      	movs	r4, #0
34000f76:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 34001018 <main+0x3b0>
        ts[0] = HAL_GetTick();
34000f7a:	4607      	mov	r7, r0
	DWT->CYCCNT = 0; // Reset counter
34000f7c:	f8c9 4004 	str.w	r4, [r9, #4]
        LL_ATON_RT_Main(&NN_Instance_Default);
34000f80:	4822      	ldr	r0, [pc, #136]	@ (3400100c <main+0x3a4>)
34000f82:	f00b fb7b 	bl	3400c67c <LL_ATON_RT_Main>
	uint32_t cycles = DWT->CYCCNT;
34000f86:	f8d9 9004 	ldr.w	r9, [r9, #4]
        ts[1] = HAL_GetTick();
34000f8a:	f001 f9a7 	bl	340022dc <HAL_GetTick>
        printf("Inference time NPU: %lu ms\n\r", ts[1] - ts[0]);
34000f8e:	1bc1      	subs	r1, r0, r7
34000f90:	481f      	ldr	r0, [pc, #124]	@ (34001010 <main+0x3a8>)
34000f92:	f00c fdf5 	bl	3400db80 <iprintf>
        printf("Inference cycles NPU: %lu cycles\n\r", cyclesNPU);
34000f96:	4649      	mov	r1, r9
34000f98:	481e      	ldr	r0, [pc, #120]	@ (34001014 <main+0x3ac>)
34000f9a:	f00c fdf1 	bl	3400db80 <iprintf>
        for (int i = 0; i < number_output; i++) {
34000f9e:	f10d 0a14 	add.w	sl, sp, #20
34000fa2:	f10d 0b10 	add.w	fp, sp, #16
34000fa6:	42b4      	cmp	r4, r6
34000fa8:	d166      	bne.n	34001078 <main+0x410>
	DWT->CYCCNT = 0; // Reset counter
34000faa:	2700      	movs	r7, #0
        ts[0] = HAL_GetTick();
34000fac:	f001 f996 	bl	340022dc <HAL_GetTick>
	DWT->CYCCNT = 0; // Reset counter
34000fb0:	4b19      	ldr	r3, [pc, #100]	@ (34001018 <main+0x3b0>)
        ts[0] = HAL_GetTick();
34000fb2:	4604      	mov	r4, r0
	DWT->CYCCNT = 0; // Reset counter
34000fb4:	605f      	str	r7, [r3, #4]
34000fb6:	e035      	b.n	34001024 <main+0x3bc>
34000fb8:	e001e000 	.word	0xe001e000
34000fbc:	56028000 	.word	0x56028000
34000fc0:	e000ed00 	.word	0xe000ed00
34000fc4:	52023100 	.word	0x52023100
34000fc8:	52023180 	.word	0x52023180
34000fcc:	52023200 	.word	0x52023200
34000fd0:	52023280 	.word	0x52023280
34000fd4:	3000000a 	.word	0x3000000a
34000fd8:	30000005 	.word	0x30000005
34000fdc:	2000001c 	.word	0x2000001c
34000fe0:	2000001d 	.word	0x2000001d
34000fe4:	30000006 	.word	0x30000006
34000fe8:	30000007 	.word	0x30000007
34000fec:	30000008 	.word	0x30000008
34000ff0:	10000018 	.word	0x10000018
34000ff4:	3400fd00 	.word	0x3400fd00
34000ff8:	16db6db7 	.word	0x16db6db7
34000ffc:	3400fd0a 	.word	0x3400fd0a
34001000:	3400fd24 	.word	0x3400fd24
34001004:	3400fdc8 	.word	0x3400fdc8
34001008:	3c2d646c 	.word	0x3c2d646c
3400100c:	34012154 	.word	0x34012154
34001010:	3400fd43 	.word	0x3400fd43
34001014:	3400fd60 	.word	0x3400fd60
34001018:	e0001000 	.word	0xe0001000
3400101c:	56029000 	.word	0x56029000
34001020:	3401238c 	.word	0x3401238c
	uint32_t cycles = DWT->CYCCNT;
34001024:	f8d3 9004 	ldr.w	r9, [r3, #4]
		ts[1] = HAL_GetTick();
34001028:	f001 f958 	bl	340022dc <HAL_GetTick>
		printf("Inference time NPU: %lu ms\n\r", ts[1] - ts[0]);
3400102c:	1b01      	subs	r1, r0, r4
3400102e:	4835      	ldr	r0, [pc, #212]	@ (34001104 <main+0x49c>)
34001030:	f00c fda6 	bl	3400db80 <iprintf>
		printf("Inference cycles CPU: %lu cycles\n\r", cyclesCPU);
34001034:	4649      	mov	r1, r9
34001036:	4834      	ldr	r0, [pc, #208]	@ (34001108 <main+0x4a0>)
34001038:	f00c fda2 	bl	3400db80 <iprintf>
        BSP_LED_Toggle(LED_BLUE);
3400103c:	4638      	mov	r0, r7
3400103e:	f000 fc73 	bl	34001928 <BSP_LED_Toggle>
        HAL_Delay(1000);
34001042:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
34001046:	f001 f94f 	bl	340022e8 <HAL_Delay>
    {
3400104a:	e76b      	b.n	34000f24 <main+0x2bc>
        (*number_output)++;
3400104c:	3601      	adds	r6, #1
3400104e:	e73d      	b.n	34000ecc <main+0x264>
    if (buf->is_user_allocated)
34001050:	f892 c014 	ldrb.w	ip, [r2, #20]
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
34001054:	6851      	ldr	r1, [r2, #4]
    if (buf->is_user_allocated)
34001056:	f1bc 0f00 	cmp.w	ip, #0
3400105a:	d000      	beq.n	3400105e <main+0x3f6>
      return *tmp;
3400105c:	6809      	ldr	r1, [r1, #0]
    return LL_Buffer_addr_base(buf) + buf->offset_start;
3400105e:	f8d2 c008 	ldr.w	ip, [r2, #8]
34001062:	3238      	adds	r2, #56	@ 0x38
34001064:	4461      	add	r1, ip
        nn_out[i] = (int8_t *) LL_Buffer_addr_start(&nn_out_info[i]);
34001066:	f840 1b04 	str.w	r1, [r0], #4
    return buf->offset_end - buf->offset_start;
3400106a:	f852 1c2c 	ldr.w	r1, [r2, #-44]
3400106e:	eba1 010c 	sub.w	r1, r1, ip
        nn_out_len[i] = LL_Buffer_len(&nn_out_info[i]);
34001072:	f845 1b04 	str.w	r1, [r5], #4
    for (int i = 0; i < *number_output; i++)
34001076:	e737      	b.n	34000ee8 <main+0x280>
            int num_bytes = nn_out_len[i];
34001078:	f85a 9b04 	ldr.w	r9, [sl], #4
            int8_t *out_buf = nn_out[i];
3400107c:	f85b 7b04 	ldr.w	r7, [fp], #4
    if ( dsize > 0 ) {
34001080:	f1b9 0f00 	cmp.w	r9, #0
34001084:	dd1c      	ble.n	340010c0 <main+0x458>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34001086:	f007 011f 	and.w	r1, r7, #31
3400108a:	4449      	add	r1, r9
  __ASM volatile ("dsb 0xF":::"memory");
3400108c:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
34001090:	43fb      	mvns	r3, r7
34001092:	1878      	adds	r0, r7, r1
34001094:	4403      	add	r3, r0
34001096:	3920      	subs	r1, #32
34001098:	095b      	lsrs	r3, r3, #5
3400109a:	3120      	adds	r1, #32
3400109c:	f103 0e01 	add.w	lr, r3, #1
340010a0:	bfd8      	it	le
340010a2:	f04f 0e01 	movle.w	lr, #1
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
340010a6:	463a      	mov	r2, r7
340010a8:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
340010ac:	4b17      	ldr	r3, [pc, #92]	@ (3400110c <main+0x4a4>)
340010ae:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
340010b2:	3220      	adds	r2, #32
      } while ( op_size > 0 );
340010b4:	f00f c007 	le	lr, 340010ac <main+0x444>
340010b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340010bc:	f3bf 8f6f 	isb	sy
            printf("Output %d:\n\r", i);
340010c0:	4621      	mov	r1, r4
340010c2:	4813      	ldr	r0, [pc, #76]	@ (34001110 <main+0x4a8>)
340010c4:	f00c fd5c 	bl	3400db80 <iprintf>
            for (int j = 0; j < num_bytes; j++) {
340010c8:	2100      	movs	r1, #0
340010ca:	4549      	cmp	r1, r9
340010cc:	db04      	blt.n	340010d8 <main+0x470>
            printf("\n\r");
340010ce:	4811      	ldr	r0, [pc, #68]	@ (34001114 <main+0x4ac>)
340010d0:	f00c fd56 	bl	3400db80 <iprintf>
        for (int i = 0; i < number_output; i++) {
340010d4:	3401      	adds	r4, #1
340010d6:	e766      	b.n	34000fa6 <main+0x33e>
                float val = (out_buf[j] - output_zero_point) * output_scale;
340010d8:	567b      	ldrsb	r3, [r7, r1]
                printf("  %10.6f, Int: %4d\n\r", val, out_buf[j]);
340010da:	480f      	ldr	r0, [pc, #60]	@ (34001118 <main+0x4b0>)
                float val = (out_buf[j] - output_zero_point) * output_scale;
340010dc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
340010e0:	ee07 2a90 	vmov	s15, r2
340010e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340010e8:	ee67 7a88 	vmul.f32	s15, s15, s16
                printf("  %10.6f, Int: %4d\n\r", val, out_buf[j]);
340010ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
340010f0:	9300      	str	r3, [sp, #0]
340010f2:	ec53 2b17 	vmov	r2, r3, d7
                float val = (out_buf[j] - output_zero_point) * output_scale;
340010f6:	9103      	str	r1, [sp, #12]
                printf("  %10.6f, Int: %4d\n\r", val, out_buf[j]);
340010f8:	f00c fd42 	bl	3400db80 <iprintf>
            for (int j = 0; j < num_bytes; j++) {
340010fc:	9903      	ldr	r1, [sp, #12]
340010fe:	3101      	adds	r1, #1
34001100:	e7e3      	b.n	340010ca <main+0x462>
34001102:	bf00      	nop
34001104:	3400fd43 	.word	0x3400fd43
34001108:	3400fda5 	.word	0x3400fda5
3400110c:	e000ed00 	.word	0xe000ed00
34001110:	3400fd83 	.word	0x3400fd83
34001114:	3400fd8d 	.word	0x3400fd8d
34001118:	3400fd90 	.word	0x3400fd90

3400111c <_write>:
{
3400111c:	b510      	push	{r4, lr}
3400111e:	4614      	mov	r4, r2
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
34001120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001124:	b292      	uxth	r2, r2
34001126:	4802      	ldr	r0, [pc, #8]	@ (34001130 <_write+0x14>)
34001128:	f009 fad8 	bl	3400a6dc <HAL_UART_Transmit>
}
3400112c:	4620      	mov	r0, r4
3400112e:	bd10      	pop	{r4, pc}
34001130:	3401239c 	.word	0x3401239c

34001134 <IAC_IRQHandler>:
  while (1)
34001134:	e7fe      	b.n	34001134 <IAC_IRQHandler>
	...

34001138 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34001138:	b507      	push	{r0, r1, r2, lr}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400113a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
3400113e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001142:	f7ff fce7 	bl	34000b14 <LL_MEM_EnableClock>
34001146:	4b08      	ldr	r3, [pc, #32]	@ (34001168 <HAL_CACHEAXI_MspInit+0x30>)
34001148:	f8c3 2a60 	str.w	r2, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400114c:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
34001150:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
34001152:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001154:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400115c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
  __HAL_RCC_CACHEAXI_FORCE_RESET();
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
}
34001160:	b003      	add	sp, #12
34001162:	f85d fb04 	ldr.w	pc, [sp], #4
34001166:	bf00      	nop
34001168:	56028000 	.word	0x56028000

3400116c <assert_failed>:
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
3400116c:	be00      	bkpt	0x0000
  while (1)
3400116e:	e7fe      	b.n	3400116e <assert_failed+0x2>

34001170 <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
34001170:	b530      	push	{r4, r5, lr}

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
34001172:	4d13      	ldr	r5, [pc, #76]	@ (340011c0 <mcu_cache_invalidate_range+0x50>)
34001174:	696b      	ldr	r3, [r5, #20]
34001176:	03db      	lsls	r3, r3, #15
34001178:	d51f      	bpl.n	340011ba <mcu_cache_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
3400117a:	1a0a      	subs	r2, r1, r0
    if ( dsize > 0 ) {
3400117c:	2a00      	cmp	r2, #0
3400117e:	dd1c      	ble.n	340011ba <mcu_cache_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34001180:	f000 031f 	and.w	r3, r0, #31
34001184:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
34001186:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3400118a:	1884      	adds	r4, r0, r2
3400118c:	43c2      	mvns	r2, r0
3400118e:	1a1b      	subs	r3, r3, r0
34001190:	440b      	add	r3, r1
34001192:	4422      	add	r2, r4
34001194:	3b20      	subs	r3, #32
34001196:	0952      	lsrs	r2, r2, #5
34001198:	3320      	adds	r3, #32
3400119a:	f102 0e01 	add.w	lr, r2, #1
3400119e:	bfd8      	it	le
340011a0:	f04f 0e01 	movle.w	lr, #1
340011a4:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
340011a8:	f8c5 025c 	str.w	r0, [r5, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
340011ac:	3020      	adds	r0, #32
      } while ( op_size > 0 );
340011ae:	f00f c805 	le	lr, 340011a8 <mcu_cache_invalidate_range+0x38>
340011b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340011b6:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
340011ba:	2000      	movs	r0, #0
340011bc:	bd30      	pop	{r4, r5, pc}
340011be:	bf00      	nop
340011c0:	e000ed00 	.word	0xe000ed00

340011c4 <_ec_blob_cache_start_func_1>:
  void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
340011c4:	4901      	ldr	r1, [pc, #4]	@ (340011cc <_ec_blob_cache_start_func_1+0x8>)
340011c6:	4802      	ldr	r0, [pc, #8]	@ (340011d0 <_ec_blob_cache_start_func_1+0xc>)
340011c8:	f7ff bfd2 	b.w	34001170 <mcu_cache_invalidate_range>
340011cc:	342e0020 	.word	0x342e0020
340011d0:	342e0000 	.word	0x342e0000

340011d4 <LL_ATON_Set_User_Input_Buffer_Default>:
LL_ATON_User_IO_Result_t LL_ATON_Set_User_Input_Buffer_Default(uint32_t num, void* buffer, uint32_t size)
{
  { 
    return LL_ATON_User_IO_WRONG_INDEX;
  }
}
340011d4:	2003      	movs	r0, #3
340011d6:	4770      	bx	lr

340011d8 <LL_ATON_Get_User_Input_Buffer_Default>:
void *LL_ATON_Get_User_Input_Buffer_Default(uint32_t num)
{
  { 
    return NULL;
  }
}
340011d8:	2000      	movs	r0, #0
340011da:	4770      	bx	lr

340011dc <LL_ATON_Set_User_Output_Buffer_Default>:

LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_Default(uint32_t num, void* buffer, uint32_t size)
340011dc:	2003      	movs	r0, #3
340011de:	4770      	bx	lr

340011e0 <LL_ATON_Get_User_Output_Buffer_Default>:
  { 
    return LL_ATON_User_IO_WRONG_INDEX;
  }
}

void *LL_ATON_Get_User_Output_Buffer_Default(uint32_t num)
340011e0:	2000      	movs	r0, #0
340011e2:	4770      	bx	lr

340011e4 <LL_ATON_EC_Network_Init_Default>:
bool LL_ATON_EC_Network_Init_Default(void)
{


  return true;
}
340011e4:	2001      	movs	r0, #1
340011e6:	4770      	bx	lr

340011e8 <LL_ATON_EC_Inference_Init_Default>:

// this function should be called before each inference
bool LL_ATON_EC_Inference_Init_Default(void)
340011e8:	2001      	movs	r0, #1
340011ea:	4770      	bx	lr

340011ec <LL_ATON_EpochBlockItems_Default>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
340011ec:	4800      	ldr	r0, [pc, #0]	@ (340011f0 <LL_ATON_EpochBlockItems_Default+0x4>)
340011ee:	4770      	bx	lr
340011f0:	34010050 	.word	0x34010050

340011f4 <LL_ATON_Input_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
340011f4:	4800      	ldr	r0, [pc, #0]	@ (340011f8 <LL_ATON_Input_Buffers_Info_Default+0x4>)
340011f6:	4770      	bx	lr
340011f8:	3400ffe0 	.word	0x3400ffe0

340011fc <LL_ATON_Output_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
340011fc:	4800      	ldr	r0, [pc, #0]	@ (34001200 <LL_ATON_Output_Buffers_Info_Default+0x4>)
340011fe:	4770      	bx	lr
34001200:	3400ff50 	.word	0x3400ff50

34001204 <LL_ATON_Internal_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
34001204:	4800      	ldr	r0, [pc, #0]	@ (34001208 <LL_ATON_Internal_Buffers_Info_Default+0x4>)
34001206:	4770      	bx	lr
34001208:	3400fe88 	.word	0x3400fe88

3400120c <npu_cache_init>:

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
  hcacheaxi_s.Instance = CACHEAXI;
3400120c:	4802      	ldr	r0, [pc, #8]	@ (34001218 <npu_cache_init+0xc>)
3400120e:	4b03      	ldr	r3, [pc, #12]	@ (3400121c <npu_cache_init+0x10>)
34001210:	6003      	str	r3, [r0, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
34001212:	f001 b96d 	b.w	340024f0 <HAL_CACHEAXI_Init>
34001216:	bf00      	nop
34001218:	34012390 	.word	0x34012390
3400121c:	580dfc00 	.word	0x580dfc00

34001220 <npu_cache_enable>:
}

void npu_cache_enable(void)
{
34001220:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
34001222:	4c03      	ldr	r4, [pc, #12]	@ (34001230 <npu_cache_enable+0x10>)
34001224:	4620      	mov	r0, r4
34001226:	f001 f92f 	bl	34002488 <HAL_CACHEAXI_Enable>
  } while (status == HAL_BUSY);
3400122a:	2802      	cmp	r0, #2
3400122c:	d0fa      	beq.n	34001224 <npu_cache_enable+0x4>
}
3400122e:	bd10      	pop	{r4, pc}
34001230:	34012390 	.word	0x34012390

34001234 <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
34001234:	4770      	bx	lr

34001236 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
34001236:	e7fe      	b.n	34001236 <HardFault_Handler>

34001238 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
34001238:	e7fe      	b.n	34001238 <MemManage_Handler>

3400123a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
3400123a:	e7fe      	b.n	3400123a <BusFault_Handler>

3400123c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
3400123c:	e7fe      	b.n	3400123c <UsageFault_Handler>

3400123e <SecureFault_Handler>:
  * @retval None
  */
void SecureFault_Handler(void)
{
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
3400123e:	e7fe      	b.n	3400123e <SecureFault_Handler>

34001240 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
34001240:	4770      	bx	lr

34001242 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
34001242:	e7fe      	b.n	34001242 <DebugMon_Handler>

34001244 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
  while (1)
34001244:	e7fe      	b.n	34001244 <PendSV_Handler>

34001246 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
34001246:	f001 b83d 	b.w	340022c4 <HAL_IncTick>

3400124a <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
3400124a:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
3400124c:	f00a fc14 	bl	3400ba78 <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
}
34001250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
34001254:	f001 bb4e 	b.w	340028f4 <HAL_DCMIPP_CSI_IRQHandler>

34001258 <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
34001258:	b508      	push	{r3, lr}
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
3400125a:	f00a fc0d 	bl	3400ba78 <CMW_CAMERA_GetDCMIPPHandle>
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
3400125e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
34001262:	f001 ba11 	b.w	34002688 <HAL_DCMIPP_IRQHandler>

34001266 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
34001266:	2001      	movs	r0, #1
34001268:	4770      	bx	lr

3400126a <_kill>:

int _kill(int pid, int sig)
{
3400126a:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
3400126c:	f00d f824 	bl	3400e2b8 <__errno>
34001270:	2316      	movs	r3, #22
34001272:	6003      	str	r3, [r0, #0]
  return -1;
}
34001274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001278:	bd08      	pop	{r3, pc}

3400127a <_exit>:

void _exit (int status)
{
3400127a:	b508      	push	{r3, lr}
  errno = EINVAL;
3400127c:	f00d f81c 	bl	3400e2b8 <__errno>
34001280:	2316      	movs	r3, #22
34001282:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
34001284:	e7fe      	b.n	34001284 <_exit+0xa>

34001286 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
34001286:	b570      	push	{r4, r5, r6, lr}
34001288:	460d      	mov	r5, r1
3400128a:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
3400128c:	460e      	mov	r6, r1
3400128e:	1b73      	subs	r3, r6, r5
34001290:	429c      	cmp	r4, r3
34001292:	dc01      	bgt.n	34001298 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
34001294:	4620      	mov	r0, r4
34001296:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
34001298:	f3af 8000 	nop.w
3400129c:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
340012a0:	e7f5      	b.n	3400128e <_read+0x8>

340012a2 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
340012a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340012a6:	4770      	bx	lr

340012a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
340012a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
340012ac:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
340012ae:	604b      	str	r3, [r1, #4]
}
340012b0:	4770      	bx	lr

340012b2 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
340012b2:	2001      	movs	r0, #1
340012b4:	4770      	bx	lr

340012b6 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
340012b6:	2000      	movs	r0, #0
340012b8:	4770      	bx	lr

340012ba <MX25UM51245G_GetFlashInfo>:
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
340012ba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
340012be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
340012c2:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
340012c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340012ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340012ce:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
340012d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
340012d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
340012da:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
340012de:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
340012e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
340012e4:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25UM51245G_OK;
};
340012e8:	2000      	movs	r0, #0
340012ea:	4770      	bx	lr

340012ec <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
340012ec:	b570      	push	{r4, r5, r6, lr}
340012ee:	460d      	mov	r5, r1
340012f0:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef  s_command = {0};
340012f2:	2100      	movs	r1, #0
{
340012f4:	4606      	mov	r6, r0
340012f6:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef  s_command = {0};
340012f8:	a805      	add	r0, sp, #20
340012fa:	224c      	movs	r2, #76	@ 0x4c
340012fc:	f00c fd88 	bl	3400de10 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001300:	2214      	movs	r2, #20
34001302:	2100      	movs	r1, #0
34001304:	4668      	mov	r0, sp
34001306:	f00c fd83 	bl	3400de10 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400130a:	b935      	cbnz	r5, 3400131a <MX25UM51245G_AutoPollingMemReady+0x2e>
  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400130c:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400130e:	429c      	cmp	r4, r3
34001310:	d104      	bne.n	3400131c <MX25UM51245G_AutoPollingMemReady+0x30>
    return MX25UM51245G_ERROR;
34001312:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001316:	b018      	add	sp, #96	@ 0x60
34001318:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400131a:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400131c:	1e60      	subs	r0, r4, #1
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400131e:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001320:	4243      	negs	r3, r0
34001322:	4143      	adcs	r3, r0
34001324:	00da      	lsls	r2, r3, #3
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001326:	2d00      	cmp	r5, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001328:	920a      	str	r2, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400132a:	bf14      	ite	ne
3400132c:	2201      	movne	r2, #1
3400132e:	2200      	moveq	r2, #0
34001330:	ea4f 1102 	mov.w	r1, r2, lsl #4
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001334:	ea4f 2282 	mov.w	r2, r2, lsl #10
34001338:	920c      	str	r2, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400133a:	ea4f 22c3 	mov.w	r2, r3, lsl #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
3400133e:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001340:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34001344:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001346:	bf0c      	ite	eq
34001348:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
3400134c:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001350:	9109      	str	r1, [sp, #36]	@ 0x24
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34001352:	f240 51fa 	movw	r1, #1530	@ 0x5fa
34001356:	bf08      	it	eq
34001358:	2105      	moveq	r1, #5
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400135a:	9213      	str	r2, [sp, #76]	@ 0x4c
                                 : HAL_XSPI_DATA_DTR_DISABLE;
3400135c:	ea4f 62c3 	mov.w	r2, r3, lsl #27
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001360:	4628      	mov	r0, r5
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001362:	9107      	str	r1, [sp, #28]
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001364:	9215      	str	r2, [sp, #84]	@ 0x54
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001366:	d003      	beq.n	34001370 <MX25UM51245G_AutoPollingMemReady+0x84>
34001368:	2c01      	cmp	r4, #1
3400136a:	bf0c      	ite	eq
3400136c:	2005      	moveq	r0, #5
3400136e:	2004      	movne	r0, #4
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001370:	075b      	lsls	r3, r3, #29
34001372:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001374:	2301      	movs	r3, #1
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001376:	2c01      	cmp	r4, #1
34001378:	bf0c      	ite	eq
3400137a:	2202      	moveq	r2, #2
3400137c:	2201      	movne	r2, #1
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400137e:	2110      	movs	r1, #16
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001380:	9301      	str	r3, [sp, #4]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001382:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001386:	9016      	str	r0, [sp, #88]	@ 0x58
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001388:	e9cd 3103 	strd	r3, r1, [sp, #12]
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400138c:	9214      	str	r2, [sp, #80]	@ 0x50
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400138e:	4630      	mov	r0, r6
34001390:	f241 3288 	movw	r2, #5000	@ 0x1388
34001394:	a905      	add	r1, sp, #20
34001396:	f009 fdab 	bl	3400aef0 <HAL_XSPI_Command>
3400139a:	2800      	cmp	r0, #0
3400139c:	d1b9      	bne.n	34001312 <MX25UM51245G_AutoPollingMemReady+0x26>
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400139e:	f241 3288 	movw	r2, #5000	@ 0x1388
340013a2:	4669      	mov	r1, sp
340013a4:	4630      	mov	r0, r6
340013a6:	f009 ff55 	bl	3400b254 <HAL_XSPI_AutoPolling>
340013aa:	3800      	subs	r0, #0
340013ac:	bf18      	it	ne
340013ae:	2001      	movne	r0, #1
340013b0:	4240      	negs	r0, r0
340013b2:	e7b0      	b.n	34001316 <MX25UM51245G_AutoPollingMemReady+0x2a>

340013b4 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
340013b4:	b570      	push	{r4, r5, r6, lr}
340013b6:	460c      	mov	r4, r1
340013b8:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef      s_command = {0};
340013ba:	2100      	movs	r1, #0
{
340013bc:	4606      	mov	r6, r0
340013be:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef      s_command = {0};
340013c0:	a805      	add	r0, sp, #20
340013c2:	224c      	movs	r2, #76	@ 0x4c
340013c4:	f00c fd24 	bl	3400de10 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
340013c8:	2210      	movs	r2, #16
340013ca:	2100      	movs	r1, #0
340013cc:	a801      	add	r0, sp, #4
340013ce:	f00c fd1f 	bl	3400de10 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
340013d2:	2c01      	cmp	r4, #1
340013d4:	d105      	bne.n	340013e2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x2e>
  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340013d6:	2304      	movs	r3, #4
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
340013d8:	b93d      	cbnz	r5, 340013ea <MX25UM51245G_EnableSTRMemoryMappedMode+0x36>
    return MX25UM51245G_ERROR;
340013da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340013de:	b018      	add	sp, #96	@ 0x60
340013e0:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340013e2:	2c00      	cmp	r4, #0
340013e4:	bf14      	ite	ne
340013e6:	2304      	movne	r3, #4
340013e8:	2301      	moveq	r3, #1
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340013ea:	2201      	movs	r2, #1
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340013ec:	2c00      	cmp	r4, #0
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340013ee:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340013f0:	bf14      	ite	ne
340013f2:	4613      	movne	r3, r2
340013f4:	2300      	moveq	r3, #0
340013f6:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340013fa:	9205      	str	r2, [sp, #20]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340013fc:	9309      	str	r3, [sp, #36]	@ 0x24
                                 : MX25UM51245G_OCTA_READ_CMD;
340013fe:	d140      	bne.n	34001482 <MX25UM51245G_EnableSTRMemoryMappedMode+0xce>
34001400:	2d00      	cmp	r5, #0
34001402:	bf0c      	ite	eq
34001404:	230b      	moveq	r3, #11
34001406:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001408:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400140a:	9307      	str	r3, [sp, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400140c:	bf0c      	ite	eq
3400140e:	f44f 7380 	moveq.w	r3, #256	@ 0x100
34001412:	f44f 6380 	movne.w	r3, #1024	@ 0x400
                                 : HAL_XSPI_ADDRESS_32_BITS;
34001416:	2d00      	cmp	r5, #0
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001418:	930c      	str	r3, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_32_BITS;
3400141a:	bf0c      	ite	eq
3400141c:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
34001420:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001424:	2c00      	cmp	r4, #0
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
34001426:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001428:	bf0c      	ite	eq
3400142a:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
3400142e:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
34001432:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
34001434:	bf0c      	ite	eq
34001436:	2308      	moveq	r3, #8
34001438:	2306      	movne	r3, #6
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400143a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400143e:	4630      	mov	r0, r6
34001440:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
34001442:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001444:	f009 fd54 	bl	3400aef0 <HAL_XSPI_Command>
34001448:	2800      	cmp	r0, #0
3400144a:	d1c6      	bne.n	340013da <MX25UM51245G_EnableSTRMemoryMappedMode+0x26>
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
3400144c:	2302      	movs	r3, #2
3400144e:	9305      	str	r3, [sp, #20]
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001450:	b9d4      	cbnz	r4, 34001488 <MX25UM51245G_EnableSTRMemoryMappedMode+0xd4>
34001452:	2d00      	cmp	r5, #0
34001454:	bf18      	it	ne
34001456:	2312      	movne	r3, #18
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001458:	9307      	str	r3, [sp, #28]
  s_command.DummyCycles        = 0U;
3400145a:	2300      	movs	r3, #0
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400145c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001460:	4630      	mov	r0, r6
34001462:	a905      	add	r1, sp, #20
  s_command.DummyCycles        = 0U;
34001464:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001466:	f009 fd43 	bl	3400aef0 <HAL_XSPI_Command>
3400146a:	2800      	cmp	r0, #0
3400146c:	d1b5      	bne.n	340013da <MX25UM51245G_EnableSTRMemoryMappedMode+0x26>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400146e:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001470:	a901      	add	r1, sp, #4
34001472:	4630      	mov	r0, r6
34001474:	f009 ff6a 	bl	3400b34c <HAL_XSPI_MemoryMapped>
34001478:	3800      	subs	r0, #0
3400147a:	bf18      	it	ne
3400147c:	2001      	movne	r0, #1
3400147e:	4240      	negs	r0, r0
34001480:	e7ad      	b.n	340013de <MX25UM51245G_EnableSTRMemoryMappedMode+0x2a>
                                 : MX25UM51245G_OCTA_READ_CMD;
34001482:	f64e 4313 	movw	r3, #60435	@ 0xec13
34001486:	e7bf      	b.n	34001408 <MX25UM51245G_EnableSTRMemoryMappedMode+0x54>
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001488:	f241 23ed 	movw	r3, #4845	@ 0x12ed
3400148c:	e7e4      	b.n	34001458 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa4>

3400148e <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
3400148e:	b530      	push	{r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001490:	2510      	movs	r5, #16
{
34001492:	b099      	sub	sp, #100	@ 0x64
34001494:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef      s_command = {0};
34001496:	223c      	movs	r2, #60	@ 0x3c
34001498:	2100      	movs	r1, #0
3400149a:	a806      	add	r0, sp, #24
3400149c:	f00c fcb8 	bl	3400de10 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
340014a0:	462a      	mov	r2, r5
340014a2:	2100      	movs	r1, #0
340014a4:	a801      	add	r0, sp, #4
340014a6:	f00c fcb3 	bl	3400de10 <memset>

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340014aa:	2301      	movs	r3, #1
340014ac:	9305      	str	r3, [sp, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
340014ae:	2304      	movs	r3, #4
340014b0:	9308      	str	r3, [sp, #32]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
340014b2:	2308      	movs	r3, #8
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
340014b4:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
340014b8:	f64e 6311 	movw	r3, #60945	@ 0xee11
340014bc:	9307      	str	r3, [sp, #28]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
340014be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340014c2:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
340014c6:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340014c8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340014cc:	e9cd 3e0d 	strd	r3, lr, [sp, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
340014d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
340014d4:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
340014d8:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
340014da:	2306      	movs	r3, #6
340014dc:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
340014e0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340014e4:	f241 3288 	movw	r2, #5000	@ 0x1388
340014e8:	4620      	mov	r0, r4
340014ea:	a905      	add	r1, sp, #20
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
340014ec:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340014ee:	f009 fcff 	bl	3400aef0 <HAL_XSPI_Command>
340014f2:	b118      	cbz	r0, 340014fc <MX25UM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25UM51245G_ERROR;
340014f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340014f8:	b019      	add	sp, #100	@ 0x64
340014fa:	bd30      	pop	{r4, r5, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
340014fc:	2302      	movs	r3, #2
340014fe:	9305      	str	r3, [sp, #20]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001500:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
34001504:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001508:	f241 3288 	movw	r2, #5000	@ 0x1388
3400150c:	4620      	mov	r0, r4
3400150e:	a905      	add	r1, sp, #20
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001510:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001512:	f009 fced 	bl	3400aef0 <HAL_XSPI_Command>
34001516:	2800      	cmp	r0, #0
34001518:	d1ec      	bne.n	340014f4 <MX25UM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400151a:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
3400151c:	a901      	add	r1, sp, #4
3400151e:	4620      	mov	r0, r4
34001520:	f009 ff14 	bl	3400b34c <HAL_XSPI_MemoryMapped>
34001524:	3800      	subs	r0, #0
34001526:	bf18      	it	ne
34001528:	2001      	movne	r0, #1
3400152a:	4240      	negs	r0, r0
3400152c:	e7e4      	b.n	340014f8 <MX25UM51245G_EnableDTRMemoryMappedMode+0x6a>

3400152e <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
3400152e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34001532:	460e      	mov	r6, r1
34001534:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef     s_command = {0};
34001536:	2100      	movs	r1, #0
{
34001538:	4607      	mov	r7, r0
3400153a:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef     s_command = {0};
3400153c:	a805      	add	r0, sp, #20
3400153e:	224c      	movs	r2, #76	@ 0x4c
34001540:	f00c fc66 	bl	3400de10 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001544:	2214      	movs	r2, #20
34001546:	2100      	movs	r1, #0
34001548:	4668      	mov	r0, sp
3400154a:	f00c fc61 	bl	3400de10 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400154e:	b93e      	cbnz	r6, 34001560 <MX25UM51245G_WriteEnable+0x32>
  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001550:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001552:	429d      	cmp	r5, r3
34001554:	d105      	bne.n	34001562 <MX25UM51245G_WriteEnable+0x34>
    return MX25UM51245G_ERROR;
34001556:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
3400155a:	b018      	add	sp, #96	@ 0x60
3400155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001560:	2304      	movs	r3, #4
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001562:	1e69      	subs	r1, r5, #1
34001564:	424c      	negs	r4, r1
34001566:	414c      	adcs	r4, r1
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001568:	2e00      	cmp	r6, #0
3400156a:	bf14      	ite	ne
3400156c:	f04f 0801 	movne.w	r8, #1
34001570:	f04f 0800 	moveq.w	r8, #0
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001574:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001576:	ea4f 03c4 	mov.w	r3, r4, lsl #3
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400157a:	930a      	str	r3, [sp, #40]	@ 0x28
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400157c:	ea4f 1308 	mov.w	r3, r8, lsl #4
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001580:	9309      	str	r3, [sp, #36]	@ 0x24
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001582:	f240 63f9 	movw	r3, #1785	@ 0x6f9
34001586:	bf08      	it	eq
34001588:	2306      	moveq	r3, #6
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400158a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400158e:	4638      	mov	r0, r7
34001590:	a905      	add	r1, sp, #20
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001592:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001594:	f009 fcac 	bl	3400aef0 <HAL_XSPI_Command>
34001598:	2800      	cmp	r0, #0
3400159a:	d1dc      	bne.n	34001556 <MX25UM51245G_WriteEnable+0x28>
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
3400159c:	2e00      	cmp	r6, #0
3400159e:	f240 53fa 	movw	r3, #1530	@ 0x5fa
340015a2:	bf08      	it	eq
340015a4:	2305      	moveq	r3, #5
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
340015a6:	9307      	str	r3, [sp, #28]
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
340015a8:	ea4f 2388 	mov.w	r3, r8, lsl #10
340015ac:	930c      	str	r3, [sp, #48]	@ 0x30
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
340015ae:	ea4f 23c4 	mov.w	r3, r4, lsl #11
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340015b2:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
340015b4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340015b8:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340015ba:	bf0c      	ite	eq
340015bc:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
340015c0:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
340015c4:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
340015c6:	ea4f 63c4 	mov.w	r3, r4, lsl #27
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
340015ca:	4632      	mov	r2, r6
  s_command.Address        = 0U;
340015cc:	900b      	str	r0, [sp, #44]	@ 0x2c
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
340015ce:	9315      	str	r3, [sp, #84]	@ 0x54
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
340015d0:	d003      	beq.n	340015da <MX25UM51245G_WriteEnable+0xac>
340015d2:	2d01      	cmp	r5, #1
340015d4:	bf0c      	ite	eq
340015d6:	2205      	moveq	r2, #5
340015d8:	2204      	movne	r2, #4
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340015da:	2d01      	cmp	r5, #1
340015dc:	bf0c      	ite	eq
340015de:	2302      	moveq	r3, #2
340015e0:	2301      	movne	r3, #1
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
340015e2:	9216      	str	r2, [sp, #88]	@ 0x58
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340015e4:	0764      	lsls	r4, r4, #29
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340015e6:	f241 3288 	movw	r2, #5000	@ 0x1388
340015ea:	4638      	mov	r0, r7
340015ec:	a905      	add	r1, sp, #20
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340015ee:	9314      	str	r3, [sp, #80]	@ 0x50
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340015f0:	9417      	str	r4, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340015f2:	f009 fc7d 	bl	3400aef0 <HAL_XSPI_Command>
340015f6:	2800      	cmp	r0, #0
340015f8:	d1ad      	bne.n	34001556 <MX25UM51245G_WriteEnable+0x28>
  s_config.MatchValue      = 2U;
340015fa:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
340015fc:	2210      	movs	r2, #16
  s_config.MatchMask       = 2U;
340015fe:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001602:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
34001606:	9002      	str	r0, [sp, #8]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001608:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400160c:	4669      	mov	r1, sp
3400160e:	f241 3288 	movw	r2, #5000	@ 0x1388
34001612:	4638      	mov	r0, r7
34001614:	f009 fe1e 	bl	3400b254 <HAL_XSPI_AutoPolling>
34001618:	3800      	subs	r0, #0
3400161a:	bf18      	it	ne
3400161c:	2001      	movne	r0, #1
3400161e:	4240      	negs	r0, r0
34001620:	e79b      	b.n	3400155a <MX25UM51245G_WriteEnable+0x2c>

34001622 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
34001622:	b5f0      	push	{r4, r5, r6, r7, lr}
34001624:	460e      	mov	r6, r1
34001626:	b095      	sub	sp, #84	@ 0x54
34001628:	4605      	mov	r5, r0
3400162a:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400162c:	2100      	movs	r1, #0
3400162e:	224c      	movs	r2, #76	@ 0x4c
34001630:	a801      	add	r0, sp, #4
{
34001632:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
34001634:	f00c fbec 	bl	3400de10 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001638:	b936      	cbnz	r6, 34001648 <MX25UM51245G_WriteCfg2Register+0x26>
  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400163a:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400163c:	429c      	cmp	r4, r3
3400163e:	d104      	bne.n	3400164a <MX25UM51245G_WriteCfg2Register+0x28>
    return MX25UM51245G_ERROR;
34001640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001644:	b015      	add	sp, #84	@ 0x54
34001646:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001648:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400164a:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400164c:	1e63      	subs	r3, r4, #1
3400164e:	425a      	negs	r2, r3
34001650:	415a      	adcs	r2, r3
34001652:	00d3      	lsls	r3, r2, #3
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001654:	2e00      	cmp	r6, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001656:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001658:	bf14      	ite	ne
3400165a:	2301      	movne	r3, #1
3400165c:	2300      	moveq	r3, #0
3400165e:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001662:	9305      	str	r3, [sp, #20]
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
34001664:	f247 238d 	movw	r3, #29325	@ 0x728d
34001668:	bf08      	it	eq
3400166a:	2372      	moveq	r3, #114	@ 0x72
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400166c:	9303      	str	r3, [sp, #12]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400166e:	bf0c      	ite	eq
34001670:	f44f 7380 	moveq.w	r3, #256	@ 0x100
34001674:	f44f 6380 	movne.w	r3, #1024	@ 0x400
34001678:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400167a:	ea4f 23c2 	mov.w	r3, r2, lsl #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
3400167e:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001680:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001684:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001686:	bf0c      	ite	eq
34001688:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
3400168c:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001690:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Address            = WriteAddr;
34001694:	9707      	str	r7, [sp, #28]
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001696:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001698:	9211      	str	r2, [sp, #68]	@ 0x44
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
3400169a:	d017      	beq.n	340016cc <MX25UM51245G_WriteCfg2Register+0xaa>
3400169c:	2c01      	cmp	r4, #1
3400169e:	bf14      	ite	ne
340016a0:	2301      	movne	r3, #1
340016a2:	2302      	moveq	r3, #2
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016a4:	f241 3288 	movw	r2, #5000	@ 0x1388
340016a8:	4628      	mov	r0, r5
340016aa:	a901      	add	r1, sp, #4
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
340016ac:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016ae:	f009 fc1f 	bl	3400aef0 <HAL_XSPI_Command>
340016b2:	2800      	cmp	r0, #0
340016b4:	d1c4      	bne.n	34001640 <MX25UM51245G_WriteCfg2Register+0x1e>
  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016b6:	f241 3288 	movw	r2, #5000	@ 0x1388
340016ba:	4628      	mov	r0, r5
340016bc:	a91a      	add	r1, sp, #104	@ 0x68
340016be:	f009 fd2f 	bl	3400b120 <HAL_XSPI_Transmit>
340016c2:	3800      	subs	r0, #0
340016c4:	bf18      	it	ne
340016c6:	2001      	movne	r0, #1
340016c8:	4240      	negs	r0, r0
340016ca:	e7bb      	b.n	34001644 <MX25UM51245G_WriteCfg2Register+0x22>
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
340016cc:	2301      	movs	r3, #1
340016ce:	e7e9      	b.n	340016a4 <MX25UM51245G_WriteCfg2Register+0x82>

340016d0 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
340016d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340016d4:	460e      	mov	r6, r1
340016d6:	b094      	sub	sp, #80	@ 0x50
340016d8:	4607      	mov	r7, r0
340016da:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340016dc:	2100      	movs	r1, #0
340016de:	224c      	movs	r2, #76	@ 0x4c
340016e0:	a801      	add	r0, sp, #4
{
340016e2:	4698      	mov	r8, r3
  XSPI_RegularCmdTypeDef s_command = {0};
340016e4:	f00c fb94 	bl	3400de10 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340016e8:	b93e      	cbnz	r6, 340016fa <MX25UM51245G_ReadCfg2Register+0x2a>
  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340016ea:	2301      	movs	r3, #1
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340016ec:	429d      	cmp	r5, r3
340016ee:	d105      	bne.n	340016fc <MX25UM51245G_ReadCfg2Register+0x2c>
    return MX25UM51245G_ERROR;
340016f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340016f4:	b014      	add	sp, #80	@ 0x50
340016f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340016fa:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340016fc:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340016fe:	1e6b      	subs	r3, r5, #1
34001700:	425c      	negs	r4, r3
34001702:	415c      	adcs	r4, r3
34001704:	00e3      	lsls	r3, r4, #3
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001706:	2e00      	cmp	r6, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001708:	9306      	str	r3, [sp, #24]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400170a:	bf14      	ite	ne
3400170c:	2301      	movne	r3, #1
3400170e:	2300      	moveq	r3, #0
34001710:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001714:	9305      	str	r3, [sp, #20]
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
34001716:	f247 138e 	movw	r3, #29070	@ 0x718e
3400171a:	bf08      	it	eq
3400171c:	2371      	moveq	r3, #113	@ 0x71
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400171e:	9303      	str	r3, [sp, #12]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001720:	bf0c      	ite	eq
34001722:	f44f 7380 	moveq.w	r3, #256	@ 0x100
34001726:	f44f 6380 	movne.w	r3, #1024	@ 0x400
3400172a:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400172c:	ea4f 23c4 	mov.w	r3, r4, lsl #11
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001730:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001732:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001736:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001738:	bf0c      	ite	eq
3400173a:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
3400173e:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
34001742:	930f      	str	r3, [sp, #60]	@ 0x3c
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001744:	ea4f 63c4 	mov.w	r3, r4, lsl #27
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001748:	4632      	mov	r2, r6
  s_command.Address            = ReadAddr;
3400174a:	f8cd 801c 	str.w	r8, [sp, #28]
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
3400174e:	9311      	str	r3, [sp, #68]	@ 0x44
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001750:	d003      	beq.n	3400175a <MX25UM51245G_ReadCfg2Register+0x8a>
34001752:	2d01      	cmp	r5, #1
34001754:	bf0c      	ite	eq
34001756:	2205      	moveq	r2, #5
34001758:	2204      	movne	r2, #4
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400175a:	2d01      	cmp	r5, #1
3400175c:	bf0c      	ite	eq
3400175e:	2302      	moveq	r3, #2
34001760:	2301      	movne	r3, #1
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001762:	9212      	str	r2, [sp, #72]	@ 0x48
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001764:	0764      	lsls	r4, r4, #29
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001766:	f241 3288 	movw	r2, #5000	@ 0x1388
3400176a:	4638      	mov	r0, r7
3400176c:	a901      	add	r1, sp, #4
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400176e:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001770:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001772:	f009 fbbd 	bl	3400aef0 <HAL_XSPI_Command>
34001776:	2800      	cmp	r0, #0
34001778:	d1ba      	bne.n	340016f0 <MX25UM51245G_ReadCfg2Register+0x20>
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400177a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400177e:	4638      	mov	r0, r7
34001780:	991a      	ldr	r1, [sp, #104]	@ 0x68
34001782:	f009 fd11 	bl	3400b1a8 <HAL_XSPI_Receive>
34001786:	3800      	subs	r0, #0
34001788:	bf18      	it	ne
3400178a:	2001      	movne	r0, #1
3400178c:	4240      	negs	r0, r0
3400178e:	e7b1      	b.n	340016f4 <MX25UM51245G_ReadCfg2Register+0x24>

34001790 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001790:	b570      	push	{r4, r5, r6, lr}
34001792:	460d      	mov	r5, r1
34001794:	b094      	sub	sp, #80	@ 0x50
34001796:	4606      	mov	r6, r0
34001798:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400179a:	2100      	movs	r1, #0
3400179c:	224c      	movs	r2, #76	@ 0x4c
3400179e:	a801      	add	r0, sp, #4
340017a0:	f00c fb36 	bl	3400de10 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340017a4:	bb05      	cbnz	r5, 340017e8 <MX25UM51245G_ResetEnable+0x58>
340017a6:	2c01      	cmp	r4, #1
340017a8:	d020      	beq.n	340017ec <MX25UM51245G_ResetEnable+0x5c>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340017aa:	2301      	movs	r3, #1
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340017ac:	1e62      	subs	r2, r4, #1
340017ae:	4254      	negs	r4, r2
340017b0:	4154      	adcs	r4, r2
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340017b2:	2d00      	cmp	r5, #0
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340017b4:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340017b6:	bf14      	ite	ne
340017b8:	2301      	movne	r3, #1
340017ba:	2300      	moveq	r3, #0
340017bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340017c0:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
340017c2:	f246 6399 	movw	r3, #26265	@ 0x6699
340017c6:	bf08      	it	eq
340017c8:	2366      	moveq	r3, #102	@ 0x66
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340017ca:	f241 3288 	movw	r2, #5000	@ 0x1388
340017ce:	4630      	mov	r0, r6
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340017d0:	00e4      	lsls	r4, r4, #3
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340017d2:	a901      	add	r1, sp, #4
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340017d4:	9406      	str	r4, [sp, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340017d6:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340017d8:	f009 fb8a 	bl	3400aef0 <HAL_XSPI_Command>
340017dc:	3800      	subs	r0, #0
340017de:	bf18      	it	ne
340017e0:	2001      	movne	r0, #1
340017e2:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
340017e4:	b014      	add	sp, #80	@ 0x50
340017e6:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340017e8:	2304      	movs	r3, #4
340017ea:	e7df      	b.n	340017ac <MX25UM51245G_ResetEnable+0x1c>
    return MX25UM51245G_ERROR;
340017ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340017f0:	e7f8      	b.n	340017e4 <MX25UM51245G_ResetEnable+0x54>

340017f2 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
340017f2:	b570      	push	{r4, r5, r6, lr}
340017f4:	460d      	mov	r5, r1
340017f6:	b094      	sub	sp, #80	@ 0x50
340017f8:	4606      	mov	r6, r0
340017fa:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340017fc:	2100      	movs	r1, #0
340017fe:	224c      	movs	r2, #76	@ 0x4c
34001800:	a801      	add	r0, sp, #4
34001802:	f00c fb05 	bl	3400de10 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001806:	bb05      	cbnz	r5, 3400184a <MX25UM51245G_ResetMemory+0x58>
34001808:	2c01      	cmp	r4, #1
3400180a:	d020      	beq.n	3400184e <MX25UM51245G_ResetMemory+0x5c>
  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400180c:	2301      	movs	r3, #1
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400180e:	1e62      	subs	r2, r4, #1
34001810:	4254      	negs	r4, r2
34001812:	4154      	adcs	r4, r2
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001814:	2d00      	cmp	r5, #0
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001816:	9304      	str	r3, [sp, #16]
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001818:	bf14      	ite	ne
3400181a:	2301      	movne	r3, #1
3400181c:	2300      	moveq	r3, #0
3400181e:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001822:	9305      	str	r3, [sp, #20]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
34001824:	f649 1366 	movw	r3, #39270	@ 0x9966
34001828:	bf08      	it	eq
3400182a:	2399      	moveq	r3, #153	@ 0x99
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400182c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001830:	4630      	mov	r0, r6
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001832:	00e4      	lsls	r4, r4, #3
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001834:	a901      	add	r1, sp, #4
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001836:	9406      	str	r4, [sp, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001838:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400183a:	f009 fb59 	bl	3400aef0 <HAL_XSPI_Command>
3400183e:	3800      	subs	r0, #0
34001840:	bf18      	it	ne
34001842:	2001      	movne	r0, #1
34001844:	4240      	negs	r0, r0
  {
    return MX25UM51245G_ERROR;
  }

  return MX25UM51245G_OK;
}
34001846:	b014      	add	sp, #80	@ 0x50
34001848:	bd70      	pop	{r4, r5, r6, pc}
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400184a:	2304      	movs	r3, #4
3400184c:	e7df      	b.n	3400180e <MX25UM51245G_ResetMemory+0x1c>
    return MX25UM51245G_ERROR;
3400184e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001852:	e7f8      	b.n	34001846 <MX25UM51245G_ResetMemory+0x54>

34001854 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001854:	4b04      	ldr	r3, [pc, #16]	@ (34001868 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001856:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001858:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400185c:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34001860:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001862:	9b01      	ldr	r3, [sp, #4]
}
34001864:	b002      	add	sp, #8
34001866:	4770      	bx	lr
34001868:	56028000 	.word	0x56028000

3400186c <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
3400186c:	b570      	push	{r4, r5, r6, lr}
3400186e:	4604      	mov	r4, r0
34001870:	b086      	sub	sp, #24
  SMPS_GPIO_CLK_ENABLE();
34001872:	2002      	movs	r0, #2
34001874:	f7ff ffee 	bl	34001854 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001878:	2300      	movs	r3, #0
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
3400187a:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  GPIO_InitTypeDef  gpio_init_structure = {0};
3400187e:	9303      	str	r3, [sp, #12]
34001880:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001882:	2301      	movs	r3, #1
34001884:	e9cd 6301 	strd	r6, r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001888:	2303      	movs	r3, #3
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
3400188a:	4d06      	ldr	r5, [pc, #24]	@ (340018a4 <BSP_SMPS_Init+0x38>)
3400188c:	a901      	add	r1, sp, #4
3400188e:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001890:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
34001892:	f001 fc09 	bl	340030a8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
34001896:	4622      	mov	r2, r4
34001898:	4631      	mov	r1, r6
3400189a:	4628      	mov	r0, r5
3400189c:	f001 fe1e 	bl	340034dc <HAL_GPIO_WritePin>
}
340018a0:	b006      	add	sp, #24
340018a2:	bd70      	pop	{r4, r5, r6, pc}
340018a4:	56020400 	.word	0x56020400

340018a8 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
340018a8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
340018aa:	4b05      	ldr	r3, [pc, #20]	@ (340018c0 <BSP_LED_On+0x18>)
340018ac:	2200      	movs	r2, #0
340018ae:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
340018b2:	4b04      	ldr	r3, [pc, #16]	@ (340018c4 <BSP_LED_On+0x1c>)
340018b4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
340018b8:	f001 fe10 	bl	340034dc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
340018bc:	2000      	movs	r0, #0
340018be:	bd08      	pop	{r3, pc}
340018c0:	340104c4 	.word	0x340104c4
340018c4:	340104b8 	.word	0x340104b8

340018c8 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
340018c8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
340018ca:	4b05      	ldr	r3, [pc, #20]	@ (340018e0 <BSP_LED_Off+0x18>)
340018cc:	2201      	movs	r2, #1
340018ce:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
340018d2:	4b04      	ldr	r3, [pc, #16]	@ (340018e4 <BSP_LED_Off+0x1c>)
340018d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
340018d8:	f001 fe00 	bl	340034dc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
340018dc:	2000      	movs	r0, #0
340018de:	bd08      	pop	{r3, pc}
340018e0:	340104c4 	.word	0x340104c4
340018e4:	340104b8 	.word	0x340104b8

340018e8 <BSP_LED_Init>:
{
340018e8:	b530      	push	{r4, r5, lr}
340018ea:	4604      	mov	r4, r0
340018ec:	b087      	sub	sp, #28
    LED1_GPIO_CLK_ENABLE();
340018ee:	2040      	movs	r0, #64	@ 0x40
340018f0:	f7ff ffb0 	bl	34001854 <LL_AHB4_GRP1_EnableClock>
  GPIO_Init.Pin   = LED_PIN[Led];
340018f4:	4b0a      	ldr	r3, [pc, #40]	@ (34001920 <BSP_LED_Init+0x38>)
  GPIO_Init.Pull  = GPIO_NOPULL;
340018f6:	2500      	movs	r5, #0
  GPIO_Init.Pin   = LED_PIN[Led];
340018f8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
340018fc:	a901      	add	r1, sp, #4
  GPIO_Init.Pin   = LED_PIN[Led];
340018fe:	9301      	str	r3, [sp, #4]
  GPIO_Init.Pull  = GPIO_NOPULL;
34001900:	2301      	movs	r3, #1
34001902:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001906:	2303      	movs	r3, #3
34001908:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
3400190a:	4b06      	ldr	r3, [pc, #24]	@ (34001924 <BSP_LED_Init+0x3c>)
3400190c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
34001910:	f001 fbca 	bl	340030a8 <HAL_GPIO_Init>
  BSP_LED_Off(Led);
34001914:	4620      	mov	r0, r4
34001916:	f7ff ffd7 	bl	340018c8 <BSP_LED_Off>
}
3400191a:	4628      	mov	r0, r5
3400191c:	b007      	add	sp, #28
3400191e:	bd30      	pop	{r4, r5, pc}
34001920:	340104c4 	.word	0x340104c4
34001924:	340104b8 	.word	0x340104b8

34001928 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
34001928:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
3400192a:	4b05      	ldr	r3, [pc, #20]	@ (34001940 <BSP_LED_Toggle+0x18>)
3400192c:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
34001930:	4b04      	ldr	r3, [pc, #16]	@ (34001944 <BSP_LED_Toggle+0x1c>)
34001932:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
34001936:	f001 fdeb 	bl	34003510 <HAL_GPIO_TogglePin>
  return BSP_ERROR_NONE;
}
3400193a:	2000      	movs	r0, #0
3400193c:	bd08      	pop	{r3, pc}
3400193e:	bf00      	nop
34001940:	340104c4 	.word	0x340104c4
34001944:	340104b8 	.word	0x340104b8

34001948 <MX_USART1_Init>:
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
34001948:	4a0a      	ldr	r2, [pc, #40]	@ (34001974 <MX_USART1_Init+0x2c>)
3400194a:	6812      	ldr	r2, [r2, #0]
3400194c:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
3400194e:	680a      	ldr	r2, [r1, #0]
34001950:	6042      	str	r2, [r0, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
34001952:	220c      	movs	r2, #12
34001954:	6142      	str	r2, [r0, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
34001956:	894a      	ldrh	r2, [r1, #10]
34001958:	6102      	str	r2, [r0, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
3400195a:	684a      	ldr	r2, [r1, #4]
3400195c:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
3400195e:	890a      	ldrh	r2, [r1, #8]
34001960:	60c2      	str	r2, [r0, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
34001962:	898a      	ldrh	r2, [r1, #12]
34001964:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
34001966:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400196a:	61c2      	str	r2, [r0, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
3400196c:	2200      	movs	r2, #0
3400196e:	6242      	str	r2, [r0, #36]	@ 0x24
  return HAL_UART_Init(huart);
34001970:	f008 bf66 	b.w	3400a840 <HAL_UART_Init>
34001974:	34012184 	.word	0x34012184

34001978 <BSP_COM_Init>:
{
34001978:	b570      	push	{r4, r5, r6, lr}
3400197a:	4604      	mov	r4, r0
  if (COM_Init == NULL)
3400197c:	460d      	mov	r5, r1
{
3400197e:	b086      	sub	sp, #24
  if (COM_Init == NULL)
34001980:	2900      	cmp	r1, #0
34001982:	d034      	beq.n	340019ee <BSP_COM_Init+0x76>
    hcom_uart[COM].Instance = COM_UART[COM];
34001984:	4b1d      	ldr	r3, [pc, #116]	@ (340019fc <BSP_COM_Init+0x84>)
34001986:	491e      	ldr	r1, [pc, #120]	@ (34001a00 <BSP_COM_Init+0x88>)
34001988:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
3400198c:	2394      	movs	r3, #148	@ 0x94
3400198e:	4343      	muls	r3, r0
34001990:	50ca      	str	r2, [r1, r3]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
34001992:	4b1c      	ldr	r3, [pc, #112]	@ (34001a04 <BSP_COM_Init+0x8c>)
34001994:	429a      	cmp	r2, r3
34001996:	d121      	bne.n	340019dc <BSP_COM_Init+0x64>
  WRITE_REG(RCC->APB2ENSR, Periphs);
34001998:	2210      	movs	r2, #16
  {
    COM = COM1;
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
3400199a:	2010      	movs	r0, #16
3400199c:	f7ff ff5a 	bl	34001854 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
340019a0:	2008      	movs	r0, #8
340019a2:	f7ff ff57 	bl	34001854 <LL_AHB4_GRP1_EnableClock>
340019a6:	4b18      	ldr	r3, [pc, #96]	@ (34001a08 <BSP_COM_Init+0x90>)
  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Alternate = COM_TX_AF[COM];
340019a8:	2607      	movs	r6, #7
340019aa:	f8c3 2a6c 	str.w	r2, [r3, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
340019ae:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
340019b2:	2220      	movs	r2, #32
340019b4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
340019b6:	9b00      	ldr	r3, [sp, #0]
340019b8:	2302      	movs	r3, #2
340019ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
340019be:	9304      	str	r3, [sp, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;
340019c0:	2301      	movs	r3, #1
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
340019c2:	4812      	ldr	r0, [pc, #72]	@ (34001a0c <BSP_COM_Init+0x94>)
340019c4:	a901      	add	r1, sp, #4
  GPIO_Init.Pull      = GPIO_PULLUP;
340019c6:	9303      	str	r3, [sp, #12]
  GPIO_Init.Alternate = COM_TX_AF[COM];
340019c8:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
340019ca:	f001 fb6d 	bl	340030a8 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
340019ce:	2340      	movs	r3, #64	@ 0x40
  GPIO_Init.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
340019d0:	480f      	ldr	r0, [pc, #60]	@ (34001a10 <BSP_COM_Init+0x98>)
340019d2:	a901      	add	r1, sp, #4
  GPIO_Init.Pin       = COM_RX_PIN[COM];
340019d4:	9301      	str	r3, [sp, #4]
  GPIO_Init.Alternate = COM_RX_AF[COM];
340019d6:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
340019d8:	f001 fb66 	bl	340030a8 <HAL_GPIO_Init>
      if (COM == COM1)
340019dc:	b924      	cbnz	r4, 340019e8 <BSP_COM_Init+0x70>
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
340019de:	4629      	mov	r1, r5
340019e0:	4807      	ldr	r0, [pc, #28]	@ (34001a00 <BSP_COM_Init+0x88>)
340019e2:	f7ff ffb1 	bl	34001948 <MX_USART1_Init>
340019e6:	b928      	cbnz	r0, 340019f4 <BSP_COM_Init+0x7c>
  int32_t status = BSP_ERROR_NONE;
340019e8:	2000      	movs	r0, #0
}
340019ea:	b006      	add	sp, #24
340019ec:	bd70      	pop	{r4, r5, r6, pc}
    status = BSP_ERROR_WRONG_PARAM;
340019ee:	f06f 0001 	mvn.w	r0, #1
340019f2:	e7fa      	b.n	340019ea <BSP_COM_Init+0x72>
          status = BSP_ERROR_PERIPH_FAILURE;
340019f4:	f06f 0003 	mvn.w	r0, #3
  return status;
340019f8:	e7f7      	b.n	340019ea <BSP_COM_Init+0x72>
340019fa:	bf00      	nop
340019fc:	34012184 	.word	0x34012184
34001a00:	3401239c 	.word	0x3401239c
34001a04:	52001000 	.word	0x52001000
34001a08:	56028000 	.word	0x56028000
34001a0c:	56021000 	.word	0x56021000
34001a10:	56020c00 	.word	0x56020c00

34001a14 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001a14:	4b04      	ldr	r3, [pc, #16]	@ (34001a28 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001a16:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001a18:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001a1c:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34001a20:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34001a22:	9b01      	ldr	r3, [sp, #4]
}
34001a24:	b002      	add	sp, #8
34001a26:	4770      	bx	lr
34001a28:	56028000 	.word	0x56028000

34001a2c <XSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001a2c:	b530      	push	{r4, r5, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a2e:	4c20      	ldr	r4, [pc, #128]	@ (34001ab0 <XSPI_NOR_EnterSOPIMode.constprop.0+0x84>)
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001a30:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a32:	78a2      	ldrb	r2, [r4, #2]
34001a34:	7861      	ldrb	r1, [r4, #1]
34001a36:	481f      	ldr	r0, [pc, #124]	@ (34001ab4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001a38:	f7ff fd79 	bl	3400152e <MX25UM51245G_WriteEnable>
34001a3c:	b118      	cbz	r0, 34001a46 <XSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001a3e:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
34001a42:	b005      	add	sp, #20
34001a44:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a46:	9000      	str	r0, [sp, #0]
34001a48:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001a4c:	78a2      	ldrb	r2, [r4, #2]
34001a4e:	7861      	ldrb	r1, [r4, #1]
34001a50:	4818      	ldr	r0, [pc, #96]	@ (34001ab4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001a52:	f7ff fde6 	bl	34001622 <MX25UM51245G_WriteCfg2Register>
34001a56:	2800      	cmp	r0, #0
34001a58:	d1f1      	bne.n	34001a3e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a5a:	78a2      	ldrb	r2, [r4, #2]
34001a5c:	7861      	ldrb	r1, [r4, #1]
34001a5e:	4815      	ldr	r0, [pc, #84]	@ (34001ab4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001a60:	f7ff fd65 	bl	3400152e <MX25UM51245G_WriteEnable>
34001a64:	4603      	mov	r3, r0
34001a66:	2800      	cmp	r0, #0
34001a68:	d1e9      	bne.n	34001a3e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001a6a:	2501      	movs	r5, #1
34001a6c:	9500      	str	r5, [sp, #0]
34001a6e:	78a2      	ldrb	r2, [r4, #2]
34001a70:	7861      	ldrb	r1, [r4, #1]
34001a72:	4810      	ldr	r0, [pc, #64]	@ (34001ab4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001a74:	f7ff fdd5 	bl	34001622 <MX25UM51245G_WriteCfg2Register>
34001a78:	4604      	mov	r4, r0
34001a7a:	2800      	cmp	r0, #0
34001a7c:	d1df      	bne.n	34001a3e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001a7e:	2028      	movs	r0, #40	@ 0x28
34001a80:	f000 fc32 	bl	340022e8 <HAL_Delay>
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001a84:	4622      	mov	r2, r4
34001a86:	4629      	mov	r1, r5
34001a88:	480a      	ldr	r0, [pc, #40]	@ (34001ab4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001a8a:	f7ff fc2f 	bl	340012ec <MX25UM51245G_AutoPollingMemReady>
34001a8e:	4603      	mov	r3, r0
34001a90:	2800      	cmp	r0, #0
34001a92:	d1d4      	bne.n	34001a3e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001a94:	aa03      	add	r2, sp, #12
34001a96:	9200      	str	r2, [sp, #0]
34001a98:	4629      	mov	r1, r5
34001a9a:	4602      	mov	r2, r0
34001a9c:	4805      	ldr	r0, [pc, #20]	@ (34001ab4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001a9e:	f7ff fe17 	bl	340016d0 <MX25UM51245G_ReadCfg2Register>
34001aa2:	2800      	cmp	r0, #0
34001aa4:	d1cb      	bne.n	34001a3e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
34001aa6:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001aaa:	42ab      	cmp	r3, r5
34001aac:	d0c9      	beq.n	34001a42 <XSPI_NOR_EnterSOPIMode.constprop.0+0x16>
34001aae:	e7c6      	b.n	34001a3e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
34001ab0:	340124c4 	.word	0x340124c4
34001ab4:	340124c8 	.word	0x340124c8

34001ab8 <XSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001ab8:	b530      	push	{r4, r5, lr}
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001aba:	4d27      	ldr	r5, [pc, #156]	@ (34001b58 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
34001abc:	4c27      	ldr	r4, [pc, #156]	@ (34001b5c <XSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
34001abe:	b085      	sub	sp, #20
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001ac0:	4620      	mov	r0, r4
34001ac2:	78aa      	ldrb	r2, [r5, #2]
34001ac4:	7869      	ldrb	r1, [r5, #1]
34001ac6:	f7ff fd32 	bl	3400152e <MX25UM51245G_WriteEnable>
34001aca:	b118      	cbz	r0, 34001ad4 <XSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001acc:	f06f 0004 	mvn.w	r0, #4
}
34001ad0:	b005      	add	sp, #20
34001ad2:	bd30      	pop	{r4, r5, pc}
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001ad4:	9000      	str	r0, [sp, #0]
34001ad6:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001ada:	4620      	mov	r0, r4
34001adc:	78aa      	ldrb	r2, [r5, #2]
34001ade:	7869      	ldrb	r1, [r5, #1]
34001ae0:	f7ff fd9f 	bl	34001622 <MX25UM51245G_WriteCfg2Register>
34001ae4:	2800      	cmp	r0, #0
34001ae6:	d1f1      	bne.n	34001acc <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001ae8:	4620      	mov	r0, r4
34001aea:	78aa      	ldrb	r2, [r5, #2]
34001aec:	7869      	ldrb	r1, [r5, #1]
34001aee:	f7ff fd1e 	bl	3400152e <MX25UM51245G_WriteEnable>
34001af2:	4603      	mov	r3, r0
34001af4:	2800      	cmp	r0, #0
34001af6:	d1e9      	bne.n	34001acc <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001af8:	2202      	movs	r2, #2
34001afa:	9200      	str	r2, [sp, #0]
34001afc:	4620      	mov	r0, r4
34001afe:	78aa      	ldrb	r2, [r5, #2]
34001b00:	7869      	ldrb	r1, [r5, #1]
34001b02:	f7ff fd8e 	bl	34001622 <MX25UM51245G_WriteCfg2Register>
34001b06:	2800      	cmp	r0, #0
34001b08:	d1e0      	bne.n	34001acc <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001b0a:	2028      	movs	r0, #40	@ 0x28
34001b0c:	f000 fbec 	bl	340022e8 <HAL_Delay>
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34001b10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001b14:	60e3      	str	r3, [r4, #12]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001b16:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001b1a:	4620      	mov	r0, r4
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001b1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001b1e:	f009 f8a9 	bl	3400ac74 <HAL_XSPI_Init>
34001b22:	b9a8      	cbnz	r0, 34001b50 <XSPI_NOR_EnterDOPIMode.constprop.0+0x98>
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001b24:	2201      	movs	r2, #1
34001b26:	4620      	mov	r0, r4
34001b28:	4611      	mov	r1, r2
34001b2a:	f7ff fbdf 	bl	340012ec <MX25UM51245G_AutoPollingMemReady>
34001b2e:	4603      	mov	r3, r0
34001b30:	2800      	cmp	r0, #0
34001b32:	d1cb      	bne.n	34001acc <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34001b34:	aa03      	add	r2, sp, #12
34001b36:	9200      	str	r2, [sp, #0]
34001b38:	2201      	movs	r2, #1
34001b3a:	4620      	mov	r0, r4
34001b3c:	4611      	mov	r1, r2
34001b3e:	f7ff fdc7 	bl	340016d0 <MX25UM51245G_ReadCfg2Register>
34001b42:	2800      	cmp	r0, #0
34001b44:	d1c2      	bne.n	34001acc <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
34001b46:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001b4a:	2b02      	cmp	r3, #2
34001b4c:	d0c0      	beq.n	34001ad0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
34001b4e:	e7bd      	b.n	34001acc <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
34001b50:	f06f 0003 	mvn.w	r0, #3
  return ret;
34001b54:	e7bc      	b.n	34001ad0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
34001b56:	bf00      	nop
34001b58:	340124c4 	.word	0x340124c4
34001b5c:	340124c8 	.word	0x340124c8

34001b60 <MX_XSPI_NOR_Init>:
  hxspi->Init.FifoThresholdByte       = 4;
34001b60:	2304      	movs	r3, #4
34001b62:	4a0e      	ldr	r2, [pc, #56]	@ (34001b9c <MX_XSPI_NOR_Init+0x3c>)
34001b64:	e9c0 2300 	strd	r2, r3, [r0]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34001b68:	680a      	ldr	r2, [r1, #0]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34001b6a:	2300      	movs	r3, #0
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34001b6c:	6102      	str	r2, [r0, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
34001b6e:	2202      	movs	r2, #2
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
34001b70:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34001b74:	684a      	ldr	r2, [r1, #4]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
34001b76:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34001b7a:	6242      	str	r2, [r0, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34001b7c:	688a      	ldr	r2, [r1, #8]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34001b7e:	6083      	str	r3, [r0, #8]
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34001b80:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34001b82:	68ca      	ldr	r2, [r1, #12]
  hxspi->Init.ChipSelectBoundary      = 0;
34001b84:	6303      	str	r3, [r0, #48]	@ 0x30
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34001b86:	2a01      	cmp	r2, #1
34001b88:	bf12      	itee	ne
34001b8a:	461a      	movne	r2, r3
34001b8c:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
34001b90:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34001b94:	60c3      	str	r3, [r0, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001b96:	62c2      	str	r2, [r0, #44]	@ 0x2c
  return HAL_XSPI_Init(hxspi);
34001b98:	f009 b86c 	b.w	3400ac74 <HAL_XSPI_Init>
34001b9c:	5802a000 	.word	0x5802a000

34001ba0 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
{
34001ba0:	b510      	push	{r4, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001ba2:	b998      	cbnz	r0, 34001bcc <BSP_XSPI_NOR_EnableMemoryMappedMode+0x2c>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001ba4:	4c0b      	ldr	r4, [pc, #44]	@ (34001bd4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x34>)
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001ba6:	78a3      	ldrb	r3, [r4, #2]
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001ba8:	7861      	ldrb	r1, [r4, #1]
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001baa:	b95b      	cbnz	r3, 34001bc4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x24>
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001bac:	2201      	movs	r2, #1
34001bae:	480a      	ldr	r0, [pc, #40]	@ (34001bd8 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34001bb0:	f7ff fc00 	bl	340013b4 <MX25UM51245G_EnableSTRMemoryMappedMode>
34001bb4:	b110      	cbz	r0, 34001bbc <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34001bb6:	f06f 0004 	mvn.w	r0, #4
}
34001bba:	bd10      	pop	{r4, pc}
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34001bbc:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
34001bbe:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34001bc0:	7023      	strb	r3, [r4, #0]
34001bc2:	e7fa      	b.n	34001bba <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
34001bc4:	4804      	ldr	r0, [pc, #16]	@ (34001bd8 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x38>)
34001bc6:	f7ff fc62 	bl	3400148e <MX25UM51245G_EnableDTRMemoryMappedMode>
34001bca:	e7f3      	b.n	34001bb4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
34001bcc:	f06f 0001 	mvn.w	r0, #1
  return ret;
34001bd0:	e7f3      	b.n	34001bba <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
34001bd2:	bf00      	nop
34001bd4:	340124c4 	.word	0x340124c4
34001bd8:	340124c8 	.word	0x340124c8

34001bdc <BSP_XSPI_NOR_ConfigFlash>:
{
34001bdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34001be0:	460d      	mov	r5, r1
34001be2:	4616      	mov	r6, r2
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001be4:	2800      	cmp	r0, #0
34001be6:	d15d      	bne.n	34001ca4 <BSP_XSPI_NOR_ConfigFlash+0xc8>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
34001be8:	4c31      	ldr	r4, [pc, #196]	@ (34001cb0 <BSP_XSPI_NOR_ConfigFlash+0xd4>)
34001bea:	7823      	ldrb	r3, [r4, #0]
34001bec:	2b02      	cmp	r3, #2
34001bee:	d05c      	beq.n	34001caa <BSP_XSPI_NOR_ConfigFlash+0xce>
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
34001bf0:	7863      	ldrb	r3, [r4, #1]
34001bf2:	2b01      	cmp	r3, #1
34001bf4:	d14d      	bne.n	34001c92 <BSP_XSPI_NOR_ConfigFlash+0xb6>
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
34001bf6:	2901      	cmp	r1, #1
34001bf8:	78a2      	ldrb	r2, [r4, #2]
34001bfa:	d109      	bne.n	34001c10 <BSP_XSPI_NOR_ConfigFlash+0x34>
34001bfc:	4296      	cmp	r6, r2
34001bfe:	d107      	bne.n	34001c10 <BSP_XSPI_NOR_ConfigFlash+0x34>
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001c00:	2301      	movs	r3, #1
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34001c02:	2000      	movs	r0, #0
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001c04:	7023      	strb	r3, [r4, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
34001c06:	7065      	strb	r5, [r4, #1]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34001c08:	70a6      	strb	r6, [r4, #2]
}
34001c0a:	b004      	add	sp, #16
34001c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001c10:	4f28      	ldr	r7, [pc, #160]	@ (34001cb4 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001c12:	2101      	movs	r1, #1
34001c14:	4638      	mov	r0, r7
34001c16:	f7ff fc8a 	bl	3400152e <MX25UM51245G_WriteEnable>
34001c1a:	4603      	mov	r3, r0
34001c1c:	b9b0      	cbnz	r0, 34001c4c <BSP_XSPI_NOR_ConfigFlash+0x70>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001c1e:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
34001c20:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001c24:	78a2      	ldrb	r2, [r4, #2]
34001c26:	4638      	mov	r0, r7
34001c28:	7861      	ldrb	r1, [r4, #1]
34001c2a:	f7ff fcfa 	bl	34001622 <MX25UM51245G_WriteCfg2Register>
34001c2e:	4680      	mov	r8, r0
34001c30:	b960      	cbnz	r0, 34001c4c <BSP_XSPI_NOR_ConfigFlash+0x70>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34001c32:	2028      	movs	r0, #40	@ 0x28
34001c34:	f000 fb58 	bl	340022e8 <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
34001c38:	78a3      	ldrb	r3, [r4, #2]
34001c3a:	2b01      	cmp	r3, #1
34001c3c:	d009      	beq.n	34001c52 <BSP_XSPI_NOR_ConfigFlash+0x76>
      }

      if (ret == BSP_ERROR_NONE)
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001c3e:	2200      	movs	r2, #0
34001c40:	481c      	ldr	r0, [pc, #112]	@ (34001cb4 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001c42:	4611      	mov	r1, r2
34001c44:	f7ff fb52 	bl	340012ec <MX25UM51245G_AutoPollingMemReady>
34001c48:	4603      	mov	r3, r0
34001c4a:	b170      	cbz	r0, 34001c6a <BSP_XSPI_NOR_ConfigFlash+0x8e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001c4c:	f06f 0004 	mvn.w	r0, #4
34001c50:	e7db      	b.n	34001c0a <BSP_XSPI_NOR_ConfigFlash+0x2e>
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001c52:	4638      	mov	r0, r7
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34001c54:	f8c7 800c 	str.w	r8, [r7, #12]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34001c58:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001c5c:	f009 f80a 	bl	3400ac74 <HAL_XSPI_Init>
34001c60:	2800      	cmp	r0, #0
34001c62:	d0ec      	beq.n	34001c3e <BSP_XSPI_NOR_ConfigFlash+0x62>
          ret = BSP_ERROR_PERIPH_FAILURE;
34001c64:	f06f 0003 	mvn.w	r0, #3
34001c68:	e7cf      	b.n	34001c0a <BSP_XSPI_NOR_ConfigFlash+0x2e>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001c6a:	aa03      	add	r2, sp, #12
34001c6c:	4601      	mov	r1, r0
34001c6e:	9200      	str	r2, [sp, #0]
34001c70:	4602      	mov	r2, r0
34001c72:	4810      	ldr	r0, [pc, #64]	@ (34001cb4 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001c74:	f7ff fd2c 	bl	340016d0 <MX25UM51245G_ReadCfg2Register>
34001c78:	2800      	cmp	r0, #0
34001c7a:	d1e7      	bne.n	34001c4c <BSP_XSPI_NOR_ConfigFlash+0x70>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else if (reg[0] != 0U)
34001c7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001c80:	2b00      	cmp	r3, #0
34001c82:	d1e3      	bne.n	34001c4c <BSP_XSPI_NOR_ConfigFlash+0x70>
            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
34001c84:	2d01      	cmp	r5, #1
34001c86:	d1bb      	bne.n	34001c00 <BSP_XSPI_NOR_ConfigFlash+0x24>
              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001c88:	78a3      	ldrb	r3, [r4, #2]
34001c8a:	b933      	cbnz	r3, 34001c9a <BSP_XSPI_NOR_ConfigFlash+0xbe>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
34001c8c:	f7ff ff14 	bl	34001ab8 <XSPI_NOR_EnterDOPIMode.constprop.0>
34001c90:	e005      	b.n	34001c9e <BSP_XSPI_NOR_ConfigFlash+0xc2>
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
34001c92:	2901      	cmp	r1, #1
34001c94:	d1b4      	bne.n	34001c00 <BSP_XSPI_NOR_ConfigFlash+0x24>
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
34001c96:	2a00      	cmp	r2, #0
34001c98:	d1f8      	bne.n	34001c8c <BSP_XSPI_NOR_ConfigFlash+0xb0>
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34001c9a:	f7ff fec7 	bl	34001a2c <XSPI_NOR_EnterSOPIMode.constprop.0>
      if (ret == BSP_ERROR_NONE)
34001c9e:	2800      	cmp	r0, #0
34001ca0:	d1b3      	bne.n	34001c0a <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001ca2:	e7ad      	b.n	34001c00 <BSP_XSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
34001ca4:	f06f 0001 	mvn.w	r0, #1
34001ca8:	e7af      	b.n	34001c0a <BSP_XSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
34001caa:	f06f 0019 	mvn.w	r0, #25
  return ret;
34001cae:	e7ac      	b.n	34001c0a <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001cb0:	340124c4 	.word	0x340124c4
34001cb4:	340124c8 	.word	0x340124c8

34001cb8 <BSP_XSPI_NOR_Init>:
{
34001cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34001cbc:	4689      	mov	r9, r1
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001cbe:	4604      	mov	r4, r0
34001cc0:	4e86      	ldr	r6, [pc, #536]	@ (34001edc <BSP_XSPI_NOR_Init+0x224>)
{
34001cc2:	b08f      	sub	sp, #60	@ 0x3c
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001cc4:	2800      	cmp	r0, #0
34001cc6:	f040 8102 	bne.w	34001ece <BSP_XSPI_NOR_Init+0x216>
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34001cca:	f8df 8220 	ldr.w	r8, [pc, #544]	@ 34001eec <BSP_XSPI_NOR_Init+0x234>
34001cce:	f898 3000 	ldrb.w	r3, [r8]
34001cd2:	b153      	cbz	r3, 34001cea <BSP_XSPI_NOR_Init+0x32>
      ret = BSP_ERROR_NONE;
34001cd4:	2500      	movs	r5, #0
  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
34001cd6:	2064      	movs	r0, #100	@ 0x64
34001cd8:	2100      	movs	r1, #0
34001cda:	fb00 6004 	mla	r0, r0, r4, r6
34001cde:	f009 fba3 	bl	3400b428 <HAL_XSPI_SetClockPrescaler>
}
34001ce2:	4628      	mov	r0, r5
34001ce4:	b00f      	add	sp, #60	@ 0x3c
34001ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001cea:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
34001cee:	4f7c      	ldr	r7, [pc, #496]	@ (34001ee0 <BSP_XSPI_NOR_Init+0x228>)
  __HAL_RCC_PWR_CLK_ENABLE();
34001cf0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34001cf4:	f8c7 5a60 	str.w	r5, [r7, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34001cf8:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001cfc:	f04f 0b03 	mov.w	fp, #3
34001d00:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
34001d02:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
34001d04:	f7ff fe86 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
34001d08:	f002 f8a0 	bl	34003e4c <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34001d0c:	2101      	movs	r1, #1
34001d0e:	2002      	movs	r0, #2
34001d10:	f002 f856 	bl	34003dc0 <HAL_PWREx_ConfigVddIORange>
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001d14:	4b73      	ldr	r3, [pc, #460]	@ (34001ee4 <BSP_XSPI_NOR_Init+0x22c>)
  XSPI_CLK_GPIO_CLK_ENABLE();
34001d16:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001d1a:	f8c7 5a20 	str.w	r5, [r7, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001d1e:	f8c3 5220 	str.w	r5, [r3, #544]	@ 0x220
34001d22:	f7ff fe77 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34001d26:	2509      	movs	r5, #9
  XSPI_DQS_GPIO_CLK_ENABLE();
34001d28:	f7ff fe74 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001d2c:	2701      	movs	r7, #1
  XSPI_CS_GPIO_CLK_ENABLE();
34001d2e:	f7ff fe71 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
34001d32:	f7ff fe6f 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
34001d36:	f7ff fe6d 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
34001d3a:	f7ff fe6b 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
34001d3e:	f7ff fe69 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
34001d42:	f7ff fe67 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
34001d46:	f7ff fe65 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
34001d4a:	f7ff fe63 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34001d4e:	f7ff fe61 	bl	34001a14 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
34001d52:	2302      	movs	r3, #2
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34001d54:	4864      	ldr	r0, [pc, #400]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001d56:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34001d58:	e9cd 3305 	strd	r3, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34001d5c:	e9cd 7b07 	strd	r7, fp, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34001d60:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34001d62:	f001 f9a1 	bl	340030a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34001d66:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34001d68:	485f      	ldr	r0, [pc, #380]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001d6a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34001d6c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34001d6e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
34001d70:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34001d72:	f001 f999 	bl	340030a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34001d76:	2304      	movs	r3, #4
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34001d78:	485b      	ldr	r0, [pc, #364]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001d7a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34001d7c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
34001d7e:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34001d80:	f001 f992 	bl	340030a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34001d84:	2308      	movs	r3, #8
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34001d86:	4858      	ldr	r0, [pc, #352]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001d88:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34001d8a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
34001d8c:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34001d8e:	f001 f98b 	bl	340030a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34001d92:	2310      	movs	r3, #16
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34001d94:	f04f 0a20 	mov.w	sl, #32
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34001d98:	4853      	ldr	r0, [pc, #332]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001d9a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34001d9c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
34001d9e:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34001da0:	f001 f982 	bl	340030a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34001da4:	4850      	ldr	r0, [pc, #320]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001da6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34001da8:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
34001dac:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34001dae:	f001 f97b 	bl	340030a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34001db2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34001db6:	484c      	ldr	r0, [pc, #304]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001db8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34001dba:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
34001dbc:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34001dbe:	f001 f973 	bl	340030a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34001dc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34001dc6:	4848      	ldr	r0, [pc, #288]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001dc8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
34001dca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
34001dcc:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34001dce:	f001 f96b 	bl	340030a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34001dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34001dd6:	4844      	ldr	r0, [pc, #272]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001dd8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34001dda:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
34001ddc:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
34001dde:	f001 f963 	bl	340030a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34001de2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34001de6:	4840      	ldr	r0, [pc, #256]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001de8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34001dea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
34001dec:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34001dee:	f001 f95b 	bl	340030a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34001df2:	483d      	ldr	r0, [pc, #244]	@ (34001ee8 <BSP_XSPI_NOR_Init+0x230>)
34001df4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
34001df6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
34001df8:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34001dfa:	f001 f955 	bl	340030a8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
34001dfe:	4622      	mov	r2, r4
34001e00:	210f      	movs	r1, #15
34001e02:	20aa      	movs	r0, #170	@ 0xaa
34001e04:	f000 fbb6 	bl	34002574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
34001e08:	20aa      	movs	r0, #170	@ 0xaa
34001e0a:	f000 fc11 	bl	34002630 <HAL_NVIC_EnableIRQ>
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
34001e0e:	a805      	add	r0, sp, #20
34001e10:	f7ff fa53 	bl	340012ba <MX25UM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34001e14:	9b05      	ldr	r3, [sp, #20]
34001e16:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
34001e1a:	2b00      	cmp	r3, #0
34001e1c:	fab3 f283 	clz	r2, r3
34001e20:	bf08      	it	eq
34001e22:	4652      	moveq	r2, sl
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34001e24:	f899 3001 	ldrb.w	r3, [r9, #1]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34001e28:	4630      	mov	r0, r6
34001e2a:	a901      	add	r1, sp, #4
      xspi_init.ClockPrescaler = 3;
34001e2c:	f8cd b008 	str.w	fp, [sp, #8]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
34001e30:	9201      	str	r2, [sp, #4]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34001e32:	9403      	str	r4, [sp, #12]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34001e34:	9304      	str	r3, [sp, #16]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34001e36:	f7ff fe93 	bl	34001b60 <MX_XSPI_NOR_Init>
34001e3a:	2800      	cmp	r0, #0
34001e3c:	d14a      	bne.n	34001ed4 <BSP_XSPI_NOR_Init+0x21c>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001e3e:	4622      	mov	r2, r4
34001e40:	4621      	mov	r1, r4
34001e42:	4630      	mov	r0, r6
34001e44:	f7ff fca4 	bl	34001790 <MX25UM51245G_ResetEnable>
34001e48:	b110      	cbz	r0, 34001e50 <BSP_XSPI_NOR_Init+0x198>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34001e4a:	f06f 0504 	mvn.w	r5, #4
34001e4e:	e742      	b.n	34001cd6 <BSP_XSPI_NOR_Init+0x1e>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001e50:	4622      	mov	r2, r4
34001e52:	4621      	mov	r1, r4
34001e54:	4630      	mov	r0, r6
34001e56:	f7ff fccc 	bl	340017f2 <MX25UM51245G_ResetMemory>
34001e5a:	2800      	cmp	r0, #0
34001e5c:	d1f5      	bne.n	34001e4a <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001e5e:	4622      	mov	r2, r4
34001e60:	4639      	mov	r1, r7
34001e62:	4630      	mov	r0, r6
34001e64:	f7ff fc94 	bl	34001790 <MX25UM51245G_ResetEnable>
34001e68:	2800      	cmp	r0, #0
34001e6a:	d1ee      	bne.n	34001e4a <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001e6c:	4622      	mov	r2, r4
34001e6e:	4639      	mov	r1, r7
34001e70:	4630      	mov	r0, r6
34001e72:	f7ff fcbe 	bl	340017f2 <MX25UM51245G_ResetMemory>
34001e76:	2800      	cmp	r0, #0
34001e78:	d1e7      	bne.n	34001e4a <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001e7a:	463a      	mov	r2, r7
34001e7c:	4639      	mov	r1, r7
34001e7e:	4630      	mov	r0, r6
34001e80:	f7ff fc86 	bl	34001790 <MX25UM51245G_ResetEnable>
34001e84:	2800      	cmp	r0, #0
34001e86:	d1e0      	bne.n	34001e4a <BSP_XSPI_NOR_Init+0x192>
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001e88:	463a      	mov	r2, r7
34001e8a:	4639      	mov	r1, r7
34001e8c:	4630      	mov	r0, r6
34001e8e:	f7ff fcb0 	bl	340017f2 <MX25UM51245G_ResetMemory>
34001e92:	2800      	cmp	r0, #0
34001e94:	d1d9      	bne.n	34001e4a <BSP_XSPI_NOR_Init+0x192>
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34001e96:	2064      	movs	r0, #100	@ 0x64
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
34001e98:	f888 7000 	strb.w	r7, [r8]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
34001e9c:	f888 4001 	strb.w	r4, [r8, #1]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
34001ea0:	f888 4002 	strb.w	r4, [r8, #2]
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34001ea4:	f000 fa20 	bl	340022e8 <HAL_Delay>
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34001ea8:	4630      	mov	r0, r6
34001eaa:	f898 2002 	ldrb.w	r2, [r8, #2]
34001eae:	f898 1001 	ldrb.w	r1, [r8, #1]
34001eb2:	f7ff fa1b 	bl	340012ec <MX25UM51245G_AutoPollingMemReady>
34001eb6:	2800      	cmp	r0, #0
34001eb8:	d1c7      	bne.n	34001e4a <BSP_XSPI_NOR_Init+0x192>
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
34001eba:	f899 2001 	ldrb.w	r2, [r9, #1]
34001ebe:	f899 1000 	ldrb.w	r1, [r9]
34001ec2:	f7ff fe8b 	bl	34001bdc <BSP_XSPI_NOR_ConfigFlash>
34001ec6:	2800      	cmp	r0, #0
34001ec8:	f43f af04 	beq.w	34001cd4 <BSP_XSPI_NOR_Init+0x1c>
34001ecc:	e7bd      	b.n	34001e4a <BSP_XSPI_NOR_Init+0x192>
    ret = BSP_ERROR_WRONG_PARAM;
34001ece:	f06f 0501 	mvn.w	r5, #1
34001ed2:	e700      	b.n	34001cd6 <BSP_XSPI_NOR_Init+0x1e>
        ret = BSP_ERROR_PERIPH_FAILURE;
34001ed4:	f06f 0503 	mvn.w	r5, #3
34001ed8:	e6fd      	b.n	34001cd6 <BSP_XSPI_NOR_Init+0x1e>
34001eda:	bf00      	nop
34001edc:	340124c8 	.word	0x340124c8
34001ee0:	56028000 	.word	0x56028000
34001ee4:	56029000 	.word	0x56029000
34001ee8:	56023400 	.word	0x56023400
34001eec:	340124c4 	.word	0x340124c4

34001ef0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34001ef0:	4b44      	ldr	r3, [pc, #272]	@ (34002004 <SystemInit+0x114>)
34001ef2:	4a45      	ldr	r2, [pc, #276]	@ (34002008 <SystemInit+0x118>)
{
34001ef4:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34001ef6:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
34001ef8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
34001efa:	2502      	movs	r5, #2
  SAU->RNR = 0;
34001efc:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34001efe:	4943      	ldr	r1, [pc, #268]	@ (3400200c <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34001f00:	4e43      	ldr	r6, [pc, #268]	@ (34002010 <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34001f02:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34001f06:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34001f0a:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34001f0e:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
34001f12:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34001f16:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001f1a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
34001f1e:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34001f22:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001f26:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
34001f2a:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
34001f2e:	2503      	movs	r5, #3
  SAU->RBAR = 0;
34001f30:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001f34:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
34001f38:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
34001f3c:	2504      	movs	r5, #4
  SAU->RBAR = 0;
34001f3e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001f42:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
34001f46:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
34001f4a:	2505      	movs	r5, #5
  SAU->RBAR = 0;
34001f4c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001f50:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
34001f54:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
34001f58:	2506      	movs	r5, #6
  SAU->RBAR = 0;
34001f5a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001f5e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
34001f62:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
34001f66:	2507      	movs	r5, #7
  SAU->RBAR = 0;
34001f68:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001f6c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
34001f70:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34001f74:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34001f78:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34001f7c:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
34001f80:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
34001f84:	689a      	ldr	r2, [r3, #8]
34001f86:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34001f88:	4a22      	ldr	r2, [pc, #136]	@ (34002014 <SystemInit+0x124>)
34001f8a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34001f8c:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
34001f90:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34001f92:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34001f94:	f045 0510 	orr.w	r5, r5, #16
34001f98:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34001f9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34001f9c:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
34001fa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34001fa4:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34001fa8:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
34001fac:	f042 0210 	orr.w	r2, r2, #16
34001fb0:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34001fb4:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34001fb8:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
34001fbc:	f022 0210 	bic.w	r2, r2, #16
34001fc0:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
34001fc4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34001fc8:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34001fcc:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34001fd0:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34001fd2:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34001fd6:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
34001fda:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34001fde:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
34001fe2:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34001fe4:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34001fe8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
34001fec:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
34001ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34001ff4:	4a08      	ldr	r2, [pc, #32]	@ (34002018 <SystemInit+0x128>)
34001ff6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
34001ffa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34001ffe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34002002:	bd70      	pop	{r4, r5, r6, pc}
34002004:	e000ed00 	.word	0xe000ed00
34002008:	34000400 	.word	0x34000400
3400200c:	56028000 	.word	0x56028000
34002010:	56008000 	.word	0x56008000
34002014:	56024800 	.word	0x56024800
34002018:	e002ed00 	.word	0xe002ed00

3400201c <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400201c:	4b7b      	ldr	r3, [pc, #492]	@ (3400220c <SystemCoreClockUpdate+0x1f0>)
{
3400201e:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34002020:	6a1a      	ldr	r2, [r3, #32]
34002022:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
34002026:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
3400202a:	f000 80d1 	beq.w	340021d0 <SystemCoreClockUpdate+0x1b4>
3400202e:	d808      	bhi.n	34002042 <SystemCoreClockUpdate+0x26>
34002030:	2a00      	cmp	r2, #0
34002032:	d039      	beq.n	340020a8 <SystemCoreClockUpdate+0x8c>
34002034:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
34002038:	d03c      	beq.n	340020b4 <SystemCoreClockUpdate+0x98>
  uint32_t sysclk = 0;
3400203a:	2200      	movs	r2, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
3400203c:	4b74      	ldr	r3, [pc, #464]	@ (34002210 <SystemCoreClockUpdate+0x1f4>)
3400203e:	601a      	str	r2, [r3, #0]
}
34002040:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34002042:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34002046:	d1f8      	bne.n	3400203a <SystemCoreClockUpdate+0x1e>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34002048:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
3400204c:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34002050:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34002054:	d036      	beq.n	340020c4 <SystemCoreClockUpdate+0xa8>
34002056:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
3400205a:	d044      	beq.n	340020e6 <SystemCoreClockUpdate+0xca>
3400205c:	2a00      	cmp	r2, #0
3400205e:	d152      	bne.n	34002106 <SystemCoreClockUpdate+0xea>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34002060:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
34002064:	f012 6400 	ands.w	r4, r2, #134217728	@ 0x8000000
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34002068:	f002 41e0 	and.w	r1, r2, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400206c:	f040 80b9 	bne.w	340021e2 <SystemCoreClockUpdate+0x1c6>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34002070:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34002074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34002078:	f3c2 250b 	ubfx	r5, r2, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3400207c:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34002080:	460c      	mov	r4, r1
34002082:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34002086:	f3c3 66c2 	ubfx	r6, r3, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
3400208a:	f3c2 5105 	ubfx	r1, r2, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
3400208e:	f3c3 6302 	ubfx	r3, r3, #24, #3
    switch (pllsource)
34002092:	f000 8094 	beq.w	340021be <SystemCoreClockUpdate+0x1a2>
34002096:	f200 809d 	bhi.w	340021d4 <SystemCoreClockUpdate+0x1b8>
3400209a:	2c00      	cmp	r4, #0
3400209c:	d047      	beq.n	3400212e <SystemCoreClockUpdate+0x112>
3400209e:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
340020a2:	d07c      	beq.n	3400219e <SystemCoreClockUpdate+0x182>
340020a4:	2200      	movs	r2, #0
340020a6:	e049      	b.n	3400213c <SystemCoreClockUpdate+0x120>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340020a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340020aa:	4a5a      	ldr	r2, [pc, #360]	@ (34002214 <SystemCoreClockUpdate+0x1f8>)
340020ac:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340020b0:	40da      	lsrs	r2, r3
    break;
340020b2:	e7c3      	b.n	3400203c <SystemCoreClockUpdate+0x20>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
340020b6:	4a58      	ldr	r2, [pc, #352]	@ (34002218 <SystemCoreClockUpdate+0x1fc>)
340020b8:	f413 7f00 	tst.w	r3, #512	@ 0x200
340020bc:	4b57      	ldr	r3, [pc, #348]	@ (3400221c <SystemCoreClockUpdate+0x200>)
340020be:	bf08      	it	eq
340020c0:	461a      	moveq	r2, r3
340020c2:	e7bb      	b.n	3400203c <SystemCoreClockUpdate+0x20>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
340020c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
340020c8:	f012 6400 	ands.w	r4, r2, #134217728	@ 0x8000000
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
340020cc:	f002 41e0 	and.w	r1, r2, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340020d0:	f040 8087 	bne.w	340021e2 <SystemCoreClockUpdate+0x1c6>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340020d4:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
340020d8:	f3c2 250b 	ubfx	r5, r2, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
340020dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340020e0:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
340020e4:	e7cc      	b.n	34002080 <SystemCoreClockUpdate+0x64>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
340020e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
340020ea:	f012 6400 	ands.w	r4, r2, #134217728	@ 0x8000000
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
340020ee:	f002 41e0 	and.w	r1, r2, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340020f2:	d176      	bne.n	340021e2 <SystemCoreClockUpdate+0x1c6>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
340020f4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
340020f8:	f3c2 250b 	ubfx	r5, r2, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
340020fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34002100:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34002104:	e7bc      	b.n	34002080 <SystemCoreClockUpdate+0x64>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34002106:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
3400210a:	f012 6400 	ands.w	r4, r2, #134217728	@ 0x8000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3400210e:	f002 41e0 	and.w	r1, r2, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34002112:	d166      	bne.n	340021e2 <SystemCoreClockUpdate+0x1c6>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34002114:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34002118:	f3c2 250b 	ubfx	r5, r2, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
3400211c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34002120:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34002124:	e7ac      	b.n	34002080 <SystemCoreClockUpdate+0x64>
34002126:	460b      	mov	r3, r1
34002128:	460e      	mov	r6, r1
3400212a:	4608      	mov	r0, r1
3400212c:	460d      	mov	r5, r1
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3400212e:	4a37      	ldr	r2, [pc, #220]	@ (3400220c <SystemCoreClockUpdate+0x1f0>)
34002130:	6c97      	ldr	r7, [r2, #72]	@ 0x48
34002132:	4a38      	ldr	r2, [pc, #224]	@ (34002214 <SystemCoreClockUpdate+0x1f8>)
34002134:	f3c7 17c1 	ubfx	r7, r7, #7, #2
34002138:	40fa      	lsrs	r2, r7
    if (pllbypass == 0U)
3400213a:	bb3c      	cbnz	r4, 3400218c <SystemCoreClockUpdate+0x170>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
3400213c:	ee07 0a10 	vmov	s14, r0
34002140:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
34002144:	ee07 5a10 	vmov	s14, r5
34002148:	ee07 2a90 	vmov	s15, r2
3400214c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 34002220 <SystemCoreClockUpdate+0x204>
34002150:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34002154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34002158:	eea6 7a26 	vfma.f32	s14, s12, s13
3400215c:	ee67 7a87 	vmul.f32	s15, s15, s14
34002160:	ee07 1a10 	vmov	s14, r1
34002164:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34002168:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
3400216c:	ee07 6a90 	vmov	s15, r6
34002170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
34002174:	ee07 3a90 	vmov	s15, r3
34002178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400217c:	ee27 7a27 	vmul.f32	s14, s14, s15
34002180:	eec6 7a87 	vdiv.f32	s15, s13, s14
34002184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34002188:	ee17 2a90 	vmov	r2, s15
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
3400218c:	4b1f      	ldr	r3, [pc, #124]	@ (3400220c <SystemCoreClockUpdate+0x1f0>)
3400218e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34002192:	f3c3 4307 	ubfx	r3, r3, #16, #8
34002196:	3301      	adds	r3, #1
    sysclk = sysclk / ic_divider;
34002198:	fbb2 f2f3 	udiv	r2, r2, r3
    break;
3400219c:	e74e      	b.n	3400203c <SystemCoreClockUpdate+0x20>
3400219e:	2400      	movs	r4, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340021a0:	4a1a      	ldr	r2, [pc, #104]	@ (3400220c <SystemCoreClockUpdate+0x1f0>)
        sysclk = MSI_VALUE;
340021a2:	4f1e      	ldr	r7, [pc, #120]	@ (3400221c <SystemCoreClockUpdate+0x200>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340021a4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
        sysclk = MSI_VALUE;
340021a6:	f412 7f00 	tst.w	r2, #512	@ 0x200
340021aa:	4a1b      	ldr	r2, [pc, #108]	@ (34002218 <SystemCoreClockUpdate+0x1fc>)
340021ac:	bf08      	it	eq
340021ae:	463a      	moveq	r2, r7
340021b0:	e7c3      	b.n	3400213a <SystemCoreClockUpdate+0x11e>
340021b2:	2300      	movs	r3, #0
340021b4:	461e      	mov	r6, r3
340021b6:	4618      	mov	r0, r3
340021b8:	461d      	mov	r5, r3
340021ba:	4619      	mov	r1, r3
340021bc:	e7f0      	b.n	340021a0 <SystemCoreClockUpdate+0x184>
340021be:	2400      	movs	r4, #0
      sysclk = HSE_VALUE;
340021c0:	4a18      	ldr	r2, [pc, #96]	@ (34002224 <SystemCoreClockUpdate+0x208>)
      break;
340021c2:	e7ba      	b.n	3400213a <SystemCoreClockUpdate+0x11e>
340021c4:	2300      	movs	r3, #0
340021c6:	461e      	mov	r6, r3
340021c8:	4618      	mov	r0, r3
340021ca:	461d      	mov	r5, r3
340021cc:	4619      	mov	r1, r3
340021ce:	e7f7      	b.n	340021c0 <SystemCoreClockUpdate+0x1a4>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340021d0:	4a14      	ldr	r2, [pc, #80]	@ (34002224 <SystemCoreClockUpdate+0x208>)
340021d2:	e733      	b.n	3400203c <SystemCoreClockUpdate+0x20>
340021d4:	f1b4 5f40 	cmp.w	r4, #805306368	@ 0x30000000
340021d8:	f47f af64 	bne.w	340020a4 <SystemCoreClockUpdate+0x88>
340021dc:	2400      	movs	r4, #0
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
340021de:	4a12      	ldr	r2, [pc, #72]	@ (34002228 <SystemCoreClockUpdate+0x20c>)
      break;
340021e0:	e7ab      	b.n	3400213a <SystemCoreClockUpdate+0x11e>
    switch (pllsource)
340021e2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
340021e6:	d0ed      	beq.n	340021c4 <SystemCoreClockUpdate+0x1a8>
340021e8:	d806      	bhi.n	340021f8 <SystemCoreClockUpdate+0x1dc>
340021ea:	2900      	cmp	r1, #0
340021ec:	d09b      	beq.n	34002126 <SystemCoreClockUpdate+0x10a>
340021ee:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
340021f2:	d0de      	beq.n	340021b2 <SystemCoreClockUpdate+0x196>
340021f4:	2200      	movs	r2, #0
340021f6:	e7c9      	b.n	3400218c <SystemCoreClockUpdate+0x170>
340021f8:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
340021fc:	d1fa      	bne.n	340021f4 <SystemCoreClockUpdate+0x1d8>
340021fe:	2300      	movs	r3, #0
34002200:	461e      	mov	r6, r3
34002202:	4618      	mov	r0, r3
34002204:	461d      	mov	r5, r3
34002206:	4619      	mov	r1, r3
34002208:	e7e9      	b.n	340021de <SystemCoreClockUpdate+0x1c2>
3400220a:	bf00      	nop
3400220c:	56028000 	.word	0x56028000
34002210:	3401218c 	.word	0x3401218c
34002214:	03d09000 	.word	0x03d09000
34002218:	00f42400 	.word	0x00f42400
3400221c:	003d0900 	.word	0x003d0900
34002220:	33800000 	.word	0x33800000
34002224:	02dc6c00 	.word	0x02dc6c00
34002228:	00bb8000 	.word	0x00bb8000

3400222c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
3400222c:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34002230:	b500      	push	{lr}
  SystemCoreClockUpdate();
34002232:	f7ff fef3 	bl	3400201c <SystemCoreClockUpdate>

  return SystemCoreClock;
}
34002236:	4b05      	ldr	r3, [pc, #20]	@ (3400224c <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
34002238:	f85d eb04 	ldr.w	lr, [sp], #4
3400223c:	6818      	ldr	r0, [r3, #0]
3400223e:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34002242:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34002246:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
3400224a:	4774      	bxns	lr
3400224c:	3401218c 	.word	0x3401218c

34002250 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
34002250:	4770      	bx	lr
	...

34002254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34002254:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34002256:	4b0f      	ldr	r3, [pc, #60]	@ (34002294 <HAL_InitTick+0x40>)
{
34002258:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq == 0UL)
3400225a:	781a      	ldrb	r2, [r3, #0]
3400225c:	b90a      	cbnz	r2, 34002262 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
3400225e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
34002260:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34002262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34002266:	fbb3 f3f2 	udiv	r3, r3, r2
3400226a:	4a0b      	ldr	r2, [pc, #44]	@ (34002298 <HAL_InitTick+0x44>)
3400226c:	6810      	ldr	r0, [r2, #0]
3400226e:	fbb0 f0f3 	udiv	r0, r0, r3
34002272:	f000 f9f1 	bl	34002658 <HAL_SYSTICK_Config>
34002276:	4604      	mov	r4, r0
34002278:	2800      	cmp	r0, #0
3400227a:	d1f0      	bne.n	3400225e <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
3400227c:	2d0f      	cmp	r5, #15
3400227e:	d8ee      	bhi.n	3400225e <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34002280:	4602      	mov	r2, r0
34002282:	4629      	mov	r1, r5
34002284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34002288:	f000 f974 	bl	34002574 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
3400228c:	4b03      	ldr	r3, [pc, #12]	@ (3400229c <HAL_InitTick+0x48>)
3400228e:	4620      	mov	r0, r4
34002290:	601d      	str	r5, [r3, #0]
  return HAL_OK;
34002292:	e7e5      	b.n	34002260 <HAL_InitTick+0xc>
34002294:	34012190 	.word	0x34012190
34002298:	3401218c 	.word	0x3401218c
3400229c:	34012194 	.word	0x34012194

340022a0 <HAL_Init>:
{
340022a0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
340022a2:	2003      	movs	r0, #3
340022a4:	f000 f948 	bl	34002538 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
340022a8:	f7ff feb8 	bl	3400201c <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
340022ac:	200f      	movs	r0, #15
340022ae:	f7ff ffd1 	bl	34002254 <HAL_InitTick>
340022b2:	4604      	mov	r4, r0
340022b4:	b918      	cbnz	r0, 340022be <HAL_Init+0x1e>
  HAL_MspInit();
340022b6:	f7ff ffcb 	bl	34002250 <HAL_MspInit>
}
340022ba:	4620      	mov	r0, r4
340022bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
340022be:	2401      	movs	r4, #1
340022c0:	e7fb      	b.n	340022ba <HAL_Init+0x1a>
	...

340022c4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
340022c4:	4a03      	ldr	r2, [pc, #12]	@ (340022d4 <HAL_IncTick+0x10>)
340022c6:	4b04      	ldr	r3, [pc, #16]	@ (340022d8 <HAL_IncTick+0x14>)
340022c8:	6811      	ldr	r1, [r2, #0]
340022ca:	781b      	ldrb	r3, [r3, #0]
340022cc:	440b      	add	r3, r1
340022ce:	6013      	str	r3, [r2, #0]
}
340022d0:	4770      	bx	lr
340022d2:	bf00      	nop
340022d4:	3401252c 	.word	0x3401252c
340022d8:	34012190 	.word	0x34012190

340022dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
340022dc:	4b01      	ldr	r3, [pc, #4]	@ (340022e4 <HAL_GetTick+0x8>)
340022de:	6818      	ldr	r0, [r3, #0]
}
340022e0:	4770      	bx	lr
340022e2:	bf00      	nop
340022e4:	3401252c 	.word	0x3401252c

340022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
340022e8:	b538      	push	{r3, r4, r5, lr}
340022ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
340022ec:	f7ff fff6 	bl	340022dc <HAL_GetTick>
340022f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
340022f2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
340022f4:	bf1e      	ittt	ne
340022f6:	4b04      	ldrne	r3, [pc, #16]	@ (34002308 <HAL_Delay+0x20>)
340022f8:	781b      	ldrbne	r3, [r3, #0]
340022fa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
340022fc:	f7ff ffee 	bl	340022dc <HAL_GetTick>
34002300:	1b43      	subs	r3, r0, r5
34002302:	42a3      	cmp	r3, r4
34002304:	d3fa      	bcc.n	340022fc <HAL_Delay+0x14>
  {
  }
}
34002306:	bd38      	pop	{r3, r4, r5, pc}
34002308:	34012190 	.word	0x34012190

3400230c <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
3400230c:	b570      	push	{r4, r5, r6, lr}
3400230e:	4604      	mov	r4, r0
34002310:	460d      	mov	r5, r1
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
34002312:	f7ff ffe3 	bl	340022dc <HAL_GetTick>
34002316:	4606      	mov	r6, r0

  /* Check the handle pointer */
  if (hbsec == NULL)
34002318:	b12c      	cbz	r4, 34002326 <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
3400231a:	6822      	ldr	r2, [r4, #0]
3400231c:	4b1b      	ldr	r3, [pc, #108]	@ (3400238c <HAL_BSEC_OTP_Reload+0x80>)
3400231e:	429a      	cmp	r2, r3
34002320:	d003      	beq.n	3400232a <HAL_BSEC_OTP_Reload+0x1e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34002322:	2301      	movs	r3, #1
34002324:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
34002326:	2001      	movs	r0, #1
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
}
34002328:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
3400232a:	f5b5 7fbc 	cmp.w	r5, #376	@ 0x178
3400232e:	d2f8      	bcs.n	34002322 <HAL_BSEC_OTP_Reload+0x16>
    status_reg = FuseId / 32U;
34002330:	096b      	lsrs	r3, r5, #5
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34002332:	f503 7308 	add.w	r3, r3, #544	@ 0x220
34002336:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400233a:	2301      	movs	r3, #1
3400233c:	f005 001f 	and.w	r0, r5, #31
34002340:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34002342:	420b      	tst	r3, r1
34002344:	d11f      	bne.n	34002386 <HAL_BSEC_OTP_Reload+0x7a>
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
34002346:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
3400234a:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
3400234e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34002352:	432b      	orrs	r3, r5
34002354:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34002358:	6823      	ldr	r3, [r4, #0]
3400235a:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400235e:	07d2      	lsls	r2, r2, #31
34002360:	d409      	bmi.n	34002376 <HAL_BSEC_OTP_Reload+0x6a>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
34002362:	f8d3 0e44 	ldr.w	r0, [r3, #3652]	@ 0xe44
34002366:	f410 008c 	ands.w	r0, r0, #4587520	@ 0x460000
3400236a:	d0dd      	beq.n	34002328 <HAL_BSEC_OTP_Reload+0x1c>
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
3400236c:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34002370:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
34002374:	e7d6      	b.n	34002324 <HAL_BSEC_OTP_Reload+0x18>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34002376:	f7ff ffb1 	bl	340022dc <HAL_GetTick>
3400237a:	1b80      	subs	r0, r0, r6
3400237c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34002380:	d9ea      	bls.n	34002358 <HAL_BSEC_OTP_Reload+0x4c>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34002382:	230a      	movs	r3, #10
34002384:	e7ce      	b.n	34002324 <HAL_BSEC_OTP_Reload+0x18>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34002386:	2304      	movs	r3, #4
34002388:	e7cc      	b.n	34002324 <HAL_BSEC_OTP_Reload+0x18>
3400238a:	bf00      	nop
3400238c:	56009000 	.word	0x56009000

34002390 <HAL_BSEC_OTP_Read>:
{
34002390:	b570      	push	{r4, r5, r6, lr}
34002392:	460e      	mov	r6, r1
34002394:	4615      	mov	r5, r2
  if (hbsec == NULL)
34002396:	4604      	mov	r4, r0
34002398:	b130      	cbz	r0, 340023a8 <HAL_BSEC_OTP_Read+0x18>
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
3400239a:	b11a      	cbz	r2, 340023a4 <HAL_BSEC_OTP_Read+0x14>
3400239c:	6802      	ldr	r2, [r0, #0]
3400239e:	4b09      	ldr	r3, [pc, #36]	@ (340023c4 <HAL_BSEC_OTP_Read+0x34>)
340023a0:	429a      	cmp	r2, r3
340023a2:	d003      	beq.n	340023ac <HAL_BSEC_OTP_Read+0x1c>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340023a4:	2301      	movs	r3, #1
340023a6:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
340023a8:	2001      	movs	r0, #1
}
340023aa:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
340023ac:	f5b1 7fbc 	cmp.w	r1, #376	@ 0x178
340023b0:	d2f8      	bcs.n	340023a4 <HAL_BSEC_OTP_Read+0x14>
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
340023b2:	f7ff ffab 	bl	3400230c <HAL_BSEC_OTP_Reload>
340023b6:	2800      	cmp	r0, #0
340023b8:	d1f6      	bne.n	340023a8 <HAL_BSEC_OTP_Read+0x18>
      *pFuseData = hbsec->Instance->FVRw[FuseId];
340023ba:	6823      	ldr	r3, [r4, #0]
340023bc:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
340023c0:	602b      	str	r3, [r5, #0]
  return HAL_OK;
340023c2:	e7f2      	b.n	340023aa <HAL_BSEC_OTP_Read+0x1a>
340023c4:	56009000 	.word	0x56009000

340023c8 <HAL_BSEC_OTP_Program>:
{
340023c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
340023cc:	4604      	mov	r4, r0
340023ce:	460e      	mov	r6, r1
340023d0:	4617      	mov	r7, r2
340023d2:	4699      	mov	r9, r3
  uint32_t tick_start = HAL_GetTick();
340023d4:	f7ff ff82 	bl	340022dc <HAL_GetTick>
340023d8:	4680      	mov	r8, r0
  if (hbsec == NULL)
340023da:	b12c      	cbz	r4, 340023e8 <HAL_BSEC_OTP_Program+0x20>
 if (hbsec->Instance != BSEC)
340023dc:	6822      	ldr	r2, [r4, #0]
340023de:	4b28      	ldr	r3, [pc, #160]	@ (34002480 <HAL_BSEC_OTP_Program+0xb8>)
340023e0:	429a      	cmp	r2, r3
340023e2:	d005      	beq.n	340023f0 <HAL_BSEC_OTP_Program+0x28>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340023e4:	2301      	movs	r3, #1
340023e6:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
340023e8:	2001      	movs	r0, #1
}
340023ea:	b003      	add	sp, #12
340023ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
340023f0:	f439 4380 	bics.w	r3, r9, #16384	@ 0x4000
340023f4:	d004      	beq.n	34002400 <HAL_BSEC_OTP_Program+0x38>
340023f6:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
340023fa:	4822      	ldr	r0, [pc, #136]	@ (34002484 <HAL_BSEC_OTP_Program+0xbc>)
340023fc:	f7fe feb6 	bl	3400116c <assert_failed>
  if (FuseId < BSEC_NB_FUSES)
34002400:	f5b6 7fbc 	cmp.w	r6, #376	@ 0x178
34002404:	d2ee      	bcs.n	340023e4 <HAL_BSEC_OTP_Program+0x1c>
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34002406:	6822      	ldr	r2, [r4, #0]
    status_reg = FuseId / 32U;
34002408:	0973      	lsrs	r3, r6, #5
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400240a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
3400240e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34002412:	2301      	movs	r3, #1
34002414:	f006 001f 	and.w	r0, r6, #31
34002418:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400241a:	420b      	tst	r3, r1
3400241c:	d12e      	bne.n	3400247c <HAL_BSEC_OTP_Program+0xb4>
      hbsec->Instance->WDR = FuseData;
3400241e:	f8c2 7c08 	str.w	r7, [r2, #3080]	@ 0xc08
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
34002422:	f8d2 5c04 	ldr.w	r5, [r2, #3076]	@ 0xc04
34002426:	f425 45c3 	bic.w	r5, r5, #24960	@ 0x6180
3400242a:	f025 057f 	bic.w	r5, r5, #127	@ 0x7f
3400242e:	4335      	orrs	r5, r6
34002430:	ea45 0509 	orr.w	r5, r5, r9
34002434:	f445 5500 	orr.w	r5, r5, #8192	@ 0x2000
34002438:	f8c2 5c04 	str.w	r5, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
3400243c:	6823      	ldr	r3, [r4, #0]
3400243e:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
34002442:	07d2      	lsls	r2, r2, #31
34002444:	d406      	bmi.n	34002454 <HAL_BSEC_OTP_Program+0x8c>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
34002446:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3400244a:	03db      	lsls	r3, r3, #15
3400244c:	d50b      	bpl.n	34002466 <HAL_BSEC_OTP_Program+0x9e>
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
3400244e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34002452:	e7c8      	b.n	340023e6 <HAL_BSEC_OTP_Program+0x1e>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34002454:	f7ff ff42 	bl	340022dc <HAL_GetTick>
34002458:	eba0 0008 	sub.w	r0, r0, r8
3400245c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34002460:	d9ec      	bls.n	3400243c <HAL_BSEC_OTP_Program+0x74>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34002462:	230a      	movs	r3, #10
34002464:	e7bf      	b.n	340023e6 <HAL_BSEC_OTP_Program+0x1e>
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
34002466:	4631      	mov	r1, r6
34002468:	4620      	mov	r0, r4
3400246a:	aa01      	add	r2, sp, #4
3400246c:	f7ff ff90 	bl	34002390 <HAL_BSEC_OTP_Read>
34002470:	2800      	cmp	r0, #0
34002472:	d1b9      	bne.n	340023e8 <HAL_BSEC_OTP_Program+0x20>
        if (read_data != FuseData)
34002474:	9b01      	ldr	r3, [sp, #4]
34002476:	42bb      	cmp	r3, r7
34002478:	d1e9      	bne.n	3400244e <HAL_BSEC_OTP_Program+0x86>
3400247a:	e7b6      	b.n	340023ea <HAL_BSEC_OTP_Program+0x22>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3400247c:	2304      	movs	r3, #4
3400247e:	e7b2      	b.n	340023e6 <HAL_BSEC_OTP_Program+0x1e>
34002480:	56009000 	.word	0x56009000
34002484:	340104ca 	.word	0x340104ca

34002488 <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34002488:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
3400248a:	4604      	mov	r4, r0
3400248c:	b350      	cbz	r0, 340024e4 <HAL_CACHEAXI_Enable+0x5c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400248e:	6803      	ldr	r3, [r0, #0]
34002490:	4a15      	ldr	r2, [pc, #84]	@ (340024e8 <HAL_CACHEAXI_Enable+0x60>)
34002492:	4293      	cmp	r3, r2
34002494:	d008      	beq.n	340024a8 <HAL_CACHEAXI_Enable+0x20>
34002496:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400249a:	4293      	cmp	r3, r2
3400249c:	d004      	beq.n	340024a8 <HAL_CACHEAXI_Enable+0x20>
3400249e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
340024a2:	4812      	ldr	r0, [pc, #72]	@ (340024ec <HAL_CACHEAXI_Enable+0x64>)
340024a4:	f7fe fe62 	bl	3400116c <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340024a8:	6823      	ldr	r3, [r4, #0]
340024aa:	685b      	ldr	r3, [r3, #4]
340024ac:	07d9      	lsls	r1, r3, #31
340024ae:	d407      	bmi.n	340024c0 <HAL_CACHEAXI_Enable+0x38>
  }

  if (status == HAL_OK)
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340024b0:	2000      	movs	r0, #0
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340024b2:	6822      	ldr	r2, [r4, #0]
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340024b4:	60a0      	str	r0, [r4, #8]
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340024b6:	6813      	ldr	r3, [r2, #0]
340024b8:	f043 0301 	orr.w	r3, r3, #1
340024bc:	6013      	str	r3, [r2, #0]
  }

  return status;
}
340024be:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
340024c0:	f7ff ff0c 	bl	340022dc <HAL_GetTick>
340024c4:	4605      	mov	r5, r0
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340024c6:	6823      	ldr	r3, [r4, #0]
340024c8:	685b      	ldr	r3, [r3, #4]
340024ca:	07db      	lsls	r3, r3, #31
340024cc:	d5f0      	bpl.n	340024b0 <HAL_CACHEAXI_Enable+0x28>
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
340024ce:	f7ff ff05 	bl	340022dc <HAL_GetTick>
340024d2:	1b40      	subs	r0, r0, r5
340024d4:	2801      	cmp	r0, #1
340024d6:	d9f6      	bls.n	340024c6 <HAL_CACHEAXI_Enable+0x3e>
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
340024d8:	6823      	ldr	r3, [r4, #0]
340024da:	685b      	ldr	r3, [r3, #4]
340024dc:	07da      	lsls	r2, r3, #31
340024de:	d4f2      	bmi.n	340024c6 <HAL_CACHEAXI_Enable+0x3e>
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
340024e0:	2310      	movs	r3, #16
340024e2:	60a3      	str	r3, [r4, #8]
    return HAL_ERROR;
340024e4:	2001      	movs	r0, #1
340024e6:	e7ea      	b.n	340024be <HAL_CACHEAXI_Enable+0x36>
340024e8:	580dfc00 	.word	0x580dfc00
340024ec:	3401056e 	.word	0x3401056e

340024f0 <HAL_CACHEAXI_Init>:
{
340024f0:	b510      	push	{r4, lr}
  if (hcacheaxi == NULL)
340024f2:	4604      	mov	r4, r0
340024f4:	b1c8      	cbz	r0, 3400252a <HAL_CACHEAXI_Init+0x3a>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
340024f6:	6803      	ldr	r3, [r0, #0]
340024f8:	4a0d      	ldr	r2, [pc, #52]	@ (34002530 <HAL_CACHEAXI_Init+0x40>)
340024fa:	4293      	cmp	r3, r2
340024fc:	d007      	beq.n	3400250e <HAL_CACHEAXI_Init+0x1e>
340024fe:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34002502:	4293      	cmp	r3, r2
34002504:	d003      	beq.n	3400250e <HAL_CACHEAXI_Init+0x1e>
34002506:	21bc      	movs	r1, #188	@ 0xbc
34002508:	480a      	ldr	r0, [pc, #40]	@ (34002534 <HAL_CACHEAXI_Init+0x44>)
3400250a:	f7fe fe2f 	bl	3400116c <assert_failed>
  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
3400250e:	7923      	ldrb	r3, [r4, #4]
34002510:	b913      	cbnz	r3, 34002518 <HAL_CACHEAXI_Init+0x28>
    HAL_CACHEAXI_MspInit(hcacheaxi);
34002512:	4620      	mov	r0, r4
34002514:	f7fe fe10 	bl	34001138 <HAL_CACHEAXI_MspInit>
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34002518:	2300      	movs	r3, #0
3400251a:	60a3      	str	r3, [r4, #8]
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
3400251c:	2301      	movs	r3, #1
3400251e:	7123      	strb	r3, [r4, #4]
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34002520:	4620      	mov	r0, r4
}
34002522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34002526:	f7ff bfaf 	b.w	34002488 <HAL_CACHEAXI_Enable>
}
3400252a:	2001      	movs	r0, #1
3400252c:	bd10      	pop	{r4, pc}
3400252e:	bf00      	nop
34002530:	580dfc00 	.word	0x580dfc00
34002534:	3401056e 	.word	0x3401056e

34002538 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002538:	1ec3      	subs	r3, r0, #3
3400253a:	2b04      	cmp	r3, #4
{
3400253c:	b510      	push	{r4, lr}
3400253e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002540:	d903      	bls.n	3400254a <HAL_NVIC_SetPriorityGrouping+0x12>
34002542:	21e6      	movs	r1, #230	@ 0xe6
34002544:	4809      	ldr	r0, [pc, #36]	@ (3400256c <HAL_NVIC_SetPriorityGrouping+0x34>)
34002546:	f7fe fe11 	bl	3400116c <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400254a:	4909      	ldr	r1, [pc, #36]	@ (34002570 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
3400254c:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400254e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34002550:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34002554:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
34002558:	0412      	lsls	r2, r2, #16
3400255a:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
3400255c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
3400255e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34002562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
34002566:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
34002568:	bd10      	pop	{r4, pc}
3400256a:	bf00      	nop
3400256c:	34010616 	.word	0x34010616
34002570:	e000ed00 	.word	0xe000ed00

34002574 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34002574:	f110 0f0c 	cmn.w	r0, #12
{
34002578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400257c:	4605      	mov	r5, r0
3400257e:	460c      	mov	r4, r1
34002580:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34002582:	db01      	blt.n	34002588 <HAL_NVIC_SetPriority+0x14>
34002584:	1d03      	adds	r3, r0, #4
34002586:	d103      	bne.n	34002590 <HAL_NVIC_SetPriority+0x1c>
34002588:	21ff      	movs	r1, #255	@ 0xff
3400258a:	4826      	ldr	r0, [pc, #152]	@ (34002624 <HAL_NVIC_SetPriority+0xb0>)
3400258c:	f7fe fdee 	bl	3400116c <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34002590:	4b25      	ldr	r3, [pc, #148]	@ (34002628 <HAL_NVIC_SetPriority+0xb4>)
34002592:	68de      	ldr	r6, [r3, #12]
34002594:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
34002598:	2e02      	cmp	r6, #2
3400259a:	d806      	bhi.n	340025aa <HAL_NVIC_SetPriority+0x36>
3400259c:	b157      	cbz	r7, 340025b4 <HAL_NVIC_SetPriority+0x40>
3400259e:	f44f 7181 	mov.w	r1, #258	@ 0x102
340025a2:	4820      	ldr	r0, [pc, #128]	@ (34002624 <HAL_NVIC_SetPriority+0xb0>)
340025a4:	f7fe fde2 	bl	3400116c <assert_failed>
340025a8:	e004      	b.n	340025b4 <HAL_NVIC_SetPriority+0x40>
340025aa:	2301      	movs	r3, #1
340025ac:	1ef2      	subs	r2, r6, #3
340025ae:	4093      	lsls	r3, r2
340025b0:	42bb      	cmp	r3, r7
340025b2:	d9f4      	bls.n	3400259e <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
340025b4:	2c0f      	cmp	r4, #15
340025b6:	f1c6 0807 	rsb	r8, r6, #7
340025ba:	d804      	bhi.n	340025c6 <HAL_NVIC_SetPriority+0x52>
340025bc:	2301      	movs	r3, #1
340025be:	fa03 f308 	lsl.w	r3, r3, r8
340025c2:	42a3      	cmp	r3, r4
340025c4:	d804      	bhi.n	340025d0 <HAL_NVIC_SetPriority+0x5c>
340025c6:	f240 1103 	movw	r1, #259	@ 0x103
340025ca:	4816      	ldr	r0, [pc, #88]	@ (34002624 <HAL_NVIC_SetPriority+0xb0>)
340025cc:	f7fe fdce 	bl	3400116c <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
340025d0:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
340025d4:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
340025d8:	bf28      	it	cs
340025da:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340025de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
340025e2:	2b06      	cmp	r3, #6
340025e4:	f1a6 0603 	sub.w	r6, r6, #3
340025e8:	bf98      	it	ls
340025ea:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340025ec:	fa02 f808 	lsl.w	r8, r2, r8
340025f0:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
340025f4:	40b2      	lsls	r2, r6
340025f6:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340025fa:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
340025fc:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340025fe:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002602:	bfac      	ite	ge
34002604:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002608:	4a08      	ldrlt	r2, [pc, #32]	@ (3400262c <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400260a:	ea4f 1303 	mov.w	r3, r3, lsl #4
3400260e:	b2db      	uxtb	r3, r3
34002610:	bfab      	itete	ge
34002612:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002616:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400261a:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400261e:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
34002620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34002624:	34010616 	.word	0x34010616
34002628:	e000ed00 	.word	0xe000ed00
3400262c:	e000ed14 	.word	0xe000ed14

34002630 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34002630:	2800      	cmp	r0, #0
34002632:	db08      	blt.n	34002646 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34002634:	2301      	movs	r3, #1
34002636:	0941      	lsrs	r1, r0, #5
34002638:	4a05      	ldr	r2, [pc, #20]	@ (34002650 <HAL_NVIC_EnableIRQ+0x20>)
3400263a:	f000 001f 	and.w	r0, r0, #31
3400263e:	4083      	lsls	r3, r0
34002640:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
34002644:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34002646:	f240 1115 	movw	r1, #277	@ 0x115
3400264a:	4802      	ldr	r0, [pc, #8]	@ (34002654 <HAL_NVIC_EnableIRQ+0x24>)
3400264c:	f7fe bd8e 	b.w	3400116c <assert_failed>
34002650:	e000e100 	.word	0xe000e100
34002654:	34010616 	.word	0x34010616

34002658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34002658:	3801      	subs	r0, #1
3400265a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
3400265e:	d20b      	bcs.n	34002678 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002660:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002664:	21f0      	movs	r1, #240	@ 0xf0
34002666:	4a05      	ldr	r2, [pc, #20]	@ (3400267c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002668:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400266a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
3400266e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34002670:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34002672:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34002674:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34002676:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
34002678:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
3400267a:	4770      	bx	lr
3400267c:	e000ed00 	.word	0xe000ed00

34002680 <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @brief  Line Event callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34002680:	4770      	bx	lr

34002682 <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @brief  Limit callback on the Pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34002682:	4770      	bx	lr

34002684 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @brief  Error callback on the pipe
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34002684:	4770      	bx	lr

34002686 <HAL_DCMIPP_ErrorCallback>:
/**
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
34002686:	4770      	bx	lr

34002688 <HAL_DCMIPP_IRQHandler>:
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
34002688:	6803      	ldr	r3, [r0, #0]
{
3400268a:	b570      	push	{r4, r5, r6, lr}
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
3400268c:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	@ 0x3f8
{
34002690:	4604      	mov	r4, r0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34002692:	0472      	lsls	r2, r6, #17
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
34002694:	f8d3 53f0 	ldr.w	r5, [r3, #1008]	@ 0x3f0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34002698:	d512      	bpl.n	340026c0 <HAL_DCMIPP_IRQHandler+0x38>
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
3400269a:	0469      	lsls	r1, r5, #17
3400269c:	d510      	bpl.n	340026c0 <HAL_DCMIPP_IRQHandler+0x38>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
3400269e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
340026a2:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
340026a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
340026a8:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
340026ac:	6882      	ldr	r2, [r0, #8]
340026ae:	f042 0204 	orr.w	r2, r2, #4
340026b2:	6082      	str	r2, [r0, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
340026b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340026b8:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
340026bc:	f7ff ffe1 	bl	34002682 <HAL_DCMIPP_PIPE_LimitEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
340026c0:	0572      	lsls	r2, r6, #21
340026c2:	d50a      	bpl.n	340026da <HAL_DCMIPP_IRQHandler+0x52>
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
340026c4:	056b      	lsls	r3, r5, #21
340026c6:	d508      	bpl.n	340026da <HAL_DCMIPP_IRQHandler+0x52>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
340026c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340026cc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
340026ce:	2100      	movs	r1, #0
340026d0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
340026d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
340026d6:	f009 f9d7 	bl	3400ba88 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
340026da:	05b0      	lsls	r0, r6, #22
340026dc:	d516      	bpl.n	3400270c <HAL_DCMIPP_IRQHandler+0x84>
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
340026de:	05a9      	lsls	r1, r5, #22
340026e0:	d514      	bpl.n	3400270c <HAL_DCMIPP_IRQHandler+0x84>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340026e2:	6823      	ldr	r3, [r4, #0]
340026e4:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
340026e8:	0752      	lsls	r2, r2, #29
340026ea:	d507      	bpl.n	340026fc <HAL_DCMIPP_IRQHandler+0x74>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
340026ec:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340026f0:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
340026f4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
340026f8:	2201      	movs	r2, #1
340026fa:	7162      	strb	r2, [r4, #5]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
340026fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34002700:	2100      	movs	r1, #0
34002702:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34002704:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34002708:	f009 f9ce 	bl	3400baa8 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
3400270c:	05f3      	lsls	r3, r6, #23
3400270e:	d50a      	bpl.n	34002726 <HAL_DCMIPP_IRQHandler+0x9e>
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34002710:	05e8      	lsls	r0, r5, #23
34002712:	d508      	bpl.n	34002726 <HAL_DCMIPP_IRQHandler+0x9e>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34002714:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002718:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
3400271a:	2100      	movs	r1, #0
3400271c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
3400271e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34002722:	f7ff ffad 	bl	34002680 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
34002726:	0431      	lsls	r1, r6, #16
34002728:	d516      	bpl.n	34002758 <HAL_DCMIPP_IRQHandler+0xd0>
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
3400272a:	042a      	lsls	r2, r5, #16
3400272c:	d514      	bpl.n	34002758 <HAL_DCMIPP_IRQHandler+0xd0>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3400272e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002730:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002732:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002736:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34002738:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3400273c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
34002740:	68a2      	ldr	r2, [r4, #8]
34002742:	f042 0208 	orr.w	r2, r2, #8
34002746:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
34002748:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400274c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002750:	2304      	movs	r3, #4
34002752:	7163      	strb	r3, [r4, #5]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34002754:	f7ff ff96 	bl	34002684 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34002758:	03f3      	lsls	r3, r6, #15
3400275a:	d50a      	bpl.n	34002772 <HAL_DCMIPP_IRQHandler+0xea>
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
3400275c:	03e8      	lsls	r0, r5, #15
3400275e:	d508      	bpl.n	34002772 <HAL_DCMIPP_IRQHandler+0xea>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34002760:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34002764:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34002766:	2101      	movs	r1, #1
34002768:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
3400276a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
3400276e:	f7ff ff87 	bl	34002680 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
34002772:	0371      	lsls	r1, r6, #13
34002774:	d50a      	bpl.n	3400278c <HAL_DCMIPP_IRQHandler+0x104>
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
34002776:	036a      	lsls	r2, r5, #13
34002778:	d508      	bpl.n	3400278c <HAL_DCMIPP_IRQHandler+0x104>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
3400277a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3400277e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34002780:	2101      	movs	r1, #1
34002782:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34002784:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34002788:	f009 f97e 	bl	3400ba88 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
3400278c:	03b3      	lsls	r3, r6, #14
3400278e:	d516      	bpl.n	340027be <HAL_DCMIPP_IRQHandler+0x136>
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
34002790:	03a8      	lsls	r0, r5, #14
34002792:	d514      	bpl.n	340027be <HAL_DCMIPP_IRQHandler+0x136>
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002794:	6823      	ldr	r3, [r4, #0]
34002796:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
3400279a:	0751      	lsls	r1, r2, #29
3400279c:	d507      	bpl.n	340027ae <HAL_DCMIPP_IRQHandler+0x126>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
3400279e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340027a2:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
340027a6:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
340027aa:	2201      	movs	r2, #1
340027ac:	71a2      	strb	r2, [r4, #6]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
340027ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
340027b2:	2101      	movs	r1, #1
340027b4:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
340027b6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
340027ba:	f009 f975 	bl	3400baa8 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
340027be:	0232      	lsls	r2, r6, #8
340027c0:	d516      	bpl.n	340027f0 <HAL_DCMIPP_IRQHandler+0x168>
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
340027c2:	022b      	lsls	r3, r5, #8
340027c4:	d514      	bpl.n	340027f0 <HAL_DCMIPP_IRQHandler+0x168>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340027c6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340027c8:	2101      	movs	r1, #1
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340027ca:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340027ce:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340027d0:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
340027d4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
340027d8:	68a2      	ldr	r2, [r4, #8]
340027da:	f042 0210 	orr.w	r2, r2, #16
340027de:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
340027e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
340027e4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
340027e8:	2304      	movs	r3, #4
340027ea:	71a3      	strb	r3, [r4, #6]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340027ec:	f7ff ff4a 	bl	34002684 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
340027f0:	01f0      	lsls	r0, r6, #7
340027f2:	d50a      	bpl.n	3400280a <HAL_DCMIPP_IRQHandler+0x182>
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
340027f4:	01e9      	lsls	r1, r5, #7
340027f6:	d508      	bpl.n	3400280a <HAL_DCMIPP_IRQHandler+0x182>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
340027f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340027fc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
340027fe:	2102      	movs	r1, #2
34002800:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34002802:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34002806:	f7ff ff3b 	bl	34002680 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
3400280a:	0172      	lsls	r2, r6, #5
3400280c:	d50a      	bpl.n	34002824 <HAL_DCMIPP_IRQHandler+0x19c>
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
3400280e:	016b      	lsls	r3, r5, #5
34002810:	d508      	bpl.n	34002824 <HAL_DCMIPP_IRQHandler+0x19c>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34002812:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34002816:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34002818:	2102      	movs	r1, #2
3400281a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
3400281c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34002820:	f009 f932 	bl	3400ba88 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
34002824:	01b0      	lsls	r0, r6, #6
34002826:	d516      	bpl.n	34002856 <HAL_DCMIPP_IRQHandler+0x1ce>
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34002828:	01a9      	lsls	r1, r5, #6
3400282a:	d514      	bpl.n	34002856 <HAL_DCMIPP_IRQHandler+0x1ce>
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400282c:	6823      	ldr	r3, [r4, #0]
3400282e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
34002832:	0752      	lsls	r2, r2, #29
34002834:	d507      	bpl.n	34002846 <HAL_DCMIPP_IRQHandler+0x1be>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
34002836:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400283a:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
3400283e:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
34002842:	2201      	movs	r2, #1
34002844:	71e2      	strb	r2, [r4, #7]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34002846:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
3400284a:	2102      	movs	r1, #2
3400284c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
3400284e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34002852:	f009 f929 	bl	3400baa8 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
34002856:	2e00      	cmp	r6, #0
34002858:	da16      	bge.n	34002888 <HAL_DCMIPP_IRQHandler+0x200>
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
3400285a:	2d00      	cmp	r5, #0
3400285c:	da14      	bge.n	34002888 <HAL_DCMIPP_IRQHandler+0x200>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
3400285e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002860:	2102      	movs	r1, #2
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002862:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002866:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34002868:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
3400286c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
34002870:	68a2      	ldr	r2, [r4, #8]
34002872:	f042 0220 	orr.w	r2, r2, #32
34002876:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
34002878:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3400287c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
34002880:	2304      	movs	r3, #4
34002882:	71e3      	strb	r3, [r4, #7]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34002884:	f7ff fefe 	bl	34002684 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
34002888:	0670      	lsls	r0, r6, #25
3400288a:	d514      	bpl.n	340028b6 <HAL_DCMIPP_IRQHandler+0x22e>
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
3400288c:	0669      	lsls	r1, r5, #25
3400288e:	d512      	bpl.n	340028b6 <HAL_DCMIPP_IRQHandler+0x22e>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34002890:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002892:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34002894:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34002898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
3400289c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
340028a0:	68a2      	ldr	r2, [r4, #8]
340028a2:	f042 0202 	orr.w	r2, r2, #2
340028a6:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
340028a8:	2240      	movs	r2, #64	@ 0x40
340028aa:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340028ae:	2304      	movs	r3, #4
340028b0:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340028b2:	f7ff fee8 	bl	34002686 <HAL_DCMIPP_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
340028b6:	06b2      	lsls	r2, r6, #26
340028b8:	d514      	bpl.n	340028e4 <HAL_DCMIPP_IRQHandler+0x25c>
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
340028ba:	06ab      	lsls	r3, r5, #26
340028bc:	d512      	bpl.n	340028e4 <HAL_DCMIPP_IRQHandler+0x25c>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
340028be:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340028c0:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
340028c2:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340028c6:	f022 0220 	bic.w	r2, r2, #32
340028ca:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
340028ce:	68a2      	ldr	r2, [r4, #8]
340028d0:	f042 0201 	orr.w	r2, r2, #1
340028d4:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
340028d6:	2220      	movs	r2, #32
340028d8:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340028dc:	2304      	movs	r3, #4
340028de:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340028e0:	f7ff fed1 	bl	34002686 <HAL_DCMIPP_ErrorCallback>
}
340028e4:	bd70      	pop	{r4, r5, r6, pc}

340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @brief  Line Error callback on the Data Lane
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
340028e6:	4770      	bx	lr

340028e8 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
/**
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
340028e8:	4770      	bx	lr

340028ea <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
/**
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
340028ea:	4770      	bx	lr

340028ec <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @brief  End Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
340028ec:	4770      	bx	lr

340028ee <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @brief  Start Of Frame Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
340028ee:	4770      	bx	lr

340028f0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @brief  Timer Counter Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
340028f0:	4770      	bx	lr

340028f2 <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @brief  Line Byte Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
340028f2:	4770      	bx	lr

340028f4 <HAL_DCMIPP_CSI_IRQHandler>:
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
340028f4:	4bb5      	ldr	r3, [pc, #724]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
{
340028f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
340028fa:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
{
340028fe:	4604      	mov	r4, r0
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34002900:	02b2      	lsls	r2, r6, #10
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
34002902:	f8d3 8094 	ldr.w	r8, [r3, #148]	@ 0x94
  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
34002906:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
3400290a:	f8d3 7084 	ldr.w	r7, [r3, #132]	@ 0x84
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
3400290e:	d50d      	bpl.n	3400292c <HAL_DCMIPP_CSI_IRQHandler+0x38>
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
34002910:	02a9      	lsls	r1, r5, #10
34002912:	d50b      	bpl.n	3400292c <HAL_DCMIPP_CSI_IRQHandler+0x38>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
34002914:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002918:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
3400291c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34002920:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34002924:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34002928:	f7ff ffde 	bl	340028e8 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
3400292c:	0732      	lsls	r2, r6, #28
3400292e:	d515      	bpl.n	3400295c <HAL_DCMIPP_CSI_IRQHandler+0x68>
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34002930:	072b      	lsls	r3, r5, #28
34002932:	d513      	bpl.n	3400295c <HAL_DCMIPP_CSI_IRQHandler+0x68>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002934:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002936:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002938:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
3400293c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400293e:	f013 0f04 	tst.w	r3, #4
34002942:	4ba2      	ldr	r3, [pc, #648]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
34002944:	bf1e      	ittt	ne
34002946:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3400294a:	f022 0208 	bicne.w	r2, r2, #8
3400294e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34002952:	2208      	movs	r2, #8
34002954:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34002958:	f7ff ffcb 	bl	340028f2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
3400295c:	0770      	lsls	r0, r6, #29
3400295e:	d515      	bpl.n	3400298c <HAL_DCMIPP_CSI_IRQHandler+0x98>
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34002960:	0769      	lsls	r1, r5, #29
34002962:	d513      	bpl.n	3400298c <HAL_DCMIPP_CSI_IRQHandler+0x98>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002964:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002966:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002968:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
3400296c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400296e:	f013 0f04 	tst.w	r3, #4
34002972:	4b96      	ldr	r3, [pc, #600]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34002974:	bf1e      	ittt	ne
34002976:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3400297a:	f022 0204 	bicne.w	r2, r2, #4
3400297e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34002982:	2204      	movs	r2, #4
34002984:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34002988:	f7ff ffb3 	bl	340028f2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
3400298c:	07b2      	lsls	r2, r6, #30
3400298e:	d515      	bpl.n	340029bc <HAL_DCMIPP_CSI_IRQHandler+0xc8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
34002990:	07ab      	lsls	r3, r5, #30
34002992:	d513      	bpl.n	340029bc <HAL_DCMIPP_CSI_IRQHandler+0xc8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002994:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34002996:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002998:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
3400299c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400299e:	f013 0f04 	tst.w	r3, #4
340029a2:	4b8a      	ldr	r3, [pc, #552]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
340029a4:	bf1e      	ittt	ne
340029a6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340029aa:	f022 0202 	bicne.w	r2, r2, #2
340029ae:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
340029b2:	2202      	movs	r2, #2
340029b4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340029b8:	f7ff ff9b 	bl	340028f2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
340029bc:	07f0      	lsls	r0, r6, #31
340029be:	d515      	bpl.n	340029ec <HAL_DCMIPP_CSI_IRQHandler+0xf8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
340029c0:	07e9      	lsls	r1, r5, #31
340029c2:	d513      	bpl.n	340029ec <HAL_DCMIPP_CSI_IRQHandler+0xf8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029c4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
340029c6:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029c8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
340029cc:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029ce:	f013 0f04 	tst.w	r3, #4
340029d2:	4b7e      	ldr	r3, [pc, #504]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
340029d4:	bf1e      	ittt	ne
340029d6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340029da:	f022 0201 	bicne.w	r2, r2, #1
340029de:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
340029e2:	2201      	movs	r2, #1
340029e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
340029e8:	f7ff ff83 	bl	340028f2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
340029ec:	0432      	lsls	r2, r6, #16
340029ee:	d516      	bpl.n	34002a1e <HAL_DCMIPP_CSI_IRQHandler+0x12a>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
340029f0:	042b      	lsls	r3, r5, #16
340029f2:	d514      	bpl.n	34002a1e <HAL_DCMIPP_CSI_IRQHandler+0x12a>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029f4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340029f6:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029f8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340029fc:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340029fe:	f013 0f04 	tst.w	r3, #4
34002a02:	4b72      	ldr	r3, [pc, #456]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34002a04:	bf1e      	ittt	ne
34002a06:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002a0a:	f422 4200 	bicne.w	r2, r2, #32768	@ 0x8000
34002a0e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34002a12:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34002a16:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002a1a:	f7ff ff67 	bl	340028ec <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34002a1e:	0470      	lsls	r0, r6, #17
34002a20:	d516      	bpl.n	34002a50 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34002a22:	0469      	lsls	r1, r5, #17
34002a24:	d514      	bpl.n	34002a50 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a26:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002a28:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a2a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002a2e:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a30:	f013 0f04 	tst.w	r3, #4
34002a34:	4b65      	ldr	r3, [pc, #404]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
34002a36:	bf1e      	ittt	ne
34002a38:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002a3c:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
34002a40:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
34002a44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34002a48:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002a4c:	f7ff ff4e 	bl	340028ec <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
34002a50:	04b2      	lsls	r2, r6, #18
34002a52:	d516      	bpl.n	34002a82 <HAL_DCMIPP_CSI_IRQHandler+0x18e>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
34002a54:	04ab      	lsls	r3, r5, #18
34002a56:	d514      	bpl.n	34002a82 <HAL_DCMIPP_CSI_IRQHandler+0x18e>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a58:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002a5a:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a5c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002a60:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a62:	f013 0f04 	tst.w	r3, #4
34002a66:	4b59      	ldr	r3, [pc, #356]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34002a68:	bf1e      	ittt	ne
34002a6a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002a6e:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
34002a72:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
34002a76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34002a7a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002a7e:	f7ff ff35 	bl	340028ec <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
34002a82:	04f0      	lsls	r0, r6, #19
34002a84:	d516      	bpl.n	34002ab4 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34002a86:	04e9      	lsls	r1, r5, #19
34002a88:	d514      	bpl.n	34002ab4 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a8a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002a8c:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a8e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002a92:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002a94:	f013 0f04 	tst.w	r3, #4
34002a98:	4b4c      	ldr	r3, [pc, #304]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
34002a9a:	bf1e      	ittt	ne
34002a9c:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002aa0:	f422 5280 	bicne.w	r2, r2, #4096	@ 0x1000
34002aa4:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
34002aa8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34002aac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002ab0:	f7ff ff1c 	bl	340028ec <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34002ab4:	0532      	lsls	r2, r6, #20
34002ab6:	d516      	bpl.n	34002ae6 <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34002ab8:	052b      	lsls	r3, r5, #20
34002aba:	d514      	bpl.n	34002ae6 <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002abc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002abe:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ac0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002ac4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002ac6:	f013 0f04 	tst.w	r3, #4
34002aca:	4b40      	ldr	r3, [pc, #256]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
34002acc:	bf1e      	ittt	ne
34002ace:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002ad2:	f422 6200 	bicne.w	r2, r2, #2048	@ 0x800
34002ad6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34002ada:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34002ade:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34002ae2:	f7ff ff04 	bl	340028ee <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34002ae6:	0570      	lsls	r0, r6, #21
34002ae8:	d516      	bpl.n	34002b18 <HAL_DCMIPP_CSI_IRQHandler+0x224>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34002aea:	0569      	lsls	r1, r5, #21
34002aec:	d514      	bpl.n	34002b18 <HAL_DCMIPP_CSI_IRQHandler+0x224>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002aee:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002af0:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002af2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002af6:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002af8:	f013 0f04 	tst.w	r3, #4
34002afc:	4b33      	ldr	r3, [pc, #204]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34002afe:	bf1e      	ittt	ne
34002b00:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002b04:	f422 6280 	bicne.w	r2, r2, #1024	@ 0x400
34002b08:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34002b0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002b10:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34002b14:	f7ff feeb 	bl	340028ee <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34002b18:	05b2      	lsls	r2, r6, #22
34002b1a:	d516      	bpl.n	34002b4a <HAL_DCMIPP_CSI_IRQHandler+0x256>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34002b1c:	05ab      	lsls	r3, r5, #22
34002b1e:	d514      	bpl.n	34002b4a <HAL_DCMIPP_CSI_IRQHandler+0x256>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b20:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002b22:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b24:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002b28:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b2a:	f013 0f04 	tst.w	r3, #4
34002b2e:	4b27      	ldr	r3, [pc, #156]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34002b30:	bf1e      	ittt	ne
34002b32:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002b36:	f422 7200 	bicne.w	r2, r2, #512	@ 0x200
34002b3a:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34002b3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
34002b42:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34002b46:	f7ff fed2 	bl	340028ee <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34002b4a:	05f0      	lsls	r0, r6, #23
34002b4c:	d516      	bpl.n	34002b7c <HAL_DCMIPP_CSI_IRQHandler+0x288>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34002b4e:	05e9      	lsls	r1, r5, #23
34002b50:	d514      	bpl.n	34002b7c <HAL_DCMIPP_CSI_IRQHandler+0x288>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b52:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002b54:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b56:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002b5a:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b5c:	f013 0f04 	tst.w	r3, #4
34002b60:	4b1a      	ldr	r3, [pc, #104]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34002b62:	bf1e      	ittt	ne
34002b64:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002b68:	f422 7280 	bicne.w	r2, r2, #256	@ 0x100
34002b6c:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34002b70:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002b74:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34002b78:	f7ff feb9 	bl	340028ee <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
34002b7c:	0632      	lsls	r2, r6, #24
34002b7e:	d515      	bpl.n	34002bac <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34002b80:	062b      	lsls	r3, r5, #24
34002b82:	d513      	bpl.n	34002bac <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b84:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002b86:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b88:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002b8c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002b8e:	f013 0f04 	tst.w	r3, #4
34002b92:	4b0e      	ldr	r3, [pc, #56]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34002b94:	bf1e      	ittt	ne
34002b96:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002b9a:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
34002b9e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34002ba2:	2280      	movs	r2, #128	@ 0x80
34002ba4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34002ba8:	f7ff fea2 	bl	340028f0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
34002bac:	0670      	lsls	r0, r6, #25
34002bae:	d519      	bpl.n	34002be4 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34002bb0:	0669      	lsls	r1, r5, #25
34002bb2:	d517      	bpl.n	34002be4 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bb4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002bb6:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bb8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002bbc:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bbe:	f013 0f04 	tst.w	r3, #4
34002bc2:	4b02      	ldr	r3, [pc, #8]	@ (34002bcc <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34002bc4:	bf18      	it	ne
34002bc6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002bca:	e001      	b.n	34002bd0 <HAL_DCMIPP_CSI_IRQHandler+0x2dc>
34002bcc:	58006000 	.word	0x58006000
34002bd0:	bf1c      	itt	ne
34002bd2:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
34002bd6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34002bda:	2240      	movs	r2, #64	@ 0x40
34002bdc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34002be0:	f7ff fe86 	bl	340028f0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34002be4:	06b2      	lsls	r2, r6, #26
34002be6:	d515      	bpl.n	34002c14 <HAL_DCMIPP_CSI_IRQHandler+0x320>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34002be8:	06ab      	lsls	r3, r5, #26
34002bea:	d513      	bpl.n	34002c14 <HAL_DCMIPP_CSI_IRQHandler+0x320>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bec:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002bee:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bf0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002bf4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002bf6:	f013 0f04 	tst.w	r3, #4
34002bfa:	4bb9      	ldr	r3, [pc, #740]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34002bfc:	bf1e      	ittt	ne
34002bfe:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c02:	f022 0220 	bicne.w	r2, r2, #32
34002c06:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34002c0a:	2220      	movs	r2, #32
34002c0c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34002c10:	f7ff fe6e 	bl	340028f0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34002c14:	06f0      	lsls	r0, r6, #27
34002c16:	d515      	bpl.n	34002c44 <HAL_DCMIPP_CSI_IRQHandler+0x350>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34002c18:	06e9      	lsls	r1, r5, #27
34002c1a:	d513      	bpl.n	34002c44 <HAL_DCMIPP_CSI_IRQHandler+0x350>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c1c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002c1e:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c20:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002c24:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34002c26:	f013 0f04 	tst.w	r3, #4
34002c2a:	4bad      	ldr	r3, [pc, #692]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34002c2c:	bf1e      	ittt	ne
34002c2e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34002c32:	f022 0210 	bicne.w	r2, r2, #16
34002c36:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34002c3a:	2210      	movs	r2, #16
34002c3c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34002c40:	f7ff fe56 	bl	340028f0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34002c44:	0072      	lsls	r2, r6, #1
34002c46:	d513      	bpl.n	34002c70 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34002c48:	006b      	lsls	r3, r5, #1
34002c4a:	d511      	bpl.n	34002c70 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34002c4c:	4ba4      	ldr	r3, [pc, #656]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002c4e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34002c50:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002c54:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34002c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34002c5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002c60:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34002c64:	68a3      	ldr	r3, [r4, #8]
34002c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34002c6a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002c6c:	f7ff fd0b 	bl	34002686 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34002c70:	00b0      	lsls	r0, r6, #2
34002c72:	d513      	bpl.n	34002c9c <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34002c74:	00a9      	lsls	r1, r5, #2
34002c76:	d511      	bpl.n	34002c9c <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34002c78:	4b99      	ldr	r3, [pc, #612]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002c7a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34002c7c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002c80:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
34002c84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34002c88:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34002c8c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34002c90:	68a3      	ldr	r3, [r4, #8]
34002c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34002c96:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002c98:	f7ff fcf5 	bl	34002686 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34002c9c:	00f2      	lsls	r2, r6, #3
34002c9e:	d513      	bpl.n	34002cc8 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34002ca0:	00eb      	lsls	r3, r5, #3
34002ca2:	d511      	bpl.n	34002cc8 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34002ca4:	4b8e      	ldr	r3, [pc, #568]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002ca6:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34002ca8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002cac:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
34002cb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34002cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002cb8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34002cbc:	68a3      	ldr	r3, [r4, #8]
34002cbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
34002cc2:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002cc4:	f7ff fcdf 	bl	34002686 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34002cc8:	0130      	lsls	r0, r6, #4
34002cca:	d513      	bpl.n	34002cf4 <HAL_DCMIPP_CSI_IRQHandler+0x400>
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34002ccc:	0129      	lsls	r1, r5, #4
34002cce:	d511      	bpl.n	34002cf4 <HAL_DCMIPP_CSI_IRQHandler+0x400>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34002cd0:	4b83      	ldr	r3, [pc, #524]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002cd2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34002cd4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002cd8:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
34002cdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34002ce0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34002ce4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34002ce8:	68a3      	ldr	r3, [r4, #8]
34002cea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
34002cee:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002cf0:	f7ff fcc9 	bl	34002686 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34002cf4:	0172      	lsls	r2, r6, #5
34002cf6:	d513      	bpl.n	34002d20 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34002cf8:	016b      	lsls	r3, r5, #5
34002cfa:	d511      	bpl.n	34002d20 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34002cfc:	4b78      	ldr	r3, [pc, #480]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002cfe:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34002d00:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d04:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
34002d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34002d0c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34002d10:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34002d14:	68a3      	ldr	r3, [r4, #8]
34002d16:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34002d1a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d1c:	f7ff fcb3 	bl	34002686 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34002d20:	01b0      	lsls	r0, r6, #6
34002d22:	d513      	bpl.n	34002d4c <HAL_DCMIPP_CSI_IRQHandler+0x458>
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34002d24:	01a9      	lsls	r1, r5, #6
34002d26:	d511      	bpl.n	34002d4c <HAL_DCMIPP_CSI_IRQHandler+0x458>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34002d28:	4b6d      	ldr	r3, [pc, #436]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d2a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34002d2c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d30:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
34002d34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34002d38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34002d3c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34002d40:	68a3      	ldr	r3, [r4, #8]
34002d42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34002d46:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d48:	f7ff fc9d 	bl	34002686 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34002d4c:	01f2      	lsls	r2, r6, #7
34002d4e:	d513      	bpl.n	34002d78 <HAL_DCMIPP_CSI_IRQHandler+0x484>
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34002d50:	01eb      	lsls	r3, r5, #7
34002d52:	d511      	bpl.n	34002d78 <HAL_DCMIPP_CSI_IRQHandler+0x484>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34002d54:	4b62      	ldr	r3, [pc, #392]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d56:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34002d58:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d5c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
34002d60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34002d64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002d68:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34002d6c:	68a3      	ldr	r3, [r4, #8]
34002d6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
34002d72:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34002d74:	f7ff fc87 	bl	34002686 <HAL_DCMIPP_ErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34002d78:	f018 0f01 	tst.w	r8, #1
34002d7c:	d014      	beq.n	34002da8 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34002d7e:	07f8      	lsls	r0, r7, #31
34002d80:	d512      	bpl.n	34002da8 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34002d82:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34002d84:	4b56      	ldr	r3, [pc, #344]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002d86:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34002d88:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002d8c:	f022 0201 	bic.w	r2, r2, #1
34002d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34002d94:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34002d98:	68a3      	ldr	r3, [r4, #8]
34002d9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34002d9e:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002da0:	2304      	movs	r3, #4
34002da2:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002da4:	f7ff fd9f 	bl	340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34002da8:	f018 0f02 	tst.w	r8, #2
34002dac:	d015      	beq.n	34002dda <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34002dae:	07b9      	lsls	r1, r7, #30
34002db0:	d513      	bpl.n	34002dda <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002db2:	4b4b      	ldr	r3, [pc, #300]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002db4:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002db6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002dba:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34002dbc:	f022 0202 	bic.w	r2, r2, #2
34002dc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34002dc4:	2202      	movs	r2, #2
34002dc6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34002dca:	68a3      	ldr	r3, [r4, #8]
34002dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34002dd0:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002dd2:	2304      	movs	r3, #4
34002dd4:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002dd6:	f7ff fd86 	bl	340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34002dda:	f018 0f04 	tst.w	r8, #4
34002dde:	d013      	beq.n	34002e08 <HAL_DCMIPP_CSI_IRQHandler+0x514>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34002de0:	077a      	lsls	r2, r7, #29
34002de2:	d511      	bpl.n	34002e08 <HAL_DCMIPP_CSI_IRQHandler+0x514>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002de4:	4b3e      	ldr	r3, [pc, #248]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002de6:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002de8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002dec:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34002dee:	f022 0204 	bic.w	r2, r2, #4
34002df2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34002df6:	2204      	movs	r2, #4
34002df8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34002dfc:	68a3      	ldr	r3, [r4, #8]
34002dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34002e02:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e04:	f7ff fd6f 	bl	340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34002e08:	f018 0f08 	tst.w	r8, #8
34002e0c:	d013      	beq.n	34002e36 <HAL_DCMIPP_CSI_IRQHandler+0x542>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34002e0e:	073b      	lsls	r3, r7, #28
34002e10:	d511      	bpl.n	34002e36 <HAL_DCMIPP_CSI_IRQHandler+0x542>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002e12:	4b33      	ldr	r3, [pc, #204]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e14:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002e16:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e1a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34002e1c:	f022 0208 	bic.w	r2, r2, #8
34002e20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34002e24:	2208      	movs	r2, #8
34002e26:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34002e2a:	68a3      	ldr	r3, [r4, #8]
34002e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34002e30:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e32:	f7ff fd58 	bl	340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34002e36:	f018 0f10 	tst.w	r8, #16
34002e3a:	d013      	beq.n	34002e64 <HAL_DCMIPP_CSI_IRQHandler+0x570>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34002e3c:	06f8      	lsls	r0, r7, #27
34002e3e:	d511      	bpl.n	34002e64 <HAL_DCMIPP_CSI_IRQHandler+0x570>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002e40:	4b27      	ldr	r3, [pc, #156]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e42:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002e44:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e48:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34002e4a:	f022 0210 	bic.w	r2, r2, #16
34002e4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
34002e52:	2210      	movs	r2, #16
34002e54:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34002e58:	68a3      	ldr	r3, [r4, #8]
34002e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34002e5e:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34002e60:	f7ff fd41 	bl	340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
34002e64:	f418 7f80 	tst.w	r8, #256	@ 0x100
34002e68:	d016      	beq.n	34002e98 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34002e6a:	05f9      	lsls	r1, r7, #23
34002e6c:	d514      	bpl.n	34002e98 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002e6e:	4b1c      	ldr	r3, [pc, #112]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002e70:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002e72:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002e76:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34002e78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34002e80:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002e84:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34002e88:	68a3      	ldr	r3, [r4, #8]
34002e8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34002e8e:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002e90:	2304      	movs	r3, #4
34002e92:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002e94:	f7ff fd27 	bl	340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34002e98:	f418 7f00 	tst.w	r8, #512	@ 0x200
34002e9c:	d016      	beq.n	34002ecc <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34002e9e:	05ba      	lsls	r2, r7, #22
34002ea0:	d514      	bpl.n	34002ecc <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002ea2:	4b0f      	ldr	r3, [pc, #60]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002ea4:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002ea6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002eaa:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34002eac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34002eb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34002eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
34002eb8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34002ebc:	68a3      	ldr	r3, [r4, #8]
34002ebe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34002ec2:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34002ec4:	2304      	movs	r3, #4
34002ec6:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002ec8:	f7ff fd0d 	bl	340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34002ecc:	f418 6f80 	tst.w	r8, #1024	@ 0x400
34002ed0:	d017      	beq.n	34002f02 <HAL_DCMIPP_CSI_IRQHandler+0x60e>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34002ed2:	057b      	lsls	r3, r7, #21
34002ed4:	d515      	bpl.n	34002f02 <HAL_DCMIPP_CSI_IRQHandler+0x60e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002ed6:	4b02      	ldr	r3, [pc, #8]	@ (34002ee0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002ed8:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002eda:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002ede:	e001      	b.n	34002ee4 <HAL_DCMIPP_CSI_IRQHandler+0x5f0>
34002ee0:	58006000 	.word	0x58006000
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002ee4:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34002ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34002eea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34002eee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34002ef2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34002ef6:	68a3      	ldr	r3, [r4, #8]
34002ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34002efc:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002efe:	f7ff fcf2 	bl	340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34002f02:	f418 6f00 	tst.w	r8, #2048	@ 0x800
34002f06:	d014      	beq.n	34002f32 <HAL_DCMIPP_CSI_IRQHandler+0x63e>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34002f08:	0538      	lsls	r0, r7, #20
34002f0a:	d512      	bpl.n	34002f32 <HAL_DCMIPP_CSI_IRQHandler+0x63e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34002f0c:	4b1f      	ldr	r3, [pc, #124]	@ (34002f8c <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f0e:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34002f10:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f14:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34002f16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34002f1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34002f1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34002f22:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34002f26:	68a3      	ldr	r3, [r4, #8]
34002f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34002f2c:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f2e:	f7ff fcda 	bl	340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34002f32:	f418 5f80 	tst.w	r8, #4096	@ 0x1000
34002f36:	d014      	beq.n	34002f62 <HAL_DCMIPP_CSI_IRQHandler+0x66e>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34002f38:	04f9      	lsls	r1, r7, #19
34002f3a:	d512      	bpl.n	34002f62 <HAL_DCMIPP_CSI_IRQHandler+0x66e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34002f3c:	4b13      	ldr	r3, [pc, #76]	@ (34002f8c <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f3e:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34002f40:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f44:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34002f46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34002f4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34002f4e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34002f52:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34002f56:	68a3      	ldr	r3, [r4, #8]
34002f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34002f5c:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34002f5e:	f7ff fcc2 	bl	340028e6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
34002f62:	03f2      	lsls	r2, r6, #15
34002f64:	d50f      	bpl.n	34002f86 <HAL_DCMIPP_CSI_IRQHandler+0x692>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
34002f66:	03eb      	lsls	r3, r5, #15
34002f68:	d50d      	bpl.n	34002f86 <HAL_DCMIPP_CSI_IRQHandler+0x692>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34002f6a:	4b08      	ldr	r3, [pc, #32]	@ (34002f8c <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34002f6c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34002f6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34002f72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34002f76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
34002f7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34002f7e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34002f82:	f7ff fcb2 	bl	340028ea <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
}
34002f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34002f8a:	bf00      	nop
34002f8c:	58006000 	.word	0x58006000

34002f90 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
34002f90:	4770      	bx	lr

34002f92 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
34002f92:	4770      	bx	lr

34002f94 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
34002f94:	6803      	ldr	r3, [r0, #0]
{
34002f96:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
34002f98:	685e      	ldr	r6, [r3, #4]
{
34002f9a:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
34002f9c:	07f2      	lsls	r2, r6, #31
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
34002f9e:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
34002fa0:	d514      	bpl.n	34002fcc <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
34002fa2:	05e9      	lsls	r1, r5, #23
34002fa4:	d512      	bpl.n	34002fcc <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
34002fa6:	681a      	ldr	r2, [r3, #0]
34002fa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34002fac:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
34002fae:	6e42      	ldr	r2, [r0, #100]	@ 0x64
34002fb0:	f042 0201 	orr.w	r2, r2, #1
34002fb4:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
34002fb6:	2201      	movs	r2, #1
34002fb8:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34002fba:	2304      	movs	r3, #4
34002fbc:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34002fc0:	2300      	movs	r3, #0
34002fc2:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
34002fc6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
34002fc8:	b103      	cbz	r3, 34002fcc <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
34002fca:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
34002fcc:	06b2      	lsls	r2, r6, #26
34002fce:	d516      	bpl.n	34002ffe <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
34002fd0:	04ab      	lsls	r3, r5, #18
34002fd2:	d514      	bpl.n	34002ffe <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
34002fd4:	6823      	ldr	r3, [r4, #0]
34002fd6:	681a      	ldr	r2, [r3, #0]
34002fd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
34002fdc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
34002fde:	2220      	movs	r2, #32
34002fe0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
34002fe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34002fe4:	f043 0302 	orr.w	r3, r3, #2
34002fe8:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34002fea:	2304      	movs	r3, #4
34002fec:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34002ff0:	2300      	movs	r3, #0
34002ff2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
34002ff6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34002ff8:	b10b      	cbz	r3, 34002ffe <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
34002ffa:	4620      	mov	r0, r4
34002ffc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
34002ffe:	0730      	lsls	r0, r6, #28
34003000:	d516      	bpl.n	34003030 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
34003002:	0529      	lsls	r1, r5, #20
34003004:	d514      	bpl.n	34003030 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
34003006:	6823      	ldr	r3, [r4, #0]
34003008:	681a      	ldr	r2, [r3, #0]
3400300a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
3400300e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
34003010:	2208      	movs	r2, #8
34003012:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
34003014:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34003016:	f043 0304 	orr.w	r3, r3, #4
3400301a:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
3400301c:	2304      	movs	r3, #4
3400301e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
34003022:	2300      	movs	r3, #0
34003024:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
34003028:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400302a:	b10b      	cbz	r3, 34003030 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
3400302c:	4620      	mov	r0, r4
3400302e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
34003030:	0772      	lsls	r2, r6, #29
34003032:	d50b      	bpl.n	3400304c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
34003034:	056b      	lsls	r3, r5, #21
34003036:	d509      	bpl.n	3400304c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34003038:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
3400303a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
3400303c:	681a      	ldr	r2, [r3, #0]
3400303e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34003042:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
34003044:	2204      	movs	r2, #4
34003046:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
34003048:	f7ff ffa2 	bl	34002f90 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
3400304c:	07b0      	lsls	r0, r6, #30
3400304e:	d514      	bpl.n	3400307a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
34003050:	05a9      	lsls	r1, r5, #22
34003052:	d512      	bpl.n	3400307a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
34003054:	6823      	ldr	r3, [r4, #0]
34003056:	681a      	ldr	r2, [r3, #0]
34003058:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
3400305c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
3400305e:	2202      	movs	r2, #2
34003060:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34003062:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34003064:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
34003066:	2301      	movs	r3, #1
34003068:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
3400306c:	2300      	movs	r3, #0
3400306e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
34003072:	6a23      	ldr	r3, [r4, #32]
34003074:	b10b      	cbz	r3, 3400307a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
34003076:	4620      	mov	r0, r4
34003078:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
3400307a:	06f2      	lsls	r2, r6, #27
3400307c:	d513      	bpl.n	340030a6 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
3400307e:	04eb      	lsls	r3, r5, #19
34003080:	d511      	bpl.n	340030a6 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34003082:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34003084:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34003086:	681a      	ldr	r2, [r3, #0]
34003088:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
3400308c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
3400308e:	2210      	movs	r2, #16
34003090:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34003092:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34003094:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
34003096:	2301      	movs	r3, #1
34003098:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
3400309c:	2300      	movs	r3, #0
3400309e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
340030a2:	f7ff ff76 	bl	34002f92 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
340030a6:	bd70      	pop	{r4, r5, r6, pc}

340030a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
340030a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340030ac:	4b48      	ldr	r3, [pc, #288]	@ (340031d0 <HAL_GPIO_Init+0x128>)
{
340030ae:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340030b0:	4298      	cmp	r0, r3
{
340030b2:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340030b4:	d054      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030b6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340030ba:	4298      	cmp	r0, r3
340030bc:	d050      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030be:	4b45      	ldr	r3, [pc, #276]	@ (340031d4 <HAL_GPIO_Init+0x12c>)
340030c0:	4298      	cmp	r0, r3
340030c2:	d04d      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030c4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340030c8:	4298      	cmp	r0, r3
340030ca:	d049      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030cc:	4b42      	ldr	r3, [pc, #264]	@ (340031d8 <HAL_GPIO_Init+0x130>)
340030ce:	4298      	cmp	r0, r3
340030d0:	d046      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030d2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340030d6:	4298      	cmp	r0, r3
340030d8:	d042      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030da:	4b40      	ldr	r3, [pc, #256]	@ (340031dc <HAL_GPIO_Init+0x134>)
340030dc:	4298      	cmp	r0, r3
340030de:	d03f      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030e0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340030e4:	4298      	cmp	r0, r3
340030e6:	d03b      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030e8:	4b3d      	ldr	r3, [pc, #244]	@ (340031e0 <HAL_GPIO_Init+0x138>)
340030ea:	4298      	cmp	r0, r3
340030ec:	d038      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030ee:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340030f2:	4298      	cmp	r0, r3
340030f4:	d034      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030f6:	4b3b      	ldr	r3, [pc, #236]	@ (340031e4 <HAL_GPIO_Init+0x13c>)
340030f8:	4298      	cmp	r0, r3
340030fa:	d031      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
340030fc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003100:	4298      	cmp	r0, r3
34003102:	d02d      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
34003104:	4b38      	ldr	r3, [pc, #224]	@ (340031e8 <HAL_GPIO_Init+0x140>)
34003106:	4298      	cmp	r0, r3
34003108:	d02a      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
3400310a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400310e:	4298      	cmp	r0, r3
34003110:	d026      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
34003112:	4b36      	ldr	r3, [pc, #216]	@ (340031ec <HAL_GPIO_Init+0x144>)
34003114:	4298      	cmp	r0, r3
34003116:	d023      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
34003118:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400311c:	4298      	cmp	r0, r3
3400311e:	d01f      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
34003120:	4b33      	ldr	r3, [pc, #204]	@ (340031f0 <HAL_GPIO_Init+0x148>)
34003122:	4298      	cmp	r0, r3
34003124:	d01c      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
34003126:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400312a:	4298      	cmp	r0, r3
3400312c:	d018      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
3400312e:	4b31      	ldr	r3, [pc, #196]	@ (340031f4 <HAL_GPIO_Init+0x14c>)
34003130:	4298      	cmp	r0, r3
34003132:	d015      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
34003134:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003138:	4298      	cmp	r0, r3
3400313a:	d011      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
3400313c:	4b2e      	ldr	r3, [pc, #184]	@ (340031f8 <HAL_GPIO_Init+0x150>)
3400313e:	4298      	cmp	r0, r3
34003140:	d00e      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
34003142:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003146:	4298      	cmp	r0, r3
34003148:	d00a      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
3400314a:	4b2c      	ldr	r3, [pc, #176]	@ (340031fc <HAL_GPIO_Init+0x154>)
3400314c:	4298      	cmp	r0, r3
3400314e:	d007      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
34003150:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003154:	4298      	cmp	r0, r3
34003156:	d003      	beq.n	34003160 <HAL_GPIO_Init+0xb8>
34003158:	21ad      	movs	r1, #173	@ 0xad
3400315a:	4829      	ldr	r0, [pc, #164]	@ (34003200 <HAL_GPIO_Init+0x158>)
3400315c:	f7fe f806 	bl	3400116c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34003160:	6833      	ldr	r3, [r6, #0]
34003162:	b29a      	uxth	r2, r3
34003164:	b112      	cbz	r2, 3400316c <HAL_GPIO_Init+0xc4>
34003166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400316a:	d303      	bcc.n	34003174 <HAL_GPIO_Init+0xcc>
3400316c:	21ae      	movs	r1, #174	@ 0xae
3400316e:	4824      	ldr	r0, [pc, #144]	@ (34003200 <HAL_GPIO_Init+0x158>)
34003170:	f7fd fffc 	bl	3400116c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
34003174:	6873      	ldr	r3, [r6, #4]
34003176:	2b01      	cmp	r3, #1
34003178:	d914      	bls.n	340031a4 <HAL_GPIO_Init+0xfc>
3400317a:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
3400317e:	d011      	beq.n	340031a4 <HAL_GPIO_Init+0xfc>
34003180:	d81d      	bhi.n	340031be <HAL_GPIO_Init+0x116>
34003182:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34003186:	d00d      	beq.n	340031a4 <HAL_GPIO_Init+0xfc>
34003188:	d809      	bhi.n	3400319e <HAL_GPIO_Init+0xf6>
3400318a:	2b03      	cmp	r3, #3
3400318c:	d90a      	bls.n	340031a4 <HAL_GPIO_Init+0xfc>
3400318e:	3b11      	subs	r3, #17
34003190:	2b01      	cmp	r3, #1
34003192:	d907      	bls.n	340031a4 <HAL_GPIO_Init+0xfc>
34003194:	21af      	movs	r1, #175	@ 0xaf
34003196:	481a      	ldr	r0, [pc, #104]	@ (34003200 <HAL_GPIO_Init+0x158>)
34003198:	f7fd ffe8 	bl	3400116c <assert_failed>
3400319c:	e002      	b.n	340031a4 <HAL_GPIO_Init+0xfc>
3400319e:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
340031a2:	d1f7      	bne.n	34003194 <HAL_GPIO_Init+0xec>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340031a4:	f04f 0900 	mov.w	r9, #0
340031a8:	464f      	mov	r7, r9
340031aa:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 340031d0 <HAL_GPIO_Init+0x128>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
340031ae:	f8df a054 	ldr.w	sl, [pc, #84]	@ 34003204 <HAL_GPIO_Init+0x15c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
340031b2:	6835      	ldr	r5, [r6, #0]
340031b4:	fa35 f307 	lsrs.w	r3, r5, r7
340031b8:	d126      	bne.n	34003208 <HAL_GPIO_Init+0x160>
      }
    }

    position++;
  }
}
340031ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
340031be:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
340031c2:	d0ef      	beq.n	340031a4 <HAL_GPIO_Init+0xfc>
340031c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
340031c8:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
340031cc:	e7e9      	b.n	340031a2 <HAL_GPIO_Init+0xfa>
340031ce:	bf00      	nop
340031d0:	56020000 	.word	0x56020000
340031d4:	56020400 	.word	0x56020400
340031d8:	56020800 	.word	0x56020800
340031dc:	56020c00 	.word	0x56020c00
340031e0:	56021000 	.word	0x56021000
340031e4:	56021400 	.word	0x56021400
340031e8:	56021800 	.word	0x56021800
340031ec:	56021c00 	.word	0x56021c00
340031f0:	56023400 	.word	0x56023400
340031f4:	56023800 	.word	0x56023800
340031f8:	56023c00 	.word	0x56023c00
340031fc:	56024000 	.word	0x56024000
34003200:	340106bc 	.word	0x340106bc
34003204:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34003208:	f04f 0b01 	mov.w	fp, #1
3400320c:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
34003210:	ea1b 0505 	ands.w	r5, fp, r5
34003214:	f000 8130 	beq.w	34003478 <HAL_GPIO_Init+0x3d0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34003218:	6873      	ldr	r3, [r6, #4]
3400321a:	f003 0303 	and.w	r3, r3, #3
3400321e:	3b01      	subs	r3, #1
34003220:	2b01      	cmp	r3, #1
34003222:	d81a      	bhi.n	3400325a <HAL_GPIO_Init+0x1b2>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34003224:	68f3      	ldr	r3, [r6, #12]
34003226:	2b03      	cmp	r3, #3
34003228:	d903      	bls.n	34003232 <HAL_GPIO_Init+0x18a>
3400322a:	21be      	movs	r1, #190	@ 0xbe
3400322c:	489e      	ldr	r0, [pc, #632]	@ (340034a8 <HAL_GPIO_Init+0x400>)
3400322e:	f7fd ff9d 	bl	3400116c <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34003232:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
34003234:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34003236:	fa03 f309 	lsl.w	r3, r3, r9
3400323a:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3400323e:	68f3      	ldr	r3, [r6, #12]
34003240:	fa03 f309 	lsl.w	r3, r3, r9
34003244:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
34003246:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34003248:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
3400324a:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
3400324c:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34003250:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34003254:	40bb      	lsls	r3, r7
34003256:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
34003258:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
3400325a:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
3400325e:	f003 0303 	and.w	r3, r3, #3
34003262:	2b03      	cmp	r3, #3
34003264:	d102      	bne.n	3400326c <HAL_GPIO_Init+0x1c4>
34003266:	2a01      	cmp	r2, #1
34003268:	f000 8082 	beq.w	34003370 <HAL_GPIO_Init+0x2c8>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
3400326c:	2a02      	cmp	r2, #2
3400326e:	d903      	bls.n	34003278 <HAL_GPIO_Init+0x1d0>
34003270:	21d1      	movs	r1, #209	@ 0xd1
34003272:	488d      	ldr	r0, [pc, #564]	@ (340034a8 <HAL_GPIO_Init+0x400>)
34003274:	f7fd ff7a 	bl	3400116c <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34003278:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
3400327a:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
3400327c:	fa03 f309 	lsl.w	r3, r3, r9
34003280:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34003284:	68b3      	ldr	r3, [r6, #8]
34003286:	fa03 f309 	lsl.w	r3, r3, r9
3400328a:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
3400328c:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
3400328e:	6873      	ldr	r3, [r6, #4]
34003290:	f003 0303 	and.w	r3, r3, #3
34003294:	2b02      	cmp	r3, #2
34003296:	d16b      	bne.n	34003370 <HAL_GPIO_Init+0x2c8>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34003298:	4544      	cmp	r4, r8
3400329a:	d053      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
3400329c:	4b83      	ldr	r3, [pc, #524]	@ (340034ac <HAL_GPIO_Init+0x404>)
3400329e:	429c      	cmp	r4, r3
340032a0:	d050      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032a2:	4b83      	ldr	r3, [pc, #524]	@ (340034b0 <HAL_GPIO_Init+0x408>)
340032a4:	429c      	cmp	r4, r3
340032a6:	d04d      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032a8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340032ac:	429c      	cmp	r4, r3
340032ae:	d049      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032b0:	4b80      	ldr	r3, [pc, #512]	@ (340034b4 <HAL_GPIO_Init+0x40c>)
340032b2:	429c      	cmp	r4, r3
340032b4:	d046      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032b6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340032ba:	429c      	cmp	r4, r3
340032bc:	d042      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032be:	4b7e      	ldr	r3, [pc, #504]	@ (340034b8 <HAL_GPIO_Init+0x410>)
340032c0:	429c      	cmp	r4, r3
340032c2:	d03f      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032c4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340032c8:	429c      	cmp	r4, r3
340032ca:	d03b      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032cc:	4b7b      	ldr	r3, [pc, #492]	@ (340034bc <HAL_GPIO_Init+0x414>)
340032ce:	429c      	cmp	r4, r3
340032d0:	d038      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032d2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340032d6:	429c      	cmp	r4, r3
340032d8:	d034      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032da:	4b79      	ldr	r3, [pc, #484]	@ (340034c0 <HAL_GPIO_Init+0x418>)
340032dc:	429c      	cmp	r4, r3
340032de:	d031      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032e0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340032e4:	429c      	cmp	r4, r3
340032e6:	d02d      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032e8:	4b76      	ldr	r3, [pc, #472]	@ (340034c4 <HAL_GPIO_Init+0x41c>)
340032ea:	429c      	cmp	r4, r3
340032ec:	d02a      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032ee:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340032f2:	429c      	cmp	r4, r3
340032f4:	d026      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032f6:	4b74      	ldr	r3, [pc, #464]	@ (340034c8 <HAL_GPIO_Init+0x420>)
340032f8:	429c      	cmp	r4, r3
340032fa:	d023      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
340032fc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003300:	429c      	cmp	r4, r3
34003302:	d01f      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
34003304:	4b71      	ldr	r3, [pc, #452]	@ (340034cc <HAL_GPIO_Init+0x424>)
34003306:	429c      	cmp	r4, r3
34003308:	d01c      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
3400330a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400330e:	429c      	cmp	r4, r3
34003310:	d018      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
34003312:	4b6f      	ldr	r3, [pc, #444]	@ (340034d0 <HAL_GPIO_Init+0x428>)
34003314:	429c      	cmp	r4, r3
34003316:	d015      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
34003318:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400331c:	429c      	cmp	r4, r3
3400331e:	d011      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
34003320:	4b6c      	ldr	r3, [pc, #432]	@ (340034d4 <HAL_GPIO_Init+0x42c>)
34003322:	429c      	cmp	r4, r3
34003324:	d00e      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
34003326:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400332a:	429c      	cmp	r4, r3
3400332c:	d00a      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
3400332e:	4b6a      	ldr	r3, [pc, #424]	@ (340034d8 <HAL_GPIO_Init+0x430>)
34003330:	429c      	cmp	r4, r3
34003332:	d007      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
34003334:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34003338:	429c      	cmp	r4, r3
3400333a:	d003      	beq.n	34003344 <HAL_GPIO_Init+0x29c>
3400333c:	21de      	movs	r1, #222	@ 0xde
3400333e:	485a      	ldr	r0, [pc, #360]	@ (340034a8 <HAL_GPIO_Init+0x400>)
34003340:	f7fd ff14 	bl	3400116c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34003344:	6933      	ldr	r3, [r6, #16]
34003346:	2b0f      	cmp	r3, #15
34003348:	d903      	bls.n	34003352 <HAL_GPIO_Init+0x2aa>
3400334a:	21df      	movs	r1, #223	@ 0xdf
3400334c:	4856      	ldr	r0, [pc, #344]	@ (340034a8 <HAL_GPIO_Init+0x400>)
3400334e:	f7fd ff0d 	bl	3400116c <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34003352:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
34003354:	08fa      	lsrs	r2, r7, #3
34003356:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3400335a:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
3400335e:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34003360:	0089      	lsls	r1, r1, #2
34003362:	408b      	lsls	r3, r1
34003364:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34003368:	6933      	ldr	r3, [r6, #16]
3400336a:	408b      	lsls	r3, r1
3400336c:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
3400336e:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34003370:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
34003372:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34003374:	fa03 f209 	lsl.w	r2, r3, r9
34003378:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
3400337c:	6872      	ldr	r2, [r6, #4]
3400337e:	ea02 0103 	and.w	r1, r2, r3
34003382:	fa01 f109 	lsl.w	r1, r1, r9
34003386:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34003388:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
3400338c:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
3400338e:	d073      	beq.n	34003478 <HAL_GPIO_Init+0x3d0>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003390:	f04f 0e0f 	mov.w	lr, #15
34003394:	f027 0103 	bic.w	r1, r7, #3
34003398:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
3400339c:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
340033a0:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
340033a4:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340033a8:	4098      	lsls	r0, r3
340033aa:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340033ae:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340033b0:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340033b4:	d064      	beq.n	34003480 <HAL_GPIO_Init+0x3d8>
340033b6:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 340034b0 <HAL_GPIO_Init+0x408>
340033ba:	4574      	cmp	r4, lr
340033bc:	d062      	beq.n	34003484 <HAL_GPIO_Init+0x3dc>
340033be:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340033c2:	4574      	cmp	r4, lr
340033c4:	d060      	beq.n	34003488 <HAL_GPIO_Init+0x3e0>
340033c6:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340033ca:	4574      	cmp	r4, lr
340033cc:	d020      	beq.n	34003410 <HAL_GPIO_Init+0x368>
340033ce:	4b3b      	ldr	r3, [pc, #236]	@ (340034bc <HAL_GPIO_Init+0x414>)
340033d0:	429c      	cmp	r4, r3
340033d2:	d05b      	beq.n	3400348c <HAL_GPIO_Init+0x3e4>
340033d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340033d8:	429c      	cmp	r4, r3
340033da:	d059      	beq.n	34003490 <HAL_GPIO_Init+0x3e8>
340033dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340033e0:	429c      	cmp	r4, r3
340033e2:	d057      	beq.n	34003494 <HAL_GPIO_Init+0x3ec>
340033e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340033e8:	429c      	cmp	r4, r3
340033ea:	d055      	beq.n	34003498 <HAL_GPIO_Init+0x3f0>
340033ec:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
340033f0:	429c      	cmp	r4, r3
340033f2:	d053      	beq.n	3400349c <HAL_GPIO_Init+0x3f4>
340033f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340033f8:	429c      	cmp	r4, r3
340033fa:	d051      	beq.n	340034a0 <HAL_GPIO_Init+0x3f8>
340033fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003400:	429c      	cmp	r4, r3
34003402:	d04f      	beq.n	340034a4 <HAL_GPIO_Init+0x3fc>
34003404:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34003408:	429c      	cmp	r4, r3
3400340a:	bf14      	ite	ne
3400340c:	2310      	movne	r3, #16
3400340e:	230b      	moveq	r3, #11
34003410:	4083      	lsls	r3, r0
34003412:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
34003416:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
34003418:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
3400341c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
34003420:	ea23 0105 	bic.w	r1, r3, r5
34003424:	ea43 0305 	orr.w	r3, r3, r5
34003428:	bf08      	it	eq
3400342a:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
3400342c:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
34003430:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
34003434:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
34003438:	ea23 0105 	bic.w	r1, r3, r5
3400343c:	ea43 0305 	orr.w	r3, r3, r5
34003440:	bf08      	it	eq
34003442:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
34003444:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
34003448:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
3400344c:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
34003450:	ea23 0105 	bic.w	r1, r3, r5
34003454:	ea43 0305 	orr.w	r3, r3, r5
34003458:	bf08      	it	eq
3400345a:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
3400345c:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
34003460:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
34003464:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
34003468:	ea23 0105 	bic.w	r1, r3, r5
3400346c:	ea45 0503 	orr.w	r5, r5, r3
34003470:	bf08      	it	eq
34003472:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
34003474:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
34003478:	3701      	adds	r7, #1
3400347a:	f109 0902 	add.w	r9, r9, #2
3400347e:	e698      	b.n	340031b2 <HAL_GPIO_Init+0x10a>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34003480:	2300      	movs	r3, #0
34003482:	e7c5      	b.n	34003410 <HAL_GPIO_Init+0x368>
34003484:	2301      	movs	r3, #1
34003486:	e7c3      	b.n	34003410 <HAL_GPIO_Init+0x368>
34003488:	2302      	movs	r3, #2
3400348a:	e7c1      	b.n	34003410 <HAL_GPIO_Init+0x368>
3400348c:	2304      	movs	r3, #4
3400348e:	e7bf      	b.n	34003410 <HAL_GPIO_Init+0x368>
34003490:	2305      	movs	r3, #5
34003492:	e7bd      	b.n	34003410 <HAL_GPIO_Init+0x368>
34003494:	2306      	movs	r3, #6
34003496:	e7bb      	b.n	34003410 <HAL_GPIO_Init+0x368>
34003498:	2307      	movs	r3, #7
3400349a:	e7b9      	b.n	34003410 <HAL_GPIO_Init+0x368>
3400349c:	2308      	movs	r3, #8
3400349e:	e7b7      	b.n	34003410 <HAL_GPIO_Init+0x368>
340034a0:	2309      	movs	r3, #9
340034a2:	e7b5      	b.n	34003410 <HAL_GPIO_Init+0x368>
340034a4:	230a      	movs	r3, #10
340034a6:	e7b3      	b.n	34003410 <HAL_GPIO_Init+0x368>
340034a8:	340106bc 	.word	0x340106bc
340034ac:	46020000 	.word	0x46020000
340034b0:	56020400 	.word	0x56020400
340034b4:	56020800 	.word	0x56020800
340034b8:	56020c00 	.word	0x56020c00
340034bc:	56021000 	.word	0x56021000
340034c0:	56021400 	.word	0x56021400
340034c4:	56021800 	.word	0x56021800
340034c8:	56021c00 	.word	0x56021c00
340034cc:	56023400 	.word	0x56023400
340034d0:	56023800 	.word	0x56023800
340034d4:	56023c00 	.word	0x56023c00
340034d8:	56024000 	.word	0x56024000

340034dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
340034dc:	b570      	push	{r4, r5, r6, lr}
340034de:	4605      	mov	r5, r0
340034e0:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
340034e2:	460c      	mov	r4, r1
340034e4:	b921      	cbnz	r1, 340034f0 <HAL_GPIO_WritePin+0x14>
340034e6:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
340034ea:	4808      	ldr	r0, [pc, #32]	@ (3400350c <HAL_GPIO_WritePin+0x30>)
340034ec:	f7fd fe3e 	bl	3400116c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
340034f0:	2e01      	cmp	r6, #1
340034f2:	d906      	bls.n	34003502 <HAL_GPIO_WritePin+0x26>
340034f4:	f240 11a1 	movw	r1, #417	@ 0x1a1
340034f8:	4804      	ldr	r0, [pc, #16]	@ (3400350c <HAL_GPIO_WritePin+0x30>)
340034fa:	f7fd fe37 	bl	3400116c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
340034fe:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34003500:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
34003502:	2e00      	cmp	r6, #0
34003504:	d1fb      	bne.n	340034fe <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34003506:	62ac      	str	r4, [r5, #40]	@ 0x28
}
34003508:	e7fa      	b.n	34003500 <HAL_GPIO_WritePin+0x24>
3400350a:	bf00      	nop
3400350c:	340106bc 	.word	0x340106bc

34003510 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
34003510:	b538      	push	{r3, r4, r5, lr}
34003512:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34003514:	460c      	mov	r4, r1
34003516:	b921      	cbnz	r1, 34003522 <HAL_GPIO_TogglePin+0x12>
34003518:	f240 11b9 	movw	r1, #441	@ 0x1b9
3400351c:	4805      	ldr	r0, [pc, #20]	@ (34003534 <HAL_GPIO_TogglePin+0x24>)
3400351e:	f7fd fe25 	bl	3400116c <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
34003522:	696b      	ldr	r3, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
34003524:	ea04 0203 	and.w	r2, r4, r3
34003528:	ea24 0403 	bic.w	r4, r4, r3
3400352c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
34003530:	61ac      	str	r4, [r5, #24]
}
34003532:	bd38      	pop	{r3, r4, r5, pc}
34003534:	340106bc 	.word	0x340106bc

34003538 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
34003538:	b570      	push	{r4, r5, r6, lr}
3400353a:	f001 060f 	and.w	r6, r1, #15
3400353e:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
34003542:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
34003546:	4605      	mov	r5, r0
34003548:	ea4f 0484 	mov.w	r4, r4, lsl #2
3400354c:	f04f 0024 	mov.w	r0, #36	@ 0x24
  if ((ep_addr & 0x80U) == 0x80U)
34003550:	d020      	beq.n	34003594 <HAL_PCD_EP_Open+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003552:	f104 0114 	add.w	r1, r4, #20
    ep->is_in = 1U;
34003556:	2401      	movs	r4, #1
34003558:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
3400355c:	4429      	add	r1, r5
    ep->is_in = 1U;
3400355e:	7544      	strb	r4, [r0, #21]
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
34003560:	f3c2 020a 	ubfx	r2, r2, #0, #11
34003564:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;

  if (ep->is_in != 0U)
34003566:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
34003568:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
3400356a:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
3400356c:	b102      	cbz	r2, 34003570 <HAL_PCD_EP_Open+0x38>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
3400356e:	834e      	strh	r6, [r1, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
34003570:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
34003572:	bf04      	itt	eq
34003574:	2300      	moveq	r3, #0
34003576:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
34003578:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
3400357c:	2b01      	cmp	r3, #1
3400357e:	d012      	beq.n	340035a6 <HAL_PCD_EP_Open+0x6e>
34003580:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
34003582:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
34003584:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
34003588:	f008 f829 	bl	3400b5de <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
3400358c:	2000      	movs	r0, #0
3400358e:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494

  return ret;
}
34003592:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
34003594:	f504 7115 	add.w	r1, r4, #596	@ 0x254
    ep->is_in = 0U;
34003598:	2400      	movs	r4, #0
3400359a:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
3400359e:	4429      	add	r1, r5
    ep->is_in = 0U;
340035a0:	f880 4255 	strb.w	r4, [r0, #597]	@ 0x255
340035a4:	e7dc      	b.n	34003560 <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
340035a6:	2002      	movs	r0, #2
340035a8:	e7f3      	b.n	34003592 <HAL_PCD_EP_Open+0x5a>

340035aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
340035aa:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
340035ac:	2424      	movs	r4, #36	@ 0x24
340035ae:	f001 050f 	and.w	r5, r1, #15
340035b2:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
340035b6:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
340035ba:	e9c4 2398 	strd	r2, r3, [r4, #608]	@ 0x260
  ep->xfer_count = 0U;
340035be:	2300      	movs	r3, #0
{
340035c0:	4616      	mov	r6, r2
  ep->xfer_count = 0U;
340035c2:	f8c4 3268 	str.w	r3, [r4, #616]	@ 0x268
  ep->is_in = 0U;
340035c6:	f884 3255 	strb.w	r3, [r4, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
340035ca:	f884 5254 	strb.w	r5, [r4, #596]	@ 0x254

  if (hpcd->Init.dma_enable == 1U)
340035ce:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
340035d0:	f501 7115 	add.w	r1, r1, #596	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
340035d4:	2a01      	cmp	r2, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
340035d6:	bf08      	it	eq
340035d8:	f8c4 6270 	streq.w	r6, [r4, #624]	@ 0x270
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
340035dc:	6800      	ldr	r0, [r0, #0]
340035de:	f008 f891 	bl	3400b704 <USB_EPStartXfer>

  return HAL_OK;
}
340035e2:	2000      	movs	r0, #0
340035e4:	bd70      	pop	{r4, r5, r6, pc}

340035e6 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
340035e6:	2324      	movs	r3, #36	@ 0x24
340035e8:	f001 010f 	and.w	r1, r1, #15
340035ec:	fb03 0001 	mla	r0, r3, r1, r0
}
340035f0:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
340035f4:	4770      	bx	lr

340035f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
340035f6:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340035f8:	2424      	movs	r4, #36	@ 0x24
340035fa:	f001 050f 	and.w	r5, r1, #15
340035fe:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
34003602:	fb04 0405 	mla	r4, r4, r5, r0
  ep->xfer_len = len;
34003606:	e9c4 2308 	strd	r2, r3, [r4, #32]
  ep->xfer_count = 0U;
3400360a:	2300      	movs	r3, #0
3400360c:	62a3      	str	r3, [r4, #40]	@ 0x28
  ep->is_in = 1U;
3400360e:	2301      	movs	r3, #1
{
34003610:	4616      	mov	r6, r2
  ep->is_in = 1U;
34003612:	7563      	strb	r3, [r4, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
34003614:	7525      	strb	r5, [r4, #20]

  if (hpcd->Init.dma_enable == 1U)
34003616:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003618:	3114      	adds	r1, #20
  if (hpcd->Init.dma_enable == 1U)
3400361a:	429a      	cmp	r2, r3
  {
    ep->dma_addr = (uint32_t)pBuf;
3400361c:	bf08      	it	eq
3400361e:	6326      	streq	r6, [r4, #48]	@ 0x30
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
34003620:	6800      	ldr	r0, [r0, #0]
34003622:	f008 f86f 	bl	3400b704 <USB_EPStartXfer>

  return HAL_OK;
}
34003626:	2000      	movs	r0, #0
34003628:	bd70      	pop	{r4, r5, r6, pc}

3400362a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
3400362a:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
3400362c:	7903      	ldrb	r3, [r0, #4]
3400362e:	f001 050f 	and.w	r5, r1, #15
34003632:	42ab      	cmp	r3, r5
{
34003634:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
34003636:	d32b      	bcc.n	34003690 <HAL_PCD_EP_SetStall+0x66>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
34003638:	f011 0f80 	tst.w	r1, #128	@ 0x80
3400363c:	f04f 0024 	mov.w	r0, #36	@ 0x24
34003640:	d01d      	beq.n	3400367e <HAL_PCD_EP_SetStall+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
34003642:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
34003644:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
34003648:	fb00 4005 	mla	r0, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
3400364c:	3114      	adds	r1, #20
    ep->is_in = 1U;
3400364e:	7543      	strb	r3, [r0, #21]
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
34003650:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
34003652:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
34003654:	708b      	strb	r3, [r1, #2]

  __HAL_LOCK(hpcd);
34003656:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
3400365a:	429a      	cmp	r2, r3
3400365c:	d01a      	beq.n	34003694 <HAL_PCD_EP_SetStall+0x6a>

  (void)USB_EPSetStall(hpcd->Instance, ep);
3400365e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
34003660:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
34003664:	f008 f975 	bl	3400b952 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
34003668:	b92d      	cbnz	r5, 34003676 <HAL_PCD_EP_SetStall+0x4c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
3400366a:	79a1      	ldrb	r1, [r4, #6]
3400366c:	6820      	ldr	r0, [r4, #0]
3400366e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003672:	f008 f9db 	bl	3400ba2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
34003676:	2000      	movs	r0, #0
34003678:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
3400367c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
3400367e:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
34003682:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
34003684:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
34003688:	2300      	movs	r3, #0
3400368a:	f882 3255 	strb.w	r3, [r2, #597]	@ 0x255
3400368e:	e7df      	b.n	34003650 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
34003690:	2001      	movs	r0, #1
34003692:	e7f3      	b.n	3400367c <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
34003694:	2002      	movs	r0, #2
34003696:	e7f1      	b.n	3400367c <HAL_PCD_EP_SetStall+0x52>

34003698 <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
34003698:	f001 030f 	and.w	r3, r1, #15
3400369c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
340036a0:	009b      	lsls	r3, r3, #2
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
340036a2:	f103 0214 	add.w	r2, r3, #20
340036a6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
340036aa:	4402      	add	r2, r0
340036ac:	4403      	add	r3, r0
340036ae:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
340036b2:	bf0c      	ite	eq
340036b4:	4619      	moveq	r1, r3
340036b6:	4611      	movne	r1, r2
340036b8:	6800      	ldr	r0, [r0, #0]
340036ba:	f007 bfcf 	b.w	3400b65c <USB_EPStopXfer>
	...

340036c0 <HAL_PCD_IRQHandler>:
{
340036c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
340036c4:	6806      	ldr	r6, [r0, #0]
{
340036c6:	4604      	mov	r4, r0
340036c8:	b087      	sub	sp, #28
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
340036ca:	4630      	mov	r0, r6
340036cc:	f008 f99a 	bl	3400ba04 <USB_GetMode>
340036d0:	2800      	cmp	r0, #0
340036d2:	f040 8175 	bne.w	340039c0 <HAL_PCD_IRQHandler+0x300>
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
340036d6:	6820      	ldr	r0, [r4, #0]
340036d8:	f008 f966 	bl	3400b9a8 <USB_ReadInterrupts>
340036dc:	2800      	cmp	r0, #0
340036de:	f000 816f 	beq.w	340039c0 <HAL_PCD_IRQHandler+0x300>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
340036e2:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
340036e6:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
340036e8:	f3c3 230d 	ubfx	r3, r3, #8, #14
340036ec:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
340036f0:	f008 f95a 	bl	3400b9a8 <USB_ReadInterrupts>
340036f4:	0787      	lsls	r7, r0, #30
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
340036f6:	bf48      	it	mi
340036f8:	6822      	ldrmi	r2, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
340036fa:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
340036fc:	bf48      	it	mi
340036fe:	6953      	ldrmi	r3, [r2, #20]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
34003700:	f506 6500 	add.w	r5, r6, #2048	@ 0x800
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
34003704:	bf44      	itt	mi
34003706:	f003 0302 	andmi.w	r3, r3, #2
3400370a:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
3400370c:	f008 f94c 	bl	3400b9a8 <USB_ReadInterrupts>
34003710:	06c0      	lsls	r0, r0, #27
34003712:	d52c      	bpl.n	3400376e <HAL_PCD_IRQHandler+0xae>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
34003714:	6822      	ldr	r2, [r4, #0]
34003716:	6993      	ldr	r3, [r2, #24]
34003718:	f023 0310 	bic.w	r3, r3, #16
3400371c:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
3400371e:	f8d6 8020 	ldr.w	r8, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
34003722:	f3c8 4343 	ubfx	r3, r8, #17, #4
34003726:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
34003728:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
3400372c:	f040 814b 	bne.w	340039c6 <HAL_PCD_IRQHandler+0x306>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
34003730:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
34003734:	ea18 0f03 	tst.w	r8, r3
34003738:	d014      	beq.n	34003764 <HAL_PCD_IRQHandler+0xa4>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
3400373a:	2324      	movs	r3, #36	@ 0x24
3400373c:	fb03 4707 	mla	r7, r3, r7, r4
34003740:	f3c8 190a 	ubfx	r9, r8, #4, #11
34003744:	464a      	mov	r2, r9
34003746:	4630      	mov	r0, r6
34003748:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
3400374c:	f008 f8dc 	bl	3400b908 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003750:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
34003754:	444b      	add	r3, r9
34003756:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
3400375a:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
3400375e:	444b      	add	r3, r9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
34003760:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
34003764:	6822      	ldr	r2, [r4, #0]
34003766:	6993      	ldr	r3, [r2, #24]
34003768:	f043 0310 	orr.w	r3, r3, #16
3400376c:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
3400376e:	6820      	ldr	r0, [r4, #0]
34003770:	f008 f91a 	bl	3400b9a8 <USB_ReadInterrupts>
34003774:	0301      	lsls	r1, r0, #12
34003776:	f100 8138 	bmi.w	340039ea <HAL_PCD_IRQHandler+0x32a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
3400377a:	6820      	ldr	r0, [r4, #0]
3400377c:	f008 f914 	bl	3400b9a8 <USB_ReadInterrupts>
34003780:	0342      	lsls	r2, r0, #13
34003782:	d50d      	bpl.n	340037a0 <HAL_PCD_IRQHandler+0xe0>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
34003784:	6820      	ldr	r0, [r4, #0]
34003786:	f008 f91b 	bl	3400b9c0 <USB_ReadDevAllInEpInterrupt>
3400378a:	4627      	mov	r7, r4
3400378c:	4683      	mov	fp, r0
      epnum = 0U;
3400378e:	f04f 0900 	mov.w	r9, #0
34003792:	f506 6a10 	add.w	sl, r6, #2304	@ 0x900
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003796:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
34003798:	f1bb 0f00 	cmp.w	fp, #0
3400379c:	f040 81f2 	bne.w	34003b84 <HAL_PCD_IRQHandler+0x4c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
340037a0:	6820      	ldr	r0, [r4, #0]
340037a2:	f008 f901 	bl	3400b9a8 <USB_ReadInterrupts>
340037a6:	2800      	cmp	r0, #0
340037a8:	da13      	bge.n	340037d2 <HAL_PCD_IRQHandler+0x112>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
340037aa:	686b      	ldr	r3, [r5, #4]
340037ac:	f023 0301 	bic.w	r3, r3, #1
340037b0:	606b      	str	r3, [r5, #4]
      if (hpcd->LPM_State == LPM_L1)
340037b2:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
340037b6:	2b01      	cmp	r3, #1
340037b8:	f040 8288 	bne.w	34003ccc <HAL_PCD_IRQHandler+0x60c>
        hpcd->LPM_State = LPM_L0;
340037bc:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
340037be:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
340037c0:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
340037c4:	f000 fafb 	bl	34003dbe <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
340037c8:	6822      	ldr	r2, [r4, #0]
340037ca:	6953      	ldr	r3, [r2, #20]
340037cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
340037d0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
340037d2:	6820      	ldr	r0, [r4, #0]
340037d4:	f008 f8e8 	bl	3400b9a8 <USB_ReadInterrupts>
340037d8:	0502      	lsls	r2, r0, #20
340037da:	d50a      	bpl.n	340037f2 <HAL_PCD_IRQHandler+0x132>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
340037dc:	68ab      	ldr	r3, [r5, #8]
340037de:	07db      	lsls	r3, r3, #31
340037e0:	d502      	bpl.n	340037e8 <HAL_PCD_IRQHandler+0x128>
        HAL_PCD_SuspendCallback(hpcd);
340037e2:	4620      	mov	r0, r4
340037e4:	f008 fab8 	bl	3400bd58 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
340037e8:	6822      	ldr	r2, [r4, #0]
340037ea:	6953      	ldr	r3, [r2, #20]
340037ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340037f0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
340037f2:	6820      	ldr	r0, [r4, #0]
340037f4:	f008 f8d8 	bl	3400b9a8 <USB_ReadInterrupts>
340037f8:	0107      	lsls	r7, r0, #4
340037fa:	d514      	bpl.n	34003826 <HAL_PCD_IRQHandler+0x166>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
340037fc:	6823      	ldr	r3, [r4, #0]
340037fe:	695a      	ldr	r2, [r3, #20]
34003800:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
34003804:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
34003806:	f894 24cc 	ldrb.w	r2, [r4, #1228]	@ 0x4cc
3400380a:	2a00      	cmp	r2, #0
3400380c:	f040 8262 	bne.w	34003cd4 <HAL_PCD_IRQHandler+0x614>
        hpcd->LPM_State = LPM_L1;
34003810:	2101      	movs	r1, #1
34003812:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
34003816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
34003818:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
3400381a:	f3c3 0383 	ubfx	r3, r3, #2, #4
3400381e:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
34003822:	f000 facc 	bl	34003dbe <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
34003826:	6820      	ldr	r0, [r4, #0]
34003828:	f008 f8be 	bl	3400b9a8 <USB_ReadInterrupts>
3400382c:	04c0      	lsls	r0, r0, #19
3400382e:	d537      	bpl.n	340038a0 <HAL_PCD_IRQHandler+0x1e0>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003830:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
34003832:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
34003834:	f023 0301 	bic.w	r3, r3, #1
34003838:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
3400383a:	6820      	ldr	r0, [r4, #0]
3400383c:	f007 fe80 	bl	3400b540 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003840:	7921      	ldrb	r1, [r4, #4]
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34003842:	f64f 307f 	movw	r0, #64383	@ 0xfb7f
34003846:	2900      	cmp	r1, #0
34003848:	f101 0201 	add.w	r2, r1, #1
3400384c:	bf08      	it	eq
3400384e:	2201      	moveq	r2, #1
34003850:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003854:	3a01      	subs	r2, #1
34003856:	f040 8241 	bne.w	34003cdc <HAL_PCD_IRQHandler+0x61c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
3400385a:	69eb      	ldr	r3, [r5, #28]
3400385c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
34003860:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
34003862:	7be3      	ldrb	r3, [r4, #15]
34003864:	2b00      	cmp	r3, #0
34003866:	f000 8253 	beq.w	34003d10 <HAL_PCD_IRQHandler+0x650>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
3400386a:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
3400386e:	f043 030b 	orr.w	r3, r3, #11
34003872:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
34003876:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
34003878:	f043 030b 	orr.w	r3, r3, #11
3400387c:	646b      	str	r3, [r5, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
3400387e:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
34003882:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
34003886:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
3400388a:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
3400388e:	79a1      	ldrb	r1, [r4, #6]
34003890:	6820      	ldr	r0, [r4, #0]
34003892:	f008 f8cb 	bl	3400ba2c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
34003896:	6822      	ldr	r2, [r4, #0]
34003898:	6953      	ldr	r3, [r2, #20]
3400389a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400389e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
340038a0:	6820      	ldr	r0, [r4, #0]
340038a2:	f008 f881 	bl	3400b9a8 <USB_ReadInterrupts>
340038a6:	0481      	lsls	r1, r0, #18
340038a8:	d516      	bpl.n	340038d8 <HAL_PCD_IRQHandler+0x218>
      (void)USB_ActivateSetup(hpcd->Instance);
340038aa:	6820      	ldr	r0, [r4, #0]
340038ac:	f008 f8ae 	bl	3400ba0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
340038b0:	6820      	ldr	r0, [r4, #0]
340038b2:	f007 fe89 	bl	3400b5c8 <USB_GetDevSpeed>
340038b6:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
340038b8:	6827      	ldr	r7, [r4, #0]
340038ba:	f001 fb89 	bl	34004fd0 <HAL_RCC_GetHCLKFreq>
340038be:	79e2      	ldrb	r2, [r4, #7]
340038c0:	4601      	mov	r1, r0
340038c2:	4638      	mov	r0, r7
340038c4:	f007 fdcc 	bl	3400b460 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
340038c8:	4620      	mov	r0, r4
340038ca:	f008 fa11 	bl	3400bcf0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
340038ce:	6822      	ldr	r2, [r4, #0]
340038d0:	6953      	ldr	r3, [r2, #20]
340038d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340038d6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
340038d8:	6820      	ldr	r0, [r4, #0]
340038da:	f008 f865 	bl	3400b9a8 <USB_ReadInterrupts>
340038de:	0702      	lsls	r2, r0, #28
340038e0:	d507      	bpl.n	340038f2 <HAL_PCD_IRQHandler+0x232>
      HAL_PCD_SOFCallback(hpcd);
340038e2:	4620      	mov	r0, r4
340038e4:	f008 fa4c 	bl	3400bd80 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
340038e8:	6822      	ldr	r2, [r4, #0]
340038ea:	6953      	ldr	r3, [r2, #20]
340038ec:	f003 0308 	and.w	r3, r3, #8
340038f0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
340038f2:	6820      	ldr	r0, [r4, #0]
340038f4:	f008 f858 	bl	3400b9a8 <USB_ReadInterrupts>
340038f8:	0603      	lsls	r3, r0, #24
340038fa:	f100 8214 	bmi.w	34003d26 <HAL_PCD_IRQHandler+0x666>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
340038fe:	6820      	ldr	r0, [r4, #0]
34003900:	f008 f852 	bl	3400b9a8 <USB_ReadInterrupts>
34003904:	02c7      	lsls	r7, r0, #11
34003906:	d50c      	bpl.n	34003922 <HAL_PCD_IRQHandler+0x262>
34003908:	46a0      	mov	r8, r4
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
3400390a:	2701      	movs	r7, #1
3400390c:	f506 6912 	add.w	r9, r6, #2336	@ 0x920
34003910:	7923      	ldrb	r3, [r4, #4]
34003912:	42bb      	cmp	r3, r7
34003914:	f200 8220 	bhi.w	34003d58 <HAL_PCD_IRQHandler+0x698>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
34003918:	6822      	ldr	r2, [r4, #0]
3400391a:	6953      	ldr	r3, [r2, #20]
3400391c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34003920:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
34003922:	6820      	ldr	r0, [r4, #0]
34003924:	f008 f840 	bl	3400b9a8 <USB_ReadInterrupts>
34003928:	0280      	lsls	r0, r0, #10
3400392a:	d52c      	bpl.n	34003986 <HAL_PCD_IRQHandler+0x2c6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
3400392c:	7923      	ldrb	r3, [r4, #4]
3400392e:	4622      	mov	r2, r4
34003930:	2b00      	cmp	r3, #0
34003932:	bf08      	it	eq
34003934:	2301      	moveq	r3, #1
34003936:	f506 6c32 	add.w	ip, r6, #2848	@ 0xb20
3400393a:	3b01      	subs	r3, #1
3400393c:	d01e      	beq.n	3400397c <HAL_PCD_IRQHandler+0x2bc>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
3400393e:	f892 727c 	ldrb.w	r7, [r2, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
34003942:	f8dc 0000 	ldr.w	r0, [ip]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
34003946:	2f01      	cmp	r7, #1
34003948:	f040 821c 	bne.w	34003d84 <HAL_PCD_IRQHandler+0x6c4>
3400394c:	2800      	cmp	r0, #0
3400394e:	f280 8219 	bge.w	34003d84 <HAL_PCD_IRQHandler+0x6c4>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
34003952:	f8d4 14d4 	ldr.w	r1, [r4, #1236]	@ 0x4d4
34003956:	ea81 4010 	eor.w	r0, r1, r0, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
3400395a:	07c1      	lsls	r1, r0, #31
3400395c:	f100 8212 	bmi.w	34003d84 <HAL_PCD_IRQHandler+0x6c4>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
34003960:	f882 727b 	strb.w	r7, [r2, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
34003964:	69b0      	ldr	r0, [r6, #24]
34003966:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
3400396a:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
3400396c:	6970      	ldr	r0, [r6, #20]
3400396e:	0600      	lsls	r0, r0, #24
34003970:	f100 8208 	bmi.w	34003d84 <HAL_PCD_IRQHandler+0x6c4>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
34003974:	686b      	ldr	r3, [r5, #4]
34003976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3400397a:	606b      	str	r3, [r5, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
3400397c:	6822      	ldr	r2, [r4, #0]
3400397e:	6953      	ldr	r3, [r2, #20]
34003980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34003984:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
34003986:	6820      	ldr	r0, [r4, #0]
34003988:	f008 f80e 	bl	3400b9a8 <USB_ReadInterrupts>
3400398c:	0041      	lsls	r1, r0, #1
3400398e:	d507      	bpl.n	340039a0 <HAL_PCD_IRQHandler+0x2e0>
      HAL_PCD_ConnectCallback(hpcd);
34003990:	4620      	mov	r0, r4
34003992:	f008 f9c5 	bl	3400bd20 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
34003996:	6822      	ldr	r2, [r4, #0]
34003998:	6953      	ldr	r3, [r2, #20]
3400399a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400399e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
340039a0:	6820      	ldr	r0, [r4, #0]
340039a2:	f008 f801 	bl	3400b9a8 <USB_ReadInterrupts>
340039a6:	0742      	lsls	r2, r0, #29
340039a8:	d50a      	bpl.n	340039c0 <HAL_PCD_IRQHandler+0x300>
      RegVal = hpcd->Instance->GOTGINT;
340039aa:	6823      	ldr	r3, [r4, #0]
340039ac:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
340039ae:	076b      	lsls	r3, r5, #29
340039b0:	d502      	bpl.n	340039b8 <HAL_PCD_IRQHandler+0x2f8>
        HAL_PCD_DisconnectCallback(hpcd);
340039b2:	4620      	mov	r0, r4
340039b4:	f008 f9be 	bl	3400bd34 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
340039b8:	6822      	ldr	r2, [r4, #0]
340039ba:	6853      	ldr	r3, [r2, #4]
340039bc:	432b      	orrs	r3, r5
340039be:	6053      	str	r3, [r2, #4]
}
340039c0:	b007      	add	sp, #28
340039c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
340039c6:	2b06      	cmp	r3, #6
340039c8:	f47f aecc 	bne.w	34003764 <HAL_PCD_IRQHandler+0xa4>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
340039cc:	2208      	movs	r2, #8
340039ce:	4630      	mov	r0, r6
340039d0:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
340039d4:	f007 ff98 	bl	3400b908 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
340039d8:	2324      	movs	r3, #36	@ 0x24
340039da:	fb03 4707 	mla	r7, r3, r7, r4
340039de:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
340039e2:	f3c8 180a 	ubfx	r8, r8, #4, #11
340039e6:	4443      	add	r3, r8
340039e8:	e6ba      	b.n	34003760 <HAL_PCD_IRQHandler+0xa0>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
340039ea:	6820      	ldr	r0, [r4, #0]
340039ec:	f007 ffe0 	bl	3400b9b0 <USB_ReadDevAllOutEpInterrupt>
340039f0:	46a2      	mov	sl, r4
      epnum = 0U;
340039f2:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
340039f4:	9002      	str	r0, [sp, #8]
      while (ep_intr != 0U)
340039f6:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
340039fa:	9b02      	ldr	r3, [sp, #8]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
340039fc:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
340039fe:	2b00      	cmp	r3, #0
34003a00:	f43f aebb 	beq.w	3400377a <HAL_PCD_IRQHandler+0xba>
        if ((ep_intr & 0x1U) != 0U)
34003a04:	9b02      	ldr	r3, [sp, #8]
34003a06:	07db      	lsls	r3, r3, #31
34003a08:	d578      	bpl.n	34003afc <HAL_PCD_IRQHandler+0x43c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003a0a:	fa5f fb87 	uxtb.w	fp, r7
34003a0e:	4659      	mov	r1, fp
34003a10:	f007 ffde 	bl	3400b9d0 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003a14:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003a18:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
34003a1a:	d01f      	beq.n	34003a5c <HAL_PCD_IRQHandler+0x39c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003a1c:	2301      	movs	r3, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003a1e:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
34003a20:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
34003a24:	f894 c006 	ldrb.w	ip, [r4, #6]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003a28:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
34003a2c:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
34003a30:	f1bc 0f01 	cmp.w	ip, #1
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003a34:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003a36:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
34003a38:	f040 808e 	bne.w	34003b58 <HAL_PCD_IRQHandler+0x498>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
34003a3c:	f012 0f08 	tst.w	r2, #8
34003a40:	d007      	beq.n	34003a52 <HAL_PCD_IRQHandler+0x392>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003a42:	48b1      	ldr	r0, [pc, #708]	@ (34003d08 <HAL_PCD_IRQHandler+0x648>)
34003a44:	4281      	cmp	r1, r0
34003a46:	d909      	bls.n	34003a5c <HAL_PCD_IRQHandler+0x39c>
34003a48:	0412      	lsls	r2, r2, #16
34003a4a:	d507      	bpl.n	34003a5c <HAL_PCD_IRQHandler+0x39c>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003a4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34003a50:	e003      	b.n	34003a5a <HAL_PCD_IRQHandler+0x39a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
34003a52:	f012 0f20 	tst.w	r2, #32
34003a56:	d05a      	beq.n	34003b0e <HAL_PCD_IRQHandler+0x44e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003a58:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003a5a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
34003a5c:	f019 0f08 	tst.w	r9, #8
34003a60:	d021      	beq.n	34003aa6 <HAL_PCD_IRQHandler+0x3e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
34003a62:	2308      	movs	r3, #8
34003a64:	f8c8 3008 	str.w	r3, [r8, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003a68:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003a6a:	49a7      	ldr	r1, [pc, #668]	@ (34003d08 <HAL_PCD_IRQHandler+0x648>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
34003a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
34003a72:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003a76:	428a      	cmp	r2, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
34003a78:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003a7a:	d904      	bls.n	34003a86 <HAL_PCD_IRQHandler+0x3c6>
34003a7c:	0400      	lsls	r0, r0, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
34003a7e:	bf44      	itt	mi
34003a80:	f44f 4000 	movmi.w	r0, #32768	@ 0x8000
34003a84:	6098      	strmi	r0, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
34003a86:	4620      	mov	r0, r4
34003a88:	9203      	str	r2, [sp, #12]
34003a8a:	f008 f833 	bl	3400baf4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
34003a8e:	9a03      	ldr	r2, [sp, #12]
34003a90:	499d      	ldr	r1, [pc, #628]	@ (34003d08 <HAL_PCD_IRQHandler+0x648>)
34003a92:	428a      	cmp	r2, r1
34003a94:	d907      	bls.n	34003aa6 <HAL_PCD_IRQHandler+0x3e6>
34003a96:	79a1      	ldrb	r1, [r4, #6]
34003a98:	2901      	cmp	r1, #1
34003a9a:	d104      	bne.n	34003aa6 <HAL_PCD_IRQHandler+0x3e6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003a9c:	6820      	ldr	r0, [r4, #0]
34003a9e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003aa2:	f007 ffc3 	bl	3400ba2c <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
34003aa6:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
34003aaa:	bf1c      	itt	ne
34003aac:	2310      	movne	r3, #16
34003aae:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
34003ab2:	f019 0f02 	tst.w	r9, #2
34003ab6:	d014      	beq.n	34003ae2 <HAL_PCD_IRQHandler+0x422>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
34003ab8:	6973      	ldr	r3, [r6, #20]
34003aba:	0619      	lsls	r1, r3, #24
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
34003abc:	bf42      	ittt	mi
34003abe:	686b      	ldrmi	r3, [r5, #4]
34003ac0:	f443 6380 	orrmi.w	r3, r3, #1024	@ 0x400
34003ac4:	606b      	strmi	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
34003ac6:	f89a 3257 	ldrb.w	r3, [sl, #599]	@ 0x257
34003aca:	2b01      	cmp	r3, #1
34003acc:	d106      	bne.n	34003adc <HAL_PCD_IRQHandler+0x41c>
              ep->is_iso_incomplete = 0U;
34003ace:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
34003ad0:	4659      	mov	r1, fp
34003ad2:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
34003ad4:	f88a 3257 	strb.w	r3, [sl, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
34003ad8:	f008 f97c 	bl	3400bdd4 <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
34003adc:	2302      	movs	r3, #2
34003ade:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003ae2:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003ae6:	bf1c      	itt	ne
34003ae8:	2320      	movne	r3, #32
34003aea:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
34003aee:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
34003af2:	bf1c      	itt	ne
34003af4:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
34003af8:	f8c8 3008 	strne.w	r3, [r8, #8]
        ep_intr >>= 1U;
34003afc:	9b02      	ldr	r3, [sp, #8]
        epnum++;
34003afe:	3701      	adds	r7, #1
        ep_intr >>= 1U;
34003b00:	085b      	lsrs	r3, r3, #1
34003b02:	9302      	str	r3, [sp, #8]
34003b04:	f108 0820 	add.w	r8, r8, #32
34003b08:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
34003b0c:	e775      	b.n	340039fa <HAL_PCD_IRQHandler+0x33a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
34003b0e:	f012 0f28 	tst.w	r2, #40	@ 0x28
34003b12:	d1a3      	bne.n	34003a5c <HAL_PCD_IRQHandler+0x39c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
34003b14:	f8df c1f0 	ldr.w	ip, [pc, #496]	@ 34003d08 <HAL_PCD_IRQHandler+0x648>
34003b18:	4561      	cmp	r1, ip
34003b1a:	d901      	bls.n	34003b20 <HAL_PCD_IRQHandler+0x460>
34003b1c:	0412      	lsls	r2, r2, #16
34003b1e:	d495      	bmi.n	34003a4c <HAL_PCD_IRQHandler+0x38c>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
34003b20:	691a      	ldr	r2, [r3, #16]
34003b22:	f8da 3274 	ldr.w	r3, [sl, #628]	@ 0x274
34003b26:	f3c2 0212 	ubfx	r2, r2, #0, #19
34003b2a:	1a9b      	subs	r3, r3, r2
34003b2c:	f8ca 3268 	str.w	r3, [sl, #616]	@ 0x268
        if (epnum == 0U)
34003b30:	b96f      	cbnz	r7, 34003b4e <HAL_PCD_IRQHandler+0x48e>
          if (ep->xfer_len == 0U)
34003b32:	f8d4 2264 	ldr.w	r2, [r4, #612]	@ 0x264
34003b36:	b92a      	cbnz	r2, 34003b44 <HAL_PCD_IRQHandler+0x484>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003b38:	2101      	movs	r1, #1
34003b3a:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003b3e:	f007 ff75 	bl	3400ba2c <USB_EP0_OutStart>
34003b42:	e004      	b.n	34003b4e <HAL_PCD_IRQHandler+0x48e>
            ep->xfer_buff += ep->xfer_count;
34003b44:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
34003b48:	441a      	add	r2, r3
34003b4a:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003b4e:	4659      	mov	r1, fp
34003b50:	4620      	mov	r0, r4
34003b52:	f008 f881 	bl	3400bc58 <HAL_PCD_DataOutStageCallback>
34003b56:	e781      	b.n	34003a5c <HAL_PCD_IRQHandler+0x39c>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
34003b58:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 34003d0c <HAL_PCD_IRQHandler+0x64c>
34003b5c:	4561      	cmp	r1, ip
34003b5e:	d107      	bne.n	34003b70 <HAL_PCD_IRQHandler+0x4b0>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
34003b60:	0411      	lsls	r1, r2, #16
34003b62:	f53f af73 	bmi.w	34003a4c <HAL_PCD_IRQHandler+0x38c>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
34003b66:	0692      	lsls	r2, r2, #26
34003b68:	d5f1      	bpl.n	34003b4e <HAL_PCD_IRQHandler+0x48e>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
34003b6a:	2220      	movs	r2, #32
34003b6c:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
34003b6e:	e7ee      	b.n	34003b4e <HAL_PCD_IRQHandler+0x48e>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
34003b70:	2f00      	cmp	r7, #0
34003b72:	d1ec      	bne.n	34003b4e <HAL_PCD_IRQHandler+0x48e>
34003b74:	f8d4 3264 	ldr.w	r3, [r4, #612]	@ 0x264
34003b78:	2b00      	cmp	r3, #0
34003b7a:	d1e8      	bne.n	34003b4e <HAL_PCD_IRQHandler+0x48e>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
34003b7c:	4639      	mov	r1, r7
34003b7e:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003b82:	e7dc      	b.n	34003b3e <HAL_PCD_IRQHandler+0x47e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
34003b84:	f01b 0f01 	tst.w	fp, #1
34003b88:	f000 8098 	beq.w	34003cbc <HAL_PCD_IRQHandler+0x5fc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003b8c:	fa5f f389 	uxtb.w	r3, r9
34003b90:	4619      	mov	r1, r3
34003b92:	9302      	str	r3, [sp, #8]
34003b94:	f007 ff25 	bl	3400b9e2 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003b98:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
34003b9c:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
34003b9e:	d01f      	beq.n	34003be0 <HAL_PCD_IRQHandler+0x520>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003ba0:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003ba2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003ba4:	f009 020f 	and.w	r2, r9, #15
34003ba8:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003bac:	ea23 0302 	bic.w	r3, r3, r2
34003bb0:	636b      	str	r3, [r5, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
34003bb2:	f8ca 1008 	str.w	r1, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
34003bb6:	79a1      	ldrb	r1, [r4, #6]
34003bb8:	2901      	cmp	r1, #1
34003bba:	d10d      	bne.n	34003bd8 <HAL_PCD_IRQHandler+0x518>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
34003bbc:	e9d7 2307 	ldrd	r2, r3, [r7, #28]
34003bc0:	4413      	add	r3, r2
34003bc2:	623b      	str	r3, [r7, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
34003bc4:	f1b9 0f00 	cmp.w	r9, #0
34003bc8:	d106      	bne.n	34003bd8 <HAL_PCD_IRQHandler+0x518>
34003bca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003bcc:	b923      	cbnz	r3, 34003bd8 <HAL_PCD_IRQHandler+0x518>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
34003bce:	6820      	ldr	r0, [r4, #0]
34003bd0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
34003bd4:	f007 ff2a 	bl	3400ba2c <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
34003bd8:	4620      	mov	r0, r4
34003bda:	9902      	ldr	r1, [sp, #8]
34003bdc:	f007 ffd6 	bl	3400bb8c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
34003be0:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
34003be4:	bf1c      	itt	ne
34003be6:	2308      	movne	r3, #8
34003be8:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
34003bec:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
34003bf0:	bf1c      	itt	ne
34003bf2:	2310      	movne	r3, #16
34003bf4:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
34003bf8:	f018 0f40 	tst.w	r8, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
34003bfc:	bf1c      	itt	ne
34003bfe:	2340      	movne	r3, #64	@ 0x40
34003c00:	f8ca 3008 	strne.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
34003c04:	f018 0f02 	tst.w	r8, #2
34003c08:	d00f      	beq.n	34003c2a <HAL_PCD_IRQHandler+0x56a>
            (void)USB_FlushTxFifo(USBx, epnum);
34003c0a:	4649      	mov	r1, r9
34003c0c:	4630      	mov	r0, r6
34003c0e:	f007 fc97 	bl	3400b540 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
34003c12:	7dfb      	ldrb	r3, [r7, #23]
34003c14:	2b01      	cmp	r3, #1
34003c16:	d105      	bne.n	34003c24 <HAL_PCD_IRQHandler+0x564>
              ep->is_iso_incomplete = 0U;
34003c18:	2300      	movs	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34003c1a:	4620      	mov	r0, r4
34003c1c:	9902      	ldr	r1, [sp, #8]
              ep->is_iso_incomplete = 0U;
34003c1e:	75fb      	strb	r3, [r7, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
34003c20:	f008 f8b8 	bl	3400bd94 <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
34003c24:	2302      	movs	r3, #2
34003c26:	f8ca 3008 	str.w	r3, [sl, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003c2a:	6823      	ldr	r3, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34003c2c:	f018 0f80 	tst.w	r8, #128	@ 0x80
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
34003c30:	9303      	str	r3, [sp, #12]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
34003c32:	d043      	beq.n	34003cbc <HAL_PCD_IRQHandler+0x5fc>
  if (ep->xfer_count > ep->xfer_len)
34003c34:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
34003c38:	429a      	cmp	r2, r3
34003c3a:	d83f      	bhi.n	34003cbc <HAL_PCD_IRQHandler+0x5fc>
  len = ep->xfer_len - ep->xfer_count;
34003c3c:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
34003c3e:	69fa      	ldr	r2, [r7, #28]
34003c40:	4293      	cmp	r3, r2
34003c42:	bf28      	it	cs
34003c44:	4613      	movcs	r3, r2
34003c46:	3303      	adds	r3, #3
34003c48:	089b      	lsrs	r3, r3, #2
34003c4a:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003c4c:	9b03      	ldr	r3, [sp, #12]
34003c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
34003c52:	eb03 1349 	add.w	r3, r3, r9, lsl #5
34003c56:	9305      	str	r3, [sp, #20]
34003c58:	9b05      	ldr	r3, [sp, #20]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003c5a:	9804      	ldr	r0, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003c5c:	6999      	ldr	r1, [r3, #24]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003c5e:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003c62:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
34003c64:	4281      	cmp	r1, r0
34003c66:	d327      	bcc.n	34003cb8 <HAL_PCD_IRQHandler+0x5f8>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
34003c68:	4293      	cmp	r3, r2
34003c6a:	d80b      	bhi.n	34003c84 <HAL_PCD_IRQHandler+0x5c4>
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003c6c:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003c6e:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003c70:	f009 000f 	and.w	r0, r9, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003c74:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
34003c78:	4081      	lsls	r1, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
34003c7a:	ea22 0201 	bic.w	r2, r2, r1
34003c7e:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
34003c82:	e01b      	b.n	34003cbc <HAL_PCD_IRQHandler+0x5fc>
    len = ep->xfer_len - ep->xfer_count;
34003c84:	eba3 0802 	sub.w	r8, r3, r2
34003c88:	69fb      	ldr	r3, [r7, #28]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
34003c8a:	9a02      	ldr	r2, [sp, #8]
34003c8c:	4598      	cmp	r8, r3
34003c8e:	bf28      	it	cs
34003c90:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
34003c92:	f108 0303 	add.w	r3, r8, #3
34003c96:	089b      	lsrs	r3, r3, #2
34003c98:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
34003c9a:	79a3      	ldrb	r3, [r4, #6]
34003c9c:	9803      	ldr	r0, [sp, #12]
34003c9e:	9300      	str	r3, [sp, #0]
34003ca0:	6a39      	ldr	r1, [r7, #32]
34003ca2:	fa1f f388 	uxth.w	r3, r8
34003ca6:	f007 fd1b 	bl	3400b6e0 <USB_WritePacket>
    ep->xfer_buff  += len;
34003caa:	6a3b      	ldr	r3, [r7, #32]
34003cac:	4443      	add	r3, r8
34003cae:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
34003cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34003cb2:	4443      	add	r3, r8
34003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
34003cb6:	e7cf      	b.n	34003c58 <HAL_PCD_IRQHandler+0x598>
  if (ep->xfer_len <= ep->xfer_count)
34003cb8:	4293      	cmp	r3, r2
34003cba:	d9d7      	bls.n	34003c6c <HAL_PCD_IRQHandler+0x5ac>
        epnum++;
34003cbc:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
34003cc0:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
34003cc4:	3724      	adds	r7, #36	@ 0x24
34003cc6:	f10a 0a20 	add.w	sl, sl, #32
34003cca:	e564      	b.n	34003796 <HAL_PCD_IRQHandler+0xd6>
        HAL_PCD_ResumeCallback(hpcd);
34003ccc:	4620      	mov	r0, r4
34003cce:	f008 f84d 	bl	3400bd6c <HAL_PCD_ResumeCallback>
34003cd2:	e579      	b.n	340037c8 <HAL_PCD_IRQHandler+0x108>
        HAL_PCD_SuspendCallback(hpcd);
34003cd4:	4620      	mov	r0, r4
34003cd6:	f008 f83f 	bl	3400bd58 <HAL_PCD_SuspendCallback>
34003cda:	e5a4      	b.n	34003826 <HAL_PCD_IRQHandler+0x166>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
34003cdc:	6098      	str	r0, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
34003cde:	6819      	ldr	r1, [r3, #0]
34003ce0:	3320      	adds	r3, #32
34003ce2:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
34003ce6:	f843 1c20 	str.w	r1, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
34003cea:	f8c3 01e8 	str.w	r0, [r3, #488]	@ 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
34003cee:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34003cf2:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
34003cf6:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
34003cfa:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
34003cfe:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
34003d02:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
34003d06:	e5a5      	b.n	34003854 <HAL_PCD_IRQHandler+0x194>
34003d08:	4f54300a 	.word	0x4f54300a
34003d0c:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
34003d10:	696b      	ldr	r3, [r5, #20]
34003d12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34003d16:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
34003d1a:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
34003d1c:	692b      	ldr	r3, [r5, #16]
34003d1e:	f043 030b 	orr.w	r3, r3, #11
34003d22:	612b      	str	r3, [r5, #16]
34003d24:	e5ab      	b.n	3400387e <HAL_PCD_IRQHandler+0x1be>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003d26:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003d28:	f04f 0924 	mov.w	r9, #36	@ 0x24
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34003d2c:	69b3      	ldr	r3, [r6, #24]
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003d2e:	f204 2857 	addw	r8, r4, #599	@ 0x257
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
34003d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
34003d36:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003d38:	7923      	ldrb	r3, [r4, #4]
34003d3a:	42bb      	cmp	r3, r7
34003d3c:	f67f addf 	bls.w	340038fe <HAL_PCD_IRQHandler+0x23e>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
34003d40:	fb09 f307 	mul.w	r3, r9, r7
34003d44:	f818 3003 	ldrb.w	r3, [r8, r3]
34003d48:	2b01      	cmp	r3, #1
34003d4a:	d103      	bne.n	34003d54 <HAL_PCD_IRQHandler+0x694>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
34003d4c:	4620      	mov	r0, r4
34003d4e:	b2f9      	uxtb	r1, r7
34003d50:	f7ff fca2 	bl	34003698 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003d54:	3701      	adds	r7, #1
34003d56:	e7ef      	b.n	34003d38 <HAL_PCD_IRQHandler+0x678>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
34003d58:	f898 303c 	ldrb.w	r3, [r8, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
34003d5c:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
34003d60:	2b01      	cmp	r3, #1
34003d62:	d109      	bne.n	34003d78 <HAL_PCD_IRQHandler+0x6b8>
34003d64:	2a00      	cmp	r2, #0
34003d66:	da07      	bge.n	34003d78 <HAL_PCD_IRQHandler+0x6b8>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
34003d68:	f067 017f 	orn	r1, r7, #127	@ 0x7f
34003d6c:	4620      	mov	r0, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
34003d6e:	f888 303b 	strb.w	r3, [r8, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
34003d72:	b2c9      	uxtb	r1, r1
34003d74:	f7ff fc90 	bl	34003698 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003d78:	3701      	adds	r7, #1
34003d7a:	f108 0824 	add.w	r8, r8, #36	@ 0x24
34003d7e:	f109 0920 	add.w	r9, r9, #32
34003d82:	e5c5      	b.n	34003910 <HAL_PCD_IRQHandler+0x250>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
34003d84:	3224      	adds	r2, #36	@ 0x24
34003d86:	f10c 0c20 	add.w	ip, ip, #32
34003d8a:	e5d6      	b.n	3400393a <HAL_PCD_IRQHandler+0x27a>

34003d8c <HAL_PCD_EP_Flush>:
{
34003d8c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
34003d8e:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
{
34003d92:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
34003d94:	2b01      	cmp	r3, #1
34003d96:	d010      	beq.n	34003dba <HAL_PCD_EP_Flush+0x2e>
34003d98:	2301      	movs	r3, #1
34003d9a:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
34003d9e:	060b      	lsls	r3, r1, #24
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
34003da0:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80U) == 0x80U)
34003da2:	d507      	bpl.n	34003db4 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
34003da4:	f001 010f 	and.w	r1, r1, #15
34003da8:	f007 fbca 	bl	3400b540 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
34003dac:	2000      	movs	r0, #0
34003dae:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
34003db2:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
34003db4:	f007 fbe7 	bl	3400b586 <USB_FlushRxFifo>
34003db8:	e7f8      	b.n	34003dac <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
34003dba:	2002      	movs	r0, #2
34003dbc:	e7f9      	b.n	34003db2 <HAL_PCD_EP_Flush+0x26>

34003dbe <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
34003dbe:	4770      	bx	lr

34003dc0 <HAL_PWREx_ConfigVddIORange>:
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34003dc0:	2804      	cmp	r0, #4
{
34003dc2:	b538      	push	{r3, r4, r5, lr}
34003dc4:	4605      	mov	r5, r0
34003dc6:	460c      	mov	r4, r1
  assert_param(IS_PWR_VDDIO(VddIOPort));
34003dc8:	d912      	bls.n	34003df0 <HAL_PWREx_ConfigVddIORange+0x30>
34003dca:	f240 316a 	movw	r1, #874	@ 0x36a
34003dce:	481d      	ldr	r0, [pc, #116]	@ (34003e44 <HAL_PWREx_ConfigVddIORange+0x84>)
34003dd0:	f7fd f9cc 	bl	3400116c <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34003dd4:	2c01      	cmp	r4, #1
34003dd6:	d915      	bls.n	34003e04 <HAL_PWREx_ConfigVddIORange+0x44>
34003dd8:	f240 316b 	movw	r1, #875	@ 0x36b
34003ddc:	4819      	ldr	r0, [pc, #100]	@ (34003e44 <HAL_PWREx_ConfigVddIORange+0x84>)
34003dde:	f7fd f9c5 	bl	3400116c <assert_failed>

  switch (VddIOPort)
34003de2:	2d04      	cmp	r5, #4
34003de4:	d80e      	bhi.n	34003e04 <HAL_PWREx_ConfigVddIORange+0x44>
34003de6:	e8df f005 	tbb	[pc, r5]
34003dea:	0e06      	.short	0x0e06
34003dec:	1c15      	.short	0x1c15
34003dee:	24          	.byte	0x24
34003def:	00          	.byte	0x00
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34003df0:	2901      	cmp	r1, #1
34003df2:	d9f6      	bls.n	34003de2 <HAL_PWREx_ConfigVddIORange+0x22>
34003df4:	e7f0      	b.n	34003dd8 <HAL_PWREx_ConfigVddIORange+0x18>
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34003df6:	4a14      	ldr	r2, [pc, #80]	@ (34003e48 <HAL_PWREx_ConfigVddIORange+0x88>)
34003df8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003dfe:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
      break;

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34003e02:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;

    default:
      break;
  }
}
34003e04:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34003e06:	4a10      	ldr	r2, [pc, #64]	@ (34003e48 <HAL_PWREx_ConfigVddIORange+0x88>)
34003e08:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003e0a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
34003e0e:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
34003e12:	e7f6      	b.n	34003e02 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34003e14:	4a0c      	ldr	r2, [pc, #48]	@ (34003e48 <HAL_PWREx_ConfigVddIORange+0x88>)
34003e16:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003e18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
34003e1c:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
34003e20:	e7ef      	b.n	34003e02 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34003e22:	4a09      	ldr	r2, [pc, #36]	@ (34003e48 <HAL_PWREx_ConfigVddIORange+0x88>)
34003e24:	6b53      	ldr	r3, [r2, #52]	@ 0x34
34003e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003e2a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34003e2e:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
34003e30:	e7e8      	b.n	34003e04 <HAL_PWREx_ConfigVddIORange+0x44>
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34003e32:	4a05      	ldr	r2, [pc, #20]	@ (34003e48 <HAL_PWREx_ConfigVddIORange+0x88>)
34003e34:	6b93      	ldr	r3, [r2, #56]	@ 0x38
34003e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34003e3a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34003e3e:	6393      	str	r3, [r2, #56]	@ 0x38
}
34003e40:	e7e0      	b.n	34003e04 <HAL_PWREx_ConfigVddIORange+0x44>
34003e42:	bf00      	nop
34003e44:	34010760 	.word	0x34010760
34003e48:	56024800 	.word	0x56024800

34003e4c <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34003e4c:	4a02      	ldr	r2, [pc, #8]	@ (34003e58 <HAL_PWREx_EnableVddIO3+0xc>)
34003e4e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34003e50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34003e54:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34003e56:	4770      	bx	lr
34003e58:	56024800 	.word	0x56024800

34003e5c <HAL_RAMCFG_EnableAXISRAM>:
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003e5c:	6803      	ldr	r3, [r0, #0]
34003e5e:	4a1c      	ldr	r2, [pc, #112]	@ (34003ed0 <HAL_RAMCFG_EnableAXISRAM+0x74>)
{
34003e60:	b510      	push	{r4, lr}
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003e62:	4293      	cmp	r3, r2
{
34003e64:	4604      	mov	r4, r0
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34003e66:	d02c      	beq.n	34003ec2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003e68:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003e6c:	4293      	cmp	r3, r2
34003e6e:	d028      	beq.n	34003ec2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003e70:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003e74:	3280      	adds	r2, #128	@ 0x80
34003e76:	4293      	cmp	r3, r2
34003e78:	d023      	beq.n	34003ec2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003e7a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003e7e:	4293      	cmp	r3, r2
34003e80:	d01f      	beq.n	34003ec2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003e82:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003e86:	3280      	adds	r2, #128	@ 0x80
34003e88:	4293      	cmp	r3, r2
34003e8a:	d01a      	beq.n	34003ec2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003e8c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003e90:	4293      	cmp	r3, r2
34003e92:	d016      	beq.n	34003ec2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003e94:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003e98:	3280      	adds	r2, #128	@ 0x80
34003e9a:	4293      	cmp	r3, r2
34003e9c:	d011      	beq.n	34003ec2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003e9e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003ea2:	4293      	cmp	r3, r2
34003ea4:	d00d      	beq.n	34003ec2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003ea6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34003eaa:	3280      	adds	r2, #128	@ 0x80
34003eac:	4293      	cmp	r3, r2
34003eae:	d008      	beq.n	34003ec2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003eb0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34003eb4:	4293      	cmp	r3, r2
34003eb6:	d004      	beq.n	34003ec2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34003eb8:	f240 4107 	movw	r1, #1031	@ 0x407
34003ebc:	4805      	ldr	r0, [pc, #20]	@ (34003ed4 <HAL_RAMCFG_EnableAXISRAM+0x78>)
34003ebe:	f7fd f955 	bl	3400116c <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
34003ec2:	6822      	ldr	r2, [r4, #0]
34003ec4:	6813      	ldr	r3, [r2, #0]
34003ec6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34003eca:	6013      	str	r3, [r2, #0]
}
34003ecc:	bd10      	pop	{r4, pc}
34003ece:	bf00      	nop
34003ed0:	52023080 	.word	0x52023080
34003ed4:	34010806 	.word	0x34010806

34003ed8 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34003ed8:	4b02      	ldr	r3, [pc, #8]	@ (34003ee4 <LL_RCC_HSI_IsReady+0xc>)
34003eda:	6858      	ldr	r0, [r3, #4]
}
34003edc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34003ee0:	4770      	bx	lr
34003ee2:	bf00      	nop
34003ee4:	56028000 	.word	0x56028000

34003ee8 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34003ee8:	4b02      	ldr	r3, [pc, #8]	@ (34003ef4 <LL_RCC_MSI_IsReady+0xc>)
34003eea:	6858      	ldr	r0, [r3, #4]
}
34003eec:	f3c0 0080 	ubfx	r0, r0, #2, #1
34003ef0:	4770      	bx	lr
34003ef2:	bf00      	nop
34003ef4:	56028000 	.word	0x56028000

34003ef8 <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34003ef8:	4b02      	ldr	r3, [pc, #8]	@ (34003f04 <LL_RCC_PLL1_IsReady+0xc>)
34003efa:	6858      	ldr	r0, [r3, #4]
}
34003efc:	f3c0 2000 	ubfx	r0, r0, #8, #1
34003f00:	4770      	bx	lr
34003f02:	bf00      	nop
34003f04:	56028000 	.word	0x56028000

34003f08 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34003f08:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34003f0a:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003f0c:	4d1b      	ldr	r5, [pc, #108]	@ (34003f7c <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34003f0e:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003f10:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34003f12:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34003f14:	021b      	lsls	r3, r3, #8
34003f16:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
34003f1a:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34003f1c:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
34003f20:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34003f24:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34003f26:	429a      	cmp	r2, r3
34003f28:	d126      	bne.n	34003f78 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34003f2a:	4b15      	ldr	r3, [pc, #84]	@ (34003f80 <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34003f2c:	68ca      	ldr	r2, [r1, #12]
34003f2e:	58e3      	ldr	r3, [r4, r3]
34003f30:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34003f34:	4293      	cmp	r3, r2
34003f36:	d11f      	bne.n	34003f78 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34003f38:	4b12      	ldr	r3, [pc, #72]	@ (34003f84 <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34003f3a:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34003f3c:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
34003f40:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34003f42:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34003f46:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34003f4a:	429a      	cmp	r2, r3
34003f4c:	d114      	bne.n	34003f78 <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34003f4e:	4b0e      	ldr	r3, [pc, #56]	@ (34003f88 <RCC_PLL_IsNewConfig+0x80>)
34003f50:	685a      	ldr	r2, [r3, #4]
34003f52:	f44f 7380 	mov.w	r3, #256	@ 0x100
34003f56:	fa03 f000 	lsl.w	r0, r3, r0
34003f5a:	4390      	bics	r0, r2
34003f5c:	d00a      	beq.n	34003f74 <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34003f5e:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
34003f60:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
34003f64:	bf0c      	ite	eq
34003f66:	2301      	moveq	r3, #1
34003f68:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34003f6a:	6808      	ldr	r0, [r1, #0]
34003f6c:	1ac0      	subs	r0, r0, r3
34003f6e:	bf18      	it	ne
34003f70:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
34003f72:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
34003f74:	2302      	movs	r3, #2
34003f76:	e7f8      	b.n	34003f6a <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
34003f78:	2001      	movs	r0, #1
  return ret;
34003f7a:	e7fa      	b.n	34003f72 <RCC_PLL_IsNewConfig+0x6a>
34003f7c:	56028080 	.word	0x56028080
34003f80:	56028084 	.word	0x56028084
34003f84:	56028088 	.word	0x56028088
34003f88:	56028000 	.word	0x56028000

34003f8c <RCC_PLL_Enable>:
{
34003f8c:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34003f8e:	f44f 7480 	mov.w	r4, #256	@ 0x100
34003f92:	4e09      	ldr	r6, [pc, #36]	@ (34003fb8 <RCC_PLL_Enable+0x2c>)
34003f94:	4084      	lsls	r4, r0
34003f96:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
34003f9a:	f7fe f99f 	bl	340022dc <HAL_GetTick>
34003f9e:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34003fa0:	6873      	ldr	r3, [r6, #4]
34003fa2:	421c      	tst	r4, r3
34003fa4:	d001      	beq.n	34003faa <RCC_PLL_Enable+0x1e>
  return ret;
34003fa6:	2000      	movs	r0, #0
}
34003fa8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34003faa:	f7fe f997 	bl	340022dc <HAL_GetTick>
34003fae:	1b40      	subs	r0, r0, r5
34003fb0:	2801      	cmp	r0, #1
34003fb2:	d9f5      	bls.n	34003fa0 <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
34003fb4:	2003      	movs	r0, #3
34003fb6:	e7f7      	b.n	34003fa8 <RCC_PLL_Enable+0x1c>
34003fb8:	56028000 	.word	0x56028000

34003fbc <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
34003fbc:	680b      	ldr	r3, [r1, #0]
{
34003fbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
34003fc2:	2b02      	cmp	r3, #2
{
34003fc4:	4681      	mov	r9, r0
34003fc6:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003fc8:	4f83      	ldr	r7, [pc, #524]	@ (340041d8 <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34003fca:	4e84      	ldr	r6, [pc, #528]	@ (340041dc <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34003fcc:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
34003fd0:	f040 8099 	bne.w	34004106 <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34003fd4:	684b      	ldr	r3, [r1, #4]
34003fd6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34003fda:	d004      	beq.n	34003fe6 <RCC_PLL_Config+0x2a>
34003fdc:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34003fe0:	487f      	ldr	r0, [pc, #508]	@ (340041e0 <RCC_PLL_Config+0x224>)
34003fe2:	f7fd f8c3 	bl	3400116c <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
34003fe6:	68eb      	ldr	r3, [r5, #12]
34003fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34003fec:	d304      	bcc.n	34003ff8 <RCC_PLL_Config+0x3c>
34003fee:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34003ff2:	487b      	ldr	r0, [pc, #492]	@ (340041e0 <RCC_PLL_Config+0x224>)
34003ff4:	f7fd f8ba 	bl	3400116c <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
34003ff8:	68ab      	ldr	r3, [r5, #8]
34003ffa:	3b01      	subs	r3, #1
34003ffc:	2b3e      	cmp	r3, #62	@ 0x3e
34003ffe:	d904      	bls.n	3400400a <RCC_PLL_Config+0x4e>
34004000:	f240 71fc 	movw	r1, #2044	@ 0x7fc
34004004:	4876      	ldr	r0, [pc, #472]	@ (340041e0 <RCC_PLL_Config+0x224>)
34004006:	f7fd f8b1 	bl	3400116c <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
3400400a:	f640 12ba 	movw	r2, #2490	@ 0x9ba
3400400e:	692b      	ldr	r3, [r5, #16]
34004010:	3b0a      	subs	r3, #10
34004012:	4293      	cmp	r3, r2
34004014:	d904      	bls.n	34004020 <RCC_PLL_Config+0x64>
34004016:	f240 71fd 	movw	r1, #2045	@ 0x7fd
3400401a:	4871      	ldr	r0, [pc, #452]	@ (340041e0 <RCC_PLL_Config+0x224>)
3400401c:	f7fd f8a6 	bl	3400116c <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34004020:	696b      	ldr	r3, [r5, #20]
34004022:	3b01      	subs	r3, #1
34004024:	2b06      	cmp	r3, #6
34004026:	d904      	bls.n	34004032 <RCC_PLL_Config+0x76>
34004028:	f240 71fe 	movw	r1, #2046	@ 0x7fe
3400402c:	486c      	ldr	r0, [pc, #432]	@ (340041e0 <RCC_PLL_Config+0x224>)
3400402e:	f7fd f89d 	bl	3400116c <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34004032:	69ab      	ldr	r3, [r5, #24]
34004034:	3b01      	subs	r3, #1
34004036:	2b06      	cmp	r3, #6
34004038:	d904      	bls.n	34004044 <RCC_PLL_Config+0x88>
3400403a:	f240 71ff 	movw	r1, #2047	@ 0x7ff
3400403e:	4868      	ldr	r0, [pc, #416]	@ (340041e0 <RCC_PLL_Config+0x224>)
34004040:	f7fd f894 	bl	3400116c <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34004044:	f44f 7880 	mov.w	r8, #256	@ 0x100
34004048:	4b66      	ldr	r3, [pc, #408]	@ (340041e4 <RCC_PLL_Config+0x228>)
3400404a:	fa08 f809 	lsl.w	r8, r8, r9
3400404e:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
34004052:	f7fe f943 	bl	340022dc <HAL_GetTick>
34004056:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34004058:	f8df a194 	ldr.w	sl, [pc, #404]	@ 340041f0 <RCC_PLL_Config+0x234>
3400405c:	f8da 3004 	ldr.w	r3, [sl, #4]
34004060:	ea38 0303 	bics.w	r3, r8, r3
34004064:	d040      	beq.n	340040e8 <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34004066:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34004068:	495f      	ldr	r1, [pc, #380]	@ (340041e8 <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
3400406a:	f043 0304 	orr.w	r3, r3, #4
3400406e:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34004070:	59e3      	ldr	r3, [r4, r7]
34004072:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34004076:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34004078:	692b      	ldr	r3, [r5, #16]
3400407a:	68aa      	ldr	r2, [r5, #8]
3400407c:	021b      	lsls	r3, r3, #8
3400407e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
34004082:	686a      	ldr	r2, [r5, #4]
34004084:	59e0      	ldr	r0, [r4, r7]
34004086:	4313      	orrs	r3, r2
34004088:	4a58      	ldr	r2, [pc, #352]	@ (340041ec <RCC_PLL_Config+0x230>)
3400408a:	4002      	ands	r2, r0
3400408c:	4313      	orrs	r3, r2
3400408e:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34004090:	59a2      	ldr	r2, [r4, r6]
34004092:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
34004096:	061b      	lsls	r3, r3, #24
34004098:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
3400409c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
340040a0:	4313      	orrs	r3, r2
340040a2:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
340040a4:	5863      	ldr	r3, [r4, r1]
340040a6:	68ea      	ldr	r2, [r5, #12]
340040a8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
340040ac:	4313      	orrs	r3, r2
340040ae:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
340040b0:	59a3      	ldr	r3, [r4, r6]
340040b2:	f023 0308 	bic.w	r3, r3, #8
340040b6:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
340040b8:	68eb      	ldr	r3, [r5, #12]
340040ba:	b11b      	cbz	r3, 340040c4 <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
340040bc:	59a3      	ldr	r3, [r4, r6]
340040be:	f043 030a 	orr.w	r3, r3, #10
340040c2:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
340040c4:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340040c6:	4d4a      	ldr	r5, [pc, #296]	@ (340041f0 <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
340040c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
340040cc:	f043 0301 	orr.w	r3, r3, #1
340040d0:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340040d2:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
340040d6:	f7fe f901 	bl	340022dc <HAL_GetTick>
340040da:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
340040dc:	686b      	ldr	r3, [r5, #4]
340040de:	ea18 0f03 	tst.w	r8, r3
340040e2:	d00a      	beq.n	340040fa <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
340040e4:	2000      	movs	r0, #0
340040e6:	e006      	b.n	340040f6 <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340040e8:	f7fe f8f8 	bl	340022dc <HAL_GetTick>
340040ec:	eba0 0009 	sub.w	r0, r0, r9
340040f0:	2801      	cmp	r0, #1
340040f2:	d9b3      	bls.n	3400405c <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
340040f4:	2003      	movs	r0, #3
}
340040f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340040fa:	f7fe f8ef 	bl	340022dc <HAL_GetTick>
340040fe:	1b00      	subs	r0, r0, r4
34004100:	2801      	cmp	r0, #1
34004102:	d9eb      	bls.n	340040dc <RCC_PLL_Config+0x120>
34004104:	e7f6      	b.n	340040f4 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34004106:	2b03      	cmp	r3, #3
34004108:	d146      	bne.n	34004198 <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
3400410a:	684b      	ldr	r3, [r1, #4]
3400410c:	b37b      	cbz	r3, 3400416e <RCC_PLL_Config+0x1b2>
3400410e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004112:	d032      	beq.n	3400417a <RCC_PLL_Config+0x1be>
34004114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004118:	d032      	beq.n	34004180 <RCC_PLL_Config+0x1c4>
3400411a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400411e:	d00d      	beq.n	3400413c <RCC_PLL_Config+0x180>
34004120:	f640 013f 	movw	r1, #2111	@ 0x83f
34004124:	482e      	ldr	r0, [pc, #184]	@ (340041e0 <RCC_PLL_Config+0x224>)
34004126:	f7fd f821 	bl	3400116c <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
3400412a:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
3400412c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004130:	d026      	beq.n	34004180 <RCC_PLL_Config+0x1c4>
34004132:	d803      	bhi.n	3400413c <RCC_PLL_Config+0x180>
34004134:	b1db      	cbz	r3, 3400416e <RCC_PLL_Config+0x1b2>
34004136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400413a:	d01e      	beq.n	3400417a <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3400413c:	f44f 7680 	mov.w	r6, #256	@ 0x100
34004140:	4b28      	ldr	r3, [pc, #160]	@ (340041e4 <RCC_PLL_Config+0x228>)
34004142:	fa06 f609 	lsl.w	r6, r6, r9
34004146:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
34004148:	f7fe f8c8 	bl	340022dc <HAL_GetTick>
3400414c:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400414e:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 340041f0 <RCC_PLL_Config+0x234>
34004152:	f8d9 3004 	ldr.w	r3, [r9, #4]
34004156:	ea36 0303 	bics.w	r3, r6, r3
3400415a:	d016      	beq.n	3400418a <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
3400415c:	59e3      	ldr	r3, [r4, r7]
3400415e:	686a      	ldr	r2, [r5, #4]
34004160:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
34004164:	4313      	orrs	r3, r2
34004166:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400416a:	51e3      	str	r3, [r4, r7]
3400416c:	e7ba      	b.n	340040e4 <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
3400416e:	f7ff feb3 	bl	34003ed8 <LL_RCC_HSI_IsReady>
34004172:	2800      	cmp	r0, #0
34004174:	d1e2      	bne.n	3400413c <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
34004176:	2001      	movs	r0, #1
34004178:	e7bd      	b.n	340040f6 <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
3400417a:	f7ff feb5 	bl	34003ee8 <LL_RCC_MSI_IsReady>
3400417e:	e7f8      	b.n	34004172 <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004180:	4b1b      	ldr	r3, [pc, #108]	@ (340041f0 <RCC_PLL_Config+0x234>)
34004182:	685b      	ldr	r3, [r3, #4]
34004184:	06db      	lsls	r3, r3, #27
34004186:	d5f6      	bpl.n	34004176 <RCC_PLL_Config+0x1ba>
34004188:	e7d8      	b.n	3400413c <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400418a:	f7fe f8a7 	bl	340022dc <HAL_GetTick>
3400418e:	eba0 0008 	sub.w	r0, r0, r8
34004192:	2801      	cmp	r0, #1
34004194:	d9dd      	bls.n	34004152 <RCC_PLL_Config+0x196>
34004196:	e7ad      	b.n	340040f4 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34004198:	2b01      	cmp	r3, #1
3400419a:	d1a3      	bne.n	340040e4 <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3400419c:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
340041a0:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340041a2:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
340041a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
340041a8:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340041aa:	4b0e      	ldr	r3, [pc, #56]	@ (340041e4 <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340041ac:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 340041f0 <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340041b0:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
340041b2:	f7fe f893 	bl	340022dc <HAL_GetTick>
340041b6:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340041b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
340041bc:	ea35 0303 	bics.w	r3, r5, r3
340041c0:	d003      	beq.n	340041ca <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
340041c2:	59e3      	ldr	r3, [r4, r7]
340041c4:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
340041c8:	e7cf      	b.n	3400416a <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340041ca:	f7fe f887 	bl	340022dc <HAL_GetTick>
340041ce:	1b80      	subs	r0, r0, r6
340041d0:	2801      	cmp	r0, #1
340041d2:	d9f1      	bls.n	340041b8 <RCC_PLL_Config+0x1fc>
340041d4:	e78e      	b.n	340040f4 <RCC_PLL_Config+0x138>
340041d6:	bf00      	nop
340041d8:	56028080 	.word	0x56028080
340041dc:	56028088 	.word	0x56028088
340041e0:	340108ac 	.word	0x340108ac
340041e4:	56029000 	.word	0x56029000
340041e8:	56028084 	.word	0x56028084
340041ec:	8c0000ff 	.word	0x8c0000ff
340041f0:	56028000 	.word	0x56028000

340041f4 <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
340041f4:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
340041f8:	b508      	push	{r3, lr}
  switch (PLLSource1)
340041fa:	d02b      	beq.n	34004254 <RCC_IC_CheckPLLSources+0x60>
340041fc:	d80e      	bhi.n	3400421c <RCC_IC_CheckPLLSources+0x28>
340041fe:	b1b8      	cbz	r0, 34004230 <RCC_IC_CheckPLLSources+0x3c>
34004200:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34004204:	d01f      	beq.n	34004246 <RCC_IC_CheckPLLSources+0x52>
34004206:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
34004208:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
3400420c:	d044      	beq.n	34004298 <RCC_IC_CheckPLLSources+0xa4>
3400420e:	d828      	bhi.n	34004262 <RCC_IC_CheckPLLSources+0x6e>
34004210:	b389      	cbz	r1, 34004276 <RCC_IC_CheckPLLSources+0x82>
34004212:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
34004216:	d038      	beq.n	3400428a <RCC_IC_CheckPLLSources+0x96>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
34004218:	2200      	movs	r2, #0
3400421a:	e034      	b.n	34004286 <RCC_IC_CheckPLLSources+0x92>
  switch (PLLSource1)
3400421c:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34004220:	d1f1      	bne.n	34004206 <RCC_IC_CheckPLLSources+0x12>
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34004222:	4b21      	ldr	r3, [pc, #132]	@ (340042a8 <RCC_IC_CheckPLLSources+0xb4>)
34004224:	685a      	ldr	r2, [r3, #4]
34004226:	0512      	lsls	r2, r2, #20
34004228:	d405      	bmi.n	34004236 <RCC_IC_CheckPLLSources+0x42>
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3400422a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400422e:	e007      	b.n	34004240 <RCC_IC_CheckPLLSources+0x4c>
      if (LL_RCC_PLL1_IsReady() == 0U)
34004230:	f7ff fe62 	bl	34003ef8 <LL_RCC_PLL1_IsReady>
34004234:	b108      	cbz	r0, 3400423a <RCC_IC_CheckPLLSources+0x46>
  uint32_t ret = 1U;
34004236:	2201      	movs	r2, #1
34004238:	e7e6      	b.n	34004208 <RCC_IC_CheckPLLSources+0x14>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400423a:	4b1b      	ldr	r3, [pc, #108]	@ (340042a8 <RCC_IC_CheckPLLSources+0xb4>)
3400423c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34004240:	f3c2 62c0 	ubfx	r2, r2, #27, #1
34004244:	e7e0      	b.n	34004208 <RCC_IC_CheckPLLSources+0x14>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34004246:	4b18      	ldr	r3, [pc, #96]	@ (340042a8 <RCC_IC_CheckPLLSources+0xb4>)
34004248:	685a      	ldr	r2, [r3, #4]
3400424a:	0592      	lsls	r2, r2, #22
3400424c:	d4f3      	bmi.n	34004236 <RCC_IC_CheckPLLSources+0x42>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3400424e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34004252:	e7f5      	b.n	34004240 <RCC_IC_CheckPLLSources+0x4c>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34004254:	4b14      	ldr	r3, [pc, #80]	@ (340042a8 <RCC_IC_CheckPLLSources+0xb4>)
34004256:	685a      	ldr	r2, [r3, #4]
34004258:	0550      	lsls	r0, r2, #21
3400425a:	d4ec      	bmi.n	34004236 <RCC_IC_CheckPLLSources+0x42>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400425c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34004260:	e7ee      	b.n	34004240 <RCC_IC_CheckPLLSources+0x4c>
  switch (PLLSource2)
34004262:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
34004266:	d1d7      	bne.n	34004218 <RCC_IC_CheckPLLSources+0x24>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34004268:	4b0f      	ldr	r3, [pc, #60]	@ (340042a8 <RCC_IC_CheckPLLSources+0xb4>)
3400426a:	6859      	ldr	r1, [r3, #4]
3400426c:	0509      	lsls	r1, r1, #20
3400426e:	d40a      	bmi.n	34004286 <RCC_IC_CheckPLLSources+0x92>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34004270:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34004274:	e005      	b.n	34004282 <RCC_IC_CheckPLLSources+0x8e>
      if (LL_RCC_PLL1_IsReady() == 0U)
34004276:	f7ff fe3f 	bl	34003ef8 <LL_RCC_PLL1_IsReady>
3400427a:	b920      	cbnz	r0, 34004286 <RCC_IC_CheckPLLSources+0x92>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400427c:	4b0a      	ldr	r3, [pc, #40]	@ (340042a8 <RCC_IC_CheckPLLSources+0xb4>)
3400427e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004282:	0118      	lsls	r0, r3, #4
34004284:	d5c8      	bpl.n	34004218 <RCC_IC_CheckPLLSources+0x24>
      break;
  }

  return ret;
}
34004286:	4610      	mov	r0, r2
34004288:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3400428a:	4b07      	ldr	r3, [pc, #28]	@ (340042a8 <RCC_IC_CheckPLLSources+0xb4>)
3400428c:	6859      	ldr	r1, [r3, #4]
3400428e:	0589      	lsls	r1, r1, #22
34004290:	d4f9      	bmi.n	34004286 <RCC_IC_CheckPLLSources+0x92>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34004296:	e7f4      	b.n	34004282 <RCC_IC_CheckPLLSources+0x8e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34004298:	4b03      	ldr	r3, [pc, #12]	@ (340042a8 <RCC_IC_CheckPLLSources+0xb4>)
3400429a:	6859      	ldr	r1, [r3, #4]
3400429c:	0548      	lsls	r0, r1, #21
3400429e:	d4f2      	bmi.n	34004286 <RCC_IC_CheckPLLSources+0x92>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340042a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340042a4:	e7ed      	b.n	34004282 <RCC_IC_CheckPLLSources+0x8e>
340042a6:	bf00      	nop
340042a8:	56028000 	.word	0x56028000

340042ac <HAL_RCC_OscConfig>:
{
340042ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
340042b0:	4604      	mov	r4, r0
340042b2:	b918      	cbnz	r0, 340042bc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
340042b4:	2001      	movs	r0, #1
}
340042b6:	b003      	add	sp, #12
340042b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
340042bc:	6803      	ldr	r3, [r0, #0]
340042be:	b133      	cbz	r3, 340042ce <HAL_RCC_OscConfig+0x22>
340042c0:	06dd      	lsls	r5, r3, #27
340042c2:	d104      	bne.n	340042ce <HAL_RCC_OscConfig+0x22>
340042c4:	f44f 71b9 	mov.w	r1, #370	@ 0x172
340042c8:	4893      	ldr	r0, [pc, #588]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
340042ca:	f7fc ff4f 	bl	3400116c <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340042ce:	4b93      	ldr	r3, [pc, #588]	@ (3400451c <HAL_RCC_OscConfig+0x270>)
340042d0:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340042d2:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340042d4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340042d8:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340042dc:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340042e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340042e4:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340042e8:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
340042ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
340042f0:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
340042f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
340042f8:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
340042fa:	6823      	ldr	r3, [r4, #0]
340042fc:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
34004300:	07d8      	lsls	r0, r3, #31
34004302:	d463      	bmi.n	340043cc <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
34004304:	6823      	ldr	r3, [r4, #0]
34004306:	0799      	lsls	r1, r3, #30
34004308:	f100 80d4 	bmi.w	340044b4 <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
3400430c:	6823      	ldr	r3, [r4, #0]
3400430e:	06d8      	lsls	r0, r3, #27
34004310:	d522      	bpl.n	34004358 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
34004312:	69e3      	ldr	r3, [r4, #28]
34004314:	2b00      	cmp	r3, #0
34004316:	f000 8347 	beq.w	340049a8 <HAL_RCC_OscConfig+0x6fc>
3400431a:	2b04      	cmp	r3, #4
3400431c:	f000 834d 	beq.w	340049ba <HAL_RCC_OscConfig+0x70e>
34004320:	f240 2105 	movw	r1, #517	@ 0x205
34004324:	487c      	ldr	r0, [pc, #496]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
34004326:	f7fc ff21 	bl	3400116c <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3400432a:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
3400432e:	f040 8148 	bne.w	340045c2 <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34004332:	69e3      	ldr	r3, [r4, #28]
34004334:	2b00      	cmp	r3, #0
34004336:	d0bd      	beq.n	340042b4 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34004338:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400433a:	2b1f      	cmp	r3, #31
3400433c:	d904      	bls.n	34004348 <HAL_RCC_OscConfig+0x9c>
3400433e:	f44f 7106 	mov.w	r1, #536	@ 0x218
34004342:	4875      	ldr	r0, [pc, #468]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
34004344:	f7fc ff12 	bl	3400116c <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34004348:	4a74      	ldr	r2, [pc, #464]	@ (3400451c <HAL_RCC_OscConfig+0x270>)
3400434a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400434c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
3400434e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
34004352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004356:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34004358:	6823      	ldr	r3, [r4, #0]
3400435a:	0718      	lsls	r0, r3, #28
3400435c:	f100 8189 	bmi.w	34004672 <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34004360:	6823      	ldr	r3, [r4, #0]
34004362:	0759      	lsls	r1, r3, #29
34004364:	f100 81b4 	bmi.w	340046d0 <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
34004368:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400436a:	2b03      	cmp	r3, #3
3400436c:	d904      	bls.n	34004378 <HAL_RCC_OscConfig+0xcc>
3400436e:	f240 21a5 	movw	r1, #677	@ 0x2a5
34004372:	4869      	ldr	r0, [pc, #420]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
34004374:	f7fc fefa 	bl	3400116c <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34004378:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3400437a:	2f00      	cmp	r7, #0
3400437c:	f040 8210 	bne.w	340047a0 <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
34004380:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34004382:	2b03      	cmp	r3, #3
34004384:	d904      	bls.n	34004390 <HAL_RCC_OscConfig+0xe4>
34004386:	f240 21d3 	movw	r1, #723	@ 0x2d3
3400438a:	4863      	ldr	r0, [pc, #396]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
3400438c:	f7fc feee 	bl	3400116c <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34004390:	6c67      	ldr	r7, [r4, #68]	@ 0x44
34004392:	2f00      	cmp	r7, #0
34004394:	f040 8246 	bne.w	34004824 <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
34004398:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3400439a:	2b03      	cmp	r3, #3
3400439c:	d904      	bls.n	340043a8 <HAL_RCC_OscConfig+0xfc>
3400439e:	f240 3101 	movw	r1, #769	@ 0x301
340043a2:	485d      	ldr	r0, [pc, #372]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
340043a4:	f7fc fee2 	bl	3400116c <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
340043a8:	6e27      	ldr	r7, [r4, #96]	@ 0x60
340043aa:	2f00      	cmp	r7, #0
340043ac:	f040 827a 	bne.w	340048a4 <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
340043b0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340043b2:	2b03      	cmp	r3, #3
340043b4:	d904      	bls.n	340043c0 <HAL_RCC_OscConfig+0x114>
340043b6:	f240 312e 	movw	r1, #814	@ 0x32e
340043ba:	4857      	ldr	r0, [pc, #348]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
340043bc:	f7fc fed6 	bl	3400116c <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
340043c0:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
340043c2:	2f00      	cmp	r7, #0
340043c4:	f040 82b0 	bne.w	34004928 <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
340043c8:	2000      	movs	r0, #0
340043ca:	e774      	b.n	340042b6 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
340043cc:	6863      	ldr	r3, [r4, #4]
340043ce:	2b00      	cmp	r3, #0
340043d0:	f000 8313 	beq.w	340049fa <HAL_RCC_OscConfig+0x74e>
340043d4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
340043d8:	2a10      	cmp	r2, #16
340043da:	f000 8305 	beq.w	340049e8 <HAL_RCC_OscConfig+0x73c>
340043de:	4a50      	ldr	r2, [pc, #320]	@ (34004520 <HAL_RCC_OscConfig+0x274>)
340043e0:	4293      	cmp	r3, r2
340043e2:	f000 8301 	beq.w	340049e8 <HAL_RCC_OscConfig+0x73c>
340043e6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
340043ea:	484b      	ldr	r0, [pc, #300]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
340043ec:	f7fc febe 	bl	3400116c <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340043f0:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
340043f4:	d103      	bne.n	340043fe <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
340043f6:	6863      	ldr	r3, [r4, #4]
340043f8:	2b00      	cmp	r3, #0
340043fa:	d183      	bne.n	34004304 <HAL_RCC_OscConfig+0x58>
340043fc:	e75a      	b.n	340042b4 <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340043fe:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004402:	d0f8      	beq.n	340043f6 <HAL_RCC_OscConfig+0x14a>
34004404:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
34004408:	d101      	bne.n	3400440e <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3400440a:	05fa      	lsls	r2, r7, #23
3400440c:	d4f3      	bmi.n	340043f6 <HAL_RCC_OscConfig+0x14a>
3400440e:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
34004412:	d101      	bne.n	34004418 <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34004414:	05bb      	lsls	r3, r7, #22
34004416:	d4ee      	bmi.n	340043f6 <HAL_RCC_OscConfig+0x14a>
34004418:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
3400441c:	d101      	bne.n	34004422 <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3400441e:	0578      	lsls	r0, r7, #21
34004420:	d4e9      	bmi.n	340043f6 <HAL_RCC_OscConfig+0x14a>
34004422:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
34004426:	d101      	bne.n	3400442c <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34004428:	0539      	lsls	r1, r7, #20
3400442a:	d4e4      	bmi.n	340043f6 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3400442c:	6862      	ldr	r2, [r4, #4]
3400442e:	4b3b      	ldr	r3, [pc, #236]	@ (3400451c <HAL_RCC_OscConfig+0x270>)
34004430:	2a10      	cmp	r2, #16
34004432:	d114      	bne.n	3400445e <HAL_RCC_OscConfig+0x1b2>
34004434:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34004438:	f7fd ff50 	bl	340022dc <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
3400443c:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
3400443e:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34004440:	b35b      	cbz	r3, 3400449a <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34004442:	4b36      	ldr	r3, [pc, #216]	@ (3400451c <HAL_RCC_OscConfig+0x270>)
34004444:	685a      	ldr	r2, [r3, #4]
34004446:	06d2      	lsls	r2, r2, #27
34004448:	f53f af5c 	bmi.w	34004304 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3400444c:	f7fd ff46 	bl	340022dc <HAL_GetTick>
34004450:	9b01      	ldr	r3, [sp, #4]
34004452:	1ac0      	subs	r0, r0, r3
34004454:	2864      	cmp	r0, #100	@ 0x64
34004456:	4b31      	ldr	r3, [pc, #196]	@ (3400451c <HAL_RCC_OscConfig+0x270>)
34004458:	d9f4      	bls.n	34004444 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
3400445a:	2003      	movs	r0, #3
3400445c:	e72b      	b.n	340042b6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3400445e:	b93a      	cbnz	r2, 34004470 <HAL_RCC_OscConfig+0x1c4>
34004460:	2110      	movs	r1, #16
34004462:	4a30      	ldr	r2, [pc, #192]	@ (34004524 <HAL_RCC_OscConfig+0x278>)
34004464:	6011      	str	r1, [r2, #0]
34004466:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34004468:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
3400446c:	655a      	str	r2, [r3, #84]	@ 0x54
3400446e:	e7e3      	b.n	34004438 <HAL_RCC_OscConfig+0x18c>
34004470:	f248 0110 	movw	r1, #32784	@ 0x8010
34004474:	428a      	cmp	r2, r1
34004476:	d109      	bne.n	3400448c <HAL_RCC_OscConfig+0x1e0>
34004478:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3400447a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
3400447e:	655a      	str	r2, [r3, #84]	@ 0x54
34004480:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34004482:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34004486:	655a      	str	r2, [r3, #84]	@ 0x54
34004488:	2210      	movs	r2, #16
3400448a:	e7d3      	b.n	34004434 <HAL_RCC_OscConfig+0x188>
3400448c:	4924      	ldr	r1, [pc, #144]	@ (34004520 <HAL_RCC_OscConfig+0x274>)
3400448e:	428a      	cmp	r2, r1
34004490:	d1e6      	bne.n	34004460 <HAL_RCC_OscConfig+0x1b4>
34004492:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34004494:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
34004498:	e7f5      	b.n	34004486 <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
3400449a:	4b20      	ldr	r3, [pc, #128]	@ (3400451c <HAL_RCC_OscConfig+0x270>)
3400449c:	685a      	ldr	r2, [r3, #4]
3400449e:	06d3      	lsls	r3, r2, #27
340044a0:	f57f af30 	bpl.w	34004304 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340044a4:	f7fd ff1a 	bl	340022dc <HAL_GetTick>
340044a8:	9b01      	ldr	r3, [sp, #4]
340044aa:	1ac0      	subs	r0, r0, r3
340044ac:	2864      	cmp	r0, #100	@ 0x64
340044ae:	4b1b      	ldr	r3, [pc, #108]	@ (3400451c <HAL_RCC_OscConfig+0x270>)
340044b0:	d9f4      	bls.n	3400449c <HAL_RCC_OscConfig+0x1f0>
340044b2:	e7d2      	b.n	3400445a <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
340044b4:	68e3      	ldr	r3, [r4, #12]
340044b6:	2b00      	cmp	r3, #0
340044b8:	f000 8288 	beq.w	340049cc <HAL_RCC_OscConfig+0x720>
340044bc:	2b08      	cmp	r3, #8
340044be:	f000 828c 	beq.w	340049da <HAL_RCC_OscConfig+0x72e>
340044c2:	f240 11b5 	movw	r1, #437	@ 0x1b5
340044c6:	4814      	ldr	r0, [pc, #80]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
340044c8:	f7fc fe50 	bl	3400116c <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
340044cc:	bb66      	cbnz	r6, 34004528 <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
340044ce:	68e3      	ldr	r3, [r4, #12]
340044d0:	2b00      	cmp	r3, #0
340044d2:	f43f aeef 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
340044d6:	6923      	ldr	r3, [r4, #16]
340044d8:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
340044dc:	d004      	beq.n	340044e8 <HAL_RCC_OscConfig+0x23c>
340044de:	f240 11c7 	movw	r1, #455	@ 0x1c7
340044e2:	480d      	ldr	r0, [pc, #52]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
340044e4:	f7fc fe42 	bl	3400116c <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
340044e8:	6963      	ldr	r3, [r4, #20]
340044ea:	2b7f      	cmp	r3, #127	@ 0x7f
340044ec:	d904      	bls.n	340044f8 <HAL_RCC_OscConfig+0x24c>
340044ee:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
340044f2:	4809      	ldr	r0, [pc, #36]	@ (34004518 <HAL_RCC_OscConfig+0x26c>)
340044f4:	f7fc fe3a 	bl	3400116c <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
340044f8:	4a08      	ldr	r2, [pc, #32]	@ (3400451c <HAL_RCC_OscConfig+0x270>)
340044fa:	6921      	ldr	r1, [r4, #16]
340044fc:	6c93      	ldr	r3, [r2, #72]	@ 0x48
340044fe:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
34004502:	430b      	orrs	r3, r1
34004504:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34004506:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34004508:	6961      	ldr	r1, [r4, #20]
3400450a:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
3400450e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004512:	6493      	str	r3, [r2, #72]	@ 0x48
}
34004514:	e6fa      	b.n	3400430c <HAL_RCC_OscConfig+0x60>
34004516:	bf00      	nop
34004518:	340108ac 	.word	0x340108ac
3400451c:	56028000 	.word	0x56028000
34004520:	00018010 	.word	0x00018010
34004524:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34004528:	2d00      	cmp	r5, #0
3400452a:	d0d0      	beq.n	340044ce <HAL_RCC_OscConfig+0x222>
3400452c:	f1bb 0f00 	cmp.w	fp, #0
34004530:	d101      	bne.n	34004536 <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34004532:	05f8      	lsls	r0, r7, #23
34004534:	d4cb      	bmi.n	340044ce <HAL_RCC_OscConfig+0x222>
34004536:	f1ba 0f00 	cmp.w	sl, #0
3400453a:	d101      	bne.n	34004540 <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3400453c:	05b9      	lsls	r1, r7, #22
3400453e:	d4c6      	bmi.n	340044ce <HAL_RCC_OscConfig+0x222>
34004540:	f1b9 0f00 	cmp.w	r9, #0
34004544:	d101      	bne.n	3400454a <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34004546:	057a      	lsls	r2, r7, #21
34004548:	d4c1      	bmi.n	340044ce <HAL_RCC_OscConfig+0x222>
3400454a:	f1b8 0f00 	cmp.w	r8, #0
3400454e:	d101      	bne.n	34004554 <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34004550:	053b      	lsls	r3, r7, #20
34004552:	d4bc      	bmi.n	340044ce <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34004554:	68e3      	ldr	r3, [r4, #12]
34004556:	b313      	cbz	r3, 3400459e <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34004558:	6923      	ldr	r3, [r4, #16]
3400455a:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
3400455e:	d004      	beq.n	3400456a <HAL_RCC_OscConfig+0x2be>
34004560:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
34004564:	48ab      	ldr	r0, [pc, #684]	@ (34004814 <HAL_RCC_OscConfig+0x568>)
34004566:	f7fc fe01 	bl	3400116c <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
3400456a:	6963      	ldr	r3, [r4, #20]
3400456c:	2b7f      	cmp	r3, #127	@ 0x7f
3400456e:	d904      	bls.n	3400457a <HAL_RCC_OscConfig+0x2ce>
34004570:	f240 11d7 	movw	r1, #471	@ 0x1d7
34004574:	48a7      	ldr	r0, [pc, #668]	@ (34004814 <HAL_RCC_OscConfig+0x568>)
34004576:	f7fc fdf9 	bl	3400116c <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
3400457a:	2208      	movs	r2, #8
3400457c:	4ba6      	ldr	r3, [pc, #664]	@ (34004818 <HAL_RCC_OscConfig+0x56c>)
3400457e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34004582:	f7fd feab 	bl	340022dc <HAL_GetTick>
34004586:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
34004588:	f7ff fca6 	bl	34003ed8 <LL_RCC_HSI_IsReady>
3400458c:	2800      	cmp	r0, #0
3400458e:	d1b3      	bne.n	340044f8 <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34004590:	f7fd fea4 	bl	340022dc <HAL_GetTick>
34004594:	9b01      	ldr	r3, [sp, #4]
34004596:	1ac0      	subs	r0, r0, r3
34004598:	2801      	cmp	r0, #1
3400459a:	d9f5      	bls.n	34004588 <HAL_RCC_OscConfig+0x2dc>
3400459c:	e75d      	b.n	3400445a <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
3400459e:	2208      	movs	r2, #8
340045a0:	4b9e      	ldr	r3, [pc, #632]	@ (3400481c <HAL_RCC_OscConfig+0x570>)
340045a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
340045a4:	f7fd fe9a 	bl	340022dc <HAL_GetTick>
340045a8:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
340045aa:	f7ff fc95 	bl	34003ed8 <LL_RCC_HSI_IsReady>
340045ae:	2800      	cmp	r0, #0
340045b0:	f43f aeac 	beq.w	3400430c <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
340045b4:	f7fd fe92 	bl	340022dc <HAL_GetTick>
340045b8:	9b01      	ldr	r3, [sp, #4]
340045ba:	1ac0      	subs	r0, r0, r3
340045bc:	2801      	cmp	r0, #1
340045be:	d9f4      	bls.n	340045aa <HAL_RCC_OscConfig+0x2fe>
340045c0:	e74b      	b.n	3400445a <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
340045c2:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340045c6:	f43f aeb4 	beq.w	34004332 <HAL_RCC_OscConfig+0x86>
340045ca:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
340045ce:	d102      	bne.n	340045d6 <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340045d0:	05f9      	lsls	r1, r7, #23
340045d2:	f53f aeae 	bmi.w	34004332 <HAL_RCC_OscConfig+0x86>
340045d6:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
340045da:	d102      	bne.n	340045e2 <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340045dc:	05ba      	lsls	r2, r7, #22
340045de:	f53f aea8 	bmi.w	34004332 <HAL_RCC_OscConfig+0x86>
340045e2:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
340045e6:	d102      	bne.n	340045ee <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340045e8:	057b      	lsls	r3, r7, #21
340045ea:	f53f aea2 	bmi.w	34004332 <HAL_RCC_OscConfig+0x86>
340045ee:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
340045f2:	d102      	bne.n	340045fa <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340045f4:	053f      	lsls	r7, r7, #20
340045f6:	f53f ae9c 	bmi.w	34004332 <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
340045fa:	69e3      	ldr	r3, [r4, #28]
340045fc:	b343      	cbz	r3, 34004650 <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
340045fe:	6a23      	ldr	r3, [r4, #32]
34004600:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
34004604:	d004      	beq.n	34004610 <HAL_RCC_OscConfig+0x364>
34004606:	f44f 7109 	mov.w	r1, #548	@ 0x224
3400460a:	4882      	ldr	r0, [pc, #520]	@ (34004814 <HAL_RCC_OscConfig+0x568>)
3400460c:	f7fc fdae 	bl	3400116c <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34004610:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004612:	2b1f      	cmp	r3, #31
34004614:	d904      	bls.n	34004620 <HAL_RCC_OscConfig+0x374>
34004616:	f240 2125 	movw	r1, #549	@ 0x225
3400461a:	487e      	ldr	r0, [pc, #504]	@ (34004814 <HAL_RCC_OscConfig+0x568>)
3400461c:	f7fc fda6 	bl	3400116c <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34004620:	4a7d      	ldr	r2, [pc, #500]	@ (34004818 <HAL_RCC_OscConfig+0x56c>)
34004622:	6a21      	ldr	r1, [r4, #32]
34004624:	6c53      	ldr	r3, [r2, #68]	@ 0x44
34004626:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
3400462a:	430b      	orrs	r3, r1
3400462c:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
3400462e:	2304      	movs	r3, #4
34004630:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34004634:	f7fd fe52 	bl	340022dc <HAL_GetTick>
34004638:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
3400463a:	f7ff fc55 	bl	34003ee8 <LL_RCC_MSI_IsReady>
3400463e:	2800      	cmp	r0, #0
34004640:	f47f ae82 	bne.w	34004348 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34004644:	f7fd fe4a 	bl	340022dc <HAL_GetTick>
34004648:	1bc0      	subs	r0, r0, r7
3400464a:	2801      	cmp	r0, #1
3400464c:	d9f5      	bls.n	3400463a <HAL_RCC_OscConfig+0x38e>
3400464e:	e704      	b.n	3400445a <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34004650:	2204      	movs	r2, #4
34004652:	4b72      	ldr	r3, [pc, #456]	@ (3400481c <HAL_RCC_OscConfig+0x570>)
34004654:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34004656:	f7fd fe41 	bl	340022dc <HAL_GetTick>
3400465a:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
3400465c:	f7ff fc44 	bl	34003ee8 <LL_RCC_MSI_IsReady>
34004660:	2800      	cmp	r0, #0
34004662:	f43f ae79 	beq.w	34004358 <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34004666:	f7fd fe39 	bl	340022dc <HAL_GetTick>
3400466a:	1bc0      	subs	r0, r0, r7
3400466c:	2801      	cmp	r0, #1
3400466e:	d9f5      	bls.n	3400465c <HAL_RCC_OscConfig+0x3b0>
34004670:	e6f3      	b.n	3400445a <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
34004672:	69a3      	ldr	r3, [r4, #24]
34004674:	2b01      	cmp	r3, #1
34004676:	d904      	bls.n	34004682 <HAL_RCC_OscConfig+0x3d6>
34004678:	f240 2155 	movw	r1, #597	@ 0x255
3400467c:	4865      	ldr	r0, [pc, #404]	@ (34004814 <HAL_RCC_OscConfig+0x568>)
3400467e:	f7fc fd75 	bl	3400116c <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34004682:	69a2      	ldr	r2, [r4, #24]
34004684:	2301      	movs	r3, #1
34004686:	b18a      	cbz	r2, 340046ac <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34004688:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 34004818 <HAL_RCC_OscConfig+0x56c>
3400468c:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34004690:	f7fd fe24 	bl	340022dc <HAL_GetTick>
34004694:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34004696:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
3400469a:	07da      	lsls	r2, r3, #31
3400469c:	f53f ae60 	bmi.w	34004360 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
340046a0:	f7fd fe1c 	bl	340022dc <HAL_GetTick>
340046a4:	1bc0      	subs	r0, r0, r7
340046a6:	2801      	cmp	r0, #1
340046a8:	d9f5      	bls.n	34004696 <HAL_RCC_OscConfig+0x3ea>
340046aa:	e6d6      	b.n	3400445a <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340046ac:	4a5b      	ldr	r2, [pc, #364]	@ (3400481c <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340046ae:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 34004818 <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340046b2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
340046b4:	f7fd fe12 	bl	340022dc <HAL_GetTick>
340046b8:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340046ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
340046be:	07db      	lsls	r3, r3, #31
340046c0:	f57f ae4e 	bpl.w	34004360 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
340046c4:	f7fd fe0a 	bl	340022dc <HAL_GetTick>
340046c8:	1bc0      	subs	r0, r0, r7
340046ca:	2801      	cmp	r0, #1
340046cc:	d9f5      	bls.n	340046ba <HAL_RCC_OscConfig+0x40e>
340046ce:	e6c4      	b.n	3400445a <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
340046d0:	68a3      	ldr	r3, [r4, #8]
340046d2:	f033 0202 	bics.w	r2, r3, #2
340046d6:	d00a      	beq.n	340046ee <HAL_RCC_OscConfig+0x442>
340046d8:	f248 0202 	movw	r2, #32770	@ 0x8002
340046dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340046e0:	4293      	cmp	r3, r2
340046e2:	d004      	beq.n	340046ee <HAL_RCC_OscConfig+0x442>
340046e4:	f44f 7120 	mov.w	r1, #640	@ 0x280
340046e8:	484a      	ldr	r0, [pc, #296]	@ (34004814 <HAL_RCC_OscConfig+0x568>)
340046ea:	f7fc fd3f 	bl	3400116c <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
340046ee:	68a3      	ldr	r3, [r4, #8]
340046f0:	4f49      	ldr	r7, [pc, #292]	@ (34004818 <HAL_RCC_OscConfig+0x56c>)
340046f2:	2b02      	cmp	r3, #2
340046f4:	d113      	bne.n	3400471e <HAL_RCC_OscConfig+0x472>
340046f6:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
340046fa:	f7fd fdef 	bl	340022dc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340046fe:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
34004702:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34004704:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 34004818 <HAL_RCC_OscConfig+0x56c>
34004708:	f8d9 3004 	ldr.w	r3, [r9, #4]
3400470c:	0798      	lsls	r0, r3, #30
3400470e:	f53f ae2b 	bmi.w	34004368 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004712:	f7fd fde3 	bl	340022dc <HAL_GetTick>
34004716:	1bc3      	subs	r3, r0, r7
34004718:	4543      	cmp	r3, r8
3400471a:	d9f5      	bls.n	34004708 <HAL_RCC_OscConfig+0x45c>
3400471c:	e69d      	b.n	3400445a <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3400471e:	b9d3      	cbnz	r3, 34004756 <HAL_RCC_OscConfig+0x4aa>
34004720:	2202      	movs	r2, #2
34004722:	4b3e      	ldr	r3, [pc, #248]	@ (3400481c <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004724:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004728:	601a      	str	r2, [r3, #0]
3400472a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400472c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004730:	643b      	str	r3, [r7, #64]	@ 0x40
34004732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004734:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34004738:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
3400473a:	f7fd fdcf 	bl	340022dc <HAL_GetTick>
3400473e:	4680      	mov	r8, r0
34004740:	687b      	ldr	r3, [r7, #4]
34004742:	0799      	lsls	r1, r3, #30
34004744:	f57f ae10 	bpl.w	34004368 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004748:	f7fd fdc8 	bl	340022dc <HAL_GetTick>
3400474c:	eba0 0308 	sub.w	r3, r0, r8
34004750:	454b      	cmp	r3, r9
34004752:	d9f5      	bls.n	34004740 <HAL_RCC_OscConfig+0x494>
34004754:	e681      	b.n	3400445a <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34004756:	f248 0202 	movw	r2, #32770	@ 0x8002
3400475a:	4293      	cmp	r3, r2
3400475c:	d109      	bne.n	34004772 <HAL_RCC_OscConfig+0x4c6>
3400475e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34004764:	643b      	str	r3, [r7, #64]	@ 0x40
34004766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400476c:	643b      	str	r3, [r7, #64]	@ 0x40
3400476e:	2302      	movs	r3, #2
34004770:	e7c1      	b.n	340046f6 <HAL_RCC_OscConfig+0x44a>
34004772:	4a2b      	ldr	r2, [pc, #172]	@ (34004820 <HAL_RCC_OscConfig+0x574>)
34004774:	4293      	cmp	r3, r2
34004776:	d107      	bne.n	34004788 <HAL_RCC_OscConfig+0x4dc>
34004778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400477a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400477e:	643b      	str	r3, [r7, #64]	@ 0x40
34004780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34004786:	e7f1      	b.n	3400476c <HAL_RCC_OscConfig+0x4c0>
34004788:	2202      	movs	r2, #2
3400478a:	4b24      	ldr	r3, [pc, #144]	@ (3400481c <HAL_RCC_OscConfig+0x570>)
3400478c:	601a      	str	r2, [r3, #0]
3400478e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004790:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34004794:	643b      	str	r3, [r7, #64]	@ 0x40
34004796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34004798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400479c:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
3400479e:	e7ac      	b.n	340046fa <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
340047a0:	2000      	movs	r0, #0
340047a2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
340047a6:	f7ff fbaf 	bl	34003f08 <RCC_PLL_IsNewConfig>
340047aa:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
340047ac:	f7ff fba4 	bl	34003ef8 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
340047b0:	2a01      	cmp	r2, #1
340047b2:	d125      	bne.n	34004800 <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340047b4:	4b18      	ldr	r3, [pc, #96]	@ (34004818 <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
340047b6:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
340047ba:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340047be:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340047c2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340047c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340047ca:	d103      	bne.n	340047d4 <HAL_RCC_OscConfig+0x528>
340047cc:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
340047d0:	f43f ad70 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
340047d4:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
340047d8:	d10b      	bne.n	340047f2 <HAL_RCC_OscConfig+0x546>
340047da:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
340047de:	f43f ad69 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
340047e2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
340047e6:	f43f ad65 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
340047ea:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
340047ee:	f43f ad61 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
340047f2:	2000      	movs	r0, #0
340047f4:	f7ff fbe2 	bl	34003fbc <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
340047f8:	2800      	cmp	r0, #0
340047fa:	f43f adc1 	beq.w	34004380 <HAL_RCC_OscConfig+0xd4>
340047fe:	e559      	b.n	340042b4 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34004800:	2f02      	cmp	r7, #2
34004802:	f47f adbd 	bne.w	34004380 <HAL_RCC_OscConfig+0xd4>
34004806:	2800      	cmp	r0, #0
34004808:	f47f adba 	bne.w	34004380 <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
3400480c:	f7ff fbbe 	bl	34003f8c <RCC_PLL_Enable>
34004810:	e7f2      	b.n	340047f8 <HAL_RCC_OscConfig+0x54c>
34004812:	bf00      	nop
34004814:	340108ac 	.word	0x340108ac
34004818:	56028000 	.word	0x56028000
3400481c:	56029000 	.word	0x56029000
34004820:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34004824:	2001      	movs	r0, #1
34004826:	f104 0144 	add.w	r1, r4, #68	@ 0x44
3400482a:	f7ff fb6d 	bl	34003f08 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3400482e:	4b77      	ldr	r3, [pc, #476]	@ (34004a0c <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34004830:	2801      	cmp	r0, #1
34004832:	685a      	ldr	r2, [r3, #4]
34004834:	d12c      	bne.n	34004890 <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34004836:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400483a:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400483e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004842:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004846:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400484a:	d105      	bne.n	34004858 <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400484c:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34004850:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
34004854:	f43f ad2e 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34004858:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
3400485c:	d111      	bne.n	34004882 <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400485e:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004862:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34004866:	f43f ad25 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3400486a:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
3400486e:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34004872:	f43f ad1f 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004876:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
3400487a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400487e:	f43f ad19 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34004882:	2001      	movs	r0, #1
34004884:	f7ff fb9a 	bl	34003fbc <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34004888:	2800      	cmp	r0, #0
3400488a:	f43f ad85 	beq.w	34004398 <HAL_RCC_OscConfig+0xec>
3400488e:	e511      	b.n	340042b4 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34004890:	2f02      	cmp	r7, #2
34004892:	f47f ad81 	bne.w	34004398 <HAL_RCC_OscConfig+0xec>
34004896:	0592      	lsls	r2, r2, #22
34004898:	f53f ad7e 	bmi.w	34004398 <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
3400489c:	2001      	movs	r0, #1
3400489e:	f7ff fb75 	bl	34003f8c <RCC_PLL_Enable>
340048a2:	e7f1      	b.n	34004888 <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
340048a4:	2002      	movs	r0, #2
340048a6:	f104 0160 	add.w	r1, r4, #96	@ 0x60
340048aa:	f7ff fb2d 	bl	34003f08 <RCC_PLL_IsNewConfig>
340048ae:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
340048b0:	f7ff fb22 	bl	34003ef8 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
340048b4:	2a01      	cmp	r2, #1
340048b6:	d12d      	bne.n	34004914 <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340048b8:	4b54      	ldr	r3, [pc, #336]	@ (34004a0c <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
340048ba:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
340048be:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340048c2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340048c6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340048ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340048ce:	d105      	bne.n	340048dc <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340048d0:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
340048d4:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
340048d8:	f43f acec 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
340048dc:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
340048e0:	d111      	bne.n	34004906 <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340048e2:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340048e6:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
340048ea:	f43f ace3 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340048ee:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
340048f2:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
340048f6:	f43f acdd 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340048fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
340048fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004902:	f43f acd7 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34004906:	2002      	movs	r0, #2
34004908:	f7ff fb58 	bl	34003fbc <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
3400490c:	2800      	cmp	r0, #0
3400490e:	f43f ad4f 	beq.w	340043b0 <HAL_RCC_OscConfig+0x104>
34004912:	e4cf      	b.n	340042b4 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34004914:	2f02      	cmp	r7, #2
34004916:	f47f ad4b 	bne.w	340043b0 <HAL_RCC_OscConfig+0x104>
3400491a:	2800      	cmp	r0, #0
3400491c:	f47f ad48 	bne.w	340043b0 <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34004920:	4638      	mov	r0, r7
34004922:	f7ff fb33 	bl	34003f8c <RCC_PLL_Enable>
34004926:	e7f1      	b.n	3400490c <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34004928:	2003      	movs	r0, #3
3400492a:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
3400492e:	f7ff faeb 	bl	34003f08 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34004932:	4b36      	ldr	r3, [pc, #216]	@ (34004a0c <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34004934:	2801      	cmp	r0, #1
34004936:	685a      	ldr	r2, [r3, #4]
34004938:	d12c      	bne.n	34004994 <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
3400493a:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400493e:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004942:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004946:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400494a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400494e:	d105      	bne.n	3400495c <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004950:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34004954:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34004958:	f43f acac 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
3400495c:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34004960:	d111      	bne.n	34004986 <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004962:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004966:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3400496a:	f43f aca3 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3400496e:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34004972:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34004976:	f43f ac9d 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400497a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
3400497e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004982:	f43f ac97 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34004986:	2003      	movs	r0, #3
34004988:	f7ff fb18 	bl	34003fbc <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
3400498c:	3800      	subs	r0, #0
3400498e:	bf18      	it	ne
34004990:	2001      	movne	r0, #1
34004992:	e490      	b.n	340042b6 <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34004994:	2f02      	cmp	r7, #2
34004996:	f47f ad17 	bne.w	340043c8 <HAL_RCC_OscConfig+0x11c>
3400499a:	0513      	lsls	r3, r2, #20
3400499c:	f53f ad14 	bmi.w	340043c8 <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
340049a0:	2003      	movs	r0, #3
340049a2:	f7ff faf3 	bl	34003f8c <RCC_PLL_Enable>
340049a6:	e7f1      	b.n	3400498c <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
340049a8:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
340049ac:	f43f ac82 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
340049b0:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340049b4:	f47f ae09 	bne.w	340045ca <HAL_RCC_OscConfig+0x31e>
340049b8:	e47c      	b.n	340042b4 <HAL_RCC_OscConfig+0x8>
340049ba:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
340049be:	f43f acbb 	beq.w	34004338 <HAL_RCC_OscConfig+0x8c>
340049c2:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340049c6:	f47f ae00 	bne.w	340045ca <HAL_RCC_OscConfig+0x31e>
340049ca:	e4b5      	b.n	34004338 <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
340049cc:	2e00      	cmp	r6, #0
340049ce:	f43f ac71 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
340049d2:	2d00      	cmp	r5, #0
340049d4:	f47f adaa 	bne.w	3400452c <HAL_RCC_OscConfig+0x280>
340049d8:	e46c      	b.n	340042b4 <HAL_RCC_OscConfig+0x8>
340049da:	2e00      	cmp	r6, #0
340049dc:	f43f ad7b 	beq.w	340044d6 <HAL_RCC_OscConfig+0x22a>
340049e0:	2d00      	cmp	r5, #0
340049e2:	f43f ad78 	beq.w	340044d6 <HAL_RCC_OscConfig+0x22a>
340049e6:	e5a1      	b.n	3400452c <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340049e8:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
340049ec:	f43f ac8a 	beq.w	34004304 <HAL_RCC_OscConfig+0x58>
340049f0:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
340049f4:	f47f ad06 	bne.w	34004404 <HAL_RCC_OscConfig+0x158>
340049f8:	e484      	b.n	34004304 <HAL_RCC_OscConfig+0x58>
340049fa:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
340049fe:	f43f ac59 	beq.w	340042b4 <HAL_RCC_OscConfig+0x8>
34004a02:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34004a06:	f47f acfd 	bne.w	34004404 <HAL_RCC_OscConfig+0x158>
34004a0a:	e453      	b.n	340042b4 <HAL_RCC_OscConfig+0x8>
34004a0c:	56028000 	.word	0x56028000

34004a10 <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004a10:	4a22      	ldr	r2, [pc, #136]	@ (34004a9c <HAL_RCC_GetCpuClockFreq+0x8c>)
{
34004a12:	b510      	push	{r4, lr}
34004a14:	6a13      	ldr	r3, [r2, #32]
34004a16:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
34004a1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34004a1e:	d03a      	beq.n	34004a96 <HAL_RCC_GetCpuClockFreq+0x86>
34004a20:	d805      	bhi.n	34004a2e <HAL_RCC_GetCpuClockFreq+0x1e>
34004a22:	b1e3      	cbz	r3, 34004a5e <HAL_RCC_GetCpuClockFreq+0x4e>
34004a24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34004a28:	d01f      	beq.n	34004a6a <HAL_RCC_GetCpuClockFreq+0x5a>
34004a2a:	2000      	movs	r0, #0
34004a2c:	e01c      	b.n	34004a68 <HAL_RCC_GetCpuClockFreq+0x58>
34004a2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34004a32:	d1fa      	bne.n	34004a2a <HAL_RCC_GetCpuClockFreq+0x1a>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004a34:	f8d2 00c4 	ldr.w	r0, [r2, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004a38:	f8d2 30c4 	ldr.w	r3, [r2, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004a3c:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004a40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34004a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34004a48:	f100 0401 	add.w	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004a4c:	d020      	beq.n	34004a90 <HAL_RCC_GetCpuClockFreq+0x80>
34004a4e:	d814      	bhi.n	34004a7a <HAL_RCC_GetCpuClockFreq+0x6a>
34004a50:	b1cb      	cbz	r3, 34004a86 <HAL_RCC_GetCpuClockFreq+0x76>
34004a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004a56:	d1e8      	bne.n	34004a2a <HAL_RCC_GetCpuClockFreq+0x1a>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34004a58:	f003 fc1e 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
34004a5c:	e015      	b.n	34004a8a <HAL_RCC_GetCpuClockFreq+0x7a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34004a5e:	6c93      	ldr	r3, [r2, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34004a60:	480f      	ldr	r0, [pc, #60]	@ (34004aa0 <HAL_RCC_GetCpuClockFreq+0x90>)
34004a62:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34004a66:	40d8      	lsrs	r0, r3
}
34004a68:	bd10      	pop	{r4, pc}
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34004a6a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        frequency = MSI_VALUE;
34004a6c:	480d      	ldr	r0, [pc, #52]	@ (34004aa4 <HAL_RCC_GetCpuClockFreq+0x94>)
34004a6e:	f413 7f00 	tst.w	r3, #512	@ 0x200
34004a72:	4b0d      	ldr	r3, [pc, #52]	@ (34004aa8 <HAL_RCC_GetCpuClockFreq+0x98>)
34004a74:	bf08      	it	eq
34004a76:	4618      	moveq	r0, r3
34004a78:	e7f6      	b.n	34004a68 <HAL_RCC_GetCpuClockFreq+0x58>
34004a7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004a7e:	d1d4      	bne.n	34004a2a <HAL_RCC_GetCpuClockFreq+0x1a>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34004a80:	f003 fc8a 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
34004a84:	e001      	b.n	34004a8a <HAL_RCC_GetCpuClockFreq+0x7a>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34004a86:	f003 fbc7 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34004a8a:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34004a8e:	e7eb      	b.n	34004a68 <HAL_RCC_GetCpuClockFreq+0x58>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34004a90:	f003 fc42 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
34004a94:	e7f9      	b.n	34004a8a <HAL_RCC_GetCpuClockFreq+0x7a>
  switch (LL_RCC_GetCpuClkSource())
34004a96:	4805      	ldr	r0, [pc, #20]	@ (34004aac <HAL_RCC_GetCpuClockFreq+0x9c>)
34004a98:	e7e6      	b.n	34004a68 <HAL_RCC_GetCpuClockFreq+0x58>
34004a9a:	bf00      	nop
34004a9c:	56028000 	.word	0x56028000
34004aa0:	03d09000 	.word	0x03d09000
34004aa4:	00f42400 	.word	0x00f42400
34004aa8:	003d0900 	.word	0x003d0900
34004aac:	02dc6c00 	.word	0x02dc6c00

34004ab0 <HAL_RCC_ClockConfig>:
{
34004ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
34004ab4:	4604      	mov	r4, r0
34004ab6:	b910      	cbnz	r0, 34004abe <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
34004ab8:	2001      	movs	r0, #1
}
34004aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34004abe:	6803      	ldr	r3, [r0, #0]
34004ac0:	2b7f      	cmp	r3, #127	@ 0x7f
34004ac2:	d904      	bls.n	34004ace <HAL_RCC_ClockConfig+0x1e>
34004ac4:	f240 317e 	movw	r1, #894	@ 0x37e
34004ac8:	4893      	ldr	r0, [pc, #588]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004aca:	f7fc fb4f 	bl	3400116c <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34004ace:	6823      	ldr	r3, [r4, #0]
34004ad0:	071f      	lsls	r7, r3, #28
34004ad2:	d513      	bpl.n	34004afc <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34004ad4:	6923      	ldr	r3, [r4, #16]
34004ad6:	2b07      	cmp	r3, #7
34004ad8:	d904      	bls.n	34004ae4 <HAL_RCC_ClockConfig+0x34>
34004ada:	f240 3185 	movw	r1, #901	@ 0x385
34004ade:	488e      	ldr	r0, [pc, #568]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004ae0:	f7fc fb44 	bl	3400116c <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34004ae4:	4a8d      	ldr	r2, [pc, #564]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004ae6:	6921      	ldr	r1, [r4, #16]
34004ae8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004aea:	f003 0307 	and.w	r3, r3, #7
34004aee:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34004af0:	bf81      	itttt	hi
34004af2:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004af4:	f023 0307 	bichi.w	r3, r3, #7
34004af8:	430b      	orrhi	r3, r1
34004afa:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34004afc:	6823      	ldr	r3, [r4, #0]
34004afe:	06de      	lsls	r6, r3, #27
34004b00:	d516      	bpl.n	34004b30 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34004b02:	6963      	ldr	r3, [r4, #20]
34004b04:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004b08:	d006      	beq.n	34004b18 <HAL_RCC_ClockConfig+0x68>
34004b0a:	2b40      	cmp	r3, #64	@ 0x40
34004b0c:	d004      	beq.n	34004b18 <HAL_RCC_ClockConfig+0x68>
34004b0e:	f240 318f 	movw	r1, #911	@ 0x38f
34004b12:	4881      	ldr	r0, [pc, #516]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004b14:	f7fc fb2a 	bl	3400116c <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004b18:	4a80      	ldr	r2, [pc, #512]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004b1a:	6961      	ldr	r1, [r4, #20]
34004b1c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004b1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34004b22:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34004b24:	bf81      	itttt	hi
34004b26:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004b28:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
34004b2c:	430b      	orrhi	r3, r1
34004b2e:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004b30:	6823      	ldr	r3, [r4, #0]
34004b32:	069d      	lsls	r5, r3, #26
34004b34:	d517      	bpl.n	34004b66 <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34004b36:	69a3      	ldr	r3, [r4, #24]
34004b38:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004b3c:	d007      	beq.n	34004b4e <HAL_RCC_ClockConfig+0x9e>
34004b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34004b42:	d004      	beq.n	34004b4e <HAL_RCC_ClockConfig+0x9e>
34004b44:	f240 3199 	movw	r1, #921	@ 0x399
34004b48:	4873      	ldr	r0, [pc, #460]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004b4a:	f7fc fb0f 	bl	3400116c <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004b4e:	4a73      	ldr	r2, [pc, #460]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004b50:	69a1      	ldr	r1, [r4, #24]
34004b52:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004b54:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004b58:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004b5a:	bf81      	itttt	hi
34004b5c:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004b5e:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
34004b62:	430b      	orrhi	r3, r1
34004b64:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34004b66:	6823      	ldr	r3, [r4, #0]
34004b68:	0658      	lsls	r0, r3, #25
34004b6a:	d517      	bpl.n	34004b9c <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004b6c:	69e3      	ldr	r3, [r4, #28]
34004b6e:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004b72:	d007      	beq.n	34004b84 <HAL_RCC_ClockConfig+0xd4>
34004b74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004b78:	d004      	beq.n	34004b84 <HAL_RCC_ClockConfig+0xd4>
34004b7a:	f240 31a3 	movw	r1, #931	@ 0x3a3
34004b7e:	4866      	ldr	r0, [pc, #408]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004b80:	f7fc faf4 	bl	3400116c <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34004b84:	4a65      	ldr	r2, [pc, #404]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004b86:	69e1      	ldr	r1, [r4, #28]
34004b88:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004b8a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004b8e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004b90:	bf81      	itttt	hi
34004b92:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004b94:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
34004b98:	430b      	orrhi	r3, r1
34004b9a:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004b9c:	6823      	ldr	r3, [r4, #0]
34004b9e:	0759      	lsls	r1, r3, #29
34004ba0:	d517      	bpl.n	34004bd2 <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34004ba2:	68e3      	ldr	r3, [r4, #12]
34004ba4:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34004ba8:	d007      	beq.n	34004bba <HAL_RCC_ClockConfig+0x10a>
34004baa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34004bae:	d004      	beq.n	34004bba <HAL_RCC_ClockConfig+0x10a>
34004bb0:	f240 31ad 	movw	r1, #941	@ 0x3ad
34004bb4:	4858      	ldr	r0, [pc, #352]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004bb6:	f7fc fad9 	bl	3400116c <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34004bba:	4a58      	ldr	r2, [pc, #352]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004bbc:	68e1      	ldr	r1, [r4, #12]
34004bbe:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004bc0:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34004bc4:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34004bc6:	bf81      	itttt	hi
34004bc8:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34004bca:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
34004bce:	430b      	orrhi	r3, r1
34004bd0:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34004bd2:	6823      	ldr	r3, [r4, #0]
34004bd4:	07da      	lsls	r2, r3, #31
34004bd6:	d52a      	bpl.n	34004c2e <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
34004bd8:	6863      	ldr	r3, [r4, #4]
34004bda:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004bde:	d004      	beq.n	34004bea <HAL_RCC_ClockConfig+0x13a>
34004be0:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
34004be4:	484c      	ldr	r0, [pc, #304]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004be6:	f7fc fac1 	bl	3400116c <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34004bea:	6863      	ldr	r3, [r4, #4]
34004bec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34004bf0:	f040 809a 	bne.w	34004d28 <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004bf4:	4b49      	ldr	r3, [pc, #292]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004bf6:	685b      	ldr	r3, [r3, #4]
34004bf8:	06db      	lsls	r3, r3, #27
34004bfa:	f57f af5d 	bpl.w	34004ab8 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34004bfe:	4d47      	ldr	r5, [pc, #284]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004c00:	6862      	ldr	r2, [r4, #4]
34004c02:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004c04:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34004c08:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34004c0c:	4313      	orrs	r3, r2
34004c0e:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34004c10:	f7fd fb64 	bl	340022dc <HAL_GetTick>
34004c14:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34004c16:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34004c18:	6862      	ldr	r2, [r4, #4]
34004c1a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34004c1e:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34004c22:	f040 80b7 	bne.w	34004d94 <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34004c26:	f7ff fef3 	bl	34004a10 <HAL_RCC_GetCpuClockFreq>
34004c2a:	4b3d      	ldr	r3, [pc, #244]	@ (34004d20 <HAL_RCC_ClockConfig+0x270>)
34004c2c:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34004c2e:	6823      	ldr	r3, [r4, #0]
34004c30:	079f      	lsls	r7, r3, #30
34004c32:	f100 80b7 	bmi.w	34004da4 <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34004c36:	6823      	ldr	r3, [r4, #0]
34004c38:	075e      	lsls	r6, r3, #29
34004c3a:	f100 815c 	bmi.w	34004ef6 <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34004c3e:	6823      	ldr	r3, [r4, #0]
34004c40:	0718      	lsls	r0, r3, #28
34004c42:	d513      	bpl.n	34004c6c <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34004c44:	6923      	ldr	r3, [r4, #16]
34004c46:	2b07      	cmp	r3, #7
34004c48:	d904      	bls.n	34004c54 <HAL_RCC_ClockConfig+0x1a4>
34004c4a:	f240 4163 	movw	r1, #1123	@ 0x463
34004c4e:	4832      	ldr	r0, [pc, #200]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004c50:	f7fc fa8c 	bl	3400116c <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34004c54:	4a31      	ldr	r2, [pc, #196]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004c56:	6921      	ldr	r1, [r4, #16]
34004c58:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004c5a:	f003 0307 	and.w	r3, r3, #7
34004c5e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34004c60:	bf3f      	itttt	cc
34004c62:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004c64:	f023 0307 	biccc.w	r3, r3, #7
34004c68:	430b      	orrcc	r3, r1
34004c6a:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34004c6c:	6823      	ldr	r3, [r4, #0]
34004c6e:	06d9      	lsls	r1, r3, #27
34004c70:	d516      	bpl.n	34004ca0 <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34004c72:	6963      	ldr	r3, [r4, #20]
34004c74:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004c78:	d006      	beq.n	34004c88 <HAL_RCC_ClockConfig+0x1d8>
34004c7a:	2b40      	cmp	r3, #64	@ 0x40
34004c7c:	d004      	beq.n	34004c88 <HAL_RCC_ClockConfig+0x1d8>
34004c7e:	f240 416d 	movw	r1, #1133	@ 0x46d
34004c82:	4825      	ldr	r0, [pc, #148]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004c84:	f7fc fa72 	bl	3400116c <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34004c88:	4a24      	ldr	r2, [pc, #144]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004c8a:	6961      	ldr	r1, [r4, #20]
34004c8c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004c8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34004c92:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34004c94:	bf3f      	itttt	cc
34004c96:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004c98:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
34004c9c:	430b      	orrcc	r3, r1
34004c9e:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34004ca0:	6823      	ldr	r3, [r4, #0]
34004ca2:	069a      	lsls	r2, r3, #26
34004ca4:	d517      	bpl.n	34004cd6 <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34004ca6:	69a3      	ldr	r3, [r4, #24]
34004ca8:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004cac:	d007      	beq.n	34004cbe <HAL_RCC_ClockConfig+0x20e>
34004cae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34004cb2:	d004      	beq.n	34004cbe <HAL_RCC_ClockConfig+0x20e>
34004cb4:	f240 4177 	movw	r1, #1143	@ 0x477
34004cb8:	4817      	ldr	r0, [pc, #92]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004cba:	f7fc fa57 	bl	3400116c <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34004cbe:	4a17      	ldr	r2, [pc, #92]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004cc0:	69a1      	ldr	r1, [r4, #24]
34004cc2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004cc4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34004cc8:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34004cca:	bf3f      	itttt	cc
34004ccc:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004cce:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
34004cd2:	430b      	orrcc	r3, r1
34004cd4:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34004cd6:	6823      	ldr	r3, [r4, #0]
34004cd8:	065b      	lsls	r3, r3, #25
34004cda:	d517      	bpl.n	34004d0c <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34004cdc:	69e3      	ldr	r3, [r4, #28]
34004cde:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34004ce2:	d007      	beq.n	34004cf4 <HAL_RCC_ClockConfig+0x244>
34004ce4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34004ce8:	d004      	beq.n	34004cf4 <HAL_RCC_ClockConfig+0x244>
34004cea:	f240 4181 	movw	r1, #1153	@ 0x481
34004cee:	480a      	ldr	r0, [pc, #40]	@ (34004d18 <HAL_RCC_ClockConfig+0x268>)
34004cf0:	f7fc fa3c 	bl	3400116c <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34004cf4:	4a09      	ldr	r2, [pc, #36]	@ (34004d1c <HAL_RCC_ClockConfig+0x26c>)
34004cf6:	69e1      	ldr	r1, [r4, #28]
34004cf8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004cfa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34004cfe:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34004d00:	bf3f      	itttt	cc
34004d02:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004d04:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
34004d08:	430b      	orrcc	r3, r1
34004d0a:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34004d0c:	4b05      	ldr	r3, [pc, #20]	@ (34004d24 <HAL_RCC_ClockConfig+0x274>)
}
34004d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
34004d12:	6818      	ldr	r0, [r3, #0]
34004d14:	f7fd ba9e 	b.w	34002254 <HAL_InitTick>
34004d18:	340108ac 	.word	0x340108ac
34004d1c:	56028000 	.word	0x56028000
34004d20:	3401218c 	.word	0x3401218c
34004d24:	34012194 	.word	0x34012194
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34004d28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34004d2c:	d126      	bne.n	34004d7c <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34004d2e:	6a23      	ldr	r3, [r4, #32]
34004d30:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004d34:	d004      	beq.n	34004d40 <HAL_RCC_ClockConfig+0x290>
34004d36:	f240 31c7 	movw	r1, #967	@ 0x3c7
34004d3a:	487b      	ldr	r0, [pc, #492]	@ (34004f28 <HAL_RCC_ClockConfig+0x478>)
34004d3c:	f7fc fa16 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34004d40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004d42:	3b01      	subs	r3, #1
34004d44:	2bff      	cmp	r3, #255	@ 0xff
34004d46:	d904      	bls.n	34004d52 <HAL_RCC_ClockConfig+0x2a2>
34004d48:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34004d4c:	4876      	ldr	r0, [pc, #472]	@ (34004f28 <HAL_RCC_ClockConfig+0x478>)
34004d4e:	f7fc fa0d 	bl	3400116c <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34004d52:	4e76      	ldr	r6, [pc, #472]	@ (34004f2c <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34004d54:	6a25      	ldr	r5, [r4, #32]
34004d56:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
34004d5a:	4629      	mov	r1, r5
34004d5c:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004d60:	f7ff fa48 	bl	340041f4 <RCC_IC_CheckPLLSources>
34004d64:	2801      	cmp	r0, #1
34004d66:	f47f aea7 	bne.w	34004ab8 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34004d6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004d6c:	3b01      	subs	r3, #1
34004d6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
34004d72:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34004d76:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
34004d7a:	e740      	b.n	34004bfe <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34004d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34004d80:	d105      	bne.n	34004d8e <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
34004d82:	f7ff f8b1 	bl	34003ee8 <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
34004d86:	2800      	cmp	r0, #0
34004d88:	f47f af39 	bne.w	34004bfe <HAL_RCC_ClockConfig+0x14e>
34004d8c:	e694      	b.n	34004ab8 <HAL_RCC_ClockConfig+0x8>
34004d8e:	f7ff f8a3 	bl	34003ed8 <LL_RCC_HSI_IsReady>
34004d92:	e7f8      	b.n	34004d86 <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004d94:	f7fd faa2 	bl	340022dc <HAL_GetTick>
34004d98:	1b80      	subs	r0, r0, r6
34004d9a:	42b8      	cmp	r0, r7
34004d9c:	f67f af3b 	bls.w	34004c16 <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
34004da0:	2003      	movs	r0, #3
34004da2:	e68a      	b.n	34004aba <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34004da4:	68a3      	ldr	r3, [r4, #8]
34004da6:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34004daa:	d004      	beq.n	34004db6 <HAL_RCC_ClockConfig+0x306>
34004dac:	f240 4101 	movw	r1, #1025	@ 0x401
34004db0:	485d      	ldr	r0, [pc, #372]	@ (34004f28 <HAL_RCC_ClockConfig+0x478>)
34004db2:	f7fc f9db 	bl	3400116c <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34004db6:	68a3      	ldr	r3, [r4, #8]
34004db8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34004dbc:	d11e      	bne.n	34004dfc <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34004dbe:	4b5b      	ldr	r3, [pc, #364]	@ (34004f2c <HAL_RCC_ClockConfig+0x47c>)
34004dc0:	685b      	ldr	r3, [r3, #4]
34004dc2:	06dd      	lsls	r5, r3, #27
34004dc4:	f57f ae78 	bpl.w	34004ab8 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34004dc8:	4d58      	ldr	r5, [pc, #352]	@ (34004f2c <HAL_RCC_ClockConfig+0x47c>)
34004dca:	68a2      	ldr	r2, [r4, #8]
34004dcc:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004dce:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34004dd2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34004dd6:	4313      	orrs	r3, r2
34004dd8:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34004dda:	f7fd fa7f 	bl	340022dc <HAL_GetTick>
34004dde:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004de0:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34004de2:	68a2      	ldr	r2, [r4, #8]
34004de4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34004de8:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34004dec:	f43f af23 	beq.w	34004c36 <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34004df0:	f7fd fa74 	bl	340022dc <HAL_GetTick>
34004df4:	1b80      	subs	r0, r0, r6
34004df6:	42b8      	cmp	r0, r7
34004df8:	d9f2      	bls.n	34004de0 <HAL_RCC_ClockConfig+0x330>
34004dfa:	e7d1      	b.n	34004da0 <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34004dfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34004e00:	d16f      	bne.n	34004ee2 <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34004e02:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34004e04:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004e08:	d004      	beq.n	34004e14 <HAL_RCC_ClockConfig+0x364>
34004e0a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
34004e0e:	4846      	ldr	r0, [pc, #280]	@ (34004f28 <HAL_RCC_ClockConfig+0x478>)
34004e10:	f7fc f9ac 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34004e14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004e16:	3b01      	subs	r3, #1
34004e18:	2bff      	cmp	r3, #255	@ 0xff
34004e1a:	d904      	bls.n	34004e26 <HAL_RCC_ClockConfig+0x376>
34004e1c:	f240 4111 	movw	r1, #1041	@ 0x411
34004e20:	4841      	ldr	r0, [pc, #260]	@ (34004f28 <HAL_RCC_ClockConfig+0x478>)
34004e22:	f7fc f9a3 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34004e26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34004e28:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004e2c:	d004      	beq.n	34004e38 <HAL_RCC_ClockConfig+0x388>
34004e2e:	f240 4112 	movw	r1, #1042	@ 0x412
34004e32:	483d      	ldr	r0, [pc, #244]	@ (34004f28 <HAL_RCC_ClockConfig+0x478>)
34004e34:	f7fc f99a 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34004e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34004e3a:	3b01      	subs	r3, #1
34004e3c:	2bff      	cmp	r3, #255	@ 0xff
34004e3e:	d904      	bls.n	34004e4a <HAL_RCC_ClockConfig+0x39a>
34004e40:	f240 4113 	movw	r1, #1043	@ 0x413
34004e44:	4838      	ldr	r0, [pc, #224]	@ (34004f28 <HAL_RCC_ClockConfig+0x478>)
34004e46:	f7fc f991 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
34004e4a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34004e4c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004e50:	d004      	beq.n	34004e5c <HAL_RCC_ClockConfig+0x3ac>
34004e52:	f240 4114 	movw	r1, #1044	@ 0x414
34004e56:	4834      	ldr	r0, [pc, #208]	@ (34004f28 <HAL_RCC_ClockConfig+0x478>)
34004e58:	f7fc f988 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
34004e5c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34004e5e:	3b01      	subs	r3, #1
34004e60:	2bff      	cmp	r3, #255	@ 0xff
34004e62:	d904      	bls.n	34004e6e <HAL_RCC_ClockConfig+0x3be>
34004e64:	f240 4115 	movw	r1, #1045	@ 0x415
34004e68:	482f      	ldr	r0, [pc, #188]	@ (34004f28 <HAL_RCC_ClockConfig+0x478>)
34004e6a:	f7fc f97f 	bl	3400116c <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004e6e:	4d2f      	ldr	r5, [pc, #188]	@ (34004f2c <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34004e70:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
34004e74:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
34004e78:	4641      	mov	r1, r8
34004e7a:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004e7e:	f7ff f9b9 	bl	340041f4 <RCC_IC_CheckPLLSources>
34004e82:	2801      	cmp	r0, #1
34004e84:	f47f ae18 	bne.w	34004ab8 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34004e88:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34004e8c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
34004e8e:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004e92:	4639      	mov	r1, r7
34004e94:	f7ff f9ae 	bl	340041f4 <RCC_IC_CheckPLLSources>
34004e98:	2801      	cmp	r0, #1
34004e9a:	f47f ae0d 	bne.w	34004ab8 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34004e9e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34004ea2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
34004ea4:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34004ea8:	4631      	mov	r1, r6
34004eaa:	f7ff f9a3 	bl	340041f4 <RCC_IC_CheckPLLSources>
34004eae:	2801      	cmp	r0, #1
34004eb0:	f47f ae02 	bne.w	34004ab8 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34004eb4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004eb6:	3b01      	subs	r3, #1
34004eb8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
34004ebc:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34004ec0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34004ec2:	3b01      	subs	r3, #1
34004ec4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
34004ec8:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34004ecc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34004ece:	3b01      	subs	r3, #1
34004ed0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34004ed4:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34004ed8:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34004edc:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
34004ee0:	e772      	b.n	34004dc8 <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34004ee2:	b92b      	cbnz	r3, 34004ef0 <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
34004ee4:	f7fe fff8 	bl	34003ed8 <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
34004ee8:	2800      	cmp	r0, #0
34004eea:	f47f af6d 	bne.w	34004dc8 <HAL_RCC_ClockConfig+0x318>
34004eee:	e5e3      	b.n	34004ab8 <HAL_RCC_ClockConfig+0x8>
34004ef0:	f7fe fffa 	bl	34003ee8 <LL_RCC_MSI_IsReady>
34004ef4:	e7f8      	b.n	34004ee8 <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34004ef6:	68e3      	ldr	r3, [r4, #12]
34004ef8:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34004efc:	d007      	beq.n	34004f0e <HAL_RCC_ClockConfig+0x45e>
34004efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34004f02:	d004      	beq.n	34004f0e <HAL_RCC_ClockConfig+0x45e>
34004f04:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34004f08:	4807      	ldr	r0, [pc, #28]	@ (34004f28 <HAL_RCC_ClockConfig+0x478>)
34004f0a:	f7fc f92f 	bl	3400116c <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34004f0e:	4a07      	ldr	r2, [pc, #28]	@ (34004f2c <HAL_RCC_ClockConfig+0x47c>)
34004f10:	68e1      	ldr	r1, [r4, #12]
34004f12:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34004f14:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34004f18:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34004f1a:	bf3f      	itttt	cc
34004f1c:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34004f1e:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
34004f22:	430b      	orrcc	r3, r1
34004f24:	6253      	strcc	r3, [r2, #36]	@ 0x24
34004f26:	e68a      	b.n	34004c3e <HAL_RCC_ClockConfig+0x18e>
34004f28:	340108ac 	.word	0x340108ac
34004f2c:	56028000 	.word	0x56028000

34004f30 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34004f30:	4a22      	ldr	r2, [pc, #136]	@ (34004fbc <HAL_RCC_GetSysClockFreq+0x8c>)
{
34004f32:	b510      	push	{r4, lr}
34004f34:	6a13      	ldr	r3, [r2, #32]
34004f36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
34004f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34004f3e:	d03a      	beq.n	34004fb6 <HAL_RCC_GetSysClockFreq+0x86>
34004f40:	d805      	bhi.n	34004f4e <HAL_RCC_GetSysClockFreq+0x1e>
34004f42:	b1e3      	cbz	r3, 34004f7e <HAL_RCC_GetSysClockFreq+0x4e>
34004f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004f48:	d01f      	beq.n	34004f8a <HAL_RCC_GetSysClockFreq+0x5a>
34004f4a:	2000      	movs	r0, #0
34004f4c:	e01c      	b.n	34004f88 <HAL_RCC_GetSysClockFreq+0x58>
34004f4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004f52:	d1fa      	bne.n	34004f4a <HAL_RCC_GetSysClockFreq+0x1a>
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34004f54:	f8d2 00c8 	ldr.w	r0, [r2, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004f58:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34004f5c:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004f60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34004f64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34004f68:	f100 0401 	add.w	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34004f6c:	d020      	beq.n	34004fb0 <HAL_RCC_GetSysClockFreq+0x80>
34004f6e:	d814      	bhi.n	34004f9a <HAL_RCC_GetSysClockFreq+0x6a>
34004f70:	b1cb      	cbz	r3, 34004fa6 <HAL_RCC_GetSysClockFreq+0x76>
34004f72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34004f76:	d1e8      	bne.n	34004f4a <HAL_RCC_GetSysClockFreq+0x1a>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34004f78:	f003 f98e 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
34004f7c:	e015      	b.n	34004faa <HAL_RCC_GetSysClockFreq+0x7a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34004f7e:	6c93      	ldr	r3, [r2, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34004f80:	480f      	ldr	r0, [pc, #60]	@ (34004fc0 <HAL_RCC_GetSysClockFreq+0x90>)
34004f82:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34004f86:	40d8      	lsrs	r0, r3
}
34004f88:	bd10      	pop	{r4, pc}
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34004f8a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        frequency = MSI_VALUE;
34004f8c:	480d      	ldr	r0, [pc, #52]	@ (34004fc4 <HAL_RCC_GetSysClockFreq+0x94>)
34004f8e:	f413 7f00 	tst.w	r3, #512	@ 0x200
34004f92:	4b0d      	ldr	r3, [pc, #52]	@ (34004fc8 <HAL_RCC_GetSysClockFreq+0x98>)
34004f94:	bf08      	it	eq
34004f96:	4618      	moveq	r0, r3
34004f98:	e7f6      	b.n	34004f88 <HAL_RCC_GetSysClockFreq+0x58>
34004f9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34004f9e:	d1d4      	bne.n	34004f4a <HAL_RCC_GetSysClockFreq+0x1a>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34004fa0:	f003 f9fa 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
34004fa4:	e001      	b.n	34004faa <HAL_RCC_GetSysClockFreq+0x7a>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34004fa6:	f003 f937 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34004faa:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34004fae:	e7eb      	b.n	34004f88 <HAL_RCC_GetSysClockFreq+0x58>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34004fb0:	f003 f9b2 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
34004fb4:	e7f9      	b.n	34004faa <HAL_RCC_GetSysClockFreq+0x7a>
  switch (LL_RCC_GetSysClkSource())
34004fb6:	4805      	ldr	r0, [pc, #20]	@ (34004fcc <HAL_RCC_GetSysClockFreq+0x9c>)
34004fb8:	e7e6      	b.n	34004f88 <HAL_RCC_GetSysClockFreq+0x58>
34004fba:	bf00      	nop
34004fbc:	56028000 	.word	0x56028000
34004fc0:	03d09000 	.word	0x03d09000
34004fc4:	00f42400 	.word	0x00f42400
34004fc8:	003d0900 	.word	0x003d0900
34004fcc:	02dc6c00 	.word	0x02dc6c00

34004fd0 <HAL_RCC_GetHCLKFreq>:
{
34004fd0:	b508      	push	{r3, lr}
  return LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler());
34004fd2:	f7ff ffad 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34004fd6:	4b03      	ldr	r3, [pc, #12]	@ (34004fe4 <HAL_RCC_GetHCLKFreq+0x14>)
34004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34004fda:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34004fde:	40d8      	lsrs	r0, r3
34004fe0:	bd08      	pop	{r3, pc}
34004fe2:	bf00      	nop
34004fe4:	56028000 	.word	0x56028000

34004fe8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34004fe8:	4a02      	ldr	r2, [pc, #8]	@ (34004ff4 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
34004fea:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34004fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34004ff0:	6553      	str	r3, [r2, #84]	@ 0x54
}
34004ff2:	4770      	bx	lr
34004ff4:	56028000 	.word	0x56028000

34004ff8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34004ff8:	4a02      	ldr	r2, [pc, #8]	@ (34005004 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
34004ffa:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34004ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34005000:	6553      	str	r3, [r2, #84]	@ 0x54
}
34005002:	4770      	bx	lr
34005004:	56028000 	.word	0x56028000

34005008 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34005008:	4b02      	ldr	r3, [pc, #8]	@ (34005014 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
3400500a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
3400500c:	f3c0 1080 	ubfx	r0, r0, #6, #1
34005010:	4770      	bx	lr
34005012:	bf00      	nop
34005014:	56028000 	.word	0x56028000

34005018 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34005018:	4b02      	ldr	r3, [pc, #8]	@ (34005024 <LL_RCC_HSE_IsReady+0xc>)
3400501a:	6858      	ldr	r0, [r3, #4]
}
3400501c:	f3c0 1000 	ubfx	r0, r0, #4, #1
34005020:	4770      	bx	lr
34005022:	bf00      	nop
34005024:	56028000 	.word	0x56028000

34005028 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34005028:	4b02      	ldr	r3, [pc, #8]	@ (34005034 <LL_RCC_HSI_IsReady+0xc>)
3400502a:	6858      	ldr	r0, [r3, #4]
}
3400502c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34005030:	4770      	bx	lr
34005032:	bf00      	nop
34005034:	56028000 	.word	0x56028000

34005038 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34005038:	4b02      	ldr	r3, [pc, #8]	@ (34005044 <LL_RCC_MSI_IsReady+0xc>)
3400503a:	6858      	ldr	r0, [r3, #4]
}
3400503c:	f3c0 0080 	ubfx	r0, r0, #2, #1
34005040:	4770      	bx	lr
34005042:	bf00      	nop
34005044:	56028000 	.word	0x56028000

34005048 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34005048:	4b02      	ldr	r3, [pc, #8]	@ (34005054 <LL_RCC_LSE_IsReady+0xc>)
3400504a:	6858      	ldr	r0, [r3, #4]
}
3400504c:	f3c0 0040 	ubfx	r0, r0, #1, #1
34005050:	4770      	bx	lr
34005052:	bf00      	nop
34005054:	56028000 	.word	0x56028000

34005058 <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34005058:	4907      	ldr	r1, [pc, #28]	@ (34005078 <LL_RCC_SetClockSource+0x20>)
{
3400505a:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
3400505c:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
3400505e:	f3c0 2504 	ubfx	r5, r0, #8, #5
34005062:	5863      	ldr	r3, [r4, r1]
34005064:	0e02      	lsrs	r2, r0, #24
34005066:	40aa      	lsls	r2, r5
34005068:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400506c:	ea23 0302 	bic.w	r3, r3, r2
34005070:	40a8      	lsls	r0, r5
34005072:	4303      	orrs	r3, r0
34005074:	5063      	str	r3, [r4, r1]
}
34005076:	bd30      	pop	{r4, r5, pc}
34005078:	56028144 	.word	0x56028144

3400507c <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
3400507c:	4b05      	ldr	r3, [pc, #20]	@ (34005094 <LL_RCC_GetClockSource+0x18>)
3400507e:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34005080:	58d1      	ldr	r1, [r2, r3]
34005082:	f3c0 2204 	ubfx	r2, r0, #8, #5
34005086:	0e03      	lsrs	r3, r0, #24
34005088:	4093      	lsls	r3, r2
3400508a:	400b      	ands	r3, r1
3400508c:	40d3      	lsrs	r3, r2
}
3400508e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
34005092:	4770      	bx	lr
34005094:	56028144 	.word	0x56028144

34005098 <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34005098:	4b02      	ldr	r3, [pc, #8]	@ (340050a4 <LL_RCC_IC7_IsEnabled+0xc>)
3400509a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3400509e:	f3c0 1080 	ubfx	r0, r0, #6, #1
340050a2:	4770      	bx	lr
340050a4:	56028000 	.word	0x56028000

340050a8 <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
340050a8:	4b03      	ldr	r3, [pc, #12]	@ (340050b8 <LL_RCC_IC7_GetDivider+0x10>)
340050aa:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
340050ae:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340050b2:	3001      	adds	r0, #1
340050b4:	4770      	bx	lr
340050b6:	bf00      	nop
340050b8:	56028000 	.word	0x56028000

340050bc <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
340050bc:	4b02      	ldr	r3, [pc, #8]	@ (340050c8 <LL_RCC_IC8_IsEnabled+0xc>)
340050be:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340050c2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
340050c6:	4770      	bx	lr
340050c8:	56028000 	.word	0x56028000

340050cc <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
340050cc:	4b03      	ldr	r3, [pc, #12]	@ (340050dc <LL_RCC_IC8_GetDivider+0x10>)
340050ce:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
340050d2:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340050d6:	3001      	adds	r0, #1
340050d8:	4770      	bx	lr
340050da:	bf00      	nop
340050dc:	56028000 	.word	0x56028000

340050e0 <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
340050e0:	4b02      	ldr	r3, [pc, #8]	@ (340050ec <LL_RCC_IC9_IsEnabled+0xc>)
340050e2:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340050e6:	f3c0 2000 	ubfx	r0, r0, #8, #1
340050ea:	4770      	bx	lr
340050ec:	56028000 	.word	0x56028000

340050f0 <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
340050f0:	4b03      	ldr	r3, [pc, #12]	@ (34005100 <LL_RCC_IC9_GetDivider+0x10>)
340050f2:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
340050f6:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340050fa:	3001      	adds	r0, #1
340050fc:	4770      	bx	lr
340050fe:	bf00      	nop
34005100:	56028000 	.word	0x56028000

34005104 <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34005104:	4b02      	ldr	r3, [pc, #8]	@ (34005110 <LL_RCC_IC14_IsEnabled+0xc>)
34005106:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3400510a:	f3c0 3040 	ubfx	r0, r0, #13, #1
3400510e:	4770      	bx	lr
34005110:	56028000 	.word	0x56028000

34005114 <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34005114:	4b03      	ldr	r3, [pc, #12]	@ (34005124 <LL_RCC_IC14_GetDivider+0x10>)
34005116:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
3400511a:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3400511e:	3001      	adds	r0, #1
34005120:	4770      	bx	lr
34005122:	bf00      	nop
34005124:	56028000 	.word	0x56028000

34005128 <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34005128:	4b02      	ldr	r3, [pc, #8]	@ (34005134 <LL_RCC_IC15_IsEnabled+0xc>)
3400512a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3400512e:	f3c0 3080 	ubfx	r0, r0, #14, #1
34005132:	4770      	bx	lr
34005134:	56028000 	.word	0x56028000

34005138 <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34005138:	4b03      	ldr	r3, [pc, #12]	@ (34005148 <LL_RCC_IC15_GetDivider+0x10>)
3400513a:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
3400513e:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34005142:	3001      	adds	r0, #1
34005144:	4770      	bx	lr
34005146:	bf00      	nop
34005148:	56028000 	.word	0x56028000

3400514c <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3400514c:	4b02      	ldr	r3, [pc, #8]	@ (34005158 <RCCEx_GetHCLKFreq+0xc>)
3400514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34005150:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34005154:	40d8      	lsrs	r0, r3
34005156:	4770      	bx	lr
34005158:	56028000 	.word	0x56028000

3400515c <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
3400515c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34005160:	b508      	push	{r3, lr}
  switch (PLLsource)
34005162:	d023      	beq.n	340051ac <RCCEx_GetPLLSourceFreq+0x50>
34005164:	d805      	bhi.n	34005172 <RCCEx_GetPLLSourceFreq+0x16>
34005166:	b148      	cbz	r0, 3400517c <RCCEx_GetPLLSourceFreq+0x20>
34005168:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
3400516c:	d011      	beq.n	34005192 <RCCEx_GetPLLSourceFreq+0x36>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
3400516e:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
34005170:	bd08      	pop	{r3, pc}
  switch (PLLsource)
34005172:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34005176:	d1fa      	bne.n	3400516e <RCCEx_GetPLLSourceFreq+0x12>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34005178:	480f      	ldr	r0, [pc, #60]	@ (340051b8 <RCCEx_GetPLLSourceFreq+0x5c>)
3400517a:	e7f9      	b.n	34005170 <RCCEx_GetPLLSourceFreq+0x14>
      if (LL_RCC_HSI_IsReady() != 0U)
3400517c:	f7ff ff54 	bl	34005028 <LL_RCC_HSI_IsReady>
34005180:	2800      	cmp	r0, #0
34005182:	d0f4      	beq.n	3400516e <RCCEx_GetPLLSourceFreq+0x12>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34005184:	4b0d      	ldr	r3, [pc, #52]	@ (340051bc <RCCEx_GetPLLSourceFreq+0x60>)
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34005186:	480e      	ldr	r0, [pc, #56]	@ (340051c0 <RCCEx_GetPLLSourceFreq+0x64>)
34005188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400518a:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400518e:	40d8      	lsrs	r0, r3
34005190:	e7ee      	b.n	34005170 <RCCEx_GetPLLSourceFreq+0x14>
      if (LL_RCC_MSI_IsReady() != 0U)
34005192:	f7ff ff51 	bl	34005038 <LL_RCC_MSI_IsReady>
34005196:	2800      	cmp	r0, #0
34005198:	d0e9      	beq.n	3400516e <RCCEx_GetPLLSourceFreq+0x12>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3400519a:	4b08      	ldr	r3, [pc, #32]	@ (340051bc <RCCEx_GetPLLSourceFreq+0x60>)
          pllinputfreq = MSI_VALUE;
3400519c:	4809      	ldr	r0, [pc, #36]	@ (340051c4 <RCCEx_GetPLLSourceFreq+0x68>)
3400519e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340051a0:	f413 7f00 	tst.w	r3, #512	@ 0x200
340051a4:	4b08      	ldr	r3, [pc, #32]	@ (340051c8 <RCCEx_GetPLLSourceFreq+0x6c>)
340051a6:	bf08      	it	eq
340051a8:	4618      	moveq	r0, r3
340051aa:	e7e1      	b.n	34005170 <RCCEx_GetPLLSourceFreq+0x14>
      if (LL_RCC_HSE_IsReady() != 0U)
340051ac:	f7ff ff34 	bl	34005018 <LL_RCC_HSE_IsReady>
340051b0:	2800      	cmp	r0, #0
340051b2:	d0dc      	beq.n	3400516e <RCCEx_GetPLLSourceFreq+0x12>
        pllinputfreq = HSE_VALUE;
340051b4:	4805      	ldr	r0, [pc, #20]	@ (340051cc <RCCEx_GetPLLSourceFreq+0x70>)
340051b6:	e7db      	b.n	34005170 <RCCEx_GetPLLSourceFreq+0x14>
340051b8:	00bb8000 	.word	0x00bb8000
340051bc:	56028000 	.word	0x56028000
340051c0:	03d09000 	.word	0x03d09000
340051c4:	00f42400 	.word	0x00f42400
340051c8:	003d0900 	.word	0x003d0900
340051cc:	02dc6c00 	.word	0x02dc6c00

340051d0 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
340051d0:	ee07 2a10 	vmov	s14, r2
340051d4:	ee06 3a10 	vmov	s12, r3
340051d8:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
340051dc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
340051e0:	eddf 5a10 	vldr	s11, [pc, #64]	@ 34005224 <RCCEx_CalcPLLFreq+0x54>
340051e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
340051e8:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
340051ec:	eea6 7a25 	vfma.f32	s14, s12, s11
340051f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
340051f4:	ee67 7a87 	vmul.f32	s15, s15, s14
340051f8:	eeb8 7a66 	vcvt.f32.u32	s14, s13
340051fc:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
34005200:	eddd 7a00 	vldr	s15, [sp]
34005204:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005208:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
3400520c:	eddd 7a01 	vldr	s15, [sp, #4]
34005210:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005214:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
34005218:	eefc 7ac7 	vcvt.u32.f32	s15, s14
3400521c:	ee17 0a90 	vmov	r0, s15
34005220:	4770      	bx	lr
34005222:	bf00      	nop
34005224:	33800000 	.word	0x33800000

34005228 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34005228:	e9d0 2300 	ldrd	r2, r3, [r0]
3400522c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
34005230:	431a      	orrs	r2, r3
{
34005232:	b570      	push	{r4, r5, r6, lr}
34005234:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34005236:	d103      	bne.n	34005240 <HAL_RCCEx_PeriphCLKConfig+0x18>
34005238:	2188      	movs	r1, #136	@ 0x88
3400523a:	48b6      	ldr	r0, [pc, #728]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
3400523c:	f7fb ff96 	bl	3400116c <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34005240:	6823      	ldr	r3, [r4, #0]
34005242:	011a      	lsls	r2, r3, #4
34005244:	f140 8090 	bpl.w	34005368 <HAL_RCCEx_PeriphCLKConfig+0x140>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
34005248:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
3400524c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34005250:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
34005254:	d05a      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400525a:	d057      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400525c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
34005260:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
34005264:	d052      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005266:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
3400526a:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
3400526e:	d04d      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005270:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
34005274:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
34005278:	d048      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400527a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
3400527e:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
34005282:	d043      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005284:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34005288:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
3400528c:	d03e      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400528e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005292:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
34005296:	d039      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005298:	499f      	ldr	r1, [pc, #636]	@ (34005518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
3400529a:	428a      	cmp	r2, r1
3400529c:	d036      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400529e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340052a2:	428a      	cmp	r2, r1
340052a4:	d032      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052a6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340052aa:	428a      	cmp	r2, r1
340052ac:	d02e      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052ae:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
340052b2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340052b6:	4288      	cmp	r0, r1
340052b8:	d028      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052ba:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
340052be:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
340052c2:	4288      	cmp	r0, r1
340052c4:	d022      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052c6:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
340052ca:	428a      	cmp	r2, r1
340052cc:	d01e      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052ce:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340052d2:	428a      	cmp	r2, r1
340052d4:	d01a      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052d6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340052da:	428a      	cmp	r2, r1
340052dc:	d016      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052de:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340052e2:	428a      	cmp	r2, r1
340052e4:	d012      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052e6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340052ea:	428a      	cmp	r2, r1
340052ec:	d00e      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052ee:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340052f2:	428a      	cmp	r2, r1
340052f4:	d00a      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052f6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340052fa:	428a      	cmp	r2, r1
340052fc:	d006      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
340052fe:	4a87      	ldr	r2, [pc, #540]	@ (3400551c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
34005300:	4293      	cmp	r3, r2
34005302:	d003      	beq.n	3400530c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34005304:	218e      	movs	r1, #142	@ 0x8e
34005306:	4883      	ldr	r0, [pc, #524]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
34005308:	f7fb ff30 	bl	3400116c <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
3400530c:	4b84      	ldr	r3, [pc, #528]	@ (34005520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3400530e:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
34005312:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34005316:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
3400531a:	f041 86e9 	bne.w	340070f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3400531e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
34005322:	d109      	bne.n	34005338 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
34005324:	f7fc ffda 	bl	340022dc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34005328:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
3400532c:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
3400532e:	f7ff fe8b 	bl	34005048 <LL_RCC_LSE_IsReady>
34005332:	2800      	cmp	r0, #0
34005334:	f001 86ed 	beq.w	34007112 <HAL_RCCEx_PeriphCLKConfig+0x1eea>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34005338:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
3400533c:	4a78      	ldr	r2, [pc, #480]	@ (34005520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
3400533e:	f403 7040 	and.w	r0, r3, #768	@ 0x300
34005342:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
34005346:	d108      	bne.n	3400535a <HAL_RCCEx_PeriphCLKConfig+0x132>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34005348:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
3400534c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34005350:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
34005354:	430b      	orrs	r3, r1
34005356:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
3400535a:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3400535e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34005362:	4303      	orrs	r3, r0
34005364:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34005368:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3400536a:	6823      	ldr	r3, [r4, #0]
3400536c:	075e      	lsls	r6, r3, #29
3400536e:	d538      	bpl.n	340053e2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
34005370:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34005374:	2b07      	cmp	r3, #7
34005376:	d903      	bls.n	34005380 <HAL_RCCEx_PeriphCLKConfig+0x158>
34005378:	21d4      	movs	r1, #212	@ 0xd4
3400537a:	4866      	ldr	r0, [pc, #408]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
3400537c:	f7fb fef6 	bl	3400116c <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34005380:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34005384:	2b04      	cmp	r3, #4
34005386:	f041 86cd 	bne.w	34007124 <HAL_RCCEx_PeriphCLKConfig+0x1efc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400538a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400538c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005390:	d003      	beq.n	3400539a <HAL_RCCEx_PeriphCLKConfig+0x172>
34005392:	21d9      	movs	r1, #217	@ 0xd9
34005394:	485f      	ldr	r0, [pc, #380]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
34005396:	f7fb fee9 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400539a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400539c:	3b01      	subs	r3, #1
3400539e:	2bff      	cmp	r3, #255	@ 0xff
340053a0:	d903      	bls.n	340053aa <HAL_RCCEx_PeriphCLKConfig+0x182>
340053a2:	21da      	movs	r1, #218	@ 0xda
340053a4:	485b      	ldr	r0, [pc, #364]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
340053a6:	f7fb fee1 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340053aa:	4a5d      	ldr	r2, [pc, #372]	@ (34005520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
340053ac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340053ae:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340053b2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340053b4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340053b8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340053bc:	3901      	subs	r1, #1
340053be:	4303      	orrs	r3, r0
340053c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340053c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340053c8:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340053ca:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
340053ce:	4a54      	ldr	r2, [pc, #336]	@ (34005520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
340053d0:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
340053d4:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340053d8:	f023 0307 	bic.w	r3, r3, #7
340053dc:	430b      	orrs	r3, r1
340053de:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
340053e2:	6863      	ldr	r3, [r4, #4]
340053e4:	0258      	lsls	r0, r3, #9
340053e6:	d539      	bpl.n	3400545c <HAL_RCCEx_PeriphCLKConfig+0x234>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
340053e8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
340053ec:	4a4d      	ldr	r2, [pc, #308]	@ (34005524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
340053ee:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340053f2:	4293      	cmp	r3, r2
340053f4:	d004      	beq.n	34005400 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
340053f6:	f44f 7192 	mov.w	r1, #292	@ 0x124
340053fa:	4846      	ldr	r0, [pc, #280]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
340053fc:	f7fb feb6 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
34005400:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
34005404:	4a48      	ldr	r2, [pc, #288]	@ (34005528 <HAL_RCCEx_PeriphCLKConfig+0x300>)
34005406:	4293      	cmp	r3, r2
34005408:	f041 8748 	bne.w	3400729c <HAL_RCCEx_PeriphCLKConfig+0x2074>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400540c:	69a3      	ldr	r3, [r4, #24]
3400540e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005412:	d004      	beq.n	3400541e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
34005414:	f240 1129 	movw	r1, #297	@ 0x129
34005418:	483e      	ldr	r0, [pc, #248]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
3400541a:	f7fb fea7 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400541e:	69e3      	ldr	r3, [r4, #28]
34005420:	3b01      	subs	r3, #1
34005422:	2bff      	cmp	r3, #255	@ 0xff
34005424:	d904      	bls.n	34005430 <HAL_RCCEx_PeriphCLKConfig+0x208>
34005426:	f44f 7195 	mov.w	r1, #298	@ 0x12a
3400542a:	483a      	ldr	r0, [pc, #232]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
3400542c:	f7fb fe9e 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34005430:	4a3b      	ldr	r2, [pc, #236]	@ (34005520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
34005432:	69e1      	ldr	r1, [r4, #28]
34005434:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34005438:	69a0      	ldr	r0, [r4, #24]
3400543a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400543e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005442:	3901      	subs	r1, #1
34005444:	4303      	orrs	r3, r0
34005446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400544a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3400544e:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005450:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005454:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
34005458:	f7ff fdfe 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3400545c:	6863      	ldr	r3, [r4, #4]
3400545e:	0219      	lsls	r1, r3, #8
34005460:	d539      	bpl.n	340054d6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
34005462:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34005466:	4a31      	ldr	r2, [pc, #196]	@ (3400552c <HAL_RCCEx_PeriphCLKConfig+0x304>)
34005468:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400546c:	4293      	cmp	r3, r2
3400546e:	d004      	beq.n	3400547a <HAL_RCCEx_PeriphCLKConfig+0x252>
34005470:	f240 1151 	movw	r1, #337	@ 0x151
34005474:	4827      	ldr	r0, [pc, #156]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
34005476:	f7fb fe79 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
3400547a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
3400547e:	4a2c      	ldr	r2, [pc, #176]	@ (34005530 <HAL_RCCEx_PeriphCLKConfig+0x308>)
34005480:	4293      	cmp	r3, r2
34005482:	f041 873b 	bne.w	340072fc <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34005486:	69a3      	ldr	r3, [r4, #24]
34005488:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400548c:	d004      	beq.n	34005498 <HAL_RCCEx_PeriphCLKConfig+0x270>
3400548e:	f44f 71ab 	mov.w	r1, #342	@ 0x156
34005492:	4820      	ldr	r0, [pc, #128]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
34005494:	f7fb fe6a 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34005498:	69e3      	ldr	r3, [r4, #28]
3400549a:	3b01      	subs	r3, #1
3400549c:	2bff      	cmp	r3, #255	@ 0xff
3400549e:	d904      	bls.n	340054aa <HAL_RCCEx_PeriphCLKConfig+0x282>
340054a0:	f240 1157 	movw	r1, #343	@ 0x157
340054a4:	481b      	ldr	r0, [pc, #108]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
340054a6:	f7fb fe61 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340054aa:	4a1d      	ldr	r2, [pc, #116]	@ (34005520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
340054ac:	69e1      	ldr	r1, [r4, #28]
340054ae:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340054b2:	69a0      	ldr	r0, [r4, #24]
340054b4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340054b8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340054bc:	3901      	subs	r1, #1
340054be:	4303      	orrs	r3, r0
340054c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340054c4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340054c8:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340054ca:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340054ce:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
340054d2:	f7ff fdc1 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
340054d6:	6863      	ldr	r3, [r4, #4]
340054d8:	01da      	lsls	r2, r3, #7
340054da:	d54e      	bpl.n	3400557a <HAL_RCCEx_PeriphCLKConfig+0x352>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
340054dc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
340054e0:	4a14      	ldr	r2, [pc, #80]	@ (34005534 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
340054e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340054e6:	4293      	cmp	r3, r2
340054e8:	d004      	beq.n	340054f4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
340054ea:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
340054ee:	4809      	ldr	r0, [pc, #36]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
340054f0:	f7fb fe3c 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
340054f4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
340054f8:	4a0f      	ldr	r2, [pc, #60]	@ (34005538 <HAL_RCCEx_PeriphCLKConfig+0x310>)
340054fa:	4293      	cmp	r3, r2
340054fc:	f041 872e 	bne.w	3400735c <HAL_RCCEx_PeriphCLKConfig+0x2134>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34005500:	69a3      	ldr	r3, [r4, #24]
34005502:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005506:	d019      	beq.n	3400553c <HAL_RCCEx_PeriphCLKConfig+0x314>
34005508:	f240 1183 	movw	r1, #387	@ 0x183
3400550c:	4801      	ldr	r0, [pc, #4]	@ (34005514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
3400550e:	f7fb fe2d 	bl	3400116c <assert_failed>
34005512:	e013      	b.n	3400553c <HAL_RCCEx_PeriphCLKConfig+0x314>
34005514:	3401094f 	.word	0x3401094f
34005518:	00010300 	.word	0x00010300
3400551c:	0003e300 	.word	0x0003e300
34005520:	56028000 	.word	0x56028000
34005524:	03000014 	.word	0x03000014
34005528:	03020014 	.word	0x03020014
3400552c:	03000414 	.word	0x03000414
34005530:	03020414 	.word	0x03020414
34005534:	03000814 	.word	0x03000814
34005538:	03020814 	.word	0x03020814
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400553c:	69e3      	ldr	r3, [r4, #28]
3400553e:	3b01      	subs	r3, #1
34005540:	2bff      	cmp	r3, #255	@ 0xff
34005542:	d904      	bls.n	3400554e <HAL_RCCEx_PeriphCLKConfig+0x326>
34005544:	f44f 71c2 	mov.w	r1, #388	@ 0x184
34005548:	48c1      	ldr	r0, [pc, #772]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
3400554a:	f7fb fe0f 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400554e:	4ac1      	ldr	r2, [pc, #772]	@ (34005854 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
34005550:	69e1      	ldr	r1, [r4, #28]
34005552:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34005556:	69a0      	ldr	r0, [r4, #24]
34005558:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400555c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005560:	3901      	subs	r1, #1
34005562:	4303      	orrs	r3, r0
34005564:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005568:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3400556c:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400556e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005572:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
34005576:	f7ff fd6f 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3400557a:	6823      	ldr	r3, [r4, #0]
3400557c:	051b      	lsls	r3, r3, #20
3400557e:	d53c      	bpl.n	340055fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
34005580:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34005584:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34005588:	d004      	beq.n	34005594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
3400558a:	f240 11ab 	movw	r1, #427	@ 0x1ab
3400558e:	48b0      	ldr	r0, [pc, #704]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34005590:	f7fb fdec 	bl	3400116c <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34005594:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34005598:	2b20      	cmp	r3, #32
3400559a:	f041 870f 	bne.w	340073bc <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400559e:	69a3      	ldr	r3, [r4, #24]
340055a0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340055a4:	d004      	beq.n	340055b0 <HAL_RCCEx_PeriphCLKConfig+0x388>
340055a6:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
340055aa:	48a9      	ldr	r0, [pc, #676]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340055ac:	f7fb fdde 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340055b0:	69e3      	ldr	r3, [r4, #28]
340055b2:	3b01      	subs	r3, #1
340055b4:	2bff      	cmp	r3, #255	@ 0xff
340055b6:	d904      	bls.n	340055c2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
340055b8:	f240 11b1 	movw	r1, #433	@ 0x1b1
340055bc:	48a4      	ldr	r0, [pc, #656]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340055be:	f7fb fdd5 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340055c2:	4aa4      	ldr	r2, [pc, #656]	@ (34005854 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
340055c4:	69e1      	ldr	r1, [r4, #28]
340055c6:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340055ca:	69a0      	ldr	r0, [r4, #24]
340055cc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340055d0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340055d4:	3901      	subs	r1, #1
340055d6:	4303      	orrs	r3, r0
340055d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340055dc:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340055e0:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340055e2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
340055e6:	4a9b      	ldr	r2, [pc, #620]	@ (34005854 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
340055e8:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
340055ec:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
340055f0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340055f4:	430b      	orrs	r3, r1
340055f6:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
340055fa:	6823      	ldr	r3, [r4, #0]
340055fc:	005e      	lsls	r6, r3, #1
340055fe:	d539      	bpl.n	34005674 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
34005600:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34005604:	4a94      	ldr	r2, [pc, #592]	@ (34005858 <HAL_RCCEx_PeriphCLKConfig+0x630>)
34005606:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400560a:	4293      	cmp	r3, r2
3400560c:	d004      	beq.n	34005618 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
3400560e:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
34005612:	488f      	ldr	r0, [pc, #572]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34005614:	f7fb fdaa 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34005618:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
3400561c:	4a8f      	ldr	r2, [pc, #572]	@ (3400585c <HAL_RCCEx_PeriphCLKConfig+0x634>)
3400561e:	4293      	cmp	r3, r2
34005620:	f041 86fa 	bne.w	34007418 <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34005624:	6a23      	ldr	r3, [r4, #32]
34005626:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400562a:	d004      	beq.n	34005636 <HAL_RCCEx_PeriphCLKConfig+0x40e>
3400562c:	f240 11dd 	movw	r1, #477	@ 0x1dd
34005630:	4887      	ldr	r0, [pc, #540]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34005632:	f7fb fd9b 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34005636:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34005638:	3b01      	subs	r3, #1
3400563a:	2bff      	cmp	r3, #255	@ 0xff
3400563c:	d904      	bls.n	34005648 <HAL_RCCEx_PeriphCLKConfig+0x420>
3400563e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
34005642:	4883      	ldr	r0, [pc, #524]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34005644:	f7fb fd92 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34005648:	4a82      	ldr	r2, [pc, #520]	@ (34005854 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
3400564a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400564c:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34005650:	6a20      	ldr	r0, [r4, #32]
34005652:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005656:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400565a:	3901      	subs	r1, #1
3400565c:	4303      	orrs	r3, r0
3400565e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005662:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34005666:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34005668:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400566c:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
34005670:	f7ff fcf2 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34005674:	6823      	ldr	r3, [r4, #0]
34005676:	2b00      	cmp	r3, #0
34005678:	da39      	bge.n	340056ee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
3400567a:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
3400567e:	4a78      	ldr	r2, [pc, #480]	@ (34005860 <HAL_RCCEx_PeriphCLKConfig+0x638>)
34005680:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005684:	4293      	cmp	r3, r2
34005686:	d004      	beq.n	34005692 <HAL_RCCEx_PeriphCLKConfig+0x46a>
34005688:	f240 2105 	movw	r1, #517	@ 0x205
3400568c:	4870      	ldr	r0, [pc, #448]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
3400568e:	f7fb fd6d 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
34005692:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34005696:	4a73      	ldr	r2, [pc, #460]	@ (34005864 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
34005698:	4293      	cmp	r3, r2
3400569a:	f041 86ed 	bne.w	34007478 <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400569e:	6a23      	ldr	r3, [r4, #32]
340056a0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340056a4:	d004      	beq.n	340056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>
340056a6:	f240 210a 	movw	r1, #522	@ 0x20a
340056aa:	4869      	ldr	r0, [pc, #420]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340056ac:	f7fb fd5e 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340056b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340056b2:	3b01      	subs	r3, #1
340056b4:	2bff      	cmp	r3, #255	@ 0xff
340056b6:	d904      	bls.n	340056c2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
340056b8:	f240 210b 	movw	r1, #523	@ 0x20b
340056bc:	4864      	ldr	r0, [pc, #400]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340056be:	f7fb fd55 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340056c2:	4a64      	ldr	r2, [pc, #400]	@ (34005854 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
340056c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340056c6:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340056ca:	6a20      	ldr	r0, [r4, #32]
340056cc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340056d0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340056d4:	3901      	subs	r1, #1
340056d6:	4303      	orrs	r3, r0
340056d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340056dc:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340056e0:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340056e2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340056e6:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
340056ea:	f7ff fcb5 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
340056ee:	6823      	ldr	r3, [r4, #0]
340056f0:	07d8      	lsls	r0, r3, #31
340056f2:	d54f      	bpl.n	34005794 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
340056f4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
340056f8:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340056fc:	d006      	beq.n	3400570c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
340056fe:	2b40      	cmp	r3, #64	@ 0x40
34005700:	d004      	beq.n	3400570c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
34005702:	f240 2132 	movw	r1, #562	@ 0x232
34005706:	4852      	ldr	r0, [pc, #328]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34005708:	f7fb fd30 	bl	3400116c <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
3400570c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
34005710:	3b01      	subs	r3, #1
34005712:	2bff      	cmp	r3, #255	@ 0xff
34005714:	d904      	bls.n	34005720 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
34005716:	f240 2133 	movw	r1, #563	@ 0x233
3400571a:	484d      	ldr	r0, [pc, #308]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
3400571c:	f7fb fd26 	bl	3400116c <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
34005720:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34005724:	2b20      	cmp	r3, #32
34005726:	f041 86ef 	bne.w	34007508 <HAL_RCCEx_PeriphCLKConfig+0x22e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400572a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400572c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005730:	d004      	beq.n	3400573c <HAL_RCCEx_PeriphCLKConfig+0x514>
34005732:	f44f 710e 	mov.w	r1, #568	@ 0x238
34005736:	4846      	ldr	r0, [pc, #280]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34005738:	f7fb fd18 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400573c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400573e:	3b01      	subs	r3, #1
34005740:	2bff      	cmp	r3, #255	@ 0xff
34005742:	d904      	bls.n	3400574e <HAL_RCCEx_PeriphCLKConfig+0x526>
34005744:	f240 2139 	movw	r1, #569	@ 0x239
34005748:	4841      	ldr	r0, [pc, #260]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
3400574a:	f7fb fd0f 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400574e:	4a41      	ldr	r2, [pc, #260]	@ (34005854 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
34005750:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34005752:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34005756:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34005758:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400575c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005760:	3901      	subs	r1, #1
34005762:	4303      	orrs	r3, r0
34005764:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005768:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3400576c:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400576e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
34005772:	4938      	ldr	r1, [pc, #224]	@ (34005854 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
34005774:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
34005778:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
3400577c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
34005780:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
34005784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
34005788:	3a01      	subs	r2, #1
3400578a:	4303      	orrs	r3, r0
3400578c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34005790:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34005794:	6823      	ldr	r3, [r4, #0]
34005796:	0799      	lsls	r1, r3, #30
34005798:	d53b      	bpl.n	34005812 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
3400579a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
3400579e:	2b07      	cmp	r3, #7
340057a0:	d904      	bls.n	340057ac <HAL_RCCEx_PeriphCLKConfig+0x584>
340057a2:	f240 2161 	movw	r1, #609	@ 0x261
340057a6:	482a      	ldr	r0, [pc, #168]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340057a8:	f7fb fce0 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
340057ac:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
340057b0:	2b02      	cmp	r3, #2
340057b2:	f041 86d7 	bne.w	34007564 <HAL_RCCEx_PeriphCLKConfig+0x233c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340057b6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340057b8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340057bc:	d004      	beq.n	340057c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
340057be:	f240 2166 	movw	r1, #614	@ 0x266
340057c2:	4823      	ldr	r0, [pc, #140]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340057c4:	f7fb fcd2 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340057c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340057ca:	3b01      	subs	r3, #1
340057cc:	2bff      	cmp	r3, #255	@ 0xff
340057ce:	d904      	bls.n	340057da <HAL_RCCEx_PeriphCLKConfig+0x5b2>
340057d0:	f240 2167 	movw	r1, #615	@ 0x267
340057d4:	481e      	ldr	r0, [pc, #120]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340057d6:	f7fb fcc9 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340057da:	4a1e      	ldr	r2, [pc, #120]	@ (34005854 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
340057dc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340057de:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340057e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340057e4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340057e8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340057ec:	3901      	subs	r1, #1
340057ee:	4303      	orrs	r3, r0
340057f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340057f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340057f8:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340057fa:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
340057fe:	4a15      	ldr	r2, [pc, #84]	@ (34005854 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
34005800:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
34005804:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34005808:	f023 0307 	bic.w	r3, r3, #7
3400580c:	430b      	orrs	r3, r1
3400580e:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
34005812:	6823      	ldr	r3, [r4, #0]
34005814:	071a      	lsls	r2, r3, #28
34005816:	d535      	bpl.n	34005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
34005818:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
3400581c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005820:	d004      	beq.n	3400582c <HAL_RCCEx_PeriphCLKConfig+0x604>
34005822:	f240 218e 	movw	r1, #654	@ 0x28e
34005826:	480a      	ldr	r0, [pc, #40]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34005828:	f7fb fca0 	bl	3400116c <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
3400582c:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
34005830:	3b01      	subs	r3, #1
34005832:	2bff      	cmp	r3, #255	@ 0xff
34005834:	d904      	bls.n	34005840 <HAL_RCCEx_PeriphCLKConfig+0x618>
34005836:	f240 218f 	movw	r1, #655	@ 0x28f
3400583a:	4805      	ldr	r0, [pc, #20]	@ (34005850 <HAL_RCCEx_PeriphCLKConfig+0x628>)
3400583c:	f7fb fc96 	bl	3400116c <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34005840:	4a04      	ldr	r2, [pc, #16]	@ (34005854 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
34005842:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
34005846:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
3400584a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
3400584e:	e00b      	b.n	34005868 <HAL_RCCEx_PeriphCLKConfig+0x640>
34005850:	3401094f 	.word	0x3401094f
34005854:	56028000 	.word	0x56028000
34005858:	0300001c 	.word	0x0300001c
3400585c:	0302001c 	.word	0x0302001c
34005860:	0300041c 	.word	0x0300041c
34005864:	0302041c 	.word	0x0302041c
34005868:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400586c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005870:	3901      	subs	r1, #1
34005872:	4303      	orrs	r3, r0
34005874:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005878:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
3400587c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34005880:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34005884:	6823      	ldr	r3, [r4, #0]
34005886:	06db      	lsls	r3, r3, #27
34005888:	d542      	bpl.n	34005910 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
3400588a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
3400588e:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34005892:	d004      	beq.n	3400589e <HAL_RCCEx_PeriphCLKConfig+0x676>
34005894:	f240 219d 	movw	r1, #669	@ 0x29d
34005898:	48c3      	ldr	r0, [pc, #780]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
3400589a:	f7fb fc67 	bl	3400116c <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
3400589e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
340058a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340058a6:	f041 868b 	bne.w	340075c0 <HAL_RCCEx_PeriphCLKConfig+0x2398>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
340058aa:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
340058ae:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340058b2:	d004      	beq.n	340058be <HAL_RCCEx_PeriphCLKConfig+0x696>
340058b4:	f240 21a2 	movw	r1, #674	@ 0x2a2
340058b8:	48bb      	ldr	r0, [pc, #748]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
340058ba:	f7fb fc57 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
340058be:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
340058c2:	3b01      	subs	r3, #1
340058c4:	2bff      	cmp	r3, #255	@ 0xff
340058c6:	d904      	bls.n	340058d2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
340058c8:	f240 21a3 	movw	r1, #675	@ 0x2a3
340058cc:	48b6      	ldr	r0, [pc, #728]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
340058ce:	f7fb fc4d 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
340058d2:	4ab6      	ldr	r2, [pc, #728]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
340058d4:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
340058d8:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
340058dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
340058e0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340058e4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340058e8:	3901      	subs	r1, #1
340058ea:	4303      	orrs	r3, r0
340058ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340058f0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
340058f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
340058f8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
340058fc:	4aab      	ldr	r2, [pc, #684]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
340058fe:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
34005902:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34005906:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
3400590a:	430b      	orrs	r3, r1
3400590c:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34005910:	6823      	ldr	r3, [r4, #0]
34005912:	069e      	lsls	r6, r3, #26
34005914:	d53e      	bpl.n	34005994 <HAL_RCCEx_PeriphCLKConfig+0x76c>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
34005916:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
3400591a:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400591e:	d004      	beq.n	3400592a <HAL_RCCEx_PeriphCLKConfig+0x702>
34005920:	f240 21bd 	movw	r1, #701	@ 0x2bd
34005924:	48a0      	ldr	r0, [pc, #640]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005926:	f7fb fc21 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
3400592a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
3400592e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34005932:	f041 864e 	bne.w	340075d2 <HAL_RCCEx_PeriphCLKConfig+0x23aa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
34005936:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34005938:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400593c:	d004      	beq.n	34005948 <HAL_RCCEx_PeriphCLKConfig+0x720>
3400593e:	f240 21c2 	movw	r1, #706	@ 0x2c2
34005942:	4899      	ldr	r0, [pc, #612]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005944:	f7fb fc12 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34005948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400594a:	3b01      	subs	r3, #1
3400594c:	2bff      	cmp	r3, #255	@ 0xff
3400594e:	d904      	bls.n	3400595a <HAL_RCCEx_PeriphCLKConfig+0x732>
34005950:	f240 21c3 	movw	r1, #707	@ 0x2c3
34005954:	4894      	ldr	r0, [pc, #592]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005956:	f7fb fc09 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
3400595a:	4a94      	ldr	r2, [pc, #592]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
3400595c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
3400595e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
34005962:	6e20      	ldr	r0, [r4, #96]	@ 0x60
34005964:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005968:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400596c:	3901      	subs	r1, #1
3400596e:	4303      	orrs	r3, r0
34005970:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005974:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34005978:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400597c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34005980:	4a8a      	ldr	r2, [pc, #552]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
34005982:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
34005986:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
3400598a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
3400598e:	430b      	orrs	r3, r1
34005990:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34005994:	6823      	ldr	r3, [r4, #0]
34005996:	0658      	lsls	r0, r3, #25
34005998:	d516      	bpl.n	340059c8 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
3400599a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
3400599e:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
340059a2:	d007      	beq.n	340059b4 <HAL_RCCEx_PeriphCLKConfig+0x78c>
340059a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340059a8:	d004      	beq.n	340059b4 <HAL_RCCEx_PeriphCLKConfig+0x78c>
340059aa:	f240 21dd 	movw	r1, #733	@ 0x2dd
340059ae:	487e      	ldr	r0, [pc, #504]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
340059b0:	f7fb fbdc 	bl	3400116c <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
340059b4:	4a7d      	ldr	r2, [pc, #500]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
340059b6:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
340059ba:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
340059be:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
340059c2:	430b      	orrs	r3, r1
340059c4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
340059c8:	6823      	ldr	r3, [r4, #0]
340059ca:	0619      	lsls	r1, r3, #24
340059cc:	d513      	bpl.n	340059f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
340059ce:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
340059d2:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
340059d6:	d004      	beq.n	340059e2 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
340059d8:	f240 21e7 	movw	r1, #743	@ 0x2e7
340059dc:	4872      	ldr	r0, [pc, #456]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
340059de:	f7fb fbc5 	bl	3400116c <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
340059e2:	4a72      	ldr	r2, [pc, #456]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
340059e4:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
340059e8:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
340059ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
340059f0:	430b      	orrs	r3, r1
340059f2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
340059f6:	6823      	ldr	r3, [r4, #0]
340059f8:	05da      	lsls	r2, r3, #23
340059fa:	d513      	bpl.n	34005a24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
340059fc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
34005a00:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
34005a04:	d004      	beq.n	34005a10 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
34005a06:	f240 21f1 	movw	r1, #753	@ 0x2f1
34005a0a:	4867      	ldr	r0, [pc, #412]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005a0c:	f7fb fbae 	bl	3400116c <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34005a10:	4a66      	ldr	r2, [pc, #408]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
34005a12:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
34005a16:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34005a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34005a1e:	430b      	orrs	r3, r1
34005a20:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34005a24:	6823      	ldr	r3, [r4, #0]
34005a26:	059b      	lsls	r3, r3, #22
34005a28:	d54b      	bpl.n	34005ac2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34005a2a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005a2e:	2b03      	cmp	r3, #3
34005a30:	d904      	bls.n	34005a3c <HAL_RCCEx_PeriphCLKConfig+0x814>
34005a32:	f240 21fb 	movw	r1, #763	@ 0x2fb
34005a36:	485c      	ldr	r0, [pc, #368]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005a38:	f7fb fb98 	bl	3400116c <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34005a3c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
34005a40:	3b01      	subs	r3, #1
34005a42:	2b0f      	cmp	r3, #15
34005a44:	d904      	bls.n	34005a50 <HAL_RCCEx_PeriphCLKConfig+0x828>
34005a46:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
34005a4a:	4857      	ldr	r0, [pc, #348]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005a4c:	f7fb fb8e 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34005a50:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34005a54:	2b02      	cmp	r3, #2
34005a56:	f041 85c5 	bne.w	340075e4 <HAL_RCCEx_PeriphCLKConfig+0x23bc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
34005a5a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
34005a5c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005a60:	d004      	beq.n	34005a6c <HAL_RCCEx_PeriphCLKConfig+0x844>
34005a62:	f240 3101 	movw	r1, #769	@ 0x301
34005a66:	4850      	ldr	r0, [pc, #320]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005a68:	f7fb fb80 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
34005a6c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
34005a6e:	3b01      	subs	r3, #1
34005a70:	2bff      	cmp	r3, #255	@ 0xff
34005a72:	d904      	bls.n	34005a7e <HAL_RCCEx_PeriphCLKConfig+0x856>
34005a74:	f240 3102 	movw	r1, #770	@ 0x302
34005a78:	484b      	ldr	r0, [pc, #300]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005a7a:	f7fb fb77 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34005a7e:	4a4b      	ldr	r2, [pc, #300]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
34005a80:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
34005a82:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
34005a86:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
34005a88:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005a8c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005a90:	3901      	subs	r1, #1
34005a92:	4303      	orrs	r3, r0
34005a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005a98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34005a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34005aa0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34005aa4:	4941      	ldr	r1, [pc, #260]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
34005aa6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
34005aaa:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
34005aae:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
34005ab2:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
34005ab6:	3a01      	subs	r2, #1
34005ab8:	4303      	orrs	r3, r0
34005aba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
34005abe:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34005ac2:	6823      	ldr	r3, [r4, #0]
34005ac4:	055e      	lsls	r6, r3, #21
34005ac6:	d540      	bpl.n	34005b4a <HAL_RCCEx_PeriphCLKConfig+0x922>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
34005ac8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34005acc:	2b03      	cmp	r3, #3
34005ace:	d904      	bls.n	34005ada <HAL_RCCEx_PeriphCLKConfig+0x8b2>
34005ad0:	f240 311d 	movw	r1, #797	@ 0x31d
34005ad4:	4834      	ldr	r0, [pc, #208]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005ad6:	f7fb fb49 	bl	3400116c <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
34005ada:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34005ade:	2b02      	cmp	r3, #2
34005ae0:	f041 8588 	bne.w	340075f4 <HAL_RCCEx_PeriphCLKConfig+0x23cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34005ae4:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34005ae8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005aec:	d004      	beq.n	34005af8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
34005aee:	f240 3122 	movw	r1, #802	@ 0x322
34005af2:	482d      	ldr	r0, [pc, #180]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005af4:	f7fb fb3a 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34005af8:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34005afc:	3b01      	subs	r3, #1
34005afe:	2bff      	cmp	r3, #255	@ 0xff
34005b00:	d904      	bls.n	34005b0c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
34005b02:	f240 3123 	movw	r1, #803	@ 0x323
34005b06:	4828      	ldr	r0, [pc, #160]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005b08:	f7fb fb30 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34005b0c:	4a27      	ldr	r2, [pc, #156]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
34005b0e:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34005b12:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34005b16:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34005b1a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005b1e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005b22:	3901      	subs	r1, #1
34005b24:	4303      	orrs	r3, r0
34005b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005b2a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34005b2e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34005b32:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34005b36:	4a1d      	ldr	r2, [pc, #116]	@ (34005bac <HAL_RCCEx_PeriphCLKConfig+0x984>)
34005b38:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
34005b3c:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34005b40:	f023 0303 	bic.w	r3, r3, #3
34005b44:	430b      	orrs	r3, r1
34005b46:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34005b4a:	6823      	ldr	r3, [r4, #0]
34005b4c:	04d8      	lsls	r0, r3, #19
34005b4e:	d54a      	bpl.n	34005be6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
34005b50:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005b54:	4a16      	ldr	r2, [pc, #88]	@ (34005bb0 <HAL_RCCEx_PeriphCLKConfig+0x988>)
34005b56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005b5a:	4291      	cmp	r1, r2
34005b5c:	d00a      	beq.n	34005b74 <HAL_RCCEx_PeriphCLKConfig+0x94c>
34005b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005b62:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005b66:	4293      	cmp	r3, r2
34005b68:	d004      	beq.n	34005b74 <HAL_RCCEx_PeriphCLKConfig+0x94c>
34005b6a:	f240 313d 	movw	r1, #829	@ 0x33d
34005b6e:	480e      	ldr	r0, [pc, #56]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005b70:	f7fb fafc 	bl	3400116c <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34005b74:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34005b78:	4a0e      	ldr	r2, [pc, #56]	@ (34005bb4 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
34005b7a:	4293      	cmp	r3, r2
34005b7c:	f041 8542 	bne.w	34007604 <HAL_RCCEx_PeriphCLKConfig+0x23dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005b80:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005b82:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005b86:	d004      	beq.n	34005b92 <HAL_RCCEx_PeriphCLKConfig+0x96a>
34005b88:	f240 3142 	movw	r1, #834	@ 0x342
34005b8c:	4806      	ldr	r0, [pc, #24]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005b8e:	f7fb faed 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005b92:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005b94:	3b01      	subs	r3, #1
34005b96:	2bff      	cmp	r3, #255	@ 0xff
34005b98:	d90e      	bls.n	34005bb8 <HAL_RCCEx_PeriphCLKConfig+0x990>
34005b9a:	f240 3143 	movw	r1, #835	@ 0x343
34005b9e:	4802      	ldr	r0, [pc, #8]	@ (34005ba8 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34005ba0:	f7fb fae4 	bl	3400116c <assert_failed>
34005ba4:	e008      	b.n	34005bb8 <HAL_RCCEx_PeriphCLKConfig+0x990>
34005ba6:	bf00      	nop
34005ba8:	3401094f 	.word	0x3401094f
34005bac:	56028000 	.word	0x56028000
34005bb0:	0700000c 	.word	0x0700000c
34005bb4:	0702000c 	.word	0x0702000c
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005bb8:	4abd      	ldr	r2, [pc, #756]	@ (34005eb0 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34005bba:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005bbc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005bc0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005bc2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005bc6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005bca:	3901      	subs	r1, #1
34005bcc:	4303      	orrs	r3, r0
34005bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005bd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005bda:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005bde:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
34005be2:	f7ff fa39 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34005be6:	6823      	ldr	r3, [r4, #0]
34005be8:	0499      	lsls	r1, r3, #18
34005bea:	d540      	bpl.n	34005c6e <HAL_RCCEx_PeriphCLKConfig+0xa46>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
34005bec:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34005bf0:	4ab0      	ldr	r2, [pc, #704]	@ (34005eb4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>)
34005bf2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005bf6:	4291      	cmp	r1, r2
34005bf8:	d00a      	beq.n	34005c10 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
34005bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005bfe:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005c02:	4293      	cmp	r3, r2
34005c04:	d004      	beq.n	34005c10 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
34005c06:	f240 316a 	movw	r1, #874	@ 0x36a
34005c0a:	48ab      	ldr	r0, [pc, #684]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005c0c:	f7fb faae 	bl	3400116c <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34005c10:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34005c14:	4aa9      	ldr	r2, [pc, #676]	@ (34005ebc <HAL_RCCEx_PeriphCLKConfig+0xc94>)
34005c16:	4293      	cmp	r3, r2
34005c18:	f041 8525 	bne.w	34007666 <HAL_RCCEx_PeriphCLKConfig+0x243e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005c1c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005c1e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005c22:	d004      	beq.n	34005c2e <HAL_RCCEx_PeriphCLKConfig+0xa06>
34005c24:	f240 316f 	movw	r1, #879	@ 0x36f
34005c28:	48a3      	ldr	r0, [pc, #652]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005c2a:	f7fb fa9f 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005c2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005c30:	3b01      	subs	r3, #1
34005c32:	2bff      	cmp	r3, #255	@ 0xff
34005c34:	d904      	bls.n	34005c40 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34005c36:	f44f 715c 	mov.w	r1, #880	@ 0x370
34005c3a:	489f      	ldr	r0, [pc, #636]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005c3c:	f7fb fa96 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005c40:	4a9b      	ldr	r2, [pc, #620]	@ (34005eb0 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34005c42:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005c44:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005c48:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005c4a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005c4e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005c52:	3901      	subs	r1, #1
34005c54:	4303      	orrs	r3, r0
34005c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005c5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005c5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005c62:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005c66:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
34005c6a:	f7ff f9f5 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34005c6e:	6823      	ldr	r3, [r4, #0]
34005c70:	045a      	lsls	r2, r3, #17
34005c72:	d540      	bpl.n	34005cf6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
34005c74:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34005c78:	4a91      	ldr	r2, [pc, #580]	@ (34005ec0 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
34005c7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005c7e:	4291      	cmp	r1, r2
34005c80:	d00a      	beq.n	34005c98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
34005c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005c86:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005c8a:	4293      	cmp	r3, r2
34005c8c:	d004      	beq.n	34005c98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
34005c8e:	f240 3197 	movw	r1, #919	@ 0x397
34005c92:	4889      	ldr	r0, [pc, #548]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005c94:	f7fb fa6a 	bl	3400116c <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34005c98:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34005c9c:	4a89      	ldr	r2, [pc, #548]	@ (34005ec4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
34005c9e:	4293      	cmp	r3, r2
34005ca0:	f041 8512 	bne.w	340076c8 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005ca4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005ca6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005caa:	d004      	beq.n	34005cb6 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
34005cac:	f44f 7167 	mov.w	r1, #924	@ 0x39c
34005cb0:	4881      	ldr	r0, [pc, #516]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005cb2:	f7fb fa5b 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005cb6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005cb8:	3b01      	subs	r3, #1
34005cba:	2bff      	cmp	r3, #255	@ 0xff
34005cbc:	d904      	bls.n	34005cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34005cbe:	f240 319d 	movw	r1, #925	@ 0x39d
34005cc2:	487d      	ldr	r0, [pc, #500]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005cc4:	f7fb fa52 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005cc8:	4a79      	ldr	r2, [pc, #484]	@ (34005eb0 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34005cca:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005ccc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005cd0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005cd2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005cd6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005cda:	3901      	subs	r1, #1
34005cdc:	4303      	orrs	r3, r0
34005cde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005ce2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005cea:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005cee:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
34005cf2:	f7ff f9b1 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34005cf6:	6823      	ldr	r3, [r4, #0]
34005cf8:	041b      	lsls	r3, r3, #16
34005cfa:	d540      	bpl.n	34005d7e <HAL_RCCEx_PeriphCLKConfig+0xb56>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
34005cfc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34005d00:	4a71      	ldr	r2, [pc, #452]	@ (34005ec8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
34005d02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005d06:	4291      	cmp	r1, r2
34005d08:	d00a      	beq.n	34005d20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
34005d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005d0e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005d12:	4293      	cmp	r3, r2
34005d14:	d004      	beq.n	34005d20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
34005d16:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34005d1a:	4867      	ldr	r0, [pc, #412]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005d1c:	f7fb fa26 	bl	3400116c <assert_failed>
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34005d20:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34005d24:	4a69      	ldr	r2, [pc, #420]	@ (34005ecc <HAL_RCCEx_PeriphCLKConfig+0xca4>)
34005d26:	4293      	cmp	r3, r2
34005d28:	f041 84ff 	bne.w	3400772a <HAL_RCCEx_PeriphCLKConfig+0x2502>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005d2c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005d2e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005d32:	d004      	beq.n	34005d3e <HAL_RCCEx_PeriphCLKConfig+0xb16>
34005d34:	f240 31c9 	movw	r1, #969	@ 0x3c9
34005d38:	485f      	ldr	r0, [pc, #380]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005d3a:	f7fb fa17 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005d3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005d40:	3b01      	subs	r3, #1
34005d42:	2bff      	cmp	r3, #255	@ 0xff
34005d44:	d904      	bls.n	34005d50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
34005d46:	f240 31ca 	movw	r1, #970	@ 0x3ca
34005d4a:	485b      	ldr	r0, [pc, #364]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005d4c:	f7fb fa0e 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005d50:	4a57      	ldr	r2, [pc, #348]	@ (34005eb0 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34005d52:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005d54:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005d58:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005d5a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005d5e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005d62:	3901      	subs	r1, #1
34005d64:	4303      	orrs	r3, r0
34005d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005d6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005d72:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005d76:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
34005d7a:	f7ff f96d 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34005d7e:	6823      	ldr	r3, [r4, #0]
34005d80:	03de      	lsls	r6, r3, #15
34005d82:	d540      	bpl.n	34005e06 <HAL_RCCEx_PeriphCLKConfig+0xbde>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
34005d84:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34005d88:	4a51      	ldr	r2, [pc, #324]	@ (34005ed0 <HAL_RCCEx_PeriphCLKConfig+0xca8>)
34005d8a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005d8e:	4291      	cmp	r1, r2
34005d90:	d00a      	beq.n	34005da8 <HAL_RCCEx_PeriphCLKConfig+0xb80>
34005d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005d96:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005d9a:	4293      	cmp	r3, r2
34005d9c:	d004      	beq.n	34005da8 <HAL_RCCEx_PeriphCLKConfig+0xb80>
34005d9e:	f240 31f1 	movw	r1, #1009	@ 0x3f1
34005da2:	4845      	ldr	r0, [pc, #276]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005da4:	f7fb f9e2 	bl	3400116c <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34005da8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34005dac:	4a49      	ldr	r2, [pc, #292]	@ (34005ed4 <HAL_RCCEx_PeriphCLKConfig+0xcac>)
34005dae:	4293      	cmp	r3, r2
34005db0:	f041 84ec 	bne.w	3400778c <HAL_RCCEx_PeriphCLKConfig+0x2564>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005db4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005db6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005dba:	d004      	beq.n	34005dc6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
34005dbc:	f240 31f6 	movw	r1, #1014	@ 0x3f6
34005dc0:	483d      	ldr	r0, [pc, #244]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005dc2:	f7fb f9d3 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005dc6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005dc8:	3b01      	subs	r3, #1
34005dca:	2bff      	cmp	r3, #255	@ 0xff
34005dcc:	d904      	bls.n	34005dd8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
34005dce:	f240 31f7 	movw	r1, #1015	@ 0x3f7
34005dd2:	4839      	ldr	r0, [pc, #228]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005dd4:	f7fb f9ca 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005dd8:	4a35      	ldr	r2, [pc, #212]	@ (34005eb0 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34005dda:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005ddc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005de0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005de2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005de6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005dea:	3901      	subs	r1, #1
34005dec:	4303      	orrs	r3, r0
34005dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005df2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005df6:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005dfa:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005dfe:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
34005e02:	f7ff f929 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34005e06:	6823      	ldr	r3, [r4, #0]
34005e08:	0398      	lsls	r0, r3, #14
34005e0a:	d540      	bpl.n	34005e8e <HAL_RCCEx_PeriphCLKConfig+0xc66>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
34005e0c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34005e10:	4a31      	ldr	r2, [pc, #196]	@ (34005ed8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
34005e12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005e16:	4291      	cmp	r1, r2
34005e18:	d00a      	beq.n	34005e30 <HAL_RCCEx_PeriphCLKConfig+0xc08>
34005e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005e1e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005e22:	4293      	cmp	r3, r2
34005e24:	d004      	beq.n	34005e30 <HAL_RCCEx_PeriphCLKConfig+0xc08>
34005e26:	f240 411e 	movw	r1, #1054	@ 0x41e
34005e2a:	4823      	ldr	r0, [pc, #140]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005e2c:	f7fb f99e 	bl	3400116c <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34005e30:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34005e34:	4a29      	ldr	r2, [pc, #164]	@ (34005edc <HAL_RCCEx_PeriphCLKConfig+0xcb4>)
34005e36:	4293      	cmp	r3, r2
34005e38:	f041 84f2 	bne.w	34007820 <HAL_RCCEx_PeriphCLKConfig+0x25f8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005e3c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005e3e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005e42:	d004      	beq.n	34005e4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
34005e44:	f240 4123 	movw	r1, #1059	@ 0x423
34005e48:	481b      	ldr	r0, [pc, #108]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005e4a:	f7fb f98f 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005e4e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005e50:	3b01      	subs	r3, #1
34005e52:	2bff      	cmp	r3, #255	@ 0xff
34005e54:	d904      	bls.n	34005e60 <HAL_RCCEx_PeriphCLKConfig+0xc38>
34005e56:	f240 4124 	movw	r1, #1060	@ 0x424
34005e5a:	4817      	ldr	r0, [pc, #92]	@ (34005eb8 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34005e5c:	f7fb f986 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005e60:	4a13      	ldr	r2, [pc, #76]	@ (34005eb0 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34005e62:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005e64:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005e68:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005e6a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005e6e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005e72:	3901      	subs	r1, #1
34005e74:	4303      	orrs	r3, r0
34005e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005e7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005e82:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005e86:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
34005e8a:	f7ff f8e5 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34005e8e:	6823      	ldr	r3, [r4, #0]
34005e90:	0359      	lsls	r1, r3, #13
34005e92:	d55b      	bpl.n	34005f4c <HAL_RCCEx_PeriphCLKConfig+0xd24>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
34005e94:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34005e98:	4a11      	ldr	r2, [pc, #68]	@ (34005ee0 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
34005e9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005e9e:	4291      	cmp	r1, r2
34005ea0:	d025      	beq.n	34005eee <HAL_RCCEx_PeriphCLKConfig+0xcc6>
34005ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005ea6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005eaa:	4293      	cmp	r3, r2
34005eac:	d01f      	beq.n	34005eee <HAL_RCCEx_PeriphCLKConfig+0xcc6>
34005eae:	e019      	b.n	34005ee4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>
34005eb0:	56028000 	.word	0x56028000
34005eb4:	0700040c 	.word	0x0700040c
34005eb8:	3401094f 	.word	0x3401094f
34005ebc:	0702040c 	.word	0x0702040c
34005ec0:	0700080c 	.word	0x0700080c
34005ec4:	0702080c 	.word	0x0702080c
34005ec8:	07000c0c 	.word	0x07000c0c
34005ecc:	07020c0c 	.word	0x07020c0c
34005ed0:	0700100c 	.word	0x0700100c
34005ed4:	0702100c 	.word	0x0702100c
34005ed8:	0700140c 	.word	0x0700140c
34005edc:	0702140c 	.word	0x0702140c
34005ee0:	0700082c 	.word	0x0700082c
34005ee4:	f240 414b 	movw	r1, #1099	@ 0x44b
34005ee8:	48bd      	ldr	r0, [pc, #756]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34005eea:	f7fb f93f 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34005eee:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34005ef2:	4abc      	ldr	r2, [pc, #752]	@ (340061e4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>)
34005ef4:	4293      	cmp	r3, r2
34005ef6:	f041 84c4 	bne.w	34007882 <HAL_RCCEx_PeriphCLKConfig+0x265a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005efa:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005efc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005f00:	d004      	beq.n	34005f0c <HAL_RCCEx_PeriphCLKConfig+0xce4>
34005f02:	f44f 618a 	mov.w	r1, #1104	@ 0x450
34005f06:	48b6      	ldr	r0, [pc, #728]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34005f08:	f7fb f930 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005f0c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005f0e:	3b01      	subs	r3, #1
34005f10:	2bff      	cmp	r3, #255	@ 0xff
34005f12:	d904      	bls.n	34005f1e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
34005f14:	f240 4151 	movw	r1, #1105	@ 0x451
34005f18:	48b1      	ldr	r0, [pc, #708]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34005f1a:	f7fb f927 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005f1e:	4ab2      	ldr	r2, [pc, #712]	@ (340061e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
34005f20:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005f22:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005f26:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005f28:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005f2c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005f30:	3901      	subs	r1, #1
34005f32:	4303      	orrs	r3, r0
34005f34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005f38:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005f3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005f40:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005f44:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
34005f48:	f7ff f886 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34005f4c:	6823      	ldr	r3, [r4, #0]
34005f4e:	031a      	lsls	r2, r3, #12
34005f50:	d540      	bpl.n	34005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdac>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
34005f52:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34005f56:	4aa5      	ldr	r2, [pc, #660]	@ (340061ec <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
34005f58:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005f5c:	4291      	cmp	r1, r2
34005f5e:	d00a      	beq.n	34005f76 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
34005f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005f64:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005f68:	4293      	cmp	r3, r2
34005f6a:	d004      	beq.n	34005f76 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
34005f6c:	f240 416b 	movw	r1, #1131	@ 0x46b
34005f70:	489b      	ldr	r0, [pc, #620]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34005f72:	f7fb f8fb 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34005f76:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34005f7a:	4a9d      	ldr	r2, [pc, #628]	@ (340061f0 <HAL_RCCEx_PeriphCLKConfig+0xfc8>)
34005f7c:	4293      	cmp	r3, r2
34005f7e:	f041 8489 	bne.w	34007894 <HAL_RCCEx_PeriphCLKConfig+0x266c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005f82:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005f84:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005f88:	d004      	beq.n	34005f94 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
34005f8a:	f44f 618e 	mov.w	r1, #1136	@ 0x470
34005f8e:	4894      	ldr	r0, [pc, #592]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34005f90:	f7fb f8ec 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005f94:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005f96:	3b01      	subs	r3, #1
34005f98:	2bff      	cmp	r3, #255	@ 0xff
34005f9a:	d904      	bls.n	34005fa6 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
34005f9c:	f240 4171 	movw	r1, #1137	@ 0x471
34005fa0:	488f      	ldr	r0, [pc, #572]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34005fa2:	f7fb f8e3 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005fa6:	4a90      	ldr	r2, [pc, #576]	@ (340061e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
34005fa8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005faa:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005fae:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005fb0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005fb4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005fb8:	3901      	subs	r1, #1
34005fba:	4303      	orrs	r3, r0
34005fbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005fc0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005fc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005fc8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005fcc:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
34005fd0:	f7ff f842 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34005fd4:	6823      	ldr	r3, [r4, #0]
34005fd6:	02db      	lsls	r3, r3, #11
34005fd8:	d540      	bpl.n	3400605c <HAL_RCCEx_PeriphCLKConfig+0xe34>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
34005fda:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34005fde:	4a85      	ldr	r2, [pc, #532]	@ (340061f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>)
34005fe0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005fe4:	4291      	cmp	r1, r2
34005fe6:	d00a      	beq.n	34005ffe <HAL_RCCEx_PeriphCLKConfig+0xdd6>
34005fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34005fec:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005ff0:	4293      	cmp	r3, r2
34005ff2:	d004      	beq.n	34005ffe <HAL_RCCEx_PeriphCLKConfig+0xdd6>
34005ff4:	f240 418b 	movw	r1, #1163	@ 0x48b
34005ff8:	4879      	ldr	r0, [pc, #484]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34005ffa:	f7fb f8b7 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34005ffe:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34006002:	4a7d      	ldr	r2, [pc, #500]	@ (340061f8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
34006004:	4293      	cmp	r3, r2
34006006:	f041 844e 	bne.w	340078a6 <HAL_RCCEx_PeriphCLKConfig+0x267e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400600a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400600c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006010:	d004      	beq.n	3400601c <HAL_RCCEx_PeriphCLKConfig+0xdf4>
34006012:	f44f 6192 	mov.w	r1, #1168	@ 0x490
34006016:	4872      	ldr	r0, [pc, #456]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34006018:	f7fb f8a8 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400601c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400601e:	3b01      	subs	r3, #1
34006020:	2bff      	cmp	r3, #255	@ 0xff
34006022:	d904      	bls.n	3400602e <HAL_RCCEx_PeriphCLKConfig+0xe06>
34006024:	f240 4191 	movw	r1, #1169	@ 0x491
34006028:	486d      	ldr	r0, [pc, #436]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
3400602a:	f7fb f89f 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400602e:	4a6e      	ldr	r2, [pc, #440]	@ (340061e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
34006030:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006032:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006036:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006038:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400603c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006040:	3901      	subs	r1, #1
34006042:	4303      	orrs	r3, r0
34006044:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006048:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400604c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006050:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006054:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
34006058:	f7fe fffe 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3400605c:	6823      	ldr	r3, [r4, #0]
3400605e:	029e      	lsls	r6, r3, #10
34006060:	d540      	bpl.n	340060e4 <HAL_RCCEx_PeriphCLKConfig+0xebc>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
34006062:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
34006066:	4a65      	ldr	r2, [pc, #404]	@ (340061fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>)
34006068:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400606c:	4291      	cmp	r1, r2
3400606e:	d00a      	beq.n	34006086 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
34006070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006074:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006078:	4293      	cmp	r3, r2
3400607a:	d004      	beq.n	34006086 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
3400607c:	f240 41ab 	movw	r1, #1195	@ 0x4ab
34006080:	4857      	ldr	r0, [pc, #348]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34006082:	f7fb f873 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34006086:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
3400608a:	4a5d      	ldr	r2, [pc, #372]	@ (34006200 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
3400608c:	4293      	cmp	r3, r2
3400608e:	f041 8413 	bne.w	340078b8 <HAL_RCCEx_PeriphCLKConfig+0x2690>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006092:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006094:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006098:	d004      	beq.n	340060a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
3400609a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
3400609e:	4850      	ldr	r0, [pc, #320]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
340060a0:	f7fb f864 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340060a4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340060a6:	3b01      	subs	r3, #1
340060a8:	2bff      	cmp	r3, #255	@ 0xff
340060aa:	d904      	bls.n	340060b6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
340060ac:	f240 41b1 	movw	r1, #1201	@ 0x4b1
340060b0:	484b      	ldr	r0, [pc, #300]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
340060b2:	f7fb f85b 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340060b6:	4a4c      	ldr	r2, [pc, #304]	@ (340061e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
340060b8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340060ba:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340060be:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340060c0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340060c4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340060c8:	3901      	subs	r1, #1
340060ca:	4303      	orrs	r3, r0
340060cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340060d0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340060d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340060d8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340060dc:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
340060e0:	f7fe ffba 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
340060e4:	6823      	ldr	r3, [r4, #0]
340060e6:	0258      	lsls	r0, r3, #9
340060e8:	d540      	bpl.n	3400616c <HAL_RCCEx_PeriphCLKConfig+0xf44>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
340060ea:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
340060ee:	4a45      	ldr	r2, [pc, #276]	@ (34006204 <HAL_RCCEx_PeriphCLKConfig+0xfdc>)
340060f0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340060f4:	4291      	cmp	r1, r2
340060f6:	d00a      	beq.n	3400610e <HAL_RCCEx_PeriphCLKConfig+0xee6>
340060f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340060fc:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006100:	4293      	cmp	r3, r2
34006102:	d004      	beq.n	3400610e <HAL_RCCEx_PeriphCLKConfig+0xee6>
34006104:	f240 41cb 	movw	r1, #1227	@ 0x4cb
34006108:	4835      	ldr	r0, [pc, #212]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
3400610a:	f7fb f82f 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3400610e:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34006112:	4a3d      	ldr	r2, [pc, #244]	@ (34006208 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
34006114:	4293      	cmp	r3, r2
34006116:	f041 83d8 	bne.w	340078ca <HAL_RCCEx_PeriphCLKConfig+0x26a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400611a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400611c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006120:	d004      	beq.n	3400612c <HAL_RCCEx_PeriphCLKConfig+0xf04>
34006122:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
34006126:	482e      	ldr	r0, [pc, #184]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34006128:	f7fb f820 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400612c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400612e:	3b01      	subs	r3, #1
34006130:	2bff      	cmp	r3, #255	@ 0xff
34006132:	d904      	bls.n	3400613e <HAL_RCCEx_PeriphCLKConfig+0xf16>
34006134:	f240 41d1 	movw	r1, #1233	@ 0x4d1
34006138:	4829      	ldr	r0, [pc, #164]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
3400613a:	f7fb f817 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400613e:	4a2a      	ldr	r2, [pc, #168]	@ (340061e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
34006140:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006142:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006146:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006148:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400614c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006150:	3901      	subs	r1, #1
34006152:	4303      	orrs	r3, r0
34006154:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006158:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400615c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006160:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006164:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
34006168:	f7fe ff76 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3400616c:	6823      	ldr	r3, [r4, #0]
3400616e:	0219      	lsls	r1, r3, #8
34006170:	d55e      	bpl.n	34006230 <HAL_RCCEx_PeriphCLKConfig+0x1008>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
34006172:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
34006176:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
3400617a:	d00c      	beq.n	34006196 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
3400617c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34006180:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
34006184:	d007      	beq.n	34006196 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34006186:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400618a:	d004      	beq.n	34006196 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
3400618c:	f240 41eb 	movw	r1, #1259	@ 0x4eb
34006190:	4813      	ldr	r0, [pc, #76]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34006192:	f7fa ffeb 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34006196:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
3400619a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400619e:	f041 839d 	bne.w	340078dc <HAL_RCCEx_PeriphCLKConfig+0x26b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340061a2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340061a4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340061a8:	d004      	beq.n	340061b4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
340061aa:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
340061ae:	480c      	ldr	r0, [pc, #48]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
340061b0:	f7fa ffdc 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340061b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340061b6:	3b01      	subs	r3, #1
340061b8:	2bff      	cmp	r3, #255	@ 0xff
340061ba:	d904      	bls.n	340061c6 <HAL_RCCEx_PeriphCLKConfig+0xf9e>
340061bc:	f240 41f1 	movw	r1, #1265	@ 0x4f1
340061c0:	4807      	ldr	r0, [pc, #28]	@ (340061e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
340061c2:	f7fa ffd3 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340061c6:	4a08      	ldr	r2, [pc, #32]	@ (340061e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
340061c8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340061ca:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340061ce:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340061d0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340061d4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340061d8:	3901      	subs	r1, #1
340061da:	4303      	orrs	r3, r0
340061dc:	e016      	b.n	3400620c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
340061de:	bf00      	nop
340061e0:	3401094f 	.word	0x3401094f
340061e4:	0702082c 	.word	0x0702082c
340061e8:	56028000 	.word	0x56028000
340061ec:	07000c2c 	.word	0x07000c2c
340061f0:	07020c2c 	.word	0x07020c2c
340061f4:	0700102c 	.word	0x0700102c
340061f8:	0702102c 	.word	0x0702102c
340061fc:	0700142c 	.word	0x0700142c
34006200:	0702142c 	.word	0x0702142c
34006204:	0700182c 	.word	0x0700182c
34006208:	0702182c 	.word	0x0702182c
3400620c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006210:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006214:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006218:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
3400621c:	4ac1      	ldr	r2, [pc, #772]	@ (34006524 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400621e:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
34006222:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34006226:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
3400622a:	430b      	orrs	r3, r1
3400622c:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34006230:	6823      	ldr	r3, [r4, #0]
34006232:	01da      	lsls	r2, r3, #7
34006234:	d542      	bpl.n	340062bc <HAL_RCCEx_PeriphCLKConfig+0x1094>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
34006236:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
3400623a:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
3400623e:	d004      	beq.n	3400624a <HAL_RCCEx_PeriphCLKConfig+0x1022>
34006240:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
34006244:	48b8      	ldr	r0, [pc, #736]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34006246:	f7fa ff91 	bl	3400116c <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3400624a:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
3400624e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34006252:	f041 8374 	bne.w	3400793e <HAL_RCCEx_PeriphCLKConfig+0x2716>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
34006256:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
3400625a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400625e:	d004      	beq.n	3400626a <HAL_RCCEx_PeriphCLKConfig+0x1042>
34006260:	f240 511d 	movw	r1, #1309	@ 0x51d
34006264:	48b0      	ldr	r0, [pc, #704]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34006266:	f7fa ff81 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
3400626a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
3400626e:	3b01      	subs	r3, #1
34006270:	2bff      	cmp	r3, #255	@ 0xff
34006272:	d904      	bls.n	3400627e <HAL_RCCEx_PeriphCLKConfig+0x1056>
34006274:	f240 511e 	movw	r1, #1310	@ 0x51e
34006278:	48ab      	ldr	r0, [pc, #684]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
3400627a:	f7fa ff77 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3400627e:	4aa9      	ldr	r2, [pc, #676]	@ (34006524 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
34006280:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
34006284:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
34006288:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
3400628c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006290:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006294:	3901      	subs	r1, #1
34006296:	4303      	orrs	r3, r0
34006298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400629c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
340062a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340062a4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
340062a8:	4a9e      	ldr	r2, [pc, #632]	@ (34006524 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
340062aa:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
340062ae:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
340062b2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
340062b6:	430b      	orrs	r3, r1
340062b8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
340062bc:	6823      	ldr	r3, [r4, #0]
340062be:	019b      	lsls	r3, r3, #6
340062c0:	d540      	bpl.n	34006344 <HAL_RCCEx_PeriphCLKConfig+0x111c>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
340062c2:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340062c6:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340062ca:	d007      	beq.n	340062dc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
340062cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340062d0:	d004      	beq.n	340062dc <HAL_RCCEx_PeriphCLKConfig+0x10b4>
340062d2:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
340062d6:	4894      	ldr	r0, [pc, #592]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
340062d8:	f7fa ff48 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
340062dc:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340062e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340062e4:	f041 8334 	bne.w	34007950 <HAL_RCCEx_PeriphCLKConfig+0x2728>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340062e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340062ea:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340062ee:	d004      	beq.n	340062fa <HAL_RCCEx_PeriphCLKConfig+0x10d2>
340062f0:	f240 513d 	movw	r1, #1341	@ 0x53d
340062f4:	488c      	ldr	r0, [pc, #560]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
340062f6:	f7fa ff39 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340062fa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340062fc:	3b01      	subs	r3, #1
340062fe:	2bff      	cmp	r3, #255	@ 0xff
34006300:	d904      	bls.n	3400630c <HAL_RCCEx_PeriphCLKConfig+0x10e4>
34006302:	f240 513e 	movw	r1, #1342	@ 0x53e
34006306:	4888      	ldr	r0, [pc, #544]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34006308:	f7fa ff30 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400630c:	4a85      	ldr	r2, [pc, #532]	@ (34006524 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400630e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006310:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34006314:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34006316:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400631a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400631e:	3901      	subs	r1, #1
34006320:	4303      	orrs	r3, r0
34006322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006326:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3400632a:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400632c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34006330:	4a7c      	ldr	r2, [pc, #496]	@ (34006524 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
34006332:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
34006336:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
3400633a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3400633e:	430b      	orrs	r3, r1
34006340:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34006344:	6823      	ldr	r3, [r4, #0]
34006346:	015e      	lsls	r6, r3, #5
34006348:	d541      	bpl.n	340063ce <HAL_RCCEx_PeriphCLKConfig+0x11a6>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
3400634a:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
3400634e:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34006352:	d004      	beq.n	3400635e <HAL_RCCEx_PeriphCLKConfig+0x1136>
34006354:	f240 5165 	movw	r1, #1381	@ 0x565
34006358:	4873      	ldr	r0, [pc, #460]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
3400635a:	f7fa ff07 	bl	3400116c <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3400635e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
34006362:	2b20      	cmp	r3, #32
34006364:	f041 8324 	bne.w	340079b0 <HAL_RCCEx_PeriphCLKConfig+0x2788>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
34006368:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
3400636c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006370:	d004      	beq.n	3400637c <HAL_RCCEx_PeriphCLKConfig+0x1154>
34006372:	f240 516a 	movw	r1, #1386	@ 0x56a
34006376:	486c      	ldr	r0, [pc, #432]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34006378:	f7fa fef8 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400637c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34006380:	3b01      	subs	r3, #1
34006382:	2bff      	cmp	r3, #255	@ 0xff
34006384:	d904      	bls.n	34006390 <HAL_RCCEx_PeriphCLKConfig+0x1168>
34006386:	f240 516b 	movw	r1, #1387	@ 0x56b
3400638a:	4867      	ldr	r0, [pc, #412]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
3400638c:	f7fa feee 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34006390:	4a64      	ldr	r2, [pc, #400]	@ (34006524 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
34006392:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34006396:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
3400639a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
3400639e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340063a2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340063a6:	3901      	subs	r1, #1
340063a8:	4303      	orrs	r3, r0
340063aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340063ae:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340063b2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
340063b6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
340063ba:	4a5a      	ldr	r2, [pc, #360]	@ (34006524 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
340063bc:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
340063c0:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340063c4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340063c8:	430b      	orrs	r3, r1
340063ca:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
340063ce:	6823      	ldr	r3, [r4, #0]
340063d0:	00d8      	lsls	r0, r3, #3
340063d2:	d53d      	bpl.n	34006450 <HAL_RCCEx_PeriphCLKConfig+0x1228>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
340063d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
340063d8:	4a54      	ldr	r2, [pc, #336]	@ (3400652c <HAL_RCCEx_PeriphCLKConfig+0x1304>)
340063da:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340063de:	4293      	cmp	r3, r2
340063e0:	d008      	beq.n	340063f4 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
340063e2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340063e6:	4293      	cmp	r3, r2
340063e8:	d004      	beq.n	340063f4 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
340063ea:	f240 5185 	movw	r1, #1413	@ 0x585
340063ee:	484e      	ldr	r0, [pc, #312]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
340063f0:	f7fa febc 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
340063f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
340063f8:	4a4d      	ldr	r2, [pc, #308]	@ (34006530 <HAL_RCCEx_PeriphCLKConfig+0x1308>)
340063fa:	4293      	cmp	r3, r2
340063fc:	f041 82e0 	bne.w	340079c0 <HAL_RCCEx_PeriphCLKConfig+0x2798>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34006400:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34006402:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006406:	d004      	beq.n	34006412 <HAL_RCCEx_PeriphCLKConfig+0x11ea>
34006408:	f240 518a 	movw	r1, #1418	@ 0x58a
3400640c:	4846      	ldr	r0, [pc, #280]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
3400640e:	f7fa fead 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006412:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006414:	3b01      	subs	r3, #1
34006416:	2bff      	cmp	r3, #255	@ 0xff
34006418:	d904      	bls.n	34006424 <HAL_RCCEx_PeriphCLKConfig+0x11fc>
3400641a:	f240 518b 	movw	r1, #1419	@ 0x58b
3400641e:	4842      	ldr	r0, [pc, #264]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34006420:	f7fa fea4 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006424:	4a3f      	ldr	r2, [pc, #252]	@ (34006524 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
34006426:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34006428:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400642c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3400642e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006432:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006436:	3901      	subs	r1, #1
34006438:	4303      	orrs	r3, r0
3400643a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400643e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006442:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006444:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006448:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
3400644c:	f7fe fe04 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34006450:	6823      	ldr	r3, [r4, #0]
34006452:	0099      	lsls	r1, r3, #2
34006454:	d53d      	bpl.n	340064d2 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
34006456:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
3400645a:	4a36      	ldr	r2, [pc, #216]	@ (34006534 <HAL_RCCEx_PeriphCLKConfig+0x130c>)
3400645c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34006460:	4293      	cmp	r3, r2
34006462:	d008      	beq.n	34006476 <HAL_RCCEx_PeriphCLKConfig+0x124e>
34006464:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006468:	4293      	cmp	r3, r2
3400646a:	d004      	beq.n	34006476 <HAL_RCCEx_PeriphCLKConfig+0x124e>
3400646c:	f240 51b2 	movw	r1, #1458	@ 0x5b2
34006470:	482d      	ldr	r0, [pc, #180]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34006472:	f7fa fe7b 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
34006476:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
3400647a:	4a2f      	ldr	r2, [pc, #188]	@ (34006538 <HAL_RCCEx_PeriphCLKConfig+0x1310>)
3400647c:	4293      	cmp	r3, r2
3400647e:	f041 82cf 	bne.w	34007a20 <HAL_RCCEx_PeriphCLKConfig+0x27f8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34006482:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34006484:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006488:	d004      	beq.n	34006494 <HAL_RCCEx_PeriphCLKConfig+0x126c>
3400648a:	f240 51b7 	movw	r1, #1463	@ 0x5b7
3400648e:	4826      	ldr	r0, [pc, #152]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34006490:	f7fa fe6c 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006494:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006496:	3b01      	subs	r3, #1
34006498:	2bff      	cmp	r3, #255	@ 0xff
3400649a:	d904      	bls.n	340064a6 <HAL_RCCEx_PeriphCLKConfig+0x127e>
3400649c:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
340064a0:	4821      	ldr	r0, [pc, #132]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
340064a2:	f7fa fe63 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340064a6:	4a1f      	ldr	r2, [pc, #124]	@ (34006524 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
340064a8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340064aa:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340064ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340064b0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340064b4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340064b8:	3901      	subs	r1, #1
340064ba:	4303      	orrs	r3, r0
340064bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340064c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340064c4:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340064c6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340064ca:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
340064ce:	f7fe fdc3 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
340064d2:	6863      	ldr	r3, [r4, #4]
340064d4:	07da      	lsls	r2, r3, #31
340064d6:	d548      	bpl.n	3400656a <HAL_RCCEx_PeriphCLKConfig+0x1342>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
340064d8:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
340064dc:	2b06      	cmp	r3, #6
340064de:	d904      	bls.n	340064ea <HAL_RCCEx_PeriphCLKConfig+0x12c2>
340064e0:	f240 51df 	movw	r1, #1503	@ 0x5df
340064e4:	4810      	ldr	r0, [pc, #64]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
340064e6:	f7fa fe41 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
340064ea:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
340064ee:	2b02      	cmp	r3, #2
340064f0:	f041 82c6 	bne.w	34007a80 <HAL_RCCEx_PeriphCLKConfig+0x2858>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340064f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340064f6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340064fa:	d004      	beq.n	34006506 <HAL_RCCEx_PeriphCLKConfig+0x12de>
340064fc:	f240 51e4 	movw	r1, #1508	@ 0x5e4
34006500:	4809      	ldr	r0, [pc, #36]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34006502:	f7fa fe33 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34006506:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34006508:	3b01      	subs	r3, #1
3400650a:	2bff      	cmp	r3, #255	@ 0xff
3400650c:	d904      	bls.n	34006518 <HAL_RCCEx_PeriphCLKConfig+0x12f0>
3400650e:	f240 51e5 	movw	r1, #1509	@ 0x5e5
34006512:	4805      	ldr	r0, [pc, #20]	@ (34006528 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34006514:	f7fa fe2a 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34006518:	4a02      	ldr	r2, [pc, #8]	@ (34006524 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400651a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400651c:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34006520:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34006522:	e00b      	b.n	3400653c <HAL_RCCEx_PeriphCLKConfig+0x1314>
34006524:	56028000 	.word	0x56028000
34006528:	3401094f 	.word	0x3401094f
3400652c:	07001418 	.word	0x07001418
34006530:	07021418 	.word	0x07021418
34006534:	07001818 	.word	0x07001818
34006538:	07021818 	.word	0x07021818
3400653c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006540:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006544:	3901      	subs	r1, #1
34006546:	4303      	orrs	r3, r0
34006548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400654c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34006550:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006552:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34006556:	4abc      	ldr	r2, [pc, #752]	@ (34006848 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
34006558:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
3400655c:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
34006560:	f023 0307 	bic.w	r3, r3, #7
34006564:	430b      	orrs	r3, r1
34006566:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3400656a:	6863      	ldr	r3, [r4, #4]
3400656c:	079b      	lsls	r3, r3, #30
3400656e:	d543      	bpl.n	340065f8 <HAL_RCCEx_PeriphCLKConfig+0x13d0>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
34006570:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34006574:	4ab5      	ldr	r2, [pc, #724]	@ (3400684c <HAL_RCCEx_PeriphCLKConfig+0x1624>)
34006576:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400657a:	4291      	cmp	r1, r2
3400657c:	d00e      	beq.n	3400659c <HAL_RCCEx_PeriphCLKConfig+0x1374>
3400657e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006582:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006586:	4291      	cmp	r1, r2
34006588:	d008      	beq.n	3400659c <HAL_RCCEx_PeriphCLKConfig+0x1374>
3400658a:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400658e:	4293      	cmp	r3, r2
34006590:	d004      	beq.n	3400659c <HAL_RCCEx_PeriphCLKConfig+0x1374>
34006592:	f240 610c 	movw	r1, #1548	@ 0x60c
34006596:	48ae      	ldr	r0, [pc, #696]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
34006598:	f7fa fde8 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
3400659c:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
340065a0:	4aac      	ldr	r2, [pc, #688]	@ (34006854 <HAL_RCCEx_PeriphCLKConfig+0x162c>)
340065a2:	4293      	cmp	r3, r2
340065a4:	f041 82b4 	bne.w	34007b10 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340065a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340065aa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340065ae:	d004      	beq.n	340065ba <HAL_RCCEx_PeriphCLKConfig+0x1392>
340065b0:	f240 6111 	movw	r1, #1553	@ 0x611
340065b4:	48a6      	ldr	r0, [pc, #664]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340065b6:	f7fa fdd9 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340065ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340065bc:	3b01      	subs	r3, #1
340065be:	2bff      	cmp	r3, #255	@ 0xff
340065c0:	d904      	bls.n	340065cc <HAL_RCCEx_PeriphCLKConfig+0x13a4>
340065c2:	f240 6112 	movw	r1, #1554	@ 0x612
340065c6:	48a2      	ldr	r0, [pc, #648]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340065c8:	f7fa fdd0 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340065cc:	4a9e      	ldr	r2, [pc, #632]	@ (34006848 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
340065ce:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340065d0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340065d4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340065d6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340065da:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340065de:	3901      	subs	r1, #1
340065e0:	4303      	orrs	r3, r0
340065e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340065e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340065ea:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340065ec:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340065f0:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
340065f4:	f7fe fd30 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
340065f8:	6863      	ldr	r3, [r4, #4]
340065fa:	075e      	lsls	r6, r3, #29
340065fc:	d543      	bpl.n	34006686 <HAL_RCCEx_PeriphCLKConfig+0x145e>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
340065fe:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34006602:	4a95      	ldr	r2, [pc, #596]	@ (34006858 <HAL_RCCEx_PeriphCLKConfig+0x1630>)
34006604:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006608:	4291      	cmp	r1, r2
3400660a:	d00e      	beq.n	3400662a <HAL_RCCEx_PeriphCLKConfig+0x1402>
3400660c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006610:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006614:	4291      	cmp	r1, r2
34006616:	d008      	beq.n	3400662a <HAL_RCCEx_PeriphCLKConfig+0x1402>
34006618:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400661c:	4293      	cmp	r3, r2
3400661e:	d004      	beq.n	3400662a <HAL_RCCEx_PeriphCLKConfig+0x1402>
34006620:	f240 6139 	movw	r1, #1593	@ 0x639
34006624:	488a      	ldr	r0, [pc, #552]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
34006626:	f7fa fda1 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3400662a:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
3400662e:	4a8b      	ldr	r2, [pc, #556]	@ (3400685c <HAL_RCCEx_PeriphCLKConfig+0x1634>)
34006630:	4293      	cmp	r3, r2
34006632:	f041 829e 	bne.w	34007b72 <HAL_RCCEx_PeriphCLKConfig+0x294a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006636:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006638:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400663c:	d004      	beq.n	34006648 <HAL_RCCEx_PeriphCLKConfig+0x1420>
3400663e:	f240 613e 	movw	r1, #1598	@ 0x63e
34006642:	4883      	ldr	r0, [pc, #524]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
34006644:	f7fa fd92 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006648:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400664a:	3b01      	subs	r3, #1
3400664c:	2bff      	cmp	r3, #255	@ 0xff
3400664e:	d904      	bls.n	3400665a <HAL_RCCEx_PeriphCLKConfig+0x1432>
34006650:	f240 613f 	movw	r1, #1599	@ 0x63f
34006654:	487e      	ldr	r0, [pc, #504]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
34006656:	f7fa fd89 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400665a:	4a7b      	ldr	r2, [pc, #492]	@ (34006848 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
3400665c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3400665e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006662:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006664:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006668:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400666c:	3901      	subs	r1, #1
3400666e:	4303      	orrs	r3, r0
34006670:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006678:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400667a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400667e:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
34006682:	f7fe fce9 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34006686:	6863      	ldr	r3, [r4, #4]
34006688:	0718      	lsls	r0, r3, #28
3400668a:	d543      	bpl.n	34006714 <HAL_RCCEx_PeriphCLKConfig+0x14ec>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
3400668c:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34006690:	4a73      	ldr	r2, [pc, #460]	@ (34006860 <HAL_RCCEx_PeriphCLKConfig+0x1638>)
34006692:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006696:	4291      	cmp	r1, r2
34006698:	d00e      	beq.n	340066b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>
3400669a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400669e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340066a2:	4291      	cmp	r1, r2
340066a4:	d008      	beq.n	340066b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>
340066a6:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340066aa:	4293      	cmp	r3, r2
340066ac:	d004      	beq.n	340066b8 <HAL_RCCEx_PeriphCLKConfig+0x1490>
340066ae:	f240 6166 	movw	r1, #1638	@ 0x666
340066b2:	4867      	ldr	r0, [pc, #412]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340066b4:	f7fa fd5a 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
340066b8:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
340066bc:	4a69      	ldr	r2, [pc, #420]	@ (34006864 <HAL_RCCEx_PeriphCLKConfig+0x163c>)
340066be:	4293      	cmp	r3, r2
340066c0:	f041 8288 	bne.w	34007bd4 <HAL_RCCEx_PeriphCLKConfig+0x29ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340066c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340066c6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340066ca:	d004      	beq.n	340066d6 <HAL_RCCEx_PeriphCLKConfig+0x14ae>
340066cc:	f240 616b 	movw	r1, #1643	@ 0x66b
340066d0:	485f      	ldr	r0, [pc, #380]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340066d2:	f7fa fd4b 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340066d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340066d8:	3b01      	subs	r3, #1
340066da:	2bff      	cmp	r3, #255	@ 0xff
340066dc:	d904      	bls.n	340066e8 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
340066de:	f240 616c 	movw	r1, #1644	@ 0x66c
340066e2:	485b      	ldr	r0, [pc, #364]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340066e4:	f7fa fd42 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340066e8:	4a57      	ldr	r2, [pc, #348]	@ (34006848 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
340066ea:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340066ec:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340066f0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340066f2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340066f6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340066fa:	3901      	subs	r1, #1
340066fc:	4303      	orrs	r3, r0
340066fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006702:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006706:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006708:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400670c:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
34006710:	f7fe fca2 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34006714:	6863      	ldr	r3, [r4, #4]
34006716:	06d9      	lsls	r1, r3, #27
34006718:	d544      	bpl.n	340067a4 <HAL_RCCEx_PeriphCLKConfig+0x157c>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
3400671a:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400671e:	4a52      	ldr	r2, [pc, #328]	@ (34006868 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
34006720:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006724:	4291      	cmp	r1, r2
34006726:	d00e      	beq.n	34006746 <HAL_RCCEx_PeriphCLKConfig+0x151e>
34006728:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400672c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006730:	4291      	cmp	r1, r2
34006732:	d008      	beq.n	34006746 <HAL_RCCEx_PeriphCLKConfig+0x151e>
34006734:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006738:	4293      	cmp	r3, r2
3400673a:	d004      	beq.n	34006746 <HAL_RCCEx_PeriphCLKConfig+0x151e>
3400673c:	f240 6193 	movw	r1, #1683	@ 0x693
34006740:	4843      	ldr	r0, [pc, #268]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
34006742:	f7fa fd13 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34006746:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400674a:	4a48      	ldr	r2, [pc, #288]	@ (3400686c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
3400674c:	4293      	cmp	r3, r2
3400674e:	f041 8272 	bne.w	34007c36 <HAL_RCCEx_PeriphCLKConfig+0x2a0e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006752:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006754:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006758:	d004      	beq.n	34006764 <HAL_RCCEx_PeriphCLKConfig+0x153c>
3400675a:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
3400675e:	483c      	ldr	r0, [pc, #240]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
34006760:	f7fa fd04 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006764:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006766:	3b01      	subs	r3, #1
34006768:	2bff      	cmp	r3, #255	@ 0xff
3400676a:	d904      	bls.n	34006776 <HAL_RCCEx_PeriphCLKConfig+0x154e>
3400676c:	f240 6199 	movw	r1, #1689	@ 0x699
34006770:	4837      	ldr	r0, [pc, #220]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
34006772:	f7fa fcfb 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006776:	4a34      	ldr	r2, [pc, #208]	@ (34006848 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
34006778:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400677a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400677e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006780:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006784:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006788:	3901      	subs	r1, #1
3400678a:	4303      	orrs	r3, r0
3400678c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006790:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006794:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006798:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400679c:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
340067a0:	f7fe fc5a 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
340067a4:	6863      	ldr	r3, [r4, #4]
340067a6:	069a      	lsls	r2, r3, #26
340067a8:	d544      	bpl.n	34006834 <HAL_RCCEx_PeriphCLKConfig+0x160c>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
340067aa:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
340067ae:	4a30      	ldr	r2, [pc, #192]	@ (34006870 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
340067b0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340067b4:	4291      	cmp	r1, r2
340067b6:	d00e      	beq.n	340067d6 <HAL_RCCEx_PeriphCLKConfig+0x15ae>
340067b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340067bc:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340067c0:	4291      	cmp	r1, r2
340067c2:	d008      	beq.n	340067d6 <HAL_RCCEx_PeriphCLKConfig+0x15ae>
340067c4:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340067c8:	4293      	cmp	r3, r2
340067ca:	d004      	beq.n	340067d6 <HAL_RCCEx_PeriphCLKConfig+0x15ae>
340067cc:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
340067d0:	481f      	ldr	r0, [pc, #124]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340067d2:	f7fa fccb 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
340067d6:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
340067da:	4a26      	ldr	r2, [pc, #152]	@ (34006874 <HAL_RCCEx_PeriphCLKConfig+0x164c>)
340067dc:	4293      	cmp	r3, r2
340067de:	f041 825b 	bne.w	34007c98 <HAL_RCCEx_PeriphCLKConfig+0x2a70>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340067e2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340067e4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340067e8:	d004      	beq.n	340067f4 <HAL_RCCEx_PeriphCLKConfig+0x15cc>
340067ea:	f240 61c5 	movw	r1, #1733	@ 0x6c5
340067ee:	4818      	ldr	r0, [pc, #96]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340067f0:	f7fa fcbc 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340067f4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340067f6:	3b01      	subs	r3, #1
340067f8:	2bff      	cmp	r3, #255	@ 0xff
340067fa:	d904      	bls.n	34006806 <HAL_RCCEx_PeriphCLKConfig+0x15de>
340067fc:	f240 61c6 	movw	r1, #1734	@ 0x6c6
34006800:	4813      	ldr	r0, [pc, #76]	@ (34006850 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
34006802:	f7fa fcb3 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006806:	4a10      	ldr	r2, [pc, #64]	@ (34006848 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
34006808:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400680a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400680e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006810:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006814:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006818:	3901      	subs	r1, #1
3400681a:	4303      	orrs	r3, r0
3400681c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006820:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006824:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006828:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400682c:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
34006830:	f7fe fc12 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34006834:	6863      	ldr	r3, [r4, #4]
34006836:	065b      	lsls	r3, r3, #25
34006838:	d55e      	bpl.n	340068f8 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
3400683a:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
3400683e:	4a0e      	ldr	r2, [pc, #56]	@ (34006878 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
34006840:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006844:	4291      	cmp	r1, r2
34006846:	e019      	b.n	3400687c <HAL_RCCEx_PeriphCLKConfig+0x1654>
34006848:	56028000 	.word	0x56028000
3400684c:	07000420 	.word	0x07000420
34006850:	3401094f 	.word	0x3401094f
34006854:	07020420 	.word	0x07020420
34006858:	07000820 	.word	0x07000820
3400685c:	07020820 	.word	0x07020820
34006860:	07000c20 	.word	0x07000c20
34006864:	07020c20 	.word	0x07020c20
34006868:	07001020 	.word	0x07001020
3400686c:	07021020 	.word	0x07021020
34006870:	07001420 	.word	0x07001420
34006874:	07021420 	.word	0x07021420
34006878:	07001820 	.word	0x07001820
3400687c:	d00e      	beq.n	3400689c <HAL_RCCEx_PeriphCLKConfig+0x1674>
3400687e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006882:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006886:	4291      	cmp	r1, r2
34006888:	d008      	beq.n	3400689c <HAL_RCCEx_PeriphCLKConfig+0x1674>
3400688a:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400688e:	4293      	cmp	r3, r2
34006890:	d004      	beq.n	3400689c <HAL_RCCEx_PeriphCLKConfig+0x1674>
34006892:	f240 61ed 	movw	r1, #1773	@ 0x6ed
34006896:	48ba      	ldr	r0, [pc, #744]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006898:	f7fa fc68 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3400689c:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
340068a0:	4ab8      	ldr	r2, [pc, #736]	@ (34006b84 <HAL_RCCEx_PeriphCLKConfig+0x195c>)
340068a2:	4293      	cmp	r3, r2
340068a4:	f041 8229 	bne.w	34007cfa <HAL_RCCEx_PeriphCLKConfig+0x2ad2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340068a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340068aa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340068ae:	d004      	beq.n	340068ba <HAL_RCCEx_PeriphCLKConfig+0x1692>
340068b0:	f240 61f2 	movw	r1, #1778	@ 0x6f2
340068b4:	48b2      	ldr	r0, [pc, #712]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340068b6:	f7fa fc59 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340068ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340068bc:	3b01      	subs	r3, #1
340068be:	2bff      	cmp	r3, #255	@ 0xff
340068c0:	d904      	bls.n	340068cc <HAL_RCCEx_PeriphCLKConfig+0x16a4>
340068c2:	f240 61f3 	movw	r1, #1779	@ 0x6f3
340068c6:	48ae      	ldr	r0, [pc, #696]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340068c8:	f7fa fc50 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340068cc:	4aae      	ldr	r2, [pc, #696]	@ (34006b88 <HAL_RCCEx_PeriphCLKConfig+0x1960>)
340068ce:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340068d0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340068d4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340068d6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340068da:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340068de:	3901      	subs	r1, #1
340068e0:	4303      	orrs	r3, r0
340068e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340068e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340068ea:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340068ec:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340068f0:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
340068f4:	f7fe fbb0 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
340068f8:	6863      	ldr	r3, [r4, #4]
340068fa:	05de      	lsls	r6, r3, #23
340068fc:	d544      	bpl.n	34006988 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
340068fe:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34006902:	4aa2      	ldr	r2, [pc, #648]	@ (34006b8c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
34006904:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006908:	4291      	cmp	r1, r2
3400690a:	d00e      	beq.n	3400692a <HAL_RCCEx_PeriphCLKConfig+0x1702>
3400690c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006910:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006914:	4291      	cmp	r1, r2
34006916:	d008      	beq.n	3400692a <HAL_RCCEx_PeriphCLKConfig+0x1702>
34006918:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3400691c:	4293      	cmp	r3, r2
3400691e:	d004      	beq.n	3400692a <HAL_RCCEx_PeriphCLKConfig+0x1702>
34006920:	f240 711a 	movw	r1, #1818	@ 0x71a
34006924:	4896      	ldr	r0, [pc, #600]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006926:	f7fa fc21 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
3400692a:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
3400692e:	4a98      	ldr	r2, [pc, #608]	@ (34006b90 <HAL_RCCEx_PeriphCLKConfig+0x1968>)
34006930:	4293      	cmp	r3, r2
34006932:	f041 8213 	bne.w	34007d5c <HAL_RCCEx_PeriphCLKConfig+0x2b34>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006936:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006938:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400693c:	d004      	beq.n	34006948 <HAL_RCCEx_PeriphCLKConfig+0x1720>
3400693e:	f240 711f 	movw	r1, #1823	@ 0x71f
34006942:	488f      	ldr	r0, [pc, #572]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006944:	f7fa fc12 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006948:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400694a:	3b01      	subs	r3, #1
3400694c:	2bff      	cmp	r3, #255	@ 0xff
3400694e:	d904      	bls.n	3400695a <HAL_RCCEx_PeriphCLKConfig+0x1732>
34006950:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
34006954:	488a      	ldr	r0, [pc, #552]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006956:	f7fa fc09 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400695a:	4a8b      	ldr	r2, [pc, #556]	@ (34006b88 <HAL_RCCEx_PeriphCLKConfig+0x1960>)
3400695c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400695e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006962:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006964:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006968:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400696c:	3901      	subs	r1, #1
3400696e:	4303      	orrs	r3, r0
34006970:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006974:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006978:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400697c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006980:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
34006984:	f7fe fb68 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34006988:	6863      	ldr	r3, [r4, #4]
3400698a:	0598      	lsls	r0, r3, #22
3400698c:	d544      	bpl.n	34006a18 <HAL_RCCEx_PeriphCLKConfig+0x17f0>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
3400698e:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34006992:	4a80      	ldr	r2, [pc, #512]	@ (34006b94 <HAL_RCCEx_PeriphCLKConfig+0x196c>)
34006994:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006998:	4291      	cmp	r1, r2
3400699a:	d00e      	beq.n	340069ba <HAL_RCCEx_PeriphCLKConfig+0x1792>
3400699c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340069a0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340069a4:	4291      	cmp	r1, r2
340069a6:	d008      	beq.n	340069ba <HAL_RCCEx_PeriphCLKConfig+0x1792>
340069a8:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340069ac:	4293      	cmp	r3, r2
340069ae:	d004      	beq.n	340069ba <HAL_RCCEx_PeriphCLKConfig+0x1792>
340069b0:	f240 7147 	movw	r1, #1863	@ 0x747
340069b4:	4872      	ldr	r0, [pc, #456]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340069b6:	f7fa fbd9 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
340069ba:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
340069be:	4a76      	ldr	r2, [pc, #472]	@ (34006b98 <HAL_RCCEx_PeriphCLKConfig+0x1970>)
340069c0:	4293      	cmp	r3, r2
340069c2:	f041 821d 	bne.w	34007e00 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340069c6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340069c8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340069cc:	d004      	beq.n	340069d8 <HAL_RCCEx_PeriphCLKConfig+0x17b0>
340069ce:	f240 714c 	movw	r1, #1868	@ 0x74c
340069d2:	486b      	ldr	r0, [pc, #428]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340069d4:	f7fa fbca 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340069d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340069da:	3b01      	subs	r3, #1
340069dc:	2bff      	cmp	r3, #255	@ 0xff
340069de:	d904      	bls.n	340069ea <HAL_RCCEx_PeriphCLKConfig+0x17c2>
340069e0:	f240 714d 	movw	r1, #1869	@ 0x74d
340069e4:	4866      	ldr	r0, [pc, #408]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340069e6:	f7fa fbc1 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340069ea:	4a67      	ldr	r2, [pc, #412]	@ (34006b88 <HAL_RCCEx_PeriphCLKConfig+0x1960>)
340069ec:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340069ee:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340069f2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340069f4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340069f8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340069fc:	3901      	subs	r1, #1
340069fe:	4303      	orrs	r3, r0
34006a00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006a04:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006a08:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006a0c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006a10:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
34006a14:	f7fe fb20 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34006a18:	6863      	ldr	r3, [r4, #4]
34006a1a:	0559      	lsls	r1, r3, #21
34006a1c:	d544      	bpl.n	34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1880>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
34006a1e:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34006a22:	4a5e      	ldr	r2, [pc, #376]	@ (34006b9c <HAL_RCCEx_PeriphCLKConfig+0x1974>)
34006a24:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006a28:	4291      	cmp	r1, r2
34006a2a:	d00e      	beq.n	34006a4a <HAL_RCCEx_PeriphCLKConfig+0x1822>
34006a2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006a30:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006a34:	4291      	cmp	r1, r2
34006a36:	d008      	beq.n	34006a4a <HAL_RCCEx_PeriphCLKConfig+0x1822>
34006a38:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006a3c:	4293      	cmp	r3, r2
34006a3e:	d004      	beq.n	34006a4a <HAL_RCCEx_PeriphCLKConfig+0x1822>
34006a40:	f240 7174 	movw	r1, #1908	@ 0x774
34006a44:	484e      	ldr	r0, [pc, #312]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006a46:	f7fa fb91 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34006a4a:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34006a4e:	4a54      	ldr	r2, [pc, #336]	@ (34006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1978>)
34006a50:	4293      	cmp	r3, r2
34006a52:	f041 8206 	bne.w	34007e62 <HAL_RCCEx_PeriphCLKConfig+0x2c3a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006a56:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006a58:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006a5c:	d004      	beq.n	34006a68 <HAL_RCCEx_PeriphCLKConfig+0x1840>
34006a5e:	f240 7179 	movw	r1, #1913	@ 0x779
34006a62:	4847      	ldr	r0, [pc, #284]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006a64:	f7fa fb82 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006a68:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006a6a:	3b01      	subs	r3, #1
34006a6c:	2bff      	cmp	r3, #255	@ 0xff
34006a6e:	d904      	bls.n	34006a7a <HAL_RCCEx_PeriphCLKConfig+0x1852>
34006a70:	f240 717a 	movw	r1, #1914	@ 0x77a
34006a74:	4842      	ldr	r0, [pc, #264]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006a76:	f7fa fb79 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006a7a:	4a43      	ldr	r2, [pc, #268]	@ (34006b88 <HAL_RCCEx_PeriphCLKConfig+0x1960>)
34006a7c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006a7e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006a82:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006a84:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006a88:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006a8c:	3901      	subs	r1, #1
34006a8e:	4303      	orrs	r3, r0
34006a90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006a94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006a9c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006aa0:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
34006aa4:	f7fe fad8 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34006aa8:	6863      	ldr	r3, [r4, #4]
34006aaa:	051a      	lsls	r2, r3, #20
34006aac:	d544      	bpl.n	34006b38 <HAL_RCCEx_PeriphCLKConfig+0x1910>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
34006aae:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34006ab2:	4a3c      	ldr	r2, [pc, #240]	@ (34006ba4 <HAL_RCCEx_PeriphCLKConfig+0x197c>)
34006ab4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006ab8:	4291      	cmp	r1, r2
34006aba:	d00e      	beq.n	34006ada <HAL_RCCEx_PeriphCLKConfig+0x18b2>
34006abc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006ac0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006ac4:	4291      	cmp	r1, r2
34006ac6:	d008      	beq.n	34006ada <HAL_RCCEx_PeriphCLKConfig+0x18b2>
34006ac8:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006acc:	4293      	cmp	r3, r2
34006ace:	d004      	beq.n	34006ada <HAL_RCCEx_PeriphCLKConfig+0x18b2>
34006ad0:	f240 71a1 	movw	r1, #1953	@ 0x7a1
34006ad4:	482a      	ldr	r0, [pc, #168]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006ad6:	f7fa fb49 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34006ada:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34006ade:	4a32      	ldr	r2, [pc, #200]	@ (34006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1980>)
34006ae0:	4293      	cmp	r3, r2
34006ae2:	f041 81ef 	bne.w	34007ec4 <HAL_RCCEx_PeriphCLKConfig+0x2c9c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006ae6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006ae8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006aec:	d004      	beq.n	34006af8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
34006aee:	f240 71a6 	movw	r1, #1958	@ 0x7a6
34006af2:	4823      	ldr	r0, [pc, #140]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006af4:	f7fa fb3a 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006af8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006afa:	3b01      	subs	r3, #1
34006afc:	2bff      	cmp	r3, #255	@ 0xff
34006afe:	d904      	bls.n	34006b0a <HAL_RCCEx_PeriphCLKConfig+0x18e2>
34006b00:	f240 71a7 	movw	r1, #1959	@ 0x7a7
34006b04:	481e      	ldr	r0, [pc, #120]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006b06:	f7fa fb31 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006b0a:	4a1f      	ldr	r2, [pc, #124]	@ (34006b88 <HAL_RCCEx_PeriphCLKConfig+0x1960>)
34006b0c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006b0e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006b12:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006b14:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006b18:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006b1c:	3901      	subs	r1, #1
34006b1e:	4303      	orrs	r3, r0
34006b20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006b24:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006b2c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006b30:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
34006b34:	f7fe fa90 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34006b38:	6863      	ldr	r3, [r4, #4]
34006b3a:	04db      	lsls	r3, r3, #19
34006b3c:	d55f      	bpl.n	34006bfe <HAL_RCCEx_PeriphCLKConfig+0x19d6>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
34006b3e:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34006b42:	4a1a      	ldr	r2, [pc, #104]	@ (34006bac <HAL_RCCEx_PeriphCLKConfig+0x1984>)
34006b44:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006b48:	4291      	cmp	r1, r2
34006b4a:	d00e      	beq.n	34006b6a <HAL_RCCEx_PeriphCLKConfig+0x1942>
34006b4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006b50:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006b54:	4291      	cmp	r1, r2
34006b56:	d008      	beq.n	34006b6a <HAL_RCCEx_PeriphCLKConfig+0x1942>
34006b58:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006b5c:	4293      	cmp	r3, r2
34006b5e:	d004      	beq.n	34006b6a <HAL_RCCEx_PeriphCLKConfig+0x1942>
34006b60:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34006b64:	4806      	ldr	r0, [pc, #24]	@ (34006b80 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34006b66:	f7fa fb01 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34006b6a:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34006b6e:	4a10      	ldr	r2, [pc, #64]	@ (34006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1988>)
34006b70:	4293      	cmp	r3, r2
34006b72:	f041 81d8 	bne.w	34007f26 <HAL_RCCEx_PeriphCLKConfig+0x2cfe>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006b76:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006b78:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006b7c:	d01f      	beq.n	34006bbe <HAL_RCCEx_PeriphCLKConfig+0x1996>
34006b7e:	e019      	b.n	34006bb4 <HAL_RCCEx_PeriphCLKConfig+0x198c>
34006b80:	3401094f 	.word	0x3401094f
34006b84:	07021820 	.word	0x07021820
34006b88:	56028000 	.word	0x56028000
34006b8c:	07000030 	.word	0x07000030
34006b90:	07020030 	.word	0x07020030
34006b94:	07000430 	.word	0x07000430
34006b98:	07020430 	.word	0x07020430
34006b9c:	07000830 	.word	0x07000830
34006ba0:	07020830 	.word	0x07020830
34006ba4:	07000c30 	.word	0x07000c30
34006ba8:	07020c30 	.word	0x07020c30
34006bac:	07001030 	.word	0x07001030
34006bb0:	07021030 	.word	0x07021030
34006bb4:	f240 71d3 	movw	r1, #2003	@ 0x7d3
34006bb8:	48bc      	ldr	r0, [pc, #752]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006bba:	f7fa fad7 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006bbe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006bc0:	3b01      	subs	r3, #1
34006bc2:	2bff      	cmp	r3, #255	@ 0xff
34006bc4:	d904      	bls.n	34006bd0 <HAL_RCCEx_PeriphCLKConfig+0x19a8>
34006bc6:	f240 71d4 	movw	r1, #2004	@ 0x7d4
34006bca:	48b8      	ldr	r0, [pc, #736]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006bcc:	f7fa face 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006bd0:	4ab7      	ldr	r2, [pc, #732]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34006bd2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006bd4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006bd8:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006bda:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006bde:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006be2:	3901      	subs	r1, #1
34006be4:	4303      	orrs	r3, r0
34006be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006bea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006bee:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006bf2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006bf6:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
34006bfa:	f7fe fa2d 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34006bfe:	6863      	ldr	r3, [r4, #4]
34006c00:	049e      	lsls	r6, r3, #18
34006c02:	d544      	bpl.n	34006c8e <HAL_RCCEx_PeriphCLKConfig+0x1a66>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
34006c04:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34006c08:	4aaa      	ldr	r2, [pc, #680]	@ (34006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8c>)
34006c0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006c0e:	4291      	cmp	r1, r2
34006c10:	d00e      	beq.n	34006c30 <HAL_RCCEx_PeriphCLKConfig+0x1a08>
34006c12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006c16:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006c1a:	4291      	cmp	r1, r2
34006c1c:	d008      	beq.n	34006c30 <HAL_RCCEx_PeriphCLKConfig+0x1a08>
34006c1e:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006c22:	4293      	cmp	r3, r2
34006c24:	d004      	beq.n	34006c30 <HAL_RCCEx_PeriphCLKConfig+0x1a08>
34006c26:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34006c2a:	48a0      	ldr	r0, [pc, #640]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006c2c:	f7fa fa9e 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34006c30:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34006c34:	4aa0      	ldr	r2, [pc, #640]	@ (34006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c90>)
34006c36:	4293      	cmp	r3, r2
34006c38:	f041 81a6 	bne.w	34007f88 <HAL_RCCEx_PeriphCLKConfig+0x2d60>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006c3c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006c3e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006c42:	d004      	beq.n	34006c4e <HAL_RCCEx_PeriphCLKConfig+0x1a26>
34006c44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34006c48:	4898      	ldr	r0, [pc, #608]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006c4a:	f7fa fa8f 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006c4e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006c50:	3b01      	subs	r3, #1
34006c52:	2bff      	cmp	r3, #255	@ 0xff
34006c54:	d904      	bls.n	34006c60 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
34006c56:	f640 0101 	movw	r1, #2049	@ 0x801
34006c5a:	4894      	ldr	r0, [pc, #592]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006c5c:	f7fa fa86 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006c60:	4a93      	ldr	r2, [pc, #588]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34006c62:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006c64:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006c68:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006c6a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006c6e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006c72:	3901      	subs	r1, #1
34006c74:	4303      	orrs	r3, r0
34006c76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006c7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006c7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006c82:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006c86:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
34006c8a:	f7fe f9e5 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34006c8e:	6863      	ldr	r3, [r4, #4]
34006c90:	0458      	lsls	r0, r3, #17
34006c92:	d544      	bpl.n	34006d1e <HAL_RCCEx_PeriphCLKConfig+0x1af6>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
34006c94:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34006c98:	4a88      	ldr	r2, [pc, #544]	@ (34006ebc <HAL_RCCEx_PeriphCLKConfig+0x1c94>)
34006c9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006c9e:	4291      	cmp	r1, r2
34006ca0:	d00e      	beq.n	34006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a98>
34006ca2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006ca6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006caa:	4291      	cmp	r1, r2
34006cac:	d008      	beq.n	34006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a98>
34006cae:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006cb2:	4293      	cmp	r3, r2
34006cb4:	d004      	beq.n	34006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a98>
34006cb6:	f640 0128 	movw	r1, #2088	@ 0x828
34006cba:	487c      	ldr	r0, [pc, #496]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006cbc:	f7fa fa56 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34006cc0:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34006cc4:	4a7e      	ldr	r2, [pc, #504]	@ (34006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c98>)
34006cc6:	4293      	cmp	r3, r2
34006cc8:	f041 818f 	bne.w	34007fea <HAL_RCCEx_PeriphCLKConfig+0x2dc2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006ccc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006cce:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006cd2:	d004      	beq.n	34006cde <HAL_RCCEx_PeriphCLKConfig+0x1ab6>
34006cd4:	f640 012d 	movw	r1, #2093	@ 0x82d
34006cd8:	4874      	ldr	r0, [pc, #464]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006cda:	f7fa fa47 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006cde:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006ce0:	3b01      	subs	r3, #1
34006ce2:	2bff      	cmp	r3, #255	@ 0xff
34006ce4:	d904      	bls.n	34006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>
34006ce6:	f640 012e 	movw	r1, #2094	@ 0x82e
34006cea:	4870      	ldr	r0, [pc, #448]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006cec:	f7fa fa3e 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006cf0:	4a6f      	ldr	r2, [pc, #444]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34006cf2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006cf4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006cf8:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006cfa:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006cfe:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006d02:	3901      	subs	r1, #1
34006d04:	4303      	orrs	r3, r0
34006d06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006d0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006d12:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006d16:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
34006d1a:	f7fe f99d 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34006d1e:	6863      	ldr	r3, [r4, #4]
34006d20:	0419      	lsls	r1, r3, #16
34006d22:	d544      	bpl.n	34006dae <HAL_RCCEx_PeriphCLKConfig+0x1b86>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34006d24:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34006d28:	4a66      	ldr	r2, [pc, #408]	@ (34006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c9c>)
34006d2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006d2e:	4291      	cmp	r1, r2
34006d30:	d00e      	beq.n	34006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
34006d32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006d36:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006d3a:	4291      	cmp	r1, r2
34006d3c:	d008      	beq.n	34006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
34006d3e:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006d42:	4293      	cmp	r3, r2
34006d44:	d004      	beq.n	34006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
34006d46:	f640 0155 	movw	r1, #2133	@ 0x855
34006d4a:	4858      	ldr	r0, [pc, #352]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006d4c:	f7fa fa0e 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34006d50:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34006d54:	4a5c      	ldr	r2, [pc, #368]	@ (34006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1ca0>)
34006d56:	4293      	cmp	r3, r2
34006d58:	f041 8178 	bne.w	3400804c <HAL_RCCEx_PeriphCLKConfig+0x2e24>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006d5c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006d5e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006d62:	d004      	beq.n	34006d6e <HAL_RCCEx_PeriphCLKConfig+0x1b46>
34006d64:	f640 015a 	movw	r1, #2138	@ 0x85a
34006d68:	4850      	ldr	r0, [pc, #320]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006d6a:	f7fa f9ff 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006d6e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006d70:	3b01      	subs	r3, #1
34006d72:	2bff      	cmp	r3, #255	@ 0xff
34006d74:	d904      	bls.n	34006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
34006d76:	f640 015b 	movw	r1, #2139	@ 0x85b
34006d7a:	484c      	ldr	r0, [pc, #304]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006d7c:	f7fa f9f6 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006d80:	4a4b      	ldr	r2, [pc, #300]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34006d82:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006d84:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006d88:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006d8a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006d8e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006d92:	3901      	subs	r1, #1
34006d94:	4303      	orrs	r3, r0
34006d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006d9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006d9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006da2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006da6:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
34006daa:	f7fe f955 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34006dae:	6863      	ldr	r3, [r4, #4]
34006db0:	03da      	lsls	r2, r3, #15
34006db2:	d544      	bpl.n	34006e3e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
34006db4:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34006db8:	4a44      	ldr	r2, [pc, #272]	@ (34006ecc <HAL_RCCEx_PeriphCLKConfig+0x1ca4>)
34006dba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006dbe:	4291      	cmp	r1, r2
34006dc0:	d00e      	beq.n	34006de0 <HAL_RCCEx_PeriphCLKConfig+0x1bb8>
34006dc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006dc6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006dca:	4291      	cmp	r1, r2
34006dcc:	d008      	beq.n	34006de0 <HAL_RCCEx_PeriphCLKConfig+0x1bb8>
34006dce:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006dd2:	4293      	cmp	r3, r2
34006dd4:	d004      	beq.n	34006de0 <HAL_RCCEx_PeriphCLKConfig+0x1bb8>
34006dd6:	f640 0182 	movw	r1, #2178	@ 0x882
34006dda:	4834      	ldr	r0, [pc, #208]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006ddc:	f7fa f9c6 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34006de0:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34006de4:	4a3a      	ldr	r2, [pc, #232]	@ (34006ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ca8>)
34006de6:	4293      	cmp	r3, r2
34006de8:	f041 8182 	bne.w	340080f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006dec:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006dee:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006df2:	d004      	beq.n	34006dfe <HAL_RCCEx_PeriphCLKConfig+0x1bd6>
34006df4:	f640 0187 	movw	r1, #2183	@ 0x887
34006df8:	482c      	ldr	r0, [pc, #176]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006dfa:	f7fa f9b7 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006dfe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006e00:	3b01      	subs	r3, #1
34006e02:	2bff      	cmp	r3, #255	@ 0xff
34006e04:	d904      	bls.n	34006e10 <HAL_RCCEx_PeriphCLKConfig+0x1be8>
34006e06:	f640 0188 	movw	r1, #2184	@ 0x888
34006e0a:	4828      	ldr	r0, [pc, #160]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006e0c:	f7fa f9ae 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006e10:	4a27      	ldr	r2, [pc, #156]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34006e12:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006e14:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006e18:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006e1a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006e1e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006e22:	3901      	subs	r1, #1
34006e24:	4303      	orrs	r3, r0
34006e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006e2a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006e2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006e32:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006e36:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
34006e3a:	f7fe f90d 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34006e3e:	6863      	ldr	r3, [r4, #4]
34006e40:	039b      	lsls	r3, r3, #14
34006e42:	d55e      	bpl.n	34006f02 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
34006e44:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34006e48:	4a22      	ldr	r2, [pc, #136]	@ (34006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1cac>)
34006e4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006e4e:	4291      	cmp	r1, r2
34006e50:	d00e      	beq.n	34006e70 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
34006e52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006e56:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34006e5a:	4291      	cmp	r1, r2
34006e5c:	d008      	beq.n	34006e70 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
34006e5e:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34006e62:	4293      	cmp	r3, r2
34006e64:	d004      	beq.n	34006e70 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
34006e66:	f640 01af 	movw	r1, #2223	@ 0x8af
34006e6a:	4810      	ldr	r0, [pc, #64]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006e6c:	f7fa f97e 	bl	3400116c <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34006e70:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34006e74:	4a18      	ldr	r2, [pc, #96]	@ (34006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
34006e76:	4293      	cmp	r3, r2
34006e78:	f041 816b 	bne.w	34008152 <HAL_RCCEx_PeriphCLKConfig+0x2f2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006e7c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006e7e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006e82:	d004      	beq.n	34006e8e <HAL_RCCEx_PeriphCLKConfig+0x1c66>
34006e84:	f640 01b4 	movw	r1, #2228	@ 0x8b4
34006e88:	4808      	ldr	r0, [pc, #32]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006e8a:	f7fa f96f 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006e8e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006e90:	3b01      	subs	r3, #1
34006e92:	2bff      	cmp	r3, #255	@ 0xff
34006e94:	d904      	bls.n	34006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c78>
34006e96:	f640 01b5 	movw	r1, #2229	@ 0x8b5
34006e9a:	4804      	ldr	r0, [pc, #16]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34006e9c:	f7fa f966 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006ea0:	4a03      	ldr	r2, [pc, #12]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34006ea2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006ea4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006ea8:	e018      	b.n	34006edc <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
34006eaa:	bf00      	nop
34006eac:	3401094f 	.word	0x3401094f
34006eb0:	56028000 	.word	0x56028000
34006eb4:	07001430 	.word	0x07001430
34006eb8:	07021430 	.word	0x07021430
34006ebc:	07001830 	.word	0x07001830
34006ec0:	07021830 	.word	0x07021830
34006ec4:	07001c30 	.word	0x07001c30
34006ec8:	07021c30 	.word	0x07021c30
34006ecc:	07000034 	.word	0x07000034
34006ed0:	07020034 	.word	0x07020034
34006ed4:	07000434 	.word	0x07000434
34006ed8:	07020434 	.word	0x07020434
34006edc:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006ede:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006ee2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006ee6:	3901      	subs	r1, #1
34006ee8:	4303      	orrs	r3, r0
34006eea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006eee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006ef2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006ef6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34006efa:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
34006efe:	f7fe f8ab 	bl	34005058 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34006f02:	6863      	ldr	r3, [r4, #4]
34006f04:	035e      	lsls	r6, r3, #13
34006f06:	d51e      	bpl.n	34006f46 <HAL_RCCEx_PeriphCLKConfig+0x1d1e>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
34006f08:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34006f0c:	4ab1      	ldr	r2, [pc, #708]	@ (340071d4 <HAL_RCCEx_PeriphCLKConfig+0x1fac>)
34006f0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006f12:	4291      	cmp	r1, r2
34006f14:	d00a      	beq.n	34006f2c <HAL_RCCEx_PeriphCLKConfig+0x1d04>
34006f16:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34006f1a:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34006f1e:	4293      	cmp	r3, r2
34006f20:	d004      	beq.n	34006f2c <HAL_RCCEx_PeriphCLKConfig+0x1d04>
34006f22:	f640 01dc 	movw	r1, #2268	@ 0x8dc
34006f26:	48ac      	ldr	r0, [pc, #688]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34006f28:	f7fa f920 	bl	3400116c <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34006f2c:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
34006f30:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34006f34:	f7fe f890 	bl	34005058 <LL_RCC_SetClockSource>
34006f38:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34006f3c:	2b00      	cmp	r3, #0
34006f3e:	f281 8139 	bge.w	340081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8c>
34006f42:	f7fe f859 	bl	34004ff8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34006f46:	6863      	ldr	r3, [r4, #4]
34006f48:	02d8      	lsls	r0, r3, #11
34006f4a:	d51e      	bpl.n	34006f8a <HAL_RCCEx_PeriphCLKConfig+0x1d62>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
34006f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34006f50:	4aa2      	ldr	r2, [pc, #648]	@ (340071dc <HAL_RCCEx_PeriphCLKConfig+0x1fb4>)
34006f52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34006f56:	4291      	cmp	r1, r2
34006f58:	d00a      	beq.n	34006f70 <HAL_RCCEx_PeriphCLKConfig+0x1d48>
34006f5a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34006f5e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34006f62:	4293      	cmp	r3, r2
34006f64:	d004      	beq.n	34006f70 <HAL_RCCEx_PeriphCLKConfig+0x1d48>
34006f66:	f640 01e6 	movw	r1, #2278	@ 0x8e6
34006f6a:	489b      	ldr	r0, [pc, #620]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34006f6c:	f7fa f8fe 	bl	3400116c <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34006f70:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
34006f74:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34006f78:	f7fe f86e 	bl	34005058 <LL_RCC_SetClockSource>
34006f7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34006f80:	2b00      	cmp	r3, #0
34006f82:	f281 811b 	bge.w	340081bc <HAL_RCCEx_PeriphCLKConfig+0x2f94>
34006f86:	f7fe f837 	bl	34004ff8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34006f8a:	6863      	ldr	r3, [r4, #4]
34006f8c:	0319      	lsls	r1, r3, #12
34006f8e:	d549      	bpl.n	34007024 <HAL_RCCEx_PeriphCLKConfig+0x1dfc>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
34006f90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34006f94:	4a92      	ldr	r2, [pc, #584]	@ (340071e0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
34006f96:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34006f9a:	4291      	cmp	r1, r2
34006f9c:	d00a      	beq.n	34006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8c>
34006f9e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34006fa2:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34006fa6:	4293      	cmp	r3, r2
34006fa8:	d004      	beq.n	34006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8c>
34006faa:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
34006fae:	488a      	ldr	r0, [pc, #552]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34006fb0:	f7fa f8dc 	bl	3400116c <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34006fb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34006fb8:	4a8a      	ldr	r2, [pc, #552]	@ (340071e4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
34006fba:	4293      	cmp	r3, r2
34006fbc:	f041 8102 	bne.w	340081c4 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006fc0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006fc2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006fc6:	d004      	beq.n	34006fd2 <HAL_RCCEx_PeriphCLKConfig+0x1daa>
34006fc8:	f640 01f5 	movw	r1, #2293	@ 0x8f5
34006fcc:	4882      	ldr	r0, [pc, #520]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34006fce:	f7fa f8cd 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006fd2:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006fd4:	3b01      	subs	r3, #1
34006fd6:	2bff      	cmp	r3, #255	@ 0xff
34006fd8:	d904      	bls.n	34006fe4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>
34006fda:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34006fde:	487e      	ldr	r0, [pc, #504]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34006fe0:	f7fa f8c4 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006fe4:	4a80      	ldr	r2, [pc, #512]	@ (340071e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>)
34006fe6:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006fe8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006fec:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006fee:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006ff2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006ff6:	3901      	subs	r1, #1
34006ff8:	4303      	orrs	r3, r0
34006ffa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006ffe:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007002:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007006:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
3400700a:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
3400700e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34007012:	f7fe f821 	bl	34005058 <LL_RCC_SetClockSource>
34007016:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
3400701a:	2b00      	cmp	r3, #0
3400701c:	f281 80db 	bge.w	340081d6 <HAL_RCCEx_PeriphCLKConfig+0x2fae>
34007020:	f7fd ffea 	bl	34004ff8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34007024:	6863      	ldr	r3, [r4, #4]
34007026:	029a      	lsls	r2, r3, #10
34007028:	d549      	bpl.n	340070be <HAL_RCCEx_PeriphCLKConfig+0x1e96>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
3400702a:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
3400702e:	4a6f      	ldr	r2, [pc, #444]	@ (340071ec <HAL_RCCEx_PeriphCLKConfig+0x1fc4>)
34007030:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34007034:	4291      	cmp	r1, r2
34007036:	d00a      	beq.n	3400704e <HAL_RCCEx_PeriphCLKConfig+0x1e26>
34007038:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
3400703c:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34007040:	4293      	cmp	r3, r2
34007042:	d004      	beq.n	3400704e <HAL_RCCEx_PeriphCLKConfig+0x1e26>
34007044:	f44f 6111 	mov.w	r1, #2320	@ 0x910
34007048:	4863      	ldr	r0, [pc, #396]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
3400704a:	f7fa f88f 	bl	3400116c <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
3400704e:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34007052:	4a67      	ldr	r2, [pc, #412]	@ (340071f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc8>)
34007054:	4293      	cmp	r3, r2
34007056:	f041 80c2 	bne.w	340081de <HAL_RCCEx_PeriphCLKConfig+0x2fb6>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400705a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400705c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007060:	d004      	beq.n	3400706c <HAL_RCCEx_PeriphCLKConfig+0x1e44>
34007062:	f640 1115 	movw	r1, #2325	@ 0x915
34007066:	485c      	ldr	r0, [pc, #368]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34007068:	f7fa f880 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400706c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400706e:	3b01      	subs	r3, #1
34007070:	2bff      	cmp	r3, #255	@ 0xff
34007072:	d904      	bls.n	3400707e <HAL_RCCEx_PeriphCLKConfig+0x1e56>
34007074:	f640 1116 	movw	r1, #2326	@ 0x916
34007078:	4857      	ldr	r0, [pc, #348]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
3400707a:	f7fa f877 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400707e:	4a5a      	ldr	r2, [pc, #360]	@ (340071e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>)
34007080:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007082:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007086:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007088:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400708c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007090:	3901      	subs	r1, #1
34007092:	4303      	orrs	r3, r0
34007094:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007098:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400709c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340070a0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340070a4:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
340070a8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
340070ac:	f7fd ffd4 	bl	34005058 <LL_RCC_SetClockSource>
340070b0:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
340070b4:	2b00      	cmp	r3, #0
340070b6:	f281 809b 	bge.w	340081f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>
340070ba:	f7fd ff9d 	bl	34004ff8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
340070be:	6863      	ldr	r3, [r4, #4]
340070c0:	061b      	lsls	r3, r3, #24
340070c2:	d511      	bpl.n	340070e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
340070c4:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
340070c8:	2b03      	cmp	r3, #3
340070ca:	d904      	bls.n	340070d6 <HAL_RCCEx_PeriphCLKConfig+0x1eae>
340070cc:	f44f 6113 	mov.w	r1, #2352	@ 0x930
340070d0:	4841      	ldr	r0, [pc, #260]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
340070d2:	f7fa f84b 	bl	3400116c <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
340070d6:	4a44      	ldr	r2, [pc, #272]	@ (340071e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>)
340070d8:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
340070dc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340070de:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
340070e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
340070e6:	6253      	str	r3, [r2, #36]	@ 0x24
}
340070e8:	1e28      	subs	r0, r5, #0
340070ea:	bf18      	it	ne
340070ec:	2001      	movne	r0, #1
340070ee:	bd70      	pop	{r4, r5, r6, pc}
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
340070f0:	f401 7240 	and.w	r2, r1, #768	@ 0x300
340070f4:	429a      	cmp	r2, r3
340070f6:	f43e a912 	beq.w	3400531e <HAL_RCCEx_PeriphCLKConfig+0xf6>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
340070fa:	4b3e      	ldr	r3, [pc, #248]	@ (340071f4 <HAL_RCCEx_PeriphCLKConfig+0x1fcc>)
340070fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
340070fe:	f042 0201 	orr.w	r2, r2, #1
34007102:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34007104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34007106:	07db      	lsls	r3, r3, #31
34007108:	f53e a909 	bmi.w	3400531e <HAL_RCCEx_PeriphCLKConfig+0xf6>
        ret = HAL_ERROR;
3400710c:	2501      	movs	r5, #1
3400710e:	f7fe b92c 	b.w	3400536a <HAL_RCCEx_PeriphCLKConfig+0x142>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34007112:	f7fb f8e3 	bl	340022dc <HAL_GetTick>
34007116:	1b40      	subs	r0, r0, r5
34007118:	42b0      	cmp	r0, r6
3400711a:	f67e a908 	bls.w	3400532e <HAL_RCCEx_PeriphCLKConfig+0x106>
        status = ret;
3400711e:	2503      	movs	r5, #3
34007120:	f7fe b923 	b.w	3400536a <HAL_RCCEx_PeriphCLKConfig+0x142>
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
34007124:	3b03      	subs	r3, #3
34007126:	2b04      	cmp	r3, #4
34007128:	f63e a951 	bhi.w	340053ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
3400712c:	a201      	add	r2, pc, #4	@ (adr r2, 34007134 <HAL_RCCEx_PeriphCLKConfig+0x1f0c>)
3400712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34007132:	bf00      	nop
34007134:	340071f9 	.word	0x340071f9
34007138:	340053cf 	.word	0x340053cf
3400713c:	34007149 	.word	0x34007149
34007140:	3400718f 	.word	0x3400718f
34007144:	3400724b 	.word	0x3400724b
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34007148:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3400714a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400714e:	d003      	beq.n	34007158 <HAL_RCCEx_PeriphCLKConfig+0x1f30>
34007150:	21e6      	movs	r1, #230	@ 0xe6
34007152:	4821      	ldr	r0, [pc, #132]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34007154:	f7fa f80a 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34007158:	6d63      	ldr	r3, [r4, #84]	@ 0x54
3400715a:	3b01      	subs	r3, #1
3400715c:	2bff      	cmp	r3, #255	@ 0xff
3400715e:	d903      	bls.n	34007168 <HAL_RCCEx_PeriphCLKConfig+0x1f40>
34007160:	21e7      	movs	r1, #231	@ 0xe7
34007162:	481d      	ldr	r0, [pc, #116]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34007164:	f7fa f802 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34007168:	4a1f      	ldr	r2, [pc, #124]	@ (340071e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>)
3400716a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
3400716c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34007170:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34007172:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007176:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400717a:	3901      	subs	r1, #1
3400717c:	4303      	orrs	r3, r0
3400717e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007182:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34007186:	f44f 7300 	mov.w	r3, #512	@ 0x200
3400718a:	f7fe b91e 	b.w	340053ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400718e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007190:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007194:	d003      	beq.n	3400719e <HAL_RCCEx_PeriphCLKConfig+0x1f76>
34007196:	21f3      	movs	r1, #243	@ 0xf3
34007198:	480f      	ldr	r0, [pc, #60]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
3400719a:	f7f9 ffe7 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400719e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340071a0:	3b01      	subs	r3, #1
340071a2:	2bff      	cmp	r3, #255	@ 0xff
340071a4:	d903      	bls.n	340071ae <HAL_RCCEx_PeriphCLKConfig+0x1f86>
340071a6:	21f4      	movs	r1, #244	@ 0xf4
340071a8:	480b      	ldr	r0, [pc, #44]	@ (340071d8 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
340071aa:	f7f9 ffdf 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340071ae:	4a0e      	ldr	r2, [pc, #56]	@ (340071e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>)
340071b0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340071b2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340071b6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340071b8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340071bc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340071c0:	3901      	subs	r1, #1
340071c2:	4303      	orrs	r3, r0
340071c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340071c8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340071cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340071d0:	f7fe b8fb 	b.w	340053ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
340071d4:	01001014 	.word	0x01001014
340071d8:	3401094f 	.word	0x3401094f
340071dc:	01001814 	.word	0x01001814
340071e0:	03000c14 	.word	0x03000c14
340071e4:	03020c14 	.word	0x03020c14
340071e8:	56028000 	.word	0x56028000
340071ec:	03001414 	.word	0x03001414
340071f0:	03021414 	.word	0x03021414
340071f4:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
340071f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
340071fc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007200:	d004      	beq.n	3400720c <HAL_RCCEx_PeriphCLKConfig+0x1fe4>
34007202:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007206:	48b4      	ldr	r0, [pc, #720]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34007208:	f7f9 ffb0 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400720c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34007210:	3b01      	subs	r3, #1
34007212:	2bff      	cmp	r3, #255	@ 0xff
34007214:	d904      	bls.n	34007220 <HAL_RCCEx_PeriphCLKConfig+0x1ff8>
34007216:	f240 1101 	movw	r1, #257	@ 0x101
3400721a:	48af      	ldr	r0, [pc, #700]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
3400721c:	f7f9 ffa6 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34007220:	4aae      	ldr	r2, [pc, #696]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34007222:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34007226:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
3400722a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
3400722e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007232:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007236:	3901      	subs	r1, #1
34007238:	4303      	orrs	r3, r0
3400723a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400723e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34007242:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34007246:	f7fe b8c0 	b.w	340053ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400724a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
3400724e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007252:	d004      	beq.n	3400725e <HAL_RCCEx_PeriphCLKConfig+0x2036>
34007254:	f240 110d 	movw	r1, #269	@ 0x10d
34007258:	489f      	ldr	r0, [pc, #636]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
3400725a:	f7f9 ff87 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400725e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34007262:	3b01      	subs	r3, #1
34007264:	2bff      	cmp	r3, #255	@ 0xff
34007266:	d904      	bls.n	34007272 <HAL_RCCEx_PeriphCLKConfig+0x204a>
34007268:	f44f 7187 	mov.w	r1, #270	@ 0x10e
3400726c:	489a      	ldr	r0, [pc, #616]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
3400726e:	f7f9 ff7d 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34007272:	4a9a      	ldr	r2, [pc, #616]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34007274:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34007278:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
3400727c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34007280:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007284:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007288:	3901      	subs	r1, #1
3400728a:	4303      	orrs	r3, r0
3400728c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007290:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34007294:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34007298:	f7fe b897 	b.w	340053ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
3400729c:	4a90      	ldr	r2, [pc, #576]	@ (340074e0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400729e:	4293      	cmp	r3, r2
340072a0:	d123      	bne.n	340072ea <HAL_RCCEx_PeriphCLKConfig+0x20c2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340072a2:	6a23      	ldr	r3, [r4, #32]
340072a4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340072a8:	d004      	beq.n	340072b4 <HAL_RCCEx_PeriphCLKConfig+0x208c>
340072aa:	f44f 719b 	mov.w	r1, #310	@ 0x136
340072ae:	488a      	ldr	r0, [pc, #552]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
340072b0:	f7f9 ff5c 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340072b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340072b6:	3b01      	subs	r3, #1
340072b8:	2bff      	cmp	r3, #255	@ 0xff
340072ba:	d904      	bls.n	340072c6 <HAL_RCCEx_PeriphCLKConfig+0x209e>
340072bc:	f240 1137 	movw	r1, #311	@ 0x137
340072c0:	4885      	ldr	r0, [pc, #532]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
340072c2:	f7f9 ff53 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340072c6:	4a85      	ldr	r2, [pc, #532]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340072c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340072ca:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340072ce:	6a20      	ldr	r0, [r4, #32]
340072d0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340072d4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340072d8:	3901      	subs	r1, #1
340072da:	4303      	orrs	r3, r0
340072dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340072e0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340072e4:	2308      	movs	r3, #8
340072e6:	f7fe b8b3 	b.w	34005450 <HAL_RCCEx_PeriphCLKConfig+0x228>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
340072ea:	4a7e      	ldr	r2, [pc, #504]	@ (340074e4 <HAL_RCCEx_PeriphCLKConfig+0x22bc>)
340072ec:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340072ee:	bf02      	ittt	eq
340072f0:	2240      	moveq	r2, #64	@ 0x40
340072f2:	4b7a      	ldreq	r3, [pc, #488]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340072f4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340072f8:	f7fe b8ac 	b.w	34005454 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
340072fc:	4a7a      	ldr	r2, [pc, #488]	@ (340074e8 <HAL_RCCEx_PeriphCLKConfig+0x22c0>)
340072fe:	4293      	cmp	r3, r2
34007300:	d123      	bne.n	3400734a <HAL_RCCEx_PeriphCLKConfig+0x2122>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34007302:	6a23      	ldr	r3, [r4, #32]
34007304:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007308:	d004      	beq.n	34007314 <HAL_RCCEx_PeriphCLKConfig+0x20ec>
3400730a:	f240 1163 	movw	r1, #355	@ 0x163
3400730e:	4872      	ldr	r0, [pc, #456]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34007310:	f7f9 ff2c 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007314:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007316:	3b01      	subs	r3, #1
34007318:	2bff      	cmp	r3, #255	@ 0xff
3400731a:	d904      	bls.n	34007326 <HAL_RCCEx_PeriphCLKConfig+0x20fe>
3400731c:	f44f 71b2 	mov.w	r1, #356	@ 0x164
34007320:	486d      	ldr	r0, [pc, #436]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34007322:	f7f9 ff23 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007326:	4a6d      	ldr	r2, [pc, #436]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34007328:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400732a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400732e:	6a20      	ldr	r0, [r4, #32]
34007330:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007334:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007338:	3901      	subs	r1, #1
3400733a:	4303      	orrs	r3, r0
3400733c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007340:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34007344:	2308      	movs	r3, #8
34007346:	f7fe b8c0 	b.w	340054ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3400734a:	4a68      	ldr	r2, [pc, #416]	@ (340074ec <HAL_RCCEx_PeriphCLKConfig+0x22c4>)
3400734c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400734e:	bf02      	ittt	eq
34007350:	2240      	moveq	r2, #64	@ 0x40
34007352:	4b62      	ldreq	r3, [pc, #392]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34007354:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007358:	f7fe b8b9 	b.w	340054ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
3400735c:	4a64      	ldr	r2, [pc, #400]	@ (340074f0 <HAL_RCCEx_PeriphCLKConfig+0x22c8>)
3400735e:	4293      	cmp	r3, r2
34007360:	d123      	bne.n	340073aa <HAL_RCCEx_PeriphCLKConfig+0x2182>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34007362:	6a23      	ldr	r3, [r4, #32]
34007364:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007368:	d004      	beq.n	34007374 <HAL_RCCEx_PeriphCLKConfig+0x214c>
3400736a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
3400736e:	485a      	ldr	r0, [pc, #360]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34007370:	f7f9 fefc 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34007374:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34007376:	3b01      	subs	r3, #1
34007378:	2bff      	cmp	r3, #255	@ 0xff
3400737a:	d904      	bls.n	34007386 <HAL_RCCEx_PeriphCLKConfig+0x215e>
3400737c:	f240 1191 	movw	r1, #401	@ 0x191
34007380:	4855      	ldr	r0, [pc, #340]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34007382:	f7f9 fef3 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34007386:	4a55      	ldr	r2, [pc, #340]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34007388:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400738a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3400738e:	6a20      	ldr	r0, [r4, #32]
34007390:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007394:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007398:	3901      	subs	r1, #1
3400739a:	4303      	orrs	r3, r0
3400739c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340073a0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340073a4:	2308      	movs	r3, #8
340073a6:	f7fe b8e2 	b.w	3400556e <HAL_RCCEx_PeriphCLKConfig+0x346>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
340073aa:	4a52      	ldr	r2, [pc, #328]	@ (340074f4 <HAL_RCCEx_PeriphCLKConfig+0x22cc>)
340073ac:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340073ae:	bf02      	ittt	eq
340073b0:	2240      	moveq	r2, #64	@ 0x40
340073b2:	4b4a      	ldreq	r3, [pc, #296]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340073b4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340073b8:	f7fe b8db 	b.w	34005572 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
340073bc:	2b30      	cmp	r3, #48	@ 0x30
340073be:	d123      	bne.n	34007408 <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340073c0:	6a23      	ldr	r3, [r4, #32]
340073c2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340073c6:	d004      	beq.n	340073d2 <HAL_RCCEx_PeriphCLKConfig+0x21aa>
340073c8:	f240 11bd 	movw	r1, #445	@ 0x1bd
340073cc:	4842      	ldr	r0, [pc, #264]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
340073ce:	f7f9 fecd 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340073d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340073d4:	3b01      	subs	r3, #1
340073d6:	2bff      	cmp	r3, #255	@ 0xff
340073d8:	d904      	bls.n	340073e4 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
340073da:	f44f 71df 	mov.w	r1, #446	@ 0x1be
340073de:	483e      	ldr	r0, [pc, #248]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
340073e0:	f7f9 fec4 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340073e4:	4a3d      	ldr	r2, [pc, #244]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340073e6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340073e8:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340073ec:	6a20      	ldr	r0, [r4, #32]
340073ee:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340073f2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340073f6:	3901      	subs	r1, #1
340073f8:	4303      	orrs	r3, r0
340073fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340073fe:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34007402:	2308      	movs	r3, #8
34007404:	f7fe b8ed 	b.w	340055e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34007408:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400740a:	bf02      	ittt	eq
3400740c:	2240      	moveq	r2, #64	@ 0x40
3400740e:	4b33      	ldreq	r3, [pc, #204]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34007410:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007414:	f7fe b8e7 	b.w	340055e6 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34007418:	4a37      	ldr	r2, [pc, #220]	@ (340074f8 <HAL_RCCEx_PeriphCLKConfig+0x22d0>)
3400741a:	4293      	cmp	r3, r2
3400741c:	d123      	bne.n	34007466 <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400741e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34007420:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007424:	d004      	beq.n	34007430 <HAL_RCCEx_PeriphCLKConfig+0x2208>
34007426:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
3400742a:	482b      	ldr	r0, [pc, #172]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
3400742c:	f7f9 fe9e 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34007430:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34007432:	3b01      	subs	r3, #1
34007434:	2bff      	cmp	r3, #255	@ 0xff
34007436:	d904      	bls.n	34007442 <HAL_RCCEx_PeriphCLKConfig+0x221a>
34007438:	f240 11eb 	movw	r1, #491	@ 0x1eb
3400743c:	4826      	ldr	r0, [pc, #152]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
3400743e:	f7f9 fe95 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34007442:	4a26      	ldr	r2, [pc, #152]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34007444:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34007446:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
3400744a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
3400744c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007450:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007454:	3901      	subs	r1, #1
34007456:	4303      	orrs	r3, r0
34007458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400745c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34007460:	2310      	movs	r3, #16
34007462:	f7fe b901 	b.w	34005668 <HAL_RCCEx_PeriphCLKConfig+0x440>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
34007466:	4a25      	ldr	r2, [pc, #148]	@ (340074fc <HAL_RCCEx_PeriphCLKConfig+0x22d4>)
34007468:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400746a:	bf02      	ittt	eq
3400746c:	2240      	moveq	r2, #64	@ 0x40
3400746e:	4b1b      	ldreq	r3, [pc, #108]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34007470:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007474:	f7fe b8fa 	b.w	3400566c <HAL_RCCEx_PeriphCLKConfig+0x444>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
34007478:	4a21      	ldr	r2, [pc, #132]	@ (34007500 <HAL_RCCEx_PeriphCLKConfig+0x22d8>)
3400747a:	4293      	cmp	r3, r2
3400747c:	d123      	bne.n	340074c6 <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400747e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34007480:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007484:	d004      	beq.n	34007490 <HAL_RCCEx_PeriphCLKConfig+0x2268>
34007486:	f240 2117 	movw	r1, #535	@ 0x217
3400748a:	4813      	ldr	r0, [pc, #76]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
3400748c:	f7f9 fe6e 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34007490:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34007492:	3b01      	subs	r3, #1
34007494:	2bff      	cmp	r3, #255	@ 0xff
34007496:	d904      	bls.n	340074a2 <HAL_RCCEx_PeriphCLKConfig+0x227a>
34007498:	f44f 7106 	mov.w	r1, #536	@ 0x218
3400749c:	480e      	ldr	r0, [pc, #56]	@ (340074d8 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
3400749e:	f7f9 fe65 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340074a2:	4a0e      	ldr	r2, [pc, #56]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340074a4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340074a6:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340074aa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340074ac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340074b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340074b4:	3901      	subs	r1, #1
340074b6:	4303      	orrs	r3, r0
340074b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340074bc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340074c0:	2310      	movs	r3, #16
340074c2:	f7fe b90e 	b.w	340056e2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
340074c6:	4a0f      	ldr	r2, [pc, #60]	@ (34007504 <HAL_RCCEx_PeriphCLKConfig+0x22dc>)
340074c8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340074ca:	bf02      	ittt	eq
340074cc:	2240      	moveq	r2, #64	@ 0x40
340074ce:	4b03      	ldreq	r3, [pc, #12]	@ (340074dc <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340074d0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340074d4:	f7fe b907 	b.w	340056e6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
340074d8:	3401094f 	.word	0x3401094f
340074dc:	56028000 	.word	0x56028000
340074e0:	03030014 	.word	0x03030014
340074e4:	03010014 	.word	0x03010014
340074e8:	03030414 	.word	0x03030414
340074ec:	03010414 	.word	0x03010414
340074f0:	03030814 	.word	0x03030814
340074f4:	03010814 	.word	0x03010814
340074f8:	0303001c 	.word	0x0303001c
340074fc:	0301001c 	.word	0x0301001c
34007500:	0303041c 	.word	0x0303041c
34007504:	0301041c 	.word	0x0301041c
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34007508:	2b30      	cmp	r3, #48	@ 0x30
3400750a:	d123      	bne.n	34007554 <HAL_RCCEx_PeriphCLKConfig+0x232c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400750c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400750e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007512:	d004      	beq.n	3400751e <HAL_RCCEx_PeriphCLKConfig+0x22f6>
34007514:	f240 2145 	movw	r1, #581	@ 0x245
34007518:	48b5      	ldr	r0, [pc, #724]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
3400751a:	f7f9 fe27 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400751e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007520:	3b01      	subs	r3, #1
34007522:	2bff      	cmp	r3, #255	@ 0xff
34007524:	d904      	bls.n	34007530 <HAL_RCCEx_PeriphCLKConfig+0x2308>
34007526:	f240 2146 	movw	r1, #582	@ 0x246
3400752a:	48b1      	ldr	r0, [pc, #708]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
3400752c:	f7f9 fe1e 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007530:	4ab0      	ldr	r2, [pc, #704]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
34007532:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007534:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007538:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400753a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400753e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007542:	3901      	subs	r1, #1
34007544:	4303      	orrs	r3, r0
34007546:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400754a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400754e:	2380      	movs	r3, #128	@ 0x80
34007550:	f7fe b90d 	b.w	3400576e <HAL_RCCEx_PeriphCLKConfig+0x546>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
34007554:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007556:	bf02      	ittt	eq
34007558:	2240      	moveq	r2, #64	@ 0x40
3400755a:	4ba6      	ldreq	r3, [pc, #664]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
3400755c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007560:	f7fe b907 	b.w	34005772 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34007564:	2b03      	cmp	r3, #3
34007566:	d123      	bne.n	340075b0 <HAL_RCCEx_PeriphCLKConfig+0x2388>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400756a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400756e:	d004      	beq.n	3400757a <HAL_RCCEx_PeriphCLKConfig+0x2352>
34007570:	f240 2173 	movw	r1, #627	@ 0x273
34007574:	489e      	ldr	r0, [pc, #632]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34007576:	f7f9 fdf9 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400757a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400757c:	3b01      	subs	r3, #1
3400757e:	2bff      	cmp	r3, #255	@ 0xff
34007580:	d904      	bls.n	3400758c <HAL_RCCEx_PeriphCLKConfig+0x2364>
34007582:	f44f 711d 	mov.w	r1, #628	@ 0x274
34007586:	489a      	ldr	r0, [pc, #616]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34007588:	f7f9 fdf0 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400758c:	4a99      	ldr	r2, [pc, #612]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
3400758e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007590:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007594:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007596:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400759a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400759e:	3901      	subs	r1, #1
340075a0:	4303      	orrs	r3, r0
340075a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340075a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340075aa:	2380      	movs	r3, #128	@ 0x80
340075ac:	f7fe b925 	b.w	340057fa <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
340075b0:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340075b2:	bf02      	ittt	eq
340075b4:	2240      	moveq	r2, #64	@ 0x40
340075b6:	4b8f      	ldreq	r3, [pc, #572]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340075b8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340075bc:	f7fe b91f 	b.w	340057fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
340075c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340075c4:	bf02      	ittt	eq
340075c6:	2240      	moveq	r2, #64	@ 0x40
340075c8:	4b8a      	ldreq	r3, [pc, #552]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340075ca:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340075ce:	f7fe b995 	b.w	340058fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
340075d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340075d6:	bf02      	ittt	eq
340075d8:	2240      	moveq	r2, #64	@ 0x40
340075da:	4b86      	ldreq	r3, [pc, #536]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340075dc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340075e0:	f7fe b9ce 	b.w	34005980 <HAL_RCCEx_PeriphCLKConfig+0x758>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
340075e4:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340075e6:	bf02      	ittt	eq
340075e8:	2240      	moveq	r2, #64	@ 0x40
340075ea:	4b82      	ldreq	r3, [pc, #520]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340075ec:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340075f0:	f7fe ba58 	b.w	34005aa4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
340075f4:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340075f6:	bf02      	ittt	eq
340075f8:	2240      	moveq	r2, #64	@ 0x40
340075fa:	4b7e      	ldreq	r3, [pc, #504]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340075fc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007600:	f7fe ba99 	b.w	34005b36 <HAL_RCCEx_PeriphCLKConfig+0x90e>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34007604:	4a7c      	ldr	r2, [pc, #496]	@ (340077f8 <HAL_RCCEx_PeriphCLKConfig+0x25d0>)
34007606:	4293      	cmp	r3, r2
34007608:	d124      	bne.n	34007654 <HAL_RCCEx_PeriphCLKConfig+0x242c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400760a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400760c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007610:	d004      	beq.n	3400761c <HAL_RCCEx_PeriphCLKConfig+0x23f4>
34007612:	f240 314f 	movw	r1, #847	@ 0x34f
34007616:	4876      	ldr	r0, [pc, #472]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34007618:	f7f9 fda8 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400761c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400761e:	3b01      	subs	r3, #1
34007620:	2bff      	cmp	r3, #255	@ 0xff
34007622:	d904      	bls.n	3400762e <HAL_RCCEx_PeriphCLKConfig+0x2406>
34007624:	f44f 7154 	mov.w	r1, #848	@ 0x350
34007628:	4871      	ldr	r0, [pc, #452]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
3400762a:	f7f9 fd9f 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400762e:	4a71      	ldr	r2, [pc, #452]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
34007630:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007632:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007636:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007638:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400763c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007640:	3901      	subs	r1, #1
34007642:	4303      	orrs	r3, r0
34007644:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007648:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400764c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007650:	f7fe bac3 	b.w	34005bda <HAL_RCCEx_PeriphCLKConfig+0x9b2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34007654:	4a69      	ldr	r2, [pc, #420]	@ (340077fc <HAL_RCCEx_PeriphCLKConfig+0x25d4>)
34007656:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007658:	bf02      	ittt	eq
3400765a:	2240      	moveq	r2, #64	@ 0x40
3400765c:	4b65      	ldreq	r3, [pc, #404]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
3400765e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007662:	f7fe babc 	b.w	34005bde <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34007666:	4a66      	ldr	r2, [pc, #408]	@ (34007800 <HAL_RCCEx_PeriphCLKConfig+0x25d8>)
34007668:	4293      	cmp	r3, r2
3400766a:	d124      	bne.n	340076b6 <HAL_RCCEx_PeriphCLKConfig+0x248e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400766c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400766e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007672:	d004      	beq.n	3400767e <HAL_RCCEx_PeriphCLKConfig+0x2456>
34007674:	f44f 715f 	mov.w	r1, #892	@ 0x37c
34007678:	485d      	ldr	r0, [pc, #372]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
3400767a:	f7f9 fd77 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400767e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007680:	3b01      	subs	r3, #1
34007682:	2bff      	cmp	r3, #255	@ 0xff
34007684:	d904      	bls.n	34007690 <HAL_RCCEx_PeriphCLKConfig+0x2468>
34007686:	f240 317d 	movw	r1, #893	@ 0x37d
3400768a:	4859      	ldr	r0, [pc, #356]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
3400768c:	f7f9 fd6e 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007690:	4a58      	ldr	r2, [pc, #352]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
34007692:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007694:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007698:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400769a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400769e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340076a2:	3901      	subs	r1, #1
340076a4:	4303      	orrs	r3, r0
340076a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340076aa:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340076ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340076b2:	f7fe bad6 	b.w	34005c62 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
340076b6:	4a53      	ldr	r2, [pc, #332]	@ (34007804 <HAL_RCCEx_PeriphCLKConfig+0x25dc>)
340076b8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340076ba:	bf02      	ittt	eq
340076bc:	2240      	moveq	r2, #64	@ 0x40
340076be:	4b4d      	ldreq	r3, [pc, #308]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340076c0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340076c4:	f7fe bacf 	b.w	34005c66 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
340076c8:	4a4f      	ldr	r2, [pc, #316]	@ (34007808 <HAL_RCCEx_PeriphCLKConfig+0x25e0>)
340076ca:	4293      	cmp	r3, r2
340076cc:	d124      	bne.n	34007718 <HAL_RCCEx_PeriphCLKConfig+0x24f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340076ce:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340076d0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340076d4:	d004      	beq.n	340076e0 <HAL_RCCEx_PeriphCLKConfig+0x24b8>
340076d6:	f240 31a9 	movw	r1, #937	@ 0x3a9
340076da:	4845      	ldr	r0, [pc, #276]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
340076dc:	f7f9 fd46 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340076e0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340076e2:	3b01      	subs	r3, #1
340076e4:	2bff      	cmp	r3, #255	@ 0xff
340076e6:	d904      	bls.n	340076f2 <HAL_RCCEx_PeriphCLKConfig+0x24ca>
340076e8:	f240 31aa 	movw	r1, #938	@ 0x3aa
340076ec:	4840      	ldr	r0, [pc, #256]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
340076ee:	f7f9 fd3d 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340076f2:	4a40      	ldr	r2, [pc, #256]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340076f4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340076f6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340076fa:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340076fc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007700:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007704:	3901      	subs	r1, #1
34007706:	4303      	orrs	r3, r0
34007708:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400770c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007710:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007714:	f7fe bae9 	b.w	34005cea <HAL_RCCEx_PeriphCLKConfig+0xac2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34007718:	4a3c      	ldr	r2, [pc, #240]	@ (3400780c <HAL_RCCEx_PeriphCLKConfig+0x25e4>)
3400771a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400771c:	bf02      	ittt	eq
3400771e:	2240      	moveq	r2, #64	@ 0x40
34007720:	4b34      	ldreq	r3, [pc, #208]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
34007722:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007726:	f7fe bae2 	b.w	34005cee <HAL_RCCEx_PeriphCLKConfig+0xac6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3400772a:	4a39      	ldr	r2, [pc, #228]	@ (34007810 <HAL_RCCEx_PeriphCLKConfig+0x25e8>)
3400772c:	4293      	cmp	r3, r2
3400772e:	d124      	bne.n	3400777a <HAL_RCCEx_PeriphCLKConfig+0x2552>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007730:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007732:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007736:	d004      	beq.n	34007742 <HAL_RCCEx_PeriphCLKConfig+0x251a>
34007738:	f240 31d6 	movw	r1, #982	@ 0x3d6
3400773c:	482c      	ldr	r0, [pc, #176]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
3400773e:	f7f9 fd15 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007742:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34007744:	3b01      	subs	r3, #1
34007746:	2bff      	cmp	r3, #255	@ 0xff
34007748:	d904      	bls.n	34007754 <HAL_RCCEx_PeriphCLKConfig+0x252c>
3400774a:	f240 31d7 	movw	r1, #983	@ 0x3d7
3400774e:	4828      	ldr	r0, [pc, #160]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34007750:	f7f9 fd0c 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34007754:	4a27      	ldr	r2, [pc, #156]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
34007756:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34007758:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400775c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400775e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007762:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007766:	3901      	subs	r1, #1
34007768:	4303      	orrs	r3, r0
3400776a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400776e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007772:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34007776:	f7fe bafc 	b.w	34005d72 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3400777a:	4a26      	ldr	r2, [pc, #152]	@ (34007814 <HAL_RCCEx_PeriphCLKConfig+0x25ec>)
3400777c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400777e:	bf02      	ittt	eq
34007780:	2240      	moveq	r2, #64	@ 0x40
34007782:	4b1c      	ldreq	r3, [pc, #112]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
34007784:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007788:	f7fe baf5 	b.w	34005d76 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3400778c:	4a22      	ldr	r2, [pc, #136]	@ (34007818 <HAL_RCCEx_PeriphCLKConfig+0x25f0>)
3400778e:	4293      	cmp	r3, r2
34007790:	d124      	bne.n	340077dc <HAL_RCCEx_PeriphCLKConfig+0x25b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007792:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007794:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007798:	d004      	beq.n	340077a4 <HAL_RCCEx_PeriphCLKConfig+0x257c>
3400779a:	f240 4103 	movw	r1, #1027	@ 0x403
3400779e:	4814      	ldr	r0, [pc, #80]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
340077a0:	f7f9 fce4 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340077a4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340077a6:	3b01      	subs	r3, #1
340077a8:	2bff      	cmp	r3, #255	@ 0xff
340077aa:	d904      	bls.n	340077b6 <HAL_RCCEx_PeriphCLKConfig+0x258e>
340077ac:	f240 4104 	movw	r1, #1028	@ 0x404
340077b0:	480f      	ldr	r0, [pc, #60]	@ (340077f0 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
340077b2:	f7f9 fcdb 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340077b6:	4a0f      	ldr	r2, [pc, #60]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340077b8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340077ba:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340077be:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340077c0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340077c4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340077c8:	3901      	subs	r1, #1
340077ca:	4303      	orrs	r3, r0
340077cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340077d0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340077d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340077d8:	f7fe bb0f 	b.w	34005dfa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
340077dc:	4a0f      	ldr	r2, [pc, #60]	@ (3400781c <HAL_RCCEx_PeriphCLKConfig+0x25f4>)
340077de:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340077e0:	bf02      	ittt	eq
340077e2:	2240      	moveq	r2, #64	@ 0x40
340077e4:	4b03      	ldreq	r3, [pc, #12]	@ (340077f4 <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340077e6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340077ea:	f7fe bb08 	b.w	34005dfe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
340077ee:	bf00      	nop
340077f0:	3401094f 	.word	0x3401094f
340077f4:	56028000 	.word	0x56028000
340077f8:	0703000c 	.word	0x0703000c
340077fc:	0701000c 	.word	0x0701000c
34007800:	0703040c 	.word	0x0703040c
34007804:	0701040c 	.word	0x0701040c
34007808:	0703080c 	.word	0x0703080c
3400780c:	0701080c 	.word	0x0701080c
34007810:	07030c0c 	.word	0x07030c0c
34007814:	07010c0c 	.word	0x07010c0c
34007818:	0703100c 	.word	0x0703100c
3400781c:	0701100c 	.word	0x0701100c
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34007820:	4aae      	ldr	r2, [pc, #696]	@ (34007adc <HAL_RCCEx_PeriphCLKConfig+0x28b4>)
34007822:	4293      	cmp	r3, r2
34007824:	d124      	bne.n	34007870 <HAL_RCCEx_PeriphCLKConfig+0x2648>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34007826:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34007828:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400782c:	d004      	beq.n	34007838 <HAL_RCCEx_PeriphCLKConfig+0x2610>
3400782e:	f44f 6186 	mov.w	r1, #1072	@ 0x430
34007832:	48ab      	ldr	r0, [pc, #684]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
34007834:	f7f9 fc9a 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34007838:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400783a:	3b01      	subs	r3, #1
3400783c:	2bff      	cmp	r3, #255	@ 0xff
3400783e:	d904      	bls.n	3400784a <HAL_RCCEx_PeriphCLKConfig+0x2622>
34007840:	f240 4131 	movw	r1, #1073	@ 0x431
34007844:	48a6      	ldr	r0, [pc, #664]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
34007846:	f7f9 fc91 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400784a:	4aa6      	ldr	r2, [pc, #664]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
3400784c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400784e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34007852:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34007854:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007858:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400785c:	3901      	subs	r1, #1
3400785e:	4303      	orrs	r3, r0
34007860:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007864:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34007868:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400786c:	f7fe bb09 	b.w	34005e82 <HAL_RCCEx_PeriphCLKConfig+0xc5a>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34007870:	4a9d      	ldr	r2, [pc, #628]	@ (34007ae8 <HAL_RCCEx_PeriphCLKConfig+0x28c0>)
34007872:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007874:	bf02      	ittt	eq
34007876:	2240      	moveq	r2, #64	@ 0x40
34007878:	4b9a      	ldreq	r3, [pc, #616]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
3400787a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400787e:	f7fe bb02 	b.w	34005e86 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34007882:	4a9a      	ldr	r2, [pc, #616]	@ (34007aec <HAL_RCCEx_PeriphCLKConfig+0x28c4>)
34007884:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007886:	bf02      	ittt	eq
34007888:	2240      	moveq	r2, #64	@ 0x40
3400788a:	4b96      	ldreq	r3, [pc, #600]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
3400788c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007890:	f7fe bb58 	b.w	34005f44 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34007894:	4a96      	ldr	r2, [pc, #600]	@ (34007af0 <HAL_RCCEx_PeriphCLKConfig+0x28c8>)
34007896:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007898:	bf02      	ittt	eq
3400789a:	2240      	moveq	r2, #64	@ 0x40
3400789c:	4b91      	ldreq	r3, [pc, #580]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
3400789e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078a2:	f7fe bb93 	b.w	34005fcc <HAL_RCCEx_PeriphCLKConfig+0xda4>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
340078a6:	4a93      	ldr	r2, [pc, #588]	@ (34007af4 <HAL_RCCEx_PeriphCLKConfig+0x28cc>)
340078a8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078aa:	bf02      	ittt	eq
340078ac:	2240      	moveq	r2, #64	@ 0x40
340078ae:	4b8d      	ldreq	r3, [pc, #564]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340078b0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078b4:	f7fe bbce 	b.w	34006054 <HAL_RCCEx_PeriphCLKConfig+0xe2c>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
340078b8:	4a8f      	ldr	r2, [pc, #572]	@ (34007af8 <HAL_RCCEx_PeriphCLKConfig+0x28d0>)
340078ba:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078bc:	bf02      	ittt	eq
340078be:	2240      	moveq	r2, #64	@ 0x40
340078c0:	4b88      	ldreq	r3, [pc, #544]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340078c2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078c6:	f7fe bc09 	b.w	340060dc <HAL_RCCEx_PeriphCLKConfig+0xeb4>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
340078ca:	4a8c      	ldr	r2, [pc, #560]	@ (34007afc <HAL_RCCEx_PeriphCLKConfig+0x28d4>)
340078cc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340078ce:	bf02      	ittt	eq
340078d0:	2240      	moveq	r2, #64	@ 0x40
340078d2:	4b84      	ldreq	r3, [pc, #528]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340078d4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340078d8:	f7fe bc44 	b.w	34006164 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
340078dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340078e0:	d124      	bne.n	3400792c <HAL_RCCEx_PeriphCLKConfig+0x2704>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340078e2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340078e4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340078e8:	d004      	beq.n	340078f4 <HAL_RCCEx_PeriphCLKConfig+0x26cc>
340078ea:	f240 41fd 	movw	r1, #1277	@ 0x4fd
340078ee:	487c      	ldr	r0, [pc, #496]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
340078f0:	f7f9 fc3c 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340078f4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340078f6:	3b01      	subs	r3, #1
340078f8:	2bff      	cmp	r3, #255	@ 0xff
340078fa:	d904      	bls.n	34007906 <HAL_RCCEx_PeriphCLKConfig+0x26de>
340078fc:	f240 41fe 	movw	r1, #1278	@ 0x4fe
34007900:	4877      	ldr	r0, [pc, #476]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
34007902:	f7f9 fc33 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007906:	4a77      	ldr	r2, [pc, #476]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34007908:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3400790a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400790e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007910:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007914:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007918:	3901      	subs	r1, #1
3400791a:	4303      	orrs	r3, r0
3400791c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007920:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007928:	f7fe bc76 	b.w	34006218 <HAL_RCCEx_PeriphCLKConfig+0xff0>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
3400792c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007930:	bf02      	ittt	eq
34007932:	2240      	moveq	r2, #64	@ 0x40
34007934:	4b6b      	ldreq	r3, [pc, #428]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34007936:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400793a:	f7fe bc6f 	b.w	3400621c <HAL_RCCEx_PeriphCLKConfig+0xff4>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
3400793e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007942:	bf02      	ittt	eq
34007944:	2240      	moveq	r2, #64	@ 0x40
34007946:	4b67      	ldreq	r3, [pc, #412]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34007948:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400794c:	f7fe bcac 	b.w	340062a8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34007950:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34007954:	d123      	bne.n	3400799e <HAL_RCCEx_PeriphCLKConfig+0x2776>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007956:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007958:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400795c:	d004      	beq.n	34007968 <HAL_RCCEx_PeriphCLKConfig+0x2740>
3400795e:	f240 514a 	movw	r1, #1354	@ 0x54a
34007962:	485f      	ldr	r0, [pc, #380]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
34007964:	f7f9 fc02 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007968:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400796a:	3b01      	subs	r3, #1
3400796c:	2bff      	cmp	r3, #255	@ 0xff
3400796e:	d904      	bls.n	3400797a <HAL_RCCEx_PeriphCLKConfig+0x2752>
34007970:	f240 514b 	movw	r1, #1355	@ 0x54b
34007974:	485a      	ldr	r0, [pc, #360]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
34007976:	f7f9 fbf9 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400797a:	4a5a      	ldr	r2, [pc, #360]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
3400797c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3400797e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007982:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007984:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007988:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400798c:	3901      	subs	r1, #1
3400798e:	4303      	orrs	r3, r0
34007990:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007994:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007998:	2380      	movs	r3, #128	@ 0x80
3400799a:	f7fe bcc7 	b.w	3400632c <HAL_RCCEx_PeriphCLKConfig+0x1104>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3400799e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079a2:	bf02      	ittt	eq
340079a4:	2240      	moveq	r2, #64	@ 0x40
340079a6:	4b4f      	ldreq	r3, [pc, #316]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340079a8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079ac:	f7fe bcc0 	b.w	34006330 <HAL_RCCEx_PeriphCLKConfig+0x1108>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
340079b0:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340079b2:	bf02      	ittt	eq
340079b4:	2240      	moveq	r2, #64	@ 0x40
340079b6:	4b4b      	ldreq	r3, [pc, #300]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340079b8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340079bc:	f7fe bcfd 	b.w	340063ba <HAL_RCCEx_PeriphCLKConfig+0x1192>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
340079c0:	4a4f      	ldr	r2, [pc, #316]	@ (34007b00 <HAL_RCCEx_PeriphCLKConfig+0x28d8>)
340079c2:	4293      	cmp	r3, r2
340079c4:	d123      	bne.n	34007a0e <HAL_RCCEx_PeriphCLKConfig+0x27e6>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340079c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340079c8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340079cc:	d004      	beq.n	340079d8 <HAL_RCCEx_PeriphCLKConfig+0x27b0>
340079ce:	f240 5197 	movw	r1, #1431	@ 0x597
340079d2:	4843      	ldr	r0, [pc, #268]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
340079d4:	f7f9 fbca 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340079d8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340079da:	3b01      	subs	r3, #1
340079dc:	2bff      	cmp	r3, #255	@ 0xff
340079de:	d904      	bls.n	340079ea <HAL_RCCEx_PeriphCLKConfig+0x27c2>
340079e0:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
340079e4:	483e      	ldr	r0, [pc, #248]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
340079e6:	f7f9 fbc1 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340079ea:	4a3e      	ldr	r2, [pc, #248]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340079ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340079ee:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340079f2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340079f4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340079f8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340079fc:	3901      	subs	r1, #1
340079fe:	4303      	orrs	r3, r0
34007a00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007a08:	2380      	movs	r3, #128	@ 0x80
34007a0a:	f7fe bd1b 	b.w	34006444 <HAL_RCCEx_PeriphCLKConfig+0x121c>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34007a0e:	4a3d      	ldr	r2, [pc, #244]	@ (34007b04 <HAL_RCCEx_PeriphCLKConfig+0x28dc>)
34007a10:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a12:	bf02      	ittt	eq
34007a14:	2240      	moveq	r2, #64	@ 0x40
34007a16:	4b33      	ldreq	r3, [pc, #204]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34007a18:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a1c:	f7fe bd14 	b.w	34006448 <HAL_RCCEx_PeriphCLKConfig+0x1220>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34007a20:	4a39      	ldr	r2, [pc, #228]	@ (34007b08 <HAL_RCCEx_PeriphCLKConfig+0x28e0>)
34007a22:	4293      	cmp	r3, r2
34007a24:	d123      	bne.n	34007a6e <HAL_RCCEx_PeriphCLKConfig+0x2846>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007a26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007a28:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007a2c:	d004      	beq.n	34007a38 <HAL_RCCEx_PeriphCLKConfig+0x2810>
34007a2e:	f240 51c4 	movw	r1, #1476	@ 0x5c4
34007a32:	482b      	ldr	r0, [pc, #172]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
34007a34:	f7f9 fb9a 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007a38:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007a3a:	3b01      	subs	r3, #1
34007a3c:	2bff      	cmp	r3, #255	@ 0xff
34007a3e:	d904      	bls.n	34007a4a <HAL_RCCEx_PeriphCLKConfig+0x2822>
34007a40:	f240 51c5 	movw	r1, #1477	@ 0x5c5
34007a44:	4826      	ldr	r0, [pc, #152]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
34007a46:	f7f9 fb91 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007a4a:	4a26      	ldr	r2, [pc, #152]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34007a4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007a4e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007a52:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007a54:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007a58:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007a5c:	3901      	subs	r1, #1
34007a5e:	4303      	orrs	r3, r0
34007a60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007a68:	2380      	movs	r3, #128	@ 0x80
34007a6a:	f7fe bd2c 	b.w	340064c6 <HAL_RCCEx_PeriphCLKConfig+0x129e>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34007a6e:	4a27      	ldr	r2, [pc, #156]	@ (34007b0c <HAL_RCCEx_PeriphCLKConfig+0x28e4>)
34007a70:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007a72:	bf02      	ittt	eq
34007a74:	2240      	moveq	r2, #64	@ 0x40
34007a76:	4b1b      	ldreq	r3, [pc, #108]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34007a78:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007a7c:	f7fe bd25 	b.w	340064ca <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34007a80:	2b03      	cmp	r3, #3
34007a82:	d123      	bne.n	34007acc <HAL_RCCEx_PeriphCLKConfig+0x28a4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34007a84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34007a86:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007a8a:	d004      	beq.n	34007a96 <HAL_RCCEx_PeriphCLKConfig+0x286e>
34007a8c:	f240 51f1 	movw	r1, #1521	@ 0x5f1
34007a90:	4813      	ldr	r0, [pc, #76]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
34007a92:	f7f9 fb6b 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34007a96:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34007a98:	3b01      	subs	r3, #1
34007a9a:	2bff      	cmp	r3, #255	@ 0xff
34007a9c:	d904      	bls.n	34007aa8 <HAL_RCCEx_PeriphCLKConfig+0x2880>
34007a9e:	f240 51f2 	movw	r1, #1522	@ 0x5f2
34007aa2:	480f      	ldr	r0, [pc, #60]	@ (34007ae0 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
34007aa4:	f7f9 fb62 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34007aa8:	4a0e      	ldr	r2, [pc, #56]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34007aaa:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34007aac:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34007ab0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34007ab2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007ab6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007aba:	3901      	subs	r1, #1
34007abc:	4303      	orrs	r3, r0
34007abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34007ac6:	2380      	movs	r3, #128	@ 0x80
34007ac8:	f7fe bd43 	b.w	34006552 <HAL_RCCEx_PeriphCLKConfig+0x132a>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34007acc:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007ace:	bf02      	ittt	eq
34007ad0:	2240      	moveq	r2, #64	@ 0x40
34007ad2:	4b04      	ldreq	r3, [pc, #16]	@ (34007ae4 <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34007ad4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007ad8:	f7fe bd3d 	b.w	34006556 <HAL_RCCEx_PeriphCLKConfig+0x132e>
34007adc:	0703140c 	.word	0x0703140c
34007ae0:	3401094f 	.word	0x3401094f
34007ae4:	56028000 	.word	0x56028000
34007ae8:	0701140c 	.word	0x0701140c
34007aec:	0701082c 	.word	0x0701082c
34007af0:	07010c2c 	.word	0x07010c2c
34007af4:	0701102c 	.word	0x0701102c
34007af8:	0701142c 	.word	0x0701142c
34007afc:	0701182c 	.word	0x0701182c
34007b00:	07031418 	.word	0x07031418
34007b04:	07011418 	.word	0x07011418
34007b08:	07031818 	.word	0x07031818
34007b0c:	07011818 	.word	0x07011818
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34007b10:	4aab      	ldr	r2, [pc, #684]	@ (34007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b98>)
34007b12:	4293      	cmp	r3, r2
34007b14:	d124      	bne.n	34007b60 <HAL_RCCEx_PeriphCLKConfig+0x2938>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007b16:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007b18:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007b1c:	d004      	beq.n	34007b28 <HAL_RCCEx_PeriphCLKConfig+0x2900>
34007b1e:	f240 611e 	movw	r1, #1566	@ 0x61e
34007b22:	48a8      	ldr	r0, [pc, #672]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007b24:	f7f9 fb22 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007b28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007b2a:	3b01      	subs	r3, #1
34007b2c:	2bff      	cmp	r3, #255	@ 0xff
34007b2e:	d904      	bls.n	34007b3a <HAL_RCCEx_PeriphCLKConfig+0x2912>
34007b30:	f240 611f 	movw	r1, #1567	@ 0x61f
34007b34:	48a3      	ldr	r0, [pc, #652]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007b36:	f7f9 fb19 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007b3a:	4aa3      	ldr	r2, [pc, #652]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007b3c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007b3e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007b42:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007b44:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007b48:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007b4c:	3901      	subs	r1, #1
34007b4e:	4303      	orrs	r3, r0
34007b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007b54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007b58:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007b5c:	f7fe bd46 	b.w	340065ec <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34007b60:	4a9a      	ldr	r2, [pc, #616]	@ (34007dcc <HAL_RCCEx_PeriphCLKConfig+0x2ba4>)
34007b62:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007b64:	bf02      	ittt	eq
34007b66:	2240      	moveq	r2, #64	@ 0x40
34007b68:	4b97      	ldreq	r3, [pc, #604]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007b6a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007b6e:	f7fe bd3f 	b.w	340065f0 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34007b72:	4a97      	ldr	r2, [pc, #604]	@ (34007dd0 <HAL_RCCEx_PeriphCLKConfig+0x2ba8>)
34007b74:	4293      	cmp	r3, r2
34007b76:	d124      	bne.n	34007bc2 <HAL_RCCEx_PeriphCLKConfig+0x299a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007b78:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007b7a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007b7e:	d004      	beq.n	34007b8a <HAL_RCCEx_PeriphCLKConfig+0x2962>
34007b80:	f240 614b 	movw	r1, #1611	@ 0x64b
34007b84:	488f      	ldr	r0, [pc, #572]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007b86:	f7f9 faf1 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007b8a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007b8c:	3b01      	subs	r3, #1
34007b8e:	2bff      	cmp	r3, #255	@ 0xff
34007b90:	d904      	bls.n	34007b9c <HAL_RCCEx_PeriphCLKConfig+0x2974>
34007b92:	f240 614c 	movw	r1, #1612	@ 0x64c
34007b96:	488b      	ldr	r0, [pc, #556]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007b98:	f7f9 fae8 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007b9c:	4a8a      	ldr	r2, [pc, #552]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007b9e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007ba0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007ba4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007ba6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007baa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007bae:	3901      	subs	r1, #1
34007bb0:	4303      	orrs	r3, r0
34007bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007bb6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007bba:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007bbe:	f7fe bd5c 	b.w	3400667a <HAL_RCCEx_PeriphCLKConfig+0x1452>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34007bc2:	4a84      	ldr	r2, [pc, #528]	@ (34007dd4 <HAL_RCCEx_PeriphCLKConfig+0x2bac>)
34007bc4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007bc6:	bf02      	ittt	eq
34007bc8:	2240      	moveq	r2, #64	@ 0x40
34007bca:	4b7f      	ldreq	r3, [pc, #508]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007bcc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007bd0:	f7fe bd55 	b.w	3400667e <HAL_RCCEx_PeriphCLKConfig+0x1456>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34007bd4:	4a80      	ldr	r2, [pc, #512]	@ (34007dd8 <HAL_RCCEx_PeriphCLKConfig+0x2bb0>)
34007bd6:	4293      	cmp	r3, r2
34007bd8:	d124      	bne.n	34007c24 <HAL_RCCEx_PeriphCLKConfig+0x29fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007bda:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007bdc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007be0:	d004      	beq.n	34007bec <HAL_RCCEx_PeriphCLKConfig+0x29c4>
34007be2:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
34007be6:	4877      	ldr	r0, [pc, #476]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007be8:	f7f9 fac0 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007bec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007bee:	3b01      	subs	r3, #1
34007bf0:	2bff      	cmp	r3, #255	@ 0xff
34007bf2:	d904      	bls.n	34007bfe <HAL_RCCEx_PeriphCLKConfig+0x29d6>
34007bf4:	f240 6179 	movw	r1, #1657	@ 0x679
34007bf8:	4872      	ldr	r0, [pc, #456]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007bfa:	f7f9 fab7 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007bfe:	4a72      	ldr	r2, [pc, #456]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007c00:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007c02:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007c06:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007c08:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007c0c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007c10:	3901      	subs	r1, #1
34007c12:	4303      	orrs	r3, r0
34007c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007c18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007c20:	f7fe bd72 	b.w	34006708 <HAL_RCCEx_PeriphCLKConfig+0x14e0>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34007c24:	4a6d      	ldr	r2, [pc, #436]	@ (34007ddc <HAL_RCCEx_PeriphCLKConfig+0x2bb4>)
34007c26:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c28:	bf02      	ittt	eq
34007c2a:	2240      	moveq	r2, #64	@ 0x40
34007c2c:	4b66      	ldreq	r3, [pc, #408]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007c2e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c32:	f7fe bd6b 	b.w	3400670c <HAL_RCCEx_PeriphCLKConfig+0x14e4>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34007c36:	4a6a      	ldr	r2, [pc, #424]	@ (34007de0 <HAL_RCCEx_PeriphCLKConfig+0x2bb8>)
34007c38:	4293      	cmp	r3, r2
34007c3a:	d124      	bne.n	34007c86 <HAL_RCCEx_PeriphCLKConfig+0x2a5e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007c3c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007c3e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007c42:	d004      	beq.n	34007c4e <HAL_RCCEx_PeriphCLKConfig+0x2a26>
34007c44:	f240 61a5 	movw	r1, #1701	@ 0x6a5
34007c48:	485e      	ldr	r0, [pc, #376]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007c4a:	f7f9 fa8f 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007c4e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007c50:	3b01      	subs	r3, #1
34007c52:	2bff      	cmp	r3, #255	@ 0xff
34007c54:	d904      	bls.n	34007c60 <HAL_RCCEx_PeriphCLKConfig+0x2a38>
34007c56:	f240 61a6 	movw	r1, #1702	@ 0x6a6
34007c5a:	485a      	ldr	r0, [pc, #360]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007c5c:	f7f9 fa86 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007c60:	4a59      	ldr	r2, [pc, #356]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007c62:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007c64:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007c68:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007c6a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007c6e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007c72:	3901      	subs	r1, #1
34007c74:	4303      	orrs	r3, r0
34007c76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007c7a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007c82:	f7fe bd89 	b.w	34006798 <HAL_RCCEx_PeriphCLKConfig+0x1570>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34007c86:	4a57      	ldr	r2, [pc, #348]	@ (34007de4 <HAL_RCCEx_PeriphCLKConfig+0x2bbc>)
34007c88:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007c8a:	bf02      	ittt	eq
34007c8c:	2240      	moveq	r2, #64	@ 0x40
34007c8e:	4b4e      	ldreq	r3, [pc, #312]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007c90:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007c94:	f7fe bd82 	b.w	3400679c <HAL_RCCEx_PeriphCLKConfig+0x1574>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34007c98:	4a53      	ldr	r2, [pc, #332]	@ (34007de8 <HAL_RCCEx_PeriphCLKConfig+0x2bc0>)
34007c9a:	4293      	cmp	r3, r2
34007c9c:	d124      	bne.n	34007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2ac0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007c9e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007ca0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ca4:	d004      	beq.n	34007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2a88>
34007ca6:	f240 61d2 	movw	r1, #1746	@ 0x6d2
34007caa:	4846      	ldr	r0, [pc, #280]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007cac:	f7f9 fa5e 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007cb0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007cb2:	3b01      	subs	r3, #1
34007cb4:	2bff      	cmp	r3, #255	@ 0xff
34007cb6:	d904      	bls.n	34007cc2 <HAL_RCCEx_PeriphCLKConfig+0x2a9a>
34007cb8:	f240 61d3 	movw	r1, #1747	@ 0x6d3
34007cbc:	4841      	ldr	r0, [pc, #260]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007cbe:	f7f9 fa55 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007cc2:	4a41      	ldr	r2, [pc, #260]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007cc4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007cc6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007cca:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007ccc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007cd0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007cd4:	3901      	subs	r1, #1
34007cd6:	4303      	orrs	r3, r0
34007cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007cdc:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007ce4:	f7fe bda0 	b.w	34006828 <HAL_RCCEx_PeriphCLKConfig+0x1600>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34007ce8:	4a40      	ldr	r2, [pc, #256]	@ (34007dec <HAL_RCCEx_PeriphCLKConfig+0x2bc4>)
34007cea:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007cec:	bf02      	ittt	eq
34007cee:	2240      	moveq	r2, #64	@ 0x40
34007cf0:	4b35      	ldreq	r3, [pc, #212]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007cf2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007cf6:	f7fe bd99 	b.w	3400682c <HAL_RCCEx_PeriphCLKConfig+0x1604>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34007cfa:	4a3d      	ldr	r2, [pc, #244]	@ (34007df0 <HAL_RCCEx_PeriphCLKConfig+0x2bc8>)
34007cfc:	4293      	cmp	r3, r2
34007cfe:	d124      	bne.n	34007d4a <HAL_RCCEx_PeriphCLKConfig+0x2b22>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34007d00:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34007d02:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007d06:	d004      	beq.n	34007d12 <HAL_RCCEx_PeriphCLKConfig+0x2aea>
34007d08:	f240 61ff 	movw	r1, #1791	@ 0x6ff
34007d0c:	482d      	ldr	r0, [pc, #180]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007d0e:	f7f9 fa2d 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34007d12:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34007d14:	3b01      	subs	r3, #1
34007d16:	2bff      	cmp	r3, #255	@ 0xff
34007d18:	d904      	bls.n	34007d24 <HAL_RCCEx_PeriphCLKConfig+0x2afc>
34007d1a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
34007d1e:	4829      	ldr	r0, [pc, #164]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007d20:	f7f9 fa24 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34007d24:	4a28      	ldr	r2, [pc, #160]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007d26:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34007d28:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34007d2c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34007d2e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007d32:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007d36:	3901      	subs	r1, #1
34007d38:	4303      	orrs	r3, r0
34007d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007d3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34007d42:	f44f 7380 	mov.w	r3, #256	@ 0x100
34007d46:	f7fe bdd1 	b.w	340068ec <HAL_RCCEx_PeriphCLKConfig+0x16c4>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34007d4a:	4a2a      	ldr	r2, [pc, #168]	@ (34007df4 <HAL_RCCEx_PeriphCLKConfig+0x2bcc>)
34007d4c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007d4e:	bf02      	ittt	eq
34007d50:	2240      	moveq	r2, #64	@ 0x40
34007d52:	4b1d      	ldreq	r3, [pc, #116]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007d54:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007d58:	f7fe bdca 	b.w	340068f0 <HAL_RCCEx_PeriphCLKConfig+0x16c8>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34007d5c:	4a26      	ldr	r2, [pc, #152]	@ (34007df8 <HAL_RCCEx_PeriphCLKConfig+0x2bd0>)
34007d5e:	4293      	cmp	r3, r2
34007d60:	d124      	bne.n	34007dac <HAL_RCCEx_PeriphCLKConfig+0x2b84>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007d62:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007d64:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007d68:	d004      	beq.n	34007d74 <HAL_RCCEx_PeriphCLKConfig+0x2b4c>
34007d6a:	f240 712c 	movw	r1, #1836	@ 0x72c
34007d6e:	4815      	ldr	r0, [pc, #84]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007d70:	f7f9 f9fc 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007d74:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007d76:	3b01      	subs	r3, #1
34007d78:	2bff      	cmp	r3, #255	@ 0xff
34007d7a:	d904      	bls.n	34007d86 <HAL_RCCEx_PeriphCLKConfig+0x2b5e>
34007d7c:	f240 712d 	movw	r1, #1837	@ 0x72d
34007d80:	4810      	ldr	r0, [pc, #64]	@ (34007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34007d82:	f7f9 f9f3 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007d86:	4a10      	ldr	r2, [pc, #64]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007d88:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007d8a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007d8e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007d90:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007d94:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007d98:	3901      	subs	r1, #1
34007d9a:	4303      	orrs	r3, r0
34007d9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007da0:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007da4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007da8:	f7fe bde8 	b.w	3400697c <HAL_RCCEx_PeriphCLKConfig+0x1754>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34007dac:	4a13      	ldr	r2, [pc, #76]	@ (34007dfc <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
34007dae:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007db0:	bf02      	ittt	eq
34007db2:	2240      	moveq	r2, #64	@ 0x40
34007db4:	4b04      	ldreq	r3, [pc, #16]	@ (34007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34007db6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007dba:	f7fe bde1 	b.w	34006980 <HAL_RCCEx_PeriphCLKConfig+0x1758>
34007dbe:	bf00      	nop
34007dc0:	07030420 	.word	0x07030420
34007dc4:	3401094f 	.word	0x3401094f
34007dc8:	56028000 	.word	0x56028000
34007dcc:	07010420 	.word	0x07010420
34007dd0:	07030820 	.word	0x07030820
34007dd4:	07010820 	.word	0x07010820
34007dd8:	07030c20 	.word	0x07030c20
34007ddc:	07010c20 	.word	0x07010c20
34007de0:	07031020 	.word	0x07031020
34007de4:	07011020 	.word	0x07011020
34007de8:	07031420 	.word	0x07031420
34007dec:	07011420 	.word	0x07011420
34007df0:	07031820 	.word	0x07031820
34007df4:	07011820 	.word	0x07011820
34007df8:	07030030 	.word	0x07030030
34007dfc:	07010030 	.word	0x07010030
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34007e00:	4aab      	ldr	r2, [pc, #684]	@ (340080b0 <HAL_RCCEx_PeriphCLKConfig+0x2e88>)
34007e02:	4293      	cmp	r3, r2
34007e04:	d124      	bne.n	34007e50 <HAL_RCCEx_PeriphCLKConfig+0x2c28>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007e06:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007e08:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007e0c:	d004      	beq.n	34007e18 <HAL_RCCEx_PeriphCLKConfig+0x2bf0>
34007e0e:	f240 7159 	movw	r1, #1881	@ 0x759
34007e12:	48a8      	ldr	r0, [pc, #672]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007e14:	f7f9 f9aa 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007e18:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007e1a:	3b01      	subs	r3, #1
34007e1c:	2bff      	cmp	r3, #255	@ 0xff
34007e1e:	d904      	bls.n	34007e2a <HAL_RCCEx_PeriphCLKConfig+0x2c02>
34007e20:	f240 715a 	movw	r1, #1882	@ 0x75a
34007e24:	48a3      	ldr	r0, [pc, #652]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007e26:	f7f9 f9a1 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007e2a:	4aa3      	ldr	r2, [pc, #652]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34007e2c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007e2e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007e32:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007e34:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e38:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e3c:	3901      	subs	r1, #1
34007e3e:	4303      	orrs	r3, r0
34007e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007e44:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007e48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007e4c:	f7fe bdde 	b.w	34006a0c <HAL_RCCEx_PeriphCLKConfig+0x17e4>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34007e50:	4a9a      	ldr	r2, [pc, #616]	@ (340080bc <HAL_RCCEx_PeriphCLKConfig+0x2e94>)
34007e52:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007e54:	bf02      	ittt	eq
34007e56:	2240      	moveq	r2, #64	@ 0x40
34007e58:	4b97      	ldreq	r3, [pc, #604]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34007e5a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007e5e:	f7fe bdd7 	b.w	34006a10 <HAL_RCCEx_PeriphCLKConfig+0x17e8>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34007e62:	4a97      	ldr	r2, [pc, #604]	@ (340080c0 <HAL_RCCEx_PeriphCLKConfig+0x2e98>)
34007e64:	4293      	cmp	r3, r2
34007e66:	d124      	bne.n	34007eb2 <HAL_RCCEx_PeriphCLKConfig+0x2c8a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007e68:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007e6a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007e6e:	d004      	beq.n	34007e7a <HAL_RCCEx_PeriphCLKConfig+0x2c52>
34007e70:	f240 7186 	movw	r1, #1926	@ 0x786
34007e74:	488f      	ldr	r0, [pc, #572]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007e76:	f7f9 f979 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007e7a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007e7c:	3b01      	subs	r3, #1
34007e7e:	2bff      	cmp	r3, #255	@ 0xff
34007e80:	d904      	bls.n	34007e8c <HAL_RCCEx_PeriphCLKConfig+0x2c64>
34007e82:	f240 7187 	movw	r1, #1927	@ 0x787
34007e86:	488b      	ldr	r0, [pc, #556]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007e88:	f7f9 f970 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007e8c:	4a8a      	ldr	r2, [pc, #552]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34007e8e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007e90:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007e94:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007e96:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007e9a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007e9e:	3901      	subs	r1, #1
34007ea0:	4303      	orrs	r3, r0
34007ea2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007ea6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007eaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007eae:	f7fe bdf5 	b.w	34006a9c <HAL_RCCEx_PeriphCLKConfig+0x1874>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34007eb2:	4a84      	ldr	r2, [pc, #528]	@ (340080c4 <HAL_RCCEx_PeriphCLKConfig+0x2e9c>)
34007eb4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007eb6:	bf02      	ittt	eq
34007eb8:	2240      	moveq	r2, #64	@ 0x40
34007eba:	4b7f      	ldreq	r3, [pc, #508]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34007ebc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007ec0:	f7fe bdee 	b.w	34006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1878>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34007ec4:	4a80      	ldr	r2, [pc, #512]	@ (340080c8 <HAL_RCCEx_PeriphCLKConfig+0x2ea0>)
34007ec6:	4293      	cmp	r3, r2
34007ec8:	d124      	bne.n	34007f14 <HAL_RCCEx_PeriphCLKConfig+0x2cec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007eca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007ecc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ed0:	d004      	beq.n	34007edc <HAL_RCCEx_PeriphCLKConfig+0x2cb4>
34007ed2:	f240 71b3 	movw	r1, #1971	@ 0x7b3
34007ed6:	4877      	ldr	r0, [pc, #476]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007ed8:	f7f9 f948 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007edc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007ede:	3b01      	subs	r3, #1
34007ee0:	2bff      	cmp	r3, #255	@ 0xff
34007ee2:	d904      	bls.n	34007eee <HAL_RCCEx_PeriphCLKConfig+0x2cc6>
34007ee4:	f240 71b4 	movw	r1, #1972	@ 0x7b4
34007ee8:	4872      	ldr	r0, [pc, #456]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007eea:	f7f9 f93f 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007eee:	4a72      	ldr	r2, [pc, #456]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34007ef0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007ef2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007ef6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007ef8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007efc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007f00:	3901      	subs	r1, #1
34007f02:	4303      	orrs	r3, r0
34007f04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007f08:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007f0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007f10:	f7fe be0c 	b.w	34006b2c <HAL_RCCEx_PeriphCLKConfig+0x1904>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34007f14:	4a6d      	ldr	r2, [pc, #436]	@ (340080cc <HAL_RCCEx_PeriphCLKConfig+0x2ea4>)
34007f16:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f18:	bf02      	ittt	eq
34007f1a:	2240      	moveq	r2, #64	@ 0x40
34007f1c:	4b66      	ldreq	r3, [pc, #408]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34007f1e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f22:	f7fe be05 	b.w	34006b30 <HAL_RCCEx_PeriphCLKConfig+0x1908>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34007f26:	4a6a      	ldr	r2, [pc, #424]	@ (340080d0 <HAL_RCCEx_PeriphCLKConfig+0x2ea8>)
34007f28:	4293      	cmp	r3, r2
34007f2a:	d124      	bne.n	34007f76 <HAL_RCCEx_PeriphCLKConfig+0x2d4e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007f2c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007f2e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007f32:	d004      	beq.n	34007f3e <HAL_RCCEx_PeriphCLKConfig+0x2d16>
34007f34:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
34007f38:	485e      	ldr	r0, [pc, #376]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007f3a:	f7f9 f917 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007f3e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007f40:	3b01      	subs	r3, #1
34007f42:	2bff      	cmp	r3, #255	@ 0xff
34007f44:	d904      	bls.n	34007f50 <HAL_RCCEx_PeriphCLKConfig+0x2d28>
34007f46:	f240 71e1 	movw	r1, #2017	@ 0x7e1
34007f4a:	485a      	ldr	r0, [pc, #360]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007f4c:	f7f9 f90e 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007f50:	4a59      	ldr	r2, [pc, #356]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34007f52:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007f54:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007f58:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007f5a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007f5e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007f62:	3901      	subs	r1, #1
34007f64:	4303      	orrs	r3, r0
34007f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007f6a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007f6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007f72:	f7fe be3e 	b.w	34006bf2 <HAL_RCCEx_PeriphCLKConfig+0x19ca>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34007f76:	4a57      	ldr	r2, [pc, #348]	@ (340080d4 <HAL_RCCEx_PeriphCLKConfig+0x2eac>)
34007f78:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007f7a:	bf02      	ittt	eq
34007f7c:	2240      	moveq	r2, #64	@ 0x40
34007f7e:	4b4e      	ldreq	r3, [pc, #312]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34007f80:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007f84:	f7fe be37 	b.w	34006bf6 <HAL_RCCEx_PeriphCLKConfig+0x19ce>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34007f88:	4a53      	ldr	r2, [pc, #332]	@ (340080d8 <HAL_RCCEx_PeriphCLKConfig+0x2eb0>)
34007f8a:	4293      	cmp	r3, r2
34007f8c:	d124      	bne.n	34007fd8 <HAL_RCCEx_PeriphCLKConfig+0x2db0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007f8e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007f90:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007f94:	d004      	beq.n	34007fa0 <HAL_RCCEx_PeriphCLKConfig+0x2d78>
34007f96:	f640 010d 	movw	r1, #2061	@ 0x80d
34007f9a:	4846      	ldr	r0, [pc, #280]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007f9c:	f7f9 f8e6 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34007fa0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007fa2:	3b01      	subs	r3, #1
34007fa4:	2bff      	cmp	r3, #255	@ 0xff
34007fa6:	d904      	bls.n	34007fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d8a>
34007fa8:	f640 010e 	movw	r1, #2062	@ 0x80e
34007fac:	4841      	ldr	r0, [pc, #260]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007fae:	f7f9 f8dd 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34007fb2:	4a41      	ldr	r2, [pc, #260]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34007fb4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34007fb6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34007fba:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34007fbc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34007fc0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34007fc4:	3901      	subs	r1, #1
34007fc6:	4303      	orrs	r3, r0
34007fc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34007fcc:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34007fd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34007fd4:	f7fe be55 	b.w	34006c82 <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34007fd8:	4a40      	ldr	r2, [pc, #256]	@ (340080dc <HAL_RCCEx_PeriphCLKConfig+0x2eb4>)
34007fda:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34007fdc:	bf02      	ittt	eq
34007fde:	2240      	moveq	r2, #64	@ 0x40
34007fe0:	4b35      	ldreq	r3, [pc, #212]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34007fe2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34007fe6:	f7fe be4e 	b.w	34006c86 <HAL_RCCEx_PeriphCLKConfig+0x1a5e>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34007fea:	4a3d      	ldr	r2, [pc, #244]	@ (340080e0 <HAL_RCCEx_PeriphCLKConfig+0x2eb8>)
34007fec:	4293      	cmp	r3, r2
34007fee:	d124      	bne.n	3400803a <HAL_RCCEx_PeriphCLKConfig+0x2e12>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34007ff0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007ff2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34007ff6:	d004      	beq.n	34008002 <HAL_RCCEx_PeriphCLKConfig+0x2dda>
34007ff8:	f640 013a 	movw	r1, #2106	@ 0x83a
34007ffc:	482d      	ldr	r0, [pc, #180]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34007ffe:	f7f9 f8b5 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008002:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008004:	3b01      	subs	r3, #1
34008006:	2bff      	cmp	r3, #255	@ 0xff
34008008:	d904      	bls.n	34008014 <HAL_RCCEx_PeriphCLKConfig+0x2dec>
3400800a:	f640 013b 	movw	r1, #2107	@ 0x83b
3400800e:	4829      	ldr	r0, [pc, #164]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34008010:	f7f9 f8ac 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008014:	4a28      	ldr	r2, [pc, #160]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34008016:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008018:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400801c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3400801e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008022:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008026:	3901      	subs	r1, #1
34008028:	4303      	orrs	r3, r0
3400802a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400802e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008032:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008036:	f7fe be6c 	b.w	34006d12 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
3400803a:	4a2a      	ldr	r2, [pc, #168]	@ (340080e4 <HAL_RCCEx_PeriphCLKConfig+0x2ebc>)
3400803c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400803e:	bf02      	ittt	eq
34008040:	2240      	moveq	r2, #64	@ 0x40
34008042:	4b1d      	ldreq	r3, [pc, #116]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34008044:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34008048:	f7fe be65 	b.w	34006d16 <HAL_RCCEx_PeriphCLKConfig+0x1aee>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3400804c:	4a26      	ldr	r2, [pc, #152]	@ (340080e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec0>)
3400804e:	4293      	cmp	r3, r2
34008050:	d124      	bne.n	3400809c <HAL_RCCEx_PeriphCLKConfig+0x2e74>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008052:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34008054:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34008058:	d004      	beq.n	34008064 <HAL_RCCEx_PeriphCLKConfig+0x2e3c>
3400805a:	f640 0167 	movw	r1, #2151	@ 0x867
3400805e:	4815      	ldr	r0, [pc, #84]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34008060:	f7f9 f884 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008064:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34008066:	3b01      	subs	r3, #1
34008068:	2bff      	cmp	r3, #255	@ 0xff
3400806a:	d904      	bls.n	34008076 <HAL_RCCEx_PeriphCLKConfig+0x2e4e>
3400806c:	f640 0168 	movw	r1, #2152	@ 0x868
34008070:	4810      	ldr	r0, [pc, #64]	@ (340080b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34008072:	f7f9 f87b 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34008076:	4a10      	ldr	r2, [pc, #64]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34008078:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3400807a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3400807e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008080:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008084:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34008088:	3901      	subs	r1, #1
3400808a:	4303      	orrs	r3, r0
3400808c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008090:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008094:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34008098:	f7fe be83 	b.w	34006da2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
3400809c:	4a13      	ldr	r2, [pc, #76]	@ (340080ec <HAL_RCCEx_PeriphCLKConfig+0x2ec4>)
3400809e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340080a0:	bf02      	ittt	eq
340080a2:	2240      	moveq	r2, #64	@ 0x40
340080a4:	4b04      	ldreq	r3, [pc, #16]	@ (340080b8 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
340080a6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340080aa:	f7fe be7c 	b.w	34006da6 <HAL_RCCEx_PeriphCLKConfig+0x1b7e>
340080ae:	bf00      	nop
340080b0:	07030430 	.word	0x07030430
340080b4:	3401094f 	.word	0x3401094f
340080b8:	56028000 	.word	0x56028000
340080bc:	07010430 	.word	0x07010430
340080c0:	07030830 	.word	0x07030830
340080c4:	07010830 	.word	0x07010830
340080c8:	07030c30 	.word	0x07030c30
340080cc:	07010c30 	.word	0x07010c30
340080d0:	07031030 	.word	0x07031030
340080d4:	07011030 	.word	0x07011030
340080d8:	07031430 	.word	0x07031430
340080dc:	07011430 	.word	0x07011430
340080e0:	07031830 	.word	0x07031830
340080e4:	07011830 	.word	0x07011830
340080e8:	07031c30 	.word	0x07031c30
340080ec:	07011c30 	.word	0x07011c30
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
340080f0:	4a41      	ldr	r2, [pc, #260]	@ (340081f8 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
340080f2:	4293      	cmp	r3, r2
340080f4:	d124      	bne.n	34008140 <HAL_RCCEx_PeriphCLKConfig+0x2f18>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340080f6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340080f8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340080fc:	d004      	beq.n	34008108 <HAL_RCCEx_PeriphCLKConfig+0x2ee0>
340080fe:	f640 0194 	movw	r1, #2196	@ 0x894
34008102:	483e      	ldr	r0, [pc, #248]	@ (340081fc <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
34008104:	f7f9 f832 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34008108:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3400810a:	3b01      	subs	r3, #1
3400810c:	2bff      	cmp	r3, #255	@ 0xff
3400810e:	d904      	bls.n	3400811a <HAL_RCCEx_PeriphCLKConfig+0x2ef2>
34008110:	f640 0195 	movw	r1, #2197	@ 0x895
34008114:	4839      	ldr	r0, [pc, #228]	@ (340081fc <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
34008116:	f7f9 f829 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400811a:	4a39      	ldr	r2, [pc, #228]	@ (34008200 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
3400811c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3400811e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008122:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008124:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34008128:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400812c:	3901      	subs	r1, #1
3400812e:	4303      	orrs	r3, r0
34008130:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008134:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008138:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400813c:	f7fe be79 	b.w	34006e32 <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34008140:	4a30      	ldr	r2, [pc, #192]	@ (34008204 <HAL_RCCEx_PeriphCLKConfig+0x2fdc>)
34008142:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34008144:	bf02      	ittt	eq
34008146:	2240      	moveq	r2, #64	@ 0x40
34008148:	4b2d      	ldreq	r3, [pc, #180]	@ (34008200 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
3400814a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400814e:	f7fe be72 	b.w	34006e36 <HAL_RCCEx_PeriphCLKConfig+0x1c0e>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
34008152:	4a2d      	ldr	r2, [pc, #180]	@ (34008208 <HAL_RCCEx_PeriphCLKConfig+0x2fe0>)
34008154:	4293      	cmp	r3, r2
34008156:	d124      	bne.n	340081a2 <HAL_RCCEx_PeriphCLKConfig+0x2f7a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34008158:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3400815a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400815e:	d004      	beq.n	3400816a <HAL_RCCEx_PeriphCLKConfig+0x2f42>
34008160:	f640 01c1 	movw	r1, #2241	@ 0x8c1
34008164:	4825      	ldr	r0, [pc, #148]	@ (340081fc <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
34008166:	f7f9 f801 	bl	3400116c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400816a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3400816c:	3b01      	subs	r3, #1
3400816e:	2bff      	cmp	r3, #255	@ 0xff
34008170:	d904      	bls.n	3400817c <HAL_RCCEx_PeriphCLKConfig+0x2f54>
34008172:	f640 01c2 	movw	r1, #2242	@ 0x8c2
34008176:	4821      	ldr	r0, [pc, #132]	@ (340081fc <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
34008178:	f7f8 fff8 	bl	3400116c <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400817c:	4a20      	ldr	r2, [pc, #128]	@ (34008200 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
3400817e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34008180:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008184:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34008186:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400818a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400818e:	3901      	subs	r1, #1
34008190:	4303      	orrs	r3, r0
34008192:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34008196:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400819a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400819e:	f7fe beaa 	b.w	34006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
340081a2:	4a1a      	ldr	r2, [pc, #104]	@ (3400820c <HAL_RCCEx_PeriphCLKConfig+0x2fe4>)
340081a4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340081a6:	bf02      	ittt	eq
340081a8:	2240      	moveq	r2, #64	@ 0x40
340081aa:	4b15      	ldreq	r3, [pc, #84]	@ (34008200 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
340081ac:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340081b0:	f7fe bea3 	b.w	34006efa <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
340081b4:	f7fc ff18 	bl	34004fe8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340081b8:	f7fe bec5 	b.w	34006f46 <HAL_RCCEx_PeriphCLKConfig+0x1d1e>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
340081bc:	f7fc ff14 	bl	34004fe8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340081c0:	f7fe bee3 	b.w	34006f8a <HAL_RCCEx_PeriphCLKConfig+0x1d62>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
340081c4:	4a12      	ldr	r2, [pc, #72]	@ (34008210 <HAL_RCCEx_PeriphCLKConfig+0x2fe8>)
340081c6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340081c8:	bf02      	ittt	eq
340081ca:	2240      	moveq	r2, #64	@ 0x40
340081cc:	4b0c      	ldreq	r3, [pc, #48]	@ (34008200 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
340081ce:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340081d2:	f7fe bf1a 	b.w	3400700a <HAL_RCCEx_PeriphCLKConfig+0x1de2>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
340081d6:	f7fc ff07 	bl	34004fe8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340081da:	f7fe bf23 	b.w	34007024 <HAL_RCCEx_PeriphCLKConfig+0x1dfc>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
340081de:	4a0d      	ldr	r2, [pc, #52]	@ (34008214 <HAL_RCCEx_PeriphCLKConfig+0x2fec>)
340081e0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340081e2:	bf02      	ittt	eq
340081e4:	2240      	moveq	r2, #64	@ 0x40
340081e6:	4b06      	ldreq	r3, [pc, #24]	@ (34008200 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
340081e8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340081ec:	f7fe bf5a 	b.w	340070a4 <HAL_RCCEx_PeriphCLKConfig+0x1e7c>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340081f0:	f7fc fefa 	bl	34004fe8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340081f4:	f7fe bf63 	b.w	340070be <HAL_RCCEx_PeriphCLKConfig+0x1e96>
340081f8:	07030034 	.word	0x07030034
340081fc:	3401094f 	.word	0x3401094f
34008200:	56028000 	.word	0x56028000
34008204:	07010034 	.word	0x07010034
34008208:	07030434 	.word	0x07030434
3400820c:	07010434 	.word	0x07010434
34008210:	03010c14 	.word	0x03010c14
34008214:	03011414 	.word	0x03011414

34008218 <HAL_RCCEx_GetPLL1CLKFreq>:
{
34008218:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3400821a:	4c1e      	ldr	r4, [pc, #120]	@ (34008294 <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
3400821c:	6863      	ldr	r3, [r4, #4]
3400821e:	05d9      	lsls	r1, r3, #23
34008220:	d506      	bpl.n	34008230 <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34008222:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34008226:	005a      	lsls	r2, r3, #1
34008228:	d40f      	bmi.n	3400824a <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3400822a:	2000      	movs	r0, #0
}
3400822c:	b003      	add	sp, #12
3400822e:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34008230:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
34008234:	011b      	lsls	r3, r3, #4
34008236:	d5f8      	bpl.n	3400822a <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34008238:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3400823c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34008240:	b003      	add	sp, #12
34008242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34008246:	f7fc bf89 	b.w	3400515c <RCCEx_GetPLLSourceFreq>
3400824a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3400824e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34008252:	f7fc ff83 	bl	3400515c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34008256:	2800      	cmp	r0, #0
34008258:	d0e7      	beq.n	3400822a <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3400825a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
3400825e:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34008262:	f3c3 5105 	ubfx	r1, r3, #20, #6
34008266:	d0e0      	beq.n	3400822a <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34008268:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
3400826c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008270:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34008274:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008278:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3400827c:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34008280:	9401      	str	r4, [sp, #4]
34008282:	9500      	str	r5, [sp, #0]
34008284:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008288:	f3c2 220b 	ubfx	r2, r2, #8, #12
3400828c:	f7fc ffa0 	bl	340051d0 <RCCEx_CalcPLLFreq>
34008290:	e7cc      	b.n	3400822c <HAL_RCCEx_GetPLL1CLKFreq+0x14>
34008292:	bf00      	nop
34008294:	56028000 	.word	0x56028000

34008298 <HAL_RCCEx_GetPLL2CLKFreq>:
{
34008298:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3400829a:	4c1e      	ldr	r4, [pc, #120]	@ (34008314 <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
3400829c:	6863      	ldr	r3, [r4, #4]
3400829e:	0599      	lsls	r1, r3, #22
340082a0:	d506      	bpl.n	340082b0 <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
340082a2:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
340082a6:	005a      	lsls	r2, r3, #1
340082a8:	d40f      	bmi.n	340082ca <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340082aa:	2000      	movs	r0, #0
}
340082ac:	b003      	add	sp, #12
340082ae:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340082b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
340082b4:	011b      	lsls	r3, r3, #4
340082b6:	d5f8      	bpl.n	340082aa <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340082b8:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340082bc:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340082c0:	b003      	add	sp, #12
340082c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340082c6:	f7fc bf49 	b.w	3400515c <RCCEx_GetPLLSourceFreq>
340082ca:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340082ce:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340082d2:	f7fc ff43 	bl	3400515c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340082d6:	2800      	cmp	r0, #0
340082d8:	d0e7      	beq.n	340082aa <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
340082da:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
340082de:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340082e2:	f3c3 5105 	ubfx	r1, r3, #20, #6
340082e6:	d0e0      	beq.n	340082aa <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
340082e8:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
340082ec:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340082f0:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340082f4:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340082f8:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340082fc:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34008300:	9401      	str	r4, [sp, #4]
34008302:	9500      	str	r5, [sp, #0]
34008304:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008308:	f3c2 220b 	ubfx	r2, r2, #8, #12
3400830c:	f7fc ff60 	bl	340051d0 <RCCEx_CalcPLLFreq>
34008310:	e7cc      	b.n	340082ac <HAL_RCCEx_GetPLL2CLKFreq+0x14>
34008312:	bf00      	nop
34008314:	56028000 	.word	0x56028000

34008318 <HAL_RCCEx_GetPLL3CLKFreq>:
{
34008318:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3400831a:	4c1e      	ldr	r4, [pc, #120]	@ (34008394 <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
3400831c:	6863      	ldr	r3, [r4, #4]
3400831e:	0559      	lsls	r1, r3, #21
34008320:	d506      	bpl.n	34008330 <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34008322:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34008326:	005a      	lsls	r2, r3, #1
34008328:	d40f      	bmi.n	3400834a <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3400832a:	2000      	movs	r0, #0
}
3400832c:	b003      	add	sp, #12
3400832e:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34008330:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34008334:	011b      	lsls	r3, r3, #4
34008336:	d5f8      	bpl.n	3400832a <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34008338:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3400833c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34008340:	b003      	add	sp, #12
34008342:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34008346:	f7fc bf09 	b.w	3400515c <RCCEx_GetPLLSourceFreq>
3400834a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3400834e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34008352:	f7fc ff03 	bl	3400515c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34008356:	2800      	cmp	r0, #0
34008358:	d0e7      	beq.n	3400832a <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3400835a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
3400835e:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34008362:	f3c3 5105 	ubfx	r1, r3, #20, #6
34008366:	d0e0      	beq.n	3400832a <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34008368:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
3400836c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008370:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34008374:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008378:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3400837c:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34008380:	9401      	str	r4, [sp, #4]
34008382:	9500      	str	r5, [sp, #0]
34008384:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008388:	f3c2 220b 	ubfx	r2, r2, #8, #12
3400838c:	f7fc ff20 	bl	340051d0 <RCCEx_CalcPLLFreq>
34008390:	e7cc      	b.n	3400832c <HAL_RCCEx_GetPLL3CLKFreq+0x14>
34008392:	bf00      	nop
34008394:	56028000 	.word	0x56028000

34008398 <HAL_RCCEx_GetPLL4CLKFreq>:
{
34008398:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3400839a:	4c1e      	ldr	r4, [pc, #120]	@ (34008414 <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
3400839c:	6863      	ldr	r3, [r4, #4]
3400839e:	0519      	lsls	r1, r3, #20
340083a0:	d506      	bpl.n	340083b0 <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
340083a2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
340083a6:	005a      	lsls	r2, r3, #1
340083a8:	d40f      	bmi.n	340083ca <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340083aa:	2000      	movs	r0, #0
}
340083ac:	b003      	add	sp, #12
340083ae:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340083b0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
340083b4:	011b      	lsls	r3, r3, #4
340083b6:	d5f8      	bpl.n	340083aa <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
340083b8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340083bc:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340083c0:	b003      	add	sp, #12
340083c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340083c6:	f7fc bec9 	b.w	3400515c <RCCEx_GetPLLSourceFreq>
340083ca:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340083ce:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340083d2:	f7fc fec3 	bl	3400515c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340083d6:	2800      	cmp	r0, #0
340083d8:	d0e7      	beq.n	340083aa <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
340083da:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
340083de:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340083e2:	f3c3 5105 	ubfx	r1, r3, #20, #6
340083e6:	d0e0      	beq.n	340083aa <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
340083e8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
340083ec:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340083f0:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340083f4:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340083f8:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340083fc:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34008400:	9401      	str	r4, [sp, #4]
34008402:	9500      	str	r5, [sp, #0]
34008404:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34008408:	f3c2 220b 	ubfx	r2, r2, #8, #12
3400840c:	f7fc fee0 	bl	340051d0 <RCCEx_CalcPLLFreq>
34008410:	e7cc      	b.n	340083ac <HAL_RCCEx_GetPLL4CLKFreq+0x14>
34008412:	bf00      	nop
34008414:	56028000 	.word	0x56028000

34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34008418:	4b3e      	ldr	r3, [pc, #248]	@ (34008514 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
3400841a:	b510      	push	{r4, lr}
3400841c:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
34008420:	0652      	lsls	r2, r2, #25
34008422:	d535      	bpl.n	34008490 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34008424:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34008428:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
3400842c:	3a01      	subs	r2, #1
3400842e:	2a06      	cmp	r2, #6
34008430:	d805      	bhi.n	3400843e <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
34008432:	e8df f002 	tbb	[pc, r2]
34008436:	130e      	.short	0x130e
34008438:	3b2f1846 	.word	0x3b2f1846
3400843c:	52          	.byte	0x52
3400843d:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
3400843e:	f7fc fdf3 	bl	34005028 <LL_RCC_HSI_IsReady>
34008442:	b328      	cbz	r0, 34008490 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008444:	4b33      	ldr	r3, [pc, #204]	@ (34008514 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008446:	4834      	ldr	r0, [pc, #208]	@ (34008518 <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
34008448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400844a:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400844e:	40d8      	lsrs	r0, r3
34008450:	e01f      	b.n	34008492 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7a>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34008452:	f7fc fdf1 	bl	34005038 <LL_RCC_MSI_IsReady>
34008456:	b1d8      	cbz	r0, 34008490 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
        {
          clkp_frequency = MSI_VALUE;
34008458:	4830      	ldr	r0, [pc, #192]	@ (3400851c <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
3400845a:	e01a      	b.n	34008492 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7a>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
3400845c:	f7fc fddc 	bl	34005018 <LL_RCC_HSE_IsReady>
34008460:	b1b0      	cbz	r0, 34008490 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
        {
          clkp_frequency = HSE_VALUE;
34008462:	482f      	ldr	r0, [pc, #188]	@ (34008520 <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
34008464:	e015      	b.n	34008492 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34008466:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3400846a:	06d4      	lsls	r4, r2, #27
3400846c:	d510      	bpl.n	34008490 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3400846e:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34008472:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34008476:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400847a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3400847c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34008480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008484:	d043      	beq.n	3400850e <RCCEx_GetCLKPCLKFreq.constprop.0+0xf6>
34008486:	d834      	bhi.n	340084f2 <RCCEx_GetCLKPCLKFreq.constprop.0+0xda>
34008488:	b3cb      	cbz	r3, 340084fe <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
3400848a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400848e:	d03b      	beq.n	34008508 <RCCEx_GetCLKPCLKFreq.constprop.0+0xf0>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34008490:	2000      	movs	r0, #0
}
34008492:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34008494:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008498:	0590      	lsls	r0, r2, #22
3400849a:	d5f9      	bpl.n	34008490 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400849c:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340084a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340084a4:	f3c0 4007 	ubfx	r0, r0, #16, #8
340084a8:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340084aa:	e7e7      	b.n	3400847c <RCCEx_GetCLKPCLKFreq.constprop.0+0x64>
        if (LL_RCC_IC15_IsEnabled() != 0U)
340084ac:	f7fc fe3c 	bl	34005128 <LL_RCC_IC15_IsEnabled>
340084b0:	2800      	cmp	r0, #0
340084b2:	d0ed      	beq.n	34008490 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
          ic_divider = LL_RCC_IC15_GetDivider();
340084b4:	f7fc fe40 	bl	34005138 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340084b8:	4b16      	ldr	r3, [pc, #88]	@ (34008514 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
340084ba:	4604      	mov	r4, r0
340084bc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340084c0:	e7dc      	b.n	3400847c <RCCEx_GetCLKPCLKFreq.constprop.0+0x64>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
340084c2:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340084c6:	0351      	lsls	r1, r2, #13
340084c8:	d5e2      	bpl.n	34008490 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340084ca:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340084ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340084d2:	f3c0 4007 	ubfx	r0, r0, #16, #8
340084d6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340084d8:	e7d0      	b.n	3400847c <RCCEx_GetCLKPCLKFreq.constprop.0+0x64>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
340084da:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340084de:	0312      	lsls	r2, r2, #12
340084e0:	d5d6      	bpl.n	34008490 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340084e2:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340084e6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340084ea:	f3c0 4007 	ubfx	r0, r0, #16, #8
340084ee:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340084f0:	e7c4      	b.n	3400847c <RCCEx_GetCLKPCLKFreq.constprop.0+0x64>
340084f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340084f6:	d1cb      	bne.n	34008490 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340084f8:	f7ff ff4e 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
340084fc:	e001      	b.n	34008502 <RCCEx_GetCLKPCLKFreq.constprop.0+0xea>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340084fe:	f7ff fe8b 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
34008502:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
34008506:	e7c4      	b.n	34008492 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7a>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008508:	f7ff fec6 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
3400850c:	e7f9      	b.n	34008502 <RCCEx_GetCLKPCLKFreq.constprop.0+0xea>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400850e:	f7ff ff03 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
34008512:	e7f6      	b.n	34008502 <RCCEx_GetCLKPCLKFreq.constprop.0+0xea>
34008514:	56028000 	.word	0x56028000
34008518:	03d09000 	.word	0x03d09000
3400851c:	003d0900 	.word	0x003d0900
34008520:	02dc6c00 	.word	0x02dc6c00

34008524 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
34008524:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34008526:	4d2d      	ldr	r5, [pc, #180]	@ (340085dc <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
34008528:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
3400852c:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34008530:	2b06      	cmp	r3, #6
34008532:	d824      	bhi.n	3400857e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
34008534:	e8df f003 	tbb	[pc, r3]
34008538:	2a110d04 	.word	0x2a110d04
3400853c:	4049      	.short	0x4049
3400853e:	4f          	.byte	0x4f
3400853f:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008540:	f7fc fcf6 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34008544:	f7fc fe02 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008548:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
3400854a:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400854e:	40d8      	lsrs	r0, r3
34008550:	e016      	b.n	34008580 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5c>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
34008552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008556:	f7ff bf5f 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3400855a:	f7fc fd9d 	bl	34005098 <LL_RCC_IC7_IsEnabled>
3400855e:	b170      	cbz	r0, 3400857e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
        ic_divider = LL_RCC_IC7_GetDivider();
34008560:	f7fc fda2 	bl	340050a8 <LL_RCC_IC7_GetDivider>
34008564:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34008566:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3400856a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3400856e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008572:	d01e      	beq.n	340085b2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x8e>
34008574:	d814      	bhi.n	340085a0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
34008576:	b1cb      	cbz	r3, 340085ac <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x88>
34008578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400857c:	d001      	beq.n	34008582 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
3400857e:	2000      	movs	r0, #0
}
34008580:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008582:	f7ff fe89 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008586:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400858a:	e7f9      	b.n	34008580 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5c>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3400858c:	f7fc fd96 	bl	340050bc <LL_RCC_IC8_IsEnabled>
34008590:	2800      	cmp	r0, #0
34008592:	d0f4      	beq.n	3400857e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
        ic_divider = LL_RCC_IC8_GetDivider();
34008594:	f7fc fd9a 	bl	340050cc <LL_RCC_IC8_GetDivider>
34008598:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
3400859c:	4604      	mov	r4, r0
3400859e:	e7e4      	b.n	3400856a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
340085a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340085a4:	d1eb      	bne.n	3400857e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340085a6:	f7ff fef7 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
340085aa:	e7ec      	b.n	34008586 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x62>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340085ac:	f7ff fe34 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
340085b0:	e7e9      	b.n	34008586 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x62>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340085b2:	f7ff feb1 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
340085b6:	e7e6      	b.n	34008586 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x62>
      if (LL_RCC_HSI_IsReady() != 0U)
340085b8:	f7fc fd36 	bl	34005028 <LL_RCC_HSI_IsReady>
340085bc:	2800      	cmp	r0, #0
340085be:	d0de      	beq.n	3400857e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340085c0:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340085c2:	4807      	ldr	r0, [pc, #28]	@ (340085e0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
340085c4:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340085c8:	e7c1      	b.n	3400854e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
340085ca:	f7fc fd35 	bl	34005038 <LL_RCC_MSI_IsReady>
340085ce:	2800      	cmp	r0, #0
340085d0:	d0d5      	beq.n	3400857e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
        spdifrx_frequency = MSI_VALUE;
340085d2:	4804      	ldr	r0, [pc, #16]	@ (340085e4 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xc0>)
340085d4:	e7d4      	b.n	34008580 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5c>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
340085d6:	4804      	ldr	r0, [pc, #16]	@ (340085e8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xc4>)
  return spdifrx_frequency;
340085d8:	e7d2      	b.n	34008580 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5c>
340085da:	bf00      	nop
340085dc:	56028000 	.word	0x56028000
340085e0:	03d09000 	.word	0x03d09000
340085e4:	003d0900 	.word	0x003d0900
340085e8:	00bb8000 	.word	0x00bb8000

340085ec <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
340085ec:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340085ee:	f7fc fd45 	bl	3400507c <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340085f2:	4b37      	ldr	r3, [pc, #220]	@ (340086d0 <RCCEx_GetXSPICLKFreq+0xe4>)
340085f4:	4298      	cmp	r0, r3
340085f6:	d028      	beq.n	3400864a <RCCEx_GetXSPICLKFreq+0x5e>
340085f8:	d81b      	bhi.n	34008632 <RCCEx_GetXSPICLKFreq+0x46>
340085fa:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340085fe:	4298      	cmp	r0, r3
34008600:	d013      	beq.n	3400862a <RCCEx_GetXSPICLKFreq+0x3e>
34008602:	d80b      	bhi.n	3400861c <RCCEx_GetXSPICLKFreq+0x30>
34008604:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34008608:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3400860c:	429a      	cmp	r2, r3
3400860e:	d04b      	beq.n	340086a8 <RCCEx_GetXSPICLKFreq+0xbc>
34008610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008614:	4298      	cmp	r0, r3
34008616:	d047      	beq.n	340086a8 <RCCEx_GetXSPICLKFreq+0xbc>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34008618:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
3400861a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3400861c:	4b2d      	ldr	r3, [pc, #180]	@ (340086d4 <RCCEx_GetXSPICLKFreq+0xe8>)
3400861e:	4298      	cmp	r0, r3
34008620:	d003      	beq.n	3400862a <RCCEx_GetXSPICLKFreq+0x3e>
34008622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008626:	4298      	cmp	r0, r3
34008628:	d1f6      	bne.n	34008618 <RCCEx_GetXSPICLKFreq+0x2c>
}
3400862a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400862e:	f7ff bef3 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34008632:	4b29      	ldr	r3, [pc, #164]	@ (340086d8 <RCCEx_GetXSPICLKFreq+0xec>)
34008634:	4298      	cmp	r0, r3
34008636:	d029      	beq.n	3400868c <RCCEx_GetXSPICLKFreq+0xa0>
34008638:	d821      	bhi.n	3400867e <RCCEx_GetXSPICLKFreq+0x92>
3400863a:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
3400863e:	4298      	cmp	r0, r3
34008640:	d003      	beq.n	3400864a <RCCEx_GetXSPICLKFreq+0x5e>
34008642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008646:	4298      	cmp	r0, r3
34008648:	d1e6      	bne.n	34008618 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
3400864a:	4b24      	ldr	r3, [pc, #144]	@ (340086dc <RCCEx_GetXSPICLKFreq+0xf0>)
3400864c:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34008650:	f010 0004 	ands.w	r0, r0, #4
34008654:	d0e1      	beq.n	3400861a <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34008656:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3400865a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3400865e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008662:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008664:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34008668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400866c:	d02d      	beq.n	340086ca <RCCEx_GetXSPICLKFreq+0xde>
3400866e:	d821      	bhi.n	340086b4 <RCCEx_GetXSPICLKFreq+0xc8>
34008670:	b333      	cbz	r3, 340086c0 <RCCEx_GetXSPICLKFreq+0xd4>
34008672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008676:	d1cf      	bne.n	34008618 <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008678:	f7ff fe0e 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
3400867c:	e022      	b.n	340086c4 <RCCEx_GetXSPICLKFreq+0xd8>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3400867e:	4b18      	ldr	r3, [pc, #96]	@ (340086e0 <RCCEx_GetXSPICLKFreq+0xf4>)
34008680:	4298      	cmp	r0, r3
34008682:	d003      	beq.n	3400868c <RCCEx_GetXSPICLKFreq+0xa0>
34008684:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008688:	4298      	cmp	r0, r3
3400868a:	d1c5      	bne.n	34008618 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3400868c:	4b13      	ldr	r3, [pc, #76]	@ (340086dc <RCCEx_GetXSPICLKFreq+0xf0>)
3400868e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34008692:	f010 0008 	ands.w	r0, r0, #8
34008696:	d0c0      	beq.n	3400861a <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34008698:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3400869c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
340086a0:	f3c0 4007 	ubfx	r0, r0, #16, #8
340086a4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
340086a6:	e7dd      	b.n	34008664 <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340086a8:	f7fc fc42 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
}
340086ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340086b0:	f7fc bd4c 	b.w	3400514c <RCCEx_GetHCLKFreq>
340086b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340086b8:	d1ae      	bne.n	34008618 <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340086ba:	f7ff fe6d 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
340086be:	e001      	b.n	340086c4 <RCCEx_GetXSPICLKFreq+0xd8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340086c0:	f7ff fdaa 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
340086c4:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
340086c8:	e7a7      	b.n	3400861a <RCCEx_GetXSPICLKFreq+0x2e>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340086ca:	f7ff fe25 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
340086ce:	e7f9      	b.n	340086c4 <RCCEx_GetXSPICLKFreq+0xd8>
340086d0:	03020014 	.word	0x03020014
340086d4:	03010414 	.word	0x03010414
340086d8:	03030014 	.word	0x03030014
340086dc:	56028000 	.word	0x56028000
340086e0:	03030414 	.word	0x03030414

340086e4 <RCCEx_GetOTGPHYCLKFreq>:
{
340086e4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340086e6:	f7fc fcc9 	bl	3400507c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340086ea:	4b2d      	ldr	r3, [pc, #180]	@ (340087a0 <RCCEx_GetOTGPHYCLKFreq+0xbc>)
340086ec:	4298      	cmp	r0, r3
340086ee:	d021      	beq.n	34008734 <RCCEx_GetOTGPHYCLKFreq+0x50>
340086f0:	d815      	bhi.n	3400871e <RCCEx_GetOTGPHYCLKFreq+0x3a>
340086f2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340086f6:	4298      	cmp	r0, r3
340086f8:	d00d      	beq.n	34008716 <RCCEx_GetOTGPHYCLKFreq+0x32>
340086fa:	d809      	bhi.n	34008710 <RCCEx_GetOTGPHYCLKFreq+0x2c>
340086fc:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008700:	4298      	cmp	r0, r3
34008702:	d02e      	beq.n	34008762 <RCCEx_GetOTGPHYCLKFreq+0x7e>
34008704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008708:	4298      	cmp	r0, r3
3400870a:	d02a      	beq.n	34008762 <RCCEx_GetOTGPHYCLKFreq+0x7e>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3400870c:	2000      	movs	r0, #0
}
3400870e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34008710:	4b24      	ldr	r3, [pc, #144]	@ (340087a4 <RCCEx_GetOTGPHYCLKFreq+0xc0>)
34008712:	4298      	cmp	r0, r3
34008714:	d1fa      	bne.n	3400870c <RCCEx_GetOTGPHYCLKFreq+0x28>
}
34008716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400871a:	f7ff be7d 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3400871e:	4b22      	ldr	r3, [pc, #136]	@ (340087a8 <RCCEx_GetOTGPHYCLKFreq+0xc4>)
34008720:	4298      	cmp	r0, r3
34008722:	d024      	beq.n	3400876e <RCCEx_GetOTGPHYCLKFreq+0x8a>
34008724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34008728:	4298      	cmp	r0, r3
3400872a:	d020      	beq.n	3400876e <RCCEx_GetOTGPHYCLKFreq+0x8a>
3400872c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008730:	4298      	cmp	r0, r3
34008732:	d1eb      	bne.n	3400870c <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34008734:	f7fc fcf8 	bl	34005128 <LL_RCC_IC15_IsEnabled>
34008738:	2800      	cmp	r0, #0
3400873a:	d0e7      	beq.n	3400870c <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3400873c:	f7fc fcfc 	bl	34005138 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34008740:	4b1a      	ldr	r3, [pc, #104]	@ (340087ac <RCCEx_GetOTGPHYCLKFreq+0xc8>)
34008742:	4604      	mov	r4, r0
34008744:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34008748:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3400874c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008750:	d022      	beq.n	34008798 <RCCEx_GetOTGPHYCLKFreq+0xb4>
34008752:	d816      	bhi.n	34008782 <RCCEx_GetOTGPHYCLKFreq+0x9e>
34008754:	b1db      	cbz	r3, 3400878e <RCCEx_GetOTGPHYCLKFreq+0xaa>
34008756:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400875a:	d1d7      	bne.n	3400870c <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400875c:	f7ff fd9c 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
34008760:	e017      	b.n	34008792 <RCCEx_GetOTGPHYCLKFreq+0xae>
      if (LL_RCC_HSE_IsReady() != 0U)
34008762:	f7fc fc59 	bl	34005018 <LL_RCC_HSE_IsReady>
34008766:	2800      	cmp	r0, #0
34008768:	d0d0      	beq.n	3400870c <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
3400876a:	4811      	ldr	r0, [pc, #68]	@ (340087b0 <RCCEx_GetOTGPHYCLKFreq+0xcc>)
3400876c:	e7cf      	b.n	3400870e <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
3400876e:	f7fc fc53 	bl	34005018 <LL_RCC_HSE_IsReady>
34008772:	2800      	cmp	r0, #0
34008774:	d0ca      	beq.n	3400870c <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34008776:	f7fc fc47 	bl	34005008 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3400877a:	2800      	cmp	r0, #0
3400877c:	d1f5      	bne.n	3400876a <RCCEx_GetOTGPHYCLKFreq+0x86>
          usb_frequency = HSE_VALUE;
3400877e:	480d      	ldr	r0, [pc, #52]	@ (340087b4 <RCCEx_GetOTGPHYCLKFreq+0xd0>)
  return usb_frequency;
34008780:	e7c5      	b.n	3400870e <RCCEx_GetOTGPHYCLKFreq+0x2a>
34008782:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008786:	d1c1      	bne.n	3400870c <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008788:	f7ff fe06 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
3400878c:	e001      	b.n	34008792 <RCCEx_GetOTGPHYCLKFreq+0xae>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400878e:	f7ff fd43 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
34008792:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008796:	e7ba      	b.n	3400870e <RCCEx_GetOTGPHYCLKFreq+0x2a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008798:	f7ff fdbe 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
3400879c:	e7f9      	b.n	34008792 <RCCEx_GetOTGPHYCLKFreq+0xae>
3400879e:	bf00      	nop
340087a0:	03020c14 	.word	0x03020c14
340087a4:	03011414 	.word	0x03011414
340087a8:	03030c14 	.word	0x03030c14
340087ac:	56028000 	.word	0x56028000
340087b0:	016e3600 	.word	0x016e3600
340087b4:	02dc6c00 	.word	0x02dc6c00

340087b8 <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
340087b8:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
340087ba:	f7fc fc5f 	bl	3400507c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
340087be:	4b11      	ldr	r3, [pc, #68]	@ (34008804 <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
340087c0:	4298      	cmp	r0, r3
340087c2:	d01c      	beq.n	340087fe <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
340087c4:	d805      	bhi.n	340087d2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
340087c6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340087ca:	4298      	cmp	r0, r3
340087cc:	d012      	beq.n	340087f4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
340087ce:	2000      	movs	r0, #0
}
340087d0:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
340087d2:	4b0d      	ldr	r3, [pc, #52]	@ (34008808 <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
340087d4:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
340087d8:	4298      	cmp	r0, r3
340087da:	d1f8      	bne.n	340087ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
340087dc:	f7fc fc1c 	bl	34005018 <LL_RCC_HSE_IsReady>
340087e0:	2800      	cmp	r0, #0
340087e2:	d0f4      	beq.n	340087ce <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
340087e4:	f7fc fc10 	bl	34005008 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
340087e8:	4b08      	ldr	r3, [pc, #32]	@ (3400880c <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
340087ea:	2800      	cmp	r0, #0
340087ec:	4808      	ldr	r0, [pc, #32]	@ (34008810 <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
340087ee:	bf08      	it	eq
340087f0:	4618      	moveq	r0, r3
340087f2:	e7ed      	b.n	340087d0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
340087f4:	4807      	ldr	r0, [pc, #28]	@ (34008814 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
340087f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340087fa:	f7ff bf73 	b.w	340086e4 <RCCEx_GetOTGPHYCLKFreq>
340087fe:	4806      	ldr	r0, [pc, #24]	@ (34008818 <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
34008800:	e7f9      	b.n	340087f6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
34008802:	bf00      	nop
34008804:	01001814 	.word	0x01001814
34008808:	01011014 	.word	0x01011014
3400880c:	02dc6c00 	.word	0x02dc6c00
34008810:	016e3600 	.word	0x016e3600
34008814:	03000c14 	.word	0x03000c14
34008818:	03001414 	.word	0x03001414

3400881c <RCCEx_GetUSARTCLKFreq>:
{
3400881c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400881e:	f7fc fc2d 	bl	3400507c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008822:	4b70      	ldr	r3, [pc, #448]	@ (340089e4 <RCCEx_GetUSARTCLKFreq+0x1c8>)
34008824:	4298      	cmp	r0, r3
34008826:	d039      	beq.n	3400889c <RCCEx_GetUSARTCLKFreq+0x80>
34008828:	d853      	bhi.n	340088d2 <RCCEx_GetUSARTCLKFreq+0xb6>
3400882a:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
3400882e:	4298      	cmp	r0, r3
34008830:	f000 80b6 	beq.w	340089a0 <RCCEx_GetUSARTCLKFreq+0x184>
34008834:	d813      	bhi.n	3400885e <RCCEx_GetUSARTCLKFreq+0x42>
34008836:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
3400883a:	4298      	cmp	r0, r3
3400883c:	f000 80b0 	beq.w	340089a0 <RCCEx_GetUSARTCLKFreq+0x184>
34008840:	d80b      	bhi.n	3400885a <RCCEx_GetUSARTCLKFreq+0x3e>
34008842:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34008846:	4298      	cmp	r0, r3
34008848:	f000 80aa 	beq.w	340089a0 <RCCEx_GetUSARTCLKFreq+0x184>
3400884c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008850:	4298      	cmp	r0, r3
34008852:	f000 80af 	beq.w	340089b4 <RCCEx_GetUSARTCLKFreq+0x198>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
34008856:	2000      	movs	r0, #0
}
34008858:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3400885a:	4b63      	ldr	r3, [pc, #396]	@ (340089e8 <RCCEx_GetUSARTCLKFreq+0x1cc>)
3400885c:	e7f8      	b.n	34008850 <RCCEx_GetUSARTCLKFreq+0x34>
3400885e:	4b63      	ldr	r3, [pc, #396]	@ (340089ec <RCCEx_GetUSARTCLKFreq+0x1d0>)
34008860:	4298      	cmp	r0, r3
34008862:	d00c      	beq.n	3400887e <RCCEx_GetUSARTCLKFreq+0x62>
34008864:	d80f      	bhi.n	34008886 <RCCEx_GetUSARTCLKFreq+0x6a>
34008866:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
3400886a:	4298      	cmp	r0, r3
3400886c:	d007      	beq.n	3400887e <RCCEx_GetUSARTCLKFreq+0x62>
3400886e:	bf8e      	itee	hi
34008870:	4b5f      	ldrhi	r3, [pc, #380]	@ (340089f0 <RCCEx_GetUSARTCLKFreq+0x1d4>)
34008872:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34008876:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
3400887a:	4298      	cmp	r0, r3
3400887c:	d1eb      	bne.n	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
}
3400887e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008882:	f7ff bdc9 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008886:	4b5b      	ldr	r3, [pc, #364]	@ (340089f4 <RCCEx_GetUSARTCLKFreq+0x1d8>)
34008888:	4298      	cmp	r0, r3
3400888a:	d007      	beq.n	3400889c <RCCEx_GetUSARTCLKFreq+0x80>
3400888c:	bf8e      	itee	hi
3400888e:	4b5a      	ldrhi	r3, [pc, #360]	@ (340089f8 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34008890:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34008894:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34008898:	4298      	cmp	r0, r3
3400889a:	d1dc      	bne.n	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3400889c:	f7fc fc20 	bl	340050e0 <LL_RCC_IC9_IsEnabled>
340088a0:	2800      	cmp	r0, #0
340088a2:	d0d8      	beq.n	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
340088a4:	f7fc fc24 	bl	340050f0 <LL_RCC_IC9_GetDivider>
340088a8:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
340088aa:	4b54      	ldr	r3, [pc, #336]	@ (340089fc <RCCEx_GetUSARTCLKFreq+0x1e0>)
340088ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
340088b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
340088b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340088b8:	f000 8091 	beq.w	340089de <RCCEx_GetUSARTCLKFreq+0x1c2>
340088bc:	f200 8083 	bhi.w	340089c6 <RCCEx_GetUSARTCLKFreq+0x1aa>
340088c0:	2b00      	cmp	r3, #0
340088c2:	f000 8087 	beq.w	340089d4 <RCCEx_GetUSARTCLKFreq+0x1b8>
340088c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340088ca:	d1c4      	bne.n	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340088cc:	f7ff fce4 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
340088d0:	e082      	b.n	340089d8 <RCCEx_GetUSARTCLKFreq+0x1bc>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340088d2:	4b4b      	ldr	r3, [pc, #300]	@ (34008a00 <RCCEx_GetUSARTCLKFreq+0x1e4>)
340088d4:	4298      	cmp	r0, r3
340088d6:	d045      	beq.n	34008964 <RCCEx_GetUSARTCLKFreq+0x148>
340088d8:	d833      	bhi.n	34008942 <RCCEx_GetUSARTCLKFreq+0x126>
340088da:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340088de:	4298      	cmp	r0, r3
340088e0:	d028      	beq.n	34008934 <RCCEx_GetUSARTCLKFreq+0x118>
340088e2:	d81c      	bhi.n	3400891e <RCCEx_GetUSARTCLKFreq+0x102>
340088e4:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
340088e8:	3bfc      	subs	r3, #252	@ 0xfc
340088ea:	4298      	cmp	r0, r3
340088ec:	d006      	beq.n	340088fc <RCCEx_GetUSARTCLKFreq+0xe0>
340088ee:	d810      	bhi.n	34008912 <RCCEx_GetUSARTCLKFreq+0xf6>
340088f0:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340088f4:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
340088f8:	4298      	cmp	r0, r3
340088fa:	d1ac      	bne.n	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
340088fc:	f7fc fc02 	bl	34005104 <LL_RCC_IC14_IsEnabled>
34008900:	2800      	cmp	r0, #0
34008902:	d0a8      	beq.n	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
34008904:	f7fc fc06 	bl	34005114 <LL_RCC_IC14_GetDivider>
34008908:	4b3c      	ldr	r3, [pc, #240]	@ (340089fc <RCCEx_GetUSARTCLKFreq+0x1e0>)
3400890a:	4604      	mov	r4, r0
3400890c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008910:	e7ce      	b.n	340088b0 <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008912:	4b3c      	ldr	r3, [pc, #240]	@ (34008a04 <RCCEx_GetUSARTCLKFreq+0x1e8>)
34008914:	4298      	cmp	r0, r3
34008916:	d0f1      	beq.n	340088fc <RCCEx_GetUSARTCLKFreq+0xe0>
34008918:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
3400891c:	e7ec      	b.n	340088f8 <RCCEx_GetUSARTCLKFreq+0xdc>
3400891e:	4b3a      	ldr	r3, [pc, #232]	@ (34008a08 <RCCEx_GetUSARTCLKFreq+0x1ec>)
34008920:	4298      	cmp	r0, r3
34008922:	d007      	beq.n	34008934 <RCCEx_GetUSARTCLKFreq+0x118>
34008924:	bf8e      	itee	hi
34008926:	4b39      	ldrhi	r3, [pc, #228]	@ (34008a0c <RCCEx_GetUSARTCLKFreq+0x1f0>)
34008928:	f020 0004 	bicls.w	r0, r0, #4
3400892c:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008930:	4298      	cmp	r0, r3
34008932:	d190      	bne.n	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
34008934:	f7fc fb88 	bl	34005048 <LL_RCC_LSE_IsReady>
34008938:	3800      	subs	r0, #0
3400893a:	bf18      	it	ne
3400893c:	2001      	movne	r0, #1
3400893e:	03c0      	lsls	r0, r0, #15
34008940:	e78a      	b.n	34008858 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008942:	4b33      	ldr	r3, [pc, #204]	@ (34008a10 <RCCEx_GetUSARTCLKFreq+0x1f4>)
34008944:	4298      	cmp	r0, r3
34008946:	d020      	beq.n	3400898a <RCCEx_GetUSARTCLKFreq+0x16e>
34008948:	d813      	bhi.n	34008972 <RCCEx_GetUSARTCLKFreq+0x156>
3400894a:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
3400894e:	4298      	cmp	r0, r3
34008950:	d008      	beq.n	34008964 <RCCEx_GetUSARTCLKFreq+0x148>
34008952:	bf8e      	itee	hi
34008954:	4b2f      	ldrhi	r3, [pc, #188]	@ (34008a14 <RCCEx_GetUSARTCLKFreq+0x1f8>)
34008956:	f020 0004 	bicls.w	r0, r0, #4
3400895a:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
3400895e:	4298      	cmp	r0, r3
34008960:	f47f af79 	bne.w	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
34008964:	f7fc fb68 	bl	34005038 <LL_RCC_MSI_IsReady>
34008968:	2800      	cmp	r0, #0
3400896a:	f43f af74 	beq.w	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
3400896e:	482a      	ldr	r0, [pc, #168]	@ (34008a18 <RCCEx_GetUSARTCLKFreq+0x1fc>)
  return usart_frequency;
34008970:	e772      	b.n	34008858 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34008972:	4b2a      	ldr	r3, [pc, #168]	@ (34008a1c <RCCEx_GetUSARTCLKFreq+0x200>)
34008974:	4298      	cmp	r0, r3
34008976:	d008      	beq.n	3400898a <RCCEx_GetUSARTCLKFreq+0x16e>
34008978:	bf8e      	itee	hi
3400897a:	4b29      	ldrhi	r3, [pc, #164]	@ (34008a20 <RCCEx_GetUSARTCLKFreq+0x204>)
3400897c:	f020 0004 	bicls.w	r0, r0, #4
34008980:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34008984:	4298      	cmp	r0, r3
34008986:	f47f af66 	bne.w	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
3400898a:	f7fc fb4d 	bl	34005028 <LL_RCC_HSI_IsReady>
3400898e:	2800      	cmp	r0, #0
34008990:	f43f af61 	beq.w	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008994:	4b19      	ldr	r3, [pc, #100]	@ (340089fc <RCCEx_GetUSARTCLKFreq+0x1e0>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008996:	4823      	ldr	r0, [pc, #140]	@ (34008a24 <RCCEx_GetUSARTCLKFreq+0x208>)
34008998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400899a:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400899e:	e007      	b.n	340089b0 <RCCEx_GetUSARTCLKFreq+0x194>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340089a0:	f7fc fac6 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
340089a4:	f7fc fbd2 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
340089a8:	4b14      	ldr	r3, [pc, #80]	@ (340089fc <RCCEx_GetUSARTCLKFreq+0x1e0>)
340089aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
340089ac:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340089b0:	40d8      	lsrs	r0, r3
340089b2:	e751      	b.n	34008858 <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340089b4:	f7fc fabc 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
340089b8:	f7fc fbc8 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340089bc:	4b0f      	ldr	r3, [pc, #60]	@ (340089fc <RCCEx_GetUSARTCLKFreq+0x1e0>)
340089be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340089c0:	f003 0307 	and.w	r3, r3, #7
340089c4:	e7f4      	b.n	340089b0 <RCCEx_GetUSARTCLKFreq+0x194>
340089c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340089ca:	f47f af44 	bne.w	34008856 <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340089ce:	f7ff fce3 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
340089d2:	e001      	b.n	340089d8 <RCCEx_GetUSARTCLKFreq+0x1bc>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340089d4:	f7ff fc20 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
340089d8:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340089dc:	e73c      	b.n	34008858 <RCCEx_GetUSARTCLKFreq+0x3c>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340089de:	f7ff fc9b 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
340089e2:	e7f9      	b.n	340089d8 <RCCEx_GetUSARTCLKFreq+0x1bc>
340089e4:	07021430 	.word	0x07021430
340089e8:	07000830 	.word	0x07000830
340089ec:	07011430 	.word	0x07011430
340089f0:	07010830 	.word	0x07010830
340089f4:	07020434 	.word	0x07020434
340089f8:	07020830 	.word	0x07020830
340089fc:	56028000 	.word	0x56028000
34008a00:	07050030 	.word	0x07050030
34008a04:	07030830 	.word	0x07030830
34008a08:	07040830 	.word	0x07040830
34008a0c:	07041430 	.word	0x07041430
34008a10:	07060030 	.word	0x07060030
34008a14:	07051430 	.word	0x07051430
34008a18:	003d0900 	.word	0x003d0900
34008a1c:	07060830 	.word	0x07060830
34008a20:	07061430 	.word	0x07061430
34008a24:	03d09000 	.word	0x03d09000

34008a28 <RCCEx_GetUARTCLKFreq>:
{
34008a28:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008a2a:	f7fc fb27 	bl	3400507c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008a2e:	4b79      	ldr	r3, [pc, #484]	@ (34008c14 <RCCEx_GetUARTCLKFreq+0x1ec>)
34008a30:	4298      	cmp	r0, r3
34008a32:	d03e      	beq.n	34008ab2 <RCCEx_GetUARTCLKFreq+0x8a>
34008a34:	d85a      	bhi.n	34008aec <RCCEx_GetUARTCLKFreq+0xc4>
34008a36:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008a3a:	4298      	cmp	r0, r3
34008a3c:	f000 80c7 	beq.w	34008bce <RCCEx_GetUARTCLKFreq+0x1a6>
34008a40:	d814      	bhi.n	34008a6c <RCCEx_GetUARTCLKFreq+0x44>
34008a42:	4b75      	ldr	r3, [pc, #468]	@ (34008c18 <RCCEx_GetUARTCLKFreq+0x1f0>)
34008a44:	4298      	cmp	r0, r3
34008a46:	f000 80cc 	beq.w	34008be2 <RCCEx_GetUARTCLKFreq+0x1ba>
34008a4a:	3b01      	subs	r3, #1
34008a4c:	4298      	cmp	r0, r3
34008a4e:	d90b      	bls.n	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
34008a50:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
34008a54:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
34008a58:	429a      	cmp	r2, r3
34008a5a:	f000 80b8 	beq.w	34008bce <RCCEx_GetUARTCLKFreq+0x1a6>
34008a5e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008a62:	4298      	cmp	r0, r3
34008a64:	f000 80b3 	beq.w	34008bce <RCCEx_GetUARTCLKFreq+0x1a6>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34008a68:	2000      	movs	r0, #0
}
34008a6a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008a6c:	4b6b      	ldr	r3, [pc, #428]	@ (34008c1c <RCCEx_GetUARTCLKFreq+0x1f4>)
34008a6e:	4298      	cmp	r0, r3
34008a70:	d00d      	beq.n	34008a8e <RCCEx_GetUARTCLKFreq+0x66>
34008a72:	d812      	bhi.n	34008a9a <RCCEx_GetUARTCLKFreq+0x72>
34008a74:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008a78:	4298      	cmp	r0, r3
34008a7a:	d008      	beq.n	34008a8e <RCCEx_GetUARTCLKFreq+0x66>
34008a7c:	d80b      	bhi.n	34008a96 <RCCEx_GetUARTCLKFreq+0x6e>
34008a7e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008a82:	4298      	cmp	r0, r3
34008a84:	d003      	beq.n	34008a8e <RCCEx_GetUARTCLKFreq+0x66>
34008a86:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008a8a:	4298      	cmp	r0, r3
34008a8c:	d1ec      	bne.n	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
}
34008a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008a92:	f7ff bcc1 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008a96:	4b62      	ldr	r3, [pc, #392]	@ (34008c20 <RCCEx_GetUARTCLKFreq+0x1f8>)
34008a98:	e7f7      	b.n	34008a8a <RCCEx_GetUARTCLKFreq+0x62>
34008a9a:	4b62      	ldr	r3, [pc, #392]	@ (34008c24 <RCCEx_GetUARTCLKFreq+0x1fc>)
34008a9c:	4298      	cmp	r0, r3
34008a9e:	d008      	beq.n	34008ab2 <RCCEx_GetUARTCLKFreq+0x8a>
34008aa0:	d822      	bhi.n	34008ae8 <RCCEx_GetUARTCLKFreq+0xc0>
34008aa2:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008aa6:	4298      	cmp	r0, r3
34008aa8:	d003      	beq.n	34008ab2 <RCCEx_GetUARTCLKFreq+0x8a>
34008aaa:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008aae:	4298      	cmp	r0, r3
34008ab0:	d1da      	bne.n	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008ab2:	f7fc fb15 	bl	340050e0 <LL_RCC_IC9_IsEnabled>
34008ab6:	2800      	cmp	r0, #0
34008ab8:	d0d6      	beq.n	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
34008aba:	f7fc fb19 	bl	340050f0 <LL_RCC_IC9_GetDivider>
34008abe:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008ac0:	4b59      	ldr	r3, [pc, #356]	@ (34008c28 <RCCEx_GetUARTCLKFreq+0x200>)
34008ac2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008ac6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34008aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008ace:	f000 809d 	beq.w	34008c0c <RCCEx_GetUARTCLKFreq+0x1e4>
34008ad2:	f200 808f 	bhi.w	34008bf4 <RCCEx_GetUARTCLKFreq+0x1cc>
34008ad6:	2b00      	cmp	r3, #0
34008ad8:	f000 8093 	beq.w	34008c02 <RCCEx_GetUARTCLKFreq+0x1da>
34008adc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008ae0:	d1c2      	bne.n	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008ae2:	f7ff fbd9 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
34008ae6:	e08e      	b.n	34008c06 <RCCEx_GetUARTCLKFreq+0x1de>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008ae8:	4b50      	ldr	r3, [pc, #320]	@ (34008c2c <RCCEx_GetUARTCLKFreq+0x204>)
34008aea:	e7e0      	b.n	34008aae <RCCEx_GetUARTCLKFreq+0x86>
34008aec:	4b50      	ldr	r3, [pc, #320]	@ (34008c30 <RCCEx_GetUARTCLKFreq+0x208>)
34008aee:	4298      	cmp	r0, r3
34008af0:	d04a      	beq.n	34008b88 <RCCEx_GetUARTCLKFreq+0x160>
34008af2:	d836      	bhi.n	34008b62 <RCCEx_GetUARTCLKFreq+0x13a>
34008af4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008af8:	4298      	cmp	r0, r3
34008afa:	d029      	beq.n	34008b50 <RCCEx_GetUARTCLKFreq+0x128>
34008afc:	d81c      	bhi.n	34008b38 <RCCEx_GetUARTCLKFreq+0x110>
34008afe:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008b02:	3b04      	subs	r3, #4
34008b04:	4298      	cmp	r0, r3
34008b06:	d008      	beq.n	34008b1a <RCCEx_GetUARTCLKFreq+0xf2>
34008b08:	d812      	bhi.n	34008b30 <RCCEx_GetUARTCLKFreq+0x108>
34008b0a:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34008b0e:	4298      	cmp	r0, r3
34008b10:	d003      	beq.n	34008b1a <RCCEx_GetUARTCLKFreq+0xf2>
34008b12:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34008b16:	4298      	cmp	r0, r3
34008b18:	d1a6      	bne.n	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008b1a:	f7fc faf3 	bl	34005104 <LL_RCC_IC14_IsEnabled>
34008b1e:	2800      	cmp	r0, #0
34008b20:	d0a2      	beq.n	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
34008b22:	f7fc faf7 	bl	34005114 <LL_RCC_IC14_GetDivider>
34008b26:	4b40      	ldr	r3, [pc, #256]	@ (34008c28 <RCCEx_GetUARTCLKFreq+0x200>)
34008b28:	4604      	mov	r4, r0
34008b2a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008b2e:	e7ca      	b.n	34008ac6 <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008b30:	4b40      	ldr	r3, [pc, #256]	@ (34008c34 <RCCEx_GetUARTCLKFreq+0x20c>)
34008b32:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008b36:	e7ee      	b.n	34008b16 <RCCEx_GetUARTCLKFreq+0xee>
34008b38:	4b3f      	ldr	r3, [pc, #252]	@ (34008c38 <RCCEx_GetUARTCLKFreq+0x210>)
34008b3a:	4298      	cmp	r0, r3
34008b3c:	d008      	beq.n	34008b50 <RCCEx_GetUARTCLKFreq+0x128>
34008b3e:	d80e      	bhi.n	34008b5e <RCCEx_GetUARTCLKFreq+0x136>
34008b40:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008b44:	4298      	cmp	r0, r3
34008b46:	d003      	beq.n	34008b50 <RCCEx_GetUARTCLKFreq+0x128>
34008b48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008b4c:	4298      	cmp	r0, r3
34008b4e:	d18b      	bne.n	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
34008b50:	f7fc fa7a 	bl	34005048 <LL_RCC_LSE_IsReady>
34008b54:	3800      	subs	r0, #0
34008b56:	bf18      	it	ne
34008b58:	2001      	movne	r0, #1
34008b5a:	03c0      	lsls	r0, r0, #15
34008b5c:	e785      	b.n	34008a6a <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008b5e:	4b37      	ldr	r3, [pc, #220]	@ (34008c3c <RCCEx_GetUARTCLKFreq+0x214>)
34008b60:	e7f4      	b.n	34008b4c <RCCEx_GetUARTCLKFreq+0x124>
34008b62:	4b37      	ldr	r3, [pc, #220]	@ (34008c40 <RCCEx_GetUARTCLKFreq+0x218>)
34008b64:	4298      	cmp	r0, r3
34008b66:	d025      	beq.n	34008bb4 <RCCEx_GetUARTCLKFreq+0x18c>
34008b68:	d817      	bhi.n	34008b9a <RCCEx_GetUARTCLKFreq+0x172>
34008b6a:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
34008b6e:	3b04      	subs	r3, #4
34008b70:	4298      	cmp	r0, r3
34008b72:	d009      	beq.n	34008b88 <RCCEx_GetUARTCLKFreq+0x160>
34008b74:	d80f      	bhi.n	34008b96 <RCCEx_GetUARTCLKFreq+0x16e>
34008b76:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008b7a:	4298      	cmp	r0, r3
34008b7c:	d004      	beq.n	34008b88 <RCCEx_GetUARTCLKFreq+0x160>
34008b7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008b82:	4298      	cmp	r0, r3
34008b84:	f47f af70 	bne.w	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
34008b88:	f7fc fa56 	bl	34005038 <LL_RCC_MSI_IsReady>
34008b8c:	2800      	cmp	r0, #0
34008b8e:	f43f af6b 	beq.w	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
34008b92:	482c      	ldr	r0, [pc, #176]	@ (34008c44 <RCCEx_GetUARTCLKFreq+0x21c>)
  return uart_frequency;
34008b94:	e769      	b.n	34008a6a <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008b96:	4b2c      	ldr	r3, [pc, #176]	@ (34008c48 <RCCEx_GetUARTCLKFreq+0x220>)
34008b98:	e7f3      	b.n	34008b82 <RCCEx_GetUARTCLKFreq+0x15a>
34008b9a:	4b2c      	ldr	r3, [pc, #176]	@ (34008c4c <RCCEx_GetUARTCLKFreq+0x224>)
34008b9c:	4298      	cmp	r0, r3
34008b9e:	d009      	beq.n	34008bb4 <RCCEx_GetUARTCLKFreq+0x18c>
34008ba0:	d813      	bhi.n	34008bca <RCCEx_GetUARTCLKFreq+0x1a2>
34008ba2:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008ba6:	4298      	cmp	r0, r3
34008ba8:	d004      	beq.n	34008bb4 <RCCEx_GetUARTCLKFreq+0x18c>
34008baa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008bae:	4298      	cmp	r0, r3
34008bb0:	f47f af5a 	bne.w	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
34008bb4:	f7fc fa38 	bl	34005028 <LL_RCC_HSI_IsReady>
34008bb8:	2800      	cmp	r0, #0
34008bba:	f43f af55 	beq.w	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008bbe:	4b1a      	ldr	r3, [pc, #104]	@ (34008c28 <RCCEx_GetUARTCLKFreq+0x200>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008bc0:	4823      	ldr	r0, [pc, #140]	@ (34008c50 <RCCEx_GetUARTCLKFreq+0x228>)
34008bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008bc4:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008bc8:	e009      	b.n	34008bde <RCCEx_GetUARTCLKFreq+0x1b6>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34008bca:	4b22      	ldr	r3, [pc, #136]	@ (34008c54 <RCCEx_GetUARTCLKFreq+0x22c>)
34008bcc:	e7ef      	b.n	34008bae <RCCEx_GetUARTCLKFreq+0x186>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008bce:	f7fc f9af 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34008bd2:	f7fc fabb 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008bd6:	4b14      	ldr	r3, [pc, #80]	@ (34008c28 <RCCEx_GetUARTCLKFreq+0x200>)
34008bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008bda:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008bde:	40d8      	lsrs	r0, r3
34008be0:	e743      	b.n	34008a6a <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008be2:	f7fc f9a5 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34008be6:	f7fc fab1 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008bea:	4b0f      	ldr	r3, [pc, #60]	@ (34008c28 <RCCEx_GetUARTCLKFreq+0x200>)
34008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008bee:	f3c3 1302 	ubfx	r3, r3, #4, #3
34008bf2:	e7f4      	b.n	34008bde <RCCEx_GetUARTCLKFreq+0x1b6>
34008bf4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008bf8:	f47f af36 	bne.w	34008a68 <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008bfc:	f7ff fbcc 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
34008c00:	e001      	b.n	34008c06 <RCCEx_GetUARTCLKFreq+0x1de>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008c02:	f7ff fb09 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
34008c06:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008c0a:	e72e      	b.n	34008a6a <RCCEx_GetUARTCLKFreq+0x42>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008c0c:	f7ff fb84 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
34008c10:	e7f9      	b.n	34008c06 <RCCEx_GetUARTCLKFreq+0x1de>
34008c12:	bf00      	nop
34008c14:	07021c30 	.word	0x07021c30
34008c18:	07000034 	.word	0x07000034
34008c1c:	07011c30 	.word	0x07011c30
34008c20:	07011830 	.word	0x07011830
34008c24:	07021030 	.word	0x07021030
34008c28:	56028000 	.word	0x56028000
34008c2c:	07021830 	.word	0x07021830
34008c30:	07050034 	.word	0x07050034
34008c34:	07031830 	.word	0x07031830
34008c38:	07041830 	.word	0x07041830
34008c3c:	07041c30 	.word	0x07041c30
34008c40:	07060034 	.word	0x07060034
34008c44:	003d0900 	.word	0x003d0900
34008c48:	07051c30 	.word	0x07051c30
34008c4c:	07061830 	.word	0x07061830
34008c50:	03d09000 	.word	0x03d09000
34008c54:	07061c30 	.word	0x07061c30

34008c58 <RCCEx_GetSPICLKFreq>:
{
34008c58:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008c5a:	f7fc fa0f 	bl	3400507c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008c5e:	4b8b      	ldr	r3, [pc, #556]	@ (34008e8c <RCCEx_GetSPICLKFreq+0x234>)
34008c60:	4298      	cmp	r0, r3
34008c62:	d055      	beq.n	34008d10 <RCCEx_GetSPICLKFreq+0xb8>
34008c64:	d865      	bhi.n	34008d32 <RCCEx_GetSPICLKFreq+0xda>
34008c66:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
34008c6a:	4298      	cmp	r0, r3
34008c6c:	f000 80ca 	beq.w	34008e04 <RCCEx_GetSPICLKFreq+0x1ac>
34008c70:	d81e      	bhi.n	34008cb0 <RCCEx_GetSPICLKFreq+0x58>
34008c72:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008c76:	4298      	cmp	r0, r3
34008c78:	f000 80ba 	beq.w	34008df0 <RCCEx_GetSPICLKFreq+0x198>
34008c7c:	d80a      	bhi.n	34008c94 <RCCEx_GetSPICLKFreq+0x3c>
34008c7e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008c82:	4298      	cmp	r0, r3
34008c84:	d00b      	beq.n	34008c9e <RCCEx_GetSPICLKFreq+0x46>
34008c86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008c8a:	4298      	cmp	r0, r3
34008c8c:	f000 80b0 	beq.w	34008df0 <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34008c90:	2000      	movs	r0, #0
}
34008c92:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008c94:	4b7e      	ldr	r3, [pc, #504]	@ (34008e90 <RCCEx_GetSPICLKFreq+0x238>)
34008c96:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008c9a:	4298      	cmp	r0, r3
34008c9c:	d1f8      	bne.n	34008c90 <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008c9e:	f7fc f947 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34008ca2:	f7fc fa53 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008ca6:	4b7b      	ldr	r3, [pc, #492]	@ (34008e94 <RCCEx_GetSPICLKFreq+0x23c>)
34008ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008caa:	f3c3 1302 	ubfx	r3, r3, #4, #3
34008cae:	e0a7      	b.n	34008e00 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008cb0:	4b79      	ldr	r3, [pc, #484]	@ (34008e98 <RCCEx_GetSPICLKFreq+0x240>)
34008cb2:	4298      	cmp	r0, r3
34008cb4:	f000 80af 	beq.w	34008e16 <RCCEx_GetSPICLKFreq+0x1be>
34008cb8:	d81d      	bhi.n	34008cf6 <RCCEx_GetSPICLKFreq+0x9e>
34008cba:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34008cbe:	4298      	cmp	r0, r3
34008cc0:	d00a      	beq.n	34008cd8 <RCCEx_GetSPICLKFreq+0x80>
34008cc2:	d80d      	bhi.n	34008ce0 <RCCEx_GetSPICLKFreq+0x88>
34008cc4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008cc8:	4298      	cmp	r0, r3
34008cca:	d005      	beq.n	34008cd8 <RCCEx_GetSPICLKFreq+0x80>
34008ccc:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34008cd0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008cd4:	4298      	cmp	r0, r3
34008cd6:	d1db      	bne.n	34008c90 <RCCEx_GetSPICLKFreq+0x38>
}
34008cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008cdc:	f7ff bb9c 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008ce0:	4b6e      	ldr	r3, [pc, #440]	@ (34008e9c <RCCEx_GetSPICLKFreq+0x244>)
34008ce2:	4298      	cmp	r0, r3
34008ce4:	d0f8      	beq.n	34008cd8 <RCCEx_GetSPICLKFreq+0x80>
34008ce6:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34008cea:	4298      	cmp	r0, r3
34008cec:	f000 8093 	beq.w	34008e16 <RCCEx_GetSPICLKFreq+0x1be>
34008cf0:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008cf4:	e7ee      	b.n	34008cd4 <RCCEx_GetSPICLKFreq+0x7c>
34008cf6:	4b6a      	ldr	r3, [pc, #424]	@ (34008ea0 <RCCEx_GetSPICLKFreq+0x248>)
34008cf8:	4298      	cmp	r0, r3
34008cfa:	d009      	beq.n	34008d10 <RCCEx_GetSPICLKFreq+0xb8>
34008cfc:	d813      	bhi.n	34008d26 <RCCEx_GetSPICLKFreq+0xce>
34008cfe:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008d02:	4298      	cmp	r0, r3
34008d04:	f000 8087 	beq.w	34008e16 <RCCEx_GetSPICLKFreq+0x1be>
34008d08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008d0c:	4298      	cmp	r0, r3
34008d0e:	d1bf      	bne.n	34008c90 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008d10:	f7fc f9e6 	bl	340050e0 <LL_RCC_IC9_IsEnabled>
34008d14:	2800      	cmp	r0, #0
34008d16:	d0bb      	beq.n	34008c90 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
34008d18:	f7fc f9ea 	bl	340050f0 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008d1c:	4b5d      	ldr	r3, [pc, #372]	@ (34008e94 <RCCEx_GetSPICLKFreq+0x23c>)
34008d1e:	4604      	mov	r4, r0
34008d20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34008d24:	e082      	b.n	34008e2c <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008d26:	4b5f      	ldr	r3, [pc, #380]	@ (34008ea4 <RCCEx_GetSPICLKFreq+0x24c>)
34008d28:	4298      	cmp	r0, r3
34008d2a:	d074      	beq.n	34008e16 <RCCEx_GetSPICLKFreq+0x1be>
34008d2c:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34008d30:	e7ec      	b.n	34008d0c <RCCEx_GetSPICLKFreq+0xb4>
34008d32:	4b5d      	ldr	r3, [pc, #372]	@ (34008ea8 <RCCEx_GetSPICLKFreq+0x250>)
34008d34:	4298      	cmp	r0, r3
34008d36:	d043      	beq.n	34008dc0 <RCCEx_GetSPICLKFreq+0x168>
34008d38:	d830      	bhi.n	34008d9c <RCCEx_GetSPICLKFreq+0x144>
34008d3a:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
34008d3e:	4298      	cmp	r0, r3
34008d40:	d0e6      	beq.n	34008d10 <RCCEx_GetSPICLKFreq+0xb8>
34008d42:	d808      	bhi.n	34008d56 <RCCEx_GetSPICLKFreq+0xfe>
34008d44:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34008d48:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008d4c:	429a      	cmp	r2, r3
34008d4e:	d07b      	beq.n	34008e48 <RCCEx_GetSPICLKFreq+0x1f0>
34008d50:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34008d54:	e7da      	b.n	34008d0c <RCCEx_GetSPICLKFreq+0xb4>
34008d56:	4b55      	ldr	r3, [pc, #340]	@ (34008eac <RCCEx_GetSPICLKFreq+0x254>)
34008d58:	4298      	cmp	r0, r3
34008d5a:	d00d      	beq.n	34008d78 <RCCEx_GetSPICLKFreq+0x120>
34008d5c:	d814      	bhi.n	34008d88 <RCCEx_GetSPICLKFreq+0x130>
34008d5e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008d62:	4298      	cmp	r0, r3
34008d64:	d008      	beq.n	34008d78 <RCCEx_GetSPICLKFreq+0x120>
34008d66:	d80d      	bhi.n	34008d84 <RCCEx_GetSPICLKFreq+0x12c>
34008d68:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008d6c:	4298      	cmp	r0, r3
34008d6e:	d003      	beq.n	34008d78 <RCCEx_GetSPICLKFreq+0x120>
34008d70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008d74:	4298      	cmp	r0, r3
34008d76:	d18b      	bne.n	34008c90 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
34008d78:	f7fc f95e 	bl	34005038 <LL_RCC_MSI_IsReady>
34008d7c:	2800      	cmp	r0, #0
34008d7e:	d087      	beq.n	34008c90 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
34008d80:	484b      	ldr	r0, [pc, #300]	@ (34008eb0 <RCCEx_GetSPICLKFreq+0x258>)
  return spi_frequency;
34008d82:	e786      	b.n	34008c92 <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008d84:	4b4b      	ldr	r3, [pc, #300]	@ (34008eb4 <RCCEx_GetSPICLKFreq+0x25c>)
34008d86:	e7f5      	b.n	34008d74 <RCCEx_GetSPICLKFreq+0x11c>
34008d88:	4b4b      	ldr	r3, [pc, #300]	@ (34008eb8 <RCCEx_GetSPICLKFreq+0x260>)
34008d8a:	4298      	cmp	r0, r3
34008d8c:	d018      	beq.n	34008dc0 <RCCEx_GetSPICLKFreq+0x168>
34008d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008d92:	4298      	cmp	r0, r3
34008d94:	d014      	beq.n	34008dc0 <RCCEx_GetSPICLKFreq+0x168>
34008d96:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34008d9a:	e7eb      	b.n	34008d74 <RCCEx_GetSPICLKFreq+0x11c>
34008d9c:	4b47      	ldr	r3, [pc, #284]	@ (34008ebc <RCCEx_GetSPICLKFreq+0x264>)
34008d9e:	4298      	cmp	r0, r3
34008da0:	d06d      	beq.n	34008e7e <RCCEx_GetSPICLKFreq+0x226>
34008da2:	d81e      	bhi.n	34008de2 <RCCEx_GetSPICLKFreq+0x18a>
34008da4:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34008da8:	4298      	cmp	r0, r3
34008daa:	d018      	beq.n	34008dde <RCCEx_GetSPICLKFreq+0x186>
34008dac:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34008db0:	d811      	bhi.n	34008dd6 <RCCEx_GetSPICLKFreq+0x17e>
34008db2:	4a43      	ldr	r2, [pc, #268]	@ (34008ec0 <RCCEx_GetSPICLKFreq+0x268>)
34008db4:	4293      	cmp	r3, r2
34008db6:	d003      	beq.n	34008dc0 <RCCEx_GetSPICLKFreq+0x168>
34008db8:	4b42      	ldr	r3, [pc, #264]	@ (34008ec4 <RCCEx_GetSPICLKFreq+0x26c>)
34008dba:	4298      	cmp	r0, r3
34008dbc:	f47f af68 	bne.w	34008c90 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
34008dc0:	f7fc f932 	bl	34005028 <LL_RCC_HSI_IsReady>
34008dc4:	2800      	cmp	r0, #0
34008dc6:	f43f af63 	beq.w	34008c90 <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008dca:	4b32      	ldr	r3, [pc, #200]	@ (34008e94 <RCCEx_GetSPICLKFreq+0x23c>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008dcc:	483e      	ldr	r0, [pc, #248]	@ (34008ec8 <RCCEx_GetSPICLKFreq+0x270>)
34008dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008dd0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008dd4:	e014      	b.n	34008e00 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008dd6:	4a3d      	ldr	r2, [pc, #244]	@ (34008ecc <RCCEx_GetSPICLKFreq+0x274>)
34008dd8:	4293      	cmp	r3, r2
34008dda:	f47f af59 	bne.w	34008c90 <RCCEx_GetSPICLKFreq+0x38>
34008dde:	483c      	ldr	r0, [pc, #240]	@ (34008ed0 <RCCEx_GetSPICLKFreq+0x278>)
34008de0:	e757      	b.n	34008c92 <RCCEx_GetSPICLKFreq+0x3a>
34008de2:	4b3c      	ldr	r3, [pc, #240]	@ (34008ed4 <RCCEx_GetSPICLKFreq+0x27c>)
34008de4:	4298      	cmp	r0, r3
34008de6:	d04a      	beq.n	34008e7e <RCCEx_GetSPICLKFreq+0x226>
34008de8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008dec:	4298      	cmp	r0, r3
34008dee:	e7f4      	b.n	34008dda <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008df0:	f7fc f89e 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34008df4:	f7fc f9aa 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008df8:	4b26      	ldr	r3, [pc, #152]	@ (34008e94 <RCCEx_GetSPICLKFreq+0x23c>)
34008dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008dfc:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008e00:	40d8      	lsrs	r0, r3
      break;
34008e02:	e746      	b.n	34008c92 <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008e04:	f7fc f894 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34008e08:	f7fc f9a0 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34008e0c:	4b21      	ldr	r3, [pc, #132]	@ (34008e94 <RCCEx_GetSPICLKFreq+0x23c>)
34008e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34008e10:	f3c3 3302 	ubfx	r3, r3, #12, #3
34008e14:	e7f4      	b.n	34008e00 <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008e16:	f7fc f951 	bl	340050bc <LL_RCC_IC8_IsEnabled>
34008e1a:	2800      	cmp	r0, #0
34008e1c:	f43f af38 	beq.w	34008c90 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
34008e20:	f7fc f954 	bl	340050cc <LL_RCC_IC8_GetDivider>
34008e24:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008e26:	4b1b      	ldr	r3, [pc, #108]	@ (34008e94 <RCCEx_GetSPICLKFreq+0x23c>)
34008e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008e2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34008e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008e34:	d020      	beq.n	34008e78 <RCCEx_GetSPICLKFreq+0x220>
34008e36:	d813      	bhi.n	34008e60 <RCCEx_GetSPICLKFreq+0x208>
34008e38:	b1cb      	cbz	r3, 34008e6e <RCCEx_GetSPICLKFreq+0x216>
34008e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008e3e:	f47f af27 	bne.w	34008c90 <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008e42:	f7ff fa29 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
34008e46:	e014      	b.n	34008e72 <RCCEx_GetSPICLKFreq+0x21a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008e48:	f7fc f95c 	bl	34005104 <LL_RCC_IC14_IsEnabled>
34008e4c:	2800      	cmp	r0, #0
34008e4e:	f43f af1f 	beq.w	34008c90 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
34008e52:	f7fc f95f 	bl	34005114 <LL_RCC_IC14_GetDivider>
34008e56:	4b0f      	ldr	r3, [pc, #60]	@ (34008e94 <RCCEx_GetSPICLKFreq+0x23c>)
34008e58:	4604      	mov	r4, r0
34008e5a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008e5e:	e7e5      	b.n	34008e2c <RCCEx_GetSPICLKFreq+0x1d4>
34008e60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008e64:	f47f af14 	bne.w	34008c90 <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008e68:	f7ff fa96 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
34008e6c:	e001      	b.n	34008e72 <RCCEx_GetSPICLKFreq+0x21a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008e6e:	f7ff f9d3 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
34008e72:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008e76:	e70c      	b.n	34008c92 <RCCEx_GetSPICLKFreq+0x3a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008e78:	f7ff fa4e 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
34008e7c:	e7f9      	b.n	34008e72 <RCCEx_GetSPICLKFreq+0x21a>
      if (LL_RCC_HSE_IsReady() != 0U)
34008e7e:	f7fc f8cb 	bl	34005018 <LL_RCC_HSE_IsReady>
34008e82:	2800      	cmp	r0, #0
34008e84:	f43f af04 	beq.w	34008c90 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
34008e88:	4813      	ldr	r0, [pc, #76]	@ (34008ed8 <RCCEx_GetSPICLKFreq+0x280>)
34008e8a:	e702      	b.n	34008c92 <RCCEx_GetSPICLKFreq+0x3a>
34008e8c:	07030820 	.word	0x07030820
34008e90:	07001020 	.word	0x07001020
34008e94:	56028000 	.word	0x56028000
34008e98:	07020820 	.word	0x07020820
34008e9c:	07011820 	.word	0x07011820
34008ea0:	07021420 	.word	0x07021420
34008ea4:	07021820 	.word	0x07021820
34008ea8:	07050c20 	.word	0x07050c20
34008eac:	07041420 	.word	0x07041420
34008eb0:	003d0900 	.word	0x003d0900
34008eb4:	07041020 	.word	0x07041020
34008eb8:	07050420 	.word	0x07050420
34008ebc:	07061020 	.word	0x07061020
34008ec0:	07051020 	.word	0x07051020
34008ec4:	07051820 	.word	0x07051820
34008ec8:	03d09000 	.word	0x03d09000
34008ecc:	07060820 	.word	0x07060820
34008ed0:	00bb8000 	.word	0x00bb8000
34008ed4:	07061420 	.word	0x07061420
34008ed8:	02dc6c00 	.word	0x02dc6c00

34008edc <RCCEx_GetSAICLKFreq>:
{
34008edc:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34008ede:	f7fc f8cd 	bl	3400507c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008ee2:	4b4b      	ldr	r3, [pc, #300]	@ (34009010 <RCCEx_GetSAICLKFreq+0x134>)
34008ee4:	4298      	cmp	r0, r3
34008ee6:	d050      	beq.n	34008f8a <RCCEx_GetSAICLKFreq+0xae>
34008ee8:	d83f      	bhi.n	34008f6a <RCCEx_GetSAICLKFreq+0x8e>
34008eea:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34008eee:	4298      	cmp	r0, r3
34008ef0:	d021      	beq.n	34008f36 <RCCEx_GetSAICLKFreq+0x5a>
34008ef2:	d815      	bhi.n	34008f20 <RCCEx_GetSAICLKFreq+0x44>
34008ef4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008ef8:	4298      	cmp	r0, r3
34008efa:	d00d      	beq.n	34008f18 <RCCEx_GetSAICLKFreq+0x3c>
34008efc:	d809      	bhi.n	34008f12 <RCCEx_GetSAICLKFreq+0x36>
34008efe:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008f02:	4298      	cmp	r0, r3
34008f04:	d054      	beq.n	34008fb0 <RCCEx_GetSAICLKFreq+0xd4>
34008f06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008f0a:	4298      	cmp	r0, r3
34008f0c:	d050      	beq.n	34008fb0 <RCCEx_GetSAICLKFreq+0xd4>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34008f0e:	2000      	movs	r0, #0
}
34008f10:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008f12:	4b40      	ldr	r3, [pc, #256]	@ (34009014 <RCCEx_GetSAICLKFreq+0x138>)
34008f14:	4298      	cmp	r0, r3
34008f16:	d1fa      	bne.n	34008f0e <RCCEx_GetSAICLKFreq+0x32>
}
34008f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008f1c:	f7ff ba7c 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008f20:	4b3d      	ldr	r3, [pc, #244]	@ (34009018 <RCCEx_GetSAICLKFreq+0x13c>)
34008f22:	4298      	cmp	r0, r3
34008f24:	d04e      	beq.n	34008fc4 <RCCEx_GetSAICLKFreq+0xe8>
34008f26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008f2a:	4298      	cmp	r0, r3
34008f2c:	d04a      	beq.n	34008fc4 <RCCEx_GetSAICLKFreq+0xe8>
34008f2e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008f32:	4298      	cmp	r0, r3
34008f34:	d1eb      	bne.n	34008f0e <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34008f36:	f7fc f8af 	bl	34005098 <LL_RCC_IC7_IsEnabled>
34008f3a:	2800      	cmp	r0, #0
34008f3c:	d0e7      	beq.n	34008f0e <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
34008f3e:	f7fc f8b3 	bl	340050a8 <LL_RCC_IC7_GetDivider>
34008f42:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34008f44:	4b35      	ldr	r3, [pc, #212]	@ (3400901c <RCCEx_GetSAICLKFreq+0x140>)
34008f46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008f4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34008f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008f52:	d04b      	beq.n	34008fec <RCCEx_GetSAICLKFreq+0x110>
34008f54:	d841      	bhi.n	34008fda <RCCEx_GetSAICLKFreq+0xfe>
34008f56:	2b00      	cmp	r3, #0
34008f58:	d045      	beq.n	34008fe6 <RCCEx_GetSAICLKFreq+0x10a>
34008f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008f5e:	d1d6      	bne.n	34008f0e <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008f60:	f7ff f99a 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
34008f64:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008f68:	e7d2      	b.n	34008f10 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008f6a:	4b2d      	ldr	r3, [pc, #180]	@ (34009020 <RCCEx_GetSAICLKFreq+0x144>)
34008f6c:	4298      	cmp	r0, r3
34008f6e:	d01d      	beq.n	34008fac <RCCEx_GetSAICLKFreq+0xd0>
34008f70:	d811      	bhi.n	34008f96 <RCCEx_GetSAICLKFreq+0xba>
34008f72:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008f76:	4298      	cmp	r0, r3
34008f78:	d03b      	beq.n	34008ff2 <RCCEx_GetSAICLKFreq+0x116>
34008f7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008f7e:	4298      	cmp	r0, r3
34008f80:	d037      	beq.n	34008ff2 <RCCEx_GetSAICLKFreq+0x116>
34008f82:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008f86:	4298      	cmp	r0, r3
34008f88:	d1c1      	bne.n	34008f0e <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
34008f8a:	f7fc f855 	bl	34005038 <LL_RCC_MSI_IsReady>
34008f8e:	2800      	cmp	r0, #0
34008f90:	d0bd      	beq.n	34008f0e <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
34008f92:	4824      	ldr	r0, [pc, #144]	@ (34009024 <RCCEx_GetSAICLKFreq+0x148>)
  return sai_frequency;
34008f94:	e7bc      	b.n	34008f10 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008f96:	4b24      	ldr	r3, [pc, #144]	@ (34009028 <RCCEx_GetSAICLKFreq+0x14c>)
34008f98:	4298      	cmp	r0, r3
34008f9a:	d034      	beq.n	34009006 <RCCEx_GetSAICLKFreq+0x12a>
34008f9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008fa0:	4298      	cmp	r0, r3
34008fa2:	d030      	beq.n	34009006 <RCCEx_GetSAICLKFreq+0x12a>
34008fa4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34008fa8:	4298      	cmp	r0, r3
34008faa:	d1b0      	bne.n	34008f0e <RCCEx_GetSAICLKFreq+0x32>
34008fac:	481f      	ldr	r0, [pc, #124]	@ (3400902c <RCCEx_GetSAICLKFreq+0x150>)
34008fae:	e7af      	b.n	34008f10 <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008fb0:	f7fb ffbe 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34008fb4:	f7fc f8ca 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34008fb8:	4b18      	ldr	r3, [pc, #96]	@ (3400901c <RCCEx_GetSAICLKFreq+0x140>)
34008fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34008fbc:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008fc0:	40d8      	lsrs	r0, r3
34008fc2:	e7a5      	b.n	34008f10 <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008fc4:	f7fc f87a 	bl	340050bc <LL_RCC_IC8_IsEnabled>
34008fc8:	2800      	cmp	r0, #0
34008fca:	d0a0      	beq.n	34008f0e <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
34008fcc:	f7fc f87e 	bl	340050cc <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008fd0:	4b12      	ldr	r3, [pc, #72]	@ (3400901c <RCCEx_GetSAICLKFreq+0x140>)
34008fd2:	4604      	mov	r4, r0
34008fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34008fd8:	e7b7      	b.n	34008f4a <RCCEx_GetSAICLKFreq+0x6e>
34008fda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008fde:	d196      	bne.n	34008f0e <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008fe0:	f7ff f9da 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
34008fe4:	e7be      	b.n	34008f64 <RCCEx_GetSAICLKFreq+0x88>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008fe6:	f7ff f917 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
34008fea:	e7bb      	b.n	34008f64 <RCCEx_GetSAICLKFreq+0x88>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008fec:	f7ff f994 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
34008ff0:	e7b8      	b.n	34008f64 <RCCEx_GetSAICLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34008ff2:	f7fc f819 	bl	34005028 <LL_RCC_HSI_IsReady>
34008ff6:	2800      	cmp	r0, #0
34008ff8:	d089      	beq.n	34008f0e <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008ffa:	4b08      	ldr	r3, [pc, #32]	@ (3400901c <RCCEx_GetSAICLKFreq+0x140>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008ffc:	480c      	ldr	r0, [pc, #48]	@ (34009030 <RCCEx_GetSAICLKFreq+0x154>)
34008ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34009000:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009004:	e7dc      	b.n	34008fc0 <RCCEx_GetSAICLKFreq+0xe4>
}
34009006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3400900a:	f7ff ba8b 	b.w	34008524 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
3400900e:	bf00      	nop
34009010:	07041418 	.word	0x07041418
34009014:	07011818 	.word	0x07011818
34009018:	07031418 	.word	0x07031418
3400901c:	56028000 	.word	0x56028000
34009020:	07061418 	.word	0x07061418
34009024:	003d0900 	.word	0x003d0900
34009028:	07071418 	.word	0x07071418
3400902c:	00bb8000 	.word	0x00bb8000
34009030:	03d09000 	.word	0x03d09000

34009034 <RCCEx_GetI3CCLKFreq>:
{
34009034:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34009036:	f7fc f821 	bl	3400507c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3400903a:	4b3f      	ldr	r3, [pc, #252]	@ (34009138 <RCCEx_GetI3CCLKFreq+0x104>)
3400903c:	4298      	cmp	r0, r3
3400903e:	d061      	beq.n	34009104 <RCCEx_GetI3CCLKFreq+0xd0>
34009040:	d831      	bhi.n	340090a6 <RCCEx_GetI3CCLKFreq+0x72>
34009042:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
34009046:	4298      	cmp	r0, r3
34009048:	d058      	beq.n	340090fc <RCCEx_GetI3CCLKFreq+0xc8>
3400904a:	d80d      	bhi.n	34009068 <RCCEx_GetI3CCLKFreq+0x34>
3400904c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009050:	4298      	cmp	r0, r3
34009052:	d049      	beq.n	340090e8 <RCCEx_GetI3CCLKFreq+0xb4>
34009054:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34009058:	4298      	cmp	r0, r3
3400905a:	d04f      	beq.n	340090fc <RCCEx_GetI3CCLKFreq+0xc8>
3400905c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009060:	4298      	cmp	r0, r3
34009062:	d041      	beq.n	340090e8 <RCCEx_GetI3CCLKFreq+0xb4>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34009064:	2000      	movs	r0, #0
}
34009066:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34009068:	4b34      	ldr	r3, [pc, #208]	@ (3400913c <RCCEx_GetI3CCLKFreq+0x108>)
3400906a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400906e:	4298      	cmp	r0, r3
34009070:	d1f8      	bne.n	34009064 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34009072:	4b33      	ldr	r3, [pc, #204]	@ (34009140 <RCCEx_GetI3CCLKFreq+0x10c>)
34009074:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009078:	0592      	lsls	r2, r2, #22
3400907a:	d5f3      	bpl.n	34009064 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400907c:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34009080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009084:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009088:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3400908a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3400908e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009092:	d04d      	beq.n	34009130 <RCCEx_GetI3CCLKFreq+0xfc>
34009094:	d841      	bhi.n	3400911a <RCCEx_GetI3CCLKFreq+0xe6>
34009096:	2b00      	cmp	r3, #0
34009098:	d045      	beq.n	34009126 <RCCEx_GetI3CCLKFreq+0xf2>
3400909a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400909e:	d1e1      	bne.n	34009064 <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340090a0:	f7ff f8fa 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
340090a4:	e041      	b.n	3400912a <RCCEx_GetI3CCLKFreq+0xf6>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340090a6:	4b27      	ldr	r3, [pc, #156]	@ (34009144 <RCCEx_GetI3CCLKFreq+0x110>)
340090a8:	4298      	cmp	r0, r3
340090aa:	d008      	beq.n	340090be <RCCEx_GetI3CCLKFreq+0x8a>
340090ac:	d80d      	bhi.n	340090ca <RCCEx_GetI3CCLKFreq+0x96>
340090ae:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340090b2:	4298      	cmp	r0, r3
340090b4:	d026      	beq.n	34009104 <RCCEx_GetI3CCLKFreq+0xd0>
340090b6:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
340090ba:	4298      	cmp	r0, r3
340090bc:	d1d2      	bne.n	34009064 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
340090be:	f7fb ffbb 	bl	34005038 <LL_RCC_MSI_IsReady>
340090c2:	2800      	cmp	r0, #0
340090c4:	d0ce      	beq.n	34009064 <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
340090c6:	4820      	ldr	r0, [pc, #128]	@ (34009148 <RCCEx_GetI3CCLKFreq+0x114>)
  return i3c_frequency;
340090c8:	e7cd      	b.n	34009066 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340090ca:	4b20      	ldr	r3, [pc, #128]	@ (3400914c <RCCEx_GetI3CCLKFreq+0x118>)
340090cc:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340090d0:	4298      	cmp	r0, r3
340090d2:	d1c7      	bne.n	34009064 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
340090d4:	f7fb ffa8 	bl	34005028 <LL_RCC_HSI_IsReady>
340090d8:	2800      	cmp	r0, #0
340090da:	d0c3      	beq.n	34009064 <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340090dc:	4b18      	ldr	r3, [pc, #96]	@ (34009140 <RCCEx_GetI3CCLKFreq+0x10c>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340090de:	481c      	ldr	r0, [pc, #112]	@ (34009150 <RCCEx_GetI3CCLKFreq+0x11c>)
340090e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340090e2:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340090e6:	e007      	b.n	340090f8 <RCCEx_GetI3CCLKFreq+0xc4>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340090e8:	f7fb ff22 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
340090ec:	f7fc f82e 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340090f0:	4b13      	ldr	r3, [pc, #76]	@ (34009140 <RCCEx_GetI3CCLKFreq+0x10c>)
340090f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340090f4:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340090f8:	40d8      	lsrs	r0, r3
340090fa:	e7b4      	b.n	34009066 <RCCEx_GetI3CCLKFreq+0x32>
}
340090fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009100:	f7ff b98a 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34009104:	f7fc f810 	bl	34005128 <LL_RCC_IC15_IsEnabled>
34009108:	2800      	cmp	r0, #0
3400910a:	d0ab      	beq.n	34009064 <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
3400910c:	f7fc f814 	bl	34005138 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009110:	4b0b      	ldr	r3, [pc, #44]	@ (34009140 <RCCEx_GetI3CCLKFreq+0x10c>)
34009112:	4604      	mov	r4, r0
34009114:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34009118:	e7b7      	b.n	3400908a <RCCEx_GetI3CCLKFreq+0x56>
3400911a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400911e:	d1a1      	bne.n	34009064 <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009120:	f7ff f93a 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
34009124:	e001      	b.n	3400912a <RCCEx_GetI3CCLKFreq+0xf6>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009126:	f7ff f877 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
3400912a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400912e:	e79a      	b.n	34009066 <RCCEx_GetI3CCLKFreq+0x32>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009130:	f7ff f8f2 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
34009134:	e7f9      	b.n	3400912a <RCCEx_GetI3CCLKFreq+0xf6>
34009136:	bf00      	nop
34009138:	0703100c 	.word	0x0703100c
3400913c:	0702100c 	.word	0x0702100c
34009140:	56028000 	.word	0x56028000
34009144:	0704140c 	.word	0x0704140c
34009148:	003d0900 	.word	0x003d0900
3400914c:	0705100c 	.word	0x0705100c
34009150:	03d09000 	.word	0x03d09000

34009154 <RCCEx_GetSDMMCCLKFreq>:
{
34009154:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34009156:	f7fb ff91 	bl	3400507c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3400915a:	4b2e      	ldr	r3, [pc, #184]	@ (34009214 <RCCEx_GetSDMMCCLKFreq+0xc0>)
3400915c:	4298      	cmp	r0, r3
3400915e:	d01d      	beq.n	3400919c <RCCEx_GetSDMMCCLKFreq+0x48>
34009160:	d813      	bhi.n	3400918a <RCCEx_GetSDMMCCLKFreq+0x36>
34009162:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009166:	4298      	cmp	r0, r3
34009168:	d00b      	beq.n	34009182 <RCCEx_GetSDMMCCLKFreq+0x2e>
3400916a:	d807      	bhi.n	3400917c <RCCEx_GetSDMMCCLKFreq+0x28>
3400916c:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34009170:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34009174:	4298      	cmp	r0, r3
34009176:	d02b      	beq.n	340091d0 <RCCEx_GetSDMMCCLKFreq+0x7c>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34009178:	2000      	movs	r0, #0
}
3400917a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3400917c:	4b26      	ldr	r3, [pc, #152]	@ (34009218 <RCCEx_GetSDMMCCLKFreq+0xc4>)
3400917e:	4298      	cmp	r0, r3
34009180:	d1fa      	bne.n	34009178 <RCCEx_GetSDMMCCLKFreq+0x24>
}
34009182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009186:	f7ff b947 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3400918a:	4b24      	ldr	r3, [pc, #144]	@ (3400921c <RCCEx_GetSDMMCCLKFreq+0xc8>)
3400918c:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34009190:	429a      	cmp	r2, r3
34009192:	d023      	beq.n	340091dc <RCCEx_GetSDMMCCLKFreq+0x88>
34009194:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009198:	4298      	cmp	r0, r3
3400919a:	d1ed      	bne.n	34009178 <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3400919c:	4b20      	ldr	r3, [pc, #128]	@ (34009220 <RCCEx_GetSDMMCCLKFreq+0xcc>)
3400919e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
340091a2:	f010 0008 	ands.w	r0, r0, #8
340091a6:	d0e8      	beq.n	3400917a <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
340091a8:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
340091ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
340091b0:	f3c0 4007 	ubfx	r0, r0, #16, #8
340091b4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340091b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
340091ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340091be:	d026      	beq.n	3400920e <RCCEx_GetSDMMCCLKFreq+0xba>
340091c0:	d81a      	bhi.n	340091f8 <RCCEx_GetSDMMCCLKFreq+0xa4>
340091c2:	b1fb      	cbz	r3, 34009204 <RCCEx_GetSDMMCCLKFreq+0xb0>
340091c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340091c8:	d1d6      	bne.n	34009178 <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340091ca:	f7ff f865 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
340091ce:	e01b      	b.n	34009208 <RCCEx_GetSDMMCCLKFreq+0xb4>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340091d0:	f7fb feae 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
}
340091d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340091d8:	f7fb bfb8 	b.w	3400514c <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
340091dc:	4b10      	ldr	r3, [pc, #64]	@ (34009220 <RCCEx_GetSDMMCCLKFreq+0xcc>)
340091de:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
340091e2:	f010 0010 	ands.w	r0, r0, #16
340091e6:	d0c8      	beq.n	3400917a <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340091e8:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340091ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340091f0:	f3c0 4007 	ubfx	r0, r0, #16, #8
340091f4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340091f6:	e7de      	b.n	340091b6 <RCCEx_GetSDMMCCLKFreq+0x62>
340091f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340091fc:	d1bc      	bne.n	34009178 <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340091fe:	f7ff f8cb 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
34009202:	e001      	b.n	34009208 <RCCEx_GetSDMMCCLKFreq+0xb4>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009204:	f7ff f808 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34009208:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
3400920c:	e7b5      	b.n	3400917a <RCCEx_GetSDMMCCLKFreq+0x26>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400920e:	f7ff f883 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
34009212:	e7f9      	b.n	34009208 <RCCEx_GetSDMMCCLKFreq+0xb4>
34009214:	0302001c 	.word	0x0302001c
34009218:	0301041c 	.word	0x0301041c
3400921c:	0303001c 	.word	0x0303001c
34009220:	56028000 	.word	0x56028000

34009224 <RCCEx_GetI2CCLKFreq>:
{
34009224:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34009226:	f7fb ff29 	bl	3400507c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400922a:	4b51      	ldr	r3, [pc, #324]	@ (34009370 <RCCEx_GetI2CCLKFreq+0x14c>)
3400922c:	4298      	cmp	r0, r3
3400922e:	d056      	beq.n	340092de <RCCEx_GetI2CCLKFreq+0xba>
34009230:	d844      	bhi.n	340092bc <RCCEx_GetI2CCLKFreq+0x98>
34009232:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
34009236:	4298      	cmp	r0, r3
34009238:	d012      	beq.n	34009260 <RCCEx_GetI2CCLKFreq+0x3c>
3400923a:	d815      	bhi.n	34009268 <RCCEx_GetI2CCLKFreq+0x44>
3400923c:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009240:	4298      	cmp	r0, r3
34009242:	d07c      	beq.n	3400933e <RCCEx_GetI2CCLKFreq+0x11a>
34009244:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34009248:	d807      	bhi.n	3400925a <RCCEx_GetI2CCLKFreq+0x36>
3400924a:	4a4a      	ldr	r2, [pc, #296]	@ (34009374 <RCCEx_GetI2CCLKFreq+0x150>)
3400924c:	4293      	cmp	r3, r2
3400924e:	d076      	beq.n	3400933e <RCCEx_GetI2CCLKFreq+0x11a>
34009250:	4b49      	ldr	r3, [pc, #292]	@ (34009378 <RCCEx_GetI2CCLKFreq+0x154>)
34009252:	4298      	cmp	r0, r3
34009254:	d073      	beq.n	3400933e <RCCEx_GetI2CCLKFreq+0x11a>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
34009256:	2000      	movs	r0, #0
}
34009258:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400925a:	4a48      	ldr	r2, [pc, #288]	@ (3400937c <RCCEx_GetI2CCLKFreq+0x158>)
3400925c:	4293      	cmp	r3, r2
3400925e:	d1fa      	bne.n	34009256 <RCCEx_GetI2CCLKFreq+0x32>
}
34009260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009264:	f7ff b8d8 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009268:	4b45      	ldr	r3, [pc, #276]	@ (34009380 <RCCEx_GetI2CCLKFreq+0x15c>)
3400926a:	4298      	cmp	r0, r3
3400926c:	d008      	beq.n	34009280 <RCCEx_GetI2CCLKFreq+0x5c>
3400926e:	d821      	bhi.n	340092b4 <RCCEx_GetI2CCLKFreq+0x90>
34009270:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34009274:	4298      	cmp	r0, r3
34009276:	d0f3      	beq.n	34009260 <RCCEx_GetI2CCLKFreq+0x3c>
34009278:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
3400927c:	4298      	cmp	r0, r3
3400927e:	d1ea      	bne.n	34009256 <RCCEx_GetI2CCLKFreq+0x32>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34009280:	4b40      	ldr	r3, [pc, #256]	@ (34009384 <RCCEx_GetI2CCLKFreq+0x160>)
34009282:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009286:	0592      	lsls	r2, r2, #22
34009288:	d5e5      	bpl.n	34009256 <RCCEx_GetI2CCLKFreq+0x32>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400928a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3400928e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34009292:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009296:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009298:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3400929c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340092a0:	d063      	beq.n	3400936a <RCCEx_GetI2CCLKFreq+0x146>
340092a2:	d856      	bhi.n	34009352 <RCCEx_GetI2CCLKFreq+0x12e>
340092a4:	2b00      	cmp	r3, #0
340092a6:	d05b      	beq.n	34009360 <RCCEx_GetI2CCLKFreq+0x13c>
340092a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340092ac:	d1d3      	bne.n	34009256 <RCCEx_GetI2CCLKFreq+0x32>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340092ae:	f7fe fff3 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
340092b2:	e057      	b.n	34009364 <RCCEx_GetI2CCLKFreq+0x140>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340092b4:	4b34      	ldr	r3, [pc, #208]	@ (34009388 <RCCEx_GetI2CCLKFreq+0x164>)
340092b6:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340092ba:	e7df      	b.n	3400927c <RCCEx_GetI2CCLKFreq+0x58>
340092bc:	4b33      	ldr	r3, [pc, #204]	@ (3400938c <RCCEx_GetI2CCLKFreq+0x168>)
340092be:	4298      	cmp	r0, r3
340092c0:	d01d      	beq.n	340092fe <RCCEx_GetI2CCLKFreq+0xda>
340092c2:	d822      	bhi.n	3400930a <RCCEx_GetI2CCLKFreq+0xe6>
340092c4:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340092c8:	4298      	cmp	r0, r3
340092ca:	d008      	beq.n	340092de <RCCEx_GetI2CCLKFreq+0xba>
340092cc:	d812      	bhi.n	340092f4 <RCCEx_GetI2CCLKFreq+0xd0>
340092ce:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340092d2:	4298      	cmp	r0, r3
340092d4:	d003      	beq.n	340092de <RCCEx_GetI2CCLKFreq+0xba>
340092d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340092da:	4298      	cmp	r0, r3
340092dc:	d1bb      	bne.n	34009256 <RCCEx_GetI2CCLKFreq+0x32>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340092de:	f7fb ff23 	bl	34005128 <LL_RCC_IC15_IsEnabled>
340092e2:	2800      	cmp	r0, #0
340092e4:	d0b7      	beq.n	34009256 <RCCEx_GetI2CCLKFreq+0x32>
        ic_divider = LL_RCC_IC15_GetDivider();
340092e6:	f7fb ff27 	bl	34005138 <LL_RCC_IC15_GetDivider>
340092ea:	4b26      	ldr	r3, [pc, #152]	@ (34009384 <RCCEx_GetI2CCLKFreq+0x160>)
340092ec:	4604      	mov	r4, r0
340092ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340092f2:	e7d1      	b.n	34009298 <RCCEx_GetI2CCLKFreq+0x74>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340092f4:	4b26      	ldr	r3, [pc, #152]	@ (34009390 <RCCEx_GetI2CCLKFreq+0x16c>)
340092f6:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340092fa:	4298      	cmp	r0, r3
340092fc:	d1ab      	bne.n	34009256 <RCCEx_GetI2CCLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
340092fe:	f7fb fe9b 	bl	34005038 <LL_RCC_MSI_IsReady>
34009302:	2800      	cmp	r0, #0
34009304:	d0a7      	beq.n	34009256 <RCCEx_GetI2CCLKFreq+0x32>
        i2c_frequency = MSI_VALUE;
34009306:	4823      	ldr	r0, [pc, #140]	@ (34009394 <RCCEx_GetI2CCLKFreq+0x170>)
  return i2c_frequency;
34009308:	e7a6      	b.n	34009258 <RCCEx_GetI2CCLKFreq+0x34>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400930a:	4b23      	ldr	r3, [pc, #140]	@ (34009398 <RCCEx_GetI2CCLKFreq+0x174>)
3400930c:	4298      	cmp	r0, r3
3400930e:	d008      	beq.n	34009322 <RCCEx_GetI2CCLKFreq+0xfe>
34009310:	d811      	bhi.n	34009336 <RCCEx_GetI2CCLKFreq+0x112>
34009312:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34009316:	4298      	cmp	r0, r3
34009318:	d0f1      	beq.n	340092fe <RCCEx_GetI2CCLKFreq+0xda>
3400931a:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
3400931e:	4298      	cmp	r0, r3
34009320:	d199      	bne.n	34009256 <RCCEx_GetI2CCLKFreq+0x32>
      if (LL_RCC_HSI_IsReady() != 0U)
34009322:	f7fb fe81 	bl	34005028 <LL_RCC_HSI_IsReady>
34009326:	2800      	cmp	r0, #0
34009328:	d095      	beq.n	34009256 <RCCEx_GetI2CCLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400932a:	4b16      	ldr	r3, [pc, #88]	@ (34009384 <RCCEx_GetI2CCLKFreq+0x160>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400932c:	481b      	ldr	r0, [pc, #108]	@ (3400939c <RCCEx_GetI2CCLKFreq+0x178>)
3400932e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34009330:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009334:	e00b      	b.n	3400934e <RCCEx_GetI2CCLKFreq+0x12a>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34009336:	4b1a      	ldr	r3, [pc, #104]	@ (340093a0 <RCCEx_GetI2CCLKFreq+0x17c>)
34009338:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400933c:	e7ef      	b.n	3400931e <RCCEx_GetI2CCLKFreq+0xfa>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400933e:	f7fb fdf7 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34009342:	f7fb ff03 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009346:	4b0f      	ldr	r3, [pc, #60]	@ (34009384 <RCCEx_GetI2CCLKFreq+0x160>)
34009348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400934a:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400934e:	40d8      	lsrs	r0, r3
34009350:	e782      	b.n	34009258 <RCCEx_GetI2CCLKFreq+0x34>
34009352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009356:	f47f af7e 	bne.w	34009256 <RCCEx_GetI2CCLKFreq+0x32>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400935a:	f7ff f81d 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
3400935e:	e001      	b.n	34009364 <RCCEx_GetI2CCLKFreq+0x140>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009360:	f7fe ff5a 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
34009364:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009368:	e776      	b.n	34009258 <RCCEx_GetI2CCLKFreq+0x34>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400936a:	f7fe ffd5 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
3400936e:	e7f9      	b.n	34009364 <RCCEx_GetI2CCLKFreq+0x140>
34009370:	0703000c 	.word	0x0703000c
34009374:	0700000c 	.word	0x0700000c
34009378:	0700080c 	.word	0x0700080c
3400937c:	0701000c 	.word	0x0701000c
34009380:	0702040c 	.word	0x0702040c
34009384:	56028000 	.word	0x56028000
34009388:	0702080c 	.word	0x0702080c
3400938c:	0704080c 	.word	0x0704080c
34009390:	0704000c 	.word	0x0704000c
34009394:	003d0900 	.word	0x003d0900
34009398:	0705040c 	.word	0x0705040c
3400939c:	03d09000 	.word	0x03d09000
340093a0:	0705080c 	.word	0x0705080c

340093a4 <RCCEx_GetLPTIMCLKFreq>:
{
340093a4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340093a6:	f7fb fe69 	bl	3400507c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340093aa:	4b64      	ldr	r3, [pc, #400]	@ (3400953c <RCCEx_GetLPTIMCLKFreq+0x198>)
340093ac:	4298      	cmp	r0, r3
340093ae:	d03a      	beq.n	34009426 <RCCEx_GetLPTIMCLKFreq+0x82>
340093b0:	d851      	bhi.n	34009456 <RCCEx_GetLPTIMCLKFreq+0xb2>
340093b2:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
340093b6:	4298      	cmp	r0, r3
340093b8:	f000 80a8 	beq.w	3400950c <RCCEx_GetLPTIMCLKFreq+0x168>
340093bc:	d813      	bhi.n	340093e6 <RCCEx_GetLPTIMCLKFreq+0x42>
340093be:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
340093c2:	4298      	cmp	r0, r3
340093c4:	f000 8098 	beq.w	340094f8 <RCCEx_GetLPTIMCLKFreq+0x154>
340093c8:	3b01      	subs	r3, #1
340093ca:	4298      	cmp	r0, r3
340093cc:	d909      	bls.n	340093e2 <RCCEx_GetLPTIMCLKFreq+0x3e>
340093ce:	f203 4301 	addw	r3, r3, #1025	@ 0x401
340093d2:	4298      	cmp	r0, r3
340093d4:	f000 809a 	beq.w	3400950c <RCCEx_GetLPTIMCLKFreq+0x168>
340093d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340093dc:	4298      	cmp	r0, r3
340093de:	f000 8095 	beq.w	3400950c <RCCEx_GetLPTIMCLKFreq+0x168>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
340093e2:	2000      	movs	r0, #0
}
340093e4:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340093e6:	4b56      	ldr	r3, [pc, #344]	@ (34009540 <RCCEx_GetLPTIMCLKFreq+0x19c>)
340093e8:	4298      	cmp	r0, r3
340093ea:	d015      	beq.n	34009418 <RCCEx_GetLPTIMCLKFreq+0x74>
340093ec:	d808      	bhi.n	34009400 <RCCEx_GetLPTIMCLKFreq+0x5c>
340093ee:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340093f2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340093f6:	429a      	cmp	r2, r3
340093f8:	d00e      	beq.n	34009418 <RCCEx_GetLPTIMCLKFreq+0x74>
340093fa:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
340093fe:	e7ed      	b.n	340093dc <RCCEx_GetLPTIMCLKFreq+0x38>
34009400:	4b50      	ldr	r3, [pc, #320]	@ (34009544 <RCCEx_GetLPTIMCLKFreq+0x1a0>)
34009402:	4298      	cmp	r0, r3
34009404:	d00f      	beq.n	34009426 <RCCEx_GetLPTIMCLKFreq+0x82>
34009406:	d80b      	bhi.n	34009420 <RCCEx_GetLPTIMCLKFreq+0x7c>
34009408:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
3400940c:	4298      	cmp	r0, r3
3400940e:	d003      	beq.n	34009418 <RCCEx_GetLPTIMCLKFreq+0x74>
34009410:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34009414:	4298      	cmp	r0, r3
34009416:	d1e4      	bne.n	340093e2 <RCCEx_GetLPTIMCLKFreq+0x3e>
}
34009418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400941c:	f7fe bffc 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009420:	4b49      	ldr	r3, [pc, #292]	@ (34009548 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34009422:	4298      	cmp	r0, r3
34009424:	d1dd      	bne.n	340093e2 <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34009426:	f7fb fe7f 	bl	34005128 <LL_RCC_IC15_IsEnabled>
3400942a:	2800      	cmp	r0, #0
3400942c:	d0d9      	beq.n	340093e2 <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
3400942e:	f7fb fe83 	bl	34005138 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34009432:	4b46      	ldr	r3, [pc, #280]	@ (3400954c <RCCEx_GetLPTIMCLKFreq+0x1a8>)
34009434:	4604      	mov	r4, r0
34009436:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400943a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3400943e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009442:	d078      	beq.n	34009536 <RCCEx_GetLPTIMCLKFreq+0x192>
34009444:	d86b      	bhi.n	3400951e <RCCEx_GetLPTIMCLKFreq+0x17a>
34009446:	2b00      	cmp	r3, #0
34009448:	d070      	beq.n	3400952c <RCCEx_GetLPTIMCLKFreq+0x188>
3400944a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400944e:	d1c8      	bne.n	340093e2 <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009450:	f7fe ff22 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
34009454:	e06c      	b.n	34009530 <RCCEx_GetLPTIMCLKFreq+0x18c>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009456:	4b3e      	ldr	r3, [pc, #248]	@ (34009550 <RCCEx_GetLPTIMCLKFreq+0x1ac>)
34009458:	4298      	cmp	r0, r3
3400945a:	d034      	beq.n	340094c6 <RCCEx_GetLPTIMCLKFreq+0x122>
3400945c:	d824      	bhi.n	340094a8 <RCCEx_GetLPTIMCLKFreq+0x104>
3400945e:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34009462:	4298      	cmp	r0, r3
34009464:	d00f      	beq.n	34009486 <RCCEx_GetLPTIMCLKFreq+0xe2>
34009466:	d815      	bhi.n	34009494 <RCCEx_GetLPTIMCLKFreq+0xf0>
34009468:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3400946c:	4298      	cmp	r0, r3
3400946e:	d00a      	beq.n	34009486 <RCCEx_GetLPTIMCLKFreq+0xe2>
34009470:	d806      	bhi.n	34009480 <RCCEx_GetLPTIMCLKFreq+0xdc>
34009472:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34009476:	4298      	cmp	r0, r3
34009478:	d0d5      	beq.n	34009426 <RCCEx_GetLPTIMCLKFreq+0x82>
3400947a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400947e:	e7d0      	b.n	34009422 <RCCEx_GetLPTIMCLKFreq+0x7e>
34009480:	4b34      	ldr	r3, [pc, #208]	@ (34009554 <RCCEx_GetLPTIMCLKFreq+0x1b0>)
34009482:	4298      	cmp	r0, r3
34009484:	d1ad      	bne.n	340093e2 <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
34009486:	f7fb fddf 	bl	34005048 <LL_RCC_LSE_IsReady>
3400948a:	3800      	subs	r0, #0
3400948c:	bf18      	it	ne
3400948e:	2001      	movne	r0, #1
34009490:	03c0      	lsls	r0, r0, #15
34009492:	e7a7      	b.n	340093e4 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34009494:	4b30      	ldr	r3, [pc, #192]	@ (34009558 <RCCEx_GetLPTIMCLKFreq+0x1b4>)
34009496:	4298      	cmp	r0, r3
34009498:	d0f5      	beq.n	34009486 <RCCEx_GetLPTIMCLKFreq+0xe2>
3400949a:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
3400949e:	4298      	cmp	r0, r3
340094a0:	d011      	beq.n	340094c6 <RCCEx_GetLPTIMCLKFreq+0x122>
340094a2:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340094a6:	e7ec      	b.n	34009482 <RCCEx_GetLPTIMCLKFreq+0xde>
340094a8:	4b2c      	ldr	r3, [pc, #176]	@ (3400955c <RCCEx_GetLPTIMCLKFreq+0x1b8>)
340094aa:	4298      	cmp	r0, r3
340094ac:	d015      	beq.n	340094da <RCCEx_GetLPTIMCLKFreq+0x136>
340094ae:	d81b      	bhi.n	340094e8 <RCCEx_GetLPTIMCLKFreq+0x144>
340094b0:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340094b4:	4298      	cmp	r0, r3
340094b6:	d006      	beq.n	340094c6 <RCCEx_GetLPTIMCLKFreq+0x122>
340094b8:	d80c      	bhi.n	340094d4 <RCCEx_GetLPTIMCLKFreq+0x130>
340094ba:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340094be:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340094c2:	4298      	cmp	r0, r3
340094c4:	d18d      	bne.n	340093e2 <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340094c6:	4b21      	ldr	r3, [pc, #132]	@ (3400954c <RCCEx_GetLPTIMCLKFreq+0x1a8>)
340094c8:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
340094ca:	07db      	lsls	r3, r3, #31
340094cc:	d589      	bpl.n	340093e2 <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
340094ce:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
340094d2:	e787      	b.n	340093e4 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340094d4:	4b22      	ldr	r3, [pc, #136]	@ (34009560 <RCCEx_GetLPTIMCLKFreq+0x1bc>)
340094d6:	4298      	cmp	r0, r3
340094d8:	d183      	bne.n	340093e2 <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340094da:	f7fb fd29 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
340094de:	4b1b      	ldr	r3, [pc, #108]	@ (3400954c <RCCEx_GetLPTIMCLKFreq+0x1a8>)
340094e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340094e2:	f3c3 6301 	ubfx	r3, r3, #24, #2
340094e6:	e00f      	b.n	34009508 <RCCEx_GetLPTIMCLKFreq+0x164>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340094e8:	4b1e      	ldr	r3, [pc, #120]	@ (34009564 <RCCEx_GetLPTIMCLKFreq+0x1c0>)
340094ea:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340094ee:	429a      	cmp	r2, r3
340094f0:	d0f3      	beq.n	340094da <RCCEx_GetLPTIMCLKFreq+0x136>
340094f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340094f6:	e7ee      	b.n	340094d6 <RCCEx_GetLPTIMCLKFreq+0x132>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340094f8:	f7fb fd1a 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
340094fc:	f7fb fe26 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34009500:	4b12      	ldr	r3, [pc, #72]	@ (3400954c <RCCEx_GetLPTIMCLKFreq+0x1a8>)
34009502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009504:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34009508:	40d8      	lsrs	r0, r3
      break;
3400950a:	e76b      	b.n	340093e4 <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400950c:	f7fb fd10 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34009510:	f7fb fe1c 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34009514:	4b0d      	ldr	r3, [pc, #52]	@ (3400954c <RCCEx_GetLPTIMCLKFreq+0x1a8>)
34009516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34009518:	f3c3 3302 	ubfx	r3, r3, #12, #3
3400951c:	e7f4      	b.n	34009508 <RCCEx_GetLPTIMCLKFreq+0x164>
3400951e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009522:	f47f af5e 	bne.w	340093e2 <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009526:	f7fe ff37 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
3400952a:	e001      	b.n	34009530 <RCCEx_GetLPTIMCLKFreq+0x18c>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400952c:	f7fe fe74 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
34009530:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009534:	e756      	b.n	340093e4 <RCCEx_GetLPTIMCLKFreq+0x40>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009536:	f7fe feef 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
3400953a:	e7f9      	b.n	34009530 <RCCEx_GetLPTIMCLKFreq+0x18c>
3400953c:	0702102c 	.word	0x0702102c
34009540:	0701102c 	.word	0x0701102c
34009544:	0702082c 	.word	0x0702082c
34009548:	07020c2c 	.word	0x07020c2c
3400954c:	56028000 	.word	0x56028000
34009550:	07040c2c 	.word	0x07040c2c
34009554:	07030c2c 	.word	0x07030c2c
34009558:	0703182c 	.word	0x0703182c
3400955c:	07050c2c 	.word	0x07050c2c
34009560:	0705082c 	.word	0x0705082c
34009564:	0705102c 	.word	0x0705102c

34009568 <HAL_RCCEx_GetPeriphCLKFreq>:
{
34009568:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
3400956a:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
3400956e:	430b      	orrs	r3, r1
34009570:	f000 8462 	beq.w	34009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
34009574:	4bba      	ldr	r3, [pc, #744]	@ (34009860 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
34009576:	4298      	cmp	r0, r3
34009578:	f171 0300 	sbcs.w	r3, r1, #0
3400957c:	f080 80dd 	bcs.w	3400973a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
34009580:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
34009584:	430b      	orrs	r3, r1
34009586:	f000 8355 	beq.w	34009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
3400958a:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
3400958e:	f171 0300 	sbcs.w	r3, r1, #0
34009592:	d26a      	bcs.n	3400966a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
34009594:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
34009598:	430b      	orrs	r3, r1
3400959a:	f000 82b3 	beq.w	34009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
3400959e:	f240 2301 	movw	r3, #513	@ 0x201
340095a2:	4298      	cmp	r0, r3
340095a4:	f171 0300 	sbcs.w	r3, r1, #0
340095a8:	d224      	bcs.n	340095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
340095aa:	2809      	cmp	r0, #9
340095ac:	f171 0300 	sbcs.w	r3, r1, #0
340095b0:	d215      	bcs.n	340095de <HAL_RCCEx_GetPeriphCLKFreq+0x76>
340095b2:	ea50 0301 	orrs.w	r3, r0, r1
340095b6:	d01b      	beq.n	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
340095b8:	3801      	subs	r0, #1
340095ba:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
340095be:	2808      	cmp	r0, #8
340095c0:	f171 0100 	sbcs.w	r1, r1, #0
340095c4:	d214      	bcs.n	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
340095c6:	2807      	cmp	r0, #7
340095c8:	d812      	bhi.n	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
340095ca:	e8df f010 	tbh	[pc, r0, lsl #1]
340095ce:	019c      	.short	0x019c
340095d0:	0011020a 	.word	0x0011020a
340095d4:	00110259 	.word	0x00110259
340095d8:	00110011 	.word	0x00110011
340095dc:	0228      	.short	0x0228
340095de:	f1a0 0310 	sub.w	r3, r0, #16
340095e2:	430b      	orrs	r3, r1
340095e4:	f000 823c 	beq.w	34009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
340095e8:	3820      	subs	r0, #32
340095ea:	4308      	orrs	r0, r1
340095ec:	f000 8264 	beq.w	34009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
340095f0:	2000      	movs	r0, #0
340095f2:	e234      	b.n	34009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  switch (PeriphClk)
340095f4:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
340095f8:	430b      	orrs	r3, r1
340095fa:	f000 8317 	beq.w	34009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
340095fe:	f242 0301 	movw	r3, #8193	@ 0x2001
34009602:	4298      	cmp	r0, r3
34009604:	f171 0300 	sbcs.w	r3, r1, #0
34009608:	d224      	bcs.n	34009654 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
3400960a:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
3400960e:	430b      	orrs	r3, r1
34009610:	f000 82dd 	beq.w	34009bce <HAL_RCCEx_GetPeriphCLKFreq+0x666>
34009614:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
34009618:	430b      	orrs	r3, r1
3400961a:	f000 8302 	beq.w	34009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
3400961e:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
34009622:	4308      	orrs	r0, r1
34009624:	d1e4      	bne.n	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34009626:	4d8f      	ldr	r5, [pc, #572]	@ (34009864 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
34009628:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
3400962c:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34009630:	2b02      	cmp	r3, #2
34009632:	f000 82bf 	beq.w	34009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
34009636:	2b03      	cmp	r3, #3
34009638:	f000 8250 	beq.w	34009adc <HAL_RCCEx_GetPeriphCLKFreq+0x574>
3400963c:	2b01      	cmp	r3, #1
3400963e:	f000 821f 	beq.w	34009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009642:	f7fb fc75 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34009646:	f7fb fd81 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3400964a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
3400964c:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009650:	40d8      	lsrs	r0, r3
34009652:	e204      	b.n	34009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  switch (PeriphClk)
34009654:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
34009658:	430b      	orrs	r3, r1
3400965a:	f000 82e9 	beq.w	34009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
3400965e:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
34009662:	4308      	orrs	r0, r1
34009664:	d1c4      	bne.n	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
34009666:	4880      	ldr	r0, [pc, #512]	@ (34009868 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
34009668:	e2dc      	b.n	34009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
  switch (PeriphClk)
3400966a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
3400966e:	430b      	orrs	r3, r1
34009670:	f000 82f0 	beq.w	34009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34009674:	4b7d      	ldr	r3, [pc, #500]	@ (3400986c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
34009676:	4298      	cmp	r0, r3
34009678:	f171 0300 	sbcs.w	r3, r1, #0
3400967c:	d224      	bcs.n	340096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
3400967e:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
34009682:	430b      	orrs	r3, r1
34009684:	f000 82e2 	beq.w	34009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
34009688:	4b79      	ldr	r3, [pc, #484]	@ (34009870 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
3400968a:	4298      	cmp	r0, r3
3400968c:	f171 0300 	sbcs.w	r3, r1, #0
34009690:	d20f      	bcs.n	340096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
34009692:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
34009696:	430b      	orrs	r3, r1
34009698:	f000 82d1 	beq.w	34009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
3400969c:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
340096a0:	430b      	orrs	r3, r1
340096a2:	f000 82d1 	beq.w	34009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
340096a6:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
340096aa:	4308      	orrs	r0, r1
340096ac:	d1a0      	bne.n	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
340096ae:	4871      	ldr	r0, [pc, #452]	@ (34009874 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
340096b0:	e2c1      	b.n	34009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
  switch (PeriphClk)
340096b2:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
340096b6:	430b      	orrs	r3, r1
340096b8:	f000 82ca 	beq.w	34009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
340096bc:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
340096c0:	4308      	orrs	r0, r1
340096c2:	d195      	bne.n	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
340096c4:	486c      	ldr	r0, [pc, #432]	@ (34009878 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
340096c6:	e2bb      	b.n	34009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
  switch (PeriphClk)
340096c8:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
340096cc:	430b      	orrs	r3, r1
340096ce:	f000 8361 	beq.w	34009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
340096d2:	4b6a      	ldr	r3, [pc, #424]	@ (3400987c <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
340096d4:	4298      	cmp	r0, r3
340096d6:	f171 0300 	sbcs.w	r3, r1, #0
340096da:	d21f      	bcs.n	3400971c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
340096dc:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
340096e0:	430b      	orrs	r3, r1
340096e2:	f000 82fc 	beq.w	34009cde <HAL_RCCEx_GetPeriphCLKFreq+0x776>
340096e6:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
340096ea:	4308      	orrs	r0, r1
340096ec:	d180      	bne.n	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
340096ee:	4d5d      	ldr	r5, [pc, #372]	@ (34009864 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
340096f0:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
340096f4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
340096f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340096fc:	f000 8188 	beq.w	34009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
34009700:	f200 832d 	bhi.w	34009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
34009704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34009708:	f000 8333 	beq.w	34009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
3400970c:	f200 8318 	bhi.w	34009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
34009710:	2b00      	cmp	r3, #0
34009712:	f000 8177 	beq.w	34009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
34009716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400971a:	e1af      	b.n	34009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
  switch (PeriphClk)
3400971c:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
34009720:	430b      	orrs	r3, r1
34009722:	f000 8368 	beq.w	34009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
34009726:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
3400972a:	4308      	orrs	r0, r1
3400972c:	f47f af60 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34009730:	4853      	ldr	r0, [pc, #332]	@ (34009880 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
}
34009732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34009736:	f7ff bbd1 	b.w	34008edc <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
3400973a:	2300      	movs	r3, #0
3400973c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34009740:	4291      	cmp	r1, r2
34009742:	bf08      	it	eq
34009744:	4298      	cmpeq	r0, r3
34009746:	f000 8393 	beq.w	34009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
3400974a:	4283      	cmp	r3, r0
3400974c:	418a      	sbcs	r2, r1
3400974e:	d35f      	bcc.n	34009810 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
34009750:	2210      	movs	r2, #16
34009752:	4291      	cmp	r1, r2
34009754:	bf08      	it	eq
34009756:	4298      	cmpeq	r0, r3
34009758:	f000 837d 	beq.w	34009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
3400975c:	4283      	cmp	r3, r0
3400975e:	418a      	sbcs	r2, r1
34009760:	d329      	bcc.n	340097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
34009762:	2202      	movs	r2, #2
34009764:	4291      	cmp	r1, r2
34009766:	bf08      	it	eq
34009768:	4298      	cmpeq	r0, r3
3400976a:	f000 836d 	beq.w	34009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
3400976e:	4283      	cmp	r3, r0
34009770:	418a      	sbcs	r2, r1
34009772:	d314      	bcc.n	3400979e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
34009774:	4299      	cmp	r1, r3
34009776:	bf08      	it	eq
34009778:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
3400977c:	f000 835e 	beq.w	34009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
34009780:	2901      	cmp	r1, #1
34009782:	bf08      	it	eq
34009784:	4298      	cmpeq	r0, r3
34009786:	f000 835b 	beq.w	34009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
3400978a:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
3400978e:	4308      	orrs	r0, r1
34009790:	f47f af2e 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34009794:	483b      	ldr	r0, [pc, #236]	@ (34009884 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
}
34009796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3400979a:	f7ff bcdb 	b.w	34009154 <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
3400979e:	2904      	cmp	r1, #4
340097a0:	bf08      	it	eq
340097a2:	4298      	cmpeq	r0, r3
340097a4:	f000 8355 	beq.w	34009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
340097a8:	2908      	cmp	r1, #8
340097aa:	bf08      	it	eq
340097ac:	4298      	cmpeq	r0, r3
340097ae:	f47f af1f 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
340097b2:	4835      	ldr	r0, [pc, #212]	@ (34009888 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
340097b4:	e349      	b.n	34009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
  switch (PeriphClk)
340097b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
340097ba:	4291      	cmp	r1, r2
340097bc:	bf08      	it	eq
340097be:	4298      	cmpeq	r0, r3
340097c0:	f000 8352 	beq.w	34009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
340097c4:	4283      	cmp	r3, r0
340097c6:	418a      	sbcs	r2, r1
340097c8:	d311      	bcc.n	340097ee <HAL_RCCEx_GetPeriphCLKFreq+0x286>
340097ca:	2940      	cmp	r1, #64	@ 0x40
340097cc:	bf08      	it	eq
340097ce:	4298      	cmpeq	r0, r3
340097d0:	f000 8343 	beq.w	34009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
340097d4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
340097d8:	bf08      	it	eq
340097da:	4298      	cmpeq	r0, r3
340097dc:	f000 833f 	beq.w	34009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
340097e0:	2920      	cmp	r1, #32
340097e2:	bf08      	it	eq
340097e4:	2800      	cmpeq	r0, #0
340097e6:	f47f af03 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
340097ea:	4828      	ldr	r0, [pc, #160]	@ (3400988c <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
340097ec:	e32d      	b.n	34009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
  switch (PeriphClk)
340097ee:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
340097f2:	bf08      	it	eq
340097f4:	4298      	cmpeq	r0, r3
340097f6:	f000 8339 	beq.w	34009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
340097fa:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
340097fe:	bf08      	it	eq
34009800:	4298      	cmpeq	r0, r3
34009802:	f47f aef5 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34009806:	4822      	ldr	r0, [pc, #136]	@ (34009890 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
}
34009808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
3400980c:	f7ff b90c 	b.w	34008a28 <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
34009810:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34009814:	4291      	cmp	r1, r2
34009816:	bf08      	it	eq
34009818:	4298      	cmpeq	r0, r3
3400981a:	f000 8365 	beq.w	34009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
3400981e:	4283      	cmp	r3, r0
34009820:	418a      	sbcs	r2, r1
34009822:	d34a      	bcc.n	340098ba <HAL_RCCEx_GetPeriphCLKFreq+0x352>
34009824:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34009828:	4291      	cmp	r1, r2
3400982a:	bf08      	it	eq
3400982c:	4298      	cmpeq	r0, r3
3400982e:	f000 8325 	beq.w	34009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
34009832:	4283      	cmp	r3, r0
34009834:	418a      	sbcs	r2, r1
34009836:	d32f      	bcc.n	34009898 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
34009838:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
3400983c:	bf08      	it	eq
3400983e:	4298      	cmpeq	r0, r3
34009840:	f000 8318 	beq.w	34009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
34009844:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
34009848:	bf08      	it	eq
3400984a:	4298      	cmpeq	r0, r3
3400984c:	f000 8314 	beq.w	34009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
34009850:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
34009854:	bf08      	it	eq
34009856:	2800      	cmpeq	r0, #0
34009858:	f47f aeca 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
3400985c:	480d      	ldr	r0, [pc, #52]	@ (34009894 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
3400985e:	e2ff      	b.n	34009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
34009860:	20000001 	.word	0x20000001
34009864:	56028000 	.word	0x56028000
34009868:	07000c0c 	.word	0x07000c0c
3400986c:	00800001 	.word	0x00800001
34009870:	00100001 	.word	0x00100001
34009874:	0700140c 	.word	0x0700140c
34009878:	0700182c 	.word	0x0700182c
3400987c:	04000001 	.word	0x04000001
34009880:	07001418 	.word	0x07001418
34009884:	0300001c 	.word	0x0300001c
34009888:	07000c20 	.word	0x07000c20
3400988c:	07001420 	.word	0x07001420
34009890:	07000c30 	.word	0x07000c30
34009894:	07001430 	.word	0x07001430
  switch (PeriphClk)
34009898:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
3400989c:	bf08      	it	eq
3400989e:	4298      	cmpeq	r0, r3
340098a0:	f000 82ee 	beq.w	34009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
340098a4:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
340098a8:	bf08      	it	eq
340098aa:	4298      	cmpeq	r0, r3
340098ac:	f47f aea0 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
340098b0:	48b2      	ldr	r0, [pc, #712]	@ (34009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
}
340098b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
340098b6:	f7fe bf7f 	b.w	340087b8 <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
340098ba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
340098be:	4291      	cmp	r1, r2
340098c0:	bf08      	it	eq
340098c2:	4298      	cmpeq	r0, r3
340098c4:	f000 8317 	beq.w	34009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
340098c8:	4283      	cmp	r3, r0
340098ca:	418a      	sbcs	r2, r1
340098cc:	d30d      	bcc.n	340098ea <HAL_RCCEx_GetPeriphCLKFreq+0x382>
340098ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
340098d2:	bf08      	it	eq
340098d4:	4298      	cmpeq	r0, r3
340098d6:	f000 830c 	beq.w	34009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
340098da:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
340098de:	bf08      	it	eq
340098e0:	4298      	cmpeq	r0, r3
340098e2:	f47f ae85 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340098e6:	48a6      	ldr	r0, [pc, #664]	@ (34009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
340098e8:	e2ff      	b.n	34009eea <HAL_RCCEx_GetPeriphCLKFreq+0x982>
  switch (PeriphClk)
340098ea:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
340098ee:	bf08      	it	eq
340098f0:	4298      	cmpeq	r0, r3
340098f2:	f000 8305 	beq.w	34009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
340098f6:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
340098fa:	bf08      	it	eq
340098fc:	4298      	cmpeq	r0, r3
340098fe:	f47f ae77 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34009902:	48a0      	ldr	r0, [pc, #640]	@ (34009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
34009904:	e2f8      	b.n	34009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34009906:	4da0      	ldr	r5, [pc, #640]	@ (34009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
34009908:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
3400990c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009910:	2b40      	cmp	r3, #64	@ 0x40
34009912:	d058      	beq.n	340099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
34009914:	d81b      	bhi.n	3400994e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
34009916:	2b20      	cmp	r3, #32
34009918:	d031      	beq.n	3400997e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
3400991a:	d80c      	bhi.n	34009936 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
3400991c:	b33b      	cbz	r3, 3400996e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
3400991e:	2b10      	cmp	r3, #16
34009920:	d02a      	beq.n	34009978 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34009922:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34009924:	4b98      	ldr	r3, [pc, #608]	@ (34009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
34009926:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400992a:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
3400992e:	3301      	adds	r3, #1
34009930:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
34009934:	e093      	b.n	34009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34009936:	2b30      	cmp	r3, #48	@ 0x30
34009938:	d1f3      	bne.n	34009922 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3400993a:	f7fb fbbf 	bl	340050bc <LL_RCC_IC8_IsEnabled>
3400993e:	2800      	cmp	r0, #0
34009940:	d0ef      	beq.n	34009922 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
        ic_divider = LL_RCC_IC8_GetDivider();
34009942:	f7fb fbc3 	bl	340050cc <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009946:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
3400994a:	4604      	mov	r4, r0
3400994c:	e020      	b.n	34009990 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
3400994e:	2b60      	cmp	r3, #96	@ 0x60
34009950:	d045      	beq.n	340099de <HAL_RCCEx_GetPeriphCLKFreq+0x476>
34009952:	2b70      	cmp	r3, #112	@ 0x70
34009954:	d03d      	beq.n	340099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
34009956:	2b50      	cmp	r3, #80	@ 0x50
34009958:	d1e3      	bne.n	34009922 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
      if (LL_RCC_HSI_IsReady() != 0U)
3400995a:	f7fb fb65 	bl	34005028 <LL_RCC_HSI_IsReady>
3400995e:	2800      	cmp	r0, #0
34009960:	d0df      	beq.n	34009922 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009962:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009964:	4889      	ldr	r0, [pc, #548]	@ (34009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
34009966:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3400996a:	40d8      	lsrs	r0, r3
      break;
3400996c:	e7da      	b.n	34009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3400996e:	f7fb fadf 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34009972:	f7fb fbeb 	bl	3400514c <RCCEx_GetHCLKFreq>
      break;
34009976:	e7d5      	b.n	34009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009978:	f7fe fd4e 	bl	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
3400997c:	e7d2      	b.n	34009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3400997e:	f7fb fb8b 	bl	34005098 <LL_RCC_IC7_IsEnabled>
34009982:	2800      	cmp	r0, #0
34009984:	d0cd      	beq.n	34009922 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
        ic_divider = LL_RCC_IC7_GetDivider();
34009986:	f7fb fb8f 	bl	340050a8 <LL_RCC_IC7_GetDivider>
3400998a:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3400998c:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009990:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34009994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009998:	d012      	beq.n	340099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
3400999a:	d808      	bhi.n	340099ae <HAL_RCCEx_GetPeriphCLKFreq+0x446>
3400999c:	b16b      	cbz	r3, 340099ba <HAL_RCCEx_GetPeriphCLKFreq+0x452>
3400999e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340099a2:	d1be      	bne.n	34009922 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340099a4:	f7fe fc78 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
340099a8:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340099ac:	e7ba      	b.n	34009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
340099ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340099b2:	d1b6      	bne.n	34009922 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340099b4:	f7fe fcf0 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
340099b8:	e7f6      	b.n	340099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340099ba:	f7fe fc2d 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
340099be:	e7f3      	b.n	340099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340099c0:	f7fe fcaa 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
340099c4:	e7f0      	b.n	340099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
      if (LL_RCC_MSI_IsReady() != 0U)
340099c6:	f7fb fb37 	bl	34005038 <LL_RCC_MSI_IsReady>
340099ca:	2800      	cmp	r0, #0
340099cc:	d0a9      	beq.n	34009922 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
        adc_frequency = MSI_VALUE;
340099ce:	4870      	ldr	r0, [pc, #448]	@ (34009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
340099d0:	e7a8      	b.n	34009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340099d2:	f7fb faad 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
340099d6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
340099d8:	f3c3 6301 	ubfx	r3, r3, #24, #2
340099dc:	e7c5      	b.n	3400996a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
340099de:	486d      	ldr	r0, [pc, #436]	@ (34009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
340099e0:	e7a0      	b.n	34009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
340099e2:	4d69      	ldr	r5, [pc, #420]	@ (34009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
340099e4:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
340099e8:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
340099ec:	3b01      	subs	r3, #1
340099ee:	2b06      	cmp	r3, #6
340099f0:	d808      	bhi.n	34009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
340099f2:	e8df f013 	tbh	[pc, r3, lsl #1]
340099f6:	0045      	.short	0x0045
340099f8:	01a901be 	.word	0x01a901be
340099fc:	004d000d 	.word	0x004d000d
34009a00:	01c90287 	.word	0x01c90287
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009a04:	f7fb fa94 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
}
34009a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009a0c:	f7fb bb9e 	b.w	3400514c <RCCEx_GetHCLKFreq>
      if (LL_RCC_MSI_IsReady() != 0U)
34009a10:	f7fb fb12 	bl	34005038 <LL_RCC_MSI_IsReady>
34009a14:	2800      	cmp	r0, #0
34009a16:	f43f adeb 	beq.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
34009a1a:	485d      	ldr	r0, [pc, #372]	@ (34009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
34009a1c:	e01f      	b.n	34009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34009a1e:	4b5a      	ldr	r3, [pc, #360]	@ (34009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
34009a20:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009a24:	0395      	lsls	r5, r2, #14
34009a26:	f57f ade3 	bpl.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009a2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34009a2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009a32:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009a36:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009a38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34009a3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009a40:	f000 81d6 	beq.w	34009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
34009a44:	f200 81ca 	bhi.w	34009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
34009a48:	2b00      	cmp	r3, #0
34009a4a:	f000 81ce 	beq.w	34009dea <HAL_RCCEx_GetPeriphCLKFreq+0x882>
34009a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009a52:	f47f adcd 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009a56:	f7fe fc1f 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
34009a5a:	fbb0 f0f4 	udiv	r0, r0, r4
}
34009a5e:	bd38      	pop	{r3, r4, r5, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34009a60:	4d49      	ldr	r5, [pc, #292]	@ (34009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
34009a62:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34009a66:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009a6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34009a6e:	d016      	beq.n	34009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x536>
34009a70:	d80a      	bhi.n	34009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
34009a72:	2b00      	cmp	r3, #0
34009a74:	f000 814f 	beq.w	34009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
34009a78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009a7c:	f47f adb8 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
}
34009a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009a84:	f7fe bcc8 	b.w	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34009a88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009a8c:	f47f adb0 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009a90:	f7fb faca 	bl	34005028 <LL_RCC_HSI_IsReady>
34009a94:	2800      	cmp	r0, #0
34009a96:	f43f adab 	beq.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009a9a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
34009a9c:	e137      	b.n	34009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34009a9e:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009aa2:	03dc      	lsls	r4, r3, #15
34009aa4:	f57f ada4 	bpl.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009aa8:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009aac:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009ab0:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009ab4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34009ab6:	e7bf      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34009ab8:	4a33      	ldr	r2, [pc, #204]	@ (34009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
34009aba:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009abe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34009ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34009ac6:	d010      	beq.n	34009aea <HAL_RCCEx_GetPeriphCLKFreq+0x582>
34009ac8:	d804      	bhi.n	34009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
34009aca:	2b00      	cmp	r3, #0
34009acc:	d09a      	beq.n	34009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
34009ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34009ad2:	e7d3      	b.n	34009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
34009ad4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34009ad8:	f47f ad8a 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
34009adc:	f7fb fa9c 	bl	34005018 <LL_RCC_HSE_IsReady>
34009ae0:	2800      	cmp	r0, #0
34009ae2:	f43f ad85 	beq.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
34009ae6:	482c      	ldr	r0, [pc, #176]	@ (34009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
34009ae8:	e7b9      	b.n	34009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34009aea:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009aee:	0518      	lsls	r0, r3, #20
34009af0:	f57f ad7e 	bpl.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009af4:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009af8:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34009afc:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009b00:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009b02:	e799      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34009b04:	4a20      	ldr	r2, [pc, #128]	@ (34009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
34009b06:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34009b0a:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34009b0e:	2b02      	cmp	r3, #2
34009b10:	d010      	beq.n	34009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
34009b12:	2b03      	cmp	r3, #3
34009b14:	d048      	beq.n	34009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
34009b16:	2b01      	cmp	r3, #1
34009b18:	d009      	beq.n	34009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009b1a:	f7fb fa09 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34009b1e:	f7fb fb15 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34009b22:	4b19      	ldr	r3, [pc, #100]	@ (34009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
34009b24:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34009b28:	f3c3 1303 	ubfx	r3, r3, #4, #4
34009b2c:	e6ff      	b.n	3400992e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009b2e:	f7fe fc73 	bl	34008418 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34009b32:	e7f6      	b.n	34009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34009b34:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009b38:	04d9      	lsls	r1, r3, #19
34009b3a:	d511      	bpl.n	34009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009b3c:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009b40:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009b44:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009b48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34009b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34009b50:	f100 0401 	add.w	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34009b54:	d025      	beq.n	34009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
34009b56:	d805      	bhi.n	34009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
34009b58:	b153      	cbz	r3, 34009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
34009b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009b5e:	d01d      	beq.n	34009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
        eth1ptp_frequency = HSE_VALUE;
34009b60:	2000      	movs	r0, #0
34009b62:	e7de      	b.n	34009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
34009b64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009b68:	d1fa      	bne.n	34009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009b6a:	f7fe fc15 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
34009b6e:	e001      	b.n	34009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009b70:	f7fe fb52 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34009b74:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34009b78:	e7d3      	b.n	34009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
34009b7a:	bf00      	nop
34009b7c:	01001014 	.word	0x01001014
34009b80:	03001414 	.word	0x03001414
34009b84:	03000814 	.word	0x03000814
34009b88:	56028000 	.word	0x56028000
34009b8c:	03d09000 	.word	0x03d09000
34009b90:	003d0900 	.word	0x003d0900
34009b94:	00bb8000 	.word	0x00bb8000
34009b98:	02dc6c00 	.word	0x02dc6c00
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009b9c:	f7fe fb7c 	bl	34008298 <HAL_RCCEx_GetPLL2CLKFreq>
34009ba0:	e7e8      	b.n	34009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009ba2:	f7fe fbb9 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
34009ba6:	e7e5      	b.n	34009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
      if (LL_RCC_HSE_IsReady() != 0U)
34009ba8:	f7fb fa36 	bl	34005018 <LL_RCC_HSE_IsReady>
34009bac:	2800      	cmp	r0, #0
34009bae:	d0d7      	beq.n	34009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
        eth1ptp_frequency = HSE_VALUE;
34009bb0:	48b4      	ldr	r0, [pc, #720]	@ (34009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
34009bb2:	e7b6      	b.n	34009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34009bb4:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009bb8:	035b      	lsls	r3, r3, #13
34009bba:	f57f ad19 	bpl.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009bbe:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009bc2:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009bc6:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009bca:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34009bcc:	e734      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34009bce:	4bae      	ldr	r3, [pc, #696]	@ (34009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009bd0:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
34009bd4:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34009bd8:	2a20      	cmp	r2, #32
34009bda:	d015      	beq.n	34009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
34009bdc:	d804      	bhi.n	34009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
34009bde:	2a00      	cmp	r2, #0
34009be0:	f43f af10 	beq.w	34009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
34009be4:	2a10      	cmp	r2, #16
34009be6:	e749      	b.n	34009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
34009be8:	2a30      	cmp	r2, #48	@ 0x30
34009bea:	f47f ad01 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34009bee:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009bf2:	0714      	lsls	r4, r2, #28
34009bf4:	f57f acfc 	bpl.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009bf8:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009bfc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34009c00:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009c04:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009c06:	e717      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34009c08:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34009c0c:	0755      	lsls	r5, r2, #29
34009c0e:	f57f acef 	bpl.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009c12:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009c16:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34009c1a:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009c1e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34009c20:	e70a      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34009c22:	489a      	ldr	r0, [pc, #616]	@ (34009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
}
34009c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34009c28:	f7ff bafc 	b.w	34009224 <RCCEx_GetI2CCLKFreq>
34009c2c:	4898      	ldr	r0, [pc, #608]	@ (34009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34009c2e:	e7f9      	b.n	34009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34009c30:	4898      	ldr	r0, [pc, #608]	@ (34009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34009c32:	e7f7      	b.n	34009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34009c34:	4898      	ldr	r0, [pc, #608]	@ (34009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
}
34009c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34009c3a:	f7ff b9fb 	b.w	34009034 <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34009c3e:	4897      	ldr	r0, [pc, #604]	@ (34009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
}
34009c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34009c44:	f7ff bbae 	b.w	340093a4 <RCCEx_GetLPTIMCLKFreq>
34009c48:	4895      	ldr	r0, [pc, #596]	@ (34009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
34009c4a:	e7f9      	b.n	34009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34009c4c:	4895      	ldr	r0, [pc, #596]	@ (34009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
34009c4e:	e7f7      	b.n	34009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34009c50:	4895      	ldr	r0, [pc, #596]	@ (34009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
34009c52:	e7f5      	b.n	34009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34009c54:	4a8c      	ldr	r2, [pc, #560]	@ (34009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009c56:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34009c5a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34009c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34009c62:	d031      	beq.n	34009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
34009c64:	d812      	bhi.n	34009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
34009c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009c6a:	f43f af09 	beq.w	34009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
34009c6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34009c72:	d01d      	beq.n	34009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
34009c74:	2b00      	cmp	r3, #0
34009c76:	f47f acbb 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009c7a:	f7fb f959 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34009c7e:	f7fb fa65 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34009c82:	4b81      	ldr	r3, [pc, #516]	@ (34009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34009c86:	f3c3 3302 	ubfx	r3, r3, #12, #3
34009c8a:	e4e1      	b.n	34009650 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34009c8c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34009c90:	f43f aebe 	beq.w	34009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
34009c94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34009c98:	d032      	beq.n	34009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
34009c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
34009c9e:	f47f aca7 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
34009ca2:	f7fb f9d1 	bl	34005048 <LL_RCC_LSE_IsReady>
34009ca6:	3800      	subs	r0, #0
34009ca8:	bf18      	it	ne
34009caa:	2001      	movne	r0, #1
34009cac:	03c0      	lsls	r0, r0, #15
34009cae:	e6d6      	b.n	34009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34009cb0:	f7fb fa16 	bl	340050e0 <LL_RCC_IC9_IsEnabled>
34009cb4:	2800      	cmp	r0, #0
34009cb6:	f43f ac9b 	beq.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
34009cba:	f7fb fa19 	bl	340050f0 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34009cbe:	4b72      	ldr	r3, [pc, #456]	@ (34009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009cc0:	4604      	mov	r4, r0
34009cc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34009cc6:	e6b7      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34009cc8:	f7fb fa1c 	bl	34005104 <LL_RCC_IC14_IsEnabled>
34009ccc:	2800      	cmp	r0, #0
34009cce:	f43f ac8f 	beq.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
34009cd2:	f7fb fa1f 	bl	34005114 <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34009cd6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34009cda:	4604      	mov	r4, r0
34009cdc:	e6ac      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34009cde:	4d6a      	ldr	r5, [pc, #424]	@ (34009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009ce0:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
34009ce4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34009ce8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34009cec:	d01b      	beq.n	34009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
34009cee:	d803      	bhi.n	34009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
34009cf0:	b18b      	cbz	r3, 34009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
34009cf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34009cf6:	e6c1      	b.n	34009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
34009cf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34009cfc:	f47f ac78 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009d00:	f7fb f992 	bl	34005028 <LL_RCC_HSI_IsReady>
34009d04:	2800      	cmp	r0, #0
34009d06:	f43f ac73 	beq.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009d0a:	4b5f      	ldr	r3, [pc, #380]	@ (34009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009d0e:	4867      	ldr	r0, [pc, #412]	@ (34009eac <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
34009d10:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34009d14:	e49c      	b.n	34009650 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009d16:	f7fb f90b 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
34009d1a:	f7fb fa17 	bl	3400514c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34009d1e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34009d20:	f3c3 4302 	ubfx	r3, r3, #16, #3
34009d24:	e494      	b.n	34009650 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34009d26:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34009d2a:	0418      	lsls	r0, r3, #16
34009d2c:	f57f ac60 	bpl.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009d30:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009d34:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009d38:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009d3c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009d3e:	e67b      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009d40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34009d44:	f47f ac54 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009d48:	f7fb f9b8 	bl	340050bc <LL_RCC_IC8_IsEnabled>
34009d4c:	2800      	cmp	r0, #0
34009d4e:	f43f ac4f 	beq.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
34009d52:	f7fb f9bb 	bl	340050cc <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34009d56:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34009d5a:	4604      	mov	r4, r0
34009d5c:	e66c      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009d5e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34009d62:	f000 80cf 	beq.w	34009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
34009d66:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34009d6a:	d00d      	beq.n	34009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
34009d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34009d70:	e68c      	b.n	34009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x524>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34009d72:	f7fb f991 	bl	34005098 <LL_RCC_IC7_IsEnabled>
34009d76:	2800      	cmp	r0, #0
34009d78:	f43f ac3a 	beq.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
34009d7c:	f7fb f994 	bl	340050a8 <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009d80:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
34009d84:	4604      	mov	r4, r0
34009d86:	e657      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34009d88:	f7fb f8d2 	bl	34004f30 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34009d8c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34009d8e:	f3c3 6301 	ubfx	r3, r3, #24, #2
34009d92:	e45d      	b.n	34009650 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34009d94:	4a3c      	ldr	r2, [pc, #240]	@ (34009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009d96:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34009d9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34009d9e:	2b20      	cmp	r3, #32
34009da0:	d00f      	beq.n	34009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
34009da2:	d804      	bhi.n	34009dae <HAL_RCCEx_GetPeriphCLKFreq+0x846>
34009da4:	2b00      	cmp	r3, #0
34009da6:	f43f ae2d 	beq.w	34009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
34009daa:	2b10      	cmp	r3, #16
34009dac:	e666      	b.n	34009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
34009dae:	2b30      	cmp	r3, #48	@ 0x30
34009db0:	f47f ac1e 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34009db4:	f7fb f938 	bl	34005028 <LL_RCC_HSI_IsReady>
34009db8:	2800      	cmp	r0, #0
34009dba:	f43f ac19 	beq.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34009dbe:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34009dc0:	e7a5      	b.n	34009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34009dc2:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34009dc6:	0319      	lsls	r1, r3, #12
34009dc8:	f57f ac12 	bpl.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009dcc:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009dd0:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009dd4:	f3c0 4007 	ubfx	r0, r0, #16, #8
34009dd8:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009dda:	e62d      	b.n	34009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
34009ddc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009de0:	f47f ac06 	bne.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009de4:	f7fe fad8 	bl	34008398 <HAL_RCCEx_GetPLL4CLKFreq>
34009de8:	e637      	b.n	34009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009dea:	f7fe fa15 	bl	34008218 <HAL_RCCEx_GetPLL1CLKFreq>
34009dee:	e634      	b.n	34009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009df0:	f7fe fa92 	bl	34008318 <HAL_RCCEx_GetPLL3CLKFreq>
34009df4:	e631      	b.n	34009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34009df6:	4a24      	ldr	r2, [pc, #144]	@ (34009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34009df8:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34009dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
34009e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34009e04:	d005      	beq.n	34009e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
34009e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34009e0a:	d009      	beq.n	34009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
34009e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009e10:	e745      	b.n	34009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x736>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34009e12:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34009e14:	07db      	lsls	r3, r3, #31
34009e16:	f57f abeb 	bpl.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
34009e1a:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
34009e1e:	e61e      	b.n	34009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      if (LL_RCC_HSE_IsReady() != 0U)
34009e20:	f7fb f8fa 	bl	34005018 <LL_RCC_HSE_IsReady>
34009e24:	2800      	cmp	r0, #0
34009e26:	f43f abe3 	beq.w	340095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34009e2a:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
34009e2e:	4815      	ldr	r0, [pc, #84]	@ (34009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34009e30:	f3c3 3305 	ubfx	r3, r3, #12, #6
34009e34:	3301      	adds	r3, #1
34009e36:	e57b      	b.n	34009930 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34009e38:	481d      	ldr	r0, [pc, #116]	@ (34009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
34009e3a:	e47a      	b.n	34009732 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34009e3c:	481d      	ldr	r0, [pc, #116]	@ (34009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
34009e3e:	e4aa      	b.n	34009796 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
}
34009e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34009e44:	f7fe bb6e 	b.w	34008524 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34009e48:	481b      	ldr	r0, [pc, #108]	@ (34009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
}
34009e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34009e4e:	f7fe bf03 	b.w	34008c58 <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34009e52:	481a      	ldr	r0, [pc, #104]	@ (34009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
34009e54:	e7f9      	b.n	34009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34009e56:	481a      	ldr	r0, [pc, #104]	@ (34009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
34009e58:	e7f7      	b.n	34009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34009e5a:	481a      	ldr	r0, [pc, #104]	@ (34009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
34009e5c:	e7f5      	b.n	34009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34009e5e:	481a      	ldr	r0, [pc, #104]	@ (34009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
}
34009e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34009e64:	f7fe bcda 	b.w	3400881c <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34009e68:	4818      	ldr	r0, [pc, #96]	@ (34009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
34009e6a:	e7f9      	b.n	34009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34009e6c:	4818      	ldr	r0, [pc, #96]	@ (34009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
34009e6e:	e7f7      	b.n	34009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34009e70:	4818      	ldr	r0, [pc, #96]	@ (34009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
34009e72:	e4c9      	b.n	34009808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34009e74:	4818      	ldr	r0, [pc, #96]	@ (34009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
34009e76:	e4c7      	b.n	34009808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34009e78:	4818      	ldr	r0, [pc, #96]	@ (34009edc <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
34009e7a:	e4c5      	b.n	34009808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34009e7c:	4818      	ldr	r0, [pc, #96]	@ (34009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
34009e7e:	e4c3      	b.n	34009808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34009e80:	4818      	ldr	r0, [pc, #96]	@ (34009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
34009e82:	e7ed      	b.n	34009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
34009e84:	02dc6c00 	.word	0x02dc6c00
34009e88:	56028000 	.word	0x56028000
34009e8c:	0700000c 	.word	0x0700000c
34009e90:	0700040c 	.word	0x0700040c
34009e94:	0700080c 	.word	0x0700080c
34009e98:	0700100c 	.word	0x0700100c
34009e9c:	0700082c 	.word	0x0700082c
34009ea0:	07000c2c 	.word	0x07000c2c
34009ea4:	0700102c 	.word	0x0700102c
34009ea8:	0700142c 	.word	0x0700142c
34009eac:	03d09000 	.word	0x03d09000
34009eb0:	07001818 	.word	0x07001818
34009eb4:	0300041c 	.word	0x0300041c
34009eb8:	07000420 	.word	0x07000420
34009ebc:	07000820 	.word	0x07000820
34009ec0:	07001020 	.word	0x07001020
34009ec4:	07001820 	.word	0x07001820
34009ec8:	07000030 	.word	0x07000030
34009ecc:	07000430 	.word	0x07000430
34009ed0:	07000830 	.word	0x07000830
34009ed4:	07001030 	.word	0x07001030
34009ed8:	07001830 	.word	0x07001830
34009edc:	07001c30 	.word	0x07001c30
34009ee0:	07000034 	.word	0x07000034
34009ee4:	07000434 	.word	0x07000434
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34009ee8:	4807      	ldr	r0, [pc, #28]	@ (34009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
}
34009eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34009eee:	f7fe bbf9 	b.w	340086e4 <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34009ef2:	4806      	ldr	r0, [pc, #24]	@ (34009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
34009ef4:	e4dd      	b.n	340098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34009ef6:	4806      	ldr	r0, [pc, #24]	@ (34009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
}
34009ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34009efc:	f7fe bb76 	b.w	340085ec <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34009f00:	4804      	ldr	r0, [pc, #16]	@ (34009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
34009f02:	e7f9      	b.n	34009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34009f04:	4804      	ldr	r0, [pc, #16]	@ (34009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
34009f06:	e5aa      	b.n	34009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
34009f08:	03000c14 	.word	0x03000c14
34009f0c:	01001814 	.word	0x01001814
34009f10:	03000014 	.word	0x03000014
34009f14:	03000414 	.word	0x03000414
34009f18:	00bb8000 	.word	0x00bb8000

34009f1c <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34009f1c:	b538      	push	{r3, r4, r5, lr}
34009f1e:	4604      	mov	r4, r0
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
34009f20:	460d      	mov	r5, r1
34009f22:	b921      	cbnz	r1, 34009f2e <HAL_RIF_RIMC_ConfigMasterAttributes+0x12>
34009f24:	f240 1111 	movw	r1, #273	@ 0x111
34009f28:	4824      	ldr	r0, [pc, #144]	@ (34009fbc <HAL_RIF_RIMC_ConfigMasterAttributes+0xa0>)
34009f2a:	f7f7 f91f 	bl	3400116c <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
34009f2e:	2c0c      	cmp	r4, #12
34009f30:	d904      	bls.n	34009f3c <HAL_RIF_RIMC_ConfigMasterAttributes+0x20>
34009f32:	f44f 7189 	mov.w	r1, #274	@ 0x112
34009f36:	4821      	ldr	r0, [pc, #132]	@ (34009fbc <HAL_RIF_RIMC_ConfigMasterAttributes+0xa0>)
34009f38:	f7f7 f918 	bl	3400116c <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34009f3c:	682b      	ldr	r3, [r5, #0]
34009f3e:	1e5a      	subs	r2, r3, #1
34009f40:	2a01      	cmp	r2, #1
34009f42:	d909      	bls.n	34009f58 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3c>
34009f44:	2b20      	cmp	r3, #32
34009f46:	d82f      	bhi.n	34009fa8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
34009f48:	2b03      	cmp	r3, #3
34009f4a:	d931      	bls.n	34009fb0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x94>
34009f4c:	4a1c      	ldr	r2, [pc, #112]	@ (34009fc0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34009f4e:	3b04      	subs	r3, #4
34009f50:	fa22 f303 	lsr.w	r3, r2, r3
34009f54:	07db      	lsls	r3, r3, #31
34009f56:	d52b      	bpl.n	34009fb0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x94>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
34009f58:	682b      	ldr	r3, [r5, #0]
34009f5a:	2b80      	cmp	r3, #128	@ 0x80
34009f5c:	d001      	beq.n	34009f62 <HAL_RIF_RIMC_ConfigMasterAttributes+0x46>
34009f5e:	2bff      	cmp	r3, #255	@ 0xff
34009f60:	d904      	bls.n	34009f6c <HAL_RIF_RIMC_ConfigMasterAttributes+0x50>
34009f62:	f44f 718a 	mov.w	r1, #276	@ 0x114
34009f66:	4815      	ldr	r0, [pc, #84]	@ (34009fbc <HAL_RIF_RIMC_ConfigMasterAttributes+0xa0>)
34009f68:	f7f7 f900 	bl	3400116c <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
34009f6c:	686b      	ldr	r3, [r5, #4]
34009f6e:	2b03      	cmp	r3, #3
34009f70:	d904      	bls.n	34009f7c <HAL_RIF_RIMC_ConfigMasterAttributes+0x60>
34009f72:	f240 1115 	movw	r1, #277	@ 0x115
34009f76:	4811      	ldr	r0, [pc, #68]	@ (34009fbc <HAL_RIF_RIMC_ConfigMasterAttributes+0xa0>)
34009f78:	f7f7 f8f8 	bl	3400116c <assert_failed>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34009f7c:	682b      	ldr	r3, [r5, #0]
34009f7e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
34009f82:	fab3 f283 	clz	r2, r3

  master_cid = POSITION_VAL(pConfig->MasterCID);
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
34009f86:	00a0      	lsls	r0, r4, #2
34009f88:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
34009f8c:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
34009f90:	f8d0 3c10 	ldr.w	r3, [r0, #3088]	@ 0xc10
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34009f94:	6869      	ldr	r1, [r5, #4]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
34009f96:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
34009f9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34009f9e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
34009fa2:	f8c0 3c10 	str.w	r3, [r0, #3088]	@ 0xc10
}
34009fa6:	bd38      	pop	{r3, r4, r5, pc}
34009fa8:	2b40      	cmp	r3, #64	@ 0x40
34009faa:	d0d5      	beq.n	34009f58 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3c>
34009fac:	2b80      	cmp	r3, #128	@ 0x80
34009fae:	d0d3      	beq.n	34009f58 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3c>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34009fb0:	f240 1113 	movw	r1, #275	@ 0x113
34009fb4:	4801      	ldr	r0, [pc, #4]	@ (34009fbc <HAL_RIF_RIMC_ConfigMasterAttributes+0xa0>)
34009fb6:	f7f7 f8d9 	bl	3400116c <assert_failed>
34009fba:	e7cd      	b.n	34009f58 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3c>
34009fbc:	340109f5 	.word	0x340109f5
34009fc0:	10001011 	.word	0x10001011

34009fc4 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
34009fc4:	4b38      	ldr	r3, [pc, #224]	@ (3400a0a8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe4>)
{
34009fc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
34009fc8:	4298      	cmp	r0, r3
34009fca:	4604      	mov	r4, r0
34009fcc:	460d      	mov	r5, r1
34009fce:	d85c      	bhi.n	3400a08a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xc6>
34009fd0:	3b1e      	subs	r3, #30
34009fd2:	4298      	cmp	r0, r3
34009fd4:	d83b      	bhi.n	3400a04e <HAL_RIF_RISC_SetSlaveSecureAttributes+0x8a>
34009fd6:	4b35      	ldr	r3, [pc, #212]	@ (3400a0ac <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe8>)
34009fd8:	4298      	cmp	r0, r3
34009fda:	d84b      	bhi.n	3400a074 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xb0>
34009fdc:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34009fe0:	d23a      	bcs.n	3400a058 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x94>
34009fe2:	4b33      	ldr	r3, [pc, #204]	@ (3400a0b0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xec>)
34009fe4:	4298      	cmp	r0, r3
34009fe6:	d840      	bhi.n	3400a06a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa6>
34009fe8:	1fc2      	subs	r2, r0, #7
34009fea:	3b22      	subs	r3, #34	@ 0x22
34009fec:	429a      	cmp	r2, r3
34009fee:	d937      	bls.n	3400a060 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x9c>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
34009ff0:	2d03      	cmp	r5, #3
34009ff2:	d904      	bls.n	34009ffe <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a>
34009ff4:	f44f 71ba 	mov.w	r1, #372	@ 0x174
34009ff8:	482e      	ldr	r0, [pc, #184]	@ (3400a0b4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
34009ffa:	f7f7 f8b7 	bl	3400116c <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34009ffe:	2201      	movs	r2, #1
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a000:	0f20      	lsrs	r0, r4, #28
3400a002:	0080      	lsls	r0, r0, #2
3400a004:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3400a008:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3400a00c:	6903      	ldr	r3, [r0, #16]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a00e:	f004 041f 	and.w	r4, r4, #31
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a012:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a014:	9b01      	ldr	r3, [sp, #4]
3400a016:	40a2      	lsls	r2, r4
3400a018:	ea23 0302 	bic.w	r3, r3, r2
3400a01c:	9301      	str	r3, [sp, #4]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a01e:	9901      	ldr	r1, [sp, #4]
3400a020:	f005 0301 	and.w	r3, r5, #1
3400a024:	40a3      	lsls	r3, r4
3400a026:	430b      	orrs	r3, r1
3400a028:	9301      	str	r3, [sp, #4]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a02a:	9b01      	ldr	r3, [sp, #4]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a02c:	f3c5 0140 	ubfx	r1, r5, #1, #1
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a030:	6103      	str	r3, [r0, #16]
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a032:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a034:	40a1      	lsls	r1, r4
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3400a036:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3400a038:	9b01      	ldr	r3, [sp, #4]
3400a03a:	ea23 0302 	bic.w	r3, r3, r2
3400a03e:	9301      	str	r3, [sp, #4]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3400a040:	9b01      	ldr	r3, [sp, #4]
3400a042:	4319      	orrs	r1, r3
3400a044:	9101      	str	r1, [sp, #4]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3400a046:	9b01      	ldr	r3, [sp, #4]
3400a048:	6303      	str	r3, [r0, #48]	@ 0x30
}
3400a04a:	b003      	add	sp, #12
3400a04c:	bd30      	pop	{r4, r5, pc}
3400a04e:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
3400a052:	4b19      	ldr	r3, [pc, #100]	@ (3400a0b8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf4>)
3400a054:	3a02      	subs	r2, #2
3400a056:	e01d      	b.n	3400a094 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3400a058:	4b18      	ldr	r3, [pc, #96]	@ (3400a0bc <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf8>)
3400a05a:	f100 4260 	add.w	r2, r0, #3758096384	@ 0xe0000000
3400a05e:	e019      	b.n	3400a094 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3400a060:	f1a0 0308 	sub.w	r3, r0, #8
3400a064:	2b17      	cmp	r3, #23
3400a066:	d818      	bhi.n	3400a09a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a068:	e7c2      	b.n	34009ff0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a06a:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
3400a06e:	3b1c      	subs	r3, #28
3400a070:	2b02      	cmp	r3, #2
3400a072:	e7f8      	b.n	3400a066 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa2>
3400a074:	4b12      	ldr	r3, [pc, #72]	@ (3400a0c0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xfc>)
3400a076:	4298      	cmp	r0, r3
3400a078:	d803      	bhi.n	3400a082 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xbe>
3400a07a:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3400a07e:	d30c      	bcc.n	3400a09a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a080:	e7b6      	b.n	34009ff0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a082:	4b10      	ldr	r3, [pc, #64]	@ (3400a0c4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x100>)
3400a084:	4298      	cmp	r0, r3
3400a086:	d108      	bne.n	3400a09a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a088:	e7b2      	b.n	34009ff0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a08a:	f100 4230 	add.w	r2, r0, #2952790016	@ 0xb0000000
3400a08e:	2a1e      	cmp	r2, #30
3400a090:	d803      	bhi.n	3400a09a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3400a092:	4b0d      	ldr	r3, [pc, #52]	@ (3400a0c8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x104>)
3400a094:	40d3      	lsrs	r3, r2
3400a096:	07db      	lsls	r3, r3, #31
3400a098:	d4aa      	bmi.n	34009ff0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3400a09a:	f240 1173 	movw	r1, #371	@ 0x173
3400a09e:	4805      	ldr	r0, [pc, #20]	@ (3400a0b4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3400a0a0:	f7f7 f864 	bl	3400116c <assert_failed>
3400a0a4:	e7a4      	b.n	34009ff0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3400a0a6:	bf00      	nop
3400a0a8:	4000001f 	.word	0x4000001f
3400a0ac:	2000001e 	.word	0x2000001e
3400a0b0:	1000001a 	.word	0x1000001a
3400a0b4:	340109f5 	.word	0x340109f5
3400a0b8:	2e838c0b 	.word	0x2e838c0b
3400a0bc:	77dff03b 	.word	0x77dff03b
3400a0c0:	30000008 	.word	0x30000008
3400a0c4:	3000000a 	.word	0x3000000a
3400a0c8:	49deef7f 	.word	0x49deef7f

3400a0cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3400a0cc:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a0ce:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a0d0:	e852 3f00 	ldrex	r3, [r2]
3400a0d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a0d8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400a0dc:	6802      	ldr	r2, [r0, #0]
3400a0de:	2900      	cmp	r1, #0
3400a0e0:	d1f5      	bne.n	3400a0ce <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3400a0e2:	4c0f      	ldr	r4, [pc, #60]	@ (3400a120 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a0e4:	f102 0308 	add.w	r3, r2, #8
3400a0e8:	e853 3f00 	ldrex	r3, [r3]
3400a0ec:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a0ee:	f102 0c08 	add.w	ip, r2, #8
3400a0f2:	e84c 3100 	strex	r1, r3, [ip]
3400a0f6:	2900      	cmp	r1, #0
3400a0f8:	d1f4      	bne.n	3400a0e4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3400a0fa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
3400a0fc:	2b01      	cmp	r3, #1
3400a0fe:	d107      	bne.n	3400a110 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a100:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3400a104:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a108:	e842 3100 	strex	r1, r3, [r2]
3400a10c:	2900      	cmp	r1, #0
3400a10e:	d1f7      	bne.n	3400a100 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3400a110:	2320      	movs	r3, #32
3400a112:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a116:	2300      	movs	r3, #0
3400a118:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3400a11a:	6743      	str	r3, [r0, #116]	@ 0x74
}
3400a11c:	bd10      	pop	{r4, pc}
3400a11e:	bf00      	nop
3400a120:	effffffe 	.word	0xeffffffe

3400a124 <HAL_UART_MspInit>:
}
3400a124:	4770      	bx	lr
	...

3400a128 <UART_SetConfig>:
{
3400a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3400a12a:	6842      	ldr	r2, [r0, #4]
3400a12c:	4bb0      	ldr	r3, [pc, #704]	@ (3400a3f0 <UART_SetConfig+0x2c8>)
{
3400a12e:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3400a130:	429a      	cmp	r2, r3
3400a132:	d904      	bls.n	3400a13e <UART_SetConfig+0x16>
3400a134:	f640 414f 	movw	r1, #3151	@ 0xc4f
3400a138:	48ae      	ldr	r0, [pc, #696]	@ (3400a3f4 <UART_SetConfig+0x2cc>)
3400a13a:	f7f7 f817 	bl	3400116c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
3400a13e:	68a3      	ldr	r3, [r4, #8]
3400a140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a144:	d007      	beq.n	3400a156 <UART_SetConfig+0x2e>
3400a146:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a14a:	d004      	beq.n	3400a156 <UART_SetConfig+0x2e>
3400a14c:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
3400a150:	48a8      	ldr	r0, [pc, #672]	@ (3400a3f4 <UART_SetConfig+0x2cc>)
3400a152:	f7f7 f80b 	bl	3400116c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
3400a156:	6822      	ldr	r2, [r4, #0]
3400a158:	49a7      	ldr	r1, [pc, #668]	@ (3400a3f8 <UART_SetConfig+0x2d0>)
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a15a:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
3400a15c:	428a      	cmp	r2, r1
3400a15e:	d004      	beq.n	3400a16a <UART_SetConfig+0x42>
3400a160:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3400a164:	428a      	cmp	r2, r1
3400a166:	f040 80af 	bne.w	3400a2c8 <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
3400a16a:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a16e:	d004      	beq.n	3400a17a <UART_SetConfig+0x52>
3400a170:	f640 4153 	movw	r1, #3155	@ 0xc53
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a174:	489f      	ldr	r0, [pc, #636]	@ (3400a3f4 <UART_SetConfig+0x2cc>)
3400a176:	f7f6 fff9 	bl	3400116c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
3400a17a:	6923      	ldr	r3, [r4, #16]
3400a17c:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
3400a180:	d007      	beq.n	3400a192 <UART_SetConfig+0x6a>
3400a182:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400a186:	d004      	beq.n	3400a192 <UART_SetConfig+0x6a>
3400a188:	f640 415b 	movw	r1, #3163	@ 0xc5b
3400a18c:	4899      	ldr	r0, [pc, #612]	@ (3400a3f4 <UART_SetConfig+0x2cc>)
3400a18e:	f7f6 ffed 	bl	3400116c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
3400a192:	6963      	ldr	r3, [r4, #20]
3400a194:	f033 020c 	bics.w	r2, r3, #12
3400a198:	d100      	bne.n	3400a19c <UART_SetConfig+0x74>
3400a19a:	b923      	cbnz	r3, 3400a1a6 <UART_SetConfig+0x7e>
3400a19c:	f640 415c 	movw	r1, #3164	@ 0xc5c
3400a1a0:	4894      	ldr	r0, [pc, #592]	@ (3400a3f4 <UART_SetConfig+0x2cc>)
3400a1a2:	f7f6 ffe3 	bl	3400116c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
3400a1a6:	69a3      	ldr	r3, [r4, #24]
3400a1a8:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
3400a1ac:	d004      	beq.n	3400a1b8 <UART_SetConfig+0x90>
3400a1ae:	f640 415d 	movw	r1, #3165	@ 0xc5d
3400a1b2:	4890      	ldr	r0, [pc, #576]	@ (3400a3f4 <UART_SetConfig+0x2cc>)
3400a1b4:	f7f6 ffda 	bl	3400116c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
3400a1b8:	69e3      	ldr	r3, [r4, #28]
3400a1ba:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a1be:	d004      	beq.n	3400a1ca <UART_SetConfig+0xa2>
3400a1c0:	f640 415e 	movw	r1, #3166	@ 0xc5e
3400a1c4:	488b      	ldr	r0, [pc, #556]	@ (3400a3f4 <UART_SetConfig+0x2cc>)
3400a1c6:	f7f6 ffd1 	bl	3400116c <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
3400a1ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a1cc:	2b0b      	cmp	r3, #11
3400a1ce:	d904      	bls.n	3400a1da <UART_SetConfig+0xb2>
3400a1d0:	f640 415f 	movw	r1, #3167	@ 0xc5f
3400a1d4:	4887      	ldr	r0, [pc, #540]	@ (3400a3f4 <UART_SetConfig+0x2cc>)
3400a1d6:	f7f6 ffc9 	bl	3400116c <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a1da:	6921      	ldr	r1, [r4, #16]
3400a1dc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a1de:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a1e0:	430a      	orrs	r2, r1
3400a1e2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a1e4:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a1e6:	69e5      	ldr	r5, [r4, #28]
3400a1e8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a1ea:	4984      	ldr	r1, [pc, #528]	@ (3400a3fc <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a1ec:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a1ee:	4001      	ands	r1, r0
3400a1f0:	430a      	orrs	r2, r1
3400a1f2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3400a1f4:	685a      	ldr	r2, [r3, #4]
3400a1f6:	68e1      	ldr	r1, [r4, #12]
3400a1f8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
3400a1fc:	430a      	orrs	r2, r1
3400a1fe:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a200:	4a7d      	ldr	r2, [pc, #500]	@ (3400a3f8 <UART_SetConfig+0x2d0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3400a202:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a204:	4293      	cmp	r3, r2
3400a206:	d005      	beq.n	3400a214 <UART_SetConfig+0xec>
3400a208:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a20c:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
3400a20e:	bf1c      	itt	ne
3400a210:	6a22      	ldrne	r2, [r4, #32]
3400a212:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3400a214:	689a      	ldr	r2, [r3, #8]
3400a216:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
3400a21a:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
3400a21e:	430a      	orrs	r2, r1
3400a220:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3400a222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400a224:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a226:	f022 020f 	bic.w	r2, r2, #15
3400a22a:	430a      	orrs	r2, r1
3400a22c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a22e:	4a74      	ldr	r2, [pc, #464]	@ (3400a400 <UART_SetConfig+0x2d8>)
3400a230:	4293      	cmp	r3, r2
3400a232:	d07a      	beq.n	3400a32a <UART_SetConfig+0x202>
3400a234:	4a73      	ldr	r2, [pc, #460]	@ (3400a404 <UART_SetConfig+0x2dc>)
3400a236:	4293      	cmp	r3, r2
3400a238:	f000 809c 	beq.w	3400a374 <UART_SetConfig+0x24c>
3400a23c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a240:	4293      	cmp	r3, r2
3400a242:	f000 809b 	beq.w	3400a37c <UART_SetConfig+0x254>
3400a246:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a24a:	4293      	cmp	r3, r2
3400a24c:	f000 809a 	beq.w	3400a384 <UART_SetConfig+0x25c>
3400a250:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a254:	f000 809a 	beq.w	3400a38c <UART_SetConfig+0x264>
3400a258:	4a6b      	ldr	r2, [pc, #428]	@ (3400a408 <UART_SetConfig+0x2e0>)
3400a25a:	4293      	cmp	r3, r2
3400a25c:	f000 809a 	beq.w	3400a394 <UART_SetConfig+0x26c>
3400a260:	4a6a      	ldr	r2, [pc, #424]	@ (3400a40c <UART_SetConfig+0x2e4>)
3400a262:	4293      	cmp	r3, r2
3400a264:	f000 809a 	beq.w	3400a39c <UART_SetConfig+0x274>
3400a268:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a26c:	4293      	cmp	r3, r2
3400a26e:	f000 8099 	beq.w	3400a3a4 <UART_SetConfig+0x27c>
3400a272:	4a67      	ldr	r2, [pc, #412]	@ (3400a410 <UART_SetConfig+0x2e8>)
3400a274:	4293      	cmp	r3, r2
3400a276:	f000 8099 	beq.w	3400a3ac <UART_SetConfig+0x284>
3400a27a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a27e:	4293      	cmp	r3, r2
3400a280:	f000 8098 	beq.w	3400a3b4 <UART_SetConfig+0x28c>
3400a284:	4a5c      	ldr	r2, [pc, #368]	@ (3400a3f8 <UART_SetConfig+0x2d0>)
3400a286:	4293      	cmp	r3, r2
3400a288:	d02e      	beq.n	3400a2e8 <UART_SetConfig+0x1c0>
  if (UART_INSTANCE_LOWPOWER(huart))
3400a28a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a28e:	4293      	cmp	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a290:	f04f 0000 	mov.w	r0, #0
3400a294:	f04f 0100 	mov.w	r1, #0
  if (UART_INSTANCE_LOWPOWER(huart))
3400a298:	d14a      	bne.n	3400a330 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a29a:	f7ff f965 	bl	34009568 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a29e:	2800      	cmp	r0, #0
3400a2a0:	d041      	beq.n	3400a326 <UART_SetConfig+0x1fe>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a2a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a2a4:	4a5b      	ldr	r2, [pc, #364]	@ (3400a414 <UART_SetConfig+0x2ec>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a2a6:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a2a8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a2ac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a2b0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a2b4:	4299      	cmp	r1, r3
3400a2b6:	d91b      	bls.n	3400a2f0 <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
3400a2b8:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
3400a2ba:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
3400a2be:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
3400a2c0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
3400a2c2:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
3400a2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3400a2c8:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400a2cc:	d004      	beq.n	3400a2d8 <UART_SetConfig+0x1b0>
3400a2ce:	f640 4157 	movw	r1, #3159	@ 0xc57
3400a2d2:	4848      	ldr	r0, [pc, #288]	@ (3400a3f4 <UART_SetConfig+0x2cc>)
3400a2d4:	f7f6 ff4a 	bl	3400116c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3400a2d8:	6a23      	ldr	r3, [r4, #32]
3400a2da:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400a2de:	f43f af4c 	beq.w	3400a17a <UART_SetConfig+0x52>
3400a2e2:	f640 4158 	movw	r1, #3160	@ 0xc58
3400a2e6:	e745      	b.n	3400a174 <UART_SetConfig+0x4c>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a2e8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
3400a2ec:	2100      	movs	r1, #0
3400a2ee:	e7d4      	b.n	3400a29a <UART_SetConfig+0x172>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a2f0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
3400a2f4:	d8e0      	bhi.n	3400a2b8 <UART_SetConfig+0x190>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a2f6:	2300      	movs	r3, #0
3400a2f8:	4619      	mov	r1, r3
3400a2fa:	f7f6 fa51 	bl	340007a0 <__aeabi_uldivmod>
3400a2fe:	4606      	mov	r6, r0
3400a300:	460f      	mov	r7, r1
3400a302:	ea56 270f 	orrs.w	r7, r6, pc, lsl #8
3400a306:	0868      	lsrs	r0, r5, #1
3400a308:	1830      	adds	r0, r6, r0
3400a30a:	462a      	mov	r2, r5
3400a30c:	f04f 0300 	mov.w	r3, #0
3400a310:	f147 0100 	adc.w	r1, r7, #0
3400a314:	f7f6 fa44 	bl	340007a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3400a318:	4b3f      	ldr	r3, [pc, #252]	@ (3400a418 <UART_SetConfig+0x2f0>)
3400a31a:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
3400a31e:	429a      	cmp	r2, r3
3400a320:	d8ca      	bhi.n	3400a2b8 <UART_SetConfig+0x190>
          huart->Instance->BRR = usartdiv;
3400a322:	6823      	ldr	r3, [r4, #0]
3400a324:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
3400a326:	2000      	movs	r0, #0
3400a328:	e7c7      	b.n	3400a2ba <UART_SetConfig+0x192>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a32a:	2000      	movs	r0, #0
3400a32c:	f44f 7180 	mov.w	r1, #256	@ 0x100
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3400a330:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
3400a334:	d142      	bne.n	3400a3bc <UART_SetConfig+0x294>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a336:	f7ff f917 	bl	34009568 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a33a:	2800      	cmp	r0, #0
3400a33c:	d0f3      	beq.n	3400a326 <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a33e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a340:	4b34      	ldr	r3, [pc, #208]	@ (3400a414 <UART_SetConfig+0x2ec>)
3400a342:	6862      	ldr	r2, [r4, #4]
3400a344:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a348:	fbb0 f0f3 	udiv	r0, r0, r3
3400a34c:	0853      	lsrs	r3, r2, #1
3400a34e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
3400a352:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a356:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a35a:	f1a3 0110 	sub.w	r1, r3, #16
3400a35e:	4291      	cmp	r1, r2
3400a360:	d8aa      	bhi.n	3400a2b8 <UART_SetConfig+0x190>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a362:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
3400a366:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a368:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3400a36a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
3400a36e:	4313      	orrs	r3, r2
3400a370:	60cb      	str	r3, [r1, #12]
3400a372:	e7d8      	b.n	3400a326 <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a374:	2000      	movs	r0, #0
3400a376:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400a37a:	e7d9      	b.n	3400a330 <UART_SetConfig+0x208>
3400a37c:	2000      	movs	r0, #0
3400a37e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3400a382:	e7d5      	b.n	3400a330 <UART_SetConfig+0x208>
3400a384:	2000      	movs	r0, #0
3400a386:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400a38a:	e7d1      	b.n	3400a330 <UART_SetConfig+0x208>
3400a38c:	2000      	movs	r0, #0
3400a38e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3400a392:	e7cd      	b.n	3400a330 <UART_SetConfig+0x208>
3400a394:	2000      	movs	r0, #0
3400a396:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
3400a39a:	e7c9      	b.n	3400a330 <UART_SetConfig+0x208>
3400a39c:	2000      	movs	r0, #0
3400a39e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
3400a3a2:	e7c5      	b.n	3400a330 <UART_SetConfig+0x208>
3400a3a4:	2000      	movs	r0, #0
3400a3a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3400a3aa:	e7c1      	b.n	3400a330 <UART_SetConfig+0x208>
3400a3ac:	2000      	movs	r0, #0
3400a3ae:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
3400a3b2:	e7bd      	b.n	3400a330 <UART_SetConfig+0x208>
3400a3b4:	2000      	movs	r0, #0
3400a3b6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3400a3ba:	e7b9      	b.n	3400a330 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a3bc:	f7ff f8d4 	bl	34009568 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3400a3c0:	2800      	cmp	r0, #0
3400a3c2:	d0b0      	beq.n	3400a326 <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a3c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a3c6:	4b13      	ldr	r3, [pc, #76]	@ (3400a414 <UART_SetConfig+0x2ec>)
3400a3c8:	6862      	ldr	r2, [r4, #4]
3400a3ca:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3400a3ce:	fbb0 f3f3 	udiv	r3, r0, r3
3400a3d2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
3400a3d6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a3da:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3400a3de:	f1a3 0110 	sub.w	r1, r3, #16
3400a3e2:	4291      	cmp	r1, r2
3400a3e4:	f63f af68 	bhi.w	3400a2b8 <UART_SetConfig+0x190>
        huart->Instance->BRR = (uint16_t)usartdiv;
3400a3e8:	6822      	ldr	r2, [r4, #0]
3400a3ea:	60d3      	str	r3, [r2, #12]
3400a3ec:	e79b      	b.n	3400a326 <UART_SetConfig+0x1fe>
3400a3ee:	bf00      	nop
3400a3f0:	00bebc1f 	.word	0x00bebc1f
3400a3f4:	34010a98 	.word	0x34010a98
3400a3f8:	56000c00 	.word	0x56000c00
3400a3fc:	cfff69f3 	.word	0xcfff69f3
3400a400:	52001000 	.word	0x52001000
3400a404:	50004400 	.word	0x50004400
3400a408:	52001400 	.word	0x52001400
3400a40c:	50007800 	.word	0x50007800
3400a410:	52001800 	.word	0x52001800
3400a414:	34010ace 	.word	0x34010ace
3400a418:	000ffcff 	.word	0x000ffcff

3400a41c <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a41c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
3400a41e:	b510      	push	{r4, lr}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a420:	2bff      	cmp	r3, #255	@ 0xff
{
3400a422:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3400a424:	d904      	bls.n	3400a430 <UART_AdvFeatureConfig+0x14>
3400a426:	f640 41e4 	movw	r1, #3300	@ 0xce4
3400a42a:	487e      	ldr	r0, [pc, #504]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a42c:	f7f6 fe9e 	bl	3400116c <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3400a430:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a432:	0718      	lsls	r0, r3, #28
3400a434:	d50f      	bpl.n	3400a456 <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3400a436:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400a438:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3400a43c:	d004      	beq.n	3400a448 <UART_AdvFeatureConfig+0x2c>
3400a43e:	f640 41e9 	movw	r1, #3305	@ 0xce9
3400a442:	4878      	ldr	r0, [pc, #480]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a444:	f7f6 fe92 	bl	3400116c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3400a448:	6822      	ldr	r2, [r4, #0]
3400a44a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400a44c:	6853      	ldr	r3, [r2, #4]
3400a44e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3400a452:	430b      	orrs	r3, r1
3400a454:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3400a456:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a458:	07d9      	lsls	r1, r3, #31
3400a45a:	d50f      	bpl.n	3400a47c <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3400a45c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a45e:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
3400a462:	d004      	beq.n	3400a46e <UART_AdvFeatureConfig+0x52>
3400a464:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
3400a468:	486e      	ldr	r0, [pc, #440]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a46a:	f7f6 fe7f 	bl	3400116c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3400a46e:	6822      	ldr	r2, [r4, #0]
3400a470:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400a472:	6853      	ldr	r3, [r2, #4]
3400a474:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3400a478:	430b      	orrs	r3, r1
3400a47a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3400a47c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a47e:	079a      	lsls	r2, r3, #30
3400a480:	d50f      	bpl.n	3400a4a2 <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3400a482:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400a484:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
3400a488:	d004      	beq.n	3400a494 <UART_AdvFeatureConfig+0x78>
3400a48a:	f640 41f7 	movw	r1, #3319	@ 0xcf7
3400a48e:	4865      	ldr	r0, [pc, #404]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a490:	f7f6 fe6c 	bl	3400116c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3400a494:	6822      	ldr	r2, [r4, #0]
3400a496:	6b21      	ldr	r1, [r4, #48]	@ 0x30
3400a498:	6853      	ldr	r3, [r2, #4]
3400a49a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400a49e:	430b      	orrs	r3, r1
3400a4a0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3400a4a2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a4a4:	075b      	lsls	r3, r3, #29
3400a4a6:	d50f      	bpl.n	3400a4c8 <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3400a4a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400a4aa:	f433 2380 	bics.w	r3, r3, #262144	@ 0x40000
3400a4ae:	d004      	beq.n	3400a4ba <UART_AdvFeatureConfig+0x9e>
3400a4b0:	f640 41fe 	movw	r1, #3326	@ 0xcfe
3400a4b4:	485b      	ldr	r0, [pc, #364]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a4b6:	f7f6 fe59 	bl	3400116c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3400a4ba:	6822      	ldr	r2, [r4, #0]
3400a4bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400a4be:	6853      	ldr	r3, [r2, #4]
3400a4c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
3400a4c4:	430b      	orrs	r3, r1
3400a4c6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3400a4c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a4ca:	06d8      	lsls	r0, r3, #27
3400a4cc:	d50f      	bpl.n	3400a4ee <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3400a4ce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a4d0:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3400a4d4:	d004      	beq.n	3400a4e0 <UART_AdvFeatureConfig+0xc4>
3400a4d6:	f640 5105 	movw	r1, #3333	@ 0xd05
3400a4da:	4852      	ldr	r0, [pc, #328]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a4dc:	f7f6 fe46 	bl	3400116c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3400a4e0:	6822      	ldr	r2, [r4, #0]
3400a4e2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400a4e4:	6893      	ldr	r3, [r2, #8]
3400a4e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400a4ea:	430b      	orrs	r3, r1
3400a4ec:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3400a4ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a4f0:	0699      	lsls	r1, r3, #26
3400a4f2:	d50f      	bpl.n	3400a514 <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3400a4f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400a4f6:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3400a4fa:	d004      	beq.n	3400a506 <UART_AdvFeatureConfig+0xea>
3400a4fc:	f640 510d 	movw	r1, #3341	@ 0xd0d
3400a500:	4848      	ldr	r0, [pc, #288]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a502:	f7f6 fe33 	bl	3400116c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3400a506:	6822      	ldr	r2, [r4, #0]
3400a508:	6c21      	ldr	r1, [r4, #64]	@ 0x40
3400a50a:	6893      	ldr	r3, [r2, #8]
3400a50c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
3400a510:	430b      	orrs	r3, r1
3400a512:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3400a514:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a516:	065a      	lsls	r2, r3, #25
3400a518:	d56f      	bpl.n	3400a5fa <UART_AdvFeatureConfig+0x1de>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3400a51a:	6823      	ldr	r3, [r4, #0]
3400a51c:	4a42      	ldr	r2, [pc, #264]	@ (3400a628 <UART_AdvFeatureConfig+0x20c>)
3400a51e:	4293      	cmp	r3, r2
3400a520:	d047      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a522:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a526:	4293      	cmp	r3, r2
3400a528:	d043      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a52a:	4a40      	ldr	r2, [pc, #256]	@ (3400a62c <UART_AdvFeatureConfig+0x210>)
3400a52c:	4293      	cmp	r3, r2
3400a52e:	d040      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a530:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a534:	4293      	cmp	r3, r2
3400a536:	d03c      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a538:	4a3d      	ldr	r2, [pc, #244]	@ (3400a630 <UART_AdvFeatureConfig+0x214>)
3400a53a:	4293      	cmp	r3, r2
3400a53c:	d039      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a53e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a542:	4293      	cmp	r3, r2
3400a544:	d035      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a546:	4a3b      	ldr	r2, [pc, #236]	@ (3400a634 <UART_AdvFeatureConfig+0x218>)
3400a548:	4293      	cmp	r3, r2
3400a54a:	d032      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a54c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a550:	4293      	cmp	r3, r2
3400a552:	d02e      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a554:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a558:	d02b      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a55a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a55e:	4293      	cmp	r3, r2
3400a560:	d027      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a562:	4a35      	ldr	r2, [pc, #212]	@ (3400a638 <UART_AdvFeatureConfig+0x21c>)
3400a564:	4293      	cmp	r3, r2
3400a566:	d024      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a568:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a56c:	4293      	cmp	r3, r2
3400a56e:	d020      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a570:	4a32      	ldr	r2, [pc, #200]	@ (3400a63c <UART_AdvFeatureConfig+0x220>)
3400a572:	4293      	cmp	r3, r2
3400a574:	d01d      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a576:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a57a:	4293      	cmp	r3, r2
3400a57c:	d019      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a57e:	4a30      	ldr	r2, [pc, #192]	@ (3400a640 <UART_AdvFeatureConfig+0x224>)
3400a580:	4293      	cmp	r3, r2
3400a582:	d016      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a584:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a588:	4293      	cmp	r3, r2
3400a58a:	d012      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a58c:	4a2d      	ldr	r2, [pc, #180]	@ (3400a644 <UART_AdvFeatureConfig+0x228>)
3400a58e:	4293      	cmp	r3, r2
3400a590:	d00f      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a592:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a596:	4293      	cmp	r3, r2
3400a598:	d00b      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a59a:	4a2b      	ldr	r2, [pc, #172]	@ (3400a648 <UART_AdvFeatureConfig+0x22c>)
3400a59c:	4293      	cmp	r3, r2
3400a59e:	d008      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a5a0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a5a4:	4293      	cmp	r3, r2
3400a5a6:	d004      	beq.n	3400a5b2 <UART_AdvFeatureConfig+0x196>
3400a5a8:	f640 5115 	movw	r1, #3349	@ 0xd15
3400a5ac:	481d      	ldr	r0, [pc, #116]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a5ae:	f7f6 fddd 	bl	3400116c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3400a5b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400a5b4:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
3400a5b8:	d004      	beq.n	3400a5c4 <UART_AdvFeatureConfig+0x1a8>
3400a5ba:	f640 5116 	movw	r1, #3350	@ 0xd16
3400a5be:	4819      	ldr	r0, [pc, #100]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a5c0:	f7f6 fdd4 	bl	3400116c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a5c4:	6821      	ldr	r1, [r4, #0]
3400a5c6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
3400a5c8:	684b      	ldr	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a5ca:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a5ce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3400a5d2:	ea43 0302 	orr.w	r3, r3, r2
3400a5d6:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a5d8:	d10f      	bne.n	3400a5fa <UART_AdvFeatureConfig+0x1de>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3400a5da:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400a5dc:	f433 03c0 	bics.w	r3, r3, #6291456	@ 0x600000
3400a5e0:	d004      	beq.n	3400a5ec <UART_AdvFeatureConfig+0x1d0>
3400a5e2:	f640 511b 	movw	r1, #3355	@ 0xd1b
3400a5e6:	480f      	ldr	r0, [pc, #60]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a5e8:	f7f6 fdc0 	bl	3400116c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3400a5ec:	6822      	ldr	r2, [r4, #0]
3400a5ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
3400a5f0:	6853      	ldr	r3, [r2, #4]
3400a5f2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
3400a5f6:	430b      	orrs	r3, r1
3400a5f8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3400a5fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a5fc:	061b      	lsls	r3, r3, #24
3400a5fe:	d50f      	bpl.n	3400a620 <UART_AdvFeatureConfig+0x204>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3400a600:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400a602:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400a606:	d004      	beq.n	3400a612 <UART_AdvFeatureConfig+0x1f6>
3400a608:	f640 5123 	movw	r1, #3363	@ 0xd23
3400a60c:	4805      	ldr	r0, [pc, #20]	@ (3400a624 <UART_AdvFeatureConfig+0x208>)
3400a60e:	f7f6 fdad 	bl	3400116c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3400a612:	6822      	ldr	r2, [r4, #0]
3400a614:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400a616:	6853      	ldr	r3, [r2, #4]
3400a618:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
3400a61c:	430b      	orrs	r3, r1
3400a61e:	6053      	str	r3, [r2, #4]
}
3400a620:	bd10      	pop	{r4, pc}
3400a622:	bf00      	nop
3400a624:	34010a98 	.word	0x34010a98
3400a628:	52001000 	.word	0x52001000
3400a62c:	50004400 	.word	0x50004400
3400a630:	50004800 	.word	0x50004800
3400a634:	50004c00 	.word	0x50004c00
3400a638:	52001400 	.word	0x52001400
3400a63c:	50007800 	.word	0x50007800
3400a640:	50007c00 	.word	0x50007c00
3400a644:	52001800 	.word	0x52001800
3400a648:	52001c00 	.word	0x52001c00

3400a64c <UART_WaitOnFlagUntilTimeout>:
{
3400a64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400a650:	4604      	mov	r4, r0
3400a652:	460d      	mov	r5, r1
3400a654:	4617      	mov	r7, r2
3400a656:	4698      	mov	r8, r3
3400a658:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3400a65c:	6822      	ldr	r2, [r4, #0]
3400a65e:	69d3      	ldr	r3, [r2, #28]
3400a660:	ea35 0303 	bics.w	r3, r5, r3
3400a664:	bf0c      	ite	eq
3400a666:	2301      	moveq	r3, #1
3400a668:	2300      	movne	r3, #0
3400a66a:	42bb      	cmp	r3, r7
3400a66c:	d001      	beq.n	3400a672 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
3400a66e:	2000      	movs	r0, #0
3400a670:	e022      	b.n	3400a6b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
3400a672:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
3400a676:	d0f2      	beq.n	3400a65e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400a678:	f7f7 fe30 	bl	340022dc <HAL_GetTick>
3400a67c:	eba0 0008 	sub.w	r0, r0, r8
3400a680:	4548      	cmp	r0, r9
3400a682:	d829      	bhi.n	3400a6d8 <UART_WaitOnFlagUntilTimeout+0x8c>
3400a684:	f1b9 0f00 	cmp.w	r9, #0
3400a688:	d026      	beq.n	3400a6d8 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3400a68a:	6821      	ldr	r1, [r4, #0]
3400a68c:	680b      	ldr	r3, [r1, #0]
3400a68e:	075a      	lsls	r2, r3, #29
3400a690:	d5e4      	bpl.n	3400a65c <UART_WaitOnFlagUntilTimeout+0x10>
3400a692:	2d80      	cmp	r5, #128	@ 0x80
3400a694:	d0e2      	beq.n	3400a65c <UART_WaitOnFlagUntilTimeout+0x10>
3400a696:	2d40      	cmp	r5, #64	@ 0x40
3400a698:	d0e0      	beq.n	3400a65c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3400a69a:	69ce      	ldr	r6, [r1, #28]
3400a69c:	f016 0608 	ands.w	r6, r6, #8
3400a6a0:	d00c      	beq.n	3400a6bc <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a6a2:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
3400a6a4:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a6a6:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
3400a6a8:	f7ff fd10 	bl	3400a0cc <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
3400a6ac:	2300      	movs	r3, #0
          return HAL_ERROR;
3400a6ae:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
3400a6b0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
3400a6b4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400a6b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3400a6bc:	69cb      	ldr	r3, [r1, #28]
3400a6be:	051b      	lsls	r3, r3, #20
3400a6c0:	d5cc      	bpl.n	3400a65c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a6c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
3400a6c6:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a6c8:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
3400a6ca:	f7ff fcff 	bl	3400a0cc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a6ce:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
3400a6d0:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a6d4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
3400a6d8:	2003      	movs	r0, #3
3400a6da:	e7ed      	b.n	3400a6b8 <UART_WaitOnFlagUntilTimeout+0x6c>

3400a6dc <HAL_UART_Transmit>:
{
3400a6dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400a6e0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
3400a6e2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
3400a6e6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
3400a6e8:	2b20      	cmp	r3, #32
{
3400a6ea:	460d      	mov	r5, r1
3400a6ec:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
3400a6ee:	d148      	bne.n	3400a782 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
3400a6f0:	2900      	cmp	r1, #0
3400a6f2:	d048      	beq.n	3400a786 <HAL_UART_Transmit+0xaa>
3400a6f4:	2a00      	cmp	r2, #0
3400a6f6:	d046      	beq.n	3400a786 <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400a6f8:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a6fa:	f04f 0900 	mov.w	r9, #0
3400a6fe:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3400a702:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
3400a706:	f7f7 fde9 	bl	340022dc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a70a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
3400a70c:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
3400a714:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
3400a718:	4680      	mov	r8, r0
      pdata16bits = NULL;
3400a71a:	464e      	mov	r6, r9
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a71c:	d104      	bne.n	3400a728 <HAL_UART_Transmit+0x4c>
3400a71e:	6923      	ldr	r3, [r4, #16]
      pdata8bits  = NULL;
3400a720:	454b      	cmp	r3, r9
3400a722:	bf04      	itt	eq
3400a724:	462e      	moveq	r6, r5
3400a726:	461d      	moveq	r5, r3
    while (huart->TxXferCount > 0U)
3400a728:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a72c:	4643      	mov	r3, r8
    while (huart->TxXferCount > 0U)
3400a72e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a730:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
3400a732:	b942      	cbnz	r2, 3400a746 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3400a734:	2140      	movs	r1, #64	@ 0x40
3400a736:	4620      	mov	r0, r4
3400a738:	f7ff ff88 	bl	3400a64c <UART_WaitOnFlagUntilTimeout>
3400a73c:	2320      	movs	r3, #32
3400a73e:	b948      	cbnz	r0, 3400a754 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
3400a740:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
3400a744:	e009      	b.n	3400a75a <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a746:	2200      	movs	r2, #0
3400a748:	2180      	movs	r1, #128	@ 0x80
3400a74a:	4620      	mov	r0, r4
3400a74c:	f7ff ff7e 	bl	3400a64c <UART_WaitOnFlagUntilTimeout>
3400a750:	b130      	cbz	r0, 3400a760 <HAL_UART_Transmit+0x84>
        huart->gState = HAL_UART_STATE_READY;
3400a752:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
3400a754:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
3400a756:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
3400a75a:	b003      	add	sp, #12
3400a75c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a760:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
3400a762:	b95d      	cbnz	r5, 3400a77c <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a764:	f836 3b02 	ldrh.w	r3, [r6], #2
3400a768:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a76c:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
3400a76e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
3400a772:	3a01      	subs	r2, #1
3400a774:	b292      	uxth	r2, r2
3400a776:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
3400a77a:	e7d5      	b.n	3400a728 <HAL_UART_Transmit+0x4c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a77c:	f815 3b01 	ldrb.w	r3, [r5], #1
3400a780:	e7f4      	b.n	3400a76c <HAL_UART_Transmit+0x90>
    return HAL_BUSY;
3400a782:	2002      	movs	r0, #2
3400a784:	e7e9      	b.n	3400a75a <HAL_UART_Transmit+0x7e>
      return  HAL_ERROR;
3400a786:	2001      	movs	r0, #1
3400a788:	e7e7      	b.n	3400a75a <HAL_UART_Transmit+0x7e>

3400a78a <UART_CheckIdleState>:
{
3400a78a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a78c:	2600      	movs	r6, #0
{
3400a78e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a790:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
3400a794:	f7f7 fda2 	bl	340022dc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a798:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
3400a79a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a79c:	681b      	ldr	r3, [r3, #0]
3400a79e:	071a      	lsls	r2, r3, #28
3400a7a0:	d51c      	bpl.n	3400a7dc <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a7a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a7a6:	4632      	mov	r2, r6
3400a7a8:	9300      	str	r3, [sp, #0]
3400a7aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400a7ae:	4603      	mov	r3, r0
3400a7b0:	4620      	mov	r0, r4
3400a7b2:	f7ff ff4b 	bl	3400a64c <UART_WaitOnFlagUntilTimeout>
3400a7b6:	b188      	cbz	r0, 3400a7dc <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3400a7b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a7ba:	e852 3f00 	ldrex	r3, [r2]
3400a7be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a7c2:	e842 3100 	strex	r1, r3, [r2]
3400a7c6:	2900      	cmp	r1, #0
3400a7c8:	d1f6      	bne.n	3400a7b8 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
3400a7ca:	2320      	movs	r3, #32
3400a7cc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
3400a7d0:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
3400a7d2:	2300      	movs	r3, #0
3400a7d4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3400a7d8:	b002      	add	sp, #8
3400a7da:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3400a7dc:	6823      	ldr	r3, [r4, #0]
3400a7de:	681b      	ldr	r3, [r3, #0]
3400a7e0:	075b      	lsls	r3, r3, #29
3400a7e2:	d524      	bpl.n	3400a82e <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a7e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a7e8:	2200      	movs	r2, #0
3400a7ea:	9300      	str	r3, [sp, #0]
3400a7ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400a7f0:	462b      	mov	r3, r5
3400a7f2:	4620      	mov	r0, r4
3400a7f4:	f7ff ff2a 	bl	3400a64c <UART_WaitOnFlagUntilTimeout>
3400a7f8:	b1c8      	cbz	r0, 3400a82e <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a7fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a7fc:	e852 3f00 	ldrex	r3, [r2]
3400a800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a804:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3400a808:	6822      	ldr	r2, [r4, #0]
3400a80a:	2900      	cmp	r1, #0
3400a80c:	d1f5      	bne.n	3400a7fa <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a80e:	f102 0308 	add.w	r3, r2, #8
3400a812:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3400a816:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a81a:	f102 0008 	add.w	r0, r2, #8
3400a81e:	e840 3100 	strex	r1, r3, [r0]
3400a822:	2900      	cmp	r1, #0
3400a824:	d1f3      	bne.n	3400a80e <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
3400a826:	2320      	movs	r3, #32
3400a828:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
3400a82c:	e7d0      	b.n	3400a7d0 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
3400a82e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a830:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
3400a832:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3400a836:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a83a:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3400a83c:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
3400a83e:	e7c8      	b.n	3400a7d2 <UART_CheckIdleState+0x48>

3400a840 <HAL_UART_Init>:
{
3400a840:	b510      	push	{r4, lr}
  if (huart == NULL)
3400a842:	4604      	mov	r4, r0
3400a844:	2800      	cmp	r0, #0
3400a846:	f000 80d0 	beq.w	3400a9ea <HAL_UART_Init+0x1aa>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400a84a:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400a84c:	6803      	ldr	r3, [r0, #0]
3400a84e:	4a68      	ldr	r2, [pc, #416]	@ (3400a9f0 <HAL_UART_Init+0x1b0>)
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3400a850:	2900      	cmp	r1, #0
3400a852:	d07c      	beq.n	3400a94e <HAL_UART_Init+0x10e>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3400a854:	4293      	cmp	r3, r2
3400a856:	d04e      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a858:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a85c:	4293      	cmp	r3, r2
3400a85e:	d04a      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a860:	4a64      	ldr	r2, [pc, #400]	@ (3400a9f4 <HAL_UART_Init+0x1b4>)
3400a862:	4293      	cmp	r3, r2
3400a864:	d047      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a866:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a86a:	4293      	cmp	r3, r2
3400a86c:	d043      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a86e:	4a62      	ldr	r2, [pc, #392]	@ (3400a9f8 <HAL_UART_Init+0x1b8>)
3400a870:	4293      	cmp	r3, r2
3400a872:	d040      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a874:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a878:	4293      	cmp	r3, r2
3400a87a:	d03c      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a87c:	4a5f      	ldr	r2, [pc, #380]	@ (3400a9fc <HAL_UART_Init+0x1bc>)
3400a87e:	4293      	cmp	r3, r2
3400a880:	d039      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a882:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a886:	4293      	cmp	r3, r2
3400a888:	d035      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a88a:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a88e:	d032      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a890:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a894:	4293      	cmp	r3, r2
3400a896:	d02e      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a898:	4a59      	ldr	r2, [pc, #356]	@ (3400aa00 <HAL_UART_Init+0x1c0>)
3400a89a:	4293      	cmp	r3, r2
3400a89c:	d02b      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a89e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8a2:	4293      	cmp	r3, r2
3400a8a4:	d027      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8a6:	4a57      	ldr	r2, [pc, #348]	@ (3400aa04 <HAL_UART_Init+0x1c4>)
3400a8a8:	4293      	cmp	r3, r2
3400a8aa:	d024      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8ac:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8b0:	4293      	cmp	r3, r2
3400a8b2:	d020      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8b4:	4a54      	ldr	r2, [pc, #336]	@ (3400aa08 <HAL_UART_Init+0x1c8>)
3400a8b6:	4293      	cmp	r3, r2
3400a8b8:	d01d      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8ba:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8be:	4293      	cmp	r3, r2
3400a8c0:	d019      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8c2:	4a52      	ldr	r2, [pc, #328]	@ (3400aa0c <HAL_UART_Init+0x1cc>)
3400a8c4:	4293      	cmp	r3, r2
3400a8c6:	d016      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8c8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8cc:	4293      	cmp	r3, r2
3400a8ce:	d012      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8d0:	4a4f      	ldr	r2, [pc, #316]	@ (3400aa10 <HAL_UART_Init+0x1d0>)
3400a8d2:	4293      	cmp	r3, r2
3400a8d4:	d00f      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8d6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8da:	4293      	cmp	r3, r2
3400a8dc:	d00b      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8de:	4a4d      	ldr	r2, [pc, #308]	@ (3400aa14 <HAL_UART_Init+0x1d4>)
3400a8e0:	4293      	cmp	r3, r2
3400a8e2:	d008      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8e4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a8e8:	4293      	cmp	r3, r2
3400a8ea:	d004      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a8ec:	f240 113f 	movw	r1, #319	@ 0x13f
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400a8f0:	4849      	ldr	r0, [pc, #292]	@ (3400aa18 <HAL_UART_Init+0x1d8>)
3400a8f2:	f7f6 fc3b 	bl	3400116c <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
3400a8f6:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
3400a8fa:	b923      	cbnz	r3, 3400a906 <HAL_UART_Init+0xc6>
    HAL_UART_MspInit(huart);
3400a8fc:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
3400a8fe:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
    HAL_UART_MspInit(huart);
3400a902:	f7ff fc0f 	bl	3400a124 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
3400a906:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
3400a908:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
3400a90a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
3400a90e:	6813      	ldr	r3, [r2, #0]
3400a910:	f023 0301 	bic.w	r3, r3, #1
3400a914:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3400a916:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a918:	b113      	cbz	r3, 3400a920 <HAL_UART_Init+0xe0>
    UART_AdvFeatureConfig(huart);
3400a91a:	4620      	mov	r0, r4
3400a91c:	f7ff fd7e 	bl	3400a41c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
3400a920:	4620      	mov	r0, r4
3400a922:	f7ff fc01 	bl	3400a128 <UART_SetConfig>
3400a926:	2801      	cmp	r0, #1
3400a928:	d05f      	beq.n	3400a9ea <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400a92a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
3400a92c:	4620      	mov	r0, r4
}
3400a92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3400a932:	685a      	ldr	r2, [r3, #4]
3400a934:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3400a938:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3400a93a:	689a      	ldr	r2, [r3, #8]
3400a93c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3400a940:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
3400a942:	681a      	ldr	r2, [r3, #0]
3400a944:	f042 0201 	orr.w	r2, r2, #1
3400a948:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
3400a94a:	f7ff bf1e 	b.w	3400a78a <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3400a94e:	4293      	cmp	r3, r2
3400a950:	d0d1      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a952:	4a32      	ldr	r2, [pc, #200]	@ (3400aa1c <HAL_UART_Init+0x1dc>)
3400a954:	4293      	cmp	r3, r2
3400a956:	d0ce      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a958:	4a26      	ldr	r2, [pc, #152]	@ (3400a9f4 <HAL_UART_Init+0x1b4>)
3400a95a:	4293      	cmp	r3, r2
3400a95c:	d0cb      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a95e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a962:	4293      	cmp	r3, r2
3400a964:	d0c7      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a966:	4a24      	ldr	r2, [pc, #144]	@ (3400a9f8 <HAL_UART_Init+0x1b8>)
3400a968:	4293      	cmp	r3, r2
3400a96a:	d0c4      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a96c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a970:	4293      	cmp	r3, r2
3400a972:	d0c0      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a974:	4a21      	ldr	r2, [pc, #132]	@ (3400a9fc <HAL_UART_Init+0x1bc>)
3400a976:	4293      	cmp	r3, r2
3400a978:	d0bd      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a97a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a97e:	4293      	cmp	r3, r2
3400a980:	d0b9      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a982:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a986:	d0b6      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a988:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400a98c:	4293      	cmp	r3, r2
3400a98e:	d0b2      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a990:	4a1b      	ldr	r2, [pc, #108]	@ (3400aa00 <HAL_UART_Init+0x1c0>)
3400a992:	4293      	cmp	r3, r2
3400a994:	d0af      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a996:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a99a:	4293      	cmp	r3, r2
3400a99c:	d0ab      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a99e:	4a19      	ldr	r2, [pc, #100]	@ (3400aa04 <HAL_UART_Init+0x1c4>)
3400a9a0:	4293      	cmp	r3, r2
3400a9a2:	d0a8      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a9a4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9a8:	4293      	cmp	r3, r2
3400a9aa:	d0a4      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a9ac:	4a16      	ldr	r2, [pc, #88]	@ (3400aa08 <HAL_UART_Init+0x1c8>)
3400a9ae:	4293      	cmp	r3, r2
3400a9b0:	d0a1      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a9b2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9b6:	4293      	cmp	r3, r2
3400a9b8:	d09d      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a9ba:	4a14      	ldr	r2, [pc, #80]	@ (3400aa0c <HAL_UART_Init+0x1cc>)
3400a9bc:	4293      	cmp	r3, r2
3400a9be:	d09a      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a9c0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9c4:	4293      	cmp	r3, r2
3400a9c6:	d096      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a9c8:	4a11      	ldr	r2, [pc, #68]	@ (3400aa10 <HAL_UART_Init+0x1d0>)
3400a9ca:	4293      	cmp	r3, r2
3400a9cc:	d093      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a9ce:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9d2:	4293      	cmp	r3, r2
3400a9d4:	d08f      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a9d6:	4a0f      	ldr	r2, [pc, #60]	@ (3400aa14 <HAL_UART_Init+0x1d4>)
3400a9d8:	4293      	cmp	r3, r2
3400a9da:	d08c      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a9dc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400a9e0:	4293      	cmp	r3, r2
3400a9e2:	d088      	beq.n	3400a8f6 <HAL_UART_Init+0xb6>
3400a9e4:	f44f 71a2 	mov.w	r1, #324	@ 0x144
3400a9e8:	e782      	b.n	3400a8f0 <HAL_UART_Init+0xb0>
}
3400a9ea:	2001      	movs	r0, #1
3400a9ec:	bd10      	pop	{r4, pc}
3400a9ee:	bf00      	nop
3400a9f0:	52001000 	.word	0x52001000
3400a9f4:	50004400 	.word	0x50004400
3400a9f8:	50004800 	.word	0x50004800
3400a9fc:	50004c00 	.word	0x50004c00
3400aa00:	52001400 	.word	0x52001400
3400aa04:	50007800 	.word	0x50007800
3400aa08:	50007c00 	.word	0x50007c00
3400aa0c:	52001800 	.word	0x52001800
3400aa10:	52001c00 	.word	0x52001c00
3400aa14:	56000c00 	.word	0x56000c00
3400aa18:	34010a98 	.word	0x34010a98
3400aa1c:	42001000 	.word	0x42001000

3400aa20 <XSPI_ConfigCmd>:
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400aa20:	6802      	ldr	r2, [r0, #0]
{
3400aa22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400aa26:	6813      	ldr	r3, [r2, #0]
{
3400aa28:	4606      	mov	r6, r0
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3400aa2a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400aa2e:	6013      	str	r3, [r2, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400aa30:	6883      	ldr	r3, [r0, #8]
{
3400aa32:	460c      	mov	r4, r1
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400aa34:	b97b      	cbnz	r3, 3400aa56 <XSPI_ConfigCmd+0x36>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400aa36:	684b      	ldr	r3, [r1, #4]
3400aa38:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400aa3c:	d004      	beq.n	3400aa48 <XSPI_ConfigCmd+0x28>
3400aa3e:	f640 41a4 	movw	r1, #3236	@ 0xca4
3400aa42:	4876      	ldr	r0, [pc, #472]	@ (3400ac1c <XSPI_ConfigCmd+0x1fc>)
3400aa44:	f7f6 fb92 	bl	3400116c <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3400aa48:	6832      	ldr	r2, [r6, #0]
3400aa4a:	6861      	ldr	r1, [r4, #4]
3400aa4c:	6813      	ldr	r3, [r2, #0]
3400aa4e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
3400aa52:	430b      	orrs	r3, r1
3400aa54:	6013      	str	r3, [r2, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400aa56:	6823      	ldr	r3, [r4, #0]
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3400aa58:	6831      	ldr	r1, [r6, #0]
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400aa5a:	2b02      	cmp	r3, #2
3400aa5c:	d158      	bne.n	3400ab10 <XSPI_ConfigCmd+0xf0>
    ccr_reg = &(hxspi->Instance->WCCR);
3400aa5e:	f501 72c0 	add.w	r2, r1, #384	@ 0x180
    tcr_reg = &(hxspi->Instance->WTCR);
3400aa62:	f501 70c4 	add.w	r0, r1, #392	@ 0x188
    ir_reg  = &(hxspi->Instance->WIR);
3400aa66:	f501 75c8 	add.w	r5, r1, #400	@ 0x190
    abr_reg = &(hxspi->Instance->WABR);
3400aa6a:	f501 73d0 	add.w	r3, r1, #416	@ 0x1a0
    ir_reg  = &(hxspi->Instance->IR);
    abr_reg = &(hxspi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3400aa6e:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
3400aa70:	6017      	str	r7, [r2, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400aa72:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
3400aa74:	b167      	cbz	r7, 3400aa90 <XSPI_ConfigCmd+0x70>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3400aa76:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3400aa78:	601f      	str	r7, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3400aa7a:	6b67      	ldr	r7, [r4, #52]	@ 0x34
3400aa7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400aa7e:	f8d2 c000 	ldr.w	ip, [r2]
3400aa82:	433b      	orrs	r3, r7
3400aa84:	6b27      	ldr	r7, [r4, #48]	@ 0x30
3400aa86:	433b      	orrs	r3, r7
3400aa88:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
3400aa8c:	433b      	orrs	r3, r7
3400aa8e:	6013      	str	r3, [r2, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3400aa90:	6803      	ldr	r3, [r0, #0]
3400aa92:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3400aa94:	f023 031f 	bic.w	r3, r3, #31
3400aa98:	433b      	orrs	r3, r7
3400aa9a:	6003      	str	r3, [r0, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400aa9c:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
3400aaa0:	f1be 0f00 	cmp.w	lr, #0
3400aaa4:	d00e      	beq.n	3400aac4 <XSPI_ConfigCmd+0xa4>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400aaa6:	6823      	ldr	r3, [r4, #0]
3400aaa8:	b913      	cbnz	r3, 3400aab0 <XSPI_ConfigCmd+0x90>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3400aaaa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400aaac:	3b01      	subs	r3, #1
3400aaae:	640b      	str	r3, [r1, #64]	@ 0x40
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3400aab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400aab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400aab6:	d13f      	bne.n	3400ab38 <XSPI_ConfigCmd+0x118>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400aab8:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400aabc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400aac0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400aac4:	68e3      	ldr	r3, [r4, #12]
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400aac6:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400aaca:	2b00      	cmp	r3, #0
3400aacc:	f000 8083 	beq.w	3400abd6 <XSPI_ConfigCmd+0x1b6>
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400aad0:	e9d4 c804 	ldrd	ip, r8, [r4, #16]
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400aad4:	f1b9 0f00 	cmp.w	r9, #0
3400aad8:	d053      	beq.n	3400ab82 <XSPI_ConfigCmd+0x162>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400aada:	e9d4 0708 	ldrd	r0, r7, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400aade:	f1be 0f00 	cmp.w	lr, #0
3400aae2:	d032      	beq.n	3400ab4a <XSPI_ConfigCmd+0x12a>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400aae4:	ea4e 0303 	orr.w	r3, lr, r3
3400aae8:	ea43 0309 	orr.w	r3, r3, r9
3400aaec:	ea43 0308 	orr.w	r3, r3, r8
3400aaf0:	ea43 030c 	orr.w	r3, r3, ip
3400aaf4:	433b      	orrs	r3, r7
3400aaf6:	4303      	orrs	r3, r0
3400aaf8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400aafa:	6816      	ldr	r6, [r2, #0]
3400aafc:	4303      	orrs	r3, r0
3400aafe:	4848      	ldr	r0, [pc, #288]	@ (3400ac20 <XSPI_ConfigCmd+0x200>)
3400ab00:	4030      	ands	r0, r6
3400ab02:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400ab04:	6013      	str	r3, [r2, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3400ab06:	68a3      	ldr	r3, [r4, #8]
3400ab08:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3400ab0a:	69a3      	ldr	r3, [r4, #24]
3400ab0c:	648b      	str	r3, [r1, #72]	@ 0x48
3400ab0e:	e04c      	b.n	3400abaa <XSPI_ConfigCmd+0x18a>
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3400ab10:	2b03      	cmp	r3, #3
    ccr_reg = &(hxspi->Instance->WPCCR);
3400ab12:	bf01      	itttt	eq
3400ab14:	f501 72a0 	addeq.w	r2, r1, #320	@ 0x140
    tcr_reg = &(hxspi->Instance->WPTCR);
3400ab18:	f501 70a4 	addeq.w	r0, r1, #328	@ 0x148
    ir_reg  = &(hxspi->Instance->WPIR);
3400ab1c:	f501 75a8 	addeq.w	r5, r1, #336	@ 0x150
    abr_reg = &(hxspi->Instance->WPABR);
3400ab20:	f501 73b0 	addeq.w	r3, r1, #352	@ 0x160
    ccr_reg = &(hxspi->Instance->CCR);
3400ab24:	bf1f      	itttt	ne
3400ab26:	f501 7280 	addne.w	r2, r1, #256	@ 0x100
    tcr_reg = &(hxspi->Instance->TCR);
3400ab2a:	f501 7084 	addne.w	r0, r1, #264	@ 0x108
    ir_reg  = &(hxspi->Instance->IR);
3400ab2e:	f501 7588 	addne.w	r5, r1, #272	@ 0x110
    abr_reg = &(hxspi->Instance->ABR);
3400ab32:	f501 7390 	addne.w	r3, r1, #288	@ 0x120
3400ab36:	e79a      	b.n	3400aa6e <XSPI_ConfigCmd+0x4e>
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3400ab38:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3400ab3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400ab3e:	d1c1      	bne.n	3400aac4 <XSPI_ConfigCmd+0xa4>
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3400ab40:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3400ab44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3400ab48:	e7ba      	b.n	3400aac0 <XSPI_ConfigCmd+0xa0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400ab4a:	ea43 0309 	orr.w	r3, r3, r9
3400ab4e:	f8d2 e000 	ldr.w	lr, [r2]
3400ab52:	ea43 0308 	orr.w	r3, r3, r8
3400ab56:	ea43 030c 	orr.w	r3, r3, ip
3400ab5a:	433b      	orrs	r3, r7
3400ab5c:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
3400ab60:	4303      	orrs	r3, r0
3400ab62:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
3400ab66:	ea43 030e 	orr.w	r3, r3, lr
3400ab6a:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400ab6c:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400ab6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ab72:	d1c8      	bne.n	3400ab06 <XSPI_ConfigCmd+0xe6>
3400ab74:	6963      	ldr	r3, [r4, #20]
3400ab76:	2b08      	cmp	r3, #8
3400ab78:	d1c5      	bne.n	3400ab06 <XSPI_ConfigCmd+0xe6>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400ab7a:	6813      	ldr	r3, [r2, #0]
3400ab7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400ab80:	e7c0      	b.n	3400ab04 <XSPI_ConfigCmd+0xe4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400ab82:	6811      	ldr	r1, [r2, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400ab84:	f1be 0f00 	cmp.w	lr, #0
3400ab88:	d012      	beq.n	3400abb0 <XSPI_ConfigCmd+0x190>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400ab8a:	ea4e 0303 	orr.w	r3, lr, r3
3400ab8e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400ab90:	ea43 0308 	orr.w	r3, r3, r8
3400ab94:	ea43 030c 	orr.w	r3, r3, ip
3400ab98:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
3400ab9c:	4303      	orrs	r3, r0
3400ab9e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400aba2:	430b      	orrs	r3, r1
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400aba4:	6013      	str	r3, [r2, #0]
      *ir_reg = pCmd->Instruction;
3400aba6:	68a3      	ldr	r3, [r4, #8]
3400aba8:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
3400abaa:	2000      	movs	r0, #0
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
    }
  }

  return status;
}
3400abac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3400abb0:	ea43 0308 	orr.w	r3, r3, r8
3400abb4:	ea43 030c 	orr.w	r3, r3, ip
3400abb8:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3400abbc:	430b      	orrs	r3, r1
3400abbe:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3400abc0:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400abc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400abc6:	d1ee      	bne.n	3400aba6 <XSPI_ConfigCmd+0x186>
3400abc8:	6963      	ldr	r3, [r4, #20]
3400abca:	2b08      	cmp	r3, #8
3400abcc:	d1eb      	bne.n	3400aba6 <XSPI_ConfigCmd+0x186>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400abce:	6813      	ldr	r3, [r2, #0]
3400abd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3400abd4:	e7e6      	b.n	3400aba4 <XSPI_ConfigCmd+0x184>
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400abd6:	f1b9 0f00 	cmp.w	r9, #0
3400abda:	d01b      	beq.n	3400ac14 <XSPI_ConfigCmd+0x1f4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3400abdc:	e9d4 6008 	ldrd	r6, r0, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400abe0:	f1be 0f00 	cmp.w	lr, #0
3400abe4:	d00d      	beq.n	3400ac02 <XSPI_ConfigCmd+0x1e2>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3400abe6:	ea4e 0309 	orr.w	r3, lr, r9
3400abea:	6815      	ldr	r5, [r2, #0]
3400abec:	4303      	orrs	r3, r0
3400abee:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400abf0:	4333      	orrs	r3, r6
3400abf2:	4303      	orrs	r3, r0
3400abf4:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
3400abf8:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
3400abfc:	4303      	orrs	r3, r0
3400abfe:	6013      	str	r3, [r2, #0]
3400ac00:	e783      	b.n	3400ab0a <XSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3400ac02:	6813      	ldr	r3, [r2, #0]
3400ac04:	ea40 0009 	orr.w	r0, r0, r9
3400ac08:	4330      	orrs	r0, r6
3400ac0a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400ac0e:	4318      	orrs	r0, r3
3400ac10:	6010      	str	r0, [r2, #0]
3400ac12:	e77a      	b.n	3400ab0a <XSPI_ConfigCmd+0xea>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400ac14:	2308      	movs	r3, #8
      status = HAL_ERROR;
3400ac16:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400ac18:	65f3      	str	r3, [r6, #92]	@ 0x5c
3400ac1a:	e7c7      	b.n	3400abac <XSPI_ConfigCmd+0x18c>
3400ac1c:	34010ae6 	.word	0x34010ae6
3400ac20:	f0ffc0c0 	.word	0xf0ffc0c0

3400ac24 <XSPI_WaitFlagStateUntilTimeout>:
{
3400ac24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400ac28:	4604      	mov	r4, r0
3400ac2a:	460e      	mov	r6, r1
3400ac2c:	4615      	mov	r5, r2
3400ac2e:	461f      	mov	r7, r3
3400ac30:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3400ac34:	6822      	ldr	r2, [r4, #0]
3400ac36:	6a13      	ldr	r3, [r2, #32]
3400ac38:	4233      	tst	r3, r6
3400ac3a:	bf14      	ite	ne
3400ac3c:	2301      	movne	r3, #1
3400ac3e:	2300      	moveq	r3, #0
3400ac40:	42ab      	cmp	r3, r5
3400ac42:	d101      	bne.n	3400ac48 <XSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
3400ac44:	2000      	movs	r0, #0
3400ac46:	e011      	b.n	3400ac6c <XSPI_WaitFlagStateUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
3400ac48:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
3400ac4c:	d0f3      	beq.n	3400ac36 <XSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400ac4e:	f7f7 fb45 	bl	340022dc <HAL_GetTick>
3400ac52:	1bc0      	subs	r0, r0, r7
3400ac54:	4540      	cmp	r0, r8
3400ac56:	d802      	bhi.n	3400ac5e <XSPI_WaitFlagStateUntilTimeout+0x3a>
3400ac58:	f1b8 0f00 	cmp.w	r8, #0
3400ac5c:	d1ea      	bne.n	3400ac34 <XSPI_WaitFlagStateUntilTimeout+0x10>
        hxspi->State     = HAL_XSPI_STATE_READY;
3400ac5e:	2302      	movs	r3, #2
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400ac60:	2003      	movs	r0, #3
        hxspi->State     = HAL_XSPI_STATE_READY;
3400ac62:	65a3      	str	r3, [r4, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3400ac64:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3400ac66:	f043 0301 	orr.w	r3, r3, #1
3400ac6a:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
3400ac6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

3400ac70 <HAL_XSPI_MspInit>:
}
3400ac70:	4770      	bx	lr
	...

3400ac74 <HAL_XSPI_Init>:
{
3400ac74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400ac76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
3400ac78:	f7f7 fb30 	bl	340022dc <HAL_GetTick>
3400ac7c:	4606      	mov	r6, r0
  if (hxspi == NULL)
3400ac7e:	2c00      	cmp	r4, #0
3400ac80:	f000 812a 	beq.w	3400aed8 <HAL_XSPI_Init+0x264>
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
3400ac84:	68a3      	ldr	r3, [r4, #8]
3400ac86:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3400ac8a:	d004      	beq.n	3400ac96 <HAL_XSPI_Init+0x22>
3400ac8c:	f240 1161 	movw	r1, #353	@ 0x161
3400ac90:	4892      	ldr	r0, [pc, #584]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ac92:	f7f6 fa6b 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
3400ac96:	68e3      	ldr	r3, [r4, #12]
3400ac98:	f033 7240 	bics.w	r2, r3, #50331648	@ 0x3000000
3400ac9c:	d009      	beq.n	3400acb2 <HAL_XSPI_Init+0x3e>
3400ac9e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
3400aca2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400aca6:	d004      	beq.n	3400acb2 <HAL_XSPI_Init+0x3e>
3400aca8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400acac:	488b      	ldr	r0, [pc, #556]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400acae:	f7f6 fa5d 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
3400acb2:	6923      	ldr	r3, [r4, #16]
3400acb4:	2b1f      	cmp	r3, #31
3400acb6:	d904      	bls.n	3400acc2 <HAL_XSPI_Init+0x4e>
3400acb8:	f240 1163 	movw	r1, #355	@ 0x163
3400acbc:	4887      	ldr	r0, [pc, #540]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400acbe:	f7f6 fa55 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
3400acc2:	6963      	ldr	r3, [r4, #20]
3400acc4:	3b01      	subs	r3, #1
3400acc6:	2b3f      	cmp	r3, #63	@ 0x3f
3400acc8:	d904      	bls.n	3400acd4 <HAL_XSPI_Init+0x60>
3400acca:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400acce:	4883      	ldr	r0, [pc, #524]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400acd0:	f7f6 fa4c 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
3400acd4:	69a3      	ldr	r3, [r4, #24]
3400acd6:	f033 0302 	bics.w	r3, r3, #2
3400acda:	d004      	beq.n	3400ace6 <HAL_XSPI_Init+0x72>
3400acdc:	f240 1165 	movw	r1, #357	@ 0x165
3400ace0:	487e      	ldr	r0, [pc, #504]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ace2:	f7f6 fa43 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3400ace6:	69e3      	ldr	r3, [r4, #28]
3400ace8:	2b01      	cmp	r3, #1
3400acea:	d904      	bls.n	3400acf6 <HAL_XSPI_Init+0x82>
3400acec:	f44f 71b3 	mov.w	r1, #358	@ 0x166
3400acf0:	487a      	ldr	r0, [pc, #488]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400acf2:	f7f6 fa3b 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3400acf6:	6a23      	ldr	r3, [r4, #32]
3400acf8:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
3400acfc:	d00c      	beq.n	3400ad18 <HAL_XSPI_Init+0xa4>
3400acfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400ad02:	d009      	beq.n	3400ad18 <HAL_XSPI_Init+0xa4>
3400ad04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400ad08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400ad0c:	d004      	beq.n	3400ad18 <HAL_XSPI_Init+0xa4>
3400ad0e:	f240 1167 	movw	r1, #359	@ 0x167
3400ad12:	4872      	ldr	r0, [pc, #456]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ad14:	f7f6 fa2a 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
3400ad18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400ad1a:	2bff      	cmp	r3, #255	@ 0xff
3400ad1c:	d904      	bls.n	3400ad28 <HAL_XSPI_Init+0xb4>
3400ad1e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
3400ad22:	486e      	ldr	r0, [pc, #440]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ad24:	f7f6 fa22 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
3400ad28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400ad2a:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
3400ad2e:	d004      	beq.n	3400ad3a <HAL_XSPI_Init+0xc6>
3400ad30:	f240 1169 	movw	r1, #361	@ 0x169
3400ad34:	4869      	ldr	r0, [pc, #420]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ad36:	f7f6 fa19 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
3400ad3a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ad3c:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
3400ad40:	d004      	beq.n	3400ad4c <HAL_XSPI_Init+0xd8>
3400ad42:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3400ad46:	4865      	ldr	r0, [pc, #404]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ad48:	f7f6 fa10 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
3400ad4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400ad4e:	2b1f      	cmp	r3, #31
3400ad50:	d904      	bls.n	3400ad5c <HAL_XSPI_Init+0xe8>
3400ad52:	f240 116b 	movw	r1, #363	@ 0x16b
3400ad56:	4861      	ldr	r0, [pc, #388]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ad58:	f7f6 fa08 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
3400ad5c:	6863      	ldr	r3, [r4, #4]
3400ad5e:	3b01      	subs	r3, #1
3400ad60:	2b3f      	cmp	r3, #63	@ 0x3f
3400ad62:	d904      	bls.n	3400ad6e <HAL_XSPI_Init+0xfa>
3400ad64:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3400ad68:	485c      	ldr	r0, [pc, #368]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ad6a:	f7f6 f9ff 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
3400ad6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400ad70:	2bff      	cmp	r3, #255	@ 0xff
3400ad72:	d904      	bls.n	3400ad7e <HAL_XSPI_Init+0x10a>
3400ad74:	f240 116d 	movw	r1, #365	@ 0x16d
3400ad78:	4858      	ldr	r0, [pc, #352]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ad7a:	f7f6 f9f7 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
3400ad7e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400ad80:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
3400ad84:	d004      	beq.n	3400ad90 <HAL_XSPI_Init+0x11c>
3400ad86:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
3400ad8a:	4854      	ldr	r0, [pc, #336]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ad8c:	f7f6 f9ee 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
3400ad90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400ad92:	f433 1300 	bics.w	r3, r3, #2097152	@ 0x200000
3400ad96:	d004      	beq.n	3400ada2 <HAL_XSPI_Init+0x12e>
3400ad98:	f240 116f 	movw	r1, #367	@ 0x16f
3400ad9c:	484f      	ldr	r0, [pc, #316]	@ (3400aedc <HAL_XSPI_Init+0x268>)
3400ad9e:	f7f6 f9e5 	bl	3400116c <assert_failed>
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400ada2:	2300      	movs	r3, #0
3400ada4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3400ada6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
3400ada8:	2f00      	cmp	r7, #0
3400adaa:	f040 8087 	bne.w	3400aebc <HAL_XSPI_Init+0x248>
      HAL_XSPI_MspInit(hxspi);
3400adae:	4620      	mov	r0, r4
3400adb0:	f7ff ff5e 	bl	3400ac70 <HAL_XSPI_MspInit>
  hxspi->Timeout = Timeout;
3400adb4:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hxspi->Instance->DCR1,
3400adb8:	69e3      	ldr	r3, [r4, #28]
3400adba:	68e5      	ldr	r5, [r4, #12]
3400adbc:	6821      	ldr	r1, [r4, #0]
3400adbe:	431d      	orrs	r5, r3
3400adc0:	6923      	ldr	r3, [r4, #16]
3400adc2:	6888      	ldr	r0, [r1, #8]
3400adc4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
3400adc8:	4b45      	ldr	r3, [pc, #276]	@ (3400aee0 <HAL_XSPI_Init+0x26c>)
  hxspi->Timeout = Timeout;
3400adca:	6622      	str	r2, [r4, #96]	@ 0x60
      MODIFY_REG(hxspi->Instance->DCR1,
3400adcc:	4003      	ands	r3, r0
3400adce:	431d      	orrs	r5, r3
3400add0:	6963      	ldr	r3, [r4, #20]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400add2:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hxspi->Instance->DCR1,
3400add4:	3b01      	subs	r3, #1
3400add6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
3400adda:	608d      	str	r5, [r1, #8]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3400addc:	68cb      	ldr	r3, [r1, #12]
3400adde:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3400ade2:	4303      	orrs	r3, r0
3400ade4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3400ade6:	690b      	ldr	r3, [r1, #16]
3400ade8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
3400adea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3400adee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3400adf2:	610b      	str	r3, [r1, #16]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3400adf4:	690b      	ldr	r3, [r1, #16]
3400adf6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
3400adf8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400adfc:	4303      	orrs	r3, r0
3400adfe:	610b      	str	r3, [r1, #16]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400ae00:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400ae02:	6860      	ldr	r0, [r4, #4]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3400ae04:	614b      	str	r3, [r1, #20]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3400ae06:	680b      	ldr	r3, [r1, #0]
3400ae08:	3801      	subs	r0, #1
3400ae0a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3400ae0e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
3400ae12:	600b      	str	r3, [r1, #0]
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400ae14:	4620      	mov	r0, r4
3400ae16:	9200      	str	r2, [sp, #0]
3400ae18:	4633      	mov	r3, r6
3400ae1a:	463a      	mov	r2, r7
3400ae1c:	2120      	movs	r1, #32
3400ae1e:	f7ff ff01 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400ae22:	2800      	cmp	r0, #0
3400ae24:	d156      	bne.n	3400aed4 <HAL_XSPI_Init+0x260>
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400ae26:	6823      	ldr	r3, [r4, #0]
3400ae28:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400ae2a:	68da      	ldr	r2, [r3, #12]
3400ae2c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
3400ae30:	430a      	orrs	r2, r1
3400ae32:	60da      	str	r2, [r3, #12]
        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3400ae34:	4a2b      	ldr	r2, [pc, #172]	@ (3400aee4 <HAL_XSPI_Init+0x270>)
3400ae36:	4293      	cmp	r3, r2
3400ae38:	d042      	beq.n	3400aec0 <HAL_XSPI_Init+0x24c>
3400ae3a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ae3e:	4293      	cmp	r3, r2
3400ae40:	d03e      	beq.n	3400aec0 <HAL_XSPI_Init+0x24c>
3400ae42:	4a29      	ldr	r2, [pc, #164]	@ (3400aee8 <HAL_XSPI_Init+0x274>)
3400ae44:	4293      	cmp	r3, r2
3400ae46:	d03b      	beq.n	3400aec0 <HAL_XSPI_Init+0x24c>
3400ae48:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ae4c:	4293      	cmp	r3, r2
3400ae4e:	d037      	beq.n	3400aec0 <HAL_XSPI_Init+0x24c>
3400ae50:	4a26      	ldr	r2, [pc, #152]	@ (3400aeec <HAL_XSPI_Init+0x278>)
3400ae52:	4293      	cmp	r3, r2
3400ae54:	d034      	beq.n	3400aec0 <HAL_XSPI_Init+0x24c>
3400ae56:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ae5a:	4293      	cmp	r3, r2
3400ae5c:	d030      	beq.n	3400aec0 <HAL_XSPI_Init+0x24c>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3400ae5e:	6823      	ldr	r3, [r4, #0]
3400ae60:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
3400ae62:	6819      	ldr	r1, [r3, #0]
3400ae64:	68a2      	ldr	r2, [r4, #8]
3400ae66:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400ae6a:	4302      	orrs	r2, r0
3400ae6c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
3400ae70:	430a      	orrs	r2, r1
3400ae72:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3400ae74:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
3400ae78:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
3400ae7c:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
3400ae80:	4302      	orrs	r2, r0
3400ae82:	430a      	orrs	r2, r1
3400ae84:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        HAL_XSPI_ENABLE(hxspi);
3400ae88:	681a      	ldr	r2, [r3, #0]
3400ae8a:	f042 0201 	orr.w	r2, r2, #1
3400ae8e:	601a      	str	r2, [r3, #0]
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3400ae90:	69a2      	ldr	r2, [r4, #24]
3400ae92:	2a02      	cmp	r2, #2
3400ae94:	d103      	bne.n	3400ae9e <HAL_XSPI_Init+0x22a>
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3400ae96:	689a      	ldr	r2, [r3, #8]
3400ae98:	f042 0202 	orr.w	r2, r2, #2
3400ae9c:	609a      	str	r2, [r3, #8]
        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3400ae9e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3400aea0:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3400aea4:	bf02      	ittt	eq
3400aea6:	689a      	ldreq	r2, [r3, #8]
3400aea8:	f442 1200 	orreq.w	r2, r2, #2097152	@ 0x200000
3400aeac:	609a      	streq	r2, [r3, #8]
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400aeae:	68e3      	ldr	r3, [r4, #12]
3400aeb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3400aeb4:	bf0c      	ite	eq
3400aeb6:	2301      	moveq	r3, #1
          hxspi->State = HAL_XSPI_STATE_READY;
3400aeb8:	2302      	movne	r3, #2
3400aeba:	65a3      	str	r3, [r4, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
3400aebc:	2000      	movs	r0, #0
3400aebe:	e009      	b.n	3400aed4 <HAL_XSPI_Init+0x260>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400aec0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3400aec2:	2200      	movs	r2, #0
3400aec4:	9300      	str	r3, [sp, #0]
3400aec6:	2120      	movs	r1, #32
3400aec8:	4633      	mov	r3, r6
3400aeca:	4620      	mov	r0, r4
3400aecc:	f7ff feaa 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
          if (status != HAL_OK)
3400aed0:	2800      	cmp	r0, #0
3400aed2:	d0c4      	beq.n	3400ae5e <HAL_XSPI_Init+0x1ea>
}
3400aed4:	b003      	add	sp, #12
3400aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
3400aed8:	2001      	movs	r0, #1
3400aeda:	e7fb      	b.n	3400aed4 <HAL_XSPI_Init+0x260>
3400aedc:	34010ae6 	.word	0x34010ae6
3400aee0:	f8e0c0fc 	.word	0xf8e0c0fc
3400aee4:	58025000 	.word	0x58025000
3400aee8:	5802a000 	.word	0x5802a000
3400aeec:	5802d000 	.word	0x5802d000

3400aef0 <HAL_XSPI_Command>:
{
3400aef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400aef2:	460c      	mov	r4, r1
3400aef4:	4605      	mov	r5, r0
3400aef6:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400aef8:	f7f7 f9f0 	bl	340022dc <HAL_GetTick>
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400aefc:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400aefe:	4606      	mov	r6, r0
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3400af00:	2b03      	cmp	r3, #3
3400af02:	d904      	bls.n	3400af0e <HAL_XSPI_Command+0x1e>
3400af04:	f240 313e 	movw	r1, #830	@ 0x33e
3400af08:	4884      	ldr	r0, [pc, #528]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400af0a:	f7f6 f92f 	bl	3400116c <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3400af0e:	68ab      	ldr	r3, [r5, #8]
3400af10:	b943      	cbnz	r3, 3400af24 <HAL_XSPI_Command+0x34>
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3400af12:	6863      	ldr	r3, [r4, #4]
3400af14:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3400af18:	d004      	beq.n	3400af24 <HAL_XSPI_Command+0x34>
3400af1a:	f240 3141 	movw	r1, #833	@ 0x341
3400af1e:	487f      	ldr	r0, [pc, #508]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400af20:	f7f6 f924 	bl	3400116c <assert_failed>
  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3400af24:	68e3      	ldr	r3, [r4, #12]
3400af26:	2b04      	cmp	r3, #4
3400af28:	d904      	bls.n	3400af34 <HAL_XSPI_Command+0x44>
3400af2a:	f44f 7151 	mov.w	r1, #836	@ 0x344
3400af2e:	487b      	ldr	r0, [pc, #492]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400af30:	f7f6 f91c 	bl	3400116c <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3400af34:	68e3      	ldr	r3, [r4, #12]
3400af36:	b18b      	cbz	r3, 3400af5c <HAL_XSPI_Command+0x6c>
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
3400af38:	6923      	ldr	r3, [r4, #16]
3400af3a:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3400af3e:	d004      	beq.n	3400af4a <HAL_XSPI_Command+0x5a>
3400af40:	f240 3147 	movw	r1, #839	@ 0x347
3400af44:	4875      	ldr	r0, [pc, #468]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400af46:	f7f6 f911 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
3400af4a:	6963      	ldr	r3, [r4, #20]
3400af4c:	f033 0308 	bics.w	r3, r3, #8
3400af50:	d004      	beq.n	3400af5c <HAL_XSPI_Command+0x6c>
3400af52:	f44f 7152 	mov.w	r1, #840	@ 0x348
3400af56:	4871      	ldr	r0, [pc, #452]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400af58:	f7f6 f908 	bl	3400116c <assert_failed>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400af5c:	69e3      	ldr	r3, [r4, #28]
3400af5e:	b303      	cbz	r3, 3400afa2 <HAL_XSPI_Command+0xb2>
3400af60:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3400af64:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3400af68:	d10d      	bne.n	3400af86 <HAL_XSPI_Command+0x96>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400af6a:	6a23      	ldr	r3, [r4, #32]
3400af6c:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400af70:	d12c      	bne.n	3400afcc <HAL_XSPI_Command+0xdc>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
3400af72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400af74:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400af78:	d013      	beq.n	3400afa2 <HAL_XSPI_Command+0xb2>
3400af7a:	f240 314f 	movw	r1, #847	@ 0x34f
3400af7e:	4867      	ldr	r0, [pc, #412]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400af80:	f7f6 f8f4 	bl	3400116c <assert_failed>
3400af84:	e00d      	b.n	3400afa2 <HAL_XSPI_Command+0xb2>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400af86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400af8a:	d0ee      	beq.n	3400af6a <HAL_XSPI_Command+0x7a>
3400af8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400af90:	d0eb      	beq.n	3400af6a <HAL_XSPI_Command+0x7a>
3400af92:	f240 314b 	movw	r1, #843	@ 0x34b
3400af96:	4861      	ldr	r0, [pc, #388]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400af98:	f7f6 f8e8 	bl	3400116c <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400af9c:	69e3      	ldr	r3, [r4, #28]
3400af9e:	2b00      	cmp	r3, #0
3400afa0:	d1e3      	bne.n	3400af6a <HAL_XSPI_Command+0x7a>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400afa2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400afa4:	b333      	cbz	r3, 3400aff4 <HAL_XSPI_Command+0x104>
3400afa6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
3400afaa:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3400afae:	d113      	bne.n	3400afd8 <HAL_XSPI_Command+0xe8>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400afb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400afb2:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3400afb6:	d13d      	bne.n	3400b034 <HAL_XSPI_Command+0x144>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3400afb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400afba:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3400afbe:	d019      	beq.n	3400aff4 <HAL_XSPI_Command+0x104>
3400afc0:	f240 3156 	movw	r1, #854	@ 0x356
3400afc4:	4855      	ldr	r0, [pc, #340]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400afc6:	f7f6 f8d1 	bl	3400116c <assert_failed>
3400afca:	e013      	b.n	3400aff4 <HAL_XSPI_Command+0x104>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400afcc:	f240 314e 	movw	r1, #846	@ 0x34e
3400afd0:	4852      	ldr	r0, [pc, #328]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400afd2:	f7f6 f8cb 	bl	3400116c <assert_failed>
3400afd6:	e7cc      	b.n	3400af72 <HAL_XSPI_Command+0x82>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400afd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400afdc:	d0e8      	beq.n	3400afb0 <HAL_XSPI_Command+0xc0>
3400afde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400afe2:	d0e5      	beq.n	3400afb0 <HAL_XSPI_Command+0xc0>
3400afe4:	f240 3152 	movw	r1, #850	@ 0x352
3400afe8:	484c      	ldr	r0, [pc, #304]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400afea:	f7f6 f8bf 	bl	3400116c <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3400afee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400aff0:	2b00      	cmp	r3, #0
3400aff2:	d1dd      	bne.n	3400afb0 <HAL_XSPI_Command+0xc0>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400aff4:	68eb      	ldr	r3, [r5, #12]
3400aff6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400aff8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400affc:	d120      	bne.n	3400b040 <HAL_XSPI_Command+0x150>
3400affe:	b389      	cbz	r1, 3400b064 <HAL_XSPI_Command+0x174>
3400b000:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400b004:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
3400b008:	d124      	bne.n	3400b054 <HAL_XSPI_Command+0x164>
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400b00a:	6823      	ldr	r3, [r4, #0]
3400b00c:	2b00      	cmp	r3, #0
3400b00e:	d03d      	beq.n	3400b08c <HAL_XSPI_Command+0x19c>
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
3400b010:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400b012:	f033 6300 	bics.w	r3, r3, #134217728	@ 0x8000000
3400b016:	d004      	beq.n	3400b022 <HAL_XSPI_Command+0x132>
3400b018:	f240 3161 	movw	r1, #865	@ 0x361
3400b01c:	483f      	ldr	r0, [pc, #252]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400b01e:	f7f6 f8a5 	bl	3400116c <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
3400b022:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b024:	2b1f      	cmp	r3, #31
3400b026:	d91d      	bls.n	3400b064 <HAL_XSPI_Command+0x174>
3400b028:	f240 3162 	movw	r1, #866	@ 0x362
3400b02c:	483b      	ldr	r0, [pc, #236]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400b02e:	f7f6 f89d 	bl	3400116c <assert_failed>
3400b032:	e017      	b.n	3400b064 <HAL_XSPI_Command+0x174>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3400b034:	f240 3155 	movw	r1, #853	@ 0x355
3400b038:	4838      	ldr	r0, [pc, #224]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400b03a:	f7f6 f897 	bl	3400116c <assert_failed>
3400b03e:	e7bb      	b.n	3400afb8 <HAL_XSPI_Command+0xc8>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3400b040:	b181      	cbz	r1, 3400b064 <HAL_XSPI_Command+0x174>
3400b042:	f021 7300 	bic.w	r3, r1, #33554432	@ 0x2000000
3400b046:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400b04a:	d0de      	beq.n	3400b00a <HAL_XSPI_Command+0x11a>
3400b04c:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
3400b050:	d1d6      	bne.n	3400b000 <HAL_XSPI_Command+0x110>
3400b052:	e7da      	b.n	3400b00a <HAL_XSPI_Command+0x11a>
3400b054:	f240 3159 	movw	r1, #857	@ 0x359
3400b058:	4830      	ldr	r0, [pc, #192]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400b05a:	f7f6 f887 	bl	3400116c <assert_failed>
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3400b05e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400b060:	2b00      	cmp	r3, #0
3400b062:	d1d2      	bne.n	3400b00a <HAL_XSPI_Command+0x11a>
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
3400b064:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400b066:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
3400b06a:	d004      	beq.n	3400b076 <HAL_XSPI_Command+0x186>
3400b06c:	f240 3165 	movw	r1, #869	@ 0x365
3400b070:	482a      	ldr	r0, [pc, #168]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400b072:	f7f6 f87b 	bl	3400116c <assert_failed>
  state = hxspi->State;
3400b076:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400b078:	2b02      	cmp	r3, #2
3400b07a:	d110      	bne.n	3400b09e <HAL_XSPI_Command+0x1ae>
3400b07c:	68eb      	ldr	r3, [r5, #12]
3400b07e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400b082:	d112      	bne.n	3400b0aa <HAL_XSPI_Command+0x1ba>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b084:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b086:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b088:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b08a:	e028      	b.n	3400b0de <HAL_XSPI_Command+0x1ee>
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
3400b08c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400b08e:	2b00      	cmp	r3, #0
3400b090:	d1be      	bne.n	3400b010 <HAL_XSPI_Command+0x120>
3400b092:	f240 315f 	movw	r1, #863	@ 0x35f
3400b096:	4821      	ldr	r0, [pc, #132]	@ (3400b11c <HAL_XSPI_Command+0x22c>)
3400b098:	f7f6 f868 	bl	3400116c <assert_failed>
3400b09c:	e7b8      	b.n	3400b010 <HAL_XSPI_Command+0x120>
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400b09e:	2b14      	cmp	r3, #20
3400b0a0:	d11f      	bne.n	3400b0e2 <HAL_XSPI_Command+0x1f2>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3400b0a2:	6823      	ldr	r3, [r4, #0]
3400b0a4:	3b02      	subs	r3, #2
3400b0a6:	2b01      	cmp	r3, #1
3400b0a8:	d8ec      	bhi.n	3400b084 <HAL_XSPI_Command+0x194>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b0aa:	4633      	mov	r3, r6
3400b0ac:	2200      	movs	r2, #0
3400b0ae:	2120      	movs	r1, #32
3400b0b0:	4628      	mov	r0, r5
3400b0b2:	9700      	str	r7, [sp, #0]
3400b0b4:	f7ff fdb6 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b0b8:	bb70      	cbnz	r0, 3400b118 <HAL_XSPI_Command+0x228>
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400b0ba:	65e8      	str	r0, [r5, #92]	@ 0x5c
      status = XSPI_ConfigCmd(hxspi, pCmd);
3400b0bc:	4621      	mov	r1, r4
3400b0be:	4628      	mov	r0, r5
3400b0c0:	f7ff fcae 	bl	3400aa20 <XSPI_ConfigCmd>
      if (status == HAL_OK)
3400b0c4:	b958      	cbnz	r0, 3400b0de <HAL_XSPI_Command+0x1ee>
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3400b0c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400b0c8:	b99b      	cbnz	r3, 3400b0f2 <HAL_XSPI_Command+0x202>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b0ca:	4602      	mov	r2, r0
3400b0cc:	4633      	mov	r3, r6
3400b0ce:	2120      	movs	r1, #32
3400b0d0:	4628      	mov	r0, r5
3400b0d2:	9700      	str	r7, [sp, #0]
3400b0d4:	f7ff fda6 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b0d8:	2202      	movs	r2, #2
3400b0da:	682b      	ldr	r3, [r5, #0]
3400b0dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400b0de:	b003      	add	sp, #12
3400b0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3400b0e2:	2b24      	cmp	r3, #36	@ 0x24
3400b0e4:	d1ce      	bne.n	3400b084 <HAL_XSPI_Command+0x194>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3400b0e6:	6823      	ldr	r3, [r4, #0]
3400b0e8:	f023 0302 	bic.w	r3, r3, #2
3400b0ec:	2b01      	cmp	r3, #1
3400b0ee:	d1c9      	bne.n	3400b084 <HAL_XSPI_Command+0x194>
3400b0f0:	e7db      	b.n	3400b0aa <HAL_XSPI_Command+0x1ba>
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3400b0f2:	6823      	ldr	r3, [r4, #0]
3400b0f4:	b90b      	cbnz	r3, 3400b0fa <HAL_XSPI_Command+0x20a>
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3400b0f6:	2304      	movs	r3, #4
3400b0f8:	e005      	b.n	3400b106 <HAL_XSPI_Command+0x216>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3400b0fa:	2b01      	cmp	r3, #1
3400b0fc:	d105      	bne.n	3400b10a <HAL_XSPI_Command+0x21a>
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3400b0fe:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b100:	2b24      	cmp	r3, #36	@ 0x24
3400b102:	d0f8      	beq.n	3400b0f6 <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3400b104:	2314      	movs	r3, #20
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400b106:	65ab      	str	r3, [r5, #88]	@ 0x58
3400b108:	e7e9      	b.n	3400b0de <HAL_XSPI_Command+0x1ee>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3400b10a:	2b02      	cmp	r3, #2
3400b10c:	d1e7      	bne.n	3400b0de <HAL_XSPI_Command+0x1ee>
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3400b10e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b110:	2b14      	cmp	r3, #20
3400b112:	d0f0      	beq.n	3400b0f6 <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3400b114:	2324      	movs	r3, #36	@ 0x24
3400b116:	e7f6      	b.n	3400b106 <HAL_XSPI_Command+0x216>
      status = HAL_BUSY;
3400b118:	2002      	movs	r0, #2
3400b11a:	e7e0      	b.n	3400b0de <HAL_XSPI_Command+0x1ee>
3400b11c:	34010ae6 	.word	0x34010ae6

3400b120 <HAL_XSPI_Transmit>:
{
3400b120:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400b124:	4604      	mov	r4, r0
3400b126:	4688      	mov	r8, r1
3400b128:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
3400b12a:	f7f7 f8d7 	bl	340022dc <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400b12e:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b130:	4605      	mov	r5, r0
  if (pData == NULL)
3400b132:	f1b8 0f00 	cmp.w	r8, #0
3400b136:	d103      	bne.n	3400b140 <HAL_XSPI_Transmit+0x20>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400b138:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400b13a:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b13c:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b13e:	e02e      	b.n	3400b19e <HAL_XSPI_Transmit+0x7e>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b140:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b142:	2b04      	cmp	r3, #4
3400b144:	d12e      	bne.n	3400b1a4 <HAL_XSPI_Transmit+0x84>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
3400b148:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b14c:	3301      	adds	r3, #1
3400b14e:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400b150:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b152:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3400b154:	683b      	ldr	r3, [r7, #0]
3400b156:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b15a:	603b      	str	r3, [r7, #0]
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3400b15c:	462b      	mov	r3, r5
3400b15e:	2201      	movs	r2, #1
3400b160:	2104      	movs	r1, #4
3400b162:	4620      	mov	r0, r4
3400b164:	9600      	str	r6, [sp, #0]
3400b166:	f7ff fd5d 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400b16a:	b9c0      	cbnz	r0, 3400b19e <HAL_XSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3400b16c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b16e:	781b      	ldrb	r3, [r3, #0]
3400b170:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hxspi->pBuffPtr++;
3400b174:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b176:	3301      	adds	r3, #1
3400b178:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400b17a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b17c:	3b01      	subs	r3, #1
3400b17e:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400b180:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b182:	2b00      	cmp	r3, #0
3400b184:	d1ea      	bne.n	3400b15c <HAL_XSPI_Transmit+0x3c>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400b186:	462b      	mov	r3, r5
3400b188:	2201      	movs	r2, #1
3400b18a:	2102      	movs	r1, #2
3400b18c:	4620      	mov	r0, r4
3400b18e:	9600      	str	r6, [sp, #0]
3400b190:	f7ff fd48 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400b194:	b918      	cbnz	r0, 3400b19e <HAL_XSPI_Transmit+0x7e>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b196:	2302      	movs	r3, #2
3400b198:	6822      	ldr	r2, [r4, #0]
3400b19a:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400b19c:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b19e:	b002      	add	sp, #8
3400b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b1a4:	2310      	movs	r3, #16
3400b1a6:	e7c8      	b.n	3400b13a <HAL_XSPI_Transmit+0x1a>

3400b1a8 <HAL_XSPI_Receive>:
{
3400b1a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400b1ac:	4604      	mov	r4, r0
3400b1ae:	4616      	mov	r6, r2
3400b1b0:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
3400b1b2:	f7f7 f893 	bl	340022dc <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400b1b6:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b1b8:	4607      	mov	r7, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400b1ba:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400b1bc:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
3400b1c0:	f1b8 0f00 	cmp.w	r8, #0
3400b1c4:	d103      	bne.n	3400b1ce <HAL_XSPI_Receive+0x26>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400b1c6:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400b1c8:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b1ca:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b1cc:	e035      	b.n	3400b23a <HAL_XSPI_Receive+0x92>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b1ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b1d0:	2b04      	cmp	r3, #4
3400b1d2:	d13d      	bne.n	3400b250 <HAL_XSPI_Receive+0xa8>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b1d4:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
3400b1d6:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400b1da:	3301      	adds	r3, #1
3400b1dc:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3400b1de:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b1e0:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b1e2:	6829      	ldr	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b1e4:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b1e6:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
3400b1ea:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b1ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400b1f2:	6029      	str	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b1f4:	d124      	bne.n	3400b240 <HAL_XSPI_Receive+0x98>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b1f6:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3400b1f8:	463b      	mov	r3, r7
3400b1fa:	2201      	movs	r2, #1
3400b1fc:	2106      	movs	r1, #6
3400b1fe:	4620      	mov	r0, r4
3400b200:	9600      	str	r6, [sp, #0]
3400b202:	f7ff fd0f 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400b206:	b9c0      	cbnz	r0, 3400b23a <HAL_XSPI_Receive+0x92>
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3400b208:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
3400b20c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b20e:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3400b210:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400b212:	3301      	adds	r3, #1
3400b214:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400b216:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b218:	3b01      	subs	r3, #1
3400b21a:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3400b21c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400b21e:	2b00      	cmp	r3, #0
3400b220:	d1ea      	bne.n	3400b1f8 <HAL_XSPI_Receive+0x50>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400b222:	463b      	mov	r3, r7
3400b224:	2201      	movs	r2, #1
3400b226:	2102      	movs	r1, #2
3400b228:	4620      	mov	r0, r4
3400b22a:	9600      	str	r6, [sp, #0]
3400b22c:	f7ff fcfa 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3400b230:	b918      	cbnz	r0, 3400b23a <HAL_XSPI_Receive+0x92>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400b232:	2302      	movs	r3, #2
3400b234:	6822      	ldr	r2, [r4, #0]
3400b236:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3400b238:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b23a:	b002      	add	sp, #8
3400b23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b240:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
3400b244:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b248:	d1d5      	bne.n	3400b1f6 <HAL_XSPI_Receive+0x4e>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b24a:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
3400b24e:	e7d3      	b.n	3400b1f8 <HAL_XSPI_Receive+0x50>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b250:	2310      	movs	r3, #16
3400b252:	e7b9      	b.n	3400b1c8 <HAL_XSPI_Receive+0x20>

3400b254 <HAL_XSPI_AutoPolling>:
{
3400b254:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3400b258:	4604      	mov	r4, r0
3400b25a:	460d      	mov	r5, r1
3400b25c:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400b25e:	f7f7 f83d 	bl	340022dc <HAL_GetTick>
  uint32_t addr_reg = hxspi->Instance->AR;
3400b262:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b264:	4606      	mov	r6, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400b266:	f8d3 8048 	ldr.w	r8, [r3, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400b26a:	f8d3 9110 	ldr.w	r9, [r3, #272]	@ 0x110
  uint32_t dlr_reg = hxspi->Instance->DLR;
3400b26e:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
3400b272:	68ab      	ldr	r3, [r5, #8]
3400b274:	f433 0300 	bics.w	r3, r3, #8388608	@ 0x800000
3400b278:	d004      	beq.n	3400b284 <HAL_XSPI_AutoPolling+0x30>
3400b27a:	f240 7134 	movw	r1, #1844	@ 0x734
3400b27e:	4832      	ldr	r0, [pc, #200]	@ (3400b348 <HAL_XSPI_AutoPolling+0xf4>)
3400b280:	f7f5 ff74 	bl	3400116c <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
3400b284:	68eb      	ldr	r3, [r5, #12]
3400b286:	f433 0380 	bics.w	r3, r3, #4194304	@ 0x400000
3400b28a:	d004      	beq.n	3400b296 <HAL_XSPI_AutoPolling+0x42>
3400b28c:	f240 7135 	movw	r1, #1845	@ 0x735
3400b290:	482d      	ldr	r0, [pc, #180]	@ (3400b348 <HAL_XSPI_AutoPolling+0xf4>)
3400b292:	f7f5 ff6b 	bl	3400116c <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3400b296:	692b      	ldr	r3, [r5, #16]
3400b298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b29c:	d304      	bcc.n	3400b2a8 <HAL_XSPI_AutoPolling+0x54>
3400b29e:	f240 7136 	movw	r1, #1846	@ 0x736
3400b2a2:	4829      	ldr	r0, [pc, #164]	@ (3400b348 <HAL_XSPI_AutoPolling+0xf4>)
3400b2a4:	f7f5 ff62 	bl	3400116c <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3400b2a8:	f1ba 0f03 	cmp.w	sl, #3
3400b2ac:	d904      	bls.n	3400b2b8 <HAL_XSPI_AutoPolling+0x64>
3400b2ae:	f240 7137 	movw	r1, #1847	@ 0x737
3400b2b2:	4825      	ldr	r0, [pc, #148]	@ (3400b348 <HAL_XSPI_AutoPolling+0xf4>)
3400b2b4:	f7f5 ff5a 	bl	3400116c <assert_failed>
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3400b2b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400b2ba:	2b04      	cmp	r3, #4
3400b2bc:	d13e      	bne.n	3400b33c <HAL_XSPI_AutoPolling+0xe8>
3400b2be:	68eb      	ldr	r3, [r5, #12]
3400b2c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3400b2c4:	d13a      	bne.n	3400b33c <HAL_XSPI_AutoPolling+0xe8>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400b2c6:	4633      	mov	r3, r6
3400b2c8:	2200      	movs	r2, #0
3400b2ca:	2120      	movs	r1, #32
3400b2cc:	4620      	mov	r0, r4
3400b2ce:	9700      	str	r7, [sp, #0]
3400b2d0:	f7ff fca8 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b2d4:	2800      	cmp	r0, #0
3400b2d6:	d135      	bne.n	3400b344 <HAL_XSPI_AutoPolling+0xf0>
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3400b2d8:	682b      	ldr	r3, [r5, #0]
3400b2da:	6821      	ldr	r1, [r4, #0]
3400b2dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3400b2e0:	686b      	ldr	r3, [r5, #4]
3400b2e2:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3400b2e6:	692b      	ldr	r3, [r5, #16]
3400b2e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b2ec:	680a      	ldr	r2, [r1, #0]
3400b2ee:	e9d5 3502 	ldrd	r3, r5, [r5, #8]
3400b2f2:	431d      	orrs	r5, r3
3400b2f4:	f022 5343 	bic.w	r3, r2, #817889280	@ 0x30c00000
3400b2f8:	431d      	orrs	r5, r3
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b2fa:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b2fc:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b300:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3400b304:	600d      	str	r5, [r1, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400b306:	d111      	bne.n	3400b32c <HAL_XSPI_AutoPolling+0xd8>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400b308:	f8c1 8048 	str.w	r8, [r1, #72]	@ 0x48
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3400b30c:	4633      	mov	r3, r6
3400b30e:	2201      	movs	r2, #1
3400b310:	2108      	movs	r1, #8
3400b312:	4620      	mov	r0, r4
3400b314:	9700      	str	r7, [sp, #0]
3400b316:	f7ff fc85 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3400b31a:	b920      	cbnz	r0, 3400b326 <HAL_XSPI_AutoPolling+0xd2>
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3400b31c:	2208      	movs	r2, #8
3400b31e:	6823      	ldr	r3, [r4, #0]
3400b320:	625a      	str	r2, [r3, #36]	@ 0x24
        hxspi->State = HAL_XSPI_STATE_READY;
3400b322:	2302      	movs	r3, #2
3400b324:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3400b326:	b002      	add	sp, #8
3400b328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3400b32c:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
3400b330:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3400b334:	d1e8      	bne.n	3400b308 <HAL_XSPI_AutoPolling+0xb4>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3400b336:	f8c1 9110 	str.w	r9, [r1, #272]	@ 0x110
3400b33a:	e7e7      	b.n	3400b30c <HAL_XSPI_AutoPolling+0xb8>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b33c:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b33e:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b340:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b342:	e7f0      	b.n	3400b326 <HAL_XSPI_AutoPolling+0xd2>
      status = HAL_BUSY;
3400b344:	2002      	movs	r0, #2
3400b346:	e7ee      	b.n	3400b326 <HAL_XSPI_AutoPolling+0xd2>
3400b348:	34010ae6 	.word	0x34010ae6

3400b34c <HAL_XSPI_MemoryMapped>:
{
3400b34c:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400b34e:	460c      	mov	r4, r1
3400b350:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
3400b352:	f7f6 ffc3 	bl	340022dc <HAL_GetTick>
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b356:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400b358:	4606      	mov	r6, r0
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3400b35a:	f033 0308 	bics.w	r3, r3, #8
3400b35e:	d004      	beq.n	3400b36a <HAL_XSPI_MemoryMapped+0x1e>
3400b360:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
3400b364:	482f      	ldr	r0, [pc, #188]	@ (3400b424 <HAL_XSPI_MemoryMapped+0xd8>)
3400b366:	f7f5 ff01 	bl	3400116c <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3400b36a:	68a3      	ldr	r3, [r4, #8]
3400b36c:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
3400b370:	d004      	beq.n	3400b37c <HAL_XSPI_MemoryMapped+0x30>
3400b372:	f240 71c9 	movw	r1, #1993	@ 0x7c9
3400b376:	482b      	ldr	r0, [pc, #172]	@ (3400b424 <HAL_XSPI_MemoryMapped+0xd8>)
3400b378:	f7f5 fef8 	bl	3400116c <assert_failed>
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3400b37c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400b37e:	2b04      	cmp	r3, #4
3400b380:	d14b      	bne.n	3400b41a <HAL_XSPI_MemoryMapped+0xce>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3400b382:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
3400b384:	2200      	movs	r2, #0
3400b386:	9300      	str	r3, [sp, #0]
3400b388:	2120      	movs	r1, #32
3400b38a:	4633      	mov	r3, r6
3400b38c:	4628      	mov	r0, r5
3400b38e:	f7ff fc49 	bl	3400ac24 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400b392:	4606      	mov	r6, r0
3400b394:	bb58      	cbnz	r0, 3400b3ee <HAL_XSPI_MemoryMapped+0xa2>
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3400b396:	2388      	movs	r3, #136	@ 0x88
3400b398:	65ab      	str	r3, [r5, #88]	@ 0x58
      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3400b39a:	68a3      	ldr	r3, [r4, #8]
3400b39c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400b3a0:	d128      	bne.n	3400b3f4 <HAL_XSPI_MemoryMapped+0xa8>
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3400b3a2:	682a      	ldr	r2, [r5, #0]
3400b3a4:	6813      	ldr	r3, [r2, #0]
3400b3a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3400b3aa:	6013      	str	r3, [r2, #0]
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3400b3ac:	6823      	ldr	r3, [r4, #0]
3400b3ae:	2b08      	cmp	r3, #8
3400b3b0:	d112      	bne.n	3400b3d8 <HAL_XSPI_MemoryMapped+0x8c>
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3400b3b2:	6863      	ldr	r3, [r4, #4]
3400b3b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b3b8:	d304      	bcc.n	3400b3c4 <HAL_XSPI_MemoryMapped+0x78>
3400b3ba:	f240 71e5 	movw	r1, #2021	@ 0x7e5
3400b3be:	4819      	ldr	r0, [pc, #100]	@ (3400b424 <HAL_XSPI_MemoryMapped+0xd8>)
3400b3c0:	f7f5 fed4 	bl	3400116c <assert_failed>
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3400b3c4:	682b      	ldr	r3, [r5, #0]
3400b3c6:	6862      	ldr	r2, [r4, #4]
3400b3c8:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3400b3cc:	2210      	movs	r2, #16
3400b3ce:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3400b3d0:	681a      	ldr	r2, [r3, #0]
3400b3d2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3400b3d6:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3400b3d8:	682a      	ldr	r2, [r5, #0]
3400b3da:	6821      	ldr	r1, [r4, #0]
3400b3dc:	6813      	ldr	r3, [r2, #0]
3400b3de:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3400b3e2:	f023 0308 	bic.w	r3, r3, #8
3400b3e6:	430b      	orrs	r3, r1
3400b3e8:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
3400b3ec:	6013      	str	r3, [r2, #0]
}
3400b3ee:	4630      	mov	r0, r6
3400b3f0:	b002      	add	sp, #8
3400b3f2:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
3400b3f4:	68e3      	ldr	r3, [r4, #12]
3400b3f6:	f033 6380 	bics.w	r3, r3, #67108864	@ 0x4000000
3400b3fa:	d004      	beq.n	3400b406 <HAL_XSPI_MemoryMapped+0xba>
3400b3fc:	f240 71dd 	movw	r1, #2013	@ 0x7dd
3400b400:	4808      	ldr	r0, [pc, #32]	@ (3400b424 <HAL_XSPI_MemoryMapped+0xd8>)
3400b402:	f7f5 feb3 	bl	3400116c <assert_failed>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3400b406:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
3400b40a:	6829      	ldr	r1, [r5, #0]
3400b40c:	4303      	orrs	r3, r0
3400b40e:	680a      	ldr	r2, [r1, #0]
3400b410:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
3400b414:	4313      	orrs	r3, r2
3400b416:	600b      	str	r3, [r1, #0]
3400b418:	e7c8      	b.n	3400b3ac <HAL_XSPI_MemoryMapped+0x60>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b41a:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b41c:	2601      	movs	r6, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b41e:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400b420:	e7e5      	b.n	3400b3ee <HAL_XSPI_MemoryMapped+0xa2>
3400b422:	bf00      	nop
3400b424:	34010ae6 	.word	0x34010ae6

3400b428 <HAL_XSPI_SetClockPrescaler>:
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b428:	29ff      	cmp	r1, #255	@ 0xff
{
3400b42a:	b538      	push	{r3, r4, r5, lr}
3400b42c:	4604      	mov	r4, r0
3400b42e:	460d      	mov	r5, r1
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3400b430:	d904      	bls.n	3400b43c <HAL_XSPI_SetClockPrescaler+0x14>
3400b432:	f640 2193 	movw	r1, #2707	@ 0xa93
3400b436:	4809      	ldr	r0, [pc, #36]	@ (3400b45c <HAL_XSPI_SetClockPrescaler+0x34>)
3400b438:	f7f5 fe98 	bl	3400116c <assert_failed>
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
3400b43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400b43e:	f010 0008 	ands.w	r0, r0, #8
3400b442:	d107      	bne.n	3400b454 <HAL_XSPI_SetClockPrescaler+0x2c>
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b444:	6822      	ldr	r2, [r4, #0]
    hxspi->Init.ClockPrescaler = Prescaler;
3400b446:	6265      	str	r5, [r4, #36]	@ 0x24
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3400b448:	68d3      	ldr	r3, [r2, #12]
3400b44a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3400b44e:	432b      	orrs	r3, r5
3400b450:	60d3      	str	r3, [r2, #12]
}
3400b452:	bd38      	pop	{r3, r4, r5, pc}
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b454:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400b456:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400b458:	65e3      	str	r3, [r4, #92]	@ 0x5c
3400b45a:	e7fa      	b.n	3400b452 <HAL_XSPI_SetClockPrescaler+0x2a>
3400b45c:	34010ae6 	.word	0x34010ae6

3400b460 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
3400b460:	2a02      	cmp	r2, #2
3400b462:	d14a      	bne.n	3400b4fa <USB_SetTurnaroundTime+0x9a>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
3400b464:	4b27      	ldr	r3, [pc, #156]	@ (3400b504 <USB_SetTurnaroundTime+0xa4>)
3400b466:	4a28      	ldr	r2, [pc, #160]	@ (3400b508 <USB_SetTurnaroundTime+0xa8>)
3400b468:	440b      	add	r3, r1
3400b46a:	4293      	cmp	r3, r2
3400b46c:	d939      	bls.n	3400b4e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
3400b46e:	4b27      	ldr	r3, [pc, #156]	@ (3400b50c <USB_SetTurnaroundTime+0xac>)
3400b470:	4a27      	ldr	r2, [pc, #156]	@ (3400b510 <USB_SetTurnaroundTime+0xb0>)
3400b472:	440b      	add	r3, r1
3400b474:	4293      	cmp	r3, r2
3400b476:	d936      	bls.n	3400b4e6 <USB_SetTurnaroundTime+0x86>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
3400b478:	4a26      	ldr	r2, [pc, #152]	@ (3400b514 <USB_SetTurnaroundTime+0xb4>)
3400b47a:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
3400b47e:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
3400b482:	4293      	cmp	r3, r2
3400b484:	d931      	bls.n	3400b4ea <USB_SetTurnaroundTime+0x8a>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
3400b486:	4a24      	ldr	r2, [pc, #144]	@ (3400b518 <USB_SetTurnaroundTime+0xb8>)
3400b488:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
3400b48c:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
3400b490:	4293      	cmp	r3, r2
3400b492:	d32c      	bcc.n	3400b4ee <USB_SetTurnaroundTime+0x8e>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
3400b494:	4b21      	ldr	r3, [pc, #132]	@ (3400b51c <USB_SetTurnaroundTime+0xbc>)
3400b496:	4a22      	ldr	r2, [pc, #136]	@ (3400b520 <USB_SetTurnaroundTime+0xc0>)
3400b498:	440b      	add	r3, r1
3400b49a:	4293      	cmp	r3, r2
3400b49c:	d929      	bls.n	3400b4f2 <USB_SetTurnaroundTime+0x92>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
3400b49e:	4b21      	ldr	r3, [pc, #132]	@ (3400b524 <USB_SetTurnaroundTime+0xc4>)
3400b4a0:	4a21      	ldr	r2, [pc, #132]	@ (3400b528 <USB_SetTurnaroundTime+0xc8>)
3400b4a2:	440b      	add	r3, r1
3400b4a4:	4293      	cmp	r3, r2
3400b4a6:	d326      	bcc.n	3400b4f6 <USB_SetTurnaroundTime+0x96>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
3400b4a8:	4b20      	ldr	r3, [pc, #128]	@ (3400b52c <USB_SetTurnaroundTime+0xcc>)
3400b4aa:	4a21      	ldr	r2, [pc, #132]	@ (3400b530 <USB_SetTurnaroundTime+0xd0>)
3400b4ac:	440b      	add	r3, r1
3400b4ae:	4293      	cmp	r3, r2
3400b4b0:	d323      	bcc.n	3400b4fa <USB_SetTurnaroundTime+0x9a>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
3400b4b2:	4a20      	ldr	r2, [pc, #128]	@ (3400b534 <USB_SetTurnaroundTime+0xd4>)
3400b4b4:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
3400b4b8:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
3400b4bc:	4293      	cmp	r3, r2
3400b4be:	d31e      	bcc.n	3400b4fe <USB_SetTurnaroundTime+0x9e>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
3400b4c0:	4b1d      	ldr	r3, [pc, #116]	@ (3400b538 <USB_SetTurnaroundTime+0xd8>)
3400b4c2:	4a1e      	ldr	r2, [pc, #120]	@ (3400b53c <USB_SetTurnaroundTime+0xdc>)
3400b4c4:	440b      	add	r3, r1
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
3400b4c6:	4293      	cmp	r3, r2
3400b4c8:	bf2c      	ite	cs
3400b4ca:	2306      	movcs	r3, #6
3400b4cc:	2307      	movcc	r3, #7
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
3400b4ce:	68c2      	ldr	r2, [r0, #12]
3400b4d0:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
3400b4d4:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
3400b4d6:	68c2      	ldr	r2, [r0, #12]
3400b4d8:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
3400b4dc:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
3400b4de:	2000      	movs	r0, #0
3400b4e0:	4770      	bx	lr
      UsbTrd = 0xFU;
3400b4e2:	230f      	movs	r3, #15
3400b4e4:	e7f3      	b.n	3400b4ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
3400b4e6:	230e      	movs	r3, #14
3400b4e8:	e7f1      	b.n	3400b4ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
3400b4ea:	230d      	movs	r3, #13
3400b4ec:	e7ef      	b.n	3400b4ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
3400b4ee:	230c      	movs	r3, #12
3400b4f0:	e7ed      	b.n	3400b4ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
3400b4f2:	230b      	movs	r3, #11
3400b4f4:	e7eb      	b.n	3400b4ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
3400b4f6:	230a      	movs	r3, #10
3400b4f8:	e7e9      	b.n	3400b4ce <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
3400b4fa:	2309      	movs	r3, #9
3400b4fc:	e7e7      	b.n	3400b4ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
3400b4fe:	2308      	movs	r3, #8
3400b500:	e7e5      	b.n	3400b4ce <USB_SetTurnaroundTime+0x6e>
3400b502:	bf00      	nop
3400b504:	ff275340 	.word	0xff275340
3400b508:	000c34ff 	.word	0x000c34ff
3400b50c:	ff1b1e40 	.word	0xff1b1e40
3400b510:	000f423f 	.word	0x000f423f
3400b514:	00124f7f 	.word	0x00124f7f
3400b518:	0013d620 	.word	0x0013d620
3400b51c:	fee5b660 	.word	0xfee5b660
3400b520:	0016e35f 	.word	0x0016e35f
3400b524:	feced300 	.word	0xfeced300
3400b528:	001b7740 	.word	0x001b7740
3400b52c:	feb35bc0 	.word	0xfeb35bc0
3400b530:	002191c0 	.word	0x002191c0
3400b534:	00387520 	.word	0x00387520
3400b538:	fe5954e0 	.word	0xfe5954e0
3400b53c:	00419ce0 	.word	0x00419ce0

3400b540 <USB_FlushTxFifo>:
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  __IO uint32_t count = 0U;
3400b540:	2300      	movs	r3, #0
{
3400b542:	4602      	mov	r2, r0
3400b544:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b546:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b548:	9b01      	ldr	r3, [sp, #4]
3400b54a:	3301      	adds	r3, #1
3400b54c:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b54e:	9b01      	ldr	r3, [sp, #4]
3400b550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b554:	d815      	bhi.n	3400b582 <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b556:	6913      	ldr	r3, [r2, #16]
3400b558:	2b00      	cmp	r3, #0
3400b55a:	daf5      	bge.n	3400b548 <USB_FlushTxFifo+0x8>

  /* Flush TX Fifo */
  count = 0U;
3400b55c:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b55e:	0189      	lsls	r1, r1, #6
3400b560:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
3400b564:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
3400b566:	6111      	str	r1, [r2, #16]

  do
  {
    count++;
3400b568:	9b01      	ldr	r3, [sp, #4]
3400b56a:	3301      	adds	r3, #1
3400b56c:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b56e:	9b01      	ldr	r3, [sp, #4]
3400b570:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b574:	d805      	bhi.n	3400b582 <USB_FlushTxFifo+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
3400b576:	6910      	ldr	r0, [r2, #16]
3400b578:	f010 0020 	ands.w	r0, r0, #32
3400b57c:	d1f4      	bne.n	3400b568 <USB_FlushTxFifo+0x28>

  return HAL_OK;
}
3400b57e:	b002      	add	sp, #8
3400b580:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b582:	2003      	movs	r0, #3
3400b584:	e7fb      	b.n	3400b57e <USB_FlushTxFifo+0x3e>

3400b586 <USB_FlushRxFifo>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
3400b586:	2300      	movs	r3, #0
{
3400b588:	4602      	mov	r2, r0
3400b58a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b58c:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
3400b58e:	9b01      	ldr	r3, [sp, #4]
3400b590:	3301      	adds	r3, #1
3400b592:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b594:	9b01      	ldr	r3, [sp, #4]
3400b596:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b59a:	d813      	bhi.n	3400b5c4 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
3400b59c:	6913      	ldr	r3, [r2, #16]
3400b59e:	2b00      	cmp	r3, #0
3400b5a0:	daf5      	bge.n	3400b58e <USB_FlushRxFifo+0x8>

  /* Flush RX Fifo */
  count = 0U;
3400b5a2:	2300      	movs	r3, #0
3400b5a4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
3400b5a6:	2310      	movs	r3, #16
3400b5a8:	6113      	str	r3, [r2, #16]

  do
  {
    count++;
3400b5aa:	9b01      	ldr	r3, [sp, #4]
3400b5ac:	3301      	adds	r3, #1
3400b5ae:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
3400b5b0:	9b01      	ldr	r3, [sp, #4]
3400b5b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
3400b5b6:	d805      	bhi.n	3400b5c4 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
3400b5b8:	6910      	ldr	r0, [r2, #16]
3400b5ba:	f010 0010 	ands.w	r0, r0, #16
3400b5be:	d1f4      	bne.n	3400b5aa <USB_FlushRxFifo+0x24>

  return HAL_OK;
}
3400b5c0:	b002      	add	sp, #8
3400b5c2:	4770      	bx	lr
      return HAL_TIMEOUT;
3400b5c4:	2003      	movs	r0, #3
3400b5c6:	e7fb      	b.n	3400b5c0 <USB_FlushRxFifo+0x3a>

3400b5c8 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
3400b5c8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
3400b5cc:	f013 0006 	ands.w	r0, r3, #6
3400b5d0:	d004      	beq.n	3400b5dc <USB_GetDevSpeed+0x14>
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
3400b5d2:	f013 0f02 	tst.w	r3, #2
3400b5d6:	bf14      	ite	ne
3400b5d8:	2002      	movne	r0, #2
3400b5da:	200f      	moveq	r0, #15
  }

  return speed;
}
3400b5dc:	4770      	bx	lr

3400b5de <USB_ActivateEndpoint>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b5de:	2201      	movs	r2, #1
{
3400b5e0:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
3400b5e2:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b5e4:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
3400b5e8:	f004 050f 	and.w	r5, r4, #15
3400b5ec:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
3400b5ee:	784d      	ldrb	r5, [r1, #1]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b5f0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
3400b5f4:	2d01      	cmp	r5, #1
3400b5f6:	d119      	bne.n	3400b62c <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
3400b5f8:	69dd      	ldr	r5, [r3, #28]
3400b5fa:	432a      	orrs	r2, r5
3400b5fc:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
3400b5fe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b602:	041a      	lsls	r2, r3, #16
3400b604:	d410      	bmi.n	3400b628 <USB_ActivateEndpoint+0x4a>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b606:	688a      	ldr	r2, [r1, #8]
3400b608:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
3400b60c:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
3400b610:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
3400b612:	432b      	orrs	r3, r5
3400b614:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b618:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
3400b61c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b624:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
3400b628:	2000      	movs	r0, #0
3400b62a:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
3400b62c:	69dc      	ldr	r4, [r3, #28]
3400b62e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
3400b632:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
3400b634:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b638:	041b      	lsls	r3, r3, #16
3400b63a:	d4f5      	bmi.n	3400b628 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b63c:	688b      	ldr	r3, [r1, #8]
3400b63e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400b642:	f3c3 030a 	ubfx	r3, r3, #0, #11
3400b646:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
3400b648:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
3400b64a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
3400b64e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
3400b652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400b656:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400b65a:	e7e5      	b.n	3400b628 <USB_ActivateEndpoint+0x4a>

3400b65c <USB_EPStopXfer>:
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  __IO uint32_t count = 0U;
3400b65c:	2300      	movs	r3, #0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* IN endpoint */
  if (ep->is_in == 1U)
3400b65e:	784a      	ldrb	r2, [r1, #1]
{
3400b660:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
3400b662:	9301      	str	r3, [sp, #4]
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b664:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400b666:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b668:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
3400b66c:	d11e      	bne.n	3400b6ac <USB_EPStopXfer+0x50>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
3400b66e:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
3400b672:	58c2      	ldr	r2, [r0, r3]
3400b674:	18c1      	adds	r1, r0, r3
3400b676:	2a00      	cmp	r2, #0
3400b678:	db02      	blt.n	3400b680 <USB_EPStopXfer+0x24>
  HAL_StatusTypeDef ret = HAL_OK;
3400b67a:	2000      	movs	r0, #0
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
    }
  }

  return ret;
}
3400b67c:	b002      	add	sp, #8
3400b67e:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
3400b680:	58c2      	ldr	r2, [r0, r3]
3400b682:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400b686:	50c2      	str	r2, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
3400b688:	58c2      	ldr	r2, [r0, r3]
3400b68a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400b68e:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400b690:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400b694:	9b01      	ldr	r3, [sp, #4]
3400b696:	3301      	adds	r3, #1
3400b698:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400b69a:	9b01      	ldr	r3, [sp, #4]
3400b69c:	4293      	cmp	r3, r2
3400b69e:	d901      	bls.n	3400b6a4 <USB_EPStopXfer+0x48>
          ret = HAL_ERROR;
3400b6a0:	2001      	movs	r0, #1
3400b6a2:	e7eb      	b.n	3400b67c <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
3400b6a4:	680b      	ldr	r3, [r1, #0]
3400b6a6:	2b00      	cmp	r3, #0
3400b6a8:	dbf4      	blt.n	3400b694 <USB_EPStopXfer+0x38>
3400b6aa:	e7e6      	b.n	3400b67a <USB_EPStopXfer+0x1e>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400b6ac:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
3400b6b0:	58c2      	ldr	r2, [r0, r3]
3400b6b2:	18c1      	adds	r1, r0, r3
3400b6b4:	2a00      	cmp	r2, #0
3400b6b6:	dae0      	bge.n	3400b67a <USB_EPStopXfer+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
3400b6b8:	58c2      	ldr	r2, [r0, r3]
3400b6ba:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
3400b6be:	50c2      	str	r2, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
3400b6c0:	58c2      	ldr	r2, [r0, r3]
3400b6c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3400b6c6:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
3400b6c8:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
3400b6cc:	9b01      	ldr	r3, [sp, #4]
3400b6ce:	3301      	adds	r3, #1
3400b6d0:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
3400b6d2:	9b01      	ldr	r3, [sp, #4]
3400b6d4:	4293      	cmp	r3, r2
3400b6d6:	d8e3      	bhi.n	3400b6a0 <USB_EPStopXfer+0x44>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
3400b6d8:	680b      	ldr	r3, [r1, #0]
3400b6da:	2b00      	cmp	r3, #0
3400b6dc:	dbf6      	blt.n	3400b6cc <USB_EPStopXfer+0x70>
3400b6de:	e7cc      	b.n	3400b67a <USB_EPStopXfer+0x1e>

3400b6e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
3400b6e0:	b510      	push	{r4, lr}
3400b6e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t *pSrc = src;
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
3400b6e6:	b93c      	cbnz	r4, 3400b6f8 <USB_WritePacket+0x18>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
3400b6e8:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400b6ea:	3201      	adds	r2, #1
3400b6ec:	089b      	lsrs	r3, r3, #2
3400b6ee:	eb00 3002 	add.w	r0, r0, r2, lsl #12
3400b6f2:	3301      	adds	r3, #1
    for (i = 0U; i < count32b; i++)
3400b6f4:	3b01      	subs	r3, #1
3400b6f6:	d101      	bne.n	3400b6fc <USB_WritePacket+0x1c>
      pSrc++;
    }
  }

  return HAL_OK;
}
3400b6f8:	2000      	movs	r0, #0
3400b6fa:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
3400b6fc:	f851 2b04 	ldr.w	r2, [r1], #4
3400b700:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
3400b702:	e7f7      	b.n	3400b6f4 <USB_WritePacket+0x14>

3400b704 <USB_EPStartXfer>:
{
3400b704:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
3400b708:	784b      	ldrb	r3, [r1, #1]
{
3400b70a:	4616      	mov	r6, r2
  uint32_t epnum = (uint32_t)ep->num;
3400b70c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
3400b70e:	2b01      	cmp	r3, #1
    if (ep->xfer_len == 0U)
3400b710:	690c      	ldr	r4, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
3400b712:	790f      	ldrb	r7, [r1, #4]
3400b714:	f8df e1e8 	ldr.w	lr, [pc, #488]	@ 3400b900 <USB_EPStartXfer+0x1fc>
3400b718:	f8df 81e8 	ldr.w	r8, [pc, #488]	@ 3400b904 <USB_EPStartXfer+0x200>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b71c:	eb00 1542 	add.w	r5, r0, r2, lsl #5
  if (ep->is_in == 1U)
3400b720:	f040 8097 	bne.w	3400b852 <USB_EPStartXfer+0x14e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b724:	f505 6c10 	add.w	ip, r5, #2304	@ 0x900
3400b728:	f8dc 3010 	ldr.w	r3, [ip, #16]
    if (ep->xfer_len == 0U)
3400b72c:	bb74      	cbnz	r4, 3400b78c <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b72e:	ea03 030e 	and.w	r3, r3, lr
3400b732:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400b736:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b73a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
3400b73e:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400b742:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b746:	ea03 0308 	and.w	r3, r3, r8
    if (dma == 1U)
3400b74a:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400b74c:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400b750:	d157      	bne.n	3400b802 <USB_EPStartXfer+0xfe>
      if ((uint32_t)ep->dma_addr != 0U)
3400b752:	69cb      	ldr	r3, [r1, #28]
3400b754:	b10b      	cbz	r3, 3400b75a <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
3400b756:	f8cc 3014 	str.w	r3, [ip, #20]
      if (ep->type == EP_TYPE_ISOC)
3400b75a:	2f01      	cmp	r7, #1
3400b75c:	d10c      	bne.n	3400b778 <USB_EPStartXfer+0x74>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b75e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400b762:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400b766:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400b76a:	bf0c      	ite	eq
3400b76c:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400b770:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400b774:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b778:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
3400b77c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b780:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
}
3400b784:	2000      	movs	r0, #0
3400b786:	b002      	add	sp, #8
3400b788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
3400b78c:	ea03 0308 	and.w	r3, r3, r8
3400b790:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
3400b794:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b798:	ea03 030e 	and.w	r3, r3, lr
3400b79c:	f8cc 3010 	str.w	r3, [ip, #16]
        if (ep->xfer_len > ep->maxpacket)
3400b7a0:	688b      	ldr	r3, [r1, #8]
      if (epnum == 0U)
3400b7a2:	b97a      	cbnz	r2, 3400b7c4 <USB_EPStartXfer+0xc0>
        if (ep->xfer_len > ep->maxpacket)
3400b7a4:	429c      	cmp	r4, r3
          ep->xfer_len = ep->maxpacket;
3400b7a6:	bf88      	it	hi
3400b7a8:	610b      	strhi	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
3400b7aa:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b7ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400b7b2:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
3400b7b6:	690b      	ldr	r3, [r1, #16]
3400b7b8:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400b7bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b7c0:	4323      	orrs	r3, r4
3400b7c2:	e7c2      	b.n	3400b74a <USB_EPStartXfer+0x46>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400b7c4:	441c      	add	r4, r3
3400b7c6:	3c01      	subs	r4, #1
3400b7c8:	fbb4 f4f3 	udiv	r4, r4, r3
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400b7cc:	4b4b      	ldr	r3, [pc, #300]	@ (3400b8fc <USB_EPStartXfer+0x1f8>)
3400b7ce:	f8dc e010 	ldr.w	lr, [ip, #16]
3400b7d2:	fa1f f884 	uxth.w	r8, r4
3400b7d6:	ea03 44c4 	and.w	r4, r3, r4, lsl #19
3400b7da:	ea44 040e 	orr.w	r4, r4, lr
        if (ep->type == EP_TYPE_ISOC)
3400b7de:	2f01      	cmp	r7, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
3400b7e0:	f8cc 4010 	str.w	r4, [ip, #16]
        if (ep->type == EP_TYPE_ISOC)
3400b7e4:	d1e7      	bne.n	3400b7b6 <USB_EPStartXfer+0xb2>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
3400b7e6:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b7ea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
3400b7ee:	f8cc 3010 	str.w	r3, [ip, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
3400b7f2:	f8dc 4010 	ldr.w	r4, [ip, #16]
3400b7f6:	ea4f 7348 	mov.w	r3, r8, lsl #29
3400b7fa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
3400b7fe:	4323      	orrs	r3, r4
3400b800:	e7d7      	b.n	3400b7b2 <USB_EPStartXfer+0xae>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b802:	f8d5 3900 	ldr.w	r3, [r5, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
3400b806:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
3400b808:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b80c:	f8c5 3900 	str.w	r3, [r5, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
3400b810:	690b      	ldr	r3, [r1, #16]
      if (ep->type != EP_TYPE_ISOC)
3400b812:	d00b      	beq.n	3400b82c <USB_EPStartXfer+0x128>
        if (ep->xfer_len > 0U)
3400b814:	2b00      	cmp	r3, #0
3400b816:	d0b5      	beq.n	3400b784 <USB_EPStartXfer+0x80>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
3400b818:	2301      	movs	r3, #1
3400b81a:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
3400b81e:	f002 020f 	and.w	r2, r2, #15
3400b822:	4093      	lsls	r3, r2
3400b824:	430b      	orrs	r3, r1
3400b826:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
3400b82a:	e7ab      	b.n	3400b784 <USB_EPStartXfer+0x80>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b82c:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400b830:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b832:	f414 7f80 	tst.w	r4, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
3400b836:	f8d5 4900 	ldr.w	r4, [r5, #2304]	@ 0x900
3400b83a:	bf0c      	ite	eq
3400b83c:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
3400b840:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
3400b844:	f8c5 4900 	str.w	r4, [r5, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
3400b848:	9600      	str	r6, [sp, #0]
3400b84a:	68c9      	ldr	r1, [r1, #12]
3400b84c:	f7ff ff48 	bl	3400b6e0 <USB_WritePacket>
3400b850:	e798      	b.n	3400b784 <USB_EPStartXfer+0x80>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
3400b852:	f8d5 3b10 	ldr.w	r3, [r5, #2832]	@ 0xb10
3400b856:	f505 6c30 	add.w	ip, r5, #2816	@ 0xb00
3400b85a:	ea03 0308 	and.w	r3, r3, r8
3400b85e:	f8cc 3010 	str.w	r3, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
3400b862:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b866:	ea03 030e 	and.w	r3, r3, lr
3400b86a:	f8cc 3010 	str.w	r3, [ip, #16]
        ep->xfer_len = ep->maxpacket;
3400b86e:	688b      	ldr	r3, [r1, #8]
    if (epnum == 0U)
3400b870:	bb5a      	cbnz	r2, 3400b8ca <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
3400b872:	b104      	cbz	r4, 3400b876 <USB_EPStartXfer+0x172>
        ep->xfer_len = ep->maxpacket;
3400b874:	610b      	str	r3, [r1, #16]
      ep->xfer_size = ep->maxpacket;
3400b876:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
3400b878:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400b87c:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b880:	4313      	orrs	r3, r2
3400b882:	f8cc 3010 	str.w	r3, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400b886:	f8dc 3010 	ldr.w	r3, [ip, #16]
3400b88a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    if (dma == 1U)
3400b88e:	2e01      	cmp	r6, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400b890:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
3400b894:	d103      	bne.n	3400b89e <USB_EPStartXfer+0x19a>
      if ((uint32_t)ep->xfer_buff != 0U)
3400b896:	68cb      	ldr	r3, [r1, #12]
3400b898:	b10b      	cbz	r3, 3400b89e <USB_EPStartXfer+0x19a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
3400b89a:	f8cc 3014 	str.w	r3, [ip, #20]
    if (ep->type == EP_TYPE_ISOC)
3400b89e:	2f01      	cmp	r7, #1
3400b8a0:	d10c      	bne.n	3400b8bc <USB_EPStartXfer+0x1b8>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
3400b8a2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
3400b8a6:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
3400b8aa:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400b8ae:	bf0c      	ite	eq
3400b8b0:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
3400b8b4:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
3400b8b8:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
3400b8bc:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	@ 0xb00
3400b8c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
3400b8c4:	f8c5 3b00 	str.w	r3, [r5, #2816]	@ 0xb00
3400b8c8:	e75c      	b.n	3400b784 <USB_EPStartXfer+0x80>
      if (ep->xfer_len == 0U)
3400b8ca:	2c00      	cmp	r4, #0
3400b8cc:	d0d4      	beq.n	3400b878 <USB_EPStartXfer+0x174>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
3400b8ce:	441c      	add	r4, r3
3400b8d0:	3c01      	subs	r4, #1
3400b8d2:	fbb4 f4f3 	udiv	r4, r4, r3
3400b8d6:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
3400b8d8:	4363      	muls	r3, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400b8da:	4a08      	ldr	r2, [pc, #32]	@ (3400b8fc <USB_EPStartXfer+0x1f8>)
3400b8dc:	f8dc e010 	ldr.w	lr, [ip, #16]
3400b8e0:	ea02 42c4 	and.w	r2, r2, r4, lsl #19
3400b8e4:	ea42 020e 	orr.w	r2, r2, lr
        ep->xfer_size = ep->maxpacket * pktcnt;
3400b8e8:	620b      	str	r3, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
3400b8ea:	f8cc 2010 	str.w	r2, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
3400b8ee:	f8dc 2010 	ldr.w	r2, [ip, #16]
3400b8f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
3400b8f6:	4313      	orrs	r3, r2
3400b8f8:	e7c9      	b.n	3400b88e <USB_EPStartXfer+0x18a>
3400b8fa:	bf00      	nop
3400b8fc:	1ff80000 	.word	0x1ff80000
3400b900:	e007ffff 	.word	0xe007ffff
3400b904:	fff80000 	.word	0xfff80000

3400b908 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
3400b908:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
  uint16_t remaining_bytes = len % 4U;

  for (i = 0U; i < count32b; i++)
3400b90a:	2500      	movs	r5, #0
  uint32_t count32b = (uint32_t)len >> 2U;
3400b90c:	0894      	lsrs	r4, r2, #2
  uint16_t remaining_bytes = len % 4U;
3400b90e:	42ac      	cmp	r4, r5
{
3400b910:	4603      	mov	r3, r0
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400b912:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
3400b916:	f104 0001 	add.w	r0, r4, #1
3400b91a:	bf08      	it	eq
3400b91c:	2001      	moveq	r0, #1
  uint16_t remaining_bytes = len % 4U;
3400b91e:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
3400b922:	3801      	subs	r0, #1
3400b924:	d110      	bne.n	3400b948 <USB_ReadPacket+0x40>
3400b926:	eb01 0084 	add.w	r0, r1, r4, lsl #2
    pDest++;
    pDest++;
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
3400b92a:	b162      	cbz	r2, 3400b946 <USB_ReadPacket+0x3e>
  {
    i = 0U;
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
3400b92c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400b930:	681c      	ldr	r4, [r3, #0]
    i = 0U;
3400b932:	2300      	movs	r3, #0

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
3400b934:	00d9      	lsls	r1, r3, #3
3400b936:	fa24 f101 	lsr.w	r1, r4, r1
3400b93a:	54c1      	strb	r1, [r0, r3]
      i++;
3400b93c:	3301      	adds	r3, #1
      pDest++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
3400b93e:	b299      	uxth	r1, r3
3400b940:	428a      	cmp	r2, r1
3400b942:	d1f7      	bne.n	3400b934 <USB_ReadPacket+0x2c>
      pDest++;
3400b944:	4410      	add	r0, r2
  }

  return ((void *)pDest);
}
3400b946:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
3400b948:	6837      	ldr	r7, [r6, #0]
3400b94a:	f841 7025 	str.w	r7, [r1, r5, lsl #2]
  for (i = 0U; i < count32b; i++)
3400b94e:	3501      	adds	r5, #1
3400b950:	e7e7      	b.n	3400b922 <USB_ReadPacket+0x1a>

3400b952 <USB_EPSetStall>:
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;

  if (ep->is_in == 1U)
3400b952:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
3400b954:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
3400b956:	2a01      	cmp	r2, #1
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b958:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
3400b95c:	d112      	bne.n	3400b984 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b95e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
3400b962:	2a00      	cmp	r2, #0
3400b964:	db06      	blt.n	3400b974 <USB_EPSetStall+0x22>
3400b966:	b12b      	cbz	r3, 3400b974 <USB_EPSetStall+0x22>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
3400b968:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b96c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400b970:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
3400b974:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400b978:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400b97c:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
  }

  return HAL_OK;
}
3400b980:	2000      	movs	r0, #0
3400b982:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
3400b984:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
3400b988:	2a00      	cmp	r2, #0
3400b98a:	db06      	blt.n	3400b99a <USB_EPSetStall+0x48>
3400b98c:	b12b      	cbz	r3, 3400b99a <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
3400b98e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b992:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
3400b996:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
3400b99a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
3400b99e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
3400b9a2:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
3400b9a6:	e7eb      	b.n	3400b980 <USB_EPSetStall+0x2e>

3400b9a8 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
3400b9a8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
3400b9aa:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
3400b9ac:	4010      	ands	r0, r2
3400b9ae:	4770      	bx	lr

3400b9b0 <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400b9b0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400b9b4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400b9b8:	69c0      	ldr	r0, [r0, #28]
3400b9ba:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
3400b9bc:	0c00      	lsrs	r0, r0, #16
3400b9be:	4770      	bx	lr

3400b9c0 <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
3400b9c0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
3400b9c4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
3400b9c8:	69c0      	ldr	r0, [r0, #28]
3400b9ca:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
3400b9cc:	b280      	uxth	r0, r0
3400b9ce:	4770      	bx	lr

3400b9d0 <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400b9d0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400b9d4:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
3400b9d8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
3400b9dc:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
3400b9de:	4010      	ands	r0, r2
3400b9e0:	4770      	bx	lr

3400b9e2 <USB_ReadDevInEPInterrupt>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
3400b9e2:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
3400b9e6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400b9ea:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400b9ee:	f001 010f 	and.w	r1, r1, #15
3400b9f2:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400b9f4:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400b9f8:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
3400b9fa:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
3400b9fc:	b2db      	uxtb	r3, r3
3400b9fe:	4313      	orrs	r3, r2

  return tmpreg;
}
3400ba00:	4018      	ands	r0, r3
3400ba02:	4770      	bx	lr

3400ba04 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
3400ba04:	6940      	ldr	r0, [r0, #20]
}
3400ba06:	f000 0001 	and.w	r0, r0, #1
3400ba0a:	4770      	bx	lr

3400ba0c <USB_ActivateSetup>:
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
3400ba0c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
3400ba10:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
3400ba14:	f023 0307 	bic.w	r3, r3, #7
3400ba18:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
3400ba1c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
3400ba20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
3400ba24:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804

  return HAL_OK;
}
3400ba28:	2000      	movs	r0, #0
3400ba2a:	4770      	bx	lr

3400ba2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
3400ba2c:	b530      	push	{r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
3400ba2e:	6c05      	ldr	r5, [r0, #64]	@ 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400ba30:	4c10      	ldr	r4, [pc, #64]	@ (3400ba74 <USB_EP0_OutStart+0x48>)
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400ba32:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
3400ba36:	42a5      	cmp	r5, r4
3400ba38:	d903      	bls.n	3400ba42 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
3400ba3a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
3400ba3e:	2c00      	cmp	r4, #0
3400ba40:	db16      	blt.n	3400ba70 <USB_EP0_OutStart+0x44>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
3400ba42:	2400      	movs	r4, #0
3400ba44:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400ba46:	691c      	ldr	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;

  if (dma == 1U)
3400ba48:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
3400ba4a:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
3400ba4e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
3400ba50:	691c      	ldr	r4, [r3, #16]
3400ba52:	f044 0418 	orr.w	r4, r4, #24
3400ba56:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
3400ba58:	691c      	ldr	r4, [r3, #16]
3400ba5a:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
3400ba5e:	611c      	str	r4, [r3, #16]
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
3400ba60:	bf01      	itttt	eq
3400ba62:	615a      	streq	r2, [r3, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
3400ba64:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	@ 0xb00
3400ba68:	f043 2380 	orreq.w	r3, r3, #2147516416	@ 0x80008000
3400ba6c:	f8c0 3b00 	streq.w	r3, [r0, #2816]	@ 0xb00
  }

  return HAL_OK;
}
3400ba70:	2000      	movs	r0, #0
3400ba72:	bd30      	pop	{r4, r5, pc}
3400ba74:	4f54300a 	.word	0x4f54300a

3400ba78 <CMW_CAMERA_GetDCMIPPHandle>:
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
    return &hcamera_dcmipp;
}
3400ba78:	4800      	ldr	r0, [pc, #0]	@ (3400ba7c <CMW_CAMERA_GetDCMIPPHandle+0x4>)
3400ba7a:	4770      	bx	lr
3400ba7c:	340126dc 	.word	0x340126dc

3400ba80 <CMW_CAMERA_PIPE_VsyncEventCallback>:
/**
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
3400ba80:	2000      	movs	r0, #0
3400ba82:	4770      	bx	lr

3400ba84 <CMW_CAMERA_PIPE_FrameEventCallback>:
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
  UNUSED(pipe);

  return HAL_OK;
}
3400ba84:	2000      	movs	r0, #0
3400ba86:	4770      	bx	lr

3400ba88 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
3400ba88:	4b05      	ldr	r3, [pc, #20]	@ (3400baa0 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x18>)
{
3400ba8a:	b510      	push	{r4, lr}
  if(Camera_Drv.VsyncEventCallback != NULL)
3400ba8c:	691b      	ldr	r3, [r3, #16]
{
3400ba8e:	460c      	mov	r4, r1
  if(Camera_Drv.VsyncEventCallback != NULL)
3400ba90:	b10b      	cbz	r3, 3400ba96 <HAL_DCMIPP_PIPE_VsyncEventCallback+0xe>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
3400ba92:	4804      	ldr	r0, [pc, #16]	@ (3400baa4 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>)
3400ba94:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
3400ba96:	4620      	mov	r0, r4
3400ba98:	f7ff fff2 	bl	3400ba80 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
3400ba9c:	bd10      	pop	{r4, pc}
3400ba9e:	bf00      	nop
3400baa0:	34012674 	.word	0x34012674
3400baa4:	34012530 	.word	0x34012530

3400baa8 <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
3400baa8:	4b05      	ldr	r3, [pc, #20]	@ (3400bac0 <HAL_DCMIPP_PIPE_FrameEventCallback+0x18>)
{
3400baaa:	b510      	push	{r4, lr}
  if(Camera_Drv.FrameEventCallback != NULL)
3400baac:	695b      	ldr	r3, [r3, #20]
{
3400baae:	460c      	mov	r4, r1
  if(Camera_Drv.FrameEventCallback != NULL)
3400bab0:	b10b      	cbz	r3, 3400bab6 <HAL_DCMIPP_PIPE_FrameEventCallback+0xe>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
3400bab2:	4804      	ldr	r0, [pc, #16]	@ (3400bac4 <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>)
3400bab4:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
3400bab6:	4620      	mov	r0, r4
3400bab8:	f7ff ffe4 	bl	3400ba84 <CMW_CAMERA_PIPE_FrameEventCallback>
}
3400babc:	bd10      	pop	{r4, pc}
3400babe:	bf00      	nop
3400bac0:	34012674 	.word	0x34012674
3400bac4:	34012530 	.word	0x34012530

3400bac8 <DMA2D_IRQHandler>:
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(dma2d_current);
3400bac8:	4b01      	ldr	r3, [pc, #4]	@ (3400bad0 <DMA2D_IRQHandler+0x8>)
3400baca:	6818      	ldr	r0, [r3, #0]
3400bacc:	f7f7 ba62 	b.w	34002f94 <HAL_DMA2D_IRQHandler>
3400bad0:	340126e8 	.word	0x340126e8

3400bad4 <USB1_OTG_HS_IRQHandler>:
  HAL_NVIC_EnableIRQ(USB1_OTG_HS_IRQn);
}

void USB1_OTG_HS_IRQHandler(void)
{
  UVCL_IRQHandler();
3400bad4:	f000 b800 	b.w	3400bad8 <UVCL_IRQHandler>

3400bad8 <UVCL_IRQHandler>:
void UVCL_IRQHandler()
{
#if defined(UVCL_USBD_USE_THREADX) || defined(UVCL_USBD_USE_FREERTOS)
  UVCL_stm32_usbd_IRQHandler();
#elif defined(UVC_LIB_USE_USBX)
  UVCL_stm32_usbx_IRQHandler();
3400bad8:	f000 b800 	b.w	3400badc <UVCL_stm32_usbx_IRQHandler>

3400badc <UVCL_stm32_usbx_IRQHandler>:
    __enable_irq();
}
#endif

void UVCL_stm32_usbx_IRQHandler()
{
3400badc:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&uvcl_pcd_handle);
3400bade:	4804      	ldr	r0, [pc, #16]	@ (3400baf0 <UVCL_stm32_usbx_IRQHandler+0x14>)
3400bae0:	f7f7 fdee 	bl	340036c0 <HAL_PCD_IRQHandler>
    assert(ret == pdTRUE);
    HAL_NVIC_DisableIRQ(irqn_type);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
  }
#else
  ux_system_tasks_run();
3400bae4:	f000 fa7e 	bl	3400bfe4 <_ux_system_tasks_run>
  ux_system_tasks_run();
#endif
#endif
}
3400bae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ux_system_tasks_run();
3400baec:	f000 ba7a 	b.w	3400bfe4 <_ux_system_tasks_run>
3400baf0:	340126ec 	.word	0x340126ec

3400baf4 <HAL_PCD_SetupStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400baf4:	4b24      	ldr	r3, [pc, #144]	@ (3400bb88 <HAL_PCD_SetupStageCallback+0x94>)
{
3400baf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bafa:	681b      	ldr	r3, [r3, #0]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bafc:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bb00:	69dd      	ldr	r5, [r3, #28]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bb02:	2208      	movs	r2, #8
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
3400bb04:	686c      	ldr	r4, [r5, #4]
{
3400bb06:	4606      	mov	r6, r0
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
3400bb08:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
3400bb0c:	f000 fa9e 	bl	3400c04c <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bb10:	2301      	movs	r3, #1
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bb12:	2200      	movs	r2, #0
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400bb14:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bb16:	68ab      	ldr	r3, [r5, #8]
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bb18:	63a2      	str	r2, [r4, #56]	@ 0x38
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bb1a:	f023 030e 	bic.w	r3, r3, #14
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bb1e:	6462      	str	r2, [r4, #68]	@ 0x44
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
3400bb20:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
3400bb22:	f994 105c 	ldrsb.w	r1, [r4, #92]	@ 0x5c
3400bb26:	4291      	cmp	r1, r2
3400bb28:	da04      	bge.n	3400bb34 <HAL_PCD_SetupStageCallback+0x40>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
3400bb2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb2e:	60ab      	str	r3, [r5, #8]
                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
            }
        }
    }
}
3400bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
3400bb34:	73aa      	strb	r2, [r5, #14]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
3400bb36:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
3400bb3a:	b92a      	cbnz	r2, 3400bb48 <HAL_PCD_SetupStageCallback+0x54>
3400bb3c:	f894 2063 	ldrb.w	r2, [r4, #99]	@ 0x63
3400bb40:	b912      	cbnz	r2, 3400bb48 <HAL_PCD_SetupStageCallback+0x54>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3400bb46:	e7f2      	b.n	3400bb2e <HAL_PCD_SetupStageCallback+0x3a>
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bb48:	f104 0062 	add.w	r0, r4, #98	@ 0x62
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400bb4c:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bb4e:	f000 fa87 	bl	3400c060 <_ux_utility_short_get>
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400bb52:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
3400bb56:	4603      	mov	r3, r0
3400bb58:	f04f 0800 	mov.w	r8, #0
3400bb5c:	6360      	str	r0, [r4, #52]	@ 0x34
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
3400bb5e:	d907      	bls.n	3400bb70 <HAL_PCD_SetupStageCallback+0x7c>
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
3400bb60:	4639      	mov	r1, r7
3400bb62:	4628      	mov	r0, r5
3400bb64:	f000 f956 	bl	3400be14 <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb68:	68ab      	ldr	r3, [r5, #8]
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
3400bb6a:	f885 800c 	strb.w	r8, [r5, #12]
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
3400bb6e:	e7e8      	b.n	3400bb42 <HAL_PCD_SetupStageCallback+0x4e>
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400bb70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400bb72:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
3400bb76:	6322      	str	r2, [r4, #48]	@ 0x30
                HAL_PCD_EP_Receive(hpcd,
3400bb78:	4630      	mov	r0, r6
3400bb7a:	7bb9      	ldrb	r1, [r7, #14]
3400bb7c:	f7f7 fd15 	bl	340035aa <HAL_PCD_EP_Receive>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
3400bb80:	2302      	movs	r3, #2
3400bb82:	732b      	strb	r3, [r5, #12]
3400bb84:	e7d4      	b.n	3400bb30 <HAL_PCD_SetupStageCallback+0x3c>
3400bb86:	bf00      	nop
3400bb88:	34012bd0 	.word	0x34012bd0

3400bb8c <HAL_PCD_DataInStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bb8c:	4b31      	ldr	r3, [pc, #196]	@ (3400bc54 <HAL_PCD_DataInStageCallback+0xc8>)
{
3400bb8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bb92:	681b      	ldr	r3, [r3, #0]
3400bb94:	f001 0a0f 	and.w	sl, r1, #15
3400bb98:	69df      	ldr	r7, [r3, #28]
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bb9a:	eb0a 064a 	add.w	r6, sl, sl, lsl #1
3400bb9e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
{
3400bba2:	4680      	mov	r8, r0
3400bba4:	460d      	mov	r5, r1
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bba6:	6874      	ldr	r4, [r6, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400bba8:	2900      	cmp	r1, #0
3400bbaa:	d141      	bne.n	3400bc30 <HAL_PCD_DataInStageCallback+0xa4>

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
3400bbac:	230c      	movs	r3, #12
3400bbae:	fb03 730a 	mla	r3, r3, sl, r7
3400bbb2:	7b1b      	ldrb	r3, [r3, #12]
3400bbb4:	2b01      	cmp	r3, #1
3400bbb6:	d115      	bne.n	3400bbe4 <HAL_PCD_DataInStageCallback+0x58>
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
3400bbb8:	f8d4 9028 	ldr.w	r9, [r4, #40]	@ 0x28
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
3400bbbc:	460b      	mov	r3, r1
3400bbbe:	460a      	mov	r2, r1
3400bbc0:	f7f7 fcf3 	bl	340035aa <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
3400bbc4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400bbc6:	f8b9 0010 	ldrh.w	r0, [r9, #16]
3400bbca:	4281      	cmp	r1, r0
3400bbcc:	d820      	bhi.n	3400bc10 <HAL_PCD_DataInStageCallback+0x84>
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
3400bbce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400bbd0:	2b01      	cmp	r3, #1
3400bbd2:	d109      	bne.n	3400bbe8 <HAL_PCD_DataInStageCallback+0x5c>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
3400bbd4:	462b      	mov	r3, r5
3400bbd6:	462a      	mov	r2, r5
3400bbd8:	4640      	mov	r0, r8
3400bbda:	f899 100e 	ldrb.w	r1, [r9, #14]
3400bbde:	f7f7 fd0a 	bl	340035f6 <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400bbe2:	65a5      	str	r5, [r4, #88]	@ 0x58
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
3400bbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bbe8:	2302      	movs	r3, #2
3400bbea:	6223      	str	r3, [r4, #32]
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400bbec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bbee:	6465      	str	r5, [r4, #68]	@ 0x44
                    transfer_request -> ux_slave_transfer_request_actual_length =
3400bbf0:	63a3      	str	r3, [r4, #56]	@ 0x38
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bbf2:	68b3      	ldr	r3, [r6, #8]
3400bbf4:	f043 0308 	orr.w	r3, r3, #8
3400bbf8:	60b3      	str	r3, [r6, #8]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
3400bbfa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400bbfc:	b113      	cbz	r3, 3400bc04 <HAL_PCD_DataInStageCallback+0x78>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400bbfe:	f104 0020 	add.w	r0, r4, #32
3400bc02:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
3400bc04:	230c      	movs	r3, #12
3400bc06:	fb03 770a 	mla	r7, r3, sl, r7
3400bc0a:	2304      	movs	r3, #4
3400bc0c:	733b      	strb	r3, [r7, #12]
3400bc0e:	e7e9      	b.n	3400bbe4 <HAL_PCD_DataInStageCallback+0x58>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc10:	1a0b      	subs	r3, r1, r0
3400bc12:	4283      	cmp	r3, r0
3400bc14:	bf28      	it	cs
3400bc16:	4603      	movcs	r3, r0
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc18:	6b22      	ldr	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400bc1a:	1ac9      	subs	r1, r1, r3
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc1c:	4402      	add	r2, r0
                HAL_PCD_EP_Transmit(hpcd,
3400bc1e:	4640      	mov	r0, r8
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bc20:	6322      	str	r2, [r4, #48]	@ 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
3400bc22:	63e1      	str	r1, [r4, #60]	@ 0x3c
                HAL_PCD_EP_Transmit(hpcd,
3400bc24:	f899 100e 	ldrb.w	r1, [r9, #14]
}
3400bc28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bc2c:	f7f7 bce3 	b.w	340035f6 <HAL_PCD_EP_Transmit>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400bc30:	6da5      	ldr	r5, [r4, #88]	@ 0x58
3400bc32:	2300      	movs	r3, #0
            transfer_request -> ux_slave_transfer_request_requested_length)
3400bc34:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
3400bc36:	b125      	cbz	r5, 3400bc42 <HAL_PCD_DataInStageCallback+0xb6>
3400bc38:	b11a      	cbz	r2, 3400bc42 <HAL_PCD_DataInStageCallback+0xb6>
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bc3a:	461a      	mov	r2, r3
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
3400bc3c:	65a3      	str	r3, [r4, #88]	@ 0x58
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
3400bc3e:	63e3      	str	r3, [r4, #60]	@ 0x3c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
3400bc40:	e7f2      	b.n	3400bc28 <HAL_PCD_DataInStageCallback+0x9c>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bc42:	6463      	str	r3, [r4, #68]	@ 0x44
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bc44:	2302      	movs	r3, #2
3400bc46:	6223      	str	r3, [r4, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bc48:	68b3      	ldr	r3, [r6, #8]
            transfer_request -> ux_slave_transfer_request_actual_length =
3400bc4a:	63a2      	str	r2, [r4, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bc4c:	f043 0308 	orr.w	r3, r3, #8
3400bc50:	60b3      	str	r3, [r6, #8]
}
3400bc52:	e7c7      	b.n	3400bbe4 <HAL_PCD_DataInStageCallback+0x58>
3400bc54:	34012bd0 	.word	0x34012bd0

3400bc58 <HAL_PCD_DataOutStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bc58:	4a24      	ldr	r2, [pc, #144]	@ (3400bcec <HAL_PCD_DataOutStageCallback+0x94>)
{
3400bc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bc5e:	6812      	ldr	r2, [r2, #0]
3400bc60:	f001 070f 	and.w	r7, r1, #15
3400bc64:	69d2      	ldr	r2, [r2, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bc66:	eb07 0447 	add.w	r4, r7, r7, lsl #1
3400bc6a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
{
3400bc6e:	4606      	mov	r6, r0
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
3400bc70:	6865      	ldr	r5, [r4, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
3400bc72:	2900      	cmp	r1, #0
3400bc74:	d12f      	bne.n	3400bcd6 <HAL_PCD_DataOutStageCallback+0x7e>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
3400bc76:	230c      	movs	r3, #12
3400bc78:	fb03 2207 	mla	r2, r3, r7, r2
3400bc7c:	7b13      	ldrb	r3, [r2, #12]
3400bc7e:	2b02      	cmp	r3, #2
3400bc80:	d110      	bne.n	3400bca4 <HAL_PCD_DataOutStageCallback+0x4c>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
3400bc82:	6aaf      	ldr	r7, [r5, #40]	@ 0x28

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400bc84:	f7f7 fcaf 	bl	340035e6 <HAL_PCD_EP_GetRxCount>

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400bc88:	6bab      	ldr	r3, [r5, #56]	@ 0x38

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
                transfer_request -> ux_slave_transfer_request_requested_length)
3400bc8a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400bc8c:	4403      	add	r3, r0
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400bc8e:	4293      	cmp	r3, r2
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
3400bc90:	63ab      	str	r3, [r5, #56]	@ 0x38
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
3400bc92:	d812      	bhi.n	3400bcba <HAL_PCD_DataOutStageCallback+0x62>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
3400bc94:	d002      	beq.n	3400bc9c <HAL_PCD_DataOutStageCallback+0x44>
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
3400bc96:	8a3b      	ldrh	r3, [r7, #16]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
3400bc98:	4283      	cmp	r3, r0
3400bc9a:	d005      	beq.n	3400bca8 <HAL_PCD_DataOutStageCallback+0x50>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
3400bc9c:	68a3      	ldr	r3, [r4, #8]
3400bc9e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300

        /* The transfer is completed.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;

#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bca2:	60a3      	str	r3, [r4, #8]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
3400bca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bca8:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400bcaa:	4630      	mov	r0, r6
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
3400bcac:	441a      	add	r2, r3
3400bcae:	632a      	str	r2, [r5, #48]	@ 0x30
                    HAL_PCD_EP_Receive(hpcd,
3400bcb0:	7bb9      	ldrb	r1, [r7, #14]
}
3400bcb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    HAL_PCD_EP_Receive(hpcd,
3400bcb6:	f7f7 bc78 	b.w	340035aa <HAL_PCD_EP_Receive>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
3400bcba:	2327      	movs	r3, #39	@ 0x27
3400bcbc:	646b      	str	r3, [r5, #68]	@ 0x44
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bcbe:	68a3      	ldr	r3, [r4, #8]
3400bcc0:	f043 0308 	orr.w	r3, r3, #8
3400bcc4:	60a3      	str	r3, [r4, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
3400bcc6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
3400bcc8:	2b00      	cmp	r3, #0
3400bcca:	d0eb      	beq.n	3400bca4 <HAL_PCD_DataOutStageCallback+0x4c>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400bccc:	f105 0020 	add.w	r0, r5, #32
}
3400bcd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
3400bcd4:	4718      	bx	r3
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400bcd6:	f7f7 fc86 	bl	340035e6 <HAL_PCD_EP_GetRxCount>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
3400bcda:	2300      	movs	r3, #0
3400bcdc:	646b      	str	r3, [r5, #68]	@ 0x44
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
3400bcde:	2302      	movs	r3, #2
3400bce0:	622b      	str	r3, [r5, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bce2:	68a3      	ldr	r3, [r4, #8]
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
3400bce4:	63a8      	str	r0, [r5, #56]	@ 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
3400bce6:	f043 0308 	orr.w	r3, r3, #8
3400bcea:	e7da      	b.n	3400bca2 <HAL_PCD_DataOutStageCallback+0x4a>
3400bcec:	34012bd0 	.word	0x34012bd0

3400bcf0 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
3400bcf0:	b538      	push	{r3, r4, r5, lr}

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400bcf2:	4c0a      	ldr	r4, [pc, #40]	@ (3400bd1c <HAL_PCD_ResetCallback+0x2c>)
{
3400bcf4:	4605      	mov	r5, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400bcf6:	6823      	ldr	r3, [r4, #0]
3400bcf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400bcfa:	b10b      	cbz	r3, 3400bd00 <HAL_PCD_ResetCallback+0x10>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
3400bcfc:	f000 f902 	bl	3400bf04 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
3400bd00:	79ea      	ldrb	r2, [r5, #7]
    {
#ifdef PCD_SPEED_HIGH
    case PCD_SPEED_HIGH:

        /* We are connected at high speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400bd02:	6823      	ldr	r3, [r4, #0]
    switch(hpcd -> Init.speed)
3400bd04:	2a00      	cmp	r2, #0
3400bd06:	bf0c      	ite	eq
3400bd08:	2202      	moveq	r2, #2
3400bd0a:	2201      	movne	r2, #1
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
3400bd0c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
        break;
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
3400bd10:	f000 f88e 	bl	3400be30 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400bd14:	2201      	movs	r2, #1
3400bd16:	6823      	ldr	r3, [r4, #0]
3400bd18:	625a      	str	r2, [r3, #36]	@ 0x24
}
3400bd1a:	bd38      	pop	{r3, r4, r5, pc}
3400bd1c:	34012bd0 	.word	0x34012bd0

3400bd20 <HAL_PCD_ConnectCallback>:
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd20:	4b03      	ldr	r3, [pc, #12]	@ (3400bd30 <HAL_PCD_ConnectCallback+0x10>)
3400bd22:	681b      	ldr	r3, [r3, #0]
3400bd24:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd28:	b10b      	cbz	r3, 3400bd2e <HAL_PCD_ConnectCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
3400bd2a:	20f1      	movs	r0, #241	@ 0xf1
3400bd2c:	4718      	bx	r3
    }
}
3400bd2e:	4770      	bx	lr
3400bd30:	34012bd0 	.word	0x34012bd0

3400bd34 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
3400bd34:	b510      	push	{r4, lr}

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd36:	4c07      	ldr	r4, [pc, #28]	@ (3400bd54 <HAL_PCD_DisconnectCallback+0x20>)
3400bd38:	6823      	ldr	r3, [r4, #0]
3400bd3a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd3e:	b10b      	cbz	r3, 3400bd44 <HAL_PCD_DisconnectCallback+0x10>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
3400bd40:	20f2      	movs	r0, #242	@ 0xf2
3400bd42:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
3400bd44:	6823      	ldr	r3, [r4, #0]
3400bd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400bd48:	b11b      	cbz	r3, 3400bd52 <HAL_PCD_DisconnectCallback+0x1e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
    }
}
3400bd4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _ux_device_stack_disconnect();
3400bd4e:	f000 b8d9 	b.w	3400bf04 <_ux_device_stack_disconnect>
}
3400bd52:	bd10      	pop	{r4, pc}
3400bd54:	34012bd0 	.word	0x34012bd0

3400bd58 <HAL_PCD_SuspendCallback>:
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd58:	4b03      	ldr	r3, [pc, #12]	@ (3400bd68 <HAL_PCD_SuspendCallback+0x10>)
3400bd5a:	681b      	ldr	r3, [r3, #0]
3400bd5c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd60:	b10b      	cbz	r3, 3400bd66 <HAL_PCD_SuspendCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
3400bd62:	20f4      	movs	r0, #244	@ 0xf4
3400bd64:	4718      	bx	r3
    }
}
3400bd66:	4770      	bx	lr
3400bd68:	34012bd0 	.word	0x34012bd0

3400bd6c <HAL_PCD_ResumeCallback>:
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd6c:	4b03      	ldr	r3, [pc, #12]	@ (3400bd7c <HAL_PCD_ResumeCallback+0x10>)
3400bd6e:	681b      	ldr	r3, [r3, #0]
3400bd70:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd74:	b10b      	cbz	r3, 3400bd7a <HAL_PCD_ResumeCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
3400bd76:	20f3      	movs	r0, #243	@ 0xf3
3400bd78:	4718      	bx	r3
    }
}
3400bd7a:	4770      	bx	lr
3400bd7c:	34012bd0 	.word	0x34012bd0

3400bd80 <HAL_PCD_SOFCallback>:
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bd80:	4b03      	ldr	r3, [pc, #12]	@ (3400bd90 <HAL_PCD_SOFCallback+0x10>)
3400bd82:	681b      	ldr	r3, [r3, #0]
3400bd84:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bd88:	b10b      	cbz	r3, 3400bd8e <HAL_PCD_SOFCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
3400bd8a:	20f0      	movs	r0, #240	@ 0xf0
3400bd8c:	4718      	bx	r3
    }
}
3400bd8e:	4770      	bx	lr
3400bd90:	34012bd0 	.word	0x34012bd0

3400bd94 <HAL_PCD_ISOINIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bd94:	4b0e      	ldr	r3, [pc, #56]	@ (3400bdd0 <HAL_PCD_ISOINIncompleteCallback+0x3c>)
3400bd96:	f001 010f 	and.w	r1, r1, #15
3400bd9a:	681b      	ldr	r3, [r3, #0]
3400bd9c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400bda0:	69d8      	ldr	r0, [r3, #28]
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
#else
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0U)
3400bda2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400bda6:	688b      	ldr	r3, [r1, #8]
3400bda8:	07db      	lsls	r3, r3, #31
3400bdaa:	d50f      	bpl.n	3400bdcc <HAL_PCD_ISOINIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400bdac:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bdae:	7bd3      	ldrb	r3, [r2, #15]
3400bdb0:	f003 0303 	and.w	r3, r3, #3
3400bdb4:	2b01      	cmp	r3, #1
3400bdb6:	d109      	bne.n	3400bdcc <HAL_PCD_ISOINIncompleteCallback+0x38>
3400bdb8:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != 0)
3400bdbc:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bdbe:	2b00      	cmp	r3, #0
3400bdc0:	da04      	bge.n	3400bdcc <HAL_PCD_ISOINIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
3400bdc2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400bdc4:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400bdc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400bdc8:	f7f7 bc15 	b.w	340035f6 <HAL_PCD_EP_Transmit>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400bdcc:	4770      	bx	lr
3400bdce:	bf00      	nop
3400bdd0:	34012bd0 	.word	0x34012bd0

3400bdd4 <HAL_PCD_ISOOUTIncompleteCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400bdd4:	4b0e      	ldr	r3, [pc, #56]	@ (3400be10 <HAL_PCD_ISOOUTIncompleteCallback+0x3c>)
3400bdd6:	f001 010f 	and.w	r1, r1, #15
3400bdda:	681b      	ldr	r3, [r3, #0]
3400bddc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3400bde0:	69d8      	ldr	r0, [r3, #28]

    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
3400bde2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3400bde6:	688b      	ldr	r3, [r1, #8]
3400bde8:	07db      	lsls	r3, r3, #31
3400bdea:	d50f      	bpl.n	3400be0c <HAL_PCD_ISOOUTIncompleteCallback+0x38>
        return;

    endpoint = ed->ux_dcd_stm32_ed_endpoint;
3400bdec:	684a      	ldr	r2, [r1, #4]

    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bdee:	7bd3      	ldrb	r3, [r2, #15]
3400bdf0:	f003 0303 	and.w	r3, r3, #3
3400bdf4:	2b01      	cmp	r3, #1
3400bdf6:	d109      	bne.n	3400be0c <HAL_PCD_ISOOUTIncompleteCallback+0x38>
3400bdf8:	f992 300e 	ldrsb.w	r3, [r2, #14]
        (endpoint->ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == 0)
3400bdfc:	7b91      	ldrb	r1, [r2, #14]
    if ((endpoint->ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) == 1 &&
3400bdfe:	2b00      	cmp	r3, #0
3400be00:	db04      	blt.n	3400be0c <HAL_PCD_ISOOUTIncompleteCallback+0x38>
    {

        /* Incomplete, discard data and retry.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
3400be02:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3400be04:	6f00      	ldr	r0, [r0, #112]	@ 0x70
3400be06:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400be08:	f7f7 bbcf 	b.w	340035aa <HAL_PCD_EP_Receive>
                        endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer,
                        endpoint->ux_slave_endpoint_transfer_request.ux_slave_transfer_request_requested_length);
    }
}
3400be0c:	4770      	bx	lr
3400be0e:	bf00      	nop
3400be10:	34012bd0 	.word	0x34012bd0

3400be14 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
3400be14:	b508      	push	{r3, lr}

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
3400be16:	688b      	ldr	r3, [r1, #8]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400be18:	6f00      	ldr	r0, [r0, #112]	@ 0x70
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
3400be1a:	685a      	ldr	r2, [r3, #4]
3400be1c:	f042 0204 	orr.w	r2, r2, #4
3400be20:	605a      	str	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
3400be22:	7b89      	ldrb	r1, [r1, #14]
3400be24:	7a9b      	ldrb	r3, [r3, #10]
3400be26:	4319      	orrs	r1, r3
3400be28:	f7f7 fbff 	bl	3400362a <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
3400be2c:	2000      	movs	r0, #0
3400be2e:	bd08      	pop	{r3, pc}

3400be30 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
3400be30:	b570      	push	{r4, r5, r6, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400be32:	4e32      	ldr	r6, [pc, #200]	@ (3400befc <_ux_dcd_stm32_initialize_complete+0xcc>)
3400be34:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400be36:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
3400be3a:	69e5      	ldr	r5, [r4, #28]
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
3400be3c:	2b01      	cmp	r3, #1
3400be3e:	d147      	bne.n	3400bed0 <_ux_dcd_stm32_initialize_complete+0xa0>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
3400be40:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
3400be44:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400be48:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
3400be4c:	220e      	movs	r2, #14
3400be4e:	492c      	ldr	r1, [pc, #176]	@ (3400bf00 <_ux_dcd_stm32_initialize_complete+0xd0>)
3400be50:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
3400be54:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
    _ux_utility_descriptor_parse(device_framework,
3400be58:	f104 0328 	add.w	r3, r4, #40	@ 0x28
3400be5c:	f000 f8c7 	bl	3400bfee <_ux_utility_descriptor_parse>
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
3400be60:	f242 7310 	movw	r3, #10000	@ 0x2710
3400be64:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400be68:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
                            transfer_request -> ux_slave_transfer_request_data_pointer;

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400be6a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
3400be6e:	66e3      	str	r3, [r4, #108]	@ 0x6c

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400be70:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
3400be74:	6662      	str	r2, [r4, #100]	@ 0x64

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400be76:	210e      	movs	r1, #14
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400be78:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
3400be7c:	6723      	str	r3, [r4, #112]	@ 0x70
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
3400be7e:	4620      	mov	r0, r4
3400be80:	69a3      	ldr	r3, [r4, #24]
3400be82:	4798      	blx	r3
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
3400be84:	2100      	movs	r1, #0
3400be86:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400be88:	f7f7 ff80 	bl	34003d8c <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400be8c:	2300      	movs	r3, #0
3400be8e:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400be92:	4619      	mov	r1, r3
3400be94:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400be96:	f7f7 fb4f 	bl	34003538 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
3400be9a:	2180      	movs	r1, #128	@ 0x80
3400be9c:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400be9e:	f7f7 ff75 	bl	34003d8c <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
3400bea2:	2300      	movs	r3, #0
3400bea4:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
3400bea8:	2180      	movs	r1, #128	@ 0x80
3400beaa:	6f28      	ldr	r0, [r5, #112]	@ 0x70
3400beac:	f7f7 fb44 	bl	34003538 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400beb0:	2300      	movs	r3, #0

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400beb2:	2208      	movs	r2, #8
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
3400beb4:	2001      	movs	r0, #1
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
3400beb6:	e9c4 321d 	strd	r3, r2, [r4, #116]	@ 0x74
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
3400beba:	6423      	str	r3, [r4, #64]	@ 0x40

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bebc:	6833      	ldr	r3, [r6, #0]
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
3400bebe:	e9c4 0017 	strd	r0, r0, [r4, #92]	@ 0x5c
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bec2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
3400bec6:	6722      	str	r2, [r4, #112]	@ 0x70
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bec8:	b103      	cbz	r3, 3400becc <_ux_dcd_stm32_initialize_complete+0x9c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
3400beca:	4798      	blx	r3
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
3400becc:	2000      	movs	r0, #0
3400bece:	bd70      	pop	{r4, r5, r6, pc}
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
3400bed0:	2300      	movs	r3, #0
3400bed2:	f8c4 315c 	str.w	r3, [r4, #348]	@ 0x15c
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
3400bed6:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3400beda:	2b01      	cmp	r3, #1
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400bedc:	bf0b      	itete	eq
3400bede:	f8d4 30d4 	ldreq.w	r3, [r4, #212]	@ 0xd4
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400bee2:	f8d4 30dc 	ldrne.w	r3, [r4, #220]	@ 0xdc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
3400bee6:	f8c4 30cc 	streq.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
3400beea:	f8c4 30cc 	strne.w	r3, [r4, #204]	@ 0xcc
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
3400beee:	bf0c      	ite	eq
3400bef0:	f8d4 30d8 	ldreq.w	r3, [r4, #216]	@ 0xd8
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
3400bef4:	f8d4 30e0 	ldrne.w	r3, [r4, #224]	@ 0xe0
3400bef8:	e7a8      	b.n	3400be4c <_ux_dcd_stm32_initialize_complete+0x1c>
3400befa:	bf00      	nop
3400befc:	34012bd0 	.word	0x34012bd0
3400bf00:	34012198 	.word	0x34012198

3400bf04 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
3400bf04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400bf08:	4f19      	ldr	r7, [pc, #100]	@ (3400bf70 <_ux_device_stack_disconnect+0x6c>)
{
3400bf0a:	b08c      	sub	sp, #48	@ 0x30
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
3400bf0c:	683c      	ldr	r4, [r7, #0]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
3400bf0e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
3400bf10:	2e03      	cmp	r6, #3
3400bf12:	d128      	bne.n	3400bf66 <_ux_device_stack_disconnect+0x62>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
3400bf14:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
3400bf18:	b9b5      	cbnz	r5, 3400bf48 <_ux_device_stack_disconnect+0x44>
            interface_ptr =  next_interface;
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
3400bf1a:	2301      	movs	r3, #1
3400bf1c:	6263      	str	r3, [r4, #36]	@ 0x24

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
3400bf1e:	210f      	movs	r1, #15
3400bf20:	4620      	mov	r0, r4
3400bf22:	69a3      	ldr	r3, [r4, #24]
3400bf24:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
3400bf28:	4798      	blx	r3
3400bf2a:	4605      	mov	r5, r0
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
3400bf2c:	2300      	movs	r3, #0
3400bf2e:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
3400bf32:	6263      	str	r3, [r4, #36]	@ 0x24

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
3400bf34:	683b      	ldr	r3, [r7, #0]
3400bf36:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400bf3a:	b10b      	cbz	r3, 3400bf40 <_ux_device_stack_disconnect+0x3c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
3400bf3c:	200a      	movs	r0, #10
3400bf3e:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
}
3400bf40:	4628      	mov	r0, r5
3400bf42:	b00c      	add	sp, #48	@ 0x30
3400bf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            class_ptr =  interface_ptr -> ux_slave_interface_class;
3400bf48:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
3400bf4a:	9601      	str	r6, [sp, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
3400bf4c:	9503      	str	r5, [sp, #12]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
3400bf4e:	9309      	str	r3, [sp, #36]	@ 0x24
            if (class_ptr != UX_NULL)
3400bf50:	b113      	cbz	r3, 3400bf58 <_ux_device_stack_disconnect+0x54>
                class_ptr -> ux_slave_class_entry_function(&class_command);
3400bf52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400bf54:	a801      	add	r0, sp, #4
3400bf56:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bf58:	f8d5 8018 	ldr.w	r8, [r5, #24]
            _ux_device_stack_interface_delete(interface_ptr);
3400bf5c:	4628      	mov	r0, r5
3400bf5e:	f000 f809 	bl	3400bf74 <_ux_device_stack_interface_delete>
            interface_ptr =  next_interface;
3400bf62:	4645      	mov	r5, r8
3400bf64:	e7d8      	b.n	3400bf18 <_ux_device_stack_disconnect+0x14>
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
3400bf66:	2e01      	cmp	r6, #1
3400bf68:	d0d9      	beq.n	3400bf1e <_ux_device_stack_disconnect+0x1a>
UINT                        status = UX_ERROR;
3400bf6a:	25ff      	movs	r5, #255	@ 0xff
3400bf6c:	e7de      	b.n	3400bf2c <_ux_device_stack_disconnect+0x28>
3400bf6e:	bf00      	nop
3400bf70:	34012bd0 	.word	0x34012bd0

3400bf74 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
3400bf74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400bf78:	4605      	mov	r5, r0

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
3400bf7a:	2600      	movs	r6, #0
    device =  &_ux_system_slave -> ux_system_slave_device;
3400bf7c:	4f0e      	ldr	r7, [pc, #56]	@ (3400bfb8 <_ux_device_stack_interface_delete+0x44>)
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
3400bf7e:	69c4      	ldr	r4, [r0, #28]
    device =  &_ux_system_slave -> ux_system_slave_device;
3400bf80:	f8d7 8000 	ldr.w	r8, [r7]
    while (next_endpoint != UX_NULL)
3400bf84:	b954      	cbnz	r4, 3400bf9c <_ux_device_stack_interface_delete+0x28>
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bf86:	69ab      	ldr	r3, [r5, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
3400bf88:	4620      	mov	r0, r4
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
3400bf8a:	f8c8 30b4 	str.w	r3, [r8, #180]	@ 0xb4
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
3400bf8e:	e9c5 4401 	strd	r4, r4, [r5, #4]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
3400bf92:	e9c5 4406 	strd	r4, r4, [r5, #24]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
3400bf96:	602c      	str	r4, [r5, #0]
}
3400bf98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
3400bf9c:	6838      	ldr	r0, [r7, #0]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400bf9e:	f8d4 9014 	ldr.w	r9, [r4, #20]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
3400bfa2:	4622      	mov	r2, r4
3400bfa4:	210f      	movs	r1, #15
3400bfa6:	6983      	ldr	r3, [r0, #24]
3400bfa8:	4798      	blx	r3
        endpoint -> ux_slave_endpoint_state =  0;
3400bfaa:	e9c4 6600 	strd	r6, r6, [r4]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
3400bfae:	e9c4 6605 	strd	r6, r6, [r4, #20]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
3400bfb2:	61e6      	str	r6, [r4, #28]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
3400bfb4:	464c      	mov	r4, r9
3400bfb6:	e7e5      	b.n	3400bf84 <_ux_device_stack_interface_delete+0x10>
3400bfb8:	34012bd0 	.word	0x34012bd0

3400bfbc <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
3400bfbc:	b510      	push	{r4, lr}


    status = UX_STATE_RESET;

    /* Run all DCD tasks (pending ISR handle).  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400bfbe:	4c08      	ldr	r4, [pc, #32]	@ (3400bfe0 <_ux_device_stack_tasks_run+0x24>)
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400bfc0:	2200      	movs	r2, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
3400bfc2:	6820      	ldr	r0, [r4, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
3400bfc4:	2112      	movs	r1, #18
3400bfc6:	6983      	ldr	r3, [r0, #24]
3400bfc8:	4798      	blx	r3

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400bfca:	6823      	ldr	r3, [r4, #0]
    status = UX_STATE_RESET;
3400bfcc:	2000      	movs	r0, #0
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
3400bfce:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
    {

        /* Skip classes not used.  */
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
3400bfd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400bfd4:	b11a      	cbz	r2, 3400bfde <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Skip classes has no task function.  */
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
3400bfd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400bfd8:	b10a      	cbz	r2, 3400bfde <_ux_device_stack_tasks_run+0x22>
            continue;

        /* Invoke task function.  */
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
3400bfda:	6c98      	ldr	r0, [r3, #72]	@ 0x48
3400bfdc:	4790      	blx	r2
        class_instance ++;
    }

    /* Return overall status.  */
    return(status);
}
3400bfde:	bd10      	pop	{r4, pc}
3400bfe0:	34012bd0 	.word	0x34012bd0

3400bfe4 <_ux_system_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT _ux_system_tasks_run(VOID)
{
3400bfe4:	b508      	push	{r3, lr}
#if defined(UX_DEVICE_STANDALONE) && !defined(UX_HOST_SIDE_ONLY)
    _ux_device_stack_tasks_run();
3400bfe6:	f7ff ffe9 	bl	3400bfbc <_ux_device_stack_tasks_run>
    _ux_otg_tasks_run();
#endif

   /* Return code not used now.  */
   return(0);
}
3400bfea:	2000      	movs	r0, #0
3400bfec:	bd08      	pop	{r3, pc}

3400bfee <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
3400bfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400bff2:	4605      	mov	r5, r0
3400bff4:	460e      	mov	r6, r1
3400bff6:	461c      	mov	r4, r3
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
                *descriptor++ =  0;
3400bff8:	f04f 0800 	mov.w	r8, #0
3400bffc:	188f      	adds	r7, r1, r2
    while(descriptor_entries--)
3400bffe:	42be      	cmp	r6, r7
3400c000:	d101      	bne.n	3400c006 <_ux_utility_descriptor_parse+0x18>
        }
    }

    /* Return to caller.  */
    return;
}
3400c002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch(*descriptor_structure++)
3400c006:	f816 3b01 	ldrb.w	r3, [r6], #1
3400c00a:	2b02      	cmp	r3, #2
3400c00c:	d013      	beq.n	3400c036 <_ux_utility_descriptor_parse+0x48>
3400c00e:	2b04      	cmp	r3, #4
3400c010:	d006      	beq.n	3400c020 <_ux_utility_descriptor_parse+0x32>
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
3400c012:	f815 3b01 	ldrb.w	r3, [r5], #1
3400c016:	f804 3b01 	strb.w	r3, [r4], #1
            descriptor ++;
3400c01a:	e7f0      	b.n	3400bffe <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400c01c:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 3u)
3400c020:	07a2      	lsls	r2, r4, #30
3400c022:	d1fb      	bne.n	3400c01c <_ux_utility_descriptor_parse+0x2e>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400c024:	4628      	mov	r0, r5
3400c026:	f000 f80f 	bl	3400c048 <_ux_utility_long_get>
            raw_descriptor +=  4;
3400c02a:	3504      	adds	r5, #4
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
3400c02c:	f844 0b04 	str.w	r0, [r4], #4
            break;
3400c030:	e7e5      	b.n	3400bffe <_ux_utility_descriptor_parse+0x10>
                *descriptor++ =  0;
3400c032:	f804 8b01 	strb.w	r8, [r4], #1
            while((ALIGN_TYPE) descriptor & 1u)
3400c036:	07e3      	lsls	r3, r4, #31
3400c038:	d4fb      	bmi.n	3400c032 <_ux_utility_descriptor_parse+0x44>
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400c03a:	4628      	mov	r0, r5
3400c03c:	f000 f810 	bl	3400c060 <_ux_utility_short_get>
            raw_descriptor += 2;
3400c040:	3502      	adds	r5, #2
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
3400c042:	f824 0b02 	strh.w	r0, [r4], #2
            break;
3400c046:	e7da      	b.n	3400bffe <_ux_utility_descriptor_parse+0x10>

3400c048 <_ux_utility_long_get>:
    value |=  (ULONG)*address++ << 16;
    value |=  (ULONG)*address << 24;

    /* Return 32-bit value.  */
    return(value);
}
3400c048:	6800      	ldr	r0, [r0, #0]
3400c04a:	4770      	bx	lr

3400c04c <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
3400c04c:	3801      	subs	r0, #1
3400c04e:	3201      	adds	r2, #1
3400c050:	3a01      	subs	r2, #1
3400c052:	d100      	bne.n	3400c056 <_ux_utility_memory_copy+0xa>
        *destination++ =  *source++;
    }

    /* Return to caller.  */
    return; 
}
3400c054:	4770      	bx	lr
        *destination++ =  *source++;
3400c056:	f811 3b01 	ldrb.w	r3, [r1], #1
3400c05a:	f800 3f01 	strb.w	r3, [r0, #1]!
3400c05e:	e7f7      	b.n	3400c050 <_ux_utility_memory_copy+0x4>

3400c060 <_ux_utility_short_get>:
    value =  (USHORT) *address++;
    value |=  (USHORT)(*address << 8);

    /* Return to caller.  */
    return((ULONG) value);
}
3400c060:	8800      	ldrh	r0, [r0, #0]
3400c062:	4770      	bx	lr

3400c064 <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
3400c064:	b570      	push	{r4, r5, r6, lr}
  if (done != 0)
3400c066:	4ba6      	ldr	r3, [pc, #664]	@ (3400c300 <LL_ATON_Init+0x29c>)
{
3400c068:	b088      	sub	sp, #32
  if (done != 0)
3400c06a:	781a      	ldrb	r2, [r3, #0]
3400c06c:	b90a      	cbnz	r2, 3400c072 <LL_ATON_Init+0xe>
  done = 1;
3400c06e:	2201      	movs	r2, #1
3400c070:	701a      	strb	r2, [r3, #0]
  int i;

  ll_aton_static_checks();

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
3400c072:	4ba4      	ldr	r3, [pc, #656]	@ (3400c304 <LL_ATON_Init+0x2a0>)
3400c074:	681a      	ldr	r2, [r3, #0]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
3400c076:	f042 0202 	orr.w	r2, r2, #2
  ATON_CLKCTRL_CTRL_SET(0, t);
3400c07a:	601a      	str	r2, [r3, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
3400c07c:	2201      	movs	r2, #1
3400c07e:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
3400c080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400c084:	609a      	str	r2, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
3400c086:	60da      	str	r2, [r3, #12]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
3400c088:	2200      	movs	r2, #0
3400c08a:	611a      	str	r2, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c08c:	4a9e      	ldr	r2, [pc, #632]	@ (3400c308 <LL_ATON_Init+0x2a4>)
3400c08e:	6854      	ldr	r4, [r2, #4]
3400c090:	2c00      	cmp	r4, #0
3400c092:	d0fc      	beq.n	3400c08e <LL_ATON_Init+0x2a>
3400c094:	b2e5      	uxtb	r5, r4
3400c096:	2d01      	cmp	r5, #1
3400c098:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c09c:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c0a0:	f040 80ea 	bne.w	3400c278 <LL_ATON_Init+0x214>
3400c0a4:	2e05      	cmp	r6, #5
3400c0a6:	f040 80e7 	bne.w	3400c278 <LL_ATON_Init+0x214>
3400c0aa:	2c00      	cmp	r4, #0
3400c0ac:	f040 80e4 	bne.w	3400c278 <LL_ATON_Init+0x214>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c0b0:	4a96      	ldr	r2, [pc, #600]	@ (3400c30c <LL_ATON_Init+0x2a8>)
3400c0b2:	6854      	ldr	r4, [r2, #4]
3400c0b4:	2c00      	cmp	r4, #0
3400c0b6:	d0fc      	beq.n	3400c0b2 <LL_ATON_Init+0x4e>
3400c0b8:	b2e5      	uxtb	r5, r4
3400c0ba:	2d17      	cmp	r5, #23
3400c0bc:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c0c0:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c0c4:	f040 80fb 	bne.w	3400c2be <LL_ATON_Init+0x25a>
3400c0c8:	2e05      	cmp	r6, #5
3400c0ca:	f040 80f8 	bne.w	3400c2be <LL_ATON_Init+0x25a>
3400c0ce:	2c01      	cmp	r4, #1
3400c0d0:	f040 80f5 	bne.w	3400c2be <LL_ATON_Init+0x25a>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400c0d4:	4a8e      	ldr	r2, [pc, #568]	@ (3400c310 <LL_ATON_Init+0x2ac>)
3400c0d6:	6854      	ldr	r4, [r2, #4]
3400c0d8:	2c00      	cmp	r4, #0
3400c0da:	d0fc      	beq.n	3400c0d6 <LL_ATON_Init+0x72>
3400c0dc:	b2e5      	uxtb	r5, r4
3400c0de:	2d1c      	cmp	r5, #28
3400c0e0:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c0e4:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c0e8:	f040 8134 	bne.w	3400c354 <LL_ATON_Init+0x2f0>
3400c0ec:	2e01      	cmp	r6, #1
3400c0ee:	f040 8131 	bne.w	3400c354 <LL_ATON_Init+0x2f0>
3400c0f2:	2c01      	cmp	r4, #1
3400c0f4:	f040 812e 	bne.w	3400c354 <LL_ATON_Init+0x2f0>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3400c0f8:	4a86      	ldr	r2, [pc, #536]	@ (3400c314 <LL_ATON_Init+0x2b0>)
3400c0fa:	6854      	ldr	r4, [r2, #4]
3400c0fc:	2c00      	cmp	r4, #0
3400c0fe:	d0fc      	beq.n	3400c0fa <LL_ATON_Init+0x96>
3400c100:	b2e5      	uxtb	r5, r4
3400c102:	2d1a      	cmp	r5, #26
3400c104:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c108:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c10c:	f040 8141 	bne.w	3400c392 <LL_ATON_Init+0x32e>
3400c110:	2e01      	cmp	r6, #1
3400c112:	f040 813e 	bne.w	3400c392 <LL_ATON_Init+0x32e>
3400c116:	2c00      	cmp	r4, #0
3400c118:	f040 813b 	bne.w	3400c392 <LL_ATON_Init+0x32e>
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3400c11c:	4a7e      	ldr	r2, [pc, #504]	@ (3400c318 <LL_ATON_Init+0x2b4>)
3400c11e:	6854      	ldr	r4, [r2, #4]
3400c120:	2c00      	cmp	r4, #0
3400c122:	d0fc      	beq.n	3400c11e <LL_ATON_Init+0xba>
3400c124:	b2e5      	uxtb	r5, r4
3400c126:	2d1b      	cmp	r5, #27
3400c128:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c12c:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c130:	f040 814f 	bne.w	3400c3d2 <LL_ATON_Init+0x36e>
3400c134:	2e01      	cmp	r6, #1
3400c136:	f040 814c 	bne.w	3400c3d2 <LL_ATON_Init+0x36e>
3400c13a:	2c01      	cmp	r4, #1
3400c13c:	f040 8149 	bne.w	3400c3d2 <LL_ATON_Init+0x36e>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400c140:	4a76      	ldr	r2, [pc, #472]	@ (3400c31c <LL_ATON_Init+0x2b8>)
3400c142:	6854      	ldr	r4, [r2, #4]
3400c144:	2c00      	cmp	r4, #0
3400c146:	d0fc      	beq.n	3400c142 <LL_ATON_Init+0xde>
3400c148:	b2e5      	uxtb	r5, r4
3400c14a:	2d19      	cmp	r5, #25
3400c14c:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c150:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c154:	f040 815c 	bne.w	3400c410 <LL_ATON_Init+0x3ac>
3400c158:	2e01      	cmp	r6, #1
3400c15a:	f040 8159 	bne.w	3400c410 <LL_ATON_Init+0x3ac>
3400c15e:	2c0a      	cmp	r4, #10
3400c160:	f040 8156 	bne.w	3400c410 <LL_ATON_Init+0x3ac>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400c164:	4a6e      	ldr	r2, [pc, #440]	@ (3400c320 <LL_ATON_Init+0x2bc>)
3400c166:	6854      	ldr	r4, [r2, #4]
3400c168:	2c00      	cmp	r4, #0
3400c16a:	d0fc      	beq.n	3400c166 <LL_ATON_Init+0x102>
3400c16c:	b2e5      	uxtb	r5, r4
3400c16e:	2d21      	cmp	r5, #33	@ 0x21
3400c170:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c174:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c178:	f040 816a 	bne.w	3400c450 <LL_ATON_Init+0x3ec>
3400c17c:	2e01      	cmp	r6, #1
3400c17e:	f040 8167 	bne.w	3400c450 <LL_ATON_Init+0x3ec>
3400c182:	2c01      	cmp	r4, #1
3400c184:	f040 8164 	bne.w	3400c450 <LL_ATON_Init+0x3ec>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400c188:	4a66      	ldr	r2, [pc, #408]	@ (3400c324 <LL_ATON_Init+0x2c0>)
3400c18a:	6854      	ldr	r4, [r2, #4]
3400c18c:	2c00      	cmp	r4, #0
3400c18e:	d0fc      	beq.n	3400c18a <LL_ATON_Init+0x126>
3400c190:	b2e5      	uxtb	r5, r4
3400c192:	2d20      	cmp	r5, #32
3400c194:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c198:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c19c:	f040 8177 	bne.w	3400c48e <LL_ATON_Init+0x42a>
3400c1a0:	2e03      	cmp	r6, #3
3400c1a2:	f040 8174 	bne.w	3400c48e <LL_ATON_Init+0x42a>
3400c1a6:	2c02      	cmp	r4, #2
3400c1a8:	f040 8171 	bne.w	3400c48e <LL_ATON_Init+0x42a>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400c1ac:	4a55      	ldr	r2, [pc, #340]	@ (3400c304 <LL_ATON_Init+0x2a0>)
3400c1ae:	6854      	ldr	r4, [r2, #4]
3400c1b0:	2c00      	cmp	r4, #0
3400c1b2:	d0fc      	beq.n	3400c1ae <LL_ATON_Init+0x14a>
3400c1b4:	b2e5      	uxtb	r5, r4
3400c1b6:	2d1f      	cmp	r5, #31
3400c1b8:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c1bc:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c1c0:	f040 8186 	bne.w	3400c4d0 <LL_ATON_Init+0x46c>
3400c1c4:	2e01      	cmp	r6, #1
3400c1c6:	f040 8183 	bne.w	3400c4d0 <LL_ATON_Init+0x46c>
3400c1ca:	2c02      	cmp	r4, #2
3400c1cc:	f040 8180 	bne.w	3400c4d0 <LL_ATON_Init+0x46c>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400c1d0:	4a55      	ldr	r2, [pc, #340]	@ (3400c328 <LL_ATON_Init+0x2c4>)
3400c1d2:	6854      	ldr	r4, [r2, #4]
3400c1d4:	2c00      	cmp	r4, #0
3400c1d6:	d0fc      	beq.n	3400c1d2 <LL_ATON_Init+0x16e>
3400c1d8:	b2e5      	uxtb	r5, r4
3400c1da:	2d1e      	cmp	r5, #30
3400c1dc:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c1e0:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c1e4:	f040 8195 	bne.w	3400c512 <LL_ATON_Init+0x4ae>
3400c1e8:	2e01      	cmp	r6, #1
3400c1ea:	f040 8192 	bne.w	3400c512 <LL_ATON_Init+0x4ae>
3400c1ee:	2c01      	cmp	r4, #1
3400c1f0:	f040 818f 	bne.w	3400c512 <LL_ATON_Init+0x4ae>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400c1f4:	4a4d      	ldr	r2, [pc, #308]	@ (3400c32c <LL_ATON_Init+0x2c8>)
3400c1f6:	6854      	ldr	r4, [r2, #4]
3400c1f8:	2c00      	cmp	r4, #0
3400c1fa:	d0fc      	beq.n	3400c1f6 <LL_ATON_Init+0x192>
3400c1fc:	f3c4 3503 	ubfx	r5, r4, #12, #4
3400c200:	f3c4 2603 	ubfx	r6, r4, #8, #4
3400c204:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
3400c208:	f040 81a2 	bne.w	3400c550 <LL_ATON_Init+0x4ec>
3400c20c:	2d01      	cmp	r5, #1
3400c20e:	f040 819f 	bne.w	3400c550 <LL_ATON_Init+0x4ec>
3400c212:	2e06      	cmp	r6, #6
3400c214:	f040 819c 	bne.w	3400c550 <LL_ATON_Init+0x4ec>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3400c218:	4a45      	ldr	r2, [pc, #276]	@ (3400c330 <LL_ATON_Init+0x2cc>)
3400c21a:	6854      	ldr	r4, [r2, #4]
3400c21c:	2c00      	cmp	r4, #0
3400c21e:	d0fc      	beq.n	3400c21a <LL_ATON_Init+0x1b6>
3400c220:	b2e5      	uxtb	r5, r4
3400c222:	2d1d      	cmp	r5, #29
3400c224:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400c228:	f3c4 2403 	ubfx	r4, r4, #8, #4
3400c22c:	d104      	bne.n	3400c238 <LL_ATON_Init+0x1d4>
3400c22e:	2e05      	cmp	r6, #5
3400c230:	d102      	bne.n	3400c238 <LL_ATON_Init+0x1d4>
3400c232:	2c00      	cmp	r4, #0
3400c234:	f000 81ae 	beq.w	3400c594 <LL_ATON_Init+0x530>
3400c238:	f002 f83e 	bl	3400e2b8 <__errno>
3400c23c:	6803      	ldr	r3, [r0, #0]
3400c23e:	2b00      	cmp	r3, #0
3400c240:	f000 81a6 	beq.w	3400c590 <LL_ATON_Init+0x52c>
3400c244:	f002 f838 	bl	3400e2b8 <__errno>
3400c248:	6800      	ldr	r0, [r0, #0]
3400c24a:	f001 ffcf 	bl	3400e1ec <strerror>
3400c24e:	4603      	mov	r3, r0
3400c250:	2205      	movs	r2, #5
3400c252:	2100      	movs	r1, #0
3400c254:	e9cd 2105 	strd	r2, r1, [sp, #20]
3400c258:	221d      	movs	r2, #29
3400c25a:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c25e:	4a35      	ldr	r2, [pc, #212]	@ (3400c334 <LL_ATON_Init+0x2d0>)
3400c260:	4935      	ldr	r1, [pc, #212]	@ (3400c338 <LL_ATON_Init+0x2d4>)
3400c262:	9200      	str	r2, [sp, #0]
3400c264:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c268:	22fb      	movs	r2, #251	@ 0xfb
3400c26a:	4834      	ldr	r0, [pc, #208]	@ (3400c33c <LL_ATON_Init+0x2d8>)
3400c26c:	f001 fc88 	bl	3400db80 <iprintf>
3400c270:	21fb      	movs	r1, #251	@ 0xfb
3400c272:	4b33      	ldr	r3, [pc, #204]	@ (3400c340 <LL_ATON_Init+0x2dc>)
3400c274:	4a33      	ldr	r2, [pc, #204]	@ (3400c344 <LL_ATON_Init+0x2e0>)
3400c276:	e01d      	b.n	3400c2b4 <LL_ATON_Init+0x250>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c278:	f002 f81e 	bl	3400e2b8 <__errno>
3400c27c:	6803      	ldr	r3, [r0, #0]
3400c27e:	b1e3      	cbz	r3, 3400c2ba <LL_ATON_Init+0x256>
3400c280:	f002 f81a 	bl	3400e2b8 <__errno>
3400c284:	6800      	ldr	r0, [r0, #0]
3400c286:	f001 ffb1 	bl	3400e1ec <strerror>
3400c28a:	4603      	mov	r3, r0
3400c28c:	2205      	movs	r2, #5
3400c28e:	f04f 0e00 	mov.w	lr, #0
3400c292:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400c296:	2201      	movs	r2, #1
3400c298:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c29c:	4a2a      	ldr	r2, [pc, #168]	@ (3400c348 <LL_ATON_Init+0x2e4>)
3400c29e:	4926      	ldr	r1, [pc, #152]	@ (3400c338 <LL_ATON_Init+0x2d4>)
3400c2a0:	9200      	str	r2, [sp, #0]
3400c2a2:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c2a6:	22c7      	movs	r2, #199	@ 0xc7
3400c2a8:	4824      	ldr	r0, [pc, #144]	@ (3400c33c <LL_ATON_Init+0x2d8>)
3400c2aa:	f001 fc69 	bl	3400db80 <iprintf>
3400c2ae:	21c7      	movs	r1, #199	@ 0xc7
3400c2b0:	4b23      	ldr	r3, [pc, #140]	@ (3400c340 <LL_ATON_Init+0x2dc>)
3400c2b2:	4a24      	ldr	r2, [pc, #144]	@ (3400c344 <LL_ATON_Init+0x2e0>)
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c2b4:	4820      	ldr	r0, [pc, #128]	@ (3400c338 <LL_ATON_Init+0x2d4>)
3400c2b6:	f000 fe81 	bl	3400cfbc <__assert_func>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400c2ba:	4b24      	ldr	r3, [pc, #144]	@ (3400c34c <LL_ATON_Init+0x2e8>)
3400c2bc:	e7e6      	b.n	3400c28c <LL_ATON_Init+0x228>
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400c2be:	f001 fffb 	bl	3400e2b8 <__errno>
3400c2c2:	6803      	ldr	r3, [r0, #0]
3400c2c4:	b1d3      	cbz	r3, 3400c2fc <LL_ATON_Init+0x298>
3400c2c6:	f001 fff7 	bl	3400e2b8 <__errno>
3400c2ca:	6800      	ldr	r0, [r0, #0]
3400c2cc:	f001 ff8e 	bl	3400e1ec <strerror>
3400c2d0:	4603      	mov	r3, r0
3400c2d2:	2205      	movs	r2, #5
3400c2d4:	f04f 0c01 	mov.w	ip, #1
3400c2d8:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400c2dc:	2217      	movs	r2, #23
3400c2de:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c2e2:	4a1b      	ldr	r2, [pc, #108]	@ (3400c350 <LL_ATON_Init+0x2ec>)
3400c2e4:	4914      	ldr	r1, [pc, #80]	@ (3400c338 <LL_ATON_Init+0x2d4>)
3400c2e6:	9200      	str	r2, [sp, #0]
3400c2e8:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c2ec:	22ca      	movs	r2, #202	@ 0xca
3400c2ee:	4813      	ldr	r0, [pc, #76]	@ (3400c33c <LL_ATON_Init+0x2d8>)
3400c2f0:	f001 fc46 	bl	3400db80 <iprintf>
3400c2f4:	21ca      	movs	r1, #202	@ 0xca
3400c2f6:	4b12      	ldr	r3, [pc, #72]	@ (3400c340 <LL_ATON_Init+0x2dc>)
3400c2f8:	4a12      	ldr	r2, [pc, #72]	@ (3400c344 <LL_ATON_Init+0x2e0>)
3400c2fa:	e7db      	b.n	3400c2b4 <LL_ATON_Init+0x250>
3400c2fc:	4b13      	ldr	r3, [pc, #76]	@ (3400c34c <LL_ATON_Init+0x2e8>)
3400c2fe:	e7e8      	b.n	3400c2d2 <LL_ATON_Init+0x26e>
3400c300:	34012bd4 	.word	0x34012bd4
3400c304:	580e0000 	.word	0x580e0000
3400c308:	580e5000 	.word	0x580e5000
3400c30c:	580ef000 	.word	0x580ef000
3400c310:	580fb000 	.word	0x580fb000
3400c314:	580f7000 	.word	0x580f7000
3400c318:	580f5000 	.word	0x580f5000
3400c31c:	580f3000 	.word	0x580f3000
3400c320:	580fe000 	.word	0x580fe000
3400c324:	580fd000 	.word	0x580fd000
3400c328:	580e1000 	.word	0x580e1000
3400c32c:	580e4000 	.word	0x580e4000
3400c330:	580e2000 	.word	0x580e2000
3400c334:	34010ccf 	.word	0x34010ccf
3400c338:	34010b8f 	.word	0x34010b8f
3400c33c:	34010c1a 	.word	0x34010c1a
3400c340:	34010ea7 	.word	0x34010ea7
3400c344:	34010cd5 	.word	0x34010cd5
3400c348:	34010c7e 	.word	0x34010c7e
3400c34c:	34010b8a 	.word	0x34010b8a
3400c350:	34010c85 	.word	0x34010c85
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400c354:	f001 ffb0 	bl	3400e2b8 <__errno>
3400c358:	6803      	ldr	r3, [r0, #0]
3400c35a:	b1c3      	cbz	r3, 3400c38e <LL_ATON_Init+0x32a>
3400c35c:	f001 ffac 	bl	3400e2b8 <__errno>
3400c360:	6800      	ldr	r0, [r0, #0]
3400c362:	f001 ff43 	bl	3400e1ec <strerror>
3400c366:	4603      	mov	r3, r0
3400c368:	2201      	movs	r2, #1
3400c36a:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c36e:	221c      	movs	r2, #28
3400c370:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c374:	4a8c      	ldr	r2, [pc, #560]	@ (3400c5a8 <LL_ATON_Init+0x544>)
3400c376:	498d      	ldr	r1, [pc, #564]	@ (3400c5ac <LL_ATON_Init+0x548>)
3400c378:	9200      	str	r2, [sp, #0]
3400c37a:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c37e:	22ce      	movs	r2, #206	@ 0xce
3400c380:	488b      	ldr	r0, [pc, #556]	@ (3400c5b0 <LL_ATON_Init+0x54c>)
3400c382:	f001 fbfd 	bl	3400db80 <iprintf>
3400c386:	21ce      	movs	r1, #206	@ 0xce
3400c388:	4b8a      	ldr	r3, [pc, #552]	@ (3400c5b4 <LL_ATON_Init+0x550>)
3400c38a:	4a8b      	ldr	r2, [pc, #556]	@ (3400c5b8 <LL_ATON_Init+0x554>)
3400c38c:	e792      	b.n	3400c2b4 <LL_ATON_Init+0x250>
3400c38e:	4b8b      	ldr	r3, [pc, #556]	@ (3400c5bc <LL_ATON_Init+0x558>)
3400c390:	e7ea      	b.n	3400c368 <LL_ATON_Init+0x304>
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3400c392:	f001 ff91 	bl	3400e2b8 <__errno>
3400c396:	6803      	ldr	r3, [r0, #0]
3400c398:	b1cb      	cbz	r3, 3400c3ce <LL_ATON_Init+0x36a>
3400c39a:	f001 ff8d 	bl	3400e2b8 <__errno>
3400c39e:	6800      	ldr	r0, [r0, #0]
3400c3a0:	f001 ff24 	bl	3400e1ec <strerror>
3400c3a4:	4603      	mov	r3, r0
3400c3a6:	2201      	movs	r2, #1
3400c3a8:	2000      	movs	r0, #0
3400c3aa:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400c3ae:	221a      	movs	r2, #26
3400c3b0:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c3b4:	4a82      	ldr	r2, [pc, #520]	@ (3400c5c0 <LL_ATON_Init+0x55c>)
3400c3b6:	497d      	ldr	r1, [pc, #500]	@ (3400c5ac <LL_ATON_Init+0x548>)
3400c3b8:	9200      	str	r2, [sp, #0]
3400c3ba:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c3be:	22d2      	movs	r2, #210	@ 0xd2
3400c3c0:	487b      	ldr	r0, [pc, #492]	@ (3400c5b0 <LL_ATON_Init+0x54c>)
3400c3c2:	f001 fbdd 	bl	3400db80 <iprintf>
3400c3c6:	21d2      	movs	r1, #210	@ 0xd2
3400c3c8:	4b7a      	ldr	r3, [pc, #488]	@ (3400c5b4 <LL_ATON_Init+0x550>)
3400c3ca:	4a7b      	ldr	r2, [pc, #492]	@ (3400c5b8 <LL_ATON_Init+0x554>)
3400c3cc:	e772      	b.n	3400c2b4 <LL_ATON_Init+0x250>
3400c3ce:	4b7b      	ldr	r3, [pc, #492]	@ (3400c5bc <LL_ATON_Init+0x558>)
3400c3d0:	e7e9      	b.n	3400c3a6 <LL_ATON_Init+0x342>
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3400c3d2:	f001 ff71 	bl	3400e2b8 <__errno>
3400c3d6:	6803      	ldr	r3, [r0, #0]
3400c3d8:	b1c3      	cbz	r3, 3400c40c <LL_ATON_Init+0x3a8>
3400c3da:	f001 ff6d 	bl	3400e2b8 <__errno>
3400c3de:	6800      	ldr	r0, [r0, #0]
3400c3e0:	f001 ff04 	bl	3400e1ec <strerror>
3400c3e4:	4603      	mov	r3, r0
3400c3e6:	2201      	movs	r2, #1
3400c3e8:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c3ec:	221b      	movs	r2, #27
3400c3ee:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c3f2:	4a74      	ldr	r2, [pc, #464]	@ (3400c5c4 <LL_ATON_Init+0x560>)
3400c3f4:	496d      	ldr	r1, [pc, #436]	@ (3400c5ac <LL_ATON_Init+0x548>)
3400c3f6:	9200      	str	r2, [sp, #0]
3400c3f8:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c3fc:	22d6      	movs	r2, #214	@ 0xd6
3400c3fe:	486c      	ldr	r0, [pc, #432]	@ (3400c5b0 <LL_ATON_Init+0x54c>)
3400c400:	f001 fbbe 	bl	3400db80 <iprintf>
3400c404:	21d6      	movs	r1, #214	@ 0xd6
3400c406:	4b6b      	ldr	r3, [pc, #428]	@ (3400c5b4 <LL_ATON_Init+0x550>)
3400c408:	4a6b      	ldr	r2, [pc, #428]	@ (3400c5b8 <LL_ATON_Init+0x554>)
3400c40a:	e753      	b.n	3400c2b4 <LL_ATON_Init+0x250>
3400c40c:	4b6b      	ldr	r3, [pc, #428]	@ (3400c5bc <LL_ATON_Init+0x558>)
3400c40e:	e7ea      	b.n	3400c3e6 <LL_ATON_Init+0x382>
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400c410:	f001 ff52 	bl	3400e2b8 <__errno>
3400c414:	6803      	ldr	r3, [r0, #0]
3400c416:	b1cb      	cbz	r3, 3400c44c <LL_ATON_Init+0x3e8>
3400c418:	f001 ff4e 	bl	3400e2b8 <__errno>
3400c41c:	6800      	ldr	r0, [r0, #0]
3400c41e:	f001 fee5 	bl	3400e1ec <strerror>
3400c422:	4603      	mov	r3, r0
3400c424:	2201      	movs	r2, #1
3400c426:	210a      	movs	r1, #10
3400c428:	e9cd 2105 	strd	r2, r1, [sp, #20]
3400c42c:	2219      	movs	r2, #25
3400c42e:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c432:	4a65      	ldr	r2, [pc, #404]	@ (3400c5c8 <LL_ATON_Init+0x564>)
3400c434:	495d      	ldr	r1, [pc, #372]	@ (3400c5ac <LL_ATON_Init+0x548>)
3400c436:	9200      	str	r2, [sp, #0]
3400c438:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c43c:	22da      	movs	r2, #218	@ 0xda
3400c43e:	485c      	ldr	r0, [pc, #368]	@ (3400c5b0 <LL_ATON_Init+0x54c>)
3400c440:	f001 fb9e 	bl	3400db80 <iprintf>
3400c444:	21da      	movs	r1, #218	@ 0xda
3400c446:	4b5b      	ldr	r3, [pc, #364]	@ (3400c5b4 <LL_ATON_Init+0x550>)
3400c448:	4a5b      	ldr	r2, [pc, #364]	@ (3400c5b8 <LL_ATON_Init+0x554>)
3400c44a:	e733      	b.n	3400c2b4 <LL_ATON_Init+0x250>
3400c44c:	4b5b      	ldr	r3, [pc, #364]	@ (3400c5bc <LL_ATON_Init+0x558>)
3400c44e:	e7e9      	b.n	3400c424 <LL_ATON_Init+0x3c0>
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400c450:	f001 ff32 	bl	3400e2b8 <__errno>
3400c454:	6803      	ldr	r3, [r0, #0]
3400c456:	b1c3      	cbz	r3, 3400c48a <LL_ATON_Init+0x426>
3400c458:	f001 ff2e 	bl	3400e2b8 <__errno>
3400c45c:	6800      	ldr	r0, [r0, #0]
3400c45e:	f001 fec5 	bl	3400e1ec <strerror>
3400c462:	4603      	mov	r3, r0
3400c464:	2201      	movs	r2, #1
3400c466:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c46a:	2221      	movs	r2, #33	@ 0x21
3400c46c:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c470:	4a56      	ldr	r2, [pc, #344]	@ (3400c5cc <LL_ATON_Init+0x568>)
3400c472:	494e      	ldr	r1, [pc, #312]	@ (3400c5ac <LL_ATON_Init+0x548>)
3400c474:	9200      	str	r2, [sp, #0]
3400c476:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c47a:	22de      	movs	r2, #222	@ 0xde
3400c47c:	484c      	ldr	r0, [pc, #304]	@ (3400c5b0 <LL_ATON_Init+0x54c>)
3400c47e:	f001 fb7f 	bl	3400db80 <iprintf>
3400c482:	21de      	movs	r1, #222	@ 0xde
3400c484:	4b4b      	ldr	r3, [pc, #300]	@ (3400c5b4 <LL_ATON_Init+0x550>)
3400c486:	4a4c      	ldr	r2, [pc, #304]	@ (3400c5b8 <LL_ATON_Init+0x554>)
3400c488:	e714      	b.n	3400c2b4 <LL_ATON_Init+0x250>
3400c48a:	4b4c      	ldr	r3, [pc, #304]	@ (3400c5bc <LL_ATON_Init+0x558>)
3400c48c:	e7ea      	b.n	3400c464 <LL_ATON_Init+0x400>
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400c48e:	f001 ff13 	bl	3400e2b8 <__errno>
3400c492:	6803      	ldr	r3, [r0, #0]
3400c494:	b1d3      	cbz	r3, 3400c4cc <LL_ATON_Init+0x468>
3400c496:	f001 ff0f 	bl	3400e2b8 <__errno>
3400c49a:	6800      	ldr	r0, [r0, #0]
3400c49c:	f001 fea6 	bl	3400e1ec <strerror>
3400c4a0:	4603      	mov	r3, r0
3400c4a2:	2203      	movs	r2, #3
3400c4a4:	f04f 0e02 	mov.w	lr, #2
3400c4a8:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400c4ac:	2220      	movs	r2, #32
3400c4ae:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c4b2:	4a47      	ldr	r2, [pc, #284]	@ (3400c5d0 <LL_ATON_Init+0x56c>)
3400c4b4:	493d      	ldr	r1, [pc, #244]	@ (3400c5ac <LL_ATON_Init+0x548>)
3400c4b6:	9200      	str	r2, [sp, #0]
3400c4b8:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c4bc:	22e2      	movs	r2, #226	@ 0xe2
3400c4be:	483c      	ldr	r0, [pc, #240]	@ (3400c5b0 <LL_ATON_Init+0x54c>)
3400c4c0:	f001 fb5e 	bl	3400db80 <iprintf>
3400c4c4:	21e2      	movs	r1, #226	@ 0xe2
3400c4c6:	4b3b      	ldr	r3, [pc, #236]	@ (3400c5b4 <LL_ATON_Init+0x550>)
3400c4c8:	4a3b      	ldr	r2, [pc, #236]	@ (3400c5b8 <LL_ATON_Init+0x554>)
3400c4ca:	e6f3      	b.n	3400c2b4 <LL_ATON_Init+0x250>
3400c4cc:	4b3b      	ldr	r3, [pc, #236]	@ (3400c5bc <LL_ATON_Init+0x558>)
3400c4ce:	e7e8      	b.n	3400c4a2 <LL_ATON_Init+0x43e>
  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400c4d0:	f001 fef2 	bl	3400e2b8 <__errno>
3400c4d4:	6803      	ldr	r3, [r0, #0]
3400c4d6:	b1d3      	cbz	r3, 3400c50e <LL_ATON_Init+0x4aa>
3400c4d8:	f001 feee 	bl	3400e2b8 <__errno>
3400c4dc:	6800      	ldr	r0, [r0, #0]
3400c4de:	f001 fe85 	bl	3400e1ec <strerror>
3400c4e2:	4603      	mov	r3, r0
3400c4e4:	2201      	movs	r2, #1
3400c4e6:	f04f 0c02 	mov.w	ip, #2
3400c4ea:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400c4ee:	221f      	movs	r2, #31
3400c4f0:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c4f4:	4a37      	ldr	r2, [pc, #220]	@ (3400c5d4 <LL_ATON_Init+0x570>)
3400c4f6:	492d      	ldr	r1, [pc, #180]	@ (3400c5ac <LL_ATON_Init+0x548>)
3400c4f8:	9200      	str	r2, [sp, #0]
3400c4fa:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c4fe:	22f5      	movs	r2, #245	@ 0xf5
3400c500:	482b      	ldr	r0, [pc, #172]	@ (3400c5b0 <LL_ATON_Init+0x54c>)
3400c502:	f001 fb3d 	bl	3400db80 <iprintf>
3400c506:	21f5      	movs	r1, #245	@ 0xf5
3400c508:	4b2a      	ldr	r3, [pc, #168]	@ (3400c5b4 <LL_ATON_Init+0x550>)
3400c50a:	4a2b      	ldr	r2, [pc, #172]	@ (3400c5b8 <LL_ATON_Init+0x554>)
3400c50c:	e6d2      	b.n	3400c2b4 <LL_ATON_Init+0x250>
3400c50e:	4b2b      	ldr	r3, [pc, #172]	@ (3400c5bc <LL_ATON_Init+0x558>)
3400c510:	e7e8      	b.n	3400c4e4 <LL_ATON_Init+0x480>
  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400c512:	f001 fed1 	bl	3400e2b8 <__errno>
3400c516:	6803      	ldr	r3, [r0, #0]
3400c518:	b1c3      	cbz	r3, 3400c54c <LL_ATON_Init+0x4e8>
3400c51a:	f001 fecd 	bl	3400e2b8 <__errno>
3400c51e:	6800      	ldr	r0, [r0, #0]
3400c520:	f001 fe64 	bl	3400e1ec <strerror>
3400c524:	4603      	mov	r3, r0
3400c526:	2201      	movs	r2, #1
3400c528:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400c52c:	221e      	movs	r2, #30
3400c52e:	e9cd 4203 	strd	r4, r2, [sp, #12]
3400c532:	4a29      	ldr	r2, [pc, #164]	@ (3400c5d8 <LL_ATON_Init+0x574>)
3400c534:	491d      	ldr	r1, [pc, #116]	@ (3400c5ac <LL_ATON_Init+0x548>)
3400c536:	9200      	str	r2, [sp, #0]
3400c538:	e9cd 5601 	strd	r5, r6, [sp, #4]
3400c53c:	22f7      	movs	r2, #247	@ 0xf7
3400c53e:	481c      	ldr	r0, [pc, #112]	@ (3400c5b0 <LL_ATON_Init+0x54c>)
3400c540:	f001 fb1e 	bl	3400db80 <iprintf>
3400c544:	21f7      	movs	r1, #247	@ 0xf7
3400c546:	4b1b      	ldr	r3, [pc, #108]	@ (3400c5b4 <LL_ATON_Init+0x550>)
3400c548:	4a1b      	ldr	r2, [pc, #108]	@ (3400c5b8 <LL_ATON_Init+0x554>)
3400c54a:	e6b3      	b.n	3400c2b4 <LL_ATON_Init+0x250>
3400c54c:	4b1b      	ldr	r3, [pc, #108]	@ (3400c5bc <LL_ATON_Init+0x558>)
3400c54e:	e7ea      	b.n	3400c526 <LL_ATON_Init+0x4c2>
  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400c550:	f001 feb2 	bl	3400e2b8 <__errno>
3400c554:	6803      	ldr	r3, [r0, #0]
3400c556:	b1cb      	cbz	r3, 3400c58c <LL_ATON_Init+0x528>
3400c558:	f001 feae 	bl	3400e2b8 <__errno>
3400c55c:	6800      	ldr	r0, [r0, #0]
3400c55e:	f001 fe45 	bl	3400e1ec <strerror>
3400c562:	4603      	mov	r3, r0
3400c564:	2201      	movs	r2, #1
3400c566:	2006      	movs	r0, #6
3400c568:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400c56c:	2200      	movs	r2, #0
3400c56e:	e9cd 6203 	strd	r6, r2, [sp, #12]
3400c572:	4a1a      	ldr	r2, [pc, #104]	@ (3400c5dc <LL_ATON_Init+0x578>)
3400c574:	490d      	ldr	r1, [pc, #52]	@ (3400c5ac <LL_ATON_Init+0x548>)
3400c576:	9200      	str	r2, [sp, #0]
3400c578:	e9cd 4501 	strd	r4, r5, [sp, #4]
3400c57c:	22f9      	movs	r2, #249	@ 0xf9
3400c57e:	480c      	ldr	r0, [pc, #48]	@ (3400c5b0 <LL_ATON_Init+0x54c>)
3400c580:	f001 fafe 	bl	3400db80 <iprintf>
3400c584:	21f9      	movs	r1, #249	@ 0xf9
3400c586:	4b0b      	ldr	r3, [pc, #44]	@ (3400c5b4 <LL_ATON_Init+0x550>)
3400c588:	4a0b      	ldr	r2, [pc, #44]	@ (3400c5b8 <LL_ATON_Init+0x554>)
3400c58a:	e693      	b.n	3400c2b4 <LL_ATON_Init+0x250>
3400c58c:	4b0b      	ldr	r3, [pc, #44]	@ (3400c5bc <LL_ATON_Init+0x558>)
3400c58e:	e7e9      	b.n	3400c564 <LL_ATON_Init+0x500>
  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3400c590:	4b0a      	ldr	r3, [pc, #40]	@ (3400c5bc <LL_ATON_Init+0x558>)
3400c592:	e65d      	b.n	3400c250 <LL_ATON_Init+0x1ec>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 1);
3400c594:	2301      	movs	r3, #1

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);

  return 0;
}
3400c596:	4620      	mov	r0, r4
    ATON_BUSIF_CTRL_SET(i, 1);
3400c598:	6013      	str	r3, [r2, #0]
3400c59a:	4a11      	ldr	r2, [pc, #68]	@ (3400c5e0 <LL_ATON_Init+0x57c>)
3400c59c:	6013      	str	r3, [r2, #0]
  ATON_INTCTRL_CTRL_SET(0, 1);
3400c59e:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
3400c5a2:	6013      	str	r3, [r2, #0]
}
3400c5a4:	b008      	add	sp, #32
3400c5a6:	bd70      	pop	{r4, r5, r6, pc}
3400c5a8:	34010c8d 	.word	0x34010c8d
3400c5ac:	34010b8f 	.word	0x34010b8f
3400c5b0:	34010c1a 	.word	0x34010c1a
3400c5b4:	34010ea7 	.word	0x34010ea7
3400c5b8:	34010cd5 	.word	0x34010cd5
3400c5bc:	34010b8a 	.word	0x34010b8a
3400c5c0:	34010c92 	.word	0x34010c92
3400c5c4:	34010c98 	.word	0x34010c98
3400c5c8:	34010c9e 	.word	0x34010c9e
3400c5cc:	34010ca4 	.word	0x34010ca4
3400c5d0:	34010cae 	.word	0x34010cae
3400c5d4:	34010cb5 	.word	0x34010cb5
3400c5d8:	34010cbd 	.word	0x34010cbd
3400c5dc:	34010cc5 	.word	0x34010cc5
3400c5e0:	580e3000 	.word	0x580e3000

3400c5e4 <LL_ATON_DeInit>:
int LL_ATON_DeInit(void)
{
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
3400c5e4:	2000      	movs	r0, #0
3400c5e6:	4b07      	ldr	r3, [pc, #28]	@ (3400c604 <LL_ATON_DeInit+0x20>)
3400c5e8:	6018      	str	r0, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 0);
3400c5ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400c5ee:	6018      	str	r0, [r3, #0]
3400c5f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400c5f4:	6018      	str	r0, [r3, #0]
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
3400c5f6:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
3400c5fa:	6098      	str	r0, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
3400c5fc:	60d8      	str	r0, [r3, #12]
  ATON_CLKCTRL_BGATES_SET(0, 0);
3400c5fe:	6118      	str	r0, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
3400c600:	6018      	str	r0, [r3, #0]

  return 0;
}
3400c602:	4770      	bx	lr
3400c604:	580e1000 	.word	0x580e1000

3400c608 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
3400c608:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
3400c60a:	2401      	movs	r4, #1
3400c60c:	2500      	movs	r5, #0
3400c60e:	2301      	movs	r3, #1
3400c610:	ea54 050d 	orrs.w	r5, r4, sp
3400c614:	4a03      	ldr	r2, [pc, #12]	@ (3400c624 <LL_ATON_EnableClock+0x1c>)
3400c616:	4083      	lsls	r3, r0
3400c618:	6911      	ldr	r1, [r2, #16]
3400c61a:	404b      	eors	r3, r1
3400c61c:	4023      	ands	r3, r4
3400c61e:	404b      	eors	r3, r1
3400c620:	6113      	str	r3, [r2, #16]
#endif
}
3400c622:	bd30      	pop	{r4, r5, pc}
3400c624:	580e0000 	.word	0x580e0000

3400c628 <LL_EpochCtrl_Init>:
  if (id >= ATON_EPOCHCTRL_NUM)
3400c628:	2800      	cmp	r0, #0
{
3400c62a:	b510      	push	{r4, lr}
3400c62c:	460c      	mov	r4, r1
  if (id >= ATON_EPOCHCTRL_NUM)
3400c62e:	dc0e      	bgt.n	3400c64e <LL_EpochCtrl_Init+0x26>
  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
3400c630:	3019      	adds	r0, #25
3400c632:	f7ff ffe9 	bl	3400c608 <LL_ATON_EnableClock>
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3400c636:	7923      	ldrb	r3, [r4, #4]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3400c638:	4a08      	ldr	r2, [pc, #32]	@ (3400c65c <LL_EpochCtrl_Init+0x34>)
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3400c63a:	f003 0301 	and.w	r3, r3, #1
3400c63e:	00db      	lsls	r3, r3, #3
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3400c640:	6013      	str	r3, [r2, #0]
  if (conf->blobaddr & 0x7)
3400c642:	6823      	ldr	r3, [r4, #0]
3400c644:	f013 0007 	ands.w	r0, r3, #7
3400c648:	d104      	bne.n	3400c654 <LL_EpochCtrl_Init+0x2c>
  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
3400c64a:	6093      	str	r3, [r2, #8]
}
3400c64c:	bd10      	pop	{r4, pc}
    return LL_ATON_INVALID_ID;
3400c64e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400c652:	e7fb      	b.n	3400c64c <LL_EpochCtrl_Init+0x24>
    return LL_ATON_INVALID_PARAM;
3400c654:	f06f 0001 	mvn.w	r0, #1
3400c658:	e7f8      	b.n	3400c64c <LL_EpochCtrl_Init+0x24>
3400c65a:	bf00      	nop
3400c65c:	580fe000 	.word	0x580fe000

3400c660 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
3400c660:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
3400c662:	2401      	movs	r4, #1
3400c664:	2500      	movs	r5, #0
3400c666:	ea54 050d 	orrs.w	r5, r4, sp
3400c66a:	4a03      	ldr	r2, [pc, #12]	@ (3400c678 <LL_ATON_DisableClock+0x18>)
3400c66c:	6913      	ldr	r3, [r2, #16]
3400c66e:	ea23 0304 	bic.w	r3, r3, r4
3400c672:	6113      	str	r3, [r2, #16]
#endif
}
3400c674:	bd30      	pop	{r4, r5, pc}
3400c676:	bf00      	nop
3400c678:	580e0000 	.word	0x580e0000

3400c67c <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
3400c67c:	b510      	push	{r4, lr}

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
3400c67e:	4604      	mov	r4, r0
3400c680:	b928      	cbnz	r0, 3400c68e <LL_ATON_RT_Main+0x12>
3400c682:	212f      	movs	r1, #47	@ 0x2f
3400c684:	4b0f      	ldr	r3, [pc, #60]	@ (3400c6c4 <LL_ATON_RT_Main+0x48>)
3400c686:	4a10      	ldr	r2, [pc, #64]	@ (3400c6c8 <LL_ATON_RT_Main+0x4c>)
  LL_ATON_ASSERT(network_instance->network != NULL);
3400c688:	4810      	ldr	r0, [pc, #64]	@ (3400c6cc <LL_ATON_RT_Main+0x50>)
3400c68a:	f000 fc97 	bl	3400cfbc <__assert_func>
3400c68e:	6803      	ldr	r3, [r0, #0]
3400c690:	b91b      	cbnz	r3, 3400c69a <LL_ATON_RT_Main+0x1e>
3400c692:	2130      	movs	r1, #48	@ 0x30
3400c694:	4b0e      	ldr	r3, [pc, #56]	@ (3400c6d0 <LL_ATON_RT_Main+0x54>)
3400c696:	4a0c      	ldr	r2, [pc, #48]	@ (3400c6c8 <LL_ATON_RT_Main+0x4c>)
3400c698:	e7f6      	b.n	3400c688 <LL_ATON_RT_Main+0xc>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
3400c69a:	f000 fa0f 	bl	3400cabc <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
3400c69e:	4620      	mov	r0, r4
3400c6a0:	f000 f9ca 	bl	3400ca38 <LL_ATON_RT_Init_Network>

  do
  {
    /* Execute first/next step of Cube.AI/ATON runtime */
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
3400c6a4:	4620      	mov	r0, r4
3400c6a6:	f000 fa83 	bl	3400cbb0 <LL_ATON_RT_RunEpochBlock>
    /*** Start of user event handling code ***/

    /*** End of user event handling code ***/

    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
3400c6aa:	2801      	cmp	r0, #1
3400c6ac:	d101      	bne.n	3400c6b2 <LL_ATON_RT_Main+0x36>
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
3400c6ae:	bf20      	wfe
    }
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
3400c6b0:	e7f8      	b.n	3400c6a4 <LL_ATON_RT_Main+0x28>
3400c6b2:	2802      	cmp	r0, #2
3400c6b4:	d1f6      	bne.n	3400c6a4 <LL_ATON_RT_Main+0x28>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
3400c6b6:	4620      	mov	r0, r4
3400c6b8:	f000 f9e2 	bl	3400ca80 <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
3400c6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
3400c6c0:	f000 ba46 	b.w	3400cb50 <LL_ATON_RT_RuntimeDeInit>
3400c6c4:	34010ce2 	.word	0x34010ce2
3400c6c8:	34010dbe 	.word	0x34010dbe
3400c6cc:	34010d02 	.word	0x34010d02
3400c6d0:	34010d95 	.word	0x34010d95

3400c6d4 <__LL_ATON_RT_Init_Network>:
                          // wait for
  }
}

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
3400c6d4:	b510      	push	{r4, lr}
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3400c6d6:	4604      	mov	r4, r0
3400c6d8:	b310      	cbz	r0, 3400c720 <__LL_ATON_RT_Init_Network+0x4c>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3400c6da:	6803      	ldr	r3, [r0, #0]
3400c6dc:	b303      	cbz	r3, 3400c720 <__LL_ATON_RT_Init_Network+0x4c>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
3400c6de:	69db      	ldr	r3, [r3, #28]
3400c6e0:	4798      	blx	r3
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
  nn_instance->exec_state.first_epoch_block = eb_list;
  nn_instance->exec_state.next_epoch_block = NULL;
3400c6e2:	2300      	movs	r3, #0
  nn_instance->exec_state.current_epoch_block = eb_list;
3400c6e4:	6060      	str	r0, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400c6e6:	60a0      	str	r0, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400c6e8:	60e3      	str	r3, [r4, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400c6ea:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400c6ec:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400c6ee:	6863      	ldr	r3, [r4, #4]
  if (list != NULL)
3400c6f0:	b9a3      	cbnz	r3, 3400c71c <__LL_ATON_RT_Init_Network+0x48>
  int i = 0;
3400c6f2:	461a      	mov	r2, r3
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400c6f4:	6262      	str	r2, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400c6f6:	2200      	movs	r2, #0
  nn_instance->exec_state.triggered_events = 0x0;
  nn_instance->exec_state.current_epoch_block_started = false;
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400c6f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400c6fa:	62a2      	str	r2, [r4, #40]	@ 0x28
  nn_instance->exec_state.inference_started = false;
3400c6fc:	7622      	strb	r2, [r4, #24]
  nn_instance->exec_state.triggered_events = 0x0;
3400c6fe:	61e2      	str	r2, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400c700:	f884 2020 	strb.w	r2, [r4, #32]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400c704:	b163      	cbz	r3, 3400c720 <__LL_ATON_RT_Init_Network+0x4c>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400c706:	4621      	mov	r1, r4
  }
}
3400c708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400c70c:	2004      	movs	r0, #4
3400c70e:	4718      	bx	r3
      list++;
3400c710:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400c712:	3201      	adds	r2, #1
3400c714:	8a19      	ldrh	r1, [r3, #16]
3400c716:	0709      	lsls	r1, r1, #28
3400c718:	d5fa      	bpl.n	3400c710 <__LL_ATON_RT_Init_Network+0x3c>
3400c71a:	e7eb      	b.n	3400c6f4 <__LL_ATON_RT_Init_Network+0x20>
3400c71c:	2201      	movs	r2, #1
3400c71e:	e7f9      	b.n	3400c714 <__LL_ATON_RT_Init_Network+0x40>
}
3400c720:	bd10      	pop	{r4, pc}
	...

3400c724 <__ll_clear_aton_owner>:

    __ll_current_aton_ip_owner = new_owner;
  }

  static inline void __ll_clear_aton_owner(NN_Instance_TypeDef *current_owner)
  {
3400c724:	b508      	push	{r3, lr}
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
3400c726:	4b09      	ldr	r3, [pc, #36]	@ (3400c74c <__ll_clear_aton_owner+0x28>)
3400c728:	681a      	ldr	r2, [r3, #0]
3400c72a:	4282      	cmp	r2, r0
3400c72c:	d005      	beq.n	3400c73a <__ll_clear_aton_owner+0x16>
3400c72e:	2142      	movs	r1, #66	@ 0x42
3400c730:	4b07      	ldr	r3, [pc, #28]	@ (3400c750 <__ll_clear_aton_owner+0x2c>)
3400c732:	4a08      	ldr	r2, [pc, #32]	@ (3400c754 <__ll_clear_aton_owner+0x30>)

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400c734:	4808      	ldr	r0, [pc, #32]	@ (3400c758 <__ll_clear_aton_owner+0x34>)
3400c736:	f000 fc41 	bl	3400cfbc <__assert_func>
3400c73a:	4a08      	ldr	r2, [pc, #32]	@ (3400c75c <__ll_clear_aton_owner+0x38>)
3400c73c:	6812      	ldr	r2, [r2, #0]
3400c73e:	b11a      	cbz	r2, 3400c748 <__ll_clear_aton_owner+0x24>
3400c740:	2146      	movs	r1, #70	@ 0x46
3400c742:	4b07      	ldr	r3, [pc, #28]	@ (3400c760 <__ll_clear_aton_owner+0x3c>)
3400c744:	4a03      	ldr	r2, [pc, #12]	@ (3400c754 <__ll_clear_aton_owner+0x30>)
3400c746:	e7f5      	b.n	3400c734 <__ll_clear_aton_owner+0x10>
#endif // NDEBUG

    __ll_current_aton_ip_owner = NULL;
3400c748:	601a      	str	r2, [r3, #0]
    LL_ATON_OSAL_UNLOCK_ATON();
  }
3400c74a:	bd08      	pop	{r3, pc}
3400c74c:	34012be0 	.word	0x34012be0
3400c750:	34010dce 	.word	0x34010dce
3400c754:	34011713 	.word	0x34011713
3400c758:	34010dfa 	.word	0x34010dfa
3400c75c:	34012bdc 	.word	0x34012bdc
3400c760:	34010e8d 	.word	0x34010e8d

3400c764 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
3400c764:	b508      	push	{r3, lr}
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400c766:	4b07      	ldr	r3, [pc, #28]	@ (3400c784 <__LL_ATON_RT_SetWaitMask+0x20>)
3400c768:	681b      	ldr	r3, [r3, #0]
3400c76a:	b92b      	cbnz	r3, 3400c778 <__LL_ATON_RT_SetWaitMask+0x14>
3400c76c:	2175      	movs	r1, #117	@ 0x75
3400c76e:	4b06      	ldr	r3, [pc, #24]	@ (3400c788 <__LL_ATON_RT_SetWaitMask+0x24>)
3400c770:	4a06      	ldr	r2, [pc, #24]	@ (3400c78c <__LL_ATON_RT_SetWaitMask+0x28>)
3400c772:	4807      	ldr	r0, [pc, #28]	@ (3400c790 <__LL_ATON_RT_SetWaitMask+0x2c>)
3400c774:	f000 fc22 	bl	3400cfbc <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
3400c778:	4b06      	ldr	r3, [pc, #24]	@ (3400c794 <__LL_ATON_RT_SetWaitMask+0x30>)
3400c77a:	6018      	str	r0, [r3, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3400c77c:	43c0      	mvns	r0, r0
3400c77e:	4b06      	ldr	r3, [pc, #24]	@ (3400c798 <__LL_ATON_RT_SetWaitMask+0x34>)
3400c780:	6258      	str	r0, [r3, #36]	@ 0x24
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
3400c782:	bd08      	pop	{r3, pc}
3400c784:	34012be0 	.word	0x34012be0
3400c788:	34010ea9 	.word	0x34010ea9
3400c78c:	34011666 	.word	0x34011666
3400c790:	34010dfa 	.word	0x34010dfa
3400c794:	34012bdc 	.word	0x34012bdc
3400c798:	580e1000 	.word	0x580e1000

3400c79c <EpochBlock_EpochControllerUnit>:
  {
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
  }

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
3400c79c:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3400c79e:	8a03      	ldrh	r3, [r0, #16]
3400c7a0:	075b      	lsls	r3, r3, #29
3400c7a2:	d406      	bmi.n	3400c7b2 <EpochBlock_EpochControllerUnit+0x16>
3400c7a4:	f240 212f 	movw	r1, #559	@ 0x22f
3400c7a8:	4b03      	ldr	r3, [pc, #12]	@ (3400c7b8 <EpochBlock_EpochControllerUnit+0x1c>)
3400c7aa:	4a04      	ldr	r2, [pc, #16]	@ (3400c7bc <EpochBlock_EpochControllerUnit+0x20>)
3400c7ac:	4804      	ldr	r0, [pc, #16]	@ (3400c7c0 <EpochBlock_EpochControllerUnit+0x24>)
3400c7ae:	f000 fc05 	bl	3400cfbc <__assert_func>
    return eb->wait_mask;
  }
3400c7b2:	68c0      	ldr	r0, [r0, #12]
3400c7b4:	bd08      	pop	{r3, pc}
3400c7b6:	bf00      	nop
3400c7b8:	34010ed3 	.word	0x34010ed3
3400c7bc:	34011647 	.word	0x34011647
3400c7c0:	34010eee 	.word	0x34010eee

3400c7c4 <__LL_ATON_RT_ExecEndEpochBlock>:
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400c7c4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
{
3400c7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400c7ca:	4605      	mov	r5, r0
3400c7cc:	460c      	mov	r4, r1
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400c7ce:	b113      	cbz	r3, 3400c7d6 <__LL_ATON_RT_ExecEndEpochBlock+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
3400c7d0:	4602      	mov	r2, r0
3400c7d2:	2002      	movs	r0, #2
3400c7d4:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400c7d6:	8a2b      	ldrh	r3, [r5, #16]
3400c7d8:	0758      	lsls	r0, r3, #29
3400c7da:	d518      	bpl.n	3400c80e <__LL_ATON_RT_ExecEndEpochBlock+0x4a>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400c7dc:	4628      	mov	r0, r5
3400c7de:	f7ff ffdd 	bl	3400c79c <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400c7e2:	b128      	cbz	r0, 3400c7f0 <__LL_ATON_RT_ExecEndEpochBlock+0x2c>
3400c7e4:	21c2      	movs	r1, #194	@ 0xc2
3400c7e6:	4b25      	ldr	r3, [pc, #148]	@ (3400c87c <__LL_ATON_RT_ExecEndEpochBlock+0xb8>)
3400c7e8:	4a25      	ldr	r2, [pc, #148]	@ (3400c880 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400c7ea:	4826      	ldr	r0, [pc, #152]	@ (3400c884 <__LL_ATON_RT_ExecEndEpochBlock+0xc0>)
3400c7ec:	f000 fbe6 	bl	3400cfbc <__assert_func>
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
3400c7f0:	2202      	movs	r2, #2
3400c7f2:	4b25      	ldr	r3, [pc, #148]	@ (3400c888 <__LL_ATON_RT_ExecEndEpochBlock+0xc4>)
3400c7f4:	601a      	str	r2, [r3, #0]
3400c7f6:	681a      	ldr	r2, [r3, #0]
3400c7f8:	0791      	lsls	r1, r2, #30
3400c7fa:	d4fc      	bmi.n	3400c7f6 <__LL_ATON_RT_ExecEndEpochBlock+0x32>
3400c7fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400c800:	601a      	str	r2, [r3, #0]
3400c802:	681a      	ldr	r2, [r3, #0]
3400c804:	0052      	lsls	r2, r2, #1
3400c806:	d4fc      	bmi.n	3400c802 <__LL_ATON_RT_ExecEndEpochBlock+0x3e>
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
3400c808:	2019      	movs	r0, #25
3400c80a:	f7ff ff29 	bl	3400c660 <LL_ATON_DisableClock>
  if (eb->end_epoch_block != NULL)
3400c80e:	686b      	ldr	r3, [r5, #4]
3400c810:	b10b      	cbz	r3, 3400c816 <__LL_ATON_RT_ExecEndEpochBlock+0x52>
    eb->end_epoch_block((const void *)eb);
3400c812:	4628      	mov	r0, r5
3400c814:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
3400c816:	8a2e      	ldrh	r6, [r5, #16]
  if (EpochBlock_IsEpochPureHW(eb) ||
3400c818:	f016 0f90 	tst.w	r6, #144	@ 0x90
3400c81c:	f006 07c0 	and.w	r7, r6, #192	@ 0xc0
3400c820:	d108      	bne.n	3400c834 <__LL_ATON_RT_ExecEndEpochBlock+0x70>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400c822:	bb0f      	cbnz	r7, 3400c868 <__LL_ATON_RT_ExecEndEpochBlock+0xa4>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400c824:	4b19      	ldr	r3, [pc, #100]	@ (3400c88c <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400c826:	681b      	ldr	r3, [r3, #0]
3400c828:	42a3      	cmp	r3, r4
3400c82a:	d115      	bne.n	3400c858 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400c82c:	21ed      	movs	r1, #237	@ 0xed
3400c82e:	4b18      	ldr	r3, [pc, #96]	@ (3400c890 <__LL_ATON_RT_ExecEndEpochBlock+0xcc>)
3400c830:	4a13      	ldr	r2, [pc, #76]	@ (3400c880 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400c832:	e7da      	b.n	3400c7ea <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400c834:	4b15      	ldr	r3, [pc, #84]	@ (3400c88c <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400c836:	681b      	ldr	r3, [r3, #0]
3400c838:	42a3      	cmp	r3, r4
3400c83a:	d003      	beq.n	3400c844 <__LL_ATON_RT_ExecEndEpochBlock+0x80>
3400c83c:	21e1      	movs	r1, #225	@ 0xe1
3400c83e:	4b15      	ldr	r3, [pc, #84]	@ (3400c894 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>)
3400c840:	4a0f      	ldr	r2, [pc, #60]	@ (3400c880 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400c842:	e7d2      	b.n	3400c7ea <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    __LL_ATON_RT_SetWaitMask(0);
3400c844:	2000      	movs	r0, #0
3400c846:	f7ff ff8d 	bl	3400c764 <__LL_ATON_RT_SetWaitMask>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400c84a:	06f3      	lsls	r3, r6, #27
3400c84c:	d5e9      	bpl.n	3400c822 <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
    __ll_clear_aton_owner(nn_instance);
3400c84e:	4620      	mov	r0, r4
3400c850:	f7ff ff68 	bl	3400c724 <__ll_clear_aton_owner>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400c854:	2f00      	cmp	r7, #0
3400c856:	d0e5      	beq.n	3400c824 <__LL_ATON_RT_ExecEndEpochBlock+0x60>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400c858:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400c85a:	b163      	cbz	r3, 3400c876 <__LL_ATON_RT_ExecEndEpochBlock+0xb2>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400c85c:	462a      	mov	r2, r5
3400c85e:	4621      	mov	r1, r4
}
3400c860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400c864:	2003      	movs	r0, #3
3400c866:	4718      	bx	r3
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400c868:	6923      	ldr	r3, [r4, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400c86a:	2b00      	cmp	r3, #0
3400c86c:	d1f4      	bne.n	3400c858 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
                                       (nn_instance->exec_state.next_epoch_block ==
3400c86e:	68e3      	ldr	r3, [r4, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400c870:	2b00      	cmp	r3, #0
3400c872:	d1f1      	bne.n	3400c858 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400c874:	e7eb      	b.n	3400c84e <__LL_ATON_RT_ExecEndEpochBlock+0x8a>
}
3400c876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400c87a:	bf00      	nop
3400c87c:	34010f86 	.word	0x34010f86
3400c880:	34011628 	.word	0x34011628
3400c884:	34010f8f 	.word	0x34010f8f
3400c888:	580fe000 	.word	0x580fe000
3400c88c:	34012be0 	.word	0x34012be0
3400c890:	3401104c 	.word	0x3401104c
3400c894:	34011022 	.word	0x34011022

3400c898 <__LL_ATON_RT_DetermineNextEpochBlock>:
{
3400c898:	b508      	push	{r3, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400c89a:	b928      	cbnz	r0, 3400c8a8 <__LL_ATON_RT_DetermineNextEpochBlock+0x10>
3400c89c:	21f8      	movs	r1, #248	@ 0xf8
3400c89e:	4b1a      	ldr	r3, [pc, #104]	@ (3400c908 <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
3400c8a0:	4a1a      	ldr	r2, [pc, #104]	@ (3400c90c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400c8a2:	481b      	ldr	r0, [pc, #108]	@ (3400c910 <__LL_ATON_RT_DetermineNextEpochBlock+0x78>)
3400c8a4:	f000 fb8a 	bl	3400cfbc <__assert_func>
3400c8a8:	69c3      	ldr	r3, [r0, #28]
3400c8aa:	b11b      	cbz	r3, 3400c8b4 <__LL_ATON_RT_DetermineNextEpochBlock+0x1c>
3400c8ac:	21fa      	movs	r1, #250	@ 0xfa
3400c8ae:	4b19      	ldr	r3, [pc, #100]	@ (3400c914 <__LL_ATON_RT_DetermineNextEpochBlock+0x7c>)
3400c8b0:	4a16      	ldr	r2, [pc, #88]	@ (3400c90c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400c8b2:	e7f6      	b.n	3400c8a2 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
  if ((nn_instance->exec_state.next_epoch_block != NULL))
3400c8b4:	68c3      	ldr	r3, [r0, #12]
3400c8b6:	b313      	cbz	r3, 3400c8fe <__LL_ATON_RT_DetermineNextEpochBlock+0x66>
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
3400c8b8:	6903      	ldr	r3, [r0, #16]
3400c8ba:	b123      	cbz	r3, 3400c8c6 <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
3400c8bc:	f44f 7181 	mov.w	r1, #258	@ 0x102
3400c8c0:	4b15      	ldr	r3, [pc, #84]	@ (3400c918 <__LL_ATON_RT_DetermineNextEpochBlock+0x80>)
3400c8c2:	4a12      	ldr	r2, [pc, #72]	@ (3400c90c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400c8c4:	e7ed      	b.n	3400c8a2 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
3400c8c6:	6843      	ldr	r3, [r0, #4]
3400c8c8:	6103      	str	r3, [r0, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
3400c8ca:	6883      	ldr	r3, [r0, #8]
3400c8cc:	6143      	str	r3, [r0, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
3400c8ce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
3400c8d0:	6283      	str	r3, [r0, #40]	@ 0x28
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
3400c8d2:	68c3      	ldr	r3, [r0, #12]
3400c8d4:	6043      	str	r3, [r0, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
3400c8d6:	68c3      	ldr	r3, [r0, #12]
3400c8d8:	6083      	str	r3, [r0, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400c8da:	6883      	ldr	r3, [r0, #8]
  if (list != NULL)
3400c8dc:	b96b      	cbnz	r3, 3400c8fa <__LL_ATON_RT_DetermineNextEpochBlock+0x62>
  int i = 0;
3400c8de:	461a      	mov	r2, r3
    nn_instance->exec_state.next_epoch_block = NULL;
3400c8e0:	2300      	movs	r3, #0
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400c8e2:	6242      	str	r2, [r0, #36]	@ 0x24
    nn_instance->exec_state.next_epoch_block = NULL;
3400c8e4:	60c3      	str	r3, [r0, #12]
  nn_instance->exec_state.current_epoch_block_started = false;
3400c8e6:	2300      	movs	r3, #0
3400c8e8:	f880 3020 	strb.w	r3, [r0, #32]
}
3400c8ec:	bd08      	pop	{r3, pc}
      list++;
3400c8ee:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400c8f0:	3201      	adds	r2, #1
3400c8f2:	8a19      	ldrh	r1, [r3, #16]
3400c8f4:	0709      	lsls	r1, r1, #28
3400c8f6:	d5fa      	bpl.n	3400c8ee <__LL_ATON_RT_DetermineNextEpochBlock+0x56>
3400c8f8:	e7f2      	b.n	3400c8e0 <__LL_ATON_RT_DetermineNextEpochBlock+0x48>
3400c8fa:	2201      	movs	r2, #1
3400c8fc:	e7f9      	b.n	3400c8f2 <__LL_ATON_RT_DetermineNextEpochBlock+0x5a>
    nn_instance->exec_state.current_epoch_block++;
3400c8fe:	6843      	ldr	r3, [r0, #4]
3400c900:	3314      	adds	r3, #20
3400c902:	6043      	str	r3, [r0, #4]
3400c904:	e7ef      	b.n	3400c8e6 <__LL_ATON_RT_DetermineNextEpochBlock+0x4e>
3400c906:	bf00      	nop
3400c908:	340110ba 	.word	0x340110ba
3400c90c:	34011603 	.word	0x34011603
3400c910:	34010f8f 	.word	0x34010f8f
3400c914:	340110d5 	.word	0x340110d5
3400c918:	34011105 	.word	0x34011105

3400c91c <dump_dma_state>:
LL_ATON_WEAK void dump_dma_state(void){};
3400c91c:	4770      	bx	lr
	...

3400c920 <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3400c920:	b538      	push	{r3, r4, r5, lr}
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3400c922:	4604      	mov	r4, r0
3400c924:	2800      	cmp	r0, #0
3400c926:	d05d      	beq.n	3400c9e4 <__LL_ATON_RT_IrqErr+0xc4>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
3400c928:	4b2f      	ldr	r3, [pc, #188]	@ (3400c9e8 <__LL_ATON_RT_IrqErr+0xc8>)
3400c92a:	4003      	ands	r3, r0
3400c92c:	d009      	beq.n	3400c942 <__LL_ATON_RT_IrqErr+0x22>

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3400c92e:	4259      	negs	r1, r3
3400c930:	4019      	ands	r1, r3
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
3400c932:	f501 23b0 	add.w	r3, r1, #360448	@ 0x58000
3400c936:	33e5      	adds	r3, #229	@ 0xe5
3400c938:	031b      	lsls	r3, r3, #12
3400c93a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
3400c93c:	482b      	ldr	r0, [pc, #172]	@ (3400c9ec <__LL_ATON_RT_IrqErr+0xcc>)
3400c93e:	f001 f91f 	bl	3400db80 <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3400c942:	f3c4 0309 	ubfx	r3, r4, #0, #10
3400c946:	b113      	cbz	r3, 3400c94e <__LL_ATON_RT_IrqErr+0x2e>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3400c948:	4829      	ldr	r0, [pc, #164]	@ (3400c9f0 <__LL_ATON_RT_IrqErr+0xd0>)
3400c94a:	f001 f981 	bl	3400dc50 <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3400c94e:	f414 0f70 	tst.w	r4, #15728640	@ 0xf00000
3400c952:	d002      	beq.n	3400c95a <__LL_ATON_RT_IrqErr+0x3a>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3400c954:	4827      	ldr	r0, [pc, #156]	@ (3400c9f4 <__LL_ATON_RT_IrqErr+0xd4>)
3400c956:	f001 f97b 	bl	3400dc50 <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
3400c95a:	01e5      	lsls	r5, r4, #7
3400c95c:	d502      	bpl.n	3400c964 <__LL_ATON_RT_IrqErr+0x44>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3400c95e:	4826      	ldr	r0, [pc, #152]	@ (3400c9f8 <__LL_ATON_RT_IrqErr+0xd8>)
3400c960:	f001 f976 	bl	3400dc50 <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3400c964:	f014 6fc0 	tst.w	r4, #100663296	@ 0x6000000
3400c968:	d00e      	beq.n	3400c988 <__LL_ATON_RT_IrqErr+0x68>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3400c96a:	4824      	ldr	r0, [pc, #144]	@ (3400c9fc <__LL_ATON_RT_IrqErr+0xdc>)
3400c96c:	f001 f970 	bl	3400dc50 <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3400c970:	4b23      	ldr	r3, [pc, #140]	@ (3400ca00 <__LL_ATON_RT_IrqErr+0xe0>)
3400c972:	2100      	movs	r1, #0
3400c974:	691a      	ldr	r2, [r3, #16]
3400c976:	4823      	ldr	r0, [pc, #140]	@ (3400ca04 <__LL_ATON_RT_IrqErr+0xe4>)
3400c978:	f001 f902 	bl	3400db80 <iprintf>
3400c97c:	4b22      	ldr	r3, [pc, #136]	@ (3400ca08 <__LL_ATON_RT_IrqErr+0xe8>)
3400c97e:	2101      	movs	r1, #1
3400c980:	691a      	ldr	r2, [r3, #16]
3400c982:	4820      	ldr	r0, [pc, #128]	@ (3400ca04 <__LL_ATON_RT_IrqErr+0xe4>)
3400c984:	f001 f8fc 	bl	3400db80 <iprintf>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
3400c988:	0120      	lsls	r0, r4, #4
3400c98a:	d502      	bpl.n	3400c992 <__LL_ATON_RT_IrqErr+0x72>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3400c98c:	481f      	ldr	r0, [pc, #124]	@ (3400ca0c <__LL_ATON_RT_IrqErr+0xec>)
3400c98e:	f001 f95f 	bl	3400dc50 <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
3400c992:	0061      	lsls	r1, r4, #1
3400c994:	d50c      	bpl.n	3400c9b0 <__LL_ATON_RT_IrqErr+0x90>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3400c996:	4d1e      	ldr	r5, [pc, #120]	@ (3400ca10 <__LL_ATON_RT_IrqErr+0xf0>)
3400c998:	481e      	ldr	r0, [pc, #120]	@ (3400ca14 <__LL_ATON_RT_IrqErr+0xf4>)
3400c99a:	68e9      	ldr	r1, [r5, #12]
3400c99c:	f001 f8f0 	bl	3400db80 <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3400c9a0:	6a29      	ldr	r1, [r5, #32]
3400c9a2:	481d      	ldr	r0, [pc, #116]	@ (3400ca18 <__LL_ATON_RT_IrqErr+0xf8>)
3400c9a4:	f001 f8ec 	bl	3400db80 <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
3400c9a8:	69e9      	ldr	r1, [r5, #28]
3400c9aa:	481c      	ldr	r0, [pc, #112]	@ (3400ca1c <__LL_ATON_RT_IrqErr+0xfc>)
3400c9ac:	f001 f8e8 	bl	3400db80 <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3400c9b0:	00a2      	lsls	r2, r4, #2
3400c9b2:	d502      	bpl.n	3400c9ba <__LL_ATON_RT_IrqErr+0x9a>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3400c9b4:	481a      	ldr	r0, [pc, #104]	@ (3400ca20 <__LL_ATON_RT_IrqErr+0x100>)
3400c9b6:	f001 f94b 	bl	3400dc50 <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3400c9ba:	00e3      	lsls	r3, r4, #3
3400c9bc:	d502      	bpl.n	3400c9c4 <__LL_ATON_RT_IrqErr+0xa4>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3400c9be:	4819      	ldr	r0, [pc, #100]	@ (3400ca24 <__LL_ATON_RT_IrqErr+0x104>)
3400c9c0:	f001 f946 	bl	3400dc50 <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
3400c9c4:	f7ff ffaa 	bl	3400c91c <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
3400c9c8:	4622      	mov	r2, r4
3400c9ca:	2300      	movs	r3, #0
3400c9cc:	f240 314a 	movw	r1, #842	@ 0x34a
3400c9d0:	4815      	ldr	r0, [pc, #84]	@ (3400ca28 <__LL_ATON_RT_IrqErr+0x108>)
3400c9d2:	f001 f8d5 	bl	3400db80 <iprintf>
#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
#endif
  LL_ATON_ASSERT(false); // may never happen
3400c9d6:	f240 314e 	movw	r1, #846	@ 0x34e
3400c9da:	4b14      	ldr	r3, [pc, #80]	@ (3400ca2c <__LL_ATON_RT_IrqErr+0x10c>)
3400c9dc:	4a14      	ldr	r2, [pc, #80]	@ (3400ca30 <__LL_ATON_RT_IrqErr+0x110>)
3400c9de:	4815      	ldr	r0, [pc, #84]	@ (3400ca34 <__LL_ATON_RT_IrqErr+0x114>)
3400c9e0:	f000 faec 	bl	3400cfbc <__assert_func>
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
3400c9e4:	bd38      	pop	{r3, r4, r5, pc}
3400c9e6:	bf00      	nop
3400c9e8:	000ffc00 	.word	0x000ffc00
3400c9ec:	34011146 	.word	0x34011146
3400c9f0:	34011173 	.word	0x34011173
3400c9f4:	34011199 	.word	0x34011199
3400c9f8:	340111bd 	.word	0x340111bd
3400c9fc:	340111dd 	.word	0x340111dd
3400ca00:	580e2000 	.word	0x580e2000
3400ca04:	340111f5 	.word	0x340111f5
3400ca08:	580e3000 	.word	0x580e3000
3400ca0c:	3401120a 	.word	0x3401120a
3400ca10:	580fe000 	.word	0x580fe000
3400ca14:	34011222 	.word	0x34011222
3400ca18:	34011256 	.word	0x34011256
3400ca1c:	34011280 	.word	0x34011280
3400ca20:	340112a1 	.word	0x340112a1
3400ca24:	340112c2 	.word	0x340112c2
3400ca28:	340112dd 	.word	0x340112dd
3400ca2c:	34010ea7 	.word	0x34010ea7
3400ca30:	340115df 	.word	0x340115df
3400ca34:	34010f8f 	.word	0x34010f8f

3400ca38 <LL_ATON_RT_Init_Network>:
{
3400ca38:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400ca3a:	4604      	mov	r4, r0
3400ca3c:	b1b0      	cbz	r0, 3400ca6c <LL_ATON_RT_Init_Network+0x34>
  if (nn_instance->network == NULL)
3400ca3e:	6803      	ldr	r3, [r0, #0]
3400ca40:	b1a3      	cbz	r3, 3400ca6c <LL_ATON_RT_Init_Network+0x34>
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
3400ca42:	685b      	ldr	r3, [r3, #4]
3400ca44:	b933      	cbnz	r3, 3400ca54 <LL_ATON_RT_Init_Network+0x1c>
3400ca46:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
3400ca4a:	4b09      	ldr	r3, [pc, #36]	@ (3400ca70 <LL_ATON_RT_Init_Network+0x38>)
3400ca4c:	4a09      	ldr	r2, [pc, #36]	@ (3400ca74 <LL_ATON_RT_Init_Network+0x3c>)
  LL_ATON_ASSERT(ret == true);
3400ca4e:	480a      	ldr	r0, [pc, #40]	@ (3400ca78 <LL_ATON_RT_Init_Network+0x40>)
3400ca50:	f000 fab4 	bl	3400cfbc <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
3400ca54:	4798      	blx	r3
  LL_ATON_ASSERT(ret == true);
3400ca56:	b920      	cbnz	r0, 3400ca62 <LL_ATON_RT_Init_Network+0x2a>
3400ca58:	f240 11a9 	movw	r1, #425	@ 0x1a9
3400ca5c:	4b07      	ldr	r3, [pc, #28]	@ (3400ca7c <LL_ATON_RT_Init_Network+0x44>)
3400ca5e:	4a05      	ldr	r2, [pc, #20]	@ (3400ca74 <LL_ATON_RT_Init_Network+0x3c>)
3400ca60:	e7f5      	b.n	3400ca4e <LL_ATON_RT_Init_Network+0x16>
  __LL_ATON_RT_Init_Network(nn_instance);
3400ca62:	4620      	mov	r0, r4
}
3400ca64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __LL_ATON_RT_Init_Network(nn_instance);
3400ca68:	f7ff be34 	b.w	3400c6d4 <__LL_ATON_RT_Init_Network>
}
3400ca6c:	bd10      	pop	{r4, pc}
3400ca6e:	bf00      	nop
3400ca70:	34011304 	.word	0x34011304
3400ca74:	34011729 	.word	0x34011729
3400ca78:	34010f8f 	.word	0x34010f8f
3400ca7c:	34011339 	.word	0x34011339

3400ca80 <LL_ATON_RT_DeInit_Network>:
{
3400ca80:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400ca82:	4604      	mov	r4, r0
3400ca84:	b1b8      	cbz	r0, 3400cab6 <LL_ATON_RT_DeInit_Network+0x36>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400ca86:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400ca88:	b11b      	cbz	r3, 3400ca92 <LL_ATON_RT_DeInit_Network+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
3400ca8a:	4601      	mov	r1, r0
3400ca8c:	2200      	movs	r2, #0
3400ca8e:	2005      	movs	r0, #5
3400ca90:	4798      	blx	r3
  if (nn_instance == __ll_current_aton_ip_owner)
3400ca92:	4b09      	ldr	r3, [pc, #36]	@ (3400cab8 <LL_ATON_RT_DeInit_Network+0x38>)
3400ca94:	681b      	ldr	r3, [r3, #0]
3400ca96:	42a3      	cmp	r3, r4
3400ca98:	d102      	bne.n	3400caa0 <LL_ATON_RT_DeInit_Network+0x20>
    __ll_clear_aton_owner(nn_instance);
3400ca9a:	4620      	mov	r0, r4
3400ca9c:	f7ff fe42 	bl	3400c724 <__ll_clear_aton_owner>
  nn_instance->exec_state.current_epoch_block = eb_list;
3400caa0:	2300      	movs	r3, #0
3400caa2:	6063      	str	r3, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400caa4:	60a3      	str	r3, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400caa6:	60e3      	str	r3, [r4, #12]
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400caa8:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400caaa:	6163      	str	r3, [r4, #20]
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
3400caac:	6263      	str	r3, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400caae:	62a3      	str	r3, [r4, #40]	@ 0x28
  nn_instance->exec_state.triggered_events = 0x0;
3400cab0:	61e3      	str	r3, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400cab2:	f884 3020 	strb.w	r3, [r4, #32]
}
3400cab6:	bd10      	pop	{r4, pc}
3400cab8:	34012be0 	.word	0x34012be0

3400cabc <LL_ATON_RT_RuntimeInit>:
{
3400cabc:	b510      	push	{r4, lr}
  LL_ATON_Init();
3400cabe:	f7ff fad1 	bl	3400c064 <LL_ATON_Init>
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
3400cac2:	2202      	movs	r2, #2
3400cac4:	4b1f      	ldr	r3, [pc, #124]	@ (3400cb44 <LL_ATON_RT_RuntimeInit+0x88>)
3400cac6:	601a      	str	r2, [r3, #0]
3400cac8:	681a      	ldr	r2, [r3, #0]
3400caca:	0791      	lsls	r1, r2, #30
3400cacc:	d4fc      	bmi.n	3400cac8 <LL_ATON_RT_RuntimeInit+0xc>
3400cace:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400cad2:	601a      	str	r2, [r3, #0]
3400cad4:	681a      	ldr	r2, [r3, #0]
3400cad6:	0052      	lsls	r2, r2, #1
3400cad8:	d4fc      	bmi.n	3400cad4 <LL_ATON_RT_RuntimeInit+0x18>
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3400cada:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3400cade:	615a      	str	r2, [r3, #20]
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
3400cae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400cae4:	625a      	str	r2, [r3, #36]	@ 0x24
    ATON_ENABLE(INTCTRL, 0);
3400cae6:	681a      	ldr	r2, [r3, #0]
3400cae8:	f042 0201 	orr.w	r2, r2, #1
3400caec:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400caee:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400caf2:	4b15      	ldr	r3, [pc, #84]	@ (3400cb48 <LL_ATON_RT_RuntimeInit+0x8c>)
3400caf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400caf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400cafc:	f3bf 8f6f 	isb	sy
3400cb00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400cb04:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400cb08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400cb0c:	f3bf 8f6f 	isb	sy
3400cb10:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
3400cb14:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400cb18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400cb1c:	f3bf 8f6f 	isb	sy
3400cb20:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
3400cb24:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400cb28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400cb2c:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400cb30:	605a      	str	r2, [r3, #4]
  if (ll_aton_init_deinit_trace)
3400cb32:	4b06      	ldr	r3, [pc, #24]	@ (3400cb4c <LL_ATON_RT_RuntimeInit+0x90>)
3400cb34:	681b      	ldr	r3, [r3, #0]
3400cb36:	b11b      	cbz	r3, 3400cb40 <LL_ATON_RT_RuntimeInit+0x84>
}
3400cb38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
3400cb3c:	2006      	movs	r0, #6
3400cb3e:	4718      	bx	r3
}
3400cb40:	bd10      	pop	{r4, pc}
3400cb42:	bf00      	nop
3400cb44:	580e1000 	.word	0x580e1000
3400cb48:	e000e100 	.word	0xe000e100
3400cb4c:	34012bd8 	.word	0x34012bd8

3400cb50 <LL_ATON_RT_RuntimeDeInit>:
{
3400cb50:	b508      	push	{r3, lr}
  if (ll_aton_init_deinit_trace)
3400cb52:	4b15      	ldr	r3, [pc, #84]	@ (3400cba8 <LL_ATON_RT_RuntimeDeInit+0x58>)
3400cb54:	681b      	ldr	r3, [r3, #0]
3400cb56:	b10b      	cbz	r3, 3400cb5c <LL_ATON_RT_RuntimeDeInit+0xc>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
3400cb58:	2007      	movs	r0, #7
3400cb5a:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400cb5c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400cb60:	4b12      	ldr	r3, [pc, #72]	@ (3400cbac <LL_ATON_RT_RuntimeDeInit+0x5c>)
3400cb62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400cb66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400cb6a:	f3bf 8f6f 	isb	sy
3400cb6e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
3400cb72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400cb76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400cb7a:	f3bf 8f6f 	isb	sy
3400cb7e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3400cb82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400cb86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400cb8a:	f3bf 8f6f 	isb	sy
3400cb8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400cb92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400cb96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400cb9a:	f3bf 8f6f 	isb	sy
}
3400cb9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DeInit();
3400cba2:	f7ff bd1f 	b.w	3400c5e4 <LL_ATON_DeInit>
3400cba6:	bf00      	nop
3400cba8:	34012bd8 	.word	0x34012bd8
3400cbac:	e000e100 	.word	0xe000e100

3400cbb0 <LL_ATON_RT_RunEpochBlock>:
{
3400cbb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400cbb2:	4604      	mov	r4, r0
3400cbb4:	b930      	cbnz	r0, 3400cbc4 <LL_ATON_RT_RunEpochBlock+0x14>
3400cbb6:	f44f 7110 	mov.w	r1, #576	@ 0x240
3400cbba:	4b8c      	ldr	r3, [pc, #560]	@ (3400cdec <LL_ATON_RT_RunEpochBlock+0x23c>)
3400cbbc:	4a8c      	ldr	r2, [pc, #560]	@ (3400cdf0 <LL_ATON_RT_RunEpochBlock+0x240>)
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
3400cbbe:	488d      	ldr	r0, [pc, #564]	@ (3400cdf4 <LL_ATON_RT_RunEpochBlock+0x244>)
3400cbc0:	f000 f9fc 	bl	3400cfbc <__assert_func>
3400cbc4:	6843      	ldr	r3, [r0, #4]
3400cbc6:	b923      	cbnz	r3, 3400cbd2 <LL_ATON_RT_RunEpochBlock+0x22>
3400cbc8:	f240 2143 	movw	r1, #579	@ 0x243
3400cbcc:	4b8a      	ldr	r3, [pc, #552]	@ (3400cdf8 <LL_ATON_RT_RunEpochBlock+0x248>)
3400cbce:	4a88      	ldr	r2, [pc, #544]	@ (3400cdf0 <LL_ATON_RT_RunEpochBlock+0x240>)
3400cbd0:	e7f5      	b.n	3400cbbe <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.inference_started == false)
3400cbd2:	7e03      	ldrb	r3, [r0, #24]
3400cbd4:	b98b      	cbnz	r3, 3400cbfa <LL_ATON_RT_RunEpochBlock+0x4a>
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
3400cbd6:	6803      	ldr	r3, [r0, #0]
3400cbd8:	b10b      	cbz	r3, 3400cbde <LL_ATON_RT_RunEpochBlock+0x2e>
3400cbda:	689b      	ldr	r3, [r3, #8]
3400cbdc:	b923      	cbnz	r3, 3400cbe8 <LL_ATON_RT_RunEpochBlock+0x38>
3400cbde:	f240 2155 	movw	r1, #597	@ 0x255
3400cbe2:	4b86      	ldr	r3, [pc, #536]	@ (3400cdfc <LL_ATON_RT_RunEpochBlock+0x24c>)
3400cbe4:	4a82      	ldr	r2, [pc, #520]	@ (3400cdf0 <LL_ATON_RT_RunEpochBlock+0x240>)
3400cbe6:	e7ea      	b.n	3400cbbe <LL_ATON_RT_RunEpochBlock+0xe>
    bool ret = nn_instance->network->ec_inference_init();
3400cbe8:	4798      	blx	r3
    LL_ATON_ASSERT(ret == true);
3400cbea:	b920      	cbnz	r0, 3400cbf6 <LL_ATON_RT_RunEpochBlock+0x46>
3400cbec:	f240 2159 	movw	r1, #601	@ 0x259
3400cbf0:	4b83      	ldr	r3, [pc, #524]	@ (3400ce00 <LL_ATON_RT_RunEpochBlock+0x250>)
3400cbf2:	4a7f      	ldr	r2, [pc, #508]	@ (3400cdf0 <LL_ATON_RT_RunEpochBlock+0x240>)
3400cbf4:	e7e3      	b.n	3400cbbe <LL_ATON_RT_RunEpochBlock+0xe>
    nn_instance->exec_state.inference_started = true;
3400cbf6:	2301      	movs	r3, #1
3400cbf8:	7623      	strb	r3, [r4, #24]
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
3400cbfa:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400cbfc:	8a03      	ldrh	r3, [r0, #16]
3400cbfe:	075a      	lsls	r2, r3, #29
3400cc00:	d512      	bpl.n	3400cc28 <LL_ATON_RT_RunEpochBlock+0x78>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400cc02:	f7ff fdcb 	bl	3400c79c <EpochBlock_EpochControllerUnit>
3400cc06:	2301      	movs	r3, #1
3400cc08:	fa03 f000 	lsl.w	r0, r3, r0
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
3400cc0c:	f894 3020 	ldrb.w	r3, [r4, #32]
3400cc10:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
3400cc14:	b343      	cbz	r3, 3400cc68 <LL_ATON_RT_RunEpochBlock+0xb8>
3400cc16:	2800      	cmp	r0, #0
3400cc18:	d036      	beq.n	3400cc88 <LL_ATON_RT_RunEpochBlock+0xd8>
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
3400cc1a:	69e3      	ldr	r3, [r4, #28]
3400cc1c:	ea30 0303 	bics.w	r3, r0, r3
3400cc20:	d004      	beq.n	3400cc2c <LL_ATON_RT_RunEpochBlock+0x7c>
        return LL_ATON_RT_WFE;
3400cc22:	2001      	movs	r0, #1
}
3400cc24:	b002      	add	sp, #8
3400cc26:	bd70      	pop	{r4, r5, r6, pc}
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400cc28:	68c0      	ldr	r0, [r0, #12]
3400cc2a:	e7ef      	b.n	3400cc0c <LL_ATON_RT_RunEpochBlock+0x5c>
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
3400cc2c:	4b75      	ldr	r3, [pc, #468]	@ (3400ce04 <LL_ATON_RT_RunEpochBlock+0x254>)
3400cc2e:	681b      	ldr	r3, [r3, #0]
3400cc30:	42a3      	cmp	r3, r4
3400cc32:	d004      	beq.n	3400cc3e <LL_ATON_RT_RunEpochBlock+0x8e>
3400cc34:	f240 2171 	movw	r1, #625	@ 0x271
3400cc38:	4b73      	ldr	r3, [pc, #460]	@ (3400ce08 <LL_ATON_RT_RunEpochBlock+0x258>)
3400cc3a:	4a6d      	ldr	r2, [pc, #436]	@ (3400cdf0 <LL_ATON_RT_RunEpochBlock+0x240>)
3400cc3c:	e7bf      	b.n	3400cbbe <LL_ATON_RT_RunEpochBlock+0xe>
3400cc3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400cc42:	4a72      	ldr	r2, [pc, #456]	@ (3400ce0c <LL_ATON_RT_RunEpochBlock+0x25c>)
3400cc44:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400cc48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400cc4c:	f3bf 8f6f 	isb	sy
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
3400cc50:	69e3      	ldr	r3, [r4, #28]
3400cc52:	ea23 0300 	bic.w	r3, r3, r0
3400cc56:	61e3      	str	r3, [r4, #28]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400cc58:	6051      	str	r1, [r2, #4]
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400cc5a:	6860      	ldr	r0, [r4, #4]
3400cc5c:	4621      	mov	r1, r4
3400cc5e:	f7ff fdb1 	bl	3400c7c4 <__LL_ATON_RT_ExecEndEpochBlock>
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400cc62:	4620      	mov	r0, r4
3400cc64:	f7ff fe18 	bl	3400c898 <__LL_ATON_RT_DetermineNextEpochBlock>
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
3400cc68:	6863      	ldr	r3, [r4, #4]
3400cc6a:	8a1b      	ldrh	r3, [r3, #16]
3400cc6c:	071b      	lsls	r3, r3, #28
3400cc6e:	d534      	bpl.n	3400ccda <LL_ATON_RT_RunEpochBlock+0x12a>
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
3400cc70:	6923      	ldr	r3, [r4, #16]
3400cc72:	2b00      	cmp	r3, #0
3400cc74:	f000 80b7 	beq.w	3400cde6 <LL_ATON_RT_RunEpochBlock+0x236>
      LL_ATON_ASSERT(nn_instance == NULL);

      nn_instance = __ll_current_aton_ip_owner;
    }

    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400cc78:	4b62      	ldr	r3, [pc, #392]	@ (3400ce04 <LL_ATON_RT_RunEpochBlock+0x254>)
3400cc7a:	681a      	ldr	r2, [r3, #0]
3400cc7c:	b932      	cbnz	r2, 3400cc8c <LL_ATON_RT_RunEpochBlock+0xdc>
3400cc7e:	2197      	movs	r1, #151	@ 0x97
3400cc80:	4b63      	ldr	r3, [pc, #396]	@ (3400ce10 <LL_ATON_RT_RunEpochBlock+0x260>)
3400cc82:	4a64      	ldr	r2, [pc, #400]	@ (3400ce14 <LL_ATON_RT_RunEpochBlock+0x264>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400cc84:	4864      	ldr	r0, [pc, #400]	@ (3400ce18 <LL_ATON_RT_RunEpochBlock+0x268>)
3400cc86:	e79b      	b.n	3400cbc0 <LL_ATON_RT_RunEpochBlock+0x10>
  bool this_run_executed_end_epoch = false;
3400cc88:	4606      	mov	r6, r0
3400cc8a:	e7ed      	b.n	3400cc68 <LL_ATON_RT_RunEpochBlock+0xb8>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
3400cc8c:	6862      	ldr	r2, [r4, #4]
3400cc8e:	8a12      	ldrh	r2, [r2, #16]
3400cc90:	0716      	lsls	r6, r2, #28
3400cc92:	d403      	bmi.n	3400cc9c <LL_ATON_RT_RunEpochBlock+0xec>
3400cc94:	2198      	movs	r1, #152	@ 0x98
3400cc96:	4b61      	ldr	r3, [pc, #388]	@ (3400ce1c <LL_ATON_RT_RunEpochBlock+0x26c>)
3400cc98:	4a5e      	ldr	r2, [pc, #376]	@ (3400ce14 <LL_ATON_RT_RunEpochBlock+0x264>)
3400cc9a:	e7f3      	b.n	3400cc84 <LL_ATON_RT_RunEpochBlock+0xd4>
                          : EpochBlock_IsEpochInternal(nn_instance->exec_state.current_epoch_block));
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
3400cc9c:	6922      	ldr	r2, [r4, #16]
3400cc9e:	8a12      	ldrh	r2, [r2, #16]
3400cca0:	0655      	lsls	r5, r2, #25
3400cca2:	d403      	bmi.n	3400ccac <LL_ATON_RT_RunEpochBlock+0xfc>
3400cca4:	219a      	movs	r1, #154	@ 0x9a
3400cca6:	4b5e      	ldr	r3, [pc, #376]	@ (3400ce20 <LL_ATON_RT_RunEpochBlock+0x270>)
3400cca8:	4a5a      	ldr	r2, [pc, #360]	@ (3400ce14 <LL_ATON_RT_RunEpochBlock+0x264>)
3400ccaa:	e7eb      	b.n	3400cc84 <LL_ATON_RT_RunEpochBlock+0xd4>

    /* Clear owner */
    if (unlock)
    {
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
3400ccac:	6818      	ldr	r0, [r3, #0]
3400ccae:	f7ff fd39 	bl	3400c724 <__ll_clear_aton_owner>
    }

    /* set old context */
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400ccb2:	68e3      	ldr	r3, [r4, #12]
3400ccb4:	b11b      	cbz	r3, 3400ccbe <LL_ATON_RT_RunEpochBlock+0x10e>
3400ccb6:	21a3      	movs	r1, #163	@ 0xa3
3400ccb8:	4b5a      	ldr	r3, [pc, #360]	@ (3400ce24 <LL_ATON_RT_RunEpochBlock+0x274>)
3400ccba:	4a56      	ldr	r2, [pc, #344]	@ (3400ce14 <LL_ATON_RT_RunEpochBlock+0x264>)
3400ccbc:	e7e2      	b.n	3400cc84 <LL_ATON_RT_RunEpochBlock+0xd4>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
3400ccbe:	6922      	ldr	r2, [r4, #16]
3400ccc0:	6062      	str	r2, [r4, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
3400ccc2:	6962      	ldr	r2, [r4, #20]
3400ccc4:	60a2      	str	r2, [r4, #8]

#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
3400ccc6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
3400ccc8:	6262      	str	r2, [r4, #36]	@ 0x24
#endif

    /* reset saved context */
    nn_instance->exec_state.saved_current_epoch_block = NULL;
3400ccca:	6123      	str	r3, [r4, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
3400cccc:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400ccce:	62a3      	str	r3, [r4, #40]	@ 0x28
        nn_instance->exec_state.current_epoch_block++;
3400ccd0:	6863      	ldr	r3, [r4, #4]
3400ccd2:	3314      	adds	r3, #20
3400ccd4:	6063      	str	r3, [r4, #4]
        return LL_ATON_RT_NO_WFE;
3400ccd6:	2000      	movs	r0, #0
3400ccd8:	e7a4      	b.n	3400cc24 <LL_ATON_RT_RunEpochBlock+0x74>
    if (this_run_executed_end_epoch)
3400ccda:	2e00      	cmp	r6, #0
3400ccdc:	d1fb      	bne.n	3400ccd6 <LL_ATON_RT_RunEpochBlock+0x126>
    if (!nn_instance->exec_state.current_epoch_block_started)
3400ccde:	f894 3020 	ldrb.w	r3, [r4, #32]
3400cce2:	2b00      	cmp	r3, #0
3400cce4:	d169      	bne.n	3400cdba <LL_ATON_RT_RunEpochBlock+0x20a>
      nn_instance->exec_state.current_epoch_block_started = true;
3400cce6:	2301      	movs	r3, #1
3400cce8:	f884 3020 	strb.w	r3, [r4, #32]
      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400ccec:	6865      	ldr	r5, [r4, #4]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400ccee:	68e3      	ldr	r3, [r4, #12]
3400ccf0:	b11b      	cbz	r3, 3400ccfa <LL_ATON_RT_RunEpochBlock+0x14a>
3400ccf2:	2161      	movs	r1, #97	@ 0x61
3400ccf4:	4b4b      	ldr	r3, [pc, #300]	@ (3400ce24 <LL_ATON_RT_RunEpochBlock+0x274>)
3400ccf6:	4a4c      	ldr	r2, [pc, #304]	@ (3400ce28 <LL_ATON_RT_RunEpochBlock+0x278>)
3400ccf8:	e761      	b.n	3400cbbe <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400ccfa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ccfc:	b11b      	cbz	r3, 3400cd06 <LL_ATON_RT_RunEpochBlock+0x156>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
3400ccfe:	462a      	mov	r2, r5
3400cd00:	4621      	mov	r1, r4
3400cd02:	4630      	mov	r0, r6
3400cd04:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
3400cd06:	8a2b      	ldrh	r3, [r5, #16]
  if (EpochBlock_IsEpochStart(eb))
3400cd08:	07d8      	lsls	r0, r3, #31
3400cd0a:	d505      	bpl.n	3400cd18 <LL_ATON_RT_RunEpochBlock+0x168>
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400cd0c:	69e2      	ldr	r2, [r4, #28]
3400cd0e:	b11a      	cbz	r2, 3400cd18 <LL_ATON_RT_RunEpochBlock+0x168>
3400cd10:	2156      	movs	r1, #86	@ 0x56
3400cd12:	4b46      	ldr	r3, [pc, #280]	@ (3400ce2c <LL_ATON_RT_RunEpochBlock+0x27c>)
3400cd14:	4a46      	ldr	r2, [pc, #280]	@ (3400ce30 <LL_ATON_RT_RunEpochBlock+0x280>)
3400cd16:	e7b5      	b.n	3400cc84 <LL_ATON_RT_RunEpochBlock+0xd4>
  if (EpochBlock_IsEpochPureHW(eb) ||
3400cd18:	f013 0f50 	tst.w	r3, #80	@ 0x50
3400cd1c:	d015      	beq.n	3400cd4a <LL_ATON_RT_RunEpochBlock+0x19a>
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
3400cd1e:	4a39      	ldr	r2, [pc, #228]	@ (3400ce04 <LL_ATON_RT_RunEpochBlock+0x254>)
3400cd20:	6811      	ldr	r1, [r2, #0]
3400cd22:	428c      	cmp	r4, r1
3400cd24:	d103      	bne.n	3400cd2e <LL_ATON_RT_RunEpochBlock+0x17e>
3400cd26:	2131      	movs	r1, #49	@ 0x31
3400cd28:	4b42      	ldr	r3, [pc, #264]	@ (3400ce34 <LL_ATON_RT_RunEpochBlock+0x284>)
3400cd2a:	4a43      	ldr	r2, [pc, #268]	@ (3400ce38 <LL_ATON_RT_RunEpochBlock+0x288>)
3400cd2c:	e7aa      	b.n	3400cc84 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
3400cd2e:	6811      	ldr	r1, [r2, #0]
3400cd30:	b119      	cbz	r1, 3400cd3a <LL_ATON_RT_RunEpochBlock+0x18a>
3400cd32:	2135      	movs	r1, #53	@ 0x35
3400cd34:	4b41      	ldr	r3, [pc, #260]	@ (3400ce3c <LL_ATON_RT_RunEpochBlock+0x28c>)
3400cd36:	4a40      	ldr	r2, [pc, #256]	@ (3400ce38 <LL_ATON_RT_RunEpochBlock+0x288>)
3400cd38:	e7a4      	b.n	3400cc84 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400cd3a:	4941      	ldr	r1, [pc, #260]	@ (3400ce40 <LL_ATON_RT_RunEpochBlock+0x290>)
3400cd3c:	6809      	ldr	r1, [r1, #0]
3400cd3e:	b119      	cbz	r1, 3400cd48 <LL_ATON_RT_RunEpochBlock+0x198>
3400cd40:	2139      	movs	r1, #57	@ 0x39
3400cd42:	4b40      	ldr	r3, [pc, #256]	@ (3400ce44 <LL_ATON_RT_RunEpochBlock+0x294>)
3400cd44:	4a3c      	ldr	r2, [pc, #240]	@ (3400ce38 <LL_ATON_RT_RunEpochBlock+0x288>)
3400cd46:	e79d      	b.n	3400cc84 <LL_ATON_RT_RunEpochBlock+0xd4>
    __ll_current_aton_ip_owner = new_owner;
3400cd48:	6014      	str	r4, [r2, #0]
  if (!EpochBlock_IsEpochBlob(eb))
3400cd4a:	0759      	lsls	r1, r3, #29
3400cd4c:	d41c      	bmi.n	3400cd88 <LL_ATON_RT_RunEpochBlock+0x1d8>
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
3400cd4e:	f013 0f90 	tst.w	r3, #144	@ 0x90
3400cd52:	d00a      	beq.n	3400cd6a <LL_ATON_RT_RunEpochBlock+0x1ba>
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
3400cd54:	4b2b      	ldr	r3, [pc, #172]	@ (3400ce04 <LL_ATON_RT_RunEpochBlock+0x254>)
3400cd56:	681b      	ldr	r3, [r3, #0]
3400cd58:	429c      	cmp	r4, r3
3400cd5a:	d003      	beq.n	3400cd64 <LL_ATON_RT_RunEpochBlock+0x1b4>
3400cd5c:	2178      	movs	r1, #120	@ 0x78
3400cd5e:	4b2a      	ldr	r3, [pc, #168]	@ (3400ce08 <LL_ATON_RT_RunEpochBlock+0x258>)
3400cd60:	4a31      	ldr	r2, [pc, #196]	@ (3400ce28 <LL_ATON_RT_RunEpochBlock+0x278>)
3400cd62:	e72c      	b.n	3400cbbe <LL_ATON_RT_RunEpochBlock+0xe>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
3400cd64:	68e8      	ldr	r0, [r5, #12]
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400cd66:	f7ff fcfd 	bl	3400c764 <__LL_ATON_RT_SetWaitMask>
  if (eb->start_epoch_block != NULL)
3400cd6a:	682b      	ldr	r3, [r5, #0]
3400cd6c:	b10b      	cbz	r3, 3400cd72 <LL_ATON_RT_RunEpochBlock+0x1c2>
    eb->start_epoch_block((const void *)eb);
3400cd6e:	4628      	mov	r0, r5
3400cd70:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400cd72:	8a2b      	ldrh	r3, [r5, #16]
3400cd74:	075a      	lsls	r2, r3, #29
3400cd76:	d51a      	bpl.n	3400cdae <LL_ATON_RT_RunEpochBlock+0x1fe>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400cd78:	4628      	mov	r0, r5
3400cd7a:	f7ff fd0f 	bl	3400c79c <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400cd7e:	b130      	cbz	r0, 3400cd8e <LL_ATON_RT_RunEpochBlock+0x1de>
3400cd80:	21a4      	movs	r1, #164	@ 0xa4
3400cd82:	4b31      	ldr	r3, [pc, #196]	@ (3400ce48 <LL_ATON_RT_RunEpochBlock+0x298>)
3400cd84:	4a28      	ldr	r2, [pc, #160]	@ (3400ce28 <LL_ATON_RT_RunEpochBlock+0x278>)
3400cd86:	e71a      	b.n	3400cbbe <LL_ATON_RT_RunEpochBlock+0xe>
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400cd88:	f240 30ff 	movw	r0, #1023	@ 0x3ff
3400cd8c:	e7eb      	b.n	3400cd66 <LL_ATON_RT_RunEpochBlock+0x1b6>
    conf.stepmode = 0;
3400cd8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400cd92:	68ab      	ldr	r3, [r5, #8]
    conf.stepmode = 0;
3400cd94:	f360 0200 	bfi	r2, r0, #0, #1
    LL_EpochCtrl_Init(ecId, &conf);
3400cd98:	4669      	mov	r1, sp
    conf.stepmode = 0;
3400cd9a:	f88d 2004 	strb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400cd9e:	9300      	str	r3, [sp, #0]
    LL_EpochCtrl_Init(ecId, &conf);
3400cda0:	f7ff fc42 	bl	3400c628 <LL_EpochCtrl_Init>
    ATON_ENABLE(EPOCHCTRL, ecId);
3400cda4:	4a29      	ldr	r2, [pc, #164]	@ (3400ce4c <LL_ATON_RT_RunEpochBlock+0x29c>)
3400cda6:	6813      	ldr	r3, [r2, #0]
3400cda8:	f043 0301 	orr.w	r3, r3, #1
3400cdac:	6013      	str	r3, [r2, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400cdae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400cdb0:	b11b      	cbz	r3, 3400cdba <LL_ATON_RT_RunEpochBlock+0x20a>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
3400cdb2:	462a      	mov	r2, r5
3400cdb4:	4621      	mov	r1, r4
3400cdb6:	2001      	movs	r0, #1
3400cdb8:	4798      	blx	r3
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400cdba:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400cdbc:	8a03      	ldrh	r3, [r0, #16]
3400cdbe:	075b      	lsls	r3, r3, #29
3400cdc0:	d50f      	bpl.n	3400cde2 <LL_ATON_RT_RunEpochBlock+0x232>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400cdc2:	f7ff fceb 	bl	3400c79c <EpochBlock_EpochControllerUnit>
3400cdc6:	2301      	movs	r3, #1
3400cdc8:	fa03 f000 	lsl.w	r0, r3, r0
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400cdcc:	2800      	cmp	r0, #0
3400cdce:	f47f af28 	bne.w	3400cc22 <LL_ATON_RT_RunEpochBlock+0x72>
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400cdd2:	6860      	ldr	r0, [r4, #4]
3400cdd4:	4621      	mov	r1, r4
3400cdd6:	f7ff fcf5 	bl	3400c7c4 <__LL_ATON_RT_ExecEndEpochBlock>
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400cdda:	4620      	mov	r0, r4
3400cddc:	f7ff fd5c 	bl	3400c898 <__LL_ATON_RT_DetermineNextEpochBlock>
      return LL_ATON_RT_NO_WFE;
3400cde0:	e779      	b.n	3400ccd6 <LL_ATON_RT_RunEpochBlock+0x126>
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400cde2:	68c0      	ldr	r0, [r0, #12]
3400cde4:	e7f2      	b.n	3400cdcc <LL_ATON_RT_RunEpochBlock+0x21c>
        return LL_ATON_RT_DONE;
3400cde6:	2002      	movs	r0, #2
3400cde8:	e71c      	b.n	3400cc24 <LL_ATON_RT_RunEpochBlock+0x74>
3400cdea:	bf00      	nop
3400cdec:	340110ba 	.word	0x340110ba
3400cdf0:	340116fa 	.word	0x340116fa
3400cdf4:	34010f8f 	.word	0x34010f8f
3400cdf8:	34011342 	.word	0x34011342
3400cdfc:	3401137d 	.word	0x3401137d
3400ce00:	34011339 	.word	0x34011339
3400ce04:	34012be0 	.word	0x34012be0
3400ce08:	340113df 	.word	0x340113df
3400ce0c:	e000e100 	.word	0xe000e100
3400ce10:	34010ea9 	.word	0x34010ea9
3400ce14:	340116d3 	.word	0x340116d3
3400ce18:	34010dfa 	.word	0x34010dfa
3400ce1c:	34011409 	.word	0x34011409
3400ce20:	340114a5 	.word	0x340114a5
3400ce24:	340114f1 	.word	0x340114f1
3400ce28:	340116b2 	.word	0x340116b2
3400ce2c:	340110d5 	.word	0x340110d5
3400ce30:	34011693 	.word	0x34011693
3400ce34:	34011529 	.word	0x34011529
3400ce38:	3401167f 	.word	0x3401167f
3400ce3c:	34011551 	.word	0x34011551
3400ce40:	34012bdc 	.word	0x34012bdc
3400ce44:	34010e8d 	.word	0x34010e8d
3400ce48:	34010f86 	.word	0x34010f86
3400ce4c:	580fe000 	.word	0x580fe000

3400ce50 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
3400ce50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400ce52:	4b38      	ldr	r3, [pc, #224]	@ (3400cf34 <NPU0_IRQHandler+0xe4>)
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
3400ce54:	4c38      	ldr	r4, [pc, #224]	@ (3400cf38 <NPU0_IRQHandler+0xe8>)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400ce56:	689d      	ldr	r5, [r3, #8]
  if (__ll_current_aton_ip_owner != NULL)
3400ce58:	6823      	ldr	r3, [r4, #0]
3400ce5a:	b343      	cbz	r3, 3400ceae <NPU0_IRQHandler+0x5e>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3400ce5c:	6823      	ldr	r3, [r4, #0]
3400ce5e:	685b      	ldr	r3, [r3, #4]
3400ce60:	b933      	cbnz	r3, 3400ce70 <NPU0_IRQHandler+0x20>
3400ce62:	f240 31b1 	movw	r1, #945	@ 0x3b1
3400ce66:	4b35      	ldr	r3, [pc, #212]	@ (3400cf3c <NPU0_IRQHandler+0xec>)
3400ce68:	4a35      	ldr	r2, [pc, #212]	@ (3400cf40 <NPU0_IRQHandler+0xf0>)
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400ce6a:	4836      	ldr	r0, [pc, #216]	@ (3400cf44 <NPU0_IRQHandler+0xf4>)
3400ce6c:	f000 f8a6 	bl	3400cfbc <__assert_func>
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400ce70:	6823      	ldr	r3, [r4, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
3400ce72:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400ce74:	8a1b      	ldrh	r3, [r3, #16]
3400ce76:	075b      	lsls	r3, r3, #29
3400ce78:	d40c      	bmi.n	3400ce94 <NPU0_IRQHandler+0x44>
      __LL_ATON_RT_IrqErr(
3400ce7a:	f425 707f 	bic.w	r0, r5, #1020	@ 0x3fc
3400ce7e:	f020 0003 	bic.w	r0, r0, #3
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400ce82:	f7ff fd4d 	bl	3400c920 <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400ce86:	6823      	ldr	r3, [r4, #0]
3400ce88:	b99b      	cbnz	r3, 3400ceb2 <NPU0_IRQHandler+0x62>
3400ce8a:	f240 31d2 	movw	r1, #978	@ 0x3d2
3400ce8e:	4b2e      	ldr	r3, [pc, #184]	@ (3400cf48 <NPU0_IRQHandler+0xf8>)
3400ce90:	4a2b      	ldr	r2, [pc, #172]	@ (3400cf40 <NPU0_IRQHandler+0xf0>)
3400ce92:	e7ea      	b.n	3400ce6a <NPU0_IRQHandler+0x1a>
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400ce94:	6823      	ldr	r3, [r4, #0]
3400ce96:	6858      	ldr	r0, [r3, #4]
3400ce98:	f7ff fc80 	bl	3400c79c <EpochBlock_EpochControllerUnit>
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400ce9c:	b120      	cbz	r0, 3400cea8 <NPU0_IRQHandler+0x58>
3400ce9e:	f240 31be 	movw	r1, #958	@ 0x3be
3400cea2:	4b2a      	ldr	r3, [pc, #168]	@ (3400cf4c <NPU0_IRQHandler+0xfc>)
3400cea4:	4a26      	ldr	r2, [pc, #152]	@ (3400cf40 <NPU0_IRQHandler+0xf0>)
3400cea6:	e7e0      	b.n	3400ce6a <NPU0_IRQHandler+0x1a>
      __LL_ATON_RT_IrqErr(
3400cea8:	f025 5080 	bic.w	r0, r5, #268435456	@ 0x10000000
3400ceac:	e7e9      	b.n	3400ce82 <NPU0_IRQHandler+0x32>
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400ceae:	4628      	mov	r0, r5
3400ceb0:	e7e7      	b.n	3400ce82 <NPU0_IRQHandler+0x32>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3400ceb2:	6823      	ldr	r3, [r4, #0]
3400ceb4:	685b      	ldr	r3, [r3, #4]
3400ceb6:	8a1b      	ldrh	r3, [r3, #16]
3400ceb8:	f013 0304 	ands.w	r3, r3, #4
3400cebc:	d123      	bne.n	3400cf06 <NPU0_IRQHandler+0xb6>
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3400cebe:	6822      	ldr	r2, [r4, #0]
3400cec0:	6852      	ldr	r2, [r2, #4]
  wait_irqs =
3400cec2:	68d2      	ldr	r2, [r2, #12]
  if (wait_irqs)
3400cec4:	402a      	ands	r2, r5
3400cec6:	d017      	beq.n	3400cef8 <NPU0_IRQHandler+0xa8>
        _tmp_triggered_events |= (1 << i);
3400cec8:	f04f 0c01 	mov.w	ip, #1
3400cecc:	200a      	movs	r0, #10
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400cece:	6821      	ldr	r1, [r4, #0]
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400ced0:	4e1f      	ldr	r6, [pc, #124]	@ (3400cf50 <NPU0_IRQHandler+0x100>)
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400ced2:	69c9      	ldr	r1, [r1, #28]
      if ((wait_irqs >> i) & 1)
3400ced4:	fa22 f703 	lsr.w	r7, r2, r3
3400ced8:	07ff      	lsls	r7, r7, #31
3400ceda:	d507      	bpl.n	3400ceec <NPU0_IRQHandler+0x9c>
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400cedc:	031f      	lsls	r7, r3, #12
3400cede:	f857 e006 	ldr.w	lr, [r7, r6]
        ATON_STRENG_IRQ_SET(
3400cee2:	f847 e006 	str.w	lr, [r7, r6]
        _tmp_triggered_events |= (1 << i);
3400cee6:	fa0c f703 	lsl.w	r7, ip, r3
3400ceea:	4339      	orrs	r1, r7
    for (i = 0; i < ATON_STRENG_NUM; i++)
3400ceec:	3801      	subs	r0, #1
3400ceee:	f103 0301 	add.w	r3, r3, #1
3400cef2:	d1ef      	bne.n	3400ced4 <NPU0_IRQHandler+0x84>
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400cef4:	6823      	ldr	r3, [r4, #0]
3400cef6:	61d9      	str	r1, [r3, #28]
  __ASM volatile ("dsb 0xF":::"memory");
3400cef8:	f3bf 8f4f 	dsb	sy
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
3400cefc:	4b0d      	ldr	r3, [pc, #52]	@ (3400cf34 <NPU0_IRQHandler+0xe4>)
3400cefe:	611d      	str	r5, [r3, #16]
3400cf00:	f3bf 8f4f 	dsb	sy
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
}
3400cf04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400cf06:	6823      	ldr	r3, [r4, #0]
3400cf08:	6858      	ldr	r0, [r3, #4]
3400cf0a:	f7ff fc47 	bl	3400c79c <EpochBlock_EpochControllerUnit>
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400cf0e:	b120      	cbz	r0, 3400cf1a <NPU0_IRQHandler+0xca>
3400cf10:	f240 3191 	movw	r1, #913	@ 0x391
3400cf14:	4b0d      	ldr	r3, [pc, #52]	@ (3400cf4c <NPU0_IRQHandler+0xfc>)
3400cf16:	4a0f      	ldr	r2, [pc, #60]	@ (3400cf54 <NPU0_IRQHandler+0x104>)
3400cf18:	e7a7      	b.n	3400ce6a <NPU0_IRQHandler+0x1a>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
3400cf1a:	00eb      	lsls	r3, r5, #3
3400cf1c:	d5ec      	bpl.n	3400cef8 <NPU0_IRQHandler+0xa8>
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
3400cf1e:	4b0e      	ldr	r3, [pc, #56]	@ (3400cf58 <NPU0_IRQHandler+0x108>)
3400cf20:	68da      	ldr	r2, [r3, #12]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
3400cf22:	60da      	str	r2, [r3, #12]
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400cf24:	6823      	ldr	r3, [r4, #0]
3400cf26:	69db      	ldr	r3, [r3, #28]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400cf28:	6822      	ldr	r2, [r4, #0]
    _tmp_triggered_events |= (1 << ecId);
3400cf2a:	f043 0301 	orr.w	r3, r3, #1
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400cf2e:	61d3      	str	r3, [r2, #28]
3400cf30:	e7e2      	b.n	3400cef8 <NPU0_IRQHandler+0xa8>
3400cf32:	bf00      	nop
3400cf34:	580e1000 	.word	0x580e1000
3400cf38:	34012be0 	.word	0x34012be0
3400cf3c:	3401157b 	.word	0x3401157b
3400cf40:	340115f3 	.word	0x340115f3
3400cf44:	34010f8f 	.word	0x34010f8f
3400cf48:	34010ea9 	.word	0x34010ea9
3400cf4c:	34010f86 	.word	0x34010f86
3400cf50:	580e503c 	.word	0x580e503c
3400cf54:	340115c5 	.word	0x340115c5
3400cf58:	580fe000 	.word	0x580fe000

3400cf5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3400cf5c:	480f      	ldr	r0, [pc, #60]	@ (3400cf9c <LoopForever+0x4>)
  msr   MSPLIM, r0
3400cf5e:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3400cf62:	480f      	ldr	r0, [pc, #60]	@ (3400cfa0 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3400cf64:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3400cf66:	f7f4 ffc3 	bl	34001ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3400cf6a:	480e      	ldr	r0, [pc, #56]	@ (3400cfa4 <LoopForever+0xc>)
  ldr r1, =_edata
3400cf6c:	490e      	ldr	r1, [pc, #56]	@ (3400cfa8 <LoopForever+0x10>)
  ldr r2, =_sidata
3400cf6e:	4a0f      	ldr	r2, [pc, #60]	@ (3400cfac <LoopForever+0x14>)
  movs r3, #0
3400cf70:	2300      	movs	r3, #0
  b LoopCopyDataInit
3400cf72:	e002      	b.n	3400cf7a <LoopCopyDataInit>

3400cf74 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3400cf74:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3400cf76:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3400cf78:	3304      	adds	r3, #4

3400cf7a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3400cf7a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3400cf7c:	428c      	cmp	r4, r1
  bcc CopyDataInit
3400cf7e:	d3f9      	bcc.n	3400cf74 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3400cf80:	4a0b      	ldr	r2, [pc, #44]	@ (3400cfb0 <LoopForever+0x18>)
  ldr r4, =_ebss
3400cf82:	4c0c      	ldr	r4, [pc, #48]	@ (3400cfb4 <LoopForever+0x1c>)
  movs r3, #0
3400cf84:	2300      	movs	r3, #0
  b LoopFillZerobss
3400cf86:	e001      	b.n	3400cf8c <LoopFillZerobss>

3400cf88 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3400cf88:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3400cf8a:	3204      	adds	r2, #4

3400cf8c <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3400cf8c:	42a2      	cmp	r2, r4
  bcc FillZerobss
3400cf8e:	d3fb      	bcc.n	3400cf88 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3400cf90:	f001 f998 	bl	3400e2c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3400cf94:	f7f3 fe68 	bl	34000c68 <main>

3400cf98 <LoopForever>:

LoopForever:
  b LoopForever
3400cf98:	e7fe      	b.n	3400cf98 <LoopForever>
3400cf9a:	0000      	.short	0x0000
  ldr   r0, =_sstack
3400cf9c:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
3400cfa0:	34100000 	.word	0x34100000
  ldr r0, =_sdata
3400cfa4:	34012154 	.word	0x34012154
  ldr r1, =_edata
3400cfa8:	34012370 	.word	0x34012370
  ldr r2, =_sidata
3400cfac:	34012154 	.word	0x34012154
  ldr r2, =_sbss
3400cfb0:	34012370 	.word	0x34012370
  ldr r4, =_ebss
3400cfb4:	34012d34 	.word	0x34012d34

3400cfb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3400cfb8:	e7fe      	b.n	3400cfb8 <ADC1_2_IRQHandler>
	...

3400cfbc <__assert_func>:
3400cfbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400cfbe:	4614      	mov	r4, r2
3400cfc0:	461a      	mov	r2, r3
3400cfc2:	4b09      	ldr	r3, [pc, #36]	@ (3400cfe8 <__assert_func+0x2c>)
3400cfc4:	4605      	mov	r5, r0
3400cfc6:	681b      	ldr	r3, [r3, #0]
3400cfc8:	68d8      	ldr	r0, [r3, #12]
3400cfca:	b954      	cbnz	r4, 3400cfe2 <__assert_func+0x26>
3400cfcc:	4b07      	ldr	r3, [pc, #28]	@ (3400cfec <__assert_func+0x30>)
3400cfce:	461c      	mov	r4, r3
3400cfd0:	9100      	str	r1, [sp, #0]
3400cfd2:	4907      	ldr	r1, [pc, #28]	@ (3400cff0 <__assert_func+0x34>)
3400cfd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400cfd8:	462b      	mov	r3, r5
3400cfda:	f000 fda1 	bl	3400db20 <fiprintf>
3400cfde:	f001 f9b3 	bl	3400e348 <abort>
3400cfe2:	4b04      	ldr	r3, [pc, #16]	@ (3400cff4 <__assert_func+0x38>)
3400cfe4:	e7f4      	b.n	3400cfd0 <__assert_func+0x14>
3400cfe6:	bf00      	nop
3400cfe8:	340121b4 	.word	0x340121b4
3400cfec:	34010c7d 	.word	0x34010c7d
3400cff0:	3401174e 	.word	0x3401174e
3400cff4:	34011741 	.word	0x34011741

3400cff8 <malloc>:
3400cff8:	4b02      	ldr	r3, [pc, #8]	@ (3400d004 <malloc+0xc>)
3400cffa:	4601      	mov	r1, r0
3400cffc:	6818      	ldr	r0, [r3, #0]
3400cffe:	f000 b825 	b.w	3400d04c <_malloc_r>
3400d002:	bf00      	nop
3400d004:	340121b4 	.word	0x340121b4

3400d008 <sbrk_aligned>:
3400d008:	b570      	push	{r4, r5, r6, lr}
3400d00a:	4e0f      	ldr	r6, [pc, #60]	@ (3400d048 <sbrk_aligned+0x40>)
3400d00c:	460c      	mov	r4, r1
3400d00e:	4605      	mov	r5, r0
3400d010:	6831      	ldr	r1, [r6, #0]
3400d012:	b911      	cbnz	r1, 3400d01a <sbrk_aligned+0x12>
3400d014:	f001 f92e 	bl	3400e274 <_sbrk_r>
3400d018:	6030      	str	r0, [r6, #0]
3400d01a:	4621      	mov	r1, r4
3400d01c:	4628      	mov	r0, r5
3400d01e:	f001 f929 	bl	3400e274 <_sbrk_r>
3400d022:	1c43      	adds	r3, r0, #1
3400d024:	d103      	bne.n	3400d02e <sbrk_aligned+0x26>
3400d026:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3400d02a:	4620      	mov	r0, r4
3400d02c:	bd70      	pop	{r4, r5, r6, pc}
3400d02e:	1cc4      	adds	r4, r0, #3
3400d030:	f024 0403 	bic.w	r4, r4, #3
3400d034:	42a0      	cmp	r0, r4
3400d036:	d0f8      	beq.n	3400d02a <sbrk_aligned+0x22>
3400d038:	1a21      	subs	r1, r4, r0
3400d03a:	4628      	mov	r0, r5
3400d03c:	f001 f91a 	bl	3400e274 <_sbrk_r>
3400d040:	3001      	adds	r0, #1
3400d042:	d1f2      	bne.n	3400d02a <sbrk_aligned+0x22>
3400d044:	e7ef      	b.n	3400d026 <sbrk_aligned+0x1e>
3400d046:	bf00      	nop
3400d048:	34012be4 	.word	0x34012be4

3400d04c <_malloc_r>:
3400d04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400d050:	1ccd      	adds	r5, r1, #3
3400d052:	4606      	mov	r6, r0
3400d054:	f025 0503 	bic.w	r5, r5, #3
3400d058:	3508      	adds	r5, #8
3400d05a:	2d0c      	cmp	r5, #12
3400d05c:	bf38      	it	cc
3400d05e:	250c      	movcc	r5, #12
3400d060:	2d00      	cmp	r5, #0
3400d062:	db01      	blt.n	3400d068 <_malloc_r+0x1c>
3400d064:	42a9      	cmp	r1, r5
3400d066:	d904      	bls.n	3400d072 <_malloc_r+0x26>
3400d068:	230c      	movs	r3, #12
3400d06a:	6033      	str	r3, [r6, #0]
3400d06c:	2000      	movs	r0, #0
3400d06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400d072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3400d148 <_malloc_r+0xfc>
3400d076:	f000 f869 	bl	3400d14c <__malloc_lock>
3400d07a:	f8d8 3000 	ldr.w	r3, [r8]
3400d07e:	461c      	mov	r4, r3
3400d080:	bb44      	cbnz	r4, 3400d0d4 <_malloc_r+0x88>
3400d082:	4629      	mov	r1, r5
3400d084:	4630      	mov	r0, r6
3400d086:	f7ff ffbf 	bl	3400d008 <sbrk_aligned>
3400d08a:	1c43      	adds	r3, r0, #1
3400d08c:	4604      	mov	r4, r0
3400d08e:	d158      	bne.n	3400d142 <_malloc_r+0xf6>
3400d090:	f8d8 4000 	ldr.w	r4, [r8]
3400d094:	4627      	mov	r7, r4
3400d096:	2f00      	cmp	r7, #0
3400d098:	d143      	bne.n	3400d122 <_malloc_r+0xd6>
3400d09a:	2c00      	cmp	r4, #0
3400d09c:	d04b      	beq.n	3400d136 <_malloc_r+0xea>
3400d09e:	6823      	ldr	r3, [r4, #0]
3400d0a0:	4639      	mov	r1, r7
3400d0a2:	4630      	mov	r0, r6
3400d0a4:	eb04 0903 	add.w	r9, r4, r3
3400d0a8:	f001 f8e4 	bl	3400e274 <_sbrk_r>
3400d0ac:	4581      	cmp	r9, r0
3400d0ae:	d142      	bne.n	3400d136 <_malloc_r+0xea>
3400d0b0:	6821      	ldr	r1, [r4, #0]
3400d0b2:	4630      	mov	r0, r6
3400d0b4:	1a6d      	subs	r5, r5, r1
3400d0b6:	4629      	mov	r1, r5
3400d0b8:	f7ff ffa6 	bl	3400d008 <sbrk_aligned>
3400d0bc:	3001      	adds	r0, #1
3400d0be:	d03a      	beq.n	3400d136 <_malloc_r+0xea>
3400d0c0:	6823      	ldr	r3, [r4, #0]
3400d0c2:	442b      	add	r3, r5
3400d0c4:	6023      	str	r3, [r4, #0]
3400d0c6:	f8d8 3000 	ldr.w	r3, [r8]
3400d0ca:	685a      	ldr	r2, [r3, #4]
3400d0cc:	bb62      	cbnz	r2, 3400d128 <_malloc_r+0xdc>
3400d0ce:	f8c8 7000 	str.w	r7, [r8]
3400d0d2:	e00f      	b.n	3400d0f4 <_malloc_r+0xa8>
3400d0d4:	6822      	ldr	r2, [r4, #0]
3400d0d6:	1b52      	subs	r2, r2, r5
3400d0d8:	d420      	bmi.n	3400d11c <_malloc_r+0xd0>
3400d0da:	2a0b      	cmp	r2, #11
3400d0dc:	d917      	bls.n	3400d10e <_malloc_r+0xc2>
3400d0de:	1961      	adds	r1, r4, r5
3400d0e0:	42a3      	cmp	r3, r4
3400d0e2:	6025      	str	r5, [r4, #0]
3400d0e4:	bf18      	it	ne
3400d0e6:	6059      	strne	r1, [r3, #4]
3400d0e8:	6863      	ldr	r3, [r4, #4]
3400d0ea:	bf08      	it	eq
3400d0ec:	f8c8 1000 	streq.w	r1, [r8]
3400d0f0:	5162      	str	r2, [r4, r5]
3400d0f2:	604b      	str	r3, [r1, #4]
3400d0f4:	4630      	mov	r0, r6
3400d0f6:	f000 f82f 	bl	3400d158 <__malloc_unlock>
3400d0fa:	f104 000b 	add.w	r0, r4, #11
3400d0fe:	1d23      	adds	r3, r4, #4
3400d100:	f020 0007 	bic.w	r0, r0, #7
3400d104:	1ac2      	subs	r2, r0, r3
3400d106:	bf1c      	itt	ne
3400d108:	1a1b      	subne	r3, r3, r0
3400d10a:	50a3      	strne	r3, [r4, r2]
3400d10c:	e7af      	b.n	3400d06e <_malloc_r+0x22>
3400d10e:	6862      	ldr	r2, [r4, #4]
3400d110:	42a3      	cmp	r3, r4
3400d112:	bf0c      	ite	eq
3400d114:	f8c8 2000 	streq.w	r2, [r8]
3400d118:	605a      	strne	r2, [r3, #4]
3400d11a:	e7eb      	b.n	3400d0f4 <_malloc_r+0xa8>
3400d11c:	4623      	mov	r3, r4
3400d11e:	6864      	ldr	r4, [r4, #4]
3400d120:	e7ae      	b.n	3400d080 <_malloc_r+0x34>
3400d122:	463c      	mov	r4, r7
3400d124:	687f      	ldr	r7, [r7, #4]
3400d126:	e7b6      	b.n	3400d096 <_malloc_r+0x4a>
3400d128:	461a      	mov	r2, r3
3400d12a:	685b      	ldr	r3, [r3, #4]
3400d12c:	42a3      	cmp	r3, r4
3400d12e:	d1fb      	bne.n	3400d128 <_malloc_r+0xdc>
3400d130:	2300      	movs	r3, #0
3400d132:	6053      	str	r3, [r2, #4]
3400d134:	e7de      	b.n	3400d0f4 <_malloc_r+0xa8>
3400d136:	230c      	movs	r3, #12
3400d138:	4630      	mov	r0, r6
3400d13a:	6033      	str	r3, [r6, #0]
3400d13c:	f000 f80c 	bl	3400d158 <__malloc_unlock>
3400d140:	e794      	b.n	3400d06c <_malloc_r+0x20>
3400d142:	6005      	str	r5, [r0, #0]
3400d144:	e7d6      	b.n	3400d0f4 <_malloc_r+0xa8>
3400d146:	bf00      	nop
3400d148:	34012be8 	.word	0x34012be8

3400d14c <__malloc_lock>:
3400d14c:	4801      	ldr	r0, [pc, #4]	@ (3400d154 <__malloc_lock+0x8>)
3400d14e:	f001 b8de 	b.w	3400e30e <__retarget_lock_acquire_recursive>
3400d152:	bf00      	nop
3400d154:	34012d2c 	.word	0x34012d2c

3400d158 <__malloc_unlock>:
3400d158:	4801      	ldr	r0, [pc, #4]	@ (3400d160 <__malloc_unlock+0x8>)
3400d15a:	f001 b8d9 	b.w	3400e310 <__retarget_lock_release_recursive>
3400d15e:	bf00      	nop
3400d160:	34012d2c 	.word	0x34012d2c

3400d164 <__cvt>:
3400d164:	b5f0      	push	{r4, r5, r6, r7, lr}
3400d166:	ed2d 8b02 	vpush	{d8}
3400d16a:	eeb0 8b40 	vmov.f64	d8, d0
3400d16e:	b085      	sub	sp, #20
3400d170:	4617      	mov	r7, r2
3400d172:	460c      	mov	r4, r1
3400d174:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3400d176:	ee18 2a90 	vmov	r2, s17
3400d17a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400d17c:	f025 0520 	bic.w	r5, r5, #32
3400d180:	2a00      	cmp	r2, #0
3400d182:	bfb6      	itet	lt
3400d184:	222d      	movlt	r2, #45	@ 0x2d
3400d186:	2200      	movge	r2, #0
3400d188:	eeb1 8b40 	vneglt.f64	d8, d0
3400d18c:	2d46      	cmp	r5, #70	@ 0x46
3400d18e:	701a      	strb	r2, [r3, #0]
3400d190:	d004      	beq.n	3400d19c <__cvt+0x38>
3400d192:	2d45      	cmp	r5, #69	@ 0x45
3400d194:	d100      	bne.n	3400d198 <__cvt+0x34>
3400d196:	3401      	adds	r4, #1
3400d198:	2102      	movs	r1, #2
3400d19a:	e000      	b.n	3400d19e <__cvt+0x3a>
3400d19c:	2103      	movs	r1, #3
3400d19e:	ab03      	add	r3, sp, #12
3400d1a0:	eeb0 0b48 	vmov.f64	d0, d8
3400d1a4:	4622      	mov	r2, r4
3400d1a6:	9301      	str	r3, [sp, #4]
3400d1a8:	ab02      	add	r3, sp, #8
3400d1aa:	9300      	str	r3, [sp, #0]
3400d1ac:	4633      	mov	r3, r6
3400d1ae:	f001 f95f 	bl	3400e470 <_dtoa_r>
3400d1b2:	2d47      	cmp	r5, #71	@ 0x47
3400d1b4:	d114      	bne.n	3400d1e0 <__cvt+0x7c>
3400d1b6:	07fb      	lsls	r3, r7, #31
3400d1b8:	d50a      	bpl.n	3400d1d0 <__cvt+0x6c>
3400d1ba:	1902      	adds	r2, r0, r4
3400d1bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400d1c0:	2130      	movs	r1, #48	@ 0x30
3400d1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d1c6:	bf08      	it	eq
3400d1c8:	9203      	streq	r2, [sp, #12]
3400d1ca:	9b03      	ldr	r3, [sp, #12]
3400d1cc:	4293      	cmp	r3, r2
3400d1ce:	d319      	bcc.n	3400d204 <__cvt+0xa0>
3400d1d0:	9b03      	ldr	r3, [sp, #12]
3400d1d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400d1d4:	1a1b      	subs	r3, r3, r0
3400d1d6:	6013      	str	r3, [r2, #0]
3400d1d8:	b005      	add	sp, #20
3400d1da:	ecbd 8b02 	vpop	{d8}
3400d1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400d1e0:	2d46      	cmp	r5, #70	@ 0x46
3400d1e2:	eb00 0204 	add.w	r2, r0, r4
3400d1e6:	d1e9      	bne.n	3400d1bc <__cvt+0x58>
3400d1e8:	7803      	ldrb	r3, [r0, #0]
3400d1ea:	2b30      	cmp	r3, #48	@ 0x30
3400d1ec:	d107      	bne.n	3400d1fe <__cvt+0x9a>
3400d1ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400d1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d1f6:	bf1c      	itt	ne
3400d1f8:	f1c4 0401 	rsbne	r4, r4, #1
3400d1fc:	6034      	strne	r4, [r6, #0]
3400d1fe:	6833      	ldr	r3, [r6, #0]
3400d200:	441a      	add	r2, r3
3400d202:	e7db      	b.n	3400d1bc <__cvt+0x58>
3400d204:	1c5c      	adds	r4, r3, #1
3400d206:	9403      	str	r4, [sp, #12]
3400d208:	7019      	strb	r1, [r3, #0]
3400d20a:	e7de      	b.n	3400d1ca <__cvt+0x66>

3400d20c <__exponent>:
3400d20c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400d20e:	2900      	cmp	r1, #0
3400d210:	7002      	strb	r2, [r0, #0]
3400d212:	bfba      	itte	lt
3400d214:	4249      	neglt	r1, r1
3400d216:	232d      	movlt	r3, #45	@ 0x2d
3400d218:	232b      	movge	r3, #43	@ 0x2b
3400d21a:	2909      	cmp	r1, #9
3400d21c:	7043      	strb	r3, [r0, #1]
3400d21e:	dd28      	ble.n	3400d272 <__exponent+0x66>
3400d220:	f10d 0307 	add.w	r3, sp, #7
3400d224:	270a      	movs	r7, #10
3400d226:	461d      	mov	r5, r3
3400d228:	461a      	mov	r2, r3
3400d22a:	3b01      	subs	r3, #1
3400d22c:	fbb1 f6f7 	udiv	r6, r1, r7
3400d230:	fb07 1416 	mls	r4, r7, r6, r1
3400d234:	3430      	adds	r4, #48	@ 0x30
3400d236:	f802 4c01 	strb.w	r4, [r2, #-1]
3400d23a:	460c      	mov	r4, r1
3400d23c:	4631      	mov	r1, r6
3400d23e:	2c63      	cmp	r4, #99	@ 0x63
3400d240:	dcf2      	bgt.n	3400d228 <__exponent+0x1c>
3400d242:	3130      	adds	r1, #48	@ 0x30
3400d244:	1e94      	subs	r4, r2, #2
3400d246:	f803 1c01 	strb.w	r1, [r3, #-1]
3400d24a:	1c41      	adds	r1, r0, #1
3400d24c:	4623      	mov	r3, r4
3400d24e:	42ab      	cmp	r3, r5
3400d250:	d30a      	bcc.n	3400d268 <__exponent+0x5c>
3400d252:	f10d 0309 	add.w	r3, sp, #9
3400d256:	1a9b      	subs	r3, r3, r2
3400d258:	42ac      	cmp	r4, r5
3400d25a:	bf88      	it	hi
3400d25c:	2300      	movhi	r3, #0
3400d25e:	3302      	adds	r3, #2
3400d260:	4403      	add	r3, r0
3400d262:	1a18      	subs	r0, r3, r0
3400d264:	b003      	add	sp, #12
3400d266:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400d268:	f813 6b01 	ldrb.w	r6, [r3], #1
3400d26c:	f801 6f01 	strb.w	r6, [r1, #1]!
3400d270:	e7ed      	b.n	3400d24e <__exponent+0x42>
3400d272:	2330      	movs	r3, #48	@ 0x30
3400d274:	3130      	adds	r1, #48	@ 0x30
3400d276:	7083      	strb	r3, [r0, #2]
3400d278:	1d03      	adds	r3, r0, #4
3400d27a:	70c1      	strb	r1, [r0, #3]
3400d27c:	e7f1      	b.n	3400d262 <__exponent+0x56>
	...

3400d280 <_printf_float>:
3400d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400d284:	b08d      	sub	sp, #52	@ 0x34
3400d286:	460c      	mov	r4, r1
3400d288:	4616      	mov	r6, r2
3400d28a:	461f      	mov	r7, r3
3400d28c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3400d290:	4605      	mov	r5, r0
3400d292:	f000 ffb7 	bl	3400e204 <_localeconv_r>
3400d296:	f8d0 b000 	ldr.w	fp, [r0]
3400d29a:	4658      	mov	r0, fp
3400d29c:	f7f3 fa78 	bl	34000790 <strlen>
3400d2a0:	2300      	movs	r3, #0
3400d2a2:	f894 9018 	ldrb.w	r9, [r4, #24]
3400d2a6:	930a      	str	r3, [sp, #40]	@ 0x28
3400d2a8:	f8d8 3000 	ldr.w	r3, [r8]
3400d2ac:	6822      	ldr	r2, [r4, #0]
3400d2ae:	3307      	adds	r3, #7
3400d2b0:	9005      	str	r0, [sp, #20]
3400d2b2:	f023 0307 	bic.w	r3, r3, #7
3400d2b6:	f103 0108 	add.w	r1, r3, #8
3400d2ba:	f8c8 1000 	str.w	r1, [r8]
3400d2be:	ed93 0b00 	vldr	d0, [r3]
3400d2c2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3400d520 <_printf_float+0x2a0>
3400d2c6:	eeb0 7bc0 	vabs.f64	d7, d0
3400d2ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3400d2ce:	eeb4 7b46 	vcmp.f64	d7, d6
3400d2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d2d6:	dd24      	ble.n	3400d322 <_printf_float+0xa2>
3400d2d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3400d2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d2e0:	d502      	bpl.n	3400d2e8 <_printf_float+0x68>
3400d2e2:	232d      	movs	r3, #45	@ 0x2d
3400d2e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400d2e8:	498f      	ldr	r1, [pc, #572]	@ (3400d528 <_printf_float+0x2a8>)
3400d2ea:	4b90      	ldr	r3, [pc, #576]	@ (3400d52c <_printf_float+0x2ac>)
3400d2ec:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3400d2f0:	bf94      	ite	ls
3400d2f2:	4688      	movls	r8, r1
3400d2f4:	4698      	movhi	r8, r3
3400d2f6:	f022 0204 	bic.w	r2, r2, #4
3400d2fa:	2303      	movs	r3, #3
3400d2fc:	f04f 0a00 	mov.w	sl, #0
3400d300:	6022      	str	r2, [r4, #0]
3400d302:	6123      	str	r3, [r4, #16]
3400d304:	4633      	mov	r3, r6
3400d306:	aa0b      	add	r2, sp, #44	@ 0x2c
3400d308:	4621      	mov	r1, r4
3400d30a:	4628      	mov	r0, r5
3400d30c:	9700      	str	r7, [sp, #0]
3400d30e:	f000 f9d1 	bl	3400d6b4 <_printf_common>
3400d312:	3001      	adds	r0, #1
3400d314:	f040 8089 	bne.w	3400d42a <_printf_float+0x1aa>
3400d318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400d31c:	b00d      	add	sp, #52	@ 0x34
3400d31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400d322:	eeb4 0b40 	vcmp.f64	d0, d0
3400d326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d32a:	d709      	bvc.n	3400d340 <_printf_float+0xc0>
3400d32c:	ee10 3a90 	vmov	r3, s1
3400d330:	497f      	ldr	r1, [pc, #508]	@ (3400d530 <_printf_float+0x2b0>)
3400d332:	2b00      	cmp	r3, #0
3400d334:	bfbc      	itt	lt
3400d336:	232d      	movlt	r3, #45	@ 0x2d
3400d338:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3400d33c:	4b7d      	ldr	r3, [pc, #500]	@ (3400d534 <_printf_float+0x2b4>)
3400d33e:	e7d5      	b.n	3400d2ec <_printf_float+0x6c>
3400d340:	6863      	ldr	r3, [r4, #4]
3400d342:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3400d346:	1c59      	adds	r1, r3, #1
3400d348:	d139      	bne.n	3400d3be <_printf_float+0x13e>
3400d34a:	2306      	movs	r3, #6
3400d34c:	6063      	str	r3, [r4, #4]
3400d34e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3400d352:	2300      	movs	r3, #0
3400d354:	4628      	mov	r0, r5
3400d356:	6022      	str	r2, [r4, #0]
3400d358:	9303      	str	r3, [sp, #12]
3400d35a:	ab0a      	add	r3, sp, #40	@ 0x28
3400d35c:	e9cd 9301 	strd	r9, r3, [sp, #4]
3400d360:	ab09      	add	r3, sp, #36	@ 0x24
3400d362:	9300      	str	r3, [sp, #0]
3400d364:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3400d368:	6861      	ldr	r1, [r4, #4]
3400d36a:	f7ff fefb 	bl	3400d164 <__cvt>
3400d36e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400d372:	4680      	mov	r8, r0
3400d374:	9909      	ldr	r1, [sp, #36]	@ 0x24
3400d376:	d129      	bne.n	3400d3cc <_printf_float+0x14c>
3400d378:	1cc8      	adds	r0, r1, #3
3400d37a:	db02      	blt.n	3400d382 <_printf_float+0x102>
3400d37c:	6863      	ldr	r3, [r4, #4]
3400d37e:	4299      	cmp	r1, r3
3400d380:	dd41      	ble.n	3400d406 <_printf_float+0x186>
3400d382:	f1a9 0902 	sub.w	r9, r9, #2
3400d386:	fa5f f989 	uxtb.w	r9, r9
3400d38a:	3901      	subs	r1, #1
3400d38c:	464a      	mov	r2, r9
3400d38e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3400d392:	9109      	str	r1, [sp, #36]	@ 0x24
3400d394:	f7ff ff3a 	bl	3400d20c <__exponent>
3400d398:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400d39a:	4682      	mov	sl, r0
3400d39c:	1813      	adds	r3, r2, r0
3400d39e:	2a01      	cmp	r2, #1
3400d3a0:	6123      	str	r3, [r4, #16]
3400d3a2:	dc02      	bgt.n	3400d3aa <_printf_float+0x12a>
3400d3a4:	6822      	ldr	r2, [r4, #0]
3400d3a6:	07d2      	lsls	r2, r2, #31
3400d3a8:	d501      	bpl.n	3400d3ae <_printf_float+0x12e>
3400d3aa:	3301      	adds	r3, #1
3400d3ac:	6123      	str	r3, [r4, #16]
3400d3ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3400d3b2:	2b00      	cmp	r3, #0
3400d3b4:	d0a6      	beq.n	3400d304 <_printf_float+0x84>
3400d3b6:	232d      	movs	r3, #45	@ 0x2d
3400d3b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400d3bc:	e7a2      	b.n	3400d304 <_printf_float+0x84>
3400d3be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400d3c2:	d1c4      	bne.n	3400d34e <_printf_float+0xce>
3400d3c4:	2b00      	cmp	r3, #0
3400d3c6:	d1c2      	bne.n	3400d34e <_printf_float+0xce>
3400d3c8:	2301      	movs	r3, #1
3400d3ca:	e7bf      	b.n	3400d34c <_printf_float+0xcc>
3400d3cc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400d3d0:	d9db      	bls.n	3400d38a <_printf_float+0x10a>
3400d3d2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3400d3d6:	d118      	bne.n	3400d40a <_printf_float+0x18a>
3400d3d8:	2900      	cmp	r1, #0
3400d3da:	6863      	ldr	r3, [r4, #4]
3400d3dc:	dd0b      	ble.n	3400d3f6 <_printf_float+0x176>
3400d3de:	6121      	str	r1, [r4, #16]
3400d3e0:	b913      	cbnz	r3, 3400d3e8 <_printf_float+0x168>
3400d3e2:	6822      	ldr	r2, [r4, #0]
3400d3e4:	07d0      	lsls	r0, r2, #31
3400d3e6:	d502      	bpl.n	3400d3ee <_printf_float+0x16e>
3400d3e8:	3301      	adds	r3, #1
3400d3ea:	440b      	add	r3, r1
3400d3ec:	6123      	str	r3, [r4, #16]
3400d3ee:	f04f 0a00 	mov.w	sl, #0
3400d3f2:	65a1      	str	r1, [r4, #88]	@ 0x58
3400d3f4:	e7db      	b.n	3400d3ae <_printf_float+0x12e>
3400d3f6:	b913      	cbnz	r3, 3400d3fe <_printf_float+0x17e>
3400d3f8:	6822      	ldr	r2, [r4, #0]
3400d3fa:	07d2      	lsls	r2, r2, #31
3400d3fc:	d501      	bpl.n	3400d402 <_printf_float+0x182>
3400d3fe:	3302      	adds	r3, #2
3400d400:	e7f4      	b.n	3400d3ec <_printf_float+0x16c>
3400d402:	2301      	movs	r3, #1
3400d404:	e7f2      	b.n	3400d3ec <_printf_float+0x16c>
3400d406:	f04f 0967 	mov.w	r9, #103	@ 0x67
3400d40a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400d40c:	4299      	cmp	r1, r3
3400d40e:	db05      	blt.n	3400d41c <_printf_float+0x19c>
3400d410:	6823      	ldr	r3, [r4, #0]
3400d412:	6121      	str	r1, [r4, #16]
3400d414:	07d8      	lsls	r0, r3, #31
3400d416:	d5ea      	bpl.n	3400d3ee <_printf_float+0x16e>
3400d418:	1c4b      	adds	r3, r1, #1
3400d41a:	e7e7      	b.n	3400d3ec <_printf_float+0x16c>
3400d41c:	2900      	cmp	r1, #0
3400d41e:	bfd4      	ite	le
3400d420:	f1c1 0202 	rsble	r2, r1, #2
3400d424:	2201      	movgt	r2, #1
3400d426:	4413      	add	r3, r2
3400d428:	e7e0      	b.n	3400d3ec <_printf_float+0x16c>
3400d42a:	6823      	ldr	r3, [r4, #0]
3400d42c:	055a      	lsls	r2, r3, #21
3400d42e:	d407      	bmi.n	3400d440 <_printf_float+0x1c0>
3400d430:	6923      	ldr	r3, [r4, #16]
3400d432:	4642      	mov	r2, r8
3400d434:	4631      	mov	r1, r6
3400d436:	4628      	mov	r0, r5
3400d438:	47b8      	blx	r7
3400d43a:	3001      	adds	r0, #1
3400d43c:	d12a      	bne.n	3400d494 <_printf_float+0x214>
3400d43e:	e76b      	b.n	3400d318 <_printf_float+0x98>
3400d440:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400d444:	f240 80e0 	bls.w	3400d608 <_printf_float+0x388>
3400d448:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400d44c:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400d450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d454:	d133      	bne.n	3400d4be <_printf_float+0x23e>
3400d456:	2301      	movs	r3, #1
3400d458:	4a37      	ldr	r2, [pc, #220]	@ (3400d538 <_printf_float+0x2b8>)
3400d45a:	4631      	mov	r1, r6
3400d45c:	4628      	mov	r0, r5
3400d45e:	47b8      	blx	r7
3400d460:	3001      	adds	r0, #1
3400d462:	f43f af59 	beq.w	3400d318 <_printf_float+0x98>
3400d466:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3400d46a:	4543      	cmp	r3, r8
3400d46c:	db02      	blt.n	3400d474 <_printf_float+0x1f4>
3400d46e:	6823      	ldr	r3, [r4, #0]
3400d470:	07d8      	lsls	r0, r3, #31
3400d472:	d50f      	bpl.n	3400d494 <_printf_float+0x214>
3400d474:	9b05      	ldr	r3, [sp, #20]
3400d476:	465a      	mov	r2, fp
3400d478:	4631      	mov	r1, r6
3400d47a:	4628      	mov	r0, r5
3400d47c:	47b8      	blx	r7
3400d47e:	3001      	adds	r0, #1
3400d480:	f43f af4a 	beq.w	3400d318 <_printf_float+0x98>
3400d484:	f04f 0900 	mov.w	r9, #0
3400d488:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400d48c:	f104 0a1a 	add.w	sl, r4, #26
3400d490:	45c8      	cmp	r8, r9
3400d492:	dc09      	bgt.n	3400d4a8 <_printf_float+0x228>
3400d494:	6823      	ldr	r3, [r4, #0]
3400d496:	079b      	lsls	r3, r3, #30
3400d498:	f100 8107 	bmi.w	3400d6aa <_printf_float+0x42a>
3400d49c:	68e0      	ldr	r0, [r4, #12]
3400d49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400d4a0:	4298      	cmp	r0, r3
3400d4a2:	bfb8      	it	lt
3400d4a4:	4618      	movlt	r0, r3
3400d4a6:	e739      	b.n	3400d31c <_printf_float+0x9c>
3400d4a8:	2301      	movs	r3, #1
3400d4aa:	4652      	mov	r2, sl
3400d4ac:	4631      	mov	r1, r6
3400d4ae:	4628      	mov	r0, r5
3400d4b0:	47b8      	blx	r7
3400d4b2:	3001      	adds	r0, #1
3400d4b4:	f43f af30 	beq.w	3400d318 <_printf_float+0x98>
3400d4b8:	f109 0901 	add.w	r9, r9, #1
3400d4bc:	e7e8      	b.n	3400d490 <_printf_float+0x210>
3400d4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400d4c0:	2b00      	cmp	r3, #0
3400d4c2:	dc3b      	bgt.n	3400d53c <_printf_float+0x2bc>
3400d4c4:	2301      	movs	r3, #1
3400d4c6:	4a1c      	ldr	r2, [pc, #112]	@ (3400d538 <_printf_float+0x2b8>)
3400d4c8:	4631      	mov	r1, r6
3400d4ca:	4628      	mov	r0, r5
3400d4cc:	47b8      	blx	r7
3400d4ce:	3001      	adds	r0, #1
3400d4d0:	f43f af22 	beq.w	3400d318 <_printf_float+0x98>
3400d4d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3400d4d8:	ea59 0303 	orrs.w	r3, r9, r3
3400d4dc:	d102      	bne.n	3400d4e4 <_printf_float+0x264>
3400d4de:	6823      	ldr	r3, [r4, #0]
3400d4e0:	07d9      	lsls	r1, r3, #31
3400d4e2:	d5d7      	bpl.n	3400d494 <_printf_float+0x214>
3400d4e4:	9b05      	ldr	r3, [sp, #20]
3400d4e6:	465a      	mov	r2, fp
3400d4e8:	4631      	mov	r1, r6
3400d4ea:	4628      	mov	r0, r5
3400d4ec:	47b8      	blx	r7
3400d4ee:	3001      	adds	r0, #1
3400d4f0:	f43f af12 	beq.w	3400d318 <_printf_float+0x98>
3400d4f4:	f04f 0a00 	mov.w	sl, #0
3400d4f8:	f104 0b1a 	add.w	fp, r4, #26
3400d4fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400d4fe:	425b      	negs	r3, r3
3400d500:	4553      	cmp	r3, sl
3400d502:	dc01      	bgt.n	3400d508 <_printf_float+0x288>
3400d504:	464b      	mov	r3, r9
3400d506:	e794      	b.n	3400d432 <_printf_float+0x1b2>
3400d508:	2301      	movs	r3, #1
3400d50a:	465a      	mov	r2, fp
3400d50c:	4631      	mov	r1, r6
3400d50e:	4628      	mov	r0, r5
3400d510:	47b8      	blx	r7
3400d512:	3001      	adds	r0, #1
3400d514:	f43f af00 	beq.w	3400d318 <_printf_float+0x98>
3400d518:	f10a 0a01 	add.w	sl, sl, #1
3400d51c:	e7ee      	b.n	3400d4fc <_printf_float+0x27c>
3400d51e:	bf00      	nop
3400d520:	ffffffff 	.word	0xffffffff
3400d524:	7fefffff 	.word	0x7fefffff
3400d528:	3401177d 	.word	0x3401177d
3400d52c:	34011781 	.word	0x34011781
3400d530:	34011785 	.word	0x34011785
3400d534:	34011789 	.word	0x34011789
3400d538:	34010ea7 	.word	0x34010ea7
3400d53c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400d53e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3400d542:	4553      	cmp	r3, sl
3400d544:	bfa8      	it	ge
3400d546:	4653      	movge	r3, sl
3400d548:	2b00      	cmp	r3, #0
3400d54a:	4699      	mov	r9, r3
3400d54c:	dc37      	bgt.n	3400d5be <_printf_float+0x33e>
3400d54e:	2300      	movs	r3, #0
3400d550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400d554:	f104 021a 	add.w	r2, r4, #26
3400d558:	9307      	str	r3, [sp, #28]
3400d55a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400d55c:	9907      	ldr	r1, [sp, #28]
3400d55e:	9306      	str	r3, [sp, #24]
3400d560:	eba3 0309 	sub.w	r3, r3, r9
3400d564:	428b      	cmp	r3, r1
3400d566:	dc31      	bgt.n	3400d5cc <_printf_float+0x34c>
3400d568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400d56a:	459a      	cmp	sl, r3
3400d56c:	dc3b      	bgt.n	3400d5e6 <_printf_float+0x366>
3400d56e:	6823      	ldr	r3, [r4, #0]
3400d570:	07da      	lsls	r2, r3, #31
3400d572:	d438      	bmi.n	3400d5e6 <_printf_float+0x366>
3400d574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400d576:	ebaa 0903 	sub.w	r9, sl, r3
3400d57a:	9b06      	ldr	r3, [sp, #24]
3400d57c:	ebaa 0303 	sub.w	r3, sl, r3
3400d580:	4599      	cmp	r9, r3
3400d582:	bfa8      	it	ge
3400d584:	4699      	movge	r9, r3
3400d586:	f1b9 0f00 	cmp.w	r9, #0
3400d58a:	dc34      	bgt.n	3400d5f6 <_printf_float+0x376>
3400d58c:	f04f 0800 	mov.w	r8, #0
3400d590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400d594:	f104 0b1a 	add.w	fp, r4, #26
3400d598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400d59a:	ebaa 0303 	sub.w	r3, sl, r3
3400d59e:	eba3 0309 	sub.w	r3, r3, r9
3400d5a2:	4543      	cmp	r3, r8
3400d5a4:	f77f af76 	ble.w	3400d494 <_printf_float+0x214>
3400d5a8:	2301      	movs	r3, #1
3400d5aa:	465a      	mov	r2, fp
3400d5ac:	4631      	mov	r1, r6
3400d5ae:	4628      	mov	r0, r5
3400d5b0:	47b8      	blx	r7
3400d5b2:	3001      	adds	r0, #1
3400d5b4:	f43f aeb0 	beq.w	3400d318 <_printf_float+0x98>
3400d5b8:	f108 0801 	add.w	r8, r8, #1
3400d5bc:	e7ec      	b.n	3400d598 <_printf_float+0x318>
3400d5be:	4642      	mov	r2, r8
3400d5c0:	4631      	mov	r1, r6
3400d5c2:	4628      	mov	r0, r5
3400d5c4:	47b8      	blx	r7
3400d5c6:	3001      	adds	r0, #1
3400d5c8:	d1c1      	bne.n	3400d54e <_printf_float+0x2ce>
3400d5ca:	e6a5      	b.n	3400d318 <_printf_float+0x98>
3400d5cc:	2301      	movs	r3, #1
3400d5ce:	4631      	mov	r1, r6
3400d5d0:	4628      	mov	r0, r5
3400d5d2:	9206      	str	r2, [sp, #24]
3400d5d4:	47b8      	blx	r7
3400d5d6:	3001      	adds	r0, #1
3400d5d8:	f43f ae9e 	beq.w	3400d318 <_printf_float+0x98>
3400d5dc:	9b07      	ldr	r3, [sp, #28]
3400d5de:	9a06      	ldr	r2, [sp, #24]
3400d5e0:	3301      	adds	r3, #1
3400d5e2:	9307      	str	r3, [sp, #28]
3400d5e4:	e7b9      	b.n	3400d55a <_printf_float+0x2da>
3400d5e6:	9b05      	ldr	r3, [sp, #20]
3400d5e8:	465a      	mov	r2, fp
3400d5ea:	4631      	mov	r1, r6
3400d5ec:	4628      	mov	r0, r5
3400d5ee:	47b8      	blx	r7
3400d5f0:	3001      	adds	r0, #1
3400d5f2:	d1bf      	bne.n	3400d574 <_printf_float+0x2f4>
3400d5f4:	e690      	b.n	3400d318 <_printf_float+0x98>
3400d5f6:	9a06      	ldr	r2, [sp, #24]
3400d5f8:	464b      	mov	r3, r9
3400d5fa:	4631      	mov	r1, r6
3400d5fc:	4628      	mov	r0, r5
3400d5fe:	4442      	add	r2, r8
3400d600:	47b8      	blx	r7
3400d602:	3001      	adds	r0, #1
3400d604:	d1c2      	bne.n	3400d58c <_printf_float+0x30c>
3400d606:	e687      	b.n	3400d318 <_printf_float+0x98>
3400d608:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3400d60c:	f1b9 0f01 	cmp.w	r9, #1
3400d610:	dc01      	bgt.n	3400d616 <_printf_float+0x396>
3400d612:	07db      	lsls	r3, r3, #31
3400d614:	d536      	bpl.n	3400d684 <_printf_float+0x404>
3400d616:	2301      	movs	r3, #1
3400d618:	4642      	mov	r2, r8
3400d61a:	4631      	mov	r1, r6
3400d61c:	4628      	mov	r0, r5
3400d61e:	47b8      	blx	r7
3400d620:	3001      	adds	r0, #1
3400d622:	f43f ae79 	beq.w	3400d318 <_printf_float+0x98>
3400d626:	9b05      	ldr	r3, [sp, #20]
3400d628:	465a      	mov	r2, fp
3400d62a:	4631      	mov	r1, r6
3400d62c:	4628      	mov	r0, r5
3400d62e:	47b8      	blx	r7
3400d630:	3001      	adds	r0, #1
3400d632:	f43f ae71 	beq.w	3400d318 <_printf_float+0x98>
3400d636:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3400d63a:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400d63e:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400d642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d646:	d018      	beq.n	3400d67a <_printf_float+0x3fa>
3400d648:	464b      	mov	r3, r9
3400d64a:	f108 0201 	add.w	r2, r8, #1
3400d64e:	4631      	mov	r1, r6
3400d650:	4628      	mov	r0, r5
3400d652:	47b8      	blx	r7
3400d654:	3001      	adds	r0, #1
3400d656:	d10c      	bne.n	3400d672 <_printf_float+0x3f2>
3400d658:	e65e      	b.n	3400d318 <_printf_float+0x98>
3400d65a:	2301      	movs	r3, #1
3400d65c:	465a      	mov	r2, fp
3400d65e:	4631      	mov	r1, r6
3400d660:	4628      	mov	r0, r5
3400d662:	47b8      	blx	r7
3400d664:	3001      	adds	r0, #1
3400d666:	f43f ae57 	beq.w	3400d318 <_printf_float+0x98>
3400d66a:	f108 0801 	add.w	r8, r8, #1
3400d66e:	45c8      	cmp	r8, r9
3400d670:	dbf3      	blt.n	3400d65a <_printf_float+0x3da>
3400d672:	4653      	mov	r3, sl
3400d674:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3400d678:	e6dc      	b.n	3400d434 <_printf_float+0x1b4>
3400d67a:	f04f 0800 	mov.w	r8, #0
3400d67e:	f104 0b1a 	add.w	fp, r4, #26
3400d682:	e7f4      	b.n	3400d66e <_printf_float+0x3ee>
3400d684:	2301      	movs	r3, #1
3400d686:	4642      	mov	r2, r8
3400d688:	e7e1      	b.n	3400d64e <_printf_float+0x3ce>
3400d68a:	2301      	movs	r3, #1
3400d68c:	464a      	mov	r2, r9
3400d68e:	4631      	mov	r1, r6
3400d690:	4628      	mov	r0, r5
3400d692:	47b8      	blx	r7
3400d694:	3001      	adds	r0, #1
3400d696:	f43f ae3f 	beq.w	3400d318 <_printf_float+0x98>
3400d69a:	f108 0801 	add.w	r8, r8, #1
3400d69e:	68e3      	ldr	r3, [r4, #12]
3400d6a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3400d6a2:	1a5b      	subs	r3, r3, r1
3400d6a4:	4543      	cmp	r3, r8
3400d6a6:	dcf0      	bgt.n	3400d68a <_printf_float+0x40a>
3400d6a8:	e6f8      	b.n	3400d49c <_printf_float+0x21c>
3400d6aa:	f04f 0800 	mov.w	r8, #0
3400d6ae:	f104 0919 	add.w	r9, r4, #25
3400d6b2:	e7f4      	b.n	3400d69e <_printf_float+0x41e>

3400d6b4 <_printf_common>:
3400d6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400d6b8:	4616      	mov	r6, r2
3400d6ba:	4698      	mov	r8, r3
3400d6bc:	688a      	ldr	r2, [r1, #8]
3400d6be:	4607      	mov	r7, r0
3400d6c0:	690b      	ldr	r3, [r1, #16]
3400d6c2:	460c      	mov	r4, r1
3400d6c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
3400d6c8:	4293      	cmp	r3, r2
3400d6ca:	bfb8      	it	lt
3400d6cc:	4613      	movlt	r3, r2
3400d6ce:	6033      	str	r3, [r6, #0]
3400d6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3400d6d4:	b10a      	cbz	r2, 3400d6da <_printf_common+0x26>
3400d6d6:	3301      	adds	r3, #1
3400d6d8:	6033      	str	r3, [r6, #0]
3400d6da:	6823      	ldr	r3, [r4, #0]
3400d6dc:	0699      	lsls	r1, r3, #26
3400d6de:	bf42      	ittt	mi
3400d6e0:	6833      	ldrmi	r3, [r6, #0]
3400d6e2:	3302      	addmi	r3, #2
3400d6e4:	6033      	strmi	r3, [r6, #0]
3400d6e6:	6825      	ldr	r5, [r4, #0]
3400d6e8:	f015 0506 	ands.w	r5, r5, #6
3400d6ec:	d106      	bne.n	3400d6fc <_printf_common+0x48>
3400d6ee:	f104 0a19 	add.w	sl, r4, #25
3400d6f2:	68e3      	ldr	r3, [r4, #12]
3400d6f4:	6832      	ldr	r2, [r6, #0]
3400d6f6:	1a9b      	subs	r3, r3, r2
3400d6f8:	42ab      	cmp	r3, r5
3400d6fa:	dc2b      	bgt.n	3400d754 <_printf_common+0xa0>
3400d6fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3400d700:	6822      	ldr	r2, [r4, #0]
3400d702:	3b00      	subs	r3, #0
3400d704:	bf18      	it	ne
3400d706:	2301      	movne	r3, #1
3400d708:	0692      	lsls	r2, r2, #26
3400d70a:	d430      	bmi.n	3400d76e <_printf_common+0xba>
3400d70c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3400d710:	4641      	mov	r1, r8
3400d712:	4638      	mov	r0, r7
3400d714:	47c8      	blx	r9
3400d716:	3001      	adds	r0, #1
3400d718:	d023      	beq.n	3400d762 <_printf_common+0xae>
3400d71a:	6823      	ldr	r3, [r4, #0]
3400d71c:	341a      	adds	r4, #26
3400d71e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3400d722:	f003 0306 	and.w	r3, r3, #6
3400d726:	2b04      	cmp	r3, #4
3400d728:	bf0a      	itet	eq
3400d72a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3400d72e:	2500      	movne	r5, #0
3400d730:	6833      	ldreq	r3, [r6, #0]
3400d732:	f04f 0600 	mov.w	r6, #0
3400d736:	bf08      	it	eq
3400d738:	1aed      	subeq	r5, r5, r3
3400d73a:	f854 3c12 	ldr.w	r3, [r4, #-18]
3400d73e:	bf08      	it	eq
3400d740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3400d744:	4293      	cmp	r3, r2
3400d746:	bfc4      	itt	gt
3400d748:	1a9b      	subgt	r3, r3, r2
3400d74a:	18ed      	addgt	r5, r5, r3
3400d74c:	42b5      	cmp	r5, r6
3400d74e:	d11a      	bne.n	3400d786 <_printf_common+0xd2>
3400d750:	2000      	movs	r0, #0
3400d752:	e008      	b.n	3400d766 <_printf_common+0xb2>
3400d754:	2301      	movs	r3, #1
3400d756:	4652      	mov	r2, sl
3400d758:	4641      	mov	r1, r8
3400d75a:	4638      	mov	r0, r7
3400d75c:	47c8      	blx	r9
3400d75e:	3001      	adds	r0, #1
3400d760:	d103      	bne.n	3400d76a <_printf_common+0xb6>
3400d762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400d766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400d76a:	3501      	adds	r5, #1
3400d76c:	e7c1      	b.n	3400d6f2 <_printf_common+0x3e>
3400d76e:	18e1      	adds	r1, r4, r3
3400d770:	1c5a      	adds	r2, r3, #1
3400d772:	2030      	movs	r0, #48	@ 0x30
3400d774:	3302      	adds	r3, #2
3400d776:	4422      	add	r2, r4
3400d778:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3400d77c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3400d780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3400d784:	e7c2      	b.n	3400d70c <_printf_common+0x58>
3400d786:	2301      	movs	r3, #1
3400d788:	4622      	mov	r2, r4
3400d78a:	4641      	mov	r1, r8
3400d78c:	4638      	mov	r0, r7
3400d78e:	47c8      	blx	r9
3400d790:	3001      	adds	r0, #1
3400d792:	d0e6      	beq.n	3400d762 <_printf_common+0xae>
3400d794:	3601      	adds	r6, #1
3400d796:	e7d9      	b.n	3400d74c <_printf_common+0x98>

3400d798 <_printf_i>:
3400d798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3400d79c:	7e0f      	ldrb	r7, [r1, #24]
3400d79e:	4691      	mov	r9, r2
3400d7a0:	4680      	mov	r8, r0
3400d7a2:	460c      	mov	r4, r1
3400d7a4:	2f78      	cmp	r7, #120	@ 0x78
3400d7a6:	469a      	mov	sl, r3
3400d7a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400d7aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3400d7ae:	d807      	bhi.n	3400d7c0 <_printf_i+0x28>
3400d7b0:	2f62      	cmp	r7, #98	@ 0x62
3400d7b2:	d80a      	bhi.n	3400d7ca <_printf_i+0x32>
3400d7b4:	2f00      	cmp	r7, #0
3400d7b6:	f000 80d2 	beq.w	3400d95e <_printf_i+0x1c6>
3400d7ba:	2f58      	cmp	r7, #88	@ 0x58
3400d7bc:	f000 80b9 	beq.w	3400d932 <_printf_i+0x19a>
3400d7c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400d7c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3400d7c8:	e03a      	b.n	3400d840 <_printf_i+0xa8>
3400d7ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3400d7ce:	2b15      	cmp	r3, #21
3400d7d0:	d8f6      	bhi.n	3400d7c0 <_printf_i+0x28>
3400d7d2:	a101      	add	r1, pc, #4	@ (adr r1, 3400d7d8 <_printf_i+0x40>)
3400d7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3400d7d8:	3400d831 	.word	0x3400d831
3400d7dc:	3400d845 	.word	0x3400d845
3400d7e0:	3400d7c1 	.word	0x3400d7c1
3400d7e4:	3400d7c1 	.word	0x3400d7c1
3400d7e8:	3400d7c1 	.word	0x3400d7c1
3400d7ec:	3400d7c1 	.word	0x3400d7c1
3400d7f0:	3400d845 	.word	0x3400d845
3400d7f4:	3400d7c1 	.word	0x3400d7c1
3400d7f8:	3400d7c1 	.word	0x3400d7c1
3400d7fc:	3400d7c1 	.word	0x3400d7c1
3400d800:	3400d7c1 	.word	0x3400d7c1
3400d804:	3400d945 	.word	0x3400d945
3400d808:	3400d86f 	.word	0x3400d86f
3400d80c:	3400d8ff 	.word	0x3400d8ff
3400d810:	3400d7c1 	.word	0x3400d7c1
3400d814:	3400d7c1 	.word	0x3400d7c1
3400d818:	3400d967 	.word	0x3400d967
3400d81c:	3400d7c1 	.word	0x3400d7c1
3400d820:	3400d86f 	.word	0x3400d86f
3400d824:	3400d7c1 	.word	0x3400d7c1
3400d828:	3400d7c1 	.word	0x3400d7c1
3400d82c:	3400d907 	.word	0x3400d907
3400d830:	6833      	ldr	r3, [r6, #0]
3400d832:	1d1a      	adds	r2, r3, #4
3400d834:	681b      	ldr	r3, [r3, #0]
3400d836:	6032      	str	r2, [r6, #0]
3400d838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400d83c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3400d840:	2301      	movs	r3, #1
3400d842:	e09d      	b.n	3400d980 <_printf_i+0x1e8>
3400d844:	6833      	ldr	r3, [r6, #0]
3400d846:	6820      	ldr	r0, [r4, #0]
3400d848:	1d19      	adds	r1, r3, #4
3400d84a:	6031      	str	r1, [r6, #0]
3400d84c:	0606      	lsls	r6, r0, #24
3400d84e:	d501      	bpl.n	3400d854 <_printf_i+0xbc>
3400d850:	681d      	ldr	r5, [r3, #0]
3400d852:	e003      	b.n	3400d85c <_printf_i+0xc4>
3400d854:	0645      	lsls	r5, r0, #25
3400d856:	d5fb      	bpl.n	3400d850 <_printf_i+0xb8>
3400d858:	f9b3 5000 	ldrsh.w	r5, [r3]
3400d85c:	2d00      	cmp	r5, #0
3400d85e:	da03      	bge.n	3400d868 <_printf_i+0xd0>
3400d860:	232d      	movs	r3, #45	@ 0x2d
3400d862:	426d      	negs	r5, r5
3400d864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400d868:	4859      	ldr	r0, [pc, #356]	@ (3400d9d0 <_printf_i+0x238>)
3400d86a:	230a      	movs	r3, #10
3400d86c:	e011      	b.n	3400d892 <_printf_i+0xfa>
3400d86e:	6821      	ldr	r1, [r4, #0]
3400d870:	6833      	ldr	r3, [r6, #0]
3400d872:	0608      	lsls	r0, r1, #24
3400d874:	f853 5b04 	ldr.w	r5, [r3], #4
3400d878:	d402      	bmi.n	3400d880 <_printf_i+0xe8>
3400d87a:	0649      	lsls	r1, r1, #25
3400d87c:	bf48      	it	mi
3400d87e:	b2ad      	uxthmi	r5, r5
3400d880:	2f6f      	cmp	r7, #111	@ 0x6f
3400d882:	6033      	str	r3, [r6, #0]
3400d884:	4852      	ldr	r0, [pc, #328]	@ (3400d9d0 <_printf_i+0x238>)
3400d886:	bf14      	ite	ne
3400d888:	230a      	movne	r3, #10
3400d88a:	2308      	moveq	r3, #8
3400d88c:	2100      	movs	r1, #0
3400d88e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3400d892:	6866      	ldr	r6, [r4, #4]
3400d894:	2e00      	cmp	r6, #0
3400d896:	60a6      	str	r6, [r4, #8]
3400d898:	bfa2      	ittt	ge
3400d89a:	6821      	ldrge	r1, [r4, #0]
3400d89c:	f021 0104 	bicge.w	r1, r1, #4
3400d8a0:	6021      	strge	r1, [r4, #0]
3400d8a2:	b90d      	cbnz	r5, 3400d8a8 <_printf_i+0x110>
3400d8a4:	2e00      	cmp	r6, #0
3400d8a6:	d04b      	beq.n	3400d940 <_printf_i+0x1a8>
3400d8a8:	4616      	mov	r6, r2
3400d8aa:	fbb5 f1f3 	udiv	r1, r5, r3
3400d8ae:	fb03 5711 	mls	r7, r3, r1, r5
3400d8b2:	5dc7      	ldrb	r7, [r0, r7]
3400d8b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
3400d8b8:	462f      	mov	r7, r5
3400d8ba:	460d      	mov	r5, r1
3400d8bc:	42bb      	cmp	r3, r7
3400d8be:	d9f4      	bls.n	3400d8aa <_printf_i+0x112>
3400d8c0:	2b08      	cmp	r3, #8
3400d8c2:	d10b      	bne.n	3400d8dc <_printf_i+0x144>
3400d8c4:	6823      	ldr	r3, [r4, #0]
3400d8c6:	07df      	lsls	r7, r3, #31
3400d8c8:	d508      	bpl.n	3400d8dc <_printf_i+0x144>
3400d8ca:	6923      	ldr	r3, [r4, #16]
3400d8cc:	6861      	ldr	r1, [r4, #4]
3400d8ce:	4299      	cmp	r1, r3
3400d8d0:	bfde      	ittt	le
3400d8d2:	2330      	movle	r3, #48	@ 0x30
3400d8d4:	f806 3c01 	strble.w	r3, [r6, #-1]
3400d8d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3400d8dc:	1b92      	subs	r2, r2, r6
3400d8de:	6122      	str	r2, [r4, #16]
3400d8e0:	464b      	mov	r3, r9
3400d8e2:	aa03      	add	r2, sp, #12
3400d8e4:	4621      	mov	r1, r4
3400d8e6:	4640      	mov	r0, r8
3400d8e8:	f8cd a000 	str.w	sl, [sp]
3400d8ec:	f7ff fee2 	bl	3400d6b4 <_printf_common>
3400d8f0:	3001      	adds	r0, #1
3400d8f2:	d14a      	bne.n	3400d98a <_printf_i+0x1f2>
3400d8f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400d8f8:	b004      	add	sp, #16
3400d8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400d8fe:	6823      	ldr	r3, [r4, #0]
3400d900:	f043 0320 	orr.w	r3, r3, #32
3400d904:	6023      	str	r3, [r4, #0]
3400d906:	2778      	movs	r7, #120	@ 0x78
3400d908:	4832      	ldr	r0, [pc, #200]	@ (3400d9d4 <_printf_i+0x23c>)
3400d90a:	6823      	ldr	r3, [r4, #0]
3400d90c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3400d910:	061f      	lsls	r7, r3, #24
3400d912:	6831      	ldr	r1, [r6, #0]
3400d914:	f851 5b04 	ldr.w	r5, [r1], #4
3400d918:	d402      	bmi.n	3400d920 <_printf_i+0x188>
3400d91a:	065f      	lsls	r7, r3, #25
3400d91c:	bf48      	it	mi
3400d91e:	b2ad      	uxthmi	r5, r5
3400d920:	6031      	str	r1, [r6, #0]
3400d922:	07d9      	lsls	r1, r3, #31
3400d924:	bf44      	itt	mi
3400d926:	f043 0320 	orrmi.w	r3, r3, #32
3400d92a:	6023      	strmi	r3, [r4, #0]
3400d92c:	b11d      	cbz	r5, 3400d936 <_printf_i+0x19e>
3400d92e:	2310      	movs	r3, #16
3400d930:	e7ac      	b.n	3400d88c <_printf_i+0xf4>
3400d932:	4827      	ldr	r0, [pc, #156]	@ (3400d9d0 <_printf_i+0x238>)
3400d934:	e7e9      	b.n	3400d90a <_printf_i+0x172>
3400d936:	6823      	ldr	r3, [r4, #0]
3400d938:	f023 0320 	bic.w	r3, r3, #32
3400d93c:	6023      	str	r3, [r4, #0]
3400d93e:	e7f6      	b.n	3400d92e <_printf_i+0x196>
3400d940:	4616      	mov	r6, r2
3400d942:	e7bd      	b.n	3400d8c0 <_printf_i+0x128>
3400d944:	6833      	ldr	r3, [r6, #0]
3400d946:	6825      	ldr	r5, [r4, #0]
3400d948:	1d18      	adds	r0, r3, #4
3400d94a:	6961      	ldr	r1, [r4, #20]
3400d94c:	6030      	str	r0, [r6, #0]
3400d94e:	062e      	lsls	r6, r5, #24
3400d950:	681b      	ldr	r3, [r3, #0]
3400d952:	d501      	bpl.n	3400d958 <_printf_i+0x1c0>
3400d954:	6019      	str	r1, [r3, #0]
3400d956:	e002      	b.n	3400d95e <_printf_i+0x1c6>
3400d958:	0668      	lsls	r0, r5, #25
3400d95a:	d5fb      	bpl.n	3400d954 <_printf_i+0x1bc>
3400d95c:	8019      	strh	r1, [r3, #0]
3400d95e:	2300      	movs	r3, #0
3400d960:	4616      	mov	r6, r2
3400d962:	6123      	str	r3, [r4, #16]
3400d964:	e7bc      	b.n	3400d8e0 <_printf_i+0x148>
3400d966:	6833      	ldr	r3, [r6, #0]
3400d968:	2100      	movs	r1, #0
3400d96a:	1d1a      	adds	r2, r3, #4
3400d96c:	6032      	str	r2, [r6, #0]
3400d96e:	681e      	ldr	r6, [r3, #0]
3400d970:	6862      	ldr	r2, [r4, #4]
3400d972:	4630      	mov	r0, r6
3400d974:	f000 fccd 	bl	3400e312 <memchr>
3400d978:	b108      	cbz	r0, 3400d97e <_printf_i+0x1e6>
3400d97a:	1b80      	subs	r0, r0, r6
3400d97c:	6060      	str	r0, [r4, #4]
3400d97e:	6863      	ldr	r3, [r4, #4]
3400d980:	6123      	str	r3, [r4, #16]
3400d982:	2300      	movs	r3, #0
3400d984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400d988:	e7aa      	b.n	3400d8e0 <_printf_i+0x148>
3400d98a:	6923      	ldr	r3, [r4, #16]
3400d98c:	4632      	mov	r2, r6
3400d98e:	4649      	mov	r1, r9
3400d990:	4640      	mov	r0, r8
3400d992:	47d0      	blx	sl
3400d994:	3001      	adds	r0, #1
3400d996:	d0ad      	beq.n	3400d8f4 <_printf_i+0x15c>
3400d998:	6823      	ldr	r3, [r4, #0]
3400d99a:	079b      	lsls	r3, r3, #30
3400d99c:	d413      	bmi.n	3400d9c6 <_printf_i+0x22e>
3400d99e:	68e0      	ldr	r0, [r4, #12]
3400d9a0:	9b03      	ldr	r3, [sp, #12]
3400d9a2:	4298      	cmp	r0, r3
3400d9a4:	bfb8      	it	lt
3400d9a6:	4618      	movlt	r0, r3
3400d9a8:	e7a6      	b.n	3400d8f8 <_printf_i+0x160>
3400d9aa:	2301      	movs	r3, #1
3400d9ac:	4632      	mov	r2, r6
3400d9ae:	4649      	mov	r1, r9
3400d9b0:	4640      	mov	r0, r8
3400d9b2:	47d0      	blx	sl
3400d9b4:	3001      	adds	r0, #1
3400d9b6:	d09d      	beq.n	3400d8f4 <_printf_i+0x15c>
3400d9b8:	3501      	adds	r5, #1
3400d9ba:	68e3      	ldr	r3, [r4, #12]
3400d9bc:	9903      	ldr	r1, [sp, #12]
3400d9be:	1a5b      	subs	r3, r3, r1
3400d9c0:	42ab      	cmp	r3, r5
3400d9c2:	dcf2      	bgt.n	3400d9aa <_printf_i+0x212>
3400d9c4:	e7eb      	b.n	3400d99e <_printf_i+0x206>
3400d9c6:	2500      	movs	r5, #0
3400d9c8:	f104 0619 	add.w	r6, r4, #25
3400d9cc:	e7f5      	b.n	3400d9ba <_printf_i+0x222>
3400d9ce:	bf00      	nop
3400d9d0:	3401178d 	.word	0x3401178d
3400d9d4:	3401179e 	.word	0x3401179e

3400d9d8 <std>:
3400d9d8:	2300      	movs	r3, #0
3400d9da:	b510      	push	{r4, lr}
3400d9dc:	4604      	mov	r4, r0
3400d9de:	6083      	str	r3, [r0, #8]
3400d9e0:	8181      	strh	r1, [r0, #12]
3400d9e2:	4619      	mov	r1, r3
3400d9e4:	6643      	str	r3, [r0, #100]	@ 0x64
3400d9e6:	81c2      	strh	r2, [r0, #14]
3400d9e8:	2208      	movs	r2, #8
3400d9ea:	6183      	str	r3, [r0, #24]
3400d9ec:	e9c0 3300 	strd	r3, r3, [r0]
3400d9f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
3400d9f4:	305c      	adds	r0, #92	@ 0x5c
3400d9f6:	f000 fa0b 	bl	3400de10 <memset>
3400d9fa:	4b0d      	ldr	r3, [pc, #52]	@ (3400da30 <std+0x58>)
3400d9fc:	6224      	str	r4, [r4, #32]
3400d9fe:	6263      	str	r3, [r4, #36]	@ 0x24
3400da00:	4b0c      	ldr	r3, [pc, #48]	@ (3400da34 <std+0x5c>)
3400da02:	62a3      	str	r3, [r4, #40]	@ 0x28
3400da04:	4b0c      	ldr	r3, [pc, #48]	@ (3400da38 <std+0x60>)
3400da06:	62e3      	str	r3, [r4, #44]	@ 0x2c
3400da08:	4b0c      	ldr	r3, [pc, #48]	@ (3400da3c <std+0x64>)
3400da0a:	6323      	str	r3, [r4, #48]	@ 0x30
3400da0c:	4b0c      	ldr	r3, [pc, #48]	@ (3400da40 <std+0x68>)
3400da0e:	429c      	cmp	r4, r3
3400da10:	d006      	beq.n	3400da20 <std+0x48>
3400da12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3400da16:	4294      	cmp	r4, r2
3400da18:	d002      	beq.n	3400da20 <std+0x48>
3400da1a:	33d0      	adds	r3, #208	@ 0xd0
3400da1c:	429c      	cmp	r4, r3
3400da1e:	d105      	bne.n	3400da2c <std+0x54>
3400da20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3400da24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400da28:	f000 bc70 	b.w	3400e30c <__retarget_lock_init_recursive>
3400da2c:	bd10      	pop	{r4, pc}
3400da2e:	bf00      	nop
3400da30:	3400dc61 	.word	0x3400dc61
3400da34:	3400dc83 	.word	0x3400dc83
3400da38:	3400dcbb 	.word	0x3400dcbb
3400da3c:	3400dcdf 	.word	0x3400dcdf
3400da40:	34012bec 	.word	0x34012bec

3400da44 <stdio_exit_handler>:
3400da44:	4a02      	ldr	r2, [pc, #8]	@ (3400da50 <stdio_exit_handler+0xc>)
3400da46:	4903      	ldr	r1, [pc, #12]	@ (3400da54 <stdio_exit_handler+0x10>)
3400da48:	4803      	ldr	r0, [pc, #12]	@ (3400da58 <stdio_exit_handler+0x14>)
3400da4a:	f000 b87b 	b.w	3400db44 <_fwalk_sglue>
3400da4e:	bf00      	nop
3400da50:	340121a8 	.word	0x340121a8
3400da54:	3400fa4d 	.word	0x3400fa4d
3400da58:	340121b8 	.word	0x340121b8

3400da5c <cleanup_stdio>:
3400da5c:	6841      	ldr	r1, [r0, #4]
3400da5e:	4b0c      	ldr	r3, [pc, #48]	@ (3400da90 <cleanup_stdio+0x34>)
3400da60:	4299      	cmp	r1, r3
3400da62:	b510      	push	{r4, lr}
3400da64:	4604      	mov	r4, r0
3400da66:	d001      	beq.n	3400da6c <cleanup_stdio+0x10>
3400da68:	f001 fff0 	bl	3400fa4c <_fflush_r>
3400da6c:	68a1      	ldr	r1, [r4, #8]
3400da6e:	4b09      	ldr	r3, [pc, #36]	@ (3400da94 <cleanup_stdio+0x38>)
3400da70:	4299      	cmp	r1, r3
3400da72:	d002      	beq.n	3400da7a <cleanup_stdio+0x1e>
3400da74:	4620      	mov	r0, r4
3400da76:	f001 ffe9 	bl	3400fa4c <_fflush_r>
3400da7a:	68e1      	ldr	r1, [r4, #12]
3400da7c:	4b06      	ldr	r3, [pc, #24]	@ (3400da98 <cleanup_stdio+0x3c>)
3400da7e:	4299      	cmp	r1, r3
3400da80:	d004      	beq.n	3400da8c <cleanup_stdio+0x30>
3400da82:	4620      	mov	r0, r4
3400da84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400da88:	f001 bfe0 	b.w	3400fa4c <_fflush_r>
3400da8c:	bd10      	pop	{r4, pc}
3400da8e:	bf00      	nop
3400da90:	34012bec 	.word	0x34012bec
3400da94:	34012c54 	.word	0x34012c54
3400da98:	34012cbc 	.word	0x34012cbc

3400da9c <global_stdio_init.part.0>:
3400da9c:	b510      	push	{r4, lr}
3400da9e:	4b0b      	ldr	r3, [pc, #44]	@ (3400dacc <global_stdio_init.part.0+0x30>)
3400daa0:	2104      	movs	r1, #4
3400daa2:	4c0b      	ldr	r4, [pc, #44]	@ (3400dad0 <global_stdio_init.part.0+0x34>)
3400daa4:	4a0b      	ldr	r2, [pc, #44]	@ (3400dad4 <global_stdio_init.part.0+0x38>)
3400daa6:	4620      	mov	r0, r4
3400daa8:	601a      	str	r2, [r3, #0]
3400daaa:	2200      	movs	r2, #0
3400daac:	f7ff ff94 	bl	3400d9d8 <std>
3400dab0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3400dab4:	2201      	movs	r2, #1
3400dab6:	2109      	movs	r1, #9
3400dab8:	f7ff ff8e 	bl	3400d9d8 <std>
3400dabc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3400dac0:	2202      	movs	r2, #2
3400dac2:	2112      	movs	r1, #18
3400dac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400dac8:	f7ff bf86 	b.w	3400d9d8 <std>
3400dacc:	34012d24 	.word	0x34012d24
3400dad0:	34012bec 	.word	0x34012bec
3400dad4:	3400da45 	.word	0x3400da45

3400dad8 <__sfp_lock_acquire>:
3400dad8:	4801      	ldr	r0, [pc, #4]	@ (3400dae0 <__sfp_lock_acquire+0x8>)
3400dada:	f000 bc18 	b.w	3400e30e <__retarget_lock_acquire_recursive>
3400dade:	bf00      	nop
3400dae0:	34012d2d 	.word	0x34012d2d

3400dae4 <__sfp_lock_release>:
3400dae4:	4801      	ldr	r0, [pc, #4]	@ (3400daec <__sfp_lock_release+0x8>)
3400dae6:	f000 bc13 	b.w	3400e310 <__retarget_lock_release_recursive>
3400daea:	bf00      	nop
3400daec:	34012d2d 	.word	0x34012d2d

3400daf0 <__sinit>:
3400daf0:	b510      	push	{r4, lr}
3400daf2:	4604      	mov	r4, r0
3400daf4:	f7ff fff0 	bl	3400dad8 <__sfp_lock_acquire>
3400daf8:	6a23      	ldr	r3, [r4, #32]
3400dafa:	b11b      	cbz	r3, 3400db04 <__sinit+0x14>
3400dafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400db00:	f7ff bff0 	b.w	3400dae4 <__sfp_lock_release>
3400db04:	4b04      	ldr	r3, [pc, #16]	@ (3400db18 <__sinit+0x28>)
3400db06:	6223      	str	r3, [r4, #32]
3400db08:	4b04      	ldr	r3, [pc, #16]	@ (3400db1c <__sinit+0x2c>)
3400db0a:	681b      	ldr	r3, [r3, #0]
3400db0c:	2b00      	cmp	r3, #0
3400db0e:	d1f5      	bne.n	3400dafc <__sinit+0xc>
3400db10:	f7ff ffc4 	bl	3400da9c <global_stdio_init.part.0>
3400db14:	e7f2      	b.n	3400dafc <__sinit+0xc>
3400db16:	bf00      	nop
3400db18:	3400da5d 	.word	0x3400da5d
3400db1c:	34012d24 	.word	0x34012d24

3400db20 <fiprintf>:
3400db20:	b40e      	push	{r1, r2, r3}
3400db22:	b503      	push	{r0, r1, lr}
3400db24:	ab03      	add	r3, sp, #12
3400db26:	4601      	mov	r1, r0
3400db28:	4805      	ldr	r0, [pc, #20]	@ (3400db40 <fiprintf+0x20>)
3400db2a:	f853 2b04 	ldr.w	r2, [r3], #4
3400db2e:	6800      	ldr	r0, [r0, #0]
3400db30:	9301      	str	r3, [sp, #4]
3400db32:	f001 fdef 	bl	3400f714 <_vfiprintf_r>
3400db36:	b002      	add	sp, #8
3400db38:	f85d eb04 	ldr.w	lr, [sp], #4
3400db3c:	b003      	add	sp, #12
3400db3e:	4770      	bx	lr
3400db40:	340121b4 	.word	0x340121b4

3400db44 <_fwalk_sglue>:
3400db44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400db48:	4607      	mov	r7, r0
3400db4a:	4688      	mov	r8, r1
3400db4c:	4614      	mov	r4, r2
3400db4e:	2600      	movs	r6, #0
3400db50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3400db54:	f1b9 0901 	subs.w	r9, r9, #1
3400db58:	d505      	bpl.n	3400db66 <_fwalk_sglue+0x22>
3400db5a:	6824      	ldr	r4, [r4, #0]
3400db5c:	2c00      	cmp	r4, #0
3400db5e:	d1f7      	bne.n	3400db50 <_fwalk_sglue+0xc>
3400db60:	4630      	mov	r0, r6
3400db62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400db66:	89ab      	ldrh	r3, [r5, #12]
3400db68:	2b01      	cmp	r3, #1
3400db6a:	d907      	bls.n	3400db7c <_fwalk_sglue+0x38>
3400db6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3400db70:	3301      	adds	r3, #1
3400db72:	d003      	beq.n	3400db7c <_fwalk_sglue+0x38>
3400db74:	4629      	mov	r1, r5
3400db76:	4638      	mov	r0, r7
3400db78:	47c0      	blx	r8
3400db7a:	4306      	orrs	r6, r0
3400db7c:	3568      	adds	r5, #104	@ 0x68
3400db7e:	e7e9      	b.n	3400db54 <_fwalk_sglue+0x10>

3400db80 <iprintf>:
3400db80:	b40f      	push	{r0, r1, r2, r3}
3400db82:	b507      	push	{r0, r1, r2, lr}
3400db84:	4906      	ldr	r1, [pc, #24]	@ (3400dba0 <iprintf+0x20>)
3400db86:	ab04      	add	r3, sp, #16
3400db88:	6808      	ldr	r0, [r1, #0]
3400db8a:	f853 2b04 	ldr.w	r2, [r3], #4
3400db8e:	6881      	ldr	r1, [r0, #8]
3400db90:	9301      	str	r3, [sp, #4]
3400db92:	f001 fdbf 	bl	3400f714 <_vfiprintf_r>
3400db96:	b003      	add	sp, #12
3400db98:	f85d eb04 	ldr.w	lr, [sp], #4
3400db9c:	b004      	add	sp, #16
3400db9e:	4770      	bx	lr
3400dba0:	340121b4 	.word	0x340121b4

3400dba4 <_puts_r>:
3400dba4:	6a03      	ldr	r3, [r0, #32]
3400dba6:	b570      	push	{r4, r5, r6, lr}
3400dba8:	4605      	mov	r5, r0
3400dbaa:	460e      	mov	r6, r1
3400dbac:	6884      	ldr	r4, [r0, #8]
3400dbae:	b90b      	cbnz	r3, 3400dbb4 <_puts_r+0x10>
3400dbb0:	f7ff ff9e 	bl	3400daf0 <__sinit>
3400dbb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400dbb6:	07db      	lsls	r3, r3, #31
3400dbb8:	d405      	bmi.n	3400dbc6 <_puts_r+0x22>
3400dbba:	89a3      	ldrh	r3, [r4, #12]
3400dbbc:	0598      	lsls	r0, r3, #22
3400dbbe:	d402      	bmi.n	3400dbc6 <_puts_r+0x22>
3400dbc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400dbc2:	f000 fba4 	bl	3400e30e <__retarget_lock_acquire_recursive>
3400dbc6:	89a3      	ldrh	r3, [r4, #12]
3400dbc8:	0719      	lsls	r1, r3, #28
3400dbca:	d502      	bpl.n	3400dbd2 <_puts_r+0x2e>
3400dbcc:	6923      	ldr	r3, [r4, #16]
3400dbce:	2b00      	cmp	r3, #0
3400dbd0:	d135      	bne.n	3400dc3e <_puts_r+0x9a>
3400dbd2:	4621      	mov	r1, r4
3400dbd4:	4628      	mov	r0, r5
3400dbd6:	f000 f8c5 	bl	3400dd64 <__swsetup_r>
3400dbda:	b380      	cbz	r0, 3400dc3e <_puts_r+0x9a>
3400dbdc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3400dbe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400dbe2:	07da      	lsls	r2, r3, #31
3400dbe4:	d405      	bmi.n	3400dbf2 <_puts_r+0x4e>
3400dbe6:	89a3      	ldrh	r3, [r4, #12]
3400dbe8:	059b      	lsls	r3, r3, #22
3400dbea:	d402      	bmi.n	3400dbf2 <_puts_r+0x4e>
3400dbec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400dbee:	f000 fb8f 	bl	3400e310 <__retarget_lock_release_recursive>
3400dbf2:	4628      	mov	r0, r5
3400dbf4:	bd70      	pop	{r4, r5, r6, pc}
3400dbf6:	2b00      	cmp	r3, #0
3400dbf8:	da04      	bge.n	3400dc04 <_puts_r+0x60>
3400dbfa:	69a2      	ldr	r2, [r4, #24]
3400dbfc:	429a      	cmp	r2, r3
3400dbfe:	dc17      	bgt.n	3400dc30 <_puts_r+0x8c>
3400dc00:	290a      	cmp	r1, #10
3400dc02:	d015      	beq.n	3400dc30 <_puts_r+0x8c>
3400dc04:	6823      	ldr	r3, [r4, #0]
3400dc06:	1c5a      	adds	r2, r3, #1
3400dc08:	6022      	str	r2, [r4, #0]
3400dc0a:	7019      	strb	r1, [r3, #0]
3400dc0c:	68a3      	ldr	r3, [r4, #8]
3400dc0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400dc12:	3b01      	subs	r3, #1
3400dc14:	60a3      	str	r3, [r4, #8]
3400dc16:	2900      	cmp	r1, #0
3400dc18:	d1ed      	bne.n	3400dbf6 <_puts_r+0x52>
3400dc1a:	2b00      	cmp	r3, #0
3400dc1c:	da11      	bge.n	3400dc42 <_puts_r+0x9e>
3400dc1e:	4622      	mov	r2, r4
3400dc20:	210a      	movs	r1, #10
3400dc22:	4628      	mov	r0, r5
3400dc24:	f000 f85f 	bl	3400dce6 <__swbuf_r>
3400dc28:	3001      	adds	r0, #1
3400dc2a:	d0d7      	beq.n	3400dbdc <_puts_r+0x38>
3400dc2c:	250a      	movs	r5, #10
3400dc2e:	e7d7      	b.n	3400dbe0 <_puts_r+0x3c>
3400dc30:	4622      	mov	r2, r4
3400dc32:	4628      	mov	r0, r5
3400dc34:	f000 f857 	bl	3400dce6 <__swbuf_r>
3400dc38:	3001      	adds	r0, #1
3400dc3a:	d1e7      	bne.n	3400dc0c <_puts_r+0x68>
3400dc3c:	e7ce      	b.n	3400dbdc <_puts_r+0x38>
3400dc3e:	3e01      	subs	r6, #1
3400dc40:	e7e4      	b.n	3400dc0c <_puts_r+0x68>
3400dc42:	6823      	ldr	r3, [r4, #0]
3400dc44:	1c5a      	adds	r2, r3, #1
3400dc46:	6022      	str	r2, [r4, #0]
3400dc48:	220a      	movs	r2, #10
3400dc4a:	701a      	strb	r2, [r3, #0]
3400dc4c:	e7ee      	b.n	3400dc2c <_puts_r+0x88>
	...

3400dc50 <puts>:
3400dc50:	4b02      	ldr	r3, [pc, #8]	@ (3400dc5c <puts+0xc>)
3400dc52:	4601      	mov	r1, r0
3400dc54:	6818      	ldr	r0, [r3, #0]
3400dc56:	f7ff bfa5 	b.w	3400dba4 <_puts_r>
3400dc5a:	bf00      	nop
3400dc5c:	340121b4 	.word	0x340121b4

3400dc60 <__sread>:
3400dc60:	b510      	push	{r4, lr}
3400dc62:	460c      	mov	r4, r1
3400dc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400dc68:	f000 faf2 	bl	3400e250 <_read_r>
3400dc6c:	2800      	cmp	r0, #0
3400dc6e:	bfab      	itete	ge
3400dc70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3400dc72:	89a3      	ldrhlt	r3, [r4, #12]
3400dc74:	181b      	addge	r3, r3, r0
3400dc76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3400dc7a:	bfac      	ite	ge
3400dc7c:	6563      	strge	r3, [r4, #84]	@ 0x54
3400dc7e:	81a3      	strhlt	r3, [r4, #12]
3400dc80:	bd10      	pop	{r4, pc}

3400dc82 <__swrite>:
3400dc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400dc86:	461f      	mov	r7, r3
3400dc88:	898b      	ldrh	r3, [r1, #12]
3400dc8a:	4605      	mov	r5, r0
3400dc8c:	460c      	mov	r4, r1
3400dc8e:	05db      	lsls	r3, r3, #23
3400dc90:	4616      	mov	r6, r2
3400dc92:	d505      	bpl.n	3400dca0 <__swrite+0x1e>
3400dc94:	2302      	movs	r3, #2
3400dc96:	2200      	movs	r2, #0
3400dc98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400dc9c:	f000 fac6 	bl	3400e22c <_lseek_r>
3400dca0:	89a3      	ldrh	r3, [r4, #12]
3400dca2:	4632      	mov	r2, r6
3400dca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400dca8:	4628      	mov	r0, r5
3400dcaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400dcae:	81a3      	strh	r3, [r4, #12]
3400dcb0:	463b      	mov	r3, r7
3400dcb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3400dcb6:	f000 baed 	b.w	3400e294 <_write_r>

3400dcba <__sseek>:
3400dcba:	b510      	push	{r4, lr}
3400dcbc:	460c      	mov	r4, r1
3400dcbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400dcc2:	f000 fab3 	bl	3400e22c <_lseek_r>
3400dcc6:	1c43      	adds	r3, r0, #1
3400dcc8:	89a3      	ldrh	r3, [r4, #12]
3400dcca:	bf15      	itete	ne
3400dccc:	6560      	strne	r0, [r4, #84]	@ 0x54
3400dcce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3400dcd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3400dcd6:	81a3      	strheq	r3, [r4, #12]
3400dcd8:	bf18      	it	ne
3400dcda:	81a3      	strhne	r3, [r4, #12]
3400dcdc:	bd10      	pop	{r4, pc}

3400dcde <__sclose>:
3400dcde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400dce2:	f000 ba93 	b.w	3400e20c <_close_r>

3400dce6 <__swbuf_r>:
3400dce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400dce8:	460e      	mov	r6, r1
3400dcea:	4614      	mov	r4, r2
3400dcec:	4605      	mov	r5, r0
3400dcee:	b118      	cbz	r0, 3400dcf8 <__swbuf_r+0x12>
3400dcf0:	6a03      	ldr	r3, [r0, #32]
3400dcf2:	b90b      	cbnz	r3, 3400dcf8 <__swbuf_r+0x12>
3400dcf4:	f7ff fefc 	bl	3400daf0 <__sinit>
3400dcf8:	69a3      	ldr	r3, [r4, #24]
3400dcfa:	60a3      	str	r3, [r4, #8]
3400dcfc:	89a3      	ldrh	r3, [r4, #12]
3400dcfe:	071a      	lsls	r2, r3, #28
3400dd00:	d501      	bpl.n	3400dd06 <__swbuf_r+0x20>
3400dd02:	6923      	ldr	r3, [r4, #16]
3400dd04:	b943      	cbnz	r3, 3400dd18 <__swbuf_r+0x32>
3400dd06:	4621      	mov	r1, r4
3400dd08:	4628      	mov	r0, r5
3400dd0a:	f000 f82b 	bl	3400dd64 <__swsetup_r>
3400dd0e:	b118      	cbz	r0, 3400dd18 <__swbuf_r+0x32>
3400dd10:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3400dd14:	4638      	mov	r0, r7
3400dd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400dd18:	6823      	ldr	r3, [r4, #0]
3400dd1a:	b2f6      	uxtb	r6, r6
3400dd1c:	6922      	ldr	r2, [r4, #16]
3400dd1e:	4637      	mov	r7, r6
3400dd20:	1a98      	subs	r0, r3, r2
3400dd22:	6963      	ldr	r3, [r4, #20]
3400dd24:	4283      	cmp	r3, r0
3400dd26:	dc05      	bgt.n	3400dd34 <__swbuf_r+0x4e>
3400dd28:	4621      	mov	r1, r4
3400dd2a:	4628      	mov	r0, r5
3400dd2c:	f001 fe8e 	bl	3400fa4c <_fflush_r>
3400dd30:	2800      	cmp	r0, #0
3400dd32:	d1ed      	bne.n	3400dd10 <__swbuf_r+0x2a>
3400dd34:	68a3      	ldr	r3, [r4, #8]
3400dd36:	3b01      	subs	r3, #1
3400dd38:	60a3      	str	r3, [r4, #8]
3400dd3a:	6823      	ldr	r3, [r4, #0]
3400dd3c:	1c5a      	adds	r2, r3, #1
3400dd3e:	6022      	str	r2, [r4, #0]
3400dd40:	701e      	strb	r6, [r3, #0]
3400dd42:	1c43      	adds	r3, r0, #1
3400dd44:	6962      	ldr	r2, [r4, #20]
3400dd46:	429a      	cmp	r2, r3
3400dd48:	d004      	beq.n	3400dd54 <__swbuf_r+0x6e>
3400dd4a:	89a3      	ldrh	r3, [r4, #12]
3400dd4c:	07db      	lsls	r3, r3, #31
3400dd4e:	d5e1      	bpl.n	3400dd14 <__swbuf_r+0x2e>
3400dd50:	2e0a      	cmp	r6, #10
3400dd52:	d1df      	bne.n	3400dd14 <__swbuf_r+0x2e>
3400dd54:	4621      	mov	r1, r4
3400dd56:	4628      	mov	r0, r5
3400dd58:	f001 fe78 	bl	3400fa4c <_fflush_r>
3400dd5c:	2800      	cmp	r0, #0
3400dd5e:	d0d9      	beq.n	3400dd14 <__swbuf_r+0x2e>
3400dd60:	e7d6      	b.n	3400dd10 <__swbuf_r+0x2a>
	...

3400dd64 <__swsetup_r>:
3400dd64:	b538      	push	{r3, r4, r5, lr}
3400dd66:	4b29      	ldr	r3, [pc, #164]	@ (3400de0c <__swsetup_r+0xa8>)
3400dd68:	4605      	mov	r5, r0
3400dd6a:	460c      	mov	r4, r1
3400dd6c:	6818      	ldr	r0, [r3, #0]
3400dd6e:	b118      	cbz	r0, 3400dd78 <__swsetup_r+0x14>
3400dd70:	6a03      	ldr	r3, [r0, #32]
3400dd72:	b90b      	cbnz	r3, 3400dd78 <__swsetup_r+0x14>
3400dd74:	f7ff febc 	bl	3400daf0 <__sinit>
3400dd78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400dd7c:	0719      	lsls	r1, r3, #28
3400dd7e:	d422      	bmi.n	3400ddc6 <__swsetup_r+0x62>
3400dd80:	06da      	lsls	r2, r3, #27
3400dd82:	d407      	bmi.n	3400dd94 <__swsetup_r+0x30>
3400dd84:	2209      	movs	r2, #9
3400dd86:	602a      	str	r2, [r5, #0]
3400dd88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400dd8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400dd90:	81a3      	strh	r3, [r4, #12]
3400dd92:	e033      	b.n	3400ddfc <__swsetup_r+0x98>
3400dd94:	0758      	lsls	r0, r3, #29
3400dd96:	d512      	bpl.n	3400ddbe <__swsetup_r+0x5a>
3400dd98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400dd9a:	b141      	cbz	r1, 3400ddae <__swsetup_r+0x4a>
3400dd9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400dda0:	4299      	cmp	r1, r3
3400dda2:	d002      	beq.n	3400ddaa <__swsetup_r+0x46>
3400dda4:	4628      	mov	r0, r5
3400dda6:	f001 f8b9 	bl	3400ef1c <_free_r>
3400ddaa:	2300      	movs	r3, #0
3400ddac:	6363      	str	r3, [r4, #52]	@ 0x34
3400ddae:	89a3      	ldrh	r3, [r4, #12]
3400ddb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3400ddb4:	81a3      	strh	r3, [r4, #12]
3400ddb6:	2300      	movs	r3, #0
3400ddb8:	6063      	str	r3, [r4, #4]
3400ddba:	6923      	ldr	r3, [r4, #16]
3400ddbc:	6023      	str	r3, [r4, #0]
3400ddbe:	89a3      	ldrh	r3, [r4, #12]
3400ddc0:	f043 0308 	orr.w	r3, r3, #8
3400ddc4:	81a3      	strh	r3, [r4, #12]
3400ddc6:	6923      	ldr	r3, [r4, #16]
3400ddc8:	b94b      	cbnz	r3, 3400ddde <__swsetup_r+0x7a>
3400ddca:	89a3      	ldrh	r3, [r4, #12]
3400ddcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3400ddd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400ddd4:	d003      	beq.n	3400ddde <__swsetup_r+0x7a>
3400ddd6:	4621      	mov	r1, r4
3400ddd8:	4628      	mov	r0, r5
3400ddda:	f001 fe84 	bl	3400fae6 <__smakebuf_r>
3400ddde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400dde2:	f013 0201 	ands.w	r2, r3, #1
3400dde6:	d00a      	beq.n	3400ddfe <__swsetup_r+0x9a>
3400dde8:	2200      	movs	r2, #0
3400ddea:	60a2      	str	r2, [r4, #8]
3400ddec:	6962      	ldr	r2, [r4, #20]
3400ddee:	4252      	negs	r2, r2
3400ddf0:	61a2      	str	r2, [r4, #24]
3400ddf2:	6922      	ldr	r2, [r4, #16]
3400ddf4:	b942      	cbnz	r2, 3400de08 <__swsetup_r+0xa4>
3400ddf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3400ddfa:	d1c5      	bne.n	3400dd88 <__swsetup_r+0x24>
3400ddfc:	bd38      	pop	{r3, r4, r5, pc}
3400ddfe:	0799      	lsls	r1, r3, #30
3400de00:	bf58      	it	pl
3400de02:	6962      	ldrpl	r2, [r4, #20]
3400de04:	60a2      	str	r2, [r4, #8]
3400de06:	e7f4      	b.n	3400ddf2 <__swsetup_r+0x8e>
3400de08:	2000      	movs	r0, #0
3400de0a:	e7f7      	b.n	3400ddfc <__swsetup_r+0x98>
3400de0c:	340121b4 	.word	0x340121b4

3400de10 <memset>:
3400de10:	4402      	add	r2, r0
3400de12:	4603      	mov	r3, r0
3400de14:	4293      	cmp	r3, r2
3400de16:	d100      	bne.n	3400de1a <memset+0xa>
3400de18:	4770      	bx	lr
3400de1a:	f803 1b01 	strb.w	r1, [r3], #1
3400de1e:	e7f9      	b.n	3400de14 <memset+0x4>

3400de20 <_strerror_r>:
3400de20:	b510      	push	{r4, lr}
3400de22:	4604      	mov	r4, r0
3400de24:	4608      	mov	r0, r1
3400de26:	4611      	mov	r1, r2
3400de28:	461a      	mov	r2, r3
3400de2a:	288e      	cmp	r0, #142	@ 0x8e
3400de2c:	f200 8130 	bhi.w	3400e090 <_strerror_r+0x270>
3400de30:	e8df f010 	tbh	[pc, r0, lsl #1]
3400de34:	0138008f 	.word	0x0138008f
3400de38:	00940092 	.word	0x00940092
3400de3c:	00980096 	.word	0x00980096
3400de40:	009c009a 	.word	0x009c009a
3400de44:	00a2009e 	.word	0x00a2009e
3400de48:	00a800a4 	.word	0x00a800a4
3400de4c:	00ac00aa 	.word	0x00ac00aa
3400de50:	012e00ae 	.word	0x012e00ae
3400de54:	00b200b0 	.word	0x00b200b0
3400de58:	00b600b4 	.word	0x00b600b4
3400de5c:	00be00b8 	.word	0x00be00b8
3400de60:	00c600c0 	.word	0x00c600c0
3400de64:	00ca00c8 	.word	0x00ca00c8
3400de68:	00ce00cc 	.word	0x00ce00cc
3400de6c:	00d600d2 	.word	0x00d600d2
3400de70:	00da00d8 	.word	0x00da00d8
3400de74:	00de00dc 	.word	0x00de00dc
3400de78:	00e200e0 	.word	0x00e200e0
3400de7c:	012e00e4 	.word	0x012e00e4
3400de80:	012e012e 	.word	0x012e012e
3400de84:	012e012e 	.word	0x012e012e
3400de88:	012e012e 	.word	0x012e012e
3400de8c:	00e8012e 	.word	0x00e8012e
3400de90:	012e00ec 	.word	0x012e00ec
3400de94:	012e012e 	.word	0x012e012e
3400de98:	012e012e 	.word	0x012e012e
3400de9c:	012e012e 	.word	0x012e012e
3400dea0:	012e012e 	.word	0x012e012e
3400dea4:	012e012e 	.word	0x012e012e
3400dea8:	012e012e 	.word	0x012e012e
3400deac:	010800ee 	.word	0x010800ee
3400deb0:	00f200f0 	.word	0x00f200f0
3400deb4:	012e012e 	.word	0x012e012e
3400deb8:	00f4012e 	.word	0x00f4012e
3400debc:	012e012e 	.word	0x012e012e
3400dec0:	00f6012e 	.word	0x00f6012e
3400dec4:	012e012e 	.word	0x012e012e
3400dec8:	012e00fa 	.word	0x012e00fa
3400decc:	00fc012e 	.word	0x00fc012e
3400ded0:	012e012e 	.word	0x012e012e
3400ded4:	012e012e 	.word	0x012e012e
3400ded8:	012e012e 	.word	0x012e012e
3400dedc:	012e012e 	.word	0x012e012e
3400dee0:	012e012e 	.word	0x012e012e
3400dee4:	012e00fe 	.word	0x012e00fe
3400dee8:	01020100 	.word	0x01020100
3400deec:	012e0104 	.word	0x012e0104
3400def0:	0126012e 	.word	0x0126012e
3400def4:	012e012e 	.word	0x012e012e
3400def8:	012e012e 	.word	0x012e012e
3400defc:	012e012e 	.word	0x012e012e
3400df00:	012e012e 	.word	0x012e012e
3400df04:	01060114 	.word	0x01060114
3400df08:	010c010a 	.word	0x010c010a
3400df0c:	0110010e 	.word	0x0110010e
3400df10:	0112012e 	.word	0x0112012e
3400df14:	011a0116 	.word	0x011a0116
3400df18:	00c200ea 	.word	0x00c200ea
3400df1c:	00ba012c 	.word	0x00ba012c
3400df20:	00bc00d0 	.word	0x00bc00d0
3400df24:	00a600a0 	.word	0x00a600a0
3400df28:	00f8012a 	.word	0x00f8012a
3400df2c:	0118012e 	.word	0x0118012e
3400df30:	011e00c4 	.word	0x011e00c4
3400df34:	012e011c 	.word	0x012e011c
3400df38:	012e012e 	.word	0x012e012e
3400df3c:	012e012e 	.word	0x012e012e
3400df40:	012e00d4 	.word	0x012e00d4
3400df44:	012e012e 	.word	0x012e012e
3400df48:	012800e6 	.word	0x012800e6
3400df4c:	01220120 	.word	0x01220120
3400df50:	0124      	.short	0x0124
3400df52:	4b55      	ldr	r3, [pc, #340]	@ (3400e0a8 <_strerror_r+0x288>)
3400df54:	4618      	mov	r0, r3
3400df56:	bd10      	pop	{r4, pc}
3400df58:	4b54      	ldr	r3, [pc, #336]	@ (3400e0ac <_strerror_r+0x28c>)
3400df5a:	e7fb      	b.n	3400df54 <_strerror_r+0x134>
3400df5c:	4b54      	ldr	r3, [pc, #336]	@ (3400e0b0 <_strerror_r+0x290>)
3400df5e:	e7f9      	b.n	3400df54 <_strerror_r+0x134>
3400df60:	4b54      	ldr	r3, [pc, #336]	@ (3400e0b4 <_strerror_r+0x294>)
3400df62:	e7f7      	b.n	3400df54 <_strerror_r+0x134>
3400df64:	4b54      	ldr	r3, [pc, #336]	@ (3400e0b8 <_strerror_r+0x298>)
3400df66:	e7f5      	b.n	3400df54 <_strerror_r+0x134>
3400df68:	4b54      	ldr	r3, [pc, #336]	@ (3400e0bc <_strerror_r+0x29c>)
3400df6a:	e7f3      	b.n	3400df54 <_strerror_r+0x134>
3400df6c:	4b54      	ldr	r3, [pc, #336]	@ (3400e0c0 <_strerror_r+0x2a0>)
3400df6e:	e7f1      	b.n	3400df54 <_strerror_r+0x134>
3400df70:	4b54      	ldr	r3, [pc, #336]	@ (3400e0c4 <_strerror_r+0x2a4>)
3400df72:	e7ef      	b.n	3400df54 <_strerror_r+0x134>
3400df74:	4b54      	ldr	r3, [pc, #336]	@ (3400e0c8 <_strerror_r+0x2a8>)
3400df76:	e7ed      	b.n	3400df54 <_strerror_r+0x134>
3400df78:	4b54      	ldr	r3, [pc, #336]	@ (3400e0cc <_strerror_r+0x2ac>)
3400df7a:	e7eb      	b.n	3400df54 <_strerror_r+0x134>
3400df7c:	4b54      	ldr	r3, [pc, #336]	@ (3400e0d0 <_strerror_r+0x2b0>)
3400df7e:	e7e9      	b.n	3400df54 <_strerror_r+0x134>
3400df80:	4b54      	ldr	r3, [pc, #336]	@ (3400e0d4 <_strerror_r+0x2b4>)
3400df82:	e7e7      	b.n	3400df54 <_strerror_r+0x134>
3400df84:	4b54      	ldr	r3, [pc, #336]	@ (3400e0d8 <_strerror_r+0x2b8>)
3400df86:	e7e5      	b.n	3400df54 <_strerror_r+0x134>
3400df88:	4b54      	ldr	r3, [pc, #336]	@ (3400e0dc <_strerror_r+0x2bc>)
3400df8a:	e7e3      	b.n	3400df54 <_strerror_r+0x134>
3400df8c:	4b54      	ldr	r3, [pc, #336]	@ (3400e0e0 <_strerror_r+0x2c0>)
3400df8e:	e7e1      	b.n	3400df54 <_strerror_r+0x134>
3400df90:	4b54      	ldr	r3, [pc, #336]	@ (3400e0e4 <_strerror_r+0x2c4>)
3400df92:	e7df      	b.n	3400df54 <_strerror_r+0x134>
3400df94:	4b54      	ldr	r3, [pc, #336]	@ (3400e0e8 <_strerror_r+0x2c8>)
3400df96:	e7dd      	b.n	3400df54 <_strerror_r+0x134>
3400df98:	4b54      	ldr	r3, [pc, #336]	@ (3400e0ec <_strerror_r+0x2cc>)
3400df9a:	e7db      	b.n	3400df54 <_strerror_r+0x134>
3400df9c:	4b54      	ldr	r3, [pc, #336]	@ (3400e0f0 <_strerror_r+0x2d0>)
3400df9e:	e7d9      	b.n	3400df54 <_strerror_r+0x134>
3400dfa0:	4b54      	ldr	r3, [pc, #336]	@ (3400e0f4 <_strerror_r+0x2d4>)
3400dfa2:	e7d7      	b.n	3400df54 <_strerror_r+0x134>
3400dfa4:	4b54      	ldr	r3, [pc, #336]	@ (3400e0f8 <_strerror_r+0x2d8>)
3400dfa6:	e7d5      	b.n	3400df54 <_strerror_r+0x134>
3400dfa8:	4b54      	ldr	r3, [pc, #336]	@ (3400e0fc <_strerror_r+0x2dc>)
3400dfaa:	e7d3      	b.n	3400df54 <_strerror_r+0x134>
3400dfac:	4b54      	ldr	r3, [pc, #336]	@ (3400e100 <_strerror_r+0x2e0>)
3400dfae:	e7d1      	b.n	3400df54 <_strerror_r+0x134>
3400dfb0:	4b54      	ldr	r3, [pc, #336]	@ (3400e104 <_strerror_r+0x2e4>)
3400dfb2:	e7cf      	b.n	3400df54 <_strerror_r+0x134>
3400dfb4:	4b54      	ldr	r3, [pc, #336]	@ (3400e108 <_strerror_r+0x2e8>)
3400dfb6:	e7cd      	b.n	3400df54 <_strerror_r+0x134>
3400dfb8:	4b54      	ldr	r3, [pc, #336]	@ (3400e10c <_strerror_r+0x2ec>)
3400dfba:	e7cb      	b.n	3400df54 <_strerror_r+0x134>
3400dfbc:	4b54      	ldr	r3, [pc, #336]	@ (3400e110 <_strerror_r+0x2f0>)
3400dfbe:	e7c9      	b.n	3400df54 <_strerror_r+0x134>
3400dfc0:	4b54      	ldr	r3, [pc, #336]	@ (3400e114 <_strerror_r+0x2f4>)
3400dfc2:	e7c7      	b.n	3400df54 <_strerror_r+0x134>
3400dfc4:	4b54      	ldr	r3, [pc, #336]	@ (3400e118 <_strerror_r+0x2f8>)
3400dfc6:	e7c5      	b.n	3400df54 <_strerror_r+0x134>
3400dfc8:	4b54      	ldr	r3, [pc, #336]	@ (3400e11c <_strerror_r+0x2fc>)
3400dfca:	e7c3      	b.n	3400df54 <_strerror_r+0x134>
3400dfcc:	4b54      	ldr	r3, [pc, #336]	@ (3400e120 <_strerror_r+0x300>)
3400dfce:	e7c1      	b.n	3400df54 <_strerror_r+0x134>
3400dfd0:	4b54      	ldr	r3, [pc, #336]	@ (3400e124 <_strerror_r+0x304>)
3400dfd2:	e7bf      	b.n	3400df54 <_strerror_r+0x134>
3400dfd4:	4b54      	ldr	r3, [pc, #336]	@ (3400e128 <_strerror_r+0x308>)
3400dfd6:	e7bd      	b.n	3400df54 <_strerror_r+0x134>
3400dfd8:	4b54      	ldr	r3, [pc, #336]	@ (3400e12c <_strerror_r+0x30c>)
3400dfda:	e7bb      	b.n	3400df54 <_strerror_r+0x134>
3400dfdc:	4b54      	ldr	r3, [pc, #336]	@ (3400e130 <_strerror_r+0x310>)
3400dfde:	e7b9      	b.n	3400df54 <_strerror_r+0x134>
3400dfe0:	4b54      	ldr	r3, [pc, #336]	@ (3400e134 <_strerror_r+0x314>)
3400dfe2:	e7b7      	b.n	3400df54 <_strerror_r+0x134>
3400dfe4:	4b54      	ldr	r3, [pc, #336]	@ (3400e138 <_strerror_r+0x318>)
3400dfe6:	e7b5      	b.n	3400df54 <_strerror_r+0x134>
3400dfe8:	4b54      	ldr	r3, [pc, #336]	@ (3400e13c <_strerror_r+0x31c>)
3400dfea:	e7b3      	b.n	3400df54 <_strerror_r+0x134>
3400dfec:	4b54      	ldr	r3, [pc, #336]	@ (3400e140 <_strerror_r+0x320>)
3400dfee:	e7b1      	b.n	3400df54 <_strerror_r+0x134>
3400dff0:	4b54      	ldr	r3, [pc, #336]	@ (3400e144 <_strerror_r+0x324>)
3400dff2:	e7af      	b.n	3400df54 <_strerror_r+0x134>
3400dff4:	4b54      	ldr	r3, [pc, #336]	@ (3400e148 <_strerror_r+0x328>)
3400dff6:	e7ad      	b.n	3400df54 <_strerror_r+0x134>
3400dff8:	4b54      	ldr	r3, [pc, #336]	@ (3400e14c <_strerror_r+0x32c>)
3400dffa:	e7ab      	b.n	3400df54 <_strerror_r+0x134>
3400dffc:	4b54      	ldr	r3, [pc, #336]	@ (3400e150 <_strerror_r+0x330>)
3400dffe:	e7a9      	b.n	3400df54 <_strerror_r+0x134>
3400e000:	4b54      	ldr	r3, [pc, #336]	@ (3400e154 <_strerror_r+0x334>)
3400e002:	e7a7      	b.n	3400df54 <_strerror_r+0x134>
3400e004:	4b54      	ldr	r3, [pc, #336]	@ (3400e158 <_strerror_r+0x338>)
3400e006:	e7a5      	b.n	3400df54 <_strerror_r+0x134>
3400e008:	4b54      	ldr	r3, [pc, #336]	@ (3400e15c <_strerror_r+0x33c>)
3400e00a:	e7a3      	b.n	3400df54 <_strerror_r+0x134>
3400e00c:	4b54      	ldr	r3, [pc, #336]	@ (3400e160 <_strerror_r+0x340>)
3400e00e:	e7a1      	b.n	3400df54 <_strerror_r+0x134>
3400e010:	4b54      	ldr	r3, [pc, #336]	@ (3400e164 <_strerror_r+0x344>)
3400e012:	e79f      	b.n	3400df54 <_strerror_r+0x134>
3400e014:	4b54      	ldr	r3, [pc, #336]	@ (3400e168 <_strerror_r+0x348>)
3400e016:	e79d      	b.n	3400df54 <_strerror_r+0x134>
3400e018:	4b54      	ldr	r3, [pc, #336]	@ (3400e16c <_strerror_r+0x34c>)
3400e01a:	e79b      	b.n	3400df54 <_strerror_r+0x134>
3400e01c:	4b54      	ldr	r3, [pc, #336]	@ (3400e170 <_strerror_r+0x350>)
3400e01e:	e799      	b.n	3400df54 <_strerror_r+0x134>
3400e020:	4b54      	ldr	r3, [pc, #336]	@ (3400e174 <_strerror_r+0x354>)
3400e022:	e797      	b.n	3400df54 <_strerror_r+0x134>
3400e024:	4b54      	ldr	r3, [pc, #336]	@ (3400e178 <_strerror_r+0x358>)
3400e026:	e795      	b.n	3400df54 <_strerror_r+0x134>
3400e028:	4b54      	ldr	r3, [pc, #336]	@ (3400e17c <_strerror_r+0x35c>)
3400e02a:	e793      	b.n	3400df54 <_strerror_r+0x134>
3400e02c:	4b54      	ldr	r3, [pc, #336]	@ (3400e180 <_strerror_r+0x360>)
3400e02e:	e791      	b.n	3400df54 <_strerror_r+0x134>
3400e030:	4b54      	ldr	r3, [pc, #336]	@ (3400e184 <_strerror_r+0x364>)
3400e032:	e78f      	b.n	3400df54 <_strerror_r+0x134>
3400e034:	4b54      	ldr	r3, [pc, #336]	@ (3400e188 <_strerror_r+0x368>)
3400e036:	e78d      	b.n	3400df54 <_strerror_r+0x134>
3400e038:	4b54      	ldr	r3, [pc, #336]	@ (3400e18c <_strerror_r+0x36c>)
3400e03a:	e78b      	b.n	3400df54 <_strerror_r+0x134>
3400e03c:	4b54      	ldr	r3, [pc, #336]	@ (3400e190 <_strerror_r+0x370>)
3400e03e:	e789      	b.n	3400df54 <_strerror_r+0x134>
3400e040:	4b54      	ldr	r3, [pc, #336]	@ (3400e194 <_strerror_r+0x374>)
3400e042:	e787      	b.n	3400df54 <_strerror_r+0x134>
3400e044:	4b54      	ldr	r3, [pc, #336]	@ (3400e198 <_strerror_r+0x378>)
3400e046:	e785      	b.n	3400df54 <_strerror_r+0x134>
3400e048:	4b54      	ldr	r3, [pc, #336]	@ (3400e19c <_strerror_r+0x37c>)
3400e04a:	e783      	b.n	3400df54 <_strerror_r+0x134>
3400e04c:	4b54      	ldr	r3, [pc, #336]	@ (3400e1a0 <_strerror_r+0x380>)
3400e04e:	e781      	b.n	3400df54 <_strerror_r+0x134>
3400e050:	4b54      	ldr	r3, [pc, #336]	@ (3400e1a4 <_strerror_r+0x384>)
3400e052:	e77f      	b.n	3400df54 <_strerror_r+0x134>
3400e054:	4b54      	ldr	r3, [pc, #336]	@ (3400e1a8 <_strerror_r+0x388>)
3400e056:	e77d      	b.n	3400df54 <_strerror_r+0x134>
3400e058:	4b54      	ldr	r3, [pc, #336]	@ (3400e1ac <_strerror_r+0x38c>)
3400e05a:	e77b      	b.n	3400df54 <_strerror_r+0x134>
3400e05c:	4b54      	ldr	r3, [pc, #336]	@ (3400e1b0 <_strerror_r+0x390>)
3400e05e:	e779      	b.n	3400df54 <_strerror_r+0x134>
3400e060:	4b54      	ldr	r3, [pc, #336]	@ (3400e1b4 <_strerror_r+0x394>)
3400e062:	e777      	b.n	3400df54 <_strerror_r+0x134>
3400e064:	4b54      	ldr	r3, [pc, #336]	@ (3400e1b8 <_strerror_r+0x398>)
3400e066:	e775      	b.n	3400df54 <_strerror_r+0x134>
3400e068:	4b54      	ldr	r3, [pc, #336]	@ (3400e1bc <_strerror_r+0x39c>)
3400e06a:	e773      	b.n	3400df54 <_strerror_r+0x134>
3400e06c:	4b54      	ldr	r3, [pc, #336]	@ (3400e1c0 <_strerror_r+0x3a0>)
3400e06e:	e771      	b.n	3400df54 <_strerror_r+0x134>
3400e070:	4b54      	ldr	r3, [pc, #336]	@ (3400e1c4 <_strerror_r+0x3a4>)
3400e072:	e76f      	b.n	3400df54 <_strerror_r+0x134>
3400e074:	4b54      	ldr	r3, [pc, #336]	@ (3400e1c8 <_strerror_r+0x3a8>)
3400e076:	e76d      	b.n	3400df54 <_strerror_r+0x134>
3400e078:	4b54      	ldr	r3, [pc, #336]	@ (3400e1cc <_strerror_r+0x3ac>)
3400e07a:	e76b      	b.n	3400df54 <_strerror_r+0x134>
3400e07c:	4b54      	ldr	r3, [pc, #336]	@ (3400e1d0 <_strerror_r+0x3b0>)
3400e07e:	e769      	b.n	3400df54 <_strerror_r+0x134>
3400e080:	4b54      	ldr	r3, [pc, #336]	@ (3400e1d4 <_strerror_r+0x3b4>)
3400e082:	e767      	b.n	3400df54 <_strerror_r+0x134>
3400e084:	4b54      	ldr	r3, [pc, #336]	@ (3400e1d8 <_strerror_r+0x3b8>)
3400e086:	e765      	b.n	3400df54 <_strerror_r+0x134>
3400e088:	4b54      	ldr	r3, [pc, #336]	@ (3400e1dc <_strerror_r+0x3bc>)
3400e08a:	e763      	b.n	3400df54 <_strerror_r+0x134>
3400e08c:	4b54      	ldr	r3, [pc, #336]	@ (3400e1e0 <_strerror_r+0x3c0>)
3400e08e:	e761      	b.n	3400df54 <_strerror_r+0x134>
3400e090:	2a00      	cmp	r2, #0
3400e092:	bf08      	it	eq
3400e094:	4622      	moveq	r2, r4
3400e096:	f000 f8b3 	bl	3400e200 <_user_strerror>
3400e09a:	4b52      	ldr	r3, [pc, #328]	@ (3400e1e4 <_strerror_r+0x3c4>)
3400e09c:	2800      	cmp	r0, #0
3400e09e:	bf18      	it	ne
3400e0a0:	4603      	movne	r3, r0
3400e0a2:	e757      	b.n	3400df54 <_strerror_r+0x134>
3400e0a4:	4b50      	ldr	r3, [pc, #320]	@ (3400e1e8 <_strerror_r+0x3c8>)
3400e0a6:	e755      	b.n	3400df54 <_strerror_r+0x134>
3400e0a8:	340117af 	.word	0x340117af
3400e0ac:	340117c1 	.word	0x340117c1
3400e0b0:	340117db 	.word	0x340117db
3400e0b4:	340117eb 	.word	0x340117eb
3400e0b8:	34011803 	.word	0x34011803
3400e0bc:	3401180d 	.word	0x3401180d
3400e0c0:	34011827 	.word	0x34011827
3400e0c4:	34011839 	.word	0x34011839
3400e0c8:	3401184b 	.word	0x3401184b
3400e0cc:	34011864 	.word	0x34011864
3400e0d0:	34011874 	.word	0x34011874
3400e0d4:	34011880 	.word	0x34011880
3400e0d8:	3401189d 	.word	0x3401189d
3400e0dc:	340118af 	.word	0x340118af
3400e0e0:	340118c0 	.word	0x340118c0
3400e0e4:	340118d2 	.word	0x340118d2
3400e0e8:	340118de 	.word	0x340118de
3400e0ec:	340118f6 	.word	0x340118f6
3400e0f0:	34011902 	.word	0x34011902
3400e0f4:	34011914 	.word	0x34011914
3400e0f8:	34011923 	.word	0x34011923
3400e0fc:	34011933 	.word	0x34011933
3400e100:	34011940 	.word	0x34011940
3400e104:	3401195f 	.word	0x3401195f
3400e108:	3401196e 	.word	0x3401196e
3400e10c:	3401197f 	.word	0x3401197f
3400e110:	340119a3 	.word	0x340119a3
3400e114:	340119c1 	.word	0x340119c1
3400e118:	340119df 	.word	0x340119df
3400e11c:	340119ff 	.word	0x340119ff
3400e120:	34011a16 	.word	0x34011a16
3400e124:	34011a25 	.word	0x34011a25
3400e128:	34011a34 	.word	0x34011a34
3400e12c:	34011a48 	.word	0x34011a48
3400e130:	34011a60 	.word	0x34011a60
3400e134:	34011a6e 	.word	0x34011a6e
3400e138:	34011a7b 	.word	0x34011a7b
3400e13c:	34011a91 	.word	0x34011a91
3400e140:	34011aa0 	.word	0x34011aa0
3400e144:	34011aac 	.word	0x34011aac
3400e148:	34011adb 	.word	0x34011adb
3400e14c:	34011aec 	.word	0x34011aec
3400e150:	34011b07 	.word	0x34011b07
3400e154:	34011b1a 	.word	0x34011b1a
3400e158:	34011b30 	.word	0x34011b30
3400e15c:	34011b39 	.word	0x34011b39
3400e160:	34011b50 	.word	0x34011b50
3400e164:	34011b58 	.word	0x34011b58
3400e168:	34011b65 	.word	0x34011b65
3400e16c:	34011b7a 	.word	0x34011b7a
3400e170:	34011b8e 	.word	0x34011b8e
3400e174:	34011ba6 	.word	0x34011ba6
3400e178:	34011bb5 	.word	0x34011bb5
3400e17c:	34011bc6 	.word	0x34011bc6
3400e180:	34011bd9 	.word	0x34011bd9
3400e184:	34011be5 	.word	0x34011be5
3400e188:	34011bfe 	.word	0x34011bfe
3400e18c:	34011c12 	.word	0x34011c12
3400e190:	34011c2d 	.word	0x34011c2d
3400e194:	34011c45 	.word	0x34011c45
3400e198:	34011c5f 	.word	0x34011c5f
3400e19c:	34011c67 	.word	0x34011c67
3400e1a0:	34011c97 	.word	0x34011c97
3400e1a4:	34011cb6 	.word	0x34011cb6
3400e1a8:	34011cd5 	.word	0x34011cd5
3400e1ac:	34011cec 	.word	0x34011cec
3400e1b0:	34011cff 	.word	0x34011cff
3400e1b4:	34011d18 	.word	0x34011d18
3400e1b8:	34011d2f 	.word	0x34011d2f
3400e1bc:	34011d45 	.word	0x34011d45
3400e1c0:	34011d66 	.word	0x34011d66
3400e1c4:	34011d7e 	.word	0x34011d7e
3400e1c8:	34011d9a 	.word	0x34011d9a
3400e1cc:	34011dad 	.word	0x34011dad
3400e1d0:	34011dc3 	.word	0x34011dc3
3400e1d4:	34011dd7 	.word	0x34011dd7
3400e1d8:	34011df9 	.word	0x34011df9
3400e1dc:	34011e1f 	.word	0x34011e1f
3400e1e0:	34011e30 	.word	0x34011e30
3400e1e4:	34010c7d 	.word	0x34010c7d
3400e1e8:	340117b7 	.word	0x340117b7

3400e1ec <strerror>:
3400e1ec:	4601      	mov	r1, r0
3400e1ee:	2300      	movs	r3, #0
3400e1f0:	4802      	ldr	r0, [pc, #8]	@ (3400e1fc <strerror+0x10>)
3400e1f2:	461a      	mov	r2, r3
3400e1f4:	6800      	ldr	r0, [r0, #0]
3400e1f6:	f7ff be13 	b.w	3400de20 <_strerror_r>
3400e1fa:	bf00      	nop
3400e1fc:	340121b4 	.word	0x340121b4

3400e200 <_user_strerror>:
3400e200:	2000      	movs	r0, #0
3400e202:	4770      	bx	lr

3400e204 <_localeconv_r>:
3400e204:	4800      	ldr	r0, [pc, #0]	@ (3400e208 <_localeconv_r+0x4>)
3400e206:	4770      	bx	lr
3400e208:	340122f4 	.word	0x340122f4

3400e20c <_close_r>:
3400e20c:	b538      	push	{r3, r4, r5, lr}
3400e20e:	2300      	movs	r3, #0
3400e210:	4d05      	ldr	r5, [pc, #20]	@ (3400e228 <_close_r+0x1c>)
3400e212:	4604      	mov	r4, r0
3400e214:	4608      	mov	r0, r1
3400e216:	602b      	str	r3, [r5, #0]
3400e218:	f7f3 f843 	bl	340012a2 <_close>
3400e21c:	1c43      	adds	r3, r0, #1
3400e21e:	d102      	bne.n	3400e226 <_close_r+0x1a>
3400e220:	682b      	ldr	r3, [r5, #0]
3400e222:	b103      	cbz	r3, 3400e226 <_close_r+0x1a>
3400e224:	6023      	str	r3, [r4, #0]
3400e226:	bd38      	pop	{r3, r4, r5, pc}
3400e228:	34012d28 	.word	0x34012d28

3400e22c <_lseek_r>:
3400e22c:	b538      	push	{r3, r4, r5, lr}
3400e22e:	4604      	mov	r4, r0
3400e230:	4d06      	ldr	r5, [pc, #24]	@ (3400e24c <_lseek_r+0x20>)
3400e232:	4608      	mov	r0, r1
3400e234:	4611      	mov	r1, r2
3400e236:	2200      	movs	r2, #0
3400e238:	602a      	str	r2, [r5, #0]
3400e23a:	461a      	mov	r2, r3
3400e23c:	f7f3 f83b 	bl	340012b6 <_lseek>
3400e240:	1c43      	adds	r3, r0, #1
3400e242:	d102      	bne.n	3400e24a <_lseek_r+0x1e>
3400e244:	682b      	ldr	r3, [r5, #0]
3400e246:	b103      	cbz	r3, 3400e24a <_lseek_r+0x1e>
3400e248:	6023      	str	r3, [r4, #0]
3400e24a:	bd38      	pop	{r3, r4, r5, pc}
3400e24c:	34012d28 	.word	0x34012d28

3400e250 <_read_r>:
3400e250:	b538      	push	{r3, r4, r5, lr}
3400e252:	4604      	mov	r4, r0
3400e254:	4d06      	ldr	r5, [pc, #24]	@ (3400e270 <_read_r+0x20>)
3400e256:	4608      	mov	r0, r1
3400e258:	4611      	mov	r1, r2
3400e25a:	2200      	movs	r2, #0
3400e25c:	602a      	str	r2, [r5, #0]
3400e25e:	461a      	mov	r2, r3
3400e260:	f7f3 f811 	bl	34001286 <_read>
3400e264:	1c43      	adds	r3, r0, #1
3400e266:	d102      	bne.n	3400e26e <_read_r+0x1e>
3400e268:	682b      	ldr	r3, [r5, #0]
3400e26a:	b103      	cbz	r3, 3400e26e <_read_r+0x1e>
3400e26c:	6023      	str	r3, [r4, #0]
3400e26e:	bd38      	pop	{r3, r4, r5, pc}
3400e270:	34012d28 	.word	0x34012d28

3400e274 <_sbrk_r>:
3400e274:	b538      	push	{r3, r4, r5, lr}
3400e276:	2300      	movs	r3, #0
3400e278:	4d05      	ldr	r5, [pc, #20]	@ (3400e290 <_sbrk_r+0x1c>)
3400e27a:	4604      	mov	r4, r0
3400e27c:	4608      	mov	r0, r1
3400e27e:	602b      	str	r3, [r5, #0]
3400e280:	f001 fd08 	bl	3400fc94 <_sbrk>
3400e284:	1c43      	adds	r3, r0, #1
3400e286:	d102      	bne.n	3400e28e <_sbrk_r+0x1a>
3400e288:	682b      	ldr	r3, [r5, #0]
3400e28a:	b103      	cbz	r3, 3400e28e <_sbrk_r+0x1a>
3400e28c:	6023      	str	r3, [r4, #0]
3400e28e:	bd38      	pop	{r3, r4, r5, pc}
3400e290:	34012d28 	.word	0x34012d28

3400e294 <_write_r>:
3400e294:	b538      	push	{r3, r4, r5, lr}
3400e296:	4604      	mov	r4, r0
3400e298:	4d06      	ldr	r5, [pc, #24]	@ (3400e2b4 <_write_r+0x20>)
3400e29a:	4608      	mov	r0, r1
3400e29c:	4611      	mov	r1, r2
3400e29e:	2200      	movs	r2, #0
3400e2a0:	602a      	str	r2, [r5, #0]
3400e2a2:	461a      	mov	r2, r3
3400e2a4:	f7f2 ff3a 	bl	3400111c <_write>
3400e2a8:	1c43      	adds	r3, r0, #1
3400e2aa:	d102      	bne.n	3400e2b2 <_write_r+0x1e>
3400e2ac:	682b      	ldr	r3, [r5, #0]
3400e2ae:	b103      	cbz	r3, 3400e2b2 <_write_r+0x1e>
3400e2b0:	6023      	str	r3, [r4, #0]
3400e2b2:	bd38      	pop	{r3, r4, r5, pc}
3400e2b4:	34012d28 	.word	0x34012d28

3400e2b8 <__errno>:
3400e2b8:	4b01      	ldr	r3, [pc, #4]	@ (3400e2c0 <__errno+0x8>)
3400e2ba:	6818      	ldr	r0, [r3, #0]
3400e2bc:	4770      	bx	lr
3400e2be:	bf00      	nop
3400e2c0:	340121b4 	.word	0x340121b4

3400e2c4 <__libc_init_array>:
3400e2c4:	b570      	push	{r4, r5, r6, lr}
3400e2c6:	4d0d      	ldr	r5, [pc, #52]	@ (3400e2fc <__libc_init_array+0x38>)
3400e2c8:	2600      	movs	r6, #0
3400e2ca:	4c0d      	ldr	r4, [pc, #52]	@ (3400e300 <__libc_init_array+0x3c>)
3400e2cc:	1b64      	subs	r4, r4, r5
3400e2ce:	10a4      	asrs	r4, r4, #2
3400e2d0:	42a6      	cmp	r6, r4
3400e2d2:	d109      	bne.n	3400e2e8 <__libc_init_array+0x24>
3400e2d4:	4d0b      	ldr	r5, [pc, #44]	@ (3400e304 <__libc_init_array+0x40>)
3400e2d6:	2600      	movs	r6, #0
3400e2d8:	4c0b      	ldr	r4, [pc, #44]	@ (3400e308 <__libc_init_array+0x44>)
3400e2da:	f001 fce9 	bl	3400fcb0 <_init>
3400e2de:	1b64      	subs	r4, r4, r5
3400e2e0:	10a4      	asrs	r4, r4, #2
3400e2e2:	42a6      	cmp	r6, r4
3400e2e4:	d105      	bne.n	3400e2f2 <__libc_init_array+0x2e>
3400e2e6:	bd70      	pop	{r4, r5, r6, pc}
3400e2e8:	f855 3b04 	ldr.w	r3, [r5], #4
3400e2ec:	3601      	adds	r6, #1
3400e2ee:	4798      	blx	r3
3400e2f0:	e7ee      	b.n	3400e2d0 <__libc_init_array+0xc>
3400e2f2:	f855 3b04 	ldr.w	r3, [r5], #4
3400e2f6:	3601      	adds	r6, #1
3400e2f8:	4798      	blx	r3
3400e2fa:	e7f2      	b.n	3400e2e2 <__libc_init_array+0x1e>
3400e2fc:	3401214c 	.word	0x3401214c
3400e300:	3401214c 	.word	0x3401214c
3400e304:	3401214c 	.word	0x3401214c
3400e308:	34012150 	.word	0x34012150

3400e30c <__retarget_lock_init_recursive>:
3400e30c:	4770      	bx	lr

3400e30e <__retarget_lock_acquire_recursive>:
3400e30e:	4770      	bx	lr

3400e310 <__retarget_lock_release_recursive>:
3400e310:	4770      	bx	lr

3400e312 <memchr>:
3400e312:	b2c9      	uxtb	r1, r1
3400e314:	4603      	mov	r3, r0
3400e316:	4402      	add	r2, r0
3400e318:	b510      	push	{r4, lr}
3400e31a:	4293      	cmp	r3, r2
3400e31c:	4618      	mov	r0, r3
3400e31e:	d101      	bne.n	3400e324 <memchr+0x12>
3400e320:	2000      	movs	r0, #0
3400e322:	e003      	b.n	3400e32c <memchr+0x1a>
3400e324:	7804      	ldrb	r4, [r0, #0]
3400e326:	3301      	adds	r3, #1
3400e328:	428c      	cmp	r4, r1
3400e32a:	d1f6      	bne.n	3400e31a <memchr+0x8>
3400e32c:	bd10      	pop	{r4, pc}

3400e32e <memcpy>:
3400e32e:	440a      	add	r2, r1
3400e330:	1e43      	subs	r3, r0, #1
3400e332:	4291      	cmp	r1, r2
3400e334:	d100      	bne.n	3400e338 <memcpy+0xa>
3400e336:	4770      	bx	lr
3400e338:	b510      	push	{r4, lr}
3400e33a:	f811 4b01 	ldrb.w	r4, [r1], #1
3400e33e:	4291      	cmp	r1, r2
3400e340:	f803 4f01 	strb.w	r4, [r3, #1]!
3400e344:	d1f9      	bne.n	3400e33a <memcpy+0xc>
3400e346:	bd10      	pop	{r4, pc}

3400e348 <abort>:
3400e348:	2006      	movs	r0, #6
3400e34a:	b508      	push	{r3, lr}
3400e34c:	f001 fc30 	bl	3400fbb0 <raise>
3400e350:	2001      	movs	r0, #1
3400e352:	f7f2 ff92 	bl	3400127a <_exit>

3400e356 <quorem>:
3400e356:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e35a:	6903      	ldr	r3, [r0, #16]
3400e35c:	4607      	mov	r7, r0
3400e35e:	690c      	ldr	r4, [r1, #16]
3400e360:	42a3      	cmp	r3, r4
3400e362:	f2c0 8083 	blt.w	3400e46c <quorem+0x116>
3400e366:	3c01      	subs	r4, #1
3400e368:	f100 0514 	add.w	r5, r0, #20
3400e36c:	f101 0814 	add.w	r8, r1, #20
3400e370:	00a3      	lsls	r3, r4, #2
3400e372:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400e376:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3400e37a:	9300      	str	r3, [sp, #0]
3400e37c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400e380:	9301      	str	r3, [sp, #4]
3400e382:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3400e386:	3301      	adds	r3, #1
3400e388:	429a      	cmp	r2, r3
3400e38a:	fbb2 f6f3 	udiv	r6, r2, r3
3400e38e:	d331      	bcc.n	3400e3f4 <quorem+0x9e>
3400e390:	f04f 0a00 	mov.w	sl, #0
3400e394:	46c4      	mov	ip, r8
3400e396:	46ae      	mov	lr, r5
3400e398:	46d3      	mov	fp, sl
3400e39a:	f85c 3b04 	ldr.w	r3, [ip], #4
3400e39e:	b298      	uxth	r0, r3
3400e3a0:	45e1      	cmp	r9, ip
3400e3a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
3400e3a6:	fb06 a000 	mla	r0, r6, r0, sl
3400e3aa:	ea4f 4210 	mov.w	r2, r0, lsr #16
3400e3ae:	b280      	uxth	r0, r0
3400e3b0:	fb06 2303 	mla	r3, r6, r3, r2
3400e3b4:	f8de 2000 	ldr.w	r2, [lr]
3400e3b8:	b292      	uxth	r2, r2
3400e3ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400e3be:	eba2 0200 	sub.w	r2, r2, r0
3400e3c2:	b29b      	uxth	r3, r3
3400e3c4:	f8de 0000 	ldr.w	r0, [lr]
3400e3c8:	445a      	add	r2, fp
3400e3ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3400e3ce:	b292      	uxth	r2, r2
3400e3d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3400e3d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3400e3d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
3400e3dc:	f84e 2b04 	str.w	r2, [lr], #4
3400e3e0:	d2db      	bcs.n	3400e39a <quorem+0x44>
3400e3e2:	9b00      	ldr	r3, [sp, #0]
3400e3e4:	58eb      	ldr	r3, [r5, r3]
3400e3e6:	b92b      	cbnz	r3, 3400e3f4 <quorem+0x9e>
3400e3e8:	9b01      	ldr	r3, [sp, #4]
3400e3ea:	3b04      	subs	r3, #4
3400e3ec:	429d      	cmp	r5, r3
3400e3ee:	461a      	mov	r2, r3
3400e3f0:	d330      	bcc.n	3400e454 <quorem+0xfe>
3400e3f2:	613c      	str	r4, [r7, #16]
3400e3f4:	4638      	mov	r0, r7
3400e3f6:	f001 f857 	bl	3400f4a8 <__mcmp>
3400e3fa:	2800      	cmp	r0, #0
3400e3fc:	db26      	blt.n	3400e44c <quorem+0xf6>
3400e3fe:	4629      	mov	r1, r5
3400e400:	2000      	movs	r0, #0
3400e402:	f858 2b04 	ldr.w	r2, [r8], #4
3400e406:	f8d1 c000 	ldr.w	ip, [r1]
3400e40a:	fa1f fe82 	uxth.w	lr, r2
3400e40e:	45c1      	cmp	r9, r8
3400e410:	fa1f f38c 	uxth.w	r3, ip
3400e414:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400e418:	eba3 030e 	sub.w	r3, r3, lr
3400e41c:	4403      	add	r3, r0
3400e41e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3400e422:	b29b      	uxth	r3, r3
3400e424:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3400e428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400e42c:	ea4f 4022 	mov.w	r0, r2, asr #16
3400e430:	f841 3b04 	str.w	r3, [r1], #4
3400e434:	d2e5      	bcs.n	3400e402 <quorem+0xac>
3400e436:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400e43a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400e43e:	b922      	cbnz	r2, 3400e44a <quorem+0xf4>
3400e440:	3b04      	subs	r3, #4
3400e442:	429d      	cmp	r5, r3
3400e444:	461a      	mov	r2, r3
3400e446:	d30b      	bcc.n	3400e460 <quorem+0x10a>
3400e448:	613c      	str	r4, [r7, #16]
3400e44a:	3601      	adds	r6, #1
3400e44c:	4630      	mov	r0, r6
3400e44e:	b003      	add	sp, #12
3400e450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400e454:	6812      	ldr	r2, [r2, #0]
3400e456:	3b04      	subs	r3, #4
3400e458:	2a00      	cmp	r2, #0
3400e45a:	d1ca      	bne.n	3400e3f2 <quorem+0x9c>
3400e45c:	3c01      	subs	r4, #1
3400e45e:	e7c5      	b.n	3400e3ec <quorem+0x96>
3400e460:	6812      	ldr	r2, [r2, #0]
3400e462:	3b04      	subs	r3, #4
3400e464:	2a00      	cmp	r2, #0
3400e466:	d1ef      	bne.n	3400e448 <quorem+0xf2>
3400e468:	3c01      	subs	r4, #1
3400e46a:	e7ea      	b.n	3400e442 <quorem+0xec>
3400e46c:	2000      	movs	r0, #0
3400e46e:	e7ee      	b.n	3400e44e <quorem+0xf8>

3400e470 <_dtoa_r>:
3400e470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e474:	69c7      	ldr	r7, [r0, #28]
3400e476:	4681      	mov	r9, r0
3400e478:	ed2d 8b02 	vpush	{d8}
3400e47c:	b091      	sub	sp, #68	@ 0x44
3400e47e:	ec55 4b10 	vmov	r4, r5, d0
3400e482:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3400e484:	9107      	str	r1, [sp, #28]
3400e486:	9209      	str	r2, [sp, #36]	@ 0x24
3400e488:	930d      	str	r3, [sp, #52]	@ 0x34
3400e48a:	ed8d 0b02 	vstr	d0, [sp, #8]
3400e48e:	b97f      	cbnz	r7, 3400e4b0 <_dtoa_r+0x40>
3400e490:	2010      	movs	r0, #16
3400e492:	f7fe fdb1 	bl	3400cff8 <malloc>
3400e496:	4602      	mov	r2, r0
3400e498:	f8c9 001c 	str.w	r0, [r9, #28]
3400e49c:	b920      	cbnz	r0, 3400e4a8 <_dtoa_r+0x38>
3400e49e:	4ba0      	ldr	r3, [pc, #640]	@ (3400e720 <_dtoa_r+0x2b0>)
3400e4a0:	21ef      	movs	r1, #239	@ 0xef
3400e4a2:	48a0      	ldr	r0, [pc, #640]	@ (3400e724 <_dtoa_r+0x2b4>)
3400e4a4:	f7fe fd8a 	bl	3400cfbc <__assert_func>
3400e4a8:	e9c0 7701 	strd	r7, r7, [r0, #4]
3400e4ac:	6007      	str	r7, [r0, #0]
3400e4ae:	60c7      	str	r7, [r0, #12]
3400e4b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400e4b4:	6819      	ldr	r1, [r3, #0]
3400e4b6:	b159      	cbz	r1, 3400e4d0 <_dtoa_r+0x60>
3400e4b8:	685a      	ldr	r2, [r3, #4]
3400e4ba:	2301      	movs	r3, #1
3400e4bc:	4648      	mov	r0, r9
3400e4be:	4093      	lsls	r3, r2
3400e4c0:	604a      	str	r2, [r1, #4]
3400e4c2:	608b      	str	r3, [r1, #8]
3400e4c4:	f000 fdb4 	bl	3400f030 <_Bfree>
3400e4c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400e4cc:	2200      	movs	r2, #0
3400e4ce:	601a      	str	r2, [r3, #0]
3400e4d0:	1e2b      	subs	r3, r5, #0
3400e4d2:	bfb7      	itett	lt
3400e4d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3400e4d8:	2300      	movge	r3, #0
3400e4da:	2201      	movlt	r2, #1
3400e4dc:	9303      	strlt	r3, [sp, #12]
3400e4de:	bfac      	ite	ge
3400e4e0:	6033      	strge	r3, [r6, #0]
3400e4e2:	6032      	strlt	r2, [r6, #0]
3400e4e4:	4b90      	ldr	r3, [pc, #576]	@ (3400e728 <_dtoa_r+0x2b8>)
3400e4e6:	9e03      	ldr	r6, [sp, #12]
3400e4e8:	43b3      	bics	r3, r6
3400e4ea:	d110      	bne.n	3400e50e <_dtoa_r+0x9e>
3400e4ec:	f242 730f 	movw	r3, #9999	@ 0x270f
3400e4f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400e4f2:	6013      	str	r3, [r2, #0]
3400e4f4:	f3c6 0313 	ubfx	r3, r6, #0, #20
3400e4f8:	4323      	orrs	r3, r4
3400e4fa:	f000 84de 	beq.w	3400eeba <_dtoa_r+0xa4a>
3400e4fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400e500:	4f8a      	ldr	r7, [pc, #552]	@ (3400e72c <_dtoa_r+0x2bc>)
3400e502:	2b00      	cmp	r3, #0
3400e504:	f000 84e0 	beq.w	3400eec8 <_dtoa_r+0xa58>
3400e508:	1cfb      	adds	r3, r7, #3
3400e50a:	f000 bcdb 	b.w	3400eec4 <_dtoa_r+0xa54>
3400e50e:	ed9d 8b02 	vldr	d8, [sp, #8]
3400e512:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400e516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e51a:	d10a      	bne.n	3400e532 <_dtoa_r+0xc2>
3400e51c:	2301      	movs	r3, #1
3400e51e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400e520:	6013      	str	r3, [r2, #0]
3400e522:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400e524:	b113      	cbz	r3, 3400e52c <_dtoa_r+0xbc>
3400e526:	4b82      	ldr	r3, [pc, #520]	@ (3400e730 <_dtoa_r+0x2c0>)
3400e528:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400e52a:	6013      	str	r3, [r2, #0]
3400e52c:	4f81      	ldr	r7, [pc, #516]	@ (3400e734 <_dtoa_r+0x2c4>)
3400e52e:	f000 bccb 	b.w	3400eec8 <_dtoa_r+0xa58>
3400e532:	aa0e      	add	r2, sp, #56	@ 0x38
3400e534:	eeb0 0b48 	vmov.f64	d0, d8
3400e538:	a90f      	add	r1, sp, #60	@ 0x3c
3400e53a:	4648      	mov	r0, r9
3400e53c:	f001 f868 	bl	3400f610 <__d2b>
3400e540:	f3c6 530a 	ubfx	r3, r6, #20, #11
3400e544:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400e546:	9001      	str	r0, [sp, #4]
3400e548:	2b00      	cmp	r3, #0
3400e54a:	d045      	beq.n	3400e5d8 <_dtoa_r+0x168>
3400e54c:	ee18 1a90 	vmov	r1, s17
3400e550:	eeb0 7b48 	vmov.f64	d7, d8
3400e554:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3400e558:	2500      	movs	r5, #0
3400e55a:	f3c1 0113 	ubfx	r1, r1, #0, #20
3400e55e:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3400e562:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3400e566:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3400e56a:	ee07 1a90 	vmov	s15, r1
3400e56e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3400e708 <_dtoa_r+0x298>
3400e572:	ee37 7b46 	vsub.f64	d7, d7, d6
3400e576:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3400e710 <_dtoa_r+0x2a0>
3400e57a:	eea7 6b05 	vfma.f64	d6, d7, d5
3400e57e:	ee07 3a90 	vmov	s15, r3
3400e582:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3400e586:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3400e718 <_dtoa_r+0x2a8>
3400e58a:	eeb0 7b46 	vmov.f64	d7, d6
3400e58e:	eea4 7b05 	vfma.f64	d7, d4, d5
3400e592:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3400e596:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3400e59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e59e:	ee16 8a90 	vmov	r8, s13
3400e5a2:	d508      	bpl.n	3400e5b6 <_dtoa_r+0x146>
3400e5a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3400e5a8:	eeb4 6b47 	vcmp.f64	d6, d7
3400e5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e5b0:	bf18      	it	ne
3400e5b2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3400e5b6:	f1b8 0f16 	cmp.w	r8, #22
3400e5ba:	d82d      	bhi.n	3400e618 <_dtoa_r+0x1a8>
3400e5bc:	495e      	ldr	r1, [pc, #376]	@ (3400e738 <_dtoa_r+0x2c8>)
3400e5be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3400e5c2:	ed91 7b00 	vldr	d7, [r1]
3400e5c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
3400e5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e5ce:	d501      	bpl.n	3400e5d4 <_dtoa_r+0x164>
3400e5d0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400e5d4:	2100      	movs	r1, #0
3400e5d6:	e020      	b.n	3400e61a <_dtoa_r+0x1aa>
3400e5d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3400e5da:	2501      	movs	r5, #1
3400e5dc:	4413      	add	r3, r2
3400e5de:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3400e5e2:	2920      	cmp	r1, #32
3400e5e4:	bfc9      	itett	gt
3400e5e6:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3400e5ea:	f1c1 0120 	rsble	r1, r1, #32
3400e5ee:	408e      	lslgt	r6, r1
3400e5f0:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3400e5f4:	bfd8      	it	le
3400e5f6:	fa04 f101 	lslle.w	r1, r4, r1
3400e5fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3400e5fe:	bfc4      	itt	gt
3400e600:	fa24 f101 	lsrgt.w	r1, r4, r1
3400e604:	4331      	orrgt	r1, r6
3400e606:	ee07 1a90 	vmov	s15, r1
3400e60a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3400e60e:	ee17 1a90 	vmov	r1, s15
3400e612:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3400e616:	e7a6      	b.n	3400e566 <_dtoa_r+0xf6>
3400e618:	2101      	movs	r1, #1
3400e61a:	1ad2      	subs	r2, r2, r3
3400e61c:	910c      	str	r1, [sp, #48]	@ 0x30
3400e61e:	1e53      	subs	r3, r2, #1
3400e620:	9306      	str	r3, [sp, #24]
3400e622:	bf49      	itett	mi
3400e624:	f1c2 0301 	rsbmi	r3, r2, #1
3400e628:	2300      	movpl	r3, #0
3400e62a:	9305      	strmi	r3, [sp, #20]
3400e62c:	2300      	movmi	r3, #0
3400e62e:	bf54      	ite	pl
3400e630:	9305      	strpl	r3, [sp, #20]
3400e632:	9306      	strmi	r3, [sp, #24]
3400e634:	f1b8 0f00 	cmp.w	r8, #0
3400e638:	db16      	blt.n	3400e668 <_dtoa_r+0x1f8>
3400e63a:	9b06      	ldr	r3, [sp, #24]
3400e63c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3400e640:	4443      	add	r3, r8
3400e642:	9306      	str	r3, [sp, #24]
3400e644:	2300      	movs	r3, #0
3400e646:	9a07      	ldr	r2, [sp, #28]
3400e648:	2a09      	cmp	r2, #9
3400e64a:	d847      	bhi.n	3400e6dc <_dtoa_r+0x26c>
3400e64c:	2a05      	cmp	r2, #5
3400e64e:	bfc5      	ittet	gt
3400e650:	3a04      	subgt	r2, #4
3400e652:	2400      	movgt	r4, #0
3400e654:	2401      	movle	r4, #1
3400e656:	9207      	strgt	r2, [sp, #28]
3400e658:	9a07      	ldr	r2, [sp, #28]
3400e65a:	3a02      	subs	r2, #2
3400e65c:	2a03      	cmp	r2, #3
3400e65e:	d848      	bhi.n	3400e6f2 <_dtoa_r+0x282>
3400e660:	e8df f002 	tbb	[pc, r2]
3400e664:	3a2c2e0b 	.word	0x3a2c2e0b
3400e668:	9b05      	ldr	r3, [sp, #20]
3400e66a:	2200      	movs	r2, #0
3400e66c:	eba3 0308 	sub.w	r3, r3, r8
3400e670:	920a      	str	r2, [sp, #40]	@ 0x28
3400e672:	9305      	str	r3, [sp, #20]
3400e674:	f1c8 0300 	rsb	r3, r8, #0
3400e678:	e7e5      	b.n	3400e646 <_dtoa_r+0x1d6>
3400e67a:	2200      	movs	r2, #0
3400e67c:	9208      	str	r2, [sp, #32]
3400e67e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400e680:	2a00      	cmp	r2, #0
3400e682:	dc39      	bgt.n	3400e6f8 <_dtoa_r+0x288>
3400e684:	f04f 0b01 	mov.w	fp, #1
3400e688:	46da      	mov	sl, fp
3400e68a:	465a      	mov	r2, fp
3400e68c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3400e690:	f8d9 701c 	ldr.w	r7, [r9, #28]
3400e694:	2100      	movs	r1, #0
3400e696:	2004      	movs	r0, #4
3400e698:	f100 0614 	add.w	r6, r0, #20
3400e69c:	4296      	cmp	r6, r2
3400e69e:	d930      	bls.n	3400e702 <_dtoa_r+0x292>
3400e6a0:	6079      	str	r1, [r7, #4]
3400e6a2:	4648      	mov	r0, r9
3400e6a4:	9304      	str	r3, [sp, #16]
3400e6a6:	f000 fc83 	bl	3400efb0 <_Balloc>
3400e6aa:	9b04      	ldr	r3, [sp, #16]
3400e6ac:	4607      	mov	r7, r0
3400e6ae:	2800      	cmp	r0, #0
3400e6b0:	d146      	bne.n	3400e740 <_dtoa_r+0x2d0>
3400e6b2:	4b22      	ldr	r3, [pc, #136]	@ (3400e73c <_dtoa_r+0x2cc>)
3400e6b4:	4602      	mov	r2, r0
3400e6b6:	f240 11af 	movw	r1, #431	@ 0x1af
3400e6ba:	e6f2      	b.n	3400e4a2 <_dtoa_r+0x32>
3400e6bc:	2201      	movs	r2, #1
3400e6be:	e7dd      	b.n	3400e67c <_dtoa_r+0x20c>
3400e6c0:	2200      	movs	r2, #0
3400e6c2:	9208      	str	r2, [sp, #32]
3400e6c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400e6c6:	eb08 0b02 	add.w	fp, r8, r2
3400e6ca:	f10b 0a01 	add.w	sl, fp, #1
3400e6ce:	4652      	mov	r2, sl
3400e6d0:	2a01      	cmp	r2, #1
3400e6d2:	bfb8      	it	lt
3400e6d4:	2201      	movlt	r2, #1
3400e6d6:	e7db      	b.n	3400e690 <_dtoa_r+0x220>
3400e6d8:	2201      	movs	r2, #1
3400e6da:	e7f2      	b.n	3400e6c2 <_dtoa_r+0x252>
3400e6dc:	2401      	movs	r4, #1
3400e6de:	2200      	movs	r2, #0
3400e6e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
3400e6e4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3400e6e8:	2100      	movs	r1, #0
3400e6ea:	2212      	movs	r2, #18
3400e6ec:	46da      	mov	sl, fp
3400e6ee:	9109      	str	r1, [sp, #36]	@ 0x24
3400e6f0:	e7ce      	b.n	3400e690 <_dtoa_r+0x220>
3400e6f2:	2201      	movs	r2, #1
3400e6f4:	9208      	str	r2, [sp, #32]
3400e6f6:	e7f5      	b.n	3400e6e4 <_dtoa_r+0x274>
3400e6f8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
3400e6fc:	46da      	mov	sl, fp
3400e6fe:	465a      	mov	r2, fp
3400e700:	e7c6      	b.n	3400e690 <_dtoa_r+0x220>
3400e702:	3101      	adds	r1, #1
3400e704:	0040      	lsls	r0, r0, #1
3400e706:	e7c7      	b.n	3400e698 <_dtoa_r+0x228>
3400e708:	636f4361 	.word	0x636f4361
3400e70c:	3fd287a7 	.word	0x3fd287a7
3400e710:	8b60c8b3 	.word	0x8b60c8b3
3400e714:	3fc68a28 	.word	0x3fc68a28
3400e718:	509f79fb 	.word	0x509f79fb
3400e71c:	3fd34413 	.word	0x3fd34413
3400e720:	34011e52 	.word	0x34011e52
3400e724:	34011e69 	.word	0x34011e69
3400e728:	7ff00000 	.word	0x7ff00000
3400e72c:	34011e4e 	.word	0x34011e4e
3400e730:	34010ea8 	.word	0x34010ea8
3400e734:	34010ea7 	.word	0x34010ea7
3400e738:	34011f60 	.word	0x34011f60
3400e73c:	34011ec1 	.word	0x34011ec1
3400e740:	f8d9 201c 	ldr.w	r2, [r9, #28]
3400e744:	f1ba 0f0e 	cmp.w	sl, #14
3400e748:	6010      	str	r0, [r2, #0]
3400e74a:	d86f      	bhi.n	3400e82c <_dtoa_r+0x3bc>
3400e74c:	2c00      	cmp	r4, #0
3400e74e:	d06d      	beq.n	3400e82c <_dtoa_r+0x3bc>
3400e750:	f1b8 0f00 	cmp.w	r8, #0
3400e754:	f340 80c2 	ble.w	3400e8dc <_dtoa_r+0x46c>
3400e758:	f008 010f 	and.w	r1, r8, #15
3400e75c:	4ac9      	ldr	r2, [pc, #804]	@ (3400ea84 <_dtoa_r+0x614>)
3400e75e:	f418 7f80 	tst.w	r8, #256	@ 0x100
3400e762:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3400e766:	ea4f 1128 	mov.w	r1, r8, asr #4
3400e76a:	ed92 7b00 	vldr	d7, [r2]
3400e76e:	f000 80a9 	beq.w	3400e8c4 <_dtoa_r+0x454>
3400e772:	4ac5      	ldr	r2, [pc, #788]	@ (3400ea88 <_dtoa_r+0x618>)
3400e774:	f001 010f 	and.w	r1, r1, #15
3400e778:	ed92 6b08 	vldr	d6, [r2, #32]
3400e77c:	2203      	movs	r2, #3
3400e77e:	ee88 6b06 	vdiv.f64	d6, d8, d6
3400e782:	ed8d 6b02 	vstr	d6, [sp, #8]
3400e786:	48c0      	ldr	r0, [pc, #768]	@ (3400ea88 <_dtoa_r+0x618>)
3400e788:	2900      	cmp	r1, #0
3400e78a:	f040 809d 	bne.w	3400e8c8 <_dtoa_r+0x458>
3400e78e:	ed9d 6b02 	vldr	d6, [sp, #8]
3400e792:	ee86 7b07 	vdiv.f64	d7, d6, d7
3400e796:	ed8d 7b02 	vstr	d7, [sp, #8]
3400e79a:	990c      	ldr	r1, [sp, #48]	@ 0x30
3400e79c:	ed9d 7b02 	vldr	d7, [sp, #8]
3400e7a0:	2900      	cmp	r1, #0
3400e7a2:	f000 80c1 	beq.w	3400e928 <_dtoa_r+0x4b8>
3400e7a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3400e7aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400e7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e7b2:	f140 80b9 	bpl.w	3400e928 <_dtoa_r+0x4b8>
3400e7b6:	f1ba 0f00 	cmp.w	sl, #0
3400e7ba:	f000 80b5 	beq.w	3400e928 <_dtoa_r+0x4b8>
3400e7be:	f1bb 0f00 	cmp.w	fp, #0
3400e7c2:	dd31      	ble.n	3400e828 <_dtoa_r+0x3b8>
3400e7c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3400e7c8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3400e7cc:	3201      	adds	r2, #1
3400e7ce:	465c      	mov	r4, fp
3400e7d0:	9104      	str	r1, [sp, #16]
3400e7d2:	ee27 7b06 	vmul.f64	d7, d7, d6
3400e7d6:	ed8d 7b02 	vstr	d7, [sp, #8]
3400e7da:	ee07 2a90 	vmov	s15, r2
3400e7de:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3400e7e2:	ed9d 6b02 	vldr	d6, [sp, #8]
3400e7e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3400e7ea:	eea7 5b06 	vfma.f64	d5, d7, d6
3400e7ee:	ee15 2a90 	vmov	r2, s11
3400e7f2:	ec51 0b15 	vmov	r0, r1, d5
3400e7f6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3400e7fa:	2c00      	cmp	r4, #0
3400e7fc:	f040 8098 	bne.w	3400e930 <_dtoa_r+0x4c0>
3400e800:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400e804:	ee36 6b47 	vsub.f64	d6, d6, d7
3400e808:	ec41 0b17 	vmov	d7, r0, r1
3400e80c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400e810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e814:	f300 8261 	bgt.w	3400ecda <_dtoa_r+0x86a>
3400e818:	eeb1 7b47 	vneg.f64	d7, d7
3400e81c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400e820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e824:	f100 80f5 	bmi.w	3400ea12 <_dtoa_r+0x5a2>
3400e828:	ed8d 8b02 	vstr	d8, [sp, #8]
3400e82c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3400e82e:	2a00      	cmp	r2, #0
3400e830:	f2c0 812c 	blt.w	3400ea8c <_dtoa_r+0x61c>
3400e834:	f1b8 0f0e 	cmp.w	r8, #14
3400e838:	f300 8128 	bgt.w	3400ea8c <_dtoa_r+0x61c>
3400e83c:	4b91      	ldr	r3, [pc, #580]	@ (3400ea84 <_dtoa_r+0x614>)
3400e83e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3400e842:	ed93 6b00 	vldr	d6, [r3]
3400e846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e848:	2b00      	cmp	r3, #0
3400e84a:	da03      	bge.n	3400e854 <_dtoa_r+0x3e4>
3400e84c:	f1ba 0f00 	cmp.w	sl, #0
3400e850:	f340 80d2 	ble.w	3400e9f8 <_dtoa_r+0x588>
3400e854:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3400e858:	463e      	mov	r6, r7
3400e85a:	ed9d 7b02 	vldr	d7, [sp, #8]
3400e85e:	ee87 5b06 	vdiv.f64	d5, d7, d6
3400e862:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3400e866:	ee15 3a10 	vmov	r3, s10
3400e86a:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3400e86e:	3330      	adds	r3, #48	@ 0x30
3400e870:	eea3 7b46 	vfms.f64	d7, d3, d6
3400e874:	f806 3b01 	strb.w	r3, [r6], #1
3400e878:	1bf3      	subs	r3, r6, r7
3400e87a:	459a      	cmp	sl, r3
3400e87c:	f040 80f8 	bne.w	3400ea70 <_dtoa_r+0x600>
3400e880:	ee37 7b07 	vadd.f64	d7, d7, d7
3400e884:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400e888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e88c:	f300 80dd 	bgt.w	3400ea4a <_dtoa_r+0x5da>
3400e890:	eeb4 7b46 	vcmp.f64	d7, d6
3400e894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e898:	d104      	bne.n	3400e8a4 <_dtoa_r+0x434>
3400e89a:	ee15 3a10 	vmov	r3, s10
3400e89e:	07db      	lsls	r3, r3, #31
3400e8a0:	f100 80d3 	bmi.w	3400ea4a <_dtoa_r+0x5da>
3400e8a4:	9901      	ldr	r1, [sp, #4]
3400e8a6:	4648      	mov	r0, r9
3400e8a8:	f000 fbc2 	bl	3400f030 <_Bfree>
3400e8ac:	2300      	movs	r3, #0
3400e8ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400e8b0:	7033      	strb	r3, [r6, #0]
3400e8b2:	f108 0301 	add.w	r3, r8, #1
3400e8b6:	6013      	str	r3, [r2, #0]
3400e8b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400e8ba:	2b00      	cmp	r3, #0
3400e8bc:	f000 8304 	beq.w	3400eec8 <_dtoa_r+0xa58>
3400e8c0:	601e      	str	r6, [r3, #0]
3400e8c2:	e301      	b.n	3400eec8 <_dtoa_r+0xa58>
3400e8c4:	2202      	movs	r2, #2
3400e8c6:	e75e      	b.n	3400e786 <_dtoa_r+0x316>
3400e8c8:	07cc      	lsls	r4, r1, #31
3400e8ca:	d504      	bpl.n	3400e8d6 <_dtoa_r+0x466>
3400e8cc:	3201      	adds	r2, #1
3400e8ce:	ed90 6b00 	vldr	d6, [r0]
3400e8d2:	ee27 7b06 	vmul.f64	d7, d7, d6
3400e8d6:	1049      	asrs	r1, r1, #1
3400e8d8:	3008      	adds	r0, #8
3400e8da:	e755      	b.n	3400e788 <_dtoa_r+0x318>
3400e8dc:	d022      	beq.n	3400e924 <_dtoa_r+0x4b4>
3400e8de:	f1c8 0100 	rsb	r1, r8, #0
3400e8e2:	4a68      	ldr	r2, [pc, #416]	@ (3400ea84 <_dtoa_r+0x614>)
3400e8e4:	2400      	movs	r4, #0
3400e8e6:	f001 000f 	and.w	r0, r1, #15
3400e8ea:	1109      	asrs	r1, r1, #4
3400e8ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3400e8f0:	4865      	ldr	r0, [pc, #404]	@ (3400ea88 <_dtoa_r+0x618>)
3400e8f2:	ed92 7b00 	vldr	d7, [r2]
3400e8f6:	2202      	movs	r2, #2
3400e8f8:	ee28 7b07 	vmul.f64	d7, d8, d7
3400e8fc:	ed8d 7b02 	vstr	d7, [sp, #8]
3400e900:	b929      	cbnz	r1, 3400e90e <_dtoa_r+0x49e>
3400e902:	2c00      	cmp	r4, #0
3400e904:	f43f af49 	beq.w	3400e79a <_dtoa_r+0x32a>
3400e908:	ed8d 7b02 	vstr	d7, [sp, #8]
3400e90c:	e745      	b.n	3400e79a <_dtoa_r+0x32a>
3400e90e:	07ce      	lsls	r6, r1, #31
3400e910:	d505      	bpl.n	3400e91e <_dtoa_r+0x4ae>
3400e912:	3201      	adds	r2, #1
3400e914:	2401      	movs	r4, #1
3400e916:	ed90 6b00 	vldr	d6, [r0]
3400e91a:	ee27 7b06 	vmul.f64	d7, d7, d6
3400e91e:	1049      	asrs	r1, r1, #1
3400e920:	3008      	adds	r0, #8
3400e922:	e7ed      	b.n	3400e900 <_dtoa_r+0x490>
3400e924:	2202      	movs	r2, #2
3400e926:	e738      	b.n	3400e79a <_dtoa_r+0x32a>
3400e928:	4654      	mov	r4, sl
3400e92a:	f8cd 8010 	str.w	r8, [sp, #16]
3400e92e:	e754      	b.n	3400e7da <_dtoa_r+0x36a>
3400e930:	4a54      	ldr	r2, [pc, #336]	@ (3400ea84 <_dtoa_r+0x614>)
3400e932:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3400e936:	443c      	add	r4, r7
3400e938:	ed12 4b02 	vldr	d4, [r2, #-8]
3400e93c:	9a08      	ldr	r2, [sp, #32]
3400e93e:	ec41 0b17 	vmov	d7, r0, r1
3400e942:	b34a      	cbz	r2, 3400e998 <_dtoa_r+0x528>
3400e944:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3400e948:	463e      	mov	r6, r7
3400e94a:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3400e94e:	ee83 5b04 	vdiv.f64	d5, d3, d4
3400e952:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400e956:	ee35 7b47 	vsub.f64	d7, d5, d7
3400e95a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400e95e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400e962:	ee14 2a90 	vmov	r2, s9
3400e966:	3230      	adds	r2, #48	@ 0x30
3400e968:	ee36 6b45 	vsub.f64	d6, d6, d5
3400e96c:	f806 2b01 	strb.w	r2, [r6], #1
3400e970:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400e974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e978:	d438      	bmi.n	3400e9ec <_dtoa_r+0x57c>
3400e97a:	ee32 5b46 	vsub.f64	d5, d2, d6
3400e97e:	eeb4 5bc7 	vcmpe.f64	d5, d7
3400e982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e986:	d462      	bmi.n	3400ea4e <_dtoa_r+0x5de>
3400e988:	42a6      	cmp	r6, r4
3400e98a:	f43f af4d 	beq.w	3400e828 <_dtoa_r+0x3b8>
3400e98e:	ee27 7b03 	vmul.f64	d7, d7, d3
3400e992:	ee26 6b03 	vmul.f64	d6, d6, d3
3400e996:	e7e0      	b.n	3400e95a <_dtoa_r+0x4ea>
3400e998:	ee27 7b04 	vmul.f64	d7, d7, d4
3400e99c:	4621      	mov	r1, r4
3400e99e:	463e      	mov	r6, r7
3400e9a0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400e9a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400e9a8:	ee14 2a90 	vmov	r2, s9
3400e9ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400e9b0:	3230      	adds	r2, #48	@ 0x30
3400e9b2:	ee36 6b45 	vsub.f64	d6, d6, d5
3400e9b6:	f806 2b01 	strb.w	r2, [r6], #1
3400e9ba:	42a6      	cmp	r6, r4
3400e9bc:	d119      	bne.n	3400e9f2 <_dtoa_r+0x582>
3400e9be:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3400e9c2:	ee37 4b05 	vadd.f64	d4, d7, d5
3400e9c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
3400e9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e9ce:	dc3e      	bgt.n	3400ea4e <_dtoa_r+0x5de>
3400e9d0:	ee35 5b47 	vsub.f64	d5, d5, d7
3400e9d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
3400e9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e9dc:	f57f af24 	bpl.w	3400e828 <_dtoa_r+0x3b8>
3400e9e0:	460e      	mov	r6, r1
3400e9e2:	3901      	subs	r1, #1
3400e9e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3400e9e8:	2b30      	cmp	r3, #48	@ 0x30
3400e9ea:	d0f9      	beq.n	3400e9e0 <_dtoa_r+0x570>
3400e9ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
3400e9f0:	e758      	b.n	3400e8a4 <_dtoa_r+0x434>
3400e9f2:	ee26 6b03 	vmul.f64	d6, d6, d3
3400e9f6:	e7d5      	b.n	3400e9a4 <_dtoa_r+0x534>
3400e9f8:	d10b      	bne.n	3400ea12 <_dtoa_r+0x5a2>
3400e9fa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400e9fe:	ee26 6b07 	vmul.f64	d6, d6, d7
3400ea02:	ed9d 7b02 	vldr	d7, [sp, #8]
3400ea06:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400ea0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400ea0e:	f2c0 8161 	blt.w	3400ecd4 <_dtoa_r+0x864>
3400ea12:	2400      	movs	r4, #0
3400ea14:	4625      	mov	r5, r4
3400ea16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400ea18:	463e      	mov	r6, r7
3400ea1a:	43db      	mvns	r3, r3
3400ea1c:	9304      	str	r3, [sp, #16]
3400ea1e:	f04f 0800 	mov.w	r8, #0
3400ea22:	4621      	mov	r1, r4
3400ea24:	4648      	mov	r0, r9
3400ea26:	f000 fb03 	bl	3400f030 <_Bfree>
3400ea2a:	2d00      	cmp	r5, #0
3400ea2c:	d0de      	beq.n	3400e9ec <_dtoa_r+0x57c>
3400ea2e:	f1b8 0f00 	cmp.w	r8, #0
3400ea32:	d005      	beq.n	3400ea40 <_dtoa_r+0x5d0>
3400ea34:	45a8      	cmp	r8, r5
3400ea36:	d003      	beq.n	3400ea40 <_dtoa_r+0x5d0>
3400ea38:	4641      	mov	r1, r8
3400ea3a:	4648      	mov	r0, r9
3400ea3c:	f000 faf8 	bl	3400f030 <_Bfree>
3400ea40:	4629      	mov	r1, r5
3400ea42:	4648      	mov	r0, r9
3400ea44:	f000 faf4 	bl	3400f030 <_Bfree>
3400ea48:	e7d0      	b.n	3400e9ec <_dtoa_r+0x57c>
3400ea4a:	f8cd 8010 	str.w	r8, [sp, #16]
3400ea4e:	4633      	mov	r3, r6
3400ea50:	461e      	mov	r6, r3
3400ea52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400ea56:	2a39      	cmp	r2, #57	@ 0x39
3400ea58:	d106      	bne.n	3400ea68 <_dtoa_r+0x5f8>
3400ea5a:	429f      	cmp	r7, r3
3400ea5c:	d1f8      	bne.n	3400ea50 <_dtoa_r+0x5e0>
3400ea5e:	9a04      	ldr	r2, [sp, #16]
3400ea60:	3201      	adds	r2, #1
3400ea62:	9204      	str	r2, [sp, #16]
3400ea64:	2230      	movs	r2, #48	@ 0x30
3400ea66:	703a      	strb	r2, [r7, #0]
3400ea68:	781a      	ldrb	r2, [r3, #0]
3400ea6a:	3201      	adds	r2, #1
3400ea6c:	701a      	strb	r2, [r3, #0]
3400ea6e:	e7bd      	b.n	3400e9ec <_dtoa_r+0x57c>
3400ea70:	ee27 7b04 	vmul.f64	d7, d7, d4
3400ea74:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400ea78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400ea7c:	f47f aeef 	bne.w	3400e85e <_dtoa_r+0x3ee>
3400ea80:	e710      	b.n	3400e8a4 <_dtoa_r+0x434>
3400ea82:	bf00      	nop
3400ea84:	34011f60 	.word	0x34011f60
3400ea88:	34011f38 	.word	0x34011f38
3400ea8c:	9908      	ldr	r1, [sp, #32]
3400ea8e:	2900      	cmp	r1, #0
3400ea90:	f000 80e3 	beq.w	3400ec5a <_dtoa_r+0x7ea>
3400ea94:	9907      	ldr	r1, [sp, #28]
3400ea96:	2901      	cmp	r1, #1
3400ea98:	f300 80c8 	bgt.w	3400ec2c <_dtoa_r+0x7bc>
3400ea9c:	2d00      	cmp	r5, #0
3400ea9e:	f000 80c1 	beq.w	3400ec24 <_dtoa_r+0x7b4>
3400eaa2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3400eaa6:	461c      	mov	r4, r3
3400eaa8:	9e05      	ldr	r6, [sp, #20]
3400eaaa:	9304      	str	r3, [sp, #16]
3400eaac:	2101      	movs	r1, #1
3400eaae:	9b05      	ldr	r3, [sp, #20]
3400eab0:	4648      	mov	r0, r9
3400eab2:	4413      	add	r3, r2
3400eab4:	9305      	str	r3, [sp, #20]
3400eab6:	9b06      	ldr	r3, [sp, #24]
3400eab8:	4413      	add	r3, r2
3400eaba:	9306      	str	r3, [sp, #24]
3400eabc:	f000 fb6e 	bl	3400f19c <__i2b>
3400eac0:	9b04      	ldr	r3, [sp, #16]
3400eac2:	4605      	mov	r5, r0
3400eac4:	b166      	cbz	r6, 3400eae0 <_dtoa_r+0x670>
3400eac6:	9a06      	ldr	r2, [sp, #24]
3400eac8:	2a00      	cmp	r2, #0
3400eaca:	dd09      	ble.n	3400eae0 <_dtoa_r+0x670>
3400eacc:	42b2      	cmp	r2, r6
3400eace:	9905      	ldr	r1, [sp, #20]
3400ead0:	bfa8      	it	ge
3400ead2:	4632      	movge	r2, r6
3400ead4:	1a89      	subs	r1, r1, r2
3400ead6:	1ab6      	subs	r6, r6, r2
3400ead8:	9105      	str	r1, [sp, #20]
3400eada:	9906      	ldr	r1, [sp, #24]
3400eadc:	1a8a      	subs	r2, r1, r2
3400eade:	9206      	str	r2, [sp, #24]
3400eae0:	b1fb      	cbz	r3, 3400eb22 <_dtoa_r+0x6b2>
3400eae2:	9a08      	ldr	r2, [sp, #32]
3400eae4:	2a00      	cmp	r2, #0
3400eae6:	f000 80bc 	beq.w	3400ec62 <_dtoa_r+0x7f2>
3400eaea:	b19c      	cbz	r4, 3400eb14 <_dtoa_r+0x6a4>
3400eaec:	4629      	mov	r1, r5
3400eaee:	4622      	mov	r2, r4
3400eaf0:	4648      	mov	r0, r9
3400eaf2:	930b      	str	r3, [sp, #44]	@ 0x2c
3400eaf4:	f000 fc12 	bl	3400f31c <__pow5mult>
3400eaf8:	9a01      	ldr	r2, [sp, #4]
3400eafa:	4601      	mov	r1, r0
3400eafc:	4605      	mov	r5, r0
3400eafe:	4648      	mov	r0, r9
3400eb00:	f000 fb62 	bl	3400f1c8 <__multiply>
3400eb04:	9901      	ldr	r1, [sp, #4]
3400eb06:	9004      	str	r0, [sp, #16]
3400eb08:	4648      	mov	r0, r9
3400eb0a:	f000 fa91 	bl	3400f030 <_Bfree>
3400eb0e:	9a04      	ldr	r2, [sp, #16]
3400eb10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400eb12:	9201      	str	r2, [sp, #4]
3400eb14:	1b1a      	subs	r2, r3, r4
3400eb16:	d004      	beq.n	3400eb22 <_dtoa_r+0x6b2>
3400eb18:	9901      	ldr	r1, [sp, #4]
3400eb1a:	4648      	mov	r0, r9
3400eb1c:	f000 fbfe 	bl	3400f31c <__pow5mult>
3400eb20:	9001      	str	r0, [sp, #4]
3400eb22:	2101      	movs	r1, #1
3400eb24:	4648      	mov	r0, r9
3400eb26:	f000 fb39 	bl	3400f19c <__i2b>
3400eb2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400eb2c:	4604      	mov	r4, r0
3400eb2e:	2b00      	cmp	r3, #0
3400eb30:	f000 81d0 	beq.w	3400eed4 <_dtoa_r+0xa64>
3400eb34:	461a      	mov	r2, r3
3400eb36:	4601      	mov	r1, r0
3400eb38:	4648      	mov	r0, r9
3400eb3a:	f000 fbef 	bl	3400f31c <__pow5mult>
3400eb3e:	9b07      	ldr	r3, [sp, #28]
3400eb40:	4604      	mov	r4, r0
3400eb42:	2b01      	cmp	r3, #1
3400eb44:	f300 8095 	bgt.w	3400ec72 <_dtoa_r+0x802>
3400eb48:	9b02      	ldr	r3, [sp, #8]
3400eb4a:	2b00      	cmp	r3, #0
3400eb4c:	f040 808b 	bne.w	3400ec66 <_dtoa_r+0x7f6>
3400eb50:	9b03      	ldr	r3, [sp, #12]
3400eb52:	f3c3 0213 	ubfx	r2, r3, #0, #20
3400eb56:	2a00      	cmp	r2, #0
3400eb58:	f040 8087 	bne.w	3400ec6a <_dtoa_r+0x7fa>
3400eb5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3400eb60:	0d12      	lsrs	r2, r2, #20
3400eb62:	0512      	lsls	r2, r2, #20
3400eb64:	2a00      	cmp	r2, #0
3400eb66:	f000 8082 	beq.w	3400ec6e <_dtoa_r+0x7fe>
3400eb6a:	9b05      	ldr	r3, [sp, #20]
3400eb6c:	3301      	adds	r3, #1
3400eb6e:	9305      	str	r3, [sp, #20]
3400eb70:	9b06      	ldr	r3, [sp, #24]
3400eb72:	3301      	adds	r3, #1
3400eb74:	9306      	str	r3, [sp, #24]
3400eb76:	2301      	movs	r3, #1
3400eb78:	930b      	str	r3, [sp, #44]	@ 0x2c
3400eb7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400eb7c:	2b00      	cmp	r3, #0
3400eb7e:	f000 81af 	beq.w	3400eee0 <_dtoa_r+0xa70>
3400eb82:	6922      	ldr	r2, [r4, #16]
3400eb84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3400eb88:	6910      	ldr	r0, [r2, #16]
3400eb8a:	f000 fabb 	bl	3400f104 <__hi0bits>
3400eb8e:	f1c0 0020 	rsb	r0, r0, #32
3400eb92:	9b06      	ldr	r3, [sp, #24]
3400eb94:	4418      	add	r0, r3
3400eb96:	f010 001f 	ands.w	r0, r0, #31
3400eb9a:	d076      	beq.n	3400ec8a <_dtoa_r+0x81a>
3400eb9c:	f1c0 0220 	rsb	r2, r0, #32
3400eba0:	2a04      	cmp	r2, #4
3400eba2:	dd69      	ble.n	3400ec78 <_dtoa_r+0x808>
3400eba4:	f1c0 001c 	rsb	r0, r0, #28
3400eba8:	9b05      	ldr	r3, [sp, #20]
3400ebaa:	4403      	add	r3, r0
3400ebac:	4406      	add	r6, r0
3400ebae:	9305      	str	r3, [sp, #20]
3400ebb0:	9b06      	ldr	r3, [sp, #24]
3400ebb2:	4403      	add	r3, r0
3400ebb4:	9306      	str	r3, [sp, #24]
3400ebb6:	9b05      	ldr	r3, [sp, #20]
3400ebb8:	2b00      	cmp	r3, #0
3400ebba:	dd05      	ble.n	3400ebc8 <_dtoa_r+0x758>
3400ebbc:	461a      	mov	r2, r3
3400ebbe:	9901      	ldr	r1, [sp, #4]
3400ebc0:	4648      	mov	r0, r9
3400ebc2:	f000 fc05 	bl	3400f3d0 <__lshift>
3400ebc6:	9001      	str	r0, [sp, #4]
3400ebc8:	9b06      	ldr	r3, [sp, #24]
3400ebca:	2b00      	cmp	r3, #0
3400ebcc:	dd05      	ble.n	3400ebda <_dtoa_r+0x76a>
3400ebce:	4621      	mov	r1, r4
3400ebd0:	461a      	mov	r2, r3
3400ebd2:	4648      	mov	r0, r9
3400ebd4:	f000 fbfc 	bl	3400f3d0 <__lshift>
3400ebd8:	4604      	mov	r4, r0
3400ebda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3400ebdc:	2b00      	cmp	r3, #0
3400ebde:	d056      	beq.n	3400ec8e <_dtoa_r+0x81e>
3400ebe0:	4621      	mov	r1, r4
3400ebe2:	9801      	ldr	r0, [sp, #4]
3400ebe4:	f000 fc60 	bl	3400f4a8 <__mcmp>
3400ebe8:	2800      	cmp	r0, #0
3400ebea:	da50      	bge.n	3400ec8e <_dtoa_r+0x81e>
3400ebec:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3400ebf0:	220a      	movs	r2, #10
3400ebf2:	9901      	ldr	r1, [sp, #4]
3400ebf4:	4648      	mov	r0, r9
3400ebf6:	9304      	str	r3, [sp, #16]
3400ebf8:	2300      	movs	r3, #0
3400ebfa:	f000 fa3b 	bl	3400f074 <__multadd>
3400ebfe:	9b08      	ldr	r3, [sp, #32]
3400ec00:	9001      	str	r0, [sp, #4]
3400ec02:	2b00      	cmp	r3, #0
3400ec04:	f000 816e 	beq.w	3400eee4 <_dtoa_r+0xa74>
3400ec08:	4629      	mov	r1, r5
3400ec0a:	2300      	movs	r3, #0
3400ec0c:	220a      	movs	r2, #10
3400ec0e:	4648      	mov	r0, r9
3400ec10:	f000 fa30 	bl	3400f074 <__multadd>
3400ec14:	f1bb 0f00 	cmp.w	fp, #0
3400ec18:	4605      	mov	r5, r0
3400ec1a:	dc64      	bgt.n	3400ece6 <_dtoa_r+0x876>
3400ec1c:	9b07      	ldr	r3, [sp, #28]
3400ec1e:	2b02      	cmp	r3, #2
3400ec20:	dc3e      	bgt.n	3400eca0 <_dtoa_r+0x830>
3400ec22:	e060      	b.n	3400ece6 <_dtoa_r+0x876>
3400ec24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400ec26:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3400ec2a:	e73c      	b.n	3400eaa6 <_dtoa_r+0x636>
3400ec2c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3400ec30:	42a3      	cmp	r3, r4
3400ec32:	bfbb      	ittet	lt
3400ec34:	1ae2      	sublt	r2, r4, r3
3400ec36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
3400ec38:	1b1c      	subge	r4, r3, r4
3400ec3a:	189b      	addlt	r3, r3, r2
3400ec3c:	bfbe      	ittt	lt
3400ec3e:	930a      	strlt	r3, [sp, #40]	@ 0x28
3400ec40:	4623      	movlt	r3, r4
3400ec42:	2400      	movlt	r4, #0
3400ec44:	f1ba 0f00 	cmp.w	sl, #0
3400ec48:	bfb3      	iteet	lt
3400ec4a:	9a05      	ldrlt	r2, [sp, #20]
3400ec4c:	4652      	movge	r2, sl
3400ec4e:	9e05      	ldrge	r6, [sp, #20]
3400ec50:	eba2 060a 	sublt.w	r6, r2, sl
3400ec54:	bfb8      	it	lt
3400ec56:	2200      	movlt	r2, #0
3400ec58:	e727      	b.n	3400eaaa <_dtoa_r+0x63a>
3400ec5a:	461c      	mov	r4, r3
3400ec5c:	9e05      	ldr	r6, [sp, #20]
3400ec5e:	9d08      	ldr	r5, [sp, #32]
3400ec60:	e730      	b.n	3400eac4 <_dtoa_r+0x654>
3400ec62:	461a      	mov	r2, r3
3400ec64:	e758      	b.n	3400eb18 <_dtoa_r+0x6a8>
3400ec66:	2300      	movs	r3, #0
3400ec68:	e786      	b.n	3400eb78 <_dtoa_r+0x708>
3400ec6a:	9b02      	ldr	r3, [sp, #8]
3400ec6c:	e784      	b.n	3400eb78 <_dtoa_r+0x708>
3400ec6e:	920b      	str	r2, [sp, #44]	@ 0x2c
3400ec70:	e783      	b.n	3400eb7a <_dtoa_r+0x70a>
3400ec72:	2300      	movs	r3, #0
3400ec74:	930b      	str	r3, [sp, #44]	@ 0x2c
3400ec76:	e784      	b.n	3400eb82 <_dtoa_r+0x712>
3400ec78:	d09d      	beq.n	3400ebb6 <_dtoa_r+0x746>
3400ec7a:	321c      	adds	r2, #28
3400ec7c:	9b05      	ldr	r3, [sp, #20]
3400ec7e:	4413      	add	r3, r2
3400ec80:	4416      	add	r6, r2
3400ec82:	9305      	str	r3, [sp, #20]
3400ec84:	9b06      	ldr	r3, [sp, #24]
3400ec86:	4413      	add	r3, r2
3400ec88:	e794      	b.n	3400ebb4 <_dtoa_r+0x744>
3400ec8a:	4602      	mov	r2, r0
3400ec8c:	e7f5      	b.n	3400ec7a <_dtoa_r+0x80a>
3400ec8e:	f1ba 0f00 	cmp.w	sl, #0
3400ec92:	46d3      	mov	fp, sl
3400ec94:	f8cd 8010 	str.w	r8, [sp, #16]
3400ec98:	dc21      	bgt.n	3400ecde <_dtoa_r+0x86e>
3400ec9a:	9b07      	ldr	r3, [sp, #28]
3400ec9c:	2b02      	cmp	r3, #2
3400ec9e:	dd1e      	ble.n	3400ecde <_dtoa_r+0x86e>
3400eca0:	f1bb 0f00 	cmp.w	fp, #0
3400eca4:	f47f aeb7 	bne.w	3400ea16 <_dtoa_r+0x5a6>
3400eca8:	4621      	mov	r1, r4
3400ecaa:	465b      	mov	r3, fp
3400ecac:	2205      	movs	r2, #5
3400ecae:	4648      	mov	r0, r9
3400ecb0:	f000 f9e0 	bl	3400f074 <__multadd>
3400ecb4:	4601      	mov	r1, r0
3400ecb6:	4604      	mov	r4, r0
3400ecb8:	9801      	ldr	r0, [sp, #4]
3400ecba:	f000 fbf5 	bl	3400f4a8 <__mcmp>
3400ecbe:	2800      	cmp	r0, #0
3400ecc0:	f77f aea9 	ble.w	3400ea16 <_dtoa_r+0x5a6>
3400ecc4:	2331      	movs	r3, #49	@ 0x31
3400ecc6:	463e      	mov	r6, r7
3400ecc8:	f806 3b01 	strb.w	r3, [r6], #1
3400eccc:	9b04      	ldr	r3, [sp, #16]
3400ecce:	3301      	adds	r3, #1
3400ecd0:	9304      	str	r3, [sp, #16]
3400ecd2:	e6a4      	b.n	3400ea1e <_dtoa_r+0x5ae>
3400ecd4:	4654      	mov	r4, sl
3400ecd6:	f8cd 8010 	str.w	r8, [sp, #16]
3400ecda:	4625      	mov	r5, r4
3400ecdc:	e7f2      	b.n	3400ecc4 <_dtoa_r+0x854>
3400ecde:	9b08      	ldr	r3, [sp, #32]
3400ece0:	2b00      	cmp	r3, #0
3400ece2:	f000 8103 	beq.w	3400eeec <_dtoa_r+0xa7c>
3400ece6:	2e00      	cmp	r6, #0
3400ece8:	dd05      	ble.n	3400ecf6 <_dtoa_r+0x886>
3400ecea:	4629      	mov	r1, r5
3400ecec:	4632      	mov	r2, r6
3400ecee:	4648      	mov	r0, r9
3400ecf0:	f000 fb6e 	bl	3400f3d0 <__lshift>
3400ecf4:	4605      	mov	r5, r0
3400ecf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400ecf8:	2b00      	cmp	r3, #0
3400ecfa:	d058      	beq.n	3400edae <_dtoa_r+0x93e>
3400ecfc:	6869      	ldr	r1, [r5, #4]
3400ecfe:	4648      	mov	r0, r9
3400ed00:	f000 f956 	bl	3400efb0 <_Balloc>
3400ed04:	4606      	mov	r6, r0
3400ed06:	b928      	cbnz	r0, 3400ed14 <_dtoa_r+0x8a4>
3400ed08:	4b82      	ldr	r3, [pc, #520]	@ (3400ef14 <_dtoa_r+0xaa4>)
3400ed0a:	4602      	mov	r2, r0
3400ed0c:	f240 21ef 	movw	r1, #751	@ 0x2ef
3400ed10:	f7ff bbc7 	b.w	3400e4a2 <_dtoa_r+0x32>
3400ed14:	692a      	ldr	r2, [r5, #16]
3400ed16:	f105 010c 	add.w	r1, r5, #12
3400ed1a:	300c      	adds	r0, #12
3400ed1c:	3202      	adds	r2, #2
3400ed1e:	0092      	lsls	r2, r2, #2
3400ed20:	f7ff fb05 	bl	3400e32e <memcpy>
3400ed24:	2201      	movs	r2, #1
3400ed26:	4631      	mov	r1, r6
3400ed28:	4648      	mov	r0, r9
3400ed2a:	f000 fb51 	bl	3400f3d0 <__lshift>
3400ed2e:	1c7b      	adds	r3, r7, #1
3400ed30:	46a8      	mov	r8, r5
3400ed32:	4605      	mov	r5, r0
3400ed34:	9305      	str	r3, [sp, #20]
3400ed36:	eb07 030b 	add.w	r3, r7, fp
3400ed3a:	9309      	str	r3, [sp, #36]	@ 0x24
3400ed3c:	9b02      	ldr	r3, [sp, #8]
3400ed3e:	f003 0301 	and.w	r3, r3, #1
3400ed42:	9308      	str	r3, [sp, #32]
3400ed44:	9b05      	ldr	r3, [sp, #20]
3400ed46:	4621      	mov	r1, r4
3400ed48:	9801      	ldr	r0, [sp, #4]
3400ed4a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3400ed4e:	f7ff fb02 	bl	3400e356 <quorem>
3400ed52:	4641      	mov	r1, r8
3400ed54:	9002      	str	r0, [sp, #8]
3400ed56:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400ed5a:	9801      	ldr	r0, [sp, #4]
3400ed5c:	f000 fba4 	bl	3400f4a8 <__mcmp>
3400ed60:	462a      	mov	r2, r5
3400ed62:	9006      	str	r0, [sp, #24]
3400ed64:	4621      	mov	r1, r4
3400ed66:	4648      	mov	r0, r9
3400ed68:	f000 fbba 	bl	3400f4e0 <__mdiff>
3400ed6c:	68c2      	ldr	r2, [r0, #12]
3400ed6e:	4606      	mov	r6, r0
3400ed70:	b9fa      	cbnz	r2, 3400edb2 <_dtoa_r+0x942>
3400ed72:	4601      	mov	r1, r0
3400ed74:	9801      	ldr	r0, [sp, #4]
3400ed76:	f000 fb97 	bl	3400f4a8 <__mcmp>
3400ed7a:	4602      	mov	r2, r0
3400ed7c:	4631      	mov	r1, r6
3400ed7e:	4648      	mov	r0, r9
3400ed80:	920a      	str	r2, [sp, #40]	@ 0x28
3400ed82:	f000 f955 	bl	3400f030 <_Bfree>
3400ed86:	9b07      	ldr	r3, [sp, #28]
3400ed88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400ed8a:	9e05      	ldr	r6, [sp, #20]
3400ed8c:	ea43 0102 	orr.w	r1, r3, r2
3400ed90:	9b08      	ldr	r3, [sp, #32]
3400ed92:	4319      	orrs	r1, r3
3400ed94:	d10f      	bne.n	3400edb6 <_dtoa_r+0x946>
3400ed96:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400ed9a:	d028      	beq.n	3400edee <_dtoa_r+0x97e>
3400ed9c:	9b06      	ldr	r3, [sp, #24]
3400ed9e:	2b00      	cmp	r3, #0
3400eda0:	dd02      	ble.n	3400eda8 <_dtoa_r+0x938>
3400eda2:	9b02      	ldr	r3, [sp, #8]
3400eda4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3400eda8:	f88b a000 	strb.w	sl, [fp]
3400edac:	e639      	b.n	3400ea22 <_dtoa_r+0x5b2>
3400edae:	4628      	mov	r0, r5
3400edb0:	e7bd      	b.n	3400ed2e <_dtoa_r+0x8be>
3400edb2:	2201      	movs	r2, #1
3400edb4:	e7e2      	b.n	3400ed7c <_dtoa_r+0x90c>
3400edb6:	9b06      	ldr	r3, [sp, #24]
3400edb8:	2b00      	cmp	r3, #0
3400edba:	db04      	blt.n	3400edc6 <_dtoa_r+0x956>
3400edbc:	9907      	ldr	r1, [sp, #28]
3400edbe:	430b      	orrs	r3, r1
3400edc0:	9908      	ldr	r1, [sp, #32]
3400edc2:	430b      	orrs	r3, r1
3400edc4:	d120      	bne.n	3400ee08 <_dtoa_r+0x998>
3400edc6:	2a00      	cmp	r2, #0
3400edc8:	ddee      	ble.n	3400eda8 <_dtoa_r+0x938>
3400edca:	2201      	movs	r2, #1
3400edcc:	9901      	ldr	r1, [sp, #4]
3400edce:	4648      	mov	r0, r9
3400edd0:	f000 fafe 	bl	3400f3d0 <__lshift>
3400edd4:	4621      	mov	r1, r4
3400edd6:	9001      	str	r0, [sp, #4]
3400edd8:	f000 fb66 	bl	3400f4a8 <__mcmp>
3400eddc:	2800      	cmp	r0, #0
3400edde:	dc03      	bgt.n	3400ede8 <_dtoa_r+0x978>
3400ede0:	d1e2      	bne.n	3400eda8 <_dtoa_r+0x938>
3400ede2:	f01a 0f01 	tst.w	sl, #1
3400ede6:	d0df      	beq.n	3400eda8 <_dtoa_r+0x938>
3400ede8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400edec:	d1d9      	bne.n	3400eda2 <_dtoa_r+0x932>
3400edee:	2339      	movs	r3, #57	@ 0x39
3400edf0:	f88b 3000 	strb.w	r3, [fp]
3400edf4:	4633      	mov	r3, r6
3400edf6:	461e      	mov	r6, r3
3400edf8:	3b01      	subs	r3, #1
3400edfa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3400edfe:	2a39      	cmp	r2, #57	@ 0x39
3400ee00:	d053      	beq.n	3400eeaa <_dtoa_r+0xa3a>
3400ee02:	3201      	adds	r2, #1
3400ee04:	701a      	strb	r2, [r3, #0]
3400ee06:	e60c      	b.n	3400ea22 <_dtoa_r+0x5b2>
3400ee08:	2a00      	cmp	r2, #0
3400ee0a:	dd07      	ble.n	3400ee1c <_dtoa_r+0x9ac>
3400ee0c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400ee10:	d0ed      	beq.n	3400edee <_dtoa_r+0x97e>
3400ee12:	f10a 0301 	add.w	r3, sl, #1
3400ee16:	f88b 3000 	strb.w	r3, [fp]
3400ee1a:	e602      	b.n	3400ea22 <_dtoa_r+0x5b2>
3400ee1c:	9b05      	ldr	r3, [sp, #20]
3400ee1e:	9a05      	ldr	r2, [sp, #20]
3400ee20:	f803 ac01 	strb.w	sl, [r3, #-1]
3400ee24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400ee26:	4293      	cmp	r3, r2
3400ee28:	d029      	beq.n	3400ee7e <_dtoa_r+0xa0e>
3400ee2a:	2300      	movs	r3, #0
3400ee2c:	220a      	movs	r2, #10
3400ee2e:	9901      	ldr	r1, [sp, #4]
3400ee30:	4648      	mov	r0, r9
3400ee32:	f000 f91f 	bl	3400f074 <__multadd>
3400ee36:	45a8      	cmp	r8, r5
3400ee38:	9001      	str	r0, [sp, #4]
3400ee3a:	f04f 0300 	mov.w	r3, #0
3400ee3e:	f04f 020a 	mov.w	r2, #10
3400ee42:	4641      	mov	r1, r8
3400ee44:	4648      	mov	r0, r9
3400ee46:	d107      	bne.n	3400ee58 <_dtoa_r+0x9e8>
3400ee48:	f000 f914 	bl	3400f074 <__multadd>
3400ee4c:	4680      	mov	r8, r0
3400ee4e:	4605      	mov	r5, r0
3400ee50:	9b05      	ldr	r3, [sp, #20]
3400ee52:	3301      	adds	r3, #1
3400ee54:	9305      	str	r3, [sp, #20]
3400ee56:	e775      	b.n	3400ed44 <_dtoa_r+0x8d4>
3400ee58:	f000 f90c 	bl	3400f074 <__multadd>
3400ee5c:	4629      	mov	r1, r5
3400ee5e:	4680      	mov	r8, r0
3400ee60:	2300      	movs	r3, #0
3400ee62:	220a      	movs	r2, #10
3400ee64:	4648      	mov	r0, r9
3400ee66:	f000 f905 	bl	3400f074 <__multadd>
3400ee6a:	4605      	mov	r5, r0
3400ee6c:	e7f0      	b.n	3400ee50 <_dtoa_r+0x9e0>
3400ee6e:	f1bb 0f00 	cmp.w	fp, #0
3400ee72:	f04f 0800 	mov.w	r8, #0
3400ee76:	bfcc      	ite	gt
3400ee78:	465e      	movgt	r6, fp
3400ee7a:	2601      	movle	r6, #1
3400ee7c:	443e      	add	r6, r7
3400ee7e:	2201      	movs	r2, #1
3400ee80:	9901      	ldr	r1, [sp, #4]
3400ee82:	4648      	mov	r0, r9
3400ee84:	f000 faa4 	bl	3400f3d0 <__lshift>
3400ee88:	4621      	mov	r1, r4
3400ee8a:	9001      	str	r0, [sp, #4]
3400ee8c:	f000 fb0c 	bl	3400f4a8 <__mcmp>
3400ee90:	2800      	cmp	r0, #0
3400ee92:	dcaf      	bgt.n	3400edf4 <_dtoa_r+0x984>
3400ee94:	d102      	bne.n	3400ee9c <_dtoa_r+0xa2c>
3400ee96:	f01a 0f01 	tst.w	sl, #1
3400ee9a:	d1ab      	bne.n	3400edf4 <_dtoa_r+0x984>
3400ee9c:	4633      	mov	r3, r6
3400ee9e:	461e      	mov	r6, r3
3400eea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400eea4:	2a30      	cmp	r2, #48	@ 0x30
3400eea6:	d0fa      	beq.n	3400ee9e <_dtoa_r+0xa2e>
3400eea8:	e5bb      	b.n	3400ea22 <_dtoa_r+0x5b2>
3400eeaa:	429f      	cmp	r7, r3
3400eeac:	d1a3      	bne.n	3400edf6 <_dtoa_r+0x986>
3400eeae:	9b04      	ldr	r3, [sp, #16]
3400eeb0:	3301      	adds	r3, #1
3400eeb2:	9304      	str	r3, [sp, #16]
3400eeb4:	2331      	movs	r3, #49	@ 0x31
3400eeb6:	703b      	strb	r3, [r7, #0]
3400eeb8:	e5b3      	b.n	3400ea22 <_dtoa_r+0x5b2>
3400eeba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400eebc:	4f16      	ldr	r7, [pc, #88]	@ (3400ef18 <_dtoa_r+0xaa8>)
3400eebe:	b11b      	cbz	r3, 3400eec8 <_dtoa_r+0xa58>
3400eec0:	f107 0308 	add.w	r3, r7, #8
3400eec4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400eec6:	6013      	str	r3, [r2, #0]
3400eec8:	4638      	mov	r0, r7
3400eeca:	b011      	add	sp, #68	@ 0x44
3400eecc:	ecbd 8b02 	vpop	{d8}
3400eed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400eed4:	9b07      	ldr	r3, [sp, #28]
3400eed6:	2b01      	cmp	r3, #1
3400eed8:	f77f ae36 	ble.w	3400eb48 <_dtoa_r+0x6d8>
3400eedc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400eede:	930b      	str	r3, [sp, #44]	@ 0x2c
3400eee0:	2001      	movs	r0, #1
3400eee2:	e656      	b.n	3400eb92 <_dtoa_r+0x722>
3400eee4:	f1bb 0f00 	cmp.w	fp, #0
3400eee8:	f77f aed7 	ble.w	3400ec9a <_dtoa_r+0x82a>
3400eeec:	463e      	mov	r6, r7
3400eeee:	4621      	mov	r1, r4
3400eef0:	9801      	ldr	r0, [sp, #4]
3400eef2:	f7ff fa30 	bl	3400e356 <quorem>
3400eef6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400eefa:	f806 ab01 	strb.w	sl, [r6], #1
3400eefe:	1bf2      	subs	r2, r6, r7
3400ef00:	4593      	cmp	fp, r2
3400ef02:	ddb4      	ble.n	3400ee6e <_dtoa_r+0x9fe>
3400ef04:	2300      	movs	r3, #0
3400ef06:	220a      	movs	r2, #10
3400ef08:	9901      	ldr	r1, [sp, #4]
3400ef0a:	4648      	mov	r0, r9
3400ef0c:	f000 f8b2 	bl	3400f074 <__multadd>
3400ef10:	9001      	str	r0, [sp, #4]
3400ef12:	e7ec      	b.n	3400eeee <_dtoa_r+0xa7e>
3400ef14:	34011ec1 	.word	0x34011ec1
3400ef18:	34011e45 	.word	0x34011e45

3400ef1c <_free_r>:
3400ef1c:	b538      	push	{r3, r4, r5, lr}
3400ef1e:	4605      	mov	r5, r0
3400ef20:	2900      	cmp	r1, #0
3400ef22:	d041      	beq.n	3400efa8 <_free_r+0x8c>
3400ef24:	f851 3c04 	ldr.w	r3, [r1, #-4]
3400ef28:	1f0c      	subs	r4, r1, #4
3400ef2a:	2b00      	cmp	r3, #0
3400ef2c:	bfb8      	it	lt
3400ef2e:	18e4      	addlt	r4, r4, r3
3400ef30:	f7fe f90c 	bl	3400d14c <__malloc_lock>
3400ef34:	4a1d      	ldr	r2, [pc, #116]	@ (3400efac <_free_r+0x90>)
3400ef36:	6813      	ldr	r3, [r2, #0]
3400ef38:	b933      	cbnz	r3, 3400ef48 <_free_r+0x2c>
3400ef3a:	6063      	str	r3, [r4, #4]
3400ef3c:	6014      	str	r4, [r2, #0]
3400ef3e:	4628      	mov	r0, r5
3400ef40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3400ef44:	f7fe b908 	b.w	3400d158 <__malloc_unlock>
3400ef48:	42a3      	cmp	r3, r4
3400ef4a:	d908      	bls.n	3400ef5e <_free_r+0x42>
3400ef4c:	6820      	ldr	r0, [r4, #0]
3400ef4e:	1821      	adds	r1, r4, r0
3400ef50:	428b      	cmp	r3, r1
3400ef52:	bf01      	itttt	eq
3400ef54:	6819      	ldreq	r1, [r3, #0]
3400ef56:	685b      	ldreq	r3, [r3, #4]
3400ef58:	1809      	addeq	r1, r1, r0
3400ef5a:	6021      	streq	r1, [r4, #0]
3400ef5c:	e7ed      	b.n	3400ef3a <_free_r+0x1e>
3400ef5e:	461a      	mov	r2, r3
3400ef60:	685b      	ldr	r3, [r3, #4]
3400ef62:	b10b      	cbz	r3, 3400ef68 <_free_r+0x4c>
3400ef64:	42a3      	cmp	r3, r4
3400ef66:	d9fa      	bls.n	3400ef5e <_free_r+0x42>
3400ef68:	6811      	ldr	r1, [r2, #0]
3400ef6a:	1850      	adds	r0, r2, r1
3400ef6c:	42a0      	cmp	r0, r4
3400ef6e:	d10b      	bne.n	3400ef88 <_free_r+0x6c>
3400ef70:	6820      	ldr	r0, [r4, #0]
3400ef72:	4401      	add	r1, r0
3400ef74:	1850      	adds	r0, r2, r1
3400ef76:	6011      	str	r1, [r2, #0]
3400ef78:	4283      	cmp	r3, r0
3400ef7a:	d1e0      	bne.n	3400ef3e <_free_r+0x22>
3400ef7c:	6818      	ldr	r0, [r3, #0]
3400ef7e:	685b      	ldr	r3, [r3, #4]
3400ef80:	4408      	add	r0, r1
3400ef82:	6053      	str	r3, [r2, #4]
3400ef84:	6010      	str	r0, [r2, #0]
3400ef86:	e7da      	b.n	3400ef3e <_free_r+0x22>
3400ef88:	d902      	bls.n	3400ef90 <_free_r+0x74>
3400ef8a:	230c      	movs	r3, #12
3400ef8c:	602b      	str	r3, [r5, #0]
3400ef8e:	e7d6      	b.n	3400ef3e <_free_r+0x22>
3400ef90:	6820      	ldr	r0, [r4, #0]
3400ef92:	1821      	adds	r1, r4, r0
3400ef94:	428b      	cmp	r3, r1
3400ef96:	bf02      	ittt	eq
3400ef98:	6819      	ldreq	r1, [r3, #0]
3400ef9a:	685b      	ldreq	r3, [r3, #4]
3400ef9c:	1809      	addeq	r1, r1, r0
3400ef9e:	6063      	str	r3, [r4, #4]
3400efa0:	bf08      	it	eq
3400efa2:	6021      	streq	r1, [r4, #0]
3400efa4:	6054      	str	r4, [r2, #4]
3400efa6:	e7ca      	b.n	3400ef3e <_free_r+0x22>
3400efa8:	bd38      	pop	{r3, r4, r5, pc}
3400efaa:	bf00      	nop
3400efac:	34012be8 	.word	0x34012be8

3400efb0 <_Balloc>:
3400efb0:	b570      	push	{r4, r5, r6, lr}
3400efb2:	69c6      	ldr	r6, [r0, #28]
3400efb4:	4604      	mov	r4, r0
3400efb6:	460d      	mov	r5, r1
3400efb8:	b976      	cbnz	r6, 3400efd8 <_Balloc+0x28>
3400efba:	2010      	movs	r0, #16
3400efbc:	f7fe f81c 	bl	3400cff8 <malloc>
3400efc0:	4602      	mov	r2, r0
3400efc2:	61e0      	str	r0, [r4, #28]
3400efc4:	b920      	cbnz	r0, 3400efd0 <_Balloc+0x20>
3400efc6:	4b18      	ldr	r3, [pc, #96]	@ (3400f028 <_Balloc+0x78>)
3400efc8:	216b      	movs	r1, #107	@ 0x6b
3400efca:	4818      	ldr	r0, [pc, #96]	@ (3400f02c <_Balloc+0x7c>)
3400efcc:	f7fd fff6 	bl	3400cfbc <__assert_func>
3400efd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400efd4:	6006      	str	r6, [r0, #0]
3400efd6:	60c6      	str	r6, [r0, #12]
3400efd8:	69e6      	ldr	r6, [r4, #28]
3400efda:	68f3      	ldr	r3, [r6, #12]
3400efdc:	b183      	cbz	r3, 3400f000 <_Balloc+0x50>
3400efde:	69e3      	ldr	r3, [r4, #28]
3400efe0:	68db      	ldr	r3, [r3, #12]
3400efe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3400efe6:	b9b8      	cbnz	r0, 3400f018 <_Balloc+0x68>
3400efe8:	2101      	movs	r1, #1
3400efea:	4620      	mov	r0, r4
3400efec:	fa01 f605 	lsl.w	r6, r1, r5
3400eff0:	1d72      	adds	r2, r6, #5
3400eff2:	0092      	lsls	r2, r2, #2
3400eff4:	f000 fe1a 	bl	3400fc2c <_calloc_r>
3400eff8:	b160      	cbz	r0, 3400f014 <_Balloc+0x64>
3400effa:	e9c0 5601 	strd	r5, r6, [r0, #4]
3400effe:	e00e      	b.n	3400f01e <_Balloc+0x6e>
3400f000:	2221      	movs	r2, #33	@ 0x21
3400f002:	2104      	movs	r1, #4
3400f004:	4620      	mov	r0, r4
3400f006:	f000 fe11 	bl	3400fc2c <_calloc_r>
3400f00a:	69e3      	ldr	r3, [r4, #28]
3400f00c:	60f0      	str	r0, [r6, #12]
3400f00e:	68db      	ldr	r3, [r3, #12]
3400f010:	2b00      	cmp	r3, #0
3400f012:	d1e4      	bne.n	3400efde <_Balloc+0x2e>
3400f014:	2000      	movs	r0, #0
3400f016:	bd70      	pop	{r4, r5, r6, pc}
3400f018:	6802      	ldr	r2, [r0, #0]
3400f01a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3400f01e:	2300      	movs	r3, #0
3400f020:	e9c0 3303 	strd	r3, r3, [r0, #12]
3400f024:	e7f7      	b.n	3400f016 <_Balloc+0x66>
3400f026:	bf00      	nop
3400f028:	34011e52 	.word	0x34011e52
3400f02c:	34011ed2 	.word	0x34011ed2

3400f030 <_Bfree>:
3400f030:	b570      	push	{r4, r5, r6, lr}
3400f032:	69c6      	ldr	r6, [r0, #28]
3400f034:	4605      	mov	r5, r0
3400f036:	460c      	mov	r4, r1
3400f038:	b976      	cbnz	r6, 3400f058 <_Bfree+0x28>
3400f03a:	2010      	movs	r0, #16
3400f03c:	f7fd ffdc 	bl	3400cff8 <malloc>
3400f040:	4602      	mov	r2, r0
3400f042:	61e8      	str	r0, [r5, #28]
3400f044:	b920      	cbnz	r0, 3400f050 <_Bfree+0x20>
3400f046:	4b09      	ldr	r3, [pc, #36]	@ (3400f06c <_Bfree+0x3c>)
3400f048:	218f      	movs	r1, #143	@ 0x8f
3400f04a:	4809      	ldr	r0, [pc, #36]	@ (3400f070 <_Bfree+0x40>)
3400f04c:	f7fd ffb6 	bl	3400cfbc <__assert_func>
3400f050:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400f054:	6006      	str	r6, [r0, #0]
3400f056:	60c6      	str	r6, [r0, #12]
3400f058:	b13c      	cbz	r4, 3400f06a <_Bfree+0x3a>
3400f05a:	69eb      	ldr	r3, [r5, #28]
3400f05c:	6862      	ldr	r2, [r4, #4]
3400f05e:	68db      	ldr	r3, [r3, #12]
3400f060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3400f064:	6021      	str	r1, [r4, #0]
3400f066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3400f06a:	bd70      	pop	{r4, r5, r6, pc}
3400f06c:	34011e52 	.word	0x34011e52
3400f070:	34011ed2 	.word	0x34011ed2

3400f074 <__multadd>:
3400f074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400f078:	f101 0c14 	add.w	ip, r1, #20
3400f07c:	4607      	mov	r7, r0
3400f07e:	460c      	mov	r4, r1
3400f080:	461e      	mov	r6, r3
3400f082:	690d      	ldr	r5, [r1, #16]
3400f084:	2000      	movs	r0, #0
3400f086:	f8dc 3000 	ldr.w	r3, [ip]
3400f08a:	3001      	adds	r0, #1
3400f08c:	b299      	uxth	r1, r3
3400f08e:	4285      	cmp	r5, r0
3400f090:	fb02 6101 	mla	r1, r2, r1, r6
3400f094:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400f098:	ea4f 4311 	mov.w	r3, r1, lsr #16
3400f09c:	b289      	uxth	r1, r1
3400f09e:	fb02 3306 	mla	r3, r2, r6, r3
3400f0a2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3400f0a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400f0aa:	f84c 1b04 	str.w	r1, [ip], #4
3400f0ae:	dcea      	bgt.n	3400f086 <__multadd+0x12>
3400f0b0:	b30e      	cbz	r6, 3400f0f6 <__multadd+0x82>
3400f0b2:	68a3      	ldr	r3, [r4, #8]
3400f0b4:	42ab      	cmp	r3, r5
3400f0b6:	dc19      	bgt.n	3400f0ec <__multadd+0x78>
3400f0b8:	6861      	ldr	r1, [r4, #4]
3400f0ba:	4638      	mov	r0, r7
3400f0bc:	3101      	adds	r1, #1
3400f0be:	f7ff ff77 	bl	3400efb0 <_Balloc>
3400f0c2:	4680      	mov	r8, r0
3400f0c4:	b928      	cbnz	r0, 3400f0d2 <__multadd+0x5e>
3400f0c6:	4602      	mov	r2, r0
3400f0c8:	4b0c      	ldr	r3, [pc, #48]	@ (3400f0fc <__multadd+0x88>)
3400f0ca:	21ba      	movs	r1, #186	@ 0xba
3400f0cc:	480c      	ldr	r0, [pc, #48]	@ (3400f100 <__multadd+0x8c>)
3400f0ce:	f7fd ff75 	bl	3400cfbc <__assert_func>
3400f0d2:	6922      	ldr	r2, [r4, #16]
3400f0d4:	f104 010c 	add.w	r1, r4, #12
3400f0d8:	300c      	adds	r0, #12
3400f0da:	3202      	adds	r2, #2
3400f0dc:	0092      	lsls	r2, r2, #2
3400f0de:	f7ff f926 	bl	3400e32e <memcpy>
3400f0e2:	4621      	mov	r1, r4
3400f0e4:	4644      	mov	r4, r8
3400f0e6:	4638      	mov	r0, r7
3400f0e8:	f7ff ffa2 	bl	3400f030 <_Bfree>
3400f0ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3400f0f0:	3501      	adds	r5, #1
3400f0f2:	615e      	str	r6, [r3, #20]
3400f0f4:	6125      	str	r5, [r4, #16]
3400f0f6:	4620      	mov	r0, r4
3400f0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400f0fc:	34011ec1 	.word	0x34011ec1
3400f100:	34011ed2 	.word	0x34011ed2

3400f104 <__hi0bits>:
3400f104:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3400f108:	4603      	mov	r3, r0
3400f10a:	bf36      	itet	cc
3400f10c:	0403      	lslcc	r3, r0, #16
3400f10e:	2000      	movcs	r0, #0
3400f110:	2010      	movcc	r0, #16
3400f112:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400f116:	bf3c      	itt	cc
3400f118:	021b      	lslcc	r3, r3, #8
3400f11a:	3008      	addcc	r0, #8
3400f11c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f120:	bf3c      	itt	cc
3400f122:	011b      	lslcc	r3, r3, #4
3400f124:	3004      	addcc	r0, #4
3400f126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400f12a:	bf3c      	itt	cc
3400f12c:	009b      	lslcc	r3, r3, #2
3400f12e:	3002      	addcc	r0, #2
3400f130:	2b00      	cmp	r3, #0
3400f132:	db05      	blt.n	3400f140 <__hi0bits+0x3c>
3400f134:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3400f138:	f100 0001 	add.w	r0, r0, #1
3400f13c:	bf08      	it	eq
3400f13e:	2020      	moveq	r0, #32
3400f140:	4770      	bx	lr

3400f142 <__lo0bits>:
3400f142:	6803      	ldr	r3, [r0, #0]
3400f144:	4602      	mov	r2, r0
3400f146:	f013 0007 	ands.w	r0, r3, #7
3400f14a:	d00b      	beq.n	3400f164 <__lo0bits+0x22>
3400f14c:	07d9      	lsls	r1, r3, #31
3400f14e:	d421      	bmi.n	3400f194 <__lo0bits+0x52>
3400f150:	0798      	lsls	r0, r3, #30
3400f152:	bf47      	ittee	mi
3400f154:	085b      	lsrmi	r3, r3, #1
3400f156:	2001      	movmi	r0, #1
3400f158:	089b      	lsrpl	r3, r3, #2
3400f15a:	2002      	movpl	r0, #2
3400f15c:	bf4c      	ite	mi
3400f15e:	6013      	strmi	r3, [r2, #0]
3400f160:	6013      	strpl	r3, [r2, #0]
3400f162:	4770      	bx	lr
3400f164:	b299      	uxth	r1, r3
3400f166:	b909      	cbnz	r1, 3400f16c <__lo0bits+0x2a>
3400f168:	0c1b      	lsrs	r3, r3, #16
3400f16a:	2010      	movs	r0, #16
3400f16c:	b2d9      	uxtb	r1, r3
3400f16e:	b909      	cbnz	r1, 3400f174 <__lo0bits+0x32>
3400f170:	3008      	adds	r0, #8
3400f172:	0a1b      	lsrs	r3, r3, #8
3400f174:	0719      	lsls	r1, r3, #28
3400f176:	bf04      	itt	eq
3400f178:	091b      	lsreq	r3, r3, #4
3400f17a:	3004      	addeq	r0, #4
3400f17c:	0799      	lsls	r1, r3, #30
3400f17e:	bf04      	itt	eq
3400f180:	089b      	lsreq	r3, r3, #2
3400f182:	3002      	addeq	r0, #2
3400f184:	07d9      	lsls	r1, r3, #31
3400f186:	d403      	bmi.n	3400f190 <__lo0bits+0x4e>
3400f188:	085b      	lsrs	r3, r3, #1
3400f18a:	f100 0001 	add.w	r0, r0, #1
3400f18e:	d003      	beq.n	3400f198 <__lo0bits+0x56>
3400f190:	6013      	str	r3, [r2, #0]
3400f192:	4770      	bx	lr
3400f194:	2000      	movs	r0, #0
3400f196:	4770      	bx	lr
3400f198:	2020      	movs	r0, #32
3400f19a:	4770      	bx	lr

3400f19c <__i2b>:
3400f19c:	b510      	push	{r4, lr}
3400f19e:	460c      	mov	r4, r1
3400f1a0:	2101      	movs	r1, #1
3400f1a2:	f7ff ff05 	bl	3400efb0 <_Balloc>
3400f1a6:	4602      	mov	r2, r0
3400f1a8:	b928      	cbnz	r0, 3400f1b6 <__i2b+0x1a>
3400f1aa:	4b05      	ldr	r3, [pc, #20]	@ (3400f1c0 <__i2b+0x24>)
3400f1ac:	f240 1145 	movw	r1, #325	@ 0x145
3400f1b0:	4804      	ldr	r0, [pc, #16]	@ (3400f1c4 <__i2b+0x28>)
3400f1b2:	f7fd ff03 	bl	3400cfbc <__assert_func>
3400f1b6:	2301      	movs	r3, #1
3400f1b8:	6144      	str	r4, [r0, #20]
3400f1ba:	6103      	str	r3, [r0, #16]
3400f1bc:	bd10      	pop	{r4, pc}
3400f1be:	bf00      	nop
3400f1c0:	34011ec1 	.word	0x34011ec1
3400f1c4:	34011ed2 	.word	0x34011ed2

3400f1c8 <__multiply>:
3400f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400f1cc:	4614      	mov	r4, r2
3400f1ce:	690a      	ldr	r2, [r1, #16]
3400f1d0:	460f      	mov	r7, r1
3400f1d2:	b085      	sub	sp, #20
3400f1d4:	6923      	ldr	r3, [r4, #16]
3400f1d6:	429a      	cmp	r2, r3
3400f1d8:	bfa2      	ittt	ge
3400f1da:	4623      	movge	r3, r4
3400f1dc:	460c      	movge	r4, r1
3400f1de:	461f      	movge	r7, r3
3400f1e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
3400f1e4:	68a3      	ldr	r3, [r4, #8]
3400f1e6:	f8d7 9010 	ldr.w	r9, [r7, #16]
3400f1ea:	6861      	ldr	r1, [r4, #4]
3400f1ec:	eb0a 0609 	add.w	r6, sl, r9
3400f1f0:	42b3      	cmp	r3, r6
3400f1f2:	bfb8      	it	lt
3400f1f4:	3101      	addlt	r1, #1
3400f1f6:	f7ff fedb 	bl	3400efb0 <_Balloc>
3400f1fa:	b930      	cbnz	r0, 3400f20a <__multiply+0x42>
3400f1fc:	4602      	mov	r2, r0
3400f1fe:	4b45      	ldr	r3, [pc, #276]	@ (3400f314 <__multiply+0x14c>)
3400f200:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400f204:	4844      	ldr	r0, [pc, #272]	@ (3400f318 <__multiply+0x150>)
3400f206:	f7fd fed9 	bl	3400cfbc <__assert_func>
3400f20a:	f100 0514 	add.w	r5, r0, #20
3400f20e:	2200      	movs	r2, #0
3400f210:	eb05 0886 	add.w	r8, r5, r6, lsl #2
3400f214:	462b      	mov	r3, r5
3400f216:	4543      	cmp	r3, r8
3400f218:	d321      	bcc.n	3400f25e <__multiply+0x96>
3400f21a:	f107 0114 	add.w	r1, r7, #20
3400f21e:	f104 0214 	add.w	r2, r4, #20
3400f222:	f104 0715 	add.w	r7, r4, #21
3400f226:	eb02 028a 	add.w	r2, r2, sl, lsl #2
3400f22a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
3400f22e:	9302      	str	r3, [sp, #8]
3400f230:	1b13      	subs	r3, r2, r4
3400f232:	3b15      	subs	r3, #21
3400f234:	f023 0303 	bic.w	r3, r3, #3
3400f238:	3304      	adds	r3, #4
3400f23a:	42ba      	cmp	r2, r7
3400f23c:	bf38      	it	cc
3400f23e:	2304      	movcc	r3, #4
3400f240:	9301      	str	r3, [sp, #4]
3400f242:	9b02      	ldr	r3, [sp, #8]
3400f244:	9103      	str	r1, [sp, #12]
3400f246:	428b      	cmp	r3, r1
3400f248:	d80c      	bhi.n	3400f264 <__multiply+0x9c>
3400f24a:	2e00      	cmp	r6, #0
3400f24c:	dd03      	ble.n	3400f256 <__multiply+0x8e>
3400f24e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
3400f252:	2b00      	cmp	r3, #0
3400f254:	d05b      	beq.n	3400f30e <__multiply+0x146>
3400f256:	6106      	str	r6, [r0, #16]
3400f258:	b005      	add	sp, #20
3400f25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400f25e:	f843 2b04 	str.w	r2, [r3], #4
3400f262:	e7d8      	b.n	3400f216 <__multiply+0x4e>
3400f264:	f8b1 a000 	ldrh.w	sl, [r1]
3400f268:	f1ba 0f00 	cmp.w	sl, #0
3400f26c:	d024      	beq.n	3400f2b8 <__multiply+0xf0>
3400f26e:	f104 0e14 	add.w	lr, r4, #20
3400f272:	46a9      	mov	r9, r5
3400f274:	f04f 0c00 	mov.w	ip, #0
3400f278:	f85e 7b04 	ldr.w	r7, [lr], #4
3400f27c:	f8d9 3000 	ldr.w	r3, [r9]
3400f280:	fa1f fb87 	uxth.w	fp, r7
3400f284:	4572      	cmp	r2, lr
3400f286:	b29b      	uxth	r3, r3
3400f288:	fb0a 330b 	mla	r3, sl, fp, r3
3400f28c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
3400f290:	f8d9 7000 	ldr.w	r7, [r9]
3400f294:	4463      	add	r3, ip
3400f296:	ea4f 4c17 	mov.w	ip, r7, lsr #16
3400f29a:	fb0a c70b 	mla	r7, sl, fp, ip
3400f29e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
3400f2a2:	b29b      	uxth	r3, r3
3400f2a4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
3400f2a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
3400f2ac:	f849 3b04 	str.w	r3, [r9], #4
3400f2b0:	d8e2      	bhi.n	3400f278 <__multiply+0xb0>
3400f2b2:	9b01      	ldr	r3, [sp, #4]
3400f2b4:	f845 c003 	str.w	ip, [r5, r3]
3400f2b8:	9b03      	ldr	r3, [sp, #12]
3400f2ba:	3104      	adds	r1, #4
3400f2bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3400f2c0:	f1b9 0f00 	cmp.w	r9, #0
3400f2c4:	d021      	beq.n	3400f30a <__multiply+0x142>
3400f2c6:	682b      	ldr	r3, [r5, #0]
3400f2c8:	f104 0c14 	add.w	ip, r4, #20
3400f2cc:	46ae      	mov	lr, r5
3400f2ce:	f04f 0a00 	mov.w	sl, #0
3400f2d2:	f8bc b000 	ldrh.w	fp, [ip]
3400f2d6:	b29b      	uxth	r3, r3
3400f2d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
3400f2dc:	fb09 770b 	mla	r7, r9, fp, r7
3400f2e0:	4457      	add	r7, sl
3400f2e2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
3400f2e6:	f84e 3b04 	str.w	r3, [lr], #4
3400f2ea:	f85c 3b04 	ldr.w	r3, [ip], #4
3400f2ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400f2f2:	f8be 3000 	ldrh.w	r3, [lr]
3400f2f6:	4562      	cmp	r2, ip
3400f2f8:	fb09 330a 	mla	r3, r9, sl, r3
3400f2fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
3400f300:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400f304:	d8e5      	bhi.n	3400f2d2 <__multiply+0x10a>
3400f306:	9f01      	ldr	r7, [sp, #4]
3400f308:	51eb      	str	r3, [r5, r7]
3400f30a:	3504      	adds	r5, #4
3400f30c:	e799      	b.n	3400f242 <__multiply+0x7a>
3400f30e:	3e01      	subs	r6, #1
3400f310:	e79b      	b.n	3400f24a <__multiply+0x82>
3400f312:	bf00      	nop
3400f314:	34011ec1 	.word	0x34011ec1
3400f318:	34011ed2 	.word	0x34011ed2

3400f31c <__pow5mult>:
3400f31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400f320:	4615      	mov	r5, r2
3400f322:	f012 0203 	ands.w	r2, r2, #3
3400f326:	4607      	mov	r7, r0
3400f328:	460e      	mov	r6, r1
3400f32a:	d007      	beq.n	3400f33c <__pow5mult+0x20>
3400f32c:	3a01      	subs	r2, #1
3400f32e:	4c25      	ldr	r4, [pc, #148]	@ (3400f3c4 <__pow5mult+0xa8>)
3400f330:	2300      	movs	r3, #0
3400f332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3400f336:	f7ff fe9d 	bl	3400f074 <__multadd>
3400f33a:	4606      	mov	r6, r0
3400f33c:	10ad      	asrs	r5, r5, #2
3400f33e:	d03d      	beq.n	3400f3bc <__pow5mult+0xa0>
3400f340:	69fc      	ldr	r4, [r7, #28]
3400f342:	b97c      	cbnz	r4, 3400f364 <__pow5mult+0x48>
3400f344:	2010      	movs	r0, #16
3400f346:	f7fd fe57 	bl	3400cff8 <malloc>
3400f34a:	4602      	mov	r2, r0
3400f34c:	61f8      	str	r0, [r7, #28]
3400f34e:	b928      	cbnz	r0, 3400f35c <__pow5mult+0x40>
3400f350:	4b1d      	ldr	r3, [pc, #116]	@ (3400f3c8 <__pow5mult+0xac>)
3400f352:	f240 11b3 	movw	r1, #435	@ 0x1b3
3400f356:	481d      	ldr	r0, [pc, #116]	@ (3400f3cc <__pow5mult+0xb0>)
3400f358:	f7fd fe30 	bl	3400cfbc <__assert_func>
3400f35c:	e9c0 4401 	strd	r4, r4, [r0, #4]
3400f360:	6004      	str	r4, [r0, #0]
3400f362:	60c4      	str	r4, [r0, #12]
3400f364:	f8d7 801c 	ldr.w	r8, [r7, #28]
3400f368:	f8d8 4008 	ldr.w	r4, [r8, #8]
3400f36c:	b94c      	cbnz	r4, 3400f382 <__pow5mult+0x66>
3400f36e:	f240 2171 	movw	r1, #625	@ 0x271
3400f372:	4638      	mov	r0, r7
3400f374:	f7ff ff12 	bl	3400f19c <__i2b>
3400f378:	2300      	movs	r3, #0
3400f37a:	4604      	mov	r4, r0
3400f37c:	f8c8 0008 	str.w	r0, [r8, #8]
3400f380:	6003      	str	r3, [r0, #0]
3400f382:	f04f 0900 	mov.w	r9, #0
3400f386:	07eb      	lsls	r3, r5, #31
3400f388:	d50a      	bpl.n	3400f3a0 <__pow5mult+0x84>
3400f38a:	4631      	mov	r1, r6
3400f38c:	4622      	mov	r2, r4
3400f38e:	4638      	mov	r0, r7
3400f390:	f7ff ff1a 	bl	3400f1c8 <__multiply>
3400f394:	4680      	mov	r8, r0
3400f396:	4631      	mov	r1, r6
3400f398:	4638      	mov	r0, r7
3400f39a:	4646      	mov	r6, r8
3400f39c:	f7ff fe48 	bl	3400f030 <_Bfree>
3400f3a0:	106d      	asrs	r5, r5, #1
3400f3a2:	d00b      	beq.n	3400f3bc <__pow5mult+0xa0>
3400f3a4:	6820      	ldr	r0, [r4, #0]
3400f3a6:	b938      	cbnz	r0, 3400f3b8 <__pow5mult+0x9c>
3400f3a8:	4622      	mov	r2, r4
3400f3aa:	4621      	mov	r1, r4
3400f3ac:	4638      	mov	r0, r7
3400f3ae:	f7ff ff0b 	bl	3400f1c8 <__multiply>
3400f3b2:	6020      	str	r0, [r4, #0]
3400f3b4:	f8c0 9000 	str.w	r9, [r0]
3400f3b8:	4604      	mov	r4, r0
3400f3ba:	e7e4      	b.n	3400f386 <__pow5mult+0x6a>
3400f3bc:	4630      	mov	r0, r6
3400f3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400f3c2:	bf00      	nop
3400f3c4:	34011f2c 	.word	0x34011f2c
3400f3c8:	34011e52 	.word	0x34011e52
3400f3cc:	34011ed2 	.word	0x34011ed2

3400f3d0 <__lshift>:
3400f3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400f3d4:	460c      	mov	r4, r1
3400f3d6:	4607      	mov	r7, r0
3400f3d8:	4691      	mov	r9, r2
3400f3da:	ea4f 1a62 	mov.w	sl, r2, asr #5
3400f3de:	6923      	ldr	r3, [r4, #16]
3400f3e0:	6849      	ldr	r1, [r1, #4]
3400f3e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
3400f3e6:	68a3      	ldr	r3, [r4, #8]
3400f3e8:	f108 0601 	add.w	r6, r8, #1
3400f3ec:	42b3      	cmp	r3, r6
3400f3ee:	db0b      	blt.n	3400f408 <__lshift+0x38>
3400f3f0:	4638      	mov	r0, r7
3400f3f2:	f7ff fddd 	bl	3400efb0 <_Balloc>
3400f3f6:	4605      	mov	r5, r0
3400f3f8:	b948      	cbnz	r0, 3400f40e <__lshift+0x3e>
3400f3fa:	4602      	mov	r2, r0
3400f3fc:	4b28      	ldr	r3, [pc, #160]	@ (3400f4a0 <__lshift+0xd0>)
3400f3fe:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400f402:	4828      	ldr	r0, [pc, #160]	@ (3400f4a4 <__lshift+0xd4>)
3400f404:	f7fd fdda 	bl	3400cfbc <__assert_func>
3400f408:	3101      	adds	r1, #1
3400f40a:	005b      	lsls	r3, r3, #1
3400f40c:	e7ee      	b.n	3400f3ec <__lshift+0x1c>
3400f40e:	2300      	movs	r3, #0
3400f410:	f100 0114 	add.w	r1, r0, #20
3400f414:	f100 0210 	add.w	r2, r0, #16
3400f418:	4618      	mov	r0, r3
3400f41a:	4553      	cmp	r3, sl
3400f41c:	db33      	blt.n	3400f486 <__lshift+0xb6>
3400f41e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3400f422:	f104 0314 	add.w	r3, r4, #20
3400f426:	6920      	ldr	r0, [r4, #16]
3400f428:	f019 091f 	ands.w	r9, r9, #31
3400f42c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3400f430:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3400f434:	d02b      	beq.n	3400f48e <__lshift+0xbe>
3400f436:	f1c9 0e20 	rsb	lr, r9, #32
3400f43a:	468a      	mov	sl, r1
3400f43c:	2200      	movs	r2, #0
3400f43e:	6818      	ldr	r0, [r3, #0]
3400f440:	fa00 f009 	lsl.w	r0, r0, r9
3400f444:	4310      	orrs	r0, r2
3400f446:	f84a 0b04 	str.w	r0, [sl], #4
3400f44a:	f853 2b04 	ldr.w	r2, [r3], #4
3400f44e:	459c      	cmp	ip, r3
3400f450:	fa22 f20e 	lsr.w	r2, r2, lr
3400f454:	d8f3      	bhi.n	3400f43e <__lshift+0x6e>
3400f456:	ebac 0304 	sub.w	r3, ip, r4
3400f45a:	f104 0015 	add.w	r0, r4, #21
3400f45e:	3b15      	subs	r3, #21
3400f460:	f023 0303 	bic.w	r3, r3, #3
3400f464:	3304      	adds	r3, #4
3400f466:	4584      	cmp	ip, r0
3400f468:	bf38      	it	cc
3400f46a:	2304      	movcc	r3, #4
3400f46c:	50ca      	str	r2, [r1, r3]
3400f46e:	b10a      	cbz	r2, 3400f474 <__lshift+0xa4>
3400f470:	f108 0602 	add.w	r6, r8, #2
3400f474:	3e01      	subs	r6, #1
3400f476:	4638      	mov	r0, r7
3400f478:	4621      	mov	r1, r4
3400f47a:	612e      	str	r6, [r5, #16]
3400f47c:	f7ff fdd8 	bl	3400f030 <_Bfree>
3400f480:	4628      	mov	r0, r5
3400f482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400f486:	3301      	adds	r3, #1
3400f488:	f842 0f04 	str.w	r0, [r2, #4]!
3400f48c:	e7c5      	b.n	3400f41a <__lshift+0x4a>
3400f48e:	3904      	subs	r1, #4
3400f490:	f853 2b04 	ldr.w	r2, [r3], #4
3400f494:	459c      	cmp	ip, r3
3400f496:	f841 2f04 	str.w	r2, [r1, #4]!
3400f49a:	d8f9      	bhi.n	3400f490 <__lshift+0xc0>
3400f49c:	e7ea      	b.n	3400f474 <__lshift+0xa4>
3400f49e:	bf00      	nop
3400f4a0:	34011ec1 	.word	0x34011ec1
3400f4a4:	34011ed2 	.word	0x34011ed2

3400f4a8 <__mcmp>:
3400f4a8:	4603      	mov	r3, r0
3400f4aa:	690a      	ldr	r2, [r1, #16]
3400f4ac:	6900      	ldr	r0, [r0, #16]
3400f4ae:	1a80      	subs	r0, r0, r2
3400f4b0:	b530      	push	{r4, r5, lr}
3400f4b2:	d10e      	bne.n	3400f4d2 <__mcmp+0x2a>
3400f4b4:	3314      	adds	r3, #20
3400f4b6:	3114      	adds	r1, #20
3400f4b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
3400f4bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
3400f4c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3400f4c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3400f4c8:	4295      	cmp	r5, r2
3400f4ca:	d003      	beq.n	3400f4d4 <__mcmp+0x2c>
3400f4cc:	d205      	bcs.n	3400f4da <__mcmp+0x32>
3400f4ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400f4d2:	bd30      	pop	{r4, r5, pc}
3400f4d4:	42a3      	cmp	r3, r4
3400f4d6:	d3f3      	bcc.n	3400f4c0 <__mcmp+0x18>
3400f4d8:	e7fb      	b.n	3400f4d2 <__mcmp+0x2a>
3400f4da:	2001      	movs	r0, #1
3400f4dc:	e7f9      	b.n	3400f4d2 <__mcmp+0x2a>
	...

3400f4e0 <__mdiff>:
3400f4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400f4e4:	4689      	mov	r9, r1
3400f4e6:	4606      	mov	r6, r0
3400f4e8:	4611      	mov	r1, r2
3400f4ea:	4614      	mov	r4, r2
3400f4ec:	4648      	mov	r0, r9
3400f4ee:	f7ff ffdb 	bl	3400f4a8 <__mcmp>
3400f4f2:	1e05      	subs	r5, r0, #0
3400f4f4:	d112      	bne.n	3400f51c <__mdiff+0x3c>
3400f4f6:	4629      	mov	r1, r5
3400f4f8:	4630      	mov	r0, r6
3400f4fa:	f7ff fd59 	bl	3400efb0 <_Balloc>
3400f4fe:	4602      	mov	r2, r0
3400f500:	b928      	cbnz	r0, 3400f50e <__mdiff+0x2e>
3400f502:	4b41      	ldr	r3, [pc, #260]	@ (3400f608 <__mdiff+0x128>)
3400f504:	f240 2137 	movw	r1, #567	@ 0x237
3400f508:	4840      	ldr	r0, [pc, #256]	@ (3400f60c <__mdiff+0x12c>)
3400f50a:	f7fd fd57 	bl	3400cfbc <__assert_func>
3400f50e:	2301      	movs	r3, #1
3400f510:	e9c0 3504 	strd	r3, r5, [r0, #16]
3400f514:	4610      	mov	r0, r2
3400f516:	b003      	add	sp, #12
3400f518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400f51c:	bfbc      	itt	lt
3400f51e:	464b      	movlt	r3, r9
3400f520:	46a1      	movlt	r9, r4
3400f522:	4630      	mov	r0, r6
3400f524:	bfb8      	it	lt
3400f526:	2501      	movlt	r5, #1
3400f528:	f8d9 1004 	ldr.w	r1, [r9, #4]
3400f52c:	bfb4      	ite	lt
3400f52e:	461c      	movlt	r4, r3
3400f530:	2500      	movge	r5, #0
3400f532:	f7ff fd3d 	bl	3400efb0 <_Balloc>
3400f536:	4602      	mov	r2, r0
3400f538:	b918      	cbnz	r0, 3400f542 <__mdiff+0x62>
3400f53a:	4b33      	ldr	r3, [pc, #204]	@ (3400f608 <__mdiff+0x128>)
3400f53c:	f240 2145 	movw	r1, #581	@ 0x245
3400f540:	e7e2      	b.n	3400f508 <__mdiff+0x28>
3400f542:	f8d9 7010 	ldr.w	r7, [r9, #16]
3400f546:	f104 0e14 	add.w	lr, r4, #20
3400f54a:	6926      	ldr	r6, [r4, #16]
3400f54c:	f100 0b14 	add.w	fp, r0, #20
3400f550:	60c5      	str	r5, [r0, #12]
3400f552:	f109 0514 	add.w	r5, r9, #20
3400f556:	f109 0310 	add.w	r3, r9, #16
3400f55a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3400f55e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3400f562:	46d9      	mov	r9, fp
3400f564:	f04f 0c00 	mov.w	ip, #0
3400f568:	9301      	str	r3, [sp, #4]
3400f56a:	9b01      	ldr	r3, [sp, #4]
3400f56c:	f85e 0b04 	ldr.w	r0, [lr], #4
3400f570:	f853 af04 	ldr.w	sl, [r3, #4]!
3400f574:	4576      	cmp	r6, lr
3400f576:	9301      	str	r3, [sp, #4]
3400f578:	fa1f f38a 	uxth.w	r3, sl
3400f57c:	4619      	mov	r1, r3
3400f57e:	b283      	uxth	r3, r0
3400f580:	ea4f 4010 	mov.w	r0, r0, lsr #16
3400f584:	eba1 0303 	sub.w	r3, r1, r3
3400f588:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
3400f58c:	4463      	add	r3, ip
3400f58e:	eb00 4023 	add.w	r0, r0, r3, asr #16
3400f592:	b29b      	uxth	r3, r3
3400f594:	ea4f 4c20 	mov.w	ip, r0, asr #16
3400f598:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3400f59c:	f849 3b04 	str.w	r3, [r9], #4
3400f5a0:	d8e3      	bhi.n	3400f56a <__mdiff+0x8a>
3400f5a2:	1b33      	subs	r3, r6, r4
3400f5a4:	3415      	adds	r4, #21
3400f5a6:	3b15      	subs	r3, #21
3400f5a8:	f023 0303 	bic.w	r3, r3, #3
3400f5ac:	3304      	adds	r3, #4
3400f5ae:	42a6      	cmp	r6, r4
3400f5b0:	bf38      	it	cc
3400f5b2:	2304      	movcc	r3, #4
3400f5b4:	441d      	add	r5, r3
3400f5b6:	445b      	add	r3, fp
3400f5b8:	462c      	mov	r4, r5
3400f5ba:	461e      	mov	r6, r3
3400f5bc:	4544      	cmp	r4, r8
3400f5be:	d30e      	bcc.n	3400f5de <__mdiff+0xfe>
3400f5c0:	f108 0103 	add.w	r1, r8, #3
3400f5c4:	1b49      	subs	r1, r1, r5
3400f5c6:	3d03      	subs	r5, #3
3400f5c8:	f021 0103 	bic.w	r1, r1, #3
3400f5cc:	45a8      	cmp	r8, r5
3400f5ce:	bf38      	it	cc
3400f5d0:	2100      	movcc	r1, #0
3400f5d2:	440b      	add	r3, r1
3400f5d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3400f5d8:	b199      	cbz	r1, 3400f602 <__mdiff+0x122>
3400f5da:	6117      	str	r7, [r2, #16]
3400f5dc:	e79a      	b.n	3400f514 <__mdiff+0x34>
3400f5de:	f854 1b04 	ldr.w	r1, [r4], #4
3400f5e2:	46e6      	mov	lr, ip
3400f5e4:	fa1f fc81 	uxth.w	ip, r1
3400f5e8:	0c08      	lsrs	r0, r1, #16
3400f5ea:	4471      	add	r1, lr
3400f5ec:	44f4      	add	ip, lr
3400f5ee:	b289      	uxth	r1, r1
3400f5f0:	eb00 402c 	add.w	r0, r0, ip, asr #16
3400f5f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
3400f5f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
3400f5fc:	f846 1b04 	str.w	r1, [r6], #4
3400f600:	e7dc      	b.n	3400f5bc <__mdiff+0xdc>
3400f602:	3f01      	subs	r7, #1
3400f604:	e7e6      	b.n	3400f5d4 <__mdiff+0xf4>
3400f606:	bf00      	nop
3400f608:	34011ec1 	.word	0x34011ec1
3400f60c:	34011ed2 	.word	0x34011ed2

3400f610 <__d2b>:
3400f610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400f614:	460f      	mov	r7, r1
3400f616:	2101      	movs	r1, #1
3400f618:	4616      	mov	r6, r2
3400f61a:	ec59 8b10 	vmov	r8, r9, d0
3400f61e:	f7ff fcc7 	bl	3400efb0 <_Balloc>
3400f622:	4604      	mov	r4, r0
3400f624:	b930      	cbnz	r0, 3400f634 <__d2b+0x24>
3400f626:	4602      	mov	r2, r0
3400f628:	4b23      	ldr	r3, [pc, #140]	@ (3400f6b8 <__d2b+0xa8>)
3400f62a:	f240 310f 	movw	r1, #783	@ 0x30f
3400f62e:	4823      	ldr	r0, [pc, #140]	@ (3400f6bc <__d2b+0xac>)
3400f630:	f7fd fcc4 	bl	3400cfbc <__assert_func>
3400f634:	f3c9 550a 	ubfx	r5, r9, #20, #11
3400f638:	f3c9 0313 	ubfx	r3, r9, #0, #20
3400f63c:	b10d      	cbz	r5, 3400f642 <__d2b+0x32>
3400f63e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3400f642:	9301      	str	r3, [sp, #4]
3400f644:	f1b8 0300 	subs.w	r3, r8, #0
3400f648:	d023      	beq.n	3400f692 <__d2b+0x82>
3400f64a:	4668      	mov	r0, sp
3400f64c:	9300      	str	r3, [sp, #0]
3400f64e:	f7ff fd78 	bl	3400f142 <__lo0bits>
3400f652:	e9dd 1200 	ldrd	r1, r2, [sp]
3400f656:	b1d0      	cbz	r0, 3400f68e <__d2b+0x7e>
3400f658:	f1c0 0320 	rsb	r3, r0, #32
3400f65c:	fa02 f303 	lsl.w	r3, r2, r3
3400f660:	40c2      	lsrs	r2, r0
3400f662:	430b      	orrs	r3, r1
3400f664:	9201      	str	r2, [sp, #4]
3400f666:	6163      	str	r3, [r4, #20]
3400f668:	9b01      	ldr	r3, [sp, #4]
3400f66a:	2b00      	cmp	r3, #0
3400f66c:	61a3      	str	r3, [r4, #24]
3400f66e:	bf0c      	ite	eq
3400f670:	2201      	moveq	r2, #1
3400f672:	2202      	movne	r2, #2
3400f674:	6122      	str	r2, [r4, #16]
3400f676:	b1a5      	cbz	r5, 3400f6a2 <__d2b+0x92>
3400f678:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
3400f67c:	4405      	add	r5, r0
3400f67e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3400f682:	603d      	str	r5, [r7, #0]
3400f684:	6030      	str	r0, [r6, #0]
3400f686:	4620      	mov	r0, r4
3400f688:	b003      	add	sp, #12
3400f68a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3400f68e:	6161      	str	r1, [r4, #20]
3400f690:	e7ea      	b.n	3400f668 <__d2b+0x58>
3400f692:	a801      	add	r0, sp, #4
3400f694:	f7ff fd55 	bl	3400f142 <__lo0bits>
3400f698:	9b01      	ldr	r3, [sp, #4]
3400f69a:	3020      	adds	r0, #32
3400f69c:	2201      	movs	r2, #1
3400f69e:	6163      	str	r3, [r4, #20]
3400f6a0:	e7e8      	b.n	3400f674 <__d2b+0x64>
3400f6a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3400f6a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3400f6aa:	6038      	str	r0, [r7, #0]
3400f6ac:	6918      	ldr	r0, [r3, #16]
3400f6ae:	f7ff fd29 	bl	3400f104 <__hi0bits>
3400f6b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3400f6b6:	e7e5      	b.n	3400f684 <__d2b+0x74>
3400f6b8:	34011ec1 	.word	0x34011ec1
3400f6bc:	34011ed2 	.word	0x34011ed2

3400f6c0 <__sfputc_r>:
3400f6c0:	6893      	ldr	r3, [r2, #8]
3400f6c2:	3b01      	subs	r3, #1
3400f6c4:	2b00      	cmp	r3, #0
3400f6c6:	6093      	str	r3, [r2, #8]
3400f6c8:	b410      	push	{r4}
3400f6ca:	da08      	bge.n	3400f6de <__sfputc_r+0x1e>
3400f6cc:	6994      	ldr	r4, [r2, #24]
3400f6ce:	42a3      	cmp	r3, r4
3400f6d0:	db01      	blt.n	3400f6d6 <__sfputc_r+0x16>
3400f6d2:	290a      	cmp	r1, #10
3400f6d4:	d103      	bne.n	3400f6de <__sfputc_r+0x1e>
3400f6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
3400f6da:	f7fe bb04 	b.w	3400dce6 <__swbuf_r>
3400f6de:	6813      	ldr	r3, [r2, #0]
3400f6e0:	1c58      	adds	r0, r3, #1
3400f6e2:	6010      	str	r0, [r2, #0]
3400f6e4:	4608      	mov	r0, r1
3400f6e6:	7019      	strb	r1, [r3, #0]
3400f6e8:	f85d 4b04 	ldr.w	r4, [sp], #4
3400f6ec:	4770      	bx	lr

3400f6ee <__sfputs_r>:
3400f6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400f6f0:	4606      	mov	r6, r0
3400f6f2:	460f      	mov	r7, r1
3400f6f4:	4614      	mov	r4, r2
3400f6f6:	18d5      	adds	r5, r2, r3
3400f6f8:	42ac      	cmp	r4, r5
3400f6fa:	d101      	bne.n	3400f700 <__sfputs_r+0x12>
3400f6fc:	2000      	movs	r0, #0
3400f6fe:	e007      	b.n	3400f710 <__sfputs_r+0x22>
3400f700:	463a      	mov	r2, r7
3400f702:	f814 1b01 	ldrb.w	r1, [r4], #1
3400f706:	4630      	mov	r0, r6
3400f708:	f7ff ffda 	bl	3400f6c0 <__sfputc_r>
3400f70c:	1c43      	adds	r3, r0, #1
3400f70e:	d1f3      	bne.n	3400f6f8 <__sfputs_r+0xa>
3400f710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

3400f714 <_vfiprintf_r>:
3400f714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400f718:	460d      	mov	r5, r1
3400f71a:	b09d      	sub	sp, #116	@ 0x74
3400f71c:	4614      	mov	r4, r2
3400f71e:	4698      	mov	r8, r3
3400f720:	4606      	mov	r6, r0
3400f722:	b118      	cbz	r0, 3400f72c <_vfiprintf_r+0x18>
3400f724:	6a03      	ldr	r3, [r0, #32]
3400f726:	b90b      	cbnz	r3, 3400f72c <_vfiprintf_r+0x18>
3400f728:	f7fe f9e2 	bl	3400daf0 <__sinit>
3400f72c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3400f72e:	07d9      	lsls	r1, r3, #31
3400f730:	d405      	bmi.n	3400f73e <_vfiprintf_r+0x2a>
3400f732:	89ab      	ldrh	r3, [r5, #12]
3400f734:	059a      	lsls	r2, r3, #22
3400f736:	d402      	bmi.n	3400f73e <_vfiprintf_r+0x2a>
3400f738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3400f73a:	f7fe fde8 	bl	3400e30e <__retarget_lock_acquire_recursive>
3400f73e:	89ab      	ldrh	r3, [r5, #12]
3400f740:	071b      	lsls	r3, r3, #28
3400f742:	d501      	bpl.n	3400f748 <_vfiprintf_r+0x34>
3400f744:	692b      	ldr	r3, [r5, #16]
3400f746:	b99b      	cbnz	r3, 3400f770 <_vfiprintf_r+0x5c>
3400f748:	4629      	mov	r1, r5
3400f74a:	4630      	mov	r0, r6
3400f74c:	f7fe fb0a 	bl	3400dd64 <__swsetup_r>
3400f750:	b170      	cbz	r0, 3400f770 <_vfiprintf_r+0x5c>
3400f752:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3400f754:	07dc      	lsls	r4, r3, #31
3400f756:	d504      	bpl.n	3400f762 <_vfiprintf_r+0x4e>
3400f758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400f75c:	b01d      	add	sp, #116	@ 0x74
3400f75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400f762:	89ab      	ldrh	r3, [r5, #12]
3400f764:	0598      	lsls	r0, r3, #22
3400f766:	d4f7      	bmi.n	3400f758 <_vfiprintf_r+0x44>
3400f768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3400f76a:	f7fe fdd1 	bl	3400e310 <__retarget_lock_release_recursive>
3400f76e:	e7f3      	b.n	3400f758 <_vfiprintf_r+0x44>
3400f770:	2300      	movs	r3, #0
3400f772:	f8cd 800c 	str.w	r8, [sp, #12]
3400f776:	f04f 0901 	mov.w	r9, #1
3400f77a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3400f930 <_vfiprintf_r+0x21c>
3400f77e:	9309      	str	r3, [sp, #36]	@ 0x24
3400f780:	2320      	movs	r3, #32
3400f782:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3400f786:	2330      	movs	r3, #48	@ 0x30
3400f788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3400f78c:	4623      	mov	r3, r4
3400f78e:	469a      	mov	sl, r3
3400f790:	f813 2b01 	ldrb.w	r2, [r3], #1
3400f794:	b10a      	cbz	r2, 3400f79a <_vfiprintf_r+0x86>
3400f796:	2a25      	cmp	r2, #37	@ 0x25
3400f798:	d1f9      	bne.n	3400f78e <_vfiprintf_r+0x7a>
3400f79a:	ebba 0b04 	subs.w	fp, sl, r4
3400f79e:	d00b      	beq.n	3400f7b8 <_vfiprintf_r+0xa4>
3400f7a0:	465b      	mov	r3, fp
3400f7a2:	4622      	mov	r2, r4
3400f7a4:	4629      	mov	r1, r5
3400f7a6:	4630      	mov	r0, r6
3400f7a8:	f7ff ffa1 	bl	3400f6ee <__sfputs_r>
3400f7ac:	3001      	adds	r0, #1
3400f7ae:	f000 80a7 	beq.w	3400f900 <_vfiprintf_r+0x1ec>
3400f7b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400f7b4:	445a      	add	r2, fp
3400f7b6:	9209      	str	r2, [sp, #36]	@ 0x24
3400f7b8:	f89a 3000 	ldrb.w	r3, [sl]
3400f7bc:	2b00      	cmp	r3, #0
3400f7be:	f000 809f 	beq.w	3400f900 <_vfiprintf_r+0x1ec>
3400f7c2:	2300      	movs	r3, #0
3400f7c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400f7c8:	f10a 0a01 	add.w	sl, sl, #1
3400f7cc:	9304      	str	r3, [sp, #16]
3400f7ce:	9307      	str	r3, [sp, #28]
3400f7d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3400f7d4:	931a      	str	r3, [sp, #104]	@ 0x68
3400f7d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
3400f7da:	4654      	mov	r4, sl
3400f7dc:	2205      	movs	r2, #5
3400f7de:	4854      	ldr	r0, [pc, #336]	@ (3400f930 <_vfiprintf_r+0x21c>)
3400f7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
3400f7e4:	f7fe fd95 	bl	3400e312 <memchr>
3400f7e8:	9a04      	ldr	r2, [sp, #16]
3400f7ea:	b9d8      	cbnz	r0, 3400f824 <_vfiprintf_r+0x110>
3400f7ec:	06d1      	lsls	r1, r2, #27
3400f7ee:	bf44      	itt	mi
3400f7f0:	2320      	movmi	r3, #32
3400f7f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3400f7f6:	0713      	lsls	r3, r2, #28
3400f7f8:	bf44      	itt	mi
3400f7fa:	232b      	movmi	r3, #43	@ 0x2b
3400f7fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3400f800:	f89a 3000 	ldrb.w	r3, [sl]
3400f804:	2b2a      	cmp	r3, #42	@ 0x2a
3400f806:	d015      	beq.n	3400f834 <_vfiprintf_r+0x120>
3400f808:	9a07      	ldr	r2, [sp, #28]
3400f80a:	4654      	mov	r4, sl
3400f80c:	2000      	movs	r0, #0
3400f80e:	f04f 0c0a 	mov.w	ip, #10
3400f812:	4621      	mov	r1, r4
3400f814:	f811 3b01 	ldrb.w	r3, [r1], #1
3400f818:	3b30      	subs	r3, #48	@ 0x30
3400f81a:	2b09      	cmp	r3, #9
3400f81c:	d94b      	bls.n	3400f8b6 <_vfiprintf_r+0x1a2>
3400f81e:	b1b0      	cbz	r0, 3400f84e <_vfiprintf_r+0x13a>
3400f820:	9207      	str	r2, [sp, #28]
3400f822:	e014      	b.n	3400f84e <_vfiprintf_r+0x13a>
3400f824:	eba0 0308 	sub.w	r3, r0, r8
3400f828:	46a2      	mov	sl, r4
3400f82a:	fa09 f303 	lsl.w	r3, r9, r3
3400f82e:	4313      	orrs	r3, r2
3400f830:	9304      	str	r3, [sp, #16]
3400f832:	e7d2      	b.n	3400f7da <_vfiprintf_r+0xc6>
3400f834:	9b03      	ldr	r3, [sp, #12]
3400f836:	1d19      	adds	r1, r3, #4
3400f838:	681b      	ldr	r3, [r3, #0]
3400f83a:	2b00      	cmp	r3, #0
3400f83c:	9103      	str	r1, [sp, #12]
3400f83e:	bfbb      	ittet	lt
3400f840:	425b      	neglt	r3, r3
3400f842:	f042 0202 	orrlt.w	r2, r2, #2
3400f846:	9307      	strge	r3, [sp, #28]
3400f848:	9307      	strlt	r3, [sp, #28]
3400f84a:	bfb8      	it	lt
3400f84c:	9204      	strlt	r2, [sp, #16]
3400f84e:	7823      	ldrb	r3, [r4, #0]
3400f850:	2b2e      	cmp	r3, #46	@ 0x2e
3400f852:	d10a      	bne.n	3400f86a <_vfiprintf_r+0x156>
3400f854:	7863      	ldrb	r3, [r4, #1]
3400f856:	2b2a      	cmp	r3, #42	@ 0x2a
3400f858:	d132      	bne.n	3400f8c0 <_vfiprintf_r+0x1ac>
3400f85a:	9b03      	ldr	r3, [sp, #12]
3400f85c:	3402      	adds	r4, #2
3400f85e:	1d1a      	adds	r2, r3, #4
3400f860:	681b      	ldr	r3, [r3, #0]
3400f862:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3400f866:	9203      	str	r2, [sp, #12]
3400f868:	9305      	str	r3, [sp, #20]
3400f86a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3400f940 <_vfiprintf_r+0x22c>
3400f86e:	2203      	movs	r2, #3
3400f870:	7821      	ldrb	r1, [r4, #0]
3400f872:	4650      	mov	r0, sl
3400f874:	f7fe fd4d 	bl	3400e312 <memchr>
3400f878:	b138      	cbz	r0, 3400f88a <_vfiprintf_r+0x176>
3400f87a:	eba0 000a 	sub.w	r0, r0, sl
3400f87e:	2240      	movs	r2, #64	@ 0x40
3400f880:	9b04      	ldr	r3, [sp, #16]
3400f882:	3401      	adds	r4, #1
3400f884:	4082      	lsls	r2, r0
3400f886:	4313      	orrs	r3, r2
3400f888:	9304      	str	r3, [sp, #16]
3400f88a:	f814 1b01 	ldrb.w	r1, [r4], #1
3400f88e:	2206      	movs	r2, #6
3400f890:	4828      	ldr	r0, [pc, #160]	@ (3400f934 <_vfiprintf_r+0x220>)
3400f892:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3400f896:	f7fe fd3c 	bl	3400e312 <memchr>
3400f89a:	2800      	cmp	r0, #0
3400f89c:	d03f      	beq.n	3400f91e <_vfiprintf_r+0x20a>
3400f89e:	4b26      	ldr	r3, [pc, #152]	@ (3400f938 <_vfiprintf_r+0x224>)
3400f8a0:	bb1b      	cbnz	r3, 3400f8ea <_vfiprintf_r+0x1d6>
3400f8a2:	9b03      	ldr	r3, [sp, #12]
3400f8a4:	3307      	adds	r3, #7
3400f8a6:	f023 0307 	bic.w	r3, r3, #7
3400f8aa:	3308      	adds	r3, #8
3400f8ac:	9303      	str	r3, [sp, #12]
3400f8ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f8b0:	443b      	add	r3, r7
3400f8b2:	9309      	str	r3, [sp, #36]	@ 0x24
3400f8b4:	e76a      	b.n	3400f78c <_vfiprintf_r+0x78>
3400f8b6:	fb0c 3202 	mla	r2, ip, r2, r3
3400f8ba:	460c      	mov	r4, r1
3400f8bc:	2001      	movs	r0, #1
3400f8be:	e7a8      	b.n	3400f812 <_vfiprintf_r+0xfe>
3400f8c0:	2300      	movs	r3, #0
3400f8c2:	3401      	adds	r4, #1
3400f8c4:	f04f 0c0a 	mov.w	ip, #10
3400f8c8:	4619      	mov	r1, r3
3400f8ca:	9305      	str	r3, [sp, #20]
3400f8cc:	4620      	mov	r0, r4
3400f8ce:	f810 2b01 	ldrb.w	r2, [r0], #1
3400f8d2:	3a30      	subs	r2, #48	@ 0x30
3400f8d4:	2a09      	cmp	r2, #9
3400f8d6:	d903      	bls.n	3400f8e0 <_vfiprintf_r+0x1cc>
3400f8d8:	2b00      	cmp	r3, #0
3400f8da:	d0c6      	beq.n	3400f86a <_vfiprintf_r+0x156>
3400f8dc:	9105      	str	r1, [sp, #20]
3400f8de:	e7c4      	b.n	3400f86a <_vfiprintf_r+0x156>
3400f8e0:	fb0c 2101 	mla	r1, ip, r1, r2
3400f8e4:	4604      	mov	r4, r0
3400f8e6:	2301      	movs	r3, #1
3400f8e8:	e7f0      	b.n	3400f8cc <_vfiprintf_r+0x1b8>
3400f8ea:	ab03      	add	r3, sp, #12
3400f8ec:	462a      	mov	r2, r5
3400f8ee:	a904      	add	r1, sp, #16
3400f8f0:	4630      	mov	r0, r6
3400f8f2:	9300      	str	r3, [sp, #0]
3400f8f4:	4b11      	ldr	r3, [pc, #68]	@ (3400f93c <_vfiprintf_r+0x228>)
3400f8f6:	f7fd fcc3 	bl	3400d280 <_printf_float>
3400f8fa:	4607      	mov	r7, r0
3400f8fc:	1c78      	adds	r0, r7, #1
3400f8fe:	d1d6      	bne.n	3400f8ae <_vfiprintf_r+0x19a>
3400f900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3400f902:	07d9      	lsls	r1, r3, #31
3400f904:	d405      	bmi.n	3400f912 <_vfiprintf_r+0x1fe>
3400f906:	89ab      	ldrh	r3, [r5, #12]
3400f908:	059a      	lsls	r2, r3, #22
3400f90a:	d402      	bmi.n	3400f912 <_vfiprintf_r+0x1fe>
3400f90c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3400f90e:	f7fe fcff 	bl	3400e310 <__retarget_lock_release_recursive>
3400f912:	89ab      	ldrh	r3, [r5, #12]
3400f914:	065b      	lsls	r3, r3, #25
3400f916:	f53f af1f 	bmi.w	3400f758 <_vfiprintf_r+0x44>
3400f91a:	9809      	ldr	r0, [sp, #36]	@ 0x24
3400f91c:	e71e      	b.n	3400f75c <_vfiprintf_r+0x48>
3400f91e:	ab03      	add	r3, sp, #12
3400f920:	462a      	mov	r2, r5
3400f922:	a904      	add	r1, sp, #16
3400f924:	4630      	mov	r0, r6
3400f926:	9300      	str	r3, [sp, #0]
3400f928:	4b04      	ldr	r3, [pc, #16]	@ (3400f93c <_vfiprintf_r+0x228>)
3400f92a:	f7fd ff35 	bl	3400d798 <_printf_i>
3400f92e:	e7e4      	b.n	3400f8fa <_vfiprintf_r+0x1e6>
3400f930:	34012028 	.word	0x34012028
3400f934:	34012032 	.word	0x34012032
3400f938:	3400d281 	.word	0x3400d281
3400f93c:	3400f6ef 	.word	0x3400f6ef
3400f940:	3401202e 	.word	0x3401202e

3400f944 <__sflush_r>:
3400f944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3400f948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400f94c:	0716      	lsls	r6, r2, #28
3400f94e:	4605      	mov	r5, r0
3400f950:	460c      	mov	r4, r1
3400f952:	d454      	bmi.n	3400f9fe <__sflush_r+0xba>
3400f954:	684b      	ldr	r3, [r1, #4]
3400f956:	2b00      	cmp	r3, #0
3400f958:	dc02      	bgt.n	3400f960 <__sflush_r+0x1c>
3400f95a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3400f95c:	2b00      	cmp	r3, #0
3400f95e:	dd48      	ble.n	3400f9f2 <__sflush_r+0xae>
3400f960:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400f962:	2e00      	cmp	r6, #0
3400f964:	d045      	beq.n	3400f9f2 <__sflush_r+0xae>
3400f966:	2300      	movs	r3, #0
3400f968:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3400f96c:	682f      	ldr	r7, [r5, #0]
3400f96e:	6a21      	ldr	r1, [r4, #32]
3400f970:	602b      	str	r3, [r5, #0]
3400f972:	d030      	beq.n	3400f9d6 <__sflush_r+0x92>
3400f974:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3400f976:	89a3      	ldrh	r3, [r4, #12]
3400f978:	0759      	lsls	r1, r3, #29
3400f97a:	d505      	bpl.n	3400f988 <__sflush_r+0x44>
3400f97c:	6863      	ldr	r3, [r4, #4]
3400f97e:	1ad2      	subs	r2, r2, r3
3400f980:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400f982:	b10b      	cbz	r3, 3400f988 <__sflush_r+0x44>
3400f984:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400f986:	1ad2      	subs	r2, r2, r3
3400f988:	2300      	movs	r3, #0
3400f98a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400f98c:	6a21      	ldr	r1, [r4, #32]
3400f98e:	4628      	mov	r0, r5
3400f990:	47b0      	blx	r6
3400f992:	1c43      	adds	r3, r0, #1
3400f994:	89a3      	ldrh	r3, [r4, #12]
3400f996:	d106      	bne.n	3400f9a6 <__sflush_r+0x62>
3400f998:	6829      	ldr	r1, [r5, #0]
3400f99a:	291d      	cmp	r1, #29
3400f99c:	d82b      	bhi.n	3400f9f6 <__sflush_r+0xb2>
3400f99e:	4a2a      	ldr	r2, [pc, #168]	@ (3400fa48 <__sflush_r+0x104>)
3400f9a0:	410a      	asrs	r2, r1
3400f9a2:	07d6      	lsls	r6, r2, #31
3400f9a4:	d427      	bmi.n	3400f9f6 <__sflush_r+0xb2>
3400f9a6:	2200      	movs	r2, #0
3400f9a8:	04d9      	lsls	r1, r3, #19
3400f9aa:	6062      	str	r2, [r4, #4]
3400f9ac:	6922      	ldr	r2, [r4, #16]
3400f9ae:	6022      	str	r2, [r4, #0]
3400f9b0:	d504      	bpl.n	3400f9bc <__sflush_r+0x78>
3400f9b2:	1c42      	adds	r2, r0, #1
3400f9b4:	d101      	bne.n	3400f9ba <__sflush_r+0x76>
3400f9b6:	682b      	ldr	r3, [r5, #0]
3400f9b8:	b903      	cbnz	r3, 3400f9bc <__sflush_r+0x78>
3400f9ba:	6560      	str	r0, [r4, #84]	@ 0x54
3400f9bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400f9be:	602f      	str	r7, [r5, #0]
3400f9c0:	b1b9      	cbz	r1, 3400f9f2 <__sflush_r+0xae>
3400f9c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400f9c6:	4299      	cmp	r1, r3
3400f9c8:	d002      	beq.n	3400f9d0 <__sflush_r+0x8c>
3400f9ca:	4628      	mov	r0, r5
3400f9cc:	f7ff faa6 	bl	3400ef1c <_free_r>
3400f9d0:	2300      	movs	r3, #0
3400f9d2:	6363      	str	r3, [r4, #52]	@ 0x34
3400f9d4:	e00d      	b.n	3400f9f2 <__sflush_r+0xae>
3400f9d6:	2301      	movs	r3, #1
3400f9d8:	4628      	mov	r0, r5
3400f9da:	47b0      	blx	r6
3400f9dc:	4602      	mov	r2, r0
3400f9de:	1c50      	adds	r0, r2, #1
3400f9e0:	d1c9      	bne.n	3400f976 <__sflush_r+0x32>
3400f9e2:	682b      	ldr	r3, [r5, #0]
3400f9e4:	2b00      	cmp	r3, #0
3400f9e6:	d0c6      	beq.n	3400f976 <__sflush_r+0x32>
3400f9e8:	2b1d      	cmp	r3, #29
3400f9ea:	d001      	beq.n	3400f9f0 <__sflush_r+0xac>
3400f9ec:	2b16      	cmp	r3, #22
3400f9ee:	d11d      	bne.n	3400fa2c <__sflush_r+0xe8>
3400f9f0:	602f      	str	r7, [r5, #0]
3400f9f2:	2000      	movs	r0, #0
3400f9f4:	e021      	b.n	3400fa3a <__sflush_r+0xf6>
3400f9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400f9fa:	b21b      	sxth	r3, r3
3400f9fc:	e01a      	b.n	3400fa34 <__sflush_r+0xf0>
3400f9fe:	690f      	ldr	r7, [r1, #16]
3400fa00:	2f00      	cmp	r7, #0
3400fa02:	d0f6      	beq.n	3400f9f2 <__sflush_r+0xae>
3400fa04:	0793      	lsls	r3, r2, #30
3400fa06:	680e      	ldr	r6, [r1, #0]
3400fa08:	600f      	str	r7, [r1, #0]
3400fa0a:	bf0c      	ite	eq
3400fa0c:	694b      	ldreq	r3, [r1, #20]
3400fa0e:	2300      	movne	r3, #0
3400fa10:	eba6 0807 	sub.w	r8, r6, r7
3400fa14:	608b      	str	r3, [r1, #8]
3400fa16:	f1b8 0f00 	cmp.w	r8, #0
3400fa1a:	ddea      	ble.n	3400f9f2 <__sflush_r+0xae>
3400fa1c:	4643      	mov	r3, r8
3400fa1e:	463a      	mov	r2, r7
3400fa20:	6a21      	ldr	r1, [r4, #32]
3400fa22:	4628      	mov	r0, r5
3400fa24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3400fa26:	47b0      	blx	r6
3400fa28:	2800      	cmp	r0, #0
3400fa2a:	dc08      	bgt.n	3400fa3e <__sflush_r+0xfa>
3400fa2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400fa30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400fa34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400fa38:	81a3      	strh	r3, [r4, #12]
3400fa3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400fa3e:	4407      	add	r7, r0
3400fa40:	eba8 0800 	sub.w	r8, r8, r0
3400fa44:	e7e7      	b.n	3400fa16 <__sflush_r+0xd2>
3400fa46:	bf00      	nop
3400fa48:	dfbffffe 	.word	0xdfbffffe

3400fa4c <_fflush_r>:
3400fa4c:	b538      	push	{r3, r4, r5, lr}
3400fa4e:	690b      	ldr	r3, [r1, #16]
3400fa50:	4605      	mov	r5, r0
3400fa52:	460c      	mov	r4, r1
3400fa54:	b913      	cbnz	r3, 3400fa5c <_fflush_r+0x10>
3400fa56:	2500      	movs	r5, #0
3400fa58:	4628      	mov	r0, r5
3400fa5a:	bd38      	pop	{r3, r4, r5, pc}
3400fa5c:	b118      	cbz	r0, 3400fa66 <_fflush_r+0x1a>
3400fa5e:	6a03      	ldr	r3, [r0, #32]
3400fa60:	b90b      	cbnz	r3, 3400fa66 <_fflush_r+0x1a>
3400fa62:	f7fe f845 	bl	3400daf0 <__sinit>
3400fa66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400fa6a:	2b00      	cmp	r3, #0
3400fa6c:	d0f3      	beq.n	3400fa56 <_fflush_r+0xa>
3400fa6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3400fa70:	07d0      	lsls	r0, r2, #31
3400fa72:	d404      	bmi.n	3400fa7e <_fflush_r+0x32>
3400fa74:	0599      	lsls	r1, r3, #22
3400fa76:	d402      	bmi.n	3400fa7e <_fflush_r+0x32>
3400fa78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400fa7a:	f7fe fc48 	bl	3400e30e <__retarget_lock_acquire_recursive>
3400fa7e:	4628      	mov	r0, r5
3400fa80:	4621      	mov	r1, r4
3400fa82:	f7ff ff5f 	bl	3400f944 <__sflush_r>
3400fa86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400fa88:	4605      	mov	r5, r0
3400fa8a:	07da      	lsls	r2, r3, #31
3400fa8c:	d4e4      	bmi.n	3400fa58 <_fflush_r+0xc>
3400fa8e:	89a3      	ldrh	r3, [r4, #12]
3400fa90:	059b      	lsls	r3, r3, #22
3400fa92:	d4e1      	bmi.n	3400fa58 <_fflush_r+0xc>
3400fa94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400fa96:	f7fe fc3b 	bl	3400e310 <__retarget_lock_release_recursive>
3400fa9a:	e7dd      	b.n	3400fa58 <_fflush_r+0xc>

3400fa9c <__swhatbuf_r>:
3400fa9c:	b570      	push	{r4, r5, r6, lr}
3400fa9e:	460c      	mov	r4, r1
3400faa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400faa4:	b096      	sub	sp, #88	@ 0x58
3400faa6:	4615      	mov	r5, r2
3400faa8:	2900      	cmp	r1, #0
3400faaa:	461e      	mov	r6, r3
3400faac:	da0c      	bge.n	3400fac8 <__swhatbuf_r+0x2c>
3400faae:	89a3      	ldrh	r3, [r4, #12]
3400fab0:	2100      	movs	r1, #0
3400fab2:	f013 0f80 	tst.w	r3, #128	@ 0x80
3400fab6:	bf14      	ite	ne
3400fab8:	2340      	movne	r3, #64	@ 0x40
3400faba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3400fabe:	2000      	movs	r0, #0
3400fac0:	6031      	str	r1, [r6, #0]
3400fac2:	602b      	str	r3, [r5, #0]
3400fac4:	b016      	add	sp, #88	@ 0x58
3400fac6:	bd70      	pop	{r4, r5, r6, pc}
3400fac8:	466a      	mov	r2, sp
3400faca:	f000 f879 	bl	3400fbc0 <_fstat_r>
3400face:	2800      	cmp	r0, #0
3400fad0:	dbed      	blt.n	3400faae <__swhatbuf_r+0x12>
3400fad2:	9901      	ldr	r1, [sp, #4]
3400fad4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3400fad8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
3400fadc:	4259      	negs	r1, r3
3400fade:	4159      	adcs	r1, r3
3400fae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400fae4:	e7eb      	b.n	3400fabe <__swhatbuf_r+0x22>

3400fae6 <__smakebuf_r>:
3400fae6:	898b      	ldrh	r3, [r1, #12]
3400fae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400faea:	079d      	lsls	r5, r3, #30
3400faec:	4606      	mov	r6, r0
3400faee:	460c      	mov	r4, r1
3400faf0:	d507      	bpl.n	3400fb02 <__smakebuf_r+0x1c>
3400faf2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3400faf6:	6023      	str	r3, [r4, #0]
3400faf8:	6123      	str	r3, [r4, #16]
3400fafa:	2301      	movs	r3, #1
3400fafc:	6163      	str	r3, [r4, #20]
3400fafe:	b003      	add	sp, #12
3400fb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400fb02:	ab01      	add	r3, sp, #4
3400fb04:	466a      	mov	r2, sp
3400fb06:	f7ff ffc9 	bl	3400fa9c <__swhatbuf_r>
3400fb0a:	9f00      	ldr	r7, [sp, #0]
3400fb0c:	4605      	mov	r5, r0
3400fb0e:	4630      	mov	r0, r6
3400fb10:	4639      	mov	r1, r7
3400fb12:	f7fd fa9b 	bl	3400d04c <_malloc_r>
3400fb16:	b948      	cbnz	r0, 3400fb2c <__smakebuf_r+0x46>
3400fb18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400fb1c:	059a      	lsls	r2, r3, #22
3400fb1e:	d4ee      	bmi.n	3400fafe <__smakebuf_r+0x18>
3400fb20:	f023 0303 	bic.w	r3, r3, #3
3400fb24:	f043 0302 	orr.w	r3, r3, #2
3400fb28:	81a3      	strh	r3, [r4, #12]
3400fb2a:	e7e2      	b.n	3400faf2 <__smakebuf_r+0xc>
3400fb2c:	89a3      	ldrh	r3, [r4, #12]
3400fb2e:	6020      	str	r0, [r4, #0]
3400fb30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3400fb34:	81a3      	strh	r3, [r4, #12]
3400fb36:	9b01      	ldr	r3, [sp, #4]
3400fb38:	e9c4 0704 	strd	r0, r7, [r4, #16]
3400fb3c:	b15b      	cbz	r3, 3400fb56 <__smakebuf_r+0x70>
3400fb3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400fb42:	4630      	mov	r0, r6
3400fb44:	f000 f84e 	bl	3400fbe4 <_isatty_r>
3400fb48:	b128      	cbz	r0, 3400fb56 <__smakebuf_r+0x70>
3400fb4a:	89a3      	ldrh	r3, [r4, #12]
3400fb4c:	f023 0303 	bic.w	r3, r3, #3
3400fb50:	f043 0301 	orr.w	r3, r3, #1
3400fb54:	81a3      	strh	r3, [r4, #12]
3400fb56:	89a3      	ldrh	r3, [r4, #12]
3400fb58:	431d      	orrs	r5, r3
3400fb5a:	81a5      	strh	r5, [r4, #12]
3400fb5c:	e7cf      	b.n	3400fafe <__smakebuf_r+0x18>

3400fb5e <_raise_r>:
3400fb5e:	291f      	cmp	r1, #31
3400fb60:	b538      	push	{r3, r4, r5, lr}
3400fb62:	4605      	mov	r5, r0
3400fb64:	460c      	mov	r4, r1
3400fb66:	d904      	bls.n	3400fb72 <_raise_r+0x14>
3400fb68:	2316      	movs	r3, #22
3400fb6a:	6003      	str	r3, [r0, #0]
3400fb6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400fb70:	bd38      	pop	{r3, r4, r5, pc}
3400fb72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
3400fb74:	b112      	cbz	r2, 3400fb7c <_raise_r+0x1e>
3400fb76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
3400fb7a:	b94b      	cbnz	r3, 3400fb90 <_raise_r+0x32>
3400fb7c:	4628      	mov	r0, r5
3400fb7e:	f000 f853 	bl	3400fc28 <_getpid_r>
3400fb82:	4622      	mov	r2, r4
3400fb84:	4601      	mov	r1, r0
3400fb86:	4628      	mov	r0, r5
3400fb88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3400fb8c:	f000 b83a 	b.w	3400fc04 <_kill_r>
3400fb90:	2b01      	cmp	r3, #1
3400fb92:	d00a      	beq.n	3400fbaa <_raise_r+0x4c>
3400fb94:	1c59      	adds	r1, r3, #1
3400fb96:	d103      	bne.n	3400fba0 <_raise_r+0x42>
3400fb98:	2316      	movs	r3, #22
3400fb9a:	6003      	str	r3, [r0, #0]
3400fb9c:	2001      	movs	r0, #1
3400fb9e:	e7e7      	b.n	3400fb70 <_raise_r+0x12>
3400fba0:	2100      	movs	r1, #0
3400fba2:	4620      	mov	r0, r4
3400fba4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
3400fba8:	4798      	blx	r3
3400fbaa:	2000      	movs	r0, #0
3400fbac:	e7e0      	b.n	3400fb70 <_raise_r+0x12>
	...

3400fbb0 <raise>:
3400fbb0:	4b02      	ldr	r3, [pc, #8]	@ (3400fbbc <raise+0xc>)
3400fbb2:	4601      	mov	r1, r0
3400fbb4:	6818      	ldr	r0, [r3, #0]
3400fbb6:	f7ff bfd2 	b.w	3400fb5e <_raise_r>
3400fbba:	bf00      	nop
3400fbbc:	340121b4 	.word	0x340121b4

3400fbc0 <_fstat_r>:
3400fbc0:	b538      	push	{r3, r4, r5, lr}
3400fbc2:	2300      	movs	r3, #0
3400fbc4:	4d06      	ldr	r5, [pc, #24]	@ (3400fbe0 <_fstat_r+0x20>)
3400fbc6:	4604      	mov	r4, r0
3400fbc8:	4608      	mov	r0, r1
3400fbca:	4611      	mov	r1, r2
3400fbcc:	602b      	str	r3, [r5, #0]
3400fbce:	f7f1 fb6b 	bl	340012a8 <_fstat>
3400fbd2:	1c43      	adds	r3, r0, #1
3400fbd4:	d102      	bne.n	3400fbdc <_fstat_r+0x1c>
3400fbd6:	682b      	ldr	r3, [r5, #0]
3400fbd8:	b103      	cbz	r3, 3400fbdc <_fstat_r+0x1c>
3400fbda:	6023      	str	r3, [r4, #0]
3400fbdc:	bd38      	pop	{r3, r4, r5, pc}
3400fbde:	bf00      	nop
3400fbe0:	34012d28 	.word	0x34012d28

3400fbe4 <_isatty_r>:
3400fbe4:	b538      	push	{r3, r4, r5, lr}
3400fbe6:	2300      	movs	r3, #0
3400fbe8:	4d05      	ldr	r5, [pc, #20]	@ (3400fc00 <_isatty_r+0x1c>)
3400fbea:	4604      	mov	r4, r0
3400fbec:	4608      	mov	r0, r1
3400fbee:	602b      	str	r3, [r5, #0]
3400fbf0:	f7f1 fb5f 	bl	340012b2 <_isatty>
3400fbf4:	1c43      	adds	r3, r0, #1
3400fbf6:	d102      	bne.n	3400fbfe <_isatty_r+0x1a>
3400fbf8:	682b      	ldr	r3, [r5, #0]
3400fbfa:	b103      	cbz	r3, 3400fbfe <_isatty_r+0x1a>
3400fbfc:	6023      	str	r3, [r4, #0]
3400fbfe:	bd38      	pop	{r3, r4, r5, pc}
3400fc00:	34012d28 	.word	0x34012d28

3400fc04 <_kill_r>:
3400fc04:	b538      	push	{r3, r4, r5, lr}
3400fc06:	2300      	movs	r3, #0
3400fc08:	4d06      	ldr	r5, [pc, #24]	@ (3400fc24 <_kill_r+0x20>)
3400fc0a:	4604      	mov	r4, r0
3400fc0c:	4608      	mov	r0, r1
3400fc0e:	4611      	mov	r1, r2
3400fc10:	602b      	str	r3, [r5, #0]
3400fc12:	f7f1 fb2a 	bl	3400126a <_kill>
3400fc16:	1c43      	adds	r3, r0, #1
3400fc18:	d102      	bne.n	3400fc20 <_kill_r+0x1c>
3400fc1a:	682b      	ldr	r3, [r5, #0]
3400fc1c:	b103      	cbz	r3, 3400fc20 <_kill_r+0x1c>
3400fc1e:	6023      	str	r3, [r4, #0]
3400fc20:	bd38      	pop	{r3, r4, r5, pc}
3400fc22:	bf00      	nop
3400fc24:	34012d28 	.word	0x34012d28

3400fc28 <_getpid_r>:
3400fc28:	f7f1 bb1d 	b.w	34001266 <_getpid>

3400fc2c <_calloc_r>:
3400fc2c:	b570      	push	{r4, r5, r6, lr}
3400fc2e:	fba1 5402 	umull	r5, r4, r1, r2
3400fc32:	b93c      	cbnz	r4, 3400fc44 <_calloc_r+0x18>
3400fc34:	4629      	mov	r1, r5
3400fc36:	f7fd fa09 	bl	3400d04c <_malloc_r>
3400fc3a:	4606      	mov	r6, r0
3400fc3c:	b928      	cbnz	r0, 3400fc4a <_calloc_r+0x1e>
3400fc3e:	2600      	movs	r6, #0
3400fc40:	4630      	mov	r0, r6
3400fc42:	bd70      	pop	{r4, r5, r6, pc}
3400fc44:	220c      	movs	r2, #12
3400fc46:	6002      	str	r2, [r0, #0]
3400fc48:	e7f9      	b.n	3400fc3e <_calloc_r+0x12>
3400fc4a:	462a      	mov	r2, r5
3400fc4c:	4621      	mov	r1, r4
3400fc4e:	f7fe f8df 	bl	3400de10 <memset>
3400fc52:	e7f5      	b.n	3400fc40 <_calloc_r+0x14>

3400fc54 <__ascii_mbtowc>:
3400fc54:	b082      	sub	sp, #8
3400fc56:	b901      	cbnz	r1, 3400fc5a <__ascii_mbtowc+0x6>
3400fc58:	a901      	add	r1, sp, #4
3400fc5a:	b142      	cbz	r2, 3400fc6e <__ascii_mbtowc+0x1a>
3400fc5c:	b14b      	cbz	r3, 3400fc72 <__ascii_mbtowc+0x1e>
3400fc5e:	7813      	ldrb	r3, [r2, #0]
3400fc60:	600b      	str	r3, [r1, #0]
3400fc62:	7812      	ldrb	r2, [r2, #0]
3400fc64:	1e10      	subs	r0, r2, #0
3400fc66:	bf18      	it	ne
3400fc68:	2001      	movne	r0, #1
3400fc6a:	b002      	add	sp, #8
3400fc6c:	4770      	bx	lr
3400fc6e:	4610      	mov	r0, r2
3400fc70:	e7fb      	b.n	3400fc6a <__ascii_mbtowc+0x16>
3400fc72:	f06f 0001 	mvn.w	r0, #1
3400fc76:	e7f8      	b.n	3400fc6a <__ascii_mbtowc+0x16>

3400fc78 <__ascii_wctomb>:
3400fc78:	4603      	mov	r3, r0
3400fc7a:	4608      	mov	r0, r1
3400fc7c:	b141      	cbz	r1, 3400fc90 <__ascii_wctomb+0x18>
3400fc7e:	2aff      	cmp	r2, #255	@ 0xff
3400fc80:	d904      	bls.n	3400fc8c <__ascii_wctomb+0x14>
3400fc82:	228a      	movs	r2, #138	@ 0x8a
3400fc84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400fc88:	601a      	str	r2, [r3, #0]
3400fc8a:	4770      	bx	lr
3400fc8c:	2001      	movs	r0, #1
3400fc8e:	700a      	strb	r2, [r1, #0]
3400fc90:	4770      	bx	lr
	...

3400fc94 <_sbrk>:
3400fc94:	4a04      	ldr	r2, [pc, #16]	@ (3400fca8 <_sbrk+0x14>)
3400fc96:	4603      	mov	r3, r0
3400fc98:	6811      	ldr	r1, [r2, #0]
3400fc9a:	b909      	cbnz	r1, 3400fca0 <_sbrk+0xc>
3400fc9c:	4903      	ldr	r1, [pc, #12]	@ (3400fcac <_sbrk+0x18>)
3400fc9e:	6011      	str	r1, [r2, #0]
3400fca0:	6810      	ldr	r0, [r2, #0]
3400fca2:	4403      	add	r3, r0
3400fca4:	6013      	str	r3, [r2, #0]
3400fca6:	4770      	bx	lr
3400fca8:	34012d30 	.word	0x34012d30
3400fcac:	34012d38 	.word	0x34012d38

3400fcb0 <_init>:
3400fcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400fcb2:	bf00      	nop
3400fcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
3400fcb6:	bc08      	pop	{r3}
3400fcb8:	469e      	mov	lr, r3
3400fcba:	4770      	bx	lr

3400fcbc <_fini>:
3400fcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400fcbe:	bf00      	nop
3400fcc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
3400fcc2:	bc08      	pop	{r3}
3400fcc4:	469e      	mov	lr, r3
3400fcc6:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3400fce0 <SECURE_SystemCoreClockUpdate>:
3400fce0:	e97f e97f 	sg
3400fce4:	f7f2 baa2 	b.w	3400222c <__acle_se_SECURE_SystemCoreClockUpdate>
	...
