
STM32N6_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010738  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  34010ea0  34010ea0  00010ea0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00029790  34010ec0  34010ec0  00010ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  3403a650  3403a650  0003a864  2**0
                  CONTENTS
  5 .ARM          00000008  3403a650  3403a650  0003a650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  3403a658  3403a864  0003a864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  3403a658  3403a658  0003a658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  3403a65c  3403a65c  0003a65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000204  3403a660  3403a660  0003a660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000026c  3403a864  3403a864  0003a864  2**2
                  ALLOC
 11 ._user_heap_stack 00004200  3403aad0  3403aad0  0003a864  2**0
                  ALLOC
 12 .psram_section 00000000  91000000  91000000  0003a864  2**0
                  CONTENTS
 13 .ARM.attributes 0000003a  00000000  00000000  0003a864  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003987e  00000000  00000000  0003a89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005831  00000000  00000000  0007411c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000fc87  00000000  00000000  0007994d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001880  00000000  00000000  000895d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000224c  00000000  00000000  0008ae58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00077144  00000000  00000000  0008d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002bb92  00000000  00000000  001041e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    003a549c  00000000  00000000  0012fd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000086  00000000  00000000  004d5216  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000053d4  00000000  00000000  004d529c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000131  00000000  00000000  004da670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	3403a864 	.word	0x3403a864
3400076c:	00000000 	.word	0x00000000
34000770:	34010e70 	.word	0x34010e70

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	3403a868 	.word	0x3403a868
3400078c:	34010e70 	.word	0x34010e70

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
340007a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
340007a2:	4b15      	ldr	r3, [pc, #84]	@ (340007f8 <Fuse_Programming+0x58>)

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
340007a4:	217c      	movs	r1, #124	@ 0x7c
340007a6:	aa01      	add	r2, sp, #4
340007a8:	a802      	add	r0, sp, #8
  sBsecHandler.Instance = BSEC;
340007aa:	9302      	str	r3, [sp, #8]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
340007ac:	f001 fe70 	bl	34002490 <HAL_BSEC_OTP_Read>
340007b0:	4603      	mov	r3, r0
340007b2:	b9e0      	cbnz	r0, 340007ee <Fuse_Programming+0x4e>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
    if ((data & bit_mask) != bit_mask)
340007b4:	9a01      	ldr	r2, [sp, #4]
340007b6:	f402 31c0 	and.w	r1, r2, #98304	@ 0x18000
340007ba:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
340007be:	d017      	beq.n	340007f0 <Fuse_Programming+0x50>
    {
      data |= bit_mask;
340007c0:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
340007c4:	217c      	movs	r1, #124	@ 0x7c
340007c6:	a802      	add	r0, sp, #8
      data |= bit_mask;
340007c8:	9201      	str	r2, [sp, #4]
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
340007ca:	f001 fe7d 	bl	340024c8 <HAL_BSEC_OTP_Program>
340007ce:	b968      	cbnz	r0, 340007ec <Fuse_Programming+0x4c>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
340007d0:	217c      	movs	r1, #124	@ 0x7c
340007d2:	aa01      	add	r2, sp, #4
340007d4:	a802      	add	r0, sp, #8
340007d6:	f001 fe5b 	bl	34002490 <HAL_BSEC_OTP_Read>
340007da:	b930      	cbnz	r0, 340007ea <Fuse_Programming+0x4a>
        {
          if ((data & bit_mask) != bit_mask)
340007dc:	9b01      	ldr	r3, [sp, #4]
340007de:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
340007e2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
340007e6:	d003      	beq.n	340007f0 <Fuse_Programming+0x50>
340007e8:	e7fe      	b.n	340007e8 <Fuse_Programming+0x48>
340007ea:	e7fe      	b.n	340007ea <Fuse_Programming+0x4a>
340007ec:	e7fe      	b.n	340007ec <Fuse_Programming+0x4c>
340007ee:	e7fe      	b.n	340007ee <Fuse_Programming+0x4e>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
340007f0:	b005      	add	sp, #20
340007f2:	f85d fb04 	ldr.w	pc, [sp], #4
340007f6:	bf00      	nop
340007f8:	56009000 	.word	0x56009000

340007fc <LL_MEM_EnableClock>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
340007fc:	4b04      	ldr	r3, [pc, #16]	@ (34000810 <LL_MEM_EnableClock+0x14>)
{
340007fe:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMENSR, Memories);
34000800:	f8c3 0a4c 	str.w	r0, [r3, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
34000804:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34000808:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400080a:	9b01      	ldr	r3, [sp, #4]
}
3400080c:	b002      	add	sp, #8
3400080e:	4770      	bx	lr
34000810:	56028000 	.word	0x56028000

34000814 <LL_MEM_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000814:	4b04      	ldr	r3, [pc, #16]	@ (34000828 <LL_MEM_EnableClockLowPower+0x14>)
{
34000816:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000818:	f8c3 0a8c 	str.w	r0, [r3, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
3400081c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34000820:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34000822:	9b01      	ldr	r3, [sp, #4]
}
34000824:	b002      	add	sp, #8
34000826:	4770      	bx	lr
34000828:	56028000 	.word	0x56028000

3400082c <LL_AHB5_GRP1_EnableClockLowPower>:
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
3400082c:	4b04      	ldr	r3, [pc, #16]	@ (34000840 <LL_AHB5_GRP1_EnableClockLowPower+0x14>)
{
3400082e:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000830:	f8c3 0aa0 	str.w	r0, [r3, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
34000834:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34000838:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400083a:	9b01      	ldr	r3, [sp, #4]
}
3400083c:	b002      	add	sp, #8
3400083e:	4770      	bx	lr
34000840:	56028000 	.word	0x56028000

34000844 <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
34000844:	b530      	push	{r4, r5, lr}
34000846:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3400084a:	2240      	movs	r2, #64	@ 0x40
3400084c:	2100      	movs	r1, #0
3400084e:	4668      	mov	r0, sp
34000850:	f00e f9fa 	bl	3400ec48 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34000854:	2298      	movs	r2, #152	@ 0x98
34000856:	2100      	movs	r1, #0
34000858:	a810      	add	r0, sp, #64	@ 0x40
3400085a:	f00e f9f5 	bl	3400ec48 <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3400085e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
34000862:	2100      	movs	r1, #0
34000864:	a836      	add	r0, sp, #216	@ 0xd8
34000866:	f00e f9ef 	bl	3400ec48 <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
3400086a:	2001      	movs	r0, #1
3400086c:	f000 ffca 	bl	34001804 <BSP_SMPS_Init>
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL1.PLLM = 2;
  RCC_OscInitStruct.PLL1.PLLN = 25;
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34000870:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34000872:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL1.PLLN = 25;
34000874:	2219      	movs	r2, #25
  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL2.PLLM = 8;
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
  RCC_OscInitStruct.PLL2.PLLN = 125;
34000876:	217d      	movs	r1, #125	@ 0x7d
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34000878:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
3400087a:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
3400087e:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL2.PLLM = 8;
34000882:	2208      	movs	r2, #8

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL3.PLLM = 8;
  RCC_OscInitStruct.PLL3.PLLN = 225;
34000884:	21e1      	movs	r1, #225	@ 0xe1
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34000886:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
3400088a:	e9cd 5321 	strd	r5, r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
3400088e:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL3.PLLM = 8;
34000892:	e9cd 3229 	strd	r3, r2, [sp, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34000896:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
  RCC_OscInitStruct.PLL3.PLLP2 = 2;

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
3400089a:	e9cd 532f 	strd	r5, r3, [sp, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLM = 8;
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
3400089e:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
340008a2:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL4.PLLN = 225;
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
340008a4:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL4.PLLP2 = 6;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
340008a6:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
340008a8:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
340008ac:	e9cd 4527 	strd	r4, r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
340008b0:	e9cd 452d 	strd	r4, r5, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
340008b4:	e9cd 3334 	strd	r3, r3, [sp, #208]	@ 0xd0
  RCC_OscInitStruct.PLL1.PLLM = 2;
340008b8:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL4.PLLN = 225;
340008ba:	9133      	str	r1, [sp, #204]	@ 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
340008bc:	f002 fbfe 	bl	340030bc <HAL_RCC_OscConfig>
340008c0:	b100      	cbz	r0, 340008c4 <SystemClock_Config+0x80>
  {
    while(1);
340008c2:	e7fe      	b.n	340008c2 <SystemClock_Config+0x7e>
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
340008c4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
340008c8:	227f      	movs	r2, #127	@ 0x7f
340008ca:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
340008ce:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
340008d2:	9302      	str	r3, [sp, #8]
  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
340008d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
340008d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
340008dc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
340008e0:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
340008e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
340008e8:	e9cd 0408 	strd	r0, r4, [sp, #32]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
340008ec:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
340008f0:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
340008f4:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
340008f8:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
340008fa:	4668      	mov	r0, sp
340008fc:	f002 ffe0 	bl	340038c0 <HAL_RCC_ClockConfig>
34000900:	b100      	cbz	r0, 34000904 <SystemClock_Config+0xc0>
  {
    while(1);
34000902:	e7fe      	b.n	34000902 <SystemClock_Config+0xbe>

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34000904:	4b08      	ldr	r3, [pc, #32]	@ (34000928 <SystemClock_Config+0xe4>)

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34000906:	2200      	movs	r2, #0
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34000908:	9361      	str	r3, [sp, #388]	@ 0x184
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
3400090a:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
3400090e:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34000912:	4b06      	ldr	r3, [pc, #24]	@ (3400092c <SystemClock_Config+0xe8>)

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34000914:	a836      	add	r0, sp, #216	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34000916:	9362      	str	r3, [sp, #392]	@ 0x188
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34000918:	f003 fb82 	bl	34004020 <HAL_RCCEx_PeriphCLKConfig>
3400091c:	b100      	cbz	r0, 34000920 <SystemClock_Config+0xdc>
  {
    while (1);
3400091e:	e7fe      	b.n	3400091e <SystemClock_Config+0xda>
  }
}
34000920:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
34000924:	bd30      	pop	{r4, r5, pc}
34000926:	bf00      	nop
34000928:	03000014 	.word	0x03000014
3400092c:	03000414 	.word	0x03000414

34000930 <main>:
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34000930:	4ace      	ldr	r2, [pc, #824]	@ (34000c6c <main+0x33c>)
{
34000932:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34000936:	6813      	ldr	r3, [r2, #0]
{
34000938:	b099      	sub	sp, #100	@ 0x64
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
3400093a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
3400093e:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
34000940:	4bcb      	ldr	r3, [pc, #812]	@ (34000c70 <main+0x340>)
34000942:	6a1a      	ldr	r2, [r3, #32]
34000944:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
34000948:	621a      	str	r2, [r3, #32]
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
3400094a:	6a1a      	ldr	r2, [r3, #32]
3400094c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
34000950:	621a      	str	r2, [r3, #32]
  HAL_Init();
34000952:	f001 fd25 	bl	340023a0 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34000956:	4bc7      	ldr	r3, [pc, #796]	@ (34000c74 <main+0x344>)
34000958:	695a      	ldr	r2, [r3, #20]
3400095a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
3400095e:	d111      	bne.n	34000984 <main+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34000960:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000964:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
34000968:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
3400096c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000970:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
34000974:	695a      	ldr	r2, [r3, #20]
34000976:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
3400097a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3400097c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000980:	f3bf 8f6f 	isb	sy
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
34000984:	4ab9      	ldr	r2, [pc, #740]	@ (34000c6c <main+0x33c>)
34000986:	6813      	ldr	r3, [r2, #0]
34000988:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3400098c:	6013      	str	r3, [r2, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
3400098e:	f5a2 4273 	sub.w	r2, r2, #62208	@ 0xf300
34000992:	6953      	ldr	r3, [r2, #20]
34000994:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
34000998:	d128      	bne.n	340009ec <main+0xbc>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
3400099a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400099e:	f3bf 8f4f 	dsb	sy
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
340009a2:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    ccsidr = SCB->CCSIDR;
340009a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
340009aa:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
340009ae:	f3c3 334e 	ubfx	r3, r3, #13, #15
340009b2:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
340009b4:	f100 0e01 	add.w	lr, r0, #1
340009b8:	4601      	mov	r1, r0
340009ba:	f04e e001 	dls	lr, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
340009be:	ea03 0604 	and.w	r6, r3, r4
340009c2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
340009c6:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
340009ca:	3901      	subs	r1, #1
340009cc:	f00f c807 	le	lr, 340009c2 <main+0x92>
    } while(sets-- != 0U);
340009d0:	3b20      	subs	r3, #32
340009d2:	f113 0f20 	cmn.w	r3, #32
340009d6:	d1ed      	bne.n	340009b4 <main+0x84>
340009d8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
340009dc:	6953      	ldr	r3, [r2, #20]
340009de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
340009e2:	6153      	str	r3, [r2, #20]
340009e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340009e8:	f3bf 8f6f 	isb	sy
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340009ec:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
  WRITE_REG(RCC->AHB2ENSR, Periphs);
340009f0:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  RAMCFG_HandleTypeDef hramcfg = {0};
340009f4:	2500      	movs	r5, #0
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340009f6:	4c9e      	ldr	r4, [pc, #632]	@ (34000c70 <main+0x340>)
  SystemClock_Config();
340009f8:	f7ff ff24 	bl	34000844 <SystemClock_Config>
340009fc:	f8c4 7a60 	str.w	r7, [r4, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34000a00:	f8d4 3260 	ldr.w	r3, [r4, #608]	@ 0x260
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000a04:	f8df a2a4 	ldr.w	sl, [pc, #676]	@ 34000cac <main+0x37c>
  tmpreg = READ_REG(RCC->AHB5ENR);
34000a08:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
34000a0a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
34000a0c:	2001      	movs	r0, #1
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34000a0e:	f8c4 7a20 	str.w	r7, [r4, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000a12:	f8ca 7220 	str.w	r7, [sl, #544]	@ 0x220
34000a16:	f7ff fef1 	bl	340007fc <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
34000a1a:	2002      	movs	r0, #2
34000a1c:	f7ff feee 	bl	340007fc <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
34000a20:	2004      	movs	r0, #4
34000a22:	f7ff feeb 	bl	340007fc <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
34000a26:	2008      	movs	r0, #8
34000a28:	f7ff fee8 	bl	340007fc <LL_MEM_EnableClock>
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34000a2c:	f8c4 9a54 	str.w	r9, [r4, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
34000a30:	f8d4 3254 	ldr.w	r3, [r4, #596]	@ 0x254
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000a34:	a813      	add	r0, sp, #76	@ 0x4c
34000a36:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
34000a38:	9b02      	ldr	r3, [sp, #8]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34000a3a:	4b8f      	ldr	r3, [pc, #572]	@ (34000c78 <main+0x348>)
  RAMCFG_HandleTypeDef hramcfg = {0};
34000a3c:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34000a40:	9313      	str	r3, [sp, #76]	@ 0x4c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000a42:	f002 f913 	bl	34002c6c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34000a46:	4b8d      	ldr	r3, [pc, #564]	@ (34000c7c <main+0x34c>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000a48:	a813      	add	r0, sp, #76	@ 0x4c
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34000a4a:	9313      	str	r3, [sp, #76]	@ 0x4c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000a4c:	f002 f90e 	bl	34002c6c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
34000a50:	4b8b      	ldr	r3, [pc, #556]	@ (34000c80 <main+0x350>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000a52:	a813      	add	r0, sp, #76	@ 0x4c
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
34000a54:	9313      	str	r3, [sp, #76]	@ 0x4c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000a56:	f002 f909 	bl	34002c6c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34000a5a:	4b8a      	ldr	r3, [pc, #552]	@ (34000c84 <main+0x354>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000a5c:	a813      	add	r0, sp, #76	@ 0x4c
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34000a5e:	9313      	str	r3, [sp, #76]	@ 0x4c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34000a60:	f002 f904 	bl	34002c6c <HAL_RAMCFG_EnableAXISRAM>
  Fuse_Programming();
34000a64:	f7ff fe9c 	bl	340007a0 <Fuse_Programming>
  npu_cache_init();
34000a68:	f000 fb08 	bl	3400107c <npu_cache_init>
  npu_cache_enable();
34000a6c:	f000 fb10 	bl	34001090 <npu_cache_enable>
  BSP_XSPI_RAM_Init(0);
34000a70:	4628      	mov	r0, r5
34000a72:	f001 f983 	bl	34001d7c <BSP_XSPI_RAM_Init>
  BSP_XSPI_RAM_EnableMemoryMappedMode(0);
34000a76:	4628      	mov	r0, r5
34000a78:	f001 faa4 	bl	34001fc4 <BSP_XSPI_RAM_EnableMemoryMappedMode>
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
34000a7c:	f240 1301 	movw	r3, #257	@ 0x101
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34000a80:	f44f 7800 	mov.w	r8, #512	@ 0x200
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34000a84:	a901      	add	r1, sp, #4
34000a86:	4628      	mov	r0, r5
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34000a88:	2602      	movs	r6, #2
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
34000a8a:	f8ad 3004 	strh.w	r3, [sp, #4]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34000a8e:	f001 f831 	bl	34001af4 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
34000a92:	4628      	mov	r0, r5
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34000a94:	2503      	movs	r5, #3
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
34000a96:	f000 ff9b 	bl	340019d0 <BSP_XSPI_NOR_EnableMemoryMappedMode>
34000a9a:	f8c4 8a58 	str.w	r8, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
34000a9e:	f8d4 3258 	ldr.w	r3, [r4, #600]	@ 0x258
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34000aa2:	2001      	movs	r0, #1
34000aa4:	9304      	str	r3, [sp, #16]
34000aa6:	a913      	add	r1, sp, #76	@ 0x4c
  (void)tmpreg;
34000aa8:	9b04      	ldr	r3, [sp, #16]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34000aaa:	e9cd 6513 	strd	r6, r5, [sp, #76]	@ 0x4c
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34000aae:	f008 f931 	bl	34008d14 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
34000ab2:	2008      	movs	r0, #8
34000ab4:	a913      	add	r1, sp, #76	@ 0x4c
34000ab6:	f008 f92d 	bl	34008d14 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
34000aba:	2009      	movs	r0, #9
34000abc:	a913      	add	r1, sp, #76	@ 0x4c
34000abe:	f008 f929 	bl	34008d14 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
34000ac2:	200a      	movs	r0, #10
34000ac4:	a913      	add	r1, sp, #76	@ 0x4c
34000ac6:	f008 f925 	bl	34008d14 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
34000aca:	200b      	movs	r0, #11
34000acc:	a913      	add	r1, sp, #76	@ 0x4c
34000ace:	f008 f921 	bl	34008d14 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000ad2:	4629      	mov	r1, r5
34000ad4:	486c      	ldr	r0, [pc, #432]	@ (34000c88 <main+0x358>)
34000ad6:	f008 f971 	bl	34008dbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000ada:	4629      	mov	r1, r5
34000adc:	486b      	ldr	r0, [pc, #428]	@ (34000c8c <main+0x35c>)
34000ade:	f008 f96d 	bl	34008dbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000ae2:	4629      	mov	r1, r5
34000ae4:	486a      	ldr	r0, [pc, #424]	@ (34000c90 <main+0x360>)
34000ae6:	f008 f969 	bl	34008dbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000aea:	4629      	mov	r1, r5
34000aec:	4869      	ldr	r0, [pc, #420]	@ (34000c94 <main+0x364>)
34000aee:	f008 f965 	bl	34008dbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000af2:	4629      	mov	r1, r5
34000af4:	4868      	ldr	r0, [pc, #416]	@ (34000c98 <main+0x368>)
34000af6:	f008 f961 	bl	34008dbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000afa:	4629      	mov	r1, r5
34000afc:	4867      	ldr	r0, [pc, #412]	@ (34000c9c <main+0x36c>)
34000afe:	f008 f95d 	bl	34008dbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34000b02:	4629      	mov	r1, r5
34000b04:	4866      	ldr	r0, [pc, #408]	@ (34000ca0 <main+0x370>)
34000b06:	f008 f959 	bl	34008dbc <HAL_RIF_RISC_SetSlaveSecureAttributes>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34000b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34000b0e:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
34000b12:	f8d4 2258 	ldr.w	r2, [r4, #600]	@ 0x258
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
34000b16:	2020      	movs	r0, #32
34000b18:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
34000b1a:	9a05      	ldr	r2, [sp, #20]
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000b1c:	2204      	movs	r2, #4
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
34000b1e:	f8c4 3a18 	str.w	r3, [r4, #2584]	@ 0xa18
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
34000b22:	f8ca 3218 	str.w	r3, [sl, #536]	@ 0x218
34000b26:	f7ff fe81 	bl	3400082c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
34000b2a:	4648      	mov	r0, r9
34000b2c:	f7ff fe7e 	bl	3400082c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
34000b30:	4638      	mov	r0, r7
34000b32:	f7ff fe7b 	bl	3400082c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
34000b36:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34000b3a:	f7ff fe77 	bl	3400082c <LL_AHB5_GRP1_EnableClockLowPower>
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000b3e:	f8c4 6abc 	str.w	r6, [r4, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34000b42:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
34000b46:	4630      	mov	r0, r6
34000b48:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
34000b4a:	9b08      	ldr	r3, [sp, #32]
34000b4c:	f7ff fe6e 	bl	3400082c <LL_AHB5_GRP1_EnableClockLowPower>
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000b50:	f8c4 2abc 	str.w	r2, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34000b54:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34000b58:	4640      	mov	r0, r8
34000b5a:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
34000b5c:	9b07      	ldr	r3, [sp, #28]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000b5e:	2340      	movs	r3, #64	@ 0x40
34000b60:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34000b64:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
34000b68:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
34000b6a:	9b06      	ldr	r3, [sp, #24]
34000b6c:	f7ff fe52 	bl	34000814 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
34000b70:	2080      	movs	r0, #128	@ 0x80
34000b72:	f7ff fe4f 	bl	34000814 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
34000b76:	f44f 7080 	mov.w	r0, #256	@ 0x100
34000b7a:	f7ff fe4b 	bl	34000814 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
34000b7e:	2001      	movs	r0, #1
34000b80:	f7ff fe48 	bl	34000814 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
34000b84:	4630      	mov	r0, r6
34000b86:	f7ff fe45 	bl	34000814 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
34000b8a:	4610      	mov	r0, r2
34000b8c:	f7ff fe42 	bl	34000814 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE(); 
34000b90:	2008      	movs	r0, #8
34000b92:	f7ff fe3f 	bl	34000814 <LL_MEM_EnableClockLowPower>
  const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_Default();
34000b96:	f000 fa65 	bl	34001064 <LL_ATON_Input_Buffers_Info_Default>
34000b9a:	4605      	mov	r5, r0
  const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_Default();
34000b9c:	f000 fa66 	bl	3400106c <LL_ATON_Output_Buffers_Info_Default>
34000ba0:	6869      	ldr	r1, [r5, #4]
34000ba2:	4602      	mov	r2, r0
    return eb->blob_address;
  }

  static inline unsigned char *LL_Buffer_addr_base(const LL_Buffer_InfoTypeDef *buf)
  {
    if (buf->is_user_allocated)
34000ba4:	7d28      	ldrb	r0, [r5, #20]
    {
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
      return *tmp;
    }
    return buf->addr_base.p;
34000ba6:	460b      	mov	r3, r1
    if (buf->is_user_allocated)
34000ba8:	b100      	cbz	r0, 34000bac <main+0x27c>
      return *tmp;
34000baa:	680b      	ldr	r3, [r1, #0]
  int number_output = 0;
34000bac:	2400      	movs	r4, #0
34000bae:	2038      	movs	r0, #56	@ 0x38
  }

  static inline unsigned char *LL_Buffer_addr_start(const LL_Buffer_InfoTypeDef *buf)
  {
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34000bb0:	68ae      	ldr	r6, [r5, #8]
  nn_in = (uint8_t *) LL_Buffer_addr_start(&nn_in_info[0]);
34000bb2:	4f3c      	ldr	r7, [pc, #240]	@ (34000ca4 <main+0x374>)
34000bb4:	4433      	add	r3, r6
34000bb6:	603b      	str	r3, [r7, #0]
  while (nn_out_info[number_output].name != NULL)
34000bb8:	fb00 f304 	mul.w	r3, r0, r4
34000bbc:	58d1      	ldr	r1, [r2, r3]
34000bbe:	2900      	cmp	r1, #0
34000bc0:	f040 8097 	bne.w	34000cf2 <main+0x3c2>
  assert(number_output <= MAX_NUMBER_OUTPUT);
34000bc4:	2c05      	cmp	r4, #5
34000bc6:	f300 8096 	bgt.w	34000cf6 <main+0x3c6>
34000bca:	a909      	add	r1, sp, #36	@ 0x24
34000bcc:	4689      	mov	r9, r1
34000bce:	4836      	ldr	r0, [pc, #216]	@ (34000ca8 <main+0x378>)
34000bd0:	08db      	lsrs	r3, r3, #3
34000bd2:	4343      	muls	r3, r0
34000bd4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
34000bd8:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
34000bdc:	3301      	adds	r3, #1
  for (int i = 0; i < number_output; i++)
34000bde:	3b01      	subs	r3, #1
34000be0:	f040 808f 	bne.w	34000d02 <main+0x3d2>
    return LL_Buffer_addr_base(buf) + buf->offset_limit;
  }

  static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
  {
    return buf->offset_end - buf->offset_start;
34000be4:	68ed      	ldr	r5, [r5, #12]
  pp_input = nn_out[0];
34000be6:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 34000cb0 <main+0x380>
34000bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34000bec:	1bad      	subs	r5, r5, r6
      SCB_InvalidateDCache_by_Addr(dcmipp_out_nn, sizeof(dcmipp_out_nn));
34000bee:	f8df a0c4 	ldr.w	sl, [pc, #196]	@ 34000cb4 <main+0x384>
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000bf2:	4e20      	ldr	r6, [pc, #128]	@ (34000c74 <main+0x344>)
  pp_input = nn_out[0];
34000bf4:	f8c8 3000 	str.w	r3, [r8]
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000bf8:	f8da 1000 	ldr.w	r1, [sl]
34000bfc:	f001 021f 	and.w	r2, r1, #31
  __ASM volatile ("dsb 0xF":::"memory");
34000c00:	f3bf 8f4f 	dsb	sy
34000c04:	1cd3      	adds	r3, r2, #3
34000c06:	3a1c      	subs	r2, #28
34000c08:	095b      	lsrs	r3, r3, #5
34000c0a:	3220      	adds	r2, #32
34000c0c:	f103 0e01 	add.w	lr, r3, #1
34000c10:	bfd8      	it	le
34000c12:	f04f 0e01 	movle.w	lr, #1
34000c16:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000c1a:	f8c6 125c 	str.w	r1, [r6, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000c1e:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
34000c20:	f00f c805 	le	lr, 34000c1a <main+0x2ea>
34000c24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000c28:	f3bf 8f6f 	isb	sy
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34000c2c:	2d00      	cmp	r5, #0
34000c2e:	dd43      	ble.n	34000cb8 <main+0x388>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000c30:	683a      	ldr	r2, [r7, #0]
34000c32:	f002 011f 	and.w	r1, r2, #31
34000c36:	4429      	add	r1, r5
  __ASM volatile ("dsb 0xF":::"memory");
34000c38:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
        op_size -=          __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
34000c3c:	43d3      	mvns	r3, r2
34000c3e:	1850      	adds	r0, r2, r1
34000c40:	4403      	add	r3, r0
34000c42:	3920      	subs	r1, #32
34000c44:	095b      	lsrs	r3, r3, #5
34000c46:	3120      	adds	r1, #32
34000c48:	f103 0e01 	add.w	lr, r3, #1
34000c4c:	bfd8      	it	le
34000c4e:	f04f 0e01 	movle.w	lr, #1
34000c52:	f04e e001 	dls	lr, lr
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000c56:	f8c6 2270 	str.w	r2, [r6, #624]	@ 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
34000c5a:	3220      	adds	r2, #32
      } while ( op_size > 0 );
34000c5c:	f00f c805 	le	lr, 34000c56 <main+0x326>
34000c60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000c64:	f3bf 8f6f 	isb	sy
34000c68:	e026      	b.n	34000cb8 <main+0x388>
34000c6a:	bf00      	nop
34000c6c:	e001e000 	.word	0xe001e000
34000c70:	56028000 	.word	0x56028000
34000c74:	e000ed00 	.word	0xe000ed00
34000c78:	52023100 	.word	0x52023100
34000c7c:	52023180 	.word	0x52023180
34000c80:	52023200 	.word	0x52023200
34000c84:	52023280 	.word	0x52023280
34000c88:	3000000a 	.word	0x3000000a
34000c8c:	30000005 	.word	0x30000005
34000c90:	2000001c 	.word	0x2000001c
34000c94:	2000001d 	.word	0x2000001d
34000c98:	30000006 	.word	0x30000006
34000c9c:	30000007 	.word	0x30000007
34000ca0:	30000008 	.word	0x30000008
34000ca4:	3403a88c 	.word	0x3403a88c
34000ca8:	16db6db7 	.word	0x16db6db7
34000cac:	56029000 	.word	0x56029000
34000cb0:	3403a888 	.word	0x3403a888
34000cb4:	3403a880 	.word	0x3403a880
    ts[0] = HAL_GetTick();
34000cb8:	f001 fb90 	bl	340023dc <HAL_GetTick>
    LL_ATON_RT_Main(&NN_Instance_Default);
34000cbc:	483e      	ldr	r0, [pc, #248]	@ (34000db8 <main+0x488>)
34000cbe:	f009 f92d 	bl	34009f1c <LL_ATON_RT_Main>
    ts[1] = HAL_GetTick();
34000cc2:	f001 fb8b 	bl	340023dc <HAL_GetTick>
    ranking[i] = i;
34000cc6:	2200      	movs	r2, #0
34000cc8:	2301      	movs	r3, #1
34000cca:	2102      	movs	r1, #2
34000ccc:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
34000cd0:	2303      	movs	r3, #3
34000cd2:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
34000cd6:	2304      	movs	r3, #4
  Bubblesort((float *) (pp_input), ranking, NB_CLASSES);
34000cd8:	f8d8 2000 	ldr.w	r2, [r8]
    ranking[i] = i;
34000cdc:	9317      	str	r3, [sp, #92]	@ 0x5c
  for (int i = 0; i < size; i++)
34000cde:	2b00      	cmp	r3, #0
34000ce0:	f103 0101 	add.w	r1, r3, #1
34000ce4:	4694      	mov	ip, r2
34000ce6:	bfac      	ite	ge
34000ce8:	468e      	movge	lr, r1
34000cea:	f04f 0e01 	movlt.w	lr, #1
34000cee:	a813      	add	r0, sp, #76	@ 0x4c
34000cf0:	e02f      	b.n	34000d52 <main+0x422>
    number_output++;
34000cf2:	3401      	adds	r4, #1
34000cf4:	e760      	b.n	34000bb8 <main+0x288>
  assert(number_output <= MAX_NUMBER_OUTPUT);
34000cf6:	217c      	movs	r1, #124	@ 0x7c
34000cf8:	4b30      	ldr	r3, [pc, #192]	@ (34000dbc <main+0x48c>)
34000cfa:	4a31      	ldr	r2, [pc, #196]	@ (34000dc0 <main+0x490>)
34000cfc:	4831      	ldr	r0, [pc, #196]	@ (34000dc4 <main+0x494>)
34000cfe:	f00d f877 	bl	3400ddf0 <__assert_func>
    if (buf->is_user_allocated)
34000d02:	f892 e014 	ldrb.w	lr, [r2, #20]
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
34000d06:	6850      	ldr	r0, [r2, #4]
    if (buf->is_user_allocated)
34000d08:	f1be 0f00 	cmp.w	lr, #0
34000d0c:	d000      	beq.n	34000d10 <main+0x3e0>
      return *tmp;
34000d0e:	6800      	ldr	r0, [r0, #0]
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34000d10:	f8d2 e008 	ldr.w	lr, [r2, #8]
34000d14:	3238      	adds	r2, #56	@ 0x38
34000d16:	4470      	add	r0, lr
    nn_out[i] = (float32_t *) LL_Buffer_addr_start(&nn_out_info[i]);
34000d18:	f841 0b04 	str.w	r0, [r1], #4
    return buf->offset_end - buf->offset_start;
34000d1c:	f852 0c2c 	ldr.w	r0, [r2, #-44]
34000d20:	eba0 000e 	sub.w	r0, r0, lr
    nn_out_len[i] = LL_Buffer_len(&nn_out_info[i]);
34000d24:	f84c 0b04 	str.w	r0, [ip], #4
  for (int i = 0; i < number_output; i++)
34000d28:	e759      	b.n	34000bde <main+0x2ae>
      if (prob[ii] < prob[ii + 1])
34000d2a:	eddc 7a00 	vldr	s15, [ip]
34000d2e:	ed9c 7a01 	vldr	s14, [ip, #4]
34000d32:	eef4 7ac7 	vcmpe.f32	s15, s14
34000d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        prob[ii] = prob[ii + 1];
34000d3a:	f10c 0c04 	add.w	ip, ip, #4
34000d3e:	bf41      	itttt	mi
34000d40:	ed0c 7a01 	vstrmi	s14, [ip, #-4]
        classes[ii] = classes[ii + 1];
34000d44:	e9d0 b100 	ldrdmi	fp, r1, [r0]
        prob[ii + 1] = p;
34000d48:	edcc 7a00 	vstrmi	s15, [ip]
        classes[ii + 1] = c;
34000d4c:	e9c0 1b00 	strdmi	r1, fp, [r0]
    for (int ii = 0; ii < size - i - 1; ii++)
34000d50:	3004      	adds	r0, #4
34000d52:	f1be 0e01 	subs.w	lr, lr, #1
34000d56:	d1e8      	bne.n	34000d2a <main+0x3fa>
  for (int i = 0; i < size; i++)
34000d58:	3b01      	subs	r3, #1
34000d5a:	d2c0      	bcs.n	34000cde <main+0x3ae>
    for (int i = 0; i < number_output; i++)
34000d5c:	2100      	movs	r1, #0
  nn_top1_output_class_proba = *((float *) (pp_input));
34000d5e:	6812      	ldr	r2, [r2, #0]
34000d60:	4b19      	ldr	r3, [pc, #100]	@ (34000dc8 <main+0x498>)
}
34000d62:	a80e      	add	r0, sp, #56	@ 0x38
  nn_top1_output_class_proba = *((float *) (pp_input));
34000d64:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < number_output; i++)
34000d66:	428c      	cmp	r4, r1
34000d68:	f43f af46 	beq.w	34000bf8 <main+0x2c8>
      SCB_InvalidateDCache_by_Addr(tmp, nn_out_len[i]);
34000d6c:	f850 2b04 	ldr.w	r2, [r0], #4
    if ( dsize > 0 ) {
34000d70:	2a00      	cmp	r2, #0
34000d72:	dd1f      	ble.n	34000db4 <main+0x484>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000d74:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
34000d78:	f003 0c1f 	and.w	ip, r3, #31
34000d7c:	4494      	add	ip, r2
  __ASM volatile ("dsb 0xF":::"memory");
34000d7e:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
34000d82:	43da      	mvns	r2, r3
34000d84:	eb03 0e0c 	add.w	lr, r3, ip
34000d88:	4472      	add	r2, lr
34000d8a:	f1ac 0c20 	sub.w	ip, ip, #32
34000d8e:	0952      	lsrs	r2, r2, #5
34000d90:	f11c 0f20 	cmn.w	ip, #32
34000d94:	f102 0e01 	add.w	lr, r2, #1
34000d98:	bfd8      	it	le
34000d9a:	f04f 0e01 	movle.w	lr, #1
34000d9e:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000da2:	f8c6 325c 	str.w	r3, [r6, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000da6:	3320      	adds	r3, #32
      } while ( op_size > 0 );
34000da8:	f00f c805 	le	lr, 34000da2 <main+0x472>
34000dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000db0:	f3bf 8f6f 	isb	sy
    for (int i = 0; i < number_output; i++)
34000db4:	3101      	adds	r1, #1
34000db6:	e7d6      	b.n	34000d66 <main+0x436>
34000db8:	3403a660 	.word	0x3403a660
34000dbc:	34010ec0 	.word	0x34010ec0
34000dc0:	34010f80 	.word	0x34010f80
34000dc4:	34010ee3 	.word	0x34010ee3
34000dc8:	3403a884 	.word	0x3403a884

34000dcc <IAC_IRQHandler>:
  while (1)
34000dcc:	e7fe      	b.n	34000dcc <IAC_IRQHandler>
	...

34000dd0 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34000dd0:	b507      	push	{r0, r1, r2, lr}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34000dd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
34000dd6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34000dda:	f7ff fd0f 	bl	340007fc <LL_MEM_EnableClock>
34000dde:	4b08      	ldr	r3, [pc, #32]	@ (34000e00 <HAL_CACHEAXI_MspInit+0x30>)
34000de0:	f8c3 2a60 	str.w	r2, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34000de4:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
34000de8:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
34000dea:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34000dec:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34000df4:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
  __HAL_RCC_CACHEAXI_FORCE_RESET();
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
}
34000df8:	b003      	add	sp, #12
34000dfa:	f85d fb04 	ldr.w	pc, [sp], #4
34000dfe:	bf00      	nop
34000e00:	56028000 	.word	0x56028000

34000e04 <assert_failed>:
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
34000e04:	be00      	bkpt	0x0000
  while (1)
34000e06:	e7fe      	b.n	34000e06 <assert_failed+0x2>

34000e08 <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
34000e08:	b530      	push	{r4, r5, lr}

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
34000e0a:	4d13      	ldr	r5, [pc, #76]	@ (34000e58 <mcu_cache_invalidate_range+0x50>)
34000e0c:	696b      	ldr	r3, [r5, #20]
34000e0e:	03db      	lsls	r3, r3, #15
34000e10:	d51f      	bpl.n	34000e52 <mcu_cache_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
34000e12:	1a0a      	subs	r2, r1, r0
    if ( dsize > 0 ) {
34000e14:	2a00      	cmp	r2, #0
34000e16:	dd1c      	ble.n	34000e52 <mcu_cache_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000e18:	f000 031f 	and.w	r3, r0, #31
34000e1c:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
34000e1e:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
34000e22:	1884      	adds	r4, r0, r2
34000e24:	43c2      	mvns	r2, r0
34000e26:	1a1b      	subs	r3, r3, r0
34000e28:	440b      	add	r3, r1
34000e2a:	4422      	add	r2, r4
34000e2c:	3b20      	subs	r3, #32
34000e2e:	0952      	lsrs	r2, r2, #5
34000e30:	3320      	adds	r3, #32
34000e32:	f102 0e01 	add.w	lr, r2, #1
34000e36:	bfd8      	it	le
34000e38:	f04f 0e01 	movle.w	lr, #1
34000e3c:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000e40:	f8c5 025c 	str.w	r0, [r5, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000e44:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34000e46:	f00f c805 	le	lr, 34000e40 <mcu_cache_invalidate_range+0x38>
34000e4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000e4e:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
34000e52:	2000      	movs	r0, #0
34000e54:	bd30      	pop	{r4, r5, pc}
34000e56:	bf00      	nop
34000e58:	e000ed00 	.word	0xe000ed00

34000e5c <mcu_cache_clean_range>:

int mcu_cache_clean_range(uint32_t start_addr, uint32_t end_addr) {
34000e5c:	b530      	push	{r4, r5, lr}
34000e5e:	4d13      	ldr	r5, [pc, #76]	@ (34000eac <mcu_cache_clean_range+0x50>)
34000e60:	696b      	ldr	r3, [r5, #20]
34000e62:	03db      	lsls	r3, r3, #15
34000e64:	d51f      	bpl.n	34000ea6 <mcu_cache_clean_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_CleanDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
34000e66:	1a0a      	subs	r2, r1, r0
    if ( dsize > 0 ) {
34000e68:	2a00      	cmp	r2, #0
34000e6a:	dd1c      	ble.n	34000ea6 <mcu_cache_clean_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000e6c:	f000 031f 	and.w	r3, r0, #31
34000e70:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
34000e72:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
34000e76:	1884      	adds	r4, r0, r2
34000e78:	43c2      	mvns	r2, r0
34000e7a:	1a1b      	subs	r3, r3, r0
34000e7c:	440b      	add	r3, r1
34000e7e:	4422      	add	r2, r4
34000e80:	3b20      	subs	r3, #32
34000e82:	0952      	lsrs	r2, r2, #5
34000e84:	3320      	adds	r3, #32
34000e86:	f102 0e01 	add.w	lr, r2, #1
34000e8a:	bfd8      	it	le
34000e8c:	f04f 0e01 	movle.w	lr, #1
34000e90:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000e94:	f8c5 0268 	str.w	r0, [r5, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000e98:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34000e9a:	f00f c805 	le	lr, 34000e94 <mcu_cache_clean_range+0x38>
34000e9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34000ea2:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
34000ea6:	2000      	movs	r0, #0
34000ea8:	bd30      	pop	{r4, r5, pc}
34000eaa:	bf00      	nop
34000eac:	e000ed00 	.word	0xe000ed00

34000eb0 <_ec_blob_cache_start_func_1>:
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_STM32N6)
  /* *** MCU cache invalidate (only) operation (HW, whole range) *** */
  /*     memory pool: 1 */
  /*     start: (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 1536) */
  /*     end:   (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 1568) */
  mcu_cache_invalidate_range((uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 1536) /* Equivalent hex address = 0x342e0600UL */, (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 1568) /* Equivalent hex address = 0x342e0620UL */);
34000eb0:	4901      	ldr	r1, [pc, #4]	@ (34000eb8 <_ec_blob_cache_start_func_1+0x8>)
34000eb2:	4802      	ldr	r0, [pc, #8]	@ (34000ebc <_ec_blob_cache_start_func_1+0xc>)
34000eb4:	f7ff bfa8 	b.w	34000e08 <mcu_cache_invalidate_range>
34000eb8:	342e0620 	.word	0x342e0620
34000ebc:	342e0600 	.word	0x342e0600

34000ec0 <LL_ATON_End_EpochBlock_60>:


/* scheduling epoch=60   nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_End_EpochBlock_60(const void *epoch_block)
{
34000ec0:	b530      	push	{r4, r5, lr}
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_STM32N6)
  /* *** MCU cache invalidate (only) operation for unaligned buffer start or end address (only line) *** */
  /*     memory pool: 1 */
  /*     start: (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 256) */
  /*     end:   (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 288) */
  mcu_cache_invalidate_range((uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 256) /* Equivalent hex address = 0x342e0100UL */, (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 288) /* Equivalent hex address = 0x342e0120UL */);
34000ec2:	4d20      	ldr	r5, [pc, #128]	@ (34000f44 <LL_ATON_End_EpochBlock_60+0x84>)
34000ec4:	4c20      	ldr	r4, [pc, #128]	@ (34000f48 <LL_ATON_End_EpochBlock_60+0x88>)
{
34000ec6:	b0af      	sub	sp, #188	@ 0xbc
  mcu_cache_invalidate_range((uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 256) /* Equivalent hex address = 0x342e0100UL */, (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 288) /* Equivalent hex address = 0x342e0120UL */);
34000ec8:	4629      	mov	r1, r5
34000eca:	4620      	mov	r0, r4
34000ecc:	f7ff ff9c 	bl	34000e08 <mcu_cache_invalidate_range>
  LL_ATON_LIB_UNUSED(epoch_block);


/* Unit= 27 [PROCESSOR 0] */
/* kind=DequantizeLinear node=Dequantize_252 */
  Dequantizelinear_sw_info dequantizelinear2_sw_info = {
34000ed0:	22b4      	movs	r2, #180	@ 0xb4
34000ed2:	2100      	movs	r1, #0
34000ed4:	a801      	add	r0, sp, #4
34000ed6:	f00d feb7 	bl	3400ec48 <memset>
34000eda:	232a      	movs	r3, #42	@ 0x2a
34000edc:	2205      	movs	r2, #5
34000ede:	f88d 3004 	strb.w	r3, [sp, #4]
34000ee2:	2301      	movs	r3, #1
34000ee4:	2104      	movs	r1, #4
34000ee6:	e9cd 2304 	strd	r2, r3, [sp, #16]
34000eea:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
34000eee:	e9cd 2206 	strd	r2, r2, [sp, #24]
34000ef2:	e9cd 250a 	strd	r2, r5, [sp, #40]	@ 0x28
34000ef6:	9211      	str	r2, [sp, #68]	@ 0x44
34000ef8:	2214      	movs	r2, #20
34000efa:	e9cd 2112 	strd	r2, r1, [sp, #72]	@ 0x48
34000efe:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
34000f02:	4a12      	ldr	r2, [pc, #72]	@ (34000f4c <LL_ATON_End_EpochBlock_60+0x8c>)
    .general.type = LL_SW_DEQUANTIZELINEAR,
  };

  /* Low Level SW Layer function invocation. This will exploit EmbedNets libs) */
  /* Node Dequantize_252 mapped on EmbedNets (INTEGER) as DequantizeLinear | Category: Format-Converter */
  ll_sw_forward_dequantizelinear(&dequantizelinear2_sw_info);
34000f04:	eb0d 0001 	add.w	r0, sp, r1
  Dequantizelinear_sw_info dequantizelinear2_sw_info = {
34000f08:	9221      	str	r2, [sp, #132]	@ 0x84
34000f0a:	f502 7220 	add.w	r2, r2, #640	@ 0x280
34000f0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
34000f12:	e9cd 3308 	strd	r3, r3, [sp, #32]
34000f16:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
34000f1a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
34000f1e:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
34000f22:	931c      	str	r3, [sp, #112]	@ 0x70
34000f24:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
34000f28:	9327      	str	r3, [sp, #156]	@ 0x9c
34000f2a:	922c      	str	r2, [sp, #176]	@ 0xb0
34000f2c:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
34000f30:	9416      	str	r4, [sp, #88]	@ 0x58
  ll_sw_forward_dequantizelinear(&dequantizelinear2_sw_info);
34000f32:	f009 fc59 	bl	3400a7e8 <ll_sw_forward_dequantizelinear>
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_STM32N6)
  /* *** MCU cache clean (only) operation (SW, whole range) *** */
  /*     memory pool: 1 */
  /*     start: (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 256) */
  /*     end:   (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 288) */
  mcu_cache_clean_range((uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 256) /* Equivalent hex address = 0x342e0100UL */, (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 288) /* Equivalent hex address = 0x342e0120UL */);
34000f36:	4629      	mov	r1, r5
34000f38:	4620      	mov	r0, r4
34000f3a:	f7ff ff8f 	bl	34000e5c <mcu_cache_clean_range>
#endif // (LL_ATON_PLATFORM == LL_ATON_PLAT_STM32N6)

  // Un-lock MCU cache
  LL_ATON_UNLOCK_MCU_CACHE();

}
34000f3e:	b02f      	add	sp, #188	@ 0xbc
34000f40:	bd30      	pop	{r4, r5, pc}
34000f42:	bf00      	nop
34000f44:	342e0120 	.word	0x342e0120
34000f48:	342e0100 	.word	0x342e0100
34000f4c:	704146c0 	.word	0x704146c0

34000f50 <LL_ATON_End_EpochBlock_59>:
{
34000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
  mcu_cache_invalidate_range((uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 224) /* Equivalent hex address = 0x342e00e0UL */, (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 256) /* Equivalent hex address = 0x342e0100UL */);
34000f52:	4f34      	ldr	r7, [pc, #208]	@ (34001024 <LL_ATON_End_EpochBlock_59+0xd4>)
  mcu_cache_invalidate_range((uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 288) /* Equivalent hex address = 0x342e0120UL */, (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 320) /* Equivalent hex address = 0x342e0140UL */);
34000f54:	4c34      	ldr	r4, [pc, #208]	@ (34001028 <LL_ATON_End_EpochBlock_59+0xd8>)
34000f56:	4d35      	ldr	r5, [pc, #212]	@ (3400102c <LL_ATON_End_EpochBlock_59+0xdc>)
{
34000f58:	b0d3      	sub	sp, #332	@ 0x14c
  mcu_cache_invalidate_range((uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 224) /* Equivalent hex address = 0x342e00e0UL */, (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 256) /* Equivalent hex address = 0x342e0100UL */);
34000f5a:	4639      	mov	r1, r7
34000f5c:	4834      	ldr	r0, [pc, #208]	@ (34001030 <LL_ATON_End_EpochBlock_59+0xe0>)
34000f5e:	f7ff ff53 	bl	34000e08 <mcu_cache_invalidate_range>
  mcu_cache_invalidate_range((uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 288) /* Equivalent hex address = 0x342e0120UL */, (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 320) /* Equivalent hex address = 0x342e0140UL */);
34000f62:	4629      	mov	r1, r5
34000f64:	4620      	mov	r0, r4
34000f66:	f7ff ff4f 	bl	34000e08 <mcu_cache_invalidate_range>
  Softmax_integer_sw_info softmax_integer1_sw_info = {
34000f6a:	f44f 72a4 	mov.w	r2, #328	@ 0x148
34000f6e:	2100      	movs	r1, #0
34000f70:	4668      	mov	r0, sp
34000f72:	f00d fe69 	bl	3400ec48 <memset>
34000f76:	2309      	movs	r3, #9
34000f78:	2205      	movs	r2, #5
34000f7a:	f88d 3000 	strb.w	r3, [sp]
34000f7e:	2301      	movs	r3, #1
34000f80:	e9cd 2205 	strd	r2, r2, [sp, #20]
34000f84:	e9cd 3201 	strd	r3, r2, [sp, #4]
34000f88:	e9cd 320c 	strd	r3, r2, [sp, #48]	@ 0x30
34000f8c:	e9cd 2210 	strd	r2, r2, [sp, #64]	@ 0x40
34000f90:	e9cd 2414 	strd	r2, r4, [sp, #80]	@ 0x50
34000f94:	9209      	str	r2, [sp, #36]	@ 0x24
34000f96:	223f      	movs	r2, #63	@ 0x3f
34000f98:	4926      	ldr	r1, [pc, #152]	@ (34001034 <LL_ATON_End_EpochBlock_59+0xe4>)
34000f9a:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
34000f9e:	e9cd 321a 	strd	r3, r2, [sp, #104]	@ 0x68
34000fa2:	910a      	str	r1, [sp, #40]	@ 0x28
34000fa4:	22fc      	movs	r2, #252	@ 0xfc
34000fa6:	2104      	movs	r1, #4
34000fa8:	4e23      	ldr	r6, [pc, #140]	@ (34001038 <LL_ATON_End_EpochBlock_59+0xe8>)
34000faa:	e9cd 211c 	strd	r2, r1, [sp, #112]	@ 0x70
34000fae:	e9cd 121e 	strd	r1, r2, [sp, #120]	@ 0x78
34000fb2:	e9cd 3303 	strd	r3, r3, [sp, #12]
34000fb6:	e9cd 3307 	strd	r3, r3, [sp, #28]
34000fba:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
34000fbe:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
34000fc2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
34000fc6:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
34000fca:	9317      	str	r3, [sp, #92]	@ 0x5c
34000fcc:	9620      	str	r6, [sp, #128]	@ 0x80
34000fce:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
34000fd2:	9326      	str	r3, [sp, #152]	@ 0x98
34000fd4:	9331      	str	r3, [sp, #196]	@ 0xc4
34000fd6:	f88d 30dc 	strb.w	r3, [sp, #220]	@ 0xdc
34000fda:	933c      	str	r3, [sp, #240]	@ 0xf0
34000fdc:	9347      	str	r3, [sp, #284]	@ 0x11c
34000fde:	f88d 3134 	strb.w	r3, [sp, #308]	@ 0x134
34000fe2:	2319      	movs	r3, #25
34000fe4:	4a15      	ldr	r2, [pc, #84]	@ (3400103c <LL_ATON_End_EpochBlock_59+0xec>)
34000fe6:	f06f 013d 	mvn.w	r1, #61	@ 0x3d
34000fea:	922b      	str	r2, [sp, #172]	@ 0xac
34000fec:	f502 7220 	add.w	r2, r2, #640	@ 0x280
34000ff0:	9236      	str	r2, [sp, #216]	@ 0xd8
34000ff2:	f5a2 721c 	sub.w	r2, r2, #624	@ 0x270
34000ff6:	9241      	str	r2, [sp, #260]	@ 0x104
34000ff8:	f502 7220 	add.w	r2, r2, #640	@ 0x280
34000ffc:	924c      	str	r2, [sp, #304]	@ 0x130
34000ffe:	4a10      	ldr	r2, [pc, #64]	@ (34001040 <LL_ATON_End_EpochBlock_59+0xf0>)
  ll_sw_forward_softmax_integer(&softmax_integer1_sw_info);
34001000:	4668      	mov	r0, sp
  Softmax_integer_sw_info softmax_integer1_sw_info = {
34001002:	e9cd 234e 	strd	r2, r3, [sp, #312]	@ 0x138
34001006:	2303      	movs	r3, #3
34001008:	e9cd 1350 	strd	r1, r3, [sp, #320]	@ 0x140
  ll_sw_forward_softmax_integer(&softmax_integer1_sw_info);
3400100c:	f009 fc88 	bl	3400a920 <ll_sw_forward_softmax_integer>
  mcu_cache_clean_range((uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 0) /* Equivalent hex address = 0x342e0000UL */, (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 256) /* Equivalent hex address = 0x342e0100UL */);
34001010:	4639      	mov	r1, r7
34001012:	4630      	mov	r0, r6
34001014:	f7ff ff22 	bl	34000e5c <mcu_cache_clean_range>
  mcu_cache_clean_range((uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 288) /* Equivalent hex address = 0x342e0120UL */, (uintptr_t)__LL_ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x342e0000UL + 320) /* Equivalent hex address = 0x342e0140UL */);
34001018:	4629      	mov	r1, r5
3400101a:	4620      	mov	r0, r4
3400101c:	f7ff ff1e 	bl	34000e5c <mcu_cache_clean_range>
}
34001020:	b053      	add	sp, #332	@ 0x14c
34001022:	bdf0      	pop	{r4, r5, r6, r7, pc}
34001024:	342e0100 	.word	0x342e0100
34001028:	342e0120 	.word	0x342e0120
3400102c:	342e0140 	.word	0x342e0140
34001030:	342e00e0 	.word	0x342e00e0
34001034:	342e0600 	.word	0x342e0600
34001038:	342e0000 	.word	0x342e0000
3400103c:	704146a0 	.word	0x704146a0
34001040:	42eb7e00 	.word	0x42eb7e00

34001044 <LL_ATON_Set_User_Input_Buffer_Default>:
}
34001044:	2003      	movs	r0, #3
34001046:	4770      	bx	lr

34001048 <LL_ATON_Get_User_Input_Buffer_Default>:
}
34001048:	2000      	movs	r0, #0
3400104a:	4770      	bx	lr

3400104c <LL_ATON_Set_User_Output_Buffer_Default>:
LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_Default(uint32_t num, void* buffer, uint32_t size)
3400104c:	2003      	movs	r0, #3
3400104e:	4770      	bx	lr

34001050 <LL_ATON_Get_User_Output_Buffer_Default>:
void *LL_ATON_Get_User_Output_Buffer_Default(uint32_t num)
34001050:	2000      	movs	r0, #0
34001052:	4770      	bx	lr

34001054 <LL_ATON_EC_Network_Init_Default>:
bool LL_ATON_EC_Network_Init_Default(void)
{


  return true;
}
34001054:	2001      	movs	r0, #1
34001056:	4770      	bx	lr

34001058 <LL_ATON_EC_Inference_Init_Default>:

// this function should be called before each inference
bool LL_ATON_EC_Inference_Init_Default(void)
34001058:	2001      	movs	r0, #1
3400105a:	4770      	bx	lr

3400105c <LL_ATON_EpochBlockItems_Default>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
3400105c:	4800      	ldr	r0, [pc, #0]	@ (34001060 <LL_ATON_EpochBlockItems_Default+0x4>)
3400105e:	4770      	bx	lr
34001060:	34012b60 	.word	0x34012b60

34001064 <LL_ATON_Input_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
34001064:	4800      	ldr	r0, [pc, #0]	@ (34001068 <LL_ATON_Input_Buffers_Info_Default+0x4>)
34001066:	4770      	bx	lr
34001068:	34012af0 	.word	0x34012af0

3400106c <LL_ATON_Output_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400106c:	4800      	ldr	r0, [pc, #0]	@ (34001070 <LL_ATON_Output_Buffers_Info_Default+0x4>)
3400106e:	4770      	bx	lr
34001070:	34012a58 	.word	0x34012a58

34001074 <LL_ATON_Internal_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
34001074:	4800      	ldr	r0, [pc, #0]	@ (34001078 <LL_ATON_Internal_Buffers_Info_Default+0x4>)
34001076:	4770      	bx	lr
34001078:	34011b28 	.word	0x34011b28

3400107c <npu_cache_init>:

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
  hcacheaxi_s.Instance = CACHEAXI;
3400107c:	4802      	ldr	r0, [pc, #8]	@ (34001088 <npu_cache_init+0xc>)
3400107e:	4b03      	ldr	r3, [pc, #12]	@ (3400108c <npu_cache_init+0x10>)
34001080:	6003      	str	r3, [r0, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
34001082:	f001 bab5 	b.w	340025f0 <HAL_CACHEAXI_Init>
34001086:	bf00      	nop
34001088:	3403a890 	.word	0x3403a890
3400108c:	580dfc00 	.word	0x580dfc00

34001090 <npu_cache_enable>:
}

void npu_cache_enable(void)
{
34001090:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
34001092:	4c03      	ldr	r4, [pc, #12]	@ (340010a0 <npu_cache_enable+0x10>)
34001094:	4620      	mov	r0, r4
34001096:	f001 fa77 	bl	34002588 <HAL_CACHEAXI_Enable>
  } while (status == HAL_BUSY);
3400109a:	2802      	cmp	r0, #2
3400109c:	d0fa      	beq.n	34001094 <npu_cache_enable+0x4>
}
3400109e:	bd10      	pop	{r4, pc}
340010a0:	3403a890 	.word	0x3403a890

340010a4 <NMI_Handler>:
/**
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
340010a4:	4770      	bx	lr

340010a6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
340010a6:	e7fe      	b.n	340010a6 <HardFault_Handler>

340010a8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
340010a8:	e7fe      	b.n	340010a8 <MemManage_Handler>

340010aa <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
340010aa:	e7fe      	b.n	340010aa <BusFault_Handler>

340010ac <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
340010ac:	e7fe      	b.n	340010ac <UsageFault_Handler>

340010ae <SecureFault_Handler>:
  * @retval None
  */
void SecureFault_Handler(void)
{
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
340010ae:	e7fe      	b.n	340010ae <SecureFault_Handler>

340010b0 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
340010b0:	4770      	bx	lr

340010b2 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
340010b2:	e7fe      	b.n	340010b2 <DebugMon_Handler>

340010b4 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
  while (1)
340010b4:	e7fe      	b.n	340010b4 <PendSV_Handler>

340010b6 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
340010b6:	f001 b985 	b.w	340023c4 <HAL_IncTick>

340010ba <_getpid>:
}

int _getpid(void)
{
  return 1;
}
340010ba:	2001      	movs	r0, #1
340010bc:	4770      	bx	lr

340010be <_kill>:

int _kill(int pid, int sig)
{
340010be:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
340010c0:	f00e f816 	bl	3400f0f0 <__errno>
340010c4:	2316      	movs	r3, #22
340010c6:	6003      	str	r3, [r0, #0]
  return -1;
}
340010c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340010cc:	bd08      	pop	{r3, pc}

340010ce <_exit>:

void _exit (int status)
{
340010ce:	b508      	push	{r3, lr}
  errno = EINVAL;
340010d0:	f00e f80e 	bl	3400f0f0 <__errno>
340010d4:	2316      	movs	r3, #22
340010d6:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
340010d8:	e7fe      	b.n	340010d8 <_exit+0xa>

340010da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
340010da:	b570      	push	{r4, r5, r6, lr}
340010dc:	460d      	mov	r5, r1
340010de:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
340010e0:	460e      	mov	r6, r1
340010e2:	1b73      	subs	r3, r6, r5
340010e4:	429c      	cmp	r4, r3
340010e6:	dc01      	bgt.n	340010ec <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
340010e8:	4620      	mov	r0, r4
340010ea:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
340010ec:	f3af 8000 	nop.w
340010f0:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
340010f4:	e7f5      	b.n	340010e2 <_read+0x8>

340010f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
340010f6:	b570      	push	{r4, r5, r6, lr}
340010f8:	460d      	mov	r5, r1
340010fa:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
340010fc:	460e      	mov	r6, r1
340010fe:	1b73      	subs	r3, r6, r5
34001100:	429c      	cmp	r4, r3
34001102:	dc01      	bgt.n	34001108 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
34001104:	4620      	mov	r0, r4
34001106:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
34001108:	f816 0b01 	ldrb.w	r0, [r6], #1
3400110c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001110:	e7f5      	b.n	340010fe <_write+0x8>

34001112 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
34001112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001116:	4770      	bx	lr

34001118 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
34001118:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
3400111c:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
3400111e:	604b      	str	r3, [r1, #4]
}
34001120:	4770      	bx	lr

34001122 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
34001122:	2001      	movs	r0, #1
34001124:	4770      	bx	lr

34001126 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
34001126:	2000      	movs	r0, #0
34001128:	4770      	bx	lr

3400112a <APS256XX_EnableMemoryMappedMode>:
  * @param  BurstType Type of burst used for the access
  * @retval Memory status
  */
int32_t APS256XX_EnableMemoryMappedMode(XSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                        uint32_t IOMode, uint32_t BurstType)
{
3400112a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400112e:	b098      	sub	sp, #96	@ 0x60
34001130:	4605      	mov	r5, r0
34001132:	4617      	mov	r7, r2
34001134:	460e      	mov	r6, r1
  XSPI_RegularCmdTypeDef   sCommand = {0};
34001136:	223c      	movs	r2, #60	@ 0x3c
34001138:	2100      	movs	r1, #0
3400113a:	a806      	add	r0, sp, #24
{
3400113c:	4698      	mov	r8, r3
3400113e:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
  XSPI_RegularCmdTypeDef   sCommand = {0};
34001140:	f00d fd82 	bl	3400ec48 <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
34001144:	2210      	movs	r2, #16
34001146:	2100      	movs	r1, #0
34001148:	a801      	add	r0, sp, #4
3400114a:	f00d fd7d 	bl	3400ec48 <memset>

  /* Initialize the write command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_WRITE_CFG;
3400114e:	2302      	movs	r3, #2
34001150:	9305      	str	r3, [sp, #20]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
34001152:	2304      	movs	r3, #4
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
34001154:	2c00      	cmp	r4, #0
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
34001156:	9308      	str	r3, [sp, #32]
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
34001158:	bf0c      	ite	eq
3400115a:	23a0      	moveq	r3, #160	@ 0xa0
3400115c:	2380      	movne	r3, #128	@ 0x80
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400115e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
34001162:	9307      	str	r3, [sp, #28]
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
34001164:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001168:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400116c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
34001170:	f1b8 0f00 	cmp.w	r8, #0
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
34001174:	930e      	str	r3, [sp, #56]	@ 0x38
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
34001176:	bf14      	ite	ne
34001178:	f04f 63a0 	movne.w	r3, #83886080	@ 0x5000000
3400117c:	f04f 6380 	moveq.w	r3, #67108864	@ 0x4000000
34001180:	9313      	str	r3, [sp, #76]	@ 0x4c
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
34001182:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001186:	9315      	str	r3, [sp, #84]	@ 0x54
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
34001188:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
3400118c:	3f01      	subs	r7, #1
 #if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400118e:	f241 3288 	movw	r2, #5000	@ 0x1388
34001192:	4628      	mov	r0, r5
34001194:	a905      	add	r1, sp, #20
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
34001196:	9716      	str	r7, [sp, #88]	@ 0x58
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
34001198:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400119a:	f008 f8fb 	bl	34009394 <HAL_XSPI_Command>
3400119e:	b120      	cbz	r0, 340011aa <APS256XX_EnableMemoryMappedMode+0x80>
  {
    return APS256XX_ERROR;
340011a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return APS256XX_ERROR;
  }

  return APS256XX_OK;
}
340011a4:	b018      	add	sp, #96	@ 0x60
340011a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
340011aa:	2301      	movs	r3, #1
340011ac:	9305      	str	r3, [sp, #20]
  sCommand.Instruction   = ((BurstType == 0U) ? APS256XX_READ_LINEAR_BURST_CMD : APS256XX_READ_CMD);
340011ae:	fab4 f384 	clz	r3, r4
340011b2:	095b      	lsrs	r3, r3, #5
340011b4:	015b      	lsls	r3, r3, #5
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
340011b6:	3e01      	subs	r6, #1
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340011b8:	f241 3288 	movw	r2, #5000	@ 0x1388
340011bc:	4628      	mov	r0, r5
340011be:	a905      	add	r1, sp, #20
  sCommand.Instruction   = ((BurstType == 0U) ? APS256XX_READ_LINEAR_BURST_CMD : APS256XX_READ_CMD);
340011c0:	9307      	str	r3, [sp, #28]
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
340011c2:	9616      	str	r6, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340011c4:	f008 f8e6 	bl	34009394 <HAL_XSPI_Command>
340011c8:	2800      	cmp	r0, #0
340011ca:	d1e9      	bne.n	340011a0 <APS256XX_EnableMemoryMappedMode+0x76>
  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
340011cc:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
340011ce:	a901      	add	r1, sp, #4
340011d0:	4628      	mov	r0, r5
340011d2:	f008 fb0d 	bl	340097f0 <HAL_XSPI_MemoryMapped>
340011d6:	3800      	subs	r0, #0
340011d8:	bf18      	it	ne
340011da:	2001      	movne	r0, #1
340011dc:	4240      	negs	r0, r0
340011de:	e7e1      	b.n	340011a4 <APS256XX_EnableMemoryMappedMode+0x7a>

340011e0 <APS256XX_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS256XX_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
340011e0:	b530      	push	{r4, r5, lr}
340011e2:	b097      	sub	sp, #92	@ 0x5c
340011e4:	460d      	mov	r5, r1
340011e6:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef sCommand = {0};
340011e8:	2100      	movs	r1, #0
{
340011ea:	f88d 2007 	strb.w	r2, [sp, #7]
  XSPI_RegularCmdTypeDef sCommand = {0};
340011ee:	a803      	add	r0, sp, #12
340011f0:	224c      	movs	r2, #76	@ 0x4c
340011f2:	f00d fd29 	bl	3400ec48 <memset>
  /* Initialize the write register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
  sCommand.Instruction         = APS256XX_WRITE_REG_CMD;
340011f6:	23c0      	movs	r3, #192	@ 0xc0
340011f8:	2204      	movs	r2, #4
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
340011fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  sCommand.Instruction         = APS256XX_WRITE_REG_CMD;
340011fe:	e9cd 3205 	strd	r3, r2, [sp, #20]
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
34001202:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001206:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400120a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400120e:	930c      	str	r3, [sp, #48]	@ 0x30
  sCommand.Address             = Address;
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
34001210:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  sCommand.Address             = Address;
34001214:	9509      	str	r5, [sp, #36]	@ 0x24
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
34001216:	9311      	str	r3, [sp, #68]	@ 0x44
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
  sCommand.DataLength          = 2;
34001218:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
3400121c:	2302      	movs	r3, #2
 #if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400121e:	f241 3288 	movw	r2, #5000	@ 0x1388
34001222:	4620      	mov	r0, r4
34001224:	a903      	add	r1, sp, #12
  sCommand.DataLength          = 2;
34001226:	e9cd 3512 	strd	r3, r5, [sp, #72]	@ 0x48
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400122a:	f008 f8b3 	bl	34009394 <HAL_XSPI_Command>
3400122e:	b960      	cbnz	r0, 3400124a <APS256XX_WriteReg+0x6a>
  {
    return APS256XX_ERROR;
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001230:	f241 3288 	movw	r2, #5000	@ 0x1388
34001234:	4620      	mov	r0, r4
34001236:	f10d 0107 	add.w	r1, sp, #7
3400123a:	f008 f9c3 	bl	340095c4 <HAL_XSPI_Transmit>
3400123e:	3800      	subs	r0, #0
34001240:	bf18      	it	ne
34001242:	2001      	movne	r0, #1
34001244:	4240      	negs	r0, r0
  {
    return APS256XX_ERROR;
  }

  return APS256XX_OK;
}
34001246:	b017      	add	sp, #92	@ 0x5c
34001248:	bd30      	pop	{r4, r5, pc}
    return APS256XX_ERROR;
3400124a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400124e:	e7fa      	b.n	34001246 <APS256XX_WriteReg+0x66>

34001250 <MX66UW1G45G_GetFlashInfo>:
  */
int32_t MX66UW1G45G_GetFlashInfo(MX66UW1G45G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize = MX66UW1G45G_FLASH_SIZE;
  pInfo->EraseSectorSize = MX66UW1G45G_BLOCK_64K;
34001250:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34001254:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34001258:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_64K);
  pInfo->EraseSubSectorSize = MX66UW1G45G_BLOCK_4K;
3400125c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34001260:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001264:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
34001268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  pInfo->EraseSubSector1Size = MX66UW1G45G_BLOCK_4K;
  pInfo->EraseSubSector1Number = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
  pInfo->ProgPageSize = MX66UW1G45G_PAGE_SIZE;
  pInfo->ProgPagesNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_PAGE_SIZE);
3400126c:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSubSector1Size = MX66UW1G45G_BLOCK_4K;
34001270:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
34001274:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_PAGE_SIZE);
34001276:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
3400127a:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX66UW1G45G_OK;
};
3400127e:	2000      	movs	r0, #0
34001280:	4770      	bx	lr

34001282 <MX66UW1G45G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX66UW1G45G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                        MX66UW1G45G_Transfer_t Rate)
{
34001282:	b570      	push	{r4, r5, r6, lr}
34001284:	460d      	mov	r5, r1
34001286:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef s_command = {0};
34001288:	2100      	movs	r1, #0
{
3400128a:	4606      	mov	r6, r0
3400128c:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400128e:	a805      	add	r0, sp, #20
34001290:	224c      	movs	r2, #76	@ 0x4c
34001292:	f00d fcd9 	bl	3400ec48 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001296:	2214      	movs	r2, #20
34001298:	2100      	movs	r1, #0
3400129a:	4668      	mov	r0, sp
3400129c:	f00d fcd4 	bl	3400ec48 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
340012a0:	b935      	cbnz	r5, 340012b0 <MX66UW1G45G_AutoPollingMemReady+0x2e>

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
340012a2:	2301      	movs	r3, #1
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
340012a4:	429c      	cmp	r4, r3
340012a6:	d104      	bne.n	340012b2 <MX66UW1G45G_AutoPollingMemReady+0x30>
    return MX66UW1G45G_ERROR;
340012a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
340012ac:	b018      	add	sp, #96	@ 0x60
340012ae:	bd70      	pop	{r4, r5, r6, pc}
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
340012b0:	2304      	movs	r3, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340012b2:	1e60      	subs	r0, r4, #1
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
340012b4:	9308      	str	r3, [sp, #32]
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340012b6:	4243      	negs	r3, r0
340012b8:	4143      	adcs	r3, r0
340012ba:	00da      	lsls	r2, r3, #3
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
340012bc:	2d00      	cmp	r5, #0
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
340012be:	920a      	str	r2, [sp, #40]	@ 0x28
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
340012c0:	bf14      	ite	ne
340012c2:	2201      	movne	r2, #1
340012c4:	2200      	moveq	r2, #0
340012c6:	ea4f 1102 	mov.w	r1, r2, lsl #4
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
340012ca:	ea4f 2282 	mov.w	r2, r2, lsl #10
340012ce:	920c      	str	r2, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
340012d0:	ea4f 22c3 	mov.w	r2, r3, lsl #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
340012d4:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
340012d6:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
340012da:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340012dc:	bf0c      	ite	eq
340012de:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
340012e2:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
340012e6:	9109      	str	r1, [sp, #36]	@ 0x24
                              : MX66UW1G45G_OCTA_READ_STATUS_REG_CMD;
340012e8:	f240 51fa 	movw	r1, #1530	@ 0x5fa
340012ec:	bf08      	it	eq
340012ee:	2105      	moveq	r1, #5
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340012f0:	9213      	str	r2, [sp, #76]	@ 0x4c
                              : HAL_XSPI_DATA_DTR_DISABLE;
340012f2:	ea4f 62c3 	mov.w	r2, r3, lsl #27
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
340012f6:	4628      	mov	r0, r5
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
340012f8:	9107      	str	r1, [sp, #28]
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
340012fa:	9215      	str	r2, [sp, #84]	@ 0x54
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
340012fc:	d003      	beq.n	34001306 <MX66UW1G45G_AutoPollingMemReady+0x84>
340012fe:	2c01      	cmp	r4, #1
34001300:	bf0c      	ite	eq
34001302:	2005      	moveq	r0, #5
34001304:	2004      	movne	r0, #4
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001306:	075b      	lsls	r3, r3, #29
34001308:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_config.MatchMask = MX66UW1G45G_SR_WIP;
3400130a:	2301      	movs	r3, #1
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400130c:	2c01      	cmp	r4, #1
3400130e:	bf0c      	ite	eq
34001310:	2202      	moveq	r2, #2
34001312:	2201      	movne	r2, #1
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001314:	2110      	movs	r1, #16
  s_config.MatchMask = MX66UW1G45G_SR_WIP;
34001316:	9301      	str	r3, [sp, #4]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001318:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400131c:	9016      	str	r0, [sp, #88]	@ 0x58
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400131e:	e9cd 3103 	strd	r3, r1, [sp, #12]
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
34001322:	9214      	str	r2, [sp, #80]	@ 0x50
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001324:	4630      	mov	r0, r6
34001326:	f241 3288 	movw	r2, #5000	@ 0x1388
3400132a:	a905      	add	r1, sp, #20
3400132c:	f008 f832 	bl	34009394 <HAL_XSPI_Command>
34001330:	2800      	cmp	r0, #0
34001332:	d1b9      	bne.n	340012a8 <MX66UW1G45G_AutoPollingMemReady+0x26>
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001334:	f241 3288 	movw	r2, #5000	@ 0x1388
34001338:	4669      	mov	r1, sp
3400133a:	4630      	mov	r0, r6
3400133c:	f008 f9dc 	bl	340096f8 <HAL_XSPI_AutoPolling>
34001340:	3800      	subs	r0, #0
34001342:	bf18      	it	ne
34001344:	2001      	movne	r0, #1
34001346:	4240      	negs	r0, r0
34001348:	e7b0      	b.n	340012ac <MX66UW1G45G_AutoPollingMemReady+0x2a>

3400134a <MX66UW1G45G_EnableSTRMemoryMappedMode>:
  * @param  AddressWidth Address size
  * @retval XSPI memory status
  */
int32_t MX66UW1G45G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                              MX66UW1G45G_AddressWidth_t AddressWidth)
{
3400134a:	b570      	push	{r4, r5, r6, lr}
3400134c:	460c      	mov	r4, r1
3400134e:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef s_command = {0};
34001350:	2100      	movs	r1, #0
{
34001352:	4606      	mov	r6, r0
34001354:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001356:	a805      	add	r0, sp, #20
34001358:	224c      	movs	r2, #76	@ 0x4c
3400135a:	f00d fc75 	bl	3400ec48 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400135e:	2210      	movs	r2, #16
34001360:	2100      	movs	r1, #0
34001362:	a801      	add	r0, sp, #4
34001364:	f00d fc70 	bl	3400ec48 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX66UW1G45G_OPI_MODE) && (AddressWidth == MX66UW1G45G_3BYTES_SIZE))
34001368:	2c01      	cmp	r4, #1
3400136a:	d105      	bne.n	34001378 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x2e>

  /* Initialize the read command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400136c:	2304      	movs	r3, #4
  if ((Mode == MX66UW1G45G_OPI_MODE) && (AddressWidth == MX66UW1G45G_3BYTES_SIZE))
3400136e:	b93d      	cbnz	r5, 34001380 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x36>
    return MX66UW1G45G_ERROR;
34001370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
34001374:	b018      	add	sp, #96	@ 0x60
34001376:	bd70      	pop	{r4, r5, r6, pc}
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
34001378:	2c00      	cmp	r4, #0
3400137a:	bf14      	ite	ne
3400137c:	2304      	movne	r3, #4
3400137e:	2301      	moveq	r3, #1
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
34001380:	2201      	movs	r2, #1
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
34001382:	2c00      	cmp	r4, #0
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
34001384:	9308      	str	r3, [sp, #32]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
34001386:	bf14      	ite	ne
34001388:	4613      	movne	r3, r2
3400138a:	2300      	moveq	r3, #0
3400138c:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
34001390:	9205      	str	r2, [sp, #20]
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
34001392:	9309      	str	r3, [sp, #36]	@ 0x24
                              : MX66UW1G45G_OCTA_READ_CMD;
34001394:	d140      	bne.n	34001418 <MX66UW1G45G_EnableSTRMemoryMappedMode+0xce>
34001396:	2d00      	cmp	r5, #0
34001398:	bf0c      	ite	eq
3400139a:	230b      	moveq	r3, #11
3400139c:	230c      	movne	r3, #12
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400139e:	2c00      	cmp	r4, #0
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
340013a0:	9307      	str	r3, [sp, #28]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340013a2:	bf0c      	ite	eq
340013a4:	f44f 7380 	moveq.w	r3, #256	@ 0x100
340013a8:	f44f 6380 	movne.w	r3, #1024	@ 0x400
                               : HAL_XSPI_ADDRESS_32_BITS;
340013ac:	2d00      	cmp	r5, #0
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340013ae:	930c      	str	r3, [sp, #48]	@ 0x30
                               : HAL_XSPI_ADDRESS_32_BITS;
340013b0:	bf0c      	ite	eq
340013b2:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
340013b6:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340013ba:	2c00      	cmp	r4, #0
  s_command.AddressWidth = (AddressWidth == MX66UW1G45G_3BYTES_SIZE)
340013bc:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340013be:	bf0c      	ite	eq
340013c0:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
340013c4:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
340013c8:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
340013ca:	bf0c      	ite	eq
340013cc:	2308      	moveq	r3, #8
340013ce:	230a      	movne	r3, #10
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340013d0:	f241 3288 	movw	r2, #5000	@ 0x1388
340013d4:	4630      	mov	r0, r6
340013d6:	a905      	add	r1, sp, #20
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
340013d8:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340013da:	f007 ffdb 	bl	34009394 <HAL_XSPI_Command>
340013de:	2800      	cmp	r0, #0
340013e0:	d1c6      	bne.n	34001370 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x26>
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
340013e2:	2302      	movs	r3, #2
340013e4:	9305      	str	r3, [sp, #20]
                              : MX66UW1G45G_OCTA_PAGE_PROG_CMD;
340013e6:	b9d4      	cbnz	r4, 3400141e <MX66UW1G45G_EnableSTRMemoryMappedMode+0xd4>
340013e8:	2d00      	cmp	r5, #0
340013ea:	bf18      	it	ne
340013ec:	2312      	movne	r3, #18
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
340013ee:	9307      	str	r3, [sp, #28]
  s_command.DummyCycles = 0U;
340013f0:	2300      	movs	r3, #0
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340013f2:	f241 3288 	movw	r2, #5000	@ 0x1388
340013f6:	4630      	mov	r0, r6
340013f8:	a905      	add	r1, sp, #20
  s_command.DummyCycles = 0U;
340013fa:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340013fc:	f007 ffca 	bl	34009394 <HAL_XSPI_Command>
34001400:	2800      	cmp	r0, #0
34001402:	d1b5      	bne.n	34001370 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x26>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001404:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001406:	a901      	add	r1, sp, #4
34001408:	4630      	mov	r0, r6
3400140a:	f008 f9f1 	bl	340097f0 <HAL_XSPI_MemoryMapped>
3400140e:	3800      	subs	r0, #0
34001410:	bf18      	it	ne
34001412:	2001      	movne	r0, #1
34001414:	4240      	negs	r0, r0
34001416:	e7ad      	b.n	34001374 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x2a>
                              : MX66UW1G45G_OCTA_READ_CMD;
34001418:	f64e 4313 	movw	r3, #60435	@ 0xec13
3400141c:	e7bf      	b.n	3400139e <MX66UW1G45G_EnableSTRMemoryMappedMode+0x54>
                              : MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400141e:	f241 23ed 	movw	r3, #4845	@ 0x12ed
34001422:	e7e4      	b.n	340013ee <MX66UW1G45G_EnableSTRMemoryMappedMode+0xa4>

34001424 <MX66UW1G45G_EnableDTRMemoryMappedMode>:
  * @param  AddressWidth Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval XSPI memory status
  */
int32_t MX66UW1G45G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode)
{
34001424:	b530      	push	{r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef s_command = {0};
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001426:	2510      	movs	r5, #16
{
34001428:	b099      	sub	sp, #100	@ 0x64
3400142a:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef s_command = {0};
3400142c:	223c      	movs	r2, #60	@ 0x3c
3400142e:	2100      	movs	r1, #0
34001430:	a806      	add	r0, sp, #24
34001432:	f00d fc09 	bl	3400ec48 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001436:	462a      	mov	r2, r5
34001438:	2100      	movs	r1, #0
3400143a:	a801      	add	r0, sp, #4
3400143c:	f00d fc04 	bl	3400ec48 <memset>

  /* Initialize the read command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
34001440:	2301      	movs	r3, #1
34001442:	9305      	str	r3, [sp, #20]
  s_command.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
34001444:	2304      	movs	r3, #4
34001446:	9308      	str	r3, [sp, #32]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
34001448:	2308      	movs	r3, #8
  s_command.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
3400144a:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  s_command.Instruction = MX66UW1G45G_OCTA_READ_DTR_CMD;
3400144e:	f64e 6311 	movw	r3, #60945	@ 0xee11
34001452:	9307      	str	r3, [sp, #28]
  s_command.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
34001454:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
34001458:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
  s_command.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3400145c:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400145e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001462:	e9cd 3e0d 	strd	r3, lr, [sp, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
  s_command.DataMode = HAL_XSPI_DATA_8_LINES;
34001466:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  s_command.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles = DUMMY_CYCLES_READ_OCTAL_DTR;
3400146a:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  s_command.DataMode = HAL_XSPI_DATA_8_LINES;
3400146e:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles = DUMMY_CYCLES_READ_OCTAL_DTR;
34001470:	230a      	movs	r3, #10
34001472:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
34001476:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 #if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400147a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400147e:	4620      	mov	r0, r4
34001480:	a905      	add	r1, sp, #20
  s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
34001482:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001484:	f007 ff86 	bl	34009394 <HAL_XSPI_Command>
34001488:	b118      	cbz	r0, 34001492 <MX66UW1G45G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX66UW1G45G_ERROR;
3400148a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400148e:	b019      	add	sp, #100	@ 0x64
34001490:	bd30      	pop	{r4, r5, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
34001492:	2302      	movs	r3, #2
34001494:	9305      	str	r3, [sp, #20]
  s_command.Instruction = MX66UW1G45G_OCTA_PAGE_PROG_CMD;
34001496:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
3400149a:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400149e:	f241 3288 	movw	r2, #5000	@ 0x1388
340014a2:	4620      	mov	r0, r4
340014a4:	a905      	add	r1, sp, #20
  s_command.Instruction = MX66UW1G45G_OCTA_PAGE_PROG_CMD;
340014a6:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340014a8:	f007 ff74 	bl	34009394 <HAL_XSPI_Command>
340014ac:	2800      	cmp	r0, #0
340014ae:	d1ec      	bne.n	3400148a <MX66UW1G45G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
340014b0:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
340014b2:	a901      	add	r1, sp, #4
340014b4:	4620      	mov	r0, r4
340014b6:	f008 f99b 	bl	340097f0 <HAL_XSPI_MemoryMapped>
340014ba:	3800      	subs	r0, #0
340014bc:	bf18      	it	ne
340014be:	2001      	movne	r0, #1
340014c0:	4240      	negs	r0, r0
340014c2:	e7e4      	b.n	3400148e <MX66UW1G45G_EnableDTRMemoryMappedMode+0x6a>

340014c4 <MX66UW1G45G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
340014c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340014c8:	460e      	mov	r6, r1
340014ca:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef s_command = {0};
340014cc:	2100      	movs	r1, #0
{
340014ce:	4607      	mov	r7, r0
340014d0:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340014d2:	a805      	add	r0, sp, #20
340014d4:	224c      	movs	r2, #76	@ 0x4c
340014d6:	f00d fbb7 	bl	3400ec48 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
340014da:	2214      	movs	r2, #20
340014dc:	2100      	movs	r1, #0
340014de:	4668      	mov	r0, sp
340014e0:	f00d fbb2 	bl	3400ec48 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
340014e4:	b93e      	cbnz	r6, 340014f6 <MX66UW1G45G_WriteEnable+0x32>

  /* Initialize the write enable command */
  s_command.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
340014e6:	2301      	movs	r3, #1
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
340014e8:	429d      	cmp	r5, r3
340014ea:	d105      	bne.n	340014f8 <MX66UW1G45G_WriteEnable+0x34>
    return MX66UW1G45G_ERROR;
340014ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
340014f0:	b018      	add	sp, #96	@ 0x60
340014f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
340014f6:	2304      	movs	r3, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340014f8:	1e69      	subs	r1, r5, #1
340014fa:	424c      	negs	r4, r1
340014fc:	414c      	adcs	r4, r1
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
340014fe:	2e00      	cmp	r6, #0
34001500:	bf14      	ite	ne
34001502:	f04f 0801 	movne.w	r8, #1
34001506:	f04f 0800 	moveq.w	r8, #0
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400150a:	9308      	str	r3, [sp, #32]
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400150c:	ea4f 03c4 	mov.w	r3, r4, lsl #3
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
34001510:	930a      	str	r3, [sp, #40]	@ 0x28
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
34001512:	ea4f 1308 	mov.w	r3, r8, lsl #4
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
34001516:	9309      	str	r3, [sp, #36]	@ 0x24
                              : MX66UW1G45G_OCTA_WRITE_ENABLE_CMD;
34001518:	f240 63f9 	movw	r3, #1785	@ 0x6f9
3400151c:	bf08      	it	eq
3400151e:	2306      	moveq	r3, #6
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001520:	f241 3288 	movw	r2, #5000	@ 0x1388
34001524:	4638      	mov	r0, r7
34001526:	a905      	add	r1, sp, #20
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
34001528:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400152a:	f007 ff33 	bl	34009394 <HAL_XSPI_Command>
3400152e:	2800      	cmp	r0, #0
34001530:	d1dc      	bne.n	340014ec <MX66UW1G45G_WriteEnable+0x28>
                              : MX66UW1G45G_OCTA_READ_STATUS_REG_CMD;
34001532:	2e00      	cmp	r6, #0
34001534:	f240 53fa 	movw	r3, #1530	@ 0x5fa
34001538:	bf08      	it	eq
3400153a:	2305      	moveq	r3, #5
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400153c:	9307      	str	r3, [sp, #28]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400153e:	ea4f 2388 	mov.w	r3, r8, lsl #10
34001542:	930c      	str	r3, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001544:	ea4f 23c4 	mov.w	r3, r4, lsl #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
34001548:	930e      	str	r3, [sp, #56]	@ 0x38
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400154a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400154e:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001550:	bf0c      	ite	eq
34001552:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
34001556:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
3400155a:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400155c:	ea4f 63c4 	mov.w	r3, r4, lsl #27
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
34001560:	4632      	mov	r2, r6
  s_command.Address = 0U;
34001562:	900b      	str	r0, [sp, #44]	@ 0x2c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
34001564:	9315      	str	r3, [sp, #84]	@ 0x54
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
34001566:	d003      	beq.n	34001570 <MX66UW1G45G_WriteEnable+0xac>
34001568:	2d01      	cmp	r5, #1
3400156a:	bf0c      	ite	eq
3400156c:	2205      	moveq	r2, #5
3400156e:	2204      	movne	r2, #4
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
34001570:	2d01      	cmp	r5, #1
34001572:	bf0c      	ite	eq
34001574:	2302      	moveq	r3, #2
34001576:	2301      	movne	r3, #1
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
34001578:	9216      	str	r2, [sp, #88]	@ 0x58
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400157a:	0764      	lsls	r4, r4, #29
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400157c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001580:	4638      	mov	r0, r7
34001582:	a905      	add	r1, sp, #20
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
34001584:	9314      	str	r3, [sp, #80]	@ 0x50
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001586:	9417      	str	r4, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001588:	f007 ff04 	bl	34009394 <HAL_XSPI_Command>
3400158c:	2800      	cmp	r0, #0
3400158e:	d1ad      	bne.n	340014ec <MX66UW1G45G_WriteEnable+0x28>
  s_config.MatchValue = 2U;
34001590:	2302      	movs	r3, #2
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001592:	2210      	movs	r2, #16
  s_config.MatchMask = 2U;
34001594:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001598:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_config.MatchMode = HAL_XSPI_MATCH_MODE_AND;
3400159c:	9002      	str	r0, [sp, #8]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400159e:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340015a2:	4669      	mov	r1, sp
340015a4:	f241 3288 	movw	r2, #5000	@ 0x1388
340015a8:	4638      	mov	r0, r7
340015aa:	f008 f8a5 	bl	340096f8 <HAL_XSPI_AutoPolling>
340015ae:	3800      	subs	r0, #0
340015b0:	bf18      	it	ne
340015b2:	2001      	movne	r0, #1
340015b4:	4240      	negs	r0, r0
340015b6:	e79b      	b.n	340014f0 <MX66UW1G45G_WriteEnable+0x2c>

340015b8 <MX66UW1G45G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX66UW1G45G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                      MX66UW1G45G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
340015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
340015ba:	460e      	mov	r6, r1
340015bc:	b095      	sub	sp, #84	@ 0x54
340015be:	4605      	mov	r5, r0
340015c0:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
340015c2:	2100      	movs	r1, #0
340015c4:	224c      	movs	r2, #76	@ 0x4c
340015c6:	a801      	add	r0, sp, #4
{
340015c8:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
340015ca:	f00d fb3d 	bl	3400ec48 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
340015ce:	b936      	cbnz	r6, 340015de <MX66UW1G45G_WriteCfg2Register+0x26>

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
340015d0:	2301      	movs	r3, #1
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
340015d2:	429c      	cmp	r4, r3
340015d4:	d104      	bne.n	340015e0 <MX66UW1G45G_WriteCfg2Register+0x28>
    return MX66UW1G45G_ERROR;
340015d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
340015da:	b015      	add	sp, #84	@ 0x54
340015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
340015de:	2304      	movs	r3, #4
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
340015e0:	9304      	str	r3, [sp, #16]
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340015e2:	1e63      	subs	r3, r4, #1
340015e4:	425a      	negs	r2, r3
340015e6:	415a      	adcs	r2, r3
340015e8:	00d3      	lsls	r3, r2, #3
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
340015ea:	2e00      	cmp	r6, #0
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
340015ec:	9306      	str	r3, [sp, #24]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
340015ee:	bf14      	ite	ne
340015f0:	2301      	movne	r3, #1
340015f2:	2300      	moveq	r3, #0
340015f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
340015f8:	9305      	str	r3, [sp, #20]
                              : MX66UW1G45G_OCTA_WRITE_CFG_REG2_CMD;
340015fa:	f247 238d 	movw	r3, #29325	@ 0x728d
340015fe:	bf08      	it	eq
34001600:	2372      	moveq	r3, #114	@ 0x72
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
34001602:	9303      	str	r3, [sp, #12]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001604:	bf0c      	ite	eq
34001606:	f44f 7380 	moveq.w	r3, #256	@ 0x100
3400160a:	f44f 6380 	movne.w	r3, #1024	@ 0x400
3400160e:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001610:	ea4f 23c2 	mov.w	r3, r2, lsl #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
34001614:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
34001616:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400161a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400161c:	bf0c      	ite	eq
3400161e:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
34001622:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
                              : HAL_XSPI_DATA_DTR_DISABLE;
34001626:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Address = WriteAddr;
3400162a:	9707      	str	r7, [sp, #28]
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400162c:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400162e:	9211      	str	r2, [sp, #68]	@ 0x44
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
34001630:	d017      	beq.n	34001662 <MX66UW1G45G_WriteCfg2Register+0xaa>
34001632:	2c01      	cmp	r4, #1
34001634:	bf14      	ite	ne
34001636:	2301      	movne	r3, #1
34001638:	2302      	moveq	r3, #2
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400163a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400163e:	4628      	mov	r0, r5
34001640:	a901      	add	r1, sp, #4
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
34001642:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001644:	f007 fea6 	bl	34009394 <HAL_XSPI_Command>
34001648:	2800      	cmp	r0, #0
3400164a:	d1c4      	bne.n	340015d6 <MX66UW1G45G_WriteCfg2Register+0x1e>
  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400164c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001650:	4628      	mov	r0, r5
34001652:	a91a      	add	r1, sp, #104	@ 0x68
34001654:	f007 ffb6 	bl	340095c4 <HAL_XSPI_Transmit>
34001658:	3800      	subs	r0, #0
3400165a:	bf18      	it	ne
3400165c:	2001      	movne	r0, #1
3400165e:	4240      	negs	r0, r0
34001660:	e7bb      	b.n	340015da <MX66UW1G45G_WriteCfg2Register+0x22>
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
34001662:	2301      	movs	r3, #1
34001664:	e7e9      	b.n	3400163a <MX66UW1G45G_WriteCfg2Register+0x82>

34001666 <MX66UW1G45G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX66UW1G45G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                     MX66UW1G45G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
34001666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400166a:	460e      	mov	r6, r1
3400166c:	b094      	sub	sp, #80	@ 0x50
3400166e:	4607      	mov	r7, r0
34001670:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001672:	2100      	movs	r1, #0
34001674:	224c      	movs	r2, #76	@ 0x4c
34001676:	a801      	add	r0, sp, #4
{
34001678:	4698      	mov	r8, r3
  XSPI_RegularCmdTypeDef s_command = {0};
3400167a:	f00d fae5 	bl	3400ec48 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400167e:	b93e      	cbnz	r6, 34001690 <MX66UW1G45G_ReadCfg2Register+0x2a>

  /* Initialize the reading of status register */
  s_command.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
34001680:	2301      	movs	r3, #1
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
34001682:	429d      	cmp	r5, r3
34001684:	d105      	bne.n	34001692 <MX66UW1G45G_ReadCfg2Register+0x2c>
    return MX66UW1G45G_ERROR;
34001686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400168a:	b014      	add	sp, #80	@ 0x50
3400168c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
34001690:	2304      	movs	r3, #4
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
34001692:	9304      	str	r3, [sp, #16]
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001694:	1e6b      	subs	r3, r5, #1
34001696:	425c      	negs	r4, r3
34001698:	415c      	adcs	r4, r3
3400169a:	00e3      	lsls	r3, r4, #3
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400169c:	2e00      	cmp	r6, #0
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400169e:	9306      	str	r3, [sp, #24]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
340016a0:	bf14      	ite	ne
340016a2:	2301      	movne	r3, #1
340016a4:	2300      	moveq	r3, #0
340016a6:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
340016aa:	9305      	str	r3, [sp, #20]
                              : MX66UW1G45G_OCTA_READ_CFG_REG2_CMD;
340016ac:	f247 138e 	movw	r3, #29070	@ 0x718e
340016b0:	bf08      	it	eq
340016b2:	2371      	moveq	r3, #113	@ 0x71
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
340016b4:	9303      	str	r3, [sp, #12]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340016b6:	bf0c      	ite	eq
340016b8:	f44f 7380 	moveq.w	r3, #256	@ 0x100
340016bc:	f44f 6380 	movne.w	r3, #1024	@ 0x400
340016c0:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
340016c2:	ea4f 23c4 	mov.w	r3, r4, lsl #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
340016c6:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
340016c8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340016cc:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340016ce:	bf0c      	ite	eq
340016d0:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
340016d4:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
340016d8:	930f      	str	r3, [sp, #60]	@ 0x3c
                              : HAL_XSPI_DATA_DTR_DISABLE;
340016da:	ea4f 63c4 	mov.w	r3, r4, lsl #27
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
340016de:	4632      	mov	r2, r6
  s_command.Address = ReadAddr;
340016e0:	f8cd 801c 	str.w	r8, [sp, #28]
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
340016e4:	9311      	str	r3, [sp, #68]	@ 0x44
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
340016e6:	d003      	beq.n	340016f0 <MX66UW1G45G_ReadCfg2Register+0x8a>
340016e8:	2d01      	cmp	r5, #1
340016ea:	bf0c      	ite	eq
340016ec:	2205      	moveq	r2, #5
340016ee:	2204      	movne	r2, #4
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
340016f0:	2d01      	cmp	r5, #1
340016f2:	bf0c      	ite	eq
340016f4:	2302      	moveq	r3, #2
340016f6:	2301      	movne	r3, #1
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
340016f8:	9212      	str	r2, [sp, #72]	@ 0x48
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340016fa:	0764      	lsls	r4, r4, #29
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340016fc:	f241 3288 	movw	r2, #5000	@ 0x1388
34001700:	4638      	mov	r0, r7
34001702:	a901      	add	r1, sp, #4
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
34001704:	9310      	str	r3, [sp, #64]	@ 0x40
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001706:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001708:	f007 fe44 	bl	34009394 <HAL_XSPI_Command>
3400170c:	2800      	cmp	r0, #0
3400170e:	d1ba      	bne.n	34001686 <MX66UW1G45G_ReadCfg2Register+0x20>
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001710:	f241 3288 	movw	r2, #5000	@ 0x1388
34001714:	4638      	mov	r0, r7
34001716:	991a      	ldr	r1, [sp, #104]	@ 0x68
34001718:	f007 ff98 	bl	3400964c <HAL_XSPI_Receive>
3400171c:	3800      	subs	r0, #0
3400171e:	bf18      	it	ne
34001720:	2001      	movne	r0, #1
34001722:	4240      	negs	r0, r0
34001724:	e7b1      	b.n	3400168a <MX66UW1G45G_ReadCfg2Register+0x24>

34001726 <MX66UW1G45G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
34001726:	b570      	push	{r4, r5, r6, lr}
34001728:	460d      	mov	r5, r1
3400172a:	b094      	sub	sp, #80	@ 0x50
3400172c:	4606      	mov	r6, r0
3400172e:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001730:	2100      	movs	r1, #0
34001732:	224c      	movs	r2, #76	@ 0x4c
34001734:	a801      	add	r0, sp, #4
34001736:	f00d fa87 	bl	3400ec48 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400173a:	bb05      	cbnz	r5, 3400177e <MX66UW1G45G_ResetEnable+0x58>
3400173c:	2c01      	cmp	r4, #1
3400173e:	d020      	beq.n	34001782 <MX66UW1G45G_ResetEnable+0x5c>
  /* Initialize the reset enable command */
  s_command.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect =  HAL_XSPI_SELECT_IO_3_0;
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
34001740:	2301      	movs	r3, #1
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
                                     ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001742:	1e62      	subs	r2, r4, #1
34001744:	4254      	negs	r4, r2
34001746:	4154      	adcs	r4, r2
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
                                   ? HAL_XSPI_INSTRUCTION_8_BITS
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
34001748:	2d00      	cmp	r5, #0
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400174a:	9304      	str	r3, [sp, #16]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400174c:	bf14      	ite	ne
3400174e:	2301      	movne	r3, #1
34001750:	2300      	moveq	r3, #0
34001752:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
34001756:	9305      	str	r3, [sp, #20]
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
                              ? MX66UW1G45G_RESET_ENABLE_CMD
                              : MX66UW1G45G_OCTA_RESET_ENABLE_CMD;
34001758:	f246 6399 	movw	r3, #26265	@ 0x6699
3400175c:	bf08      	it	eq
3400175e:	2366      	moveq	r3, #102	@ 0x66
  s_command.DummyCycles = 0U;
  s_command.DQSMode = HAL_XSPI_DQS_DISABLE;


  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001760:	f241 3288 	movw	r2, #5000	@ 0x1388
34001764:	4630      	mov	r0, r6
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001766:	00e4      	lsls	r4, r4, #3
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001768:	a901      	add	r1, sp, #4
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400176a:	9406      	str	r4, [sp, #24]
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400176c:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400176e:	f007 fe11 	bl	34009394 <HAL_XSPI_Command>
34001772:	3800      	subs	r0, #0
34001774:	bf18      	it	ne
34001776:	2001      	movne	r0, #1
34001778:	4240      	negs	r0, r0
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400177a:	b014      	add	sp, #80	@ 0x50
3400177c:	bd70      	pop	{r4, r5, r6, pc}
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400177e:	2304      	movs	r3, #4
34001780:	e7df      	b.n	34001742 <MX66UW1G45G_ResetEnable+0x1c>
    return MX66UW1G45G_ERROR;
34001782:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34001786:	e7f8      	b.n	3400177a <MX66UW1G45G_ResetEnable+0x54>

34001788 <MX66UW1G45G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
34001788:	b570      	push	{r4, r5, r6, lr}
3400178a:	460d      	mov	r5, r1
3400178c:	b094      	sub	sp, #80	@ 0x50
3400178e:	4606      	mov	r6, r0
34001790:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
34001792:	2100      	movs	r1, #0
34001794:	224c      	movs	r2, #76	@ 0x4c
34001796:	a801      	add	r0, sp, #4
34001798:	f00d fa56 	bl	3400ec48 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400179c:	bb05      	cbnz	r5, 340017e0 <MX66UW1G45G_ResetMemory+0x58>
3400179e:	2c01      	cmp	r4, #1
340017a0:	d020      	beq.n	340017e4 <MX66UW1G45G_ResetMemory+0x5c>

  /* Initialize the reset enable command */
  s_command.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
340017a2:	2301      	movs	r3, #1
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
                                     ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340017a4:	1e62      	subs	r2, r4, #1
340017a6:	4254      	negs	r4, r2
340017a8:	4154      	adcs	r4, r2
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
                                   ? HAL_XSPI_INSTRUCTION_8_BITS
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
340017aa:	2d00      	cmp	r5, #0
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
340017ac:	9304      	str	r3, [sp, #16]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
340017ae:	bf14      	ite	ne
340017b0:	2301      	movne	r3, #1
340017b2:	2300      	moveq	r3, #0
340017b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
340017b8:	9305      	str	r3, [sp, #20]
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
                              ? MX66UW1G45G_RESET_MEMORY_CMD
                              : MX66UW1G45G_OCTA_RESET_MEMORY_CMD;
340017ba:	f649 1366 	movw	r3, #39270	@ 0x9966
340017be:	bf08      	it	eq
340017c0:	2399      	moveq	r3, #153	@ 0x99
 #if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340017c2:	f241 3288 	movw	r2, #5000	@ 0x1388
340017c6:	4630      	mov	r0, r6
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340017c8:	00e4      	lsls	r4, r4, #3
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340017ca:	a901      	add	r1, sp, #4
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
340017cc:	9406      	str	r4, [sp, #24]
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
340017ce:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340017d0:	f007 fde0 	bl	34009394 <HAL_XSPI_Command>
340017d4:	3800      	subs	r0, #0
340017d6:	bf18      	it	ne
340017d8:	2001      	movne	r0, #1
340017da:	4240      	negs	r0, r0
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
340017dc:	b014      	add	sp, #80	@ 0x50
340017de:	bd70      	pop	{r4, r5, r6, pc}
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
340017e0:	2304      	movs	r3, #4
340017e2:	e7df      	b.n	340017a4 <MX66UW1G45G_ResetMemory+0x1c>
    return MX66UW1G45G_ERROR;
340017e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340017e8:	e7f8      	b.n	340017dc <MX66UW1G45G_ResetMemory+0x54>
	...

340017ec <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
340017ec:	4b04      	ldr	r3, [pc, #16]	@ (34001800 <LL_AHB4_GRP1_EnableClock+0x14>)
{
340017ee:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
340017f0:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
340017f4:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
340017f8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
340017fa:	9b01      	ldr	r3, [sp, #4]
}
340017fc:	b002      	add	sp, #8
340017fe:	4770      	bx	lr
34001800:	56028000 	.word	0x56028000

34001804 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
34001804:	b570      	push	{r4, r5, r6, lr}
34001806:	4604      	mov	r4, r0
34001808:	b086      	sub	sp, #24
  SMPS_GPIO_CLK_ENABLE();
3400180a:	2020      	movs	r0, #32
3400180c:	f7ff ffee 	bl	340017ec <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001810:	2300      	movs	r3, #0
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001812:	2610      	movs	r6, #16
  GPIO_InitTypeDef  gpio_init_structure = {0};
34001814:	9303      	str	r3, [sp, #12]
34001816:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
34001818:	2301      	movs	r3, #1
3400181a:	e9cd 6301 	strd	r6, r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3400181e:	2303      	movs	r3, #3
  HAL_GPIO_Init (SMPS_GPIO_PORT, &gpio_init_structure);
34001820:	4d06      	ldr	r5, [pc, #24]	@ (3400183c <BSP_SMPS_Init+0x38>)
34001822:	a901      	add	r1, sp, #4
34001824:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34001826:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init (SMPS_GPIO_PORT, &gpio_init_structure);
34001828:	f000 ff96 	bl	34002758 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
3400182c:	4622      	mov	r2, r4
3400182e:	4631      	mov	r1, r6
34001830:	4628      	mov	r0, r5
34001832:	f001 f9ab 	bl	34002b8c <HAL_GPIO_WritePin>
}
34001836:	b006      	add	sp, #24
34001838:	bd70      	pop	{r4, r5, r6, pc}
3400183a:	bf00      	nop
3400183c:	56021400 	.word	0x56021400

34001840 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001840:	4b04      	ldr	r3, [pc, #16]	@ (34001854 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34001842:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34001844:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34001848:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400184c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400184e:	9b01      	ldr	r3, [sp, #4]
}
34001850:	b002      	add	sp, #8
34001852:	4770      	bx	lr
34001854:	56028000 	.word	0x56028000

34001858 <XSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
34001858:	b530      	push	{r4, r5, lr}
{
  int32_t ret;
  uint8_t reg[2];

  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400185a:	4c20      	ldr	r4, [pc, #128]	@ (340018dc <XSPI_NOR_EnterSOPIMode.constprop.0+0x84>)
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
3400185c:	b085      	sub	sp, #20
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400185e:	78a2      	ldrb	r2, [r4, #2]
34001860:	7861      	ldrb	r1, [r4, #1]
34001862:	481f      	ldr	r0, [pc, #124]	@ (340018e0 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
34001864:	f7ff fe2e 	bl	340014c4 <MX66UW1G45G_WriteEnable>
34001868:	b118      	cbz	r0, 34001872 <XSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
                                    XSPI_Nor_Ctx[Instance].TransferRate) != MX66UW1G45G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400186a:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
3400186e:	b005      	add	sp, #20
34001870:	bd30      	pop	{r4, r5, pc}
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34001872:	9000      	str	r0, [sp, #0]
34001874:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001878:	78a2      	ldrb	r2, [r4, #2]
3400187a:	7861      	ldrb	r1, [r4, #1]
3400187c:	4818      	ldr	r0, [pc, #96]	@ (340018e0 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400187e:	f7ff fe9b 	bl	340015b8 <MX66UW1G45G_WriteCfg2Register>
34001882:	2800      	cmp	r0, #0
34001884:	d1f1      	bne.n	3400186a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34001886:	78a2      	ldrb	r2, [r4, #2]
34001888:	7861      	ldrb	r1, [r4, #1]
3400188a:	4815      	ldr	r0, [pc, #84]	@ (340018e0 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400188c:	f7ff fe1a 	bl	340014c4 <MX66UW1G45G_WriteEnable>
34001890:	4603      	mov	r3, r0
34001892:	2800      	cmp	r0, #0
34001894:	d1e9      	bne.n	3400186a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34001896:	2501      	movs	r5, #1
34001898:	9500      	str	r5, [sp, #0]
3400189a:	78a2      	ldrb	r2, [r4, #2]
3400189c:	7861      	ldrb	r1, [r4, #1]
3400189e:	4810      	ldr	r0, [pc, #64]	@ (340018e0 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
340018a0:	f7ff fe8a 	bl	340015b8 <MX66UW1G45G_WriteCfg2Register>
340018a4:	4604      	mov	r4, r0
340018a6:	2800      	cmp	r0, #0
340018a8:	d1df      	bne.n	3400186a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
340018aa:	2028      	movs	r0, #40	@ 0x28
340018ac:	f000 fd9c 	bl	340023e8 <HAL_Delay>
    if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
340018b0:	4622      	mov	r2, r4
340018b2:	4629      	mov	r1, r5
340018b4:	480a      	ldr	r0, [pc, #40]	@ (340018e0 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
340018b6:	f7ff fce4 	bl	34001282 <MX66UW1G45G_AutoPollingMemReady>
340018ba:	4603      	mov	r3, r0
340018bc:	2800      	cmp	r0, #0
340018be:	d1d4      	bne.n	3400186a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
340018c0:	aa03      	add	r2, sp, #12
340018c2:	9200      	str	r2, [sp, #0]
340018c4:	4629      	mov	r1, r5
340018c6:	4602      	mov	r2, r0
340018c8:	4805      	ldr	r0, [pc, #20]	@ (340018e0 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
340018ca:	f7ff fecc 	bl	34001666 <MX66UW1G45G_ReadCfg2Register>
340018ce:	2800      	cmp	r0, #0
340018d0:	d1cb      	bne.n	3400186a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX66UW1G45G_CR2_SOPI)
340018d2:	f89d 300c 	ldrb.w	r3, [sp, #12]
340018d6:	42ab      	cmp	r3, r5
340018d8:	d0c9      	beq.n	3400186e <XSPI_NOR_EnterSOPIMode.constprop.0+0x16>
340018da:	e7c6      	b.n	3400186a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
340018dc:	3403a904 	.word	0x3403a904
340018e0:	3403a908 	.word	0x3403a908

340018e4 <XSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
340018e4:	b530      	push	{r4, r5, lr}
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
340018e6:	4d27      	ldr	r5, [pc, #156]	@ (34001984 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
340018e8:	4c27      	ldr	r4, [pc, #156]	@ (34001988 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
340018ea:	b085      	sub	sp, #20
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
340018ec:	4620      	mov	r0, r4
340018ee:	78aa      	ldrb	r2, [r5, #2]
340018f0:	7869      	ldrb	r1, [r5, #1]
340018f2:	f7ff fde7 	bl	340014c4 <MX66UW1G45G_WriteEnable>
340018f6:	b118      	cbz	r0, 34001900 <XSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
340018f8:	f06f 0004 	mvn.w	r0, #4
}
340018fc:	b005      	add	sp, #20
340018fe:	bd30      	pop	{r4, r5, pc}
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34001900:	9000      	str	r0, [sp, #0]
34001902:	f44f 7340 	mov.w	r3, #768	@ 0x300
34001906:	4620      	mov	r0, r4
34001908:	78aa      	ldrb	r2, [r5, #2]
3400190a:	7869      	ldrb	r1, [r5, #1]
3400190c:	f7ff fe54 	bl	340015b8 <MX66UW1G45G_WriteCfg2Register>
34001910:	2800      	cmp	r0, #0
34001912:	d1f1      	bne.n	340018f8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34001914:	4620      	mov	r0, r4
34001916:	78aa      	ldrb	r2, [r5, #2]
34001918:	7869      	ldrb	r1, [r5, #1]
3400191a:	f7ff fdd3 	bl	340014c4 <MX66UW1G45G_WriteEnable>
3400191e:	4603      	mov	r3, r0
34001920:	2800      	cmp	r0, #0
34001922:	d1e9      	bne.n	340018f8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34001924:	2202      	movs	r2, #2
34001926:	9200      	str	r2, [sp, #0]
34001928:	4620      	mov	r0, r4
3400192a:	78aa      	ldrb	r2, [r5, #2]
3400192c:	7869      	ldrb	r1, [r5, #1]
3400192e:	f7ff fe43 	bl	340015b8 <MX66UW1G45G_WriteCfg2Register>
34001932:	2800      	cmp	r0, #0
34001934:	d1e0      	bne.n	340018f8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
34001936:	2028      	movs	r0, #40	@ 0x28
34001938:	f000 fd56 	bl	340023e8 <HAL_Delay>
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
3400193c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001940:	60e3      	str	r3, [r4, #12]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001942:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001946:	4620      	mov	r0, r4
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34001948:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400194a:	f007 fbe5 	bl	34009118 <HAL_XSPI_Init>
3400194e:	b9a8      	cbnz	r0, 3400197c <XSPI_NOR_EnterDOPIMode.constprop.0+0x98>
    else if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001950:	2201      	movs	r2, #1
34001952:	4620      	mov	r0, r4
34001954:	4611      	mov	r1, r2
34001956:	f7ff fc94 	bl	34001282 <MX66UW1G45G_AutoPollingMemReady>
3400195a:	4603      	mov	r3, r0
3400195c:	2800      	cmp	r0, #0
3400195e:	d1cb      	bne.n	340018f8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34001960:	aa03      	add	r2, sp, #12
34001962:	9200      	str	r2, [sp, #0]
34001964:	2201      	movs	r2, #1
34001966:	4620      	mov	r0, r4
34001968:	4611      	mov	r1, r2
3400196a:	f7ff fe7c 	bl	34001666 <MX66UW1G45G_ReadCfg2Register>
3400196e:	2800      	cmp	r0, #0
34001970:	d1c2      	bne.n	340018f8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX66UW1G45G_CR2_DOPI)
34001972:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001976:	2b02      	cmp	r3, #2
34001978:	d0c0      	beq.n	340018fc <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
3400197a:	e7bd      	b.n	340018f8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
3400197c:	f06f 0003 	mvn.w	r0, #3
  return ret;
34001980:	e7bc      	b.n	340018fc <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
34001982:	bf00      	nop
34001984:	3403a904 	.word	0x3403a904
34001988:	3403a908 	.word	0x3403a908

3400198c <MX_XSPI_NOR_Init>:
  hxspi->Init.FifoThresholdByte       = 1;
3400198c:	2301      	movs	r3, #1
3400198e:	4a0f      	ldr	r2, [pc, #60]	@ (340019cc <MX_XSPI_NOR_Init+0x40>)
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
34001990:	f04f 0c02 	mov.w	ip, #2
  hxspi->Init.FifoThresholdByte       = 1;
34001994:	e9c0 2300 	strd	r2, r3, [r0]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 1 GBits */
34001998:	680b      	ldr	r3, [r1, #0]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
3400199a:	684a      	ldr	r2, [r1, #4]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 1 GBits */
3400199c:	6103      	str	r3, [r0, #16]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
3400199e:	2300      	movs	r3, #0
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
340019a0:	6242      	str	r2, [r0, #36]	@ 0x24
  hxspi->Init.DelayHoldQuarterCycle   = HAL_XSPI_DHQC_DISABLE;
340019a2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hxspi->Init.SampleShifting          = Init->SampleShifting;
340019a4:	688a      	ldr	r2, [r1, #8]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
340019a6:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hxspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
340019aa:	61c3      	str	r3, [r0, #28]
  hxspi->Init.ChipSelectBoundary      = HAL_XSPI_BONDARYOF_NONE;
340019ac:	6303      	str	r3, [r0, #48]	@ 0x30
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
340019ae:	6083      	str	r3, [r0, #8]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
340019b0:	6203      	str	r3, [r0, #32]
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
340019b2:	68cb      	ldr	r3, [r1, #12]
  hxspi->Init.SampleShifting          = Init->SampleShifting;
340019b4:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
340019b6:	2b01      	cmp	r3, #1
340019b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
340019bc:	60c3      	str	r3, [r0, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
340019be:	bf04      	itt	eq
340019c0:	f04f 5380 	moveq.w	r3, #268435456	@ 0x10000000
340019c4:	62c3      	streq	r3, [r0, #44]	@ 0x2c
  return HAL_XSPI_Init(hxspi);
340019c6:	f007 bba7 	b.w	34009118 <HAL_XSPI_Init>
340019ca:	bf00      	nop
340019cc:	5802a000 	.word	0x5802a000

340019d0 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340019d0:	4601      	mov	r1, r0
{
340019d2:	b510      	push	{r4, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340019d4:	b9b0      	cbnz	r0, 34001a04 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x34>
    if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
340019d6:	4c0d      	ldr	r4, [pc, #52]	@ (34001a0c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x3c>)
    (void) (HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0));
340019d8:	480d      	ldr	r0, [pc, #52]	@ (34001a10 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
340019da:	f007 ff77 	bl	340098cc <HAL_XSPI_SetClockPrescaler>
    if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
340019de:	78a3      	ldrb	r3, [r4, #2]
340019e0:	7861      	ldrb	r1, [r4, #1]
340019e2:	b95b      	cbnz	r3, 340019fc <BSP_XSPI_NOR_EnableMemoryMappedMode+0x2c>
      if (MX66UW1G45G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
340019e4:	2201      	movs	r2, #1
340019e6:	480a      	ldr	r0, [pc, #40]	@ (34001a10 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
340019e8:	f7ff fcaf 	bl	3400134a <MX66UW1G45G_EnableSTRMemoryMappedMode>
340019ec:	b110      	cbz	r0, 340019f4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x24>
        ret = BSP_ERROR_COMPONENT_FAILURE;
340019ee:	f06f 0004 	mvn.w	r0, #4
}
340019f2:	bd10      	pop	{r4, pc}
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
340019f4:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
340019f6:	2000      	movs	r0, #0
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
340019f8:	7023      	strb	r3, [r4, #0]
340019fa:	e7fa      	b.n	340019f2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x22>
      if (MX66UW1G45G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
340019fc:	4804      	ldr	r0, [pc, #16]	@ (34001a10 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
340019fe:	f7ff fd11 	bl	34001424 <MX66UW1G45G_EnableDTRMemoryMappedMode>
34001a02:	e7f3      	b.n	340019ec <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1c>
    ret = BSP_ERROR_WRONG_PARAM;
34001a04:	f06f 0001 	mvn.w	r0, #1
  return ret;
34001a08:	e7f3      	b.n	340019f2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x22>
34001a0a:	bf00      	nop
34001a0c:	3403a904 	.word	0x3403a904
34001a10:	3403a908 	.word	0x3403a908

34001a14 <BSP_XSPI_NOR_ConfigFlash>:
{
34001a14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34001a18:	460d      	mov	r5, r1
34001a1a:	4616      	mov	r6, r2
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001a1c:	2800      	cmp	r0, #0
34001a1e:	d15f      	bne.n	34001ae0 <BSP_XSPI_NOR_ConfigFlash+0xcc>
    if (XSPI_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
34001a20:	4c32      	ldr	r4, [pc, #200]	@ (34001aec <BSP_XSPI_NOR_ConfigFlash+0xd8>)
34001a22:	7823      	ldrb	r3, [r4, #0]
34001a24:	2b02      	cmp	r3, #2
34001a26:	d05e      	beq.n	34001ae6 <BSP_XSPI_NOR_ConfigFlash+0xd2>
      switch (XSPI_Nor_Ctx[Instance].InterfaceMode)
34001a28:	7863      	ldrb	r3, [r4, #1]
34001a2a:	2b01      	cmp	r3, #1
34001a2c:	d14f      	bne.n	34001ace <BSP_XSPI_NOR_ConfigFlash+0xba>
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != XSPI_Nor_Ctx[Instance].TransferRate))
34001a2e:	2901      	cmp	r1, #1
34001a30:	78a2      	ldrb	r2, [r4, #2]
34001a32:	d109      	bne.n	34001a48 <BSP_XSPI_NOR_ConfigFlash+0x34>
34001a34:	4296      	cmp	r6, r2
34001a36:	d107      	bne.n	34001a48 <BSP_XSPI_NOR_ConfigFlash+0x34>
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001a38:	2301      	movs	r3, #1
        XSPI_Nor_Ctx[Instance].TransferRate  = Rate;
34001a3a:	2000      	movs	r0, #0
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001a3c:	7023      	strb	r3, [r4, #0]
        XSPI_Nor_Ctx[Instance].InterfaceMode = Mode;
34001a3e:	7065      	strb	r5, [r4, #1]
        XSPI_Nor_Ctx[Instance].TransferRate  = Rate;
34001a40:	70a6      	strb	r6, [r4, #2]
}
34001a42:	b004      	add	sp, #16
34001a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static int32_t XSPI_NOR_ExitOPIMode(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34001a48:	4f29      	ldr	r7, [pc, #164]	@ (34001af0 <BSP_XSPI_NOR_ConfigFlash+0xdc>)
34001a4a:	2101      	movs	r1, #1
34001a4c:	4638      	mov	r0, r7
34001a4e:	f7ff fd39 	bl	340014c4 <MX66UW1G45G_WriteEnable>
34001a52:	4603      	mov	r3, r0
34001a54:	b110      	cbz	r0, 34001a5c <BSP_XSPI_NOR_ConfigFlash+0x48>
                                    XSPI_Nor_Ctx[Instance].TransferRate) != MX66UW1G45G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34001a56:	f06f 0004 	mvn.w	r0, #4
34001a5a:	e7f2      	b.n	34001a42 <BSP_XSPI_NOR_ConfigFlash+0x2e>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34001a5c:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
34001a5e:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34001a62:	78a2      	ldrb	r2, [r4, #2]
34001a64:	4638      	mov	r0, r7
34001a66:	7861      	ldrb	r1, [r4, #1]
34001a68:	f7ff fda6 	bl	340015b8 <MX66UW1G45G_WriteCfg2Register>
34001a6c:	4680      	mov	r8, r0
34001a6e:	2800      	cmp	r0, #0
34001a70:	d1f1      	bne.n	34001a56 <BSP_XSPI_NOR_ConfigFlash+0x42>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
34001a72:	2028      	movs	r0, #40	@ 0x28
34001a74:	f000 fcb8 	bl	340023e8 <HAL_Delay>

      if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
34001a78:	78a3      	ldrb	r3, [r4, #2]
34001a7a:	2b01      	cmp	r3, #1
34001a7c:	d01b      	beq.n	34001ab6 <BSP_XSPI_NOR_ConfigFlash+0xa2>
      }

      if (ret == BSP_ERROR_NONE)
      {
        /* Check Flash busy ? */
        if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001a7e:	2200      	movs	r2, #0
34001a80:	481b      	ldr	r0, [pc, #108]	@ (34001af0 <BSP_XSPI_NOR_ConfigFlash+0xdc>)
34001a82:	4611      	mov	r1, r2
34001a84:	f7ff fbfd 	bl	34001282 <MX66UW1G45G_AutoPollingMemReady>
34001a88:	4603      	mov	r3, r0
34001a8a:	2800      	cmp	r0, #0
34001a8c:	d1e3      	bne.n	34001a56 <BSP_XSPI_NOR_ConfigFlash+0x42>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX66UW1G45G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        /* Check the configuration has been correctly done */
        else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34001a8e:	aa03      	add	r2, sp, #12
34001a90:	4601      	mov	r1, r0
34001a92:	9200      	str	r2, [sp, #0]
34001a94:	4602      	mov	r2, r0
34001a96:	4816      	ldr	r0, [pc, #88]	@ (34001af0 <BSP_XSPI_NOR_ConfigFlash+0xdc>)
34001a98:	f7ff fde5 	bl	34001666 <MX66UW1G45G_ReadCfg2Register>
34001a9c:	2800      	cmp	r0, #0
34001a9e:	d1da      	bne.n	34001a56 <BSP_XSPI_NOR_ConfigFlash+0x42>
                                               MX66UW1G45G_CR2_REG1_ADDR, reg) != MX66UW1G45G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else if (reg[0] != 0U)
34001aa0:	f89d 300c 	ldrb.w	r3, [sp, #12]
34001aa4:	2b00      	cmp	r3, #0
34001aa6:	d1d6      	bne.n	34001a56 <BSP_XSPI_NOR_ConfigFlash+0x42>
            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
34001aa8:	2d01      	cmp	r5, #1
34001aaa:	d1c5      	bne.n	34001a38 <BSP_XSPI_NOR_ConfigFlash+0x24>
              if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34001aac:	78a3      	ldrb	r3, [r4, #2]
34001aae:	b993      	cbnz	r3, 34001ad6 <BSP_XSPI_NOR_ConfigFlash+0xc2>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
34001ab0:	f7ff ff18 	bl	340018e4 <XSPI_NOR_EnterDOPIMode.constprop.0>
34001ab4:	e011      	b.n	34001ada <BSP_XSPI_NOR_ConfigFlash+0xc6>
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001ab6:	4638      	mov	r0, r7
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34001ab8:	f8c7 800c 	str.w	r8, [r7, #12]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34001abc:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34001ac0:	f007 fb2a 	bl	34009118 <HAL_XSPI_Init>
34001ac4:	2800      	cmp	r0, #0
34001ac6:	d0da      	beq.n	34001a7e <BSP_XSPI_NOR_ConfigFlash+0x6a>
          ret = BSP_ERROR_PERIPH_FAILURE;
34001ac8:	f06f 0003 	mvn.w	r0, #3
34001acc:	e7b9      	b.n	34001a42 <BSP_XSPI_NOR_ConfigFlash+0x2e>
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
34001ace:	2901      	cmp	r1, #1
34001ad0:	d1b2      	bne.n	34001a38 <BSP_XSPI_NOR_ConfigFlash+0x24>
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
34001ad2:	2a00      	cmp	r2, #0
34001ad4:	d1ec      	bne.n	34001ab0 <BSP_XSPI_NOR_ConfigFlash+0x9c>
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34001ad6:	f7ff febf 	bl	34001858 <XSPI_NOR_EnterSOPIMode.constprop.0>
      if (ret == BSP_ERROR_NONE)
34001ada:	2800      	cmp	r0, #0
34001adc:	d1b1      	bne.n	34001a42 <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001ade:	e7ab      	b.n	34001a38 <BSP_XSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
34001ae0:	f06f 0001 	mvn.w	r0, #1
34001ae4:	e7ad      	b.n	34001a42 <BSP_XSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
34001ae6:	f06f 0019 	mvn.w	r0, #25
  return ret;
34001aea:	e7aa      	b.n	34001a42 <BSP_XSPI_NOR_ConfigFlash+0x2e>
34001aec:	3403a904 	.word	0x3403a904
34001af0:	3403a908 	.word	0x3403a908

34001af4 <BSP_XSPI_NOR_Init>:
{
34001af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34001af8:	4689      	mov	r9, r1
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001afa:	4604      	mov	r4, r0
34001afc:	4e81      	ldr	r6, [pc, #516]	@ (34001d04 <BSP_XSPI_NOR_Init+0x210>)
{
34001afe:	b08e      	sub	sp, #56	@ 0x38
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34001b00:	2800      	cmp	r0, #0
34001b02:	f040 80f8 	bne.w	34001cf6 <BSP_XSPI_NOR_Init+0x202>
    if (XSPI_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34001b06:	f8df 8208 	ldr.w	r8, [pc, #520]	@ 34001d10 <BSP_XSPI_NOR_Init+0x21c>
34001b0a:	f898 3000 	ldrb.w	r3, [r8]
34001b0e:	b153      	cbz	r3, 34001b26 <BSP_XSPI_NOR_Init+0x32>
      ret = BSP_ERROR_NONE;
34001b10:	2500      	movs	r5, #0
 (void) (HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0));
34001b12:	2064      	movs	r0, #100	@ 0x64
34001b14:	2100      	movs	r1, #0
34001b16:	fb00 6004 	mla	r0, r0, r4, r6
34001b1a:	f007 fed7 	bl	340098cc <HAL_XSPI_SetClockPrescaler>
}
34001b1e:	4628      	mov	r0, r5
34001b20:	b00e      	add	sp, #56	@ 0x38
34001b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34001b2a:	4a77      	ldr	r2, [pc, #476]	@ (34001d08 <BSP_XSPI_NOR_Init+0x214>)
  __HAL_RCC_PWR_CLK_ENABLE();
34001b2c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34001b30:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34001b34:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
  GPIO_InitStruct.Alternate = XSPI_NOR_CS_PIN_AF;
34001b38:	2509      	movs	r5, #9
34001b3a:	9100      	str	r1, [sp, #0]
  (void)tmpreg;
34001b3c:	9900      	ldr	r1, [sp, #0]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001b3e:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001b42:	441a      	add	r2, r3
34001b44:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
  __HAL_RCC_PWR_CLK_ENABLE();
34001b48:	f7ff fe7a 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
34001b4c:	f001 f886 	bl	34002c5c <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34001b50:	2101      	movs	r1, #1
34001b52:	2002      	movs	r0, #2
34001b54:	f001 f834 	bl	34002bc0 <HAL_PWREx_ConfigVddIORange>
  XSPI_NOR_CLK_GPIO_CLK_ENABLE();
34001b58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34001b5c:	f7ff fe70 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
34001b60:	2701      	movs	r7, #1
  XSPI_NOR_DQS_GPIO_CLK_ENABLE();
34001b62:	f7ff fe6d 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_CS_GPIO_CLK_ENABLE();
34001b66:	f7ff fe6b 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D0_GPIO_CLK_ENABLE();
34001b6a:	f7ff fe69 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D1_GPIO_CLK_ENABLE();
34001b6e:	f7ff fe67 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D2_GPIO_CLK_ENABLE();
34001b72:	f7ff fe65 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D3_GPIO_CLK_ENABLE();
34001b76:	f7ff fe63 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D4_GPIO_CLK_ENABLE();
34001b7a:	f7ff fe61 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D5_GPIO_CLK_ENABLE();
34001b7e:	f7ff fe5f 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D6_GPIO_CLK_ENABLE();
34001b82:	f7ff fe5d 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D7_GPIO_CLK_ENABLE();
34001b86:	f7ff fe5b 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pin       = XSPI_NOR_CS_PIN;
34001b8a:	2302      	movs	r3, #2
  HAL_GPIO_Init(XSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
34001b8c:	485f      	ldr	r0, [pc, #380]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
34001b8e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34001b90:	e9cd 3305 	strd	r3, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
34001b94:	e9cd 7307 	strd	r7, r3, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_NOR_CS_PIN_AF;
34001b98:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
34001b9a:	f000 fddd 	bl	34002758 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
34001b9e:	485b      	ldr	r0, [pc, #364]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
34001ba0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_DQS_PIN;
34001ba2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_DQS_PIN_AF;
34001ba4:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
34001ba6:	f000 fdd7 	bl	34002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_CLK_PIN;
34001baa:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(XSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
34001bac:	4857      	ldr	r0, [pc, #348]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
34001bae:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_CLK_PIN;
34001bb0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34001bb2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_NOR_CLK_PIN_AF;
34001bb4:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
34001bb6:	f000 fdcf 	bl	34002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D0_PIN;
34001bba:	2304      	movs	r3, #4
  HAL_GPIO_Init(XSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
34001bbc:	4853      	ldr	r0, [pc, #332]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
34001bbe:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D0_PIN;
34001bc0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D0_PIN_AF;
34001bc2:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
34001bc4:	f000 fdc8 	bl	34002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D1_PIN;
34001bc8:	2308      	movs	r3, #8
  HAL_GPIO_Init(XSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
34001bca:	4850      	ldr	r0, [pc, #320]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
34001bcc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D1_PIN;
34001bce:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D1_PIN_AF;
34001bd0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
34001bd2:	f000 fdc1 	bl	34002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D2_PIN;
34001bd6:	2310      	movs	r3, #16
  GPIO_InitStruct.Pin       = XSPI_NOR_D3_PIN;
34001bd8:	f04f 0a20 	mov.w	sl, #32
  HAL_GPIO_Init(XSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
34001bdc:	484b      	ldr	r0, [pc, #300]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
34001bde:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D2_PIN;
34001be0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D2_PIN_AF;
34001be2:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
34001be4:	f000 fdb8 	bl	34002758 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
34001be8:	4848      	ldr	r0, [pc, #288]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
34001bea:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D3_PIN;
34001bec:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D3_PIN_AF;
34001bf0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
34001bf2:	f000 fdb1 	bl	34002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D4_PIN;
34001bf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(XSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
34001bfa:	4844      	ldr	r0, [pc, #272]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
34001bfc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D4_PIN;
34001bfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D4_PIN_AF;
34001c00:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
34001c02:	f000 fda9 	bl	34002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D5_PIN;
34001c06:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(XSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
34001c0a:	4840      	ldr	r0, [pc, #256]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
34001c0c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D5_PIN;
34001c0e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D5_PIN_AF;
34001c10:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
34001c12:	f000 fda1 	bl	34002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D6_PIN;
34001c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(XSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
34001c1a:	483c      	ldr	r0, [pc, #240]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
34001c1c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D6_PIN;
34001c1e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D6_PIN_AF;
34001c20:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
34001c22:	f000 fd99 	bl	34002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D7_PIN;
34001c26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(XSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
34001c2a:	a905      	add	r1, sp, #20
34001c2c:	4837      	ldr	r0, [pc, #220]	@ (34001d0c <BSP_XSPI_NOR_Init+0x218>)
  GPIO_InitStruct.Pin       = XSPI_NOR_D7_PIN;
34001c2e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D7_PIN_AF;
34001c30:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
34001c32:	f000 fd91 	bl	34002758 <HAL_GPIO_Init>
      (void)MX66UW1G45G_GetFlashInfo(&pInfo);
34001c36:	a805      	add	r0, sp, #20
34001c38:	f7ff fb0a 	bl	34001250 <MX66UW1G45G_GetFlashInfo>
      xspi_init.ClockPrescaler = 0x03; /* XSPI clock = 200MHz / ClockPrescaler = 50MHz, then switch to 200MHz*/
34001c3c:	2303      	movs	r3, #3
34001c3e:	9302      	str	r3, [sp, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34001c40:	9b05      	ldr	r3, [sp, #20]
34001c42:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
34001c46:	2b00      	cmp	r3, #0
34001c48:	fab3 f283 	clz	r2, r3
34001c4c:	bf08      	it	eq
34001c4e:	4652      	moveq	r2, sl
      xspi_init.TransferRate   = (uint32_t)Init->TransferRate;
34001c50:	f899 3001 	ldrb.w	r3, [r9, #1]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34001c54:	4630      	mov	r0, r6
34001c56:	a901      	add	r1, sp, #4
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
34001c58:	9201      	str	r2, [sp, #4]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34001c5a:	9403      	str	r4, [sp, #12]
      xspi_init.TransferRate   = (uint32_t)Init->TransferRate;
34001c5c:	9304      	str	r3, [sp, #16]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34001c5e:	f7ff fe95 	bl	3400198c <MX_XSPI_NOR_Init>
34001c62:	2800      	cmp	r0, #0
34001c64:	d14a      	bne.n	34001cfc <BSP_XSPI_NOR_Init+0x208>
  if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001c66:	4622      	mov	r2, r4
34001c68:	4621      	mov	r1, r4
34001c6a:	4630      	mov	r0, r6
34001c6c:	f7ff fd5b 	bl	34001726 <MX66UW1G45G_ResetEnable>
34001c70:	b110      	cbz	r0, 34001c78 <BSP_XSPI_NOR_Init+0x184>
        ret = BSP_ERROR_COMPONENT_FAILURE;
34001c72:	f06f 0504 	mvn.w	r5, #4
34001c76:	e74c      	b.n	34001b12 <BSP_XSPI_NOR_Init+0x1e>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34001c78:	4622      	mov	r2, r4
34001c7a:	4621      	mov	r1, r4
34001c7c:	4630      	mov	r0, r6
34001c7e:	f7ff fd83 	bl	34001788 <MX66UW1G45G_ResetMemory>
34001c82:	2800      	cmp	r0, #0
34001c84:	d1f5      	bne.n	34001c72 <BSP_XSPI_NOR_Init+0x17e>
  else if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001c86:	4622      	mov	r2, r4
34001c88:	4639      	mov	r1, r7
34001c8a:	4630      	mov	r0, r6
34001c8c:	f7ff fd4b 	bl	34001726 <MX66UW1G45G_ResetEnable>
34001c90:	2800      	cmp	r0, #0
34001c92:	d1ee      	bne.n	34001c72 <BSP_XSPI_NOR_Init+0x17e>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001c94:	4622      	mov	r2, r4
34001c96:	4639      	mov	r1, r7
34001c98:	4630      	mov	r0, r6
34001c9a:	f7ff fd75 	bl	34001788 <MX66UW1G45G_ResetMemory>
34001c9e:	2800      	cmp	r0, #0
34001ca0:	d1e7      	bne.n	34001c72 <BSP_XSPI_NOR_Init+0x17e>
  else if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001ca2:	463a      	mov	r2, r7
34001ca4:	4639      	mov	r1, r7
34001ca6:	4630      	mov	r0, r6
34001ca8:	f7ff fd3d 	bl	34001726 <MX66UW1G45G_ResetEnable>
34001cac:	2800      	cmp	r0, #0
34001cae:	d1e0      	bne.n	34001c72 <BSP_XSPI_NOR_Init+0x17e>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34001cb0:	463a      	mov	r2, r7
34001cb2:	4639      	mov	r1, r7
34001cb4:	4630      	mov	r0, r6
34001cb6:	f7ff fd67 	bl	34001788 <MX66UW1G45G_ResetMemory>
34001cba:	2800      	cmp	r0, #0
34001cbc:	d1d9      	bne.n	34001c72 <BSP_XSPI_NOR_Init+0x17e>
    HAL_Delay(MX66UW1G45G_RESET_MAX_TIME);
34001cbe:	2064      	movs	r0, #100	@ 0x64
    XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;     /* After reset S/W setting to indirect access  */
34001cc0:	f888 7000 	strb.w	r7, [r8]
    XSPI_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;    /* After reset H/W back to SPI mode by default */
34001cc4:	f888 4001 	strb.w	r4, [r8, #1]
    XSPI_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode        */
34001cc8:	f888 4002 	strb.w	r4, [r8, #2]
    HAL_Delay(MX66UW1G45G_RESET_MAX_TIME);
34001ccc:	f000 fb8c 	bl	340023e8 <HAL_Delay>
      else if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34001cd0:	4630      	mov	r0, r6
34001cd2:	f898 2002 	ldrb.w	r2, [r8, #2]
34001cd6:	f898 1001 	ldrb.w	r1, [r8, #1]
34001cda:	f7ff fad2 	bl	34001282 <MX66UW1G45G_AutoPollingMemReady>
34001cde:	2800      	cmp	r0, #0
34001ce0:	d1c7      	bne.n	34001c72 <BSP_XSPI_NOR_Init+0x17e>
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
34001ce2:	f899 2001 	ldrb.w	r2, [r9, #1]
34001ce6:	f899 1000 	ldrb.w	r1, [r9]
34001cea:	f7ff fe93 	bl	34001a14 <BSP_XSPI_NOR_ConfigFlash>
34001cee:	2800      	cmp	r0, #0
34001cf0:	f43f af0e 	beq.w	34001b10 <BSP_XSPI_NOR_Init+0x1c>
34001cf4:	e7bd      	b.n	34001c72 <BSP_XSPI_NOR_Init+0x17e>
    ret = BSP_ERROR_WRONG_PARAM;
34001cf6:	f06f 0501 	mvn.w	r5, #1
34001cfa:	e70a      	b.n	34001b12 <BSP_XSPI_NOR_Init+0x1e>
        ret = BSP_ERROR_PERIPH_FAILURE;
34001cfc:	f06f 0503 	mvn.w	r5, #3
34001d00:	e707      	b.n	34001b12 <BSP_XSPI_NOR_Init+0x1e>
34001d02:	bf00      	nop
34001d04:	3403a908 	.word	0x3403a908
34001d08:	56028000 	.word	0x56028000
34001d0c:	56023400 	.word	0x56023400
34001d10:	3403a904 	.word	0x3403a904

34001d14 <MX_XSPI_RAM_Init>:
{
34001d14:	b538      	push	{r3, r4, r5, lr}
34001d16:	4604      	mov	r4, r0
34001d18:	460d      	mov	r5, r1
  uint32_t hspi_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI1);
34001d1a:	2000      	movs	r0, #0
34001d1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
34001d20:	f006 fb1e 	bl	34008360 <HAL_RCCEx_GetPeriphCLKFreq>
  hxspi->Init.FifoThresholdByte          = 8;
34001d24:	2308      	movs	r3, #8
34001d26:	4a13      	ldr	r2, [pc, #76]	@ (34001d74 <MX_XSPI_RAM_Init+0x60>)
  hxspi->Init.SampleShifting             = Init->SampleShifting;
34001d28:	68a9      	ldr	r1, [r5, #8]
  hxspi->Init.FifoThresholdByte          = 8;
34001d2a:	e9c4 2300 	strd	r2, r3, [r4]
  hxspi->Init.MemoryMode                 = HAL_XSPI_SINGLE_MEM;
34001d2e:	2200      	movs	r2, #0
34001d30:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
34001d34:	e9c4 2302 	strd	r2, r3, [r4, #8]
  hxspi->Init.MemorySize                 = Init->MemorySize;
34001d38:	682b      	ldr	r3, [r5, #0]
  hxspi->Init.MemorySelect               = HAL_XSPI_CSSEL_NCS1;
34001d3a:	63e2      	str	r2, [r4, #60]	@ 0x3c
  hxspi->Init.MemorySize                 = Init->MemorySize;
34001d3c:	6123      	str	r3, [r4, #16]
  hxspi->Init.ChipSelectHighTimeCycle    = 1;
34001d3e:	2301      	movs	r3, #1
34001d40:	6163      	str	r3, [r4, #20]
  hxspi->Init.ClockPrescaler             = Init->ClockPrescaler;
34001d42:	686b      	ldr	r3, [r5, #4]
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
34001d44:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
  hxspi->Init.SampleShifting             = Init->SampleShifting;
34001d48:	62a1      	str	r1, [r4, #40]	@ 0x28
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
34001d4a:	210b      	movs	r1, #11
  hxspi->Init.ClockPrescaler             = Init->ClockPrescaler;
34001d4c:	6263      	str	r3, [r4, #36]	@ 0x24
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
34001d4e:	fbb0 f3f3 	udiv	r3, r0, r3
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
34001d52:	e9c4 510b 	strd	r5, r1, [r4, #44]	@ 0x2c
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
34001d56:	4908      	ldr	r1, [pc, #32]	@ (34001d78 <MX_XSPI_RAM_Init+0x64>)
34001d58:	005b      	lsls	r3, r3, #1
34001d5a:	fbb3 f3f1 	udiv	r3, r3, r1
34001d5e:	3b04      	subs	r3, #4
  return HAL_XSPI_Init(hxspi);
34001d60:	4620      	mov	r0, r4
  hxspi->Init.ClockMode                  = HAL_XSPI_CLOCK_MODE_0;
34001d62:	61e2      	str	r2, [r4, #28]
  hxspi->Init.FreeRunningClock           = HAL_XSPI_FREERUNCLK_DISABLE;
34001d64:	61a2      	str	r2, [r4, #24]
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
34001d66:	63a3      	str	r3, [r4, #56]	@ 0x38
  hxspi->Init.WrapSize                   = HAL_XSPI_WRAP_NOT_SUPPORTED;
34001d68:	6222      	str	r2, [r4, #32]
}
34001d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return HAL_XSPI_Init(hxspi);
34001d6e:	f007 b9d3 	b.w	34009118 <HAL_XSPI_Init>
34001d72:	bf00      	nop
34001d74:	58025000 	.word	0x58025000
34001d78:	000f4240 	.word	0x000f4240

34001d7c <BSP_XSPI_RAM_Init>:
{
34001d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
34001d80:	4604      	mov	r4, r0
{
34001d82:	b08b      	sub	sp, #44	@ 0x2c
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
34001d84:	2800      	cmp	r0, #0
34001d86:	f040 810d 	bne.w	34001fa4 <BSP_XSPI_RAM_Init+0x228>
    if (XSPI_Ram_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34001d8a:	4e88      	ldr	r6, [pc, #544]	@ (34001fac <BSP_XSPI_RAM_Init+0x230>)
34001d8c:	7833      	ldrb	r3, [r6, #0]
34001d8e:	9301      	str	r3, [sp, #4]
34001d90:	2b00      	cmp	r3, #0
34001d92:	f040 80f0 	bne.w	34001f76 <BSP_XSPI_RAM_Init+0x1fa>

  /* hxspi unused argument(s) compilation warning */
  UNUSED(hxspi);

 /* XSPI power enable */
  __HAL_RCC_PWR_CLK_ENABLE();
34001d96:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34001d9a:	f7ff fd51 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO2();
34001d9e:	f000 ff55 	bl	34002c4c <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO2, PWR_VDDIO_RANGE_1V8);
34001da2:	2101      	movs	r1, #1
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001da4:	f04f 0820 	mov.w	r8, #32
34001da8:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
34001dac:	4608      	mov	r0, r1
34001dae:	f000 ff07 	bl	34002bc0 <HAL_PWREx_ConfigVddIORange>
34001db2:	4b7f      	ldr	r3, [pc, #508]	@ (34001fb0 <BSP_XSPI_RAM_Init+0x234>)
  /* XSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_CS_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
34001db4:	2409      	movs	r4, #9
34001db6:	f8c3 8a60 	str.w	r8, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34001dba:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34001dbe:	2501      	movs	r5, #1
34001dc0:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
34001dc2:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001dc4:	4a7b      	ldr	r2, [pc, #492]	@ (34001fb4 <BSP_XSPI_RAM_Init+0x238>)
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001dc6:	f8c3 8a20 	str.w	r8, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001dca:	f8c2 8220 	str.w	r8, [r2, #544]	@ 0x220
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34001dce:	f8c3 7a60 	str.w	r7, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34001dd2:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
34001dd6:	f04f 0903 	mov.w	r9, #3
34001dda:	9103      	str	r1, [sp, #12]
  (void)tmpreg;
34001ddc:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34001dde:	f8c3 7a20 	str.w	r7, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34001de2:	f8c2 7220 	str.w	r7, [r2, #544]	@ 0x220
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34001de6:	2202      	movs	r2, #2
  XSPI_RAM_CLK_GPIO_CLK_ENABLE();
34001de8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34001dec:	f7ff fd28 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_DQS_GPIO_CLK_ENABLE();
34001df0:	f7ff fd26 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_CS_GPIO_CLK_ENABLE();
34001df4:	f7ff fd24 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D0_GPIO_CLK_ENABLE();
34001df8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34001dfc:	f7ff fd20 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
34001e00:	a905      	add	r1, sp, #20
  XSPI_RAM_D1_GPIO_CLK_ENABLE();
34001e02:	f7ff fd1d 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D2_GPIO_CLK_ENABLE();
34001e06:	f7ff fd1b 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D3_GPIO_CLK_ENABLE();
34001e0a:	f7ff fd19 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D4_GPIO_CLK_ENABLE();
34001e0e:	f7ff fd17 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D5_GPIO_CLK_ENABLE();
34001e12:	f7ff fd15 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D6_GPIO_CLK_ENABLE();
34001e16:	f7ff fd13 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D7_GPIO_CLK_ENABLE();
34001e1a:	f7ff fd11 	bl	34001840 <LL_AHB4_GRP1_EnableClock>
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
34001e1e:	4866      	ldr	r0, [pc, #408]	@ (34001fb8 <BSP_XSPI_RAM_Init+0x23c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34001e20:	e9cd 5205 	strd	r5, r2, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
34001e24:	e9cd 9408 	strd	r9, r4, [sp, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
34001e28:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
34001e2a:	f000 fc95 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI DQS0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS0_PIN;
34001e2e:	2304      	movs	r3, #4
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS0_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);

  /* XSPI DQS1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS1_PIN;
34001e30:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS1_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);

  /* XSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_CLK_PIN;
34001e34:	f04f 0a10 	mov.w	sl, #16
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);
34001e38:	485f      	ldr	r0, [pc, #380]	@ (34001fb8 <BSP_XSPI_RAM_Init+0x23c>)
34001e3a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS0_PIN;
34001e3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS0_PIN_AF;
34001e3e:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
34001e40:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);
34001e42:	f000 fc89 	bl	34002758 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);
34001e46:	485c      	ldr	r0, [pc, #368]	@ (34001fb8 <BSP_XSPI_RAM_Init+0x23c>)
34001e48:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS1_PIN_AF;
34001e4a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS1_PIN;
34001e4c:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
34001e50:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);
34001e52:	f000 fc81 	bl	34002758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = XSPI_RAM_CLK_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
34001e56:	4858      	ldr	r0, [pc, #352]	@ (34001fb8 <BSP_XSPI_RAM_Init+0x23c>)
34001e58:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_CLK_PIN_AF;
34001e5a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_CLK_PIN;
34001e5c:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
34001e60:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
34001e62:	f000 fc79 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D0_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D0_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
34001e66:	4855      	ldr	r0, [pc, #340]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001e68:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D0_PIN_AF;
34001e6a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D0_PIN;
34001e6c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
34001e6e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
34001e70:	f000 fc72 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D1_PIN;
34001e74:	2202      	movs	r2, #2
  GPIO_InitStruct.Alternate = XSPI_RAM_D1_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
34001e76:	4851      	ldr	r0, [pc, #324]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001e78:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D1_PIN;
34001e7a:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D1_PIN_AF;
34001e7c:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
34001e7e:	f000 fc6b 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D2_PIN;
34001e82:	2304      	movs	r3, #4
  GPIO_InitStruct.Alternate = XSPI_RAM_D2_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
34001e84:	484d      	ldr	r0, [pc, #308]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001e86:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D2_PIN;
34001e88:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D2_PIN_AF;
34001e8a:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
34001e8c:	f000 fc64 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D3_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D3_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
34001e90:	484a      	ldr	r0, [pc, #296]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001e92:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D3_PIN_AF;
34001e94:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D3_PIN;
34001e96:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
34001e9a:	f000 fc5d 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D4_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D4_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
34001e9e:	4847      	ldr	r0, [pc, #284]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001ea0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D4_PIN_AF;
34001ea2:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D4_PIN;
34001ea4:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
34001ea8:	f000 fc56 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D5_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D5_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
34001eac:	4843      	ldr	r0, [pc, #268]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001eae:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D5_PIN_AF;
34001eb0:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D5_PIN;
34001eb2:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
34001eb6:	f000 fc4f 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D6_PIN;
34001eba:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStruct.Alternate = XSPI_RAM_D6_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
34001ebc:	483f      	ldr	r0, [pc, #252]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001ebe:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D6_PIN_AF;
34001ec0:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D6_PIN;
34001ec2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
34001ec4:	f000 fc48 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D7_PIN;
34001ec8:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Alternate = XSPI_RAM_D7_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
34001eca:	483c      	ldr	r0, [pc, #240]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001ecc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D7_PIN_AF;
34001ece:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D7_PIN;
34001ed0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
34001ed2:	f000 fc41 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D8 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D8_PIN;
34001ed6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  GPIO_InitStruct.Alternate = XSPI_RAM_D8_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D8_GPIO_PORT, &GPIO_InitStruct);
34001eda:	4838      	ldr	r0, [pc, #224]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001edc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D8_PIN_AF;
34001ede:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D8_PIN;
34001ee0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D8_GPIO_PORT, &GPIO_InitStruct);
34001ee2:	f000 fc39 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D9 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D9_PIN;
34001ee6:	f44f 7300 	mov.w	r3, #512	@ 0x200
  GPIO_InitStruct.Alternate = XSPI_RAM_D9_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D9_GPIO_PORT, &GPIO_InitStruct);
34001eea:	4834      	ldr	r0, [pc, #208]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001eec:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D9_PIN_AF;
34001eee:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D9_PIN;
34001ef0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D9_GPIO_PORT, &GPIO_InitStruct);
34001ef2:	f000 fc31 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D10 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D10_PIN;
34001ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  GPIO_InitStruct.Alternate = XSPI_RAM_D10_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D10_GPIO_PORT, &GPIO_InitStruct);
34001efa:	4830      	ldr	r0, [pc, #192]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001efc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D10_PIN_AF;
34001efe:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D10_PIN;
34001f00:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D10_GPIO_PORT, &GPIO_InitStruct);
34001f02:	f000 fc29 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D11 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D11_PIN;
34001f06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  GPIO_InitStruct.Alternate = XSPI_RAM_D11_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D11_GPIO_PORT, &GPIO_InitStruct);
34001f0a:	482c      	ldr	r0, [pc, #176]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001f0c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D11_PIN_AF;
34001f0e:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D11_PIN;
34001f10:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D11_GPIO_PORT, &GPIO_InitStruct);
34001f12:	f000 fc21 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D12 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D12_PIN;
34001f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  GPIO_InitStruct.Alternate = XSPI_RAM_D12_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D12_GPIO_PORT, &GPIO_InitStruct);
34001f1a:	4828      	ldr	r0, [pc, #160]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001f1c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D12_PIN;
34001f1e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D12_PIN_AF;
34001f20:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D12_GPIO_PORT, &GPIO_InitStruct);
34001f22:	f000 fc19 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D13 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D13_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D13_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D13_GPIO_PORT, &GPIO_InitStruct);
34001f26:	4825      	ldr	r0, [pc, #148]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001f28:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D13_PIN_AF;
34001f2a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D13_PIN;
34001f2c:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D13_GPIO_PORT, &GPIO_InitStruct);
34001f2e:	f000 fc13 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D14 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D14_PIN;
34001f32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  GPIO_InitStruct.Alternate = XSPI_RAM_D14_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D14_GPIO_PORT, &GPIO_InitStruct);
34001f36:	4821      	ldr	r0, [pc, #132]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001f38:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D14_PIN_AF;
34001f3a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D14_PIN;
34001f3c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D14_GPIO_PORT, &GPIO_InitStruct);
34001f3e:	f000 fc0b 	bl	34002758 <HAL_GPIO_Init>

  /* XSPI D15 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D15_PIN;
34001f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  GPIO_InitStruct.Alternate = XSPI_RAM_D15_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D15_GPIO_PORT, &GPIO_InitStruct);
34001f46:	481d      	ldr	r0, [pc, #116]	@ (34001fbc <BSP_XSPI_RAM_Init+0x240>)
34001f48:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D15_PIN_AF;
34001f4a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D15_PIN;
34001f4c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D15_GPIO_PORT, &GPIO_InitStruct);
34001f4e:	f000 fc03 	bl	34002758 <HAL_GPIO_Init>
      xspi_init.MemorySize     = HAL_XSPI_SIZE_256MB;
34001f52:	2318      	movs	r3, #24
34001f54:	9305      	str	r3, [sp, #20]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34001f56:	9b01      	ldr	r3, [sp, #4]
      if (MX_XSPI_RAM_Init(&hxspi_ram[Instance], &xspi_init) != HAL_OK)
34001f58:	4819      	ldr	r0, [pc, #100]	@ (34001fc0 <BSP_XSPI_RAM_Init+0x244>)
34001f5a:	a905      	add	r1, sp, #20
      xspi_init.ClockPrescaler = 3;
34001f5c:	f8cd 9018 	str.w	r9, [sp, #24]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34001f60:	9307      	str	r3, [sp, #28]
      if (MX_XSPI_RAM_Init(&hxspi_ram[Instance], &xspi_init) != HAL_OK)
34001f62:	f7ff fed7 	bl	34001d14 <MX_XSPI_RAM_Init>
  int32_t ret = BSP_ERROR_NONE;
34001f66:	2800      	cmp	r0, #0
34001f68:	bf14      	ite	ne
34001f6a:	f06f 0403 	mvnne.w	r4, #3
34001f6e:	2400      	moveq	r4, #0
      XSPI_Ram_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34001f70:	7035      	strb	r5, [r6, #0]
      XSPI_Ram_Ctx[Instance].LatencyType   = BSP_XSPI_RAM_FIXED_LATENCY;
34001f72:	7075      	strb	r5, [r6, #1]
      XSPI_Ram_Ctx[Instance].BurstType     = BSP_XSPI_RAM_LINEAR_BURST;
34001f74:	70b5      	strb	r5, [r6, #2]
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 0, 0x30));
34001f76:	2230      	movs	r2, #48	@ 0x30
34001f78:	2100      	movs	r1, #0
34001f7a:	4811      	ldr	r0, [pc, #68]	@ (34001fc0 <BSP_XSPI_RAM_Init+0x244>)
34001f7c:	f7ff f930 	bl	340011e0 <APS256XX_WriteReg>
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 4, 0x20));
34001f80:	2220      	movs	r2, #32
34001f82:	2104      	movs	r1, #4
34001f84:	480e      	ldr	r0, [pc, #56]	@ (34001fc0 <BSP_XSPI_RAM_Init+0x244>)
34001f86:	f7ff f92b 	bl	340011e0 <APS256XX_WriteReg>
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 8, 0x40));
34001f8a:	2108      	movs	r1, #8
34001f8c:	2240      	movs	r2, #64	@ 0x40
34001f8e:	480c      	ldr	r0, [pc, #48]	@ (34001fc0 <BSP_XSPI_RAM_Init+0x244>)
34001f90:	f7ff f926 	bl	340011e0 <APS256XX_WriteReg>
    (void) (HAL_XSPI_SetClockPrescaler(&hxspi_ram[Instance], 0));
34001f94:	2100      	movs	r1, #0
34001f96:	480a      	ldr	r0, [pc, #40]	@ (34001fc0 <BSP_XSPI_RAM_Init+0x244>)
34001f98:	f007 fc98 	bl	340098cc <HAL_XSPI_SetClockPrescaler>
}
34001f9c:	4620      	mov	r0, r4
34001f9e:	b00b      	add	sp, #44	@ 0x2c
34001fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
34001fa4:	f06f 0401 	mvn.w	r4, #1
  return ret;
34001fa8:	e7f8      	b.n	34001f9c <BSP_XSPI_RAM_Init+0x220>
34001faa:	bf00      	nop
34001fac:	3403a89c 	.word	0x3403a89c
34001fb0:	56028000 	.word	0x56028000
34001fb4:	56029000 	.word	0x56029000
34001fb8:	56023800 	.word	0x56023800
34001fbc:	56023c00 	.word	0x56023c00
34001fc0:	3403a8a0 	.word	0x3403a8a0

34001fc4 <BSP_XSPI_RAM_EnableMemoryMappedMode>:
{
34001fc4:	b507      	push	{r0, r1, r2, lr}
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
34001fc6:	b968      	cbnz	r0, 34001fe4 <BSP_XSPI_RAM_EnableMemoryMappedMode+0x20>
    if (APS256XX_EnableMemoryMappedMode(&hxspi_ram[Instance], 7, 7, 1, 0) != APS256XX_OK)
34001fc8:	2207      	movs	r2, #7
34001fca:	9000      	str	r0, [sp, #0]
34001fcc:	2301      	movs	r3, #1
34001fce:	4611      	mov	r1, r2
34001fd0:	4806      	ldr	r0, [pc, #24]	@ (34001fec <BSP_XSPI_RAM_EnableMemoryMappedMode+0x28>)
34001fd2:	f7ff f8aa 	bl	3400112a <APS256XX_EnableMemoryMappedMode>
      ret = BSP_ERROR_PERIPH_FAILURE;
34001fd6:	2800      	cmp	r0, #0
34001fd8:	bf18      	it	ne
34001fda:	f06f 0003 	mvnne.w	r0, #3
}
34001fde:	b003      	add	sp, #12
34001fe0:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = BSP_ERROR_WRONG_PARAM;
34001fe4:	f06f 0001 	mvn.w	r0, #1
34001fe8:	e7f9      	b.n	34001fde <BSP_XSPI_RAM_EnableMemoryMappedMode+0x1a>
34001fea:	bf00      	nop
34001fec:	3403a8a0 	.word	0x3403a8a0

34001ff0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34001ff0:	4b44      	ldr	r3, [pc, #272]	@ (34002104 <SystemInit+0x114>)
34001ff2:	4a45      	ldr	r2, [pc, #276]	@ (34002108 <SystemInit+0x118>)
{
34001ff4:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34001ff6:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
34001ff8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
34001ffa:	2502      	movs	r5, #2
  SAU->RNR = 0;
34001ffc:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34001ffe:	4943      	ldr	r1, [pc, #268]	@ (3400210c <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34002000:	4e43      	ldr	r6, [pc, #268]	@ (34002110 <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34002002:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34002006:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3400200a:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
3400200e:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
34002012:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34002016:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400201a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
3400201e:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34002022:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002026:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
3400202a:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
3400202e:	2503      	movs	r5, #3
  SAU->RBAR = 0;
34002030:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002034:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
34002038:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
3400203c:	2504      	movs	r5, #4
  SAU->RBAR = 0;
3400203e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002042:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
34002046:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
3400204a:	2505      	movs	r5, #5
  SAU->RBAR = 0;
3400204c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
34002054:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
34002058:	2506      	movs	r5, #6
  SAU->RBAR = 0;
3400205a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400205e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
34002062:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
34002066:	2507      	movs	r5, #7
  SAU->RBAR = 0;
34002068:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400206c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
34002070:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34002074:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34002078:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
3400207c:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
34002080:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
34002084:	689a      	ldr	r2, [r3, #8]
34002086:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34002088:	4a22      	ldr	r2, [pc, #136]	@ (34002114 <SystemInit+0x124>)
3400208a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
3400208c:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
34002090:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34002092:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34002094:	f045 0510 	orr.w	r5, r5, #16
34002098:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
3400209a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
3400209c:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
340020a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
340020a4:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
340020a8:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
340020ac:	f042 0210 	orr.w	r2, r2, #16
340020b0:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
340020b4:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
340020b8:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
340020bc:	f022 0210 	bic.w	r2, r2, #16
340020c0:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
340020c4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
340020c8:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
340020cc:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
340020d0:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
340020d2:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
340020d6:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
340020da:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
340020de:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
340020e2:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
340020e4:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
340020e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
340020ec:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
340020f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
340020f4:	4a08      	ldr	r2, [pc, #32]	@ (34002118 <SystemInit+0x128>)
340020f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
340020fa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
340020fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34002102:	bd70      	pop	{r4, r5, r6, pc}
34002104:	e000ed00 	.word	0xe000ed00
34002108:	34000400 	.word	0x34000400
3400210c:	56028000 	.word	0x56028000
34002110:	56008000 	.word	0x56008000
34002114:	56024800 	.word	0x56024800
34002118:	e002ed00 	.word	0xe002ed00

3400211c <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400211c:	4b7b      	ldr	r3, [pc, #492]	@ (3400230c <SystemCoreClockUpdate+0x1f0>)
{
3400211e:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34002120:	6a1a      	ldr	r2, [r3, #32]
34002122:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
34002126:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
3400212a:	f000 80d1 	beq.w	340022d0 <SystemCoreClockUpdate+0x1b4>
3400212e:	d808      	bhi.n	34002142 <SystemCoreClockUpdate+0x26>
34002130:	2a00      	cmp	r2, #0
34002132:	d039      	beq.n	340021a8 <SystemCoreClockUpdate+0x8c>
34002134:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
34002138:	d03c      	beq.n	340021b4 <SystemCoreClockUpdate+0x98>
  uint32_t sysclk = 0;
3400213a:	2200      	movs	r2, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
3400213c:	4b74      	ldr	r3, [pc, #464]	@ (34002310 <SystemCoreClockUpdate+0x1f4>)
3400213e:	601a      	str	r2, [r3, #0]
}
34002140:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34002142:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34002146:	d1f8      	bne.n	3400213a <SystemCoreClockUpdate+0x1e>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34002148:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
3400214c:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34002150:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34002154:	d036      	beq.n	340021c4 <SystemCoreClockUpdate+0xa8>
34002156:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
3400215a:	d044      	beq.n	340021e6 <SystemCoreClockUpdate+0xca>
3400215c:	2a00      	cmp	r2, #0
3400215e:	d152      	bne.n	34002206 <SystemCoreClockUpdate+0xea>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34002160:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
34002164:	f012 6400 	ands.w	r4, r2, #134217728	@ 0x8000000
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34002168:	f002 41e0 	and.w	r1, r2, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400216c:	f040 80b9 	bne.w	340022e2 <SystemCoreClockUpdate+0x1c6>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34002170:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34002178:	f3c2 250b 	ubfx	r5, r2, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3400217c:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34002180:	460c      	mov	r4, r1
34002182:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34002186:	f3c3 66c2 	ubfx	r6, r3, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
3400218a:	f3c2 5105 	ubfx	r1, r2, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
3400218e:	f3c3 6302 	ubfx	r3, r3, #24, #3
    switch (pllsource)
34002192:	f000 8094 	beq.w	340022be <SystemCoreClockUpdate+0x1a2>
34002196:	f200 809d 	bhi.w	340022d4 <SystemCoreClockUpdate+0x1b8>
3400219a:	2c00      	cmp	r4, #0
3400219c:	d047      	beq.n	3400222e <SystemCoreClockUpdate+0x112>
3400219e:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
340021a2:	d07c      	beq.n	3400229e <SystemCoreClockUpdate+0x182>
340021a4:	2200      	movs	r2, #0
340021a6:	e049      	b.n	3400223c <SystemCoreClockUpdate+0x120>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340021a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340021aa:	4a5a      	ldr	r2, [pc, #360]	@ (34002314 <SystemCoreClockUpdate+0x1f8>)
340021ac:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340021b0:	40da      	lsrs	r2, r3
    break;
340021b2:	e7c3      	b.n	3400213c <SystemCoreClockUpdate+0x20>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
340021b6:	4a58      	ldr	r2, [pc, #352]	@ (34002318 <SystemCoreClockUpdate+0x1fc>)
340021b8:	f413 7f00 	tst.w	r3, #512	@ 0x200
340021bc:	4b57      	ldr	r3, [pc, #348]	@ (3400231c <SystemCoreClockUpdate+0x200>)
340021be:	bf08      	it	eq
340021c0:	461a      	moveq	r2, r3
340021c2:	e7bb      	b.n	3400213c <SystemCoreClockUpdate+0x20>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
340021c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
340021c8:	f012 6400 	ands.w	r4, r2, #134217728	@ 0x8000000
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
340021cc:	f002 41e0 	and.w	r1, r2, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340021d0:	f040 8087 	bne.w	340022e2 <SystemCoreClockUpdate+0x1c6>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340021d4:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
340021d8:	f3c2 250b 	ubfx	r5, r2, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
340021dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340021e0:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
340021e4:	e7cc      	b.n	34002180 <SystemCoreClockUpdate+0x64>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
340021e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
340021ea:	f012 6400 	ands.w	r4, r2, #134217728	@ 0x8000000
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
340021ee:	f002 41e0 	and.w	r1, r2, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340021f2:	d176      	bne.n	340022e2 <SystemCoreClockUpdate+0x1c6>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
340021f4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
340021f8:	f3c2 250b 	ubfx	r5, r2, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
340021fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34002200:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34002204:	e7bc      	b.n	34002180 <SystemCoreClockUpdate+0x64>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34002206:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
3400220a:	f012 6400 	ands.w	r4, r2, #134217728	@ 0x8000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3400220e:	f002 41e0 	and.w	r1, r2, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34002212:	d166      	bne.n	340022e2 <SystemCoreClockUpdate+0x1c6>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34002214:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34002218:	f3c2 250b 	ubfx	r5, r2, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
3400221c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34002220:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34002224:	e7ac      	b.n	34002180 <SystemCoreClockUpdate+0x64>
34002226:	460b      	mov	r3, r1
34002228:	460e      	mov	r6, r1
3400222a:	4608      	mov	r0, r1
3400222c:	460d      	mov	r5, r1
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3400222e:	4a37      	ldr	r2, [pc, #220]	@ (3400230c <SystemCoreClockUpdate+0x1f0>)
34002230:	6c97      	ldr	r7, [r2, #72]	@ 0x48
34002232:	4a38      	ldr	r2, [pc, #224]	@ (34002314 <SystemCoreClockUpdate+0x1f8>)
34002234:	f3c7 17c1 	ubfx	r7, r7, #7, #2
34002238:	40fa      	lsrs	r2, r7
    if (pllbypass == 0U)
3400223a:	bb3c      	cbnz	r4, 3400228c <SystemCoreClockUpdate+0x170>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
3400223c:	ee07 0a10 	vmov	s14, r0
34002240:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
34002244:	ee07 5a10 	vmov	s14, r5
34002248:	ee07 2a90 	vmov	s15, r2
3400224c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 34002320 <SystemCoreClockUpdate+0x204>
34002250:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34002254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34002258:	eea6 7a26 	vfma.f32	s14, s12, s13
3400225c:	ee67 7a87 	vmul.f32	s15, s15, s14
34002260:	ee07 1a10 	vmov	s14, r1
34002264:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34002268:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
3400226c:	ee07 6a90 	vmov	s15, r6
34002270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
34002274:	ee07 3a90 	vmov	s15, r3
34002278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400227c:	ee27 7a27 	vmul.f32	s14, s14, s15
34002280:	eec6 7a87 	vdiv.f32	s15, s13, s14
34002284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34002288:	ee17 2a90 	vmov	r2, s15
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
3400228c:	4b1f      	ldr	r3, [pc, #124]	@ (3400230c <SystemCoreClockUpdate+0x1f0>)
3400228e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34002292:	f3c3 4307 	ubfx	r3, r3, #16, #8
34002296:	3301      	adds	r3, #1
    sysclk = sysclk / ic_divider;
34002298:	fbb2 f2f3 	udiv	r2, r2, r3
    break;
3400229c:	e74e      	b.n	3400213c <SystemCoreClockUpdate+0x20>
3400229e:	2400      	movs	r4, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340022a0:	4a1a      	ldr	r2, [pc, #104]	@ (3400230c <SystemCoreClockUpdate+0x1f0>)
        sysclk = MSI_VALUE;
340022a2:	4f1e      	ldr	r7, [pc, #120]	@ (3400231c <SystemCoreClockUpdate+0x200>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340022a4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
        sysclk = MSI_VALUE;
340022a6:	f412 7f00 	tst.w	r2, #512	@ 0x200
340022aa:	4a1b      	ldr	r2, [pc, #108]	@ (34002318 <SystemCoreClockUpdate+0x1fc>)
340022ac:	bf08      	it	eq
340022ae:	463a      	moveq	r2, r7
340022b0:	e7c3      	b.n	3400223a <SystemCoreClockUpdate+0x11e>
340022b2:	2300      	movs	r3, #0
340022b4:	461e      	mov	r6, r3
340022b6:	4618      	mov	r0, r3
340022b8:	461d      	mov	r5, r3
340022ba:	4619      	mov	r1, r3
340022bc:	e7f0      	b.n	340022a0 <SystemCoreClockUpdate+0x184>
340022be:	2400      	movs	r4, #0
      sysclk = HSE_VALUE;
340022c0:	4a18      	ldr	r2, [pc, #96]	@ (34002324 <SystemCoreClockUpdate+0x208>)
      break;
340022c2:	e7ba      	b.n	3400223a <SystemCoreClockUpdate+0x11e>
340022c4:	2300      	movs	r3, #0
340022c6:	461e      	mov	r6, r3
340022c8:	4618      	mov	r0, r3
340022ca:	461d      	mov	r5, r3
340022cc:	4619      	mov	r1, r3
340022ce:	e7f7      	b.n	340022c0 <SystemCoreClockUpdate+0x1a4>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340022d0:	4a14      	ldr	r2, [pc, #80]	@ (34002324 <SystemCoreClockUpdate+0x208>)
340022d2:	e733      	b.n	3400213c <SystemCoreClockUpdate+0x20>
340022d4:	f1b4 5f40 	cmp.w	r4, #805306368	@ 0x30000000
340022d8:	f47f af64 	bne.w	340021a4 <SystemCoreClockUpdate+0x88>
340022dc:	2400      	movs	r4, #0
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
340022de:	4a12      	ldr	r2, [pc, #72]	@ (34002328 <SystemCoreClockUpdate+0x20c>)
      break;
340022e0:	e7ab      	b.n	3400223a <SystemCoreClockUpdate+0x11e>
    switch (pllsource)
340022e2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
340022e6:	d0ed      	beq.n	340022c4 <SystemCoreClockUpdate+0x1a8>
340022e8:	d806      	bhi.n	340022f8 <SystemCoreClockUpdate+0x1dc>
340022ea:	2900      	cmp	r1, #0
340022ec:	d09b      	beq.n	34002226 <SystemCoreClockUpdate+0x10a>
340022ee:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
340022f2:	d0de      	beq.n	340022b2 <SystemCoreClockUpdate+0x196>
340022f4:	2200      	movs	r2, #0
340022f6:	e7c9      	b.n	3400228c <SystemCoreClockUpdate+0x170>
340022f8:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
340022fc:	d1fa      	bne.n	340022f4 <SystemCoreClockUpdate+0x1d8>
340022fe:	2300      	movs	r3, #0
34002300:	461e      	mov	r6, r3
34002302:	4618      	mov	r0, r3
34002304:	461d      	mov	r5, r3
34002306:	4619      	mov	r1, r3
34002308:	e7e9      	b.n	340022de <SystemCoreClockUpdate+0x1c2>
3400230a:	bf00      	nop
3400230c:	56028000 	.word	0x56028000
34002310:	3403a690 	.word	0x3403a690
34002314:	03d09000 	.word	0x03d09000
34002318:	00f42400 	.word	0x00f42400
3400231c:	003d0900 	.word	0x003d0900
34002320:	33800000 	.word	0x33800000
34002324:	02dc6c00 	.word	0x02dc6c00
34002328:	00bb8000 	.word	0x00bb8000

3400232c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
3400232c:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34002330:	b500      	push	{lr}
  SystemCoreClockUpdate();
34002332:	f7ff fef3 	bl	3400211c <SystemCoreClockUpdate>

  return SystemCoreClock;
}
34002336:	4b05      	ldr	r3, [pc, #20]	@ (3400234c <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
34002338:	f85d eb04 	ldr.w	lr, [sp], #4
3400233c:	6818      	ldr	r0, [r3, #0]
3400233e:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34002342:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34002346:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
3400234a:	4774      	bxns	lr
3400234c:	3403a690 	.word	0x3403a690

34002350 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
34002350:	4770      	bx	lr
	...

34002354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34002354:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34002356:	4b0f      	ldr	r3, [pc, #60]	@ (34002394 <HAL_InitTick+0x40>)
{
34002358:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq == 0UL)
3400235a:	781a      	ldrb	r2, [r3, #0]
3400235c:	b90a      	cbnz	r2, 34002362 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
3400235e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
34002360:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34002362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34002366:	fbb3 f3f2 	udiv	r3, r3, r2
3400236a:	4a0b      	ldr	r2, [pc, #44]	@ (34002398 <HAL_InitTick+0x44>)
3400236c:	6810      	ldr	r0, [r2, #0]
3400236e:	fbb0 f0f3 	udiv	r0, r0, r3
34002372:	f000 f9dd 	bl	34002730 <HAL_SYSTICK_Config>
34002376:	4604      	mov	r4, r0
34002378:	2800      	cmp	r0, #0
3400237a:	d1f0      	bne.n	3400235e <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
3400237c:	2d0f      	cmp	r5, #15
3400237e:	d8ee      	bhi.n	3400235e <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34002380:	4602      	mov	r2, r0
34002382:	4629      	mov	r1, r5
34002384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34002388:	f000 f974 	bl	34002674 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
3400238c:	4b03      	ldr	r3, [pc, #12]	@ (3400239c <HAL_InitTick+0x48>)
3400238e:	4620      	mov	r0, r4
34002390:	601d      	str	r5, [r3, #0]
  return HAL_OK;
34002392:	e7e5      	b.n	34002360 <HAL_InitTick+0xc>
34002394:	3403a694 	.word	0x3403a694
34002398:	3403a690 	.word	0x3403a690
3400239c:	3403a698 	.word	0x3403a698

340023a0 <HAL_Init>:
{
340023a0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
340023a2:	2003      	movs	r0, #3
340023a4:	f000 f948 	bl	34002638 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
340023a8:	f7ff feb8 	bl	3400211c <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
340023ac:	200f      	movs	r0, #15
340023ae:	f7ff ffd1 	bl	34002354 <HAL_InitTick>
340023b2:	4604      	mov	r4, r0
340023b4:	b918      	cbnz	r0, 340023be <HAL_Init+0x1e>
  HAL_MspInit();
340023b6:	f7ff ffcb 	bl	34002350 <HAL_MspInit>
}
340023ba:	4620      	mov	r0, r4
340023bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
340023be:	2401      	movs	r4, #1
340023c0:	e7fb      	b.n	340023ba <HAL_Init+0x1a>
	...

340023c4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
340023c4:	4a03      	ldr	r2, [pc, #12]	@ (340023d4 <HAL_IncTick+0x10>)
340023c6:	4b04      	ldr	r3, [pc, #16]	@ (340023d8 <HAL_IncTick+0x14>)
340023c8:	6811      	ldr	r1, [r2, #0]
340023ca:	781b      	ldrb	r3, [r3, #0]
340023cc:	440b      	add	r3, r1
340023ce:	6013      	str	r3, [r2, #0]
}
340023d0:	4770      	bx	lr
340023d2:	bf00      	nop
340023d4:	3403a96c 	.word	0x3403a96c
340023d8:	3403a694 	.word	0x3403a694

340023dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
340023dc:	4b01      	ldr	r3, [pc, #4]	@ (340023e4 <HAL_GetTick+0x8>)
340023de:	6818      	ldr	r0, [r3, #0]
}
340023e0:	4770      	bx	lr
340023e2:	bf00      	nop
340023e4:	3403a96c 	.word	0x3403a96c

340023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
340023e8:	b538      	push	{r3, r4, r5, lr}
340023ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
340023ec:	f7ff fff6 	bl	340023dc <HAL_GetTick>
340023f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
340023f2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
340023f4:	bf1e      	ittt	ne
340023f6:	4b04      	ldrne	r3, [pc, #16]	@ (34002408 <HAL_Delay+0x20>)
340023f8:	781b      	ldrbne	r3, [r3, #0]
340023fa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
340023fc:	f7ff ffee 	bl	340023dc <HAL_GetTick>
34002400:	1b43      	subs	r3, r0, r5
34002402:	42a3      	cmp	r3, r4
34002404:	d3fa      	bcc.n	340023fc <HAL_Delay+0x14>
  {
  }
}
34002406:	bd38      	pop	{r3, r4, r5, pc}
34002408:	3403a694 	.word	0x3403a694

3400240c <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
3400240c:	b570      	push	{r4, r5, r6, lr}
3400240e:	4604      	mov	r4, r0
34002410:	460d      	mov	r5, r1
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
34002412:	f7ff ffe3 	bl	340023dc <HAL_GetTick>
34002416:	4606      	mov	r6, r0

  /* Check the handle pointer */
  if (hbsec == NULL)
34002418:	b12c      	cbz	r4, 34002426 <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
3400241a:	6822      	ldr	r2, [r4, #0]
3400241c:	4b1b      	ldr	r3, [pc, #108]	@ (3400248c <HAL_BSEC_OTP_Reload+0x80>)
3400241e:	429a      	cmp	r2, r3
34002420:	d003      	beq.n	3400242a <HAL_BSEC_OTP_Reload+0x1e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34002422:	2301      	movs	r3, #1
34002424:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
34002426:	2001      	movs	r0, #1
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
}
34002428:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
3400242a:	f5b5 7fbc 	cmp.w	r5, #376	@ 0x178
3400242e:	d2f8      	bcs.n	34002422 <HAL_BSEC_OTP_Reload+0x16>
    status_reg = FuseId / 32U;
34002430:	096b      	lsrs	r3, r5, #5
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34002432:	f503 7308 	add.w	r3, r3, #544	@ 0x220
34002436:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400243a:	2301      	movs	r3, #1
3400243c:	f005 001f 	and.w	r0, r5, #31
34002440:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34002442:	420b      	tst	r3, r1
34002444:	d11f      	bne.n	34002486 <HAL_BSEC_OTP_Reload+0x7a>
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
34002446:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
3400244a:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
3400244e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34002452:	432b      	orrs	r3, r5
34002454:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34002458:	6823      	ldr	r3, [r4, #0]
3400245a:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400245e:	07d2      	lsls	r2, r2, #31
34002460:	d409      	bmi.n	34002476 <HAL_BSEC_OTP_Reload+0x6a>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
34002462:	f8d3 0e44 	ldr.w	r0, [r3, #3652]	@ 0xe44
34002466:	f410 008c 	ands.w	r0, r0, #4587520	@ 0x460000
3400246a:	d0dd      	beq.n	34002428 <HAL_BSEC_OTP_Reload+0x1c>
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
3400246c:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34002470:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
34002474:	e7d6      	b.n	34002424 <HAL_BSEC_OTP_Reload+0x18>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34002476:	f7ff ffb1 	bl	340023dc <HAL_GetTick>
3400247a:	1b80      	subs	r0, r0, r6
3400247c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34002480:	d9ea      	bls.n	34002458 <HAL_BSEC_OTP_Reload+0x4c>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34002482:	230a      	movs	r3, #10
34002484:	e7ce      	b.n	34002424 <HAL_BSEC_OTP_Reload+0x18>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34002486:	2304      	movs	r3, #4
34002488:	e7cc      	b.n	34002424 <HAL_BSEC_OTP_Reload+0x18>
3400248a:	bf00      	nop
3400248c:	56009000 	.word	0x56009000

34002490 <HAL_BSEC_OTP_Read>:
{
34002490:	b570      	push	{r4, r5, r6, lr}
34002492:	460e      	mov	r6, r1
34002494:	4615      	mov	r5, r2
  if (hbsec == NULL)
34002496:	4604      	mov	r4, r0
34002498:	b130      	cbz	r0, 340024a8 <HAL_BSEC_OTP_Read+0x18>
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
3400249a:	b11a      	cbz	r2, 340024a4 <HAL_BSEC_OTP_Read+0x14>
3400249c:	6802      	ldr	r2, [r0, #0]
3400249e:	4b09      	ldr	r3, [pc, #36]	@ (340024c4 <HAL_BSEC_OTP_Read+0x34>)
340024a0:	429a      	cmp	r2, r3
340024a2:	d003      	beq.n	340024ac <HAL_BSEC_OTP_Read+0x1c>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340024a4:	2301      	movs	r3, #1
340024a6:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
340024a8:	2001      	movs	r0, #1
}
340024aa:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
340024ac:	f5b1 7fbc 	cmp.w	r1, #376	@ 0x178
340024b0:	d2f8      	bcs.n	340024a4 <HAL_BSEC_OTP_Read+0x14>
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
340024b2:	f7ff ffab 	bl	3400240c <HAL_BSEC_OTP_Reload>
340024b6:	2800      	cmp	r0, #0
340024b8:	d1f6      	bne.n	340024a8 <HAL_BSEC_OTP_Read+0x18>
      *pFuseData = hbsec->Instance->FVRw[FuseId];
340024ba:	6823      	ldr	r3, [r4, #0]
340024bc:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
340024c0:	602b      	str	r3, [r5, #0]
  return HAL_OK;
340024c2:	e7f2      	b.n	340024aa <HAL_BSEC_OTP_Read+0x1a>
340024c4:	56009000 	.word	0x56009000

340024c8 <HAL_BSEC_OTP_Program>:
{
340024c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
340024cc:	4604      	mov	r4, r0
340024ce:	460e      	mov	r6, r1
340024d0:	4617      	mov	r7, r2
340024d2:	4699      	mov	r9, r3
  uint32_t tick_start = HAL_GetTick();
340024d4:	f7ff ff82 	bl	340023dc <HAL_GetTick>
340024d8:	4680      	mov	r8, r0
  if (hbsec == NULL)
340024da:	b12c      	cbz	r4, 340024e8 <HAL_BSEC_OTP_Program+0x20>
 if (hbsec->Instance != BSEC)
340024dc:	6822      	ldr	r2, [r4, #0]
340024de:	4b28      	ldr	r3, [pc, #160]	@ (34002580 <HAL_BSEC_OTP_Program+0xb8>)
340024e0:	429a      	cmp	r2, r3
340024e2:	d005      	beq.n	340024f0 <HAL_BSEC_OTP_Program+0x28>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340024e4:	2301      	movs	r3, #1
340024e6:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
340024e8:	2001      	movs	r0, #1
}
340024ea:	b003      	add	sp, #12
340024ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
340024f0:	f439 4380 	bics.w	r3, r9, #16384	@ 0x4000
340024f4:	d004      	beq.n	34002500 <HAL_BSEC_OTP_Program+0x38>
340024f6:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
340024fa:	4822      	ldr	r0, [pc, #136]	@ (34002584 <HAL_BSEC_OTP_Program+0xbc>)
340024fc:	f7fe fc82 	bl	34000e04 <assert_failed>
  if (FuseId < BSEC_NB_FUSES)
34002500:	f5b6 7fbc 	cmp.w	r6, #376	@ 0x178
34002504:	d2ee      	bcs.n	340024e4 <HAL_BSEC_OTP_Program+0x1c>
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34002506:	6822      	ldr	r2, [r4, #0]
    status_reg = FuseId / 32U;
34002508:	0973      	lsrs	r3, r6, #5
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400250a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
3400250e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34002512:	2301      	movs	r3, #1
34002514:	f006 001f 	and.w	r0, r6, #31
34002518:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400251a:	420b      	tst	r3, r1
3400251c:	d12e      	bne.n	3400257c <HAL_BSEC_OTP_Program+0xb4>
      hbsec->Instance->WDR = FuseData;
3400251e:	f8c2 7c08 	str.w	r7, [r2, #3080]	@ 0xc08
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
34002522:	f8d2 5c04 	ldr.w	r5, [r2, #3076]	@ 0xc04
34002526:	f425 45c3 	bic.w	r5, r5, #24960	@ 0x6180
3400252a:	f025 057f 	bic.w	r5, r5, #127	@ 0x7f
3400252e:	4335      	orrs	r5, r6
34002530:	ea45 0509 	orr.w	r5, r5, r9
34002534:	f445 5500 	orr.w	r5, r5, #8192	@ 0x2000
34002538:	f8c2 5c04 	str.w	r5, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
3400253c:	6823      	ldr	r3, [r4, #0]
3400253e:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
34002542:	07d2      	lsls	r2, r2, #31
34002544:	d406      	bmi.n	34002554 <HAL_BSEC_OTP_Program+0x8c>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
34002546:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3400254a:	03db      	lsls	r3, r3, #15
3400254c:	d50b      	bpl.n	34002566 <HAL_BSEC_OTP_Program+0x9e>
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
3400254e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34002552:	e7c8      	b.n	340024e6 <HAL_BSEC_OTP_Program+0x1e>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34002554:	f7ff ff42 	bl	340023dc <HAL_GetTick>
34002558:	eba0 0008 	sub.w	r0, r0, r8
3400255c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34002560:	d9ec      	bls.n	3400253c <HAL_BSEC_OTP_Program+0x74>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34002562:	230a      	movs	r3, #10
34002564:	e7bf      	b.n	340024e6 <HAL_BSEC_OTP_Program+0x1e>
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
34002566:	4631      	mov	r1, r6
34002568:	4620      	mov	r0, r4
3400256a:	aa01      	add	r2, sp, #4
3400256c:	f7ff ff90 	bl	34002490 <HAL_BSEC_OTP_Read>
34002570:	2800      	cmp	r0, #0
34002572:	d1b9      	bne.n	340024e8 <HAL_BSEC_OTP_Program+0x20>
        if (read_data != FuseData)
34002574:	9b01      	ldr	r3, [sp, #4]
34002576:	42bb      	cmp	r3, r7
34002578:	d1e9      	bne.n	3400254e <HAL_BSEC_OTP_Program+0x86>
3400257a:	e7b6      	b.n	340024ea <HAL_BSEC_OTP_Program+0x22>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3400257c:	2304      	movs	r3, #4
3400257e:	e7b2      	b.n	340024e6 <HAL_BSEC_OTP_Program+0x1e>
34002580:	56009000 	.word	0x56009000
34002584:	340387b8 	.word	0x340387b8

34002588 <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34002588:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
3400258a:	4604      	mov	r4, r0
3400258c:	b350      	cbz	r0, 340025e4 <HAL_CACHEAXI_Enable+0x5c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400258e:	6803      	ldr	r3, [r0, #0]
34002590:	4a15      	ldr	r2, [pc, #84]	@ (340025e8 <HAL_CACHEAXI_Enable+0x60>)
34002592:	4293      	cmp	r3, r2
34002594:	d008      	beq.n	340025a8 <HAL_CACHEAXI_Enable+0x20>
34002596:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400259a:	4293      	cmp	r3, r2
3400259c:	d004      	beq.n	340025a8 <HAL_CACHEAXI_Enable+0x20>
3400259e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
340025a2:	4812      	ldr	r0, [pc, #72]	@ (340025ec <HAL_CACHEAXI_Enable+0x64>)
340025a4:	f7fe fc2e 	bl	34000e04 <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340025a8:	6823      	ldr	r3, [r4, #0]
340025aa:	685b      	ldr	r3, [r3, #4]
340025ac:	07d9      	lsls	r1, r3, #31
340025ae:	d407      	bmi.n	340025c0 <HAL_CACHEAXI_Enable+0x38>
  }

  if (status == HAL_OK)
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340025b0:	2000      	movs	r0, #0
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340025b2:	6822      	ldr	r2, [r4, #0]
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340025b4:	60a0      	str	r0, [r4, #8]
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340025b6:	6813      	ldr	r3, [r2, #0]
340025b8:	f043 0301 	orr.w	r3, r3, #1
340025bc:	6013      	str	r3, [r2, #0]
  }

  return status;
}
340025be:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
340025c0:	f7ff ff0c 	bl	340023dc <HAL_GetTick>
340025c4:	4605      	mov	r5, r0
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340025c6:	6823      	ldr	r3, [r4, #0]
340025c8:	685b      	ldr	r3, [r3, #4]
340025ca:	07db      	lsls	r3, r3, #31
340025cc:	d5f0      	bpl.n	340025b0 <HAL_CACHEAXI_Enable+0x28>
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
340025ce:	f7ff ff05 	bl	340023dc <HAL_GetTick>
340025d2:	1b40      	subs	r0, r0, r5
340025d4:	2801      	cmp	r0, #1
340025d6:	d9f6      	bls.n	340025c6 <HAL_CACHEAXI_Enable+0x3e>
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
340025d8:	6823      	ldr	r3, [r4, #0]
340025da:	685b      	ldr	r3, [r3, #4]
340025dc:	07da      	lsls	r2, r3, #31
340025de:	d4f2      	bmi.n	340025c6 <HAL_CACHEAXI_Enable+0x3e>
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
340025e0:	2310      	movs	r3, #16
340025e2:	60a3      	str	r3, [r4, #8]
    return HAL_ERROR;
340025e4:	2001      	movs	r0, #1
340025e6:	e7ea      	b.n	340025be <HAL_CACHEAXI_Enable+0x36>
340025e8:	580dfc00 	.word	0x580dfc00
340025ec:	3403885c 	.word	0x3403885c

340025f0 <HAL_CACHEAXI_Init>:
{
340025f0:	b510      	push	{r4, lr}
  if (hcacheaxi == NULL)
340025f2:	4604      	mov	r4, r0
340025f4:	b1c8      	cbz	r0, 3400262a <HAL_CACHEAXI_Init+0x3a>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
340025f6:	6803      	ldr	r3, [r0, #0]
340025f8:	4a0d      	ldr	r2, [pc, #52]	@ (34002630 <HAL_CACHEAXI_Init+0x40>)
340025fa:	4293      	cmp	r3, r2
340025fc:	d007      	beq.n	3400260e <HAL_CACHEAXI_Init+0x1e>
340025fe:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34002602:	4293      	cmp	r3, r2
34002604:	d003      	beq.n	3400260e <HAL_CACHEAXI_Init+0x1e>
34002606:	21bc      	movs	r1, #188	@ 0xbc
34002608:	480a      	ldr	r0, [pc, #40]	@ (34002634 <HAL_CACHEAXI_Init+0x44>)
3400260a:	f7fe fbfb 	bl	34000e04 <assert_failed>
  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
3400260e:	7923      	ldrb	r3, [r4, #4]
34002610:	b913      	cbnz	r3, 34002618 <HAL_CACHEAXI_Init+0x28>
    HAL_CACHEAXI_MspInit(hcacheaxi);
34002612:	4620      	mov	r0, r4
34002614:	f7fe fbdc 	bl	34000dd0 <HAL_CACHEAXI_MspInit>
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34002618:	2300      	movs	r3, #0
3400261a:	60a3      	str	r3, [r4, #8]
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
3400261c:	2301      	movs	r3, #1
3400261e:	7123      	strb	r3, [r4, #4]
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34002620:	4620      	mov	r0, r4
}
34002622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34002626:	f7ff bfaf 	b.w	34002588 <HAL_CACHEAXI_Enable>
}
3400262a:	2001      	movs	r0, #1
3400262c:	bd10      	pop	{r4, pc}
3400262e:	bf00      	nop
34002630:	580dfc00 	.word	0x580dfc00
34002634:	3403885c 	.word	0x3403885c

34002638 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002638:	1ec3      	subs	r3, r0, #3
3400263a:	2b04      	cmp	r3, #4
{
3400263c:	b510      	push	{r4, lr}
3400263e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34002640:	d903      	bls.n	3400264a <HAL_NVIC_SetPriorityGrouping+0x12>
34002642:	21e6      	movs	r1, #230	@ 0xe6
34002644:	4809      	ldr	r0, [pc, #36]	@ (3400266c <HAL_NVIC_SetPriorityGrouping+0x34>)
34002646:	f7fe fbdd 	bl	34000e04 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400264a:	4909      	ldr	r1, [pc, #36]	@ (34002670 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
3400264c:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400264e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34002650:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34002654:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
34002658:	0412      	lsls	r2, r2, #16
3400265a:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
3400265c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
3400265e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34002662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
34002666:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
34002668:	bd10      	pop	{r4, pc}
3400266a:	bf00      	nop
3400266c:	34038904 	.word	0x34038904
34002670:	e000ed00 	.word	0xe000ed00

34002674 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34002674:	f110 0f0c 	cmn.w	r0, #12
{
34002678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400267c:	4605      	mov	r5, r0
3400267e:	460c      	mov	r4, r1
34002680:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34002682:	db01      	blt.n	34002688 <HAL_NVIC_SetPriority+0x14>
34002684:	1d03      	adds	r3, r0, #4
34002686:	d103      	bne.n	34002690 <HAL_NVIC_SetPriority+0x1c>
34002688:	21ff      	movs	r1, #255	@ 0xff
3400268a:	4826      	ldr	r0, [pc, #152]	@ (34002724 <HAL_NVIC_SetPriority+0xb0>)
3400268c:	f7fe fbba 	bl	34000e04 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34002690:	4b25      	ldr	r3, [pc, #148]	@ (34002728 <HAL_NVIC_SetPriority+0xb4>)
34002692:	68de      	ldr	r6, [r3, #12]
34002694:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
34002698:	2e02      	cmp	r6, #2
3400269a:	d806      	bhi.n	340026aa <HAL_NVIC_SetPriority+0x36>
3400269c:	b157      	cbz	r7, 340026b4 <HAL_NVIC_SetPriority+0x40>
3400269e:	f44f 7181 	mov.w	r1, #258	@ 0x102
340026a2:	4820      	ldr	r0, [pc, #128]	@ (34002724 <HAL_NVIC_SetPriority+0xb0>)
340026a4:	f7fe fbae 	bl	34000e04 <assert_failed>
340026a8:	e004      	b.n	340026b4 <HAL_NVIC_SetPriority+0x40>
340026aa:	2301      	movs	r3, #1
340026ac:	1ef2      	subs	r2, r6, #3
340026ae:	4093      	lsls	r3, r2
340026b0:	42bb      	cmp	r3, r7
340026b2:	d9f4      	bls.n	3400269e <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
340026b4:	2c0f      	cmp	r4, #15
340026b6:	f1c6 0807 	rsb	r8, r6, #7
340026ba:	d804      	bhi.n	340026c6 <HAL_NVIC_SetPriority+0x52>
340026bc:	2301      	movs	r3, #1
340026be:	fa03 f308 	lsl.w	r3, r3, r8
340026c2:	42a3      	cmp	r3, r4
340026c4:	d804      	bhi.n	340026d0 <HAL_NVIC_SetPriority+0x5c>
340026c6:	f240 1103 	movw	r1, #259	@ 0x103
340026ca:	4816      	ldr	r0, [pc, #88]	@ (34002724 <HAL_NVIC_SetPriority+0xb0>)
340026cc:	f7fe fb9a 	bl	34000e04 <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
340026d0:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
340026d4:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
340026d8:	bf28      	it	cs
340026da:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340026de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
340026e2:	2b06      	cmp	r3, #6
340026e4:	f1a6 0603 	sub.w	r6, r6, #3
340026e8:	bf98      	it	ls
340026ea:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340026ec:	fa02 f808 	lsl.w	r8, r2, r8
340026f0:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
340026f4:	40b2      	lsls	r2, r6
340026f6:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340026fa:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
340026fc:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
340026fe:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002702:	bfac      	ite	ge
34002704:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002708:	4a08      	ldrlt	r2, [pc, #32]	@ (3400272c <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400270a:	ea4f 1303 	mov.w	r3, r3, lsl #4
3400270e:	b2db      	uxtb	r3, r3
34002710:	bfab      	itete	ge
34002712:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002716:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400271a:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400271e:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
34002720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34002724:	34038904 	.word	0x34038904
34002728:	e000ed00 	.word	0xe000ed00
3400272c:	e000ed14 	.word	0xe000ed14

34002730 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34002730:	3801      	subs	r0, #1
34002732:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
34002736:	d20b      	bcs.n	34002750 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002738:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400273c:	21f0      	movs	r1, #240	@ 0xf0
3400273e:	4a05      	ldr	r2, [pc, #20]	@ (34002754 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34002740:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34002742:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34002746:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34002748:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
3400274a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
3400274c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
3400274e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
34002750:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
34002752:	4770      	bx	lr
34002754:	e000ed00 	.word	0xe000ed00

34002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34002758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
3400275c:	4b48      	ldr	r3, [pc, #288]	@ (34002880 <HAL_GPIO_Init+0x128>)
{
3400275e:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34002760:	4298      	cmp	r0, r3
{
34002762:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34002764:	d054      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
34002766:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400276a:	4298      	cmp	r0, r3
3400276c:	d050      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
3400276e:	4b45      	ldr	r3, [pc, #276]	@ (34002884 <HAL_GPIO_Init+0x12c>)
34002770:	4298      	cmp	r0, r3
34002772:	d04d      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
34002774:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002778:	4298      	cmp	r0, r3
3400277a:	d049      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
3400277c:	4b42      	ldr	r3, [pc, #264]	@ (34002888 <HAL_GPIO_Init+0x130>)
3400277e:	4298      	cmp	r0, r3
34002780:	d046      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
34002782:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002786:	4298      	cmp	r0, r3
34002788:	d042      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
3400278a:	4b40      	ldr	r3, [pc, #256]	@ (3400288c <HAL_GPIO_Init+0x134>)
3400278c:	4298      	cmp	r0, r3
3400278e:	d03f      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
34002790:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002794:	4298      	cmp	r0, r3
34002796:	d03b      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
34002798:	4b3d      	ldr	r3, [pc, #244]	@ (34002890 <HAL_GPIO_Init+0x138>)
3400279a:	4298      	cmp	r0, r3
3400279c:	d038      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
3400279e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340027a2:	4298      	cmp	r0, r3
340027a4:	d034      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027a6:	4b3b      	ldr	r3, [pc, #236]	@ (34002894 <HAL_GPIO_Init+0x13c>)
340027a8:	4298      	cmp	r0, r3
340027aa:	d031      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027ac:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340027b0:	4298      	cmp	r0, r3
340027b2:	d02d      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027b4:	4b38      	ldr	r3, [pc, #224]	@ (34002898 <HAL_GPIO_Init+0x140>)
340027b6:	4298      	cmp	r0, r3
340027b8:	d02a      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027ba:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340027be:	4298      	cmp	r0, r3
340027c0:	d026      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027c2:	4b36      	ldr	r3, [pc, #216]	@ (3400289c <HAL_GPIO_Init+0x144>)
340027c4:	4298      	cmp	r0, r3
340027c6:	d023      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027c8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340027cc:	4298      	cmp	r0, r3
340027ce:	d01f      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027d0:	4b33      	ldr	r3, [pc, #204]	@ (340028a0 <HAL_GPIO_Init+0x148>)
340027d2:	4298      	cmp	r0, r3
340027d4:	d01c      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027d6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340027da:	4298      	cmp	r0, r3
340027dc:	d018      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027de:	4b31      	ldr	r3, [pc, #196]	@ (340028a4 <HAL_GPIO_Init+0x14c>)
340027e0:	4298      	cmp	r0, r3
340027e2:	d015      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027e4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340027e8:	4298      	cmp	r0, r3
340027ea:	d011      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027ec:	4b2e      	ldr	r3, [pc, #184]	@ (340028a8 <HAL_GPIO_Init+0x150>)
340027ee:	4298      	cmp	r0, r3
340027f0:	d00e      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027f2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340027f6:	4298      	cmp	r0, r3
340027f8:	d00a      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
340027fa:	4b2c      	ldr	r3, [pc, #176]	@ (340028ac <HAL_GPIO_Init+0x154>)
340027fc:	4298      	cmp	r0, r3
340027fe:	d007      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
34002800:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002804:	4298      	cmp	r0, r3
34002806:	d003      	beq.n	34002810 <HAL_GPIO_Init+0xb8>
34002808:	21ad      	movs	r1, #173	@ 0xad
3400280a:	4829      	ldr	r0, [pc, #164]	@ (340028b0 <HAL_GPIO_Init+0x158>)
3400280c:	f7fe fafa 	bl	34000e04 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34002810:	6833      	ldr	r3, [r6, #0]
34002812:	b29a      	uxth	r2, r3
34002814:	b112      	cbz	r2, 3400281c <HAL_GPIO_Init+0xc4>
34002816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400281a:	d303      	bcc.n	34002824 <HAL_GPIO_Init+0xcc>
3400281c:	21ae      	movs	r1, #174	@ 0xae
3400281e:	4824      	ldr	r0, [pc, #144]	@ (340028b0 <HAL_GPIO_Init+0x158>)
34002820:	f7fe faf0 	bl	34000e04 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
34002824:	6873      	ldr	r3, [r6, #4]
34002826:	2b01      	cmp	r3, #1
34002828:	d914      	bls.n	34002854 <HAL_GPIO_Init+0xfc>
3400282a:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
3400282e:	d011      	beq.n	34002854 <HAL_GPIO_Init+0xfc>
34002830:	d81d      	bhi.n	3400286e <HAL_GPIO_Init+0x116>
34002832:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34002836:	d00d      	beq.n	34002854 <HAL_GPIO_Init+0xfc>
34002838:	d809      	bhi.n	3400284e <HAL_GPIO_Init+0xf6>
3400283a:	2b03      	cmp	r3, #3
3400283c:	d90a      	bls.n	34002854 <HAL_GPIO_Init+0xfc>
3400283e:	3b11      	subs	r3, #17
34002840:	2b01      	cmp	r3, #1
34002842:	d907      	bls.n	34002854 <HAL_GPIO_Init+0xfc>
34002844:	21af      	movs	r1, #175	@ 0xaf
34002846:	481a      	ldr	r0, [pc, #104]	@ (340028b0 <HAL_GPIO_Init+0x158>)
34002848:	f7fe fadc 	bl	34000e04 <assert_failed>
3400284c:	e002      	b.n	34002854 <HAL_GPIO_Init+0xfc>
3400284e:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
34002852:	d1f7      	bne.n	34002844 <HAL_GPIO_Init+0xec>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34002854:	f04f 0900 	mov.w	r9, #0
34002858:	464f      	mov	r7, r9
3400285a:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 34002880 <HAL_GPIO_Init+0x128>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
3400285e:	f8df a054 	ldr.w	sl, [pc, #84]	@ 340028b4 <HAL_GPIO_Init+0x15c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34002862:	6835      	ldr	r5, [r6, #0]
34002864:	fa35 f307 	lsrs.w	r3, r5, r7
34002868:	d126      	bne.n	340028b8 <HAL_GPIO_Init+0x160>
      }
    }

    position++;
  }
}
3400286a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400286e:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
34002872:	d0ef      	beq.n	34002854 <HAL_GPIO_Init+0xfc>
34002874:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34002878:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
3400287c:	e7e9      	b.n	34002852 <HAL_GPIO_Init+0xfa>
3400287e:	bf00      	nop
34002880:	56020000 	.word	0x56020000
34002884:	56020400 	.word	0x56020400
34002888:	56020800 	.word	0x56020800
3400288c:	56020c00 	.word	0x56020c00
34002890:	56021000 	.word	0x56021000
34002894:	56021400 	.word	0x56021400
34002898:	56021800 	.word	0x56021800
3400289c:	56021c00 	.word	0x56021c00
340028a0:	56023400 	.word	0x56023400
340028a4:	56023800 	.word	0x56023800
340028a8:	56023c00 	.word	0x56023c00
340028ac:	56024000 	.word	0x56024000
340028b0:	340389aa 	.word	0x340389aa
340028b4:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
340028b8:	f04f 0b01 	mov.w	fp, #1
340028bc:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
340028c0:	ea1b 0505 	ands.w	r5, fp, r5
340028c4:	f000 8130 	beq.w	34002b28 <HAL_GPIO_Init+0x3d0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
340028c8:	6873      	ldr	r3, [r6, #4]
340028ca:	f003 0303 	and.w	r3, r3, #3
340028ce:	3b01      	subs	r3, #1
340028d0:	2b01      	cmp	r3, #1
340028d2:	d81a      	bhi.n	3400290a <HAL_GPIO_Init+0x1b2>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
340028d4:	68f3      	ldr	r3, [r6, #12]
340028d6:	2b03      	cmp	r3, #3
340028d8:	d903      	bls.n	340028e2 <HAL_GPIO_Init+0x18a>
340028da:	21be      	movs	r1, #190	@ 0xbe
340028dc:	489e      	ldr	r0, [pc, #632]	@ (34002b58 <HAL_GPIO_Init+0x400>)
340028de:	f7fe fa91 	bl	34000e04 <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340028e2:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
340028e4:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340028e6:	fa03 f309 	lsl.w	r3, r3, r9
340028ea:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340028ee:	68f3      	ldr	r3, [r6, #12]
340028f0:	fa03 f309 	lsl.w	r3, r3, r9
340028f4:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
340028f6:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
340028f8:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
340028fa:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
340028fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34002900:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34002904:	40bb      	lsls	r3, r7
34002906:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
34002908:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
3400290a:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
3400290e:	f003 0303 	and.w	r3, r3, #3
34002912:	2b03      	cmp	r3, #3
34002914:	d102      	bne.n	3400291c <HAL_GPIO_Init+0x1c4>
34002916:	2a01      	cmp	r2, #1
34002918:	f000 8082 	beq.w	34002a20 <HAL_GPIO_Init+0x2c8>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
3400291c:	2a02      	cmp	r2, #2
3400291e:	d903      	bls.n	34002928 <HAL_GPIO_Init+0x1d0>
34002920:	21d1      	movs	r1, #209	@ 0xd1
34002922:	488d      	ldr	r0, [pc, #564]	@ (34002b58 <HAL_GPIO_Init+0x400>)
34002924:	f7fe fa6e 	bl	34000e04 <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34002928:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
3400292a:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
3400292c:	fa03 f309 	lsl.w	r3, r3, r9
34002930:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34002934:	68b3      	ldr	r3, [r6, #8]
34002936:	fa03 f309 	lsl.w	r3, r3, r9
3400293a:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
3400293c:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
3400293e:	6873      	ldr	r3, [r6, #4]
34002940:	f003 0303 	and.w	r3, r3, #3
34002944:	2b02      	cmp	r3, #2
34002946:	d16b      	bne.n	34002a20 <HAL_GPIO_Init+0x2c8>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34002948:	4544      	cmp	r4, r8
3400294a:	d053      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
3400294c:	4b83      	ldr	r3, [pc, #524]	@ (34002b5c <HAL_GPIO_Init+0x404>)
3400294e:	429c      	cmp	r4, r3
34002950:	d050      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
34002952:	4b83      	ldr	r3, [pc, #524]	@ (34002b60 <HAL_GPIO_Init+0x408>)
34002954:	429c      	cmp	r4, r3
34002956:	d04d      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
34002958:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400295c:	429c      	cmp	r4, r3
3400295e:	d049      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
34002960:	4b80      	ldr	r3, [pc, #512]	@ (34002b64 <HAL_GPIO_Init+0x40c>)
34002962:	429c      	cmp	r4, r3
34002964:	d046      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
34002966:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3400296a:	429c      	cmp	r4, r3
3400296c:	d042      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
3400296e:	4b7e      	ldr	r3, [pc, #504]	@ (34002b68 <HAL_GPIO_Init+0x410>)
34002970:	429c      	cmp	r4, r3
34002972:	d03f      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
34002974:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002978:	429c      	cmp	r4, r3
3400297a:	d03b      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
3400297c:	4b7b      	ldr	r3, [pc, #492]	@ (34002b6c <HAL_GPIO_Init+0x414>)
3400297e:	429c      	cmp	r4, r3
34002980:	d038      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
34002982:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002986:	429c      	cmp	r4, r3
34002988:	d034      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
3400298a:	4b79      	ldr	r3, [pc, #484]	@ (34002b70 <HAL_GPIO_Init+0x418>)
3400298c:	429c      	cmp	r4, r3
3400298e:	d031      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
34002990:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34002994:	429c      	cmp	r4, r3
34002996:	d02d      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
34002998:	4b76      	ldr	r3, [pc, #472]	@ (34002b74 <HAL_GPIO_Init+0x41c>)
3400299a:	429c      	cmp	r4, r3
3400299c:	d02a      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
3400299e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340029a2:	429c      	cmp	r4, r3
340029a4:	d026      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029a6:	4b74      	ldr	r3, [pc, #464]	@ (34002b78 <HAL_GPIO_Init+0x420>)
340029a8:	429c      	cmp	r4, r3
340029aa:	d023      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029ac:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340029b0:	429c      	cmp	r4, r3
340029b2:	d01f      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029b4:	4b71      	ldr	r3, [pc, #452]	@ (34002b7c <HAL_GPIO_Init+0x424>)
340029b6:	429c      	cmp	r4, r3
340029b8:	d01c      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029ba:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340029be:	429c      	cmp	r4, r3
340029c0:	d018      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029c2:	4b6f      	ldr	r3, [pc, #444]	@ (34002b80 <HAL_GPIO_Init+0x428>)
340029c4:	429c      	cmp	r4, r3
340029c6:	d015      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029c8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340029cc:	429c      	cmp	r4, r3
340029ce:	d011      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029d0:	4b6c      	ldr	r3, [pc, #432]	@ (34002b84 <HAL_GPIO_Init+0x42c>)
340029d2:	429c      	cmp	r4, r3
340029d4:	d00e      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029d6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340029da:	429c      	cmp	r4, r3
340029dc:	d00a      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029de:	4b6a      	ldr	r3, [pc, #424]	@ (34002b88 <HAL_GPIO_Init+0x430>)
340029e0:	429c      	cmp	r4, r3
340029e2:	d007      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029e4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340029e8:	429c      	cmp	r4, r3
340029ea:	d003      	beq.n	340029f4 <HAL_GPIO_Init+0x29c>
340029ec:	21de      	movs	r1, #222	@ 0xde
340029ee:	485a      	ldr	r0, [pc, #360]	@ (34002b58 <HAL_GPIO_Init+0x400>)
340029f0:	f7fe fa08 	bl	34000e04 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
340029f4:	6933      	ldr	r3, [r6, #16]
340029f6:	2b0f      	cmp	r3, #15
340029f8:	d903      	bls.n	34002a02 <HAL_GPIO_Init+0x2aa>
340029fa:	21df      	movs	r1, #223	@ 0xdf
340029fc:	4856      	ldr	r0, [pc, #344]	@ (34002b58 <HAL_GPIO_Init+0x400>)
340029fe:	f7fe fa01 	bl	34000e04 <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34002a02:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
34002a04:	08fa      	lsrs	r2, r7, #3
34002a06:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34002a0a:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
34002a0e:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34002a10:	0089      	lsls	r1, r1, #2
34002a12:	408b      	lsls	r3, r1
34002a14:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34002a18:	6933      	ldr	r3, [r6, #16]
34002a1a:	408b      	lsls	r3, r1
34002a1c:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
34002a1e:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34002a20:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
34002a22:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34002a24:	fa03 f209 	lsl.w	r2, r3, r9
34002a28:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34002a2c:	6872      	ldr	r2, [r6, #4]
34002a2e:	ea02 0103 	and.w	r1, r2, r3
34002a32:	fa01 f109 	lsl.w	r1, r1, r9
34002a36:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34002a38:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
34002a3c:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34002a3e:	d073      	beq.n	34002b28 <HAL_GPIO_Init+0x3d0>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34002a40:	f04f 0e0f 	mov.w	lr, #15
34002a44:	f027 0103 	bic.w	r1, r7, #3
34002a48:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
34002a4c:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
34002a50:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
34002a54:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34002a58:	4098      	lsls	r0, r3
34002a5a:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34002a5e:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34002a60:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34002a64:	d064      	beq.n	34002b30 <HAL_GPIO_Init+0x3d8>
34002a66:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 34002b60 <HAL_GPIO_Init+0x408>
34002a6a:	4574      	cmp	r4, lr
34002a6c:	d062      	beq.n	34002b34 <HAL_GPIO_Init+0x3dc>
34002a6e:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
34002a72:	4574      	cmp	r4, lr
34002a74:	d060      	beq.n	34002b38 <HAL_GPIO_Init+0x3e0>
34002a76:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
34002a7a:	4574      	cmp	r4, lr
34002a7c:	d020      	beq.n	34002ac0 <HAL_GPIO_Init+0x368>
34002a7e:	4b3b      	ldr	r3, [pc, #236]	@ (34002b6c <HAL_GPIO_Init+0x414>)
34002a80:	429c      	cmp	r4, r3
34002a82:	d05b      	beq.n	34002b3c <HAL_GPIO_Init+0x3e4>
34002a84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34002a88:	429c      	cmp	r4, r3
34002a8a:	d059      	beq.n	34002b40 <HAL_GPIO_Init+0x3e8>
34002a8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34002a90:	429c      	cmp	r4, r3
34002a92:	d057      	beq.n	34002b44 <HAL_GPIO_Init+0x3ec>
34002a94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34002a98:	429c      	cmp	r4, r3
34002a9a:	d055      	beq.n	34002b48 <HAL_GPIO_Init+0x3f0>
34002a9c:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34002aa0:	429c      	cmp	r4, r3
34002aa2:	d053      	beq.n	34002b4c <HAL_GPIO_Init+0x3f4>
34002aa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34002aa8:	429c      	cmp	r4, r3
34002aaa:	d051      	beq.n	34002b50 <HAL_GPIO_Init+0x3f8>
34002aac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34002ab0:	429c      	cmp	r4, r3
34002ab2:	d04f      	beq.n	34002b54 <HAL_GPIO_Init+0x3fc>
34002ab4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34002ab8:	429c      	cmp	r4, r3
34002aba:	bf14      	ite	ne
34002abc:	2310      	movne	r3, #16
34002abe:	230b      	moveq	r3, #11
34002ac0:	4083      	lsls	r3, r0
34002ac2:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
34002ac6:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
34002ac8:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
34002acc:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
34002ad0:	ea23 0105 	bic.w	r1, r3, r5
34002ad4:	ea43 0305 	orr.w	r3, r3, r5
34002ad8:	bf08      	it	eq
34002ada:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
34002adc:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
34002ae0:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
34002ae4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
34002ae8:	ea23 0105 	bic.w	r1, r3, r5
34002aec:	ea43 0305 	orr.w	r3, r3, r5
34002af0:	bf08      	it	eq
34002af2:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
34002af4:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
34002af8:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
34002afc:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
34002b00:	ea23 0105 	bic.w	r1, r3, r5
34002b04:	ea43 0305 	orr.w	r3, r3, r5
34002b08:	bf08      	it	eq
34002b0a:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
34002b0c:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
34002b10:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
34002b14:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
34002b18:	ea23 0105 	bic.w	r1, r3, r5
34002b1c:	ea45 0503 	orr.w	r5, r5, r3
34002b20:	bf08      	it	eq
34002b22:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
34002b24:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
34002b28:	3701      	adds	r7, #1
34002b2a:	f109 0902 	add.w	r9, r9, #2
34002b2e:	e698      	b.n	34002862 <HAL_GPIO_Init+0x10a>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34002b30:	2300      	movs	r3, #0
34002b32:	e7c5      	b.n	34002ac0 <HAL_GPIO_Init+0x368>
34002b34:	2301      	movs	r3, #1
34002b36:	e7c3      	b.n	34002ac0 <HAL_GPIO_Init+0x368>
34002b38:	2302      	movs	r3, #2
34002b3a:	e7c1      	b.n	34002ac0 <HAL_GPIO_Init+0x368>
34002b3c:	2304      	movs	r3, #4
34002b3e:	e7bf      	b.n	34002ac0 <HAL_GPIO_Init+0x368>
34002b40:	2305      	movs	r3, #5
34002b42:	e7bd      	b.n	34002ac0 <HAL_GPIO_Init+0x368>
34002b44:	2306      	movs	r3, #6
34002b46:	e7bb      	b.n	34002ac0 <HAL_GPIO_Init+0x368>
34002b48:	2307      	movs	r3, #7
34002b4a:	e7b9      	b.n	34002ac0 <HAL_GPIO_Init+0x368>
34002b4c:	2308      	movs	r3, #8
34002b4e:	e7b7      	b.n	34002ac0 <HAL_GPIO_Init+0x368>
34002b50:	2309      	movs	r3, #9
34002b52:	e7b5      	b.n	34002ac0 <HAL_GPIO_Init+0x368>
34002b54:	230a      	movs	r3, #10
34002b56:	e7b3      	b.n	34002ac0 <HAL_GPIO_Init+0x368>
34002b58:	340389aa 	.word	0x340389aa
34002b5c:	46020000 	.word	0x46020000
34002b60:	56020400 	.word	0x56020400
34002b64:	56020800 	.word	0x56020800
34002b68:	56020c00 	.word	0x56020c00
34002b6c:	56021000 	.word	0x56021000
34002b70:	56021400 	.word	0x56021400
34002b74:	56021800 	.word	0x56021800
34002b78:	56021c00 	.word	0x56021c00
34002b7c:	56023400 	.word	0x56023400
34002b80:	56023800 	.word	0x56023800
34002b84:	56023c00 	.word	0x56023c00
34002b88:	56024000 	.word	0x56024000

34002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34002b8c:	b570      	push	{r4, r5, r6, lr}
34002b8e:	4605      	mov	r5, r0
34002b90:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34002b92:	460c      	mov	r4, r1
34002b94:	b921      	cbnz	r1, 34002ba0 <HAL_GPIO_WritePin+0x14>
34002b96:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
34002b9a:	4808      	ldr	r0, [pc, #32]	@ (34002bbc <HAL_GPIO_WritePin+0x30>)
34002b9c:	f7fe f932 	bl	34000e04 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34002ba0:	2e01      	cmp	r6, #1
34002ba2:	d906      	bls.n	34002bb2 <HAL_GPIO_WritePin+0x26>
34002ba4:	f240 11a1 	movw	r1, #417	@ 0x1a1
34002ba8:	4804      	ldr	r0, [pc, #16]	@ (34002bbc <HAL_GPIO_WritePin+0x30>)
34002baa:	f7fe f92b 	bl	34000e04 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34002bae:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34002bb0:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
34002bb2:	2e00      	cmp	r6, #0
34002bb4:	d1fb      	bne.n	34002bae <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34002bb6:	62ac      	str	r4, [r5, #40]	@ 0x28
}
34002bb8:	e7fa      	b.n	34002bb0 <HAL_GPIO_WritePin+0x24>
34002bba:	bf00      	nop
34002bbc:	340389aa 	.word	0x340389aa

34002bc0 <HAL_PWREx_ConfigVddIORange>:
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34002bc0:	2804      	cmp	r0, #4
{
34002bc2:	b538      	push	{r3, r4, r5, lr}
34002bc4:	4605      	mov	r5, r0
34002bc6:	460c      	mov	r4, r1
  assert_param(IS_PWR_VDDIO(VddIOPort));
34002bc8:	d912      	bls.n	34002bf0 <HAL_PWREx_ConfigVddIORange+0x30>
34002bca:	f240 316a 	movw	r1, #874	@ 0x36a
34002bce:	481d      	ldr	r0, [pc, #116]	@ (34002c44 <HAL_PWREx_ConfigVddIORange+0x84>)
34002bd0:	f7fe f918 	bl	34000e04 <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34002bd4:	2c01      	cmp	r4, #1
34002bd6:	d915      	bls.n	34002c04 <HAL_PWREx_ConfigVddIORange+0x44>
34002bd8:	f240 316b 	movw	r1, #875	@ 0x36b
34002bdc:	4819      	ldr	r0, [pc, #100]	@ (34002c44 <HAL_PWREx_ConfigVddIORange+0x84>)
34002bde:	f7fe f911 	bl	34000e04 <assert_failed>

  switch (VddIOPort)
34002be2:	2d04      	cmp	r5, #4
34002be4:	d80e      	bhi.n	34002c04 <HAL_PWREx_ConfigVddIORange+0x44>
34002be6:	e8df f005 	tbb	[pc, r5]
34002bea:	0e06      	.short	0x0e06
34002bec:	1c15      	.short	0x1c15
34002bee:	24          	.byte	0x24
34002bef:	00          	.byte	0x00
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34002bf0:	2901      	cmp	r1, #1
34002bf2:	d9f6      	bls.n	34002be2 <HAL_PWREx_ConfigVddIORange+0x22>
34002bf4:	e7f0      	b.n	34002bd8 <HAL_PWREx_ConfigVddIORange+0x18>
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34002bf6:	4a14      	ldr	r2, [pc, #80]	@ (34002c48 <HAL_PWREx_ConfigVddIORange+0x88>)
34002bf8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34002bfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34002bfe:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
      break;

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34002c02:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;

    default:
      break;
  }
}
34002c04:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34002c06:	4a10      	ldr	r2, [pc, #64]	@ (34002c48 <HAL_PWREx_ConfigVddIORange+0x88>)
34002c08:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34002c0a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
34002c0e:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
34002c12:	e7f6      	b.n	34002c02 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34002c14:	4a0c      	ldr	r2, [pc, #48]	@ (34002c48 <HAL_PWREx_ConfigVddIORange+0x88>)
34002c16:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34002c18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
34002c1c:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
34002c20:	e7ef      	b.n	34002c02 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34002c22:	4a09      	ldr	r2, [pc, #36]	@ (34002c48 <HAL_PWREx_ConfigVddIORange+0x88>)
34002c24:	6b53      	ldr	r3, [r2, #52]	@ 0x34
34002c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34002c2a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34002c2e:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
34002c30:	e7e8      	b.n	34002c04 <HAL_PWREx_ConfigVddIORange+0x44>
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34002c32:	4a05      	ldr	r2, [pc, #20]	@ (34002c48 <HAL_PWREx_ConfigVddIORange+0x88>)
34002c34:	6b93      	ldr	r3, [r2, #56]	@ 0x38
34002c36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34002c3a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34002c3e:	6393      	str	r3, [r2, #56]	@ 0x38
}
34002c40:	e7e0      	b.n	34002c04 <HAL_PWREx_ConfigVddIORange+0x44>
34002c42:	bf00      	nop
34002c44:	34038a4e 	.word	0x34038a4e
34002c48:	56024800 	.word	0x56024800

34002c4c <HAL_PWREx_EnableVddIO2>:
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34002c4c:	4a02      	ldr	r2, [pc, #8]	@ (34002c58 <HAL_PWREx_EnableVddIO2+0xc>)
34002c4e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34002c54:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34002c56:	4770      	bx	lr
34002c58:	56024800 	.word	0x56024800

34002c5c <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34002c5c:	4a02      	ldr	r2, [pc, #8]	@ (34002c68 <HAL_PWREx_EnableVddIO3+0xc>)
34002c5e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34002c60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34002c64:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34002c66:	4770      	bx	lr
34002c68:	56024800 	.word	0x56024800

34002c6c <HAL_RAMCFG_EnableAXISRAM>:
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34002c6c:	6803      	ldr	r3, [r0, #0]
34002c6e:	4a1c      	ldr	r2, [pc, #112]	@ (34002ce0 <HAL_RAMCFG_EnableAXISRAM+0x74>)
{
34002c70:	b510      	push	{r4, lr}
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34002c72:	4293      	cmp	r3, r2
{
34002c74:	4604      	mov	r4, r0
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34002c76:	d02c      	beq.n	34002cd2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34002c78:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34002c7c:	4293      	cmp	r3, r2
34002c7e:	d028      	beq.n	34002cd2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34002c80:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34002c84:	3280      	adds	r2, #128	@ 0x80
34002c86:	4293      	cmp	r3, r2
34002c88:	d023      	beq.n	34002cd2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34002c8a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34002c8e:	4293      	cmp	r3, r2
34002c90:	d01f      	beq.n	34002cd2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34002c92:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34002c96:	3280      	adds	r2, #128	@ 0x80
34002c98:	4293      	cmp	r3, r2
34002c9a:	d01a      	beq.n	34002cd2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34002c9c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34002ca0:	4293      	cmp	r3, r2
34002ca2:	d016      	beq.n	34002cd2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34002ca4:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34002ca8:	3280      	adds	r2, #128	@ 0x80
34002caa:	4293      	cmp	r3, r2
34002cac:	d011      	beq.n	34002cd2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34002cae:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34002cb2:	4293      	cmp	r3, r2
34002cb4:	d00d      	beq.n	34002cd2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34002cb6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34002cba:	3280      	adds	r2, #128	@ 0x80
34002cbc:	4293      	cmp	r3, r2
34002cbe:	d008      	beq.n	34002cd2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34002cc0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34002cc4:	4293      	cmp	r3, r2
34002cc6:	d004      	beq.n	34002cd2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34002cc8:	f240 4107 	movw	r1, #1031	@ 0x407
34002ccc:	4805      	ldr	r0, [pc, #20]	@ (34002ce4 <HAL_RAMCFG_EnableAXISRAM+0x78>)
34002cce:	f7fe f899 	bl	34000e04 <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
34002cd2:	6822      	ldr	r2, [r4, #0]
34002cd4:	6813      	ldr	r3, [r2, #0]
34002cd6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34002cda:	6013      	str	r3, [r2, #0]
}
34002cdc:	bd10      	pop	{r4, pc}
34002cde:	bf00      	nop
34002ce0:	52023080 	.word	0x52023080
34002ce4:	34038af4 	.word	0x34038af4

34002ce8 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34002ce8:	4b02      	ldr	r3, [pc, #8]	@ (34002cf4 <LL_RCC_HSI_IsReady+0xc>)
34002cea:	6858      	ldr	r0, [r3, #4]
}
34002cec:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34002cf0:	4770      	bx	lr
34002cf2:	bf00      	nop
34002cf4:	56028000 	.word	0x56028000

34002cf8 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34002cf8:	4b02      	ldr	r3, [pc, #8]	@ (34002d04 <LL_RCC_MSI_IsReady+0xc>)
34002cfa:	6858      	ldr	r0, [r3, #4]
}
34002cfc:	f3c0 0080 	ubfx	r0, r0, #2, #1
34002d00:	4770      	bx	lr
34002d02:	bf00      	nop
34002d04:	56028000 	.word	0x56028000

34002d08 <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34002d08:	4b02      	ldr	r3, [pc, #8]	@ (34002d14 <LL_RCC_PLL1_IsReady+0xc>)
34002d0a:	6858      	ldr	r0, [r3, #4]
}
34002d0c:	f3c0 2000 	ubfx	r0, r0, #8, #1
34002d10:	4770      	bx	lr
34002d12:	bf00      	nop
34002d14:	56028000 	.word	0x56028000

34002d18 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34002d18:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34002d1a:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34002d1c:	4d1b      	ldr	r5, [pc, #108]	@ (34002d8c <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34002d1e:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34002d20:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34002d22:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34002d24:	021b      	lsls	r3, r3, #8
34002d26:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
34002d2a:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34002d2c:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
34002d30:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34002d34:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34002d36:	429a      	cmp	r2, r3
34002d38:	d126      	bne.n	34002d88 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34002d3a:	4b15      	ldr	r3, [pc, #84]	@ (34002d90 <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34002d3c:	68ca      	ldr	r2, [r1, #12]
34002d3e:	58e3      	ldr	r3, [r4, r3]
34002d40:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34002d44:	4293      	cmp	r3, r2
34002d46:	d11f      	bne.n	34002d88 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34002d48:	4b12      	ldr	r3, [pc, #72]	@ (34002d94 <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34002d4a:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34002d4c:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
34002d50:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34002d52:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34002d56:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34002d5a:	429a      	cmp	r2, r3
34002d5c:	d114      	bne.n	34002d88 <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34002d5e:	4b0e      	ldr	r3, [pc, #56]	@ (34002d98 <RCC_PLL_IsNewConfig+0x80>)
34002d60:	685a      	ldr	r2, [r3, #4]
34002d62:	f44f 7380 	mov.w	r3, #256	@ 0x100
34002d66:	fa03 f000 	lsl.w	r0, r3, r0
34002d6a:	4390      	bics	r0, r2
34002d6c:	d00a      	beq.n	34002d84 <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34002d6e:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
34002d70:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
34002d74:	bf0c      	ite	eq
34002d76:	2301      	moveq	r3, #1
34002d78:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34002d7a:	6808      	ldr	r0, [r1, #0]
34002d7c:	1ac0      	subs	r0, r0, r3
34002d7e:	bf18      	it	ne
34002d80:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
34002d82:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
34002d84:	2302      	movs	r3, #2
34002d86:	e7f8      	b.n	34002d7a <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
34002d88:	2001      	movs	r0, #1
  return ret;
34002d8a:	e7fa      	b.n	34002d82 <RCC_PLL_IsNewConfig+0x6a>
34002d8c:	56028080 	.word	0x56028080
34002d90:	56028084 	.word	0x56028084
34002d94:	56028088 	.word	0x56028088
34002d98:	56028000 	.word	0x56028000

34002d9c <RCC_PLL_Enable>:
{
34002d9c:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34002d9e:	f44f 7480 	mov.w	r4, #256	@ 0x100
34002da2:	4e09      	ldr	r6, [pc, #36]	@ (34002dc8 <RCC_PLL_Enable+0x2c>)
34002da4:	4084      	lsls	r4, r0
34002da6:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
34002daa:	f7ff fb17 	bl	340023dc <HAL_GetTick>
34002dae:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34002db0:	6873      	ldr	r3, [r6, #4]
34002db2:	421c      	tst	r4, r3
34002db4:	d001      	beq.n	34002dba <RCC_PLL_Enable+0x1e>
  return ret;
34002db6:	2000      	movs	r0, #0
}
34002db8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34002dba:	f7ff fb0f 	bl	340023dc <HAL_GetTick>
34002dbe:	1b40      	subs	r0, r0, r5
34002dc0:	2801      	cmp	r0, #1
34002dc2:	d9f5      	bls.n	34002db0 <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
34002dc4:	2003      	movs	r0, #3
34002dc6:	e7f7      	b.n	34002db8 <RCC_PLL_Enable+0x1c>
34002dc8:	56028000 	.word	0x56028000

34002dcc <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
34002dcc:	680b      	ldr	r3, [r1, #0]
{
34002dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
34002dd2:	2b02      	cmp	r3, #2
{
34002dd4:	4681      	mov	r9, r0
34002dd6:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34002dd8:	4f83      	ldr	r7, [pc, #524]	@ (34002fe8 <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34002dda:	4e84      	ldr	r6, [pc, #528]	@ (34002fec <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34002ddc:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
34002de0:	f040 8099 	bne.w	34002f16 <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34002de4:	684b      	ldr	r3, [r1, #4]
34002de6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34002dea:	d004      	beq.n	34002df6 <RCC_PLL_Config+0x2a>
34002dec:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
34002df0:	487f      	ldr	r0, [pc, #508]	@ (34002ff0 <RCC_PLL_Config+0x224>)
34002df2:	f7fe f807 	bl	34000e04 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
34002df6:	68eb      	ldr	r3, [r5, #12]
34002df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34002dfc:	d304      	bcc.n	34002e08 <RCC_PLL_Config+0x3c>
34002dfe:	f240 71f9 	movw	r1, #2041	@ 0x7f9
34002e02:	487b      	ldr	r0, [pc, #492]	@ (34002ff0 <RCC_PLL_Config+0x224>)
34002e04:	f7fd fffe 	bl	34000e04 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
34002e08:	68ab      	ldr	r3, [r5, #8]
34002e0a:	3b01      	subs	r3, #1
34002e0c:	2b3e      	cmp	r3, #62	@ 0x3e
34002e0e:	d904      	bls.n	34002e1a <RCC_PLL_Config+0x4e>
34002e10:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34002e14:	4876      	ldr	r0, [pc, #472]	@ (34002ff0 <RCC_PLL_Config+0x224>)
34002e16:	f7fd fff5 	bl	34000e04 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
34002e1a:	f640 12ba 	movw	r2, #2490	@ 0x9ba
34002e1e:	692b      	ldr	r3, [r5, #16]
34002e20:	3b0a      	subs	r3, #10
34002e22:	4293      	cmp	r3, r2
34002e24:	d904      	bls.n	34002e30 <RCC_PLL_Config+0x64>
34002e26:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34002e2a:	4871      	ldr	r0, [pc, #452]	@ (34002ff0 <RCC_PLL_Config+0x224>)
34002e2c:	f7fd ffea 	bl	34000e04 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34002e30:	696b      	ldr	r3, [r5, #20]
34002e32:	3b01      	subs	r3, #1
34002e34:	2b06      	cmp	r3, #6
34002e36:	d904      	bls.n	34002e42 <RCC_PLL_Config+0x76>
34002e38:	f240 71fc 	movw	r1, #2044	@ 0x7fc
34002e3c:	486c      	ldr	r0, [pc, #432]	@ (34002ff0 <RCC_PLL_Config+0x224>)
34002e3e:	f7fd ffe1 	bl	34000e04 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34002e42:	69ab      	ldr	r3, [r5, #24]
34002e44:	3b01      	subs	r3, #1
34002e46:	2b06      	cmp	r3, #6
34002e48:	d904      	bls.n	34002e54 <RCC_PLL_Config+0x88>
34002e4a:	f240 71fd 	movw	r1, #2045	@ 0x7fd
34002e4e:	4868      	ldr	r0, [pc, #416]	@ (34002ff0 <RCC_PLL_Config+0x224>)
34002e50:	f7fd ffd8 	bl	34000e04 <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34002e54:	f44f 7880 	mov.w	r8, #256	@ 0x100
34002e58:	4b66      	ldr	r3, [pc, #408]	@ (34002ff4 <RCC_PLL_Config+0x228>)
34002e5a:	fa08 f809 	lsl.w	r8, r8, r9
34002e5e:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
34002e62:	f7ff fabb 	bl	340023dc <HAL_GetTick>
34002e66:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34002e68:	f8df a194 	ldr.w	sl, [pc, #404]	@ 34003000 <RCC_PLL_Config+0x234>
34002e6c:	f8da 3004 	ldr.w	r3, [sl, #4]
34002e70:	ea38 0303 	bics.w	r3, r8, r3
34002e74:	d040      	beq.n	34002ef8 <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34002e76:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34002e78:	495f      	ldr	r1, [pc, #380]	@ (34002ff8 <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34002e7a:	f043 0304 	orr.w	r3, r3, #4
34002e7e:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34002e80:	59e3      	ldr	r3, [r4, r7]
34002e82:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34002e86:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34002e88:	692b      	ldr	r3, [r5, #16]
34002e8a:	68aa      	ldr	r2, [r5, #8]
34002e8c:	021b      	lsls	r3, r3, #8
34002e8e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
34002e92:	686a      	ldr	r2, [r5, #4]
34002e94:	59e0      	ldr	r0, [r4, r7]
34002e96:	4313      	orrs	r3, r2
34002e98:	4a58      	ldr	r2, [pc, #352]	@ (34002ffc <RCC_PLL_Config+0x230>)
34002e9a:	4002      	ands	r2, r0
34002e9c:	4313      	orrs	r3, r2
34002e9e:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34002ea0:	59a2      	ldr	r2, [r4, r6]
34002ea2:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
34002ea6:	061b      	lsls	r3, r3, #24
34002ea8:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
34002eac:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
34002eb0:	4313      	orrs	r3, r2
34002eb2:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34002eb4:	5863      	ldr	r3, [r4, r1]
34002eb6:	68ea      	ldr	r2, [r5, #12]
34002eb8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
34002ebc:	4313      	orrs	r3, r2
34002ebe:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34002ec0:	59a3      	ldr	r3, [r4, r6]
34002ec2:	f023 0308 	bic.w	r3, r3, #8
34002ec6:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
34002ec8:	68eb      	ldr	r3, [r5, #12]
34002eca:	b11b      	cbz	r3, 34002ed4 <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34002ecc:	59a3      	ldr	r3, [r4, r6]
34002ece:	f043 030a 	orr.w	r3, r3, #10
34002ed2:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34002ed4:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34002ed6:	4d4a      	ldr	r5, [pc, #296]	@ (34003000 <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34002ed8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34002edc:	f043 0301 	orr.w	r3, r3, #1
34002ee0:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34002ee2:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
34002ee6:	f7ff fa79 	bl	340023dc <HAL_GetTick>
34002eea:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34002eec:	686b      	ldr	r3, [r5, #4]
34002eee:	ea18 0f03 	tst.w	r8, r3
34002ef2:	d00a      	beq.n	34002f0a <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
34002ef4:	2000      	movs	r0, #0
34002ef6:	e006      	b.n	34002f06 <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34002ef8:	f7ff fa70 	bl	340023dc <HAL_GetTick>
34002efc:	eba0 0009 	sub.w	r0, r0, r9
34002f00:	2801      	cmp	r0, #1
34002f02:	d9b3      	bls.n	34002e6c <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
34002f04:	2003      	movs	r0, #3
}
34002f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34002f0a:	f7ff fa67 	bl	340023dc <HAL_GetTick>
34002f0e:	1b00      	subs	r0, r0, r4
34002f10:	2801      	cmp	r0, #1
34002f12:	d9eb      	bls.n	34002eec <RCC_PLL_Config+0x120>
34002f14:	e7f6      	b.n	34002f04 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34002f16:	2b03      	cmp	r3, #3
34002f18:	d146      	bne.n	34002fa8 <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34002f1a:	684b      	ldr	r3, [r1, #4]
34002f1c:	b37b      	cbz	r3, 34002f7e <RCC_PLL_Config+0x1b2>
34002f1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34002f22:	d032      	beq.n	34002f8a <RCC_PLL_Config+0x1be>
34002f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34002f28:	d032      	beq.n	34002f90 <RCC_PLL_Config+0x1c4>
34002f2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34002f2e:	d00d      	beq.n	34002f4c <RCC_PLL_Config+0x180>
34002f30:	f640 013d 	movw	r1, #2109	@ 0x83d
34002f34:	482e      	ldr	r0, [pc, #184]	@ (34002ff0 <RCC_PLL_Config+0x224>)
34002f36:	f7fd ff65 	bl	34000e04 <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34002f3a:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
34002f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34002f40:	d026      	beq.n	34002f90 <RCC_PLL_Config+0x1c4>
34002f42:	d803      	bhi.n	34002f4c <RCC_PLL_Config+0x180>
34002f44:	b1db      	cbz	r3, 34002f7e <RCC_PLL_Config+0x1b2>
34002f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34002f4a:	d01e      	beq.n	34002f8a <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34002f4c:	f44f 7680 	mov.w	r6, #256	@ 0x100
34002f50:	4b28      	ldr	r3, [pc, #160]	@ (34002ff4 <RCC_PLL_Config+0x228>)
34002f52:	fa06 f609 	lsl.w	r6, r6, r9
34002f56:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
34002f58:	f7ff fa40 	bl	340023dc <HAL_GetTick>
34002f5c:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34002f5e:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 34003000 <RCC_PLL_Config+0x234>
34002f62:	f8d9 3004 	ldr.w	r3, [r9, #4]
34002f66:	ea36 0303 	bics.w	r3, r6, r3
34002f6a:	d016      	beq.n	34002f9a <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34002f6c:	59e3      	ldr	r3, [r4, r7]
34002f6e:	686a      	ldr	r2, [r5, #4]
34002f70:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
34002f74:	4313      	orrs	r3, r2
34002f76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
34002f7a:	51e3      	str	r3, [r4, r7]
34002f7c:	e7ba      	b.n	34002ef4 <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
34002f7e:	f7ff feb3 	bl	34002ce8 <LL_RCC_HSI_IsReady>
34002f82:	2800      	cmp	r0, #0
34002f84:	d1e2      	bne.n	34002f4c <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
34002f86:	2001      	movs	r0, #1
34002f88:	e7bd      	b.n	34002f06 <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
34002f8a:	f7ff feb5 	bl	34002cf8 <LL_RCC_MSI_IsReady>
34002f8e:	e7f8      	b.n	34002f82 <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34002f90:	4b1b      	ldr	r3, [pc, #108]	@ (34003000 <RCC_PLL_Config+0x234>)
34002f92:	685b      	ldr	r3, [r3, #4]
34002f94:	06db      	lsls	r3, r3, #27
34002f96:	d5f6      	bpl.n	34002f86 <RCC_PLL_Config+0x1ba>
34002f98:	e7d8      	b.n	34002f4c <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34002f9a:	f7ff fa1f 	bl	340023dc <HAL_GetTick>
34002f9e:	eba0 0008 	sub.w	r0, r0, r8
34002fa2:	2801      	cmp	r0, #1
34002fa4:	d9dd      	bls.n	34002f62 <RCC_PLL_Config+0x196>
34002fa6:	e7ad      	b.n	34002f04 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34002fa8:	2b01      	cmp	r3, #1
34002faa:	d1a3      	bne.n	34002ef4 <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34002fac:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34002fb0:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34002fb2:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34002fb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
34002fb8:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34002fba:	4b0e      	ldr	r3, [pc, #56]	@ (34002ff4 <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34002fbc:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 34003000 <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34002fc0:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
34002fc2:	f7ff fa0b 	bl	340023dc <HAL_GetTick>
34002fc6:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34002fc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
34002fcc:	ea35 0303 	bics.w	r3, r5, r3
34002fd0:	d003      	beq.n	34002fda <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34002fd2:	59e3      	ldr	r3, [r4, r7]
34002fd4:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34002fd8:	e7cf      	b.n	34002f7a <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34002fda:	f7ff f9ff 	bl	340023dc <HAL_GetTick>
34002fde:	1b80      	subs	r0, r0, r6
34002fe0:	2801      	cmp	r0, #1
34002fe2:	d9f1      	bls.n	34002fc8 <RCC_PLL_Config+0x1fc>
34002fe4:	e78e      	b.n	34002f04 <RCC_PLL_Config+0x138>
34002fe6:	bf00      	nop
34002fe8:	56028080 	.word	0x56028080
34002fec:	56028088 	.word	0x56028088
34002ff0:	34038b9a 	.word	0x34038b9a
34002ff4:	56029000 	.word	0x56029000
34002ff8:	56028084 	.word	0x56028084
34002ffc:	8c0000ff 	.word	0x8c0000ff
34003000:	56028000 	.word	0x56028000

34003004 <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34003004:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34003008:	b508      	push	{r3, lr}
  switch (PLLSource1)
3400300a:	d02b      	beq.n	34003064 <RCC_IC_CheckPLLSources+0x60>
3400300c:	d80e      	bhi.n	3400302c <RCC_IC_CheckPLLSources+0x28>
3400300e:	b1b8      	cbz	r0, 34003040 <RCC_IC_CheckPLLSources+0x3c>
34003010:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34003014:	d01f      	beq.n	34003056 <RCC_IC_CheckPLLSources+0x52>
34003016:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
34003018:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
3400301c:	d044      	beq.n	340030a8 <RCC_IC_CheckPLLSources+0xa4>
3400301e:	d828      	bhi.n	34003072 <RCC_IC_CheckPLLSources+0x6e>
34003020:	b389      	cbz	r1, 34003086 <RCC_IC_CheckPLLSources+0x82>
34003022:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
34003026:	d038      	beq.n	3400309a <RCC_IC_CheckPLLSources+0x96>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
34003028:	2200      	movs	r2, #0
3400302a:	e034      	b.n	34003096 <RCC_IC_CheckPLLSources+0x92>
  switch (PLLSource1)
3400302c:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34003030:	d1f1      	bne.n	34003016 <RCC_IC_CheckPLLSources+0x12>
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34003032:	4b21      	ldr	r3, [pc, #132]	@ (340030b8 <RCC_IC_CheckPLLSources+0xb4>)
34003034:	685a      	ldr	r2, [r3, #4]
34003036:	0512      	lsls	r2, r2, #20
34003038:	d405      	bmi.n	34003046 <RCC_IC_CheckPLLSources+0x42>
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3400303a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400303e:	e007      	b.n	34003050 <RCC_IC_CheckPLLSources+0x4c>
      if (LL_RCC_PLL1_IsReady() == 0U)
34003040:	f7ff fe62 	bl	34002d08 <LL_RCC_PLL1_IsReady>
34003044:	b108      	cbz	r0, 3400304a <RCC_IC_CheckPLLSources+0x46>
  uint32_t ret = 1U;
34003046:	2201      	movs	r2, #1
34003048:	e7e6      	b.n	34003018 <RCC_IC_CheckPLLSources+0x14>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400304a:	4b1b      	ldr	r3, [pc, #108]	@ (340030b8 <RCC_IC_CheckPLLSources+0xb4>)
3400304c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34003050:	f3c2 62c0 	ubfx	r2, r2, #27, #1
34003054:	e7e0      	b.n	34003018 <RCC_IC_CheckPLLSources+0x14>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34003056:	4b18      	ldr	r3, [pc, #96]	@ (340030b8 <RCC_IC_CheckPLLSources+0xb4>)
34003058:	685a      	ldr	r2, [r3, #4]
3400305a:	0592      	lsls	r2, r2, #22
3400305c:	d4f3      	bmi.n	34003046 <RCC_IC_CheckPLLSources+0x42>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3400305e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34003062:	e7f5      	b.n	34003050 <RCC_IC_CheckPLLSources+0x4c>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34003064:	4b14      	ldr	r3, [pc, #80]	@ (340030b8 <RCC_IC_CheckPLLSources+0xb4>)
34003066:	685a      	ldr	r2, [r3, #4]
34003068:	0550      	lsls	r0, r2, #21
3400306a:	d4ec      	bmi.n	34003046 <RCC_IC_CheckPLLSources+0x42>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400306c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34003070:	e7ee      	b.n	34003050 <RCC_IC_CheckPLLSources+0x4c>
  switch (PLLSource2)
34003072:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
34003076:	d1d7      	bne.n	34003028 <RCC_IC_CheckPLLSources+0x24>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34003078:	4b0f      	ldr	r3, [pc, #60]	@ (340030b8 <RCC_IC_CheckPLLSources+0xb4>)
3400307a:	6859      	ldr	r1, [r3, #4]
3400307c:	0509      	lsls	r1, r1, #20
3400307e:	d40a      	bmi.n	34003096 <RCC_IC_CheckPLLSources+0x92>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34003080:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34003084:	e005      	b.n	34003092 <RCC_IC_CheckPLLSources+0x8e>
      if (LL_RCC_PLL1_IsReady() == 0U)
34003086:	f7ff fe3f 	bl	34002d08 <LL_RCC_PLL1_IsReady>
3400308a:	b920      	cbnz	r0, 34003096 <RCC_IC_CheckPLLSources+0x92>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400308c:	4b0a      	ldr	r3, [pc, #40]	@ (340030b8 <RCC_IC_CheckPLLSources+0xb4>)
3400308e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34003092:	0118      	lsls	r0, r3, #4
34003094:	d5c8      	bpl.n	34003028 <RCC_IC_CheckPLLSources+0x24>
      break;
  }

  return ret;
}
34003096:	4610      	mov	r0, r2
34003098:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3400309a:	4b07      	ldr	r3, [pc, #28]	@ (340030b8 <RCC_IC_CheckPLLSources+0xb4>)
3400309c:	6859      	ldr	r1, [r3, #4]
3400309e:	0589      	lsls	r1, r1, #22
340030a0:	d4f9      	bmi.n	34003096 <RCC_IC_CheckPLLSources+0x92>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340030a6:	e7f4      	b.n	34003092 <RCC_IC_CheckPLLSources+0x8e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340030a8:	4b03      	ldr	r3, [pc, #12]	@ (340030b8 <RCC_IC_CheckPLLSources+0xb4>)
340030aa:	6859      	ldr	r1, [r3, #4]
340030ac:	0548      	lsls	r0, r1, #21
340030ae:	d4f2      	bmi.n	34003096 <RCC_IC_CheckPLLSources+0x92>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340030b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340030b4:	e7ed      	b.n	34003092 <RCC_IC_CheckPLLSources+0x8e>
340030b6:	bf00      	nop
340030b8:	56028000 	.word	0x56028000

340030bc <HAL_RCC_OscConfig>:
{
340030bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
340030c0:	4604      	mov	r4, r0
340030c2:	b918      	cbnz	r0, 340030cc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
340030c4:	2001      	movs	r0, #1
}
340030c6:	b003      	add	sp, #12
340030c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
340030cc:	6803      	ldr	r3, [r0, #0]
340030ce:	b133      	cbz	r3, 340030de <HAL_RCC_OscConfig+0x22>
340030d0:	06dd      	lsls	r5, r3, #27
340030d2:	d104      	bne.n	340030de <HAL_RCC_OscConfig+0x22>
340030d4:	f44f 71b8 	mov.w	r1, #368	@ 0x170
340030d8:	4893      	ldr	r0, [pc, #588]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
340030da:	f7fd fe93 	bl	34000e04 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340030de:	4b93      	ldr	r3, [pc, #588]	@ (3400332c <HAL_RCC_OscConfig+0x270>)
340030e0:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340030e2:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340030e4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340030e8:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340030ec:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340030f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340030f4:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340030f8:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
340030fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34003100:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34003104:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
34003108:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
3400310a:	6823      	ldr	r3, [r4, #0]
3400310c:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
34003110:	07d8      	lsls	r0, r3, #31
34003112:	d463      	bmi.n	340031dc <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
34003114:	6823      	ldr	r3, [r4, #0]
34003116:	0799      	lsls	r1, r3, #30
34003118:	f100 80d4 	bmi.w	340032c4 <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
3400311c:	6823      	ldr	r3, [r4, #0]
3400311e:	06d8      	lsls	r0, r3, #27
34003120:	d522      	bpl.n	34003168 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
34003122:	69e3      	ldr	r3, [r4, #28]
34003124:	2b00      	cmp	r3, #0
34003126:	f000 8347 	beq.w	340037b8 <HAL_RCC_OscConfig+0x6fc>
3400312a:	2b04      	cmp	r3, #4
3400312c:	f000 834d 	beq.w	340037ca <HAL_RCC_OscConfig+0x70e>
34003130:	f240 2103 	movw	r1, #515	@ 0x203
34003134:	487c      	ldr	r0, [pc, #496]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
34003136:	f7fd fe65 	bl	34000e04 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3400313a:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
3400313e:	f040 8148 	bne.w	340033d2 <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34003142:	69e3      	ldr	r3, [r4, #28]
34003144:	2b00      	cmp	r3, #0
34003146:	d0bd      	beq.n	340030c4 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34003148:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400314a:	2b1f      	cmp	r3, #31
3400314c:	d904      	bls.n	34003158 <HAL_RCC_OscConfig+0x9c>
3400314e:	f240 2116 	movw	r1, #534	@ 0x216
34003152:	4875      	ldr	r0, [pc, #468]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
34003154:	f7fd fe56 	bl	34000e04 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34003158:	4a74      	ldr	r2, [pc, #464]	@ (3400332c <HAL_RCC_OscConfig+0x270>)
3400315a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400315c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
3400315e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
34003162:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34003166:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34003168:	6823      	ldr	r3, [r4, #0]
3400316a:	0718      	lsls	r0, r3, #28
3400316c:	f100 8189 	bmi.w	34003482 <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34003170:	6823      	ldr	r3, [r4, #0]
34003172:	0759      	lsls	r1, r3, #29
34003174:	f100 81b4 	bmi.w	340034e0 <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
34003178:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400317a:	2b03      	cmp	r3, #3
3400317c:	d904      	bls.n	34003188 <HAL_RCC_OscConfig+0xcc>
3400317e:	f240 21a3 	movw	r1, #675	@ 0x2a3
34003182:	4869      	ldr	r0, [pc, #420]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
34003184:	f7fd fe3e 	bl	34000e04 <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34003188:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3400318a:	2f00      	cmp	r7, #0
3400318c:	f040 8210 	bne.w	340035b0 <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
34003190:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34003192:	2b03      	cmp	r3, #3
34003194:	d904      	bls.n	340031a0 <HAL_RCC_OscConfig+0xe4>
34003196:	f240 21d1 	movw	r1, #721	@ 0x2d1
3400319a:	4863      	ldr	r0, [pc, #396]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
3400319c:	f7fd fe32 	bl	34000e04 <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
340031a0:	6c67      	ldr	r7, [r4, #68]	@ 0x44
340031a2:	2f00      	cmp	r7, #0
340031a4:	f040 8246 	bne.w	34003634 <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
340031a8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
340031aa:	2b03      	cmp	r3, #3
340031ac:	d904      	bls.n	340031b8 <HAL_RCC_OscConfig+0xfc>
340031ae:	f240 21ff 	movw	r1, #767	@ 0x2ff
340031b2:	485d      	ldr	r0, [pc, #372]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
340031b4:	f7fd fe26 	bl	34000e04 <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
340031b8:	6e27      	ldr	r7, [r4, #96]	@ 0x60
340031ba:	2f00      	cmp	r7, #0
340031bc:	f040 827a 	bne.w	340036b4 <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
340031c0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340031c2:	2b03      	cmp	r3, #3
340031c4:	d904      	bls.n	340031d0 <HAL_RCC_OscConfig+0x114>
340031c6:	f44f 714b 	mov.w	r1, #812	@ 0x32c
340031ca:	4857      	ldr	r0, [pc, #348]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
340031cc:	f7fd fe1a 	bl	34000e04 <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
340031d0:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
340031d2:	2f00      	cmp	r7, #0
340031d4:	f040 82b0 	bne.w	34003738 <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
340031d8:	2000      	movs	r0, #0
340031da:	e774      	b.n	340030c6 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
340031dc:	6863      	ldr	r3, [r4, #4]
340031de:	2b00      	cmp	r3, #0
340031e0:	f000 8313 	beq.w	3400380a <HAL_RCC_OscConfig+0x74e>
340031e4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
340031e8:	2a10      	cmp	r2, #16
340031ea:	f000 8305 	beq.w	340037f8 <HAL_RCC_OscConfig+0x73c>
340031ee:	4a50      	ldr	r2, [pc, #320]	@ (34003330 <HAL_RCC_OscConfig+0x274>)
340031f0:	4293      	cmp	r3, r2
340031f2:	f000 8301 	beq.w	340037f8 <HAL_RCC_OscConfig+0x73c>
340031f6:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
340031fa:	484b      	ldr	r0, [pc, #300]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
340031fc:	f7fd fe02 	bl	34000e04 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34003200:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34003204:	d103      	bne.n	3400320e <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
34003206:	6863      	ldr	r3, [r4, #4]
34003208:	2b00      	cmp	r3, #0
3400320a:	d183      	bne.n	34003114 <HAL_RCC_OscConfig+0x58>
3400320c:	e75a      	b.n	340030c4 <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3400320e:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34003212:	d0f8      	beq.n	34003206 <HAL_RCC_OscConfig+0x14a>
34003214:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
34003218:	d101      	bne.n	3400321e <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3400321a:	05fa      	lsls	r2, r7, #23
3400321c:	d4f3      	bmi.n	34003206 <HAL_RCC_OscConfig+0x14a>
3400321e:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
34003222:	d101      	bne.n	34003228 <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34003224:	05bb      	lsls	r3, r7, #22
34003226:	d4ee      	bmi.n	34003206 <HAL_RCC_OscConfig+0x14a>
34003228:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
3400322c:	d101      	bne.n	34003232 <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3400322e:	0578      	lsls	r0, r7, #21
34003230:	d4e9      	bmi.n	34003206 <HAL_RCC_OscConfig+0x14a>
34003232:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
34003236:	d101      	bne.n	3400323c <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34003238:	0539      	lsls	r1, r7, #20
3400323a:	d4e4      	bmi.n	34003206 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3400323c:	6862      	ldr	r2, [r4, #4]
3400323e:	4b3b      	ldr	r3, [pc, #236]	@ (3400332c <HAL_RCC_OscConfig+0x270>)
34003240:	2a10      	cmp	r2, #16
34003242:	d114      	bne.n	3400326e <HAL_RCC_OscConfig+0x1b2>
34003244:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34003248:	f7ff f8c8 	bl	340023dc <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
3400324c:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
3400324e:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34003250:	b35b      	cbz	r3, 340032aa <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34003252:	4b36      	ldr	r3, [pc, #216]	@ (3400332c <HAL_RCC_OscConfig+0x270>)
34003254:	685a      	ldr	r2, [r3, #4]
34003256:	06d2      	lsls	r2, r2, #27
34003258:	f53f af5c 	bmi.w	34003114 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3400325c:	f7ff f8be 	bl	340023dc <HAL_GetTick>
34003260:	9b01      	ldr	r3, [sp, #4]
34003262:	1ac0      	subs	r0, r0, r3
34003264:	2864      	cmp	r0, #100	@ 0x64
34003266:	4b31      	ldr	r3, [pc, #196]	@ (3400332c <HAL_RCC_OscConfig+0x270>)
34003268:	d9f4      	bls.n	34003254 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
3400326a:	2003      	movs	r0, #3
3400326c:	e72b      	b.n	340030c6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3400326e:	b93a      	cbnz	r2, 34003280 <HAL_RCC_OscConfig+0x1c4>
34003270:	2110      	movs	r1, #16
34003272:	4a30      	ldr	r2, [pc, #192]	@ (34003334 <HAL_RCC_OscConfig+0x278>)
34003274:	6011      	str	r1, [r2, #0]
34003276:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34003278:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
3400327c:	655a      	str	r2, [r3, #84]	@ 0x54
3400327e:	e7e3      	b.n	34003248 <HAL_RCC_OscConfig+0x18c>
34003280:	f248 0110 	movw	r1, #32784	@ 0x8010
34003284:	428a      	cmp	r2, r1
34003286:	d109      	bne.n	3400329c <HAL_RCC_OscConfig+0x1e0>
34003288:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3400328a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
3400328e:	655a      	str	r2, [r3, #84]	@ 0x54
34003290:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34003292:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34003296:	655a      	str	r2, [r3, #84]	@ 0x54
34003298:	2210      	movs	r2, #16
3400329a:	e7d3      	b.n	34003244 <HAL_RCC_OscConfig+0x188>
3400329c:	4924      	ldr	r1, [pc, #144]	@ (34003330 <HAL_RCC_OscConfig+0x274>)
3400329e:	428a      	cmp	r2, r1
340032a0:	d1e6      	bne.n	34003270 <HAL_RCC_OscConfig+0x1b4>
340032a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340032a4:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
340032a8:	e7f5      	b.n	34003296 <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
340032aa:	4b20      	ldr	r3, [pc, #128]	@ (3400332c <HAL_RCC_OscConfig+0x270>)
340032ac:	685a      	ldr	r2, [r3, #4]
340032ae:	06d3      	lsls	r3, r2, #27
340032b0:	f57f af30 	bpl.w	34003114 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340032b4:	f7ff f892 	bl	340023dc <HAL_GetTick>
340032b8:	9b01      	ldr	r3, [sp, #4]
340032ba:	1ac0      	subs	r0, r0, r3
340032bc:	2864      	cmp	r0, #100	@ 0x64
340032be:	4b1b      	ldr	r3, [pc, #108]	@ (3400332c <HAL_RCC_OscConfig+0x270>)
340032c0:	d9f4      	bls.n	340032ac <HAL_RCC_OscConfig+0x1f0>
340032c2:	e7d2      	b.n	3400326a <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
340032c4:	68e3      	ldr	r3, [r4, #12]
340032c6:	2b00      	cmp	r3, #0
340032c8:	f000 8288 	beq.w	340037dc <HAL_RCC_OscConfig+0x720>
340032cc:	2b08      	cmp	r3, #8
340032ce:	f000 828c 	beq.w	340037ea <HAL_RCC_OscConfig+0x72e>
340032d2:	f240 11b3 	movw	r1, #435	@ 0x1b3
340032d6:	4814      	ldr	r0, [pc, #80]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
340032d8:	f7fd fd94 	bl	34000e04 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
340032dc:	bb66      	cbnz	r6, 34003338 <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
340032de:	68e3      	ldr	r3, [r4, #12]
340032e0:	2b00      	cmp	r3, #0
340032e2:	f43f aeef 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
340032e6:	6923      	ldr	r3, [r4, #16]
340032e8:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
340032ec:	d004      	beq.n	340032f8 <HAL_RCC_OscConfig+0x23c>
340032ee:	f240 11c5 	movw	r1, #453	@ 0x1c5
340032f2:	480d      	ldr	r0, [pc, #52]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
340032f4:	f7fd fd86 	bl	34000e04 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
340032f8:	6963      	ldr	r3, [r4, #20]
340032fa:	2b7f      	cmp	r3, #127	@ 0x7f
340032fc:	d904      	bls.n	34003308 <HAL_RCC_OscConfig+0x24c>
340032fe:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
34003302:	4809      	ldr	r0, [pc, #36]	@ (34003328 <HAL_RCC_OscConfig+0x26c>)
34003304:	f7fd fd7e 	bl	34000e04 <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34003308:	4a08      	ldr	r2, [pc, #32]	@ (3400332c <HAL_RCC_OscConfig+0x270>)
3400330a:	6921      	ldr	r1, [r4, #16]
3400330c:	6c93      	ldr	r3, [r2, #72]	@ 0x48
3400330e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
34003312:	430b      	orrs	r3, r1
34003314:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34003316:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34003318:	6961      	ldr	r1, [r4, #20]
3400331a:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
3400331e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34003322:	6493      	str	r3, [r2, #72]	@ 0x48
}
34003324:	e6fa      	b.n	3400311c <HAL_RCC_OscConfig+0x60>
34003326:	bf00      	nop
34003328:	34038b9a 	.word	0x34038b9a
3400332c:	56028000 	.word	0x56028000
34003330:	00018010 	.word	0x00018010
34003334:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34003338:	2d00      	cmp	r5, #0
3400333a:	d0d0      	beq.n	340032de <HAL_RCC_OscConfig+0x222>
3400333c:	f1bb 0f00 	cmp.w	fp, #0
34003340:	d101      	bne.n	34003346 <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34003342:	05f8      	lsls	r0, r7, #23
34003344:	d4cb      	bmi.n	340032de <HAL_RCC_OscConfig+0x222>
34003346:	f1ba 0f00 	cmp.w	sl, #0
3400334a:	d101      	bne.n	34003350 <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3400334c:	05b9      	lsls	r1, r7, #22
3400334e:	d4c6      	bmi.n	340032de <HAL_RCC_OscConfig+0x222>
34003350:	f1b9 0f00 	cmp.w	r9, #0
34003354:	d101      	bne.n	3400335a <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34003356:	057a      	lsls	r2, r7, #21
34003358:	d4c1      	bmi.n	340032de <HAL_RCC_OscConfig+0x222>
3400335a:	f1b8 0f00 	cmp.w	r8, #0
3400335e:	d101      	bne.n	34003364 <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34003360:	053b      	lsls	r3, r7, #20
34003362:	d4bc      	bmi.n	340032de <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34003364:	68e3      	ldr	r3, [r4, #12]
34003366:	b313      	cbz	r3, 340033ae <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34003368:	6923      	ldr	r3, [r4, #16]
3400336a:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
3400336e:	d004      	beq.n	3400337a <HAL_RCC_OscConfig+0x2be>
34003370:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
34003374:	48ab      	ldr	r0, [pc, #684]	@ (34003624 <HAL_RCC_OscConfig+0x568>)
34003376:	f7fd fd45 	bl	34000e04 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
3400337a:	6963      	ldr	r3, [r4, #20]
3400337c:	2b7f      	cmp	r3, #127	@ 0x7f
3400337e:	d904      	bls.n	3400338a <HAL_RCC_OscConfig+0x2ce>
34003380:	f240 11d5 	movw	r1, #469	@ 0x1d5
34003384:	48a7      	ldr	r0, [pc, #668]	@ (34003624 <HAL_RCC_OscConfig+0x568>)
34003386:	f7fd fd3d 	bl	34000e04 <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
3400338a:	2208      	movs	r2, #8
3400338c:	4ba6      	ldr	r3, [pc, #664]	@ (34003628 <HAL_RCC_OscConfig+0x56c>)
3400338e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34003392:	f7ff f823 	bl	340023dc <HAL_GetTick>
34003396:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
34003398:	f7ff fca6 	bl	34002ce8 <LL_RCC_HSI_IsReady>
3400339c:	2800      	cmp	r0, #0
3400339e:	d1b3      	bne.n	34003308 <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
340033a0:	f7ff f81c 	bl	340023dc <HAL_GetTick>
340033a4:	9b01      	ldr	r3, [sp, #4]
340033a6:	1ac0      	subs	r0, r0, r3
340033a8:	2801      	cmp	r0, #1
340033aa:	d9f5      	bls.n	34003398 <HAL_RCC_OscConfig+0x2dc>
340033ac:	e75d      	b.n	3400326a <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
340033ae:	2208      	movs	r2, #8
340033b0:	4b9e      	ldr	r3, [pc, #632]	@ (3400362c <HAL_RCC_OscConfig+0x570>)
340033b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
340033b4:	f7ff f812 	bl	340023dc <HAL_GetTick>
340033b8:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
340033ba:	f7ff fc95 	bl	34002ce8 <LL_RCC_HSI_IsReady>
340033be:	2800      	cmp	r0, #0
340033c0:	f43f aeac 	beq.w	3400311c <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
340033c4:	f7ff f80a 	bl	340023dc <HAL_GetTick>
340033c8:	9b01      	ldr	r3, [sp, #4]
340033ca:	1ac0      	subs	r0, r0, r3
340033cc:	2801      	cmp	r0, #1
340033ce:	d9f4      	bls.n	340033ba <HAL_RCC_OscConfig+0x2fe>
340033d0:	e74b      	b.n	3400326a <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
340033d2:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340033d6:	f43f aeb4 	beq.w	34003142 <HAL_RCC_OscConfig+0x86>
340033da:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
340033de:	d102      	bne.n	340033e6 <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340033e0:	05f9      	lsls	r1, r7, #23
340033e2:	f53f aeae 	bmi.w	34003142 <HAL_RCC_OscConfig+0x86>
340033e6:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
340033ea:	d102      	bne.n	340033f2 <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340033ec:	05ba      	lsls	r2, r7, #22
340033ee:	f53f aea8 	bmi.w	34003142 <HAL_RCC_OscConfig+0x86>
340033f2:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
340033f6:	d102      	bne.n	340033fe <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340033f8:	057b      	lsls	r3, r7, #21
340033fa:	f53f aea2 	bmi.w	34003142 <HAL_RCC_OscConfig+0x86>
340033fe:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
34003402:	d102      	bne.n	3400340a <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34003404:	053f      	lsls	r7, r7, #20
34003406:	f53f ae9c 	bmi.w	34003142 <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
3400340a:	69e3      	ldr	r3, [r4, #28]
3400340c:	b343      	cbz	r3, 34003460 <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
3400340e:	6a23      	ldr	r3, [r4, #32]
34003410:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
34003414:	d004      	beq.n	34003420 <HAL_RCC_OscConfig+0x364>
34003416:	f240 2122 	movw	r1, #546	@ 0x222
3400341a:	4882      	ldr	r0, [pc, #520]	@ (34003624 <HAL_RCC_OscConfig+0x568>)
3400341c:	f7fd fcf2 	bl	34000e04 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34003420:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003422:	2b1f      	cmp	r3, #31
34003424:	d904      	bls.n	34003430 <HAL_RCC_OscConfig+0x374>
34003426:	f240 2123 	movw	r1, #547	@ 0x223
3400342a:	487e      	ldr	r0, [pc, #504]	@ (34003624 <HAL_RCC_OscConfig+0x568>)
3400342c:	f7fd fcea 	bl	34000e04 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34003430:	4a7d      	ldr	r2, [pc, #500]	@ (34003628 <HAL_RCC_OscConfig+0x56c>)
34003432:	6a21      	ldr	r1, [r4, #32]
34003434:	6c53      	ldr	r3, [r2, #68]	@ 0x44
34003436:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
3400343a:	430b      	orrs	r3, r1
3400343c:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
3400343e:	2304      	movs	r3, #4
34003440:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34003444:	f7fe ffca 	bl	340023dc <HAL_GetTick>
34003448:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
3400344a:	f7ff fc55 	bl	34002cf8 <LL_RCC_MSI_IsReady>
3400344e:	2800      	cmp	r0, #0
34003450:	f47f ae82 	bne.w	34003158 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34003454:	f7fe ffc2 	bl	340023dc <HAL_GetTick>
34003458:	1bc0      	subs	r0, r0, r7
3400345a:	2801      	cmp	r0, #1
3400345c:	d9f5      	bls.n	3400344a <HAL_RCC_OscConfig+0x38e>
3400345e:	e704      	b.n	3400326a <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34003460:	2204      	movs	r2, #4
34003462:	4b72      	ldr	r3, [pc, #456]	@ (3400362c <HAL_RCC_OscConfig+0x570>)
34003464:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34003466:	f7fe ffb9 	bl	340023dc <HAL_GetTick>
3400346a:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
3400346c:	f7ff fc44 	bl	34002cf8 <LL_RCC_MSI_IsReady>
34003470:	2800      	cmp	r0, #0
34003472:	f43f ae79 	beq.w	34003168 <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34003476:	f7fe ffb1 	bl	340023dc <HAL_GetTick>
3400347a:	1bc0      	subs	r0, r0, r7
3400347c:	2801      	cmp	r0, #1
3400347e:	d9f5      	bls.n	3400346c <HAL_RCC_OscConfig+0x3b0>
34003480:	e6f3      	b.n	3400326a <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
34003482:	69a3      	ldr	r3, [r4, #24]
34003484:	2b01      	cmp	r3, #1
34003486:	d904      	bls.n	34003492 <HAL_RCC_OscConfig+0x3d6>
34003488:	f240 2153 	movw	r1, #595	@ 0x253
3400348c:	4865      	ldr	r0, [pc, #404]	@ (34003624 <HAL_RCC_OscConfig+0x568>)
3400348e:	f7fd fcb9 	bl	34000e04 <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34003492:	69a2      	ldr	r2, [r4, #24]
34003494:	2301      	movs	r3, #1
34003496:	b18a      	cbz	r2, 340034bc <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34003498:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 34003628 <HAL_RCC_OscConfig+0x56c>
3400349c:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
340034a0:	f7fe ff9c 	bl	340023dc <HAL_GetTick>
340034a4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340034a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
340034aa:	07da      	lsls	r2, r3, #31
340034ac:	f53f ae60 	bmi.w	34003170 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
340034b0:	f7fe ff94 	bl	340023dc <HAL_GetTick>
340034b4:	1bc0      	subs	r0, r0, r7
340034b6:	2801      	cmp	r0, #1
340034b8:	d9f5      	bls.n	340034a6 <HAL_RCC_OscConfig+0x3ea>
340034ba:	e6d6      	b.n	3400326a <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340034bc:	4a5b      	ldr	r2, [pc, #364]	@ (3400362c <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340034be:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 34003628 <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340034c2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
340034c4:	f7fe ff8a 	bl	340023dc <HAL_GetTick>
340034c8:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340034ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
340034ce:	07db      	lsls	r3, r3, #31
340034d0:	f57f ae4e 	bpl.w	34003170 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
340034d4:	f7fe ff82 	bl	340023dc <HAL_GetTick>
340034d8:	1bc0      	subs	r0, r0, r7
340034da:	2801      	cmp	r0, #1
340034dc:	d9f5      	bls.n	340034ca <HAL_RCC_OscConfig+0x40e>
340034de:	e6c4      	b.n	3400326a <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
340034e0:	68a3      	ldr	r3, [r4, #8]
340034e2:	f033 0202 	bics.w	r2, r3, #2
340034e6:	d00a      	beq.n	340034fe <HAL_RCC_OscConfig+0x442>
340034e8:	f248 0202 	movw	r2, #32770	@ 0x8002
340034ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340034f0:	4293      	cmp	r3, r2
340034f2:	d004      	beq.n	340034fe <HAL_RCC_OscConfig+0x442>
340034f4:	f240 217e 	movw	r1, #638	@ 0x27e
340034f8:	484a      	ldr	r0, [pc, #296]	@ (34003624 <HAL_RCC_OscConfig+0x568>)
340034fa:	f7fd fc83 	bl	34000e04 <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
340034fe:	68a3      	ldr	r3, [r4, #8]
34003500:	4f49      	ldr	r7, [pc, #292]	@ (34003628 <HAL_RCC_OscConfig+0x56c>)
34003502:	2b02      	cmp	r3, #2
34003504:	d113      	bne.n	3400352e <HAL_RCC_OscConfig+0x472>
34003506:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
3400350a:	f7fe ff67 	bl	340023dc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400350e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
34003512:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34003514:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 34003628 <HAL_RCC_OscConfig+0x56c>
34003518:	f8d9 3004 	ldr.w	r3, [r9, #4]
3400351c:	0798      	lsls	r0, r3, #30
3400351e:	f53f ae2b 	bmi.w	34003178 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34003522:	f7fe ff5b 	bl	340023dc <HAL_GetTick>
34003526:	1bc3      	subs	r3, r0, r7
34003528:	4543      	cmp	r3, r8
3400352a:	d9f5      	bls.n	34003518 <HAL_RCC_OscConfig+0x45c>
3400352c:	e69d      	b.n	3400326a <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3400352e:	b9d3      	cbnz	r3, 34003566 <HAL_RCC_OscConfig+0x4aa>
34003530:	2202      	movs	r2, #2
34003532:	4b3e      	ldr	r3, [pc, #248]	@ (3400362c <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34003534:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34003538:	601a      	str	r2, [r3, #0]
3400353a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400353c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34003540:	643b      	str	r3, [r7, #64]	@ 0x40
34003542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34003544:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34003548:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
3400354a:	f7fe ff47 	bl	340023dc <HAL_GetTick>
3400354e:	4680      	mov	r8, r0
34003550:	687b      	ldr	r3, [r7, #4]
34003552:	0799      	lsls	r1, r3, #30
34003554:	f57f ae10 	bpl.w	34003178 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34003558:	f7fe ff40 	bl	340023dc <HAL_GetTick>
3400355c:	eba0 0308 	sub.w	r3, r0, r8
34003560:	454b      	cmp	r3, r9
34003562:	d9f5      	bls.n	34003550 <HAL_RCC_OscConfig+0x494>
34003564:	e681      	b.n	3400326a <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34003566:	f248 0202 	movw	r2, #32770	@ 0x8002
3400356a:	4293      	cmp	r3, r2
3400356c:	d109      	bne.n	34003582 <HAL_RCC_OscConfig+0x4c6>
3400356e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34003570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34003574:	643b      	str	r3, [r7, #64]	@ 0x40
34003576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34003578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400357c:	643b      	str	r3, [r7, #64]	@ 0x40
3400357e:	2302      	movs	r3, #2
34003580:	e7c1      	b.n	34003506 <HAL_RCC_OscConfig+0x44a>
34003582:	4a2b      	ldr	r2, [pc, #172]	@ (34003630 <HAL_RCC_OscConfig+0x574>)
34003584:	4293      	cmp	r3, r2
34003586:	d107      	bne.n	34003598 <HAL_RCC_OscConfig+0x4dc>
34003588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400358a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400358e:	643b      	str	r3, [r7, #64]	@ 0x40
34003590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34003592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34003596:	e7f1      	b.n	3400357c <HAL_RCC_OscConfig+0x4c0>
34003598:	2202      	movs	r2, #2
3400359a:	4b24      	ldr	r3, [pc, #144]	@ (3400362c <HAL_RCC_OscConfig+0x570>)
3400359c:	601a      	str	r2, [r3, #0]
3400359e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340035a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
340035a4:	643b      	str	r3, [r7, #64]	@ 0x40
340035a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340035a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340035ac:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
340035ae:	e7ac      	b.n	3400350a <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
340035b0:	2000      	movs	r0, #0
340035b2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
340035b6:	f7ff fbaf 	bl	34002d18 <RCC_PLL_IsNewConfig>
340035ba:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
340035bc:	f7ff fba4 	bl	34002d08 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
340035c0:	2a01      	cmp	r2, #1
340035c2:	d125      	bne.n	34003610 <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340035c4:	4b18      	ldr	r3, [pc, #96]	@ (34003628 <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
340035c6:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
340035ca:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340035ce:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340035d2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340035d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340035da:	d103      	bne.n	340035e4 <HAL_RCC_OscConfig+0x528>
340035dc:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
340035e0:	f43f ad70 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
340035e4:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
340035e8:	d10b      	bne.n	34003602 <HAL_RCC_OscConfig+0x546>
340035ea:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
340035ee:	f43f ad69 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
340035f2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
340035f6:	f43f ad65 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
340035fa:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
340035fe:	f43f ad61 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34003602:	2000      	movs	r0, #0
34003604:	f7ff fbe2 	bl	34002dcc <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34003608:	2800      	cmp	r0, #0
3400360a:	f43f adc1 	beq.w	34003190 <HAL_RCC_OscConfig+0xd4>
3400360e:	e559      	b.n	340030c4 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34003610:	2f02      	cmp	r7, #2
34003612:	f47f adbd 	bne.w	34003190 <HAL_RCC_OscConfig+0xd4>
34003616:	2800      	cmp	r0, #0
34003618:	f47f adba 	bne.w	34003190 <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
3400361c:	f7ff fbbe 	bl	34002d9c <RCC_PLL_Enable>
34003620:	e7f2      	b.n	34003608 <HAL_RCC_OscConfig+0x54c>
34003622:	bf00      	nop
34003624:	34038b9a 	.word	0x34038b9a
34003628:	56028000 	.word	0x56028000
3400362c:	56029000 	.word	0x56029000
34003630:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34003634:	2001      	movs	r0, #1
34003636:	f104 0144 	add.w	r1, r4, #68	@ 0x44
3400363a:	f7ff fb6d 	bl	34002d18 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3400363e:	4b77      	ldr	r3, [pc, #476]	@ (3400381c <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34003640:	2801      	cmp	r0, #1
34003642:	685a      	ldr	r2, [r3, #4]
34003644:	d12c      	bne.n	340036a0 <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34003646:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400364a:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400364e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34003652:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34003656:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400365a:	d105      	bne.n	34003668 <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400365c:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34003660:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
34003664:	f43f ad2e 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34003668:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
3400366c:	d111      	bne.n	34003692 <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400366e:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34003672:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34003676:	f43f ad25 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3400367a:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
3400367e:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34003682:	f43f ad1f 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34003686:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
3400368a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400368e:	f43f ad19 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34003692:	2001      	movs	r0, #1
34003694:	f7ff fb9a 	bl	34002dcc <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34003698:	2800      	cmp	r0, #0
3400369a:	f43f ad85 	beq.w	340031a8 <HAL_RCC_OscConfig+0xec>
3400369e:	e511      	b.n	340030c4 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
340036a0:	2f02      	cmp	r7, #2
340036a2:	f47f ad81 	bne.w	340031a8 <HAL_RCC_OscConfig+0xec>
340036a6:	0592      	lsls	r2, r2, #22
340036a8:	f53f ad7e 	bmi.w	340031a8 <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
340036ac:	2001      	movs	r0, #1
340036ae:	f7ff fb75 	bl	34002d9c <RCC_PLL_Enable>
340036b2:	e7f1      	b.n	34003698 <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
340036b4:	2002      	movs	r0, #2
340036b6:	f104 0160 	add.w	r1, r4, #96	@ 0x60
340036ba:	f7ff fb2d 	bl	34002d18 <RCC_PLL_IsNewConfig>
340036be:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
340036c0:	f7ff fb22 	bl	34002d08 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
340036c4:	2a01      	cmp	r2, #1
340036c6:	d12d      	bne.n	34003724 <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340036c8:	4b54      	ldr	r3, [pc, #336]	@ (3400381c <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
340036ca:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
340036ce:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340036d2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340036d6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340036da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340036de:	d105      	bne.n	340036ec <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340036e0:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
340036e4:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
340036e8:	f43f acec 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
340036ec:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
340036f0:	d111      	bne.n	34003716 <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340036f2:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340036f6:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
340036fa:	f43f ace3 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340036fe:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34003702:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34003706:	f43f acdd 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400370a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
3400370e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003712:	f43f acd7 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34003716:	2002      	movs	r0, #2
34003718:	f7ff fb58 	bl	34002dcc <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
3400371c:	2800      	cmp	r0, #0
3400371e:	f43f ad4f 	beq.w	340031c0 <HAL_RCC_OscConfig+0x104>
34003722:	e4cf      	b.n	340030c4 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34003724:	2f02      	cmp	r7, #2
34003726:	f47f ad4b 	bne.w	340031c0 <HAL_RCC_OscConfig+0x104>
3400372a:	2800      	cmp	r0, #0
3400372c:	f47f ad48 	bne.w	340031c0 <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34003730:	4638      	mov	r0, r7
34003732:	f7ff fb33 	bl	34002d9c <RCC_PLL_Enable>
34003736:	e7f1      	b.n	3400371c <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34003738:	2003      	movs	r0, #3
3400373a:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
3400373e:	f7ff faeb 	bl	34002d18 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34003742:	4b36      	ldr	r3, [pc, #216]	@ (3400381c <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34003744:	2801      	cmp	r0, #1
34003746:	685a      	ldr	r2, [r3, #4]
34003748:	d12c      	bne.n	340037a4 <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
3400374a:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400374e:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34003752:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34003756:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400375a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400375e:	d105      	bne.n	3400376c <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34003760:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34003764:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34003768:	f43f acac 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
3400376c:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34003770:	d111      	bne.n	34003796 <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34003772:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34003776:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3400377a:	f43f aca3 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3400377e:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34003782:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34003786:	f43f ac9d 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3400378a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
3400378e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34003792:	f43f ac97 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34003796:	2003      	movs	r0, #3
34003798:	f7ff fb18 	bl	34002dcc <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
3400379c:	3800      	subs	r0, #0
3400379e:	bf18      	it	ne
340037a0:	2001      	movne	r0, #1
340037a2:	e490      	b.n	340030c6 <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
340037a4:	2f02      	cmp	r7, #2
340037a6:	f47f ad17 	bne.w	340031d8 <HAL_RCC_OscConfig+0x11c>
340037aa:	0513      	lsls	r3, r2, #20
340037ac:	f53f ad14 	bmi.w	340031d8 <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
340037b0:	2003      	movs	r0, #3
340037b2:	f7ff faf3 	bl	34002d9c <RCC_PLL_Enable>
340037b6:	e7f1      	b.n	3400379c <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
340037b8:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
340037bc:	f43f ac82 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
340037c0:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340037c4:	f47f ae09 	bne.w	340033da <HAL_RCC_OscConfig+0x31e>
340037c8:	e47c      	b.n	340030c4 <HAL_RCC_OscConfig+0x8>
340037ca:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
340037ce:	f43f acbb 	beq.w	34003148 <HAL_RCC_OscConfig+0x8c>
340037d2:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340037d6:	f47f ae00 	bne.w	340033da <HAL_RCC_OscConfig+0x31e>
340037da:	e4b5      	b.n	34003148 <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
340037dc:	2e00      	cmp	r6, #0
340037de:	f43f ac71 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
340037e2:	2d00      	cmp	r5, #0
340037e4:	f47f adaa 	bne.w	3400333c <HAL_RCC_OscConfig+0x280>
340037e8:	e46c      	b.n	340030c4 <HAL_RCC_OscConfig+0x8>
340037ea:	2e00      	cmp	r6, #0
340037ec:	f43f ad7b 	beq.w	340032e6 <HAL_RCC_OscConfig+0x22a>
340037f0:	2d00      	cmp	r5, #0
340037f2:	f43f ad78 	beq.w	340032e6 <HAL_RCC_OscConfig+0x22a>
340037f6:	e5a1      	b.n	3400333c <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340037f8:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
340037fc:	f43f ac8a 	beq.w	34003114 <HAL_RCC_OscConfig+0x58>
34003800:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34003804:	f47f ad06 	bne.w	34003214 <HAL_RCC_OscConfig+0x158>
34003808:	e484      	b.n	34003114 <HAL_RCC_OscConfig+0x58>
3400380a:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
3400380e:	f43f ac59 	beq.w	340030c4 <HAL_RCC_OscConfig+0x8>
34003812:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34003816:	f47f acfd 	bne.w	34003214 <HAL_RCC_OscConfig+0x158>
3400381a:	e453      	b.n	340030c4 <HAL_RCC_OscConfig+0x8>
3400381c:	56028000 	.word	0x56028000

34003820 <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34003820:	4a22      	ldr	r2, [pc, #136]	@ (340038ac <HAL_RCC_GetCpuClockFreq+0x8c>)
{
34003822:	b510      	push	{r4, lr}
34003824:	6a13      	ldr	r3, [r2, #32]
34003826:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
3400382a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400382e:	d03a      	beq.n	340038a6 <HAL_RCC_GetCpuClockFreq+0x86>
34003830:	d805      	bhi.n	3400383e <HAL_RCC_GetCpuClockFreq+0x1e>
34003832:	b1e3      	cbz	r3, 3400386e <HAL_RCC_GetCpuClockFreq+0x4e>
34003834:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34003838:	d01f      	beq.n	3400387a <HAL_RCC_GetCpuClockFreq+0x5a>
3400383a:	2000      	movs	r0, #0
3400383c:	e01c      	b.n	34003878 <HAL_RCC_GetCpuClockFreq+0x58>
3400383e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34003842:	d1fa      	bne.n	3400383a <HAL_RCC_GetCpuClockFreq+0x1a>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34003844:	f8d2 00c4 	ldr.w	r0, [r2, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34003848:	f8d2 30c4 	ldr.w	r3, [r2, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
3400384c:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34003850:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34003854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34003858:	f100 0401 	add.w	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3400385c:	d020      	beq.n	340038a0 <HAL_RCC_GetCpuClockFreq+0x80>
3400385e:	d814      	bhi.n	3400388a <HAL_RCC_GetCpuClockFreq+0x6a>
34003860:	b1cb      	cbz	r3, 34003896 <HAL_RCC_GetCpuClockFreq+0x76>
34003862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34003866:	d1e8      	bne.n	3400383a <HAL_RCC_GetCpuClockFreq+0x1a>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34003868:	f003 fc12 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
3400386c:	e015      	b.n	3400389a <HAL_RCC_GetCpuClockFreq+0x7a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400386e:	6c93      	ldr	r3, [r2, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34003870:	480f      	ldr	r0, [pc, #60]	@ (340038b0 <HAL_RCC_GetCpuClockFreq+0x90>)
34003872:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34003876:	40d8      	lsrs	r0, r3
}
34003878:	bd10      	pop	{r4, pc}
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3400387a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        frequency = MSI_VALUE;
3400387c:	480d      	ldr	r0, [pc, #52]	@ (340038b4 <HAL_RCC_GetCpuClockFreq+0x94>)
3400387e:	f413 7f00 	tst.w	r3, #512	@ 0x200
34003882:	4b0d      	ldr	r3, [pc, #52]	@ (340038b8 <HAL_RCC_GetCpuClockFreq+0x98>)
34003884:	bf08      	it	eq
34003886:	4618      	moveq	r0, r3
34003888:	e7f6      	b.n	34003878 <HAL_RCC_GetCpuClockFreq+0x58>
3400388a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400388e:	d1d4      	bne.n	3400383a <HAL_RCC_GetCpuClockFreq+0x1a>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34003890:	f003 fc7e 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34003894:	e001      	b.n	3400389a <HAL_RCC_GetCpuClockFreq+0x7a>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34003896:	f003 fbbb 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
3400389a:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
3400389e:	e7eb      	b.n	34003878 <HAL_RCC_GetCpuClockFreq+0x58>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
340038a0:	f003 fc36 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
340038a4:	e7f9      	b.n	3400389a <HAL_RCC_GetCpuClockFreq+0x7a>
  switch (LL_RCC_GetCpuClkSource())
340038a6:	4805      	ldr	r0, [pc, #20]	@ (340038bc <HAL_RCC_GetCpuClockFreq+0x9c>)
340038a8:	e7e6      	b.n	34003878 <HAL_RCC_GetCpuClockFreq+0x58>
340038aa:	bf00      	nop
340038ac:	56028000 	.word	0x56028000
340038b0:	03d09000 	.word	0x03d09000
340038b4:	00f42400 	.word	0x00f42400
340038b8:	003d0900 	.word	0x003d0900
340038bc:	02dc6c00 	.word	0x02dc6c00

340038c0 <HAL_RCC_ClockConfig>:
{
340038c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
340038c4:	4604      	mov	r4, r0
340038c6:	b910      	cbnz	r0, 340038ce <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
340038c8:	2001      	movs	r0, #1
}
340038ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
340038ce:	6803      	ldr	r3, [r0, #0]
340038d0:	2b7f      	cmp	r3, #127	@ 0x7f
340038d2:	d904      	bls.n	340038de <HAL_RCC_ClockConfig+0x1e>
340038d4:	f44f 715f 	mov.w	r1, #892	@ 0x37c
340038d8:	4893      	ldr	r0, [pc, #588]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
340038da:	f7fd fa93 	bl	34000e04 <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
340038de:	6823      	ldr	r3, [r4, #0]
340038e0:	071f      	lsls	r7, r3, #28
340038e2:	d513      	bpl.n	3400390c <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
340038e4:	6923      	ldr	r3, [r4, #16]
340038e6:	2b07      	cmp	r3, #7
340038e8:	d904      	bls.n	340038f4 <HAL_RCC_ClockConfig+0x34>
340038ea:	f240 3183 	movw	r1, #899	@ 0x383
340038ee:	488e      	ldr	r0, [pc, #568]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
340038f0:	f7fd fa88 	bl	34000e04 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
340038f4:	4a8d      	ldr	r2, [pc, #564]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
340038f6:	6921      	ldr	r1, [r4, #16]
340038f8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340038fa:	f003 0307 	and.w	r3, r3, #7
340038fe:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34003900:	bf81      	itttt	hi
34003902:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34003904:	f023 0307 	bichi.w	r3, r3, #7
34003908:	430b      	orrhi	r3, r1
3400390a:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
3400390c:	6823      	ldr	r3, [r4, #0]
3400390e:	06de      	lsls	r6, r3, #27
34003910:	d516      	bpl.n	34003940 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34003912:	6963      	ldr	r3, [r4, #20]
34003914:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34003918:	d006      	beq.n	34003928 <HAL_RCC_ClockConfig+0x68>
3400391a:	2b40      	cmp	r3, #64	@ 0x40
3400391c:	d004      	beq.n	34003928 <HAL_RCC_ClockConfig+0x68>
3400391e:	f240 318d 	movw	r1, #909	@ 0x38d
34003922:	4881      	ldr	r0, [pc, #516]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
34003924:	f7fd fa6e 	bl	34000e04 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34003928:	4a80      	ldr	r2, [pc, #512]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
3400392a:	6961      	ldr	r1, [r4, #20]
3400392c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3400392e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34003932:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34003934:	bf81      	itttt	hi
34003936:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34003938:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
3400393c:	430b      	orrhi	r3, r1
3400393e:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34003940:	6823      	ldr	r3, [r4, #0]
34003942:	069d      	lsls	r5, r3, #26
34003944:	d517      	bpl.n	34003976 <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34003946:	69a3      	ldr	r3, [r4, #24]
34003948:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3400394c:	d007      	beq.n	3400395e <HAL_RCC_ClockConfig+0x9e>
3400394e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34003952:	d004      	beq.n	3400395e <HAL_RCC_ClockConfig+0x9e>
34003954:	f240 3197 	movw	r1, #919	@ 0x397
34003958:	4873      	ldr	r0, [pc, #460]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
3400395a:	f7fd fa53 	bl	34000e04 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
3400395e:	4a73      	ldr	r2, [pc, #460]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
34003960:	69a1      	ldr	r1, [r4, #24]
34003962:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34003964:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34003968:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
3400396a:	bf81      	itttt	hi
3400396c:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
3400396e:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
34003972:	430b      	orrhi	r3, r1
34003974:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34003976:	6823      	ldr	r3, [r4, #0]
34003978:	0658      	lsls	r0, r3, #25
3400397a:	d517      	bpl.n	340039ac <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
3400397c:	69e3      	ldr	r3, [r4, #28]
3400397e:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34003982:	d007      	beq.n	34003994 <HAL_RCC_ClockConfig+0xd4>
34003984:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34003988:	d004      	beq.n	34003994 <HAL_RCC_ClockConfig+0xd4>
3400398a:	f240 31a1 	movw	r1, #929	@ 0x3a1
3400398e:	4866      	ldr	r0, [pc, #408]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
34003990:	f7fd fa38 	bl	34000e04 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34003994:	4a65      	ldr	r2, [pc, #404]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
34003996:	69e1      	ldr	r1, [r4, #28]
34003998:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3400399a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
3400399e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
340039a0:	bf81      	itttt	hi
340039a2:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
340039a4:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
340039a8:	430b      	orrhi	r3, r1
340039aa:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
340039ac:	6823      	ldr	r3, [r4, #0]
340039ae:	0759      	lsls	r1, r3, #29
340039b0:	d517      	bpl.n	340039e2 <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
340039b2:	68e3      	ldr	r3, [r4, #12]
340039b4:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
340039b8:	d007      	beq.n	340039ca <HAL_RCC_ClockConfig+0x10a>
340039ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
340039be:	d004      	beq.n	340039ca <HAL_RCC_ClockConfig+0x10a>
340039c0:	f240 31ab 	movw	r1, #939	@ 0x3ab
340039c4:	4858      	ldr	r0, [pc, #352]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
340039c6:	f7fd fa1d 	bl	34000e04 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
340039ca:	4a58      	ldr	r2, [pc, #352]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
340039cc:	68e1      	ldr	r1, [r4, #12]
340039ce:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340039d0:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
340039d4:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
340039d6:	bf81      	itttt	hi
340039d8:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
340039da:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
340039de:	430b      	orrhi	r3, r1
340039e0:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
340039e2:	6823      	ldr	r3, [r4, #0]
340039e4:	07da      	lsls	r2, r3, #31
340039e6:	d52a      	bpl.n	34003a3e <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
340039e8:	6863      	ldr	r3, [r4, #4]
340039ea:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340039ee:	d004      	beq.n	340039fa <HAL_RCC_ClockConfig+0x13a>
340039f0:	f240 31b6 	movw	r1, #950	@ 0x3b6
340039f4:	484c      	ldr	r0, [pc, #304]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
340039f6:	f7fd fa05 	bl	34000e04 <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
340039fa:	6863      	ldr	r3, [r4, #4]
340039fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34003a00:	f040 809a 	bne.w	34003b38 <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34003a04:	4b49      	ldr	r3, [pc, #292]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
34003a06:	685b      	ldr	r3, [r3, #4]
34003a08:	06db      	lsls	r3, r3, #27
34003a0a:	f57f af5d 	bpl.w	340038c8 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34003a0e:	4d47      	ldr	r5, [pc, #284]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
34003a10:	6862      	ldr	r2, [r4, #4]
34003a12:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34003a14:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34003a18:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34003a1c:	4313      	orrs	r3, r2
34003a1e:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34003a20:	f7fe fcdc 	bl	340023dc <HAL_GetTick>
34003a24:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34003a26:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34003a28:	6862      	ldr	r2, [r4, #4]
34003a2a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34003a2e:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34003a32:	f040 80b7 	bne.w	34003ba4 <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34003a36:	f7ff fef3 	bl	34003820 <HAL_RCC_GetCpuClockFreq>
34003a3a:	4b3d      	ldr	r3, [pc, #244]	@ (34003b30 <HAL_RCC_ClockConfig+0x270>)
34003a3c:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34003a3e:	6823      	ldr	r3, [r4, #0]
34003a40:	079f      	lsls	r7, r3, #30
34003a42:	f100 80b7 	bmi.w	34003bb4 <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34003a46:	6823      	ldr	r3, [r4, #0]
34003a48:	075e      	lsls	r6, r3, #29
34003a4a:	f100 815c 	bmi.w	34003d06 <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34003a4e:	6823      	ldr	r3, [r4, #0]
34003a50:	0718      	lsls	r0, r3, #28
34003a52:	d513      	bpl.n	34003a7c <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34003a54:	6923      	ldr	r3, [r4, #16]
34003a56:	2b07      	cmp	r3, #7
34003a58:	d904      	bls.n	34003a64 <HAL_RCC_ClockConfig+0x1a4>
34003a5a:	f240 4161 	movw	r1, #1121	@ 0x461
34003a5e:	4832      	ldr	r0, [pc, #200]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
34003a60:	f7fd f9d0 	bl	34000e04 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34003a64:	4a31      	ldr	r2, [pc, #196]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
34003a66:	6921      	ldr	r1, [r4, #16]
34003a68:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34003a6a:	f003 0307 	and.w	r3, r3, #7
34003a6e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34003a70:	bf3f      	itttt	cc
34003a72:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34003a74:	f023 0307 	biccc.w	r3, r3, #7
34003a78:	430b      	orrcc	r3, r1
34003a7a:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34003a7c:	6823      	ldr	r3, [r4, #0]
34003a7e:	06d9      	lsls	r1, r3, #27
34003a80:	d516      	bpl.n	34003ab0 <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34003a82:	6963      	ldr	r3, [r4, #20]
34003a84:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34003a88:	d006      	beq.n	34003a98 <HAL_RCC_ClockConfig+0x1d8>
34003a8a:	2b40      	cmp	r3, #64	@ 0x40
34003a8c:	d004      	beq.n	34003a98 <HAL_RCC_ClockConfig+0x1d8>
34003a8e:	f240 416b 	movw	r1, #1131	@ 0x46b
34003a92:	4825      	ldr	r0, [pc, #148]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
34003a94:	f7fd f9b6 	bl	34000e04 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34003a98:	4a24      	ldr	r2, [pc, #144]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
34003a9a:	6961      	ldr	r1, [r4, #20]
34003a9c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34003a9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34003aa2:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34003aa4:	bf3f      	itttt	cc
34003aa6:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34003aa8:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
34003aac:	430b      	orrcc	r3, r1
34003aae:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34003ab0:	6823      	ldr	r3, [r4, #0]
34003ab2:	069a      	lsls	r2, r3, #26
34003ab4:	d517      	bpl.n	34003ae6 <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34003ab6:	69a3      	ldr	r3, [r4, #24]
34003ab8:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34003abc:	d007      	beq.n	34003ace <HAL_RCC_ClockConfig+0x20e>
34003abe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34003ac2:	d004      	beq.n	34003ace <HAL_RCC_ClockConfig+0x20e>
34003ac4:	f240 4175 	movw	r1, #1141	@ 0x475
34003ac8:	4817      	ldr	r0, [pc, #92]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
34003aca:	f7fd f99b 	bl	34000e04 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34003ace:	4a17      	ldr	r2, [pc, #92]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
34003ad0:	69a1      	ldr	r1, [r4, #24]
34003ad2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34003ad4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34003ad8:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34003ada:	bf3f      	itttt	cc
34003adc:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34003ade:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
34003ae2:	430b      	orrcc	r3, r1
34003ae4:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34003ae6:	6823      	ldr	r3, [r4, #0]
34003ae8:	065b      	lsls	r3, r3, #25
34003aea:	d517      	bpl.n	34003b1c <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34003aec:	69e3      	ldr	r3, [r4, #28]
34003aee:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34003af2:	d007      	beq.n	34003b04 <HAL_RCC_ClockConfig+0x244>
34003af4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34003af8:	d004      	beq.n	34003b04 <HAL_RCC_ClockConfig+0x244>
34003afa:	f240 417f 	movw	r1, #1151	@ 0x47f
34003afe:	480a      	ldr	r0, [pc, #40]	@ (34003b28 <HAL_RCC_ClockConfig+0x268>)
34003b00:	f7fd f980 	bl	34000e04 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34003b04:	4a09      	ldr	r2, [pc, #36]	@ (34003b2c <HAL_RCC_ClockConfig+0x26c>)
34003b06:	69e1      	ldr	r1, [r4, #28]
34003b08:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34003b0a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34003b0e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34003b10:	bf3f      	itttt	cc
34003b12:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34003b14:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
34003b18:	430b      	orrcc	r3, r1
34003b1a:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34003b1c:	4b05      	ldr	r3, [pc, #20]	@ (34003b34 <HAL_RCC_ClockConfig+0x274>)
}
34003b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
34003b22:	6818      	ldr	r0, [r3, #0]
34003b24:	f7fe bc16 	b.w	34002354 <HAL_InitTick>
34003b28:	34038b9a 	.word	0x34038b9a
34003b2c:	56028000 	.word	0x56028000
34003b30:	3403a690 	.word	0x3403a690
34003b34:	3403a698 	.word	0x3403a698
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34003b38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34003b3c:	d126      	bne.n	34003b8c <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34003b3e:	6a23      	ldr	r3, [r4, #32]
34003b40:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34003b44:	d004      	beq.n	34003b50 <HAL_RCC_ClockConfig+0x290>
34003b46:	f240 31c5 	movw	r1, #965	@ 0x3c5
34003b4a:	487b      	ldr	r0, [pc, #492]	@ (34003d38 <HAL_RCC_ClockConfig+0x478>)
34003b4c:	f7fd f95a 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34003b50:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003b52:	3b01      	subs	r3, #1
34003b54:	2bff      	cmp	r3, #255	@ 0xff
34003b56:	d904      	bls.n	34003b62 <HAL_RCC_ClockConfig+0x2a2>
34003b58:	f240 31c6 	movw	r1, #966	@ 0x3c6
34003b5c:	4876      	ldr	r0, [pc, #472]	@ (34003d38 <HAL_RCC_ClockConfig+0x478>)
34003b5e:	f7fd f951 	bl	34000e04 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34003b62:	4e76      	ldr	r6, [pc, #472]	@ (34003d3c <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34003b64:	6a25      	ldr	r5, [r4, #32]
34003b66:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
34003b6a:	4629      	mov	r1, r5
34003b6c:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34003b70:	f7ff fa48 	bl	34003004 <RCC_IC_CheckPLLSources>
34003b74:	2801      	cmp	r0, #1
34003b76:	f47f aea7 	bne.w	340038c8 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34003b7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34003b7c:	3b01      	subs	r3, #1
34003b7e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
34003b82:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34003b86:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
34003b8a:	e740      	b.n	34003a0e <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34003b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34003b90:	d105      	bne.n	34003b9e <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
34003b92:	f7ff f8b1 	bl	34002cf8 <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
34003b96:	2800      	cmp	r0, #0
34003b98:	f47f af39 	bne.w	34003a0e <HAL_RCC_ClockConfig+0x14e>
34003b9c:	e694      	b.n	340038c8 <HAL_RCC_ClockConfig+0x8>
34003b9e:	f7ff f8a3 	bl	34002ce8 <LL_RCC_HSI_IsReady>
34003ba2:	e7f8      	b.n	34003b96 <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34003ba4:	f7fe fc1a 	bl	340023dc <HAL_GetTick>
34003ba8:	1b80      	subs	r0, r0, r6
34003baa:	42b8      	cmp	r0, r7
34003bac:	f67f af3b 	bls.w	34003a26 <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
34003bb0:	2003      	movs	r0, #3
34003bb2:	e68a      	b.n	340038ca <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34003bb4:	68a3      	ldr	r3, [r4, #8]
34003bb6:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34003bba:	d004      	beq.n	34003bc6 <HAL_RCC_ClockConfig+0x306>
34003bbc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
34003bc0:	485d      	ldr	r0, [pc, #372]	@ (34003d38 <HAL_RCC_ClockConfig+0x478>)
34003bc2:	f7fd f91f 	bl	34000e04 <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34003bc6:	68a3      	ldr	r3, [r4, #8]
34003bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34003bcc:	d11e      	bne.n	34003c0c <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34003bce:	4b5b      	ldr	r3, [pc, #364]	@ (34003d3c <HAL_RCC_ClockConfig+0x47c>)
34003bd0:	685b      	ldr	r3, [r3, #4]
34003bd2:	06dd      	lsls	r5, r3, #27
34003bd4:	f57f ae78 	bpl.w	340038c8 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34003bd8:	4d58      	ldr	r5, [pc, #352]	@ (34003d3c <HAL_RCC_ClockConfig+0x47c>)
34003bda:	68a2      	ldr	r2, [r4, #8]
34003bdc:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34003bde:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34003be2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34003be6:	4313      	orrs	r3, r2
34003be8:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34003bea:	f7fe fbf7 	bl	340023dc <HAL_GetTick>
34003bee:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34003bf0:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34003bf2:	68a2      	ldr	r2, [r4, #8]
34003bf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34003bf8:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34003bfc:	f43f af23 	beq.w	34003a46 <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34003c00:	f7fe fbec 	bl	340023dc <HAL_GetTick>
34003c04:	1b80      	subs	r0, r0, r6
34003c06:	42b8      	cmp	r0, r7
34003c08:	d9f2      	bls.n	34003bf0 <HAL_RCC_ClockConfig+0x330>
34003c0a:	e7d1      	b.n	34003bb0 <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34003c0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34003c10:	d16f      	bne.n	34003cf2 <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34003c12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34003c14:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34003c18:	d004      	beq.n	34003c24 <HAL_RCC_ClockConfig+0x364>
34003c1a:	f240 410e 	movw	r1, #1038	@ 0x40e
34003c1e:	4846      	ldr	r0, [pc, #280]	@ (34003d38 <HAL_RCC_ClockConfig+0x478>)
34003c20:	f7fd f8f0 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34003c24:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34003c26:	3b01      	subs	r3, #1
34003c28:	2bff      	cmp	r3, #255	@ 0xff
34003c2a:	d904      	bls.n	34003c36 <HAL_RCC_ClockConfig+0x376>
34003c2c:	f240 410f 	movw	r1, #1039	@ 0x40f
34003c30:	4841      	ldr	r0, [pc, #260]	@ (34003d38 <HAL_RCC_ClockConfig+0x478>)
34003c32:	f7fd f8e7 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34003c36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34003c38:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34003c3c:	d004      	beq.n	34003c48 <HAL_RCC_ClockConfig+0x388>
34003c3e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
34003c42:	483d      	ldr	r0, [pc, #244]	@ (34003d38 <HAL_RCC_ClockConfig+0x478>)
34003c44:	f7fd f8de 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34003c48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34003c4a:	3b01      	subs	r3, #1
34003c4c:	2bff      	cmp	r3, #255	@ 0xff
34003c4e:	d904      	bls.n	34003c5a <HAL_RCC_ClockConfig+0x39a>
34003c50:	f240 4111 	movw	r1, #1041	@ 0x411
34003c54:	4838      	ldr	r0, [pc, #224]	@ (34003d38 <HAL_RCC_ClockConfig+0x478>)
34003c56:	f7fd f8d5 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
34003c5a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34003c5c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34003c60:	d004      	beq.n	34003c6c <HAL_RCC_ClockConfig+0x3ac>
34003c62:	f240 4112 	movw	r1, #1042	@ 0x412
34003c66:	4834      	ldr	r0, [pc, #208]	@ (34003d38 <HAL_RCC_ClockConfig+0x478>)
34003c68:	f7fd f8cc 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
34003c6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34003c6e:	3b01      	subs	r3, #1
34003c70:	2bff      	cmp	r3, #255	@ 0xff
34003c72:	d904      	bls.n	34003c7e <HAL_RCC_ClockConfig+0x3be>
34003c74:	f240 4113 	movw	r1, #1043	@ 0x413
34003c78:	482f      	ldr	r0, [pc, #188]	@ (34003d38 <HAL_RCC_ClockConfig+0x478>)
34003c7a:	f7fd f8c3 	bl	34000e04 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34003c7e:	4d2f      	ldr	r5, [pc, #188]	@ (34003d3c <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34003c80:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
34003c84:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
34003c88:	4641      	mov	r1, r8
34003c8a:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34003c8e:	f7ff f9b9 	bl	34003004 <RCC_IC_CheckPLLSources>
34003c92:	2801      	cmp	r0, #1
34003c94:	f47f ae18 	bne.w	340038c8 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34003c98:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34003c9c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
34003c9e:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34003ca2:	4639      	mov	r1, r7
34003ca4:	f7ff f9ae 	bl	34003004 <RCC_IC_CheckPLLSources>
34003ca8:	2801      	cmp	r0, #1
34003caa:	f47f ae0d 	bne.w	340038c8 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34003cae:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34003cb2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
34003cb4:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34003cb8:	4631      	mov	r1, r6
34003cba:	f7ff f9a3 	bl	34003004 <RCC_IC_CheckPLLSources>
34003cbe:	2801      	cmp	r0, #1
34003cc0:	f47f ae02 	bne.w	340038c8 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34003cc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34003cc6:	3b01      	subs	r3, #1
34003cc8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
34003ccc:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34003cd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34003cd2:	3b01      	subs	r3, #1
34003cd4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
34003cd8:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34003cdc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34003cde:	3b01      	subs	r3, #1
34003ce0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34003ce4:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34003ce8:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34003cec:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
34003cf0:	e772      	b.n	34003bd8 <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34003cf2:	b92b      	cbnz	r3, 34003d00 <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
34003cf4:	f7fe fff8 	bl	34002ce8 <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
34003cf8:	2800      	cmp	r0, #0
34003cfa:	f47f af6d 	bne.w	34003bd8 <HAL_RCC_ClockConfig+0x318>
34003cfe:	e5e3      	b.n	340038c8 <HAL_RCC_ClockConfig+0x8>
34003d00:	f7fe fffa 	bl	34002cf8 <LL_RCC_MSI_IsReady>
34003d04:	e7f8      	b.n	34003cf8 <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34003d06:	68e3      	ldr	r3, [r4, #12]
34003d08:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34003d0c:	d007      	beq.n	34003d1e <HAL_RCC_ClockConfig+0x45e>
34003d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34003d12:	d004      	beq.n	34003d1e <HAL_RCC_ClockConfig+0x45e>
34003d14:	f240 4156 	movw	r1, #1110	@ 0x456
34003d18:	4807      	ldr	r0, [pc, #28]	@ (34003d38 <HAL_RCC_ClockConfig+0x478>)
34003d1a:	f7fd f873 	bl	34000e04 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34003d1e:	4a07      	ldr	r2, [pc, #28]	@ (34003d3c <HAL_RCC_ClockConfig+0x47c>)
34003d20:	68e1      	ldr	r1, [r4, #12]
34003d22:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34003d24:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34003d28:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34003d2a:	bf3f      	itttt	cc
34003d2c:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34003d2e:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
34003d32:	430b      	orrcc	r3, r1
34003d34:	6253      	strcc	r3, [r2, #36]	@ 0x24
34003d36:	e68a      	b.n	34003a4e <HAL_RCC_ClockConfig+0x18e>
34003d38:	34038b9a 	.word	0x34038b9a
34003d3c:	56028000 	.word	0x56028000

34003d40 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34003d40:	4a22      	ldr	r2, [pc, #136]	@ (34003dcc <HAL_RCC_GetSysClockFreq+0x8c>)
{
34003d42:	b510      	push	{r4, lr}
34003d44:	6a13      	ldr	r3, [r2, #32]
34003d46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
34003d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003d4e:	d03a      	beq.n	34003dc6 <HAL_RCC_GetSysClockFreq+0x86>
34003d50:	d805      	bhi.n	34003d5e <HAL_RCC_GetSysClockFreq+0x1e>
34003d52:	b1e3      	cbz	r3, 34003d8e <HAL_RCC_GetSysClockFreq+0x4e>
34003d54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34003d58:	d01f      	beq.n	34003d9a <HAL_RCC_GetSysClockFreq+0x5a>
34003d5a:	2000      	movs	r0, #0
34003d5c:	e01c      	b.n	34003d98 <HAL_RCC_GetSysClockFreq+0x58>
34003d5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34003d62:	d1fa      	bne.n	34003d5a <HAL_RCC_GetSysClockFreq+0x1a>
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34003d64:	f8d2 00c8 	ldr.w	r0, [r2, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34003d68:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34003d6c:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34003d70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34003d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34003d78:	f100 0401 	add.w	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34003d7c:	d020      	beq.n	34003dc0 <HAL_RCC_GetSysClockFreq+0x80>
34003d7e:	d814      	bhi.n	34003daa <HAL_RCC_GetSysClockFreq+0x6a>
34003d80:	b1cb      	cbz	r3, 34003db6 <HAL_RCC_GetSysClockFreq+0x76>
34003d82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34003d86:	d1e8      	bne.n	34003d5a <HAL_RCC_GetSysClockFreq+0x1a>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34003d88:	f003 f982 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
34003d8c:	e015      	b.n	34003dba <HAL_RCC_GetSysClockFreq+0x7a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34003d8e:	6c93      	ldr	r3, [r2, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34003d90:	480f      	ldr	r0, [pc, #60]	@ (34003dd0 <HAL_RCC_GetSysClockFreq+0x90>)
34003d92:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34003d96:	40d8      	lsrs	r0, r3
}
34003d98:	bd10      	pop	{r4, pc}
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34003d9a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        frequency = MSI_VALUE;
34003d9c:	480d      	ldr	r0, [pc, #52]	@ (34003dd4 <HAL_RCC_GetSysClockFreq+0x94>)
34003d9e:	f413 7f00 	tst.w	r3, #512	@ 0x200
34003da2:	4b0d      	ldr	r3, [pc, #52]	@ (34003dd8 <HAL_RCC_GetSysClockFreq+0x98>)
34003da4:	bf08      	it	eq
34003da6:	4618      	moveq	r0, r3
34003da8:	e7f6      	b.n	34003d98 <HAL_RCC_GetSysClockFreq+0x58>
34003daa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34003dae:	d1d4      	bne.n	34003d5a <HAL_RCC_GetSysClockFreq+0x1a>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34003db0:	f003 f9ee 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34003db4:	e001      	b.n	34003dba <HAL_RCC_GetSysClockFreq+0x7a>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34003db6:	f003 f92b 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34003dba:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34003dbe:	e7eb      	b.n	34003d98 <HAL_RCC_GetSysClockFreq+0x58>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34003dc0:	f003 f9a6 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
34003dc4:	e7f9      	b.n	34003dba <HAL_RCC_GetSysClockFreq+0x7a>
  switch (LL_RCC_GetSysClkSource())
34003dc6:	4805      	ldr	r0, [pc, #20]	@ (34003ddc <HAL_RCC_GetSysClockFreq+0x9c>)
34003dc8:	e7e6      	b.n	34003d98 <HAL_RCC_GetSysClockFreq+0x58>
34003dca:	bf00      	nop
34003dcc:	56028000 	.word	0x56028000
34003dd0:	03d09000 	.word	0x03d09000
34003dd4:	00f42400 	.word	0x00f42400
34003dd8:	003d0900 	.word	0x003d0900
34003ddc:	02dc6c00 	.word	0x02dc6c00

34003de0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34003de0:	4a02      	ldr	r2, [pc, #8]	@ (34003dec <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
34003de2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34003de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34003de8:	6553      	str	r3, [r2, #84]	@ 0x54
}
34003dea:	4770      	bx	lr
34003dec:	56028000 	.word	0x56028000

34003df0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34003df0:	4a02      	ldr	r2, [pc, #8]	@ (34003dfc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
34003df2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34003df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34003df8:	6553      	str	r3, [r2, #84]	@ 0x54
}
34003dfa:	4770      	bx	lr
34003dfc:	56028000 	.word	0x56028000

34003e00 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34003e00:	4b02      	ldr	r3, [pc, #8]	@ (34003e0c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
34003e02:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
34003e04:	f3c0 1080 	ubfx	r0, r0, #6, #1
34003e08:	4770      	bx	lr
34003e0a:	bf00      	nop
34003e0c:	56028000 	.word	0x56028000

34003e10 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34003e10:	4b02      	ldr	r3, [pc, #8]	@ (34003e1c <LL_RCC_HSE_IsReady+0xc>)
34003e12:	6858      	ldr	r0, [r3, #4]
}
34003e14:	f3c0 1000 	ubfx	r0, r0, #4, #1
34003e18:	4770      	bx	lr
34003e1a:	bf00      	nop
34003e1c:	56028000 	.word	0x56028000

34003e20 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34003e20:	4b02      	ldr	r3, [pc, #8]	@ (34003e2c <LL_RCC_HSI_IsReady+0xc>)
34003e22:	6858      	ldr	r0, [r3, #4]
}
34003e24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34003e28:	4770      	bx	lr
34003e2a:	bf00      	nop
34003e2c:	56028000 	.word	0x56028000

34003e30 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34003e30:	4b02      	ldr	r3, [pc, #8]	@ (34003e3c <LL_RCC_MSI_IsReady+0xc>)
34003e32:	6858      	ldr	r0, [r3, #4]
}
34003e34:	f3c0 0080 	ubfx	r0, r0, #2, #1
34003e38:	4770      	bx	lr
34003e3a:	bf00      	nop
34003e3c:	56028000 	.word	0x56028000

34003e40 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34003e40:	4b02      	ldr	r3, [pc, #8]	@ (34003e4c <LL_RCC_LSE_IsReady+0xc>)
34003e42:	6858      	ldr	r0, [r3, #4]
}
34003e44:	f3c0 0040 	ubfx	r0, r0, #1, #1
34003e48:	4770      	bx	lr
34003e4a:	bf00      	nop
34003e4c:	56028000 	.word	0x56028000

34003e50 <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34003e50:	4907      	ldr	r1, [pc, #28]	@ (34003e70 <LL_RCC_SetClockSource+0x20>)
{
34003e52:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34003e54:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34003e56:	f3c0 2504 	ubfx	r5, r0, #8, #5
34003e5a:	5863      	ldr	r3, [r4, r1]
34003e5c:	0e02      	lsrs	r2, r0, #24
34003e5e:	40aa      	lsls	r2, r5
34003e60:	f3c0 4007 	ubfx	r0, r0, #16, #8
34003e64:	ea23 0302 	bic.w	r3, r3, r2
34003e68:	40a8      	lsls	r0, r5
34003e6a:	4303      	orrs	r3, r0
34003e6c:	5063      	str	r3, [r4, r1]
}
34003e6e:	bd30      	pop	{r4, r5, pc}
34003e70:	56028144 	.word	0x56028144

34003e74 <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34003e74:	4b05      	ldr	r3, [pc, #20]	@ (34003e8c <LL_RCC_GetClockSource+0x18>)
34003e76:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34003e78:	58d1      	ldr	r1, [r2, r3]
34003e7a:	f3c0 2204 	ubfx	r2, r0, #8, #5
34003e7e:	0e03      	lsrs	r3, r0, #24
34003e80:	4093      	lsls	r3, r2
34003e82:	400b      	ands	r3, r1
34003e84:	40d3      	lsrs	r3, r2
}
34003e86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
34003e8a:	4770      	bx	lr
34003e8c:	56028144 	.word	0x56028144

34003e90 <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34003e90:	4b02      	ldr	r3, [pc, #8]	@ (34003e9c <LL_RCC_IC7_IsEnabled+0xc>)
34003e92:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34003e96:	f3c0 1080 	ubfx	r0, r0, #6, #1
34003e9a:	4770      	bx	lr
34003e9c:	56028000 	.word	0x56028000

34003ea0 <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34003ea0:	4b03      	ldr	r3, [pc, #12]	@ (34003eb0 <LL_RCC_IC7_GetDivider+0x10>)
34003ea2:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
34003ea6:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34003eaa:	3001      	adds	r0, #1
34003eac:	4770      	bx	lr
34003eae:	bf00      	nop
34003eb0:	56028000 	.word	0x56028000

34003eb4 <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34003eb4:	4b02      	ldr	r3, [pc, #8]	@ (34003ec0 <LL_RCC_IC8_IsEnabled+0xc>)
34003eb6:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34003eba:	f3c0 10c0 	ubfx	r0, r0, #7, #1
34003ebe:	4770      	bx	lr
34003ec0:	56028000 	.word	0x56028000

34003ec4 <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34003ec4:	4b03      	ldr	r3, [pc, #12]	@ (34003ed4 <LL_RCC_IC8_GetDivider+0x10>)
34003ec6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
34003eca:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34003ece:	3001      	adds	r0, #1
34003ed0:	4770      	bx	lr
34003ed2:	bf00      	nop
34003ed4:	56028000 	.word	0x56028000

34003ed8 <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34003ed8:	4b02      	ldr	r3, [pc, #8]	@ (34003ee4 <LL_RCC_IC9_IsEnabled+0xc>)
34003eda:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34003ede:	f3c0 2000 	ubfx	r0, r0, #8, #1
34003ee2:	4770      	bx	lr
34003ee4:	56028000 	.word	0x56028000

34003ee8 <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34003ee8:	4b03      	ldr	r3, [pc, #12]	@ (34003ef8 <LL_RCC_IC9_GetDivider+0x10>)
34003eea:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
34003eee:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34003ef2:	3001      	adds	r0, #1
34003ef4:	4770      	bx	lr
34003ef6:	bf00      	nop
34003ef8:	56028000 	.word	0x56028000

34003efc <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34003efc:	4b02      	ldr	r3, [pc, #8]	@ (34003f08 <LL_RCC_IC14_IsEnabled+0xc>)
34003efe:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34003f02:	f3c0 3040 	ubfx	r0, r0, #13, #1
34003f06:	4770      	bx	lr
34003f08:	56028000 	.word	0x56028000

34003f0c <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34003f0c:	4b03      	ldr	r3, [pc, #12]	@ (34003f1c <LL_RCC_IC14_GetDivider+0x10>)
34003f0e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
34003f12:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34003f16:	3001      	adds	r0, #1
34003f18:	4770      	bx	lr
34003f1a:	bf00      	nop
34003f1c:	56028000 	.word	0x56028000

34003f20 <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34003f20:	4b02      	ldr	r3, [pc, #8]	@ (34003f2c <LL_RCC_IC15_IsEnabled+0xc>)
34003f22:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34003f26:	f3c0 3080 	ubfx	r0, r0, #14, #1
34003f2a:	4770      	bx	lr
34003f2c:	56028000 	.word	0x56028000

34003f30 <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34003f30:	4b03      	ldr	r3, [pc, #12]	@ (34003f40 <LL_RCC_IC15_GetDivider+0x10>)
34003f32:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
34003f36:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34003f3a:	3001      	adds	r0, #1
34003f3c:	4770      	bx	lr
34003f3e:	bf00      	nop
34003f40:	56028000 	.word	0x56028000

34003f44 <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34003f44:	4b02      	ldr	r3, [pc, #8]	@ (34003f50 <RCCEx_GetHCLKFreq+0xc>)
34003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34003f48:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34003f4c:	40d8      	lsrs	r0, r3
34003f4e:	4770      	bx	lr
34003f50:	56028000 	.word	0x56028000

34003f54 <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
34003f54:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34003f58:	b508      	push	{r3, lr}
  switch (PLLsource)
34003f5a:	d023      	beq.n	34003fa4 <RCCEx_GetPLLSourceFreq+0x50>
34003f5c:	d805      	bhi.n	34003f6a <RCCEx_GetPLLSourceFreq+0x16>
34003f5e:	b148      	cbz	r0, 34003f74 <RCCEx_GetPLLSourceFreq+0x20>
34003f60:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34003f64:	d011      	beq.n	34003f8a <RCCEx_GetPLLSourceFreq+0x36>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34003f66:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
34003f68:	bd08      	pop	{r3, pc}
  switch (PLLsource)
34003f6a:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34003f6e:	d1fa      	bne.n	34003f66 <RCCEx_GetPLLSourceFreq+0x12>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34003f70:	480f      	ldr	r0, [pc, #60]	@ (34003fb0 <RCCEx_GetPLLSourceFreq+0x5c>)
34003f72:	e7f9      	b.n	34003f68 <RCCEx_GetPLLSourceFreq+0x14>
      if (LL_RCC_HSI_IsReady() != 0U)
34003f74:	f7ff ff54 	bl	34003e20 <LL_RCC_HSI_IsReady>
34003f78:	2800      	cmp	r0, #0
34003f7a:	d0f4      	beq.n	34003f66 <RCCEx_GetPLLSourceFreq+0x12>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34003f7c:	4b0d      	ldr	r3, [pc, #52]	@ (34003fb4 <RCCEx_GetPLLSourceFreq+0x60>)
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34003f7e:	480e      	ldr	r0, [pc, #56]	@ (34003fb8 <RCCEx_GetPLLSourceFreq+0x64>)
34003f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34003f82:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34003f86:	40d8      	lsrs	r0, r3
34003f88:	e7ee      	b.n	34003f68 <RCCEx_GetPLLSourceFreq+0x14>
      if (LL_RCC_MSI_IsReady() != 0U)
34003f8a:	f7ff ff51 	bl	34003e30 <LL_RCC_MSI_IsReady>
34003f8e:	2800      	cmp	r0, #0
34003f90:	d0e9      	beq.n	34003f66 <RCCEx_GetPLLSourceFreq+0x12>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34003f92:	4b08      	ldr	r3, [pc, #32]	@ (34003fb4 <RCCEx_GetPLLSourceFreq+0x60>)
          pllinputfreq = MSI_VALUE;
34003f94:	4809      	ldr	r0, [pc, #36]	@ (34003fbc <RCCEx_GetPLLSourceFreq+0x68>)
34003f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34003f98:	f413 7f00 	tst.w	r3, #512	@ 0x200
34003f9c:	4b08      	ldr	r3, [pc, #32]	@ (34003fc0 <RCCEx_GetPLLSourceFreq+0x6c>)
34003f9e:	bf08      	it	eq
34003fa0:	4618      	moveq	r0, r3
34003fa2:	e7e1      	b.n	34003f68 <RCCEx_GetPLLSourceFreq+0x14>
      if (LL_RCC_HSE_IsReady() != 0U)
34003fa4:	f7ff ff34 	bl	34003e10 <LL_RCC_HSE_IsReady>
34003fa8:	2800      	cmp	r0, #0
34003faa:	d0dc      	beq.n	34003f66 <RCCEx_GetPLLSourceFreq+0x12>
        pllinputfreq = HSE_VALUE;
34003fac:	4805      	ldr	r0, [pc, #20]	@ (34003fc4 <RCCEx_GetPLLSourceFreq+0x70>)
34003fae:	e7db      	b.n	34003f68 <RCCEx_GetPLLSourceFreq+0x14>
34003fb0:	00bb8000 	.word	0x00bb8000
34003fb4:	56028000 	.word	0x56028000
34003fb8:	03d09000 	.word	0x03d09000
34003fbc:	00f42400 	.word	0x00f42400
34003fc0:	003d0900 	.word	0x003d0900
34003fc4:	02dc6c00 	.word	0x02dc6c00

34003fc8 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34003fc8:	ee07 2a10 	vmov	s14, r2
34003fcc:	ee06 3a10 	vmov	s12, r3
34003fd0:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34003fd4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
34003fd8:	eddf 5a10 	vldr	s11, [pc, #64]	@ 3400401c <RCCEx_CalcPLLFreq+0x54>
34003fdc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
34003fe0:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34003fe4:	eea6 7a25 	vfma.f32	s14, s12, s11
34003fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
34003fec:	ee67 7a87 	vmul.f32	s15, s15, s14
34003ff0:	eeb8 7a66 	vcvt.f32.u32	s14, s13
34003ff4:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
34003ff8:	eddd 7a00 	vldr	s15, [sp]
34003ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
34004000:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
34004004:	eddd 7a01 	vldr	s15, [sp, #4]
34004008:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400400c:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
34004010:	eefc 7ac7 	vcvt.u32.f32	s15, s14
34004014:	ee17 0a90 	vmov	r0, s15
34004018:	4770      	bx	lr
3400401a:	bf00      	nop
3400401c:	33800000 	.word	0x33800000

34004020 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34004020:	e9d0 2300 	ldrd	r2, r3, [r0]
34004024:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
34004028:	431a      	orrs	r2, r3
{
3400402a:	b570      	push	{r4, r5, r6, lr}
3400402c:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
3400402e:	d103      	bne.n	34004038 <HAL_RCCEx_PeriphCLKConfig+0x18>
34004030:	2193      	movs	r1, #147	@ 0x93
34004032:	48b6      	ldr	r0, [pc, #728]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
34004034:	f7fc fee6 	bl	34000e04 <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34004038:	6823      	ldr	r3, [r4, #0]
3400403a:	011a      	lsls	r2, r3, #4
3400403c:	f140 8090 	bpl.w	34004160 <HAL_RCCEx_PeriphCLKConfig+0x140>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
34004040:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34004044:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34004048:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3400404c:	d05a      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400404e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34004052:	d057      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34004054:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
34004058:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
3400405c:	d052      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400405e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34004062:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
34004066:	d04d      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34004068:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
3400406c:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
34004070:	d048      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34004072:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34004076:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
3400407a:	d043      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400407c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34004080:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
34004084:	d03e      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34004086:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400408a:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
3400408e:	d039      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34004090:	499f      	ldr	r1, [pc, #636]	@ (34004310 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
34004092:	428a      	cmp	r2, r1
34004094:	d036      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34004096:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3400409a:	428a      	cmp	r2, r1
3400409c:	d032      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3400409e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340040a2:	428a      	cmp	r2, r1
340040a4:	d02e      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040a6:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
340040aa:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340040ae:	4288      	cmp	r0, r1
340040b0:	d028      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040b2:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
340040b6:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
340040ba:	4288      	cmp	r0, r1
340040bc:	d022      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040be:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
340040c2:	428a      	cmp	r2, r1
340040c4:	d01e      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040c6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340040ca:	428a      	cmp	r2, r1
340040cc:	d01a      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040ce:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340040d2:	428a      	cmp	r2, r1
340040d4:	d016      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040d6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340040da:	428a      	cmp	r2, r1
340040dc:	d012      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040de:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340040e2:	428a      	cmp	r2, r1
340040e4:	d00e      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040e6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340040ea:	428a      	cmp	r2, r1
340040ec:	d00a      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040ee:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340040f2:	428a      	cmp	r2, r1
340040f4:	d006      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040f6:	4a87      	ldr	r2, [pc, #540]	@ (34004314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
340040f8:	4293      	cmp	r3, r2
340040fa:	d003      	beq.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340040fc:	2199      	movs	r1, #153	@ 0x99
340040fe:	4883      	ldr	r0, [pc, #524]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
34004100:	f7fc fe80 	bl	34000e04 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34004104:	4b84      	ldr	r3, [pc, #528]	@ (34004318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34004106:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
3400410a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400410e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
34004112:	f041 86e9 	bne.w	34005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34004116:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
3400411a:	d109      	bne.n	34004130 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
3400411c:	f7fe f95e 	bl	340023dc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34004120:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
34004124:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
34004126:	f7ff fe8b 	bl	34003e40 <LL_RCC_LSE_IsReady>
3400412a:	2800      	cmp	r0, #0
3400412c:	f001 86ed 	beq.w	34005f0a <HAL_RCCEx_PeriphCLKConfig+0x1eea>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34004130:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34004134:	4a78      	ldr	r2, [pc, #480]	@ (34004318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
34004136:	f403 7040 	and.w	r0, r3, #768	@ 0x300
3400413a:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
3400413e:	d108      	bne.n	34004152 <HAL_RCCEx_PeriphCLKConfig+0x132>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34004140:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
34004144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34004148:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
3400414c:	430b      	orrs	r3, r1
3400414e:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34004152:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34004156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3400415a:	4303      	orrs	r3, r0
3400415c:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34004160:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
34004162:	6823      	ldr	r3, [r4, #0]
34004164:	075e      	lsls	r6, r3, #29
34004166:	d538      	bpl.n	340041da <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
34004168:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3400416c:	2b07      	cmp	r3, #7
3400416e:	d903      	bls.n	34004178 <HAL_RCCEx_PeriphCLKConfig+0x158>
34004170:	21df      	movs	r1, #223	@ 0xdf
34004172:	4866      	ldr	r0, [pc, #408]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
34004174:	f7fc fe46 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34004178:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3400417c:	2b04      	cmp	r3, #4
3400417e:	f041 86cd 	bne.w	34005f1c <HAL_RCCEx_PeriphCLKConfig+0x1efc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34004182:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34004184:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004188:	d003      	beq.n	34004192 <HAL_RCCEx_PeriphCLKConfig+0x172>
3400418a:	21e4      	movs	r1, #228	@ 0xe4
3400418c:	485f      	ldr	r0, [pc, #380]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
3400418e:	f7fc fe39 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34004192:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004194:	3b01      	subs	r3, #1
34004196:	2bff      	cmp	r3, #255	@ 0xff
34004198:	d903      	bls.n	340041a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
3400419a:	21e5      	movs	r1, #229	@ 0xe5
3400419c:	485b      	ldr	r0, [pc, #364]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
3400419e:	f7fc fe31 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340041a2:	4a5d      	ldr	r2, [pc, #372]	@ (34004318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
340041a4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340041a6:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340041aa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340041ac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340041b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340041b4:	3901      	subs	r1, #1
340041b6:	4303      	orrs	r3, r0
340041b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340041bc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340041c0:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340041c2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
340041c6:	4a54      	ldr	r2, [pc, #336]	@ (34004318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
340041c8:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
340041cc:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340041d0:	f023 0307 	bic.w	r3, r3, #7
340041d4:	430b      	orrs	r3, r1
340041d6:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
340041da:	6863      	ldr	r3, [r4, #4]
340041dc:	0258      	lsls	r0, r3, #9
340041de:	d539      	bpl.n	34004254 <HAL_RCCEx_PeriphCLKConfig+0x234>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
340041e0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
340041e4:	4a4d      	ldr	r2, [pc, #308]	@ (3400431c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
340041e6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340041ea:	4293      	cmp	r3, r2
340041ec:	d004      	beq.n	340041f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
340041ee:	f240 112f 	movw	r1, #303	@ 0x12f
340041f2:	4846      	ldr	r0, [pc, #280]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
340041f4:	f7fc fe06 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
340041f8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
340041fc:	4a48      	ldr	r2, [pc, #288]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0x300>)
340041fe:	4293      	cmp	r3, r2
34004200:	f041 8748 	bne.w	34006094 <HAL_RCCEx_PeriphCLKConfig+0x2074>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34004204:	69a3      	ldr	r3, [r4, #24]
34004206:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400420a:	d004      	beq.n	34004216 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
3400420c:	f44f 719a 	mov.w	r1, #308	@ 0x134
34004210:	483e      	ldr	r0, [pc, #248]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
34004212:	f7fc fdf7 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34004216:	69e3      	ldr	r3, [r4, #28]
34004218:	3b01      	subs	r3, #1
3400421a:	2bff      	cmp	r3, #255	@ 0xff
3400421c:	d904      	bls.n	34004228 <HAL_RCCEx_PeriphCLKConfig+0x208>
3400421e:	f240 1135 	movw	r1, #309	@ 0x135
34004222:	483a      	ldr	r0, [pc, #232]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
34004224:	f7fc fdee 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34004228:	4a3b      	ldr	r2, [pc, #236]	@ (34004318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
3400422a:	69e1      	ldr	r1, [r4, #28]
3400422c:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34004230:	69a0      	ldr	r0, [r4, #24]
34004232:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004236:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400423a:	3901      	subs	r1, #1
3400423c:	4303      	orrs	r3, r0
3400423e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004242:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34004246:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34004248:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400424c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
34004250:	f7ff fdfe 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
34004254:	6863      	ldr	r3, [r4, #4]
34004256:	0219      	lsls	r1, r3, #8
34004258:	d539      	bpl.n	340042ce <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
3400425a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
3400425e:	4a31      	ldr	r2, [pc, #196]	@ (34004324 <HAL_RCCEx_PeriphCLKConfig+0x304>)
34004260:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34004264:	4293      	cmp	r3, r2
34004266:	d004      	beq.n	34004272 <HAL_RCCEx_PeriphCLKConfig+0x252>
34004268:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
3400426c:	4827      	ldr	r0, [pc, #156]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
3400426e:	f7fc fdc9 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34004272:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34004276:	4a2c      	ldr	r2, [pc, #176]	@ (34004328 <HAL_RCCEx_PeriphCLKConfig+0x308>)
34004278:	4293      	cmp	r3, r2
3400427a:	f041 873b 	bne.w	340060f4 <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400427e:	69a3      	ldr	r3, [r4, #24]
34004280:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004284:	d004      	beq.n	34004290 <HAL_RCCEx_PeriphCLKConfig+0x270>
34004286:	f240 1161 	movw	r1, #353	@ 0x161
3400428a:	4820      	ldr	r0, [pc, #128]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
3400428c:	f7fc fdba 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34004290:	69e3      	ldr	r3, [r4, #28]
34004292:	3b01      	subs	r3, #1
34004294:	2bff      	cmp	r3, #255	@ 0xff
34004296:	d904      	bls.n	340042a2 <HAL_RCCEx_PeriphCLKConfig+0x282>
34004298:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3400429c:	481b      	ldr	r0, [pc, #108]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
3400429e:	f7fc fdb1 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340042a2:	4a1d      	ldr	r2, [pc, #116]	@ (34004318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
340042a4:	69e1      	ldr	r1, [r4, #28]
340042a6:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340042aa:	69a0      	ldr	r0, [r4, #24]
340042ac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340042b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340042b4:	3901      	subs	r1, #1
340042b6:	4303      	orrs	r3, r0
340042b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340042bc:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340042c0:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340042c2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340042c6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
340042ca:	f7ff fdc1 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
340042ce:	6863      	ldr	r3, [r4, #4]
340042d0:	01da      	lsls	r2, r3, #7
340042d2:	d54e      	bpl.n	34004372 <HAL_RCCEx_PeriphCLKConfig+0x352>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
340042d4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
340042d8:	4a14      	ldr	r2, [pc, #80]	@ (3400432c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
340042da:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340042de:	4293      	cmp	r3, r2
340042e0:	d004      	beq.n	340042ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
340042e2:	f240 1189 	movw	r1, #393	@ 0x189
340042e6:	4809      	ldr	r0, [pc, #36]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
340042e8:	f7fc fd8c 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
340042ec:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
340042f0:	4a0f      	ldr	r2, [pc, #60]	@ (34004330 <HAL_RCCEx_PeriphCLKConfig+0x310>)
340042f2:	4293      	cmp	r3, r2
340042f4:	f041 872e 	bne.w	34006154 <HAL_RCCEx_PeriphCLKConfig+0x2134>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
340042f8:	69a3      	ldr	r3, [r4, #24]
340042fa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340042fe:	d019      	beq.n	34004334 <HAL_RCCEx_PeriphCLKConfig+0x314>
34004300:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
34004304:	4801      	ldr	r0, [pc, #4]	@ (3400430c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
34004306:	f7fc fd7d 	bl	34000e04 <assert_failed>
3400430a:	e013      	b.n	34004334 <HAL_RCCEx_PeriphCLKConfig+0x314>
3400430c:	34038c3d 	.word	0x34038c3d
34004310:	00010300 	.word	0x00010300
34004314:	0003e300 	.word	0x0003e300
34004318:	56028000 	.word	0x56028000
3400431c:	03000014 	.word	0x03000014
34004320:	03020014 	.word	0x03020014
34004324:	03000414 	.word	0x03000414
34004328:	03020414 	.word	0x03020414
3400432c:	03000814 	.word	0x03000814
34004330:	03020814 	.word	0x03020814
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34004334:	69e3      	ldr	r3, [r4, #28]
34004336:	3b01      	subs	r3, #1
34004338:	2bff      	cmp	r3, #255	@ 0xff
3400433a:	d904      	bls.n	34004346 <HAL_RCCEx_PeriphCLKConfig+0x326>
3400433c:	f240 118f 	movw	r1, #399	@ 0x18f
34004340:	48c1      	ldr	r0, [pc, #772]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34004342:	f7fc fd5f 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34004346:	4ac1      	ldr	r2, [pc, #772]	@ (3400464c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
34004348:	69e1      	ldr	r1, [r4, #28]
3400434a:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
3400434e:	69a0      	ldr	r0, [r4, #24]
34004350:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004354:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004358:	3901      	subs	r1, #1
3400435a:	4303      	orrs	r3, r0
3400435c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004360:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34004364:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34004366:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3400436a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
3400436e:	f7ff fd6f 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
34004372:	6823      	ldr	r3, [r4, #0]
34004374:	051b      	lsls	r3, r3, #20
34004376:	d53c      	bpl.n	340043f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
34004378:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
3400437c:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34004380:	d004      	beq.n	3400438c <HAL_RCCEx_PeriphCLKConfig+0x36c>
34004382:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
34004386:	48b0      	ldr	r0, [pc, #704]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34004388:	f7fc fd3c 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
3400438c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34004390:	2b20      	cmp	r3, #32
34004392:	f041 870f 	bne.w	340061b4 <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34004396:	69a3      	ldr	r3, [r4, #24]
34004398:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400439c:	d004      	beq.n	340043a8 <HAL_RCCEx_PeriphCLKConfig+0x388>
3400439e:	f240 11bb 	movw	r1, #443	@ 0x1bb
340043a2:	48a9      	ldr	r0, [pc, #676]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340043a4:	f7fc fd2e 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340043a8:	69e3      	ldr	r3, [r4, #28]
340043aa:	3b01      	subs	r3, #1
340043ac:	2bff      	cmp	r3, #255	@ 0xff
340043ae:	d904      	bls.n	340043ba <HAL_RCCEx_PeriphCLKConfig+0x39a>
340043b0:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
340043b4:	48a4      	ldr	r0, [pc, #656]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340043b6:	f7fc fd25 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340043ba:	4aa4      	ldr	r2, [pc, #656]	@ (3400464c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
340043bc:	69e1      	ldr	r1, [r4, #28]
340043be:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340043c2:	69a0      	ldr	r0, [r4, #24]
340043c4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340043c8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340043cc:	3901      	subs	r1, #1
340043ce:	4303      	orrs	r3, r0
340043d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340043d4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340043d8:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340043da:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
340043de:	4a9b      	ldr	r2, [pc, #620]	@ (3400464c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
340043e0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
340043e4:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
340043e8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340043ec:	430b      	orrs	r3, r1
340043ee:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
340043f2:	6823      	ldr	r3, [r4, #0]
340043f4:	005e      	lsls	r6, r3, #1
340043f6:	d539      	bpl.n	3400446c <HAL_RCCEx_PeriphCLKConfig+0x44c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
340043f8:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
340043fc:	4a94      	ldr	r2, [pc, #592]	@ (34004650 <HAL_RCCEx_PeriphCLKConfig+0x630>)
340043fe:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34004402:	4293      	cmp	r3, r2
34004404:	d004      	beq.n	34004410 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
34004406:	f240 11e3 	movw	r1, #483	@ 0x1e3
3400440a:	488f      	ldr	r0, [pc, #572]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
3400440c:	f7fc fcfa 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34004410:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34004414:	4a8f      	ldr	r2, [pc, #572]	@ (34004654 <HAL_RCCEx_PeriphCLKConfig+0x634>)
34004416:	4293      	cmp	r3, r2
34004418:	f041 86fa 	bne.w	34006210 <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400441c:	6a23      	ldr	r3, [r4, #32]
3400441e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004422:	d004      	beq.n	3400442e <HAL_RCCEx_PeriphCLKConfig+0x40e>
34004424:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
34004428:	4887      	ldr	r0, [pc, #540]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
3400442a:	f7fc fceb 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400442e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34004430:	3b01      	subs	r3, #1
34004432:	2bff      	cmp	r3, #255	@ 0xff
34004434:	d904      	bls.n	34004440 <HAL_RCCEx_PeriphCLKConfig+0x420>
34004436:	f240 11e9 	movw	r1, #489	@ 0x1e9
3400443a:	4883      	ldr	r0, [pc, #524]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
3400443c:	f7fc fce2 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34004440:	4a82      	ldr	r2, [pc, #520]	@ (3400464c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
34004442:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34004444:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34004448:	6a20      	ldr	r0, [r4, #32]
3400444a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400444e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004452:	3901      	subs	r1, #1
34004454:	4303      	orrs	r3, r0
34004456:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400445a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400445e:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34004460:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004464:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
34004468:	f7ff fcf2 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
3400446c:	6823      	ldr	r3, [r4, #0]
3400446e:	2b00      	cmp	r3, #0
34004470:	da39      	bge.n	340044e6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
34004472:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34004476:	4a78      	ldr	r2, [pc, #480]	@ (34004658 <HAL_RCCEx_PeriphCLKConfig+0x638>)
34004478:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3400447c:	4293      	cmp	r3, r2
3400447e:	d004      	beq.n	3400448a <HAL_RCCEx_PeriphCLKConfig+0x46a>
34004480:	f44f 7104 	mov.w	r1, #528	@ 0x210
34004484:	4870      	ldr	r0, [pc, #448]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34004486:	f7fc fcbd 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3400448a:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
3400448e:	4a73      	ldr	r2, [pc, #460]	@ (3400465c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
34004490:	4293      	cmp	r3, r2
34004492:	f041 86ed 	bne.w	34006270 <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34004496:	6a23      	ldr	r3, [r4, #32]
34004498:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400449c:	d004      	beq.n	340044a8 <HAL_RCCEx_PeriphCLKConfig+0x488>
3400449e:	f240 2115 	movw	r1, #533	@ 0x215
340044a2:	4869      	ldr	r0, [pc, #420]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340044a4:	f7fc fcae 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340044a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340044aa:	3b01      	subs	r3, #1
340044ac:	2bff      	cmp	r3, #255	@ 0xff
340044ae:	d904      	bls.n	340044ba <HAL_RCCEx_PeriphCLKConfig+0x49a>
340044b0:	f240 2116 	movw	r1, #534	@ 0x216
340044b4:	4864      	ldr	r0, [pc, #400]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340044b6:	f7fc fca5 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340044ba:	4a64      	ldr	r2, [pc, #400]	@ (3400464c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
340044bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340044be:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340044c2:	6a20      	ldr	r0, [r4, #32]
340044c4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340044c8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340044cc:	3901      	subs	r1, #1
340044ce:	4303      	orrs	r3, r0
340044d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340044d4:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340044d8:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340044da:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340044de:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
340044e2:	f7ff fcb5 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
340044e6:	6823      	ldr	r3, [r4, #0]
340044e8:	07d8      	lsls	r0, r3, #31
340044ea:	d54f      	bpl.n	3400458c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
340044ec:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
340044f0:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340044f4:	d006      	beq.n	34004504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
340044f6:	2b40      	cmp	r3, #64	@ 0x40
340044f8:	d004      	beq.n	34004504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
340044fa:	f240 213d 	movw	r1, #573	@ 0x23d
340044fe:	4852      	ldr	r0, [pc, #328]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34004500:	f7fc fc80 	bl	34000e04 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
34004504:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
34004508:	3b01      	subs	r3, #1
3400450a:	2bff      	cmp	r3, #255	@ 0xff
3400450c:	d904      	bls.n	34004518 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
3400450e:	f240 213e 	movw	r1, #574	@ 0x23e
34004512:	484d      	ldr	r0, [pc, #308]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34004514:	f7fc fc76 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
34004518:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
3400451c:	2b20      	cmp	r3, #32
3400451e:	f041 86ef 	bne.w	34006300 <HAL_RCCEx_PeriphCLKConfig+0x22e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34004522:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34004524:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004528:	d004      	beq.n	34004534 <HAL_RCCEx_PeriphCLKConfig+0x514>
3400452a:	f240 2143 	movw	r1, #579	@ 0x243
3400452e:	4846      	ldr	r0, [pc, #280]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34004530:	f7fc fc68 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34004534:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34004536:	3b01      	subs	r3, #1
34004538:	2bff      	cmp	r3, #255	@ 0xff
3400453a:	d904      	bls.n	34004546 <HAL_RCCEx_PeriphCLKConfig+0x526>
3400453c:	f44f 7111 	mov.w	r1, #580	@ 0x244
34004540:	4841      	ldr	r0, [pc, #260]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34004542:	f7fc fc5f 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34004546:	4a41      	ldr	r2, [pc, #260]	@ (3400464c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
34004548:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400454a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400454e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34004550:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004554:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004558:	3901      	subs	r1, #1
3400455a:	4303      	orrs	r3, r0
3400455c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004560:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34004564:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34004566:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3400456a:	4938      	ldr	r1, [pc, #224]	@ (3400464c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
3400456c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
34004570:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
34004574:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
34004578:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
3400457c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
34004580:	3a01      	subs	r2, #1
34004582:	4303      	orrs	r3, r0
34004584:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34004588:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
3400458c:	6823      	ldr	r3, [r4, #0]
3400458e:	0799      	lsls	r1, r3, #30
34004590:	d53b      	bpl.n	3400460a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
34004592:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34004596:	2b07      	cmp	r3, #7
34004598:	d904      	bls.n	340045a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
3400459a:	f44f 711b 	mov.w	r1, #620	@ 0x26c
3400459e:	482a      	ldr	r0, [pc, #168]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340045a0:	f7fc fc30 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
340045a4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
340045a8:	2b02      	cmp	r3, #2
340045aa:	f041 86d7 	bne.w	3400635c <HAL_RCCEx_PeriphCLKConfig+0x233c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340045ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340045b0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340045b4:	d004      	beq.n	340045c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
340045b6:	f240 2171 	movw	r1, #625	@ 0x271
340045ba:	4823      	ldr	r0, [pc, #140]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340045bc:	f7fc fc22 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340045c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340045c2:	3b01      	subs	r3, #1
340045c4:	2bff      	cmp	r3, #255	@ 0xff
340045c6:	d904      	bls.n	340045d2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
340045c8:	f240 2172 	movw	r1, #626	@ 0x272
340045cc:	481e      	ldr	r0, [pc, #120]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
340045ce:	f7fc fc19 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340045d2:	4a1e      	ldr	r2, [pc, #120]	@ (3400464c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
340045d4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340045d6:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340045da:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340045dc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340045e0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340045e4:	3901      	subs	r1, #1
340045e6:	4303      	orrs	r3, r0
340045e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340045ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340045f0:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340045f2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
340045f6:	4a15      	ldr	r2, [pc, #84]	@ (3400464c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
340045f8:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
340045fc:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34004600:	f023 0307 	bic.w	r3, r3, #7
34004604:	430b      	orrs	r3, r1
34004606:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3400460a:	6823      	ldr	r3, [r4, #0]
3400460c:	071a      	lsls	r2, r3, #28
3400460e:	d535      	bpl.n	3400467c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
34004610:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34004614:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004618:	d004      	beq.n	34004624 <HAL_RCCEx_PeriphCLKConfig+0x604>
3400461a:	f240 2199 	movw	r1, #665	@ 0x299
3400461e:	480a      	ldr	r0, [pc, #40]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34004620:	f7fc fbf0 	bl	34000e04 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
34004624:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
34004628:	3b01      	subs	r3, #1
3400462a:	2bff      	cmp	r3, #255	@ 0xff
3400462c:	d904      	bls.n	34004638 <HAL_RCCEx_PeriphCLKConfig+0x618>
3400462e:	f240 219a 	movw	r1, #666	@ 0x29a
34004632:	4805      	ldr	r0, [pc, #20]	@ (34004648 <HAL_RCCEx_PeriphCLKConfig+0x628>)
34004634:	f7fc fbe6 	bl	34000e04 <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34004638:	4a04      	ldr	r2, [pc, #16]	@ (3400464c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
3400463a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
3400463e:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
34004642:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
34004646:	e00b      	b.n	34004660 <HAL_RCCEx_PeriphCLKConfig+0x640>
34004648:	34038c3d 	.word	0x34038c3d
3400464c:	56028000 	.word	0x56028000
34004650:	0300001c 	.word	0x0300001c
34004654:	0302001c 	.word	0x0302001c
34004658:	0300041c 	.word	0x0300041c
3400465c:	0302041c 	.word	0x0302041c
34004660:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004664:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004668:	3901      	subs	r1, #1
3400466a:	4303      	orrs	r3, r0
3400466c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004670:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34004674:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34004678:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3400467c:	6823      	ldr	r3, [r4, #0]
3400467e:	06db      	lsls	r3, r3, #27
34004680:	d542      	bpl.n	34004708 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
34004682:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34004686:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3400468a:	d004      	beq.n	34004696 <HAL_RCCEx_PeriphCLKConfig+0x676>
3400468c:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
34004690:	48c3      	ldr	r0, [pc, #780]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34004692:	f7fc fbb7 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34004696:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
3400469a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400469e:	f041 868b 	bne.w	340063b8 <HAL_RCCEx_PeriphCLKConfig+0x2398>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
340046a2:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
340046a6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340046aa:	d004      	beq.n	340046b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
340046ac:	f240 21ad 	movw	r1, #685	@ 0x2ad
340046b0:	48bb      	ldr	r0, [pc, #748]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
340046b2:	f7fc fba7 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
340046b6:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
340046ba:	3b01      	subs	r3, #1
340046bc:	2bff      	cmp	r3, #255	@ 0xff
340046be:	d904      	bls.n	340046ca <HAL_RCCEx_PeriphCLKConfig+0x6aa>
340046c0:	f240 21ae 	movw	r1, #686	@ 0x2ae
340046c4:	48b6      	ldr	r0, [pc, #728]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
340046c6:	f7fc fb9d 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
340046ca:	4ab6      	ldr	r2, [pc, #728]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
340046cc:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
340046d0:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
340046d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
340046d8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340046dc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340046e0:	3901      	subs	r1, #1
340046e2:	4303      	orrs	r3, r0
340046e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340046e8:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
340046ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
340046f0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
340046f4:	4aab      	ldr	r2, [pc, #684]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
340046f6:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
340046fa:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
340046fe:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34004702:	430b      	orrs	r3, r1
34004704:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34004708:	6823      	ldr	r3, [r4, #0]
3400470a:	069e      	lsls	r6, r3, #26
3400470c:	d53e      	bpl.n	3400478c <HAL_RCCEx_PeriphCLKConfig+0x76c>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
3400470e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34004712:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34004716:	d004      	beq.n	34004722 <HAL_RCCEx_PeriphCLKConfig+0x702>
34004718:	f44f 7132 	mov.w	r1, #712	@ 0x2c8
3400471c:	48a0      	ldr	r0, [pc, #640]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
3400471e:	f7fc fb71 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34004722:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34004726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400472a:	f041 864e 	bne.w	340063ca <HAL_RCCEx_PeriphCLKConfig+0x23aa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
3400472e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34004730:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004734:	d004      	beq.n	34004740 <HAL_RCCEx_PeriphCLKConfig+0x720>
34004736:	f240 21cd 	movw	r1, #717	@ 0x2cd
3400473a:	4899      	ldr	r0, [pc, #612]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
3400473c:	f7fc fb62 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34004740:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34004742:	3b01      	subs	r3, #1
34004744:	2bff      	cmp	r3, #255	@ 0xff
34004746:	d904      	bls.n	34004752 <HAL_RCCEx_PeriphCLKConfig+0x732>
34004748:	f240 21ce 	movw	r1, #718	@ 0x2ce
3400474c:	4894      	ldr	r0, [pc, #592]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
3400474e:	f7fc fb59 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34004752:	4a94      	ldr	r2, [pc, #592]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
34004754:	6e61      	ldr	r1, [r4, #100]	@ 0x64
34004756:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
3400475a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
3400475c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004760:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004764:	3901      	subs	r1, #1
34004766:	4303      	orrs	r3, r0
34004768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400476c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34004770:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34004774:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34004778:	4a8a      	ldr	r2, [pc, #552]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
3400477a:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
3400477e:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34004782:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
34004786:	430b      	orrs	r3, r1
34004788:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3400478c:	6823      	ldr	r3, [r4, #0]
3400478e:	0658      	lsls	r0, r3, #25
34004790:	d516      	bpl.n	340047c0 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
34004792:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
34004796:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
3400479a:	d007      	beq.n	340047ac <HAL_RCCEx_PeriphCLKConfig+0x78c>
3400479c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340047a0:	d004      	beq.n	340047ac <HAL_RCCEx_PeriphCLKConfig+0x78c>
340047a2:	f44f 713a 	mov.w	r1, #744	@ 0x2e8
340047a6:	487e      	ldr	r0, [pc, #504]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
340047a8:	f7fc fb2c 	bl	34000e04 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
340047ac:	4a7d      	ldr	r2, [pc, #500]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
340047ae:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
340047b2:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
340047b6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
340047ba:	430b      	orrs	r3, r1
340047bc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
340047c0:	6823      	ldr	r3, [r4, #0]
340047c2:	0619      	lsls	r1, r3, #24
340047c4:	d513      	bpl.n	340047ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
340047c6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
340047ca:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
340047ce:	d004      	beq.n	340047da <HAL_RCCEx_PeriphCLKConfig+0x7ba>
340047d0:	f240 21f2 	movw	r1, #754	@ 0x2f2
340047d4:	4872      	ldr	r0, [pc, #456]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
340047d6:	f7fc fb15 	bl	34000e04 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
340047da:	4a72      	ldr	r2, [pc, #456]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
340047dc:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
340047e0:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
340047e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
340047e8:	430b      	orrs	r3, r1
340047ea:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
340047ee:	6823      	ldr	r3, [r4, #0]
340047f0:	05da      	lsls	r2, r3, #23
340047f2:	d513      	bpl.n	3400481c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
340047f4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
340047f8:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
340047fc:	d004      	beq.n	34004808 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
340047fe:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
34004802:	4867      	ldr	r0, [pc, #412]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34004804:	f7fc fafe 	bl	34000e04 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34004808:	4a66      	ldr	r2, [pc, #408]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
3400480a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
3400480e:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34004812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34004816:	430b      	orrs	r3, r1
34004818:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3400481c:	6823      	ldr	r3, [r4, #0]
3400481e:	059b      	lsls	r3, r3, #22
34004820:	d54b      	bpl.n	340048ba <HAL_RCCEx_PeriphCLKConfig+0x89a>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34004822:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34004826:	2b03      	cmp	r3, #3
34004828:	d904      	bls.n	34004834 <HAL_RCCEx_PeriphCLKConfig+0x814>
3400482a:	f240 3106 	movw	r1, #774	@ 0x306
3400482e:	485c      	ldr	r0, [pc, #368]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34004830:	f7fc fae8 	bl	34000e04 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34004834:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
34004838:	3b01      	subs	r3, #1
3400483a:	2b0f      	cmp	r3, #15
3400483c:	d904      	bls.n	34004848 <HAL_RCCEx_PeriphCLKConfig+0x828>
3400483e:	f240 3107 	movw	r1, #775	@ 0x307
34004842:	4857      	ldr	r0, [pc, #348]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34004844:	f7fc fade 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34004848:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
3400484c:	2b02      	cmp	r3, #2
3400484e:	f041 85c5 	bne.w	340063dc <HAL_RCCEx_PeriphCLKConfig+0x23bc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
34004852:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
34004854:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004858:	d004      	beq.n	34004864 <HAL_RCCEx_PeriphCLKConfig+0x844>
3400485a:	f44f 7143 	mov.w	r1, #780	@ 0x30c
3400485e:	4850      	ldr	r0, [pc, #320]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34004860:	f7fc fad0 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
34004864:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
34004866:	3b01      	subs	r3, #1
34004868:	2bff      	cmp	r3, #255	@ 0xff
3400486a:	d904      	bls.n	34004876 <HAL_RCCEx_PeriphCLKConfig+0x856>
3400486c:	f240 310d 	movw	r1, #781	@ 0x30d
34004870:	484b      	ldr	r0, [pc, #300]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34004872:	f7fc fac7 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34004876:	4a4b      	ldr	r2, [pc, #300]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
34004878:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
3400487a:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
3400487e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
34004880:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004884:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004888:	3901      	subs	r1, #1
3400488a:	4303      	orrs	r3, r0
3400488c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004890:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34004894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34004898:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
3400489c:	4941      	ldr	r1, [pc, #260]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
3400489e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
340048a2:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
340048a6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
340048aa:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
340048ae:	3a01      	subs	r2, #1
340048b0:	4303      	orrs	r3, r0
340048b2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
340048b6:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
340048ba:	6823      	ldr	r3, [r4, #0]
340048bc:	055e      	lsls	r6, r3, #21
340048be:	d540      	bpl.n	34004942 <HAL_RCCEx_PeriphCLKConfig+0x922>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
340048c0:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
340048c4:	2b03      	cmp	r3, #3
340048c6:	d904      	bls.n	340048d2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
340048c8:	f44f 714a 	mov.w	r1, #808	@ 0x328
340048cc:	4834      	ldr	r0, [pc, #208]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
340048ce:	f7fc fa99 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
340048d2:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
340048d6:	2b02      	cmp	r3, #2
340048d8:	f041 8588 	bne.w	340063ec <HAL_RCCEx_PeriphCLKConfig+0x23cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
340048dc:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
340048e0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340048e4:	d004      	beq.n	340048f0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
340048e6:	f240 312d 	movw	r1, #813	@ 0x32d
340048ea:	482d      	ldr	r0, [pc, #180]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
340048ec:	f7fc fa8a 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
340048f0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
340048f4:	3b01      	subs	r3, #1
340048f6:	2bff      	cmp	r3, #255	@ 0xff
340048f8:	d904      	bls.n	34004904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
340048fa:	f240 312e 	movw	r1, #814	@ 0x32e
340048fe:	4828      	ldr	r0, [pc, #160]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34004900:	f7fc fa80 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34004904:	4a27      	ldr	r2, [pc, #156]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
34004906:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
3400490a:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
3400490e:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34004912:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004916:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400491a:	3901      	subs	r1, #1
3400491c:	4303      	orrs	r3, r0
3400491e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004922:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34004926:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
3400492a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
3400492e:	4a1d      	ldr	r2, [pc, #116]	@ (340049a4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
34004930:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
34004934:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34004938:	f023 0303 	bic.w	r3, r3, #3
3400493c:	430b      	orrs	r3, r1
3400493e:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34004942:	6823      	ldr	r3, [r4, #0]
34004944:	04d8      	lsls	r0, r3, #19
34004946:	d54a      	bpl.n	340049de <HAL_RCCEx_PeriphCLKConfig+0x9be>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
34004948:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
3400494c:	4a16      	ldr	r2, [pc, #88]	@ (340049a8 <HAL_RCCEx_PeriphCLKConfig+0x988>)
3400494e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34004952:	4291      	cmp	r1, r2
34004954:	d00a      	beq.n	3400496c <HAL_RCCEx_PeriphCLKConfig+0x94c>
34004956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400495a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400495e:	4293      	cmp	r3, r2
34004960:	d004      	beq.n	3400496c <HAL_RCCEx_PeriphCLKConfig+0x94c>
34004962:	f44f 7152 	mov.w	r1, #840	@ 0x348
34004966:	480e      	ldr	r0, [pc, #56]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34004968:	f7fc fa4c 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
3400496c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34004970:	4a0e      	ldr	r2, [pc, #56]	@ (340049ac <HAL_RCCEx_PeriphCLKConfig+0x98c>)
34004972:	4293      	cmp	r3, r2
34004974:	f041 8542 	bne.w	340063fc <HAL_RCCEx_PeriphCLKConfig+0x23dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34004978:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3400497a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400497e:	d004      	beq.n	3400498a <HAL_RCCEx_PeriphCLKConfig+0x96a>
34004980:	f240 314d 	movw	r1, #845	@ 0x34d
34004984:	4806      	ldr	r0, [pc, #24]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34004986:	f7fc fa3d 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400498a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
3400498c:	3b01      	subs	r3, #1
3400498e:	2bff      	cmp	r3, #255	@ 0xff
34004990:	d90e      	bls.n	340049b0 <HAL_RCCEx_PeriphCLKConfig+0x990>
34004992:	f240 314e 	movw	r1, #846	@ 0x34e
34004996:	4802      	ldr	r0, [pc, #8]	@ (340049a0 <HAL_RCCEx_PeriphCLKConfig+0x980>)
34004998:	f7fc fa34 	bl	34000e04 <assert_failed>
3400499c:	e008      	b.n	340049b0 <HAL_RCCEx_PeriphCLKConfig+0x990>
3400499e:	bf00      	nop
340049a0:	34038c3d 	.word	0x34038c3d
340049a4:	56028000 	.word	0x56028000
340049a8:	0700000c 	.word	0x0700000c
340049ac:	0702000c 	.word	0x0702000c
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340049b0:	4abd      	ldr	r2, [pc, #756]	@ (34004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
340049b2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340049b4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340049b8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340049ba:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340049be:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340049c2:	3901      	subs	r1, #1
340049c4:	4303      	orrs	r3, r0
340049c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340049ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340049ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340049d2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340049d6:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
340049da:	f7ff fa39 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
340049de:	6823      	ldr	r3, [r4, #0]
340049e0:	0499      	lsls	r1, r3, #18
340049e2:	d540      	bpl.n	34004a66 <HAL_RCCEx_PeriphCLKConfig+0xa46>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
340049e4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
340049e8:	4ab0      	ldr	r2, [pc, #704]	@ (34004cac <HAL_RCCEx_PeriphCLKConfig+0xc8c>)
340049ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340049ee:	4291      	cmp	r1, r2
340049f0:	d00a      	beq.n	34004a08 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
340049f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340049f6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340049fa:	4293      	cmp	r3, r2
340049fc:	d004      	beq.n	34004a08 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
340049fe:	f240 3175 	movw	r1, #885	@ 0x375
34004a02:	48ab      	ldr	r0, [pc, #684]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004a04:	f7fc f9fe 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34004a08:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34004a0c:	4aa9      	ldr	r2, [pc, #676]	@ (34004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc94>)
34004a0e:	4293      	cmp	r3, r2
34004a10:	f041 8525 	bne.w	3400645e <HAL_RCCEx_PeriphCLKConfig+0x243e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34004a14:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34004a16:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004a1a:	d004      	beq.n	34004a26 <HAL_RCCEx_PeriphCLKConfig+0xa06>
34004a1c:	f240 317a 	movw	r1, #890	@ 0x37a
34004a20:	48a3      	ldr	r0, [pc, #652]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004a22:	f7fc f9ef 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34004a26:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34004a28:	3b01      	subs	r3, #1
34004a2a:	2bff      	cmp	r3, #255	@ 0xff
34004a2c:	d904      	bls.n	34004a38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34004a2e:	f240 317b 	movw	r1, #891	@ 0x37b
34004a32:	489f      	ldr	r0, [pc, #636]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004a34:	f7fc f9e6 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34004a38:	4a9b      	ldr	r2, [pc, #620]	@ (34004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34004a3a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34004a3c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34004a40:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34004a42:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004a46:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004a4a:	3901      	subs	r1, #1
34004a4c:	4303      	orrs	r3, r0
34004a4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004a52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34004a56:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34004a5a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004a5e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
34004a62:	f7ff f9f5 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34004a66:	6823      	ldr	r3, [r4, #0]
34004a68:	045a      	lsls	r2, r3, #17
34004a6a:	d540      	bpl.n	34004aee <HAL_RCCEx_PeriphCLKConfig+0xace>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
34004a6c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34004a70:	4a91      	ldr	r2, [pc, #580]	@ (34004cb8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
34004a72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34004a76:	4291      	cmp	r1, r2
34004a78:	d00a      	beq.n	34004a90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
34004a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004a7e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34004a82:	4293      	cmp	r3, r2
34004a84:	d004      	beq.n	34004a90 <HAL_RCCEx_PeriphCLKConfig+0xa70>
34004a86:	f240 31a2 	movw	r1, #930	@ 0x3a2
34004a8a:	4889      	ldr	r0, [pc, #548]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004a8c:	f7fc f9ba 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34004a90:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34004a94:	4a89      	ldr	r2, [pc, #548]	@ (34004cbc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
34004a96:	4293      	cmp	r3, r2
34004a98:	f041 8512 	bne.w	340064c0 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34004a9c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34004a9e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004aa2:	d004      	beq.n	34004aae <HAL_RCCEx_PeriphCLKConfig+0xa8e>
34004aa4:	f240 31a7 	movw	r1, #935	@ 0x3a7
34004aa8:	4881      	ldr	r0, [pc, #516]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004aaa:	f7fc f9ab 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34004aae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34004ab0:	3b01      	subs	r3, #1
34004ab2:	2bff      	cmp	r3, #255	@ 0xff
34004ab4:	d904      	bls.n	34004ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34004ab6:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
34004aba:	487d      	ldr	r0, [pc, #500]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004abc:	f7fc f9a2 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34004ac0:	4a79      	ldr	r2, [pc, #484]	@ (34004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34004ac2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34004ac4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34004ac8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34004aca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004ace:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004ad2:	3901      	subs	r1, #1
34004ad4:	4303      	orrs	r3, r0
34004ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004ada:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34004ade:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34004ae2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004ae6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
34004aea:	f7ff f9b1 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34004aee:	6823      	ldr	r3, [r4, #0]
34004af0:	041b      	lsls	r3, r3, #16
34004af2:	d540      	bpl.n	34004b76 <HAL_RCCEx_PeriphCLKConfig+0xb56>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
34004af4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34004af8:	4a71      	ldr	r2, [pc, #452]	@ (34004cc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
34004afa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34004afe:	4291      	cmp	r1, r2
34004b00:	d00a      	beq.n	34004b18 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
34004b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004b06:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34004b0a:	4293      	cmp	r3, r2
34004b0c:	d004      	beq.n	34004b18 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
34004b0e:	f240 31cf 	movw	r1, #975	@ 0x3cf
34004b12:	4867      	ldr	r0, [pc, #412]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004b14:	f7fc f976 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34004b18:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34004b1c:	4a69      	ldr	r2, [pc, #420]	@ (34004cc4 <HAL_RCCEx_PeriphCLKConfig+0xca4>)
34004b1e:	4293      	cmp	r3, r2
34004b20:	f041 84ff 	bne.w	34006522 <HAL_RCCEx_PeriphCLKConfig+0x2502>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34004b24:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34004b26:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004b2a:	d004      	beq.n	34004b36 <HAL_RCCEx_PeriphCLKConfig+0xb16>
34004b2c:	f44f 7175 	mov.w	r1, #980	@ 0x3d4
34004b30:	485f      	ldr	r0, [pc, #380]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004b32:	f7fc f967 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34004b36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34004b38:	3b01      	subs	r3, #1
34004b3a:	2bff      	cmp	r3, #255	@ 0xff
34004b3c:	d904      	bls.n	34004b48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
34004b3e:	f240 31d5 	movw	r1, #981	@ 0x3d5
34004b42:	485b      	ldr	r0, [pc, #364]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004b44:	f7fc f95e 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34004b48:	4a57      	ldr	r2, [pc, #348]	@ (34004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34004b4a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34004b4c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34004b50:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34004b52:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004b56:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004b5a:	3901      	subs	r1, #1
34004b5c:	4303      	orrs	r3, r0
34004b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004b62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34004b66:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34004b6a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004b6e:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
34004b72:	f7ff f96d 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34004b76:	6823      	ldr	r3, [r4, #0]
34004b78:	03de      	lsls	r6, r3, #15
34004b7a:	d540      	bpl.n	34004bfe <HAL_RCCEx_PeriphCLKConfig+0xbde>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
34004b7c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34004b80:	4a51      	ldr	r2, [pc, #324]	@ (34004cc8 <HAL_RCCEx_PeriphCLKConfig+0xca8>)
34004b82:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34004b86:	4291      	cmp	r1, r2
34004b88:	d00a      	beq.n	34004ba0 <HAL_RCCEx_PeriphCLKConfig+0xb80>
34004b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004b8e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34004b92:	4293      	cmp	r3, r2
34004b94:	d004      	beq.n	34004ba0 <HAL_RCCEx_PeriphCLKConfig+0xb80>
34004b96:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
34004b9a:	4845      	ldr	r0, [pc, #276]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004b9c:	f7fc f932 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34004ba0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34004ba4:	4a49      	ldr	r2, [pc, #292]	@ (34004ccc <HAL_RCCEx_PeriphCLKConfig+0xcac>)
34004ba6:	4293      	cmp	r3, r2
34004ba8:	f041 84ec 	bne.w	34006584 <HAL_RCCEx_PeriphCLKConfig+0x2564>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34004bac:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34004bae:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004bb2:	d004      	beq.n	34004bbe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
34004bb4:	f240 4101 	movw	r1, #1025	@ 0x401
34004bb8:	483d      	ldr	r0, [pc, #244]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004bba:	f7fc f923 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34004bbe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34004bc0:	3b01      	subs	r3, #1
34004bc2:	2bff      	cmp	r3, #255	@ 0xff
34004bc4:	d904      	bls.n	34004bd0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
34004bc6:	f240 4102 	movw	r1, #1026	@ 0x402
34004bca:	4839      	ldr	r0, [pc, #228]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004bcc:	f7fc f91a 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34004bd0:	4a35      	ldr	r2, [pc, #212]	@ (34004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34004bd2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34004bd4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34004bd8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34004bda:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004bde:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004be2:	3901      	subs	r1, #1
34004be4:	4303      	orrs	r3, r0
34004be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004bea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34004bee:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34004bf2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004bf6:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
34004bfa:	f7ff f929 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34004bfe:	6823      	ldr	r3, [r4, #0]
34004c00:	0398      	lsls	r0, r3, #14
34004c02:	d540      	bpl.n	34004c86 <HAL_RCCEx_PeriphCLKConfig+0xc66>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
34004c04:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34004c08:	4a31      	ldr	r2, [pc, #196]	@ (34004cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>)
34004c0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34004c0e:	4291      	cmp	r1, r2
34004c10:	d00a      	beq.n	34004c28 <HAL_RCCEx_PeriphCLKConfig+0xc08>
34004c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004c16:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34004c1a:	4293      	cmp	r3, r2
34004c1c:	d004      	beq.n	34004c28 <HAL_RCCEx_PeriphCLKConfig+0xc08>
34004c1e:	f240 4129 	movw	r1, #1065	@ 0x429
34004c22:	4823      	ldr	r0, [pc, #140]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004c24:	f7fc f8ee 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34004c28:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34004c2c:	4a29      	ldr	r2, [pc, #164]	@ (34004cd4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>)
34004c2e:	4293      	cmp	r3, r2
34004c30:	f041 84f2 	bne.w	34006618 <HAL_RCCEx_PeriphCLKConfig+0x25f8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34004c34:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34004c36:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004c3a:	d004      	beq.n	34004c46 <HAL_RCCEx_PeriphCLKConfig+0xc26>
34004c3c:	f240 412e 	movw	r1, #1070	@ 0x42e
34004c40:	481b      	ldr	r0, [pc, #108]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004c42:	f7fc f8df 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34004c46:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34004c48:	3b01      	subs	r3, #1
34004c4a:	2bff      	cmp	r3, #255	@ 0xff
34004c4c:	d904      	bls.n	34004c58 <HAL_RCCEx_PeriphCLKConfig+0xc38>
34004c4e:	f240 412f 	movw	r1, #1071	@ 0x42f
34004c52:	4817      	ldr	r0, [pc, #92]	@ (34004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc90>)
34004c54:	f7fc f8d6 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34004c58:	4a13      	ldr	r2, [pc, #76]	@ (34004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
34004c5a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34004c5c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34004c60:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34004c62:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004c66:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004c6a:	3901      	subs	r1, #1
34004c6c:	4303      	orrs	r3, r0
34004c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004c72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34004c76:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34004c7a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004c7e:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
34004c82:	f7ff f8e5 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34004c86:	6823      	ldr	r3, [r4, #0]
34004c88:	0359      	lsls	r1, r3, #13
34004c8a:	d55b      	bpl.n	34004d44 <HAL_RCCEx_PeriphCLKConfig+0xd24>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
34004c8c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34004c90:	4a11      	ldr	r2, [pc, #68]	@ (34004cd8 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
34004c92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34004c96:	4291      	cmp	r1, r2
34004c98:	d025      	beq.n	34004ce6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
34004c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004c9e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34004ca2:	4293      	cmp	r3, r2
34004ca4:	d01f      	beq.n	34004ce6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
34004ca6:	e019      	b.n	34004cdc <HAL_RCCEx_PeriphCLKConfig+0xcbc>
34004ca8:	56028000 	.word	0x56028000
34004cac:	0700040c 	.word	0x0700040c
34004cb0:	34038c3d 	.word	0x34038c3d
34004cb4:	0702040c 	.word	0x0702040c
34004cb8:	0700080c 	.word	0x0700080c
34004cbc:	0702080c 	.word	0x0702080c
34004cc0:	07000c0c 	.word	0x07000c0c
34004cc4:	07020c0c 	.word	0x07020c0c
34004cc8:	0700100c 	.word	0x0700100c
34004ccc:	0702100c 	.word	0x0702100c
34004cd0:	0700140c 	.word	0x0700140c
34004cd4:	0702140c 	.word	0x0702140c
34004cd8:	0700082c 	.word	0x0700082c
34004cdc:	f240 4156 	movw	r1, #1110	@ 0x456
34004ce0:	48bd      	ldr	r0, [pc, #756]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004ce2:	f7fc f88f 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34004ce6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34004cea:	4abc      	ldr	r2, [pc, #752]	@ (34004fdc <HAL_RCCEx_PeriphCLKConfig+0xfbc>)
34004cec:	4293      	cmp	r3, r2
34004cee:	f041 84c4 	bne.w	3400667a <HAL_RCCEx_PeriphCLKConfig+0x265a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34004cf2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34004cf4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004cf8:	d004      	beq.n	34004d04 <HAL_RCCEx_PeriphCLKConfig+0xce4>
34004cfa:	f240 415b 	movw	r1, #1115	@ 0x45b
34004cfe:	48b6      	ldr	r0, [pc, #728]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004d00:	f7fc f880 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34004d04:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34004d06:	3b01      	subs	r3, #1
34004d08:	2bff      	cmp	r3, #255	@ 0xff
34004d0a:	d904      	bls.n	34004d16 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
34004d0c:	f240 415c 	movw	r1, #1116	@ 0x45c
34004d10:	48b1      	ldr	r0, [pc, #708]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004d12:	f7fc f877 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34004d16:	4ab2      	ldr	r2, [pc, #712]	@ (34004fe0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
34004d18:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34004d1a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34004d1e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34004d20:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004d24:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004d28:	3901      	subs	r1, #1
34004d2a:	4303      	orrs	r3, r0
34004d2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004d30:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34004d34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34004d38:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004d3c:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
34004d40:	f7ff f886 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34004d44:	6823      	ldr	r3, [r4, #0]
34004d46:	031a      	lsls	r2, r3, #12
34004d48:	d540      	bpl.n	34004dcc <HAL_RCCEx_PeriphCLKConfig+0xdac>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
34004d4a:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34004d4e:	4aa5      	ldr	r2, [pc, #660]	@ (34004fe4 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
34004d50:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34004d54:	4291      	cmp	r1, r2
34004d56:	d00a      	beq.n	34004d6e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
34004d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004d5c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34004d60:	4293      	cmp	r3, r2
34004d62:	d004      	beq.n	34004d6e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
34004d64:	f240 4176 	movw	r1, #1142	@ 0x476
34004d68:	489b      	ldr	r0, [pc, #620]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004d6a:	f7fc f84b 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34004d6e:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34004d72:	4a9d      	ldr	r2, [pc, #628]	@ (34004fe8 <HAL_RCCEx_PeriphCLKConfig+0xfc8>)
34004d74:	4293      	cmp	r3, r2
34004d76:	f041 8489 	bne.w	3400668c <HAL_RCCEx_PeriphCLKConfig+0x266c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34004d7a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34004d7c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004d80:	d004      	beq.n	34004d8c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
34004d82:	f240 417b 	movw	r1, #1147	@ 0x47b
34004d86:	4894      	ldr	r0, [pc, #592]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004d88:	f7fc f83c 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34004d8c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34004d8e:	3b01      	subs	r3, #1
34004d90:	2bff      	cmp	r3, #255	@ 0xff
34004d92:	d904      	bls.n	34004d9e <HAL_RCCEx_PeriphCLKConfig+0xd7e>
34004d94:	f240 417c 	movw	r1, #1148	@ 0x47c
34004d98:	488f      	ldr	r0, [pc, #572]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004d9a:	f7fc f833 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34004d9e:	4a90      	ldr	r2, [pc, #576]	@ (34004fe0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
34004da0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34004da2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34004da6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34004da8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004dac:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004db0:	3901      	subs	r1, #1
34004db2:	4303      	orrs	r3, r0
34004db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004db8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34004dbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34004dc0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004dc4:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
34004dc8:	f7ff f842 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34004dcc:	6823      	ldr	r3, [r4, #0]
34004dce:	02db      	lsls	r3, r3, #11
34004dd0:	d540      	bpl.n	34004e54 <HAL_RCCEx_PeriphCLKConfig+0xe34>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
34004dd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34004dd6:	4a85      	ldr	r2, [pc, #532]	@ (34004fec <HAL_RCCEx_PeriphCLKConfig+0xfcc>)
34004dd8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34004ddc:	4291      	cmp	r1, r2
34004dde:	d00a      	beq.n	34004df6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
34004de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004de4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34004de8:	4293      	cmp	r3, r2
34004dea:	d004      	beq.n	34004df6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
34004dec:	f240 4196 	movw	r1, #1174	@ 0x496
34004df0:	4879      	ldr	r0, [pc, #484]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004df2:	f7fc f807 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34004df6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34004dfa:	4a7d      	ldr	r2, [pc, #500]	@ (34004ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
34004dfc:	4293      	cmp	r3, r2
34004dfe:	f041 844e 	bne.w	3400669e <HAL_RCCEx_PeriphCLKConfig+0x267e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34004e02:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34004e04:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004e08:	d004      	beq.n	34004e14 <HAL_RCCEx_PeriphCLKConfig+0xdf4>
34004e0a:	f240 419b 	movw	r1, #1179	@ 0x49b
34004e0e:	4872      	ldr	r0, [pc, #456]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004e10:	f7fb fff8 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34004e14:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34004e16:	3b01      	subs	r3, #1
34004e18:	2bff      	cmp	r3, #255	@ 0xff
34004e1a:	d904      	bls.n	34004e26 <HAL_RCCEx_PeriphCLKConfig+0xe06>
34004e1c:	f240 419c 	movw	r1, #1180	@ 0x49c
34004e20:	486d      	ldr	r0, [pc, #436]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004e22:	f7fb ffef 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34004e26:	4a6e      	ldr	r2, [pc, #440]	@ (34004fe0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
34004e28:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34004e2a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34004e2e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34004e30:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004e34:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004e38:	3901      	subs	r1, #1
34004e3a:	4303      	orrs	r3, r0
34004e3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004e40:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34004e44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34004e48:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004e4c:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
34004e50:	f7fe fffe 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34004e54:	6823      	ldr	r3, [r4, #0]
34004e56:	029e      	lsls	r6, r3, #10
34004e58:	d540      	bpl.n	34004edc <HAL_RCCEx_PeriphCLKConfig+0xebc>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
34004e5a:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
34004e5e:	4a65      	ldr	r2, [pc, #404]	@ (34004ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>)
34004e60:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34004e64:	4291      	cmp	r1, r2
34004e66:	d00a      	beq.n	34004e7e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
34004e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004e6c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34004e70:	4293      	cmp	r3, r2
34004e72:	d004      	beq.n	34004e7e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
34004e74:	f240 41b6 	movw	r1, #1206	@ 0x4b6
34004e78:	4857      	ldr	r0, [pc, #348]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004e7a:	f7fb ffc3 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34004e7e:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
34004e82:	4a5d      	ldr	r2, [pc, #372]	@ (34004ff8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
34004e84:	4293      	cmp	r3, r2
34004e86:	f041 8413 	bne.w	340066b0 <HAL_RCCEx_PeriphCLKConfig+0x2690>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34004e8a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34004e8c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004e90:	d004      	beq.n	34004e9c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
34004e92:	f240 41bb 	movw	r1, #1211	@ 0x4bb
34004e96:	4850      	ldr	r0, [pc, #320]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004e98:	f7fb ffb4 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34004e9c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34004e9e:	3b01      	subs	r3, #1
34004ea0:	2bff      	cmp	r3, #255	@ 0xff
34004ea2:	d904      	bls.n	34004eae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
34004ea4:	f240 41bc 	movw	r1, #1212	@ 0x4bc
34004ea8:	484b      	ldr	r0, [pc, #300]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004eaa:	f7fb ffab 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34004eae:	4a4c      	ldr	r2, [pc, #304]	@ (34004fe0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
34004eb0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34004eb2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34004eb6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34004eb8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004ebc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004ec0:	3901      	subs	r1, #1
34004ec2:	4303      	orrs	r3, r0
34004ec4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004ec8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34004ecc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34004ed0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004ed4:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
34004ed8:	f7fe ffba 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34004edc:	6823      	ldr	r3, [r4, #0]
34004ede:	0258      	lsls	r0, r3, #9
34004ee0:	d540      	bpl.n	34004f64 <HAL_RCCEx_PeriphCLKConfig+0xf44>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
34004ee2:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34004ee6:	4a45      	ldr	r2, [pc, #276]	@ (34004ffc <HAL_RCCEx_PeriphCLKConfig+0xfdc>)
34004ee8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34004eec:	4291      	cmp	r1, r2
34004eee:	d00a      	beq.n	34004f06 <HAL_RCCEx_PeriphCLKConfig+0xee6>
34004ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34004ef4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34004ef8:	4293      	cmp	r3, r2
34004efa:	d004      	beq.n	34004f06 <HAL_RCCEx_PeriphCLKConfig+0xee6>
34004efc:	f240 41d6 	movw	r1, #1238	@ 0x4d6
34004f00:	4835      	ldr	r0, [pc, #212]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004f02:	f7fb ff7f 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
34004f06:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34004f0a:	4a3d      	ldr	r2, [pc, #244]	@ (34005000 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
34004f0c:	4293      	cmp	r3, r2
34004f0e:	f041 83d8 	bne.w	340066c2 <HAL_RCCEx_PeriphCLKConfig+0x26a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34004f12:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34004f14:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004f18:	d004      	beq.n	34004f24 <HAL_RCCEx_PeriphCLKConfig+0xf04>
34004f1a:	f240 41db 	movw	r1, #1243	@ 0x4db
34004f1e:	482e      	ldr	r0, [pc, #184]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004f20:	f7fb ff70 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34004f24:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34004f26:	3b01      	subs	r3, #1
34004f28:	2bff      	cmp	r3, #255	@ 0xff
34004f2a:	d904      	bls.n	34004f36 <HAL_RCCEx_PeriphCLKConfig+0xf16>
34004f2c:	f240 41dc 	movw	r1, #1244	@ 0x4dc
34004f30:	4829      	ldr	r0, [pc, #164]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004f32:	f7fb ff67 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34004f36:	4a2a      	ldr	r2, [pc, #168]	@ (34004fe0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
34004f38:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34004f3a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34004f3e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34004f40:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004f44:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004f48:	3901      	subs	r1, #1
34004f4a:	4303      	orrs	r3, r0
34004f4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34004f50:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34004f54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34004f58:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34004f5c:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
34004f60:	f7fe ff76 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34004f64:	6823      	ldr	r3, [r4, #0]
34004f66:	0219      	lsls	r1, r3, #8
34004f68:	d55e      	bpl.n	34005028 <HAL_RCCEx_PeriphCLKConfig+0x1008>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
34004f6a:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
34004f6e:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
34004f72:	d00c      	beq.n	34004f8e <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34004f74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34004f78:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
34004f7c:	d007      	beq.n	34004f8e <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34004f7e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34004f82:	d004      	beq.n	34004f8e <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34004f84:	f240 41f6 	movw	r1, #1270	@ 0x4f6
34004f88:	4813      	ldr	r0, [pc, #76]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004f8a:	f7fb ff3b 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34004f8e:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
34004f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34004f96:	f041 839d 	bne.w	340066d4 <HAL_RCCEx_PeriphCLKConfig+0x26b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34004f9a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34004f9c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34004fa0:	d004      	beq.n	34004fac <HAL_RCCEx_PeriphCLKConfig+0xf8c>
34004fa2:	f240 41fb 	movw	r1, #1275	@ 0x4fb
34004fa6:	480c      	ldr	r0, [pc, #48]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004fa8:	f7fb ff2c 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34004fac:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34004fae:	3b01      	subs	r3, #1
34004fb0:	2bff      	cmp	r3, #255	@ 0xff
34004fb2:	d904      	bls.n	34004fbe <HAL_RCCEx_PeriphCLKConfig+0xf9e>
34004fb4:	f240 41fc 	movw	r1, #1276	@ 0x4fc
34004fb8:	4807      	ldr	r0, [pc, #28]	@ (34004fd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>)
34004fba:	f7fb ff23 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34004fbe:	4a08      	ldr	r2, [pc, #32]	@ (34004fe0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
34004fc0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34004fc2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34004fc6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34004fc8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34004fcc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34004fd0:	3901      	subs	r1, #1
34004fd2:	4303      	orrs	r3, r0
34004fd4:	e016      	b.n	34005004 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
34004fd6:	bf00      	nop
34004fd8:	34038c3d 	.word	0x34038c3d
34004fdc:	0702082c 	.word	0x0702082c
34004fe0:	56028000 	.word	0x56028000
34004fe4:	07000c2c 	.word	0x07000c2c
34004fe8:	07020c2c 	.word	0x07020c2c
34004fec:	0700102c 	.word	0x0700102c
34004ff0:	0702102c 	.word	0x0702102c
34004ff4:	0700142c 	.word	0x0700142c
34004ff8:	0702142c 	.word	0x0702142c
34004ffc:	0700182c 	.word	0x0700182c
34005000:	0702182c 	.word	0x0702182c
34005004:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005008:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400500c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005010:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34005014:	4ac1      	ldr	r2, [pc, #772]	@ (3400531c <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
34005016:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
3400501a:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
3400501e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
34005022:	430b      	orrs	r3, r1
34005024:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34005028:	6823      	ldr	r3, [r4, #0]
3400502a:	01da      	lsls	r2, r3, #7
3400502c:	d542      	bpl.n	340050b4 <HAL_RCCEx_PeriphCLKConfig+0x1094>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
3400502e:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
34005032:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34005036:	d004      	beq.n	34005042 <HAL_RCCEx_PeriphCLKConfig+0x1022>
34005038:	f240 5123 	movw	r1, #1315	@ 0x523
3400503c:	48b8      	ldr	r0, [pc, #736]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
3400503e:	f7fb fee1 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
34005042:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
34005046:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400504a:	f041 8374 	bne.w	34006736 <HAL_RCCEx_PeriphCLKConfig+0x2716>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
3400504e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
34005052:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005056:	d004      	beq.n	34005062 <HAL_RCCEx_PeriphCLKConfig+0x1042>
34005058:	f44f 61a5 	mov.w	r1, #1320	@ 0x528
3400505c:	48b0      	ldr	r0, [pc, #704]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
3400505e:	f7fb fed1 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
34005062:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
34005066:	3b01      	subs	r3, #1
34005068:	2bff      	cmp	r3, #255	@ 0xff
3400506a:	d904      	bls.n	34005076 <HAL_RCCEx_PeriphCLKConfig+0x1056>
3400506c:	f240 5129 	movw	r1, #1321	@ 0x529
34005070:	48ab      	ldr	r0, [pc, #684]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34005072:	f7fb fec7 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34005076:	4aa9      	ldr	r2, [pc, #676]	@ (3400531c <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
34005078:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
3400507c:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
34005080:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
34005084:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005088:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400508c:	3901      	subs	r1, #1
3400508e:	4303      	orrs	r3, r0
34005090:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005094:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34005098:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3400509c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
340050a0:	4a9e      	ldr	r2, [pc, #632]	@ (3400531c <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
340050a2:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
340050a6:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
340050aa:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
340050ae:	430b      	orrs	r3, r1
340050b0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
340050b4:	6823      	ldr	r3, [r4, #0]
340050b6:	019b      	lsls	r3, r3, #6
340050b8:	d540      	bpl.n	3400513c <HAL_RCCEx_PeriphCLKConfig+0x111c>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
340050ba:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340050be:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340050c2:	d007      	beq.n	340050d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
340050c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340050c8:	d004      	beq.n	340050d4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
340050ca:	f240 5143 	movw	r1, #1347	@ 0x543
340050ce:	4894      	ldr	r0, [pc, #592]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
340050d0:	f7fb fe98 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
340050d4:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340050d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340050dc:	f041 8334 	bne.w	34006748 <HAL_RCCEx_PeriphCLKConfig+0x2728>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340050e0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340050e2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340050e6:	d004      	beq.n	340050f2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
340050e8:	f44f 61a9 	mov.w	r1, #1352	@ 0x548
340050ec:	488c      	ldr	r0, [pc, #560]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
340050ee:	f7fb fe89 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340050f2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340050f4:	3b01      	subs	r3, #1
340050f6:	2bff      	cmp	r3, #255	@ 0xff
340050f8:	d904      	bls.n	34005104 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
340050fa:	f240 5149 	movw	r1, #1353	@ 0x549
340050fe:	4888      	ldr	r0, [pc, #544]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34005100:	f7fb fe80 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34005104:	4a85      	ldr	r2, [pc, #532]	@ (3400531c <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
34005106:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34005108:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3400510c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3400510e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005112:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005116:	3901      	subs	r1, #1
34005118:	4303      	orrs	r3, r0
3400511a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400511e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34005122:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34005124:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34005128:	4a7c      	ldr	r2, [pc, #496]	@ (3400531c <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400512a:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
3400512e:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
34005132:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34005136:	430b      	orrs	r3, r1
34005138:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3400513c:	6823      	ldr	r3, [r4, #0]
3400513e:	015e      	lsls	r6, r3, #5
34005140:	d541      	bpl.n	340051c6 <HAL_RCCEx_PeriphCLKConfig+0x11a6>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
34005142:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
34005146:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3400514a:	d004      	beq.n	34005156 <HAL_RCCEx_PeriphCLKConfig+0x1136>
3400514c:	f44f 61ae 	mov.w	r1, #1392	@ 0x570
34005150:	4873      	ldr	r0, [pc, #460]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34005152:	f7fb fe57 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
34005156:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
3400515a:	2b20      	cmp	r3, #32
3400515c:	f041 8324 	bne.w	340067a8 <HAL_RCCEx_PeriphCLKConfig+0x2788>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
34005160:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34005164:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005168:	d004      	beq.n	34005174 <HAL_RCCEx_PeriphCLKConfig+0x1154>
3400516a:	f240 5175 	movw	r1, #1397	@ 0x575
3400516e:	486c      	ldr	r0, [pc, #432]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34005170:	f7fb fe48 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34005174:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34005178:	3b01      	subs	r3, #1
3400517a:	2bff      	cmp	r3, #255	@ 0xff
3400517c:	d904      	bls.n	34005188 <HAL_RCCEx_PeriphCLKConfig+0x1168>
3400517e:	f240 5176 	movw	r1, #1398	@ 0x576
34005182:	4867      	ldr	r0, [pc, #412]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34005184:	f7fb fe3e 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34005188:	4a64      	ldr	r2, [pc, #400]	@ (3400531c <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400518a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
3400518e:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
34005192:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34005196:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400519a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400519e:	3901      	subs	r1, #1
340051a0:	4303      	orrs	r3, r0
340051a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340051a6:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340051aa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
340051ae:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
340051b2:	4a5a      	ldr	r2, [pc, #360]	@ (3400531c <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
340051b4:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
340051b8:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340051bc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340051c0:	430b      	orrs	r3, r1
340051c2:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
340051c6:	6823      	ldr	r3, [r4, #0]
340051c8:	00d8      	lsls	r0, r3, #3
340051ca:	d53d      	bpl.n	34005248 <HAL_RCCEx_PeriphCLKConfig+0x1228>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
340051cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
340051d0:	4a54      	ldr	r2, [pc, #336]	@ (34005324 <HAL_RCCEx_PeriphCLKConfig+0x1304>)
340051d2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340051d6:	4293      	cmp	r3, r2
340051d8:	d008      	beq.n	340051ec <HAL_RCCEx_PeriphCLKConfig+0x11cc>
340051da:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340051de:	4293      	cmp	r3, r2
340051e0:	d004      	beq.n	340051ec <HAL_RCCEx_PeriphCLKConfig+0x11cc>
340051e2:	f44f 61b2 	mov.w	r1, #1424	@ 0x590
340051e6:	484e      	ldr	r0, [pc, #312]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
340051e8:	f7fb fe0c 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
340051ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
340051f0:	4a4d      	ldr	r2, [pc, #308]	@ (34005328 <HAL_RCCEx_PeriphCLKConfig+0x1308>)
340051f2:	4293      	cmp	r3, r2
340051f4:	f041 82e0 	bne.w	340067b8 <HAL_RCCEx_PeriphCLKConfig+0x2798>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340051f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340051fa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340051fe:	d004      	beq.n	3400520a <HAL_RCCEx_PeriphCLKConfig+0x11ea>
34005200:	f240 5195 	movw	r1, #1429	@ 0x595
34005204:	4846      	ldr	r0, [pc, #280]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34005206:	f7fb fdfd 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400520a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400520c:	3b01      	subs	r3, #1
3400520e:	2bff      	cmp	r3, #255	@ 0xff
34005210:	d904      	bls.n	3400521c <HAL_RCCEx_PeriphCLKConfig+0x11fc>
34005212:	f240 5196 	movw	r1, #1430	@ 0x596
34005216:	4842      	ldr	r0, [pc, #264]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34005218:	f7fb fdf4 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400521c:	4a3f      	ldr	r2, [pc, #252]	@ (3400531c <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400521e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34005220:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34005224:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34005226:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400522a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400522e:	3901      	subs	r1, #1
34005230:	4303      	orrs	r3, r0
34005232:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005236:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3400523a:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400523c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005240:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
34005244:	f7fe fe04 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34005248:	6823      	ldr	r3, [r4, #0]
3400524a:	0099      	lsls	r1, r3, #2
3400524c:	d53d      	bpl.n	340052ca <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
3400524e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34005252:	4a36      	ldr	r2, [pc, #216]	@ (3400532c <HAL_RCCEx_PeriphCLKConfig+0x130c>)
34005254:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34005258:	4293      	cmp	r3, r2
3400525a:	d008      	beq.n	3400526e <HAL_RCCEx_PeriphCLKConfig+0x124e>
3400525c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005260:	4293      	cmp	r3, r2
34005262:	d004      	beq.n	3400526e <HAL_RCCEx_PeriphCLKConfig+0x124e>
34005264:	f240 51bd 	movw	r1, #1469	@ 0x5bd
34005268:	482d      	ldr	r0, [pc, #180]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
3400526a:	f7fb fdcb 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
3400526e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34005272:	4a2f      	ldr	r2, [pc, #188]	@ (34005330 <HAL_RCCEx_PeriphCLKConfig+0x1310>)
34005274:	4293      	cmp	r3, r2
34005276:	f041 82cf 	bne.w	34006818 <HAL_RCCEx_PeriphCLKConfig+0x27f8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400527a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400527c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005280:	d004      	beq.n	3400528c <HAL_RCCEx_PeriphCLKConfig+0x126c>
34005282:	f240 51c2 	movw	r1, #1474	@ 0x5c2
34005286:	4826      	ldr	r0, [pc, #152]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
34005288:	f7fb fdbc 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400528c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400528e:	3b01      	subs	r3, #1
34005290:	2bff      	cmp	r3, #255	@ 0xff
34005292:	d904      	bls.n	3400529e <HAL_RCCEx_PeriphCLKConfig+0x127e>
34005294:	f240 51c3 	movw	r1, #1475	@ 0x5c3
34005298:	4821      	ldr	r0, [pc, #132]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
3400529a:	f7fb fdb3 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400529e:	4a1f      	ldr	r2, [pc, #124]	@ (3400531c <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
340052a0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340052a2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340052a6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340052a8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340052ac:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340052b0:	3901      	subs	r1, #1
340052b2:	4303      	orrs	r3, r0
340052b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340052b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340052bc:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340052be:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340052c2:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
340052c6:	f7fe fdc3 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
340052ca:	6863      	ldr	r3, [r4, #4]
340052cc:	07da      	lsls	r2, r3, #31
340052ce:	d548      	bpl.n	34005362 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
340052d0:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
340052d4:	2b06      	cmp	r3, #6
340052d6:	d904      	bls.n	340052e2 <HAL_RCCEx_PeriphCLKConfig+0x12c2>
340052d8:	f240 51ea 	movw	r1, #1514	@ 0x5ea
340052dc:	4810      	ldr	r0, [pc, #64]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
340052de:	f7fb fd91 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
340052e2:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
340052e6:	2b02      	cmp	r3, #2
340052e8:	f041 82c6 	bne.w	34006878 <HAL_RCCEx_PeriphCLKConfig+0x2858>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340052ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340052ee:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340052f2:	d004      	beq.n	340052fe <HAL_RCCEx_PeriphCLKConfig+0x12de>
340052f4:	f240 51ef 	movw	r1, #1519	@ 0x5ef
340052f8:	4809      	ldr	r0, [pc, #36]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
340052fa:	f7fb fd83 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340052fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34005300:	3b01      	subs	r3, #1
34005302:	2bff      	cmp	r3, #255	@ 0xff
34005304:	d904      	bls.n	34005310 <HAL_RCCEx_PeriphCLKConfig+0x12f0>
34005306:	f44f 61be 	mov.w	r1, #1520	@ 0x5f0
3400530a:	4805      	ldr	r0, [pc, #20]	@ (34005320 <HAL_RCCEx_PeriphCLKConfig+0x1300>)
3400530c:	f7fb fd7a 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34005310:	4a02      	ldr	r2, [pc, #8]	@ (3400531c <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
34005312:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34005314:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34005318:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3400531a:	e00b      	b.n	34005334 <HAL_RCCEx_PeriphCLKConfig+0x1314>
3400531c:	56028000 	.word	0x56028000
34005320:	34038c3d 	.word	0x34038c3d
34005324:	07001418 	.word	0x07001418
34005328:	07021418 	.word	0x07021418
3400532c:	07001818 	.word	0x07001818
34005330:	07021818 	.word	0x07021818
34005334:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005338:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400533c:	3901      	subs	r1, #1
3400533e:	4303      	orrs	r3, r0
34005340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005344:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34005348:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400534a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
3400534e:	4abc      	ldr	r2, [pc, #752]	@ (34005640 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
34005350:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
34005354:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
34005358:	f023 0307 	bic.w	r3, r3, #7
3400535c:	430b      	orrs	r3, r1
3400535e:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
34005362:	6863      	ldr	r3, [r4, #4]
34005364:	079b      	lsls	r3, r3, #30
34005366:	d543      	bpl.n	340053f0 <HAL_RCCEx_PeriphCLKConfig+0x13d0>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
34005368:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
3400536c:	4ab5      	ldr	r2, [pc, #724]	@ (34005644 <HAL_RCCEx_PeriphCLKConfig+0x1624>)
3400536e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005372:	4291      	cmp	r1, r2
34005374:	d00e      	beq.n	34005394 <HAL_RCCEx_PeriphCLKConfig+0x1374>
34005376:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400537a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400537e:	4291      	cmp	r1, r2
34005380:	d008      	beq.n	34005394 <HAL_RCCEx_PeriphCLKConfig+0x1374>
34005382:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005386:	4293      	cmp	r3, r2
34005388:	d004      	beq.n	34005394 <HAL_RCCEx_PeriphCLKConfig+0x1374>
3400538a:	f240 6117 	movw	r1, #1559	@ 0x617
3400538e:	48ae      	ldr	r0, [pc, #696]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
34005390:	f7fb fd38 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34005394:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34005398:	4aac      	ldr	r2, [pc, #688]	@ (3400564c <HAL_RCCEx_PeriphCLKConfig+0x162c>)
3400539a:	4293      	cmp	r3, r2
3400539c:	f041 82b4 	bne.w	34006908 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340053a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340053a2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340053a6:	d004      	beq.n	340053b2 <HAL_RCCEx_PeriphCLKConfig+0x1392>
340053a8:	f240 611c 	movw	r1, #1564	@ 0x61c
340053ac:	48a6      	ldr	r0, [pc, #664]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340053ae:	f7fb fd29 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340053b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340053b4:	3b01      	subs	r3, #1
340053b6:	2bff      	cmp	r3, #255	@ 0xff
340053b8:	d904      	bls.n	340053c4 <HAL_RCCEx_PeriphCLKConfig+0x13a4>
340053ba:	f240 611d 	movw	r1, #1565	@ 0x61d
340053be:	48a2      	ldr	r0, [pc, #648]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340053c0:	f7fb fd20 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340053c4:	4a9e      	ldr	r2, [pc, #632]	@ (34005640 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
340053c6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340053c8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340053cc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340053ce:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340053d2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340053d6:	3901      	subs	r1, #1
340053d8:	4303      	orrs	r3, r0
340053da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340053de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340053e2:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340053e4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340053e8:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
340053ec:	f7fe fd30 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
340053f0:	6863      	ldr	r3, [r4, #4]
340053f2:	075e      	lsls	r6, r3, #29
340053f4:	d543      	bpl.n	3400547e <HAL_RCCEx_PeriphCLKConfig+0x145e>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
340053f6:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
340053fa:	4a95      	ldr	r2, [pc, #596]	@ (34005650 <HAL_RCCEx_PeriphCLKConfig+0x1630>)
340053fc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005400:	4291      	cmp	r1, r2
34005402:	d00e      	beq.n	34005422 <HAL_RCCEx_PeriphCLKConfig+0x1402>
34005404:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005408:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400540c:	4291      	cmp	r1, r2
3400540e:	d008      	beq.n	34005422 <HAL_RCCEx_PeriphCLKConfig+0x1402>
34005410:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005414:	4293      	cmp	r3, r2
34005416:	d004      	beq.n	34005422 <HAL_RCCEx_PeriphCLKConfig+0x1402>
34005418:	f240 6144 	movw	r1, #1604	@ 0x644
3400541c:	488a      	ldr	r0, [pc, #552]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
3400541e:	f7fb fcf1 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34005422:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34005426:	4a8b      	ldr	r2, [pc, #556]	@ (34005654 <HAL_RCCEx_PeriphCLKConfig+0x1634>)
34005428:	4293      	cmp	r3, r2
3400542a:	f041 829e 	bne.w	3400696a <HAL_RCCEx_PeriphCLKConfig+0x294a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400542e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34005430:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005434:	d004      	beq.n	34005440 <HAL_RCCEx_PeriphCLKConfig+0x1420>
34005436:	f240 6149 	movw	r1, #1609	@ 0x649
3400543a:	4883      	ldr	r0, [pc, #524]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
3400543c:	f7fb fce2 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34005440:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34005442:	3b01      	subs	r3, #1
34005444:	2bff      	cmp	r3, #255	@ 0xff
34005446:	d904      	bls.n	34005452 <HAL_RCCEx_PeriphCLKConfig+0x1432>
34005448:	f240 614a 	movw	r1, #1610	@ 0x64a
3400544c:	487e      	ldr	r0, [pc, #504]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
3400544e:	f7fb fcd9 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34005452:	4a7b      	ldr	r2, [pc, #492]	@ (34005640 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
34005454:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34005456:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3400545a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400545c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005460:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005464:	3901      	subs	r1, #1
34005466:	4303      	orrs	r3, r0
34005468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400546c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34005470:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005472:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005476:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
3400547a:	f7fe fce9 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
3400547e:	6863      	ldr	r3, [r4, #4]
34005480:	0718      	lsls	r0, r3, #28
34005482:	d543      	bpl.n	3400550c <HAL_RCCEx_PeriphCLKConfig+0x14ec>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
34005484:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34005488:	4a73      	ldr	r2, [pc, #460]	@ (34005658 <HAL_RCCEx_PeriphCLKConfig+0x1638>)
3400548a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400548e:	4291      	cmp	r1, r2
34005490:	d00e      	beq.n	340054b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>
34005492:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005496:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400549a:	4291      	cmp	r1, r2
3400549c:	d008      	beq.n	340054b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>
3400549e:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340054a2:	4293      	cmp	r3, r2
340054a4:	d004      	beq.n	340054b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>
340054a6:	f240 6171 	movw	r1, #1649	@ 0x671
340054aa:	4867      	ldr	r0, [pc, #412]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340054ac:	f7fb fcaa 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
340054b0:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
340054b4:	4a69      	ldr	r2, [pc, #420]	@ (3400565c <HAL_RCCEx_PeriphCLKConfig+0x163c>)
340054b6:	4293      	cmp	r3, r2
340054b8:	f041 8288 	bne.w	340069cc <HAL_RCCEx_PeriphCLKConfig+0x29ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340054bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340054be:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340054c2:	d004      	beq.n	340054ce <HAL_RCCEx_PeriphCLKConfig+0x14ae>
340054c4:	f240 6176 	movw	r1, #1654	@ 0x676
340054c8:	485f      	ldr	r0, [pc, #380]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340054ca:	f7fb fc9b 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340054ce:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340054d0:	3b01      	subs	r3, #1
340054d2:	2bff      	cmp	r3, #255	@ 0xff
340054d4:	d904      	bls.n	340054e0 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
340054d6:	f240 6177 	movw	r1, #1655	@ 0x677
340054da:	485b      	ldr	r0, [pc, #364]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340054dc:	f7fb fc92 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340054e0:	4a57      	ldr	r2, [pc, #348]	@ (34005640 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
340054e2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340054e4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340054e8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340054ea:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340054ee:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340054f2:	3901      	subs	r1, #1
340054f4:	4303      	orrs	r3, r0
340054f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340054fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340054fe:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005500:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005504:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
34005508:	f7fe fca2 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
3400550c:	6863      	ldr	r3, [r4, #4]
3400550e:	06d9      	lsls	r1, r3, #27
34005510:	d544      	bpl.n	3400559c <HAL_RCCEx_PeriphCLKConfig+0x157c>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
34005512:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34005516:	4a52      	ldr	r2, [pc, #328]	@ (34005660 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
34005518:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400551c:	4291      	cmp	r1, r2
3400551e:	d00e      	beq.n	3400553e <HAL_RCCEx_PeriphCLKConfig+0x151e>
34005520:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005524:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005528:	4291      	cmp	r1, r2
3400552a:	d008      	beq.n	3400553e <HAL_RCCEx_PeriphCLKConfig+0x151e>
3400552c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005530:	4293      	cmp	r3, r2
34005532:	d004      	beq.n	3400553e <HAL_RCCEx_PeriphCLKConfig+0x151e>
34005534:	f240 619e 	movw	r1, #1694	@ 0x69e
34005538:	4843      	ldr	r0, [pc, #268]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
3400553a:	f7fb fc63 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
3400553e:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34005542:	4a48      	ldr	r2, [pc, #288]	@ (34005664 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
34005544:	4293      	cmp	r3, r2
34005546:	f041 8272 	bne.w	34006a2e <HAL_RCCEx_PeriphCLKConfig+0x2a0e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400554a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400554c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005550:	d004      	beq.n	3400555c <HAL_RCCEx_PeriphCLKConfig+0x153c>
34005552:	f240 61a3 	movw	r1, #1699	@ 0x6a3
34005556:	483c      	ldr	r0, [pc, #240]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
34005558:	f7fb fc54 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400555c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3400555e:	3b01      	subs	r3, #1
34005560:	2bff      	cmp	r3, #255	@ 0xff
34005562:	d904      	bls.n	3400556e <HAL_RCCEx_PeriphCLKConfig+0x154e>
34005564:	f240 61a4 	movw	r1, #1700	@ 0x6a4
34005568:	4837      	ldr	r0, [pc, #220]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
3400556a:	f7fb fc4b 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400556e:	4a34      	ldr	r2, [pc, #208]	@ (34005640 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
34005570:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005572:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34005576:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34005578:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400557c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005580:	3901      	subs	r1, #1
34005582:	4303      	orrs	r3, r0
34005584:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005588:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400558c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005590:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005594:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
34005598:	f7fe fc5a 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3400559c:	6863      	ldr	r3, [r4, #4]
3400559e:	069a      	lsls	r2, r3, #26
340055a0:	d544      	bpl.n	3400562c <HAL_RCCEx_PeriphCLKConfig+0x160c>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
340055a2:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
340055a6:	4a30      	ldr	r2, [pc, #192]	@ (34005668 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
340055a8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340055ac:	4291      	cmp	r1, r2
340055ae:	d00e      	beq.n	340055ce <HAL_RCCEx_PeriphCLKConfig+0x15ae>
340055b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340055b4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340055b8:	4291      	cmp	r1, r2
340055ba:	d008      	beq.n	340055ce <HAL_RCCEx_PeriphCLKConfig+0x15ae>
340055bc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340055c0:	4293      	cmp	r3, r2
340055c2:	d004      	beq.n	340055ce <HAL_RCCEx_PeriphCLKConfig+0x15ae>
340055c4:	f240 61cb 	movw	r1, #1739	@ 0x6cb
340055c8:	481f      	ldr	r0, [pc, #124]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340055ca:	f7fb fc1b 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
340055ce:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
340055d2:	4a26      	ldr	r2, [pc, #152]	@ (3400566c <HAL_RCCEx_PeriphCLKConfig+0x164c>)
340055d4:	4293      	cmp	r3, r2
340055d6:	f041 825b 	bne.w	34006a90 <HAL_RCCEx_PeriphCLKConfig+0x2a70>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340055da:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340055dc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340055e0:	d004      	beq.n	340055ec <HAL_RCCEx_PeriphCLKConfig+0x15cc>
340055e2:	f44f 61da 	mov.w	r1, #1744	@ 0x6d0
340055e6:	4818      	ldr	r0, [pc, #96]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340055e8:	f7fb fc0c 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340055ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340055ee:	3b01      	subs	r3, #1
340055f0:	2bff      	cmp	r3, #255	@ 0xff
340055f2:	d904      	bls.n	340055fe <HAL_RCCEx_PeriphCLKConfig+0x15de>
340055f4:	f240 61d1 	movw	r1, #1745	@ 0x6d1
340055f8:	4813      	ldr	r0, [pc, #76]	@ (34005648 <HAL_RCCEx_PeriphCLKConfig+0x1628>)
340055fa:	f7fb fc03 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340055fe:	4a10      	ldr	r2, [pc, #64]	@ (34005640 <HAL_RCCEx_PeriphCLKConfig+0x1620>)
34005600:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005602:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34005606:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34005608:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400560c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005610:	3901      	subs	r1, #1
34005612:	4303      	orrs	r3, r0
34005614:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005618:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400561c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005620:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005624:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
34005628:	f7fe fc12 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
3400562c:	6863      	ldr	r3, [r4, #4]
3400562e:	065b      	lsls	r3, r3, #25
34005630:	d55e      	bpl.n	340056f0 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
34005632:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34005636:	4a0e      	ldr	r2, [pc, #56]	@ (34005670 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
34005638:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3400563c:	4291      	cmp	r1, r2
3400563e:	e019      	b.n	34005674 <HAL_RCCEx_PeriphCLKConfig+0x1654>
34005640:	56028000 	.word	0x56028000
34005644:	07000420 	.word	0x07000420
34005648:	34038c3d 	.word	0x34038c3d
3400564c:	07020420 	.word	0x07020420
34005650:	07000820 	.word	0x07000820
34005654:	07020820 	.word	0x07020820
34005658:	07000c20 	.word	0x07000c20
3400565c:	07020c20 	.word	0x07020c20
34005660:	07001020 	.word	0x07001020
34005664:	07021020 	.word	0x07021020
34005668:	07001420 	.word	0x07001420
3400566c:	07021420 	.word	0x07021420
34005670:	07001820 	.word	0x07001820
34005674:	d00e      	beq.n	34005694 <HAL_RCCEx_PeriphCLKConfig+0x1674>
34005676:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400567a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400567e:	4291      	cmp	r1, r2
34005680:	d008      	beq.n	34005694 <HAL_RCCEx_PeriphCLKConfig+0x1674>
34005682:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005686:	4293      	cmp	r3, r2
34005688:	d004      	beq.n	34005694 <HAL_RCCEx_PeriphCLKConfig+0x1674>
3400568a:	f44f 61df 	mov.w	r1, #1784	@ 0x6f8
3400568e:	48ba      	ldr	r0, [pc, #744]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
34005690:	f7fb fbb8 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34005694:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34005698:	4ab8      	ldr	r2, [pc, #736]	@ (3400597c <HAL_RCCEx_PeriphCLKConfig+0x195c>)
3400569a:	4293      	cmp	r3, r2
3400569c:	f041 8229 	bne.w	34006af2 <HAL_RCCEx_PeriphCLKConfig+0x2ad2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340056a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340056a2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340056a6:	d004      	beq.n	340056b2 <HAL_RCCEx_PeriphCLKConfig+0x1692>
340056a8:	f240 61fd 	movw	r1, #1789	@ 0x6fd
340056ac:	48b2      	ldr	r0, [pc, #712]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340056ae:	f7fb fba9 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340056b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340056b4:	3b01      	subs	r3, #1
340056b6:	2bff      	cmp	r3, #255	@ 0xff
340056b8:	d904      	bls.n	340056c4 <HAL_RCCEx_PeriphCLKConfig+0x16a4>
340056ba:	f240 61fe 	movw	r1, #1790	@ 0x6fe
340056be:	48ae      	ldr	r0, [pc, #696]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340056c0:	f7fb fba0 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340056c4:	4aae      	ldr	r2, [pc, #696]	@ (34005980 <HAL_RCCEx_PeriphCLKConfig+0x1960>)
340056c6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340056c8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340056cc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340056ce:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340056d2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340056d6:	3901      	subs	r1, #1
340056d8:	4303      	orrs	r3, r0
340056da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340056de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340056e2:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340056e4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340056e8:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
340056ec:	f7fe fbb0 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
340056f0:	6863      	ldr	r3, [r4, #4]
340056f2:	05de      	lsls	r6, r3, #23
340056f4:	d544      	bpl.n	34005780 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
340056f6:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
340056fa:	4aa2      	ldr	r2, [pc, #648]	@ (34005984 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
340056fc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005700:	4291      	cmp	r1, r2
34005702:	d00e      	beq.n	34005722 <HAL_RCCEx_PeriphCLKConfig+0x1702>
34005704:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005708:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400570c:	4291      	cmp	r1, r2
3400570e:	d008      	beq.n	34005722 <HAL_RCCEx_PeriphCLKConfig+0x1702>
34005710:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005714:	4293      	cmp	r3, r2
34005716:	d004      	beq.n	34005722 <HAL_RCCEx_PeriphCLKConfig+0x1702>
34005718:	f240 7125 	movw	r1, #1829	@ 0x725
3400571c:	4896      	ldr	r0, [pc, #600]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
3400571e:	f7fb fb71 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34005722:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34005726:	4a98      	ldr	r2, [pc, #608]	@ (34005988 <HAL_RCCEx_PeriphCLKConfig+0x1968>)
34005728:	4293      	cmp	r3, r2
3400572a:	f041 8213 	bne.w	34006b54 <HAL_RCCEx_PeriphCLKConfig+0x2b34>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400572e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34005730:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005734:	d004      	beq.n	34005740 <HAL_RCCEx_PeriphCLKConfig+0x1720>
34005736:	f240 712a 	movw	r1, #1834	@ 0x72a
3400573a:	488f      	ldr	r0, [pc, #572]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
3400573c:	f7fb fb62 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34005740:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34005742:	3b01      	subs	r3, #1
34005744:	2bff      	cmp	r3, #255	@ 0xff
34005746:	d904      	bls.n	34005752 <HAL_RCCEx_PeriphCLKConfig+0x1732>
34005748:	f240 712b 	movw	r1, #1835	@ 0x72b
3400574c:	488a      	ldr	r0, [pc, #552]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
3400574e:	f7fb fb59 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005752:	4a8b      	ldr	r2, [pc, #556]	@ (34005980 <HAL_RCCEx_PeriphCLKConfig+0x1960>)
34005754:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005756:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400575a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3400575c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005760:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005764:	3901      	subs	r1, #1
34005766:	4303      	orrs	r3, r0
34005768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400576c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005770:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005774:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005778:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
3400577c:	f7fe fb68 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34005780:	6863      	ldr	r3, [r4, #4]
34005782:	0598      	lsls	r0, r3, #22
34005784:	d544      	bpl.n	34005810 <HAL_RCCEx_PeriphCLKConfig+0x17f0>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
34005786:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
3400578a:	4a80      	ldr	r2, [pc, #512]	@ (3400598c <HAL_RCCEx_PeriphCLKConfig+0x196c>)
3400578c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005790:	4291      	cmp	r1, r2
34005792:	d00e      	beq.n	340057b2 <HAL_RCCEx_PeriphCLKConfig+0x1792>
34005794:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005798:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400579c:	4291      	cmp	r1, r2
3400579e:	d008      	beq.n	340057b2 <HAL_RCCEx_PeriphCLKConfig+0x1792>
340057a0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340057a4:	4293      	cmp	r3, r2
340057a6:	d004      	beq.n	340057b2 <HAL_RCCEx_PeriphCLKConfig+0x1792>
340057a8:	f240 7152 	movw	r1, #1874	@ 0x752
340057ac:	4872      	ldr	r0, [pc, #456]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340057ae:	f7fb fb29 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
340057b2:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
340057b6:	4a76      	ldr	r2, [pc, #472]	@ (34005990 <HAL_RCCEx_PeriphCLKConfig+0x1970>)
340057b8:	4293      	cmp	r3, r2
340057ba:	f041 821d 	bne.w	34006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340057be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340057c0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340057c4:	d004      	beq.n	340057d0 <HAL_RCCEx_PeriphCLKConfig+0x17b0>
340057c6:	f240 7157 	movw	r1, #1879	@ 0x757
340057ca:	486b      	ldr	r0, [pc, #428]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340057cc:	f7fb fb1a 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340057d0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340057d2:	3b01      	subs	r3, #1
340057d4:	2bff      	cmp	r3, #255	@ 0xff
340057d6:	d904      	bls.n	340057e2 <HAL_RCCEx_PeriphCLKConfig+0x17c2>
340057d8:	f44f 61eb 	mov.w	r1, #1880	@ 0x758
340057dc:	4866      	ldr	r0, [pc, #408]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340057de:	f7fb fb11 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340057e2:	4a67      	ldr	r2, [pc, #412]	@ (34005980 <HAL_RCCEx_PeriphCLKConfig+0x1960>)
340057e4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340057e6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340057ea:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340057ec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340057f0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340057f4:	3901      	subs	r1, #1
340057f6:	4303      	orrs	r3, r0
340057f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340057fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005800:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005804:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005808:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
3400580c:	f7fe fb20 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34005810:	6863      	ldr	r3, [r4, #4]
34005812:	0559      	lsls	r1, r3, #21
34005814:	d544      	bpl.n	340058a0 <HAL_RCCEx_PeriphCLKConfig+0x1880>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
34005816:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
3400581a:	4a5e      	ldr	r2, [pc, #376]	@ (34005994 <HAL_RCCEx_PeriphCLKConfig+0x1974>)
3400581c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005820:	4291      	cmp	r1, r2
34005822:	d00e      	beq.n	34005842 <HAL_RCCEx_PeriphCLKConfig+0x1822>
34005824:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005828:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400582c:	4291      	cmp	r1, r2
3400582e:	d008      	beq.n	34005842 <HAL_RCCEx_PeriphCLKConfig+0x1822>
34005830:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005834:	4293      	cmp	r3, r2
34005836:	d004      	beq.n	34005842 <HAL_RCCEx_PeriphCLKConfig+0x1822>
34005838:	f240 717f 	movw	r1, #1919	@ 0x77f
3400583c:	484e      	ldr	r0, [pc, #312]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
3400583e:	f7fb fae1 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34005842:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34005846:	4a54      	ldr	r2, [pc, #336]	@ (34005998 <HAL_RCCEx_PeriphCLKConfig+0x1978>)
34005848:	4293      	cmp	r3, r2
3400584a:	f041 8206 	bne.w	34006c5a <HAL_RCCEx_PeriphCLKConfig+0x2c3a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400584e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34005850:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005854:	d004      	beq.n	34005860 <HAL_RCCEx_PeriphCLKConfig+0x1840>
34005856:	f240 7184 	movw	r1, #1924	@ 0x784
3400585a:	4847      	ldr	r0, [pc, #284]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
3400585c:	f7fb fad2 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34005860:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34005862:	3b01      	subs	r3, #1
34005864:	2bff      	cmp	r3, #255	@ 0xff
34005866:	d904      	bls.n	34005872 <HAL_RCCEx_PeriphCLKConfig+0x1852>
34005868:	f240 7185 	movw	r1, #1925	@ 0x785
3400586c:	4842      	ldr	r0, [pc, #264]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
3400586e:	f7fb fac9 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005872:	4a43      	ldr	r2, [pc, #268]	@ (34005980 <HAL_RCCEx_PeriphCLKConfig+0x1960>)
34005874:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005876:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400587a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3400587c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005880:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005884:	3901      	subs	r1, #1
34005886:	4303      	orrs	r3, r0
34005888:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400588c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005890:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005894:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005898:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
3400589c:	f7fe fad8 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
340058a0:	6863      	ldr	r3, [r4, #4]
340058a2:	051a      	lsls	r2, r3, #20
340058a4:	d544      	bpl.n	34005930 <HAL_RCCEx_PeriphCLKConfig+0x1910>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
340058a6:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
340058aa:	4a3c      	ldr	r2, [pc, #240]	@ (3400599c <HAL_RCCEx_PeriphCLKConfig+0x197c>)
340058ac:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340058b0:	4291      	cmp	r1, r2
340058b2:	d00e      	beq.n	340058d2 <HAL_RCCEx_PeriphCLKConfig+0x18b2>
340058b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340058b8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340058bc:	4291      	cmp	r1, r2
340058be:	d008      	beq.n	340058d2 <HAL_RCCEx_PeriphCLKConfig+0x18b2>
340058c0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340058c4:	4293      	cmp	r3, r2
340058c6:	d004      	beq.n	340058d2 <HAL_RCCEx_PeriphCLKConfig+0x18b2>
340058c8:	f240 71ac 	movw	r1, #1964	@ 0x7ac
340058cc:	482a      	ldr	r0, [pc, #168]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340058ce:	f7fb fa99 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
340058d2:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
340058d6:	4a32      	ldr	r2, [pc, #200]	@ (340059a0 <HAL_RCCEx_PeriphCLKConfig+0x1980>)
340058d8:	4293      	cmp	r3, r2
340058da:	f041 81ef 	bne.w	34006cbc <HAL_RCCEx_PeriphCLKConfig+0x2c9c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340058de:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340058e0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340058e4:	d004      	beq.n	340058f0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
340058e6:	f240 71b1 	movw	r1, #1969	@ 0x7b1
340058ea:	4823      	ldr	r0, [pc, #140]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340058ec:	f7fb fa8a 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340058f0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340058f2:	3b01      	subs	r3, #1
340058f4:	2bff      	cmp	r3, #255	@ 0xff
340058f6:	d904      	bls.n	34005902 <HAL_RCCEx_PeriphCLKConfig+0x18e2>
340058f8:	f240 71b2 	movw	r1, #1970	@ 0x7b2
340058fc:	481e      	ldr	r0, [pc, #120]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
340058fe:	f7fb fa81 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005902:	4a1f      	ldr	r2, [pc, #124]	@ (34005980 <HAL_RCCEx_PeriphCLKConfig+0x1960>)
34005904:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005906:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400590a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3400590c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005910:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005914:	3901      	subs	r1, #1
34005916:	4303      	orrs	r3, r0
34005918:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400591c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005920:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005924:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005928:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
3400592c:	f7fe fa90 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34005930:	6863      	ldr	r3, [r4, #4]
34005932:	04db      	lsls	r3, r3, #19
34005934:	d55f      	bpl.n	340059f6 <HAL_RCCEx_PeriphCLKConfig+0x19d6>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
34005936:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
3400593a:	4a1a      	ldr	r2, [pc, #104]	@ (340059a4 <HAL_RCCEx_PeriphCLKConfig+0x1984>)
3400593c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005940:	4291      	cmp	r1, r2
34005942:	d00e      	beq.n	34005962 <HAL_RCCEx_PeriphCLKConfig+0x1942>
34005944:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005948:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3400594c:	4291      	cmp	r1, r2
3400594e:	d008      	beq.n	34005962 <HAL_RCCEx_PeriphCLKConfig+0x1942>
34005950:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005954:	4293      	cmp	r3, r2
34005956:	d004      	beq.n	34005962 <HAL_RCCEx_PeriphCLKConfig+0x1942>
34005958:	f240 71d9 	movw	r1, #2009	@ 0x7d9
3400595c:	4806      	ldr	r0, [pc, #24]	@ (34005978 <HAL_RCCEx_PeriphCLKConfig+0x1958>)
3400595e:	f7fb fa51 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34005962:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34005966:	4a10      	ldr	r2, [pc, #64]	@ (340059a8 <HAL_RCCEx_PeriphCLKConfig+0x1988>)
34005968:	4293      	cmp	r3, r2
3400596a:	f041 81d8 	bne.w	34006d1e <HAL_RCCEx_PeriphCLKConfig+0x2cfe>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400596e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34005970:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005974:	d01f      	beq.n	340059b6 <HAL_RCCEx_PeriphCLKConfig+0x1996>
34005976:	e019      	b.n	340059ac <HAL_RCCEx_PeriphCLKConfig+0x198c>
34005978:	34038c3d 	.word	0x34038c3d
3400597c:	07021820 	.word	0x07021820
34005980:	56028000 	.word	0x56028000
34005984:	07000030 	.word	0x07000030
34005988:	07020030 	.word	0x07020030
3400598c:	07000430 	.word	0x07000430
34005990:	07020430 	.word	0x07020430
34005994:	07000830 	.word	0x07000830
34005998:	07020830 	.word	0x07020830
3400599c:	07000c30 	.word	0x07000c30
340059a0:	07020c30 	.word	0x07020c30
340059a4:	07001030 	.word	0x07001030
340059a8:	07021030 	.word	0x07021030
340059ac:	f240 71de 	movw	r1, #2014	@ 0x7de
340059b0:	48bc      	ldr	r0, [pc, #752]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
340059b2:	f7fb fa27 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340059b6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340059b8:	3b01      	subs	r3, #1
340059ba:	2bff      	cmp	r3, #255	@ 0xff
340059bc:	d904      	bls.n	340059c8 <HAL_RCCEx_PeriphCLKConfig+0x19a8>
340059be:	f240 71df 	movw	r1, #2015	@ 0x7df
340059c2:	48b8      	ldr	r0, [pc, #736]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
340059c4:	f7fb fa1e 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340059c8:	4ab7      	ldr	r2, [pc, #732]	@ (34005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
340059ca:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340059cc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340059d0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340059d2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340059d6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340059da:	3901      	subs	r1, #1
340059dc:	4303      	orrs	r3, r0
340059de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340059e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340059e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340059ea:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340059ee:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
340059f2:	f7fe fa2d 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
340059f6:	6863      	ldr	r3, [r4, #4]
340059f8:	049e      	lsls	r6, r3, #18
340059fa:	d544      	bpl.n	34005a86 <HAL_RCCEx_PeriphCLKConfig+0x1a66>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
340059fc:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34005a00:	4aaa      	ldr	r2, [pc, #680]	@ (34005cac <HAL_RCCEx_PeriphCLKConfig+0x1c8c>)
34005a02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005a06:	4291      	cmp	r1, r2
34005a08:	d00e      	beq.n	34005a28 <HAL_RCCEx_PeriphCLKConfig+0x1a08>
34005a0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005a0e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005a12:	4291      	cmp	r1, r2
34005a14:	d008      	beq.n	34005a28 <HAL_RCCEx_PeriphCLKConfig+0x1a08>
34005a16:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005a1a:	4293      	cmp	r3, r2
34005a1c:	d004      	beq.n	34005a28 <HAL_RCCEx_PeriphCLKConfig+0x1a08>
34005a1e:	f640 0106 	movw	r1, #2054	@ 0x806
34005a22:	48a0      	ldr	r0, [pc, #640]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005a24:	f7fb f9ee 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34005a28:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34005a2c:	4aa0      	ldr	r2, [pc, #640]	@ (34005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c90>)
34005a2e:	4293      	cmp	r3, r2
34005a30:	f041 81a6 	bne.w	34006d80 <HAL_RCCEx_PeriphCLKConfig+0x2d60>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34005a34:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34005a36:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005a3a:	d004      	beq.n	34005a46 <HAL_RCCEx_PeriphCLKConfig+0x1a26>
34005a3c:	f640 010b 	movw	r1, #2059	@ 0x80b
34005a40:	4898      	ldr	r0, [pc, #608]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005a42:	f7fb f9df 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34005a46:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34005a48:	3b01      	subs	r3, #1
34005a4a:	2bff      	cmp	r3, #255	@ 0xff
34005a4c:	d904      	bls.n	34005a58 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
34005a4e:	f640 010c 	movw	r1, #2060	@ 0x80c
34005a52:	4894      	ldr	r0, [pc, #592]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005a54:	f7fb f9d6 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005a58:	4a93      	ldr	r2, [pc, #588]	@ (34005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34005a5a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005a5c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34005a60:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34005a62:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005a66:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005a6a:	3901      	subs	r1, #1
34005a6c:	4303      	orrs	r3, r0
34005a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005a72:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005a7a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005a7e:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
34005a82:	f7fe f9e5 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34005a86:	6863      	ldr	r3, [r4, #4]
34005a88:	0458      	lsls	r0, r3, #17
34005a8a:	d544      	bpl.n	34005b16 <HAL_RCCEx_PeriphCLKConfig+0x1af6>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
34005a8c:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34005a90:	4a88      	ldr	r2, [pc, #544]	@ (34005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c94>)
34005a92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005a96:	4291      	cmp	r1, r2
34005a98:	d00e      	beq.n	34005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a98>
34005a9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005a9e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005aa2:	4291      	cmp	r1, r2
34005aa4:	d008      	beq.n	34005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a98>
34005aa6:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005aaa:	4293      	cmp	r3, r2
34005aac:	d004      	beq.n	34005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a98>
34005aae:	f640 0133 	movw	r1, #2099	@ 0x833
34005ab2:	487c      	ldr	r0, [pc, #496]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005ab4:	f7fb f9a6 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34005ab8:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34005abc:	4a7e      	ldr	r2, [pc, #504]	@ (34005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c98>)
34005abe:	4293      	cmp	r3, r2
34005ac0:	f041 818f 	bne.w	34006de2 <HAL_RCCEx_PeriphCLKConfig+0x2dc2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34005ac4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34005ac6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005aca:	d004      	beq.n	34005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ab6>
34005acc:	f640 0138 	movw	r1, #2104	@ 0x838
34005ad0:	4874      	ldr	r0, [pc, #464]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005ad2:	f7fb f997 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34005ad6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34005ad8:	3b01      	subs	r3, #1
34005ada:	2bff      	cmp	r3, #255	@ 0xff
34005adc:	d904      	bls.n	34005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>
34005ade:	f640 0139 	movw	r1, #2105	@ 0x839
34005ae2:	4870      	ldr	r0, [pc, #448]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005ae4:	f7fb f98e 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005ae8:	4a6f      	ldr	r2, [pc, #444]	@ (34005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34005aea:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005aec:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34005af0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34005af2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005af6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005afa:	3901      	subs	r1, #1
34005afc:	4303      	orrs	r3, r0
34005afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005b02:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005b06:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005b0a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005b0e:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
34005b12:	f7fe f99d 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34005b16:	6863      	ldr	r3, [r4, #4]
34005b18:	0419      	lsls	r1, r3, #16
34005b1a:	d544      	bpl.n	34005ba6 <HAL_RCCEx_PeriphCLKConfig+0x1b86>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34005b1c:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34005b20:	4a66      	ldr	r2, [pc, #408]	@ (34005cbc <HAL_RCCEx_PeriphCLKConfig+0x1c9c>)
34005b22:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005b26:	4291      	cmp	r1, r2
34005b28:	d00e      	beq.n	34005b48 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
34005b2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005b2e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005b32:	4291      	cmp	r1, r2
34005b34:	d008      	beq.n	34005b48 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
34005b36:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005b3a:	4293      	cmp	r3, r2
34005b3c:	d004      	beq.n	34005b48 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
34005b3e:	f44f 6106 	mov.w	r1, #2144	@ 0x860
34005b42:	4858      	ldr	r0, [pc, #352]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005b44:	f7fb f95e 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34005b48:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34005b4c:	4a5c      	ldr	r2, [pc, #368]	@ (34005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1ca0>)
34005b4e:	4293      	cmp	r3, r2
34005b50:	f041 8178 	bne.w	34006e44 <HAL_RCCEx_PeriphCLKConfig+0x2e24>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34005b54:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34005b56:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005b5a:	d004      	beq.n	34005b66 <HAL_RCCEx_PeriphCLKConfig+0x1b46>
34005b5c:	f640 0165 	movw	r1, #2149	@ 0x865
34005b60:	4850      	ldr	r0, [pc, #320]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005b62:	f7fb f94f 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34005b66:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34005b68:	3b01      	subs	r3, #1
34005b6a:	2bff      	cmp	r3, #255	@ 0xff
34005b6c:	d904      	bls.n	34005b78 <HAL_RCCEx_PeriphCLKConfig+0x1b58>
34005b6e:	f640 0166 	movw	r1, #2150	@ 0x866
34005b72:	484c      	ldr	r0, [pc, #304]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005b74:	f7fb f946 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005b78:	4a4b      	ldr	r2, [pc, #300]	@ (34005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34005b7a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005b7c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34005b80:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34005b82:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005b86:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005b8a:	3901      	subs	r1, #1
34005b8c:	4303      	orrs	r3, r0
34005b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005b92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005b9a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005b9e:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
34005ba2:	f7fe f955 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34005ba6:	6863      	ldr	r3, [r4, #4]
34005ba8:	03da      	lsls	r2, r3, #15
34005baa:	d544      	bpl.n	34005c36 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
34005bac:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34005bb0:	4a44      	ldr	r2, [pc, #272]	@ (34005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ca4>)
34005bb2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005bb6:	4291      	cmp	r1, r2
34005bb8:	d00e      	beq.n	34005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1bb8>
34005bba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005bbe:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005bc2:	4291      	cmp	r1, r2
34005bc4:	d008      	beq.n	34005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1bb8>
34005bc6:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005bca:	4293      	cmp	r3, r2
34005bcc:	d004      	beq.n	34005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1bb8>
34005bce:	f640 018d 	movw	r1, #2189	@ 0x88d
34005bd2:	4834      	ldr	r0, [pc, #208]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005bd4:	f7fb f916 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34005bd8:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34005bdc:	4a3a      	ldr	r2, [pc, #232]	@ (34005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ca8>)
34005bde:	4293      	cmp	r3, r2
34005be0:	f041 8182 	bne.w	34006ee8 <HAL_RCCEx_PeriphCLKConfig+0x2ec8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34005be4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34005be6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005bea:	d004      	beq.n	34005bf6 <HAL_RCCEx_PeriphCLKConfig+0x1bd6>
34005bec:	f640 0192 	movw	r1, #2194	@ 0x892
34005bf0:	482c      	ldr	r0, [pc, #176]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005bf2:	f7fb f907 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34005bf6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34005bf8:	3b01      	subs	r3, #1
34005bfa:	2bff      	cmp	r3, #255	@ 0xff
34005bfc:	d904      	bls.n	34005c08 <HAL_RCCEx_PeriphCLKConfig+0x1be8>
34005bfe:	f640 0193 	movw	r1, #2195	@ 0x893
34005c02:	4828      	ldr	r0, [pc, #160]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005c04:	f7fb f8fe 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005c08:	4a27      	ldr	r2, [pc, #156]	@ (34005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34005c0a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005c0c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34005c10:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34005c12:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005c16:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005c1a:	3901      	subs	r1, #1
34005c1c:	4303      	orrs	r3, r0
34005c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005c22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005c26:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005c2a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005c2e:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
34005c32:	f7fe f90d 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34005c36:	6863      	ldr	r3, [r4, #4]
34005c38:	039b      	lsls	r3, r3, #14
34005c3a:	d55e      	bpl.n	34005cfa <HAL_RCCEx_PeriphCLKConfig+0x1cda>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
34005c3c:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34005c40:	4a22      	ldr	r2, [pc, #136]	@ (34005ccc <HAL_RCCEx_PeriphCLKConfig+0x1cac>)
34005c42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005c46:	4291      	cmp	r1, r2
34005c48:	d00e      	beq.n	34005c68 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
34005c4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005c4e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34005c52:	4291      	cmp	r1, r2
34005c54:	d008      	beq.n	34005c68 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
34005c56:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34005c5a:	4293      	cmp	r3, r2
34005c5c:	d004      	beq.n	34005c68 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
34005c5e:	f640 01ba 	movw	r1, #2234	@ 0x8ba
34005c62:	4810      	ldr	r0, [pc, #64]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005c64:	f7fb f8ce 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34005c68:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34005c6c:	4a18      	ldr	r2, [pc, #96]	@ (34005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
34005c6e:	4293      	cmp	r3, r2
34005c70:	f041 816b 	bne.w	34006f4a <HAL_RCCEx_PeriphCLKConfig+0x2f2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34005c74:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34005c76:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005c7a:	d004      	beq.n	34005c86 <HAL_RCCEx_PeriphCLKConfig+0x1c66>
34005c7c:	f640 01bf 	movw	r1, #2239	@ 0x8bf
34005c80:	4808      	ldr	r0, [pc, #32]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005c82:	f7fb f8bf 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34005c86:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34005c88:	3b01      	subs	r3, #1
34005c8a:	2bff      	cmp	r3, #255	@ 0xff
34005c8c:	d904      	bls.n	34005c98 <HAL_RCCEx_PeriphCLKConfig+0x1c78>
34005c8e:	f44f 610c 	mov.w	r1, #2240	@ 0x8c0
34005c92:	4804      	ldr	r0, [pc, #16]	@ (34005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c84>)
34005c94:	f7fb f8b6 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005c98:	4a03      	ldr	r2, [pc, #12]	@ (34005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c88>)
34005c9a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34005c9c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34005ca0:	e018      	b.n	34005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
34005ca2:	bf00      	nop
34005ca4:	34038c3d 	.word	0x34038c3d
34005ca8:	56028000 	.word	0x56028000
34005cac:	07001430 	.word	0x07001430
34005cb0:	07021430 	.word	0x07021430
34005cb4:	07001830 	.word	0x07001830
34005cb8:	07021830 	.word	0x07021830
34005cbc:	07001c30 	.word	0x07001c30
34005cc0:	07021c30 	.word	0x07021c30
34005cc4:	07000034 	.word	0x07000034
34005cc8:	07020034 	.word	0x07020034
34005ccc:	07000434 	.word	0x07000434
34005cd0:	07020434 	.word	0x07020434
34005cd4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34005cd6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005cda:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005cde:	3901      	subs	r1, #1
34005ce0:	4303      	orrs	r3, r0
34005ce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005ce6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34005cea:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34005cee:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34005cf2:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
34005cf6:	f7fe f8ab 	bl	34003e50 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34005cfa:	6863      	ldr	r3, [r4, #4]
34005cfc:	035e      	lsls	r6, r3, #13
34005cfe:	d51e      	bpl.n	34005d3e <HAL_RCCEx_PeriphCLKConfig+0x1d1e>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
34005d00:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34005d04:	4ab1      	ldr	r2, [pc, #708]	@ (34005fcc <HAL_RCCEx_PeriphCLKConfig+0x1fac>)
34005d06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005d0a:	4291      	cmp	r1, r2
34005d0c:	d00a      	beq.n	34005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d04>
34005d0e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34005d12:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34005d16:	4293      	cmp	r3, r2
34005d18:	d004      	beq.n	34005d24 <HAL_RCCEx_PeriphCLKConfig+0x1d04>
34005d1a:	f640 01e7 	movw	r1, #2279	@ 0x8e7
34005d1e:	48ac      	ldr	r0, [pc, #688]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005d20:	f7fb f870 	bl	34000e04 <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34005d24:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
34005d28:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34005d2c:	f7fe f890 	bl	34003e50 <LL_RCC_SetClockSource>
34005d30:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34005d34:	2b00      	cmp	r3, #0
34005d36:	f281 8139 	bge.w	34006fac <HAL_RCCEx_PeriphCLKConfig+0x2f8c>
34005d3a:	f7fe f859 	bl	34003df0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34005d3e:	6863      	ldr	r3, [r4, #4]
34005d40:	02d8      	lsls	r0, r3, #11
34005d42:	d51e      	bpl.n	34005d82 <HAL_RCCEx_PeriphCLKConfig+0x1d62>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
34005d44:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34005d48:	4aa2      	ldr	r2, [pc, #648]	@ (34005fd4 <HAL_RCCEx_PeriphCLKConfig+0x1fb4>)
34005d4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34005d4e:	4291      	cmp	r1, r2
34005d50:	d00a      	beq.n	34005d68 <HAL_RCCEx_PeriphCLKConfig+0x1d48>
34005d52:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34005d56:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34005d5a:	4293      	cmp	r3, r2
34005d5c:	d004      	beq.n	34005d68 <HAL_RCCEx_PeriphCLKConfig+0x1d48>
34005d5e:	f640 01f1 	movw	r1, #2289	@ 0x8f1
34005d62:	489b      	ldr	r0, [pc, #620]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005d64:	f7fb f84e 	bl	34000e04 <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34005d68:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
34005d6c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34005d70:	f7fe f86e 	bl	34003e50 <LL_RCC_SetClockSource>
34005d74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34005d78:	2b00      	cmp	r3, #0
34005d7a:	f281 811b 	bge.w	34006fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f94>
34005d7e:	f7fe f837 	bl	34003df0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34005d82:	6863      	ldr	r3, [r4, #4]
34005d84:	0319      	lsls	r1, r3, #12
34005d86:	d549      	bpl.n	34005e1c <HAL_RCCEx_PeriphCLKConfig+0x1dfc>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
34005d88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34005d8c:	4a92      	ldr	r2, [pc, #584]	@ (34005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
34005d8e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005d92:	4291      	cmp	r1, r2
34005d94:	d00a      	beq.n	34005dac <HAL_RCCEx_PeriphCLKConfig+0x1d8c>
34005d96:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34005d9a:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34005d9e:	4293      	cmp	r3, r2
34005da0:	d004      	beq.n	34005dac <HAL_RCCEx_PeriphCLKConfig+0x1d8c>
34005da2:	f640 01fb 	movw	r1, #2299	@ 0x8fb
34005da6:	488a      	ldr	r0, [pc, #552]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005da8:	f7fb f82c 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34005dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34005db0:	4a8a      	ldr	r2, [pc, #552]	@ (34005fdc <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
34005db2:	4293      	cmp	r3, r2
34005db4:	f041 8102 	bne.w	34006fbc <HAL_RCCEx_PeriphCLKConfig+0x2f9c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005db8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005dba:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005dbe:	d004      	beq.n	34005dca <HAL_RCCEx_PeriphCLKConfig+0x1daa>
34005dc0:	f44f 6110 	mov.w	r1, #2304	@ 0x900
34005dc4:	4882      	ldr	r0, [pc, #520]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005dc6:	f7fb f81d 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005dca:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005dcc:	3b01      	subs	r3, #1
34005dce:	2bff      	cmp	r3, #255	@ 0xff
34005dd0:	d904      	bls.n	34005ddc <HAL_RCCEx_PeriphCLKConfig+0x1dbc>
34005dd2:	f640 1101 	movw	r1, #2305	@ 0x901
34005dd6:	487e      	ldr	r0, [pc, #504]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005dd8:	f7fb f814 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005ddc:	4a80      	ldr	r2, [pc, #512]	@ (34005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>)
34005dde:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005de0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005de4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005de6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005dea:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005dee:	3901      	subs	r1, #1
34005df0:	4303      	orrs	r3, r0
34005df2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005df6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005dfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005dfe:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34005e02:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
34005e06:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34005e0a:	f7fe f821 	bl	34003e50 <LL_RCC_SetClockSource>
34005e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34005e12:	2b00      	cmp	r3, #0
34005e14:	f281 80db 	bge.w	34006fce <HAL_RCCEx_PeriphCLKConfig+0x2fae>
34005e18:	f7fd ffea 	bl	34003df0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34005e1c:	6863      	ldr	r3, [r4, #4]
34005e1e:	029a      	lsls	r2, r3, #10
34005e20:	d549      	bpl.n	34005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e96>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
34005e22:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34005e26:	4a6f      	ldr	r2, [pc, #444]	@ (34005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>)
34005e28:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34005e2c:	4291      	cmp	r1, r2
34005e2e:	d00a      	beq.n	34005e46 <HAL_RCCEx_PeriphCLKConfig+0x1e26>
34005e30:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34005e34:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34005e38:	4293      	cmp	r3, r2
34005e3a:	d004      	beq.n	34005e46 <HAL_RCCEx_PeriphCLKConfig+0x1e26>
34005e3c:	f640 111b 	movw	r1, #2331	@ 0x91b
34005e40:	4863      	ldr	r0, [pc, #396]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005e42:	f7fa ffdf 	bl	34000e04 <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34005e46:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34005e4a:	4a67      	ldr	r2, [pc, #412]	@ (34005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1fc8>)
34005e4c:	4293      	cmp	r3, r2
34005e4e:	f041 80c2 	bne.w	34006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2fb6>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005e52:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005e54:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005e58:	d004      	beq.n	34005e64 <HAL_RCCEx_PeriphCLKConfig+0x1e44>
34005e5a:	f44f 6112 	mov.w	r1, #2336	@ 0x920
34005e5e:	485c      	ldr	r0, [pc, #368]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005e60:	f7fa ffd0 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005e64:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005e66:	3b01      	subs	r3, #1
34005e68:	2bff      	cmp	r3, #255	@ 0xff
34005e6a:	d904      	bls.n	34005e76 <HAL_RCCEx_PeriphCLKConfig+0x1e56>
34005e6c:	f640 1121 	movw	r1, #2337	@ 0x921
34005e70:	4857      	ldr	r0, [pc, #348]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005e72:	f7fa ffc7 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005e76:	4a5a      	ldr	r2, [pc, #360]	@ (34005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>)
34005e78:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005e7a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005e7e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005e80:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005e84:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005e88:	3901      	subs	r1, #1
34005e8a:	4303      	orrs	r3, r0
34005e8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005e90:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005e94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005e98:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34005e9c:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
34005ea0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34005ea4:	f7fd ffd4 	bl	34003e50 <LL_RCC_SetClockSource>
34005ea8:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34005eac:	2b00      	cmp	r3, #0
34005eae:	f281 809b 	bge.w	34006fe8 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>
34005eb2:	f7fd ff9d 	bl	34003df0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34005eb6:	6863      	ldr	r3, [r4, #4]
34005eb8:	061b      	lsls	r3, r3, #24
34005eba:	d511      	bpl.n	34005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
34005ebc:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
34005ec0:	2b03      	cmp	r3, #3
34005ec2:	d904      	bls.n	34005ece <HAL_RCCEx_PeriphCLKConfig+0x1eae>
34005ec4:	f640 113b 	movw	r1, #2363	@ 0x93b
34005ec8:	4841      	ldr	r0, [pc, #260]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005eca:	f7fa ff9b 	bl	34000e04 <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34005ece:	4a44      	ldr	r2, [pc, #272]	@ (34005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>)
34005ed0:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
34005ed4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34005ed6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34005eda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
34005ede:	6253      	str	r3, [r2, #36]	@ 0x24
}
34005ee0:	1e28      	subs	r0, r5, #0
34005ee2:	bf18      	it	ne
34005ee4:	2001      	movne	r0, #1
34005ee6:	bd70      	pop	{r4, r5, r6, pc}
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34005ee8:	f401 7240 	and.w	r2, r1, #768	@ 0x300
34005eec:	429a      	cmp	r2, r3
34005eee:	f43e a912 	beq.w	34004116 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34005ef2:	4b3e      	ldr	r3, [pc, #248]	@ (34005fec <HAL_RCCEx_PeriphCLKConfig+0x1fcc>)
34005ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34005ef6:	f042 0201 	orr.w	r2, r2, #1
34005efa:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34005efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34005efe:	07db      	lsls	r3, r3, #31
34005f00:	f53e a909 	bmi.w	34004116 <HAL_RCCEx_PeriphCLKConfig+0xf6>
        ret = HAL_ERROR;
34005f04:	2501      	movs	r5, #1
34005f06:	f7fe b92c 	b.w	34004162 <HAL_RCCEx_PeriphCLKConfig+0x142>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34005f0a:	f7fc fa67 	bl	340023dc <HAL_GetTick>
34005f0e:	1b40      	subs	r0, r0, r5
34005f10:	42b0      	cmp	r0, r6
34005f12:	f67e a908 	bls.w	34004126 <HAL_RCCEx_PeriphCLKConfig+0x106>
        status = ret;
34005f16:	2503      	movs	r5, #3
34005f18:	f7fe b923 	b.w	34004162 <HAL_RCCEx_PeriphCLKConfig+0x142>
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
34005f1c:	3b03      	subs	r3, #3
34005f1e:	2b04      	cmp	r3, #4
34005f20:	f63e a951 	bhi.w	340041c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
34005f24:	a201      	add	r2, pc, #4	@ (adr r2, 34005f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0c>)
34005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34005f2a:	bf00      	nop
34005f2c:	34005ff1 	.word	0x34005ff1
34005f30:	340041c7 	.word	0x340041c7
34005f34:	34005f41 	.word	0x34005f41
34005f38:	34005f87 	.word	0x34005f87
34005f3c:	34006043 	.word	0x34006043
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34005f40:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34005f42:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005f46:	d003      	beq.n	34005f50 <HAL_RCCEx_PeriphCLKConfig+0x1f30>
34005f48:	21f1      	movs	r1, #241	@ 0xf1
34005f4a:	4821      	ldr	r0, [pc, #132]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005f4c:	f7fa ff5a 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34005f50:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34005f52:	3b01      	subs	r3, #1
34005f54:	2bff      	cmp	r3, #255	@ 0xff
34005f56:	d903      	bls.n	34005f60 <HAL_RCCEx_PeriphCLKConfig+0x1f40>
34005f58:	21f2      	movs	r1, #242	@ 0xf2
34005f5a:	481d      	ldr	r0, [pc, #116]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005f5c:	f7fa ff52 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34005f60:	4a1f      	ldr	r2, [pc, #124]	@ (34005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>)
34005f62:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34005f64:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34005f68:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34005f6a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005f6e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005f72:	3901      	subs	r1, #1
34005f74:	4303      	orrs	r3, r0
34005f76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005f7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34005f7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
34005f82:	f7fe b91e 	b.w	340041c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34005f86:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34005f88:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005f8c:	d003      	beq.n	34005f96 <HAL_RCCEx_PeriphCLKConfig+0x1f76>
34005f8e:	21fe      	movs	r1, #254	@ 0xfe
34005f90:	480f      	ldr	r0, [pc, #60]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005f92:	f7fa ff37 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34005f96:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34005f98:	3b01      	subs	r3, #1
34005f9a:	2bff      	cmp	r3, #255	@ 0xff
34005f9c:	d903      	bls.n	34005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1f86>
34005f9e:	21ff      	movs	r1, #255	@ 0xff
34005fa0:	480b      	ldr	r0, [pc, #44]	@ (34005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1fb0>)
34005fa2:	f7fa ff2f 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005fa6:	4a0e      	ldr	r2, [pc, #56]	@ (34005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>)
34005fa8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34005faa:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34005fae:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34005fb0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005fb4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005fb8:	3901      	subs	r1, #1
34005fba:	4303      	orrs	r3, r0
34005fbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34005fc0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34005fc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34005fc8:	f7fe b8fb 	b.w	340041c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
34005fcc:	01001014 	.word	0x01001014
34005fd0:	34038c3d 	.word	0x34038c3d
34005fd4:	01001814 	.word	0x01001814
34005fd8:	03000c14 	.word	0x03000c14
34005fdc:	03020c14 	.word	0x03020c14
34005fe0:	56028000 	.word	0x56028000
34005fe4:	03001414 	.word	0x03001414
34005fe8:	03021414 	.word	0x03021414
34005fec:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34005ff0:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34005ff4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34005ff8:	d004      	beq.n	34006004 <HAL_RCCEx_PeriphCLKConfig+0x1fe4>
34005ffa:	f240 110b 	movw	r1, #267	@ 0x10b
34005ffe:	48b4      	ldr	r0, [pc, #720]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34006000:	f7fa ff00 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34006004:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34006008:	3b01      	subs	r3, #1
3400600a:	2bff      	cmp	r3, #255	@ 0xff
3400600c:	d904      	bls.n	34006018 <HAL_RCCEx_PeriphCLKConfig+0x1ff8>
3400600e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
34006012:	48af      	ldr	r0, [pc, #700]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34006014:	f7fa fef6 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34006018:	4aae      	ldr	r2, [pc, #696]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400601a:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
3400601e:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34006022:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34006026:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400602a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400602e:	3901      	subs	r1, #1
34006030:	4303      	orrs	r3, r0
34006032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006036:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
3400603a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
3400603e:	f7fe b8c0 	b.w	340041c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
34006042:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34006046:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400604a:	d004      	beq.n	34006056 <HAL_RCCEx_PeriphCLKConfig+0x2036>
3400604c:	f44f 718c 	mov.w	r1, #280	@ 0x118
34006050:	489f      	ldr	r0, [pc, #636]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34006052:	f7fa fed7 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34006056:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
3400605a:	3b01      	subs	r3, #1
3400605c:	2bff      	cmp	r3, #255	@ 0xff
3400605e:	d904      	bls.n	3400606a <HAL_RCCEx_PeriphCLKConfig+0x204a>
34006060:	f240 1119 	movw	r1, #281	@ 0x119
34006064:	489a      	ldr	r0, [pc, #616]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34006066:	f7fa fecd 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400606a:	4a9a      	ldr	r2, [pc, #616]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400606c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34006070:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
34006074:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34006078:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400607c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006080:	3901      	subs	r1, #1
34006082:	4303      	orrs	r3, r0
34006084:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006088:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
3400608c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34006090:	f7fe b897 	b.w	340041c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34006094:	4a90      	ldr	r2, [pc, #576]	@ (340062d8 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
34006096:	4293      	cmp	r3, r2
34006098:	d123      	bne.n	340060e2 <HAL_RCCEx_PeriphCLKConfig+0x20c2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400609a:	6a23      	ldr	r3, [r4, #32]
3400609c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340060a0:	d004      	beq.n	340060ac <HAL_RCCEx_PeriphCLKConfig+0x208c>
340060a2:	f240 1141 	movw	r1, #321	@ 0x141
340060a6:	488a      	ldr	r0, [pc, #552]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
340060a8:	f7fa feac 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340060ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340060ae:	3b01      	subs	r3, #1
340060b0:	2bff      	cmp	r3, #255	@ 0xff
340060b2:	d904      	bls.n	340060be <HAL_RCCEx_PeriphCLKConfig+0x209e>
340060b4:	f44f 71a1 	mov.w	r1, #322	@ 0x142
340060b8:	4885      	ldr	r0, [pc, #532]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
340060ba:	f7fa fea3 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340060be:	4a85      	ldr	r2, [pc, #532]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340060c0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340060c2:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340060c6:	6a20      	ldr	r0, [r4, #32]
340060c8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340060cc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340060d0:	3901      	subs	r1, #1
340060d2:	4303      	orrs	r3, r0
340060d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340060d8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340060dc:	2308      	movs	r3, #8
340060de:	f7fe b8b3 	b.w	34004248 <HAL_RCCEx_PeriphCLKConfig+0x228>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
340060e2:	4a7e      	ldr	r2, [pc, #504]	@ (340062dc <HAL_RCCEx_PeriphCLKConfig+0x22bc>)
340060e4:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340060e6:	bf02      	ittt	eq
340060e8:	2240      	moveq	r2, #64	@ 0x40
340060ea:	4b7a      	ldreq	r3, [pc, #488]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340060ec:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340060f0:	f7fe b8ac 	b.w	3400424c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
340060f4:	4a7a      	ldr	r2, [pc, #488]	@ (340062e0 <HAL_RCCEx_PeriphCLKConfig+0x22c0>)
340060f6:	4293      	cmp	r3, r2
340060f8:	d123      	bne.n	34006142 <HAL_RCCEx_PeriphCLKConfig+0x2122>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340060fa:	6a23      	ldr	r3, [r4, #32]
340060fc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006100:	d004      	beq.n	3400610c <HAL_RCCEx_PeriphCLKConfig+0x20ec>
34006102:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
34006106:	4872      	ldr	r0, [pc, #456]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34006108:	f7fa fe7c 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400610c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400610e:	3b01      	subs	r3, #1
34006110:	2bff      	cmp	r3, #255	@ 0xff
34006112:	d904      	bls.n	3400611e <HAL_RCCEx_PeriphCLKConfig+0x20fe>
34006114:	f240 116f 	movw	r1, #367	@ 0x16f
34006118:	486d      	ldr	r0, [pc, #436]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
3400611a:	f7fa fe73 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400611e:	4a6d      	ldr	r2, [pc, #436]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34006120:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34006122:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34006126:	6a20      	ldr	r0, [r4, #32]
34006128:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400612c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006130:	3901      	subs	r1, #1
34006132:	4303      	orrs	r3, r0
34006134:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006138:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400613c:	2308      	movs	r3, #8
3400613e:	f7fe b8c0 	b.w	340042c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
34006142:	4a68      	ldr	r2, [pc, #416]	@ (340062e4 <HAL_RCCEx_PeriphCLKConfig+0x22c4>)
34006144:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006146:	bf02      	ittt	eq
34006148:	2240      	moveq	r2, #64	@ 0x40
3400614a:	4b62      	ldreq	r3, [pc, #392]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400614c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006150:	f7fe b8b9 	b.w	340042c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
34006154:	4a64      	ldr	r2, [pc, #400]	@ (340062e8 <HAL_RCCEx_PeriphCLKConfig+0x22c8>)
34006156:	4293      	cmp	r3, r2
34006158:	d123      	bne.n	340061a2 <HAL_RCCEx_PeriphCLKConfig+0x2182>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400615a:	6a23      	ldr	r3, [r4, #32]
3400615c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006160:	d004      	beq.n	3400616c <HAL_RCCEx_PeriphCLKConfig+0x214c>
34006162:	f240 119b 	movw	r1, #411	@ 0x19b
34006166:	485a      	ldr	r0, [pc, #360]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34006168:	f7fa fe4c 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400616c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400616e:	3b01      	subs	r3, #1
34006170:	2bff      	cmp	r3, #255	@ 0xff
34006172:	d904      	bls.n	3400617e <HAL_RCCEx_PeriphCLKConfig+0x215e>
34006174:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
34006178:	4855      	ldr	r0, [pc, #340]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
3400617a:	f7fa fe43 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400617e:	4a55      	ldr	r2, [pc, #340]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34006180:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34006182:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34006186:	6a20      	ldr	r0, [r4, #32]
34006188:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400618c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006190:	3901      	subs	r1, #1
34006192:	4303      	orrs	r3, r0
34006194:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006198:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400619c:	2308      	movs	r3, #8
3400619e:	f7fe b8e2 	b.w	34004366 <HAL_RCCEx_PeriphCLKConfig+0x346>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
340061a2:	4a52      	ldr	r2, [pc, #328]	@ (340062ec <HAL_RCCEx_PeriphCLKConfig+0x22cc>)
340061a4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340061a6:	bf02      	ittt	eq
340061a8:	2240      	moveq	r2, #64	@ 0x40
340061aa:	4b4a      	ldreq	r3, [pc, #296]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340061ac:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340061b0:	f7fe b8db 	b.w	3400436a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
340061b4:	2b30      	cmp	r3, #48	@ 0x30
340061b6:	d123      	bne.n	34006200 <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340061b8:	6a23      	ldr	r3, [r4, #32]
340061ba:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340061be:	d004      	beq.n	340061ca <HAL_RCCEx_PeriphCLKConfig+0x21aa>
340061c0:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
340061c4:	4842      	ldr	r0, [pc, #264]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
340061c6:	f7fa fe1d 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340061ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340061cc:	3b01      	subs	r3, #1
340061ce:	2bff      	cmp	r3, #255	@ 0xff
340061d0:	d904      	bls.n	340061dc <HAL_RCCEx_PeriphCLKConfig+0x21bc>
340061d2:	f240 11c9 	movw	r1, #457	@ 0x1c9
340061d6:	483e      	ldr	r0, [pc, #248]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
340061d8:	f7fa fe14 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340061dc:	4a3d      	ldr	r2, [pc, #244]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340061de:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340061e0:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340061e4:	6a20      	ldr	r0, [r4, #32]
340061e6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340061ea:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340061ee:	3901      	subs	r1, #1
340061f0:	4303      	orrs	r3, r0
340061f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340061f6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340061fa:	2308      	movs	r3, #8
340061fc:	f7fe b8ed 	b.w	340043da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34006200:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006202:	bf02      	ittt	eq
34006204:	2240      	moveq	r2, #64	@ 0x40
34006206:	4b33      	ldreq	r3, [pc, #204]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34006208:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400620c:	f7fe b8e7 	b.w	340043de <HAL_RCCEx_PeriphCLKConfig+0x3be>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34006210:	4a37      	ldr	r2, [pc, #220]	@ (340062f0 <HAL_RCCEx_PeriphCLKConfig+0x22d0>)
34006212:	4293      	cmp	r3, r2
34006214:	d123      	bne.n	3400625e <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34006216:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34006218:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400621c:	d004      	beq.n	34006228 <HAL_RCCEx_PeriphCLKConfig+0x2208>
3400621e:	f240 11f5 	movw	r1, #501	@ 0x1f5
34006222:	482b      	ldr	r0, [pc, #172]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34006224:	f7fa fdee 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34006228:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400622a:	3b01      	subs	r3, #1
3400622c:	2bff      	cmp	r3, #255	@ 0xff
3400622e:	d904      	bls.n	3400623a <HAL_RCCEx_PeriphCLKConfig+0x221a>
34006230:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
34006234:	4826      	ldr	r0, [pc, #152]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34006236:	f7fa fde5 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400623a:	4a26      	ldr	r2, [pc, #152]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400623c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400623e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34006242:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34006244:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006248:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400624c:	3901      	subs	r1, #1
3400624e:	4303      	orrs	r3, r0
34006250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006254:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34006258:	2310      	movs	r3, #16
3400625a:	f7fe b901 	b.w	34004460 <HAL_RCCEx_PeriphCLKConfig+0x440>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3400625e:	4a25      	ldr	r2, [pc, #148]	@ (340062f4 <HAL_RCCEx_PeriphCLKConfig+0x22d4>)
34006260:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006262:	bf02      	ittt	eq
34006264:	2240      	moveq	r2, #64	@ 0x40
34006266:	4b1b      	ldreq	r3, [pc, #108]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
34006268:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400626c:	f7fe b8fa 	b.w	34004464 <HAL_RCCEx_PeriphCLKConfig+0x444>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
34006270:	4a21      	ldr	r2, [pc, #132]	@ (340062f8 <HAL_RCCEx_PeriphCLKConfig+0x22d8>)
34006272:	4293      	cmp	r3, r2
34006274:	d123      	bne.n	340062be <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34006276:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34006278:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400627c:	d004      	beq.n	34006288 <HAL_RCCEx_PeriphCLKConfig+0x2268>
3400627e:	f240 2122 	movw	r1, #546	@ 0x222
34006282:	4813      	ldr	r0, [pc, #76]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34006284:	f7fa fdbe 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34006288:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400628a:	3b01      	subs	r3, #1
3400628c:	2bff      	cmp	r3, #255	@ 0xff
3400628e:	d904      	bls.n	3400629a <HAL_RCCEx_PeriphCLKConfig+0x227a>
34006290:	f240 2123 	movw	r1, #547	@ 0x223
34006294:	480e      	ldr	r0, [pc, #56]	@ (340062d0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>)
34006296:	f7fa fdb5 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400629a:	4a0e      	ldr	r2, [pc, #56]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400629c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3400629e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340062a2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340062a4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340062a8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340062ac:	3901      	subs	r1, #1
340062ae:	4303      	orrs	r3, r0
340062b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340062b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340062b8:	2310      	movs	r3, #16
340062ba:	f7fe b90e 	b.w	340044da <HAL_RCCEx_PeriphCLKConfig+0x4ba>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
340062be:	4a0f      	ldr	r2, [pc, #60]	@ (340062fc <HAL_RCCEx_PeriphCLKConfig+0x22dc>)
340062c0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340062c2:	bf02      	ittt	eq
340062c4:	2240      	moveq	r2, #64	@ 0x40
340062c6:	4b03      	ldreq	r3, [pc, #12]	@ (340062d4 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
340062c8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340062cc:	f7fe b907 	b.w	340044de <HAL_RCCEx_PeriphCLKConfig+0x4be>
340062d0:	34038c3d 	.word	0x34038c3d
340062d4:	56028000 	.word	0x56028000
340062d8:	03030014 	.word	0x03030014
340062dc:	03010014 	.word	0x03010014
340062e0:	03030414 	.word	0x03030414
340062e4:	03010414 	.word	0x03010414
340062e8:	03030814 	.word	0x03030814
340062ec:	03010814 	.word	0x03010814
340062f0:	0303001c 	.word	0x0303001c
340062f4:	0301001c 	.word	0x0301001c
340062f8:	0303041c 	.word	0x0303041c
340062fc:	0301041c 	.word	0x0301041c
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34006300:	2b30      	cmp	r3, #48	@ 0x30
34006302:	d123      	bne.n	3400634c <HAL_RCCEx_PeriphCLKConfig+0x232c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006304:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006306:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400630a:	d004      	beq.n	34006316 <HAL_RCCEx_PeriphCLKConfig+0x22f6>
3400630c:	f44f 7114 	mov.w	r1, #592	@ 0x250
34006310:	48b5      	ldr	r0, [pc, #724]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34006312:	f7fa fd77 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006316:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006318:	3b01      	subs	r3, #1
3400631a:	2bff      	cmp	r3, #255	@ 0xff
3400631c:	d904      	bls.n	34006328 <HAL_RCCEx_PeriphCLKConfig+0x2308>
3400631e:	f240 2151 	movw	r1, #593	@ 0x251
34006322:	48b1      	ldr	r0, [pc, #708]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34006324:	f7fa fd6e 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006328:	4ab0      	ldr	r2, [pc, #704]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
3400632a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3400632c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34006330:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34006332:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006336:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400633a:	3901      	subs	r1, #1
3400633c:	4303      	orrs	r3, r0
3400633e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006346:	2380      	movs	r3, #128	@ 0x80
34006348:	f7fe b90d 	b.w	34004566 <HAL_RCCEx_PeriphCLKConfig+0x546>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3400634c:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400634e:	bf02      	ittt	eq
34006350:	2240      	moveq	r2, #64	@ 0x40
34006352:	4ba6      	ldreq	r3, [pc, #664]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
34006354:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006358:	f7fe b907 	b.w	3400456a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
3400635c:	2b03      	cmp	r3, #3
3400635e:	d123      	bne.n	340063a8 <HAL_RCCEx_PeriphCLKConfig+0x2388>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34006360:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006362:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006366:	d004      	beq.n	34006372 <HAL_RCCEx_PeriphCLKConfig+0x2352>
34006368:	f240 217e 	movw	r1, #638	@ 0x27e
3400636c:	489e      	ldr	r0, [pc, #632]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
3400636e:	f7fa fd49 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006372:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006374:	3b01      	subs	r3, #1
34006376:	2bff      	cmp	r3, #255	@ 0xff
34006378:	d904      	bls.n	34006384 <HAL_RCCEx_PeriphCLKConfig+0x2364>
3400637a:	f240 217f 	movw	r1, #639	@ 0x27f
3400637e:	489a      	ldr	r0, [pc, #616]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34006380:	f7fa fd40 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006384:	4a99      	ldr	r2, [pc, #612]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
34006386:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006388:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3400638c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400638e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006392:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006396:	3901      	subs	r1, #1
34006398:	4303      	orrs	r3, r0
3400639a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400639e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340063a2:	2380      	movs	r3, #128	@ 0x80
340063a4:	f7fe b925 	b.w	340045f2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
340063a8:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340063aa:	bf02      	ittt	eq
340063ac:	2240      	moveq	r2, #64	@ 0x40
340063ae:	4b8f      	ldreq	r3, [pc, #572]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340063b0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340063b4:	f7fe b91f 	b.w	340045f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
340063b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340063bc:	bf02      	ittt	eq
340063be:	2240      	moveq	r2, #64	@ 0x40
340063c0:	4b8a      	ldreq	r3, [pc, #552]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340063c2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340063c6:	f7fe b995 	b.w	340046f4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
340063ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340063ce:	bf02      	ittt	eq
340063d0:	2240      	moveq	r2, #64	@ 0x40
340063d2:	4b86      	ldreq	r3, [pc, #536]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340063d4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340063d8:	f7fe b9ce 	b.w	34004778 <HAL_RCCEx_PeriphCLKConfig+0x758>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
340063dc:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340063de:	bf02      	ittt	eq
340063e0:	2240      	moveq	r2, #64	@ 0x40
340063e2:	4b82      	ldreq	r3, [pc, #520]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340063e4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340063e8:	f7fe ba58 	b.w	3400489c <HAL_RCCEx_PeriphCLKConfig+0x87c>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
340063ec:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340063ee:	bf02      	ittt	eq
340063f0:	2240      	moveq	r2, #64	@ 0x40
340063f2:	4b7e      	ldreq	r3, [pc, #504]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340063f4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340063f8:	f7fe ba99 	b.w	3400492e <HAL_RCCEx_PeriphCLKConfig+0x90e>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
340063fc:	4a7c      	ldr	r2, [pc, #496]	@ (340065f0 <HAL_RCCEx_PeriphCLKConfig+0x25d0>)
340063fe:	4293      	cmp	r3, r2
34006400:	d124      	bne.n	3400644c <HAL_RCCEx_PeriphCLKConfig+0x242c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006402:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006404:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006408:	d004      	beq.n	34006414 <HAL_RCCEx_PeriphCLKConfig+0x23f4>
3400640a:	f240 315a 	movw	r1, #858	@ 0x35a
3400640e:	4876      	ldr	r0, [pc, #472]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34006410:	f7fa fcf8 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006414:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006416:	3b01      	subs	r3, #1
34006418:	2bff      	cmp	r3, #255	@ 0xff
3400641a:	d904      	bls.n	34006426 <HAL_RCCEx_PeriphCLKConfig+0x2406>
3400641c:	f240 315b 	movw	r1, #859	@ 0x35b
34006420:	4871      	ldr	r0, [pc, #452]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34006422:	f7fa fcef 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006426:	4a71      	ldr	r2, [pc, #452]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
34006428:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400642a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400642e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006430:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006434:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006438:	3901      	subs	r1, #1
3400643a:	4303      	orrs	r3, r0
3400643c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006440:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006444:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006448:	f7fe bac3 	b.w	340049d2 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
3400644c:	4a69      	ldr	r2, [pc, #420]	@ (340065f4 <HAL_RCCEx_PeriphCLKConfig+0x25d4>)
3400644e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006450:	bf02      	ittt	eq
34006452:	2240      	moveq	r2, #64	@ 0x40
34006454:	4b65      	ldreq	r3, [pc, #404]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
34006456:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400645a:	f7fe babc 	b.w	340049d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3400645e:	4a66      	ldr	r2, [pc, #408]	@ (340065f8 <HAL_RCCEx_PeriphCLKConfig+0x25d8>)
34006460:	4293      	cmp	r3, r2
34006462:	d124      	bne.n	340064ae <HAL_RCCEx_PeriphCLKConfig+0x248e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006464:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006466:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400646a:	d004      	beq.n	34006476 <HAL_RCCEx_PeriphCLKConfig+0x2456>
3400646c:	f240 3187 	movw	r1, #903	@ 0x387
34006470:	485d      	ldr	r0, [pc, #372]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34006472:	f7fa fcc7 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006476:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006478:	3b01      	subs	r3, #1
3400647a:	2bff      	cmp	r3, #255	@ 0xff
3400647c:	d904      	bls.n	34006488 <HAL_RCCEx_PeriphCLKConfig+0x2468>
3400647e:	f44f 7162 	mov.w	r1, #904	@ 0x388
34006482:	4859      	ldr	r0, [pc, #356]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34006484:	f7fa fcbe 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006488:	4a58      	ldr	r2, [pc, #352]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
3400648a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3400648c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006490:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006492:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006496:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400649a:	3901      	subs	r1, #1
3400649c:	4303      	orrs	r3, r0
3400649e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340064a2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340064a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340064aa:	f7fe bad6 	b.w	34004a5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
340064ae:	4a53      	ldr	r2, [pc, #332]	@ (340065fc <HAL_RCCEx_PeriphCLKConfig+0x25dc>)
340064b0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340064b2:	bf02      	ittt	eq
340064b4:	2240      	moveq	r2, #64	@ 0x40
340064b6:	4b4d      	ldreq	r3, [pc, #308]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340064b8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340064bc:	f7fe bacf 	b.w	34004a5e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
340064c0:	4a4f      	ldr	r2, [pc, #316]	@ (34006600 <HAL_RCCEx_PeriphCLKConfig+0x25e0>)
340064c2:	4293      	cmp	r3, r2
340064c4:	d124      	bne.n	34006510 <HAL_RCCEx_PeriphCLKConfig+0x24f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340064c6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340064c8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340064cc:	d004      	beq.n	340064d8 <HAL_RCCEx_PeriphCLKConfig+0x24b8>
340064ce:	f44f 716d 	mov.w	r1, #948	@ 0x3b4
340064d2:	4845      	ldr	r0, [pc, #276]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
340064d4:	f7fa fc96 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340064d8:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340064da:	3b01      	subs	r3, #1
340064dc:	2bff      	cmp	r3, #255	@ 0xff
340064de:	d904      	bls.n	340064ea <HAL_RCCEx_PeriphCLKConfig+0x24ca>
340064e0:	f240 31b5 	movw	r1, #949	@ 0x3b5
340064e4:	4840      	ldr	r0, [pc, #256]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
340064e6:	f7fa fc8d 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340064ea:	4a40      	ldr	r2, [pc, #256]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340064ec:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340064ee:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340064f2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340064f4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340064f8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340064fc:	3901      	subs	r1, #1
340064fe:	4303      	orrs	r3, r0
34006500:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006504:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006508:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400650c:	f7fe bae9 	b.w	34004ae2 <HAL_RCCEx_PeriphCLKConfig+0xac2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34006510:	4a3c      	ldr	r2, [pc, #240]	@ (34006604 <HAL_RCCEx_PeriphCLKConfig+0x25e4>)
34006512:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006514:	bf02      	ittt	eq
34006516:	2240      	moveq	r2, #64	@ 0x40
34006518:	4b34      	ldreq	r3, [pc, #208]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
3400651a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400651e:	f7fe bae2 	b.w	34004ae6 <HAL_RCCEx_PeriphCLKConfig+0xac6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
34006522:	4a39      	ldr	r2, [pc, #228]	@ (34006608 <HAL_RCCEx_PeriphCLKConfig+0x25e8>)
34006524:	4293      	cmp	r3, r2
34006526:	d124      	bne.n	34006572 <HAL_RCCEx_PeriphCLKConfig+0x2552>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34006528:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400652a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3400652e:	d004      	beq.n	3400653a <HAL_RCCEx_PeriphCLKConfig+0x251a>
34006530:	f240 31e1 	movw	r1, #993	@ 0x3e1
34006534:	482c      	ldr	r0, [pc, #176]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34006536:	f7fa fc65 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400653a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400653c:	3b01      	subs	r3, #1
3400653e:	2bff      	cmp	r3, #255	@ 0xff
34006540:	d904      	bls.n	3400654c <HAL_RCCEx_PeriphCLKConfig+0x252c>
34006542:	f240 31e2 	movw	r1, #994	@ 0x3e2
34006546:	4828      	ldr	r0, [pc, #160]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34006548:	f7fa fc5c 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400654c:	4a27      	ldr	r2, [pc, #156]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
3400654e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006550:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34006554:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34006556:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400655a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400655e:	3901      	subs	r1, #1
34006560:	4303      	orrs	r3, r0
34006562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006566:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400656a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400656e:	f7fe bafc 	b.w	34004b6a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34006572:	4a26      	ldr	r2, [pc, #152]	@ (3400660c <HAL_RCCEx_PeriphCLKConfig+0x25ec>)
34006574:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006576:	bf02      	ittt	eq
34006578:	2240      	moveq	r2, #64	@ 0x40
3400657a:	4b1c      	ldreq	r3, [pc, #112]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
3400657c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006580:	f7fe baf5 	b.w	34004b6e <HAL_RCCEx_PeriphCLKConfig+0xb4e>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34006584:	4a22      	ldr	r2, [pc, #136]	@ (34006610 <HAL_RCCEx_PeriphCLKConfig+0x25f0>)
34006586:	4293      	cmp	r3, r2
34006588:	d124      	bne.n	340065d4 <HAL_RCCEx_PeriphCLKConfig+0x25b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400658a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3400658c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006590:	d004      	beq.n	3400659c <HAL_RCCEx_PeriphCLKConfig+0x257c>
34006592:	f240 410e 	movw	r1, #1038	@ 0x40e
34006596:	4814      	ldr	r0, [pc, #80]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
34006598:	f7fa fc34 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400659c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3400659e:	3b01      	subs	r3, #1
340065a0:	2bff      	cmp	r3, #255	@ 0xff
340065a2:	d904      	bls.n	340065ae <HAL_RCCEx_PeriphCLKConfig+0x258e>
340065a4:	f240 410f 	movw	r1, #1039	@ 0x40f
340065a8:	480f      	ldr	r0, [pc, #60]	@ (340065e8 <HAL_RCCEx_PeriphCLKConfig+0x25c8>)
340065aa:	f7fa fc2b 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340065ae:	4a0f      	ldr	r2, [pc, #60]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340065b0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340065b2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340065b6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340065b8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340065bc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340065c0:	3901      	subs	r1, #1
340065c2:	4303      	orrs	r3, r0
340065c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340065c8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340065cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340065d0:	f7fe bb0f 	b.w	34004bf2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
340065d4:	4a0f      	ldr	r2, [pc, #60]	@ (34006614 <HAL_RCCEx_PeriphCLKConfig+0x25f4>)
340065d6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340065d8:	bf02      	ittt	eq
340065da:	2240      	moveq	r2, #64	@ 0x40
340065dc:	4b03      	ldreq	r3, [pc, #12]	@ (340065ec <HAL_RCCEx_PeriphCLKConfig+0x25cc>)
340065de:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340065e2:	f7fe bb08 	b.w	34004bf6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
340065e6:	bf00      	nop
340065e8:	34038c3d 	.word	0x34038c3d
340065ec:	56028000 	.word	0x56028000
340065f0:	0703000c 	.word	0x0703000c
340065f4:	0701000c 	.word	0x0701000c
340065f8:	0703040c 	.word	0x0703040c
340065fc:	0701040c 	.word	0x0701040c
34006600:	0703080c 	.word	0x0703080c
34006604:	0701080c 	.word	0x0701080c
34006608:	07030c0c 	.word	0x07030c0c
3400660c:	07010c0c 	.word	0x07010c0c
34006610:	0703100c 	.word	0x0703100c
34006614:	0701100c 	.word	0x0701100c
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34006618:	4aae      	ldr	r2, [pc, #696]	@ (340068d4 <HAL_RCCEx_PeriphCLKConfig+0x28b4>)
3400661a:	4293      	cmp	r3, r2
3400661c:	d124      	bne.n	34006668 <HAL_RCCEx_PeriphCLKConfig+0x2648>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400661e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34006620:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006624:	d004      	beq.n	34006630 <HAL_RCCEx_PeriphCLKConfig+0x2610>
34006626:	f240 413b 	movw	r1, #1083	@ 0x43b
3400662a:	48ab      	ldr	r0, [pc, #684]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
3400662c:	f7fa fbea 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34006630:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34006632:	3b01      	subs	r3, #1
34006634:	2bff      	cmp	r3, #255	@ 0xff
34006636:	d904      	bls.n	34006642 <HAL_RCCEx_PeriphCLKConfig+0x2622>
34006638:	f240 413c 	movw	r1, #1084	@ 0x43c
3400663c:	48a6      	ldr	r0, [pc, #664]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
3400663e:	f7fa fbe1 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34006642:	4aa6      	ldr	r2, [pc, #664]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34006644:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34006646:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3400664a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3400664c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006650:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006654:	3901      	subs	r1, #1
34006656:	4303      	orrs	r3, r0
34006658:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400665c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34006660:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34006664:	f7fe bb09 	b.w	34004c7a <HAL_RCCEx_PeriphCLKConfig+0xc5a>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34006668:	4a9d      	ldr	r2, [pc, #628]	@ (340068e0 <HAL_RCCEx_PeriphCLKConfig+0x28c0>)
3400666a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400666c:	bf02      	ittt	eq
3400666e:	2240      	moveq	r2, #64	@ 0x40
34006670:	4b9a      	ldreq	r3, [pc, #616]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34006672:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006676:	f7fe bb02 	b.w	34004c7e <HAL_RCCEx_PeriphCLKConfig+0xc5e>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
3400667a:	4a9a      	ldr	r2, [pc, #616]	@ (340068e4 <HAL_RCCEx_PeriphCLKConfig+0x28c4>)
3400667c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400667e:	bf02      	ittt	eq
34006680:	2240      	moveq	r2, #64	@ 0x40
34006682:	4b96      	ldreq	r3, [pc, #600]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34006684:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006688:	f7fe bb58 	b.w	34004d3c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3400668c:	4a96      	ldr	r2, [pc, #600]	@ (340068e8 <HAL_RCCEx_PeriphCLKConfig+0x28c8>)
3400668e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006690:	bf02      	ittt	eq
34006692:	2240      	moveq	r2, #64	@ 0x40
34006694:	4b91      	ldreq	r3, [pc, #580]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34006696:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3400669a:	f7fe bb93 	b.w	34004dc4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
3400669e:	4a93      	ldr	r2, [pc, #588]	@ (340068ec <HAL_RCCEx_PeriphCLKConfig+0x28cc>)
340066a0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340066a2:	bf02      	ittt	eq
340066a4:	2240      	moveq	r2, #64	@ 0x40
340066a6:	4b8d      	ldreq	r3, [pc, #564]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340066a8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340066ac:	f7fe bbce 	b.w	34004e4c <HAL_RCCEx_PeriphCLKConfig+0xe2c>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
340066b0:	4a8f      	ldr	r2, [pc, #572]	@ (340068f0 <HAL_RCCEx_PeriphCLKConfig+0x28d0>)
340066b2:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340066b4:	bf02      	ittt	eq
340066b6:	2240      	moveq	r2, #64	@ 0x40
340066b8:	4b88      	ldreq	r3, [pc, #544]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340066ba:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340066be:	f7fe bc09 	b.w	34004ed4 <HAL_RCCEx_PeriphCLKConfig+0xeb4>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
340066c2:	4a8c      	ldr	r2, [pc, #560]	@ (340068f4 <HAL_RCCEx_PeriphCLKConfig+0x28d4>)
340066c4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340066c6:	bf02      	ittt	eq
340066c8:	2240      	moveq	r2, #64	@ 0x40
340066ca:	4b84      	ldreq	r3, [pc, #528]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340066cc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340066d0:	f7fe bc44 	b.w	34004f5c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
340066d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340066d8:	d124      	bne.n	34006724 <HAL_RCCEx_PeriphCLKConfig+0x2704>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340066da:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340066dc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340066e0:	d004      	beq.n	340066ec <HAL_RCCEx_PeriphCLKConfig+0x26cc>
340066e2:	f44f 61a1 	mov.w	r1, #1288	@ 0x508
340066e6:	487c      	ldr	r0, [pc, #496]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
340066e8:	f7fa fb8c 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340066ec:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340066ee:	3b01      	subs	r3, #1
340066f0:	2bff      	cmp	r3, #255	@ 0xff
340066f2:	d904      	bls.n	340066fe <HAL_RCCEx_PeriphCLKConfig+0x26de>
340066f4:	f240 5109 	movw	r1, #1289	@ 0x509
340066f8:	4877      	ldr	r0, [pc, #476]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
340066fa:	f7fa fb83 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340066fe:	4a77      	ldr	r2, [pc, #476]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34006700:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006702:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006706:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006708:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400670c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006710:	3901      	subs	r1, #1
34006712:	4303      	orrs	r3, r0
34006714:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006718:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400671c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006720:	f7fe bc76 	b.w	34005010 <HAL_RCCEx_PeriphCLKConfig+0xff0>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34006724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006728:	bf02      	ittt	eq
3400672a:	2240      	moveq	r2, #64	@ 0x40
3400672c:	4b6b      	ldreq	r3, [pc, #428]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
3400672e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006732:	f7fe bc6f 	b.w	34005014 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34006736:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400673a:	bf02      	ittt	eq
3400673c:	2240      	moveq	r2, #64	@ 0x40
3400673e:	4b67      	ldreq	r3, [pc, #412]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34006740:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006744:	f7fe bcac 	b.w	340050a0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34006748:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400674c:	d123      	bne.n	34006796 <HAL_RCCEx_PeriphCLKConfig+0x2776>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400674e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006750:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006754:	d004      	beq.n	34006760 <HAL_RCCEx_PeriphCLKConfig+0x2740>
34006756:	f240 5155 	movw	r1, #1365	@ 0x555
3400675a:	485f      	ldr	r0, [pc, #380]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
3400675c:	f7fa fb52 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006760:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006762:	3b01      	subs	r3, #1
34006764:	2bff      	cmp	r3, #255	@ 0xff
34006766:	d904      	bls.n	34006772 <HAL_RCCEx_PeriphCLKConfig+0x2752>
34006768:	f240 5156 	movw	r1, #1366	@ 0x556
3400676c:	485a      	ldr	r0, [pc, #360]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
3400676e:	f7fa fb49 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006772:	4a5a      	ldr	r2, [pc, #360]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34006774:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006776:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3400677a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400677c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006780:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006784:	3901      	subs	r1, #1
34006786:	4303      	orrs	r3, r0
34006788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400678c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006790:	2380      	movs	r3, #128	@ 0x80
34006792:	f7fe bcc7 	b.w	34005124 <HAL_RCCEx_PeriphCLKConfig+0x1104>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34006796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400679a:	bf02      	ittt	eq
3400679c:	2240      	moveq	r2, #64	@ 0x40
3400679e:	4b4f      	ldreq	r3, [pc, #316]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340067a0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340067a4:	f7fe bcc0 	b.w	34005128 <HAL_RCCEx_PeriphCLKConfig+0x1108>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
340067a8:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340067aa:	bf02      	ittt	eq
340067ac:	2240      	moveq	r2, #64	@ 0x40
340067ae:	4b4b      	ldreq	r3, [pc, #300]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340067b0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340067b4:	f7fe bcfd 	b.w	340051b2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
340067b8:	4a4f      	ldr	r2, [pc, #316]	@ (340068f8 <HAL_RCCEx_PeriphCLKConfig+0x28d8>)
340067ba:	4293      	cmp	r3, r2
340067bc:	d123      	bne.n	34006806 <HAL_RCCEx_PeriphCLKConfig+0x27e6>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340067be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340067c0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340067c4:	d004      	beq.n	340067d0 <HAL_RCCEx_PeriphCLKConfig+0x27b0>
340067c6:	f240 51a2 	movw	r1, #1442	@ 0x5a2
340067ca:	4843      	ldr	r0, [pc, #268]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
340067cc:	f7fa fb1a 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340067d0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340067d2:	3b01      	subs	r3, #1
340067d4:	2bff      	cmp	r3, #255	@ 0xff
340067d6:	d904      	bls.n	340067e2 <HAL_RCCEx_PeriphCLKConfig+0x27c2>
340067d8:	f240 51a3 	movw	r1, #1443	@ 0x5a3
340067dc:	483e      	ldr	r0, [pc, #248]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
340067de:	f7fa fb11 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340067e2:	4a3e      	ldr	r2, [pc, #248]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340067e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340067e6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340067ea:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340067ec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340067f0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340067f4:	3901      	subs	r1, #1
340067f6:	4303      	orrs	r3, r0
340067f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340067fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006800:	2380      	movs	r3, #128	@ 0x80
34006802:	f7fe bd1b 	b.w	3400523c <HAL_RCCEx_PeriphCLKConfig+0x121c>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34006806:	4a3d      	ldr	r2, [pc, #244]	@ (340068fc <HAL_RCCEx_PeriphCLKConfig+0x28dc>)
34006808:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400680a:	bf02      	ittt	eq
3400680c:	2240      	moveq	r2, #64	@ 0x40
3400680e:	4b33      	ldreq	r3, [pc, #204]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34006810:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006814:	f7fe bd14 	b.w	34005240 <HAL_RCCEx_PeriphCLKConfig+0x1220>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34006818:	4a39      	ldr	r2, [pc, #228]	@ (34006900 <HAL_RCCEx_PeriphCLKConfig+0x28e0>)
3400681a:	4293      	cmp	r3, r2
3400681c:	d123      	bne.n	34006866 <HAL_RCCEx_PeriphCLKConfig+0x2846>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400681e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006820:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006824:	d004      	beq.n	34006830 <HAL_RCCEx_PeriphCLKConfig+0x2810>
34006826:	f240 51cf 	movw	r1, #1487	@ 0x5cf
3400682a:	482b      	ldr	r0, [pc, #172]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
3400682c:	f7fa faea 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34006830:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006832:	3b01      	subs	r3, #1
34006834:	2bff      	cmp	r3, #255	@ 0xff
34006836:	d904      	bls.n	34006842 <HAL_RCCEx_PeriphCLKConfig+0x2822>
34006838:	f44f 61ba 	mov.w	r1, #1488	@ 0x5d0
3400683c:	4826      	ldr	r0, [pc, #152]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
3400683e:	f7fa fae1 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34006842:	4a26      	ldr	r2, [pc, #152]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34006844:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34006846:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3400684a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3400684c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006850:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006854:	3901      	subs	r1, #1
34006856:	4303      	orrs	r3, r0
34006858:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400685c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34006860:	2380      	movs	r3, #128	@ 0x80
34006862:	f7fe bd2c 	b.w	340052be <HAL_RCCEx_PeriphCLKConfig+0x129e>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34006866:	4a27      	ldr	r2, [pc, #156]	@ (34006904 <HAL_RCCEx_PeriphCLKConfig+0x28e4>)
34006868:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400686a:	bf02      	ittt	eq
3400686c:	2240      	moveq	r2, #64	@ 0x40
3400686e:	4b1b      	ldreq	r3, [pc, #108]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
34006870:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006874:	f7fe bd25 	b.w	340052c2 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34006878:	2b03      	cmp	r3, #3
3400687a:	d123      	bne.n	340068c4 <HAL_RCCEx_PeriphCLKConfig+0x28a4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400687c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400687e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006882:	d004      	beq.n	3400688e <HAL_RCCEx_PeriphCLKConfig+0x286e>
34006884:	f240 51fc 	movw	r1, #1532	@ 0x5fc
34006888:	4813      	ldr	r0, [pc, #76]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
3400688a:	f7fa fabb 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400688e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006890:	3b01      	subs	r3, #1
34006892:	2bff      	cmp	r3, #255	@ 0xff
34006894:	d904      	bls.n	340068a0 <HAL_RCCEx_PeriphCLKConfig+0x2880>
34006896:	f240 51fd 	movw	r1, #1533	@ 0x5fd
3400689a:	480f      	ldr	r0, [pc, #60]	@ (340068d8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>)
3400689c:	f7fa fab2 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340068a0:	4a0e      	ldr	r2, [pc, #56]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340068a2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340068a4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340068a8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340068aa:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340068ae:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340068b2:	3901      	subs	r1, #1
340068b4:	4303      	orrs	r3, r0
340068b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340068ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340068be:	2380      	movs	r3, #128	@ 0x80
340068c0:	f7fe bd43 	b.w	3400534a <HAL_RCCEx_PeriphCLKConfig+0x132a>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
340068c4:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340068c6:	bf02      	ittt	eq
340068c8:	2240      	moveq	r2, #64	@ 0x40
340068ca:	4b04      	ldreq	r3, [pc, #16]	@ (340068dc <HAL_RCCEx_PeriphCLKConfig+0x28bc>)
340068cc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340068d0:	f7fe bd3d 	b.w	3400534e <HAL_RCCEx_PeriphCLKConfig+0x132e>
340068d4:	0703140c 	.word	0x0703140c
340068d8:	34038c3d 	.word	0x34038c3d
340068dc:	56028000 	.word	0x56028000
340068e0:	0701140c 	.word	0x0701140c
340068e4:	0701082c 	.word	0x0701082c
340068e8:	07010c2c 	.word	0x07010c2c
340068ec:	0701102c 	.word	0x0701102c
340068f0:	0701142c 	.word	0x0701142c
340068f4:	0701182c 	.word	0x0701182c
340068f8:	07031418 	.word	0x07031418
340068fc:	07011418 	.word	0x07011418
34006900:	07031818 	.word	0x07031818
34006904:	07011818 	.word	0x07011818
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34006908:	4aab      	ldr	r2, [pc, #684]	@ (34006bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b98>)
3400690a:	4293      	cmp	r3, r2
3400690c:	d124      	bne.n	34006958 <HAL_RCCEx_PeriphCLKConfig+0x2938>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400690e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006910:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006914:	d004      	beq.n	34006920 <HAL_RCCEx_PeriphCLKConfig+0x2900>
34006916:	f240 6129 	movw	r1, #1577	@ 0x629
3400691a:	48a8      	ldr	r0, [pc, #672]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
3400691c:	f7fa fa72 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006920:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006922:	3b01      	subs	r3, #1
34006924:	2bff      	cmp	r3, #255	@ 0xff
34006926:	d904      	bls.n	34006932 <HAL_RCCEx_PeriphCLKConfig+0x2912>
34006928:	f240 612a 	movw	r1, #1578	@ 0x62a
3400692c:	48a3      	ldr	r0, [pc, #652]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
3400692e:	f7fa fa69 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006932:	4aa3      	ldr	r2, [pc, #652]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006934:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006936:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400693a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3400693c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006940:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006944:	3901      	subs	r1, #1
34006946:	4303      	orrs	r3, r0
34006948:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3400694c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006950:	f44f 7380 	mov.w	r3, #256	@ 0x100
34006954:	f7fe bd46 	b.w	340053e4 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34006958:	4a9a      	ldr	r2, [pc, #616]	@ (34006bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ba4>)
3400695a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400695c:	bf02      	ittt	eq
3400695e:	2240      	moveq	r2, #64	@ 0x40
34006960:	4b97      	ldreq	r3, [pc, #604]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006962:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006966:	f7fe bd3f 	b.w	340053e8 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
3400696a:	4a97      	ldr	r2, [pc, #604]	@ (34006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2ba8>)
3400696c:	4293      	cmp	r3, r2
3400696e:	d124      	bne.n	340069ba <HAL_RCCEx_PeriphCLKConfig+0x299a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006970:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006972:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006976:	d004      	beq.n	34006982 <HAL_RCCEx_PeriphCLKConfig+0x2962>
34006978:	f240 6156 	movw	r1, #1622	@ 0x656
3400697c:	488f      	ldr	r0, [pc, #572]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
3400697e:	f7fa fa41 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006982:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006984:	3b01      	subs	r3, #1
34006986:	2bff      	cmp	r3, #255	@ 0xff
34006988:	d904      	bls.n	34006994 <HAL_RCCEx_PeriphCLKConfig+0x2974>
3400698a:	f240 6157 	movw	r1, #1623	@ 0x657
3400698e:	488b      	ldr	r0, [pc, #556]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34006990:	f7fa fa38 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006994:	4a8a      	ldr	r2, [pc, #552]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006996:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006998:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3400699c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3400699e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340069a2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340069a6:	3901      	subs	r1, #1
340069a8:	4303      	orrs	r3, r0
340069aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340069ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340069b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
340069b6:	f7fe bd5c 	b.w	34005472 <HAL_RCCEx_PeriphCLKConfig+0x1452>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
340069ba:	4a84      	ldr	r2, [pc, #528]	@ (34006bcc <HAL_RCCEx_PeriphCLKConfig+0x2bac>)
340069bc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340069be:	bf02      	ittt	eq
340069c0:	2240      	moveq	r2, #64	@ 0x40
340069c2:	4b7f      	ldreq	r3, [pc, #508]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
340069c4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340069c8:	f7fe bd55 	b.w	34005476 <HAL_RCCEx_PeriphCLKConfig+0x1456>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
340069cc:	4a80      	ldr	r2, [pc, #512]	@ (34006bd0 <HAL_RCCEx_PeriphCLKConfig+0x2bb0>)
340069ce:	4293      	cmp	r3, r2
340069d0:	d124      	bne.n	34006a1c <HAL_RCCEx_PeriphCLKConfig+0x29fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340069d2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340069d4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340069d8:	d004      	beq.n	340069e4 <HAL_RCCEx_PeriphCLKConfig+0x29c4>
340069da:	f240 6183 	movw	r1, #1667	@ 0x683
340069de:	4877      	ldr	r0, [pc, #476]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
340069e0:	f7fa fa10 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340069e4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340069e6:	3b01      	subs	r3, #1
340069e8:	2bff      	cmp	r3, #255	@ 0xff
340069ea:	d904      	bls.n	340069f6 <HAL_RCCEx_PeriphCLKConfig+0x29d6>
340069ec:	f240 6184 	movw	r1, #1668	@ 0x684
340069f0:	4872      	ldr	r0, [pc, #456]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
340069f2:	f7fa fa07 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340069f6:	4a72      	ldr	r2, [pc, #456]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
340069f8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340069fa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340069fe:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006a00:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006a04:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006a08:	3901      	subs	r1, #1
34006a0a:	4303      	orrs	r3, r0
34006a0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006a10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
34006a18:	f7fe bd72 	b.w	34005500 <HAL_RCCEx_PeriphCLKConfig+0x14e0>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34006a1c:	4a6d      	ldr	r2, [pc, #436]	@ (34006bd4 <HAL_RCCEx_PeriphCLKConfig+0x2bb4>)
34006a1e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006a20:	bf02      	ittt	eq
34006a22:	2240      	moveq	r2, #64	@ 0x40
34006a24:	4b66      	ldreq	r3, [pc, #408]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006a26:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006a2a:	f7fe bd6b 	b.w	34005504 <HAL_RCCEx_PeriphCLKConfig+0x14e4>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34006a2e:	4a6a      	ldr	r2, [pc, #424]	@ (34006bd8 <HAL_RCCEx_PeriphCLKConfig+0x2bb8>)
34006a30:	4293      	cmp	r3, r2
34006a32:	d124      	bne.n	34006a7e <HAL_RCCEx_PeriphCLKConfig+0x2a5e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006a34:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006a36:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006a3a:	d004      	beq.n	34006a46 <HAL_RCCEx_PeriphCLKConfig+0x2a26>
34006a3c:	f44f 61d6 	mov.w	r1, #1712	@ 0x6b0
34006a40:	485e      	ldr	r0, [pc, #376]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34006a42:	f7fa f9df 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006a46:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006a48:	3b01      	subs	r3, #1
34006a4a:	2bff      	cmp	r3, #255	@ 0xff
34006a4c:	d904      	bls.n	34006a58 <HAL_RCCEx_PeriphCLKConfig+0x2a38>
34006a4e:	f240 61b1 	movw	r1, #1713	@ 0x6b1
34006a52:	485a      	ldr	r0, [pc, #360]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34006a54:	f7fa f9d6 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006a58:	4a59      	ldr	r2, [pc, #356]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006a5a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006a5c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006a60:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006a62:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006a66:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006a6a:	3901      	subs	r1, #1
34006a6c:	4303      	orrs	r3, r0
34006a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006a72:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006a76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006a7a:	f7fe bd89 	b.w	34005590 <HAL_RCCEx_PeriphCLKConfig+0x1570>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34006a7e:	4a57      	ldr	r2, [pc, #348]	@ (34006bdc <HAL_RCCEx_PeriphCLKConfig+0x2bbc>)
34006a80:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006a82:	bf02      	ittt	eq
34006a84:	2240      	moveq	r2, #64	@ 0x40
34006a86:	4b4e      	ldreq	r3, [pc, #312]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006a88:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006a8c:	f7fe bd82 	b.w	34005594 <HAL_RCCEx_PeriphCLKConfig+0x1574>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34006a90:	4a53      	ldr	r2, [pc, #332]	@ (34006be0 <HAL_RCCEx_PeriphCLKConfig+0x2bc0>)
34006a92:	4293      	cmp	r3, r2
34006a94:	d124      	bne.n	34006ae0 <HAL_RCCEx_PeriphCLKConfig+0x2ac0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006a96:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006a98:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006a9c:	d004      	beq.n	34006aa8 <HAL_RCCEx_PeriphCLKConfig+0x2a88>
34006a9e:	f240 61dd 	movw	r1, #1757	@ 0x6dd
34006aa2:	4846      	ldr	r0, [pc, #280]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34006aa4:	f7fa f9ae 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006aa8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006aaa:	3b01      	subs	r3, #1
34006aac:	2bff      	cmp	r3, #255	@ 0xff
34006aae:	d904      	bls.n	34006aba <HAL_RCCEx_PeriphCLKConfig+0x2a9a>
34006ab0:	f240 61de 	movw	r1, #1758	@ 0x6de
34006ab4:	4841      	ldr	r0, [pc, #260]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34006ab6:	f7fa f9a5 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006aba:	4a41      	ldr	r2, [pc, #260]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006abc:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006abe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006ac2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006ac4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006ac8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006acc:	3901      	subs	r1, #1
34006ace:	4303      	orrs	r3, r0
34006ad0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006ad4:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006adc:	f7fe bda0 	b.w	34005620 <HAL_RCCEx_PeriphCLKConfig+0x1600>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34006ae0:	4a40      	ldr	r2, [pc, #256]	@ (34006be4 <HAL_RCCEx_PeriphCLKConfig+0x2bc4>)
34006ae2:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006ae4:	bf02      	ittt	eq
34006ae6:	2240      	moveq	r2, #64	@ 0x40
34006ae8:	4b35      	ldreq	r3, [pc, #212]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006aea:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006aee:	f7fe bd99 	b.w	34005624 <HAL_RCCEx_PeriphCLKConfig+0x1604>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34006af2:	4a3d      	ldr	r2, [pc, #244]	@ (34006be8 <HAL_RCCEx_PeriphCLKConfig+0x2bc8>)
34006af4:	4293      	cmp	r3, r2
34006af6:	d124      	bne.n	34006b42 <HAL_RCCEx_PeriphCLKConfig+0x2b22>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34006af8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34006afa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006afe:	d004      	beq.n	34006b0a <HAL_RCCEx_PeriphCLKConfig+0x2aea>
34006b00:	f240 710a 	movw	r1, #1802	@ 0x70a
34006b04:	482d      	ldr	r0, [pc, #180]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34006b06:	f7fa f97d 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34006b0a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34006b0c:	3b01      	subs	r3, #1
34006b0e:	2bff      	cmp	r3, #255	@ 0xff
34006b10:	d904      	bls.n	34006b1c <HAL_RCCEx_PeriphCLKConfig+0x2afc>
34006b12:	f240 710b 	movw	r1, #1803	@ 0x70b
34006b16:	4829      	ldr	r0, [pc, #164]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34006b18:	f7fa f974 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34006b1c:	4a28      	ldr	r2, [pc, #160]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006b1e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34006b20:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34006b24:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34006b26:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006b2a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006b2e:	3901      	subs	r1, #1
34006b30:	4303      	orrs	r3, r0
34006b32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006b36:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34006b3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
34006b3e:	f7fe bdd1 	b.w	340056e4 <HAL_RCCEx_PeriphCLKConfig+0x16c4>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34006b42:	4a2a      	ldr	r2, [pc, #168]	@ (34006bec <HAL_RCCEx_PeriphCLKConfig+0x2bcc>)
34006b44:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006b46:	bf02      	ittt	eq
34006b48:	2240      	moveq	r2, #64	@ 0x40
34006b4a:	4b1d      	ldreq	r3, [pc, #116]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006b4c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006b50:	f7fe bdca 	b.w	340056e8 <HAL_RCCEx_PeriphCLKConfig+0x16c8>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34006b54:	4a26      	ldr	r2, [pc, #152]	@ (34006bf0 <HAL_RCCEx_PeriphCLKConfig+0x2bd0>)
34006b56:	4293      	cmp	r3, r2
34006b58:	d124      	bne.n	34006ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b84>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006b5a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006b5c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006b60:	d004      	beq.n	34006b6c <HAL_RCCEx_PeriphCLKConfig+0x2b4c>
34006b62:	f240 7137 	movw	r1, #1847	@ 0x737
34006b66:	4815      	ldr	r0, [pc, #84]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34006b68:	f7fa f94c 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006b6c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006b6e:	3b01      	subs	r3, #1
34006b70:	2bff      	cmp	r3, #255	@ 0xff
34006b72:	d904      	bls.n	34006b7e <HAL_RCCEx_PeriphCLKConfig+0x2b5e>
34006b74:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
34006b78:	4810      	ldr	r0, [pc, #64]	@ (34006bbc <HAL_RCCEx_PeriphCLKConfig+0x2b9c>)
34006b7a:	f7fa f943 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006b7e:	4a10      	ldr	r2, [pc, #64]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006b80:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006b82:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006b86:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006b88:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006b8c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006b90:	3901      	subs	r1, #1
34006b92:	4303      	orrs	r3, r0
34006b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006b98:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006b9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006ba0:	f7fe bde8 	b.w	34005774 <HAL_RCCEx_PeriphCLKConfig+0x1754>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34006ba4:	4a13      	ldr	r2, [pc, #76]	@ (34006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
34006ba6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006ba8:	bf02      	ittt	eq
34006baa:	2240      	moveq	r2, #64	@ 0x40
34006bac:	4b04      	ldreq	r3, [pc, #16]	@ (34006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>)
34006bae:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006bb2:	f7fe bde1 	b.w	34005778 <HAL_RCCEx_PeriphCLKConfig+0x1758>
34006bb6:	bf00      	nop
34006bb8:	07030420 	.word	0x07030420
34006bbc:	34038c3d 	.word	0x34038c3d
34006bc0:	56028000 	.word	0x56028000
34006bc4:	07010420 	.word	0x07010420
34006bc8:	07030820 	.word	0x07030820
34006bcc:	07010820 	.word	0x07010820
34006bd0:	07030c20 	.word	0x07030c20
34006bd4:	07010c20 	.word	0x07010c20
34006bd8:	07031020 	.word	0x07031020
34006bdc:	07011020 	.word	0x07011020
34006be0:	07031420 	.word	0x07031420
34006be4:	07011420 	.word	0x07011420
34006be8:	07031820 	.word	0x07031820
34006bec:	07011820 	.word	0x07011820
34006bf0:	07030030 	.word	0x07030030
34006bf4:	07010030 	.word	0x07010030
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34006bf8:	4aab      	ldr	r2, [pc, #684]	@ (34006ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e88>)
34006bfa:	4293      	cmp	r3, r2
34006bfc:	d124      	bne.n	34006c48 <HAL_RCCEx_PeriphCLKConfig+0x2c28>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006bfe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006c00:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006c04:	d004      	beq.n	34006c10 <HAL_RCCEx_PeriphCLKConfig+0x2bf0>
34006c06:	f240 7164 	movw	r1, #1892	@ 0x764
34006c0a:	48a8      	ldr	r0, [pc, #672]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006c0c:	f7fa f8fa 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006c10:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006c12:	3b01      	subs	r3, #1
34006c14:	2bff      	cmp	r3, #255	@ 0xff
34006c16:	d904      	bls.n	34006c22 <HAL_RCCEx_PeriphCLKConfig+0x2c02>
34006c18:	f240 7165 	movw	r1, #1893	@ 0x765
34006c1c:	48a3      	ldr	r0, [pc, #652]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006c1e:	f7fa f8f1 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006c22:	4aa3      	ldr	r2, [pc, #652]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006c24:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006c26:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006c2a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006c2c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006c30:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006c34:	3901      	subs	r1, #1
34006c36:	4303      	orrs	r3, r0
34006c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006c3c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006c40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006c44:	f7fe bdde 	b.w	34005804 <HAL_RCCEx_PeriphCLKConfig+0x17e4>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34006c48:	4a9a      	ldr	r2, [pc, #616]	@ (34006eb4 <HAL_RCCEx_PeriphCLKConfig+0x2e94>)
34006c4a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006c4c:	bf02      	ittt	eq
34006c4e:	2240      	moveq	r2, #64	@ 0x40
34006c50:	4b97      	ldreq	r3, [pc, #604]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006c52:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006c56:	f7fe bdd7 	b.w	34005808 <HAL_RCCEx_PeriphCLKConfig+0x17e8>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34006c5a:	4a97      	ldr	r2, [pc, #604]	@ (34006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e98>)
34006c5c:	4293      	cmp	r3, r2
34006c5e:	d124      	bne.n	34006caa <HAL_RCCEx_PeriphCLKConfig+0x2c8a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006c60:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006c62:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006c66:	d004      	beq.n	34006c72 <HAL_RCCEx_PeriphCLKConfig+0x2c52>
34006c68:	f240 7191 	movw	r1, #1937	@ 0x791
34006c6c:	488f      	ldr	r0, [pc, #572]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006c6e:	f7fa f8c9 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006c72:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006c74:	3b01      	subs	r3, #1
34006c76:	2bff      	cmp	r3, #255	@ 0xff
34006c78:	d904      	bls.n	34006c84 <HAL_RCCEx_PeriphCLKConfig+0x2c64>
34006c7a:	f240 7192 	movw	r1, #1938	@ 0x792
34006c7e:	488b      	ldr	r0, [pc, #556]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006c80:	f7fa f8c0 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006c84:	4a8a      	ldr	r2, [pc, #552]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006c86:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006c88:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006c8c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006c8e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006c92:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006c96:	3901      	subs	r1, #1
34006c98:	4303      	orrs	r3, r0
34006c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006c9e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006ca2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006ca6:	f7fe bdf5 	b.w	34005894 <HAL_RCCEx_PeriphCLKConfig+0x1874>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34006caa:	4a84      	ldr	r2, [pc, #528]	@ (34006ebc <HAL_RCCEx_PeriphCLKConfig+0x2e9c>)
34006cac:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006cae:	bf02      	ittt	eq
34006cb0:	2240      	moveq	r2, #64	@ 0x40
34006cb2:	4b7f      	ldreq	r3, [pc, #508]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006cb4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006cb8:	f7fe bdee 	b.w	34005898 <HAL_RCCEx_PeriphCLKConfig+0x1878>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34006cbc:	4a80      	ldr	r2, [pc, #512]	@ (34006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2ea0>)
34006cbe:	4293      	cmp	r3, r2
34006cc0:	d124      	bne.n	34006d0c <HAL_RCCEx_PeriphCLKConfig+0x2cec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006cc2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006cc4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006cc8:	d004      	beq.n	34006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2cb4>
34006cca:	f240 71be 	movw	r1, #1982	@ 0x7be
34006cce:	4877      	ldr	r0, [pc, #476]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006cd0:	f7fa f898 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006cd4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006cd6:	3b01      	subs	r3, #1
34006cd8:	2bff      	cmp	r3, #255	@ 0xff
34006cda:	d904      	bls.n	34006ce6 <HAL_RCCEx_PeriphCLKConfig+0x2cc6>
34006cdc:	f240 71bf 	movw	r1, #1983	@ 0x7bf
34006ce0:	4872      	ldr	r0, [pc, #456]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006ce2:	f7fa f88f 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006ce6:	4a72      	ldr	r2, [pc, #456]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006ce8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006cea:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006cee:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006cf0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006cf4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006cf8:	3901      	subs	r1, #1
34006cfa:	4303      	orrs	r3, r0
34006cfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006d00:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006d04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006d08:	f7fe be0c 	b.w	34005924 <HAL_RCCEx_PeriphCLKConfig+0x1904>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34006d0c:	4a6d      	ldr	r2, [pc, #436]	@ (34006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2ea4>)
34006d0e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006d10:	bf02      	ittt	eq
34006d12:	2240      	moveq	r2, #64	@ 0x40
34006d14:	4b66      	ldreq	r3, [pc, #408]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006d16:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006d1a:	f7fe be05 	b.w	34005928 <HAL_RCCEx_PeriphCLKConfig+0x1908>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34006d1e:	4a6a      	ldr	r2, [pc, #424]	@ (34006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2ea8>)
34006d20:	4293      	cmp	r3, r2
34006d22:	d124      	bne.n	34006d6e <HAL_RCCEx_PeriphCLKConfig+0x2d4e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006d24:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006d26:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006d2a:	d004      	beq.n	34006d36 <HAL_RCCEx_PeriphCLKConfig+0x2d16>
34006d2c:	f240 71eb 	movw	r1, #2027	@ 0x7eb
34006d30:	485e      	ldr	r0, [pc, #376]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006d32:	f7fa f867 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006d36:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006d38:	3b01      	subs	r3, #1
34006d3a:	2bff      	cmp	r3, #255	@ 0xff
34006d3c:	d904      	bls.n	34006d48 <HAL_RCCEx_PeriphCLKConfig+0x2d28>
34006d3e:	f240 71ec 	movw	r1, #2028	@ 0x7ec
34006d42:	485a      	ldr	r0, [pc, #360]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006d44:	f7fa f85e 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006d48:	4a59      	ldr	r2, [pc, #356]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006d4a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006d4c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006d50:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006d52:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006d56:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006d5a:	3901      	subs	r1, #1
34006d5c:	4303      	orrs	r3, r0
34006d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006d62:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006d66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006d6a:	f7fe be3e 	b.w	340059ea <HAL_RCCEx_PeriphCLKConfig+0x19ca>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34006d6e:	4a57      	ldr	r2, [pc, #348]	@ (34006ecc <HAL_RCCEx_PeriphCLKConfig+0x2eac>)
34006d70:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006d72:	bf02      	ittt	eq
34006d74:	2240      	moveq	r2, #64	@ 0x40
34006d76:	4b4e      	ldreq	r3, [pc, #312]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006d78:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006d7c:	f7fe be37 	b.w	340059ee <HAL_RCCEx_PeriphCLKConfig+0x19ce>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34006d80:	4a53      	ldr	r2, [pc, #332]	@ (34006ed0 <HAL_RCCEx_PeriphCLKConfig+0x2eb0>)
34006d82:	4293      	cmp	r3, r2
34006d84:	d124      	bne.n	34006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2db0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006d86:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006d88:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006d8c:	d004      	beq.n	34006d98 <HAL_RCCEx_PeriphCLKConfig+0x2d78>
34006d8e:	f640 0118 	movw	r1, #2072	@ 0x818
34006d92:	4846      	ldr	r0, [pc, #280]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006d94:	f7fa f836 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006d98:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006d9a:	3b01      	subs	r3, #1
34006d9c:	2bff      	cmp	r3, #255	@ 0xff
34006d9e:	d904      	bls.n	34006daa <HAL_RCCEx_PeriphCLKConfig+0x2d8a>
34006da0:	f640 0119 	movw	r1, #2073	@ 0x819
34006da4:	4841      	ldr	r0, [pc, #260]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006da6:	f7fa f82d 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006daa:	4a41      	ldr	r2, [pc, #260]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006dac:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006dae:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006db2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006db4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006db8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006dbc:	3901      	subs	r1, #1
34006dbe:	4303      	orrs	r3, r0
34006dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006dc4:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006dc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006dcc:	f7fe be55 	b.w	34005a7a <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34006dd0:	4a40      	ldr	r2, [pc, #256]	@ (34006ed4 <HAL_RCCEx_PeriphCLKConfig+0x2eb4>)
34006dd2:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006dd4:	bf02      	ittt	eq
34006dd6:	2240      	moveq	r2, #64	@ 0x40
34006dd8:	4b35      	ldreq	r3, [pc, #212]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006dda:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006dde:	f7fe be4e 	b.w	34005a7e <HAL_RCCEx_PeriphCLKConfig+0x1a5e>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34006de2:	4a3d      	ldr	r2, [pc, #244]	@ (34006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2eb8>)
34006de4:	4293      	cmp	r3, r2
34006de6:	d124      	bne.n	34006e32 <HAL_RCCEx_PeriphCLKConfig+0x2e12>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006de8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006dea:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006dee:	d004      	beq.n	34006dfa <HAL_RCCEx_PeriphCLKConfig+0x2dda>
34006df0:	f640 0145 	movw	r1, #2117	@ 0x845
34006df4:	482d      	ldr	r0, [pc, #180]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006df6:	f7fa f805 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006dfa:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006dfc:	3b01      	subs	r3, #1
34006dfe:	2bff      	cmp	r3, #255	@ 0xff
34006e00:	d904      	bls.n	34006e0c <HAL_RCCEx_PeriphCLKConfig+0x2dec>
34006e02:	f640 0146 	movw	r1, #2118	@ 0x846
34006e06:	4829      	ldr	r0, [pc, #164]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006e08:	f7f9 fffc 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006e0c:	4a28      	ldr	r2, [pc, #160]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006e0e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006e10:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006e14:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006e16:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006e1a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006e1e:	3901      	subs	r1, #1
34006e20:	4303      	orrs	r3, r0
34006e22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006e26:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006e2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006e2e:	f7fe be6c 	b.w	34005b0a <HAL_RCCEx_PeriphCLKConfig+0x1aea>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34006e32:	4a2a      	ldr	r2, [pc, #168]	@ (34006edc <HAL_RCCEx_PeriphCLKConfig+0x2ebc>)
34006e34:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006e36:	bf02      	ittt	eq
34006e38:	2240      	moveq	r2, #64	@ 0x40
34006e3a:	4b1d      	ldreq	r3, [pc, #116]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006e3c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006e40:	f7fe be65 	b.w	34005b0e <HAL_RCCEx_PeriphCLKConfig+0x1aee>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34006e44:	4a26      	ldr	r2, [pc, #152]	@ (34006ee0 <HAL_RCCEx_PeriphCLKConfig+0x2ec0>)
34006e46:	4293      	cmp	r3, r2
34006e48:	d124      	bne.n	34006e94 <HAL_RCCEx_PeriphCLKConfig+0x2e74>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006e4a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006e4c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006e50:	d004      	beq.n	34006e5c <HAL_RCCEx_PeriphCLKConfig+0x2e3c>
34006e52:	f640 0172 	movw	r1, #2162	@ 0x872
34006e56:	4815      	ldr	r0, [pc, #84]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006e58:	f7f9 ffd4 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006e5c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006e5e:	3b01      	subs	r3, #1
34006e60:	2bff      	cmp	r3, #255	@ 0xff
34006e62:	d904      	bls.n	34006e6e <HAL_RCCEx_PeriphCLKConfig+0x2e4e>
34006e64:	f640 0173 	movw	r1, #2163	@ 0x873
34006e68:	4810      	ldr	r0, [pc, #64]	@ (34006eac <HAL_RCCEx_PeriphCLKConfig+0x2e8c>)
34006e6a:	f7f9 ffcb 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006e6e:	4a10      	ldr	r2, [pc, #64]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006e70:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006e72:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006e76:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006e78:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006e7c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006e80:	3901      	subs	r1, #1
34006e82:	4303      	orrs	r3, r0
34006e84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006e88:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006e90:	f7fe be83 	b.w	34005b9a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34006e94:	4a13      	ldr	r2, [pc, #76]	@ (34006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2ec4>)
34006e96:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006e98:	bf02      	ittt	eq
34006e9a:	2240      	moveq	r2, #64	@ 0x40
34006e9c:	4b04      	ldreq	r3, [pc, #16]	@ (34006eb0 <HAL_RCCEx_PeriphCLKConfig+0x2e90>)
34006e9e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006ea2:	f7fe be7c 	b.w	34005b9e <HAL_RCCEx_PeriphCLKConfig+0x1b7e>
34006ea6:	bf00      	nop
34006ea8:	07030430 	.word	0x07030430
34006eac:	34038c3d 	.word	0x34038c3d
34006eb0:	56028000 	.word	0x56028000
34006eb4:	07010430 	.word	0x07010430
34006eb8:	07030830 	.word	0x07030830
34006ebc:	07010830 	.word	0x07010830
34006ec0:	07030c30 	.word	0x07030c30
34006ec4:	07010c30 	.word	0x07010c30
34006ec8:	07031030 	.word	0x07031030
34006ecc:	07011030 	.word	0x07011030
34006ed0:	07031430 	.word	0x07031430
34006ed4:	07011430 	.word	0x07011430
34006ed8:	07031830 	.word	0x07031830
34006edc:	07011830 	.word	0x07011830
34006ee0:	07031c30 	.word	0x07031c30
34006ee4:	07011c30 	.word	0x07011c30
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34006ee8:	4a41      	ldr	r2, [pc, #260]	@ (34006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
34006eea:	4293      	cmp	r3, r2
34006eec:	d124      	bne.n	34006f38 <HAL_RCCEx_PeriphCLKConfig+0x2f18>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006eee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006ef0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006ef4:	d004      	beq.n	34006f00 <HAL_RCCEx_PeriphCLKConfig+0x2ee0>
34006ef6:	f640 019f 	movw	r1, #2207	@ 0x89f
34006efa:	483e      	ldr	r0, [pc, #248]	@ (34006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
34006efc:	f7f9 ff82 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006f00:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006f02:	3b01      	subs	r3, #1
34006f04:	2bff      	cmp	r3, #255	@ 0xff
34006f06:	d904      	bls.n	34006f12 <HAL_RCCEx_PeriphCLKConfig+0x2ef2>
34006f08:	f44f 610a 	mov.w	r1, #2208	@ 0x8a0
34006f0c:	4839      	ldr	r0, [pc, #228]	@ (34006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
34006f0e:	f7f9 ff79 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006f12:	4a39      	ldr	r2, [pc, #228]	@ (34006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
34006f14:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006f16:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006f1a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006f1c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006f20:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006f24:	3901      	subs	r1, #1
34006f26:	4303      	orrs	r3, r0
34006f28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006f2c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006f30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006f34:	f7fe be79 	b.w	34005c2a <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34006f38:	4a30      	ldr	r2, [pc, #192]	@ (34006ffc <HAL_RCCEx_PeriphCLKConfig+0x2fdc>)
34006f3a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006f3c:	bf02      	ittt	eq
34006f3e:	2240      	moveq	r2, #64	@ 0x40
34006f40:	4b2d      	ldreq	r3, [pc, #180]	@ (34006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
34006f42:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006f46:	f7fe be72 	b.w	34005c2e <HAL_RCCEx_PeriphCLKConfig+0x1c0e>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
34006f4a:	4a2d      	ldr	r2, [pc, #180]	@ (34007000 <HAL_RCCEx_PeriphCLKConfig+0x2fe0>)
34006f4c:	4293      	cmp	r3, r2
34006f4e:	d124      	bne.n	34006f9a <HAL_RCCEx_PeriphCLKConfig+0x2f7a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34006f50:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34006f52:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34006f56:	d004      	beq.n	34006f62 <HAL_RCCEx_PeriphCLKConfig+0x2f42>
34006f58:	f640 01cc 	movw	r1, #2252	@ 0x8cc
34006f5c:	4825      	ldr	r0, [pc, #148]	@ (34006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
34006f5e:	f7f9 ff51 	bl	34000e04 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34006f62:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34006f64:	3b01      	subs	r3, #1
34006f66:	2bff      	cmp	r3, #255	@ 0xff
34006f68:	d904      	bls.n	34006f74 <HAL_RCCEx_PeriphCLKConfig+0x2f54>
34006f6a:	f640 01cd 	movw	r1, #2253	@ 0x8cd
34006f6e:	4821      	ldr	r0, [pc, #132]	@ (34006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
34006f70:	f7f9 ff48 	bl	34000e04 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34006f74:	4a20      	ldr	r2, [pc, #128]	@ (34006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
34006f76:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34006f78:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34006f7c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34006f7e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34006f82:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34006f86:	3901      	subs	r1, #1
34006f88:	4303      	orrs	r3, r0
34006f8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34006f8e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34006f92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34006f96:	f7fe beaa 	b.w	34005cee <HAL_RCCEx_PeriphCLKConfig+0x1cce>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34006f9a:	4a1a      	ldr	r2, [pc, #104]	@ (34007004 <HAL_RCCEx_PeriphCLKConfig+0x2fe4>)
34006f9c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006f9e:	bf02      	ittt	eq
34006fa0:	2240      	moveq	r2, #64	@ 0x40
34006fa2:	4b15      	ldreq	r3, [pc, #84]	@ (34006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
34006fa4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006fa8:	f7fe bea3 	b.w	34005cf2 <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34006fac:	f7fc ff18 	bl	34003de0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34006fb0:	f7fe bec5 	b.w	34005d3e <HAL_RCCEx_PeriphCLKConfig+0x1d1e>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34006fb4:	f7fc ff14 	bl	34003de0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34006fb8:	f7fe bee3 	b.w	34005d82 <HAL_RCCEx_PeriphCLKConfig+0x1d62>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34006fbc:	4a12      	ldr	r2, [pc, #72]	@ (34007008 <HAL_RCCEx_PeriphCLKConfig+0x2fe8>)
34006fbe:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006fc0:	bf02      	ittt	eq
34006fc2:	2240      	moveq	r2, #64	@ 0x40
34006fc4:	4b0c      	ldreq	r3, [pc, #48]	@ (34006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
34006fc6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006fca:	f7fe bf1a 	b.w	34005e02 <HAL_RCCEx_PeriphCLKConfig+0x1de2>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34006fce:	f7fc ff07 	bl	34003de0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34006fd2:	f7fe bf23 	b.w	34005e1c <HAL_RCCEx_PeriphCLKConfig+0x1dfc>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34006fd6:	4a0d      	ldr	r2, [pc, #52]	@ (3400700c <HAL_RCCEx_PeriphCLKConfig+0x2fec>)
34006fd8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34006fda:	bf02      	ittt	eq
34006fdc:	2240      	moveq	r2, #64	@ 0x40
34006fde:	4b06      	ldreq	r3, [pc, #24]	@ (34006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>)
34006fe0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34006fe4:	f7fe bf5a 	b.w	34005e9c <HAL_RCCEx_PeriphCLKConfig+0x1e7c>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34006fe8:	f7fc fefa 	bl	34003de0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34006fec:	f7fe bf63 	b.w	34005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e96>
34006ff0:	07030034 	.word	0x07030034
34006ff4:	34038c3d 	.word	0x34038c3d
34006ff8:	56028000 	.word	0x56028000
34006ffc:	07010034 	.word	0x07010034
34007000:	07030434 	.word	0x07030434
34007004:	07010434 	.word	0x07010434
34007008:	03010c14 	.word	0x03010c14
3400700c:	03011414 	.word	0x03011414

34007010 <HAL_RCCEx_GetPLL1CLKFreq>:
{
34007010:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34007012:	4c1e      	ldr	r4, [pc, #120]	@ (3400708c <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
34007014:	6863      	ldr	r3, [r4, #4]
34007016:	05d9      	lsls	r1, r3, #23
34007018:	d506      	bpl.n	34007028 <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
3400701a:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
3400701e:	005a      	lsls	r2, r3, #1
34007020:	d40f      	bmi.n	34007042 <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34007022:	2000      	movs	r0, #0
}
34007024:	b003      	add	sp, #12
34007026:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34007028:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
3400702c:	011b      	lsls	r3, r3, #4
3400702e:	d5f8      	bpl.n	34007022 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34007030:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34007034:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34007038:	b003      	add	sp, #12
3400703a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3400703e:	f7fc bf89 	b.w	34003f54 <RCCEx_GetPLLSourceFreq>
34007042:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34007046:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3400704a:	f7fc ff83 	bl	34003f54 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3400704e:	2800      	cmp	r0, #0
34007050:	d0e7      	beq.n	34007022 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34007052:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
34007056:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3400705a:	f3c3 5105 	ubfx	r1, r3, #20, #6
3400705e:	d0e0      	beq.n	34007022 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34007060:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34007064:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34007068:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3400706c:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34007070:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34007074:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34007078:	9401      	str	r4, [sp, #4]
3400707a:	9500      	str	r5, [sp, #0]
3400707c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34007080:	f3c2 220b 	ubfx	r2, r2, #8, #12
34007084:	f7fc ffa0 	bl	34003fc8 <RCCEx_CalcPLLFreq>
34007088:	e7cc      	b.n	34007024 <HAL_RCCEx_GetPLL1CLKFreq+0x14>
3400708a:	bf00      	nop
3400708c:	56028000 	.word	0x56028000

34007090 <HAL_RCCEx_GetPLL2CLKFreq>:
{
34007090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34007092:	4c1e      	ldr	r4, [pc, #120]	@ (3400710c <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
34007094:	6863      	ldr	r3, [r4, #4]
34007096:	0599      	lsls	r1, r3, #22
34007098:	d506      	bpl.n	340070a8 <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
3400709a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
3400709e:	005a      	lsls	r2, r3, #1
340070a0:	d40f      	bmi.n	340070c2 <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340070a2:	2000      	movs	r0, #0
}
340070a4:	b003      	add	sp, #12
340070a6:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340070a8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
340070ac:	011b      	lsls	r3, r3, #4
340070ae:	d5f8      	bpl.n	340070a2 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340070b0:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340070b4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340070b8:	b003      	add	sp, #12
340070ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340070be:	f7fc bf49 	b.w	34003f54 <RCCEx_GetPLLSourceFreq>
340070c2:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340070c6:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340070ca:	f7fc ff43 	bl	34003f54 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340070ce:	2800      	cmp	r0, #0
340070d0:	d0e7      	beq.n	340070a2 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
340070d2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
340070d6:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340070da:	f3c3 5105 	ubfx	r1, r3, #20, #6
340070de:	d0e0      	beq.n	340070a2 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
340070e0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
340070e4:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340070e8:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340070ec:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340070f0:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340070f4:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
340070f8:	9401      	str	r4, [sp, #4]
340070fa:	9500      	str	r5, [sp, #0]
340070fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34007100:	f3c2 220b 	ubfx	r2, r2, #8, #12
34007104:	f7fc ff60 	bl	34003fc8 <RCCEx_CalcPLLFreq>
34007108:	e7cc      	b.n	340070a4 <HAL_RCCEx_GetPLL2CLKFreq+0x14>
3400710a:	bf00      	nop
3400710c:	56028000 	.word	0x56028000

34007110 <HAL_RCCEx_GetPLL3CLKFreq>:
{
34007110:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34007112:	4c1e      	ldr	r4, [pc, #120]	@ (3400718c <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
34007114:	6863      	ldr	r3, [r4, #4]
34007116:	0559      	lsls	r1, r3, #21
34007118:	d506      	bpl.n	34007128 <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
3400711a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
3400711e:	005a      	lsls	r2, r3, #1
34007120:	d40f      	bmi.n	34007142 <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34007122:	2000      	movs	r0, #0
}
34007124:	b003      	add	sp, #12
34007126:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34007128:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
3400712c:	011b      	lsls	r3, r3, #4
3400712e:	d5f8      	bpl.n	34007122 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34007130:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34007134:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34007138:	b003      	add	sp, #12
3400713a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3400713e:	f7fc bf09 	b.w	34003f54 <RCCEx_GetPLLSourceFreq>
34007142:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34007146:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3400714a:	f7fc ff03 	bl	34003f54 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3400714e:	2800      	cmp	r0, #0
34007150:	d0e7      	beq.n	34007122 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34007152:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
34007156:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3400715a:	f3c3 5105 	ubfx	r1, r3, #20, #6
3400715e:	d0e0      	beq.n	34007122 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34007160:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34007164:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34007168:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3400716c:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34007170:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34007174:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34007178:	9401      	str	r4, [sp, #4]
3400717a:	9500      	str	r5, [sp, #0]
3400717c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34007180:	f3c2 220b 	ubfx	r2, r2, #8, #12
34007184:	f7fc ff20 	bl	34003fc8 <RCCEx_CalcPLLFreq>
34007188:	e7cc      	b.n	34007124 <HAL_RCCEx_GetPLL3CLKFreq+0x14>
3400718a:	bf00      	nop
3400718c:	56028000 	.word	0x56028000

34007190 <HAL_RCCEx_GetPLL4CLKFreq>:
{
34007190:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34007192:	4c1e      	ldr	r4, [pc, #120]	@ (3400720c <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
34007194:	6863      	ldr	r3, [r4, #4]
34007196:	0519      	lsls	r1, r3, #20
34007198:	d506      	bpl.n	340071a8 <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3400719a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3400719e:	005a      	lsls	r2, r3, #1
340071a0:	d40f      	bmi.n	340071c2 <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340071a2:	2000      	movs	r0, #0
}
340071a4:	b003      	add	sp, #12
340071a6:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340071a8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
340071ac:	011b      	lsls	r3, r3, #4
340071ae:	d5f8      	bpl.n	340071a2 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
340071b0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340071b4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340071b8:	b003      	add	sp, #12
340071ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340071be:	f7fc bec9 	b.w	34003f54 <RCCEx_GetPLLSourceFreq>
340071c2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340071c6:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340071ca:	f7fc fec3 	bl	34003f54 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340071ce:	2800      	cmp	r0, #0
340071d0:	d0e7      	beq.n	340071a2 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
340071d2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
340071d6:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340071da:	f3c3 5105 	ubfx	r1, r3, #20, #6
340071de:	d0e0      	beq.n	340071a2 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
340071e0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
340071e4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340071e8:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340071ec:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340071f0:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340071f4:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
340071f8:	9401      	str	r4, [sp, #4]
340071fa:	9500      	str	r5, [sp, #0]
340071fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34007200:	f3c2 220b 	ubfx	r2, r2, #8, #12
34007204:	f7fc fee0 	bl	34003fc8 <RCCEx_CalcPLLFreq>
34007208:	e7cc      	b.n	340071a4 <HAL_RCCEx_GetPLL4CLKFreq+0x14>
3400720a:	bf00      	nop
3400720c:	56028000 	.word	0x56028000

34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34007210:	4b3e      	ldr	r3, [pc, #248]	@ (3400730c <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
34007212:	b510      	push	{r4, lr}
34007214:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
34007218:	0652      	lsls	r2, r2, #25
3400721a:	d535      	bpl.n	34007288 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
3400721c:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34007220:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34007224:	3a01      	subs	r2, #1
34007226:	2a06      	cmp	r2, #6
34007228:	d805      	bhi.n	34007236 <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
3400722a:	e8df f002 	tbb	[pc, r2]
3400722e:	130e      	.short	0x130e
34007230:	3b2f1846 	.word	0x3b2f1846
34007234:	52          	.byte	0x52
34007235:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
34007236:	f7fc fdf3 	bl	34003e20 <LL_RCC_HSI_IsReady>
3400723a:	b328      	cbz	r0, 34007288 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400723c:	4b33      	ldr	r3, [pc, #204]	@ (3400730c <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400723e:	4834      	ldr	r0, [pc, #208]	@ (34007310 <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
34007240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34007242:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34007246:	40d8      	lsrs	r0, r3
34007248:	e01f      	b.n	3400728a <RCCEx_GetCLKPCLKFreq.constprop.0+0x7a>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
3400724a:	f7fc fdf1 	bl	34003e30 <LL_RCC_MSI_IsReady>
3400724e:	b1d8      	cbz	r0, 34007288 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
        {
          clkp_frequency = MSI_VALUE;
34007250:	4830      	ldr	r0, [pc, #192]	@ (34007314 <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
34007252:	e01a      	b.n	3400728a <RCCEx_GetCLKPCLKFreq.constprop.0+0x7a>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34007254:	f7fc fddc 	bl	34003e10 <LL_RCC_HSE_IsReady>
34007258:	b1b0      	cbz	r0, 34007288 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
        {
          clkp_frequency = HSE_VALUE;
3400725a:	482f      	ldr	r0, [pc, #188]	@ (34007318 <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
3400725c:	e015      	b.n	3400728a <RCCEx_GetCLKPCLKFreq.constprop.0+0x7a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3400725e:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34007262:	06d4      	lsls	r4, r2, #27
34007264:	d510      	bpl.n	34007288 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34007266:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3400726a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3400726e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34007272:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34007274:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34007278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400727c:	d043      	beq.n	34007306 <RCCEx_GetCLKPCLKFreq.constprop.0+0xf6>
3400727e:	d834      	bhi.n	340072ea <RCCEx_GetCLKPCLKFreq.constprop.0+0xda>
34007280:	b3cb      	cbz	r3, 340072f6 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
34007282:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007286:	d03b      	beq.n	34007300 <RCCEx_GetCLKPCLKFreq.constprop.0+0xf0>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34007288:	2000      	movs	r0, #0
}
3400728a:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3400728c:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34007290:	0590      	lsls	r0, r2, #22
34007292:	d5f9      	bpl.n	34007288 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34007294:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34007298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400729c:	f3c0 4007 	ubfx	r0, r0, #16, #8
340072a0:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340072a2:	e7e7      	b.n	34007274 <RCCEx_GetCLKPCLKFreq.constprop.0+0x64>
        if (LL_RCC_IC15_IsEnabled() != 0U)
340072a4:	f7fc fe3c 	bl	34003f20 <LL_RCC_IC15_IsEnabled>
340072a8:	2800      	cmp	r0, #0
340072aa:	d0ed      	beq.n	34007288 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
          ic_divider = LL_RCC_IC15_GetDivider();
340072ac:	f7fc fe40 	bl	34003f30 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340072b0:	4b16      	ldr	r3, [pc, #88]	@ (3400730c <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
340072b2:	4604      	mov	r4, r0
340072b4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340072b8:	e7dc      	b.n	34007274 <RCCEx_GetCLKPCLKFreq.constprop.0+0x64>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
340072ba:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340072be:	0351      	lsls	r1, r2, #13
340072c0:	d5e2      	bpl.n	34007288 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340072c2:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340072c6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340072ca:	f3c0 4007 	ubfx	r0, r0, #16, #8
340072ce:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340072d0:	e7d0      	b.n	34007274 <RCCEx_GetCLKPCLKFreq.constprop.0+0x64>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
340072d2:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340072d6:	0312      	lsls	r2, r2, #12
340072d8:	d5d6      	bpl.n	34007288 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340072da:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340072de:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340072e2:	f3c0 4007 	ubfx	r0, r0, #16, #8
340072e6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340072e8:	e7c4      	b.n	34007274 <RCCEx_GetCLKPCLKFreq.constprop.0+0x64>
340072ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340072ee:	d1cb      	bne.n	34007288 <RCCEx_GetCLKPCLKFreq.constprop.0+0x78>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340072f0:	f7ff ff4e 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
340072f4:	e001      	b.n	340072fa <RCCEx_GetCLKPCLKFreq.constprop.0+0xea>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340072f6:	f7ff fe8b 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
340072fa:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
340072fe:	e7c4      	b.n	3400728a <RCCEx_GetCLKPCLKFreq.constprop.0+0x7a>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007300:	f7ff fec6 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
34007304:	e7f9      	b.n	340072fa <RCCEx_GetCLKPCLKFreq.constprop.0+0xea>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007306:	f7ff ff03 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
3400730a:	e7f6      	b.n	340072fa <RCCEx_GetCLKPCLKFreq.constprop.0+0xea>
3400730c:	56028000 	.word	0x56028000
34007310:	03d09000 	.word	0x03d09000
34007314:	003d0900 	.word	0x003d0900
34007318:	02dc6c00 	.word	0x02dc6c00

3400731c <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
3400731c:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
3400731e:	4d2d      	ldr	r5, [pc, #180]	@ (340073d4 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
34007320:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
34007324:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34007328:	2b06      	cmp	r3, #6
3400732a:	d824      	bhi.n	34007376 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
3400732c:	e8df f003 	tbb	[pc, r3]
34007330:	2a110d04 	.word	0x2a110d04
34007334:	4049      	.short	0x4049
34007336:	4f          	.byte	0x4f
34007337:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007338:	f7fc fd02 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
3400733c:	f7fc fe02 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34007340:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34007342:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007346:	40d8      	lsrs	r0, r3
34007348:	e016      	b.n	34007378 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5c>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
3400734a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400734e:	f7ff bf5f 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34007352:	f7fc fd9d 	bl	34003e90 <LL_RCC_IC7_IsEnabled>
34007356:	b170      	cbz	r0, 34007376 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
        ic_divider = LL_RCC_IC7_GetDivider();
34007358:	f7fc fda2 	bl	34003ea0 <LL_RCC_IC7_GetDivider>
3400735c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3400735e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34007362:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34007366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400736a:	d01e      	beq.n	340073aa <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x8e>
3400736c:	d814      	bhi.n	34007398 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
3400736e:	b1cb      	cbz	r3, 340073a4 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x88>
34007370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007374:	d001      	beq.n	3400737a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34007376:	2000      	movs	r0, #0
}
34007378:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400737a:	f7ff fe89 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3400737e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34007382:	e7f9      	b.n	34007378 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5c>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34007384:	f7fc fd96 	bl	34003eb4 <LL_RCC_IC8_IsEnabled>
34007388:	2800      	cmp	r0, #0
3400738a:	d0f4      	beq.n	34007376 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
        ic_divider = LL_RCC_IC8_GetDivider();
3400738c:	f7fc fd9a 	bl	34003ec4 <LL_RCC_IC8_GetDivider>
34007390:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34007394:	4604      	mov	r4, r0
34007396:	e7e4      	b.n	34007362 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
34007398:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400739c:	d1eb      	bne.n	34007376 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400739e:	f7ff fef7 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
340073a2:	e7ec      	b.n	3400737e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x62>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340073a4:	f7ff fe34 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
340073a8:	e7e9      	b.n	3400737e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x62>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340073aa:	f7ff feb1 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
340073ae:	e7e6      	b.n	3400737e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x62>
      if (LL_RCC_HSI_IsReady() != 0U)
340073b0:	f7fc fd36 	bl	34003e20 <LL_RCC_HSI_IsReady>
340073b4:	2800      	cmp	r0, #0
340073b6:	d0de      	beq.n	34007376 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340073b8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340073ba:	4807      	ldr	r0, [pc, #28]	@ (340073d8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
340073bc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340073c0:	e7c1      	b.n	34007346 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
340073c2:	f7fc fd35 	bl	34003e30 <LL_RCC_MSI_IsReady>
340073c6:	2800      	cmp	r0, #0
340073c8:	d0d5      	beq.n	34007376 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
        spdifrx_frequency = MSI_VALUE;
340073ca:	4804      	ldr	r0, [pc, #16]	@ (340073dc <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xc0>)
340073cc:	e7d4      	b.n	34007378 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5c>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
340073ce:	4804      	ldr	r0, [pc, #16]	@ (340073e0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xc4>)
  return spdifrx_frequency;
340073d0:	e7d2      	b.n	34007378 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5c>
340073d2:	bf00      	nop
340073d4:	56028000 	.word	0x56028000
340073d8:	03d09000 	.word	0x03d09000
340073dc:	003d0900 	.word	0x003d0900
340073e0:	00bb8000 	.word	0x00bb8000

340073e4 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
340073e4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340073e6:	f7fc fd45 	bl	34003e74 <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340073ea:	4b37      	ldr	r3, [pc, #220]	@ (340074c8 <RCCEx_GetXSPICLKFreq+0xe4>)
340073ec:	4298      	cmp	r0, r3
340073ee:	d028      	beq.n	34007442 <RCCEx_GetXSPICLKFreq+0x5e>
340073f0:	d81b      	bhi.n	3400742a <RCCEx_GetXSPICLKFreq+0x46>
340073f2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340073f6:	4298      	cmp	r0, r3
340073f8:	d013      	beq.n	34007422 <RCCEx_GetXSPICLKFreq+0x3e>
340073fa:	d80b      	bhi.n	34007414 <RCCEx_GetXSPICLKFreq+0x30>
340073fc:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34007400:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007404:	429a      	cmp	r2, r3
34007406:	d04b      	beq.n	340074a0 <RCCEx_GetXSPICLKFreq+0xbc>
34007408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
3400740c:	4298      	cmp	r0, r3
3400740e:	d047      	beq.n	340074a0 <RCCEx_GetXSPICLKFreq+0xbc>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34007410:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
34007412:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34007414:	4b2d      	ldr	r3, [pc, #180]	@ (340074cc <RCCEx_GetXSPICLKFreq+0xe8>)
34007416:	4298      	cmp	r0, r3
34007418:	d003      	beq.n	34007422 <RCCEx_GetXSPICLKFreq+0x3e>
3400741a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400741e:	4298      	cmp	r0, r3
34007420:	d1f6      	bne.n	34007410 <RCCEx_GetXSPICLKFreq+0x2c>
}
34007422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007426:	f7ff bef3 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3400742a:	4b29      	ldr	r3, [pc, #164]	@ (340074d0 <RCCEx_GetXSPICLKFreq+0xec>)
3400742c:	4298      	cmp	r0, r3
3400742e:	d029      	beq.n	34007484 <RCCEx_GetXSPICLKFreq+0xa0>
34007430:	d821      	bhi.n	34007476 <RCCEx_GetXSPICLKFreq+0x92>
34007432:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34007436:	4298      	cmp	r0, r3
34007438:	d003      	beq.n	34007442 <RCCEx_GetXSPICLKFreq+0x5e>
3400743a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400743e:	4298      	cmp	r0, r3
34007440:	d1e6      	bne.n	34007410 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34007442:	4b24      	ldr	r3, [pc, #144]	@ (340074d4 <RCCEx_GetXSPICLKFreq+0xf0>)
34007444:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34007448:	f010 0004 	ands.w	r0, r0, #4
3400744c:	d0e1      	beq.n	34007412 <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3400744e:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34007452:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34007456:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400745a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3400745c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34007460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007464:	d02d      	beq.n	340074c2 <RCCEx_GetXSPICLKFreq+0xde>
34007466:	d821      	bhi.n	340074ac <RCCEx_GetXSPICLKFreq+0xc8>
34007468:	b333      	cbz	r3, 340074b8 <RCCEx_GetXSPICLKFreq+0xd4>
3400746a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400746e:	d1cf      	bne.n	34007410 <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007470:	f7ff fe0e 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
34007474:	e022      	b.n	340074bc <RCCEx_GetXSPICLKFreq+0xd8>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34007476:	4b18      	ldr	r3, [pc, #96]	@ (340074d8 <RCCEx_GetXSPICLKFreq+0xf4>)
34007478:	4298      	cmp	r0, r3
3400747a:	d003      	beq.n	34007484 <RCCEx_GetXSPICLKFreq+0xa0>
3400747c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007480:	4298      	cmp	r0, r3
34007482:	d1c5      	bne.n	34007410 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34007484:	4b13      	ldr	r3, [pc, #76]	@ (340074d4 <RCCEx_GetXSPICLKFreq+0xf0>)
34007486:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
3400748a:	f010 0008 	ands.w	r0, r0, #8
3400748e:	d0c0      	beq.n	34007412 <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34007490:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34007494:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34007498:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400749c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3400749e:	e7dd      	b.n	3400745c <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340074a0:	f7fc fc4e 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
}
340074a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340074a8:	f7fc bd4c 	b.w	34003f44 <RCCEx_GetHCLKFreq>
340074ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340074b0:	d1ae      	bne.n	34007410 <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340074b2:	f7ff fe6d 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
340074b6:	e001      	b.n	340074bc <RCCEx_GetXSPICLKFreq+0xd8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340074b8:	f7ff fdaa 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
340074bc:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
340074c0:	e7a7      	b.n	34007412 <RCCEx_GetXSPICLKFreq+0x2e>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340074c2:	f7ff fe25 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
340074c6:	e7f9      	b.n	340074bc <RCCEx_GetXSPICLKFreq+0xd8>
340074c8:	03020014 	.word	0x03020014
340074cc:	03010414 	.word	0x03010414
340074d0:	03030014 	.word	0x03030014
340074d4:	56028000 	.word	0x56028000
340074d8:	03030414 	.word	0x03030414

340074dc <RCCEx_GetOTGPHYCLKFreq>:
{
340074dc:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340074de:	f7fc fcc9 	bl	34003e74 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340074e2:	4b2d      	ldr	r3, [pc, #180]	@ (34007598 <RCCEx_GetOTGPHYCLKFreq+0xbc>)
340074e4:	4298      	cmp	r0, r3
340074e6:	d021      	beq.n	3400752c <RCCEx_GetOTGPHYCLKFreq+0x50>
340074e8:	d815      	bhi.n	34007516 <RCCEx_GetOTGPHYCLKFreq+0x3a>
340074ea:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340074ee:	4298      	cmp	r0, r3
340074f0:	d00d      	beq.n	3400750e <RCCEx_GetOTGPHYCLKFreq+0x32>
340074f2:	d809      	bhi.n	34007508 <RCCEx_GetOTGPHYCLKFreq+0x2c>
340074f4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340074f8:	4298      	cmp	r0, r3
340074fa:	d02e      	beq.n	3400755a <RCCEx_GetOTGPHYCLKFreq+0x7e>
340074fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34007500:	4298      	cmp	r0, r3
34007502:	d02a      	beq.n	3400755a <RCCEx_GetOTGPHYCLKFreq+0x7e>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34007504:	2000      	movs	r0, #0
}
34007506:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34007508:	4b24      	ldr	r3, [pc, #144]	@ (3400759c <RCCEx_GetOTGPHYCLKFreq+0xc0>)
3400750a:	4298      	cmp	r0, r3
3400750c:	d1fa      	bne.n	34007504 <RCCEx_GetOTGPHYCLKFreq+0x28>
}
3400750e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007512:	f7ff be7d 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34007516:	4b22      	ldr	r3, [pc, #136]	@ (340075a0 <RCCEx_GetOTGPHYCLKFreq+0xc4>)
34007518:	4298      	cmp	r0, r3
3400751a:	d024      	beq.n	34007566 <RCCEx_GetOTGPHYCLKFreq+0x8a>
3400751c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34007520:	4298      	cmp	r0, r3
34007522:	d020      	beq.n	34007566 <RCCEx_GetOTGPHYCLKFreq+0x8a>
34007524:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007528:	4298      	cmp	r0, r3
3400752a:	d1eb      	bne.n	34007504 <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3400752c:	f7fc fcf8 	bl	34003f20 <LL_RCC_IC15_IsEnabled>
34007530:	2800      	cmp	r0, #0
34007532:	d0e7      	beq.n	34007504 <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
34007534:	f7fc fcfc 	bl	34003f30 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34007538:	4b1a      	ldr	r3, [pc, #104]	@ (340075a4 <RCCEx_GetOTGPHYCLKFreq+0xc8>)
3400753a:	4604      	mov	r4, r0
3400753c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34007540:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34007544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007548:	d022      	beq.n	34007590 <RCCEx_GetOTGPHYCLKFreq+0xb4>
3400754a:	d816      	bhi.n	3400757a <RCCEx_GetOTGPHYCLKFreq+0x9e>
3400754c:	b1db      	cbz	r3, 34007586 <RCCEx_GetOTGPHYCLKFreq+0xaa>
3400754e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007552:	d1d7      	bne.n	34007504 <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007554:	f7ff fd9c 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
34007558:	e017      	b.n	3400758a <RCCEx_GetOTGPHYCLKFreq+0xae>
      if (LL_RCC_HSE_IsReady() != 0U)
3400755a:	f7fc fc59 	bl	34003e10 <LL_RCC_HSE_IsReady>
3400755e:	2800      	cmp	r0, #0
34007560:	d0d0      	beq.n	34007504 <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
34007562:	4811      	ldr	r0, [pc, #68]	@ (340075a8 <RCCEx_GetOTGPHYCLKFreq+0xcc>)
34007564:	e7cf      	b.n	34007506 <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34007566:	f7fc fc53 	bl	34003e10 <LL_RCC_HSE_IsReady>
3400756a:	2800      	cmp	r0, #0
3400756c:	d0ca      	beq.n	34007504 <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3400756e:	f7fc fc47 	bl	34003e00 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34007572:	2800      	cmp	r0, #0
34007574:	d1f5      	bne.n	34007562 <RCCEx_GetOTGPHYCLKFreq+0x86>
          usb_frequency = HSE_VALUE;
34007576:	480d      	ldr	r0, [pc, #52]	@ (340075ac <RCCEx_GetOTGPHYCLKFreq+0xd0>)
  return usb_frequency;
34007578:	e7c5      	b.n	34007506 <RCCEx_GetOTGPHYCLKFreq+0x2a>
3400757a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400757e:	d1c1      	bne.n	34007504 <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007580:	f7ff fe06 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34007584:	e001      	b.n	3400758a <RCCEx_GetOTGPHYCLKFreq+0xae>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007586:	f7ff fd43 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
3400758a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400758e:	e7ba      	b.n	34007506 <RCCEx_GetOTGPHYCLKFreq+0x2a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007590:	f7ff fdbe 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
34007594:	e7f9      	b.n	3400758a <RCCEx_GetOTGPHYCLKFreq+0xae>
34007596:	bf00      	nop
34007598:	03020c14 	.word	0x03020c14
3400759c:	03011414 	.word	0x03011414
340075a0:	03030c14 	.word	0x03030c14
340075a4:	56028000 	.word	0x56028000
340075a8:	016e3600 	.word	0x016e3600
340075ac:	02dc6c00 	.word	0x02dc6c00

340075b0 <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
340075b0:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
340075b2:	f7fc fc5f 	bl	34003e74 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
340075b6:	4b11      	ldr	r3, [pc, #68]	@ (340075fc <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
340075b8:	4298      	cmp	r0, r3
340075ba:	d01c      	beq.n	340075f6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
340075bc:	d805      	bhi.n	340075ca <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
340075be:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340075c2:	4298      	cmp	r0, r3
340075c4:	d012      	beq.n	340075ec <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
340075c6:	2000      	movs	r0, #0
}
340075c8:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
340075ca:	4b0d      	ldr	r3, [pc, #52]	@ (34007600 <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
340075cc:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
340075d0:	4298      	cmp	r0, r3
340075d2:	d1f8      	bne.n	340075c6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
340075d4:	f7fc fc1c 	bl	34003e10 <LL_RCC_HSE_IsReady>
340075d8:	2800      	cmp	r0, #0
340075da:	d0f4      	beq.n	340075c6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
340075dc:	f7fc fc10 	bl	34003e00 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
340075e0:	4b08      	ldr	r3, [pc, #32]	@ (34007604 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
340075e2:	2800      	cmp	r0, #0
340075e4:	4808      	ldr	r0, [pc, #32]	@ (34007608 <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
340075e6:	bf08      	it	eq
340075e8:	4618      	moveq	r0, r3
340075ea:	e7ed      	b.n	340075c8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
340075ec:	4807      	ldr	r0, [pc, #28]	@ (3400760c <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
340075ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340075f2:	f7ff bf73 	b.w	340074dc <RCCEx_GetOTGPHYCLKFreq>
340075f6:	4806      	ldr	r0, [pc, #24]	@ (34007610 <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
340075f8:	e7f9      	b.n	340075ee <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
340075fa:	bf00      	nop
340075fc:	01001814 	.word	0x01001814
34007600:	01011014 	.word	0x01011014
34007604:	02dc6c00 	.word	0x02dc6c00
34007608:	016e3600 	.word	0x016e3600
3400760c:	03000c14 	.word	0x03000c14
34007610:	03001414 	.word	0x03001414

34007614 <RCCEx_GetUSARTCLKFreq>:
{
34007614:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34007616:	f7fc fc2d 	bl	34003e74 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3400761a:	4b70      	ldr	r3, [pc, #448]	@ (340077dc <RCCEx_GetUSARTCLKFreq+0x1c8>)
3400761c:	4298      	cmp	r0, r3
3400761e:	d039      	beq.n	34007694 <RCCEx_GetUSARTCLKFreq+0x80>
34007620:	d853      	bhi.n	340076ca <RCCEx_GetUSARTCLKFreq+0xb6>
34007622:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34007626:	4298      	cmp	r0, r3
34007628:	f000 80b6 	beq.w	34007798 <RCCEx_GetUSARTCLKFreq+0x184>
3400762c:	d813      	bhi.n	34007656 <RCCEx_GetUSARTCLKFreq+0x42>
3400762e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34007632:	4298      	cmp	r0, r3
34007634:	f000 80b0 	beq.w	34007798 <RCCEx_GetUSARTCLKFreq+0x184>
34007638:	d80b      	bhi.n	34007652 <RCCEx_GetUSARTCLKFreq+0x3e>
3400763a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
3400763e:	4298      	cmp	r0, r3
34007640:	f000 80aa 	beq.w	34007798 <RCCEx_GetUSARTCLKFreq+0x184>
34007644:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007648:	4298      	cmp	r0, r3
3400764a:	f000 80af 	beq.w	340077ac <RCCEx_GetUSARTCLKFreq+0x198>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
3400764e:	2000      	movs	r0, #0
}
34007650:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34007652:	4b63      	ldr	r3, [pc, #396]	@ (340077e0 <RCCEx_GetUSARTCLKFreq+0x1cc>)
34007654:	e7f8      	b.n	34007648 <RCCEx_GetUSARTCLKFreq+0x34>
34007656:	4b63      	ldr	r3, [pc, #396]	@ (340077e4 <RCCEx_GetUSARTCLKFreq+0x1d0>)
34007658:	4298      	cmp	r0, r3
3400765a:	d00c      	beq.n	34007676 <RCCEx_GetUSARTCLKFreq+0x62>
3400765c:	d80f      	bhi.n	3400767e <RCCEx_GetUSARTCLKFreq+0x6a>
3400765e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34007662:	4298      	cmp	r0, r3
34007664:	d007      	beq.n	34007676 <RCCEx_GetUSARTCLKFreq+0x62>
34007666:	bf8e      	itee	hi
34007668:	4b5f      	ldrhi	r3, [pc, #380]	@ (340077e8 <RCCEx_GetUSARTCLKFreq+0x1d4>)
3400766a:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
3400766e:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34007672:	4298      	cmp	r0, r3
34007674:	d1eb      	bne.n	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
}
34007676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400767a:	f7ff bdc9 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3400767e:	4b5b      	ldr	r3, [pc, #364]	@ (340077ec <RCCEx_GetUSARTCLKFreq+0x1d8>)
34007680:	4298      	cmp	r0, r3
34007682:	d007      	beq.n	34007694 <RCCEx_GetUSARTCLKFreq+0x80>
34007684:	bf8e      	itee	hi
34007686:	4b5a      	ldrhi	r3, [pc, #360]	@ (340077f0 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34007688:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
3400768c:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34007690:	4298      	cmp	r0, r3
34007692:	d1dc      	bne.n	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34007694:	f7fc fc20 	bl	34003ed8 <LL_RCC_IC9_IsEnabled>
34007698:	2800      	cmp	r0, #0
3400769a:	d0d8      	beq.n	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
3400769c:	f7fc fc24 	bl	34003ee8 <LL_RCC_IC9_GetDivider>
340076a0:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
340076a2:	4b54      	ldr	r3, [pc, #336]	@ (340077f4 <RCCEx_GetUSARTCLKFreq+0x1e0>)
340076a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
340076a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
340076ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340076b0:	f000 8091 	beq.w	340077d6 <RCCEx_GetUSARTCLKFreq+0x1c2>
340076b4:	f200 8083 	bhi.w	340077be <RCCEx_GetUSARTCLKFreq+0x1aa>
340076b8:	2b00      	cmp	r3, #0
340076ba:	f000 8087 	beq.w	340077cc <RCCEx_GetUSARTCLKFreq+0x1b8>
340076be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340076c2:	d1c4      	bne.n	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340076c4:	f7ff fce4 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
340076c8:	e082      	b.n	340077d0 <RCCEx_GetUSARTCLKFreq+0x1bc>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340076ca:	4b4b      	ldr	r3, [pc, #300]	@ (340077f8 <RCCEx_GetUSARTCLKFreq+0x1e4>)
340076cc:	4298      	cmp	r0, r3
340076ce:	d045      	beq.n	3400775c <RCCEx_GetUSARTCLKFreq+0x148>
340076d0:	d833      	bhi.n	3400773a <RCCEx_GetUSARTCLKFreq+0x126>
340076d2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340076d6:	4298      	cmp	r0, r3
340076d8:	d028      	beq.n	3400772c <RCCEx_GetUSARTCLKFreq+0x118>
340076da:	d81c      	bhi.n	34007716 <RCCEx_GetUSARTCLKFreq+0x102>
340076dc:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
340076e0:	3bfc      	subs	r3, #252	@ 0xfc
340076e2:	4298      	cmp	r0, r3
340076e4:	d006      	beq.n	340076f4 <RCCEx_GetUSARTCLKFreq+0xe0>
340076e6:	d810      	bhi.n	3400770a <RCCEx_GetUSARTCLKFreq+0xf6>
340076e8:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340076ec:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
340076f0:	4298      	cmp	r0, r3
340076f2:	d1ac      	bne.n	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
340076f4:	f7fc fc02 	bl	34003efc <LL_RCC_IC14_IsEnabled>
340076f8:	2800      	cmp	r0, #0
340076fa:	d0a8      	beq.n	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
340076fc:	f7fc fc06 	bl	34003f0c <LL_RCC_IC14_GetDivider>
34007700:	4b3c      	ldr	r3, [pc, #240]	@ (340077f4 <RCCEx_GetUSARTCLKFreq+0x1e0>)
34007702:	4604      	mov	r4, r0
34007704:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34007708:	e7ce      	b.n	340076a8 <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3400770a:	4b3c      	ldr	r3, [pc, #240]	@ (340077fc <RCCEx_GetUSARTCLKFreq+0x1e8>)
3400770c:	4298      	cmp	r0, r3
3400770e:	d0f1      	beq.n	340076f4 <RCCEx_GetUSARTCLKFreq+0xe0>
34007710:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
34007714:	e7ec      	b.n	340076f0 <RCCEx_GetUSARTCLKFreq+0xdc>
34007716:	4b3a      	ldr	r3, [pc, #232]	@ (34007800 <RCCEx_GetUSARTCLKFreq+0x1ec>)
34007718:	4298      	cmp	r0, r3
3400771a:	d007      	beq.n	3400772c <RCCEx_GetUSARTCLKFreq+0x118>
3400771c:	bf8e      	itee	hi
3400771e:	4b39      	ldrhi	r3, [pc, #228]	@ (34007804 <RCCEx_GetUSARTCLKFreq+0x1f0>)
34007720:	f020 0004 	bicls.w	r0, r0, #4
34007724:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34007728:	4298      	cmp	r0, r3
3400772a:	d190      	bne.n	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
3400772c:	f7fc fb88 	bl	34003e40 <LL_RCC_LSE_IsReady>
34007730:	3800      	subs	r0, #0
34007732:	bf18      	it	ne
34007734:	2001      	movne	r0, #1
34007736:	03c0      	lsls	r0, r0, #15
34007738:	e78a      	b.n	34007650 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3400773a:	4b33      	ldr	r3, [pc, #204]	@ (34007808 <RCCEx_GetUSARTCLKFreq+0x1f4>)
3400773c:	4298      	cmp	r0, r3
3400773e:	d020      	beq.n	34007782 <RCCEx_GetUSARTCLKFreq+0x16e>
34007740:	d813      	bhi.n	3400776a <RCCEx_GetUSARTCLKFreq+0x156>
34007742:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34007746:	4298      	cmp	r0, r3
34007748:	d008      	beq.n	3400775c <RCCEx_GetUSARTCLKFreq+0x148>
3400774a:	bf8e      	itee	hi
3400774c:	4b2f      	ldrhi	r3, [pc, #188]	@ (3400780c <RCCEx_GetUSARTCLKFreq+0x1f8>)
3400774e:	f020 0004 	bicls.w	r0, r0, #4
34007752:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34007756:	4298      	cmp	r0, r3
34007758:	f47f af79 	bne.w	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
3400775c:	f7fc fb68 	bl	34003e30 <LL_RCC_MSI_IsReady>
34007760:	2800      	cmp	r0, #0
34007762:	f43f af74 	beq.w	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
34007766:	482a      	ldr	r0, [pc, #168]	@ (34007810 <RCCEx_GetUSARTCLKFreq+0x1fc>)
  return usart_frequency;
34007768:	e772      	b.n	34007650 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3400776a:	4b2a      	ldr	r3, [pc, #168]	@ (34007814 <RCCEx_GetUSARTCLKFreq+0x200>)
3400776c:	4298      	cmp	r0, r3
3400776e:	d008      	beq.n	34007782 <RCCEx_GetUSARTCLKFreq+0x16e>
34007770:	bf8e      	itee	hi
34007772:	4b29      	ldrhi	r3, [pc, #164]	@ (34007818 <RCCEx_GetUSARTCLKFreq+0x204>)
34007774:	f020 0004 	bicls.w	r0, r0, #4
34007778:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
3400777c:	4298      	cmp	r0, r3
3400777e:	f47f af66 	bne.w	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
34007782:	f7fc fb4d 	bl	34003e20 <LL_RCC_HSI_IsReady>
34007786:	2800      	cmp	r0, #0
34007788:	f43f af61 	beq.w	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400778c:	4b19      	ldr	r3, [pc, #100]	@ (340077f4 <RCCEx_GetUSARTCLKFreq+0x1e0>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400778e:	4823      	ldr	r0, [pc, #140]	@ (3400781c <RCCEx_GetUSARTCLKFreq+0x208>)
34007790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34007792:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34007796:	e007      	b.n	340077a8 <RCCEx_GetUSARTCLKFreq+0x194>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007798:	f7fc fad2 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
3400779c:	f7fc fbd2 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
340077a0:	4b14      	ldr	r3, [pc, #80]	@ (340077f4 <RCCEx_GetUSARTCLKFreq+0x1e0>)
340077a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
340077a4:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340077a8:	40d8      	lsrs	r0, r3
340077aa:	e751      	b.n	34007650 <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340077ac:	f7fc fac8 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
340077b0:	f7fc fbc8 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340077b4:	4b0f      	ldr	r3, [pc, #60]	@ (340077f4 <RCCEx_GetUSARTCLKFreq+0x1e0>)
340077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340077b8:	f003 0307 	and.w	r3, r3, #7
340077bc:	e7f4      	b.n	340077a8 <RCCEx_GetUSARTCLKFreq+0x194>
340077be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340077c2:	f47f af44 	bne.w	3400764e <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340077c6:	f7ff fce3 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
340077ca:	e001      	b.n	340077d0 <RCCEx_GetUSARTCLKFreq+0x1bc>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340077cc:	f7ff fc20 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
340077d0:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340077d4:	e73c      	b.n	34007650 <RCCEx_GetUSARTCLKFreq+0x3c>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340077d6:	f7ff fc9b 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
340077da:	e7f9      	b.n	340077d0 <RCCEx_GetUSARTCLKFreq+0x1bc>
340077dc:	07021430 	.word	0x07021430
340077e0:	07000830 	.word	0x07000830
340077e4:	07011430 	.word	0x07011430
340077e8:	07010830 	.word	0x07010830
340077ec:	07020434 	.word	0x07020434
340077f0:	07020830 	.word	0x07020830
340077f4:	56028000 	.word	0x56028000
340077f8:	07050030 	.word	0x07050030
340077fc:	07030830 	.word	0x07030830
34007800:	07040830 	.word	0x07040830
34007804:	07041430 	.word	0x07041430
34007808:	07060030 	.word	0x07060030
3400780c:	07051430 	.word	0x07051430
34007810:	003d0900 	.word	0x003d0900
34007814:	07060830 	.word	0x07060830
34007818:	07061430 	.word	0x07061430
3400781c:	03d09000 	.word	0x03d09000

34007820 <RCCEx_GetUARTCLKFreq>:
{
34007820:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34007822:	f7fc fb27 	bl	34003e74 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34007826:	4b79      	ldr	r3, [pc, #484]	@ (34007a0c <RCCEx_GetUARTCLKFreq+0x1ec>)
34007828:	4298      	cmp	r0, r3
3400782a:	d03e      	beq.n	340078aa <RCCEx_GetUARTCLKFreq+0x8a>
3400782c:	d85a      	bhi.n	340078e4 <RCCEx_GetUARTCLKFreq+0xc4>
3400782e:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34007832:	4298      	cmp	r0, r3
34007834:	f000 80c7 	beq.w	340079c6 <RCCEx_GetUARTCLKFreq+0x1a6>
34007838:	d814      	bhi.n	34007864 <RCCEx_GetUARTCLKFreq+0x44>
3400783a:	4b75      	ldr	r3, [pc, #468]	@ (34007a10 <RCCEx_GetUARTCLKFreq+0x1f0>)
3400783c:	4298      	cmp	r0, r3
3400783e:	f000 80cc 	beq.w	340079da <RCCEx_GetUARTCLKFreq+0x1ba>
34007842:	3b01      	subs	r3, #1
34007844:	4298      	cmp	r0, r3
34007846:	d90b      	bls.n	34007860 <RCCEx_GetUARTCLKFreq+0x40>
34007848:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
3400784c:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
34007850:	429a      	cmp	r2, r3
34007852:	f000 80b8 	beq.w	340079c6 <RCCEx_GetUARTCLKFreq+0x1a6>
34007856:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
3400785a:	4298      	cmp	r0, r3
3400785c:	f000 80b3 	beq.w	340079c6 <RCCEx_GetUARTCLKFreq+0x1a6>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34007860:	2000      	movs	r0, #0
}
34007862:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34007864:	4b6b      	ldr	r3, [pc, #428]	@ (34007a14 <RCCEx_GetUARTCLKFreq+0x1f4>)
34007866:	4298      	cmp	r0, r3
34007868:	d00d      	beq.n	34007886 <RCCEx_GetUARTCLKFreq+0x66>
3400786a:	d812      	bhi.n	34007892 <RCCEx_GetUARTCLKFreq+0x72>
3400786c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34007870:	4298      	cmp	r0, r3
34007872:	d008      	beq.n	34007886 <RCCEx_GetUARTCLKFreq+0x66>
34007874:	d80b      	bhi.n	3400788e <RCCEx_GetUARTCLKFreq+0x6e>
34007876:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
3400787a:	4298      	cmp	r0, r3
3400787c:	d003      	beq.n	34007886 <RCCEx_GetUARTCLKFreq+0x66>
3400787e:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34007882:	4298      	cmp	r0, r3
34007884:	d1ec      	bne.n	34007860 <RCCEx_GetUARTCLKFreq+0x40>
}
34007886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400788a:	f7ff bcc1 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3400788e:	4b62      	ldr	r3, [pc, #392]	@ (34007a18 <RCCEx_GetUARTCLKFreq+0x1f8>)
34007890:	e7f7      	b.n	34007882 <RCCEx_GetUARTCLKFreq+0x62>
34007892:	4b62      	ldr	r3, [pc, #392]	@ (34007a1c <RCCEx_GetUARTCLKFreq+0x1fc>)
34007894:	4298      	cmp	r0, r3
34007896:	d008      	beq.n	340078aa <RCCEx_GetUARTCLKFreq+0x8a>
34007898:	d822      	bhi.n	340078e0 <RCCEx_GetUARTCLKFreq+0xc0>
3400789a:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
3400789e:	4298      	cmp	r0, r3
340078a0:	d003      	beq.n	340078aa <RCCEx_GetUARTCLKFreq+0x8a>
340078a2:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
340078a6:	4298      	cmp	r0, r3
340078a8:	d1da      	bne.n	34007860 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
340078aa:	f7fc fb15 	bl	34003ed8 <LL_RCC_IC9_IsEnabled>
340078ae:	2800      	cmp	r0, #0
340078b0:	d0d6      	beq.n	34007860 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
340078b2:	f7fc fb19 	bl	34003ee8 <LL_RCC_IC9_GetDivider>
340078b6:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
340078b8:	4b59      	ldr	r3, [pc, #356]	@ (34007a20 <RCCEx_GetUARTCLKFreq+0x200>)
340078ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
340078be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
340078c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340078c6:	f000 809d 	beq.w	34007a04 <RCCEx_GetUARTCLKFreq+0x1e4>
340078ca:	f200 808f 	bhi.w	340079ec <RCCEx_GetUARTCLKFreq+0x1cc>
340078ce:	2b00      	cmp	r3, #0
340078d0:	f000 8093 	beq.w	340079fa <RCCEx_GetUARTCLKFreq+0x1da>
340078d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340078d8:	d1c2      	bne.n	34007860 <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340078da:	f7ff fbd9 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
340078de:	e08e      	b.n	340079fe <RCCEx_GetUARTCLKFreq+0x1de>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
340078e0:	4b50      	ldr	r3, [pc, #320]	@ (34007a24 <RCCEx_GetUARTCLKFreq+0x204>)
340078e2:	e7e0      	b.n	340078a6 <RCCEx_GetUARTCLKFreq+0x86>
340078e4:	4b50      	ldr	r3, [pc, #320]	@ (34007a28 <RCCEx_GetUARTCLKFreq+0x208>)
340078e6:	4298      	cmp	r0, r3
340078e8:	d04a      	beq.n	34007980 <RCCEx_GetUARTCLKFreq+0x160>
340078ea:	d836      	bhi.n	3400795a <RCCEx_GetUARTCLKFreq+0x13a>
340078ec:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340078f0:	4298      	cmp	r0, r3
340078f2:	d029      	beq.n	34007948 <RCCEx_GetUARTCLKFreq+0x128>
340078f4:	d81c      	bhi.n	34007930 <RCCEx_GetUARTCLKFreq+0x110>
340078f6:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
340078fa:	3b04      	subs	r3, #4
340078fc:	4298      	cmp	r0, r3
340078fe:	d008      	beq.n	34007912 <RCCEx_GetUARTCLKFreq+0xf2>
34007900:	d812      	bhi.n	34007928 <RCCEx_GetUARTCLKFreq+0x108>
34007902:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34007906:	4298      	cmp	r0, r3
34007908:	d003      	beq.n	34007912 <RCCEx_GetUARTCLKFreq+0xf2>
3400790a:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
3400790e:	4298      	cmp	r0, r3
34007910:	d1a6      	bne.n	34007860 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34007912:	f7fc faf3 	bl	34003efc <LL_RCC_IC14_IsEnabled>
34007916:	2800      	cmp	r0, #0
34007918:	d0a2      	beq.n	34007860 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
3400791a:	f7fc faf7 	bl	34003f0c <LL_RCC_IC14_GetDivider>
3400791e:	4b40      	ldr	r3, [pc, #256]	@ (34007a20 <RCCEx_GetUARTCLKFreq+0x200>)
34007920:	4604      	mov	r4, r0
34007922:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34007926:	e7ca      	b.n	340078be <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34007928:	4b40      	ldr	r3, [pc, #256]	@ (34007a2c <RCCEx_GetUARTCLKFreq+0x20c>)
3400792a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3400792e:	e7ee      	b.n	3400790e <RCCEx_GetUARTCLKFreq+0xee>
34007930:	4b3f      	ldr	r3, [pc, #252]	@ (34007a30 <RCCEx_GetUARTCLKFreq+0x210>)
34007932:	4298      	cmp	r0, r3
34007934:	d008      	beq.n	34007948 <RCCEx_GetUARTCLKFreq+0x128>
34007936:	d80e      	bhi.n	34007956 <RCCEx_GetUARTCLKFreq+0x136>
34007938:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3400793c:	4298      	cmp	r0, r3
3400793e:	d003      	beq.n	34007948 <RCCEx_GetUARTCLKFreq+0x128>
34007940:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007944:	4298      	cmp	r0, r3
34007946:	d18b      	bne.n	34007860 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
34007948:	f7fc fa7a 	bl	34003e40 <LL_RCC_LSE_IsReady>
3400794c:	3800      	subs	r0, #0
3400794e:	bf18      	it	ne
34007950:	2001      	movne	r0, #1
34007952:	03c0      	lsls	r0, r0, #15
34007954:	e785      	b.n	34007862 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34007956:	4b37      	ldr	r3, [pc, #220]	@ (34007a34 <RCCEx_GetUARTCLKFreq+0x214>)
34007958:	e7f4      	b.n	34007944 <RCCEx_GetUARTCLKFreq+0x124>
3400795a:	4b37      	ldr	r3, [pc, #220]	@ (34007a38 <RCCEx_GetUARTCLKFreq+0x218>)
3400795c:	4298      	cmp	r0, r3
3400795e:	d025      	beq.n	340079ac <RCCEx_GetUARTCLKFreq+0x18c>
34007960:	d817      	bhi.n	34007992 <RCCEx_GetUARTCLKFreq+0x172>
34007962:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
34007966:	3b04      	subs	r3, #4
34007968:	4298      	cmp	r0, r3
3400796a:	d009      	beq.n	34007980 <RCCEx_GetUARTCLKFreq+0x160>
3400796c:	d80f      	bhi.n	3400798e <RCCEx_GetUARTCLKFreq+0x16e>
3400796e:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34007972:	4298      	cmp	r0, r3
34007974:	d004      	beq.n	34007980 <RCCEx_GetUARTCLKFreq+0x160>
34007976:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400797a:	4298      	cmp	r0, r3
3400797c:	f47f af70 	bne.w	34007860 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
34007980:	f7fc fa56 	bl	34003e30 <LL_RCC_MSI_IsReady>
34007984:	2800      	cmp	r0, #0
34007986:	f43f af6b 	beq.w	34007860 <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
3400798a:	482c      	ldr	r0, [pc, #176]	@ (34007a3c <RCCEx_GetUARTCLKFreq+0x21c>)
  return uart_frequency;
3400798c:	e769      	b.n	34007862 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3400798e:	4b2c      	ldr	r3, [pc, #176]	@ (34007a40 <RCCEx_GetUARTCLKFreq+0x220>)
34007990:	e7f3      	b.n	3400797a <RCCEx_GetUARTCLKFreq+0x15a>
34007992:	4b2c      	ldr	r3, [pc, #176]	@ (34007a44 <RCCEx_GetUARTCLKFreq+0x224>)
34007994:	4298      	cmp	r0, r3
34007996:	d009      	beq.n	340079ac <RCCEx_GetUARTCLKFreq+0x18c>
34007998:	d813      	bhi.n	340079c2 <RCCEx_GetUARTCLKFreq+0x1a2>
3400799a:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3400799e:	4298      	cmp	r0, r3
340079a0:	d004      	beq.n	340079ac <RCCEx_GetUARTCLKFreq+0x18c>
340079a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340079a6:	4298      	cmp	r0, r3
340079a8:	f47f af5a 	bne.w	34007860 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
340079ac:	f7fc fa38 	bl	34003e20 <LL_RCC_HSI_IsReady>
340079b0:	2800      	cmp	r0, #0
340079b2:	f43f af55 	beq.w	34007860 <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340079b6:	4b1a      	ldr	r3, [pc, #104]	@ (34007a20 <RCCEx_GetUARTCLKFreq+0x200>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340079b8:	4823      	ldr	r0, [pc, #140]	@ (34007a48 <RCCEx_GetUARTCLKFreq+0x228>)
340079ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340079bc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340079c0:	e009      	b.n	340079d6 <RCCEx_GetUARTCLKFreq+0x1b6>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
340079c2:	4b22      	ldr	r3, [pc, #136]	@ (34007a4c <RCCEx_GetUARTCLKFreq+0x22c>)
340079c4:	e7ef      	b.n	340079a6 <RCCEx_GetUARTCLKFreq+0x186>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340079c6:	f7fc f9bb 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
340079ca:	f7fc fabb 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340079ce:	4b14      	ldr	r3, [pc, #80]	@ (34007a20 <RCCEx_GetUARTCLKFreq+0x200>)
340079d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340079d2:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340079d6:	40d8      	lsrs	r0, r3
340079d8:	e743      	b.n	34007862 <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340079da:	f7fc f9b1 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
340079de:	f7fc fab1 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
340079e2:	4b0f      	ldr	r3, [pc, #60]	@ (34007a20 <RCCEx_GetUARTCLKFreq+0x200>)
340079e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
340079e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
340079ea:	e7f4      	b.n	340079d6 <RCCEx_GetUARTCLKFreq+0x1b6>
340079ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340079f0:	f47f af36 	bne.w	34007860 <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340079f4:	f7ff fbcc 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
340079f8:	e001      	b.n	340079fe <RCCEx_GetUARTCLKFreq+0x1de>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340079fa:	f7ff fb09 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
340079fe:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34007a02:	e72e      	b.n	34007862 <RCCEx_GetUARTCLKFreq+0x42>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007a04:	f7ff fb84 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
34007a08:	e7f9      	b.n	340079fe <RCCEx_GetUARTCLKFreq+0x1de>
34007a0a:	bf00      	nop
34007a0c:	07021c30 	.word	0x07021c30
34007a10:	07000034 	.word	0x07000034
34007a14:	07011c30 	.word	0x07011c30
34007a18:	07011830 	.word	0x07011830
34007a1c:	07021030 	.word	0x07021030
34007a20:	56028000 	.word	0x56028000
34007a24:	07021830 	.word	0x07021830
34007a28:	07050034 	.word	0x07050034
34007a2c:	07031830 	.word	0x07031830
34007a30:	07041830 	.word	0x07041830
34007a34:	07041c30 	.word	0x07041c30
34007a38:	07060034 	.word	0x07060034
34007a3c:	003d0900 	.word	0x003d0900
34007a40:	07051c30 	.word	0x07051c30
34007a44:	07061830 	.word	0x07061830
34007a48:	03d09000 	.word	0x03d09000
34007a4c:	07061c30 	.word	0x07061c30

34007a50 <RCCEx_GetSPICLKFreq>:
{
34007a50:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34007a52:	f7fc fa0f 	bl	34003e74 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34007a56:	4b8b      	ldr	r3, [pc, #556]	@ (34007c84 <RCCEx_GetSPICLKFreq+0x234>)
34007a58:	4298      	cmp	r0, r3
34007a5a:	d055      	beq.n	34007b08 <RCCEx_GetSPICLKFreq+0xb8>
34007a5c:	d865      	bhi.n	34007b2a <RCCEx_GetSPICLKFreq+0xda>
34007a5e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
34007a62:	4298      	cmp	r0, r3
34007a64:	f000 80ca 	beq.w	34007bfc <RCCEx_GetSPICLKFreq+0x1ac>
34007a68:	d81e      	bhi.n	34007aa8 <RCCEx_GetSPICLKFreq+0x58>
34007a6a:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34007a6e:	4298      	cmp	r0, r3
34007a70:	f000 80ba 	beq.w	34007be8 <RCCEx_GetSPICLKFreq+0x198>
34007a74:	d80a      	bhi.n	34007a8c <RCCEx_GetSPICLKFreq+0x3c>
34007a76:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34007a7a:	4298      	cmp	r0, r3
34007a7c:	d00b      	beq.n	34007a96 <RCCEx_GetSPICLKFreq+0x46>
34007a7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007a82:	4298      	cmp	r0, r3
34007a84:	f000 80b0 	beq.w	34007be8 <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34007a88:	2000      	movs	r0, #0
}
34007a8a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34007a8c:	4b7e      	ldr	r3, [pc, #504]	@ (34007c88 <RCCEx_GetSPICLKFreq+0x238>)
34007a8e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34007a92:	4298      	cmp	r0, r3
34007a94:	d1f8      	bne.n	34007a88 <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007a96:	f7fc f953 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
34007a9a:	f7fc fa53 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34007a9e:	4b7b      	ldr	r3, [pc, #492]	@ (34007c8c <RCCEx_GetSPICLKFreq+0x23c>)
34007aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34007aa2:	f3c3 1302 	ubfx	r3, r3, #4, #3
34007aa6:	e0a7      	b.n	34007bf8 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34007aa8:	4b79      	ldr	r3, [pc, #484]	@ (34007c90 <RCCEx_GetSPICLKFreq+0x240>)
34007aaa:	4298      	cmp	r0, r3
34007aac:	f000 80af 	beq.w	34007c0e <RCCEx_GetSPICLKFreq+0x1be>
34007ab0:	d81d      	bhi.n	34007aee <RCCEx_GetSPICLKFreq+0x9e>
34007ab2:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34007ab6:	4298      	cmp	r0, r3
34007ab8:	d00a      	beq.n	34007ad0 <RCCEx_GetSPICLKFreq+0x80>
34007aba:	d80d      	bhi.n	34007ad8 <RCCEx_GetSPICLKFreq+0x88>
34007abc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34007ac0:	4298      	cmp	r0, r3
34007ac2:	d005      	beq.n	34007ad0 <RCCEx_GetSPICLKFreq+0x80>
34007ac4:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34007ac8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34007acc:	4298      	cmp	r0, r3
34007ace:	d1db      	bne.n	34007a88 <RCCEx_GetSPICLKFreq+0x38>
}
34007ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007ad4:	f7ff bb9c 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34007ad8:	4b6e      	ldr	r3, [pc, #440]	@ (34007c94 <RCCEx_GetSPICLKFreq+0x244>)
34007ada:	4298      	cmp	r0, r3
34007adc:	d0f8      	beq.n	34007ad0 <RCCEx_GetSPICLKFreq+0x80>
34007ade:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34007ae2:	4298      	cmp	r0, r3
34007ae4:	f000 8093 	beq.w	34007c0e <RCCEx_GetSPICLKFreq+0x1be>
34007ae8:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34007aec:	e7ee      	b.n	34007acc <RCCEx_GetSPICLKFreq+0x7c>
34007aee:	4b6a      	ldr	r3, [pc, #424]	@ (34007c98 <RCCEx_GetSPICLKFreq+0x248>)
34007af0:	4298      	cmp	r0, r3
34007af2:	d009      	beq.n	34007b08 <RCCEx_GetSPICLKFreq+0xb8>
34007af4:	d813      	bhi.n	34007b1e <RCCEx_GetSPICLKFreq+0xce>
34007af6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34007afa:	4298      	cmp	r0, r3
34007afc:	f000 8087 	beq.w	34007c0e <RCCEx_GetSPICLKFreq+0x1be>
34007b00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007b04:	4298      	cmp	r0, r3
34007b06:	d1bf      	bne.n	34007a88 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34007b08:	f7fc f9e6 	bl	34003ed8 <LL_RCC_IC9_IsEnabled>
34007b0c:	2800      	cmp	r0, #0
34007b0e:	d0bb      	beq.n	34007a88 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
34007b10:	f7fc f9ea 	bl	34003ee8 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34007b14:	4b5d      	ldr	r3, [pc, #372]	@ (34007c8c <RCCEx_GetSPICLKFreq+0x23c>)
34007b16:	4604      	mov	r4, r0
34007b18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34007b1c:	e082      	b.n	34007c24 <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34007b1e:	4b5f      	ldr	r3, [pc, #380]	@ (34007c9c <RCCEx_GetSPICLKFreq+0x24c>)
34007b20:	4298      	cmp	r0, r3
34007b22:	d074      	beq.n	34007c0e <RCCEx_GetSPICLKFreq+0x1be>
34007b24:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34007b28:	e7ec      	b.n	34007b04 <RCCEx_GetSPICLKFreq+0xb4>
34007b2a:	4b5d      	ldr	r3, [pc, #372]	@ (34007ca0 <RCCEx_GetSPICLKFreq+0x250>)
34007b2c:	4298      	cmp	r0, r3
34007b2e:	d043      	beq.n	34007bb8 <RCCEx_GetSPICLKFreq+0x168>
34007b30:	d830      	bhi.n	34007b94 <RCCEx_GetSPICLKFreq+0x144>
34007b32:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
34007b36:	4298      	cmp	r0, r3
34007b38:	d0e6      	beq.n	34007b08 <RCCEx_GetSPICLKFreq+0xb8>
34007b3a:	d808      	bhi.n	34007b4e <RCCEx_GetSPICLKFreq+0xfe>
34007b3c:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34007b40:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34007b44:	429a      	cmp	r2, r3
34007b46:	d07b      	beq.n	34007c40 <RCCEx_GetSPICLKFreq+0x1f0>
34007b48:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34007b4c:	e7da      	b.n	34007b04 <RCCEx_GetSPICLKFreq+0xb4>
34007b4e:	4b55      	ldr	r3, [pc, #340]	@ (34007ca4 <RCCEx_GetSPICLKFreq+0x254>)
34007b50:	4298      	cmp	r0, r3
34007b52:	d00d      	beq.n	34007b70 <RCCEx_GetSPICLKFreq+0x120>
34007b54:	d814      	bhi.n	34007b80 <RCCEx_GetSPICLKFreq+0x130>
34007b56:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34007b5a:	4298      	cmp	r0, r3
34007b5c:	d008      	beq.n	34007b70 <RCCEx_GetSPICLKFreq+0x120>
34007b5e:	d80d      	bhi.n	34007b7c <RCCEx_GetSPICLKFreq+0x12c>
34007b60:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34007b64:	4298      	cmp	r0, r3
34007b66:	d003      	beq.n	34007b70 <RCCEx_GetSPICLKFreq+0x120>
34007b68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007b6c:	4298      	cmp	r0, r3
34007b6e:	d18b      	bne.n	34007a88 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
34007b70:	f7fc f95e 	bl	34003e30 <LL_RCC_MSI_IsReady>
34007b74:	2800      	cmp	r0, #0
34007b76:	d087      	beq.n	34007a88 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
34007b78:	484b      	ldr	r0, [pc, #300]	@ (34007ca8 <RCCEx_GetSPICLKFreq+0x258>)
  return spi_frequency;
34007b7a:	e786      	b.n	34007a8a <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34007b7c:	4b4b      	ldr	r3, [pc, #300]	@ (34007cac <RCCEx_GetSPICLKFreq+0x25c>)
34007b7e:	e7f5      	b.n	34007b6c <RCCEx_GetSPICLKFreq+0x11c>
34007b80:	4b4b      	ldr	r3, [pc, #300]	@ (34007cb0 <RCCEx_GetSPICLKFreq+0x260>)
34007b82:	4298      	cmp	r0, r3
34007b84:	d018      	beq.n	34007bb8 <RCCEx_GetSPICLKFreq+0x168>
34007b86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007b8a:	4298      	cmp	r0, r3
34007b8c:	d014      	beq.n	34007bb8 <RCCEx_GetSPICLKFreq+0x168>
34007b8e:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34007b92:	e7eb      	b.n	34007b6c <RCCEx_GetSPICLKFreq+0x11c>
34007b94:	4b47      	ldr	r3, [pc, #284]	@ (34007cb4 <RCCEx_GetSPICLKFreq+0x264>)
34007b96:	4298      	cmp	r0, r3
34007b98:	d06d      	beq.n	34007c76 <RCCEx_GetSPICLKFreq+0x226>
34007b9a:	d81e      	bhi.n	34007bda <RCCEx_GetSPICLKFreq+0x18a>
34007b9c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34007ba0:	4298      	cmp	r0, r3
34007ba2:	d018      	beq.n	34007bd6 <RCCEx_GetSPICLKFreq+0x186>
34007ba4:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34007ba8:	d811      	bhi.n	34007bce <RCCEx_GetSPICLKFreq+0x17e>
34007baa:	4a43      	ldr	r2, [pc, #268]	@ (34007cb8 <RCCEx_GetSPICLKFreq+0x268>)
34007bac:	4293      	cmp	r3, r2
34007bae:	d003      	beq.n	34007bb8 <RCCEx_GetSPICLKFreq+0x168>
34007bb0:	4b42      	ldr	r3, [pc, #264]	@ (34007cbc <RCCEx_GetSPICLKFreq+0x26c>)
34007bb2:	4298      	cmp	r0, r3
34007bb4:	f47f af68 	bne.w	34007a88 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
34007bb8:	f7fc f932 	bl	34003e20 <LL_RCC_HSI_IsReady>
34007bbc:	2800      	cmp	r0, #0
34007bbe:	f43f af63 	beq.w	34007a88 <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34007bc2:	4b32      	ldr	r3, [pc, #200]	@ (34007c8c <RCCEx_GetSPICLKFreq+0x23c>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007bc4:	483e      	ldr	r0, [pc, #248]	@ (34007cc0 <RCCEx_GetSPICLKFreq+0x270>)
34007bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34007bc8:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34007bcc:	e014      	b.n	34007bf8 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34007bce:	4a3d      	ldr	r2, [pc, #244]	@ (34007cc4 <RCCEx_GetSPICLKFreq+0x274>)
34007bd0:	4293      	cmp	r3, r2
34007bd2:	f47f af59 	bne.w	34007a88 <RCCEx_GetSPICLKFreq+0x38>
34007bd6:	483c      	ldr	r0, [pc, #240]	@ (34007cc8 <RCCEx_GetSPICLKFreq+0x278>)
34007bd8:	e757      	b.n	34007a8a <RCCEx_GetSPICLKFreq+0x3a>
34007bda:	4b3c      	ldr	r3, [pc, #240]	@ (34007ccc <RCCEx_GetSPICLKFreq+0x27c>)
34007bdc:	4298      	cmp	r0, r3
34007bde:	d04a      	beq.n	34007c76 <RCCEx_GetSPICLKFreq+0x226>
34007be0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007be4:	4298      	cmp	r0, r3
34007be6:	e7f4      	b.n	34007bd2 <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007be8:	f7fc f8aa 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
34007bec:	f7fc f9aa 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34007bf0:	4b26      	ldr	r3, [pc, #152]	@ (34007c8c <RCCEx_GetSPICLKFreq+0x23c>)
34007bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007bf4:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34007bf8:	40d8      	lsrs	r0, r3
      break;
34007bfa:	e746      	b.n	34007a8a <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007bfc:	f7fc f8a0 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
34007c00:	f7fc f9a0 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34007c04:	4b21      	ldr	r3, [pc, #132]	@ (34007c8c <RCCEx_GetSPICLKFreq+0x23c>)
34007c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34007c08:	f3c3 3302 	ubfx	r3, r3, #12, #3
34007c0c:	e7f4      	b.n	34007bf8 <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34007c0e:	f7fc f951 	bl	34003eb4 <LL_RCC_IC8_IsEnabled>
34007c12:	2800      	cmp	r0, #0
34007c14:	f43f af38 	beq.w	34007a88 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
34007c18:	f7fc f954 	bl	34003ec4 <LL_RCC_IC8_GetDivider>
34007c1c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34007c1e:	4b1b      	ldr	r3, [pc, #108]	@ (34007c8c <RCCEx_GetSPICLKFreq+0x23c>)
34007c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34007c24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34007c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007c2c:	d020      	beq.n	34007c70 <RCCEx_GetSPICLKFreq+0x220>
34007c2e:	d813      	bhi.n	34007c58 <RCCEx_GetSPICLKFreq+0x208>
34007c30:	b1cb      	cbz	r3, 34007c66 <RCCEx_GetSPICLKFreq+0x216>
34007c32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007c36:	f47f af27 	bne.w	34007a88 <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007c3a:	f7ff fa29 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
34007c3e:	e014      	b.n	34007c6a <RCCEx_GetSPICLKFreq+0x21a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34007c40:	f7fc f95c 	bl	34003efc <LL_RCC_IC14_IsEnabled>
34007c44:	2800      	cmp	r0, #0
34007c46:	f43f af1f 	beq.w	34007a88 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
34007c4a:	f7fc f95f 	bl	34003f0c <LL_RCC_IC14_GetDivider>
34007c4e:	4b0f      	ldr	r3, [pc, #60]	@ (34007c8c <RCCEx_GetSPICLKFreq+0x23c>)
34007c50:	4604      	mov	r4, r0
34007c52:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34007c56:	e7e5      	b.n	34007c24 <RCCEx_GetSPICLKFreq+0x1d4>
34007c58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007c5c:	f47f af14 	bne.w	34007a88 <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007c60:	f7ff fa96 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34007c64:	e001      	b.n	34007c6a <RCCEx_GetSPICLKFreq+0x21a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007c66:	f7ff f9d3 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
34007c6a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34007c6e:	e70c      	b.n	34007a8a <RCCEx_GetSPICLKFreq+0x3a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007c70:	f7ff fa4e 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
34007c74:	e7f9      	b.n	34007c6a <RCCEx_GetSPICLKFreq+0x21a>
      if (LL_RCC_HSE_IsReady() != 0U)
34007c76:	f7fc f8cb 	bl	34003e10 <LL_RCC_HSE_IsReady>
34007c7a:	2800      	cmp	r0, #0
34007c7c:	f43f af04 	beq.w	34007a88 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
34007c80:	4813      	ldr	r0, [pc, #76]	@ (34007cd0 <RCCEx_GetSPICLKFreq+0x280>)
34007c82:	e702      	b.n	34007a8a <RCCEx_GetSPICLKFreq+0x3a>
34007c84:	07030820 	.word	0x07030820
34007c88:	07001020 	.word	0x07001020
34007c8c:	56028000 	.word	0x56028000
34007c90:	07020820 	.word	0x07020820
34007c94:	07011820 	.word	0x07011820
34007c98:	07021420 	.word	0x07021420
34007c9c:	07021820 	.word	0x07021820
34007ca0:	07050c20 	.word	0x07050c20
34007ca4:	07041420 	.word	0x07041420
34007ca8:	003d0900 	.word	0x003d0900
34007cac:	07041020 	.word	0x07041020
34007cb0:	07050420 	.word	0x07050420
34007cb4:	07061020 	.word	0x07061020
34007cb8:	07051020 	.word	0x07051020
34007cbc:	07051820 	.word	0x07051820
34007cc0:	03d09000 	.word	0x03d09000
34007cc4:	07060820 	.word	0x07060820
34007cc8:	00bb8000 	.word	0x00bb8000
34007ccc:	07061420 	.word	0x07061420
34007cd0:	02dc6c00 	.word	0x02dc6c00

34007cd4 <RCCEx_GetSAICLKFreq>:
{
34007cd4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34007cd6:	f7fc f8cd 	bl	34003e74 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34007cda:	4b4b      	ldr	r3, [pc, #300]	@ (34007e08 <RCCEx_GetSAICLKFreq+0x134>)
34007cdc:	4298      	cmp	r0, r3
34007cde:	d050      	beq.n	34007d82 <RCCEx_GetSAICLKFreq+0xae>
34007ce0:	d83f      	bhi.n	34007d62 <RCCEx_GetSAICLKFreq+0x8e>
34007ce2:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34007ce6:	4298      	cmp	r0, r3
34007ce8:	d021      	beq.n	34007d2e <RCCEx_GetSAICLKFreq+0x5a>
34007cea:	d815      	bhi.n	34007d18 <RCCEx_GetSAICLKFreq+0x44>
34007cec:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007cf0:	4298      	cmp	r0, r3
34007cf2:	d00d      	beq.n	34007d10 <RCCEx_GetSAICLKFreq+0x3c>
34007cf4:	d809      	bhi.n	34007d0a <RCCEx_GetSAICLKFreq+0x36>
34007cf6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007cfa:	4298      	cmp	r0, r3
34007cfc:	d054      	beq.n	34007da8 <RCCEx_GetSAICLKFreq+0xd4>
34007cfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007d02:	4298      	cmp	r0, r3
34007d04:	d050      	beq.n	34007da8 <RCCEx_GetSAICLKFreq+0xd4>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34007d06:	2000      	movs	r0, #0
}
34007d08:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34007d0a:	4b40      	ldr	r3, [pc, #256]	@ (34007e0c <RCCEx_GetSAICLKFreq+0x138>)
34007d0c:	4298      	cmp	r0, r3
34007d0e:	d1fa      	bne.n	34007d06 <RCCEx_GetSAICLKFreq+0x32>
}
34007d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007d14:	f7ff ba7c 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34007d18:	4b3d      	ldr	r3, [pc, #244]	@ (34007e10 <RCCEx_GetSAICLKFreq+0x13c>)
34007d1a:	4298      	cmp	r0, r3
34007d1c:	d04e      	beq.n	34007dbc <RCCEx_GetSAICLKFreq+0xe8>
34007d1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007d22:	4298      	cmp	r0, r3
34007d24:	d04a      	beq.n	34007dbc <RCCEx_GetSAICLKFreq+0xe8>
34007d26:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007d2a:	4298      	cmp	r0, r3
34007d2c:	d1eb      	bne.n	34007d06 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34007d2e:	f7fc f8af 	bl	34003e90 <LL_RCC_IC7_IsEnabled>
34007d32:	2800      	cmp	r0, #0
34007d34:	d0e7      	beq.n	34007d06 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
34007d36:	f7fc f8b3 	bl	34003ea0 <LL_RCC_IC7_GetDivider>
34007d3a:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34007d3c:	4b35      	ldr	r3, [pc, #212]	@ (34007e14 <RCCEx_GetSAICLKFreq+0x140>)
34007d3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34007d42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34007d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007d4a:	d04b      	beq.n	34007de4 <RCCEx_GetSAICLKFreq+0x110>
34007d4c:	d841      	bhi.n	34007dd2 <RCCEx_GetSAICLKFreq+0xfe>
34007d4e:	2b00      	cmp	r3, #0
34007d50:	d045      	beq.n	34007dde <RCCEx_GetSAICLKFreq+0x10a>
34007d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007d56:	d1d6      	bne.n	34007d06 <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007d58:	f7ff f99a 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
34007d5c:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34007d60:	e7d2      	b.n	34007d08 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34007d62:	4b2d      	ldr	r3, [pc, #180]	@ (34007e18 <RCCEx_GetSAICLKFreq+0x144>)
34007d64:	4298      	cmp	r0, r3
34007d66:	d01d      	beq.n	34007da4 <RCCEx_GetSAICLKFreq+0xd0>
34007d68:	d811      	bhi.n	34007d8e <RCCEx_GetSAICLKFreq+0xba>
34007d6a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007d6e:	4298      	cmp	r0, r3
34007d70:	d03b      	beq.n	34007dea <RCCEx_GetSAICLKFreq+0x116>
34007d72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007d76:	4298      	cmp	r0, r3
34007d78:	d037      	beq.n	34007dea <RCCEx_GetSAICLKFreq+0x116>
34007d7a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007d7e:	4298      	cmp	r0, r3
34007d80:	d1c1      	bne.n	34007d06 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
34007d82:	f7fc f855 	bl	34003e30 <LL_RCC_MSI_IsReady>
34007d86:	2800      	cmp	r0, #0
34007d88:	d0bd      	beq.n	34007d06 <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
34007d8a:	4824      	ldr	r0, [pc, #144]	@ (34007e1c <RCCEx_GetSAICLKFreq+0x148>)
  return sai_frequency;
34007d8c:	e7bc      	b.n	34007d08 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34007d8e:	4b24      	ldr	r3, [pc, #144]	@ (34007e20 <RCCEx_GetSAICLKFreq+0x14c>)
34007d90:	4298      	cmp	r0, r3
34007d92:	d034      	beq.n	34007dfe <RCCEx_GetSAICLKFreq+0x12a>
34007d94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34007d98:	4298      	cmp	r0, r3
34007d9a:	d030      	beq.n	34007dfe <RCCEx_GetSAICLKFreq+0x12a>
34007d9c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007da0:	4298      	cmp	r0, r3
34007da2:	d1b0      	bne.n	34007d06 <RCCEx_GetSAICLKFreq+0x32>
34007da4:	481f      	ldr	r0, [pc, #124]	@ (34007e24 <RCCEx_GetSAICLKFreq+0x150>)
34007da6:	e7af      	b.n	34007d08 <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007da8:	f7fb ffca 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
34007dac:	f7fc f8ca 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34007db0:	4b18      	ldr	r3, [pc, #96]	@ (34007e14 <RCCEx_GetSAICLKFreq+0x140>)
34007db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34007db4:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007db8:	40d8      	lsrs	r0, r3
34007dba:	e7a5      	b.n	34007d08 <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34007dbc:	f7fc f87a 	bl	34003eb4 <LL_RCC_IC8_IsEnabled>
34007dc0:	2800      	cmp	r0, #0
34007dc2:	d0a0      	beq.n	34007d06 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
34007dc4:	f7fc f87e 	bl	34003ec4 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34007dc8:	4b12      	ldr	r3, [pc, #72]	@ (34007e14 <RCCEx_GetSAICLKFreq+0x140>)
34007dca:	4604      	mov	r4, r0
34007dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34007dd0:	e7b7      	b.n	34007d42 <RCCEx_GetSAICLKFreq+0x6e>
34007dd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007dd6:	d196      	bne.n	34007d06 <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007dd8:	f7ff f9da 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34007ddc:	e7be      	b.n	34007d5c <RCCEx_GetSAICLKFreq+0x88>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007dde:	f7ff f917 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
34007de2:	e7bb      	b.n	34007d5c <RCCEx_GetSAICLKFreq+0x88>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007de4:	f7ff f994 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
34007de8:	e7b8      	b.n	34007d5c <RCCEx_GetSAICLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34007dea:	f7fc f819 	bl	34003e20 <LL_RCC_HSI_IsReady>
34007dee:	2800      	cmp	r0, #0
34007df0:	d089      	beq.n	34007d06 <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34007df2:	4b08      	ldr	r3, [pc, #32]	@ (34007e14 <RCCEx_GetSAICLKFreq+0x140>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007df4:	480c      	ldr	r0, [pc, #48]	@ (34007e28 <RCCEx_GetSAICLKFreq+0x154>)
34007df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34007df8:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34007dfc:	e7dc      	b.n	34007db8 <RCCEx_GetSAICLKFreq+0xe4>
}
34007dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34007e02:	f7ff ba8b 	b.w	3400731c <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
34007e06:	bf00      	nop
34007e08:	07041418 	.word	0x07041418
34007e0c:	07011818 	.word	0x07011818
34007e10:	07031418 	.word	0x07031418
34007e14:	56028000 	.word	0x56028000
34007e18:	07061418 	.word	0x07061418
34007e1c:	003d0900 	.word	0x003d0900
34007e20:	07071418 	.word	0x07071418
34007e24:	00bb8000 	.word	0x00bb8000
34007e28:	03d09000 	.word	0x03d09000

34007e2c <RCCEx_GetI3CCLKFreq>:
{
34007e2c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34007e2e:	f7fc f821 	bl	34003e74 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34007e32:	4b3f      	ldr	r3, [pc, #252]	@ (34007f30 <RCCEx_GetI3CCLKFreq+0x104>)
34007e34:	4298      	cmp	r0, r3
34007e36:	d061      	beq.n	34007efc <RCCEx_GetI3CCLKFreq+0xd0>
34007e38:	d831      	bhi.n	34007e9e <RCCEx_GetI3CCLKFreq+0x72>
34007e3a:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
34007e3e:	4298      	cmp	r0, r3
34007e40:	d058      	beq.n	34007ef4 <RCCEx_GetI3CCLKFreq+0xc8>
34007e42:	d80d      	bhi.n	34007e60 <RCCEx_GetI3CCLKFreq+0x34>
34007e44:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007e48:	4298      	cmp	r0, r3
34007e4a:	d049      	beq.n	34007ee0 <RCCEx_GetI3CCLKFreq+0xb4>
34007e4c:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34007e50:	4298      	cmp	r0, r3
34007e52:	d04f      	beq.n	34007ef4 <RCCEx_GetI3CCLKFreq+0xc8>
34007e54:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007e58:	4298      	cmp	r0, r3
34007e5a:	d041      	beq.n	34007ee0 <RCCEx_GetI3CCLKFreq+0xb4>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34007e5c:	2000      	movs	r0, #0
}
34007e5e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34007e60:	4b34      	ldr	r3, [pc, #208]	@ (34007f34 <RCCEx_GetI3CCLKFreq+0x108>)
34007e62:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34007e66:	4298      	cmp	r0, r3
34007e68:	d1f8      	bne.n	34007e5c <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34007e6a:	4b33      	ldr	r3, [pc, #204]	@ (34007f38 <RCCEx_GetI3CCLKFreq+0x10c>)
34007e6c:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34007e70:	0592      	lsls	r2, r2, #22
34007e72:	d5f3      	bpl.n	34007e5c <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34007e74:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34007e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34007e7c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34007e80:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34007e82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34007e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007e8a:	d04d      	beq.n	34007f28 <RCCEx_GetI3CCLKFreq+0xfc>
34007e8c:	d841      	bhi.n	34007f12 <RCCEx_GetI3CCLKFreq+0xe6>
34007e8e:	2b00      	cmp	r3, #0
34007e90:	d045      	beq.n	34007f1e <RCCEx_GetI3CCLKFreq+0xf2>
34007e92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007e96:	d1e1      	bne.n	34007e5c <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007e98:	f7ff f8fa 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
34007e9c:	e041      	b.n	34007f22 <RCCEx_GetI3CCLKFreq+0xf6>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34007e9e:	4b27      	ldr	r3, [pc, #156]	@ (34007f3c <RCCEx_GetI3CCLKFreq+0x110>)
34007ea0:	4298      	cmp	r0, r3
34007ea2:	d008      	beq.n	34007eb6 <RCCEx_GetI3CCLKFreq+0x8a>
34007ea4:	d80d      	bhi.n	34007ec2 <RCCEx_GetI3CCLKFreq+0x96>
34007ea6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007eaa:	4298      	cmp	r0, r3
34007eac:	d026      	beq.n	34007efc <RCCEx_GetI3CCLKFreq+0xd0>
34007eae:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34007eb2:	4298      	cmp	r0, r3
34007eb4:	d1d2      	bne.n	34007e5c <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
34007eb6:	f7fb ffbb 	bl	34003e30 <LL_RCC_MSI_IsReady>
34007eba:	2800      	cmp	r0, #0
34007ebc:	d0ce      	beq.n	34007e5c <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
34007ebe:	4820      	ldr	r0, [pc, #128]	@ (34007f40 <RCCEx_GetI3CCLKFreq+0x114>)
  return i3c_frequency;
34007ec0:	e7cd      	b.n	34007e5e <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34007ec2:	4b20      	ldr	r3, [pc, #128]	@ (34007f44 <RCCEx_GetI3CCLKFreq+0x118>)
34007ec4:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34007ec8:	4298      	cmp	r0, r3
34007eca:	d1c7      	bne.n	34007e5c <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
34007ecc:	f7fb ffa8 	bl	34003e20 <LL_RCC_HSI_IsReady>
34007ed0:	2800      	cmp	r0, #0
34007ed2:	d0c3      	beq.n	34007e5c <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34007ed4:	4b18      	ldr	r3, [pc, #96]	@ (34007f38 <RCCEx_GetI3CCLKFreq+0x10c>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007ed6:	481c      	ldr	r0, [pc, #112]	@ (34007f48 <RCCEx_GetI3CCLKFreq+0x11c>)
34007ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34007eda:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34007ede:	e007      	b.n	34007ef0 <RCCEx_GetI3CCLKFreq+0xc4>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007ee0:	f7fb ff2e 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
34007ee4:	f7fc f82e 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34007ee8:	4b13      	ldr	r3, [pc, #76]	@ (34007f38 <RCCEx_GetI3CCLKFreq+0x10c>)
34007eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007eec:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007ef0:	40d8      	lsrs	r0, r3
34007ef2:	e7b4      	b.n	34007e5e <RCCEx_GetI3CCLKFreq+0x32>
}
34007ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007ef8:	f7ff b98a 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34007efc:	f7fc f810 	bl	34003f20 <LL_RCC_IC15_IsEnabled>
34007f00:	2800      	cmp	r0, #0
34007f02:	d0ab      	beq.n	34007e5c <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
34007f04:	f7fc f814 	bl	34003f30 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34007f08:	4b0b      	ldr	r3, [pc, #44]	@ (34007f38 <RCCEx_GetI3CCLKFreq+0x10c>)
34007f0a:	4604      	mov	r4, r0
34007f0c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34007f10:	e7b7      	b.n	34007e82 <RCCEx_GetI3CCLKFreq+0x56>
34007f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007f16:	d1a1      	bne.n	34007e5c <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007f18:	f7ff f93a 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34007f1c:	e001      	b.n	34007f22 <RCCEx_GetI3CCLKFreq+0xf6>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007f1e:	f7ff f877 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
34007f22:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34007f26:	e79a      	b.n	34007e5e <RCCEx_GetI3CCLKFreq+0x32>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007f28:	f7ff f8f2 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
34007f2c:	e7f9      	b.n	34007f22 <RCCEx_GetI3CCLKFreq+0xf6>
34007f2e:	bf00      	nop
34007f30:	0703100c 	.word	0x0703100c
34007f34:	0702100c 	.word	0x0702100c
34007f38:	56028000 	.word	0x56028000
34007f3c:	0704140c 	.word	0x0704140c
34007f40:	003d0900 	.word	0x003d0900
34007f44:	0705100c 	.word	0x0705100c
34007f48:	03d09000 	.word	0x03d09000

34007f4c <RCCEx_GetSDMMCCLKFreq>:
{
34007f4c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34007f4e:	f7fb ff91 	bl	34003e74 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34007f52:	4b2e      	ldr	r3, [pc, #184]	@ (3400800c <RCCEx_GetSDMMCCLKFreq+0xc0>)
34007f54:	4298      	cmp	r0, r3
34007f56:	d01d      	beq.n	34007f94 <RCCEx_GetSDMMCCLKFreq+0x48>
34007f58:	d813      	bhi.n	34007f82 <RCCEx_GetSDMMCCLKFreq+0x36>
34007f5a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007f5e:	4298      	cmp	r0, r3
34007f60:	d00b      	beq.n	34007f7a <RCCEx_GetSDMMCCLKFreq+0x2e>
34007f62:	d807      	bhi.n	34007f74 <RCCEx_GetSDMMCCLKFreq+0x28>
34007f64:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34007f68:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34007f6c:	4298      	cmp	r0, r3
34007f6e:	d02b      	beq.n	34007fc8 <RCCEx_GetSDMMCCLKFreq+0x7c>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34007f70:	2000      	movs	r0, #0
}
34007f72:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34007f74:	4b26      	ldr	r3, [pc, #152]	@ (34008010 <RCCEx_GetSDMMCCLKFreq+0xc4>)
34007f76:	4298      	cmp	r0, r3
34007f78:	d1fa      	bne.n	34007f70 <RCCEx_GetSDMMCCLKFreq+0x24>
}
34007f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007f7e:	f7ff b947 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34007f82:	4b24      	ldr	r3, [pc, #144]	@ (34008014 <RCCEx_GetSDMMCCLKFreq+0xc8>)
34007f84:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34007f88:	429a      	cmp	r2, r3
34007f8a:	d023      	beq.n	34007fd4 <RCCEx_GetSDMMCCLKFreq+0x88>
34007f8c:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34007f90:	4298      	cmp	r0, r3
34007f92:	d1ed      	bne.n	34007f70 <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34007f94:	4b20      	ldr	r3, [pc, #128]	@ (34008018 <RCCEx_GetSDMMCCLKFreq+0xcc>)
34007f96:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34007f9a:	f010 0008 	ands.w	r0, r0, #8
34007f9e:	d0e8      	beq.n	34007f72 <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34007fa0:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34007fa4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34007fa8:	f3c0 4007 	ubfx	r0, r0, #16, #8
34007fac:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34007fae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34007fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007fb6:	d026      	beq.n	34008006 <RCCEx_GetSDMMCCLKFreq+0xba>
34007fb8:	d81a      	bhi.n	34007ff0 <RCCEx_GetSDMMCCLKFreq+0xa4>
34007fba:	b1fb      	cbz	r3, 34007ffc <RCCEx_GetSDMMCCLKFreq+0xb0>
34007fbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007fc0:	d1d6      	bne.n	34007f70 <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007fc2:	f7ff f865 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
34007fc6:	e01b      	b.n	34008000 <RCCEx_GetSDMMCCLKFreq+0xb4>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34007fc8:	f7fb feba 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
}
34007fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34007fd0:	f7fb bfb8 	b.w	34003f44 <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34007fd4:	4b10      	ldr	r3, [pc, #64]	@ (34008018 <RCCEx_GetSDMMCCLKFreq+0xcc>)
34007fd6:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34007fda:	f010 0010 	ands.w	r0, r0, #16
34007fde:	d0c8      	beq.n	34007f72 <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34007fe0:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34007fe4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34007fe8:	f3c0 4007 	ubfx	r0, r0, #16, #8
34007fec:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34007fee:	e7de      	b.n	34007fae <RCCEx_GetSDMMCCLKFreq+0x62>
34007ff0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007ff4:	d1bc      	bne.n	34007f70 <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007ff6:	f7ff f8cb 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34007ffa:	e001      	b.n	34008000 <RCCEx_GetSDMMCCLKFreq+0xb4>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007ffc:	f7ff f808 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34008000:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
34008004:	e7b5      	b.n	34007f72 <RCCEx_GetSDMMCCLKFreq+0x26>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008006:	f7ff f883 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
3400800a:	e7f9      	b.n	34008000 <RCCEx_GetSDMMCCLKFreq+0xb4>
3400800c:	0302001c 	.word	0x0302001c
34008010:	0301041c 	.word	0x0301041c
34008014:	0303001c 	.word	0x0303001c
34008018:	56028000 	.word	0x56028000

3400801c <RCCEx_GetI2CCLKFreq>:
{
3400801c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400801e:	f7fb ff29 	bl	34003e74 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34008022:	4b51      	ldr	r3, [pc, #324]	@ (34008168 <RCCEx_GetI2CCLKFreq+0x14c>)
34008024:	4298      	cmp	r0, r3
34008026:	d056      	beq.n	340080d6 <RCCEx_GetI2CCLKFreq+0xba>
34008028:	d844      	bhi.n	340080b4 <RCCEx_GetI2CCLKFreq+0x98>
3400802a:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
3400802e:	4298      	cmp	r0, r3
34008030:	d012      	beq.n	34008058 <RCCEx_GetI2CCLKFreq+0x3c>
34008032:	d815      	bhi.n	34008060 <RCCEx_GetI2CCLKFreq+0x44>
34008034:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34008038:	4298      	cmp	r0, r3
3400803a:	d07c      	beq.n	34008136 <RCCEx_GetI2CCLKFreq+0x11a>
3400803c:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34008040:	d807      	bhi.n	34008052 <RCCEx_GetI2CCLKFreq+0x36>
34008042:	4a4a      	ldr	r2, [pc, #296]	@ (3400816c <RCCEx_GetI2CCLKFreq+0x150>)
34008044:	4293      	cmp	r3, r2
34008046:	d076      	beq.n	34008136 <RCCEx_GetI2CCLKFreq+0x11a>
34008048:	4b49      	ldr	r3, [pc, #292]	@ (34008170 <RCCEx_GetI2CCLKFreq+0x154>)
3400804a:	4298      	cmp	r0, r3
3400804c:	d073      	beq.n	34008136 <RCCEx_GetI2CCLKFreq+0x11a>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
3400804e:	2000      	movs	r0, #0
}
34008050:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34008052:	4a48      	ldr	r2, [pc, #288]	@ (34008174 <RCCEx_GetI2CCLKFreq+0x158>)
34008054:	4293      	cmp	r3, r2
34008056:	d1fa      	bne.n	3400804e <RCCEx_GetI2CCLKFreq+0x32>
}
34008058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400805c:	f7ff b8d8 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34008060:	4b45      	ldr	r3, [pc, #276]	@ (34008178 <RCCEx_GetI2CCLKFreq+0x15c>)
34008062:	4298      	cmp	r0, r3
34008064:	d008      	beq.n	34008078 <RCCEx_GetI2CCLKFreq+0x5c>
34008066:	d821      	bhi.n	340080ac <RCCEx_GetI2CCLKFreq+0x90>
34008068:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
3400806c:	4298      	cmp	r0, r3
3400806e:	d0f3      	beq.n	34008058 <RCCEx_GetI2CCLKFreq+0x3c>
34008070:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
34008074:	4298      	cmp	r0, r3
34008076:	d1ea      	bne.n	3400804e <RCCEx_GetI2CCLKFreq+0x32>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34008078:	4b40      	ldr	r3, [pc, #256]	@ (3400817c <RCCEx_GetI2CCLKFreq+0x160>)
3400807a:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3400807e:	0592      	lsls	r2, r2, #22
34008080:	d5e5      	bpl.n	3400804e <RCCEx_GetI2CCLKFreq+0x32>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34008082:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34008086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400808a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400808e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34008090:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34008094:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008098:	d063      	beq.n	34008162 <RCCEx_GetI2CCLKFreq+0x146>
3400809a:	d856      	bhi.n	3400814a <RCCEx_GetI2CCLKFreq+0x12e>
3400809c:	2b00      	cmp	r3, #0
3400809e:	d05b      	beq.n	34008158 <RCCEx_GetI2CCLKFreq+0x13c>
340080a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340080a4:	d1d3      	bne.n	3400804e <RCCEx_GetI2CCLKFreq+0x32>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340080a6:	f7fe fff3 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
340080aa:	e057      	b.n	3400815c <RCCEx_GetI2CCLKFreq+0x140>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340080ac:	4b34      	ldr	r3, [pc, #208]	@ (34008180 <RCCEx_GetI2CCLKFreq+0x164>)
340080ae:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340080b2:	e7df      	b.n	34008074 <RCCEx_GetI2CCLKFreq+0x58>
340080b4:	4b33      	ldr	r3, [pc, #204]	@ (34008184 <RCCEx_GetI2CCLKFreq+0x168>)
340080b6:	4298      	cmp	r0, r3
340080b8:	d01d      	beq.n	340080f6 <RCCEx_GetI2CCLKFreq+0xda>
340080ba:	d822      	bhi.n	34008102 <RCCEx_GetI2CCLKFreq+0xe6>
340080bc:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340080c0:	4298      	cmp	r0, r3
340080c2:	d008      	beq.n	340080d6 <RCCEx_GetI2CCLKFreq+0xba>
340080c4:	d812      	bhi.n	340080ec <RCCEx_GetI2CCLKFreq+0xd0>
340080c6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340080ca:	4298      	cmp	r0, r3
340080cc:	d003      	beq.n	340080d6 <RCCEx_GetI2CCLKFreq+0xba>
340080ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340080d2:	4298      	cmp	r0, r3
340080d4:	d1bb      	bne.n	3400804e <RCCEx_GetI2CCLKFreq+0x32>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340080d6:	f7fb ff23 	bl	34003f20 <LL_RCC_IC15_IsEnabled>
340080da:	2800      	cmp	r0, #0
340080dc:	d0b7      	beq.n	3400804e <RCCEx_GetI2CCLKFreq+0x32>
        ic_divider = LL_RCC_IC15_GetDivider();
340080de:	f7fb ff27 	bl	34003f30 <LL_RCC_IC15_GetDivider>
340080e2:	4b26      	ldr	r3, [pc, #152]	@ (3400817c <RCCEx_GetI2CCLKFreq+0x160>)
340080e4:	4604      	mov	r4, r0
340080e6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340080ea:	e7d1      	b.n	34008090 <RCCEx_GetI2CCLKFreq+0x74>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340080ec:	4b26      	ldr	r3, [pc, #152]	@ (34008188 <RCCEx_GetI2CCLKFreq+0x16c>)
340080ee:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340080f2:	4298      	cmp	r0, r3
340080f4:	d1ab      	bne.n	3400804e <RCCEx_GetI2CCLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
340080f6:	f7fb fe9b 	bl	34003e30 <LL_RCC_MSI_IsReady>
340080fa:	2800      	cmp	r0, #0
340080fc:	d0a7      	beq.n	3400804e <RCCEx_GetI2CCLKFreq+0x32>
        i2c_frequency = MSI_VALUE;
340080fe:	4823      	ldr	r0, [pc, #140]	@ (3400818c <RCCEx_GetI2CCLKFreq+0x170>)
  return i2c_frequency;
34008100:	e7a6      	b.n	34008050 <RCCEx_GetI2CCLKFreq+0x34>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34008102:	4b23      	ldr	r3, [pc, #140]	@ (34008190 <RCCEx_GetI2CCLKFreq+0x174>)
34008104:	4298      	cmp	r0, r3
34008106:	d008      	beq.n	3400811a <RCCEx_GetI2CCLKFreq+0xfe>
34008108:	d811      	bhi.n	3400812e <RCCEx_GetI2CCLKFreq+0x112>
3400810a:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
3400810e:	4298      	cmp	r0, r3
34008110:	d0f1      	beq.n	340080f6 <RCCEx_GetI2CCLKFreq+0xda>
34008112:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
34008116:	4298      	cmp	r0, r3
34008118:	d199      	bne.n	3400804e <RCCEx_GetI2CCLKFreq+0x32>
      if (LL_RCC_HSI_IsReady() != 0U)
3400811a:	f7fb fe81 	bl	34003e20 <LL_RCC_HSI_IsReady>
3400811e:	2800      	cmp	r0, #0
34008120:	d095      	beq.n	3400804e <RCCEx_GetI2CCLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008122:	4b16      	ldr	r3, [pc, #88]	@ (3400817c <RCCEx_GetI2CCLKFreq+0x160>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008124:	481b      	ldr	r0, [pc, #108]	@ (34008194 <RCCEx_GetI2CCLKFreq+0x178>)
34008126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008128:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3400812c:	e00b      	b.n	34008146 <RCCEx_GetI2CCLKFreq+0x12a>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3400812e:	4b1a      	ldr	r3, [pc, #104]	@ (34008198 <RCCEx_GetI2CCLKFreq+0x17c>)
34008130:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34008134:	e7ef      	b.n	34008116 <RCCEx_GetI2CCLKFreq+0xfa>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008136:	f7fb fe03 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
3400813a:	f7fb ff03 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3400813e:	4b0f      	ldr	r3, [pc, #60]	@ (3400817c <RCCEx_GetI2CCLKFreq+0x160>)
34008140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008142:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008146:	40d8      	lsrs	r0, r3
34008148:	e782      	b.n	34008050 <RCCEx_GetI2CCLKFreq+0x34>
3400814a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400814e:	f47f af7e 	bne.w	3400804e <RCCEx_GetI2CCLKFreq+0x32>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008152:	f7ff f81d 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34008156:	e001      	b.n	3400815c <RCCEx_GetI2CCLKFreq+0x140>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008158:	f7fe ff5a 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
3400815c:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008160:	e776      	b.n	34008050 <RCCEx_GetI2CCLKFreq+0x34>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008162:	f7fe ffd5 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
34008166:	e7f9      	b.n	3400815c <RCCEx_GetI2CCLKFreq+0x140>
34008168:	0703000c 	.word	0x0703000c
3400816c:	0700000c 	.word	0x0700000c
34008170:	0700080c 	.word	0x0700080c
34008174:	0701000c 	.word	0x0701000c
34008178:	0702040c 	.word	0x0702040c
3400817c:	56028000 	.word	0x56028000
34008180:	0702080c 	.word	0x0702080c
34008184:	0704080c 	.word	0x0704080c
34008188:	0704000c 	.word	0x0704000c
3400818c:	003d0900 	.word	0x003d0900
34008190:	0705040c 	.word	0x0705040c
34008194:	03d09000 	.word	0x03d09000
34008198:	0705080c 	.word	0x0705080c

3400819c <RCCEx_GetLPTIMCLKFreq>:
{
3400819c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3400819e:	f7fb fe69 	bl	34003e74 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340081a2:	4b64      	ldr	r3, [pc, #400]	@ (34008334 <RCCEx_GetLPTIMCLKFreq+0x198>)
340081a4:	4298      	cmp	r0, r3
340081a6:	d03a      	beq.n	3400821e <RCCEx_GetLPTIMCLKFreq+0x82>
340081a8:	d851      	bhi.n	3400824e <RCCEx_GetLPTIMCLKFreq+0xb2>
340081aa:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
340081ae:	4298      	cmp	r0, r3
340081b0:	f000 80a8 	beq.w	34008304 <RCCEx_GetLPTIMCLKFreq+0x168>
340081b4:	d813      	bhi.n	340081de <RCCEx_GetLPTIMCLKFreq+0x42>
340081b6:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
340081ba:	4298      	cmp	r0, r3
340081bc:	f000 8098 	beq.w	340082f0 <RCCEx_GetLPTIMCLKFreq+0x154>
340081c0:	3b01      	subs	r3, #1
340081c2:	4298      	cmp	r0, r3
340081c4:	d909      	bls.n	340081da <RCCEx_GetLPTIMCLKFreq+0x3e>
340081c6:	f203 4301 	addw	r3, r3, #1025	@ 0x401
340081ca:	4298      	cmp	r0, r3
340081cc:	f000 809a 	beq.w	34008304 <RCCEx_GetLPTIMCLKFreq+0x168>
340081d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340081d4:	4298      	cmp	r0, r3
340081d6:	f000 8095 	beq.w	34008304 <RCCEx_GetLPTIMCLKFreq+0x168>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
340081da:	2000      	movs	r0, #0
}
340081dc:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340081de:	4b56      	ldr	r3, [pc, #344]	@ (34008338 <RCCEx_GetLPTIMCLKFreq+0x19c>)
340081e0:	4298      	cmp	r0, r3
340081e2:	d015      	beq.n	34008210 <RCCEx_GetLPTIMCLKFreq+0x74>
340081e4:	d808      	bhi.n	340081f8 <RCCEx_GetLPTIMCLKFreq+0x5c>
340081e6:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340081ea:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340081ee:	429a      	cmp	r2, r3
340081f0:	d00e      	beq.n	34008210 <RCCEx_GetLPTIMCLKFreq+0x74>
340081f2:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
340081f6:	e7ed      	b.n	340081d4 <RCCEx_GetLPTIMCLKFreq+0x38>
340081f8:	4b50      	ldr	r3, [pc, #320]	@ (3400833c <RCCEx_GetLPTIMCLKFreq+0x1a0>)
340081fa:	4298      	cmp	r0, r3
340081fc:	d00f      	beq.n	3400821e <RCCEx_GetLPTIMCLKFreq+0x82>
340081fe:	d80b      	bhi.n	34008218 <RCCEx_GetLPTIMCLKFreq+0x7c>
34008200:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34008204:	4298      	cmp	r0, r3
34008206:	d003      	beq.n	34008210 <RCCEx_GetLPTIMCLKFreq+0x74>
34008208:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3400820c:	4298      	cmp	r0, r3
3400820e:	d1e4      	bne.n	340081da <RCCEx_GetLPTIMCLKFreq+0x3e>
}
34008210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008214:	f7fe bffc 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34008218:	4b49      	ldr	r3, [pc, #292]	@ (34008340 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3400821a:	4298      	cmp	r0, r3
3400821c:	d1dd      	bne.n	340081da <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3400821e:	f7fb fe7f 	bl	34003f20 <LL_RCC_IC15_IsEnabled>
34008222:	2800      	cmp	r0, #0
34008224:	d0d9      	beq.n	340081da <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
34008226:	f7fb fe83 	bl	34003f30 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3400822a:	4b46      	ldr	r3, [pc, #280]	@ (34008344 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
3400822c:	4604      	mov	r4, r0
3400822e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34008232:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34008236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400823a:	d078      	beq.n	3400832e <RCCEx_GetLPTIMCLKFreq+0x192>
3400823c:	d86b      	bhi.n	34008316 <RCCEx_GetLPTIMCLKFreq+0x17a>
3400823e:	2b00      	cmp	r3, #0
34008240:	d070      	beq.n	34008324 <RCCEx_GetLPTIMCLKFreq+0x188>
34008242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008246:	d1c8      	bne.n	340081da <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008248:	f7fe ff22 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
3400824c:	e06c      	b.n	34008328 <RCCEx_GetLPTIMCLKFreq+0x18c>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400824e:	4b3e      	ldr	r3, [pc, #248]	@ (34008348 <RCCEx_GetLPTIMCLKFreq+0x1ac>)
34008250:	4298      	cmp	r0, r3
34008252:	d034      	beq.n	340082be <RCCEx_GetLPTIMCLKFreq+0x122>
34008254:	d824      	bhi.n	340082a0 <RCCEx_GetLPTIMCLKFreq+0x104>
34008256:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
3400825a:	4298      	cmp	r0, r3
3400825c:	d00f      	beq.n	3400827e <RCCEx_GetLPTIMCLKFreq+0xe2>
3400825e:	d815      	bhi.n	3400828c <RCCEx_GetLPTIMCLKFreq+0xf0>
34008260:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34008264:	4298      	cmp	r0, r3
34008266:	d00a      	beq.n	3400827e <RCCEx_GetLPTIMCLKFreq+0xe2>
34008268:	d806      	bhi.n	34008278 <RCCEx_GetLPTIMCLKFreq+0xdc>
3400826a:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
3400826e:	4298      	cmp	r0, r3
34008270:	d0d5      	beq.n	3400821e <RCCEx_GetLPTIMCLKFreq+0x82>
34008272:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34008276:	e7d0      	b.n	3400821a <RCCEx_GetLPTIMCLKFreq+0x7e>
34008278:	4b34      	ldr	r3, [pc, #208]	@ (3400834c <RCCEx_GetLPTIMCLKFreq+0x1b0>)
3400827a:	4298      	cmp	r0, r3
3400827c:	d1ad      	bne.n	340081da <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
3400827e:	f7fb fddf 	bl	34003e40 <LL_RCC_LSE_IsReady>
34008282:	3800      	subs	r0, #0
34008284:	bf18      	it	ne
34008286:	2001      	movne	r0, #1
34008288:	03c0      	lsls	r0, r0, #15
3400828a:	e7a7      	b.n	340081dc <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3400828c:	4b30      	ldr	r3, [pc, #192]	@ (34008350 <RCCEx_GetLPTIMCLKFreq+0x1b4>)
3400828e:	4298      	cmp	r0, r3
34008290:	d0f5      	beq.n	3400827e <RCCEx_GetLPTIMCLKFreq+0xe2>
34008292:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
34008296:	4298      	cmp	r0, r3
34008298:	d011      	beq.n	340082be <RCCEx_GetLPTIMCLKFreq+0x122>
3400829a:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
3400829e:	e7ec      	b.n	3400827a <RCCEx_GetLPTIMCLKFreq+0xde>
340082a0:	4b2c      	ldr	r3, [pc, #176]	@ (34008354 <RCCEx_GetLPTIMCLKFreq+0x1b8>)
340082a2:	4298      	cmp	r0, r3
340082a4:	d015      	beq.n	340082d2 <RCCEx_GetLPTIMCLKFreq+0x136>
340082a6:	d81b      	bhi.n	340082e0 <RCCEx_GetLPTIMCLKFreq+0x144>
340082a8:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340082ac:	4298      	cmp	r0, r3
340082ae:	d006      	beq.n	340082be <RCCEx_GetLPTIMCLKFreq+0x122>
340082b0:	d80c      	bhi.n	340082cc <RCCEx_GetLPTIMCLKFreq+0x130>
340082b2:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340082b6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340082ba:	4298      	cmp	r0, r3
340082bc:	d18d      	bne.n	340081da <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340082be:	4b21      	ldr	r3, [pc, #132]	@ (34008344 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
340082c0:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
340082c2:	07db      	lsls	r3, r3, #31
340082c4:	d589      	bpl.n	340081da <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
340082c6:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
340082ca:	e787      	b.n	340081dc <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340082cc:	4b22      	ldr	r3, [pc, #136]	@ (34008358 <RCCEx_GetLPTIMCLKFreq+0x1bc>)
340082ce:	4298      	cmp	r0, r3
340082d0:	d183      	bne.n	340081da <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340082d2:	f7fb fd35 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
340082d6:	4b1b      	ldr	r3, [pc, #108]	@ (34008344 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
340082d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340082da:	f3c3 6301 	ubfx	r3, r3, #24, #2
340082de:	e00f      	b.n	34008300 <RCCEx_GetLPTIMCLKFreq+0x164>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340082e0:	4b1e      	ldr	r3, [pc, #120]	@ (3400835c <RCCEx_GetLPTIMCLKFreq+0x1c0>)
340082e2:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340082e6:	429a      	cmp	r2, r3
340082e8:	d0f3      	beq.n	340082d2 <RCCEx_GetLPTIMCLKFreq+0x136>
340082ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340082ee:	e7ee      	b.n	340082ce <RCCEx_GetLPTIMCLKFreq+0x132>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340082f0:	f7fb fd26 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
340082f4:	f7fb fe26 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340082f8:	4b12      	ldr	r3, [pc, #72]	@ (34008344 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
340082fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340082fc:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34008300:	40d8      	lsrs	r0, r3
      break;
34008302:	e76b      	b.n	340081dc <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008304:	f7fb fd1c 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
34008308:	f7fb fe1c 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3400830c:	4b0d      	ldr	r3, [pc, #52]	@ (34008344 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
3400830e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34008310:	f3c3 3302 	ubfx	r3, r3, #12, #3
34008314:	e7f4      	b.n	34008300 <RCCEx_GetLPTIMCLKFreq+0x164>
34008316:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400831a:	f47f af5e 	bne.w	340081da <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400831e:	f7fe ff37 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34008322:	e001      	b.n	34008328 <RCCEx_GetLPTIMCLKFreq+0x18c>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008324:	f7fe fe74 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
34008328:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3400832c:	e756      	b.n	340081dc <RCCEx_GetLPTIMCLKFreq+0x40>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400832e:	f7fe feef 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
34008332:	e7f9      	b.n	34008328 <RCCEx_GetLPTIMCLKFreq+0x18c>
34008334:	0702102c 	.word	0x0702102c
34008338:	0701102c 	.word	0x0701102c
3400833c:	0702082c 	.word	0x0702082c
34008340:	07020c2c 	.word	0x07020c2c
34008344:	56028000 	.word	0x56028000
34008348:	07040c2c 	.word	0x07040c2c
3400834c:	07030c2c 	.word	0x07030c2c
34008350:	0703182c 	.word	0x0703182c
34008354:	07050c2c 	.word	0x07050c2c
34008358:	0705082c 	.word	0x0705082c
3400835c:	0705102c 	.word	0x0705102c

34008360 <HAL_RCCEx_GetPeriphCLKFreq>:
{
34008360:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
34008362:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
34008366:	430b      	orrs	r3, r1
34008368:	f000 8462 	beq.w	34008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
3400836c:	4bba      	ldr	r3, [pc, #744]	@ (34008658 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
3400836e:	4298      	cmp	r0, r3
34008370:	f171 0300 	sbcs.w	r3, r1, #0
34008374:	f080 80dd 	bcs.w	34008532 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
34008378:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
3400837c:	430b      	orrs	r3, r1
3400837e:	f000 8355 	beq.w	34008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
34008382:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34008386:	f171 0300 	sbcs.w	r3, r1, #0
3400838a:	d26a      	bcs.n	34008462 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
3400838c:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
34008390:	430b      	orrs	r3, r1
34008392:	f000 82b3 	beq.w	340088fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
34008396:	f240 2301 	movw	r3, #513	@ 0x201
3400839a:	4298      	cmp	r0, r3
3400839c:	f171 0300 	sbcs.w	r3, r1, #0
340083a0:	d224      	bcs.n	340083ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
340083a2:	2809      	cmp	r0, #9
340083a4:	f171 0300 	sbcs.w	r3, r1, #0
340083a8:	d215      	bcs.n	340083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
340083aa:	ea50 0301 	orrs.w	r3, r0, r1
340083ae:	d01b      	beq.n	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
340083b0:	3801      	subs	r0, #1
340083b2:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
340083b6:	2808      	cmp	r0, #8
340083b8:	f171 0100 	sbcs.w	r1, r1, #0
340083bc:	d214      	bcs.n	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
340083be:	2807      	cmp	r0, #7
340083c0:	d812      	bhi.n	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
340083c2:	e8df f010 	tbh	[pc, r0, lsl #1]
340083c6:	019c      	.short	0x019c
340083c8:	0011020a 	.word	0x0011020a
340083cc:	00110259 	.word	0x00110259
340083d0:	00110011 	.word	0x00110011
340083d4:	0228      	.short	0x0228
340083d6:	f1a0 0310 	sub.w	r3, r0, #16
340083da:	430b      	orrs	r3, r1
340083dc:	f000 823c 	beq.w	34008858 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
340083e0:	3820      	subs	r0, #32
340083e2:	4308      	orrs	r0, r1
340083e4:	f000 8264 	beq.w	340088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
340083e8:	2000      	movs	r0, #0
340083ea:	e234      	b.n	34008856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  switch (PeriphClk)
340083ec:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
340083f0:	430b      	orrs	r3, r1
340083f2:	f000 8317 	beq.w	34008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
340083f6:	f242 0301 	movw	r3, #8193	@ 0x2001
340083fa:	4298      	cmp	r0, r3
340083fc:	f171 0300 	sbcs.w	r3, r1, #0
34008400:	d224      	bcs.n	3400844c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
34008402:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
34008406:	430b      	orrs	r3, r1
34008408:	f000 82dd 	beq.w	340089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
3400840c:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
34008410:	430b      	orrs	r3, r1
34008412:	f000 8302 	beq.w	34008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
34008416:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
3400841a:	4308      	orrs	r0, r1
3400841c:	d1e4      	bne.n	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
3400841e:	4d8f      	ldr	r5, [pc, #572]	@ (3400865c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
34008420:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
34008424:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34008428:	2b02      	cmp	r3, #2
3400842a:	f000 82bf 	beq.w	340089ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
3400842e:	2b03      	cmp	r3, #3
34008430:	f000 8250 	beq.w	340088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
34008434:	2b01      	cmp	r3, #1
34008436:	f000 821f 	beq.w	34008878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400843a:	f7fb fc81 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
3400843e:	f7fb fd81 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34008442:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34008444:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008448:	40d8      	lsrs	r0, r3
3400844a:	e204      	b.n	34008856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  switch (PeriphClk)
3400844c:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
34008450:	430b      	orrs	r3, r1
34008452:	f000 82e9 	beq.w	34008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
34008456:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
3400845a:	4308      	orrs	r0, r1
3400845c:	d1c4      	bne.n	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
3400845e:	4880      	ldr	r0, [pc, #512]	@ (34008660 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
34008460:	e2dc      	b.n	34008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
  switch (PeriphClk)
34008462:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
34008466:	430b      	orrs	r3, r1
34008468:	f000 82f0 	beq.w	34008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3400846c:	4b7d      	ldr	r3, [pc, #500]	@ (34008664 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
3400846e:	4298      	cmp	r0, r3
34008470:	f171 0300 	sbcs.w	r3, r1, #0
34008474:	d224      	bcs.n	340084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
34008476:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
3400847a:	430b      	orrs	r3, r1
3400847c:	f000 82e2 	beq.w	34008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
34008480:	4b79      	ldr	r3, [pc, #484]	@ (34008668 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
34008482:	4298      	cmp	r0, r3
34008484:	f171 0300 	sbcs.w	r3, r1, #0
34008488:	d20f      	bcs.n	340084aa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
3400848a:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
3400848e:	430b      	orrs	r3, r1
34008490:	f000 82d1 	beq.w	34008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
34008494:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
34008498:	430b      	orrs	r3, r1
3400849a:	f000 82d1 	beq.w	34008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
3400849e:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
340084a2:	4308      	orrs	r0, r1
340084a4:	d1a0      	bne.n	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
340084a6:	4871      	ldr	r0, [pc, #452]	@ (3400866c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
340084a8:	e2c1      	b.n	34008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
  switch (PeriphClk)
340084aa:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
340084ae:	430b      	orrs	r3, r1
340084b0:	f000 82ca 	beq.w	34008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
340084b4:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
340084b8:	4308      	orrs	r0, r1
340084ba:	d195      	bne.n	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
340084bc:	486c      	ldr	r0, [pc, #432]	@ (34008670 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
340084be:	e2bb      	b.n	34008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
  switch (PeriphClk)
340084c0:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
340084c4:	430b      	orrs	r3, r1
340084c6:	f000 8361 	beq.w	34008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
340084ca:	4b6a      	ldr	r3, [pc, #424]	@ (34008674 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
340084cc:	4298      	cmp	r0, r3
340084ce:	f171 0300 	sbcs.w	r3, r1, #0
340084d2:	d21f      	bcs.n	34008514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
340084d4:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
340084d8:	430b      	orrs	r3, r1
340084da:	f000 82fc 	beq.w	34008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
340084de:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
340084e2:	4308      	orrs	r0, r1
340084e4:	d180      	bne.n	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
340084e6:	4d5d      	ldr	r5, [pc, #372]	@ (3400865c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
340084e8:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
340084ec:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
340084f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340084f4:	f000 8188 	beq.w	34008808 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
340084f8:	f200 832d 	bhi.w	34008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
340084fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34008500:	f000 8333 	beq.w	34008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
34008504:	f200 8318 	bhi.w	34008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
34008508:	2b00      	cmp	r3, #0
3400850a:	f000 8177 	beq.w	340087fc <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
3400850e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34008512:	e1af      	b.n	34008874 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
  switch (PeriphClk)
34008514:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
34008518:	430b      	orrs	r3, r1
3400851a:	f000 8368 	beq.w	34008bee <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
3400851e:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
34008522:	4308      	orrs	r0, r1
34008524:	f47f af60 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34008528:	4853      	ldr	r0, [pc, #332]	@ (34008678 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
}
3400852a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
3400852e:	f7ff bbd1 	b.w	34007cd4 <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
34008532:	2300      	movs	r3, #0
34008534:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34008538:	4291      	cmp	r1, r2
3400853a:	bf08      	it	eq
3400853c:	4298      	cmpeq	r0, r3
3400853e:	f000 8393 	beq.w	34008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
34008542:	4283      	cmp	r3, r0
34008544:	418a      	sbcs	r2, r1
34008546:	d35f      	bcc.n	34008608 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
34008548:	2210      	movs	r2, #16
3400854a:	4291      	cmp	r1, r2
3400854c:	bf08      	it	eq
3400854e:	4298      	cmpeq	r0, r3
34008550:	f000 837d 	beq.w	34008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
34008554:	4283      	cmp	r3, r0
34008556:	418a      	sbcs	r2, r1
34008558:	d329      	bcc.n	340085ae <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
3400855a:	2202      	movs	r2, #2
3400855c:	4291      	cmp	r1, r2
3400855e:	bf08      	it	eq
34008560:	4298      	cmpeq	r0, r3
34008562:	f000 836d 	beq.w	34008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
34008566:	4283      	cmp	r3, r0
34008568:	418a      	sbcs	r2, r1
3400856a:	d314      	bcc.n	34008596 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
3400856c:	4299      	cmp	r1, r3
3400856e:	bf08      	it	eq
34008570:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
34008574:	f000 835e 	beq.w	34008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
34008578:	2901      	cmp	r1, #1
3400857a:	bf08      	it	eq
3400857c:	4298      	cmpeq	r0, r3
3400857e:	f000 835b 	beq.w	34008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
34008582:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
34008586:	4308      	orrs	r0, r1
34008588:	f47f af2e 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
3400858c:	483b      	ldr	r0, [pc, #236]	@ (3400867c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
}
3400858e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34008592:	f7ff bcdb 	b.w	34007f4c <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
34008596:	2904      	cmp	r1, #4
34008598:	bf08      	it	eq
3400859a:	4298      	cmpeq	r0, r3
3400859c:	f000 8355 	beq.w	34008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
340085a0:	2908      	cmp	r1, #8
340085a2:	bf08      	it	eq
340085a4:	4298      	cmpeq	r0, r3
340085a6:	f47f af1f 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
340085aa:	4835      	ldr	r0, [pc, #212]	@ (34008680 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
340085ac:	e349      	b.n	34008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
  switch (PeriphClk)
340085ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
340085b2:	4291      	cmp	r1, r2
340085b4:	bf08      	it	eq
340085b6:	4298      	cmpeq	r0, r3
340085b8:	f000 8352 	beq.w	34008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
340085bc:	4283      	cmp	r3, r0
340085be:	418a      	sbcs	r2, r1
340085c0:	d311      	bcc.n	340085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
340085c2:	2940      	cmp	r1, #64	@ 0x40
340085c4:	bf08      	it	eq
340085c6:	4298      	cmpeq	r0, r3
340085c8:	f000 8343 	beq.w	34008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
340085cc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
340085d0:	bf08      	it	eq
340085d2:	4298      	cmpeq	r0, r3
340085d4:	f000 833f 	beq.w	34008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
340085d8:	2920      	cmp	r1, #32
340085da:	bf08      	it	eq
340085dc:	2800      	cmpeq	r0, #0
340085de:	f47f af03 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
340085e2:	4828      	ldr	r0, [pc, #160]	@ (34008684 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
340085e4:	e32d      	b.n	34008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
  switch (PeriphClk)
340085e6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
340085ea:	bf08      	it	eq
340085ec:	4298      	cmpeq	r0, r3
340085ee:	f000 8339 	beq.w	34008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
340085f2:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
340085f6:	bf08      	it	eq
340085f8:	4298      	cmpeq	r0, r3
340085fa:	f47f aef5 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
340085fe:	4822      	ldr	r0, [pc, #136]	@ (34008688 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
}
34008600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34008604:	f7ff b90c 	b.w	34007820 <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
34008608:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3400860c:	4291      	cmp	r1, r2
3400860e:	bf08      	it	eq
34008610:	4298      	cmpeq	r0, r3
34008612:	f000 8365 	beq.w	34008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
34008616:	4283      	cmp	r3, r0
34008618:	418a      	sbcs	r2, r1
3400861a:	d34a      	bcc.n	340086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
3400861c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34008620:	4291      	cmp	r1, r2
34008622:	bf08      	it	eq
34008624:	4298      	cmpeq	r0, r3
34008626:	f000 8325 	beq.w	34008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
3400862a:	4283      	cmp	r3, r0
3400862c:	418a      	sbcs	r2, r1
3400862e:	d32f      	bcc.n	34008690 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
34008630:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
34008634:	bf08      	it	eq
34008636:	4298      	cmpeq	r0, r3
34008638:	f000 8318 	beq.w	34008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
3400863c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
34008640:	bf08      	it	eq
34008642:	4298      	cmpeq	r0, r3
34008644:	f000 8314 	beq.w	34008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
34008648:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
3400864c:	bf08      	it	eq
3400864e:	2800      	cmpeq	r0, #0
34008650:	f47f aeca 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34008654:	480d      	ldr	r0, [pc, #52]	@ (3400868c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
34008656:	e2ff      	b.n	34008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
34008658:	20000001 	.word	0x20000001
3400865c:	56028000 	.word	0x56028000
34008660:	07000c0c 	.word	0x07000c0c
34008664:	00800001 	.word	0x00800001
34008668:	00100001 	.word	0x00100001
3400866c:	0700140c 	.word	0x0700140c
34008670:	0700182c 	.word	0x0700182c
34008674:	04000001 	.word	0x04000001
34008678:	07001418 	.word	0x07001418
3400867c:	0300001c 	.word	0x0300001c
34008680:	07000c20 	.word	0x07000c20
34008684:	07001420 	.word	0x07001420
34008688:	07000c30 	.word	0x07000c30
3400868c:	07001430 	.word	0x07001430
  switch (PeriphClk)
34008690:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
34008694:	bf08      	it	eq
34008696:	4298      	cmpeq	r0, r3
34008698:	f000 82ee 	beq.w	34008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
3400869c:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
340086a0:	bf08      	it	eq
340086a2:	4298      	cmpeq	r0, r3
340086a4:	f47f aea0 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
340086a8:	48b2      	ldr	r0, [pc, #712]	@ (34008974 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
}
340086aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
340086ae:	f7fe bf7f 	b.w	340075b0 <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
340086b2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
340086b6:	4291      	cmp	r1, r2
340086b8:	bf08      	it	eq
340086ba:	4298      	cmpeq	r0, r3
340086bc:	f000 8317 	beq.w	34008cee <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
340086c0:	4283      	cmp	r3, r0
340086c2:	418a      	sbcs	r2, r1
340086c4:	d30d      	bcc.n	340086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
340086c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
340086ca:	bf08      	it	eq
340086cc:	4298      	cmpeq	r0, r3
340086ce:	f000 830c 	beq.w	34008cea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
340086d2:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
340086d6:	bf08      	it	eq
340086d8:	4298      	cmpeq	r0, r3
340086da:	f47f ae85 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340086de:	48a6      	ldr	r0, [pc, #664]	@ (34008978 <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
340086e0:	e2ff      	b.n	34008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
  switch (PeriphClk)
340086e2:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
340086e6:	bf08      	it	eq
340086e8:	4298      	cmpeq	r0, r3
340086ea:	f000 8305 	beq.w	34008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
340086ee:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
340086f2:	bf08      	it	eq
340086f4:	4298      	cmpeq	r0, r3
340086f6:	f47f ae77 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
340086fa:	48a0      	ldr	r0, [pc, #640]	@ (3400897c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
340086fc:	e2f8      	b.n	34008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
340086fe:	4da0      	ldr	r5, [pc, #640]	@ (34008980 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
34008700:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34008704:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34008708:	2b40      	cmp	r3, #64	@ 0x40
3400870a:	d058      	beq.n	340087be <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
3400870c:	d81b      	bhi.n	34008746 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
3400870e:	2b20      	cmp	r3, #32
34008710:	d031      	beq.n	34008776 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
34008712:	d80c      	bhi.n	3400872e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
34008714:	b33b      	cbz	r3, 34008766 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
34008716:	2b10      	cmp	r3, #16
34008718:	d02a      	beq.n	34008770 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
3400871a:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
3400871c:	4b98      	ldr	r3, [pc, #608]	@ (34008980 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
3400871e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34008722:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34008726:	3301      	adds	r3, #1
34008728:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
3400872c:	e093      	b.n	34008856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
3400872e:	2b30      	cmp	r3, #48	@ 0x30
34008730:	d1f3      	bne.n	3400871a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008732:	f7fb fbbf 	bl	34003eb4 <LL_RCC_IC8_IsEnabled>
34008736:	2800      	cmp	r0, #0
34008738:	d0ef      	beq.n	3400871a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
        ic_divider = LL_RCC_IC8_GetDivider();
3400873a:	f7fb fbc3 	bl	34003ec4 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3400873e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34008742:	4604      	mov	r4, r0
34008744:	e020      	b.n	34008788 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34008746:	2b60      	cmp	r3, #96	@ 0x60
34008748:	d045      	beq.n	340087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
3400874a:	2b70      	cmp	r3, #112	@ 0x70
3400874c:	d03d      	beq.n	340087ca <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
3400874e:	2b50      	cmp	r3, #80	@ 0x50
34008750:	d1e3      	bne.n	3400871a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
      if (LL_RCC_HSI_IsReady() != 0U)
34008752:	f7fb fb65 	bl	34003e20 <LL_RCC_HSI_IsReady>
34008756:	2800      	cmp	r0, #0
34008758:	d0df      	beq.n	3400871a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400875a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400875c:	4889      	ldr	r0, [pc, #548]	@ (34008984 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
3400875e:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34008762:	40d8      	lsrs	r0, r3
      break;
34008764:	e7da      	b.n	3400871c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008766:	f7fb faeb 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
3400876a:	f7fb fbeb 	bl	34003f44 <RCCEx_GetHCLKFreq>
      break;
3400876e:	e7d5      	b.n	3400871c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008770:	f7fe fd4e 	bl	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34008774:	e7d2      	b.n	3400871c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34008776:	f7fb fb8b 	bl	34003e90 <LL_RCC_IC7_IsEnabled>
3400877a:	2800      	cmp	r0, #0
3400877c:	d0cd      	beq.n	3400871a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
        ic_divider = LL_RCC_IC7_GetDivider();
3400877e:	f7fb fb8f 	bl	34003ea0 <LL_RCC_IC7_GetDivider>
34008782:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34008784:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008788:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3400878c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008790:	d012      	beq.n	340087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
34008792:	d808      	bhi.n	340087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
34008794:	b16b      	cbz	r3, 340087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
34008796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400879a:	d1be      	bne.n	3400871a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400879c:	f7fe fc78 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
340087a0:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340087a4:	e7ba      	b.n	3400871c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
340087a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340087aa:	d1b6      	bne.n	3400871a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340087ac:	f7fe fcf0 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
340087b0:	e7f6      	b.n	340087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340087b2:	f7fe fc2d 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
340087b6:	e7f3      	b.n	340087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340087b8:	f7fe fcaa 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
340087bc:	e7f0      	b.n	340087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
      if (LL_RCC_MSI_IsReady() != 0U)
340087be:	f7fb fb37 	bl	34003e30 <LL_RCC_MSI_IsReady>
340087c2:	2800      	cmp	r0, #0
340087c4:	d0a9      	beq.n	3400871a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
        adc_frequency = MSI_VALUE;
340087c6:	4870      	ldr	r0, [pc, #448]	@ (34008988 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
340087c8:	e7a8      	b.n	3400871c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340087ca:	f7fb fab9 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
340087ce:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
340087d0:	f3c3 6301 	ubfx	r3, r3, #24, #2
340087d4:	e7c5      	b.n	34008762 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
340087d6:	486d      	ldr	r0, [pc, #436]	@ (3400898c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
340087d8:	e7a0      	b.n	3400871c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
340087da:	4d69      	ldr	r5, [pc, #420]	@ (34008980 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
340087dc:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
340087e0:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
340087e4:	3b01      	subs	r3, #1
340087e6:	2b06      	cmp	r3, #6
340087e8:	d808      	bhi.n	340087fc <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
340087ea:	e8df f013 	tbh	[pc, r3, lsl #1]
340087ee:	0045      	.short	0x0045
340087f0:	01a901be 	.word	0x01a901be
340087f4:	004d000d 	.word	0x004d000d
340087f8:	01c90287 	.word	0x01c90287
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340087fc:	f7fb faa0 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
}
34008800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008804:	f7fb bb9e 	b.w	34003f44 <RCCEx_GetHCLKFreq>
      if (LL_RCC_MSI_IsReady() != 0U)
34008808:	f7fb fb12 	bl	34003e30 <LL_RCC_MSI_IsReady>
3400880c:	2800      	cmp	r0, #0
3400880e:	f43f adeb 	beq.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
34008812:	485d      	ldr	r0, [pc, #372]	@ (34008988 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
34008814:	e01f      	b.n	34008856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34008816:	4b5a      	ldr	r3, [pc, #360]	@ (34008980 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
34008818:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3400881c:	0395      	lsls	r5, r2, #14
3400881e:	f57f ade3 	bpl.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34008822:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34008826:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
3400882a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3400882e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34008830:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34008834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008838:	f000 81d6 	beq.w	34008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
3400883c:	f200 81ca 	bhi.w	34008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
34008840:	2b00      	cmp	r3, #0
34008842:	f000 81ce 	beq.w	34008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
34008846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400884a:	f47f adcd 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400884e:	f7fe fc1f 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
34008852:	fbb0 f0f4 	udiv	r0, r0, r4
}
34008856:	bd38      	pop	{r3, r4, r5, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34008858:	4d49      	ldr	r5, [pc, #292]	@ (34008980 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
3400885a:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
3400885e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34008862:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34008866:	d016      	beq.n	34008896 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
34008868:	d80a      	bhi.n	34008880 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
3400886a:	2b00      	cmp	r3, #0
3400886c:	f000 814f 	beq.w	34008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
34008870:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34008874:	f47f adb8 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
}
34008878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400887c:	f7fe bcc8 	b.w	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34008880:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34008884:	f47f adb0 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34008888:	f7fb faca 	bl	34003e20 <LL_RCC_HSI_IsReady>
3400888c:	2800      	cmp	r0, #0
3400888e:	f43f adab 	beq.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008892:	6cab      	ldr	r3, [r5, #72]	@ 0x48
34008894:	e137      	b.n	34008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34008896:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
3400889a:	03dc      	lsls	r4, r3, #15
3400889c:	f57f ada4 	bpl.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
340088a0:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
340088a4:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
340088a8:	f3c0 4007 	ubfx	r0, r0, #16, #8
340088ac:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
340088ae:	e7bf      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
340088b0:	4a33      	ldr	r2, [pc, #204]	@ (34008980 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
340088b2:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
340088b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
340088ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340088be:	d010      	beq.n	340088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x582>
340088c0:	d804      	bhi.n	340088cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
340088c2:	2b00      	cmp	r3, #0
340088c4:	d09a      	beq.n	340087fc <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
340088c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340088ca:	e7d3      	b.n	34008874 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
340088cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
340088d0:	f47f ad8a 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
340088d4:	f7fb fa9c 	bl	34003e10 <LL_RCC_HSE_IsReady>
340088d8:	2800      	cmp	r0, #0
340088da:	f43f ad85 	beq.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
340088de:	482c      	ldr	r0, [pc, #176]	@ (34008990 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
340088e0:	e7b9      	b.n	34008856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
340088e2:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
340088e6:	0518      	lsls	r0, r3, #20
340088e8:	f57f ad7e 	bpl.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
340088ec:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
340088f0:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
340088f4:	f3c0 4007 	ubfx	r0, r0, #16, #8
340088f8:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
340088fa:	e799      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
340088fc:	4a20      	ldr	r2, [pc, #128]	@ (34008980 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
340088fe:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34008902:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34008906:	2b02      	cmp	r3, #2
34008908:	d010      	beq.n	3400892c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
3400890a:	2b03      	cmp	r3, #3
3400890c:	d048      	beq.n	340089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
3400890e:	2b01      	cmp	r3, #1
34008910:	d009      	beq.n	34008926 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008912:	f7fb fa15 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
34008916:	f7fb fb15 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
3400891a:	4b19      	ldr	r3, [pc, #100]	@ (34008980 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
3400891c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34008920:	f3c3 1303 	ubfx	r3, r3, #4, #4
34008924:	e6ff      	b.n	34008726 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008926:	f7fe fc73 	bl	34007210 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
3400892a:	e7f6      	b.n	3400891a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
3400892c:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34008930:	04d9      	lsls	r1, r3, #19
34008932:	d511      	bpl.n	34008958 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34008934:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34008938:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3400893c:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34008940:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34008944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34008948:	f100 0401 	add.w	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
3400894c:	d025      	beq.n	3400899a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
3400894e:	d805      	bhi.n	3400895c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
34008950:	b153      	cbz	r3, 34008968 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
34008952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008956:	d01d      	beq.n	34008994 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
        eth1ptp_frequency = HSE_VALUE;
34008958:	2000      	movs	r0, #0
3400895a:	e7de      	b.n	3400891a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
3400895c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008960:	d1fa      	bne.n	34008958 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008962:	f7fe fc15 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34008966:	e001      	b.n	3400896c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008968:	f7fe fb52 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3400896c:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34008970:	e7d3      	b.n	3400891a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
34008972:	bf00      	nop
34008974:	01001014 	.word	0x01001014
34008978:	03001414 	.word	0x03001414
3400897c:	03000814 	.word	0x03000814
34008980:	56028000 	.word	0x56028000
34008984:	03d09000 	.word	0x03d09000
34008988:	003d0900 	.word	0x003d0900
3400898c:	00bb8000 	.word	0x00bb8000
34008990:	02dc6c00 	.word	0x02dc6c00
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008994:	f7fe fb7c 	bl	34007090 <HAL_RCCEx_GetPLL2CLKFreq>
34008998:	e7e8      	b.n	3400896c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400899a:	f7fe fbb9 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
3400899e:	e7e5      	b.n	3400896c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
      if (LL_RCC_HSE_IsReady() != 0U)
340089a0:	f7fb fa36 	bl	34003e10 <LL_RCC_HSE_IsReady>
340089a4:	2800      	cmp	r0, #0
340089a6:	d0d7      	beq.n	34008958 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
        eth1ptp_frequency = HSE_VALUE;
340089a8:	48b4      	ldr	r0, [pc, #720]	@ (34008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
340089aa:	e7b6      	b.n	3400891a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
340089ac:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
340089b0:	035b      	lsls	r3, r3, #13
340089b2:	f57f ad19 	bpl.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340089b6:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340089ba:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340089be:	f3c0 4007 	ubfx	r0, r0, #16, #8
340089c2:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340089c4:	e734      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
340089c6:	4bae      	ldr	r3, [pc, #696]	@ (34008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
340089c8:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
340089cc:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
340089d0:	2a20      	cmp	r2, #32
340089d2:	d015      	beq.n	34008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
340089d4:	d804      	bhi.n	340089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
340089d6:	2a00      	cmp	r2, #0
340089d8:	f43f af10 	beq.w	340087fc <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
340089dc:	2a10      	cmp	r2, #16
340089de:	e749      	b.n	34008874 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
340089e0:	2a30      	cmp	r2, #48	@ 0x30
340089e2:	f47f ad01 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
340089e6:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340089ea:	0714      	lsls	r4, r2, #28
340089ec:	f57f acfc 	bpl.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
340089f0:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
340089f4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
340089f8:	f3c0 4007 	ubfx	r0, r0, #16, #8
340089fc:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
340089fe:	e717      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34008a00:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34008a04:	0755      	lsls	r5, r2, #29
34008a06:	f57f acef 	bpl.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34008a0a:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34008a0e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34008a12:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008a16:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34008a18:	e70a      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34008a1a:	489a      	ldr	r0, [pc, #616]	@ (34008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
}
34008a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34008a20:	f7ff bafc 	b.w	3400801c <RCCEx_GetI2CCLKFreq>
34008a24:	4898      	ldr	r0, [pc, #608]	@ (34008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34008a26:	e7f9      	b.n	34008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34008a28:	4898      	ldr	r0, [pc, #608]	@ (34008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34008a2a:	e7f7      	b.n	34008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34008a2c:	4898      	ldr	r0, [pc, #608]	@ (34008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
}
34008a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34008a32:	f7ff b9fb 	b.w	34007e2c <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34008a36:	4897      	ldr	r0, [pc, #604]	@ (34008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
}
34008a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34008a3c:	f7ff bbae 	b.w	3400819c <RCCEx_GetLPTIMCLKFreq>
34008a40:	4895      	ldr	r0, [pc, #596]	@ (34008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
34008a42:	e7f9      	b.n	34008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34008a44:	4895      	ldr	r0, [pc, #596]	@ (34008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
34008a46:	e7f7      	b.n	34008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34008a48:	4895      	ldr	r0, [pc, #596]	@ (34008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
34008a4a:	e7f5      	b.n	34008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34008a4c:	4a8c      	ldr	r2, [pc, #560]	@ (34008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34008a4e:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34008a52:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34008a56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34008a5a:	d031      	beq.n	34008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
34008a5c:	d812      	bhi.n	34008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
34008a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34008a62:	f43f af09 	beq.w	34008878 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
34008a66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34008a6a:	d01d      	beq.n	34008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
34008a6c:	2b00      	cmp	r3, #0
34008a6e:	f47f acbb 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008a72:	f7fb f965 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
34008a76:	f7fb fa65 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34008a7a:	4b81      	ldr	r3, [pc, #516]	@ (34008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34008a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34008a7e:	f3c3 3302 	ubfx	r3, r3, #12, #3
34008a82:	e4e1      	b.n	34008448 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34008a84:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34008a88:	f43f aebe 	beq.w	34008808 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
34008a8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34008a90:	d032      	beq.n	34008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
34008a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
34008a96:	f47f aca7 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
34008a9a:	f7fb f9d1 	bl	34003e40 <LL_RCC_LSE_IsReady>
34008a9e:	3800      	subs	r0, #0
34008aa0:	bf18      	it	ne
34008aa2:	2001      	movne	r0, #1
34008aa4:	03c0      	lsls	r0, r0, #15
34008aa6:	e6d6      	b.n	34008856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34008aa8:	f7fb fa16 	bl	34003ed8 <LL_RCC_IC9_IsEnabled>
34008aac:	2800      	cmp	r0, #0
34008aae:	f43f ac9b 	beq.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
34008ab2:	f7fb fa19 	bl	34003ee8 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008ab6:	4b72      	ldr	r3, [pc, #456]	@ (34008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34008ab8:	4604      	mov	r4, r0
34008aba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34008abe:	e6b7      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008ac0:	f7fb fa1c 	bl	34003efc <LL_RCC_IC14_IsEnabled>
34008ac4:	2800      	cmp	r0, #0
34008ac6:	f43f ac8f 	beq.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
34008aca:	f7fb fa1f 	bl	34003f0c <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008ace:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34008ad2:	4604      	mov	r4, r0
34008ad4:	e6ac      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34008ad6:	4d6a      	ldr	r5, [pc, #424]	@ (34008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34008ad8:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
34008adc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34008ae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34008ae4:	d01b      	beq.n	34008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
34008ae6:	d803      	bhi.n	34008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
34008ae8:	b18b      	cbz	r3, 34008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
34008aea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34008aee:	e6c1      	b.n	34008874 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
34008af0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34008af4:	f47f ac78 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34008af8:	f7fb f992 	bl	34003e20 <LL_RCC_HSI_IsReady>
34008afc:	2800      	cmp	r0, #0
34008afe:	f43f ac73 	beq.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008b02:	4b5f      	ldr	r3, [pc, #380]	@ (34008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34008b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008b06:	4867      	ldr	r0, [pc, #412]	@ (34008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
34008b08:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34008b0c:	e49c      	b.n	34008448 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008b0e:	f7fb f917 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
34008b12:	f7fb fa17 	bl	34003f44 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34008b16:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34008b18:	f3c3 4302 	ubfx	r3, r3, #16, #3
34008b1c:	e494      	b.n	34008448 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34008b1e:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34008b22:	0418      	lsls	r0, r3, #16
34008b24:	f57f ac60 	bpl.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34008b28:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34008b2c:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34008b30:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008b34:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34008b36:	e67b      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34008b38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34008b3c:	f47f ac54 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008b40:	f7fb f9b8 	bl	34003eb4 <LL_RCC_IC8_IsEnabled>
34008b44:	2800      	cmp	r0, #0
34008b46:	f43f ac4f 	beq.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
34008b4a:	f7fb f9bb 	bl	34003ec4 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008b4e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34008b52:	4604      	mov	r4, r0
34008b54:	e66c      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34008b56:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34008b5a:	f000 80cf 	beq.w	34008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
34008b5e:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34008b62:	d00d      	beq.n	34008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
34008b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34008b68:	e68c      	b.n	34008884 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34008b6a:	f7fb f991 	bl	34003e90 <LL_RCC_IC7_IsEnabled>
34008b6e:	2800      	cmp	r0, #0
34008b70:	f43f ac3a 	beq.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
34008b74:	f7fb f994 	bl	34003ea0 <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34008b78:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
34008b7c:	4604      	mov	r4, r0
34008b7e:	e657      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34008b80:	f7fb f8de 	bl	34003d40 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34008b84:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34008b86:	f3c3 6301 	ubfx	r3, r3, #24, #2
34008b8a:	e45d      	b.n	34008448 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34008b8c:	4a3c      	ldr	r2, [pc, #240]	@ (34008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34008b8e:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34008b92:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34008b96:	2b20      	cmp	r3, #32
34008b98:	d00f      	beq.n	34008bba <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
34008b9a:	d804      	bhi.n	34008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
34008b9c:	2b00      	cmp	r3, #0
34008b9e:	f43f ae2d 	beq.w	340087fc <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
34008ba2:	2b10      	cmp	r3, #16
34008ba4:	e666      	b.n	34008874 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
34008ba6:	2b30      	cmp	r3, #48	@ 0x30
34008ba8:	f47f ac1e 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34008bac:	f7fb f938 	bl	34003e20 <LL_RCC_HSI_IsReady>
34008bb0:	2800      	cmp	r0, #0
34008bb2:	f43f ac19 	beq.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008bb6:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34008bb8:	e7a5      	b.n	34008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34008bba:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34008bbe:	0319      	lsls	r1, r3, #12
34008bc0:	f57f ac12 	bpl.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34008bc4:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34008bc8:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34008bcc:	f3c0 4007 	ubfx	r0, r0, #16, #8
34008bd0:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34008bd2:	e62d      	b.n	34008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
34008bd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008bd8:	f47f ac06 	bne.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008bdc:	f7fe fad8 	bl	34007190 <HAL_RCCEx_GetPLL4CLKFreq>
34008be0:	e637      	b.n	34008852 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008be2:	f7fe fa15 	bl	34007010 <HAL_RCCEx_GetPLL1CLKFreq>
34008be6:	e634      	b.n	34008852 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008be8:	f7fe fa92 	bl	34007110 <HAL_RCCEx_GetPLL3CLKFreq>
34008bec:	e631      	b.n	34008852 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34008bee:	4a24      	ldr	r2, [pc, #144]	@ (34008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34008bf0:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34008bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
34008bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34008bfc:	d005      	beq.n	34008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
34008bfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34008c02:	d009      	beq.n	34008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
34008c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34008c08:	e745      	b.n	34008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x736>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34008c0a:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34008c0c:	07db      	lsls	r3, r3, #31
34008c0e:	f57f abeb 	bpl.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
34008c12:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
34008c16:	e61e      	b.n	34008856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      if (LL_RCC_HSE_IsReady() != 0U)
34008c18:	f7fb f8fa 	bl	34003e10 <LL_RCC_HSE_IsReady>
34008c1c:	2800      	cmp	r0, #0
34008c1e:	f43f abe3 	beq.w	340083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34008c22:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
34008c26:	4815      	ldr	r0, [pc, #84]	@ (34008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34008c28:	f3c3 3305 	ubfx	r3, r3, #12, #6
34008c2c:	3301      	adds	r3, #1
34008c2e:	e57b      	b.n	34008728 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34008c30:	481d      	ldr	r0, [pc, #116]	@ (34008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
34008c32:	e47a      	b.n	3400852a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34008c34:	481d      	ldr	r0, [pc, #116]	@ (34008cac <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
34008c36:	e4aa      	b.n	3400858e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
}
34008c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34008c3c:	f7fe bb6e 	b.w	3400731c <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34008c40:	481b      	ldr	r0, [pc, #108]	@ (34008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
}
34008c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34008c46:	f7fe bf03 	b.w	34007a50 <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34008c4a:	481a      	ldr	r0, [pc, #104]	@ (34008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
34008c4c:	e7f9      	b.n	34008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34008c4e:	481a      	ldr	r0, [pc, #104]	@ (34008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
34008c50:	e7f7      	b.n	34008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34008c52:	481a      	ldr	r0, [pc, #104]	@ (34008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
34008c54:	e7f5      	b.n	34008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34008c56:	481a      	ldr	r0, [pc, #104]	@ (34008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
}
34008c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34008c5c:	f7fe bcda 	b.w	34007614 <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34008c60:	4818      	ldr	r0, [pc, #96]	@ (34008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
34008c62:	e7f9      	b.n	34008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34008c64:	4818      	ldr	r0, [pc, #96]	@ (34008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
34008c66:	e7f7      	b.n	34008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34008c68:	4818      	ldr	r0, [pc, #96]	@ (34008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
34008c6a:	e4c9      	b.n	34008600 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34008c6c:	4818      	ldr	r0, [pc, #96]	@ (34008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
34008c6e:	e4c7      	b.n	34008600 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34008c70:	4818      	ldr	r0, [pc, #96]	@ (34008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
34008c72:	e4c5      	b.n	34008600 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34008c74:	4818      	ldr	r0, [pc, #96]	@ (34008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
34008c76:	e4c3      	b.n	34008600 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34008c78:	4818      	ldr	r0, [pc, #96]	@ (34008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
34008c7a:	e7ed      	b.n	34008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
34008c7c:	02dc6c00 	.word	0x02dc6c00
34008c80:	56028000 	.word	0x56028000
34008c84:	0700000c 	.word	0x0700000c
34008c88:	0700040c 	.word	0x0700040c
34008c8c:	0700080c 	.word	0x0700080c
34008c90:	0700100c 	.word	0x0700100c
34008c94:	0700082c 	.word	0x0700082c
34008c98:	07000c2c 	.word	0x07000c2c
34008c9c:	0700102c 	.word	0x0700102c
34008ca0:	0700142c 	.word	0x0700142c
34008ca4:	03d09000 	.word	0x03d09000
34008ca8:	07001818 	.word	0x07001818
34008cac:	0300041c 	.word	0x0300041c
34008cb0:	07000420 	.word	0x07000420
34008cb4:	07000820 	.word	0x07000820
34008cb8:	07001020 	.word	0x07001020
34008cbc:	07001820 	.word	0x07001820
34008cc0:	07000030 	.word	0x07000030
34008cc4:	07000430 	.word	0x07000430
34008cc8:	07000830 	.word	0x07000830
34008ccc:	07001030 	.word	0x07001030
34008cd0:	07001830 	.word	0x07001830
34008cd4:	07001c30 	.word	0x07001c30
34008cd8:	07000034 	.word	0x07000034
34008cdc:	07000434 	.word	0x07000434
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34008ce0:	4807      	ldr	r0, [pc, #28]	@ (34008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
}
34008ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34008ce6:	f7fe bbf9 	b.w	340074dc <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34008cea:	4806      	ldr	r0, [pc, #24]	@ (34008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
34008cec:	e4dd      	b.n	340086aa <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34008cee:	4806      	ldr	r0, [pc, #24]	@ (34008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
}
34008cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34008cf4:	f7fe bb76 	b.w	340073e4 <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34008cf8:	4804      	ldr	r0, [pc, #16]	@ (34008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
34008cfa:	e7f9      	b.n	34008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34008cfc:	4804      	ldr	r0, [pc, #16]	@ (34008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
34008cfe:	e5aa      	b.n	34008856 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
34008d00:	03000c14 	.word	0x03000c14
34008d04:	01001814 	.word	0x01001814
34008d08:	03000014 	.word	0x03000014
34008d0c:	03000414 	.word	0x03000414
34008d10:	00bb8000 	.word	0x00bb8000

34008d14 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34008d14:	b538      	push	{r3, r4, r5, lr}
34008d16:	4604      	mov	r4, r0
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
34008d18:	460d      	mov	r5, r1
34008d1a:	b921      	cbnz	r1, 34008d26 <HAL_RIF_RIMC_ConfigMasterAttributes+0x12>
34008d1c:	f240 1111 	movw	r1, #273	@ 0x111
34008d20:	4824      	ldr	r0, [pc, #144]	@ (34008db4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa0>)
34008d22:	f7f8 f86f 	bl	34000e04 <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
34008d26:	2c0c      	cmp	r4, #12
34008d28:	d904      	bls.n	34008d34 <HAL_RIF_RIMC_ConfigMasterAttributes+0x20>
34008d2a:	f44f 7189 	mov.w	r1, #274	@ 0x112
34008d2e:	4821      	ldr	r0, [pc, #132]	@ (34008db4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa0>)
34008d30:	f7f8 f868 	bl	34000e04 <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34008d34:	682b      	ldr	r3, [r5, #0]
34008d36:	1e5a      	subs	r2, r3, #1
34008d38:	2a01      	cmp	r2, #1
34008d3a:	d909      	bls.n	34008d50 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3c>
34008d3c:	2b20      	cmp	r3, #32
34008d3e:	d82f      	bhi.n	34008da0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
34008d40:	2b03      	cmp	r3, #3
34008d42:	d931      	bls.n	34008da8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x94>
34008d44:	4a1c      	ldr	r2, [pc, #112]	@ (34008db8 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
34008d46:	3b04      	subs	r3, #4
34008d48:	fa22 f303 	lsr.w	r3, r2, r3
34008d4c:	07db      	lsls	r3, r3, #31
34008d4e:	d52b      	bpl.n	34008da8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x94>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
34008d50:	682b      	ldr	r3, [r5, #0]
34008d52:	2b80      	cmp	r3, #128	@ 0x80
34008d54:	d001      	beq.n	34008d5a <HAL_RIF_RIMC_ConfigMasterAttributes+0x46>
34008d56:	2bff      	cmp	r3, #255	@ 0xff
34008d58:	d904      	bls.n	34008d64 <HAL_RIF_RIMC_ConfigMasterAttributes+0x50>
34008d5a:	f44f 718a 	mov.w	r1, #276	@ 0x114
34008d5e:	4815      	ldr	r0, [pc, #84]	@ (34008db4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa0>)
34008d60:	f7f8 f850 	bl	34000e04 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
34008d64:	686b      	ldr	r3, [r5, #4]
34008d66:	2b03      	cmp	r3, #3
34008d68:	d904      	bls.n	34008d74 <HAL_RIF_RIMC_ConfigMasterAttributes+0x60>
34008d6a:	f240 1115 	movw	r1, #277	@ 0x115
34008d6e:	4811      	ldr	r0, [pc, #68]	@ (34008db4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa0>)
34008d70:	f7f8 f848 	bl	34000e04 <assert_failed>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34008d74:	682b      	ldr	r3, [r5, #0]
34008d76:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
34008d7a:	fab3 f283 	clz	r2, r3

  master_cid = POSITION_VAL(pConfig->MasterCID);
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
34008d7e:	00a0      	lsls	r0, r4, #2
34008d80:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
34008d84:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
34008d88:	f8d0 3c10 	ldr.w	r3, [r0, #3088]	@ 0xc10
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34008d8c:	6869      	ldr	r1, [r5, #4]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
34008d8e:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
34008d92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34008d96:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
34008d9a:	f8c0 3c10 	str.w	r3, [r0, #3088]	@ 0xc10
}
34008d9e:	bd38      	pop	{r3, r4, r5, pc}
34008da0:	2b40      	cmp	r3, #64	@ 0x40
34008da2:	d0d5      	beq.n	34008d50 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3c>
34008da4:	2b80      	cmp	r3, #128	@ 0x80
34008da6:	d0d3      	beq.n	34008d50 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3c>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34008da8:	f240 1113 	movw	r1, #275	@ 0x113
34008dac:	4801      	ldr	r0, [pc, #4]	@ (34008db4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa0>)
34008dae:	f7f8 f829 	bl	34000e04 <assert_failed>
34008db2:	e7cd      	b.n	34008d50 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3c>
34008db4:	34038ce3 	.word	0x34038ce3
34008db8:	10001011 	.word	0x10001011

34008dbc <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
34008dbc:	4b38      	ldr	r3, [pc, #224]	@ (34008ea0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe4>)
{
34008dbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
34008dc0:	4298      	cmp	r0, r3
34008dc2:	4604      	mov	r4, r0
34008dc4:	460d      	mov	r5, r1
34008dc6:	d85c      	bhi.n	34008e82 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xc6>
34008dc8:	3b1e      	subs	r3, #30
34008dca:	4298      	cmp	r0, r3
34008dcc:	d83b      	bhi.n	34008e46 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x8a>
34008dce:	4b35      	ldr	r3, [pc, #212]	@ (34008ea4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe8>)
34008dd0:	4298      	cmp	r0, r3
34008dd2:	d84b      	bhi.n	34008e6c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xb0>
34008dd4:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34008dd8:	d23a      	bcs.n	34008e50 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x94>
34008dda:	4b33      	ldr	r3, [pc, #204]	@ (34008ea8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xec>)
34008ddc:	4298      	cmp	r0, r3
34008dde:	d840      	bhi.n	34008e62 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa6>
34008de0:	1fc2      	subs	r2, r0, #7
34008de2:	3b22      	subs	r3, #34	@ 0x22
34008de4:	429a      	cmp	r2, r3
34008de6:	d937      	bls.n	34008e58 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x9c>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
34008de8:	2d03      	cmp	r5, #3
34008dea:	d904      	bls.n	34008df6 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a>
34008dec:	f44f 71b9 	mov.w	r1, #370	@ 0x172
34008df0:	482e      	ldr	r0, [pc, #184]	@ (34008eac <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
34008df2:	f7f8 f807 	bl	34000e04 <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34008df6:	2201      	movs	r2, #1
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34008df8:	0f20      	lsrs	r0, r4, #28
34008dfa:	0080      	lsls	r0, r0, #2
34008dfc:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
34008e00:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
34008e04:	6903      	ldr	r3, [r0, #16]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34008e06:	f004 041f 	and.w	r4, r4, #31
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34008e0a:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34008e0c:	9b01      	ldr	r3, [sp, #4]
34008e0e:	40a2      	lsls	r2, r4
34008e10:	ea23 0302 	bic.w	r3, r3, r2
34008e14:	9301      	str	r3, [sp, #4]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34008e16:	9901      	ldr	r1, [sp, #4]
34008e18:	f005 0301 	and.w	r3, r5, #1
34008e1c:	40a3      	lsls	r3, r4
34008e1e:	430b      	orrs	r3, r1
34008e20:	9301      	str	r3, [sp, #4]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34008e22:	9b01      	ldr	r3, [sp, #4]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34008e24:	f3c5 0140 	ubfx	r1, r5, #1, #1
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34008e28:	6103      	str	r3, [r0, #16]
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34008e2a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34008e2c:	40a1      	lsls	r1, r4
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34008e2e:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34008e30:	9b01      	ldr	r3, [sp, #4]
34008e32:	ea23 0302 	bic.w	r3, r3, r2
34008e36:	9301      	str	r3, [sp, #4]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34008e38:	9b01      	ldr	r3, [sp, #4]
34008e3a:	4319      	orrs	r1, r3
34008e3c:	9101      	str	r1, [sp, #4]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34008e3e:	9b01      	ldr	r3, [sp, #4]
34008e40:	6303      	str	r3, [r0, #48]	@ 0x30
}
34008e42:	b003      	add	sp, #12
34008e44:	bd30      	pop	{r4, r5, pc}
34008e46:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
34008e4a:	4b19      	ldr	r3, [pc, #100]	@ (34008eb0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf4>)
34008e4c:	3a02      	subs	r2, #2
34008e4e:	e01d      	b.n	34008e8c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
34008e50:	4b18      	ldr	r3, [pc, #96]	@ (34008eb4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf8>)
34008e52:	f100 4260 	add.w	r2, r0, #3758096384	@ 0xe0000000
34008e56:	e019      	b.n	34008e8c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
34008e58:	f1a0 0308 	sub.w	r3, r0, #8
34008e5c:	2b17      	cmp	r3, #23
34008e5e:	d818      	bhi.n	34008e92 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
34008e60:	e7c2      	b.n	34008de8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
34008e62:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
34008e66:	3b1c      	subs	r3, #28
34008e68:	2b02      	cmp	r3, #2
34008e6a:	e7f8      	b.n	34008e5e <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa2>
34008e6c:	4b12      	ldr	r3, [pc, #72]	@ (34008eb8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xfc>)
34008e6e:	4298      	cmp	r0, r3
34008e70:	d803      	bhi.n	34008e7a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xbe>
34008e72:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34008e76:	d30c      	bcc.n	34008e92 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
34008e78:	e7b6      	b.n	34008de8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
34008e7a:	4b10      	ldr	r3, [pc, #64]	@ (34008ebc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x100>)
34008e7c:	4298      	cmp	r0, r3
34008e7e:	d108      	bne.n	34008e92 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
34008e80:	e7b2      	b.n	34008de8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
34008e82:	f100 4230 	add.w	r2, r0, #2952790016	@ 0xb0000000
34008e86:	2a1e      	cmp	r2, #30
34008e88:	d803      	bhi.n	34008e92 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
34008e8a:	4b0d      	ldr	r3, [pc, #52]	@ (34008ec0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x104>)
34008e8c:	40d3      	lsrs	r3, r2
34008e8e:	07db      	lsls	r3, r3, #31
34008e90:	d4aa      	bmi.n	34008de8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
34008e92:	f240 1171 	movw	r1, #369	@ 0x171
34008e96:	4805      	ldr	r0, [pc, #20]	@ (34008eac <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
34008e98:	f7f7 ffb4 	bl	34000e04 <assert_failed>
34008e9c:	e7a4      	b.n	34008de8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
34008e9e:	bf00      	nop
34008ea0:	4000001f 	.word	0x4000001f
34008ea4:	2000001e 	.word	0x2000001e
34008ea8:	1000001a 	.word	0x1000001a
34008eac:	34038ce3 	.word	0x34038ce3
34008eb0:	2e838c0b 	.word	0x2e838c0b
34008eb4:	77dff03b 	.word	0x77dff03b
34008eb8:	30000008 	.word	0x30000008
34008ebc:	3000000a 	.word	0x3000000a
34008ec0:	49deef7f 	.word	0x49deef7f

34008ec4 <XSPI_ConfigCmd>:
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
34008ec4:	6802      	ldr	r2, [r0, #0]
{
34008ec6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
34008eca:	6813      	ldr	r3, [r2, #0]
{
34008ecc:	4606      	mov	r6, r0
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
34008ece:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
34008ed2:	6013      	str	r3, [r2, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
34008ed4:	6883      	ldr	r3, [r0, #8]
{
34008ed6:	460c      	mov	r4, r1
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
34008ed8:	b97b      	cbnz	r3, 34008efa <XSPI_ConfigCmd+0x36>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
34008eda:	684b      	ldr	r3, [r1, #4]
34008edc:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
34008ee0:	d004      	beq.n	34008eec <XSPI_ConfigCmd+0x28>
34008ee2:	f640 41a3 	movw	r1, #3235	@ 0xca3
34008ee6:	4876      	ldr	r0, [pc, #472]	@ (340090c0 <XSPI_ConfigCmd+0x1fc>)
34008ee8:	f7f7 ff8c 	bl	34000e04 <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
34008eec:	6832      	ldr	r2, [r6, #0]
34008eee:	6861      	ldr	r1, [r4, #4]
34008ef0:	6813      	ldr	r3, [r2, #0]
34008ef2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
34008ef6:	430b      	orrs	r3, r1
34008ef8:	6013      	str	r3, [r2, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
34008efa:	6823      	ldr	r3, [r4, #0]
  {
    ccr_reg = &(hxspi->Instance->WCCR);
34008efc:	6831      	ldr	r1, [r6, #0]
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
34008efe:	2b02      	cmp	r3, #2
34008f00:	d158      	bne.n	34008fb4 <XSPI_ConfigCmd+0xf0>
    ccr_reg = &(hxspi->Instance->WCCR);
34008f02:	f501 72c0 	add.w	r2, r1, #384	@ 0x180
    tcr_reg = &(hxspi->Instance->WTCR);
34008f06:	f501 70c4 	add.w	r0, r1, #392	@ 0x188
    ir_reg  = &(hxspi->Instance->WIR);
34008f0a:	f501 75c8 	add.w	r5, r1, #400	@ 0x190
    abr_reg = &(hxspi->Instance->WABR);
34008f0e:	f501 73d0 	add.w	r3, r1, #416	@ 0x1a0
    ir_reg  = &(hxspi->Instance->IR);
    abr_reg = &(hxspi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
34008f12:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
34008f14:	6017      	str	r7, [r2, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
34008f16:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
34008f18:	b167      	cbz	r7, 34008f34 <XSPI_ConfigCmd+0x70>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
34008f1a:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
34008f1c:	601f      	str	r7, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
34008f1e:	6b67      	ldr	r7, [r4, #52]	@ 0x34
34008f20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34008f22:	f8d2 c000 	ldr.w	ip, [r2]
34008f26:	433b      	orrs	r3, r7
34008f28:	6b27      	ldr	r7, [r4, #48]	@ 0x30
34008f2a:	433b      	orrs	r3, r7
34008f2c:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
34008f30:	433b      	orrs	r3, r7
34008f32:	6013      	str	r3, [r2, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
34008f34:	6803      	ldr	r3, [r0, #0]
34008f36:	6c67      	ldr	r7, [r4, #68]	@ 0x44
34008f38:	f023 031f 	bic.w	r3, r3, #31
34008f3c:	433b      	orrs	r3, r7
34008f3e:	6003      	str	r3, [r0, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34008f40:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
34008f44:	f1be 0f00 	cmp.w	lr, #0
34008f48:	d00e      	beq.n	34008f68 <XSPI_ConfigCmd+0xa4>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34008f4a:	6823      	ldr	r3, [r4, #0]
34008f4c:	b913      	cbnz	r3, 34008f54 <XSPI_ConfigCmd+0x90>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
34008f4e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34008f50:	3b01      	subs	r3, #1
34008f52:	640b      	str	r3, [r1, #64]	@ 0x40
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
34008f54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34008f56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008f5a:	d13f      	bne.n	34008fdc <XSPI_ConfigCmd+0x118>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34008f5c:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
34008f60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34008f64:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
34008f68:	68e3      	ldr	r3, [r4, #12]
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34008f6a:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
34008f6e:	2b00      	cmp	r3, #0
34008f70:	f000 8083 	beq.w	3400907a <XSPI_ConfigCmd+0x1b6>
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34008f74:	e9d4 c804 	ldrd	ip, r8, [r4, #16]
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34008f78:	f1b9 0f00 	cmp.w	r9, #0
34008f7c:	d053      	beq.n	34009026 <XSPI_ConfigCmd+0x162>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34008f7e:	e9d4 0708 	ldrd	r0, r7, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34008f82:	f1be 0f00 	cmp.w	lr, #0
34008f86:	d032      	beq.n	34008fee <XSPI_ConfigCmd+0x12a>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34008f88:	ea4e 0303 	orr.w	r3, lr, r3
34008f8c:	ea43 0309 	orr.w	r3, r3, r9
34008f90:	ea43 0308 	orr.w	r3, r3, r8
34008f94:	ea43 030c 	orr.w	r3, r3, ip
34008f98:	433b      	orrs	r3, r7
34008f9a:	4303      	orrs	r3, r0
34008f9c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34008f9e:	6816      	ldr	r6, [r2, #0]
34008fa0:	4303      	orrs	r3, r0
34008fa2:	4848      	ldr	r0, [pc, #288]	@ (340090c4 <XSPI_ConfigCmd+0x200>)
34008fa4:	4030      	ands	r0, r6
34008fa6:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34008fa8:	6013      	str	r3, [r2, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
34008faa:	68a3      	ldr	r3, [r4, #8]
34008fac:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
34008fae:	69a3      	ldr	r3, [r4, #24]
34008fb0:	648b      	str	r3, [r1, #72]	@ 0x48
34008fb2:	e04c      	b.n	3400904e <XSPI_ConfigCmd+0x18a>
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
34008fb4:	2b03      	cmp	r3, #3
    ccr_reg = &(hxspi->Instance->WPCCR);
34008fb6:	bf01      	itttt	eq
34008fb8:	f501 72a0 	addeq.w	r2, r1, #320	@ 0x140
    tcr_reg = &(hxspi->Instance->WPTCR);
34008fbc:	f501 70a4 	addeq.w	r0, r1, #328	@ 0x148
    ir_reg  = &(hxspi->Instance->WPIR);
34008fc0:	f501 75a8 	addeq.w	r5, r1, #336	@ 0x150
    abr_reg = &(hxspi->Instance->WPABR);
34008fc4:	f501 73b0 	addeq.w	r3, r1, #352	@ 0x160
    ccr_reg = &(hxspi->Instance->CCR);
34008fc8:	bf1f      	itttt	ne
34008fca:	f501 7280 	addne.w	r2, r1, #256	@ 0x100
    tcr_reg = &(hxspi->Instance->TCR);
34008fce:	f501 7084 	addne.w	r0, r1, #264	@ 0x108
    ir_reg  = &(hxspi->Instance->IR);
34008fd2:	f501 7588 	addne.w	r5, r1, #272	@ 0x110
    abr_reg = &(hxspi->Instance->ABR);
34008fd6:	f501 7390 	addne.w	r3, r1, #288	@ 0x120
34008fda:	e79a      	b.n	34008f12 <XSPI_ConfigCmd+0x4e>
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
34008fdc:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
34008fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008fe2:	d1c1      	bne.n	34008f68 <XSPI_ConfigCmd+0xa4>
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34008fe4:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
34008fe8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34008fec:	e7ba      	b.n	34008f64 <XSPI_ConfigCmd+0xa0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34008fee:	ea43 0309 	orr.w	r3, r3, r9
34008ff2:	f8d2 e000 	ldr.w	lr, [r2]
34008ff6:	ea43 0308 	orr.w	r3, r3, r8
34008ffa:	ea43 030c 	orr.w	r3, r3, ip
34008ffe:	433b      	orrs	r3, r7
34009000:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
34009004:	4303      	orrs	r3, r0
34009006:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
3400900a:	ea43 030e 	orr.w	r3, r3, lr
3400900e:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34009010:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
34009012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009016:	d1c8      	bne.n	34008faa <XSPI_ConfigCmd+0xe6>
34009018:	6963      	ldr	r3, [r4, #20]
3400901a:	2b08      	cmp	r3, #8
3400901c:	d1c5      	bne.n	34008faa <XSPI_ConfigCmd+0xe6>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3400901e:	6813      	ldr	r3, [r2, #0]
34009020:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
34009024:	e7c0      	b.n	34008fa8 <XSPI_ConfigCmd+0xe4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
34009026:	6811      	ldr	r1, [r2, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34009028:	f1be 0f00 	cmp.w	lr, #0
3400902c:	d012      	beq.n	34009054 <XSPI_ConfigCmd+0x190>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3400902e:	ea4e 0303 	orr.w	r3, lr, r3
34009032:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34009034:	ea43 0308 	orr.w	r3, r3, r8
34009038:	ea43 030c 	orr.w	r3, r3, ip
3400903c:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
34009040:	4303      	orrs	r3, r0
34009042:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
34009046:	430b      	orrs	r3, r1
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34009048:	6013      	str	r3, [r2, #0]
      *ir_reg = pCmd->Instruction;
3400904a:	68a3      	ldr	r3, [r4, #8]
3400904c:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
3400904e:	2000      	movs	r0, #0
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
    }
  }

  return status;
}
34009050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
34009054:	ea43 0308 	orr.w	r3, r3, r8
34009058:	ea43 030c 	orr.w	r3, r3, ip
3400905c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
34009060:	430b      	orrs	r3, r1
34009062:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34009064:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
34009066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400906a:	d1ee      	bne.n	3400904a <XSPI_ConfigCmd+0x186>
3400906c:	6963      	ldr	r3, [r4, #20]
3400906e:	2b08      	cmp	r3, #8
34009070:	d1eb      	bne.n	3400904a <XSPI_ConfigCmd+0x186>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34009072:	6813      	ldr	r3, [r2, #0]
34009074:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
34009078:	e7e6      	b.n	34009048 <XSPI_ConfigCmd+0x184>
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3400907a:	f1b9 0f00 	cmp.w	r9, #0
3400907e:	d01b      	beq.n	340090b8 <XSPI_ConfigCmd+0x1f4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34009080:	e9d4 6008 	ldrd	r6, r0, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34009084:	f1be 0f00 	cmp.w	lr, #0
34009088:	d00d      	beq.n	340090a6 <XSPI_ConfigCmd+0x1e2>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3400908a:	ea4e 0309 	orr.w	r3, lr, r9
3400908e:	6815      	ldr	r5, [r2, #0]
34009090:	4303      	orrs	r3, r0
34009092:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34009094:	4333      	orrs	r3, r6
34009096:	4303      	orrs	r3, r0
34009098:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
3400909c:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
340090a0:	4303      	orrs	r3, r0
340090a2:	6013      	str	r3, [r2, #0]
340090a4:	e783      	b.n	34008fae <XSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
340090a6:	6813      	ldr	r3, [r2, #0]
340090a8:	ea40 0009 	orr.w	r0, r0, r9
340090ac:	4330      	orrs	r0, r6
340090ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
340090b2:	4318      	orrs	r0, r3
340090b4:	6010      	str	r0, [r2, #0]
340090b6:	e77a      	b.n	34008fae <XSPI_ConfigCmd+0xea>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
340090b8:	2308      	movs	r3, #8
      status = HAL_ERROR;
340090ba:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
340090bc:	65f3      	str	r3, [r6, #92]	@ 0x5c
340090be:	e7c7      	b.n	34009050 <XSPI_ConfigCmd+0x18c>
340090c0:	34038d86 	.word	0x34038d86
340090c4:	f0ffc0c0 	.word	0xf0ffc0c0

340090c8 <XSPI_WaitFlagStateUntilTimeout>:
{
340090c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340090cc:	4604      	mov	r4, r0
340090ce:	460e      	mov	r6, r1
340090d0:	4615      	mov	r5, r2
340090d2:	461f      	mov	r7, r3
340090d4:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
340090d8:	6822      	ldr	r2, [r4, #0]
340090da:	6a13      	ldr	r3, [r2, #32]
340090dc:	4233      	tst	r3, r6
340090de:	bf14      	ite	ne
340090e0:	2301      	movne	r3, #1
340090e2:	2300      	moveq	r3, #0
340090e4:	42ab      	cmp	r3, r5
340090e6:	d101      	bne.n	340090ec <XSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
340090e8:	2000      	movs	r0, #0
340090ea:	e011      	b.n	34009110 <XSPI_WaitFlagStateUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
340090ec:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
340090f0:	d0f3      	beq.n	340090da <XSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
340090f2:	f7f9 f973 	bl	340023dc <HAL_GetTick>
340090f6:	1bc0      	subs	r0, r0, r7
340090f8:	4540      	cmp	r0, r8
340090fa:	d802      	bhi.n	34009102 <XSPI_WaitFlagStateUntilTimeout+0x3a>
340090fc:	f1b8 0f00 	cmp.w	r8, #0
34009100:	d1ea      	bne.n	340090d8 <XSPI_WaitFlagStateUntilTimeout+0x10>
        hxspi->State     = HAL_XSPI_STATE_READY;
34009102:	2302      	movs	r3, #2
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
34009104:	2003      	movs	r0, #3
        hxspi->State     = HAL_XSPI_STATE_READY;
34009106:	65a3      	str	r3, [r4, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
34009108:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3400910a:	f043 0301 	orr.w	r3, r3, #1
3400910e:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
34009110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

34009114 <HAL_XSPI_MspInit>:
}
34009114:	4770      	bx	lr
	...

34009118 <HAL_XSPI_Init>:
{
34009118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400911a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
3400911c:	f7f9 f95e 	bl	340023dc <HAL_GetTick>
34009120:	4606      	mov	r6, r0
  if (hxspi == NULL)
34009122:	2c00      	cmp	r4, #0
34009124:	f000 812a 	beq.w	3400937c <HAL_XSPI_Init+0x264>
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
34009128:	68a3      	ldr	r3, [r4, #8]
3400912a:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3400912e:	d004      	beq.n	3400913a <HAL_XSPI_Init+0x22>
34009130:	f240 1161 	movw	r1, #353	@ 0x161
34009134:	4892      	ldr	r0, [pc, #584]	@ (34009380 <HAL_XSPI_Init+0x268>)
34009136:	f7f7 fe65 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
3400913a:	68e3      	ldr	r3, [r4, #12]
3400913c:	f033 7240 	bics.w	r2, r3, #50331648	@ 0x3000000
34009140:	d009      	beq.n	34009156 <HAL_XSPI_Init+0x3e>
34009142:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
34009146:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3400914a:	d004      	beq.n	34009156 <HAL_XSPI_Init+0x3e>
3400914c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
34009150:	488b      	ldr	r0, [pc, #556]	@ (34009380 <HAL_XSPI_Init+0x268>)
34009152:	f7f7 fe57 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
34009156:	6923      	ldr	r3, [r4, #16]
34009158:	2b1f      	cmp	r3, #31
3400915a:	d904      	bls.n	34009166 <HAL_XSPI_Init+0x4e>
3400915c:	f240 1163 	movw	r1, #355	@ 0x163
34009160:	4887      	ldr	r0, [pc, #540]	@ (34009380 <HAL_XSPI_Init+0x268>)
34009162:	f7f7 fe4f 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
34009166:	6963      	ldr	r3, [r4, #20]
34009168:	3b01      	subs	r3, #1
3400916a:	2b3f      	cmp	r3, #63	@ 0x3f
3400916c:	d904      	bls.n	34009178 <HAL_XSPI_Init+0x60>
3400916e:	f44f 71b2 	mov.w	r1, #356	@ 0x164
34009172:	4883      	ldr	r0, [pc, #524]	@ (34009380 <HAL_XSPI_Init+0x268>)
34009174:	f7f7 fe46 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
34009178:	69a3      	ldr	r3, [r4, #24]
3400917a:	f033 0302 	bics.w	r3, r3, #2
3400917e:	d004      	beq.n	3400918a <HAL_XSPI_Init+0x72>
34009180:	f240 1165 	movw	r1, #357	@ 0x165
34009184:	487e      	ldr	r0, [pc, #504]	@ (34009380 <HAL_XSPI_Init+0x268>)
34009186:	f7f7 fe3d 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3400918a:	69e3      	ldr	r3, [r4, #28]
3400918c:	2b01      	cmp	r3, #1
3400918e:	d904      	bls.n	3400919a <HAL_XSPI_Init+0x82>
34009190:	f44f 71b3 	mov.w	r1, #358	@ 0x166
34009194:	487a      	ldr	r0, [pc, #488]	@ (34009380 <HAL_XSPI_Init+0x268>)
34009196:	f7f7 fe35 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3400919a:	6a23      	ldr	r3, [r4, #32]
3400919c:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
340091a0:	d00c      	beq.n	340091bc <HAL_XSPI_Init+0xa4>
340091a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340091a6:	d009      	beq.n	340091bc <HAL_XSPI_Init+0xa4>
340091a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340091ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340091b0:	d004      	beq.n	340091bc <HAL_XSPI_Init+0xa4>
340091b2:	f240 1167 	movw	r1, #359	@ 0x167
340091b6:	4872      	ldr	r0, [pc, #456]	@ (34009380 <HAL_XSPI_Init+0x268>)
340091b8:	f7f7 fe24 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
340091bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340091be:	2bff      	cmp	r3, #255	@ 0xff
340091c0:	d904      	bls.n	340091cc <HAL_XSPI_Init+0xb4>
340091c2:	f44f 71b4 	mov.w	r1, #360	@ 0x168
340091c6:	486e      	ldr	r0, [pc, #440]	@ (34009380 <HAL_XSPI_Init+0x268>)
340091c8:	f7f7 fe1c 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
340091cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340091ce:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
340091d2:	d004      	beq.n	340091de <HAL_XSPI_Init+0xc6>
340091d4:	f240 1169 	movw	r1, #361	@ 0x169
340091d8:	4869      	ldr	r0, [pc, #420]	@ (34009380 <HAL_XSPI_Init+0x268>)
340091da:	f7f7 fe13 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
340091de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340091e0:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
340091e4:	d004      	beq.n	340091f0 <HAL_XSPI_Init+0xd8>
340091e6:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
340091ea:	4865      	ldr	r0, [pc, #404]	@ (34009380 <HAL_XSPI_Init+0x268>)
340091ec:	f7f7 fe0a 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
340091f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
340091f2:	2b1f      	cmp	r3, #31
340091f4:	d904      	bls.n	34009200 <HAL_XSPI_Init+0xe8>
340091f6:	f240 116b 	movw	r1, #363	@ 0x16b
340091fa:	4861      	ldr	r0, [pc, #388]	@ (34009380 <HAL_XSPI_Init+0x268>)
340091fc:	f7f7 fe02 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
34009200:	6863      	ldr	r3, [r4, #4]
34009202:	3b01      	subs	r3, #1
34009204:	2b3f      	cmp	r3, #63	@ 0x3f
34009206:	d904      	bls.n	34009212 <HAL_XSPI_Init+0xfa>
34009208:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3400920c:	485c      	ldr	r0, [pc, #368]	@ (34009380 <HAL_XSPI_Init+0x268>)
3400920e:	f7f7 fdf9 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
34009212:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34009214:	2bff      	cmp	r3, #255	@ 0xff
34009216:	d904      	bls.n	34009222 <HAL_XSPI_Init+0x10a>
34009218:	f240 116d 	movw	r1, #365	@ 0x16d
3400921c:	4858      	ldr	r0, [pc, #352]	@ (34009380 <HAL_XSPI_Init+0x268>)
3400921e:	f7f7 fdf1 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
34009222:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34009224:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
34009228:	d004      	beq.n	34009234 <HAL_XSPI_Init+0x11c>
3400922a:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
3400922e:	4854      	ldr	r0, [pc, #336]	@ (34009380 <HAL_XSPI_Init+0x268>)
34009230:	f7f7 fde8 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
34009234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34009236:	f433 1300 	bics.w	r3, r3, #2097152	@ 0x200000
3400923a:	d004      	beq.n	34009246 <HAL_XSPI_Init+0x12e>
3400923c:	f240 116f 	movw	r1, #367	@ 0x16f
34009240:	484f      	ldr	r0, [pc, #316]	@ (34009380 <HAL_XSPI_Init+0x268>)
34009242:	f7f7 fddf 	bl	34000e04 <assert_failed>
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
34009246:	2300      	movs	r3, #0
34009248:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3400924a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
3400924c:	2f00      	cmp	r7, #0
3400924e:	f040 8087 	bne.w	34009360 <HAL_XSPI_Init+0x248>
      HAL_XSPI_MspInit(hxspi);
34009252:	4620      	mov	r0, r4
34009254:	f7ff ff5e 	bl	34009114 <HAL_XSPI_MspInit>
  hxspi->Timeout = Timeout;
34009258:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hxspi->Instance->DCR1,
3400925c:	69e3      	ldr	r3, [r4, #28]
3400925e:	68e5      	ldr	r5, [r4, #12]
34009260:	6821      	ldr	r1, [r4, #0]
34009262:	431d      	orrs	r5, r3
34009264:	6923      	ldr	r3, [r4, #16]
34009266:	6888      	ldr	r0, [r1, #8]
34009268:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
3400926c:	4b45      	ldr	r3, [pc, #276]	@ (34009384 <HAL_XSPI_Init+0x26c>)
  hxspi->Timeout = Timeout;
3400926e:	6622      	str	r2, [r4, #96]	@ 0x60
      MODIFY_REG(hxspi->Instance->DCR1,
34009270:	4003      	ands	r3, r0
34009272:	431d      	orrs	r5, r3
34009274:	6963      	ldr	r3, [r4, #20]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
34009276:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hxspi->Instance->DCR1,
34009278:	3b01      	subs	r3, #1
3400927a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
3400927e:	608d      	str	r5, [r1, #8]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
34009280:	68cb      	ldr	r3, [r1, #12]
34009282:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34009286:	4303      	orrs	r3, r0
34009288:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3400928a:	690b      	ldr	r3, [r1, #16]
3400928c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
3400928e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
34009292:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34009296:	610b      	str	r3, [r1, #16]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
34009298:	690b      	ldr	r3, [r1, #16]
3400929a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
3400929c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
340092a0:	4303      	orrs	r3, r0
340092a2:	610b      	str	r3, [r1, #16]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
340092a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
340092a6:	6860      	ldr	r0, [r4, #4]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
340092a8:	614b      	str	r3, [r1, #20]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
340092aa:	680b      	ldr	r3, [r1, #0]
340092ac:	3801      	subs	r0, #1
340092ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
340092b2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
340092b6:	600b      	str	r3, [r1, #0]
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
340092b8:	4620      	mov	r0, r4
340092ba:	9200      	str	r2, [sp, #0]
340092bc:	4633      	mov	r3, r6
340092be:	463a      	mov	r2, r7
340092c0:	2120      	movs	r1, #32
340092c2:	f7ff ff01 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
340092c6:	2800      	cmp	r0, #0
340092c8:	d156      	bne.n	34009378 <HAL_XSPI_Init+0x260>
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
340092ca:	6823      	ldr	r3, [r4, #0]
340092cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340092ce:	68da      	ldr	r2, [r3, #12]
340092d0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
340092d4:	430a      	orrs	r2, r1
340092d6:	60da      	str	r2, [r3, #12]
        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
340092d8:	4a2b      	ldr	r2, [pc, #172]	@ (34009388 <HAL_XSPI_Init+0x270>)
340092da:	4293      	cmp	r3, r2
340092dc:	d042      	beq.n	34009364 <HAL_XSPI_Init+0x24c>
340092de:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340092e2:	4293      	cmp	r3, r2
340092e4:	d03e      	beq.n	34009364 <HAL_XSPI_Init+0x24c>
340092e6:	4a29      	ldr	r2, [pc, #164]	@ (3400938c <HAL_XSPI_Init+0x274>)
340092e8:	4293      	cmp	r3, r2
340092ea:	d03b      	beq.n	34009364 <HAL_XSPI_Init+0x24c>
340092ec:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340092f0:	4293      	cmp	r3, r2
340092f2:	d037      	beq.n	34009364 <HAL_XSPI_Init+0x24c>
340092f4:	4a26      	ldr	r2, [pc, #152]	@ (34009390 <HAL_XSPI_Init+0x278>)
340092f6:	4293      	cmp	r3, r2
340092f8:	d034      	beq.n	34009364 <HAL_XSPI_Init+0x24c>
340092fa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340092fe:	4293      	cmp	r3, r2
34009300:	d030      	beq.n	34009364 <HAL_XSPI_Init+0x24c>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
34009302:	6823      	ldr	r3, [r4, #0]
34009304:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
34009306:	6819      	ldr	r1, [r3, #0]
34009308:	68a2      	ldr	r2, [r4, #8]
3400930a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3400930e:	4302      	orrs	r2, r0
34009310:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
34009314:	430a      	orrs	r2, r1
34009316:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
34009318:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
3400931c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
34009320:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
34009324:	4302      	orrs	r2, r0
34009326:	430a      	orrs	r2, r1
34009328:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        HAL_XSPI_ENABLE(hxspi);
3400932c:	681a      	ldr	r2, [r3, #0]
3400932e:	f042 0201 	orr.w	r2, r2, #1
34009332:	601a      	str	r2, [r3, #0]
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
34009334:	69a2      	ldr	r2, [r4, #24]
34009336:	2a02      	cmp	r2, #2
34009338:	d103      	bne.n	34009342 <HAL_XSPI_Init+0x22a>
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3400933a:	689a      	ldr	r2, [r3, #8]
3400933c:	f042 0202 	orr.w	r2, r2, #2
34009340:	609a      	str	r2, [r3, #8]
        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
34009342:	6c22      	ldr	r2, [r4, #64]	@ 0x40
34009344:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
34009348:	bf02      	ittt	eq
3400934a:	689a      	ldreq	r2, [r3, #8]
3400934c:	f442 1200 	orreq.w	r2, r2, #2097152	@ 0x200000
34009350:	609a      	streq	r2, [r3, #8]
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34009352:	68e3      	ldr	r3, [r4, #12]
34009354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
34009358:	bf0c      	ite	eq
3400935a:	2301      	moveq	r3, #1
          hxspi->State = HAL_XSPI_STATE_READY;
3400935c:	2302      	movne	r3, #2
3400935e:	65a3      	str	r3, [r4, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
34009360:	2000      	movs	r0, #0
34009362:	e009      	b.n	34009378 <HAL_XSPI_Init+0x260>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34009364:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34009366:	2200      	movs	r2, #0
34009368:	9300      	str	r3, [sp, #0]
3400936a:	2120      	movs	r1, #32
3400936c:	4633      	mov	r3, r6
3400936e:	4620      	mov	r0, r4
34009370:	f7ff feaa 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
          if (status != HAL_OK)
34009374:	2800      	cmp	r0, #0
34009376:	d0c4      	beq.n	34009302 <HAL_XSPI_Init+0x1ea>
}
34009378:	b003      	add	sp, #12
3400937a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
3400937c:	2001      	movs	r0, #1
3400937e:	e7fb      	b.n	34009378 <HAL_XSPI_Init+0x260>
34009380:	34038d86 	.word	0x34038d86
34009384:	f8e0c0fc 	.word	0xf8e0c0fc
34009388:	58025000 	.word	0x58025000
3400938c:	5802a000 	.word	0x5802a000
34009390:	5802d000 	.word	0x5802d000

34009394 <HAL_XSPI_Command>:
{
34009394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34009396:	460c      	mov	r4, r1
34009398:	4605      	mov	r5, r0
3400939a:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3400939c:	f7f9 f81e 	bl	340023dc <HAL_GetTick>
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
340093a0:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
340093a2:	4606      	mov	r6, r0
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
340093a4:	2b03      	cmp	r3, #3
340093a6:	d904      	bls.n	340093b2 <HAL_XSPI_Command+0x1e>
340093a8:	f240 313e 	movw	r1, #830	@ 0x33e
340093ac:	4884      	ldr	r0, [pc, #528]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
340093ae:	f7f7 fd29 	bl	34000e04 <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
340093b2:	68ab      	ldr	r3, [r5, #8]
340093b4:	b943      	cbnz	r3, 340093c8 <HAL_XSPI_Command+0x34>
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
340093b6:	6863      	ldr	r3, [r4, #4]
340093b8:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
340093bc:	d004      	beq.n	340093c8 <HAL_XSPI_Command+0x34>
340093be:	f240 3141 	movw	r1, #833	@ 0x341
340093c2:	487f      	ldr	r0, [pc, #508]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
340093c4:	f7f7 fd1e 	bl	34000e04 <assert_failed>
  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
340093c8:	68e3      	ldr	r3, [r4, #12]
340093ca:	2b04      	cmp	r3, #4
340093cc:	d904      	bls.n	340093d8 <HAL_XSPI_Command+0x44>
340093ce:	f44f 7151 	mov.w	r1, #836	@ 0x344
340093d2:	487b      	ldr	r0, [pc, #492]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
340093d4:	f7f7 fd16 	bl	34000e04 <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
340093d8:	68e3      	ldr	r3, [r4, #12]
340093da:	b18b      	cbz	r3, 34009400 <HAL_XSPI_Command+0x6c>
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
340093dc:	6923      	ldr	r3, [r4, #16]
340093de:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340093e2:	d004      	beq.n	340093ee <HAL_XSPI_Command+0x5a>
340093e4:	f240 3147 	movw	r1, #839	@ 0x347
340093e8:	4875      	ldr	r0, [pc, #468]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
340093ea:	f7f7 fd0b 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
340093ee:	6963      	ldr	r3, [r4, #20]
340093f0:	f033 0308 	bics.w	r3, r3, #8
340093f4:	d004      	beq.n	34009400 <HAL_XSPI_Command+0x6c>
340093f6:	f44f 7152 	mov.w	r1, #840	@ 0x348
340093fa:	4871      	ldr	r0, [pc, #452]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
340093fc:	f7f7 fd02 	bl	34000e04 <assert_failed>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
34009400:	69e3      	ldr	r3, [r4, #28]
34009402:	b303      	cbz	r3, 34009446 <HAL_XSPI_Command+0xb2>
34009404:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34009408:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3400940c:	d10d      	bne.n	3400942a <HAL_XSPI_Command+0x96>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3400940e:	6a23      	ldr	r3, [r4, #32]
34009410:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34009414:	d12c      	bne.n	34009470 <HAL_XSPI_Command+0xdc>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
34009416:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34009418:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3400941c:	d013      	beq.n	34009446 <HAL_XSPI_Command+0xb2>
3400941e:	f240 314f 	movw	r1, #847	@ 0x34f
34009422:	4867      	ldr	r0, [pc, #412]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
34009424:	f7f7 fcee 	bl	34000e04 <assert_failed>
34009428:	e00d      	b.n	34009446 <HAL_XSPI_Command+0xb2>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3400942a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400942e:	d0ee      	beq.n	3400940e <HAL_XSPI_Command+0x7a>
34009430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34009434:	d0eb      	beq.n	3400940e <HAL_XSPI_Command+0x7a>
34009436:	f240 314b 	movw	r1, #843	@ 0x34b
3400943a:	4861      	ldr	r0, [pc, #388]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
3400943c:	f7f7 fce2 	bl	34000e04 <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34009440:	69e3      	ldr	r3, [r4, #28]
34009442:	2b00      	cmp	r3, #0
34009444:	d1e3      	bne.n	3400940e <HAL_XSPI_Command+0x7a>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
34009446:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34009448:	b333      	cbz	r3, 34009498 <HAL_XSPI_Command+0x104>
3400944a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
3400944e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
34009452:	d113      	bne.n	3400947c <HAL_XSPI_Command+0xe8>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
34009454:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34009456:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3400945a:	d13d      	bne.n	340094d8 <HAL_XSPI_Command+0x144>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3400945c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400945e:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
34009462:	d019      	beq.n	34009498 <HAL_XSPI_Command+0x104>
34009464:	f240 3156 	movw	r1, #854	@ 0x356
34009468:	4855      	ldr	r0, [pc, #340]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
3400946a:	f7f7 fccb 	bl	34000e04 <assert_failed>
3400946e:	e013      	b.n	34009498 <HAL_XSPI_Command+0x104>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
34009470:	f240 314e 	movw	r1, #846	@ 0x34e
34009474:	4852      	ldr	r0, [pc, #328]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
34009476:	f7f7 fcc5 	bl	34000e04 <assert_failed>
3400947a:	e7cc      	b.n	34009416 <HAL_XSPI_Command+0x82>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3400947c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34009480:	d0e8      	beq.n	34009454 <HAL_XSPI_Command+0xc0>
34009482:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34009486:	d0e5      	beq.n	34009454 <HAL_XSPI_Command+0xc0>
34009488:	f240 3152 	movw	r1, #850	@ 0x352
3400948c:	484c      	ldr	r0, [pc, #304]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
3400948e:	f7f7 fcb9 	bl	34000e04 <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
34009492:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34009494:	2b00      	cmp	r3, #0
34009496:	d1dd      	bne.n	34009454 <HAL_XSPI_Command+0xc0>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
34009498:	68eb      	ldr	r3, [r5, #12]
3400949a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3400949c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340094a0:	d120      	bne.n	340094e4 <HAL_XSPI_Command+0x150>
340094a2:	b389      	cbz	r1, 34009508 <HAL_XSPI_Command+0x174>
340094a4:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
340094a8:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
340094ac:	d124      	bne.n	340094f8 <HAL_XSPI_Command+0x164>
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
340094ae:	6823      	ldr	r3, [r4, #0]
340094b0:	2b00      	cmp	r3, #0
340094b2:	d03d      	beq.n	34009530 <HAL_XSPI_Command+0x19c>
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
340094b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340094b6:	f033 6300 	bics.w	r3, r3, #134217728	@ 0x8000000
340094ba:	d004      	beq.n	340094c6 <HAL_XSPI_Command+0x132>
340094bc:	f240 3161 	movw	r1, #865	@ 0x361
340094c0:	483f      	ldr	r0, [pc, #252]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
340094c2:	f7f7 fc9f 	bl	34000e04 <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
340094c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340094c8:	2b1f      	cmp	r3, #31
340094ca:	d91d      	bls.n	34009508 <HAL_XSPI_Command+0x174>
340094cc:	f240 3162 	movw	r1, #866	@ 0x362
340094d0:	483b      	ldr	r0, [pc, #236]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
340094d2:	f7f7 fc97 	bl	34000e04 <assert_failed>
340094d6:	e017      	b.n	34009508 <HAL_XSPI_Command+0x174>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
340094d8:	f240 3155 	movw	r1, #853	@ 0x355
340094dc:	4838      	ldr	r0, [pc, #224]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
340094de:	f7f7 fc91 	bl	34000e04 <assert_failed>
340094e2:	e7bb      	b.n	3400945c <HAL_XSPI_Command+0xc8>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
340094e4:	b181      	cbz	r1, 34009508 <HAL_XSPI_Command+0x174>
340094e6:	f021 7300 	bic.w	r3, r1, #33554432	@ 0x2000000
340094ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340094ee:	d0de      	beq.n	340094ae <HAL_XSPI_Command+0x11a>
340094f0:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
340094f4:	d1d6      	bne.n	340094a4 <HAL_XSPI_Command+0x110>
340094f6:	e7da      	b.n	340094ae <HAL_XSPI_Command+0x11a>
340094f8:	f240 3159 	movw	r1, #857	@ 0x359
340094fc:	4830      	ldr	r0, [pc, #192]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
340094fe:	f7f7 fc81 	bl	34000e04 <assert_failed>
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34009502:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34009504:	2b00      	cmp	r3, #0
34009506:	d1d2      	bne.n	340094ae <HAL_XSPI_Command+0x11a>
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
34009508:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3400950a:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
3400950e:	d004      	beq.n	3400951a <HAL_XSPI_Command+0x186>
34009510:	f240 3165 	movw	r1, #869	@ 0x365
34009514:	482a      	ldr	r0, [pc, #168]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
34009516:	f7f7 fc75 	bl	34000e04 <assert_failed>
  state = hxspi->State;
3400951a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3400951c:	2b02      	cmp	r3, #2
3400951e:	d110      	bne.n	34009542 <HAL_XSPI_Command+0x1ae>
34009520:	68eb      	ldr	r3, [r5, #12]
34009522:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34009526:	d112      	bne.n	3400954e <HAL_XSPI_Command+0x1ba>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34009528:	2310      	movs	r3, #16
    status = HAL_ERROR;
3400952a:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400952c:	65eb      	str	r3, [r5, #92]	@ 0x5c
3400952e:	e028      	b.n	34009582 <HAL_XSPI_Command+0x1ee>
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
34009530:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34009532:	2b00      	cmp	r3, #0
34009534:	d1be      	bne.n	340094b4 <HAL_XSPI_Command+0x120>
34009536:	f240 315f 	movw	r1, #863	@ 0x35f
3400953a:	4821      	ldr	r0, [pc, #132]	@ (340095c0 <HAL_XSPI_Command+0x22c>)
3400953c:	f7f7 fc62 	bl	34000e04 <assert_failed>
34009540:	e7b8      	b.n	340094b4 <HAL_XSPI_Command+0x120>
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
34009542:	2b14      	cmp	r3, #20
34009544:	d11f      	bne.n	34009586 <HAL_XSPI_Command+0x1f2>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
34009546:	6823      	ldr	r3, [r4, #0]
34009548:	3b02      	subs	r3, #2
3400954a:	2b01      	cmp	r3, #1
3400954c:	d8ec      	bhi.n	34009528 <HAL_XSPI_Command+0x194>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400954e:	4633      	mov	r3, r6
34009550:	2200      	movs	r2, #0
34009552:	2120      	movs	r1, #32
34009554:	4628      	mov	r0, r5
34009556:	9700      	str	r7, [sp, #0]
34009558:	f7ff fdb6 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3400955c:	bb70      	cbnz	r0, 340095bc <HAL_XSPI_Command+0x228>
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3400955e:	65e8      	str	r0, [r5, #92]	@ 0x5c
      status = XSPI_ConfigCmd(hxspi, pCmd);
34009560:	4621      	mov	r1, r4
34009562:	4628      	mov	r0, r5
34009564:	f7ff fcae 	bl	34008ec4 <XSPI_ConfigCmd>
      if (status == HAL_OK)
34009568:	b958      	cbnz	r0, 34009582 <HAL_XSPI_Command+0x1ee>
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3400956a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400956c:	b99b      	cbnz	r3, 34009596 <HAL_XSPI_Command+0x202>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400956e:	4633      	mov	r3, r6
34009570:	2201      	movs	r2, #1
34009572:	2102      	movs	r1, #2
34009574:	4628      	mov	r0, r5
34009576:	9700      	str	r7, [sp, #0]
34009578:	f7ff fda6 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400957c:	2202      	movs	r2, #2
3400957e:	682b      	ldr	r3, [r5, #0]
34009580:	625a      	str	r2, [r3, #36]	@ 0x24
}
34009582:	b003      	add	sp, #12
34009584:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
34009586:	2b24      	cmp	r3, #36	@ 0x24
34009588:	d1ce      	bne.n	34009528 <HAL_XSPI_Command+0x194>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3400958a:	6823      	ldr	r3, [r4, #0]
3400958c:	f023 0302 	bic.w	r3, r3, #2
34009590:	2b01      	cmp	r3, #1
34009592:	d1c9      	bne.n	34009528 <HAL_XSPI_Command+0x194>
34009594:	e7db      	b.n	3400954e <HAL_XSPI_Command+0x1ba>
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34009596:	6823      	ldr	r3, [r4, #0]
34009598:	b90b      	cbnz	r3, 3400959e <HAL_XSPI_Command+0x20a>
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3400959a:	2304      	movs	r3, #4
3400959c:	e005      	b.n	340095aa <HAL_XSPI_Command+0x216>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3400959e:	2b01      	cmp	r3, #1
340095a0:	d105      	bne.n	340095ae <HAL_XSPI_Command+0x21a>
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
340095a2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
340095a4:	2b24      	cmp	r3, #36	@ 0x24
340095a6:	d0f8      	beq.n	3400959a <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
340095a8:	2314      	movs	r3, #20
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
340095aa:	65ab      	str	r3, [r5, #88]	@ 0x58
340095ac:	e7e9      	b.n	34009582 <HAL_XSPI_Command+0x1ee>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
340095ae:	2b02      	cmp	r3, #2
340095b0:	d1e7      	bne.n	34009582 <HAL_XSPI_Command+0x1ee>
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
340095b2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
340095b4:	2b14      	cmp	r3, #20
340095b6:	d0f0      	beq.n	3400959a <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
340095b8:	2324      	movs	r3, #36	@ 0x24
340095ba:	e7f6      	b.n	340095aa <HAL_XSPI_Command+0x216>
      status = HAL_BUSY;
340095bc:	2002      	movs	r0, #2
340095be:	e7e0      	b.n	34009582 <HAL_XSPI_Command+0x1ee>
340095c0:	34038d86 	.word	0x34038d86

340095c4 <HAL_XSPI_Transmit>:
{
340095c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
340095c8:	4604      	mov	r4, r0
340095ca:	4688      	mov	r8, r1
340095cc:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
340095ce:	f7f8 ff05 	bl	340023dc <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
340095d2:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
340095d4:	4605      	mov	r5, r0
  if (pData == NULL)
340095d6:	f1b8 0f00 	cmp.w	r8, #0
340095da:	d103      	bne.n	340095e4 <HAL_XSPI_Transmit+0x20>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
340095dc:	2308      	movs	r3, #8
    status = HAL_ERROR;
340095de:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340095e0:	65e3      	str	r3, [r4, #92]	@ 0x5c
340095e2:	e02e      	b.n	34009642 <HAL_XSPI_Transmit+0x7e>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
340095e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
340095e6:	2b04      	cmp	r3, #4
340095e8:	d12e      	bne.n	34009648 <HAL_XSPI_Transmit+0x84>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
340095ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
340095ec:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
340095f0:	3301      	adds	r3, #1
340095f2:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
340095f4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340095f6:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
340095f8:	683b      	ldr	r3, [r7, #0]
340095fa:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
340095fe:	603b      	str	r3, [r7, #0]
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
34009600:	462b      	mov	r3, r5
34009602:	2201      	movs	r2, #1
34009604:	2104      	movs	r1, #4
34009606:	4620      	mov	r0, r4
34009608:	9600      	str	r6, [sp, #0]
3400960a:	f7ff fd5d 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3400960e:	b9c0      	cbnz	r0, 34009642 <HAL_XSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
34009610:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34009612:	781b      	ldrb	r3, [r3, #0]
34009614:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hxspi->pBuffPtr++;
34009618:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400961a:	3301      	adds	r3, #1
3400961c:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3400961e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34009620:	3b01      	subs	r3, #1
34009622:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
34009624:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34009626:	2b00      	cmp	r3, #0
34009628:	d1ea      	bne.n	34009600 <HAL_XSPI_Transmit+0x3c>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3400962a:	462b      	mov	r3, r5
3400962c:	2201      	movs	r2, #1
3400962e:	2102      	movs	r1, #2
34009630:	4620      	mov	r0, r4
34009632:	9600      	str	r6, [sp, #0]
34009634:	f7ff fd48 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
34009638:	b918      	cbnz	r0, 34009642 <HAL_XSPI_Transmit+0x7e>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3400963a:	2302      	movs	r3, #2
3400963c:	6822      	ldr	r2, [r4, #0]
3400963e:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
34009640:	65a3      	str	r3, [r4, #88]	@ 0x58
}
34009642:	b002      	add	sp, #8
34009644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34009648:	2310      	movs	r3, #16
3400964a:	e7c8      	b.n	340095de <HAL_XSPI_Transmit+0x1a>

3400964c <HAL_XSPI_Receive>:
{
3400964c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
34009650:	4604      	mov	r4, r0
34009652:	4616      	mov	r6, r2
34009654:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
34009656:	f7f8 fec1 	bl	340023dc <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3400965a:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3400965c:	4607      	mov	r7, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400965e:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
34009660:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
34009664:	f1b8 0f00 	cmp.w	r8, #0
34009668:	d103      	bne.n	34009672 <HAL_XSPI_Receive+0x26>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3400966a:	2308      	movs	r3, #8
    status = HAL_ERROR;
3400966c:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3400966e:	65e3      	str	r3, [r4, #92]	@ 0x5c
34009670:	e035      	b.n	340096de <HAL_XSPI_Receive+0x92>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
34009672:	6da3      	ldr	r3, [r4, #88]	@ 0x58
34009674:	2b04      	cmp	r3, #4
34009676:	d13d      	bne.n	340096f4 <HAL_XSPI_Receive+0xa8>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
34009678:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
3400967a:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3400967e:	3301      	adds	r3, #1
34009680:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
34009682:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34009684:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
34009686:	6829      	ldr	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34009688:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3400968a:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
3400968e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34009692:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
34009696:	6029      	str	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34009698:	d124      	bne.n	340096e4 <HAL_XSPI_Receive+0x98>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3400969a:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3400969c:	463b      	mov	r3, r7
3400969e:	2201      	movs	r2, #1
340096a0:	2106      	movs	r1, #6
340096a2:	4620      	mov	r0, r4
340096a4:	9600      	str	r6, [sp, #0]
340096a6:	f7ff fd0f 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
340096aa:	b9c0      	cbnz	r0, 340096de <HAL_XSPI_Receive+0x92>
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
340096ac:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
340096b0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340096b2:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
340096b4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340096b6:	3301      	adds	r3, #1
340096b8:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
340096ba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340096bc:	3b01      	subs	r3, #1
340096be:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
340096c0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340096c2:	2b00      	cmp	r3, #0
340096c4:	d1ea      	bne.n	3400969c <HAL_XSPI_Receive+0x50>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
340096c6:	463b      	mov	r3, r7
340096c8:	2201      	movs	r2, #1
340096ca:	2102      	movs	r1, #2
340096cc:	4620      	mov	r0, r4
340096ce:	9600      	str	r6, [sp, #0]
340096d0:	f7ff fcfa 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
340096d4:	b918      	cbnz	r0, 340096de <HAL_XSPI_Receive+0x92>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
340096d6:	2302      	movs	r3, #2
340096d8:	6822      	ldr	r2, [r4, #0]
340096da:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
340096dc:	65a3      	str	r3, [r4, #88]	@ 0x58
}
340096de:	b002      	add	sp, #8
340096e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
340096e4:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
340096e8:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
340096ec:	d1d5      	bne.n	3400969a <HAL_XSPI_Receive+0x4e>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
340096ee:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
340096f2:	e7d3      	b.n	3400969c <HAL_XSPI_Receive+0x50>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340096f4:	2310      	movs	r3, #16
340096f6:	e7b9      	b.n	3400966c <HAL_XSPI_Receive+0x20>

340096f8 <HAL_XSPI_AutoPolling>:
{
340096f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
340096fc:	4604      	mov	r4, r0
340096fe:	460d      	mov	r5, r1
34009700:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
34009702:	f7f8 fe6b 	bl	340023dc <HAL_GetTick>
  uint32_t addr_reg = hxspi->Instance->AR;
34009706:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
34009708:	4606      	mov	r6, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3400970a:	f8d3 8048 	ldr.w	r8, [r3, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3400970e:	f8d3 9110 	ldr.w	r9, [r3, #272]	@ 0x110
  uint32_t dlr_reg = hxspi->Instance->DLR;
34009712:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
34009716:	68ab      	ldr	r3, [r5, #8]
34009718:	f433 0300 	bics.w	r3, r3, #8388608	@ 0x800000
3400971c:	d004      	beq.n	34009728 <HAL_XSPI_AutoPolling+0x30>
3400971e:	f240 7133 	movw	r1, #1843	@ 0x733
34009722:	4832      	ldr	r0, [pc, #200]	@ (340097ec <HAL_XSPI_AutoPolling+0xf4>)
34009724:	f7f7 fb6e 	bl	34000e04 <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
34009728:	68eb      	ldr	r3, [r5, #12]
3400972a:	f433 0380 	bics.w	r3, r3, #4194304	@ 0x400000
3400972e:	d004      	beq.n	3400973a <HAL_XSPI_AutoPolling+0x42>
34009730:	f240 7134 	movw	r1, #1844	@ 0x734
34009734:	482d      	ldr	r0, [pc, #180]	@ (340097ec <HAL_XSPI_AutoPolling+0xf4>)
34009736:	f7f7 fb65 	bl	34000e04 <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3400973a:	692b      	ldr	r3, [r5, #16]
3400973c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34009740:	d304      	bcc.n	3400974c <HAL_XSPI_AutoPolling+0x54>
34009742:	f240 7135 	movw	r1, #1845	@ 0x735
34009746:	4829      	ldr	r0, [pc, #164]	@ (340097ec <HAL_XSPI_AutoPolling+0xf4>)
34009748:	f7f7 fb5c 	bl	34000e04 <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3400974c:	f1ba 0f03 	cmp.w	sl, #3
34009750:	d904      	bls.n	3400975c <HAL_XSPI_AutoPolling+0x64>
34009752:	f240 7136 	movw	r1, #1846	@ 0x736
34009756:	4825      	ldr	r0, [pc, #148]	@ (340097ec <HAL_XSPI_AutoPolling+0xf4>)
34009758:	f7f7 fb54 	bl	34000e04 <assert_failed>
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3400975c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400975e:	2b04      	cmp	r3, #4
34009760:	d13e      	bne.n	340097e0 <HAL_XSPI_AutoPolling+0xe8>
34009762:	68eb      	ldr	r3, [r5, #12]
34009764:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34009768:	d13a      	bne.n	340097e0 <HAL_XSPI_AutoPolling+0xe8>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3400976a:	4633      	mov	r3, r6
3400976c:	2200      	movs	r2, #0
3400976e:	2120      	movs	r1, #32
34009770:	4620      	mov	r0, r4
34009772:	9700      	str	r7, [sp, #0]
34009774:	f7ff fca8 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
34009778:	2800      	cmp	r0, #0
3400977a:	d135      	bne.n	340097e8 <HAL_XSPI_AutoPolling+0xf0>
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3400977c:	682b      	ldr	r3, [r5, #0]
3400977e:	6821      	ldr	r1, [r4, #0]
34009780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
34009784:	686b      	ldr	r3, [r5, #4]
34009786:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3400978a:	692b      	ldr	r3, [r5, #16]
3400978c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
34009790:	680a      	ldr	r2, [r1, #0]
34009792:	e9d5 3502 	ldrd	r3, r5, [r5, #8]
34009796:	431d      	orrs	r5, r3
34009798:	f022 5343 	bic.w	r3, r2, #817889280	@ 0x30c00000
3400979c:	431d      	orrs	r5, r3
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3400979e:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
340097a0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
340097a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
340097a8:	600d      	str	r5, [r1, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
340097aa:	d111      	bne.n	340097d0 <HAL_XSPI_AutoPolling+0xd8>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
340097ac:	f8c1 8048 	str.w	r8, [r1, #72]	@ 0x48
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
340097b0:	4633      	mov	r3, r6
340097b2:	2201      	movs	r2, #1
340097b4:	2108      	movs	r1, #8
340097b6:	4620      	mov	r0, r4
340097b8:	9700      	str	r7, [sp, #0]
340097ba:	f7ff fc85 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
340097be:	b920      	cbnz	r0, 340097ca <HAL_XSPI_AutoPolling+0xd2>
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
340097c0:	2208      	movs	r2, #8
340097c2:	6823      	ldr	r3, [r4, #0]
340097c4:	625a      	str	r2, [r3, #36]	@ 0x24
        hxspi->State = HAL_XSPI_STATE_READY;
340097c6:	2302      	movs	r3, #2
340097c8:	65a3      	str	r3, [r4, #88]	@ 0x58
}
340097ca:	b002      	add	sp, #8
340097cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
340097d0:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
340097d4:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
340097d8:	d1e8      	bne.n	340097ac <HAL_XSPI_AutoPolling+0xb4>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
340097da:	f8c1 9110 	str.w	r9, [r1, #272]	@ 0x110
340097de:	e7e7      	b.n	340097b0 <HAL_XSPI_AutoPolling+0xb8>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340097e0:	2310      	movs	r3, #16
    status = HAL_ERROR;
340097e2:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340097e4:	65e3      	str	r3, [r4, #92]	@ 0x5c
340097e6:	e7f0      	b.n	340097ca <HAL_XSPI_AutoPolling+0xd2>
      status = HAL_BUSY;
340097e8:	2002      	movs	r0, #2
340097ea:	e7ee      	b.n	340097ca <HAL_XSPI_AutoPolling+0xd2>
340097ec:	34038d86 	.word	0x34038d86

340097f0 <HAL_XSPI_MemoryMapped>:
{
340097f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
340097f2:	460c      	mov	r4, r1
340097f4:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
340097f6:	f7f8 fdf1 	bl	340023dc <HAL_GetTick>
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
340097fa:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
340097fc:	4606      	mov	r6, r0
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
340097fe:	f033 0308 	bics.w	r3, r3, #8
34009802:	d004      	beq.n	3400980e <HAL_XSPI_MemoryMapped+0x1e>
34009804:	f240 71c7 	movw	r1, #1991	@ 0x7c7
34009808:	482f      	ldr	r0, [pc, #188]	@ (340098c8 <HAL_XSPI_MemoryMapped+0xd8>)
3400980a:	f7f7 fafb 	bl	34000e04 <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3400980e:	68a3      	ldr	r3, [r4, #8]
34009810:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
34009814:	d004      	beq.n	34009820 <HAL_XSPI_MemoryMapped+0x30>
34009816:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
3400981a:	482b      	ldr	r0, [pc, #172]	@ (340098c8 <HAL_XSPI_MemoryMapped+0xd8>)
3400981c:	f7f7 faf2 	bl	34000e04 <assert_failed>
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
34009820:	6dab      	ldr	r3, [r5, #88]	@ 0x58
34009822:	2b04      	cmp	r3, #4
34009824:	d14b      	bne.n	340098be <HAL_XSPI_MemoryMapped+0xce>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34009826:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
34009828:	2200      	movs	r2, #0
3400982a:	9300      	str	r3, [sp, #0]
3400982c:	2120      	movs	r1, #32
3400982e:	4633      	mov	r3, r6
34009830:	4628      	mov	r0, r5
34009832:	f7ff fc49 	bl	340090c8 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
34009836:	4606      	mov	r6, r0
34009838:	bb58      	cbnz	r0, 34009892 <HAL_XSPI_MemoryMapped+0xa2>
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3400983a:	2388      	movs	r3, #136	@ 0x88
3400983c:	65ab      	str	r3, [r5, #88]	@ 0x58
      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3400983e:	68a3      	ldr	r3, [r4, #8]
34009840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34009844:	d128      	bne.n	34009898 <HAL_XSPI_MemoryMapped+0xa8>
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
34009846:	682a      	ldr	r2, [r5, #0]
34009848:	6813      	ldr	r3, [r2, #0]
3400984a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3400984e:	6013      	str	r3, [r2, #0]
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
34009850:	6823      	ldr	r3, [r4, #0]
34009852:	2b08      	cmp	r3, #8
34009854:	d112      	bne.n	3400987c <HAL_XSPI_MemoryMapped+0x8c>
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
34009856:	6863      	ldr	r3, [r4, #4]
34009858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400985c:	d304      	bcc.n	34009868 <HAL_XSPI_MemoryMapped+0x78>
3400985e:	f240 71e4 	movw	r1, #2020	@ 0x7e4
34009862:	4819      	ldr	r0, [pc, #100]	@ (340098c8 <HAL_XSPI_MemoryMapped+0xd8>)
34009864:	f7f7 face 	bl	34000e04 <assert_failed>
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
34009868:	682b      	ldr	r3, [r5, #0]
3400986a:	6862      	ldr	r2, [r4, #4]
3400986c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
34009870:	2210      	movs	r2, #16
34009872:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
34009874:	681a      	ldr	r2, [r3, #0]
34009876:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3400987a:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3400987c:	682a      	ldr	r2, [r5, #0]
3400987e:	6821      	ldr	r1, [r4, #0]
34009880:	6813      	ldr	r3, [r2, #0]
34009882:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
34009886:	f023 0308 	bic.w	r3, r3, #8
3400988a:	430b      	orrs	r3, r1
3400988c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
34009890:	6013      	str	r3, [r2, #0]
}
34009892:	4630      	mov	r0, r6
34009894:	b002      	add	sp, #8
34009896:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
34009898:	68e3      	ldr	r3, [r4, #12]
3400989a:	f033 6380 	bics.w	r3, r3, #67108864	@ 0x4000000
3400989e:	d004      	beq.n	340098aa <HAL_XSPI_MemoryMapped+0xba>
340098a0:	f240 71dc 	movw	r1, #2012	@ 0x7dc
340098a4:	4808      	ldr	r0, [pc, #32]	@ (340098c8 <HAL_XSPI_MemoryMapped+0xd8>)
340098a6:	f7f7 faad 	bl	34000e04 <assert_failed>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
340098aa:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
340098ae:	6829      	ldr	r1, [r5, #0]
340098b0:	4303      	orrs	r3, r0
340098b2:	680a      	ldr	r2, [r1, #0]
340098b4:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
340098b8:	4313      	orrs	r3, r2
340098ba:	600b      	str	r3, [r1, #0]
340098bc:	e7c8      	b.n	34009850 <HAL_XSPI_MemoryMapped+0x60>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340098be:	2310      	movs	r3, #16
    status = HAL_ERROR;
340098c0:	2601      	movs	r6, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340098c2:	65eb      	str	r3, [r5, #92]	@ 0x5c
340098c4:	e7e5      	b.n	34009892 <HAL_XSPI_MemoryMapped+0xa2>
340098c6:	bf00      	nop
340098c8:	34038d86 	.word	0x34038d86

340098cc <HAL_XSPI_SetClockPrescaler>:
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
340098cc:	29ff      	cmp	r1, #255	@ 0xff
{
340098ce:	b538      	push	{r3, r4, r5, lr}
340098d0:	4604      	mov	r4, r0
340098d2:	460d      	mov	r5, r1
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
340098d4:	d904      	bls.n	340098e0 <HAL_XSPI_SetClockPrescaler+0x14>
340098d6:	f640 2192 	movw	r1, #2706	@ 0xa92
340098da:	4809      	ldr	r0, [pc, #36]	@ (34009900 <HAL_XSPI_SetClockPrescaler+0x34>)
340098dc:	f7f7 fa92 	bl	34000e04 <assert_failed>
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
340098e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
340098e2:	f010 0008 	ands.w	r0, r0, #8
340098e6:	d107      	bne.n	340098f8 <HAL_XSPI_SetClockPrescaler+0x2c>
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
340098e8:	6822      	ldr	r2, [r4, #0]
    hxspi->Init.ClockPrescaler = Prescaler;
340098ea:	6265      	str	r5, [r4, #36]	@ 0x24
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
340098ec:	68d3      	ldr	r3, [r2, #12]
340098ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
340098f2:	432b      	orrs	r3, r5
340098f4:	60d3      	str	r3, [r2, #12]
}
340098f6:	bd38      	pop	{r3, r4, r5, pc}
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340098f8:	2310      	movs	r3, #16
    status = HAL_ERROR;
340098fa:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340098fc:	65e3      	str	r3, [r4, #92]	@ 0x5c
340098fe:	e7fa      	b.n	340098f6 <HAL_XSPI_SetClockPrescaler+0x2a>
34009900:	34038d86 	.word	0x34038d86

34009904 <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
34009904:	b570      	push	{r4, r5, r6, lr}
  if (done != 0)
34009906:	4ba6      	ldr	r3, [pc, #664]	@ (34009ba0 <LL_ATON_Init+0x29c>)
{
34009908:	b088      	sub	sp, #32
  if (done != 0)
3400990a:	781a      	ldrb	r2, [r3, #0]
3400990c:	b90a      	cbnz	r2, 34009912 <LL_ATON_Init+0xe>
  done = 1;
3400990e:	2201      	movs	r2, #1
34009910:	701a      	strb	r2, [r3, #0]
  int i;

  ll_aton_static_checks();

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
34009912:	4ba4      	ldr	r3, [pc, #656]	@ (34009ba4 <LL_ATON_Init+0x2a0>)
34009914:	681a      	ldr	r2, [r3, #0]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
34009916:	f042 0202 	orr.w	r2, r2, #2
  ATON_CLKCTRL_CTRL_SET(0, t);
3400991a:	601a      	str	r2, [r3, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
3400991c:	2201      	movs	r2, #1
3400991e:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
34009920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34009924:	609a      	str	r2, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
34009926:	60da      	str	r2, [r3, #12]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
34009928:	2200      	movs	r2, #0
3400992a:	611a      	str	r2, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400992c:	4a9e      	ldr	r2, [pc, #632]	@ (34009ba8 <LL_ATON_Init+0x2a4>)
3400992e:	6854      	ldr	r4, [r2, #4]
34009930:	2c00      	cmp	r4, #0
34009932:	d0fc      	beq.n	3400992e <LL_ATON_Init+0x2a>
34009934:	b2e5      	uxtb	r5, r4
34009936:	2d01      	cmp	r5, #1
34009938:	f3c4 3603 	ubfx	r6, r4, #12, #4
3400993c:	f3c4 2403 	ubfx	r4, r4, #8, #4
34009940:	f040 80ea 	bne.w	34009b18 <LL_ATON_Init+0x214>
34009944:	2e05      	cmp	r6, #5
34009946:	f040 80e7 	bne.w	34009b18 <LL_ATON_Init+0x214>
3400994a:	2c00      	cmp	r4, #0
3400994c:	f040 80e4 	bne.w	34009b18 <LL_ATON_Init+0x214>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
34009950:	4a96      	ldr	r2, [pc, #600]	@ (34009bac <LL_ATON_Init+0x2a8>)
34009952:	6854      	ldr	r4, [r2, #4]
34009954:	2c00      	cmp	r4, #0
34009956:	d0fc      	beq.n	34009952 <LL_ATON_Init+0x4e>
34009958:	b2e5      	uxtb	r5, r4
3400995a:	2d17      	cmp	r5, #23
3400995c:	f3c4 3603 	ubfx	r6, r4, #12, #4
34009960:	f3c4 2403 	ubfx	r4, r4, #8, #4
34009964:	f040 80fb 	bne.w	34009b5e <LL_ATON_Init+0x25a>
34009968:	2e05      	cmp	r6, #5
3400996a:	f040 80f8 	bne.w	34009b5e <LL_ATON_Init+0x25a>
3400996e:	2c01      	cmp	r4, #1
34009970:	f040 80f5 	bne.w	34009b5e <LL_ATON_Init+0x25a>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
34009974:	4a8e      	ldr	r2, [pc, #568]	@ (34009bb0 <LL_ATON_Init+0x2ac>)
34009976:	6854      	ldr	r4, [r2, #4]
34009978:	2c00      	cmp	r4, #0
3400997a:	d0fc      	beq.n	34009976 <LL_ATON_Init+0x72>
3400997c:	b2e5      	uxtb	r5, r4
3400997e:	2d1c      	cmp	r5, #28
34009980:	f3c4 3603 	ubfx	r6, r4, #12, #4
34009984:	f3c4 2403 	ubfx	r4, r4, #8, #4
34009988:	f040 8134 	bne.w	34009bf4 <LL_ATON_Init+0x2f0>
3400998c:	2e01      	cmp	r6, #1
3400998e:	f040 8131 	bne.w	34009bf4 <LL_ATON_Init+0x2f0>
34009992:	2c01      	cmp	r4, #1
34009994:	f040 812e 	bne.w	34009bf4 <LL_ATON_Init+0x2f0>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
34009998:	4a86      	ldr	r2, [pc, #536]	@ (34009bb4 <LL_ATON_Init+0x2b0>)
3400999a:	6854      	ldr	r4, [r2, #4]
3400999c:	2c00      	cmp	r4, #0
3400999e:	d0fc      	beq.n	3400999a <LL_ATON_Init+0x96>
340099a0:	b2e5      	uxtb	r5, r4
340099a2:	2d1a      	cmp	r5, #26
340099a4:	f3c4 3603 	ubfx	r6, r4, #12, #4
340099a8:	f3c4 2403 	ubfx	r4, r4, #8, #4
340099ac:	f040 8141 	bne.w	34009c32 <LL_ATON_Init+0x32e>
340099b0:	2e01      	cmp	r6, #1
340099b2:	f040 813e 	bne.w	34009c32 <LL_ATON_Init+0x32e>
340099b6:	2c00      	cmp	r4, #0
340099b8:	f040 813b 	bne.w	34009c32 <LL_ATON_Init+0x32e>
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
340099bc:	4a7e      	ldr	r2, [pc, #504]	@ (34009bb8 <LL_ATON_Init+0x2b4>)
340099be:	6854      	ldr	r4, [r2, #4]
340099c0:	2c00      	cmp	r4, #0
340099c2:	d0fc      	beq.n	340099be <LL_ATON_Init+0xba>
340099c4:	b2e5      	uxtb	r5, r4
340099c6:	2d1b      	cmp	r5, #27
340099c8:	f3c4 3603 	ubfx	r6, r4, #12, #4
340099cc:	f3c4 2403 	ubfx	r4, r4, #8, #4
340099d0:	f040 814f 	bne.w	34009c72 <LL_ATON_Init+0x36e>
340099d4:	2e01      	cmp	r6, #1
340099d6:	f040 814c 	bne.w	34009c72 <LL_ATON_Init+0x36e>
340099da:	2c01      	cmp	r4, #1
340099dc:	f040 8149 	bne.w	34009c72 <LL_ATON_Init+0x36e>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
340099e0:	4a76      	ldr	r2, [pc, #472]	@ (34009bbc <LL_ATON_Init+0x2b8>)
340099e2:	6854      	ldr	r4, [r2, #4]
340099e4:	2c00      	cmp	r4, #0
340099e6:	d0fc      	beq.n	340099e2 <LL_ATON_Init+0xde>
340099e8:	b2e5      	uxtb	r5, r4
340099ea:	2d19      	cmp	r5, #25
340099ec:	f3c4 3603 	ubfx	r6, r4, #12, #4
340099f0:	f3c4 2403 	ubfx	r4, r4, #8, #4
340099f4:	f040 815c 	bne.w	34009cb0 <LL_ATON_Init+0x3ac>
340099f8:	2e01      	cmp	r6, #1
340099fa:	f040 8159 	bne.w	34009cb0 <LL_ATON_Init+0x3ac>
340099fe:	2c0a      	cmp	r4, #10
34009a00:	f040 8156 	bne.w	34009cb0 <LL_ATON_Init+0x3ac>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
34009a04:	4a6e      	ldr	r2, [pc, #440]	@ (34009bc0 <LL_ATON_Init+0x2bc>)
34009a06:	6854      	ldr	r4, [r2, #4]
34009a08:	2c00      	cmp	r4, #0
34009a0a:	d0fc      	beq.n	34009a06 <LL_ATON_Init+0x102>
34009a0c:	b2e5      	uxtb	r5, r4
34009a0e:	2d21      	cmp	r5, #33	@ 0x21
34009a10:	f3c4 3603 	ubfx	r6, r4, #12, #4
34009a14:	f3c4 2403 	ubfx	r4, r4, #8, #4
34009a18:	f040 816a 	bne.w	34009cf0 <LL_ATON_Init+0x3ec>
34009a1c:	2e01      	cmp	r6, #1
34009a1e:	f040 8167 	bne.w	34009cf0 <LL_ATON_Init+0x3ec>
34009a22:	2c01      	cmp	r4, #1
34009a24:	f040 8164 	bne.w	34009cf0 <LL_ATON_Init+0x3ec>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
34009a28:	4a66      	ldr	r2, [pc, #408]	@ (34009bc4 <LL_ATON_Init+0x2c0>)
34009a2a:	6854      	ldr	r4, [r2, #4]
34009a2c:	2c00      	cmp	r4, #0
34009a2e:	d0fc      	beq.n	34009a2a <LL_ATON_Init+0x126>
34009a30:	b2e5      	uxtb	r5, r4
34009a32:	2d20      	cmp	r5, #32
34009a34:	f3c4 3603 	ubfx	r6, r4, #12, #4
34009a38:	f3c4 2403 	ubfx	r4, r4, #8, #4
34009a3c:	f040 8177 	bne.w	34009d2e <LL_ATON_Init+0x42a>
34009a40:	2e03      	cmp	r6, #3
34009a42:	f040 8174 	bne.w	34009d2e <LL_ATON_Init+0x42a>
34009a46:	2c02      	cmp	r4, #2
34009a48:	f040 8171 	bne.w	34009d2e <LL_ATON_Init+0x42a>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
34009a4c:	4a55      	ldr	r2, [pc, #340]	@ (34009ba4 <LL_ATON_Init+0x2a0>)
34009a4e:	6854      	ldr	r4, [r2, #4]
34009a50:	2c00      	cmp	r4, #0
34009a52:	d0fc      	beq.n	34009a4e <LL_ATON_Init+0x14a>
34009a54:	b2e5      	uxtb	r5, r4
34009a56:	2d1f      	cmp	r5, #31
34009a58:	f3c4 3603 	ubfx	r6, r4, #12, #4
34009a5c:	f3c4 2403 	ubfx	r4, r4, #8, #4
34009a60:	f040 8186 	bne.w	34009d70 <LL_ATON_Init+0x46c>
34009a64:	2e01      	cmp	r6, #1
34009a66:	f040 8183 	bne.w	34009d70 <LL_ATON_Init+0x46c>
34009a6a:	2c02      	cmp	r4, #2
34009a6c:	f040 8180 	bne.w	34009d70 <LL_ATON_Init+0x46c>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
34009a70:	4a55      	ldr	r2, [pc, #340]	@ (34009bc8 <LL_ATON_Init+0x2c4>)
34009a72:	6854      	ldr	r4, [r2, #4]
34009a74:	2c00      	cmp	r4, #0
34009a76:	d0fc      	beq.n	34009a72 <LL_ATON_Init+0x16e>
34009a78:	b2e5      	uxtb	r5, r4
34009a7a:	2d1e      	cmp	r5, #30
34009a7c:	f3c4 3603 	ubfx	r6, r4, #12, #4
34009a80:	f3c4 2403 	ubfx	r4, r4, #8, #4
34009a84:	f040 8195 	bne.w	34009db2 <LL_ATON_Init+0x4ae>
34009a88:	2e01      	cmp	r6, #1
34009a8a:	f040 8192 	bne.w	34009db2 <LL_ATON_Init+0x4ae>
34009a8e:	2c01      	cmp	r4, #1
34009a90:	f040 818f 	bne.w	34009db2 <LL_ATON_Init+0x4ae>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
34009a94:	4a4d      	ldr	r2, [pc, #308]	@ (34009bcc <LL_ATON_Init+0x2c8>)
34009a96:	6854      	ldr	r4, [r2, #4]
34009a98:	2c00      	cmp	r4, #0
34009a9a:	d0fc      	beq.n	34009a96 <LL_ATON_Init+0x192>
34009a9c:	f3c4 3503 	ubfx	r5, r4, #12, #4
34009aa0:	f3c4 2603 	ubfx	r6, r4, #8, #4
34009aa4:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
34009aa8:	f040 81a2 	bne.w	34009df0 <LL_ATON_Init+0x4ec>
34009aac:	2d01      	cmp	r5, #1
34009aae:	f040 819f 	bne.w	34009df0 <LL_ATON_Init+0x4ec>
34009ab2:	2e06      	cmp	r6, #6
34009ab4:	f040 819c 	bne.w	34009df0 <LL_ATON_Init+0x4ec>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
34009ab8:	4a45      	ldr	r2, [pc, #276]	@ (34009bd0 <LL_ATON_Init+0x2cc>)
34009aba:	6854      	ldr	r4, [r2, #4]
34009abc:	2c00      	cmp	r4, #0
34009abe:	d0fc      	beq.n	34009aba <LL_ATON_Init+0x1b6>
34009ac0:	b2e5      	uxtb	r5, r4
34009ac2:	2d1d      	cmp	r5, #29
34009ac4:	f3c4 3603 	ubfx	r6, r4, #12, #4
34009ac8:	f3c4 2403 	ubfx	r4, r4, #8, #4
34009acc:	d104      	bne.n	34009ad8 <LL_ATON_Init+0x1d4>
34009ace:	2e05      	cmp	r6, #5
34009ad0:	d102      	bne.n	34009ad8 <LL_ATON_Init+0x1d4>
34009ad2:	2c00      	cmp	r4, #0
34009ad4:	f000 81ae 	beq.w	34009e34 <LL_ATON_Init+0x530>
34009ad8:	f005 fb0a 	bl	3400f0f0 <__errno>
34009adc:	6803      	ldr	r3, [r0, #0]
34009ade:	2b00      	cmp	r3, #0
34009ae0:	f000 81a6 	beq.w	34009e30 <LL_ATON_Init+0x52c>
34009ae4:	f005 fb04 	bl	3400f0f0 <__errno>
34009ae8:	6800      	ldr	r0, [r0, #0]
34009aea:	f005 fa9b 	bl	3400f024 <strerror>
34009aee:	4603      	mov	r3, r0
34009af0:	2205      	movs	r2, #5
34009af2:	2100      	movs	r1, #0
34009af4:	e9cd 2105 	strd	r2, r1, [sp, #20]
34009af8:	221d      	movs	r2, #29
34009afa:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009afe:	4a35      	ldr	r2, [pc, #212]	@ (34009bd4 <LL_ATON_Init+0x2d0>)
34009b00:	4935      	ldr	r1, [pc, #212]	@ (34009bd8 <LL_ATON_Init+0x2d4>)
34009b02:	9200      	str	r2, [sp, #0]
34009b04:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009b08:	22fd      	movs	r2, #253	@ 0xfd
34009b0a:	4834      	ldr	r0, [pc, #208]	@ (34009bdc <LL_ATON_Init+0x2d8>)
34009b0c:	f004 ff54 	bl	3400e9b8 <iprintf>
34009b10:	21fd      	movs	r1, #253	@ 0xfd
34009b12:	4b33      	ldr	r3, [pc, #204]	@ (34009be0 <LL_ATON_Init+0x2dc>)
34009b14:	4a33      	ldr	r2, [pc, #204]	@ (34009be4 <LL_ATON_Init+0x2e0>)
34009b16:	e01d      	b.n	34009b54 <LL_ATON_Init+0x250>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
34009b18:	f005 faea 	bl	3400f0f0 <__errno>
34009b1c:	6803      	ldr	r3, [r0, #0]
34009b1e:	b1e3      	cbz	r3, 34009b5a <LL_ATON_Init+0x256>
34009b20:	f005 fae6 	bl	3400f0f0 <__errno>
34009b24:	6800      	ldr	r0, [r0, #0]
34009b26:	f005 fa7d 	bl	3400f024 <strerror>
34009b2a:	4603      	mov	r3, r0
34009b2c:	2205      	movs	r2, #5
34009b2e:	f04f 0e00 	mov.w	lr, #0
34009b32:	e9cd 2e05 	strd	r2, lr, [sp, #20]
34009b36:	2201      	movs	r2, #1
34009b38:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009b3c:	4a2a      	ldr	r2, [pc, #168]	@ (34009be8 <LL_ATON_Init+0x2e4>)
34009b3e:	4926      	ldr	r1, [pc, #152]	@ (34009bd8 <LL_ATON_Init+0x2d4>)
34009b40:	9200      	str	r2, [sp, #0]
34009b42:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009b46:	22c9      	movs	r2, #201	@ 0xc9
34009b48:	4824      	ldr	r0, [pc, #144]	@ (34009bdc <LL_ATON_Init+0x2d8>)
34009b4a:	f004 ff35 	bl	3400e9b8 <iprintf>
34009b4e:	21c9      	movs	r1, #201	@ 0xc9
34009b50:	4b23      	ldr	r3, [pc, #140]	@ (34009be0 <LL_ATON_Init+0x2dc>)
34009b52:	4a24      	ldr	r2, [pc, #144]	@ (34009be4 <LL_ATON_Init+0x2e0>)
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
34009b54:	4820      	ldr	r0, [pc, #128]	@ (34009bd8 <LL_ATON_Init+0x2d4>)
34009b56:	f004 f94b 	bl	3400ddf0 <__assert_func>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
34009b5a:	4b24      	ldr	r3, [pc, #144]	@ (34009bec <LL_ATON_Init+0x2e8>)
34009b5c:	e7e6      	b.n	34009b2c <LL_ATON_Init+0x228>
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
34009b5e:	f005 fac7 	bl	3400f0f0 <__errno>
34009b62:	6803      	ldr	r3, [r0, #0]
34009b64:	b1d3      	cbz	r3, 34009b9c <LL_ATON_Init+0x298>
34009b66:	f005 fac3 	bl	3400f0f0 <__errno>
34009b6a:	6800      	ldr	r0, [r0, #0]
34009b6c:	f005 fa5a 	bl	3400f024 <strerror>
34009b70:	4603      	mov	r3, r0
34009b72:	2205      	movs	r2, #5
34009b74:	f04f 0c01 	mov.w	ip, #1
34009b78:	e9cd 2c05 	strd	r2, ip, [sp, #20]
34009b7c:	2217      	movs	r2, #23
34009b7e:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009b82:	4a1b      	ldr	r2, [pc, #108]	@ (34009bf0 <LL_ATON_Init+0x2ec>)
34009b84:	4914      	ldr	r1, [pc, #80]	@ (34009bd8 <LL_ATON_Init+0x2d4>)
34009b86:	9200      	str	r2, [sp, #0]
34009b88:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009b8c:	22cc      	movs	r2, #204	@ 0xcc
34009b8e:	4813      	ldr	r0, [pc, #76]	@ (34009bdc <LL_ATON_Init+0x2d8>)
34009b90:	f004 ff12 	bl	3400e9b8 <iprintf>
34009b94:	21cc      	movs	r1, #204	@ 0xcc
34009b96:	4b12      	ldr	r3, [pc, #72]	@ (34009be0 <LL_ATON_Init+0x2dc>)
34009b98:	4a12      	ldr	r2, [pc, #72]	@ (34009be4 <LL_ATON_Init+0x2e0>)
34009b9a:	e7db      	b.n	34009b54 <LL_ATON_Init+0x250>
34009b9c:	4b13      	ldr	r3, [pc, #76]	@ (34009bec <LL_ATON_Init+0x2e8>)
34009b9e:	e7e8      	b.n	34009b72 <LL_ATON_Init+0x26e>
34009ba0:	3403a970 	.word	0x3403a970
34009ba4:	580e0000 	.word	0x580e0000
34009ba8:	580e5000 	.word	0x580e5000
34009bac:	580ef000 	.word	0x580ef000
34009bb0:	580fb000 	.word	0x580fb000
34009bb4:	580f7000 	.word	0x580f7000
34009bb8:	580f5000 	.word	0x580f5000
34009bbc:	580f3000 	.word	0x580f3000
34009bc0:	580fe000 	.word	0x580fe000
34009bc4:	580fd000 	.word	0x580fd000
34009bc8:	580e1000 	.word	0x580e1000
34009bcc:	580e4000 	.word	0x580e4000
34009bd0:	580e2000 	.word	0x580e2000
34009bd4:	34038f6f 	.word	0x34038f6f
34009bd8:	34038e2f 	.word	0x34038e2f
34009bdc:	34038eba 	.word	0x34038eba
34009be0:	34039147 	.word	0x34039147
34009be4:	34038f75 	.word	0x34038f75
34009be8:	34038f1e 	.word	0x34038f1e
34009bec:	34038e2a 	.word	0x34038e2a
34009bf0:	34038f25 	.word	0x34038f25
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
34009bf4:	f005 fa7c 	bl	3400f0f0 <__errno>
34009bf8:	6803      	ldr	r3, [r0, #0]
34009bfa:	b1c3      	cbz	r3, 34009c2e <LL_ATON_Init+0x32a>
34009bfc:	f005 fa78 	bl	3400f0f0 <__errno>
34009c00:	6800      	ldr	r0, [r0, #0]
34009c02:	f005 fa0f 	bl	3400f024 <strerror>
34009c06:	4603      	mov	r3, r0
34009c08:	2201      	movs	r2, #1
34009c0a:	e9cd 2205 	strd	r2, r2, [sp, #20]
34009c0e:	221c      	movs	r2, #28
34009c10:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009c14:	4a8c      	ldr	r2, [pc, #560]	@ (34009e48 <LL_ATON_Init+0x544>)
34009c16:	498d      	ldr	r1, [pc, #564]	@ (34009e4c <LL_ATON_Init+0x548>)
34009c18:	9200      	str	r2, [sp, #0]
34009c1a:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009c1e:	22d0      	movs	r2, #208	@ 0xd0
34009c20:	488b      	ldr	r0, [pc, #556]	@ (34009e50 <LL_ATON_Init+0x54c>)
34009c22:	f004 fec9 	bl	3400e9b8 <iprintf>
34009c26:	21d0      	movs	r1, #208	@ 0xd0
34009c28:	4b8a      	ldr	r3, [pc, #552]	@ (34009e54 <LL_ATON_Init+0x550>)
34009c2a:	4a8b      	ldr	r2, [pc, #556]	@ (34009e58 <LL_ATON_Init+0x554>)
34009c2c:	e792      	b.n	34009b54 <LL_ATON_Init+0x250>
34009c2e:	4b8b      	ldr	r3, [pc, #556]	@ (34009e5c <LL_ATON_Init+0x558>)
34009c30:	e7ea      	b.n	34009c08 <LL_ATON_Init+0x304>
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
34009c32:	f005 fa5d 	bl	3400f0f0 <__errno>
34009c36:	6803      	ldr	r3, [r0, #0]
34009c38:	b1cb      	cbz	r3, 34009c6e <LL_ATON_Init+0x36a>
34009c3a:	f005 fa59 	bl	3400f0f0 <__errno>
34009c3e:	6800      	ldr	r0, [r0, #0]
34009c40:	f005 f9f0 	bl	3400f024 <strerror>
34009c44:	4603      	mov	r3, r0
34009c46:	2201      	movs	r2, #1
34009c48:	2000      	movs	r0, #0
34009c4a:	e9cd 2005 	strd	r2, r0, [sp, #20]
34009c4e:	221a      	movs	r2, #26
34009c50:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009c54:	4a82      	ldr	r2, [pc, #520]	@ (34009e60 <LL_ATON_Init+0x55c>)
34009c56:	497d      	ldr	r1, [pc, #500]	@ (34009e4c <LL_ATON_Init+0x548>)
34009c58:	9200      	str	r2, [sp, #0]
34009c5a:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009c5e:	22d4      	movs	r2, #212	@ 0xd4
34009c60:	487b      	ldr	r0, [pc, #492]	@ (34009e50 <LL_ATON_Init+0x54c>)
34009c62:	f004 fea9 	bl	3400e9b8 <iprintf>
34009c66:	21d4      	movs	r1, #212	@ 0xd4
34009c68:	4b7a      	ldr	r3, [pc, #488]	@ (34009e54 <LL_ATON_Init+0x550>)
34009c6a:	4a7b      	ldr	r2, [pc, #492]	@ (34009e58 <LL_ATON_Init+0x554>)
34009c6c:	e772      	b.n	34009b54 <LL_ATON_Init+0x250>
34009c6e:	4b7b      	ldr	r3, [pc, #492]	@ (34009e5c <LL_ATON_Init+0x558>)
34009c70:	e7e9      	b.n	34009c46 <LL_ATON_Init+0x342>
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
34009c72:	f005 fa3d 	bl	3400f0f0 <__errno>
34009c76:	6803      	ldr	r3, [r0, #0]
34009c78:	b1c3      	cbz	r3, 34009cac <LL_ATON_Init+0x3a8>
34009c7a:	f005 fa39 	bl	3400f0f0 <__errno>
34009c7e:	6800      	ldr	r0, [r0, #0]
34009c80:	f005 f9d0 	bl	3400f024 <strerror>
34009c84:	4603      	mov	r3, r0
34009c86:	2201      	movs	r2, #1
34009c88:	e9cd 2205 	strd	r2, r2, [sp, #20]
34009c8c:	221b      	movs	r2, #27
34009c8e:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009c92:	4a74      	ldr	r2, [pc, #464]	@ (34009e64 <LL_ATON_Init+0x560>)
34009c94:	496d      	ldr	r1, [pc, #436]	@ (34009e4c <LL_ATON_Init+0x548>)
34009c96:	9200      	str	r2, [sp, #0]
34009c98:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009c9c:	22d8      	movs	r2, #216	@ 0xd8
34009c9e:	486c      	ldr	r0, [pc, #432]	@ (34009e50 <LL_ATON_Init+0x54c>)
34009ca0:	f004 fe8a 	bl	3400e9b8 <iprintf>
34009ca4:	21d8      	movs	r1, #216	@ 0xd8
34009ca6:	4b6b      	ldr	r3, [pc, #428]	@ (34009e54 <LL_ATON_Init+0x550>)
34009ca8:	4a6b      	ldr	r2, [pc, #428]	@ (34009e58 <LL_ATON_Init+0x554>)
34009caa:	e753      	b.n	34009b54 <LL_ATON_Init+0x250>
34009cac:	4b6b      	ldr	r3, [pc, #428]	@ (34009e5c <LL_ATON_Init+0x558>)
34009cae:	e7ea      	b.n	34009c86 <LL_ATON_Init+0x382>
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
34009cb0:	f005 fa1e 	bl	3400f0f0 <__errno>
34009cb4:	6803      	ldr	r3, [r0, #0]
34009cb6:	b1cb      	cbz	r3, 34009cec <LL_ATON_Init+0x3e8>
34009cb8:	f005 fa1a 	bl	3400f0f0 <__errno>
34009cbc:	6800      	ldr	r0, [r0, #0]
34009cbe:	f005 f9b1 	bl	3400f024 <strerror>
34009cc2:	4603      	mov	r3, r0
34009cc4:	2201      	movs	r2, #1
34009cc6:	210a      	movs	r1, #10
34009cc8:	e9cd 2105 	strd	r2, r1, [sp, #20]
34009ccc:	2219      	movs	r2, #25
34009cce:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009cd2:	4a65      	ldr	r2, [pc, #404]	@ (34009e68 <LL_ATON_Init+0x564>)
34009cd4:	495d      	ldr	r1, [pc, #372]	@ (34009e4c <LL_ATON_Init+0x548>)
34009cd6:	9200      	str	r2, [sp, #0]
34009cd8:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009cdc:	22dc      	movs	r2, #220	@ 0xdc
34009cde:	485c      	ldr	r0, [pc, #368]	@ (34009e50 <LL_ATON_Init+0x54c>)
34009ce0:	f004 fe6a 	bl	3400e9b8 <iprintf>
34009ce4:	21dc      	movs	r1, #220	@ 0xdc
34009ce6:	4b5b      	ldr	r3, [pc, #364]	@ (34009e54 <LL_ATON_Init+0x550>)
34009ce8:	4a5b      	ldr	r2, [pc, #364]	@ (34009e58 <LL_ATON_Init+0x554>)
34009cea:	e733      	b.n	34009b54 <LL_ATON_Init+0x250>
34009cec:	4b5b      	ldr	r3, [pc, #364]	@ (34009e5c <LL_ATON_Init+0x558>)
34009cee:	e7e9      	b.n	34009cc4 <LL_ATON_Init+0x3c0>
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
34009cf0:	f005 f9fe 	bl	3400f0f0 <__errno>
34009cf4:	6803      	ldr	r3, [r0, #0]
34009cf6:	b1c3      	cbz	r3, 34009d2a <LL_ATON_Init+0x426>
34009cf8:	f005 f9fa 	bl	3400f0f0 <__errno>
34009cfc:	6800      	ldr	r0, [r0, #0]
34009cfe:	f005 f991 	bl	3400f024 <strerror>
34009d02:	4603      	mov	r3, r0
34009d04:	2201      	movs	r2, #1
34009d06:	e9cd 2205 	strd	r2, r2, [sp, #20]
34009d0a:	2221      	movs	r2, #33	@ 0x21
34009d0c:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009d10:	4a56      	ldr	r2, [pc, #344]	@ (34009e6c <LL_ATON_Init+0x568>)
34009d12:	494e      	ldr	r1, [pc, #312]	@ (34009e4c <LL_ATON_Init+0x548>)
34009d14:	9200      	str	r2, [sp, #0]
34009d16:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009d1a:	22e0      	movs	r2, #224	@ 0xe0
34009d1c:	484c      	ldr	r0, [pc, #304]	@ (34009e50 <LL_ATON_Init+0x54c>)
34009d1e:	f004 fe4b 	bl	3400e9b8 <iprintf>
34009d22:	21e0      	movs	r1, #224	@ 0xe0
34009d24:	4b4b      	ldr	r3, [pc, #300]	@ (34009e54 <LL_ATON_Init+0x550>)
34009d26:	4a4c      	ldr	r2, [pc, #304]	@ (34009e58 <LL_ATON_Init+0x554>)
34009d28:	e714      	b.n	34009b54 <LL_ATON_Init+0x250>
34009d2a:	4b4c      	ldr	r3, [pc, #304]	@ (34009e5c <LL_ATON_Init+0x558>)
34009d2c:	e7ea      	b.n	34009d04 <LL_ATON_Init+0x400>
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
34009d2e:	f005 f9df 	bl	3400f0f0 <__errno>
34009d32:	6803      	ldr	r3, [r0, #0]
34009d34:	b1d3      	cbz	r3, 34009d6c <LL_ATON_Init+0x468>
34009d36:	f005 f9db 	bl	3400f0f0 <__errno>
34009d3a:	6800      	ldr	r0, [r0, #0]
34009d3c:	f005 f972 	bl	3400f024 <strerror>
34009d40:	4603      	mov	r3, r0
34009d42:	2203      	movs	r2, #3
34009d44:	f04f 0e02 	mov.w	lr, #2
34009d48:	e9cd 2e05 	strd	r2, lr, [sp, #20]
34009d4c:	2220      	movs	r2, #32
34009d4e:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009d52:	4a47      	ldr	r2, [pc, #284]	@ (34009e70 <LL_ATON_Init+0x56c>)
34009d54:	493d      	ldr	r1, [pc, #244]	@ (34009e4c <LL_ATON_Init+0x548>)
34009d56:	9200      	str	r2, [sp, #0]
34009d58:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009d5c:	22e4      	movs	r2, #228	@ 0xe4
34009d5e:	483c      	ldr	r0, [pc, #240]	@ (34009e50 <LL_ATON_Init+0x54c>)
34009d60:	f004 fe2a 	bl	3400e9b8 <iprintf>
34009d64:	21e4      	movs	r1, #228	@ 0xe4
34009d66:	4b3b      	ldr	r3, [pc, #236]	@ (34009e54 <LL_ATON_Init+0x550>)
34009d68:	4a3b      	ldr	r2, [pc, #236]	@ (34009e58 <LL_ATON_Init+0x554>)
34009d6a:	e6f3      	b.n	34009b54 <LL_ATON_Init+0x250>
34009d6c:	4b3b      	ldr	r3, [pc, #236]	@ (34009e5c <LL_ATON_Init+0x558>)
34009d6e:	e7e8      	b.n	34009d42 <LL_ATON_Init+0x43e>
  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
34009d70:	f005 f9be 	bl	3400f0f0 <__errno>
34009d74:	6803      	ldr	r3, [r0, #0]
34009d76:	b1d3      	cbz	r3, 34009dae <LL_ATON_Init+0x4aa>
34009d78:	f005 f9ba 	bl	3400f0f0 <__errno>
34009d7c:	6800      	ldr	r0, [r0, #0]
34009d7e:	f005 f951 	bl	3400f024 <strerror>
34009d82:	4603      	mov	r3, r0
34009d84:	2201      	movs	r2, #1
34009d86:	f04f 0c02 	mov.w	ip, #2
34009d8a:	e9cd 2c05 	strd	r2, ip, [sp, #20]
34009d8e:	221f      	movs	r2, #31
34009d90:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009d94:	4a37      	ldr	r2, [pc, #220]	@ (34009e74 <LL_ATON_Init+0x570>)
34009d96:	492d      	ldr	r1, [pc, #180]	@ (34009e4c <LL_ATON_Init+0x548>)
34009d98:	9200      	str	r2, [sp, #0]
34009d9a:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009d9e:	22f7      	movs	r2, #247	@ 0xf7
34009da0:	482b      	ldr	r0, [pc, #172]	@ (34009e50 <LL_ATON_Init+0x54c>)
34009da2:	f004 fe09 	bl	3400e9b8 <iprintf>
34009da6:	21f7      	movs	r1, #247	@ 0xf7
34009da8:	4b2a      	ldr	r3, [pc, #168]	@ (34009e54 <LL_ATON_Init+0x550>)
34009daa:	4a2b      	ldr	r2, [pc, #172]	@ (34009e58 <LL_ATON_Init+0x554>)
34009dac:	e6d2      	b.n	34009b54 <LL_ATON_Init+0x250>
34009dae:	4b2b      	ldr	r3, [pc, #172]	@ (34009e5c <LL_ATON_Init+0x558>)
34009db0:	e7e8      	b.n	34009d84 <LL_ATON_Init+0x480>
  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
34009db2:	f005 f99d 	bl	3400f0f0 <__errno>
34009db6:	6803      	ldr	r3, [r0, #0]
34009db8:	b1c3      	cbz	r3, 34009dec <LL_ATON_Init+0x4e8>
34009dba:	f005 f999 	bl	3400f0f0 <__errno>
34009dbe:	6800      	ldr	r0, [r0, #0]
34009dc0:	f005 f930 	bl	3400f024 <strerror>
34009dc4:	4603      	mov	r3, r0
34009dc6:	2201      	movs	r2, #1
34009dc8:	e9cd 2205 	strd	r2, r2, [sp, #20]
34009dcc:	221e      	movs	r2, #30
34009dce:	e9cd 4203 	strd	r4, r2, [sp, #12]
34009dd2:	4a29      	ldr	r2, [pc, #164]	@ (34009e78 <LL_ATON_Init+0x574>)
34009dd4:	491d      	ldr	r1, [pc, #116]	@ (34009e4c <LL_ATON_Init+0x548>)
34009dd6:	9200      	str	r2, [sp, #0]
34009dd8:	e9cd 5601 	strd	r5, r6, [sp, #4]
34009ddc:	22f9      	movs	r2, #249	@ 0xf9
34009dde:	481c      	ldr	r0, [pc, #112]	@ (34009e50 <LL_ATON_Init+0x54c>)
34009de0:	f004 fdea 	bl	3400e9b8 <iprintf>
34009de4:	21f9      	movs	r1, #249	@ 0xf9
34009de6:	4b1b      	ldr	r3, [pc, #108]	@ (34009e54 <LL_ATON_Init+0x550>)
34009de8:	4a1b      	ldr	r2, [pc, #108]	@ (34009e58 <LL_ATON_Init+0x554>)
34009dea:	e6b3      	b.n	34009b54 <LL_ATON_Init+0x250>
34009dec:	4b1b      	ldr	r3, [pc, #108]	@ (34009e5c <LL_ATON_Init+0x558>)
34009dee:	e7ea      	b.n	34009dc6 <LL_ATON_Init+0x4c2>
  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
34009df0:	f005 f97e 	bl	3400f0f0 <__errno>
34009df4:	6803      	ldr	r3, [r0, #0]
34009df6:	b1cb      	cbz	r3, 34009e2c <LL_ATON_Init+0x528>
34009df8:	f005 f97a 	bl	3400f0f0 <__errno>
34009dfc:	6800      	ldr	r0, [r0, #0]
34009dfe:	f005 f911 	bl	3400f024 <strerror>
34009e02:	4603      	mov	r3, r0
34009e04:	2201      	movs	r2, #1
34009e06:	2006      	movs	r0, #6
34009e08:	e9cd 2005 	strd	r2, r0, [sp, #20]
34009e0c:	2200      	movs	r2, #0
34009e0e:	e9cd 6203 	strd	r6, r2, [sp, #12]
34009e12:	4a1a      	ldr	r2, [pc, #104]	@ (34009e7c <LL_ATON_Init+0x578>)
34009e14:	490d      	ldr	r1, [pc, #52]	@ (34009e4c <LL_ATON_Init+0x548>)
34009e16:	9200      	str	r2, [sp, #0]
34009e18:	e9cd 4501 	strd	r4, r5, [sp, #4]
34009e1c:	22fb      	movs	r2, #251	@ 0xfb
34009e1e:	480c      	ldr	r0, [pc, #48]	@ (34009e50 <LL_ATON_Init+0x54c>)
34009e20:	f004 fdca 	bl	3400e9b8 <iprintf>
34009e24:	21fb      	movs	r1, #251	@ 0xfb
34009e26:	4b0b      	ldr	r3, [pc, #44]	@ (34009e54 <LL_ATON_Init+0x550>)
34009e28:	4a0b      	ldr	r2, [pc, #44]	@ (34009e58 <LL_ATON_Init+0x554>)
34009e2a:	e693      	b.n	34009b54 <LL_ATON_Init+0x250>
34009e2c:	4b0b      	ldr	r3, [pc, #44]	@ (34009e5c <LL_ATON_Init+0x558>)
34009e2e:	e7e9      	b.n	34009e04 <LL_ATON_Init+0x500>
  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
34009e30:	4b0a      	ldr	r3, [pc, #40]	@ (34009e5c <LL_ATON_Init+0x558>)
34009e32:	e65d      	b.n	34009af0 <LL_ATON_Init+0x1ec>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 1);
34009e34:	2301      	movs	r3, #1

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);

  return 0;
}
34009e36:	4620      	mov	r0, r4
    ATON_BUSIF_CTRL_SET(i, 1);
34009e38:	6013      	str	r3, [r2, #0]
34009e3a:	4a11      	ldr	r2, [pc, #68]	@ (34009e80 <LL_ATON_Init+0x57c>)
34009e3c:	6013      	str	r3, [r2, #0]
  ATON_INTCTRL_CTRL_SET(0, 1);
34009e3e:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
34009e42:	6013      	str	r3, [r2, #0]
}
34009e44:	b008      	add	sp, #32
34009e46:	bd70      	pop	{r4, r5, r6, pc}
34009e48:	34038f2d 	.word	0x34038f2d
34009e4c:	34038e2f 	.word	0x34038e2f
34009e50:	34038eba 	.word	0x34038eba
34009e54:	34039147 	.word	0x34039147
34009e58:	34038f75 	.word	0x34038f75
34009e5c:	34038e2a 	.word	0x34038e2a
34009e60:	34038f32 	.word	0x34038f32
34009e64:	34038f38 	.word	0x34038f38
34009e68:	34038f3e 	.word	0x34038f3e
34009e6c:	34038f44 	.word	0x34038f44
34009e70:	34038f4e 	.word	0x34038f4e
34009e74:	34038f55 	.word	0x34038f55
34009e78:	34038f5d 	.word	0x34038f5d
34009e7c:	34038f65 	.word	0x34038f65
34009e80:	580e3000 	.word	0x580e3000

34009e84 <LL_ATON_DeInit>:
int LL_ATON_DeInit(void)
{
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
34009e84:	2000      	movs	r0, #0
34009e86:	4b07      	ldr	r3, [pc, #28]	@ (34009ea4 <LL_ATON_DeInit+0x20>)
34009e88:	6018      	str	r0, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 0);
34009e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34009e8e:	6018      	str	r0, [r3, #0]
34009e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34009e94:	6018      	str	r0, [r3, #0]
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
34009e96:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
34009e9a:	6098      	str	r0, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
34009e9c:	60d8      	str	r0, [r3, #12]
  ATON_CLKCTRL_BGATES_SET(0, 0);
34009e9e:	6118      	str	r0, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
34009ea0:	6018      	str	r0, [r3, #0]

  return 0;
}
34009ea2:	4770      	bx	lr
34009ea4:	580e1000 	.word	0x580e1000

34009ea8 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
34009ea8:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  LL_ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
34009eaa:	2401      	movs	r4, #1
34009eac:	2500      	movs	r5, #0
34009eae:	2301      	movs	r3, #1
34009eb0:	ea54 050d 	orrs.w	r5, r4, sp
34009eb4:	4a03      	ldr	r2, [pc, #12]	@ (34009ec4 <LL_ATON_EnableClock+0x1c>)
34009eb6:	4083      	lsls	r3, r0
34009eb8:	6911      	ldr	r1, [r2, #16]
34009eba:	404b      	eors	r3, r1
34009ebc:	4023      	ands	r3, r4
34009ebe:	404b      	eors	r3, r1
34009ec0:	6113      	str	r3, [r2, #16]
#endif
}
34009ec2:	bd30      	pop	{r4, r5, pc}
34009ec4:	580e0000 	.word	0x580e0000

34009ec8 <LL_EpochCtrl_Init>:
  if (id >= ATON_EPOCHCTRL_NUM)
34009ec8:	2800      	cmp	r0, #0
{
34009eca:	b510      	push	{r4, lr}
34009ecc:	460c      	mov	r4, r1
  if (id >= ATON_EPOCHCTRL_NUM)
34009ece:	dc0e      	bgt.n	34009eee <LL_EpochCtrl_Init+0x26>
  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
34009ed0:	3019      	adds	r0, #25
34009ed2:	f7ff ffe9 	bl	34009ea8 <LL_ATON_EnableClock>
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
34009ed6:	7923      	ldrb	r3, [r4, #4]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
34009ed8:	4a08      	ldr	r2, [pc, #32]	@ (34009efc <LL_EpochCtrl_Init+0x34>)
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
34009eda:	f003 0301 	and.w	r3, r3, #1
34009ede:	00db      	lsls	r3, r3, #3
  ATON_EPOCHCTRL_CTRL_SET(id, t);
34009ee0:	6013      	str	r3, [r2, #0]
  if (conf->blobaddr & 0x7)
34009ee2:	6823      	ldr	r3, [r4, #0]
34009ee4:	f013 0007 	ands.w	r0, r3, #7
34009ee8:	d104      	bne.n	34009ef4 <LL_EpochCtrl_Init+0x2c>
  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
34009eea:	6093      	str	r3, [r2, #8]
}
34009eec:	bd10      	pop	{r4, pc}
    return LL_ATON_INVALID_ID;
34009eee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34009ef2:	e7fb      	b.n	34009eec <LL_EpochCtrl_Init+0x24>
    return LL_ATON_INVALID_PARAM;
34009ef4:	f06f 0001 	mvn.w	r0, #1
34009ef8:	e7f8      	b.n	34009eec <LL_EpochCtrl_Init+0x24>
34009efa:	bf00      	nop
34009efc:	580fe000 	.word	0x580fe000

34009f00 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
34009f00:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  LL_ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
34009f02:	2401      	movs	r4, #1
34009f04:	2500      	movs	r5, #0
34009f06:	ea54 050d 	orrs.w	r5, r4, sp
34009f0a:	4a03      	ldr	r2, [pc, #12]	@ (34009f18 <LL_ATON_DisableClock+0x18>)
34009f0c:	6913      	ldr	r3, [r2, #16]
34009f0e:	ea23 0304 	bic.w	r3, r3, r4
34009f12:	6113      	str	r3, [r2, #16]
#endif
}
34009f14:	bd30      	pop	{r4, r5, pc}
34009f16:	bf00      	nop
34009f18:	580e0000 	.word	0x580e0000

34009f1c <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
34009f1c:	b510      	push	{r4, lr}

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
34009f1e:	4604      	mov	r4, r0
34009f20:	b928      	cbnz	r0, 34009f2e <LL_ATON_RT_Main+0x12>
34009f22:	2130      	movs	r1, #48	@ 0x30
34009f24:	4b0f      	ldr	r3, [pc, #60]	@ (34009f64 <LL_ATON_RT_Main+0x48>)
34009f26:	4a10      	ldr	r2, [pc, #64]	@ (34009f68 <LL_ATON_RT_Main+0x4c>)
  LL_ATON_ASSERT(network_instance->network != NULL);
34009f28:	4810      	ldr	r0, [pc, #64]	@ (34009f6c <LL_ATON_RT_Main+0x50>)
34009f2a:	f003 ff61 	bl	3400ddf0 <__assert_func>
34009f2e:	6803      	ldr	r3, [r0, #0]
34009f30:	b91b      	cbnz	r3, 34009f3a <LL_ATON_RT_Main+0x1e>
34009f32:	2131      	movs	r1, #49	@ 0x31
34009f34:	4b0e      	ldr	r3, [pc, #56]	@ (34009f70 <LL_ATON_RT_Main+0x54>)
34009f36:	4a0c      	ldr	r2, [pc, #48]	@ (34009f68 <LL_ATON_RT_Main+0x4c>)
34009f38:	e7f6      	b.n	34009f28 <LL_ATON_RT_Main+0xc>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
34009f3a:	f000 fa05 	bl	3400a348 <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
34009f3e:	4620      	mov	r0, r4
34009f40:	f000 f9c0 	bl	3400a2c4 <LL_ATON_RT_Init_Network>

  do
  {
    /* Execute first/next step of Cube.AI/ATON runtime */
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
34009f44:	4620      	mov	r0, r4
34009f46:	f000 fa79 	bl	3400a43c <LL_ATON_RT_RunEpochBlock>
    /*** Start of user event handling code ***/

    /*** End of user event handling code ***/

    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
34009f4a:	2801      	cmp	r0, #1
34009f4c:	d101      	bne.n	34009f52 <LL_ATON_RT_Main+0x36>
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
34009f4e:	bf20      	wfe
    }
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
34009f50:	e7f8      	b.n	34009f44 <LL_ATON_RT_Main+0x28>
34009f52:	2802      	cmp	r0, #2
34009f54:	d1f6      	bne.n	34009f44 <LL_ATON_RT_Main+0x28>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
34009f56:	4620      	mov	r0, r4
34009f58:	f000 f9d8 	bl	3400a30c <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
34009f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
34009f60:	f000 ba3c 	b.w	3400a3dc <LL_ATON_RT_RuntimeDeInit>
34009f64:	34038f82 	.word	0x34038f82
34009f68:	3403905e 	.word	0x3403905e
34009f6c:	34038fa2 	.word	0x34038fa2
34009f70:	34039035 	.word	0x34039035

34009f74 <__LL_ATON_RT_Init_Network>:
                          // wait for
  }
}

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
34009f74:	b510      	push	{r4, lr}
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
34009f76:	4604      	mov	r4, r0
34009f78:	b310      	cbz	r0, 34009fc0 <__LL_ATON_RT_Init_Network+0x4c>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
34009f7a:	6803      	ldr	r3, [r0, #0]
34009f7c:	b303      	cbz	r3, 34009fc0 <__LL_ATON_RT_Init_Network+0x4c>
    return;
  }

  /** Initialize static variables **/
  /* set context */
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
34009f7e:	69db      	ldr	r3, [r3, #28]
34009f80:	4798      	blx	r3
  nn_instance->exec_state.current_epoch_block = eb_list;
  nn_instance->exec_state.first_epoch_block = eb_list;
  nn_instance->exec_state.next_epoch_block = NULL;
34009f82:	2300      	movs	r3, #0
  nn_instance->exec_state.current_epoch_block = eb_list;
34009f84:	6060      	str	r0, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
34009f86:	60a0      	str	r0, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
34009f88:	60e3      	str	r3, [r4, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
34009f8a:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
34009f8c:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
34009f8e:	6863      	ldr	r3, [r4, #4]
  if (list != NULL)
34009f90:	b9a3      	cbnz	r3, 34009fbc <__LL_ATON_RT_Init_Network+0x48>
  int i = 0;
34009f92:	461a      	mov	r2, r3
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
34009f94:	6262      	str	r2, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
34009f96:	2200      	movs	r2, #0
  nn_instance->exec_state.triggered_events = 0x0;
  nn_instance->exec_state.current_epoch_block_started = false;
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34009f98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
34009f9a:	62a2      	str	r2, [r4, #40]	@ 0x28
  nn_instance->exec_state.inference_started = false;
34009f9c:	7622      	strb	r2, [r4, #24]
  nn_instance->exec_state.triggered_events = 0x0;
34009f9e:	61e2      	str	r2, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
34009fa0:	f884 2020 	strb.w	r2, [r4, #32]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34009fa4:	b163      	cbz	r3, 34009fc0 <__LL_ATON_RT_Init_Network+0x4c>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
34009fa6:	4621      	mov	r1, r4
  }
}
34009fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
34009fac:	2004      	movs	r0, #4
34009fae:	4718      	bx	r3
      list++;
34009fb0:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
34009fb2:	3201      	adds	r2, #1
34009fb4:	8a19      	ldrh	r1, [r3, #16]
34009fb6:	0709      	lsls	r1, r1, #28
34009fb8:	d5fa      	bpl.n	34009fb0 <__LL_ATON_RT_Init_Network+0x3c>
34009fba:	e7eb      	b.n	34009f94 <__LL_ATON_RT_Init_Network+0x20>
34009fbc:	2201      	movs	r2, #1
34009fbe:	e7f9      	b.n	34009fb4 <__LL_ATON_RT_Init_Network+0x40>
}
34009fc0:	bd10      	pop	{r4, pc}
	...

34009fc4 <__ll_clear_aton_owner>:

    __ll_current_aton_ip_owner = new_owner;
  }

  static inline void __ll_clear_aton_owner(NN_Instance_TypeDef *current_owner)
  {
34009fc4:	b508      	push	{r3, lr}
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
34009fc6:	4b09      	ldr	r3, [pc, #36]	@ (34009fec <__ll_clear_aton_owner+0x28>)
34009fc8:	681a      	ldr	r2, [r3, #0]
34009fca:	4282      	cmp	r2, r0
34009fcc:	d005      	beq.n	34009fda <__ll_clear_aton_owner+0x16>
34009fce:	2142      	movs	r1, #66	@ 0x42
34009fd0:	4b07      	ldr	r3, [pc, #28]	@ (34009ff0 <__ll_clear_aton_owner+0x2c>)
34009fd2:	4a08      	ldr	r2, [pc, #32]	@ (34009ff4 <__ll_clear_aton_owner+0x30>)

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
34009fd4:	4808      	ldr	r0, [pc, #32]	@ (34009ff8 <__ll_clear_aton_owner+0x34>)
34009fd6:	f003 ff0b 	bl	3400ddf0 <__assert_func>
34009fda:	4a08      	ldr	r2, [pc, #32]	@ (34009ffc <__ll_clear_aton_owner+0x38>)
34009fdc:	6812      	ldr	r2, [r2, #0]
34009fde:	b11a      	cbz	r2, 34009fe8 <__ll_clear_aton_owner+0x24>
34009fe0:	2146      	movs	r1, #70	@ 0x46
34009fe2:	4b07      	ldr	r3, [pc, #28]	@ (3400a000 <__ll_clear_aton_owner+0x3c>)
34009fe4:	4a03      	ldr	r2, [pc, #12]	@ (34009ff4 <__ll_clear_aton_owner+0x30>)
34009fe6:	e7f5      	b.n	34009fd4 <__ll_clear_aton_owner+0x10>
#endif // NDEBUG

    __ll_current_aton_ip_owner = NULL;
34009fe8:	601a      	str	r2, [r3, #0]
    LL_ATON_UNLOCK_ATON();
  }
34009fea:	bd08      	pop	{r3, pc}
34009fec:	3403a97c 	.word	0x3403a97c
34009ff0:	3403906e 	.word	0x3403906e
34009ff4:	340399a7 	.word	0x340399a7
34009ff8:	3403909a 	.word	0x3403909a
34009ffc:	3403a978 	.word	0x3403a978
3400a000:	3403912d 	.word	0x3403912d

3400a004 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
3400a004:	b508      	push	{r3, lr}
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400a006:	4b07      	ldr	r3, [pc, #28]	@ (3400a024 <__LL_ATON_RT_SetWaitMask+0x20>)
3400a008:	681b      	ldr	r3, [r3, #0]
3400a00a:	b92b      	cbnz	r3, 3400a018 <__LL_ATON_RT_SetWaitMask+0x14>
3400a00c:	2175      	movs	r1, #117	@ 0x75
3400a00e:	4b06      	ldr	r3, [pc, #24]	@ (3400a028 <__LL_ATON_RT_SetWaitMask+0x24>)
3400a010:	4a06      	ldr	r2, [pc, #24]	@ (3400a02c <__LL_ATON_RT_SetWaitMask+0x28>)
3400a012:	4807      	ldr	r0, [pc, #28]	@ (3400a030 <__LL_ATON_RT_SetWaitMask+0x2c>)
3400a014:	f003 feec 	bl	3400ddf0 <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
3400a018:	4b06      	ldr	r3, [pc, #24]	@ (3400a034 <__LL_ATON_RT_SetWaitMask+0x30>)
3400a01a:	6018      	str	r0, [r3, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3400a01c:	43c0      	mvns	r0, r0
3400a01e:	4b06      	ldr	r3, [pc, #24]	@ (3400a038 <__LL_ATON_RT_SetWaitMask+0x34>)
3400a020:	6258      	str	r0, [r3, #36]	@ 0x24
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
3400a022:	bd08      	pop	{r3, pc}
3400a024:	3403a97c 	.word	0x3403a97c
3400a028:	34039149 	.word	0x34039149
3400a02c:	340398fa 	.word	0x340398fa
3400a030:	3403909a 	.word	0x3403909a
3400a034:	3403a978 	.word	0x3403a978
3400a038:	580e1000 	.word	0x580e1000

3400a03c <EpochBlock_EpochControllerUnit>:
  {
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
  }

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
3400a03c:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3400a03e:	8a03      	ldrh	r3, [r0, #16]
3400a040:	075b      	lsls	r3, r3, #29
3400a042:	d406      	bmi.n	3400a052 <EpochBlock_EpochControllerUnit+0x16>
3400a044:	f240 212a 	movw	r1, #554	@ 0x22a
3400a048:	4b03      	ldr	r3, [pc, #12]	@ (3400a058 <EpochBlock_EpochControllerUnit+0x1c>)
3400a04a:	4a04      	ldr	r2, [pc, #16]	@ (3400a05c <EpochBlock_EpochControllerUnit+0x20>)
3400a04c:	4804      	ldr	r0, [pc, #16]	@ (3400a060 <EpochBlock_EpochControllerUnit+0x24>)
3400a04e:	f003 fecf 	bl	3400ddf0 <__assert_func>
    return eb->wait_mask;
  }
3400a052:	68c0      	ldr	r0, [r0, #12]
3400a054:	bd08      	pop	{r3, pc}
3400a056:	bf00      	nop
3400a058:	34039173 	.word	0x34039173
3400a05c:	340398db 	.word	0x340398db
3400a060:	3403918e 	.word	0x3403918e

3400a064 <__LL_ATON_RT_ExecEndEpochBlock>:
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400a064:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
{
3400a066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400a06a:	4605      	mov	r5, r0
3400a06c:	460c      	mov	r4, r1
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400a06e:	b113      	cbz	r3, 3400a076 <__LL_ATON_RT_ExecEndEpochBlock+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
3400a070:	4602      	mov	r2, r0
3400a072:	2002      	movs	r0, #2
3400a074:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400a076:	8a2b      	ldrh	r3, [r5, #16]
3400a078:	0758      	lsls	r0, r3, #29
3400a07a:	d518      	bpl.n	3400a0ae <__LL_ATON_RT_ExecEndEpochBlock+0x4a>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400a07c:	4628      	mov	r0, r5
3400a07e:	f7ff ffdd 	bl	3400a03c <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400a082:	b128      	cbz	r0, 3400a090 <__LL_ATON_RT_ExecEndEpochBlock+0x2c>
3400a084:	21b5      	movs	r1, #181	@ 0xb5
3400a086:	4b25      	ldr	r3, [pc, #148]	@ (3400a11c <__LL_ATON_RT_ExecEndEpochBlock+0xb8>)
3400a088:	4a25      	ldr	r2, [pc, #148]	@ (3400a120 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400a08a:	4826      	ldr	r0, [pc, #152]	@ (3400a124 <__LL_ATON_RT_ExecEndEpochBlock+0xc0>)
3400a08c:	f003 feb0 	bl	3400ddf0 <__assert_func>
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
3400a090:	2202      	movs	r2, #2
3400a092:	4b25      	ldr	r3, [pc, #148]	@ (3400a128 <__LL_ATON_RT_ExecEndEpochBlock+0xc4>)
3400a094:	601a      	str	r2, [r3, #0]
3400a096:	681a      	ldr	r2, [r3, #0]
3400a098:	0791      	lsls	r1, r2, #30
3400a09a:	d4fc      	bmi.n	3400a096 <__LL_ATON_RT_ExecEndEpochBlock+0x32>
3400a09c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400a0a0:	601a      	str	r2, [r3, #0]
3400a0a2:	681a      	ldr	r2, [r3, #0]
3400a0a4:	0052      	lsls	r2, r2, #1
3400a0a6:	d4fc      	bmi.n	3400a0a2 <__LL_ATON_RT_ExecEndEpochBlock+0x3e>
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
3400a0a8:	2019      	movs	r0, #25
3400a0aa:	f7ff ff29 	bl	34009f00 <LL_ATON_DisableClock>
  if (eb->end_epoch_block != NULL)
3400a0ae:	686b      	ldr	r3, [r5, #4]
3400a0b0:	b10b      	cbz	r3, 3400a0b6 <__LL_ATON_RT_ExecEndEpochBlock+0x52>
    eb->end_epoch_block((const void *)eb);
3400a0b2:	4628      	mov	r0, r5
3400a0b4:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
3400a0b6:	8a2e      	ldrh	r6, [r5, #16]
  if (EpochBlock_IsEpochPureHW(eb) ||
3400a0b8:	f016 0f90 	tst.w	r6, #144	@ 0x90
3400a0bc:	f006 07c0 	and.w	r7, r6, #192	@ 0xc0
3400a0c0:	d108      	bne.n	3400a0d4 <__LL_ATON_RT_ExecEndEpochBlock+0x70>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400a0c2:	bb0f      	cbnz	r7, 3400a108 <__LL_ATON_RT_ExecEndEpochBlock+0xa4>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400a0c4:	4b19      	ldr	r3, [pc, #100]	@ (3400a12c <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400a0c6:	681b      	ldr	r3, [r3, #0]
3400a0c8:	42a3      	cmp	r3, r4
3400a0ca:	d115      	bne.n	3400a0f8 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400a0cc:	21d5      	movs	r1, #213	@ 0xd5
3400a0ce:	4b18      	ldr	r3, [pc, #96]	@ (3400a130 <__LL_ATON_RT_ExecEndEpochBlock+0xcc>)
3400a0d0:	4a13      	ldr	r2, [pc, #76]	@ (3400a120 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400a0d2:	e7da      	b.n	3400a08a <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400a0d4:	4b15      	ldr	r3, [pc, #84]	@ (3400a12c <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
3400a0d6:	681b      	ldr	r3, [r3, #0]
3400a0d8:	42a3      	cmp	r3, r4
3400a0da:	d003      	beq.n	3400a0e4 <__LL_ATON_RT_ExecEndEpochBlock+0x80>
3400a0dc:	21c9      	movs	r1, #201	@ 0xc9
3400a0de:	4b15      	ldr	r3, [pc, #84]	@ (3400a134 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>)
3400a0e0:	4a0f      	ldr	r2, [pc, #60]	@ (3400a120 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
3400a0e2:	e7d2      	b.n	3400a08a <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    __LL_ATON_RT_SetWaitMask(0);
3400a0e4:	2000      	movs	r0, #0
3400a0e6:	f7ff ff8d 	bl	3400a004 <__LL_ATON_RT_SetWaitMask>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400a0ea:	06f3      	lsls	r3, r6, #27
3400a0ec:	d5e9      	bpl.n	3400a0c2 <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
    __ll_clear_aton_owner(nn_instance);
3400a0ee:	4620      	mov	r0, r4
3400a0f0:	f7ff ff68 	bl	34009fc4 <__ll_clear_aton_owner>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3400a0f4:	2f00      	cmp	r7, #0
3400a0f6:	d0e5      	beq.n	3400a0c4 <__LL_ATON_RT_ExecEndEpochBlock+0x60>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400a0f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a0fa:	b163      	cbz	r3, 3400a116 <__LL_ATON_RT_ExecEndEpochBlock+0xb2>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400a0fc:	462a      	mov	r2, r5
3400a0fe:	4621      	mov	r1, r4
}
3400a100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400a104:	2003      	movs	r0, #3
3400a106:	4718      	bx	r3
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400a108:	6923      	ldr	r3, [r4, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400a10a:	2b00      	cmp	r3, #0
3400a10c:	d1f4      	bne.n	3400a0f8 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
                                       (nn_instance->exec_state.next_epoch_block ==
3400a10e:	68e3      	ldr	r3, [r4, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3400a110:	2b00      	cmp	r3, #0
3400a112:	d1f1      	bne.n	3400a0f8 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400a114:	e7eb      	b.n	3400a0ee <__LL_ATON_RT_ExecEndEpochBlock+0x8a>
}
3400a116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400a11a:	bf00      	nop
3400a11c:	34039226 	.word	0x34039226
3400a120:	340398bc 	.word	0x340398bc
3400a124:	3403922f 	.word	0x3403922f
3400a128:	580fe000 	.word	0x580fe000
3400a12c:	3403a97c 	.word	0x3403a97c
3400a130:	340392ec 	.word	0x340392ec
3400a134:	340392c2 	.word	0x340392c2

3400a138 <__LL_ATON_RT_DetermineNextEpochBlock>:
{
3400a138:	b508      	push	{r3, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400a13a:	b928      	cbnz	r0, 3400a148 <__LL_ATON_RT_DetermineNextEpochBlock+0x10>
3400a13c:	21e0      	movs	r1, #224	@ 0xe0
3400a13e:	4b19      	ldr	r3, [pc, #100]	@ (3400a1a4 <__LL_ATON_RT_DetermineNextEpochBlock+0x6c>)
3400a140:	4a19      	ldr	r2, [pc, #100]	@ (3400a1a8 <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400a142:	481a      	ldr	r0, [pc, #104]	@ (3400a1ac <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
3400a144:	f003 fe54 	bl	3400ddf0 <__assert_func>
3400a148:	69c3      	ldr	r3, [r0, #28]
3400a14a:	b11b      	cbz	r3, 3400a154 <__LL_ATON_RT_DetermineNextEpochBlock+0x1c>
3400a14c:	21e2      	movs	r1, #226	@ 0xe2
3400a14e:	4b18      	ldr	r3, [pc, #96]	@ (3400a1b0 <__LL_ATON_RT_DetermineNextEpochBlock+0x78>)
3400a150:	4a15      	ldr	r2, [pc, #84]	@ (3400a1a8 <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
3400a152:	e7f6      	b.n	3400a142 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
  if ((nn_instance->exec_state.next_epoch_block != NULL))
3400a154:	68c3      	ldr	r3, [r0, #12]
3400a156:	b30b      	cbz	r3, 3400a19c <__LL_ATON_RT_DetermineNextEpochBlock+0x64>
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
3400a158:	6903      	ldr	r3, [r0, #16]
3400a15a:	b11b      	cbz	r3, 3400a164 <__LL_ATON_RT_DetermineNextEpochBlock+0x2c>
3400a15c:	21ea      	movs	r1, #234	@ 0xea
3400a15e:	4b15      	ldr	r3, [pc, #84]	@ (3400a1b4 <__LL_ATON_RT_DetermineNextEpochBlock+0x7c>)
3400a160:	4a11      	ldr	r2, [pc, #68]	@ (3400a1a8 <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
3400a162:	e7ee      	b.n	3400a142 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
3400a164:	6843      	ldr	r3, [r0, #4]
3400a166:	6103      	str	r3, [r0, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
3400a168:	6883      	ldr	r3, [r0, #8]
3400a16a:	6143      	str	r3, [r0, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
3400a16c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
3400a16e:	6283      	str	r3, [r0, #40]	@ 0x28
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
3400a170:	68c3      	ldr	r3, [r0, #12]
3400a172:	6043      	str	r3, [r0, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
3400a174:	68c3      	ldr	r3, [r0, #12]
3400a176:	6083      	str	r3, [r0, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400a178:	6883      	ldr	r3, [r0, #8]
  if (list != NULL)
3400a17a:	b96b      	cbnz	r3, 3400a198 <__LL_ATON_RT_DetermineNextEpochBlock+0x60>
  int i = 0;
3400a17c:	461a      	mov	r2, r3
    nn_instance->exec_state.next_epoch_block = NULL;
3400a17e:	2300      	movs	r3, #0
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400a180:	6242      	str	r2, [r0, #36]	@ 0x24
    nn_instance->exec_state.next_epoch_block = NULL;
3400a182:	60c3      	str	r3, [r0, #12]
  nn_instance->exec_state.current_epoch_block_started = false;
3400a184:	2300      	movs	r3, #0
3400a186:	f880 3020 	strb.w	r3, [r0, #32]
}
3400a18a:	bd08      	pop	{r3, pc}
      list++;
3400a18c:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3400a18e:	3201      	adds	r2, #1
3400a190:	8a19      	ldrh	r1, [r3, #16]
3400a192:	0709      	lsls	r1, r1, #28
3400a194:	d5fa      	bpl.n	3400a18c <__LL_ATON_RT_DetermineNextEpochBlock+0x54>
3400a196:	e7f2      	b.n	3400a17e <__LL_ATON_RT_DetermineNextEpochBlock+0x46>
3400a198:	2201      	movs	r2, #1
3400a19a:	e7f9      	b.n	3400a190 <__LL_ATON_RT_DetermineNextEpochBlock+0x58>
    nn_instance->exec_state.current_epoch_block++;
3400a19c:	6843      	ldr	r3, [r0, #4]
3400a19e:	3314      	adds	r3, #20
3400a1a0:	6043      	str	r3, [r0, #4]
3400a1a2:	e7ef      	b.n	3400a184 <__LL_ATON_RT_DetermineNextEpochBlock+0x4c>
3400a1a4:	3403935a 	.word	0x3403935a
3400a1a8:	34039897 	.word	0x34039897
3400a1ac:	3403922f 	.word	0x3403922f
3400a1b0:	34039375 	.word	0x34039375
3400a1b4:	340393a5 	.word	0x340393a5

3400a1b8 <dump_dma_state>:
LL_ATON_WEAK void dump_dma_state(void){};
3400a1b8:	4770      	bx	lr
	...

3400a1bc <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3400a1bc:	b538      	push	{r3, r4, r5, lr}
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3400a1be:	4604      	mov	r4, r0
3400a1c0:	2800      	cmp	r0, #0
3400a1c2:	d056      	beq.n	3400a272 <__LL_ATON_RT_IrqErr+0xb6>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
3400a1c4:	4b2b      	ldr	r3, [pc, #172]	@ (3400a274 <__LL_ATON_RT_IrqErr+0xb8>)
3400a1c6:	4218      	tst	r0, r3
3400a1c8:	d002      	beq.n	3400a1d0 <__LL_ATON_RT_IrqErr+0x14>
  {
    LL_ATON_PRINTF("Streaming engine error interrupt\n");
3400a1ca:	482b      	ldr	r0, [pc, #172]	@ (3400a278 <__LL_ATON_RT_IrqErr+0xbc>)
3400a1cc:	f004 fc5c 	bl	3400ea88 <puts>
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3400a1d0:	f3c4 0309 	ubfx	r3, r4, #0, #10
3400a1d4:	b113      	cbz	r3, 3400a1dc <__LL_ATON_RT_IrqErr+0x20>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3400a1d6:	4829      	ldr	r0, [pc, #164]	@ (3400a27c <__LL_ATON_RT_IrqErr+0xc0>)
3400a1d8:	f004 fc56 	bl	3400ea88 <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3400a1dc:	f414 0f70 	tst.w	r4, #15728640	@ 0xf00000
3400a1e0:	d002      	beq.n	3400a1e8 <__LL_ATON_RT_IrqErr+0x2c>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3400a1e2:	4827      	ldr	r0, [pc, #156]	@ (3400a280 <__LL_ATON_RT_IrqErr+0xc4>)
3400a1e4:	f004 fc50 	bl	3400ea88 <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
3400a1e8:	01e5      	lsls	r5, r4, #7
3400a1ea:	d502      	bpl.n	3400a1f2 <__LL_ATON_RT_IrqErr+0x36>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3400a1ec:	4825      	ldr	r0, [pc, #148]	@ (3400a284 <__LL_ATON_RT_IrqErr+0xc8>)
3400a1ee:	f004 fc4b 	bl	3400ea88 <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3400a1f2:	f014 6fc0 	tst.w	r4, #100663296	@ 0x6000000
3400a1f6:	d00e      	beq.n	3400a216 <__LL_ATON_RT_IrqErr+0x5a>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3400a1f8:	4823      	ldr	r0, [pc, #140]	@ (3400a288 <__LL_ATON_RT_IrqErr+0xcc>)
3400a1fa:	f004 fc45 	bl	3400ea88 <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3400a1fe:	4b23      	ldr	r3, [pc, #140]	@ (3400a28c <__LL_ATON_RT_IrqErr+0xd0>)
3400a200:	2100      	movs	r1, #0
3400a202:	691a      	ldr	r2, [r3, #16]
3400a204:	4822      	ldr	r0, [pc, #136]	@ (3400a290 <__LL_ATON_RT_IrqErr+0xd4>)
3400a206:	f004 fbd7 	bl	3400e9b8 <iprintf>
3400a20a:	4b22      	ldr	r3, [pc, #136]	@ (3400a294 <__LL_ATON_RT_IrqErr+0xd8>)
3400a20c:	2101      	movs	r1, #1
3400a20e:	691a      	ldr	r2, [r3, #16]
3400a210:	481f      	ldr	r0, [pc, #124]	@ (3400a290 <__LL_ATON_RT_IrqErr+0xd4>)
3400a212:	f004 fbd1 	bl	3400e9b8 <iprintf>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
3400a216:	0120      	lsls	r0, r4, #4
3400a218:	d502      	bpl.n	3400a220 <__LL_ATON_RT_IrqErr+0x64>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3400a21a:	481f      	ldr	r0, [pc, #124]	@ (3400a298 <__LL_ATON_RT_IrqErr+0xdc>)
3400a21c:	f004 fc34 	bl	3400ea88 <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
3400a220:	0061      	lsls	r1, r4, #1
3400a222:	d50c      	bpl.n	3400a23e <__LL_ATON_RT_IrqErr+0x82>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3400a224:	4d1d      	ldr	r5, [pc, #116]	@ (3400a29c <__LL_ATON_RT_IrqErr+0xe0>)
3400a226:	481e      	ldr	r0, [pc, #120]	@ (3400a2a0 <__LL_ATON_RT_IrqErr+0xe4>)
3400a228:	68e9      	ldr	r1, [r5, #12]
3400a22a:	f004 fbc5 	bl	3400e9b8 <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3400a22e:	6a29      	ldr	r1, [r5, #32]
3400a230:	481c      	ldr	r0, [pc, #112]	@ (3400a2a4 <__LL_ATON_RT_IrqErr+0xe8>)
3400a232:	f004 fbc1 	bl	3400e9b8 <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
3400a236:	69e9      	ldr	r1, [r5, #28]
3400a238:	481b      	ldr	r0, [pc, #108]	@ (3400a2a8 <__LL_ATON_RT_IrqErr+0xec>)
3400a23a:	f004 fbbd 	bl	3400e9b8 <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3400a23e:	00a2      	lsls	r2, r4, #2
3400a240:	d502      	bpl.n	3400a248 <__LL_ATON_RT_IrqErr+0x8c>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3400a242:	481a      	ldr	r0, [pc, #104]	@ (3400a2ac <__LL_ATON_RT_IrqErr+0xf0>)
3400a244:	f004 fc20 	bl	3400ea88 <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3400a248:	00e3      	lsls	r3, r4, #3
3400a24a:	d502      	bpl.n	3400a252 <__LL_ATON_RT_IrqErr+0x96>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3400a24c:	4818      	ldr	r0, [pc, #96]	@ (3400a2b0 <__LL_ATON_RT_IrqErr+0xf4>)
3400a24e:	f004 fc1b 	bl	3400ea88 <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
3400a252:	f7ff ffb1 	bl	3400a1b8 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
3400a256:	4622      	mov	r2, r4
3400a258:	2300      	movs	r3, #0
3400a25a:	f240 21fb 	movw	r1, #763	@ 0x2fb
3400a25e:	4815      	ldr	r0, [pc, #84]	@ (3400a2b4 <__LL_ATON_RT_IrqErr+0xf8>)
3400a260:	f004 fbaa 	bl	3400e9b8 <iprintf>
#if (LL_ATON_HAVE_FFLUSH)
  LL_ATON_FFLUSH(stdout);
#endif
  LL_ATON_ASSERT(false); // may never happen
3400a264:	f240 21ff 	movw	r1, #767	@ 0x2ff
3400a268:	4b13      	ldr	r3, [pc, #76]	@ (3400a2b8 <__LL_ATON_RT_IrqErr+0xfc>)
3400a26a:	4a14      	ldr	r2, [pc, #80]	@ (3400a2bc <__LL_ATON_RT_IrqErr+0x100>)
3400a26c:	4814      	ldr	r0, [pc, #80]	@ (3400a2c0 <__LL_ATON_RT_IrqErr+0x104>)
3400a26e:	f003 fdbf 	bl	3400ddf0 <__assert_func>
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
3400a272:	bd38      	pop	{r3, r4, r5, pc}
3400a274:	000ffc00 	.word	0x000ffc00
3400a278:	340393e6 	.word	0x340393e6
3400a27c:	34039407 	.word	0x34039407
3400a280:	3403942d 	.word	0x3403942d
3400a284:	34039451 	.word	0x34039451
3400a288:	34039471 	.word	0x34039471
3400a28c:	580e2000 	.word	0x580e2000
3400a290:	34039489 	.word	0x34039489
3400a294:	580e3000 	.word	0x580e3000
3400a298:	3403949e 	.word	0x3403949e
3400a29c:	580fe000 	.word	0x580fe000
3400a2a0:	340394b6 	.word	0x340394b6
3400a2a4:	340394ea 	.word	0x340394ea
3400a2a8:	34039514 	.word	0x34039514
3400a2ac:	34039535 	.word	0x34039535
3400a2b0:	34039556 	.word	0x34039556
3400a2b4:	34039571 	.word	0x34039571
3400a2b8:	34039147 	.word	0x34039147
3400a2bc:	34039873 	.word	0x34039873
3400a2c0:	3403922f 	.word	0x3403922f

3400a2c4 <LL_ATON_RT_Init_Network>:
{
3400a2c4:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400a2c6:	4604      	mov	r4, r0
3400a2c8:	b1b0      	cbz	r0, 3400a2f8 <LL_ATON_RT_Init_Network+0x34>
  if (nn_instance->network == NULL)
3400a2ca:	6803      	ldr	r3, [r0, #0]
3400a2cc:	b1a3      	cbz	r3, 3400a2f8 <LL_ATON_RT_Init_Network+0x34>
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
3400a2ce:	685b      	ldr	r3, [r3, #4]
3400a2d0:	b933      	cbnz	r3, 3400a2e0 <LL_ATON_RT_Init_Network+0x1c>
3400a2d2:	f44f 71bb 	mov.w	r1, #374	@ 0x176
3400a2d6:	4b09      	ldr	r3, [pc, #36]	@ (3400a2fc <LL_ATON_RT_Init_Network+0x38>)
3400a2d8:	4a09      	ldr	r2, [pc, #36]	@ (3400a300 <LL_ATON_RT_Init_Network+0x3c>)
  LL_ATON_ASSERT(ret == true);
3400a2da:	480a      	ldr	r0, [pc, #40]	@ (3400a304 <LL_ATON_RT_Init_Network+0x40>)
3400a2dc:	f003 fd88 	bl	3400ddf0 <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
3400a2e0:	4798      	blx	r3
  LL_ATON_ASSERT(ret == true);
3400a2e2:	b920      	cbnz	r0, 3400a2ee <LL_ATON_RT_Init_Network+0x2a>
3400a2e4:	f44f 71bc 	mov.w	r1, #376	@ 0x178
3400a2e8:	4b07      	ldr	r3, [pc, #28]	@ (3400a308 <LL_ATON_RT_Init_Network+0x44>)
3400a2ea:	4a05      	ldr	r2, [pc, #20]	@ (3400a300 <LL_ATON_RT_Init_Network+0x3c>)
3400a2ec:	e7f5      	b.n	3400a2da <LL_ATON_RT_Init_Network+0x16>
  __LL_ATON_RT_Init_Network(nn_instance);
3400a2ee:	4620      	mov	r0, r4
}
3400a2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __LL_ATON_RT_Init_Network(nn_instance);
3400a2f4:	f7ff be3e 	b.w	34009f74 <__LL_ATON_RT_Init_Network>
}
3400a2f8:	bd10      	pop	{r4, pc}
3400a2fa:	bf00      	nop
3400a2fc:	34039598 	.word	0x34039598
3400a300:	340399bd 	.word	0x340399bd
3400a304:	3403922f 	.word	0x3403922f
3400a308:	340395cd 	.word	0x340395cd

3400a30c <LL_ATON_RT_DeInit_Network>:
{
3400a30c:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400a30e:	4604      	mov	r4, r0
3400a310:	b1b8      	cbz	r0, 3400a342 <LL_ATON_RT_DeInit_Network+0x36>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400a312:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400a314:	b11b      	cbz	r3, 3400a31e <LL_ATON_RT_DeInit_Network+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
3400a316:	4601      	mov	r1, r0
3400a318:	2200      	movs	r2, #0
3400a31a:	2005      	movs	r0, #5
3400a31c:	4798      	blx	r3
  if (nn_instance == __ll_current_aton_ip_owner)
3400a31e:	4b09      	ldr	r3, [pc, #36]	@ (3400a344 <LL_ATON_RT_DeInit_Network+0x38>)
3400a320:	681b      	ldr	r3, [r3, #0]
3400a322:	42a3      	cmp	r3, r4
3400a324:	d102      	bne.n	3400a32c <LL_ATON_RT_DeInit_Network+0x20>
    __ll_clear_aton_owner(nn_instance);
3400a326:	4620      	mov	r0, r4
3400a328:	f7ff fe4c 	bl	34009fc4 <__ll_clear_aton_owner>
  nn_instance->exec_state.current_epoch_block = eb_list;
3400a32c:	2300      	movs	r3, #0
3400a32e:	6063      	str	r3, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3400a330:	60a3      	str	r3, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400a332:	60e3      	str	r3, [r4, #12]
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400a334:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400a336:	6163      	str	r3, [r4, #20]
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
3400a338:	6263      	str	r3, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400a33a:	62a3      	str	r3, [r4, #40]	@ 0x28
  nn_instance->exec_state.triggered_events = 0x0;
3400a33c:	61e3      	str	r3, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3400a33e:	f884 3020 	strb.w	r3, [r4, #32]
}
3400a342:	bd10      	pop	{r4, pc}
3400a344:	3403a97c 	.word	0x3403a97c

3400a348 <LL_ATON_RT_RuntimeInit>:
{
3400a348:	b510      	push	{r4, lr}
  LL_ATON_Init();
3400a34a:	f7ff fadb 	bl	34009904 <LL_ATON_Init>
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
3400a34e:	2202      	movs	r2, #2
3400a350:	4b1f      	ldr	r3, [pc, #124]	@ (3400a3d0 <LL_ATON_RT_RuntimeInit+0x88>)
3400a352:	601a      	str	r2, [r3, #0]
3400a354:	681a      	ldr	r2, [r3, #0]
3400a356:	0791      	lsls	r1, r2, #30
3400a358:	d4fc      	bmi.n	3400a354 <LL_ATON_RT_RuntimeInit+0xc>
3400a35a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400a35e:	601a      	str	r2, [r3, #0]
3400a360:	681a      	ldr	r2, [r3, #0]
3400a362:	0052      	lsls	r2, r2, #1
3400a364:	d4fc      	bmi.n	3400a360 <LL_ATON_RT_RuntimeInit+0x18>
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3400a366:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3400a36a:	615a      	str	r2, [r3, #20]
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
3400a36c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400a370:	625a      	str	r2, [r3, #36]	@ 0x24
    ATON_ENABLE(INTCTRL, 0);
3400a372:	681a      	ldr	r2, [r3, #0]
3400a374:	f042 0201 	orr.w	r2, r2, #1
3400a378:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400a37a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400a37e:	4b15      	ldr	r3, [pc, #84]	@ (3400a3d4 <LL_ATON_RT_RuntimeInit+0x8c>)
3400a380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400a384:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400a388:	f3bf 8f6f 	isb	sy
3400a38c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400a390:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400a394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400a398:	f3bf 8f6f 	isb	sy
3400a39c:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
3400a3a0:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400a3a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400a3a8:	f3bf 8f6f 	isb	sy
3400a3ac:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
3400a3b0:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400a3b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400a3b8:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400a3bc:	605a      	str	r2, [r3, #4]
  if (ll_aton_init_deinit_trace)
3400a3be:	4b06      	ldr	r3, [pc, #24]	@ (3400a3d8 <LL_ATON_RT_RuntimeInit+0x90>)
3400a3c0:	681b      	ldr	r3, [r3, #0]
3400a3c2:	b11b      	cbz	r3, 3400a3cc <LL_ATON_RT_RuntimeInit+0x84>
}
3400a3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
3400a3c8:	2006      	movs	r0, #6
3400a3ca:	4718      	bx	r3
}
3400a3cc:	bd10      	pop	{r4, pc}
3400a3ce:	bf00      	nop
3400a3d0:	580e1000 	.word	0x580e1000
3400a3d4:	e000e100 	.word	0xe000e100
3400a3d8:	3403a974 	.word	0x3403a974

3400a3dc <LL_ATON_RT_RuntimeDeInit>:
{
3400a3dc:	b508      	push	{r3, lr}
  if (ll_aton_init_deinit_trace)
3400a3de:	4b15      	ldr	r3, [pc, #84]	@ (3400a434 <LL_ATON_RT_RuntimeDeInit+0x58>)
3400a3e0:	681b      	ldr	r3, [r3, #0]
3400a3e2:	b10b      	cbz	r3, 3400a3e8 <LL_ATON_RT_RuntimeDeInit+0xc>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
3400a3e4:	2007      	movs	r0, #7
3400a3e6:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400a3e8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400a3ec:	4b12      	ldr	r3, [pc, #72]	@ (3400a438 <LL_ATON_RT_RuntimeDeInit+0x5c>)
3400a3ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400a3f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400a3f6:	f3bf 8f6f 	isb	sy
3400a3fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
3400a3fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400a402:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400a406:	f3bf 8f6f 	isb	sy
3400a40a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3400a40e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400a412:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400a416:	f3bf 8f6f 	isb	sy
3400a41a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400a41e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400a422:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400a426:	f3bf 8f6f 	isb	sy
}
3400a42a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DeInit();
3400a42e:	f7ff bd29 	b.w	34009e84 <LL_ATON_DeInit>
3400a432:	bf00      	nop
3400a434:	3403a974 	.word	0x3403a974
3400a438:	e000e100 	.word	0xe000e100

3400a43c <LL_ATON_RT_RunEpochBlock>:
{
3400a43c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400a43e:	4604      	mov	r4, r0
3400a440:	b930      	cbnz	r0, 3400a450 <LL_ATON_RT_RunEpochBlock+0x14>
3400a442:	f240 210f 	movw	r1, #527	@ 0x20f
3400a446:	4b8c      	ldr	r3, [pc, #560]	@ (3400a678 <LL_ATON_RT_RunEpochBlock+0x23c>)
3400a448:	4a8c      	ldr	r2, [pc, #560]	@ (3400a67c <LL_ATON_RT_RunEpochBlock+0x240>)
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
3400a44a:	488d      	ldr	r0, [pc, #564]	@ (3400a680 <LL_ATON_RT_RunEpochBlock+0x244>)
3400a44c:	f003 fcd0 	bl	3400ddf0 <__assert_func>
3400a450:	6843      	ldr	r3, [r0, #4]
3400a452:	b923      	cbnz	r3, 3400a45e <LL_ATON_RT_RunEpochBlock+0x22>
3400a454:	f240 2112 	movw	r1, #530	@ 0x212
3400a458:	4b8a      	ldr	r3, [pc, #552]	@ (3400a684 <LL_ATON_RT_RunEpochBlock+0x248>)
3400a45a:	4a88      	ldr	r2, [pc, #544]	@ (3400a67c <LL_ATON_RT_RunEpochBlock+0x240>)
3400a45c:	e7f5      	b.n	3400a44a <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.inference_started == false)
3400a45e:	7e03      	ldrb	r3, [r0, #24]
3400a460:	b98b      	cbnz	r3, 3400a486 <LL_ATON_RT_RunEpochBlock+0x4a>
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
3400a462:	6803      	ldr	r3, [r0, #0]
3400a464:	b10b      	cbz	r3, 3400a46a <LL_ATON_RT_RunEpochBlock+0x2e>
3400a466:	689b      	ldr	r3, [r3, #8]
3400a468:	b923      	cbnz	r3, 3400a474 <LL_ATON_RT_RunEpochBlock+0x38>
3400a46a:	f44f 7106 	mov.w	r1, #536	@ 0x218
3400a46e:	4b86      	ldr	r3, [pc, #536]	@ (3400a688 <LL_ATON_RT_RunEpochBlock+0x24c>)
3400a470:	4a82      	ldr	r2, [pc, #520]	@ (3400a67c <LL_ATON_RT_RunEpochBlock+0x240>)
3400a472:	e7ea      	b.n	3400a44a <LL_ATON_RT_RunEpochBlock+0xe>
    bool ret = nn_instance->network->ec_inference_init();
3400a474:	4798      	blx	r3
    LL_ATON_ASSERT(ret == true);
3400a476:	b920      	cbnz	r0, 3400a482 <LL_ATON_RT_RunEpochBlock+0x46>
3400a478:	f240 211a 	movw	r1, #538	@ 0x21a
3400a47c:	4b83      	ldr	r3, [pc, #524]	@ (3400a68c <LL_ATON_RT_RunEpochBlock+0x250>)
3400a47e:	4a7f      	ldr	r2, [pc, #508]	@ (3400a67c <LL_ATON_RT_RunEpochBlock+0x240>)
3400a480:	e7e3      	b.n	3400a44a <LL_ATON_RT_RunEpochBlock+0xe>
    nn_instance->exec_state.inference_started = true;
3400a482:	2301      	movs	r3, #1
3400a484:	7623      	strb	r3, [r4, #24]
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
3400a486:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400a488:	8a03      	ldrh	r3, [r0, #16]
3400a48a:	075a      	lsls	r2, r3, #29
3400a48c:	d512      	bpl.n	3400a4b4 <LL_ATON_RT_RunEpochBlock+0x78>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400a48e:	f7ff fdd5 	bl	3400a03c <EpochBlock_EpochControllerUnit>
3400a492:	2301      	movs	r3, #1
3400a494:	fa03 f000 	lsl.w	r0, r3, r0
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
3400a498:	f894 3020 	ldrb.w	r3, [r4, #32]
3400a49c:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
3400a4a0:	b343      	cbz	r3, 3400a4f4 <LL_ATON_RT_RunEpochBlock+0xb8>
3400a4a2:	2800      	cmp	r0, #0
3400a4a4:	d036      	beq.n	3400a514 <LL_ATON_RT_RunEpochBlock+0xd8>
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
3400a4a6:	69e3      	ldr	r3, [r4, #28]
3400a4a8:	ea30 0303 	bics.w	r3, r0, r3
3400a4ac:	d004      	beq.n	3400a4b8 <LL_ATON_RT_RunEpochBlock+0x7c>
        return LL_ATON_RT_WFE;
3400a4ae:	2001      	movs	r0, #1
}
3400a4b0:	b002      	add	sp, #8
3400a4b2:	bd70      	pop	{r4, r5, r6, pc}
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400a4b4:	68c0      	ldr	r0, [r0, #12]
3400a4b6:	e7ef      	b.n	3400a498 <LL_ATON_RT_RunEpochBlock+0x5c>
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
3400a4b8:	4b75      	ldr	r3, [pc, #468]	@ (3400a690 <LL_ATON_RT_RunEpochBlock+0x254>)
3400a4ba:	681b      	ldr	r3, [r3, #0]
3400a4bc:	42a3      	cmp	r3, r4
3400a4be:	d004      	beq.n	3400a4ca <LL_ATON_RT_RunEpochBlock+0x8e>
3400a4c0:	f240 2132 	movw	r1, #562	@ 0x232
3400a4c4:	4b73      	ldr	r3, [pc, #460]	@ (3400a694 <LL_ATON_RT_RunEpochBlock+0x258>)
3400a4c6:	4a6d      	ldr	r2, [pc, #436]	@ (3400a67c <LL_ATON_RT_RunEpochBlock+0x240>)
3400a4c8:	e7bf      	b.n	3400a44a <LL_ATON_RT_RunEpochBlock+0xe>
3400a4ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400a4ce:	4a72      	ldr	r2, [pc, #456]	@ (3400a698 <LL_ATON_RT_RunEpochBlock+0x25c>)
3400a4d0:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400a4d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400a4d8:	f3bf 8f6f 	isb	sy
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
3400a4dc:	69e3      	ldr	r3, [r4, #28]
3400a4de:	ea23 0300 	bic.w	r3, r3, r0
3400a4e2:	61e3      	str	r3, [r4, #28]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400a4e4:	6051      	str	r1, [r2, #4]
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400a4e6:	6860      	ldr	r0, [r4, #4]
3400a4e8:	4621      	mov	r1, r4
3400a4ea:	f7ff fdbb 	bl	3400a064 <__LL_ATON_RT_ExecEndEpochBlock>
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400a4ee:	4620      	mov	r0, r4
3400a4f0:	f7ff fe22 	bl	3400a138 <__LL_ATON_RT_DetermineNextEpochBlock>
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
3400a4f4:	6863      	ldr	r3, [r4, #4]
3400a4f6:	8a1b      	ldrh	r3, [r3, #16]
3400a4f8:	071b      	lsls	r3, r3, #28
3400a4fa:	d534      	bpl.n	3400a566 <LL_ATON_RT_RunEpochBlock+0x12a>
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
3400a4fc:	6923      	ldr	r3, [r4, #16]
3400a4fe:	2b00      	cmp	r3, #0
3400a500:	f000 80b7 	beq.w	3400a672 <LL_ATON_RT_RunEpochBlock+0x236>
      LL_ATON_ASSERT(nn_instance == NULL);

      nn_instance = __ll_current_aton_ip_owner;
    }

    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400a504:	4b62      	ldr	r3, [pc, #392]	@ (3400a690 <LL_ATON_RT_RunEpochBlock+0x254>)
3400a506:	681a      	ldr	r2, [r3, #0]
3400a508:	b932      	cbnz	r2, 3400a518 <LL_ATON_RT_RunEpochBlock+0xdc>
3400a50a:	2197      	movs	r1, #151	@ 0x97
3400a50c:	4b63      	ldr	r3, [pc, #396]	@ (3400a69c <LL_ATON_RT_RunEpochBlock+0x260>)
3400a50e:	4a64      	ldr	r2, [pc, #400]	@ (3400a6a0 <LL_ATON_RT_RunEpochBlock+0x264>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400a510:	4864      	ldr	r0, [pc, #400]	@ (3400a6a4 <LL_ATON_RT_RunEpochBlock+0x268>)
3400a512:	e79b      	b.n	3400a44c <LL_ATON_RT_RunEpochBlock+0x10>
  bool this_run_executed_end_epoch = false;
3400a514:	4606      	mov	r6, r0
3400a516:	e7ed      	b.n	3400a4f4 <LL_ATON_RT_RunEpochBlock+0xb8>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
3400a518:	6862      	ldr	r2, [r4, #4]
3400a51a:	8a12      	ldrh	r2, [r2, #16]
3400a51c:	0716      	lsls	r6, r2, #28
3400a51e:	d403      	bmi.n	3400a528 <LL_ATON_RT_RunEpochBlock+0xec>
3400a520:	2198      	movs	r1, #152	@ 0x98
3400a522:	4b61      	ldr	r3, [pc, #388]	@ (3400a6a8 <LL_ATON_RT_RunEpochBlock+0x26c>)
3400a524:	4a5e      	ldr	r2, [pc, #376]	@ (3400a6a0 <LL_ATON_RT_RunEpochBlock+0x264>)
3400a526:	e7f3      	b.n	3400a510 <LL_ATON_RT_RunEpochBlock+0xd4>
                          : EpochBlock_IsEpochInternal(nn_instance->exec_state.current_epoch_block));
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
3400a528:	6922      	ldr	r2, [r4, #16]
3400a52a:	8a12      	ldrh	r2, [r2, #16]
3400a52c:	0655      	lsls	r5, r2, #25
3400a52e:	d403      	bmi.n	3400a538 <LL_ATON_RT_RunEpochBlock+0xfc>
3400a530:	219a      	movs	r1, #154	@ 0x9a
3400a532:	4b5e      	ldr	r3, [pc, #376]	@ (3400a6ac <LL_ATON_RT_RunEpochBlock+0x270>)
3400a534:	4a5a      	ldr	r2, [pc, #360]	@ (3400a6a0 <LL_ATON_RT_RunEpochBlock+0x264>)
3400a536:	e7eb      	b.n	3400a510 <LL_ATON_RT_RunEpochBlock+0xd4>

    /* Clear owner */
    if (unlock)
    {
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
3400a538:	6818      	ldr	r0, [r3, #0]
3400a53a:	f7ff fd43 	bl	34009fc4 <__ll_clear_aton_owner>
    }

    /* set old context */
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400a53e:	68e3      	ldr	r3, [r4, #12]
3400a540:	b11b      	cbz	r3, 3400a54a <LL_ATON_RT_RunEpochBlock+0x10e>
3400a542:	21a3      	movs	r1, #163	@ 0xa3
3400a544:	4b5a      	ldr	r3, [pc, #360]	@ (3400a6b0 <LL_ATON_RT_RunEpochBlock+0x274>)
3400a546:	4a56      	ldr	r2, [pc, #344]	@ (3400a6a0 <LL_ATON_RT_RunEpochBlock+0x264>)
3400a548:	e7e2      	b.n	3400a510 <LL_ATON_RT_RunEpochBlock+0xd4>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
3400a54a:	6922      	ldr	r2, [r4, #16]
3400a54c:	6062      	str	r2, [r4, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
3400a54e:	6962      	ldr	r2, [r4, #20]
3400a550:	60a2      	str	r2, [r4, #8]

#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
3400a552:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
3400a554:	6262      	str	r2, [r4, #36]	@ 0x24
#endif

    /* reset saved context */
    nn_instance->exec_state.saved_current_epoch_block = NULL;
3400a556:	6123      	str	r3, [r4, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
3400a558:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400a55a:	62a3      	str	r3, [r4, #40]	@ 0x28
        nn_instance->exec_state.current_epoch_block++;
3400a55c:	6863      	ldr	r3, [r4, #4]
3400a55e:	3314      	adds	r3, #20
3400a560:	6063      	str	r3, [r4, #4]
        return LL_ATON_RT_NO_WFE;
3400a562:	2000      	movs	r0, #0
3400a564:	e7a4      	b.n	3400a4b0 <LL_ATON_RT_RunEpochBlock+0x74>
    if (this_run_executed_end_epoch)
3400a566:	2e00      	cmp	r6, #0
3400a568:	d1fb      	bne.n	3400a562 <LL_ATON_RT_RunEpochBlock+0x126>
    if (!nn_instance->exec_state.current_epoch_block_started)
3400a56a:	f894 3020 	ldrb.w	r3, [r4, #32]
3400a56e:	2b00      	cmp	r3, #0
3400a570:	d169      	bne.n	3400a646 <LL_ATON_RT_RunEpochBlock+0x20a>
      nn_instance->exec_state.current_epoch_block_started = true;
3400a572:	2301      	movs	r3, #1
3400a574:	f884 3020 	strb.w	r3, [r4, #32]
      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400a578:	6865      	ldr	r5, [r4, #4]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400a57a:	68e3      	ldr	r3, [r4, #12]
3400a57c:	b11b      	cbz	r3, 3400a586 <LL_ATON_RT_RunEpochBlock+0x14a>
3400a57e:	215f      	movs	r1, #95	@ 0x5f
3400a580:	4b4b      	ldr	r3, [pc, #300]	@ (3400a6b0 <LL_ATON_RT_RunEpochBlock+0x274>)
3400a582:	4a4c      	ldr	r2, [pc, #304]	@ (3400a6b4 <LL_ATON_RT_RunEpochBlock+0x278>)
3400a584:	e761      	b.n	3400a44a <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400a586:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a588:	b11b      	cbz	r3, 3400a592 <LL_ATON_RT_RunEpochBlock+0x156>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
3400a58a:	462a      	mov	r2, r5
3400a58c:	4621      	mov	r1, r4
3400a58e:	4630      	mov	r0, r6
3400a590:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
3400a592:	8a2b      	ldrh	r3, [r5, #16]
  if (EpochBlock_IsEpochStart(eb))
3400a594:	07d8      	lsls	r0, r3, #31
3400a596:	d505      	bpl.n	3400a5a4 <LL_ATON_RT_RunEpochBlock+0x168>
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3400a598:	69e2      	ldr	r2, [r4, #28]
3400a59a:	b11a      	cbz	r2, 3400a5a4 <LL_ATON_RT_RunEpochBlock+0x168>
3400a59c:	2156      	movs	r1, #86	@ 0x56
3400a59e:	4b46      	ldr	r3, [pc, #280]	@ (3400a6b8 <LL_ATON_RT_RunEpochBlock+0x27c>)
3400a5a0:	4a46      	ldr	r2, [pc, #280]	@ (3400a6bc <LL_ATON_RT_RunEpochBlock+0x280>)
3400a5a2:	e7b5      	b.n	3400a510 <LL_ATON_RT_RunEpochBlock+0xd4>
  if (EpochBlock_IsEpochPureHW(eb) ||
3400a5a4:	f013 0f50 	tst.w	r3, #80	@ 0x50
3400a5a8:	d015      	beq.n	3400a5d6 <LL_ATON_RT_RunEpochBlock+0x19a>
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
3400a5aa:	4a39      	ldr	r2, [pc, #228]	@ (3400a690 <LL_ATON_RT_RunEpochBlock+0x254>)
3400a5ac:	6811      	ldr	r1, [r2, #0]
3400a5ae:	428c      	cmp	r4, r1
3400a5b0:	d103      	bne.n	3400a5ba <LL_ATON_RT_RunEpochBlock+0x17e>
3400a5b2:	2131      	movs	r1, #49	@ 0x31
3400a5b4:	4b42      	ldr	r3, [pc, #264]	@ (3400a6c0 <LL_ATON_RT_RunEpochBlock+0x284>)
3400a5b6:	4a43      	ldr	r2, [pc, #268]	@ (3400a6c4 <LL_ATON_RT_RunEpochBlock+0x288>)
3400a5b8:	e7aa      	b.n	3400a510 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
3400a5ba:	6811      	ldr	r1, [r2, #0]
3400a5bc:	b119      	cbz	r1, 3400a5c6 <LL_ATON_RT_RunEpochBlock+0x18a>
3400a5be:	2135      	movs	r1, #53	@ 0x35
3400a5c0:	4b41      	ldr	r3, [pc, #260]	@ (3400a6c8 <LL_ATON_RT_RunEpochBlock+0x28c>)
3400a5c2:	4a40      	ldr	r2, [pc, #256]	@ (3400a6c4 <LL_ATON_RT_RunEpochBlock+0x288>)
3400a5c4:	e7a4      	b.n	3400a510 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3400a5c6:	4941      	ldr	r1, [pc, #260]	@ (3400a6cc <LL_ATON_RT_RunEpochBlock+0x290>)
3400a5c8:	6809      	ldr	r1, [r1, #0]
3400a5ca:	b119      	cbz	r1, 3400a5d4 <LL_ATON_RT_RunEpochBlock+0x198>
3400a5cc:	2139      	movs	r1, #57	@ 0x39
3400a5ce:	4b40      	ldr	r3, [pc, #256]	@ (3400a6d0 <LL_ATON_RT_RunEpochBlock+0x294>)
3400a5d0:	4a3c      	ldr	r2, [pc, #240]	@ (3400a6c4 <LL_ATON_RT_RunEpochBlock+0x288>)
3400a5d2:	e79d      	b.n	3400a510 <LL_ATON_RT_RunEpochBlock+0xd4>
    __ll_current_aton_ip_owner = new_owner;
3400a5d4:	6014      	str	r4, [r2, #0]
  if (!EpochBlock_IsEpochBlob(eb))
3400a5d6:	0759      	lsls	r1, r3, #29
3400a5d8:	d41c      	bmi.n	3400a614 <LL_ATON_RT_RunEpochBlock+0x1d8>
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
3400a5da:	f013 0f90 	tst.w	r3, #144	@ 0x90
3400a5de:	d00a      	beq.n	3400a5f6 <LL_ATON_RT_RunEpochBlock+0x1ba>
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
3400a5e0:	4b2b      	ldr	r3, [pc, #172]	@ (3400a690 <LL_ATON_RT_RunEpochBlock+0x254>)
3400a5e2:	681b      	ldr	r3, [r3, #0]
3400a5e4:	429c      	cmp	r4, r3
3400a5e6:	d003      	beq.n	3400a5f0 <LL_ATON_RT_RunEpochBlock+0x1b4>
3400a5e8:	2176      	movs	r1, #118	@ 0x76
3400a5ea:	4b2a      	ldr	r3, [pc, #168]	@ (3400a694 <LL_ATON_RT_RunEpochBlock+0x258>)
3400a5ec:	4a31      	ldr	r2, [pc, #196]	@ (3400a6b4 <LL_ATON_RT_RunEpochBlock+0x278>)
3400a5ee:	e72c      	b.n	3400a44a <LL_ATON_RT_RunEpochBlock+0xe>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
3400a5f0:	68e8      	ldr	r0, [r5, #12]
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400a5f2:	f7ff fd07 	bl	3400a004 <__LL_ATON_RT_SetWaitMask>
  if (eb->start_epoch_block != NULL)
3400a5f6:	682b      	ldr	r3, [r5, #0]
3400a5f8:	b10b      	cbz	r3, 3400a5fe <LL_ATON_RT_RunEpochBlock+0x1c2>
    eb->start_epoch_block((const void *)eb);
3400a5fa:	4628      	mov	r0, r5
3400a5fc:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
3400a5fe:	8a2b      	ldrh	r3, [r5, #16]
3400a600:	075a      	lsls	r2, r3, #29
3400a602:	d51a      	bpl.n	3400a63a <LL_ATON_RT_RunEpochBlock+0x1fe>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400a604:	4628      	mov	r0, r5
3400a606:	f7ff fd19 	bl	3400a03c <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400a60a:	b130      	cbz	r0, 3400a61a <LL_ATON_RT_RunEpochBlock+0x1de>
3400a60c:	2197      	movs	r1, #151	@ 0x97
3400a60e:	4b31      	ldr	r3, [pc, #196]	@ (3400a6d4 <LL_ATON_RT_RunEpochBlock+0x298>)
3400a610:	4a28      	ldr	r2, [pc, #160]	@ (3400a6b4 <LL_ATON_RT_RunEpochBlock+0x278>)
3400a612:	e71a      	b.n	3400a44a <LL_ATON_RT_RunEpochBlock+0xe>
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3400a614:	f240 30ff 	movw	r0, #1023	@ 0x3ff
3400a618:	e7eb      	b.n	3400a5f2 <LL_ATON_RT_RunEpochBlock+0x1b6>
    conf.stepmode = 0;
3400a61a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400a61e:	68ab      	ldr	r3, [r5, #8]
    conf.stepmode = 0;
3400a620:	f360 0200 	bfi	r2, r0, #0, #1
    LL_EpochCtrl_Init(ecId, &conf);
3400a624:	4669      	mov	r1, sp
    conf.stepmode = 0;
3400a626:	f88d 2004 	strb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400a62a:	9300      	str	r3, [sp, #0]
    LL_EpochCtrl_Init(ecId, &conf);
3400a62c:	f7ff fc4c 	bl	34009ec8 <LL_EpochCtrl_Init>
    ATON_ENABLE(EPOCHCTRL, ecId);
3400a630:	4a29      	ldr	r2, [pc, #164]	@ (3400a6d8 <LL_ATON_RT_RunEpochBlock+0x29c>)
3400a632:	6813      	ldr	r3, [r2, #0]
3400a634:	f043 0301 	orr.w	r3, r3, #1
3400a638:	6013      	str	r3, [r2, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400a63a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a63c:	b11b      	cbz	r3, 3400a646 <LL_ATON_RT_RunEpochBlock+0x20a>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
3400a63e:	462a      	mov	r2, r5
3400a640:	4621      	mov	r1, r4
3400a642:	2001      	movs	r0, #1
3400a644:	4798      	blx	r3
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400a646:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
3400a648:	8a03      	ldrh	r3, [r0, #16]
3400a64a:	075b      	lsls	r3, r3, #29
3400a64c:	d50f      	bpl.n	3400a66e <LL_ATON_RT_RunEpochBlock+0x232>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400a64e:	f7ff fcf5 	bl	3400a03c <EpochBlock_EpochControllerUnit>
3400a652:	2301      	movs	r3, #1
3400a654:	fa03 f000 	lsl.w	r0, r3, r0
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3400a658:	2800      	cmp	r0, #0
3400a65a:	f47f af28 	bne.w	3400a4ae <LL_ATON_RT_RunEpochBlock+0x72>
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400a65e:	6860      	ldr	r0, [r4, #4]
3400a660:	4621      	mov	r1, r4
3400a662:	f7ff fcff 	bl	3400a064 <__LL_ATON_RT_ExecEndEpochBlock>
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400a666:	4620      	mov	r0, r4
3400a668:	f7ff fd66 	bl	3400a138 <__LL_ATON_RT_DetermineNextEpochBlock>
      return LL_ATON_RT_NO_WFE;
3400a66c:	e779      	b.n	3400a562 <LL_ATON_RT_RunEpochBlock+0x126>
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400a66e:	68c0      	ldr	r0, [r0, #12]
3400a670:	e7f2      	b.n	3400a658 <LL_ATON_RT_RunEpochBlock+0x21c>
        return LL_ATON_RT_DONE;
3400a672:	2002      	movs	r0, #2
3400a674:	e71c      	b.n	3400a4b0 <LL_ATON_RT_RunEpochBlock+0x74>
3400a676:	bf00      	nop
3400a678:	3403935a 	.word	0x3403935a
3400a67c:	3403998e 	.word	0x3403998e
3400a680:	3403922f 	.word	0x3403922f
3400a684:	340395d6 	.word	0x340395d6
3400a688:	34039611 	.word	0x34039611
3400a68c:	340395cd 	.word	0x340395cd
3400a690:	3403a97c 	.word	0x3403a97c
3400a694:	34039673 	.word	0x34039673
3400a698:	e000e100 	.word	0xe000e100
3400a69c:	34039149 	.word	0x34039149
3400a6a0:	34039967 	.word	0x34039967
3400a6a4:	3403909a 	.word	0x3403909a
3400a6a8:	3403969d 	.word	0x3403969d
3400a6ac:	34039739 	.word	0x34039739
3400a6b0:	34039785 	.word	0x34039785
3400a6b4:	34039946 	.word	0x34039946
3400a6b8:	34039375 	.word	0x34039375
3400a6bc:	34039927 	.word	0x34039927
3400a6c0:	340397bd 	.word	0x340397bd
3400a6c4:	34039913 	.word	0x34039913
3400a6c8:	340397e5 	.word	0x340397e5
3400a6cc:	3403a978 	.word	0x3403a978
3400a6d0:	3403912d 	.word	0x3403912d
3400a6d4:	34039226 	.word	0x34039226
3400a6d8:	580fe000 	.word	0x580fe000

3400a6dc <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
3400a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400a6de:	4b38      	ldr	r3, [pc, #224]	@ (3400a7c0 <NPU0_IRQHandler+0xe4>)
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
3400a6e0:	4c38      	ldr	r4, [pc, #224]	@ (3400a7c4 <NPU0_IRQHandler+0xe8>)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3400a6e2:	689d      	ldr	r5, [r3, #8]
  if (__ll_current_aton_ip_owner != NULL)
3400a6e4:	6823      	ldr	r3, [r4, #0]
3400a6e6:	b343      	cbz	r3, 3400a73a <NPU0_IRQHandler+0x5e>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3400a6e8:	6823      	ldr	r3, [r4, #0]
3400a6ea:	685b      	ldr	r3, [r3, #4]
3400a6ec:	b933      	cbnz	r3, 3400a6fc <NPU0_IRQHandler+0x20>
3400a6ee:	f240 3162 	movw	r1, #866	@ 0x362
3400a6f2:	4b35      	ldr	r3, [pc, #212]	@ (3400a7c8 <NPU0_IRQHandler+0xec>)
3400a6f4:	4a35      	ldr	r2, [pc, #212]	@ (3400a7cc <NPU0_IRQHandler+0xf0>)
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400a6f6:	4836      	ldr	r0, [pc, #216]	@ (3400a7d0 <NPU0_IRQHandler+0xf4>)
3400a6f8:	f003 fb7a 	bl	3400ddf0 <__assert_func>
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400a6fc:	6823      	ldr	r3, [r4, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
3400a6fe:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3400a700:	8a1b      	ldrh	r3, [r3, #16]
3400a702:	075b      	lsls	r3, r3, #29
3400a704:	d40c      	bmi.n	3400a720 <NPU0_IRQHandler+0x44>
      __LL_ATON_RT_IrqErr(
3400a706:	f425 707f 	bic.w	r0, r5, #1020	@ 0x3fc
3400a70a:	f020 0003 	bic.w	r0, r0, #3
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400a70e:	f7ff fd55 	bl	3400a1bc <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400a712:	6823      	ldr	r3, [r4, #0]
3400a714:	b99b      	cbnz	r3, 3400a73e <NPU0_IRQHandler+0x62>
3400a716:	f240 3183 	movw	r1, #899	@ 0x383
3400a71a:	4b2e      	ldr	r3, [pc, #184]	@ (3400a7d4 <NPU0_IRQHandler+0xf8>)
3400a71c:	4a2b      	ldr	r2, [pc, #172]	@ (3400a7cc <NPU0_IRQHandler+0xf0>)
3400a71e:	e7ea      	b.n	3400a6f6 <NPU0_IRQHandler+0x1a>
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400a720:	6823      	ldr	r3, [r4, #0]
3400a722:	6858      	ldr	r0, [r3, #4]
3400a724:	f7ff fc8a 	bl	3400a03c <EpochBlock_EpochControllerUnit>
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400a728:	b120      	cbz	r0, 3400a734 <NPU0_IRQHandler+0x58>
3400a72a:	f240 316f 	movw	r1, #879	@ 0x36f
3400a72e:	4b2a      	ldr	r3, [pc, #168]	@ (3400a7d8 <NPU0_IRQHandler+0xfc>)
3400a730:	4a26      	ldr	r2, [pc, #152]	@ (3400a7cc <NPU0_IRQHandler+0xf0>)
3400a732:	e7e0      	b.n	3400a6f6 <NPU0_IRQHandler+0x1a>
      __LL_ATON_RT_IrqErr(
3400a734:	f025 5080 	bic.w	r0, r5, #268435456	@ 0x10000000
3400a738:	e7e9      	b.n	3400a70e <NPU0_IRQHandler+0x32>
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400a73a:	4628      	mov	r0, r5
3400a73c:	e7e7      	b.n	3400a70e <NPU0_IRQHandler+0x32>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3400a73e:	6823      	ldr	r3, [r4, #0]
3400a740:	685b      	ldr	r3, [r3, #4]
3400a742:	8a1b      	ldrh	r3, [r3, #16]
3400a744:	f013 0304 	ands.w	r3, r3, #4
3400a748:	d123      	bne.n	3400a792 <NPU0_IRQHandler+0xb6>
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3400a74a:	6822      	ldr	r2, [r4, #0]
3400a74c:	6852      	ldr	r2, [r2, #4]
  wait_irqs =
3400a74e:	68d2      	ldr	r2, [r2, #12]
  if (wait_irqs)
3400a750:	402a      	ands	r2, r5
3400a752:	d017      	beq.n	3400a784 <NPU0_IRQHandler+0xa8>
        _tmp_triggered_events |= (1 << i);
3400a754:	f04f 0c01 	mov.w	ip, #1
3400a758:	200a      	movs	r0, #10
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400a75a:	6821      	ldr	r1, [r4, #0]
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400a75c:	4e1f      	ldr	r6, [pc, #124]	@ (3400a7dc <NPU0_IRQHandler+0x100>)
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400a75e:	69c9      	ldr	r1, [r1, #28]
      if ((wait_irqs >> i) & 1)
3400a760:	fa22 f703 	lsr.w	r7, r2, r3
3400a764:	07ff      	lsls	r7, r7, #31
3400a766:	d507      	bpl.n	3400a778 <NPU0_IRQHandler+0x9c>
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400a768:	031f      	lsls	r7, r3, #12
3400a76a:	f857 e006 	ldr.w	lr, [r7, r6]
        ATON_STRENG_IRQ_SET(
3400a76e:	f847 e006 	str.w	lr, [r7, r6]
        _tmp_triggered_events |= (1 << i);
3400a772:	fa0c f703 	lsl.w	r7, ip, r3
3400a776:	4339      	orrs	r1, r7
    for (i = 0; i < ATON_STRENG_NUM; i++)
3400a778:	3801      	subs	r0, #1
3400a77a:	f103 0301 	add.w	r3, r3, #1
3400a77e:	d1ef      	bne.n	3400a760 <NPU0_IRQHandler+0x84>
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400a780:	6823      	ldr	r3, [r4, #0]
3400a782:	61d9      	str	r1, [r3, #28]
  __ASM volatile ("dsb 0xF":::"memory");
3400a784:	f3bf 8f4f 	dsb	sy
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
3400a788:	4b0d      	ldr	r3, [pc, #52]	@ (3400a7c0 <NPU0_IRQHandler+0xe4>)
3400a78a:	611d      	str	r5, [r3, #16]
3400a78c:	f3bf 8f4f 	dsb	sy
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
}
3400a790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3400a792:	6823      	ldr	r3, [r4, #0]
3400a794:	6858      	ldr	r0, [r3, #4]
3400a796:	f7ff fc51 	bl	3400a03c <EpochBlock_EpochControllerUnit>
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400a79a:	b120      	cbz	r0, 3400a7a6 <NPU0_IRQHandler+0xca>
3400a79c:	f240 3142 	movw	r1, #834	@ 0x342
3400a7a0:	4b0d      	ldr	r3, [pc, #52]	@ (3400a7d8 <NPU0_IRQHandler+0xfc>)
3400a7a2:	4a0f      	ldr	r2, [pc, #60]	@ (3400a7e0 <NPU0_IRQHandler+0x104>)
3400a7a4:	e7a7      	b.n	3400a6f6 <NPU0_IRQHandler+0x1a>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
3400a7a6:	00eb      	lsls	r3, r5, #3
3400a7a8:	d5ec      	bpl.n	3400a784 <NPU0_IRQHandler+0xa8>
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
3400a7aa:	4b0e      	ldr	r3, [pc, #56]	@ (3400a7e4 <NPU0_IRQHandler+0x108>)
3400a7ac:	68da      	ldr	r2, [r3, #12]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
3400a7ae:	60da      	str	r2, [r3, #12]
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400a7b0:	6823      	ldr	r3, [r4, #0]
3400a7b2:	69db      	ldr	r3, [r3, #28]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400a7b4:	6822      	ldr	r2, [r4, #0]
    _tmp_triggered_events |= (1 << ecId);
3400a7b6:	f043 0301 	orr.w	r3, r3, #1
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3400a7ba:	61d3      	str	r3, [r2, #28]
3400a7bc:	e7e2      	b.n	3400a784 <NPU0_IRQHandler+0xa8>
3400a7be:	bf00      	nop
3400a7c0:	580e1000 	.word	0x580e1000
3400a7c4:	3403a97c 	.word	0x3403a97c
3400a7c8:	3403980f 	.word	0x3403980f
3400a7cc:	34039887 	.word	0x34039887
3400a7d0:	3403922f 	.word	0x3403922f
3400a7d4:	34039149 	.word	0x34039149
3400a7d8:	34039226 	.word	0x34039226
3400a7dc:	580e503c 	.word	0x580e503c
3400a7e0:	34039859 	.word	0x34039859
3400a7e4:	580fe000 	.word	0x580fe000

3400a7e8 <ll_sw_forward_dequantizelinear>:
{
  Dequantizelinear_sw_info *sw_info = (Dequantizelinear_sw_info *)sw_info_struct;

  // array init
  int32_t format = sw_info->general.input.format.is_signed ? (AI_ARRAY_FORMAT_S8 | AI_FMT_FLAG_IS_IO)
                                                           : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
3400a7e8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
3400a7ec:	4a47      	ldr	r2, [pc, #284]	@ (3400a90c <ll_sw_forward_dequantizelinear+0x124>)
3400a7ee:	2b00      	cmp	r3, #0
3400a7f0:	4b47      	ldr	r3, [pc, #284]	@ (3400a910 <ll_sw_forward_dequantizelinear+0x128>)
3400a7f2:	bf18      	it	ne
3400a7f4:	4613      	movne	r3, r2
{
3400a7f6:	b510      	push	{r4, lr}
3400a7f8:	b0c4      	sub	sp, #272	@ 0x110
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
3400a7fa:	930a      	str	r3, [sp, #40]	@ 0x28
3400a7fc:	6943      	ldr	r3, [r0, #20]
                                  .info = (const ai_intq_info[1]){{
                                      .scale = ((float *)sw_info->is.mem.start_offset),
                                      .zeropoint = ((void *)sw_info->izp.mem.start_offset),
                                  }}};

  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a7fe:	f04f 7482 	mov.w	r4, #17039360	@ 0x1040000
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
3400a802:	930b      	str	r3, [sp, #44]	@ 0x2c
3400a804:	6a83      	ldr	r3, [r0, #40]	@ 0x28
3400a806:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  AI_ARRAY_OBJ_DECLARE(dequantize_output_array, FORMAT, sw_info->general.output.mem.start_offset,
3400a80a:	4b42      	ldr	r3, [pc, #264]	@ (3400a914 <ll_sw_forward_dequantizelinear+0x12c>)
3400a80c:	930e      	str	r3, [sp, #56]	@ 0x38
3400a80e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
3400a810:	930f      	str	r3, [sp, #60]	@ 0x3c
3400a812:	6d43      	ldr	r3, [r0, #84]	@ 0x54
3400a814:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  uint16_t offset_format =
3400a818:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
3400a81c:	2b00      	cmp	r3, #0
3400a81e:	bf0c      	ite	eq
3400a820:	2202      	moveq	r2, #2
3400a822:	2204      	movne	r2, #4
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
3400a824:	f042 0201 	orr.w	r2, r2, #1
3400a828:	f8ad 2010 	strh.w	r2, [sp, #16]
3400a82c:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
3400a82e:	ab04      	add	r3, sp, #16
3400a830:	f8ad 2012 	strh.w	r2, [sp, #18]
                                  .info = (const ai_intq_info[1]){{
3400a834:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a838:	9322      	str	r3, [sp, #136]	@ 0x88
                                  .info = (const ai_intq_info[1]){{
3400a83a:	9206      	str	r2, [sp, #24]
3400a83c:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a840:	6903      	ldr	r3, [r0, #16]
                                  .info = (const ai_intq_info[1]){{
3400a842:	9207      	str	r2, [sp, #28]
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
3400a844:	aa06      	add	r2, sp, #24
3400a846:	9205      	str	r2, [sp, #20]
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a848:	f240 4201 	movw	r2, #1025	@ 0x401
3400a84c:	9312      	str	r3, [sp, #72]	@ 0x48
3400a84e:	68c3      	ldr	r3, [r0, #12]
3400a850:	e9cd 4223 	strd	r4, r2, [sp, #140]	@ 0x8c
3400a854:	9313      	str	r3, [sp, #76]	@ 0x4c
3400a856:	6883      	ldr	r3, [r0, #8]
3400a858:	9314      	str	r3, [sp, #80]	@ 0x50
3400a85a:	6843      	ldr	r3, [r0, #4]
3400a85c:	6a41      	ldr	r1, [r0, #36]	@ 0x24
3400a85e:	9315      	str	r3, [sp, #84]	@ 0x54
3400a860:	9116      	str	r1, [sp, #88]	@ 0x58
3400a862:	6a01      	ldr	r1, [r0, #32]
3400a864:	ab12      	add	r3, sp, #72	@ 0x48
3400a866:	9325      	str	r3, [sp, #148]	@ 0x94
3400a868:	9117      	str	r1, [sp, #92]	@ 0x5c
3400a86a:	f240 4302 	movw	r3, #1026	@ 0x402
3400a86e:	69c1      	ldr	r1, [r0, #28]
                                   sw_info->general.input.dim.tensor_c, sw_info->general.input.dim.tensor_b),
                        STRIDE_INIT(sw_info->general.input.stride.h, sw_info->general.input.stride.w,
                                    sw_info->general.input.stride.c, sw_info->general.input.stride.b),
                        1, &input_output_array, &input_intq);

  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
3400a870:	922b      	str	r2, [sp, #172]	@ 0xac
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a872:	9118      	str	r1, [sp, #96]	@ 0x60
3400a874:	6981      	ldr	r1, [r0, #24]
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
3400a876:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a878:	9119      	str	r1, [sp, #100]	@ 0x64
3400a87a:	a916      	add	r1, sp, #88	@ 0x58
3400a87c:	9127      	str	r1, [sp, #156]	@ 0x9c
3400a87e:	a90a      	add	r1, sp, #40	@ 0x28
3400a880:	9128      	str	r1, [sp, #160]	@ 0xa0
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
3400a882:	2100      	movs	r1, #0
3400a884:	921a      	str	r2, [sp, #104]	@ 0x68
3400a886:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a888:	9326      	str	r3, [sp, #152]	@ 0x98
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
3400a88a:	921b      	str	r2, [sp, #108]	@ 0x6c
3400a88c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
3400a88e:	e9cd 1429 	strd	r1, r4, [sp, #164]	@ 0xa4
3400a892:	921c      	str	r2, [sp, #112]	@ 0x70
3400a894:	6b02      	ldr	r2, [r0, #48]	@ 0x30
3400a896:	921d      	str	r2, [sp, #116]	@ 0x74
3400a898:	aa1a      	add	r2, sp, #104	@ 0x68
3400a89a:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
3400a89e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
                        STRIDE_INIT(sw_info->general.output.stride.h, sw_info->general.output.stride.w,
                                    sw_info->general.output.stride.c, sw_info->general.output.stride.b),
                        1, &dequantize_output_array, NULL);

  // tensor chain initialization
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400a8a0:	aa22      	add	r2, sp, #136	@ 0x88
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
3400a8a2:	931e      	str	r3, [sp, #120]	@ 0x78
3400a8a4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
3400a8a6:	931f      	str	r3, [sp, #124]	@ 0x7c
3400a8a8:	6c83      	ldr	r3, [r0, #72]	@ 0x48
3400a8aa:	9320      	str	r3, [sp, #128]	@ 0x80
3400a8ac:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400a8ae:	9200      	str	r2, [sp, #0]
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
3400a8b0:	9321      	str	r3, [sp, #132]	@ 0x84
3400a8b2:	ab1e      	add	r3, sp, #120	@ 0x78
3400a8b4:	932e      	str	r3, [sp, #184]	@ 0xb8
3400a8b6:	ab0e      	add	r3, sp, #56	@ 0x38
3400a8b8:	932f      	str	r3, [sp, #188]	@ 0xbc
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400a8ba:	2304      	movs	r3, #4
3400a8bc:	9308      	str	r3, [sp, #32]
3400a8be:	2301      	movs	r3, #1
3400a8c0:	e9cd 133a 	strd	r1, r3, [sp, #232]	@ 0xe8
3400a8c4:	9338      	str	r3, [sp, #224]	@ 0xe0
3400a8c6:	ab01      	add	r3, sp, #4
3400a8c8:	e9cd 313c 	strd	r3, r1, [sp, #240]	@ 0xf0
3400a8cc:	ab02      	add	r3, sp, #8
3400a8ce:	e9cd 313f 	strd	r3, r1, [sp, #252]	@ 0xfc
3400a8d2:	ab03      	add	r3, sp, #12
3400a8d4:	e9cd 3142 	strd	r3, r1, [sp, #264]	@ 0x108
3400a8d8:	ab38      	add	r3, sp, #224	@ 0xe0
3400a8da:	aa29      	add	r2, sp, #164	@ 0xa4
3400a8dc:	9309      	str	r3, [sp, #36]	@ 0x24
                              AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&dequantize_output)),
                              AI_TENSOR_LIST_OBJ_EMPTY, AI_TENSOR_LIST_OBJ_EMPTY)

  // layer initialization
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
3400a8de:	4b0e      	ldr	r3, [pc, #56]	@ (3400a918 <ll_sw_forward_dequantizelinear+0x130>)
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400a8e0:	9201      	str	r2, [sp, #4]
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
3400a8e2:	a831      	add	r0, sp, #196	@ 0xc4
3400a8e4:	221c      	movs	r2, #28
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400a8e6:	913e      	str	r1, [sp, #248]	@ 0xf8
3400a8e8:	9102      	str	r1, [sp, #8]
3400a8ea:	9141      	str	r1, [sp, #260]	@ 0x104
3400a8ec:	9103      	str	r1, [sp, #12]
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
3400a8ee:	9330      	str	r3, [sp, #192]	@ 0xc0
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400a8f0:	f8cd d0e4 	str.w	sp, [sp, #228]	@ 0xe4
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
3400a8f4:	f004 f9a8 	bl	3400ec48 <memset>
3400a8f8:	4b08      	ldr	r3, [pc, #32]	@ (3400a91c <ll_sw_forward_dequantizelinear+0x134>)
                       NULL, )
  dequantize_layer.forward(AI_LAYER_OBJ(&dequantize_layer));
3400a8fa:	a830      	add	r0, sp, #192	@ 0xc0
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
3400a8fc:	9335      	str	r3, [sp, #212]	@ 0xd4
3400a8fe:	ab08      	add	r3, sp, #32
3400a900:	9336      	str	r3, [sp, #216]	@ 0xd8
  dequantize_layer.forward(AI_LAYER_OBJ(&dequantize_layer));
3400a902:	f000 f93f 	bl	3400ab84 <node_convert>
}
3400a906:	b044      	add	sp, #272	@ 0x110
3400a908:	bd10      	pop	{r4, pc}
3400a90a:	bf00      	nop
3400a90c:	08840440 	.word	0x08840440
3400a910:	08040440 	.word	0x08040440
3400a914:	00821040 	.word	0x00821040
3400a918:	00010107 	.word	0x00010107
3400a91c:	3400ab85 	.word	0x3400ab85

3400a920 <ll_sw_forward_softmax_integer>:
{
  Softmax_integer_sw_info *sw_info = (Softmax_integer_sw_info *)sw_info_struct;

  // array init
  int32_t format = sw_info->general.input.format.is_signed ? (AI_ARRAY_FORMAT_S8 | AI_FMT_FLAG_IS_IO)
                                                           : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
3400a920:	f890 102c 	ldrb.w	r1, [r0, #44]	@ 0x2c
3400a924:	4b79      	ldr	r3, [pc, #484]	@ (3400ab0c <ll_sw_forward_softmax_integer+0x1ec>)
3400a926:	4a7a      	ldr	r2, [pc, #488]	@ (3400ab10 <ll_sw_forward_softmax_integer+0x1f0>)
3400a928:	2900      	cmp	r1, #0
{
3400a92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                                           : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
3400a92e:	bf0c      	ite	eq
3400a930:	461c      	moveq	r4, r3
3400a932:	4614      	movne	r4, r2
{
3400a934:	b0e4      	sub	sp, #400	@ 0x190
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
3400a936:	9412      	str	r4, [sp, #72]	@ 0x48
3400a938:	6944      	ldr	r4, [r0, #20]
  uint16_t offset_format =
      sw_info->izp.format.is_signed ? (AI_BUFFER_META_FLAG_ZEROPOINT_S8) : (AI_BUFFER_META_FLAG_ZEROPOINT_U8);
  uint16_t scale_format = AI_BUFFER_META_FLAG_SCALE_FLOAT;
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
                                  .size = sw_info->is.dim.num_elem,
                                  .info = (const ai_intq_info[1]){{
3400a93a:	f8d0 60ac 	ldr.w	r6, [r0, #172]	@ 0xac
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
3400a93e:	9413      	str	r4, [sp, #76]	@ 0x4c
3400a940:	6a84      	ldr	r4, [r0, #40]	@ 0x28
                                  .info = (const ai_intq_info[1]){{
3400a942:	9607      	str	r6, [sp, #28]
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
3400a944:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
                                                    : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
3400a948:	f890 4058 	ldrb.w	r4, [r0, #88]	@ 0x58
                                  .info = (const ai_intq_info[1]){{
3400a94c:	f8d0 60d8 	ldr.w	r6, [r0, #216]	@ 0xd8
                                                    : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
3400a950:	2c00      	cmp	r4, #0
  AI_ARRAY_OBJ_DECLARE(sm_scratch0_array, AI_ARRAY_FORMAT_S32, sw_info->scratch.mem.start_offset,
3400a952:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
                                                    : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
3400a954:	bf18      	it	ne
3400a956:	4613      	movne	r3, r2
  AI_ARRAY_OBJ_DECLARE(sm_scratch0_array, AI_ARRAY_FORMAT_S32, sw_info->scratch.mem.start_offset,
3400a958:	941b      	str	r4, [sp, #108]	@ 0x6c
3400a95a:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
                                  .info = (const ai_intq_info[1]){{
3400a95e:	9608      	str	r6, [sp, #32]
  AI_ARRAY_OBJ_DECLARE(sm_scratch0_array, AI_ARRAY_FORMAT_S32, sw_info->scratch.mem.start_offset,
3400a960:	e9cd 441c 	strd	r4, r4, [sp, #112]	@ 0x70
  uint16_t offset_format =
3400a964:	f890 40dc 	ldrb.w	r4, [r0, #220]	@ 0xdc
  AI_ARRAY_OBJ_DECLARE(softmax_output_array, format, sw_info->general.output.mem.start_offset,
3400a968:	9316      	str	r3, [sp, #88]	@ 0x58
  uint16_t offset_format =
3400a96a:	2c00      	cmp	r4, #0
3400a96c:	bf0c      	ite	eq
3400a96e:	2402      	moveq	r4, #2
3400a970:	2404      	movne	r4, #4
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
3400a972:	f044 0401 	orr.w	r4, r4, #1
3400a976:	f8ad 4014 	strh.w	r4, [sp, #20]
3400a97a:	f8d0 4098 	ldr.w	r4, [r0, #152]	@ 0x98
  AI_ARRAY_OBJ_DECLARE(softmax_output_array, format, sw_info->general.output.mem.start_offset,
3400a97e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
3400a980:	f8ad 4016 	strh.w	r4, [sp, #22]
                                  .info = (const ai_intq_info[1]){{
3400a984:	ac07      	add	r4, sp, #28
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
3400a986:	9406      	str	r4, [sp, #24]
                                      .scale = ((float *)sw_info->is.mem.start_offset),
                                      .zeropoint = ((void *)sw_info->izp.mem.start_offset),
                                  }}};

  offset_format =
3400a988:	f890 4134 	ldrb.w	r4, [r0, #308]	@ 0x134
  AI_ARRAY_OBJ_DECLARE(sm_scratch0_array, AI_ARRAY_FORMAT_S32, sw_info->scratch.mem.start_offset,
3400a98c:	f8df c190 	ldr.w	ip, [pc, #400]	@ 3400ab20 <ll_sw_forward_softmax_integer+0x200>
  offset_format =
3400a990:	2c00      	cmp	r4, #0
3400a992:	bf0c      	ite	eq
3400a994:	2602      	moveq	r6, #2
3400a996:	2604      	movne	r6, #4
  AI_ARRAY_OBJ_DECLARE(softmax_output_array, format, sw_info->general.output.mem.start_offset,
3400a998:	9317      	str	r3, [sp, #92]	@ 0x5c
3400a99a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
      sw_info->ozp.format.is_signed ? (AI_BUFFER_META_FLAG_ZEROPOINT_S8) : (AI_BUFFER_META_FLAG_ZEROPOINT_U8);
  scale_format = AI_BUFFER_META_FLAG_SCALE_FLOAT;
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
3400a99c:	f046 0601 	orr.w	r6, r6, #1
  AI_ARRAY_OBJ_DECLARE(softmax_output_array, format, sw_info->general.output.mem.start_offset,
3400a9a0:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  AI_ARRAY_OBJ_DECLARE(sm_scratch0_array, AI_ARRAY_FORMAT_S32, sw_info->scratch.mem.start_offset,
3400a9a4:	f8cd c068 	str.w	ip, [sp, #104]	@ 0x68
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
3400a9a8:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
3400a9ac:	f8d0 60f0 	ldr.w	r6, [r0, #240]	@ 0xf0
                                   .size = sw_info->os.dim.num_elem,
                                   .info = (const ai_intq_info[1]){{
3400a9b0:	af0b      	add	r7, sp, #44	@ 0x2c
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
3400a9b2:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
                                   .info = (const ai_intq_info[1]){{
3400a9b6:	f8d0 6104 	ldr.w	r6, [r0, #260]	@ 0x104
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
3400a9ba:	970a      	str	r7, [sp, #40]	@ 0x28
                                   .info = (const ai_intq_info[1]){{
3400a9bc:	960b      	str	r6, [sp, #44]	@ 0x2c
3400a9be:	f8d0 6130 	ldr.w	r6, [r0, #304]	@ 0x130
                                       .scale = ((float *)sw_info->os.mem.start_offset),
                                       .zeropoint = ((void *)sw_info->ozp.mem.start_offset),
                                   }}};

  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a9c2:	af1e      	add	r7, sp, #120	@ 0x78
3400a9c4:	f240 4e01 	movw	lr, #1025	@ 0x401
                                   .info = (const ai_intq_info[1]){{
3400a9c8:	960c      	str	r6, [sp, #48]	@ 0x30
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a9ca:	973d      	str	r7, [sp, #244]	@ 0xf4
3400a9cc:	f04f 7682 	mov.w	r6, #17039360	@ 0x1040000
3400a9d0:	f240 4702 	movw	r7, #1026	@ 0x402
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
3400a9d4:	ad05      	add	r5, sp, #20
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a9d6:	953a      	str	r5, [sp, #232]	@ 0xe8
3400a9d8:	6905      	ldr	r5, [r0, #16]
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
3400a9da:	a912      	add	r1, sp, #72	@ 0x48
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a9dc:	951e      	str	r5, [sp, #120]	@ 0x78
3400a9de:	68c5      	ldr	r5, [r0, #12]
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
3400a9e0:	ac09      	add	r4, sp, #36	@ 0x24
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400a9e2:	951f      	str	r5, [sp, #124]	@ 0x7c
3400a9e4:	6885      	ldr	r5, [r0, #8]
3400a9e6:	f10d 0888 	add.w	r8, sp, #136	@ 0x88
3400a9ea:	9520      	str	r5, [sp, #128]	@ 0x80
3400a9ec:	6845      	ldr	r5, [r0, #4]
3400a9ee:	e9cd 6e3b 	strd	r6, lr, [sp, #236]	@ 0xec
3400a9f2:	9521      	str	r5, [sp, #132]	@ 0x84
3400a9f4:	6a45      	ldr	r5, [r0, #36]	@ 0x24
3400a9f6:	e9cd 813f 	strd	r8, r1, [sp, #252]	@ 0xfc
3400a9fa:	9522      	str	r5, [sp, #136]	@ 0x88
3400a9fc:	6a05      	ldr	r5, [r0, #32]
                                   sw_info->general.input.dim.tensor_c, sw_info->general.input.dim.tensor_b),
                        STRIDE_INIT(sw_info->general.input.stride.h, sw_info->general.input.stride.w,
                                    sw_info->general.input.stride.c, sw_info->general.input.stride.b),
                        1, &input_output_array, &input_intq);

  AI_TENSOR_OBJ_DECLARE(softmax_output, , 0x0, 4,
3400a9fe:	e9cd 4641 	strd	r4, r6, [sp, #260]	@ 0x104
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400aa02:	9523      	str	r5, [sp, #140]	@ 0x8c
3400aa04:	69c5      	ldr	r5, [r0, #28]
3400aa06:	973e      	str	r7, [sp, #248]	@ 0xf8
3400aa08:	9524      	str	r5, [sp, #144]	@ 0x90
3400aa0a:	6985      	ldr	r5, [r0, #24]
  AI_ARRAY_OBJ_DECLARE(softmax_output_array, format, sw_info->general.output.mem.start_offset,
3400aa0c:	aa16      	add	r2, sp, #88	@ 0x58
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400aa0e:	9525      	str	r5, [sp, #148]	@ 0x94
  AI_TENSOR_OBJ_DECLARE(softmax_output, , 0x0, 4,
3400aa10:	f8cd e10c 	str.w	lr, [sp, #268]	@ 0x10c
3400aa14:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
                                   sw_info->general.output.dim.tensor_c, sw_info->general.output.dim.tensor_b),
                        STRIDE_INIT(sw_info->general.output.stride.h, sw_info->general.output.stride.w,
                                    sw_info->general.output.stride.c, sw_info->general.output.stride.b),
                        1, &softmax_output_array, &output_intq);

  AI_TENSOR_OBJ_DECLARE(sm_scratch0, , 0x0, 4,
3400aa16:	f8cd e128 	str.w	lr, [sp, #296]	@ 0x128
  AI_TENSOR_OBJ_DECLARE(softmax_output, , 0x0, 4,
3400aa1a:	9126      	str	r1, [sp, #152]	@ 0x98
3400aa1c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
  AI_ARRAY_OBJ_DECLARE(sm_scratch0_array, AI_ARRAY_FORMAT_S32, sw_info->scratch.mem.start_offset,
3400aa1e:	ab1a      	add	r3, sp, #104	@ 0x68
  AI_TENSOR_OBJ_DECLARE(softmax_output, , 0x0, 4,
3400aa20:	9127      	str	r1, [sp, #156]	@ 0x9c
3400aa22:	6b41      	ldr	r1, [r0, #52]	@ 0x34
                        STRIDE_INIT(sw_info->scratch.stride.h, sw_info->scratch.stride.w, sw_info->scratch.stride.c,
                                    sw_info->scratch.stride.b),
                        1, &sm_scratch0_array, NULL);

  // tensor chain initialization
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aa24:	ac01      	add	r4, sp, #4
  AI_TENSOR_OBJ_DECLARE(softmax_output, , 0x0, 4,
3400aa26:	9128      	str	r1, [sp, #160]	@ 0xa0
3400aa28:	6b01      	ldr	r1, [r0, #48]	@ 0x30
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aa2a:	ad3a      	add	r5, sp, #232	@ 0xe8
  AI_TENSOR_OBJ_DECLARE(softmax_output, , 0x0, 4,
3400aa2c:	9129      	str	r1, [sp, #164]	@ 0xa4
3400aa2e:	a926      	add	r1, sp, #152	@ 0x98
3400aa30:	e9cd 1744 	strd	r1, r7, [sp, #272]	@ 0x110
3400aa34:	6d01      	ldr	r1, [r0, #80]	@ 0x50
3400aa36:	912a      	str	r1, [sp, #168]	@ 0xa8
3400aa38:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
3400aa3a:	912b      	str	r1, [sp, #172]	@ 0xac
3400aa3c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
3400aa3e:	912c      	str	r1, [sp, #176]	@ 0xb0
3400aa40:	6c41      	ldr	r1, [r0, #68]	@ 0x44
3400aa42:	912d      	str	r1, [sp, #180]	@ 0xb4
3400aa44:	a92a      	add	r1, sp, #168	@ 0xa8
3400aa46:	e9cd 1246 	strd	r1, r2, [sp, #280]	@ 0x118
  AI_TENSOR_OBJ_DECLARE(sm_scratch0, , 0x0, 4,
3400aa4a:	2200      	movs	r2, #0
3400aa4c:	6e81      	ldr	r1, [r0, #104]	@ 0x68
3400aa4e:	e9cd 2648 	strd	r2, r6, [sp, #288]	@ 0x120
3400aa52:	912e      	str	r1, [sp, #184]	@ 0xb8
3400aa54:	6e41      	ldr	r1, [r0, #100]	@ 0x64
3400aa56:	912f      	str	r1, [sp, #188]	@ 0xbc
3400aa58:	6e01      	ldr	r1, [r0, #96]	@ 0x60
3400aa5a:	9130      	str	r1, [sp, #192]	@ 0xc0
3400aa5c:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
3400aa5e:	9131      	str	r1, [sp, #196]	@ 0xc4
3400aa60:	a92e      	add	r1, sp, #184	@ 0xb8
3400aa62:	e9cd 174b 	strd	r1, r7, [sp, #300]	@ 0x12c
3400aa66:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aa68:	e9cd 4259 	strd	r4, r2, [sp, #356]	@ 0x164
  AI_TENSOR_OBJ_DECLARE(sm_scratch0, , 0x0, 4,
3400aa6c:	9132      	str	r1, [sp, #200]	@ 0xc8
3400aa6e:	6f81      	ldr	r1, [r0, #120]	@ 0x78
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aa70:	ac02      	add	r4, sp, #8
  AI_TENSOR_OBJ_DECLARE(sm_scratch0, , 0x0, 4,
3400aa72:	9133      	str	r1, [sp, #204]	@ 0xcc
3400aa74:	6f41      	ldr	r1, [r0, #116]	@ 0x74
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aa76:	e9cd 425c 	strd	r4, r2, [sp, #368]	@ 0x170
  AI_TENSOR_OBJ_DECLARE(sm_scratch0, , 0x0, 4,
3400aa7a:	9134      	str	r1, [sp, #208]	@ 0xd0
3400aa7c:	6f01      	ldr	r1, [r0, #112]	@ 0x70
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aa7e:	ac03      	add	r4, sp, #12
  AI_TENSOR_OBJ_DECLARE(sm_scratch0, , 0x0, 4,
3400aa80:	9135      	str	r1, [sp, #212]	@ 0xd4
3400aa82:	a932      	add	r1, sp, #200	@ 0xc8
3400aa84:	e9cd 134d 	strd	r1, r3, [sp, #308]	@ 0x134
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aa88:	2304      	movs	r3, #4
3400aa8a:	930d      	str	r3, [sp, #52]	@ 0x34
3400aa8c:	2301      	movs	r3, #1
3400aa8e:	9358      	str	r3, [sp, #352]	@ 0x160
3400aa90:	935b      	str	r3, [sp, #364]	@ 0x16c
3400aa92:	9361      	str	r3, [sp, #388]	@ 0x184
3400aa94:	ab04      	add	r3, sp, #16
3400aa96:	e9cd 3262 	strd	r3, r2, [sp, #392]	@ 0x188
3400aa9a:	ab58      	add	r3, sp, #352	@ 0x160
3400aa9c:	930e      	str	r3, [sp, #56]	@ 0x38
                              AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&softmax_output)),
                              AI_TENSOR_LIST_OBJ_EMPTY, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&sm_scratch0)))

  AI_ARRAY_OBJ_DECLARE_STATIC(sm_integer_params, ai_i32, AI_ARRAY_FORMAT_S32, AI_CONST, 3,
3400aa9e:	2303      	movs	r3, #3
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aaa0:	e9cd 425f 	strd	r4, r2, [sp, #380]	@ 0x17c
3400aaa4:	ac48      	add	r4, sp, #288	@ 0x120
3400aaa6:	9404      	str	r4, [sp, #16]
  AI_ARRAY_OBJ_DECLARE_STATIC(sm_integer_params, ai_i32, AI_ARRAY_FORMAT_S32, AI_CONST, 3,
3400aaa8:	f8d0 4138 	ldr.w	r4, [r0, #312]	@ 0x138
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aaac:	9501      	str	r5, [sp, #4]
  AI_ARRAY_OBJ_DECLARE_STATIC(sm_integer_params, ai_i32, AI_ARRAY_FORMAT_S32, AI_CONST, 3,
3400aaae:	9337      	str	r3, [sp, #220]	@ 0xdc
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aab0:	ad41      	add	r5, sp, #260	@ 0x104
  AI_ARRAY_OBJ_DECLARE_STATIC(sm_integer_params, ai_i32, AI_ARRAY_FORMAT_S32, AI_CONST, 3,
3400aab2:	ab0f      	add	r3, sp, #60	@ 0x3c
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aab4:	925e      	str	r2, [sp, #376]	@ 0x178
3400aab6:	9203      	str	r2, [sp, #12]
  AI_ARRAY_OBJ_DECLARE_STATIC(sm_integer_params, ai_i32, AI_ARRAY_FORMAT_S32, AI_CONST, 3,
3400aab8:	f8cd c0d8 	str.w	ip, [sp, #216]	@ 0xd8
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aabc:	9502      	str	r5, [sp, #8]
  AI_ARRAY_OBJ_DECLARE_STATIC(sm_integer_params, ai_i32, AI_ARRAY_FORMAT_S32, AI_CONST, 3,
3400aabe:	940f      	str	r4, [sp, #60]	@ 0x3c
3400aac0:	f8d0 413c 	ldr.w	r4, [r0, #316]	@ 0x13c
3400aac4:	e9cd 3238 	strd	r3, r2, [sp, #224]	@ 0xe0
                              sw_info->quantized_multiplier, sw_info->left_shift, sw_info->diff_min)

  AI_LAYER_OBJ_DECLARE(sm_integer_layer, 1, SM_TYPE, 0x0, NULL, sm, forward_sm_integer, &softmax_chain, NULL, NULL, ,
3400aac8:	4b12      	ldr	r3, [pc, #72]	@ (3400ab14 <ll_sw_forward_softmax_integer+0x1f4>)
  AI_TENSOR_CHAIN_OBJ_DECLARE(softmax_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
3400aaca:	a90d      	add	r1, sp, #52	@ 0x34
  AI_LAYER_OBJ_DECLARE(sm_integer_layer, 1, SM_TYPE, 0x0, NULL, sm, forward_sm_integer, &softmax_chain, NULL, NULL, ,
3400aacc:	e9cd 324f 	strd	r3, r2, [sp, #316]	@ 0x13c
3400aad0:	4b11      	ldr	r3, [pc, #68]	@ (3400ab18 <ll_sw_forward_softmax_integer+0x1f8>)
3400aad2:	e9cd 2251 	strd	r2, r2, [sp, #324]	@ 0x144
3400aad6:	e9cd 3154 	strd	r3, r1, [sp, #336]	@ 0x150
3400aada:	ab36      	add	r3, sp, #216	@ 0xd8
3400aadc:	9356      	str	r3, [sp, #344]	@ 0x158
  switch (onnx_axis)
3400aade:	f8d0 3144 	ldr.w	r3, [r0, #324]	@ 0x144
  AI_LAYER_OBJ_DECLARE(sm_integer_layer, 1, SM_TYPE, 0x0, NULL, sm, forward_sm_integer, &softmax_chain, NULL, NULL, ,
3400aae2:	9253      	str	r2, [sp, #332]	@ 0x14c
3400aae4:	2b03      	cmp	r3, #3
3400aae6:	bf8c      	ite	hi
3400aae8:	f04f 33ff 	movhi.w	r3, #4294967295	@ 0xffffffff
3400aaec:	4a0b      	ldrls	r2, [pc, #44]	@ (3400ab1c <ll_sw_forward_softmax_integer+0x1fc>)
  AI_ARRAY_OBJ_DECLARE_STATIC(sm_integer_params, ai_i32, AI_ARRAY_FORMAT_S32, AI_CONST, 3,
3400aaee:	9410      	str	r4, [sp, #64]	@ 0x40
3400aaf0:	bf98      	it	ls
3400aaf2:	56d3      	ldrsbls	r3, [r2, r3]
3400aaf4:	f8d0 4140 	ldr.w	r4, [r0, #320]	@ 0x140
                       .nl_params = &sm_integer_params, .axis = helper_emit_shape_index_axis(sw_info->axis))
  sm_integer_layer.forward(AI_LAYER_OBJ(&sm_integer_layer));
3400aaf8:	a84f      	add	r0, sp, #316	@ 0x13c
  AI_ARRAY_OBJ_DECLARE_STATIC(sm_integer_params, ai_i32, AI_ARRAY_FORMAT_S32, AI_CONST, 3,
3400aafa:	9411      	str	r4, [sp, #68]	@ 0x44
  AI_LAYER_OBJ_DECLARE(sm_integer_layer, 1, SM_TYPE, 0x0, NULL, sm, forward_sm_integer, &softmax_chain, NULL, NULL, ,
3400aafc:	f8ad 315c 	strh.w	r3, [sp, #348]	@ 0x15c
  sm_integer_layer.forward(AI_LAYER_OBJ(&sm_integer_layer));
3400ab00:	f000 f996 	bl	3400ae30 <forward_sm_integer>
}
3400ab04:	b064      	add	sp, #400	@ 0x190
3400ab06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400ab0a:	bf00      	nop
3400ab0c:	08040440 	.word	0x08040440
3400ab10:	08840440 	.word	0x08840440
3400ab14:	0001010c 	.word	0x0001010c
3400ab18:	3400ae31 	.word	0x3400ae31
3400ab1c:	340399d5 	.word	0x340399d5
3400ab20:	00841040 	.word	0x00841040

3400ab24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3400ab24:	480f      	ldr	r0, [pc, #60]	@ (3400ab64 <LoopForever+0x4>)
  msr   MSPLIM, r0
3400ab26:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3400ab2a:	480f      	ldr	r0, [pc, #60]	@ (3400ab68 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3400ab2c:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3400ab2e:	f7f7 fa5f 	bl	34001ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3400ab32:	480e      	ldr	r0, [pc, #56]	@ (3400ab6c <LoopForever+0xc>)
  ldr r1, =_edata
3400ab34:	490e      	ldr	r1, [pc, #56]	@ (3400ab70 <LoopForever+0x10>)
  ldr r2, =_sidata
3400ab36:	4a0f      	ldr	r2, [pc, #60]	@ (3400ab74 <LoopForever+0x14>)
  movs r3, #0
3400ab38:	2300      	movs	r3, #0
  b LoopCopyDataInit
3400ab3a:	e002      	b.n	3400ab42 <LoopCopyDataInit>

3400ab3c <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3400ab3c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3400ab3e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3400ab40:	3304      	adds	r3, #4

3400ab42 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3400ab42:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3400ab44:	428c      	cmp	r4, r1
  bcc CopyDataInit
3400ab46:	d3f9      	bcc.n	3400ab3c <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3400ab48:	4a0b      	ldr	r2, [pc, #44]	@ (3400ab78 <LoopForever+0x18>)
  ldr r4, =_ebss
3400ab4a:	4c0c      	ldr	r4, [pc, #48]	@ (3400ab7c <LoopForever+0x1c>)
  movs r3, #0
3400ab4c:	2300      	movs	r3, #0
  b LoopFillZerobss
3400ab4e:	e001      	b.n	3400ab54 <LoopFillZerobss>

3400ab50 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3400ab50:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3400ab52:	3204      	adds	r2, #4

3400ab54 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3400ab54:	42a2      	cmp	r2, r4
  bcc FillZerobss
3400ab56:	d3fb      	bcc.n	3400ab50 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3400ab58:	f004 fad0 	bl	3400f0fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3400ab5c:	f7f5 fee8 	bl	34000930 <main>

3400ab60 <LoopForever>:

LoopForever:
  b LoopForever
3400ab60:	e7fe      	b.n	3400ab60 <LoopForever>
3400ab62:	0000      	.short	0x0000
  ldr   r0, =_sstack
3400ab64:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
3400ab68:	34100000 	.word	0x34100000
  ldr r0, =_sdata
3400ab6c:	3403a660 	.word	0x3403a660
  ldr r1, =_edata
3400ab70:	3403a864 	.word	0x3403a864
  ldr r2, =_sidata
3400ab74:	3403a660 	.word	0x3403a660
  ldr r2, =_sbss
3400ab78:	3403a864 	.word	0x3403a864
  ldr r4, =_ebss
3400ab7c:	3403aad0 	.word	0x3403aad0

3400ab80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3400ab80:	e7fe      	b.n	3400ab80 <ADC1_2_IRQHandler>
	...

3400ab84 <node_convert>:
3400ab84:	6982      	ldr	r2, [r0, #24]
3400ab86:	8813      	ldrh	r3, [r2, #0]
3400ab88:	2b00      	cmp	r3, #0
3400ab8a:	d048      	beq.n	3400ac1e <node_convert+0x9a>
3400ab8c:	6852      	ldr	r2, [r2, #4]
3400ab8e:	6851      	ldr	r1, [r2, #4]
3400ab90:	b101      	cbz	r1, 3400ab94 <node_convert+0x10>
3400ab92:	6809      	ldr	r1, [r1, #0]
3400ab94:	2b01      	cmp	r3, #1
3400ab96:	f000 8147 	beq.w	3400ae28 <node_convert+0x2a4>
3400ab9a:	b5f0      	push	{r4, r5, r6, r7, lr}
3400ab9c:	6910      	ldr	r0, [r2, #16]
3400ab9e:	b083      	sub	sp, #12
3400aba0:	b100      	cbz	r0, 3400aba4 <node_convert+0x20>
3400aba2:	6800      	ldr	r0, [r0, #0]
3400aba4:	688b      	ldr	r3, [r1, #8]
3400aba6:	2401      	movs	r4, #1
3400aba8:	0a1a      	lsrs	r2, r3, #8
3400abaa:	d011      	beq.n	3400abd0 <node_convert+0x4c>
3400abac:	ea4f 0e82 	mov.w	lr, r2, lsl #2
3400abb0:	f1ae 0e04 	sub.w	lr, lr, #4
3400abb4:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
3400abb8:	44a6      	add	lr, r4
3400abba:	f04e e001 	dls	lr, lr
3400abbe:	68cb      	ldr	r3, [r1, #12]
3400abc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
3400abc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
3400abc8:	fb02 f404 	mul.w	r4, r2, r4
3400abcc:	f00f c007 	le	lr, 3400abc4 <node_convert+0x40>
3400abd0:	698a      	ldr	r2, [r1, #24]
3400abd2:	6985      	ldr	r5, [r0, #24]
3400abd4:	6813      	ldr	r3, [r2, #0]
3400abd6:	f3c3 4c43 	ubfx	ip, r3, #17, #4
3400abda:	f1bc 0f01 	cmp.w	ip, #1
3400abde:	d020      	beq.n	3400ac22 <node_convert+0x9e>
3400abe0:	680e      	ldr	r6, [r1, #0]
3400abe2:	68ad      	ldr	r5, [r5, #8]
3400abe4:	2e00      	cmp	r6, #0
3400abe6:	d03a      	beq.n	3400ac5e <node_convert+0xda>
3400abe8:	6871      	ldr	r1, [r6, #4]
3400abea:	6890      	ldr	r0, [r2, #8]
3400abec:	f3c3 52c0 	ubfx	r2, r3, #23, #1
3400abf0:	2900      	cmp	r1, #0
3400abf2:	f000 8099 	beq.w	3400ad28 <node_convert+0x1a4>
3400abf6:	8873      	ldrh	r3, [r6, #2]
3400abf8:	2b00      	cmp	r3, #0
3400abfa:	f000 8082 	beq.w	3400ad02 <node_convert+0x17e>
3400abfe:	680b      	ldr	r3, [r1, #0]
3400ac00:	ed93 0a00 	vldr	s0, [r3]
3400ac04:	684b      	ldr	r3, [r1, #4]
3400ac06:	2a00      	cmp	r2, #0
3400ac08:	f000 809a 	beq.w	3400ad40 <node_convert+0x1bc>
3400ac0c:	f993 3000 	ldrsb.w	r3, [r3]
3400ac10:	4622      	mov	r2, r4
3400ac12:	4629      	mov	r1, r5
3400ac14:	b003      	add	sp, #12
3400ac16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3400ac1a:	f000 b971 	b.w	3400af00 <forward_lite_node_convert_integer_is8of32>
3400ac1e:	685b      	ldr	r3, [r3, #4]
3400ac20:	deff      	udf	#255	@ 0xff
3400ac22:	6806      	ldr	r6, [r0, #0]
3400ac24:	6890      	ldr	r0, [r2, #8]
3400ac26:	2e00      	cmp	r6, #0
3400ac28:	f000 8092 	beq.w	3400ad50 <node_convert+0x1cc>
3400ac2c:	682b      	ldr	r3, [r5, #0]
3400ac2e:	6872      	ldr	r2, [r6, #4]
3400ac30:	68a9      	ldr	r1, [r5, #8]
3400ac32:	f3c3 53c0 	ubfx	r3, r3, #23, #1
3400ac36:	2a00      	cmp	r2, #0
3400ac38:	d067      	beq.n	3400ad0a <node_convert+0x186>
3400ac3a:	8875      	ldrh	r5, [r6, #2]
3400ac3c:	2d00      	cmp	r5, #0
3400ac3e:	d069      	beq.n	3400ad14 <node_convert+0x190>
3400ac40:	6815      	ldr	r5, [r2, #0]
3400ac42:	ed95 0a00 	vldr	s0, [r5]
3400ac46:	2b00      	cmp	r3, #0
3400ac48:	f000 80e3 	beq.w	3400ae12 <node_convert+0x28e>
3400ac4c:	6853      	ldr	r3, [r2, #4]
3400ac4e:	f993 3000 	ldrsb.w	r3, [r3]
3400ac52:	4622      	mov	r2, r4
3400ac54:	b003      	add	sp, #12
3400ac56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3400ac5a:	f000 b955 	b.w	3400af08 <forward_lite_node_convert_integer_if32os8>
3400ac5e:	f3c3 11c6 	ubfx	r1, r3, #7, #7
3400ac62:	f003 067f 	and.w	r6, r3, #127	@ 0x7f
3400ac66:	1b8e      	subs	r6, r1, r6
3400ac68:	3640      	adds	r6, #64	@ 0x40
3400ac6a:	f3c3 53c0 	ubfx	r3, r3, #23, #1
3400ac6e:	2908      	cmp	r1, #8
3400ac70:	6890      	ldr	r0, [r2, #8]
3400ac72:	4629      	mov	r1, r5
3400ac74:	4622      	mov	r2, r4
3400ac76:	eba6 0603 	sub.w	r6, r6, r3
3400ac7a:	f000 80bc 	beq.w	3400adf6 <node_convert+0x272>
3400ac7e:	f000 fdd1 	bl	3400b824 <st_int16_to_f32>
3400ac82:	b3e6      	cbz	r6, 3400acfe <node_convert+0x17a>
3400ac84:	ee07 6a90 	vmov	s15, r6
3400ac88:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
3400ac8c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
3400ac90:	f005 ff32 	bl	34010af8 <powf>
3400ac94:	b39c      	cbz	r4, 3400acfe <node_convert+0x17a>
3400ac96:	1e63      	subs	r3, r4, #1
3400ac98:	2b02      	cmp	r3, #2
3400ac9a:	f240 80c1 	bls.w	3400ae20 <node_convert+0x29c>
3400ac9e:	ee10 3a10 	vmov	r3, s0
3400aca2:	08a2      	lsrs	r2, r4, #2
3400aca4:	eea4 3b10 	vdup.32	q2, r3
3400aca8:	f042 e001 	dls	lr, r2
3400acac:	462b      	mov	r3, r5
3400acae:	ed93 7f00 	ldc	15, cr7, [r3]
3400acb2:	461a      	mov	r2, r3
3400acb4:	ff06 6d54 	vmul.f32	q3, q3, q2
3400acb8:	3310      	adds	r3, #16
3400acba:	ed82 7f00 	stc	15, cr7, [r2]
3400acbe:	f00f c00b 	le	lr, 3400acae <node_convert+0x12a>
3400acc2:	f024 0303 	bic.w	r3, r4, #3
3400acc6:	429c      	cmp	r4, r3
3400acc8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
3400accc:	d017      	beq.n	3400acfe <node_convert+0x17a>
3400acce:	edd5 7a00 	vldr	s15, [r5]
3400acd2:	ee67 7a80 	vmul.f32	s15, s15, s0
3400acd6:	1c5a      	adds	r2, r3, #1
3400acd8:	4294      	cmp	r4, r2
3400acda:	edc5 7a00 	vstr	s15, [r5]
3400acde:	d90e      	bls.n	3400acfe <node_convert+0x17a>
3400ace0:	edd5 7a01 	vldr	s15, [r5, #4]
3400ace4:	ee67 7a80 	vmul.f32	s15, s15, s0
3400ace8:	3302      	adds	r3, #2
3400acea:	429c      	cmp	r4, r3
3400acec:	edc5 7a01 	vstr	s15, [r5, #4]
3400acf0:	d905      	bls.n	3400acfe <node_convert+0x17a>
3400acf2:	edd5 7a02 	vldr	s15, [r5, #8]
3400acf6:	ee67 7a80 	vmul.f32	s15, s15, s0
3400acfa:	edc5 7a02 	vstr	s15, [r5, #8]
3400acfe:	b003      	add	sp, #12
3400ad00:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400ad02:	b19a      	cbz	r2, 3400ad2c <node_convert+0x1a8>
3400ad04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3400ad08:	e782      	b.n	3400ac10 <node_convert+0x8c>
3400ad0a:	b12b      	cbz	r3, 3400ad18 <node_convert+0x194>
3400ad0c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3400ad10:	4613      	mov	r3, r2
3400ad12:	e79e      	b.n	3400ac52 <node_convert+0xce>
3400ad14:	2b00      	cmp	r3, #0
3400ad16:	d17f      	bne.n	3400ae18 <node_convert+0x294>
3400ad18:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3400ad1c:	4622      	mov	r2, r4
3400ad1e:	b003      	add	sp, #12
3400ad20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3400ad24:	f000 b8f2 	b.w	3400af0c <forward_lite_node_convert_integer_if32ou8>
3400ad28:	2a00      	cmp	r2, #0
3400ad2a:	d167      	bne.n	3400adfc <node_convert+0x278>
3400ad2c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3400ad30:	2300      	movs	r3, #0
3400ad32:	4622      	mov	r2, r4
3400ad34:	4629      	mov	r1, r5
3400ad36:	b003      	add	sp, #12
3400ad38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3400ad3c:	f000 b8e2 	b.w	3400af04 <forward_lite_node_convert_integer_iu8of32>
3400ad40:	4622      	mov	r2, r4
3400ad42:	4629      	mov	r1, r5
3400ad44:	781b      	ldrb	r3, [r3, #0]
3400ad46:	b003      	add	sp, #12
3400ad48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3400ad4c:	f000 b8da 	b.w	3400af04 <forward_lite_node_convert_integer_iu8of32>
3400ad50:	682a      	ldr	r2, [r5, #0]
3400ad52:	f3c2 17c6 	ubfx	r7, r2, #7, #7
3400ad56:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
3400ad5a:	1afb      	subs	r3, r7, r3
3400ad5c:	3340      	adds	r3, #64	@ 0x40
3400ad5e:	f3c2 52c0 	ubfx	r2, r2, #23, #1
3400ad62:	1a9b      	subs	r3, r3, r2
3400ad64:	d03e      	beq.n	3400ade4 <node_convert+0x260>
3400ad66:	425b      	negs	r3, r3
3400ad68:	ee00 3a90 	vmov	s1, r3
3400ad6c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
3400ad70:	eef8 0ae0 	vcvt.f32.s32	s1, s1
3400ad74:	9001      	str	r0, [sp, #4]
3400ad76:	f005 febf 	bl	34010af8 <powf>
3400ad7a:	9801      	ldr	r0, [sp, #4]
3400ad7c:	b394      	cbz	r4, 3400ade4 <node_convert+0x260>
3400ad7e:	1e63      	subs	r3, r4, #1
3400ad80:	2b02      	cmp	r3, #2
3400ad82:	d94f      	bls.n	3400ae24 <node_convert+0x2a0>
3400ad84:	ee10 2a10 	vmov	r2, s0
3400ad88:	08a3      	lsrs	r3, r4, #2
3400ad8a:	f043 e001 	dls	lr, r3
3400ad8e:	eea4 2b10 	vdup.32	q2, r2
3400ad92:	4603      	mov	r3, r0
3400ad94:	ed93 7f00 	ldc	15, cr7, [r3]
3400ad98:	461a      	mov	r2, r3
3400ad9a:	ff06 6d54 	vmul.f32	q3, q3, q2
3400ad9e:	3310      	adds	r3, #16
3400ada0:	ed82 7f00 	stc	15, cr7, [r2]
3400ada4:	f00f c00b 	le	lr, 3400ad94 <node_convert+0x210>
3400ada8:	f024 0603 	bic.w	r6, r4, #3
3400adac:	42a6      	cmp	r6, r4
3400adae:	eb00 0386 	add.w	r3, r0, r6, lsl #2
3400adb2:	d017      	beq.n	3400ade4 <node_convert+0x260>
3400adb4:	edd3 7a00 	vldr	s15, [r3]
3400adb8:	ee67 7a80 	vmul.f32	s15, s15, s0
3400adbc:	1c72      	adds	r2, r6, #1
3400adbe:	42a2      	cmp	r2, r4
3400adc0:	edc3 7a00 	vstr	s15, [r3]
3400adc4:	d20e      	bcs.n	3400ade4 <node_convert+0x260>
3400adc6:	edd3 7a01 	vldr	s15, [r3, #4]
3400adca:	ee67 7a80 	vmul.f32	s15, s15, s0
3400adce:	3602      	adds	r6, #2
3400add0:	42b4      	cmp	r4, r6
3400add2:	edc3 7a01 	vstr	s15, [r3, #4]
3400add6:	d905      	bls.n	3400ade4 <node_convert+0x260>
3400add8:	edd3 7a02 	vldr	s15, [r3, #8]
3400addc:	ee67 7a80 	vmul.f32	s15, s15, s0
3400ade0:	edc3 7a02 	vstr	s15, [r3, #8]
3400ade4:	2f08      	cmp	r7, #8
3400ade6:	d00d      	beq.n	3400ae04 <node_convert+0x280>
3400ade8:	4622      	mov	r2, r4
3400adea:	68a9      	ldr	r1, [r5, #8]
3400adec:	b003      	add	sp, #12
3400adee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3400adf2:	f000 ba81 	b.w	3400b2f8 <st_f32_to_int16>
3400adf6:	f000 fd57 	bl	3400b8a8 <st_int8_to_f32>
3400adfa:	e742      	b.n	3400ac82 <node_convert+0xfe>
3400adfc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3400ae00:	460b      	mov	r3, r1
3400ae02:	e705      	b.n	3400ac10 <node_convert+0x8c>
3400ae04:	4622      	mov	r2, r4
3400ae06:	68a9      	ldr	r1, [r5, #8]
3400ae08:	b003      	add	sp, #12
3400ae0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3400ae0e:	f000 bb47 	b.w	3400b4a0 <st_f32_to_int8>
3400ae12:	6853      	ldr	r3, [r2, #4]
3400ae14:	781b      	ldrb	r3, [r3, #0]
3400ae16:	e781      	b.n	3400ad1c <node_convert+0x198>
3400ae18:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3400ae1c:	462b      	mov	r3, r5
3400ae1e:	e718      	b.n	3400ac52 <node_convert+0xce>
3400ae20:	2300      	movs	r3, #0
3400ae22:	e754      	b.n	3400acce <node_convert+0x14a>
3400ae24:	4603      	mov	r3, r0
3400ae26:	e7c5      	b.n	3400adb4 <node_convert+0x230>
3400ae28:	2300      	movs	r3, #0
3400ae2a:	685b      	ldr	r3, [r3, #4]
3400ae2c:	deff      	udf	#255	@ 0xff
3400ae2e:	bf00      	nop

3400ae30 <forward_sm_integer>:
3400ae30:	b5f0      	push	{r4, r5, r6, r7, lr}
3400ae32:	6983      	ldr	r3, [r0, #24]
3400ae34:	b087      	sub	sp, #28
3400ae36:	881d      	ldrh	r5, [r3, #0]
3400ae38:	2d00      	cmp	r5, #0
3400ae3a:	d052      	beq.n	3400aee2 <forward_sm_integer+0xb2>
3400ae3c:	685f      	ldr	r7, [r3, #4]
3400ae3e:	687c      	ldr	r4, [r7, #4]
3400ae40:	b104      	cbz	r4, 3400ae44 <forward_sm_integer+0x14>
3400ae42:	6824      	ldr	r4, [r4, #0]
3400ae44:	2d01      	cmp	r5, #1
3400ae46:	d054      	beq.n	3400aef2 <forward_sm_integer+0xc2>
3400ae48:	693e      	ldr	r6, [r7, #16]
3400ae4a:	b106      	cbz	r6, 3400ae4e <forward_sm_integer+0x1e>
3400ae4c:	6836      	ldr	r6, [r6, #0]
3400ae4e:	68a3      	ldr	r3, [r4, #8]
3400ae50:	0a19      	lsrs	r1, r3, #8
3400ae52:	d04c      	beq.n	3400aeee <forward_sm_integer+0xbe>
3400ae54:	ea4f 0e81 	mov.w	lr, r1, lsl #2
3400ae58:	f1ae 0e04 	sub.w	lr, lr, #4
3400ae5c:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
3400ae60:	f10e 0e01 	add.w	lr, lr, #1
3400ae64:	f04e e001 	dls	lr, lr
3400ae68:	2201      	movs	r2, #1
3400ae6a:	68e3      	ldr	r3, [r4, #12]
3400ae6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
3400ae70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3400ae74:	fb01 f202 	mul.w	r2, r1, r2
3400ae78:	f00f c007 	le	lr, 3400ae70 <forward_sm_integer+0x40>
3400ae7c:	69c3      	ldr	r3, [r0, #28]
3400ae7e:	2d03      	cmp	r5, #3
3400ae80:	f8d3 c008 	ldr.w	ip, [r3, #8]
3400ae84:	d935      	bls.n	3400aef2 <forward_sm_integer+0xc2>
3400ae86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400ae88:	2b00      	cmp	r3, #0
3400ae8a:	d035      	beq.n	3400aef8 <forward_sm_integer+0xc8>
3400ae8c:	6819      	ldr	r1, [r3, #0]
3400ae8e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
3400ae92:	6989      	ldr	r1, [r1, #24]
3400ae94:	69a0      	ldr	r0, [r4, #24]
3400ae96:	688f      	ldr	r7, [r1, #8]
3400ae98:	68e1      	ldr	r1, [r4, #12]
3400ae9a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
3400ae9e:	6921      	ldr	r1, [r4, #16]
3400aea0:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
3400aea4:	bf38      	it	cc
3400aea6:	6961      	ldrcc	r1, [r4, #20]
3400aea8:	4c14      	ldr	r4, [pc, #80]	@ (3400aefc <forward_sm_integer+0xcc>)
3400aeaa:	bf38      	it	cc
3400aeac:	f851 3023 	ldrcc.w	r3, [r1, r3, lsl #2]
3400aeb0:	6801      	ldr	r1, [r0, #0]
3400aeb2:	bf28      	it	cs
3400aeb4:	2300      	movcs	r3, #0
3400aeb6:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
3400aeba:	42a1      	cmp	r1, r4
3400aebc:	69b4      	ldr	r4, [r6, #24]
3400aebe:	6881      	ldr	r1, [r0, #8]
3400aec0:	68a0      	ldr	r0, [r4, #8]
3400aec2:	9704      	str	r7, [sp, #16]
3400aec4:	f8dc 4008 	ldr.w	r4, [ip, #8]
3400aec8:	9403      	str	r4, [sp, #12]
3400aeca:	f8dc 4004 	ldr.w	r4, [ip, #4]
3400aece:	9402      	str	r4, [sp, #8]
3400aed0:	f8dc 4000 	ldr.w	r4, [ip]
3400aed4:	e9cd 5400 	strd	r5, r4, [sp]
3400aed8:	d005      	beq.n	3400aee6 <forward_sm_integer+0xb6>
3400aeda:	f000 fa03 	bl	3400b2e4 <forward_lite_nl_softmax_iu8ou8>
3400aede:	b007      	add	sp, #28
3400aee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400aee2:	686b      	ldr	r3, [r5, #4]
3400aee4:	deff      	udf	#255	@ 0xff
3400aee6:	f000 f9f3 	bl	3400b2d0 <forward_lite_nl_softmax_is8os8>
3400aeea:	b007      	add	sp, #28
3400aeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400aeee:	2201      	movs	r2, #1
3400aef0:	e7c4      	b.n	3400ae7c <forward_sm_integer+0x4c>
3400aef2:	2300      	movs	r3, #0
3400aef4:	685b      	ldr	r3, [r3, #4]
3400aef6:	deff      	udf	#255	@ 0xff
3400aef8:	699b      	ldr	r3, [r3, #24]
3400aefa:	deff      	udf	#255	@ 0xff
3400aefc:	00840440 	.word	0x00840440

3400af00 <forward_lite_node_convert_integer_is8of32>:
3400af00:	f000 b806 	b.w	3400af10 <lite_convert_is8of32>

3400af04 <forward_lite_node_convert_integer_iu8of32>:
3400af04:	f000 b83a 	b.w	3400af7c <lite_convert_iu8of32>

3400af08 <forward_lite_node_convert_integer_if32os8>:
3400af08:	f000 b85e 	b.w	3400afc8 <lite_convert_if32os8>

3400af0c <forward_lite_node_convert_integer_if32ou8>:
3400af0c:	f000 b954 	b.w	3400b1b8 <lite_convert_if32ou8>

3400af10 <lite_convert_is8of32>:
3400af10:	2a00      	cmp	r2, #0
3400af12:	dd31      	ble.n	3400af78 <lite_convert_is8of32+0x68>
3400af14:	b570      	push	{r4, r5, r6, lr}
3400af16:	1885      	adds	r5, r0, r2
3400af18:	1e50      	subs	r0, r2, #1
3400af1a:	f020 0003 	bic.w	r0, r0, #3
3400af1e:	1f16      	subs	r6, r2, #4
3400af20:	ea4f 0c92 	mov.w	ip, r2, lsr #2
3400af24:	ee10 4a10 	vmov	r4, s0
3400af28:	1a36      	subs	r6, r6, r0
3400af2a:	f10c 0c01 	add.w	ip, ip, #1
3400af2e:	e008      	b.n	3400af42 <lite_convert_is8of32+0x32>
3400af30:	4608      	mov	r0, r1
3400af32:	4296      	cmp	r6, r2
3400af34:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400af38:	ed80 7f00 	stc	15, cr7, [r0]
3400af3c:	f101 0110 	add.w	r1, r1, #16
3400af40:	d019      	beq.n	3400af76 <lite_convert_is8of32+0x66>
3400af42:	f022 e801 	bfcsel	0, 3400af48 <lite_convert_is8of32+0x38>, 4, hi
3400af46:	1aa8      	subs	r0, r5, r2
3400af48:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400af4c:	ed90 6f00 	ldc	15, cr6, [r0]
3400af50:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
3400af54:	ffbb 6646 	vcvt.f32.s32	q3, q3
3400af58:	f1bc 0c01 	subs.w	ip, ip, #1
3400af5c:	eefd ea10 	vmrs	lr, <impl def 0xd>
3400af60:	ee37 6e64 	cdp	14, 3, cr6, cr7, cr4, {3}
3400af64:	f1a2 0204 	sub.w	r2, r2, #4
3400af68:	d1e2      	bne.n	3400af30 <lite_convert_is8of32+0x20>
3400af6a:	eeed ea10 	vmsr	<impl def 0xd>, lr
3400af6e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400af72:	ed81 7f00 	stc	15, cr7, [r1]
3400af76:	bd70      	pop	{r4, r5, r6, pc}
3400af78:	4770      	bx	lr
3400af7a:	bf00      	nop

3400af7c <lite_convert_iu8of32>:
3400af7c:	2a00      	cmp	r2, #0
3400af7e:	dd22      	ble.n	3400afc6 <lite_convert_iu8of32+0x4a>
3400af80:	b530      	push	{r4, r5, lr}
3400af82:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
3400af86:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
3400af8a:	f10e 0e01 	add.w	lr, lr, #1
3400af8e:	ee10 5a10 	vmov	r5, s0
3400af92:	f04e e001 	dls	lr, lr
3400af96:	1884      	adds	r4, r0, r2
3400af98:	f022 e801 	bfcsel	0, 3400af9e <lite_convert_iu8of32+0x22>, 4, hi
3400af9c:	1aa0      	subs	r0, r4, r2
3400af9e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400afa2:	fd90 6f00 	ldc2	15, cr6, [r0]
3400afa6:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
3400afaa:	ffbb 6646 	vcvt.f32.s32	q3, q3
3400afae:	4608      	mov	r0, r1
3400afb0:	ee37 6e65 	cdp	14, 3, cr6, cr7, cr5, {3}
3400afb4:	3a04      	subs	r2, #4
3400afb6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400afba:	ed80 7f00 	stc	15, cr7, [r0]
3400afbe:	3110      	adds	r1, #16
3400afc0:	f00f c017 	le	lr, 3400af98 <lite_convert_iu8of32+0x1c>
3400afc4:	bd30      	pop	{r4, r5, pc}
3400afc6:	4770      	bx	lr

3400afc8 <lite_convert_if32os8>:
3400afc8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3400afcc:	ee07 3a10 	vmov	s14, r3
3400afd0:	eec7 7a80 	vdiv.f32	s15, s15, s0
3400afd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
3400afd8:	ee17 ca90 	vmov	ip, s15
3400afdc:	b500      	push	{lr}
3400afde:	ed2d 8b10 	vpush	{d8-d15}
3400afe2:	ee17 3a10 	vmov	r3, s14
3400afe6:	eea8 cb10 	vdup.32	q4, ip
3400afea:	b09d      	sub	sp, #116	@ 0x74
3400afec:	eea0 3b10 	vdup.32	q0, r3
3400aff0:	2a00      	cmp	r2, #0
3400aff2:	ab10      	add	r3, sp, #64	@ 0x40
3400aff4:	ed83 9f00 	stc	15, cr9, [r3]
3400aff8:	dd6a      	ble.n	3400b0d0 <lite_convert_if32os8+0x108>
3400affa:	2a0f      	cmp	r2, #15
3400affc:	dd6d      	ble.n	3400b0da <lite_convert_if32os8+0x112>
3400affe:	f1a2 0c10 	sub.w	ip, r2, #16
3400b002:	ea4f 131c 	mov.w	r3, ip, lsr #4
3400b006:	3301      	adds	r3, #1
3400b008:	f1bc 0f00 	cmp.w	ip, #0
3400b00c:	f04f 0e01 	mov.w	lr, #1
3400b010:	ed9f 2b61 	vldr	d2, [pc, #388]	@ 3400b198 <lite_convert_if32os8+0x1d0>
3400b014:	ed9f 3b62 	vldr	d3, [pc, #392]	@ 3400b1a0 <lite_convert_if32os8+0x1d8>
3400b018:	bfa8      	it	ge
3400b01a:	469e      	movge	lr, r3
3400b01c:	ab14      	add	r3, sp, #80	@ 0x50
3400b01e:	ed9f 4b62 	vldr	d4, [pc, #392]	@ 3400b1a8 <lite_convert_if32os8+0x1e0>
3400b022:	ed9f 5b63 	vldr	d5, [pc, #396]	@ 3400b1b0 <lite_convert_if32os8+0x1e8>
3400b026:	f04e e001 	dls	lr, lr
3400b02a:	ef22 6152 	vorr	q3, q1, q1
3400b02e:	ed83 9f00 	stc	15, cr9, [r3]
3400b032:	fc90 9f01 	ldc2	15, cr9, [r0], {1}
3400b036:	fc90 9f21 	ldc2	15, cr9, [r0], {33}	@ 0x21
3400b03a:	fc90 9f41 	ldc2	15, cr9, [r0], {65}	@ 0x41
3400b03e:	fcb0 9f61 	ldc2	15, cr9, [r0], #388	@ 0x184
3400b042:	466b      	mov	r3, sp
3400b044:	ec8d 8b10 	vstmia	sp, {d8-d15}
3400b048:	ed93 df00 	ldc	15, cr13, [r3]
3400b04c:	ab14      	add	r3, sp, #80	@ 0x50
3400b04e:	ed93 ff00 	ldc	15, cr15, [r3]
3400b052:	ef20 a150 	vorr	q5, q0, q0
3400b056:	ef0c ac5e 	vfma.f32	q5, q6, q7
3400b05a:	ffbb a04a 	vcvta.s32.f32	q5, q5
3400b05e:	ab04      	add	r3, sp, #16
3400b060:	ed93 df00 	ldc	15, cr13, [r3]
3400b064:	ee37 6e0b 	cdp	14, 3, cr6, cr7, cr11, {0}
3400b068:	ef20 a150 	vorr	q5, q0, q0
3400b06c:	ef0c ac5e 	vfma.f32	q5, q6, q7
3400b070:	ffbb a04a 	vcvta.s32.f32	q5, q5
3400b074:	ab08      	add	r3, sp, #32
3400b076:	ee37 2e0b 	cdp	14, 3, cr2, cr7, cr11, {0}
3400b07a:	ef20 c150 	vorr	q6, q0, q0
3400b07e:	ed93 bf00 	ldc	15, cr11, [r3]
3400b082:	ab0c      	add	r3, sp, #48	@ 0x30
3400b084:	ef0a cc5e 	vfma.f32	q6, q5, q7
3400b088:	ed93 9f00 	ldc	15, cr9, [r3]
3400b08c:	ef20 a150 	vorr	q5, q0, q0
3400b090:	ffbb c04c 	vcvta.s32.f32	q6, q6
3400b094:	ef08 ac5e 	vfma.f32	q5, q4, q7
3400b098:	ee37 7e0d 	cdp	14, 3, cr7, cr7, cr13, {0}
3400b09c:	ffbb a04a 	vcvta.s32.f32	q5, q5
3400b0a0:	ee33 4e07 	cdp	14, 3, cr4, cr3, cr7, {0}
3400b0a4:	ee37 3e0b 	cdp	14, 3, cr3, cr7, cr11, {0}
3400b0a8:	f002 e801 	bfcsel	0, 3400b0ae <lite_convert_if32os8+0xe6>, 4, eq
3400b0ac:	468c      	mov	ip, r1
3400b0ae:	ee33 5e03 	cdp	14, 3, cr5, cr3, cr3, {0}
3400b0b2:	3110      	adds	r1, #16
3400b0b4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400b0b8:	ed8c 5e00 	stc	14, cr5, [ip]
3400b0bc:	3a10      	subs	r2, #16
3400b0be:	f00f c049 	le	lr, 3400b032 <lite_convert_if32os8+0x6a>
3400b0c2:	ab14      	add	r3, sp, #80	@ 0x50
3400b0c4:	ed83 5e00 	stc	14, cr5, [r3]
3400b0c8:	ab18      	add	r3, sp, #96	@ 0x60
3400b0ca:	ed83 3e80 	stc	14, cr3, [r3, #512]	@ 0x200
3400b0ce:	b9a2      	cbnz	r2, 3400b0fa <lite_convert_if32os8+0x132>
3400b0d0:	b01d      	add	sp, #116	@ 0x74
3400b0d2:	ecbd 8b10 	vpop	{d8-d15}
3400b0d6:	f85d fb04 	ldr.w	pc, [sp], #4
3400b0da:	ed9f 4b2f 	vldr	d4, [pc, #188]	@ 3400b198 <lite_convert_if32os8+0x1d0>
3400b0de:	ed9f 5b30 	vldr	d5, [pc, #192]	@ 3400b1a0 <lite_convert_if32os8+0x1d8>
3400b0e2:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 3400b1a8 <lite_convert_if32os8+0x1e0>
3400b0e6:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 3400b1b0 <lite_convert_if32os8+0x1e8>
3400b0ea:	ab18      	add	r3, sp, #96	@ 0x60
3400b0ec:	ed83 5e80 	stc	14, cr5, [r3, #512]	@ 0x200
3400b0f0:	ab14      	add	r3, sp, #80	@ 0x50
3400b0f2:	ed83 7e00 	stc	14, cr7, [r3]
3400b0f6:	ef24 6154 	vorr	q3, q2, q2
3400b0fa:	f002 e801 	bfcsel	0, 3400b100 <lite_convert_if32os8+0x138>, 4, eq
3400b0fe:	aa10      	add	r2, sp, #64	@ 0x40
3400b100:	fc90 9f01 	ldc2	15, cr9, [r0], {1}
3400b104:	fc90 9f21 	ldc2	15, cr9, [r0], {33}	@ 0x21
3400b108:	fc90 9f41 	ldc2	15, cr9, [r0], {65}	@ 0x41
3400b10c:	fc90 9f61 	ldc2	15, cr9, [r0], {97}	@ 0x61
3400b110:	ed92 5f00 	ldc	15, cr5, [r2]
3400b114:	ef20 2150 	vorr	q1, q0, q0
3400b118:	ef08 2c54 	vfma.f32	q1, q4, q2
3400b11c:	ffbb 4042 	vcvta.s32.f32	q2, q1
3400b120:	466a      	mov	r2, sp
3400b122:	ee37 6e05 	cdp	14, 3, cr6, cr7, cr5, {0}
3400b126:	ed82 7e80 	stc	14, cr7, [r2, #512]	@ 0x200
3400b12a:	aa10      	add	r2, sp, #64	@ 0x40
3400b12c:	ed92 5f00 	ldc	15, cr5, [r2]
3400b130:	ef20 2150 	vorr	q1, q0, q0
3400b134:	ef0a 2c54 	vfma.f32	q1, q5, q2
3400b138:	aa18      	add	r2, sp, #96	@ 0x60
3400b13a:	ffbb 6042 	vcvta.s32.f32	q3, q1
3400b13e:	ed92 3e80 	ldc	14, cr3, [r2, #512]	@ 0x200
3400b142:	ee37 2e07 	cdp	14, 3, cr2, cr7, cr7, {0}
3400b146:	aa10      	add	r2, sp, #64	@ 0x40
3400b148:	ef22 4152 	vorr	q2, q1, q1
3400b14c:	ed92 3f00 	ldc	15, cr3, [r2]
3400b150:	ef20 6150 	vorr	q3, q0, q0
3400b154:	ef0e 0c52 	vfma.f32	q0, q7, q1
3400b158:	ef0c 6c52 	vfma.f32	q3, q6, q1
3400b15c:	466a      	mov	r2, sp
3400b15e:	ef20 2150 	vorr	q1, q0, q0
3400b162:	ffbb 0046 	vcvta.s32.f32	q0, q3
3400b166:	ffbb 2042 	vcvta.s32.f32	q1, q1
3400b16a:	ed92 7e80 	ldc	14, cr7, [r2, #512]	@ 0x200
3400b16e:	aa14      	add	r2, sp, #80	@ 0x50
3400b170:	ee37 5e03 	cdp	14, 3, cr5, cr7, cr3, {0}
3400b174:	ee37 7e01 	cdp	14, 3, cr7, cr7, cr1, {0}
3400b178:	ed92 3e00 	ldc	14, cr3, [r2]
3400b17c:	ee33 2e07 	cdp	14, 3, cr2, cr3, cr7, {0}
3400b180:	ee33 3e05 	cdp	14, 3, cr3, cr3, cr5, {0}
3400b184:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400b188:	ed81 3e00 	stc	14, cr3, [r1]
3400b18c:	b01d      	add	sp, #116	@ 0x74
3400b18e:	ecbd 8b10 	vpop	{d8-d15}
3400b192:	f85d fb04 	ldr.w	pc, [sp], #4
3400b196:	bf00      	nop
	...

3400b1b8 <lite_convert_if32ou8>:
3400b1b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3400b1bc:	2a00      	cmp	r2, #0
3400b1be:	eec7 7a80 	vdiv.f32	s15, s15, s0
3400b1c2:	dd72      	ble.n	3400b2aa <lite_convert_if32ou8+0xf2>
3400b1c4:	ee07 3a10 	vmov	s14, r3
3400b1c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
3400b1cc:	ee17 ca90 	vmov	ip, s15
3400b1d0:	b500      	push	{lr}
3400b1d2:	ed2d 8b10 	vpush	{d8-d15}
3400b1d6:	ee17 3a10 	vmov	r3, s14
3400b1da:	eea8 cb10 	vdup.32	q4, ip
3400b1de:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 3400b2b0 <lite_convert_if32ou8+0xf8>
3400b1e2:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 3400b2b8 <lite_convert_if32ou8+0x100>
3400b1e6:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
3400b1ea:	b095      	sub	sp, #84	@ 0x54
3400b1ec:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
3400b1f0:	eea0 3b10 	vdup.32	q0, r3
3400b1f4:	f10e 0e01 	add.w	lr, lr, #1
3400b1f8:	ab10      	add	r3, sp, #64	@ 0x40
3400b1fa:	ed9f 2b31 	vldr	d2, [pc, #196]	@ 3400b2c0 <lite_convert_if32ou8+0x108>
3400b1fe:	ed9f 3b32 	vldr	d3, [pc, #200]	@ 3400b2c8 <lite_convert_if32ou8+0x110>
3400b202:	f04e e001 	dls	lr, lr
3400b206:	ef26 4156 	vorr	q2, q3, q3
3400b20a:	ed83 9f00 	stc	15, cr9, [r3]
3400b20e:	4411      	add	r1, r2
3400b210:	fc90 9f01 	ldc2	15, cr9, [r0], {1}
3400b214:	fc90 9f21 	ldc2	15, cr9, [r0], {33}	@ 0x21
3400b218:	fc90 9f41 	ldc2	15, cr9, [r0], {65}	@ 0x41
3400b21c:	fcb0 9f61 	ldc2	15, cr9, [r0], #388	@ 0x184
3400b220:	466b      	mov	r3, sp
3400b222:	ec8d 8b10 	vstmia	sp, {d8-d15}
3400b226:	ed93 df00 	ldc	15, cr13, [r3]
3400b22a:	ab10      	add	r3, sp, #64	@ 0x40
3400b22c:	ed93 ff00 	ldc	15, cr15, [r3]
3400b230:	ef20 a150 	vorr	q5, q0, q0
3400b234:	ef0c ac5e 	vfma.f32	q5, q6, q7
3400b238:	ffbb a0ca 	vcvta.u32.f32	q5, q5
3400b23c:	ab04      	add	r3, sp, #16
3400b23e:	ed93 df00 	ldc	15, cr13, [r3]
3400b242:	fe37 4e0b 	cdp2	14, 3, cr4, cr7, cr11, {0}
3400b246:	ef20 a150 	vorr	q5, q0, q0
3400b24a:	ef0c ac5e 	vfma.f32	q5, q6, q7
3400b24e:	ffbb a0ca 	vcvta.u32.f32	q5, q5
3400b252:	ab08      	add	r3, sp, #32
3400b254:	fe37 6e0b 	cdp2	14, 3, cr6, cr7, cr11, {0}
3400b258:	ef20 c150 	vorr	q6, q0, q0
3400b25c:	ed93 bf00 	ldc	15, cr11, [r3]
3400b260:	ab0c      	add	r3, sp, #48	@ 0x30
3400b262:	ef0a cc5e 	vfma.f32	q6, q5, q7
3400b266:	ed93 9f00 	ldc	15, cr9, [r3]
3400b26a:	ef20 a150 	vorr	q5, q0, q0
3400b26e:	ffbb c0cc 	vcvta.u32.f32	q6, q6
3400b272:	ef08 ac5e 	vfma.f32	q5, q4, q7
3400b276:	fe37 5e0d 	cdp2	14, 3, cr5, cr7, cr13, {0}
3400b27a:	ffbb a0ca 	vcvta.u32.f32	q5, q5
3400b27e:	fe33 2e05 	cdp2	14, 3, cr2, cr3, cr5, {0}
3400b282:	fe37 7e0b 	cdp2	14, 3, cr7, cr7, cr11, {0}
3400b286:	f022 e801 	bfcsel	0, 3400b28c <lite_convert_if32ou8+0xd4>, 4, hi
3400b28a:	fe33 3e07 	cdp2	14, 3, cr3, cr3, cr7, {0}
3400b28e:	eba1 0c02 	sub.w	ip, r1, r2
3400b292:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400b296:	ed8c 3e00 	stc	14, cr3, [ip]
3400b29a:	3a10      	subs	r2, #16
3400b29c:	f00f c049 	le	lr, 3400b210 <lite_convert_if32ou8+0x58>
3400b2a0:	b015      	add	sp, #84	@ 0x54
3400b2a2:	ecbd 8b10 	vpop	{d8-d15}
3400b2a6:	f85d fb04 	ldr.w	pc, [sp], #4
3400b2aa:	4770      	bx	lr
3400b2ac:	f3af 8000 	nop.w
	...

3400b2d0 <forward_lite_nl_softmax_is8os8>:
3400b2d0:	fbb2 f2f3 	udiv	r2, r2, r3
3400b2d4:	b410      	push	{r4}
3400b2d6:	9c01      	ldr	r4, [sp, #4]
3400b2d8:	fbb2 f2f4 	udiv	r2, r2, r4
3400b2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
3400b2e0:	f000 bb2e 	b.w	3400b940 <_lite_kernel_nl_softmax_is8os8>

3400b2e4 <forward_lite_nl_softmax_iu8ou8>:
3400b2e4:	fbb2 f2f3 	udiv	r2, r2, r3
3400b2e8:	b410      	push	{r4}
3400b2ea:	9c01      	ldr	r4, [sp, #4]
3400b2ec:	fbb2 f2f4 	udiv	r2, r2, r4
3400b2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
3400b2f4:	f001 b9e2 	b.w	3400c6bc <_lite_kernel_nl_softmax_iu8ou8>

3400b2f8 <st_f32_to_int16>:
3400b2f8:	b570      	push	{r4, r5, r6, lr}
3400b2fa:	08d5      	lsrs	r5, r2, #3
3400b2fc:	ed2d 8b08 	vpush	{d8-d11}
3400b300:	d022      	beq.n	3400b348 <st_f32_to_int16+0x50>
3400b302:	460c      	mov	r4, r1
3400b304:	ed9f 6b60 	vldr	d6, [pc, #384]	@ 3400b488 <st_f32_to_int16+0x190>
3400b308:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 3400b490 <st_f32_to_int16+0x198>
3400b30c:	4684      	mov	ip, r0
3400b30e:	f045 e001 	dls	lr, r5
3400b312:	4b61      	ldr	r3, [pc, #388]	@ (3400b498 <st_f32_to_int16+0x1a0>)
3400b314:	fc9c 9f00 	ldc2	15, cr9, [ip], {0}
3400b318:	fcbc 9f20 	ldc2	15, cr9, [ip], #128	@ 0x80
3400b31c:	ee39 2e63 	cdp	14, 3, cr2, cr9, cr3, {3}
3400b320:	ee3b 4e63 	cdp	14, 3, cr4, cr11, cr3, {3}
3400b324:	ffbb 2042 	vcvta.s32.f32	q1, q1
3400b328:	ffbb 4044 	vcvta.s32.f32	q2, q2
3400b32c:	ee37 6e03 	cdp	14, 3, cr6, cr7, cr3, {0}
3400b330:	4626      	mov	r6, r4
3400b332:	ee37 7e05 	cdp	14, 3, cr7, cr7, cr5, {0}
3400b336:	3410      	adds	r4, #16
3400b338:	ed86 7e80 	stc	14, cr7, [r6, #512]	@ 0x200
3400b33c:	f00f c017 	le	lr, 3400b314 <st_f32_to_int16+0x1c>
3400b340:	eb00 1045 	add.w	r0, r0, r5, lsl #5
3400b344:	eb01 1105 	add.w	r1, r1, r5, lsl #4
3400b348:	f012 0207 	ands.w	r2, r2, #7
3400b34c:	f000 8097 	beq.w	3400b47e <st_f32_to_int16+0x186>
3400b350:	edd0 5a00 	vldr	s11, [r0]
3400b354:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 3400b49c <st_f32_to_int16+0x1a4>
3400b358:	ee65 5a86 	vmul.f32	s11, s11, s12
3400b35c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
3400b360:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
3400b364:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
3400b368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b36c:	fe77 7a26 	vselgt.f32	s15, s14, s13
3400b370:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b378:	ee17 3a90 	vmov	r3, s15
3400b37c:	f303 030f 	ssat	r3, #16, r3
3400b380:	2a01      	cmp	r2, #1
3400b382:	800b      	strh	r3, [r1, #0]
3400b384:	d07b      	beq.n	3400b47e <st_f32_to_int16+0x186>
3400b386:	edd0 7a01 	vldr	s15, [r0, #4]
3400b38a:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b38e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b396:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b39a:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b39e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b3a2:	ee17 3a90 	vmov	r3, s15
3400b3a6:	f303 030f 	ssat	r3, #16, r3
3400b3aa:	2a02      	cmp	r2, #2
3400b3ac:	804b      	strh	r3, [r1, #2]
3400b3ae:	d066      	beq.n	3400b47e <st_f32_to_int16+0x186>
3400b3b0:	edd0 7a02 	vldr	s15, [r0, #8]
3400b3b4:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b3b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b3c0:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b3c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b3c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b3cc:	ee17 3a90 	vmov	r3, s15
3400b3d0:	f303 030f 	ssat	r3, #16, r3
3400b3d4:	2a03      	cmp	r2, #3
3400b3d6:	808b      	strh	r3, [r1, #4]
3400b3d8:	d051      	beq.n	3400b47e <st_f32_to_int16+0x186>
3400b3da:	edd0 7a03 	vldr	s15, [r0, #12]
3400b3de:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b3e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b3ea:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b3ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b3f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b3f6:	ee17 3a90 	vmov	r3, s15
3400b3fa:	f303 030f 	ssat	r3, #16, r3
3400b3fe:	2a04      	cmp	r2, #4
3400b400:	80cb      	strh	r3, [r1, #6]
3400b402:	d03c      	beq.n	3400b47e <st_f32_to_int16+0x186>
3400b404:	edd0 7a04 	vldr	s15, [r0, #16]
3400b408:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b40c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b414:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b418:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b41c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b420:	ee17 3a90 	vmov	r3, s15
3400b424:	f303 030f 	ssat	r3, #16, r3
3400b428:	3a05      	subs	r2, #5
3400b42a:	810b      	strh	r3, [r1, #8]
3400b42c:	d027      	beq.n	3400b47e <st_f32_to_int16+0x186>
3400b42e:	edd0 7a05 	vldr	s15, [r0, #20]
3400b432:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b43e:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b442:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b44a:	ee17 3a90 	vmov	r3, s15
3400b44e:	f303 030f 	ssat	r3, #16, r3
3400b452:	2a01      	cmp	r2, #1
3400b454:	814b      	strh	r3, [r1, #10]
3400b456:	d012      	beq.n	3400b47e <st_f32_to_int16+0x186>
3400b458:	edd0 7a06 	vldr	s15, [r0, #24]
3400b45c:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b468:	fe37 7a26 	vselgt.f32	s14, s14, s13
3400b46c:	ee37 7a27 	vadd.f32	s14, s14, s15
3400b470:	eebd 7ac7 	vcvt.s32.f32	s14, s14
3400b474:	ee17 3a10 	vmov	r3, s14
3400b478:	f303 030f 	ssat	r3, #16, r3
3400b47c:	818b      	strh	r3, [r1, #12]
3400b47e:	ecbd 8b08 	vpop	{d8-d11}
3400b482:	bd70      	pop	{r4, r5, r6, pc}
3400b484:	f3af 8000 	nop.w
	...
3400b498:	46fffe00 	.word	0x46fffe00
3400b49c:	47000000 	.word	0x47000000

3400b4a0 <st_f32_to_int8>:
3400b4a0:	b570      	push	{r4, r5, r6, lr}
3400b4a2:	0915      	lsrs	r5, r2, #4
3400b4a4:	ed2d 8b10 	vpush	{d8-d15}
3400b4a8:	f000 81a5 	beq.w	3400b7f6 <st_f32_to_int8+0x356>
3400b4ac:	ed9f 0bd4 	vldr	d0, [pc, #848]	@ 3400b800 <st_f32_to_int8+0x360>
3400b4b0:	ed9f 1bd5 	vldr	d1, [pc, #852]	@ 3400b808 <st_f32_to_int8+0x368>
3400b4b4:	ea4f 1e05 	mov.w	lr, r5, lsl #4
3400b4b8:	f1ae 0e10 	sub.w	lr, lr, #16
3400b4bc:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
3400b4c0:	f10e 0e01 	add.w	lr, lr, #1
3400b4c4:	ed9f 4bd2 	vldr	d4, [pc, #840]	@ 3400b810 <st_f32_to_int8+0x370>
3400b4c8:	ed9f 5bd3 	vldr	d5, [pc, #844]	@ 3400b818 <st_f32_to_int8+0x378>
3400b4cc:	f04f 4386 	mov.w	r3, #1124073472	@ 0x43000000
3400b4d0:	f04e e001 	dls	lr, lr
3400b4d4:	4684      	mov	ip, r0
3400b4d6:	ef20 6150 	vorr	q3, q0, q0
3400b4da:	eb01 1405 	add.w	r4, r1, r5, lsl #4
3400b4de:	fc9c 9f01 	ldc2	15, cr9, [ip], {1}
3400b4e2:	fc9c 9f21 	ldc2	15, cr9, [ip], {33}	@ 0x21
3400b4e6:	fc9c 9f41 	ldc2	15, cr9, [ip], {65}	@ 0x41
3400b4ea:	fcbc 9f61 	ldc2	15, cr9, [ip], #388	@ 0x184
3400b4ee:	ee39 2e63 	cdp	14, 3, cr2, cr9, cr3, {3}
3400b4f2:	ffbb 2042 	vcvta.s32.f32	q1, q1
3400b4f6:	ee37 6e03 	cdp	14, 3, cr6, cr7, cr3, {0}
3400b4fa:	ee3b 2e63 	cdp	14, 3, cr2, cr11, cr3, {3}
3400b4fe:	ffbb 2042 	vcvta.s32.f32	q1, q1
3400b502:	ee37 0e03 	cdp	14, 3, cr0, cr7, cr3, {0}
3400b506:	ee3d 2e63 	cdp	14, 3, cr2, cr13, cr3, {3}
3400b50a:	ee3f 8e63 	cdp	14, 3, cr8, cr15, cr3, {3}
3400b50e:	ffbb 2042 	vcvta.s32.f32	q1, q1
3400b512:	ffbb 8048 	vcvta.s32.f32	q4, q4
3400b516:	ee37 7e03 	cdp	14, 3, cr7, cr7, cr3, {0}
3400b51a:	ee37 1e09 	cdp	14, 3, cr1, cr7, cr9, {0}
3400b51e:	ee33 4e07 	cdp	14, 3, cr4, cr3, cr7, {0}
3400b522:	460e      	mov	r6, r1
3400b524:	ee33 5e01 	cdp	14, 3, cr5, cr3, cr1, {0}
3400b528:	3110      	adds	r1, #16
3400b52a:	ed86 5e00 	stc	14, cr5, [r6]
3400b52e:	f00f c02b 	le	lr, 3400b4de <st_f32_to_int8+0x3e>
3400b532:	eb00 1085 	add.w	r0, r0, r5, lsl #6
3400b536:	f012 030f 	ands.w	r3, r2, #15
3400b53a:	f000 8159 	beq.w	3400b7f0 <st_f32_to_int8+0x350>
3400b53e:	edd0 5a00 	vldr	s11, [r0]
3400b542:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 3400b820 <st_f32_to_int8+0x380>
3400b546:	ee65 5a86 	vmul.f32	s11, s11, s12
3400b54a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
3400b54e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
3400b552:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
3400b556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b55a:	fe77 7a26 	vselgt.f32	s15, s14, s13
3400b55e:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b566:	ee17 2a90 	vmov	r2, s15
3400b56a:	b212      	sxth	r2, r2
3400b56c:	f302 0207 	ssat	r2, #8, r2
3400b570:	2b01      	cmp	r3, #1
3400b572:	7022      	strb	r2, [r4, #0]
3400b574:	f000 813c 	beq.w	3400b7f0 <st_f32_to_int8+0x350>
3400b578:	edd0 7a01 	vldr	s15, [r0, #4]
3400b57c:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b588:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b58c:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b594:	ee17 2a90 	vmov	r2, s15
3400b598:	b212      	sxth	r2, r2
3400b59a:	f302 0207 	ssat	r2, #8, r2
3400b59e:	2b02      	cmp	r3, #2
3400b5a0:	7062      	strb	r2, [r4, #1]
3400b5a2:	f000 8125 	beq.w	3400b7f0 <st_f32_to_int8+0x350>
3400b5a6:	edd0 7a02 	vldr	s15, [r0, #8]
3400b5aa:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b5ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b5b6:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b5ba:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b5be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b5c2:	ee17 2a90 	vmov	r2, s15
3400b5c6:	b212      	sxth	r2, r2
3400b5c8:	f302 0207 	ssat	r2, #8, r2
3400b5cc:	2b03      	cmp	r3, #3
3400b5ce:	70a2      	strb	r2, [r4, #2]
3400b5d0:	f000 810e 	beq.w	3400b7f0 <st_f32_to_int8+0x350>
3400b5d4:	edd0 7a03 	vldr	s15, [r0, #12]
3400b5d8:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b5dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b5e4:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b5e8:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b5ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b5f0:	ee17 2a90 	vmov	r2, s15
3400b5f4:	b212      	sxth	r2, r2
3400b5f6:	f302 0207 	ssat	r2, #8, r2
3400b5fa:	2b04      	cmp	r3, #4
3400b5fc:	70e2      	strb	r2, [r4, #3]
3400b5fe:	f000 80f7 	beq.w	3400b7f0 <st_f32_to_int8+0x350>
3400b602:	edd0 7a04 	vldr	s15, [r0, #16]
3400b606:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b60a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b612:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b616:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b61a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b61e:	ee17 2a90 	vmov	r2, s15
3400b622:	b212      	sxth	r2, r2
3400b624:	f302 0207 	ssat	r2, #8, r2
3400b628:	2b05      	cmp	r3, #5
3400b62a:	7122      	strb	r2, [r4, #4]
3400b62c:	f000 80e0 	beq.w	3400b7f0 <st_f32_to_int8+0x350>
3400b630:	edd0 7a05 	vldr	s15, [r0, #20]
3400b634:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b640:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b644:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b64c:	ee17 2a90 	vmov	r2, s15
3400b650:	b212      	sxth	r2, r2
3400b652:	f302 0207 	ssat	r2, #8, r2
3400b656:	2b06      	cmp	r3, #6
3400b658:	7162      	strb	r2, [r4, #5]
3400b65a:	f000 80c9 	beq.w	3400b7f0 <st_f32_to_int8+0x350>
3400b65e:	edd0 7a06 	vldr	s15, [r0, #24]
3400b662:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b66e:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b672:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b67a:	ee17 2a90 	vmov	r2, s15
3400b67e:	b212      	sxth	r2, r2
3400b680:	f302 0207 	ssat	r2, #8, r2
3400b684:	2b07      	cmp	r3, #7
3400b686:	71a2      	strb	r2, [r4, #6]
3400b688:	f000 80b2 	beq.w	3400b7f0 <st_f32_to_int8+0x350>
3400b68c:	edd0 7a07 	vldr	s15, [r0, #28]
3400b690:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b694:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b69c:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b6a0:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b6a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b6a8:	ee17 2a90 	vmov	r2, s15
3400b6ac:	b212      	sxth	r2, r2
3400b6ae:	f302 0207 	ssat	r2, #8, r2
3400b6b2:	2b08      	cmp	r3, #8
3400b6b4:	71e2      	strb	r2, [r4, #7]
3400b6b6:	f000 809b 	beq.w	3400b7f0 <st_f32_to_int8+0x350>
3400b6ba:	edd0 7a08 	vldr	s15, [r0, #32]
3400b6be:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b6c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b6ca:	fe37 7a26 	vselgt.f32	s14, s14, s13
3400b6ce:	ee77 7a87 	vadd.f32	s15, s15, s14
3400b6d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b6d6:	ee17 2a90 	vmov	r2, s15
3400b6da:	b212      	sxth	r2, r2
3400b6dc:	f302 0207 	ssat	r2, #8, r2
3400b6e0:	2b09      	cmp	r3, #9
3400b6e2:	7222      	strb	r2, [r4, #8]
3400b6e4:	f000 8084 	beq.w	3400b7f0 <st_f32_to_int8+0x350>
3400b6e8:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
3400b6ec:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b6f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b6f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
3400b6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b6fc:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b700:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b708:	ee17 2a90 	vmov	r2, s15
3400b70c:	b212      	sxth	r2, r2
3400b70e:	f302 0207 	ssat	r2, #8, r2
3400b712:	2b0a      	cmp	r3, #10
3400b714:	7262      	strb	r2, [r4, #9]
3400b716:	d06b      	beq.n	3400b7f0 <st_f32_to_int8+0x350>
3400b718:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
3400b71c:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b728:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b72c:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b734:	ee17 2a90 	vmov	r2, s15
3400b738:	b212      	sxth	r2, r2
3400b73a:	f302 0207 	ssat	r2, #8, r2
3400b73e:	2b0b      	cmp	r3, #11
3400b740:	72a2      	strb	r2, [r4, #10]
3400b742:	d055      	beq.n	3400b7f0 <st_f32_to_int8+0x350>
3400b744:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
3400b748:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b74c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b754:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b758:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b75c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b760:	ee17 2a90 	vmov	r2, s15
3400b764:	b212      	sxth	r2, r2
3400b766:	f302 0207 	ssat	r2, #8, r2
3400b76a:	2b0c      	cmp	r3, #12
3400b76c:	72e2      	strb	r2, [r4, #11]
3400b76e:	d03f      	beq.n	3400b7f0 <st_f32_to_int8+0x350>
3400b770:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
3400b774:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b780:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b784:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b78c:	ee17 2a90 	vmov	r2, s15
3400b790:	b212      	sxth	r2, r2
3400b792:	f302 0207 	ssat	r2, #8, r2
3400b796:	3b0d      	subs	r3, #13
3400b798:	7322      	strb	r2, [r4, #12]
3400b79a:	d029      	beq.n	3400b7f0 <st_f32_to_int8+0x350>
3400b79c:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
3400b7a0:	ee67 7a86 	vmul.f32	s15, s15, s12
3400b7a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b7ac:	fe77 5a26 	vselgt.f32	s11, s14, s13
3400b7b0:	ee77 7aa5 	vadd.f32	s15, s15, s11
3400b7b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b7b8:	ee17 2a90 	vmov	r2, s15
3400b7bc:	b212      	sxth	r2, r2
3400b7be:	f302 0207 	ssat	r2, #8, r2
3400b7c2:	2b01      	cmp	r3, #1
3400b7c4:	7362      	strb	r2, [r4, #13]
3400b7c6:	d013      	beq.n	3400b7f0 <st_f32_to_int8+0x350>
3400b7c8:	edd0 7a0e 	vldr	s15, [r0, #56]	@ 0x38
3400b7cc:	ee27 6a86 	vmul.f32	s12, s15, s12
3400b7d0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
3400b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b7d8:	fe77 7a26 	vselgt.f32	s15, s14, s13
3400b7dc:	ee77 7a86 	vadd.f32	s15, s15, s12
3400b7e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3400b7e4:	ee17 3a90 	vmov	r3, s15
3400b7e8:	b21b      	sxth	r3, r3
3400b7ea:	f303 0307 	ssat	r3, #8, r3
3400b7ee:	73a3      	strb	r3, [r4, #14]
3400b7f0:	ecbd 8b10 	vpop	{d8-d15}
3400b7f4:	bd70      	pop	{r4, r5, r6, pc}
3400b7f6:	460c      	mov	r4, r1
3400b7f8:	e69d      	b.n	3400b536 <st_f32_to_int8+0x96>
3400b7fa:	bf00      	nop
3400b7fc:	f3af 8000 	nop.w
	...
3400b820:	43000000 	.word	0x43000000

3400b824 <st_int16_to_f32>:
3400b824:	ea5f 0c92 	movs.w	ip, r2, lsr #2
3400b828:	b530      	push	{r4, r5, lr}
3400b82a:	d013      	beq.n	3400b854 <st_int16_to_f32+0x30>
3400b82c:	4604      	mov	r4, r0
3400b82e:	460b      	mov	r3, r1
3400b830:	f04c e001 	dls	lr, ip
3400b834:	4625      	mov	r5, r4
3400b836:	ed9d 6f00 	ldc	15, cr6, [sp]
3400b83a:	461d      	mov	r5, r3
3400b83c:	efb1 6e56 	vcvt.f32.s32	q3, q3, #15
3400b840:	3408      	adds	r4, #8
3400b842:	ed85 7f00 	stc	15, cr7, [r5]
3400b846:	3310      	adds	r3, #16
3400b848:	f00f c00d 	le	lr, 3400b834 <st_int16_to_f32+0x10>
3400b84c:	eb01 110c 	add.w	r1, r1, ip, lsl #4
3400b850:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
3400b854:	f012 0203 	ands.w	r2, r2, #3
3400b858:	d023      	beq.n	3400b8a2 <st_int16_to_f32+0x7e>
3400b85a:	f9b0 3000 	ldrsh.w	r3, [r0]
3400b85e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 3400b8a4 <st_int16_to_f32+0x80>
3400b862:	ee07 3a90 	vmov	s15, r3
3400b866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400b86a:	ee67 7a87 	vmul.f32	s15, s15, s14
3400b86e:	3a01      	subs	r2, #1
3400b870:	edc1 7a00 	vstr	s15, [r1]
3400b874:	d015      	beq.n	3400b8a2 <st_int16_to_f32+0x7e>
3400b876:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
3400b87a:	2a01      	cmp	r2, #1
3400b87c:	ee07 3a90 	vmov	s15, r3
3400b880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400b884:	ee67 7a87 	vmul.f32	s15, s15, s14
3400b888:	edc1 7a01 	vstr	s15, [r1, #4]
3400b88c:	d009      	beq.n	3400b8a2 <st_int16_to_f32+0x7e>
3400b88e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
3400b892:	ee07 3a90 	vmov	s15, r3
3400b896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400b89a:	ee67 7a87 	vmul.f32	s15, s15, s14
3400b89e:	edc1 7a02 	vstr	s15, [r1, #8]
3400b8a2:	bd30      	pop	{r4, r5, pc}
3400b8a4:	38000000 	.word	0x38000000

3400b8a8 <st_int8_to_f32>:
3400b8a8:	ea5f 0c92 	movs.w	ip, r2, lsr #2
3400b8ac:	b530      	push	{r4, r5, lr}
3400b8ae:	d042      	beq.n	3400b936 <st_int8_to_f32+0x8e>
3400b8b0:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
3400b8b4:	f1ae 0e04 	sub.w	lr, lr, #4
3400b8b8:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
3400b8bc:	f10e 0e01 	add.w	lr, lr, #1
3400b8c0:	f04e e001 	dls	lr, lr
3400b8c4:	460b      	mov	r3, r1
3400b8c6:	eb00 048c 	add.w	r4, r0, ip, lsl #2
3400b8ca:	4605      	mov	r5, r0
3400b8cc:	ed95 6f00 	ldc	15, cr6, [r5]
3400b8d0:	461d      	mov	r5, r3
3400b8d2:	efb9 6e56 	vcvt.f32.s32	q3, q3, #7
3400b8d6:	3004      	adds	r0, #4
3400b8d8:	ed85 7f00 	stc	15, cr7, [r5]
3400b8dc:	3310      	adds	r3, #16
3400b8de:	f00f c00d 	le	lr, 3400b8ca <st_int8_to_f32+0x22>
3400b8e2:	eb01 110c 	add.w	r1, r1, ip, lsl #4
3400b8e6:	f012 0203 	ands.w	r2, r2, #3
3400b8ea:	d023      	beq.n	3400b934 <st_int8_to_f32+0x8c>
3400b8ec:	f994 3000 	ldrsb.w	r3, [r4]
3400b8f0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 3400b93c <st_int8_to_f32+0x94>
3400b8f4:	ee07 3a90 	vmov	s15, r3
3400b8f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400b8fc:	ee67 7a87 	vmul.f32	s15, s15, s14
3400b900:	3a01      	subs	r2, #1
3400b902:	edc1 7a00 	vstr	s15, [r1]
3400b906:	d015      	beq.n	3400b934 <st_int8_to_f32+0x8c>
3400b908:	f994 3001 	ldrsb.w	r3, [r4, #1]
3400b90c:	2a01      	cmp	r2, #1
3400b90e:	ee07 3a90 	vmov	s15, r3
3400b912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400b916:	ee67 7a87 	vmul.f32	s15, s15, s14
3400b91a:	edc1 7a01 	vstr	s15, [r1, #4]
3400b91e:	d009      	beq.n	3400b934 <st_int8_to_f32+0x8c>
3400b920:	f994 3002 	ldrsb.w	r3, [r4, #2]
3400b924:	ee07 3a90 	vmov	s15, r3
3400b928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400b92c:	ee67 7a87 	vmul.f32	s15, s15, s14
3400b930:	edc1 7a02 	vstr	s15, [r1, #8]
3400b934:	bd30      	pop	{r4, r5, pc}
3400b936:	4604      	mov	r4, r0
3400b938:	e7d5      	b.n	3400b8e6 <st_int8_to_f32+0x3e>
3400b93a:	bf00      	nop
3400b93c:	3c000000 	.word	0x3c000000

3400b940 <_lite_kernel_nl_softmax_is8os8>:
3400b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400b944:	ed2d 8b10 	vpush	{d8-d15}
3400b948:	b0e7      	sub	sp, #412	@ 0x19c
3400b94a:	9e83      	ldr	r6, [sp, #524]	@ 0x20c
3400b94c:	f8dd c210 	ldr.w	ip, [sp, #528]	@ 0x210
3400b950:	f516 7f80 	cmn.w	r6, #256	@ 0x100
3400b954:	902a      	str	r0, [sp, #168]	@ 0xa8
3400b956:	9121      	str	r1, [sp, #132]	@ 0x84
3400b958:	9235      	str	r2, [sp, #212]	@ 0xd4
3400b95a:	932b      	str	r3, [sp, #172]	@ 0xac
3400b95c:	e9dd 5481 	ldrd	r5, r4, [sp, #516]	@ 0x204
3400b960:	f280 868a 	bge.w	3400c678 <_lite_kernel_nl_softmax_is8os8+0xd38>
3400b964:	fb03 f302 	mul.w	r3, r3, r2
3400b968:	2b01      	cmp	r3, #1
3400b96a:	f240 8405 	bls.w	3400c178 <_lite_kernel_nl_softmax_is8os8+0x838>
3400b96e:	f44f 7880 	mov.w	r8, #256	@ 0x100
3400b972:	2301      	movs	r3, #1
3400b974:	46c1      	mov	r9, r8
3400b976:	40a3      	lsls	r3, r4
3400b978:	933a      	str	r3, [sp, #232]	@ 0xe8
3400b97a:	eea6 5b10 	vdup.32	q3, r5
3400b97e:	ab36      	add	r3, sp, #216	@ 0xd8
3400b980:	ed83 7f00 	stc	15, cr7, [r3]
3400b984:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
3400b988:	eea6 3b10 	vdup.32	q3, r3
3400b98c:	ab42      	add	r3, sp, #264	@ 0x108
3400b98e:	ed83 7f00 	stc	15, cr7, [r3]
3400b992:	4b1c      	ldr	r3, [pc, #112]	@ (3400ba04 <_lite_kernel_nl_softmax_is8os8+0xc4>)
3400b994:	4d1c      	ldr	r5, [pc, #112]	@ (3400ba08 <_lite_kernel_nl_softmax_is8os8+0xc8>)
3400b996:	eea6 3b10 	vdup.32	q3, r3
3400b99a:	ab46      	add	r3, sp, #280	@ 0x118
3400b99c:	ed83 7f00 	stc	15, cr7, [r3]
3400b9a0:	4b1a      	ldr	r3, [pc, #104]	@ (3400ba0c <_lite_kernel_nl_softmax_is8os8+0xcc>)
3400b9a2:	4c1b      	ldr	r4, [pc, #108]	@ (3400ba10 <_lite_kernel_nl_softmax_is8os8+0xd0>)
3400b9a4:	eea6 3b10 	vdup.32	q3, r3
3400b9a8:	ab4a      	add	r3, sp, #296	@ 0x128
3400b9aa:	ed83 7f00 	stc	15, cr7, [r3]
3400b9ae:	eea6 5b10 	vdup.32	q3, r5
3400b9b2:	ad4e      	add	r5, sp, #312	@ 0x138
3400b9b4:	ed85 7f00 	stc	15, cr7, [r5]
3400b9b8:	eea6 4b10 	vdup.32	q3, r4
3400b9bc:	4f15      	ldr	r7, [pc, #84]	@ (3400ba14 <_lite_kernel_nl_softmax_is8os8+0xd4>)
3400b9be:	ac52      	add	r4, sp, #328	@ 0x148
3400b9c0:	ed84 7f00 	stc	15, cr7, [r4]
3400b9c4:	eea6 7b10 	vdup.32	q3, r7
3400b9c8:	4e13      	ldr	r6, [pc, #76]	@ (3400ba18 <_lite_kernel_nl_softmax_is8os8+0xd8>)
3400b9ca:	ac56      	add	r4, sp, #344	@ 0x158
3400b9cc:	ed84 7f00 	stc	15, cr7, [r4]
3400b9d0:	eea6 6b10 	vdup.32	q3, r6
3400b9d4:	4a11      	ldr	r2, [pc, #68]	@ (3400ba1c <_lite_kernel_nl_softmax_is8os8+0xdc>)
3400b9d6:	ac5a      	add	r4, sp, #360	@ 0x168
3400b9d8:	ed84 7f00 	stc	15, cr7, [r4]
3400b9dc:	eea6 2b10 	vdup.32	q3, r2
3400b9e0:	4b0f      	ldr	r3, [pc, #60]	@ (3400ba20 <_lite_kernel_nl_softmax_is8os8+0xe0>)
3400b9e2:	aa5e      	add	r2, sp, #376	@ 0x178
3400b9e4:	ed82 7f00 	stc	15, cr7, [r2]
3400b9e8:	eea6 3b10 	vdup.32	q3, r3
3400b9ec:	ab62      	add	r3, sp, #392	@ 0x188
3400b9ee:	f8cd 80f8 	str.w	r8, [sp, #248]	@ 0xf8
3400b9f2:	2000      	movs	r0, #0
3400b9f4:	ed83 7f00 	stc	15, cr7, [r3]
3400b9f8:	46c8      	mov	r8, r9
3400b9fa:	f8cd c010 	str.w	ip, [sp, #16]
3400b9fe:	f8cd c210 	str.w	ip, [sp, #528]	@ 0x210
3400ba02:	e00f      	b.n	3400ba24 <_lite_kernel_nl_softmax_is8os8+0xe4>
3400ba04:	2aaaaaab 	.word	0x2aaaaaab
3400ba08:	63afbe7b 	.word	0x63afbe7b
3400ba0c:	70f5a894 	.word	0x70f5a894
3400ba10:	4da2cbf2 	.word	0x4da2cbf2
3400ba14:	2f16ac6c 	.word	0x2f16ac6c
3400ba18:	1152aaa4 	.word	0x1152aaa4
3400ba1c:	02582ab7 	.word	0x02582ab7
3400ba20:	000afe11 	.word	0x000afe11
3400ba24:	eba8 0300 	sub.w	r3, r8, r0
3400ba28:	f023 e801 	bfcsel	0, 3400aa2e <ll_sw_forward_softmax_integer+0x10e>, 4, hi
3400ba2c:	ee21 4f6e 	cdp	15, 2, cr4, cr1, cr14, {3}
3400ba30:	993e      	ldr	r1, [sp, #248]	@ 0xf8
3400ba32:	eefd 3a10 	vmrs	r3, <impl def 0xd>
3400ba36:	fe25 1fe1 	cdp2	15, 2, cr1, cr5, cr1, {7}
3400ba3a:	eefd 1a10 	vmrs	r1, <impl def 0xd>
3400ba3e:	f8ad 10d0 	strh.w	r1, [sp, #208]	@ 0xd0
3400ba42:	993a      	ldr	r1, [sp, #232]	@ 0xe8
3400ba44:	f06f 0a01 	mvn.w	sl, #1
3400ba48:	ee25 5e61 	cdp	14, 2, cr5, cr5, cr1, {3}
3400ba4c:	a936      	add	r1, sp, #216	@ 0xd8
3400ba4e:	ed91 7f00 	ldc	15, cr7, [r1]
3400ba52:	ffb9 43c4 	vneg.s32	q2, q2
3400ba56:	25f2      	movs	r5, #242	@ 0xf2
3400ba58:	ff24 4b46 	vqrdmulh.s32	q2, q2, q3
3400ba5c:	eea6 ab10 	vdup.32	q3, sl
3400ba60:	46ea      	mov	sl, sp
3400ba62:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
3400ba66:	ed8a 7f00 	stc	15, cr7, [sl]
3400ba6a:	eea6 5b10 	vdup.32	q3, r5
3400ba6e:	ad26      	add	r5, sp, #152	@ 0x98
3400ba70:	ed85 7f00 	stc	15, cr7, [r5]
3400ba74:	eea6 4b10 	vdup.32	q3, r4
3400ba78:	ac08      	add	r4, sp, #32
3400ba7a:	ed84 7f00 	stc	15, cr7, [r4]
3400ba7e:	ac42      	add	r4, sp, #264	@ 0x108
3400ba80:	ed94 7f00 	ldc	15, cr7, [r4]
3400ba84:	f04f 7b80 	mov.w	fp, #16777216	@ 0x1000000
3400ba88:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
3400ba8c:	eea2 bb10 	vdup.32	q1, fp
3400ba90:	ef04 6156 	vand	q3, q2, q3
3400ba94:	eea0 9b10 	vdup.32	q0, r9
3400ba98:	ff26 6842 	vsub.i32	q3, q3, q1
3400ba9c:	f8ad 30b0 	strh.w	r3, [sp, #176]	@ 0xb0
3400baa0:	2300      	movs	r3, #0
3400baa2:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
3400baa6:	fe25 0f43 	cdp2	15, 2, cr0, cr5, cr3, {2}
3400baaa:	ed89 1f00 	stc	15, cr1, [r9]
3400baae:	ff26 4844 	vsub.i32	q2, q3, q2
3400bab2:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
3400bab6:	ef04 2152 	vand	q1, q2, q1
3400baba:	f04f 6e80 	mov.w	lr, #67108864	@ 0x4000000
3400babe:	eeae 9b10 	vdup.32	q7, r9
3400bac2:	eefd 1a10 	vmrs	r1, <impl def 0xd>
3400bac6:	ef04 e15e 	vand	q7, q2, q7
3400baca:	fe23 0fc3 	cdp2	15, 2, cr0, cr3, cr3, {6}
3400bace:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
3400bad2:	eeac eb10 	vdup.32	q6, lr
3400bad6:	f04f 5700 	mov.w	r7, #536870912	@ 0x20000000
3400bada:	ef04 c15c 	vand	q6, q2, q6
3400bade:	eeaa cb10 	vdup.32	q5, ip
3400bae2:	eefd ea10 	vmrs	lr, <impl def 0xd>
3400bae6:	fe2f 0fc3 	cdp2	15, 2, cr0, cr15, cr3, {6}
3400baea:	ef04 a15a 	vand	q5, q2, q5
3400baee:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
3400baf2:	eea8 7b10 	vdup.32	q4, r7
3400baf6:	eefd ca10 	vmrs	ip, <impl def 0xd>
3400bafa:	fe2d 0fc3 	cdp2	15, 2, cr0, cr13, cr3, {6}
3400bafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3400bb02:	ef04 8158 	vand	q4, q2, q4
3400bb06:	eea0 6b10 	vdup.32	q0, r6
3400bb0a:	eefd 7a10 	vmrs	r7, <impl def 0xd>
3400bb0e:	fe2b 0fc3 	cdp2	15, 2, cr0, cr11, cr3, {6}
3400bb12:	ef04 0150 	vand	q0, q2, q0
3400bb16:	eea2 2b10 	vdup.32	q1, r2
3400bb1a:	eefd 6a10 	vmrs	r6, <impl def 0xd>
3400bb1e:	fe29 0fc3 	cdp2	15, 2, cr0, cr9, cr3, {6}
3400bb22:	ef04 4152 	vand	q2, q2, q1
3400bb26:	eefd 5a10 	vmrs	r5, <impl def 0xd>
3400bb2a:	fe21 0fc3 	cdp2	15, 2, cr0, cr1, cr3, {6}
3400bb2e:	efa5 6556 	vshl.s32	q3, q3, #5
3400bb32:	eefd 4a10 	vmrs	r4, <impl def 0xd>
3400bb36:	fe25 0fc3 	cdp2	15, 2, cr0, cr5, cr3, {6}
3400bb3a:	eea4 3b10 	vdup.32	q2, r3
3400bb3e:	ee27 6f42 	cdp	15, 2, cr6, cr7, cr2, {2}
3400bb42:	ef24 2154 	vorr	q1, q2, q2
3400bb46:	eefd 2a10 	vmrs	r2, <impl def 0xd>
3400bb4a:	eeed ea10 	vmsr	<impl def 0xd>, lr
3400bb4e:	ef24 e154 	vorr	q7, q2, q2
3400bb52:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400bb56:	ffb0 25c4 	vmvn	q1, q2
3400bb5a:	eeed ca10 	vmsr	<impl def 0xd>, ip
3400bb5e:	ef22 0152 	vorr	q0, q1, q1
3400bb62:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400bb66:	ffb0 e5c4 	vmvn	q7, q2
3400bb6a:	ef24 2154 	vorr	q1, q2, q2
3400bb6e:	eeed 7a10 	vmsr	<impl def 0xd>, r7
3400bb72:	ef24 a154 	vorr	q5, q2, q2
3400bb76:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400bb7a:	ffb0 25c4 	vmvn	q1, q2
3400bb7e:	eeed 6a10 	vmsr	<impl def 0xd>, r6
3400bb82:	ef24 c154 	vorr	q6, q2, q2
3400bb86:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400bb8a:	ffb0 a5c4 	vmvn	q5, q2
3400bb8e:	eeed 2a10 	vmsr	<impl def 0xd>, r2
3400bb92:	ab10      	add	r3, sp, #64	@ 0x40
3400bb94:	ed83 3f00 	stc	15, cr3, [r3]
3400bb98:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400bb9c:	ffb0 c5c4 	vmvn	q6, q2
3400bba0:	ef24 2154 	vorr	q1, q2, q2
3400bba4:	eeed 5a10 	vmsr	<impl def 0xd>, r5
3400bba8:	ab14      	add	r3, sp, #80	@ 0x50
3400bbaa:	ed83 bf00 	stc	15, cr11, [r3]
3400bbae:	ab18      	add	r3, sp, #96	@ 0x60
3400bbb0:	ed83 df00 	stc	15, cr13, [r3]
3400bbb4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400bbb8:	ffb0 25c4 	vmvn	q1, q2
3400bbbc:	ef24 c154 	vorr	q6, q2, q2
3400bbc0:	eeed 4a10 	vmsr	<impl def 0xd>, r4
3400bbc4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400bbc8:	ffb0 c5c4 	vmvn	q6, q2
3400bbcc:	ab1c      	add	r3, sp, #112	@ 0x70
3400bbce:	ed83 3f00 	stc	15, cr3, [r3]
3400bbd2:	ab22      	add	r3, sp, #136	@ 0x88
3400bbd4:	ed83 df00 	stc	15, cr13, [r3]
3400bbd8:	eeed 1a10 	vmsr	<impl def 0xd>, r1
3400bbdc:	ef24 c154 	vorr	q6, q2, q2
3400bbe0:	ab08      	add	r3, sp, #32
3400bbe2:	ed93 3f00 	ldc	15, cr3, [r3]
3400bbe6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400bbea:	ffb0 c5c4 	vmvn	q6, q2
3400bbee:	ff26 8b46 	vqrdmulh.s32	q4, q3, q3
3400bbf2:	ef0c 2152 	vand	q1, q6, q1
3400bbf6:	ff28 ab46 	vqrdmulh.s32	q5, q4, q3
3400bbfa:	ab30      	add	r3, sp, #192	@ 0xc0
3400bbfc:	ed83 3f00 	stc	15, cr3, [r3]
3400bc00:	ab08      	add	r3, sp, #32
3400bc02:	ed83 bf00 	stc	15, cr11, [r3]
3400bc06:	ff28 2b48 	vqrdmulh.s32	q1, q4, q4
3400bc0a:	ed9a bf00 	ldc	15, cr11, [sl]
3400bc0e:	ef02 a15a 	vand	q5, q1, q5
3400bc12:	efa1 a05a 	vshr.s32	q5, q5, #31
3400bc16:	ef22 205a 	vqadd.s32	q1, q1, q5
3400bc1a:	ed9a bf00 	ldc	15, cr11, [sl]
3400bc1e:	ab08      	add	r3, sp, #32
3400bc20:	ef2a 2542 	vrshl.s32	q1, q1, q5
3400bc24:	ed93 bf00 	ldc	15, cr11, [r3]
3400bc28:	ab46      	add	r3, sp, #280	@ 0x118
3400bc2a:	ef22 284a 	vadd.i32	q1, q1, q5
3400bc2e:	ed93 bf00 	ldc	15, cr11, [r3]
3400bc32:	ff22 2b4a 	vqrdmulh.s32	q1, q1, q5
3400bc36:	ab0c      	add	r3, sp, #48	@ 0x30
3400bc38:	ed93 bf00 	ldc	15, cr11, [r3]
3400bc3c:	ef28 2842 	vadd.i32	q1, q4, q1
3400bc40:	ef02 815a 	vand	q4, q1, q5
3400bc44:	efa1 8058 	vshr.s32	q4, q4, #31
3400bc48:	ef22 2058 	vqadd.s32	q1, q1, q4
3400bc4c:	ef2a 2542 	vrshl.s32	q1, q1, q5
3400bc50:	ab4a      	add	r3, sp, #296	@ 0x128
3400bc52:	ed93 9f00 	ldc	15, cr9, [r3]
3400bc56:	ef26 6842 	vadd.i32	q3, q3, q1
3400bc5a:	ff28 6b46 	vqrdmulh.s32	q3, q4, q3
3400bc5e:	ab4e      	add	r3, sp, #312	@ 0x138
3400bc60:	ef28 6846 	vadd.i32	q3, q4, q3
3400bc64:	ed93 9f00 	ldc	15, cr9, [r3]
3400bc68:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400bc6c:	ef16 6150 	vbic	q3, q3, q0
3400bc70:	ef00 0152 	vand	q0, q0, q1
3400bc74:	ab52      	add	r3, sp, #328	@ 0x148
3400bc76:	ed93 9f00 	ldc	15, cr9, [r3]
3400bc7a:	ff00 6156 	veor	q3, q0, q3
3400bc7e:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400bc82:	ef16 615e 	vbic	q3, q3, q7
3400bc86:	ef0e e152 	vand	q7, q7, q1
3400bc8a:	ab56      	add	r3, sp, #344	@ 0x158
3400bc8c:	ed93 9f00 	ldc	15, cr9, [r3]
3400bc90:	ff0e 6156 	veor	q3, q7, q3
3400bc94:	ab10      	add	r3, sp, #64	@ 0x40
3400bc96:	ed93 1f00 	ldc	15, cr1, [r3]
3400bc9a:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400bc9e:	ef16 6150 	vbic	q3, q3, q0
3400bca2:	ef00 2152 	vand	q1, q0, q1
3400bca6:	ab5a      	add	r3, sp, #360	@ 0x168
3400bca8:	ed93 9f00 	ldc	15, cr9, [r3]
3400bcac:	ff02 6156 	veor	q3, q1, q3
3400bcb0:	ab14      	add	r3, sp, #80	@ 0x50
3400bcb2:	ed93 bf00 	ldc	15, cr11, [r3]
3400bcb6:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400bcba:	ef16 615a 	vbic	q3, q3, q5
3400bcbe:	ef0a 2152 	vand	q1, q5, q1
3400bcc2:	ab5e      	add	r3, sp, #376	@ 0x178
3400bcc4:	ed93 9f00 	ldc	15, cr9, [r3]
3400bcc8:	ff02 6156 	veor	q3, q1, q3
3400bccc:	ab18      	add	r3, sp, #96	@ 0x60
3400bcce:	ed93 1f00 	ldc	15, cr1, [r3]
3400bcd2:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400bcd6:	ef16 6150 	vbic	q3, q3, q0
3400bcda:	ef00 2152 	vand	q1, q0, q1
3400bcde:	ab62      	add	r3, sp, #392	@ 0x188
3400bce0:	ed93 9f00 	ldc	15, cr9, [r3]
3400bce4:	ff02 6156 	veor	q3, q1, q3
3400bce8:	ab1c      	add	r3, sp, #112	@ 0x70
3400bcea:	ed93 1f00 	ldc	15, cr1, [r3]
3400bcee:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400bcf2:	ef16 6150 	vbic	q3, q3, q0
3400bcf6:	ef00 2152 	vand	q1, q0, q1
3400bcfa:	ab26      	add	r3, sp, #152	@ 0x98
3400bcfc:	ff02 2156 	veor	q1, q1, q3
3400bd00:	ed93 7f00 	ldc	15, cr7, [r3]
3400bd04:	ab22      	add	r3, sp, #136	@ 0x88
3400bd06:	ed93 1f00 	ldc	15, cr1, [r3]
3400bd0a:	ff22 6b46 	vqrdmulh.s32	q3, q1, q3
3400bd0e:	ef12 2150 	vbic	q1, q1, q0
3400bd12:	ef00 6156 	vand	q3, q0, q3
3400bd16:	ff06 6152 	veor	q3, q3, q1
3400bd1a:	ab30      	add	r3, sp, #192	@ 0xc0
3400bd1c:	ed93 3f00 	ldc	15, cr3, [r3]
3400bd20:	ef16 615c 	vbic	q3, q3, q6
3400bd24:	f8bd 10d0 	ldrh.w	r1, [sp, #208]	@ 0xd0
3400bd28:	ff02 6156 	veor	q3, q1, q3
3400bd2c:	eeed 1a10 	vmsr	<impl def 0xd>, r1
3400bd30:	9b04      	ldr	r3, [sp, #16]
3400bd32:	fe37 6f05 	cdp2	15, 3, cr6, cr7, cr5, {0}
3400bd36:	4619      	mov	r1, r3
3400bd38:	3310      	adds	r3, #16
3400bd3a:	9304      	str	r3, [sp, #16]
3400bd3c:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	@ 0xb0
3400bd40:	4580      	cmp	r8, r0
3400bd42:	eeed 3a10 	vmsr	<impl def 0xd>, r3
3400bd46:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400bd4a:	ed81 7f00 	stc	15, cr7, [r1]
3400bd4e:	f63f ae69 	bhi.w	3400ba24 <_lite_kernel_nl_softmax_is8os8+0xe4>
3400bd52:	f8dd 80f8 	ldr.w	r8, [sp, #248]	@ 0xf8
3400bd56:	f8dd c210 	ldr.w	ip, [sp, #528]	@ 0x210
3400bd5a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
3400bd5c:	2b00      	cmp	r3, #0
3400bd5e:	f000 8201 	beq.w	3400c164 <_lite_kernel_nl_softmax_is8os8+0x824>
3400bd62:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
3400bd64:	9980      	ldr	r1, [sp, #512]	@ 0x200
3400bd66:	b293      	uxth	r3, r2
3400bd68:	fb01 f102 	mul.w	r1, r1, r2
3400bd6c:	00dc      	lsls	r4, r3, #3
3400bd6e:	9126      	str	r1, [sp, #152]	@ 0x98
3400bd70:	009d      	lsls	r5, r3, #2
3400bd72:	2a00      	cmp	r2, #0
3400bd74:	f000 81f6 	beq.w	3400c164 <_lite_kernel_nl_softmax_is8os8+0x824>
3400bd78:	2100      	movs	r1, #0
3400bd7a:	eea2 3b10 	vdup.32	q1, r3
3400bd7e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
3400bd80:	9a80      	ldr	r2, [sp, #512]	@ 0x200
3400bd82:	eea6 3b30 	vdup.16	q3, r3
3400bd86:	9b80      	ldr	r3, [sp, #512]	@ 0x200
3400bd88:	3a08      	subs	r2, #8
3400bd8a:	3b01      	subs	r3, #1
3400bd8c:	9310      	str	r3, [sp, #64]	@ 0x40
3400bd8e:	f023 0307 	bic.w	r3, r3, #7
3400bd92:	1ad3      	subs	r3, r2, r3
3400bd94:	460a      	mov	r2, r1
3400bd96:	ee13 0f6e 	cdp	15, 1, cr0, cr3, cr14, {3}
3400bd9a:	460a      	mov	r2, r1
3400bd9c:	ef10 6956 	vmul.i16	q3, q0, q3
3400bda0:	ee23 4f6e 	cdp	15, 2, cr4, cr3, cr14, {3}
3400bda4:	931c      	str	r3, [sp, #112]	@ 0x70
3400bda6:	ab18      	add	r3, sp, #96	@ 0x60
3400bda8:	ed83 7e80 	stc	14, cr7, [r3, #512]	@ 0x200
3400bdac:	ef22 2954 	vmul.i32	q1, q1, q2
3400bdb0:	46a3      	mov	fp, r4
3400bdb2:	46c2      	mov	sl, r8
3400bdb4:	9122      	str	r1, [sp, #136]	@ 0x88
3400bdb6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
3400bdb8:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
3400bdba:	9308      	str	r3, [sp, #32]
3400bdbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
3400bdbe:	9304      	str	r3, [sp, #16]
3400bdc0:	4413      	add	r3, r2
3400bdc2:	9314      	str	r3, [sp, #80]	@ 0x50
3400bdc4:	9b80      	ldr	r3, [sp, #512]	@ 0x200
3400bdc6:	2b00      	cmp	r3, #0
3400bdc8:	f340 843f 	ble.w	3400c64a <_lite_kernel_nl_softmax_is8os8+0xd0a>
3400bdcc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
3400bdce:	4619      	mov	r1, r3
3400bdd0:	eba3 0e02 	sub.w	lr, r3, r2
3400bdd4:	f1ae 0e08 	sub.w	lr, lr, #8
3400bdd8:	ea4f 0ede 	mov.w	lr, lr, lsr #3
3400bddc:	f10e 0e01 	add.w	lr, lr, #1
3400bde0:	ab18      	add	r3, sp, #96	@ 0x60
3400bde2:	f04e e001 	dls	lr, lr
3400bde6:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
3400bdea:	ed93 5e80 	ldc	14, cr5, [r3, #512]	@ 0x200
3400bdee:	9804      	ldr	r0, [sp, #16]
3400bdf0:	f011 e801 	bfcsel	0, 3400adf6 <node_convert+0x272>, 2, mi
3400bdf4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400bdf8:	ec90 6e84 	ldc	14, cr6, [r0], {132}	@ 0x84
3400bdfc:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400be00:	eee6 2f06 	cdp	15, 14, cr2, cr6, cr6, {0}
3400be04:	3908      	subs	r1, #8
3400be06:	4458      	add	r0, fp
3400be08:	b252      	sxtb	r2, r2
3400be0a:	f00f c80f 	le	lr, 3400bdf0 <_lite_kernel_nl_softmax_is8os8+0x4b0>
3400be0e:	f06f 030b 	mvn.w	r3, #11
3400be12:	eea4 3b10 	vdup.32	q2, r3
3400be16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
3400be18:	eea0 2b10 	vdup.32	q0, r2
3400be1c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
3400be20:	f10e 0e01 	add.w	lr, lr, #1
3400be24:	f04e e001 	dls	lr, lr
3400be28:	2200      	movs	r2, #0
3400be2a:	9804      	ldr	r0, [sp, #16]
3400be2c:	9980      	ldr	r1, [sp, #512]	@ 0x200
3400be2e:	f021 e801 	bfcsel	0, 3400ae34 <forward_sm_integer+0x4>, 2, hi
3400be32:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400be36:	ec90 6f02 	ldc	15, cr6, [r0], {2}
3400be3a:	ff20 6846 	vsub.i32	q3, q0, q3
3400be3e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400be42:	fe27 1fca 	cdp2	15, 2, cr1, cr7, cr10, {6}
3400be46:	efa2 8556 	vshl.s32	q4, q3, #2
3400be4a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400be4e:	fc9c 6f48 	ldc2	15, cr6, [ip], {72}	@ 0x48
3400be52:	ef06 8154 	vand	q4, q3, q2
3400be56:	efa1 8058 	vshr.s32	q4, q4, #31
3400be5a:	ef26 6058 	vqadd.s32	q3, q3, q4
3400be5e:	ef24 6546 	vrshl.s32	q3, q3, q2
3400be62:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400be66:	eef9 4f06 	cdp	15, 15, cr4, cr9, cr6, {0}
3400be6a:	3904      	subs	r1, #4
3400be6c:	4428      	add	r0, r5
3400be6e:	4422      	add	r2, r4
3400be70:	f00f c823 	le	lr, 3400be2e <_lite_kernel_nl_softmax_is8os8+0x4ee>
3400be74:	2a00      	cmp	r2, #0
3400be76:	f000 83ec 	beq.w	3400c652 <_lite_kernel_nl_softmax_is8os8+0xd12>
3400be7a:	fab2 f382 	clz	r3, r2
3400be7e:	930c      	str	r3, [sp, #48]	@ 0x30
3400be80:	f340 83e9 	ble.w	3400c656 <_lite_kernel_nl_softmax_is8os8+0xd16>
3400be84:	409a      	lsls	r2, r3
3400be86:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
3400be8a:	f112 4300 	adds.w	r3, r2, #2147483648	@ 0x80000000
3400be8e:	ea4f 72e2 	mov.w	r2, r2, asr #31
3400be92:	9300      	str	r3, [sp, #0]
3400be94:	f142 0300 	adc.w	r3, r2, #0
3400be98:	9301      	str	r3, [sp, #4]
3400be9a:	e9dd 0100 	ldrd	r0, r1, [sp]
3400be9e:	ea50 016f 	orrs.w	r1, r0, pc, asr #1
3400bea2:	4eb3      	ldr	r6, [pc, #716]	@ (3400c170 <_lite_kernel_nl_softmax_is8os8+0x830>)
3400bea4:	4243      	negs	r3, r0
3400bea6:	fb06 3301 	mla	r3, r6, r1, r3
3400beaa:	fba0 7606 	umull	r7, r6, r0, r6
3400beae:	441e      	add	r6, r3
3400beb0:	4bb0      	ldr	r3, [pc, #704]	@ (3400c174 <_lite_kernel_nl_softmax_is8os8+0x834>)
3400beb2:	4604      	mov	r4, r0
3400beb4:	18ff      	adds	r7, r7, r3
3400beb6:	f166 0600 	sbc.w	r6, r6, #0
3400beba:	2e00      	cmp	r6, #0
3400bebc:	e9cd 0100 	strd	r0, r1, [sp]
3400bec0:	da05      	bge.n	3400bece <_lite_kernel_nl_softmax_is8os8+0x58e>
3400bec2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400bec6:	18fb      	adds	r3, r7, r3
3400bec8:	461f      	mov	r7, r3
3400beca:	f146 0600 	adc.w	r6, r6, #0
3400bece:	463a      	mov	r2, r7
3400bed0:	4633      	mov	r3, r6
3400bed2:	e9dd 6700 	ldrd	r6, r7, [sp]
3400bed6:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
3400beda:	f102 325a 	add.w	r2, r2, #1515870810	@ 0x5a5a5a5a
3400bede:	17d3      	asrs	r3, r2, #31
3400bee0:	fb03 f906 	mul.w	r9, r3, r6
3400bee4:	fba6 8602 	umull	r8, r6, r6, r2
3400bee8:	fb02 9907 	mla	r9, r2, r7, r9
3400beec:	f118 4880 	adds.w	r8, r8, #1073741824	@ 0x40000000
3400bef0:	eb49 0906 	adc.w	r9, r9, r6
3400bef4:	f1b9 0f00 	cmp.w	r9, #0
3400bef8:	4696      	mov	lr, r2
3400befa:	da06      	bge.n	3400bf0a <_lite_kernel_nl_softmax_is8os8+0x5ca>
3400befc:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
3400bf00:	eb18 0606 	adds.w	r6, r8, r6
3400bf04:	46b0      	mov	r8, r6
3400bf06:	f149 0900 	adc.w	r9, r9, #0
3400bf0a:	4646      	mov	r6, r8
3400bf0c:	464f      	mov	r7, r9
3400bf0e:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400bf12:	f1c6 5600 	rsb	r6, r6, #536870912	@ 0x20000000
3400bf16:	ea86 0702 	eor.w	r7, r6, r2
3400bf1a:	0fff      	lsrs	r7, r7, #31
3400bf1c:	4995      	ldr	r1, [pc, #596]	@ (3400c174 <_lite_kernel_nl_softmax_is8os8+0x834>)
3400bf1e:	2f00      	cmp	r7, #0
3400bf20:	bf0b      	itete	eq
3400bf22:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
3400bf26:	460f      	movne	r7, r1
3400bf28:	f04f 0800 	moveq.w	r8, #0
3400bf2c:	f04f 38ff 	movne.w	r8, #4294967295	@ 0xffffffff
3400bf30:	fb06 f303 	mul.w	r3, r6, r3
3400bf34:	ea4f 79e6 	mov.w	r9, r6, asr #31
3400bf38:	fb0e 3309 	mla	r3, lr, r9, r3
3400bf3c:	fba6 6e0e 	umull	r6, lr, r6, lr
3400bf40:	19f6      	adds	r6, r6, r7
3400bf42:	4473      	add	r3, lr
3400bf44:	eb43 0308 	adc.w	r3, r3, r8
3400bf48:	2b00      	cmp	r3, #0
3400bf4a:	da05      	bge.n	3400bf58 <_lite_kernel_nl_softmax_is8os8+0x618>
3400bf4c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
3400bf50:	19f7      	adds	r7, r6, r7
3400bf52:	463e      	mov	r6, r7
3400bf54:	f143 0300 	adc.w	r3, r3, #0
3400bf58:	46b0      	mov	r8, r6
3400bf5a:	e9dd 0100 	ldrd	r0, r1, [sp]
3400bf5e:	4699      	mov	r9, r3
3400bf60:	ea58 79ef 	orrs.w	r9, r8, pc, asr #31
3400bf64:	eb02 0288 	add.w	r2, r2, r8, lsl #2
3400bf68:	ea82 0304 	eor.w	r3, r2, r4
3400bf6c:	0fdb      	lsrs	r3, r3, #31
3400bf6e:	2b00      	cmp	r3, #0
3400bf70:	4b80      	ldr	r3, [pc, #512]	@ (3400c174 <_lite_kernel_nl_softmax_is8os8+0x834>)
3400bf72:	bf0b      	itete	eq
3400bf74:	f04f 4e80 	moveq.w	lr, #1073741824	@ 0x40000000
3400bf78:	469e      	movne	lr, r3
3400bf7a:	f04f 0800 	moveq.w	r8, #0
3400bf7e:	f04f 38ff 	movne.w	r8, #4294967295	@ 0xffffffff
3400bf82:	fb02 f701 	mul.w	r7, r2, r1
3400bf86:	17d3      	asrs	r3, r2, #31
3400bf88:	fb03 7700 	mla	r7, r3, r0, r7
3400bf8c:	9b00      	ldr	r3, [sp, #0]
3400bf8e:	fba2 3603 	umull	r3, r6, r2, r3
3400bf92:	eb13 030e 	adds.w	r3, r3, lr
3400bf96:	443e      	add	r6, r7
3400bf98:	eb46 0e08 	adc.w	lr, r6, r8
3400bf9c:	f1be 0f00 	cmp.w	lr, #0
3400bfa0:	da05      	bge.n	3400bfae <_lite_kernel_nl_softmax_is8os8+0x66e>
3400bfa2:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
3400bfa6:	199e      	adds	r6, r3, r6
3400bfa8:	4633      	mov	r3, r6
3400bfaa:	f14e 0e00 	adc.w	lr, lr, #0
3400bfae:	4677      	mov	r7, lr
3400bfb0:	461e      	mov	r6, r3
3400bfb2:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400bfb6:	f1c6 5600 	rsb	r6, r6, #536870912	@ 0x20000000
3400bfba:	ea82 0306 	eor.w	r3, r2, r6
3400bfbe:	0fdb      	lsrs	r3, r3, #31
3400bfc0:	2b00      	cmp	r3, #0
3400bfc2:	bf0c      	ite	eq
3400bfc4:	f04f 0e00 	moveq.w	lr, #0
3400bfc8:	f04f 3eff 	movne.w	lr, #4294967295	@ 0xffffffff
3400bfcc:	4b69      	ldr	r3, [pc, #420]	@ (3400c174 <_lite_kernel_nl_softmax_is8os8+0x834>)
3400bfce:	bf08      	it	eq
3400bfd0:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
3400bfd4:	fbc2 3e06 	smlal	r3, lr, r2, r6
3400bfd8:	f1be 0f00 	cmp.w	lr, #0
3400bfdc:	da05      	bge.n	3400bfea <_lite_kernel_nl_softmax_is8os8+0x6aa>
3400bfde:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
3400bfe2:	199e      	adds	r6, r3, r6
3400bfe4:	4633      	mov	r3, r6
3400bfe6:	f14e 0e00 	adc.w	lr, lr, #0
3400bfea:	461e      	mov	r6, r3
3400bfec:	4677      	mov	r7, lr
3400bfee:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400bff2:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
3400bff6:	f2c0 82fd 	blt.w	3400c5f4 <_lite_kernel_nl_softmax_is8os8+0xcb4>
3400bffa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400bffe:	441a      	add	r2, r3
3400c000:	ea92 0f04 	teq	r2, r4
3400c004:	f140 82f2 	bpl.w	3400c5ec <_lite_kernel_nl_softmax_is8os8+0xcac>
3400c008:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
3400c00c:	4c59      	ldr	r4, [pc, #356]	@ (3400c174 <_lite_kernel_nl_softmax_is8os8+0x834>)
3400c00e:	e9dd 8900 	ldrd	r8, r9, [sp]
3400c012:	fb02 f109 	mul.w	r1, r2, r9
3400c016:	17d3      	asrs	r3, r2, #31
3400c018:	fba2 0708 	umull	r0, r7, r2, r8
3400c01c:	fb03 1108 	mla	r1, r3, r8, r1
3400c020:	1900      	adds	r0, r0, r4
3400c022:	4439      	add	r1, r7
3400c024:	eb41 0106 	adc.w	r1, r1, r6
3400c028:	2900      	cmp	r1, #0
3400c02a:	da05      	bge.n	3400c038 <_lite_kernel_nl_softmax_is8os8+0x6f8>
3400c02c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
3400c030:	1904      	adds	r4, r0, r4
3400c032:	4620      	mov	r0, r4
3400c034:	f141 0100 	adc.w	r1, r1, #0
3400c038:	4606      	mov	r6, r0
3400c03a:	460f      	mov	r7, r1
3400c03c:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400c040:	f1c6 5600 	rsb	r6, r6, #536870912	@ 0x20000000
3400c044:	ea86 0102 	eor.w	r1, r6, r2
3400c048:	0fc9      	lsrs	r1, r1, #31
3400c04a:	2900      	cmp	r1, #0
3400c04c:	bf08      	it	eq
3400c04e:	2000      	moveq	r0, #0
3400c050:	4948      	ldr	r1, [pc, #288]	@ (3400c174 <_lite_kernel_nl_softmax_is8os8+0x834>)
3400c052:	bf14      	ite	ne
3400c054:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
3400c058:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
3400c05c:	fb06 f303 	mul.w	r3, r6, r3
3400c060:	17f4      	asrs	r4, r6, #31
3400c062:	fb02 3304 	mla	r3, r2, r4, r3
3400c066:	fba6 6402 	umull	r6, r4, r6, r2
3400c06a:	1876      	adds	r6, r6, r1
3400c06c:	4423      	add	r3, r4
3400c06e:	eb43 0300 	adc.w	r3, r3, r0
3400c072:	2b00      	cmp	r3, #0
3400c074:	da05      	bge.n	3400c082 <_lite_kernel_nl_softmax_is8os8+0x742>
3400c076:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400c07a:	1871      	adds	r1, r6, r1
3400c07c:	460e      	mov	r6, r1
3400c07e:	f143 0300 	adc.w	r3, r3, #0
3400c082:	4619      	mov	r1, r3
3400c084:	4630      	mov	r0, r6
3400c086:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400c08a:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
3400c08e:	4603      	mov	r3, r0
3400c090:	f2c0 82a0 	blt.w	3400c5d4 <_lite_kernel_nl_softmax_is8os8+0xc94>
3400c094:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400c098:	441a      	add	r2, r3
3400c09a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
3400c09e:	ea4f 0242 	mov.w	r2, r2, lsl #1
3400c0a2:	bfa8      	it	ge
3400c0a4:	461a      	movge	r2, r3
3400c0a6:	9b80      	ldr	r3, [sp, #512]	@ 0x200
3400c0a8:	2b00      	cmp	r3, #0
3400c0aa:	dd43      	ble.n	3400c134 <_lite_kernel_nl_softmax_is8os8+0x7f4>
3400c0ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3400c0ae:	eeae 2b10 	vdup.32	q7, r2
3400c0b2:	3b23      	subs	r3, #35	@ 0x23
3400c0b4:	eea8 3b10 	vdup.32	q4, r3
3400c0b8:	23ff      	movs	r3, #255	@ 0xff
3400c0ba:	eeac 3b10 	vdup.32	q6, r3
3400c0be:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
3400c0c2:	eeaa 3b10 	vdup.32	q5, r3
3400c0c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
3400c0c8:	9808      	ldr	r0, [sp, #32]
3400c0ca:	ea4f 0e93 	mov.w	lr, r3, lsr #2
3400c0ce:	f10e 0e01 	add.w	lr, lr, #1
3400c0d2:	f04e e001 	dls	lr, lr
3400c0d6:	9904      	ldr	r1, [sp, #16]
3400c0d8:	9a80      	ldr	r2, [sp, #512]	@ 0x200
3400c0da:	f022 e801 	bfcsel	0, 3400c0e0 <_lite_kernel_nl_softmax_is8os8+0x7a0>, 4, hi
3400c0de:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c0e2:	ec91 6f02 	ldc	15, cr6, [r1], {2}
3400c0e6:	ff20 6846 	vsub.i32	q3, q0, q3
3400c0ea:	eefd 3a10 	vmrs	r3, <impl def 0xd>
3400c0ee:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c0f2:	fe27 1fca 	cdp2	15, 2, cr1, cr7, cr10, {6}
3400c0f6:	efa2 6556 	vshl.s32	q3, q3, #2
3400c0fa:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c0fe:	fc9c 4f46 	ldc2	15, cr4, [ip], {70}	@ 0x46
3400c102:	ff2e 6b44 	vqrdmulh.s32	q3, q7, q2
3400c106:	ef06 4158 	vand	q2, q3, q4
3400c10a:	efa1 4054 	vshr.s32	q2, q2, #31
3400c10e:	ef26 6054 	vqadd.s32	q3, q3, q2
3400c112:	ef28 6546 	vrshl.s32	q3, q3, q4
3400c116:	ef26 665c 	vmin.s32	q3, q3, q6
3400c11a:	eeed 3a10 	vmsr	<impl def 0xd>, r3
3400c11e:	ef26 684a 	vadd.i32	q3, q3, q5
3400c122:	3a04      	subs	r2, #4
3400c124:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c128:	ec80 6f02 	stc	15, cr6, [r0], {2}
3400c12c:	4429      	add	r1, r5
3400c12e:	4428      	add	r0, r5
3400c130:	f00f c82d 	le	lr, 3400c0da <_lite_kernel_nl_softmax_is8os8+0x79a>
3400c134:	9a08      	ldr	r2, [sp, #32]
3400c136:	9b04      	ldr	r3, [sp, #16]
3400c138:	3201      	adds	r2, #1
3400c13a:	9208      	str	r2, [sp, #32]
3400c13c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
3400c13e:	3301      	adds	r3, #1
3400c140:	4293      	cmp	r3, r2
3400c142:	9304      	str	r3, [sp, #16]
3400c144:	f47f ae3e 	bne.w	3400bdc4 <_lite_kernel_nl_softmax_is8os8+0x484>
3400c148:	9a21      	ldr	r2, [sp, #132]	@ 0x84
3400c14a:	9926      	ldr	r1, [sp, #152]	@ 0x98
3400c14c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
3400c14e:	440a      	add	r2, r1
3400c150:	9221      	str	r2, [sp, #132]	@ 0x84
3400c152:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
3400c154:	3301      	adds	r3, #1
3400c156:	440a      	add	r2, r1
3400c158:	922a      	str	r2, [sp, #168]	@ 0xa8
3400c15a:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
3400c15c:	9322      	str	r3, [sp, #136]	@ 0x88
3400c15e:	429a      	cmp	r2, r3
3400c160:	f47f ae29 	bne.w	3400bdb6 <_lite_kernel_nl_softmax_is8os8+0x476>
3400c164:	b067      	add	sp, #412	@ 0x19c
3400c166:	ecbd 8b10 	vpop	{d8-d15}
3400c16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400c16e:	bf00      	nop
3400c170:	c3c3c3c4 	.word	0xc3c3c3c4
3400c174:	c0000001 	.word	0xc0000001
3400c178:	f44f 7880 	mov.w	r8, #256	@ 0x100
3400c17c:	9a80      	ldr	r2, [sp, #512]	@ 0x200
3400c17e:	fb02 f303 	mul.w	r3, r2, r3
3400c182:	2201      	movs	r2, #1
3400c184:	2b00      	cmp	r3, #0
3400c186:	fa02 f204 	lsl.w	r2, r2, r4
3400c18a:	469b      	mov	fp, r3
3400c18c:	9230      	str	r2, [sp, #192]	@ 0xc0
3400c18e:	f77f ade4 	ble.w	3400bd5a <_lite_kernel_nl_softmax_is8os8+0x41a>
3400c192:	1e5c      	subs	r4, r3, #1
3400c194:	ea4f 1e14 	mov.w	lr, r4, lsr #4
3400c198:	f10e 0e01 	add.w	lr, lr, #1
3400c19c:	f04e e001 	dls	lr, lr
3400c1a0:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
3400c1a4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
3400c1a6:	eb02 0903 	add.w	r9, r2, r3
3400c1aa:	f003 e801 	bfcsel	0, 3400b1b0 <lite_convert_if32os8+0x1e8>, 4, eq
3400c1ae:	eba9 0003 	sub.w	r0, r9, r3
3400c1b2:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c1b6:	ed90 7e00 	ldc	14, cr7, [r0]
3400c1ba:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c1be:	eee2 1f06 	cdp	15, 14, cr1, cr2, cr6, {0}
3400c1c2:	3b10      	subs	r3, #16
3400c1c4:	b249      	sxtb	r1, r1
3400c1c6:	f00f c011 	le	lr, 3400c1aa <_lite_kernel_nl_softmax_is8os8+0x86a>
3400c1ca:	eea6 5b10 	vdup.32	q3, r5
3400c1ce:	ab36      	add	r3, sp, #216	@ 0xd8
3400c1d0:	ed83 7f00 	stc	15, cr7, [r3]
3400c1d4:	eea6 1b10 	vdup.32	q3, r1
3400c1d8:	ab5e      	add	r3, sp, #376	@ 0x178
3400c1da:	ed83 7f00 	stc	15, cr7, [r3]
3400c1de:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
3400c1e2:	eea6 3b10 	vdup.32	q3, r3
3400c1e6:	ab3a      	add	r3, sp, #232	@ 0xe8
3400c1e8:	ed83 7f00 	stc	15, cr7, [r3]
3400c1ec:	4b1d      	ldr	r3, [pc, #116]	@ (3400c264 <_lite_kernel_nl_softmax_is8os8+0x924>)
3400c1ee:	4e1e      	ldr	r6, [pc, #120]	@ (3400c268 <_lite_kernel_nl_softmax_is8os8+0x928>)
3400c1f0:	eea6 3b10 	vdup.32	q3, r3
3400c1f4:	ab3e      	add	r3, sp, #248	@ 0xf8
3400c1f6:	ed83 7f00 	stc	15, cr7, [r3]
3400c1fa:	eea6 6b10 	vdup.32	q3, r6
3400c1fe:	4d1b      	ldr	r5, [pc, #108]	@ (3400c26c <_lite_kernel_nl_softmax_is8os8+0x92c>)
3400c200:	ae42      	add	r6, sp, #264	@ 0x108
3400c202:	ed86 7f00 	stc	15, cr7, [r6]
3400c206:	eea6 5b10 	vdup.32	q3, r5
3400c20a:	08a4      	lsrs	r4, r4, #2
3400c20c:	f104 0e01 	add.w	lr, r4, #1
3400c210:	4c17      	ldr	r4, [pc, #92]	@ (3400c270 <_lite_kernel_nl_softmax_is8os8+0x930>)
3400c212:	ad46      	add	r5, sp, #280	@ 0x118
3400c214:	ed85 7f00 	stc	15, cr7, [r5]
3400c218:	eea6 4b10 	vdup.32	q3, r4
3400c21c:	4815      	ldr	r0, [pc, #84]	@ (3400c274 <_lite_kernel_nl_softmax_is8os8+0x934>)
3400c21e:	ac4a      	add	r4, sp, #296	@ 0x128
3400c220:	ed84 7f00 	stc	15, cr7, [r4]
3400c224:	eea6 0b10 	vdup.32	q3, r0
3400c228:	4913      	ldr	r1, [pc, #76]	@ (3400c278 <_lite_kernel_nl_softmax_is8os8+0x938>)
3400c22a:	a84e      	add	r0, sp, #312	@ 0x138
3400c22c:	ed80 7f00 	stc	15, cr7, [r0]
3400c230:	eea6 1b10 	vdup.32	q3, r1
3400c234:	4a11      	ldr	r2, [pc, #68]	@ (3400c27c <_lite_kernel_nl_softmax_is8os8+0x93c>)
3400c236:	a952      	add	r1, sp, #328	@ 0x148
3400c238:	ed81 7f00 	stc	15, cr7, [r1]
3400c23c:	eea6 2b10 	vdup.32	q3, r2
3400c240:	4b0f      	ldr	r3, [pc, #60]	@ (3400c280 <_lite_kernel_nl_softmax_is8os8+0x940>)
3400c242:	aa56      	add	r2, sp, #344	@ 0x158
3400c244:	ed82 7f00 	stc	15, cr7, [r2]
3400c248:	eea6 3b10 	vdup.32	q3, r3
3400c24c:	ab5a      	add	r3, sp, #360	@ 0x168
3400c24e:	f04e e001 	dls	lr, lr
3400c252:	ed83 7f00 	stc	15, cr7, [r3]
3400c256:	f8cd 80d0 	str.w	r8, [sp, #208]	@ 0xd0
3400c25a:	f8cd c210 	str.w	ip, [sp, #528]	@ 0x210
3400c25e:	f8cd 9188 	str.w	r9, [sp, #392]	@ 0x188
3400c262:	e00f      	b.n	3400c284 <_lite_kernel_nl_softmax_is8os8+0x944>
3400c264:	2aaaaaab 	.word	0x2aaaaaab
3400c268:	70f5a894 	.word	0x70f5a894
3400c26c:	63afbe7b 	.word	0x63afbe7b
3400c270:	4da2cbf2 	.word	0x4da2cbf2
3400c274:	2f16ac6c 	.word	0x2f16ac6c
3400c278:	1152aaa4 	.word	0x1152aaa4
3400c27c:	02582ab7 	.word	0x02582ab7
3400c280:	000afe11 	.word	0x000afe11
3400c284:	9b62      	ldr	r3, [sp, #392]	@ 0x188
3400c286:	f02b e801 	bfcsel	0, 3400b28c <lite_convert_if32ou8+0xd4>, 4, ge
3400c28a:	eba3 030b 	sub.w	r3, r3, fp
3400c28e:	4619      	mov	r1, r3
3400c290:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c294:	ed91 6f00 	ldc	15, cr6, [r1]
3400c298:	a95e      	add	r1, sp, #376	@ 0x178
3400c29a:	ed91 5f00 	ldc	15, cr5, [r1]
3400c29e:	ff24 6846 	vsub.i32	q3, q2, q3
3400c2a2:	9934      	ldr	r1, [sp, #208]	@ 0xd0
3400c2a4:	f04f 5500 	mov.w	r5, #536870912	@ 0x20000000
3400c2a8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c2ac:	fe27 1fe1 	cdp2	15, 2, cr1, cr7, cr1, {7}
3400c2b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
3400c2b4:	eea4 5b10 	vdup.32	q2, r5
3400c2b8:	eeaa 1b10 	vdup.32	q5, r1
3400c2bc:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
3400c2c0:	4669      	mov	r1, sp
3400c2c2:	20f2      	movs	r0, #242	@ 0xf2
3400c2c4:	ed81 5f00 	stc	15, cr5, [r1]
3400c2c8:	eea4 4b10 	vdup.32	q2, r4
3400c2cc:	a904      	add	r1, sp, #16
3400c2ce:	ed81 5f00 	stc	15, cr5, [r1]
3400c2d2:	eea4 0b10 	vdup.32	q2, r0
3400c2d6:	a922      	add	r1, sp, #136	@ 0x88
3400c2d8:	ed81 5f00 	stc	15, cr5, [r1]
3400c2dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400c2e0:	eea4 1b10 	vdup.32	q2, r1
3400c2e4:	a926      	add	r1, sp, #152	@ 0x98
3400c2e6:	ed81 5f00 	stc	15, cr5, [r1]
3400c2ea:	9930      	ldr	r1, [sp, #192]	@ 0xc0
3400c2ec:	a83a      	add	r0, sp, #232	@ 0xe8
3400c2ee:	ee27 5e61 	cdp	14, 2, cr5, cr7, cr1, {3}
3400c2f2:	efa2 6556 	vshl.s32	q3, q3, #2
3400c2f6:	a92c      	add	r1, sp, #176	@ 0xb0
3400c2f8:	ed81 7f00 	stc	15, cr7, [r1]
3400c2fc:	a936      	add	r1, sp, #216	@ 0xd8
3400c2fe:	ed91 7f00 	ldc	15, cr7, [r1]
3400c302:	ffb9 43c4 	vneg.s32	q2, q2
3400c306:	f04f 7a80 	mov.w	sl, #16777216	@ 0x1000000
3400c30a:	ff24 4b46 	vqrdmulh.s32	q2, q2, q3
3400c30e:	ed90 7f00 	ldc	15, cr7, [r0]
3400c312:	eeae ab10 	vdup.32	q7, sl
3400c316:	ef04 6156 	vand	q3, q2, q3
3400c31a:	2300      	movs	r3, #0
3400c31c:	ff26 684e 	vsub.i32	q3, q3, q7
3400c320:	f04f 7c00 	mov.w	ip, #33554432	@ 0x2000000
3400c324:	eefd 2a10 	vmrs	r2, <impl def 0xd>
3400c328:	fe25 0f43 	cdp2	15, 2, cr0, cr5, cr3, {2}
3400c32c:	ff26 4844 	vsub.i32	q2, q3, q2
3400c330:	f04f 6780 	mov.w	r7, #67108864	@ 0x4000000
3400c334:	ef04 e15e 	vand	q7, q2, q7
3400c338:	eea8 cb10 	vdup.32	q4, ip
3400c33c:	eefd 1a10 	vmrs	r1, <impl def 0xd>
3400c340:	ef04 8158 	vand	q4, q2, q4
3400c344:	fe2f 0fc3 	cdp2	15, 2, cr0, cr15, cr3, {6}
3400c348:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
3400c34c:	eea0 7b10 	vdup.32	q0, r7
3400c350:	eea2 6b10 	vdup.32	q1, r6
3400c354:	ef04 0150 	vand	q0, q2, q0
3400c358:	eefd ca10 	vmrs	ip, <impl def 0xd>
3400c35c:	fe29 0fc3 	cdp2	15, 2, cr0, cr9, cr3, {6}
3400c360:	ef04 2152 	vand	q1, q2, q1
3400c364:	eefd 7a10 	vmrs	r7, <impl def 0xd>
3400c368:	4668      	mov	r0, sp
3400c36a:	fe21 0fc3 	cdp2	15, 2, cr0, cr1, cr3, {6}
3400c36e:	eefd 6a10 	vmrs	r6, <impl def 0xd>
3400c372:	fe23 0fc3 	cdp2	15, 2, cr0, cr3, cr3, {6}
3400c376:	ed90 3f00 	ldc	15, cr3, [r0]
3400c37a:	ef04 2152 	vand	q1, q2, q1
3400c37e:	a804      	add	r0, sp, #16
3400c380:	eefd 5a10 	vmrs	r5, <impl def 0xd>
3400c384:	fe23 0fc3 	cdp2	15, 2, cr0, cr3, cr3, {6}
3400c388:	ed90 3f00 	ldc	15, cr3, [r0]
3400c38c:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
3400c390:	ef04 2152 	vand	q1, q2, q1
3400c394:	eefd 4a10 	vmrs	r4, <impl def 0xd>
3400c398:	fe23 0fc3 	cdp2	15, 2, cr0, cr3, cr3, {6}
3400c39c:	eea2 8b10 	vdup.32	q1, r8
3400c3a0:	ef04 4152 	vand	q2, q2, q1
3400c3a4:	eefd 0a10 	vmrs	r0, <impl def 0xd>
3400c3a8:	efa5 6556 	vshl.s32	q3, q3, #5
3400c3ac:	fe25 0fc3 	cdp2	15, 2, cr0, cr5, cr3, {6}
3400c3b0:	eea4 3b10 	vdup.32	q2, r3
3400c3b4:	ee27 6f48 	cdp	15, 2, cr6, cr7, cr8, {2}
3400c3b8:	ef24 2154 	vorr	q1, q2, q2
3400c3bc:	eefd 8a10 	vmrs	r8, <impl def 0xd>
3400c3c0:	eeed ca10 	vmsr	<impl def 0xd>, ip
3400c3c4:	ef24 8154 	vorr	q4, q2, q2
3400c3c8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c3cc:	ffb0 25c4 	vmvn	q1, q2
3400c3d0:	eeed 7a10 	vmsr	<impl def 0xd>, r7
3400c3d4:	ef24 e154 	vorr	q7, q2, q2
3400c3d8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c3dc:	ffb0 85c4 	vmvn	q4, q2
3400c3e0:	eeed 6a10 	vmsr	<impl def 0xd>, r6
3400c3e4:	ab04      	add	r3, sp, #16
3400c3e6:	ed83 3f00 	stc	15, cr3, [r3]
3400c3ea:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c3ee:	ffb0 e5c4 	vmvn	q7, q2
3400c3f2:	ef24 2154 	vorr	q1, q2, q2
3400c3f6:	eeed 5a10 	vmsr	<impl def 0xd>, r5
3400c3fa:	ab08      	add	r3, sp, #32
3400c3fc:	ed83 9f00 	stc	15, cr9, [r3]
3400c400:	ab0c      	add	r3, sp, #48	@ 0x30
3400c402:	ed83 ff00 	stc	15, cr15, [r3]
3400c406:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c40a:	ffb0 25c4 	vmvn	q1, q2
3400c40e:	ef24 e154 	vorr	q7, q2, q2
3400c412:	eeed 8a10 	vmsr	<impl def 0xd>, r8
3400c416:	ab10      	add	r3, sp, #64	@ 0x40
3400c418:	ed83 3f00 	stc	15, cr3, [r3]
3400c41c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c420:	ffb0 e5c4 	vmvn	q7, q2
3400c424:	ef24 2154 	vorr	q1, q2, q2
3400c428:	eeed 4a10 	vmsr	<impl def 0xd>, r4
3400c42c:	ef24 8154 	vorr	q4, q2, q2
3400c430:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c434:	ffb0 25c4 	vmvn	q1, q2
3400c438:	eeed 0a10 	vmsr	<impl def 0xd>, r0
3400c43c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c440:	ffb0 85c4 	vmvn	q4, q2
3400c444:	ab14      	add	r3, sp, #80	@ 0x50
3400c446:	ed83 ff00 	stc	15, cr15, [r3]
3400c44a:	ab18      	add	r3, sp, #96	@ 0x60
3400c44c:	ed83 3f00 	stc	15, cr3, [r3]
3400c450:	ab1c      	add	r3, sp, #112	@ 0x70
3400c452:	ed83 9f00 	stc	15, cr9, [r3]
3400c456:	eeed 1a10 	vmsr	<impl def 0xd>, r1
3400c45a:	ef24 e154 	vorr	q7, q2, q2
3400c45e:	ab26      	add	r3, sp, #152	@ 0x98
3400c460:	ed93 3f00 	ldc	15, cr3, [r3]
3400c464:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c468:	ffb0 e5c4 	vmvn	q7, q2
3400c46c:	ff26 0b46 	vqrdmulh.s32	q0, q3, q3
3400c470:	ef0e 2152 	vand	q1, q7, q1
3400c474:	f06f 0901 	mvn.w	r9, #1
3400c478:	ed83 3f00 	stc	15, cr3, [r3]
3400c47c:	ff20 8b46 	vqrdmulh.s32	q4, q0, q3
3400c480:	eeac 9b10 	vdup.32	q6, r9
3400c484:	ff20 2b40 	vqrdmulh.s32	q1, q0, q0
3400c488:	466b      	mov	r3, sp
3400c48a:	ed83 9f00 	stc	15, cr9, [r3]
3400c48e:	ef02 815c 	vand	q4, q1, q6
3400c492:	efa1 8058 	vshr.s32	q4, q4, #31
3400c496:	ef22 2058 	vqadd.s32	q1, q1, q4
3400c49a:	ef2c 2542 	vrshl.s32	q1, q1, q6
3400c49e:	ed93 df00 	ldc	15, cr13, [r3]
3400c4a2:	ab3e      	add	r3, sp, #248	@ 0xf8
3400c4a4:	ef22 284c 	vadd.i32	q1, q1, q6
3400c4a8:	ed93 df00 	ldc	15, cr13, [r3]
3400c4ac:	ff22 2b4c 	vqrdmulh.s32	q1, q1, q6
3400c4b0:	ef20 2842 	vadd.i32	q1, q0, q1
3400c4b4:	ef02 015a 	vand	q0, q1, q5
3400c4b8:	efa1 0050 	vshr.s32	q0, q0, #31
3400c4bc:	ef22 2050 	vqadd.s32	q1, q1, q0
3400c4c0:	ef2a 2542 	vrshl.s32	q1, q1, q5
3400c4c4:	ab42      	add	r3, sp, #264	@ 0x108
3400c4c6:	ed93 bf00 	ldc	15, cr11, [r3]
3400c4ca:	ef26 6842 	vadd.i32	q3, q3, q1
3400c4ce:	ff2a 6b46 	vqrdmulh.s32	q3, q5, q3
3400c4d2:	ab46      	add	r3, sp, #280	@ 0x118
3400c4d4:	ef2a 6846 	vadd.i32	q3, q5, q3
3400c4d8:	ed93 bf00 	ldc	15, cr11, [r3]
3400c4dc:	ab04      	add	r3, sp, #16
3400c4de:	ed93 1f00 	ldc	15, cr1, [r3]
3400c4e2:	ff26 2b4a 	vqrdmulh.s32	q1, q3, q5
3400c4e6:	ef16 6150 	vbic	q3, q3, q0
3400c4ea:	ef00 2152 	vand	q1, q0, q1
3400c4ee:	ab4a      	add	r3, sp, #296	@ 0x128
3400c4f0:	ed93 bf00 	ldc	15, cr11, [r3]
3400c4f4:	ff02 6156 	veor	q3, q1, q3
3400c4f8:	ab08      	add	r3, sp, #32
3400c4fa:	ed93 9f00 	ldc	15, cr9, [r3]
3400c4fe:	ff26 2b4a 	vqrdmulh.s32	q1, q3, q5
3400c502:	ef16 6158 	vbic	q3, q3, q4
3400c506:	ef08 2152 	vand	q1, q4, q1
3400c50a:	ab4e      	add	r3, sp, #312	@ 0x138
3400c50c:	ed93 bf00 	ldc	15, cr11, [r3]
3400c510:	ff02 6156 	veor	q3, q1, q3
3400c514:	ab0c      	add	r3, sp, #48	@ 0x30
3400c516:	ed93 1f00 	ldc	15, cr1, [r3]
3400c51a:	ff26 2b4a 	vqrdmulh.s32	q1, q3, q5
3400c51e:	ef16 6150 	vbic	q3, q3, q0
3400c522:	ef00 2152 	vand	q1, q0, q1
3400c526:	ab52      	add	r3, sp, #328	@ 0x148
3400c528:	ed93 bf00 	ldc	15, cr11, [r3]
3400c52c:	ff02 6156 	veor	q3, q1, q3
3400c530:	ab10      	add	r3, sp, #64	@ 0x40
3400c532:	ed93 1f00 	ldc	15, cr1, [r3]
3400c536:	ff26 2b4a 	vqrdmulh.s32	q1, q3, q5
3400c53a:	ef16 6150 	vbic	q3, q3, q0
3400c53e:	ef00 2152 	vand	q1, q0, q1
3400c542:	ab56      	add	r3, sp, #344	@ 0x158
3400c544:	ed93 bf00 	ldc	15, cr11, [r3]
3400c548:	ff02 6156 	veor	q3, q1, q3
3400c54c:	ab14      	add	r3, sp, #80	@ 0x50
3400c54e:	ed93 1f00 	ldc	15, cr1, [r3]
3400c552:	ff26 2b4a 	vqrdmulh.s32	q1, q3, q5
3400c556:	ef16 6150 	vbic	q3, q3, q0
3400c55a:	ef00 2152 	vand	q1, q0, q1
3400c55e:	ab5a      	add	r3, sp, #360	@ 0x168
3400c560:	ed93 bf00 	ldc	15, cr11, [r3]
3400c564:	ff02 6156 	veor	q3, q1, q3
3400c568:	ab18      	add	r3, sp, #96	@ 0x60
3400c56a:	ed93 1f00 	ldc	15, cr1, [r3]
3400c56e:	ff26 2b4a 	vqrdmulh.s32	q1, q3, q5
3400c572:	ef16 6150 	vbic	q3, q3, q0
3400c576:	ef00 2152 	vand	q1, q0, q1
3400c57a:	ab22      	add	r3, sp, #136	@ 0x88
3400c57c:	ff02 2156 	veor	q1, q1, q3
3400c580:	ed93 7f00 	ldc	15, cr7, [r3]
3400c584:	ab1c      	add	r3, sp, #112	@ 0x70
3400c586:	ed93 9f00 	ldc	15, cr9, [r3]
3400c58a:	ff22 6b46 	vqrdmulh.s32	q3, q1, q3
3400c58e:	ef12 2158 	vbic	q1, q1, q4
3400c592:	ef08 6156 	vand	q3, q4, q3
3400c596:	ff06 6152 	veor	q3, q3, q1
3400c59a:	ab26      	add	r3, sp, #152	@ 0x98
3400c59c:	ed93 3f00 	ldc	15, cr3, [r3]
3400c5a0:	ef16 615e 	vbic	q3, q3, q7
3400c5a4:	eeed 2a10 	vmsr	<impl def 0xd>, r2
3400c5a8:	ff02 6156 	veor	q3, q1, q3
3400c5ac:	a92c      	add	r1, sp, #176	@ 0xb0
3400c5ae:	fe37 6f05 	cdp2	15, 3, cr6, cr7, cr5, {0}
3400c5b2:	ed91 5f00 	ldc	15, cr5, [r1]
3400c5b6:	9b84      	ldr	r3, [sp, #528]	@ 0x210
3400c5b8:	f1ab 0b04 	sub.w	fp, fp, #4
3400c5bc:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c5c0:	ec83 6f44 	stc	15, cr6, [r3], {68}	@ 0x44
3400c5c4:	f00f c1a3 	le	lr, 3400c284 <_lite_kernel_nl_softmax_is8os8+0x944>
3400c5c8:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
3400c5cc:	f8dd c210 	ldr.w	ip, [sp, #528]	@ 0x210
3400c5d0:	f7ff bbc3 	b.w	3400bd5a <_lite_kernel_nl_softmax_is8os8+0x41a>
3400c5d4:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
3400c5d8:	dc61      	bgt.n	3400c69e <_lite_kernel_nl_softmax_is8os8+0xd5e>
3400c5da:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
3400c5de:	0052      	lsls	r2, r2, #1
3400c5e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
3400c5e4:	bfd8      	it	le
3400c5e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
3400c5ea:	e55c      	b.n	3400c0a6 <_lite_kernel_nl_softmax_is8os8+0x766>
3400c5ec:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
3400c5f0:	2600      	movs	r6, #0
3400c5f2:	e50c      	b.n	3400c00e <_lite_kernel_nl_softmax_is8os8+0x6ce>
3400c5f4:	f1b6 4f60 	cmp.w	r6, #3758096384	@ 0xe0000000
3400c5f8:	ea4f 0386 	mov.w	r3, r6, lsl #2
3400c5fc:	f73f acff 	bgt.w	3400bffe <_lite_kernel_nl_softmax_is8os8+0x6be>
3400c600:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
3400c604:	ea92 0f04 	teq	r2, r4
3400c608:	d5f0      	bpl.n	3400c5ec <_lite_kernel_nl_softmax_is8os8+0xcac>
3400c60a:	e9dd 6700 	ldrd	r6, r7, [sp]
3400c60e:	17d3      	asrs	r3, r2, #31
3400c610:	fb03 f406 	mul.w	r4, r3, r6
3400c614:	fba6 0102 	umull	r0, r1, r6, r2
3400c618:	fb02 4407 	mla	r4, r2, r7, r4
3400c61c:	4421      	add	r1, r4
3400c61e:	4c25      	ldr	r4, [pc, #148]	@ (3400c6b4 <_lite_kernel_nl_softmax_is8os8+0xd74>)
3400c620:	1900      	adds	r0, r0, r4
3400c622:	f161 0100 	sbc.w	r1, r1, #0
3400c626:	2900      	cmp	r1, #0
3400c628:	da05      	bge.n	3400c636 <_lite_kernel_nl_softmax_is8os8+0xcf6>
3400c62a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
3400c62e:	1904      	adds	r4, r0, r4
3400c630:	4620      	mov	r0, r4
3400c632:	f141 0100 	adc.w	r1, r1, #0
3400c636:	4606      	mov	r6, r0
3400c638:	460f      	mov	r7, r1
3400c63a:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400c63e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400c642:	491c      	ldr	r1, [pc, #112]	@ (3400c6b4 <_lite_kernel_nl_softmax_is8os8+0xd74>)
3400c644:	f1c6 5600 	rsb	r6, r6, #536870912	@ 0x20000000
3400c648:	e508      	b.n	3400c05c <_lite_kernel_nl_softmax_is8os8+0x71c>
3400c64a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
3400c64e:	eea0 3b10 	vdup.32	q0, r3
3400c652:	2320      	movs	r3, #32
3400c654:	930c      	str	r3, [sp, #48]	@ 0x30
3400c656:	f04f 325a 	mov.w	r2, #1515870810	@ 0x5a5a5a5a
3400c65a:	2300      	movs	r3, #0
3400c65c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400c660:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
3400c664:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3400c668:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
3400c66c:	4696      	mov	lr, r2
3400c66e:	4698      	mov	r8, r3
3400c670:	e9cd 0100 	strd	r0, r1, [sp]
3400c674:	4e10      	ldr	r6, [pc, #64]	@ (3400c6b8 <_lite_kernel_nl_softmax_is8os8+0xd78>)
3400c676:	e45b      	b.n	3400bf30 <_lite_kernel_nl_softmax_is8os8+0x5f0>
3400c678:	4613      	mov	r3, r2
3400c67a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
3400c67c:	f1c6 0800 	rsb	r8, r6, #0
3400c680:	fb02 f303 	mul.w	r3, r2, r3
3400c684:	2b01      	cmp	r3, #1
3400c686:	46c1      	mov	r9, r8
3400c688:	f67f ad78 	bls.w	3400c17c <_lite_kernel_nl_softmax_is8os8+0x83c>
3400c68c:	f1b8 0f00 	cmp.w	r8, #0
3400c690:	f43f ab63 	beq.w	3400bd5a <_lite_kernel_nl_softmax_is8os8+0x41a>
3400c694:	2301      	movs	r3, #1
3400c696:	40a3      	lsls	r3, r4
3400c698:	933a      	str	r3, [sp, #232]	@ 0xe8
3400c69a:	f7ff b96e 	b.w	3400b97a <_lite_kernel_nl_softmax_is8os8+0x3a>
3400c69e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
3400c6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400c6a6:	ea4f 0243 	mov.w	r2, r3, lsl #1
3400c6aa:	db99      	blt.n	3400c5e0 <_lite_kernel_nl_softmax_is8os8+0xca0>
3400c6ac:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
3400c6b0:	e4f9      	b.n	3400c0a6 <_lite_kernel_nl_softmax_is8os8+0x766>
3400c6b2:	bf00      	nop
3400c6b4:	c0000001 	.word	0xc0000001
3400c6b8:	20000001 	.word	0x20000001

3400c6bc <_lite_kernel_nl_softmax_iu8ou8>:
3400c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400c6c0:	ed2d 8b10 	vpush	{d8-d15}
3400c6c4:	b0dd      	sub	sp, #372	@ 0x174
3400c6c6:	9e76      	ldr	r6, [sp, #472]	@ 0x1d8
3400c6c8:	935a      	str	r3, [sp, #360]	@ 0x168
3400c6ca:	fb06 f303 	mul.w	r3, r6, r3
3400c6ce:	e9dd 4778 	ldrd	r4, r7, [sp, #480]	@ 0x1e0
3400c6d2:	f517 7f80 	cmn.w	r7, #256	@ 0x100
3400c6d6:	9331      	str	r3, [sp, #196]	@ 0xc4
3400c6d8:	922e      	str	r2, [sp, #184]	@ 0xb8
3400c6da:	fb03 f302 	mul.w	r3, r3, r2
3400c6de:	901d      	str	r0, [sp, #116]	@ 0x74
3400c6e0:	915b      	str	r1, [sp, #364]	@ 0x16c
3400c6e2:	db0c      	blt.n	3400c6fe <_lite_kernel_nl_softmax_iu8ou8+0x42>
3400c6e4:	f1c7 0b00 	rsb	fp, r7, #0
3400c6e8:	455b      	cmp	r3, fp
3400c6ea:	f240 8436 	bls.w	3400cf5a <_lite_kernel_nl_softmax_iu8ou8+0x89e>
3400c6ee:	2f00      	cmp	r7, #0
3400c6f0:	f280 81f4 	bge.w	3400cadc <_lite_kernel_nl_softmax_iu8ou8+0x420>
3400c6f4:	2301      	movs	r3, #1
3400c6f6:	40a3      	lsls	r3, r4
3400c6f8:	e9cd 3b2f 	strd	r3, fp, [sp, #188]	@ 0xbc
3400c6fc:	e00a      	b.n	3400c714 <_lite_kernel_nl_softmax_iu8ou8+0x58>
3400c6fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c702:	f240 840e 	bls.w	3400cf22 <_lite_kernel_nl_softmax_iu8ou8+0x866>
3400c706:	427b      	negs	r3, r7
3400c708:	9330      	str	r3, [sp, #192]	@ 0xc0
3400c70a:	2301      	movs	r3, #1
3400c70c:	f44f 7b80 	mov.w	fp, #256	@ 0x100
3400c710:	40a3      	lsls	r3, r4
3400c712:	932f      	str	r3, [sp, #188]	@ 0xbc
3400c714:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
3400c716:	4f22      	ldr	r7, [pc, #136]	@ (3400c7a0 <_lite_kernel_nl_softmax_iu8ou8+0xe4>)
3400c718:	eea6 3b10 	vdup.32	q3, r3
3400c71c:	ab56      	add	r3, sp, #344	@ 0x158
3400c71e:	ed83 7f00 	stc	15, cr7, [r3]
3400c722:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
3400c726:	eea6 3b10 	vdup.32	q3, r3
3400c72a:	ab32      	add	r3, sp, #200	@ 0xc8
3400c72c:	ed83 7f00 	stc	15, cr7, [r3]
3400c730:	4b1c      	ldr	r3, [pc, #112]	@ (3400c7a4 <_lite_kernel_nl_softmax_iu8ou8+0xe8>)
3400c732:	4c1d      	ldr	r4, [pc, #116]	@ (3400c7a8 <_lite_kernel_nl_softmax_iu8ou8+0xec>)
3400c734:	eea6 3b10 	vdup.32	q3, r3
3400c738:	ab36      	add	r3, sp, #216	@ 0xd8
3400c73a:	ed83 7f00 	stc	15, cr7, [r3]
3400c73e:	4b1b      	ldr	r3, [pc, #108]	@ (3400c7ac <_lite_kernel_nl_softmax_iu8ou8+0xf0>)
3400c740:	481b      	ldr	r0, [pc, #108]	@ (3400c7b0 <_lite_kernel_nl_softmax_iu8ou8+0xf4>)
3400c742:	eea6 3b10 	vdup.32	q3, r3
3400c746:	ab3a      	add	r3, sp, #232	@ 0xe8
3400c748:	ed83 7f00 	stc	15, cr7, [r3]
3400c74c:	eea6 7b10 	vdup.32	q3, r7
3400c750:	af3e      	add	r7, sp, #248	@ 0xf8
3400c752:	ed87 7f00 	stc	15, cr7, [r7]
3400c756:	eea6 4b10 	vdup.32	q3, r4
3400c75a:	ac42      	add	r4, sp, #264	@ 0x108
3400c75c:	ed84 7f00 	stc	15, cr7, [r4]
3400c760:	eea6 0b10 	vdup.32	q3, r0
3400c764:	4913      	ldr	r1, [pc, #76]	@ (3400c7b4 <_lite_kernel_nl_softmax_iu8ou8+0xf8>)
3400c766:	a846      	add	r0, sp, #280	@ 0x118
3400c768:	ed80 7f00 	stc	15, cr7, [r0]
3400c76c:	eea6 1b10 	vdup.32	q3, r1
3400c770:	4a11      	ldr	r2, [pc, #68]	@ (3400c7b8 <_lite_kernel_nl_softmax_iu8ou8+0xfc>)
3400c772:	a94a      	add	r1, sp, #296	@ 0x128
3400c774:	ed81 7f00 	stc	15, cr7, [r1]
3400c778:	eea6 2b10 	vdup.32	q3, r2
3400c77c:	4b0f      	ldr	r3, [pc, #60]	@ (3400c7bc <_lite_kernel_nl_softmax_iu8ou8+0x100>)
3400c77e:	aa4e      	add	r2, sp, #312	@ 0x138
3400c780:	ed82 7f00 	stc	15, cr7, [r2]
3400c784:	2500      	movs	r5, #0
3400c786:	eea6 3b10 	vdup.32	q3, r3
3400c78a:	f8dd 91e8 	ldr.w	r9, [sp, #488]	@ 0x1e8
3400c78e:	ab52      	add	r3, sp, #328	@ 0x148
3400c790:	46ca      	mov	sl, r9
3400c792:	ed83 7f00 	stc	15, cr7, [r3]
3400c796:	462a      	mov	r2, r5
3400c798:	46d9      	mov	r9, fp
3400c79a:	9676      	str	r6, [sp, #472]	@ 0x1d8
3400c79c:	e010      	b.n	3400c7c0 <_lite_kernel_nl_softmax_iu8ou8+0x104>
3400c79e:	bf00      	nop
3400c7a0:	63afbe7b 	.word	0x63afbe7b
3400c7a4:	2aaaaaab 	.word	0x2aaaaaab
3400c7a8:	4da2cbf2 	.word	0x4da2cbf2
3400c7ac:	70f5a894 	.word	0x70f5a894
3400c7b0:	2f16ac6c 	.word	0x2f16ac6c
3400c7b4:	1152aaa4 	.word	0x1152aaa4
3400c7b8:	02582ab7 	.word	0x02582ab7
3400c7bc:	000afe11 	.word	0x000afe11
3400c7c0:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
3400c7c4:	eeaa 0b10 	vdup.32	q5, r0
3400c7c8:	f06f 0001 	mvn.w	r0, #1
3400c7cc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
3400c7d0:	eea6 0b10 	vdup.32	q3, r0
3400c7d4:	24f2      	movs	r4, #242	@ 0xf2
3400c7d6:	eea4 8b10 	vdup.32	q2, r8
3400c7da:	a804      	add	r0, sp, #16
3400c7dc:	ed80 7f00 	stc	15, cr7, [r0]
3400c7e0:	eea6 4b10 	vdup.32	q3, r4
3400c7e4:	a80c      	add	r0, sp, #48	@ 0x30
3400c7e6:	ed80 5f00 	stc	15, cr5, [r0]
3400c7ea:	a826      	add	r0, sp, #152	@ 0x98
3400c7ec:	ed80 7f00 	stc	15, cr7, [r0]
3400c7f0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
3400c7f4:	eea4 0b10 	vdup.32	q2, r0
3400c7f8:	eba9 0b02 	sub.w	fp, r9, r2
3400c7fc:	a808      	add	r0, sp, #32
3400c7fe:	ed80 5f00 	stc	15, cr5, [r0]
3400c802:	f02b e801 	bfcsel	0, 3400b808 <st_f32_to_int8+0x368>, 4, ge
3400c806:	ee23 4f6e 	cdp	15, 2, cr4, cr3, cr14, {3}
3400c80a:	9830      	ldr	r0, [sp, #192]	@ 0xc0
3400c80c:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
3400c80e:	eefd ba10 	vmrs	fp, <impl def 0xd>
3400c812:	fe25 1fe0 	cdp2	15, 2, cr1, cr5, cr0, {7}
3400c816:	ee25 5e64 	cdp	14, 2, cr5, cr5, cr4, {3}
3400c81a:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
3400c81e:	ac56      	add	r4, sp, #344	@ 0x158
3400c820:	ed94 7f00 	ldc	15, cr7, [r4]
3400c824:	ffb9 43c4 	vneg.s32	q2, q2
3400c828:	eeae 5b10 	vdup.32	q7, r5
3400c82c:	ad32      	add	r5, sp, #200	@ 0xc8
3400c82e:	ff24 4b46 	vqrdmulh.s32	q2, q2, q3
3400c832:	ed95 7f00 	ldc	15, cr7, [r5]
3400c836:	ef04 6156 	vand	q3, q2, q3
3400c83a:	2300      	movs	r3, #0
3400c83c:	ff26 684a 	vsub.i32	q3, q3, q5
3400c840:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
3400c844:	eefd 0a10 	vmrs	r0, <impl def 0xd>
3400c848:	fe25 0f43 	cdp2	15, 2, cr0, cr5, cr3, {2}
3400c84c:	ff26 4844 	vsub.i32	q2, q3, q2
3400c850:	f04f 6c80 	mov.w	ip, #67108864	@ 0x4000000
3400c854:	ef04 a15a 	vand	q5, q2, q5
3400c858:	eea8 eb10 	vdup.32	q4, lr
3400c85c:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
3400c860:	ef04 8158 	vand	q4, q2, q4
3400c864:	eea0 cb10 	vdup.32	q0, ip
3400c868:	eefd 4a10 	vmrs	r4, <impl def 0xd>
3400c86c:	fe2b 0fc3 	cdp2	15, 2, cr0, cr11, cr3, {6}
3400c870:	ef04 0150 	vand	q0, q2, q0
3400c874:	f04f 5600 	mov.w	r6, #536870912	@ 0x20000000
3400c878:	eea2 7b10 	vdup.32	q1, r7
3400c87c:	eefd 8a10 	vmrs	r8, <impl def 0xd>
3400c880:	fe29 0fc3 	cdp2	15, 2, cr0, cr9, cr3, {6}
3400c884:	ef04 2152 	vand	q1, q2, q1
3400c888:	eeac 6b10 	vdup.32	q6, r6
3400c88c:	eefd ea10 	vmrs	lr, <impl def 0xd>
3400c890:	fe21 0fc3 	cdp2	15, 2, cr0, cr1, cr3, {6}
3400c894:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
3400c898:	ef04 c15c 	vand	q6, q2, q6
3400c89c:	eefd ca10 	vmrs	ip, <impl def 0xd>
3400c8a0:	fe23 0fc3 	cdp2	15, 2, cr0, cr3, cr3, {6}
3400c8a4:	ef04 e15e 	vand	q7, q2, q7
3400c8a8:	eea2 1b10 	vdup.32	q1, r1
3400c8ac:	eefd 7a10 	vmrs	r7, <impl def 0xd>
3400c8b0:	fe2d 0fc3 	cdp2	15, 2, cr0, cr13, cr3, {6}
3400c8b4:	ef04 4152 	vand	q2, q2, q1
3400c8b8:	eefd 6a10 	vmrs	r6, <impl def 0xd>
3400c8bc:	fe2f 0fc3 	cdp2	15, 2, cr0, cr15, cr3, {6}
3400c8c0:	efa5 6556 	vshl.s32	q3, q3, #5
3400c8c4:	eefd 5a10 	vmrs	r5, <impl def 0xd>
3400c8c8:	fe25 0fc3 	cdp2	15, 2, cr0, cr5, cr3, {6}
3400c8cc:	eea4 3b10 	vdup.32	q2, r3
3400c8d0:	ee27 6f41 	cdp	15, 2, cr6, cr7, cr1, {2}
3400c8d4:	ef24 8154 	vorr	q4, q2, q2
3400c8d8:	eefd 1a10 	vmrs	r1, <impl def 0xd>
3400c8dc:	eeed 8a10 	vmsr	<impl def 0xd>, r8
3400c8e0:	ef24 0154 	vorr	q0, q2, q2
3400c8e4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c8e8:	ffb0 85c4 	vmvn	q4, q2
3400c8ec:	eeed ea10 	vmsr	<impl def 0xd>, lr
3400c8f0:	ef24 2154 	vorr	q1, q2, q2
3400c8f4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c8f8:	ffb0 05c4 	vmvn	q0, q2
3400c8fc:	eeed ca10 	vmsr	<impl def 0xd>, ip
3400c900:	ef24 c154 	vorr	q6, q2, q2
3400c904:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c908:	ffb0 25c4 	vmvn	q1, q2
3400c90c:	eeed 7a10 	vmsr	<impl def 0xd>, r7
3400c910:	ef24 e154 	vorr	q7, q2, q2
3400c914:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c918:	ffb0 c5c4 	vmvn	q6, q2
3400c91c:	eeed 1a10 	vmsr	<impl def 0xd>, r1
3400c920:	ab10      	add	r3, sp, #64	@ 0x40
3400c922:	ed83 3f00 	stc	15, cr3, [r3]
3400c926:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c92a:	ffb0 e5c4 	vmvn	q7, q2
3400c92e:	ef24 2154 	vorr	q1, q2, q2
3400c932:	eeed 6a10 	vmsr	<impl def 0xd>, r6
3400c936:	ab14      	add	r3, sp, #80	@ 0x50
3400c938:	ed83 df00 	stc	15, cr13, [r3]
3400c93c:	ab18      	add	r3, sp, #96	@ 0x60
3400c93e:	ed83 ff00 	stc	15, cr15, [r3]
3400c942:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c946:	ffb0 25c4 	vmvn	q1, q2
3400c94a:	ef24 e154 	vorr	q7, q2, q2
3400c94e:	eeed 5a10 	vmsr	<impl def 0xd>, r5
3400c952:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c956:	ffb0 e5c4 	vmvn	q7, q2
3400c95a:	ab1e      	add	r3, sp, #120	@ 0x78
3400c95c:	ed83 3f00 	stc	15, cr3, [r3]
3400c960:	ab22      	add	r3, sp, #136	@ 0x88
3400c962:	ed83 ff00 	stc	15, cr15, [r3]
3400c966:	eeed 4a10 	vmsr	<impl def 0xd>, r4
3400c96a:	ef24 e154 	vorr	q7, q2, q2
3400c96e:	ab08      	add	r3, sp, #32
3400c970:	ed93 3f00 	ldc	15, cr3, [r3]
3400c974:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c978:	ffb0 e5c4 	vmvn	q7, q2
3400c97c:	ff26 ab46 	vqrdmulh.s32	q5, q3, q3
3400c980:	ef0e 2152 	vand	q1, q7, q1
3400c984:	ff2a cb46 	vqrdmulh.s32	q6, q5, q3
3400c988:	ab2a      	add	r3, sp, #168	@ 0xa8
3400c98a:	ed83 3f00 	stc	15, cr3, [r3]
3400c98e:	ab08      	add	r3, sp, #32
3400c990:	ed83 df00 	stc	15, cr13, [r3]
3400c994:	ab04      	add	r3, sp, #16
3400c996:	ff2a 2b4a 	vqrdmulh.s32	q1, q5, q5
3400c99a:	ed93 df00 	ldc	15, cr13, [r3]
3400c99e:	ef02 c15c 	vand	q6, q1, q6
3400c9a2:	efa1 c05c 	vshr.s32	q6, q6, #31
3400c9a6:	ef22 205c 	vqadd.s32	q1, q1, q6
3400c9aa:	ed93 df00 	ldc	15, cr13, [r3]
3400c9ae:	ab08      	add	r3, sp, #32
3400c9b0:	ef2c 2542 	vrshl.s32	q1, q1, q6
3400c9b4:	ed93 df00 	ldc	15, cr13, [r3]
3400c9b8:	ab36      	add	r3, sp, #216	@ 0xd8
3400c9ba:	ef22 284c 	vadd.i32	q1, q1, q6
3400c9be:	ed93 df00 	ldc	15, cr13, [r3]
3400c9c2:	ff22 2b4c 	vqrdmulh.s32	q1, q1, q6
3400c9c6:	ab0c      	add	r3, sp, #48	@ 0x30
3400c9c8:	ed93 df00 	ldc	15, cr13, [r3]
3400c9cc:	ef2a 2842 	vadd.i32	q1, q5, q1
3400c9d0:	ef02 a15c 	vand	q5, q1, q6
3400c9d4:	efa1 a05a 	vshr.s32	q5, q5, #31
3400c9d8:	ef22 205a 	vqadd.s32	q1, q1, q5
3400c9dc:	ef2c 2542 	vrshl.s32	q1, q1, q6
3400c9e0:	ab3a      	add	r3, sp, #232	@ 0xe8
3400c9e2:	ed93 bf00 	ldc	15, cr11, [r3]
3400c9e6:	ef26 6842 	vadd.i32	q3, q3, q1
3400c9ea:	ff2a 6b46 	vqrdmulh.s32	q3, q5, q3
3400c9ee:	ab3e      	add	r3, sp, #248	@ 0xf8
3400c9f0:	ef2a 6846 	vadd.i32	q3, q5, q3
3400c9f4:	ed93 bf00 	ldc	15, cr11, [r3]
3400c9f8:	ff26 2b4a 	vqrdmulh.s32	q1, q3, q5
3400c9fc:	ef16 6158 	vbic	q3, q3, q4
3400ca00:	ef08 8152 	vand	q4, q4, q1
3400ca04:	ab42      	add	r3, sp, #264	@ 0x108
3400ca06:	ff08 6156 	veor	q3, q4, q3
3400ca0a:	ed93 9f00 	ldc	15, cr9, [r3]
3400ca0e:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400ca12:	ef16 6150 	vbic	q3, q3, q0
3400ca16:	ef00 0152 	vand	q0, q0, q1
3400ca1a:	ab46      	add	r3, sp, #280	@ 0x118
3400ca1c:	ed93 9f00 	ldc	15, cr9, [r3]
3400ca20:	ff00 6156 	veor	q3, q0, q3
3400ca24:	ab10      	add	r3, sp, #64	@ 0x40
3400ca26:	ed93 1f00 	ldc	15, cr1, [r3]
3400ca2a:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400ca2e:	ef16 6150 	vbic	q3, q3, q0
3400ca32:	ef00 2152 	vand	q1, q0, q1
3400ca36:	ab4a      	add	r3, sp, #296	@ 0x128
3400ca38:	ed93 9f00 	ldc	15, cr9, [r3]
3400ca3c:	ff02 6156 	veor	q3, q1, q3
3400ca40:	ab14      	add	r3, sp, #80	@ 0x50
3400ca42:	ed93 df00 	ldc	15, cr13, [r3]
3400ca46:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400ca4a:	ef16 615c 	vbic	q3, q3, q6
3400ca4e:	ef0c 2152 	vand	q1, q6, q1
3400ca52:	ab4e      	add	r3, sp, #312	@ 0x138
3400ca54:	ed93 9f00 	ldc	15, cr9, [r3]
3400ca58:	ff02 6156 	veor	q3, q1, q3
3400ca5c:	ab18      	add	r3, sp, #96	@ 0x60
3400ca5e:	ed93 1f00 	ldc	15, cr1, [r3]
3400ca62:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400ca66:	ef16 6150 	vbic	q3, q3, q0
3400ca6a:	ef00 2152 	vand	q1, q0, q1
3400ca6e:	ab52      	add	r3, sp, #328	@ 0x148
3400ca70:	ed93 9f00 	ldc	15, cr9, [r3]
3400ca74:	ff02 6156 	veor	q3, q1, q3
3400ca78:	ab1e      	add	r3, sp, #120	@ 0x78
3400ca7a:	ed93 1f00 	ldc	15, cr1, [r3]
3400ca7e:	ff26 2b48 	vqrdmulh.s32	q1, q3, q4
3400ca82:	ef16 6150 	vbic	q3, q3, q0
3400ca86:	ef00 2152 	vand	q1, q0, q1
3400ca8a:	ab26      	add	r3, sp, #152	@ 0x98
3400ca8c:	ff02 2156 	veor	q1, q1, q3
3400ca90:	ed93 7f00 	ldc	15, cr7, [r3]
3400ca94:	ab22      	add	r3, sp, #136	@ 0x88
3400ca96:	ed93 1f00 	ldc	15, cr1, [r3]
3400ca9a:	ff22 6b46 	vqrdmulh.s32	q3, q1, q3
3400ca9e:	ef12 2150 	vbic	q1, q1, q0
3400caa2:	ef00 6156 	vand	q3, q0, q3
3400caa6:	ff06 6152 	veor	q3, q3, q1
3400caaa:	ab2a      	add	r3, sp, #168	@ 0xa8
3400caac:	ed93 3f00 	ldc	15, cr3, [r3]
3400cab0:	ef16 615e 	vbic	q3, q3, q7
3400cab4:	eeed 0a10 	vmsr	<impl def 0xd>, r0
3400cab8:	ff02 6156 	veor	q3, q1, q3
3400cabc:	4653      	mov	r3, sl
3400cabe:	fe37 6f05 	cdp2	15, 3, cr6, cr7, cr5, {0}
3400cac2:	eeed ba10 	vmsr	<impl def 0xd>, fp
3400cac6:	454a      	cmp	r2, r9
3400cac8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400cacc:	ed83 7f00 	stc	15, cr7, [r3]
3400cad0:	f10a 0a10 	add.w	sl, sl, #16
3400cad4:	f6ff ae74 	blt.w	3400c7c0 <_lite_kernel_nl_softmax_iu8ou8+0x104>
3400cad8:	46cb      	mov	fp, r9
3400cada:	9e76      	ldr	r6, [sp, #472]	@ 0x1d8
3400cadc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
3400cade:	2b00      	cmp	r3, #0
3400cae0:	f000 821a 	beq.w	3400cf18 <_lite_kernel_nl_softmax_iu8ou8+0x85c>
3400cae4:	9a5a      	ldr	r2, [sp, #360]	@ 0x168
3400cae6:	b293      	uxth	r3, r2
3400cae8:	00d8      	lsls	r0, r3, #3
3400caea:	9314      	str	r3, [sp, #80]	@ 0x50
3400caec:	9018      	str	r0, [sp, #96]	@ 0x60
3400caee:	2a00      	cmp	r2, #0
3400caf0:	f000 8212 	beq.w	3400cf18 <_lite_kernel_nl_softmax_iu8ou8+0x85c>
3400caf4:	eea0 3b10 	vdup.32	q0, r3
3400caf8:	eea6 3b30 	vdup.16	q3, r3
3400cafc:	009d      	lsls	r5, r3, #2
3400cafe:	2300      	movs	r3, #0
3400cb00:	991d      	ldr	r1, [sp, #116]	@ 0x74
3400cb02:	46b4      	mov	ip, r6
3400cb04:	440a      	add	r2, r1
3400cb06:	9210      	str	r2, [sp, #64]	@ 0x40
3400cb08:	9a5b      	ldr	r2, [sp, #364]	@ 0x16c
3400cb0a:	9322      	str	r3, [sp, #136]	@ 0x88
3400cb0c:	4432      	add	r2, r6
3400cb0e:	921e      	str	r2, [sp, #120]	@ 0x78
3400cb10:	461a      	mov	r2, r3
3400cb12:	ee23 cf6e 	cdp	15, 2, cr12, cr3, cr14, {3}
3400cb16:	461a      	mov	r2, r3
3400cb18:	ee13 af6e 	cdp	15, 1, cr10, cr3, cr14, {3}
3400cb1c:	ef20 c95c 	vmul.i32	q6, q0, q6
3400cb20:	ef16 a95a 	vmul.i16	q5, q3, q5
3400cb24:	f06f 030b 	mvn.w	r3, #11
3400cb28:	eea8 3b10 	vdup.32	q4, r3
3400cb2c:	e9dd 3a1d 	ldrd	r3, sl, [sp, #116]	@ 0x74
3400cb30:	930c      	str	r3, [sp, #48]	@ 0x30
3400cb32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
3400cb34:	ebaa 040c 	sub.w	r4, sl, ip
3400cb38:	2b01      	cmp	r3, #1
3400cb3a:	f000 8269 	beq.w	3400d010 <_lite_kernel_nl_softmax_iu8ou8+0x954>
3400cb3e:	f1bc 0f00 	cmp.w	ip, #0
3400cb42:	f340 824e 	ble.w	3400cfe2 <_lite_kernel_nl_softmax_iu8ou8+0x926>
3400cb46:	f10c 3eff 	add.w	lr, ip, #4294967295	@ 0xffffffff
3400cb4a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
3400cb4e:	f10e 0e01 	add.w	lr, lr, #1
3400cb52:	f04e e001 	dls	lr, lr
3400cb56:	4620      	mov	r0, r4
3400cb58:	4661      	mov	r1, ip
3400cb5a:	2300      	movs	r3, #0
3400cb5c:	9e18      	ldr	r6, [sp, #96]	@ 0x60
3400cb5e:	f011 e801 	bfcsel	0, 3400bb64 <_lite_kernel_nl_softmax_is8os8+0x224>, 2, mi
3400cb62:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400cb66:	fc90 6e8a 	ldc2	14, cr6, [r0], {138}	@ 0x8a
3400cb6a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400cb6e:	fee6 3f06 	cdp2	15, 14, cr3, cr6, cr6, {0}
3400cb72:	3908      	subs	r1, #8
3400cb74:	4430      	add	r0, r6
3400cb76:	b2db      	uxtb	r3, r3
3400cb78:	f00f c80f 	le	lr, 3400cb5e <_lite_kernel_nl_softmax_iu8ou8+0x4a2>
3400cb7c:	2201      	movs	r2, #1
3400cb7e:	eea2 3b10 	vdup.32	q1, r3
3400cb82:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
3400cb86:	089b      	lsrs	r3, r3, #2
3400cb88:	f1ac 0104 	sub.w	r1, ip, #4
3400cb8c:	3104      	adds	r1, #4
3400cb8e:	4413      	add	r3, r2
3400cb90:	bfd4      	ite	le
3400cb92:	4610      	movle	r0, r2
3400cb94:	4618      	movgt	r0, r3
3400cb96:	4662      	mov	r2, ip
3400cb98:	2100      	movs	r1, #0
3400cb9a:	9f7a      	ldr	r7, [sp, #488]	@ 0x1e8
3400cb9c:	f022 e801 	bfcsel	0, 3400cba2 <_lite_kernel_nl_softmax_iu8ou8+0x4e6>, 4, hi
3400cba0:	ebaa 0602 	sub.w	r6, sl, r2
3400cba4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400cba8:	fc96 6f0c 	ldc2	15, cr6, [r6], {12}
3400cbac:	ff22 6846 	vsub.i32	q3, q1, q3
3400cbb0:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400cbb4:	fe27 1fcb 	cdp2	15, 2, cr1, cr7, cr11, {6}
3400cbb8:	eefd 3a10 	vmrs	r3, <impl def 0xd>
3400cbbc:	b29e      	uxth	r6, r3
3400cbbe:	3a04      	subs	r2, #4
3400cbc0:	b196      	cbz	r6, 3400cbe8 <_lite_kernel_nl_softmax_iu8ou8+0x52c>
3400cbc2:	efa2 6556 	vshl.s32	q3, q3, #2
3400cbc6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400cbca:	fc97 4f46 	ldc2	15, cr4, [r7], {70}	@ 0x46
3400cbce:	ef04 6158 	vand	q3, q2, q4
3400cbd2:	efa1 6056 	vshr.s32	q3, q3, #31
3400cbd6:	ef24 4056 	vqadd.s32	q2, q2, q3
3400cbda:	ef28 4544 	vrshl.s32	q2, q2, q4
3400cbde:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400cbe2:	eef9 6f04 	cdp	15, 15, cr6, cr9, cr4, {0}
3400cbe6:	4431      	add	r1, r6
3400cbe8:	3801      	subs	r0, #1
3400cbea:	d1d7      	bne.n	3400cb9c <_lite_kernel_nl_softmax_iu8ou8+0x4e0>
3400cbec:	2900      	cmp	r1, #0
3400cbee:	f000 81fb 	beq.w	3400cfe8 <_lite_kernel_nl_softmax_iu8ou8+0x92c>
3400cbf2:	fab1 f381 	clz	r3, r1
3400cbf6:	9308      	str	r3, [sp, #32]
3400cbf8:	f340 81f8 	ble.w	3400cfec <_lite_kernel_nl_softmax_iu8ou8+0x930>
3400cbfc:	4099      	lsls	r1, r3
3400cbfe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
3400cc02:	f113 4200 	adds.w	r2, r3, #2147483648	@ 0x80000000
3400cc06:	ea4f 73e3 	mov.w	r3, r3, asr #31
3400cc0a:	f143 0300 	adc.w	r3, r3, #0
3400cc0e:	9204      	str	r2, [sp, #16]
3400cc10:	9305      	str	r3, [sp, #20]
3400cc12:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
3400cc16:	ea56 076f 	orrs.w	r7, r6, pc, asr #1
3400cc1a:	4ad2      	ldr	r2, [pc, #840]	@ (3400cf64 <_lite_kernel_nl_softmax_iu8ou8+0x8a8>)
3400cc1c:	4273      	negs	r3, r6
3400cc1e:	fb02 3307 	mla	r3, r2, r7, r3
3400cc22:	4630      	mov	r0, r6
3400cc24:	e9cd 6704 	strd	r6, r7, [sp, #16]
3400cc28:	fba6 6702 	umull	r6, r7, r6, r2
3400cc2c:	441f      	add	r7, r3
3400cc2e:	4bce      	ldr	r3, [pc, #824]	@ (3400cf68 <_lite_kernel_nl_softmax_iu8ou8+0x8ac>)
3400cc30:	18f6      	adds	r6, r6, r3
3400cc32:	f167 0700 	sbc.w	r7, r7, #0
3400cc36:	2f00      	cmp	r7, #0
3400cc38:	da05      	bge.n	3400cc46 <_lite_kernel_nl_softmax_iu8ou8+0x58a>
3400cc3a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400cc3e:	18f3      	adds	r3, r6, r3
3400cc40:	461e      	mov	r6, r3
3400cc42:	f147 0700 	adc.w	r7, r7, #0
3400cc46:	4632      	mov	r2, r6
3400cc48:	463b      	mov	r3, r7
3400cc4a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
3400cc4e:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
3400cc52:	f102 325a 	add.w	r2, r2, #1515870810	@ 0x5a5a5a5a
3400cc56:	17d3      	asrs	r3, r2, #31
3400cc58:	fb03 f906 	mul.w	r9, r3, r6
3400cc5c:	fba6 8602 	umull	r8, r6, r6, r2
3400cc60:	fb02 9907 	mla	r9, r2, r7, r9
3400cc64:	f118 4880 	adds.w	r8, r8, #1073741824	@ 0x40000000
3400cc68:	eb49 0906 	adc.w	r9, r9, r6
3400cc6c:	f1b9 0f00 	cmp.w	r9, #0
3400cc70:	4696      	mov	lr, r2
3400cc72:	da06      	bge.n	3400cc82 <_lite_kernel_nl_softmax_iu8ou8+0x5c6>
3400cc74:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
3400cc78:	eb18 0606 	adds.w	r6, r8, r6
3400cc7c:	46b0      	mov	r8, r6
3400cc7e:	f149 0900 	adc.w	r9, r9, #0
3400cc82:	4646      	mov	r6, r8
3400cc84:	464f      	mov	r7, r9
3400cc86:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400cc8a:	f1c6 5600 	rsb	r6, r6, #536870912	@ 0x20000000
3400cc8e:	ea86 0702 	eor.w	r7, r6, r2
3400cc92:	0fff      	lsrs	r7, r7, #31
3400cc94:	49b4      	ldr	r1, [pc, #720]	@ (3400cf68 <_lite_kernel_nl_softmax_iu8ou8+0x8ac>)
3400cc96:	2f00      	cmp	r7, #0
3400cc98:	bf0b      	itete	eq
3400cc9a:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
3400cc9e:	460f      	movne	r7, r1
3400cca0:	f04f 0800 	moveq.w	r8, #0
3400cca4:	f04f 38ff 	movne.w	r8, #4294967295	@ 0xffffffff
3400cca8:	fb06 f303 	mul.w	r3, r6, r3
3400ccac:	ea4f 79e6 	mov.w	r9, r6, asr #31
3400ccb0:	fb0e 3309 	mla	r3, lr, r9, r3
3400ccb4:	fba6 6e0e 	umull	r6, lr, r6, lr
3400ccb8:	19f6      	adds	r6, r6, r7
3400ccba:	4473      	add	r3, lr
3400ccbc:	eb43 0308 	adc.w	r3, r3, r8
3400ccc0:	2b00      	cmp	r3, #0
3400ccc2:	da05      	bge.n	3400ccd0 <_lite_kernel_nl_softmax_iu8ou8+0x614>
3400ccc4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
3400ccc8:	19f7      	adds	r7, r6, r7
3400ccca:	463e      	mov	r6, r7
3400cccc:	f143 0300 	adc.w	r3, r3, #0
3400ccd0:	46b0      	mov	r8, r6
3400ccd2:	4699      	mov	r9, r3
3400ccd4:	ea58 79ef 	orrs.w	r9, r8, pc, asr #31
3400ccd8:	eb02 0288 	add.w	r2, r2, r8, lsl #2
3400ccdc:	ea82 0300 	eor.w	r3, r2, r0
3400cce0:	0fdb      	lsrs	r3, r3, #31
3400cce2:	2b00      	cmp	r3, #0
3400cce4:	4ba0      	ldr	r3, [pc, #640]	@ (3400cf68 <_lite_kernel_nl_softmax_iu8ou8+0x8ac>)
3400cce6:	bf0b      	itete	eq
3400cce8:	f04f 4e80 	moveq.w	lr, #1073741824	@ 0x40000000
3400ccec:	469e      	movne	lr, r3
3400ccee:	f04f 0800 	moveq.w	r8, #0
3400ccf2:	f04f 38ff 	movne.w	r8, #4294967295	@ 0xffffffff
3400ccf6:	9b05      	ldr	r3, [sp, #20]
3400ccf8:	9904      	ldr	r1, [sp, #16]
3400ccfa:	fb02 f703 	mul.w	r7, r2, r3
3400ccfe:	17d3      	asrs	r3, r2, #31
3400cd00:	fb03 7701 	mla	r7, r3, r1, r7
3400cd04:	fba2 3601 	umull	r3, r6, r2, r1
3400cd08:	eb13 030e 	adds.w	r3, r3, lr
3400cd0c:	443e      	add	r6, r7
3400cd0e:	eb46 0e08 	adc.w	lr, r6, r8
3400cd12:	f1be 0f00 	cmp.w	lr, #0
3400cd16:	da05      	bge.n	3400cd24 <_lite_kernel_nl_softmax_iu8ou8+0x668>
3400cd18:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
3400cd1c:	199e      	adds	r6, r3, r6
3400cd1e:	4633      	mov	r3, r6
3400cd20:	f14e 0e00 	adc.w	lr, lr, #0
3400cd24:	4677      	mov	r7, lr
3400cd26:	461e      	mov	r6, r3
3400cd28:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400cd2c:	f1c6 5600 	rsb	r6, r6, #536870912	@ 0x20000000
3400cd30:	ea82 0306 	eor.w	r3, r2, r6
3400cd34:	0fdb      	lsrs	r3, r3, #31
3400cd36:	2b00      	cmp	r3, #0
3400cd38:	bf0c      	ite	eq
3400cd3a:	f04f 0e00 	moveq.w	lr, #0
3400cd3e:	f04f 3eff 	movne.w	lr, #4294967295	@ 0xffffffff
3400cd42:	4b89      	ldr	r3, [pc, #548]	@ (3400cf68 <_lite_kernel_nl_softmax_iu8ou8+0x8ac>)
3400cd44:	bf08      	it	eq
3400cd46:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
3400cd4a:	fbc2 3e06 	smlal	r3, lr, r2, r6
3400cd4e:	f1be 0f00 	cmp.w	lr, #0
3400cd52:	da05      	bge.n	3400cd60 <_lite_kernel_nl_softmax_iu8ou8+0x6a4>
3400cd54:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
3400cd58:	199e      	adds	r6, r3, r6
3400cd5a:	4633      	mov	r3, r6
3400cd5c:	f14e 0e00 	adc.w	lr, lr, #0
3400cd60:	461e      	mov	r6, r3
3400cd62:	4677      	mov	r7, lr
3400cd64:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400cd68:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
3400cd6c:	f2c0 810e 	blt.w	3400cf8c <_lite_kernel_nl_softmax_iu8ou8+0x8d0>
3400cd70:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400cd74:	441a      	add	r2, r3
3400cd76:	ea92 0f00 	teq	r2, r0
3400cd7a:	f140 8103 	bpl.w	3400cf84 <_lite_kernel_nl_softmax_iu8ou8+0x8c8>
3400cd7e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3400cd82:	4e79      	ldr	r6, [pc, #484]	@ (3400cf68 <_lite_kernel_nl_softmax_iu8ou8+0x8ac>)
3400cd84:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
3400cd88:	fb02 f109 	mul.w	r1, r2, r9
3400cd8c:	17d3      	asrs	r3, r2, #31
3400cd8e:	fba2 0e08 	umull	r0, lr, r2, r8
3400cd92:	fb03 1108 	mla	r1, r3, r8, r1
3400cd96:	1980      	adds	r0, r0, r6
3400cd98:	4471      	add	r1, lr
3400cd9a:	eb41 0107 	adc.w	r1, r1, r7
3400cd9e:	2900      	cmp	r1, #0
3400cda0:	da05      	bge.n	3400cdae <_lite_kernel_nl_softmax_iu8ou8+0x6f2>
3400cda2:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
3400cda6:	1986      	adds	r6, r0, r6
3400cda8:	4630      	mov	r0, r6
3400cdaa:	f141 0100 	adc.w	r1, r1, #0
3400cdae:	4606      	mov	r6, r0
3400cdb0:	460f      	mov	r7, r1
3400cdb2:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400cdb6:	f1c6 5600 	rsb	r6, r6, #536870912	@ 0x20000000
3400cdba:	ea86 0102 	eor.w	r1, r6, r2
3400cdbe:	0fc9      	lsrs	r1, r1, #31
3400cdc0:	2900      	cmp	r1, #0
3400cdc2:	bf08      	it	eq
3400cdc4:	2000      	moveq	r0, #0
3400cdc6:	4968      	ldr	r1, [pc, #416]	@ (3400cf68 <_lite_kernel_nl_softmax_iu8ou8+0x8ac>)
3400cdc8:	bf14      	ite	ne
3400cdca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
3400cdce:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
3400cdd2:	fb06 f303 	mul.w	r3, r6, r3
3400cdd6:	17f7      	asrs	r7, r6, #31
3400cdd8:	fb02 3307 	mla	r3, r2, r7, r3
3400cddc:	fba6 6702 	umull	r6, r7, r6, r2
3400cde0:	1876      	adds	r6, r6, r1
3400cde2:	443b      	add	r3, r7
3400cde4:	eb43 0300 	adc.w	r3, r3, r0
3400cde8:	2b00      	cmp	r3, #0
3400cdea:	da05      	bge.n	3400cdf8 <_lite_kernel_nl_softmax_iu8ou8+0x73c>
3400cdec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400cdf0:	1871      	adds	r1, r6, r1
3400cdf2:	460e      	mov	r6, r1
3400cdf4:	f143 0300 	adc.w	r3, r3, #0
3400cdf8:	4619      	mov	r1, r3
3400cdfa:	4630      	mov	r0, r6
3400cdfc:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400ce00:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
3400ce04:	4603      	mov	r3, r0
3400ce06:	f2c0 80b1 	blt.w	3400cf6c <_lite_kernel_nl_softmax_iu8ou8+0x8b0>
3400ce0a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400ce0e:	441a      	add	r2, r3
3400ce10:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
3400ce14:	ea4f 0242 	mov.w	r2, r2, lsl #1
3400ce18:	bfa8      	it	ge
3400ce1a:	461a      	movge	r2, r3
3400ce1c:	f1bc 0f00 	cmp.w	ip, #0
3400ce20:	dd60      	ble.n	3400cee4 <_lite_kernel_nl_softmax_iu8ou8+0x828>
3400ce22:	9b08      	ldr	r3, [sp, #32]
3400ce24:	eeae 2b10 	vdup.32	q7, r2
3400ce28:	3b23      	subs	r3, #35	@ 0x23
3400ce2a:	eea0 3b10 	vdup.32	q0, r3
3400ce2e:	2300      	movs	r3, #0
3400ce30:	eea6 3b10 	vdup.32	q3, r3
3400ce34:	ab08      	add	r3, sp, #32
3400ce36:	ed83 7f00 	stc	15, cr7, [r3]
3400ce3a:	23ff      	movs	r3, #255	@ 0xff
3400ce3c:	eea6 3b10 	vdup.32	q3, r3
3400ce40:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
3400ce44:	ab04      	add	r3, sp, #16
3400ce46:	0892      	lsrs	r2, r2, #2
3400ce48:	ed83 7f00 	stc	15, cr7, [r3]
3400ce4c:	4661      	mov	r1, ip
3400ce4e:	980c      	ldr	r0, [sp, #48]	@ 0x30
3400ce50:	f8dd e1e8 	ldr.w	lr, [sp, #488]	@ 0x1e8
3400ce54:	3201      	adds	r2, #1
3400ce56:	e024      	b.n	3400cea2 <_lite_kernel_nl_softmax_iu8ou8+0x7e6>
3400ce58:	efa2 4554 	vshl.s32	q2, q2, #2
3400ce5c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400ce60:	fc9e 6f44 	ldc2	15, cr6, [lr], {68}	@ 0x44
3400ce64:	ff2e 6b46 	vqrdmulh.s32	q3, q7, q3
3400ce68:	ef06 4150 	vand	q2, q3, q0
3400ce6c:	efa1 4054 	vshr.s32	q2, q2, #31
3400ce70:	ef26 6054 	vqadd.s32	q3, q3, q2
3400ce74:	ae04      	add	r6, sp, #16
3400ce76:	ed96 5f00 	ldc	15, cr5, [r6]
3400ce7a:	ef20 6546 	vrshl.s32	q3, q3, q0
3400ce7e:	ae08      	add	r6, sp, #32
3400ce80:	ef26 6654 	vmin.s32	q3, q3, q2
3400ce84:	ed96 5f00 	ldc	15, cr5, [r6]
3400ce88:	eeed 3a10 	vmsr	<impl def 0xd>, r3
3400ce8c:	ef26 6644 	vmax.s32	q3, q3, q2
3400ce90:	3a01      	subs	r2, #1
3400ce92:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400ce96:	ec80 6f0c 	stc	15, cr6, [r0], {12}
3400ce9a:	f1a1 0104 	sub.w	r1, r1, #4
3400ce9e:	4428      	add	r0, r5
3400cea0:	d020      	beq.n	3400cee4 <_lite_kernel_nl_softmax_iu8ou8+0x828>
3400cea2:	f021 e801 	bfcsel	0, 3400bea8 <_lite_kernel_nl_softmax_is8os8+0x568>, 2, hi
3400cea6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400ceaa:	fc94 4f0c 	ldc2	15, cr4, [r4], {12}
3400ceae:	ff22 4844 	vsub.i32	q2, q1, q2
3400ceb2:	eefd 3a10 	vmrs	r3, <impl def 0xd>
3400ceb6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400ceba:	fe25 1fcb 	cdp2	15, 2, cr1, cr5, cr11, {6}
3400cebe:	eefd 7a10 	vmrs	r7, <impl def 0xd>
3400cec2:	b2be      	uxth	r6, r7
3400cec4:	442c      	add	r4, r5
3400cec6:	2e00      	cmp	r6, #0
3400cec8:	d1c6      	bne.n	3400ce58 <_lite_kernel_nl_softmax_iu8ou8+0x79c>
3400ceca:	eea6 6b10 	vdup.32	q3, r6
3400cece:	eeed 3a10 	vmsr	<impl def 0xd>, r3
3400ced2:	3a01      	subs	r2, #1
3400ced4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400ced8:	ec80 6f0c 	stc	15, cr6, [r0], {12}
3400cedc:	f1a1 0104 	sub.w	r1, r1, #4
3400cee0:	4428      	add	r0, r5
3400cee2:	d1de      	bne.n	3400cea2 <_lite_kernel_nl_softmax_iu8ou8+0x7e6>
3400cee4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3400cee6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
3400cee8:	3301      	adds	r3, #1
3400ceea:	4293      	cmp	r3, r2
3400ceec:	930c      	str	r3, [sp, #48]	@ 0x30
3400ceee:	f10a 0a01 	add.w	sl, sl, #1
3400cef2:	f47f ae1e 	bne.w	3400cb32 <_lite_kernel_nl_softmax_iu8ou8+0x476>
3400cef6:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
3400cef8:	991d      	ldr	r1, [sp, #116]	@ 0x74
3400cefa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
3400cefc:	4411      	add	r1, r2
3400cefe:	911d      	str	r1, [sp, #116]	@ 0x74
3400cf00:	9910      	ldr	r1, [sp, #64]	@ 0x40
3400cf02:	3301      	adds	r3, #1
3400cf04:	4411      	add	r1, r2
3400cf06:	9110      	str	r1, [sp, #64]	@ 0x40
3400cf08:	991e      	ldr	r1, [sp, #120]	@ 0x78
3400cf0a:	9322      	str	r3, [sp, #136]	@ 0x88
3400cf0c:	4411      	add	r1, r2
3400cf0e:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
3400cf10:	911e      	str	r1, [sp, #120]	@ 0x78
3400cf12:	429a      	cmp	r2, r3
3400cf14:	f47f ae06 	bne.w	3400cb24 <_lite_kernel_nl_softmax_iu8ou8+0x468>
3400cf18:	b05d      	add	sp, #372	@ 0x174
3400cf1a:	ecbd 8b10 	vpop	{d8-d15}
3400cf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400cf22:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
3400cf24:	2b01      	cmp	r3, #1
3400cf26:	f47f abee 	bne.w	3400c706 <_lite_kernel_nl_softmax_iu8ou8+0x4a>
3400cf2a:	4613      	mov	r3, r2
3400cf2c:	2b00      	cmp	r3, #0
3400cf2e:	d0f3      	beq.n	3400cf18 <_lite_kernel_nl_softmax_iu8ou8+0x85c>
3400cf30:	2500      	movs	r5, #0
3400cf32:	f8dd 8074 	ldr.w	r8, [sp, #116]	@ 0x74
3400cf36:	f8dd 916c 	ldr.w	r9, [sp, #364]	@ 0x16c
3400cf3a:	4648      	mov	r0, r9
3400cf3c:	e9cd 7801 	strd	r7, r8, [sp, #4]
3400cf40:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
3400cf42:	4632      	mov	r2, r6
3400cf44:	2101      	movs	r1, #1
3400cf46:	9400      	str	r4, [sp, #0]
3400cf48:	f000 f88e 	bl	3400d068 <arm_softmax_u8>
3400cf4c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
3400cf4e:	3501      	adds	r5, #1
3400cf50:	42ab      	cmp	r3, r5
3400cf52:	44b0      	add	r8, r6
3400cf54:	44b1      	add	r9, r6
3400cf56:	d0df      	beq.n	3400cf18 <_lite_kernel_nl_softmax_iu8ou8+0x85c>
3400cf58:	e7ef      	b.n	3400cf3a <_lite_kernel_nl_softmax_iu8ou8+0x87e>
3400cf5a:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
3400cf5c:	2b01      	cmp	r3, #1
3400cf5e:	f47f abc6 	bne.w	3400c6ee <_lite_kernel_nl_softmax_iu8ou8+0x32>
3400cf62:	e7e2      	b.n	3400cf2a <_lite_kernel_nl_softmax_iu8ou8+0x86e>
3400cf64:	c3c3c3c4 	.word	0xc3c3c3c4
3400cf68:	c0000001 	.word	0xc0000001
3400cf6c:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
3400cf70:	dc6c      	bgt.n	3400d04c <_lite_kernel_nl_softmax_iu8ou8+0x990>
3400cf72:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
3400cf76:	0052      	lsls	r2, r2, #1
3400cf78:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
3400cf7c:	bfd8      	it	le
3400cf7e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
3400cf82:	e74b      	b.n	3400ce1c <_lite_kernel_nl_softmax_iu8ou8+0x760>
3400cf84:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
3400cf88:	2700      	movs	r7, #0
3400cf8a:	e6fb      	b.n	3400cd84 <_lite_kernel_nl_softmax_iu8ou8+0x6c8>
3400cf8c:	f1b6 4f60 	cmp.w	r6, #3758096384	@ 0xe0000000
3400cf90:	ea4f 0386 	mov.w	r3, r6, lsl #2
3400cf94:	f73f aeee 	bgt.w	3400cd74 <_lite_kernel_nl_softmax_iu8ou8+0x6b8>
3400cf98:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
3400cf9c:	ea90 0f02 	teq	r0, r2
3400cfa0:	d5f0      	bpl.n	3400cf84 <_lite_kernel_nl_softmax_iu8ou8+0x8c8>
3400cfa2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
3400cfa6:	17d3      	asrs	r3, r2, #31
3400cfa8:	fb03 f608 	mul.w	r6, r3, r8
3400cfac:	fba8 0102 	umull	r0, r1, r8, r2
3400cfb0:	fb02 6609 	mla	r6, r2, r9, r6
3400cfb4:	4431      	add	r1, r6
3400cfb6:	4e2a      	ldr	r6, [pc, #168]	@ (3400d060 <_lite_kernel_nl_softmax_iu8ou8+0x9a4>)
3400cfb8:	1980      	adds	r0, r0, r6
3400cfba:	f161 0100 	sbc.w	r1, r1, #0
3400cfbe:	2900      	cmp	r1, #0
3400cfc0:	da05      	bge.n	3400cfce <_lite_kernel_nl_softmax_iu8ou8+0x912>
3400cfc2:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
3400cfc6:	1986      	adds	r6, r0, r6
3400cfc8:	4630      	mov	r0, r6
3400cfca:	f141 0100 	adc.w	r1, r1, #0
3400cfce:	4606      	mov	r6, r0
3400cfd0:	460f      	mov	r7, r1
3400cfd2:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400cfd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400cfda:	4921      	ldr	r1, [pc, #132]	@ (3400d060 <_lite_kernel_nl_softmax_iu8ou8+0x9a4>)
3400cfdc:	f1c6 5600 	rsb	r6, r6, #536870912	@ 0x20000000
3400cfe0:	e6f7      	b.n	3400cdd2 <_lite_kernel_nl_softmax_iu8ou8+0x716>
3400cfe2:	2300      	movs	r3, #0
3400cfe4:	eea2 3b10 	vdup.32	q1, r3
3400cfe8:	2320      	movs	r3, #32
3400cfea:	9308      	str	r3, [sp, #32]
3400cfec:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
3400cff0:	f04f 325a 	mov.w	r2, #1515870810	@ 0x5a5a5a5a
3400cff4:	2300      	movs	r3, #0
3400cff6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
3400cffa:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
3400cffe:	4608      	mov	r0, r1
3400d000:	e9cd 8904 	strd	r8, r9, [sp, #16]
3400d004:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
3400d008:	4696      	mov	lr, r2
3400d00a:	4698      	mov	r8, r3
3400d00c:	4e15      	ldr	r6, [pc, #84]	@ (3400d064 <_lite_kernel_nl_softmax_iu8ou8+0x9a8>)
3400d00e:	e64b      	b.n	3400cca8 <_lite_kernel_nl_softmax_iu8ou8+0x5ec>
3400d010:	f1bc 0f00 	cmp.w	ip, #0
3400d014:	dde5      	ble.n	3400cfe2 <_lite_kernel_nl_softmax_iu8ou8+0x926>
3400d016:	f10c 3eff 	add.w	lr, ip, #4294967295	@ 0xffffffff
3400d01a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
3400d01e:	f10e 0e01 	add.w	lr, lr, #1
3400d022:	f04e e001 	dls	lr, lr
3400d026:	4661      	mov	r1, ip
3400d028:	2300      	movs	r3, #0
3400d02a:	f001 e801 	bfcsel	0, 3400c030 <_lite_kernel_nl_softmax_is8os8+0x6f0>, 2, eq
3400d02e:	ebaa 0001 	sub.w	r0, sl, r1
3400d032:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400d036:	ed90 7e00 	ldc	14, cr7, [r0]
3400d03a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400d03e:	fee2 3f06 	cdp2	15, 14, cr3, cr2, cr6, {0}
3400d042:	3910      	subs	r1, #16
3400d044:	b2db      	uxtb	r3, r3
3400d046:	f00f c011 	le	lr, 3400d02a <_lite_kernel_nl_softmax_iu8ou8+0x96e>
3400d04a:	e597      	b.n	3400cb7c <_lite_kernel_nl_softmax_iu8ou8+0x4c0>
3400d04c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
3400d050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400d054:	ea4f 0243 	mov.w	r2, r3, lsl #1
3400d058:	db8e      	blt.n	3400cf78 <_lite_kernel_nl_softmax_iu8ou8+0x8bc>
3400d05a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
3400d05e:	e6dd      	b.n	3400ce1c <_lite_kernel_nl_softmax_iu8ou8+0x760>
3400d060:	c0000001 	.word	0xc0000001
3400d064:	20000001 	.word	0x20000001

3400d068 <arm_softmax_u8>:
3400d068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400d06c:	b0a5      	sub	sp, #148	@ 0x94
3400d06e:	9301      	str	r3, [sp, #4]
3400d070:	1e0b      	subs	r3, r1, #0
3400d072:	9017      	str	r0, [sp, #92]	@ 0x5c
3400d074:	9219      	str	r2, [sp, #100]	@ 0x64
3400d076:	931e      	str	r3, [sp, #120]	@ 0x78
3400d078:	f340 857c 	ble.w	3400db74 <arm_softmax_u8+0xb0c>
3400d07c:	2300      	movs	r3, #0
3400d07e:	931d      	str	r3, [sp, #116]	@ 0x74
3400d080:	1e53      	subs	r3, r2, #1
3400d082:	f023 010f 	bic.w	r1, r3, #15
3400d086:	4418      	add	r0, r3
3400d088:	9322      	str	r3, [sp, #136]	@ 0x88
3400d08a:	3a02      	subs	r2, #2
3400d08c:	1c4b      	adds	r3, r1, #1
3400d08e:	f8df c458 	ldr.w	ip, [pc, #1112]	@ 3400d4e8 <arm_softmax_u8+0x480>
3400d092:	9121      	str	r1, [sp, #132]	@ 0x84
3400d094:	901b      	str	r0, [sp, #108]	@ 0x6c
3400d096:	921f      	str	r2, [sp, #124]	@ 0x7c
3400d098:	9120      	str	r1, [sp, #128]	@ 0x80
3400d09a:	9323      	str	r3, [sp, #140]	@ 0x8c
3400d09c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
3400d09e:	9919      	ldr	r1, [sp, #100]	@ 0x64
3400d0a0:	781a      	ldrb	r2, [r3, #0]
3400d0a2:	2901      	cmp	r1, #1
3400d0a4:	9200      	str	r2, [sp, #0]
3400d0a6:	f340 8649 	ble.w	3400dd3c <arm_softmax_u8+0xcd4>
3400d0aa:	991f      	ldr	r1, [sp, #124]	@ 0x7c
3400d0ac:	2916      	cmp	r1, #22
3400d0ae:	f240 8654 	bls.w	3400dd5a <arm_softmax_u8+0xcf2>
3400d0b2:	eee6 2b10 	vdup.8	q3, r2
3400d0b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
3400d0b8:	3301      	adds	r3, #1
3400d0ba:	f1a2 0e10 	sub.w	lr, r2, #16
3400d0be:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
3400d0c2:	f10e 0e01 	add.w	lr, lr, #1
3400d0c6:	f04e e001 	dls	lr, lr
3400d0ca:	461a      	mov	r2, r3
3400d0cc:	ed92 5e00 	ldc	14, cr5, [r2]
3400d0d0:	3310      	adds	r3, #16
3400d0d2:	ff06 6644 	vmax.u8	q3, q3, q2
3400d0d6:	f00f c009 	le	lr, 3400d0ca <arm_softmax_u8+0x62>
3400d0da:	eed6 2b10 	vmov.u8	r2, d6[0]
3400d0de:	eed6 3b30 	vmov.u8	r3, d6[1]
3400d0e2:	429a      	cmp	r2, r3
3400d0e4:	bf38      	it	cc
3400d0e6:	461a      	movcc	r2, r3
3400d0e8:	eed6 3b50 	vmov.u8	r3, d6[2]
3400d0ec:	4293      	cmp	r3, r2
3400d0ee:	bf38      	it	cc
3400d0f0:	4613      	movcc	r3, r2
3400d0f2:	eed6 2b70 	vmov.u8	r2, d6[3]
3400d0f6:	429a      	cmp	r2, r3
3400d0f8:	bf38      	it	cc
3400d0fa:	461a      	movcc	r2, r3
3400d0fc:	eef6 3b10 	vmov.u8	r3, d6[4]
3400d100:	4293      	cmp	r3, r2
3400d102:	bf38      	it	cc
3400d104:	4613      	movcc	r3, r2
3400d106:	eef6 2b30 	vmov.u8	r2, d6[5]
3400d10a:	429a      	cmp	r2, r3
3400d10c:	bf38      	it	cc
3400d10e:	461a      	movcc	r2, r3
3400d110:	eef6 3b50 	vmov.u8	r3, d6[6]
3400d114:	4293      	cmp	r3, r2
3400d116:	bf38      	it	cc
3400d118:	4613      	movcc	r3, r2
3400d11a:	eef6 2b70 	vmov.u8	r2, d6[7]
3400d11e:	429a      	cmp	r2, r3
3400d120:	bf38      	it	cc
3400d122:	461a      	movcc	r2, r3
3400d124:	eed7 3b10 	vmov.u8	r3, d7[0]
3400d128:	4293      	cmp	r3, r2
3400d12a:	bf38      	it	cc
3400d12c:	4613      	movcc	r3, r2
3400d12e:	eed7 2b30 	vmov.u8	r2, d7[1]
3400d132:	429a      	cmp	r2, r3
3400d134:	bf38      	it	cc
3400d136:	461a      	movcc	r2, r3
3400d138:	eed7 3b50 	vmov.u8	r3, d7[2]
3400d13c:	4293      	cmp	r3, r2
3400d13e:	bf38      	it	cc
3400d140:	4613      	movcc	r3, r2
3400d142:	eed7 2b70 	vmov.u8	r2, d7[3]
3400d146:	429a      	cmp	r2, r3
3400d148:	bf38      	it	cc
3400d14a:	461a      	movcc	r2, r3
3400d14c:	eef7 3b10 	vmov.u8	r3, d7[4]
3400d150:	4293      	cmp	r3, r2
3400d152:	bf38      	it	cc
3400d154:	4613      	movcc	r3, r2
3400d156:	eef7 2b30 	vmov.u8	r2, d7[5]
3400d15a:	429a      	cmp	r2, r3
3400d15c:	bf38      	it	cc
3400d15e:	461a      	movcc	r2, r3
3400d160:	eef7 3b50 	vmov.u8	r3, d7[6]
3400d164:	4293      	cmp	r3, r2
3400d166:	bf38      	it	cc
3400d168:	4613      	movcc	r3, r2
3400d16a:	eef7 2b70 	vmov.u8	r2, d7[7]
3400d16e:	4293      	cmp	r3, r2
3400d170:	bf38      	it	cc
3400d172:	4613      	movcc	r3, r2
3400d174:	9300      	str	r3, [sp, #0]
3400d176:	e9dd 3221 	ldrd	r3, r2, [sp, #132]	@ 0x84
3400d17a:	4293      	cmp	r3, r2
3400d17c:	d01b      	beq.n	3400d1b6 <arm_softmax_u8+0x14e>
3400d17e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
3400d180:	9917      	ldr	r1, [sp, #92]	@ 0x5c
3400d182:	1e53      	subs	r3, r2, #1
3400d184:	440b      	add	r3, r1
3400d186:	ea6f 0e03 	mvn.w	lr, r3
3400d18a:	448e      	add	lr, r1
3400d18c:	9919      	ldr	r1, [sp, #100]	@ 0x64
3400d18e:	3201      	adds	r2, #1
3400d190:	428a      	cmp	r2, r1
3400d192:	448e      	add	lr, r1
3400d194:	f300 8193 	bgt.w	3400d4be <arm_softmax_u8+0x456>
3400d198:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
3400d19c:	f000 818f 	beq.w	3400d4be <arm_softmax_u8+0x456>
3400d1a0:	f04e e001 	dls	lr, lr
3400d1a4:	9a00      	ldr	r2, [sp, #0]
3400d1a6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
3400d1aa:	428a      	cmp	r2, r1
3400d1ac:	bf38      	it	cc
3400d1ae:	460a      	movcc	r2, r1
3400d1b0:	f00f c807 	le	lr, 3400d1a6 <arm_softmax_u8+0x13e>
3400d1b4:	9200      	str	r2, [sp, #0]
3400d1b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
3400d1b8:	2200      	movs	r2, #0
3400d1ba:	2b01      	cmp	r3, #1
3400d1bc:	bfb8      	it	lt
3400d1be:	2301      	movlt	r3, #1
3400d1c0:	9304      	str	r3, [sp, #16]
3400d1c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
3400d1c4:	9205      	str	r2, [sp, #20]
3400d1c6:	3b01      	subs	r3, #1
3400d1c8:	469e      	mov	lr, r3
3400d1ca:	e087      	b.n	3400d2dc <arm_softmax_u8+0x274>
3400d1cc:	4cbe      	ldr	r4, [pc, #760]	@ (3400d4c8 <arm_softmax_u8+0x460>)
3400d1ce:	fbc0 3204 	smlal	r3, r2, r0, r4
3400d1d2:	2a00      	cmp	r2, #0
3400d1d4:	da05      	bge.n	3400d1e2 <arm_softmax_u8+0x17a>
3400d1d6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
3400d1da:	1818      	adds	r0, r3, r0
3400d1dc:	4603      	mov	r3, r0
3400d1de:	f142 0200 	adc.w	r2, r2, #0
3400d1e2:	461c      	mov	r4, r3
3400d1e4:	4615      	mov	r5, r2
3400d1e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
3400d1ea:	2200      	movs	r2, #0
3400d1ec:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d1f0:	4699      	mov	r9, r3
3400d1f2:	4615      	mov	r5, r2
3400d1f4:	f104 44e2 	add.w	r4, r4, #1895825408	@ 0x71000000
3400d1f8:	4eb4      	ldr	r6, [pc, #720]	@ (3400d4cc <arm_softmax_u8+0x464>)
3400d1fa:	f5a4 2425 	sub.w	r4, r4, #675840	@ 0xa5000
3400d1fe:	f2a4 746c 	subw	r4, r4, #1900	@ 0x76c
3400d202:	fbc4 9506 	smlal	r9, r5, r4, r6
3400d206:	46ca      	mov	sl, r9
3400d208:	46ab      	mov	fp, r5
3400d20a:	ea5a 7bef 	orrs.w	fp, sl, pc, asr #31
3400d20e:	4027      	ands	r7, r4
3400d210:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
3400d212:	4699      	mov	r9, r3
3400d214:	ea04 060a 	and.w	r6, r4, sl
3400d218:	4692      	mov	sl, r2
3400d21a:	407e      	eors	r6, r7
3400d21c:	4fac      	ldr	r7, [pc, #688]	@ (3400d4d0 <arm_softmax_u8+0x468>)
3400d21e:	ea06 0808 	and.w	r8, r6, r8
3400d222:	fbc6 9a07 	smlal	r9, sl, r6, r7
3400d226:	464c      	mov	r4, r9
3400d228:	4655      	mov	r5, sl
3400d22a:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d22e:	4021      	ands	r1, r4
3400d230:	ea81 0108 	eor.w	r1, r1, r8
3400d234:	4691      	mov	r9, r2
3400d236:	4698      	mov	r8, r3
3400d238:	4fa6      	ldr	r7, [pc, #664]	@ (3400d4d4 <arm_softmax_u8+0x46c>)
3400d23a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
3400d23c:	fbc1 8907 	smlal	r8, r9, r1, r7
3400d240:	4644      	mov	r4, r8
3400d242:	464d      	mov	r5, r9
3400d244:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d248:	4698      	mov	r8, r3
3400d24a:	4691      	mov	r9, r2
3400d24c:	400e      	ands	r6, r1
3400d24e:	9911      	ldr	r1, [sp, #68]	@ 0x44
3400d250:	4fa1      	ldr	r7, [pc, #644]	@ (3400d4d8 <arm_softmax_u8+0x470>)
3400d252:	4021      	ands	r1, r4
3400d254:	4071      	eors	r1, r6
3400d256:	fbc1 8907 	smlal	r8, r9, r1, r7
3400d25a:	4644      	mov	r4, r8
3400d25c:	464d      	mov	r5, r9
3400d25e:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d262:	4698      	mov	r8, r3
3400d264:	4691      	mov	r9, r2
3400d266:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
3400d268:	4f9c      	ldr	r7, [pc, #624]	@ (3400d4dc <arm_softmax_u8+0x474>)
3400d26a:	400e      	ands	r6, r1
3400d26c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3400d26e:	20f2      	movs	r0, #242	@ 0xf2
3400d270:	4021      	ands	r1, r4
3400d272:	4071      	eors	r1, r6
3400d274:	fbc1 8907 	smlal	r8, r9, r1, r7
3400d278:	4644      	mov	r4, r8
3400d27a:	464d      	mov	r5, r9
3400d27c:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d280:	4698      	mov	r8, r3
3400d282:	4691      	mov	r9, r2
3400d284:	9e08      	ldr	r6, [sp, #32]
3400d286:	4f96      	ldr	r7, [pc, #600]	@ (3400d4e0 <arm_softmax_u8+0x478>)
3400d288:	400e      	ands	r6, r1
3400d28a:	9910      	ldr	r1, [sp, #64]	@ 0x40
3400d28c:	4021      	ands	r1, r4
3400d28e:	4071      	eors	r1, r6
3400d290:	fbc1 8907 	smlal	r8, r9, r1, r7
3400d294:	4644      	mov	r4, r8
3400d296:	464d      	mov	r5, r9
3400d298:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d29c:	9e06      	ldr	r6, [sp, #24]
3400d29e:	400e      	ands	r6, r1
3400d2a0:	990d      	ldr	r1, [sp, #52]	@ 0x34
3400d2a2:	4021      	ands	r1, r4
3400d2a4:	4071      	eors	r1, r6
3400d2a6:	fbc1 3200 	smlal	r3, r2, r1, r0
3400d2aa:	461c      	mov	r4, r3
3400d2ac:	4615      	mov	r5, r2
3400d2ae:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d2b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3400d2b4:	4019      	ands	r1, r3
3400d2b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3400d2b8:	4023      	ands	r3, r4
3400d2ba:	404b      	eors	r3, r1
3400d2bc:	f413 6f00 	tst.w	r3, #2048	@ 0x800
3400d2c0:	ea4f 3323 	mov.w	r3, r3, asr #12
3400d2c4:	f103 0201 	add.w	r2, r3, #1
3400d2c8:	bf18      	it	ne
3400d2ca:	4613      	movne	r3, r2
3400d2cc:	9a05      	ldr	r2, [sp, #20]
3400d2ce:	441a      	add	r2, r3
3400d2d0:	9205      	str	r2, [sp, #20]
3400d2d2:	9b04      	ldr	r3, [sp, #16]
3400d2d4:	3b01      	subs	r3, #1
3400d2d6:	9304      	str	r3, [sp, #16]
3400d2d8:	f000 8181 	beq.w	3400d5de <arm_softmax_u8+0x576>
3400d2dc:	9a00      	ldr	r2, [sp, #0]
3400d2de:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
3400d2e2:	1a9b      	subs	r3, r3, r2
3400d2e4:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
3400d2e6:	429a      	cmp	r2, r3
3400d2e8:	dcf3      	bgt.n	3400d2d2 <arm_softmax_u8+0x26a>
3400d2ea:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
3400d2ec:	9801      	ldr	r0, [sp, #4]
3400d2ee:	4093      	lsls	r3, r2
3400d2f0:	ea80 0203 	eor.w	r2, r0, r3
3400d2f4:	0fd2      	lsrs	r2, r2, #31
3400d2f6:	2a00      	cmp	r2, #0
3400d2f8:	bf0b      	itete	eq
3400d2fa:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
3400d2fe:	4662      	movne	r2, ip
3400d300:	2100      	moveq	r1, #0
3400d302:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
3400d306:	fbc0 2103 	smlal	r2, r1, r0, r3
3400d30a:	2900      	cmp	r1, #0
3400d30c:	da04      	bge.n	3400d318 <arm_softmax_u8+0x2b0>
3400d30e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
3400d312:	1812      	adds	r2, r2, r0
3400d314:	f141 0100 	adc.w	r1, r1, #0
3400d318:	4690      	mov	r8, r2
3400d31a:	4689      	mov	r9, r1
3400d31c:	ea58 79ef 	orrs.w	r9, r8, pc, asr #31
3400d320:	9a01      	ldr	r2, [sp, #4]
3400d322:	46c3      	mov	fp, r8
3400d324:	429a      	cmp	r2, r3
3400d326:	f000 80e1 	beq.w	3400d4ec <arm_softmax_u8+0x484>
3400d32a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
3400d32e:	2400      	movs	r4, #0
3400d330:	f048 427f 	orr.w	r2, r8, #4278190080	@ 0xff000000
3400d334:	eba2 0808 	sub.w	r8, r2, r8
3400d338:	0152      	lsls	r2, r2, #5
3400d33a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
3400d33e:	fbc2 3402 	smlal	r3, r4, r2, r2
3400d342:	f348 6180 	sbfx	r1, r8, #26, #1
3400d346:	2c00      	cmp	r4, #0
3400d348:	f3c8 6680 	ubfx	r6, r8, #26, #1
3400d34c:	9111      	str	r1, [sp, #68]	@ 0x44
3400d34e:	da05      	bge.n	3400d35c <arm_softmax_u8+0x2f4>
3400d350:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400d354:	1859      	adds	r1, r3, r1
3400d356:	460b      	mov	r3, r1
3400d358:	f144 0400 	adc.w	r4, r4, #0
3400d35c:	4618      	mov	r0, r3
3400d35e:	4621      	mov	r1, r4
3400d360:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400d364:	fba0 9500 	umull	r9, r5, r0, r0
3400d368:	fb01 fa00 	mul.w	sl, r1, r0
3400d36c:	f119 4980 	adds.w	r9, r9, #1073741824	@ 0x40000000
3400d370:	eb45 054a 	adc.w	r5, r5, sl, lsl #1
3400d374:	2d00      	cmp	r5, #0
3400d376:	4604      	mov	r4, r0
3400d378:	460f      	mov	r7, r1
3400d37a:	4603      	mov	r3, r0
3400d37c:	da06      	bge.n	3400d38c <arm_softmax_u8+0x324>
3400d37e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400d382:	eb19 0101 	adds.w	r1, r9, r1
3400d386:	4689      	mov	r9, r1
3400d388:	f145 0500 	adc.w	r5, r5, #0
3400d38c:	1e71      	subs	r1, r6, #1
3400d38e:	f3c8 7600 	ubfx	r6, r8, #28, #1
3400d392:	f8cd 9008 	str.w	r9, [sp, #8]
3400d396:	9503      	str	r5, [sp, #12]
3400d398:	9109      	str	r1, [sp, #36]	@ 0x24
3400d39a:	1e71      	subs	r1, r6, #1
3400d39c:	9108      	str	r1, [sp, #32]
3400d39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
3400d3a2:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400d3a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
3400d3aa:	f3c8 61c0 	ubfx	r1, r8, #27, #1
3400d3ae:	3901      	subs	r1, #1
3400d3b0:	fb02 f707 	mul.w	r7, r2, r7
3400d3b4:	910a      	str	r1, [sp, #40]	@ 0x28
3400d3b6:	f3c8 7180 	ubfx	r1, r8, #30, #1
3400d3ba:	3901      	subs	r1, #1
3400d3bc:	910c      	str	r1, [sp, #48]	@ 0x30
3400d3be:	f3c8 7140 	ubfx	r1, r8, #29, #1
3400d3c2:	17d5      	asrs	r5, r2, #31
3400d3c4:	3901      	subs	r1, #1
3400d3c6:	fb04 7705 	mla	r7, r4, r5, r7
3400d3ca:	9106      	str	r1, [sp, #24]
3400d3cc:	fba2 9404 	umull	r9, r4, r2, r4
3400d3d0:	f348 7100 	sbfx	r1, r8, #28, #1
3400d3d4:	9110      	str	r1, [sp, #64]	@ 0x40
3400d3d6:	f348 7180 	sbfx	r1, r8, #30, #1
3400d3da:	910f      	str	r1, [sp, #60]	@ 0x3c
3400d3dc:	f348 6100 	sbfx	r1, r8, #24, #1
3400d3e0:	9802      	ldr	r0, [sp, #8]
3400d3e2:	910e      	str	r1, [sp, #56]	@ 0x38
3400d3e4:	f348 7140 	sbfx	r1, r8, #29, #1
3400d3e8:	f3c8 6a40 	ubfx	sl, r8, #25, #1
3400d3ec:	443c      	add	r4, r7
3400d3ee:	ea83 0502 	eor.w	r5, r3, r2
3400d3f2:	f3c8 6700 	ubfx	r7, r8, #24, #1
3400d3f6:	910d      	str	r1, [sp, #52]	@ 0x34
3400d3f8:	f348 61c0 	sbfx	r1, r8, #27, #1
3400d3fc:	910b      	str	r1, [sp, #44]	@ 0x2c
3400d3fe:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
3400d402:	f1ca 0100 	rsb	r1, sl, #0
3400d406:	0fed      	lsrs	r5, r5, #31
3400d408:	f000 0a03 	and.w	sl, r0, #3
3400d40c:	3f01      	subs	r7, #1
3400d40e:	1080      	asrs	r0, r0, #2
3400d410:	2800      	cmp	r0, #0
3400d412:	db57      	blt.n	3400d4c4 <arm_softmax_u8+0x45c>
3400d414:	2601      	movs	r6, #1
3400d416:	4556      	cmp	r6, sl
3400d418:	ea50 90a0 			@ <UNDEFINED> instruction: 0xea5090a0
3400d41c:	2d00      	cmp	r5, #0
3400d41e:	bf0b      	itete	eq
3400d420:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
3400d424:	4665      	movne	r5, ip
3400d426:	f04f 0a00 	moveq.w	sl, #0
3400d42a:	f04f 3aff 	movne.w	sl, #4294967295	@ 0xffffffff
3400d42e:	eb15 0909 	adds.w	r9, r5, r9
3400d432:	eb44 0a0a 	adc.w	sl, r4, sl
3400d436:	f1ba 0f00 	cmp.w	sl, #0
3400d43a:	da06      	bge.n	3400d44a <arm_softmax_u8+0x3e2>
3400d43c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
3400d440:	eb19 0404 	adds.w	r4, r9, r4
3400d444:	46a1      	mov	r9, r4
3400d446:	f14a 0a00 	adc.w	sl, sl, #0
3400d44a:	464c      	mov	r4, r9
3400d44c:	4655      	mov	r5, sl
3400d44e:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d452:	4420      	add	r0, r4
3400d454:	0fc4      	lsrs	r4, r0, #31
3400d456:	2c00      	cmp	r4, #0
3400d458:	bf0b      	itete	eq
3400d45a:	f04f 4980 	moveq.w	r9, #1073741824	@ 0x40000000
3400d45e:	46e1      	movne	r9, ip
3400d460:	f04f 0a00 	moveq.w	sl, #0
3400d464:	f04f 3aff 	movne.w	sl, #4294967295	@ 0xffffffff
3400d468:	4c1e      	ldr	r4, [pc, #120]	@ (3400d4e4 <arm_softmax_u8+0x47c>)
3400d46a:	fbc0 9a04 	smlal	r9, sl, r0, r4
3400d46e:	f1ba 0f00 	cmp.w	sl, #0
3400d472:	da06      	bge.n	3400d482 <arm_softmax_u8+0x41a>
3400d474:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
3400d478:	eb19 0000 	adds.w	r0, r9, r0
3400d47c:	4681      	mov	r9, r0
3400d47e:	f14a 0a00 	adc.w	sl, sl, #0
3400d482:	464c      	mov	r4, r9
3400d484:	4655      	mov	r5, sl
3400d486:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d48a:	4423      	add	r3, r4
3400d48c:	1058      	asrs	r0, r3, #1
3400d48e:	d405      	bmi.n	3400d49c <arm_softmax_u8+0x434>
3400d490:	f013 0f01 	tst.w	r3, #1
3400d494:	f100 0301 	add.w	r3, r0, #1
3400d498:	bf18      	it	ne
3400d49a:	4618      	movne	r0, r3
3400d49c:	4410      	add	r0, r2
3400d49e:	0fc3      	lsrs	r3, r0, #31
3400d4a0:	2b00      	cmp	r3, #0
3400d4a2:	bf0b      	itete	eq
3400d4a4:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
3400d4a8:	4663      	movne	r3, ip
3400d4aa:	2200      	moveq	r2, #0
3400d4ac:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
3400d4b0:	f1bb 0f00 	cmp.w	fp, #0
3400d4b4:	f47f ae8a 	bne.w	3400d1cc <arm_softmax_u8+0x164>
3400d4b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
3400d4bc:	e706      	b.n	3400d2cc <arm_softmax_u8+0x264>
3400d4be:	f04f 0e01 	mov.w	lr, #1
3400d4c2:	e66d      	b.n	3400d1a0 <arm_softmax_u8+0x138>
3400d4c4:	2602      	movs	r6, #2
3400d4c6:	e7a6      	b.n	3400d416 <arm_softmax_u8+0x3ae>
3400d4c8:	70f5a894 	.word	0x70f5a894
3400d4cc:	63afbe7b 	.word	0x63afbe7b
3400d4d0:	4da2cbf2 	.word	0x4da2cbf2
3400d4d4:	2f16ac6c 	.word	0x2f16ac6c
3400d4d8:	1152aaa4 	.word	0x1152aaa4
3400d4dc:	02582ab7 	.word	0x02582ab7
3400d4e0:	000afe11 	.word	0x000afe11
3400d4e4:	2aaaaaab 	.word	0x2aaaaaab
3400d4e8:	c0000001 	.word	0xc0000001
3400d4ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
3400d4f0:	f000 8407 	beq.w	3400dd02 <arm_softmax_u8+0xc9a>
3400d4f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
3400d4f8:	2100      	movs	r1, #0
3400d4fa:	f048 407f 	orr.w	r0, r8, #4278190080	@ 0xff000000
3400d4fe:	0142      	lsls	r2, r0, #5
3400d500:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
3400d504:	fbc2 3102 	smlal	r3, r1, r2, r2
3400d508:	eba0 0008 	sub.w	r0, r0, r8
3400d50c:	f340 6480 	sbfx	r4, r0, #26, #1
3400d510:	2900      	cmp	r1, #0
3400d512:	f3c0 6580 	ubfx	r5, r0, #26, #1
3400d516:	9411      	str	r4, [sp, #68]	@ 0x44
3400d518:	da05      	bge.n	3400d526 <arm_softmax_u8+0x4be>
3400d51a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
3400d51e:	191c      	adds	r4, r3, r4
3400d520:	4623      	mov	r3, r4
3400d522:	f141 0100 	adc.w	r1, r1, #0
3400d526:	e9cd 3102 	strd	r3, r1, [sp, #8]
3400d52a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
3400d52e:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400d532:	fb07 f806 	mul.w	r8, r7, r6
3400d536:	e9cd 6702 	strd	r6, r7, [sp, #8]
3400d53a:	4634      	mov	r4, r6
3400d53c:	fba6 6106 	umull	r6, r1, r6, r6
3400d540:	f116 4680 	adds.w	r6, r6, #1073741824	@ 0x40000000
3400d544:	eb41 0148 	adc.w	r1, r1, r8, lsl #1
3400d548:	2900      	cmp	r1, #0
3400d54a:	9b02      	ldr	r3, [sp, #8]
3400d54c:	da06      	bge.n	3400d55c <arm_softmax_u8+0x4f4>
3400d54e:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
3400d552:	eb16 0808 	adds.w	r8, r6, r8
3400d556:	4646      	mov	r6, r8
3400d558:	f141 0100 	adc.w	r1, r1, #0
3400d55c:	fb02 f707 	mul.w	r7, r2, r7
3400d560:	9602      	str	r6, [sp, #8]
3400d562:	f3c0 7600 	ubfx	r6, r0, #28, #1
3400d566:	9103      	str	r1, [sp, #12]
3400d568:	3e01      	subs	r6, #1
3400d56a:	17d1      	asrs	r1, r2, #31
3400d56c:	fb04 7101 	mla	r1, r4, r1, r7
3400d570:	9608      	str	r6, [sp, #32]
3400d572:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
3400d576:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400d57a:	e9cd 6702 	strd	r6, r7, [sp, #8]
3400d57e:	f3c0 66c0 	ubfx	r6, r0, #27, #1
3400d582:	3e01      	subs	r6, #1
3400d584:	960a      	str	r6, [sp, #40]	@ 0x28
3400d586:	f3c0 7680 	ubfx	r6, r0, #30, #1
3400d58a:	3e01      	subs	r6, #1
3400d58c:	960c      	str	r6, [sp, #48]	@ 0x30
3400d58e:	f3c0 7640 	ubfx	r6, r0, #29, #1
3400d592:	3e01      	subs	r6, #1
3400d594:	fba2 9404 	umull	r9, r4, r2, r4
3400d598:	9606      	str	r6, [sp, #24]
3400d59a:	f340 7600 	sbfx	r6, r0, #28, #1
3400d59e:	9610      	str	r6, [sp, #64]	@ 0x40
3400d5a0:	f340 7680 	sbfx	r6, r0, #30, #1
3400d5a4:	960f      	str	r6, [sp, #60]	@ 0x3c
3400d5a6:	f340 6600 	sbfx	r6, r0, #24, #1
3400d5aa:	f3c0 6700 	ubfx	r7, r0, #24, #1
3400d5ae:	440c      	add	r4, r1
3400d5b0:	960e      	str	r6, [sp, #56]	@ 0x38
3400d5b2:	f3c0 6140 	ubfx	r1, r0, #25, #1
3400d5b6:	f340 7640 	sbfx	r6, r0, #29, #1
3400d5ba:	f340 60c0 	sbfx	r0, r0, #27, #1
3400d5be:	3d01      	subs	r5, #1
3400d5c0:	900b      	str	r0, [sp, #44]	@ 0x2c
3400d5c2:	9802      	ldr	r0, [sp, #8]
3400d5c4:	9509      	str	r5, [sp, #36]	@ 0x24
3400d5c6:	ea83 0502 	eor.w	r5, r3, r2
3400d5ca:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
3400d5ce:	f000 0a03 	and.w	sl, r0, #3
3400d5d2:	0fed      	lsrs	r5, r5, #31
3400d5d4:	3f01      	subs	r7, #1
3400d5d6:	960d      	str	r6, [sp, #52]	@ 0x34
3400d5d8:	4249      	negs	r1, r1
3400d5da:	1080      	asrs	r0, r0, #2
3400d5dc:	e718      	b.n	3400d410 <arm_softmax_u8+0x3a8>
3400d5de:	9a05      	ldr	r2, [sp, #20]
3400d5e0:	2a00      	cmp	r2, #0
3400d5e2:	f000 83af 	beq.w	3400dd44 <arm_softmax_u8+0xcdc>
3400d5e6:	fab2 f382 	clz	r3, r2
3400d5ea:	fa02 f103 	lsl.w	r1, r2, r3
3400d5ee:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
3400d5f2:	f111 4000 	adds.w	r0, r1, #2147483648	@ 0x80000000
3400d5f6:	4680      	mov	r8, r0
3400d5f8:	ea4f 71e1 	mov.w	r1, r1, asr #31
3400d5fc:	f141 0900 	adc.w	r9, r1, #0
3400d600:	ea58 096f 	orrs.w	r9, r8, pc, asr #1
3400d604:	4c79      	ldr	r4, [pc, #484]	@ (3400d7ec <arm_softmax_u8+0x784>)
3400d606:	f1c8 0100 	rsb	r1, r8, #0
3400d60a:	fb04 1109 	mla	r1, r4, r9, r1
3400d60e:	fba8 5404 	umull	r5, r4, r8, r4
3400d612:	eb15 050c 	adds.w	r5, r5, ip
3400d616:	440c      	add	r4, r1
3400d618:	f164 0400 	sbc.w	r4, r4, #0
3400d61c:	f1c3 0323 	rsb	r3, r3, #35	@ 0x23
3400d620:	2c00      	cmp	r4, #0
3400d622:	9316      	str	r3, [sp, #88]	@ 0x58
3400d624:	f8cd 8014 	str.w	r8, [sp, #20]
3400d628:	da05      	bge.n	3400d636 <arm_softmax_u8+0x5ce>
3400d62a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400d62e:	1869      	adds	r1, r5, r1
3400d630:	460d      	mov	r5, r1
3400d632:	f144 0400 	adc.w	r4, r4, #0
3400d636:	4628      	mov	r0, r5
3400d638:	4621      	mov	r1, r4
3400d63a:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400d63e:	f100 305a 	add.w	r0, r0, #1515870810	@ 0x5a5a5a5a
3400d642:	fb00 f609 	mul.w	r6, r0, r9
3400d646:	17c1      	asrs	r1, r0, #31
3400d648:	fb01 6608 	mla	r6, r1, r8, r6
3400d64c:	fba0 1708 	umull	r1, r7, r0, r8
3400d650:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
3400d654:	460c      	mov	r4, r1
3400d656:	eb46 0507 	adc.w	r5, r6, r7
3400d65a:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d65e:	f1c4 5400 	rsb	r4, r4, #536870912	@ 0x20000000
3400d662:	ea80 0104 	eor.w	r1, r0, r4
3400d666:	0fc9      	lsrs	r1, r1, #31
3400d668:	2900      	cmp	r1, #0
3400d66a:	bf0b      	itete	eq
3400d66c:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
3400d670:	4666      	movne	r6, ip
3400d672:	2100      	moveq	r1, #0
3400d674:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
3400d678:	fb80 4504 	smull	r4, r5, r0, r4
3400d67c:	1934      	adds	r4, r6, r4
3400d67e:	eb41 0105 	adc.w	r1, r1, r5
3400d682:	2900      	cmp	r1, #0
3400d684:	da05      	bge.n	3400d692 <arm_softmax_u8+0x62a>
3400d686:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
3400d68a:	1965      	adds	r5, r4, r5
3400d68c:	462c      	mov	r4, r5
3400d68e:	f141 0100 	adc.w	r1, r1, #0
3400d692:	460f      	mov	r7, r1
3400d694:	4626      	mov	r6, r4
3400d696:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400d69a:	9b05      	ldr	r3, [sp, #20]
3400d69c:	eb00 0086 	add.w	r0, r0, r6, lsl #2
3400d6a0:	ea80 0103 	eor.w	r1, r0, r3
3400d6a4:	0fc9      	lsrs	r1, r1, #31
3400d6a6:	2900      	cmp	r1, #0
3400d6a8:	bf0b      	itete	eq
3400d6aa:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
3400d6ae:	4665      	movne	r5, ip
3400d6b0:	2700      	moveq	r7, #0
3400d6b2:	f04f 37ff 	movne.w	r7, #4294967295	@ 0xffffffff
3400d6b6:	fb00 f109 	mul.w	r1, r0, r9
3400d6ba:	17c4      	asrs	r4, r0, #31
3400d6bc:	fb04 1108 	mla	r1, r4, r8, r1
3400d6c0:	fba0 4608 	umull	r4, r6, r0, r8
3400d6c4:	1964      	adds	r4, r4, r5
3400d6c6:	4431      	add	r1, r6
3400d6c8:	eb41 0107 	adc.w	r1, r1, r7
3400d6cc:	2900      	cmp	r1, #0
3400d6ce:	4626      	mov	r6, r4
3400d6d0:	da05      	bge.n	3400d6de <arm_softmax_u8+0x676>
3400d6d2:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
3400d6d6:	1934      	adds	r4, r6, r4
3400d6d8:	4626      	mov	r6, r4
3400d6da:	f141 0100 	adc.w	r1, r1, #0
3400d6de:	4634      	mov	r4, r6
3400d6e0:	460d      	mov	r5, r1
3400d6e2:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d6e6:	f1c4 5400 	rsb	r4, r4, #536870912	@ 0x20000000
3400d6ea:	ea84 0100 	eor.w	r1, r4, r0
3400d6ee:	0fc9      	lsrs	r1, r1, #31
3400d6f0:	2900      	cmp	r1, #0
3400d6f2:	bf0b      	itete	eq
3400d6f4:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
3400d6f8:	4661      	movne	r1, ip
3400d6fa:	2600      	moveq	r6, #0
3400d6fc:	f04f 36ff 	movne.w	r6, #4294967295	@ 0xffffffff
3400d700:	fbc0 1604 	smlal	r1, r6, r0, r4
3400d704:	2e00      	cmp	r6, #0
3400d706:	da05      	bge.n	3400d714 <arm_softmax_u8+0x6ac>
3400d708:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
3400d70c:	190c      	adds	r4, r1, r4
3400d70e:	4621      	mov	r1, r4
3400d710:	f146 0600 	adc.w	r6, r6, #0
3400d714:	460c      	mov	r4, r1
3400d716:	4635      	mov	r5, r6
3400d718:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d71c:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
3400d720:	4621      	mov	r1, r4
3400d722:	f2c0 82c9 	blt.w	3400dcb8 <arm_softmax_u8+0xc50>
3400d726:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
3400d72a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
3400d72e:	2000      	movs	r0, #0
3400d730:	3c01      	subs	r4, #1
3400d732:	fb04 f509 	mul.w	r5, r4, r9
3400d736:	17e3      	asrs	r3, r4, #31
3400d738:	fba4 2608 	umull	r2, r6, r4, r8
3400d73c:	fb03 5508 	mla	r5, r3, r8, r5
3400d740:	1852      	adds	r2, r2, r1
3400d742:	4435      	add	r5, r6
3400d744:	eb45 0500 	adc.w	r5, r5, r0
3400d748:	2d00      	cmp	r5, #0
3400d74a:	da05      	bge.n	3400d758 <arm_softmax_u8+0x6f0>
3400d74c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400d750:	1851      	adds	r1, r2, r1
3400d752:	460a      	mov	r2, r1
3400d754:	f145 0500 	adc.w	r5, r5, #0
3400d758:	4610      	mov	r0, r2
3400d75a:	4629      	mov	r1, r5
3400d75c:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400d760:	4662      	mov	r2, ip
3400d762:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3400d766:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
3400d76a:	fb00 f303 	mul.w	r3, r0, r3
3400d76e:	17c1      	asrs	r1, r0, #31
3400d770:	fb04 3301 	mla	r3, r4, r1, r3
3400d774:	fba0 0104 	umull	r0, r1, r0, r4
3400d778:	1880      	adds	r0, r0, r2
3400d77a:	440b      	add	r3, r1
3400d77c:	eb43 0105 	adc.w	r1, r3, r5
3400d780:	2900      	cmp	r1, #0
3400d782:	da05      	bge.n	3400d790 <arm_softmax_u8+0x728>
3400d784:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400d788:	18c3      	adds	r3, r0, r3
3400d78a:	4618      	mov	r0, r3
3400d78c:	f141 0100 	adc.w	r1, r1, #0
3400d790:	460b      	mov	r3, r1
3400d792:	4602      	mov	r2, r0
3400d794:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
3400d798:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
3400d79c:	4611      	mov	r1, r2
3400d79e:	f2c0 827d 	blt.w	3400dc9c <arm_softmax_u8+0xc34>
3400d7a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400d7a6:	441c      	add	r4, r3
3400d7a8:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
3400d7ac:	ea4f 0444 	mov.w	r4, r4, lsl #1
3400d7b0:	bfb8      	it	lt
3400d7b2:	4623      	movlt	r3, r4
3400d7b4:	9315      	str	r3, [sp, #84]	@ 0x54
3400d7b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
3400d7b8:	2b00      	cmp	r3, #0
3400d7ba:	f340 81ca 	ble.w	3400db52 <arm_softmax_u8+0xaea>
3400d7be:	2301      	movs	r3, #1
3400d7c0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
3400d7c2:	f8dd e0c0 	ldr.w	lr, [sp, #192]	@ 0xc0
3400d7c6:	f102 3aff 	add.w	sl, r2, #4294967295	@ 0xffffffff
3400d7ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
3400d7cc:	46f1      	mov	r9, lr
3400d7ce:	eba2 020a 	sub.w	r2, r2, sl
3400d7d2:	9202      	str	r2, [sp, #8]
3400d7d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
3400d7d6:	f8cd a010 	str.w	sl, [sp, #16]
3400d7da:	4093      	lsls	r3, r2
3400d7dc:	3b01      	subs	r3, #1
3400d7de:	9318      	str	r3, [sp, #96]	@ 0x60
3400d7e0:	105b      	asrs	r3, r3, #1
3400d7e2:	931a      	str	r3, [sp, #104]	@ 0x68
3400d7e4:	3301      	adds	r3, #1
3400d7e6:	931c      	str	r3, [sp, #112]	@ 0x70
3400d7e8:	e1a0      	b.n	3400db2c <arm_softmax_u8+0xac4>
3400d7ea:	bf00      	nop
3400d7ec:	c3c3c3c4 	.word	0xc3c3c3c4
3400d7f0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
3400d7f2:	9901      	ldr	r1, [sp, #4]
3400d7f4:	409a      	lsls	r2, r3
3400d7f6:	ea81 0302 	eor.w	r3, r1, r2
3400d7fa:	0fdb      	lsrs	r3, r3, #31
3400d7fc:	2b00      	cmp	r3, #0
3400d7fe:	bf0b      	itete	eq
3400d800:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
3400d804:	4663      	movne	r3, ip
3400d806:	2400      	moveq	r4, #0
3400d808:	f04f 34ff 	movne.w	r4, #4294967295	@ 0xffffffff
3400d80c:	fbc1 3402 	smlal	r3, r4, r1, r2
3400d810:	2c00      	cmp	r4, #0
3400d812:	da05      	bge.n	3400d820 <arm_softmax_u8+0x7b8>
3400d814:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400d818:	1859      	adds	r1, r3, r1
3400d81a:	460b      	mov	r3, r1
3400d81c:	f144 0400 	adc.w	r4, r4, #0
3400d820:	461e      	mov	r6, r3
3400d822:	4627      	mov	r7, r4
3400d824:	9901      	ldr	r1, [sp, #4]
3400d826:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400d82a:	4291      	cmp	r1, r2
3400d82c:	f000 81ac 	beq.w	3400db88 <arm_softmax_u8+0xb20>
3400d830:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400d834:	f04f 0a00 	mov.w	sl, #0
3400d838:	fab6 f486 	clz	r4, r6
3400d83c:	f046 417f 	orr.w	r1, r6, #4278190080	@ 0xff000000
3400d840:	1b8b      	subs	r3, r1, r6
3400d842:	0149      	lsls	r1, r1, #5
3400d844:	f101 5780 	add.w	r7, r1, #268435456	@ 0x10000000
3400d848:	f3c3 7140 	ubfx	r1, r3, #29, #1
3400d84c:	fbc7 2a07 	smlal	r2, sl, r7, r7
3400d850:	f3c3 7680 	ubfx	r6, r3, #30, #1
3400d854:	9109      	str	r1, [sp, #36]	@ 0x24
3400d856:	3901      	subs	r1, #1
3400d858:	9112      	str	r1, [sp, #72]	@ 0x48
3400d85a:	0964      	lsrs	r4, r4, #5
3400d85c:	1e71      	subs	r1, r6, #1
3400d85e:	f3c3 6840 	ubfx	r8, r3, #25, #1
3400d862:	9111      	str	r1, [sp, #68]	@ 0x44
3400d864:	1e61      	subs	r1, r4, #1
3400d866:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
3400d86a:	f3c3 6e00 	ubfx	lr, r3, #24, #1
3400d86e:	9110      	str	r1, [sp, #64]	@ 0x40
3400d870:	f3c3 7100 	ubfx	r1, r3, #28, #1
3400d874:	9014      	str	r0, [sp, #80]	@ 0x50
3400d876:	9108      	str	r1, [sp, #32]
3400d878:	f10e 30ff 	add.w	r0, lr, #4294967295	@ 0xffffffff
3400d87c:	f343 7100 	sbfx	r1, r3, #28, #1
3400d880:	f1ba 0f00 	cmp.w	sl, #0
3400d884:	9013      	str	r0, [sp, #76]	@ 0x4c
3400d886:	910f      	str	r1, [sp, #60]	@ 0x3c
3400d888:	f3c3 6580 	ubfx	r5, r3, #26, #1
3400d88c:	da05      	bge.n	3400d89a <arm_softmax_u8+0x832>
3400d88e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400d892:	1851      	adds	r1, r2, r1
3400d894:	460a      	mov	r2, r1
3400d896:	f14a 0a00 	adc.w	sl, sl, #0
3400d89a:	4610      	mov	r0, r2
3400d89c:	4651      	mov	r1, sl
3400d89e:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400d8a2:	fb01 fb00 	mul.w	fp, r1, r0
3400d8a6:	4602      	mov	r2, r0
3400d8a8:	468a      	mov	sl, r1
3400d8aa:	9005      	str	r0, [sp, #20]
3400d8ac:	fba0 1000 	umull	r1, r0, r0, r0
3400d8b0:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
3400d8b4:	eb40 004b 	adc.w	r0, r0, fp, lsl #1
3400d8b8:	2800      	cmp	r0, #0
3400d8ba:	da06      	bge.n	3400d8ca <arm_softmax_u8+0x862>
3400d8bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
3400d8c0:	eb11 0b0b 	adds.w	fp, r1, fp
3400d8c4:	4659      	mov	r1, fp
3400d8c6:	f140 0000 	adc.w	r0, r0, #0
3400d8ca:	9106      	str	r1, [sp, #24]
3400d8cc:	4264      	negs	r4, r4
3400d8ce:	f1c8 0100 	rsb	r1, r8, #0
3400d8d2:	910e      	str	r1, [sp, #56]	@ 0x38
3400d8d4:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
3400d8d8:	910d      	str	r1, [sp, #52]	@ 0x34
3400d8da:	9908      	ldr	r1, [sp, #32]
3400d8dc:	fb07 fa0a 	mul.w	sl, r7, sl
3400d8e0:	3901      	subs	r1, #1
3400d8e2:	910c      	str	r1, [sp, #48]	@ 0x30
3400d8e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
3400d8e6:	f3c3 63c0 	ubfx	r3, r3, #27, #1
3400d8ea:	4249      	negs	r1, r1
3400d8ec:	9109      	str	r1, [sp, #36]	@ 0x24
3400d8ee:	4271      	negs	r1, r6
3400d8f0:	e9cd 0107 	strd	r0, r1, [sp, #28]
3400d8f4:	17f8      	asrs	r0, r7, #31
3400d8f6:	fb02 a000 	mla	r0, r2, r0, sl
3400d8fa:	fba7 2102 	umull	r2, r1, r7, r2
3400d8fe:	4401      	add	r1, r0
3400d900:	9805      	ldr	r0, [sp, #20]
3400d902:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
3400d906:	4078      	eors	r0, r7
3400d908:	f1c3 0a00 	rsb	sl, r3, #0
3400d90c:	1e6b      	subs	r3, r5, #1
3400d90e:	930b      	str	r3, [sp, #44]	@ 0x2c
3400d910:	f1ce 0b00 	rsb	fp, lr, #0
3400d914:	0fc0      	lsrs	r0, r0, #31
3400d916:	426b      	negs	r3, r5
3400d918:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
3400d91c:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400d920:	10a5      	asrs	r5, r4, #2
3400d922:	2d00      	cmp	r5, #0
3400d924:	930a      	str	r3, [sp, #40]	@ 0x28
3400d926:	f004 0303 	and.w	r3, r4, #3
3400d92a:	f2c0 812b 	blt.w	3400db84 <arm_softmax_u8+0xb1c>
3400d92e:	2601      	movs	r6, #1
3400d930:	429e      	cmp	r6, r3
3400d932:	ea55 95a5 			@ <UNDEFINED> instruction: 0xea5595a5
3400d936:	2800      	cmp	r0, #0
3400d938:	bf0b      	itete	eq
3400d93a:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
3400d93e:	4663      	movne	r3, ip
3400d940:	2000      	moveq	r0, #0
3400d942:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
3400d946:	189b      	adds	r3, r3, r2
3400d948:	eb41 0000 	adc.w	r0, r1, r0
3400d94c:	2800      	cmp	r0, #0
3400d94e:	4619      	mov	r1, r3
3400d950:	da05      	bge.n	3400d95e <arm_softmax_u8+0x8f6>
3400d952:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400d956:	18cb      	adds	r3, r1, r3
3400d958:	4619      	mov	r1, r3
3400d95a:	f140 0000 	adc.w	r0, r0, #0
3400d95e:	460a      	mov	r2, r1
3400d960:	4603      	mov	r3, r0
3400d962:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
3400d966:	4415      	add	r5, r2
3400d968:	0feb      	lsrs	r3, r5, #31
3400d96a:	2b00      	cmp	r3, #0
3400d96c:	bf0b      	itete	eq
3400d96e:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
3400d972:	4661      	movne	r1, ip
3400d974:	2000      	moveq	r0, #0
3400d976:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
3400d97a:	4bc0      	ldr	r3, [pc, #768]	@ (3400dc7c <arm_softmax_u8+0xc14>)
3400d97c:	fbc5 1003 	smlal	r1, r0, r5, r3
3400d980:	2800      	cmp	r0, #0
3400d982:	da05      	bge.n	3400d990 <arm_softmax_u8+0x928>
3400d984:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400d988:	18cb      	adds	r3, r1, r3
3400d98a:	4619      	mov	r1, r3
3400d98c:	f140 0000 	adc.w	r0, r0, #0
3400d990:	460a      	mov	r2, r1
3400d992:	4603      	mov	r3, r0
3400d994:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
3400d998:	9905      	ldr	r1, [sp, #20]
3400d99a:	4411      	add	r1, r2
3400d99c:	460b      	mov	r3, r1
3400d99e:	1049      	asrs	r1, r1, #1
3400d9a0:	d405      	bmi.n	3400d9ae <arm_softmax_u8+0x946>
3400d9a2:	f013 0f01 	tst.w	r3, #1
3400d9a6:	f101 0301 	add.w	r3, r1, #1
3400d9aa:	bf18      	it	ne
3400d9ac:	4619      	movne	r1, r3
3400d9ae:	4439      	add	r1, r7
3400d9b0:	0fcb      	lsrs	r3, r1, #31
3400d9b2:	2b00      	cmp	r3, #0
3400d9b4:	bf0b      	itete	eq
3400d9b6:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
3400d9ba:	4663      	movne	r3, ip
3400d9bc:	2200      	moveq	r2, #0
3400d9be:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
3400d9c2:	48af      	ldr	r0, [pc, #700]	@ (3400dc80 <arm_softmax_u8+0xc18>)
3400d9c4:	fbc1 3200 	smlal	r3, r2, r1, r0
3400d9c8:	2a00      	cmp	r2, #0
3400d9ca:	da05      	bge.n	3400d9d8 <arm_softmax_u8+0x970>
3400d9cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400d9d0:	1859      	adds	r1, r3, r1
3400d9d2:	460b      	mov	r3, r1
3400d9d4:	f142 0200 	adc.w	r2, r2, #0
3400d9d8:	4618      	mov	r0, r3
3400d9da:	4611      	mov	r1, r2
3400d9dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
3400d9e0:	2200      	movs	r2, #0
3400d9e2:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400d9e6:	461d      	mov	r5, r3
3400d9e8:	4696      	mov	lr, r2
3400d9ea:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
3400d9ee:	4ca5      	ldr	r4, [pc, #660]	@ (3400dc84 <arm_softmax_u8+0xc1c>)
3400d9f0:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
3400d9f4:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
3400d9f8:	fbc0 5e04 	smlal	r5, lr, r0, r4
3400d9fc:	462e      	mov	r6, r5
3400d9fe:	4677      	mov	r7, lr
3400da00:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
3400da04:	461d      	mov	r5, r3
3400da06:	4617      	mov	r7, r2
3400da08:	9913      	ldr	r1, [sp, #76]	@ 0x4c
3400da0a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
3400da0c:	4001      	ands	r1, r0
3400da0e:	ea0b 0b06 	and.w	fp, fp, r6
3400da12:	ea81 0b0b 	eor.w	fp, r1, fp
3400da16:	ea0b 0604 	and.w	r6, fp, r4
3400da1a:	4c9b      	ldr	r4, [pc, #620]	@ (3400dc88 <arm_softmax_u8+0xc20>)
3400da1c:	4696      	mov	lr, r2
3400da1e:	fbcb 5704 	smlal	r5, r7, fp, r4
3400da22:	4628      	mov	r0, r5
3400da24:	4639      	mov	r1, r7
3400da26:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400da2a:	461d      	mov	r5, r3
3400da2c:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
3400da2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
3400da30:	4007      	ands	r7, r0
3400da32:	407e      	eors	r6, r7
3400da34:	4f95      	ldr	r7, [pc, #596]	@ (3400dc8c <arm_softmax_u8+0xc24>)
3400da36:	4034      	ands	r4, r6
3400da38:	fbc6 5e07 	smlal	r5, lr, r6, r7
3400da3c:	4628      	mov	r0, r5
3400da3e:	4671      	mov	r1, lr
3400da40:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400da44:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
3400da46:	4e92      	ldr	r6, [pc, #584]	@ (3400dc90 <arm_softmax_u8+0xc28>)
3400da48:	ea05 0e00 	and.w	lr, r5, r0
3400da4c:	ea84 0e0e 	eor.w	lr, r4, lr
3400da50:	461d      	mov	r5, r3
3400da52:	4614      	mov	r4, r2
3400da54:	fbce 5406 	smlal	r5, r4, lr, r6
3400da58:	4628      	mov	r0, r5
3400da5a:	4621      	mov	r1, r4
3400da5c:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400da60:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
3400da62:	ea0e 0808 	and.w	r8, lr, r8
3400da66:	ea0a 0a00 	and.w	sl, sl, r0
3400da6a:	ea88 0a0a 	eor.w	sl, r8, sl
3400da6e:	ea0a 0604 	and.w	r6, sl, r4
3400da72:	461d      	mov	r5, r3
3400da74:	4614      	mov	r4, r2
3400da76:	4f87      	ldr	r7, [pc, #540]	@ (3400dc94 <arm_softmax_u8+0xc2c>)
3400da78:	4696      	mov	lr, r2
3400da7a:	fbca 5407 	smlal	r5, r4, sl, r7
3400da7e:	4628      	mov	r0, r5
3400da80:	4621      	mov	r1, r4
3400da82:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400da86:	461d      	mov	r5, r3
3400da88:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
3400da8a:	4f83      	ldr	r7, [pc, #524]	@ (3400dc98 <arm_softmax_u8+0xc30>)
3400da8c:	4004      	ands	r4, r0
3400da8e:	4074      	eors	r4, r6
3400da90:	fbc4 5e07 	smlal	r5, lr, r4, r7
3400da94:	4628      	mov	r0, r5
3400da96:	4671      	mov	r1, lr
3400da98:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400da9c:	25f2      	movs	r5, #242	@ 0xf2
3400da9e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
3400daa0:	4026      	ands	r6, r4
3400daa2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
3400daa4:	4004      	ands	r4, r0
3400daa6:	4074      	eors	r4, r6
3400daa8:	fbc4 3205 	smlal	r3, r2, r4, r5
3400daac:	4618      	mov	r0, r3
3400daae:	4611      	mov	r1, r2
3400dab0:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400dab4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3400dab6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
3400dab8:	401c      	ands	r4, r3
3400daba:	9b08      	ldr	r3, [sp, #32]
3400dabc:	4003      	ands	r3, r0
3400dabe:	405c      	eors	r4, r3
3400dac0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
3400dac2:	401c      	ands	r4, r3
3400dac4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
3400dac6:	405c      	eors	r4, r3
3400dac8:	ea82 0304 	eor.w	r3, r2, r4
3400dacc:	0fdb      	lsrs	r3, r3, #31
3400dace:	2b00      	cmp	r3, #0
3400dad0:	bf0b      	itete	eq
3400dad2:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
3400dad6:	4661      	movne	r1, ip
3400dad8:	2000      	moveq	r0, #0
3400dada:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
3400dade:	fbc4 1002 	smlal	r1, r0, r4, r2
3400dae2:	2800      	cmp	r0, #0
3400dae4:	da05      	bge.n	3400daf2 <arm_softmax_u8+0xa8a>
3400dae6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400daea:	18cb      	adds	r3, r1, r3
3400daec:	4619      	mov	r1, r3
3400daee:	f140 0000 	adc.w	r0, r0, #0
3400daf2:	460c      	mov	r4, r1
3400daf4:	4605      	mov	r5, r0
3400daf6:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
3400dafa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
3400dafc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
3400dafe:	fa54 f202 	asrs.w	r2, r4, r2
3400db02:	ea03 0304 	and.w	r3, r3, r4
3400db06:	d438      	bmi.n	3400db7a <arm_softmax_u8+0xb12>
3400db08:	991a      	ldr	r1, [sp, #104]	@ 0x68
3400db0a:	4299      	cmp	r1, r3
3400db0c:	da00      	bge.n	3400db10 <arm_softmax_u8+0xaa8>
3400db0e:	3201      	adds	r2, #1
3400db10:	2a00      	cmp	r2, #0
3400db12:	dd35      	ble.n	3400db80 <arm_softmax_u8+0xb18>
3400db14:	2aff      	cmp	r2, #255	@ 0xff
3400db16:	b2d2      	uxtb	r2, r2
3400db18:	bfa8      	it	ge
3400db1a:	22ff      	movge	r2, #255	@ 0xff
3400db1c:	9b02      	ldr	r3, [sp, #8]
3400db1e:	f889 2000 	strb.w	r2, [r9]
3400db22:	3b01      	subs	r3, #1
3400db24:	f109 0901 	add.w	r9, r9, #1
3400db28:	9302      	str	r3, [sp, #8]
3400db2a:	d012      	beq.n	3400db52 <arm_softmax_u8+0xaea>
3400db2c:	9b04      	ldr	r3, [sp, #16]
3400db2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
3400db32:	9304      	str	r3, [sp, #16]
3400db34:	9b00      	ldr	r3, [sp, #0]
3400db36:	1ad2      	subs	r2, r2, r3
3400db38:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
3400db3a:	4293      	cmp	r3, r2
3400db3c:	f77f ae58 	ble.w	3400d7f0 <arm_softmax_u8+0x788>
3400db40:	2300      	movs	r3, #0
3400db42:	f889 3000 	strb.w	r3, [r9]
3400db46:	9b02      	ldr	r3, [sp, #8]
3400db48:	f109 0901 	add.w	r9, r9, #1
3400db4c:	3b01      	subs	r3, #1
3400db4e:	9302      	str	r3, [sp, #8]
3400db50:	d1ec      	bne.n	3400db2c <arm_softmax_u8+0xac4>
3400db52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
3400db54:	9917      	ldr	r1, [sp, #92]	@ 0x5c
3400db56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400db58:	4411      	add	r1, r2
3400db5a:	9117      	str	r1, [sp, #92]	@ 0x5c
3400db5c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
3400db5e:	3301      	adds	r3, #1
3400db60:	4411      	add	r1, r2
3400db62:	9130      	str	r1, [sp, #192]	@ 0xc0
3400db64:	991b      	ldr	r1, [sp, #108]	@ 0x6c
3400db66:	931d      	str	r3, [sp, #116]	@ 0x74
3400db68:	4411      	add	r1, r2
3400db6a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
3400db6c:	911b      	str	r1, [sp, #108]	@ 0x6c
3400db6e:	429a      	cmp	r2, r3
3400db70:	f47f aa94 	bne.w	3400d09c <arm_softmax_u8+0x34>
3400db74:	b025      	add	sp, #148	@ 0x94
3400db76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400db7a:	991c      	ldr	r1, [sp, #112]	@ 0x70
3400db7c:	4299      	cmp	r1, r3
3400db7e:	dbc6      	blt.n	3400db0e <arm_softmax_u8+0xaa6>
3400db80:	2200      	movs	r2, #0
3400db82:	e7cb      	b.n	3400db1c <arm_softmax_u8+0xab4>
3400db84:	2602      	movs	r6, #2
3400db86:	e6d3      	b.n	3400d930 <arm_softmax_u8+0x8c8>
3400db88:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
3400db8c:	f000 809d 	beq.w	3400dcca <arm_softmax_u8+0xc62>
3400db90:	fab6 f486 	clz	r4, r6
3400db94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
3400db98:	f04f 0e00 	mov.w	lr, #0
3400db9c:	f046 417f 	orr.w	r1, r6, #4278190080	@ 0xff000000
3400dba0:	1b8b      	subs	r3, r1, r6
3400dba2:	f3c3 6b40 	ubfx	fp, r3, #25, #1
3400dba6:	0149      	lsls	r1, r1, #5
3400dba8:	f101 5780 	add.w	r7, r1, #268435456	@ 0x10000000
3400dbac:	f3c3 6600 	ubfx	r6, r3, #24, #1
3400dbb0:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
3400dbb4:	f3c3 7540 	ubfx	r5, r3, #29, #1
3400dbb8:	9114      	str	r1, [sp, #80]	@ 0x50
3400dbba:	1e71      	subs	r1, r6, #1
3400dbbc:	f3c3 7a80 	ubfx	sl, r3, #30, #1
3400dbc0:	9113      	str	r1, [sp, #76]	@ 0x4c
3400dbc2:	1e69      	subs	r1, r5, #1
3400dbc4:	fbc7 2e07 	smlal	r2, lr, r7, r7
3400dbc8:	9112      	str	r1, [sp, #72]	@ 0x48
3400dbca:	0964      	lsrs	r4, r4, #5
3400dbcc:	f10a 31ff 	add.w	r1, sl, #4294967295	@ 0xffffffff
3400dbd0:	9111      	str	r1, [sp, #68]	@ 0x44
3400dbd2:	1e61      	subs	r1, r4, #1
3400dbd4:	9110      	str	r1, [sp, #64]	@ 0x40
3400dbd6:	f3c3 7100 	ubfx	r1, r3, #28, #1
3400dbda:	9108      	str	r1, [sp, #32]
3400dbdc:	f343 7100 	sbfx	r1, r3, #28, #1
3400dbe0:	910f      	str	r1, [sp, #60]	@ 0x3c
3400dbe2:	f1be 0f00 	cmp.w	lr, #0
3400dbe6:	f3c3 6180 	ubfx	r1, r3, #26, #1
3400dbea:	910a      	str	r1, [sp, #40]	@ 0x28
3400dbec:	da05      	bge.n	3400dbfa <arm_softmax_u8+0xb92>
3400dbee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400dbf2:	1851      	adds	r1, r2, r1
3400dbf4:	460a      	mov	r2, r1
3400dbf6:	f14e 0e00 	adc.w	lr, lr, #0
3400dbfa:	4610      	mov	r0, r2
3400dbfc:	4671      	mov	r1, lr
3400dbfe:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400dc02:	fb01 f800 	mul.w	r8, r1, r0
3400dc06:	4602      	mov	r2, r0
3400dc08:	468e      	mov	lr, r1
3400dc0a:	9005      	str	r0, [sp, #20]
3400dc0c:	fba0 1000 	umull	r1, r0, r0, r0
3400dc10:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
3400dc14:	eb40 0048 	adc.w	r0, r0, r8, lsl #1
3400dc18:	2800      	cmp	r0, #0
3400dc1a:	da06      	bge.n	3400dc2a <arm_softmax_u8+0xbc2>
3400dc1c:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
3400dc20:	eb11 0808 	adds.w	r8, r1, r8
3400dc24:	4641      	mov	r1, r8
3400dc26:	f140 0000 	adc.w	r0, r0, #0
3400dc2a:	4264      	negs	r4, r4
3400dc2c:	9106      	str	r1, [sp, #24]
3400dc2e:	f1cb 0100 	rsb	r1, fp, #0
3400dc32:	910e      	str	r1, [sp, #56]	@ 0x38
3400dc34:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
3400dc38:	910d      	str	r1, [sp, #52]	@ 0x34
3400dc3a:	9908      	ldr	r1, [sp, #32]
3400dc3c:	fb07 fe0e 	mul.w	lr, r7, lr
3400dc40:	3901      	subs	r1, #1
3400dc42:	910c      	str	r1, [sp, #48]	@ 0x30
3400dc44:	4269      	negs	r1, r5
3400dc46:	9109      	str	r1, [sp, #36]	@ 0x24
3400dc48:	f1ca 0100 	rsb	r1, sl, #0
3400dc4c:	e9cd 0107 	strd	r0, r1, [sp, #28]
3400dc50:	17f8      	asrs	r0, r7, #31
3400dc52:	fb02 e000 	mla	r0, r2, r0, lr
3400dc56:	fba7 2102 	umull	r2, r1, r7, r2
3400dc5a:	f3c3 63c0 	ubfx	r3, r3, #27, #1
3400dc5e:	4401      	add	r1, r0
3400dc60:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
3400dc64:	9805      	ldr	r0, [sp, #20]
3400dc66:	f1c3 0a00 	rsb	sl, r3, #0
3400dc6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400dc6c:	4078      	eors	r0, r7
3400dc6e:	1e5c      	subs	r4, r3, #1
3400dc70:	f1c6 0b00 	rsb	fp, r6, #0
3400dc74:	0fc0      	lsrs	r0, r0, #31
3400dc76:	940b      	str	r4, [sp, #44]	@ 0x2c
3400dc78:	425b      	negs	r3, r3
3400dc7a:	e64d      	b.n	3400d918 <arm_softmax_u8+0x8b0>
3400dc7c:	2aaaaaab 	.word	0x2aaaaaab
3400dc80:	70f5a894 	.word	0x70f5a894
3400dc84:	63afbe7b 	.word	0x63afbe7b
3400dc88:	4da2cbf2 	.word	0x4da2cbf2
3400dc8c:	2f16ac6c 	.word	0x2f16ac6c
3400dc90:	1152aaa4 	.word	0x1152aaa4
3400dc94:	02582ab7 	.word	0x02582ab7
3400dc98:	000afe11 	.word	0x000afe11
3400dc9c:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
3400dca0:	dc5e      	bgt.n	3400dd60 <arm_softmax_u8+0xcf8>
3400dca2:	0063      	lsls	r3, r4, #1
3400dca4:	f104 4100 	add.w	r1, r4, #2147483648	@ 0x80000000
3400dca8:	9315      	str	r3, [sp, #84]	@ 0x54
3400dcaa:	f1b1 4f40 	cmp.w	r1, #3221225472	@ 0xc0000000
3400dcae:	bfd8      	it	le
3400dcb0:	f04f 4300 	movle.w	r3, #2147483648	@ 0x80000000
3400dcb4:	9315      	str	r3, [sp, #84]	@ 0x54
3400dcb6:	e57e      	b.n	3400d7b6 <arm_softmax_u8+0x74e>
3400dcb8:	f1b4 4f60 	cmp.w	r4, #3758096384	@ 0xe0000000
3400dcbc:	dc5b      	bgt.n	3400dd76 <arm_softmax_u8+0xd0e>
3400dcbe:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
3400dcc2:	4661      	mov	r1, ip
3400dcc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400dcc8:	e533      	b.n	3400d732 <arm_softmax_u8+0x6ca>
3400dcca:	2300      	movs	r3, #0
3400dccc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
3400dcd0:	4842      	ldr	r0, [pc, #264]	@ (3400dddc <arm_softmax_u8+0xd74>)
3400dcd2:	f44f 3500 	mov.w	r5, #131072	@ 0x20000
3400dcd6:	9005      	str	r0, [sp, #20]
3400dcd8:	469a      	mov	sl, r3
3400dcda:	469b      	mov	fp, r3
3400dcdc:	46b0      	mov	r8, r6
3400dcde:	4618      	mov	r0, r3
3400dce0:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
3400dce4:	e9cd 6610 	strd	r6, r6, [sp, #64]	@ 0x40
3400dce8:	e9cd 6612 	strd	r6, r6, [sp, #72]	@ 0x48
3400dcec:	4a3c      	ldr	r2, [pc, #240]	@ (3400dde0 <arm_softmax_u8+0xd78>)
3400dcee:	493d      	ldr	r1, [pc, #244]	@ (3400dde4 <arm_softmax_u8+0xd7c>)
3400dcf0:	4f3d      	ldr	r7, [pc, #244]	@ (3400dde8 <arm_softmax_u8+0xd80>)
3400dcf2:	9308      	str	r3, [sp, #32]
3400dcf4:	960b      	str	r6, [sp, #44]	@ 0x2c
3400dcf6:	9309      	str	r3, [sp, #36]	@ 0x24
3400dcf8:	930a      	str	r3, [sp, #40]	@ 0x28
3400dcfa:	960c      	str	r6, [sp, #48]	@ 0x30
3400dcfc:	930f      	str	r3, [sp, #60]	@ 0x3c
3400dcfe:	9614      	str	r6, [sp, #80]	@ 0x50
3400dd00:	e615      	b.n	3400d92e <arm_softmax_u8+0x8c6>
3400dd02:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3400dd06:	2100      	movs	r1, #0
3400dd08:	462f      	mov	r7, r5
3400dd0a:	46a8      	mov	r8, r5
3400dd0c:	e9cd 510c 	strd	r5, r1, [sp, #48]	@ 0x30
3400dd10:	9506      	str	r5, [sp, #24]
3400dd12:	9508      	str	r5, [sp, #32]
3400dd14:	9509      	str	r5, [sp, #36]	@ 0x24
3400dd16:	950a      	str	r5, [sp, #40]	@ 0x28
3400dd18:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
3400dd1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
3400dd20:	460d      	mov	r5, r1
3400dd22:	468a      	mov	sl, r1
3400dd24:	e9cd 110e 	strd	r1, r1, [sp, #56]	@ 0x38
3400dd28:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 3400dde0 <arm_softmax_u8+0xd78>
3400dd2c:	4c2d      	ldr	r4, [pc, #180]	@ (3400dde4 <arm_softmax_u8+0xd7c>)
3400dd2e:	4b2b      	ldr	r3, [pc, #172]	@ (3400dddc <arm_softmax_u8+0xd74>)
3400dd30:	4a2d      	ldr	r2, [pc, #180]	@ (3400dde8 <arm_softmax_u8+0xd80>)
3400dd32:	910b      	str	r1, [sp, #44]	@ 0x2c
3400dd34:	9110      	str	r1, [sp, #64]	@ 0x40
3400dd36:	9111      	str	r1, [sp, #68]	@ 0x44
3400dd38:	f7ff bb6c 	b.w	3400d414 <arm_softmax_u8+0x3ac>
3400dd3c:	f43f aa3b 	beq.w	3400d1b6 <arm_softmax_u8+0x14e>
3400dd40:	2300      	movs	r3, #0
3400dd42:	9305      	str	r3, [sp, #20]
3400dd44:	2303      	movs	r3, #3
3400dd46:	4665      	mov	r5, ip
3400dd48:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3400dd4c:	f04f 0800 	mov.w	r8, #0
3400dd50:	f04f 0900 	mov.w	r9, #0
3400dd54:	4825      	ldr	r0, [pc, #148]	@ (3400ddec <arm_softmax_u8+0xd84>)
3400dd56:	9316      	str	r3, [sp, #88]	@ 0x58
3400dd58:	e4ad      	b.n	3400d6b6 <arm_softmax_u8+0x64e>
3400dd5a:	2201      	movs	r2, #1
3400dd5c:	f7ff ba10 	b.w	3400d180 <arm_softmax_u8+0x118>
3400dd60:	eb04 0181 	add.w	r1, r4, r1, lsl #2
3400dd64:	004b      	lsls	r3, r1, #1
3400dd66:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
3400dd6a:	9315      	str	r3, [sp, #84]	@ 0x54
3400dd6c:	db9d      	blt.n	3400dcaa <arm_softmax_u8+0xc42>
3400dd6e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
3400dd72:	9315      	str	r3, [sp, #84]	@ 0x54
3400dd74:	e51f      	b.n	3400d7b6 <arm_softmax_u8+0x74e>
3400dd76:	eb00 0481 	add.w	r4, r0, r1, lsl #2
3400dd7a:	9905      	ldr	r1, [sp, #20]
3400dd7c:	17e3      	asrs	r3, r4, #31
3400dd7e:	4061      	eors	r1, r4
3400dd80:	0fc9      	lsrs	r1, r1, #31
3400dd82:	2900      	cmp	r1, #0
3400dd84:	bf0b      	itete	eq
3400dd86:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
3400dd8a:	4660      	movne	r0, ip
3400dd8c:	2600      	moveq	r6, #0
3400dd8e:	f04f 36ff 	movne.w	r6, #4294967295	@ 0xffffffff
3400dd92:	fb04 f109 	mul.w	r1, r4, r9
3400dd96:	fba4 2508 	umull	r2, r5, r4, r8
3400dd9a:	fb03 1108 	mla	r1, r3, r8, r1
3400dd9e:	1812      	adds	r2, r2, r0
3400dda0:	440d      	add	r5, r1
3400dda2:	eb45 0506 	adc.w	r5, r5, r6
3400dda6:	2d00      	cmp	r5, #0
3400dda8:	da05      	bge.n	3400ddb6 <arm_softmax_u8+0xd4e>
3400ddaa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3400ddae:	1851      	adds	r1, r2, r1
3400ddb0:	460a      	mov	r2, r1
3400ddb2:	f145 0500 	adc.w	r5, r5, #0
3400ddb6:	4629      	mov	r1, r5
3400ddb8:	4610      	mov	r0, r2
3400ddba:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
3400ddbe:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
3400ddc2:	ea84 0200 	eor.w	r2, r4, r0
3400ddc6:	0fd2      	lsrs	r2, r2, #31
3400ddc8:	2a00      	cmp	r2, #0
3400ddca:	bf0b      	itete	eq
3400ddcc:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
3400ddd0:	4662      	movne	r2, ip
3400ddd2:	2500      	moveq	r5, #0
3400ddd4:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
3400ddd8:	e4c7      	b.n	3400d76a <arm_softmax_u8+0x702>
3400ddda:	bf00      	nop
3400dddc:	01fffff8 	.word	0x01fffff8
3400dde0:	40000100 	.word	0x40000100
3400dde4:	001fffff 	.word	0x001fffff
3400dde8:	0fffffe0 	.word	0x0fffffe0
3400ddec:	b4b4b4b6 	.word	0xb4b4b4b6

3400ddf0 <__assert_func>:
3400ddf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400ddf2:	4614      	mov	r4, r2
3400ddf4:	461a      	mov	r2, r3
3400ddf6:	4b09      	ldr	r3, [pc, #36]	@ (3400de1c <__assert_func+0x2c>)
3400ddf8:	4605      	mov	r5, r0
3400ddfa:	681b      	ldr	r3, [r3, #0]
3400ddfc:	68d8      	ldr	r0, [r3, #12]
3400ddfe:	b954      	cbnz	r4, 3400de16 <__assert_func+0x26>
3400de00:	4b07      	ldr	r3, [pc, #28]	@ (3400de20 <__assert_func+0x30>)
3400de02:	461c      	mov	r4, r3
3400de04:	9100      	str	r1, [sp, #0]
3400de06:	4907      	ldr	r1, [pc, #28]	@ (3400de24 <__assert_func+0x34>)
3400de08:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400de0c:	462b      	mov	r3, r5
3400de0e:	f000 fda3 	bl	3400e958 <fiprintf>
3400de12:	f001 f9b5 	bl	3400f180 <abort>
3400de16:	4b04      	ldr	r3, [pc, #16]	@ (3400de28 <__assert_func+0x38>)
3400de18:	e7f4      	b.n	3400de04 <__assert_func+0x14>
3400de1a:	bf00      	nop
3400de1c:	3403a6a8 	.word	0x3403a6a8
3400de20:	34038f1d 	.word	0x34038f1d
3400de24:	340399e6 	.word	0x340399e6
3400de28:	340399d9 	.word	0x340399d9

3400de2c <malloc>:
3400de2c:	4b02      	ldr	r3, [pc, #8]	@ (3400de38 <malloc+0xc>)
3400de2e:	4601      	mov	r1, r0
3400de30:	6818      	ldr	r0, [r3, #0]
3400de32:	f000 b825 	b.w	3400de80 <_malloc_r>
3400de36:	bf00      	nop
3400de38:	3403a6a8 	.word	0x3403a6a8

3400de3c <sbrk_aligned>:
3400de3c:	b570      	push	{r4, r5, r6, lr}
3400de3e:	4e0f      	ldr	r6, [pc, #60]	@ (3400de7c <sbrk_aligned+0x40>)
3400de40:	460c      	mov	r4, r1
3400de42:	4605      	mov	r5, r0
3400de44:	6831      	ldr	r1, [r6, #0]
3400de46:	b911      	cbnz	r1, 3400de4e <sbrk_aligned+0x12>
3400de48:	f001 f930 	bl	3400f0ac <_sbrk_r>
3400de4c:	6030      	str	r0, [r6, #0]
3400de4e:	4621      	mov	r1, r4
3400de50:	4628      	mov	r0, r5
3400de52:	f001 f92b 	bl	3400f0ac <_sbrk_r>
3400de56:	1c43      	adds	r3, r0, #1
3400de58:	d103      	bne.n	3400de62 <sbrk_aligned+0x26>
3400de5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3400de5e:	4620      	mov	r0, r4
3400de60:	bd70      	pop	{r4, r5, r6, pc}
3400de62:	1cc4      	adds	r4, r0, #3
3400de64:	f024 0403 	bic.w	r4, r4, #3
3400de68:	42a0      	cmp	r0, r4
3400de6a:	d0f8      	beq.n	3400de5e <sbrk_aligned+0x22>
3400de6c:	1a21      	subs	r1, r4, r0
3400de6e:	4628      	mov	r0, r5
3400de70:	f001 f91c 	bl	3400f0ac <_sbrk_r>
3400de74:	3001      	adds	r0, #1
3400de76:	d1f2      	bne.n	3400de5e <sbrk_aligned+0x22>
3400de78:	e7ef      	b.n	3400de5a <sbrk_aligned+0x1e>
3400de7a:	bf00      	nop
3400de7c:	3403a980 	.word	0x3403a980

3400de80 <_malloc_r>:
3400de80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400de84:	1ccd      	adds	r5, r1, #3
3400de86:	4606      	mov	r6, r0
3400de88:	f025 0503 	bic.w	r5, r5, #3
3400de8c:	3508      	adds	r5, #8
3400de8e:	2d0c      	cmp	r5, #12
3400de90:	bf38      	it	cc
3400de92:	250c      	movcc	r5, #12
3400de94:	2d00      	cmp	r5, #0
3400de96:	db01      	blt.n	3400de9c <_malloc_r+0x1c>
3400de98:	42a9      	cmp	r1, r5
3400de9a:	d904      	bls.n	3400dea6 <_malloc_r+0x26>
3400de9c:	230c      	movs	r3, #12
3400de9e:	6033      	str	r3, [r6, #0]
3400dea0:	2000      	movs	r0, #0
3400dea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400dea6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3400df7c <_malloc_r+0xfc>
3400deaa:	f000 f869 	bl	3400df80 <__malloc_lock>
3400deae:	f8d8 3000 	ldr.w	r3, [r8]
3400deb2:	461c      	mov	r4, r3
3400deb4:	bb44      	cbnz	r4, 3400df08 <_malloc_r+0x88>
3400deb6:	4629      	mov	r1, r5
3400deb8:	4630      	mov	r0, r6
3400deba:	f7ff ffbf 	bl	3400de3c <sbrk_aligned>
3400debe:	1c43      	adds	r3, r0, #1
3400dec0:	4604      	mov	r4, r0
3400dec2:	d158      	bne.n	3400df76 <_malloc_r+0xf6>
3400dec4:	f8d8 4000 	ldr.w	r4, [r8]
3400dec8:	4627      	mov	r7, r4
3400deca:	2f00      	cmp	r7, #0
3400decc:	d143      	bne.n	3400df56 <_malloc_r+0xd6>
3400dece:	2c00      	cmp	r4, #0
3400ded0:	d04b      	beq.n	3400df6a <_malloc_r+0xea>
3400ded2:	6823      	ldr	r3, [r4, #0]
3400ded4:	4639      	mov	r1, r7
3400ded6:	4630      	mov	r0, r6
3400ded8:	eb04 0903 	add.w	r9, r4, r3
3400dedc:	f001 f8e6 	bl	3400f0ac <_sbrk_r>
3400dee0:	4581      	cmp	r9, r0
3400dee2:	d142      	bne.n	3400df6a <_malloc_r+0xea>
3400dee4:	6821      	ldr	r1, [r4, #0]
3400dee6:	4630      	mov	r0, r6
3400dee8:	1a6d      	subs	r5, r5, r1
3400deea:	4629      	mov	r1, r5
3400deec:	f7ff ffa6 	bl	3400de3c <sbrk_aligned>
3400def0:	3001      	adds	r0, #1
3400def2:	d03a      	beq.n	3400df6a <_malloc_r+0xea>
3400def4:	6823      	ldr	r3, [r4, #0]
3400def6:	442b      	add	r3, r5
3400def8:	6023      	str	r3, [r4, #0]
3400defa:	f8d8 3000 	ldr.w	r3, [r8]
3400defe:	685a      	ldr	r2, [r3, #4]
3400df00:	bb62      	cbnz	r2, 3400df5c <_malloc_r+0xdc>
3400df02:	f8c8 7000 	str.w	r7, [r8]
3400df06:	e00f      	b.n	3400df28 <_malloc_r+0xa8>
3400df08:	6822      	ldr	r2, [r4, #0]
3400df0a:	1b52      	subs	r2, r2, r5
3400df0c:	d420      	bmi.n	3400df50 <_malloc_r+0xd0>
3400df0e:	2a0b      	cmp	r2, #11
3400df10:	d917      	bls.n	3400df42 <_malloc_r+0xc2>
3400df12:	1961      	adds	r1, r4, r5
3400df14:	42a3      	cmp	r3, r4
3400df16:	6025      	str	r5, [r4, #0]
3400df18:	bf18      	it	ne
3400df1a:	6059      	strne	r1, [r3, #4]
3400df1c:	6863      	ldr	r3, [r4, #4]
3400df1e:	bf08      	it	eq
3400df20:	f8c8 1000 	streq.w	r1, [r8]
3400df24:	5162      	str	r2, [r4, r5]
3400df26:	604b      	str	r3, [r1, #4]
3400df28:	4630      	mov	r0, r6
3400df2a:	f000 f82f 	bl	3400df8c <__malloc_unlock>
3400df2e:	f104 000b 	add.w	r0, r4, #11
3400df32:	1d23      	adds	r3, r4, #4
3400df34:	f020 0007 	bic.w	r0, r0, #7
3400df38:	1ac2      	subs	r2, r0, r3
3400df3a:	bf1c      	itt	ne
3400df3c:	1a1b      	subne	r3, r3, r0
3400df3e:	50a3      	strne	r3, [r4, r2]
3400df40:	e7af      	b.n	3400dea2 <_malloc_r+0x22>
3400df42:	6862      	ldr	r2, [r4, #4]
3400df44:	42a3      	cmp	r3, r4
3400df46:	bf0c      	ite	eq
3400df48:	f8c8 2000 	streq.w	r2, [r8]
3400df4c:	605a      	strne	r2, [r3, #4]
3400df4e:	e7eb      	b.n	3400df28 <_malloc_r+0xa8>
3400df50:	4623      	mov	r3, r4
3400df52:	6864      	ldr	r4, [r4, #4]
3400df54:	e7ae      	b.n	3400deb4 <_malloc_r+0x34>
3400df56:	463c      	mov	r4, r7
3400df58:	687f      	ldr	r7, [r7, #4]
3400df5a:	e7b6      	b.n	3400deca <_malloc_r+0x4a>
3400df5c:	461a      	mov	r2, r3
3400df5e:	685b      	ldr	r3, [r3, #4]
3400df60:	42a3      	cmp	r3, r4
3400df62:	d1fb      	bne.n	3400df5c <_malloc_r+0xdc>
3400df64:	2300      	movs	r3, #0
3400df66:	6053      	str	r3, [r2, #4]
3400df68:	e7de      	b.n	3400df28 <_malloc_r+0xa8>
3400df6a:	230c      	movs	r3, #12
3400df6c:	4630      	mov	r0, r6
3400df6e:	6033      	str	r3, [r6, #0]
3400df70:	f000 f80c 	bl	3400df8c <__malloc_unlock>
3400df74:	e794      	b.n	3400dea0 <_malloc_r+0x20>
3400df76:	6005      	str	r5, [r0, #0]
3400df78:	e7d6      	b.n	3400df28 <_malloc_r+0xa8>
3400df7a:	bf00      	nop
3400df7c:	3403a984 	.word	0x3403a984

3400df80 <__malloc_lock>:
3400df80:	4801      	ldr	r0, [pc, #4]	@ (3400df88 <__malloc_lock+0x8>)
3400df82:	f001 b8e0 	b.w	3400f146 <__retarget_lock_acquire_recursive>
3400df86:	bf00      	nop
3400df88:	3403aac8 	.word	0x3403aac8

3400df8c <__malloc_unlock>:
3400df8c:	4801      	ldr	r0, [pc, #4]	@ (3400df94 <__malloc_unlock+0x8>)
3400df8e:	f001 b8db 	b.w	3400f148 <__retarget_lock_release_recursive>
3400df92:	bf00      	nop
3400df94:	3403aac8 	.word	0x3403aac8

3400df98 <__cvt>:
3400df98:	b5f0      	push	{r4, r5, r6, r7, lr}
3400df9a:	ed2d 8b02 	vpush	{d8}
3400df9e:	eeb0 8b40 	vmov.f64	d8, d0
3400dfa2:	b085      	sub	sp, #20
3400dfa4:	4617      	mov	r7, r2
3400dfa6:	460c      	mov	r4, r1
3400dfa8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3400dfaa:	ee18 2a90 	vmov	r2, s17
3400dfae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400dfb0:	f025 0520 	bic.w	r5, r5, #32
3400dfb4:	2a00      	cmp	r2, #0
3400dfb6:	bfb6      	itet	lt
3400dfb8:	222d      	movlt	r2, #45	@ 0x2d
3400dfba:	2200      	movge	r2, #0
3400dfbc:	eeb1 8b40 	vneglt.f64	d8, d0
3400dfc0:	2d46      	cmp	r5, #70	@ 0x46
3400dfc2:	701a      	strb	r2, [r3, #0]
3400dfc4:	d004      	beq.n	3400dfd0 <__cvt+0x38>
3400dfc6:	2d45      	cmp	r5, #69	@ 0x45
3400dfc8:	d100      	bne.n	3400dfcc <__cvt+0x34>
3400dfca:	3401      	adds	r4, #1
3400dfcc:	2102      	movs	r1, #2
3400dfce:	e000      	b.n	3400dfd2 <__cvt+0x3a>
3400dfd0:	2103      	movs	r1, #3
3400dfd2:	ab03      	add	r3, sp, #12
3400dfd4:	eeb0 0b48 	vmov.f64	d0, d8
3400dfd8:	4622      	mov	r2, r4
3400dfda:	9301      	str	r3, [sp, #4]
3400dfdc:	ab02      	add	r3, sp, #8
3400dfde:	9300      	str	r3, [sp, #0]
3400dfe0:	4633      	mov	r3, r6
3400dfe2:	f001 f961 	bl	3400f2a8 <_dtoa_r>
3400dfe6:	2d47      	cmp	r5, #71	@ 0x47
3400dfe8:	d114      	bne.n	3400e014 <__cvt+0x7c>
3400dfea:	07fb      	lsls	r3, r7, #31
3400dfec:	d50a      	bpl.n	3400e004 <__cvt+0x6c>
3400dfee:	1902      	adds	r2, r0, r4
3400dff0:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400dff4:	2130      	movs	r1, #48	@ 0x30
3400dff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dffa:	bf08      	it	eq
3400dffc:	9203      	streq	r2, [sp, #12]
3400dffe:	9b03      	ldr	r3, [sp, #12]
3400e000:	4293      	cmp	r3, r2
3400e002:	d319      	bcc.n	3400e038 <__cvt+0xa0>
3400e004:	9b03      	ldr	r3, [sp, #12]
3400e006:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400e008:	1a1b      	subs	r3, r3, r0
3400e00a:	6013      	str	r3, [r2, #0]
3400e00c:	b005      	add	sp, #20
3400e00e:	ecbd 8b02 	vpop	{d8}
3400e012:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400e014:	2d46      	cmp	r5, #70	@ 0x46
3400e016:	eb00 0204 	add.w	r2, r0, r4
3400e01a:	d1e9      	bne.n	3400dff0 <__cvt+0x58>
3400e01c:	7803      	ldrb	r3, [r0, #0]
3400e01e:	2b30      	cmp	r3, #48	@ 0x30
3400e020:	d107      	bne.n	3400e032 <__cvt+0x9a>
3400e022:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400e026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e02a:	bf1c      	itt	ne
3400e02c:	f1c4 0401 	rsbne	r4, r4, #1
3400e030:	6034      	strne	r4, [r6, #0]
3400e032:	6833      	ldr	r3, [r6, #0]
3400e034:	441a      	add	r2, r3
3400e036:	e7db      	b.n	3400dff0 <__cvt+0x58>
3400e038:	1c5c      	adds	r4, r3, #1
3400e03a:	9403      	str	r4, [sp, #12]
3400e03c:	7019      	strb	r1, [r3, #0]
3400e03e:	e7de      	b.n	3400dffe <__cvt+0x66>

3400e040 <__exponent>:
3400e040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400e042:	2900      	cmp	r1, #0
3400e044:	7002      	strb	r2, [r0, #0]
3400e046:	bfba      	itte	lt
3400e048:	4249      	neglt	r1, r1
3400e04a:	232d      	movlt	r3, #45	@ 0x2d
3400e04c:	232b      	movge	r3, #43	@ 0x2b
3400e04e:	2909      	cmp	r1, #9
3400e050:	7043      	strb	r3, [r0, #1]
3400e052:	dd28      	ble.n	3400e0a6 <__exponent+0x66>
3400e054:	f10d 0307 	add.w	r3, sp, #7
3400e058:	270a      	movs	r7, #10
3400e05a:	461d      	mov	r5, r3
3400e05c:	461a      	mov	r2, r3
3400e05e:	3b01      	subs	r3, #1
3400e060:	fbb1 f6f7 	udiv	r6, r1, r7
3400e064:	fb07 1416 	mls	r4, r7, r6, r1
3400e068:	3430      	adds	r4, #48	@ 0x30
3400e06a:	f802 4c01 	strb.w	r4, [r2, #-1]
3400e06e:	460c      	mov	r4, r1
3400e070:	4631      	mov	r1, r6
3400e072:	2c63      	cmp	r4, #99	@ 0x63
3400e074:	dcf2      	bgt.n	3400e05c <__exponent+0x1c>
3400e076:	3130      	adds	r1, #48	@ 0x30
3400e078:	1e94      	subs	r4, r2, #2
3400e07a:	f803 1c01 	strb.w	r1, [r3, #-1]
3400e07e:	1c41      	adds	r1, r0, #1
3400e080:	4623      	mov	r3, r4
3400e082:	42ab      	cmp	r3, r5
3400e084:	d30a      	bcc.n	3400e09c <__exponent+0x5c>
3400e086:	f10d 0309 	add.w	r3, sp, #9
3400e08a:	1a9b      	subs	r3, r3, r2
3400e08c:	42ac      	cmp	r4, r5
3400e08e:	bf88      	it	hi
3400e090:	2300      	movhi	r3, #0
3400e092:	3302      	adds	r3, #2
3400e094:	4403      	add	r3, r0
3400e096:	1a18      	subs	r0, r3, r0
3400e098:	b003      	add	sp, #12
3400e09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400e09c:	f813 6b01 	ldrb.w	r6, [r3], #1
3400e0a0:	f801 6f01 	strb.w	r6, [r1, #1]!
3400e0a4:	e7ed      	b.n	3400e082 <__exponent+0x42>
3400e0a6:	2330      	movs	r3, #48	@ 0x30
3400e0a8:	3130      	adds	r1, #48	@ 0x30
3400e0aa:	7083      	strb	r3, [r0, #2]
3400e0ac:	1d03      	adds	r3, r0, #4
3400e0ae:	70c1      	strb	r1, [r0, #3]
3400e0b0:	e7f1      	b.n	3400e096 <__exponent+0x56>
3400e0b2:	0000      	movs	r0, r0
3400e0b4:	0000      	movs	r0, r0
	...

3400e0b8 <_printf_float>:
3400e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e0bc:	b08d      	sub	sp, #52	@ 0x34
3400e0be:	460c      	mov	r4, r1
3400e0c0:	4616      	mov	r6, r2
3400e0c2:	461f      	mov	r7, r3
3400e0c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3400e0c8:	4605      	mov	r5, r0
3400e0ca:	f000 ffb7 	bl	3400f03c <_localeconv_r>
3400e0ce:	f8d0 b000 	ldr.w	fp, [r0]
3400e0d2:	4658      	mov	r0, fp
3400e0d4:	f7f2 fb5c 	bl	34000790 <strlen>
3400e0d8:	2300      	movs	r3, #0
3400e0da:	f894 9018 	ldrb.w	r9, [r4, #24]
3400e0de:	930a      	str	r3, [sp, #40]	@ 0x28
3400e0e0:	f8d8 3000 	ldr.w	r3, [r8]
3400e0e4:	6822      	ldr	r2, [r4, #0]
3400e0e6:	3307      	adds	r3, #7
3400e0e8:	9005      	str	r0, [sp, #20]
3400e0ea:	f023 0307 	bic.w	r3, r3, #7
3400e0ee:	f103 0108 	add.w	r1, r3, #8
3400e0f2:	f8c8 1000 	str.w	r1, [r8]
3400e0f6:	ed93 0b00 	vldr	d0, [r3]
3400e0fa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3400e358 <_printf_float+0x2a0>
3400e0fe:	eeb0 7bc0 	vabs.f64	d7, d0
3400e102:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3400e106:	eeb4 7b46 	vcmp.f64	d7, d6
3400e10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e10e:	dd24      	ble.n	3400e15a <_printf_float+0xa2>
3400e110:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3400e114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e118:	d502      	bpl.n	3400e120 <_printf_float+0x68>
3400e11a:	232d      	movs	r3, #45	@ 0x2d
3400e11c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e120:	498f      	ldr	r1, [pc, #572]	@ (3400e360 <_printf_float+0x2a8>)
3400e122:	4b90      	ldr	r3, [pc, #576]	@ (3400e364 <_printf_float+0x2ac>)
3400e124:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3400e128:	bf94      	ite	ls
3400e12a:	4688      	movls	r8, r1
3400e12c:	4698      	movhi	r8, r3
3400e12e:	f022 0204 	bic.w	r2, r2, #4
3400e132:	2303      	movs	r3, #3
3400e134:	f04f 0a00 	mov.w	sl, #0
3400e138:	6022      	str	r2, [r4, #0]
3400e13a:	6123      	str	r3, [r4, #16]
3400e13c:	4633      	mov	r3, r6
3400e13e:	aa0b      	add	r2, sp, #44	@ 0x2c
3400e140:	4621      	mov	r1, r4
3400e142:	4628      	mov	r0, r5
3400e144:	9700      	str	r7, [sp, #0]
3400e146:	f000 f9d1 	bl	3400e4ec <_printf_common>
3400e14a:	3001      	adds	r0, #1
3400e14c:	f040 8089 	bne.w	3400e262 <_printf_float+0x1aa>
3400e150:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e154:	b00d      	add	sp, #52	@ 0x34
3400e156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400e15a:	eeb4 0b40 	vcmp.f64	d0, d0
3400e15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e162:	d709      	bvc.n	3400e178 <_printf_float+0xc0>
3400e164:	ee10 3a90 	vmov	r3, s1
3400e168:	497f      	ldr	r1, [pc, #508]	@ (3400e368 <_printf_float+0x2b0>)
3400e16a:	2b00      	cmp	r3, #0
3400e16c:	bfbc      	itt	lt
3400e16e:	232d      	movlt	r3, #45	@ 0x2d
3400e170:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3400e174:	4b7d      	ldr	r3, [pc, #500]	@ (3400e36c <_printf_float+0x2b4>)
3400e176:	e7d5      	b.n	3400e124 <_printf_float+0x6c>
3400e178:	6863      	ldr	r3, [r4, #4]
3400e17a:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3400e17e:	1c59      	adds	r1, r3, #1
3400e180:	d139      	bne.n	3400e1f6 <_printf_float+0x13e>
3400e182:	2306      	movs	r3, #6
3400e184:	6063      	str	r3, [r4, #4]
3400e186:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3400e18a:	2300      	movs	r3, #0
3400e18c:	4628      	mov	r0, r5
3400e18e:	6022      	str	r2, [r4, #0]
3400e190:	9303      	str	r3, [sp, #12]
3400e192:	ab0a      	add	r3, sp, #40	@ 0x28
3400e194:	e9cd 9301 	strd	r9, r3, [sp, #4]
3400e198:	ab09      	add	r3, sp, #36	@ 0x24
3400e19a:	9300      	str	r3, [sp, #0]
3400e19c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3400e1a0:	6861      	ldr	r1, [r4, #4]
3400e1a2:	f7ff fef9 	bl	3400df98 <__cvt>
3400e1a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400e1aa:	4680      	mov	r8, r0
3400e1ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
3400e1ae:	d129      	bne.n	3400e204 <_printf_float+0x14c>
3400e1b0:	1cc8      	adds	r0, r1, #3
3400e1b2:	db02      	blt.n	3400e1ba <_printf_float+0x102>
3400e1b4:	6863      	ldr	r3, [r4, #4]
3400e1b6:	4299      	cmp	r1, r3
3400e1b8:	dd41      	ble.n	3400e23e <_printf_float+0x186>
3400e1ba:	f1a9 0902 	sub.w	r9, r9, #2
3400e1be:	fa5f f989 	uxtb.w	r9, r9
3400e1c2:	3901      	subs	r1, #1
3400e1c4:	464a      	mov	r2, r9
3400e1c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3400e1ca:	9109      	str	r1, [sp, #36]	@ 0x24
3400e1cc:	f7ff ff38 	bl	3400e040 <__exponent>
3400e1d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400e1d2:	4682      	mov	sl, r0
3400e1d4:	1813      	adds	r3, r2, r0
3400e1d6:	2a01      	cmp	r2, #1
3400e1d8:	6123      	str	r3, [r4, #16]
3400e1da:	dc02      	bgt.n	3400e1e2 <_printf_float+0x12a>
3400e1dc:	6822      	ldr	r2, [r4, #0]
3400e1de:	07d2      	lsls	r2, r2, #31
3400e1e0:	d501      	bpl.n	3400e1e6 <_printf_float+0x12e>
3400e1e2:	3301      	adds	r3, #1
3400e1e4:	6123      	str	r3, [r4, #16]
3400e1e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3400e1ea:	2b00      	cmp	r3, #0
3400e1ec:	d0a6      	beq.n	3400e13c <_printf_float+0x84>
3400e1ee:	232d      	movs	r3, #45	@ 0x2d
3400e1f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e1f4:	e7a2      	b.n	3400e13c <_printf_float+0x84>
3400e1f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3400e1fa:	d1c4      	bne.n	3400e186 <_printf_float+0xce>
3400e1fc:	2b00      	cmp	r3, #0
3400e1fe:	d1c2      	bne.n	3400e186 <_printf_float+0xce>
3400e200:	2301      	movs	r3, #1
3400e202:	e7bf      	b.n	3400e184 <_printf_float+0xcc>
3400e204:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400e208:	d9db      	bls.n	3400e1c2 <_printf_float+0x10a>
3400e20a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3400e20e:	d118      	bne.n	3400e242 <_printf_float+0x18a>
3400e210:	2900      	cmp	r1, #0
3400e212:	6863      	ldr	r3, [r4, #4]
3400e214:	dd0b      	ble.n	3400e22e <_printf_float+0x176>
3400e216:	6121      	str	r1, [r4, #16]
3400e218:	b913      	cbnz	r3, 3400e220 <_printf_float+0x168>
3400e21a:	6822      	ldr	r2, [r4, #0]
3400e21c:	07d0      	lsls	r0, r2, #31
3400e21e:	d502      	bpl.n	3400e226 <_printf_float+0x16e>
3400e220:	3301      	adds	r3, #1
3400e222:	440b      	add	r3, r1
3400e224:	6123      	str	r3, [r4, #16]
3400e226:	f04f 0a00 	mov.w	sl, #0
3400e22a:	65a1      	str	r1, [r4, #88]	@ 0x58
3400e22c:	e7db      	b.n	3400e1e6 <_printf_float+0x12e>
3400e22e:	b913      	cbnz	r3, 3400e236 <_printf_float+0x17e>
3400e230:	6822      	ldr	r2, [r4, #0]
3400e232:	07d2      	lsls	r2, r2, #31
3400e234:	d501      	bpl.n	3400e23a <_printf_float+0x182>
3400e236:	3302      	adds	r3, #2
3400e238:	e7f4      	b.n	3400e224 <_printf_float+0x16c>
3400e23a:	2301      	movs	r3, #1
3400e23c:	e7f2      	b.n	3400e224 <_printf_float+0x16c>
3400e23e:	f04f 0967 	mov.w	r9, #103	@ 0x67
3400e242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400e244:	4299      	cmp	r1, r3
3400e246:	db05      	blt.n	3400e254 <_printf_float+0x19c>
3400e248:	6823      	ldr	r3, [r4, #0]
3400e24a:	6121      	str	r1, [r4, #16]
3400e24c:	07d8      	lsls	r0, r3, #31
3400e24e:	d5ea      	bpl.n	3400e226 <_printf_float+0x16e>
3400e250:	1c4b      	adds	r3, r1, #1
3400e252:	e7e7      	b.n	3400e224 <_printf_float+0x16c>
3400e254:	2900      	cmp	r1, #0
3400e256:	bfd4      	ite	le
3400e258:	f1c1 0202 	rsble	r2, r1, #2
3400e25c:	2201      	movgt	r2, #1
3400e25e:	4413      	add	r3, r2
3400e260:	e7e0      	b.n	3400e224 <_printf_float+0x16c>
3400e262:	6823      	ldr	r3, [r4, #0]
3400e264:	055a      	lsls	r2, r3, #21
3400e266:	d407      	bmi.n	3400e278 <_printf_float+0x1c0>
3400e268:	6923      	ldr	r3, [r4, #16]
3400e26a:	4642      	mov	r2, r8
3400e26c:	4631      	mov	r1, r6
3400e26e:	4628      	mov	r0, r5
3400e270:	47b8      	blx	r7
3400e272:	3001      	adds	r0, #1
3400e274:	d12a      	bne.n	3400e2cc <_printf_float+0x214>
3400e276:	e76b      	b.n	3400e150 <_printf_float+0x98>
3400e278:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3400e27c:	f240 80e0 	bls.w	3400e440 <_printf_float+0x388>
3400e280:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400e284:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400e288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e28c:	d133      	bne.n	3400e2f6 <_printf_float+0x23e>
3400e28e:	2301      	movs	r3, #1
3400e290:	4a37      	ldr	r2, [pc, #220]	@ (3400e370 <_printf_float+0x2b8>)
3400e292:	4631      	mov	r1, r6
3400e294:	4628      	mov	r0, r5
3400e296:	47b8      	blx	r7
3400e298:	3001      	adds	r0, #1
3400e29a:	f43f af59 	beq.w	3400e150 <_printf_float+0x98>
3400e29e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3400e2a2:	4543      	cmp	r3, r8
3400e2a4:	db02      	blt.n	3400e2ac <_printf_float+0x1f4>
3400e2a6:	6823      	ldr	r3, [r4, #0]
3400e2a8:	07d8      	lsls	r0, r3, #31
3400e2aa:	d50f      	bpl.n	3400e2cc <_printf_float+0x214>
3400e2ac:	9b05      	ldr	r3, [sp, #20]
3400e2ae:	465a      	mov	r2, fp
3400e2b0:	4631      	mov	r1, r6
3400e2b2:	4628      	mov	r0, r5
3400e2b4:	47b8      	blx	r7
3400e2b6:	3001      	adds	r0, #1
3400e2b8:	f43f af4a 	beq.w	3400e150 <_printf_float+0x98>
3400e2bc:	f04f 0900 	mov.w	r9, #0
3400e2c0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400e2c4:	f104 0a1a 	add.w	sl, r4, #26
3400e2c8:	45c8      	cmp	r8, r9
3400e2ca:	dc09      	bgt.n	3400e2e0 <_printf_float+0x228>
3400e2cc:	6823      	ldr	r3, [r4, #0]
3400e2ce:	079b      	lsls	r3, r3, #30
3400e2d0:	f100 8107 	bmi.w	3400e4e2 <_printf_float+0x42a>
3400e2d4:	68e0      	ldr	r0, [r4, #12]
3400e2d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400e2d8:	4298      	cmp	r0, r3
3400e2da:	bfb8      	it	lt
3400e2dc:	4618      	movlt	r0, r3
3400e2de:	e739      	b.n	3400e154 <_printf_float+0x9c>
3400e2e0:	2301      	movs	r3, #1
3400e2e2:	4652      	mov	r2, sl
3400e2e4:	4631      	mov	r1, r6
3400e2e6:	4628      	mov	r0, r5
3400e2e8:	47b8      	blx	r7
3400e2ea:	3001      	adds	r0, #1
3400e2ec:	f43f af30 	beq.w	3400e150 <_printf_float+0x98>
3400e2f0:	f109 0901 	add.w	r9, r9, #1
3400e2f4:	e7e8      	b.n	3400e2c8 <_printf_float+0x210>
3400e2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e2f8:	2b00      	cmp	r3, #0
3400e2fa:	dc3b      	bgt.n	3400e374 <_printf_float+0x2bc>
3400e2fc:	2301      	movs	r3, #1
3400e2fe:	4a1c      	ldr	r2, [pc, #112]	@ (3400e370 <_printf_float+0x2b8>)
3400e300:	4631      	mov	r1, r6
3400e302:	4628      	mov	r0, r5
3400e304:	47b8      	blx	r7
3400e306:	3001      	adds	r0, #1
3400e308:	f43f af22 	beq.w	3400e150 <_printf_float+0x98>
3400e30c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3400e310:	ea59 0303 	orrs.w	r3, r9, r3
3400e314:	d102      	bne.n	3400e31c <_printf_float+0x264>
3400e316:	6823      	ldr	r3, [r4, #0]
3400e318:	07d9      	lsls	r1, r3, #31
3400e31a:	d5d7      	bpl.n	3400e2cc <_printf_float+0x214>
3400e31c:	9b05      	ldr	r3, [sp, #20]
3400e31e:	465a      	mov	r2, fp
3400e320:	4631      	mov	r1, r6
3400e322:	4628      	mov	r0, r5
3400e324:	47b8      	blx	r7
3400e326:	3001      	adds	r0, #1
3400e328:	f43f af12 	beq.w	3400e150 <_printf_float+0x98>
3400e32c:	f04f 0a00 	mov.w	sl, #0
3400e330:	f104 0b1a 	add.w	fp, r4, #26
3400e334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e336:	425b      	negs	r3, r3
3400e338:	4553      	cmp	r3, sl
3400e33a:	dc01      	bgt.n	3400e340 <_printf_float+0x288>
3400e33c:	464b      	mov	r3, r9
3400e33e:	e794      	b.n	3400e26a <_printf_float+0x1b2>
3400e340:	2301      	movs	r3, #1
3400e342:	465a      	mov	r2, fp
3400e344:	4631      	mov	r1, r6
3400e346:	4628      	mov	r0, r5
3400e348:	47b8      	blx	r7
3400e34a:	3001      	adds	r0, #1
3400e34c:	f43f af00 	beq.w	3400e150 <_printf_float+0x98>
3400e350:	f10a 0a01 	add.w	sl, sl, #1
3400e354:	e7ee      	b.n	3400e334 <_printf_float+0x27c>
3400e356:	bf00      	nop
3400e358:	ffffffff 	.word	0xffffffff
3400e35c:	7fefffff 	.word	0x7fefffff
3400e360:	34039a15 	.word	0x34039a15
3400e364:	34039a19 	.word	0x34039a19
3400e368:	34039a1d 	.word	0x34039a1d
3400e36c:	34039a21 	.word	0x34039a21
3400e370:	34039147 	.word	0x34039147
3400e374:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400e376:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3400e37a:	4553      	cmp	r3, sl
3400e37c:	bfa8      	it	ge
3400e37e:	4653      	movge	r3, sl
3400e380:	2b00      	cmp	r3, #0
3400e382:	4699      	mov	r9, r3
3400e384:	dc37      	bgt.n	3400e3f6 <_printf_float+0x33e>
3400e386:	2300      	movs	r3, #0
3400e388:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400e38c:	f104 021a 	add.w	r2, r4, #26
3400e390:	9307      	str	r3, [sp, #28]
3400e392:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3400e394:	9907      	ldr	r1, [sp, #28]
3400e396:	9306      	str	r3, [sp, #24]
3400e398:	eba3 0309 	sub.w	r3, r3, r9
3400e39c:	428b      	cmp	r3, r1
3400e39e:	dc31      	bgt.n	3400e404 <_printf_float+0x34c>
3400e3a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e3a2:	459a      	cmp	sl, r3
3400e3a4:	dc3b      	bgt.n	3400e41e <_printf_float+0x366>
3400e3a6:	6823      	ldr	r3, [r4, #0]
3400e3a8:	07da      	lsls	r2, r3, #31
3400e3aa:	d438      	bmi.n	3400e41e <_printf_float+0x366>
3400e3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e3ae:	ebaa 0903 	sub.w	r9, sl, r3
3400e3b2:	9b06      	ldr	r3, [sp, #24]
3400e3b4:	ebaa 0303 	sub.w	r3, sl, r3
3400e3b8:	4599      	cmp	r9, r3
3400e3ba:	bfa8      	it	ge
3400e3bc:	4699      	movge	r9, r3
3400e3be:	f1b9 0f00 	cmp.w	r9, #0
3400e3c2:	dc34      	bgt.n	3400e42e <_printf_float+0x376>
3400e3c4:	f04f 0800 	mov.w	r8, #0
3400e3c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3400e3cc:	f104 0b1a 	add.w	fp, r4, #26
3400e3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400e3d2:	ebaa 0303 	sub.w	r3, sl, r3
3400e3d6:	eba3 0309 	sub.w	r3, r3, r9
3400e3da:	4543      	cmp	r3, r8
3400e3dc:	f77f af76 	ble.w	3400e2cc <_printf_float+0x214>
3400e3e0:	2301      	movs	r3, #1
3400e3e2:	465a      	mov	r2, fp
3400e3e4:	4631      	mov	r1, r6
3400e3e6:	4628      	mov	r0, r5
3400e3e8:	47b8      	blx	r7
3400e3ea:	3001      	adds	r0, #1
3400e3ec:	f43f aeb0 	beq.w	3400e150 <_printf_float+0x98>
3400e3f0:	f108 0801 	add.w	r8, r8, #1
3400e3f4:	e7ec      	b.n	3400e3d0 <_printf_float+0x318>
3400e3f6:	4642      	mov	r2, r8
3400e3f8:	4631      	mov	r1, r6
3400e3fa:	4628      	mov	r0, r5
3400e3fc:	47b8      	blx	r7
3400e3fe:	3001      	adds	r0, #1
3400e400:	d1c1      	bne.n	3400e386 <_printf_float+0x2ce>
3400e402:	e6a5      	b.n	3400e150 <_printf_float+0x98>
3400e404:	2301      	movs	r3, #1
3400e406:	4631      	mov	r1, r6
3400e408:	4628      	mov	r0, r5
3400e40a:	9206      	str	r2, [sp, #24]
3400e40c:	47b8      	blx	r7
3400e40e:	3001      	adds	r0, #1
3400e410:	f43f ae9e 	beq.w	3400e150 <_printf_float+0x98>
3400e414:	9b07      	ldr	r3, [sp, #28]
3400e416:	9a06      	ldr	r2, [sp, #24]
3400e418:	3301      	adds	r3, #1
3400e41a:	9307      	str	r3, [sp, #28]
3400e41c:	e7b9      	b.n	3400e392 <_printf_float+0x2da>
3400e41e:	9b05      	ldr	r3, [sp, #20]
3400e420:	465a      	mov	r2, fp
3400e422:	4631      	mov	r1, r6
3400e424:	4628      	mov	r0, r5
3400e426:	47b8      	blx	r7
3400e428:	3001      	adds	r0, #1
3400e42a:	d1bf      	bne.n	3400e3ac <_printf_float+0x2f4>
3400e42c:	e690      	b.n	3400e150 <_printf_float+0x98>
3400e42e:	9a06      	ldr	r2, [sp, #24]
3400e430:	464b      	mov	r3, r9
3400e432:	4631      	mov	r1, r6
3400e434:	4628      	mov	r0, r5
3400e436:	4442      	add	r2, r8
3400e438:	47b8      	blx	r7
3400e43a:	3001      	adds	r0, #1
3400e43c:	d1c2      	bne.n	3400e3c4 <_printf_float+0x30c>
3400e43e:	e687      	b.n	3400e150 <_printf_float+0x98>
3400e440:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3400e444:	f1b9 0f01 	cmp.w	r9, #1
3400e448:	dc01      	bgt.n	3400e44e <_printf_float+0x396>
3400e44a:	07db      	lsls	r3, r3, #31
3400e44c:	d536      	bpl.n	3400e4bc <_printf_float+0x404>
3400e44e:	2301      	movs	r3, #1
3400e450:	4642      	mov	r2, r8
3400e452:	4631      	mov	r1, r6
3400e454:	4628      	mov	r0, r5
3400e456:	47b8      	blx	r7
3400e458:	3001      	adds	r0, #1
3400e45a:	f43f ae79 	beq.w	3400e150 <_printf_float+0x98>
3400e45e:	9b05      	ldr	r3, [sp, #20]
3400e460:	465a      	mov	r2, fp
3400e462:	4631      	mov	r1, r6
3400e464:	4628      	mov	r0, r5
3400e466:	47b8      	blx	r7
3400e468:	3001      	adds	r0, #1
3400e46a:	f43f ae71 	beq.w	3400e150 <_printf_float+0x98>
3400e46e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3400e472:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3400e476:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400e47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400e47e:	d018      	beq.n	3400e4b2 <_printf_float+0x3fa>
3400e480:	464b      	mov	r3, r9
3400e482:	f108 0201 	add.w	r2, r8, #1
3400e486:	4631      	mov	r1, r6
3400e488:	4628      	mov	r0, r5
3400e48a:	47b8      	blx	r7
3400e48c:	3001      	adds	r0, #1
3400e48e:	d10c      	bne.n	3400e4aa <_printf_float+0x3f2>
3400e490:	e65e      	b.n	3400e150 <_printf_float+0x98>
3400e492:	2301      	movs	r3, #1
3400e494:	465a      	mov	r2, fp
3400e496:	4631      	mov	r1, r6
3400e498:	4628      	mov	r0, r5
3400e49a:	47b8      	blx	r7
3400e49c:	3001      	adds	r0, #1
3400e49e:	f43f ae57 	beq.w	3400e150 <_printf_float+0x98>
3400e4a2:	f108 0801 	add.w	r8, r8, #1
3400e4a6:	45c8      	cmp	r8, r9
3400e4a8:	dbf3      	blt.n	3400e492 <_printf_float+0x3da>
3400e4aa:	4653      	mov	r3, sl
3400e4ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3400e4b0:	e6dc      	b.n	3400e26c <_printf_float+0x1b4>
3400e4b2:	f04f 0800 	mov.w	r8, #0
3400e4b6:	f104 0b1a 	add.w	fp, r4, #26
3400e4ba:	e7f4      	b.n	3400e4a6 <_printf_float+0x3ee>
3400e4bc:	2301      	movs	r3, #1
3400e4be:	4642      	mov	r2, r8
3400e4c0:	e7e1      	b.n	3400e486 <_printf_float+0x3ce>
3400e4c2:	2301      	movs	r3, #1
3400e4c4:	464a      	mov	r2, r9
3400e4c6:	4631      	mov	r1, r6
3400e4c8:	4628      	mov	r0, r5
3400e4ca:	47b8      	blx	r7
3400e4cc:	3001      	adds	r0, #1
3400e4ce:	f43f ae3f 	beq.w	3400e150 <_printf_float+0x98>
3400e4d2:	f108 0801 	add.w	r8, r8, #1
3400e4d6:	68e3      	ldr	r3, [r4, #12]
3400e4d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3400e4da:	1a5b      	subs	r3, r3, r1
3400e4dc:	4543      	cmp	r3, r8
3400e4de:	dcf0      	bgt.n	3400e4c2 <_printf_float+0x40a>
3400e4e0:	e6f8      	b.n	3400e2d4 <_printf_float+0x21c>
3400e4e2:	f04f 0800 	mov.w	r8, #0
3400e4e6:	f104 0919 	add.w	r9, r4, #25
3400e4ea:	e7f4      	b.n	3400e4d6 <_printf_float+0x41e>

3400e4ec <_printf_common>:
3400e4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400e4f0:	4616      	mov	r6, r2
3400e4f2:	4698      	mov	r8, r3
3400e4f4:	688a      	ldr	r2, [r1, #8]
3400e4f6:	4607      	mov	r7, r0
3400e4f8:	690b      	ldr	r3, [r1, #16]
3400e4fa:	460c      	mov	r4, r1
3400e4fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
3400e500:	4293      	cmp	r3, r2
3400e502:	bfb8      	it	lt
3400e504:	4613      	movlt	r3, r2
3400e506:	6033      	str	r3, [r6, #0]
3400e508:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3400e50c:	b10a      	cbz	r2, 3400e512 <_printf_common+0x26>
3400e50e:	3301      	adds	r3, #1
3400e510:	6033      	str	r3, [r6, #0]
3400e512:	6823      	ldr	r3, [r4, #0]
3400e514:	0699      	lsls	r1, r3, #26
3400e516:	bf42      	ittt	mi
3400e518:	6833      	ldrmi	r3, [r6, #0]
3400e51a:	3302      	addmi	r3, #2
3400e51c:	6033      	strmi	r3, [r6, #0]
3400e51e:	6825      	ldr	r5, [r4, #0]
3400e520:	f015 0506 	ands.w	r5, r5, #6
3400e524:	d106      	bne.n	3400e534 <_printf_common+0x48>
3400e526:	f104 0a19 	add.w	sl, r4, #25
3400e52a:	68e3      	ldr	r3, [r4, #12]
3400e52c:	6832      	ldr	r2, [r6, #0]
3400e52e:	1a9b      	subs	r3, r3, r2
3400e530:	42ab      	cmp	r3, r5
3400e532:	dc2b      	bgt.n	3400e58c <_printf_common+0xa0>
3400e534:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3400e538:	6822      	ldr	r2, [r4, #0]
3400e53a:	3b00      	subs	r3, #0
3400e53c:	bf18      	it	ne
3400e53e:	2301      	movne	r3, #1
3400e540:	0692      	lsls	r2, r2, #26
3400e542:	d430      	bmi.n	3400e5a6 <_printf_common+0xba>
3400e544:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3400e548:	4641      	mov	r1, r8
3400e54a:	4638      	mov	r0, r7
3400e54c:	47c8      	blx	r9
3400e54e:	3001      	adds	r0, #1
3400e550:	d023      	beq.n	3400e59a <_printf_common+0xae>
3400e552:	6823      	ldr	r3, [r4, #0]
3400e554:	341a      	adds	r4, #26
3400e556:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3400e55a:	f003 0306 	and.w	r3, r3, #6
3400e55e:	2b04      	cmp	r3, #4
3400e560:	bf0a      	itet	eq
3400e562:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3400e566:	2500      	movne	r5, #0
3400e568:	6833      	ldreq	r3, [r6, #0]
3400e56a:	f04f 0600 	mov.w	r6, #0
3400e56e:	bf08      	it	eq
3400e570:	1aed      	subeq	r5, r5, r3
3400e572:	f854 3c12 	ldr.w	r3, [r4, #-18]
3400e576:	bf08      	it	eq
3400e578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3400e57c:	4293      	cmp	r3, r2
3400e57e:	bfc4      	itt	gt
3400e580:	1a9b      	subgt	r3, r3, r2
3400e582:	18ed      	addgt	r5, r5, r3
3400e584:	42b5      	cmp	r5, r6
3400e586:	d11a      	bne.n	3400e5be <_printf_common+0xd2>
3400e588:	2000      	movs	r0, #0
3400e58a:	e008      	b.n	3400e59e <_printf_common+0xb2>
3400e58c:	2301      	movs	r3, #1
3400e58e:	4652      	mov	r2, sl
3400e590:	4641      	mov	r1, r8
3400e592:	4638      	mov	r0, r7
3400e594:	47c8      	blx	r9
3400e596:	3001      	adds	r0, #1
3400e598:	d103      	bne.n	3400e5a2 <_printf_common+0xb6>
3400e59a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400e5a2:	3501      	adds	r5, #1
3400e5a4:	e7c1      	b.n	3400e52a <_printf_common+0x3e>
3400e5a6:	18e1      	adds	r1, r4, r3
3400e5a8:	1c5a      	adds	r2, r3, #1
3400e5aa:	2030      	movs	r0, #48	@ 0x30
3400e5ac:	3302      	adds	r3, #2
3400e5ae:	4422      	add	r2, r4
3400e5b0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3400e5b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3400e5b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3400e5bc:	e7c2      	b.n	3400e544 <_printf_common+0x58>
3400e5be:	2301      	movs	r3, #1
3400e5c0:	4622      	mov	r2, r4
3400e5c2:	4641      	mov	r1, r8
3400e5c4:	4638      	mov	r0, r7
3400e5c6:	47c8      	blx	r9
3400e5c8:	3001      	adds	r0, #1
3400e5ca:	d0e6      	beq.n	3400e59a <_printf_common+0xae>
3400e5cc:	3601      	adds	r6, #1
3400e5ce:	e7d9      	b.n	3400e584 <_printf_common+0x98>

3400e5d0 <_printf_i>:
3400e5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3400e5d4:	7e0f      	ldrb	r7, [r1, #24]
3400e5d6:	4691      	mov	r9, r2
3400e5d8:	4680      	mov	r8, r0
3400e5da:	460c      	mov	r4, r1
3400e5dc:	2f78      	cmp	r7, #120	@ 0x78
3400e5de:	469a      	mov	sl, r3
3400e5e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400e5e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3400e5e6:	d807      	bhi.n	3400e5f8 <_printf_i+0x28>
3400e5e8:	2f62      	cmp	r7, #98	@ 0x62
3400e5ea:	d80a      	bhi.n	3400e602 <_printf_i+0x32>
3400e5ec:	2f00      	cmp	r7, #0
3400e5ee:	f000 80d2 	beq.w	3400e796 <_printf_i+0x1c6>
3400e5f2:	2f58      	cmp	r7, #88	@ 0x58
3400e5f4:	f000 80b9 	beq.w	3400e76a <_printf_i+0x19a>
3400e5f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400e5fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3400e600:	e03a      	b.n	3400e678 <_printf_i+0xa8>
3400e602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3400e606:	2b15      	cmp	r3, #21
3400e608:	d8f6      	bhi.n	3400e5f8 <_printf_i+0x28>
3400e60a:	a101      	add	r1, pc, #4	@ (adr r1, 3400e610 <_printf_i+0x40>)
3400e60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3400e610:	3400e669 	.word	0x3400e669
3400e614:	3400e67d 	.word	0x3400e67d
3400e618:	3400e5f9 	.word	0x3400e5f9
3400e61c:	3400e5f9 	.word	0x3400e5f9
3400e620:	3400e5f9 	.word	0x3400e5f9
3400e624:	3400e5f9 	.word	0x3400e5f9
3400e628:	3400e67d 	.word	0x3400e67d
3400e62c:	3400e5f9 	.word	0x3400e5f9
3400e630:	3400e5f9 	.word	0x3400e5f9
3400e634:	3400e5f9 	.word	0x3400e5f9
3400e638:	3400e5f9 	.word	0x3400e5f9
3400e63c:	3400e77d 	.word	0x3400e77d
3400e640:	3400e6a7 	.word	0x3400e6a7
3400e644:	3400e737 	.word	0x3400e737
3400e648:	3400e5f9 	.word	0x3400e5f9
3400e64c:	3400e5f9 	.word	0x3400e5f9
3400e650:	3400e79f 	.word	0x3400e79f
3400e654:	3400e5f9 	.word	0x3400e5f9
3400e658:	3400e6a7 	.word	0x3400e6a7
3400e65c:	3400e5f9 	.word	0x3400e5f9
3400e660:	3400e5f9 	.word	0x3400e5f9
3400e664:	3400e73f 	.word	0x3400e73f
3400e668:	6833      	ldr	r3, [r6, #0]
3400e66a:	1d1a      	adds	r2, r3, #4
3400e66c:	681b      	ldr	r3, [r3, #0]
3400e66e:	6032      	str	r2, [r6, #0]
3400e670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400e674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3400e678:	2301      	movs	r3, #1
3400e67a:	e09d      	b.n	3400e7b8 <_printf_i+0x1e8>
3400e67c:	6833      	ldr	r3, [r6, #0]
3400e67e:	6820      	ldr	r0, [r4, #0]
3400e680:	1d19      	adds	r1, r3, #4
3400e682:	6031      	str	r1, [r6, #0]
3400e684:	0606      	lsls	r6, r0, #24
3400e686:	d501      	bpl.n	3400e68c <_printf_i+0xbc>
3400e688:	681d      	ldr	r5, [r3, #0]
3400e68a:	e003      	b.n	3400e694 <_printf_i+0xc4>
3400e68c:	0645      	lsls	r5, r0, #25
3400e68e:	d5fb      	bpl.n	3400e688 <_printf_i+0xb8>
3400e690:	f9b3 5000 	ldrsh.w	r5, [r3]
3400e694:	2d00      	cmp	r5, #0
3400e696:	da03      	bge.n	3400e6a0 <_printf_i+0xd0>
3400e698:	232d      	movs	r3, #45	@ 0x2d
3400e69a:	426d      	negs	r5, r5
3400e69c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e6a0:	4859      	ldr	r0, [pc, #356]	@ (3400e808 <_printf_i+0x238>)
3400e6a2:	230a      	movs	r3, #10
3400e6a4:	e011      	b.n	3400e6ca <_printf_i+0xfa>
3400e6a6:	6821      	ldr	r1, [r4, #0]
3400e6a8:	6833      	ldr	r3, [r6, #0]
3400e6aa:	0608      	lsls	r0, r1, #24
3400e6ac:	f853 5b04 	ldr.w	r5, [r3], #4
3400e6b0:	d402      	bmi.n	3400e6b8 <_printf_i+0xe8>
3400e6b2:	0649      	lsls	r1, r1, #25
3400e6b4:	bf48      	it	mi
3400e6b6:	b2ad      	uxthmi	r5, r5
3400e6b8:	2f6f      	cmp	r7, #111	@ 0x6f
3400e6ba:	6033      	str	r3, [r6, #0]
3400e6bc:	4852      	ldr	r0, [pc, #328]	@ (3400e808 <_printf_i+0x238>)
3400e6be:	bf14      	ite	ne
3400e6c0:	230a      	movne	r3, #10
3400e6c2:	2308      	moveq	r3, #8
3400e6c4:	2100      	movs	r1, #0
3400e6c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3400e6ca:	6866      	ldr	r6, [r4, #4]
3400e6cc:	2e00      	cmp	r6, #0
3400e6ce:	60a6      	str	r6, [r4, #8]
3400e6d0:	bfa2      	ittt	ge
3400e6d2:	6821      	ldrge	r1, [r4, #0]
3400e6d4:	f021 0104 	bicge.w	r1, r1, #4
3400e6d8:	6021      	strge	r1, [r4, #0]
3400e6da:	b90d      	cbnz	r5, 3400e6e0 <_printf_i+0x110>
3400e6dc:	2e00      	cmp	r6, #0
3400e6de:	d04b      	beq.n	3400e778 <_printf_i+0x1a8>
3400e6e0:	4616      	mov	r6, r2
3400e6e2:	fbb5 f1f3 	udiv	r1, r5, r3
3400e6e6:	fb03 5711 	mls	r7, r3, r1, r5
3400e6ea:	5dc7      	ldrb	r7, [r0, r7]
3400e6ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
3400e6f0:	462f      	mov	r7, r5
3400e6f2:	460d      	mov	r5, r1
3400e6f4:	42bb      	cmp	r3, r7
3400e6f6:	d9f4      	bls.n	3400e6e2 <_printf_i+0x112>
3400e6f8:	2b08      	cmp	r3, #8
3400e6fa:	d10b      	bne.n	3400e714 <_printf_i+0x144>
3400e6fc:	6823      	ldr	r3, [r4, #0]
3400e6fe:	07df      	lsls	r7, r3, #31
3400e700:	d508      	bpl.n	3400e714 <_printf_i+0x144>
3400e702:	6923      	ldr	r3, [r4, #16]
3400e704:	6861      	ldr	r1, [r4, #4]
3400e706:	4299      	cmp	r1, r3
3400e708:	bfde      	ittt	le
3400e70a:	2330      	movle	r3, #48	@ 0x30
3400e70c:	f806 3c01 	strble.w	r3, [r6, #-1]
3400e710:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3400e714:	1b92      	subs	r2, r2, r6
3400e716:	6122      	str	r2, [r4, #16]
3400e718:	464b      	mov	r3, r9
3400e71a:	aa03      	add	r2, sp, #12
3400e71c:	4621      	mov	r1, r4
3400e71e:	4640      	mov	r0, r8
3400e720:	f8cd a000 	str.w	sl, [sp]
3400e724:	f7ff fee2 	bl	3400e4ec <_printf_common>
3400e728:	3001      	adds	r0, #1
3400e72a:	d14a      	bne.n	3400e7c2 <_printf_i+0x1f2>
3400e72c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400e730:	b004      	add	sp, #16
3400e732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400e736:	6823      	ldr	r3, [r4, #0]
3400e738:	f043 0320 	orr.w	r3, r3, #32
3400e73c:	6023      	str	r3, [r4, #0]
3400e73e:	2778      	movs	r7, #120	@ 0x78
3400e740:	4832      	ldr	r0, [pc, #200]	@ (3400e80c <_printf_i+0x23c>)
3400e742:	6823      	ldr	r3, [r4, #0]
3400e744:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3400e748:	061f      	lsls	r7, r3, #24
3400e74a:	6831      	ldr	r1, [r6, #0]
3400e74c:	f851 5b04 	ldr.w	r5, [r1], #4
3400e750:	d402      	bmi.n	3400e758 <_printf_i+0x188>
3400e752:	065f      	lsls	r7, r3, #25
3400e754:	bf48      	it	mi
3400e756:	b2ad      	uxthmi	r5, r5
3400e758:	6031      	str	r1, [r6, #0]
3400e75a:	07d9      	lsls	r1, r3, #31
3400e75c:	bf44      	itt	mi
3400e75e:	f043 0320 	orrmi.w	r3, r3, #32
3400e762:	6023      	strmi	r3, [r4, #0]
3400e764:	b11d      	cbz	r5, 3400e76e <_printf_i+0x19e>
3400e766:	2310      	movs	r3, #16
3400e768:	e7ac      	b.n	3400e6c4 <_printf_i+0xf4>
3400e76a:	4827      	ldr	r0, [pc, #156]	@ (3400e808 <_printf_i+0x238>)
3400e76c:	e7e9      	b.n	3400e742 <_printf_i+0x172>
3400e76e:	6823      	ldr	r3, [r4, #0]
3400e770:	f023 0320 	bic.w	r3, r3, #32
3400e774:	6023      	str	r3, [r4, #0]
3400e776:	e7f6      	b.n	3400e766 <_printf_i+0x196>
3400e778:	4616      	mov	r6, r2
3400e77a:	e7bd      	b.n	3400e6f8 <_printf_i+0x128>
3400e77c:	6833      	ldr	r3, [r6, #0]
3400e77e:	6825      	ldr	r5, [r4, #0]
3400e780:	1d18      	adds	r0, r3, #4
3400e782:	6961      	ldr	r1, [r4, #20]
3400e784:	6030      	str	r0, [r6, #0]
3400e786:	062e      	lsls	r6, r5, #24
3400e788:	681b      	ldr	r3, [r3, #0]
3400e78a:	d501      	bpl.n	3400e790 <_printf_i+0x1c0>
3400e78c:	6019      	str	r1, [r3, #0]
3400e78e:	e002      	b.n	3400e796 <_printf_i+0x1c6>
3400e790:	0668      	lsls	r0, r5, #25
3400e792:	d5fb      	bpl.n	3400e78c <_printf_i+0x1bc>
3400e794:	8019      	strh	r1, [r3, #0]
3400e796:	2300      	movs	r3, #0
3400e798:	4616      	mov	r6, r2
3400e79a:	6123      	str	r3, [r4, #16]
3400e79c:	e7bc      	b.n	3400e718 <_printf_i+0x148>
3400e79e:	6833      	ldr	r3, [r6, #0]
3400e7a0:	2100      	movs	r1, #0
3400e7a2:	1d1a      	adds	r2, r3, #4
3400e7a4:	6032      	str	r2, [r6, #0]
3400e7a6:	681e      	ldr	r6, [r3, #0]
3400e7a8:	6862      	ldr	r2, [r4, #4]
3400e7aa:	4630      	mov	r0, r6
3400e7ac:	f000 fccd 	bl	3400f14a <memchr>
3400e7b0:	b108      	cbz	r0, 3400e7b6 <_printf_i+0x1e6>
3400e7b2:	1b80      	subs	r0, r0, r6
3400e7b4:	6060      	str	r0, [r4, #4]
3400e7b6:	6863      	ldr	r3, [r4, #4]
3400e7b8:	6123      	str	r3, [r4, #16]
3400e7ba:	2300      	movs	r3, #0
3400e7bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400e7c0:	e7aa      	b.n	3400e718 <_printf_i+0x148>
3400e7c2:	6923      	ldr	r3, [r4, #16]
3400e7c4:	4632      	mov	r2, r6
3400e7c6:	4649      	mov	r1, r9
3400e7c8:	4640      	mov	r0, r8
3400e7ca:	47d0      	blx	sl
3400e7cc:	3001      	adds	r0, #1
3400e7ce:	d0ad      	beq.n	3400e72c <_printf_i+0x15c>
3400e7d0:	6823      	ldr	r3, [r4, #0]
3400e7d2:	079b      	lsls	r3, r3, #30
3400e7d4:	d413      	bmi.n	3400e7fe <_printf_i+0x22e>
3400e7d6:	68e0      	ldr	r0, [r4, #12]
3400e7d8:	9b03      	ldr	r3, [sp, #12]
3400e7da:	4298      	cmp	r0, r3
3400e7dc:	bfb8      	it	lt
3400e7de:	4618      	movlt	r0, r3
3400e7e0:	e7a6      	b.n	3400e730 <_printf_i+0x160>
3400e7e2:	2301      	movs	r3, #1
3400e7e4:	4632      	mov	r2, r6
3400e7e6:	4649      	mov	r1, r9
3400e7e8:	4640      	mov	r0, r8
3400e7ea:	47d0      	blx	sl
3400e7ec:	3001      	adds	r0, #1
3400e7ee:	d09d      	beq.n	3400e72c <_printf_i+0x15c>
3400e7f0:	3501      	adds	r5, #1
3400e7f2:	68e3      	ldr	r3, [r4, #12]
3400e7f4:	9903      	ldr	r1, [sp, #12]
3400e7f6:	1a5b      	subs	r3, r3, r1
3400e7f8:	42ab      	cmp	r3, r5
3400e7fa:	dcf2      	bgt.n	3400e7e2 <_printf_i+0x212>
3400e7fc:	e7eb      	b.n	3400e7d6 <_printf_i+0x206>
3400e7fe:	2500      	movs	r5, #0
3400e800:	f104 0619 	add.w	r6, r4, #25
3400e804:	e7f5      	b.n	3400e7f2 <_printf_i+0x222>
3400e806:	bf00      	nop
3400e808:	34039a25 	.word	0x34039a25
3400e80c:	34039a36 	.word	0x34039a36

3400e810 <std>:
3400e810:	2300      	movs	r3, #0
3400e812:	b510      	push	{r4, lr}
3400e814:	4604      	mov	r4, r0
3400e816:	6083      	str	r3, [r0, #8]
3400e818:	8181      	strh	r1, [r0, #12]
3400e81a:	4619      	mov	r1, r3
3400e81c:	6643      	str	r3, [r0, #100]	@ 0x64
3400e81e:	81c2      	strh	r2, [r0, #14]
3400e820:	2208      	movs	r2, #8
3400e822:	6183      	str	r3, [r0, #24]
3400e824:	e9c0 3300 	strd	r3, r3, [r0]
3400e828:	e9c0 3304 	strd	r3, r3, [r0, #16]
3400e82c:	305c      	adds	r0, #92	@ 0x5c
3400e82e:	f000 fa0b 	bl	3400ec48 <memset>
3400e832:	4b0d      	ldr	r3, [pc, #52]	@ (3400e868 <std+0x58>)
3400e834:	6224      	str	r4, [r4, #32]
3400e836:	6263      	str	r3, [r4, #36]	@ 0x24
3400e838:	4b0c      	ldr	r3, [pc, #48]	@ (3400e86c <std+0x5c>)
3400e83a:	62a3      	str	r3, [r4, #40]	@ 0x28
3400e83c:	4b0c      	ldr	r3, [pc, #48]	@ (3400e870 <std+0x60>)
3400e83e:	62e3      	str	r3, [r4, #44]	@ 0x2c
3400e840:	4b0c      	ldr	r3, [pc, #48]	@ (3400e874 <std+0x64>)
3400e842:	6323      	str	r3, [r4, #48]	@ 0x30
3400e844:	4b0c      	ldr	r3, [pc, #48]	@ (3400e878 <std+0x68>)
3400e846:	429c      	cmp	r4, r3
3400e848:	d006      	beq.n	3400e858 <std+0x48>
3400e84a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3400e84e:	4294      	cmp	r4, r2
3400e850:	d002      	beq.n	3400e858 <std+0x48>
3400e852:	33d0      	adds	r3, #208	@ 0xd0
3400e854:	429c      	cmp	r4, r3
3400e856:	d105      	bne.n	3400e864 <std+0x54>
3400e858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3400e85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e860:	f000 bc70 	b.w	3400f144 <__retarget_lock_init_recursive>
3400e864:	bd10      	pop	{r4, pc}
3400e866:	bf00      	nop
3400e868:	3400ea99 	.word	0x3400ea99
3400e86c:	3400eabb 	.word	0x3400eabb
3400e870:	3400eaf3 	.word	0x3400eaf3
3400e874:	3400eb17 	.word	0x3400eb17
3400e878:	3403a988 	.word	0x3403a988

3400e87c <stdio_exit_handler>:
3400e87c:	4a02      	ldr	r2, [pc, #8]	@ (3400e888 <stdio_exit_handler+0xc>)
3400e87e:	4903      	ldr	r1, [pc, #12]	@ (3400e88c <stdio_exit_handler+0x10>)
3400e880:	4803      	ldr	r0, [pc, #12]	@ (3400e890 <stdio_exit_handler+0x14>)
3400e882:	f000 b87b 	b.w	3400e97c <_fwalk_sglue>
3400e886:	bf00      	nop
3400e888:	3403a69c 	.word	0x3403a69c
3400e88c:	34010885 	.word	0x34010885
3400e890:	3403a6ac 	.word	0x3403a6ac

3400e894 <cleanup_stdio>:
3400e894:	6841      	ldr	r1, [r0, #4]
3400e896:	4b0c      	ldr	r3, [pc, #48]	@ (3400e8c8 <cleanup_stdio+0x34>)
3400e898:	4299      	cmp	r1, r3
3400e89a:	b510      	push	{r4, lr}
3400e89c:	4604      	mov	r4, r0
3400e89e:	d001      	beq.n	3400e8a4 <cleanup_stdio+0x10>
3400e8a0:	f001 fff0 	bl	34010884 <_fflush_r>
3400e8a4:	68a1      	ldr	r1, [r4, #8]
3400e8a6:	4b09      	ldr	r3, [pc, #36]	@ (3400e8cc <cleanup_stdio+0x38>)
3400e8a8:	4299      	cmp	r1, r3
3400e8aa:	d002      	beq.n	3400e8b2 <cleanup_stdio+0x1e>
3400e8ac:	4620      	mov	r0, r4
3400e8ae:	f001 ffe9 	bl	34010884 <_fflush_r>
3400e8b2:	68e1      	ldr	r1, [r4, #12]
3400e8b4:	4b06      	ldr	r3, [pc, #24]	@ (3400e8d0 <cleanup_stdio+0x3c>)
3400e8b6:	4299      	cmp	r1, r3
3400e8b8:	d004      	beq.n	3400e8c4 <cleanup_stdio+0x30>
3400e8ba:	4620      	mov	r0, r4
3400e8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e8c0:	f001 bfe0 	b.w	34010884 <_fflush_r>
3400e8c4:	bd10      	pop	{r4, pc}
3400e8c6:	bf00      	nop
3400e8c8:	3403a988 	.word	0x3403a988
3400e8cc:	3403a9f0 	.word	0x3403a9f0
3400e8d0:	3403aa58 	.word	0x3403aa58

3400e8d4 <global_stdio_init.part.0>:
3400e8d4:	b510      	push	{r4, lr}
3400e8d6:	4b0b      	ldr	r3, [pc, #44]	@ (3400e904 <global_stdio_init.part.0+0x30>)
3400e8d8:	2104      	movs	r1, #4
3400e8da:	4c0b      	ldr	r4, [pc, #44]	@ (3400e908 <global_stdio_init.part.0+0x34>)
3400e8dc:	4a0b      	ldr	r2, [pc, #44]	@ (3400e90c <global_stdio_init.part.0+0x38>)
3400e8de:	4620      	mov	r0, r4
3400e8e0:	601a      	str	r2, [r3, #0]
3400e8e2:	2200      	movs	r2, #0
3400e8e4:	f7ff ff94 	bl	3400e810 <std>
3400e8e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3400e8ec:	2201      	movs	r2, #1
3400e8ee:	2109      	movs	r1, #9
3400e8f0:	f7ff ff8e 	bl	3400e810 <std>
3400e8f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3400e8f8:	2202      	movs	r2, #2
3400e8fa:	2112      	movs	r1, #18
3400e8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e900:	f7ff bf86 	b.w	3400e810 <std>
3400e904:	3403aac0 	.word	0x3403aac0
3400e908:	3403a988 	.word	0x3403a988
3400e90c:	3400e87d 	.word	0x3400e87d

3400e910 <__sfp_lock_acquire>:
3400e910:	4801      	ldr	r0, [pc, #4]	@ (3400e918 <__sfp_lock_acquire+0x8>)
3400e912:	f000 bc18 	b.w	3400f146 <__retarget_lock_acquire_recursive>
3400e916:	bf00      	nop
3400e918:	3403aac9 	.word	0x3403aac9

3400e91c <__sfp_lock_release>:
3400e91c:	4801      	ldr	r0, [pc, #4]	@ (3400e924 <__sfp_lock_release+0x8>)
3400e91e:	f000 bc13 	b.w	3400f148 <__retarget_lock_release_recursive>
3400e922:	bf00      	nop
3400e924:	3403aac9 	.word	0x3403aac9

3400e928 <__sinit>:
3400e928:	b510      	push	{r4, lr}
3400e92a:	4604      	mov	r4, r0
3400e92c:	f7ff fff0 	bl	3400e910 <__sfp_lock_acquire>
3400e930:	6a23      	ldr	r3, [r4, #32]
3400e932:	b11b      	cbz	r3, 3400e93c <__sinit+0x14>
3400e934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400e938:	f7ff bff0 	b.w	3400e91c <__sfp_lock_release>
3400e93c:	4b04      	ldr	r3, [pc, #16]	@ (3400e950 <__sinit+0x28>)
3400e93e:	6223      	str	r3, [r4, #32]
3400e940:	4b04      	ldr	r3, [pc, #16]	@ (3400e954 <__sinit+0x2c>)
3400e942:	681b      	ldr	r3, [r3, #0]
3400e944:	2b00      	cmp	r3, #0
3400e946:	d1f5      	bne.n	3400e934 <__sinit+0xc>
3400e948:	f7ff ffc4 	bl	3400e8d4 <global_stdio_init.part.0>
3400e94c:	e7f2      	b.n	3400e934 <__sinit+0xc>
3400e94e:	bf00      	nop
3400e950:	3400e895 	.word	0x3400e895
3400e954:	3403aac0 	.word	0x3403aac0

3400e958 <fiprintf>:
3400e958:	b40e      	push	{r1, r2, r3}
3400e95a:	b503      	push	{r0, r1, lr}
3400e95c:	ab03      	add	r3, sp, #12
3400e95e:	4601      	mov	r1, r0
3400e960:	4805      	ldr	r0, [pc, #20]	@ (3400e978 <fiprintf+0x20>)
3400e962:	f853 2b04 	ldr.w	r2, [r3], #4
3400e966:	6800      	ldr	r0, [r0, #0]
3400e968:	9301      	str	r3, [sp, #4]
3400e96a:	f001 fdef 	bl	3401054c <_vfiprintf_r>
3400e96e:	b002      	add	sp, #8
3400e970:	f85d eb04 	ldr.w	lr, [sp], #4
3400e974:	b003      	add	sp, #12
3400e976:	4770      	bx	lr
3400e978:	3403a6a8 	.word	0x3403a6a8

3400e97c <_fwalk_sglue>:
3400e97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400e980:	4607      	mov	r7, r0
3400e982:	4688      	mov	r8, r1
3400e984:	4614      	mov	r4, r2
3400e986:	2600      	movs	r6, #0
3400e988:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3400e98c:	f1b9 0901 	subs.w	r9, r9, #1
3400e990:	d505      	bpl.n	3400e99e <_fwalk_sglue+0x22>
3400e992:	6824      	ldr	r4, [r4, #0]
3400e994:	2c00      	cmp	r4, #0
3400e996:	d1f7      	bne.n	3400e988 <_fwalk_sglue+0xc>
3400e998:	4630      	mov	r0, r6
3400e99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400e99e:	89ab      	ldrh	r3, [r5, #12]
3400e9a0:	2b01      	cmp	r3, #1
3400e9a2:	d907      	bls.n	3400e9b4 <_fwalk_sglue+0x38>
3400e9a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3400e9a8:	3301      	adds	r3, #1
3400e9aa:	d003      	beq.n	3400e9b4 <_fwalk_sglue+0x38>
3400e9ac:	4629      	mov	r1, r5
3400e9ae:	4638      	mov	r0, r7
3400e9b0:	47c0      	blx	r8
3400e9b2:	4306      	orrs	r6, r0
3400e9b4:	3568      	adds	r5, #104	@ 0x68
3400e9b6:	e7e9      	b.n	3400e98c <_fwalk_sglue+0x10>

3400e9b8 <iprintf>:
3400e9b8:	b40f      	push	{r0, r1, r2, r3}
3400e9ba:	b507      	push	{r0, r1, r2, lr}
3400e9bc:	4906      	ldr	r1, [pc, #24]	@ (3400e9d8 <iprintf+0x20>)
3400e9be:	ab04      	add	r3, sp, #16
3400e9c0:	6808      	ldr	r0, [r1, #0]
3400e9c2:	f853 2b04 	ldr.w	r2, [r3], #4
3400e9c6:	6881      	ldr	r1, [r0, #8]
3400e9c8:	9301      	str	r3, [sp, #4]
3400e9ca:	f001 fdbf 	bl	3401054c <_vfiprintf_r>
3400e9ce:	b003      	add	sp, #12
3400e9d0:	f85d eb04 	ldr.w	lr, [sp], #4
3400e9d4:	b004      	add	sp, #16
3400e9d6:	4770      	bx	lr
3400e9d8:	3403a6a8 	.word	0x3403a6a8

3400e9dc <_puts_r>:
3400e9dc:	6a03      	ldr	r3, [r0, #32]
3400e9de:	b570      	push	{r4, r5, r6, lr}
3400e9e0:	4605      	mov	r5, r0
3400e9e2:	460e      	mov	r6, r1
3400e9e4:	6884      	ldr	r4, [r0, #8]
3400e9e6:	b90b      	cbnz	r3, 3400e9ec <_puts_r+0x10>
3400e9e8:	f7ff ff9e 	bl	3400e928 <__sinit>
3400e9ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400e9ee:	07db      	lsls	r3, r3, #31
3400e9f0:	d405      	bmi.n	3400e9fe <_puts_r+0x22>
3400e9f2:	89a3      	ldrh	r3, [r4, #12]
3400e9f4:	0598      	lsls	r0, r3, #22
3400e9f6:	d402      	bmi.n	3400e9fe <_puts_r+0x22>
3400e9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400e9fa:	f000 fba4 	bl	3400f146 <__retarget_lock_acquire_recursive>
3400e9fe:	89a3      	ldrh	r3, [r4, #12]
3400ea00:	0719      	lsls	r1, r3, #28
3400ea02:	d502      	bpl.n	3400ea0a <_puts_r+0x2e>
3400ea04:	6923      	ldr	r3, [r4, #16]
3400ea06:	2b00      	cmp	r3, #0
3400ea08:	d135      	bne.n	3400ea76 <_puts_r+0x9a>
3400ea0a:	4621      	mov	r1, r4
3400ea0c:	4628      	mov	r0, r5
3400ea0e:	f000 f8c5 	bl	3400eb9c <__swsetup_r>
3400ea12:	b380      	cbz	r0, 3400ea76 <_puts_r+0x9a>
3400ea14:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3400ea18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400ea1a:	07da      	lsls	r2, r3, #31
3400ea1c:	d405      	bmi.n	3400ea2a <_puts_r+0x4e>
3400ea1e:	89a3      	ldrh	r3, [r4, #12]
3400ea20:	059b      	lsls	r3, r3, #22
3400ea22:	d402      	bmi.n	3400ea2a <_puts_r+0x4e>
3400ea24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400ea26:	f000 fb8f 	bl	3400f148 <__retarget_lock_release_recursive>
3400ea2a:	4628      	mov	r0, r5
3400ea2c:	bd70      	pop	{r4, r5, r6, pc}
3400ea2e:	2b00      	cmp	r3, #0
3400ea30:	da04      	bge.n	3400ea3c <_puts_r+0x60>
3400ea32:	69a2      	ldr	r2, [r4, #24]
3400ea34:	429a      	cmp	r2, r3
3400ea36:	dc17      	bgt.n	3400ea68 <_puts_r+0x8c>
3400ea38:	290a      	cmp	r1, #10
3400ea3a:	d015      	beq.n	3400ea68 <_puts_r+0x8c>
3400ea3c:	6823      	ldr	r3, [r4, #0]
3400ea3e:	1c5a      	adds	r2, r3, #1
3400ea40:	6022      	str	r2, [r4, #0]
3400ea42:	7019      	strb	r1, [r3, #0]
3400ea44:	68a3      	ldr	r3, [r4, #8]
3400ea46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400ea4a:	3b01      	subs	r3, #1
3400ea4c:	60a3      	str	r3, [r4, #8]
3400ea4e:	2900      	cmp	r1, #0
3400ea50:	d1ed      	bne.n	3400ea2e <_puts_r+0x52>
3400ea52:	2b00      	cmp	r3, #0
3400ea54:	da11      	bge.n	3400ea7a <_puts_r+0x9e>
3400ea56:	4622      	mov	r2, r4
3400ea58:	210a      	movs	r1, #10
3400ea5a:	4628      	mov	r0, r5
3400ea5c:	f000 f85f 	bl	3400eb1e <__swbuf_r>
3400ea60:	3001      	adds	r0, #1
3400ea62:	d0d7      	beq.n	3400ea14 <_puts_r+0x38>
3400ea64:	250a      	movs	r5, #10
3400ea66:	e7d7      	b.n	3400ea18 <_puts_r+0x3c>
3400ea68:	4622      	mov	r2, r4
3400ea6a:	4628      	mov	r0, r5
3400ea6c:	f000 f857 	bl	3400eb1e <__swbuf_r>
3400ea70:	3001      	adds	r0, #1
3400ea72:	d1e7      	bne.n	3400ea44 <_puts_r+0x68>
3400ea74:	e7ce      	b.n	3400ea14 <_puts_r+0x38>
3400ea76:	3e01      	subs	r6, #1
3400ea78:	e7e4      	b.n	3400ea44 <_puts_r+0x68>
3400ea7a:	6823      	ldr	r3, [r4, #0]
3400ea7c:	1c5a      	adds	r2, r3, #1
3400ea7e:	6022      	str	r2, [r4, #0]
3400ea80:	220a      	movs	r2, #10
3400ea82:	701a      	strb	r2, [r3, #0]
3400ea84:	e7ee      	b.n	3400ea64 <_puts_r+0x88>
	...

3400ea88 <puts>:
3400ea88:	4b02      	ldr	r3, [pc, #8]	@ (3400ea94 <puts+0xc>)
3400ea8a:	4601      	mov	r1, r0
3400ea8c:	6818      	ldr	r0, [r3, #0]
3400ea8e:	f7ff bfa5 	b.w	3400e9dc <_puts_r>
3400ea92:	bf00      	nop
3400ea94:	3403a6a8 	.word	0x3403a6a8

3400ea98 <__sread>:
3400ea98:	b510      	push	{r4, lr}
3400ea9a:	460c      	mov	r4, r1
3400ea9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400eaa0:	f000 faf2 	bl	3400f088 <_read_r>
3400eaa4:	2800      	cmp	r0, #0
3400eaa6:	bfab      	itete	ge
3400eaa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3400eaaa:	89a3      	ldrhlt	r3, [r4, #12]
3400eaac:	181b      	addge	r3, r3, r0
3400eaae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3400eab2:	bfac      	ite	ge
3400eab4:	6563      	strge	r3, [r4, #84]	@ 0x54
3400eab6:	81a3      	strhlt	r3, [r4, #12]
3400eab8:	bd10      	pop	{r4, pc}

3400eaba <__swrite>:
3400eaba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400eabe:	461f      	mov	r7, r3
3400eac0:	898b      	ldrh	r3, [r1, #12]
3400eac2:	4605      	mov	r5, r0
3400eac4:	460c      	mov	r4, r1
3400eac6:	05db      	lsls	r3, r3, #23
3400eac8:	4616      	mov	r6, r2
3400eaca:	d505      	bpl.n	3400ead8 <__swrite+0x1e>
3400eacc:	2302      	movs	r3, #2
3400eace:	2200      	movs	r2, #0
3400ead0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400ead4:	f000 fac6 	bl	3400f064 <_lseek_r>
3400ead8:	89a3      	ldrh	r3, [r4, #12]
3400eada:	4632      	mov	r2, r6
3400eadc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400eae0:	4628      	mov	r0, r5
3400eae2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400eae6:	81a3      	strh	r3, [r4, #12]
3400eae8:	463b      	mov	r3, r7
3400eaea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3400eaee:	f000 baed 	b.w	3400f0cc <_write_r>

3400eaf2 <__sseek>:
3400eaf2:	b510      	push	{r4, lr}
3400eaf4:	460c      	mov	r4, r1
3400eaf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400eafa:	f000 fab3 	bl	3400f064 <_lseek_r>
3400eafe:	1c43      	adds	r3, r0, #1
3400eb00:	89a3      	ldrh	r3, [r4, #12]
3400eb02:	bf15      	itete	ne
3400eb04:	6560      	strne	r0, [r4, #84]	@ 0x54
3400eb06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3400eb0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3400eb0e:	81a3      	strheq	r3, [r4, #12]
3400eb10:	bf18      	it	ne
3400eb12:	81a3      	strhne	r3, [r4, #12]
3400eb14:	bd10      	pop	{r4, pc}

3400eb16 <__sclose>:
3400eb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400eb1a:	f000 ba93 	b.w	3400f044 <_close_r>

3400eb1e <__swbuf_r>:
3400eb1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400eb20:	460e      	mov	r6, r1
3400eb22:	4614      	mov	r4, r2
3400eb24:	4605      	mov	r5, r0
3400eb26:	b118      	cbz	r0, 3400eb30 <__swbuf_r+0x12>
3400eb28:	6a03      	ldr	r3, [r0, #32]
3400eb2a:	b90b      	cbnz	r3, 3400eb30 <__swbuf_r+0x12>
3400eb2c:	f7ff fefc 	bl	3400e928 <__sinit>
3400eb30:	69a3      	ldr	r3, [r4, #24]
3400eb32:	60a3      	str	r3, [r4, #8]
3400eb34:	89a3      	ldrh	r3, [r4, #12]
3400eb36:	071a      	lsls	r2, r3, #28
3400eb38:	d501      	bpl.n	3400eb3e <__swbuf_r+0x20>
3400eb3a:	6923      	ldr	r3, [r4, #16]
3400eb3c:	b943      	cbnz	r3, 3400eb50 <__swbuf_r+0x32>
3400eb3e:	4621      	mov	r1, r4
3400eb40:	4628      	mov	r0, r5
3400eb42:	f000 f82b 	bl	3400eb9c <__swsetup_r>
3400eb46:	b118      	cbz	r0, 3400eb50 <__swbuf_r+0x32>
3400eb48:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3400eb4c:	4638      	mov	r0, r7
3400eb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400eb50:	6823      	ldr	r3, [r4, #0]
3400eb52:	b2f6      	uxtb	r6, r6
3400eb54:	6922      	ldr	r2, [r4, #16]
3400eb56:	4637      	mov	r7, r6
3400eb58:	1a98      	subs	r0, r3, r2
3400eb5a:	6963      	ldr	r3, [r4, #20]
3400eb5c:	4283      	cmp	r3, r0
3400eb5e:	dc05      	bgt.n	3400eb6c <__swbuf_r+0x4e>
3400eb60:	4621      	mov	r1, r4
3400eb62:	4628      	mov	r0, r5
3400eb64:	f001 fe8e 	bl	34010884 <_fflush_r>
3400eb68:	2800      	cmp	r0, #0
3400eb6a:	d1ed      	bne.n	3400eb48 <__swbuf_r+0x2a>
3400eb6c:	68a3      	ldr	r3, [r4, #8]
3400eb6e:	3b01      	subs	r3, #1
3400eb70:	60a3      	str	r3, [r4, #8]
3400eb72:	6823      	ldr	r3, [r4, #0]
3400eb74:	1c5a      	adds	r2, r3, #1
3400eb76:	6022      	str	r2, [r4, #0]
3400eb78:	701e      	strb	r6, [r3, #0]
3400eb7a:	1c43      	adds	r3, r0, #1
3400eb7c:	6962      	ldr	r2, [r4, #20]
3400eb7e:	429a      	cmp	r2, r3
3400eb80:	d004      	beq.n	3400eb8c <__swbuf_r+0x6e>
3400eb82:	89a3      	ldrh	r3, [r4, #12]
3400eb84:	07db      	lsls	r3, r3, #31
3400eb86:	d5e1      	bpl.n	3400eb4c <__swbuf_r+0x2e>
3400eb88:	2e0a      	cmp	r6, #10
3400eb8a:	d1df      	bne.n	3400eb4c <__swbuf_r+0x2e>
3400eb8c:	4621      	mov	r1, r4
3400eb8e:	4628      	mov	r0, r5
3400eb90:	f001 fe78 	bl	34010884 <_fflush_r>
3400eb94:	2800      	cmp	r0, #0
3400eb96:	d0d9      	beq.n	3400eb4c <__swbuf_r+0x2e>
3400eb98:	e7d6      	b.n	3400eb48 <__swbuf_r+0x2a>
	...

3400eb9c <__swsetup_r>:
3400eb9c:	b538      	push	{r3, r4, r5, lr}
3400eb9e:	4b29      	ldr	r3, [pc, #164]	@ (3400ec44 <__swsetup_r+0xa8>)
3400eba0:	4605      	mov	r5, r0
3400eba2:	460c      	mov	r4, r1
3400eba4:	6818      	ldr	r0, [r3, #0]
3400eba6:	b118      	cbz	r0, 3400ebb0 <__swsetup_r+0x14>
3400eba8:	6a03      	ldr	r3, [r0, #32]
3400ebaa:	b90b      	cbnz	r3, 3400ebb0 <__swsetup_r+0x14>
3400ebac:	f7ff febc 	bl	3400e928 <__sinit>
3400ebb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400ebb4:	0719      	lsls	r1, r3, #28
3400ebb6:	d422      	bmi.n	3400ebfe <__swsetup_r+0x62>
3400ebb8:	06da      	lsls	r2, r3, #27
3400ebba:	d407      	bmi.n	3400ebcc <__swsetup_r+0x30>
3400ebbc:	2209      	movs	r2, #9
3400ebbe:	602a      	str	r2, [r5, #0]
3400ebc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400ebc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3400ebc8:	81a3      	strh	r3, [r4, #12]
3400ebca:	e033      	b.n	3400ec34 <__swsetup_r+0x98>
3400ebcc:	0758      	lsls	r0, r3, #29
3400ebce:	d512      	bpl.n	3400ebf6 <__swsetup_r+0x5a>
3400ebd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400ebd2:	b141      	cbz	r1, 3400ebe6 <__swsetup_r+0x4a>
3400ebd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400ebd8:	4299      	cmp	r1, r3
3400ebda:	d002      	beq.n	3400ebe2 <__swsetup_r+0x46>
3400ebdc:	4628      	mov	r0, r5
3400ebde:	f001 f8b9 	bl	3400fd54 <_free_r>
3400ebe2:	2300      	movs	r3, #0
3400ebe4:	6363      	str	r3, [r4, #52]	@ 0x34
3400ebe6:	89a3      	ldrh	r3, [r4, #12]
3400ebe8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3400ebec:	81a3      	strh	r3, [r4, #12]
3400ebee:	2300      	movs	r3, #0
3400ebf0:	6063      	str	r3, [r4, #4]
3400ebf2:	6923      	ldr	r3, [r4, #16]
3400ebf4:	6023      	str	r3, [r4, #0]
3400ebf6:	89a3      	ldrh	r3, [r4, #12]
3400ebf8:	f043 0308 	orr.w	r3, r3, #8
3400ebfc:	81a3      	strh	r3, [r4, #12]
3400ebfe:	6923      	ldr	r3, [r4, #16]
3400ec00:	b94b      	cbnz	r3, 3400ec16 <__swsetup_r+0x7a>
3400ec02:	89a3      	ldrh	r3, [r4, #12]
3400ec04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3400ec08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400ec0c:	d003      	beq.n	3400ec16 <__swsetup_r+0x7a>
3400ec0e:	4621      	mov	r1, r4
3400ec10:	4628      	mov	r0, r5
3400ec12:	f001 fe84 	bl	3401091e <__smakebuf_r>
3400ec16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400ec1a:	f013 0201 	ands.w	r2, r3, #1
3400ec1e:	d00a      	beq.n	3400ec36 <__swsetup_r+0x9a>
3400ec20:	2200      	movs	r2, #0
3400ec22:	60a2      	str	r2, [r4, #8]
3400ec24:	6962      	ldr	r2, [r4, #20]
3400ec26:	4252      	negs	r2, r2
3400ec28:	61a2      	str	r2, [r4, #24]
3400ec2a:	6922      	ldr	r2, [r4, #16]
3400ec2c:	b942      	cbnz	r2, 3400ec40 <__swsetup_r+0xa4>
3400ec2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3400ec32:	d1c5      	bne.n	3400ebc0 <__swsetup_r+0x24>
3400ec34:	bd38      	pop	{r3, r4, r5, pc}
3400ec36:	0799      	lsls	r1, r3, #30
3400ec38:	bf58      	it	pl
3400ec3a:	6962      	ldrpl	r2, [r4, #20]
3400ec3c:	60a2      	str	r2, [r4, #8]
3400ec3e:	e7f4      	b.n	3400ec2a <__swsetup_r+0x8e>
3400ec40:	2000      	movs	r0, #0
3400ec42:	e7f7      	b.n	3400ec34 <__swsetup_r+0x98>
3400ec44:	3403a6a8 	.word	0x3403a6a8

3400ec48 <memset>:
3400ec48:	4402      	add	r2, r0
3400ec4a:	4603      	mov	r3, r0
3400ec4c:	4293      	cmp	r3, r2
3400ec4e:	d100      	bne.n	3400ec52 <memset+0xa>
3400ec50:	4770      	bx	lr
3400ec52:	f803 1b01 	strb.w	r1, [r3], #1
3400ec56:	e7f9      	b.n	3400ec4c <memset+0x4>

3400ec58 <_strerror_r>:
3400ec58:	b510      	push	{r4, lr}
3400ec5a:	4604      	mov	r4, r0
3400ec5c:	4608      	mov	r0, r1
3400ec5e:	4611      	mov	r1, r2
3400ec60:	461a      	mov	r2, r3
3400ec62:	288e      	cmp	r0, #142	@ 0x8e
3400ec64:	f200 8130 	bhi.w	3400eec8 <_strerror_r+0x270>
3400ec68:	e8df f010 	tbh	[pc, r0, lsl #1]
3400ec6c:	0138008f 	.word	0x0138008f
3400ec70:	00940092 	.word	0x00940092
3400ec74:	00980096 	.word	0x00980096
3400ec78:	009c009a 	.word	0x009c009a
3400ec7c:	00a2009e 	.word	0x00a2009e
3400ec80:	00a800a4 	.word	0x00a800a4
3400ec84:	00ac00aa 	.word	0x00ac00aa
3400ec88:	012e00ae 	.word	0x012e00ae
3400ec8c:	00b200b0 	.word	0x00b200b0
3400ec90:	00b600b4 	.word	0x00b600b4
3400ec94:	00be00b8 	.word	0x00be00b8
3400ec98:	00c600c0 	.word	0x00c600c0
3400ec9c:	00ca00c8 	.word	0x00ca00c8
3400eca0:	00ce00cc 	.word	0x00ce00cc
3400eca4:	00d600d2 	.word	0x00d600d2
3400eca8:	00da00d8 	.word	0x00da00d8
3400ecac:	00de00dc 	.word	0x00de00dc
3400ecb0:	00e200e0 	.word	0x00e200e0
3400ecb4:	012e00e4 	.word	0x012e00e4
3400ecb8:	012e012e 	.word	0x012e012e
3400ecbc:	012e012e 	.word	0x012e012e
3400ecc0:	012e012e 	.word	0x012e012e
3400ecc4:	00e8012e 	.word	0x00e8012e
3400ecc8:	012e00ec 	.word	0x012e00ec
3400eccc:	012e012e 	.word	0x012e012e
3400ecd0:	012e012e 	.word	0x012e012e
3400ecd4:	012e012e 	.word	0x012e012e
3400ecd8:	012e012e 	.word	0x012e012e
3400ecdc:	012e012e 	.word	0x012e012e
3400ece0:	012e012e 	.word	0x012e012e
3400ece4:	010800ee 	.word	0x010800ee
3400ece8:	00f200f0 	.word	0x00f200f0
3400ecec:	012e012e 	.word	0x012e012e
3400ecf0:	00f4012e 	.word	0x00f4012e
3400ecf4:	012e012e 	.word	0x012e012e
3400ecf8:	00f6012e 	.word	0x00f6012e
3400ecfc:	012e012e 	.word	0x012e012e
3400ed00:	012e00fa 	.word	0x012e00fa
3400ed04:	00fc012e 	.word	0x00fc012e
3400ed08:	012e012e 	.word	0x012e012e
3400ed0c:	012e012e 	.word	0x012e012e
3400ed10:	012e012e 	.word	0x012e012e
3400ed14:	012e012e 	.word	0x012e012e
3400ed18:	012e012e 	.word	0x012e012e
3400ed1c:	012e00fe 	.word	0x012e00fe
3400ed20:	01020100 	.word	0x01020100
3400ed24:	012e0104 	.word	0x012e0104
3400ed28:	0126012e 	.word	0x0126012e
3400ed2c:	012e012e 	.word	0x012e012e
3400ed30:	012e012e 	.word	0x012e012e
3400ed34:	012e012e 	.word	0x012e012e
3400ed38:	012e012e 	.word	0x012e012e
3400ed3c:	01060114 	.word	0x01060114
3400ed40:	010c010a 	.word	0x010c010a
3400ed44:	0110010e 	.word	0x0110010e
3400ed48:	0112012e 	.word	0x0112012e
3400ed4c:	011a0116 	.word	0x011a0116
3400ed50:	00c200ea 	.word	0x00c200ea
3400ed54:	00ba012c 	.word	0x00ba012c
3400ed58:	00bc00d0 	.word	0x00bc00d0
3400ed5c:	00a600a0 	.word	0x00a600a0
3400ed60:	00f8012a 	.word	0x00f8012a
3400ed64:	0118012e 	.word	0x0118012e
3400ed68:	011e00c4 	.word	0x011e00c4
3400ed6c:	012e011c 	.word	0x012e011c
3400ed70:	012e012e 	.word	0x012e012e
3400ed74:	012e012e 	.word	0x012e012e
3400ed78:	012e00d4 	.word	0x012e00d4
3400ed7c:	012e012e 	.word	0x012e012e
3400ed80:	012800e6 	.word	0x012800e6
3400ed84:	01220120 	.word	0x01220120
3400ed88:	0124      	.short	0x0124
3400ed8a:	4b55      	ldr	r3, [pc, #340]	@ (3400eee0 <_strerror_r+0x288>)
3400ed8c:	4618      	mov	r0, r3
3400ed8e:	bd10      	pop	{r4, pc}
3400ed90:	4b54      	ldr	r3, [pc, #336]	@ (3400eee4 <_strerror_r+0x28c>)
3400ed92:	e7fb      	b.n	3400ed8c <_strerror_r+0x134>
3400ed94:	4b54      	ldr	r3, [pc, #336]	@ (3400eee8 <_strerror_r+0x290>)
3400ed96:	e7f9      	b.n	3400ed8c <_strerror_r+0x134>
3400ed98:	4b54      	ldr	r3, [pc, #336]	@ (3400eeec <_strerror_r+0x294>)
3400ed9a:	e7f7      	b.n	3400ed8c <_strerror_r+0x134>
3400ed9c:	4b54      	ldr	r3, [pc, #336]	@ (3400eef0 <_strerror_r+0x298>)
3400ed9e:	e7f5      	b.n	3400ed8c <_strerror_r+0x134>
3400eda0:	4b54      	ldr	r3, [pc, #336]	@ (3400eef4 <_strerror_r+0x29c>)
3400eda2:	e7f3      	b.n	3400ed8c <_strerror_r+0x134>
3400eda4:	4b54      	ldr	r3, [pc, #336]	@ (3400eef8 <_strerror_r+0x2a0>)
3400eda6:	e7f1      	b.n	3400ed8c <_strerror_r+0x134>
3400eda8:	4b54      	ldr	r3, [pc, #336]	@ (3400eefc <_strerror_r+0x2a4>)
3400edaa:	e7ef      	b.n	3400ed8c <_strerror_r+0x134>
3400edac:	4b54      	ldr	r3, [pc, #336]	@ (3400ef00 <_strerror_r+0x2a8>)
3400edae:	e7ed      	b.n	3400ed8c <_strerror_r+0x134>
3400edb0:	4b54      	ldr	r3, [pc, #336]	@ (3400ef04 <_strerror_r+0x2ac>)
3400edb2:	e7eb      	b.n	3400ed8c <_strerror_r+0x134>
3400edb4:	4b54      	ldr	r3, [pc, #336]	@ (3400ef08 <_strerror_r+0x2b0>)
3400edb6:	e7e9      	b.n	3400ed8c <_strerror_r+0x134>
3400edb8:	4b54      	ldr	r3, [pc, #336]	@ (3400ef0c <_strerror_r+0x2b4>)
3400edba:	e7e7      	b.n	3400ed8c <_strerror_r+0x134>
3400edbc:	4b54      	ldr	r3, [pc, #336]	@ (3400ef10 <_strerror_r+0x2b8>)
3400edbe:	e7e5      	b.n	3400ed8c <_strerror_r+0x134>
3400edc0:	4b54      	ldr	r3, [pc, #336]	@ (3400ef14 <_strerror_r+0x2bc>)
3400edc2:	e7e3      	b.n	3400ed8c <_strerror_r+0x134>
3400edc4:	4b54      	ldr	r3, [pc, #336]	@ (3400ef18 <_strerror_r+0x2c0>)
3400edc6:	e7e1      	b.n	3400ed8c <_strerror_r+0x134>
3400edc8:	4b54      	ldr	r3, [pc, #336]	@ (3400ef1c <_strerror_r+0x2c4>)
3400edca:	e7df      	b.n	3400ed8c <_strerror_r+0x134>
3400edcc:	4b54      	ldr	r3, [pc, #336]	@ (3400ef20 <_strerror_r+0x2c8>)
3400edce:	e7dd      	b.n	3400ed8c <_strerror_r+0x134>
3400edd0:	4b54      	ldr	r3, [pc, #336]	@ (3400ef24 <_strerror_r+0x2cc>)
3400edd2:	e7db      	b.n	3400ed8c <_strerror_r+0x134>
3400edd4:	4b54      	ldr	r3, [pc, #336]	@ (3400ef28 <_strerror_r+0x2d0>)
3400edd6:	e7d9      	b.n	3400ed8c <_strerror_r+0x134>
3400edd8:	4b54      	ldr	r3, [pc, #336]	@ (3400ef2c <_strerror_r+0x2d4>)
3400edda:	e7d7      	b.n	3400ed8c <_strerror_r+0x134>
3400eddc:	4b54      	ldr	r3, [pc, #336]	@ (3400ef30 <_strerror_r+0x2d8>)
3400edde:	e7d5      	b.n	3400ed8c <_strerror_r+0x134>
3400ede0:	4b54      	ldr	r3, [pc, #336]	@ (3400ef34 <_strerror_r+0x2dc>)
3400ede2:	e7d3      	b.n	3400ed8c <_strerror_r+0x134>
3400ede4:	4b54      	ldr	r3, [pc, #336]	@ (3400ef38 <_strerror_r+0x2e0>)
3400ede6:	e7d1      	b.n	3400ed8c <_strerror_r+0x134>
3400ede8:	4b54      	ldr	r3, [pc, #336]	@ (3400ef3c <_strerror_r+0x2e4>)
3400edea:	e7cf      	b.n	3400ed8c <_strerror_r+0x134>
3400edec:	4b54      	ldr	r3, [pc, #336]	@ (3400ef40 <_strerror_r+0x2e8>)
3400edee:	e7cd      	b.n	3400ed8c <_strerror_r+0x134>
3400edf0:	4b54      	ldr	r3, [pc, #336]	@ (3400ef44 <_strerror_r+0x2ec>)
3400edf2:	e7cb      	b.n	3400ed8c <_strerror_r+0x134>
3400edf4:	4b54      	ldr	r3, [pc, #336]	@ (3400ef48 <_strerror_r+0x2f0>)
3400edf6:	e7c9      	b.n	3400ed8c <_strerror_r+0x134>
3400edf8:	4b54      	ldr	r3, [pc, #336]	@ (3400ef4c <_strerror_r+0x2f4>)
3400edfa:	e7c7      	b.n	3400ed8c <_strerror_r+0x134>
3400edfc:	4b54      	ldr	r3, [pc, #336]	@ (3400ef50 <_strerror_r+0x2f8>)
3400edfe:	e7c5      	b.n	3400ed8c <_strerror_r+0x134>
3400ee00:	4b54      	ldr	r3, [pc, #336]	@ (3400ef54 <_strerror_r+0x2fc>)
3400ee02:	e7c3      	b.n	3400ed8c <_strerror_r+0x134>
3400ee04:	4b54      	ldr	r3, [pc, #336]	@ (3400ef58 <_strerror_r+0x300>)
3400ee06:	e7c1      	b.n	3400ed8c <_strerror_r+0x134>
3400ee08:	4b54      	ldr	r3, [pc, #336]	@ (3400ef5c <_strerror_r+0x304>)
3400ee0a:	e7bf      	b.n	3400ed8c <_strerror_r+0x134>
3400ee0c:	4b54      	ldr	r3, [pc, #336]	@ (3400ef60 <_strerror_r+0x308>)
3400ee0e:	e7bd      	b.n	3400ed8c <_strerror_r+0x134>
3400ee10:	4b54      	ldr	r3, [pc, #336]	@ (3400ef64 <_strerror_r+0x30c>)
3400ee12:	e7bb      	b.n	3400ed8c <_strerror_r+0x134>
3400ee14:	4b54      	ldr	r3, [pc, #336]	@ (3400ef68 <_strerror_r+0x310>)
3400ee16:	e7b9      	b.n	3400ed8c <_strerror_r+0x134>
3400ee18:	4b54      	ldr	r3, [pc, #336]	@ (3400ef6c <_strerror_r+0x314>)
3400ee1a:	e7b7      	b.n	3400ed8c <_strerror_r+0x134>
3400ee1c:	4b54      	ldr	r3, [pc, #336]	@ (3400ef70 <_strerror_r+0x318>)
3400ee1e:	e7b5      	b.n	3400ed8c <_strerror_r+0x134>
3400ee20:	4b54      	ldr	r3, [pc, #336]	@ (3400ef74 <_strerror_r+0x31c>)
3400ee22:	e7b3      	b.n	3400ed8c <_strerror_r+0x134>
3400ee24:	4b54      	ldr	r3, [pc, #336]	@ (3400ef78 <_strerror_r+0x320>)
3400ee26:	e7b1      	b.n	3400ed8c <_strerror_r+0x134>
3400ee28:	4b54      	ldr	r3, [pc, #336]	@ (3400ef7c <_strerror_r+0x324>)
3400ee2a:	e7af      	b.n	3400ed8c <_strerror_r+0x134>
3400ee2c:	4b54      	ldr	r3, [pc, #336]	@ (3400ef80 <_strerror_r+0x328>)
3400ee2e:	e7ad      	b.n	3400ed8c <_strerror_r+0x134>
3400ee30:	4b54      	ldr	r3, [pc, #336]	@ (3400ef84 <_strerror_r+0x32c>)
3400ee32:	e7ab      	b.n	3400ed8c <_strerror_r+0x134>
3400ee34:	4b54      	ldr	r3, [pc, #336]	@ (3400ef88 <_strerror_r+0x330>)
3400ee36:	e7a9      	b.n	3400ed8c <_strerror_r+0x134>
3400ee38:	4b54      	ldr	r3, [pc, #336]	@ (3400ef8c <_strerror_r+0x334>)
3400ee3a:	e7a7      	b.n	3400ed8c <_strerror_r+0x134>
3400ee3c:	4b54      	ldr	r3, [pc, #336]	@ (3400ef90 <_strerror_r+0x338>)
3400ee3e:	e7a5      	b.n	3400ed8c <_strerror_r+0x134>
3400ee40:	4b54      	ldr	r3, [pc, #336]	@ (3400ef94 <_strerror_r+0x33c>)
3400ee42:	e7a3      	b.n	3400ed8c <_strerror_r+0x134>
3400ee44:	4b54      	ldr	r3, [pc, #336]	@ (3400ef98 <_strerror_r+0x340>)
3400ee46:	e7a1      	b.n	3400ed8c <_strerror_r+0x134>
3400ee48:	4b54      	ldr	r3, [pc, #336]	@ (3400ef9c <_strerror_r+0x344>)
3400ee4a:	e79f      	b.n	3400ed8c <_strerror_r+0x134>
3400ee4c:	4b54      	ldr	r3, [pc, #336]	@ (3400efa0 <_strerror_r+0x348>)
3400ee4e:	e79d      	b.n	3400ed8c <_strerror_r+0x134>
3400ee50:	4b54      	ldr	r3, [pc, #336]	@ (3400efa4 <_strerror_r+0x34c>)
3400ee52:	e79b      	b.n	3400ed8c <_strerror_r+0x134>
3400ee54:	4b54      	ldr	r3, [pc, #336]	@ (3400efa8 <_strerror_r+0x350>)
3400ee56:	e799      	b.n	3400ed8c <_strerror_r+0x134>
3400ee58:	4b54      	ldr	r3, [pc, #336]	@ (3400efac <_strerror_r+0x354>)
3400ee5a:	e797      	b.n	3400ed8c <_strerror_r+0x134>
3400ee5c:	4b54      	ldr	r3, [pc, #336]	@ (3400efb0 <_strerror_r+0x358>)
3400ee5e:	e795      	b.n	3400ed8c <_strerror_r+0x134>
3400ee60:	4b54      	ldr	r3, [pc, #336]	@ (3400efb4 <_strerror_r+0x35c>)
3400ee62:	e793      	b.n	3400ed8c <_strerror_r+0x134>
3400ee64:	4b54      	ldr	r3, [pc, #336]	@ (3400efb8 <_strerror_r+0x360>)
3400ee66:	e791      	b.n	3400ed8c <_strerror_r+0x134>
3400ee68:	4b54      	ldr	r3, [pc, #336]	@ (3400efbc <_strerror_r+0x364>)
3400ee6a:	e78f      	b.n	3400ed8c <_strerror_r+0x134>
3400ee6c:	4b54      	ldr	r3, [pc, #336]	@ (3400efc0 <_strerror_r+0x368>)
3400ee6e:	e78d      	b.n	3400ed8c <_strerror_r+0x134>
3400ee70:	4b54      	ldr	r3, [pc, #336]	@ (3400efc4 <_strerror_r+0x36c>)
3400ee72:	e78b      	b.n	3400ed8c <_strerror_r+0x134>
3400ee74:	4b54      	ldr	r3, [pc, #336]	@ (3400efc8 <_strerror_r+0x370>)
3400ee76:	e789      	b.n	3400ed8c <_strerror_r+0x134>
3400ee78:	4b54      	ldr	r3, [pc, #336]	@ (3400efcc <_strerror_r+0x374>)
3400ee7a:	e787      	b.n	3400ed8c <_strerror_r+0x134>
3400ee7c:	4b54      	ldr	r3, [pc, #336]	@ (3400efd0 <_strerror_r+0x378>)
3400ee7e:	e785      	b.n	3400ed8c <_strerror_r+0x134>
3400ee80:	4b54      	ldr	r3, [pc, #336]	@ (3400efd4 <_strerror_r+0x37c>)
3400ee82:	e783      	b.n	3400ed8c <_strerror_r+0x134>
3400ee84:	4b54      	ldr	r3, [pc, #336]	@ (3400efd8 <_strerror_r+0x380>)
3400ee86:	e781      	b.n	3400ed8c <_strerror_r+0x134>
3400ee88:	4b54      	ldr	r3, [pc, #336]	@ (3400efdc <_strerror_r+0x384>)
3400ee8a:	e77f      	b.n	3400ed8c <_strerror_r+0x134>
3400ee8c:	4b54      	ldr	r3, [pc, #336]	@ (3400efe0 <_strerror_r+0x388>)
3400ee8e:	e77d      	b.n	3400ed8c <_strerror_r+0x134>
3400ee90:	4b54      	ldr	r3, [pc, #336]	@ (3400efe4 <_strerror_r+0x38c>)
3400ee92:	e77b      	b.n	3400ed8c <_strerror_r+0x134>
3400ee94:	4b54      	ldr	r3, [pc, #336]	@ (3400efe8 <_strerror_r+0x390>)
3400ee96:	e779      	b.n	3400ed8c <_strerror_r+0x134>
3400ee98:	4b54      	ldr	r3, [pc, #336]	@ (3400efec <_strerror_r+0x394>)
3400ee9a:	e777      	b.n	3400ed8c <_strerror_r+0x134>
3400ee9c:	4b54      	ldr	r3, [pc, #336]	@ (3400eff0 <_strerror_r+0x398>)
3400ee9e:	e775      	b.n	3400ed8c <_strerror_r+0x134>
3400eea0:	4b54      	ldr	r3, [pc, #336]	@ (3400eff4 <_strerror_r+0x39c>)
3400eea2:	e773      	b.n	3400ed8c <_strerror_r+0x134>
3400eea4:	4b54      	ldr	r3, [pc, #336]	@ (3400eff8 <_strerror_r+0x3a0>)
3400eea6:	e771      	b.n	3400ed8c <_strerror_r+0x134>
3400eea8:	4b54      	ldr	r3, [pc, #336]	@ (3400effc <_strerror_r+0x3a4>)
3400eeaa:	e76f      	b.n	3400ed8c <_strerror_r+0x134>
3400eeac:	4b54      	ldr	r3, [pc, #336]	@ (3400f000 <_strerror_r+0x3a8>)
3400eeae:	e76d      	b.n	3400ed8c <_strerror_r+0x134>
3400eeb0:	4b54      	ldr	r3, [pc, #336]	@ (3400f004 <_strerror_r+0x3ac>)
3400eeb2:	e76b      	b.n	3400ed8c <_strerror_r+0x134>
3400eeb4:	4b54      	ldr	r3, [pc, #336]	@ (3400f008 <_strerror_r+0x3b0>)
3400eeb6:	e769      	b.n	3400ed8c <_strerror_r+0x134>
3400eeb8:	4b54      	ldr	r3, [pc, #336]	@ (3400f00c <_strerror_r+0x3b4>)
3400eeba:	e767      	b.n	3400ed8c <_strerror_r+0x134>
3400eebc:	4b54      	ldr	r3, [pc, #336]	@ (3400f010 <_strerror_r+0x3b8>)
3400eebe:	e765      	b.n	3400ed8c <_strerror_r+0x134>
3400eec0:	4b54      	ldr	r3, [pc, #336]	@ (3400f014 <_strerror_r+0x3bc>)
3400eec2:	e763      	b.n	3400ed8c <_strerror_r+0x134>
3400eec4:	4b54      	ldr	r3, [pc, #336]	@ (3400f018 <_strerror_r+0x3c0>)
3400eec6:	e761      	b.n	3400ed8c <_strerror_r+0x134>
3400eec8:	2a00      	cmp	r2, #0
3400eeca:	bf08      	it	eq
3400eecc:	4622      	moveq	r2, r4
3400eece:	f000 f8b3 	bl	3400f038 <_user_strerror>
3400eed2:	4b52      	ldr	r3, [pc, #328]	@ (3400f01c <_strerror_r+0x3c4>)
3400eed4:	2800      	cmp	r0, #0
3400eed6:	bf18      	it	ne
3400eed8:	4603      	movne	r3, r0
3400eeda:	e757      	b.n	3400ed8c <_strerror_r+0x134>
3400eedc:	4b50      	ldr	r3, [pc, #320]	@ (3400f020 <_strerror_r+0x3c8>)
3400eede:	e755      	b.n	3400ed8c <_strerror_r+0x134>
3400eee0:	34039a47 	.word	0x34039a47
3400eee4:	34039a59 	.word	0x34039a59
3400eee8:	34039a73 	.word	0x34039a73
3400eeec:	34039a83 	.word	0x34039a83
3400eef0:	34039a9b 	.word	0x34039a9b
3400eef4:	34039aa5 	.word	0x34039aa5
3400eef8:	34039abf 	.word	0x34039abf
3400eefc:	34039ad1 	.word	0x34039ad1
3400ef00:	34039ae3 	.word	0x34039ae3
3400ef04:	34039afc 	.word	0x34039afc
3400ef08:	34039b0c 	.word	0x34039b0c
3400ef0c:	34039b18 	.word	0x34039b18
3400ef10:	34039b35 	.word	0x34039b35
3400ef14:	34039b47 	.word	0x34039b47
3400ef18:	34039b58 	.word	0x34039b58
3400ef1c:	34039b6a 	.word	0x34039b6a
3400ef20:	34039b76 	.word	0x34039b76
3400ef24:	34039b8e 	.word	0x34039b8e
3400ef28:	34039b9a 	.word	0x34039b9a
3400ef2c:	34039bac 	.word	0x34039bac
3400ef30:	34039bbb 	.word	0x34039bbb
3400ef34:	34039bcb 	.word	0x34039bcb
3400ef38:	34039bd8 	.word	0x34039bd8
3400ef3c:	34039bf7 	.word	0x34039bf7
3400ef40:	34039c06 	.word	0x34039c06
3400ef44:	34039c17 	.word	0x34039c17
3400ef48:	34039c3b 	.word	0x34039c3b
3400ef4c:	34039c59 	.word	0x34039c59
3400ef50:	34039c77 	.word	0x34039c77
3400ef54:	34039c97 	.word	0x34039c97
3400ef58:	34039cae 	.word	0x34039cae
3400ef5c:	34039cbd 	.word	0x34039cbd
3400ef60:	34039ccc 	.word	0x34039ccc
3400ef64:	34039ce0 	.word	0x34039ce0
3400ef68:	34039cf8 	.word	0x34039cf8
3400ef6c:	34039d06 	.word	0x34039d06
3400ef70:	34039d13 	.word	0x34039d13
3400ef74:	34039d29 	.word	0x34039d29
3400ef78:	34039d38 	.word	0x34039d38
3400ef7c:	34039d44 	.word	0x34039d44
3400ef80:	34039d73 	.word	0x34039d73
3400ef84:	34039d84 	.word	0x34039d84
3400ef88:	34039d9f 	.word	0x34039d9f
3400ef8c:	34039db2 	.word	0x34039db2
3400ef90:	34039dc8 	.word	0x34039dc8
3400ef94:	34039dd1 	.word	0x34039dd1
3400ef98:	34039de8 	.word	0x34039de8
3400ef9c:	34039df0 	.word	0x34039df0
3400efa0:	34039dfd 	.word	0x34039dfd
3400efa4:	34039e12 	.word	0x34039e12
3400efa8:	34039e26 	.word	0x34039e26
3400efac:	34039e3e 	.word	0x34039e3e
3400efb0:	34039e4d 	.word	0x34039e4d
3400efb4:	34039e5e 	.word	0x34039e5e
3400efb8:	34039e71 	.word	0x34039e71
3400efbc:	34039e7d 	.word	0x34039e7d
3400efc0:	34039e96 	.word	0x34039e96
3400efc4:	34039eaa 	.word	0x34039eaa
3400efc8:	34039ec5 	.word	0x34039ec5
3400efcc:	34039edd 	.word	0x34039edd
3400efd0:	34039ef7 	.word	0x34039ef7
3400efd4:	34039eff 	.word	0x34039eff
3400efd8:	34039f2f 	.word	0x34039f2f
3400efdc:	34039f4e 	.word	0x34039f4e
3400efe0:	34039f6d 	.word	0x34039f6d
3400efe4:	34039f84 	.word	0x34039f84
3400efe8:	34039f97 	.word	0x34039f97
3400efec:	34039fb0 	.word	0x34039fb0
3400eff0:	34039fc7 	.word	0x34039fc7
3400eff4:	34039fdd 	.word	0x34039fdd
3400eff8:	34039ffe 	.word	0x34039ffe
3400effc:	3403a016 	.word	0x3403a016
3400f000:	3403a032 	.word	0x3403a032
3400f004:	3403a045 	.word	0x3403a045
3400f008:	3403a05b 	.word	0x3403a05b
3400f00c:	3403a06f 	.word	0x3403a06f
3400f010:	3403a091 	.word	0x3403a091
3400f014:	3403a0b7 	.word	0x3403a0b7
3400f018:	3403a0c8 	.word	0x3403a0c8
3400f01c:	34038f1d 	.word	0x34038f1d
3400f020:	34039a4f 	.word	0x34039a4f

3400f024 <strerror>:
3400f024:	4601      	mov	r1, r0
3400f026:	2300      	movs	r3, #0
3400f028:	4802      	ldr	r0, [pc, #8]	@ (3400f034 <strerror+0x10>)
3400f02a:	461a      	mov	r2, r3
3400f02c:	6800      	ldr	r0, [r0, #0]
3400f02e:	f7ff be13 	b.w	3400ec58 <_strerror_r>
3400f032:	bf00      	nop
3400f034:	3403a6a8 	.word	0x3403a6a8

3400f038 <_user_strerror>:
3400f038:	2000      	movs	r0, #0
3400f03a:	4770      	bx	lr

3400f03c <_localeconv_r>:
3400f03c:	4800      	ldr	r0, [pc, #0]	@ (3400f040 <_localeconv_r+0x4>)
3400f03e:	4770      	bx	lr
3400f040:	3403a7e8 	.word	0x3403a7e8

3400f044 <_close_r>:
3400f044:	b538      	push	{r3, r4, r5, lr}
3400f046:	2300      	movs	r3, #0
3400f048:	4d05      	ldr	r5, [pc, #20]	@ (3400f060 <_close_r+0x1c>)
3400f04a:	4604      	mov	r4, r0
3400f04c:	4608      	mov	r0, r1
3400f04e:	602b      	str	r3, [r5, #0]
3400f050:	f7f2 f85f 	bl	34001112 <_close>
3400f054:	1c43      	adds	r3, r0, #1
3400f056:	d102      	bne.n	3400f05e <_close_r+0x1a>
3400f058:	682b      	ldr	r3, [r5, #0]
3400f05a:	b103      	cbz	r3, 3400f05e <_close_r+0x1a>
3400f05c:	6023      	str	r3, [r4, #0]
3400f05e:	bd38      	pop	{r3, r4, r5, pc}
3400f060:	3403aac4 	.word	0x3403aac4

3400f064 <_lseek_r>:
3400f064:	b538      	push	{r3, r4, r5, lr}
3400f066:	4604      	mov	r4, r0
3400f068:	4d06      	ldr	r5, [pc, #24]	@ (3400f084 <_lseek_r+0x20>)
3400f06a:	4608      	mov	r0, r1
3400f06c:	4611      	mov	r1, r2
3400f06e:	2200      	movs	r2, #0
3400f070:	602a      	str	r2, [r5, #0]
3400f072:	461a      	mov	r2, r3
3400f074:	f7f2 f857 	bl	34001126 <_lseek>
3400f078:	1c43      	adds	r3, r0, #1
3400f07a:	d102      	bne.n	3400f082 <_lseek_r+0x1e>
3400f07c:	682b      	ldr	r3, [r5, #0]
3400f07e:	b103      	cbz	r3, 3400f082 <_lseek_r+0x1e>
3400f080:	6023      	str	r3, [r4, #0]
3400f082:	bd38      	pop	{r3, r4, r5, pc}
3400f084:	3403aac4 	.word	0x3403aac4

3400f088 <_read_r>:
3400f088:	b538      	push	{r3, r4, r5, lr}
3400f08a:	4604      	mov	r4, r0
3400f08c:	4d06      	ldr	r5, [pc, #24]	@ (3400f0a8 <_read_r+0x20>)
3400f08e:	4608      	mov	r0, r1
3400f090:	4611      	mov	r1, r2
3400f092:	2200      	movs	r2, #0
3400f094:	602a      	str	r2, [r5, #0]
3400f096:	461a      	mov	r2, r3
3400f098:	f7f2 f81f 	bl	340010da <_read>
3400f09c:	1c43      	adds	r3, r0, #1
3400f09e:	d102      	bne.n	3400f0a6 <_read_r+0x1e>
3400f0a0:	682b      	ldr	r3, [r5, #0]
3400f0a2:	b103      	cbz	r3, 3400f0a6 <_read_r+0x1e>
3400f0a4:	6023      	str	r3, [r4, #0]
3400f0a6:	bd38      	pop	{r3, r4, r5, pc}
3400f0a8:	3403aac4 	.word	0x3403aac4

3400f0ac <_sbrk_r>:
3400f0ac:	b538      	push	{r3, r4, r5, lr}
3400f0ae:	2300      	movs	r3, #0
3400f0b0:	4d05      	ldr	r5, [pc, #20]	@ (3400f0c8 <_sbrk_r+0x1c>)
3400f0b2:	4604      	mov	r4, r0
3400f0b4:	4608      	mov	r0, r1
3400f0b6:	602b      	str	r3, [r5, #0]
3400f0b8:	f001 fecc 	bl	34010e54 <_sbrk>
3400f0bc:	1c43      	adds	r3, r0, #1
3400f0be:	d102      	bne.n	3400f0c6 <_sbrk_r+0x1a>
3400f0c0:	682b      	ldr	r3, [r5, #0]
3400f0c2:	b103      	cbz	r3, 3400f0c6 <_sbrk_r+0x1a>
3400f0c4:	6023      	str	r3, [r4, #0]
3400f0c6:	bd38      	pop	{r3, r4, r5, pc}
3400f0c8:	3403aac4 	.word	0x3403aac4

3400f0cc <_write_r>:
3400f0cc:	b538      	push	{r3, r4, r5, lr}
3400f0ce:	4604      	mov	r4, r0
3400f0d0:	4d06      	ldr	r5, [pc, #24]	@ (3400f0ec <_write_r+0x20>)
3400f0d2:	4608      	mov	r0, r1
3400f0d4:	4611      	mov	r1, r2
3400f0d6:	2200      	movs	r2, #0
3400f0d8:	602a      	str	r2, [r5, #0]
3400f0da:	461a      	mov	r2, r3
3400f0dc:	f7f2 f80b 	bl	340010f6 <_write>
3400f0e0:	1c43      	adds	r3, r0, #1
3400f0e2:	d102      	bne.n	3400f0ea <_write_r+0x1e>
3400f0e4:	682b      	ldr	r3, [r5, #0]
3400f0e6:	b103      	cbz	r3, 3400f0ea <_write_r+0x1e>
3400f0e8:	6023      	str	r3, [r4, #0]
3400f0ea:	bd38      	pop	{r3, r4, r5, pc}
3400f0ec:	3403aac4 	.word	0x3403aac4

3400f0f0 <__errno>:
3400f0f0:	4b01      	ldr	r3, [pc, #4]	@ (3400f0f8 <__errno+0x8>)
3400f0f2:	6818      	ldr	r0, [r3, #0]
3400f0f4:	4770      	bx	lr
3400f0f6:	bf00      	nop
3400f0f8:	3403a6a8 	.word	0x3403a6a8

3400f0fc <__libc_init_array>:
3400f0fc:	b570      	push	{r4, r5, r6, lr}
3400f0fe:	4d0d      	ldr	r5, [pc, #52]	@ (3400f134 <__libc_init_array+0x38>)
3400f100:	2600      	movs	r6, #0
3400f102:	4c0d      	ldr	r4, [pc, #52]	@ (3400f138 <__libc_init_array+0x3c>)
3400f104:	1b64      	subs	r4, r4, r5
3400f106:	10a4      	asrs	r4, r4, #2
3400f108:	42a6      	cmp	r6, r4
3400f10a:	d109      	bne.n	3400f120 <__libc_init_array+0x24>
3400f10c:	4d0b      	ldr	r5, [pc, #44]	@ (3400f13c <__libc_init_array+0x40>)
3400f10e:	2600      	movs	r6, #0
3400f110:	4c0b      	ldr	r4, [pc, #44]	@ (3400f140 <__libc_init_array+0x44>)
3400f112:	f001 fead 	bl	34010e70 <_init>
3400f116:	1b64      	subs	r4, r4, r5
3400f118:	10a4      	asrs	r4, r4, #2
3400f11a:	42a6      	cmp	r6, r4
3400f11c:	d105      	bne.n	3400f12a <__libc_init_array+0x2e>
3400f11e:	bd70      	pop	{r4, r5, r6, pc}
3400f120:	f855 3b04 	ldr.w	r3, [r5], #4
3400f124:	3601      	adds	r6, #1
3400f126:	4798      	blx	r3
3400f128:	e7ee      	b.n	3400f108 <__libc_init_array+0xc>
3400f12a:	f855 3b04 	ldr.w	r3, [r5], #4
3400f12e:	3601      	adds	r6, #1
3400f130:	4798      	blx	r3
3400f132:	e7f2      	b.n	3400f11a <__libc_init_array+0x1e>
3400f134:	3403a658 	.word	0x3403a658
3400f138:	3403a658 	.word	0x3403a658
3400f13c:	3403a658 	.word	0x3403a658
3400f140:	3403a65c 	.word	0x3403a65c

3400f144 <__retarget_lock_init_recursive>:
3400f144:	4770      	bx	lr

3400f146 <__retarget_lock_acquire_recursive>:
3400f146:	4770      	bx	lr

3400f148 <__retarget_lock_release_recursive>:
3400f148:	4770      	bx	lr

3400f14a <memchr>:
3400f14a:	b2c9      	uxtb	r1, r1
3400f14c:	4603      	mov	r3, r0
3400f14e:	4402      	add	r2, r0
3400f150:	b510      	push	{r4, lr}
3400f152:	4293      	cmp	r3, r2
3400f154:	4618      	mov	r0, r3
3400f156:	d101      	bne.n	3400f15c <memchr+0x12>
3400f158:	2000      	movs	r0, #0
3400f15a:	e003      	b.n	3400f164 <memchr+0x1a>
3400f15c:	7804      	ldrb	r4, [r0, #0]
3400f15e:	3301      	adds	r3, #1
3400f160:	428c      	cmp	r4, r1
3400f162:	d1f6      	bne.n	3400f152 <memchr+0x8>
3400f164:	bd10      	pop	{r4, pc}

3400f166 <memcpy>:
3400f166:	440a      	add	r2, r1
3400f168:	1e43      	subs	r3, r0, #1
3400f16a:	4291      	cmp	r1, r2
3400f16c:	d100      	bne.n	3400f170 <memcpy+0xa>
3400f16e:	4770      	bx	lr
3400f170:	b510      	push	{r4, lr}
3400f172:	f811 4b01 	ldrb.w	r4, [r1], #1
3400f176:	4291      	cmp	r1, r2
3400f178:	f803 4f01 	strb.w	r4, [r3, #1]!
3400f17c:	d1f9      	bne.n	3400f172 <memcpy+0xc>
3400f17e:	bd10      	pop	{r4, pc}

3400f180 <abort>:
3400f180:	2006      	movs	r0, #6
3400f182:	b508      	push	{r3, lr}
3400f184:	f001 fc30 	bl	340109e8 <raise>
3400f188:	2001      	movs	r0, #1
3400f18a:	f7f1 ffa0 	bl	340010ce <_exit>

3400f18e <quorem>:
3400f18e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400f192:	6903      	ldr	r3, [r0, #16]
3400f194:	4607      	mov	r7, r0
3400f196:	690c      	ldr	r4, [r1, #16]
3400f198:	42a3      	cmp	r3, r4
3400f19a:	f2c0 8083 	blt.w	3400f2a4 <quorem+0x116>
3400f19e:	3c01      	subs	r4, #1
3400f1a0:	f100 0514 	add.w	r5, r0, #20
3400f1a4:	f101 0814 	add.w	r8, r1, #20
3400f1a8:	00a3      	lsls	r3, r4, #2
3400f1aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400f1ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3400f1b2:	9300      	str	r3, [sp, #0]
3400f1b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400f1b8:	9301      	str	r3, [sp, #4]
3400f1ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3400f1be:	3301      	adds	r3, #1
3400f1c0:	429a      	cmp	r2, r3
3400f1c2:	fbb2 f6f3 	udiv	r6, r2, r3
3400f1c6:	d331      	bcc.n	3400f22c <quorem+0x9e>
3400f1c8:	f04f 0a00 	mov.w	sl, #0
3400f1cc:	46c4      	mov	ip, r8
3400f1ce:	46ae      	mov	lr, r5
3400f1d0:	46d3      	mov	fp, sl
3400f1d2:	f85c 3b04 	ldr.w	r3, [ip], #4
3400f1d6:	b298      	uxth	r0, r3
3400f1d8:	45e1      	cmp	r9, ip
3400f1da:	ea4f 4313 	mov.w	r3, r3, lsr #16
3400f1de:	fb06 a000 	mla	r0, r6, r0, sl
3400f1e2:	ea4f 4210 	mov.w	r2, r0, lsr #16
3400f1e6:	b280      	uxth	r0, r0
3400f1e8:	fb06 2303 	mla	r3, r6, r3, r2
3400f1ec:	f8de 2000 	ldr.w	r2, [lr]
3400f1f0:	b292      	uxth	r2, r2
3400f1f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3400f1f6:	eba2 0200 	sub.w	r2, r2, r0
3400f1fa:	b29b      	uxth	r3, r3
3400f1fc:	f8de 0000 	ldr.w	r0, [lr]
3400f200:	445a      	add	r2, fp
3400f202:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3400f206:	b292      	uxth	r2, r2
3400f208:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3400f20c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3400f210:	ea4f 4b23 	mov.w	fp, r3, asr #16
3400f214:	f84e 2b04 	str.w	r2, [lr], #4
3400f218:	d2db      	bcs.n	3400f1d2 <quorem+0x44>
3400f21a:	9b00      	ldr	r3, [sp, #0]
3400f21c:	58eb      	ldr	r3, [r5, r3]
3400f21e:	b92b      	cbnz	r3, 3400f22c <quorem+0x9e>
3400f220:	9b01      	ldr	r3, [sp, #4]
3400f222:	3b04      	subs	r3, #4
3400f224:	429d      	cmp	r5, r3
3400f226:	461a      	mov	r2, r3
3400f228:	d330      	bcc.n	3400f28c <quorem+0xfe>
3400f22a:	613c      	str	r4, [r7, #16]
3400f22c:	4638      	mov	r0, r7
3400f22e:	f001 f857 	bl	340102e0 <__mcmp>
3400f232:	2800      	cmp	r0, #0
3400f234:	db26      	blt.n	3400f284 <quorem+0xf6>
3400f236:	4629      	mov	r1, r5
3400f238:	2000      	movs	r0, #0
3400f23a:	f858 2b04 	ldr.w	r2, [r8], #4
3400f23e:	f8d1 c000 	ldr.w	ip, [r1]
3400f242:	fa1f fe82 	uxth.w	lr, r2
3400f246:	45c1      	cmp	r9, r8
3400f248:	fa1f f38c 	uxth.w	r3, ip
3400f24c:	ea4f 4212 	mov.w	r2, r2, lsr #16
3400f250:	eba3 030e 	sub.w	r3, r3, lr
3400f254:	4403      	add	r3, r0
3400f256:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3400f25a:	b29b      	uxth	r3, r3
3400f25c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3400f260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3400f264:	ea4f 4022 	mov.w	r0, r2, asr #16
3400f268:	f841 3b04 	str.w	r3, [r1], #4
3400f26c:	d2e5      	bcs.n	3400f23a <quorem+0xac>
3400f26e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3400f272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3400f276:	b922      	cbnz	r2, 3400f282 <quorem+0xf4>
3400f278:	3b04      	subs	r3, #4
3400f27a:	429d      	cmp	r5, r3
3400f27c:	461a      	mov	r2, r3
3400f27e:	d30b      	bcc.n	3400f298 <quorem+0x10a>
3400f280:	613c      	str	r4, [r7, #16]
3400f282:	3601      	adds	r6, #1
3400f284:	4630      	mov	r0, r6
3400f286:	b003      	add	sp, #12
3400f288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400f28c:	6812      	ldr	r2, [r2, #0]
3400f28e:	3b04      	subs	r3, #4
3400f290:	2a00      	cmp	r2, #0
3400f292:	d1ca      	bne.n	3400f22a <quorem+0x9c>
3400f294:	3c01      	subs	r4, #1
3400f296:	e7c5      	b.n	3400f224 <quorem+0x96>
3400f298:	6812      	ldr	r2, [r2, #0]
3400f29a:	3b04      	subs	r3, #4
3400f29c:	2a00      	cmp	r2, #0
3400f29e:	d1ef      	bne.n	3400f280 <quorem+0xf2>
3400f2a0:	3c01      	subs	r4, #1
3400f2a2:	e7ea      	b.n	3400f27a <quorem+0xec>
3400f2a4:	2000      	movs	r0, #0
3400f2a6:	e7ee      	b.n	3400f286 <quorem+0xf8>

3400f2a8 <_dtoa_r>:
3400f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400f2ac:	69c7      	ldr	r7, [r0, #28]
3400f2ae:	4681      	mov	r9, r0
3400f2b0:	ed2d 8b02 	vpush	{d8}
3400f2b4:	b091      	sub	sp, #68	@ 0x44
3400f2b6:	ec55 4b10 	vmov	r4, r5, d0
3400f2ba:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3400f2bc:	9107      	str	r1, [sp, #28]
3400f2be:	9209      	str	r2, [sp, #36]	@ 0x24
3400f2c0:	930d      	str	r3, [sp, #52]	@ 0x34
3400f2c2:	ed8d 0b02 	vstr	d0, [sp, #8]
3400f2c6:	b97f      	cbnz	r7, 3400f2e8 <_dtoa_r+0x40>
3400f2c8:	2010      	movs	r0, #16
3400f2ca:	f7fe fdaf 	bl	3400de2c <malloc>
3400f2ce:	4602      	mov	r2, r0
3400f2d0:	f8c9 001c 	str.w	r0, [r9, #28]
3400f2d4:	b920      	cbnz	r0, 3400f2e0 <_dtoa_r+0x38>
3400f2d6:	4ba0      	ldr	r3, [pc, #640]	@ (3400f558 <_dtoa_r+0x2b0>)
3400f2d8:	21ef      	movs	r1, #239	@ 0xef
3400f2da:	48a0      	ldr	r0, [pc, #640]	@ (3400f55c <_dtoa_r+0x2b4>)
3400f2dc:	f7fe fd88 	bl	3400ddf0 <__assert_func>
3400f2e0:	e9c0 7701 	strd	r7, r7, [r0, #4]
3400f2e4:	6007      	str	r7, [r0, #0]
3400f2e6:	60c7      	str	r7, [r0, #12]
3400f2e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400f2ec:	6819      	ldr	r1, [r3, #0]
3400f2ee:	b159      	cbz	r1, 3400f308 <_dtoa_r+0x60>
3400f2f0:	685a      	ldr	r2, [r3, #4]
3400f2f2:	2301      	movs	r3, #1
3400f2f4:	4648      	mov	r0, r9
3400f2f6:	4093      	lsls	r3, r2
3400f2f8:	604a      	str	r2, [r1, #4]
3400f2fa:	608b      	str	r3, [r1, #8]
3400f2fc:	f000 fdb4 	bl	3400fe68 <_Bfree>
3400f300:	f8d9 301c 	ldr.w	r3, [r9, #28]
3400f304:	2200      	movs	r2, #0
3400f306:	601a      	str	r2, [r3, #0]
3400f308:	1e2b      	subs	r3, r5, #0
3400f30a:	bfb7      	itett	lt
3400f30c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3400f310:	2300      	movge	r3, #0
3400f312:	2201      	movlt	r2, #1
3400f314:	9303      	strlt	r3, [sp, #12]
3400f316:	bfac      	ite	ge
3400f318:	6033      	strge	r3, [r6, #0]
3400f31a:	6032      	strlt	r2, [r6, #0]
3400f31c:	4b90      	ldr	r3, [pc, #576]	@ (3400f560 <_dtoa_r+0x2b8>)
3400f31e:	9e03      	ldr	r6, [sp, #12]
3400f320:	43b3      	bics	r3, r6
3400f322:	d110      	bne.n	3400f346 <_dtoa_r+0x9e>
3400f324:	f242 730f 	movw	r3, #9999	@ 0x270f
3400f328:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400f32a:	6013      	str	r3, [r2, #0]
3400f32c:	f3c6 0313 	ubfx	r3, r6, #0, #20
3400f330:	4323      	orrs	r3, r4
3400f332:	f000 84de 	beq.w	3400fcf2 <_dtoa_r+0xa4a>
3400f336:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f338:	4f8a      	ldr	r7, [pc, #552]	@ (3400f564 <_dtoa_r+0x2bc>)
3400f33a:	2b00      	cmp	r3, #0
3400f33c:	f000 84e0 	beq.w	3400fd00 <_dtoa_r+0xa58>
3400f340:	1cfb      	adds	r3, r7, #3
3400f342:	f000 bcdb 	b.w	3400fcfc <_dtoa_r+0xa54>
3400f346:	ed9d 8b02 	vldr	d8, [sp, #8]
3400f34a:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400f34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f352:	d10a      	bne.n	3400f36a <_dtoa_r+0xc2>
3400f354:	2301      	movs	r3, #1
3400f356:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400f358:	6013      	str	r3, [r2, #0]
3400f35a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f35c:	b113      	cbz	r3, 3400f364 <_dtoa_r+0xbc>
3400f35e:	4b82      	ldr	r3, [pc, #520]	@ (3400f568 <_dtoa_r+0x2c0>)
3400f360:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400f362:	6013      	str	r3, [r2, #0]
3400f364:	4f81      	ldr	r7, [pc, #516]	@ (3400f56c <_dtoa_r+0x2c4>)
3400f366:	f000 bccb 	b.w	3400fd00 <_dtoa_r+0xa58>
3400f36a:	aa0e      	add	r2, sp, #56	@ 0x38
3400f36c:	eeb0 0b48 	vmov.f64	d0, d8
3400f370:	a90f      	add	r1, sp, #60	@ 0x3c
3400f372:	4648      	mov	r0, r9
3400f374:	f001 f868 	bl	34010448 <__d2b>
3400f378:	f3c6 530a 	ubfx	r3, r6, #20, #11
3400f37c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400f37e:	9001      	str	r0, [sp, #4]
3400f380:	2b00      	cmp	r3, #0
3400f382:	d045      	beq.n	3400f410 <_dtoa_r+0x168>
3400f384:	ee18 1a90 	vmov	r1, s17
3400f388:	eeb0 7b48 	vmov.f64	d7, d8
3400f38c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3400f390:	2500      	movs	r5, #0
3400f392:	f3c1 0113 	ubfx	r1, r1, #0, #20
3400f396:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3400f39a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3400f39e:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3400f3a2:	ee07 1a90 	vmov	s15, r1
3400f3a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3400f540 <_dtoa_r+0x298>
3400f3aa:	ee37 7b46 	vsub.f64	d7, d7, d6
3400f3ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3400f548 <_dtoa_r+0x2a0>
3400f3b2:	eea7 6b05 	vfma.f64	d6, d7, d5
3400f3b6:	ee07 3a90 	vmov	s15, r3
3400f3ba:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3400f3be:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3400f550 <_dtoa_r+0x2a8>
3400f3c2:	eeb0 7b46 	vmov.f64	d7, d6
3400f3c6:	eea4 7b05 	vfma.f64	d7, d4, d5
3400f3ca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3400f3ce:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3400f3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f3d6:	ee16 8a90 	vmov	r8, s13
3400f3da:	d508      	bpl.n	3400f3ee <_dtoa_r+0x146>
3400f3dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3400f3e0:	eeb4 6b47 	vcmp.f64	d6, d7
3400f3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f3e8:	bf18      	it	ne
3400f3ea:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3400f3ee:	f1b8 0f16 	cmp.w	r8, #22
3400f3f2:	d82d      	bhi.n	3400f450 <_dtoa_r+0x1a8>
3400f3f4:	495e      	ldr	r1, [pc, #376]	@ (3400f570 <_dtoa_r+0x2c8>)
3400f3f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3400f3fa:	ed91 7b00 	vldr	d7, [r1]
3400f3fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
3400f402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f406:	d501      	bpl.n	3400f40c <_dtoa_r+0x164>
3400f408:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3400f40c:	2100      	movs	r1, #0
3400f40e:	e020      	b.n	3400f452 <_dtoa_r+0x1aa>
3400f410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3400f412:	2501      	movs	r5, #1
3400f414:	4413      	add	r3, r2
3400f416:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3400f41a:	2920      	cmp	r1, #32
3400f41c:	bfc9      	itett	gt
3400f41e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3400f422:	f1c1 0120 	rsble	r1, r1, #32
3400f426:	408e      	lslgt	r6, r1
3400f428:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3400f42c:	bfd8      	it	le
3400f42e:	fa04 f101 	lslle.w	r1, r4, r1
3400f432:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3400f436:	bfc4      	itt	gt
3400f438:	fa24 f101 	lsrgt.w	r1, r4, r1
3400f43c:	4331      	orrgt	r1, r6
3400f43e:	ee07 1a90 	vmov	s15, r1
3400f442:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3400f446:	ee17 1a90 	vmov	r1, s15
3400f44a:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3400f44e:	e7a6      	b.n	3400f39e <_dtoa_r+0xf6>
3400f450:	2101      	movs	r1, #1
3400f452:	1ad2      	subs	r2, r2, r3
3400f454:	910c      	str	r1, [sp, #48]	@ 0x30
3400f456:	1e53      	subs	r3, r2, #1
3400f458:	9306      	str	r3, [sp, #24]
3400f45a:	bf49      	itett	mi
3400f45c:	f1c2 0301 	rsbmi	r3, r2, #1
3400f460:	2300      	movpl	r3, #0
3400f462:	9305      	strmi	r3, [sp, #20]
3400f464:	2300      	movmi	r3, #0
3400f466:	bf54      	ite	pl
3400f468:	9305      	strpl	r3, [sp, #20]
3400f46a:	9306      	strmi	r3, [sp, #24]
3400f46c:	f1b8 0f00 	cmp.w	r8, #0
3400f470:	db16      	blt.n	3400f4a0 <_dtoa_r+0x1f8>
3400f472:	9b06      	ldr	r3, [sp, #24]
3400f474:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3400f478:	4443      	add	r3, r8
3400f47a:	9306      	str	r3, [sp, #24]
3400f47c:	2300      	movs	r3, #0
3400f47e:	9a07      	ldr	r2, [sp, #28]
3400f480:	2a09      	cmp	r2, #9
3400f482:	d847      	bhi.n	3400f514 <_dtoa_r+0x26c>
3400f484:	2a05      	cmp	r2, #5
3400f486:	bfc5      	ittet	gt
3400f488:	3a04      	subgt	r2, #4
3400f48a:	2400      	movgt	r4, #0
3400f48c:	2401      	movle	r4, #1
3400f48e:	9207      	strgt	r2, [sp, #28]
3400f490:	9a07      	ldr	r2, [sp, #28]
3400f492:	3a02      	subs	r2, #2
3400f494:	2a03      	cmp	r2, #3
3400f496:	d848      	bhi.n	3400f52a <_dtoa_r+0x282>
3400f498:	e8df f002 	tbb	[pc, r2]
3400f49c:	3a2c2e0b 	.word	0x3a2c2e0b
3400f4a0:	9b05      	ldr	r3, [sp, #20]
3400f4a2:	2200      	movs	r2, #0
3400f4a4:	eba3 0308 	sub.w	r3, r3, r8
3400f4a8:	920a      	str	r2, [sp, #40]	@ 0x28
3400f4aa:	9305      	str	r3, [sp, #20]
3400f4ac:	f1c8 0300 	rsb	r3, r8, #0
3400f4b0:	e7e5      	b.n	3400f47e <_dtoa_r+0x1d6>
3400f4b2:	2200      	movs	r2, #0
3400f4b4:	9208      	str	r2, [sp, #32]
3400f4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400f4b8:	2a00      	cmp	r2, #0
3400f4ba:	dc39      	bgt.n	3400f530 <_dtoa_r+0x288>
3400f4bc:	f04f 0b01 	mov.w	fp, #1
3400f4c0:	46da      	mov	sl, fp
3400f4c2:	465a      	mov	r2, fp
3400f4c4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3400f4c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
3400f4cc:	2100      	movs	r1, #0
3400f4ce:	2004      	movs	r0, #4
3400f4d0:	f100 0614 	add.w	r6, r0, #20
3400f4d4:	4296      	cmp	r6, r2
3400f4d6:	d930      	bls.n	3400f53a <_dtoa_r+0x292>
3400f4d8:	6079      	str	r1, [r7, #4]
3400f4da:	4648      	mov	r0, r9
3400f4dc:	9304      	str	r3, [sp, #16]
3400f4de:	f000 fc83 	bl	3400fde8 <_Balloc>
3400f4e2:	9b04      	ldr	r3, [sp, #16]
3400f4e4:	4607      	mov	r7, r0
3400f4e6:	2800      	cmp	r0, #0
3400f4e8:	d146      	bne.n	3400f578 <_dtoa_r+0x2d0>
3400f4ea:	4b22      	ldr	r3, [pc, #136]	@ (3400f574 <_dtoa_r+0x2cc>)
3400f4ec:	4602      	mov	r2, r0
3400f4ee:	f240 11af 	movw	r1, #431	@ 0x1af
3400f4f2:	e6f2      	b.n	3400f2da <_dtoa_r+0x32>
3400f4f4:	2201      	movs	r2, #1
3400f4f6:	e7dd      	b.n	3400f4b4 <_dtoa_r+0x20c>
3400f4f8:	2200      	movs	r2, #0
3400f4fa:	9208      	str	r2, [sp, #32]
3400f4fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400f4fe:	eb08 0b02 	add.w	fp, r8, r2
3400f502:	f10b 0a01 	add.w	sl, fp, #1
3400f506:	4652      	mov	r2, sl
3400f508:	2a01      	cmp	r2, #1
3400f50a:	bfb8      	it	lt
3400f50c:	2201      	movlt	r2, #1
3400f50e:	e7db      	b.n	3400f4c8 <_dtoa_r+0x220>
3400f510:	2201      	movs	r2, #1
3400f512:	e7f2      	b.n	3400f4fa <_dtoa_r+0x252>
3400f514:	2401      	movs	r4, #1
3400f516:	2200      	movs	r2, #0
3400f518:	e9cd 2407 	strd	r2, r4, [sp, #28]
3400f51c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3400f520:	2100      	movs	r1, #0
3400f522:	2212      	movs	r2, #18
3400f524:	46da      	mov	sl, fp
3400f526:	9109      	str	r1, [sp, #36]	@ 0x24
3400f528:	e7ce      	b.n	3400f4c8 <_dtoa_r+0x220>
3400f52a:	2201      	movs	r2, #1
3400f52c:	9208      	str	r2, [sp, #32]
3400f52e:	e7f5      	b.n	3400f51c <_dtoa_r+0x274>
3400f530:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
3400f534:	46da      	mov	sl, fp
3400f536:	465a      	mov	r2, fp
3400f538:	e7c6      	b.n	3400f4c8 <_dtoa_r+0x220>
3400f53a:	3101      	adds	r1, #1
3400f53c:	0040      	lsls	r0, r0, #1
3400f53e:	e7c7      	b.n	3400f4d0 <_dtoa_r+0x228>
3400f540:	636f4361 	.word	0x636f4361
3400f544:	3fd287a7 	.word	0x3fd287a7
3400f548:	8b60c8b3 	.word	0x8b60c8b3
3400f54c:	3fc68a28 	.word	0x3fc68a28
3400f550:	509f79fb 	.word	0x509f79fb
3400f554:	3fd34413 	.word	0x3fd34413
3400f558:	3403a0ea 	.word	0x3403a0ea
3400f55c:	3403a101 	.word	0x3403a101
3400f560:	7ff00000 	.word	0x7ff00000
3400f564:	3403a0e6 	.word	0x3403a0e6
3400f568:	34039148 	.word	0x34039148
3400f56c:	34039147 	.word	0x34039147
3400f570:	3403a1f8 	.word	0x3403a1f8
3400f574:	3403a159 	.word	0x3403a159
3400f578:	f8d9 201c 	ldr.w	r2, [r9, #28]
3400f57c:	f1ba 0f0e 	cmp.w	sl, #14
3400f580:	6010      	str	r0, [r2, #0]
3400f582:	d86f      	bhi.n	3400f664 <_dtoa_r+0x3bc>
3400f584:	2c00      	cmp	r4, #0
3400f586:	d06d      	beq.n	3400f664 <_dtoa_r+0x3bc>
3400f588:	f1b8 0f00 	cmp.w	r8, #0
3400f58c:	f340 80c2 	ble.w	3400f714 <_dtoa_r+0x46c>
3400f590:	f008 010f 	and.w	r1, r8, #15
3400f594:	4ac9      	ldr	r2, [pc, #804]	@ (3400f8bc <_dtoa_r+0x614>)
3400f596:	f418 7f80 	tst.w	r8, #256	@ 0x100
3400f59a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3400f59e:	ea4f 1128 	mov.w	r1, r8, asr #4
3400f5a2:	ed92 7b00 	vldr	d7, [r2]
3400f5a6:	f000 80a9 	beq.w	3400f6fc <_dtoa_r+0x454>
3400f5aa:	4ac5      	ldr	r2, [pc, #788]	@ (3400f8c0 <_dtoa_r+0x618>)
3400f5ac:	f001 010f 	and.w	r1, r1, #15
3400f5b0:	ed92 6b08 	vldr	d6, [r2, #32]
3400f5b4:	2203      	movs	r2, #3
3400f5b6:	ee88 6b06 	vdiv.f64	d6, d8, d6
3400f5ba:	ed8d 6b02 	vstr	d6, [sp, #8]
3400f5be:	48c0      	ldr	r0, [pc, #768]	@ (3400f8c0 <_dtoa_r+0x618>)
3400f5c0:	2900      	cmp	r1, #0
3400f5c2:	f040 809d 	bne.w	3400f700 <_dtoa_r+0x458>
3400f5c6:	ed9d 6b02 	vldr	d6, [sp, #8]
3400f5ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
3400f5ce:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f5d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
3400f5d4:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f5d8:	2900      	cmp	r1, #0
3400f5da:	f000 80c1 	beq.w	3400f760 <_dtoa_r+0x4b8>
3400f5de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3400f5e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400f5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f5ea:	f140 80b9 	bpl.w	3400f760 <_dtoa_r+0x4b8>
3400f5ee:	f1ba 0f00 	cmp.w	sl, #0
3400f5f2:	f000 80b5 	beq.w	3400f760 <_dtoa_r+0x4b8>
3400f5f6:	f1bb 0f00 	cmp.w	fp, #0
3400f5fa:	dd31      	ble.n	3400f660 <_dtoa_r+0x3b8>
3400f5fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3400f600:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3400f604:	3201      	adds	r2, #1
3400f606:	465c      	mov	r4, fp
3400f608:	9104      	str	r1, [sp, #16]
3400f60a:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f60e:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f612:	ee07 2a90 	vmov	s15, r2
3400f616:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3400f61a:	ed9d 6b02 	vldr	d6, [sp, #8]
3400f61e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3400f622:	eea7 5b06 	vfma.f64	d5, d7, d6
3400f626:	ee15 2a90 	vmov	r2, s11
3400f62a:	ec51 0b15 	vmov	r0, r1, d5
3400f62e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3400f632:	2c00      	cmp	r4, #0
3400f634:	f040 8098 	bne.w	3400f768 <_dtoa_r+0x4c0>
3400f638:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400f63c:	ee36 6b47 	vsub.f64	d6, d6, d7
3400f640:	ec41 0b17 	vmov	d7, r0, r1
3400f644:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f64c:	f300 8261 	bgt.w	3400fb12 <_dtoa_r+0x86a>
3400f650:	eeb1 7b47 	vneg.f64	d7, d7
3400f654:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f65c:	f100 80f5 	bmi.w	3400f84a <_dtoa_r+0x5a2>
3400f660:	ed8d 8b02 	vstr	d8, [sp, #8]
3400f664:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3400f666:	2a00      	cmp	r2, #0
3400f668:	f2c0 812c 	blt.w	3400f8c4 <_dtoa_r+0x61c>
3400f66c:	f1b8 0f0e 	cmp.w	r8, #14
3400f670:	f300 8128 	bgt.w	3400f8c4 <_dtoa_r+0x61c>
3400f674:	4b91      	ldr	r3, [pc, #580]	@ (3400f8bc <_dtoa_r+0x614>)
3400f676:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3400f67a:	ed93 6b00 	vldr	d6, [r3]
3400f67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f680:	2b00      	cmp	r3, #0
3400f682:	da03      	bge.n	3400f68c <_dtoa_r+0x3e4>
3400f684:	f1ba 0f00 	cmp.w	sl, #0
3400f688:	f340 80d2 	ble.w	3400f830 <_dtoa_r+0x588>
3400f68c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3400f690:	463e      	mov	r6, r7
3400f692:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f696:	ee87 5b06 	vdiv.f64	d5, d7, d6
3400f69a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3400f69e:	ee15 3a10 	vmov	r3, s10
3400f6a2:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3400f6a6:	3330      	adds	r3, #48	@ 0x30
3400f6a8:	eea3 7b46 	vfms.f64	d7, d3, d6
3400f6ac:	f806 3b01 	strb.w	r3, [r6], #1
3400f6b0:	1bf3      	subs	r3, r6, r7
3400f6b2:	459a      	cmp	sl, r3
3400f6b4:	f040 80f8 	bne.w	3400f8a8 <_dtoa_r+0x600>
3400f6b8:	ee37 7b07 	vadd.f64	d7, d7, d7
3400f6bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400f6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f6c4:	f300 80dd 	bgt.w	3400f882 <_dtoa_r+0x5da>
3400f6c8:	eeb4 7b46 	vcmp.f64	d7, d6
3400f6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f6d0:	d104      	bne.n	3400f6dc <_dtoa_r+0x434>
3400f6d2:	ee15 3a10 	vmov	r3, s10
3400f6d6:	07db      	lsls	r3, r3, #31
3400f6d8:	f100 80d3 	bmi.w	3400f882 <_dtoa_r+0x5da>
3400f6dc:	9901      	ldr	r1, [sp, #4]
3400f6de:	4648      	mov	r0, r9
3400f6e0:	f000 fbc2 	bl	3400fe68 <_Bfree>
3400f6e4:	2300      	movs	r3, #0
3400f6e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3400f6e8:	7033      	strb	r3, [r6, #0]
3400f6ea:	f108 0301 	add.w	r3, r8, #1
3400f6ee:	6013      	str	r3, [r2, #0]
3400f6f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400f6f2:	2b00      	cmp	r3, #0
3400f6f4:	f000 8304 	beq.w	3400fd00 <_dtoa_r+0xa58>
3400f6f8:	601e      	str	r6, [r3, #0]
3400f6fa:	e301      	b.n	3400fd00 <_dtoa_r+0xa58>
3400f6fc:	2202      	movs	r2, #2
3400f6fe:	e75e      	b.n	3400f5be <_dtoa_r+0x316>
3400f700:	07cc      	lsls	r4, r1, #31
3400f702:	d504      	bpl.n	3400f70e <_dtoa_r+0x466>
3400f704:	3201      	adds	r2, #1
3400f706:	ed90 6b00 	vldr	d6, [r0]
3400f70a:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f70e:	1049      	asrs	r1, r1, #1
3400f710:	3008      	adds	r0, #8
3400f712:	e755      	b.n	3400f5c0 <_dtoa_r+0x318>
3400f714:	d022      	beq.n	3400f75c <_dtoa_r+0x4b4>
3400f716:	f1c8 0100 	rsb	r1, r8, #0
3400f71a:	4a68      	ldr	r2, [pc, #416]	@ (3400f8bc <_dtoa_r+0x614>)
3400f71c:	2400      	movs	r4, #0
3400f71e:	f001 000f 	and.w	r0, r1, #15
3400f722:	1109      	asrs	r1, r1, #4
3400f724:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3400f728:	4865      	ldr	r0, [pc, #404]	@ (3400f8c0 <_dtoa_r+0x618>)
3400f72a:	ed92 7b00 	vldr	d7, [r2]
3400f72e:	2202      	movs	r2, #2
3400f730:	ee28 7b07 	vmul.f64	d7, d8, d7
3400f734:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f738:	b929      	cbnz	r1, 3400f746 <_dtoa_r+0x49e>
3400f73a:	2c00      	cmp	r4, #0
3400f73c:	f43f af49 	beq.w	3400f5d2 <_dtoa_r+0x32a>
3400f740:	ed8d 7b02 	vstr	d7, [sp, #8]
3400f744:	e745      	b.n	3400f5d2 <_dtoa_r+0x32a>
3400f746:	07ce      	lsls	r6, r1, #31
3400f748:	d505      	bpl.n	3400f756 <_dtoa_r+0x4ae>
3400f74a:	3201      	adds	r2, #1
3400f74c:	2401      	movs	r4, #1
3400f74e:	ed90 6b00 	vldr	d6, [r0]
3400f752:	ee27 7b06 	vmul.f64	d7, d7, d6
3400f756:	1049      	asrs	r1, r1, #1
3400f758:	3008      	adds	r0, #8
3400f75a:	e7ed      	b.n	3400f738 <_dtoa_r+0x490>
3400f75c:	2202      	movs	r2, #2
3400f75e:	e738      	b.n	3400f5d2 <_dtoa_r+0x32a>
3400f760:	4654      	mov	r4, sl
3400f762:	f8cd 8010 	str.w	r8, [sp, #16]
3400f766:	e754      	b.n	3400f612 <_dtoa_r+0x36a>
3400f768:	4a54      	ldr	r2, [pc, #336]	@ (3400f8bc <_dtoa_r+0x614>)
3400f76a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3400f76e:	443c      	add	r4, r7
3400f770:	ed12 4b02 	vldr	d4, [r2, #-8]
3400f774:	9a08      	ldr	r2, [sp, #32]
3400f776:	ec41 0b17 	vmov	d7, r0, r1
3400f77a:	b34a      	cbz	r2, 3400f7d0 <_dtoa_r+0x528>
3400f77c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3400f780:	463e      	mov	r6, r7
3400f782:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3400f786:	ee83 5b04 	vdiv.f64	d5, d3, d4
3400f78a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400f78e:	ee35 7b47 	vsub.f64	d7, d5, d7
3400f792:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400f796:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400f79a:	ee14 2a90 	vmov	r2, s9
3400f79e:	3230      	adds	r2, #48	@ 0x30
3400f7a0:	ee36 6b45 	vsub.f64	d6, d6, d5
3400f7a4:	f806 2b01 	strb.w	r2, [r6], #1
3400f7a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f7b0:	d438      	bmi.n	3400f824 <_dtoa_r+0x57c>
3400f7b2:	ee32 5b46 	vsub.f64	d5, d2, d6
3400f7b6:	eeb4 5bc7 	vcmpe.f64	d5, d7
3400f7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f7be:	d462      	bmi.n	3400f886 <_dtoa_r+0x5de>
3400f7c0:	42a6      	cmp	r6, r4
3400f7c2:	f43f af4d 	beq.w	3400f660 <_dtoa_r+0x3b8>
3400f7c6:	ee27 7b03 	vmul.f64	d7, d7, d3
3400f7ca:	ee26 6b03 	vmul.f64	d6, d6, d3
3400f7ce:	e7e0      	b.n	3400f792 <_dtoa_r+0x4ea>
3400f7d0:	ee27 7b04 	vmul.f64	d7, d7, d4
3400f7d4:	4621      	mov	r1, r4
3400f7d6:	463e      	mov	r6, r7
3400f7d8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3400f7dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3400f7e0:	ee14 2a90 	vmov	r2, s9
3400f7e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3400f7e8:	3230      	adds	r2, #48	@ 0x30
3400f7ea:	ee36 6b45 	vsub.f64	d6, d6, d5
3400f7ee:	f806 2b01 	strb.w	r2, [r6], #1
3400f7f2:	42a6      	cmp	r6, r4
3400f7f4:	d119      	bne.n	3400f82a <_dtoa_r+0x582>
3400f7f6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3400f7fa:	ee37 4b05 	vadd.f64	d4, d7, d5
3400f7fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
3400f802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f806:	dc3e      	bgt.n	3400f886 <_dtoa_r+0x5de>
3400f808:	ee35 5b47 	vsub.f64	d5, d5, d7
3400f80c:	eeb4 6bc5 	vcmpe.f64	d6, d5
3400f810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f814:	f57f af24 	bpl.w	3400f660 <_dtoa_r+0x3b8>
3400f818:	460e      	mov	r6, r1
3400f81a:	3901      	subs	r1, #1
3400f81c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3400f820:	2b30      	cmp	r3, #48	@ 0x30
3400f822:	d0f9      	beq.n	3400f818 <_dtoa_r+0x570>
3400f824:	f8dd 8010 	ldr.w	r8, [sp, #16]
3400f828:	e758      	b.n	3400f6dc <_dtoa_r+0x434>
3400f82a:	ee26 6b03 	vmul.f64	d6, d6, d3
3400f82e:	e7d5      	b.n	3400f7dc <_dtoa_r+0x534>
3400f830:	d10b      	bne.n	3400f84a <_dtoa_r+0x5a2>
3400f832:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3400f836:	ee26 6b07 	vmul.f64	d6, d6, d7
3400f83a:	ed9d 7b02 	vldr	d7, [sp, #8]
3400f83e:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400f842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f846:	f2c0 8161 	blt.w	3400fb0c <_dtoa_r+0x864>
3400f84a:	2400      	movs	r4, #0
3400f84c:	4625      	mov	r5, r4
3400f84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400f850:	463e      	mov	r6, r7
3400f852:	43db      	mvns	r3, r3
3400f854:	9304      	str	r3, [sp, #16]
3400f856:	f04f 0800 	mov.w	r8, #0
3400f85a:	4621      	mov	r1, r4
3400f85c:	4648      	mov	r0, r9
3400f85e:	f000 fb03 	bl	3400fe68 <_Bfree>
3400f862:	2d00      	cmp	r5, #0
3400f864:	d0de      	beq.n	3400f824 <_dtoa_r+0x57c>
3400f866:	f1b8 0f00 	cmp.w	r8, #0
3400f86a:	d005      	beq.n	3400f878 <_dtoa_r+0x5d0>
3400f86c:	45a8      	cmp	r8, r5
3400f86e:	d003      	beq.n	3400f878 <_dtoa_r+0x5d0>
3400f870:	4641      	mov	r1, r8
3400f872:	4648      	mov	r0, r9
3400f874:	f000 faf8 	bl	3400fe68 <_Bfree>
3400f878:	4629      	mov	r1, r5
3400f87a:	4648      	mov	r0, r9
3400f87c:	f000 faf4 	bl	3400fe68 <_Bfree>
3400f880:	e7d0      	b.n	3400f824 <_dtoa_r+0x57c>
3400f882:	f8cd 8010 	str.w	r8, [sp, #16]
3400f886:	4633      	mov	r3, r6
3400f888:	461e      	mov	r6, r3
3400f88a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400f88e:	2a39      	cmp	r2, #57	@ 0x39
3400f890:	d106      	bne.n	3400f8a0 <_dtoa_r+0x5f8>
3400f892:	429f      	cmp	r7, r3
3400f894:	d1f8      	bne.n	3400f888 <_dtoa_r+0x5e0>
3400f896:	9a04      	ldr	r2, [sp, #16]
3400f898:	3201      	adds	r2, #1
3400f89a:	9204      	str	r2, [sp, #16]
3400f89c:	2230      	movs	r2, #48	@ 0x30
3400f89e:	703a      	strb	r2, [r7, #0]
3400f8a0:	781a      	ldrb	r2, [r3, #0]
3400f8a2:	3201      	adds	r2, #1
3400f8a4:	701a      	strb	r2, [r3, #0]
3400f8a6:	e7bd      	b.n	3400f824 <_dtoa_r+0x57c>
3400f8a8:	ee27 7b04 	vmul.f64	d7, d7, d4
3400f8ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
3400f8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400f8b4:	f47f aeef 	bne.w	3400f696 <_dtoa_r+0x3ee>
3400f8b8:	e710      	b.n	3400f6dc <_dtoa_r+0x434>
3400f8ba:	bf00      	nop
3400f8bc:	3403a1f8 	.word	0x3403a1f8
3400f8c0:	3403a1d0 	.word	0x3403a1d0
3400f8c4:	9908      	ldr	r1, [sp, #32]
3400f8c6:	2900      	cmp	r1, #0
3400f8c8:	f000 80e3 	beq.w	3400fa92 <_dtoa_r+0x7ea>
3400f8cc:	9907      	ldr	r1, [sp, #28]
3400f8ce:	2901      	cmp	r1, #1
3400f8d0:	f300 80c8 	bgt.w	3400fa64 <_dtoa_r+0x7bc>
3400f8d4:	2d00      	cmp	r5, #0
3400f8d6:	f000 80c1 	beq.w	3400fa5c <_dtoa_r+0x7b4>
3400f8da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3400f8de:	461c      	mov	r4, r3
3400f8e0:	9e05      	ldr	r6, [sp, #20]
3400f8e2:	9304      	str	r3, [sp, #16]
3400f8e4:	2101      	movs	r1, #1
3400f8e6:	9b05      	ldr	r3, [sp, #20]
3400f8e8:	4648      	mov	r0, r9
3400f8ea:	4413      	add	r3, r2
3400f8ec:	9305      	str	r3, [sp, #20]
3400f8ee:	9b06      	ldr	r3, [sp, #24]
3400f8f0:	4413      	add	r3, r2
3400f8f2:	9306      	str	r3, [sp, #24]
3400f8f4:	f000 fb6e 	bl	3400ffd4 <__i2b>
3400f8f8:	9b04      	ldr	r3, [sp, #16]
3400f8fa:	4605      	mov	r5, r0
3400f8fc:	b166      	cbz	r6, 3400f918 <_dtoa_r+0x670>
3400f8fe:	9a06      	ldr	r2, [sp, #24]
3400f900:	2a00      	cmp	r2, #0
3400f902:	dd09      	ble.n	3400f918 <_dtoa_r+0x670>
3400f904:	42b2      	cmp	r2, r6
3400f906:	9905      	ldr	r1, [sp, #20]
3400f908:	bfa8      	it	ge
3400f90a:	4632      	movge	r2, r6
3400f90c:	1a89      	subs	r1, r1, r2
3400f90e:	1ab6      	subs	r6, r6, r2
3400f910:	9105      	str	r1, [sp, #20]
3400f912:	9906      	ldr	r1, [sp, #24]
3400f914:	1a8a      	subs	r2, r1, r2
3400f916:	9206      	str	r2, [sp, #24]
3400f918:	b1fb      	cbz	r3, 3400f95a <_dtoa_r+0x6b2>
3400f91a:	9a08      	ldr	r2, [sp, #32]
3400f91c:	2a00      	cmp	r2, #0
3400f91e:	f000 80bc 	beq.w	3400fa9a <_dtoa_r+0x7f2>
3400f922:	b19c      	cbz	r4, 3400f94c <_dtoa_r+0x6a4>
3400f924:	4629      	mov	r1, r5
3400f926:	4622      	mov	r2, r4
3400f928:	4648      	mov	r0, r9
3400f92a:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f92c:	f000 fc12 	bl	34010154 <__pow5mult>
3400f930:	9a01      	ldr	r2, [sp, #4]
3400f932:	4601      	mov	r1, r0
3400f934:	4605      	mov	r5, r0
3400f936:	4648      	mov	r0, r9
3400f938:	f000 fb62 	bl	34010000 <__multiply>
3400f93c:	9901      	ldr	r1, [sp, #4]
3400f93e:	9004      	str	r0, [sp, #16]
3400f940:	4648      	mov	r0, r9
3400f942:	f000 fa91 	bl	3400fe68 <_Bfree>
3400f946:	9a04      	ldr	r2, [sp, #16]
3400f948:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400f94a:	9201      	str	r2, [sp, #4]
3400f94c:	1b1a      	subs	r2, r3, r4
3400f94e:	d004      	beq.n	3400f95a <_dtoa_r+0x6b2>
3400f950:	9901      	ldr	r1, [sp, #4]
3400f952:	4648      	mov	r0, r9
3400f954:	f000 fbfe 	bl	34010154 <__pow5mult>
3400f958:	9001      	str	r0, [sp, #4]
3400f95a:	2101      	movs	r1, #1
3400f95c:	4648      	mov	r0, r9
3400f95e:	f000 fb39 	bl	3400ffd4 <__i2b>
3400f962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f964:	4604      	mov	r4, r0
3400f966:	2b00      	cmp	r3, #0
3400f968:	f000 81d0 	beq.w	3400fd0c <_dtoa_r+0xa64>
3400f96c:	461a      	mov	r2, r3
3400f96e:	4601      	mov	r1, r0
3400f970:	4648      	mov	r0, r9
3400f972:	f000 fbef 	bl	34010154 <__pow5mult>
3400f976:	9b07      	ldr	r3, [sp, #28]
3400f978:	4604      	mov	r4, r0
3400f97a:	2b01      	cmp	r3, #1
3400f97c:	f300 8095 	bgt.w	3400faaa <_dtoa_r+0x802>
3400f980:	9b02      	ldr	r3, [sp, #8]
3400f982:	2b00      	cmp	r3, #0
3400f984:	f040 808b 	bne.w	3400fa9e <_dtoa_r+0x7f6>
3400f988:	9b03      	ldr	r3, [sp, #12]
3400f98a:	f3c3 0213 	ubfx	r2, r3, #0, #20
3400f98e:	2a00      	cmp	r2, #0
3400f990:	f040 8087 	bne.w	3400faa2 <_dtoa_r+0x7fa>
3400f994:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3400f998:	0d12      	lsrs	r2, r2, #20
3400f99a:	0512      	lsls	r2, r2, #20
3400f99c:	2a00      	cmp	r2, #0
3400f99e:	f000 8082 	beq.w	3400faa6 <_dtoa_r+0x7fe>
3400f9a2:	9b05      	ldr	r3, [sp, #20]
3400f9a4:	3301      	adds	r3, #1
3400f9a6:	9305      	str	r3, [sp, #20]
3400f9a8:	9b06      	ldr	r3, [sp, #24]
3400f9aa:	3301      	adds	r3, #1
3400f9ac:	9306      	str	r3, [sp, #24]
3400f9ae:	2301      	movs	r3, #1
3400f9b0:	930b      	str	r3, [sp, #44]	@ 0x2c
3400f9b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f9b4:	2b00      	cmp	r3, #0
3400f9b6:	f000 81af 	beq.w	3400fd18 <_dtoa_r+0xa70>
3400f9ba:	6922      	ldr	r2, [r4, #16]
3400f9bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3400f9c0:	6910      	ldr	r0, [r2, #16]
3400f9c2:	f000 fabb 	bl	3400ff3c <__hi0bits>
3400f9c6:	f1c0 0020 	rsb	r0, r0, #32
3400f9ca:	9b06      	ldr	r3, [sp, #24]
3400f9cc:	4418      	add	r0, r3
3400f9ce:	f010 001f 	ands.w	r0, r0, #31
3400f9d2:	d076      	beq.n	3400fac2 <_dtoa_r+0x81a>
3400f9d4:	f1c0 0220 	rsb	r2, r0, #32
3400f9d8:	2a04      	cmp	r2, #4
3400f9da:	dd69      	ble.n	3400fab0 <_dtoa_r+0x808>
3400f9dc:	f1c0 001c 	rsb	r0, r0, #28
3400f9e0:	9b05      	ldr	r3, [sp, #20]
3400f9e2:	4403      	add	r3, r0
3400f9e4:	4406      	add	r6, r0
3400f9e6:	9305      	str	r3, [sp, #20]
3400f9e8:	9b06      	ldr	r3, [sp, #24]
3400f9ea:	4403      	add	r3, r0
3400f9ec:	9306      	str	r3, [sp, #24]
3400f9ee:	9b05      	ldr	r3, [sp, #20]
3400f9f0:	2b00      	cmp	r3, #0
3400f9f2:	dd05      	ble.n	3400fa00 <_dtoa_r+0x758>
3400f9f4:	461a      	mov	r2, r3
3400f9f6:	9901      	ldr	r1, [sp, #4]
3400f9f8:	4648      	mov	r0, r9
3400f9fa:	f000 fc05 	bl	34010208 <__lshift>
3400f9fe:	9001      	str	r0, [sp, #4]
3400fa00:	9b06      	ldr	r3, [sp, #24]
3400fa02:	2b00      	cmp	r3, #0
3400fa04:	dd05      	ble.n	3400fa12 <_dtoa_r+0x76a>
3400fa06:	4621      	mov	r1, r4
3400fa08:	461a      	mov	r2, r3
3400fa0a:	4648      	mov	r0, r9
3400fa0c:	f000 fbfc 	bl	34010208 <__lshift>
3400fa10:	4604      	mov	r4, r0
3400fa12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3400fa14:	2b00      	cmp	r3, #0
3400fa16:	d056      	beq.n	3400fac6 <_dtoa_r+0x81e>
3400fa18:	4621      	mov	r1, r4
3400fa1a:	9801      	ldr	r0, [sp, #4]
3400fa1c:	f000 fc60 	bl	340102e0 <__mcmp>
3400fa20:	2800      	cmp	r0, #0
3400fa22:	da50      	bge.n	3400fac6 <_dtoa_r+0x81e>
3400fa24:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3400fa28:	220a      	movs	r2, #10
3400fa2a:	9901      	ldr	r1, [sp, #4]
3400fa2c:	4648      	mov	r0, r9
3400fa2e:	9304      	str	r3, [sp, #16]
3400fa30:	2300      	movs	r3, #0
3400fa32:	f000 fa3b 	bl	3400feac <__multadd>
3400fa36:	9b08      	ldr	r3, [sp, #32]
3400fa38:	9001      	str	r0, [sp, #4]
3400fa3a:	2b00      	cmp	r3, #0
3400fa3c:	f000 816e 	beq.w	3400fd1c <_dtoa_r+0xa74>
3400fa40:	4629      	mov	r1, r5
3400fa42:	2300      	movs	r3, #0
3400fa44:	220a      	movs	r2, #10
3400fa46:	4648      	mov	r0, r9
3400fa48:	f000 fa30 	bl	3400feac <__multadd>
3400fa4c:	f1bb 0f00 	cmp.w	fp, #0
3400fa50:	4605      	mov	r5, r0
3400fa52:	dc64      	bgt.n	3400fb1e <_dtoa_r+0x876>
3400fa54:	9b07      	ldr	r3, [sp, #28]
3400fa56:	2b02      	cmp	r3, #2
3400fa58:	dc3e      	bgt.n	3400fad8 <_dtoa_r+0x830>
3400fa5a:	e060      	b.n	3400fb1e <_dtoa_r+0x876>
3400fa5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400fa5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3400fa62:	e73c      	b.n	3400f8de <_dtoa_r+0x636>
3400fa64:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3400fa68:	42a3      	cmp	r3, r4
3400fa6a:	bfbb      	ittet	lt
3400fa6c:	1ae2      	sublt	r2, r4, r3
3400fa6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
3400fa70:	1b1c      	subge	r4, r3, r4
3400fa72:	189b      	addlt	r3, r3, r2
3400fa74:	bfbe      	ittt	lt
3400fa76:	930a      	strlt	r3, [sp, #40]	@ 0x28
3400fa78:	4623      	movlt	r3, r4
3400fa7a:	2400      	movlt	r4, #0
3400fa7c:	f1ba 0f00 	cmp.w	sl, #0
3400fa80:	bfb3      	iteet	lt
3400fa82:	9a05      	ldrlt	r2, [sp, #20]
3400fa84:	4652      	movge	r2, sl
3400fa86:	9e05      	ldrge	r6, [sp, #20]
3400fa88:	eba2 060a 	sublt.w	r6, r2, sl
3400fa8c:	bfb8      	it	lt
3400fa8e:	2200      	movlt	r2, #0
3400fa90:	e727      	b.n	3400f8e2 <_dtoa_r+0x63a>
3400fa92:	461c      	mov	r4, r3
3400fa94:	9e05      	ldr	r6, [sp, #20]
3400fa96:	9d08      	ldr	r5, [sp, #32]
3400fa98:	e730      	b.n	3400f8fc <_dtoa_r+0x654>
3400fa9a:	461a      	mov	r2, r3
3400fa9c:	e758      	b.n	3400f950 <_dtoa_r+0x6a8>
3400fa9e:	2300      	movs	r3, #0
3400faa0:	e786      	b.n	3400f9b0 <_dtoa_r+0x708>
3400faa2:	9b02      	ldr	r3, [sp, #8]
3400faa4:	e784      	b.n	3400f9b0 <_dtoa_r+0x708>
3400faa6:	920b      	str	r2, [sp, #44]	@ 0x2c
3400faa8:	e783      	b.n	3400f9b2 <_dtoa_r+0x70a>
3400faaa:	2300      	movs	r3, #0
3400faac:	930b      	str	r3, [sp, #44]	@ 0x2c
3400faae:	e784      	b.n	3400f9ba <_dtoa_r+0x712>
3400fab0:	d09d      	beq.n	3400f9ee <_dtoa_r+0x746>
3400fab2:	321c      	adds	r2, #28
3400fab4:	9b05      	ldr	r3, [sp, #20]
3400fab6:	4413      	add	r3, r2
3400fab8:	4416      	add	r6, r2
3400faba:	9305      	str	r3, [sp, #20]
3400fabc:	9b06      	ldr	r3, [sp, #24]
3400fabe:	4413      	add	r3, r2
3400fac0:	e794      	b.n	3400f9ec <_dtoa_r+0x744>
3400fac2:	4602      	mov	r2, r0
3400fac4:	e7f5      	b.n	3400fab2 <_dtoa_r+0x80a>
3400fac6:	f1ba 0f00 	cmp.w	sl, #0
3400faca:	46d3      	mov	fp, sl
3400facc:	f8cd 8010 	str.w	r8, [sp, #16]
3400fad0:	dc21      	bgt.n	3400fb16 <_dtoa_r+0x86e>
3400fad2:	9b07      	ldr	r3, [sp, #28]
3400fad4:	2b02      	cmp	r3, #2
3400fad6:	dd1e      	ble.n	3400fb16 <_dtoa_r+0x86e>
3400fad8:	f1bb 0f00 	cmp.w	fp, #0
3400fadc:	f47f aeb7 	bne.w	3400f84e <_dtoa_r+0x5a6>
3400fae0:	4621      	mov	r1, r4
3400fae2:	465b      	mov	r3, fp
3400fae4:	2205      	movs	r2, #5
3400fae6:	4648      	mov	r0, r9
3400fae8:	f000 f9e0 	bl	3400feac <__multadd>
3400faec:	4601      	mov	r1, r0
3400faee:	4604      	mov	r4, r0
3400faf0:	9801      	ldr	r0, [sp, #4]
3400faf2:	f000 fbf5 	bl	340102e0 <__mcmp>
3400faf6:	2800      	cmp	r0, #0
3400faf8:	f77f aea9 	ble.w	3400f84e <_dtoa_r+0x5a6>
3400fafc:	2331      	movs	r3, #49	@ 0x31
3400fafe:	463e      	mov	r6, r7
3400fb00:	f806 3b01 	strb.w	r3, [r6], #1
3400fb04:	9b04      	ldr	r3, [sp, #16]
3400fb06:	3301      	adds	r3, #1
3400fb08:	9304      	str	r3, [sp, #16]
3400fb0a:	e6a4      	b.n	3400f856 <_dtoa_r+0x5ae>
3400fb0c:	4654      	mov	r4, sl
3400fb0e:	f8cd 8010 	str.w	r8, [sp, #16]
3400fb12:	4625      	mov	r5, r4
3400fb14:	e7f2      	b.n	3400fafc <_dtoa_r+0x854>
3400fb16:	9b08      	ldr	r3, [sp, #32]
3400fb18:	2b00      	cmp	r3, #0
3400fb1a:	f000 8103 	beq.w	3400fd24 <_dtoa_r+0xa7c>
3400fb1e:	2e00      	cmp	r6, #0
3400fb20:	dd05      	ble.n	3400fb2e <_dtoa_r+0x886>
3400fb22:	4629      	mov	r1, r5
3400fb24:	4632      	mov	r2, r6
3400fb26:	4648      	mov	r0, r9
3400fb28:	f000 fb6e 	bl	34010208 <__lshift>
3400fb2c:	4605      	mov	r5, r0
3400fb2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400fb30:	2b00      	cmp	r3, #0
3400fb32:	d058      	beq.n	3400fbe6 <_dtoa_r+0x93e>
3400fb34:	6869      	ldr	r1, [r5, #4]
3400fb36:	4648      	mov	r0, r9
3400fb38:	f000 f956 	bl	3400fde8 <_Balloc>
3400fb3c:	4606      	mov	r6, r0
3400fb3e:	b928      	cbnz	r0, 3400fb4c <_dtoa_r+0x8a4>
3400fb40:	4b82      	ldr	r3, [pc, #520]	@ (3400fd4c <_dtoa_r+0xaa4>)
3400fb42:	4602      	mov	r2, r0
3400fb44:	f240 21ef 	movw	r1, #751	@ 0x2ef
3400fb48:	f7ff bbc7 	b.w	3400f2da <_dtoa_r+0x32>
3400fb4c:	692a      	ldr	r2, [r5, #16]
3400fb4e:	f105 010c 	add.w	r1, r5, #12
3400fb52:	300c      	adds	r0, #12
3400fb54:	3202      	adds	r2, #2
3400fb56:	0092      	lsls	r2, r2, #2
3400fb58:	f7ff fb05 	bl	3400f166 <memcpy>
3400fb5c:	2201      	movs	r2, #1
3400fb5e:	4631      	mov	r1, r6
3400fb60:	4648      	mov	r0, r9
3400fb62:	f000 fb51 	bl	34010208 <__lshift>
3400fb66:	1c7b      	adds	r3, r7, #1
3400fb68:	46a8      	mov	r8, r5
3400fb6a:	4605      	mov	r5, r0
3400fb6c:	9305      	str	r3, [sp, #20]
3400fb6e:	eb07 030b 	add.w	r3, r7, fp
3400fb72:	9309      	str	r3, [sp, #36]	@ 0x24
3400fb74:	9b02      	ldr	r3, [sp, #8]
3400fb76:	f003 0301 	and.w	r3, r3, #1
3400fb7a:	9308      	str	r3, [sp, #32]
3400fb7c:	9b05      	ldr	r3, [sp, #20]
3400fb7e:	4621      	mov	r1, r4
3400fb80:	9801      	ldr	r0, [sp, #4]
3400fb82:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3400fb86:	f7ff fb02 	bl	3400f18e <quorem>
3400fb8a:	4641      	mov	r1, r8
3400fb8c:	9002      	str	r0, [sp, #8]
3400fb8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400fb92:	9801      	ldr	r0, [sp, #4]
3400fb94:	f000 fba4 	bl	340102e0 <__mcmp>
3400fb98:	462a      	mov	r2, r5
3400fb9a:	9006      	str	r0, [sp, #24]
3400fb9c:	4621      	mov	r1, r4
3400fb9e:	4648      	mov	r0, r9
3400fba0:	f000 fbba 	bl	34010318 <__mdiff>
3400fba4:	68c2      	ldr	r2, [r0, #12]
3400fba6:	4606      	mov	r6, r0
3400fba8:	b9fa      	cbnz	r2, 3400fbea <_dtoa_r+0x942>
3400fbaa:	4601      	mov	r1, r0
3400fbac:	9801      	ldr	r0, [sp, #4]
3400fbae:	f000 fb97 	bl	340102e0 <__mcmp>
3400fbb2:	4602      	mov	r2, r0
3400fbb4:	4631      	mov	r1, r6
3400fbb6:	4648      	mov	r0, r9
3400fbb8:	920a      	str	r2, [sp, #40]	@ 0x28
3400fbba:	f000 f955 	bl	3400fe68 <_Bfree>
3400fbbe:	9b07      	ldr	r3, [sp, #28]
3400fbc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3400fbc2:	9e05      	ldr	r6, [sp, #20]
3400fbc4:	ea43 0102 	orr.w	r1, r3, r2
3400fbc8:	9b08      	ldr	r3, [sp, #32]
3400fbca:	4319      	orrs	r1, r3
3400fbcc:	d10f      	bne.n	3400fbee <_dtoa_r+0x946>
3400fbce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400fbd2:	d028      	beq.n	3400fc26 <_dtoa_r+0x97e>
3400fbd4:	9b06      	ldr	r3, [sp, #24]
3400fbd6:	2b00      	cmp	r3, #0
3400fbd8:	dd02      	ble.n	3400fbe0 <_dtoa_r+0x938>
3400fbda:	9b02      	ldr	r3, [sp, #8]
3400fbdc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3400fbe0:	f88b a000 	strb.w	sl, [fp]
3400fbe4:	e639      	b.n	3400f85a <_dtoa_r+0x5b2>
3400fbe6:	4628      	mov	r0, r5
3400fbe8:	e7bd      	b.n	3400fb66 <_dtoa_r+0x8be>
3400fbea:	2201      	movs	r2, #1
3400fbec:	e7e2      	b.n	3400fbb4 <_dtoa_r+0x90c>
3400fbee:	9b06      	ldr	r3, [sp, #24]
3400fbf0:	2b00      	cmp	r3, #0
3400fbf2:	db04      	blt.n	3400fbfe <_dtoa_r+0x956>
3400fbf4:	9907      	ldr	r1, [sp, #28]
3400fbf6:	430b      	orrs	r3, r1
3400fbf8:	9908      	ldr	r1, [sp, #32]
3400fbfa:	430b      	orrs	r3, r1
3400fbfc:	d120      	bne.n	3400fc40 <_dtoa_r+0x998>
3400fbfe:	2a00      	cmp	r2, #0
3400fc00:	ddee      	ble.n	3400fbe0 <_dtoa_r+0x938>
3400fc02:	2201      	movs	r2, #1
3400fc04:	9901      	ldr	r1, [sp, #4]
3400fc06:	4648      	mov	r0, r9
3400fc08:	f000 fafe 	bl	34010208 <__lshift>
3400fc0c:	4621      	mov	r1, r4
3400fc0e:	9001      	str	r0, [sp, #4]
3400fc10:	f000 fb66 	bl	340102e0 <__mcmp>
3400fc14:	2800      	cmp	r0, #0
3400fc16:	dc03      	bgt.n	3400fc20 <_dtoa_r+0x978>
3400fc18:	d1e2      	bne.n	3400fbe0 <_dtoa_r+0x938>
3400fc1a:	f01a 0f01 	tst.w	sl, #1
3400fc1e:	d0df      	beq.n	3400fbe0 <_dtoa_r+0x938>
3400fc20:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400fc24:	d1d9      	bne.n	3400fbda <_dtoa_r+0x932>
3400fc26:	2339      	movs	r3, #57	@ 0x39
3400fc28:	f88b 3000 	strb.w	r3, [fp]
3400fc2c:	4633      	mov	r3, r6
3400fc2e:	461e      	mov	r6, r3
3400fc30:	3b01      	subs	r3, #1
3400fc32:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3400fc36:	2a39      	cmp	r2, #57	@ 0x39
3400fc38:	d053      	beq.n	3400fce2 <_dtoa_r+0xa3a>
3400fc3a:	3201      	adds	r2, #1
3400fc3c:	701a      	strb	r2, [r3, #0]
3400fc3e:	e60c      	b.n	3400f85a <_dtoa_r+0x5b2>
3400fc40:	2a00      	cmp	r2, #0
3400fc42:	dd07      	ble.n	3400fc54 <_dtoa_r+0x9ac>
3400fc44:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3400fc48:	d0ed      	beq.n	3400fc26 <_dtoa_r+0x97e>
3400fc4a:	f10a 0301 	add.w	r3, sl, #1
3400fc4e:	f88b 3000 	strb.w	r3, [fp]
3400fc52:	e602      	b.n	3400f85a <_dtoa_r+0x5b2>
3400fc54:	9b05      	ldr	r3, [sp, #20]
3400fc56:	9a05      	ldr	r2, [sp, #20]
3400fc58:	f803 ac01 	strb.w	sl, [r3, #-1]
3400fc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400fc5e:	4293      	cmp	r3, r2
3400fc60:	d029      	beq.n	3400fcb6 <_dtoa_r+0xa0e>
3400fc62:	2300      	movs	r3, #0
3400fc64:	220a      	movs	r2, #10
3400fc66:	9901      	ldr	r1, [sp, #4]
3400fc68:	4648      	mov	r0, r9
3400fc6a:	f000 f91f 	bl	3400feac <__multadd>
3400fc6e:	45a8      	cmp	r8, r5
3400fc70:	9001      	str	r0, [sp, #4]
3400fc72:	f04f 0300 	mov.w	r3, #0
3400fc76:	f04f 020a 	mov.w	r2, #10
3400fc7a:	4641      	mov	r1, r8
3400fc7c:	4648      	mov	r0, r9
3400fc7e:	d107      	bne.n	3400fc90 <_dtoa_r+0x9e8>
3400fc80:	f000 f914 	bl	3400feac <__multadd>
3400fc84:	4680      	mov	r8, r0
3400fc86:	4605      	mov	r5, r0
3400fc88:	9b05      	ldr	r3, [sp, #20]
3400fc8a:	3301      	adds	r3, #1
3400fc8c:	9305      	str	r3, [sp, #20]
3400fc8e:	e775      	b.n	3400fb7c <_dtoa_r+0x8d4>
3400fc90:	f000 f90c 	bl	3400feac <__multadd>
3400fc94:	4629      	mov	r1, r5
3400fc96:	4680      	mov	r8, r0
3400fc98:	2300      	movs	r3, #0
3400fc9a:	220a      	movs	r2, #10
3400fc9c:	4648      	mov	r0, r9
3400fc9e:	f000 f905 	bl	3400feac <__multadd>
3400fca2:	4605      	mov	r5, r0
3400fca4:	e7f0      	b.n	3400fc88 <_dtoa_r+0x9e0>
3400fca6:	f1bb 0f00 	cmp.w	fp, #0
3400fcaa:	f04f 0800 	mov.w	r8, #0
3400fcae:	bfcc      	ite	gt
3400fcb0:	465e      	movgt	r6, fp
3400fcb2:	2601      	movle	r6, #1
3400fcb4:	443e      	add	r6, r7
3400fcb6:	2201      	movs	r2, #1
3400fcb8:	9901      	ldr	r1, [sp, #4]
3400fcba:	4648      	mov	r0, r9
3400fcbc:	f000 faa4 	bl	34010208 <__lshift>
3400fcc0:	4621      	mov	r1, r4
3400fcc2:	9001      	str	r0, [sp, #4]
3400fcc4:	f000 fb0c 	bl	340102e0 <__mcmp>
3400fcc8:	2800      	cmp	r0, #0
3400fcca:	dcaf      	bgt.n	3400fc2c <_dtoa_r+0x984>
3400fccc:	d102      	bne.n	3400fcd4 <_dtoa_r+0xa2c>
3400fcce:	f01a 0f01 	tst.w	sl, #1
3400fcd2:	d1ab      	bne.n	3400fc2c <_dtoa_r+0x984>
3400fcd4:	4633      	mov	r3, r6
3400fcd6:	461e      	mov	r6, r3
3400fcd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3400fcdc:	2a30      	cmp	r2, #48	@ 0x30
3400fcde:	d0fa      	beq.n	3400fcd6 <_dtoa_r+0xa2e>
3400fce0:	e5bb      	b.n	3400f85a <_dtoa_r+0x5b2>
3400fce2:	429f      	cmp	r7, r3
3400fce4:	d1a3      	bne.n	3400fc2e <_dtoa_r+0x986>
3400fce6:	9b04      	ldr	r3, [sp, #16]
3400fce8:	3301      	adds	r3, #1
3400fcea:	9304      	str	r3, [sp, #16]
3400fcec:	2331      	movs	r3, #49	@ 0x31
3400fcee:	703b      	strb	r3, [r7, #0]
3400fcf0:	e5b3      	b.n	3400f85a <_dtoa_r+0x5b2>
3400fcf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3400fcf4:	4f16      	ldr	r7, [pc, #88]	@ (3400fd50 <_dtoa_r+0xaa8>)
3400fcf6:	b11b      	cbz	r3, 3400fd00 <_dtoa_r+0xa58>
3400fcf8:	f107 0308 	add.w	r3, r7, #8
3400fcfc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3400fcfe:	6013      	str	r3, [r2, #0]
3400fd00:	4638      	mov	r0, r7
3400fd02:	b011      	add	sp, #68	@ 0x44
3400fd04:	ecbd 8b02 	vpop	{d8}
3400fd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400fd0c:	9b07      	ldr	r3, [sp, #28]
3400fd0e:	2b01      	cmp	r3, #1
3400fd10:	f77f ae36 	ble.w	3400f980 <_dtoa_r+0x6d8>
3400fd14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400fd16:	930b      	str	r3, [sp, #44]	@ 0x2c
3400fd18:	2001      	movs	r0, #1
3400fd1a:	e656      	b.n	3400f9ca <_dtoa_r+0x722>
3400fd1c:	f1bb 0f00 	cmp.w	fp, #0
3400fd20:	f77f aed7 	ble.w	3400fad2 <_dtoa_r+0x82a>
3400fd24:	463e      	mov	r6, r7
3400fd26:	4621      	mov	r1, r4
3400fd28:	9801      	ldr	r0, [sp, #4]
3400fd2a:	f7ff fa30 	bl	3400f18e <quorem>
3400fd2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3400fd32:	f806 ab01 	strb.w	sl, [r6], #1
3400fd36:	1bf2      	subs	r2, r6, r7
3400fd38:	4593      	cmp	fp, r2
3400fd3a:	ddb4      	ble.n	3400fca6 <_dtoa_r+0x9fe>
3400fd3c:	2300      	movs	r3, #0
3400fd3e:	220a      	movs	r2, #10
3400fd40:	9901      	ldr	r1, [sp, #4]
3400fd42:	4648      	mov	r0, r9
3400fd44:	f000 f8b2 	bl	3400feac <__multadd>
3400fd48:	9001      	str	r0, [sp, #4]
3400fd4a:	e7ec      	b.n	3400fd26 <_dtoa_r+0xa7e>
3400fd4c:	3403a159 	.word	0x3403a159
3400fd50:	3403a0dd 	.word	0x3403a0dd

3400fd54 <_free_r>:
3400fd54:	b538      	push	{r3, r4, r5, lr}
3400fd56:	4605      	mov	r5, r0
3400fd58:	2900      	cmp	r1, #0
3400fd5a:	d041      	beq.n	3400fde0 <_free_r+0x8c>
3400fd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
3400fd60:	1f0c      	subs	r4, r1, #4
3400fd62:	2b00      	cmp	r3, #0
3400fd64:	bfb8      	it	lt
3400fd66:	18e4      	addlt	r4, r4, r3
3400fd68:	f7fe f90a 	bl	3400df80 <__malloc_lock>
3400fd6c:	4a1d      	ldr	r2, [pc, #116]	@ (3400fde4 <_free_r+0x90>)
3400fd6e:	6813      	ldr	r3, [r2, #0]
3400fd70:	b933      	cbnz	r3, 3400fd80 <_free_r+0x2c>
3400fd72:	6063      	str	r3, [r4, #4]
3400fd74:	6014      	str	r4, [r2, #0]
3400fd76:	4628      	mov	r0, r5
3400fd78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3400fd7c:	f7fe b906 	b.w	3400df8c <__malloc_unlock>
3400fd80:	42a3      	cmp	r3, r4
3400fd82:	d908      	bls.n	3400fd96 <_free_r+0x42>
3400fd84:	6820      	ldr	r0, [r4, #0]
3400fd86:	1821      	adds	r1, r4, r0
3400fd88:	428b      	cmp	r3, r1
3400fd8a:	bf01      	itttt	eq
3400fd8c:	6819      	ldreq	r1, [r3, #0]
3400fd8e:	685b      	ldreq	r3, [r3, #4]
3400fd90:	1809      	addeq	r1, r1, r0
3400fd92:	6021      	streq	r1, [r4, #0]
3400fd94:	e7ed      	b.n	3400fd72 <_free_r+0x1e>
3400fd96:	461a      	mov	r2, r3
3400fd98:	685b      	ldr	r3, [r3, #4]
3400fd9a:	b10b      	cbz	r3, 3400fda0 <_free_r+0x4c>
3400fd9c:	42a3      	cmp	r3, r4
3400fd9e:	d9fa      	bls.n	3400fd96 <_free_r+0x42>
3400fda0:	6811      	ldr	r1, [r2, #0]
3400fda2:	1850      	adds	r0, r2, r1
3400fda4:	42a0      	cmp	r0, r4
3400fda6:	d10b      	bne.n	3400fdc0 <_free_r+0x6c>
3400fda8:	6820      	ldr	r0, [r4, #0]
3400fdaa:	4401      	add	r1, r0
3400fdac:	1850      	adds	r0, r2, r1
3400fdae:	6011      	str	r1, [r2, #0]
3400fdb0:	4283      	cmp	r3, r0
3400fdb2:	d1e0      	bne.n	3400fd76 <_free_r+0x22>
3400fdb4:	6818      	ldr	r0, [r3, #0]
3400fdb6:	685b      	ldr	r3, [r3, #4]
3400fdb8:	4408      	add	r0, r1
3400fdba:	6053      	str	r3, [r2, #4]
3400fdbc:	6010      	str	r0, [r2, #0]
3400fdbe:	e7da      	b.n	3400fd76 <_free_r+0x22>
3400fdc0:	d902      	bls.n	3400fdc8 <_free_r+0x74>
3400fdc2:	230c      	movs	r3, #12
3400fdc4:	602b      	str	r3, [r5, #0]
3400fdc6:	e7d6      	b.n	3400fd76 <_free_r+0x22>
3400fdc8:	6820      	ldr	r0, [r4, #0]
3400fdca:	1821      	adds	r1, r4, r0
3400fdcc:	428b      	cmp	r3, r1
3400fdce:	bf02      	ittt	eq
3400fdd0:	6819      	ldreq	r1, [r3, #0]
3400fdd2:	685b      	ldreq	r3, [r3, #4]
3400fdd4:	1809      	addeq	r1, r1, r0
3400fdd6:	6063      	str	r3, [r4, #4]
3400fdd8:	bf08      	it	eq
3400fdda:	6021      	streq	r1, [r4, #0]
3400fddc:	6054      	str	r4, [r2, #4]
3400fdde:	e7ca      	b.n	3400fd76 <_free_r+0x22>
3400fde0:	bd38      	pop	{r3, r4, r5, pc}
3400fde2:	bf00      	nop
3400fde4:	3403a984 	.word	0x3403a984

3400fde8 <_Balloc>:
3400fde8:	b570      	push	{r4, r5, r6, lr}
3400fdea:	69c6      	ldr	r6, [r0, #28]
3400fdec:	4604      	mov	r4, r0
3400fdee:	460d      	mov	r5, r1
3400fdf0:	b976      	cbnz	r6, 3400fe10 <_Balloc+0x28>
3400fdf2:	2010      	movs	r0, #16
3400fdf4:	f7fe f81a 	bl	3400de2c <malloc>
3400fdf8:	4602      	mov	r2, r0
3400fdfa:	61e0      	str	r0, [r4, #28]
3400fdfc:	b920      	cbnz	r0, 3400fe08 <_Balloc+0x20>
3400fdfe:	4b18      	ldr	r3, [pc, #96]	@ (3400fe60 <_Balloc+0x78>)
3400fe00:	216b      	movs	r1, #107	@ 0x6b
3400fe02:	4818      	ldr	r0, [pc, #96]	@ (3400fe64 <_Balloc+0x7c>)
3400fe04:	f7fd fff4 	bl	3400ddf0 <__assert_func>
3400fe08:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400fe0c:	6006      	str	r6, [r0, #0]
3400fe0e:	60c6      	str	r6, [r0, #12]
3400fe10:	69e6      	ldr	r6, [r4, #28]
3400fe12:	68f3      	ldr	r3, [r6, #12]
3400fe14:	b183      	cbz	r3, 3400fe38 <_Balloc+0x50>
3400fe16:	69e3      	ldr	r3, [r4, #28]
3400fe18:	68db      	ldr	r3, [r3, #12]
3400fe1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3400fe1e:	b9b8      	cbnz	r0, 3400fe50 <_Balloc+0x68>
3400fe20:	2101      	movs	r1, #1
3400fe22:	4620      	mov	r0, r4
3400fe24:	fa01 f605 	lsl.w	r6, r1, r5
3400fe28:	1d72      	adds	r2, r6, #5
3400fe2a:	0092      	lsls	r2, r2, #2
3400fe2c:	f000 fe1a 	bl	34010a64 <_calloc_r>
3400fe30:	b160      	cbz	r0, 3400fe4c <_Balloc+0x64>
3400fe32:	e9c0 5601 	strd	r5, r6, [r0, #4]
3400fe36:	e00e      	b.n	3400fe56 <_Balloc+0x6e>
3400fe38:	2221      	movs	r2, #33	@ 0x21
3400fe3a:	2104      	movs	r1, #4
3400fe3c:	4620      	mov	r0, r4
3400fe3e:	f000 fe11 	bl	34010a64 <_calloc_r>
3400fe42:	69e3      	ldr	r3, [r4, #28]
3400fe44:	60f0      	str	r0, [r6, #12]
3400fe46:	68db      	ldr	r3, [r3, #12]
3400fe48:	2b00      	cmp	r3, #0
3400fe4a:	d1e4      	bne.n	3400fe16 <_Balloc+0x2e>
3400fe4c:	2000      	movs	r0, #0
3400fe4e:	bd70      	pop	{r4, r5, r6, pc}
3400fe50:	6802      	ldr	r2, [r0, #0]
3400fe52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3400fe56:	2300      	movs	r3, #0
3400fe58:	e9c0 3303 	strd	r3, r3, [r0, #12]
3400fe5c:	e7f7      	b.n	3400fe4e <_Balloc+0x66>
3400fe5e:	bf00      	nop
3400fe60:	3403a0ea 	.word	0x3403a0ea
3400fe64:	3403a16a 	.word	0x3403a16a

3400fe68 <_Bfree>:
3400fe68:	b570      	push	{r4, r5, r6, lr}
3400fe6a:	69c6      	ldr	r6, [r0, #28]
3400fe6c:	4605      	mov	r5, r0
3400fe6e:	460c      	mov	r4, r1
3400fe70:	b976      	cbnz	r6, 3400fe90 <_Bfree+0x28>
3400fe72:	2010      	movs	r0, #16
3400fe74:	f7fd ffda 	bl	3400de2c <malloc>
3400fe78:	4602      	mov	r2, r0
3400fe7a:	61e8      	str	r0, [r5, #28]
3400fe7c:	b920      	cbnz	r0, 3400fe88 <_Bfree+0x20>
3400fe7e:	4b09      	ldr	r3, [pc, #36]	@ (3400fea4 <_Bfree+0x3c>)
3400fe80:	218f      	movs	r1, #143	@ 0x8f
3400fe82:	4809      	ldr	r0, [pc, #36]	@ (3400fea8 <_Bfree+0x40>)
3400fe84:	f7fd ffb4 	bl	3400ddf0 <__assert_func>
3400fe88:	e9c0 6601 	strd	r6, r6, [r0, #4]
3400fe8c:	6006      	str	r6, [r0, #0]
3400fe8e:	60c6      	str	r6, [r0, #12]
3400fe90:	b13c      	cbz	r4, 3400fea2 <_Bfree+0x3a>
3400fe92:	69eb      	ldr	r3, [r5, #28]
3400fe94:	6862      	ldr	r2, [r4, #4]
3400fe96:	68db      	ldr	r3, [r3, #12]
3400fe98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3400fe9c:	6021      	str	r1, [r4, #0]
3400fe9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3400fea2:	bd70      	pop	{r4, r5, r6, pc}
3400fea4:	3403a0ea 	.word	0x3403a0ea
3400fea8:	3403a16a 	.word	0x3403a16a

3400feac <__multadd>:
3400feac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400feb0:	f101 0c14 	add.w	ip, r1, #20
3400feb4:	4607      	mov	r7, r0
3400feb6:	460c      	mov	r4, r1
3400feb8:	461e      	mov	r6, r3
3400feba:	690d      	ldr	r5, [r1, #16]
3400febc:	2000      	movs	r0, #0
3400febe:	f8dc 3000 	ldr.w	r3, [ip]
3400fec2:	3001      	adds	r0, #1
3400fec4:	b299      	uxth	r1, r3
3400fec6:	4285      	cmp	r5, r0
3400fec8:	fb02 6101 	mla	r1, r2, r1, r6
3400fecc:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400fed0:	ea4f 4311 	mov.w	r3, r1, lsr #16
3400fed4:	b289      	uxth	r1, r1
3400fed6:	fb02 3306 	mla	r3, r2, r6, r3
3400feda:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3400fede:	ea4f 4613 	mov.w	r6, r3, lsr #16
3400fee2:	f84c 1b04 	str.w	r1, [ip], #4
3400fee6:	dcea      	bgt.n	3400febe <__multadd+0x12>
3400fee8:	b30e      	cbz	r6, 3400ff2e <__multadd+0x82>
3400feea:	68a3      	ldr	r3, [r4, #8]
3400feec:	42ab      	cmp	r3, r5
3400feee:	dc19      	bgt.n	3400ff24 <__multadd+0x78>
3400fef0:	6861      	ldr	r1, [r4, #4]
3400fef2:	4638      	mov	r0, r7
3400fef4:	3101      	adds	r1, #1
3400fef6:	f7ff ff77 	bl	3400fde8 <_Balloc>
3400fefa:	4680      	mov	r8, r0
3400fefc:	b928      	cbnz	r0, 3400ff0a <__multadd+0x5e>
3400fefe:	4602      	mov	r2, r0
3400ff00:	4b0c      	ldr	r3, [pc, #48]	@ (3400ff34 <__multadd+0x88>)
3400ff02:	21ba      	movs	r1, #186	@ 0xba
3400ff04:	480c      	ldr	r0, [pc, #48]	@ (3400ff38 <__multadd+0x8c>)
3400ff06:	f7fd ff73 	bl	3400ddf0 <__assert_func>
3400ff0a:	6922      	ldr	r2, [r4, #16]
3400ff0c:	f104 010c 	add.w	r1, r4, #12
3400ff10:	300c      	adds	r0, #12
3400ff12:	3202      	adds	r2, #2
3400ff14:	0092      	lsls	r2, r2, #2
3400ff16:	f7ff f926 	bl	3400f166 <memcpy>
3400ff1a:	4621      	mov	r1, r4
3400ff1c:	4644      	mov	r4, r8
3400ff1e:	4638      	mov	r0, r7
3400ff20:	f7ff ffa2 	bl	3400fe68 <_Bfree>
3400ff24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3400ff28:	3501      	adds	r5, #1
3400ff2a:	615e      	str	r6, [r3, #20]
3400ff2c:	6125      	str	r5, [r4, #16]
3400ff2e:	4620      	mov	r0, r4
3400ff30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400ff34:	3403a159 	.word	0x3403a159
3400ff38:	3403a16a 	.word	0x3403a16a

3400ff3c <__hi0bits>:
3400ff3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3400ff40:	4603      	mov	r3, r0
3400ff42:	bf36      	itet	cc
3400ff44:	0403      	lslcc	r3, r0, #16
3400ff46:	2000      	movcs	r0, #0
3400ff48:	2010      	movcc	r0, #16
3400ff4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400ff4e:	bf3c      	itt	cc
3400ff50:	021b      	lslcc	r3, r3, #8
3400ff52:	3008      	addcc	r0, #8
3400ff54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ff58:	bf3c      	itt	cc
3400ff5a:	011b      	lslcc	r3, r3, #4
3400ff5c:	3004      	addcc	r0, #4
3400ff5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400ff62:	bf3c      	itt	cc
3400ff64:	009b      	lslcc	r3, r3, #2
3400ff66:	3002      	addcc	r0, #2
3400ff68:	2b00      	cmp	r3, #0
3400ff6a:	db05      	blt.n	3400ff78 <__hi0bits+0x3c>
3400ff6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3400ff70:	f100 0001 	add.w	r0, r0, #1
3400ff74:	bf08      	it	eq
3400ff76:	2020      	moveq	r0, #32
3400ff78:	4770      	bx	lr

3400ff7a <__lo0bits>:
3400ff7a:	6803      	ldr	r3, [r0, #0]
3400ff7c:	4602      	mov	r2, r0
3400ff7e:	f013 0007 	ands.w	r0, r3, #7
3400ff82:	d00b      	beq.n	3400ff9c <__lo0bits+0x22>
3400ff84:	07d9      	lsls	r1, r3, #31
3400ff86:	d421      	bmi.n	3400ffcc <__lo0bits+0x52>
3400ff88:	0798      	lsls	r0, r3, #30
3400ff8a:	bf47      	ittee	mi
3400ff8c:	085b      	lsrmi	r3, r3, #1
3400ff8e:	2001      	movmi	r0, #1
3400ff90:	089b      	lsrpl	r3, r3, #2
3400ff92:	2002      	movpl	r0, #2
3400ff94:	bf4c      	ite	mi
3400ff96:	6013      	strmi	r3, [r2, #0]
3400ff98:	6013      	strpl	r3, [r2, #0]
3400ff9a:	4770      	bx	lr
3400ff9c:	b299      	uxth	r1, r3
3400ff9e:	b909      	cbnz	r1, 3400ffa4 <__lo0bits+0x2a>
3400ffa0:	0c1b      	lsrs	r3, r3, #16
3400ffa2:	2010      	movs	r0, #16
3400ffa4:	b2d9      	uxtb	r1, r3
3400ffa6:	b909      	cbnz	r1, 3400ffac <__lo0bits+0x32>
3400ffa8:	3008      	adds	r0, #8
3400ffaa:	0a1b      	lsrs	r3, r3, #8
3400ffac:	0719      	lsls	r1, r3, #28
3400ffae:	bf04      	itt	eq
3400ffb0:	091b      	lsreq	r3, r3, #4
3400ffb2:	3004      	addeq	r0, #4
3400ffb4:	0799      	lsls	r1, r3, #30
3400ffb6:	bf04      	itt	eq
3400ffb8:	089b      	lsreq	r3, r3, #2
3400ffba:	3002      	addeq	r0, #2
3400ffbc:	07d9      	lsls	r1, r3, #31
3400ffbe:	d403      	bmi.n	3400ffc8 <__lo0bits+0x4e>
3400ffc0:	085b      	lsrs	r3, r3, #1
3400ffc2:	f100 0001 	add.w	r0, r0, #1
3400ffc6:	d003      	beq.n	3400ffd0 <__lo0bits+0x56>
3400ffc8:	6013      	str	r3, [r2, #0]
3400ffca:	4770      	bx	lr
3400ffcc:	2000      	movs	r0, #0
3400ffce:	4770      	bx	lr
3400ffd0:	2020      	movs	r0, #32
3400ffd2:	4770      	bx	lr

3400ffd4 <__i2b>:
3400ffd4:	b510      	push	{r4, lr}
3400ffd6:	460c      	mov	r4, r1
3400ffd8:	2101      	movs	r1, #1
3400ffda:	f7ff ff05 	bl	3400fde8 <_Balloc>
3400ffde:	4602      	mov	r2, r0
3400ffe0:	b928      	cbnz	r0, 3400ffee <__i2b+0x1a>
3400ffe2:	4b05      	ldr	r3, [pc, #20]	@ (3400fff8 <__i2b+0x24>)
3400ffe4:	f240 1145 	movw	r1, #325	@ 0x145
3400ffe8:	4804      	ldr	r0, [pc, #16]	@ (3400fffc <__i2b+0x28>)
3400ffea:	f7fd ff01 	bl	3400ddf0 <__assert_func>
3400ffee:	2301      	movs	r3, #1
3400fff0:	6144      	str	r4, [r0, #20]
3400fff2:	6103      	str	r3, [r0, #16]
3400fff4:	bd10      	pop	{r4, pc}
3400fff6:	bf00      	nop
3400fff8:	3403a159 	.word	0x3403a159
3400fffc:	3403a16a 	.word	0x3403a16a

34010000 <__multiply>:
34010000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34010004:	4614      	mov	r4, r2
34010006:	690a      	ldr	r2, [r1, #16]
34010008:	460f      	mov	r7, r1
3401000a:	b085      	sub	sp, #20
3401000c:	6923      	ldr	r3, [r4, #16]
3401000e:	429a      	cmp	r2, r3
34010010:	bfa2      	ittt	ge
34010012:	4623      	movge	r3, r4
34010014:	460c      	movge	r4, r1
34010016:	461f      	movge	r7, r3
34010018:	f8d4 a010 	ldr.w	sl, [r4, #16]
3401001c:	68a3      	ldr	r3, [r4, #8]
3401001e:	f8d7 9010 	ldr.w	r9, [r7, #16]
34010022:	6861      	ldr	r1, [r4, #4]
34010024:	eb0a 0609 	add.w	r6, sl, r9
34010028:	42b3      	cmp	r3, r6
3401002a:	bfb8      	it	lt
3401002c:	3101      	addlt	r1, #1
3401002e:	f7ff fedb 	bl	3400fde8 <_Balloc>
34010032:	b930      	cbnz	r0, 34010042 <__multiply+0x42>
34010034:	4602      	mov	r2, r0
34010036:	4b45      	ldr	r3, [pc, #276]	@ (3401014c <__multiply+0x14c>)
34010038:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3401003c:	4844      	ldr	r0, [pc, #272]	@ (34010150 <__multiply+0x150>)
3401003e:	f7fd fed7 	bl	3400ddf0 <__assert_func>
34010042:	f100 0514 	add.w	r5, r0, #20
34010046:	2200      	movs	r2, #0
34010048:	eb05 0886 	add.w	r8, r5, r6, lsl #2
3401004c:	462b      	mov	r3, r5
3401004e:	4543      	cmp	r3, r8
34010050:	d321      	bcc.n	34010096 <__multiply+0x96>
34010052:	f107 0114 	add.w	r1, r7, #20
34010056:	f104 0214 	add.w	r2, r4, #20
3401005a:	f104 0715 	add.w	r7, r4, #21
3401005e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
34010062:	eb01 0389 	add.w	r3, r1, r9, lsl #2
34010066:	9302      	str	r3, [sp, #8]
34010068:	1b13      	subs	r3, r2, r4
3401006a:	3b15      	subs	r3, #21
3401006c:	f023 0303 	bic.w	r3, r3, #3
34010070:	3304      	adds	r3, #4
34010072:	42ba      	cmp	r2, r7
34010074:	bf38      	it	cc
34010076:	2304      	movcc	r3, #4
34010078:	9301      	str	r3, [sp, #4]
3401007a:	9b02      	ldr	r3, [sp, #8]
3401007c:	9103      	str	r1, [sp, #12]
3401007e:	428b      	cmp	r3, r1
34010080:	d80c      	bhi.n	3401009c <__multiply+0x9c>
34010082:	2e00      	cmp	r6, #0
34010084:	dd03      	ble.n	3401008e <__multiply+0x8e>
34010086:	f858 3d04 	ldr.w	r3, [r8, #-4]!
3401008a:	2b00      	cmp	r3, #0
3401008c:	d05b      	beq.n	34010146 <__multiply+0x146>
3401008e:	6106      	str	r6, [r0, #16]
34010090:	b005      	add	sp, #20
34010092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34010096:	f843 2b04 	str.w	r2, [r3], #4
3401009a:	e7d8      	b.n	3401004e <__multiply+0x4e>
3401009c:	f8b1 a000 	ldrh.w	sl, [r1]
340100a0:	f1ba 0f00 	cmp.w	sl, #0
340100a4:	d024      	beq.n	340100f0 <__multiply+0xf0>
340100a6:	f104 0e14 	add.w	lr, r4, #20
340100aa:	46a9      	mov	r9, r5
340100ac:	f04f 0c00 	mov.w	ip, #0
340100b0:	f85e 7b04 	ldr.w	r7, [lr], #4
340100b4:	f8d9 3000 	ldr.w	r3, [r9]
340100b8:	fa1f fb87 	uxth.w	fp, r7
340100bc:	4572      	cmp	r2, lr
340100be:	b29b      	uxth	r3, r3
340100c0:	fb0a 330b 	mla	r3, sl, fp, r3
340100c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
340100c8:	f8d9 7000 	ldr.w	r7, [r9]
340100cc:	4463      	add	r3, ip
340100ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
340100d2:	fb0a c70b 	mla	r7, sl, fp, ip
340100d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
340100da:	b29b      	uxth	r3, r3
340100dc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
340100e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
340100e4:	f849 3b04 	str.w	r3, [r9], #4
340100e8:	d8e2      	bhi.n	340100b0 <__multiply+0xb0>
340100ea:	9b01      	ldr	r3, [sp, #4]
340100ec:	f845 c003 	str.w	ip, [r5, r3]
340100f0:	9b03      	ldr	r3, [sp, #12]
340100f2:	3104      	adds	r1, #4
340100f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
340100f8:	f1b9 0f00 	cmp.w	r9, #0
340100fc:	d021      	beq.n	34010142 <__multiply+0x142>
340100fe:	682b      	ldr	r3, [r5, #0]
34010100:	f104 0c14 	add.w	ip, r4, #20
34010104:	46ae      	mov	lr, r5
34010106:	f04f 0a00 	mov.w	sl, #0
3401010a:	f8bc b000 	ldrh.w	fp, [ip]
3401010e:	b29b      	uxth	r3, r3
34010110:	f8be 7002 	ldrh.w	r7, [lr, #2]
34010114:	fb09 770b 	mla	r7, r9, fp, r7
34010118:	4457      	add	r7, sl
3401011a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
3401011e:	f84e 3b04 	str.w	r3, [lr], #4
34010122:	f85c 3b04 	ldr.w	r3, [ip], #4
34010126:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401012a:	f8be 3000 	ldrh.w	r3, [lr]
3401012e:	4562      	cmp	r2, ip
34010130:	fb09 330a 	mla	r3, r9, sl, r3
34010134:	eb03 4317 	add.w	r3, r3, r7, lsr #16
34010138:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401013c:	d8e5      	bhi.n	3401010a <__multiply+0x10a>
3401013e:	9f01      	ldr	r7, [sp, #4]
34010140:	51eb      	str	r3, [r5, r7]
34010142:	3504      	adds	r5, #4
34010144:	e799      	b.n	3401007a <__multiply+0x7a>
34010146:	3e01      	subs	r6, #1
34010148:	e79b      	b.n	34010082 <__multiply+0x82>
3401014a:	bf00      	nop
3401014c:	3403a159 	.word	0x3403a159
34010150:	3403a16a 	.word	0x3403a16a

34010154 <__pow5mult>:
34010154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34010158:	4615      	mov	r5, r2
3401015a:	f012 0203 	ands.w	r2, r2, #3
3401015e:	4607      	mov	r7, r0
34010160:	460e      	mov	r6, r1
34010162:	d007      	beq.n	34010174 <__pow5mult+0x20>
34010164:	3a01      	subs	r2, #1
34010166:	4c25      	ldr	r4, [pc, #148]	@ (340101fc <__pow5mult+0xa8>)
34010168:	2300      	movs	r3, #0
3401016a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3401016e:	f7ff fe9d 	bl	3400feac <__multadd>
34010172:	4606      	mov	r6, r0
34010174:	10ad      	asrs	r5, r5, #2
34010176:	d03d      	beq.n	340101f4 <__pow5mult+0xa0>
34010178:	69fc      	ldr	r4, [r7, #28]
3401017a:	b97c      	cbnz	r4, 3401019c <__pow5mult+0x48>
3401017c:	2010      	movs	r0, #16
3401017e:	f7fd fe55 	bl	3400de2c <malloc>
34010182:	4602      	mov	r2, r0
34010184:	61f8      	str	r0, [r7, #28]
34010186:	b928      	cbnz	r0, 34010194 <__pow5mult+0x40>
34010188:	4b1d      	ldr	r3, [pc, #116]	@ (34010200 <__pow5mult+0xac>)
3401018a:	f240 11b3 	movw	r1, #435	@ 0x1b3
3401018e:	481d      	ldr	r0, [pc, #116]	@ (34010204 <__pow5mult+0xb0>)
34010190:	f7fd fe2e 	bl	3400ddf0 <__assert_func>
34010194:	e9c0 4401 	strd	r4, r4, [r0, #4]
34010198:	6004      	str	r4, [r0, #0]
3401019a:	60c4      	str	r4, [r0, #12]
3401019c:	f8d7 801c 	ldr.w	r8, [r7, #28]
340101a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
340101a4:	b94c      	cbnz	r4, 340101ba <__pow5mult+0x66>
340101a6:	f240 2171 	movw	r1, #625	@ 0x271
340101aa:	4638      	mov	r0, r7
340101ac:	f7ff ff12 	bl	3400ffd4 <__i2b>
340101b0:	2300      	movs	r3, #0
340101b2:	4604      	mov	r4, r0
340101b4:	f8c8 0008 	str.w	r0, [r8, #8]
340101b8:	6003      	str	r3, [r0, #0]
340101ba:	f04f 0900 	mov.w	r9, #0
340101be:	07eb      	lsls	r3, r5, #31
340101c0:	d50a      	bpl.n	340101d8 <__pow5mult+0x84>
340101c2:	4631      	mov	r1, r6
340101c4:	4622      	mov	r2, r4
340101c6:	4638      	mov	r0, r7
340101c8:	f7ff ff1a 	bl	34010000 <__multiply>
340101cc:	4680      	mov	r8, r0
340101ce:	4631      	mov	r1, r6
340101d0:	4638      	mov	r0, r7
340101d2:	4646      	mov	r6, r8
340101d4:	f7ff fe48 	bl	3400fe68 <_Bfree>
340101d8:	106d      	asrs	r5, r5, #1
340101da:	d00b      	beq.n	340101f4 <__pow5mult+0xa0>
340101dc:	6820      	ldr	r0, [r4, #0]
340101de:	b938      	cbnz	r0, 340101f0 <__pow5mult+0x9c>
340101e0:	4622      	mov	r2, r4
340101e2:	4621      	mov	r1, r4
340101e4:	4638      	mov	r0, r7
340101e6:	f7ff ff0b 	bl	34010000 <__multiply>
340101ea:	6020      	str	r0, [r4, #0]
340101ec:	f8c0 9000 	str.w	r9, [r0]
340101f0:	4604      	mov	r4, r0
340101f2:	e7e4      	b.n	340101be <__pow5mult+0x6a>
340101f4:	4630      	mov	r0, r6
340101f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
340101fa:	bf00      	nop
340101fc:	3403a1c4 	.word	0x3403a1c4
34010200:	3403a0ea 	.word	0x3403a0ea
34010204:	3403a16a 	.word	0x3403a16a

34010208 <__lshift>:
34010208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401020c:	460c      	mov	r4, r1
3401020e:	4607      	mov	r7, r0
34010210:	4691      	mov	r9, r2
34010212:	ea4f 1a62 	mov.w	sl, r2, asr #5
34010216:	6923      	ldr	r3, [r4, #16]
34010218:	6849      	ldr	r1, [r1, #4]
3401021a:	eb03 1862 	add.w	r8, r3, r2, asr #5
3401021e:	68a3      	ldr	r3, [r4, #8]
34010220:	f108 0601 	add.w	r6, r8, #1
34010224:	42b3      	cmp	r3, r6
34010226:	db0b      	blt.n	34010240 <__lshift+0x38>
34010228:	4638      	mov	r0, r7
3401022a:	f7ff fddd 	bl	3400fde8 <_Balloc>
3401022e:	4605      	mov	r5, r0
34010230:	b948      	cbnz	r0, 34010246 <__lshift+0x3e>
34010232:	4602      	mov	r2, r0
34010234:	4b28      	ldr	r3, [pc, #160]	@ (340102d8 <__lshift+0xd0>)
34010236:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3401023a:	4828      	ldr	r0, [pc, #160]	@ (340102dc <__lshift+0xd4>)
3401023c:	f7fd fdd8 	bl	3400ddf0 <__assert_func>
34010240:	3101      	adds	r1, #1
34010242:	005b      	lsls	r3, r3, #1
34010244:	e7ee      	b.n	34010224 <__lshift+0x1c>
34010246:	2300      	movs	r3, #0
34010248:	f100 0114 	add.w	r1, r0, #20
3401024c:	f100 0210 	add.w	r2, r0, #16
34010250:	4618      	mov	r0, r3
34010252:	4553      	cmp	r3, sl
34010254:	db33      	blt.n	340102be <__lshift+0xb6>
34010256:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3401025a:	f104 0314 	add.w	r3, r4, #20
3401025e:	6920      	ldr	r0, [r4, #16]
34010260:	f019 091f 	ands.w	r9, r9, #31
34010264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
34010268:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3401026c:	d02b      	beq.n	340102c6 <__lshift+0xbe>
3401026e:	f1c9 0e20 	rsb	lr, r9, #32
34010272:	468a      	mov	sl, r1
34010274:	2200      	movs	r2, #0
34010276:	6818      	ldr	r0, [r3, #0]
34010278:	fa00 f009 	lsl.w	r0, r0, r9
3401027c:	4310      	orrs	r0, r2
3401027e:	f84a 0b04 	str.w	r0, [sl], #4
34010282:	f853 2b04 	ldr.w	r2, [r3], #4
34010286:	459c      	cmp	ip, r3
34010288:	fa22 f20e 	lsr.w	r2, r2, lr
3401028c:	d8f3      	bhi.n	34010276 <__lshift+0x6e>
3401028e:	ebac 0304 	sub.w	r3, ip, r4
34010292:	f104 0015 	add.w	r0, r4, #21
34010296:	3b15      	subs	r3, #21
34010298:	f023 0303 	bic.w	r3, r3, #3
3401029c:	3304      	adds	r3, #4
3401029e:	4584      	cmp	ip, r0
340102a0:	bf38      	it	cc
340102a2:	2304      	movcc	r3, #4
340102a4:	50ca      	str	r2, [r1, r3]
340102a6:	b10a      	cbz	r2, 340102ac <__lshift+0xa4>
340102a8:	f108 0602 	add.w	r6, r8, #2
340102ac:	3e01      	subs	r6, #1
340102ae:	4638      	mov	r0, r7
340102b0:	4621      	mov	r1, r4
340102b2:	612e      	str	r6, [r5, #16]
340102b4:	f7ff fdd8 	bl	3400fe68 <_Bfree>
340102b8:	4628      	mov	r0, r5
340102ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
340102be:	3301      	adds	r3, #1
340102c0:	f842 0f04 	str.w	r0, [r2, #4]!
340102c4:	e7c5      	b.n	34010252 <__lshift+0x4a>
340102c6:	3904      	subs	r1, #4
340102c8:	f853 2b04 	ldr.w	r2, [r3], #4
340102cc:	459c      	cmp	ip, r3
340102ce:	f841 2f04 	str.w	r2, [r1, #4]!
340102d2:	d8f9      	bhi.n	340102c8 <__lshift+0xc0>
340102d4:	e7ea      	b.n	340102ac <__lshift+0xa4>
340102d6:	bf00      	nop
340102d8:	3403a159 	.word	0x3403a159
340102dc:	3403a16a 	.word	0x3403a16a

340102e0 <__mcmp>:
340102e0:	4603      	mov	r3, r0
340102e2:	690a      	ldr	r2, [r1, #16]
340102e4:	6900      	ldr	r0, [r0, #16]
340102e6:	1a80      	subs	r0, r0, r2
340102e8:	b530      	push	{r4, r5, lr}
340102ea:	d10e      	bne.n	3401030a <__mcmp+0x2a>
340102ec:	3314      	adds	r3, #20
340102ee:	3114      	adds	r1, #20
340102f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
340102f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
340102f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
340102fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
34010300:	4295      	cmp	r5, r2
34010302:	d003      	beq.n	3401030c <__mcmp+0x2c>
34010304:	d205      	bcs.n	34010312 <__mcmp+0x32>
34010306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401030a:	bd30      	pop	{r4, r5, pc}
3401030c:	42a3      	cmp	r3, r4
3401030e:	d3f3      	bcc.n	340102f8 <__mcmp+0x18>
34010310:	e7fb      	b.n	3401030a <__mcmp+0x2a>
34010312:	2001      	movs	r0, #1
34010314:	e7f9      	b.n	3401030a <__mcmp+0x2a>
	...

34010318 <__mdiff>:
34010318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401031c:	4689      	mov	r9, r1
3401031e:	4606      	mov	r6, r0
34010320:	4611      	mov	r1, r2
34010322:	4614      	mov	r4, r2
34010324:	4648      	mov	r0, r9
34010326:	f7ff ffdb 	bl	340102e0 <__mcmp>
3401032a:	1e05      	subs	r5, r0, #0
3401032c:	d112      	bne.n	34010354 <__mdiff+0x3c>
3401032e:	4629      	mov	r1, r5
34010330:	4630      	mov	r0, r6
34010332:	f7ff fd59 	bl	3400fde8 <_Balloc>
34010336:	4602      	mov	r2, r0
34010338:	b928      	cbnz	r0, 34010346 <__mdiff+0x2e>
3401033a:	4b41      	ldr	r3, [pc, #260]	@ (34010440 <__mdiff+0x128>)
3401033c:	f240 2137 	movw	r1, #567	@ 0x237
34010340:	4840      	ldr	r0, [pc, #256]	@ (34010444 <__mdiff+0x12c>)
34010342:	f7fd fd55 	bl	3400ddf0 <__assert_func>
34010346:	2301      	movs	r3, #1
34010348:	e9c0 3504 	strd	r3, r5, [r0, #16]
3401034c:	4610      	mov	r0, r2
3401034e:	b003      	add	sp, #12
34010350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34010354:	bfbc      	itt	lt
34010356:	464b      	movlt	r3, r9
34010358:	46a1      	movlt	r9, r4
3401035a:	4630      	mov	r0, r6
3401035c:	bfb8      	it	lt
3401035e:	2501      	movlt	r5, #1
34010360:	f8d9 1004 	ldr.w	r1, [r9, #4]
34010364:	bfb4      	ite	lt
34010366:	461c      	movlt	r4, r3
34010368:	2500      	movge	r5, #0
3401036a:	f7ff fd3d 	bl	3400fde8 <_Balloc>
3401036e:	4602      	mov	r2, r0
34010370:	b918      	cbnz	r0, 3401037a <__mdiff+0x62>
34010372:	4b33      	ldr	r3, [pc, #204]	@ (34010440 <__mdiff+0x128>)
34010374:	f240 2145 	movw	r1, #581	@ 0x245
34010378:	e7e2      	b.n	34010340 <__mdiff+0x28>
3401037a:	f8d9 7010 	ldr.w	r7, [r9, #16]
3401037e:	f104 0e14 	add.w	lr, r4, #20
34010382:	6926      	ldr	r6, [r4, #16]
34010384:	f100 0b14 	add.w	fp, r0, #20
34010388:	60c5      	str	r5, [r0, #12]
3401038a:	f109 0514 	add.w	r5, r9, #20
3401038e:	f109 0310 	add.w	r3, r9, #16
34010392:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
34010396:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3401039a:	46d9      	mov	r9, fp
3401039c:	f04f 0c00 	mov.w	ip, #0
340103a0:	9301      	str	r3, [sp, #4]
340103a2:	9b01      	ldr	r3, [sp, #4]
340103a4:	f85e 0b04 	ldr.w	r0, [lr], #4
340103a8:	f853 af04 	ldr.w	sl, [r3, #4]!
340103ac:	4576      	cmp	r6, lr
340103ae:	9301      	str	r3, [sp, #4]
340103b0:	fa1f f38a 	uxth.w	r3, sl
340103b4:	4619      	mov	r1, r3
340103b6:	b283      	uxth	r3, r0
340103b8:	ea4f 4010 	mov.w	r0, r0, lsr #16
340103bc:	eba1 0303 	sub.w	r3, r1, r3
340103c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
340103c4:	4463      	add	r3, ip
340103c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
340103ca:	b29b      	uxth	r3, r3
340103cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
340103d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
340103d4:	f849 3b04 	str.w	r3, [r9], #4
340103d8:	d8e3      	bhi.n	340103a2 <__mdiff+0x8a>
340103da:	1b33      	subs	r3, r6, r4
340103dc:	3415      	adds	r4, #21
340103de:	3b15      	subs	r3, #21
340103e0:	f023 0303 	bic.w	r3, r3, #3
340103e4:	3304      	adds	r3, #4
340103e6:	42a6      	cmp	r6, r4
340103e8:	bf38      	it	cc
340103ea:	2304      	movcc	r3, #4
340103ec:	441d      	add	r5, r3
340103ee:	445b      	add	r3, fp
340103f0:	462c      	mov	r4, r5
340103f2:	461e      	mov	r6, r3
340103f4:	4544      	cmp	r4, r8
340103f6:	d30e      	bcc.n	34010416 <__mdiff+0xfe>
340103f8:	f108 0103 	add.w	r1, r8, #3
340103fc:	1b49      	subs	r1, r1, r5
340103fe:	3d03      	subs	r5, #3
34010400:	f021 0103 	bic.w	r1, r1, #3
34010404:	45a8      	cmp	r8, r5
34010406:	bf38      	it	cc
34010408:	2100      	movcc	r1, #0
3401040a:	440b      	add	r3, r1
3401040c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
34010410:	b199      	cbz	r1, 3401043a <__mdiff+0x122>
34010412:	6117      	str	r7, [r2, #16]
34010414:	e79a      	b.n	3401034c <__mdiff+0x34>
34010416:	f854 1b04 	ldr.w	r1, [r4], #4
3401041a:	46e6      	mov	lr, ip
3401041c:	fa1f fc81 	uxth.w	ip, r1
34010420:	0c08      	lsrs	r0, r1, #16
34010422:	4471      	add	r1, lr
34010424:	44f4      	add	ip, lr
34010426:	b289      	uxth	r1, r1
34010428:	eb00 402c 	add.w	r0, r0, ip, asr #16
3401042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
34010430:	ea4f 4c20 	mov.w	ip, r0, asr #16
34010434:	f846 1b04 	str.w	r1, [r6], #4
34010438:	e7dc      	b.n	340103f4 <__mdiff+0xdc>
3401043a:	3f01      	subs	r7, #1
3401043c:	e7e6      	b.n	3401040c <__mdiff+0xf4>
3401043e:	bf00      	nop
34010440:	3403a159 	.word	0x3403a159
34010444:	3403a16a 	.word	0x3403a16a

34010448 <__d2b>:
34010448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3401044c:	460f      	mov	r7, r1
3401044e:	2101      	movs	r1, #1
34010450:	4616      	mov	r6, r2
34010452:	ec59 8b10 	vmov	r8, r9, d0
34010456:	f7ff fcc7 	bl	3400fde8 <_Balloc>
3401045a:	4604      	mov	r4, r0
3401045c:	b930      	cbnz	r0, 3401046c <__d2b+0x24>
3401045e:	4602      	mov	r2, r0
34010460:	4b23      	ldr	r3, [pc, #140]	@ (340104f0 <__d2b+0xa8>)
34010462:	f240 310f 	movw	r1, #783	@ 0x30f
34010466:	4823      	ldr	r0, [pc, #140]	@ (340104f4 <__d2b+0xac>)
34010468:	f7fd fcc2 	bl	3400ddf0 <__assert_func>
3401046c:	f3c9 550a 	ubfx	r5, r9, #20, #11
34010470:	f3c9 0313 	ubfx	r3, r9, #0, #20
34010474:	b10d      	cbz	r5, 3401047a <__d2b+0x32>
34010476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3401047a:	9301      	str	r3, [sp, #4]
3401047c:	f1b8 0300 	subs.w	r3, r8, #0
34010480:	d023      	beq.n	340104ca <__d2b+0x82>
34010482:	4668      	mov	r0, sp
34010484:	9300      	str	r3, [sp, #0]
34010486:	f7ff fd78 	bl	3400ff7a <__lo0bits>
3401048a:	e9dd 1200 	ldrd	r1, r2, [sp]
3401048e:	b1d0      	cbz	r0, 340104c6 <__d2b+0x7e>
34010490:	f1c0 0320 	rsb	r3, r0, #32
34010494:	fa02 f303 	lsl.w	r3, r2, r3
34010498:	40c2      	lsrs	r2, r0
3401049a:	430b      	orrs	r3, r1
3401049c:	9201      	str	r2, [sp, #4]
3401049e:	6163      	str	r3, [r4, #20]
340104a0:	9b01      	ldr	r3, [sp, #4]
340104a2:	2b00      	cmp	r3, #0
340104a4:	61a3      	str	r3, [r4, #24]
340104a6:	bf0c      	ite	eq
340104a8:	2201      	moveq	r2, #1
340104aa:	2202      	movne	r2, #2
340104ac:	6122      	str	r2, [r4, #16]
340104ae:	b1a5      	cbz	r5, 340104da <__d2b+0x92>
340104b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
340104b4:	4405      	add	r5, r0
340104b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
340104ba:	603d      	str	r5, [r7, #0]
340104bc:	6030      	str	r0, [r6, #0]
340104be:	4620      	mov	r0, r4
340104c0:	b003      	add	sp, #12
340104c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
340104c6:	6161      	str	r1, [r4, #20]
340104c8:	e7ea      	b.n	340104a0 <__d2b+0x58>
340104ca:	a801      	add	r0, sp, #4
340104cc:	f7ff fd55 	bl	3400ff7a <__lo0bits>
340104d0:	9b01      	ldr	r3, [sp, #4]
340104d2:	3020      	adds	r0, #32
340104d4:	2201      	movs	r2, #1
340104d6:	6163      	str	r3, [r4, #20]
340104d8:	e7e8      	b.n	340104ac <__d2b+0x64>
340104da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
340104de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
340104e2:	6038      	str	r0, [r7, #0]
340104e4:	6918      	ldr	r0, [r3, #16]
340104e6:	f7ff fd29 	bl	3400ff3c <__hi0bits>
340104ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
340104ee:	e7e5      	b.n	340104bc <__d2b+0x74>
340104f0:	3403a159 	.word	0x3403a159
340104f4:	3403a16a 	.word	0x3403a16a

340104f8 <__sfputc_r>:
340104f8:	6893      	ldr	r3, [r2, #8]
340104fa:	3b01      	subs	r3, #1
340104fc:	2b00      	cmp	r3, #0
340104fe:	6093      	str	r3, [r2, #8]
34010500:	b410      	push	{r4}
34010502:	da08      	bge.n	34010516 <__sfputc_r+0x1e>
34010504:	6994      	ldr	r4, [r2, #24]
34010506:	42a3      	cmp	r3, r4
34010508:	db01      	blt.n	3401050e <__sfputc_r+0x16>
3401050a:	290a      	cmp	r1, #10
3401050c:	d103      	bne.n	34010516 <__sfputc_r+0x1e>
3401050e:	f85d 4b04 	ldr.w	r4, [sp], #4
34010512:	f7fe bb04 	b.w	3400eb1e <__swbuf_r>
34010516:	6813      	ldr	r3, [r2, #0]
34010518:	1c58      	adds	r0, r3, #1
3401051a:	6010      	str	r0, [r2, #0]
3401051c:	4608      	mov	r0, r1
3401051e:	7019      	strb	r1, [r3, #0]
34010520:	f85d 4b04 	ldr.w	r4, [sp], #4
34010524:	4770      	bx	lr

34010526 <__sfputs_r>:
34010526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010528:	4606      	mov	r6, r0
3401052a:	460f      	mov	r7, r1
3401052c:	4614      	mov	r4, r2
3401052e:	18d5      	adds	r5, r2, r3
34010530:	42ac      	cmp	r4, r5
34010532:	d101      	bne.n	34010538 <__sfputs_r+0x12>
34010534:	2000      	movs	r0, #0
34010536:	e007      	b.n	34010548 <__sfputs_r+0x22>
34010538:	463a      	mov	r2, r7
3401053a:	f814 1b01 	ldrb.w	r1, [r4], #1
3401053e:	4630      	mov	r0, r6
34010540:	f7ff ffda 	bl	340104f8 <__sfputc_r>
34010544:	1c43      	adds	r3, r0, #1
34010546:	d1f3      	bne.n	34010530 <__sfputs_r+0xa>
34010548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

3401054c <_vfiprintf_r>:
3401054c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34010550:	460d      	mov	r5, r1
34010552:	b09d      	sub	sp, #116	@ 0x74
34010554:	4614      	mov	r4, r2
34010556:	4698      	mov	r8, r3
34010558:	4606      	mov	r6, r0
3401055a:	b118      	cbz	r0, 34010564 <_vfiprintf_r+0x18>
3401055c:	6a03      	ldr	r3, [r0, #32]
3401055e:	b90b      	cbnz	r3, 34010564 <_vfiprintf_r+0x18>
34010560:	f7fe f9e2 	bl	3400e928 <__sinit>
34010564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34010566:	07d9      	lsls	r1, r3, #31
34010568:	d405      	bmi.n	34010576 <_vfiprintf_r+0x2a>
3401056a:	89ab      	ldrh	r3, [r5, #12]
3401056c:	059a      	lsls	r2, r3, #22
3401056e:	d402      	bmi.n	34010576 <_vfiprintf_r+0x2a>
34010570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34010572:	f7fe fde8 	bl	3400f146 <__retarget_lock_acquire_recursive>
34010576:	89ab      	ldrh	r3, [r5, #12]
34010578:	071b      	lsls	r3, r3, #28
3401057a:	d501      	bpl.n	34010580 <_vfiprintf_r+0x34>
3401057c:	692b      	ldr	r3, [r5, #16]
3401057e:	b99b      	cbnz	r3, 340105a8 <_vfiprintf_r+0x5c>
34010580:	4629      	mov	r1, r5
34010582:	4630      	mov	r0, r6
34010584:	f7fe fb0a 	bl	3400eb9c <__swsetup_r>
34010588:	b170      	cbz	r0, 340105a8 <_vfiprintf_r+0x5c>
3401058a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401058c:	07dc      	lsls	r4, r3, #31
3401058e:	d504      	bpl.n	3401059a <_vfiprintf_r+0x4e>
34010590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34010594:	b01d      	add	sp, #116	@ 0x74
34010596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401059a:	89ab      	ldrh	r3, [r5, #12]
3401059c:	0598      	lsls	r0, r3, #22
3401059e:	d4f7      	bmi.n	34010590 <_vfiprintf_r+0x44>
340105a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
340105a2:	f7fe fdd1 	bl	3400f148 <__retarget_lock_release_recursive>
340105a6:	e7f3      	b.n	34010590 <_vfiprintf_r+0x44>
340105a8:	2300      	movs	r3, #0
340105aa:	f8cd 800c 	str.w	r8, [sp, #12]
340105ae:	f04f 0901 	mov.w	r9, #1
340105b2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 34010768 <_vfiprintf_r+0x21c>
340105b6:	9309      	str	r3, [sp, #36]	@ 0x24
340105b8:	2320      	movs	r3, #32
340105ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
340105be:	2330      	movs	r3, #48	@ 0x30
340105c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
340105c4:	4623      	mov	r3, r4
340105c6:	469a      	mov	sl, r3
340105c8:	f813 2b01 	ldrb.w	r2, [r3], #1
340105cc:	b10a      	cbz	r2, 340105d2 <_vfiprintf_r+0x86>
340105ce:	2a25      	cmp	r2, #37	@ 0x25
340105d0:	d1f9      	bne.n	340105c6 <_vfiprintf_r+0x7a>
340105d2:	ebba 0b04 	subs.w	fp, sl, r4
340105d6:	d00b      	beq.n	340105f0 <_vfiprintf_r+0xa4>
340105d8:	465b      	mov	r3, fp
340105da:	4622      	mov	r2, r4
340105dc:	4629      	mov	r1, r5
340105de:	4630      	mov	r0, r6
340105e0:	f7ff ffa1 	bl	34010526 <__sfputs_r>
340105e4:	3001      	adds	r0, #1
340105e6:	f000 80a7 	beq.w	34010738 <_vfiprintf_r+0x1ec>
340105ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
340105ec:	445a      	add	r2, fp
340105ee:	9209      	str	r2, [sp, #36]	@ 0x24
340105f0:	f89a 3000 	ldrb.w	r3, [sl]
340105f4:	2b00      	cmp	r3, #0
340105f6:	f000 809f 	beq.w	34010738 <_vfiprintf_r+0x1ec>
340105fa:	2300      	movs	r3, #0
340105fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34010600:	f10a 0a01 	add.w	sl, sl, #1
34010604:	9304      	str	r3, [sp, #16]
34010606:	9307      	str	r3, [sp, #28]
34010608:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3401060c:	931a      	str	r3, [sp, #104]	@ 0x68
3401060e:	e9cd 2305 	strd	r2, r3, [sp, #20]
34010612:	4654      	mov	r4, sl
34010614:	2205      	movs	r2, #5
34010616:	4854      	ldr	r0, [pc, #336]	@ (34010768 <_vfiprintf_r+0x21c>)
34010618:	f814 1b01 	ldrb.w	r1, [r4], #1
3401061c:	f7fe fd95 	bl	3400f14a <memchr>
34010620:	9a04      	ldr	r2, [sp, #16]
34010622:	b9d8      	cbnz	r0, 3401065c <_vfiprintf_r+0x110>
34010624:	06d1      	lsls	r1, r2, #27
34010626:	bf44      	itt	mi
34010628:	2320      	movmi	r3, #32
3401062a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401062e:	0713      	lsls	r3, r2, #28
34010630:	bf44      	itt	mi
34010632:	232b      	movmi	r3, #43	@ 0x2b
34010634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34010638:	f89a 3000 	ldrb.w	r3, [sl]
3401063c:	2b2a      	cmp	r3, #42	@ 0x2a
3401063e:	d015      	beq.n	3401066c <_vfiprintf_r+0x120>
34010640:	9a07      	ldr	r2, [sp, #28]
34010642:	4654      	mov	r4, sl
34010644:	2000      	movs	r0, #0
34010646:	f04f 0c0a 	mov.w	ip, #10
3401064a:	4621      	mov	r1, r4
3401064c:	f811 3b01 	ldrb.w	r3, [r1], #1
34010650:	3b30      	subs	r3, #48	@ 0x30
34010652:	2b09      	cmp	r3, #9
34010654:	d94b      	bls.n	340106ee <_vfiprintf_r+0x1a2>
34010656:	b1b0      	cbz	r0, 34010686 <_vfiprintf_r+0x13a>
34010658:	9207      	str	r2, [sp, #28]
3401065a:	e014      	b.n	34010686 <_vfiprintf_r+0x13a>
3401065c:	eba0 0308 	sub.w	r3, r0, r8
34010660:	46a2      	mov	sl, r4
34010662:	fa09 f303 	lsl.w	r3, r9, r3
34010666:	4313      	orrs	r3, r2
34010668:	9304      	str	r3, [sp, #16]
3401066a:	e7d2      	b.n	34010612 <_vfiprintf_r+0xc6>
3401066c:	9b03      	ldr	r3, [sp, #12]
3401066e:	1d19      	adds	r1, r3, #4
34010670:	681b      	ldr	r3, [r3, #0]
34010672:	2b00      	cmp	r3, #0
34010674:	9103      	str	r1, [sp, #12]
34010676:	bfbb      	ittet	lt
34010678:	425b      	neglt	r3, r3
3401067a:	f042 0202 	orrlt.w	r2, r2, #2
3401067e:	9307      	strge	r3, [sp, #28]
34010680:	9307      	strlt	r3, [sp, #28]
34010682:	bfb8      	it	lt
34010684:	9204      	strlt	r2, [sp, #16]
34010686:	7823      	ldrb	r3, [r4, #0]
34010688:	2b2e      	cmp	r3, #46	@ 0x2e
3401068a:	d10a      	bne.n	340106a2 <_vfiprintf_r+0x156>
3401068c:	7863      	ldrb	r3, [r4, #1]
3401068e:	2b2a      	cmp	r3, #42	@ 0x2a
34010690:	d132      	bne.n	340106f8 <_vfiprintf_r+0x1ac>
34010692:	9b03      	ldr	r3, [sp, #12]
34010694:	3402      	adds	r4, #2
34010696:	1d1a      	adds	r2, r3, #4
34010698:	681b      	ldr	r3, [r3, #0]
3401069a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3401069e:	9203      	str	r2, [sp, #12]
340106a0:	9305      	str	r3, [sp, #20]
340106a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 34010778 <_vfiprintf_r+0x22c>
340106a6:	2203      	movs	r2, #3
340106a8:	7821      	ldrb	r1, [r4, #0]
340106aa:	4650      	mov	r0, sl
340106ac:	f7fe fd4d 	bl	3400f14a <memchr>
340106b0:	b138      	cbz	r0, 340106c2 <_vfiprintf_r+0x176>
340106b2:	eba0 000a 	sub.w	r0, r0, sl
340106b6:	2240      	movs	r2, #64	@ 0x40
340106b8:	9b04      	ldr	r3, [sp, #16]
340106ba:	3401      	adds	r4, #1
340106bc:	4082      	lsls	r2, r0
340106be:	4313      	orrs	r3, r2
340106c0:	9304      	str	r3, [sp, #16]
340106c2:	f814 1b01 	ldrb.w	r1, [r4], #1
340106c6:	2206      	movs	r2, #6
340106c8:	4828      	ldr	r0, [pc, #160]	@ (3401076c <_vfiprintf_r+0x220>)
340106ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
340106ce:	f7fe fd3c 	bl	3400f14a <memchr>
340106d2:	2800      	cmp	r0, #0
340106d4:	d03f      	beq.n	34010756 <_vfiprintf_r+0x20a>
340106d6:	4b26      	ldr	r3, [pc, #152]	@ (34010770 <_vfiprintf_r+0x224>)
340106d8:	bb1b      	cbnz	r3, 34010722 <_vfiprintf_r+0x1d6>
340106da:	9b03      	ldr	r3, [sp, #12]
340106dc:	3307      	adds	r3, #7
340106de:	f023 0307 	bic.w	r3, r3, #7
340106e2:	3308      	adds	r3, #8
340106e4:	9303      	str	r3, [sp, #12]
340106e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340106e8:	443b      	add	r3, r7
340106ea:	9309      	str	r3, [sp, #36]	@ 0x24
340106ec:	e76a      	b.n	340105c4 <_vfiprintf_r+0x78>
340106ee:	fb0c 3202 	mla	r2, ip, r2, r3
340106f2:	460c      	mov	r4, r1
340106f4:	2001      	movs	r0, #1
340106f6:	e7a8      	b.n	3401064a <_vfiprintf_r+0xfe>
340106f8:	2300      	movs	r3, #0
340106fa:	3401      	adds	r4, #1
340106fc:	f04f 0c0a 	mov.w	ip, #10
34010700:	4619      	mov	r1, r3
34010702:	9305      	str	r3, [sp, #20]
34010704:	4620      	mov	r0, r4
34010706:	f810 2b01 	ldrb.w	r2, [r0], #1
3401070a:	3a30      	subs	r2, #48	@ 0x30
3401070c:	2a09      	cmp	r2, #9
3401070e:	d903      	bls.n	34010718 <_vfiprintf_r+0x1cc>
34010710:	2b00      	cmp	r3, #0
34010712:	d0c6      	beq.n	340106a2 <_vfiprintf_r+0x156>
34010714:	9105      	str	r1, [sp, #20]
34010716:	e7c4      	b.n	340106a2 <_vfiprintf_r+0x156>
34010718:	fb0c 2101 	mla	r1, ip, r1, r2
3401071c:	4604      	mov	r4, r0
3401071e:	2301      	movs	r3, #1
34010720:	e7f0      	b.n	34010704 <_vfiprintf_r+0x1b8>
34010722:	ab03      	add	r3, sp, #12
34010724:	462a      	mov	r2, r5
34010726:	a904      	add	r1, sp, #16
34010728:	4630      	mov	r0, r6
3401072a:	9300      	str	r3, [sp, #0]
3401072c:	4b11      	ldr	r3, [pc, #68]	@ (34010774 <_vfiprintf_r+0x228>)
3401072e:	f7fd fcc3 	bl	3400e0b8 <_printf_float>
34010732:	4607      	mov	r7, r0
34010734:	1c78      	adds	r0, r7, #1
34010736:	d1d6      	bne.n	340106e6 <_vfiprintf_r+0x19a>
34010738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401073a:	07d9      	lsls	r1, r3, #31
3401073c:	d405      	bmi.n	3401074a <_vfiprintf_r+0x1fe>
3401073e:	89ab      	ldrh	r3, [r5, #12]
34010740:	059a      	lsls	r2, r3, #22
34010742:	d402      	bmi.n	3401074a <_vfiprintf_r+0x1fe>
34010744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34010746:	f7fe fcff 	bl	3400f148 <__retarget_lock_release_recursive>
3401074a:	89ab      	ldrh	r3, [r5, #12]
3401074c:	065b      	lsls	r3, r3, #25
3401074e:	f53f af1f 	bmi.w	34010590 <_vfiprintf_r+0x44>
34010752:	9809      	ldr	r0, [sp, #36]	@ 0x24
34010754:	e71e      	b.n	34010594 <_vfiprintf_r+0x48>
34010756:	ab03      	add	r3, sp, #12
34010758:	462a      	mov	r2, r5
3401075a:	a904      	add	r1, sp, #16
3401075c:	4630      	mov	r0, r6
3401075e:	9300      	str	r3, [sp, #0]
34010760:	4b04      	ldr	r3, [pc, #16]	@ (34010774 <_vfiprintf_r+0x228>)
34010762:	f7fd ff35 	bl	3400e5d0 <_printf_i>
34010766:	e7e4      	b.n	34010732 <_vfiprintf_r+0x1e6>
34010768:	3403a2c0 	.word	0x3403a2c0
3401076c:	3403a2ca 	.word	0x3403a2ca
34010770:	3400e0b9 	.word	0x3400e0b9
34010774:	34010527 	.word	0x34010527
34010778:	3403a2c6 	.word	0x3403a2c6

3401077c <__sflush_r>:
3401077c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
34010780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34010784:	0716      	lsls	r6, r2, #28
34010786:	4605      	mov	r5, r0
34010788:	460c      	mov	r4, r1
3401078a:	d454      	bmi.n	34010836 <__sflush_r+0xba>
3401078c:	684b      	ldr	r3, [r1, #4]
3401078e:	2b00      	cmp	r3, #0
34010790:	dc02      	bgt.n	34010798 <__sflush_r+0x1c>
34010792:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
34010794:	2b00      	cmp	r3, #0
34010796:	dd48      	ble.n	3401082a <__sflush_r+0xae>
34010798:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3401079a:	2e00      	cmp	r6, #0
3401079c:	d045      	beq.n	3401082a <__sflush_r+0xae>
3401079e:	2300      	movs	r3, #0
340107a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
340107a4:	682f      	ldr	r7, [r5, #0]
340107a6:	6a21      	ldr	r1, [r4, #32]
340107a8:	602b      	str	r3, [r5, #0]
340107aa:	d030      	beq.n	3401080e <__sflush_r+0x92>
340107ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
340107ae:	89a3      	ldrh	r3, [r4, #12]
340107b0:	0759      	lsls	r1, r3, #29
340107b2:	d505      	bpl.n	340107c0 <__sflush_r+0x44>
340107b4:	6863      	ldr	r3, [r4, #4]
340107b6:	1ad2      	subs	r2, r2, r3
340107b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
340107ba:	b10b      	cbz	r3, 340107c0 <__sflush_r+0x44>
340107bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340107be:	1ad2      	subs	r2, r2, r3
340107c0:	2300      	movs	r3, #0
340107c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
340107c4:	6a21      	ldr	r1, [r4, #32]
340107c6:	4628      	mov	r0, r5
340107c8:	47b0      	blx	r6
340107ca:	1c43      	adds	r3, r0, #1
340107cc:	89a3      	ldrh	r3, [r4, #12]
340107ce:	d106      	bne.n	340107de <__sflush_r+0x62>
340107d0:	6829      	ldr	r1, [r5, #0]
340107d2:	291d      	cmp	r1, #29
340107d4:	d82b      	bhi.n	3401082e <__sflush_r+0xb2>
340107d6:	4a2a      	ldr	r2, [pc, #168]	@ (34010880 <__sflush_r+0x104>)
340107d8:	410a      	asrs	r2, r1
340107da:	07d6      	lsls	r6, r2, #31
340107dc:	d427      	bmi.n	3401082e <__sflush_r+0xb2>
340107de:	2200      	movs	r2, #0
340107e0:	04d9      	lsls	r1, r3, #19
340107e2:	6062      	str	r2, [r4, #4]
340107e4:	6922      	ldr	r2, [r4, #16]
340107e6:	6022      	str	r2, [r4, #0]
340107e8:	d504      	bpl.n	340107f4 <__sflush_r+0x78>
340107ea:	1c42      	adds	r2, r0, #1
340107ec:	d101      	bne.n	340107f2 <__sflush_r+0x76>
340107ee:	682b      	ldr	r3, [r5, #0]
340107f0:	b903      	cbnz	r3, 340107f4 <__sflush_r+0x78>
340107f2:	6560      	str	r0, [r4, #84]	@ 0x54
340107f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
340107f6:	602f      	str	r7, [r5, #0]
340107f8:	b1b9      	cbz	r1, 3401082a <__sflush_r+0xae>
340107fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
340107fe:	4299      	cmp	r1, r3
34010800:	d002      	beq.n	34010808 <__sflush_r+0x8c>
34010802:	4628      	mov	r0, r5
34010804:	f7ff faa6 	bl	3400fd54 <_free_r>
34010808:	2300      	movs	r3, #0
3401080a:	6363      	str	r3, [r4, #52]	@ 0x34
3401080c:	e00d      	b.n	3401082a <__sflush_r+0xae>
3401080e:	2301      	movs	r3, #1
34010810:	4628      	mov	r0, r5
34010812:	47b0      	blx	r6
34010814:	4602      	mov	r2, r0
34010816:	1c50      	adds	r0, r2, #1
34010818:	d1c9      	bne.n	340107ae <__sflush_r+0x32>
3401081a:	682b      	ldr	r3, [r5, #0]
3401081c:	2b00      	cmp	r3, #0
3401081e:	d0c6      	beq.n	340107ae <__sflush_r+0x32>
34010820:	2b1d      	cmp	r3, #29
34010822:	d001      	beq.n	34010828 <__sflush_r+0xac>
34010824:	2b16      	cmp	r3, #22
34010826:	d11d      	bne.n	34010864 <__sflush_r+0xe8>
34010828:	602f      	str	r7, [r5, #0]
3401082a:	2000      	movs	r0, #0
3401082c:	e021      	b.n	34010872 <__sflush_r+0xf6>
3401082e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34010832:	b21b      	sxth	r3, r3
34010834:	e01a      	b.n	3401086c <__sflush_r+0xf0>
34010836:	690f      	ldr	r7, [r1, #16]
34010838:	2f00      	cmp	r7, #0
3401083a:	d0f6      	beq.n	3401082a <__sflush_r+0xae>
3401083c:	0793      	lsls	r3, r2, #30
3401083e:	680e      	ldr	r6, [r1, #0]
34010840:	600f      	str	r7, [r1, #0]
34010842:	bf0c      	ite	eq
34010844:	694b      	ldreq	r3, [r1, #20]
34010846:	2300      	movne	r3, #0
34010848:	eba6 0807 	sub.w	r8, r6, r7
3401084c:	608b      	str	r3, [r1, #8]
3401084e:	f1b8 0f00 	cmp.w	r8, #0
34010852:	ddea      	ble.n	3401082a <__sflush_r+0xae>
34010854:	4643      	mov	r3, r8
34010856:	463a      	mov	r2, r7
34010858:	6a21      	ldr	r1, [r4, #32]
3401085a:	4628      	mov	r0, r5
3401085c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3401085e:	47b0      	blx	r6
34010860:	2800      	cmp	r0, #0
34010862:	dc08      	bgt.n	34010876 <__sflush_r+0xfa>
34010864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34010868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401086c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34010870:	81a3      	strh	r3, [r4, #12]
34010872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34010876:	4407      	add	r7, r0
34010878:	eba8 0800 	sub.w	r8, r8, r0
3401087c:	e7e7      	b.n	3401084e <__sflush_r+0xd2>
3401087e:	bf00      	nop
34010880:	dfbffffe 	.word	0xdfbffffe

34010884 <_fflush_r>:
34010884:	b538      	push	{r3, r4, r5, lr}
34010886:	690b      	ldr	r3, [r1, #16]
34010888:	4605      	mov	r5, r0
3401088a:	460c      	mov	r4, r1
3401088c:	b913      	cbnz	r3, 34010894 <_fflush_r+0x10>
3401088e:	2500      	movs	r5, #0
34010890:	4628      	mov	r0, r5
34010892:	bd38      	pop	{r3, r4, r5, pc}
34010894:	b118      	cbz	r0, 3401089e <_fflush_r+0x1a>
34010896:	6a03      	ldr	r3, [r0, #32]
34010898:	b90b      	cbnz	r3, 3401089e <_fflush_r+0x1a>
3401089a:	f7fe f845 	bl	3400e928 <__sinit>
3401089e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
340108a2:	2b00      	cmp	r3, #0
340108a4:	d0f3      	beq.n	3401088e <_fflush_r+0xa>
340108a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
340108a8:	07d0      	lsls	r0, r2, #31
340108aa:	d404      	bmi.n	340108b6 <_fflush_r+0x32>
340108ac:	0599      	lsls	r1, r3, #22
340108ae:	d402      	bmi.n	340108b6 <_fflush_r+0x32>
340108b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
340108b2:	f7fe fc48 	bl	3400f146 <__retarget_lock_acquire_recursive>
340108b6:	4628      	mov	r0, r5
340108b8:	4621      	mov	r1, r4
340108ba:	f7ff ff5f 	bl	3401077c <__sflush_r>
340108be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340108c0:	4605      	mov	r5, r0
340108c2:	07da      	lsls	r2, r3, #31
340108c4:	d4e4      	bmi.n	34010890 <_fflush_r+0xc>
340108c6:	89a3      	ldrh	r3, [r4, #12]
340108c8:	059b      	lsls	r3, r3, #22
340108ca:	d4e1      	bmi.n	34010890 <_fflush_r+0xc>
340108cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
340108ce:	f7fe fc3b 	bl	3400f148 <__retarget_lock_release_recursive>
340108d2:	e7dd      	b.n	34010890 <_fflush_r+0xc>

340108d4 <__swhatbuf_r>:
340108d4:	b570      	push	{r4, r5, r6, lr}
340108d6:	460c      	mov	r4, r1
340108d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
340108dc:	b096      	sub	sp, #88	@ 0x58
340108de:	4615      	mov	r5, r2
340108e0:	2900      	cmp	r1, #0
340108e2:	461e      	mov	r6, r3
340108e4:	da0c      	bge.n	34010900 <__swhatbuf_r+0x2c>
340108e6:	89a3      	ldrh	r3, [r4, #12]
340108e8:	2100      	movs	r1, #0
340108ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
340108ee:	bf14      	ite	ne
340108f0:	2340      	movne	r3, #64	@ 0x40
340108f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
340108f6:	2000      	movs	r0, #0
340108f8:	6031      	str	r1, [r6, #0]
340108fa:	602b      	str	r3, [r5, #0]
340108fc:	b016      	add	sp, #88	@ 0x58
340108fe:	bd70      	pop	{r4, r5, r6, pc}
34010900:	466a      	mov	r2, sp
34010902:	f000 f879 	bl	340109f8 <_fstat_r>
34010906:	2800      	cmp	r0, #0
34010908:	dbed      	blt.n	340108e6 <__swhatbuf_r+0x12>
3401090a:	9901      	ldr	r1, [sp, #4]
3401090c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
34010910:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
34010914:	4259      	negs	r1, r3
34010916:	4159      	adcs	r1, r3
34010918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401091c:	e7eb      	b.n	340108f6 <__swhatbuf_r+0x22>

3401091e <__smakebuf_r>:
3401091e:	898b      	ldrh	r3, [r1, #12]
34010920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34010922:	079d      	lsls	r5, r3, #30
34010924:	4606      	mov	r6, r0
34010926:	460c      	mov	r4, r1
34010928:	d507      	bpl.n	3401093a <__smakebuf_r+0x1c>
3401092a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3401092e:	6023      	str	r3, [r4, #0]
34010930:	6123      	str	r3, [r4, #16]
34010932:	2301      	movs	r3, #1
34010934:	6163      	str	r3, [r4, #20]
34010936:	b003      	add	sp, #12
34010938:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401093a:	ab01      	add	r3, sp, #4
3401093c:	466a      	mov	r2, sp
3401093e:	f7ff ffc9 	bl	340108d4 <__swhatbuf_r>
34010942:	9f00      	ldr	r7, [sp, #0]
34010944:	4605      	mov	r5, r0
34010946:	4630      	mov	r0, r6
34010948:	4639      	mov	r1, r7
3401094a:	f7fd fa99 	bl	3400de80 <_malloc_r>
3401094e:	b948      	cbnz	r0, 34010964 <__smakebuf_r+0x46>
34010950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34010954:	059a      	lsls	r2, r3, #22
34010956:	d4ee      	bmi.n	34010936 <__smakebuf_r+0x18>
34010958:	f023 0303 	bic.w	r3, r3, #3
3401095c:	f043 0302 	orr.w	r3, r3, #2
34010960:	81a3      	strh	r3, [r4, #12]
34010962:	e7e2      	b.n	3401092a <__smakebuf_r+0xc>
34010964:	89a3      	ldrh	r3, [r4, #12]
34010966:	6020      	str	r0, [r4, #0]
34010968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3401096c:	81a3      	strh	r3, [r4, #12]
3401096e:	9b01      	ldr	r3, [sp, #4]
34010970:	e9c4 0704 	strd	r0, r7, [r4, #16]
34010974:	b15b      	cbz	r3, 3401098e <__smakebuf_r+0x70>
34010976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401097a:	4630      	mov	r0, r6
3401097c:	f000 f84e 	bl	34010a1c <_isatty_r>
34010980:	b128      	cbz	r0, 3401098e <__smakebuf_r+0x70>
34010982:	89a3      	ldrh	r3, [r4, #12]
34010984:	f023 0303 	bic.w	r3, r3, #3
34010988:	f043 0301 	orr.w	r3, r3, #1
3401098c:	81a3      	strh	r3, [r4, #12]
3401098e:	89a3      	ldrh	r3, [r4, #12]
34010990:	431d      	orrs	r5, r3
34010992:	81a5      	strh	r5, [r4, #12]
34010994:	e7cf      	b.n	34010936 <__smakebuf_r+0x18>

34010996 <_raise_r>:
34010996:	291f      	cmp	r1, #31
34010998:	b538      	push	{r3, r4, r5, lr}
3401099a:	4605      	mov	r5, r0
3401099c:	460c      	mov	r4, r1
3401099e:	d904      	bls.n	340109aa <_raise_r+0x14>
340109a0:	2316      	movs	r3, #22
340109a2:	6003      	str	r3, [r0, #0]
340109a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340109a8:	bd38      	pop	{r3, r4, r5, pc}
340109aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
340109ac:	b112      	cbz	r2, 340109b4 <_raise_r+0x1e>
340109ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
340109b2:	b94b      	cbnz	r3, 340109c8 <_raise_r+0x32>
340109b4:	4628      	mov	r0, r5
340109b6:	f000 f853 	bl	34010a60 <_getpid_r>
340109ba:	4622      	mov	r2, r4
340109bc:	4601      	mov	r1, r0
340109be:	4628      	mov	r0, r5
340109c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
340109c4:	f000 b83a 	b.w	34010a3c <_kill_r>
340109c8:	2b01      	cmp	r3, #1
340109ca:	d00a      	beq.n	340109e2 <_raise_r+0x4c>
340109cc:	1c59      	adds	r1, r3, #1
340109ce:	d103      	bne.n	340109d8 <_raise_r+0x42>
340109d0:	2316      	movs	r3, #22
340109d2:	6003      	str	r3, [r0, #0]
340109d4:	2001      	movs	r0, #1
340109d6:	e7e7      	b.n	340109a8 <_raise_r+0x12>
340109d8:	2100      	movs	r1, #0
340109da:	4620      	mov	r0, r4
340109dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
340109e0:	4798      	blx	r3
340109e2:	2000      	movs	r0, #0
340109e4:	e7e0      	b.n	340109a8 <_raise_r+0x12>
	...

340109e8 <raise>:
340109e8:	4b02      	ldr	r3, [pc, #8]	@ (340109f4 <raise+0xc>)
340109ea:	4601      	mov	r1, r0
340109ec:	6818      	ldr	r0, [r3, #0]
340109ee:	f7ff bfd2 	b.w	34010996 <_raise_r>
340109f2:	bf00      	nop
340109f4:	3403a6a8 	.word	0x3403a6a8

340109f8 <_fstat_r>:
340109f8:	b538      	push	{r3, r4, r5, lr}
340109fa:	2300      	movs	r3, #0
340109fc:	4d06      	ldr	r5, [pc, #24]	@ (34010a18 <_fstat_r+0x20>)
340109fe:	4604      	mov	r4, r0
34010a00:	4608      	mov	r0, r1
34010a02:	4611      	mov	r1, r2
34010a04:	602b      	str	r3, [r5, #0]
34010a06:	f7f0 fb87 	bl	34001118 <_fstat>
34010a0a:	1c43      	adds	r3, r0, #1
34010a0c:	d102      	bne.n	34010a14 <_fstat_r+0x1c>
34010a0e:	682b      	ldr	r3, [r5, #0]
34010a10:	b103      	cbz	r3, 34010a14 <_fstat_r+0x1c>
34010a12:	6023      	str	r3, [r4, #0]
34010a14:	bd38      	pop	{r3, r4, r5, pc}
34010a16:	bf00      	nop
34010a18:	3403aac4 	.word	0x3403aac4

34010a1c <_isatty_r>:
34010a1c:	b538      	push	{r3, r4, r5, lr}
34010a1e:	2300      	movs	r3, #0
34010a20:	4d05      	ldr	r5, [pc, #20]	@ (34010a38 <_isatty_r+0x1c>)
34010a22:	4604      	mov	r4, r0
34010a24:	4608      	mov	r0, r1
34010a26:	602b      	str	r3, [r5, #0]
34010a28:	f7f0 fb7b 	bl	34001122 <_isatty>
34010a2c:	1c43      	adds	r3, r0, #1
34010a2e:	d102      	bne.n	34010a36 <_isatty_r+0x1a>
34010a30:	682b      	ldr	r3, [r5, #0]
34010a32:	b103      	cbz	r3, 34010a36 <_isatty_r+0x1a>
34010a34:	6023      	str	r3, [r4, #0]
34010a36:	bd38      	pop	{r3, r4, r5, pc}
34010a38:	3403aac4 	.word	0x3403aac4

34010a3c <_kill_r>:
34010a3c:	b538      	push	{r3, r4, r5, lr}
34010a3e:	2300      	movs	r3, #0
34010a40:	4d06      	ldr	r5, [pc, #24]	@ (34010a5c <_kill_r+0x20>)
34010a42:	4604      	mov	r4, r0
34010a44:	4608      	mov	r0, r1
34010a46:	4611      	mov	r1, r2
34010a48:	602b      	str	r3, [r5, #0]
34010a4a:	f7f0 fb38 	bl	340010be <_kill>
34010a4e:	1c43      	adds	r3, r0, #1
34010a50:	d102      	bne.n	34010a58 <_kill_r+0x1c>
34010a52:	682b      	ldr	r3, [r5, #0]
34010a54:	b103      	cbz	r3, 34010a58 <_kill_r+0x1c>
34010a56:	6023      	str	r3, [r4, #0]
34010a58:	bd38      	pop	{r3, r4, r5, pc}
34010a5a:	bf00      	nop
34010a5c:	3403aac4 	.word	0x3403aac4

34010a60 <_getpid_r>:
34010a60:	f7f0 bb2b 	b.w	340010ba <_getpid>

34010a64 <_calloc_r>:
34010a64:	b570      	push	{r4, r5, r6, lr}
34010a66:	fba1 5402 	umull	r5, r4, r1, r2
34010a6a:	b93c      	cbnz	r4, 34010a7c <_calloc_r+0x18>
34010a6c:	4629      	mov	r1, r5
34010a6e:	f7fd fa07 	bl	3400de80 <_malloc_r>
34010a72:	4606      	mov	r6, r0
34010a74:	b928      	cbnz	r0, 34010a82 <_calloc_r+0x1e>
34010a76:	2600      	movs	r6, #0
34010a78:	4630      	mov	r0, r6
34010a7a:	bd70      	pop	{r4, r5, r6, pc}
34010a7c:	220c      	movs	r2, #12
34010a7e:	6002      	str	r2, [r0, #0]
34010a80:	e7f9      	b.n	34010a76 <_calloc_r+0x12>
34010a82:	462a      	mov	r2, r5
34010a84:	4621      	mov	r1, r4
34010a86:	f7fe f8df 	bl	3400ec48 <memset>
34010a8a:	e7f5      	b.n	34010a78 <_calloc_r+0x14>

34010a8c <__ascii_mbtowc>:
34010a8c:	b082      	sub	sp, #8
34010a8e:	b901      	cbnz	r1, 34010a92 <__ascii_mbtowc+0x6>
34010a90:	a901      	add	r1, sp, #4
34010a92:	b142      	cbz	r2, 34010aa6 <__ascii_mbtowc+0x1a>
34010a94:	b14b      	cbz	r3, 34010aaa <__ascii_mbtowc+0x1e>
34010a96:	7813      	ldrb	r3, [r2, #0]
34010a98:	600b      	str	r3, [r1, #0]
34010a9a:	7812      	ldrb	r2, [r2, #0]
34010a9c:	1e10      	subs	r0, r2, #0
34010a9e:	bf18      	it	ne
34010aa0:	2001      	movne	r0, #1
34010aa2:	b002      	add	sp, #8
34010aa4:	4770      	bx	lr
34010aa6:	4610      	mov	r0, r2
34010aa8:	e7fb      	b.n	34010aa2 <__ascii_mbtowc+0x16>
34010aaa:	f06f 0001 	mvn.w	r0, #1
34010aae:	e7f8      	b.n	34010aa2 <__ascii_mbtowc+0x16>

34010ab0 <__ascii_wctomb>:
34010ab0:	4603      	mov	r3, r0
34010ab2:	4608      	mov	r0, r1
34010ab4:	b141      	cbz	r1, 34010ac8 <__ascii_wctomb+0x18>
34010ab6:	2aff      	cmp	r2, #255	@ 0xff
34010ab8:	d904      	bls.n	34010ac4 <__ascii_wctomb+0x14>
34010aba:	228a      	movs	r2, #138	@ 0x8a
34010abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34010ac0:	601a      	str	r2, [r3, #0]
34010ac2:	4770      	bx	lr
34010ac4:	2001      	movs	r0, #1
34010ac6:	700a      	strb	r2, [r1, #0]
34010ac8:	4770      	bx	lr

34010aca <checkint>:
34010aca:	f3c0 53c7 	ubfx	r3, r0, #23, #8
34010ace:	2b7e      	cmp	r3, #126	@ 0x7e
34010ad0:	d910      	bls.n	34010af4 <checkint+0x2a>
34010ad2:	2b96      	cmp	r3, #150	@ 0x96
34010ad4:	d80c      	bhi.n	34010af0 <checkint+0x26>
34010ad6:	2201      	movs	r2, #1
34010ad8:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
34010adc:	fa02 f303 	lsl.w	r3, r2, r3
34010ae0:	1e5a      	subs	r2, r3, #1
34010ae2:	4202      	tst	r2, r0
34010ae4:	d106      	bne.n	34010af4 <checkint+0x2a>
34010ae6:	4203      	tst	r3, r0
34010ae8:	bf0c      	ite	eq
34010aea:	2002      	moveq	r0, #2
34010aec:	2001      	movne	r0, #1
34010aee:	4770      	bx	lr
34010af0:	2002      	movs	r0, #2
34010af2:	4770      	bx	lr
34010af4:	2000      	movs	r0, #0
34010af6:	4770      	bx	lr

34010af8 <powf>:
34010af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
34010afa:	ee10 1a10 	vmov	r1, s0
34010afe:	ee10 4a90 	vmov	r4, s1
34010b02:	eef0 7a40 	vmov.f32	s15, s0
34010b06:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
34010b0a:	0063      	lsls	r3, r4, #1
34010b0c:	eeb0 7a60 	vmov.f32	s14, s1
34010b10:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
34010b14:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
34010b18:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
34010b1c:	d252      	bcs.n	34010bc4 <powf+0xcc>
34010b1e:	4290      	cmp	r0, r2
34010b20:	d258      	bcs.n	34010bd4 <powf+0xdc>
34010b22:	2000      	movs	r0, #0
34010b24:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
34010b28:	4a9f      	ldr	r2, [pc, #636]	@ (34010da8 <powf+0x2b0>)
34010b2a:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
34010b2e:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
34010b32:	f3c3 44c3 	ubfx	r4, r3, #19, #4
34010b36:	0ddb      	lsrs	r3, r3, #23
34010b38:	05db      	lsls	r3, r3, #23
34010b3a:	eb02 1404 	add.w	r4, r2, r4, lsl #4
34010b3e:	1ac9      	subs	r1, r1, r3
34010b40:	15db      	asrs	r3, r3, #23
34010b42:	ee07 1a90 	vmov	s15, r1
34010b46:	ed94 4b00 	vldr	d4, [r4]
34010b4a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
34010b4e:	ee07 3a90 	vmov	s15, r3
34010b52:	ed94 5b02 	vldr	d5, [r4, #8]
34010b56:	eea4 2b06 	vfma.f64	d2, d4, d6
34010b5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
34010b5e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34010b62:	ee36 6b05 	vadd.f64	d6, d6, d5
34010b66:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
34010b6a:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
34010b6e:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
34010b72:	ee22 4b02 	vmul.f64	d4, d2, d2
34010b76:	eea2 1b05 	vfma.f64	d1, d2, d5
34010b7a:	ee24 0b04 	vmul.f64	d0, d4, d4
34010b7e:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
34010b82:	eea2 5b03 	vfma.f64	d5, d2, d3
34010b86:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
34010b8a:	eea2 6b03 	vfma.f64	d6, d2, d3
34010b8e:	eea4 6b05 	vfma.f64	d6, d4, d5
34010b92:	eea1 6b00 	vfma.f64	d6, d1, d0
34010b96:	ee27 7b06 	vmul.f64	d7, d7, d6
34010b9a:	ee17 3a90 	vmov	r3, s15
34010b9e:	f3c3 32cf 	ubfx	r2, r3, #15, #16
34010ba2:	f248 03bf 	movw	r3, #32959	@ 0x80bf
34010ba6:	429a      	cmp	r2, r3
34010ba8:	f0c0 80b8 	bcc.w	34010d1c <powf+0x224>
34010bac:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 34010d88 <powf+0x290>
34010bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
34010bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34010bb8:	dd79      	ble.n	34010cae <powf+0x1b6>
34010bba:	b003      	add	sp, #12
34010bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34010bc0:	f000 b920 	b.w	34010e04 <__math_oflowf>
34010bc4:	4290      	cmp	r0, r2
34010bc6:	d330      	bcc.n	34010c2a <powf+0x132>
34010bc8:	b12b      	cbz	r3, 34010bd6 <powf+0xde>
34010bca:	0049      	lsls	r1, r1, #1
34010bcc:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
34010bd0:	d808      	bhi.n	34010be4 <powf+0xec>
34010bd2:	e015      	b.n	34010c00 <powf+0x108>
34010bd4:	b953      	cbnz	r3, 34010bec <powf+0xf4>
34010bd6:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
34010bda:	0049      	lsls	r1, r1, #1
34010bdc:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
34010be0:	f240 80ca 	bls.w	34010d78 <powf+0x280>
34010be4:	ee37 0a87 	vadd.f32	s0, s15, s14
34010be8:	b003      	add	sp, #12
34010bea:	bd30      	pop	{r4, r5, pc}
34010bec:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
34010bf0:	d105      	bne.n	34010bfe <powf+0x106>
34010bf2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
34010bf6:	0064      	lsls	r4, r4, #1
34010bf8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
34010bfc:	e7f0      	b.n	34010be0 <powf+0xe8>
34010bfe:	0049      	lsls	r1, r1, #1
34010c00:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
34010c04:	d1ee      	bne.n	34010be4 <powf+0xec>
34010c06:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
34010c0a:	f000 80b5 	beq.w	34010d78 <powf+0x280>
34010c0e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
34010c12:	ea6f 0404 	mvn.w	r4, r4
34010c16:	bf34      	ite	cc
34010c18:	2100      	movcc	r1, #0
34010c1a:	2101      	movcs	r1, #1
34010c1c:	0fe4      	lsrs	r4, r4, #31
34010c1e:	42a1      	cmp	r1, r4
34010c20:	f040 80ad 	bne.w	34010d7e <powf+0x286>
34010c24:	ee27 0a07 	vmul.f32	s0, s14, s14
34010c28:	e7de      	b.n	34010be8 <powf+0xf0>
34010c2a:	004d      	lsls	r5, r1, #1
34010c2c:	1e6b      	subs	r3, r5, #1
34010c2e:	4293      	cmp	r3, r2
34010c30:	d31b      	bcc.n	34010c6a <powf+0x172>
34010c32:	2900      	cmp	r1, #0
34010c34:	ee20 0a00 	vmul.f32	s0, s0, s0
34010c38:	da0e      	bge.n	34010c58 <powf+0x160>
34010c3a:	4620      	mov	r0, r4
34010c3c:	f7ff ff45 	bl	34010aca <checkint>
34010c40:	2801      	cmp	r0, #1
34010c42:	d109      	bne.n	34010c58 <powf+0x160>
34010c44:	eeb1 0a40 	vneg.f32	s0, s0
34010c48:	b945      	cbnz	r5, 34010c5c <powf+0x164>
34010c4a:	2c00      	cmp	r4, #0
34010c4c:	dacc      	bge.n	34010be8 <powf+0xf0>
34010c4e:	b003      	add	sp, #12
34010c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34010c54:	f000 b8dc 	b.w	34010e10 <__math_divzerof>
34010c58:	2000      	movs	r0, #0
34010c5a:	e7f5      	b.n	34010c48 <powf+0x150>
34010c5c:	2c00      	cmp	r4, #0
34010c5e:	dac3      	bge.n	34010be8 <powf+0xf0>
34010c60:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34010c64:	ee87 0a80 	vdiv.f32	s0, s15, s0
34010c68:	e7be      	b.n	34010be8 <powf+0xf0>
34010c6a:	2900      	cmp	r1, #0
34010c6c:	da1d      	bge.n	34010caa <powf+0x1b2>
34010c6e:	4620      	mov	r0, r4
34010c70:	f7ff ff2b 	bl	34010aca <checkint>
34010c74:	b920      	cbnz	r0, 34010c80 <powf+0x188>
34010c76:	b003      	add	sp, #12
34010c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34010c7c:	f000 b8da 	b.w	34010e34 <__math_invalidf>
34010c80:	1e43      	subs	r3, r0, #1
34010c82:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
34010c86:	4258      	negs	r0, r3
34010c88:	4158      	adcs	r0, r3
34010c8a:	0400      	lsls	r0, r0, #16
34010c8c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34010c90:	f4bf af48 	bcs.w	34010b24 <powf+0x2c>
34010c94:	eddf 6a45 	vldr	s13, [pc, #276]	@ 34010dac <powf+0x2b4>
34010c98:	ee27 0aa6 	vmul.f32	s0, s15, s13
34010c9c:	ee10 3a10 	vmov	r3, s0
34010ca0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34010ca4:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
34010ca8:	e73c      	b.n	34010b24 <powf+0x2c>
34010caa:	2000      	movs	r0, #0
34010cac:	e7ee      	b.n	34010c8c <powf+0x194>
34010cae:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 34010d90 <powf+0x298>
34010cb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
34010cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34010cba:	dd0f      	ble.n	34010cdc <powf+0x1e4>
34010cbc:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
34010cc0:	b1c0      	cbz	r0, 34010cf4 <powf+0x1fc>
34010cc2:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
34010cc6:	9301      	str	r3, [sp, #4]
34010cc8:	eddd 6a01 	vldr	s13, [sp, #4]
34010ccc:	ee76 6a66 	vsub.f32	s13, s12, s13
34010cd0:	eef4 6a46 	vcmp.f32	s13, s12
34010cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34010cd8:	f47f af6f 	bne.w	34010bba <powf+0xc2>
34010cdc:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 34010d98 <powf+0x2a0>
34010ce0:	eeb4 7bc6 	vcmpe.f64	d7, d6
34010ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34010ce8:	d80c      	bhi.n	34010d04 <powf+0x20c>
34010cea:	b003      	add	sp, #12
34010cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34010cf0:	f000 b87c 	b.w	34010dec <__math_uflowf>
34010cf4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
34010cf8:	9300      	str	r3, [sp, #0]
34010cfa:	eddd 6a00 	vldr	s13, [sp]
34010cfe:	ee76 6a86 	vadd.f32	s13, s13, s12
34010d02:	e7e5      	b.n	34010cd0 <powf+0x1d8>
34010d04:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 34010da0 <powf+0x2a8>
34010d08:	eeb4 7bc6 	vcmpe.f64	d7, d6
34010d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34010d10:	d504      	bpl.n	34010d1c <powf+0x224>
34010d12:	b003      	add	sp, #12
34010d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34010d18:	f000 b86e 	b.w	34010df8 <__math_may_uflowf>
34010d1c:	4b24      	ldr	r3, [pc, #144]	@ (34010db0 <powf+0x2b8>)
34010d1e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34010d22:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
34010d26:	ee37 6b05 	vadd.f64	d6, d7, d5
34010d2a:	ee16 2a10 	vmov	r2, s12
34010d2e:	ee36 6b45 	vsub.f64	d6, d6, d5
34010d32:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
34010d36:	ee37 7b46 	vsub.f64	d7, d7, d6
34010d3a:	f002 011f 	and.w	r1, r2, #31
34010d3e:	1880      	adds	r0, r0, r2
34010d40:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
34010d44:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
34010d48:	ee27 4b07 	vmul.f64	d4, d7, d7
34010d4c:	2100      	movs	r1, #0
34010d4e:	686d      	ldr	r5, [r5, #4]
34010d50:	190a      	adds	r2, r1, r4
34010d52:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
34010d56:	eea7 6b05 	vfma.f64	d6, d7, d5
34010d5a:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
34010d5e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
34010d62:	eea7 0b05 	vfma.f64	d0, d7, d5
34010d66:	ec43 2b17 	vmov	d7, r2, r3
34010d6a:	eea6 0b04 	vfma.f64	d0, d6, d4
34010d6e:	ee20 0b07 	vmul.f64	d0, d0, d7
34010d72:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34010d76:	e737      	b.n	34010be8 <powf+0xf0>
34010d78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34010d7c:	e734      	b.n	34010be8 <powf+0xf0>
34010d7e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 34010db4 <powf+0x2bc>
34010d82:	e731      	b.n	34010be8 <powf+0xf0>
34010d84:	f3af 8000 	nop.w
34010d88:	ffd1d571 	.word	0xffd1d571
34010d8c:	405fffff 	.word	0x405fffff
34010d90:	ffa3aae2 	.word	0xffa3aae2
34010d94:	405fffff 	.word	0x405fffff
34010d98:	00000000 	.word	0x00000000
34010d9c:	c062c000 	.word	0xc062c000
34010da0:	00000000 	.word	0x00000000
34010da4:	c062a000 	.word	0xc062a000
34010da8:	3403a528 	.word	0x3403a528
34010dac:	4b000000 	.word	0x4b000000
34010db0:	3403a3e0 	.word	0x3403a3e0
34010db4:	00000000 	.word	0x00000000

34010db8 <with_errnof>:
34010db8:	b510      	push	{r4, lr}
34010dba:	ed2d 8b02 	vpush	{d8}
34010dbe:	eeb0 8a40 	vmov.f32	s16, s0
34010dc2:	4604      	mov	r4, r0
34010dc4:	f7fe f994 	bl	3400f0f0 <__errno>
34010dc8:	6004      	str	r4, [r0, #0]
34010dca:	eeb0 0a48 	vmov.f32	s0, s16
34010dce:	ecbd 8b02 	vpop	{d8}
34010dd2:	bd10      	pop	{r4, pc}

34010dd4 <xflowf>:
34010dd4:	b130      	cbz	r0, 34010de4 <xflowf+0x10>
34010dd6:	eef1 7a40 	vneg.f32	s15, s0
34010dda:	ee27 0a80 	vmul.f32	s0, s15, s0
34010dde:	2022      	movs	r0, #34	@ 0x22
34010de0:	f7ff bfea 	b.w	34010db8 <with_errnof>
34010de4:	eef0 7a40 	vmov.f32	s15, s0
34010de8:	e7f7      	b.n	34010dda <xflowf+0x6>
	...

34010dec <__math_uflowf>:
34010dec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34010df4 <__math_uflowf+0x8>
34010df0:	f7ff bff0 	b.w	34010dd4 <xflowf>
34010df4:	10000000 	.word	0x10000000

34010df8 <__math_may_uflowf>:
34010df8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34010e00 <__math_may_uflowf+0x8>
34010dfc:	f7ff bfea 	b.w	34010dd4 <xflowf>
34010e00:	1a200000 	.word	0x1a200000

34010e04 <__math_oflowf>:
34010e04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34010e0c <__math_oflowf+0x8>
34010e08:	f7ff bfe4 	b.w	34010dd4 <xflowf>
34010e0c:	70000000 	.word	0x70000000

34010e10 <__math_divzerof>:
34010e10:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34010e14:	2800      	cmp	r0, #0
34010e16:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
34010e1a:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 34010e30 <__math_divzerof+0x20>
34010e1e:	f04f 0022 	mov.w	r0, #34	@ 0x22
34010e22:	fe47 7a87 	vseleq.f32	s15, s15, s14
34010e26:	ee87 0a80 	vdiv.f32	s0, s15, s0
34010e2a:	f7ff bfc5 	b.w	34010db8 <with_errnof>
34010e2e:	bf00      	nop
34010e30:	00000000 	.word	0x00000000

34010e34 <__math_invalidf>:
34010e34:	eef0 7a40 	vmov.f32	s15, s0
34010e38:	ee30 7a40 	vsub.f32	s14, s0, s0
34010e3c:	eef4 7a67 	vcmp.f32	s15, s15
34010e40:	ee87 0a07 	vdiv.f32	s0, s14, s14
34010e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34010e48:	d602      	bvs.n	34010e50 <__math_invalidf+0x1c>
34010e4a:	2021      	movs	r0, #33	@ 0x21
34010e4c:	f7ff bfb4 	b.w	34010db8 <with_errnof>
34010e50:	4770      	bx	lr
	...

34010e54 <_sbrk>:
34010e54:	4a04      	ldr	r2, [pc, #16]	@ (34010e68 <_sbrk+0x14>)
34010e56:	4603      	mov	r3, r0
34010e58:	6811      	ldr	r1, [r2, #0]
34010e5a:	b909      	cbnz	r1, 34010e60 <_sbrk+0xc>
34010e5c:	4903      	ldr	r1, [pc, #12]	@ (34010e6c <_sbrk+0x18>)
34010e5e:	6011      	str	r1, [r2, #0]
34010e60:	6810      	ldr	r0, [r2, #0]
34010e62:	4403      	add	r3, r0
34010e64:	6013      	str	r3, [r2, #0]
34010e66:	4770      	bx	lr
34010e68:	3403aacc 	.word	0x3403aacc
34010e6c:	3403aad0 	.word	0x3403aad0

34010e70 <_init>:
34010e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010e72:	bf00      	nop
34010e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
34010e76:	bc08      	pop	{r3}
34010e78:	469e      	mov	lr, r3
34010e7a:	4770      	bx	lr

34010e7c <_fini>:
34010e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010e7e:	bf00      	nop
34010e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
34010e82:	bc08      	pop	{r3}
34010e84:	469e      	mov	lr, r3
34010e86:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

34010ea0 <SECURE_SystemCoreClockUpdate>:
34010ea0:	e97f e97f 	sg
34010ea4:	f7f1 ba42 	b.w	3400232c <__acle_se_SECURE_SystemCoreClockUpdate>
	...
