
G4_MatmulNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080044e0  080044e0  000054e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004744  08004744  0000637c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004744  08004744  00005744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800474c  0800474c  0000637c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800474c  0800474c  0000574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000037c  20000000  08004754  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000380  08004ad0  00006380  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20000618  08004ad0  00006618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000637c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007172  00000000  00000000  000063ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b5  00000000  00000000  0000d51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f3  00000000  00000000  0000f5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026718  00000000  00000000  0000fabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e99  00000000  00000000  000361d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efa98  00000000  00000000  0003e06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0012db04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002148  00000000  00000000  0012db8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0012fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000380 	.word	0x20000380
 80001fc:	00000000 	.word	0x00000000
 8000200:	080044b4 	.word	0x080044b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000384 	.word	0x20000384
 800021c:	080044b4 	.word	0x080044b4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 f9a7 	bl	8000616 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f807 	bl	80002da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 f850 	bl	8000370 <MX_GPIO_Init>
  MX_X_CUBE_AI_Init();
 80002d0:	f001 fb50 	bl	8001974 <MX_X_CUBE_AI_Init>
  while (1)
  {

    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80002d4:	f001 fb5c 	bl	8001990 <MX_X_CUBE_AI_Process>
 80002d8:	e7fc      	b.n	80002d4 <main+0x14>

080002da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	b094      	sub	sp, #80	@ 0x50
 80002de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	2238      	movs	r2, #56	@ 0x38
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f003 fbdf 	bl	8003aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 fcc9 	bl	8000c94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000302:	2302      	movs	r3, #2
 8000304:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800030a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	2340      	movs	r3, #64	@ 0x40
 800030e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	2302      	movs	r3, #2
 8000312:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000314:	2302      	movs	r3, #2
 8000316:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000318:	2304      	movs	r3, #4
 800031a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800031c:	2355      	movs	r3, #85	@ 0x55
 800031e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000320:	2302      	movs	r3, #2
 8000322:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000324:	2302      	movs	r3, #2
 8000326:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000328:	2302      	movs	r3, #2
 800032a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0318 	add.w	r3, r7, #24
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fd63 	bl	8000dfc <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800033c:	f000 f898 	bl	8000470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	2303      	movs	r3, #3
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2104      	movs	r1, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f001 f861 	bl	8001420 <HAL_RCC_ClockConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000364:	f000 f884 	bl	8000470 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	3750      	adds	r7, #80	@ 0x50
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	@ 0x28
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0314 	add.w	r3, r7, #20
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000386:	4b38      	ldr	r3, [pc, #224]	@ (8000468 <MX_GPIO_Init+0xf8>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038a:	4a37      	ldr	r2, [pc, #220]	@ (8000468 <MX_GPIO_Init+0xf8>)
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000392:	4b35      	ldr	r3, [pc, #212]	@ (8000468 <MX_GPIO_Init+0xf8>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000396:	f003 0304 	and.w	r3, r3, #4
 800039a:	613b      	str	r3, [r7, #16]
 800039c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039e:	4b32      	ldr	r3, [pc, #200]	@ (8000468 <MX_GPIO_Init+0xf8>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a2:	4a31      	ldr	r2, [pc, #196]	@ (8000468 <MX_GPIO_Init+0xf8>)
 80003a4:	f043 0320 	orr.w	r3, r3, #32
 80003a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000468 <MX_GPIO_Init+0xf8>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ae:	f003 0320 	and.w	r3, r3, #32
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000468 <MX_GPIO_Init+0xf8>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000468 <MX_GPIO_Init+0xf8>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003c2:	4b29      	ldr	r3, [pc, #164]	@ (8000468 <MX_GPIO_Init+0xf8>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ce:	4b26      	ldr	r3, [pc, #152]	@ (8000468 <MX_GPIO_Init+0xf8>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d2:	4a25      	ldr	r2, [pc, #148]	@ (8000468 <MX_GPIO_Init+0xf8>)
 80003d4:	f043 0302 	orr.w	r3, r3, #2
 80003d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003da:	4b23      	ldr	r3, [pc, #140]	@ (8000468 <MX_GPIO_Init+0xf8>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003de:	f003 0302 	and.w	r3, r3, #2
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2120      	movs	r1, #32
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ee:	f000 fc15 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80003fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	4619      	mov	r1, r3
 8000408:	4818      	ldr	r0, [pc, #96]	@ (800046c <MX_GPIO_Init+0xfc>)
 800040a:	f000 fa85 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800040e:	230c      	movs	r3, #12
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000412:	2302      	movs	r3, #2
 8000414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2300      	movs	r3, #0
 800041c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800041e:	230c      	movs	r3, #12
 8000420:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	4619      	mov	r1, r3
 8000428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042c:	f000 fa74 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000430:	2320      	movs	r3, #32
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000434:	2301      	movs	r3, #1
 8000436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	2300      	movs	r3, #0
 800043e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 0314 	add.w	r3, r7, #20
 8000444:	4619      	mov	r1, r3
 8000446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800044a:	f000 fa65 	bl	8000918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2100      	movs	r1, #0
 8000452:	2028      	movs	r0, #40	@ 0x28
 8000454:	f000 fa2b 	bl	80008ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000458:	2028      	movs	r0, #40	@ 0x28
 800045a:	f000 fa42 	bl	80008e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800045e:	bf00      	nop
 8000460:	3728      	adds	r7, #40	@ 0x28
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	48000800 	.word	0x48000800

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <Error_Handler+0x8>

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <HAL_MspInit+0x44>)
 8000484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000486:	4a0e      	ldr	r2, [pc, #56]	@ (80004c0 <HAL_MspInit+0x44>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6613      	str	r3, [r2, #96]	@ 0x60
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <HAL_MspInit+0x44>)
 8000490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <HAL_MspInit+0x44>)
 800049c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049e:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <HAL_MspInit+0x44>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80004a6:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <HAL_MspInit+0x44>)
 80004a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004b2:	f000 fc93 	bl	8000ddc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <NMI_Handler+0x4>

080004cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <HardFault_Handler+0x4>

080004d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <MemManage_Handler+0x4>

080004dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051a:	f000 f8cf 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}

08000522 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000526:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800052a:	f000 fb8f 	bl	8000c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800053c:	4a14      	ldr	r2, [pc, #80]	@ (8000590 <_sbrk+0x5c>)
 800053e:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <_sbrk+0x60>)
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000548:	4b13      	ldr	r3, [pc, #76]	@ (8000598 <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d102      	bne.n	8000556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <_sbrk+0x64>)
 8000552:	4a12      	ldr	r2, [pc, #72]	@ (800059c <_sbrk+0x68>)
 8000554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <_sbrk+0x64>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	429a      	cmp	r2, r3
 8000562:	d207      	bcs.n	8000574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000564:	f003 fb00 	bl	8003b68 <__errno>
 8000568:	4603      	mov	r3, r0
 800056a:	220c      	movs	r2, #12
 800056c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000572:	e009      	b.n	8000588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057a:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	4a05      	ldr	r2, [pc, #20]	@ (8000598 <_sbrk+0x64>)
 8000584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20020000 	.word	0x20020000
 8000594:	00000800 	.word	0x00000800
 8000598:	2000039c 	.word	0x2000039c
 800059c:	20000618 	.word	0x20000618

080005a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <SystemInit+0x20>)
 80005a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005aa:	4a05      	ldr	r2, [pc, #20]	@ (80005c0 <SystemInit+0x20>)
 80005ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c4:	480d      	ldr	r0, [pc, #52]	@ (80005fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c8:	f7ff ffea 	bl	80005a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480c      	ldr	r0, [pc, #48]	@ (8000600 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ce:	490d      	ldr	r1, [pc, #52]	@ (8000604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <LoopForever+0xe>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000610 <LoopForever+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005f2:	f003 fabf 	bl	8003b74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005f6:	f7ff fe63 	bl	80002c0 <main>

080005fa <LoopForever>:

LoopForever:
    b LoopForever
 80005fa:	e7fe      	b.n	80005fa <LoopForever>
  ldr   r0, =_estack
 80005fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	2000037c 	.word	0x2000037c
  ldr r2, =_sidata
 8000608:	08004754 	.word	0x08004754
  ldr r2, =_sbss
 800060c:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 8000610:	20000618 	.word	0x20000618

08000614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_2_IRQHandler>

08000616 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800061c:	2300      	movs	r3, #0
 800061e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f939 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f80e 	bl	8000648 <HAL_InitTick>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	e001      	b.n	800063c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000638:	f7ff ff20 	bl	800047c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800063c:	79fb      	ldrb	r3, [r7, #7]

}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <HAL_InitTick+0x68>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d022      	beq.n	80006a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <HAL_InitTick+0x6c>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <HAL_InitTick+0x68>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000668:	fbb1 f3f3 	udiv	r3, r1, r3
 800066c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f944 	bl	80008fe <HAL_SYSTICK_Config>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10f      	bne.n	800069c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b0f      	cmp	r3, #15
 8000680:	d809      	bhi.n	8000696 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000682:	2200      	movs	r2, #0
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800068a:	f000 f910 	bl	80008ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800068e:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <HAL_InitTick+0x70>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	e007      	b.n	80006a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	e004      	b.n	80006a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800069c:	2301      	movs	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e001      	b.n	80006a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <HAL_IncTick+0x1c>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_IncTick+0x20>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	4a03      	ldr	r2, [pc, #12]	@ (80006d8 <HAL_IncTick+0x1c>)
 80006cc:	6013      	str	r3, [r2, #0]
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	200003a0 	.word	0x200003a0
 80006dc:	20000008 	.word	0x20000008

080006e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b03      	ldr	r3, [pc, #12]	@ (80006f4 <HAL_GetTick+0x14>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	200003a0 	.word	0x200003a0

080006f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	@ (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b04      	ldr	r3, [pc, #16]	@ (8000758 <__NVIC_GetPriorityGrouping+0x18>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db0b      	blt.n	8000786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	4907      	ldr	r1, [pc, #28]	@ (8000794 <__NVIC_EnableIRQ+0x38>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	@ (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	@ (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	@ 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
         );
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	@ 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000864:	d301      	bcc.n	800086a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e00f      	b.n	800088a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <SysTick_Config+0x40>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	210f      	movs	r1, #15
 8000874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000878:	f7ff ff8e 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <SysTick_Config+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	@ (8000894 <SysTick_Config+0x40>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff29 	bl	80006f8 <__NVIC_SetPriorityGrouping>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008bc:	f7ff ff40 	bl	8000740 <__NVIC_GetPriorityGrouping>
 80008c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	f7ff ff90 	bl	80007ec <NVIC_EncodePriority>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff5f 	bl	8000798 <__NVIC_SetPriority>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff33 	bl	800075c <__NVIC_EnableIRQ>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ffa4 	bl	8000854 <SysTick_Config>
 800090c:	4603      	mov	r3, r0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b480      	push	{r7}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000926:	e15a      	b.n	8000bde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	2101      	movs	r1, #1
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	4013      	ands	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 814c 	beq.w	8000bd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 0303 	and.w	r3, r3, #3
 8000948:	2b01      	cmp	r3, #1
 800094a:	d005      	beq.n	8000958 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000954:	2b02      	cmp	r3, #2
 8000956:	d130      	bne.n	80009ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800098e:	2201      	movs	r2, #1
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	f003 0201 	and.w	r2, r3, #1
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d017      	beq.n	80009f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2203      	movs	r2, #3
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f003 0303 	and.w	r3, r3, #3
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d123      	bne.n	8000a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	08da      	lsrs	r2, r3, #3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3208      	adds	r2, #8
 8000a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	220f      	movs	r2, #15
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	691a      	ldr	r2, [r3, #16]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f003 0307 	and.w	r3, r3, #7
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	08da      	lsrs	r2, r3, #3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3208      	adds	r2, #8
 8000a44:	6939      	ldr	r1, [r7, #16]
 8000a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f003 0203 	and.w	r2, r3, #3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 80a6 	beq.w	8000bd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8000bfc <HAL_GPIO_Init+0x2e4>)
 8000a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a90:	4a5a      	ldr	r2, [pc, #360]	@ (8000bfc <HAL_GPIO_Init+0x2e4>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a98:	4b58      	ldr	r3, [pc, #352]	@ (8000bfc <HAL_GPIO_Init+0x2e4>)
 8000a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000aa4:	4a56      	ldr	r2, [pc, #344]	@ (8000c00 <HAL_GPIO_Init+0x2e8>)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	220f      	movs	r2, #15
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ace:	d01f      	beq.n	8000b10 <HAL_GPIO_Init+0x1f8>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a4c      	ldr	r2, [pc, #304]	@ (8000c04 <HAL_GPIO_Init+0x2ec>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d019      	beq.n	8000b0c <HAL_GPIO_Init+0x1f4>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a4b      	ldr	r2, [pc, #300]	@ (8000c08 <HAL_GPIO_Init+0x2f0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d013      	beq.n	8000b08 <HAL_GPIO_Init+0x1f0>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a4a      	ldr	r2, [pc, #296]	@ (8000c0c <HAL_GPIO_Init+0x2f4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d00d      	beq.n	8000b04 <HAL_GPIO_Init+0x1ec>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a49      	ldr	r2, [pc, #292]	@ (8000c10 <HAL_GPIO_Init+0x2f8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d007      	beq.n	8000b00 <HAL_GPIO_Init+0x1e8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a48      	ldr	r2, [pc, #288]	@ (8000c14 <HAL_GPIO_Init+0x2fc>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d101      	bne.n	8000afc <HAL_GPIO_Init+0x1e4>
 8000af8:	2305      	movs	r3, #5
 8000afa:	e00a      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000afc:	2306      	movs	r3, #6
 8000afe:	e008      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000b00:	2304      	movs	r3, #4
 8000b02:	e006      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000b04:	2303      	movs	r3, #3
 8000b06:	e004      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e002      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <HAL_GPIO_Init+0x1fa>
 8000b10:	2300      	movs	r3, #0
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	f002 0203 	and.w	r2, r2, #3
 8000b18:	0092      	lsls	r2, r2, #2
 8000b1a:	4093      	lsls	r3, r2
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b22:	4937      	ldr	r1, [pc, #220]	@ (8000c00 <HAL_GPIO_Init+0x2e8>)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3302      	adds	r3, #2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b30:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <HAL_GPIO_Init+0x300>)
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b54:	4a30      	ldr	r2, [pc, #192]	@ (8000c18 <HAL_GPIO_Init+0x300>)
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <HAL_GPIO_Init+0x300>)
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b7e:	4a26      	ldr	r2, [pc, #152]	@ (8000c18 <HAL_GPIO_Init+0x300>)
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000b84:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <HAL_GPIO_Init+0x300>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c18 <HAL_GPIO_Init+0x300>)
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_GPIO_Init+0x300>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bd2:	4a11      	ldr	r2, [pc, #68]	@ (8000c18 <HAL_GPIO_Init+0x300>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f47f ae9d 	bne.w	8000928 <HAL_GPIO_Init+0x10>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000800 	.word	0x48000800
 8000c0c:	48000c00 	.word	0x48000c00
 8000c10:	48001000 	.word	0x48001000
 8000c14:	48001400 	.word	0x48001400
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c38:	e002      	b.n	8000c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c58:	695a      	ldr	r2, [r3, #20]
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f806 	bl	8000c7c <HAL_GPIO_EXTI_Callback>
  }
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d141      	bne.n	8000d26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cae:	d131      	bne.n	8000d14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cb0:	4b47      	ldr	r3, [pc, #284]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cb6:	4a46      	ldr	r2, [pc, #280]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc0:	4b43      	ldr	r3, [pc, #268]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cc8:	4a41      	ldr	r2, [pc, #260]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cd0:	4b40      	ldr	r3, [pc, #256]	@ (8000dd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2232      	movs	r2, #50	@ 0x32
 8000cd6:	fb02 f303 	mul.w	r3, r2, r3
 8000cda:	4a3f      	ldr	r2, [pc, #252]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce0:	0c9b      	lsrs	r3, r3, #18
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce6:	e002      	b.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cee:	4b38      	ldr	r3, [pc, #224]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cfa:	d102      	bne.n	8000d02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f2      	bne.n	8000ce8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d02:	4b33      	ldr	r3, [pc, #204]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d0e:	d158      	bne.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e057      	b.n	8000dc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d14:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d24:	e04d      	b.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d2c:	d141      	bne.n	8000db2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d2e:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d3a:	d131      	bne.n	8000da0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d42:	4a23      	ldr	r2, [pc, #140]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4c:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d54:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2232      	movs	r2, #50	@ 0x32
 8000d62:	fb02 f303 	mul.w	r3, r2, r3
 8000d66:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	0c9b      	lsrs	r3, r3, #18
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d72:	e002      	b.n	8000d7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d86:	d102      	bne.n	8000d8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f2      	bne.n	8000d74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d9a:	d112      	bne.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e011      	b.n	8000dc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000da0:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000db0:	e007      	b.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40007000 	.word	0x40007000
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	431bde83 	.word	0x431bde83

08000ddc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000de6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dea:	6093      	str	r3, [r2, #8]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40007000 	.word	0x40007000

08000dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e2fe      	b.n	800140c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d075      	beq.n	8000f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e1a:	4b97      	ldr	r3, [pc, #604]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e24:	4b94      	ldr	r3, [pc, #592]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b0c      	cmp	r3, #12
 8000e32:	d102      	bne.n	8000e3a <HAL_RCC_OscConfig+0x3e>
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d002      	beq.n	8000e40 <HAL_RCC_OscConfig+0x44>
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d10b      	bne.n	8000e58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e40:	4b8d      	ldr	r3, [pc, #564]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d05b      	beq.n	8000f04 <HAL_RCC_OscConfig+0x108>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d157      	bne.n	8000f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e2d9      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e60:	d106      	bne.n	8000e70 <HAL_RCC_OscConfig+0x74>
 8000e62:	4b85      	ldr	r3, [pc, #532]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a84      	ldr	r2, [pc, #528]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e01d      	b.n	8000eac <HAL_RCC_OscConfig+0xb0>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e78:	d10c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x98>
 8000e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4b7c      	ldr	r3, [pc, #496]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a7b      	ldr	r2, [pc, #492]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	e00b      	b.n	8000eac <HAL_RCC_OscConfig+0xb0>
 8000e94:	4b78      	ldr	r3, [pc, #480]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a77      	ldr	r2, [pc, #476]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b75      	ldr	r3, [pc, #468]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a74      	ldr	r2, [pc, #464]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d013      	beq.n	8000edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fc14 	bl	80006e0 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ebc:	f7ff fc10 	bl	80006e0 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b64      	cmp	r3, #100	@ 0x64
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e29e      	b.n	800140c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ece:	4b6a      	ldr	r3, [pc, #424]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f0      	beq.n	8000ebc <HAL_RCC_OscConfig+0xc0>
 8000eda:	e014      	b.n	8000f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000edc:	f7ff fc00 	bl	80006e0 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee4:	f7ff fbfc 	bl	80006e0 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b64      	cmp	r3, #100	@ 0x64
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e28a      	b.n	800140c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ef6:	4b60      	ldr	r3, [pc, #384]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f0      	bne.n	8000ee4 <HAL_RCC_OscConfig+0xe8>
 8000f02:	e000      	b.n	8000f06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d075      	beq.n	8000ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f12:	4b59      	ldr	r3, [pc, #356]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f1c:	4b56      	ldr	r3, [pc, #344]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b0c      	cmp	r3, #12
 8000f2a:	d102      	bne.n	8000f32 <HAL_RCC_OscConfig+0x136>
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d002      	beq.n	8000f38 <HAL_RCC_OscConfig+0x13c>
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d11f      	bne.n	8000f78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f38:	4b4f      	ldr	r3, [pc, #316]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <HAL_RCC_OscConfig+0x154>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e25d      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4b49      	ldr	r3, [pc, #292]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	061b      	lsls	r3, r3, #24
 8000f5e:	4946      	ldr	r1, [pc, #280]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f64:	4b45      	ldr	r3, [pc, #276]	@ (800107c <HAL_RCC_OscConfig+0x280>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fb6d 	bl	8000648 <HAL_InitTick>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d043      	beq.n	8000ffc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e249      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d023      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f80:	4b3d      	ldr	r3, [pc, #244]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a3c      	ldr	r2, [pc, #240]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fba8 	bl	80006e0 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f94:	f7ff fba4 	bl	80006e0 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e232      	b.n	800140c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa6:	4b34      	ldr	r3, [pc, #208]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f0      	beq.n	8000f94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	4b31      	ldr	r3, [pc, #196]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	061b      	lsls	r3, r3, #24
 8000fc0:	492d      	ldr	r1, [pc, #180]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	604b      	str	r3, [r1, #4]
 8000fc6:	e01a      	b.n	8000ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000fce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fb84 	bl	80006e0 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fb80 	bl	80006e0 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e20e      	b.n	800140c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fee:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x1e0>
 8000ffa:	e000      	b.n	8000ffe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ffc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d041      	beq.n	800108e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d01c      	beq.n	800104c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8001014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001018:	4a17      	ldr	r2, [pc, #92]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001022:	f7ff fb5d 	bl	80006e0 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800102a:	f7ff fb59 	bl	80006e0 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e1e7      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 800103e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0ef      	beq.n	800102a <HAL_RCC_OscConfig+0x22e>
 800104a:	e020      	b.n	800108e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 800104e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001052:	4a09      	ldr	r2, [pc, #36]	@ (8001078 <HAL_RCC_OscConfig+0x27c>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105c:	f7ff fb40 	bl	80006e0 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001062:	e00d      	b.n	8001080 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fb3c 	bl	80006e0 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d906      	bls.n	8001080 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e1ca      	b.n	800140c <HAL_RCC_OscConfig+0x610>
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001080:	4b8c      	ldr	r3, [pc, #560]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1ea      	bne.n	8001064 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 80a6 	beq.w	80011e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010a0:	4b84      	ldr	r3, [pc, #528]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 80010a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_RCC_OscConfig+0x2b4>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <HAL_RCC_OscConfig+0x2b6>
 80010b0:	2300      	movs	r3, #0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00d      	beq.n	80010d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b7f      	ldr	r3, [pc, #508]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	4a7e      	ldr	r2, [pc, #504]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c2:	4b7c      	ldr	r3, [pc, #496]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010ce:	2301      	movs	r3, #1
 80010d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d2:	4b79      	ldr	r3, [pc, #484]	@ (80012b8 <HAL_RCC_OscConfig+0x4bc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d118      	bne.n	8001110 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010de:	4b76      	ldr	r3, [pc, #472]	@ (80012b8 <HAL_RCC_OscConfig+0x4bc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a75      	ldr	r2, [pc, #468]	@ (80012b8 <HAL_RCC_OscConfig+0x4bc>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ea:	f7ff faf9 	bl	80006e0 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f2:	f7ff faf5 	bl	80006e0 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e183      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001104:	4b6c      	ldr	r3, [pc, #432]	@ (80012b8 <HAL_RCC_OscConfig+0x4bc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d108      	bne.n	800112a <HAL_RCC_OscConfig+0x32e>
 8001118:	4b66      	ldr	r3, [pc, #408]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 800111a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800111e:	4a65      	ldr	r2, [pc, #404]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001128:	e024      	b.n	8001174 <HAL_RCC_OscConfig+0x378>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b05      	cmp	r3, #5
 8001130:	d110      	bne.n	8001154 <HAL_RCC_OscConfig+0x358>
 8001132:	4b60      	ldr	r3, [pc, #384]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001138:	4a5e      	ldr	r2, [pc, #376]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001142:	4b5c      	ldr	r3, [pc, #368]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001148:	4a5a      	ldr	r2, [pc, #360]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001152:	e00f      	b.n	8001174 <HAL_RCC_OscConfig+0x378>
 8001154:	4b57      	ldr	r3, [pc, #348]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800115a:	4a56      	ldr	r2, [pc, #344]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001164:	4b53      	ldr	r3, [pc, #332]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800116a:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 800116c:	f023 0304 	bic.w	r3, r3, #4
 8001170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d016      	beq.n	80011aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117c:	f7ff fab0 	bl	80006e0 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001182:	e00a      	b.n	800119a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001184:	f7ff faac 	bl	80006e0 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e138      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800119a:	4b46      	ldr	r3, [pc, #280]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 800119c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0ed      	beq.n	8001184 <HAL_RCC_OscConfig+0x388>
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011aa:	f7ff fa99 	bl	80006e0 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fa95 	bl	80006e0 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e121      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011c8:	4b3a      	ldr	r3, [pc, #232]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 80011ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1ed      	bne.n	80011b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d105      	bne.n	80011e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011dc:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 80011de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 80011e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0320 	and.w	r3, r3, #32
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d03c      	beq.n	800126e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d01c      	beq.n	8001236 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011fc:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 80011fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001202:	4a2c      	ldr	r2, [pc, #176]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fa68 	bl	80006e0 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001214:	f7ff fa64 	bl	80006e0 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e0f2      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001226:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001228:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0ef      	beq.n	8001214 <HAL_RCC_OscConfig+0x418>
 8001234:	e01b      	b.n	800126e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001236:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001238:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800123c:	4a1d      	ldr	r2, [pc, #116]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001246:	f7ff fa4b 	bl	80006e0 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800124e:	f7ff fa47 	bl	80006e0 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e0d5      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001260:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001262:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1ef      	bne.n	800124e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80c9 	beq.w	800140a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	2b0c      	cmp	r3, #12
 8001282:	f000 8083 	beq.w	800138c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d15e      	bne.n	800134c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <HAL_RCC_OscConfig+0x4b8>)
 8001294:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fa21 	bl	80006e0 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a0:	e00c      	b.n	80012bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a2:	f7ff fa1d 	bl	80006e0 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d905      	bls.n	80012bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e0ab      	b.n	800140c <HAL_RCC_OscConfig+0x610>
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012bc:	4b55      	ldr	r3, [pc, #340]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ec      	bne.n	80012a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c8:	4b52      	ldr	r3, [pc, #328]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	4b52      	ldr	r3, [pc, #328]	@ (8001418 <HAL_RCC_OscConfig+0x61c>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6a11      	ldr	r1, [r2, #32]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012d8:	3a01      	subs	r2, #1
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	4311      	orrs	r1, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80012e2:	0212      	lsls	r2, r2, #8
 80012e4:	4311      	orrs	r1, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80012ea:	0852      	lsrs	r2, r2, #1
 80012ec:	3a01      	subs	r2, #1
 80012ee:	0552      	lsls	r2, r2, #21
 80012f0:	4311      	orrs	r1, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012f6:	0852      	lsrs	r2, r2, #1
 80012f8:	3a01      	subs	r2, #1
 80012fa:	0652      	lsls	r2, r2, #25
 80012fc:	4311      	orrs	r1, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001302:	06d2      	lsls	r2, r2, #27
 8001304:	430a      	orrs	r2, r1
 8001306:	4943      	ldr	r1, [pc, #268]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 8001308:	4313      	orrs	r3, r2
 800130a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800130c:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a40      	ldr	r2, [pc, #256]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 8001312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001316:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001318:	4b3e      	ldr	r3, [pc, #248]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a3d      	ldr	r2, [pc, #244]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 800131e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001322:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff f9dc 	bl	80006e0 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff f9d8 	bl	80006e0 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e066      	b.n	800140c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800133e:	4b35      	ldr	r3, [pc, #212]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x530>
 800134a:	e05e      	b.n	800140a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134c:	4b31      	ldr	r3, [pc, #196]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a30      	ldr	r2, [pc, #192]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 8001352:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff f9c2 	bl	80006e0 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff f9be 	bl	80006e0 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e04c      	b.n	800140c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001372:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	4924      	ldr	r1, [pc, #144]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 8001384:	4b25      	ldr	r3, [pc, #148]	@ (800141c <HAL_RCC_OscConfig+0x620>)
 8001386:	4013      	ands	r3, r2
 8001388:	60cb      	str	r3, [r1, #12]
 800138a:	e03e      	b.n	800140a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e039      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <HAL_RCC_OscConfig+0x618>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d12c      	bne.n	8001406 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	3b01      	subs	r3, #1
 80013b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d123      	bne.n	8001406 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d11b      	bne.n	8001406 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d113      	bne.n	8001406 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	3b01      	subs	r3, #1
 80013ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	3b01      	subs	r3, #1
 8001400:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	019f800c 	.word	0x019f800c
 800141c:	feeefffc 	.word	0xfeeefffc

08001420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e11e      	b.n	8001676 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001438:	4b91      	ldr	r3, [pc, #580]	@ (8001680 <HAL_RCC_ClockConfig+0x260>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d910      	bls.n	8001468 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b8e      	ldr	r3, [pc, #568]	@ (8001680 <HAL_RCC_ClockConfig+0x260>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 020f 	bic.w	r2, r3, #15
 800144e:	498c      	ldr	r1, [pc, #560]	@ (8001680 <HAL_RCC_ClockConfig+0x260>)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b8a      	ldr	r3, [pc, #552]	@ (8001680 <HAL_RCC_ClockConfig+0x260>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e106      	b.n	8001676 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d073      	beq.n	800155c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b03      	cmp	r3, #3
 800147a:	d129      	bne.n	80014d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147c:	4b81      	ldr	r3, [pc, #516]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0f4      	b.n	8001676 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800148c:	f000 f966 	bl	800175c <RCC_GetSysClockFreqFromPLLSource>
 8001490:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4a7c      	ldr	r2, [pc, #496]	@ (8001688 <HAL_RCC_ClockConfig+0x268>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d93f      	bls.n	800151a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800149a:	4b7a      	ldr	r3, [pc, #488]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d033      	beq.n	800151a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d12f      	bne.n	800151a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014ba:	4b72      	ldr	r3, [pc, #456]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014c2:	4a70      	ldr	r2, [pc, #448]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e024      	b.n	800151a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d109      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0c6      	b.n	8001676 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e8:	4b66      	ldr	r3, [pc, #408]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0be      	b.n	8001676 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80014f8:	f000 f8ce 	bl	8001698 <HAL_RCC_GetSysClockFreq>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4a61      	ldr	r2, [pc, #388]	@ (8001688 <HAL_RCC_ClockConfig+0x268>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d909      	bls.n	800151a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001506:	4b5f      	ldr	r3, [pc, #380]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800150e:	4a5d      	ldr	r2, [pc, #372]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001514:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001516:	2380      	movs	r3, #128	@ 0x80
 8001518:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800151a:	4b5a      	ldr	r3, [pc, #360]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f023 0203 	bic.w	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4957      	ldr	r1, [pc, #348]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 8001528:	4313      	orrs	r3, r2
 800152a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800152c:	f7ff f8d8 	bl	80006e0 <HAL_GetTick>
 8001530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	e00a      	b.n	800154a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001534:	f7ff f8d4 	bl	80006e0 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e095      	b.n	8001676 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	4b4e      	ldr	r3, [pc, #312]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 020c 	and.w	r2, r3, #12
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	429a      	cmp	r2, r3
 800155a:	d1eb      	bne.n	8001534 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d023      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001574:	4b43      	ldr	r3, [pc, #268]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a42      	ldr	r2, [pc, #264]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 800157a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800157e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800158c:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001594:	4a3b      	ldr	r2, [pc, #236]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 8001596:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800159a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159c:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4936      	ldr	r1, [pc, #216]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b80      	cmp	r3, #128	@ 0x80
 80015b4:	d105      	bne.n	80015c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015b6:	4b33      	ldr	r3, [pc, #204]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	4a32      	ldr	r2, [pc, #200]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 80015bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <HAL_RCC_ClockConfig+0x260>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d21d      	bcs.n	800160c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <HAL_RCC_ClockConfig+0x260>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 020f 	bic.w	r2, r3, #15
 80015d8:	4929      	ldr	r1, [pc, #164]	@ (8001680 <HAL_RCC_ClockConfig+0x260>)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015e0:	f7ff f87e 	bl	80006e0 <HAL_GetTick>
 80015e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e8:	f7ff f87a 	bl	80006e0 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e03b      	b.n	8001676 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <HAL_RCC_ClockConfig+0x260>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d1ed      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001618:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4917      	ldr	r1, [pc, #92]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	490f      	ldr	r1, [pc, #60]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800164a:	f000 f825 	bl	8001698 <HAL_RCC_GetSysClockFreq>
 800164e:	4602      	mov	r2, r0
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_RCC_ClockConfig+0x264>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	490c      	ldr	r1, [pc, #48]	@ (800168c <HAL_RCC_ClockConfig+0x26c>)
 800165c:	5ccb      	ldrb	r3, [r1, r3]
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	fa22 f303 	lsr.w	r3, r2, r3
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <HAL_RCC_ClockConfig+0x270>)
 8001668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800166a:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <HAL_RCC_ClockConfig+0x274>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ffea 	bl	8000648 <HAL_InitTick>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40022000 	.word	0x40022000
 8001684:	40021000 	.word	0x40021000
 8001688:	04c4b400 	.word	0x04c4b400
 800168c:	080045f0 	.word	0x080045f0
 8001690:	20000000 	.word	0x20000000
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800169e:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d102      	bne.n	80016b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	e047      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016b0:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d102      	bne.n	80016c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016bc:	4b26      	ldr	r3, [pc, #152]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	e03e      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d136      	bne.n	800173c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016ce:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3301      	adds	r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001758 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f4:	4a16      	ldr	r2, [pc, #88]	@ (8001750 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f6:	68d2      	ldr	r2, [r2, #12]
 80016f8:	0a12      	lsrs	r2, r2, #8
 80016fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
      break;
 8001704:	e00c      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001706:	4a13      	ldr	r2, [pc, #76]	@ (8001754 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001710:	68d2      	ldr	r2, [r2, #12]
 8001712:	0a12      	lsrs	r2, r2, #8
 8001714:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001718:	fb02 f303 	mul.w	r3, r2, r3
 800171c:	617b      	str	r3, [r7, #20]
      break;
 800171e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0e5b      	lsrs	r3, r3, #25
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	3301      	adds	r3, #1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	e001      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001740:	693b      	ldr	r3, [r7, #16]
}
 8001742:	4618      	mov	r0, r3
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	00f42400 	.word	0x00f42400
 8001758:	016e3600 	.word	0x016e3600

0800175c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001762:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d10c      	bne.n	800179a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001780:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800178a:	68d2      	ldr	r2, [r2, #12]
 800178c:	0a12      	lsrs	r2, r2, #8
 800178e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
    break;
 8001798:	e00c      	b.n	80017b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4a0e      	ldr	r2, [pc, #56]	@ (80017dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017a4:	68d2      	ldr	r2, [r2, #12]
 80017a6:	0a12      	lsrs	r2, r2, #8
 80017a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017ac:	fb02 f303 	mul.w	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]
    break;
 80017b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0e5b      	lsrs	r3, r3, #25
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	3301      	adds	r3, #1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80017ce:	687b      	ldr	r3, [r7, #4]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40021000 	.word	0x40021000
 80017e0:	016e3600 	.word	0x016e3600
 80017e4:	00f42400 	.word	0x00f42400

080017e8 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80017f8:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80017fa:	461a      	mov	r2, r3
        err.type, err.code);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8001802:	6839      	ldr	r1, [r7, #0]
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <ai_log_err+0x3c>)
 8001806:	f002 f809 	bl	800381c <iprintf>
 800180a:	e009      	b.n	8001820 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800180c:	793b      	ldrb	r3, [r7, #4]
 800180e:	4619      	mov	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001816:	461a      	mov	r2, r3
 8001818:	4803      	ldr	r0, [pc, #12]	@ (8001828 <ai_log_err+0x40>)
 800181a:	f001 ffff 	bl	800381c <iprintf>

  do {} while (1);
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <ai_log_err+0x38>
 8001824:	080044e0 	.word	0x080044e0
 8001828:	08004514 	.word	0x08004514

0800182c <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4828      	ldr	r0, [pc, #160]	@ (80018dc <ai_boostrap+0xb0>)
 800183a:	f000 f985 	bl	8001b48 <ai_network_create_and_init>
 800183e:	4603      	mov	r3, r0
 8001840:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8001842:	7b3b      	ldrb	r3, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 8001848:	4925      	ldr	r1, [pc, #148]	@ (80018e0 <ai_boostrap+0xb4>)
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f7ff ffcc 	bl	80017e8 <ai_log_err>
    return -1;
 8001850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001854:	e03e      	b.n	80018d4 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 8001856:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <ai_boostrap+0xb0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f9f1 	bl	8001c44 <ai_network_inputs_get>
 8001862:	4603      	mov	r3, r0
 8001864:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <ai_boostrap+0xb8>)
 8001866:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <ai_boostrap+0xb0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fa02 	bl	8001c78 <ai_network_outputs_get>
 8001874:	4603      	mov	r3, r0
 8001876:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <ai_boostrap+0xbc>)
 8001878:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e00f      	b.n	80018a0 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8001880:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <ai_boostrap+0xb8>)
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4916      	ldr	r1, [pc, #88]	@ (80018ec <ai_boostrap+0xc0>)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	ddec      	ble.n	8001880 <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	e00f      	b.n	80018cc <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <ai_boostrap+0xbc>)
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	490c      	ldr	r1, [pc, #48]	@ (80018f0 <ai_boostrap+0xc4>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	3301      	adds	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	ddec      	ble.n	80018ac <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000450 	.word	0x20000450
 80018e0:	08004544 	.word	0x08004544
 80018e4:	20000454 	.word	0x20000454
 80018e8:	20000458 	.word	0x20000458
 80018ec:	200003a4 	.word	0x200003a4
 80018f0:	200003a8 	.word	0x200003a8

080018f4 <ai_run>:

static int ai_run(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <ai_run+0x44>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a0f      	ldr	r2, [pc, #60]	@ (800193c <ai_run+0x48>)
 8001900:	6811      	ldr	r1, [r2, #0]
 8001902:	4a0f      	ldr	r2, [pc, #60]	@ (8001940 <ai_run+0x4c>)
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fa0c 	bl	8001d24 <ai_network_run>
 800190c:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d00c      	beq.n	800192e <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <ai_run+0x44>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f8f3 	bl	8001b04 <ai_network_get_error>
 800191e:	4603      	mov	r3, r0
 8001920:	4908      	ldr	r1, [pc, #32]	@ (8001944 <ai_run+0x50>)
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff60 	bl	80017e8 <ai_log_err>
        "ai_network_run");
    return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800192c:	e000      	b.n	8001930 <ai_run+0x3c>
  }

  return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000450 	.word	0x20000450
 800193c:	20000454 	.word	0x20000454
 8001940:	20000458 	.word	0x20000458
 8001944:	08004560 	.word	0x08004560

08001948 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <post_process>:

int post_process(ai_i8* data[])
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8001978:	4803      	ldr	r0, [pc, #12]	@ (8001988 <MX_X_CUBE_AI_Init+0x14>)
 800197a:	f001 ffb7 	bl	80038ec <puts>

  ai_boostrap(data_activations0);
 800197e:	4803      	ldr	r0, [pc, #12]	@ (800198c <MX_X_CUBE_AI_Init+0x18>)
 8001980:	f7ff ff54 	bl	800182c <ai_boostrap>
    /* USER CODE END 5 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	08004570 	.word	0x08004570
 800198c:	2000000c 	.word	0x2000000c

08001990 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800199a:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 800199c:	4816      	ldr	r0, [pc, #88]	@ (80019f8 <MX_X_CUBE_AI_Process+0x68>)
 800199e:	f001 ffa5 	bl	80038ec <puts>

  if (network) {
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <MX_X_CUBE_AI_Process+0x6c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d013      	beq.n	80019d2 <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 80019aa:	4815      	ldr	r0, [pc, #84]	@ (8001a00 <MX_X_CUBE_AI_Process+0x70>)
 80019ac:	f7ff ffcc 	bl	8001948 <acquire_and_process_data>
 80019b0:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 80019b8:	f7ff ff9c 	bl	80018f4 <ai_run>
 80019bc:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 80019c4:	480f      	ldr	r0, [pc, #60]	@ (8001a04 <MX_X_CUBE_AI_Process+0x74>)
 80019c6:	f7ff ffca 	bl	800195e <post_process>
 80019ca:	6078      	str	r0, [r7, #4]
    } while (res==0);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0eb      	beq.n	80019aa <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80019d8:	2311      	movs	r3, #17
 80019da:	703b      	strb	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2210      	movs	r2, #16
 80019e0:	f362 231f 	bfi	r3, r2, #8, #24
 80019e4:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80019e6:	4908      	ldr	r1, [pc, #32]	@ (8001a08 <MX_X_CUBE_AI_Process+0x78>)
 80019e8:	6838      	ldr	r0, [r7, #0]
 80019ea:	f7ff fefd 	bl	80017e8 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	08004590 	.word	0x08004590
 80019fc:	20000450 	.word	0x20000450
 8001a00:	200003a4 	.word	0x200003a4
 8001a04:	200003a8 	.word	0x200003a8
 8001a08:	080045ac 	.word	0x080045ac

08001a0c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4817      	ldr	r0, [pc, #92]	@ (8001a78 <network_configure_activations+0x6c>)
 8001a1c:	f000 fa5c 	bl	8001ed8 <ai_platform_get_activations_map>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d01d      	beq.n	8001a62 <network_configure_activations+0x56>
    /* Updating activations (byte) offsets */
    
    serving_default_args_00_output_array.data = AI_PTR(g_network_activations_map[0] + 120);
 8001a26:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <network_configure_activations+0x6c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3378      	adds	r3, #120	@ 0x78
 8001a2c:	4a13      	ldr	r2, [pc, #76]	@ (8001a7c <network_configure_activations+0x70>)
 8001a2e:	6093      	str	r3, [r2, #8]
    serving_default_args_00_output_array.data_start = AI_PTR(g_network_activations_map[0] + 120);
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <network_configure_activations+0x6c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3378      	adds	r3, #120	@ 0x78
 8001a36:	4a11      	ldr	r2, [pc, #68]	@ (8001a7c <network_configure_activations+0x70>)
 8001a38:	60d3      	str	r3, [r2, #12]
    gemm_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <network_configure_activations+0x6c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <network_configure_activations+0x74>)
 8001a40:	6093      	str	r3, [r2, #8]
    gemm_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001a42:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <network_configure_activations+0x6c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <network_configure_activations+0x74>)
 8001a48:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 132);
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <network_configure_activations+0x6c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3384      	adds	r3, #132	@ 0x84
 8001a50:	4a0c      	ldr	r2, [pc, #48]	@ (8001a84 <network_configure_activations+0x78>)
 8001a52:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 132);
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <network_configure_activations+0x6c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3384      	adds	r3, #132	@ 0x84
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <network_configure_activations+0x78>)
 8001a5c:	60d3      	str	r3, [r2, #12]
    return true;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e005      	b.n	8001a6e <network_configure_activations+0x62>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8001a62:	2213      	movs	r2, #19
 8001a64:	2130      	movs	r1, #48	@ 0x30
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fab8 	bl	8001fdc <ai_platform_network_set_error>
  return false;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000045c 	.word	0x2000045c
 8001a7c:	20000010 	.word	0x20000010
 8001a80:	20000050 	.word	0x20000050
 8001a84:	20000020 	.word	0x20000020

08001a88 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	4818      	ldr	r0, [pc, #96]	@ (8001af8 <network_configure_weights+0x70>)
 8001a98:	f000 f9ca 	bl	8001e30 <ai_platform_get_weights_map>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01f      	beq.n	8001ae2 <network_configure_weights+0x5a>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <network_configure_weights+0x74>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001aaa:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <network_configure_weights+0x74>)
 8001aac:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <network_configure_weights+0x70>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <network_configure_weights+0x74>)
 8001ab4:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <network_configure_weights+0x70>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a10      	ldr	r2, [pc, #64]	@ (8001afc <network_configure_weights+0x74>)
 8001abc:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8001abe:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <network_configure_weights+0x78>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b00 <network_configure_weights+0x78>)
 8001ac8:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 100);
 8001aca:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <network_configure_weights+0x70>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3364      	adds	r3, #100	@ 0x64
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <network_configure_weights+0x78>)
 8001ad2:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 100);
 8001ad4:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <network_configure_weights+0x70>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3364      	adds	r3, #100	@ 0x64
 8001ada:	4a09      	ldr	r2, [pc, #36]	@ (8001b00 <network_configure_weights+0x78>)
 8001adc:	60d3      	str	r3, [r2, #12]
    return true;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e005      	b.n	8001aee <network_configure_weights+0x66>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8001ae2:	2212      	movs	r2, #18
 8001ae4:	2130      	movs	r1, #48	@ 0x30
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fa78 	bl	8001fdc <ai_platform_network_set_error>
  return false;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000460 	.word	0x20000460
 8001afc:	20000030 	.word	0x20000030
 8001b00:	20000040 	.word	0x20000040

08001b04 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fa59 	bl	8001fc4 <ai_platform_network_get_error>
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8001b26:	2300      	movs	r3, #0
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <ai_network_create+0x28>)
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fb41 	bl	80021bc <ai_platform_network_create>
 8001b3a:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	2000027c 	.word	0x2000027c

08001b48 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b094      	sub	sp, #80	@ 0x50
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8001b54:	2100      	movs	r1, #0
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff ffe0 	bl	8001b1c <ai_network_create>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8001b60:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <ai_network_create_and_init+0x24>
    return err;
 8001b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b6a:	e067      	b.n	8001c3c <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 f8e7 	bl	8001d44 <ai_network_data_params_get>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f083 0301 	eor.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ffbc 	bl	8001b04 <ai_network_get_error>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8001b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b92:	e053      	b.n	8001c3c <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001b9a:	e012      	b.n	8001bc2 <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8001b9c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8001ba0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	4413      	add	r3, r2
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	330c      	adds	r3, #12
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f92c 	bl	8001e10 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8001bb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d004      	beq.n	8001bd2 <ai_network_create_and_init+0x8a>
 8001bc8:	8bfb      	ldrh	r3, [r7, #30]
 8001bca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d3e4      	bcc.n	8001b9c <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001bd8:	e012      	b.n	8001c00 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8001bda:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8001bde:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	3304      	adds	r3, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 f90d 	bl	8001e10 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8001bf6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <ai_network_create_and_init+0xc8>
 8001c06:	8afb      	ldrh	r3, [r7, #22]
 8001c08:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3e4      	bcc.n	8001bda <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f107 0210 	add.w	r2, r7, #16
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f846 	bl	8001cac <ai_network_init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f083 0301 	eor.w	r3, r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff67 	bl	8001b04 <ai_network_get_error>
 8001c36:	4603      	mov	r3, r0
 8001c38:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8001c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3750      	adds	r7, #80	@ 0x50
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d104      	bne.n	8001c5e <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <ai_network_inputs_get+0x2c>)
 8001c56:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a06      	ldr	r2, [pc, #24]	@ (8001c74 <ai_network_inputs_get+0x30>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f9c1 	bl	8001fe8 <ai_platform_inputs_get>
 8001c66:	4603      	mov	r3, r0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2000027c 	.word	0x2000027c
 8001c74:	a1c00100 	.word	0xa1c00100

08001c78 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d104      	bne.n	8001c92 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <ai_network_outputs_get+0x2c>)
 8001c8a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a06      	ldr	r2, [pc, #24]	@ (8001ca8 <ai_network_outputs_get+0x30>)
 8001c90:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8001c92:	6839      	ldr	r1, [r7, #0]
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fa1d 	bl	80020d4 <ai_platform_outputs_get>
 8001c9a:	4603      	mov	r3, r0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2000027c 	.word	0x2000027c
 8001ca8:	a1c00100 	.word	0xa1c00100

08001cac <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fac1 	bl	8002240 <ai_platform_network_init>
 8001cbe:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <ai_network_init+0x22>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e026      	b.n	8001d1c <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 8001cce:	6839      	ldr	r1, [r7, #0]
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff fed9 	bl	8001a88 <network_configure_weights>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	7afb      	ldrb	r3, [r7, #11]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8001ce8:	6839      	ldr	r1, [r7, #0]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f7ff fe8e 	bl	8001a0c <network_configure_activations>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fb6a 	bl	80023dc <ai_platform_network_post_init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	72fb      	strb	r3, [r7, #11]

  return ok;
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 fb81 	bl	800243c <ai_platform_network_process>
 8001d3a:	4603      	mov	r3, r0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <ai_network_data_params_get+0x12>
 8001d52:	2300      	movs	r3, #0
 8001d54:	e016      	b.n	8001d84 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8001d56:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <ai_network_data_params_get+0x48>)
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d60:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8001d64:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <ai_network_data_params_get+0x4c>)
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d6e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8001d72:	f107 0210 	add.w	r2, r7, #16
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8ff 	bl	8001f80 <ai_platform_bind_network_params>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	080045e0 	.word	0x080045e0
 8001d90:	080045e8 	.word	0x080045e8

08001d94 <ai_buffer_get_size>:
 8001d94:	b378      	cbz	r0, 8001df6 <ai_buffer_get_size+0x62>
 8001d96:	b410      	push	{r4}
 8001d98:	6803      	ldr	r3, [r0, #0]
 8001d9a:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <ai_buffer_get_size+0x64>)
 8001d9c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8001da0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d01e      	beq.n	8001de6 <ai_buffer_get_size+0x52>
 8001da8:	6984      	ldr	r4, [r0, #24]
 8001daa:	6862      	ldr	r2, [r4, #4]
 8001dac:	7d03      	ldrb	r3, [r0, #20]
 8001dae:	6941      	ldr	r1, [r0, #20]
 8001db0:	f1a3 0301 	sub.w	r3, r3, #1
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8001dbe:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8001dc2:	da0b      	bge.n	8001ddc <ai_buffer_get_size+0x48>
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d102      	bne.n	8001dce <ai_buffer_get_size+0x3a>
 8001dc8:	2802      	cmp	r0, #2
 8001dca:	d007      	beq.n	8001ddc <ai_buffer_get_size+0x48>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	4298      	cmp	r0, r3
 8001dd6:	fb01 f202 	mul.w	r2, r1, r2
 8001dda:	d1f3      	bne.n	8001dc4 <ai_buffer_get_size+0x30>
 8001ddc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8001de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	2900      	cmp	r1, #0
 8001de8:	d0de      	beq.n	8001da8 <ai_buffer_get_size+0x14>
 8001dea:	6984      	ldr	r4, [r0, #24]
 8001dec:	6862      	ldr	r2, [r4, #4]
 8001dee:	321f      	adds	r2, #31
 8001df0:	f022 021f 	bic.w	r2, r2, #31
 8001df4:	e7da      	b.n	8001dac <ai_buffer_get_size+0x18>
 8001df6:	4770      	bx	lr
 8001df8:	000400c0 	.word	0x000400c0

08001dfc <ai_buffer_array_sane>:
 8001dfc:	b138      	cbz	r0, 8001e0e <ai_buffer_array_sane+0x12>
 8001dfe:	6843      	ldr	r3, [r0, #4]
 8001e00:	b123      	cbz	r3, 8001e0c <ai_buffer_array_sane+0x10>
 8001e02:	8840      	ldrh	r0, [r0, #2]
 8001e04:	3800      	subs	r0, #0
 8001e06:	bf18      	it	ne
 8001e08:	2001      	movne	r0, #1
 8001e0a:	4770      	bx	lr
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	4770      	bx	lr

08001e10 <ai_buffer_array_item_set_address>:
 8001e10:	b150      	cbz	r0, 8001e28 <ai_buffer_array_item_set_address+0x18>
 8001e12:	6843      	ldr	r3, [r0, #4]
 8001e14:	b14b      	cbz	r3, 8001e2a <ai_buffer_array_item_set_address+0x1a>
 8001e16:	8840      	ldrh	r0, [r0, #2]
 8001e18:	b900      	cbnz	r0, 8001e1c <ai_buffer_array_item_set_address+0xc>
 8001e1a:	4770      	bx	lr
 8001e1c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001e20:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001e24:	2001      	movs	r0, #1
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	4770      	bx	lr
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <ai_platform_get_weights_map>:
 8001e30:	2a00      	cmp	r2, #0
 8001e32:	d037      	beq.n	8001ea4 <ai_platform_get_weights_map+0x74>
 8001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e36:	4604      	mov	r4, r0
 8001e38:	b1a0      	cbz	r0, 8001e64 <ai_platform_get_weights_map+0x34>
 8001e3a:	460f      	mov	r7, r1
 8001e3c:	b191      	cbz	r1, 8001e64 <ai_platform_get_weights_map+0x34>
 8001e3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <ai_platform_get_weights_map+0xa4>)
 8001e40:	6810      	ldr	r0, [r2, #0]
 8001e42:	4298      	cmp	r0, r3
 8001e44:	4615      	mov	r5, r2
 8001e46:	d00f      	beq.n	8001e68 <ai_platform_get_weights_map+0x38>
 8001e48:	6855      	ldr	r5, [r2, #4]
 8001e4a:	b15d      	cbz	r5, 8001e64 <ai_platform_get_weights_map+0x34>
 8001e4c:	682e      	ldr	r6, [r5, #0]
 8001e4e:	429e      	cmp	r6, r3
 8001e50:	d02a      	beq.n	8001ea8 <ai_platform_get_weights_map+0x78>
 8001e52:	f1a1 0001 	sub.w	r0, r1, #1
 8001e56:	6025      	str	r5, [r4, #0]
 8001e58:	fab0 f080 	clz	r0, r0
 8001e5c:	0940      	lsrs	r0, r0, #5
 8001e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e60:	42a7      	cmp	r7, r4
 8001e62:	d034      	beq.n	8001ece <ai_platform_get_weights_map+0x9e>
 8001e64:	2000      	movs	r0, #0
 8001e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e68:	1d10      	adds	r0, r2, #4
 8001e6a:	f7ff ffc7 	bl	8001dfc <ai_buffer_array_sane>
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	d0f8      	beq.n	8001e64 <ai_platform_get_weights_map+0x34>
 8001e72:	88eb      	ldrh	r3, [r5, #6]
 8001e74:	429f      	cmp	r7, r3
 8001e76:	d1f5      	bne.n	8001e64 <ai_platform_get_weights_map+0x34>
 8001e78:	f04f 0c00 	mov.w	ip, #0
 8001e7c:	1f20      	subs	r0, r4, #4
 8001e7e:	46e6      	mov	lr, ip
 8001e80:	68ab      	ldr	r3, [r5, #8]
 8001e82:	4463      	add	r3, ip
 8001e84:	f10c 0c1c 	add.w	ip, ip, #28
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	b12b      	cbz	r3, 8001e98 <ai_platform_get_weights_map+0x68>
 8001e8c:	f10e 0e01 	add.w	lr, lr, #1
 8001e90:	4577      	cmp	r7, lr
 8001e92:	f840 3f04 	str.w	r3, [r0, #4]!
 8001e96:	d1f3      	bne.n	8001e80 <ai_platform_get_weights_map+0x50>
 8001e98:	eba7 000e 	sub.w	r0, r7, lr
 8001e9c:	fab0 f080 	clz	r0, r0
 8001ea0:	0940      	lsrs	r0, r0, #5
 8001ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	4770      	bx	lr
 8001ea8:	1f20      	subs	r0, r4, #4
 8001eaa:	462a      	mov	r2, r5
 8001eac:	2400      	movs	r4, #0
 8001eae:	e000      	b.n	8001eb2 <ai_platform_get_weights_map+0x82>
 8001eb0:	461c      	mov	r4, r3
 8001eb2:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8001eb6:	42b3      	cmp	r3, r6
 8001eb8:	d0d2      	beq.n	8001e60 <ai_platform_get_weights_map+0x30>
 8001eba:	f840 3f04 	str.w	r3, [r0, #4]!
 8001ebe:	1c63      	adds	r3, r4, #1
 8001ec0:	429f      	cmp	r7, r3
 8001ec2:	d1f5      	bne.n	8001eb0 <ai_platform_get_weights_map+0x80>
 8001ec4:	3402      	adds	r4, #2
 8001ec6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001eca:	42b3      	cmp	r3, r6
 8001ecc:	d1ca      	bne.n	8001e64 <ai_platform_get_weights_map+0x34>
 8001ece:	2001      	movs	r0, #1
 8001ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	a1facade 	.word	0xa1facade

08001ed8 <ai_platform_get_activations_map>:
 8001ed8:	2a00      	cmp	r2, #0
 8001eda:	d038      	beq.n	8001f4e <ai_platform_get_activations_map+0x76>
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ede:	4604      	mov	r4, r0
 8001ee0:	b1a0      	cbz	r0, 8001f0c <ai_platform_get_activations_map+0x34>
 8001ee2:	460f      	mov	r7, r1
 8001ee4:	b191      	cbz	r1, 8001f0c <ai_platform_get_activations_map+0x34>
 8001ee6:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <ai_platform_get_activations_map+0xa4>)
 8001ee8:	6810      	ldr	r0, [r2, #0]
 8001eea:	4298      	cmp	r0, r3
 8001eec:	4615      	mov	r5, r2
 8001eee:	d00f      	beq.n	8001f10 <ai_platform_get_activations_map+0x38>
 8001ef0:	6a15      	ldr	r5, [r2, #32]
 8001ef2:	b15d      	cbz	r5, 8001f0c <ai_platform_get_activations_map+0x34>
 8001ef4:	682e      	ldr	r6, [r5, #0]
 8001ef6:	429e      	cmp	r6, r3
 8001ef8:	d02b      	beq.n	8001f52 <ai_platform_get_activations_map+0x7a>
 8001efa:	f1a1 0001 	sub.w	r0, r1, #1
 8001efe:	6025      	str	r5, [r4, #0]
 8001f00:	fab0 f080 	clz	r0, r0
 8001f04:	0940      	lsrs	r0, r0, #5
 8001f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f08:	42a7      	cmp	r7, r4
 8001f0a:	d035      	beq.n	8001f78 <ai_platform_get_activations_map+0xa0>
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f10:	f102 000c 	add.w	r0, r2, #12
 8001f14:	f7ff ff72 	bl	8001dfc <ai_buffer_array_sane>
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d0f7      	beq.n	8001f0c <ai_platform_get_activations_map+0x34>
 8001f1c:	89eb      	ldrh	r3, [r5, #14]
 8001f1e:	429f      	cmp	r7, r3
 8001f20:	d1f4      	bne.n	8001f0c <ai_platform_get_activations_map+0x34>
 8001f22:	f04f 0c00 	mov.w	ip, #0
 8001f26:	1f20      	subs	r0, r4, #4
 8001f28:	46e6      	mov	lr, ip
 8001f2a:	692b      	ldr	r3, [r5, #16]
 8001f2c:	4463      	add	r3, ip
 8001f2e:	f10c 0c1c 	add.w	ip, ip, #28
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	b12b      	cbz	r3, 8001f42 <ai_platform_get_activations_map+0x6a>
 8001f36:	f10e 0e01 	add.w	lr, lr, #1
 8001f3a:	4577      	cmp	r7, lr
 8001f3c:	f840 3f04 	str.w	r3, [r0, #4]!
 8001f40:	d1f3      	bne.n	8001f2a <ai_platform_get_activations_map+0x52>
 8001f42:	eba7 000e 	sub.w	r0, r7, lr
 8001f46:	fab0 f080 	clz	r0, r0
 8001f4a:	0940      	lsrs	r0, r0, #5
 8001f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f4e:	2000      	movs	r0, #0
 8001f50:	4770      	bx	lr
 8001f52:	1f20      	subs	r0, r4, #4
 8001f54:	462a      	mov	r2, r5
 8001f56:	2400      	movs	r4, #0
 8001f58:	e000      	b.n	8001f5c <ai_platform_get_activations_map+0x84>
 8001f5a:	461c      	mov	r4, r3
 8001f5c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8001f60:	42b3      	cmp	r3, r6
 8001f62:	d0d1      	beq.n	8001f08 <ai_platform_get_activations_map+0x30>
 8001f64:	f840 3f04 	str.w	r3, [r0, #4]!
 8001f68:	1c63      	adds	r3, r4, #1
 8001f6a:	429f      	cmp	r7, r3
 8001f6c:	d1f5      	bne.n	8001f5a <ai_platform_get_activations_map+0x82>
 8001f6e:	3402      	adds	r4, #2
 8001f70:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001f74:	42b3      	cmp	r3, r6
 8001f76:	d1c9      	bne.n	8001f0c <ai_platform_get_activations_map+0x34>
 8001f78:	2001      	movs	r0, #1
 8001f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f7c:	a1facade 	.word	0xa1facade

08001f80 <ai_platform_bind_network_params>:
 8001f80:	b1a0      	cbz	r0, 8001fac <ai_platform_bind_network_params+0x2c>
 8001f82:	b1b1      	cbz	r1, 8001fb2 <ai_platform_bind_network_params+0x32>
 8001f84:	b1c2      	cbz	r2, 8001fb8 <ai_platform_bind_network_params+0x38>
 8001f86:	b410      	push	{r4}
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4c0d      	ldr	r4, [pc, #52]	@ (8001fc0 <ai_platform_bind_network_params+0x40>)
 8001f8c:	f843 4b04 	str.w	r4, [r3], #4
 8001f90:	f100 0c0c 	add.w	ip, r0, #12
 8001f94:	c903      	ldmia	r1, {r0, r1}
 8001f96:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f9e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	4603      	mov	r3, r0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	4770      	bx	lr
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	4770      	bx	lr
 8001fb8:	4613      	mov	r3, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	a1facade 	.word	0xa1facade

08001fc4 <ai_platform_network_get_error>:
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <ai_platform_network_get_error+0x14>)
 8001fc6:	6802      	ldr	r2, [r0, #0]
 8001fc8:	4393      	bics	r3, r2
 8001fca:	d102      	bne.n	8001fd2 <ai_platform_network_get_error+0xe>
 8001fcc:	300c      	adds	r0, #12
 8001fce:	f000 bc77 	b.w	80028c0 <core_get_error>
 8001fd2:	f241 0010 	movw	r0, #4112	@ 0x1010
 8001fd6:	4770      	bx	lr
 8001fd8:	a1c00100 	.word	0xa1c00100

08001fdc <ai_platform_network_set_error>:
 8001fdc:	b110      	cbz	r0, 8001fe4 <ai_platform_network_set_error+0x8>
 8001fde:	300c      	adds	r0, #12
 8001fe0:	f000 bc74 	b.w	80028cc <core_set_error>
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop

08001fe8 <ai_platform_inputs_get>:
 8001fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	4b38      	ldr	r3, [pc, #224]	@ (80020d0 <ai_platform_inputs_get+0xe8>)
 8001fee:	6802      	ldr	r2, [r0, #0]
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	9003      	str	r0, [sp, #12]
 8001ff6:	9102      	str	r1, [sp, #8]
 8001ff8:	d160      	bne.n	80020bc <ai_platform_inputs_get+0xd4>
 8001ffa:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d04f      	beq.n	80020a0 <ai_platform_inputs_get+0xb8>
 8002000:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8002004:	f1ba 0f00 	cmp.w	sl, #0
 8002008:	d04a      	beq.n	80020a0 <ai_platform_inputs_get+0xb8>
 800200a:	f04f 0b00 	mov.w	fp, #0
 800200e:	465d      	mov	r5, fp
 8002010:	e016      	b.n	8002040 <ai_platform_inputs_get+0x58>
 8002012:	9901      	ldr	r1, [sp, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	507a      	str	r2, [r7, r1]
 8002018:	69b1      	ldr	r1, [r6, #24]
 800201a:	684e      	ldr	r6, [r1, #4]
 800201c:	60a3      	str	r3, [r4, #8]
 800201e:	f04f 0201 	mov.w	r2, #1
 8002022:	7522      	strb	r2, [r4, #20]
 8002024:	6961      	ldr	r1, [r4, #20]
 8002026:	6020      	str	r0, [r4, #0]
 8002028:	f369 211f 	bfi	r1, r9, #8, #24
 800202c:	2300      	movs	r3, #0
 800202e:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8002032:	e9c4 1805 	strd	r1, r8, [r4, #20]
 8002036:	f8c4 c004 	str.w	ip, [r4, #4]
 800203a:	3501      	adds	r5, #1
 800203c:	f10b 0b1c 	add.w	fp, fp, #28
 8002040:	f8ba 3000 	ldrh.w	r3, [sl]
 8002044:	42ab      	cmp	r3, r5
 8002046:	b2aa      	uxth	r2, r5
 8002048:	d93c      	bls.n	80020c4 <ai_platform_inputs_get+0xdc>
 800204a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800204e:	00e9      	lsls	r1, r5, #3
 8002050:	9101      	str	r1, [sp, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d036      	beq.n	80020c4 <ai_platform_inputs_get+0xdc>
 8002056:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800205a:	2e00      	cmp	r6, #0
 800205c:	d032      	beq.n	80020c4 <ai_platform_inputs_get+0xdc>
 800205e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002062:	69b2      	ldr	r2, [r6, #24]
 8002064:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8002068:	6810      	ldr	r0, [r2, #0]
 800206a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800206e:	68b3      	ldr	r3, [r6, #8]
 8002070:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8002074:	f001 f9c2 	bl	80033fc <ai_array_to_buffer_fmt>
 8002078:	69b1      	ldr	r1, [r6, #24]
 800207a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800207e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002082:	445c      	add	r4, fp
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0c8      	beq.n	800201a <ai_platform_inputs_get+0x32>
 8002088:	2100      	movs	r1, #0
 800208a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800208e:	6831      	ldr	r1, [r6, #0]
 8002090:	6059      	str	r1, [r3, #4]
 8002092:	b111      	cbz	r1, 800209a <ai_platform_inputs_get+0xb2>
 8002094:	8849      	ldrh	r1, [r1, #2]
 8002096:	2900      	cmp	r1, #0
 8002098:	d1bb      	bne.n	8002012 <ai_platform_inputs_get+0x2a>
 800209a:	69b1      	ldr	r1, [r6, #24]
 800209c:	2300      	movs	r3, #0
 800209e:	e7bc      	b.n	800201a <ai_platform_inputs_get+0x32>
 80020a0:	9803      	ldr	r0, [sp, #12]
 80020a2:	2218      	movs	r2, #24
 80020a4:	2111      	movs	r1, #17
 80020a6:	300c      	adds	r0, #12
 80020a8:	f000 fc10 	bl	80028cc <core_set_error>
 80020ac:	2200      	movs	r2, #0
 80020ae:	4610      	mov	r0, r2
 80020b0:	9b02      	ldr	r3, [sp, #8]
 80020b2:	b103      	cbz	r3, 80020b6 <ai_platform_inputs_get+0xce>
 80020b4:	801a      	strh	r2, [r3, #0]
 80020b6:	b005      	add	sp, #20
 80020b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020bc:	2000      	movs	r0, #0
 80020be:	b005      	add	sp, #20
 80020c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020c4:	2a00      	cmp	r2, #0
 80020c6:	d0eb      	beq.n	80020a0 <ai_platform_inputs_get+0xb8>
 80020c8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80020cc:	6858      	ldr	r0, [r3, #4]
 80020ce:	e7ef      	b.n	80020b0 <ai_platform_inputs_get+0xc8>
 80020d0:	a1c00100 	.word	0xa1c00100

080020d4 <ai_platform_outputs_get>:
 80020d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020d8:	4b37      	ldr	r3, [pc, #220]	@ (80021b8 <ai_platform_outputs_get+0xe4>)
 80020da:	6802      	ldr	r2, [r0, #0]
 80020dc:	b085      	sub	sp, #20
 80020de:	4393      	bics	r3, r2
 80020e0:	9003      	str	r0, [sp, #12]
 80020e2:	9102      	str	r1, [sp, #8]
 80020e4:	d15d      	bne.n	80021a2 <ai_platform_outputs_get+0xce>
 80020e6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d94c      	bls.n	8002186 <ai_platform_outputs_get+0xb2>
 80020ec:	f04f 0b00 	mov.w	fp, #0
 80020f0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80020f4:	465d      	mov	r5, fp
 80020f6:	46d8      	mov	r8, fp
 80020f8:	e016      	b.n	8002128 <ai_platform_outputs_get+0x54>
 80020fa:	9a01      	ldr	r2, [sp, #4]
 80020fc:	2101      	movs	r1, #1
 80020fe:	50b9      	str	r1, [r7, r2]
 8002100:	69b2      	ldr	r2, [r6, #24]
 8002102:	6856      	ldr	r6, [r2, #4]
 8002104:	6020      	str	r0, [r4, #0]
 8002106:	f04f 0201 	mov.w	r2, #1
 800210a:	7522      	strb	r2, [r4, #20]
 800210c:	6960      	ldr	r0, [r4, #20]
 800210e:	f8c4 c004 	str.w	ip, [r4, #4]
 8002112:	f369 201f 	bfi	r0, r9, #8, #24
 8002116:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800211a:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800211e:	9b00      	ldr	r3, [sp, #0]
 8002120:	61a3      	str	r3, [r4, #24]
 8002122:	3501      	adds	r5, #1
 8002124:	f10b 0b1c 	add.w	fp, fp, #28
 8002128:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800212c:	42ab      	cmp	r3, r5
 800212e:	b2aa      	uxth	r2, r5
 8002130:	d93b      	bls.n	80021aa <ai_platform_outputs_get+0xd6>
 8002132:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002136:	00e9      	lsls	r1, r5, #3
 8002138:	9101      	str	r1, [sp, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d035      	beq.n	80021aa <ai_platform_outputs_get+0xd6>
 800213e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8002142:	2e00      	cmp	r6, #0
 8002144:	d031      	beq.n	80021aa <ai_platform_outputs_get+0xd6>
 8002146:	f8da 3014 	ldr.w	r3, [sl, #20]
 800214a:	69b2      	ldr	r2, [r6, #24]
 800214c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8002150:	68b3      	ldr	r3, [r6, #8]
 8002152:	6810      	ldr	r0, [r2, #0]
 8002154:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8002158:	68f3      	ldr	r3, [r6, #12]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	f001 f94e 	bl	80033fc <ai_array_to_buffer_fmt>
 8002160:	69b2      	ldr	r2, [r6, #24]
 8002162:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8002166:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800216a:	445c      	add	r4, fp
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0c8      	beq.n	8002102 <ai_platform_outputs_get+0x2e>
 8002170:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 8002174:	6832      	ldr	r2, [r6, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	b112      	cbz	r2, 8002180 <ai_platform_outputs_get+0xac>
 800217a:	8852      	ldrh	r2, [r2, #2]
 800217c:	2a00      	cmp	r2, #0
 800217e:	d1bc      	bne.n	80020fa <ai_platform_outputs_get+0x26>
 8002180:	69b2      	ldr	r2, [r6, #24]
 8002182:	2300      	movs	r3, #0
 8002184:	e7bd      	b.n	8002102 <ai_platform_outputs_get+0x2e>
 8002186:	9803      	ldr	r0, [sp, #12]
 8002188:	2218      	movs	r2, #24
 800218a:	2111      	movs	r1, #17
 800218c:	300c      	adds	r0, #12
 800218e:	f000 fb9d 	bl	80028cc <core_set_error>
 8002192:	2200      	movs	r2, #0
 8002194:	4610      	mov	r0, r2
 8002196:	9b02      	ldr	r3, [sp, #8]
 8002198:	b103      	cbz	r3, 800219c <ai_platform_outputs_get+0xc8>
 800219a:	801a      	strh	r2, [r3, #0]
 800219c:	b005      	add	sp, #20
 800219e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021a2:	2000      	movs	r0, #0
 80021a4:	b005      	add	sp, #20
 80021a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021aa:	2a00      	cmp	r2, #0
 80021ac:	d0eb      	beq.n	8002186 <ai_platform_outputs_get+0xb2>
 80021ae:	f8da 3014 	ldr.w	r3, [sl, #20]
 80021b2:	6858      	ldr	r0, [r3, #4]
 80021b4:	e7ef      	b.n	8002196 <ai_platform_outputs_get+0xc2>
 80021b6:	bf00      	nop
 80021b8:	a1c00100 	.word	0xa1c00100

080021bc <ai_platform_network_create>:
 80021bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021c0:	b083      	sub	sp, #12
 80021c2:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 80021c6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80021ca:	b320      	cbz	r0, 8002216 <ai_platform_network_create+0x5a>
 80021cc:	6002      	str	r2, [r0, #0]
 80021ce:	4616      	mov	r6, r2
 80021d0:	461f      	mov	r7, r3
 80021d2:	4604      	mov	r4, r0
 80021d4:	f000 fb72 	bl	80028bc <core_init>
 80021d8:	b970      	cbnz	r0, 80021f8 <ai_platform_network_create+0x3c>
 80021da:	2530      	movs	r5, #48	@ 0x30
 80021dc:	2300      	movs	r3, #0
 80021de:	6023      	str	r3, [r4, #0]
 80021e0:	2410      	movs	r4, #16
 80021e2:	4642      	mov	r2, r8
 80021e4:	4649      	mov	r1, r9
 80021e6:	4638      	mov	r0, r7
 80021e8:	f001 f98a 	bl	8003500 <ai_version_get>
 80021ec:	60b0      	str	r0, [r6, #8]
 80021ee:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80021f2:	b003      	add	sp, #12
 80021f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021f8:	2200      	movs	r2, #0
 80021fa:	4649      	mov	r1, r9
 80021fc:	4638      	mov	r0, r7
 80021fe:	f001 f97f 	bl	8003500 <ai_version_get>
 8002202:	2200      	movs	r2, #0
 8002204:	4605      	mov	r5, r0
 8002206:	2105      	movs	r1, #5
 8002208:	2001      	movs	r0, #1
 800220a:	f001 f979 	bl	8003500 <ai_version_get>
 800220e:	4285      	cmp	r5, r0
 8002210:	d008      	beq.n	8002224 <ai_platform_network_create+0x68>
 8002212:	2501      	movs	r5, #1
 8002214:	e7e2      	b.n	80021dc <ai_platform_network_create+0x20>
 8002216:	2510      	movs	r5, #16
 8002218:	462c      	mov	r4, r5
 800221a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800221e:	b003      	add	sp, #12
 8002220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <ai_platform_network_create+0x80>)
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	a801      	add	r0, sp, #4
 800222a:	f000 fb5b 	bl	80028e4 <ai_check_custom_types>
 800222e:	b110      	cbz	r0, 8002236 <ai_platform_network_create+0x7a>
 8002230:	2400      	movs	r4, #0
 8002232:	4625      	mov	r5, r4
 8002234:	e7d5      	b.n	80021e2 <ai_platform_network_create+0x26>
 8002236:	2502      	movs	r5, #2
 8002238:	e7d0      	b.n	80021dc <ai_platform_network_create+0x20>
 800223a:	bf00      	nop
 800223c:	84048403 	.word	0x84048403

08002240 <ai_platform_network_init>:
 8002240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002244:	4b63      	ldr	r3, [pc, #396]	@ (80023d4 <ai_platform_network_init+0x194>)
 8002246:	6802      	ldr	r2, [r0, #0]
 8002248:	4393      	bics	r3, r2
 800224a:	b083      	sub	sp, #12
 800224c:	d156      	bne.n	80022fc <ai_platform_network_init+0xbc>
 800224e:	4604      	mov	r4, r0
 8002250:	460f      	mov	r7, r1
 8002252:	2900      	cmp	r1, #0
 8002254:	f000 80a9 	beq.w	80023aa <ai_platform_network_init+0x16a>
 8002258:	680b      	ldr	r3, [r1, #0]
 800225a:	495f      	ldr	r1, [pc, #380]	@ (80023d8 <ai_platform_network_init+0x198>)
 800225c:	428b      	cmp	r3, r1
 800225e:	d113      	bne.n	8002288 <ai_platform_network_init+0x48>
 8002260:	495c      	ldr	r1, [pc, #368]	@ (80023d4 <ai_platform_network_init+0x194>)
 8002262:	89bd      	ldrh	r5, [r7, #12]
 8002264:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8002268:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800226c:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8002270:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8002274:	68be      	ldr	r6, [r7, #8]
 8002276:	428a      	cmp	r2, r1
 8002278:	d02c      	beq.n	80022d4 <ai_platform_network_init+0x94>
 800227a:	2303      	movs	r3, #3
 800227c:	6123      	str	r3, [r4, #16]
 800227e:	4627      	mov	r7, r4
 8002280:	4638      	mov	r0, r7
 8002282:	b003      	add	sp, #12
 8002284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002288:	2101      	movs	r1, #1
 800228a:	4638      	mov	r0, r7
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8002292:	f7ff fd7f 	bl	8001d94 <ai_buffer_get_size>
 8002296:	f107 081c 	add.w	r8, r7, #28
 800229a:	4605      	mov	r5, r0
 800229c:	2101      	movs	r1, #1
 800229e:	4640      	mov	r0, r8
 80022a0:	463e      	mov	r6, r7
 80022a2:	6a3f      	ldr	r7, [r7, #32]
 80022a4:	f7ff fd76 	bl	8001d94 <ai_buffer_get_size>
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	9b01      	ldr	r3, [sp, #4]
 80022ac:	bf0a      	itet	eq
 80022ae:	46a9      	moveq	r9, r5
 80022b0:	f04f 0901 	movne.w	r9, #1
 80022b4:	462e      	moveq	r6, r5
 80022b6:	b330      	cbz	r0, 8002306 <ai_platform_network_init+0xc6>
 80022b8:	2f00      	cmp	r7, #0
 80022ba:	f000 8084 	beq.w	80023c6 <ai_platform_network_init+0x186>
 80022be:	f04f 0a01 	mov.w	sl, #1
 80022c2:	f1bb 0f00 	cmp.w	fp, #0
 80022c6:	d021      	beq.n	800230c <ai_platform_network_init+0xcc>
 80022c8:	2500      	movs	r5, #0
 80022ca:	6822      	ldr	r2, [r4, #0]
 80022cc:	4941      	ldr	r1, [pc, #260]	@ (80023d4 <ai_platform_network_init+0x194>)
 80022ce:	428a      	cmp	r2, r1
 80022d0:	46ab      	mov	fp, r5
 80022d2:	d1d2      	bne.n	800227a <ai_platform_network_init+0x3a>
 80022d4:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 80022d6:	454a      	cmp	r2, r9
 80022d8:	4a3f      	ldr	r2, [pc, #252]	@ (80023d8 <ai_platform_network_init+0x198>)
 80022da:	d221      	bcs.n	8002320 <ai_platform_network_init+0xe0>
 80022dc:	4293      	cmp	r3, r2
 80022de:	d15c      	bne.n	800239a <ai_platform_network_init+0x15a>
 80022e0:	6266      	str	r6, [r4, #36]	@ 0x24
 80022e2:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80022e6:	f8a4 b020 	strh.w	fp, [r4, #32]
 80022ea:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 80022ee:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 80022f2:	8525      	strh	r5, [r4, #40]	@ 0x28
 80022f4:	4620      	mov	r0, r4
 80022f6:	f000 fb1f 	bl	8002938 <ai_layers_init_all>
 80022fa:	e7be      	b.n	800227a <ai_platform_network_init+0x3a>
 80022fc:	2700      	movs	r7, #0
 80022fe:	4638      	mov	r0, r7
 8002300:	b003      	add	sp, #12
 8002302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002306:	4680      	mov	r8, r0
 8002308:	4682      	mov	sl, r0
 800230a:	e7da      	b.n	80022c2 <ai_platform_network_init+0x82>
 800230c:	2d00      	cmp	r5, #0
 800230e:	d0dc      	beq.n	80022ca <ai_platform_network_init+0x8a>
 8002310:	2212      	movs	r2, #18
 8002312:	2110      	movs	r1, #16
 8002314:	f104 000c 	add.w	r0, r4, #12
 8002318:	f000 fad8 	bl	80028cc <core_set_error>
 800231c:	465f      	mov	r7, fp
 800231e:	e7af      	b.n	8002280 <ai_platform_network_init+0x40>
 8002320:	4293      	cmp	r3, r2
 8002322:	d0dd      	beq.n	80022e0 <ai_platform_network_init+0xa0>
 8002324:	f1b9 0f00 	cmp.w	r9, #0
 8002328:	d018      	beq.n	800235c <ai_platform_network_init+0x11c>
 800232a:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	f8cd 9004 	str.w	r9, [sp, #4]
 8002334:	2700      	movs	r7, #0
 8002336:	4699      	mov	r9, r3
 8002338:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800233a:	eb06 0e07 	add.w	lr, r6, r7
 800233e:	eb03 0c07 	add.w	ip, r3, r7
 8002342:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002346:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800234a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800234e:	371c      	adds	r7, #28
 8002350:	45b9      	cmp	r9, r7
 8002352:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002356:	d1ef      	bne.n	8002338 <ai_platform_network_init+0xf8>
 8002358:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800235c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800235e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8002362:	4553      	cmp	r3, sl
 8002364:	f8a4 b020 	strh.w	fp, [r4, #32]
 8002368:	d325      	bcc.n	80023b6 <ai_platform_network_init+0x176>
 800236a:	f1ba 0f00 	cmp.w	sl, #0
 800236e:	d0be      	beq.n	80022ee <ai_platform_network_init+0xae>
 8002370:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8002374:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002378:	f04f 0c00 	mov.w	ip, #0
 800237c:	eb08 070c 	add.w	r7, r8, ip
 8002380:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002382:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002384:	4466      	add	r6, ip
 8002386:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002388:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800238c:	f10c 0c1c 	add.w	ip, ip, #28
 8002390:	45f4      	cmp	ip, lr
 8002392:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8002396:	d1f1      	bne.n	800237c <ai_platform_network_init+0x13c>
 8002398:	e7a9      	b.n	80022ee <ai_platform_network_init+0xae>
 800239a:	2212      	movs	r2, #18
 800239c:	2116      	movs	r1, #22
 800239e:	f104 000c 	add.w	r0, r4, #12
 80023a2:	f000 fa93 	bl	80028cc <core_set_error>
 80023a6:	2700      	movs	r7, #0
 80023a8:	e76a      	b.n	8002280 <ai_platform_network_init+0x40>
 80023aa:	2211      	movs	r2, #17
 80023ac:	2110      	movs	r1, #16
 80023ae:	300c      	adds	r0, #12
 80023b0:	f000 fa8c 	bl	80028cc <core_set_error>
 80023b4:	e764      	b.n	8002280 <ai_platform_network_init+0x40>
 80023b6:	2213      	movs	r2, #19
 80023b8:	2116      	movs	r1, #22
 80023ba:	f104 000c 	add.w	r0, r4, #12
 80023be:	f000 fa85 	bl	80028cc <core_set_error>
 80023c2:	2700      	movs	r7, #0
 80023c4:	e75c      	b.n	8002280 <ai_platform_network_init+0x40>
 80023c6:	2213      	movs	r2, #19
 80023c8:	2110      	movs	r1, #16
 80023ca:	f104 000c 	add.w	r0, r4, #12
 80023ce:	f000 fa7d 	bl	80028cc <core_set_error>
 80023d2:	e755      	b.n	8002280 <ai_platform_network_init+0x40>
 80023d4:	a1c00100 	.word	0xa1c00100
 80023d8:	a1facade 	.word	0xa1facade

080023dc <ai_platform_network_post_init>:
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <ai_platform_network_post_init+0x5c>)
 80023e0:	6802      	ldr	r2, [r0, #0]
 80023e2:	ea02 0103 	and.w	r1, r2, r3
 80023e6:	4393      	bics	r3, r2
 80023e8:	d108      	bne.n	80023fc <ai_platform_network_post_init+0x20>
 80023ea:	6903      	ldr	r3, [r0, #16]
 80023ec:	f013 0502 	ands.w	r5, r3, #2
 80023f0:	4604      	mov	r4, r0
 80023f2:	d005      	beq.n	8002400 <ai_platform_network_post_init+0x24>
 80023f4:	428a      	cmp	r2, r1
 80023f6:	d00a      	beq.n	800240e <ai_platform_network_post_init+0x32>
 80023f8:	2001      	movs	r0, #1
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	2000      	movs	r0, #0
 80023fe:	bd38      	pop	{r3, r4, r5, pc}
 8002400:	2210      	movs	r2, #16
 8002402:	2111      	movs	r1, #17
 8002404:	300c      	adds	r0, #12
 8002406:	f000 fa61 	bl	80028cc <core_set_error>
 800240a:	4628      	mov	r0, r5
 800240c:	bd38      	pop	{r3, r4, r5, pc}
 800240e:	f000 faa1 	bl	8002954 <ai_layers_post_init_all>
 8002412:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ef      	beq.n	80023f8 <ai_platform_network_post_init+0x1c>
 8002418:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800241a:	e008      	b.n	800242e <ai_platform_network_post_init+0x52>
 800241c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8002420:	4798      	blx	r3
 8002422:	692b      	ldr	r3, [r5, #16]
 8002424:	42ab      	cmp	r3, r5
 8002426:	d0e7      	beq.n	80023f8 <ai_platform_network_post_init+0x1c>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0e5      	beq.n	80023f8 <ai_platform_network_post_init+0x1c>
 800242c:	461d      	mov	r5, r3
 800242e:	4629      	mov	r1, r5
 8002430:	2000      	movs	r0, #0
 8002432:	2d00      	cmp	r5, #0
 8002434:	d1f2      	bne.n	800241c <ai_platform_network_post_init+0x40>
 8002436:	e7df      	b.n	80023f8 <ai_platform_network_post_init+0x1c>
 8002438:	a1c00100 	.word	0xa1c00100

0800243c <ai_platform_network_process>:
 800243c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002440:	4bb5      	ldr	r3, [pc, #724]	@ (8002718 <ai_platform_network_process+0x2dc>)
 8002442:	4605      	mov	r5, r0
 8002444:	6800      	ldr	r0, [r0, #0]
 8002446:	b085      	sub	sp, #20
 8002448:	4383      	bics	r3, r0
 800244a:	9202      	str	r2, [sp, #8]
 800244c:	f040 8140 	bne.w	80026d0 <ai_platform_network_process+0x294>
 8002450:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8125 	beq.w	80026a2 <ai_platform_network_process+0x266>
 8002458:	692b      	ldr	r3, [r5, #16]
 800245a:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2700      	movs	r7, #0
 8002464:	2b03      	cmp	r3, #3
 8002466:	61af      	str	r7, [r5, #24]
 8002468:	f040 8137 	bne.w	80026da <ai_platform_network_process+0x29e>
 800246c:	2900      	cmp	r1, #0
 800246e:	f000 811e 	beq.w	80026ae <ai_platform_network_process+0x272>
 8002472:	f1ba 0f00 	cmp.w	sl, #0
 8002476:	f000 811a 	beq.w	80026ae <ai_platform_network_process+0x272>
 800247a:	f8ba 3000 	ldrh.w	r3, [sl]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8115 	beq.w	80026ae <ai_platform_network_process+0x272>
 8002484:	698b      	ldr	r3, [r1, #24]
 8002486:	9503      	str	r5, [sp, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	460e      	mov	r6, r1
 800248e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d072      	beq.n	800257c <ai_platform_network_process+0x140>
 8002496:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800249a:	2c00      	cmp	r4, #0
 800249c:	d06e      	beq.n	800257c <ai_platform_network_process+0x140>
 800249e:	f8da 3008 	ldr.w	r3, [sl, #8]
 80024a2:	f8d3 9000 	ldr.w	r9, [r3]
 80024a6:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80024aa:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80024ae:	f000 81d3 	beq.w	8002858 <ai_platform_network_process+0x41c>
 80024b2:	69a3      	ldr	r3, [r4, #24]
 80024b4:	2101      	movs	r1, #1
 80024b6:	4630      	mov	r0, r6
 80024b8:	685d      	ldr	r5, [r3, #4]
 80024ba:	f7ff fc6b 	bl	8001d94 <ai_buffer_get_size>
 80024be:	4285      	cmp	r5, r0
 80024c0:	f0c0 8116 	bcc.w	80026f0 <ai_platform_network_process+0x2b4>
 80024c4:	68e0      	ldr	r0, [r4, #12]
 80024c6:	69b1      	ldr	r1, [r6, #24]
 80024c8:	68c2      	ldr	r2, [r0, #12]
 80024ca:	68cb      	ldr	r3, [r1, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f040 810f 	bne.w	80026f0 <ai_platform_network_process+0x2b4>
 80024d2:	6882      	ldr	r2, [r0, #8]
 80024d4:	688b      	ldr	r3, [r1, #8]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	f040 810a 	bne.w	80026f0 <ai_platform_network_process+0x2b4>
 80024dc:	6842      	ldr	r2, [r0, #4]
 80024de:	684b      	ldr	r3, [r1, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f040 8105 	bne.w	80026f0 <ai_platform_network_process+0x2b4>
 80024e6:	69a3      	ldr	r3, [r4, #24]
 80024e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ec:	f000 fff6 	bl	80034dc <ai_array_get_data_byte_size>
 80024f0:	4605      	mov	r5, r0
 80024f2:	4620      	mov	r0, r4
 80024f4:	f001 f80a 	bl	800350c <get_tensor_byte_size>
 80024f8:	4285      	cmp	r5, r0
 80024fa:	f0c0 80f9 	bcc.w	80026f0 <ai_platform_network_process+0x2b4>
 80024fe:	69a3      	ldr	r3, [r4, #24]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	f000 ff7b 	bl	80033fc <ai_array_to_buffer_fmt>
 8002506:	6833      	ldr	r3, [r6, #0]
 8002508:	4058      	eors	r0, r3
 800250a:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800250e:	f040 81a5 	bne.w	800285c <ai_platform_network_process+0x420>
 8002512:	6873      	ldr	r3, [r6, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 819f 	beq.w	8002858 <ai_platform_network_process+0x41c>
 800251a:	69b3      	ldr	r3, [r6, #24]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 81a5 	beq.w	800286e <ai_platform_network_process+0x432>
 8002524:	9a01      	ldr	r2, [sp, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	bf38      	it	cc
 800252a:	461a      	movcc	r2, r3
 800252c:	4620      	mov	r0, r4
 800252e:	9201      	str	r2, [sp, #4]
 8002530:	f000 ffec 	bl	800350c <get_tensor_byte_size>
 8002534:	f8c8 0008 	str.w	r0, [r8, #8]
 8002538:	69b3      	ldr	r3, [r6, #24]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fb00 f303 	mul.w	r3, r0, r3
 8002540:	f8c8 300c 	str.w	r3, [r8, #12]
 8002544:	6871      	ldr	r1, [r6, #4]
 8002546:	f8c8 1004 	str.w	r1, [r8, #4]
 800254a:	440b      	add	r3, r1
 800254c:	f849 300b 	str.w	r3, [r9, fp]
 8002550:	69a0      	ldr	r0, [r4, #24]
 8002552:	6803      	ldr	r3, [r0, #0]
 8002554:	009a      	lsls	r2, r3, #2
 8002556:	f107 0701 	add.w	r7, r7, #1
 800255a:	f106 061c 	add.w	r6, r6, #28
 800255e:	f100 80b1 	bmi.w	80026c4 <ai_platform_network_process+0x288>
 8002562:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	4419      	add	r1, r3
 800256a:	6081      	str	r1, [r0, #8]
 800256c:	69a3      	ldr	r3, [r4, #24]
 800256e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	f8ba 3000 	ldrh.w	r3, [sl]
 8002578:	42bb      	cmp	r3, r7
 800257a:	d888      	bhi.n	800248e <ai_platform_network_process+0x52>
 800257c:	9d03      	ldr	r5, [sp, #12]
 800257e:	9b02      	ldr	r3, [sp, #8]
 8002580:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 817c 	beq.w	8002880 <ai_platform_network_process+0x444>
 8002588:	2a01      	cmp	r2, #1
 800258a:	f240 80bd 	bls.w	8002708 <ai_platform_network_process+0x2cc>
 800258e:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8002592:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80b6 	beq.w	8002708 <ai_platform_network_process+0x2cc>
 800259c:	f8dd b008 	ldr.w	fp, [sp, #8]
 80025a0:	2700      	movs	r7, #0
 80025a2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80bd 	beq.w	8002726 <ai_platform_network_process+0x2ea>
 80025ac:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80025b0:	2e00      	cmp	r6, #0
 80025b2:	f000 80b8 	beq.w	8002726 <ai_platform_network_process+0x2ea>
 80025b6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80025ba:	681c      	ldr	r4, [r3, #0]
 80025bc:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 80025c0:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80025c4:	f000 8160 	beq.w	8002888 <ai_platform_network_process+0x44c>
 80025c8:	69b3      	ldr	r3, [r6, #24]
 80025ca:	2101      	movs	r1, #1
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	4658      	mov	r0, fp
 80025d2:	f7ff fbdf 	bl	8001d94 <ai_buffer_get_size>
 80025d6:	9b02      	ldr	r3, [sp, #8]
 80025d8:	4283      	cmp	r3, r0
 80025da:	f0c0 8095 	bcc.w	8002708 <ai_platform_network_process+0x2cc>
 80025de:	68f0      	ldr	r0, [r6, #12]
 80025e0:	f8db 1018 	ldr.w	r1, [fp, #24]
 80025e4:	68c2      	ldr	r2, [r0, #12]
 80025e6:	68cb      	ldr	r3, [r1, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f040 808d 	bne.w	8002708 <ai_platform_network_process+0x2cc>
 80025ee:	6882      	ldr	r2, [r0, #8]
 80025f0:	688b      	ldr	r3, [r1, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	f040 8088 	bne.w	8002708 <ai_platform_network_process+0x2cc>
 80025f8:	6842      	ldr	r2, [r0, #4]
 80025fa:	684b      	ldr	r3, [r1, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f040 8083 	bne.w	8002708 <ai_platform_network_process+0x2cc>
 8002602:	69b3      	ldr	r3, [r6, #24]
 8002604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002608:	f000 ff68 	bl	80034dc <ai_array_get_data_byte_size>
 800260c:	9002      	str	r0, [sp, #8]
 800260e:	4630      	mov	r0, r6
 8002610:	f000 ff7c 	bl	800350c <get_tensor_byte_size>
 8002614:	9b02      	ldr	r3, [sp, #8]
 8002616:	4283      	cmp	r3, r0
 8002618:	d376      	bcc.n	8002708 <ai_platform_network_process+0x2cc>
 800261a:	69b3      	ldr	r3, [r6, #24]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	f000 feed 	bl	80033fc <ai_array_to_buffer_fmt>
 8002622:	f8db 3000 	ldr.w	r3, [fp]
 8002626:	4058      	eors	r0, r3
 8002628:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800262c:	f040 8134 	bne.w	8002898 <ai_platform_network_process+0x45c>
 8002630:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8127 	beq.w	8002888 <ai_platform_network_process+0x44c>
 800263a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8133 	beq.w	80028ac <ai_platform_network_process+0x470>
 8002646:	9a01      	ldr	r2, [sp, #4]
 8002648:	429a      	cmp	r2, r3
 800264a:	bf38      	it	cc
 800264c:	461a      	movcc	r2, r3
 800264e:	4630      	mov	r0, r6
 8002650:	9201      	str	r2, [sp, #4]
 8002652:	f000 ff5b 	bl	800350c <get_tensor_byte_size>
 8002656:	f8c9 0008 	str.w	r0, [r9, #8]
 800265a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	fb00 f303 	mul.w	r3, r0, r3
 8002664:	f8c9 300c 	str.w	r3, [r9, #12]
 8002668:	f8db 1004 	ldr.w	r1, [fp, #4]
 800266c:	f8c9 1004 	str.w	r1, [r9, #4]
 8002670:	440b      	add	r3, r1
 8002672:	f844 300a 	str.w	r3, [r4, sl]
 8002676:	69b0      	ldr	r0, [r6, #24]
 8002678:	6803      	ldr	r3, [r0, #0]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f107 0701 	add.w	r7, r7, #1
 8002680:	f10b 0b1c 	add.w	fp, fp, #28
 8002684:	d44a      	bmi.n	800271c <ai_platform_network_process+0x2e0>
 8002686:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	4419      	add	r1, r3
 800268e:	6081      	str	r1, [r0, #8]
 8002690:	69b3      	ldr	r3, [r6, #24]
 8002692:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800269c:	42bb      	cmp	r3, r7
 800269e:	d880      	bhi.n	80025a2 <ai_platform_network_process+0x166>
 80026a0:	e041      	b.n	8002726 <ai_platform_network_process+0x2ea>
 80026a2:	692a      	ldr	r2, [r5, #16]
 80026a4:	61ab      	str	r3, [r5, #24]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	2a03      	cmp	r2, #3
 80026ac:	d115      	bne.n	80026da <ai_platform_network_process+0x29e>
 80026ae:	2217      	movs	r2, #23
 80026b0:	2112      	movs	r1, #18
 80026b2:	f105 000c 	add.w	r0, r5, #12
 80026b6:	f000 f909 	bl	80028cc <core_set_error>
 80026ba:	2400      	movs	r4, #0
 80026bc:	4620      	mov	r0, r4
 80026be:	b005      	add	sp, #20
 80026c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026c4:	f8ba 3000 	ldrh.w	r3, [sl]
 80026c8:	429f      	cmp	r7, r3
 80026ca:	f4ff aee0 	bcc.w	800248e <ai_platform_network_process+0x52>
 80026ce:	e755      	b.n	800257c <ai_platform_network_process+0x140>
 80026d0:	2400      	movs	r4, #0
 80026d2:	4620      	mov	r0, r4
 80026d4:	b005      	add	sp, #20
 80026d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026da:	2230      	movs	r2, #48	@ 0x30
 80026dc:	2111      	movs	r1, #17
 80026de:	f105 000c 	add.w	r0, r5, #12
 80026e2:	f000 f8f3 	bl	80028cc <core_set_error>
 80026e6:	2400      	movs	r4, #0
 80026e8:	4620      	mov	r0, r4
 80026ea:	b005      	add	sp, #20
 80026ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026f0:	9d03      	ldr	r5, [sp, #12]
 80026f2:	2218      	movs	r2, #24
 80026f4:	2112      	movs	r1, #18
 80026f6:	f105 000c 	add.w	r0, r5, #12
 80026fa:	f000 f8e7 	bl	80028cc <core_set_error>
 80026fe:	2400      	movs	r4, #0
 8002700:	4620      	mov	r0, r4
 8002702:	b005      	add	sp, #20
 8002704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002708:	2218      	movs	r2, #24
 800270a:	2113      	movs	r1, #19
 800270c:	f105 000c 	add.w	r0, r5, #12
 8002710:	f000 f8dc 	bl	80028cc <core_set_error>
 8002714:	2400      	movs	r4, #0
 8002716:	e7d1      	b.n	80026bc <ai_platform_network_process+0x280>
 8002718:	a1c00100 	.word	0xa1c00100
 800271c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002720:	429f      	cmp	r7, r3
 8002722:	f4ff af3e 	bcc.w	80025a2 <ai_platform_network_process+0x166>
 8002726:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800272a:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800272c:	832b      	strh	r3, [r5, #24]
 800272e:	2a00      	cmp	r2, #0
 8002730:	f040 808c 	bne.w	800284c <ai_platform_network_process+0x410>
 8002734:	4616      	mov	r6, r2
 8002736:	4617      	mov	r7, r2
 8002738:	8b6c      	ldrh	r4, [r5, #26]
 800273a:	429c      	cmp	r4, r3
 800273c:	bf38      	it	cc
 800273e:	46ab      	movcc	fp, r5
 8002740:	d2bc      	bcs.n	80026bc <ai_platform_network_process+0x280>
 8002742:	2e00      	cmp	r6, #0
 8002744:	d030      	beq.n	80027a8 <ai_platform_network_process+0x36c>
 8002746:	f04f 0800 	mov.w	r8, #0
 800274a:	e014      	b.n	8002776 <ai_platform_network_process+0x33a>
 800274c:	6882      	ldr	r2, [r0, #8]
 800274e:	68c5      	ldr	r5, [r0, #12]
 8002750:	6863      	ldr	r3, [r4, #4]
 8002752:	1b52      	subs	r2, r2, r5
 8002754:	4413      	add	r3, r2
 8002756:	6083      	str	r3, [r0, #8]
 8002758:	698b      	ldr	r3, [r1, #24]
 800275a:	6862      	ldr	r2, [r4, #4]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8002762:	f859 200a 	ldr.w	r2, [r9, sl]
 8002766:	440b      	add	r3, r1
 8002768:	4293      	cmp	r3, r2
 800276a:	bf24      	itt	cs
 800276c:	68e3      	ldrcs	r3, [r4, #12]
 800276e:	1ad3      	subcs	r3, r2, r3
 8002770:	6063      	str	r3, [r4, #4]
 8002772:	f108 0801 	add.w	r8, r8, #1
 8002776:	8833      	ldrh	r3, [r6, #0]
 8002778:	4543      	cmp	r3, r8
 800277a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800277e:	d913      	bls.n	80027a8 <ai_platform_network_process+0x36c>
 8002780:	6873      	ldr	r3, [r6, #4]
 8002782:	b18b      	cbz	r3, 80027a8 <ai_platform_network_process+0x36c>
 8002784:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8002788:	b171      	cbz	r1, 80027a8 <ai_platform_network_process+0x36c>
 800278a:	6988      	ldr	r0, [r1, #24]
 800278c:	68b2      	ldr	r2, [r6, #8]
 800278e:	6803      	ldr	r3, [r0, #0]
 8002790:	f8d2 9000 	ldr.w	r9, [r2]
 8002794:	009d      	lsls	r5, r3, #2
 8002796:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800279a:	d5d7      	bpl.n	800274c <ai_platform_network_process+0x310>
 800279c:	6881      	ldr	r1, [r0, #8]
 800279e:	68a2      	ldr	r2, [r4, #8]
 80027a0:	6860      	ldr	r0, [r4, #4]
 80027a2:	f000 fd55 	bl	8003250 <st_int8_copy>
 80027a6:	e7da      	b.n	800275e <ai_platform_network_process+0x322>
 80027a8:	4658      	mov	r0, fp
 80027aa:	f000 f8e7 	bl	800297c <ai_layers_forward_all>
 80027ae:	2f00      	cmp	r7, #0
 80027b0:	d03d      	beq.n	800282e <ai_platform_network_process+0x3f2>
 80027b2:	2400      	movs	r4, #0
 80027b4:	e016      	b.n	80027e4 <ai_platform_network_process+0x3a8>
 80027b6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80027ba:	f859 100a 	ldr.w	r1, [r9, sl]
 80027be:	4413      	add	r3, r2
 80027c0:	428b      	cmp	r3, r1
 80027c2:	bf24      	itt	cs
 80027c4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80027c8:	1acb      	subcs	r3, r1, r3
 80027ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80027ce:	6981      	ldr	r1, [r0, #24]
 80027d0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80027d4:	1b52      	subs	r2, r2, r5
 80027d6:	4413      	add	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
 80027da:	6983      	ldr	r3, [r0, #24]
 80027dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	3401      	adds	r4, #1
 80027e4:	883b      	ldrh	r3, [r7, #0]
 80027e6:	42a3      	cmp	r3, r4
 80027e8:	d921      	bls.n	800282e <ai_platform_network_process+0x3f2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	b1fb      	cbz	r3, 800282e <ai_platform_network_process+0x3f2>
 80027ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80027f2:	b1e0      	cbz	r0, 800282e <ai_platform_network_process+0x3f2>
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	6983      	ldr	r3, [r0, #24]
 80027f8:	f8d2 9000 	ldr.w	r9, [r2]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8002804:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8002808:	d5d5      	bpl.n	80027b6 <ai_platform_network_process+0x37a>
 800280a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800280e:	6898      	ldr	r0, [r3, #8]
 8002810:	f000 fd1e 	bl	8003250 <st_int8_copy>
 8002814:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8002818:	f859 200a 	ldr.w	r2, [r9, sl]
 800281c:	440b      	add	r3, r1
 800281e:	4293      	cmp	r3, r2
 8002820:	bf24      	itt	cs
 8002822:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8002826:	1ad3      	subcs	r3, r2, r3
 8002828:	f8c8 3004 	str.w	r3, [r8, #4]
 800282c:	e7d9      	b.n	80027e2 <ai_platform_network_process+0x3a6>
 800282e:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8002832:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8002836:	3401      	adds	r4, #1
 8002838:	b2a4      	uxth	r4, r4
 800283a:	42a3      	cmp	r3, r4
 800283c:	f8ab 401a 	strh.w	r4, [fp, #26]
 8002840:	f63f af7f 	bhi.w	8002742 <ai_platform_network_process+0x306>
 8002844:	4620      	mov	r0, r4
 8002846:	b005      	add	sp, #20
 8002848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800284c:	2a01      	cmp	r2, #1
 800284e:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8002850:	d02a      	beq.n	80028a8 <ai_platform_network_process+0x46c>
 8002852:	f106 070c 	add.w	r7, r6, #12
 8002856:	e76f      	b.n	8002738 <ai_platform_network_process+0x2fc>
 8002858:	9d03      	ldr	r5, [sp, #12]
 800285a:	e728      	b.n	80026ae <ai_platform_network_process+0x272>
 800285c:	9d03      	ldr	r5, [sp, #12]
 800285e:	2219      	movs	r2, #25
 8002860:	2112      	movs	r1, #18
 8002862:	f105 000c 	add.w	r0, r5, #12
 8002866:	f000 f831 	bl	80028cc <core_set_error>
 800286a:	2400      	movs	r4, #0
 800286c:	e726      	b.n	80026bc <ai_platform_network_process+0x280>
 800286e:	9d03      	ldr	r5, [sp, #12]
 8002870:	4604      	mov	r4, r0
 8002872:	2221      	movs	r2, #33	@ 0x21
 8002874:	2112      	movs	r1, #18
 8002876:	f105 000c 	add.w	r0, r5, #12
 800287a:	f000 f827 	bl	80028cc <core_set_error>
 800287e:	e71d      	b.n	80026bc <ai_platform_network_process+0x280>
 8002880:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002884:	832b      	strh	r3, [r5, #24]
 8002886:	e752      	b.n	800272e <ai_platform_network_process+0x2f2>
 8002888:	2217      	movs	r2, #23
 800288a:	2113      	movs	r1, #19
 800288c:	f105 000c 	add.w	r0, r5, #12
 8002890:	f000 f81c 	bl	80028cc <core_set_error>
 8002894:	2400      	movs	r4, #0
 8002896:	e711      	b.n	80026bc <ai_platform_network_process+0x280>
 8002898:	2219      	movs	r2, #25
 800289a:	2113      	movs	r1, #19
 800289c:	f105 000c 	add.w	r0, r5, #12
 80028a0:	f000 f814 	bl	80028cc <core_set_error>
 80028a4:	2400      	movs	r4, #0
 80028a6:	e709      	b.n	80026bc <ai_platform_network_process+0x280>
 80028a8:	2700      	movs	r7, #0
 80028aa:	e745      	b.n	8002738 <ai_platform_network_process+0x2fc>
 80028ac:	4604      	mov	r4, r0
 80028ae:	2221      	movs	r2, #33	@ 0x21
 80028b0:	2113      	movs	r1, #19
 80028b2:	f105 000c 	add.w	r0, r5, #12
 80028b6:	f000 f809 	bl	80028cc <core_set_error>
 80028ba:	e6ff      	b.n	80026bc <ai_platform_network_process+0x280>

080028bc <core_init>:
 80028bc:	2001      	movs	r0, #1
 80028be:	4770      	bx	lr

080028c0 <core_get_error>:
 80028c0:	4603      	mov	r3, r0
 80028c2:	2200      	movs	r2, #0
 80028c4:	6800      	ldr	r0, [r0, #0]
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop

080028cc <core_set_error>:
 80028cc:	4603      	mov	r3, r0
 80028ce:	7800      	ldrb	r0, [r0, #0]
 80028d0:	b108      	cbz	r0, 80028d6 <core_set_error+0xa>
 80028d2:	2000      	movs	r0, #0
 80028d4:	4770      	bx	lr
 80028d6:	7019      	strb	r1, [r3, #0]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	f362 211f 	bfi	r1, r2, #8, #24
 80028de:	2001      	movs	r0, #1
 80028e0:	6019      	str	r1, [r3, #0]
 80028e2:	4770      	bx	lr

080028e4 <ai_check_custom_types>:
 80028e4:	b082      	sub	sp, #8
 80028e6:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <ai_check_custom_types+0x50>)
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	b118      	cbz	r0, 80028f4 <ai_check_custom_types+0x10>
 80028ec:	7803      	ldrb	r3, [r0, #0]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d002      	beq.n	80028f8 <ai_check_custom_types+0x14>
 80028f2:	2000      	movs	r0, #0
 80028f4:	b002      	add	sp, #8
 80028f6:	4770      	bx	lr
 80028f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <ai_check_custom_types+0x26>
 8002900:	2001      	movs	r0, #1
 8002902:	f080 0001 	eor.w	r0, r0, #1
 8002906:	b002      	add	sp, #8
 8002908:	4770      	bx	lr
 800290a:	7842      	ldrb	r2, [r0, #1]
 800290c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002910:	429a      	cmp	r2, r3
 8002912:	f100 0001 	add.w	r0, r0, #1
 8002916:	d1f3      	bne.n	8002900 <ai_check_custom_types+0x1c>
 8002918:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800291c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002920:	429a      	cmp	r2, r3
 8002922:	d1ed      	bne.n	8002900 <ai_check_custom_types+0x1c>
 8002924:	7842      	ldrb	r2, [r0, #1]
 8002926:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800292a:	429a      	cmp	r2, r3
 800292c:	d1e8      	bne.n	8002900 <ai_check_custom_types+0x1c>
 800292e:	2000      	movs	r0, #0
 8002930:	e7e7      	b.n	8002902 <ai_check_custom_types+0x1e>
 8002932:	bf00      	nop
 8002934:	84048403 	.word	0x84048403

08002938 <ai_layers_init_all>:
 8002938:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800293a:	2100      	movs	r1, #0
 800293c:	b143      	cbz	r3, 8002950 <ai_layers_init_all+0x18>
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	60d8      	str	r0, [r3, #12]
 8002942:	429a      	cmp	r2, r3
 8002944:	f101 0101 	add.w	r1, r1, #1
 8002948:	d002      	beq.n	8002950 <ai_layers_init_all+0x18>
 800294a:	b10a      	cbz	r2, 8002950 <ai_layers_init_all+0x18>
 800294c:	4613      	mov	r3, r2
 800294e:	e7f5      	b.n	800293c <ai_layers_init_all+0x4>
 8002950:	4608      	mov	r0, r1
 8002952:	4770      	bx	lr

08002954 <ai_layers_post_init_all>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002958:	2500      	movs	r5, #0
 800295a:	b16c      	cbz	r4, 8002978 <ai_layers_post_init_all+0x24>
 800295c:	6863      	ldr	r3, [r4, #4]
 800295e:	07db      	lsls	r3, r3, #31
 8002960:	d504      	bpl.n	800296c <ai_layers_post_init_all+0x18>
 8002962:	6a23      	ldr	r3, [r4, #32]
 8002964:	4620      	mov	r0, r4
 8002966:	b10b      	cbz	r3, 800296c <ai_layers_post_init_all+0x18>
 8002968:	4798      	blx	r3
 800296a:	3501      	adds	r5, #1
 800296c:	6923      	ldr	r3, [r4, #16]
 800296e:	42a3      	cmp	r3, r4
 8002970:	d002      	beq.n	8002978 <ai_layers_post_init_all+0x24>
 8002972:	b10b      	cbz	r3, 8002978 <ai_layers_post_init_all+0x24>
 8002974:	461c      	mov	r4, r3
 8002976:	e7f0      	b.n	800295a <ai_layers_post_init_all+0x6>
 8002978:	4628      	mov	r0, r5
 800297a:	bd38      	pop	{r3, r4, r5, pc}

0800297c <ai_layers_forward_all>:
 800297c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002980:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8002984:	4604      	mov	r4, r0
 8002986:	f1b8 0f00 	cmp.w	r8, #0
 800298a:	d02b      	beq.n	80029e4 <ai_layers_forward_all+0x68>
 800298c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800298e:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8002990:	b321      	cbz	r1, 80029dc <ai_layers_forward_all+0x60>
 8002992:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002994:	2001      	movs	r0, #1
 8002996:	47c0      	blx	r8
 8002998:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800299a:	b1fe      	cbz	r6, 80029dc <ai_layers_forward_all+0x60>
 800299c:	2700      	movs	r7, #0
 800299e:	4631      	mov	r1, r6
 80029a0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80029a2:	2002      	movs	r0, #2
 80029a4:	47c0      	blx	r8
 80029a6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80029a8:	4628      	mov	r0, r5
 80029aa:	696b      	ldr	r3, [r5, #20]
 80029ac:	4798      	blx	r3
 80029ae:	692e      	ldr	r6, [r5, #16]
 80029b0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80029b2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80029b4:	42b5      	cmp	r5, r6
 80029b6:	f04f 0003 	mov.w	r0, #3
 80029ba:	d007      	beq.n	80029cc <ai_layers_forward_all+0x50>
 80029bc:	47c0      	blx	r8
 80029be:	3701      	adds	r7, #1
 80029c0:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80029c2:	2e00      	cmp	r6, #0
 80029c4:	d1eb      	bne.n	800299e <ai_layers_forward_all+0x22>
 80029c6:	4638      	mov	r0, r7
 80029c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029cc:	2003      	movs	r0, #3
 80029ce:	47c0      	blx	r8
 80029d0:	2300      	movs	r3, #0
 80029d2:	3701      	adds	r7, #1
 80029d4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80029d6:	4638      	mov	r0, r7
 80029d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029dc:	2700      	movs	r7, #0
 80029de:	4638      	mov	r0, r7
 80029e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029e4:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80029e6:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80029e8:	2d00      	cmp	r5, #0
 80029ea:	d0f7      	beq.n	80029dc <ai_layers_forward_all+0x60>
 80029ec:	4647      	mov	r7, r8
 80029ee:	696b      	ldr	r3, [r5, #20]
 80029f0:	4628      	mov	r0, r5
 80029f2:	4798      	blx	r3
 80029f4:	462b      	mov	r3, r5
 80029f6:	692d      	ldr	r5, [r5, #16]
 80029f8:	429d      	cmp	r5, r3
 80029fa:	d004      	beq.n	8002a06 <ai_layers_forward_all+0x8a>
 80029fc:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80029fe:	3701      	adds	r7, #1
 8002a00:	2d00      	cmp	r5, #0
 8002a02:	d1f4      	bne.n	80029ee <ai_layers_forward_all+0x72>
 8002a04:	e7df      	b.n	80029c6 <ai_layers_forward_all+0x4a>
 8002a06:	2300      	movs	r3, #0
 8002a08:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002a0a:	3701      	adds	r7, #1
 8002a0c:	e7db      	b.n	80029c6 <ai_layers_forward_all+0x4a>
 8002a0e:	bf00      	nop

08002a10 <forward_dense_integer_SSSA_ch>:
 8002a10:	6983      	ldr	r3, [r0, #24]
 8002a12:	8818      	ldrh	r0, [r3, #0]
 8002a14:	2800      	cmp	r0, #0
 8002a16:	f000 80af 	beq.w	8002b78 <forward_dense_integer_SSSA_ch+0x168>
 8002a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1e:	685c      	ldr	r4, [r3, #4]
 8002a20:	6863      	ldr	r3, [r4, #4]
 8002a22:	b08f      	sub	sp, #60	@ 0x3c
 8002a24:	b103      	cbz	r3, 8002a28 <forward_dense_integer_SSSA_ch+0x18>
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2801      	cmp	r0, #1
 8002a2a:	f000 813f 	beq.w	8002cac <forward_dense_integer_SSSA_ch+0x29c>
 8002a2e:	6922      	ldr	r2, [r4, #16]
 8002a30:	b102      	cbz	r2, 8002a34 <forward_dense_integer_SSSA_ch+0x24>
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	2802      	cmp	r0, #2
 8002a36:	f000 813c 	beq.w	8002cb2 <forward_dense_integer_SSSA_ch+0x2a2>
 8002a3a:	69e5      	ldr	r5, [r4, #28]
 8002a3c:	2d00      	cmp	r5, #0
 8002a3e:	f000 80eb 	beq.w	8002c18 <forward_dense_integer_SSSA_ch+0x208>
 8002a42:	8b26      	ldrh	r6, [r4, #24]
 8002a44:	6829      	ldr	r1, [r5, #0]
 8002a46:	2e01      	cmp	r6, #1
 8002a48:	f240 8110 	bls.w	8002c6c <forward_dense_integer_SSSA_ch+0x25c>
 8002a4c:	686d      	ldr	r5, [r5, #4]
 8002a4e:	2803      	cmp	r0, #3
 8002a50:	f000 8132 	beq.w	8002cb8 <forward_dense_integer_SSSA_ch+0x2a8>
 8002a54:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8002a58:	69a8      	ldr	r0, [r5, #24]
 8002a5a:	f1b8 0f00 	cmp.w	r8, #0
 8002a5e:	f000 80f2 	beq.w	8002c46 <forward_dense_integer_SSSA_ch+0x236>
 8002a62:	6880      	ldr	r0, [r0, #8]
 8002a64:	68dc      	ldr	r4, [r3, #12]
 8002a66:	900d      	str	r0, [sp, #52]	@ 0x34
 8002a68:	68d0      	ldr	r0, [r2, #12]
 8002a6a:	6866      	ldr	r6, [r4, #4]
 8002a6c:	f8d8 8000 	ldr.w	r8, [r8]
 8002a70:	6995      	ldr	r5, [r2, #24]
 8002a72:	9609      	str	r6, [sp, #36]	@ 0x24
 8002a74:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8002a78:	68c0      	ldr	r0, [r0, #12]
 8002a7a:	fb00 f004 	mul.w	r0, r0, r4
 8002a7e:	9008      	str	r0, [sp, #32]
 8002a80:	699c      	ldr	r4, [r3, #24]
 8002a82:	fa1f fa86 	uxth.w	sl, r6
 8002a86:	fa1f fb89 	uxth.w	fp, r9
 8002a8a:	f1b8 0f00 	cmp.w	r8, #0
 8002a8e:	d003      	beq.n	8002a98 <forward_dense_integer_SSSA_ch+0x88>
 8002a90:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8002a94:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d2 c000 	ldr.w	ip, [r2]
 8002a9e:	6808      	ldr	r0, [r1, #0]
 8002aa0:	698a      	ldr	r2, [r1, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d06a      	beq.n	8002b7c <forward_dense_integer_SSSA_ch+0x16c>
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	2900      	cmp	r1, #0
 8002aaa:	f000 8098 	beq.w	8002bde <forward_dense_integer_SSSA_ch+0x1ce>
 8002aae:	885e      	ldrh	r6, [r3, #2]
 8002ab0:	2e00      	cmp	r6, #0
 8002ab2:	f000 8084 	beq.w	8002bbe <forward_dense_integer_SSSA_ch+0x1ae>
 8002ab6:	680f      	ldr	r7, [r1, #0]
 8002ab8:	ed97 0a00 	vldr	s0, [r7]
 8002abc:	f1bc 0f00 	cmp.w	ip, #0
 8002ac0:	f000 8083 	beq.w	8002bca <forward_dense_integer_SSSA_ch+0x1ba>
 8002ac4:	f8dc e004 	ldr.w	lr, [ip, #4]
 8002ac8:	f1be 0f00 	cmp.w	lr, #0
 8002acc:	f000 8092 	beq.w	8002bf4 <forward_dense_integer_SSSA_ch+0x1e4>
 8002ad0:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8002ad4:	2e00      	cmp	r6, #0
 8002ad6:	d05f      	beq.n	8002b98 <forward_dense_integer_SSSA_ch+0x188>
 8002ad8:	6897      	ldr	r7, [r2, #8]
 8002ada:	f8de 2000 	ldr.w	r2, [lr]
 8002ade:	68ad      	ldr	r5, [r5, #8]
 8002ae0:	68a4      	ldr	r4, [r4, #8]
 8002ae2:	edd2 0a00 	vldr	s1, [r2]
 8002ae6:	2900      	cmp	r1, #0
 8002ae8:	d060      	beq.n	8002bac <forward_dense_integer_SSSA_ch+0x19c>
 8002aea:	885b      	ldrh	r3, [r3, #2]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 808a 	beq.w	8002c06 <forward_dense_integer_SSSA_ch+0x1f6>
 8002af2:	684b      	ldr	r3, [r1, #4]
 8002af4:	f993 3000 	ldrsb.w	r3, [r3]
 8002af8:	930c      	str	r3, [sp, #48]	@ 0x30
 8002afa:	f1bc 0f00 	cmp.w	ip, #0
 8002afe:	f000 80d2 	beq.w	8002ca6 <forward_dense_integer_SSSA_ch+0x296>
 8002b02:	f1be 0f00 	cmp.w	lr, #0
 8002b06:	f000 8084 	beq.w	8002c12 <forward_dense_integer_SSSA_ch+0x202>
 8002b0a:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8002b0e:	2e00      	cmp	r6, #0
 8002b10:	d14f      	bne.n	8002bb2 <forward_dense_integer_SSSA_ch+0x1a2>
 8002b12:	960b      	str	r6, [sp, #44]	@ 0x2c
 8002b14:	b110      	cbz	r0, 8002b1c <forward_dense_integer_SSSA_ch+0x10c>
 8002b16:	6840      	ldr	r0, [r0, #4]
 8002b18:	b100      	cbz	r0, 8002b1c <forward_dense_integer_SSSA_ch+0x10c>
 8002b1a:	6800      	ldr	r0, [r0, #0]
 8002b1c:	fa1f f989 	uxth.w	r9, r9
 8002b20:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
 8002b24:	4642      	mov	r2, r8
 8002b26:	4659      	mov	r1, fp
 8002b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8002b2a:	f000 f8c9 	bl	8002cc0 <align_factor_ch>
 8002b2e:	9b08      	ldr	r3, [sp, #32]
 8002b30:	b1fb      	cbz	r3, 8002b72 <forward_dense_integer_SSSA_ch+0x162>
 8002b32:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8002b36:	4652      	mov	r2, sl
 8002b38:	2600      	movs	r6, #0
 8002b3a:	468a      	mov	sl, r1
 8002b3c:	4639      	mov	r1, r7
 8002b3e:	4647      	mov	r7, r8
 8002b40:	4698      	mov	r8, r3
 8002b42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002b44:	9304      	str	r3, [sp, #16]
 8002b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002b48:	9303      	str	r3, [sp, #12]
 8002b4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002b4c:	9302      	str	r3, [sp, #8]
 8002b4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002b50:	e9cd 5705 	strd	r5, r7, [sp, #20]
 8002b54:	e9cd 7300 	strd	r7, r3, [sp]
 8002b58:	4620      	mov	r0, r4
 8002b5a:	3601      	adds	r6, #1
 8002b5c:	465b      	mov	r3, fp
 8002b5e:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8002b62:	f000 f8dd 	bl	8002d20 <st_sssa8_ch_fully_connected>
 8002b66:	4546      	cmp	r6, r8
 8002b68:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8002b6c:	444d      	add	r5, r9
 8002b6e:	4454      	add	r4, sl
 8002b70:	d1e7      	bne.n	8002b42 <forward_dense_integer_SSSA_ch+0x132>
 8002b72:	b00f      	add	sp, #60	@ 0x3c
 8002b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b78:	6843      	ldr	r3, [r0, #4]
 8002b7a:	deff      	udf	#255	@ 0xff
 8002b7c:	f1bc 0f00 	cmp.w	ip, #0
 8002b80:	d052      	beq.n	8002c28 <forward_dense_integer_SSSA_ch+0x218>
 8002b82:	f8dc e004 	ldr.w	lr, [ip, #4]
 8002b86:	f1be 0f00 	cmp.w	lr, #0
 8002b8a:	d058      	beq.n	8002c3e <forward_dense_integer_SSSA_ch+0x22e>
 8002b8c:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8002b90:	2e00      	cmp	r6, #0
 8002b92:	d16d      	bne.n	8002c70 <forward_dense_integer_SSSA_ch+0x260>
 8002b94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002b98:	68ad      	ldr	r5, [r5, #8]
 8002b9a:	68a4      	ldr	r4, [r4, #8]
 8002b9c:	6897      	ldr	r7, [r2, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03d      	beq.n	8002c1e <forward_dense_integer_SSSA_ch+0x20e>
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002ba8:	2900      	cmp	r1, #0
 8002baa:	d19e      	bne.n	8002aea <forward_dense_integer_SSSA_ch+0xda>
 8002bac:	910c      	str	r1, [sp, #48]	@ 0x30
 8002bae:	2e00      	cmp	r6, #0
 8002bb0:	d0af      	beq.n	8002b12 <forward_dense_integer_SSSA_ch+0x102>
 8002bb2:	f8de 3004 	ldr.w	r3, [lr, #4]
 8002bb6:	f993 3000 	ldrsb.w	r3, [r3]
 8002bba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002bbc:	e7aa      	b.n	8002b14 <forward_dense_integer_SSSA_ch+0x104>
 8002bbe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002bc2:	f1bc 0f00 	cmp.w	ip, #0
 8002bc6:	f47f af7d 	bne.w	8002ac4 <forward_dense_integer_SSSA_ch+0xb4>
 8002bca:	68ad      	ldr	r5, [r5, #8]
 8002bcc:	68a4      	ldr	r4, [r4, #8]
 8002bce:	6897      	ldr	r7, [r2, #8]
 8002bd0:	2e00      	cmp	r6, #0
 8002bd2:	d158      	bne.n	8002c86 <forward_dense_integer_SSSA_ch+0x276>
 8002bd4:	960c      	str	r6, [sp, #48]	@ 0x30
 8002bd6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002bda:	960b      	str	r6, [sp, #44]	@ 0x2c
 8002bdc:	e79a      	b.n	8002b14 <forward_dense_integer_SSSA_ch+0x104>
 8002bde:	f1bc 0f00 	cmp.w	ip, #0
 8002be2:	d021      	beq.n	8002c28 <forward_dense_integer_SSSA_ch+0x218>
 8002be4:	f8dc e004 	ldr.w	lr, [ip, #4]
 8002be8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002bec:	f1be 0f00 	cmp.w	lr, #0
 8002bf0:	f47f af6e 	bne.w	8002ad0 <forward_dense_integer_SSSA_ch+0xc0>
 8002bf4:	68ad      	ldr	r5, [r5, #8]
 8002bf6:	68a4      	ldr	r4, [r4, #8]
 8002bf8:	6897      	ldr	r7, [r2, #8]
 8002bfa:	b179      	cbz	r1, 8002c1c <forward_dense_integer_SSSA_ch+0x20c>
 8002bfc:	885b      	ldrh	r3, [r3, #2]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d14a      	bne.n	8002c98 <forward_dense_integer_SSSA_ch+0x288>
 8002c02:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002c06:	2300      	movs	r3, #0
 8002c08:	930c      	str	r3, [sp, #48]	@ 0x30
 8002c0a:	f1be 0f00 	cmp.w	lr, #0
 8002c0e:	f47f af7c 	bne.w	8002b0a <forward_dense_integer_SSSA_ch+0xfa>
 8002c12:	2300      	movs	r3, #0
 8002c14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002c16:	e77d      	b.n	8002b14 <forward_dense_integer_SSSA_ch+0x104>
 8002c18:	4629      	mov	r1, r5
 8002c1a:	e718      	b.n	8002a4e <forward_dense_integer_SSSA_ch+0x3e>
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002c20:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002c24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002c26:	e775      	b.n	8002b14 <forward_dense_integer_SSSA_ch+0x104>
 8002c28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002c2c:	4663      	mov	r3, ip
 8002c2e:	68ad      	ldr	r5, [r5, #8]
 8002c30:	68a4      	ldr	r4, [r4, #8]
 8002c32:	6897      	ldr	r7, [r2, #8]
 8002c34:	930c      	str	r3, [sp, #48]	@ 0x30
 8002c36:	eef0 0a40 	vmov.f32	s1, s0
 8002c3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002c3c:	e76a      	b.n	8002b14 <forward_dense_integer_SSSA_ch+0x104>
 8002c3e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002c42:	4673      	mov	r3, lr
 8002c44:	e7f3      	b.n	8002c2e <forward_dense_integer_SSSA_ch+0x21e>
 8002c46:	6880      	ldr	r0, [r0, #8]
 8002c48:	68dc      	ldr	r4, [r3, #12]
 8002c4a:	900d      	str	r0, [sp, #52]	@ 0x34
 8002c4c:	68d0      	ldr	r0, [r2, #12]
 8002c4e:	6866      	ldr	r6, [r4, #4]
 8002c50:	6995      	ldr	r5, [r2, #24]
 8002c52:	9609      	str	r6, [sp, #36]	@ 0x24
 8002c54:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8002c58:	68c0      	ldr	r0, [r0, #12]
 8002c5a:	fb00 f004 	mul.w	r0, r0, r4
 8002c5e:	9008      	str	r0, [sp, #32]
 8002c60:	699c      	ldr	r4, [r3, #24]
 8002c62:	fa1f fa86 	uxth.w	sl, r6
 8002c66:	fa1f fb89 	uxth.w	fp, r9
 8002c6a:	e715      	b.n	8002a98 <forward_dense_integer_SSSA_ch+0x88>
 8002c6c:	2500      	movs	r5, #0
 8002c6e:	e6ee      	b.n	8002a4e <forward_dense_integer_SSSA_ch+0x3e>
 8002c70:	930c      	str	r3, [sp, #48]	@ 0x30
 8002c72:	f8de 3000 	ldr.w	r3, [lr]
 8002c76:	68ad      	ldr	r5, [r5, #8]
 8002c78:	68a4      	ldr	r4, [r4, #8]
 8002c7a:	6897      	ldr	r7, [r2, #8]
 8002c7c:	edd3 0a00 	vldr	s1, [r3]
 8002c80:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002c84:	e795      	b.n	8002bb2 <forward_dense_integer_SSSA_ch+0x1a2>
 8002c86:	684b      	ldr	r3, [r1, #4]
 8002c88:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8002c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c90:	930c      	str	r3, [sp, #48]	@ 0x30
 8002c92:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002c96:	e73d      	b.n	8002b14 <forward_dense_integer_SSSA_ch+0x104>
 8002c98:	684b      	ldr	r3, [r1, #4]
 8002c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002ca0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002ca4:	e7b5      	b.n	8002c12 <forward_dense_integer_SSSA_ch+0x202>
 8002ca6:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8002caa:	e733      	b.n	8002b14 <forward_dense_integer_SSSA_ch+0x104>
 8002cac:	2300      	movs	r3, #0
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	deff      	udf	#255	@ 0xff
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	deff      	udf	#255	@ 0xff
 8002cb8:	2300      	movs	r3, #0
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	deff      	udf	#255	@ 0xff
 8002cbe:	bf00      	nop

08002cc0 <align_factor_ch>:
 8002cc0:	b361      	cbz	r1, 8002d1c <align_factor_ch+0x5c>
 8002cc2:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8002cc6:	b570      	push	{r4, r5, r6, lr}
 8002cc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002ccc:	1e9d      	subs	r5, r3, #2
 8002cce:	1f14      	subs	r4, r2, #4
 8002cd0:	2600      	movs	r6, #0
 8002cd2:	ecf0 7a01 	vldmia	r0!, {s15}
 8002cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cda:	ee17 ea90 	vmov	lr, s15
 8002cde:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 8002ce2:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 8002ce6:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 8002cea:	f1be 0f00 	cmp.w	lr, #0
 8002cee:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 8002cf2:	bfb8      	it	lt
 8002cf4:	f1cc 0c00 	rsblt	ip, ip, #0
 8002cf8:	2a1f      	cmp	r2, #31
 8002cfa:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 8002cfe:	dc06      	bgt.n	8002d0e <align_factor_ch+0x4e>
 8002d00:	4281      	cmp	r1, r0
 8002d02:	f825 2f02 	strh.w	r2, [r5, #2]!
 8002d06:	f844 3f04 	str.w	r3, [r4, #4]!
 8002d0a:	d1e2      	bne.n	8002cd2 <align_factor_ch+0x12>
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	4281      	cmp	r1, r0
 8002d10:	f825 6f02 	strh.w	r6, [r5, #2]!
 8002d14:	f844 6f04 	str.w	r6, [r4, #4]!
 8002d18:	d1db      	bne.n	8002cd2 <align_factor_ch+0x12>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <st_sssa8_ch_fully_connected>:
 8002d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d24:	b097      	sub	sp, #92	@ 0x5c
 8002d26:	4693      	mov	fp, r2
 8002d28:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8002d2a:	9314      	str	r3, [sp, #80]	@ 0x50
 8002d2c:	468a      	mov	sl, r1
 8002d2e:	4619      	mov	r1, r3
 8002d30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d34:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d38:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8002d3c:	930d      	str	r3, [sp, #52]	@ 0x34
 8002d3e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8002d40:	f99d e088 	ldrsb.w	lr, [sp, #136]	@ 0x88
 8002d44:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 8002d48:	9512      	str	r5, [sp, #72]	@ 0x48
 8002d4a:	2900      	cmp	r1, #0
 8002d4c:	f000 827b 	beq.w	8003246 <st_sssa8_ch_fully_connected+0x526>
 8002d50:	463c      	mov	r4, r7
 8002d52:	3504      	adds	r5, #4
 8002d54:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8002d58:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 8002d5c:	f04f 0c01 	mov.w	ip, #1
 8002d60:	f934 2b02 	ldrsh.w	r2, [r4], #2
 8002d64:	1e51      	subs	r1, r2, #1
 8002d66:	b289      	uxth	r1, r1
 8002d68:	fa0c f602 	lsl.w	r6, ip, r2
 8002d6c:	2914      	cmp	r1, #20
 8002d6e:	fa03 f202 	lsl.w	r2, r3, r2
 8002d72:	eb02 0256 	add.w	r2, r2, r6, lsr #1
 8002d76:	f200 81e5 	bhi.w	8003144 <st_sssa8_ch_fully_connected+0x424>
 8002d7a:	42bc      	cmp	r4, r7
 8002d7c:	f845 2c04 	str.w	r2, [r5, #-4]
 8002d80:	f105 0504 	add.w	r5, r5, #4
 8002d84:	d1ec      	bne.n	8002d60 <st_sssa8_ch_fully_connected+0x40>
 8002d86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8002d88:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8002d8a:	f8cd e000 	str.w	lr, [sp]
 8002d8e:	0852      	lsrs	r2, r2, #1
 8002d90:	fa1f f38e 	uxth.w	r3, lr
 8002d94:	4614      	mov	r4, r2
 8002d96:	eba7 0508 	sub.w	r5, r7, r8
 8002d9a:	9215      	str	r2, [sp, #84]	@ 0x54
 8002d9c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8002da0:	465a      	mov	r2, fp
 8002da2:	4631      	mov	r1, r6
 8002da4:	9513      	str	r5, [sp, #76]	@ 0x4c
 8002da6:	f000 faf5 	bl	8003394 <st_int8_reordered_no_shift_zero>
 8002daa:	2c00      	cmp	r4, #0
 8002dac:	f000 8178 	beq.w	80030a0 <st_sssa8_ch_fully_connected+0x380>
 8002db0:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8002db2:	1e62      	subs	r2, r4, #1
 8002db4:	b292      	uxth	r2, r2
 8002db6:	f100 0110 	add.w	r1, r0, #16
 8002dba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002dbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8002dc0:	f1ab 0203 	sub.w	r2, fp, #3
 8002dc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	3208      	adds	r2, #8
 8002dca:	9208      	str	r2, [sp, #32]
 8002dcc:	1d2a      	adds	r2, r5, #4
 8002dce:	9207      	str	r2, [sp, #28]
 8002dd0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8002dd2:	3202      	adds	r2, #2
 8002dd4:	9204      	str	r2, [sp, #16]
 8002dd6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002dd8:	3204      	adds	r2, #4
 8002dda:	f1ab 0310 	sub.w	r3, fp, #16
 8002dde:	9205      	str	r2, [sp, #20]
 8002de0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	3301      	adds	r3, #1
 8002de6:	3204      	adds	r2, #4
 8002de8:	9206      	str	r2, [sp, #24]
 8002dea:	011a      	lsls	r2, r3, #4
 8002dec:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8002df0:	9310      	str	r3, [sp, #64]	@ 0x40
 8002df2:	f1ab 0304 	sub.w	r3, fp, #4
 8002df6:	9209      	str	r2, [sp, #36]	@ 0x24
 8002df8:	9311      	str	r3, [sp, #68]	@ 0x44
 8002dfa:	46d9      	mov	r9, fp
 8002dfc:	9a08      	ldr	r2, [sp, #32]
 8002dfe:	f1b9 0f0f 	cmp.w	r9, #15
 8002e02:	e952 3102 	ldrd	r3, r1, [r2, #-8]
 8002e06:	eb0a 0b09 	add.w	fp, sl, r9
 8002e0a:	f340 81ef 	ble.w	80031ec <st_sssa8_ch_fully_connected+0x4cc>
 8002e0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e10:	eb0a 0502 	add.w	r5, sl, r2
 8002e14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002e16:	465c      	mov	r4, fp
 8002e18:	f8da 7000 	ldr.w	r7, [sl]
 8002e1c:	6820      	ldr	r0, [r4, #0]
 8002e1e:	fa2f fe87 	sxtb16	lr, r7
 8002e22:	ea4f 2637 	mov.w	r6, r7, ror #8
 8002e26:	fa2f fc80 	sxtb16	ip, r0
 8002e2a:	ea4f 2730 	mov.w	r7, r0, ror #8
 8002e2e:	fa2f f686 	sxtb16	r6, r6
 8002e32:	6810      	ldr	r0, [r2, #0]
 8002e34:	fa2f f787 	sxtb16	r7, r7
 8002e38:	fb20 330e 	smlad	r3, r0, lr, r3
 8002e3c:	fb20 100c 	smlad	r0, r0, ip, r1
 8002e40:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8002e44:	fb2e 3606 	smlad	r6, lr, r6, r3
 8002e48:	fb2e 0e07 	smlad	lr, lr, r7, r0
 8002e4c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002e50:	6861      	ldr	r1, [r4, #4]
 8002e52:	6890      	ldr	r0, [r2, #8]
 8002e54:	ea4f 2733 	mov.w	r7, r3, ror #8
 8002e58:	ea4f 2c31 	mov.w	ip, r1, ror #8
 8002e5c:	fa2f f383 	sxtb16	r3, r3
 8002e60:	fa2f f787 	sxtb16	r7, r7
 8002e64:	fa2f f181 	sxtb16	r1, r1
 8002e68:	fa2f fc8c 	sxtb16	ip, ip
 8002e6c:	fb20 6303 	smlad	r3, r0, r3, r6
 8002e70:	fb20 e001 	smlad	r0, r0, r1, lr
 8002e74:	68d1      	ldr	r1, [r2, #12]
 8002e76:	fb21 3707 	smlad	r7, r1, r7, r3
 8002e7a:	fb21 000c 	smlad	r0, r1, ip, r0
 8002e7e:	68a3      	ldr	r3, [r4, #8]
 8002e80:	f8da 1008 	ldr.w	r1, [sl, #8]
 8002e84:	fa2f fe83 	sxtb16	lr, r3
 8002e88:	ea4f 2631 	mov.w	r6, r1, ror #8
 8002e8c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8002e90:	fa2f f181 	sxtb16	r1, r1
 8002e94:	6913      	ldr	r3, [r2, #16]
 8002e96:	fa2f f686 	sxtb16	r6, r6
 8002e9a:	fa2f fc8c 	sxtb16	ip, ip
 8002e9e:	fb23 7101 	smlad	r1, r3, r1, r7
 8002ea2:	fb23 030e 	smlad	r3, r3, lr, r0
 8002ea6:	6950      	ldr	r0, [r2, #20]
 8002ea8:	fb20 1606 	smlad	r6, r0, r6, r1
 8002eac:	fb20 310c 	smlad	r1, r0, ip, r3
 8002eb0:	68e0      	ldr	r0, [r4, #12]
 8002eb2:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002eb6:	fa2f fe80 	sxtb16	lr, r0
 8002eba:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8002ebe:	ea4f 2730 	mov.w	r7, r0, ror #8
 8002ec2:	f10a 0a10 	add.w	sl, sl, #16
 8002ec6:	6990      	ldr	r0, [r2, #24]
 8002ec8:	fa2f f383 	sxtb16	r3, r3
 8002ecc:	3410      	adds	r4, #16
 8002ece:	fa2f fc8c 	sxtb16	ip, ip
 8002ed2:	fa2f f787 	sxtb16	r7, r7
 8002ed6:	fb20 6303 	smlad	r3, r0, r3, r6
 8002eda:	fb20 100e 	smlad	r0, r0, lr, r1
 8002ede:	69d1      	ldr	r1, [r2, #28]
 8002ee0:	3220      	adds	r2, #32
 8002ee2:	fb21 330c 	smlad	r3, r1, ip, r3
 8002ee6:	fb21 0107 	smlad	r1, r1, r7, r0
 8002eea:	4555      	cmp	r5, sl
 8002eec:	d194      	bne.n	8002e18 <st_sssa8_ch_fully_connected+0xf8>
 8002eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ef0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8002ef2:	9003      	str	r0, [sp, #12]
 8002ef4:	4493      	add	fp, r2
 8002ef6:	4690      	mov	r8, r2
 8002ef8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8002efa:	4542      	cmp	r2, r8
 8002efc:	f340 8174 	ble.w	80031e8 <st_sssa8_ch_fully_connected+0x4c8>
 8002f00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002f02:	9d03      	ldr	r5, [sp, #12]
 8002f04:	eba2 0208 	sub.w	r2, r2, r8
 8002f08:	0892      	lsrs	r2, r2, #2
 8002f0a:	920c      	str	r2, [sp, #48]	@ 0x30
 8002f0c:	3201      	adds	r2, #1
 8002f0e:	0090      	lsls	r0, r2, #2
 8002f10:	920b      	str	r2, [sp, #44]	@ 0x2c
 8002f12:	900a      	str	r0, [sp, #40]	@ 0x28
 8002f14:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 8002f18:	46dc      	mov	ip, fp
 8002f1a:	f85a 7b04 	ldr.w	r7, [sl], #4
 8002f1e:	f85c 0b04 	ldr.w	r0, [ip], #4
 8002f22:	682a      	ldr	r2, [r5, #0]
 8002f24:	ea4f 2637 	mov.w	r6, r7, ror #8
 8002f28:	ea4f 2430 	mov.w	r4, r0, ror #8
 8002f2c:	fa2f f787 	sxtb16	r7, r7
 8002f30:	fa2f f686 	sxtb16	r6, r6
 8002f34:	fa2f f080 	sxtb16	r0, r0
 8002f38:	fa2f f484 	sxtb16	r4, r4
 8002f3c:	fb22 3307 	smlad	r3, r2, r7, r3
 8002f40:	fb22 1200 	smlad	r2, r2, r0, r1
 8002f44:	6869      	ldr	r1, [r5, #4]
 8002f46:	3508      	adds	r5, #8
 8002f48:	fb21 3306 	smlad	r3, r1, r6, r3
 8002f4c:	fb21 2104 	smlad	r1, r1, r4, r2
 8002f50:	45d6      	cmp	lr, sl
 8002f52:	d1e2      	bne.n	8002f1a <st_sssa8_ch_fully_connected+0x1fa>
 8002f54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f56:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002f58:	4493      	add	fp, r2
 8002f5a:	9a03      	ldr	r2, [sp, #12]
 8002f5c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002f60:	9203      	str	r2, [sp, #12]
 8002f62:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8002f64:	f108 0804 	add.w	r8, r8, #4
 8002f68:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8002f6c:	45c1      	cmp	r9, r8
 8002f6e:	dd37      	ble.n	8002fe0 <st_sssa8_ch_fully_connected+0x2c0>
 8002f70:	9c03      	ldr	r4, [sp, #12]
 8002f72:	f99e 0000 	ldrsb.w	r0, [lr]
 8002f76:	f9b4 2000 	ldrsh.w	r2, [r4]
 8002f7a:	fb12 3300 	smlabb	r3, r2, r0, r3
 8002f7e:	f99b 0000 	ldrsb.w	r0, [fp]
 8002f82:	fb12 1100 	smlabb	r1, r2, r0, r1
 8002f86:	f108 0201 	add.w	r2, r8, #1
 8002f8a:	454a      	cmp	r2, r9
 8002f8c:	da25      	bge.n	8002fda <st_sssa8_ch_fully_connected+0x2ba>
 8002f8e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8002f92:	f99e 0001 	ldrsb.w	r0, [lr, #1]
 8002f96:	fb12 3300 	smlabb	r3, r2, r0, r3
 8002f9a:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 8002f9e:	fb12 1100 	smlabb	r1, r2, r0, r1
 8002fa2:	f108 0202 	add.w	r2, r8, #2
 8002fa6:	4591      	cmp	r9, r2
 8002fa8:	dd17      	ble.n	8002fda <st_sssa8_ch_fully_connected+0x2ba>
 8002faa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8002fae:	f99e 0002 	ldrsb.w	r0, [lr, #2]
 8002fb2:	fb12 3300 	smlabb	r3, r2, r0, r3
 8002fb6:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 8002fba:	fb12 1100 	smlabb	r1, r2, r0, r1
 8002fbe:	f108 0203 	add.w	r2, r8, #3
 8002fc2:	4591      	cmp	r9, r2
 8002fc4:	dd09      	ble.n	8002fda <st_sssa8_ch_fully_connected+0x2ba>
 8002fc6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8002fca:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 8002fce:	fb12 1100 	smlabb	r1, r2, r0, r1
 8002fd2:	f99e 0003 	ldrsb.w	r0, [lr, #3]
 8002fd6:	fb12 3300 	smlabb	r3, r2, r0, r3
 8002fda:	eba9 0808 	sub.w	r8, r9, r8
 8002fde:	44c6      	add	lr, r8
 8002fe0:	9e07      	ldr	r6, [sp, #28]
 8002fe2:	f936 0c04 	ldrsh.w	r0, [r6, #-4]
 8002fe6:	2815      	cmp	r0, #21
 8002fe8:	f340 80c2 	ble.w	8003170 <st_sssa8_ch_fully_connected+0x450>
 8002fec:	9a06      	ldr	r2, [sp, #24]
 8002fee:	1e84      	subs	r4, r0, #2
 8002ff0:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	fa02 f404 	lsl.w	r4, r2, r4
 8002ffa:	9a05      	ldr	r2, [sp, #20]
 8002ffc:	3801      	subs	r0, #1
 8002ffe:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8003002:	fb53 4202 	smmla	r2, r3, r2, r4
 8003006:	fa42 f300 	asr.w	r3, r2, r0
 800300a:	442b      	add	r3, r5
 800300c:	1eb5      	subs	r5, r6, #2
 800300e:	f303 0307 	ssat	r3, #8, r3
 8003012:	9a04      	ldr	r2, [sp, #16]
 8003014:	b25b      	sxtb	r3, r3
 8003016:	1e50      	subs	r0, r2, #1
 8003018:	f802 3c02 	strb.w	r3, [r2, #-2]
 800301c:	f9b5 4000 	ldrsh.w	r4, [r5]
 8003020:	2c15      	cmp	r4, #21
 8003022:	f340 8097 	ble.w	8003154 <st_sssa8_ch_fully_connected+0x434>
 8003026:	9b06      	ldr	r3, [sp, #24]
 8003028:	1ea2      	subs	r2, r4, #2
 800302a:	681d      	ldr	r5, [r3, #0]
 800302c:	2301      	movs	r3, #1
 800302e:	fa03 f202 	lsl.w	r2, r3, r2
 8003032:	9b05      	ldr	r3, [sp, #20]
 8003034:	3c01      	subs	r4, #1
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	fb51 2103 	smmla	r1, r1, r3, r2
 800303c:	fa41 f304 	asr.w	r3, r1, r4
 8003040:	442b      	add	r3, r5
 8003042:	f303 0307 	ssat	r3, #8, r3
 8003046:	b25b      	sxtb	r3, r3
 8003048:	9a07      	ldr	r2, [sp, #28]
 800304a:	7003      	strb	r3, [r0, #0]
 800304c:	3204      	adds	r2, #4
 800304e:	9207      	str	r2, [sp, #28]
 8003050:	9a04      	ldr	r2, [sp, #16]
 8003052:	9b08      	ldr	r3, [sp, #32]
 8003054:	3202      	adds	r2, #2
 8003056:	9204      	str	r2, [sp, #16]
 8003058:	9a05      	ldr	r2, [sp, #20]
 800305a:	3208      	adds	r2, #8
 800305c:	9205      	str	r2, [sp, #20]
 800305e:	9a06      	ldr	r2, [sp, #24]
 8003060:	3208      	adds	r2, #8
 8003062:	9206      	str	r2, [sp, #24]
 8003064:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003066:	3308      	adds	r3, #8
 8003068:	429a      	cmp	r2, r3
 800306a:	9308      	str	r3, [sp, #32]
 800306c:	eb0e 0a09 	add.w	sl, lr, r9
 8003070:	f47f aec4 	bne.w	8002dfc <st_sssa8_ch_fully_connected+0xdc>
 8003074:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003076:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003078:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800307c:	9220      	str	r2, [sp, #128]	@ 0x80
 800307e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003080:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003084:	9213      	str	r2, [sp, #76]	@ 0x4c
 8003086:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003088:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800308c:	9224      	str	r2, [sp, #144]	@ 0x90
 800308e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8003090:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003094:	9225      	str	r2, [sp, #148]	@ 0x94
 8003096:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003098:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800309c:	46cb      	mov	fp, r9
 800309e:	9312      	str	r3, [sp, #72]	@ 0x48
 80030a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80030a2:	07db      	lsls	r3, r3, #31
 80030a4:	d54a      	bpl.n	800313c <st_sssa8_ch_fully_connected+0x41c>
 80030a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80030a8:	ea5f 079b 	movs.w	r7, fp, lsr #2
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f000 80c8 	beq.w	8003242 <st_sssa8_ch_fully_connected+0x522>
 80030b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80030b4:	eb0a 0687 	add.w	r6, sl, r7, lsl #2
 80030b8:	f85a 2b04 	ldr.w	r2, [sl], #4
 80030bc:	6805      	ldr	r5, [r0, #0]
 80030be:	6844      	ldr	r4, [r0, #4]
 80030c0:	ea4f 2132 	mov.w	r1, r2, ror #8
 80030c4:	3008      	adds	r0, #8
 80030c6:	fa2f f282 	sxtb16	r2, r2
 80030ca:	fa2f f181 	sxtb16	r1, r1
 80030ce:	fb25 3302 	smlad	r3, r5, r2, r3
 80030d2:	fb24 3301 	smlad	r3, r4, r1, r3
 80030d6:	45b2      	cmp	sl, r6
 80030d8:	d1ee      	bne.n	80030b8 <st_sssa8_ch_fully_connected+0x398>
 80030da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80030dc:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 80030e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80030e2:	f01b 0203 	ands.w	r2, fp, #3
 80030e6:	d014      	beq.n	8003112 <st_sssa8_ch_fully_connected+0x3f2>
 80030e8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80030ea:	f996 1000 	ldrsb.w	r1, [r6]
 80030ee:	8820      	ldrh	r0, [r4, #0]
 80030f0:	3a01      	subs	r2, #1
 80030f2:	b292      	uxth	r2, r2
 80030f4:	fb10 3301 	smlabb	r3, r0, r1, r3
 80030f8:	b15a      	cbz	r2, 8003112 <st_sssa8_ch_fully_connected+0x3f2>
 80030fa:	f996 1001 	ldrsb.w	r1, [r6, #1]
 80030fe:	8860      	ldrh	r0, [r4, #2]
 8003100:	2a01      	cmp	r2, #1
 8003102:	fb10 3301 	smlabb	r3, r0, r1, r3
 8003106:	d004      	beq.n	8003112 <st_sssa8_ch_fully_connected+0x3f2>
 8003108:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800310c:	88a1      	ldrh	r1, [r4, #4]
 800310e:	fb11 3302 	smlabb	r3, r1, r2, r3
 8003112:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003114:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003118:	2a15      	cmp	r2, #21
 800311a:	dd6c      	ble.n	80031f6 <st_sssa8_ch_fully_connected+0x4d6>
 800311c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800311e:	680c      	ldr	r4, [r1, #0]
 8003120:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8003122:	1e95      	subs	r5, r2, #2
 8003124:	2001      	movs	r0, #1
 8003126:	3a01      	subs	r2, #1
 8003128:	6809      	ldr	r1, [r1, #0]
 800312a:	40a8      	lsls	r0, r5
 800312c:	fb53 0301 	smmla	r3, r3, r1, r0
 8003130:	4113      	asrs	r3, r2
 8003132:	4423      	add	r3, r4
 8003134:	f303 0307 	ssat	r3, #8, r3
 8003138:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800313a:	7013      	strb	r3, [r2, #0]
 800313c:	2000      	movs	r0, #0
 800313e:	b017      	add	sp, #92	@ 0x5c
 8003140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003144:	42bc      	cmp	r4, r7
 8003146:	f845 3c04 	str.w	r3, [r5, #-4]
 800314a:	f105 0504 	add.w	r5, r5, #4
 800314e:	f47f ae07 	bne.w	8002d60 <st_sssa8_ch_fully_connected+0x40>
 8003152:	e618      	b.n	8002d86 <st_sssa8_ch_fully_connected+0x66>
 8003154:	2c00      	cmp	r4, #0
 8003156:	dd1f      	ble.n	8003198 <st_sssa8_ch_fully_connected+0x478>
 8003158:	9b05      	ldr	r3, [sp, #20]
 800315a:	9a06      	ldr	r2, [sp, #24]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	0049      	lsls	r1, r1, #1
 8003162:	fb51 2103 	smmla	r1, r1, r3, r2
 8003166:	4121      	asrs	r1, r4
 8003168:	f301 0307 	ssat	r3, #8, r1
 800316c:	b25b      	sxtb	r3, r3
 800316e:	e76b      	b.n	8003048 <st_sssa8_ch_fully_connected+0x328>
 8003170:	2800      	cmp	r0, #0
 8003172:	dd22      	ble.n	80031ba <st_sssa8_ch_fully_connected+0x49a>
 8003174:	005c      	lsls	r4, r3, #1
 8003176:	9a06      	ldr	r2, [sp, #24]
 8003178:	9b05      	ldr	r3, [sp, #20]
 800317a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800317e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8003182:	fb54 2303 	smmla	r3, r4, r3, r2
 8003186:	9a07      	ldr	r2, [sp, #28]
 8003188:	4103      	asrs	r3, r0
 800318a:	1e95      	subs	r5, r2, #2
 800318c:	f303 0307 	ssat	r3, #8, r3
 8003190:	9a04      	ldr	r2, [sp, #16]
 8003192:	b25b      	sxtb	r3, r3
 8003194:	1e50      	subs	r0, r2, #1
 8003196:	e73f      	b.n	8003018 <st_sssa8_ch_fully_connected+0x2f8>
 8003198:	f1c4 0401 	rsb	r4, r4, #1
 800319c:	fa01 f204 	lsl.w	r2, r1, r4
 80031a0:	f302 021f 	ssat	r2, #32, r2
 80031a4:	9b05      	ldr	r3, [sp, #20]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fb52 f213 	smmulr	r2, r2, r3
 80031ac:	9b06      	ldr	r3, [sp, #24]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4413      	add	r3, r2
 80031b2:	f303 0307 	ssat	r3, #8, r3
 80031b6:	b25b      	sxtb	r3, r3
 80031b8:	e746      	b.n	8003048 <st_sssa8_ch_fully_connected+0x328>
 80031ba:	f1c0 0201 	rsb	r2, r0, #1
 80031be:	fa03 f202 	lsl.w	r2, r3, r2
 80031c2:	9b07      	ldr	r3, [sp, #28]
 80031c4:	1e9d      	subs	r5, r3, #2
 80031c6:	f302 021f 	ssat	r2, #32, r2
 80031ca:	9b05      	ldr	r3, [sp, #20]
 80031cc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80031d0:	fb52 f313 	smmulr	r3, r2, r3
 80031d4:	9a06      	ldr	r2, [sp, #24]
 80031d6:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80031da:	4413      	add	r3, r2
 80031dc:	f303 0307 	ssat	r3, #8, r3
 80031e0:	9a04      	ldr	r2, [sp, #16]
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	1e50      	subs	r0, r2, #1
 80031e6:	e717      	b.n	8003018 <st_sssa8_ch_fully_connected+0x2f8>
 80031e8:	46d6      	mov	lr, sl
 80031ea:	e6bf      	b.n	8002f6c <st_sssa8_ch_fully_connected+0x24c>
 80031ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80031ee:	9203      	str	r2, [sp, #12]
 80031f0:	f04f 0800 	mov.w	r8, #0
 80031f4:	e680      	b.n	8002ef8 <st_sssa8_ch_fully_connected+0x1d8>
 80031f6:	2a00      	cmp	r2, #0
 80031f8:	dd0f      	ble.n	800321a <st_sssa8_ch_fully_connected+0x4fa>
 80031fa:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80031fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80031fe:	6809      	ldr	r1, [r1, #0]
 8003200:	6800      	ldr	r0, [r0, #0]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fb53 0301 	smmla	r3, r3, r1, r0
 8003208:	4113      	asrs	r3, r2
 800320a:	f303 0307 	ssat	r3, #8, r3
 800320e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8003210:	2000      	movs	r0, #0
 8003212:	7013      	strb	r3, [r2, #0]
 8003214:	b017      	add	sp, #92	@ 0x5c
 8003216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800321a:	f1c2 0201 	rsb	r2, r2, #1
 800321e:	4093      	lsls	r3, r2
 8003220:	f303 031f 	ssat	r3, #32, r3
 8003224:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	fb53 f312 	smmulr	r3, r3, r2
 800322c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	4413      	add	r3, r2
 8003232:	f303 0307 	ssat	r3, #8, r3
 8003236:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8003238:	2000      	movs	r0, #0
 800323a:	7013      	strb	r3, [r2, #0]
 800323c:	b017      	add	sp, #92	@ 0x5c
 800323e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003242:	4656      	mov	r6, sl
 8003244:	e74d      	b.n	80030e2 <st_sssa8_ch_fully_connected+0x3c2>
 8003246:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 800324a:	9212      	str	r2, [sp, #72]	@ 0x48
 800324c:	e59b      	b.n	8002d86 <st_sssa8_ch_fully_connected+0x66>
 800324e:	bf00      	nop

08003250 <st_int8_copy>:
 8003250:	4288      	cmp	r0, r1
 8003252:	d022      	beq.n	800329a <st_int8_copy+0x4a>
 8003254:	b30a      	cbz	r2, 800329a <st_int8_copy+0x4a>
 8003256:	4288      	cmp	r0, r1
 8003258:	d312      	bcc.n	8003280 <st_int8_copy+0x30>
 800325a:	2a03      	cmp	r2, #3
 800325c:	d81e      	bhi.n	800329c <st_int8_copy+0x4c>
 800325e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003262:	f801 3b01 	strb.w	r3, [r1], #1
 8003266:	2a01      	cmp	r2, #1
 8003268:	d017      	beq.n	800329a <st_int8_copy+0x4a>
 800326a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800326e:	f801 3b01 	strb.w	r3, [r1], #1
 8003272:	2a02      	cmp	r2, #2
 8003274:	d011      	beq.n	800329a <st_int8_copy+0x4a>
 8003276:	f810 3b01 	ldrb.w	r3, [r0], #1
 800327a:	f801 3b01 	strb.w	r3, [r1], #1
 800327e:	4770      	bx	lr
 8003280:	1883      	adds	r3, r0, r2
 8003282:	4299      	cmp	r1, r3
 8003284:	d2e9      	bcs.n	800325a <st_int8_copy+0xa>
 8003286:	4298      	cmp	r0, r3
 8003288:	440a      	add	r2, r1
 800328a:	d206      	bcs.n	800329a <st_int8_copy+0x4a>
 800328c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8003290:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8003294:	4298      	cmp	r0, r3
 8003296:	d1f9      	bne.n	800328c <st_int8_copy+0x3c>
 8003298:	4770      	bx	lr
 800329a:	4770      	bx	lr
 800329c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032a0:	f001 0403 	and.w	r4, r1, #3
 80032a4:	f1c4 0304 	rsb	r3, r4, #4
 80032a8:	f000 0e03 	and.w	lr, r0, #3
 80032ac:	eba2 0c03 	sub.w	ip, r2, r3
 80032b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80032b4:	f801 3b01 	strb.w	r3, [r1], #1
 80032b8:	2c03      	cmp	r4, #3
 80032ba:	f1c4 0202 	rsb	r2, r4, #2
 80032be:	d00e      	beq.n	80032de <st_int8_copy+0x8e>
 80032c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80032c4:	f801 3b01 	strb.w	r3, [r1], #1
 80032c8:	2a00      	cmp	r2, #0
 80032ca:	dd08      	ble.n	80032de <st_int8_copy+0x8e>
 80032cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80032d0:	f801 3b01 	strb.w	r3, [r1], #1
 80032d4:	b91c      	cbnz	r4, 80032de <st_int8_copy+0x8e>
 80032d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80032da:	f801 3b01 	strb.w	r3, [r1], #1
 80032de:	4574      	cmp	r4, lr
 80032e0:	d02b      	beq.n	800333a <st_int8_copy+0xea>
 80032e2:	ea4f 131c 	mov.w	r3, ip, lsr #4
 80032e6:	1e5a      	subs	r2, r3, #1
 80032e8:	b153      	cbz	r3, 8003300 <st_int8_copy+0xb0>
 80032ea:	f850 3b04 	ldr.w	r3, [r0], #4
 80032ee:	f850 4b04 	ldr.w	r4, [r0], #4
 80032f2:	f850 5b04 	ldr.w	r5, [r0], #4
 80032f6:	f850 6b04 	ldr.w	r6, [r0], #4
 80032fa:	c178      	stmia	r1!, {r3, r4, r5, r6}
 80032fc:	3a01      	subs	r2, #1
 80032fe:	d2f4      	bcs.n	80032ea <st_int8_copy+0x9a>
 8003300:	f01c 0f08 	tst.w	ip, #8
 8003304:	d004      	beq.n	8003310 <st_int8_copy+0xc0>
 8003306:	f850 3b04 	ldr.w	r3, [r0], #4
 800330a:	f850 4b04 	ldr.w	r4, [r0], #4
 800330e:	c118      	stmia	r1!, {r3, r4}
 8003310:	f01c 0f04 	tst.w	ip, #4
 8003314:	d003      	beq.n	800331e <st_int8_copy+0xce>
 8003316:	f850 3b04 	ldr.w	r3, [r0], #4
 800331a:	f841 3b04 	str.w	r3, [r1], #4
 800331e:	f01c 0f02 	tst.w	ip, #2
 8003322:	d003      	beq.n	800332c <st_int8_copy+0xdc>
 8003324:	f830 3b02 	ldrh.w	r3, [r0], #2
 8003328:	f821 3b02 	strh.w	r3, [r1], #2
 800332c:	f01c 0f01 	tst.w	ip, #1
 8003330:	d001      	beq.n	8003336 <st_int8_copy+0xe6>
 8003332:	7803      	ldrb	r3, [r0, #0]
 8003334:	700b      	strb	r3, [r1, #0]
 8003336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800333a:	ea4f 139c 	mov.w	r3, ip, lsr #6
 800333e:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 8003342:	b183      	cbz	r3, 8003366 <st_int8_copy+0x116>
 8003344:	4688      	mov	r8, r1
 8003346:	4686      	mov	lr, r0
 8003348:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800334c:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003350:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003354:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003358:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800335c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8003360:	4641      	mov	r1, r8
 8003362:	4670      	mov	r0, lr
 8003364:	d1ee      	bne.n	8003344 <st_int8_copy+0xf4>
 8003366:	f01c 0f20 	tst.w	ip, #32
 800336a:	d007      	beq.n	800337c <st_int8_copy+0x12c>
 800336c:	4688      	mov	r8, r1
 800336e:	4686      	mov	lr, r0
 8003370:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003374:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003378:	4641      	mov	r1, r8
 800337a:	4670      	mov	r0, lr
 800337c:	f01c 0f10 	tst.w	ip, #16
 8003380:	d001      	beq.n	8003386 <st_int8_copy+0x136>
 8003382:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8003384:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8003386:	f01c 0f08 	tst.w	ip, #8
 800338a:	d0c1      	beq.n	8003310 <st_int8_copy+0xc0>
 800338c:	c818      	ldmia	r0!, {r3, r4}
 800338e:	c118      	stmia	r1!, {r3, r4}
 8003390:	e7be      	b.n	8003310 <st_int8_copy+0xc0>
 8003392:	bf00      	nop

08003394 <st_int8_reordered_no_shift_zero>:
 8003394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003396:	0897      	lsrs	r7, r2, #2
 8003398:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800339c:	d02c      	beq.n	80033f8 <st_int8_reordered_no_shift_zero+0x64>
 800339e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 80033a2:	468e      	mov	lr, r1
 80033a4:	f850 cb04 	ldr.w	ip, [r0], #4
 80033a8:	fa2f f49c 	sxtb16	r4, ip, ror #8
 80033ac:	fad4 f403 	ssub16	r4, r4, r3
 80033b0:	fa2f fc8c 	sxtb16	ip, ip
 80033b4:	fadc fc03 	ssub16	ip, ip, r3
 80033b8:	42a8      	cmp	r0, r5
 80033ba:	f8ce c000 	str.w	ip, [lr]
 80033be:	f8ce 4004 	str.w	r4, [lr, #4]
 80033c2:	f10e 0e08 	add.w	lr, lr, #8
 80033c6:	d1ed      	bne.n	80033a4 <st_int8_reordered_no_shift_zero+0x10>
 80033c8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80033cc:	f012 0203 	ands.w	r2, r2, #3
 80033d0:	d011      	beq.n	80033f6 <st_int8_reordered_no_shift_zero+0x62>
 80033d2:	f995 0000 	ldrsb.w	r0, [r5]
 80033d6:	b273      	sxtb	r3, r6
 80033d8:	1ac0      	subs	r0, r0, r3
 80033da:	3a01      	subs	r2, #1
 80033dc:	8008      	strh	r0, [r1, #0]
 80033de:	d00a      	beq.n	80033f6 <st_int8_reordered_no_shift_zero+0x62>
 80033e0:	f995 0001 	ldrsb.w	r0, [r5, #1]
 80033e4:	2a01      	cmp	r2, #1
 80033e6:	eba0 0003 	sub.w	r0, r0, r3
 80033ea:	8048      	strh	r0, [r1, #2]
 80033ec:	d003      	beq.n	80033f6 <st_int8_reordered_no_shift_zero+0x62>
 80033ee:	f995 2002 	ldrsb.w	r2, [r5, #2]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	808b      	strh	r3, [r1, #4]
 80033f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033f8:	4605      	mov	r5, r0
 80033fa:	e7e7      	b.n	80033cc <st_int8_reordered_no_shift_zero+0x38>

080033fc <ai_array_to_buffer_fmt>:
 80033fc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8003400:	2b02      	cmp	r3, #2
 8003402:	d055      	beq.n	80034b0 <ai_array_to_buffer_fmt+0xb4>
 8003404:	4a2d      	ldr	r2, [pc, #180]	@ (80034bc <ai_array_to_buffer_fmt+0xc0>)
 8003406:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800340a:	4293      	cmp	r3, r2
 800340c:	d010      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 800340e:	dc21      	bgt.n	8003454 <ai_array_to_buffer_fmt+0x58>
 8003410:	4a2b      	ldr	r2, [pc, #172]	@ (80034c0 <ai_array_to_buffer_fmt+0xc4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00c      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 8003416:	dd0f      	ble.n	8003438 <ai_array_to_buffer_fmt+0x3c>
 8003418:	4a2a      	ldr	r2, [pc, #168]	@ (80034c4 <ai_array_to_buffer_fmt+0xc8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d008      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 800341e:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 8003426:	4a28      	ldr	r2, [pc, #160]	@ (80034c8 <ai_array_to_buffer_fmt+0xcc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	bf0c      	ite	eq
 800342c:	4613      	moveq	r3, r2
 800342e:	2340      	movne	r3, #64	@ 0x40
 8003430:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8003434:	4318      	orrs	r0, r3
 8003436:	4770      	bx	lr
 8003438:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800343c:	4293      	cmp	r3, r2
 800343e:	d0f7      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 8003440:	dd2c      	ble.n	800349c <ai_array_to_buffer_fmt+0xa0>
 8003442:	4a22      	ldr	r2, [pc, #136]	@ (80034cc <ai_array_to_buffer_fmt+0xd0>)
 8003444:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8003448:	4293      	cmp	r3, r2
 800344a:	bf0c      	ite	eq
 800344c:	4613      	moveq	r3, r2
 800344e:	2340      	movne	r3, #64	@ 0x40
 8003450:	4318      	orrs	r0, r3
 8003452:	4770      	bx	lr
 8003454:	4a1e      	ldr	r2, [pc, #120]	@ (80034d0 <ai_array_to_buffer_fmt+0xd4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d0ea      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 800345a:	dd10      	ble.n	800347e <ai_array_to_buffer_fmt+0x82>
 800345c:	4a1d      	ldr	r2, [pc, #116]	@ (80034d4 <ai_array_to_buffer_fmt+0xd8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d0e6      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 8003462:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8003466:	4293      	cmp	r3, r2
 8003468:	d0e2      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 800346a:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800346e:	4293      	cmp	r3, r2
 8003470:	bf0c      	ite	eq
 8003472:	4613      	moveq	r3, r2
 8003474:	2340      	movne	r3, #64	@ 0x40
 8003476:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800347a:	4318      	orrs	r0, r3
 800347c:	4770      	bx	lr
 800347e:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8003482:	4293      	cmp	r3, r2
 8003484:	d0d4      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 8003486:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800348a:	4293      	cmp	r3, r2
 800348c:	d0d0      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 800348e:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8003492:	4293      	cmp	r3, r2
 8003494:	bf0c      	ite	eq
 8003496:	4613      	moveq	r3, r2
 8003498:	2340      	movne	r3, #64	@ 0x40
 800349a:	e7c9      	b.n	8003430 <ai_array_to_buffer_fmt+0x34>
 800349c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d0c5      	beq.n	8003430 <ai_array_to_buffer_fmt+0x34>
 80034a4:	3280      	adds	r2, #128	@ 0x80
 80034a6:	4293      	cmp	r3, r2
 80034a8:	bf0c      	ite	eq
 80034aa:	4613      	moveq	r3, r2
 80034ac:	2340      	movne	r3, #64	@ 0x40
 80034ae:	e7bf      	b.n	8003430 <ai_array_to_buffer_fmt+0x34>
 80034b0:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <ai_array_to_buffer_fmt+0xdc>)
 80034b2:	4003      	ands	r3, r0
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b8:	e7ba      	b.n	8003430 <ai_array_to_buffer_fmt+0x34>
 80034ba:	bf00      	nop
 80034bc:	00821040 	.word	0x00821040
 80034c0:	00040840 	.word	0x00040840
 80034c4:	00041040 	.word	0x00041040
 80034c8:	0004084f 	.word	0x0004084f
 80034cc:	00040447 	.word	0x00040447
 80034d0:	00840447 	.word	0x00840447
 80034d4:	0084084f 	.word	0x0084084f
 80034d8:	00803fff 	.word	0x00803fff

080034dc <ai_array_get_data_byte_size>:
 80034dc:	b169      	cbz	r1, 80034fa <ai_array_get_data_byte_size+0x1e>
 80034de:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80034e2:	fb03 f101 	mul.w	r1, r3, r1
 80034e6:	1dcb      	adds	r3, r1, #7
 80034e8:	f023 0307 	bic.w	r3, r3, #7
 80034ec:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80034f0:	fa23 f000 	lsr.w	r0, r3, r0
 80034f4:	3007      	adds	r0, #7
 80034f6:	08c0      	lsrs	r0, r0, #3
 80034f8:	4770      	bx	lr
 80034fa:	4608      	mov	r0, r1
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop

08003500 <ai_version_get>:
 8003500:	0212      	lsls	r2, r2, #8
 8003502:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003506:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800350a:	4770      	bx	lr

0800350c <get_tensor_byte_size>:
 800350c:	b410      	push	{r4}
 800350e:	6983      	ldr	r3, [r0, #24]
 8003510:	68c4      	ldr	r4, [r0, #12]
 8003512:	6941      	ldr	r1, [r0, #20]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68e0      	ldr	r0, [r4, #12]
 8003518:	4a07      	ldr	r2, [pc, #28]	@ (8003538 <get_tensor_byte_size+0x2c>)
 800351a:	68c9      	ldr	r1, [r1, #12]
 800351c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003520:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8003524:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003528:	fb01 f000 	mul.w	r0, r1, r0
 800352c:	4293      	cmp	r3, r2
 800352e:	bf04      	itt	eq
 8003530:	3007      	addeq	r0, #7
 8003532:	08c0      	lsreq	r0, r0, #3
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	000400c0 	.word	0x000400c0

0800353c <sbrk_aligned>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	4e0f      	ldr	r6, [pc, #60]	@ (800357c <sbrk_aligned+0x40>)
 8003540:	460c      	mov	r4, r1
 8003542:	6831      	ldr	r1, [r6, #0]
 8003544:	4605      	mov	r5, r0
 8003546:	b911      	cbnz	r1, 800354e <sbrk_aligned+0x12>
 8003548:	f000 faec 	bl	8003b24 <_sbrk_r>
 800354c:	6030      	str	r0, [r6, #0]
 800354e:	4621      	mov	r1, r4
 8003550:	4628      	mov	r0, r5
 8003552:	f000 fae7 	bl	8003b24 <_sbrk_r>
 8003556:	1c43      	adds	r3, r0, #1
 8003558:	d103      	bne.n	8003562 <sbrk_aligned+0x26>
 800355a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800355e:	4620      	mov	r0, r4
 8003560:	bd70      	pop	{r4, r5, r6, pc}
 8003562:	1cc4      	adds	r4, r0, #3
 8003564:	f024 0403 	bic.w	r4, r4, #3
 8003568:	42a0      	cmp	r0, r4
 800356a:	d0f8      	beq.n	800355e <sbrk_aligned+0x22>
 800356c:	1a21      	subs	r1, r4, r0
 800356e:	4628      	mov	r0, r5
 8003570:	f000 fad8 	bl	8003b24 <_sbrk_r>
 8003574:	3001      	adds	r0, #1
 8003576:	d1f2      	bne.n	800355e <sbrk_aligned+0x22>
 8003578:	e7ef      	b.n	800355a <sbrk_aligned+0x1e>
 800357a:	bf00      	nop
 800357c:	200004cc 	.word	0x200004cc

08003580 <_malloc_r>:
 8003580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003584:	1ccd      	adds	r5, r1, #3
 8003586:	f025 0503 	bic.w	r5, r5, #3
 800358a:	3508      	adds	r5, #8
 800358c:	2d0c      	cmp	r5, #12
 800358e:	bf38      	it	cc
 8003590:	250c      	movcc	r5, #12
 8003592:	2d00      	cmp	r5, #0
 8003594:	4606      	mov	r6, r0
 8003596:	db01      	blt.n	800359c <_malloc_r+0x1c>
 8003598:	42a9      	cmp	r1, r5
 800359a:	d904      	bls.n	80035a6 <_malloc_r+0x26>
 800359c:	230c      	movs	r3, #12
 800359e:	6033      	str	r3, [r6, #0]
 80035a0:	2000      	movs	r0, #0
 80035a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800367c <_malloc_r+0xfc>
 80035aa:	f000 f869 	bl	8003680 <__malloc_lock>
 80035ae:	f8d8 3000 	ldr.w	r3, [r8]
 80035b2:	461c      	mov	r4, r3
 80035b4:	bb44      	cbnz	r4, 8003608 <_malloc_r+0x88>
 80035b6:	4629      	mov	r1, r5
 80035b8:	4630      	mov	r0, r6
 80035ba:	f7ff ffbf 	bl	800353c <sbrk_aligned>
 80035be:	1c43      	adds	r3, r0, #1
 80035c0:	4604      	mov	r4, r0
 80035c2:	d158      	bne.n	8003676 <_malloc_r+0xf6>
 80035c4:	f8d8 4000 	ldr.w	r4, [r8]
 80035c8:	4627      	mov	r7, r4
 80035ca:	2f00      	cmp	r7, #0
 80035cc:	d143      	bne.n	8003656 <_malloc_r+0xd6>
 80035ce:	2c00      	cmp	r4, #0
 80035d0:	d04b      	beq.n	800366a <_malloc_r+0xea>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	4639      	mov	r1, r7
 80035d6:	4630      	mov	r0, r6
 80035d8:	eb04 0903 	add.w	r9, r4, r3
 80035dc:	f000 faa2 	bl	8003b24 <_sbrk_r>
 80035e0:	4581      	cmp	r9, r0
 80035e2:	d142      	bne.n	800366a <_malloc_r+0xea>
 80035e4:	6821      	ldr	r1, [r4, #0]
 80035e6:	1a6d      	subs	r5, r5, r1
 80035e8:	4629      	mov	r1, r5
 80035ea:	4630      	mov	r0, r6
 80035ec:	f7ff ffa6 	bl	800353c <sbrk_aligned>
 80035f0:	3001      	adds	r0, #1
 80035f2:	d03a      	beq.n	800366a <_malloc_r+0xea>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	442b      	add	r3, r5
 80035f8:	6023      	str	r3, [r4, #0]
 80035fa:	f8d8 3000 	ldr.w	r3, [r8]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	bb62      	cbnz	r2, 800365c <_malloc_r+0xdc>
 8003602:	f8c8 7000 	str.w	r7, [r8]
 8003606:	e00f      	b.n	8003628 <_malloc_r+0xa8>
 8003608:	6822      	ldr	r2, [r4, #0]
 800360a:	1b52      	subs	r2, r2, r5
 800360c:	d420      	bmi.n	8003650 <_malloc_r+0xd0>
 800360e:	2a0b      	cmp	r2, #11
 8003610:	d917      	bls.n	8003642 <_malloc_r+0xc2>
 8003612:	1961      	adds	r1, r4, r5
 8003614:	42a3      	cmp	r3, r4
 8003616:	6025      	str	r5, [r4, #0]
 8003618:	bf18      	it	ne
 800361a:	6059      	strne	r1, [r3, #4]
 800361c:	6863      	ldr	r3, [r4, #4]
 800361e:	bf08      	it	eq
 8003620:	f8c8 1000 	streq.w	r1, [r8]
 8003624:	5162      	str	r2, [r4, r5]
 8003626:	604b      	str	r3, [r1, #4]
 8003628:	4630      	mov	r0, r6
 800362a:	f000 f82f 	bl	800368c <__malloc_unlock>
 800362e:	f104 000b 	add.w	r0, r4, #11
 8003632:	1d23      	adds	r3, r4, #4
 8003634:	f020 0007 	bic.w	r0, r0, #7
 8003638:	1ac2      	subs	r2, r0, r3
 800363a:	bf1c      	itt	ne
 800363c:	1a1b      	subne	r3, r3, r0
 800363e:	50a3      	strne	r3, [r4, r2]
 8003640:	e7af      	b.n	80035a2 <_malloc_r+0x22>
 8003642:	6862      	ldr	r2, [r4, #4]
 8003644:	42a3      	cmp	r3, r4
 8003646:	bf0c      	ite	eq
 8003648:	f8c8 2000 	streq.w	r2, [r8]
 800364c:	605a      	strne	r2, [r3, #4]
 800364e:	e7eb      	b.n	8003628 <_malloc_r+0xa8>
 8003650:	4623      	mov	r3, r4
 8003652:	6864      	ldr	r4, [r4, #4]
 8003654:	e7ae      	b.n	80035b4 <_malloc_r+0x34>
 8003656:	463c      	mov	r4, r7
 8003658:	687f      	ldr	r7, [r7, #4]
 800365a:	e7b6      	b.n	80035ca <_malloc_r+0x4a>
 800365c:	461a      	mov	r2, r3
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	42a3      	cmp	r3, r4
 8003662:	d1fb      	bne.n	800365c <_malloc_r+0xdc>
 8003664:	2300      	movs	r3, #0
 8003666:	6053      	str	r3, [r2, #4]
 8003668:	e7de      	b.n	8003628 <_malloc_r+0xa8>
 800366a:	230c      	movs	r3, #12
 800366c:	6033      	str	r3, [r6, #0]
 800366e:	4630      	mov	r0, r6
 8003670:	f000 f80c 	bl	800368c <__malloc_unlock>
 8003674:	e794      	b.n	80035a0 <_malloc_r+0x20>
 8003676:	6005      	str	r5, [r0, #0]
 8003678:	e7d6      	b.n	8003628 <_malloc_r+0xa8>
 800367a:	bf00      	nop
 800367c:	200004d0 	.word	0x200004d0

08003680 <__malloc_lock>:
 8003680:	4801      	ldr	r0, [pc, #4]	@ (8003688 <__malloc_lock+0x8>)
 8003682:	f000 ba9c 	b.w	8003bbe <__retarget_lock_acquire_recursive>
 8003686:	bf00      	nop
 8003688:	20000614 	.word	0x20000614

0800368c <__malloc_unlock>:
 800368c:	4801      	ldr	r0, [pc, #4]	@ (8003694 <__malloc_unlock+0x8>)
 800368e:	f000 ba97 	b.w	8003bc0 <__retarget_lock_release_recursive>
 8003692:	bf00      	nop
 8003694:	20000614 	.word	0x20000614

08003698 <std>:
 8003698:	2300      	movs	r3, #0
 800369a:	b510      	push	{r4, lr}
 800369c:	4604      	mov	r4, r0
 800369e:	e9c0 3300 	strd	r3, r3, [r0]
 80036a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036a6:	6083      	str	r3, [r0, #8]
 80036a8:	8181      	strh	r1, [r0, #12]
 80036aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80036ac:	81c2      	strh	r2, [r0, #14]
 80036ae:	6183      	str	r3, [r0, #24]
 80036b0:	4619      	mov	r1, r3
 80036b2:	2208      	movs	r2, #8
 80036b4:	305c      	adds	r0, #92	@ 0x5c
 80036b6:	f000 f9f9 	bl	8003aac <memset>
 80036ba:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <std+0x58>)
 80036bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80036be:	4b0d      	ldr	r3, [pc, #52]	@ (80036f4 <std+0x5c>)
 80036c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036c2:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <std+0x60>)
 80036c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <std+0x64>)
 80036c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80036ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <std+0x68>)
 80036cc:	6224      	str	r4, [r4, #32]
 80036ce:	429c      	cmp	r4, r3
 80036d0:	d006      	beq.n	80036e0 <std+0x48>
 80036d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80036d6:	4294      	cmp	r4, r2
 80036d8:	d002      	beq.n	80036e0 <std+0x48>
 80036da:	33d0      	adds	r3, #208	@ 0xd0
 80036dc:	429c      	cmp	r4, r3
 80036de:	d105      	bne.n	80036ec <std+0x54>
 80036e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e8:	f000 ba68 	b.w	8003bbc <__retarget_lock_init_recursive>
 80036ec:	bd10      	pop	{r4, pc}
 80036ee:	bf00      	nop
 80036f0:	080038fd 	.word	0x080038fd
 80036f4:	0800391f 	.word	0x0800391f
 80036f8:	08003957 	.word	0x08003957
 80036fc:	0800397b 	.word	0x0800397b
 8003700:	200004d4 	.word	0x200004d4

08003704 <stdio_exit_handler>:
 8003704:	4a02      	ldr	r2, [pc, #8]	@ (8003710 <stdio_exit_handler+0xc>)
 8003706:	4903      	ldr	r1, [pc, #12]	@ (8003714 <stdio_exit_handler+0x10>)
 8003708:	4803      	ldr	r0, [pc, #12]	@ (8003718 <stdio_exit_handler+0x14>)
 800370a:	f000 b869 	b.w	80037e0 <_fwalk_sglue>
 800370e:	bf00      	nop
 8003710:	20000320 	.word	0x20000320
 8003714:	080042fd 	.word	0x080042fd
 8003718:	20000330 	.word	0x20000330

0800371c <cleanup_stdio>:
 800371c:	6841      	ldr	r1, [r0, #4]
 800371e:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <cleanup_stdio+0x34>)
 8003720:	4299      	cmp	r1, r3
 8003722:	b510      	push	{r4, lr}
 8003724:	4604      	mov	r4, r0
 8003726:	d001      	beq.n	800372c <cleanup_stdio+0x10>
 8003728:	f000 fde8 	bl	80042fc <_fflush_r>
 800372c:	68a1      	ldr	r1, [r4, #8]
 800372e:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <cleanup_stdio+0x38>)
 8003730:	4299      	cmp	r1, r3
 8003732:	d002      	beq.n	800373a <cleanup_stdio+0x1e>
 8003734:	4620      	mov	r0, r4
 8003736:	f000 fde1 	bl	80042fc <_fflush_r>
 800373a:	68e1      	ldr	r1, [r4, #12]
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <cleanup_stdio+0x3c>)
 800373e:	4299      	cmp	r1, r3
 8003740:	d004      	beq.n	800374c <cleanup_stdio+0x30>
 8003742:	4620      	mov	r0, r4
 8003744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003748:	f000 bdd8 	b.w	80042fc <_fflush_r>
 800374c:	bd10      	pop	{r4, pc}
 800374e:	bf00      	nop
 8003750:	200004d4 	.word	0x200004d4
 8003754:	2000053c 	.word	0x2000053c
 8003758:	200005a4 	.word	0x200005a4

0800375c <global_stdio_init.part.0>:
 800375c:	b510      	push	{r4, lr}
 800375e:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <global_stdio_init.part.0+0x30>)
 8003760:	4c0b      	ldr	r4, [pc, #44]	@ (8003790 <global_stdio_init.part.0+0x34>)
 8003762:	4a0c      	ldr	r2, [pc, #48]	@ (8003794 <global_stdio_init.part.0+0x38>)
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	4620      	mov	r0, r4
 8003768:	2200      	movs	r2, #0
 800376a:	2104      	movs	r1, #4
 800376c:	f7ff ff94 	bl	8003698 <std>
 8003770:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003774:	2201      	movs	r2, #1
 8003776:	2109      	movs	r1, #9
 8003778:	f7ff ff8e 	bl	8003698 <std>
 800377c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003780:	2202      	movs	r2, #2
 8003782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003786:	2112      	movs	r1, #18
 8003788:	f7ff bf86 	b.w	8003698 <std>
 800378c:	2000060c 	.word	0x2000060c
 8003790:	200004d4 	.word	0x200004d4
 8003794:	08003705 	.word	0x08003705

08003798 <__sfp_lock_acquire>:
 8003798:	4801      	ldr	r0, [pc, #4]	@ (80037a0 <__sfp_lock_acquire+0x8>)
 800379a:	f000 ba10 	b.w	8003bbe <__retarget_lock_acquire_recursive>
 800379e:	bf00      	nop
 80037a0:	20000615 	.word	0x20000615

080037a4 <__sfp_lock_release>:
 80037a4:	4801      	ldr	r0, [pc, #4]	@ (80037ac <__sfp_lock_release+0x8>)
 80037a6:	f000 ba0b 	b.w	8003bc0 <__retarget_lock_release_recursive>
 80037aa:	bf00      	nop
 80037ac:	20000615 	.word	0x20000615

080037b0 <__sinit>:
 80037b0:	b510      	push	{r4, lr}
 80037b2:	4604      	mov	r4, r0
 80037b4:	f7ff fff0 	bl	8003798 <__sfp_lock_acquire>
 80037b8:	6a23      	ldr	r3, [r4, #32]
 80037ba:	b11b      	cbz	r3, 80037c4 <__sinit+0x14>
 80037bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c0:	f7ff bff0 	b.w	80037a4 <__sfp_lock_release>
 80037c4:	4b04      	ldr	r3, [pc, #16]	@ (80037d8 <__sinit+0x28>)
 80037c6:	6223      	str	r3, [r4, #32]
 80037c8:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <__sinit+0x2c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f5      	bne.n	80037bc <__sinit+0xc>
 80037d0:	f7ff ffc4 	bl	800375c <global_stdio_init.part.0>
 80037d4:	e7f2      	b.n	80037bc <__sinit+0xc>
 80037d6:	bf00      	nop
 80037d8:	0800371d 	.word	0x0800371d
 80037dc:	2000060c 	.word	0x2000060c

080037e0 <_fwalk_sglue>:
 80037e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e4:	4607      	mov	r7, r0
 80037e6:	4688      	mov	r8, r1
 80037e8:	4614      	mov	r4, r2
 80037ea:	2600      	movs	r6, #0
 80037ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037f0:	f1b9 0901 	subs.w	r9, r9, #1
 80037f4:	d505      	bpl.n	8003802 <_fwalk_sglue+0x22>
 80037f6:	6824      	ldr	r4, [r4, #0]
 80037f8:	2c00      	cmp	r4, #0
 80037fa:	d1f7      	bne.n	80037ec <_fwalk_sglue+0xc>
 80037fc:	4630      	mov	r0, r6
 80037fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003802:	89ab      	ldrh	r3, [r5, #12]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d907      	bls.n	8003818 <_fwalk_sglue+0x38>
 8003808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800380c:	3301      	adds	r3, #1
 800380e:	d003      	beq.n	8003818 <_fwalk_sglue+0x38>
 8003810:	4629      	mov	r1, r5
 8003812:	4638      	mov	r0, r7
 8003814:	47c0      	blx	r8
 8003816:	4306      	orrs	r6, r0
 8003818:	3568      	adds	r5, #104	@ 0x68
 800381a:	e7e9      	b.n	80037f0 <_fwalk_sglue+0x10>

0800381c <iprintf>:
 800381c:	b40f      	push	{r0, r1, r2, r3}
 800381e:	b507      	push	{r0, r1, r2, lr}
 8003820:	4906      	ldr	r1, [pc, #24]	@ (800383c <iprintf+0x20>)
 8003822:	ab04      	add	r3, sp, #16
 8003824:	6808      	ldr	r0, [r1, #0]
 8003826:	f853 2b04 	ldr.w	r2, [r3], #4
 800382a:	6881      	ldr	r1, [r0, #8]
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	f000 fa3d 	bl	8003cac <_vfiprintf_r>
 8003832:	b003      	add	sp, #12
 8003834:	f85d eb04 	ldr.w	lr, [sp], #4
 8003838:	b004      	add	sp, #16
 800383a:	4770      	bx	lr
 800383c:	2000032c 	.word	0x2000032c

08003840 <_puts_r>:
 8003840:	6a03      	ldr	r3, [r0, #32]
 8003842:	b570      	push	{r4, r5, r6, lr}
 8003844:	6884      	ldr	r4, [r0, #8]
 8003846:	4605      	mov	r5, r0
 8003848:	460e      	mov	r6, r1
 800384a:	b90b      	cbnz	r3, 8003850 <_puts_r+0x10>
 800384c:	f7ff ffb0 	bl	80037b0 <__sinit>
 8003850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003852:	07db      	lsls	r3, r3, #31
 8003854:	d405      	bmi.n	8003862 <_puts_r+0x22>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	0598      	lsls	r0, r3, #22
 800385a:	d402      	bmi.n	8003862 <_puts_r+0x22>
 800385c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800385e:	f000 f9ae 	bl	8003bbe <__retarget_lock_acquire_recursive>
 8003862:	89a3      	ldrh	r3, [r4, #12]
 8003864:	0719      	lsls	r1, r3, #28
 8003866:	d502      	bpl.n	800386e <_puts_r+0x2e>
 8003868:	6923      	ldr	r3, [r4, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d135      	bne.n	80038da <_puts_r+0x9a>
 800386e:	4621      	mov	r1, r4
 8003870:	4628      	mov	r0, r5
 8003872:	f000 f8c5 	bl	8003a00 <__swsetup_r>
 8003876:	b380      	cbz	r0, 80038da <_puts_r+0x9a>
 8003878:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800387c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800387e:	07da      	lsls	r2, r3, #31
 8003880:	d405      	bmi.n	800388e <_puts_r+0x4e>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	059b      	lsls	r3, r3, #22
 8003886:	d402      	bmi.n	800388e <_puts_r+0x4e>
 8003888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800388a:	f000 f999 	bl	8003bc0 <__retarget_lock_release_recursive>
 800388e:	4628      	mov	r0, r5
 8003890:	bd70      	pop	{r4, r5, r6, pc}
 8003892:	2b00      	cmp	r3, #0
 8003894:	da04      	bge.n	80038a0 <_puts_r+0x60>
 8003896:	69a2      	ldr	r2, [r4, #24]
 8003898:	429a      	cmp	r2, r3
 800389a:	dc17      	bgt.n	80038cc <_puts_r+0x8c>
 800389c:	290a      	cmp	r1, #10
 800389e:	d015      	beq.n	80038cc <_puts_r+0x8c>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	6022      	str	r2, [r4, #0]
 80038a6:	7019      	strb	r1, [r3, #0]
 80038a8:	68a3      	ldr	r3, [r4, #8]
 80038aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60a3      	str	r3, [r4, #8]
 80038b2:	2900      	cmp	r1, #0
 80038b4:	d1ed      	bne.n	8003892 <_puts_r+0x52>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	da11      	bge.n	80038de <_puts_r+0x9e>
 80038ba:	4622      	mov	r2, r4
 80038bc:	210a      	movs	r1, #10
 80038be:	4628      	mov	r0, r5
 80038c0:	f000 f85f 	bl	8003982 <__swbuf_r>
 80038c4:	3001      	adds	r0, #1
 80038c6:	d0d7      	beq.n	8003878 <_puts_r+0x38>
 80038c8:	250a      	movs	r5, #10
 80038ca:	e7d7      	b.n	800387c <_puts_r+0x3c>
 80038cc:	4622      	mov	r2, r4
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 f857 	bl	8003982 <__swbuf_r>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d1e7      	bne.n	80038a8 <_puts_r+0x68>
 80038d8:	e7ce      	b.n	8003878 <_puts_r+0x38>
 80038da:	3e01      	subs	r6, #1
 80038dc:	e7e4      	b.n	80038a8 <_puts_r+0x68>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	6022      	str	r2, [r4, #0]
 80038e4:	220a      	movs	r2, #10
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e7ee      	b.n	80038c8 <_puts_r+0x88>
	...

080038ec <puts>:
 80038ec:	4b02      	ldr	r3, [pc, #8]	@ (80038f8 <puts+0xc>)
 80038ee:	4601      	mov	r1, r0
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	f7ff bfa5 	b.w	8003840 <_puts_r>
 80038f6:	bf00      	nop
 80038f8:	2000032c 	.word	0x2000032c

080038fc <__sread>:
 80038fc:	b510      	push	{r4, lr}
 80038fe:	460c      	mov	r4, r1
 8003900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003904:	f000 f8fc 	bl	8003b00 <_read_r>
 8003908:	2800      	cmp	r0, #0
 800390a:	bfab      	itete	ge
 800390c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800390e:	89a3      	ldrhlt	r3, [r4, #12]
 8003910:	181b      	addge	r3, r3, r0
 8003912:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003916:	bfac      	ite	ge
 8003918:	6563      	strge	r3, [r4, #84]	@ 0x54
 800391a:	81a3      	strhlt	r3, [r4, #12]
 800391c:	bd10      	pop	{r4, pc}

0800391e <__swrite>:
 800391e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003922:	461f      	mov	r7, r3
 8003924:	898b      	ldrh	r3, [r1, #12]
 8003926:	05db      	lsls	r3, r3, #23
 8003928:	4605      	mov	r5, r0
 800392a:	460c      	mov	r4, r1
 800392c:	4616      	mov	r6, r2
 800392e:	d505      	bpl.n	800393c <__swrite+0x1e>
 8003930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003934:	2302      	movs	r3, #2
 8003936:	2200      	movs	r2, #0
 8003938:	f000 f8d0 	bl	8003adc <_lseek_r>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	4632      	mov	r2, r6
 800394a:	463b      	mov	r3, r7
 800394c:	4628      	mov	r0, r5
 800394e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003952:	f000 b8f7 	b.w	8003b44 <_write_r>

08003956 <__sseek>:
 8003956:	b510      	push	{r4, lr}
 8003958:	460c      	mov	r4, r1
 800395a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800395e:	f000 f8bd 	bl	8003adc <_lseek_r>
 8003962:	1c43      	adds	r3, r0, #1
 8003964:	89a3      	ldrh	r3, [r4, #12]
 8003966:	bf15      	itete	ne
 8003968:	6560      	strne	r0, [r4, #84]	@ 0x54
 800396a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800396e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003972:	81a3      	strheq	r3, [r4, #12]
 8003974:	bf18      	it	ne
 8003976:	81a3      	strhne	r3, [r4, #12]
 8003978:	bd10      	pop	{r4, pc}

0800397a <__sclose>:
 800397a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397e:	f000 b89d 	b.w	8003abc <_close_r>

08003982 <__swbuf_r>:
 8003982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003984:	460e      	mov	r6, r1
 8003986:	4614      	mov	r4, r2
 8003988:	4605      	mov	r5, r0
 800398a:	b118      	cbz	r0, 8003994 <__swbuf_r+0x12>
 800398c:	6a03      	ldr	r3, [r0, #32]
 800398e:	b90b      	cbnz	r3, 8003994 <__swbuf_r+0x12>
 8003990:	f7ff ff0e 	bl	80037b0 <__sinit>
 8003994:	69a3      	ldr	r3, [r4, #24]
 8003996:	60a3      	str	r3, [r4, #8]
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	071a      	lsls	r2, r3, #28
 800399c:	d501      	bpl.n	80039a2 <__swbuf_r+0x20>
 800399e:	6923      	ldr	r3, [r4, #16]
 80039a0:	b943      	cbnz	r3, 80039b4 <__swbuf_r+0x32>
 80039a2:	4621      	mov	r1, r4
 80039a4:	4628      	mov	r0, r5
 80039a6:	f000 f82b 	bl	8003a00 <__swsetup_r>
 80039aa:	b118      	cbz	r0, 80039b4 <__swbuf_r+0x32>
 80039ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80039b0:	4638      	mov	r0, r7
 80039b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	6922      	ldr	r2, [r4, #16]
 80039b8:	1a98      	subs	r0, r3, r2
 80039ba:	6963      	ldr	r3, [r4, #20]
 80039bc:	b2f6      	uxtb	r6, r6
 80039be:	4283      	cmp	r3, r0
 80039c0:	4637      	mov	r7, r6
 80039c2:	dc05      	bgt.n	80039d0 <__swbuf_r+0x4e>
 80039c4:	4621      	mov	r1, r4
 80039c6:	4628      	mov	r0, r5
 80039c8:	f000 fc98 	bl	80042fc <_fflush_r>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d1ed      	bne.n	80039ac <__swbuf_r+0x2a>
 80039d0:	68a3      	ldr	r3, [r4, #8]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	60a3      	str	r3, [r4, #8]
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	6022      	str	r2, [r4, #0]
 80039dc:	701e      	strb	r6, [r3, #0]
 80039de:	6962      	ldr	r2, [r4, #20]
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d004      	beq.n	80039f0 <__swbuf_r+0x6e>
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	07db      	lsls	r3, r3, #31
 80039ea:	d5e1      	bpl.n	80039b0 <__swbuf_r+0x2e>
 80039ec:	2e0a      	cmp	r6, #10
 80039ee:	d1df      	bne.n	80039b0 <__swbuf_r+0x2e>
 80039f0:	4621      	mov	r1, r4
 80039f2:	4628      	mov	r0, r5
 80039f4:	f000 fc82 	bl	80042fc <_fflush_r>
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d0d9      	beq.n	80039b0 <__swbuf_r+0x2e>
 80039fc:	e7d6      	b.n	80039ac <__swbuf_r+0x2a>
	...

08003a00 <__swsetup_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4b29      	ldr	r3, [pc, #164]	@ (8003aa8 <__swsetup_r+0xa8>)
 8003a04:	4605      	mov	r5, r0
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	460c      	mov	r4, r1
 8003a0a:	b118      	cbz	r0, 8003a14 <__swsetup_r+0x14>
 8003a0c:	6a03      	ldr	r3, [r0, #32]
 8003a0e:	b90b      	cbnz	r3, 8003a14 <__swsetup_r+0x14>
 8003a10:	f7ff fece 	bl	80037b0 <__sinit>
 8003a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a18:	0719      	lsls	r1, r3, #28
 8003a1a:	d422      	bmi.n	8003a62 <__swsetup_r+0x62>
 8003a1c:	06da      	lsls	r2, r3, #27
 8003a1e:	d407      	bmi.n	8003a30 <__swsetup_r+0x30>
 8003a20:	2209      	movs	r2, #9
 8003a22:	602a      	str	r2, [r5, #0]
 8003a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a2e:	e033      	b.n	8003a98 <__swsetup_r+0x98>
 8003a30:	0758      	lsls	r0, r3, #29
 8003a32:	d512      	bpl.n	8003a5a <__swsetup_r+0x5a>
 8003a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a36:	b141      	cbz	r1, 8003a4a <__swsetup_r+0x4a>
 8003a38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a3c:	4299      	cmp	r1, r3
 8003a3e:	d002      	beq.n	8003a46 <__swsetup_r+0x46>
 8003a40:	4628      	mov	r0, r5
 8003a42:	f000 f8bf 	bl	8003bc4 <_free_r>
 8003a46:	2300      	movs	r3, #0
 8003a48:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a50:	81a3      	strh	r3, [r4, #12]
 8003a52:	2300      	movs	r3, #0
 8003a54:	6063      	str	r3, [r4, #4]
 8003a56:	6923      	ldr	r3, [r4, #16]
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	f043 0308 	orr.w	r3, r3, #8
 8003a60:	81a3      	strh	r3, [r4, #12]
 8003a62:	6923      	ldr	r3, [r4, #16]
 8003a64:	b94b      	cbnz	r3, 8003a7a <__swsetup_r+0x7a>
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a70:	d003      	beq.n	8003a7a <__swsetup_r+0x7a>
 8003a72:	4621      	mov	r1, r4
 8003a74:	4628      	mov	r0, r5
 8003a76:	f000 fc8f 	bl	8004398 <__smakebuf_r>
 8003a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a7e:	f013 0201 	ands.w	r2, r3, #1
 8003a82:	d00a      	beq.n	8003a9a <__swsetup_r+0x9a>
 8003a84:	2200      	movs	r2, #0
 8003a86:	60a2      	str	r2, [r4, #8]
 8003a88:	6962      	ldr	r2, [r4, #20]
 8003a8a:	4252      	negs	r2, r2
 8003a8c:	61a2      	str	r2, [r4, #24]
 8003a8e:	6922      	ldr	r2, [r4, #16]
 8003a90:	b942      	cbnz	r2, 8003aa4 <__swsetup_r+0xa4>
 8003a92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a96:	d1c5      	bne.n	8003a24 <__swsetup_r+0x24>
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
 8003a9a:	0799      	lsls	r1, r3, #30
 8003a9c:	bf58      	it	pl
 8003a9e:	6962      	ldrpl	r2, [r4, #20]
 8003aa0:	60a2      	str	r2, [r4, #8]
 8003aa2:	e7f4      	b.n	8003a8e <__swsetup_r+0x8e>
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	e7f7      	b.n	8003a98 <__swsetup_r+0x98>
 8003aa8:	2000032c 	.word	0x2000032c

08003aac <memset>:
 8003aac:	4402      	add	r2, r0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <_close_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4d06      	ldr	r5, [pc, #24]	@ (8003ad8 <_close_r+0x1c>)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	602b      	str	r3, [r5, #0]
 8003ac8:	f000 fcc4 	bl	8004454 <_close>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d102      	bne.n	8003ad6 <_close_r+0x1a>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	b103      	cbz	r3, 8003ad6 <_close_r+0x1a>
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	20000610 	.word	0x20000610

08003adc <_lseek_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d07      	ldr	r5, [pc, #28]	@ (8003afc <_lseek_r+0x20>)
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	602a      	str	r2, [r5, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 fcca 	bl	8004484 <_lseek>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_lseek_r+0x1e>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_lseek_r+0x1e>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	20000610 	.word	0x20000610

08003b00 <_read_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4d07      	ldr	r5, [pc, #28]	@ (8003b20 <_read_r+0x20>)
 8003b04:	4604      	mov	r4, r0
 8003b06:	4608      	mov	r0, r1
 8003b08:	4611      	mov	r1, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	602a      	str	r2, [r5, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f000 fcc0 	bl	8004494 <_read>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_read_r+0x1e>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_read_r+0x1e>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	20000610 	.word	0x20000610

08003b24 <_sbrk_r>:
 8003b24:	b538      	push	{r3, r4, r5, lr}
 8003b26:	4d06      	ldr	r5, [pc, #24]	@ (8003b40 <_sbrk_r+0x1c>)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	602b      	str	r3, [r5, #0]
 8003b30:	f7fc fd00 	bl	8000534 <_sbrk>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	d102      	bne.n	8003b3e <_sbrk_r+0x1a>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	b103      	cbz	r3, 8003b3e <_sbrk_r+0x1a>
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	20000610 	.word	0x20000610

08003b44 <_write_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4d07      	ldr	r5, [pc, #28]	@ (8003b64 <_write_r+0x20>)
 8003b48:	4604      	mov	r4, r0
 8003b4a:	4608      	mov	r0, r1
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	602a      	str	r2, [r5, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f000 fca6 	bl	80044a4 <_write>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_write_r+0x1e>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_write_r+0x1e>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	20000610 	.word	0x20000610

08003b68 <__errno>:
 8003b68:	4b01      	ldr	r3, [pc, #4]	@ (8003b70 <__errno+0x8>)
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	2000032c 	.word	0x2000032c

08003b74 <__libc_init_array>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	4d0d      	ldr	r5, [pc, #52]	@ (8003bac <__libc_init_array+0x38>)
 8003b78:	4c0d      	ldr	r4, [pc, #52]	@ (8003bb0 <__libc_init_array+0x3c>)
 8003b7a:	1b64      	subs	r4, r4, r5
 8003b7c:	10a4      	asrs	r4, r4, #2
 8003b7e:	2600      	movs	r6, #0
 8003b80:	42a6      	cmp	r6, r4
 8003b82:	d109      	bne.n	8003b98 <__libc_init_array+0x24>
 8003b84:	4d0b      	ldr	r5, [pc, #44]	@ (8003bb4 <__libc_init_array+0x40>)
 8003b86:	4c0c      	ldr	r4, [pc, #48]	@ (8003bb8 <__libc_init_array+0x44>)
 8003b88:	f000 fc94 	bl	80044b4 <_init>
 8003b8c:	1b64      	subs	r4, r4, r5
 8003b8e:	10a4      	asrs	r4, r4, #2
 8003b90:	2600      	movs	r6, #0
 8003b92:	42a6      	cmp	r6, r4
 8003b94:	d105      	bne.n	8003ba2 <__libc_init_array+0x2e>
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9c:	4798      	blx	r3
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	e7ee      	b.n	8003b80 <__libc_init_array+0xc>
 8003ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba6:	4798      	blx	r3
 8003ba8:	3601      	adds	r6, #1
 8003baa:	e7f2      	b.n	8003b92 <__libc_init_array+0x1e>
 8003bac:	0800474c 	.word	0x0800474c
 8003bb0:	0800474c 	.word	0x0800474c
 8003bb4:	0800474c 	.word	0x0800474c
 8003bb8:	08004750 	.word	0x08004750

08003bbc <__retarget_lock_init_recursive>:
 8003bbc:	4770      	bx	lr

08003bbe <__retarget_lock_acquire_recursive>:
 8003bbe:	4770      	bx	lr

08003bc0 <__retarget_lock_release_recursive>:
 8003bc0:	4770      	bx	lr
	...

08003bc4 <_free_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4605      	mov	r5, r0
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d041      	beq.n	8003c50 <_free_r+0x8c>
 8003bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bd0:	1f0c      	subs	r4, r1, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bfb8      	it	lt
 8003bd6:	18e4      	addlt	r4, r4, r3
 8003bd8:	f7ff fd52 	bl	8003680 <__malloc_lock>
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <_free_r+0x90>)
 8003bde:	6813      	ldr	r3, [r2, #0]
 8003be0:	b933      	cbnz	r3, 8003bf0 <_free_r+0x2c>
 8003be2:	6063      	str	r3, [r4, #4]
 8003be4:	6014      	str	r4, [r2, #0]
 8003be6:	4628      	mov	r0, r5
 8003be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bec:	f7ff bd4e 	b.w	800368c <__malloc_unlock>
 8003bf0:	42a3      	cmp	r3, r4
 8003bf2:	d908      	bls.n	8003c06 <_free_r+0x42>
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	1821      	adds	r1, r4, r0
 8003bf8:	428b      	cmp	r3, r1
 8003bfa:	bf01      	itttt	eq
 8003bfc:	6819      	ldreq	r1, [r3, #0]
 8003bfe:	685b      	ldreq	r3, [r3, #4]
 8003c00:	1809      	addeq	r1, r1, r0
 8003c02:	6021      	streq	r1, [r4, #0]
 8003c04:	e7ed      	b.n	8003be2 <_free_r+0x1e>
 8003c06:	461a      	mov	r2, r3
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b10b      	cbz	r3, 8003c10 <_free_r+0x4c>
 8003c0c:	42a3      	cmp	r3, r4
 8003c0e:	d9fa      	bls.n	8003c06 <_free_r+0x42>
 8003c10:	6811      	ldr	r1, [r2, #0]
 8003c12:	1850      	adds	r0, r2, r1
 8003c14:	42a0      	cmp	r0, r4
 8003c16:	d10b      	bne.n	8003c30 <_free_r+0x6c>
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	4401      	add	r1, r0
 8003c1c:	1850      	adds	r0, r2, r1
 8003c1e:	4283      	cmp	r3, r0
 8003c20:	6011      	str	r1, [r2, #0]
 8003c22:	d1e0      	bne.n	8003be6 <_free_r+0x22>
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	6053      	str	r3, [r2, #4]
 8003c2a:	4408      	add	r0, r1
 8003c2c:	6010      	str	r0, [r2, #0]
 8003c2e:	e7da      	b.n	8003be6 <_free_r+0x22>
 8003c30:	d902      	bls.n	8003c38 <_free_r+0x74>
 8003c32:	230c      	movs	r3, #12
 8003c34:	602b      	str	r3, [r5, #0]
 8003c36:	e7d6      	b.n	8003be6 <_free_r+0x22>
 8003c38:	6820      	ldr	r0, [r4, #0]
 8003c3a:	1821      	adds	r1, r4, r0
 8003c3c:	428b      	cmp	r3, r1
 8003c3e:	bf04      	itt	eq
 8003c40:	6819      	ldreq	r1, [r3, #0]
 8003c42:	685b      	ldreq	r3, [r3, #4]
 8003c44:	6063      	str	r3, [r4, #4]
 8003c46:	bf04      	itt	eq
 8003c48:	1809      	addeq	r1, r1, r0
 8003c4a:	6021      	streq	r1, [r4, #0]
 8003c4c:	6054      	str	r4, [r2, #4]
 8003c4e:	e7ca      	b.n	8003be6 <_free_r+0x22>
 8003c50:	bd38      	pop	{r3, r4, r5, pc}
 8003c52:	bf00      	nop
 8003c54:	200004d0 	.word	0x200004d0

08003c58 <__sfputc_r>:
 8003c58:	6893      	ldr	r3, [r2, #8]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	b410      	push	{r4}
 8003c60:	6093      	str	r3, [r2, #8]
 8003c62:	da08      	bge.n	8003c76 <__sfputc_r+0x1e>
 8003c64:	6994      	ldr	r4, [r2, #24]
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	db01      	blt.n	8003c6e <__sfputc_r+0x16>
 8003c6a:	290a      	cmp	r1, #10
 8003c6c:	d103      	bne.n	8003c76 <__sfputc_r+0x1e>
 8003c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c72:	f7ff be86 	b.w	8003982 <__swbuf_r>
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	1c58      	adds	r0, r3, #1
 8003c7a:	6010      	str	r0, [r2, #0]
 8003c7c:	7019      	strb	r1, [r3, #0]
 8003c7e:	4608      	mov	r0, r1
 8003c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <__sfputs_r>:
 8003c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c88:	4606      	mov	r6, r0
 8003c8a:	460f      	mov	r7, r1
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	18d5      	adds	r5, r2, r3
 8003c90:	42ac      	cmp	r4, r5
 8003c92:	d101      	bne.n	8003c98 <__sfputs_r+0x12>
 8003c94:	2000      	movs	r0, #0
 8003c96:	e007      	b.n	8003ca8 <__sfputs_r+0x22>
 8003c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9c:	463a      	mov	r2, r7
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f7ff ffda 	bl	8003c58 <__sfputc_r>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d1f3      	bne.n	8003c90 <__sfputs_r+0xa>
 8003ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cac <_vfiprintf_r>:
 8003cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb0:	460d      	mov	r5, r1
 8003cb2:	b09d      	sub	sp, #116	@ 0x74
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	4698      	mov	r8, r3
 8003cb8:	4606      	mov	r6, r0
 8003cba:	b118      	cbz	r0, 8003cc4 <_vfiprintf_r+0x18>
 8003cbc:	6a03      	ldr	r3, [r0, #32]
 8003cbe:	b90b      	cbnz	r3, 8003cc4 <_vfiprintf_r+0x18>
 8003cc0:	f7ff fd76 	bl	80037b0 <__sinit>
 8003cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cc6:	07d9      	lsls	r1, r3, #31
 8003cc8:	d405      	bmi.n	8003cd6 <_vfiprintf_r+0x2a>
 8003cca:	89ab      	ldrh	r3, [r5, #12]
 8003ccc:	059a      	lsls	r2, r3, #22
 8003cce:	d402      	bmi.n	8003cd6 <_vfiprintf_r+0x2a>
 8003cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cd2:	f7ff ff74 	bl	8003bbe <__retarget_lock_acquire_recursive>
 8003cd6:	89ab      	ldrh	r3, [r5, #12]
 8003cd8:	071b      	lsls	r3, r3, #28
 8003cda:	d501      	bpl.n	8003ce0 <_vfiprintf_r+0x34>
 8003cdc:	692b      	ldr	r3, [r5, #16]
 8003cde:	b99b      	cbnz	r3, 8003d08 <_vfiprintf_r+0x5c>
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f7ff fe8c 	bl	8003a00 <__swsetup_r>
 8003ce8:	b170      	cbz	r0, 8003d08 <_vfiprintf_r+0x5c>
 8003cea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cec:	07dc      	lsls	r4, r3, #31
 8003cee:	d504      	bpl.n	8003cfa <_vfiprintf_r+0x4e>
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cf4:	b01d      	add	sp, #116	@ 0x74
 8003cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfa:	89ab      	ldrh	r3, [r5, #12]
 8003cfc:	0598      	lsls	r0, r3, #22
 8003cfe:	d4f7      	bmi.n	8003cf0 <_vfiprintf_r+0x44>
 8003d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d02:	f7ff ff5d 	bl	8003bc0 <__retarget_lock_release_recursive>
 8003d06:	e7f3      	b.n	8003cf0 <_vfiprintf_r+0x44>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d16:	2330      	movs	r3, #48	@ 0x30
 8003d18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ec8 <_vfiprintf_r+0x21c>
 8003d1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d20:	f04f 0901 	mov.w	r9, #1
 8003d24:	4623      	mov	r3, r4
 8003d26:	469a      	mov	sl, r3
 8003d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d2c:	b10a      	cbz	r2, 8003d32 <_vfiprintf_r+0x86>
 8003d2e:	2a25      	cmp	r2, #37	@ 0x25
 8003d30:	d1f9      	bne.n	8003d26 <_vfiprintf_r+0x7a>
 8003d32:	ebba 0b04 	subs.w	fp, sl, r4
 8003d36:	d00b      	beq.n	8003d50 <_vfiprintf_r+0xa4>
 8003d38:	465b      	mov	r3, fp
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff ffa1 	bl	8003c86 <__sfputs_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	f000 80a7 	beq.w	8003e98 <_vfiprintf_r+0x1ec>
 8003d4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d4c:	445a      	add	r2, fp
 8003d4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d50:	f89a 3000 	ldrb.w	r3, [sl]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 809f 	beq.w	8003e98 <_vfiprintf_r+0x1ec>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d64:	f10a 0a01 	add.w	sl, sl, #1
 8003d68:	9304      	str	r3, [sp, #16]
 8003d6a:	9307      	str	r3, [sp, #28]
 8003d6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d70:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d72:	4654      	mov	r4, sl
 8003d74:	2205      	movs	r2, #5
 8003d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d7a:	4853      	ldr	r0, [pc, #332]	@ (8003ec8 <_vfiprintf_r+0x21c>)
 8003d7c:	f7fc fa50 	bl	8000220 <memchr>
 8003d80:	9a04      	ldr	r2, [sp, #16]
 8003d82:	b9d8      	cbnz	r0, 8003dbc <_vfiprintf_r+0x110>
 8003d84:	06d1      	lsls	r1, r2, #27
 8003d86:	bf44      	itt	mi
 8003d88:	2320      	movmi	r3, #32
 8003d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d8e:	0713      	lsls	r3, r2, #28
 8003d90:	bf44      	itt	mi
 8003d92:	232b      	movmi	r3, #43	@ 0x2b
 8003d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d98:	f89a 3000 	ldrb.w	r3, [sl]
 8003d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d9e:	d015      	beq.n	8003dcc <_vfiprintf_r+0x120>
 8003da0:	9a07      	ldr	r2, [sp, #28]
 8003da2:	4654      	mov	r4, sl
 8003da4:	2000      	movs	r0, #0
 8003da6:	f04f 0c0a 	mov.w	ip, #10
 8003daa:	4621      	mov	r1, r4
 8003dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003db0:	3b30      	subs	r3, #48	@ 0x30
 8003db2:	2b09      	cmp	r3, #9
 8003db4:	d94b      	bls.n	8003e4e <_vfiprintf_r+0x1a2>
 8003db6:	b1b0      	cbz	r0, 8003de6 <_vfiprintf_r+0x13a>
 8003db8:	9207      	str	r2, [sp, #28]
 8003dba:	e014      	b.n	8003de6 <_vfiprintf_r+0x13a>
 8003dbc:	eba0 0308 	sub.w	r3, r0, r8
 8003dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	9304      	str	r3, [sp, #16]
 8003dc8:	46a2      	mov	sl, r4
 8003dca:	e7d2      	b.n	8003d72 <_vfiprintf_r+0xc6>
 8003dcc:	9b03      	ldr	r3, [sp, #12]
 8003dce:	1d19      	adds	r1, r3, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	9103      	str	r1, [sp, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bfbb      	ittet	lt
 8003dd8:	425b      	neglt	r3, r3
 8003dda:	f042 0202 	orrlt.w	r2, r2, #2
 8003dde:	9307      	strge	r3, [sp, #28]
 8003de0:	9307      	strlt	r3, [sp, #28]
 8003de2:	bfb8      	it	lt
 8003de4:	9204      	strlt	r2, [sp, #16]
 8003de6:	7823      	ldrb	r3, [r4, #0]
 8003de8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dea:	d10a      	bne.n	8003e02 <_vfiprintf_r+0x156>
 8003dec:	7863      	ldrb	r3, [r4, #1]
 8003dee:	2b2a      	cmp	r3, #42	@ 0x2a
 8003df0:	d132      	bne.n	8003e58 <_vfiprintf_r+0x1ac>
 8003df2:	9b03      	ldr	r3, [sp, #12]
 8003df4:	1d1a      	adds	r2, r3, #4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	9203      	str	r2, [sp, #12]
 8003dfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dfe:	3402      	adds	r4, #2
 8003e00:	9305      	str	r3, [sp, #20]
 8003e02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003ed8 <_vfiprintf_r+0x22c>
 8003e06:	7821      	ldrb	r1, [r4, #0]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	4650      	mov	r0, sl
 8003e0c:	f7fc fa08 	bl	8000220 <memchr>
 8003e10:	b138      	cbz	r0, 8003e22 <_vfiprintf_r+0x176>
 8003e12:	9b04      	ldr	r3, [sp, #16]
 8003e14:	eba0 000a 	sub.w	r0, r0, sl
 8003e18:	2240      	movs	r2, #64	@ 0x40
 8003e1a:	4082      	lsls	r2, r0
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	3401      	adds	r4, #1
 8003e20:	9304      	str	r3, [sp, #16]
 8003e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e26:	4829      	ldr	r0, [pc, #164]	@ (8003ecc <_vfiprintf_r+0x220>)
 8003e28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e2c:	2206      	movs	r2, #6
 8003e2e:	f7fc f9f7 	bl	8000220 <memchr>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d03f      	beq.n	8003eb6 <_vfiprintf_r+0x20a>
 8003e36:	4b26      	ldr	r3, [pc, #152]	@ (8003ed0 <_vfiprintf_r+0x224>)
 8003e38:	bb1b      	cbnz	r3, 8003e82 <_vfiprintf_r+0x1d6>
 8003e3a:	9b03      	ldr	r3, [sp, #12]
 8003e3c:	3307      	adds	r3, #7
 8003e3e:	f023 0307 	bic.w	r3, r3, #7
 8003e42:	3308      	adds	r3, #8
 8003e44:	9303      	str	r3, [sp, #12]
 8003e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e48:	443b      	add	r3, r7
 8003e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e4c:	e76a      	b.n	8003d24 <_vfiprintf_r+0x78>
 8003e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e52:	460c      	mov	r4, r1
 8003e54:	2001      	movs	r0, #1
 8003e56:	e7a8      	b.n	8003daa <_vfiprintf_r+0xfe>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	3401      	adds	r4, #1
 8003e5c:	9305      	str	r3, [sp, #20]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f04f 0c0a 	mov.w	ip, #10
 8003e64:	4620      	mov	r0, r4
 8003e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e6a:	3a30      	subs	r2, #48	@ 0x30
 8003e6c:	2a09      	cmp	r2, #9
 8003e6e:	d903      	bls.n	8003e78 <_vfiprintf_r+0x1cc>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0c6      	beq.n	8003e02 <_vfiprintf_r+0x156>
 8003e74:	9105      	str	r1, [sp, #20]
 8003e76:	e7c4      	b.n	8003e02 <_vfiprintf_r+0x156>
 8003e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e7f0      	b.n	8003e64 <_vfiprintf_r+0x1b8>
 8003e82:	ab03      	add	r3, sp, #12
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	462a      	mov	r2, r5
 8003e88:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <_vfiprintf_r+0x228>)
 8003e8a:	a904      	add	r1, sp, #16
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f3af 8000 	nop.w
 8003e92:	4607      	mov	r7, r0
 8003e94:	1c78      	adds	r0, r7, #1
 8003e96:	d1d6      	bne.n	8003e46 <_vfiprintf_r+0x19a>
 8003e98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e9a:	07d9      	lsls	r1, r3, #31
 8003e9c:	d405      	bmi.n	8003eaa <_vfiprintf_r+0x1fe>
 8003e9e:	89ab      	ldrh	r3, [r5, #12]
 8003ea0:	059a      	lsls	r2, r3, #22
 8003ea2:	d402      	bmi.n	8003eaa <_vfiprintf_r+0x1fe>
 8003ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ea6:	f7ff fe8b 	bl	8003bc0 <__retarget_lock_release_recursive>
 8003eaa:	89ab      	ldrh	r3, [r5, #12]
 8003eac:	065b      	lsls	r3, r3, #25
 8003eae:	f53f af1f 	bmi.w	8003cf0 <_vfiprintf_r+0x44>
 8003eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003eb4:	e71e      	b.n	8003cf4 <_vfiprintf_r+0x48>
 8003eb6:	ab03      	add	r3, sp, #12
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	462a      	mov	r2, r5
 8003ebc:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <_vfiprintf_r+0x228>)
 8003ebe:	a904      	add	r1, sp, #16
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f000 f879 	bl	8003fb8 <_printf_i>
 8003ec6:	e7e4      	b.n	8003e92 <_vfiprintf_r+0x1e6>
 8003ec8:	08004710 	.word	0x08004710
 8003ecc:	0800471a 	.word	0x0800471a
 8003ed0:	00000000 	.word	0x00000000
 8003ed4:	08003c87 	.word	0x08003c87
 8003ed8:	08004716 	.word	0x08004716

08003edc <_printf_common>:
 8003edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee0:	4616      	mov	r6, r2
 8003ee2:	4698      	mov	r8, r3
 8003ee4:	688a      	ldr	r2, [r1, #8]
 8003ee6:	690b      	ldr	r3, [r1, #16]
 8003ee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bfb8      	it	lt
 8003ef0:	4613      	movlt	r3, r2
 8003ef2:	6033      	str	r3, [r6, #0]
 8003ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ef8:	4607      	mov	r7, r0
 8003efa:	460c      	mov	r4, r1
 8003efc:	b10a      	cbz	r2, 8003f02 <_printf_common+0x26>
 8003efe:	3301      	adds	r3, #1
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	0699      	lsls	r1, r3, #26
 8003f06:	bf42      	ittt	mi
 8003f08:	6833      	ldrmi	r3, [r6, #0]
 8003f0a:	3302      	addmi	r3, #2
 8003f0c:	6033      	strmi	r3, [r6, #0]
 8003f0e:	6825      	ldr	r5, [r4, #0]
 8003f10:	f015 0506 	ands.w	r5, r5, #6
 8003f14:	d106      	bne.n	8003f24 <_printf_common+0x48>
 8003f16:	f104 0a19 	add.w	sl, r4, #25
 8003f1a:	68e3      	ldr	r3, [r4, #12]
 8003f1c:	6832      	ldr	r2, [r6, #0]
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	42ab      	cmp	r3, r5
 8003f22:	dc26      	bgt.n	8003f72 <_printf_common+0x96>
 8003f24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f28:	6822      	ldr	r2, [r4, #0]
 8003f2a:	3b00      	subs	r3, #0
 8003f2c:	bf18      	it	ne
 8003f2e:	2301      	movne	r3, #1
 8003f30:	0692      	lsls	r2, r2, #26
 8003f32:	d42b      	bmi.n	8003f8c <_printf_common+0xb0>
 8003f34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f38:	4641      	mov	r1, r8
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	47c8      	blx	r9
 8003f3e:	3001      	adds	r0, #1
 8003f40:	d01e      	beq.n	8003f80 <_printf_common+0xa4>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	6922      	ldr	r2, [r4, #16]
 8003f46:	f003 0306 	and.w	r3, r3, #6
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	bf02      	ittt	eq
 8003f4e:	68e5      	ldreq	r5, [r4, #12]
 8003f50:	6833      	ldreq	r3, [r6, #0]
 8003f52:	1aed      	subeq	r5, r5, r3
 8003f54:	68a3      	ldr	r3, [r4, #8]
 8003f56:	bf0c      	ite	eq
 8003f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f5c:	2500      	movne	r5, #0
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bfc4      	itt	gt
 8003f62:	1a9b      	subgt	r3, r3, r2
 8003f64:	18ed      	addgt	r5, r5, r3
 8003f66:	2600      	movs	r6, #0
 8003f68:	341a      	adds	r4, #26
 8003f6a:	42b5      	cmp	r5, r6
 8003f6c:	d11a      	bne.n	8003fa4 <_printf_common+0xc8>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	e008      	b.n	8003f84 <_printf_common+0xa8>
 8003f72:	2301      	movs	r3, #1
 8003f74:	4652      	mov	r2, sl
 8003f76:	4641      	mov	r1, r8
 8003f78:	4638      	mov	r0, r7
 8003f7a:	47c8      	blx	r9
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d103      	bne.n	8003f88 <_printf_common+0xac>
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f88:	3501      	adds	r5, #1
 8003f8a:	e7c6      	b.n	8003f1a <_printf_common+0x3e>
 8003f8c:	18e1      	adds	r1, r4, r3
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	2030      	movs	r0, #48	@ 0x30
 8003f92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f96:	4422      	add	r2, r4
 8003f98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	e7c7      	b.n	8003f34 <_printf_common+0x58>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	4641      	mov	r1, r8
 8003faa:	4638      	mov	r0, r7
 8003fac:	47c8      	blx	r9
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d0e6      	beq.n	8003f80 <_printf_common+0xa4>
 8003fb2:	3601      	adds	r6, #1
 8003fb4:	e7d9      	b.n	8003f6a <_printf_common+0x8e>
	...

08003fb8 <_printf_i>:
 8003fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fbc:	7e0f      	ldrb	r7, [r1, #24]
 8003fbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fc0:	2f78      	cmp	r7, #120	@ 0x78
 8003fc2:	4691      	mov	r9, r2
 8003fc4:	4680      	mov	r8, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	469a      	mov	sl, r3
 8003fca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fce:	d807      	bhi.n	8003fe0 <_printf_i+0x28>
 8003fd0:	2f62      	cmp	r7, #98	@ 0x62
 8003fd2:	d80a      	bhi.n	8003fea <_printf_i+0x32>
 8003fd4:	2f00      	cmp	r7, #0
 8003fd6:	f000 80d1 	beq.w	800417c <_printf_i+0x1c4>
 8003fda:	2f58      	cmp	r7, #88	@ 0x58
 8003fdc:	f000 80b8 	beq.w	8004150 <_printf_i+0x198>
 8003fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fe8:	e03a      	b.n	8004060 <_printf_i+0xa8>
 8003fea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fee:	2b15      	cmp	r3, #21
 8003ff0:	d8f6      	bhi.n	8003fe0 <_printf_i+0x28>
 8003ff2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ff8 <_printf_i+0x40>)
 8003ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ff8:	08004051 	.word	0x08004051
 8003ffc:	08004065 	.word	0x08004065
 8004000:	08003fe1 	.word	0x08003fe1
 8004004:	08003fe1 	.word	0x08003fe1
 8004008:	08003fe1 	.word	0x08003fe1
 800400c:	08003fe1 	.word	0x08003fe1
 8004010:	08004065 	.word	0x08004065
 8004014:	08003fe1 	.word	0x08003fe1
 8004018:	08003fe1 	.word	0x08003fe1
 800401c:	08003fe1 	.word	0x08003fe1
 8004020:	08003fe1 	.word	0x08003fe1
 8004024:	08004163 	.word	0x08004163
 8004028:	0800408f 	.word	0x0800408f
 800402c:	0800411d 	.word	0x0800411d
 8004030:	08003fe1 	.word	0x08003fe1
 8004034:	08003fe1 	.word	0x08003fe1
 8004038:	08004185 	.word	0x08004185
 800403c:	08003fe1 	.word	0x08003fe1
 8004040:	0800408f 	.word	0x0800408f
 8004044:	08003fe1 	.word	0x08003fe1
 8004048:	08003fe1 	.word	0x08003fe1
 800404c:	08004125 	.word	0x08004125
 8004050:	6833      	ldr	r3, [r6, #0]
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6032      	str	r2, [r6, #0]
 8004058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800405c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004060:	2301      	movs	r3, #1
 8004062:	e09c      	b.n	800419e <_printf_i+0x1e6>
 8004064:	6833      	ldr	r3, [r6, #0]
 8004066:	6820      	ldr	r0, [r4, #0]
 8004068:	1d19      	adds	r1, r3, #4
 800406a:	6031      	str	r1, [r6, #0]
 800406c:	0606      	lsls	r6, r0, #24
 800406e:	d501      	bpl.n	8004074 <_printf_i+0xbc>
 8004070:	681d      	ldr	r5, [r3, #0]
 8004072:	e003      	b.n	800407c <_printf_i+0xc4>
 8004074:	0645      	lsls	r5, r0, #25
 8004076:	d5fb      	bpl.n	8004070 <_printf_i+0xb8>
 8004078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800407c:	2d00      	cmp	r5, #0
 800407e:	da03      	bge.n	8004088 <_printf_i+0xd0>
 8004080:	232d      	movs	r3, #45	@ 0x2d
 8004082:	426d      	negs	r5, r5
 8004084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004088:	4858      	ldr	r0, [pc, #352]	@ (80041ec <_printf_i+0x234>)
 800408a:	230a      	movs	r3, #10
 800408c:	e011      	b.n	80040b2 <_printf_i+0xfa>
 800408e:	6821      	ldr	r1, [r4, #0]
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	0608      	lsls	r0, r1, #24
 8004094:	f853 5b04 	ldr.w	r5, [r3], #4
 8004098:	d402      	bmi.n	80040a0 <_printf_i+0xe8>
 800409a:	0649      	lsls	r1, r1, #25
 800409c:	bf48      	it	mi
 800409e:	b2ad      	uxthmi	r5, r5
 80040a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80040a2:	4852      	ldr	r0, [pc, #328]	@ (80041ec <_printf_i+0x234>)
 80040a4:	6033      	str	r3, [r6, #0]
 80040a6:	bf14      	ite	ne
 80040a8:	230a      	movne	r3, #10
 80040aa:	2308      	moveq	r3, #8
 80040ac:	2100      	movs	r1, #0
 80040ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040b2:	6866      	ldr	r6, [r4, #4]
 80040b4:	60a6      	str	r6, [r4, #8]
 80040b6:	2e00      	cmp	r6, #0
 80040b8:	db05      	blt.n	80040c6 <_printf_i+0x10e>
 80040ba:	6821      	ldr	r1, [r4, #0]
 80040bc:	432e      	orrs	r6, r5
 80040be:	f021 0104 	bic.w	r1, r1, #4
 80040c2:	6021      	str	r1, [r4, #0]
 80040c4:	d04b      	beq.n	800415e <_printf_i+0x1a6>
 80040c6:	4616      	mov	r6, r2
 80040c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80040cc:	fb03 5711 	mls	r7, r3, r1, r5
 80040d0:	5dc7      	ldrb	r7, [r0, r7]
 80040d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040d6:	462f      	mov	r7, r5
 80040d8:	42bb      	cmp	r3, r7
 80040da:	460d      	mov	r5, r1
 80040dc:	d9f4      	bls.n	80040c8 <_printf_i+0x110>
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d10b      	bne.n	80040fa <_printf_i+0x142>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	07df      	lsls	r7, r3, #31
 80040e6:	d508      	bpl.n	80040fa <_printf_i+0x142>
 80040e8:	6923      	ldr	r3, [r4, #16]
 80040ea:	6861      	ldr	r1, [r4, #4]
 80040ec:	4299      	cmp	r1, r3
 80040ee:	bfde      	ittt	le
 80040f0:	2330      	movle	r3, #48	@ 0x30
 80040f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040f6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80040fa:	1b92      	subs	r2, r2, r6
 80040fc:	6122      	str	r2, [r4, #16]
 80040fe:	f8cd a000 	str.w	sl, [sp]
 8004102:	464b      	mov	r3, r9
 8004104:	aa03      	add	r2, sp, #12
 8004106:	4621      	mov	r1, r4
 8004108:	4640      	mov	r0, r8
 800410a:	f7ff fee7 	bl	8003edc <_printf_common>
 800410e:	3001      	adds	r0, #1
 8004110:	d14a      	bne.n	80041a8 <_printf_i+0x1f0>
 8004112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004116:	b004      	add	sp, #16
 8004118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	f043 0320 	orr.w	r3, r3, #32
 8004122:	6023      	str	r3, [r4, #0]
 8004124:	4832      	ldr	r0, [pc, #200]	@ (80041f0 <_printf_i+0x238>)
 8004126:	2778      	movs	r7, #120	@ 0x78
 8004128:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	6831      	ldr	r1, [r6, #0]
 8004130:	061f      	lsls	r7, r3, #24
 8004132:	f851 5b04 	ldr.w	r5, [r1], #4
 8004136:	d402      	bmi.n	800413e <_printf_i+0x186>
 8004138:	065f      	lsls	r7, r3, #25
 800413a:	bf48      	it	mi
 800413c:	b2ad      	uxthmi	r5, r5
 800413e:	6031      	str	r1, [r6, #0]
 8004140:	07d9      	lsls	r1, r3, #31
 8004142:	bf44      	itt	mi
 8004144:	f043 0320 	orrmi.w	r3, r3, #32
 8004148:	6023      	strmi	r3, [r4, #0]
 800414a:	b11d      	cbz	r5, 8004154 <_printf_i+0x19c>
 800414c:	2310      	movs	r3, #16
 800414e:	e7ad      	b.n	80040ac <_printf_i+0xf4>
 8004150:	4826      	ldr	r0, [pc, #152]	@ (80041ec <_printf_i+0x234>)
 8004152:	e7e9      	b.n	8004128 <_printf_i+0x170>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f023 0320 	bic.w	r3, r3, #32
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	e7f6      	b.n	800414c <_printf_i+0x194>
 800415e:	4616      	mov	r6, r2
 8004160:	e7bd      	b.n	80040de <_printf_i+0x126>
 8004162:	6833      	ldr	r3, [r6, #0]
 8004164:	6825      	ldr	r5, [r4, #0]
 8004166:	6961      	ldr	r1, [r4, #20]
 8004168:	1d18      	adds	r0, r3, #4
 800416a:	6030      	str	r0, [r6, #0]
 800416c:	062e      	lsls	r6, r5, #24
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	d501      	bpl.n	8004176 <_printf_i+0x1be>
 8004172:	6019      	str	r1, [r3, #0]
 8004174:	e002      	b.n	800417c <_printf_i+0x1c4>
 8004176:	0668      	lsls	r0, r5, #25
 8004178:	d5fb      	bpl.n	8004172 <_printf_i+0x1ba>
 800417a:	8019      	strh	r1, [r3, #0]
 800417c:	2300      	movs	r3, #0
 800417e:	6123      	str	r3, [r4, #16]
 8004180:	4616      	mov	r6, r2
 8004182:	e7bc      	b.n	80040fe <_printf_i+0x146>
 8004184:	6833      	ldr	r3, [r6, #0]
 8004186:	1d1a      	adds	r2, r3, #4
 8004188:	6032      	str	r2, [r6, #0]
 800418a:	681e      	ldr	r6, [r3, #0]
 800418c:	6862      	ldr	r2, [r4, #4]
 800418e:	2100      	movs	r1, #0
 8004190:	4630      	mov	r0, r6
 8004192:	f7fc f845 	bl	8000220 <memchr>
 8004196:	b108      	cbz	r0, 800419c <_printf_i+0x1e4>
 8004198:	1b80      	subs	r0, r0, r6
 800419a:	6060      	str	r0, [r4, #4]
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	6123      	str	r3, [r4, #16]
 80041a0:	2300      	movs	r3, #0
 80041a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041a6:	e7aa      	b.n	80040fe <_printf_i+0x146>
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	4632      	mov	r2, r6
 80041ac:	4649      	mov	r1, r9
 80041ae:	4640      	mov	r0, r8
 80041b0:	47d0      	blx	sl
 80041b2:	3001      	adds	r0, #1
 80041b4:	d0ad      	beq.n	8004112 <_printf_i+0x15a>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	079b      	lsls	r3, r3, #30
 80041ba:	d413      	bmi.n	80041e4 <_printf_i+0x22c>
 80041bc:	68e0      	ldr	r0, [r4, #12]
 80041be:	9b03      	ldr	r3, [sp, #12]
 80041c0:	4298      	cmp	r0, r3
 80041c2:	bfb8      	it	lt
 80041c4:	4618      	movlt	r0, r3
 80041c6:	e7a6      	b.n	8004116 <_printf_i+0x15e>
 80041c8:	2301      	movs	r3, #1
 80041ca:	4632      	mov	r2, r6
 80041cc:	4649      	mov	r1, r9
 80041ce:	4640      	mov	r0, r8
 80041d0:	47d0      	blx	sl
 80041d2:	3001      	adds	r0, #1
 80041d4:	d09d      	beq.n	8004112 <_printf_i+0x15a>
 80041d6:	3501      	adds	r5, #1
 80041d8:	68e3      	ldr	r3, [r4, #12]
 80041da:	9903      	ldr	r1, [sp, #12]
 80041dc:	1a5b      	subs	r3, r3, r1
 80041de:	42ab      	cmp	r3, r5
 80041e0:	dcf2      	bgt.n	80041c8 <_printf_i+0x210>
 80041e2:	e7eb      	b.n	80041bc <_printf_i+0x204>
 80041e4:	2500      	movs	r5, #0
 80041e6:	f104 0619 	add.w	r6, r4, #25
 80041ea:	e7f5      	b.n	80041d8 <_printf_i+0x220>
 80041ec:	08004721 	.word	0x08004721
 80041f0:	08004732 	.word	0x08004732

080041f4 <__sflush_r>:
 80041f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041fc:	0716      	lsls	r6, r2, #28
 80041fe:	4605      	mov	r5, r0
 8004200:	460c      	mov	r4, r1
 8004202:	d454      	bmi.n	80042ae <__sflush_r+0xba>
 8004204:	684b      	ldr	r3, [r1, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	dc02      	bgt.n	8004210 <__sflush_r+0x1c>
 800420a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	dd48      	ble.n	80042a2 <__sflush_r+0xae>
 8004210:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004212:	2e00      	cmp	r6, #0
 8004214:	d045      	beq.n	80042a2 <__sflush_r+0xae>
 8004216:	2300      	movs	r3, #0
 8004218:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800421c:	682f      	ldr	r7, [r5, #0]
 800421e:	6a21      	ldr	r1, [r4, #32]
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	d030      	beq.n	8004286 <__sflush_r+0x92>
 8004224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	0759      	lsls	r1, r3, #29
 800422a:	d505      	bpl.n	8004238 <__sflush_r+0x44>
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004232:	b10b      	cbz	r3, 8004238 <__sflush_r+0x44>
 8004234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	2300      	movs	r3, #0
 800423a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800423c:	6a21      	ldr	r1, [r4, #32]
 800423e:	4628      	mov	r0, r5
 8004240:	47b0      	blx	r6
 8004242:	1c43      	adds	r3, r0, #1
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	d106      	bne.n	8004256 <__sflush_r+0x62>
 8004248:	6829      	ldr	r1, [r5, #0]
 800424a:	291d      	cmp	r1, #29
 800424c:	d82b      	bhi.n	80042a6 <__sflush_r+0xb2>
 800424e:	4a2a      	ldr	r2, [pc, #168]	@ (80042f8 <__sflush_r+0x104>)
 8004250:	40ca      	lsrs	r2, r1
 8004252:	07d6      	lsls	r6, r2, #31
 8004254:	d527      	bpl.n	80042a6 <__sflush_r+0xb2>
 8004256:	2200      	movs	r2, #0
 8004258:	6062      	str	r2, [r4, #4]
 800425a:	04d9      	lsls	r1, r3, #19
 800425c:	6922      	ldr	r2, [r4, #16]
 800425e:	6022      	str	r2, [r4, #0]
 8004260:	d504      	bpl.n	800426c <__sflush_r+0x78>
 8004262:	1c42      	adds	r2, r0, #1
 8004264:	d101      	bne.n	800426a <__sflush_r+0x76>
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	b903      	cbnz	r3, 800426c <__sflush_r+0x78>
 800426a:	6560      	str	r0, [r4, #84]	@ 0x54
 800426c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800426e:	602f      	str	r7, [r5, #0]
 8004270:	b1b9      	cbz	r1, 80042a2 <__sflush_r+0xae>
 8004272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004276:	4299      	cmp	r1, r3
 8004278:	d002      	beq.n	8004280 <__sflush_r+0x8c>
 800427a:	4628      	mov	r0, r5
 800427c:	f7ff fca2 	bl	8003bc4 <_free_r>
 8004280:	2300      	movs	r3, #0
 8004282:	6363      	str	r3, [r4, #52]	@ 0x34
 8004284:	e00d      	b.n	80042a2 <__sflush_r+0xae>
 8004286:	2301      	movs	r3, #1
 8004288:	4628      	mov	r0, r5
 800428a:	47b0      	blx	r6
 800428c:	4602      	mov	r2, r0
 800428e:	1c50      	adds	r0, r2, #1
 8004290:	d1c9      	bne.n	8004226 <__sflush_r+0x32>
 8004292:	682b      	ldr	r3, [r5, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0c6      	beq.n	8004226 <__sflush_r+0x32>
 8004298:	2b1d      	cmp	r3, #29
 800429a:	d001      	beq.n	80042a0 <__sflush_r+0xac>
 800429c:	2b16      	cmp	r3, #22
 800429e:	d11e      	bne.n	80042de <__sflush_r+0xea>
 80042a0:	602f      	str	r7, [r5, #0]
 80042a2:	2000      	movs	r0, #0
 80042a4:	e022      	b.n	80042ec <__sflush_r+0xf8>
 80042a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042aa:	b21b      	sxth	r3, r3
 80042ac:	e01b      	b.n	80042e6 <__sflush_r+0xf2>
 80042ae:	690f      	ldr	r7, [r1, #16]
 80042b0:	2f00      	cmp	r7, #0
 80042b2:	d0f6      	beq.n	80042a2 <__sflush_r+0xae>
 80042b4:	0793      	lsls	r3, r2, #30
 80042b6:	680e      	ldr	r6, [r1, #0]
 80042b8:	bf08      	it	eq
 80042ba:	694b      	ldreq	r3, [r1, #20]
 80042bc:	600f      	str	r7, [r1, #0]
 80042be:	bf18      	it	ne
 80042c0:	2300      	movne	r3, #0
 80042c2:	eba6 0807 	sub.w	r8, r6, r7
 80042c6:	608b      	str	r3, [r1, #8]
 80042c8:	f1b8 0f00 	cmp.w	r8, #0
 80042cc:	dde9      	ble.n	80042a2 <__sflush_r+0xae>
 80042ce:	6a21      	ldr	r1, [r4, #32]
 80042d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80042d2:	4643      	mov	r3, r8
 80042d4:	463a      	mov	r2, r7
 80042d6:	4628      	mov	r0, r5
 80042d8:	47b0      	blx	r6
 80042da:	2800      	cmp	r0, #0
 80042dc:	dc08      	bgt.n	80042f0 <__sflush_r+0xfc>
 80042de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042e6:	81a3      	strh	r3, [r4, #12]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f0:	4407      	add	r7, r0
 80042f2:	eba8 0800 	sub.w	r8, r8, r0
 80042f6:	e7e7      	b.n	80042c8 <__sflush_r+0xd4>
 80042f8:	20400001 	.word	0x20400001

080042fc <_fflush_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	690b      	ldr	r3, [r1, #16]
 8004300:	4605      	mov	r5, r0
 8004302:	460c      	mov	r4, r1
 8004304:	b913      	cbnz	r3, 800430c <_fflush_r+0x10>
 8004306:	2500      	movs	r5, #0
 8004308:	4628      	mov	r0, r5
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	b118      	cbz	r0, 8004316 <_fflush_r+0x1a>
 800430e:	6a03      	ldr	r3, [r0, #32]
 8004310:	b90b      	cbnz	r3, 8004316 <_fflush_r+0x1a>
 8004312:	f7ff fa4d 	bl	80037b0 <__sinit>
 8004316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f3      	beq.n	8004306 <_fflush_r+0xa>
 800431e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004320:	07d0      	lsls	r0, r2, #31
 8004322:	d404      	bmi.n	800432e <_fflush_r+0x32>
 8004324:	0599      	lsls	r1, r3, #22
 8004326:	d402      	bmi.n	800432e <_fflush_r+0x32>
 8004328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800432a:	f7ff fc48 	bl	8003bbe <__retarget_lock_acquire_recursive>
 800432e:	4628      	mov	r0, r5
 8004330:	4621      	mov	r1, r4
 8004332:	f7ff ff5f 	bl	80041f4 <__sflush_r>
 8004336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004338:	07da      	lsls	r2, r3, #31
 800433a:	4605      	mov	r5, r0
 800433c:	d4e4      	bmi.n	8004308 <_fflush_r+0xc>
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	059b      	lsls	r3, r3, #22
 8004342:	d4e1      	bmi.n	8004308 <_fflush_r+0xc>
 8004344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004346:	f7ff fc3b 	bl	8003bc0 <__retarget_lock_release_recursive>
 800434a:	e7dd      	b.n	8004308 <_fflush_r+0xc>

0800434c <__swhatbuf_r>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	460c      	mov	r4, r1
 8004350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004354:	2900      	cmp	r1, #0
 8004356:	b096      	sub	sp, #88	@ 0x58
 8004358:	4615      	mov	r5, r2
 800435a:	461e      	mov	r6, r3
 800435c:	da0d      	bge.n	800437a <__swhatbuf_r+0x2e>
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004364:	f04f 0100 	mov.w	r1, #0
 8004368:	bf14      	ite	ne
 800436a:	2340      	movne	r3, #64	@ 0x40
 800436c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004370:	2000      	movs	r0, #0
 8004372:	6031      	str	r1, [r6, #0]
 8004374:	602b      	str	r3, [r5, #0]
 8004376:	b016      	add	sp, #88	@ 0x58
 8004378:	bd70      	pop	{r4, r5, r6, pc}
 800437a:	466a      	mov	r2, sp
 800437c:	f000 f848 	bl	8004410 <_fstat_r>
 8004380:	2800      	cmp	r0, #0
 8004382:	dbec      	blt.n	800435e <__swhatbuf_r+0x12>
 8004384:	9901      	ldr	r1, [sp, #4]
 8004386:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800438a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800438e:	4259      	negs	r1, r3
 8004390:	4159      	adcs	r1, r3
 8004392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004396:	e7eb      	b.n	8004370 <__swhatbuf_r+0x24>

08004398 <__smakebuf_r>:
 8004398:	898b      	ldrh	r3, [r1, #12]
 800439a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800439c:	079d      	lsls	r5, r3, #30
 800439e:	4606      	mov	r6, r0
 80043a0:	460c      	mov	r4, r1
 80043a2:	d507      	bpl.n	80043b4 <__smakebuf_r+0x1c>
 80043a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	6123      	str	r3, [r4, #16]
 80043ac:	2301      	movs	r3, #1
 80043ae:	6163      	str	r3, [r4, #20]
 80043b0:	b003      	add	sp, #12
 80043b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b4:	ab01      	add	r3, sp, #4
 80043b6:	466a      	mov	r2, sp
 80043b8:	f7ff ffc8 	bl	800434c <__swhatbuf_r>
 80043bc:	9f00      	ldr	r7, [sp, #0]
 80043be:	4605      	mov	r5, r0
 80043c0:	4639      	mov	r1, r7
 80043c2:	4630      	mov	r0, r6
 80043c4:	f7ff f8dc 	bl	8003580 <_malloc_r>
 80043c8:	b948      	cbnz	r0, 80043de <__smakebuf_r+0x46>
 80043ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ce:	059a      	lsls	r2, r3, #22
 80043d0:	d4ee      	bmi.n	80043b0 <__smakebuf_r+0x18>
 80043d2:	f023 0303 	bic.w	r3, r3, #3
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	81a3      	strh	r3, [r4, #12]
 80043dc:	e7e2      	b.n	80043a4 <__smakebuf_r+0xc>
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	6020      	str	r0, [r4, #0]
 80043e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e6:	81a3      	strh	r3, [r4, #12]
 80043e8:	9b01      	ldr	r3, [sp, #4]
 80043ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80043ee:	b15b      	cbz	r3, 8004408 <__smakebuf_r+0x70>
 80043f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043f4:	4630      	mov	r0, r6
 80043f6:	f000 f81d 	bl	8004434 <_isatty_r>
 80043fa:	b128      	cbz	r0, 8004408 <__smakebuf_r+0x70>
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	81a3      	strh	r3, [r4, #12]
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	431d      	orrs	r5, r3
 800440c:	81a5      	strh	r5, [r4, #12]
 800440e:	e7cf      	b.n	80043b0 <__smakebuf_r+0x18>

08004410 <_fstat_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4d07      	ldr	r5, [pc, #28]	@ (8004430 <_fstat_r+0x20>)
 8004414:	2300      	movs	r3, #0
 8004416:	4604      	mov	r4, r0
 8004418:	4608      	mov	r0, r1
 800441a:	4611      	mov	r1, r2
 800441c:	602b      	str	r3, [r5, #0]
 800441e:	f000 f821 	bl	8004464 <_fstat>
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	d102      	bne.n	800442c <_fstat_r+0x1c>
 8004426:	682b      	ldr	r3, [r5, #0]
 8004428:	b103      	cbz	r3, 800442c <_fstat_r+0x1c>
 800442a:	6023      	str	r3, [r4, #0]
 800442c:	bd38      	pop	{r3, r4, r5, pc}
 800442e:	bf00      	nop
 8004430:	20000610 	.word	0x20000610

08004434 <_isatty_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4d06      	ldr	r5, [pc, #24]	@ (8004450 <_isatty_r+0x1c>)
 8004438:	2300      	movs	r3, #0
 800443a:	4604      	mov	r4, r0
 800443c:	4608      	mov	r0, r1
 800443e:	602b      	str	r3, [r5, #0]
 8004440:	f000 f818 	bl	8004474 <_isatty>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	d102      	bne.n	800444e <_isatty_r+0x1a>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	b103      	cbz	r3, 800444e <_isatty_r+0x1a>
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	20000610 	.word	0x20000610

08004454 <_close>:
 8004454:	4b02      	ldr	r3, [pc, #8]	@ (8004460 <_close+0xc>)
 8004456:	2258      	movs	r2, #88	@ 0x58
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800445e:	4770      	bx	lr
 8004460:	20000610 	.word	0x20000610

08004464 <_fstat>:
 8004464:	4b02      	ldr	r3, [pc, #8]	@ (8004470 <_fstat+0xc>)
 8004466:	2258      	movs	r2, #88	@ 0x58
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800446e:	4770      	bx	lr
 8004470:	20000610 	.word	0x20000610

08004474 <_isatty>:
 8004474:	4b02      	ldr	r3, [pc, #8]	@ (8004480 <_isatty+0xc>)
 8004476:	2258      	movs	r2, #88	@ 0x58
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	2000      	movs	r0, #0
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000610 	.word	0x20000610

08004484 <_lseek>:
 8004484:	4b02      	ldr	r3, [pc, #8]	@ (8004490 <_lseek+0xc>)
 8004486:	2258      	movs	r2, #88	@ 0x58
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800448e:	4770      	bx	lr
 8004490:	20000610 	.word	0x20000610

08004494 <_read>:
 8004494:	4b02      	ldr	r3, [pc, #8]	@ (80044a0 <_read+0xc>)
 8004496:	2258      	movs	r2, #88	@ 0x58
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800449e:	4770      	bx	lr
 80044a0:	20000610 	.word	0x20000610

080044a4 <_write>:
 80044a4:	4b02      	ldr	r3, [pc, #8]	@ (80044b0 <_write+0xc>)
 80044a6:	2258      	movs	r2, #88	@ 0x58
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044ae:	4770      	bx	lr
 80044b0:	20000610 	.word	0x20000610

080044b4 <_init>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr

080044c0 <_fini>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr
