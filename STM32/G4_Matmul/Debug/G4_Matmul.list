
G4_Matmul.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006710  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080068f0  080068f0  000078f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d38  08006d38  000081e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006d38  08006d38  00007d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d40  08006d40  000081e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d40  08006d40  00007d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d44  08006d44  00007d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08006d48  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001e4  08006f2c  000081e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08006f2c  000083f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e07c  00000000  00000000  00008214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002371  00000000  00000000  00016290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00018608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a7  00000000  00000000  00019178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bb7  00000000  00000000  00019a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7ec  00000000  00000000  000405d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edd92  00000000  00000000  0004edc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cb54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d8c  00000000  00000000  0013cb98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00140924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080068d8 	.word	0x080068d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	080068d8 	.word	0x080068d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b0a0      	sub	sp, #128	@ 0x80
 8000eec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eee:	f000 fd38 	bl	8001962 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef2:	f000 f8c1 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef6:	f000 f957 	bl	80011a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000efa:	f000 f909 	bl	8001110 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 fbb8 	bl	8001674 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f04:	2101      	movs	r1, #1
 8000f06:	2000      	movs	r0, #0
 8000f08:	f000 fbea 	bl	80016e0 <BSP_PB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("UART is working!\r\n");
 8000f0c:	4850      	ldr	r0, [pc, #320]	@ (8001050 <main+0x168>)
 8000f0e:	f003 fd73 	bl	80049f8 <puts>

  // Enable DWT
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f12:	4b50      	ldr	r3, [pc, #320]	@ (8001054 <main+0x16c>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	4a4f      	ldr	r2, [pc, #316]	@ (8001054 <main+0x16c>)
 8000f18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f1c:	60d3      	str	r3, [r2, #12]

  while (1)
  {
	  // Input matrices in Q31 format
	    q31_t dataA[ROWS_A * COLS_A] = {
 8000f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001058 <main+0x170>)
 8000f20:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8000f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x40000000, 0x20000000,  // 0.5, 0.25
			0x10000000, 0x08000000   // 0.125, 0.0625
		};

		q31_t dataB[COLS_A * COLS_B] = {
 8000f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001058 <main+0x170>)
 8000f2c:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8000f30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		arm_matrix_instance_q31 matA;
		arm_matrix_instance_q31 matB;
		arm_matrix_instance_q31 matOut;

		// Initialize matrix instances
		arm_mat_init_q31(&matA, ROWS_A, COLS_A, dataA);
 8000f36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f3a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000f3e:	2202      	movs	r2, #2
 8000f40:	2102      	movs	r1, #2
 8000f42:	f000 fc5f 	bl	8001804 <arm_mat_init_q31>
		arm_mat_init_q31(&matB, COLS_A, COLS_B, dataB);
 8000f46:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f4a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000f4e:	2202      	movs	r2, #2
 8000f50:	2102      	movs	r1, #2
 8000f52:	f000 fc57 	bl	8001804 <arm_mat_init_q31>
		arm_mat_init_q31(&matOut, ROWS_A, COLS_B, dataOut);
 8000f56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f5a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000f5e:	2202      	movs	r2, #2
 8000f60:	2102      	movs	r1, #2
 8000f62:	f000 fc4f 	bl	8001804 <arm_mat_init_q31>

		int m1[R1][C1] = { { 1, 1 }, { 2, 2 } };
 8000f66:	4b3d      	ldr	r3, [pc, #244]	@ (800105c <main+0x174>)
 8000f68:	f107 0418 	add.w	r4, r7, #24
 8000f6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int m2[R2][C2] = { { 1, 1, 1 }, { 2, 2, 2 } };
 8000f72:	4b3b      	ldr	r3, [pc, #236]	@ (8001060 <main+0x178>)
 8000f74:	463c      	mov	r4, r7
 8000f76:	461d      	mov	r5, r3
 8000f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f80:	e884 0003 	stmia.w	r4, {r0, r1}
				"Matrix-2\n");

			exit(EXIT_FAILURE);
		}

		DWT->CYCCNT = 0;                    // Reset counter
 8000f84:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <main+0x17c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable cycle counter
 8000f8a:	4b36      	ldr	r3, [pc, #216]	@ (8001064 <main+0x17c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a35      	ldr	r2, [pc, #212]	@ (8001064 <main+0x17c>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6013      	str	r3, [r2, #0]
		//printf("Hello World\n\r");
		multiplyMatrix(m1, m2);
 8000f96:	463a      	mov	r2, r7
 8000f98:	f107 0318 	add.w	r3, r7, #24
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f950 	bl	8001244 <multiplyMatrix>
		uint32_t cycles = DWT->CYCCNT;
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <main+0x17c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	677b      	str	r3, [r7, #116]	@ 0x74
		float time = ((float)cycles / SystemCoreClock) * 1000.0;//milli seconds
 8000faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <main+0x180>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc4:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800106c <main+0x184>
 8000fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fcc:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		printf("Time: %f msec, Cycles: %lu\r\n", time, cycles);
 8000fd0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000fd2:	f7ff fae1 	bl	8000598 <__aeabi_f2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000fdc:	9100      	str	r1, [sp, #0]
 8000fde:	4824      	ldr	r0, [pc, #144]	@ (8001070 <main+0x188>)
 8000fe0:	f003 fca2 	bl	8004928 <iprintf>
		HAL_Delay(500);
 8000fe4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fe8:	f000 fd2c 	bl	8001a44 <HAL_Delay>

		DWT->CYCCNT = 0;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <main+0x17c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
		//arm_status status = arm_mat_mult_q31(&matA, &matB, &matOut);
		arm_mat_mult_q31(&matA, &matB, &matOut);
 8000ff2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000ff6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000ffa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fc18 	bl	8001834 <arm_mat_mult_q31>
		cycles = DWT->CYCCNT;
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <main+0x17c>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	677b      	str	r3, [r7, #116]	@ 0x74
		time = ((float)cycles / SystemCoreClock) * 1000.0;//milli seconds
 800100a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <main+0x180>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001024:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800106c <main+0x184>
 8001028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		printf("Time CMSIS: %f msec, Cycles: %lu\r\n", time, cycles);
 8001030:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001032:	f7ff fab1 	bl	8000598 <__aeabi_f2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800103c:	9100      	str	r1, [sp, #0]
 800103e:	480d      	ldr	r0, [pc, #52]	@ (8001074 <main+0x18c>)
 8001040:	f003 fc72 	bl	8004928 <iprintf>
		HAL_Delay(500);
 8001044:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001048:	f000 fcfc 	bl	8001a44 <HAL_Delay>
  {
 800104c:	e767      	b.n	8000f1e <main+0x36>
 800104e:	bf00      	nop
 8001050:	080068f0 	.word	0x080068f0
 8001054:	e000edf0 	.word	0xe000edf0
 8001058:	08006948 	.word	0x08006948
 800105c:	08006958 	.word	0x08006958
 8001060:	08006968 	.word	0x08006968
 8001064:	e0001000 	.word	0xe0001000
 8001068:	20000000 	.word	0x20000000
 800106c:	447a0000 	.word	0x447a0000
 8001070:	08006904 	.word	0x08006904
 8001074:	08006924 	.word	0x08006924

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	@ 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0318 	add.w	r3, r7, #24
 8001082:	2238      	movs	r2, #56	@ 0x38
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f003 fd96 	bl	8004bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 fffe 	bl	800209c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010aa:	2340      	movs	r3, #64	@ 0x40
 80010ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ae:	2302      	movs	r3, #2
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b2:	2302      	movs	r3, #2
 80010b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010ba:	2355      	movs	r3, #85	@ 0x55
 80010bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 f898 	bl	8002204 <HAL_RCC_OscConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010da:	f000 f911 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010de:	230f      	movs	r3, #15
 80010e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e2:	2303      	movs	r3, #3
 80010e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2104      	movs	r1, #4
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fb96 	bl	8002828 <HAL_RCC_ClockConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001102:	f000 f8fd 	bl	8001300 <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	3750      	adds	r7, #80	@ 0x50
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001114:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <MX_USART2_UART_Init+0x94>)
 8001118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112e:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001146:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800114c:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001158:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 800115a:	f001 ffcf 	bl	80030fc <HAL_UART_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001164:	f000 f8cc 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 800116c:	f002 fdf8 	bl	8003d60 <HAL_UARTEx_SetTxFifoThreshold>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001176:	f000 f8c3 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117a:	2100      	movs	r1, #0
 800117c:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 800117e:	f002 fe2d 	bl	8003ddc <HAL_UARTEx_SetRxFifoThreshold>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001188:	f000 f8ba 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <MX_USART2_UART_Init+0x90>)
 800118e:	f002 fdae 	bl	8003cee <HAL_UARTEx_DisableFifoMode>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001198:	f000 f8b2 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000200 	.word	0x20000200
 80011a4:	40004400 	.word	0x40004400

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <MX_GPIO_Init+0x74>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a1a      	ldr	r2, [pc, #104]	@ (800121c <MX_GPIO_Init+0x74>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <MX_GPIO_Init+0x74>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_GPIO_Init+0x74>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a14      	ldr	r2, [pc, #80]	@ (800121c <MX_GPIO_Init+0x74>)
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_GPIO_Init+0x74>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_GPIO_Init+0x74>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <MX_GPIO_Init+0x74>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_GPIO_Init+0x74>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_GPIO_Init+0x74>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	4a08      	ldr	r2, [pc, #32]	@ (800121c <MX_GPIO_Init+0x74>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_GPIO_Init+0x74>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001228:	1d39      	adds	r1, r7, #4
 800122a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800122e:	2201      	movs	r2, #1
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <__io_putchar+0x20>)
 8001232:	f001 ffb3 	bl	800319c <HAL_UART_Transmit>

  return ch;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000200 	.word	0x20000200

08001244 <multiplyMatrix>:

void multiplyMatrix(int m1[][C1], int m2[][C2])
{
 8001244:	b480      	push	{r7}
 8001246:	b08d      	sub	sp, #52	@ 0x34
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	int result[R1][C2];

	//printf("Resultant Matrix is:\n\r");


	for (int i = 0; i < R1; i++) {
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001252:	e04b      	b.n	80012ec <multiplyMatrix+0xa8>
		for (int j = 0; j < C2; j++) {
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001258:	e042      	b.n	80012e0 <multiplyMatrix+0x9c>
			result[i][j] = 0;
 800125a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	3330      	adds	r3, #48	@ 0x30
 800126a:	443b      	add	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	f843 2c24 	str.w	r2, [r3, #-36]

			for (int k = 0; k < R2; k++) {
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
 8001276:	e02d      	b.n	80012d4 <multiplyMatrix+0x90>
				result[i][j] += m1[i][k] * m2[k][j];
 8001278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	3330      	adds	r3, #48	@ 0x30
 8001288:	443b      	add	r3, r7
 800128a:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800128e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001298:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800129c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	461a      	mov	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b2:	fb00 f303 	mul.w	r3, r0, r3
 80012b6:	4419      	add	r1, r3
 80012b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	3330      	adds	r3, #48	@ 0x30
 80012c8:	443b      	add	r3, r7
 80012ca:	f843 1c24 	str.w	r1, [r3, #-36]
			for (int k = 0; k < R2; k++) {
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	3301      	adds	r3, #1
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	ddce      	ble.n	8001278 <multiplyMatrix+0x34>
		for (int j = 0; j < C2; j++) {
 80012da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012dc:	3301      	adds	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	ddb9      	ble.n	800125a <multiplyMatrix+0x16>
	for (int i = 0; i < R1; i++) {
 80012e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e8:	3301      	adds	r3, #1
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	ddb0      	ble.n	8001254 <multiplyMatrix+0x10>
			//printf("%d",result[i][j]);
		}

		//printf("\n\r");
	}
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3734      	adds	r7, #52	@ 0x34
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <Error_Handler+0x8>

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_MspInit+0x44>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001316:	4a0e      	ldr	r2, [pc, #56]	@ (8001350 <HAL_MspInit+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6613      	str	r3, [r2, #96]	@ 0x60
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_MspInit+0x44>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_MspInit+0x44>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <HAL_MspInit+0x44>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	6593      	str	r3, [r2, #88]	@ 0x58
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_MspInit+0x44>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001342:	f000 ff4f 	bl	80021e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b09e      	sub	sp, #120	@ 0x78
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2254      	movs	r2, #84	@ 0x54
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fc1f 	bl	8004bb8 <memset>
  if(huart->Instance==USART2)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1f      	ldr	r2, [pc, #124]	@ (80013fc <HAL_UART_MspInit+0xa8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d136      	bne.n	80013f2 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001384:	2302      	movs	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fc65 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800139c:	f7ff ffb0 	bl	8001300 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a0:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_UART_MspInit+0xac>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a4:	4a16      	ldr	r2, [pc, #88]	@ (8001400 <HAL_UART_MspInit+0xac>)
 80013a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <HAL_UART_MspInit+0xac>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_UART_MspInit+0xac>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013bc:	4a10      	ldr	r2, [pc, #64]	@ (8001400 <HAL_UART_MspInit+0xac>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <HAL_UART_MspInit+0xac>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013d0:	230c      	movs	r3, #12
 80013d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e0:	2307      	movs	r3, #7
 80013e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ee:	f000 fcbb 	bl	8001d68 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013f2:	bf00      	nop
 80013f4:	3778      	adds	r7, #120	@ 0x78
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40004400 	.word	0x40004400
 8001400:	40021000 	.word	0x40021000

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <NMI_Handler+0x4>

0800140c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <MemManage_Handler+0x4>

0800141c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <UsageFault_Handler+0x4>

0800142c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145a:	f000 fad5 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}

08001462 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001466:	2000      	movs	r0, #0
 8001468:	f000 f9a8 	bl	80017bc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_kill>:

int _kill(int pid, int sig)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800148a:	f003 fbe7 	bl	8004c5c <__errno>
 800148e:	4603      	mov	r3, r0
 8001490:	2216      	movs	r2, #22
 8001492:	601a      	str	r2, [r3, #0]
  return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_exit>:

void _exit (int status)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ffe7 	bl	8001480 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014b2:	bf00      	nop
 80014b4:	e7fd      	b.n	80014b2 <_exit+0x12>

080014b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e00a      	b.n	80014de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014c8:	f3af 8000 	nop.w
 80014cc:	4601      	mov	r1, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	60ba      	str	r2, [r7, #8]
 80014d4:	b2ca      	uxtb	r2, r1
 80014d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbf0      	blt.n	80014c8 <_read+0x12>
  }

  return len;
 80014e6:	687b      	ldr	r3, [r7, #4]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e009      	b.n	8001516 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	60ba      	str	r2, [r7, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fe88 	bl	8001220 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	dbf1      	blt.n	8001502 <_write+0x12>
  }
  return len;
 800151e:	687b      	ldr	r3, [r7, #4]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_close>:

int _close(int file)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001550:	605a      	str	r2, [r3, #4]
  return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_isatty>:

int _isatty(int file)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001568:	2301      	movs	r3, #1
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	@ (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f003 fb4c 	bl	8004c5c <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20020000 	.word	0x20020000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	20000294 	.word	0x20000294
 80015f8:	200003f0 	.word	0x200003f0

080015fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <SystemInit+0x20>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001606:	4a05      	ldr	r2, [pc, #20]	@ (800161c <SystemInit+0x20>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001620:	480d      	ldr	r0, [pc, #52]	@ (8001658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001622:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001624:	f7ff ffea 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <LoopForever+0x6>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	@ (8001660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <LoopForever+0xe>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	@ (800166c <LoopForever+0x16>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f003 fb0b 	bl	8004c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001652:	f7ff fc49 	bl	8000ee8 <main>

08001656 <LoopForever>:

LoopForever:
    b LoopForever
 8001656:	e7fe      	b.n	8001656 <LoopForever>
  ldr   r0, =_estack
 8001658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001664:	08006d48 	.word	0x08006d48
  ldr r2, =_sbss
 8001668:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800166c:	200003f0 	.word	0x200003f0

08001670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>
	...

08001674 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 800167e:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <BSP_LED_Init+0x64>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a15      	ldr	r2, [pc, #84]	@ (80016d8 <BSP_LED_Init+0x64>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <BSP_LED_Init+0x64>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8001696:	2320      	movs	r3, #32
 8001698:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4a0c      	ldr	r2, [pc, #48]	@ (80016dc <BSP_LED_Init+0x68>)
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	f107 020c 	add.w	r2, r7, #12
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fb57 	bl	8001d68 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <BSP_LED_Init+0x68>)
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	2120      	movs	r1, #32
 80016c4:	2200      	movs	r2, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fcd0 	bl	800206c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	20000004 	.word	0x20000004

080016e0 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	460a      	mov	r2, r1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	4613      	mov	r3, r2
 80016ee:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80016f0:	4b2c      	ldr	r3, [pc, #176]	@ (80017a4 <BSP_PB_Init+0xc4>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f4:	4a2b      	ldr	r2, [pc, #172]	@ (80017a4 <BSP_PB_Init+0xc4>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fc:	4b29      	ldr	r3, [pc, #164]	@ (80017a4 <BSP_PB_Init+0xc4>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001708:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800170c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800170e:	2302      	movs	r3, #2
 8001710:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001716:	79bb      	ldrb	r3, [r7, #6]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10c      	bne.n	8001736 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4a21      	ldr	r2, [pc, #132]	@ (80017a8 <BSP_PB_Init+0xc8>)
 8001724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001728:	f107 020c 	add.w	r2, r7, #12
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fb1a 	bl	8001d68 <HAL_GPIO_Init>
 8001734:	e031      	b.n	800179a <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001736:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800173a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4a1a      	ldr	r2, [pc, #104]	@ (80017a8 <BSP_PB_Init+0xc8>)
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	f107 020c 	add.w	r2, r7, #12
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fb0c 	bl	8001d68 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4a15      	ldr	r2, [pc, #84]	@ (80017ac <BSP_PB_Init+0xcc>)
 8001756:	441a      	add	r2, r3
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4915      	ldr	r1, [pc, #84]	@ (80017b0 <BSP_PB_Init+0xd0>)
 800175c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f000 fabc 	bl	8001ce0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <BSP_PB_Init+0xcc>)
 800176e:	1898      	adds	r0, r3, r2
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4a10      	ldr	r2, [pc, #64]	@ (80017b4 <BSP_PB_Init+0xd4>)
 8001774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001778:	461a      	mov	r2, r3
 800177a:	2100      	movs	r1, #0
 800177c:	f000 fa93 	bl	8001ca6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001780:	2028      	movs	r0, #40	@ 0x28
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	4a0c      	ldr	r2, [pc, #48]	@ (80017b8 <BSP_PB_Init+0xd8>)
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	2200      	movs	r2, #0
 800178c:	4619      	mov	r1, r3
 800178e:	f000 fa56 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001792:	2328      	movs	r3, #40	@ 0x28
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fa6c 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000298 	.word	0x20000298
 80017b0:	08006998 	.word	0x08006998
 80017b4:	2000000c 	.word	0x2000000c
 80017b8:	20000010 	.word	0x20000010

080017bc <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <BSP_PB_IRQHandler+0x20>)
 80017cc:	4413      	add	r3, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fa9a 	bl	8001d08 <HAL_EXTI_IRQHandler>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000298 	.word	0x20000298

080017e0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff fff0 	bl	80017e0 <BSP_PB_Callback>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <arm_mat_init_q31>:
ARM_DSP_ATTRIBUTE void arm_mat_init_q31(
  arm_matrix_instance_q31 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q31_t * pData)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	817b      	strh	r3, [r7, #10]
 8001812:	4613      	mov	r3, r2
 8001814:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	897a      	ldrh	r2, [r7, #10]
 800181a:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	893a      	ldrh	r2, [r7, #8]
 8001820:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	605a      	str	r2, [r3, #4]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <arm_mat_mult_q31>:
#else
ARM_DSP_ATTRIBUTE arm_status arm_mat_mult_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
        arm_matrix_instance_q31 * pDst)
{
 8001834:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001838:	b095      	sub	sp, #84	@ 0x54
 800183a:	af00      	add	r7, sp, #0
 800183c:	6178      	str	r0, [r7, #20]
 800183e:	6139      	str	r1, [r7, #16]
 8001840:	60fa      	str	r2, [r7, #12]
  q31_t *pIn1 = pSrcA->pData;                    /* Input data matrix pointer A */
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  q31_t *pIn2 = pSrcB->pData;                    /* Input data matrix pointer B */
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	64bb      	str	r3, [r7, #72]	@ 0x48
  q31_t *pInA = pSrcA->pData;                    /* Input data matrix pointer A */
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	647b      	str	r3, [r7, #68]	@ 0x44
  q31_t *pInB = pSrcB->pData;                    /* Input data matrix pointer B */
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  q31_t *pOut = pDst->pData;                     /* Output data matrix pointer */
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	623b      	str	r3, [r7, #32]
  q31_t *px;                                     /* Temporary output data matrix pointer */
  q63_t sum;                                     /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	83fb      	strh	r3, [r7, #30]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	885b      	ldrh	r3, [r3, #2]
 800186a:	83bb      	strh	r3, [r7, #28]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	885b      	ldrh	r3, [r3, #2]
 8001870:	837b      	strh	r3, [r7, #26]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8001872:	2300      	movs	r3, #0
 8001874:	633b      	str	r3, [r7, #48]	@ 0x30
 8001876:	8bfb      	ldrh	r3, [r7, #30]
 8001878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800187a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	6a3a      	ldr	r2, [r7, #32]
 8001880:	4413      	add	r3, r2
 8001882:	643b      	str	r3, [r7, #64]	@ 0x40

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8001884:	8bbb      	ldrh	r3, [r7, #28]
 8001886:	637b      	str	r3, [r7, #52]	@ 0x34

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0;
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800189a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800189c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800189e:	8b7b      	ldrh	r3, [r7, #26]
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80018a2:	e026      	b.n	80018f2 <arm_mat_mult_q31+0xbe>
        {
          /* c(m,n) = a(1,1) * b(1,1) + a(1,2) * b(2,1) + .... + a(m,p) * b(p,n) */

          /* Perform the multiply-accumulates */
          sum += (q63_t) *pIn1++ * *pIn2;
 80018a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018a6:	1d1a      	adds	r2, r3, #4
 80018a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	17da      	asrs	r2, r3, #31
 80018ae:	4698      	mov	r8, r3
 80018b0:	4691      	mov	r9, r2
 80018b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	17da      	asrs	r2, r3, #31
 80018b8:	469a      	mov	sl, r3
 80018ba:	4693      	mov	fp, r2
 80018bc:	fb0a f209 	mul.w	r2, sl, r9
 80018c0:	fb08 f30b 	mul.w	r3, r8, fp
 80018c4:	4413      	add	r3, r2
 80018c6:	fba8 450a 	umull	r4, r5, r8, sl
 80018ca:	442b      	add	r3, r5
 80018cc:	461d      	mov	r5, r3
 80018ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018d2:	1911      	adds	r1, r2, r4
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	416b      	adcs	r3, r5
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018de:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
          pIn2 += numColsB;
 80018e2:	8bbb      	ldrh	r3, [r7, #28]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018e8:	4413      	add	r3, r2
 80018ea:	64bb      	str	r3, [r7, #72]	@ 0x48

          /* Decrement loop counter */
          colCnt--;
 80018ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ee:	3b01      	subs	r3, #1
 80018f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (colCnt > 0U)
 80018f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1d5      	bne.n	80018a4 <arm_mat_mult_q31+0x70>
        }

        /* Convert result from 2.62 to 1.31 format and store in destination buffer */
        *px++ = (q31_t) (sum >> 31);
 80018f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	0fc2      	lsrs	r2, r0, #31
 8001906:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800190a:	17cb      	asrs	r3, r1, #31
 800190c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800190e:	1d08      	adds	r0, r1, #4
 8001910:	6438      	str	r0, [r7, #64]	@ 0x40
 8001912:	4613      	mov	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

        /* Decrement column loop counter */
        col--;
 8001916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001918:	3b01      	subs	r3, #1
 800191a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800191c:	8bba      	ldrh	r2, [r7, #28]
 800191e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001926:	4413      	add	r3, r2
 8001928:	64bb      	str	r3, [r7, #72]	@ 0x48

      } while (col > 0U);
 800192a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ae      	bne.n	800188e <arm_mat_mult_q31+0x5a>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8001930:	8bbb      	ldrh	r3, [r7, #28]
 8001932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001934:	4413      	add	r3, r2
 8001936:	633b      	str	r3, [r7, #48]	@ 0x30
      pInA = pInA + numColsA;
 8001938:	8b7b      	ldrh	r3, [r7, #26]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800193e:	4413      	add	r3, r2
 8001940:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Decrement row loop counter */
      row--;
 8001942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001944:	3b01      	subs	r3, #1
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c

    } while (row > 0U);
 8001948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d195      	bne.n	800187a <arm_mat_mult_q31+0x46>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800194e:	2300      	movs	r3, #0
 8001950:	767b      	strb	r3, [r7, #25]
  }

  /* Return to application */
  return (status);
 8001952:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3754      	adds	r7, #84	@ 0x54
 800195a:	46bd      	mov	sp, r7
 800195c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001960:	4770      	bx	lr

08001962 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f000 f95b 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f80e 	bl	8001994 <HAL_InitTick>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	e001      	b.n	8001988 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001984:	f7ff fcc2 	bl	800130c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001988:	79fb      	ldrb	r3, [r7, #7]

}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019a0:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <HAL_InitTick+0x68>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d022      	beq.n	80019ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019a8:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_InitTick+0x6c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <HAL_InitTick+0x68>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f966 	bl	8001c8e <HAL_SYSTICK_Config>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10f      	bne.n	80019e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	d809      	bhi.n	80019e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ce:	2200      	movs	r2, #0
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019d6:	f000 f932 	bl	8001c3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <HAL_InitTick+0x70>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e007      	b.n	80019f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e004      	b.n	80019f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e001      	b.n	80019f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000018 	.word	0x20000018
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000014 	.word	0x20000014

08001a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <HAL_IncTick+0x1c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_IncTick+0x20>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a03      	ldr	r2, [pc, #12]	@ (8001a24 <HAL_IncTick+0x1c>)
 8001a18:	6013      	str	r3, [r2, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	200002a0 	.word	0x200002a0
 8001a28:	20000018 	.word	0x20000018

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200002a0 	.word	0x200002a0

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a5c:	d004      	beq.n	8001a68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_Delay+0x40>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a68:	bf00      	nop
 8001a6a:	f7ff ffdf 	bl	8001a2c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d8f7      	bhi.n	8001a6a <HAL_Delay+0x26>
  {
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000018 	.word	0x20000018

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	@ (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	@ (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	@ (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	@ 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	@ 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4c:	f7ff ff40 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f7ff ff90 	bl	8001b7c <NVIC_EncodePriority>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff5f 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff33 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffa4 	bl	8001be4 <SysTick_Config>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	605a      	str	r2, [r3, #4]
      break;
 8001cc4:	e005      	b.n	8001cd2 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	75fb      	strb	r3, [r7, #23]
      break;
 8001cd0:	bf00      	nop
  }

  return status;
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e003      	b.n	8001cfc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
  }
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	2201      	movs	r2, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	015a      	lsls	r2, r3, #5
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <HAL_EXTI_IRQHandler+0x5c>)
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4798      	blx	r3
    }
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40010414 	.word	0x40010414

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d76:	e15a      	b.n	800202e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 814c 	beq.w	8002028 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d005      	beq.n	8001da8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d130      	bne.n	8001e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dde:	2201      	movs	r2, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 0201 	and.w	r2, r3, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d017      	beq.n	8001e46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d123      	bne.n	8001e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	08da      	lsrs	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3208      	adds	r2, #8
 8001e94:	6939      	ldr	r1, [r7, #16]
 8001e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0203 	and.w	r2, r3, #3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80a6 	beq.w	8002028 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001edc:	4b5b      	ldr	r3, [pc, #364]	@ (800204c <HAL_GPIO_Init+0x2e4>)
 8001ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800204c <HAL_GPIO_Init+0x2e4>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ee8:	4b58      	ldr	r3, [pc, #352]	@ (800204c <HAL_GPIO_Init+0x2e4>)
 8001eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef4:	4a56      	ldr	r2, [pc, #344]	@ (8002050 <HAL_GPIO_Init+0x2e8>)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	3302      	adds	r3, #2
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f1e:	d01f      	beq.n	8001f60 <HAL_GPIO_Init+0x1f8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a4c      	ldr	r2, [pc, #304]	@ (8002054 <HAL_GPIO_Init+0x2ec>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d019      	beq.n	8001f5c <HAL_GPIO_Init+0x1f4>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a4b      	ldr	r2, [pc, #300]	@ (8002058 <HAL_GPIO_Init+0x2f0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d013      	beq.n	8001f58 <HAL_GPIO_Init+0x1f0>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a4a      	ldr	r2, [pc, #296]	@ (800205c <HAL_GPIO_Init+0x2f4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00d      	beq.n	8001f54 <HAL_GPIO_Init+0x1ec>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a49      	ldr	r2, [pc, #292]	@ (8002060 <HAL_GPIO_Init+0x2f8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <HAL_GPIO_Init+0x1e8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a48      	ldr	r2, [pc, #288]	@ (8002064 <HAL_GPIO_Init+0x2fc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_GPIO_Init+0x1e4>
 8001f48:	2305      	movs	r3, #5
 8001f4a:	e00a      	b.n	8001f62 <HAL_GPIO_Init+0x1fa>
 8001f4c:	2306      	movs	r3, #6
 8001f4e:	e008      	b.n	8001f62 <HAL_GPIO_Init+0x1fa>
 8001f50:	2304      	movs	r3, #4
 8001f52:	e006      	b.n	8001f62 <HAL_GPIO_Init+0x1fa>
 8001f54:	2303      	movs	r3, #3
 8001f56:	e004      	b.n	8001f62 <HAL_GPIO_Init+0x1fa>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e002      	b.n	8001f62 <HAL_GPIO_Init+0x1fa>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_GPIO_Init+0x1fa>
 8001f60:	2300      	movs	r3, #0
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	f002 0203 	and.w	r2, r2, #3
 8001f68:	0092      	lsls	r2, r2, #2
 8001f6a:	4093      	lsls	r3, r2
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f72:	4937      	ldr	r1, [pc, #220]	@ (8002050 <HAL_GPIO_Init+0x2e8>)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	3302      	adds	r3, #2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f80:	4b39      	ldr	r3, [pc, #228]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fa4:	4a30      	ldr	r2, [pc, #192]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001faa:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fce:	4a26      	ldr	r2, [pc, #152]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001fd4:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002022:	4a11      	ldr	r2, [pc, #68]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	f47f ae9d 	bne.w	8001d78 <HAL_GPIO_Init+0x10>
  }
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	48000400 	.word	0x48000400
 8002058:	48000800 	.word	0x48000800
 800205c:	48000c00 	.word	0x48000c00
 8002060:	48001000 	.word	0x48001000
 8002064:	48001400 	.word	0x48001400
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002088:	e002      	b.n	8002090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d141      	bne.n	800212e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020aa:	4b4b      	ldr	r3, [pc, #300]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b6:	d131      	bne.n	800211c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b8:	4b47      	ldr	r3, [pc, #284]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020be:	4a46      	ldr	r2, [pc, #280]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c8:	4b43      	ldr	r3, [pc, #268]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020d0:	4a41      	ldr	r2, [pc, #260]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020d8:	4b40      	ldr	r3, [pc, #256]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2232      	movs	r2, #50	@ 0x32
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	4a3f      	ldr	r2, [pc, #252]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	3301      	adds	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ee:	e002      	b.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f6:	4b38      	ldr	r3, [pc, #224]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002102:	d102      	bne.n	800210a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f2      	bne.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800210a:	4b33      	ldr	r3, [pc, #204]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002116:	d158      	bne.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e057      	b.n	80021cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800211c:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002122:	4a2d      	ldr	r2, [pc, #180]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800212c:	e04d      	b.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002134:	d141      	bne.n	80021ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002136:	4b28      	ldr	r3, [pc, #160]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002142:	d131      	bne.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002144:	4b24      	ldr	r3, [pc, #144]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800214a:	4a23      	ldr	r2, [pc, #140]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002150:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002154:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800215c:	4a1e      	ldr	r2, [pc, #120]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002164:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2232      	movs	r2, #50	@ 0x32
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	4a1c      	ldr	r2, [pc, #112]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	3301      	adds	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800217a:	e002      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3b01      	subs	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800218e:	d102      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f2      	bne.n	800217c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a2:	d112      	bne.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e011      	b.n	80021cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021b8:	e007      	b.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021ba:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	40007000 	.word	0x40007000
 80021dc:	20000000 	.word	0x20000000
 80021e0:	431bde83 	.word	0x431bde83

080021e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f2:	6093      	str	r3, [r2, #8]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40007000 	.word	0x40007000

08002204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e2fe      	b.n	8002814 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d075      	beq.n	800230e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002222:	4b97      	ldr	r3, [pc, #604]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222c:	4b94      	ldr	r3, [pc, #592]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d102      	bne.n	8002242 <HAL_RCC_OscConfig+0x3e>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d002      	beq.n	8002248 <HAL_RCC_OscConfig+0x44>
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d10b      	bne.n	8002260 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	4b8d      	ldr	r3, [pc, #564]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d05b      	beq.n	800230c <HAL_RCC_OscConfig+0x108>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d157      	bne.n	800230c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e2d9      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002268:	d106      	bne.n	8002278 <HAL_RCC_OscConfig+0x74>
 800226a:	4b85      	ldr	r3, [pc, #532]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a84      	ldr	r2, [pc, #528]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xb0>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x98>
 8002282:	4b7f      	ldr	r3, [pc, #508]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7e      	ldr	r2, [pc, #504]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b7c      	ldr	r3, [pc, #496]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7b      	ldr	r2, [pc, #492]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xb0>
 800229c:	4b78      	ldr	r3, [pc, #480]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a77      	ldr	r2, [pc, #476]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b75      	ldr	r3, [pc, #468]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a74      	ldr	r2, [pc, #464]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7ff fbb6 	bl	8001a2c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff fbb2 	bl	8001a2c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	@ 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e29e      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xc0>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff fba2 	bl	8001a2c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff fb9e 	bl	8001a2c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e28a      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fe:	4b60      	ldr	r3, [pc, #384]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0xe8>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d075      	beq.n	8002406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231a:	4b59      	ldr	r3, [pc, #356]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002324:	4b56      	ldr	r3, [pc, #344]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2b0c      	cmp	r3, #12
 8002332:	d102      	bne.n	800233a <HAL_RCC_OscConfig+0x136>
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d002      	beq.n	8002340 <HAL_RCC_OscConfig+0x13c>
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d11f      	bne.n	8002380 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002340:	4b4f      	ldr	r3, [pc, #316]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_OscConfig+0x154>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e25d      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b49      	ldr	r3, [pc, #292]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	4946      	ldr	r1, [pc, #280]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800236c:	4b45      	ldr	r3, [pc, #276]	@ (8002484 <HAL_RCC_OscConfig+0x280>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fb0f 	bl	8001994 <HAL_InitTick>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d043      	beq.n	8002404 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e249      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d023      	beq.n	80023d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002388:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3c      	ldr	r2, [pc, #240]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff fb4a 	bl	8001a2c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7ff fb46 	bl	8001a2c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e232      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ae:	4b34      	ldr	r3, [pc, #208]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b31      	ldr	r3, [pc, #196]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	061b      	lsls	r3, r3, #24
 80023c8:	492d      	ldr	r1, [pc, #180]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
 80023ce:	e01a      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 80023d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff fb26 	bl	8001a2c <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7ff fb22 	bl	8001a2c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e20e      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f6:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1e0>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d041      	beq.n	8002496 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01c      	beq.n	8002454 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 800241c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002420:	4a17      	ldr	r2, [pc, #92]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7ff faff 	bl	8001a2c <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002432:	f7ff fafb 	bl	8001a2c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1e7      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002444:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0ef      	beq.n	8002432 <HAL_RCC_OscConfig+0x22e>
 8002452:	e020      	b.n	8002496 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002454:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245a:	4a09      	ldr	r2, [pc, #36]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7ff fae2 	bl	8001a2c <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246a:	e00d      	b.n	8002488 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff fade 	bl	8001a2c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d906      	bls.n	8002488 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1ca      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002488:	4b8c      	ldr	r3, [pc, #560]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ea      	bne.n	800246c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80a6 	beq.w	80025f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024a8:	4b84      	ldr	r3, [pc, #528]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2b4>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x2b6>
 80024b8:	2300      	movs	r3, #0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b7f      	ldr	r3, [pc, #508]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	4a7e      	ldr	r2, [pc, #504]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ca:	4b7c      	ldr	r3, [pc, #496]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024da:	4b79      	ldr	r3, [pc, #484]	@ (80026c0 <HAL_RCC_OscConfig+0x4bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e6:	4b76      	ldr	r3, [pc, #472]	@ (80026c0 <HAL_RCC_OscConfig+0x4bc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a75      	ldr	r2, [pc, #468]	@ (80026c0 <HAL_RCC_OscConfig+0x4bc>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fa9b 	bl	8001a2c <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7ff fa97 	bl	8001a2c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e183      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250c:	4b6c      	ldr	r3, [pc, #432]	@ (80026c0 <HAL_RCC_OscConfig+0x4bc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d108      	bne.n	8002532 <HAL_RCC_OscConfig+0x32e>
 8002520:	4b66      	ldr	r3, [pc, #408]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002526:	4a65      	ldr	r2, [pc, #404]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002530:	e024      	b.n	800257c <HAL_RCC_OscConfig+0x378>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b05      	cmp	r3, #5
 8002538:	d110      	bne.n	800255c <HAL_RCC_OscConfig+0x358>
 800253a:	4b60      	ldr	r3, [pc, #384]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002540:	4a5e      	ldr	r2, [pc, #376]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800254a:	4b5c      	ldr	r3, [pc, #368]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002550:	4a5a      	ldr	r2, [pc, #360]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800255a:	e00f      	b.n	800257c <HAL_RCC_OscConfig+0x378>
 800255c:	4b57      	ldr	r3, [pc, #348]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002562:	4a56      	ldr	r2, [pc, #344]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800256c:	4b53      	ldr	r3, [pc, #332]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002572:	4a52      	ldr	r2, [pc, #328]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d016      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7ff fa52 	bl	8001a2c <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7ff fa4e 	bl	8001a2c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e138      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a2:	4b46      	ldr	r3, [pc, #280]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ed      	beq.n	800258c <HAL_RCC_OscConfig+0x388>
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7ff fa3b 	bl	8001a2c <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7ff fa37 	bl	8001a2c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e121      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d0:	4b3a      	ldr	r3, [pc, #232]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ed      	bne.n	80025ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025de:	7ffb      	ldrb	r3, [r7, #31]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e4:	4b35      	ldr	r3, [pc, #212]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e8:	4a34      	ldr	r2, [pc, #208]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d03c      	beq.n	8002676 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01c      	beq.n	800263e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002604:	4b2d      	ldr	r3, [pc, #180]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002606:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800260a:	4a2c      	ldr	r2, [pc, #176]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7ff fa0a 	bl	8001a2c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800261c:	f7ff fa06 	bl	8001a2c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0f2      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800262e:	4b23      	ldr	r3, [pc, #140]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002630:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ef      	beq.n	800261c <HAL_RCC_OscConfig+0x418>
 800263c:	e01b      	b.n	8002676 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800263e:	4b1f      	ldr	r3, [pc, #124]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002640:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002644:	4a1d      	ldr	r2, [pc, #116]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002646:	f023 0301 	bic.w	r3, r3, #1
 800264a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7ff f9ed 	bl	8001a2c <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002656:	f7ff f9e9 	bl	8001a2c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0d5      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002668:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 800266a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ef      	bne.n	8002656 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80c9 	beq.w	8002812 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002680:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b0c      	cmp	r3, #12
 800268a:	f000 8083 	beq.w	8002794 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d15e      	bne.n	8002754 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <HAL_RCC_OscConfig+0x4b8>)
 800269c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7ff f9c3 	bl	8001a2c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a8:	e00c      	b.n	80026c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026aa:	f7ff f9bf 	bl	8001a2c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d905      	bls.n	80026c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e0ab      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c4:	4b55      	ldr	r3, [pc, #340]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ec      	bne.n	80026aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d0:	4b52      	ldr	r3, [pc, #328]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	4b52      	ldr	r3, [pc, #328]	@ (8002820 <HAL_RCC_OscConfig+0x61c>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6a11      	ldr	r1, [r2, #32]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026e0:	3a01      	subs	r2, #1
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	4311      	orrs	r1, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026ea:	0212      	lsls	r2, r2, #8
 80026ec:	4311      	orrs	r1, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026f2:	0852      	lsrs	r2, r2, #1
 80026f4:	3a01      	subs	r2, #1
 80026f6:	0552      	lsls	r2, r2, #21
 80026f8:	4311      	orrs	r1, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026fe:	0852      	lsrs	r2, r2, #1
 8002700:	3a01      	subs	r2, #1
 8002702:	0652      	lsls	r2, r2, #25
 8002704:	4311      	orrs	r1, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800270a:	06d2      	lsls	r2, r2, #27
 800270c:	430a      	orrs	r2, r1
 800270e:	4943      	ldr	r1, [pc, #268]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002710:	4313      	orrs	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002714:	4b41      	ldr	r3, [pc, #260]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a40      	ldr	r2, [pc, #256]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002720:	4b3e      	ldr	r3, [pc, #248]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4a3d      	ldr	r2, [pc, #244]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800272a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7ff f97e 	bl	8001a2c <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7ff f97a 	bl	8001a2c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e066      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002746:	4b35      	ldr	r3, [pc, #212]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x530>
 8002752:	e05e      	b.n	8002812 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002754:	4b31      	ldr	r3, [pc, #196]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a30      	ldr	r2, [pc, #192]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800275a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800275e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7ff f964 	bl	8001a2c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7ff f960 	bl	8001a2c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e04c      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277a:	4b28      	ldr	r3, [pc, #160]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002786:	4b25      	ldr	r3, [pc, #148]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	4924      	ldr	r1, [pc, #144]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800278c:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <HAL_RCC_OscConfig+0x620>)
 800278e:	4013      	ands	r3, r2
 8002790:	60cb      	str	r3, [r1, #12]
 8002792:	e03e      	b.n	8002812 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e039      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027a0:	4b1e      	ldr	r3, [pc, #120]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0203 	and.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d12c      	bne.n	800280e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	3b01      	subs	r3, #1
 80027c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d123      	bne.n	800280e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d11b      	bne.n	800280e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d113      	bne.n	800280e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	3b01      	subs	r3, #1
 80027f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d109      	bne.n	800280e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	3b01      	subs	r3, #1
 8002808:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	019f800c 	.word	0x019f800c
 8002824:	feeefffc 	.word	0xfeeefffc

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e11e      	b.n	8002a7e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002840:	4b91      	ldr	r3, [pc, #580]	@ (8002a88 <HAL_RCC_ClockConfig+0x260>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d910      	bls.n	8002870 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b8e      	ldr	r3, [pc, #568]	@ (8002a88 <HAL_RCC_ClockConfig+0x260>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 020f 	bic.w	r2, r3, #15
 8002856:	498c      	ldr	r1, [pc, #560]	@ (8002a88 <HAL_RCC_ClockConfig+0x260>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b8a      	ldr	r3, [pc, #552]	@ (8002a88 <HAL_RCC_ClockConfig+0x260>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e106      	b.n	8002a7e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d073      	beq.n	8002964 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d129      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002884:	4b81      	ldr	r3, [pc, #516]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0f4      	b.n	8002a7e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002894:	f000 f99e 	bl	8002bd4 <RCC_GetSysClockFreqFromPLLSource>
 8002898:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4a7c      	ldr	r2, [pc, #496]	@ (8002a90 <HAL_RCC_ClockConfig+0x268>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d93f      	bls.n	8002922 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028a2:	4b7a      	ldr	r3, [pc, #488]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d033      	beq.n	8002922 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d12f      	bne.n	8002922 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028c2:	4b72      	ldr	r3, [pc, #456]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ca:	4a70      	ldr	r2, [pc, #448]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 80028cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028d2:	2380      	movs	r3, #128	@ 0x80
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e024      	b.n	8002922 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0c6      	b.n	8002a7e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f0:	4b66      	ldr	r3, [pc, #408]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0be      	b.n	8002a7e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002900:	f000 f8ce 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002904:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4a61      	ldr	r2, [pc, #388]	@ (8002a90 <HAL_RCC_ClockConfig+0x268>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d909      	bls.n	8002922 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800290e:	4b5f      	ldr	r3, [pc, #380]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002916:	4a5d      	ldr	r2, [pc, #372]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800291c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800291e:	2380      	movs	r3, #128	@ 0x80
 8002920:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b5a      	ldr	r3, [pc, #360]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4957      	ldr	r1, [pc, #348]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002934:	f7ff f87a 	bl	8001a2c <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7ff f876 	bl	8001a2c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e095      	b.n	8002a7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b4e      	ldr	r3, [pc, #312]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d023      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800297c:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a42      	ldr	r2, [pc, #264]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002982:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002986:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002994:	4b3d      	ldr	r3, [pc, #244]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800299c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 800299e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b39      	ldr	r3, [pc, #228]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4936      	ldr	r1, [pc, #216]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
 80029b6:	e008      	b.n	80029ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b80      	cmp	r3, #128	@ 0x80
 80029bc:	d105      	bne.n	80029ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029be:	4b33      	ldr	r3, [pc, #204]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4a32      	ldr	r2, [pc, #200]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 80029c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002a88 <HAL_RCC_ClockConfig+0x260>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d21d      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <HAL_RCC_ClockConfig+0x260>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 020f 	bic.w	r2, r3, #15
 80029e0:	4929      	ldr	r1, [pc, #164]	@ (8002a88 <HAL_RCC_ClockConfig+0x260>)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029e8:	f7ff f820 	bl	8001a2c <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7ff f81c 	bl	8001a2c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e03b      	b.n	8002a7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b20      	ldr	r3, [pc, #128]	@ (8002a88 <HAL_RCC_ClockConfig+0x260>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d1ed      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4917      	ldr	r1, [pc, #92]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a3e:	4b13      	ldr	r3, [pc, #76]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490f      	ldr	r1, [pc, #60]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a52:	f000 f825 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <HAL_RCC_ClockConfig+0x264>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	490c      	ldr	r1, [pc, #48]	@ (8002a94 <HAL_RCC_ClockConfig+0x26c>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a98 <HAL_RCC_ClockConfig+0x270>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a72:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_RCC_ClockConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe ff8c 	bl	8001994 <HAL_InitTick>
 8002a7c:	4603      	mov	r3, r0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	04c4b400 	.word	0x04c4b400
 8002a94:	08006980 	.word	0x08006980
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20000014 	.word	0x20000014

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	e047      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ab8:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d102      	bne.n	8002aca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ac4:	4b26      	ldr	r3, [pc, #152]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e03e      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002aca:	4b23      	ldr	r3, [pc, #140]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d136      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ad6:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3301      	adds	r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d10c      	bne.n	8002b0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002af4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	4a16      	ldr	r2, [pc, #88]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afe:	68d2      	ldr	r2, [r2, #12]
 8002b00:	0a12      	lsrs	r2, r2, #8
 8002b02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	617b      	str	r3, [r7, #20]
      break;
 8002b0c:	e00c      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b0e:	4a13      	ldr	r2, [pc, #76]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	4a10      	ldr	r2, [pc, #64]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b18:	68d2      	ldr	r2, [r2, #12]
 8002b1a:	0a12      	lsrs	r2, r2, #8
 8002b1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
      break;
 8002b26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0e5b      	lsrs	r3, r3, #25
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	3301      	adds	r3, #1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	e001      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b48:	693b      	ldr	r3, [r7, #16]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	00f42400 	.word	0x00f42400
 8002b60:	016e3600 	.word	0x016e3600

08002b64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b03      	ldr	r3, [pc, #12]	@ (8002b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000

08002b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b80:	f7ff fff0 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4904      	ldr	r1, [pc, #16]	@ (8002ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08006990 	.word	0x08006990

08002ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bac:	f7ff ffda 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0adb      	lsrs	r3, r3, #11
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4904      	ldr	r1, [pc, #16]	@ (8002bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	08006990 	.word	0x08006990

08002bd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bda:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002be4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	3301      	adds	r3, #1
 8002bf0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d10c      	bne.n	8002c12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bf8:	4a17      	ldr	r2, [pc, #92]	@ (8002c58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	4a14      	ldr	r2, [pc, #80]	@ (8002c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c02:	68d2      	ldr	r2, [r2, #12]
 8002c04:	0a12      	lsrs	r2, r2, #8
 8002c06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	617b      	str	r3, [r7, #20]
    break;
 8002c10:	e00c      	b.n	8002c2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c12:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c1c:	68d2      	ldr	r2, [r2, #12]
 8002c1e:	0a12      	lsrs	r2, r2, #8
 8002c20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	617b      	str	r3, [r7, #20]
    break;
 8002c2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	0e5b      	lsrs	r3, r3, #25
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	3301      	adds	r3, #1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c46:	687b      	ldr	r3, [r7, #4]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	40021000 	.word	0x40021000
 8002c58:	016e3600 	.word	0x016e3600
 8002c5c:	00f42400 	.word	0x00f42400

08002c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c68:	2300      	movs	r3, #0
 8002c6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8098 	beq.w	8002dae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c82:	4b43      	ldr	r3, [pc, #268]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4b40      	ldr	r3, [pc, #256]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	4a3f      	ldr	r2, [pc, #252]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002caa:	4b3a      	ldr	r3, [pc, #232]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a39      	ldr	r2, [pc, #228]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cb6:	f7fe feb9 	bl	8001a2c <HAL_GetTick>
 8002cba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cbc:	e009      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbe:	f7fe feb5 	bl	8001a2c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d902      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	74fb      	strb	r3, [r7, #19]
        break;
 8002cd0:	e005      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd2:	4b30      	ldr	r3, [pc, #192]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ef      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cde:	7cfb      	ldrb	r3, [r7, #19]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d159      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01e      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d019      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d00:	4b23      	ldr	r3, [pc, #140]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d0c:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d12:	4a1f      	ldr	r2, [pc, #124]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d22:	4a1b      	ldr	r2, [pc, #108]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d2c:	4a18      	ldr	r2, [pc, #96]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fe75 	bl	8001a2c <HAL_GetTick>
 8002d42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d44:	e00b      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe fe71 	bl	8001a2c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d902      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d5c:	e006      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ec      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10b      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d72:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d80:	4903      	ldr	r1, [pc, #12]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d88:	e008      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	74bb      	strb	r3, [r7, #18]
 8002d8e:	e005      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d9c:	7c7b      	ldrb	r3, [r7, #17]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4ba7      	ldr	r3, [pc, #668]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da6:	4aa6      	ldr	r2, [pc, #664]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dba:	4ba1      	ldr	r3, [pc, #644]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc0:	f023 0203 	bic.w	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	499d      	ldr	r1, [pc, #628]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ddc:	4b98      	ldr	r3, [pc, #608]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de2:	f023 020c 	bic.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	4995      	ldr	r1, [pc, #596]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dfe:	4b90      	ldr	r3, [pc, #576]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	498c      	ldr	r1, [pc, #560]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e20:	4b87      	ldr	r3, [pc, #540]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	4984      	ldr	r1, [pc, #528]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e42:	4b7f      	ldr	r3, [pc, #508]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	497b      	ldr	r1, [pc, #492]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e64:	4b76      	ldr	r3, [pc, #472]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	4973      	ldr	r1, [pc, #460]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e86:	4b6e      	ldr	r3, [pc, #440]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	496a      	ldr	r1, [pc, #424]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ea8:	4b65      	ldr	r3, [pc, #404]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4962      	ldr	r1, [pc, #392]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eca:	4b5d      	ldr	r3, [pc, #372]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	4959      	ldr	r1, [pc, #356]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eec:	4b54      	ldr	r3, [pc, #336]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ef2:	f023 0203 	bic.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	4951      	ldr	r1, [pc, #324]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	4948      	ldr	r1, [pc, #288]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d015      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f30:	4b43      	ldr	r3, [pc, #268]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	4940      	ldr	r1, [pc, #256]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f50:	4b3b      	ldr	r3, [pc, #236]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a3a      	ldr	r2, [pc, #232]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f5a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d015      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f68:	4b35      	ldr	r3, [pc, #212]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f76:	4932      	ldr	r1, [pc, #200]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f86:	d105      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f88:	4b2d      	ldr	r3, [pc, #180]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f92:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fa0:	4b27      	ldr	r3, [pc, #156]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fae:	4924      	ldr	r1, [pc, #144]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe6:	4916      	ldr	r1, [pc, #88]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ff6:	d105      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff8:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a10      	ldr	r2, [pc, #64]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003002:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d019      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003010:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003016:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	4908      	ldr	r1, [pc, #32]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800302e:	d109      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a02      	ldr	r2, [pc, #8]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800303a:	60d3      	str	r3, [r2, #12]
 800303c:	e002      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d015      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003050:	4b29      	ldr	r3, [pc, #164]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003056:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	4926      	ldr	r1, [pc, #152]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800306e:	d105      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003070:	4b21      	ldr	r3, [pc, #132]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a20      	ldr	r2, [pc, #128]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003088:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003096:	4918      	ldr	r1, [pc, #96]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a6:	d105      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030a8:	4b13      	ldr	r3, [pc, #76]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a12      	ldr	r2, [pc, #72]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d015      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030c0:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	490a      	ldr	r1, [pc, #40]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030de:	d105      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a04      	ldr	r2, [pc, #16]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e042      	b.n	8003194 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fe f917 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2224      	movs	r2, #36	@ 0x24
 800312a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fbb2 	bl	80038b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f8b3 	bl	80032b8 <UART_SetConfig>
 8003152:	4603      	mov	r3, r0
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e01b      	b.n	8003194 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800316a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800317a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fc31 	bl	80039f4 <UART_CheckIdleState>
 8003192:	4603      	mov	r3, r0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d17b      	bne.n	80032ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_UART_Transmit+0x26>
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e074      	b.n	80032b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2221      	movs	r2, #33	@ 0x21
 80031d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031d6:	f7fe fc29 	bl	8001a2c <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	88fa      	ldrh	r2, [r7, #6]
 80031e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f4:	d108      	bne.n	8003208 <HAL_UART_Transmit+0x6c>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d104      	bne.n	8003208 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	e003      	b.n	8003210 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003210:	e030      	b.n	8003274 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	2180      	movs	r1, #128	@ 0x80
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fc93 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e03d      	b.n	80032b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10b      	bne.n	8003252 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003248:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	3302      	adds	r3, #2
 800324e:	61bb      	str	r3, [r7, #24]
 8003250:	e007      	b.n	8003262 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	781a      	ldrb	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	3301      	adds	r3, #1
 8003260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1c8      	bne.n	8003212 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2200      	movs	r2, #0
 8003288:	2140      	movs	r1, #64	@ 0x40
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fc5c 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e006      	b.n	80032b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b08c      	sub	sp, #48	@ 0x30
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	4313      	orrs	r3, r2
 80032de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4baa      	ldr	r3, [pc, #680]	@ (8003590 <UART_SetConfig+0x2d8>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a9f      	ldr	r2, [pc, #636]	@ (8003594 <UART_SetConfig+0x2dc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003320:	4313      	orrs	r3, r2
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800332e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003338:	430b      	orrs	r3, r1
 800333a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	f023 010f 	bic.w	r1, r3, #15
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a90      	ldr	r2, [pc, #576]	@ (8003598 <UART_SetConfig+0x2e0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d125      	bne.n	80033a8 <UART_SetConfig+0xf0>
 800335c:	4b8f      	ldr	r3, [pc, #572]	@ (800359c <UART_SetConfig+0x2e4>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b03      	cmp	r3, #3
 8003368:	d81a      	bhi.n	80033a0 <UART_SetConfig+0xe8>
 800336a:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <UART_SetConfig+0xb8>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003381 	.word	0x08003381
 8003374:	08003391 	.word	0x08003391
 8003378:	08003389 	.word	0x08003389
 800337c:	08003399 	.word	0x08003399
 8003380:	2301      	movs	r3, #1
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003386:	e116      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003388:	2302      	movs	r3, #2
 800338a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800338e:	e112      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003390:	2304      	movs	r3, #4
 8003392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003396:	e10e      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003398:	2308      	movs	r3, #8
 800339a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800339e:	e10a      	b.n	80035b6 <UART_SetConfig+0x2fe>
 80033a0:	2310      	movs	r3, #16
 80033a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033a6:	e106      	b.n	80035b6 <UART_SetConfig+0x2fe>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a7c      	ldr	r2, [pc, #496]	@ (80035a0 <UART_SetConfig+0x2e8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d138      	bne.n	8003424 <UART_SetConfig+0x16c>
 80033b2:	4b7a      	ldr	r3, [pc, #488]	@ (800359c <UART_SetConfig+0x2e4>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d82d      	bhi.n	800341c <UART_SetConfig+0x164>
 80033c0:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <UART_SetConfig+0x110>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080033fd 	.word	0x080033fd
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	0800341d 	.word	0x0800341d
 80033d8:	0800340d 	.word	0x0800340d
 80033dc:	0800341d 	.word	0x0800341d
 80033e0:	0800341d 	.word	0x0800341d
 80033e4:	0800341d 	.word	0x0800341d
 80033e8:	08003405 	.word	0x08003405
 80033ec:	0800341d 	.word	0x0800341d
 80033f0:	0800341d 	.word	0x0800341d
 80033f4:	0800341d 	.word	0x0800341d
 80033f8:	08003415 	.word	0x08003415
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003402:	e0d8      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003404:	2302      	movs	r3, #2
 8003406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800340a:	e0d4      	b.n	80035b6 <UART_SetConfig+0x2fe>
 800340c:	2304      	movs	r3, #4
 800340e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003412:	e0d0      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003414:	2308      	movs	r3, #8
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800341a:	e0cc      	b.n	80035b6 <UART_SetConfig+0x2fe>
 800341c:	2310      	movs	r3, #16
 800341e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003422:	e0c8      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5e      	ldr	r2, [pc, #376]	@ (80035a4 <UART_SetConfig+0x2ec>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d125      	bne.n	800347a <UART_SetConfig+0x1c2>
 800342e:	4b5b      	ldr	r3, [pc, #364]	@ (800359c <UART_SetConfig+0x2e4>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003434:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003438:	2b30      	cmp	r3, #48	@ 0x30
 800343a:	d016      	beq.n	800346a <UART_SetConfig+0x1b2>
 800343c:	2b30      	cmp	r3, #48	@ 0x30
 800343e:	d818      	bhi.n	8003472 <UART_SetConfig+0x1ba>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d00a      	beq.n	800345a <UART_SetConfig+0x1a2>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d814      	bhi.n	8003472 <UART_SetConfig+0x1ba>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <UART_SetConfig+0x19a>
 800344c:	2b10      	cmp	r3, #16
 800344e:	d008      	beq.n	8003462 <UART_SetConfig+0x1aa>
 8003450:	e00f      	b.n	8003472 <UART_SetConfig+0x1ba>
 8003452:	2300      	movs	r3, #0
 8003454:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003458:	e0ad      	b.n	80035b6 <UART_SetConfig+0x2fe>
 800345a:	2302      	movs	r3, #2
 800345c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003460:	e0a9      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003462:	2304      	movs	r3, #4
 8003464:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003468:	e0a5      	b.n	80035b6 <UART_SetConfig+0x2fe>
 800346a:	2308      	movs	r3, #8
 800346c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003470:	e0a1      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003472:	2310      	movs	r3, #16
 8003474:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003478:	e09d      	b.n	80035b6 <UART_SetConfig+0x2fe>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a4a      	ldr	r2, [pc, #296]	@ (80035a8 <UART_SetConfig+0x2f0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d125      	bne.n	80034d0 <UART_SetConfig+0x218>
 8003484:	4b45      	ldr	r3, [pc, #276]	@ (800359c <UART_SetConfig+0x2e4>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800348e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003490:	d016      	beq.n	80034c0 <UART_SetConfig+0x208>
 8003492:	2bc0      	cmp	r3, #192	@ 0xc0
 8003494:	d818      	bhi.n	80034c8 <UART_SetConfig+0x210>
 8003496:	2b80      	cmp	r3, #128	@ 0x80
 8003498:	d00a      	beq.n	80034b0 <UART_SetConfig+0x1f8>
 800349a:	2b80      	cmp	r3, #128	@ 0x80
 800349c:	d814      	bhi.n	80034c8 <UART_SetConfig+0x210>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <UART_SetConfig+0x1f0>
 80034a2:	2b40      	cmp	r3, #64	@ 0x40
 80034a4:	d008      	beq.n	80034b8 <UART_SetConfig+0x200>
 80034a6:	e00f      	b.n	80034c8 <UART_SetConfig+0x210>
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ae:	e082      	b.n	80035b6 <UART_SetConfig+0x2fe>
 80034b0:	2302      	movs	r3, #2
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034b6:	e07e      	b.n	80035b6 <UART_SetConfig+0x2fe>
 80034b8:	2304      	movs	r3, #4
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034be:	e07a      	b.n	80035b6 <UART_SetConfig+0x2fe>
 80034c0:	2308      	movs	r3, #8
 80034c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034c6:	e076      	b.n	80035b6 <UART_SetConfig+0x2fe>
 80034c8:	2310      	movs	r3, #16
 80034ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ce:	e072      	b.n	80035b6 <UART_SetConfig+0x2fe>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a35      	ldr	r2, [pc, #212]	@ (80035ac <UART_SetConfig+0x2f4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d12a      	bne.n	8003530 <UART_SetConfig+0x278>
 80034da:	4b30      	ldr	r3, [pc, #192]	@ (800359c <UART_SetConfig+0x2e4>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034e8:	d01a      	beq.n	8003520 <UART_SetConfig+0x268>
 80034ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034ee:	d81b      	bhi.n	8003528 <UART_SetConfig+0x270>
 80034f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034f4:	d00c      	beq.n	8003510 <UART_SetConfig+0x258>
 80034f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034fa:	d815      	bhi.n	8003528 <UART_SetConfig+0x270>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <UART_SetConfig+0x250>
 8003500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003504:	d008      	beq.n	8003518 <UART_SetConfig+0x260>
 8003506:	e00f      	b.n	8003528 <UART_SetConfig+0x270>
 8003508:	2300      	movs	r3, #0
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800350e:	e052      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003510:	2302      	movs	r3, #2
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003516:	e04e      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003518:	2304      	movs	r3, #4
 800351a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800351e:	e04a      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003520:	2308      	movs	r3, #8
 8003522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003526:	e046      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003528:	2310      	movs	r3, #16
 800352a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800352e:	e042      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a17      	ldr	r2, [pc, #92]	@ (8003594 <UART_SetConfig+0x2dc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d13a      	bne.n	80035b0 <UART_SetConfig+0x2f8>
 800353a:	4b18      	ldr	r3, [pc, #96]	@ (800359c <UART_SetConfig+0x2e4>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003540:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003544:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003548:	d01a      	beq.n	8003580 <UART_SetConfig+0x2c8>
 800354a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800354e:	d81b      	bhi.n	8003588 <UART_SetConfig+0x2d0>
 8003550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003554:	d00c      	beq.n	8003570 <UART_SetConfig+0x2b8>
 8003556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800355a:	d815      	bhi.n	8003588 <UART_SetConfig+0x2d0>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <UART_SetConfig+0x2b0>
 8003560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003564:	d008      	beq.n	8003578 <UART_SetConfig+0x2c0>
 8003566:	e00f      	b.n	8003588 <UART_SetConfig+0x2d0>
 8003568:	2300      	movs	r3, #0
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800356e:	e022      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003570:	2302      	movs	r3, #2
 8003572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003576:	e01e      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003578:	2304      	movs	r3, #4
 800357a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800357e:	e01a      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003580:	2308      	movs	r3, #8
 8003582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003586:	e016      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003588:	2310      	movs	r3, #16
 800358a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800358e:	e012      	b.n	80035b6 <UART_SetConfig+0x2fe>
 8003590:	cfff69f3 	.word	0xcfff69f3
 8003594:	40008000 	.word	0x40008000
 8003598:	40013800 	.word	0x40013800
 800359c:	40021000 	.word	0x40021000
 80035a0:	40004400 	.word	0x40004400
 80035a4:	40004800 	.word	0x40004800
 80035a8:	40004c00 	.word	0x40004c00
 80035ac:	40005000 	.word	0x40005000
 80035b0:	2310      	movs	r3, #16
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4aae      	ldr	r2, [pc, #696]	@ (8003874 <UART_SetConfig+0x5bc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	f040 8097 	bne.w	80036f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d823      	bhi.n	8003612 <UART_SetConfig+0x35a>
 80035ca:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <UART_SetConfig+0x318>)
 80035cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	08003613 	.word	0x08003613
 80035d8:	080035fd 	.word	0x080035fd
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003603 	.word	0x08003603
 80035e4:	08003613 	.word	0x08003613
 80035e8:	08003613 	.word	0x08003613
 80035ec:	08003613 	.word	0x08003613
 80035f0:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f4:	f7ff fac2 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 80035f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035fa:	e010      	b.n	800361e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b9e      	ldr	r3, [pc, #632]	@ (8003878 <UART_SetConfig+0x5c0>)
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003600:	e00d      	b.n	800361e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7ff fa4d 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8003606:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003608:	e009      	b.n	800361e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003610:	e005      	b.n	800361e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800361c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8130 	beq.w	8003886 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	4a94      	ldr	r2, [pc, #592]	@ (800387c <UART_SetConfig+0x5c4>)
 800362c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003630:	461a      	mov	r2, r3
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	fbb3 f3f2 	udiv	r3, r3, r2
 8003638:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	429a      	cmp	r2, r3
 8003648:	d305      	bcc.n	8003656 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	429a      	cmp	r2, r3
 8003654:	d903      	bls.n	800365e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800365c:	e113      	b.n	8003886 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	2200      	movs	r2, #0
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	60fa      	str	r2, [r7, #12]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	4a84      	ldr	r2, [pc, #528]	@ (800387c <UART_SetConfig+0x5c4>)
 800366c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003670:	b29b      	uxth	r3, r3
 8003672:	2200      	movs	r2, #0
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800367c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003680:	f7fd faba 	bl	8000bf8 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	020b      	lsls	r3, r1, #8
 8003696:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800369a:	0202      	lsls	r2, r0, #8
 800369c:	6979      	ldr	r1, [r7, #20]
 800369e:	6849      	ldr	r1, [r1, #4]
 80036a0:	0849      	lsrs	r1, r1, #1
 80036a2:	2000      	movs	r0, #0
 80036a4:	460c      	mov	r4, r1
 80036a6:	4605      	mov	r5, r0
 80036a8:	eb12 0804 	adds.w	r8, r2, r4
 80036ac:	eb43 0905 	adc.w	r9, r3, r5
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	469a      	mov	sl, r3
 80036b8:	4693      	mov	fp, r2
 80036ba:	4652      	mov	r2, sl
 80036bc:	465b      	mov	r3, fp
 80036be:	4640      	mov	r0, r8
 80036c0:	4649      	mov	r1, r9
 80036c2:	f7fd fa99 	bl	8000bf8 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4613      	mov	r3, r2
 80036cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036d4:	d308      	bcc.n	80036e8 <UART_SetConfig+0x430>
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036dc:	d204      	bcs.n	80036e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a3a      	ldr	r2, [r7, #32]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e0ce      	b.n	8003886 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80036ee:	e0ca      	b.n	8003886 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f8:	d166      	bne.n	80037c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80036fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d827      	bhi.n	8003752 <UART_SetConfig+0x49a>
 8003702:	a201      	add	r2, pc, #4	@ (adr r2, 8003708 <UART_SetConfig+0x450>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	0800372d 	.word	0x0800372d
 800370c:	08003735 	.word	0x08003735
 8003710:	0800373d 	.word	0x0800373d
 8003714:	08003753 	.word	0x08003753
 8003718:	08003743 	.word	0x08003743
 800371c:	08003753 	.word	0x08003753
 8003720:	08003753 	.word	0x08003753
 8003724:	08003753 	.word	0x08003753
 8003728:	0800374b 	.word	0x0800374b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372c:	f7ff fa26 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 8003730:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003732:	e014      	b.n	800375e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003734:	f7ff fa38 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 8003738:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800373a:	e010      	b.n	800375e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800373c:	4b4e      	ldr	r3, [pc, #312]	@ (8003878 <UART_SetConfig+0x5c0>)
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003740:	e00d      	b.n	800375e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003742:	f7ff f9ad 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8003746:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003748:	e009      	b.n	800375e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003750:	e005      	b.n	800375e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800375c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8090 	beq.w	8003886 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	4a44      	ldr	r2, [pc, #272]	@ (800387c <UART_SetConfig+0x5c4>)
 800376c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003770:	461a      	mov	r2, r3
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	fbb3 f3f2 	udiv	r3, r3, r2
 8003778:	005a      	lsls	r2, r3, #1
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	441a      	add	r2, r3
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	d916      	bls.n	80037c0 <UART_SetConfig+0x508>
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003798:	d212      	bcs.n	80037c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	b29b      	uxth	r3, r3
 800379e:	f023 030f 	bic.w	r3, r3, #15
 80037a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	8bfb      	ldrh	r3, [r7, #30]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	8bfa      	ldrh	r2, [r7, #30]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	e062      	b.n	8003886 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80037c6:	e05e      	b.n	8003886 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d828      	bhi.n	8003822 <UART_SetConfig+0x56a>
 80037d0:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <UART_SetConfig+0x520>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	080037fd 	.word	0x080037fd
 80037dc:	08003805 	.word	0x08003805
 80037e0:	0800380d 	.word	0x0800380d
 80037e4:	08003823 	.word	0x08003823
 80037e8:	08003813 	.word	0x08003813
 80037ec:	08003823 	.word	0x08003823
 80037f0:	08003823 	.word	0x08003823
 80037f4:	08003823 	.word	0x08003823
 80037f8:	0800381b 	.word	0x0800381b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037fc:	f7ff f9be 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 8003800:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003802:	e014      	b.n	800382e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003804:	f7ff f9d0 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 8003808:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800380a:	e010      	b.n	800382e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800380c:	4b1a      	ldr	r3, [pc, #104]	@ (8003878 <UART_SetConfig+0x5c0>)
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003810:	e00d      	b.n	800382e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003812:	f7ff f945 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8003816:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003818:	e009      	b.n	800382e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003820:	e005      	b.n	800382e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800382c:	bf00      	nop
    }

    if (pclk != 0U)
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	2b00      	cmp	r3, #0
 8003832:	d028      	beq.n	8003886 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	4a10      	ldr	r2, [pc, #64]	@ (800387c <UART_SetConfig+0x5c4>)
 800383a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800383e:	461a      	mov	r2, r3
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	fbb3 f2f2 	udiv	r2, r3, r2
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	441a      	add	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	2b0f      	cmp	r3, #15
 800385c:	d910      	bls.n	8003880 <UART_SetConfig+0x5c8>
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003864:	d20c      	bcs.n	8003880 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	b29a      	uxth	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60da      	str	r2, [r3, #12]
 8003870:	e009      	b.n	8003886 <UART_SetConfig+0x5ce>
 8003872:	bf00      	nop
 8003874:	40008000 	.word	0x40008000
 8003878:	00f42400 	.word	0x00f42400
 800387c:	0800699c 	.word	0x0800699c
      }
      else
      {
        ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2201      	movs	r2, #1
 800388a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2201      	movs	r2, #1
 8003892:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2200      	movs	r2, #0
 800389a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2200      	movs	r2, #0
 80038a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80038a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3730      	adds	r7, #48	@ 0x30
 80038aa:	46bd      	mov	sp, r7
 80038ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080038b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01a      	beq.n	80039c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ae:	d10a      	bne.n	80039c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	605a      	str	r2, [r3, #4]
  }
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b098      	sub	sp, #96	@ 0x60
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a04:	f7fe f812 	bl	8001a2c <HAL_GetTick>
 8003a08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d12f      	bne.n	8003a78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a20:	2200      	movs	r2, #0
 8003a22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f88e 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d022      	beq.n	8003a78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e6      	bne.n	8003a32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e063      	b.n	8003b40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d149      	bne.n	8003b1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f857 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d03c      	beq.n	8003b1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	623b      	str	r3, [r7, #32]
   return(result);
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003abe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ac0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e6      	bne.n	8003aa0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3308      	adds	r3, #8
 8003af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003af2:	61fa      	str	r2, [r7, #28]
 8003af4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	69b9      	ldr	r1, [r7, #24]
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	617b      	str	r3, [r7, #20]
   return(result);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e5      	bne.n	8003ad2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e012      	b.n	8003b40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3758      	adds	r7, #88	@ 0x58
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b58:	e04f      	b.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b60:	d04b      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fd ff63 	bl	8001a2c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e04e      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d037      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b80      	cmp	r3, #128	@ 0x80
 8003b8e:	d034      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b40      	cmp	r3, #64	@ 0x40
 8003b94:	d031      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d110      	bne.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f838 	bl	8003c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e029      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd4:	d111      	bne.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f81e 	bl	8003c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e00f      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d0a0      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b095      	sub	sp, #84	@ 0x54
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e6      	bne.n	8003c2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e3      	bne.n	8003c5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d118      	bne.n	8003cce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f023 0310 	bic.w	r3, r3, #16
 8003cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6979      	ldr	r1, [r7, #20]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e6      	bne.n	8003c9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003ce2:	bf00      	nop
 8003ce4:	3754      	adds	r7, #84	@ 0x54
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e027      	b.n	8003d54 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	@ 0x24
 8003d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003d32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e02d      	b.n	8003dd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2224      	movs	r2, #36	@ 0x24
 8003d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f84f 	bl	8003e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e02d      	b.n	8003e50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	@ 0x24
 8003e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f811 	bl	8003e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d108      	bne.n	8003e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e78:	e031      	b.n	8003ede <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e7e:	2308      	movs	r3, #8
 8003e80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	0e5b      	lsrs	r3, r3, #25
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	0f5b      	lsrs	r3, r3, #29
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ea2:	7bbb      	ldrb	r3, [r7, #14]
 8003ea4:	7b3a      	ldrb	r2, [r7, #12]
 8003ea6:	4911      	ldr	r1, [pc, #68]	@ (8003eec <UARTEx_SetNbDataToProcess+0x94>)
 8003ea8:	5c8a      	ldrb	r2, [r1, r2]
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003eae:	7b3a      	ldrb	r2, [r7, #12]
 8003eb0:	490f      	ldr	r1, [pc, #60]	@ (8003ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8003eb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	7b7a      	ldrb	r2, [r7, #13]
 8003ec4:	4909      	ldr	r1, [pc, #36]	@ (8003eec <UARTEx_SetNbDataToProcess+0x94>)
 8003ec6:	5c8a      	ldrb	r2, [r1, r2]
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ecc:	7b7a      	ldrb	r2, [r7, #13]
 8003ece:	4908      	ldr	r1, [pc, #32]	@ (8003ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8003ed0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	080069b4 	.word	0x080069b4
 8003ef0:	080069bc 	.word	0x080069bc

08003ef4 <__cvt>:
 8003ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	ec57 6b10 	vmov	r6, r7, d0
 8003efc:	2f00      	cmp	r7, #0
 8003efe:	460c      	mov	r4, r1
 8003f00:	4619      	mov	r1, r3
 8003f02:	463b      	mov	r3, r7
 8003f04:	bfbb      	ittet	lt
 8003f06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003f0a:	461f      	movlt	r7, r3
 8003f0c:	2300      	movge	r3, #0
 8003f0e:	232d      	movlt	r3, #45	@ 0x2d
 8003f10:	700b      	strb	r3, [r1, #0]
 8003f12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003f18:	4691      	mov	r9, r2
 8003f1a:	f023 0820 	bic.w	r8, r3, #32
 8003f1e:	bfbc      	itt	lt
 8003f20:	4632      	movlt	r2, r6
 8003f22:	4616      	movlt	r6, r2
 8003f24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f28:	d005      	beq.n	8003f36 <__cvt+0x42>
 8003f2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003f2e:	d100      	bne.n	8003f32 <__cvt+0x3e>
 8003f30:	3401      	adds	r4, #1
 8003f32:	2102      	movs	r1, #2
 8003f34:	e000      	b.n	8003f38 <__cvt+0x44>
 8003f36:	2103      	movs	r1, #3
 8003f38:	ab03      	add	r3, sp, #12
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	ab02      	add	r3, sp, #8
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	ec47 6b10 	vmov	d0, r6, r7
 8003f44:	4653      	mov	r3, sl
 8003f46:	4622      	mov	r2, r4
 8003f48:	f000 ff4e 	bl	8004de8 <_dtoa_r>
 8003f4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003f50:	4605      	mov	r5, r0
 8003f52:	d119      	bne.n	8003f88 <__cvt+0x94>
 8003f54:	f019 0f01 	tst.w	r9, #1
 8003f58:	d00e      	beq.n	8003f78 <__cvt+0x84>
 8003f5a:	eb00 0904 	add.w	r9, r0, r4
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2300      	movs	r3, #0
 8003f62:	4630      	mov	r0, r6
 8003f64:	4639      	mov	r1, r7
 8003f66:	f7fc fdd7 	bl	8000b18 <__aeabi_dcmpeq>
 8003f6a:	b108      	cbz	r0, 8003f70 <__cvt+0x7c>
 8003f6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f70:	2230      	movs	r2, #48	@ 0x30
 8003f72:	9b03      	ldr	r3, [sp, #12]
 8003f74:	454b      	cmp	r3, r9
 8003f76:	d31e      	bcc.n	8003fb6 <__cvt+0xc2>
 8003f78:	9b03      	ldr	r3, [sp, #12]
 8003f7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f7c:	1b5b      	subs	r3, r3, r5
 8003f7e:	4628      	mov	r0, r5
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	b004      	add	sp, #16
 8003f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f8c:	eb00 0904 	add.w	r9, r0, r4
 8003f90:	d1e5      	bne.n	8003f5e <__cvt+0x6a>
 8003f92:	7803      	ldrb	r3, [r0, #0]
 8003f94:	2b30      	cmp	r3, #48	@ 0x30
 8003f96:	d10a      	bne.n	8003fae <__cvt+0xba>
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	f7fc fdba 	bl	8000b18 <__aeabi_dcmpeq>
 8003fa4:	b918      	cbnz	r0, 8003fae <__cvt+0xba>
 8003fa6:	f1c4 0401 	rsb	r4, r4, #1
 8003faa:	f8ca 4000 	str.w	r4, [sl]
 8003fae:	f8da 3000 	ldr.w	r3, [sl]
 8003fb2:	4499      	add	r9, r3
 8003fb4:	e7d3      	b.n	8003f5e <__cvt+0x6a>
 8003fb6:	1c59      	adds	r1, r3, #1
 8003fb8:	9103      	str	r1, [sp, #12]
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e7d9      	b.n	8003f72 <__cvt+0x7e>

08003fbe <__exponent>:
 8003fbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	bfba      	itte	lt
 8003fc4:	4249      	neglt	r1, r1
 8003fc6:	232d      	movlt	r3, #45	@ 0x2d
 8003fc8:	232b      	movge	r3, #43	@ 0x2b
 8003fca:	2909      	cmp	r1, #9
 8003fcc:	7002      	strb	r2, [r0, #0]
 8003fce:	7043      	strb	r3, [r0, #1]
 8003fd0:	dd29      	ble.n	8004026 <__exponent+0x68>
 8003fd2:	f10d 0307 	add.w	r3, sp, #7
 8003fd6:	461d      	mov	r5, r3
 8003fd8:	270a      	movs	r7, #10
 8003fda:	461a      	mov	r2, r3
 8003fdc:	fbb1 f6f7 	udiv	r6, r1, r7
 8003fe0:	fb07 1416 	mls	r4, r7, r6, r1
 8003fe4:	3430      	adds	r4, #48	@ 0x30
 8003fe6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003fea:	460c      	mov	r4, r1
 8003fec:	2c63      	cmp	r4, #99	@ 0x63
 8003fee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	dcf1      	bgt.n	8003fda <__exponent+0x1c>
 8003ff6:	3130      	adds	r1, #48	@ 0x30
 8003ff8:	1e94      	subs	r4, r2, #2
 8003ffa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003ffe:	1c41      	adds	r1, r0, #1
 8004000:	4623      	mov	r3, r4
 8004002:	42ab      	cmp	r3, r5
 8004004:	d30a      	bcc.n	800401c <__exponent+0x5e>
 8004006:	f10d 0309 	add.w	r3, sp, #9
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	42ac      	cmp	r4, r5
 800400e:	bf88      	it	hi
 8004010:	2300      	movhi	r3, #0
 8004012:	3302      	adds	r3, #2
 8004014:	4403      	add	r3, r0
 8004016:	1a18      	subs	r0, r3, r0
 8004018:	b003      	add	sp, #12
 800401a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800401c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004020:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004024:	e7ed      	b.n	8004002 <__exponent+0x44>
 8004026:	2330      	movs	r3, #48	@ 0x30
 8004028:	3130      	adds	r1, #48	@ 0x30
 800402a:	7083      	strb	r3, [r0, #2]
 800402c:	70c1      	strb	r1, [r0, #3]
 800402e:	1d03      	adds	r3, r0, #4
 8004030:	e7f1      	b.n	8004016 <__exponent+0x58>
	...

08004034 <_printf_float>:
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	b08d      	sub	sp, #52	@ 0x34
 800403a:	460c      	mov	r4, r1
 800403c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004040:	4616      	mov	r6, r2
 8004042:	461f      	mov	r7, r3
 8004044:	4605      	mov	r5, r0
 8004046:	f000 fdbf 	bl	8004bc8 <_localeconv_r>
 800404a:	6803      	ldr	r3, [r0, #0]
 800404c:	9304      	str	r3, [sp, #16]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fc f936 	bl	80002c0 <strlen>
 8004054:	2300      	movs	r3, #0
 8004056:	930a      	str	r3, [sp, #40]	@ 0x28
 8004058:	f8d8 3000 	ldr.w	r3, [r8]
 800405c:	9005      	str	r0, [sp, #20]
 800405e:	3307      	adds	r3, #7
 8004060:	f023 0307 	bic.w	r3, r3, #7
 8004064:	f103 0208 	add.w	r2, r3, #8
 8004068:	f894 a018 	ldrb.w	sl, [r4, #24]
 800406c:	f8d4 b000 	ldr.w	fp, [r4]
 8004070:	f8c8 2000 	str.w	r2, [r8]
 8004074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004078:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800407c:	9307      	str	r3, [sp, #28]
 800407e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004082:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800408a:	4b9c      	ldr	r3, [pc, #624]	@ (80042fc <_printf_float+0x2c8>)
 800408c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004090:	f7fc fd74 	bl	8000b7c <__aeabi_dcmpun>
 8004094:	bb70      	cbnz	r0, 80040f4 <_printf_float+0xc0>
 8004096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800409a:	4b98      	ldr	r3, [pc, #608]	@ (80042fc <_printf_float+0x2c8>)
 800409c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040a0:	f7fc fd4e 	bl	8000b40 <__aeabi_dcmple>
 80040a4:	bb30      	cbnz	r0, 80040f4 <_printf_float+0xc0>
 80040a6:	2200      	movs	r2, #0
 80040a8:	2300      	movs	r3, #0
 80040aa:	4640      	mov	r0, r8
 80040ac:	4649      	mov	r1, r9
 80040ae:	f7fc fd3d 	bl	8000b2c <__aeabi_dcmplt>
 80040b2:	b110      	cbz	r0, 80040ba <_printf_float+0x86>
 80040b4:	232d      	movs	r3, #45	@ 0x2d
 80040b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040ba:	4a91      	ldr	r2, [pc, #580]	@ (8004300 <_printf_float+0x2cc>)
 80040bc:	4b91      	ldr	r3, [pc, #580]	@ (8004304 <_printf_float+0x2d0>)
 80040be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80040c2:	bf94      	ite	ls
 80040c4:	4690      	movls	r8, r2
 80040c6:	4698      	movhi	r8, r3
 80040c8:	2303      	movs	r3, #3
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	f02b 0304 	bic.w	r3, fp, #4
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	f04f 0900 	mov.w	r9, #0
 80040d6:	9700      	str	r7, [sp, #0]
 80040d8:	4633      	mov	r3, r6
 80040da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80040dc:	4621      	mov	r1, r4
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 f9d2 	bl	8004488 <_printf_common>
 80040e4:	3001      	adds	r0, #1
 80040e6:	f040 808d 	bne.w	8004204 <_printf_float+0x1d0>
 80040ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040ee:	b00d      	add	sp, #52	@ 0x34
 80040f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	4640      	mov	r0, r8
 80040fa:	4649      	mov	r1, r9
 80040fc:	f7fc fd3e 	bl	8000b7c <__aeabi_dcmpun>
 8004100:	b140      	cbz	r0, 8004114 <_printf_float+0xe0>
 8004102:	464b      	mov	r3, r9
 8004104:	2b00      	cmp	r3, #0
 8004106:	bfbc      	itt	lt
 8004108:	232d      	movlt	r3, #45	@ 0x2d
 800410a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800410e:	4a7e      	ldr	r2, [pc, #504]	@ (8004308 <_printf_float+0x2d4>)
 8004110:	4b7e      	ldr	r3, [pc, #504]	@ (800430c <_printf_float+0x2d8>)
 8004112:	e7d4      	b.n	80040be <_printf_float+0x8a>
 8004114:	6863      	ldr	r3, [r4, #4]
 8004116:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800411a:	9206      	str	r2, [sp, #24]
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	d13b      	bne.n	8004198 <_printf_float+0x164>
 8004120:	2306      	movs	r3, #6
 8004122:	6063      	str	r3, [r4, #4]
 8004124:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004128:	2300      	movs	r3, #0
 800412a:	6022      	str	r2, [r4, #0]
 800412c:	9303      	str	r3, [sp, #12]
 800412e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004130:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004134:	ab09      	add	r3, sp, #36	@ 0x24
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	6861      	ldr	r1, [r4, #4]
 800413a:	ec49 8b10 	vmov	d0, r8, r9
 800413e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004142:	4628      	mov	r0, r5
 8004144:	f7ff fed6 	bl	8003ef4 <__cvt>
 8004148:	9b06      	ldr	r3, [sp, #24]
 800414a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800414c:	2b47      	cmp	r3, #71	@ 0x47
 800414e:	4680      	mov	r8, r0
 8004150:	d129      	bne.n	80041a6 <_printf_float+0x172>
 8004152:	1cc8      	adds	r0, r1, #3
 8004154:	db02      	blt.n	800415c <_printf_float+0x128>
 8004156:	6863      	ldr	r3, [r4, #4]
 8004158:	4299      	cmp	r1, r3
 800415a:	dd41      	ble.n	80041e0 <_printf_float+0x1ac>
 800415c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004160:	fa5f fa8a 	uxtb.w	sl, sl
 8004164:	3901      	subs	r1, #1
 8004166:	4652      	mov	r2, sl
 8004168:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800416c:	9109      	str	r1, [sp, #36]	@ 0x24
 800416e:	f7ff ff26 	bl	8003fbe <__exponent>
 8004172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004174:	1813      	adds	r3, r2, r0
 8004176:	2a01      	cmp	r2, #1
 8004178:	4681      	mov	r9, r0
 800417a:	6123      	str	r3, [r4, #16]
 800417c:	dc02      	bgt.n	8004184 <_printf_float+0x150>
 800417e:	6822      	ldr	r2, [r4, #0]
 8004180:	07d2      	lsls	r2, r2, #31
 8004182:	d501      	bpl.n	8004188 <_printf_float+0x154>
 8004184:	3301      	adds	r3, #1
 8004186:	6123      	str	r3, [r4, #16]
 8004188:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0a2      	beq.n	80040d6 <_printf_float+0xa2>
 8004190:	232d      	movs	r3, #45	@ 0x2d
 8004192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004196:	e79e      	b.n	80040d6 <_printf_float+0xa2>
 8004198:	9a06      	ldr	r2, [sp, #24]
 800419a:	2a47      	cmp	r2, #71	@ 0x47
 800419c:	d1c2      	bne.n	8004124 <_printf_float+0xf0>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1c0      	bne.n	8004124 <_printf_float+0xf0>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e7bd      	b.n	8004122 <_printf_float+0xee>
 80041a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80041aa:	d9db      	bls.n	8004164 <_printf_float+0x130>
 80041ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80041b0:	d118      	bne.n	80041e4 <_printf_float+0x1b0>
 80041b2:	2900      	cmp	r1, #0
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	dd0b      	ble.n	80041d0 <_printf_float+0x19c>
 80041b8:	6121      	str	r1, [r4, #16]
 80041ba:	b913      	cbnz	r3, 80041c2 <_printf_float+0x18e>
 80041bc:	6822      	ldr	r2, [r4, #0]
 80041be:	07d0      	lsls	r0, r2, #31
 80041c0:	d502      	bpl.n	80041c8 <_printf_float+0x194>
 80041c2:	3301      	adds	r3, #1
 80041c4:	440b      	add	r3, r1
 80041c6:	6123      	str	r3, [r4, #16]
 80041c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80041ca:	f04f 0900 	mov.w	r9, #0
 80041ce:	e7db      	b.n	8004188 <_printf_float+0x154>
 80041d0:	b913      	cbnz	r3, 80041d8 <_printf_float+0x1a4>
 80041d2:	6822      	ldr	r2, [r4, #0]
 80041d4:	07d2      	lsls	r2, r2, #31
 80041d6:	d501      	bpl.n	80041dc <_printf_float+0x1a8>
 80041d8:	3302      	adds	r3, #2
 80041da:	e7f4      	b.n	80041c6 <_printf_float+0x192>
 80041dc:	2301      	movs	r3, #1
 80041de:	e7f2      	b.n	80041c6 <_printf_float+0x192>
 80041e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80041e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041e6:	4299      	cmp	r1, r3
 80041e8:	db05      	blt.n	80041f6 <_printf_float+0x1c2>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	6121      	str	r1, [r4, #16]
 80041ee:	07d8      	lsls	r0, r3, #31
 80041f0:	d5ea      	bpl.n	80041c8 <_printf_float+0x194>
 80041f2:	1c4b      	adds	r3, r1, #1
 80041f4:	e7e7      	b.n	80041c6 <_printf_float+0x192>
 80041f6:	2900      	cmp	r1, #0
 80041f8:	bfd4      	ite	le
 80041fa:	f1c1 0202 	rsble	r2, r1, #2
 80041fe:	2201      	movgt	r2, #1
 8004200:	4413      	add	r3, r2
 8004202:	e7e0      	b.n	80041c6 <_printf_float+0x192>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	055a      	lsls	r2, r3, #21
 8004208:	d407      	bmi.n	800421a <_printf_float+0x1e6>
 800420a:	6923      	ldr	r3, [r4, #16]
 800420c:	4642      	mov	r2, r8
 800420e:	4631      	mov	r1, r6
 8004210:	4628      	mov	r0, r5
 8004212:	47b8      	blx	r7
 8004214:	3001      	adds	r0, #1
 8004216:	d12b      	bne.n	8004270 <_printf_float+0x23c>
 8004218:	e767      	b.n	80040ea <_printf_float+0xb6>
 800421a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800421e:	f240 80dd 	bls.w	80043dc <_printf_float+0x3a8>
 8004222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004226:	2200      	movs	r2, #0
 8004228:	2300      	movs	r3, #0
 800422a:	f7fc fc75 	bl	8000b18 <__aeabi_dcmpeq>
 800422e:	2800      	cmp	r0, #0
 8004230:	d033      	beq.n	800429a <_printf_float+0x266>
 8004232:	4a37      	ldr	r2, [pc, #220]	@ (8004310 <_printf_float+0x2dc>)
 8004234:	2301      	movs	r3, #1
 8004236:	4631      	mov	r1, r6
 8004238:	4628      	mov	r0, r5
 800423a:	47b8      	blx	r7
 800423c:	3001      	adds	r0, #1
 800423e:	f43f af54 	beq.w	80040ea <_printf_float+0xb6>
 8004242:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004246:	4543      	cmp	r3, r8
 8004248:	db02      	blt.n	8004250 <_printf_float+0x21c>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	07d8      	lsls	r0, r3, #31
 800424e:	d50f      	bpl.n	8004270 <_printf_float+0x23c>
 8004250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004254:	4631      	mov	r1, r6
 8004256:	4628      	mov	r0, r5
 8004258:	47b8      	blx	r7
 800425a:	3001      	adds	r0, #1
 800425c:	f43f af45 	beq.w	80040ea <_printf_float+0xb6>
 8004260:	f04f 0900 	mov.w	r9, #0
 8004264:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004268:	f104 0a1a 	add.w	sl, r4, #26
 800426c:	45c8      	cmp	r8, r9
 800426e:	dc09      	bgt.n	8004284 <_printf_float+0x250>
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	079b      	lsls	r3, r3, #30
 8004274:	f100 8103 	bmi.w	800447e <_printf_float+0x44a>
 8004278:	68e0      	ldr	r0, [r4, #12]
 800427a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800427c:	4298      	cmp	r0, r3
 800427e:	bfb8      	it	lt
 8004280:	4618      	movlt	r0, r3
 8004282:	e734      	b.n	80040ee <_printf_float+0xba>
 8004284:	2301      	movs	r3, #1
 8004286:	4652      	mov	r2, sl
 8004288:	4631      	mov	r1, r6
 800428a:	4628      	mov	r0, r5
 800428c:	47b8      	blx	r7
 800428e:	3001      	adds	r0, #1
 8004290:	f43f af2b 	beq.w	80040ea <_printf_float+0xb6>
 8004294:	f109 0901 	add.w	r9, r9, #1
 8004298:	e7e8      	b.n	800426c <_printf_float+0x238>
 800429a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	dc39      	bgt.n	8004314 <_printf_float+0x2e0>
 80042a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004310 <_printf_float+0x2dc>)
 80042a2:	2301      	movs	r3, #1
 80042a4:	4631      	mov	r1, r6
 80042a6:	4628      	mov	r0, r5
 80042a8:	47b8      	blx	r7
 80042aa:	3001      	adds	r0, #1
 80042ac:	f43f af1d 	beq.w	80040ea <_printf_float+0xb6>
 80042b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80042b4:	ea59 0303 	orrs.w	r3, r9, r3
 80042b8:	d102      	bne.n	80042c0 <_printf_float+0x28c>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	07d9      	lsls	r1, r3, #31
 80042be:	d5d7      	bpl.n	8004270 <_printf_float+0x23c>
 80042c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042c4:	4631      	mov	r1, r6
 80042c6:	4628      	mov	r0, r5
 80042c8:	47b8      	blx	r7
 80042ca:	3001      	adds	r0, #1
 80042cc:	f43f af0d 	beq.w	80040ea <_printf_float+0xb6>
 80042d0:	f04f 0a00 	mov.w	sl, #0
 80042d4:	f104 0b1a 	add.w	fp, r4, #26
 80042d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042da:	425b      	negs	r3, r3
 80042dc:	4553      	cmp	r3, sl
 80042de:	dc01      	bgt.n	80042e4 <_printf_float+0x2b0>
 80042e0:	464b      	mov	r3, r9
 80042e2:	e793      	b.n	800420c <_printf_float+0x1d8>
 80042e4:	2301      	movs	r3, #1
 80042e6:	465a      	mov	r2, fp
 80042e8:	4631      	mov	r1, r6
 80042ea:	4628      	mov	r0, r5
 80042ec:	47b8      	blx	r7
 80042ee:	3001      	adds	r0, #1
 80042f0:	f43f aefb 	beq.w	80040ea <_printf_float+0xb6>
 80042f4:	f10a 0a01 	add.w	sl, sl, #1
 80042f8:	e7ee      	b.n	80042d8 <_printf_float+0x2a4>
 80042fa:	bf00      	nop
 80042fc:	7fefffff 	.word	0x7fefffff
 8004300:	080069c4 	.word	0x080069c4
 8004304:	080069c8 	.word	0x080069c8
 8004308:	080069cc 	.word	0x080069cc
 800430c:	080069d0 	.word	0x080069d0
 8004310:	080069d4 	.word	0x080069d4
 8004314:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004316:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800431a:	4553      	cmp	r3, sl
 800431c:	bfa8      	it	ge
 800431e:	4653      	movge	r3, sl
 8004320:	2b00      	cmp	r3, #0
 8004322:	4699      	mov	r9, r3
 8004324:	dc36      	bgt.n	8004394 <_printf_float+0x360>
 8004326:	f04f 0b00 	mov.w	fp, #0
 800432a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800432e:	f104 021a 	add.w	r2, r4, #26
 8004332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004334:	9306      	str	r3, [sp, #24]
 8004336:	eba3 0309 	sub.w	r3, r3, r9
 800433a:	455b      	cmp	r3, fp
 800433c:	dc31      	bgt.n	80043a2 <_printf_float+0x36e>
 800433e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004340:	459a      	cmp	sl, r3
 8004342:	dc3a      	bgt.n	80043ba <_printf_float+0x386>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	07da      	lsls	r2, r3, #31
 8004348:	d437      	bmi.n	80043ba <_printf_float+0x386>
 800434a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800434c:	ebaa 0903 	sub.w	r9, sl, r3
 8004350:	9b06      	ldr	r3, [sp, #24]
 8004352:	ebaa 0303 	sub.w	r3, sl, r3
 8004356:	4599      	cmp	r9, r3
 8004358:	bfa8      	it	ge
 800435a:	4699      	movge	r9, r3
 800435c:	f1b9 0f00 	cmp.w	r9, #0
 8004360:	dc33      	bgt.n	80043ca <_printf_float+0x396>
 8004362:	f04f 0800 	mov.w	r8, #0
 8004366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800436a:	f104 0b1a 	add.w	fp, r4, #26
 800436e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004370:	ebaa 0303 	sub.w	r3, sl, r3
 8004374:	eba3 0309 	sub.w	r3, r3, r9
 8004378:	4543      	cmp	r3, r8
 800437a:	f77f af79 	ble.w	8004270 <_printf_float+0x23c>
 800437e:	2301      	movs	r3, #1
 8004380:	465a      	mov	r2, fp
 8004382:	4631      	mov	r1, r6
 8004384:	4628      	mov	r0, r5
 8004386:	47b8      	blx	r7
 8004388:	3001      	adds	r0, #1
 800438a:	f43f aeae 	beq.w	80040ea <_printf_float+0xb6>
 800438e:	f108 0801 	add.w	r8, r8, #1
 8004392:	e7ec      	b.n	800436e <_printf_float+0x33a>
 8004394:	4642      	mov	r2, r8
 8004396:	4631      	mov	r1, r6
 8004398:	4628      	mov	r0, r5
 800439a:	47b8      	blx	r7
 800439c:	3001      	adds	r0, #1
 800439e:	d1c2      	bne.n	8004326 <_printf_float+0x2f2>
 80043a0:	e6a3      	b.n	80040ea <_printf_float+0xb6>
 80043a2:	2301      	movs	r3, #1
 80043a4:	4631      	mov	r1, r6
 80043a6:	4628      	mov	r0, r5
 80043a8:	9206      	str	r2, [sp, #24]
 80043aa:	47b8      	blx	r7
 80043ac:	3001      	adds	r0, #1
 80043ae:	f43f ae9c 	beq.w	80040ea <_printf_float+0xb6>
 80043b2:	9a06      	ldr	r2, [sp, #24]
 80043b4:	f10b 0b01 	add.w	fp, fp, #1
 80043b8:	e7bb      	b.n	8004332 <_printf_float+0x2fe>
 80043ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	d1c0      	bne.n	800434a <_printf_float+0x316>
 80043c8:	e68f      	b.n	80040ea <_printf_float+0xb6>
 80043ca:	9a06      	ldr	r2, [sp, #24]
 80043cc:	464b      	mov	r3, r9
 80043ce:	4442      	add	r2, r8
 80043d0:	4631      	mov	r1, r6
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	d1c3      	bne.n	8004362 <_printf_float+0x32e>
 80043da:	e686      	b.n	80040ea <_printf_float+0xb6>
 80043dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80043e0:	f1ba 0f01 	cmp.w	sl, #1
 80043e4:	dc01      	bgt.n	80043ea <_printf_float+0x3b6>
 80043e6:	07db      	lsls	r3, r3, #31
 80043e8:	d536      	bpl.n	8004458 <_printf_float+0x424>
 80043ea:	2301      	movs	r3, #1
 80043ec:	4642      	mov	r2, r8
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b8      	blx	r7
 80043f4:	3001      	adds	r0, #1
 80043f6:	f43f ae78 	beq.w	80040ea <_printf_float+0xb6>
 80043fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	47b8      	blx	r7
 8004404:	3001      	adds	r0, #1
 8004406:	f43f ae70 	beq.w	80040ea <_printf_float+0xb6>
 800440a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800440e:	2200      	movs	r2, #0
 8004410:	2300      	movs	r3, #0
 8004412:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004416:	f7fc fb7f 	bl	8000b18 <__aeabi_dcmpeq>
 800441a:	b9c0      	cbnz	r0, 800444e <_printf_float+0x41a>
 800441c:	4653      	mov	r3, sl
 800441e:	f108 0201 	add.w	r2, r8, #1
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
 8004426:	47b8      	blx	r7
 8004428:	3001      	adds	r0, #1
 800442a:	d10c      	bne.n	8004446 <_printf_float+0x412>
 800442c:	e65d      	b.n	80040ea <_printf_float+0xb6>
 800442e:	2301      	movs	r3, #1
 8004430:	465a      	mov	r2, fp
 8004432:	4631      	mov	r1, r6
 8004434:	4628      	mov	r0, r5
 8004436:	47b8      	blx	r7
 8004438:	3001      	adds	r0, #1
 800443a:	f43f ae56 	beq.w	80040ea <_printf_float+0xb6>
 800443e:	f108 0801 	add.w	r8, r8, #1
 8004442:	45d0      	cmp	r8, sl
 8004444:	dbf3      	blt.n	800442e <_printf_float+0x3fa>
 8004446:	464b      	mov	r3, r9
 8004448:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800444c:	e6df      	b.n	800420e <_printf_float+0x1da>
 800444e:	f04f 0800 	mov.w	r8, #0
 8004452:	f104 0b1a 	add.w	fp, r4, #26
 8004456:	e7f4      	b.n	8004442 <_printf_float+0x40e>
 8004458:	2301      	movs	r3, #1
 800445a:	4642      	mov	r2, r8
 800445c:	e7e1      	b.n	8004422 <_printf_float+0x3ee>
 800445e:	2301      	movs	r3, #1
 8004460:	464a      	mov	r2, r9
 8004462:	4631      	mov	r1, r6
 8004464:	4628      	mov	r0, r5
 8004466:	47b8      	blx	r7
 8004468:	3001      	adds	r0, #1
 800446a:	f43f ae3e 	beq.w	80040ea <_printf_float+0xb6>
 800446e:	f108 0801 	add.w	r8, r8, #1
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004476:	1a5b      	subs	r3, r3, r1
 8004478:	4543      	cmp	r3, r8
 800447a:	dcf0      	bgt.n	800445e <_printf_float+0x42a>
 800447c:	e6fc      	b.n	8004278 <_printf_float+0x244>
 800447e:	f04f 0800 	mov.w	r8, #0
 8004482:	f104 0919 	add.w	r9, r4, #25
 8004486:	e7f4      	b.n	8004472 <_printf_float+0x43e>

08004488 <_printf_common>:
 8004488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800448c:	4616      	mov	r6, r2
 800448e:	4698      	mov	r8, r3
 8004490:	688a      	ldr	r2, [r1, #8]
 8004492:	690b      	ldr	r3, [r1, #16]
 8004494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004498:	4293      	cmp	r3, r2
 800449a:	bfb8      	it	lt
 800449c:	4613      	movlt	r3, r2
 800449e:	6033      	str	r3, [r6, #0]
 80044a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044a4:	4607      	mov	r7, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	b10a      	cbz	r2, 80044ae <_printf_common+0x26>
 80044aa:	3301      	adds	r3, #1
 80044ac:	6033      	str	r3, [r6, #0]
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	0699      	lsls	r1, r3, #26
 80044b2:	bf42      	ittt	mi
 80044b4:	6833      	ldrmi	r3, [r6, #0]
 80044b6:	3302      	addmi	r3, #2
 80044b8:	6033      	strmi	r3, [r6, #0]
 80044ba:	6825      	ldr	r5, [r4, #0]
 80044bc:	f015 0506 	ands.w	r5, r5, #6
 80044c0:	d106      	bne.n	80044d0 <_printf_common+0x48>
 80044c2:	f104 0a19 	add.w	sl, r4, #25
 80044c6:	68e3      	ldr	r3, [r4, #12]
 80044c8:	6832      	ldr	r2, [r6, #0]
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	42ab      	cmp	r3, r5
 80044ce:	dc26      	bgt.n	800451e <_printf_common+0x96>
 80044d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	3b00      	subs	r3, #0
 80044d8:	bf18      	it	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	0692      	lsls	r2, r2, #26
 80044de:	d42b      	bmi.n	8004538 <_printf_common+0xb0>
 80044e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044e4:	4641      	mov	r1, r8
 80044e6:	4638      	mov	r0, r7
 80044e8:	47c8      	blx	r9
 80044ea:	3001      	adds	r0, #1
 80044ec:	d01e      	beq.n	800452c <_printf_common+0xa4>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	6922      	ldr	r2, [r4, #16]
 80044f2:	f003 0306 	and.w	r3, r3, #6
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	bf02      	ittt	eq
 80044fa:	68e5      	ldreq	r5, [r4, #12]
 80044fc:	6833      	ldreq	r3, [r6, #0]
 80044fe:	1aed      	subeq	r5, r5, r3
 8004500:	68a3      	ldr	r3, [r4, #8]
 8004502:	bf0c      	ite	eq
 8004504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004508:	2500      	movne	r5, #0
 800450a:	4293      	cmp	r3, r2
 800450c:	bfc4      	itt	gt
 800450e:	1a9b      	subgt	r3, r3, r2
 8004510:	18ed      	addgt	r5, r5, r3
 8004512:	2600      	movs	r6, #0
 8004514:	341a      	adds	r4, #26
 8004516:	42b5      	cmp	r5, r6
 8004518:	d11a      	bne.n	8004550 <_printf_common+0xc8>
 800451a:	2000      	movs	r0, #0
 800451c:	e008      	b.n	8004530 <_printf_common+0xa8>
 800451e:	2301      	movs	r3, #1
 8004520:	4652      	mov	r2, sl
 8004522:	4641      	mov	r1, r8
 8004524:	4638      	mov	r0, r7
 8004526:	47c8      	blx	r9
 8004528:	3001      	adds	r0, #1
 800452a:	d103      	bne.n	8004534 <_printf_common+0xac>
 800452c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004534:	3501      	adds	r5, #1
 8004536:	e7c6      	b.n	80044c6 <_printf_common+0x3e>
 8004538:	18e1      	adds	r1, r4, r3
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	2030      	movs	r0, #48	@ 0x30
 800453e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004542:	4422      	add	r2, r4
 8004544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800454c:	3302      	adds	r3, #2
 800454e:	e7c7      	b.n	80044e0 <_printf_common+0x58>
 8004550:	2301      	movs	r3, #1
 8004552:	4622      	mov	r2, r4
 8004554:	4641      	mov	r1, r8
 8004556:	4638      	mov	r0, r7
 8004558:	47c8      	blx	r9
 800455a:	3001      	adds	r0, #1
 800455c:	d0e6      	beq.n	800452c <_printf_common+0xa4>
 800455e:	3601      	adds	r6, #1
 8004560:	e7d9      	b.n	8004516 <_printf_common+0x8e>
	...

08004564 <_printf_i>:
 8004564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004568:	7e0f      	ldrb	r7, [r1, #24]
 800456a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800456c:	2f78      	cmp	r7, #120	@ 0x78
 800456e:	4691      	mov	r9, r2
 8004570:	4680      	mov	r8, r0
 8004572:	460c      	mov	r4, r1
 8004574:	469a      	mov	sl, r3
 8004576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800457a:	d807      	bhi.n	800458c <_printf_i+0x28>
 800457c:	2f62      	cmp	r7, #98	@ 0x62
 800457e:	d80a      	bhi.n	8004596 <_printf_i+0x32>
 8004580:	2f00      	cmp	r7, #0
 8004582:	f000 80d2 	beq.w	800472a <_printf_i+0x1c6>
 8004586:	2f58      	cmp	r7, #88	@ 0x58
 8004588:	f000 80b9 	beq.w	80046fe <_printf_i+0x19a>
 800458c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004594:	e03a      	b.n	800460c <_printf_i+0xa8>
 8004596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800459a:	2b15      	cmp	r3, #21
 800459c:	d8f6      	bhi.n	800458c <_printf_i+0x28>
 800459e:	a101      	add	r1, pc, #4	@ (adr r1, 80045a4 <_printf_i+0x40>)
 80045a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045a4:	080045fd 	.word	0x080045fd
 80045a8:	08004611 	.word	0x08004611
 80045ac:	0800458d 	.word	0x0800458d
 80045b0:	0800458d 	.word	0x0800458d
 80045b4:	0800458d 	.word	0x0800458d
 80045b8:	0800458d 	.word	0x0800458d
 80045bc:	08004611 	.word	0x08004611
 80045c0:	0800458d 	.word	0x0800458d
 80045c4:	0800458d 	.word	0x0800458d
 80045c8:	0800458d 	.word	0x0800458d
 80045cc:	0800458d 	.word	0x0800458d
 80045d0:	08004711 	.word	0x08004711
 80045d4:	0800463b 	.word	0x0800463b
 80045d8:	080046cb 	.word	0x080046cb
 80045dc:	0800458d 	.word	0x0800458d
 80045e0:	0800458d 	.word	0x0800458d
 80045e4:	08004733 	.word	0x08004733
 80045e8:	0800458d 	.word	0x0800458d
 80045ec:	0800463b 	.word	0x0800463b
 80045f0:	0800458d 	.word	0x0800458d
 80045f4:	0800458d 	.word	0x0800458d
 80045f8:	080046d3 	.word	0x080046d3
 80045fc:	6833      	ldr	r3, [r6, #0]
 80045fe:	1d1a      	adds	r2, r3, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6032      	str	r2, [r6, #0]
 8004604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800460c:	2301      	movs	r3, #1
 800460e:	e09d      	b.n	800474c <_printf_i+0x1e8>
 8004610:	6833      	ldr	r3, [r6, #0]
 8004612:	6820      	ldr	r0, [r4, #0]
 8004614:	1d19      	adds	r1, r3, #4
 8004616:	6031      	str	r1, [r6, #0]
 8004618:	0606      	lsls	r6, r0, #24
 800461a:	d501      	bpl.n	8004620 <_printf_i+0xbc>
 800461c:	681d      	ldr	r5, [r3, #0]
 800461e:	e003      	b.n	8004628 <_printf_i+0xc4>
 8004620:	0645      	lsls	r5, r0, #25
 8004622:	d5fb      	bpl.n	800461c <_printf_i+0xb8>
 8004624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004628:	2d00      	cmp	r5, #0
 800462a:	da03      	bge.n	8004634 <_printf_i+0xd0>
 800462c:	232d      	movs	r3, #45	@ 0x2d
 800462e:	426d      	negs	r5, r5
 8004630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004634:	4859      	ldr	r0, [pc, #356]	@ (800479c <_printf_i+0x238>)
 8004636:	230a      	movs	r3, #10
 8004638:	e011      	b.n	800465e <_printf_i+0xfa>
 800463a:	6821      	ldr	r1, [r4, #0]
 800463c:	6833      	ldr	r3, [r6, #0]
 800463e:	0608      	lsls	r0, r1, #24
 8004640:	f853 5b04 	ldr.w	r5, [r3], #4
 8004644:	d402      	bmi.n	800464c <_printf_i+0xe8>
 8004646:	0649      	lsls	r1, r1, #25
 8004648:	bf48      	it	mi
 800464a:	b2ad      	uxthmi	r5, r5
 800464c:	2f6f      	cmp	r7, #111	@ 0x6f
 800464e:	4853      	ldr	r0, [pc, #332]	@ (800479c <_printf_i+0x238>)
 8004650:	6033      	str	r3, [r6, #0]
 8004652:	bf14      	ite	ne
 8004654:	230a      	movne	r3, #10
 8004656:	2308      	moveq	r3, #8
 8004658:	2100      	movs	r1, #0
 800465a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800465e:	6866      	ldr	r6, [r4, #4]
 8004660:	60a6      	str	r6, [r4, #8]
 8004662:	2e00      	cmp	r6, #0
 8004664:	bfa2      	ittt	ge
 8004666:	6821      	ldrge	r1, [r4, #0]
 8004668:	f021 0104 	bicge.w	r1, r1, #4
 800466c:	6021      	strge	r1, [r4, #0]
 800466e:	b90d      	cbnz	r5, 8004674 <_printf_i+0x110>
 8004670:	2e00      	cmp	r6, #0
 8004672:	d04b      	beq.n	800470c <_printf_i+0x1a8>
 8004674:	4616      	mov	r6, r2
 8004676:	fbb5 f1f3 	udiv	r1, r5, r3
 800467a:	fb03 5711 	mls	r7, r3, r1, r5
 800467e:	5dc7      	ldrb	r7, [r0, r7]
 8004680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004684:	462f      	mov	r7, r5
 8004686:	42bb      	cmp	r3, r7
 8004688:	460d      	mov	r5, r1
 800468a:	d9f4      	bls.n	8004676 <_printf_i+0x112>
 800468c:	2b08      	cmp	r3, #8
 800468e:	d10b      	bne.n	80046a8 <_printf_i+0x144>
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	07df      	lsls	r7, r3, #31
 8004694:	d508      	bpl.n	80046a8 <_printf_i+0x144>
 8004696:	6923      	ldr	r3, [r4, #16]
 8004698:	6861      	ldr	r1, [r4, #4]
 800469a:	4299      	cmp	r1, r3
 800469c:	bfde      	ittt	le
 800469e:	2330      	movle	r3, #48	@ 0x30
 80046a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046a4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80046a8:	1b92      	subs	r2, r2, r6
 80046aa:	6122      	str	r2, [r4, #16]
 80046ac:	f8cd a000 	str.w	sl, [sp]
 80046b0:	464b      	mov	r3, r9
 80046b2:	aa03      	add	r2, sp, #12
 80046b4:	4621      	mov	r1, r4
 80046b6:	4640      	mov	r0, r8
 80046b8:	f7ff fee6 	bl	8004488 <_printf_common>
 80046bc:	3001      	adds	r0, #1
 80046be:	d14a      	bne.n	8004756 <_printf_i+0x1f2>
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046c4:	b004      	add	sp, #16
 80046c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	f043 0320 	orr.w	r3, r3, #32
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	4833      	ldr	r0, [pc, #204]	@ (80047a0 <_printf_i+0x23c>)
 80046d4:	2778      	movs	r7, #120	@ 0x78
 80046d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	6831      	ldr	r1, [r6, #0]
 80046de:	061f      	lsls	r7, r3, #24
 80046e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80046e4:	d402      	bmi.n	80046ec <_printf_i+0x188>
 80046e6:	065f      	lsls	r7, r3, #25
 80046e8:	bf48      	it	mi
 80046ea:	b2ad      	uxthmi	r5, r5
 80046ec:	6031      	str	r1, [r6, #0]
 80046ee:	07d9      	lsls	r1, r3, #31
 80046f0:	bf44      	itt	mi
 80046f2:	f043 0320 	orrmi.w	r3, r3, #32
 80046f6:	6023      	strmi	r3, [r4, #0]
 80046f8:	b11d      	cbz	r5, 8004702 <_printf_i+0x19e>
 80046fa:	2310      	movs	r3, #16
 80046fc:	e7ac      	b.n	8004658 <_printf_i+0xf4>
 80046fe:	4827      	ldr	r0, [pc, #156]	@ (800479c <_printf_i+0x238>)
 8004700:	e7e9      	b.n	80046d6 <_printf_i+0x172>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	f023 0320 	bic.w	r3, r3, #32
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	e7f6      	b.n	80046fa <_printf_i+0x196>
 800470c:	4616      	mov	r6, r2
 800470e:	e7bd      	b.n	800468c <_printf_i+0x128>
 8004710:	6833      	ldr	r3, [r6, #0]
 8004712:	6825      	ldr	r5, [r4, #0]
 8004714:	6961      	ldr	r1, [r4, #20]
 8004716:	1d18      	adds	r0, r3, #4
 8004718:	6030      	str	r0, [r6, #0]
 800471a:	062e      	lsls	r6, r5, #24
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	d501      	bpl.n	8004724 <_printf_i+0x1c0>
 8004720:	6019      	str	r1, [r3, #0]
 8004722:	e002      	b.n	800472a <_printf_i+0x1c6>
 8004724:	0668      	lsls	r0, r5, #25
 8004726:	d5fb      	bpl.n	8004720 <_printf_i+0x1bc>
 8004728:	8019      	strh	r1, [r3, #0]
 800472a:	2300      	movs	r3, #0
 800472c:	6123      	str	r3, [r4, #16]
 800472e:	4616      	mov	r6, r2
 8004730:	e7bc      	b.n	80046ac <_printf_i+0x148>
 8004732:	6833      	ldr	r3, [r6, #0]
 8004734:	1d1a      	adds	r2, r3, #4
 8004736:	6032      	str	r2, [r6, #0]
 8004738:	681e      	ldr	r6, [r3, #0]
 800473a:	6862      	ldr	r2, [r4, #4]
 800473c:	2100      	movs	r1, #0
 800473e:	4630      	mov	r0, r6
 8004740:	f7fb fd6e 	bl	8000220 <memchr>
 8004744:	b108      	cbz	r0, 800474a <_printf_i+0x1e6>
 8004746:	1b80      	subs	r0, r0, r6
 8004748:	6060      	str	r0, [r4, #4]
 800474a:	6863      	ldr	r3, [r4, #4]
 800474c:	6123      	str	r3, [r4, #16]
 800474e:	2300      	movs	r3, #0
 8004750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004754:	e7aa      	b.n	80046ac <_printf_i+0x148>
 8004756:	6923      	ldr	r3, [r4, #16]
 8004758:	4632      	mov	r2, r6
 800475a:	4649      	mov	r1, r9
 800475c:	4640      	mov	r0, r8
 800475e:	47d0      	blx	sl
 8004760:	3001      	adds	r0, #1
 8004762:	d0ad      	beq.n	80046c0 <_printf_i+0x15c>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	079b      	lsls	r3, r3, #30
 8004768:	d413      	bmi.n	8004792 <_printf_i+0x22e>
 800476a:	68e0      	ldr	r0, [r4, #12]
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	4298      	cmp	r0, r3
 8004770:	bfb8      	it	lt
 8004772:	4618      	movlt	r0, r3
 8004774:	e7a6      	b.n	80046c4 <_printf_i+0x160>
 8004776:	2301      	movs	r3, #1
 8004778:	4632      	mov	r2, r6
 800477a:	4649      	mov	r1, r9
 800477c:	4640      	mov	r0, r8
 800477e:	47d0      	blx	sl
 8004780:	3001      	adds	r0, #1
 8004782:	d09d      	beq.n	80046c0 <_printf_i+0x15c>
 8004784:	3501      	adds	r5, #1
 8004786:	68e3      	ldr	r3, [r4, #12]
 8004788:	9903      	ldr	r1, [sp, #12]
 800478a:	1a5b      	subs	r3, r3, r1
 800478c:	42ab      	cmp	r3, r5
 800478e:	dcf2      	bgt.n	8004776 <_printf_i+0x212>
 8004790:	e7eb      	b.n	800476a <_printf_i+0x206>
 8004792:	2500      	movs	r5, #0
 8004794:	f104 0619 	add.w	r6, r4, #25
 8004798:	e7f5      	b.n	8004786 <_printf_i+0x222>
 800479a:	bf00      	nop
 800479c:	080069d6 	.word	0x080069d6
 80047a0:	080069e7 	.word	0x080069e7

080047a4 <std>:
 80047a4:	2300      	movs	r3, #0
 80047a6:	b510      	push	{r4, lr}
 80047a8:	4604      	mov	r4, r0
 80047aa:	e9c0 3300 	strd	r3, r3, [r0]
 80047ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047b2:	6083      	str	r3, [r0, #8]
 80047b4:	8181      	strh	r1, [r0, #12]
 80047b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80047b8:	81c2      	strh	r2, [r0, #14]
 80047ba:	6183      	str	r3, [r0, #24]
 80047bc:	4619      	mov	r1, r3
 80047be:	2208      	movs	r2, #8
 80047c0:	305c      	adds	r0, #92	@ 0x5c
 80047c2:	f000 f9f9 	bl	8004bb8 <memset>
 80047c6:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <std+0x58>)
 80047c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80047ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <std+0x5c>)
 80047cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <std+0x60>)
 80047d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <std+0x64>)
 80047d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80047d6:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <std+0x68>)
 80047d8:	6224      	str	r4, [r4, #32]
 80047da:	429c      	cmp	r4, r3
 80047dc:	d006      	beq.n	80047ec <std+0x48>
 80047de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047e2:	4294      	cmp	r4, r2
 80047e4:	d002      	beq.n	80047ec <std+0x48>
 80047e6:	33d0      	adds	r3, #208	@ 0xd0
 80047e8:	429c      	cmp	r4, r3
 80047ea:	d105      	bne.n	80047f8 <std+0x54>
 80047ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f4:	f000 ba5c 	b.w	8004cb0 <__retarget_lock_init_recursive>
 80047f8:	bd10      	pop	{r4, pc}
 80047fa:	bf00      	nop
 80047fc:	08004a09 	.word	0x08004a09
 8004800:	08004a2b 	.word	0x08004a2b
 8004804:	08004a63 	.word	0x08004a63
 8004808:	08004a87 	.word	0x08004a87
 800480c:	200002a4 	.word	0x200002a4

08004810 <stdio_exit_handler>:
 8004810:	4a02      	ldr	r2, [pc, #8]	@ (800481c <stdio_exit_handler+0xc>)
 8004812:	4903      	ldr	r1, [pc, #12]	@ (8004820 <stdio_exit_handler+0x10>)
 8004814:	4803      	ldr	r0, [pc, #12]	@ (8004824 <stdio_exit_handler+0x14>)
 8004816:	f000 b869 	b.w	80048ec <_fwalk_sglue>
 800481a:	bf00      	nop
 800481c:	2000001c 	.word	0x2000001c
 8004820:	08006601 	.word	0x08006601
 8004824:	2000002c 	.word	0x2000002c

08004828 <cleanup_stdio>:
 8004828:	6841      	ldr	r1, [r0, #4]
 800482a:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <cleanup_stdio+0x34>)
 800482c:	4299      	cmp	r1, r3
 800482e:	b510      	push	{r4, lr}
 8004830:	4604      	mov	r4, r0
 8004832:	d001      	beq.n	8004838 <cleanup_stdio+0x10>
 8004834:	f001 fee4 	bl	8006600 <_fflush_r>
 8004838:	68a1      	ldr	r1, [r4, #8]
 800483a:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <cleanup_stdio+0x38>)
 800483c:	4299      	cmp	r1, r3
 800483e:	d002      	beq.n	8004846 <cleanup_stdio+0x1e>
 8004840:	4620      	mov	r0, r4
 8004842:	f001 fedd 	bl	8006600 <_fflush_r>
 8004846:	68e1      	ldr	r1, [r4, #12]
 8004848:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <cleanup_stdio+0x3c>)
 800484a:	4299      	cmp	r1, r3
 800484c:	d004      	beq.n	8004858 <cleanup_stdio+0x30>
 800484e:	4620      	mov	r0, r4
 8004850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004854:	f001 bed4 	b.w	8006600 <_fflush_r>
 8004858:	bd10      	pop	{r4, pc}
 800485a:	bf00      	nop
 800485c:	200002a4 	.word	0x200002a4
 8004860:	2000030c 	.word	0x2000030c
 8004864:	20000374 	.word	0x20000374

08004868 <global_stdio_init.part.0>:
 8004868:	b510      	push	{r4, lr}
 800486a:	4b0b      	ldr	r3, [pc, #44]	@ (8004898 <global_stdio_init.part.0+0x30>)
 800486c:	4c0b      	ldr	r4, [pc, #44]	@ (800489c <global_stdio_init.part.0+0x34>)
 800486e:	4a0c      	ldr	r2, [pc, #48]	@ (80048a0 <global_stdio_init.part.0+0x38>)
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	4620      	mov	r0, r4
 8004874:	2200      	movs	r2, #0
 8004876:	2104      	movs	r1, #4
 8004878:	f7ff ff94 	bl	80047a4 <std>
 800487c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004880:	2201      	movs	r2, #1
 8004882:	2109      	movs	r1, #9
 8004884:	f7ff ff8e 	bl	80047a4 <std>
 8004888:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800488c:	2202      	movs	r2, #2
 800488e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004892:	2112      	movs	r1, #18
 8004894:	f7ff bf86 	b.w	80047a4 <std>
 8004898:	200003dc 	.word	0x200003dc
 800489c:	200002a4 	.word	0x200002a4
 80048a0:	08004811 	.word	0x08004811

080048a4 <__sfp_lock_acquire>:
 80048a4:	4801      	ldr	r0, [pc, #4]	@ (80048ac <__sfp_lock_acquire+0x8>)
 80048a6:	f000 ba04 	b.w	8004cb2 <__retarget_lock_acquire_recursive>
 80048aa:	bf00      	nop
 80048ac:	200003e5 	.word	0x200003e5

080048b0 <__sfp_lock_release>:
 80048b0:	4801      	ldr	r0, [pc, #4]	@ (80048b8 <__sfp_lock_release+0x8>)
 80048b2:	f000 b9ff 	b.w	8004cb4 <__retarget_lock_release_recursive>
 80048b6:	bf00      	nop
 80048b8:	200003e5 	.word	0x200003e5

080048bc <__sinit>:
 80048bc:	b510      	push	{r4, lr}
 80048be:	4604      	mov	r4, r0
 80048c0:	f7ff fff0 	bl	80048a4 <__sfp_lock_acquire>
 80048c4:	6a23      	ldr	r3, [r4, #32]
 80048c6:	b11b      	cbz	r3, 80048d0 <__sinit+0x14>
 80048c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048cc:	f7ff bff0 	b.w	80048b0 <__sfp_lock_release>
 80048d0:	4b04      	ldr	r3, [pc, #16]	@ (80048e4 <__sinit+0x28>)
 80048d2:	6223      	str	r3, [r4, #32]
 80048d4:	4b04      	ldr	r3, [pc, #16]	@ (80048e8 <__sinit+0x2c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f5      	bne.n	80048c8 <__sinit+0xc>
 80048dc:	f7ff ffc4 	bl	8004868 <global_stdio_init.part.0>
 80048e0:	e7f2      	b.n	80048c8 <__sinit+0xc>
 80048e2:	bf00      	nop
 80048e4:	08004829 	.word	0x08004829
 80048e8:	200003dc 	.word	0x200003dc

080048ec <_fwalk_sglue>:
 80048ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f0:	4607      	mov	r7, r0
 80048f2:	4688      	mov	r8, r1
 80048f4:	4614      	mov	r4, r2
 80048f6:	2600      	movs	r6, #0
 80048f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004900:	d505      	bpl.n	800490e <_fwalk_sglue+0x22>
 8004902:	6824      	ldr	r4, [r4, #0]
 8004904:	2c00      	cmp	r4, #0
 8004906:	d1f7      	bne.n	80048f8 <_fwalk_sglue+0xc>
 8004908:	4630      	mov	r0, r6
 800490a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800490e:	89ab      	ldrh	r3, [r5, #12]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d907      	bls.n	8004924 <_fwalk_sglue+0x38>
 8004914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004918:	3301      	adds	r3, #1
 800491a:	d003      	beq.n	8004924 <_fwalk_sglue+0x38>
 800491c:	4629      	mov	r1, r5
 800491e:	4638      	mov	r0, r7
 8004920:	47c0      	blx	r8
 8004922:	4306      	orrs	r6, r0
 8004924:	3568      	adds	r5, #104	@ 0x68
 8004926:	e7e9      	b.n	80048fc <_fwalk_sglue+0x10>

08004928 <iprintf>:
 8004928:	b40f      	push	{r0, r1, r2, r3}
 800492a:	b507      	push	{r0, r1, r2, lr}
 800492c:	4906      	ldr	r1, [pc, #24]	@ (8004948 <iprintf+0x20>)
 800492e:	ab04      	add	r3, sp, #16
 8004930:	6808      	ldr	r0, [r1, #0]
 8004932:	f853 2b04 	ldr.w	r2, [r3], #4
 8004936:	6881      	ldr	r1, [r0, #8]
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	f001 fcc5 	bl	80062c8 <_vfiprintf_r>
 800493e:	b003      	add	sp, #12
 8004940:	f85d eb04 	ldr.w	lr, [sp], #4
 8004944:	b004      	add	sp, #16
 8004946:	4770      	bx	lr
 8004948:	20000028 	.word	0x20000028

0800494c <_puts_r>:
 800494c:	6a03      	ldr	r3, [r0, #32]
 800494e:	b570      	push	{r4, r5, r6, lr}
 8004950:	6884      	ldr	r4, [r0, #8]
 8004952:	4605      	mov	r5, r0
 8004954:	460e      	mov	r6, r1
 8004956:	b90b      	cbnz	r3, 800495c <_puts_r+0x10>
 8004958:	f7ff ffb0 	bl	80048bc <__sinit>
 800495c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800495e:	07db      	lsls	r3, r3, #31
 8004960:	d405      	bmi.n	800496e <_puts_r+0x22>
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	0598      	lsls	r0, r3, #22
 8004966:	d402      	bmi.n	800496e <_puts_r+0x22>
 8004968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800496a:	f000 f9a2 	bl	8004cb2 <__retarget_lock_acquire_recursive>
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	0719      	lsls	r1, r3, #28
 8004972:	d502      	bpl.n	800497a <_puts_r+0x2e>
 8004974:	6923      	ldr	r3, [r4, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d135      	bne.n	80049e6 <_puts_r+0x9a>
 800497a:	4621      	mov	r1, r4
 800497c:	4628      	mov	r0, r5
 800497e:	f000 f8c5 	bl	8004b0c <__swsetup_r>
 8004982:	b380      	cbz	r0, 80049e6 <_puts_r+0x9a>
 8004984:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800498a:	07da      	lsls	r2, r3, #31
 800498c:	d405      	bmi.n	800499a <_puts_r+0x4e>
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	059b      	lsls	r3, r3, #22
 8004992:	d402      	bmi.n	800499a <_puts_r+0x4e>
 8004994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004996:	f000 f98d 	bl	8004cb4 <__retarget_lock_release_recursive>
 800499a:	4628      	mov	r0, r5
 800499c:	bd70      	pop	{r4, r5, r6, pc}
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da04      	bge.n	80049ac <_puts_r+0x60>
 80049a2:	69a2      	ldr	r2, [r4, #24]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	dc17      	bgt.n	80049d8 <_puts_r+0x8c>
 80049a8:	290a      	cmp	r1, #10
 80049aa:	d015      	beq.n	80049d8 <_puts_r+0x8c>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	6022      	str	r2, [r4, #0]
 80049b2:	7019      	strb	r1, [r3, #0]
 80049b4:	68a3      	ldr	r3, [r4, #8]
 80049b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049ba:	3b01      	subs	r3, #1
 80049bc:	60a3      	str	r3, [r4, #8]
 80049be:	2900      	cmp	r1, #0
 80049c0:	d1ed      	bne.n	800499e <_puts_r+0x52>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	da11      	bge.n	80049ea <_puts_r+0x9e>
 80049c6:	4622      	mov	r2, r4
 80049c8:	210a      	movs	r1, #10
 80049ca:	4628      	mov	r0, r5
 80049cc:	f000 f85f 	bl	8004a8e <__swbuf_r>
 80049d0:	3001      	adds	r0, #1
 80049d2:	d0d7      	beq.n	8004984 <_puts_r+0x38>
 80049d4:	250a      	movs	r5, #10
 80049d6:	e7d7      	b.n	8004988 <_puts_r+0x3c>
 80049d8:	4622      	mov	r2, r4
 80049da:	4628      	mov	r0, r5
 80049dc:	f000 f857 	bl	8004a8e <__swbuf_r>
 80049e0:	3001      	adds	r0, #1
 80049e2:	d1e7      	bne.n	80049b4 <_puts_r+0x68>
 80049e4:	e7ce      	b.n	8004984 <_puts_r+0x38>
 80049e6:	3e01      	subs	r6, #1
 80049e8:	e7e4      	b.n	80049b4 <_puts_r+0x68>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	6022      	str	r2, [r4, #0]
 80049f0:	220a      	movs	r2, #10
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	e7ee      	b.n	80049d4 <_puts_r+0x88>
	...

080049f8 <puts>:
 80049f8:	4b02      	ldr	r3, [pc, #8]	@ (8004a04 <puts+0xc>)
 80049fa:	4601      	mov	r1, r0
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	f7ff bfa5 	b.w	800494c <_puts_r>
 8004a02:	bf00      	nop
 8004a04:	20000028 	.word	0x20000028

08004a08 <__sread>:
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a10:	f000 f900 	bl	8004c14 <_read_r>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	bfab      	itete	ge
 8004a18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a1c:	181b      	addge	r3, r3, r0
 8004a1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a22:	bfac      	ite	ge
 8004a24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a26:	81a3      	strhlt	r3, [r4, #12]
 8004a28:	bd10      	pop	{r4, pc}

08004a2a <__swrite>:
 8004a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2e:	461f      	mov	r7, r3
 8004a30:	898b      	ldrh	r3, [r1, #12]
 8004a32:	05db      	lsls	r3, r3, #23
 8004a34:	4605      	mov	r5, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	4616      	mov	r6, r2
 8004a3a:	d505      	bpl.n	8004a48 <__swrite+0x1e>
 8004a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a40:	2302      	movs	r3, #2
 8004a42:	2200      	movs	r2, #0
 8004a44:	f000 f8d4 	bl	8004bf0 <_lseek_r>
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a52:	81a3      	strh	r3, [r4, #12]
 8004a54:	4632      	mov	r2, r6
 8004a56:	463b      	mov	r3, r7
 8004a58:	4628      	mov	r0, r5
 8004a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5e:	f000 b8eb 	b.w	8004c38 <_write_r>

08004a62 <__sseek>:
 8004a62:	b510      	push	{r4, lr}
 8004a64:	460c      	mov	r4, r1
 8004a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6a:	f000 f8c1 	bl	8004bf0 <_lseek_r>
 8004a6e:	1c43      	adds	r3, r0, #1
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	bf15      	itete	ne
 8004a74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a7e:	81a3      	strheq	r3, [r4, #12]
 8004a80:	bf18      	it	ne
 8004a82:	81a3      	strhne	r3, [r4, #12]
 8004a84:	bd10      	pop	{r4, pc}

08004a86 <__sclose>:
 8004a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8a:	f000 b8a1 	b.w	8004bd0 <_close_r>

08004a8e <__swbuf_r>:
 8004a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a90:	460e      	mov	r6, r1
 8004a92:	4614      	mov	r4, r2
 8004a94:	4605      	mov	r5, r0
 8004a96:	b118      	cbz	r0, 8004aa0 <__swbuf_r+0x12>
 8004a98:	6a03      	ldr	r3, [r0, #32]
 8004a9a:	b90b      	cbnz	r3, 8004aa0 <__swbuf_r+0x12>
 8004a9c:	f7ff ff0e 	bl	80048bc <__sinit>
 8004aa0:	69a3      	ldr	r3, [r4, #24]
 8004aa2:	60a3      	str	r3, [r4, #8]
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	071a      	lsls	r2, r3, #28
 8004aa8:	d501      	bpl.n	8004aae <__swbuf_r+0x20>
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	b943      	cbnz	r3, 8004ac0 <__swbuf_r+0x32>
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f000 f82b 	bl	8004b0c <__swsetup_r>
 8004ab6:	b118      	cbz	r0, 8004ac0 <__swbuf_r+0x32>
 8004ab8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004abc:	4638      	mov	r0, r7
 8004abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	6922      	ldr	r2, [r4, #16]
 8004ac4:	1a98      	subs	r0, r3, r2
 8004ac6:	6963      	ldr	r3, [r4, #20]
 8004ac8:	b2f6      	uxtb	r6, r6
 8004aca:	4283      	cmp	r3, r0
 8004acc:	4637      	mov	r7, r6
 8004ace:	dc05      	bgt.n	8004adc <__swbuf_r+0x4e>
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f001 fd94 	bl	8006600 <_fflush_r>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d1ed      	bne.n	8004ab8 <__swbuf_r+0x2a>
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	60a3      	str	r3, [r4, #8]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	701e      	strb	r6, [r3, #0]
 8004aea:	6962      	ldr	r2, [r4, #20]
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d004      	beq.n	8004afc <__swbuf_r+0x6e>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	07db      	lsls	r3, r3, #31
 8004af6:	d5e1      	bpl.n	8004abc <__swbuf_r+0x2e>
 8004af8:	2e0a      	cmp	r6, #10
 8004afa:	d1df      	bne.n	8004abc <__swbuf_r+0x2e>
 8004afc:	4621      	mov	r1, r4
 8004afe:	4628      	mov	r0, r5
 8004b00:	f001 fd7e 	bl	8006600 <_fflush_r>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d0d9      	beq.n	8004abc <__swbuf_r+0x2e>
 8004b08:	e7d6      	b.n	8004ab8 <__swbuf_r+0x2a>
	...

08004b0c <__swsetup_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	4b29      	ldr	r3, [pc, #164]	@ (8004bb4 <__swsetup_r+0xa8>)
 8004b10:	4605      	mov	r5, r0
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	460c      	mov	r4, r1
 8004b16:	b118      	cbz	r0, 8004b20 <__swsetup_r+0x14>
 8004b18:	6a03      	ldr	r3, [r0, #32]
 8004b1a:	b90b      	cbnz	r3, 8004b20 <__swsetup_r+0x14>
 8004b1c:	f7ff fece 	bl	80048bc <__sinit>
 8004b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b24:	0719      	lsls	r1, r3, #28
 8004b26:	d422      	bmi.n	8004b6e <__swsetup_r+0x62>
 8004b28:	06da      	lsls	r2, r3, #27
 8004b2a:	d407      	bmi.n	8004b3c <__swsetup_r+0x30>
 8004b2c:	2209      	movs	r2, #9
 8004b2e:	602a      	str	r2, [r5, #0]
 8004b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b34:	81a3      	strh	r3, [r4, #12]
 8004b36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b3a:	e033      	b.n	8004ba4 <__swsetup_r+0x98>
 8004b3c:	0758      	lsls	r0, r3, #29
 8004b3e:	d512      	bpl.n	8004b66 <__swsetup_r+0x5a>
 8004b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b42:	b141      	cbz	r1, 8004b56 <__swsetup_r+0x4a>
 8004b44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b48:	4299      	cmp	r1, r3
 8004b4a:	d002      	beq.n	8004b52 <__swsetup_r+0x46>
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 ff0f 	bl	8005970 <_free_r>
 8004b52:	2300      	movs	r3, #0
 8004b54:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6063      	str	r3, [r4, #4]
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f043 0308 	orr.w	r3, r3, #8
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	b94b      	cbnz	r3, 8004b86 <__swsetup_r+0x7a>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b7c:	d003      	beq.n	8004b86 <__swsetup_r+0x7a>
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4628      	mov	r0, r5
 8004b82:	f001 fd8b 	bl	800669c <__smakebuf_r>
 8004b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b8a:	f013 0201 	ands.w	r2, r3, #1
 8004b8e:	d00a      	beq.n	8004ba6 <__swsetup_r+0x9a>
 8004b90:	2200      	movs	r2, #0
 8004b92:	60a2      	str	r2, [r4, #8]
 8004b94:	6962      	ldr	r2, [r4, #20]
 8004b96:	4252      	negs	r2, r2
 8004b98:	61a2      	str	r2, [r4, #24]
 8004b9a:	6922      	ldr	r2, [r4, #16]
 8004b9c:	b942      	cbnz	r2, 8004bb0 <__swsetup_r+0xa4>
 8004b9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ba2:	d1c5      	bne.n	8004b30 <__swsetup_r+0x24>
 8004ba4:	bd38      	pop	{r3, r4, r5, pc}
 8004ba6:	0799      	lsls	r1, r3, #30
 8004ba8:	bf58      	it	pl
 8004baa:	6962      	ldrpl	r2, [r4, #20]
 8004bac:	60a2      	str	r2, [r4, #8]
 8004bae:	e7f4      	b.n	8004b9a <__swsetup_r+0x8e>
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	e7f7      	b.n	8004ba4 <__swsetup_r+0x98>
 8004bb4:	20000028 	.word	0x20000028

08004bb8 <memset>:
 8004bb8:	4402      	add	r2, r0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d100      	bne.n	8004bc2 <memset+0xa>
 8004bc0:	4770      	bx	lr
 8004bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc6:	e7f9      	b.n	8004bbc <memset+0x4>

08004bc8 <_localeconv_r>:
 8004bc8:	4800      	ldr	r0, [pc, #0]	@ (8004bcc <_localeconv_r+0x4>)
 8004bca:	4770      	bx	lr
 8004bcc:	20000168 	.word	0x20000168

08004bd0 <_close_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4d06      	ldr	r5, [pc, #24]	@ (8004bec <_close_r+0x1c>)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	4608      	mov	r0, r1
 8004bda:	602b      	str	r3, [r5, #0]
 8004bdc:	f7fc fca4 	bl	8001528 <_close>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_close_r+0x1a>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_close_r+0x1a>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	200003e0 	.word	0x200003e0

08004bf0 <_lseek_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4d07      	ldr	r5, [pc, #28]	@ (8004c10 <_lseek_r+0x20>)
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	602a      	str	r2, [r5, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f7fc fcb9 	bl	8001576 <_lseek>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_lseek_r+0x1e>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_lseek_r+0x1e>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	200003e0 	.word	0x200003e0

08004c14 <_read_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4d07      	ldr	r5, [pc, #28]	@ (8004c34 <_read_r+0x20>)
 8004c18:	4604      	mov	r4, r0
 8004c1a:	4608      	mov	r0, r1
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	2200      	movs	r2, #0
 8004c20:	602a      	str	r2, [r5, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f7fc fc47 	bl	80014b6 <_read>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d102      	bne.n	8004c32 <_read_r+0x1e>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	b103      	cbz	r3, 8004c32 <_read_r+0x1e>
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	200003e0 	.word	0x200003e0

08004c38 <_write_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4d07      	ldr	r5, [pc, #28]	@ (8004c58 <_write_r+0x20>)
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	4608      	mov	r0, r1
 8004c40:	4611      	mov	r1, r2
 8004c42:	2200      	movs	r2, #0
 8004c44:	602a      	str	r2, [r5, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7fc fc52 	bl	80014f0 <_write>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_write_r+0x1e>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_write_r+0x1e>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	200003e0 	.word	0x200003e0

08004c5c <__errno>:
 8004c5c:	4b01      	ldr	r3, [pc, #4]	@ (8004c64 <__errno+0x8>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000028 	.word	0x20000028

08004c68 <__libc_init_array>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ca0 <__libc_init_array+0x38>)
 8004c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ca4 <__libc_init_array+0x3c>)
 8004c6e:	1b64      	subs	r4, r4, r5
 8004c70:	10a4      	asrs	r4, r4, #2
 8004c72:	2600      	movs	r6, #0
 8004c74:	42a6      	cmp	r6, r4
 8004c76:	d109      	bne.n	8004c8c <__libc_init_array+0x24>
 8004c78:	4d0b      	ldr	r5, [pc, #44]	@ (8004ca8 <__libc_init_array+0x40>)
 8004c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004cac <__libc_init_array+0x44>)
 8004c7c:	f001 fe2c 	bl	80068d8 <_init>
 8004c80:	1b64      	subs	r4, r4, r5
 8004c82:	10a4      	asrs	r4, r4, #2
 8004c84:	2600      	movs	r6, #0
 8004c86:	42a6      	cmp	r6, r4
 8004c88:	d105      	bne.n	8004c96 <__libc_init_array+0x2e>
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c90:	4798      	blx	r3
 8004c92:	3601      	adds	r6, #1
 8004c94:	e7ee      	b.n	8004c74 <__libc_init_array+0xc>
 8004c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9a:	4798      	blx	r3
 8004c9c:	3601      	adds	r6, #1
 8004c9e:	e7f2      	b.n	8004c86 <__libc_init_array+0x1e>
 8004ca0:	08006d40 	.word	0x08006d40
 8004ca4:	08006d40 	.word	0x08006d40
 8004ca8:	08006d40 	.word	0x08006d40
 8004cac:	08006d44 	.word	0x08006d44

08004cb0 <__retarget_lock_init_recursive>:
 8004cb0:	4770      	bx	lr

08004cb2 <__retarget_lock_acquire_recursive>:
 8004cb2:	4770      	bx	lr

08004cb4 <__retarget_lock_release_recursive>:
 8004cb4:	4770      	bx	lr

08004cb6 <memcpy>:
 8004cb6:	440a      	add	r2, r1
 8004cb8:	4291      	cmp	r1, r2
 8004cba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004cbe:	d100      	bne.n	8004cc2 <memcpy+0xc>
 8004cc0:	4770      	bx	lr
 8004cc2:	b510      	push	{r4, lr}
 8004cc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ccc:	4291      	cmp	r1, r2
 8004cce:	d1f9      	bne.n	8004cc4 <memcpy+0xe>
 8004cd0:	bd10      	pop	{r4, pc}

08004cd2 <quorem>:
 8004cd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd6:	6903      	ldr	r3, [r0, #16]
 8004cd8:	690c      	ldr	r4, [r1, #16]
 8004cda:	42a3      	cmp	r3, r4
 8004cdc:	4607      	mov	r7, r0
 8004cde:	db7e      	blt.n	8004dde <quorem+0x10c>
 8004ce0:	3c01      	subs	r4, #1
 8004ce2:	f101 0814 	add.w	r8, r1, #20
 8004ce6:	00a3      	lsls	r3, r4, #2
 8004ce8:	f100 0514 	add.w	r5, r0, #20
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004cf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d04:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d08:	d32e      	bcc.n	8004d68 <quorem+0x96>
 8004d0a:	f04f 0a00 	mov.w	sl, #0
 8004d0e:	46c4      	mov	ip, r8
 8004d10:	46ae      	mov	lr, r5
 8004d12:	46d3      	mov	fp, sl
 8004d14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d18:	b298      	uxth	r0, r3
 8004d1a:	fb06 a000 	mla	r0, r6, r0, sl
 8004d1e:	0c02      	lsrs	r2, r0, #16
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	fb06 2303 	mla	r3, r6, r3, r2
 8004d26:	f8de 2000 	ldr.w	r2, [lr]
 8004d2a:	b280      	uxth	r0, r0
 8004d2c:	b292      	uxth	r2, r2
 8004d2e:	1a12      	subs	r2, r2, r0
 8004d30:	445a      	add	r2, fp
 8004d32:	f8de 0000 	ldr.w	r0, [lr]
 8004d36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004d40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004d44:	b292      	uxth	r2, r2
 8004d46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004d4a:	45e1      	cmp	r9, ip
 8004d4c:	f84e 2b04 	str.w	r2, [lr], #4
 8004d50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004d54:	d2de      	bcs.n	8004d14 <quorem+0x42>
 8004d56:	9b00      	ldr	r3, [sp, #0]
 8004d58:	58eb      	ldr	r3, [r5, r3]
 8004d5a:	b92b      	cbnz	r3, 8004d68 <quorem+0x96>
 8004d5c:	9b01      	ldr	r3, [sp, #4]
 8004d5e:	3b04      	subs	r3, #4
 8004d60:	429d      	cmp	r5, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	d32f      	bcc.n	8004dc6 <quorem+0xf4>
 8004d66:	613c      	str	r4, [r7, #16]
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f001 f97b 	bl	8006064 <__mcmp>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	db25      	blt.n	8004dbe <quorem+0xec>
 8004d72:	4629      	mov	r1, r5
 8004d74:	2000      	movs	r0, #0
 8004d76:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d7a:	f8d1 c000 	ldr.w	ip, [r1]
 8004d7e:	fa1f fe82 	uxth.w	lr, r2
 8004d82:	fa1f f38c 	uxth.w	r3, ip
 8004d86:	eba3 030e 	sub.w	r3, r3, lr
 8004d8a:	4403      	add	r3, r0
 8004d8c:	0c12      	lsrs	r2, r2, #16
 8004d8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004d92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d9c:	45c1      	cmp	r9, r8
 8004d9e:	f841 3b04 	str.w	r3, [r1], #4
 8004da2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004da6:	d2e6      	bcs.n	8004d76 <quorem+0xa4>
 8004da8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004db0:	b922      	cbnz	r2, 8004dbc <quorem+0xea>
 8004db2:	3b04      	subs	r3, #4
 8004db4:	429d      	cmp	r5, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	d30b      	bcc.n	8004dd2 <quorem+0x100>
 8004dba:	613c      	str	r4, [r7, #16]
 8004dbc:	3601      	adds	r6, #1
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	b003      	add	sp, #12
 8004dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	3b04      	subs	r3, #4
 8004dca:	2a00      	cmp	r2, #0
 8004dcc:	d1cb      	bne.n	8004d66 <quorem+0x94>
 8004dce:	3c01      	subs	r4, #1
 8004dd0:	e7c6      	b.n	8004d60 <quorem+0x8e>
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	3b04      	subs	r3, #4
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	d1ef      	bne.n	8004dba <quorem+0xe8>
 8004dda:	3c01      	subs	r4, #1
 8004ddc:	e7ea      	b.n	8004db4 <quorem+0xe2>
 8004dde:	2000      	movs	r0, #0
 8004de0:	e7ee      	b.n	8004dc0 <quorem+0xee>
 8004de2:	0000      	movs	r0, r0
 8004de4:	0000      	movs	r0, r0
	...

08004de8 <_dtoa_r>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	69c7      	ldr	r7, [r0, #28]
 8004dee:	b099      	sub	sp, #100	@ 0x64
 8004df0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004df4:	ec55 4b10 	vmov	r4, r5, d0
 8004df8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004dfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8004dfc:	4683      	mov	fp, r0
 8004dfe:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004e02:	b97f      	cbnz	r7, 8004e24 <_dtoa_r+0x3c>
 8004e04:	2010      	movs	r0, #16
 8004e06:	f000 fdfd 	bl	8005a04 <malloc>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004e10:	b920      	cbnz	r0, 8004e1c <_dtoa_r+0x34>
 8004e12:	4ba7      	ldr	r3, [pc, #668]	@ (80050b0 <_dtoa_r+0x2c8>)
 8004e14:	21ef      	movs	r1, #239	@ 0xef
 8004e16:	48a7      	ldr	r0, [pc, #668]	@ (80050b4 <_dtoa_r+0x2cc>)
 8004e18:	f001 fcae 	bl	8006778 <__assert_func>
 8004e1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e20:	6007      	str	r7, [r0, #0]
 8004e22:	60c7      	str	r7, [r0, #12]
 8004e24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	b159      	cbz	r1, 8004e44 <_dtoa_r+0x5c>
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	604a      	str	r2, [r1, #4]
 8004e30:	2301      	movs	r3, #1
 8004e32:	4093      	lsls	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
 8004e36:	4658      	mov	r0, fp
 8004e38:	f000 feda 	bl	8005bf0 <_Bfree>
 8004e3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	1e2b      	subs	r3, r5, #0
 8004e46:	bfb9      	ittee	lt
 8004e48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004e4c:	9303      	strlt	r3, [sp, #12]
 8004e4e:	2300      	movge	r3, #0
 8004e50:	6033      	strge	r3, [r6, #0]
 8004e52:	9f03      	ldr	r7, [sp, #12]
 8004e54:	4b98      	ldr	r3, [pc, #608]	@ (80050b8 <_dtoa_r+0x2d0>)
 8004e56:	bfbc      	itt	lt
 8004e58:	2201      	movlt	r2, #1
 8004e5a:	6032      	strlt	r2, [r6, #0]
 8004e5c:	43bb      	bics	r3, r7
 8004e5e:	d112      	bne.n	8004e86 <_dtoa_r+0x9e>
 8004e60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004e62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e6c:	4323      	orrs	r3, r4
 8004e6e:	f000 854d 	beq.w	800590c <_dtoa_r+0xb24>
 8004e72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80050cc <_dtoa_r+0x2e4>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 854f 	beq.w	800591c <_dtoa_r+0xb34>
 8004e7e:	f10a 0303 	add.w	r3, sl, #3
 8004e82:	f000 bd49 	b.w	8005918 <_dtoa_r+0xb30>
 8004e86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	ec51 0b17 	vmov	r0, r1, d7
 8004e90:	2300      	movs	r3, #0
 8004e92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004e96:	f7fb fe3f 	bl	8000b18 <__aeabi_dcmpeq>
 8004e9a:	4680      	mov	r8, r0
 8004e9c:	b158      	cbz	r0, 8004eb6 <_dtoa_r+0xce>
 8004e9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004ea6:	b113      	cbz	r3, 8004eae <_dtoa_r+0xc6>
 8004ea8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004eaa:	4b84      	ldr	r3, [pc, #528]	@ (80050bc <_dtoa_r+0x2d4>)
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80050d0 <_dtoa_r+0x2e8>
 8004eb2:	f000 bd33 	b.w	800591c <_dtoa_r+0xb34>
 8004eb6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004eba:	aa16      	add	r2, sp, #88	@ 0x58
 8004ebc:	a917      	add	r1, sp, #92	@ 0x5c
 8004ebe:	4658      	mov	r0, fp
 8004ec0:	f001 f980 	bl	80061c4 <__d2b>
 8004ec4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004ec8:	4681      	mov	r9, r0
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	d077      	beq.n	8004fbe <_dtoa_r+0x1d6>
 8004ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ed0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004edc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004ee0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004ee4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004ee8:	4619      	mov	r1, r3
 8004eea:	2200      	movs	r2, #0
 8004eec:	4b74      	ldr	r3, [pc, #464]	@ (80050c0 <_dtoa_r+0x2d8>)
 8004eee:	f7fb f9f3 	bl	80002d8 <__aeabi_dsub>
 8004ef2:	a369      	add	r3, pc, #420	@ (adr r3, 8005098 <_dtoa_r+0x2b0>)
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f7fb fba6 	bl	8000648 <__aeabi_dmul>
 8004efc:	a368      	add	r3, pc, #416	@ (adr r3, 80050a0 <_dtoa_r+0x2b8>)
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f7fb f9eb 	bl	80002dc <__adddf3>
 8004f06:	4604      	mov	r4, r0
 8004f08:	4630      	mov	r0, r6
 8004f0a:	460d      	mov	r5, r1
 8004f0c:	f7fb fb32 	bl	8000574 <__aeabi_i2d>
 8004f10:	a365      	add	r3, pc, #404	@ (adr r3, 80050a8 <_dtoa_r+0x2c0>)
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	f7fb fb97 	bl	8000648 <__aeabi_dmul>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4620      	mov	r0, r4
 8004f20:	4629      	mov	r1, r5
 8004f22:	f7fb f9db 	bl	80002dc <__adddf3>
 8004f26:	4604      	mov	r4, r0
 8004f28:	460d      	mov	r5, r1
 8004f2a:	f7fb fe3d 	bl	8000ba8 <__aeabi_d2iz>
 8004f2e:	2200      	movs	r2, #0
 8004f30:	4607      	mov	r7, r0
 8004f32:	2300      	movs	r3, #0
 8004f34:	4620      	mov	r0, r4
 8004f36:	4629      	mov	r1, r5
 8004f38:	f7fb fdf8 	bl	8000b2c <__aeabi_dcmplt>
 8004f3c:	b140      	cbz	r0, 8004f50 <_dtoa_r+0x168>
 8004f3e:	4638      	mov	r0, r7
 8004f40:	f7fb fb18 	bl	8000574 <__aeabi_i2d>
 8004f44:	4622      	mov	r2, r4
 8004f46:	462b      	mov	r3, r5
 8004f48:	f7fb fde6 	bl	8000b18 <__aeabi_dcmpeq>
 8004f4c:	b900      	cbnz	r0, 8004f50 <_dtoa_r+0x168>
 8004f4e:	3f01      	subs	r7, #1
 8004f50:	2f16      	cmp	r7, #22
 8004f52:	d851      	bhi.n	8004ff8 <_dtoa_r+0x210>
 8004f54:	4b5b      	ldr	r3, [pc, #364]	@ (80050c4 <_dtoa_r+0x2dc>)
 8004f56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f62:	f7fb fde3 	bl	8000b2c <__aeabi_dcmplt>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d048      	beq.n	8004ffc <_dtoa_r+0x214>
 8004f6a:	3f01      	subs	r7, #1
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004f70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004f72:	1b9b      	subs	r3, r3, r6
 8004f74:	1e5a      	subs	r2, r3, #1
 8004f76:	bf44      	itt	mi
 8004f78:	f1c3 0801 	rsbmi	r8, r3, #1
 8004f7c:	2300      	movmi	r3, #0
 8004f7e:	9208      	str	r2, [sp, #32]
 8004f80:	bf54      	ite	pl
 8004f82:	f04f 0800 	movpl.w	r8, #0
 8004f86:	9308      	strmi	r3, [sp, #32]
 8004f88:	2f00      	cmp	r7, #0
 8004f8a:	db39      	blt.n	8005000 <_dtoa_r+0x218>
 8004f8c:	9b08      	ldr	r3, [sp, #32]
 8004f8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004f90:	443b      	add	r3, r7
 8004f92:	9308      	str	r3, [sp, #32]
 8004f94:	2300      	movs	r3, #0
 8004f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	d864      	bhi.n	8005068 <_dtoa_r+0x280>
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	bfc4      	itt	gt
 8004fa2:	3b04      	subgt	r3, #4
 8004fa4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fa8:	f1a3 0302 	sub.w	r3, r3, #2
 8004fac:	bfcc      	ite	gt
 8004fae:	2400      	movgt	r4, #0
 8004fb0:	2401      	movle	r4, #1
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d863      	bhi.n	800507e <_dtoa_r+0x296>
 8004fb6:	e8df f003 	tbb	[pc, r3]
 8004fba:	372a      	.short	0x372a
 8004fbc:	5535      	.short	0x5535
 8004fbe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004fc2:	441e      	add	r6, r3
 8004fc4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	bfc1      	itttt	gt
 8004fcc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004fd0:	409f      	lslgt	r7, r3
 8004fd2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004fd6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004fda:	bfd6      	itet	le
 8004fdc:	f1c3 0320 	rsble	r3, r3, #32
 8004fe0:	ea47 0003 	orrgt.w	r0, r7, r3
 8004fe4:	fa04 f003 	lslle.w	r0, r4, r3
 8004fe8:	f7fb fab4 	bl	8000554 <__aeabi_ui2d>
 8004fec:	2201      	movs	r2, #1
 8004fee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004ff2:	3e01      	subs	r6, #1
 8004ff4:	9214      	str	r2, [sp, #80]	@ 0x50
 8004ff6:	e777      	b.n	8004ee8 <_dtoa_r+0x100>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e7b8      	b.n	8004f6e <_dtoa_r+0x186>
 8004ffc:	9012      	str	r0, [sp, #72]	@ 0x48
 8004ffe:	e7b7      	b.n	8004f70 <_dtoa_r+0x188>
 8005000:	427b      	negs	r3, r7
 8005002:	930a      	str	r3, [sp, #40]	@ 0x28
 8005004:	2300      	movs	r3, #0
 8005006:	eba8 0807 	sub.w	r8, r8, r7
 800500a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800500c:	e7c4      	b.n	8004f98 <_dtoa_r+0x1b0>
 800500e:	2300      	movs	r3, #0
 8005010:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005014:	2b00      	cmp	r3, #0
 8005016:	dc35      	bgt.n	8005084 <_dtoa_r+0x29c>
 8005018:	2301      	movs	r3, #1
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	9307      	str	r3, [sp, #28]
 800501e:	461a      	mov	r2, r3
 8005020:	920e      	str	r2, [sp, #56]	@ 0x38
 8005022:	e00b      	b.n	800503c <_dtoa_r+0x254>
 8005024:	2301      	movs	r3, #1
 8005026:	e7f3      	b.n	8005010 <_dtoa_r+0x228>
 8005028:	2300      	movs	r3, #0
 800502a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800502c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800502e:	18fb      	adds	r3, r7, r3
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	2b01      	cmp	r3, #1
 8005036:	9307      	str	r3, [sp, #28]
 8005038:	bfb8      	it	lt
 800503a:	2301      	movlt	r3, #1
 800503c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005040:	2100      	movs	r1, #0
 8005042:	2204      	movs	r2, #4
 8005044:	f102 0514 	add.w	r5, r2, #20
 8005048:	429d      	cmp	r5, r3
 800504a:	d91f      	bls.n	800508c <_dtoa_r+0x2a4>
 800504c:	6041      	str	r1, [r0, #4]
 800504e:	4658      	mov	r0, fp
 8005050:	f000 fd8e 	bl	8005b70 <_Balloc>
 8005054:	4682      	mov	sl, r0
 8005056:	2800      	cmp	r0, #0
 8005058:	d13c      	bne.n	80050d4 <_dtoa_r+0x2ec>
 800505a:	4b1b      	ldr	r3, [pc, #108]	@ (80050c8 <_dtoa_r+0x2e0>)
 800505c:	4602      	mov	r2, r0
 800505e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005062:	e6d8      	b.n	8004e16 <_dtoa_r+0x2e>
 8005064:	2301      	movs	r3, #1
 8005066:	e7e0      	b.n	800502a <_dtoa_r+0x242>
 8005068:	2401      	movs	r4, #1
 800506a:	2300      	movs	r3, #0
 800506c:	9309      	str	r3, [sp, #36]	@ 0x24
 800506e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005070:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	9307      	str	r3, [sp, #28]
 8005078:	2200      	movs	r2, #0
 800507a:	2312      	movs	r3, #18
 800507c:	e7d0      	b.n	8005020 <_dtoa_r+0x238>
 800507e:	2301      	movs	r3, #1
 8005080:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005082:	e7f5      	b.n	8005070 <_dtoa_r+0x288>
 8005084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	9307      	str	r3, [sp, #28]
 800508a:	e7d7      	b.n	800503c <_dtoa_r+0x254>
 800508c:	3101      	adds	r1, #1
 800508e:	0052      	lsls	r2, r2, #1
 8005090:	e7d8      	b.n	8005044 <_dtoa_r+0x25c>
 8005092:	bf00      	nop
 8005094:	f3af 8000 	nop.w
 8005098:	636f4361 	.word	0x636f4361
 800509c:	3fd287a7 	.word	0x3fd287a7
 80050a0:	8b60c8b3 	.word	0x8b60c8b3
 80050a4:	3fc68a28 	.word	0x3fc68a28
 80050a8:	509f79fb 	.word	0x509f79fb
 80050ac:	3fd34413 	.word	0x3fd34413
 80050b0:	08006a05 	.word	0x08006a05
 80050b4:	08006a1c 	.word	0x08006a1c
 80050b8:	7ff00000 	.word	0x7ff00000
 80050bc:	080069d5 	.word	0x080069d5
 80050c0:	3ff80000 	.word	0x3ff80000
 80050c4:	08006b18 	.word	0x08006b18
 80050c8:	08006a74 	.word	0x08006a74
 80050cc:	08006a01 	.word	0x08006a01
 80050d0:	080069d4 	.word	0x080069d4
 80050d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80050d8:	6018      	str	r0, [r3, #0]
 80050da:	9b07      	ldr	r3, [sp, #28]
 80050dc:	2b0e      	cmp	r3, #14
 80050de:	f200 80a4 	bhi.w	800522a <_dtoa_r+0x442>
 80050e2:	2c00      	cmp	r4, #0
 80050e4:	f000 80a1 	beq.w	800522a <_dtoa_r+0x442>
 80050e8:	2f00      	cmp	r7, #0
 80050ea:	dd33      	ble.n	8005154 <_dtoa_r+0x36c>
 80050ec:	4bad      	ldr	r3, [pc, #692]	@ (80053a4 <_dtoa_r+0x5bc>)
 80050ee:	f007 020f 	and.w	r2, r7, #15
 80050f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050f6:	ed93 7b00 	vldr	d7, [r3]
 80050fa:	05f8      	lsls	r0, r7, #23
 80050fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005100:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005104:	d516      	bpl.n	8005134 <_dtoa_r+0x34c>
 8005106:	4ba8      	ldr	r3, [pc, #672]	@ (80053a8 <_dtoa_r+0x5c0>)
 8005108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800510c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005110:	f7fb fbc4 	bl	800089c <__aeabi_ddiv>
 8005114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005118:	f004 040f 	and.w	r4, r4, #15
 800511c:	2603      	movs	r6, #3
 800511e:	4da2      	ldr	r5, [pc, #648]	@ (80053a8 <_dtoa_r+0x5c0>)
 8005120:	b954      	cbnz	r4, 8005138 <_dtoa_r+0x350>
 8005122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800512a:	f7fb fbb7 	bl	800089c <__aeabi_ddiv>
 800512e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005132:	e028      	b.n	8005186 <_dtoa_r+0x39e>
 8005134:	2602      	movs	r6, #2
 8005136:	e7f2      	b.n	800511e <_dtoa_r+0x336>
 8005138:	07e1      	lsls	r1, r4, #31
 800513a:	d508      	bpl.n	800514e <_dtoa_r+0x366>
 800513c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005140:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005144:	f7fb fa80 	bl	8000648 <__aeabi_dmul>
 8005148:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800514c:	3601      	adds	r6, #1
 800514e:	1064      	asrs	r4, r4, #1
 8005150:	3508      	adds	r5, #8
 8005152:	e7e5      	b.n	8005120 <_dtoa_r+0x338>
 8005154:	f000 80d2 	beq.w	80052fc <_dtoa_r+0x514>
 8005158:	427c      	negs	r4, r7
 800515a:	4b92      	ldr	r3, [pc, #584]	@ (80053a4 <_dtoa_r+0x5bc>)
 800515c:	4d92      	ldr	r5, [pc, #584]	@ (80053a8 <_dtoa_r+0x5c0>)
 800515e:	f004 020f 	and.w	r2, r4, #15
 8005162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800516e:	f7fb fa6b 	bl	8000648 <__aeabi_dmul>
 8005172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005176:	1124      	asrs	r4, r4, #4
 8005178:	2300      	movs	r3, #0
 800517a:	2602      	movs	r6, #2
 800517c:	2c00      	cmp	r4, #0
 800517e:	f040 80b2 	bne.w	80052e6 <_dtoa_r+0x4fe>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1d3      	bne.n	800512e <_dtoa_r+0x346>
 8005186:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005188:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80b7 	beq.w	8005300 <_dtoa_r+0x518>
 8005192:	4b86      	ldr	r3, [pc, #536]	@ (80053ac <_dtoa_r+0x5c4>)
 8005194:	2200      	movs	r2, #0
 8005196:	4620      	mov	r0, r4
 8005198:	4629      	mov	r1, r5
 800519a:	f7fb fcc7 	bl	8000b2c <__aeabi_dcmplt>
 800519e:	2800      	cmp	r0, #0
 80051a0:	f000 80ae 	beq.w	8005300 <_dtoa_r+0x518>
 80051a4:	9b07      	ldr	r3, [sp, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80aa 	beq.w	8005300 <_dtoa_r+0x518>
 80051ac:	9b00      	ldr	r3, [sp, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	dd37      	ble.n	8005222 <_dtoa_r+0x43a>
 80051b2:	1e7b      	subs	r3, r7, #1
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	4620      	mov	r0, r4
 80051b8:	4b7d      	ldr	r3, [pc, #500]	@ (80053b0 <_dtoa_r+0x5c8>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	4629      	mov	r1, r5
 80051be:	f7fb fa43 	bl	8000648 <__aeabi_dmul>
 80051c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c6:	9c00      	ldr	r4, [sp, #0]
 80051c8:	3601      	adds	r6, #1
 80051ca:	4630      	mov	r0, r6
 80051cc:	f7fb f9d2 	bl	8000574 <__aeabi_i2d>
 80051d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051d4:	f7fb fa38 	bl	8000648 <__aeabi_dmul>
 80051d8:	4b76      	ldr	r3, [pc, #472]	@ (80053b4 <_dtoa_r+0x5cc>)
 80051da:	2200      	movs	r2, #0
 80051dc:	f7fb f87e 	bl	80002dc <__adddf3>
 80051e0:	4605      	mov	r5, r0
 80051e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80051e6:	2c00      	cmp	r4, #0
 80051e8:	f040 808d 	bne.w	8005306 <_dtoa_r+0x51e>
 80051ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051f0:	4b71      	ldr	r3, [pc, #452]	@ (80053b8 <_dtoa_r+0x5d0>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	f7fb f870 	bl	80002d8 <__aeabi_dsub>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005200:	462a      	mov	r2, r5
 8005202:	4633      	mov	r3, r6
 8005204:	f7fb fcb0 	bl	8000b68 <__aeabi_dcmpgt>
 8005208:	2800      	cmp	r0, #0
 800520a:	f040 828b 	bne.w	8005724 <_dtoa_r+0x93c>
 800520e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005212:	462a      	mov	r2, r5
 8005214:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005218:	f7fb fc88 	bl	8000b2c <__aeabi_dcmplt>
 800521c:	2800      	cmp	r0, #0
 800521e:	f040 8128 	bne.w	8005472 <_dtoa_r+0x68a>
 8005222:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005226:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800522a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800522c:	2b00      	cmp	r3, #0
 800522e:	f2c0 815a 	blt.w	80054e6 <_dtoa_r+0x6fe>
 8005232:	2f0e      	cmp	r7, #14
 8005234:	f300 8157 	bgt.w	80054e6 <_dtoa_r+0x6fe>
 8005238:	4b5a      	ldr	r3, [pc, #360]	@ (80053a4 <_dtoa_r+0x5bc>)
 800523a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800523e:	ed93 7b00 	vldr	d7, [r3]
 8005242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	ed8d 7b00 	vstr	d7, [sp]
 800524a:	da03      	bge.n	8005254 <_dtoa_r+0x46c>
 800524c:	9b07      	ldr	r3, [sp, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f340 8101 	ble.w	8005456 <_dtoa_r+0x66e>
 8005254:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005258:	4656      	mov	r6, sl
 800525a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800525e:	4620      	mov	r0, r4
 8005260:	4629      	mov	r1, r5
 8005262:	f7fb fb1b 	bl	800089c <__aeabi_ddiv>
 8005266:	f7fb fc9f 	bl	8000ba8 <__aeabi_d2iz>
 800526a:	4680      	mov	r8, r0
 800526c:	f7fb f982 	bl	8000574 <__aeabi_i2d>
 8005270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005274:	f7fb f9e8 	bl	8000648 <__aeabi_dmul>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4620      	mov	r0, r4
 800527e:	4629      	mov	r1, r5
 8005280:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005284:	f7fb f828 	bl	80002d8 <__aeabi_dsub>
 8005288:	f806 4b01 	strb.w	r4, [r6], #1
 800528c:	9d07      	ldr	r5, [sp, #28]
 800528e:	eba6 040a 	sub.w	r4, r6, sl
 8005292:	42a5      	cmp	r5, r4
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	f040 8117 	bne.w	80054ca <_dtoa_r+0x6e2>
 800529c:	f7fb f81e 	bl	80002dc <__adddf3>
 80052a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052a4:	4604      	mov	r4, r0
 80052a6:	460d      	mov	r5, r1
 80052a8:	f7fb fc5e 	bl	8000b68 <__aeabi_dcmpgt>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	f040 80f9 	bne.w	80054a4 <_dtoa_r+0x6bc>
 80052b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052b6:	4620      	mov	r0, r4
 80052b8:	4629      	mov	r1, r5
 80052ba:	f7fb fc2d 	bl	8000b18 <__aeabi_dcmpeq>
 80052be:	b118      	cbz	r0, 80052c8 <_dtoa_r+0x4e0>
 80052c0:	f018 0f01 	tst.w	r8, #1
 80052c4:	f040 80ee 	bne.w	80054a4 <_dtoa_r+0x6bc>
 80052c8:	4649      	mov	r1, r9
 80052ca:	4658      	mov	r0, fp
 80052cc:	f000 fc90 	bl	8005bf0 <_Bfree>
 80052d0:	2300      	movs	r3, #0
 80052d2:	7033      	strb	r3, [r6, #0]
 80052d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80052d6:	3701      	adds	r7, #1
 80052d8:	601f      	str	r7, [r3, #0]
 80052da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 831d 	beq.w	800591c <_dtoa_r+0xb34>
 80052e2:	601e      	str	r6, [r3, #0]
 80052e4:	e31a      	b.n	800591c <_dtoa_r+0xb34>
 80052e6:	07e2      	lsls	r2, r4, #31
 80052e8:	d505      	bpl.n	80052f6 <_dtoa_r+0x50e>
 80052ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052ee:	f7fb f9ab 	bl	8000648 <__aeabi_dmul>
 80052f2:	3601      	adds	r6, #1
 80052f4:	2301      	movs	r3, #1
 80052f6:	1064      	asrs	r4, r4, #1
 80052f8:	3508      	adds	r5, #8
 80052fa:	e73f      	b.n	800517c <_dtoa_r+0x394>
 80052fc:	2602      	movs	r6, #2
 80052fe:	e742      	b.n	8005186 <_dtoa_r+0x39e>
 8005300:	9c07      	ldr	r4, [sp, #28]
 8005302:	9704      	str	r7, [sp, #16]
 8005304:	e761      	b.n	80051ca <_dtoa_r+0x3e2>
 8005306:	4b27      	ldr	r3, [pc, #156]	@ (80053a4 <_dtoa_r+0x5bc>)
 8005308:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800530a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800530e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005312:	4454      	add	r4, sl
 8005314:	2900      	cmp	r1, #0
 8005316:	d053      	beq.n	80053c0 <_dtoa_r+0x5d8>
 8005318:	4928      	ldr	r1, [pc, #160]	@ (80053bc <_dtoa_r+0x5d4>)
 800531a:	2000      	movs	r0, #0
 800531c:	f7fb fabe 	bl	800089c <__aeabi_ddiv>
 8005320:	4633      	mov	r3, r6
 8005322:	462a      	mov	r2, r5
 8005324:	f7fa ffd8 	bl	80002d8 <__aeabi_dsub>
 8005328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800532c:	4656      	mov	r6, sl
 800532e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005332:	f7fb fc39 	bl	8000ba8 <__aeabi_d2iz>
 8005336:	4605      	mov	r5, r0
 8005338:	f7fb f91c 	bl	8000574 <__aeabi_i2d>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005344:	f7fa ffc8 	bl	80002d8 <__aeabi_dsub>
 8005348:	3530      	adds	r5, #48	@ 0x30
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005352:	f806 5b01 	strb.w	r5, [r6], #1
 8005356:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800535a:	f7fb fbe7 	bl	8000b2c <__aeabi_dcmplt>
 800535e:	2800      	cmp	r0, #0
 8005360:	d171      	bne.n	8005446 <_dtoa_r+0x65e>
 8005362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005366:	4911      	ldr	r1, [pc, #68]	@ (80053ac <_dtoa_r+0x5c4>)
 8005368:	2000      	movs	r0, #0
 800536a:	f7fa ffb5 	bl	80002d8 <__aeabi_dsub>
 800536e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005372:	f7fb fbdb 	bl	8000b2c <__aeabi_dcmplt>
 8005376:	2800      	cmp	r0, #0
 8005378:	f040 8095 	bne.w	80054a6 <_dtoa_r+0x6be>
 800537c:	42a6      	cmp	r6, r4
 800537e:	f43f af50 	beq.w	8005222 <_dtoa_r+0x43a>
 8005382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005386:	4b0a      	ldr	r3, [pc, #40]	@ (80053b0 <_dtoa_r+0x5c8>)
 8005388:	2200      	movs	r2, #0
 800538a:	f7fb f95d 	bl	8000648 <__aeabi_dmul>
 800538e:	4b08      	ldr	r3, [pc, #32]	@ (80053b0 <_dtoa_r+0x5c8>)
 8005390:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005394:	2200      	movs	r2, #0
 8005396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800539a:	f7fb f955 	bl	8000648 <__aeabi_dmul>
 800539e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053a2:	e7c4      	b.n	800532e <_dtoa_r+0x546>
 80053a4:	08006b18 	.word	0x08006b18
 80053a8:	08006af0 	.word	0x08006af0
 80053ac:	3ff00000 	.word	0x3ff00000
 80053b0:	40240000 	.word	0x40240000
 80053b4:	401c0000 	.word	0x401c0000
 80053b8:	40140000 	.word	0x40140000
 80053bc:	3fe00000 	.word	0x3fe00000
 80053c0:	4631      	mov	r1, r6
 80053c2:	4628      	mov	r0, r5
 80053c4:	f7fb f940 	bl	8000648 <__aeabi_dmul>
 80053c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80053ce:	4656      	mov	r6, sl
 80053d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053d4:	f7fb fbe8 	bl	8000ba8 <__aeabi_d2iz>
 80053d8:	4605      	mov	r5, r0
 80053da:	f7fb f8cb 	bl	8000574 <__aeabi_i2d>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053e6:	f7fa ff77 	bl	80002d8 <__aeabi_dsub>
 80053ea:	3530      	adds	r5, #48	@ 0x30
 80053ec:	f806 5b01 	strb.w	r5, [r6], #1
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	42a6      	cmp	r6, r4
 80053f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	d124      	bne.n	800544a <_dtoa_r+0x662>
 8005400:	4bac      	ldr	r3, [pc, #688]	@ (80056b4 <_dtoa_r+0x8cc>)
 8005402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005406:	f7fa ff69 	bl	80002dc <__adddf3>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005412:	f7fb fba9 	bl	8000b68 <__aeabi_dcmpgt>
 8005416:	2800      	cmp	r0, #0
 8005418:	d145      	bne.n	80054a6 <_dtoa_r+0x6be>
 800541a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800541e:	49a5      	ldr	r1, [pc, #660]	@ (80056b4 <_dtoa_r+0x8cc>)
 8005420:	2000      	movs	r0, #0
 8005422:	f7fa ff59 	bl	80002d8 <__aeabi_dsub>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800542e:	f7fb fb7d 	bl	8000b2c <__aeabi_dcmplt>
 8005432:	2800      	cmp	r0, #0
 8005434:	f43f aef5 	beq.w	8005222 <_dtoa_r+0x43a>
 8005438:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800543a:	1e73      	subs	r3, r6, #1
 800543c:	9315      	str	r3, [sp, #84]	@ 0x54
 800543e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005442:	2b30      	cmp	r3, #48	@ 0x30
 8005444:	d0f8      	beq.n	8005438 <_dtoa_r+0x650>
 8005446:	9f04      	ldr	r7, [sp, #16]
 8005448:	e73e      	b.n	80052c8 <_dtoa_r+0x4e0>
 800544a:	4b9b      	ldr	r3, [pc, #620]	@ (80056b8 <_dtoa_r+0x8d0>)
 800544c:	f7fb f8fc 	bl	8000648 <__aeabi_dmul>
 8005450:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005454:	e7bc      	b.n	80053d0 <_dtoa_r+0x5e8>
 8005456:	d10c      	bne.n	8005472 <_dtoa_r+0x68a>
 8005458:	4b98      	ldr	r3, [pc, #608]	@ (80056bc <_dtoa_r+0x8d4>)
 800545a:	2200      	movs	r2, #0
 800545c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005460:	f7fb f8f2 	bl	8000648 <__aeabi_dmul>
 8005464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005468:	f7fb fb74 	bl	8000b54 <__aeabi_dcmpge>
 800546c:	2800      	cmp	r0, #0
 800546e:	f000 8157 	beq.w	8005720 <_dtoa_r+0x938>
 8005472:	2400      	movs	r4, #0
 8005474:	4625      	mov	r5, r4
 8005476:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005478:	43db      	mvns	r3, r3
 800547a:	9304      	str	r3, [sp, #16]
 800547c:	4656      	mov	r6, sl
 800547e:	2700      	movs	r7, #0
 8005480:	4621      	mov	r1, r4
 8005482:	4658      	mov	r0, fp
 8005484:	f000 fbb4 	bl	8005bf0 <_Bfree>
 8005488:	2d00      	cmp	r5, #0
 800548a:	d0dc      	beq.n	8005446 <_dtoa_r+0x65e>
 800548c:	b12f      	cbz	r7, 800549a <_dtoa_r+0x6b2>
 800548e:	42af      	cmp	r7, r5
 8005490:	d003      	beq.n	800549a <_dtoa_r+0x6b2>
 8005492:	4639      	mov	r1, r7
 8005494:	4658      	mov	r0, fp
 8005496:	f000 fbab 	bl	8005bf0 <_Bfree>
 800549a:	4629      	mov	r1, r5
 800549c:	4658      	mov	r0, fp
 800549e:	f000 fba7 	bl	8005bf0 <_Bfree>
 80054a2:	e7d0      	b.n	8005446 <_dtoa_r+0x65e>
 80054a4:	9704      	str	r7, [sp, #16]
 80054a6:	4633      	mov	r3, r6
 80054a8:	461e      	mov	r6, r3
 80054aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054ae:	2a39      	cmp	r2, #57	@ 0x39
 80054b0:	d107      	bne.n	80054c2 <_dtoa_r+0x6da>
 80054b2:	459a      	cmp	sl, r3
 80054b4:	d1f8      	bne.n	80054a8 <_dtoa_r+0x6c0>
 80054b6:	9a04      	ldr	r2, [sp, #16]
 80054b8:	3201      	adds	r2, #1
 80054ba:	9204      	str	r2, [sp, #16]
 80054bc:	2230      	movs	r2, #48	@ 0x30
 80054be:	f88a 2000 	strb.w	r2, [sl]
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	3201      	adds	r2, #1
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	e7bd      	b.n	8005446 <_dtoa_r+0x65e>
 80054ca:	4b7b      	ldr	r3, [pc, #492]	@ (80056b8 <_dtoa_r+0x8d0>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	f7fb f8bb 	bl	8000648 <__aeabi_dmul>
 80054d2:	2200      	movs	r2, #0
 80054d4:	2300      	movs	r3, #0
 80054d6:	4604      	mov	r4, r0
 80054d8:	460d      	mov	r5, r1
 80054da:	f7fb fb1d 	bl	8000b18 <__aeabi_dcmpeq>
 80054de:	2800      	cmp	r0, #0
 80054e0:	f43f aebb 	beq.w	800525a <_dtoa_r+0x472>
 80054e4:	e6f0      	b.n	80052c8 <_dtoa_r+0x4e0>
 80054e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80054e8:	2a00      	cmp	r2, #0
 80054ea:	f000 80db 	beq.w	80056a4 <_dtoa_r+0x8bc>
 80054ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054f0:	2a01      	cmp	r2, #1
 80054f2:	f300 80bf 	bgt.w	8005674 <_dtoa_r+0x88c>
 80054f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80054f8:	2a00      	cmp	r2, #0
 80054fa:	f000 80b7 	beq.w	800566c <_dtoa_r+0x884>
 80054fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005502:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005504:	4646      	mov	r6, r8
 8005506:	9a08      	ldr	r2, [sp, #32]
 8005508:	2101      	movs	r1, #1
 800550a:	441a      	add	r2, r3
 800550c:	4658      	mov	r0, fp
 800550e:	4498      	add	r8, r3
 8005510:	9208      	str	r2, [sp, #32]
 8005512:	f000 fc21 	bl	8005d58 <__i2b>
 8005516:	4605      	mov	r5, r0
 8005518:	b15e      	cbz	r6, 8005532 <_dtoa_r+0x74a>
 800551a:	9b08      	ldr	r3, [sp, #32]
 800551c:	2b00      	cmp	r3, #0
 800551e:	dd08      	ble.n	8005532 <_dtoa_r+0x74a>
 8005520:	42b3      	cmp	r3, r6
 8005522:	9a08      	ldr	r2, [sp, #32]
 8005524:	bfa8      	it	ge
 8005526:	4633      	movge	r3, r6
 8005528:	eba8 0803 	sub.w	r8, r8, r3
 800552c:	1af6      	subs	r6, r6, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	9308      	str	r3, [sp, #32]
 8005532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005534:	b1f3      	cbz	r3, 8005574 <_dtoa_r+0x78c>
 8005536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80b7 	beq.w	80056ac <_dtoa_r+0x8c4>
 800553e:	b18c      	cbz	r4, 8005564 <_dtoa_r+0x77c>
 8005540:	4629      	mov	r1, r5
 8005542:	4622      	mov	r2, r4
 8005544:	4658      	mov	r0, fp
 8005546:	f000 fcc7 	bl	8005ed8 <__pow5mult>
 800554a:	464a      	mov	r2, r9
 800554c:	4601      	mov	r1, r0
 800554e:	4605      	mov	r5, r0
 8005550:	4658      	mov	r0, fp
 8005552:	f000 fc17 	bl	8005d84 <__multiply>
 8005556:	4649      	mov	r1, r9
 8005558:	9004      	str	r0, [sp, #16]
 800555a:	4658      	mov	r0, fp
 800555c:	f000 fb48 	bl	8005bf0 <_Bfree>
 8005560:	9b04      	ldr	r3, [sp, #16]
 8005562:	4699      	mov	r9, r3
 8005564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005566:	1b1a      	subs	r2, r3, r4
 8005568:	d004      	beq.n	8005574 <_dtoa_r+0x78c>
 800556a:	4649      	mov	r1, r9
 800556c:	4658      	mov	r0, fp
 800556e:	f000 fcb3 	bl	8005ed8 <__pow5mult>
 8005572:	4681      	mov	r9, r0
 8005574:	2101      	movs	r1, #1
 8005576:	4658      	mov	r0, fp
 8005578:	f000 fbee 	bl	8005d58 <__i2b>
 800557c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800557e:	4604      	mov	r4, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 81cf 	beq.w	8005924 <_dtoa_r+0xb3c>
 8005586:	461a      	mov	r2, r3
 8005588:	4601      	mov	r1, r0
 800558a:	4658      	mov	r0, fp
 800558c:	f000 fca4 	bl	8005ed8 <__pow5mult>
 8005590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005592:	2b01      	cmp	r3, #1
 8005594:	4604      	mov	r4, r0
 8005596:	f300 8095 	bgt.w	80056c4 <_dtoa_r+0x8dc>
 800559a:	9b02      	ldr	r3, [sp, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f040 8087 	bne.w	80056b0 <_dtoa_r+0x8c8>
 80055a2:	9b03      	ldr	r3, [sp, #12]
 80055a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f040 8089 	bne.w	80056c0 <_dtoa_r+0x8d8>
 80055ae:	9b03      	ldr	r3, [sp, #12]
 80055b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055b4:	0d1b      	lsrs	r3, r3, #20
 80055b6:	051b      	lsls	r3, r3, #20
 80055b8:	b12b      	cbz	r3, 80055c6 <_dtoa_r+0x7de>
 80055ba:	9b08      	ldr	r3, [sp, #32]
 80055bc:	3301      	adds	r3, #1
 80055be:	9308      	str	r3, [sp, #32]
 80055c0:	f108 0801 	add.w	r8, r8, #1
 80055c4:	2301      	movs	r3, #1
 80055c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80055c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 81b0 	beq.w	8005930 <_dtoa_r+0xb48>
 80055d0:	6923      	ldr	r3, [r4, #16]
 80055d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055d6:	6918      	ldr	r0, [r3, #16]
 80055d8:	f000 fb72 	bl	8005cc0 <__hi0bits>
 80055dc:	f1c0 0020 	rsb	r0, r0, #32
 80055e0:	9b08      	ldr	r3, [sp, #32]
 80055e2:	4418      	add	r0, r3
 80055e4:	f010 001f 	ands.w	r0, r0, #31
 80055e8:	d077      	beq.n	80056da <_dtoa_r+0x8f2>
 80055ea:	f1c0 0320 	rsb	r3, r0, #32
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	dd6b      	ble.n	80056ca <_dtoa_r+0x8e2>
 80055f2:	9b08      	ldr	r3, [sp, #32]
 80055f4:	f1c0 001c 	rsb	r0, r0, #28
 80055f8:	4403      	add	r3, r0
 80055fa:	4480      	add	r8, r0
 80055fc:	4406      	add	r6, r0
 80055fe:	9308      	str	r3, [sp, #32]
 8005600:	f1b8 0f00 	cmp.w	r8, #0
 8005604:	dd05      	ble.n	8005612 <_dtoa_r+0x82a>
 8005606:	4649      	mov	r1, r9
 8005608:	4642      	mov	r2, r8
 800560a:	4658      	mov	r0, fp
 800560c:	f000 fcbe 	bl	8005f8c <__lshift>
 8005610:	4681      	mov	r9, r0
 8005612:	9b08      	ldr	r3, [sp, #32]
 8005614:	2b00      	cmp	r3, #0
 8005616:	dd05      	ble.n	8005624 <_dtoa_r+0x83c>
 8005618:	4621      	mov	r1, r4
 800561a:	461a      	mov	r2, r3
 800561c:	4658      	mov	r0, fp
 800561e:	f000 fcb5 	bl	8005f8c <__lshift>
 8005622:	4604      	mov	r4, r0
 8005624:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005626:	2b00      	cmp	r3, #0
 8005628:	d059      	beq.n	80056de <_dtoa_r+0x8f6>
 800562a:	4621      	mov	r1, r4
 800562c:	4648      	mov	r0, r9
 800562e:	f000 fd19 	bl	8006064 <__mcmp>
 8005632:	2800      	cmp	r0, #0
 8005634:	da53      	bge.n	80056de <_dtoa_r+0x8f6>
 8005636:	1e7b      	subs	r3, r7, #1
 8005638:	9304      	str	r3, [sp, #16]
 800563a:	4649      	mov	r1, r9
 800563c:	2300      	movs	r3, #0
 800563e:	220a      	movs	r2, #10
 8005640:	4658      	mov	r0, fp
 8005642:	f000 faf7 	bl	8005c34 <__multadd>
 8005646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005648:	4681      	mov	r9, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 8172 	beq.w	8005934 <_dtoa_r+0xb4c>
 8005650:	2300      	movs	r3, #0
 8005652:	4629      	mov	r1, r5
 8005654:	220a      	movs	r2, #10
 8005656:	4658      	mov	r0, fp
 8005658:	f000 faec 	bl	8005c34 <__multadd>
 800565c:	9b00      	ldr	r3, [sp, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	4605      	mov	r5, r0
 8005662:	dc67      	bgt.n	8005734 <_dtoa_r+0x94c>
 8005664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005666:	2b02      	cmp	r3, #2
 8005668:	dc41      	bgt.n	80056ee <_dtoa_r+0x906>
 800566a:	e063      	b.n	8005734 <_dtoa_r+0x94c>
 800566c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800566e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005672:	e746      	b.n	8005502 <_dtoa_r+0x71a>
 8005674:	9b07      	ldr	r3, [sp, #28]
 8005676:	1e5c      	subs	r4, r3, #1
 8005678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800567a:	42a3      	cmp	r3, r4
 800567c:	bfbf      	itttt	lt
 800567e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005680:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005682:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005684:	1ae3      	sublt	r3, r4, r3
 8005686:	bfb4      	ite	lt
 8005688:	18d2      	addlt	r2, r2, r3
 800568a:	1b1c      	subge	r4, r3, r4
 800568c:	9b07      	ldr	r3, [sp, #28]
 800568e:	bfbc      	itt	lt
 8005690:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005692:	2400      	movlt	r4, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	bfb5      	itete	lt
 8005698:	eba8 0603 	sublt.w	r6, r8, r3
 800569c:	9b07      	ldrge	r3, [sp, #28]
 800569e:	2300      	movlt	r3, #0
 80056a0:	4646      	movge	r6, r8
 80056a2:	e730      	b.n	8005506 <_dtoa_r+0x71e>
 80056a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80056a8:	4646      	mov	r6, r8
 80056aa:	e735      	b.n	8005518 <_dtoa_r+0x730>
 80056ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056ae:	e75c      	b.n	800556a <_dtoa_r+0x782>
 80056b0:	2300      	movs	r3, #0
 80056b2:	e788      	b.n	80055c6 <_dtoa_r+0x7de>
 80056b4:	3fe00000 	.word	0x3fe00000
 80056b8:	40240000 	.word	0x40240000
 80056bc:	40140000 	.word	0x40140000
 80056c0:	9b02      	ldr	r3, [sp, #8]
 80056c2:	e780      	b.n	80055c6 <_dtoa_r+0x7de>
 80056c4:	2300      	movs	r3, #0
 80056c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80056c8:	e782      	b.n	80055d0 <_dtoa_r+0x7e8>
 80056ca:	d099      	beq.n	8005600 <_dtoa_r+0x818>
 80056cc:	9a08      	ldr	r2, [sp, #32]
 80056ce:	331c      	adds	r3, #28
 80056d0:	441a      	add	r2, r3
 80056d2:	4498      	add	r8, r3
 80056d4:	441e      	add	r6, r3
 80056d6:	9208      	str	r2, [sp, #32]
 80056d8:	e792      	b.n	8005600 <_dtoa_r+0x818>
 80056da:	4603      	mov	r3, r0
 80056dc:	e7f6      	b.n	80056cc <_dtoa_r+0x8e4>
 80056de:	9b07      	ldr	r3, [sp, #28]
 80056e0:	9704      	str	r7, [sp, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	dc20      	bgt.n	8005728 <_dtoa_r+0x940>
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	dd1e      	ble.n	800572c <_dtoa_r+0x944>
 80056ee:	9b00      	ldr	r3, [sp, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f47f aec0 	bne.w	8005476 <_dtoa_r+0x68e>
 80056f6:	4621      	mov	r1, r4
 80056f8:	2205      	movs	r2, #5
 80056fa:	4658      	mov	r0, fp
 80056fc:	f000 fa9a 	bl	8005c34 <__multadd>
 8005700:	4601      	mov	r1, r0
 8005702:	4604      	mov	r4, r0
 8005704:	4648      	mov	r0, r9
 8005706:	f000 fcad 	bl	8006064 <__mcmp>
 800570a:	2800      	cmp	r0, #0
 800570c:	f77f aeb3 	ble.w	8005476 <_dtoa_r+0x68e>
 8005710:	4656      	mov	r6, sl
 8005712:	2331      	movs	r3, #49	@ 0x31
 8005714:	f806 3b01 	strb.w	r3, [r6], #1
 8005718:	9b04      	ldr	r3, [sp, #16]
 800571a:	3301      	adds	r3, #1
 800571c:	9304      	str	r3, [sp, #16]
 800571e:	e6ae      	b.n	800547e <_dtoa_r+0x696>
 8005720:	9c07      	ldr	r4, [sp, #28]
 8005722:	9704      	str	r7, [sp, #16]
 8005724:	4625      	mov	r5, r4
 8005726:	e7f3      	b.n	8005710 <_dtoa_r+0x928>
 8005728:	9b07      	ldr	r3, [sp, #28]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 8104 	beq.w	800593c <_dtoa_r+0xb54>
 8005734:	2e00      	cmp	r6, #0
 8005736:	dd05      	ble.n	8005744 <_dtoa_r+0x95c>
 8005738:	4629      	mov	r1, r5
 800573a:	4632      	mov	r2, r6
 800573c:	4658      	mov	r0, fp
 800573e:	f000 fc25 	bl	8005f8c <__lshift>
 8005742:	4605      	mov	r5, r0
 8005744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d05a      	beq.n	8005800 <_dtoa_r+0xa18>
 800574a:	6869      	ldr	r1, [r5, #4]
 800574c:	4658      	mov	r0, fp
 800574e:	f000 fa0f 	bl	8005b70 <_Balloc>
 8005752:	4606      	mov	r6, r0
 8005754:	b928      	cbnz	r0, 8005762 <_dtoa_r+0x97a>
 8005756:	4b84      	ldr	r3, [pc, #528]	@ (8005968 <_dtoa_r+0xb80>)
 8005758:	4602      	mov	r2, r0
 800575a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800575e:	f7ff bb5a 	b.w	8004e16 <_dtoa_r+0x2e>
 8005762:	692a      	ldr	r2, [r5, #16]
 8005764:	3202      	adds	r2, #2
 8005766:	0092      	lsls	r2, r2, #2
 8005768:	f105 010c 	add.w	r1, r5, #12
 800576c:	300c      	adds	r0, #12
 800576e:	f7ff faa2 	bl	8004cb6 <memcpy>
 8005772:	2201      	movs	r2, #1
 8005774:	4631      	mov	r1, r6
 8005776:	4658      	mov	r0, fp
 8005778:	f000 fc08 	bl	8005f8c <__lshift>
 800577c:	f10a 0301 	add.w	r3, sl, #1
 8005780:	9307      	str	r3, [sp, #28]
 8005782:	9b00      	ldr	r3, [sp, #0]
 8005784:	4453      	add	r3, sl
 8005786:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005788:	9b02      	ldr	r3, [sp, #8]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	462f      	mov	r7, r5
 8005790:	930a      	str	r3, [sp, #40]	@ 0x28
 8005792:	4605      	mov	r5, r0
 8005794:	9b07      	ldr	r3, [sp, #28]
 8005796:	4621      	mov	r1, r4
 8005798:	3b01      	subs	r3, #1
 800579a:	4648      	mov	r0, r9
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	f7ff fa98 	bl	8004cd2 <quorem>
 80057a2:	4639      	mov	r1, r7
 80057a4:	9002      	str	r0, [sp, #8]
 80057a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80057aa:	4648      	mov	r0, r9
 80057ac:	f000 fc5a 	bl	8006064 <__mcmp>
 80057b0:	462a      	mov	r2, r5
 80057b2:	9008      	str	r0, [sp, #32]
 80057b4:	4621      	mov	r1, r4
 80057b6:	4658      	mov	r0, fp
 80057b8:	f000 fc70 	bl	800609c <__mdiff>
 80057bc:	68c2      	ldr	r2, [r0, #12]
 80057be:	4606      	mov	r6, r0
 80057c0:	bb02      	cbnz	r2, 8005804 <_dtoa_r+0xa1c>
 80057c2:	4601      	mov	r1, r0
 80057c4:	4648      	mov	r0, r9
 80057c6:	f000 fc4d 	bl	8006064 <__mcmp>
 80057ca:	4602      	mov	r2, r0
 80057cc:	4631      	mov	r1, r6
 80057ce:	4658      	mov	r0, fp
 80057d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80057d2:	f000 fa0d 	bl	8005bf0 <_Bfree>
 80057d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057da:	9e07      	ldr	r6, [sp, #28]
 80057dc:	ea43 0102 	orr.w	r1, r3, r2
 80057e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057e2:	4319      	orrs	r1, r3
 80057e4:	d110      	bne.n	8005808 <_dtoa_r+0xa20>
 80057e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80057ea:	d029      	beq.n	8005840 <_dtoa_r+0xa58>
 80057ec:	9b08      	ldr	r3, [sp, #32]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dd02      	ble.n	80057f8 <_dtoa_r+0xa10>
 80057f2:	9b02      	ldr	r3, [sp, #8]
 80057f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80057f8:	9b00      	ldr	r3, [sp, #0]
 80057fa:	f883 8000 	strb.w	r8, [r3]
 80057fe:	e63f      	b.n	8005480 <_dtoa_r+0x698>
 8005800:	4628      	mov	r0, r5
 8005802:	e7bb      	b.n	800577c <_dtoa_r+0x994>
 8005804:	2201      	movs	r2, #1
 8005806:	e7e1      	b.n	80057cc <_dtoa_r+0x9e4>
 8005808:	9b08      	ldr	r3, [sp, #32]
 800580a:	2b00      	cmp	r3, #0
 800580c:	db04      	blt.n	8005818 <_dtoa_r+0xa30>
 800580e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005810:	430b      	orrs	r3, r1
 8005812:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005814:	430b      	orrs	r3, r1
 8005816:	d120      	bne.n	800585a <_dtoa_r+0xa72>
 8005818:	2a00      	cmp	r2, #0
 800581a:	dded      	ble.n	80057f8 <_dtoa_r+0xa10>
 800581c:	4649      	mov	r1, r9
 800581e:	2201      	movs	r2, #1
 8005820:	4658      	mov	r0, fp
 8005822:	f000 fbb3 	bl	8005f8c <__lshift>
 8005826:	4621      	mov	r1, r4
 8005828:	4681      	mov	r9, r0
 800582a:	f000 fc1b 	bl	8006064 <__mcmp>
 800582e:	2800      	cmp	r0, #0
 8005830:	dc03      	bgt.n	800583a <_dtoa_r+0xa52>
 8005832:	d1e1      	bne.n	80057f8 <_dtoa_r+0xa10>
 8005834:	f018 0f01 	tst.w	r8, #1
 8005838:	d0de      	beq.n	80057f8 <_dtoa_r+0xa10>
 800583a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800583e:	d1d8      	bne.n	80057f2 <_dtoa_r+0xa0a>
 8005840:	9a00      	ldr	r2, [sp, #0]
 8005842:	2339      	movs	r3, #57	@ 0x39
 8005844:	7013      	strb	r3, [r2, #0]
 8005846:	4633      	mov	r3, r6
 8005848:	461e      	mov	r6, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005850:	2a39      	cmp	r2, #57	@ 0x39
 8005852:	d052      	beq.n	80058fa <_dtoa_r+0xb12>
 8005854:	3201      	adds	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	e612      	b.n	8005480 <_dtoa_r+0x698>
 800585a:	2a00      	cmp	r2, #0
 800585c:	dd07      	ble.n	800586e <_dtoa_r+0xa86>
 800585e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005862:	d0ed      	beq.n	8005840 <_dtoa_r+0xa58>
 8005864:	9a00      	ldr	r2, [sp, #0]
 8005866:	f108 0301 	add.w	r3, r8, #1
 800586a:	7013      	strb	r3, [r2, #0]
 800586c:	e608      	b.n	8005480 <_dtoa_r+0x698>
 800586e:	9b07      	ldr	r3, [sp, #28]
 8005870:	9a07      	ldr	r2, [sp, #28]
 8005872:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005878:	4293      	cmp	r3, r2
 800587a:	d028      	beq.n	80058ce <_dtoa_r+0xae6>
 800587c:	4649      	mov	r1, r9
 800587e:	2300      	movs	r3, #0
 8005880:	220a      	movs	r2, #10
 8005882:	4658      	mov	r0, fp
 8005884:	f000 f9d6 	bl	8005c34 <__multadd>
 8005888:	42af      	cmp	r7, r5
 800588a:	4681      	mov	r9, r0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	f04f 020a 	mov.w	r2, #10
 8005894:	4639      	mov	r1, r7
 8005896:	4658      	mov	r0, fp
 8005898:	d107      	bne.n	80058aa <_dtoa_r+0xac2>
 800589a:	f000 f9cb 	bl	8005c34 <__multadd>
 800589e:	4607      	mov	r7, r0
 80058a0:	4605      	mov	r5, r0
 80058a2:	9b07      	ldr	r3, [sp, #28]
 80058a4:	3301      	adds	r3, #1
 80058a6:	9307      	str	r3, [sp, #28]
 80058a8:	e774      	b.n	8005794 <_dtoa_r+0x9ac>
 80058aa:	f000 f9c3 	bl	8005c34 <__multadd>
 80058ae:	4629      	mov	r1, r5
 80058b0:	4607      	mov	r7, r0
 80058b2:	2300      	movs	r3, #0
 80058b4:	220a      	movs	r2, #10
 80058b6:	4658      	mov	r0, fp
 80058b8:	f000 f9bc 	bl	8005c34 <__multadd>
 80058bc:	4605      	mov	r5, r0
 80058be:	e7f0      	b.n	80058a2 <_dtoa_r+0xaba>
 80058c0:	9b00      	ldr	r3, [sp, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfcc      	ite	gt
 80058c6:	461e      	movgt	r6, r3
 80058c8:	2601      	movle	r6, #1
 80058ca:	4456      	add	r6, sl
 80058cc:	2700      	movs	r7, #0
 80058ce:	4649      	mov	r1, r9
 80058d0:	2201      	movs	r2, #1
 80058d2:	4658      	mov	r0, fp
 80058d4:	f000 fb5a 	bl	8005f8c <__lshift>
 80058d8:	4621      	mov	r1, r4
 80058da:	4681      	mov	r9, r0
 80058dc:	f000 fbc2 	bl	8006064 <__mcmp>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	dcb0      	bgt.n	8005846 <_dtoa_r+0xa5e>
 80058e4:	d102      	bne.n	80058ec <_dtoa_r+0xb04>
 80058e6:	f018 0f01 	tst.w	r8, #1
 80058ea:	d1ac      	bne.n	8005846 <_dtoa_r+0xa5e>
 80058ec:	4633      	mov	r3, r6
 80058ee:	461e      	mov	r6, r3
 80058f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058f4:	2a30      	cmp	r2, #48	@ 0x30
 80058f6:	d0fa      	beq.n	80058ee <_dtoa_r+0xb06>
 80058f8:	e5c2      	b.n	8005480 <_dtoa_r+0x698>
 80058fa:	459a      	cmp	sl, r3
 80058fc:	d1a4      	bne.n	8005848 <_dtoa_r+0xa60>
 80058fe:	9b04      	ldr	r3, [sp, #16]
 8005900:	3301      	adds	r3, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	2331      	movs	r3, #49	@ 0x31
 8005906:	f88a 3000 	strb.w	r3, [sl]
 800590a:	e5b9      	b.n	8005480 <_dtoa_r+0x698>
 800590c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800590e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800596c <_dtoa_r+0xb84>
 8005912:	b11b      	cbz	r3, 800591c <_dtoa_r+0xb34>
 8005914:	f10a 0308 	add.w	r3, sl, #8
 8005918:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4650      	mov	r0, sl
 800591e:	b019      	add	sp, #100	@ 0x64
 8005920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005926:	2b01      	cmp	r3, #1
 8005928:	f77f ae37 	ble.w	800559a <_dtoa_r+0x7b2>
 800592c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800592e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005930:	2001      	movs	r0, #1
 8005932:	e655      	b.n	80055e0 <_dtoa_r+0x7f8>
 8005934:	9b00      	ldr	r3, [sp, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f77f aed6 	ble.w	80056e8 <_dtoa_r+0x900>
 800593c:	4656      	mov	r6, sl
 800593e:	4621      	mov	r1, r4
 8005940:	4648      	mov	r0, r9
 8005942:	f7ff f9c6 	bl	8004cd2 <quorem>
 8005946:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800594a:	f806 8b01 	strb.w	r8, [r6], #1
 800594e:	9b00      	ldr	r3, [sp, #0]
 8005950:	eba6 020a 	sub.w	r2, r6, sl
 8005954:	4293      	cmp	r3, r2
 8005956:	ddb3      	ble.n	80058c0 <_dtoa_r+0xad8>
 8005958:	4649      	mov	r1, r9
 800595a:	2300      	movs	r3, #0
 800595c:	220a      	movs	r2, #10
 800595e:	4658      	mov	r0, fp
 8005960:	f000 f968 	bl	8005c34 <__multadd>
 8005964:	4681      	mov	r9, r0
 8005966:	e7ea      	b.n	800593e <_dtoa_r+0xb56>
 8005968:	08006a74 	.word	0x08006a74
 800596c:	080069f8 	.word	0x080069f8

08005970 <_free_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4605      	mov	r5, r0
 8005974:	2900      	cmp	r1, #0
 8005976:	d041      	beq.n	80059fc <_free_r+0x8c>
 8005978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800597c:	1f0c      	subs	r4, r1, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	bfb8      	it	lt
 8005982:	18e4      	addlt	r4, r4, r3
 8005984:	f000 f8e8 	bl	8005b58 <__malloc_lock>
 8005988:	4a1d      	ldr	r2, [pc, #116]	@ (8005a00 <_free_r+0x90>)
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	b933      	cbnz	r3, 800599c <_free_r+0x2c>
 800598e:	6063      	str	r3, [r4, #4]
 8005990:	6014      	str	r4, [r2, #0]
 8005992:	4628      	mov	r0, r5
 8005994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005998:	f000 b8e4 	b.w	8005b64 <__malloc_unlock>
 800599c:	42a3      	cmp	r3, r4
 800599e:	d908      	bls.n	80059b2 <_free_r+0x42>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	1821      	adds	r1, r4, r0
 80059a4:	428b      	cmp	r3, r1
 80059a6:	bf01      	itttt	eq
 80059a8:	6819      	ldreq	r1, [r3, #0]
 80059aa:	685b      	ldreq	r3, [r3, #4]
 80059ac:	1809      	addeq	r1, r1, r0
 80059ae:	6021      	streq	r1, [r4, #0]
 80059b0:	e7ed      	b.n	800598e <_free_r+0x1e>
 80059b2:	461a      	mov	r2, r3
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	b10b      	cbz	r3, 80059bc <_free_r+0x4c>
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d9fa      	bls.n	80059b2 <_free_r+0x42>
 80059bc:	6811      	ldr	r1, [r2, #0]
 80059be:	1850      	adds	r0, r2, r1
 80059c0:	42a0      	cmp	r0, r4
 80059c2:	d10b      	bne.n	80059dc <_free_r+0x6c>
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	4401      	add	r1, r0
 80059c8:	1850      	adds	r0, r2, r1
 80059ca:	4283      	cmp	r3, r0
 80059cc:	6011      	str	r1, [r2, #0]
 80059ce:	d1e0      	bne.n	8005992 <_free_r+0x22>
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	6053      	str	r3, [r2, #4]
 80059d6:	4408      	add	r0, r1
 80059d8:	6010      	str	r0, [r2, #0]
 80059da:	e7da      	b.n	8005992 <_free_r+0x22>
 80059dc:	d902      	bls.n	80059e4 <_free_r+0x74>
 80059de:	230c      	movs	r3, #12
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	e7d6      	b.n	8005992 <_free_r+0x22>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	1821      	adds	r1, r4, r0
 80059e8:	428b      	cmp	r3, r1
 80059ea:	bf04      	itt	eq
 80059ec:	6819      	ldreq	r1, [r3, #0]
 80059ee:	685b      	ldreq	r3, [r3, #4]
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	bf04      	itt	eq
 80059f4:	1809      	addeq	r1, r1, r0
 80059f6:	6021      	streq	r1, [r4, #0]
 80059f8:	6054      	str	r4, [r2, #4]
 80059fa:	e7ca      	b.n	8005992 <_free_r+0x22>
 80059fc:	bd38      	pop	{r3, r4, r5, pc}
 80059fe:	bf00      	nop
 8005a00:	200003ec 	.word	0x200003ec

08005a04 <malloc>:
 8005a04:	4b02      	ldr	r3, [pc, #8]	@ (8005a10 <malloc+0xc>)
 8005a06:	4601      	mov	r1, r0
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	f000 b825 	b.w	8005a58 <_malloc_r>
 8005a0e:	bf00      	nop
 8005a10:	20000028 	.word	0x20000028

08005a14 <sbrk_aligned>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	4e0f      	ldr	r6, [pc, #60]	@ (8005a54 <sbrk_aligned+0x40>)
 8005a18:	460c      	mov	r4, r1
 8005a1a:	6831      	ldr	r1, [r6, #0]
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	b911      	cbnz	r1, 8005a26 <sbrk_aligned+0x12>
 8005a20:	f000 fe9a 	bl	8006758 <_sbrk_r>
 8005a24:	6030      	str	r0, [r6, #0]
 8005a26:	4621      	mov	r1, r4
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f000 fe95 	bl	8006758 <_sbrk_r>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	d103      	bne.n	8005a3a <sbrk_aligned+0x26>
 8005a32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005a36:	4620      	mov	r0, r4
 8005a38:	bd70      	pop	{r4, r5, r6, pc}
 8005a3a:	1cc4      	adds	r4, r0, #3
 8005a3c:	f024 0403 	bic.w	r4, r4, #3
 8005a40:	42a0      	cmp	r0, r4
 8005a42:	d0f8      	beq.n	8005a36 <sbrk_aligned+0x22>
 8005a44:	1a21      	subs	r1, r4, r0
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 fe86 	bl	8006758 <_sbrk_r>
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d1f2      	bne.n	8005a36 <sbrk_aligned+0x22>
 8005a50:	e7ef      	b.n	8005a32 <sbrk_aligned+0x1e>
 8005a52:	bf00      	nop
 8005a54:	200003e8 	.word	0x200003e8

08005a58 <_malloc_r>:
 8005a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a5c:	1ccd      	adds	r5, r1, #3
 8005a5e:	f025 0503 	bic.w	r5, r5, #3
 8005a62:	3508      	adds	r5, #8
 8005a64:	2d0c      	cmp	r5, #12
 8005a66:	bf38      	it	cc
 8005a68:	250c      	movcc	r5, #12
 8005a6a:	2d00      	cmp	r5, #0
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	db01      	blt.n	8005a74 <_malloc_r+0x1c>
 8005a70:	42a9      	cmp	r1, r5
 8005a72:	d904      	bls.n	8005a7e <_malloc_r+0x26>
 8005a74:	230c      	movs	r3, #12
 8005a76:	6033      	str	r3, [r6, #0]
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b54 <_malloc_r+0xfc>
 8005a82:	f000 f869 	bl	8005b58 <__malloc_lock>
 8005a86:	f8d8 3000 	ldr.w	r3, [r8]
 8005a8a:	461c      	mov	r4, r3
 8005a8c:	bb44      	cbnz	r4, 8005ae0 <_malloc_r+0x88>
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4630      	mov	r0, r6
 8005a92:	f7ff ffbf 	bl	8005a14 <sbrk_aligned>
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	4604      	mov	r4, r0
 8005a9a:	d158      	bne.n	8005b4e <_malloc_r+0xf6>
 8005a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8005aa0:	4627      	mov	r7, r4
 8005aa2:	2f00      	cmp	r7, #0
 8005aa4:	d143      	bne.n	8005b2e <_malloc_r+0xd6>
 8005aa6:	2c00      	cmp	r4, #0
 8005aa8:	d04b      	beq.n	8005b42 <_malloc_r+0xea>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	4639      	mov	r1, r7
 8005aae:	4630      	mov	r0, r6
 8005ab0:	eb04 0903 	add.w	r9, r4, r3
 8005ab4:	f000 fe50 	bl	8006758 <_sbrk_r>
 8005ab8:	4581      	cmp	r9, r0
 8005aba:	d142      	bne.n	8005b42 <_malloc_r+0xea>
 8005abc:	6821      	ldr	r1, [r4, #0]
 8005abe:	1a6d      	subs	r5, r5, r1
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7ff ffa6 	bl	8005a14 <sbrk_aligned>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d03a      	beq.n	8005b42 <_malloc_r+0xea>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	442b      	add	r3, r5
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	bb62      	cbnz	r2, 8005b34 <_malloc_r+0xdc>
 8005ada:	f8c8 7000 	str.w	r7, [r8]
 8005ade:	e00f      	b.n	8005b00 <_malloc_r+0xa8>
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	1b52      	subs	r2, r2, r5
 8005ae4:	d420      	bmi.n	8005b28 <_malloc_r+0xd0>
 8005ae6:	2a0b      	cmp	r2, #11
 8005ae8:	d917      	bls.n	8005b1a <_malloc_r+0xc2>
 8005aea:	1961      	adds	r1, r4, r5
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	6025      	str	r5, [r4, #0]
 8005af0:	bf18      	it	ne
 8005af2:	6059      	strne	r1, [r3, #4]
 8005af4:	6863      	ldr	r3, [r4, #4]
 8005af6:	bf08      	it	eq
 8005af8:	f8c8 1000 	streq.w	r1, [r8]
 8005afc:	5162      	str	r2, [r4, r5]
 8005afe:	604b      	str	r3, [r1, #4]
 8005b00:	4630      	mov	r0, r6
 8005b02:	f000 f82f 	bl	8005b64 <__malloc_unlock>
 8005b06:	f104 000b 	add.w	r0, r4, #11
 8005b0a:	1d23      	adds	r3, r4, #4
 8005b0c:	f020 0007 	bic.w	r0, r0, #7
 8005b10:	1ac2      	subs	r2, r0, r3
 8005b12:	bf1c      	itt	ne
 8005b14:	1a1b      	subne	r3, r3, r0
 8005b16:	50a3      	strne	r3, [r4, r2]
 8005b18:	e7af      	b.n	8005a7a <_malloc_r+0x22>
 8005b1a:	6862      	ldr	r2, [r4, #4]
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	bf0c      	ite	eq
 8005b20:	f8c8 2000 	streq.w	r2, [r8]
 8005b24:	605a      	strne	r2, [r3, #4]
 8005b26:	e7eb      	b.n	8005b00 <_malloc_r+0xa8>
 8005b28:	4623      	mov	r3, r4
 8005b2a:	6864      	ldr	r4, [r4, #4]
 8005b2c:	e7ae      	b.n	8005a8c <_malloc_r+0x34>
 8005b2e:	463c      	mov	r4, r7
 8005b30:	687f      	ldr	r7, [r7, #4]
 8005b32:	e7b6      	b.n	8005aa2 <_malloc_r+0x4a>
 8005b34:	461a      	mov	r2, r3
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	d1fb      	bne.n	8005b34 <_malloc_r+0xdc>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6053      	str	r3, [r2, #4]
 8005b40:	e7de      	b.n	8005b00 <_malloc_r+0xa8>
 8005b42:	230c      	movs	r3, #12
 8005b44:	6033      	str	r3, [r6, #0]
 8005b46:	4630      	mov	r0, r6
 8005b48:	f000 f80c 	bl	8005b64 <__malloc_unlock>
 8005b4c:	e794      	b.n	8005a78 <_malloc_r+0x20>
 8005b4e:	6005      	str	r5, [r0, #0]
 8005b50:	e7d6      	b.n	8005b00 <_malloc_r+0xa8>
 8005b52:	bf00      	nop
 8005b54:	200003ec 	.word	0x200003ec

08005b58 <__malloc_lock>:
 8005b58:	4801      	ldr	r0, [pc, #4]	@ (8005b60 <__malloc_lock+0x8>)
 8005b5a:	f7ff b8aa 	b.w	8004cb2 <__retarget_lock_acquire_recursive>
 8005b5e:	bf00      	nop
 8005b60:	200003e4 	.word	0x200003e4

08005b64 <__malloc_unlock>:
 8005b64:	4801      	ldr	r0, [pc, #4]	@ (8005b6c <__malloc_unlock+0x8>)
 8005b66:	f7ff b8a5 	b.w	8004cb4 <__retarget_lock_release_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	200003e4 	.word	0x200003e4

08005b70 <_Balloc>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	69c6      	ldr	r6, [r0, #28]
 8005b74:	4604      	mov	r4, r0
 8005b76:	460d      	mov	r5, r1
 8005b78:	b976      	cbnz	r6, 8005b98 <_Balloc+0x28>
 8005b7a:	2010      	movs	r0, #16
 8005b7c:	f7ff ff42 	bl	8005a04 <malloc>
 8005b80:	4602      	mov	r2, r0
 8005b82:	61e0      	str	r0, [r4, #28]
 8005b84:	b920      	cbnz	r0, 8005b90 <_Balloc+0x20>
 8005b86:	4b18      	ldr	r3, [pc, #96]	@ (8005be8 <_Balloc+0x78>)
 8005b88:	4818      	ldr	r0, [pc, #96]	@ (8005bec <_Balloc+0x7c>)
 8005b8a:	216b      	movs	r1, #107	@ 0x6b
 8005b8c:	f000 fdf4 	bl	8006778 <__assert_func>
 8005b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b94:	6006      	str	r6, [r0, #0]
 8005b96:	60c6      	str	r6, [r0, #12]
 8005b98:	69e6      	ldr	r6, [r4, #28]
 8005b9a:	68f3      	ldr	r3, [r6, #12]
 8005b9c:	b183      	cbz	r3, 8005bc0 <_Balloc+0x50>
 8005b9e:	69e3      	ldr	r3, [r4, #28]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ba6:	b9b8      	cbnz	r0, 8005bd8 <_Balloc+0x68>
 8005ba8:	2101      	movs	r1, #1
 8005baa:	fa01 f605 	lsl.w	r6, r1, r5
 8005bae:	1d72      	adds	r2, r6, #5
 8005bb0:	0092      	lsls	r2, r2, #2
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 fdfe 	bl	80067b4 <_calloc_r>
 8005bb8:	b160      	cbz	r0, 8005bd4 <_Balloc+0x64>
 8005bba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005bbe:	e00e      	b.n	8005bde <_Balloc+0x6e>
 8005bc0:	2221      	movs	r2, #33	@ 0x21
 8005bc2:	2104      	movs	r1, #4
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fdf5 	bl	80067b4 <_calloc_r>
 8005bca:	69e3      	ldr	r3, [r4, #28]
 8005bcc:	60f0      	str	r0, [r6, #12]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e4      	bne.n	8005b9e <_Balloc+0x2e>
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}
 8005bd8:	6802      	ldr	r2, [r0, #0]
 8005bda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005bde:	2300      	movs	r3, #0
 8005be0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005be4:	e7f7      	b.n	8005bd6 <_Balloc+0x66>
 8005be6:	bf00      	nop
 8005be8:	08006a05 	.word	0x08006a05
 8005bec:	08006a85 	.word	0x08006a85

08005bf0 <_Bfree>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	69c6      	ldr	r6, [r0, #28]
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	b976      	cbnz	r6, 8005c18 <_Bfree+0x28>
 8005bfa:	2010      	movs	r0, #16
 8005bfc:	f7ff ff02 	bl	8005a04 <malloc>
 8005c00:	4602      	mov	r2, r0
 8005c02:	61e8      	str	r0, [r5, #28]
 8005c04:	b920      	cbnz	r0, 8005c10 <_Bfree+0x20>
 8005c06:	4b09      	ldr	r3, [pc, #36]	@ (8005c2c <_Bfree+0x3c>)
 8005c08:	4809      	ldr	r0, [pc, #36]	@ (8005c30 <_Bfree+0x40>)
 8005c0a:	218f      	movs	r1, #143	@ 0x8f
 8005c0c:	f000 fdb4 	bl	8006778 <__assert_func>
 8005c10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c14:	6006      	str	r6, [r0, #0]
 8005c16:	60c6      	str	r6, [r0, #12]
 8005c18:	b13c      	cbz	r4, 8005c2a <_Bfree+0x3a>
 8005c1a:	69eb      	ldr	r3, [r5, #28]
 8005c1c:	6862      	ldr	r2, [r4, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c24:	6021      	str	r1, [r4, #0]
 8005c26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	08006a05 	.word	0x08006a05
 8005c30:	08006a85 	.word	0x08006a85

08005c34 <__multadd>:
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c38:	690d      	ldr	r5, [r1, #16]
 8005c3a:	4607      	mov	r7, r0
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	461e      	mov	r6, r3
 8005c40:	f101 0c14 	add.w	ip, r1, #20
 8005c44:	2000      	movs	r0, #0
 8005c46:	f8dc 3000 	ldr.w	r3, [ip]
 8005c4a:	b299      	uxth	r1, r3
 8005c4c:	fb02 6101 	mla	r1, r2, r1, r6
 8005c50:	0c1e      	lsrs	r6, r3, #16
 8005c52:	0c0b      	lsrs	r3, r1, #16
 8005c54:	fb02 3306 	mla	r3, r2, r6, r3
 8005c58:	b289      	uxth	r1, r1
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c60:	4285      	cmp	r5, r0
 8005c62:	f84c 1b04 	str.w	r1, [ip], #4
 8005c66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c6a:	dcec      	bgt.n	8005c46 <__multadd+0x12>
 8005c6c:	b30e      	cbz	r6, 8005cb2 <__multadd+0x7e>
 8005c6e:	68a3      	ldr	r3, [r4, #8]
 8005c70:	42ab      	cmp	r3, r5
 8005c72:	dc19      	bgt.n	8005ca8 <__multadd+0x74>
 8005c74:	6861      	ldr	r1, [r4, #4]
 8005c76:	4638      	mov	r0, r7
 8005c78:	3101      	adds	r1, #1
 8005c7a:	f7ff ff79 	bl	8005b70 <_Balloc>
 8005c7e:	4680      	mov	r8, r0
 8005c80:	b928      	cbnz	r0, 8005c8e <__multadd+0x5a>
 8005c82:	4602      	mov	r2, r0
 8005c84:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb8 <__multadd+0x84>)
 8005c86:	480d      	ldr	r0, [pc, #52]	@ (8005cbc <__multadd+0x88>)
 8005c88:	21ba      	movs	r1, #186	@ 0xba
 8005c8a:	f000 fd75 	bl	8006778 <__assert_func>
 8005c8e:	6922      	ldr	r2, [r4, #16]
 8005c90:	3202      	adds	r2, #2
 8005c92:	f104 010c 	add.w	r1, r4, #12
 8005c96:	0092      	lsls	r2, r2, #2
 8005c98:	300c      	adds	r0, #12
 8005c9a:	f7ff f80c 	bl	8004cb6 <memcpy>
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	f7ff ffa5 	bl	8005bf0 <_Bfree>
 8005ca6:	4644      	mov	r4, r8
 8005ca8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cac:	3501      	adds	r5, #1
 8005cae:	615e      	str	r6, [r3, #20]
 8005cb0:	6125      	str	r5, [r4, #16]
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb8:	08006a74 	.word	0x08006a74
 8005cbc:	08006a85 	.word	0x08006a85

08005cc0 <__hi0bits>:
 8005cc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	bf36      	itet	cc
 8005cc8:	0403      	lslcc	r3, r0, #16
 8005cca:	2000      	movcs	r0, #0
 8005ccc:	2010      	movcc	r0, #16
 8005cce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cd2:	bf3c      	itt	cc
 8005cd4:	021b      	lslcc	r3, r3, #8
 8005cd6:	3008      	addcc	r0, #8
 8005cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cdc:	bf3c      	itt	cc
 8005cde:	011b      	lslcc	r3, r3, #4
 8005ce0:	3004      	addcc	r0, #4
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce6:	bf3c      	itt	cc
 8005ce8:	009b      	lslcc	r3, r3, #2
 8005cea:	3002      	addcc	r0, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	db05      	blt.n	8005cfc <__hi0bits+0x3c>
 8005cf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005cf4:	f100 0001 	add.w	r0, r0, #1
 8005cf8:	bf08      	it	eq
 8005cfa:	2020      	moveq	r0, #32
 8005cfc:	4770      	bx	lr

08005cfe <__lo0bits>:
 8005cfe:	6803      	ldr	r3, [r0, #0]
 8005d00:	4602      	mov	r2, r0
 8005d02:	f013 0007 	ands.w	r0, r3, #7
 8005d06:	d00b      	beq.n	8005d20 <__lo0bits+0x22>
 8005d08:	07d9      	lsls	r1, r3, #31
 8005d0a:	d421      	bmi.n	8005d50 <__lo0bits+0x52>
 8005d0c:	0798      	lsls	r0, r3, #30
 8005d0e:	bf49      	itett	mi
 8005d10:	085b      	lsrmi	r3, r3, #1
 8005d12:	089b      	lsrpl	r3, r3, #2
 8005d14:	2001      	movmi	r0, #1
 8005d16:	6013      	strmi	r3, [r2, #0]
 8005d18:	bf5c      	itt	pl
 8005d1a:	6013      	strpl	r3, [r2, #0]
 8005d1c:	2002      	movpl	r0, #2
 8005d1e:	4770      	bx	lr
 8005d20:	b299      	uxth	r1, r3
 8005d22:	b909      	cbnz	r1, 8005d28 <__lo0bits+0x2a>
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	2010      	movs	r0, #16
 8005d28:	b2d9      	uxtb	r1, r3
 8005d2a:	b909      	cbnz	r1, 8005d30 <__lo0bits+0x32>
 8005d2c:	3008      	adds	r0, #8
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	0719      	lsls	r1, r3, #28
 8005d32:	bf04      	itt	eq
 8005d34:	091b      	lsreq	r3, r3, #4
 8005d36:	3004      	addeq	r0, #4
 8005d38:	0799      	lsls	r1, r3, #30
 8005d3a:	bf04      	itt	eq
 8005d3c:	089b      	lsreq	r3, r3, #2
 8005d3e:	3002      	addeq	r0, #2
 8005d40:	07d9      	lsls	r1, r3, #31
 8005d42:	d403      	bmi.n	8005d4c <__lo0bits+0x4e>
 8005d44:	085b      	lsrs	r3, r3, #1
 8005d46:	f100 0001 	add.w	r0, r0, #1
 8005d4a:	d003      	beq.n	8005d54 <__lo0bits+0x56>
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	4770      	bx	lr
 8005d50:	2000      	movs	r0, #0
 8005d52:	4770      	bx	lr
 8005d54:	2020      	movs	r0, #32
 8005d56:	4770      	bx	lr

08005d58 <__i2b>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	f7ff ff07 	bl	8005b70 <_Balloc>
 8005d62:	4602      	mov	r2, r0
 8005d64:	b928      	cbnz	r0, 8005d72 <__i2b+0x1a>
 8005d66:	4b05      	ldr	r3, [pc, #20]	@ (8005d7c <__i2b+0x24>)
 8005d68:	4805      	ldr	r0, [pc, #20]	@ (8005d80 <__i2b+0x28>)
 8005d6a:	f240 1145 	movw	r1, #325	@ 0x145
 8005d6e:	f000 fd03 	bl	8006778 <__assert_func>
 8005d72:	2301      	movs	r3, #1
 8005d74:	6144      	str	r4, [r0, #20]
 8005d76:	6103      	str	r3, [r0, #16]
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08006a74 	.word	0x08006a74
 8005d80:	08006a85 	.word	0x08006a85

08005d84 <__multiply>:
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d88:	4614      	mov	r4, r2
 8005d8a:	690a      	ldr	r2, [r1, #16]
 8005d8c:	6923      	ldr	r3, [r4, #16]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	bfa8      	it	ge
 8005d92:	4623      	movge	r3, r4
 8005d94:	460f      	mov	r7, r1
 8005d96:	bfa4      	itt	ge
 8005d98:	460c      	movge	r4, r1
 8005d9a:	461f      	movge	r7, r3
 8005d9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005da0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005da4:	68a3      	ldr	r3, [r4, #8]
 8005da6:	6861      	ldr	r1, [r4, #4]
 8005da8:	eb0a 0609 	add.w	r6, sl, r9
 8005dac:	42b3      	cmp	r3, r6
 8005dae:	b085      	sub	sp, #20
 8005db0:	bfb8      	it	lt
 8005db2:	3101      	addlt	r1, #1
 8005db4:	f7ff fedc 	bl	8005b70 <_Balloc>
 8005db8:	b930      	cbnz	r0, 8005dc8 <__multiply+0x44>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	4b44      	ldr	r3, [pc, #272]	@ (8005ed0 <__multiply+0x14c>)
 8005dbe:	4845      	ldr	r0, [pc, #276]	@ (8005ed4 <__multiply+0x150>)
 8005dc0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005dc4:	f000 fcd8 	bl	8006778 <__assert_func>
 8005dc8:	f100 0514 	add.w	r5, r0, #20
 8005dcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005dd0:	462b      	mov	r3, r5
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4543      	cmp	r3, r8
 8005dd6:	d321      	bcc.n	8005e1c <__multiply+0x98>
 8005dd8:	f107 0114 	add.w	r1, r7, #20
 8005ddc:	f104 0214 	add.w	r2, r4, #20
 8005de0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005de4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005de8:	9302      	str	r3, [sp, #8]
 8005dea:	1b13      	subs	r3, r2, r4
 8005dec:	3b15      	subs	r3, #21
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	3304      	adds	r3, #4
 8005df4:	f104 0715 	add.w	r7, r4, #21
 8005df8:	42ba      	cmp	r2, r7
 8005dfa:	bf38      	it	cc
 8005dfc:	2304      	movcc	r3, #4
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	9b02      	ldr	r3, [sp, #8]
 8005e02:	9103      	str	r1, [sp, #12]
 8005e04:	428b      	cmp	r3, r1
 8005e06:	d80c      	bhi.n	8005e22 <__multiply+0x9e>
 8005e08:	2e00      	cmp	r6, #0
 8005e0a:	dd03      	ble.n	8005e14 <__multiply+0x90>
 8005e0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d05b      	beq.n	8005ecc <__multiply+0x148>
 8005e14:	6106      	str	r6, [r0, #16]
 8005e16:	b005      	add	sp, #20
 8005e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1c:	f843 2b04 	str.w	r2, [r3], #4
 8005e20:	e7d8      	b.n	8005dd4 <__multiply+0x50>
 8005e22:	f8b1 a000 	ldrh.w	sl, [r1]
 8005e26:	f1ba 0f00 	cmp.w	sl, #0
 8005e2a:	d024      	beq.n	8005e76 <__multiply+0xf2>
 8005e2c:	f104 0e14 	add.w	lr, r4, #20
 8005e30:	46a9      	mov	r9, r5
 8005e32:	f04f 0c00 	mov.w	ip, #0
 8005e36:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005e3a:	f8d9 3000 	ldr.w	r3, [r9]
 8005e3e:	fa1f fb87 	uxth.w	fp, r7
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	fb0a 330b 	mla	r3, sl, fp, r3
 8005e48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005e4c:	f8d9 7000 	ldr.w	r7, [r9]
 8005e50:	4463      	add	r3, ip
 8005e52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005e56:	fb0a c70b 	mla	r7, sl, fp, ip
 8005e5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005e64:	4572      	cmp	r2, lr
 8005e66:	f849 3b04 	str.w	r3, [r9], #4
 8005e6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005e6e:	d8e2      	bhi.n	8005e36 <__multiply+0xb2>
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	f845 c003 	str.w	ip, [r5, r3]
 8005e76:	9b03      	ldr	r3, [sp, #12]
 8005e78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005e7c:	3104      	adds	r1, #4
 8005e7e:	f1b9 0f00 	cmp.w	r9, #0
 8005e82:	d021      	beq.n	8005ec8 <__multiply+0x144>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	f104 0c14 	add.w	ip, r4, #20
 8005e8a:	46ae      	mov	lr, r5
 8005e8c:	f04f 0a00 	mov.w	sl, #0
 8005e90:	f8bc b000 	ldrh.w	fp, [ip]
 8005e94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005e98:	fb09 770b 	mla	r7, r9, fp, r7
 8005e9c:	4457      	add	r7, sl
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ea4:	f84e 3b04 	str.w	r3, [lr], #4
 8005ea8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005eac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005eb0:	f8be 3000 	ldrh.w	r3, [lr]
 8005eb4:	fb09 330a 	mla	r3, r9, sl, r3
 8005eb8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005ebc:	4562      	cmp	r2, ip
 8005ebe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ec2:	d8e5      	bhi.n	8005e90 <__multiply+0x10c>
 8005ec4:	9f01      	ldr	r7, [sp, #4]
 8005ec6:	51eb      	str	r3, [r5, r7]
 8005ec8:	3504      	adds	r5, #4
 8005eca:	e799      	b.n	8005e00 <__multiply+0x7c>
 8005ecc:	3e01      	subs	r6, #1
 8005ece:	e79b      	b.n	8005e08 <__multiply+0x84>
 8005ed0:	08006a74 	.word	0x08006a74
 8005ed4:	08006a85 	.word	0x08006a85

08005ed8 <__pow5mult>:
 8005ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005edc:	4615      	mov	r5, r2
 8005ede:	f012 0203 	ands.w	r2, r2, #3
 8005ee2:	4607      	mov	r7, r0
 8005ee4:	460e      	mov	r6, r1
 8005ee6:	d007      	beq.n	8005ef8 <__pow5mult+0x20>
 8005ee8:	4c25      	ldr	r4, [pc, #148]	@ (8005f80 <__pow5mult+0xa8>)
 8005eea:	3a01      	subs	r2, #1
 8005eec:	2300      	movs	r3, #0
 8005eee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ef2:	f7ff fe9f 	bl	8005c34 <__multadd>
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	10ad      	asrs	r5, r5, #2
 8005efa:	d03d      	beq.n	8005f78 <__pow5mult+0xa0>
 8005efc:	69fc      	ldr	r4, [r7, #28]
 8005efe:	b97c      	cbnz	r4, 8005f20 <__pow5mult+0x48>
 8005f00:	2010      	movs	r0, #16
 8005f02:	f7ff fd7f 	bl	8005a04 <malloc>
 8005f06:	4602      	mov	r2, r0
 8005f08:	61f8      	str	r0, [r7, #28]
 8005f0a:	b928      	cbnz	r0, 8005f18 <__pow5mult+0x40>
 8005f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f84 <__pow5mult+0xac>)
 8005f0e:	481e      	ldr	r0, [pc, #120]	@ (8005f88 <__pow5mult+0xb0>)
 8005f10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005f14:	f000 fc30 	bl	8006778 <__assert_func>
 8005f18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f1c:	6004      	str	r4, [r0, #0]
 8005f1e:	60c4      	str	r4, [r0, #12]
 8005f20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005f24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f28:	b94c      	cbnz	r4, 8005f3e <__pow5mult+0x66>
 8005f2a:	f240 2171 	movw	r1, #625	@ 0x271
 8005f2e:	4638      	mov	r0, r7
 8005f30:	f7ff ff12 	bl	8005d58 <__i2b>
 8005f34:	2300      	movs	r3, #0
 8005f36:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	6003      	str	r3, [r0, #0]
 8005f3e:	f04f 0900 	mov.w	r9, #0
 8005f42:	07eb      	lsls	r3, r5, #31
 8005f44:	d50a      	bpl.n	8005f5c <__pow5mult+0x84>
 8005f46:	4631      	mov	r1, r6
 8005f48:	4622      	mov	r2, r4
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	f7ff ff1a 	bl	8005d84 <__multiply>
 8005f50:	4631      	mov	r1, r6
 8005f52:	4680      	mov	r8, r0
 8005f54:	4638      	mov	r0, r7
 8005f56:	f7ff fe4b 	bl	8005bf0 <_Bfree>
 8005f5a:	4646      	mov	r6, r8
 8005f5c:	106d      	asrs	r5, r5, #1
 8005f5e:	d00b      	beq.n	8005f78 <__pow5mult+0xa0>
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	b938      	cbnz	r0, 8005f74 <__pow5mult+0x9c>
 8005f64:	4622      	mov	r2, r4
 8005f66:	4621      	mov	r1, r4
 8005f68:	4638      	mov	r0, r7
 8005f6a:	f7ff ff0b 	bl	8005d84 <__multiply>
 8005f6e:	6020      	str	r0, [r4, #0]
 8005f70:	f8c0 9000 	str.w	r9, [r0]
 8005f74:	4604      	mov	r4, r0
 8005f76:	e7e4      	b.n	8005f42 <__pow5mult+0x6a>
 8005f78:	4630      	mov	r0, r6
 8005f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f7e:	bf00      	nop
 8005f80:	08006ae0 	.word	0x08006ae0
 8005f84:	08006a05 	.word	0x08006a05
 8005f88:	08006a85 	.word	0x08006a85

08005f8c <__lshift>:
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	460c      	mov	r4, r1
 8005f92:	6849      	ldr	r1, [r1, #4]
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f9a:	68a3      	ldr	r3, [r4, #8]
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	4691      	mov	r9, r2
 8005fa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fa4:	f108 0601 	add.w	r6, r8, #1
 8005fa8:	42b3      	cmp	r3, r6
 8005faa:	db0b      	blt.n	8005fc4 <__lshift+0x38>
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff fddf 	bl	8005b70 <_Balloc>
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	b948      	cbnz	r0, 8005fca <__lshift+0x3e>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	4b28      	ldr	r3, [pc, #160]	@ (800605c <__lshift+0xd0>)
 8005fba:	4829      	ldr	r0, [pc, #164]	@ (8006060 <__lshift+0xd4>)
 8005fbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005fc0:	f000 fbda 	bl	8006778 <__assert_func>
 8005fc4:	3101      	adds	r1, #1
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	e7ee      	b.n	8005fa8 <__lshift+0x1c>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f100 0114 	add.w	r1, r0, #20
 8005fd0:	f100 0210 	add.w	r2, r0, #16
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	4553      	cmp	r3, sl
 8005fd8:	db33      	blt.n	8006042 <__lshift+0xb6>
 8005fda:	6920      	ldr	r0, [r4, #16]
 8005fdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fe0:	f104 0314 	add.w	r3, r4, #20
 8005fe4:	f019 091f 	ands.w	r9, r9, #31
 8005fe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ff0:	d02b      	beq.n	800604a <__lshift+0xbe>
 8005ff2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ff6:	468a      	mov	sl, r1
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	6818      	ldr	r0, [r3, #0]
 8005ffc:	fa00 f009 	lsl.w	r0, r0, r9
 8006000:	4310      	orrs	r0, r2
 8006002:	f84a 0b04 	str.w	r0, [sl], #4
 8006006:	f853 2b04 	ldr.w	r2, [r3], #4
 800600a:	459c      	cmp	ip, r3
 800600c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006010:	d8f3      	bhi.n	8005ffa <__lshift+0x6e>
 8006012:	ebac 0304 	sub.w	r3, ip, r4
 8006016:	3b15      	subs	r3, #21
 8006018:	f023 0303 	bic.w	r3, r3, #3
 800601c:	3304      	adds	r3, #4
 800601e:	f104 0015 	add.w	r0, r4, #21
 8006022:	4584      	cmp	ip, r0
 8006024:	bf38      	it	cc
 8006026:	2304      	movcc	r3, #4
 8006028:	50ca      	str	r2, [r1, r3]
 800602a:	b10a      	cbz	r2, 8006030 <__lshift+0xa4>
 800602c:	f108 0602 	add.w	r6, r8, #2
 8006030:	3e01      	subs	r6, #1
 8006032:	4638      	mov	r0, r7
 8006034:	612e      	str	r6, [r5, #16]
 8006036:	4621      	mov	r1, r4
 8006038:	f7ff fdda 	bl	8005bf0 <_Bfree>
 800603c:	4628      	mov	r0, r5
 800603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006042:	f842 0f04 	str.w	r0, [r2, #4]!
 8006046:	3301      	adds	r3, #1
 8006048:	e7c5      	b.n	8005fd6 <__lshift+0x4a>
 800604a:	3904      	subs	r1, #4
 800604c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006050:	f841 2f04 	str.w	r2, [r1, #4]!
 8006054:	459c      	cmp	ip, r3
 8006056:	d8f9      	bhi.n	800604c <__lshift+0xc0>
 8006058:	e7ea      	b.n	8006030 <__lshift+0xa4>
 800605a:	bf00      	nop
 800605c:	08006a74 	.word	0x08006a74
 8006060:	08006a85 	.word	0x08006a85

08006064 <__mcmp>:
 8006064:	690a      	ldr	r2, [r1, #16]
 8006066:	4603      	mov	r3, r0
 8006068:	6900      	ldr	r0, [r0, #16]
 800606a:	1a80      	subs	r0, r0, r2
 800606c:	b530      	push	{r4, r5, lr}
 800606e:	d10e      	bne.n	800608e <__mcmp+0x2a>
 8006070:	3314      	adds	r3, #20
 8006072:	3114      	adds	r1, #20
 8006074:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006078:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800607c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006080:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006084:	4295      	cmp	r5, r2
 8006086:	d003      	beq.n	8006090 <__mcmp+0x2c>
 8006088:	d205      	bcs.n	8006096 <__mcmp+0x32>
 800608a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800608e:	bd30      	pop	{r4, r5, pc}
 8006090:	42a3      	cmp	r3, r4
 8006092:	d3f3      	bcc.n	800607c <__mcmp+0x18>
 8006094:	e7fb      	b.n	800608e <__mcmp+0x2a>
 8006096:	2001      	movs	r0, #1
 8006098:	e7f9      	b.n	800608e <__mcmp+0x2a>
	...

0800609c <__mdiff>:
 800609c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	4689      	mov	r9, r1
 80060a2:	4606      	mov	r6, r0
 80060a4:	4611      	mov	r1, r2
 80060a6:	4648      	mov	r0, r9
 80060a8:	4614      	mov	r4, r2
 80060aa:	f7ff ffdb 	bl	8006064 <__mcmp>
 80060ae:	1e05      	subs	r5, r0, #0
 80060b0:	d112      	bne.n	80060d8 <__mdiff+0x3c>
 80060b2:	4629      	mov	r1, r5
 80060b4:	4630      	mov	r0, r6
 80060b6:	f7ff fd5b 	bl	8005b70 <_Balloc>
 80060ba:	4602      	mov	r2, r0
 80060bc:	b928      	cbnz	r0, 80060ca <__mdiff+0x2e>
 80060be:	4b3f      	ldr	r3, [pc, #252]	@ (80061bc <__mdiff+0x120>)
 80060c0:	f240 2137 	movw	r1, #567	@ 0x237
 80060c4:	483e      	ldr	r0, [pc, #248]	@ (80061c0 <__mdiff+0x124>)
 80060c6:	f000 fb57 	bl	8006778 <__assert_func>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80060d0:	4610      	mov	r0, r2
 80060d2:	b003      	add	sp, #12
 80060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d8:	bfbc      	itt	lt
 80060da:	464b      	movlt	r3, r9
 80060dc:	46a1      	movlt	r9, r4
 80060de:	4630      	mov	r0, r6
 80060e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80060e4:	bfba      	itte	lt
 80060e6:	461c      	movlt	r4, r3
 80060e8:	2501      	movlt	r5, #1
 80060ea:	2500      	movge	r5, #0
 80060ec:	f7ff fd40 	bl	8005b70 <_Balloc>
 80060f0:	4602      	mov	r2, r0
 80060f2:	b918      	cbnz	r0, 80060fc <__mdiff+0x60>
 80060f4:	4b31      	ldr	r3, [pc, #196]	@ (80061bc <__mdiff+0x120>)
 80060f6:	f240 2145 	movw	r1, #581	@ 0x245
 80060fa:	e7e3      	b.n	80060c4 <__mdiff+0x28>
 80060fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006100:	6926      	ldr	r6, [r4, #16]
 8006102:	60c5      	str	r5, [r0, #12]
 8006104:	f109 0310 	add.w	r3, r9, #16
 8006108:	f109 0514 	add.w	r5, r9, #20
 800610c:	f104 0e14 	add.w	lr, r4, #20
 8006110:	f100 0b14 	add.w	fp, r0, #20
 8006114:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006118:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	46d9      	mov	r9, fp
 8006120:	f04f 0c00 	mov.w	ip, #0
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	f85e 0b04 	ldr.w	r0, [lr], #4
 800612a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	fa1f f38a 	uxth.w	r3, sl
 8006134:	4619      	mov	r1, r3
 8006136:	b283      	uxth	r3, r0
 8006138:	1acb      	subs	r3, r1, r3
 800613a:	0c00      	lsrs	r0, r0, #16
 800613c:	4463      	add	r3, ip
 800613e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006142:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006146:	b29b      	uxth	r3, r3
 8006148:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800614c:	4576      	cmp	r6, lr
 800614e:	f849 3b04 	str.w	r3, [r9], #4
 8006152:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006156:	d8e5      	bhi.n	8006124 <__mdiff+0x88>
 8006158:	1b33      	subs	r3, r6, r4
 800615a:	3b15      	subs	r3, #21
 800615c:	f023 0303 	bic.w	r3, r3, #3
 8006160:	3415      	adds	r4, #21
 8006162:	3304      	adds	r3, #4
 8006164:	42a6      	cmp	r6, r4
 8006166:	bf38      	it	cc
 8006168:	2304      	movcc	r3, #4
 800616a:	441d      	add	r5, r3
 800616c:	445b      	add	r3, fp
 800616e:	461e      	mov	r6, r3
 8006170:	462c      	mov	r4, r5
 8006172:	4544      	cmp	r4, r8
 8006174:	d30e      	bcc.n	8006194 <__mdiff+0xf8>
 8006176:	f108 0103 	add.w	r1, r8, #3
 800617a:	1b49      	subs	r1, r1, r5
 800617c:	f021 0103 	bic.w	r1, r1, #3
 8006180:	3d03      	subs	r5, #3
 8006182:	45a8      	cmp	r8, r5
 8006184:	bf38      	it	cc
 8006186:	2100      	movcc	r1, #0
 8006188:	440b      	add	r3, r1
 800618a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800618e:	b191      	cbz	r1, 80061b6 <__mdiff+0x11a>
 8006190:	6117      	str	r7, [r2, #16]
 8006192:	e79d      	b.n	80060d0 <__mdiff+0x34>
 8006194:	f854 1b04 	ldr.w	r1, [r4], #4
 8006198:	46e6      	mov	lr, ip
 800619a:	0c08      	lsrs	r0, r1, #16
 800619c:	fa1c fc81 	uxtah	ip, ip, r1
 80061a0:	4471      	add	r1, lr
 80061a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80061a6:	b289      	uxth	r1, r1
 80061a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80061ac:	f846 1b04 	str.w	r1, [r6], #4
 80061b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061b4:	e7dd      	b.n	8006172 <__mdiff+0xd6>
 80061b6:	3f01      	subs	r7, #1
 80061b8:	e7e7      	b.n	800618a <__mdiff+0xee>
 80061ba:	bf00      	nop
 80061bc:	08006a74 	.word	0x08006a74
 80061c0:	08006a85 	.word	0x08006a85

080061c4 <__d2b>:
 80061c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061c8:	460f      	mov	r7, r1
 80061ca:	2101      	movs	r1, #1
 80061cc:	ec59 8b10 	vmov	r8, r9, d0
 80061d0:	4616      	mov	r6, r2
 80061d2:	f7ff fccd 	bl	8005b70 <_Balloc>
 80061d6:	4604      	mov	r4, r0
 80061d8:	b930      	cbnz	r0, 80061e8 <__d2b+0x24>
 80061da:	4602      	mov	r2, r0
 80061dc:	4b23      	ldr	r3, [pc, #140]	@ (800626c <__d2b+0xa8>)
 80061de:	4824      	ldr	r0, [pc, #144]	@ (8006270 <__d2b+0xac>)
 80061e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80061e4:	f000 fac8 	bl	8006778 <__assert_func>
 80061e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80061ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061f0:	b10d      	cbz	r5, 80061f6 <__d2b+0x32>
 80061f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	f1b8 0300 	subs.w	r3, r8, #0
 80061fc:	d023      	beq.n	8006246 <__d2b+0x82>
 80061fe:	4668      	mov	r0, sp
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	f7ff fd7c 	bl	8005cfe <__lo0bits>
 8006206:	e9dd 1200 	ldrd	r1, r2, [sp]
 800620a:	b1d0      	cbz	r0, 8006242 <__d2b+0x7e>
 800620c:	f1c0 0320 	rsb	r3, r0, #32
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	430b      	orrs	r3, r1
 8006216:	40c2      	lsrs	r2, r0
 8006218:	6163      	str	r3, [r4, #20]
 800621a:	9201      	str	r2, [sp, #4]
 800621c:	9b01      	ldr	r3, [sp, #4]
 800621e:	61a3      	str	r3, [r4, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf0c      	ite	eq
 8006224:	2201      	moveq	r2, #1
 8006226:	2202      	movne	r2, #2
 8006228:	6122      	str	r2, [r4, #16]
 800622a:	b1a5      	cbz	r5, 8006256 <__d2b+0x92>
 800622c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006230:	4405      	add	r5, r0
 8006232:	603d      	str	r5, [r7, #0]
 8006234:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006238:	6030      	str	r0, [r6, #0]
 800623a:	4620      	mov	r0, r4
 800623c:	b003      	add	sp, #12
 800623e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006242:	6161      	str	r1, [r4, #20]
 8006244:	e7ea      	b.n	800621c <__d2b+0x58>
 8006246:	a801      	add	r0, sp, #4
 8006248:	f7ff fd59 	bl	8005cfe <__lo0bits>
 800624c:	9b01      	ldr	r3, [sp, #4]
 800624e:	6163      	str	r3, [r4, #20]
 8006250:	3020      	adds	r0, #32
 8006252:	2201      	movs	r2, #1
 8006254:	e7e8      	b.n	8006228 <__d2b+0x64>
 8006256:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800625a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800625e:	6038      	str	r0, [r7, #0]
 8006260:	6918      	ldr	r0, [r3, #16]
 8006262:	f7ff fd2d 	bl	8005cc0 <__hi0bits>
 8006266:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800626a:	e7e5      	b.n	8006238 <__d2b+0x74>
 800626c:	08006a74 	.word	0x08006a74
 8006270:	08006a85 	.word	0x08006a85

08006274 <__sfputc_r>:
 8006274:	6893      	ldr	r3, [r2, #8]
 8006276:	3b01      	subs	r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	b410      	push	{r4}
 800627c:	6093      	str	r3, [r2, #8]
 800627e:	da08      	bge.n	8006292 <__sfputc_r+0x1e>
 8006280:	6994      	ldr	r4, [r2, #24]
 8006282:	42a3      	cmp	r3, r4
 8006284:	db01      	blt.n	800628a <__sfputc_r+0x16>
 8006286:	290a      	cmp	r1, #10
 8006288:	d103      	bne.n	8006292 <__sfputc_r+0x1e>
 800628a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800628e:	f7fe bbfe 	b.w	8004a8e <__swbuf_r>
 8006292:	6813      	ldr	r3, [r2, #0]
 8006294:	1c58      	adds	r0, r3, #1
 8006296:	6010      	str	r0, [r2, #0]
 8006298:	7019      	strb	r1, [r3, #0]
 800629a:	4608      	mov	r0, r1
 800629c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <__sfputs_r>:
 80062a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a4:	4606      	mov	r6, r0
 80062a6:	460f      	mov	r7, r1
 80062a8:	4614      	mov	r4, r2
 80062aa:	18d5      	adds	r5, r2, r3
 80062ac:	42ac      	cmp	r4, r5
 80062ae:	d101      	bne.n	80062b4 <__sfputs_r+0x12>
 80062b0:	2000      	movs	r0, #0
 80062b2:	e007      	b.n	80062c4 <__sfputs_r+0x22>
 80062b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b8:	463a      	mov	r2, r7
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7ff ffda 	bl	8006274 <__sfputc_r>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d1f3      	bne.n	80062ac <__sfputs_r+0xa>
 80062c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062c8 <_vfiprintf_r>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	460d      	mov	r5, r1
 80062ce:	b09d      	sub	sp, #116	@ 0x74
 80062d0:	4614      	mov	r4, r2
 80062d2:	4698      	mov	r8, r3
 80062d4:	4606      	mov	r6, r0
 80062d6:	b118      	cbz	r0, 80062e0 <_vfiprintf_r+0x18>
 80062d8:	6a03      	ldr	r3, [r0, #32]
 80062da:	b90b      	cbnz	r3, 80062e0 <_vfiprintf_r+0x18>
 80062dc:	f7fe faee 	bl	80048bc <__sinit>
 80062e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062e2:	07d9      	lsls	r1, r3, #31
 80062e4:	d405      	bmi.n	80062f2 <_vfiprintf_r+0x2a>
 80062e6:	89ab      	ldrh	r3, [r5, #12]
 80062e8:	059a      	lsls	r2, r3, #22
 80062ea:	d402      	bmi.n	80062f2 <_vfiprintf_r+0x2a>
 80062ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062ee:	f7fe fce0 	bl	8004cb2 <__retarget_lock_acquire_recursive>
 80062f2:	89ab      	ldrh	r3, [r5, #12]
 80062f4:	071b      	lsls	r3, r3, #28
 80062f6:	d501      	bpl.n	80062fc <_vfiprintf_r+0x34>
 80062f8:	692b      	ldr	r3, [r5, #16]
 80062fa:	b99b      	cbnz	r3, 8006324 <_vfiprintf_r+0x5c>
 80062fc:	4629      	mov	r1, r5
 80062fe:	4630      	mov	r0, r6
 8006300:	f7fe fc04 	bl	8004b0c <__swsetup_r>
 8006304:	b170      	cbz	r0, 8006324 <_vfiprintf_r+0x5c>
 8006306:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006308:	07dc      	lsls	r4, r3, #31
 800630a:	d504      	bpl.n	8006316 <_vfiprintf_r+0x4e>
 800630c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006310:	b01d      	add	sp, #116	@ 0x74
 8006312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006316:	89ab      	ldrh	r3, [r5, #12]
 8006318:	0598      	lsls	r0, r3, #22
 800631a:	d4f7      	bmi.n	800630c <_vfiprintf_r+0x44>
 800631c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800631e:	f7fe fcc9 	bl	8004cb4 <__retarget_lock_release_recursive>
 8006322:	e7f3      	b.n	800630c <_vfiprintf_r+0x44>
 8006324:	2300      	movs	r3, #0
 8006326:	9309      	str	r3, [sp, #36]	@ 0x24
 8006328:	2320      	movs	r3, #32
 800632a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800632e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006332:	2330      	movs	r3, #48	@ 0x30
 8006334:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80064e4 <_vfiprintf_r+0x21c>
 8006338:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800633c:	f04f 0901 	mov.w	r9, #1
 8006340:	4623      	mov	r3, r4
 8006342:	469a      	mov	sl, r3
 8006344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006348:	b10a      	cbz	r2, 800634e <_vfiprintf_r+0x86>
 800634a:	2a25      	cmp	r2, #37	@ 0x25
 800634c:	d1f9      	bne.n	8006342 <_vfiprintf_r+0x7a>
 800634e:	ebba 0b04 	subs.w	fp, sl, r4
 8006352:	d00b      	beq.n	800636c <_vfiprintf_r+0xa4>
 8006354:	465b      	mov	r3, fp
 8006356:	4622      	mov	r2, r4
 8006358:	4629      	mov	r1, r5
 800635a:	4630      	mov	r0, r6
 800635c:	f7ff ffa1 	bl	80062a2 <__sfputs_r>
 8006360:	3001      	adds	r0, #1
 8006362:	f000 80a7 	beq.w	80064b4 <_vfiprintf_r+0x1ec>
 8006366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006368:	445a      	add	r2, fp
 800636a:	9209      	str	r2, [sp, #36]	@ 0x24
 800636c:	f89a 3000 	ldrb.w	r3, [sl]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 809f 	beq.w	80064b4 <_vfiprintf_r+0x1ec>
 8006376:	2300      	movs	r3, #0
 8006378:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800637c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006380:	f10a 0a01 	add.w	sl, sl, #1
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	9307      	str	r3, [sp, #28]
 8006388:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800638c:	931a      	str	r3, [sp, #104]	@ 0x68
 800638e:	4654      	mov	r4, sl
 8006390:	2205      	movs	r2, #5
 8006392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006396:	4853      	ldr	r0, [pc, #332]	@ (80064e4 <_vfiprintf_r+0x21c>)
 8006398:	f7f9 ff42 	bl	8000220 <memchr>
 800639c:	9a04      	ldr	r2, [sp, #16]
 800639e:	b9d8      	cbnz	r0, 80063d8 <_vfiprintf_r+0x110>
 80063a0:	06d1      	lsls	r1, r2, #27
 80063a2:	bf44      	itt	mi
 80063a4:	2320      	movmi	r3, #32
 80063a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063aa:	0713      	lsls	r3, r2, #28
 80063ac:	bf44      	itt	mi
 80063ae:	232b      	movmi	r3, #43	@ 0x2b
 80063b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063b4:	f89a 3000 	ldrb.w	r3, [sl]
 80063b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80063ba:	d015      	beq.n	80063e8 <_vfiprintf_r+0x120>
 80063bc:	9a07      	ldr	r2, [sp, #28]
 80063be:	4654      	mov	r4, sl
 80063c0:	2000      	movs	r0, #0
 80063c2:	f04f 0c0a 	mov.w	ip, #10
 80063c6:	4621      	mov	r1, r4
 80063c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063cc:	3b30      	subs	r3, #48	@ 0x30
 80063ce:	2b09      	cmp	r3, #9
 80063d0:	d94b      	bls.n	800646a <_vfiprintf_r+0x1a2>
 80063d2:	b1b0      	cbz	r0, 8006402 <_vfiprintf_r+0x13a>
 80063d4:	9207      	str	r2, [sp, #28]
 80063d6:	e014      	b.n	8006402 <_vfiprintf_r+0x13a>
 80063d8:	eba0 0308 	sub.w	r3, r0, r8
 80063dc:	fa09 f303 	lsl.w	r3, r9, r3
 80063e0:	4313      	orrs	r3, r2
 80063e2:	9304      	str	r3, [sp, #16]
 80063e4:	46a2      	mov	sl, r4
 80063e6:	e7d2      	b.n	800638e <_vfiprintf_r+0xc6>
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	1d19      	adds	r1, r3, #4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	9103      	str	r1, [sp, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	bfbb      	ittet	lt
 80063f4:	425b      	neglt	r3, r3
 80063f6:	f042 0202 	orrlt.w	r2, r2, #2
 80063fa:	9307      	strge	r3, [sp, #28]
 80063fc:	9307      	strlt	r3, [sp, #28]
 80063fe:	bfb8      	it	lt
 8006400:	9204      	strlt	r2, [sp, #16]
 8006402:	7823      	ldrb	r3, [r4, #0]
 8006404:	2b2e      	cmp	r3, #46	@ 0x2e
 8006406:	d10a      	bne.n	800641e <_vfiprintf_r+0x156>
 8006408:	7863      	ldrb	r3, [r4, #1]
 800640a:	2b2a      	cmp	r3, #42	@ 0x2a
 800640c:	d132      	bne.n	8006474 <_vfiprintf_r+0x1ac>
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	1d1a      	adds	r2, r3, #4
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	9203      	str	r2, [sp, #12]
 8006416:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800641a:	3402      	adds	r4, #2
 800641c:	9305      	str	r3, [sp, #20]
 800641e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80064f4 <_vfiprintf_r+0x22c>
 8006422:	7821      	ldrb	r1, [r4, #0]
 8006424:	2203      	movs	r2, #3
 8006426:	4650      	mov	r0, sl
 8006428:	f7f9 fefa 	bl	8000220 <memchr>
 800642c:	b138      	cbz	r0, 800643e <_vfiprintf_r+0x176>
 800642e:	9b04      	ldr	r3, [sp, #16]
 8006430:	eba0 000a 	sub.w	r0, r0, sl
 8006434:	2240      	movs	r2, #64	@ 0x40
 8006436:	4082      	lsls	r2, r0
 8006438:	4313      	orrs	r3, r2
 800643a:	3401      	adds	r4, #1
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006442:	4829      	ldr	r0, [pc, #164]	@ (80064e8 <_vfiprintf_r+0x220>)
 8006444:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006448:	2206      	movs	r2, #6
 800644a:	f7f9 fee9 	bl	8000220 <memchr>
 800644e:	2800      	cmp	r0, #0
 8006450:	d03f      	beq.n	80064d2 <_vfiprintf_r+0x20a>
 8006452:	4b26      	ldr	r3, [pc, #152]	@ (80064ec <_vfiprintf_r+0x224>)
 8006454:	bb1b      	cbnz	r3, 800649e <_vfiprintf_r+0x1d6>
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	3307      	adds	r3, #7
 800645a:	f023 0307 	bic.w	r3, r3, #7
 800645e:	3308      	adds	r3, #8
 8006460:	9303      	str	r3, [sp, #12]
 8006462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006464:	443b      	add	r3, r7
 8006466:	9309      	str	r3, [sp, #36]	@ 0x24
 8006468:	e76a      	b.n	8006340 <_vfiprintf_r+0x78>
 800646a:	fb0c 3202 	mla	r2, ip, r2, r3
 800646e:	460c      	mov	r4, r1
 8006470:	2001      	movs	r0, #1
 8006472:	e7a8      	b.n	80063c6 <_vfiprintf_r+0xfe>
 8006474:	2300      	movs	r3, #0
 8006476:	3401      	adds	r4, #1
 8006478:	9305      	str	r3, [sp, #20]
 800647a:	4619      	mov	r1, r3
 800647c:	f04f 0c0a 	mov.w	ip, #10
 8006480:	4620      	mov	r0, r4
 8006482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006486:	3a30      	subs	r2, #48	@ 0x30
 8006488:	2a09      	cmp	r2, #9
 800648a:	d903      	bls.n	8006494 <_vfiprintf_r+0x1cc>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0c6      	beq.n	800641e <_vfiprintf_r+0x156>
 8006490:	9105      	str	r1, [sp, #20]
 8006492:	e7c4      	b.n	800641e <_vfiprintf_r+0x156>
 8006494:	fb0c 2101 	mla	r1, ip, r1, r2
 8006498:	4604      	mov	r4, r0
 800649a:	2301      	movs	r3, #1
 800649c:	e7f0      	b.n	8006480 <_vfiprintf_r+0x1b8>
 800649e:	ab03      	add	r3, sp, #12
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	462a      	mov	r2, r5
 80064a4:	4b12      	ldr	r3, [pc, #72]	@ (80064f0 <_vfiprintf_r+0x228>)
 80064a6:	a904      	add	r1, sp, #16
 80064a8:	4630      	mov	r0, r6
 80064aa:	f7fd fdc3 	bl	8004034 <_printf_float>
 80064ae:	4607      	mov	r7, r0
 80064b0:	1c78      	adds	r0, r7, #1
 80064b2:	d1d6      	bne.n	8006462 <_vfiprintf_r+0x19a>
 80064b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064b6:	07d9      	lsls	r1, r3, #31
 80064b8:	d405      	bmi.n	80064c6 <_vfiprintf_r+0x1fe>
 80064ba:	89ab      	ldrh	r3, [r5, #12]
 80064bc:	059a      	lsls	r2, r3, #22
 80064be:	d402      	bmi.n	80064c6 <_vfiprintf_r+0x1fe>
 80064c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064c2:	f7fe fbf7 	bl	8004cb4 <__retarget_lock_release_recursive>
 80064c6:	89ab      	ldrh	r3, [r5, #12]
 80064c8:	065b      	lsls	r3, r3, #25
 80064ca:	f53f af1f 	bmi.w	800630c <_vfiprintf_r+0x44>
 80064ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064d0:	e71e      	b.n	8006310 <_vfiprintf_r+0x48>
 80064d2:	ab03      	add	r3, sp, #12
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	462a      	mov	r2, r5
 80064d8:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <_vfiprintf_r+0x228>)
 80064da:	a904      	add	r1, sp, #16
 80064dc:	4630      	mov	r0, r6
 80064de:	f7fe f841 	bl	8004564 <_printf_i>
 80064e2:	e7e4      	b.n	80064ae <_vfiprintf_r+0x1e6>
 80064e4:	08006be0 	.word	0x08006be0
 80064e8:	08006bea 	.word	0x08006bea
 80064ec:	08004035 	.word	0x08004035
 80064f0:	080062a3 	.word	0x080062a3
 80064f4:	08006be6 	.word	0x08006be6

080064f8 <__sflush_r>:
 80064f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	0716      	lsls	r6, r2, #28
 8006502:	4605      	mov	r5, r0
 8006504:	460c      	mov	r4, r1
 8006506:	d454      	bmi.n	80065b2 <__sflush_r+0xba>
 8006508:	684b      	ldr	r3, [r1, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	dc02      	bgt.n	8006514 <__sflush_r+0x1c>
 800650e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	dd48      	ble.n	80065a6 <__sflush_r+0xae>
 8006514:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006516:	2e00      	cmp	r6, #0
 8006518:	d045      	beq.n	80065a6 <__sflush_r+0xae>
 800651a:	2300      	movs	r3, #0
 800651c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006520:	682f      	ldr	r7, [r5, #0]
 8006522:	6a21      	ldr	r1, [r4, #32]
 8006524:	602b      	str	r3, [r5, #0]
 8006526:	d030      	beq.n	800658a <__sflush_r+0x92>
 8006528:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	0759      	lsls	r1, r3, #29
 800652e:	d505      	bpl.n	800653c <__sflush_r+0x44>
 8006530:	6863      	ldr	r3, [r4, #4]
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006536:	b10b      	cbz	r3, 800653c <__sflush_r+0x44>
 8006538:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	2300      	movs	r3, #0
 800653e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006540:	6a21      	ldr	r1, [r4, #32]
 8006542:	4628      	mov	r0, r5
 8006544:	47b0      	blx	r6
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	d106      	bne.n	800655a <__sflush_r+0x62>
 800654c:	6829      	ldr	r1, [r5, #0]
 800654e:	291d      	cmp	r1, #29
 8006550:	d82b      	bhi.n	80065aa <__sflush_r+0xb2>
 8006552:	4a2a      	ldr	r2, [pc, #168]	@ (80065fc <__sflush_r+0x104>)
 8006554:	410a      	asrs	r2, r1
 8006556:	07d6      	lsls	r6, r2, #31
 8006558:	d427      	bmi.n	80065aa <__sflush_r+0xb2>
 800655a:	2200      	movs	r2, #0
 800655c:	6062      	str	r2, [r4, #4]
 800655e:	04d9      	lsls	r1, r3, #19
 8006560:	6922      	ldr	r2, [r4, #16]
 8006562:	6022      	str	r2, [r4, #0]
 8006564:	d504      	bpl.n	8006570 <__sflush_r+0x78>
 8006566:	1c42      	adds	r2, r0, #1
 8006568:	d101      	bne.n	800656e <__sflush_r+0x76>
 800656a:	682b      	ldr	r3, [r5, #0]
 800656c:	b903      	cbnz	r3, 8006570 <__sflush_r+0x78>
 800656e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006572:	602f      	str	r7, [r5, #0]
 8006574:	b1b9      	cbz	r1, 80065a6 <__sflush_r+0xae>
 8006576:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800657a:	4299      	cmp	r1, r3
 800657c:	d002      	beq.n	8006584 <__sflush_r+0x8c>
 800657e:	4628      	mov	r0, r5
 8006580:	f7ff f9f6 	bl	8005970 <_free_r>
 8006584:	2300      	movs	r3, #0
 8006586:	6363      	str	r3, [r4, #52]	@ 0x34
 8006588:	e00d      	b.n	80065a6 <__sflush_r+0xae>
 800658a:	2301      	movs	r3, #1
 800658c:	4628      	mov	r0, r5
 800658e:	47b0      	blx	r6
 8006590:	4602      	mov	r2, r0
 8006592:	1c50      	adds	r0, r2, #1
 8006594:	d1c9      	bne.n	800652a <__sflush_r+0x32>
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0c6      	beq.n	800652a <__sflush_r+0x32>
 800659c:	2b1d      	cmp	r3, #29
 800659e:	d001      	beq.n	80065a4 <__sflush_r+0xac>
 80065a0:	2b16      	cmp	r3, #22
 80065a2:	d11e      	bne.n	80065e2 <__sflush_r+0xea>
 80065a4:	602f      	str	r7, [r5, #0]
 80065a6:	2000      	movs	r0, #0
 80065a8:	e022      	b.n	80065f0 <__sflush_r+0xf8>
 80065aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ae:	b21b      	sxth	r3, r3
 80065b0:	e01b      	b.n	80065ea <__sflush_r+0xf2>
 80065b2:	690f      	ldr	r7, [r1, #16]
 80065b4:	2f00      	cmp	r7, #0
 80065b6:	d0f6      	beq.n	80065a6 <__sflush_r+0xae>
 80065b8:	0793      	lsls	r3, r2, #30
 80065ba:	680e      	ldr	r6, [r1, #0]
 80065bc:	bf08      	it	eq
 80065be:	694b      	ldreq	r3, [r1, #20]
 80065c0:	600f      	str	r7, [r1, #0]
 80065c2:	bf18      	it	ne
 80065c4:	2300      	movne	r3, #0
 80065c6:	eba6 0807 	sub.w	r8, r6, r7
 80065ca:	608b      	str	r3, [r1, #8]
 80065cc:	f1b8 0f00 	cmp.w	r8, #0
 80065d0:	dde9      	ble.n	80065a6 <__sflush_r+0xae>
 80065d2:	6a21      	ldr	r1, [r4, #32]
 80065d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065d6:	4643      	mov	r3, r8
 80065d8:	463a      	mov	r2, r7
 80065da:	4628      	mov	r0, r5
 80065dc:	47b0      	blx	r6
 80065de:	2800      	cmp	r0, #0
 80065e0:	dc08      	bgt.n	80065f4 <__sflush_r+0xfc>
 80065e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ea:	81a3      	strh	r3, [r4, #12]
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f4:	4407      	add	r7, r0
 80065f6:	eba8 0800 	sub.w	r8, r8, r0
 80065fa:	e7e7      	b.n	80065cc <__sflush_r+0xd4>
 80065fc:	dfbffffe 	.word	0xdfbffffe

08006600 <_fflush_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	690b      	ldr	r3, [r1, #16]
 8006604:	4605      	mov	r5, r0
 8006606:	460c      	mov	r4, r1
 8006608:	b913      	cbnz	r3, 8006610 <_fflush_r+0x10>
 800660a:	2500      	movs	r5, #0
 800660c:	4628      	mov	r0, r5
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	b118      	cbz	r0, 800661a <_fflush_r+0x1a>
 8006612:	6a03      	ldr	r3, [r0, #32]
 8006614:	b90b      	cbnz	r3, 800661a <_fflush_r+0x1a>
 8006616:	f7fe f951 	bl	80048bc <__sinit>
 800661a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f3      	beq.n	800660a <_fflush_r+0xa>
 8006622:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006624:	07d0      	lsls	r0, r2, #31
 8006626:	d404      	bmi.n	8006632 <_fflush_r+0x32>
 8006628:	0599      	lsls	r1, r3, #22
 800662a:	d402      	bmi.n	8006632 <_fflush_r+0x32>
 800662c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800662e:	f7fe fb40 	bl	8004cb2 <__retarget_lock_acquire_recursive>
 8006632:	4628      	mov	r0, r5
 8006634:	4621      	mov	r1, r4
 8006636:	f7ff ff5f 	bl	80064f8 <__sflush_r>
 800663a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800663c:	07da      	lsls	r2, r3, #31
 800663e:	4605      	mov	r5, r0
 8006640:	d4e4      	bmi.n	800660c <_fflush_r+0xc>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	059b      	lsls	r3, r3, #22
 8006646:	d4e1      	bmi.n	800660c <_fflush_r+0xc>
 8006648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800664a:	f7fe fb33 	bl	8004cb4 <__retarget_lock_release_recursive>
 800664e:	e7dd      	b.n	800660c <_fflush_r+0xc>

08006650 <__swhatbuf_r>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	460c      	mov	r4, r1
 8006654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006658:	2900      	cmp	r1, #0
 800665a:	b096      	sub	sp, #88	@ 0x58
 800665c:	4615      	mov	r5, r2
 800665e:	461e      	mov	r6, r3
 8006660:	da0d      	bge.n	800667e <__swhatbuf_r+0x2e>
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006668:	f04f 0100 	mov.w	r1, #0
 800666c:	bf14      	ite	ne
 800666e:	2340      	movne	r3, #64	@ 0x40
 8006670:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006674:	2000      	movs	r0, #0
 8006676:	6031      	str	r1, [r6, #0]
 8006678:	602b      	str	r3, [r5, #0]
 800667a:	b016      	add	sp, #88	@ 0x58
 800667c:	bd70      	pop	{r4, r5, r6, pc}
 800667e:	466a      	mov	r2, sp
 8006680:	f000 f848 	bl	8006714 <_fstat_r>
 8006684:	2800      	cmp	r0, #0
 8006686:	dbec      	blt.n	8006662 <__swhatbuf_r+0x12>
 8006688:	9901      	ldr	r1, [sp, #4]
 800668a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800668e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006692:	4259      	negs	r1, r3
 8006694:	4159      	adcs	r1, r3
 8006696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800669a:	e7eb      	b.n	8006674 <__swhatbuf_r+0x24>

0800669c <__smakebuf_r>:
 800669c:	898b      	ldrh	r3, [r1, #12]
 800669e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066a0:	079d      	lsls	r5, r3, #30
 80066a2:	4606      	mov	r6, r0
 80066a4:	460c      	mov	r4, r1
 80066a6:	d507      	bpl.n	80066b8 <__smakebuf_r+0x1c>
 80066a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	6123      	str	r3, [r4, #16]
 80066b0:	2301      	movs	r3, #1
 80066b2:	6163      	str	r3, [r4, #20]
 80066b4:	b003      	add	sp, #12
 80066b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b8:	ab01      	add	r3, sp, #4
 80066ba:	466a      	mov	r2, sp
 80066bc:	f7ff ffc8 	bl	8006650 <__swhatbuf_r>
 80066c0:	9f00      	ldr	r7, [sp, #0]
 80066c2:	4605      	mov	r5, r0
 80066c4:	4639      	mov	r1, r7
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7ff f9c6 	bl	8005a58 <_malloc_r>
 80066cc:	b948      	cbnz	r0, 80066e2 <__smakebuf_r+0x46>
 80066ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d2:	059a      	lsls	r2, r3, #22
 80066d4:	d4ee      	bmi.n	80066b4 <__smakebuf_r+0x18>
 80066d6:	f023 0303 	bic.w	r3, r3, #3
 80066da:	f043 0302 	orr.w	r3, r3, #2
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	e7e2      	b.n	80066a8 <__smakebuf_r+0xc>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	6020      	str	r0, [r4, #0]
 80066e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	9b01      	ldr	r3, [sp, #4]
 80066ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066f2:	b15b      	cbz	r3, 800670c <__smakebuf_r+0x70>
 80066f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066f8:	4630      	mov	r0, r6
 80066fa:	f000 f81d 	bl	8006738 <_isatty_r>
 80066fe:	b128      	cbz	r0, 800670c <__smakebuf_r+0x70>
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	f023 0303 	bic.w	r3, r3, #3
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	431d      	orrs	r5, r3
 8006710:	81a5      	strh	r5, [r4, #12]
 8006712:	e7cf      	b.n	80066b4 <__smakebuf_r+0x18>

08006714 <_fstat_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4d07      	ldr	r5, [pc, #28]	@ (8006734 <_fstat_r+0x20>)
 8006718:	2300      	movs	r3, #0
 800671a:	4604      	mov	r4, r0
 800671c:	4608      	mov	r0, r1
 800671e:	4611      	mov	r1, r2
 8006720:	602b      	str	r3, [r5, #0]
 8006722:	f7fa ff0d 	bl	8001540 <_fstat>
 8006726:	1c43      	adds	r3, r0, #1
 8006728:	d102      	bne.n	8006730 <_fstat_r+0x1c>
 800672a:	682b      	ldr	r3, [r5, #0]
 800672c:	b103      	cbz	r3, 8006730 <_fstat_r+0x1c>
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	bd38      	pop	{r3, r4, r5, pc}
 8006732:	bf00      	nop
 8006734:	200003e0 	.word	0x200003e0

08006738 <_isatty_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4d06      	ldr	r5, [pc, #24]	@ (8006754 <_isatty_r+0x1c>)
 800673c:	2300      	movs	r3, #0
 800673e:	4604      	mov	r4, r0
 8006740:	4608      	mov	r0, r1
 8006742:	602b      	str	r3, [r5, #0]
 8006744:	f7fa ff0c 	bl	8001560 <_isatty>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_isatty_r+0x1a>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_isatty_r+0x1a>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	200003e0 	.word	0x200003e0

08006758 <_sbrk_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d06      	ldr	r5, [pc, #24]	@ (8006774 <_sbrk_r+0x1c>)
 800675c:	2300      	movs	r3, #0
 800675e:	4604      	mov	r4, r0
 8006760:	4608      	mov	r0, r1
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	f7fa ff14 	bl	8001590 <_sbrk>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d102      	bne.n	8006772 <_sbrk_r+0x1a>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	b103      	cbz	r3, 8006772 <_sbrk_r+0x1a>
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	200003e0 	.word	0x200003e0

08006778 <__assert_func>:
 8006778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800677a:	4614      	mov	r4, r2
 800677c:	461a      	mov	r2, r3
 800677e:	4b09      	ldr	r3, [pc, #36]	@ (80067a4 <__assert_func+0x2c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4605      	mov	r5, r0
 8006784:	68d8      	ldr	r0, [r3, #12]
 8006786:	b954      	cbnz	r4, 800679e <__assert_func+0x26>
 8006788:	4b07      	ldr	r3, [pc, #28]	@ (80067a8 <__assert_func+0x30>)
 800678a:	461c      	mov	r4, r3
 800678c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006790:	9100      	str	r1, [sp, #0]
 8006792:	462b      	mov	r3, r5
 8006794:	4905      	ldr	r1, [pc, #20]	@ (80067ac <__assert_func+0x34>)
 8006796:	f000 f841 	bl	800681c <fiprintf>
 800679a:	f000 f851 	bl	8006840 <abort>
 800679e:	4b04      	ldr	r3, [pc, #16]	@ (80067b0 <__assert_func+0x38>)
 80067a0:	e7f4      	b.n	800678c <__assert_func+0x14>
 80067a2:	bf00      	nop
 80067a4:	20000028 	.word	0x20000028
 80067a8:	08006c36 	.word	0x08006c36
 80067ac:	08006c08 	.word	0x08006c08
 80067b0:	08006bfb 	.word	0x08006bfb

080067b4 <_calloc_r>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	fba1 5402 	umull	r5, r4, r1, r2
 80067ba:	b93c      	cbnz	r4, 80067cc <_calloc_r+0x18>
 80067bc:	4629      	mov	r1, r5
 80067be:	f7ff f94b 	bl	8005a58 <_malloc_r>
 80067c2:	4606      	mov	r6, r0
 80067c4:	b928      	cbnz	r0, 80067d2 <_calloc_r+0x1e>
 80067c6:	2600      	movs	r6, #0
 80067c8:	4630      	mov	r0, r6
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	220c      	movs	r2, #12
 80067ce:	6002      	str	r2, [r0, #0]
 80067d0:	e7f9      	b.n	80067c6 <_calloc_r+0x12>
 80067d2:	462a      	mov	r2, r5
 80067d4:	4621      	mov	r1, r4
 80067d6:	f7fe f9ef 	bl	8004bb8 <memset>
 80067da:	e7f5      	b.n	80067c8 <_calloc_r+0x14>

080067dc <__ascii_mbtowc>:
 80067dc:	b082      	sub	sp, #8
 80067de:	b901      	cbnz	r1, 80067e2 <__ascii_mbtowc+0x6>
 80067e0:	a901      	add	r1, sp, #4
 80067e2:	b142      	cbz	r2, 80067f6 <__ascii_mbtowc+0x1a>
 80067e4:	b14b      	cbz	r3, 80067fa <__ascii_mbtowc+0x1e>
 80067e6:	7813      	ldrb	r3, [r2, #0]
 80067e8:	600b      	str	r3, [r1, #0]
 80067ea:	7812      	ldrb	r2, [r2, #0]
 80067ec:	1e10      	subs	r0, r2, #0
 80067ee:	bf18      	it	ne
 80067f0:	2001      	movne	r0, #1
 80067f2:	b002      	add	sp, #8
 80067f4:	4770      	bx	lr
 80067f6:	4610      	mov	r0, r2
 80067f8:	e7fb      	b.n	80067f2 <__ascii_mbtowc+0x16>
 80067fa:	f06f 0001 	mvn.w	r0, #1
 80067fe:	e7f8      	b.n	80067f2 <__ascii_mbtowc+0x16>

08006800 <__ascii_wctomb>:
 8006800:	4603      	mov	r3, r0
 8006802:	4608      	mov	r0, r1
 8006804:	b141      	cbz	r1, 8006818 <__ascii_wctomb+0x18>
 8006806:	2aff      	cmp	r2, #255	@ 0xff
 8006808:	d904      	bls.n	8006814 <__ascii_wctomb+0x14>
 800680a:	228a      	movs	r2, #138	@ 0x8a
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006812:	4770      	bx	lr
 8006814:	700a      	strb	r2, [r1, #0]
 8006816:	2001      	movs	r0, #1
 8006818:	4770      	bx	lr
	...

0800681c <fiprintf>:
 800681c:	b40e      	push	{r1, r2, r3}
 800681e:	b503      	push	{r0, r1, lr}
 8006820:	4601      	mov	r1, r0
 8006822:	ab03      	add	r3, sp, #12
 8006824:	4805      	ldr	r0, [pc, #20]	@ (800683c <fiprintf+0x20>)
 8006826:	f853 2b04 	ldr.w	r2, [r3], #4
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	f7ff fd4b 	bl	80062c8 <_vfiprintf_r>
 8006832:	b002      	add	sp, #8
 8006834:	f85d eb04 	ldr.w	lr, [sp], #4
 8006838:	b003      	add	sp, #12
 800683a:	4770      	bx	lr
 800683c:	20000028 	.word	0x20000028

08006840 <abort>:
 8006840:	b508      	push	{r3, lr}
 8006842:	2006      	movs	r0, #6
 8006844:	f000 f82c 	bl	80068a0 <raise>
 8006848:	2001      	movs	r0, #1
 800684a:	f7fa fe29 	bl	80014a0 <_exit>

0800684e <_raise_r>:
 800684e:	291f      	cmp	r1, #31
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4605      	mov	r5, r0
 8006854:	460c      	mov	r4, r1
 8006856:	d904      	bls.n	8006862 <_raise_r+0x14>
 8006858:	2316      	movs	r3, #22
 800685a:	6003      	str	r3, [r0, #0]
 800685c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006860:	bd38      	pop	{r3, r4, r5, pc}
 8006862:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006864:	b112      	cbz	r2, 800686c <_raise_r+0x1e>
 8006866:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800686a:	b94b      	cbnz	r3, 8006880 <_raise_r+0x32>
 800686c:	4628      	mov	r0, r5
 800686e:	f000 f831 	bl	80068d4 <_getpid_r>
 8006872:	4622      	mov	r2, r4
 8006874:	4601      	mov	r1, r0
 8006876:	4628      	mov	r0, r5
 8006878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800687c:	f000 b818 	b.w	80068b0 <_kill_r>
 8006880:	2b01      	cmp	r3, #1
 8006882:	d00a      	beq.n	800689a <_raise_r+0x4c>
 8006884:	1c59      	adds	r1, r3, #1
 8006886:	d103      	bne.n	8006890 <_raise_r+0x42>
 8006888:	2316      	movs	r3, #22
 800688a:	6003      	str	r3, [r0, #0]
 800688c:	2001      	movs	r0, #1
 800688e:	e7e7      	b.n	8006860 <_raise_r+0x12>
 8006890:	2100      	movs	r1, #0
 8006892:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006896:	4620      	mov	r0, r4
 8006898:	4798      	blx	r3
 800689a:	2000      	movs	r0, #0
 800689c:	e7e0      	b.n	8006860 <_raise_r+0x12>
	...

080068a0 <raise>:
 80068a0:	4b02      	ldr	r3, [pc, #8]	@ (80068ac <raise+0xc>)
 80068a2:	4601      	mov	r1, r0
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	f7ff bfd2 	b.w	800684e <_raise_r>
 80068aa:	bf00      	nop
 80068ac:	20000028 	.word	0x20000028

080068b0 <_kill_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4d07      	ldr	r5, [pc, #28]	@ (80068d0 <_kill_r+0x20>)
 80068b4:	2300      	movs	r3, #0
 80068b6:	4604      	mov	r4, r0
 80068b8:	4608      	mov	r0, r1
 80068ba:	4611      	mov	r1, r2
 80068bc:	602b      	str	r3, [r5, #0]
 80068be:	f7fa fddf 	bl	8001480 <_kill>
 80068c2:	1c43      	adds	r3, r0, #1
 80068c4:	d102      	bne.n	80068cc <_kill_r+0x1c>
 80068c6:	682b      	ldr	r3, [r5, #0]
 80068c8:	b103      	cbz	r3, 80068cc <_kill_r+0x1c>
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	bd38      	pop	{r3, r4, r5, pc}
 80068ce:	bf00      	nop
 80068d0:	200003e0 	.word	0x200003e0

080068d4 <_getpid_r>:
 80068d4:	f7fa bdcc 	b.w	8001470 <_getpid>

080068d8 <_init>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr

080068e4 <_fini>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	bf00      	nop
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr
